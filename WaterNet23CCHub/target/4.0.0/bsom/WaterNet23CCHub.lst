
c:/Users/mligh/OneDrive/Particle/WaterNet23/WaterNet23CCHub/target/4.0.0/bsom/WaterNet23CCHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000e2c0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c22e0  000c22e0  000122e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c2304  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  2003da80  000c2308  0002da80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000b90  2003dc60  2003dc60  0003dc60  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c24e8  000c24e8  000324e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c2510  000c2510  00032510  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001e22dd  00000000  00000000  00032514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001fad5  00000000  00000000  002147f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0005ad35  00000000  00000000  002342c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003be0  00000000  00000000  0028effb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000eb00  00000000  00000000  00292bdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004f35c  00000000  00000000  002a16db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00072013  00000000  00000000  002f0a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00151e2a  00000000  00000000  00362a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000beac  00000000  00000000  004b4874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00a fcc4 	bl	be9be <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00a fce6 	bl	bea0e <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003da80 	.word	0x2003da80
   b404c:	000c2308 	.word	0x000c2308
   b4050:	2003dc60 	.word	0x2003dc60
   b4054:	2003dc60 	.word	0x2003dc60
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f008 ff01 	bl	bce68 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c22b4 	.word	0x000c22b4
   b4080:	000c22d8 	.word	0x000c22d8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f002 bbde 	b.w	b6844 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f002 ff29 	bl	b6ee0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f008 bea1 	b.w	bcdd8 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f005 bf3d 	b.w	b9f14 <malloc>

000b409a <_Znaj>:
   b409a:	f005 bf3b 	b.w	b9f14 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f005 bf41 	b.w	b9f24 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f005 fe46 	bl	b9d3c <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b9899 	.word	0x000b9899
   b40b8:	000c0b48 	.word	0x000c0b48

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40cc:	4770      	bx	lr

000b40ce <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40ce:	7c03      	ldrb	r3, [r0, #16]
   b40d0:	f013 0308 	ands.w	r3, r3, #8
   b40d4:	bf1e      	ittt	ne
   b40d6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40d8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40da:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40dc:	2b00      	cmp	r3, #0
  }
   b40de:	bfac      	ite	ge
   b40e0:	4618      	movge	r0, r3
   b40e2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40e6:	4770      	bx	lr

000b40e8 <_Z12actionTimer5v>:
        Serial1.println(outStr);
    }
}

void actionTimer5(){
    postStatus = true;
   b40e8:	4b06      	ldr	r3, [pc, #24]	; (b4104 <_Z12actionTimer5v+0x1c>)
   b40ea:	2201      	movs	r2, #1
   b40ec:	701a      	strb	r2, [r3, #0]
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
   b40ee:	4b06      	ldr	r3, [pc, #24]	; (b4108 <_Z12actionTimer5v+0x20>)
   b40f0:	e9d3 3100 	ldrd	r3, r1, [r3]
    for(WaterBot &w: WaterBots){
   b40f4:	4299      	cmp	r1, r3
   b40f6:	d004      	beq.n	b4102 <_Z12actionTimer5v+0x1a>
        w.timeoutCount++;
   b40f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   b40fa:	3201      	adds	r2, #1
   b40fc:	645a      	str	r2, [r3, #68]	; 0x44
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b40fe:	3348      	adds	r3, #72	; 0x48
      {
	++_M_current;
	return *this;
   b4100:	e7f8      	b.n	b40f4 <_Z12actionTimer5v+0xc>
    }
    //if(!BLE.connected)
}
   b4102:	4770      	bx	lr
   b4104:	2003ded0 	.word	0x2003ded0
   b4108:	2003dcb8 	.word	0x2003dcb8

000b410c <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b410c:	4770      	bx	lr

000b410e <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b410e:	b510      	push	{r4, lr}
  }
   b4110:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4112:	4604      	mov	r4, r0
  }
   b4114:	f7ff ffc3 	bl	b409e <_ZdlPvj>
   b4118:	4620      	mov	r0, r4
   b411a:	bd10      	pop	{r4, pc}

000b411c <_ZN4FileD0Ev>:
   b411c:	b510      	push	{r4, lr}
   b411e:	2134      	movs	r1, #52	; 0x34
   b4120:	4604      	mov	r4, r0
   b4122:	f7ff ffbc 	bl	b409e <_ZdlPvj>
   b4126:	4620      	mov	r0, r4
   b4128:	bd10      	pop	{r4, pc}

000b412a <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b412a:	3010      	adds	r0, #16
   b412c:	f004 bc14 	b.w	b8958 <_ZN7FatFile4syncEv>

000b4130 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b4130:	3010      	adds	r0, #16
   b4132:	f004 bb32 	b.w	b879a <_ZN7FatFile4peekEv>

000b4136 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b4136:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b4138:	2201      	movs	r2, #1
   b413a:	f10d 0107 	add.w	r1, sp, #7
   b413e:	3010      	adds	r0, #16
   b4140:	f004 fa7d 	bl	b863e <_ZN7FatFile4readEPvj>
   b4144:	2801      	cmp	r0, #1
   b4146:	bf0c      	ite	eq
   b4148:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b414c:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   b4150:	b003      	add	sp, #12
   b4152:	f85d fb04 	ldr.w	pc, [sp], #4

000b4156 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4156:	3010      	adds	r0, #16
   b4158:	f004 bc98 	b.w	b8a8c <_ZN7FatFile5writeEPKvj>

000b415c <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b415c:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b415e:	2201      	movs	r2, #1
   b4160:	f88d 1007 	strb.w	r1, [sp, #7]
   b4164:	3010      	adds	r0, #16
   b4166:	f10d 0107 	add.w	r1, sp, #7
   b416a:	f004 fc8f 	bl	b8a8c <_ZN7FatFile5writeEPKvj>
  }
   b416e:	b003      	add	sp, #12
   b4170:	f85d fb04 	ldr.w	pc, [sp], #4

000b4174 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4174:	6943      	ldr	r3, [r0, #20]
   b4176:	b113      	cbz	r3, b417e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4178:	6983      	ldr	r3, [r0, #24]
   b417a:	300c      	adds	r0, #12
   b417c:	4718      	bx	r3
            callback();
        }
    }
   b417e:	4770      	bx	lr

000b4180 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4180:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4182:	2100      	movs	r1, #0
   b4184:	4604      	mov	r4, r0
   b4186:	4608      	mov	r0, r1
   b4188:	f005 fc60 	bl	b9a4c <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b418c:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b418e:	4620      	mov	r0, r4
   b4190:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4192:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4194:	f005 fc72 	bl	b9a7c <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4198:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b419a:	b10c      	cbz	r4, b41a0 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b419c:	2301      	movs	r3, #1
   b419e:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b41a0:	2100      	movs	r1, #0
   b41a2:	2001      	movs	r0, #1
   b41a4:	f005 fc52 	bl	b9a4c <os_thread_scheduling>
            }
        }
        if (t) {
   b41a8:	b12c      	cbz	r4, b41b6 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b41aa:	6823      	ldr	r3, [r4, #0]
   b41ac:	4620      	mov	r0, r4
   b41ae:	689b      	ldr	r3, [r3, #8]
   b41b0:	4798      	blx	r3
            t->running = false;
   b41b2:	2300      	movs	r3, #0
   b41b4:	7123      	strb	r3, [r4, #4]
        }
    }
   b41b6:	b002      	add	sp, #8
   b41b8:	bd10      	pop	{r4, pc}
	...

000b41bc <_Z8jHandlerv>:
    #ifdef VERBOSE
    Serial.println("Down trigger");
    #endif
}

void jHandler(){
   b41bc:	b510      	push	{r4, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b41be:	4c05      	ldr	r4, [pc, #20]	; (b41d4 <_Z8jHandlerv+0x18>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41c0:	f005 fb7a 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
   b41c4:	6823      	ldr	r3, [r4, #0]
   b41c6:	1ac0      	subs	r0, r0, r3
   b41c8:	2895      	cmp	r0, #149	; 0x95
   b41ca:	d902      	bls.n	b41d2 <_Z8jHandlerv+0x16>
   b41cc:	f005 fb74 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b41d0:	6020      	str	r0, [r4, #0]
    #ifdef VERBOSE
    Serial.println("Joystick trigger");
    #endif
}
   b41d2:	bd10      	pop	{r4, pc}
   b41d4:	2003dd5c 	.word	0x2003dd5c

000b41d8 <_Z13actionTimer60v>:
void actionTimer60(){
   b41d8:	b510      	push	{r4, lr}
      : _M_current(__i) { }
   b41da:	4b0c      	ldr	r3, [pc, #48]	; (b420c <_Z13actionTimer60v+0x34>)
   b41dc:	e9d3 3100 	ldrd	r3, r1, [r3]
    bool reqLTEStatus = false;
   b41e0:	2200      	movs	r2, #0
            w.timeoutCount = 0;            
   b41e2:	4610      	mov	r0, r2
    for(WaterBot &w: WaterBots){
   b41e4:	4299      	cmp	r1, r3
   b41e6:	d006      	beq.n	b41f6 <_Z13actionTimer60v+0x1e>
        if(w.timeoutCount > XBEE_BLE_MAX_TIMEOUT){
   b41e8:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   b41ea:	2c24      	cmp	r4, #36	; 0x24
            w.timeoutCount = 0;            
   b41ec:	bf84      	itt	hi
   b41ee:	6458      	strhi	r0, [r3, #68]	; 0x44
            reqLTEStatus = true;
   b41f0:	2201      	movhi	r2, #1
      operator++() _GLIBCXX_NOEXCEPT
   b41f2:	3348      	adds	r3, #72	; 0x48
	return *this;
   b41f4:	e7f6      	b.n	b41e4 <_Z13actionTimer60v+0xc>
    if(reqLTEStatus && LTEStatuses < MAX_LTE_STATUSES){
   b41f6:	b142      	cbz	r2, b420a <_Z13actionTimer60v+0x32>
   b41f8:	4a05      	ldr	r2, [pc, #20]	; (b4210 <_Z13actionTimer60v+0x38>)
   b41fa:	7813      	ldrb	r3, [r2, #0]
   b41fc:	2b18      	cmp	r3, #24
   b41fe:	d804      	bhi.n	b420a <_Z13actionTimer60v+0x32>
        LTEStatuses++;
   b4200:	3301      	adds	r3, #1
   b4202:	7013      	strb	r3, [r2, #0]
        statusTimeout = true;
   b4204:	4b03      	ldr	r3, [pc, #12]	; (b4214 <_Z13actionTimer60v+0x3c>)
   b4206:	2201      	movs	r2, #1
   b4208:	701a      	strb	r2, [r3, #0]
}
   b420a:	bd10      	pop	{r4, pc}
   b420c:	2003dcb8 	.word	0x2003dcb8
   b4210:	2003dc80 	.word	0x2003dc80
   b4214:	2003e62d 	.word	0x2003e62d

000b4218 <_Z8lHandlerv>:
void lHandler(){
   b4218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    redrawMenu = true;  
   b421a:	4d27      	ldr	r5, [pc, #156]	; (b42b8 <_Z8lHandlerv+0xa0>)
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b421c:	4e27      	ldr	r6, [pc, #156]	; (b42bc <_Z8lHandlerv+0xa4>)
    redrawMenu = true;  
   b421e:	2401      	movs	r4, #1
   b4220:	702c      	strb	r4, [r5, #0]
   b4222:	f005 fb49 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4226:	6833      	ldr	r3, [r6, #0]
   b4228:	1ac0      	subs	r0, r0, r3
   b422a:	2895      	cmp	r0, #149	; 0x95
   b422c:	d943      	bls.n	b42b6 <_Z8lHandlerv+0x9e>
   b422e:	f005 fb43 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
    if(selectingBots){
   b4232:	4b23      	ldr	r3, [pc, #140]	; (b42c0 <_Z8lHandlerv+0xa8>)
    debounceTime = millis();
   b4234:	6030      	str	r0, [r6, #0]
    if(selectingBots){
   b4236:	781e      	ldrb	r6, [r3, #0]
   b4238:	4922      	ldr	r1, [pc, #136]	; (b42c4 <_Z8lHandlerv+0xac>)
    redrawMenu = true;
   b423a:	702c      	strb	r4, [r5, #0]
    if(selectingBots){
   b423c:	b1b6      	cbz	r6, b426c <_Z8lHandlerv+0x54>
      : _M_current(__i) { }
   b423e:	680b      	ldr	r3, [r1, #0]
        if(botSelect != WaterBots.front().botNum){
   b4240:	4c21      	ldr	r4, [pc, #132]	; (b42c8 <_Z8lHandlerv+0xb0>)
   b4242:	7898      	ldrb	r0, [r3, #2]
   b4244:	7822      	ldrb	r2, [r4, #0]
   b4246:	4290      	cmp	r0, r2
   b4248:	d035      	beq.n	b42b6 <_Z8lHandlerv+0x9e>
   b424a:	684f      	ldr	r7, [r1, #4]
                    ControlledBot = &ws;
   b424c:	f8df c080 	ldr.w	ip, [pc, #128]	; b42d0 <_Z8lHandlerv+0xb8>
   b4250:	2500      	movs	r5, #0
            for(WaterBot &ws: WaterBots){
   b4252:	429f      	cmp	r7, r3
   b4254:	d02d      	beq.n	b42b2 <_Z8lHandlerv+0x9a>
                if(ws.botNum == botSelect){
   b4256:	7899      	ldrb	r1, [r3, #2]
   b4258:	4291      	cmp	r1, r2
                    botSelect = newBotNum;
   b425a:	bf01      	itttt	eq
   b425c:	4602      	moveq	r2, r0
   b425e:	4611      	moveq	r1, r2
                    ControlledBot = &ws;
   b4260:	f8cc 3000 	streq.w	r3, [ip]
   b4264:	4635      	moveq	r5, r6
   b4266:	3348      	adds	r3, #72	; 0x48
	return *this;
   b4268:	4608      	mov	r0, r1
   b426a:	e7f2      	b.n	b4252 <_Z8lHandlerv+0x3a>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b426c:	e9d1 3500 	ldrd	r3, r5, [r1]
            if(ws.botNum == botSelect){
   b4270:	4e15      	ldr	r6, [pc, #84]	; (b42c8 <_Z8lHandlerv+0xb0>)
                MenuItem *curItem = SelectedItem;
   b4272:	4f16      	ldr	r7, [pc, #88]	; (b42cc <_Z8lHandlerv+0xb4>)
                modifiedValue = true;
   b4274:	f8df c05c 	ldr.w	ip, [pc, #92]	; b42d4 <_Z8lHandlerv+0xbc>
        for(WaterBot &ws: WaterBots){
   b4278:	429d      	cmp	r5, r3
   b427a:	d01c      	beq.n	b42b6 <_Z8lHandlerv+0x9e>
            if(ws.botNum == botSelect){
   b427c:	7899      	ldrb	r1, [r3, #2]
   b427e:	7832      	ldrb	r2, [r6, #0]
   b4280:	4291      	cmp	r1, r2
   b4282:	d10a      	bne.n	b429a <_Z8lHandlerv+0x82>
                MenuItem *curItem = SelectedItem;
   b4284:	683a      	ldr	r2, [r7, #0]
                if(curItem == nullptr) return;
   b4286:	b1b2      	cbz	r2, b42b6 <_Z8lHandlerv+0x9e>
                if(curItem->statOnly) return;
   b4288:	7e11      	ldrb	r1, [r2, #24]
   b428a:	b9a1      	cbnz	r1, b42b6 <_Z8lHandlerv+0x9e>
                if(curItem->onOffSetting){
   b428c:	7d90      	ldrb	r0, [r2, #22]
   b428e:	b130      	cbz	r0, b429e <_Z8lHandlerv+0x86>
                    ws.*(curItem->MethodPointerBool) = false;
   b4290:	6912      	ldr	r2, [r2, #16]
   b4292:	5499      	strb	r1, [r3, r2]
                modifiedValue = true;
   b4294:	f88c 4000 	strb.w	r4, [ip]
                ws.updatedControl = true;
   b4298:	705c      	strb	r4, [r3, #1]
      operator++() _GLIBCXX_NOEXCEPT
   b429a:	3348      	adds	r3, #72	; 0x48
	return *this;
   b429c:	e7ec      	b.n	b4278 <_Z8lHandlerv+0x60>
                    if(ws.*(curItem->MethodPointer) > curItem->minVal) ws.*(curItem->MethodPointer) -= curItem->stepSize;
   b429e:	68d0      	ldr	r0, [r2, #12]
   b42a0:	f8b2 e01a 	ldrh.w	lr, [r2, #26]
   b42a4:	5a19      	ldrh	r1, [r3, r0]
   b42a6:	458e      	cmp	lr, r1
   b42a8:	bf3e      	ittt	cc
   b42aa:	8a92      	ldrhcc	r2, [r2, #20]
   b42ac:	1a89      	subcc	r1, r1, r2
   b42ae:	5219      	strhcc	r1, [r3, r0]
   b42b0:	e7f0      	b.n	b4294 <_Z8lHandlerv+0x7c>
   b42b2:	b105      	cbz	r5, b42b6 <_Z8lHandlerv+0x9e>
   b42b4:	7022      	strb	r2, [r4, #0]
}
   b42b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b42b8:	2003da80 	.word	0x2003da80
   b42bc:	2003dd5c 	.word	0x2003dd5c
   b42c0:	2003da81 	.word	0x2003da81
   b42c4:	2003dcb8 	.word	0x2003dcb8
   b42c8:	2003dd51 	.word	0x2003dd51
   b42cc:	2003dca8 	.word	0x2003dca8
   b42d0:	2003dc7c 	.word	0x2003dc7c
   b42d4:	2003de03 	.word	0x2003de03

000b42d8 <_Z8rHandlerv>:
void rHandler(){
   b42d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    redrawMenu = true;  
   b42da:	4b27      	ldr	r3, [pc, #156]	; (b4378 <_Z8rHandlerv+0xa0>)
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b42dc:	4d27      	ldr	r5, [pc, #156]	; (b437c <_Z8rHandlerv+0xa4>)
    redrawMenu = true;  
   b42de:	2401      	movs	r4, #1
   b42e0:	701c      	strb	r4, [r3, #0]
   b42e2:	f005 fae9 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b42e6:	682b      	ldr	r3, [r5, #0]
   b42e8:	1ac0      	subs	r0, r0, r3
   b42ea:	2895      	cmp	r0, #149	; 0x95
   b42ec:	d919      	bls.n	b4322 <_Z8rHandlerv+0x4a>
   b42ee:	f005 fae3 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
    if(selectingBots){
   b42f2:	4b23      	ldr	r3, [pc, #140]	; (b4380 <_Z8rHandlerv+0xa8>)
    debounceTime = millis();
   b42f4:	6028      	str	r0, [r5, #0]
    if(selectingBots){
   b42f6:	781a      	ldrb	r2, [r3, #0]
   b42f8:	4b22      	ldr	r3, [pc, #136]	; (b4384 <_Z8rHandlerv+0xac>)
   b42fa:	b1ba      	cbz	r2, b432c <_Z8rHandlerv+0x54>
      : _M_current(__i) { }
   b42fc:	685c      	ldr	r4, [r3, #4]
        if(botSelect != WaterBots.back().botNum){
   b42fe:	4d22      	ldr	r5, [pc, #136]	; (b4388 <_Z8rHandlerv+0xb0>)
   b4300:	f814 2c46 	ldrb.w	r2, [r4, #-70]
   b4304:	7828      	ldrb	r0, [r5, #0]
   b4306:	4282      	cmp	r2, r0
   b4308:	d00b      	beq.n	b4322 <_Z8rHandlerv+0x4a>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b430a:	681b      	ldr	r3, [r3, #0]
            bool findCurrent = false;
   b430c:	2200      	movs	r2, #0
            for(WaterBot &ws: WaterBots){
   b430e:	429c      	cmp	r4, r3
   b4310:	461e      	mov	r6, r3
   b4312:	d006      	beq.n	b4322 <_Z8rHandlerv+0x4a>
                if(findCurrent){
   b4314:	3348      	adds	r3, #72	; 0x48
                    botSelect = ws.botNum;
   b4316:	f813 1c46 	ldrb.w	r1, [r3, #-70]
                if(findCurrent){
   b431a:	b11a      	cbz	r2, b4324 <_Z8rHandlerv+0x4c>
                    ControlledBot = &ws;
   b431c:	4b1b      	ldr	r3, [pc, #108]	; (b438c <_Z8rHandlerv+0xb4>)
                    botSelect = ws.botNum;
   b431e:	7029      	strb	r1, [r5, #0]
                    ControlledBot = &ws;
   b4320:	601e      	str	r6, [r3, #0]
}
   b4322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(ws.botNum == botSelect) findCurrent = true;
   b4324:	1a41      	subs	r1, r0, r1
   b4326:	424a      	negs	r2, r1
   b4328:	414a      	adcs	r2, r1
	return *this;
   b432a:	e7f0      	b.n	b430e <_Z8rHandlerv+0x36>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b432c:	e9d3 3500 	ldrd	r3, r5, [r3]
            if(ws.botNum == botSelect){
   b4330:	4e15      	ldr	r6, [pc, #84]	; (b4388 <_Z8rHandlerv+0xb0>)
                MenuItem *curItem = SelectedItem;
   b4332:	4f17      	ldr	r7, [pc, #92]	; (b4390 <_Z8rHandlerv+0xb8>)
                modifiedValue = true;
   b4334:	f8df c05c 	ldr.w	ip, [pc, #92]	; b4394 <_Z8rHandlerv+0xbc>
        for(WaterBot &ws: WaterBots){
   b4338:	429d      	cmp	r5, r3
   b433a:	d0f2      	beq.n	b4322 <_Z8rHandlerv+0x4a>
            if(ws.botNum == botSelect){
   b433c:	7899      	ldrb	r1, [r3, #2]
   b433e:	7832      	ldrb	r2, [r6, #0]
   b4340:	4291      	cmp	r1, r2
   b4342:	d10c      	bne.n	b435e <_Z8rHandlerv+0x86>
                MenuItem *curItem = SelectedItem;
   b4344:	683a      	ldr	r2, [r7, #0]
                if(curItem == nullptr) return;
   b4346:	2a00      	cmp	r2, #0
   b4348:	d0eb      	beq.n	b4322 <_Z8rHandlerv+0x4a>
                if(curItem->statOnly) return;
   b434a:	7e11      	ldrb	r1, [r2, #24]
   b434c:	2900      	cmp	r1, #0
   b434e:	d1e8      	bne.n	b4322 <_Z8rHandlerv+0x4a>
                if(curItem->onOffSetting){
   b4350:	7d91      	ldrb	r1, [r2, #22]
   b4352:	b131      	cbz	r1, b4362 <_Z8rHandlerv+0x8a>
                    ws.*(curItem->MethodPointerBool) = true;
   b4354:	6912      	ldr	r2, [r2, #16]
   b4356:	549c      	strb	r4, [r3, r2]
                modifiedValue = true;
   b4358:	f88c 4000 	strb.w	r4, [ip]
                ws.updatedControl = true;
   b435c:	705c      	strb	r4, [r3, #1]
      operator++() _GLIBCXX_NOEXCEPT
   b435e:	3348      	adds	r3, #72	; 0x48
	return *this;
   b4360:	e7ea      	b.n	b4338 <_Z8rHandlerv+0x60>
                    if(ws.*(curItem->MethodPointer) < curItem->maxVal) ws.*(curItem->MethodPointer) += curItem->stepSize;
   b4362:	68d0      	ldr	r0, [r2, #12]
   b4364:	f8b2 e01c 	ldrh.w	lr, [r2, #28]
   b4368:	5a19      	ldrh	r1, [r3, r0]
   b436a:	458e      	cmp	lr, r1
   b436c:	bf82      	ittt	hi
   b436e:	8a92      	ldrhhi	r2, [r2, #20]
   b4370:	1889      	addhi	r1, r1, r2
   b4372:	5219      	strhhi	r1, [r3, r0]
   b4374:	e7f0      	b.n	b4358 <_Z8rHandlerv+0x80>
   b4376:	bf00      	nop
   b4378:	2003da80 	.word	0x2003da80
   b437c:	2003dd5c 	.word	0x2003dd5c
   b4380:	2003da81 	.word	0x2003da81
   b4384:	2003dcb8 	.word	0x2003dcb8
   b4388:	2003dd51 	.word	0x2003dd51
   b438c:	2003dc7c 	.word	0x2003dc7c
   b4390:	2003dca8 	.word	0x2003dca8
   b4394:	2003de03 	.word	0x2003de03

000b4398 <_Z10entHandlerv>:
void entHandler(){
   b4398:	b538      	push	{r3, r4, r5, lr}
    redrawMenu = true;  
   b439a:	4b11      	ldr	r3, [pc, #68]	; (b43e0 <_Z10entHandlerv+0x48>)
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b439c:	4d11      	ldr	r5, [pc, #68]	; (b43e4 <_Z10entHandlerv+0x4c>)
    redrawMenu = true;  
   b439e:	2401      	movs	r4, #1
   b43a0:	701c      	strb	r4, [r3, #0]
   b43a2:	f005 fa89 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b43a6:	682b      	ldr	r3, [r5, #0]
   b43a8:	1ac0      	subs	r0, r0, r3
   b43aa:	2895      	cmp	r0, #149	; 0x95
   b43ac:	d909      	bls.n	b43c2 <_Z10entHandlerv+0x2a>
   b43ae:	f005 fa83 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b43b2:	4a0d      	ldr	r2, [pc, #52]	; (b43e8 <_Z10entHandlerv+0x50>)
    debounceTime = millis();
   b43b4:	6028      	str	r0, [r5, #0]
    if(PopUps.size() != 0){
   b43b6:	e9d2 1300 	ldrd	r1, r3, [r2]
   b43ba:	428b      	cmp	r3, r1
   b43bc:	d002      	beq.n	b43c4 <_Z10entHandlerv+0x2c>
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_nonempty();
	--this->_M_impl._M_finish;
   b43be:	3b49      	subs	r3, #73	; 0x49
   b43c0:	6053      	str	r3, [r2, #4]
}
   b43c2:	bd38      	pop	{r3, r4, r5, pc}
    selectingBots = !selectingBots;
   b43c4:	4a09      	ldr	r2, [pc, #36]	; (b43ec <_Z10entHandlerv+0x54>)
   b43c6:	7813      	ldrb	r3, [r2, #0]
   b43c8:	f083 0301 	eor.w	r3, r3, #1
   b43cc:	7013      	strb	r3, [r2, #0]
    if(modifiedValue){
   b43ce:	4b08      	ldr	r3, [pc, #32]	; (b43f0 <_Z10entHandlerv+0x58>)
   b43d0:	781a      	ldrb	r2, [r3, #0]
   b43d2:	2a00      	cmp	r2, #0
   b43d4:	d0f5      	beq.n	b43c2 <_Z10entHandlerv+0x2a>
        updateControl = true;
   b43d6:	4a07      	ldr	r2, [pc, #28]	; (b43f4 <_Z10entHandlerv+0x5c>)
   b43d8:	7014      	strb	r4, [r2, #0]
        modifiedValue = false;
   b43da:	2200      	movs	r2, #0
   b43dc:	701a      	strb	r2, [r3, #0]
   b43de:	e7f0      	b.n	b43c2 <_Z10entHandlerv+0x2a>
   b43e0:	2003da80 	.word	0x2003da80
   b43e4:	2003dd5c 	.word	0x2003dd5c
   b43e8:	2003dc9c 	.word	0x2003dc9c
   b43ec:	2003da81 	.word	0x2003da81
   b43f0:	2003de03 	.word	0x2003de03
   b43f4:	2003e634 	.word	0x2003e634

000b43f8 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b43f8:	2a01      	cmp	r2, #1
   b43fa:	d102      	bne.n	b4402 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b43fc:	6001      	str	r1, [r0, #0]
      }
   b43fe:	2000      	movs	r0, #0
   b4400:	4770      	bx	lr
	  switch (__op)
   b4402:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4404:	bf04      	itt	eq
   b4406:	680b      	ldreq	r3, [r1, #0]
   b4408:	6003      	streq	r3, [r0, #0]
	      break;
   b440a:	e7f8      	b.n	b43fe <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b440c <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b440c:	6803      	ldr	r3, [r0, #0]
   b440e:	4718      	bx	r3

000b4410 <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4410:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4412:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4414:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4416:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4418:	b130      	cbz	r0, b4428 <_ZN5Timer5startEj.isra.0+0x18>
   b441a:	2300      	movs	r3, #0
   b441c:	e9cd 3300 	strd	r3, r3, [sp]
   b4420:	461a      	mov	r2, r3
   b4422:	2102      	movs	r1, #2
   b4424:	f005 fb32 	bl	b9a8c <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b4428:	68a0      	ldr	r0, [r4, #8]
   b442a:	b130      	cbz	r0, b443a <_ZN5Timer5startEj.isra.0+0x2a>
   b442c:	2300      	movs	r3, #0
   b442e:	e9cd 5300 	strd	r5, r3, [sp]
   b4432:	461a      	mov	r2, r3
   b4434:	4619      	mov	r1, r3
   b4436:	f005 fb29 	bl	b9a8c <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b443a:	b003      	add	sp, #12
   b443c:	bd30      	pop	{r4, r5, pc}

000b443e <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b443e:	b40e      	push	{r1, r2, r3}
   b4440:	b503      	push	{r0, r1, lr}
   b4442:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4444:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4446:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b444a:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b444c:	f008 fb67 	bl	bcb1e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4450:	b002      	add	sp, #8
   b4452:	f85d eb04 	ldr.w	lr, [sp], #4
   b4456:	b003      	add	sp, #12
   b4458:	4770      	bx	lr
	...

000b445c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b445c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b445e:	4604      	mov	r4, r0
   b4460:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4462:	7922      	ldrb	r2, [r4, #4]
   b4464:	68a3      	ldr	r3, [r4, #8]
   b4466:	b132      	cbz	r2, b4476 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4468:	b9a3      	cbnz	r3, b4494 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b446a:	490b      	ldr	r1, [pc, #44]	; (b4498 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b446c:	b002      	add	sp, #8
   b446e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4472:	f008 bb19 	b.w	bcaa8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4476:	4a09      	ldr	r2, [pc, #36]	; (b449c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4478:	7b26      	ldrb	r6, [r4, #12]
   b447a:	4d09      	ldr	r5, [pc, #36]	; (b44a0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b447c:	4909      	ldr	r1, [pc, #36]	; (b44a4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b447e:	7b64      	ldrb	r4, [r4, #13]
   b4480:	2e01      	cmp	r6, #1
   b4482:	bf18      	it	ne
   b4484:	4629      	movne	r1, r5
   b4486:	e9cd 1400 	strd	r1, r4, [sp]
   b448a:	4907      	ldr	r1, [pc, #28]	; (b44a8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b448c:	f7ff ffd7 	bl	b443e <_ZN5Print6printfEPKcz>
  }
   b4490:	b002      	add	sp, #8
   b4492:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4494:	4a05      	ldr	r2, [pc, #20]	; (b44ac <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4496:	e7ef      	b.n	b4478 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4498:	000c0b6e 	.word	0x000c0b6e
   b449c:	000c0c12 	.word	0x000c0c12
   b44a0:	000c0b6a 	.word	0x000c0b6a
   b44a4:	000c0b66 	.word	0x000c0b66
   b44a8:	000c0b84 	.word	0x000c0b84
   b44ac:	000c0b5d 	.word	0x000c0b5d

000b44b0 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b44b0:	b40e      	push	{r1, r2, r3}
   b44b2:	b503      	push	{r0, r1, lr}
   b44b4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b44b6:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b44b8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b44bc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b44be:	f008 fb2e 	bl	bcb1e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b44c2:	b002      	add	sp, #8
   b44c4:	f85d eb04 	ldr.w	lr, [sp], #4
   b44c8:	b003      	add	sp, #12
   b44ca:	4770      	bx	lr

000b44cc <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b44cc:	b510      	push	{r4, lr}
      if (_M_manager)
   b44ce:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b44d0:	4604      	mov	r4, r0
      if (_M_manager)
   b44d2:	b113      	cbz	r3, b44da <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b44d4:	2203      	movs	r2, #3
   b44d6:	4601      	mov	r1, r0
   b44d8:	4798      	blx	r3
    }
   b44da:	4620      	mov	r0, r4
   b44dc:	bd10      	pop	{r4, pc}
	...

000b44e0 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b44e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b44e2:	4b13      	ldr	r3, [pc, #76]	; (b4530 <_ZN5TimerD1Ev+0x50>)
   b44e4:	6003      	str	r3, [r0, #0]
   b44e6:	4604      	mov	r4, r0
        if (handle) {
   b44e8:	6880      	ldr	r0, [r0, #8]
   b44ea:	b1c8      	cbz	r0, b4520 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b44ec:	2500      	movs	r5, #0
   b44ee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b44f2:	e9cd 3500 	strd	r3, r5, [sp]
   b44f6:	2102      	movs	r1, #2
   b44f8:	462b      	mov	r3, r5
   b44fa:	462a      	mov	r2, r5
   b44fc:	f005 fac6 	bl	b9a8c <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b4500:	68a0      	ldr	r0, [r4, #8]
   b4502:	4629      	mov	r1, r5
   b4504:	f005 fae2 	bl	b9acc <os_timer_set_id>
            while (running) {
   b4508:	7923      	ldrb	r3, [r4, #4]
   b450a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b450e:	b113      	cbz	r3, b4516 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b4510:	f005 fa94 	bl	b9a3c <os_thread_yield>
            while (running) {
   b4514:	e7f8      	b.n	b4508 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b4516:	68a0      	ldr	r0, [r4, #8]
   b4518:	4629      	mov	r1, r5
   b451a:	f005 faa7 	bl	b9a6c <os_timer_destroy>
            handle = nullptr;
   b451e:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4520:	f104 000c 	add.w	r0, r4, #12
   b4524:	f7ff ffd2 	bl	b44cc <_ZNSt14_Function_baseD1Ev>
    }
   b4528:	4620      	mov	r0, r4
   b452a:	b003      	add	sp, #12
   b452c:	bd30      	pop	{r4, r5, pc}
   b452e:	bf00      	nop
   b4530:	000c0f94 	.word	0x000c0f94

000b4534 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4534:	b510      	push	{r4, lr}
   b4536:	4604      	mov	r4, r0
    }
   b4538:	f7ff ffd2 	bl	b44e0 <_ZN5TimerD1Ev>
   b453c:	4620      	mov	r0, r4
   b453e:	211c      	movs	r1, #28
   b4540:	f7ff fdad 	bl	b409e <_ZdlPvj>
   b4544:	4620      	mov	r0, r4
   b4546:	bd10      	pop	{r4, pc}

000b4548 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b4548:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b454a:	6843      	ldr	r3, [r0, #4]
   b454c:	3b01      	subs	r3, #1
    {
   b454e:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4550:	6043      	str	r3, [r0, #4]
   b4552:	b963      	cbnz	r3, b456e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b4554:	6803      	ldr	r3, [r0, #0]
   b4556:	689b      	ldr	r3, [r3, #8]
   b4558:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b455a:	68a3      	ldr	r3, [r4, #8]
   b455c:	3b01      	subs	r3, #1
   b455e:	60a3      	str	r3, [r4, #8]
   b4560:	b92b      	cbnz	r3, b456e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4562:	6823      	ldr	r3, [r4, #0]
   b4564:	4620      	mov	r0, r4
   b4566:	68db      	ldr	r3, [r3, #12]
        }
    }
   b4568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b456c:	4718      	bx	r3
    }
   b456e:	bd10      	pop	{r4, pc}

000b4570 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b4570:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4572:	468c      	mov	ip, r1
   b4574:	2500      	movs	r5, #0
   b4576:	4914      	ldr	r1, [pc, #80]	; (b45c8 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b4578:	7105      	strb	r5, [r0, #4]
   b457a:	4604      	mov	r4, r0
   b457c:	6085      	str	r5, [r0, #8]
   b457e:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4580:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4584:	b085      	sub	sp, #20
   b4586:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4588:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b458c:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4590:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4594:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4598:	e897 0003 	ldmia.w	r7, {r0, r1}
   b459c:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b45a0:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b45a2:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b45a4:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b45a6:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b45a8:	6095      	str	r5, [r2, #8]
   b45aa:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b45ac:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b45ae:	e9cd 3500 	strd	r3, r5, [sp]
   b45b2:	4a06      	ldr	r2, [pc, #24]	; (b45cc <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b45b4:	4623      	mov	r3, r4
   b45b6:	4661      	mov	r1, ip
   b45b8:	f104 0008 	add.w	r0, r4, #8
   b45bc:	f005 fa4e 	bl	b9a5c <os_timer_create>
    }
   b45c0:	4620      	mov	r0, r4
   b45c2:	b005      	add	sp, #20
   b45c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b45c6:	bf00      	nop
   b45c8:	000c0f94 	.word	0x000c0f94
   b45cc:	000b4181 	.word	0x000b4181

000b45d0 <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b45d0:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b45d2:	460a      	mov	r2, r1
   b45d4:	4901      	ldr	r1, [pc, #4]	; (b45dc <_ZN7FatFile4openEPKci+0xc>)
   b45d6:	6809      	ldr	r1, [r1, #0]
   b45d8:	f004 b9fb 	b.w	b89d2 <_ZN7FatFile4openEPS_PKci>
   b45dc:	2003e648 	.word	0x2003e648

000b45e0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void offloadDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b45e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b45e2:	b095      	sub	sp, #84	; 0x54
   b45e4:	4604      	mov	r4, r0
   b45e6:	af00      	add	r7, sp, #0
   b45e8:	460d      	mov	r5, r1
    memset(fileCommand,0,8 + MAX_FILENAME_LEN);
   b45ea:	221e      	movs	r2, #30
   b45ec:	2100      	movs	r1, #0
   b45ee:	f107 0030 	add.w	r0, r7, #48	; 0x30
   b45f2:	f00a fa0c 	bl	bea0e <memset>
    memcpy(fileCommand,data,8);
   b45f6:	6820      	ldr	r0, [r4, #0]
   b45f8:	6861      	ldr	r1, [r4, #4]
   b45fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b45fe:	c303      	stmia	r3!, {r0, r1}
    if(fileCommand[0] == 'f'){
   b4600:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   b4604:	2b66      	cmp	r3, #102	; 0x66
    myFile.print(dataStr);
   b4606:	466e      	mov	r6, sp
    if(fileCommand[0] == 'f'){
   b4608:	d150      	bne.n	b46ac <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xcc>
        if(!strcmp(fileCommand,"filename")){
   b460a:	4930      	ldr	r1, [pc, #192]	; (b46cc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xec>)
   b460c:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4610:	f00a fa81 	bl	beb16 <strcmp>
   b4614:	bb90      	cbnz	r0, b467c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9c>
    return m_attr;
   b4616:	482e      	ldr	r0, [pc, #184]	; (b46d0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf0>)
            if(myFile.isOpen()) myFile.close();
   b4618:	7c03      	ldrb	r3, [r0, #16]
   b461a:	b113      	cbz	r3, b4622 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x42>
   b461c:	3010      	adds	r0, #16
   b461e:	f004 f9d1 	bl	b89c4 <_ZN7FatFile5closeEv>
            memcpy(fileCommand,data,8 + MAX_FILENAME_LEN);
   b4622:	4623      	mov	r3, r4
   b4624:	f107 0228 	add.w	r2, r7, #40	; 0x28
   b4628:	f104 0520 	add.w	r5, r4, #32
   b462c:	6818      	ldr	r0, [r3, #0]
   b462e:	6859      	ldr	r1, [r3, #4]
   b4630:	4614      	mov	r4, r2
   b4632:	c403      	stmia	r4!, {r0, r1}
   b4634:	3308      	adds	r3, #8
   b4636:	42ab      	cmp	r3, r5
   b4638:	4622      	mov	r2, r4
   b463a:	d1f7      	bne.n	b462c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4c>
   b463c:	6818      	ldr	r0, [r3, #0]
   b463e:	6020      	str	r0, [r4, #0]
   b4640:	889b      	ldrh	r3, [r3, #4]
   b4642:	80a3      	strh	r3, [r4, #4]
            strncpy(offloadFilename,fileCommand+8,MAX_FILENAME_LEN);
   b4644:	221e      	movs	r2, #30
   b4646:	f107 0130 	add.w	r1, r7, #48	; 0x30
   b464a:	4822      	ldr	r0, [pc, #136]	; (b46d4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf4>)
   b464c:	f00a faaf 	bl	bebae <strncpy>
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4650:	2300      	movs	r3, #0
    return file.open(this, path, O_RDONLY);
   b4652:	4a20      	ldr	r2, [pc, #128]	; (b46d4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf4>)
   b4654:	4920      	ldr	r1, [pc, #128]	; (b46d8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf8>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4656:	607b      	str	r3, [r7, #4]
    return file.open(this, path, O_RDONLY);
   b4658:	1d38      	adds	r0, r7, #4
   b465a:	f004 f9ba 	bl	b89d2 <_ZN7FatFile4openEPS_PKci>
            if(sd.exists(offloadFilename)){
   b465e:	b118      	cbz	r0, b4668 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   b4660:	491c      	ldr	r1, [pc, #112]	; (b46d4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf4>)
   b4662:	481d      	ldr	r0, [pc, #116]	; (b46d8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf8>)
   b4664:	f004 fa01 	bl	b8a6a <_ZN7FatFile6removeEPS_PKc>
            myFile.open(offloadFilename, O_RDWR | O_CREAT | O_AT_END);
   b4668:	491a      	ldr	r1, [pc, #104]	; (b46d4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf4>)
   b466a:	481c      	ldr	r0, [pc, #112]	; (b46dc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>)
   b466c:	f244 2202 	movw	r2, #16898	; 0x4202
   b4670:	f7ff ffae 	bl	b45d0 <_ZN7FatFile4openEPKci>
}
   b4674:	3754      	adds	r7, #84	; 0x54
   b4676:	46b5      	mov	sp, r6
   b4678:	46bd      	mov	sp, r7
   b467a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(!strcmp(fileCommand,"filecomp")){
   b467c:	4918      	ldr	r1, [pc, #96]	; (b46e0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x100>)
   b467e:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4682:	f00a fa48 	bl	beb16 <strcmp>
   b4686:	b938      	cbnz	r0, b4698 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb8>
    return m_attr;
   b4688:	4b11      	ldr	r3, [pc, #68]	; (b46d0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf0>)
            if(myFile.isOpen()) myFile.close();
   b468a:	7c1b      	ldrb	r3, [r3, #16]
   b468c:	2b00      	cmp	r3, #0
   b468e:	d0f1      	beq.n	b4674 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>
   b4690:	4812      	ldr	r0, [pc, #72]	; (b46dc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>)
   b4692:	f004 f997 	bl	b89c4 <_ZN7FatFile5closeEv>
   b4696:	e7ed      	b.n	b4674 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>
        else if(!strcmp(fileCommand,"filedone")){
   b4698:	4912      	ldr	r1, [pc, #72]	; (b46e4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x104>)
   b469a:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b469e:	f00a fa3a 	bl	beb16 <strcmp>
   b46a2:	b918      	cbnz	r0, b46ac <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xcc>
            offloadingDone = true;
   b46a4:	4b10      	ldr	r3, [pc, #64]	; (b46e8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x108>)
   b46a6:	2201      	movs	r2, #1
   b46a8:	701a      	strb	r2, [r3, #0]
   b46aa:	e7ed      	b.n	b4688 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa8>
    char dataStr[len];
   b46ac:	1deb      	adds	r3, r5, #7
   b46ae:	f023 0307 	bic.w	r3, r3, #7
   b46b2:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(dataStr,data,len);
   b46b6:	4621      	mov	r1, r4
   b46b8:	462a      	mov	r2, r5
   b46ba:	4668      	mov	r0, sp
   b46bc:	f00a f97f 	bl	be9be <memcpy>
    myFile.print(dataStr);
   b46c0:	4669      	mov	r1, sp
   b46c2:	4803      	ldr	r0, [pc, #12]	; (b46d0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf0>)
   b46c4:	f008 f9f0 	bl	bcaa8 <_ZN5Print5printEPKc>
   b46c8:	e7d4      	b.n	b4674 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>
   b46ca:	bf00      	nop
   b46cc:	000c0ba1 	.word	0x000c0ba1
   b46d0:	2003de04 	.word	0x2003de04
   b46d4:	2003de38 	.word	0x2003de38
   b46d8:	2003e5e4 	.word	0x2003e5e4
   b46dc:	2003de14 	.word	0x2003de14
   b46e0:	000c0baa 	.word	0x000c0baa
   b46e4:	000c0bb3 	.word	0x000c0bb3
   b46e8:	2003de56 	.word	0x2003de56

000b46ec <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b46ec:	b530      	push	{r4, r5, lr}
   b46ee:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b46f0:	4b1b      	ldr	r3, [pc, #108]	; (b4760 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b46f2:	9300      	str	r3, [sp, #0]
   b46f4:	7913      	ldrb	r3, [r2, #4]
   b46f6:	f88d 3004 	strb.w	r3, [sp, #4]
   b46fa:	6893      	ldr	r3, [r2, #8]
   b46fc:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b46fe:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b4702:	8993      	ldrh	r3, [r2, #12]
   b4704:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4708:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b470a:	460a      	mov	r2, r1
   b470c:	466b      	mov	r3, sp
   b470e:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b4712:	4628      	mov	r0, r5
   b4714:	f004 fcf6 	bl	b9104 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b4718:	b910      	cbnz	r0, b4720 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b471a:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b471c:	b005      	add	sp, #20
   b471e:	bd30      	pop	{r4, r5, pc}
    m_blockDev = blockDev;
   b4720:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b4722:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b4726:	4628      	mov	r0, r5
   b4728:	f004 f94c 	bl	b89c4 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b472c:	2101      	movs	r1, #1
   b472e:	4620      	mov	r0, r4
   b4730:	f004 fb92 	bl	b8e58 <_ZN9FatVolume4initEh>
   b4734:	4601      	mov	r1, r0
   b4736:	b168      	cbz	r0, b4754 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b4738:	4621      	mov	r1, r4
   b473a:	4628      	mov	r0, r5
   b473c:	f003 ff79 	bl	b8632 <_ZN7FatFile8openRootEP9FatVolume>
   b4740:	2800      	cmp	r0, #0
   b4742:	d0ea      	beq.n	b471a <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b4744:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b4748:	f013 0f70 	tst.w	r3, #112	; 0x70
   b474c:	d0e5      	beq.n	b471a <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b474e:	4b05      	ldr	r3, [pc, #20]	; (b4764 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b4750:	601d      	str	r5, [r3, #0]
    return true;
   b4752:	e7e3      	b.n	b471c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b4754:	4620      	mov	r0, r4
   b4756:	f004 fb7f 	bl	b8e58 <_ZN9FatVolume4initEh>
   b475a:	2800      	cmp	r0, #0
   b475c:	d1ec      	bne.n	b4738 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b475e:	e7dc      	b.n	b471a <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b4760:	000c0f80 	.word	0x000c0f80
   b4764:	2003e648 	.word	0x2003e648

000b4768 <_Z10logMessagePKc>:
void logMessage(const char *message){
   b4768:	b538      	push	{r3, r4, r5, lr}
    return m_attr;
   b476a:	4c0d      	ldr	r4, [pc, #52]	; (b47a0 <_Z10logMessagePKc+0x38>)
    if(!logFile.isOpen()){
   b476c:	7c23      	ldrb	r3, [r4, #16]
void logMessage(const char *message){
   b476e:	4605      	mov	r5, r0
    if(!logFile.isOpen()){
   b4770:	b983      	cbnz	r3, b4794 <_Z10logMessagePKc+0x2c>
        logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4772:	490c      	ldr	r1, [pc, #48]	; (b47a4 <_Z10logMessagePKc+0x3c>)
   b4774:	f244 2202 	movw	r2, #16898	; 0x4202
   b4778:	f104 0010 	add.w	r0, r4, #16
   b477c:	f7ff ff28 	bl	b45d0 <_ZN7FatFile4openEPKci>
        logFile.println(message);
   b4780:	4629      	mov	r1, r5
   b4782:	4620      	mov	r0, r4
   b4784:	f008 f9a3 	bl	bcace <_ZN5Print7printlnEPKc>
        logFile.close();
   b4788:	f104 0010 	add.w	r0, r4, #16
}
   b478c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        logFile.close();
   b4790:	f004 b918 	b.w	b89c4 <_ZN7FatFile5closeEv>
    else logFile.println(message);
   b4794:	4601      	mov	r1, r0
   b4796:	4620      	mov	r0, r4
}
   b4798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    else logFile.println(message);
   b479c:	f008 b997 	b.w	bcace <_ZN5Print7printlnEPKc>
   b47a0:	2003ddcc 	.word	0x2003ddcc
   b47a4:	2003dd74 	.word	0x2003dd74

000b47a8 <_ZN8WaterBotC1Ev>:
class WaterBot{
   b47a8:	f240 1201 	movw	r2, #257	; 0x101
   b47ac:	8002      	strh	r2, [r0, #0]
   b47ae:	4a0b      	ldr	r2, [pc, #44]	; (b47dc <_ZN8WaterBotC1Ev+0x34>)
   b47b0:	2100      	movs	r1, #0
   b47b2:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b47b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   b47ba:	6102      	str	r2, [r0, #16]
   b47bc:	4a08      	ldr	r2, [pc, #32]	; (b47e0 <_ZN8WaterBotC1Ev+0x38>)
   b47be:	6182      	str	r2, [r0, #24]
   b47c0:	61c2      	str	r2, [r0, #28]
   b47c2:	2200      	movs	r2, #0
   b47c4:	e9c0 110f 	strd	r1, r1, [r0, #60]	; 0x3c
   b47c8:	60c1      	str	r1, [r0, #12]
   b47ca:	7501      	strb	r1, [r0, #20]
   b47cc:	6202      	str	r2, [r0, #32]
   b47ce:	6242      	str	r2, [r0, #36]	; 0x24
   b47d0:	6282      	str	r2, [r0, #40]	; 0x28
   b47d2:	62c2      	str	r2, [r0, #44]	; 0x2c
   b47d4:	6302      	str	r2, [r0, #48]	; 0x30
   b47d6:	6342      	str	r2, [r0, #52]	; 0x34
   b47d8:	6382      	str	r2, [r0, #56]	; 0x38
   b47da:	4770      	bx	lr
   b47dc:	01010100 	.word	0x01010100
   b47e0:	c479c000 	.word	0xc479c000

000b47e4 <_Z17processRPiCommandPKch>:
void processRPiCommand(const char *command, uint8_t mode){
   b47e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b47e8:	b094      	sub	sp, #80	; 0x50
    if(command[0] == 'R' && command[1] == 'P'){  
   b47ea:	7803      	ldrb	r3, [r0, #0]
   b47ec:	2b52      	cmp	r3, #82	; 0x52
void processRPiCommand(const char *command, uint8_t mode){
   b47ee:	af06      	add	r7, sp, #24
   b47f0:	4604      	mov	r4, r0
   b47f2:	4689      	mov	r9, r1
    if(command[0] == 'R' && command[1] == 'P'){  
   b47f4:	d172      	bne.n	b48dc <_Z17processRPiCommandPKch+0xf8>
   b47f6:	7843      	ldrb	r3, [r0, #1]
   b47f8:	2b50      	cmp	r3, #80	; 0x50
   b47fa:	d16f      	bne.n	b48dc <_Z17processRPiCommandPKch+0xf8>
        char dataStr[strlen(command)-8];
   b47fc:	f00a f9bb 	bl	beb76 <strlen>
   b4800:	3801      	subs	r0, #1
   b4802:	f020 0007 	bic.w	r0, r0, #7
        }
   b4806:	46e8      	mov	r8, sp
        char dataStr[strlen(command)-8];
   b4808:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b480c:	4620      	mov	r0, r4
   b480e:	f00a f9b2 	bl	beb76 <strlen>
        char dataStr[strlen(command)-8];
   b4812:	f10d 0a18 	add.w	sl, sp, #24
        dataStr[strlen(command)-9] = '\0';
   b4816:	4450      	add	r0, sl
   b4818:	2500      	movs	r5, #0
   b481a:	f800 5c09 	strb.w	r5, [r0, #-9]
        checkStr[0] = command[strlen(command)-2];
   b481e:	4620      	mov	r0, r4
        cmdStr[3] = '\0';
   b4820:	74fd      	strb	r5, [r7, #19]
        checkStr[0] = command[strlen(command)-2];
   b4822:	f00a f9a8 	bl	beb76 <strlen>
   b4826:	4420      	add	r0, r4
   b4828:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b482c:	733b      	strb	r3, [r7, #12]
        checkStr[1] = command[strlen(command)-1];
   b482e:	4620      	mov	r0, r4
   b4830:	f00a f9a1 	bl	beb76 <strlen>
   b4834:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4836:	4629      	mov	r1, r5
        checkStr[1] = command[strlen(command)-1];
   b4838:	f810 3c01 	ldrb.w	r3, [r0, #-1]
        checkStr[2] = '\0';
   b483c:	73bd      	strb	r5, [r7, #14]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b483e:	2210      	movs	r2, #16
   b4840:	f107 000c 	add.w	r0, r7, #12
        checkStr[1] = command[strlen(command)-1];
   b4844:	737b      	strb	r3, [r7, #13]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4846:	f00b f883 	bl	bf950 <strtol>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b484a:	2504      	movs	r5, #4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b484c:	4606      	mov	r6, r0
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b484e:	4620      	mov	r0, r4
   b4850:	f00a f991 	bl	beb76 <strlen>
   b4854:	3802      	subs	r0, #2
   b4856:	4285      	cmp	r5, r0
   b4858:	d212      	bcs.n	b4880 <_Z17processRPiCommandPKch+0x9c>
            if(i < 7) cmdStr[i-4] = command[i];
   b485a:	2d06      	cmp	r5, #6
   b485c:	bf9b      	ittet	ls
   b485e:	f107 0338 	addls.w	r3, r7, #56	; 0x38
   b4862:	195b      	addls	r3, r3, r5
            else dataStr[i-7] = command[i];
   b4864:	eb0a 0305 	addhi.w	r3, sl, r5
            if(i < 7) cmdStr[i-4] = command[i];
   b4868:	5d62      	ldrbls	r2, [r4, r5]
            else dataStr[i-7] = command[i];
   b486a:	bf8c      	ite	hi
   b486c:	5d62      	ldrbhi	r2, [r4, r5]
            if(i < 7) cmdStr[i-4] = command[i];
   b486e:	f803 2c2c 	strbls.w	r2, [r3, #-44]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4872:	f105 0501 	add.w	r5, r5, #1
            else dataStr[i-7] = command[i];
   b4876:	bf88      	it	hi
   b4878:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b487c:	b2ed      	uxtb	r5, r5
   b487e:	e7e6      	b.n	b484e <_Z17processRPiCommandPKch+0x6a>
        if(checksum != strlen(command)-2){
   b4880:	b2f6      	uxtb	r6, r6
   b4882:	42b0      	cmp	r0, r6
   b4884:	d034      	beq.n	b48f0 <_Z17processRPiCommandPKch+0x10c>
   b4886:	4d49      	ldr	r5, [pc, #292]	; (b49ac <_Z17processRPiCommandPKch+0x1c8>)
            if(!logFile.isOpen()){
   b4888:	7c2b      	ldrb	r3, [r5, #16]
   b488a:	bb5b      	cbnz	r3, b48e4 <_Z17processRPiCommandPKch+0x100>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b488c:	4948      	ldr	r1, [pc, #288]	; (b49b0 <_Z17processRPiCommandPKch+0x1cc>)
   b488e:	f244 2202 	movw	r2, #16898	; 0x4202
   b4892:	f105 0010 	add.w	r0, r5, #16
   b4896:	f7ff fe9b 	bl	b45d0 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] RPi Message Checksum Does Not Match!: %s",command);
   b489a:	4946      	ldr	r1, [pc, #280]	; (b49b4 <_Z17processRPiCommandPKch+0x1d0>)
   b489c:	4622      	mov	r2, r4
   b489e:	4628      	mov	r0, r5
   b48a0:	f7ff fe06 	bl	b44b0 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b48a4:	f105 0010 	add.w	r0, r5, #16
   b48a8:	f004 f88c 	bl	b89c4 <_ZN7FatFile5closeEv>
            if((command[1] >= '0' && command[1] <= '9') || command[1] == 'C'){
   b48ac:	7863      	ldrb	r3, [r4, #1]
   b48ae:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b48b2:	2a09      	cmp	r2, #9
   b48b4:	d901      	bls.n	b48ba <_Z17processRPiCommandPKch+0xd6>
   b48b6:	2b43      	cmp	r3, #67	; 0x43
   b48b8:	d10f      	bne.n	b48da <_Z17processRPiCommandPKch+0xf6>
                rxBotNum[0] = command[0];
   b48ba:	7822      	ldrb	r2, [r4, #0]
   b48bc:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
                rxBotNum[1] = command[1];
   b48c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                sprintf(errBuf,"CC%2snak%3s",rxBotNum,cmdStr);
   b48c4:	493c      	ldr	r1, [pc, #240]	; (b49b8 <_Z17processRPiCommandPKch+0x1d4>)
   b48c6:	483d      	ldr	r0, [pc, #244]	; (b49bc <_Z17processRPiCommandPKch+0x1d8>)
   b48c8:	f107 0310 	add.w	r3, r7, #16
   b48cc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   b48d0:	f005 fb38 	bl	b9f44 <sprintf>
                errModeReply = mode;
   b48d4:	4b3a      	ldr	r3, [pc, #232]	; (b49c0 <_Z17processRPiCommandPKch+0x1dc>)
   b48d6:	f883 9000 	strb.w	r9, [r3]
   b48da:	46c5      	mov	sp, r8
}
   b48dc:	3738      	adds	r7, #56	; 0x38
   b48de:	46bd      	mov	sp, r7
   b48e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else logFile.printlnf("[WARN] RPi Message Checksum Does Not Match!: %s",command);
   b48e4:	4933      	ldr	r1, [pc, #204]	; (b49b4 <_Z17processRPiCommandPKch+0x1d0>)
   b48e6:	4622      	mov	r2, r4
   b48e8:	4628      	mov	r0, r5
   b48ea:	f7ff fde1 	bl	b44b0 <_ZN5Print8printlnfEPKcz>
   b48ee:	e7dd      	b.n	b48ac <_Z17processRPiCommandPKch+0xc8>
        if(!strcmp(cmdStr,"ctl")){
   b48f0:	4934      	ldr	r1, [pc, #208]	; (b49c4 <_Z17processRPiCommandPKch+0x1e0>)
   b48f2:	f107 0010 	add.w	r0, r7, #16
   b48f6:	f00a f90e 	bl	beb16 <strcmp>
   b48fa:	4605      	mov	r5, r0
   b48fc:	2800      	cmp	r0, #0
   b48fe:	d1ec      	bne.n	b48da <_Z17processRPiCommandPKch+0xf6>
            sscanf(dataStr,"%s %s %s %d %d %d %d",idStr,GPSLatstr,GPSLonstr,&drivemode,&offloading,&recording,&signal);
   b4900:	1dfb      	adds	r3, r7, #7
   b4902:	9304      	str	r3, [sp, #16]
   b4904:	1dbb      	adds	r3, r7, #6
   b4906:	9303      	str	r3, [sp, #12]
   b4908:	1d3b      	adds	r3, r7, #4
   b490a:	9302      	str	r3, [sp, #8]
   b490c:	f107 062c 	add.w	r6, r7, #44	; 0x2c
   b4910:	1d7b      	adds	r3, r7, #5
   b4912:	492d      	ldr	r1, [pc, #180]	; (b49c8 <_Z17processRPiCommandPKch+0x1e4>)
   b4914:	9301      	str	r3, [sp, #4]
   b4916:	f107 0214 	add.w	r2, r7, #20
   b491a:	f107 0320 	add.w	r3, r7, #32
   b491e:	9600      	str	r6, [sp, #0]
   b4920:	4650      	mov	r0, sl
   b4922:	f005 fb17 	bl	b9f54 <sscanf>
            char botChar[2] = {command[8], '\0'};
   b4926:	7a23      	ldrb	r3, [r4, #8]
   b4928:	723b      	strb	r3, [r7, #8]
            uint8_t targetBot = atoi(botChar);
   b492a:	f107 0008 	add.w	r0, r7, #8
            char botChar[2] = {command[8], '\0'};
   b492e:	727d      	strb	r5, [r7, #9]
            uint8_t targetBot = atoi(botChar);
   b4930:	f00a f831 	bl	be996 <atoi>
      : _M_current(__i) { }
   b4934:	4b25      	ldr	r3, [pc, #148]	; (b49cc <_Z17processRPiCommandPKch+0x1e8>)
   b4936:	e9d3 3100 	ldrd	r3, r1, [r3]
   b493a:	b2c0      	uxtb	r0, r0
            for(WaterBot &wb: WaterBots){
   b493c:	4299      	cmp	r1, r3
   b493e:	461c      	mov	r4, r3
   b4940:	d0cb      	beq.n	b48da <_Z17processRPiCommandPKch+0xf6>
                if(wb.botNum == targetBot){
   b4942:	78a2      	ldrb	r2, [r4, #2]
   b4944:	4282      	cmp	r2, r0
   b4946:	f103 0348 	add.w	r3, r3, #72	; 0x48
   b494a:	d1f7      	bne.n	b493c <_Z17processRPiCommandPKch+0x158>
                    wb.TargetLat = atof(GPSLatstr);
   b494c:	f107 0020 	add.w	r0, r7, #32
   b4950:	f00a f81e 	bl	be990 <atof>
   b4954:	ec51 0b10 	vmov	r0, r1, d0
   b4958:	f009 ffa6 	bl	be8a8 <__aeabi_d2f>
   b495c:	61a0      	str	r0, [r4, #24]
                    wb.TargetLon = atof(GPSLonstr);
   b495e:	4630      	mov	r0, r6
   b4960:	f00a f816 	bl	be990 <atof>
   b4964:	ec51 0b10 	vmov	r0, r1, d0
   b4968:	f009 ff9e 	bl	be8a8 <__aeabi_d2f>
                    wb.driveMode = drivemode;
   b496c:	797b      	ldrb	r3, [r7, #5]
   b496e:	81a3      	strh	r3, [r4, #12]
                    wb.offloading = offloading;
   b4970:	793b      	ldrb	r3, [r7, #4]
                    if(botSelect == wb.botNum) redrawMenu = true;
   b4972:	78a2      	ldrb	r2, [r4, #2]
                    wb.TargetLon = atof(GPSLonstr);
   b4974:	61e0      	str	r0, [r4, #28]
                    wb.offloading = offloading;
   b4976:	3b00      	subs	r3, #0
   b4978:	bf18      	it	ne
   b497a:	2301      	movne	r3, #1
   b497c:	7523      	strb	r3, [r4, #20]
                    wb.dataRecording = recording;
   b497e:	79bb      	ldrb	r3, [r7, #6]
   b4980:	3b00      	subs	r3, #0
   b4982:	bf18      	it	ne
   b4984:	2301      	movne	r3, #1
   b4986:	74e3      	strb	r3, [r4, #19]
                    wb.signal = signal;
   b4988:	79fb      	ldrb	r3, [r7, #7]
   b498a:	3b00      	subs	r3, #0
   b498c:	bf18      	it	ne
   b498e:	2301      	movne	r3, #1
   b4990:	73a3      	strb	r3, [r4, #14]
                    if(botSelect == wb.botNum) redrawMenu = true;
   b4992:	4b0f      	ldr	r3, [pc, #60]	; (b49d0 <_Z17processRPiCommandPKch+0x1ec>)
   b4994:	781b      	ldrb	r3, [r3, #0]
   b4996:	429a      	cmp	r2, r3
   b4998:	bf08      	it	eq
   b499a:	4a0e      	ldreq	r2, [pc, #56]	; (b49d4 <_Z17processRPiCommandPKch+0x1f0>)
   b499c:	f04f 0301 	mov.w	r3, #1
   b49a0:	bf08      	it	eq
   b49a2:	7013      	strbeq	r3, [r2, #0]
                    updateControl = true;
   b49a4:	4a0c      	ldr	r2, [pc, #48]	; (b49d8 <_Z17processRPiCommandPKch+0x1f4>)
                    wb.updatedControl = true;
   b49a6:	7063      	strb	r3, [r4, #1]
                    updateControl = true;
   b49a8:	7013      	strb	r3, [r2, #0]
                    return;
   b49aa:	e796      	b.n	b48da <_Z17processRPiCommandPKch+0xf6>
   b49ac:	2003ddcc 	.word	0x2003ddcc
   b49b0:	2003dd74 	.word	0x2003dd74
   b49b4:	000c0bbc 	.word	0x000c0bbc
   b49b8:	000c0bec 	.word	0x000c0bec
   b49bc:	2003dd60 	.word	0x2003dd60
   b49c0:	2003dd73 	.word	0x2003dd73
   b49c4:	000c0bf8 	.word	0x000c0bf8
   b49c8:	000c0bfc 	.word	0x000c0bfc
   b49cc:	2003dcb8 	.word	0x2003dcb8
   b49d0:	2003dd51 	.word	0x2003dd51
   b49d4:	2003da80 	.word	0x2003da80
   b49d8:	2003e634 	.word	0x2003e634

000b49dc <_Z9setupXBeev>:
void setupXBee(){
   b49dc:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b49de:	f009 f8bf 	bl	bdb60 <_Z22__fetch_global_Serial1v>
   b49e2:	4908      	ldr	r1, [pc, #32]	; (b4a04 <_Z9setupXBeev+0x28>)
   b49e4:	f7ff fd2b 	bl	b443e <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b49e8:	2014      	movs	r0, #20
   b49ea:	f008 f9c9 	bl	bcd80 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b49ee:	f009 f8b7 	bl	bdb60 <_Z22__fetch_global_Serial1v>
   b49f2:	4905      	ldr	r1, [pc, #20]	; (b4a08 <_Z9setupXBeev+0x2c>)
   b49f4:	f7ff fd23 	bl	b443e <_ZN5Print6printfEPKcz>
}
   b49f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b49fc:	2014      	movs	r0, #20
   b49fe:	f008 b9bf 	b.w	bcd80 <delay>
   b4a02:	bf00      	nop
   b4a04:	000c0c11 	.word	0x000c0c11
   b4a08:	000c0b6c 	.word	0x000c0b6c

000b4a0c <_Z10RPiHandlerv>:
void RPiHandler(){
   b4a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            if(logMessages){
   b4a10:	4e27      	ldr	r6, [pc, #156]	; (b4ab0 <_Z10RPiHandlerv+0xa4>)
   b4a12:	4c28      	ldr	r4, [pc, #160]	; (b4ab4 <_Z10RPiHandlerv+0xa8>)
                logFile.printlnf("[INFO] Received Raspberry Pi Message: %s",data);
   b4a14:	f8df 80a8 	ldr.w	r8, [pc, #168]	; b4ac0 <_Z10RPiHandlerv+0xb4>
void RPiHandler(){
   b4a18:	b088      	sub	sp, #32
   b4a1a:	af00      	add	r7, sp, #0
    while(Serial.available()){
   b4a1c:	f008 fdea 	bl	bd5f4 <_Z16_fetch_usbserialv>
   b4a20:	6803      	ldr	r3, [r0, #0]
   b4a22:	691b      	ldr	r3, [r3, #16]
   b4a24:	4798      	blx	r3
   b4a26:	2800      	cmp	r0, #0
   b4a28:	d03d      	beq.n	b4aa6 <_Z10RPiHandlerv+0x9a>
            String data = Serial.readStringUntil('\n');
   b4a2a:	f008 fde3 	bl	bd5f4 <_Z16_fetch_usbserialv>
   b4a2e:	220a      	movs	r2, #10
   b4a30:	4601      	mov	r1, r0
   b4a32:	4638      	mov	r0, r7
   b4a34:	f008 f8ba 	bl	bcbac <_ZN6Stream15readStringUntilEc>
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b4a38:	68ba      	ldr	r2, [r7, #8]
            char buffer[data.length() + 2];
   b4a3a:	f102 0309 	add.w	r3, r2, #9
   b4a3e:	f023 0307 	bic.w	r3, r3, #7
    }
   b4a42:	466d      	mov	r5, sp
            char buffer[data.length() + 2];
   b4a44:	ebad 0d03 	sub.w	sp, sp, r3
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   b4a48:	3201      	adds	r2, #1
   b4a4a:	2300      	movs	r3, #0
   b4a4c:	4669      	mov	r1, sp
   b4a4e:	4638      	mov	r0, r7
   b4a50:	f005 fce2 	bl	ba418 <_ZNK6String8getBytesEPhjj>
            buffer[data.length() + 1] = 0;
   b4a54:	68bb      	ldr	r3, [r7, #8]
   b4a56:	446b      	add	r3, sp
   b4a58:	2200      	movs	r2, #0
   b4a5a:	705a      	strb	r2, [r3, #1]
            processRPiCommand(buffer,3);
   b4a5c:	2103      	movs	r1, #3
   b4a5e:	4668      	mov	r0, sp
   b4a60:	f7ff fec0 	bl	b47e4 <_Z17processRPiCommandPKch>
            if(logMessages){
   b4a64:	7833      	ldrb	r3, [r6, #0]
   b4a66:	b1cb      	cbz	r3, b4a9c <_Z10RPiHandlerv+0x90>
                if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4a68:	7c23      	ldrb	r3, [r4, #16]
   b4a6a:	b92b      	cbnz	r3, b4a78 <_Z10RPiHandlerv+0x6c>
   b4a6c:	4912      	ldr	r1, [pc, #72]	; (b4ab8 <_Z10RPiHandlerv+0xac>)
   b4a6e:	4813      	ldr	r0, [pc, #76]	; (b4abc <_Z10RPiHandlerv+0xb0>)
   b4a70:	f244 2202 	movw	r2, #16898	; 0x4202
   b4a74:	f7ff fdac 	bl	b45d0 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[INFO] Received Raspberry Pi Message: %s",data);
   b4a78:	4639      	mov	r1, r7
   b4a7a:	f107 0010 	add.w	r0, r7, #16
   b4a7e:	f005 fc5d 	bl	ba33c <_ZN6StringC1ERKS_>
   b4a82:	f107 0210 	add.w	r2, r7, #16
   b4a86:	4641      	mov	r1, r8
   b4a88:	4620      	mov	r0, r4
   b4a8a:	f7ff fd11 	bl	b44b0 <_ZN5Print8printlnfEPKcz>
   b4a8e:	f107 0010 	add.w	r0, r7, #16
   b4a92:	f005 fbbd 	bl	ba210 <_ZN6StringD1Ev>
                logFile.close();
   b4a96:	4809      	ldr	r0, [pc, #36]	; (b4abc <_Z10RPiHandlerv+0xb0>)
   b4a98:	f003 ff94 	bl	b89c4 <_ZN7FatFile5closeEv>
            String data = Serial.readStringUntil('\n');
   b4a9c:	4638      	mov	r0, r7
   b4a9e:	f005 fbb7 	bl	ba210 <_ZN6StringD1Ev>
   b4aa2:	46ad      	mov	sp, r5
    while(Serial.available()){
   b4aa4:	e7ba      	b.n	b4a1c <_Z10RPiHandlerv+0x10>
}
   b4aa6:	3720      	adds	r7, #32
   b4aa8:	46bd      	mov	sp, r7
   b4aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4aae:	bf00      	nop
   b4ab0:	2003de00 	.word	0x2003de00
   b4ab4:	2003ddcc 	.word	0x2003ddcc
   b4ab8:	2003dd74 	.word	0x2003dd74
   b4abc:	2003dddc 	.word	0x2003dddc
   b4ac0:	000c0c13 	.word	0x000c0c13

000b4ac4 <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b4ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4ac8:	b084      	sub	sp, #16
   b4aca:	af02      	add	r7, sp, #8
   b4acc:	4680      	mov	r8, r0
   b4ace:	4691      	mov	r9, r2
   b4ad0:	461e      	mov	r6, r3
   b4ad2:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b4ad4:	f00a f84f 	bl	beb76 <strlen>
   b4ad8:	3009      	adds	r0, #9
   b4ada:	f020 0107 	bic.w	r1, r0, #7
   b4ade:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4ae2:	4640      	mov	r0, r8
   b4ae4:	f00a f847 	bl	beb76 <strlen>
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b4ae8:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4aec:	4926      	ldr	r1, [pc, #152]	; (b4b88 <_Z8sendDataPKchbbb+0xc4>)
    char outStr[strlen(dataOut)+2];
   b4aee:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4af0:	4603      	mov	r3, r0
   b4af2:	4642      	mov	r2, r8
   b4af4:	4620      	mov	r0, r4
   b4af6:	f005 fa25 	bl	b9f44 <sprintf>
    if(sendLTE || sendMode == 4){
   b4afa:	f1ba 0f00 	cmp.w	sl, #0
   b4afe:	d101      	bne.n	b4b04 <_Z8sendDataPKchbbb+0x40>
   b4b00:	2d04      	cmp	r5, #4
   b4b02:	d10d      	bne.n	b4b20 <_Z8sendDataPKchbbb+0x5c>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4b04:	4b21      	ldr	r3, [pc, #132]	; (b4b8c <_Z8sendDataPKchbbb+0xc8>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4b06:	4922      	ldr	r1, [pc, #136]	; (b4b90 <_Z8sendDataPKchbbb+0xcc>)
   b4b08:	781b      	ldrb	r3, [r3, #0]
   b4b0a:	f88d 3000 	strb.w	r3, [sp]
   b4b0e:	4638      	mov	r0, r7
   b4b10:	233c      	movs	r3, #60	; 0x3c
   b4b12:	4622      	mov	r2, r4
   b4b14:	f008 fb2c 	bl	bd170 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4b18:	6878      	ldr	r0, [r7, #4]
   b4b1a:	b108      	cbz	r0, b4b20 <_Z8sendDataPKchbbb+0x5c>
	  _M_pi->_M_release();
   b4b1c:	f7ff fd14 	bl	b4548 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b4b20:	f1b9 0f00 	cmp.w	r9, #0
   b4b24:	d101      	bne.n	b4b2a <_Z8sendDataPKchbbb+0x66>
   b4b26:	2d01      	cmp	r5, #1
   b4b28:	d121      	bne.n	b4b6e <_Z8sendDataPKchbbb+0xaa>
   b4b2a:	f006 f98f 	bl	bae4c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4b2e:	f006 fa3a 	bl	bafa6 <_ZNK8particle14BleLocalDevice9connectedEv>
   b4b32:	b1e0      	cbz	r0, b4b6e <_Z8sendDataPKchbbb+0xaa>
        uint8_t txBuf_tmp[strlen(outStr)];
   b4b34:	4620      	mov	r0, r4
   b4b36:	f00a f81e 	bl	beb76 <strlen>
   b4b3a:	3007      	adds	r0, #7
   b4b3c:	f020 0007 	bic.w	r0, r0, #7
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b4b40:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b4b42:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b4b46:	4620      	mov	r0, r4
   b4b48:	f00a f815 	bl	beb76 <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b4b4c:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b4b50:	4602      	mov	r2, r0
   b4b52:	4621      	mov	r1, r4
   b4b54:	4648      	mov	r0, r9
   b4b56:	f009 ff32 	bl	be9be <memcpy>
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b4b5a:	4620      	mov	r0, r4
   b4b5c:	f00a f80b 	bl	beb76 <strlen>
   b4b60:	2300      	movs	r3, #0
   b4b62:	4602      	mov	r2, r0
   b4b64:	4649      	mov	r1, r9
   b4b66:	480b      	ldr	r0, [pc, #44]	; (b4b94 <_Z8sendDataPKchbbb+0xd0>)
   b4b68:	f006 f80a 	bl	bab80 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b4b6c:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b4b6e:	b90e      	cbnz	r6, b4b74 <_Z8sendDataPKchbbb+0xb0>
   b4b70:	2d02      	cmp	r5, #2
   b4b72:	d104      	bne.n	b4b7e <_Z8sendDataPKchbbb+0xba>
        Serial1.println(outStr);
   b4b74:	f008 fff4 	bl	bdb60 <_Z22__fetch_global_Serial1v>
   b4b78:	4621      	mov	r1, r4
   b4b7a:	f007 ffa8 	bl	bcace <_ZN5Print7printlnEPKc>
}
   b4b7e:	3708      	adds	r7, #8
   b4b80:	46bd      	mov	sp, r7
   b4b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4b86:	bf00      	nop
   b4b88:	000c0c3c 	.word	0x000c0c3c
   b4b8c:	2003dd00 	.word	0x2003dd00
   b4b90:	000c0c43 	.word	0x000c0c43
   b4b94:	2003dec0 	.word	0x2003dec0

000b4b98 <_Z18manualMotorControlh>:
void manualMotorControl(uint8_t commandedBot){
   b4b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4b9c:	4605      	mov	r5, r0
   b4b9e:	b087      	sub	sp, #28
    VRead = 4095-analogRead(JOYV_ADC);
   b4ba0:	2010      	movs	r0, #16
   b4ba2:	f008 ffab 	bl	bdafc <analogRead>
   b4ba6:	f5c0 667f 	rsb	r6, r0, #4080	; 0xff0
   b4baa:	4604      	mov	r4, r0
    HRead = analogRead(JOYH_ADC);
   b4bac:	2011      	movs	r0, #17
   b4bae:	f008 ffa5 	bl	bdafc <analogRead>
    VRead = 4095-analogRead(JOYV_ADC);
   b4bb2:	360f      	adds	r6, #15
    if(VRead < JOY_MID - JOY_DEADZONE){
   b4bb4:	f240 77dc 	movw	r7, #2012	; 0x7dc
   b4bb8:	42be      	cmp	r6, r7
    HRead = analogRead(JOYH_ADC);
   b4bba:	4603      	mov	r3, r0
    if(VRead < JOY_MID - JOY_DEADZONE){
   b4bbc:	dc40      	bgt.n	b4c40 <_Z18manualMotorControlh+0xa8>
        VSet = -90 * (VRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4bbe:	f5c4 6402 	rsb	r4, r4, #2080	; 0x820
        if(VSet < -90) VSet = -90;
   b4bc2:	4a72      	ldr	r2, [pc, #456]	; (b4d8c <_Z18manualMotorControlh+0x1f4>)
        VSet = -90 * (VRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4bc4:	3402      	adds	r4, #2
   b4bc6:	f06f 0759 	mvn.w	r7, #89	; 0x59
   b4bca:	437c      	muls	r4, r7
        if(VSet < -90) VSet = -90;
   b4bcc:	4294      	cmp	r4, r2
   b4bce:	dc03      	bgt.n	b4bd8 <_Z18manualMotorControlh+0x40>
        VSet = -90 * (VRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4bd0:	f2a7 7782 	subw	r7, r7, #1922	; 0x782
   b4bd4:	fb94 f7f7 	sdiv	r7, r4, r7
    if(HRead < JOY_MID - JOY_DEADZONE){
   b4bd8:	f240 72dc 	movw	r2, #2012	; 0x7dc
   b4bdc:	4293      	cmp	r3, r2
   b4bde:	dc42      	bgt.n	b4c66 <_Z18manualMotorControlh+0xce>
        HSet = -90 * (HRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4be0:	f2a3 70dd 	subw	r0, r3, #2013	; 0x7dd
   b4be4:	f06f 0659 	mvn.w	r6, #89	; 0x59
        if(HSet < -90) HSet = -90;
   b4be8:	4b68      	ldr	r3, [pc, #416]	; (b4d8c <_Z18manualMotorControlh+0x1f4>)
        HSet = -90 * (HRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4bea:	4370      	muls	r0, r6
        if(HSet < -90) HSet = -90;
   b4bec:	4298      	cmp	r0, r3
   b4bee:	dc03      	bgt.n	b4bf8 <_Z18manualMotorControlh+0x60>
        HSet = -90 * (HRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4bf0:	f2a6 7682 	subw	r6, r6, #1922	; 0x782
   b4bf4:	fb90 f6f6 	sdiv	r6, r0, r6
    if(VSet > 0){
   b4bf8:	2f00      	cmp	r7, #0
   b4bfa:	dc45      	bgt.n	b4c88 <_Z18manualMotorControlh+0xf0>
                RSpeed = 90 - HSet/2 + VSet;
   b4bfc:	eb06 71d6 	add.w	r1, r6, r6, lsr #31
   b4c00:	1048      	asrs	r0, r1, #1
            if((0-HSet) > (0-VSet)){    //H = -90, V = 0 -> LS = 45, RS = 135, H = -90, V = -90 -> LS = 45, RS = 0
   b4c02:	42b7      	cmp	r7, r6
                RSpeed = 90 - HSet/2 + VSet;
   b4c04:	f1c0 0000 	rsb	r0, r0, #0
   b4c08:	ea4f 0861 	mov.w	r8, r1, asr #1
            if((0-HSet) > (0-VSet)){    //H = -90, V = 0 -> LS = 45, RS = 135, H = -90, V = -90 -> LS = 45, RS = 0
   b4c0c:	f340 80b0 	ble.w	b4d70 <_Z18manualMotorControlh+0x1d8>
                RSpeed = 90 - HSet/2 + (VSet*1.5);
   b4c10:	305a      	adds	r0, #90	; 0x5a
   b4c12:	f009 fb25 	bl	be260 <__aeabi_i2d>
   b4c16:	4682      	mov	sl, r0
   b4c18:	4638      	mov	r0, r7
   b4c1a:	468b      	mov	fp, r1
   b4c1c:	f009 fb20 	bl	be260 <__aeabi_i2d>
   b4c20:	4b5b      	ldr	r3, [pc, #364]	; (b4d90 <_Z18manualMotorControlh+0x1f8>)
   b4c22:	2200      	movs	r2, #0
   b4c24:	f009 fb86 	bl	be334 <__aeabi_dmul>
   b4c28:	4602      	mov	r2, r0
   b4c2a:	460b      	mov	r3, r1
   b4c2c:	4650      	mov	r0, sl
   b4c2e:	4659      	mov	r1, fp
   b4c30:	f009 f9ca 	bl	bdfc8 <__adddf3>
   b4c34:	f009 fe18 	bl	be868 <__aeabi_d2uiz>
                LSpeed = 90 + HSet/2;
   b4c38:	f108 015a 	add.w	r1, r8, #90	; 0x5a
                RSpeed = 90 - HSet/2 + (VSet*1.5);
   b4c3c:	b2c4      	uxtb	r4, r0
                LSpeed = 90 + HSet/2;
   b4c3e:	e035      	b.n	b4cac <_Z18manualMotorControlh+0x114>
    else if(VRead > JOY_MID + JOY_DEADZONE){
   b4c40:	f640 0223 	movw	r2, #2083	; 0x823
   b4c44:	4296      	cmp	r6, r2
   b4c46:	dd0a      	ble.n	b4c5e <_Z18manualMotorControlh+0xc6>
        VSet = 90 * (VRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4c48:	1b38      	subs	r0, r7, r4
        if(VSet > 90) VSet = 90;
   b4c4a:	4a52      	ldr	r2, [pc, #328]	; (b4d94 <_Z18manualMotorControlh+0x1fc>)
        VSet = 90 * (VRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4c4c:	245a      	movs	r4, #90	; 0x5a
   b4c4e:	4360      	muls	r0, r4
        if(VSet > 90) VSet = 90;
   b4c50:	4290      	cmp	r0, r2
   b4c52:	dc06      	bgt.n	b4c62 <_Z18manualMotorControlh+0xca>
        VSet = 90 * (VRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4c54:	f240 74db 	movw	r4, #2011	; 0x7db
   b4c58:	fb90 f7f4 	sdiv	r7, r0, r4
   b4c5c:	e7bc      	b.n	b4bd8 <_Z18manualMotorControlh+0x40>
        VSet = 0;
   b4c5e:	2700      	movs	r7, #0
   b4c60:	e7ba      	b.n	b4bd8 <_Z18manualMotorControlh+0x40>
        if(VSet > 90) VSet = 90;
   b4c62:	4627      	mov	r7, r4
   b4c64:	e7b8      	b.n	b4bd8 <_Z18manualMotorControlh+0x40>
    else if(HRead > JOY_MID + JOY_DEADZONE){
   b4c66:	f640 0223 	movw	r2, #2083	; 0x823
   b4c6a:	4293      	cmp	r3, r2
   b4c6c:	dd21      	ble.n	b4cb2 <_Z18manualMotorControlh+0x11a>
        HSet = 90 * (HRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4c6e:	f6a3 0023 	subw	r0, r3, #2083	; 0x823
   b4c72:	265a      	movs	r6, #90	; 0x5a
        if(HSet > 90) HSet = 90;
   b4c74:	4b47      	ldr	r3, [pc, #284]	; (b4d94 <_Z18manualMotorControlh+0x1fc>)
        HSet = 90 * (HRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4c76:	4370      	muls	r0, r6
        if(HSet > 90) HSet = 90;
   b4c78:	4298      	cmp	r0, r3
   b4c7a:	dc03      	bgt.n	b4c84 <_Z18manualMotorControlh+0xec>
        HSet = 90 * (HRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4c7c:	f240 76db 	movw	r6, #2011	; 0x7db
   b4c80:	fbb0 f6f6 	udiv	r6, r0, r6
    if(VSet > 0){
   b4c84:	2f00      	cmp	r7, #0
   b4c86:	dd48      	ble.n	b4d1a <_Z18manualMotorControlh+0x182>
   b4c88:	f107 025a 	add.w	r2, r7, #90	; 0x5a
   b4c8c:	0ff1      	lsrs	r1, r6, #31
        if(HSet > 0){
   b4c8e:	2e00      	cmp	r6, #0
    LSpeed = 90 + VSet/2;
   b4c90:	f3c7 0047 	ubfx	r0, r7, #1, #8
        if(HSet > 0){
   b4c94:	b2d2      	uxtb	r2, r2
                RSpeed = 90 - HSet/2 + VSet;
   b4c96:	4431      	add	r1, r6
        if(HSet > 0){
   b4c98:	dd0d      	ble.n	b4cb6 <_Z18manualMotorControlh+0x11e>
                RSpeed = 90 - HSet/2 + VSet;
   b4c9a:	eba2 0161 	sub.w	r1, r2, r1, asr #1
            if(HSet > VSet){        //H = 90, V = 0 -> LS = 135, RS = 45, H = 90, V = 90 -> LS = 180, RS = 135
   b4c9e:	42b7      	cmp	r7, r6
                RSpeed = 90 - HSet/2 + VSet;
   b4ca0:	b2cc      	uxtb	r4, r1
            if(HSet > VSet){        //H = 90, V = 0 -> LS = 135, RS = 45, H = 90, V = 90 -> LS = 180, RS = 135
   b4ca2:	da6c      	bge.n	b4d7e <_Z18manualMotorControlh+0x1e6>
                LSpeed = 90 + HSet/2 + VSet/2;
   b4ca4:	f100 015a 	add.w	r1, r0, #90	; 0x5a
   b4ca8:	eb01 0166 	add.w	r1, r1, r6, asr #1
                LSpeed = 90 + HSet/2;
   b4cac:	fa5f f881 	uxtb.w	r8, r1
   b4cb0:	e00f      	b.n	b4cd2 <_Z18manualMotorControlh+0x13a>
        HSet = 0;
   b4cb2:	2600      	movs	r6, #0
   b4cb4:	e7e6      	b.n	b4c84 <_Z18manualMotorControlh+0xec>
            if((0-HSet) > VSet){
   b4cb6:	4276      	negs	r6, r6
                LSpeed = 90 + HSet/2 + VSet;
   b4cb8:	ea4f 0c61 	mov.w	ip, r1, asr #1
            if((0-HSet) > VSet){
   b4cbc:	42be      	cmp	r6, r7
                LSpeed = 90 + HSet/2 + VSet;
   b4cbe:	eb02 0161 	add.w	r1, r2, r1, asr #1
   b4cc2:	fa5f f881 	uxtb.w	r8, r1
            if((0-HSet) > VSet){
   b4cc6:	dd5c      	ble.n	b4d82 <_Z18manualMotorControlh+0x1ea>
                RSpeed = 90 - HSet/2 + VSet/2;
   b4cc8:	f100 045a 	add.w	r4, r0, #90	; 0x5a
   b4ccc:	eba4 040c 	sub.w	r4, r4, ip
                RSpeed = 90 + HSet/2 + VSet;
   b4cd0:	b2e4      	uxtb	r4, r4
    if(!stopActive){
   b4cd2:	4b31      	ldr	r3, [pc, #196]	; (b4d98 <_Z18manualMotorControlh+0x200>)
   b4cd4:	781b      	ldrb	r3, [r3, #0]
   b4cd6:	2b00      	cmp	r3, #0
   b4cd8:	d155      	bne.n	b4d86 <_Z18manualMotorControlh+0x1ee>
   b4cda:	4b30      	ldr	r3, [pc, #192]	; (b4d9c <_Z18manualMotorControlh+0x204>)
            if(wb.driveMode == 0 && wb.botNum == botSelect){
   b4cdc:	f8df a0c0 	ldr.w	sl, [pc, #192]	; b4da0 <_Z18manualMotorControlh+0x208>
                sprintf(mtrStr,"CCB%dmtr%03d%03d",commandedBot, LSpeed, RSpeed);
   b4ce0:	f8df b0c0 	ldr.w	fp, [pc, #192]	; b4da4 <_Z18manualMotorControlh+0x20c>
   b4ce4:	e9d3 6900 	ldrd	r6, r9, [r3]
        for(WaterBot wb: WaterBots){
   b4ce8:	454e      	cmp	r6, r9
   b4cea:	d04c      	beq.n	b4d86 <_Z18manualMotorControlh+0x1ee>
            if(wb.driveMode == 0 && wb.botNum == botSelect){
   b4cec:	89b7      	ldrh	r7, [r6, #12]
   b4cee:	b997      	cbnz	r7, b4d16 <_Z18manualMotorControlh+0x17e>
   b4cf0:	f89a 2000 	ldrb.w	r2, [sl]
   b4cf4:	78b3      	ldrb	r3, [r6, #2]
   b4cf6:	429a      	cmp	r2, r3
   b4cf8:	d10d      	bne.n	b4d16 <_Z18manualMotorControlh+0x17e>
                sprintf(mtrStr,"CCB%dmtr%03d%03d",commandedBot, LSpeed, RSpeed);
   b4cfa:	4643      	mov	r3, r8
   b4cfc:	462a      	mov	r2, r5
   b4cfe:	4659      	mov	r1, fp
   b4d00:	9400      	str	r4, [sp, #0]
   b4d02:	a802      	add	r0, sp, #8
   b4d04:	f005 f91e 	bl	b9f44 <sprintf>
                sendData(mtrStr,0,true,false, false);
   b4d08:	9700      	str	r7, [sp, #0]
   b4d0a:	463b      	mov	r3, r7
   b4d0c:	2201      	movs	r2, #1
   b4d0e:	4639      	mov	r1, r7
   b4d10:	a802      	add	r0, sp, #8
   b4d12:	f7ff fed7 	bl	b4ac4 <_Z8sendDataPKchbbb>
      operator++() _GLIBCXX_NOEXCEPT
   b4d16:	3648      	adds	r6, #72	; 0x48
	return *this;
   b4d18:	e7e6      	b.n	b4ce8 <_Z18manualMotorControlh+0x150>
        if(HSet > 0){
   b4d1a:	2e00      	cmp	r6, #0
   b4d1c:	f43f af6e 	beq.w	b4bfc <_Z18manualMotorControlh+0x64>
            if(HSet > (0-VSet)){        // H = 90, V = 0 -> LS = 135, RS = 45, H = 90, V = -90 -> LS = 0; RS = 45
   b4d20:	427b      	negs	r3, r7
   b4d22:	42b3      	cmp	r3, r6
                LSpeed = 90 + HSet/2 + VSet/2;
   b4d24:	ea4f 0066 	mov.w	r0, r6, asr #1
            if(HSet > (0-VSet)){        // H = 90, V = 0 -> LS = 135, RS = 45, H = 90, V = -90 -> LS = 0; RS = 45
   b4d28:	da1b      	bge.n	b4d62 <_Z18manualMotorControlh+0x1ca>
                LSpeed = (90 + HSet/2 + VSet*1.5 );
   b4d2a:	305a      	adds	r0, #90	; 0x5a
   b4d2c:	f009 fa98 	bl	be260 <__aeabi_i2d>
   b4d30:	4680      	mov	r8, r0
   b4d32:	4638      	mov	r0, r7
   b4d34:	4689      	mov	r9, r1
   b4d36:	f009 fa93 	bl	be260 <__aeabi_i2d>
   b4d3a:	4b15      	ldr	r3, [pc, #84]	; (b4d90 <_Z18manualMotorControlh+0x1f8>)
   b4d3c:	2200      	movs	r2, #0
   b4d3e:	f009 faf9 	bl	be334 <__aeabi_dmul>
   b4d42:	4602      	mov	r2, r0
   b4d44:	460b      	mov	r3, r1
   b4d46:	4640      	mov	r0, r8
   b4d48:	4649      	mov	r1, r9
   b4d4a:	f009 f93d 	bl	bdfc8 <__adddf3>
   b4d4e:	f009 fd8b 	bl	be868 <__aeabi_d2uiz>
                RSpeed = (90 - HSet/2);      
   b4d52:	eb06 74d6 	add.w	r4, r6, r6, lsr #31
   b4d56:	1064      	asrs	r4, r4, #1
                LSpeed = (90 + HSet/2 + VSet*1.5 );
   b4d58:	fa5f f880 	uxtb.w	r8, r0
                RSpeed = (90 - HSet/2);      
   b4d5c:	f1c4 045a 	rsb	r4, r4, #90	; 0x5a
   b4d60:	e7b6      	b.n	b4cd0 <_Z18manualMotorControlh+0x138>
                LSpeed = 90 + VSet;
   b4d62:	f107 045a 	add.w	r4, r7, #90	; 0x5a
   b4d66:	fa5f f884 	uxtb.w	r8, r4
                RSpeed = 90 + HSet/2 + VSet;
   b4d6a:	fa50 f484 	uxtab	r4, r0, r4
   b4d6e:	e7af      	b.n	b4cd0 <_Z18manualMotorControlh+0x138>
                RSpeed = 90 + VSet;
   b4d70:	375a      	adds	r7, #90	; 0x5a
   b4d72:	b2fc      	uxtb	r4, r7
                LSpeed = 90 - HSet/2 + VSet;
   b4d74:	fa50 f787 	uxtab	r7, r0, r7
   b4d78:	fa5f f887 	uxtb.w	r8, r7
   b4d7c:	e7a9      	b.n	b4cd2 <_Z18manualMotorControlh+0x13a>
                LSpeed = 90 + VSet;
   b4d7e:	4690      	mov	r8, r2
   b4d80:	e7a7      	b.n	b4cd2 <_Z18manualMotorControlh+0x13a>
                RSpeed = 90 + VSet;
   b4d82:	4614      	mov	r4, r2
   b4d84:	e7a5      	b.n	b4cd2 <_Z18manualMotorControlh+0x13a>
}
   b4d86:	b007      	add	sp, #28
   b4d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4d8c:	0002cb33 	.word	0x0002cb33
   b4d90:	3ff80000 	.word	0x3ff80000
   b4d94:	0002cad8 	.word	0x0002cad8
   b4d98:	2003e62e 	.word	0x2003e62e
   b4d9c:	2003dcb8 	.word	0x2003dcb8
   b4da0:	2003dd51 	.word	0x2003dd51
   b4da4:	000c0c4b 	.word	0x000c0c4b

000b4da8 <_Z14XBeeLTEPairSetv>:
void XBeeLTEPairSet(){
   b4da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      : _M_current(__i) { }
   b4dac:	4d0e      	ldr	r5, [pc, #56]	; (b4de8 <_Z14XBeeLTEPairSetv+0x40>)
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b4dae:	4f0f      	ldr	r7, [pc, #60]	; (b4dec <_Z14XBeeLTEPairSetv+0x44>)
   b4db0:	e9d5 4800 	ldrd	r4, r8, [r5]
void XBeeLTEPairSet(){
   b4db4:	b088      	sub	sp, #32
    for(WaterBot p: PairBots){
   b4db6:	45a0      	cmp	r8, r4
   b4db8:	d013      	beq.n	b4de2 <_Z14XBeeLTEPairSetv+0x3a>
   b4dba:	7a23      	ldrb	r3, [r4, #8]
   b4dbc:	79e6      	ldrb	r6, [r4, #7]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b4dbe:	78a2      	ldrb	r2, [r4, #2]
    for(WaterBot p: PairBots){
   b4dc0:	9303      	str	r3, [sp, #12]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b4dc2:	4639      	mov	r1, r7
   b4dc4:	a805      	add	r0, sp, #20
   b4dc6:	f005 f8bd 	bl	b9f44 <sprintf>
        sendData(replyStr,0,true,p.XBeeAvail,p.LTEAvail);
   b4dca:	9b03      	ldr	r3, [sp, #12]
   b4dcc:	9600      	str	r6, [sp, #0]
   b4dce:	2201      	movs	r2, #1
   b4dd0:	2100      	movs	r1, #0
   b4dd2:	a805      	add	r0, sp, #20
   b4dd4:	f7ff fe76 	bl	b4ac4 <_Z8sendDataPKchbbb>
   b4dd8:	686b      	ldr	r3, [r5, #4]
   b4dda:	3b48      	subs	r3, #72	; 0x48
   b4ddc:	606b      	str	r3, [r5, #4]
      operator++() _GLIBCXX_NOEXCEPT
   b4dde:	3448      	adds	r4, #72	; 0x48
	return *this;
   b4de0:	e7e9      	b.n	b4db6 <_Z14XBeeLTEPairSetv+0xe>
}
   b4de2:	b008      	add	sp, #32
   b4de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4de8:	2003dc90 	.word	0x2003dc90
   b4dec:	000c0c5c 	.word	0x000c0c5c

000b4df0 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>:
      at(size_type __n)
   b4df0:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4df2:	e9d0 4200 	ldrd	r4, r2, [r0]
   b4df6:	4806      	ldr	r0, [pc, #24]	; (b4e10 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x20>)
   b4df8:	1b12      	subs	r2, r2, r4
   b4dfa:	10d2      	asrs	r2, r2, #3
   b4dfc:	4342      	muls	r2, r0
	if (__n >= this->size())
   b4dfe:	4291      	cmp	r1, r2
   b4e00:	d302      	bcc.n	b4e08 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b4e02:	4804      	ldr	r0, [pc, #16]	; (b4e14 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x24>)
   b4e04:	f008 ff17 	bl	bdc36 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4e08:	2028      	movs	r0, #40	; 0x28
   b4e0a:	fb00 4001 	mla	r0, r0, r1, r4
   b4e0e:	bd10      	pop	{r4, pc}
   b4e10:	cccccccd 	.word	0xcccccccd
   b4e14:	000c0c65 	.word	0x000c0c65

000b4e18 <_Z8uHandlerv>:
    redrawMenu = true;  
   b4e18:	4b0c      	ldr	r3, [pc, #48]	; (b4e4c <_Z8uHandlerv+0x34>)
void uHandler(){
   b4e1a:	b510      	push	{r4, lr}
    redrawMenu = true;  
   b4e1c:	2201      	movs	r2, #1
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4e1e:	4c0c      	ldr	r4, [pc, #48]	; (b4e50 <_Z8uHandlerv+0x38>)
    redrawMenu = true;  
   b4e20:	701a      	strb	r2, [r3, #0]
   b4e22:	f004 fd49 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4e26:	6823      	ldr	r3, [r4, #0]
   b4e28:	1ac0      	subs	r0, r0, r3
   b4e2a:	2895      	cmp	r0, #149	; 0x95
   b4e2c:	d90d      	bls.n	b4e4a <_Z8uHandlerv+0x32>
   b4e2e:	f004 fd43 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
    if(menuItem) menuItem--;
   b4e32:	4a08      	ldr	r2, [pc, #32]	; (b4e54 <_Z8uHandlerv+0x3c>)
    debounceTime = millis();
   b4e34:	6020      	str	r0, [r4, #0]
    if(menuItem) menuItem--;
   b4e36:	7813      	ldrb	r3, [r2, #0]
   b4e38:	b10b      	cbz	r3, b4e3e <_Z8uHandlerv+0x26>
   b4e3a:	3b01      	subs	r3, #1
   b4e3c:	7013      	strb	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);
   b4e3e:	7811      	ldrb	r1, [r2, #0]
   b4e40:	4805      	ldr	r0, [pc, #20]	; (b4e58 <_Z8uHandlerv+0x40>)
   b4e42:	f7ff ffd5 	bl	b4df0 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b4e46:	4b05      	ldr	r3, [pc, #20]	; (b4e5c <_Z8uHandlerv+0x44>)
   b4e48:	6018      	str	r0, [r3, #0]
}
   b4e4a:	bd10      	pop	{r4, pc}
   b4e4c:	2003da80 	.word	0x2003da80
   b4e50:	2003dd5c 	.word	0x2003dd5c
   b4e54:	2003de01 	.word	0x2003de01
   b4e58:	2003dc84 	.word	0x2003dc84
   b4e5c:	2003dca8 	.word	0x2003dca8

000b4e60 <_Z8dHandlerv>:
    redrawMenu = true;  
   b4e60:	4b0d      	ldr	r3, [pc, #52]	; (b4e98 <_Z8dHandlerv+0x38>)
void dHandler(){
   b4e62:	b510      	push	{r4, lr}
    redrawMenu = true;  
   b4e64:	2201      	movs	r2, #1
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4e66:	4c0d      	ldr	r4, [pc, #52]	; (b4e9c <_Z8dHandlerv+0x3c>)
    redrawMenu = true;  
   b4e68:	701a      	strb	r2, [r3, #0]
   b4e6a:	f004 fd25 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4e6e:	6823      	ldr	r3, [r4, #0]
   b4e70:	1ac0      	subs	r0, r0, r3
   b4e72:	2895      	cmp	r0, #149	; 0x95
   b4e74:	d90e      	bls.n	b4e94 <_Z8dHandlerv+0x34>
   b4e76:	f004 fd1f 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
   b4e7a:	4a09      	ldr	r2, [pc, #36]	; (b4ea0 <_Z8dHandlerv+0x40>)
    debounceTime = millis();
   b4e7c:	6020      	str	r0, [r4, #0]
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
   b4e7e:	7813      	ldrb	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);
   b4e80:	4808      	ldr	r0, [pc, #32]	; (b4ea4 <_Z8dHandlerv+0x44>)
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
   b4e82:	2b05      	cmp	r3, #5
   b4e84:	bf9c      	itt	ls
   b4e86:	3301      	addls	r3, #1
   b4e88:	7013      	strbls	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);
   b4e8a:	7811      	ldrb	r1, [r2, #0]
   b4e8c:	f7ff ffb0 	bl	b4df0 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b4e90:	4b05      	ldr	r3, [pc, #20]	; (b4ea8 <_Z8dHandlerv+0x48>)
   b4e92:	6018      	str	r0, [r3, #0]
}
   b4e94:	bd10      	pop	{r4, pc}
   b4e96:	bf00      	nop
   b4e98:	2003da80 	.word	0x2003da80
   b4e9c:	2003dd5c 	.word	0x2003dd5c
   b4ea0:	2003de01 	.word	0x2003de01
   b4ea4:	2003dc84 	.word	0x2003dc84
   b4ea8:	2003dca8 	.word	0x2003dca8

000b4eac <_ZNSt6vectorI6StringSaIS0_EE2atEj>:
      at(size_type __n)
   b4eac:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4eae:	e9d0 5400 	ldrd	r5, r4, [r0]
   b4eb2:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
   b4eb4:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4eb8:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
   b4ebc:	d302      	bcc.n	b4ec4 <_ZNSt6vectorI6StringSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b4ebe:	4803      	ldr	r0, [pc, #12]	; (b4ecc <_ZNSt6vectorI6StringSaIS0_EE2atEj+0x20>)
   b4ec0:	f008 feb9 	bl	bdc36 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4ec4:	eb05 1001 	add.w	r0, r5, r1, lsl #4
   b4ec8:	bd38      	pop	{r3, r4, r5, pc}
   b4eca:	bf00      	nop
   b4ecc:	000c0c65 	.word	0x000c0c65

000b4ed0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>:
      at(size_type __n)
   b4ed0:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4ed2:	e9d0 4200 	ldrd	r4, r2, [r0]
   b4ed6:	4806      	ldr	r0, [pc, #24]	; (b4ef0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x20>)
   b4ed8:	1b12      	subs	r2, r2, r4
   b4eda:	10d2      	asrs	r2, r2, #3
   b4edc:	4342      	muls	r2, r0
	if (__n >= this->size())
   b4ede:	4291      	cmp	r1, r2
   b4ee0:	d302      	bcc.n	b4ee8 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b4ee2:	4804      	ldr	r0, [pc, #16]	; (b4ef4 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x24>)
   b4ee4:	f008 fea7 	bl	bdc36 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4ee8:	2048      	movs	r0, #72	; 0x48
   b4eea:	fb00 4001 	mla	r0, r0, r1, r4
   b4eee:	bd10      	pop	{r4, pc}
   b4ef0:	38e38e39 	.word	0x38e38e39
   b4ef4:	000c0c65 	.word	0x000c0c65

000b4ef8 <_Z16updateBotControlv>:
void updateBotControl(){
   b4ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(updateControl){
   b4efc:	4b46      	ldr	r3, [pc, #280]	; (b5018 <_Z16updateBotControlv+0x120>)
   b4efe:	781a      	ldrb	r2, [r3, #0]
void updateBotControl(){
   b4f00:	b096      	sub	sp, #88	; 0x58
    if(updateControl){
   b4f02:	2a00      	cmp	r2, #0
   b4f04:	d031      	beq.n	b4f6a <_Z16updateBotControlv+0x72>
        updateControl = false;
   b4f06:	2500      	movs	r5, #0
   b4f08:	701d      	strb	r5, [r3, #0]
      : _M_current(__i) { }
   b4f0a:	4b44      	ldr	r3, [pc, #272]	; (b501c <_Z16updateBotControlv+0x124>)
                sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum, wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b4f0c:	4f44      	ldr	r7, [pc, #272]	; (b5020 <_Z16updateBotControlv+0x128>)
                sendData(statusStr,0,true,true,statusTimeout);
   b4f0e:	f8df 811c 	ldr.w	r8, [pc, #284]	; b502c <_Z16updateBotControlv+0x134>
   b4f12:	e9d3 4600 	ldrd	r4, r6, [r3]
        for(WaterBot &wb: WaterBots){
   b4f16:	42a6      	cmp	r6, r4
   b4f18:	d027      	beq.n	b4f6a <_Z16updateBotControlv+0x72>
            if(wb.updatedControl){
   b4f1a:	7863      	ldrb	r3, [r4, #1]
   b4f1c:	b31b      	cbz	r3, b4f66 <_Z16updateBotControlv+0x6e>
                wb.updatedControl = false;
   b4f1e:	7065      	strb	r5, [r4, #1]
   b4f20:	f004 fcca 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
                sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum, wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b4f24:	7ba3      	ldrb	r3, [r4, #14]
   b4f26:	78a2      	ldrb	r2, [r4, #2]
                wb.publishTime = millis();
   b4f28:	6420      	str	r0, [r4, #64]	; 0x40
                sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum, wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b4f2a:	9306      	str	r3, [sp, #24]
   b4f2c:	7ce3      	ldrb	r3, [r4, #19]
   b4f2e:	9305      	str	r3, [sp, #20]
   b4f30:	89a3      	ldrh	r3, [r4, #12]
   b4f32:	9304      	str	r3, [sp, #16]
   b4f34:	69e0      	ldr	r0, [r4, #28]
   b4f36:	9209      	str	r2, [sp, #36]	; 0x24
   b4f38:	f009 f9a4 	bl	be284 <__aeabi_f2d>
   b4f3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4f40:	69a0      	ldr	r0, [r4, #24]
   b4f42:	f009 f99f 	bl	be284 <__aeabi_f2d>
   b4f46:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b4f48:	e9cd 0100 	strd	r0, r1, [sp]
   b4f4c:	4639      	mov	r1, r7
   b4f4e:	a80b      	add	r0, sp, #44	; 0x2c
   b4f50:	f004 fff8 	bl	b9f44 <sprintf>
                sendData(statusStr,0,true,true,statusTimeout);
   b4f54:	f898 3000 	ldrb.w	r3, [r8]
   b4f58:	9300      	str	r3, [sp, #0]
   b4f5a:	2301      	movs	r3, #1
   b4f5c:	461a      	mov	r2, r3
   b4f5e:	2100      	movs	r1, #0
   b4f60:	a80b      	add	r0, sp, #44	; 0x2c
   b4f62:	f7ff fdaf 	bl	b4ac4 <_Z8sendDataPKchbbb>
      operator++() _GLIBCXX_NOEXCEPT
   b4f66:	3448      	adds	r4, #72	; 0x48
	return *this;
   b4f68:	e7d5      	b.n	b4f16 <_Z16updateBotControlv+0x1e>
    if(millis() - controlUpdateTime > CONTROL_PUB_TIME){
   b4f6a:	4c2e      	ldr	r4, [pc, #184]	; (b5024 <_Z16updateBotControlv+0x12c>)
   b4f6c:	f004 fca4 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
   b4f70:	6823      	ldr	r3, [r4, #0]
   b4f72:	1ac0      	subs	r0, r0, r3
   b4f74:	f241 3388 	movw	r3, #5000	; 0x1388
   b4f78:	4298      	cmp	r0, r3
   b4f7a:	d93f      	bls.n	b4ffc <_Z16updateBotControlv+0x104>
   b4f7c:	f004 fc9c 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
        controlUpdateTime = millis();
   b4f80:	6020      	str	r0, [r4, #0]
        if(controlUpdateID == -1){
   b4f82:	4c29      	ldr	r4, [pc, #164]	; (b5028 <_Z16updateBotControlv+0x130>)
   b4f84:	4d25      	ldr	r5, [pc, #148]	; (b501c <_Z16updateBotControlv+0x124>)
   b4f86:	6822      	ldr	r2, [r4, #0]
   b4f88:	1c53      	adds	r3, r2, #1
   b4f8a:	d13a      	bne.n	b5002 <_Z16updateBotControlv+0x10a>
            if(WaterBots.size() != 0) controlUpdateID = 0;
   b4f8c:	e9d5 3200 	ldrd	r3, r2, [r5]
   b4f90:	429a      	cmp	r2, r3
   b4f92:	d033      	beq.n	b4ffc <_Z16updateBotControlv+0x104>
   b4f94:	2300      	movs	r3, #0
   b4f96:	6023      	str	r3, [r4, #0]
        WaterBot wb = WaterBots.at(controlUpdateID);
   b4f98:	6821      	ldr	r1, [r4, #0]
   b4f9a:	4820      	ldr	r0, [pc, #128]	; (b501c <_Z16updateBotControlv+0x124>)
   b4f9c:	f7ff ff98 	bl	b4ed0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
        sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum,wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b4fa0:	7b83      	ldrb	r3, [r0, #14]
   b4fa2:	7882      	ldrb	r2, [r0, #2]
   b4fa4:	9306      	str	r3, [sp, #24]
   b4fa6:	7cc3      	ldrb	r3, [r0, #19]
   b4fa8:	9305      	str	r3, [sp, #20]
   b4faa:	8983      	ldrh	r3, [r0, #12]
   b4fac:	9304      	str	r3, [sp, #16]
        WaterBot wb = WaterBots.at(controlUpdateID);
   b4fae:	4606      	mov	r6, r0
        sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum,wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b4fb0:	69c0      	ldr	r0, [r0, #28]
   b4fb2:	9209      	str	r2, [sp, #36]	; 0x24
   b4fb4:	f009 f966 	bl	be284 <__aeabi_f2d>
   b4fb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4fbc:	69b0      	ldr	r0, [r6, #24]
   b4fbe:	f009 f961 	bl	be284 <__aeabi_f2d>
   b4fc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b4fc4:	e9cd 0100 	strd	r0, r1, [sp]
   b4fc8:	4915      	ldr	r1, [pc, #84]	; (b5020 <_Z16updateBotControlv+0x128>)
   b4fca:	a80b      	add	r0, sp, #44	; 0x2c
   b4fcc:	f004 ffba 	bl	b9f44 <sprintf>
        sendData(statusStr,0,true,true,statusTimeout);
   b4fd0:	4b16      	ldr	r3, [pc, #88]	; (b502c <_Z16updateBotControlv+0x134>)
   b4fd2:	781b      	ldrb	r3, [r3, #0]
   b4fd4:	9300      	str	r3, [sp, #0]
   b4fd6:	2301      	movs	r3, #1
   b4fd8:	461a      	mov	r2, r3
   b4fda:	2100      	movs	r1, #0
   b4fdc:	a80b      	add	r0, sp, #44	; 0x2c
   b4fde:	f7ff fd71 	bl	b4ac4 <_Z8sendDataPKchbbb>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4fe2:	e9d5 1300 	ldrd	r1, r3, [r5]
   b4fe6:	1a5b      	subs	r3, r3, r1
   b4fe8:	4911      	ldr	r1, [pc, #68]	; (b5030 <_Z16updateBotControlv+0x138>)
        if(controlUpdateID < WaterBots.size()-1) controlUpdateID++;
   b4fea:	6822      	ldr	r2, [r4, #0]
   b4fec:	10db      	asrs	r3, r3, #3
   b4fee:	434b      	muls	r3, r1
   b4ff0:	3b01      	subs	r3, #1
   b4ff2:	4293      	cmp	r3, r2
   b4ff4:	bf8c      	ite	hi
   b4ff6:	3201      	addhi	r2, #1
        else controlUpdateID = 0;
   b4ff8:	2200      	movls	r2, #0
   b4ffa:	6022      	str	r2, [r4, #0]
}
   b4ffc:	b016      	add	sp, #88	; 0x58
   b4ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5002:	e9d5 1300 	ldrd	r1, r3, [r5]
   b5006:	1a5b      	subs	r3, r3, r1
   b5008:	4909      	ldr	r1, [pc, #36]	; (b5030 <_Z16updateBotControlv+0x138>)
   b500a:	10db      	asrs	r3, r3, #3
   b500c:	434b      	muls	r3, r1
        if(controlUpdateID > WaterBots.size()-1) controlUpdateID = 0;
   b500e:	3b01      	subs	r3, #1
   b5010:	4293      	cmp	r3, r2
   b5012:	d3bf      	bcc.n	b4f94 <_Z16updateBotControlv+0x9c>
   b5014:	e7c0      	b.n	b4f98 <_Z16updateBotControlv+0xa0>
   b5016:	bf00      	nop
   b5018:	2003e634 	.word	0x2003e634
   b501c:	2003dcb8 	.word	0x2003dcb8
   b5020:	000c0caf 	.word	0x000c0caf
   b5024:	2003dd58 	.word	0x2003dd58
   b5028:	2003dd54 	.word	0x2003dd54
   b502c:	2003e62d 	.word	0x2003e62d
   b5030:	38e38e39 	.word	0x38e38e39

000b5034 <_ZNSt6vectorI6StringSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b5034:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5036:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b503a:	4604      	mov	r4, r0
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b503c:	42ae      	cmp	r6, r5
   b503e:	d004      	beq.n	b504a <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x16>
      __pointer->~_Tp();
   b5040:	4628      	mov	r0, r5
   b5042:	f005 f8e5 	bl	ba210 <_ZN6StringD1Ev>
	  for (; __first != __last; ++__first)
   b5046:	3510      	adds	r5, #16
   b5048:	e7f8      	b.n	b503c <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b504a:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b504c:	b118      	cbz	r0, b5056 <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b504e:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5050:	1a09      	subs	r1, r1, r0
   b5052:	f7ff f824 	bl	b409e <_ZdlPvj>
      }
   b5056:	4620      	mov	r0, r4
   b5058:	bd70      	pop	{r4, r5, r6, pc}

000b505a <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b505a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b505c:	4604      	mov	r4, r0
   b505e:	460e      	mov	r6, r1
   b5060:	4615      	mov	r5, r2
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
   b5062:	2700      	movs	r7, #0
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
   b5064:	42b4      	cmp	r4, r6
   b5066:	d029      	beq.n	b50bc <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x62>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5068:	b315      	cbz	r5, b50b0 <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x56>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
   b506a:	6823      	ldr	r3, [r4, #0]
	  _M_end_of_storage(__x._M_end_of_storage)
   b506c:	602b      	str	r3, [r5, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
   b506e:	6863      	ldr	r3, [r4, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
   b5070:	606b      	str	r3, [r5, #4]
   b5072:	68a3      	ldr	r3, [r4, #8]
   b5074:	60ab      	str	r3, [r5, #8]
class MenuItem{
   b5076:	68e3      	ldr	r3, [r4, #12]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
   b5078:	6027      	str	r7, [r4, #0]
   b507a:	e9c4 7701 	strd	r7, r7, [r4, #4]
   b507e:	60eb      	str	r3, [r5, #12]
   b5080:	6923      	ldr	r3, [r4, #16]
   b5082:	612b      	str	r3, [r5, #16]
   b5084:	8aa3      	ldrh	r3, [r4, #20]
   b5086:	82ab      	strh	r3, [r5, #20]
   b5088:	7da3      	ldrb	r3, [r4, #22]
   b508a:	75ab      	strb	r3, [r5, #22]
   b508c:	7de3      	ldrb	r3, [r4, #23]
   b508e:	75eb      	strb	r3, [r5, #23]
   b5090:	7e23      	ldrb	r3, [r4, #24]
   b5092:	762b      	strb	r3, [r5, #24]
   b5094:	8b63      	ldrh	r3, [r4, #26]
   b5096:	836b      	strh	r3, [r5, #26]
   b5098:	8ba3      	ldrh	r3, [r4, #28]
   b509a:	83ab      	strh	r3, [r5, #28]
   b509c:	f8d4 301e 	ldr.w	r3, [r4, #30]
   b50a0:	f8c5 301e 	str.w	r3, [r5, #30]
   b50a4:	f8d4 3022 	ldr.w	r3, [r4, #34]	; 0x22
   b50a8:	f8c5 3022 	str.w	r3, [r5, #34]	; 0x22
   b50ac:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   b50ae:	84eb      	strh	r3, [r5, #38]	; 0x26
   b50b0:	4620      	mov	r0, r4
   b50b2:	f7ff ffbf 	bl	b5034 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b50b6:	3428      	adds	r4, #40	; 0x28
   b50b8:	3528      	adds	r5, #40	; 0x28
   b50ba:	e7d3      	b.n	b5064 <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0xa>
	std::__relocate_object_a(std::__addressof(*__cur),
				 std::__addressof(*__first), __alloc);
      return __cur;
    }
   b50bc:	4628      	mov	r0, r5
   b50be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b50c0 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b50c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b50c4:	e9d0 8a00 	ldrd	r8, sl, [r0]
   b50c8:	4b2f      	ldr	r3, [pc, #188]	; (b5188 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc8>)
   b50ca:	ebaa 0408 	sub.w	r4, sl, r8
   b50ce:	435c      	muls	r4, r3

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b50d0:	4b2e      	ldr	r3, [pc, #184]	; (b518c <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>)
   b50d2:	429c      	cmp	r4, r3
   b50d4:	4689      	mov	r9, r1
   b50d6:	4607      	mov	r7, r0
   b50d8:	4611      	mov	r1, r2
   b50da:	d102      	bne.n	b50e2 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x22>
	  __throw_length_error(__N(__s));
   b50dc:	482c      	ldr	r0, [pc, #176]	; (b5190 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd0>)
   b50de:	f008 fda7 	bl	bdc30 <_ZSt20__throw_length_errorPKc>
   b50e2:	2c01      	cmp	r4, #1
   b50e4:	4622      	mov	r2, r4
   b50e6:	bf38      	it	cc
   b50e8:	2201      	movcc	r2, #1
   b50ea:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b50ec:	eba9 0508 	sub.w	r5, r9, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b50f0:	d21d      	bcs.n	b512e <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b50f2:	b1f4      	cbz	r4, b5132 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
   b50f4:	429c      	cmp	r4, r3
   b50f6:	bf28      	it	cs
   b50f8:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b50fa:	2049      	movs	r0, #73	; 0x49
   b50fc:	4360      	muls	r0, r4
   b50fe:	9101      	str	r1, [sp, #4]
   b5100:	f7fe ffc9 	bl	b4096 <_Znwj>
   b5104:	9901      	ldr	r1, [sp, #4]
   b5106:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5108:	1970      	adds	r0, r6, r5
   b510a:	d002      	beq.n	b5112 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x52>
   b510c:	2249      	movs	r2, #73	; 0x49
   b510e:	f009 fc56 	bl	be9be <memcpy>
   b5112:	4633      	mov	r3, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5114:	4645      	mov	r5, r8
      for (; __first != __last; ++__first, (void)++__cur)
   b5116:	45a9      	cmp	r9, r5
   b5118:	d00d      	beq.n	b5136 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x76>
   b511a:	b12b      	cbz	r3, b5128 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x68>
   b511c:	4618      	mov	r0, r3
   b511e:	2249      	movs	r2, #73	; 0x49
   b5120:	4629      	mov	r1, r5
   b5122:	f009 fc4c 	bl	be9be <memcpy>
   b5126:	4603      	mov	r3, r0
   b5128:	3549      	adds	r5, #73	; 0x49
   b512a:	3349      	adds	r3, #73	; 0x49
   b512c:	e7f3      	b.n	b5116 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x56>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b512e:	461c      	mov	r4, r3
   b5130:	e7e3      	b.n	b50fa <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5132:	4626      	mov	r6, r4
   b5134:	e7e8      	b.n	b5108 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x48>
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   b5136:	eba5 0908 	sub.w	r9, r5, r8
   b513a:	f109 0949 	add.w	r9, r9, #73	; 0x49
   b513e:	44b1      	add	r9, r6
   b5140:	462b      	mov	r3, r5
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b5142:	46cb      	mov	fp, r9
      for (; __first != __last; ++__first, (void)++__cur)
   b5144:	4555      	cmp	r5, sl
   b5146:	f10b 0b49 	add.w	fp, fp, #73	; 0x49
   b514a:	d009      	beq.n	b5160 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa0>
   b514c:	4629      	mov	r1, r5
   b514e:	2249      	movs	r2, #73	; 0x49
   b5150:	f1ab 0049 	sub.w	r0, fp, #73	; 0x49
   b5154:	9301      	str	r3, [sp, #4]
   b5156:	3549      	adds	r5, #73	; 0x49
   b5158:	f009 fc31 	bl	be9be <memcpy>
   b515c:	9b01      	ldr	r3, [sp, #4]
   b515e:	e7f1      	b.n	b5144 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x84>
   b5160:	1aed      	subs	r5, r5, r3
   b5162:	444d      	add	r5, r9
	if (__p)
   b5164:	f1b8 0f00 	cmp.w	r8, #0
   b5168:	d005      	beq.n	b5176 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb6>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b516a:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b516c:	4640      	mov	r0, r8
   b516e:	eba1 0108 	sub.w	r1, r1, r8
   b5172:	f7fe ff94 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5176:	2049      	movs	r0, #73	; 0x49
   b5178:	fb00 6404 	mla	r4, r0, r4, r6
      this->_M_impl._M_finish = __new_finish;
   b517c:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5180:	60bc      	str	r4, [r7, #8]
    }
   b5182:	b003      	add	sp, #12
   b5184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5188:	c7e3f1f9 	.word	0xc7e3f1f9
   b518c:	01c0e070 	.word	0x01c0e070
   b5190:	000c0ccc 	.word	0x000c0ccc

000b5194 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b5194:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5196:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   b519a:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   b519c:	4604      	mov	r4, r0
   b519e:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b51a0:	d008      	beq.n	b51b4 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_+0x20>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b51a2:	b11b      	cbz	r3, b51ac <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_+0x18>
   b51a4:	2249      	movs	r2, #73	; 0x49
   b51a6:	4618      	mov	r0, r3
   b51a8:	f009 fc09 	bl	be9be <memcpy>
	    ++this->_M_impl._M_finish;
   b51ac:	6863      	ldr	r3, [r4, #4]
   b51ae:	3349      	adds	r3, #73	; 0x49
   b51b0:	6063      	str	r3, [r4, #4]
      }
   b51b2:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   b51b4:	4619      	mov	r1, r3
   b51b6:	f7ff ff83 	bl	b50c0 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b51ba:	e7fa      	b.n	b51b2 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_+0x1e>

000b51bc <_Z8sHandlerv>:

void sHandler(){
   b51bc:	b530      	push	{r4, r5, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b51be:	4c26      	ldr	r4, [pc, #152]	; (b5258 <_Z8sHandlerv+0x9c>)
void sHandler(){
   b51c0:	b095      	sub	sp, #84	; 0x54
   b51c2:	f004 fb79 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b51c6:	6823      	ldr	r3, [r4, #0]
   b51c8:	1ac0      	subs	r0, r0, r3
   b51ca:	2895      	cmp	r0, #149	; 0x95
   b51cc:	d925      	bls.n	b521a <_Z8sHandlerv+0x5e>
   b51ce:	f004 fb73 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b51d2:	6020      	str	r0, [r4, #0]
    if(stopActive){
   b51d4:	4c21      	ldr	r4, [pc, #132]	; (b525c <_Z8sHandlerv+0xa0>)
   b51d6:	4d22      	ldr	r5, [pc, #136]	; (b5260 <_Z8sHandlerv+0xa4>)
   b51d8:	7823      	ldrb	r3, [r4, #0]
   b51da:	b303      	cbz	r3, b521e <_Z8sHandlerv+0x62>
        MenuPopUp m;
        sprintf(m.primaryLine,"CLEARED\0");
   b51dc:	4921      	ldr	r1, [pc, #132]	; (b5264 <_Z8sHandlerv+0xa8>)
   b51de:	a801      	add	r0, sp, #4
   b51e0:	f009 fca3 	bl	beb2a <strcpy>
        sprintf(m.secondaryLine,"Motors Resuming");
   b51e4:	4920      	ldr	r1, [pc, #128]	; (b5268 <_Z8sHandlerv+0xac>)
   b51e6:	f10d 000e 	add.w	r0, sp, #14
   b51ea:	f009 fc9e 	bl	beb2a <strcpy>
        sprintf(m.tertiaryLine, "Press again to stop");
   b51ee:	491f      	ldr	r1, [pc, #124]	; (b526c <_Z8sHandlerv+0xb0>)
   b51f0:	a80b      	add	r0, sp, #44	; 0x2c
   b51f2:	f009 fc9a 	bl	beb2a <strcpy>
        m.primaryStart = 20;
   b51f6:	2314      	movs	r3, #20
   b51f8:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
        m.secondaryStart = 20;
   b51fc:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
        m.tertiaryStart = 7;
        PopUps.push_back(m);
   b5200:	481b      	ldr	r0, [pc, #108]	; (b5270 <_Z8sHandlerv+0xb4>)
        m.tertiaryStart = 7;
   b5202:	2307      	movs	r3, #7
        PopUps.push_back(m);
   b5204:	a901      	add	r1, sp, #4
        m.tertiaryStart = 7;
   b5206:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
        PopUps.push_back(m);
   b520a:	f7ff ffc3 	bl	b5194 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>
        redrawMenu = true;
   b520e:	2301      	movs	r3, #1
        stopActive = false;
        LTEStopSent = false;
   b5210:	4a18      	ldr	r2, [pc, #96]	; (b5274 <_Z8sHandlerv+0xb8>)
        redrawMenu = true;
   b5212:	702b      	strb	r3, [r5, #0]
        stopActive = false;
   b5214:	2300      	movs	r3, #0
   b5216:	7023      	strb	r3, [r4, #0]
        LTEStopSent = false;
   b5218:	7013      	strb	r3, [r2, #0]
        m.tertiaryStart = 5;
        PopUps.push_back(m);
        redrawMenu = true;
        stopActive = true;
    }
}
   b521a:	b015      	add	sp, #84	; 0x54
   b521c:	bd30      	pop	{r4, r5, pc}
        sprintf(m.primaryLine,"STOPPED\0");
   b521e:	4916      	ldr	r1, [pc, #88]	; (b5278 <_Z8sHandlerv+0xbc>)
   b5220:	a801      	add	r0, sp, #4
   b5222:	f009 fc82 	bl	beb2a <strcpy>
        sprintf(m.secondaryLine,"Motors Stopped!");
   b5226:	4915      	ldr	r1, [pc, #84]	; (b527c <_Z8sHandlerv+0xc0>)
   b5228:	f10d 000e 	add.w	r0, sp, #14
   b522c:	f009 fc7d 	bl	beb2a <strcpy>
        sprintf(m.tertiaryLine, "Press again to start");
   b5230:	4913      	ldr	r1, [pc, #76]	; (b5280 <_Z8sHandlerv+0xc4>)
   b5232:	a80b      	add	r0, sp, #44	; 0x2c
   b5234:	f009 fc79 	bl	beb2a <strcpy>
        m.primaryStart = 20;
   b5238:	2314      	movs	r3, #20
   b523a:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
        m.secondaryStart = 20;
   b523e:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
        PopUps.push_back(m);
   b5242:	480b      	ldr	r0, [pc, #44]	; (b5270 <_Z8sHandlerv+0xb4>)
        m.tertiaryStart = 5;
   b5244:	2305      	movs	r3, #5
        PopUps.push_back(m);
   b5246:	a901      	add	r1, sp, #4
        m.tertiaryStart = 5;
   b5248:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
        PopUps.push_back(m);
   b524c:	f7ff ffa2 	bl	b5194 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>
        redrawMenu = true;
   b5250:	2301      	movs	r3, #1
   b5252:	702b      	strb	r3, [r5, #0]
        stopActive = true;
   b5254:	7023      	strb	r3, [r4, #0]
   b5256:	e7e0      	b.n	b521a <_Z8sHandlerv+0x5e>
   b5258:	2003dd5c 	.word	0x2003dd5c
   b525c:	2003e62e 	.word	0x2003e62e
   b5260:	2003da80 	.word	0x2003da80
   b5264:	000c0fc8 	.word	0x000c0fc8
   b5268:	000c0ce6 	.word	0x000c0ce6
   b526c:	000c0cf6 	.word	0x000c0cf6
   b5270:	2003dc9c 	.word	0x2003dc9c
   b5274:	2003dc81 	.word	0x2003dc81
   b5278:	000c0fd1 	.word	0x000c0fd1
   b527c:	000c0d0a 	.word	0x000c0d0a
   b5280:	000c0d1a 	.word	0x000c0d1a

000b5284 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b5284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5288:	e9d0 8900 	ldrd	r8, r9, [r0]
   b528c:	4b39      	ldr	r3, [pc, #228]	; (b5374 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf0>)
   b528e:	eba9 0408 	sub.w	r4, r9, r8
   b5292:	10e4      	asrs	r4, r4, #3
   b5294:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
   b5296:	4b38      	ldr	r3, [pc, #224]	; (b5378 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf4>)
   b5298:	429c      	cmp	r4, r3
   b529a:	468a      	mov	sl, r1
   b529c:	4607      	mov	r7, r0
   b529e:	4611      	mov	r1, r2
   b52a0:	d102      	bne.n	b52a8 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
   b52a2:	4836      	ldr	r0, [pc, #216]	; (b537c <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf8>)
   b52a4:	f008 fcc4 	bl	bdc30 <_ZSt20__throw_length_errorPKc>
   b52a8:	2c01      	cmp	r4, #1
   b52aa:	4622      	mov	r2, r4
   b52ac:	bf38      	it	cc
   b52ae:	2201      	movcc	r2, #1
   b52b0:	18a4      	adds	r4, r4, r2
   b52b2:	ebaa 0508 	sub.w	r5, sl, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b52b6:	d21e      	bcs.n	b52f6 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b52b8:	b1fc      	cbz	r4, b52fa <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x76>
   b52ba:	429c      	cmp	r4, r3
   b52bc:	bf28      	it	cs
   b52be:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b52c0:	2048      	movs	r0, #72	; 0x48
   b52c2:	4360      	muls	r0, r4
   b52c4:	9100      	str	r1, [sp, #0]
   b52c6:	f7fe fee6 	bl	b4096 <_Znwj>
   b52ca:	9900      	ldr	r1, [sp, #0]
   b52cc:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b52ce:	1970      	adds	r0, r6, r5
   b52d0:	d002      	beq.n	b52d8 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x54>
   b52d2:	2248      	movs	r2, #72	; 0x48
   b52d4:	f009 fb73 	bl	be9be <memcpy>
   b52d8:	4633      	mov	r3, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b52da:	46c3      	mov	fp, r8
   b52dc:	45da      	cmp	sl, fp
   b52de:	d00e      	beq.n	b52fe <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7a>
   b52e0:	b12b      	cbz	r3, b52ee <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6a>
   b52e2:	4618      	mov	r0, r3
   b52e4:	2248      	movs	r2, #72	; 0x48
   b52e6:	4659      	mov	r1, fp
   b52e8:	f009 fb69 	bl	be9be <memcpy>
   b52ec:	4603      	mov	r3, r0
   b52ee:	f10b 0b48 	add.w	fp, fp, #72	; 0x48
   b52f2:	3348      	adds	r3, #72	; 0x48
   b52f4:	e7f2      	b.n	b52dc <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x58>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b52f6:	461c      	mov	r4, r3
   b52f8:	e7e2      	b.n	b52c0 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b52fa:	4626      	mov	r6, r4
   b52fc:	e7e7      	b.n	b52ce <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   b52fe:	f8df a080 	ldr.w	sl, [pc, #128]	; b5380 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfc>
   b5302:	08ed      	lsrs	r5, r5, #3
   b5304:	fb0a f505 	mul.w	r5, sl, r5
   b5308:	2348      	movs	r3, #72	; 0x48
   b530a:	f025 4560 	bic.w	r5, r5, #3758096384	; 0xe0000000
   b530e:	435d      	muls	r5, r3
   b5310:	eb08 0b05 	add.w	fp, r8, r5
	      ++__new_finish;
   b5314:	441d      	add	r5, r3
   b5316:	4435      	add	r5, r6
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b5318:	462b      	mov	r3, r5
   b531a:	4659      	mov	r1, fp
      for (; __first != __last; ++__first, (void)++__cur)
   b531c:	4549      	cmp	r1, r9
   b531e:	f103 0348 	add.w	r3, r3, #72	; 0x48
   b5322:	d00a      	beq.n	b533a <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb6>
   b5324:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
   b5328:	2248      	movs	r2, #72	; 0x48
   b532a:	9101      	str	r1, [sp, #4]
   b532c:	9300      	str	r3, [sp, #0]
   b532e:	f009 fb46 	bl	be9be <memcpy>
   b5332:	9901      	ldr	r1, [sp, #4]
   b5334:	9b00      	ldr	r3, [sp, #0]
   b5336:	3148      	adds	r1, #72	; 0x48
   b5338:	e7f0      	b.n	b531c <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
   b533a:	eba1 010b 	sub.w	r1, r1, fp
   b533e:	08c9      	lsrs	r1, r1, #3
   b5340:	fb0a fa01 	mul.w	sl, sl, r1
   b5344:	f02a 4a60 	bic.w	sl, sl, #3758096384	; 0xe0000000
   b5348:	2348      	movs	r3, #72	; 0x48
   b534a:	fb03 550a 	mla	r5, r3, sl, r5
	if (__p)
   b534e:	f1b8 0f00 	cmp.w	r8, #0
   b5352:	d005      	beq.n	b5360 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xdc>
		    this->_M_impl._M_end_of_storage - __old_start);
   b5354:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b5356:	4640      	mov	r0, r8
   b5358:	eba1 0108 	sub.w	r1, r1, r8
   b535c:	f7fe fe9f 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5360:	2048      	movs	r0, #72	; 0x48
   b5362:	fb00 6404 	mla	r4, r0, r4, r6
      this->_M_impl._M_finish = __new_finish;
   b5366:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b536a:	60bc      	str	r4, [r7, #8]
    }
   b536c:	b003      	add	sp, #12
   b536e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5372:	bf00      	nop
   b5374:	38e38e39 	.word	0x38e38e39
   b5378:	01c71c71 	.word	0x01c71c71
   b537c:	000c0ccc 	.word	0x000c0ccc
   b5380:	18e38e39 	.word	0x18e38e39

000b5384 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b5384:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5386:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   b538a:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   b538c:	4604      	mov	r4, r0
   b538e:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5390:	d008      	beq.n	b53a4 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x20>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5392:	b11b      	cbz	r3, b539c <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x18>
   b5394:	2248      	movs	r2, #72	; 0x48
   b5396:	4618      	mov	r0, r3
   b5398:	f009 fb11 	bl	be9be <memcpy>
	    ++this->_M_impl._M_finish;
   b539c:	6863      	ldr	r3, [r4, #4]
   b539e:	3348      	adds	r3, #72	; 0x48
   b53a0:	6063      	str	r3, [r4, #4]
      }
   b53a2:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   b53a4:	4619      	mov	r1, r3
   b53a6:	f7ff ff6d 	bl	b5284 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b53aa:	e7fa      	b.n	b53a2 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x1e>

000b53ac <_Z14processCommandPKchb.part.0>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b53ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b53b0:	ed2d 8b02 	vpush	{d8}
   b53b4:	b0a9      	sub	sp, #164	; 0xa4
        }
   b53b6:	466b      	mov	r3, sp
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b53b8:	af06      	add	r7, sp, #24
        }
   b53ba:	ee08 3a10 	vmov	s16, r3
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b53be:	4604      	mov	r4, r0
        rxIDBuf[0] = command[1];
   b53c0:	7843      	ldrb	r3, [r0, #1]
   b53c2:	723b      	strb	r3, [r7, #8]
        uint8_t rxBotID = atoi(rxIDBuf);
   b53c4:	f107 0008 	add.w	r0, r7, #8
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b53c8:	460e      	mov	r6, r1
        uint8_t rxBotID = atoi(rxIDBuf);
   b53ca:	f009 fae4 	bl	be996 <atoi>
      : _M_current(__i) { }
   b53ce:	f8df a338 	ldr.w	sl, [pc, #824]	; b5708 <_Z14processCommandPKchb.part.0+0x35c>
   b53d2:	6078      	str	r0, [r7, #4]
   b53d4:	e9da 8b00 	ldrd	r8, fp, [sl]
        int index = 0;
   b53d8:	2100      	movs	r1, #0
        uint8_t rxBotID = atoi(rxIDBuf);
   b53da:	f897 9004 	ldrb.w	r9, [r7, #4]
        WaterBot *TargetWB = nullptr;
   b53de:	460d      	mov	r5, r1
        bool newBot = true;
   b53e0:	2301      	movs	r3, #1
        for(WaterBot w: WaterBots){
   b53e2:	45c3      	cmp	fp, r8
   b53e4:	d00e      	beq.n	b5404 <_Z14processCommandPKchb.part.0+0x58>
            if(rxBotID == w.botNum){
   b53e6:	f898 2002 	ldrb.w	r2, [r8, #2]
   b53ea:	454a      	cmp	r2, r9
   b53ec:	d106      	bne.n	b53fc <_Z14processCommandPKchb.part.0+0x50>
                TargetWB = &WaterBots.at(index);
   b53ee:	4650      	mov	r0, sl
   b53f0:	6039      	str	r1, [r7, #0]
   b53f2:	f7ff fd6d 	bl	b4ed0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
                newBot = false;
   b53f6:	6839      	ldr	r1, [r7, #0]
                TargetWB = &WaterBots.at(index);
   b53f8:	4605      	mov	r5, r0
                newBot = false;
   b53fa:	2300      	movs	r3, #0
            index++;
   b53fc:	3101      	adds	r1, #1
	++_M_current;
   b53fe:	f108 0848 	add.w	r8, r8, #72	; 0x48
	return *this;
   b5402:	e7ee      	b.n	b53e2 <_Z14processCommandPKchb.part.0+0x36>
        if(newBot){
   b5404:	b183      	cbz	r3, b5428 <_Z14processCommandPKchb.part.0+0x7c>
            WaterBot newWaterbot;
   b5406:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   b540a:	f7ff f9cd 	bl	b47a8 <_ZN8WaterBotC1Ev>
            WaterBots.push_back(newWaterbot);
   b540e:	48be      	ldr	r0, [pc, #760]	; (b5708 <_Z14processCommandPKchb.part.0+0x35c>)
            newWaterbot.botNum = rxBotID;
   b5410:	f887 903e 	strb.w	r9, [r7, #62]	; 0x3e
            WaterBots.push_back(newWaterbot);
   b5414:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   b5418:	f7ff ffb4 	bl	b5384 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      { return __normal_iterator(_M_current - __n); }
   b541c:	f8da 5004 	ldr.w	r5, [sl, #4]
            redrawMenu = true;
   b5420:	4bba      	ldr	r3, [pc, #744]	; (b570c <_Z14processCommandPKchb.part.0+0x360>)
   b5422:	2201      	movs	r2, #1
   b5424:	3d48      	subs	r5, #72	; 0x48
   b5426:	701a      	strb	r2, [r3, #0]
        char dataStr[strlen(command)-8];
   b5428:	4620      	mov	r0, r4
   b542a:	f009 fba4 	bl	beb76 <strlen>
   b542e:	3801      	subs	r0, #1
   b5430:	f020 0007 	bic.w	r0, r0, #7
   b5434:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b5438:	4620      	mov	r0, r4
   b543a:	f009 fb9c 	bl	beb76 <strlen>
        char dataStr[strlen(command)-8];
   b543e:	f10d 0818 	add.w	r8, sp, #24
        dataStr[strlen(command)-9] = '\0';
   b5442:	4440      	add	r0, r8
   b5444:	f04f 0b00 	mov.w	fp, #0
   b5448:	f800 bc09 	strb.w	fp, [r0, #-9]
        checkStr[0] = command[strlen(command)-2];
   b544c:	4620      	mov	r0, r4
        cmdStr[3] = '\0';
   b544e:	f887 b013 	strb.w	fp, [r7, #19]
        checkStr[0] = command[strlen(command)-2];
   b5452:	f009 fb90 	bl	beb76 <strlen>
   b5456:	4420      	add	r0, r4
   b5458:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b545c:	733b      	strb	r3, [r7, #12]
        checkStr[1] = command[strlen(command)-1];
   b545e:	4620      	mov	r0, r4
   b5460:	f009 fb89 	bl	beb76 <strlen>
   b5464:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b5466:	4659      	mov	r1, fp
        checkStr[1] = command[strlen(command)-1];
   b5468:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b546c:	737b      	strb	r3, [r7, #13]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b546e:	2210      	movs	r2, #16
   b5470:	f107 000c 	add.w	r0, r7, #12
        checkStr[2] = '\0';
   b5474:	f887 b00e 	strb.w	fp, [r7, #14]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b5478:	f00a fa6a 	bl	bf950 <strtol>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b547c:	f04f 0b04 	mov.w	fp, #4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b5480:	4603      	mov	r3, r0
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b5482:	4620      	mov	r0, r4
   b5484:	603b      	str	r3, [r7, #0]
   b5486:	f009 fb76 	bl	beb76 <strlen>
   b548a:	3802      	subs	r0, #2
   b548c:	4583      	cmp	fp, r0
   b548e:	683b      	ldr	r3, [r7, #0]
   b5490:	d216      	bcs.n	b54c0 <_Z14processCommandPKchb.part.0+0x114>
            if(i < 7) cmdStr[i-4] = command[i];
   b5492:	f1bb 0f06 	cmp.w	fp, #6
   b5496:	bf9b      	ittet	ls
   b5498:	f107 0288 	addls.w	r2, r7, #136	; 0x88
   b549c:	445a      	addls	r2, fp
            else dataStr[i-7] = command[i];
   b549e:	eb08 020b 	addhi.w	r2, r8, fp
            if(i < 7) cmdStr[i-4] = command[i];
   b54a2:	f814 100b 	ldrbls.w	r1, [r4, fp]
            else dataStr[i-7] = command[i];
   b54a6:	bf8c      	ite	hi
   b54a8:	f814 100b 	ldrbhi.w	r1, [r4, fp]
            if(i < 7) cmdStr[i-4] = command[i];
   b54ac:	f802 1c7c 	strbls.w	r1, [r2, #-124]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b54b0:	f10b 0b01 	add.w	fp, fp, #1
            else dataStr[i-7] = command[i];
   b54b4:	bf88      	it	hi
   b54b6:	f802 1c07 	strbhi.w	r1, [r2, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b54ba:	fa5f fb8b 	uxtb.w	fp, fp
   b54be:	e7e0      	b.n	b5482 <_Z14processCommandPKchb.part.0+0xd6>
        if(checksum != strlen(command)-2){
   b54c0:	b2db      	uxtb	r3, r3
   b54c2:	4298      	cmp	r0, r3
   b54c4:	d01a      	beq.n	b54fc <_Z14processCommandPKchb.part.0+0x150>
            logMessage("[WARN] Warning, checksum does not match!");
   b54c6:	4892      	ldr	r0, [pc, #584]	; (b5710 <_Z14processCommandPKchb.part.0+0x364>)
   b54c8:	f7ff f94e 	bl	b4768 <_Z10logMessagePKc>
            if((command[1] >= '0' && command[1] <= '9') || command[1] == 'C'){
   b54cc:	7863      	ldrb	r3, [r4, #1]
   b54ce:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b54d2:	2a09      	cmp	r2, #9
   b54d4:	d902      	bls.n	b54dc <_Z14processCommandPKchb.part.0+0x130>
   b54d6:	2b43      	cmp	r3, #67	; 0x43
   b54d8:	f040 817e 	bne.w	b57d8 <_Z14processCommandPKchb.part.0+0x42c>
                rxBotNum[0] = command[0];
   b54dc:	7822      	ldrb	r2, [r4, #0]
   b54de:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
                rxBotNum[1] = command[1];
   b54e2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
                sprintf(errBuf,"CC%2snak%3s",rxBotNum,cmdStr);
   b54e6:	498b      	ldr	r1, [pc, #556]	; (b5714 <_Z14processCommandPKchb.part.0+0x368>)
   b54e8:	488b      	ldr	r0, [pc, #556]	; (b5718 <_Z14processCommandPKchb.part.0+0x36c>)
   b54ea:	f107 0310 	add.w	r3, r7, #16
   b54ee:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   b54f2:	f004 fd27 	bl	b9f44 <sprintf>
                errModeReply = mode;
   b54f6:	4b89      	ldr	r3, [pc, #548]	; (b571c <_Z14processCommandPKchb.part.0+0x370>)
            errCmdMode = mode;
   b54f8:	701e      	strb	r6, [r3, #0]
   b54fa:	e16d      	b.n	b57d8 <_Z14processCommandPKchb.part.0+0x42c>
        else if(!strcmp(cmdStr,"sup")){
   b54fc:	4988      	ldr	r1, [pc, #544]	; (b5720 <_Z14processCommandPKchb.part.0+0x374>)
   b54fe:	f107 0010 	add.w	r0, r7, #16
   b5502:	f009 fb08 	bl	beb16 <strcmp>
   b5506:	2800      	cmp	r0, #0
   b5508:	f040 811e 	bne.w	b5748 <_Z14processCommandPKchb.part.0+0x39c>
      : _M_current(__i) { }
   b550c:	f8da 3004 	ldr.w	r3, [sl, #4]
   b5510:	f8da 4000 	ldr.w	r4, [sl]
   b5514:	603b      	str	r3, [r7, #0]
            for(WaterBot &w: WaterBots){
   b5516:	683b      	ldr	r3, [r7, #0]
   b5518:	42a3      	cmp	r3, r4
   b551a:	f000 8115 	beq.w	b5748 <_Z14processCommandPKchb.part.0+0x39c>
                if(rxBotID == w.botNum){
   b551e:	78a3      	ldrb	r3, [r4, #2]
   b5520:	454b      	cmp	r3, r9
   b5522:	f040 80ee 	bne.w	b5702 <_Z14processCommandPKchb.part.0+0x356>
                    sscanf(dataStr,"%u %u %s %s %d %d",&battpct,&statflags,testLat,testLon, &battPwr, &panelPwr);
   b5526:	f107 031c 	add.w	r3, r7, #28
   b552a:	9303      	str	r3, [sp, #12]
   b552c:	f107 0a30 	add.w	sl, r7, #48	; 0x30
   b5530:	f107 0320 	add.w	r3, r7, #32
   b5534:	f107 0b24 	add.w	fp, r7, #36	; 0x24
   b5538:	497a      	ldr	r1, [pc, #488]	; (b5724 <_Z14processCommandPKchb.part.0+0x378>)
   b553a:	9302      	str	r3, [sp, #8]
   b553c:	f107 0214 	add.w	r2, r7, #20
   b5540:	f107 0318 	add.w	r3, r7, #24
   b5544:	f8cd a004 	str.w	sl, [sp, #4]
   b5548:	f8cd b000 	str.w	fp, [sp]
   b554c:	4640      	mov	r0, r8
   b554e:	f004 fd01 	bl	b9f54 <sscanf>
                    w.battPercent = battpct;
   b5552:	7d3b      	ldrb	r3, [r7, #20]
   b5554:	80a3      	strh	r3, [r4, #4]
                    w.LTEAvail = statflags & 1;
   b5556:	7e3a      	ldrb	r2, [r7, #24]
   b5558:	8b3b      	ldrh	r3, [r7, #24]
   b555a:	f002 0201 	and.w	r2, r2, #1
   b555e:	71e2      	strb	r2, [r4, #7]
                    w.XBeeAvail = (statflags >> 1) & 1;
   b5560:	f3c3 0240 	ubfx	r2, r3, #1, #1
   b5564:	7222      	strb	r2, [r4, #8]
                    w.BLEAvail = (statflags >> 2) & 1;
   b5566:	f3c3 0280 	ubfx	r2, r3, #2, #1
   b556a:	71a2      	strb	r2, [r4, #6]
                    w.lowBatt = (statflags >> 6) & 1;
   b556c:	f3c3 1280 	ubfx	r2, r3, #6, #1
   b5570:	73e2      	strb	r2, [r4, #15]
                    w.GPSAvail = (statflags >> 8) & 1;
   b5572:	f3c3 2200 	ubfx	r2, r3, #8, #1
   b5576:	7262      	strb	r2, [r4, #9]
                    w.CompassAvail = (statflags >> 9) & 1;
   b5578:	f3c3 2240 	ubfx	r2, r3, #9, #1
                    w.SDAvail = (statflags >> 10) & 1;
   b557c:	f3c3 2380 	ubfx	r3, r3, #10, #1
                    w.CompassAvail = (statflags >> 9) & 1;
   b5580:	72a2      	strb	r2, [r4, #10]
                    w.SDAvail = (statflags >> 10) & 1;
   b5582:	72e3      	strb	r3, [r4, #11]
                    w.GPSLat = atof(testLat);
   b5584:	4658      	mov	r0, fp
   b5586:	f009 fa03 	bl	be990 <atof>
   b558a:	ec51 0b10 	vmov	r0, r1, d0
   b558e:	f009 f98b 	bl	be8a8 <__aeabi_d2f>
   b5592:	6220      	str	r0, [r4, #32]
                    w.GPSLon = atof(testLon);
   b5594:	4650      	mov	r0, sl
   b5596:	f009 f9fb 	bl	be990 <atof>
   b559a:	ec51 0b10 	vmov	r0, r1, d0
   b559e:	f009 f983 	bl	be8a8 <__aeabi_d2f>
   b55a2:	6260      	str	r0, [r4, #36]	; 0x24
                    w.panelPower = panelPwr;
   b55a4:	8bbb      	ldrh	r3, [r7, #28]
   b55a6:	87a3      	strh	r3, [r4, #60]	; 0x3c
                    w.battPower = battPwr;
   b55a8:	8c3b      	ldrh	r3, [r7, #32]
   b55aa:	87e3      	strh	r3, [r4, #62]	; 0x3e
   b55ac:	f004 f984 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
                    if(millis() - w.publishTime > WB_MOD_UPDATE_TIME){
   b55b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   b55b2:	1ac0      	subs	r0, r0, r3
   b55b4:	f64e 2360 	movw	r3, #60000	; 0xea60
   b55b8:	4298      	cmp	r0, r3
   b55ba:	d909      	bls.n	b55d0 <_Z14processCommandPKchb.part.0+0x224>
                        w.offloading = (statflags >> 3) & 1;
   b55bc:	8b3b      	ldrh	r3, [r7, #24]
   b55be:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   b55c2:	7522      	strb	r2, [r4, #20]
                        w.driveMode = (statflags >> 4) & 3;
   b55c4:	f3c3 1201 	ubfx	r2, r3, #4, #2
                        w.dataRecording = (statflags >> 7) & 1;
   b55c8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
                        w.driveMode = (statflags >> 4) & 3;
   b55cc:	81a2      	strh	r2, [r4, #12]
                        w.dataRecording = (statflags >> 7) & 1;
   b55ce:	74e3      	strb	r3, [r4, #19]
                    if(w.lowBatt && !w.warnedLowBatt){
   b55d0:	7be3      	ldrb	r3, [r4, #15]
   b55d2:	b363      	cbz	r3, b562e <_Z14processCommandPKchb.part.0+0x282>
   b55d4:	7c23      	ldrb	r3, [r4, #16]
   b55d6:	bb53      	cbnz	r3, b562e <_Z14processCommandPKchb.part.0+0x282>
                        w.warnedLowBatt = true;
   b55d8:	f04f 0a01 	mov.w	sl, #1
   b55dc:	f884 a010 	strb.w	sl, [r4, #16]
                        sprintf(m.primaryLine,"Warning\0");
   b55e0:	4951      	ldr	r1, [pc, #324]	; (b5728 <_Z14processCommandPKchb.part.0+0x37c>)
class MenuPopUp{
   b55e2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                        sprintf(m.primaryLine,"Warning\0");
   b55e6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
class MenuPopUp{
   b55ea:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
   b55ee:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                        sprintf(m.primaryLine,"Warning\0");
   b55f2:	f009 fa9a 	bl	beb2a <strcpy>
                        sprintf(m.secondaryLine,"Bot %d\0", w.botNum);
   b55f6:	78a2      	ldrb	r2, [r4, #2]
   b55f8:	494c      	ldr	r1, [pc, #304]	; (b572c <_Z14processCommandPKchb.part.0+0x380>)
   b55fa:	f107 0046 	add.w	r0, r7, #70	; 0x46
   b55fe:	f004 fca1 	bl	b9f44 <sprintf>
                        sprintf(m.tertiaryLine, "Low Battery: %d\0",w.battPercent);
   b5602:	88a2      	ldrh	r2, [r4, #4]
   b5604:	494a      	ldr	r1, [pc, #296]	; (b5730 <_Z14processCommandPKchb.part.0+0x384>)
   b5606:	f107 0064 	add.w	r0, r7, #100	; 0x64
   b560a:	f004 fc9b 	bl	b9f44 <sprintf>
                        m.primaryStart = 20;
   b560e:	2314      	movs	r3, #20
                        m.secondaryStart = 40;
   b5610:	2228      	movs	r2, #40	; 0x28
                        PopUps.push_back(m);
   b5612:	4848      	ldr	r0, [pc, #288]	; (b5734 <_Z14processCommandPKchb.part.0+0x388>)
                        m.primaryStart = 20;
   b5614:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                        PopUps.push_back(m);
   b5618:	f107 013c 	add.w	r1, r7, #60	; 0x3c
                        m.tertiaryStart = 20;
   b561c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                        m.secondaryStart = 40;
   b5620:	f887 2083 	strb.w	r2, [r7, #131]	; 0x83
                        PopUps.push_back(m);
   b5624:	f7ff fdb6 	bl	b5194 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>
                        redrawMenu = true;
   b5628:	4b38      	ldr	r3, [pc, #224]	; (b570c <_Z14processCommandPKchb.part.0+0x360>)
   b562a:	f883 a000 	strb.w	sl, [r3]
                    if(!w.SDAvail && !w.warnedSDCard){
   b562e:	7ae3      	ldrb	r3, [r4, #11]
   b5630:	bb5b      	cbnz	r3, b568a <_Z14processCommandPKchb.part.0+0x2de>
   b5632:	7c63      	ldrb	r3, [r4, #17]
   b5634:	bb4b      	cbnz	r3, b568a <_Z14processCommandPKchb.part.0+0x2de>
                        w.warnedSDCard = true;
   b5636:	f04f 0a01 	mov.w	sl, #1
   b563a:	f884 a011 	strb.w	sl, [r4, #17]
                        sprintf(m.primaryLine,"Warning\0");
   b563e:	493a      	ldr	r1, [pc, #232]	; (b5728 <_Z14processCommandPKchb.part.0+0x37c>)
class MenuPopUp{
   b5640:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                        sprintf(m.primaryLine,"Warning\0");
   b5644:	f107 003c 	add.w	r0, r7, #60	; 0x3c
class MenuPopUp{
   b5648:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
   b564c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                        sprintf(m.primaryLine,"Warning\0");
   b5650:	f009 fa6b 	bl	beb2a <strcpy>
                        sprintf(m.secondaryLine,"Bot %d\0", w.botNum);
   b5654:	78a2      	ldrb	r2, [r4, #2]
   b5656:	4935      	ldr	r1, [pc, #212]	; (b572c <_Z14processCommandPKchb.part.0+0x380>)
   b5658:	f107 0046 	add.w	r0, r7, #70	; 0x46
   b565c:	f004 fc72 	bl	b9f44 <sprintf>
                        sprintf(m.tertiaryLine, "SD Card Failed\0");
   b5660:	4935      	ldr	r1, [pc, #212]	; (b5738 <_Z14processCommandPKchb.part.0+0x38c>)
   b5662:	f107 0064 	add.w	r0, r7, #100	; 0x64
   b5666:	f009 fa60 	bl	beb2a <strcpy>
                        m.primaryStart = 20;
   b566a:	2314      	movs	r3, #20
                        m.secondaryStart = 40;
   b566c:	2228      	movs	r2, #40	; 0x28
                        PopUps.push_back(m);
   b566e:	4831      	ldr	r0, [pc, #196]	; (b5734 <_Z14processCommandPKchb.part.0+0x388>)
                        m.primaryStart = 20;
   b5670:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                        PopUps.push_back(m);
   b5674:	f107 013c 	add.w	r1, r7, #60	; 0x3c
                        m.tertiaryStart = 20;
   b5678:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                        m.secondaryStart = 40;
   b567c:	f887 2083 	strb.w	r2, [r7, #131]	; 0x83
                        PopUps.push_back(m);
   b5680:	f7ff fd88 	bl	b5194 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>
                        redrawMenu = true;
   b5684:	4b21      	ldr	r3, [pc, #132]	; (b570c <_Z14processCommandPKchb.part.0+0x360>)
   b5686:	f883 a000 	strb.w	sl, [r3]
                    if((!w.CompassAvail || !w.GPSAvail) && !w.warnedTelem){
   b568a:	7aa3      	ldrb	r3, [r4, #10]
   b568c:	b10b      	cbz	r3, b5692 <_Z14processCommandPKchb.part.0+0x2e6>
   b568e:	7a63      	ldrb	r3, [r4, #9]
   b5690:	bb63      	cbnz	r3, b56ec <_Z14processCommandPKchb.part.0+0x340>
   b5692:	7ca3      	ldrb	r3, [r4, #18]
   b5694:	bb53      	cbnz	r3, b56ec <_Z14processCommandPKchb.part.0+0x340>
                        w.warnedTelem = true;
   b5696:	f04f 0a01 	mov.w	sl, #1
class MenuPopUp{
   b569a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
   b569e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
   b56a2:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                        sprintf(m.primaryLine,"Warning\0");
   b56a6:	4920      	ldr	r1, [pc, #128]	; (b5728 <_Z14processCommandPKchb.part.0+0x37c>)
                        w.warnedTelem = true;
   b56a8:	f884 a012 	strb.w	sl, [r4, #18]
                        sprintf(m.primaryLine,"Warning\0");
   b56ac:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   b56b0:	f009 fa3b 	bl	beb2a <strcpy>
                        sprintf(m.secondaryLine,"Bot %d\0", w.botNum);
   b56b4:	78a2      	ldrb	r2, [r4, #2]
   b56b6:	491d      	ldr	r1, [pc, #116]	; (b572c <_Z14processCommandPKchb.part.0+0x380>)
   b56b8:	f107 0046 	add.w	r0, r7, #70	; 0x46
   b56bc:	f004 fc42 	bl	b9f44 <sprintf>
                        sprintf(m.tertiaryLine, "GPS/Compass Error\0");
   b56c0:	491e      	ldr	r1, [pc, #120]	; (b573c <_Z14processCommandPKchb.part.0+0x390>)
   b56c2:	f107 0064 	add.w	r0, r7, #100	; 0x64
   b56c6:	f009 fa30 	bl	beb2a <strcpy>
                        m.primaryStart = 20;
   b56ca:	2314      	movs	r3, #20
   b56cc:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                        m.secondaryStart = 40;
   b56d0:	2328      	movs	r3, #40	; 0x28
   b56d2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                        PopUps.push_back(m);
   b56d6:	4817      	ldr	r0, [pc, #92]	; (b5734 <_Z14processCommandPKchb.part.0+0x388>)
                        m.tertiaryStart = 10;
   b56d8:	230a      	movs	r3, #10
                        PopUps.push_back(m);
   b56da:	f107 013c 	add.w	r1, r7, #60	; 0x3c
                        m.tertiaryStart = 10;
   b56de:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                        PopUps.push_back(m);
   b56e2:	f7ff fd57 	bl	b5194 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>
                        redrawMenu = true;
   b56e6:	4b09      	ldr	r3, [pc, #36]	; (b570c <_Z14processCommandPKchb.part.0+0x360>)
   b56e8:	f883 a000 	strb.w	sl, [r3]
                    if(botSelect == w.botNum) redrawMenu = true;
   b56ec:	4b14      	ldr	r3, [pc, #80]	; (b5740 <_Z14processCommandPKchb.part.0+0x394>)
   b56ee:	78a2      	ldrb	r2, [r4, #2]
   b56f0:	781b      	ldrb	r3, [r3, #0]
                    logMessage("Status Update!");
   b56f2:	4814      	ldr	r0, [pc, #80]	; (b5744 <_Z14processCommandPKchb.part.0+0x398>)
                    if(botSelect == w.botNum) redrawMenu = true;
   b56f4:	429a      	cmp	r2, r3
   b56f6:	bf02      	ittt	eq
   b56f8:	4b04      	ldreq	r3, [pc, #16]	; (b570c <_Z14processCommandPKchb.part.0+0x360>)
   b56fa:	2201      	moveq	r2, #1
   b56fc:	701a      	strbeq	r2, [r3, #0]
                    logMessage("Status Update!");
   b56fe:	f7ff f833 	bl	b4768 <_Z10logMessagePKc>
      operator++() _GLIBCXX_NOEXCEPT
   b5702:	3448      	adds	r4, #72	; 0x48
	return *this;
   b5704:	e707      	b.n	b5516 <_Z14processCommandPKchb.part.0+0x16a>
   b5706:	bf00      	nop
   b5708:	2003dcb8 	.word	0x2003dcb8
   b570c:	2003da80 	.word	0x2003da80
   b5710:	000c0d2f 	.word	0x000c0d2f
   b5714:	000c0bec 	.word	0x000c0bec
   b5718:	2003dd60 	.word	0x2003dd60
   b571c:	2003dd73 	.word	0x2003dd73
   b5720:	000c0d58 	.word	0x000c0d58
   b5724:	000c0d5c 	.word	0x000c0d5c
   b5728:	000c0fda 	.word	0x000c0fda
   b572c:	000c0fe3 	.word	0x000c0fe3
   b5730:	000c0feb 	.word	0x000c0feb
   b5734:	2003dc9c 	.word	0x2003dc9c
   b5738:	000c0ffc 	.word	0x000c0ffc
   b573c:	000c100c 	.word	0x000c100c
   b5740:	2003dd51 	.word	0x2003dd51
   b5744:	000c0d6e 	.word	0x000c0d6e
        if(!strcmp(cmdStr,"sns")){
   b5748:	498b      	ldr	r1, [pc, #556]	; (b5978 <_Z14processCommandPKchb.part.0+0x5cc>)
   b574a:	f107 0010 	add.w	r0, r7, #16
   b574e:	f009 f9e2 	bl	beb16 <strcmp>
   b5752:	2800      	cmp	r0, #0
   b5754:	d149      	bne.n	b57ea <_Z14processCommandPKchb.part.0+0x43e>
            sscanf(dataStr,"%s %s %d %d %d %d %d",GPSLatstr,GPSLonstr,&do_in,&pH_in,&cond_in,&mcond_in,&temp_in);
   b5756:	f107 0324 	add.w	r3, r7, #36	; 0x24
   b575a:	9304      	str	r3, [sp, #16]
   b575c:	f107 0320 	add.w	r3, r7, #32
   b5760:	9303      	str	r3, [sp, #12]
   b5762:	f107 031c 	add.w	r3, r7, #28
   b5766:	9302      	str	r3, [sp, #8]
   b5768:	f107 0318 	add.w	r3, r7, #24
   b576c:	9301      	str	r3, [sp, #4]
   b576e:	f107 0314 	add.w	r3, r7, #20
   b5772:	9300      	str	r3, [sp, #0]
   b5774:	4981      	ldr	r1, [pc, #516]	; (b597c <_Z14processCommandPKchb.part.0+0x5d0>)
   b5776:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   b577a:	f107 0230 	add.w	r2, r7, #48	; 0x30
   b577e:	4640      	mov	r0, r8
   b5780:	f004 fbe8 	bl	b9f54 <sscanf>
            TargetWB->DO = ((float)do_in)/1000.0;
   b5784:	edd7 7a05 	vldr	s15, [r7, #20]
   b5788:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   b578c:	eddf 7a7c 	vldr	s15, [pc, #496]	; b5980 <_Z14processCommandPKchb.part.0+0x5d4>
   b5790:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b5794:	edc5 6a0c 	vstr	s13, [r5, #48]	; 0x30
            TargetWB->pH = ((float)pH_in)/1000.0;
   b5798:	ed97 7a06 	vldr	s14, [r7, #24]
   b579c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b57a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b57a4:	edc5 6a0a 	vstr	s13, [r5, #40]	; 0x28
            TargetWB->Cond = ((float)cond_in)/1000.0;
   b57a8:	ed97 7a07 	vldr	s14, [r7, #28]
   b57ac:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b57b0:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b57b4:	edc5 6a0d 	vstr	s13, [r5, #52]	; 0x34
            TargetWB->MCond = ((float)mcond_in)/1000.0;
   b57b8:	ed97 7a08 	vldr	s14, [r7, #32]
   b57bc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b57c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b57c4:	edc5 6a0e 	vstr	s13, [r5, #56]	; 0x38
            TargetWB->temp = ((float)temp_in)/1000.0;
   b57c8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
   b57cc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b57d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b57d4:	edc5 6a0b 	vstr	s13, [r5, #44]	; 0x2c
   b57d8:	ee18 3a10 	vmov	r3, s16
}
   b57dc:	378c      	adds	r7, #140	; 0x8c
   b57de:	469d      	mov	sp, r3
   b57e0:	46bd      	mov	sp, r7
   b57e2:	ecbd 8b02 	vpop	{d8}
   b57e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(!strcmp(cmdStr,"nak")){  //Acknowledgement for XBee and BLE
   b57ea:	4966      	ldr	r1, [pc, #408]	; (b5984 <_Z14processCommandPKchb.part.0+0x5d8>)
   b57ec:	f107 0010 	add.w	r0, r7, #16
   b57f0:	f009 f991 	bl	beb16 <strcmp>
   b57f4:	b930      	cbnz	r0, b5804 <_Z14processCommandPKchb.part.0+0x458>
            strncpy(errCmdStr,dataStr,3);
   b57f6:	4864      	ldr	r0, [pc, #400]	; (b5988 <_Z14processCommandPKchb.part.0+0x5dc>)
   b57f8:	2203      	movs	r2, #3
   b57fa:	4641      	mov	r1, r8
   b57fc:	f009 f9d7 	bl	bebae <strncpy>
            errCmdMode = mode;
   b5800:	4b62      	ldr	r3, [pc, #392]	; (b598c <_Z14processCommandPKchb.part.0+0x5e0>)
   b5802:	e679      	b.n	b54f8 <_Z14processCommandPKchb.part.0+0x14c>
        else if(!strcmp(cmdStr,"hwd")){  //Hello World! - Received startup pairing message
   b5804:	4962      	ldr	r1, [pc, #392]	; (b5990 <_Z14processCommandPKchb.part.0+0x5e4>)
   b5806:	f107 0010 	add.w	r0, r7, #16
   b580a:	f009 f984 	bl	beb16 <strcmp>
   b580e:	bb98      	cbnz	r0, b5878 <_Z14processCommandPKchb.part.0+0x4cc>
      : _M_current(__i) { }
   b5810:	4b60      	ldr	r3, [pc, #384]	; (b5994 <_Z14processCommandPKchb.part.0+0x5e8>)
   b5812:	e9d3 3000 	ldrd	r3, r0, [r3]
            bool newBot = true;
   b5816:	2201      	movs	r2, #1
            for(WaterBot w: WaterBots){
   b5818:	4283      	cmp	r3, r0
   b581a:	d005      	beq.n	b5828 <_Z14processCommandPKchb.part.0+0x47c>
                if(rxBotID == w.botNum) newBot = false;
   b581c:	7899      	ldrb	r1, [r3, #2]
   b581e:	3348      	adds	r3, #72	; 0x48
   b5820:	4549      	cmp	r1, r9
   b5822:	bf08      	it	eq
   b5824:	2200      	moveq	r2, #0
	return *this;
   b5826:	e7f7      	b.n	b5818 <_Z14processCommandPKchb.part.0+0x46c>
            if(newBot){
   b5828:	b1b2      	cbz	r2, b5858 <_Z14processCommandPKchb.part.0+0x4ac>
                WaterBot newWaterbot;
   b582a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   b582e:	f7fe ffbb 	bl	b47a8 <_ZN8WaterBotC1Ev>
                if(mode == 1) newWaterbot.BLEAvail = true;
   b5832:	2e01      	cmp	r6, #1
   b5834:	d114      	bne.n	b5860 <_Z14processCommandPKchb.part.0+0x4b4>
   b5836:	f887 6042 	strb.w	r6, [r7, #66]	; 0x42
                WaterBots.push_back(newWaterbot);
   b583a:	4856      	ldr	r0, [pc, #344]	; (b5994 <_Z14processCommandPKchb.part.0+0x5e8>)
                newWaterbot.botNum = rxBotID;
   b583c:	f887 903e 	strb.w	r9, [r7, #62]	; 0x3e
                WaterBots.push_back(newWaterbot);
   b5840:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   b5844:	f7ff fd9e 	bl	b5384 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
                PairBots.push_back(newWaterbot);
   b5848:	4853      	ldr	r0, [pc, #332]	; (b5998 <_Z14processCommandPKchb.part.0+0x5ec>)
   b584a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   b584e:	f7ff fd99 	bl	b5384 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
                redrawMenu = true;
   b5852:	4b52      	ldr	r3, [pc, #328]	; (b599c <_Z14processCommandPKchb.part.0+0x5f0>)
   b5854:	2201      	movs	r2, #1
   b5856:	701a      	strb	r2, [r3, #0]
            botPairRx = true;
   b5858:	4b51      	ldr	r3, [pc, #324]	; (b59a0 <_Z14processCommandPKchb.part.0+0x5f4>)
            redrawMenu = true;
   b585a:	2201      	movs	r2, #1
   b585c:	701a      	strb	r2, [r3, #0]
   b585e:	e7bb      	b.n	b57d8 <_Z14processCommandPKchb.part.0+0x42c>
                else if(mode == 2) newWaterbot.XBeeAvail = true;
   b5860:	2e02      	cmp	r6, #2
   b5862:	f04f 0301 	mov.w	r3, #1
   b5866:	d102      	bne.n	b586e <_Z14processCommandPKchb.part.0+0x4c2>
   b5868:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
   b586c:	e7e5      	b.n	b583a <_Z14processCommandPKchb.part.0+0x48e>
                else if(mode == 3) newWaterbot.LTEAvail = true;
   b586e:	2e03      	cmp	r6, #3
   b5870:	bf08      	it	eq
   b5872:	f887 3043 	strbeq.w	r3, [r7, #67]	; 0x43
   b5876:	e7e0      	b.n	b583a <_Z14processCommandPKchb.part.0+0x48e>
        else if(!strcmp(cmdStr,"pts")){
   b5878:	494a      	ldr	r1, [pc, #296]	; (b59a4 <_Z14processCommandPKchb.part.0+0x5f8>)
   b587a:	f107 0010 	add.w	r0, r7, #16
   b587e:	f009 f94a 	bl	beb16 <strcmp>
   b5882:	b9c8      	cbnz	r0, b58b8 <_Z14processCommandPKchb.part.0+0x50c>
   b5884:	4c48      	ldr	r4, [pc, #288]	; (b59a8 <_Z14processCommandPKchb.part.0+0x5fc>)
            if(!logFile.isOpen()){
   b5886:	7c23      	ldrb	r3, [r4, #16]
   b5888:	b983      	cbnz	r3, b58ac <_Z14processCommandPKchb.part.0+0x500>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b588a:	4948      	ldr	r1, [pc, #288]	; (b59ac <_Z14processCommandPKchb.part.0+0x600>)
   b588c:	f244 2202 	movw	r2, #16898	; 0x4202
   b5890:	f104 0010 	add.w	r0, r4, #16
   b5894:	f7fe fe9c 	bl	b45d0 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b5898:	4945      	ldr	r1, [pc, #276]	; (b59b0 <_Z14processCommandPKchb.part.0+0x604>)
   b589a:	4642      	mov	r2, r8
   b589c:	4620      	mov	r0, r4
   b589e:	f7fe fe07 	bl	b44b0 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b58a2:	f104 0010 	add.w	r0, r4, #16
   b58a6:	f003 f88d 	bl	b89c4 <_ZN7FatFile5closeEv>
   b58aa:	e795      	b.n	b57d8 <_Z14processCommandPKchb.part.0+0x42c>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b58ac:	4940      	ldr	r1, [pc, #256]	; (b59b0 <_Z14processCommandPKchb.part.0+0x604>)
   b58ae:	4642      	mov	r2, r8
   b58b0:	4620      	mov	r0, r4
   b58b2:	f7fe fdfd 	bl	b44b0 <_ZN5Print8printlnfEPKcz>
   b58b6:	e78f      	b.n	b57d8 <_Z14processCommandPKchb.part.0+0x42c>
        else if(!strcmp(cmdStr,"ldt") || !strcmp(cmdStr,"ldb")){
   b58b8:	493e      	ldr	r1, [pc, #248]	; (b59b4 <_Z14processCommandPKchb.part.0+0x608>)
   b58ba:	f107 0010 	add.w	r0, r7, #16
   b58be:	f009 f92a 	bl	beb16 <strcmp>
   b58c2:	b128      	cbz	r0, b58d0 <_Z14processCommandPKchb.part.0+0x524>
   b58c4:	493c      	ldr	r1, [pc, #240]	; (b59b8 <_Z14processCommandPKchb.part.0+0x60c>)
   b58c6:	f107 0010 	add.w	r0, r7, #16
   b58ca:	f009 f924 	bl	beb16 <strcmp>
   b58ce:	bb30      	cbnz	r0, b591e <_Z14processCommandPKchb.part.0+0x572>
class MenuPopUp{
   b58d0:	2300      	movs	r3, #0
            sprintf(m.primaryLine,"Warning\0");
   b58d2:	493a      	ldr	r1, [pc, #232]	; (b59bc <_Z14processCommandPKchb.part.0+0x610>)
class MenuPopUp{
   b58d4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
            sprintf(m.primaryLine,"Warning\0");
   b58d8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
class MenuPopUp{
   b58dc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
   b58e0:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
            sprintf(m.primaryLine,"Warning\0");
   b58e4:	f009 f921 	bl	beb2a <strcpy>
            sprintf(m.secondaryLine,"Bot %d\0", rxBotID);
   b58e8:	793a      	ldrb	r2, [r7, #4]
   b58ea:	4935      	ldr	r1, [pc, #212]	; (b59c0 <_Z14processCommandPKchb.part.0+0x614>)
   b58ec:	f107 0046 	add.w	r0, r7, #70	; 0x46
   b58f0:	f004 fb28 	bl	b9f44 <sprintf>
            sprintf(m.tertiaryLine, "Leak shutoff\0");
   b58f4:	4933      	ldr	r1, [pc, #204]	; (b59c4 <_Z14processCommandPKchb.part.0+0x618>)
   b58f6:	f107 0064 	add.w	r0, r7, #100	; 0x64
   b58fa:	f009 f916 	bl	beb2a <strcpy>
            m.primaryStart = 20;
   b58fe:	2314      	movs	r3, #20
   b5900:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
            m.secondaryStart = 40;
   b5904:	2328      	movs	r3, #40	; 0x28
   b5906:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            m.tertiaryStart = 30;
   b590a:	231e      	movs	r3, #30
            PopUps.push_back(m);
   b590c:	482e      	ldr	r0, [pc, #184]	; (b59c8 <_Z14processCommandPKchb.part.0+0x61c>)
            m.tertiaryStart = 25;
   b590e:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
            PopUps.push_back(m);
   b5912:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   b5916:	f7ff fc3d 	bl	b5194 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>
            redrawMenu = true;
   b591a:	4b20      	ldr	r3, [pc, #128]	; (b599c <_Z14processCommandPKchb.part.0+0x5f0>)
   b591c:	e79d      	b.n	b585a <_Z14processCommandPKchb.part.0+0x4ae>
        else if(!strcmp(cmdStr,"wld") || !strcmp(cmdStr,"wlb")){
   b591e:	492b      	ldr	r1, [pc, #172]	; (b59cc <_Z14processCommandPKchb.part.0+0x620>)
   b5920:	f107 0010 	add.w	r0, r7, #16
   b5924:	f009 f8f7 	bl	beb16 <strcmp>
   b5928:	b138      	cbz	r0, b593a <_Z14processCommandPKchb.part.0+0x58e>
   b592a:	4929      	ldr	r1, [pc, #164]	; (b59d0 <_Z14processCommandPKchb.part.0+0x624>)
   b592c:	f107 0010 	add.w	r0, r7, #16
   b5930:	f009 f8f1 	bl	beb16 <strcmp>
   b5934:	2800      	cmp	r0, #0
   b5936:	f47f af4f 	bne.w	b57d8 <_Z14processCommandPKchb.part.0+0x42c>
class MenuPopUp{
   b593a:	2300      	movs	r3, #0
            sprintf(m.primaryLine,"Warning\0");
   b593c:	491f      	ldr	r1, [pc, #124]	; (b59bc <_Z14processCommandPKchb.part.0+0x610>)
class MenuPopUp{
   b593e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
            sprintf(m.primaryLine,"Warning\0");
   b5942:	f107 003c 	add.w	r0, r7, #60	; 0x3c
class MenuPopUp{
   b5946:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
   b594a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
            sprintf(m.primaryLine,"Warning\0");
   b594e:	f009 f8ec 	bl	beb2a <strcpy>
            sprintf(m.secondaryLine,"Bot %d\0", rxBotID);
   b5952:	793a      	ldrb	r2, [r7, #4]
   b5954:	491a      	ldr	r1, [pc, #104]	; (b59c0 <_Z14processCommandPKchb.part.0+0x614>)
   b5956:	f107 0046 	add.w	r0, r7, #70	; 0x46
   b595a:	f004 faf3 	bl	b9f44 <sprintf>
            sprintf(m.tertiaryLine, "Leak detected\0");
   b595e:	491d      	ldr	r1, [pc, #116]	; (b59d4 <_Z14processCommandPKchb.part.0+0x628>)
   b5960:	f107 0064 	add.w	r0, r7, #100	; 0x64
   b5964:	f009 f8e1 	bl	beb2a <strcpy>
            m.primaryStart = 20;
   b5968:	2314      	movs	r3, #20
   b596a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
            m.secondaryStart = 40;
   b596e:	2328      	movs	r3, #40	; 0x28
   b5970:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            m.tertiaryStart = 25;
   b5974:	2319      	movs	r3, #25
   b5976:	e7c9      	b.n	b590c <_Z14processCommandPKchb.part.0+0x560>
   b5978:	000c0d7d 	.word	0x000c0d7d
   b597c:	000c0d81 	.word	0x000c0d81
   b5980:	447a0000 	.word	0x447a0000
   b5984:	000c0d96 	.word	0x000c0d96
   b5988:	2003dd70 	.word	0x2003dd70
   b598c:	2003dd6f 	.word	0x2003dd6f
   b5990:	000c0d9a 	.word	0x000c0d9a
   b5994:	2003dcb8 	.word	0x2003dcb8
   b5998:	2003dc90 	.word	0x2003dc90
   b599c:	2003da80 	.word	0x2003da80
   b59a0:	2003dd50 	.word	0x2003dd50
   b59a4:	000c0d9e 	.word	0x000c0d9e
   b59a8:	2003ddcc 	.word	0x2003ddcc
   b59ac:	2003dd74 	.word	0x2003dd74
   b59b0:	000c0da2 	.word	0x000c0da2
   b59b4:	000c0dc5 	.word	0x000c0dc5
   b59b8:	000c0dc9 	.word	0x000c0dc9
   b59bc:	000c0fda 	.word	0x000c0fda
   b59c0:	000c0fe3 	.word	0x000c0fe3
   b59c4:	000c101f 	.word	0x000c101f
   b59c8:	2003dc9c 	.word	0x2003dc9c
   b59cc:	000c0dcd 	.word	0x000c0dcd
   b59d0:	000c0dd1 	.word	0x000c0dd1
   b59d4:	000c102d 	.word	0x000c102d

000b59d8 <_Z14processCommandPKchb>:
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b59d8:	7883      	ldrb	r3, [r0, #2]
   b59da:	2b41      	cmp	r3, #65	; 0x41
   b59dc:	d104      	bne.n	b59e8 <_Z14processCommandPKchb+0x10>
   b59de:	78c3      	ldrb	r3, [r0, #3]
   b59e0:	2b42      	cmp	r3, #66	; 0x42
   b59e2:	d106      	bne.n	b59f2 <_Z14processCommandPKchb+0x1a>
   b59e4:	f7ff bce2 	b.w	b53ac <_Z14processCommandPKchb.part.0>
   b59e8:	2b43      	cmp	r3, #67	; 0x43
   b59ea:	d102      	bne.n	b59f2 <_Z14processCommandPKchb+0x1a>
   b59ec:	78c3      	ldrb	r3, [r0, #3]
   b59ee:	2b43      	cmp	r3, #67	; 0x43
   b59f0:	e7f7      	b.n	b59e2 <_Z14processCommandPKchb+0xa>
}
   b59f2:	4770      	bx	lr

000b59f4 <_Z14dataLTEHandlerPKcS0_>:
void dataLTEHandler(const char *event, const char *data){
   b59f4:	b510      	push	{r4, lr}
   b59f6:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b59f8:	2200      	movs	r2, #0
   b59fa:	2104      	movs	r1, #4
   b59fc:	4620      	mov	r0, r4
   b59fe:	f7ff ffeb 	bl	b59d8 <_Z14processCommandPKchb>
    if(logMessages){
   b5a02:	4b0b      	ldr	r3, [pc, #44]	; (b5a30 <_Z14dataLTEHandlerPKcS0_+0x3c>)
   b5a04:	781b      	ldrb	r3, [r3, #0]
   b5a06:	b193      	cbz	r3, b5a2e <_Z14dataLTEHandlerPKcS0_+0x3a>
   b5a08:	480a      	ldr	r0, [pc, #40]	; (b5a34 <_Z14dataLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5a0a:	7c03      	ldrb	r3, [r0, #16]
   b5a0c:	b92b      	cbnz	r3, b5a1a <_Z14dataLTEHandlerPKcS0_+0x26>
   b5a0e:	490a      	ldr	r1, [pc, #40]	; (b5a38 <_Z14dataLTEHandlerPKcS0_+0x44>)
   b5a10:	f244 2202 	movw	r2, #16898	; 0x4202
   b5a14:	3010      	adds	r0, #16
   b5a16:	f7fe fddb 	bl	b45d0 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b5a1a:	4622      	mov	r2, r4
   b5a1c:	4907      	ldr	r1, [pc, #28]	; (b5a3c <_Z14dataLTEHandlerPKcS0_+0x48>)
   b5a1e:	4805      	ldr	r0, [pc, #20]	; (b5a34 <_Z14dataLTEHandlerPKcS0_+0x40>)
   b5a20:	f7fe fd46 	bl	b44b0 <_ZN5Print8printlnfEPKcz>
}
   b5a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b5a28:	4805      	ldr	r0, [pc, #20]	; (b5a40 <_Z14dataLTEHandlerPKcS0_+0x4c>)
   b5a2a:	f002 bfcb 	b.w	b89c4 <_ZN7FatFile5closeEv>
}
   b5a2e:	bd10      	pop	{r4, pc}
   b5a30:	2003de00 	.word	0x2003de00
   b5a34:	2003ddcc 	.word	0x2003ddcc
   b5a38:	2003dd74 	.word	0x2003dd74
   b5a3c:	000c0dd5 	.word	0x000c0dd5
   b5a40:	2003dddc 	.word	0x2003dddc

000b5a44 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b5a44:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b5a46:	f101 0308 	add.w	r3, r1, #8
   b5a4a:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b5a4e:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b5a50:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b5a54:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b5a56:	460a      	mov	r2, r1
   b5a58:	4601      	mov	r1, r0
   b5a5a:	4668      	mov	r0, sp
   b5a5c:	f008 ffaf 	bl	be9be <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b5a60:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b5a64:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b5a66:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b5a6a:	b113      	cbz	r3, b5a72 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b5a6c:	2300      	movs	r3, #0
   b5a6e:	f80d 3004 	strb.w	r3, [sp, r4]
    processCommand(btBuf,1,true);
   b5a72:	2201      	movs	r2, #1
   b5a74:	4611      	mov	r1, r2
   b5a76:	4628      	mov	r0, r5
   b5a78:	f7ff ffae 	bl	b59d8 <_Z14processCommandPKchb>
    if(logMessages){
   b5a7c:	4b0a      	ldr	r3, [pc, #40]	; (b5aa8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>)
   b5a7e:	781b      	ldrb	r3, [r3, #0]
   b5a80:	b183      	cbz	r3, b5aa4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60>
   b5a82:	480a      	ldr	r0, [pc, #40]	; (b5aac <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x68>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5a84:	7c03      	ldrb	r3, [r0, #16]
   b5a86:	b92b      	cbnz	r3, b5a94 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x50>
   b5a88:	4909      	ldr	r1, [pc, #36]	; (b5ab0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6c>)
   b5a8a:	f244 2202 	movw	r2, #16898	; 0x4202
   b5a8e:	3010      	adds	r0, #16
   b5a90:	f7fe fd9e 	bl	b45d0 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b5a94:	4907      	ldr	r1, [pc, #28]	; (b5ab4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x70>)
   b5a96:	4805      	ldr	r0, [pc, #20]	; (b5aac <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x68>)
   b5a98:	462a      	mov	r2, r5
   b5a9a:	f7fe fd09 	bl	b44b0 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b5a9e:	4806      	ldr	r0, [pc, #24]	; (b5ab8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>)
   b5aa0:	f002 ff90 	bl	b89c4 <_ZN7FatFile5closeEv>
}
   b5aa4:	46bd      	mov	sp, r7
   b5aa6:	bdb0      	pop	{r4, r5, r7, pc}
   b5aa8:	2003de00 	.word	0x2003de00
   b5aac:	2003ddcc 	.word	0x2003ddcc
   b5ab0:	2003dd74 	.word	0x2003dd74
   b5ab4:	000c0df5 	.word	0x000c0df5
   b5ab8:	2003dddc 	.word	0x2003dddc

000b5abc <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b5abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if(logMessages){
   b5ac0:	f8df 80d4 	ldr.w	r8, [pc, #212]	; b5b98 <_Z11XBeeHandlerv+0xdc>
   b5ac4:	4d31      	ldr	r5, [pc, #196]	; (b5b8c <_Z11XBeeHandlerv+0xd0>)
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b5ac6:	f8df 90d4 	ldr.w	r9, [pc, #212]	; b5b9c <_Z11XBeeHandlerv+0xe0>
void XBeeHandler(){  
   b5aca:	b089      	sub	sp, #36	; 0x24
   b5acc:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b5ace:	f008 f847 	bl	bdb60 <_Z22__fetch_global_Serial1v>
   b5ad2:	6803      	ldr	r3, [r0, #0]
   b5ad4:	691b      	ldr	r3, [r3, #16]
   b5ad6:	4798      	blx	r3
   b5ad8:	2800      	cmp	r0, #0
   b5ada:	d052      	beq.n	b5b82 <_Z11XBeeHandlerv+0xc6>
        String data = Serial1.readStringUntil('\n');
   b5adc:	f008 f840 	bl	bdb60 <_Z22__fetch_global_Serial1v>
   b5ae0:	220a      	movs	r2, #10
   b5ae2:	4601      	mov	r1, r0
   b5ae4:	4638      	mov	r0, r7
   b5ae6:	f007 f861 	bl	bcbac <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b5aea:	68bb      	ldr	r3, [r7, #8]
   b5aec:	3307      	adds	r3, #7
   b5aee:	f023 0307 	bic.w	r3, r3, #7
    }
   b5af2:	466e      	mov	r6, sp
        char buffer[data.length()];
   b5af4:	ebad 0d03 	sub.w	sp, sp, r3
   b5af8:	46ea      	mov	sl, sp
   b5afa:	2300      	movs	r3, #0
	inline unsigned int length(void) const {return len;}
   b5afc:	68b9      	ldr	r1, [r7, #8]
   b5afe:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b5b02:	458b      	cmp	fp, r1
   b5b04:	f103 0401 	add.w	r4, r3, #1
   b5b08:	d207      	bcs.n	b5b1a <_Z11XBeeHandlerv+0x5e>
   b5b0a:	4659      	mov	r1, fp
   b5b0c:	4638      	mov	r0, r7
   b5b0e:	f004 fc81 	bl	ba414 <_ZNK6String6charAtEj>
   b5b12:	4623      	mov	r3, r4
   b5b14:	f80a 000b 	strb.w	r0, [sl, fp]
   b5b18:	e7f0      	b.n	b5afc <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b5b1a:	2901      	cmp	r1, #1
   b5b1c:	d90a      	bls.n	b5b34 <_Z11XBeeHandlerv+0x78>
   b5b1e:	3901      	subs	r1, #1
   b5b20:	4638      	mov	r0, r7
   b5b22:	f004 fc77 	bl	ba414 <_ZNK6String6charAtEj>
   b5b26:	280d      	cmp	r0, #13
   b5b28:	bf01      	itttt	eq
   b5b2a:	68bb      	ldreq	r3, [r7, #8]
   b5b2c:	4453      	addeq	r3, sl
   b5b2e:	2200      	moveq	r2, #0
   b5b30:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        processCommand(buffer,2,true);
   b5b34:	2201      	movs	r2, #1
   b5b36:	2102      	movs	r1, #2
   b5b38:	4650      	mov	r0, sl
   b5b3a:	f7ff ff4d 	bl	b59d8 <_Z14processCommandPKchb>
        if(logMessages){
   b5b3e:	f898 3000 	ldrb.w	r3, [r8]
   b5b42:	b1cb      	cbz	r3, b5b78 <_Z11XBeeHandlerv+0xbc>
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5b44:	7c2b      	ldrb	r3, [r5, #16]
   b5b46:	b92b      	cbnz	r3, b5b54 <_Z11XBeeHandlerv+0x98>
   b5b48:	4911      	ldr	r1, [pc, #68]	; (b5b90 <_Z11XBeeHandlerv+0xd4>)
   b5b4a:	4812      	ldr	r0, [pc, #72]	; (b5b94 <_Z11XBeeHandlerv+0xd8>)
   b5b4c:	f244 2202 	movw	r2, #16898	; 0x4202
   b5b50:	f7fe fd3e 	bl	b45d0 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b5b54:	4639      	mov	r1, r7
   b5b56:	f107 0010 	add.w	r0, r7, #16
   b5b5a:	f004 fbef 	bl	ba33c <_ZN6StringC1ERKS_>
   b5b5e:	f107 0210 	add.w	r2, r7, #16
   b5b62:	4649      	mov	r1, r9
   b5b64:	4628      	mov	r0, r5
   b5b66:	f7fe fca3 	bl	b44b0 <_ZN5Print8printlnfEPKcz>
   b5b6a:	f107 0010 	add.w	r0, r7, #16
   b5b6e:	f004 fb4f 	bl	ba210 <_ZN6StringD1Ev>
            logFile.close();
   b5b72:	4808      	ldr	r0, [pc, #32]	; (b5b94 <_Z11XBeeHandlerv+0xd8>)
   b5b74:	f002 ff26 	bl	b89c4 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b5b78:	4638      	mov	r0, r7
   b5b7a:	f004 fb49 	bl	ba210 <_ZN6StringD1Ev>
   b5b7e:	46b5      	mov	sp, r6
    while(Serial1.available()){
   b5b80:	e7a5      	b.n	b5ace <_Z11XBeeHandlerv+0x12>
}
   b5b82:	3724      	adds	r7, #36	; 0x24
   b5b84:	46bd      	mov	sp, r7
   b5b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5b8a:	bf00      	nop
   b5b8c:	2003ddcc 	.word	0x2003ddcc
   b5b90:	2003dd74 	.word	0x2003dd74
   b5b94:	2003dddc 	.word	0x2003dddc
   b5b98:	2003de00 	.word	0x2003de00
   b5b9c:	000c0e15 	.word	0x000c0e15

000b5ba0 <_Z15LTEInputCommand6String>:

int LTEInputCommand(String cmd){
   b5ba0:	b500      	push	{lr}
   b5ba2:	b09b      	sub	sp, #108	; 0x6c
		{getBytes((unsigned char *)buf, bufsize, index);}
   b5ba4:	2300      	movs	r3, #0
   b5ba6:	2264      	movs	r2, #100	; 0x64
   b5ba8:	a901      	add	r1, sp, #4
   b5baa:	f004 fc35 	bl	ba418 <_ZNK6String8getBytesEPhjj>
    char cmdBuf[100];
    cmd.toCharArray(cmdBuf, 100);
    processCommand(cmdBuf, 4,false);
   b5bae:	2104      	movs	r1, #4
   b5bb0:	2200      	movs	r2, #0
   b5bb2:	eb0d 0001 	add.w	r0, sp, r1
   b5bb6:	f7ff ff0f 	bl	b59d8 <_Z14processCommandPKchb>
    if(logMessages){
   b5bba:	4b0c      	ldr	r3, [pc, #48]	; (b5bec <_Z15LTEInputCommand6String+0x4c>)
   b5bbc:	781b      	ldrb	r3, [r3, #0]
   b5bbe:	b183      	cbz	r3, b5be2 <_Z15LTEInputCommand6String+0x42>
   b5bc0:	480b      	ldr	r0, [pc, #44]	; (b5bf0 <_Z15LTEInputCommand6String+0x50>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5bc2:	7c03      	ldrb	r3, [r0, #16]
   b5bc4:	b92b      	cbnz	r3, b5bd2 <_Z15LTEInputCommand6String+0x32>
   b5bc6:	490b      	ldr	r1, [pc, #44]	; (b5bf4 <_Z15LTEInputCommand6String+0x54>)
   b5bc8:	f244 2202 	movw	r2, #16898	; 0x4202
   b5bcc:	3010      	adds	r0, #16
   b5bce:	f7fe fcff 	bl	b45d0 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",cmdBuf);
   b5bd2:	4909      	ldr	r1, [pc, #36]	; (b5bf8 <_Z15LTEInputCommand6String+0x58>)
   b5bd4:	4806      	ldr	r0, [pc, #24]	; (b5bf0 <_Z15LTEInputCommand6String+0x50>)
   b5bd6:	aa01      	add	r2, sp, #4
   b5bd8:	f7fe fc6a 	bl	b44b0 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b5bdc:	4807      	ldr	r0, [pc, #28]	; (b5bfc <_Z15LTEInputCommand6String+0x5c>)
   b5bde:	f002 fef1 	bl	b89c4 <_ZN7FatFile5closeEv>
    }
    return 1;
   b5be2:	2001      	movs	r0, #1
   b5be4:	b01b      	add	sp, #108	; 0x6c
   b5be6:	f85d fb04 	ldr.w	pc, [sp], #4
   b5bea:	bf00      	nop
   b5bec:	2003de00 	.word	0x2003de00
   b5bf0:	2003ddcc 	.word	0x2003ddcc
   b5bf4:	2003dd74 	.word	0x2003dd74
   b5bf8:	000c0dd5 	.word	0x000c0dd5
   b5bfc:	2003dddc 	.word	0x2003dddc

000b5c00 <_Z11WaterBotSimh>:
void WaterBotSim(uint8_t count){
   b5c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c04:	4d20      	ldr	r5, [pc, #128]	; (b5c88 <_Z11WaterBotSimh+0x88>)
        WaterBots.push_back(simBot);
   b5c06:	f8df a080 	ldr.w	sl, [pc, #128]	; b5c88 <_Z11WaterBotSimh+0x88>
   b5c0a:	e9d5 2300 	ldrd	r2, r3, [r5]
   b5c0e:	1a9b      	subs	r3, r3, r2
   b5c10:	4a1e      	ldr	r2, [pc, #120]	; (b5c8c <_Z11WaterBotSimh+0x8c>)
   b5c12:	10db      	asrs	r3, r3, #3
   b5c14:	4353      	muls	r3, r2
    if(count + WaterBots.size() > 10) count = 10-WaterBots.size();
   b5c16:	b2dc      	uxtb	r4, r3
   b5c18:	4403      	add	r3, r0
   b5c1a:	2b0a      	cmp	r3, #10
   b5c1c:	bf84      	itt	hi
   b5c1e:	f1c4 000a 	rsbhi	r0, r4, #10
   b5c22:	b2c0      	uxtbhi	r0, r0
    uint8_t botloop = count+WaterBots.size();
   b5c24:	4420      	add	r0, r4
void WaterBotSim(uint8_t count){
   b5c26:	b092      	sub	sp, #72	; 0x48
    uint8_t botloop = count+WaterBots.size();
   b5c28:	b2c4      	uxtb	r4, r0
   b5c2a:	2700      	movs	r7, #0
        simBot.XBeeAvail = true;
   b5c2c:	f04f 0901 	mov.w	r9, #1
   b5c30:	fa5f f887 	uxtb.w	r8, r7
    for(uint8_t temp = 0; temp < botloop; temp++){
   b5c34:	4544      	cmp	r4, r8
   b5c36:	d923      	bls.n	b5c80 <_Z11WaterBotSimh+0x80>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b5c38:	e9d5 3100 	ldrd	r3, r1, [r5]
        int dupeBot = false;
   b5c3c:	2600      	movs	r6, #0
        for(WaterBot wb: WaterBots){
   b5c3e:	4299      	cmp	r1, r3
   b5c40:	d005      	beq.n	b5c4e <_Z11WaterBotSimh+0x4e>
            if(wb.botNum == temp) dupeBot = true;
   b5c42:	789a      	ldrb	r2, [r3, #2]
   b5c44:	3348      	adds	r3, #72	; 0x48
   b5c46:	4542      	cmp	r2, r8
   b5c48:	bf08      	it	eq
   b5c4a:	2601      	moveq	r6, #1
	return *this;
   b5c4c:	e7f7      	b.n	b5c3e <_Z11WaterBotSimh+0x3e>
        if(dupeBot) continue;
   b5c4e:	b9ae      	cbnz	r6, b5c7c <_Z11WaterBotSimh+0x7c>
        WaterBot simBot;
   b5c50:	4668      	mov	r0, sp
   b5c52:	f7fe fda9 	bl	b47a8 <_ZN8WaterBotC1Ev>
        simBot.battPercent = random(100);
   b5c56:	2064      	movs	r0, #100	; 0x64
        simBot.driveMode = 0;
   b5c58:	f8ad 600c 	strh.w	r6, [sp, #12]
        simBot.botNum = temp;
   b5c5c:	f88d 8002 	strb.w	r8, [sp, #2]
        simBot.BLEAvail = false;
   b5c60:	f8ad 6006 	strh.w	r6, [sp, #6]
        simBot.XBeeAvail = true;
   b5c64:	f88d 9008 	strb.w	r9, [sp, #8]
        simBot.SDAvail = true;
   b5c68:	f88d 900b 	strb.w	r9, [sp, #11]
        simBot.battPercent = random(100);
   b5c6c:	f007 fe21 	bl	bd8b2 <_Z6randomi>
        WaterBots.push_back(simBot);
   b5c70:	4669      	mov	r1, sp
        simBot.battPercent = random(100);
   b5c72:	f8ad 0004 	strh.w	r0, [sp, #4]
        WaterBots.push_back(simBot);
   b5c76:	4650      	mov	r0, sl
   b5c78:	f7ff fb84 	bl	b5384 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
    for(uint8_t temp = 0; temp < botloop; temp++){
   b5c7c:	3701      	adds	r7, #1
   b5c7e:	e7d7      	b.n	b5c30 <_Z11WaterBotSimh+0x30>
}
   b5c80:	b012      	add	sp, #72	; 0x48
   b5c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5c86:	bf00      	nop
   b5c88:	2003dcb8 	.word	0x2003dcb8
   b5c8c:	38e38e39 	.word	0x38e38e39

000b5c90 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b5c90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c94:	e9d0 8900 	ldrd	r8, r9, [r0]
   b5c98:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
   b5c9a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c9e:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
   b5ca2:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   b5ca6:	4607      	mov	r7, r0
   b5ca8:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5caa:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   b5cae:	d102      	bne.n	b5cb6 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b5cb0:	4820      	ldr	r0, [pc, #128]	; (b5d34 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
   b5cb2:	f007 ffbd 	bl	bdc30 <_ZSt20__throw_length_errorPKc>
   b5cb6:	2c01      	cmp	r4, #1
   b5cb8:	4622      	mov	r2, r4
   b5cba:	bf38      	it	cc
   b5cbc:	2201      	movcc	r2, #1
   b5cbe:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b5cc0:	eba1 0508 	sub.w	r5, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5cc4:	d231      	bcs.n	b5d2a <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5cc6:	b394      	cbz	r4, b5d2e <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
   b5cc8:	429c      	cmp	r4, r3
   b5cca:	bf28      	it	cs
   b5ccc:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5cce:	00e0      	lsls	r0, r4, #3
   b5cd0:	f7fe f9e1 	bl	b4096 <_Znwj>
   b5cd4:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5cd6:	1973      	adds	r3, r6, r5
   b5cd8:	bf1c      	itt	ne
   b5cda:	e9db 0100 	ldrdne	r0, r1, [fp]
   b5cde:	e9c3 0100 	strdne	r0, r1, [r3]
      if (__count > 0)
   b5ce2:	2d00      	cmp	r5, #0
   b5ce4:	dd04      	ble.n	b5cf0 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x60>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b5ce6:	462a      	mov	r2, r5
   b5ce8:	4641      	mov	r1, r8
   b5cea:	4630      	mov	r0, r6
   b5cec:	f008 fe75 	bl	be9da <memmove>
      ptrdiff_t __count = __last - __first;
   b5cf0:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
   b5cf4:	3508      	adds	r5, #8
      if (__count > 0)
   b5cf6:	f1b9 0f00 	cmp.w	r9, #0
   b5cfa:	4435      	add	r5, r6
   b5cfc:	dd04      	ble.n	b5d08 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b5cfe:	464a      	mov	r2, r9
   b5d00:	4651      	mov	r1, sl
   b5d02:	4628      	mov	r0, r5
   b5d04:	f008 fe5b 	bl	be9be <memcpy>
      return __result + __count;
   b5d08:	444d      	add	r5, r9
	if (__p)
   b5d0a:	f1b8 0f00 	cmp.w	r8, #0
   b5d0e:	d005      	beq.n	b5d1c <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
   b5d10:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b5d12:	4640      	mov	r0, r8
   b5d14:	eba1 0108 	sub.w	r1, r1, r8
   b5d18:	f7fe f9c1 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5d1c:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   b5d20:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5d24:	60bc      	str	r4, [r7, #8]
    }
   b5d26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5d2a:	461c      	mov	r4, r3
   b5d2c:	e7cf      	b.n	b5cce <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5d2e:	4626      	mov	r6, r4
   b5d30:	e7d1      	b.n	b5cd6 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
   b5d32:	bf00      	nop
   b5d34:	000c0ccc 	.word	0x000c0ccc

000b5d38 <_Z7BLEScani>:
void BLEScan(int BotNumber){
   b5d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5d3c:	b0a3      	sub	sp, #140	; 0x8c
   b5d3e:	4606      	mov	r6, r0
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   b5d40:	f005 f884 	bl	bae4c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5d44:	4965      	ldr	r1, [pc, #404]	; (b5edc <_Z7BLEScani+0x1a4>)
   b5d46:	2214      	movs	r2, #20
   b5d48:	f005 f978 	bl	bb03c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
	if (count > 0) {
   b5d4c:	4680      	mov	r8, r0
   b5d4e:	2800      	cmp	r0, #0
   b5d50:	f000 80c1 	beq.w	b5ed6 <_Z7BLEScani+0x19e>
    const BleAddress& address() const {
        return address_;
    }

    const BleAdvertisingData& advertisingData() const {
        return advertisingData_;
   b5d54:	f8df 9184 	ldr.w	r9, [pc, #388]	; b5edc <_Z7BLEScani+0x1a4>
            if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   b5d58:	f8df a1bc 	ldr.w	sl, [pc, #444]	; b5f18 <_Z7BLEScani+0x1e0>
		for (uint8_t ii = 0; ii < count; ii++) {
   b5d5c:	2400      	movs	r4, #0
			BleUuid foundServiceUuid;
   b5d5e:	eb04 0bc4 	add.w	fp, r4, r4, lsl #3
   b5d62:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   b5d66:	f10b 0708 	add.w	r7, fp, #8
   b5d6a:	a803      	add	r0, sp, #12
   b5d6c:	444f      	add	r7, r9
   b5d6e:	f004 fcd1 	bl	ba714 <_ZN8particle7BleUuidC1Ev>
			size_t svcCount = scanResults[ii].advertisingData().serviceUUID(&foundServiceUuid, 1);
   b5d72:	2201      	movs	r2, #1
   b5d74:	a903      	add	r1, sp, #12
   b5d76:	4638      	mov	r0, r7
   b5d78:	f006 f804 	bl	bbd84 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
            if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   b5d7c:	b368      	cbz	r0, b5dda <_Z7BLEScani+0xa2>
   b5d7e:	4651      	mov	r1, sl
   b5d80:	a803      	add	r0, sp, #12
   b5d82:	f004 fd22 	bl	ba7ca <_ZNK8particle7BleUuideqERKS0_>
   b5d86:	4605      	mov	r5, r0
   b5d88:	b338      	cbz	r0, b5dda <_Z7BLEScani+0xa2>
                scanResults[ii].advertisingData().customData(BLECustomData,CUSTOM_DATA_LEN);
   b5d8a:	2208      	movs	r2, #8
   b5d8c:	a901      	add	r1, sp, #4
   b5d8e:	4638      	mov	r0, r7
   b5d90:	f004 fe78 	bl	baa84 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
                if(BotNumber == -2){
   b5d94:	1cb2      	adds	r2, r6, #2
   b5d96:	d12b      	bne.n	b5df0 <_Z7BLEScani+0xb8>
      : _M_current(__i) { }
   b5d98:	4a51      	ldr	r2, [pc, #324]	; (b5ee0 <_Z7BLEScani+0x1a8>)
                        if(BLECustomData[0] == p.botNum){
   b5d9a:	f89d 0004 	ldrb.w	r0, [sp, #4]
   b5d9e:	6857      	ldr	r7, [r2, #4]
   b5da0:	6813      	ldr	r3, [r2, #0]
                    for(PairBot p: BLEPair){
   b5da2:	42bb      	cmp	r3, r7
   b5da4:	d005      	beq.n	b5db2 <_Z7BLEScani+0x7a>
                        if(BLECustomData[0] == p.botNum){
   b5da6:	f813 1b08 	ldrb.w	r1, [r3], #8
                            newBot = false;
   b5daa:	4281      	cmp	r1, r0
   b5dac:	bf08      	it	eq
   b5dae:	2500      	moveq	r5, #0
	return *this;
   b5db0:	e7f7      	b.n	b5da2 <_Z7BLEScani+0x6a>
                    if(newBot){
   b5db2:	b195      	cbz	r5, b5dda <_Z7BLEScani+0xa2>
    const BleAdvertisingData& scanResponse() const {
        return scanResponse_;
    }

    int8_t rssi() const {
        return rssi_;
   b5db4:	2124      	movs	r1, #36	; 0x24
   b5db6:	fb01 9104 	mla	r1, r1, r4, r9
                        NewBot.botNum = BLECustomData[0];
   b5dba:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
                        NewBot.rssi = scanResults[ii].rssi();
   b5dbe:	f991 1020 	ldrsb.w	r1, [r1, #32]
   b5dc2:	9111      	str	r1, [sp, #68]	; 0x44
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5dc4:	6891      	ldr	r1, [r2, #8]
   b5dc6:	428b      	cmp	r3, r1
   b5dc8:	d00c      	beq.n	b5de4 <_Z7BLEScani+0xac>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5dca:	b11b      	cbz	r3, b5dd4 <_Z7BLEScani+0x9c>
   b5dcc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   b5dd0:	e883 0003 	stmia.w	r3, {r0, r1}
	    ++this->_M_impl._M_finish;
   b5dd4:	6853      	ldr	r3, [r2, #4]
   b5dd6:	3308      	adds	r3, #8
   b5dd8:	6053      	str	r3, [r2, #4]
		for (uint8_t ii = 0; ii < count; ii++) {
   b5dda:	3401      	adds	r4, #1
   b5ddc:	b2e4      	uxtb	r4, r4
   b5dde:	4544      	cmp	r4, r8
   b5de0:	d3bd      	bcc.n	b5d5e <_Z7BLEScani+0x26>
   b5de2:	e078      	b.n	b5ed6 <_Z7BLEScani+0x19e>
	  _M_realloc_insert(end(), __x);
   b5de4:	483e      	ldr	r0, [pc, #248]	; (b5ee0 <_Z7BLEScani+0x1a8>)
   b5de6:	aa10      	add	r2, sp, #64	; 0x40
   b5de8:	4619      	mov	r1, r3
   b5dea:	f7ff ff51 	bl	b5c90 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   b5dee:	e7f4      	b.n	b5dda <_Z7BLEScani+0xa2>
                if(BotNumber == -1 || BotNumber == BLECustomData[0]){   //Check if a particular bot number was specified
   b5df0:	1c73      	adds	r3, r6, #1
   b5df2:	d003      	beq.n	b5dfc <_Z7BLEScani+0xc4>
   b5df4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5df8:	42b3      	cmp	r3, r6
   b5dfa:	d1ee      	bne.n	b5dda <_Z7BLEScani+0xa2>
                    peer = BLE.connect(scanResults[ii].address());
   b5dfc:	f005 f826 	bl	bae4c <_ZN8particle14BleLocalDevice11getInstanceEv>
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5e00:	4d38      	ldr	r5, [pc, #224]	; (b5ee4 <_Z7BLEScani+0x1ac>)
   b5e02:	4601      	mov	r1, r0
   b5e04:	2301      	movs	r3, #1
   b5e06:	eb09 020b 	add.w	r2, r9, fp
   b5e0a:	a810      	add	r0, sp, #64	; 0x40
   b5e0c:	f006 fbf2 	bl	bc5f4 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   b5e10:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b5e12:	9c11      	ldr	r4, [sp, #68]	; 0x44
   b5e14:	602b      	str	r3, [r5, #0]
	if (__tmp != _M_pi)
   b5e16:	686b      	ldr	r3, [r5, #4]
   b5e18:	429c      	cmp	r4, r3
   b5e1a:	d008      	beq.n	b5e2e <_Z7BLEScani+0xf6>
	    if (__tmp != 0)
   b5e1c:	b114      	cbz	r4, b5e24 <_Z7BLEScani+0xec>
    { ++_M_use_count; }
   b5e1e:	6863      	ldr	r3, [r4, #4]
   b5e20:	3301      	adds	r3, #1
   b5e22:	6063      	str	r3, [r4, #4]
	    if (_M_pi != 0)
   b5e24:	6868      	ldr	r0, [r5, #4]
   b5e26:	b108      	cbz	r0, b5e2c <_Z7BLEScani+0xf4>
	      _M_pi->_M_release();
   b5e28:	f7fe fb8e 	bl	b4548 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b5e2c:	606c      	str	r4, [r5, #4]
   b5e2e:	a810      	add	r0, sp, #64	; 0x40
   b5e30:	f005 f97b 	bl	bb12a <_ZN8particle13BlePeerDeviceD1Ev>
				    if (peer.connected()) {
   b5e34:	482b      	ldr	r0, [pc, #172]	; (b5ee4 <_Z7BLEScani+0x1ac>)
   b5e36:	f004 ff7b 	bl	bad30 <_ZNK8particle13BlePeerDevice9connectedEv>
   b5e3a:	4605      	mov	r5, r0
   b5e3c:	2800      	cmp	r0, #0
   b5e3e:	d04a      	beq.n	b5ed6 <_Z7BLEScani+0x19e>
                        meshPair = false;
   b5e40:	4b29      	ldr	r3, [pc, #164]	; (b5ee8 <_Z7BLEScani+0x1b0>)
   b5e42:	4e2a      	ldr	r6, [pc, #168]	; (b5eec <_Z7BLEScani+0x1b4>)
   b5e44:	2400      	movs	r4, #0
   b5e46:	701c      	strb	r4, [r3, #0]
                        startConnect = true;
   b5e48:	4b29      	ldr	r3, [pc, #164]	; (b5ef0 <_Z7BLEScani+0x1b8>)
   b5e4a:	f04f 0801 	mov.w	r8, #1
                        scanResults[ii].advertisingData().customData(bufName, BLE_MAX_ADV_DATA_LEN);
   b5e4e:	221f      	movs	r2, #31
   b5e50:	a908      	add	r1, sp, #32
   b5e52:	4638      	mov	r0, r7
                        startConnect = true;
   b5e54:	f883 8000 	strb.w	r8, [r3]
                        scanResults[ii].advertisingData().customData(bufName, BLE_MAX_ADV_DATA_LEN);
   b5e58:	f004 fe14 	bl	baa84 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
					    peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   b5e5c:	4a25      	ldr	r2, [pc, #148]	; (b5ef4 <_Z7BLEScani+0x1bc>)
   b5e5e:	4926      	ldr	r1, [pc, #152]	; (b5ef8 <_Z7BLEScani+0x1c0>)
   b5e60:	4820      	ldr	r0, [pc, #128]	; (b5ee4 <_Z7BLEScani+0x1ac>)
   b5e62:	f006 f85b 	bl	bbf1c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
					    peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
   b5e66:	4a25      	ldr	r2, [pc, #148]	; (b5efc <_Z7BLEScani+0x1c4>)
   b5e68:	4925      	ldr	r1, [pc, #148]	; (b5f00 <_Z7BLEScani+0x1c8>)
   b5e6a:	481e      	ldr	r0, [pc, #120]	; (b5ee4 <_Z7BLEScani+0x1ac>)
   b5e6c:	f006 f856 	bl	bbf1c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        peer.getCharacteristicByUUID(peerOffloadCharacteristic, offldUuid);
   b5e70:	4a24      	ldr	r2, [pc, #144]	; (b5f04 <_Z7BLEScani+0x1cc>)
   b5e72:	4925      	ldr	r1, [pc, #148]	; (b5f08 <_Z7BLEScani+0x1d0>)
   b5e74:	481b      	ldr	r0, [pc, #108]	; (b5ee4 <_Z7BLEScani+0x1ac>)
   b5e76:	f006 f851 	bl	bbf1c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        WaterBot newWaterbot;
   b5e7a:	a810      	add	r0, sp, #64	; 0x40
   b5e7c:	f7fe fc94 	bl	b47a8 <_ZN8WaterBotC1Ev>
                        newWaterbot.botNum = bufName[0];
   b5e80:	f89d 3020 	ldrb.w	r3, [sp, #32]
                        PairBots.push_back(newWaterbot);
   b5e84:	4821      	ldr	r0, [pc, #132]	; (b5f0c <_Z7BLEScani+0x1d4>)
                        newWaterbot.botNum = bufName[0];
   b5e86:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
                        PairBots.push_back(newWaterbot);
   b5e8a:	a910      	add	r1, sp, #64	; 0x40
                        newWaterbot.BLEAvail = true;
   b5e8c:	f88d 8046 	strb.w	r8, [sp, #70]	; 0x46
                        PairBots.push_back(newWaterbot);
   b5e90:	f7ff fa78 	bl	b5384 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      : _M_current(__i) { }
   b5e94:	4b1e      	ldr	r3, [pc, #120]	; (b5f10 <_Z7BLEScani+0x1d8>)
                            if(bufName[0] == w.botNum){
   b5e96:	f89d 0020 	ldrb.w	r0, [sp, #32]
   b5e9a:	685f      	ldr	r7, [r3, #4]
   b5e9c:	7831      	ldrb	r1, [r6, #0]
   b5e9e:	681b      	ldr	r3, [r3, #0]
                        bool newBot = true;
   b5ea0:	462a      	mov	r2, r5
                        for(WaterBot &w: WaterBots){
   b5ea2:	429f      	cmp	r7, r3
   b5ea4:	d00a      	beq.n	b5ebc <_Z7BLEScani+0x184>
                            if(bufName[0] == w.botNum){
   b5ea6:	f893 c002 	ldrb.w	ip, [r3, #2]
   b5eaa:	4560      	cmp	r0, ip
                                w.BLEAvail = true;
   b5eac:	bf01      	itttt	eq
   b5eae:	f883 8006 	strbeq.w	r8, [r3, #6]
                                BLEBotNum = w.botNum;
   b5eb2:	462c      	moveq	r4, r5
   b5eb4:	4601      	moveq	r1, r0
                                newBot = false;
   b5eb6:	2200      	moveq	r2, #0
      operator++() _GLIBCXX_NOEXCEPT
   b5eb8:	3348      	adds	r3, #72	; 0x48
	return *this;
   b5eba:	e7f2      	b.n	b5ea2 <_Z7BLEScani+0x16a>
   b5ebc:	b104      	cbz	r4, b5ec0 <_Z7BLEScani+0x188>
   b5ebe:	7031      	strb	r1, [r6, #0]
                        if(newBot){
   b5ec0:	b14a      	cbz	r2, b5ed6 <_Z7BLEScani+0x19e>
                            WaterBots.push_back(newWaterbot);
   b5ec2:	4813      	ldr	r0, [pc, #76]	; (b5f10 <_Z7BLEScani+0x1d8>)
   b5ec4:	a910      	add	r1, sp, #64	; 0x40
   b5ec6:	f7ff fa5d 	bl	b5384 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
                            BLEBotNum = newWaterbot.botNum;
   b5eca:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   b5ece:	7033      	strb	r3, [r6, #0]
                            redrawMenu = true;
   b5ed0:	4b10      	ldr	r3, [pc, #64]	; (b5f14 <_Z7BLEScani+0x1dc>)
   b5ed2:	2201      	movs	r2, #1
   b5ed4:	701a      	strb	r2, [r3, #0]
}
   b5ed6:	b023      	add	sp, #140	; 0x8c
   b5ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5edc:	2003ded8 	.word	0x2003ded8
   b5ee0:	2003dc70 	.word	0x2003dc70
   b5ee4:	2003deb0 	.word	0x2003deb0
   b5ee8:	2003de02 	.word	0x2003de02
   b5eec:	2003dc6c 	.word	0x2003dc6c
   b5ef0:	2003e62c 	.word	0x2003e62c
   b5ef4:	2003dcec 	.word	0x2003dcec
   b5ef8:	2003dec8 	.word	0x2003dec8
   b5efc:	2003dcd8 	.word	0x2003dcd8
   b5f00:	2003dec0 	.word	0x2003dec0
   b5f04:	2003dd04 	.word	0x2003dd04
   b5f08:	2003deb8 	.word	0x2003deb8
   b5f0c:	2003dc90 	.word	0x2003dc90
   b5f10:	2003dcb8 	.word	0x2003dcb8
   b5f14:	2003da80 	.word	0x2003da80
   b5f18:	2003dcc4 	.word	0x2003dcc4

000b5f1c <_Z13DataOffloaderh>:
void DataOffloader(uint8_t bot_id){
   b5f1c:	b570      	push	{r4, r5, r6, lr}
    if (!logDir.open("/")) {
   b5f1e:	4954      	ldr	r1, [pc, #336]	; (b6070 <_Z13DataOffloaderh+0x154>)
void DataOffloader(uint8_t bot_id){
   b5f20:	b098      	sub	sp, #96	; 0x60
   b5f22:	4604      	mov	r4, r0
    if (!logDir.open("/")) {
   b5f24:	2200      	movs	r2, #0
   b5f26:	4853      	ldr	r0, [pc, #332]	; (b6074 <_Z13DataOffloaderh+0x158>)
   b5f28:	f7fe fb52 	bl	b45d0 <_ZN7FatFile4openEPKci>
   b5f2c:	bb00      	cbnz	r0, b5f70 <_Z13DataOffloaderh+0x54>
        offloadingDone = true;
   b5f2e:	4b52      	ldr	r3, [pc, #328]	; (b6078 <_Z13DataOffloaderh+0x15c>)
        sprintf(m.primaryLine,"Warning\0");
   b5f30:	4952      	ldr	r1, [pc, #328]	; (b607c <_Z13DataOffloaderh+0x160>)
        offloadingDone = true;
   b5f32:	2401      	movs	r4, #1
        sprintf(m.primaryLine,"Warning\0");
   b5f34:	a805      	add	r0, sp, #20
        offloadingDone = true;
   b5f36:	701c      	strb	r4, [r3, #0]
        sprintf(m.primaryLine,"Warning\0");
   b5f38:	f008 fdf7 	bl	beb2a <strcpy>
        sprintf(m.secondaryLine,"CCHub");
   b5f3c:	4950      	ldr	r1, [pc, #320]	; (b6080 <_Z13DataOffloaderh+0x164>)
   b5f3e:	f10d 001e 	add.w	r0, sp, #30
   b5f42:	f008 fdf2 	bl	beb2a <strcpy>
        sprintf(m.tertiaryLine, "SD Card Failed\0");
   b5f46:	494f      	ldr	r1, [pc, #316]	; (b6084 <_Z13DataOffloaderh+0x168>)
   b5f48:	a80f      	add	r0, sp, #60	; 0x3c
   b5f4a:	f008 fdee 	bl	beb2a <strcpy>
        m.primaryStart = 20;
   b5f4e:	2314      	movs	r3, #20
        m.secondaryStart = 60;
   b5f50:	223c      	movs	r2, #60	; 0x3c
        PopUps.push_back(m);
   b5f52:	eb0d 0103 	add.w	r1, sp, r3
   b5f56:	484c      	ldr	r0, [pc, #304]	; (b6088 <_Z13DataOffloaderh+0x16c>)
        m.primaryStart = 20;
   b5f58:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
        m.tertiaryStart = 20;
   b5f5c:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
        m.secondaryStart = 60;
   b5f60:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
        PopUps.push_back(m);
   b5f64:	f7ff f916 	bl	b5194 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>
        redrawMenu = true;
   b5f68:	4b48      	ldr	r3, [pc, #288]	; (b608c <_Z13DataOffloaderh+0x170>)
   b5f6a:	701c      	strb	r4, [r3, #0]
}
   b5f6c:	b018      	add	sp, #96	; 0x60
   b5f6e:	bd70      	pop	{r4, r5, r6, pc}
   b5f70:	f003 fca2 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
    if(BLEBotNum != bot_id){
   b5f74:	4b46      	ldr	r3, [pc, #280]	; (b6090 <_Z13DataOffloaderh+0x174>)
   b5f76:	781b      	ldrb	r3, [r3, #0]
   b5f78:	42a3      	cmp	r3, r4
   b5f7a:	4605      	mov	r5, r0
   b5f7c:	d054      	beq.n	b6028 <_Z13DataOffloaderh+0x10c>
        offloadingDone = true;
   b5f7e:	4b3e      	ldr	r3, [pc, #248]	; (b6078 <_Z13DataOffloaderh+0x15c>)
        sprintf(m.primaryLine,"Info\0");
   b5f80:	4944      	ldr	r1, [pc, #272]	; (b6094 <_Z13DataOffloaderh+0x178>)
        offloadingDone = true;
   b5f82:	2601      	movs	r6, #1
        sprintf(m.primaryLine,"Info\0");
   b5f84:	a805      	add	r0, sp, #20
        offloadingDone = true;
   b5f86:	701e      	strb	r6, [r3, #0]
        sprintf(m.primaryLine,"Info\0");
   b5f88:	f008 fdcf 	bl	beb2a <strcpy>
        sprintf(m.secondaryLine,"Not connected to BLE\0");
   b5f8c:	4942      	ldr	r1, [pc, #264]	; (b6098 <_Z13DataOffloaderh+0x17c>)
   b5f8e:	f10d 001e 	add.w	r0, sp, #30
   b5f92:	f008 fdca 	bl	beb2a <strcpy>
        sprintf(m.tertiaryLine, "Switching BLE conn\0");
   b5f96:	4941      	ldr	r1, [pc, #260]	; (b609c <_Z13DataOffloaderh+0x180>)
   b5f98:	a80f      	add	r0, sp, #60	; 0x3c
   b5f9a:	f008 fdc6 	bl	beb2a <strcpy>
        m.primaryStart = 30;
   b5f9e:	231e      	movs	r3, #30
   b5fa0:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
        m.secondaryStart = 5;
   b5fa4:	2305      	movs	r3, #5
        PopUps.push_back(m);
   b5fa6:	a905      	add	r1, sp, #20
   b5fa8:	4837      	ldr	r0, [pc, #220]	; (b6088 <_Z13DataOffloaderh+0x16c>)
        m.secondaryStart = 5;
   b5faa:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
        m.tertiaryStart = 10;
   b5fae:	230a      	movs	r3, #10
   b5fb0:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
        PopUps.push_back(m);
   b5fb4:	f7ff f8ee 	bl	b5194 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>
        redrawMenu = true;
   b5fb8:	4b34      	ldr	r3, [pc, #208]	; (b608c <_Z13DataOffloaderh+0x170>)
   b5fba:	701e      	strb	r6, [r3, #0]
        BLE.disconnect(peer);
   b5fbc:	f004 ff46 	bl	bae4c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5fc0:	4937      	ldr	r1, [pc, #220]	; (b60a0 <_Z13DataOffloaderh+0x184>)
   b5fc2:	f005 fd84 	bl	bbace <_ZNK8particle14BleLocalDevice10disconnectERKNS_13BlePeerDeviceE>
        while(!BLE.connected() && millis() - startScanTime < 15000){
   b5fc6:	f643 2697 	movw	r6, #14999	; 0x3a97
   b5fca:	f004 ff3f 	bl	bae4c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5fce:	f004 ffea 	bl	bafa6 <_ZNK8particle14BleLocalDevice9connectedEv>
   b5fd2:	b958      	cbnz	r0, b5fec <_Z13DataOffloaderh+0xd0>
   b5fd4:	f003 fc70 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
   b5fd8:	1b40      	subs	r0, r0, r5
   b5fda:	42b0      	cmp	r0, r6
   b5fdc:	d806      	bhi.n	b5fec <_Z13DataOffloaderh+0xd0>
            BLEScan(bot_id);
   b5fde:	4620      	mov	r0, r4
   b5fe0:	f7ff feaa 	bl	b5d38 <_Z7BLEScani>
            delay(50);
   b5fe4:	2032      	movs	r0, #50	; 0x32
   b5fe6:	f006 fecb 	bl	bcd80 <delay>
        while(!BLE.connected() && millis() - startScanTime < 15000){
   b5fea:	e7ee      	b.n	b5fca <_Z13DataOffloaderh+0xae>
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   b5fec:	4a2d      	ldr	r2, [pc, #180]	; (b60a4 <_Z13DataOffloaderh+0x188>)
   b5fee:	4623      	mov	r3, r4
   b5ff0:	210a      	movs	r1, #10
   b5ff2:	a802      	add	r0, sp, #8
   b5ff4:	f003 ffb6 	bl	b9f64 <snprintf>
        sendData(OffloadCommand,0,true,false,false);
   b5ff8:	2300      	movs	r3, #0
   b5ffa:	9300      	str	r3, [sp, #0]
   b5ffc:	2201      	movs	r2, #1
   b5ffe:	4619      	mov	r1, r3
   b6000:	a802      	add	r0, sp, #8
        sendData(OffloadCommand,0,true,false,false);
   b6002:	f7fe fd5f 	bl	b4ac4 <_Z8sendDataPKchbbb>
   b6006:	f003 fc57 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
    if(millis() - startScanTime > 15000){
   b600a:	f643 2398 	movw	r3, #15000	; 0x3a98
   b600e:	1b40      	subs	r0, r0, r5
   b6010:	4298      	cmp	r0, r3
   b6012:	d914      	bls.n	b603e <_Z13DataOffloaderh+0x122>
   b6014:	4824      	ldr	r0, [pc, #144]	; (b60a8 <_Z13DataOffloaderh+0x18c>)
        if(logDir.isOpen()) logDir.close();
   b6016:	7c03      	ldrb	r3, [r0, #16]
   b6018:	2b00      	cmp	r3, #0
   b601a:	d0a7      	beq.n	b5f6c <_Z13DataOffloaderh+0x50>
   b601c:	3010      	adds	r0, #16
}
   b601e:	b018      	add	sp, #96	; 0x60
   b6020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if(logDir.isOpen()) logDir.close();
   b6024:	f002 bcce 	b.w	b89c4 <_ZN7FatFile5closeEv>
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   b6028:	4a1e      	ldr	r2, [pc, #120]	; (b60a4 <_Z13DataOffloaderh+0x188>)
   b602a:	210a      	movs	r1, #10
   b602c:	a805      	add	r0, sp, #20
   b602e:	f003 ff99 	bl	b9f64 <snprintf>
        sendData(OffloadCommand,0,true,false,false);
   b6032:	2300      	movs	r3, #0
   b6034:	9300      	str	r3, [sp, #0]
   b6036:	2201      	movs	r2, #1
   b6038:	4619      	mov	r1, r3
   b603a:	a805      	add	r0, sp, #20
   b603c:	e7e1      	b.n	b6002 <_Z13DataOffloaderh+0xe6>
    if(BLE.connected()) offloadingDone = false;
   b603e:	f004 ff05 	bl	bae4c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6042:	f004 ffb0 	bl	bafa6 <_ZNK8particle14BleLocalDevice9connectedEv>
   b6046:	4c0c      	ldr	r4, [pc, #48]	; (b6078 <_Z13DataOffloaderh+0x15c>)
   b6048:	b108      	cbz	r0, b604e <_Z13DataOffloaderh+0x132>
   b604a:	2300      	movs	r3, #0
   b604c:	7023      	strb	r3, [r4, #0]
    while(!offloadingDone) delay(100);
   b604e:	7823      	ldrb	r3, [r4, #0]
   b6050:	b91b      	cbnz	r3, b605a <_Z13DataOffloaderh+0x13e>
   b6052:	2064      	movs	r0, #100	; 0x64
   b6054:	f006 fe94 	bl	bcd80 <delay>
   b6058:	e7f9      	b.n	b604e <_Z13DataOffloaderh+0x132>
   b605a:	4813      	ldr	r0, [pc, #76]	; (b60a8 <_Z13DataOffloaderh+0x18c>)
    if(logDir.isOpen()) logDir.close();
   b605c:	7c03      	ldrb	r3, [r0, #16]
   b605e:	b113      	cbz	r3, b6066 <_Z13DataOffloaderh+0x14a>
   b6060:	3010      	adds	r0, #16
   b6062:	f002 fcaf 	bl	b89c4 <_ZN7FatFile5closeEv>
    offloadingMode = false;
   b6066:	4b11      	ldr	r3, [pc, #68]	; (b60ac <_Z13DataOffloaderh+0x190>)
   b6068:	2200      	movs	r2, #0
   b606a:	701a      	strb	r2, [r3, #0]
   b606c:	e77e      	b.n	b5f6c <_Z13DataOffloaderh+0x50>
   b606e:	bf00      	nop
   b6070:	000c0e36 	.word	0x000c0e36
   b6074:	2003dda8 	.word	0x2003dda8
   b6078:	2003de56 	.word	0x2003de56
   b607c:	000c0fda 	.word	0x000c0fda
   b6080:	000c0e38 	.word	0x000c0e38
   b6084:	000c0ffc 	.word	0x000c0ffc
   b6088:	2003dc9c 	.word	0x2003dc9c
   b608c:	2003da80 	.word	0x2003da80
   b6090:	2003dc6c 	.word	0x2003dc6c
   b6094:	000c103c 	.word	0x000c103c
   b6098:	000c1042 	.word	0x000c1042
   b609c:	000c1058 	.word	0x000c1058
   b60a0:	2003deb0 	.word	0x2003deb0
   b60a4:	000c0e3e 	.word	0x000c0e3e
   b60a8:	2003dd98 	.word	0x2003dd98
   b60ac:	2003de57 	.word	0x2003de57

000b60b0 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b60b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b60b4:	e9d0 9a00 	ldrd	r9, sl, [r0]
   b60b8:	468b      	mov	fp, r1
	if (max_size() - size() < __n)
   b60ba:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   b60be:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b60c0:	ebaa 0209 	sub.w	r2, sl, r9
	if (max_size() - size() < __n)
   b60c4:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   b60c8:	4680      	mov	r8, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b60ca:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   b60ce:	d102      	bne.n	b60d6 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b60d0:	4826      	ldr	r0, [pc, #152]	; (b616c <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>)
   b60d2:	f007 fdad 	bl	bdc30 <_ZSt20__throw_length_errorPKc>
   b60d6:	2c01      	cmp	r4, #1
   b60d8:	4622      	mov	r2, r4
   b60da:	bf38      	it	cc
   b60dc:	2201      	movcc	r2, #1
   b60de:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b60e0:	ebab 0609 	sub.w	r6, fp, r9
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b60e4:	d21a      	bcs.n	b611c <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b60e6:	b1dc      	cbz	r4, b6120 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x70>
   b60e8:	429c      	cmp	r4, r3
   b60ea:	bf28      	it	cs
   b60ec:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b60ee:	0120      	lsls	r0, r4, #4
   b60f0:	9101      	str	r1, [sp, #4]
   b60f2:	f7fd ffd0 	bl	b4096 <_Znwj>
   b60f6:	9901      	ldr	r1, [sp, #4]
   b60f8:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b60fa:	19a8      	adds	r0, r5, r6
   b60fc:	d001      	beq.n	b6102 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x52>
   b60fe:	f004 f903 	bl	ba308 <_ZN6StringC1EOS_>
   b6102:	4628      	mov	r0, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6104:	464e      	mov	r6, r9
	      for (; __first != __last; ++__first, (void)++__cur)
   b6106:	45b3      	cmp	fp, r6
   b6108:	f100 0710 	add.w	r7, r0, #16
   b610c:	d00a      	beq.n	b6124 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b610e:	b110      	cbz	r0, b6116 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x66>
   b6110:	4631      	mov	r1, r6
   b6112:	f004 f913 	bl	ba33c <_ZN6StringC1ERKS_>
   b6116:	3610      	adds	r6, #16
   b6118:	4638      	mov	r0, r7
   b611a:	e7f4      	b.n	b6106 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x56>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b611c:	461c      	mov	r4, r3
   b611e:	e7e6      	b.n	b60ee <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6120:	4625      	mov	r5, r4
   b6122:	e7ea      	b.n	b60fa <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   b6124:	4556      	cmp	r6, sl
   b6126:	d006      	beq.n	b6136 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
   b6128:	4631      	mov	r1, r6
   b612a:	4638      	mov	r0, r7
   b612c:	f004 f906 	bl	ba33c <_ZN6StringC1ERKS_>
   b6130:	3610      	adds	r6, #16
   b6132:	3710      	adds	r7, #16
   b6134:	e7f6      	b.n	b6124 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6136:	464e      	mov	r6, r9
	  for (; __first != __last; ++__first)
   b6138:	4556      	cmp	r6, sl
   b613a:	d004      	beq.n	b6146 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x96>
      __pointer->~_Tp();
   b613c:	4630      	mov	r0, r6
   b613e:	f004 f867 	bl	ba210 <_ZN6StringD1Ev>
	  for (; __first != __last; ++__first)
   b6142:	3610      	adds	r6, #16
   b6144:	e7f8      	b.n	b6138 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x88>
	if (__p)
   b6146:	f1b9 0f00 	cmp.w	r9, #0
   b614a:	d006      	beq.n	b615a <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
		    this->_M_impl._M_end_of_storage - __old_start);
   b614c:	f8d8 1008 	ldr.w	r1, [r8, #8]
	::operator delete(__p
   b6150:	4648      	mov	r0, r9
   b6152:	eba1 0109 	sub.w	r1, r1, r9
   b6156:	f7fd ffa2 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b615a:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   b615e:	e9c8 5700 	strd	r5, r7, [r8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b6162:	f8c8 4008 	str.w	r4, [r8, #8]
    }
   b6166:	b003      	add	sp, #12
   b6168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b616c:	000c0ccc 	.word	0x000c0ccc

000b6170 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0>:
      vector<_Tp, _Alloc>::
   b6170:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b6172:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   b6176:	42ab      	cmp	r3, r5
      vector<_Tp, _Alloc>::
   b6178:	4604      	mov	r4, r0
   b617a:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b617c:	d007      	beq.n	b618e <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b617e:	b113      	cbz	r3, b6186 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0+0x16>
   b6180:	4618      	mov	r0, r3
   b6182:	f004 f8c1 	bl	ba308 <_ZN6StringC1EOS_>
	    ++this->_M_impl._M_finish;
   b6186:	6863      	ldr	r3, [r4, #4]
   b6188:	3310      	adds	r3, #16
   b618a:	6063      	str	r3, [r4, #4]
      }
   b618c:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   b618e:	4619      	mov	r1, r3
   b6190:	f7ff ff8e 	bl	b60b0 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
	return back();
   b6194:	e7fa      	b.n	b618c <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0+0x1c>
	...

000b6198 <_ZN8MenuItemC1ERKS_>:
class MenuItem{
   b6198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b619c:	e9d1 2700 	ldrd	r2, r7, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b61a0:	2300      	movs	r3, #0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b61a2:	1abf      	subs	r7, r7, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
   b61a4:	e9c0 3300 	strd	r3, r3, [r0]
   b61a8:	4604      	mov	r4, r0
   b61aa:	460d      	mov	r5, r1
   b61ac:	6083      	str	r3, [r0, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b61ae:	d018      	beq.n	b61e2 <_ZN8MenuItemC1ERKS_+0x4a>
	if (__n > this->_M_max_size())
   b61b0:	4b1a      	ldr	r3, [pc, #104]	; (b621c <_ZN8MenuItemC1ERKS_+0x84>)
   b61b2:	429f      	cmp	r7, r3
   b61b4:	d901      	bls.n	b61ba <_ZN8MenuItemC1ERKS_+0x22>
	  std::__throw_bad_alloc();
   b61b6:	f007 fd35 	bl	bdc24 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b61ba:	4638      	mov	r0, r7
   b61bc:	f7fd ff6b 	bl	b4096 <_Znwj>
   b61c0:	4606      	mov	r6, r0
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b61c2:	e9c4 6600 	strd	r6, r6, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b61c6:	4437      	add	r7, r6
   b61c8:	60a7      	str	r7, [r4, #8]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b61ca:	e9d5 7800 	ldrd	r7, r8, [r5]
   b61ce:	45b8      	cmp	r8, r7
   b61d0:	d009      	beq.n	b61e6 <_ZN8MenuItemC1ERKS_+0x4e>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b61d2:	b11e      	cbz	r6, b61dc <_ZN8MenuItemC1ERKS_+0x44>
   b61d4:	4639      	mov	r1, r7
   b61d6:	4630      	mov	r0, r6
   b61d8:	f004 f8b0 	bl	ba33c <_ZN6StringC1ERKS_>
   b61dc:	3610      	adds	r6, #16
   b61de:	3710      	adds	r7, #16
   b61e0:	e7f5      	b.n	b61ce <_ZN8MenuItemC1ERKS_+0x36>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b61e2:	463e      	mov	r6, r7
   b61e4:	e7ed      	b.n	b61c2 <_ZN8MenuItemC1ERKS_+0x2a>
	this->_M_impl._M_finish =
   b61e6:	6066      	str	r6, [r4, #4]
   b61e8:	7e2b      	ldrb	r3, [r5, #24]
   b61ea:	7623      	strb	r3, [r4, #24]
   b61ec:	8b6b      	ldrh	r3, [r5, #26]
   b61ee:	8363      	strh	r3, [r4, #26]
   b61f0:	8bab      	ldrh	r3, [r5, #28]
   b61f2:	692a      	ldr	r2, [r5, #16]
   b61f4:	68e9      	ldr	r1, [r5, #12]
   b61f6:	83a3      	strh	r3, [r4, #28]
   b61f8:	f8d5 301e 	ldr.w	r3, [r5, #30]
   b61fc:	f8c4 301e 	str.w	r3, [r4, #30]
   b6200:	f8d5 3022 	ldr.w	r3, [r5, #34]	; 0x22
   b6204:	f8c4 3022 	str.w	r3, [r4, #34]	; 0x22
   b6208:	e9c4 1203 	strd	r1, r2, [r4, #12]
   b620c:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
   b620e:	696a      	ldr	r2, [r5, #20]
   b6210:	6162      	str	r2, [r4, #20]
   b6212:	84e3      	strh	r3, [r4, #38]	; 0x26
   b6214:	4620      	mov	r0, r4
   b6216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b621a:	bf00      	nop
   b621c:	7ffffff0 	.word	0x7ffffff0

000b6220 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b6220:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6224:	e9d0 8700 	ldrd	r8, r7, [r0]
   b6228:	4b23      	ldr	r3, [pc, #140]	; (b62b8 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>)
   b622a:	eba7 0408 	sub.w	r4, r7, r8
   b622e:	10e4      	asrs	r4, r4, #3
   b6230:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
   b6232:	4b22      	ldr	r3, [pc, #136]	; (b62bc <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>)
   b6234:	429c      	cmp	r4, r3
   b6236:	460e      	mov	r6, r1
   b6238:	4605      	mov	r5, r0
   b623a:	4611      	mov	r1, r2
   b623c:	d102      	bne.n	b6244 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
   b623e:	4820      	ldr	r0, [pc, #128]	; (b62c0 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa0>)
   b6240:	f007 fcf6 	bl	bdc30 <_ZSt20__throw_length_errorPKc>
   b6244:	2c01      	cmp	r4, #1
   b6246:	4622      	mov	r2, r4
   b6248:	bf38      	it	cc
   b624a:	2201      	movcc	r2, #1
   b624c:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b624e:	eba6 0a08 	sub.w	sl, r6, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b6252:	d22d      	bcs.n	b62b0 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6254:	b374      	cbz	r4, b62b4 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
   b6256:	429c      	cmp	r4, r3
   b6258:	bf28      	it	cs
   b625a:	461c      	movcs	r4, r3
   b625c:	2028      	movs	r0, #40	; 0x28
   b625e:	4360      	muls	r0, r4
   b6260:	9101      	str	r1, [sp, #4]
   b6262:	f7fd ff18 	bl	b4096 <_Znwj>
   b6266:	9901      	ldr	r1, [sp, #4]
   b6268:	4681      	mov	r9, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b626a:	eb19 000a 	adds.w	r0, r9, sl
   b626e:	d001      	beq.n	b6274 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x54>
   b6270:	f7ff ff92 	bl	b6198 <_ZN8MenuItemC1ERKS_>
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
   b6274:	4631      	mov	r1, r6
   b6276:	464a      	mov	r2, r9
   b6278:	4640      	mov	r0, r8
   b627a:	f7fe feee 	bl	b505a <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
   b627e:	4639      	mov	r1, r7
   b6280:	f100 0228 	add.w	r2, r0, #40	; 0x28
   b6284:	4630      	mov	r0, r6
   b6286:	f7fe fee8 	bl	b505a <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
   b628a:	4606      	mov	r6, r0
	if (__p)
   b628c:	f1b8 0f00 	cmp.w	r8, #0
   b6290:	d005      	beq.n	b629e <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7e>
		    this->_M_impl._M_end_of_storage - __old_start);
   b6292:	68a9      	ldr	r1, [r5, #8]
	::operator delete(__p
   b6294:	4640      	mov	r0, r8
   b6296:	eba1 0108 	sub.w	r1, r1, r8
   b629a:	f7fd ff00 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b629e:	2028      	movs	r0, #40	; 0x28
   b62a0:	fb00 9404 	mla	r4, r0, r4, r9
      this->_M_impl._M_finish = __new_finish;
   b62a4:	e9c5 9600 	strd	r9, r6, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b62a8:	60ac      	str	r4, [r5, #8]
    }
   b62aa:	b002      	add	sp, #8
   b62ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b62b0:	461c      	mov	r4, r3
   b62b2:	e7d3      	b.n	b625c <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b62b4:	46a1      	mov	r9, r4
   b62b6:	e7d8      	b.n	b626a <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   b62b8:	cccccccd 	.word	0xcccccccd
   b62bc:	03333333 	.word	0x03333333
   b62c0:	000c0ccc 	.word	0x000c0ccc

000b62c4 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b62c4:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b62c6:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   b62ca:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   b62cc:	4604      	mov	r4, r0
   b62ce:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b62d0:	d007      	beq.n	b62e2 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b62d2:	b113      	cbz	r3, b62da <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x16>
   b62d4:	4618      	mov	r0, r3
   b62d6:	f7ff ff5f 	bl	b6198 <_ZN8MenuItemC1ERKS_>
	    ++this->_M_impl._M_finish;
   b62da:	6863      	ldr	r3, [r4, #4]
   b62dc:	3328      	adds	r3, #40	; 0x28
   b62de:	6063      	str	r3, [r4, #4]
      }
   b62e0:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   b62e2:	4619      	mov	r1, r3
   b62e4:	f7ff ff9c 	bl	b6220 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b62e8:	e7fa      	b.n	b62e0 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x1c>
	...

000b62ec <_Z10createMenuv>:
void createMenu(){
   b62ec:	b570      	push	{r4, r5, r6, lr}
   b62ee:	b0c6      	sub	sp, #280	; 0x118
	: _M_start(), _M_finish(), _M_end_of_storage()
   b62f0:	2400      	movs	r4, #0
            maxVal = maxV;
   b62f2:	2501      	movs	r5, #1
            strcpy(itemName,itemString);
   b62f4:	496c      	ldr	r1, [pc, #432]	; (b64a8 <_Z10createMenuv+0x1bc>)
   b62f6:	9402      	str	r4, [sp, #8]
   b62f8:	f10d 001e 	add.w	r0, sp, #30
            stepSize = inStep;
   b62fc:	f04f 1601 	mov.w	r6, #65537	; 0x10001
   b6300:	e9cd 4400 	strd	r4, r4, [sp]
            minVal = minV;
   b6304:	f8ad 401a 	strh.w	r4, [sp, #26]
            maxVal = maxV;
   b6308:	f8ad 501c 	strh.w	r5, [sp, #28]
            strcpy(itemName,itemString);
   b630c:	f008 fc0d 	bl	beb2a <strcpy>
            stepSize = inStep;
   b6310:	2313      	movs	r3, #19
   b6312:	e9cd 3604 	strd	r3, r6, [sp, #16]
            strcpy(itemName,itemString);
   b6316:	4965      	ldr	r1, [pc, #404]	; (b64ac <_Z10createMenuv+0x1c0>)
class MenuItem{
   b6318:	f88d 4018 	strb.w	r4, [sp, #24]
            maxVal = maxV;
   b631c:	2364      	movs	r3, #100	; 0x64
            strcpy(itemName,itemString);
   b631e:	f10d 0046 	add.w	r0, sp, #70	; 0x46
   b6322:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   b6326:	940c      	str	r4, [sp, #48]	; 0x30
            minVal = minV;
   b6328:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
            maxVal = maxV;
   b632c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            strcpy(itemName,itemString);
   b6330:	f008 fbfb 	bl	beb2a <strcpy>
    battStat.MethodPointer = &WaterBot::battPercent;
   b6334:	2304      	movs	r3, #4
            strcpy(itemName,itemString);
   b6336:	495e      	ldr	r1, [pc, #376]	; (b64b0 <_Z10createMenuv+0x1c4>)
    battStat.MethodPointer = &WaterBot::battPercent;
   b6338:	930d      	str	r3, [sp, #52]	; 0x34
            strcpy(itemName,itemString);
   b633a:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
   b633e:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
   b6342:	9416      	str	r4, [sp, #88]	; 0x58
            minVal = minV;
   b6344:	f8ad 406a 	strh.w	r4, [sp, #106]	; 0x6a
            stepSize = inStep;
   b6348:	950f      	str	r5, [sp, #60]	; 0x3c
    battStat.statOnly = true;
   b634a:	f88d 5040 	strb.w	r5, [sp, #64]	; 0x40
            maxVal = maxV;
   b634e:	f8ad 506c 	strh.w	r5, [sp, #108]	; 0x6c
            strcpy(itemName,itemString);
   b6352:	f008 fbea 	bl	beb2a <strcpy>
    offloadItem.MethodPointerBool = &WaterBot::offloading;
   b6356:	2314      	movs	r3, #20
            stepSize = inStep;
   b6358:	e9cd 3618 	strd	r3, r6, [sp, #96]	; 0x60
            strcpy(itemName,itemString);
   b635c:	4955      	ldr	r1, [pc, #340]	; (b64b4 <_Z10createMenuv+0x1c8>)
class MenuItem{
   b635e:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
            maxVal = maxV;
   b6362:	2302      	movs	r3, #2
            strcpy(itemName,itemString);
   b6364:	f10d 0096 	add.w	r0, sp, #150	; 0x96
   b6368:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
   b636c:	9420      	str	r4, [sp, #128]	; 0x80
            minVal = minV;
   b636e:	f8ad 4092 	strh.w	r4, [sp, #146]	; 0x92
            maxVal = maxV;
   b6372:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
            strcpy(itemName,itemString);
   b6376:	f008 fbd8 	bl	beb2a <strcpy>
            stepSize = inStep;
   b637a:	4b4f      	ldr	r3, [pc, #316]	; (b64b8 <_Z10createMenuv+0x1cc>)
    sentryToggle.labels.push_back("Rem");
   b637c:	494f      	ldr	r1, [pc, #316]	; (b64bc <_Z10createMenuv+0x1d0>)
            stepSize = inStep;
   b637e:	9323      	str	r3, [sp, #140]	; 0x8c
    sentryToggle.labels.push_back("Rem");
   b6380:	a83c      	add	r0, sp, #240	; 0xf0
class MenuItem{
   b6382:	f88d 4090 	strb.w	r4, [sp, #144]	; 0x90
    sentryToggle.labels.push_back("Rem");
   b6386:	f003 ff8e 	bl	ba2a6 <_ZN6StringC1EPK19__FlashStringHelper>
      { emplace_back(std::move(__x)); }
   b638a:	a93c      	add	r1, sp, #240	; 0xf0
   b638c:	a81e      	add	r0, sp, #120	; 0x78
   b638e:	f7ff feef 	bl	b6170 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0>
   b6392:	a83c      	add	r0, sp, #240	; 0xf0
   b6394:	f003 ff3c 	bl	ba210 <_ZN6StringD1Ev>
    sentryToggle.labels.push_back("Sen");
   b6398:	4949      	ldr	r1, [pc, #292]	; (b64c0 <_Z10createMenuv+0x1d4>)
   b639a:	a83c      	add	r0, sp, #240	; 0xf0
   b639c:	f003 ff83 	bl	ba2a6 <_ZN6StringC1EPK19__FlashStringHelper>
   b63a0:	a93c      	add	r1, sp, #240	; 0xf0
   b63a2:	a81e      	add	r0, sp, #120	; 0x78
   b63a4:	f7ff fee4 	bl	b6170 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0>
   b63a8:	a83c      	add	r0, sp, #240	; 0xf0
   b63aa:	f003 ff31 	bl	ba210 <_ZN6StringD1Ev>
    sentryToggle.labels.push_back("Aut");
   b63ae:	4945      	ldr	r1, [pc, #276]	; (b64c4 <_Z10createMenuv+0x1d8>)
   b63b0:	a83c      	add	r0, sp, #240	; 0xf0
   b63b2:	f003 ff78 	bl	ba2a6 <_ZN6StringC1EPK19__FlashStringHelper>
   b63b6:	a93c      	add	r1, sp, #240	; 0xf0
   b63b8:	a81e      	add	r0, sp, #120	; 0x78
   b63ba:	f7ff fed9 	bl	b6170 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0>
   b63be:	a83c      	add	r0, sp, #240	; 0xf0
   b63c0:	f003 ff26 	bl	ba210 <_ZN6StringD1Ev>
    sentryToggle.MethodPointer = &WaterBot::driveMode;
   b63c4:	230c      	movs	r3, #12
            strcpy(itemName,itemString);
   b63c6:	4940      	ldr	r1, [pc, #256]	; (b64c8 <_Z10createMenuv+0x1dc>)
    sentryToggle.MethodPointer = &WaterBot::driveMode;
   b63c8:	9321      	str	r3, [sp, #132]	; 0x84
            strcpy(itemName,itemString);
   b63ca:	f10d 00be 	add.w	r0, sp, #190	; 0xbe
	: _M_start(), _M_finish(), _M_end_of_storage()
   b63ce:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
   b63d2:	942a      	str	r4, [sp, #168]	; 0xa8
            minVal = minV;
   b63d4:	f8ad 40ba 	strh.w	r4, [sp, #186]	; 0xba
            maxVal = maxV;
   b63d8:	f8ad 50bc 	strh.w	r5, [sp, #188]	; 0xbc
            strcpy(itemName,itemString);
   b63dc:	f008 fba5 	bl	beb2a <strcpy>
    signalToggle.MethodPointerBool = &WaterBot::signal;
   b63e0:	230e      	movs	r3, #14
            stepSize = inStep;
   b63e2:	e9cd 362c 	strd	r3, r6, [sp, #176]	; 0xb0
            strcpy(itemName,itemString);
   b63e6:	4939      	ldr	r1, [pc, #228]	; (b64cc <_Z10createMenuv+0x1e0>)
class MenuItem{
   b63e8:	f88d 40b8 	strb.w	r4, [sp, #184]	; 0xb8
            maxVal = maxV;
   b63ec:	f240 36e7 	movw	r6, #999	; 0x3e7
            strcpy(itemName,itemString);
   b63f0:	f10d 00e6 	add.w	r0, sp, #230	; 0xe6
   b63f4:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
   b63f8:	9434      	str	r4, [sp, #208]	; 0xd0
            minVal = minV;
   b63fa:	f8ad 40e2 	strh.w	r4, [sp, #226]	; 0xe2
            maxVal = maxV;
   b63fe:	f8ad 60e4 	strh.w	r6, [sp, #228]	; 0xe4
            strcpy(itemName,itemString);
   b6402:	f008 fb92 	bl	beb2a <strcpy>
   b6406:	e9cd 443c 	strd	r4, r4, [sp, #240]	; 0xf0
   b640a:	943e      	str	r4, [sp, #248]	; 0xf8
            minVal = minV;
   b640c:	f8ad 410a 	strh.w	r4, [sp, #266]	; 0x10a
    MenuItems.push_back(dataRecord);
   b6410:	4c2f      	ldr	r4, [pc, #188]	; (b64d0 <_Z10createMenuv+0x1e4>)
            strcpy(itemName,itemString);
   b6412:	4930      	ldr	r1, [pc, #192]	; (b64d4 <_Z10createMenuv+0x1e8>)
            stepSize = inStep;
   b6414:	9537      	str	r5, [sp, #220]	; 0xdc
    solStat.MethodPointer = &WaterBot::panelPower;
   b6416:	233c      	movs	r3, #60	; 0x3c
            strcpy(itemName,itemString);
   b6418:	f50d 7087 	add.w	r0, sp, #270	; 0x10e
    solStat.MethodPointer = &WaterBot::panelPower;
   b641c:	9335      	str	r3, [sp, #212]	; 0xd4
    solStat.statOnly = true;
   b641e:	f88d 50e0 	strb.w	r5, [sp, #224]	; 0xe0
            maxVal = maxV;
   b6422:	f8ad 610c 	strh.w	r6, [sp, #268]	; 0x10c
            strcpy(itemName,itemString);
   b6426:	f008 fb80 	bl	beb2a <strcpy>
    battPwr.MethodPointer = &WaterBot::battPower;
   b642a:	233e      	movs	r3, #62	; 0x3e
    MenuItems.push_back(dataRecord);
   b642c:	4669      	mov	r1, sp
   b642e:	4620      	mov	r0, r4
    battPwr.MethodPointer = &WaterBot::battPower;
   b6430:	933f      	str	r3, [sp, #252]	; 0xfc
            stepSize = inStep;
   b6432:	9541      	str	r5, [sp, #260]	; 0x104
    battPwr.statOnly = true;
   b6434:	f88d 5108 	strb.w	r5, [sp, #264]	; 0x108
    MenuItems.push_back(dataRecord);
   b6438:	f7ff ff44 	bl	b62c4 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(battStat);
   b643c:	a90a      	add	r1, sp, #40	; 0x28
   b643e:	4620      	mov	r0, r4
   b6440:	f7ff ff40 	bl	b62c4 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(sentryToggle);
   b6444:	a91e      	add	r1, sp, #120	; 0x78
   b6446:	4620      	mov	r0, r4
   b6448:	f7ff ff3c 	bl	b62c4 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(offloadItem);
   b644c:	a914      	add	r1, sp, #80	; 0x50
   b644e:	4620      	mov	r0, r4
   b6450:	f7ff ff38 	bl	b62c4 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(signalToggle);
   b6454:	a928      	add	r1, sp, #160	; 0xa0
   b6456:	4620      	mov	r0, r4
   b6458:	f7ff ff34 	bl	b62c4 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(solStat);
   b645c:	a932      	add	r1, sp, #200	; 0xc8
   b645e:	4620      	mov	r0, r4
   b6460:	f7ff ff30 	bl	b62c4 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(battPwr);
   b6464:	a93c      	add	r1, sp, #240	; 0xf0
   b6466:	4620      	mov	r0, r4
   b6468:	f7ff ff2c 	bl	b62c4 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    SelectedItem = &MenuItems.at(menuItem);
   b646c:	4b1a      	ldr	r3, [pc, #104]	; (b64d8 <_Z10createMenuv+0x1ec>)
   b646e:	4620      	mov	r0, r4
   b6470:	7819      	ldrb	r1, [r3, #0]
   b6472:	f7fe fcbd 	bl	b4df0 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b6476:	4b19      	ldr	r3, [pc, #100]	; (b64dc <_Z10createMenuv+0x1f0>)
   b6478:	6018      	str	r0, [r3, #0]
class MenuItem{
   b647a:	a83c      	add	r0, sp, #240	; 0xf0
   b647c:	f7fe fdda 	bl	b5034 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b6480:	a832      	add	r0, sp, #200	; 0xc8
   b6482:	f7fe fdd7 	bl	b5034 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b6486:	a828      	add	r0, sp, #160	; 0xa0
   b6488:	f7fe fdd4 	bl	b5034 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b648c:	a81e      	add	r0, sp, #120	; 0x78
   b648e:	f7fe fdd1 	bl	b5034 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b6492:	a814      	add	r0, sp, #80	; 0x50
   b6494:	f7fe fdce 	bl	b5034 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b6498:	a80a      	add	r0, sp, #40	; 0x28
   b649a:	f7fe fdcb 	bl	b5034 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b649e:	4668      	mov	r0, sp
   b64a0:	f7fe fdc8 	bl	b5034 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
}
   b64a4:	b046      	add	sp, #280	; 0x118
   b64a6:	bd70      	pop	{r4, r5, r6, pc}
   b64a8:	000c0e47 	.word	0x000c0e47
   b64ac:	000c0e4e 	.word	0x000c0e4e
   b64b0:	000c0e56 	.word	0x000c0e56
   b64b4:	000c0e5e 	.word	0x000c0e5e
   b64b8:	01000001 	.word	0x01000001
   b64bc:	000c0e65 	.word	0x000c0e65
   b64c0:	000c0e69 	.word	0x000c0e69
   b64c4:	000c0e6d 	.word	0x000c0e6d
   b64c8:	000c0e71 	.word	0x000c0e71
   b64cc:	000c0e78 	.word	0x000c0e78
   b64d0:	2003dc84 	.word	0x2003dc84
   b64d4:	000c0e7f 	.word	0x000c0e7f
   b64d8:	2003de01 	.word	0x2003de01
   b64dc:	2003dca8 	.word	0x2003dca8

000b64e0 <_GLOBAL__sub_I_SystemMode>:
   b64e0:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b64e2:	4b5d      	ldr	r3, [pc, #372]	; (b6658 <_GLOBAL__sub_I_SystemMode+0x178>)
   b64e4:	4c5d      	ldr	r4, [pc, #372]	; (b665c <_GLOBAL__sub_I_SystemMode+0x17c>)
   b64e6:	2201      	movs	r2, #1
   b64e8:	701a      	strb	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b64ea:	4b5d      	ldr	r3, [pc, #372]	; (b6660 <_GLOBAL__sub_I_SystemMode+0x180>)
   b64ec:	2200      	movs	r2, #0
   b64ee:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b64f2:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b64f6:	b088      	sub	sp, #32
   b64f8:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b64fa:	2003      	movs	r0, #3
   b64fc:	f003 fc36 	bl	b9d6c <set_system_mode>
const BleUuid serviceUuid("b4206910-dc4b-5743-c8b1-92d0e75182b0");
   b6500:	4958      	ldr	r1, [pc, #352]	; (b6664 <_GLOBAL__sub_I_SystemMode+0x184>)
   b6502:	4859      	ldr	r0, [pc, #356]	; (b6668 <_GLOBAL__sub_I_SystemMode+0x188>)
   b6504:	f004 f9e0 	bl	ba8c8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("b4206912-dc4b-5743-c8b1-92d0e75182b0");
   b6508:	4958      	ldr	r1, [pc, #352]	; (b666c <_GLOBAL__sub_I_SystemMode+0x18c>)
   b650a:	4859      	ldr	r0, [pc, #356]	; (b6670 <_GLOBAL__sub_I_SystemMode+0x190>)
   b650c:	f004 f9dc 	bl	ba8c8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("b4206913-dc4b-5743-c8b1-92d0e75182b0");
   b6510:	4958      	ldr	r1, [pc, #352]	; (b6674 <_GLOBAL__sub_I_SystemMode+0x194>)
   b6512:	4859      	ldr	r0, [pc, #356]	; (b6678 <_GLOBAL__sub_I_SystemMode+0x198>)
   b6514:	f004 f9d8 	bl	ba8c8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid offldUuid("b4206914-dc4b-5743-c8b1-92d0e75182b0");
   b6518:	4958      	ldr	r1, [pc, #352]	; (b667c <_GLOBAL__sub_I_SystemMode+0x19c>)
   b651a:	4859      	ldr	r0, [pc, #356]	; (b6680 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b651c:	f004 f9d4 	bl	ba8c8 <_ZN8particle7BleUuidC1EPKc>
   b6520:	2514      	movs	r5, #20
            : rssi_(BLE_RSSI_INVALID) {
   b6522:	267f      	movs	r6, #127	; 0x7f
   b6524:	4620      	mov	r0, r4
   b6526:	f004 f8ea 	bl	ba6fe <_ZN8particle10BleAddressC1Ev>
   b652a:	f104 0008 	add.w	r0, r4, #8
   b652e:	f005 f916 	bl	bb75e <_ZN8particle18BleAdvertisingDataC1Ev>
   b6532:	f104 0014 	add.w	r0, r4, #20
   b6536:	f005 f912 	bl	bb75e <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_COUNT];
   b653a:	3d01      	subs	r5, #1
   b653c:	f884 6020 	strb.w	r6, [r4, #32]
   b6540:	f104 0424 	add.w	r4, r4, #36	; 0x24
   b6544:	d1ee      	bne.n	b6524 <_GLOBAL__sub_I_SystemMode+0x44>
BleCharacteristic peerTxCharacteristic;
   b6546:	484f      	ldr	r0, [pc, #316]	; (b6684 <_GLOBAL__sub_I_SystemMode+0x1a4>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6548:	4c4f      	ldr	r4, [pc, #316]	; (b6688 <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b654a:	f004 faf3 	bl	bab34 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerRxCharacteristic;
   b654e:	484f      	ldr	r0, [pc, #316]	; (b668c <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b6550:	f004 faf0 	bl	bab34 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerOffloadCharacteristic;
   b6554:	484e      	ldr	r0, [pc, #312]	; (b6690 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b6556:	f004 faed 	bl	bab34 <_ZN8particle17BleCharacteristicC1Ev>
BlePeerDevice peer;
   b655a:	484e      	ldr	r0, [pc, #312]	; (b6694 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b655c:	f004 fbc6 	bl	bacec <_ZN8particle13BlePeerDeviceC1Ev>
Adafruit_SH1107 oled = Adafruit_SH1107(64, 128, &Wire, OLED_RESET);
   b6560:	f007 fb3a 	bl	bdbd8 <_Z19__fetch_global_Wirev>
   b6564:	4a4c      	ldr	r2, [pc, #304]	; (b6698 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   b6566:	494d      	ldr	r1, [pc, #308]	; (b669c <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b6568:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b656c:	2213      	movs	r2, #19
   b656e:	4603      	mov	r3, r0
   b6570:	9200      	str	r2, [sp, #0]
   b6572:	484b      	ldr	r0, [pc, #300]	; (b66a0 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   b6574:	2280      	movs	r2, #128	; 0x80
   b6576:	2140      	movs	r1, #64	; 0x40
   b6578:	f003 f8b8 	bl	b96ec <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>
   b657c:	7823      	ldrb	r3, [r4, #0]
   b657e:	f3bf 8f5b 	dmb	ish
   b6582:	07d8      	lsls	r0, r3, #31
   b6584:	d40a      	bmi.n	b659c <_GLOBAL__sub_I_SystemMode+0xbc>
   b6586:	4620      	mov	r0, r4
   b6588:	f7fd fd98 	bl	b40bc <__cxa_guard_acquire>
   b658c:	b130      	cbz	r0, b659c <_GLOBAL__sub_I_SystemMode+0xbc>
   b658e:	4845      	ldr	r0, [pc, #276]	; (b66a4 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b6590:	2101      	movs	r1, #1
   b6592:	f003 fd6b 	bl	ba06c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6596:	4620      	mov	r0, r4
   b6598:	f7fd fd95 	bl	b40c6 <__cxa_guard_release>
  explicit SdFat(SPIClass* spiPort) {
   b659c:	4b42      	ldr	r3, [pc, #264]	; (b66a8 <_GLOBAL__sub_I_SystemMode+0x1c8>)
	    _M_invoker = &_My_handler::_M_invoke;
   b659e:	4e43      	ldr	r6, [pc, #268]	; (b66ac <_GLOBAL__sub_I_SystemMode+0x1cc>)
	    _M_manager = &_My_handler::_M_manager;
   b65a0:	4d43      	ldr	r5, [pc, #268]	; (b66b0 <_GLOBAL__sub_I_SystemMode+0x1d0>)
Timer at1(5000,actionTimer5);
   b65a2:	4844      	ldr	r0, [pc, #272]	; (b66b4 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b65a4:	2264      	movs	r2, #100	; 0x64
   b65a6:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
  {
   b65aa:	4a43      	ldr	r2, [pc, #268]	; (b66b8 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b65ac:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   b65b0:	2201      	movs	r2, #1
   b65b2:	2400      	movs	r4, #0
   b65b4:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b65b8:	4a3a      	ldr	r2, [pc, #232]	; (b66a4 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b65ba:	605c      	str	r4, [r3, #4]
   b65bc:	f8c3 443c 	str.w	r4, [r3, #1084]	; 0x43c
   b65c0:	f8c3 4468 	str.w	r4, [r3, #1128]	; 0x468
   b65c4:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   b65c8:	f8a3 447c 	strh.w	r4, [r3, #1148]	; 0x47c
   b65cc:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
    Print() : write_error(0) {}
   b65d0:	4b3a      	ldr	r3, [pc, #232]	; (b66bc <_GLOBAL__sub_I_SystemMode+0x1dc>)
  File() {}
   b65d2:	4a3b      	ldr	r2, [pc, #236]	; (b66c0 <_GLOBAL__sub_I_SystemMode+0x1e0>)
   b65d4:	605c      	str	r4, [r3, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b65d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b65da:	601a      	str	r2, [r3, #0]
   b65dc:	6099      	str	r1, [r3, #8]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b65de:	611c      	str	r4, [r3, #16]
   b65e0:	4b38      	ldr	r3, [pc, #224]	; (b66c4 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   b65e2:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b65e6:	601a      	str	r2, [r3, #0]
   b65e8:	611c      	str	r4, [r3, #16]
   b65ea:	4b37      	ldr	r3, [pc, #220]	; (b66c8 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   b65ec:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b65f0:	601a      	str	r2, [r3, #0]
   b65f2:	611c      	str	r4, [r3, #16]
   b65f4:	4b35      	ldr	r3, [pc, #212]	; (b66cc <_GLOBAL__sub_I_SystemMode+0x1ec>)
   b65f6:	e9c3 4400 	strd	r4, r4, [r3]
   b65fa:	609c      	str	r4, [r3, #8]
   b65fc:	4b34      	ldr	r3, [pc, #208]	; (b66d0 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   b65fe:	e9c3 4400 	strd	r4, r4, [r3]
   b6602:	609c      	str	r4, [r3, #8]
   b6604:	4b33      	ldr	r3, [pc, #204]	; (b66d4 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   b6606:	e9c3 4400 	strd	r4, r4, [r3]
   b660a:	609c      	str	r4, [r3, #8]
   b660c:	4b32      	ldr	r3, [pc, #200]	; (b66d8 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   b660e:	e9c3 4400 	strd	r4, r4, [r3]
   b6612:	609c      	str	r4, [r3, #8]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6614:	4b31      	ldr	r3, [pc, #196]	; (b66dc <_GLOBAL__sub_I_SystemMode+0x1fc>)
   b6616:	9304      	str	r3, [sp, #16]
   b6618:	aa04      	add	r2, sp, #16
   b661a:	4623      	mov	r3, r4
   b661c:	f241 3188 	movw	r1, #5000	; 0x1388
	    _M_invoker = &_My_handler::_M_invoke;
   b6620:	9607      	str	r6, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
   b6622:	9506      	str	r5, [sp, #24]
   b6624:	f7fd ffa4 	bl	b4570 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b6628:	a804      	add	r0, sp, #16
   b662a:	f7fd ff4f 	bl	b44cc <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b662e:	4b2c      	ldr	r3, [pc, #176]	; (b66e0 <_GLOBAL__sub_I_SystemMode+0x200>)
   b6630:	9304      	str	r3, [sp, #16]
Timer at2(60000,actionTimer60);
   b6632:	aa04      	add	r2, sp, #16
   b6634:	4623      	mov	r3, r4
   b6636:	f64e 2160 	movw	r1, #60000	; 0xea60
   b663a:	482a      	ldr	r0, [pc, #168]	; (b66e4 <_GLOBAL__sub_I_SystemMode+0x204>)
	    _M_manager = &_My_handler::_M_manager;
   b663c:	e9cd 5606 	strd	r5, r6, [sp, #24]
   b6640:	f7fd ff96 	bl	b4570 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b6644:	a804      	add	r0, sp, #16
   b6646:	f7fd ff41 	bl	b44cc <_ZNSt14_Function_baseD1Ev>
   b664a:	4b27      	ldr	r3, [pc, #156]	; (b66e8 <_GLOBAL__sub_I_SystemMode+0x208>)
   b664c:	e9c3 4400 	strd	r4, r4, [r3]
   b6650:	609c      	str	r4, [r3, #8]
   b6652:	b008      	add	sp, #32
   b6654:	bd70      	pop	{r4, r5, r6, pc}
   b6656:	bf00      	nop
   b6658:	2003dd00 	.word	0x2003dd00
   b665c:	2003ded8 	.word	0x2003ded8
   b6660:	2003dcac 	.word	0x2003dcac
   b6664:	000c0e86 	.word	0x000c0e86
   b6668:	2003dcc4 	.word	0x2003dcc4
   b666c:	000c0eab 	.word	0x000c0eab
   b6670:	2003dcd8 	.word	0x2003dcd8
   b6674:	000c0ed0 	.word	0x000c0ed0
   b6678:	2003dcec 	.word	0x2003dcec
   b667c:	000c0ef5 	.word	0x000c0ef5
   b6680:	2003dd04 	.word	0x2003dd04
   b6684:	2003dec8 	.word	0x2003dec8
   b6688:	2003dc60 	.word	0x2003dc60
   b668c:	2003dec0 	.word	0x2003dec0
   b6690:	2003deb8 	.word	0x2003deb8
   b6694:	2003deb0 	.word	0x2003deb0
   b6698:	00061a80 	.word	0x00061a80
   b669c:	000186a0 	.word	0x000186a0
   b66a0:	2003de58 	.word	0x2003de58
   b66a4:	2003dc64 	.word	0x2003dc64
   b66a8:	2003e1a8 	.word	0x2003e1a8
   b66ac:	000b440d 	.word	0x000b440d
   b66b0:	000b43f9 	.word	0x000b43f9
   b66b4:	2003dd18 	.word	0x2003dd18
   b66b8:	000c0f80 	.word	0x000c0f80
   b66bc:	2003de04 	.word	0x2003de04
   b66c0:	000c0fa8 	.word	0x000c0fa8
   b66c4:	2003ddcc 	.word	0x2003ddcc
   b66c8:	2003dd98 	.word	0x2003dd98
   b66cc:	2003dcb8 	.word	0x2003dcb8
   b66d0:	2003dc90 	.word	0x2003dc90
   b66d4:	2003dc70 	.word	0x2003dc70
   b66d8:	2003dc9c 	.word	0x2003dc9c
   b66dc:	000b40e9 	.word	0x000b40e9
   b66e0:	000b41d9 	.word	0x000b41d9
   b66e4:	2003dd34 	.word	0x2003dd34
   b66e8:	2003dc84 	.word	0x2003dc84

000b66ec <_Z13printMenuItemhbbtt8WaterBot>:
void printMenuItem(uint8_t id, bool highlighted, bool selected, uint16_t x, uint16_t y, WaterBot wb){
   b66ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b66f0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   b66f4:	4c4e      	ldr	r4, [pc, #312]	; (b6830 <_Z13printMenuItemhbbtt8WaterBot+0x144>)
   b66f6:	460f      	mov	r7, r1
        oled.setCursor(x+1,y+1);
   b66f8:	3501      	adds	r5, #1
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b66fa:	b219      	sxth	r1, r3
        oled.setCursor(x+1,y+1);
   b66fc:	3301      	adds	r3, #1
void printMenuItem(uint8_t id, bool highlighted, bool selected, uint16_t x, uint16_t y, WaterBot wb){
   b66fe:	4690      	mov	r8, r2
   b6700:	4606      	mov	r6, r0
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b6702:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
        oled.setCursor(x+1,y+1);
   b6706:	fa0f f983 	sxth.w	r9, r3
   b670a:	b22d      	sxth	r5, r5
   b670c:	f04f 0a10 	mov.w	sl, #16
    if(highlighted){
   b6710:	2f00      	cmp	r7, #0
   b6712:	d052      	beq.n	b67ba <_Z13printMenuItemhbbtt8WaterBot+0xce>
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b6714:	2701      	movs	r7, #1
   b6716:	2358      	movs	r3, #88	; 0x58
   b6718:	4620      	mov	r0, r4
   b671a:	e9cd a700 	strd	sl, r7, [sp]
   b671e:	9203      	str	r2, [sp, #12]
   b6720:	f000 fed7 	bl	b74d2 <_ZN12Adafruit_GFX8fillRectEsssst>
        oled.setTextSize(2);
   b6724:	2102      	movs	r1, #2
   b6726:	4620      	mov	r0, r4
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6728:	f8a4 9010 	strh.w	r9, [r4, #16]
   b672c:	8265      	strh	r5, [r4, #18]
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b672e:	f04f 0900 	mov.w	r9, #0
   b6732:	f001 f9ea 	bl	b7b0a <_ZN12Adafruit_GFX11setTextSizeEh>
        oled.print(MenuItems.at(id).itemName);
   b6736:	4631      	mov	r1, r6
   b6738:	483e      	ldr	r0, [pc, #248]	; (b6834 <_Z13printMenuItemhbbtt8WaterBot+0x148>)
   b673a:	f8c4 9014 	str.w	r9, [r4, #20]
   b673e:	f7fe fb57 	bl	b4df0 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b6742:	f100 011e 	add.w	r1, r0, #30
   b6746:	4620      	mov	r0, r4
   b6748:	f006 f9ae 	bl	bcaa8 <_ZN5Print5printEPKc>
        if(selected){
   b674c:	9a03      	ldr	r2, [sp, #12]
   b674e:	f1b8 0f00 	cmp.w	r8, #0
   b6752:	d024      	beq.n	b679e <_Z13printMenuItemhbbtt8WaterBot+0xb2>
            oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,1);
   b6754:	237f      	movs	r3, #127	; 0x7f
   b6756:	e9cd a700 	strd	sl, r7, [sp]
   b675a:	2158      	movs	r1, #88	; 0x58
   b675c:	4620      	mov	r0, r4
   b675e:	f000 feb8 	bl	b74d2 <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6762:	2359      	movs	r3, #89	; 0x59
   b6764:	8223      	strh	r3, [r4, #16]
   b6766:	8265      	strh	r5, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6768:	f8c4 9014 	str.w	r9, [r4, #20]
            if(MenuItems.at(id).onOffSetting){
   b676c:	4831      	ldr	r0, [pc, #196]	; (b6834 <_Z13printMenuItemhbbtt8WaterBot+0x148>)
   b676e:	4631      	mov	r1, r6
   b6770:	f7fe fb3e 	bl	b4df0 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b6774:	7d82      	ldrb	r2, [r0, #22]
   b6776:	2a00      	cmp	r2, #0
   b6778:	d048      	beq.n	b680c <_Z13printMenuItemhbbtt8WaterBot+0x120>
                if(wb.*(MenuItems.at(id).MethodPointerBool))  oled.printf("On");
   b677a:	6903      	ldr	r3, [r0, #16]
   b677c:	aa0c      	add	r2, sp, #48	; 0x30
   b677e:	4413      	add	r3, r2
   b6780:	791b      	ldrb	r3, [r3, #4]
   b6782:	b153      	cbz	r3, b679a <_Z13printMenuItemhbbtt8WaterBot+0xae>
   b6784:	492c      	ldr	r1, [pc, #176]	; (b6838 <_Z13printMenuItemhbbtt8WaterBot+0x14c>)
                else oled.printf("Off");
   b6786:	482a      	ldr	r0, [pc, #168]	; (b6830 <_Z13printMenuItemhbbtt8WaterBot+0x144>)
   b6788:	f7fd fe59 	bl	b443e <_ZN5Print6printfEPKcz>
    MenuItems.at(id);
   b678c:	4631      	mov	r1, r6
   b678e:	4829      	ldr	r0, [pc, #164]	; (b6834 <_Z13printMenuItemhbbtt8WaterBot+0x148>)
   b6790:	f7fe fb2e 	bl	b4df0 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
}
   b6794:	b004      	add	sp, #16
   b6796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                else oled.printf("Off");
   b679a:	4928      	ldr	r1, [pc, #160]	; (b683c <_Z13printMenuItemhbbtt8WaterBot+0x150>)
   b679c:	e7f3      	b.n	b6786 <_Z13printMenuItemhbbtt8WaterBot+0x9a>
            oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,0);
   b679e:	237f      	movs	r3, #127	; 0x7f
   b67a0:	e9cd a800 	strd	sl, r8, [sp]
   b67a4:	2158      	movs	r1, #88	; 0x58
   b67a6:	4620      	mov	r0, r4
   b67a8:	f000 fe93 	bl	b74d2 <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b67ac:	2359      	movs	r3, #89	; 0x59
   b67ae:	8223      	strh	r3, [r4, #16]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b67b0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b67b4:	8265      	strh	r5, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b67b6:	6163      	str	r3, [r4, #20]
            if(MenuItems.at(id).onOffSetting){
   b67b8:	e7d8      	b.n	b676c <_Z13printMenuItemhbbtt8WaterBot+0x80>
        oled.fillRect(x,y,OLED_MAX_X - 40,16,0);
   b67ba:	2358      	movs	r3, #88	; 0x58
   b67bc:	4620      	mov	r0, r4
   b67be:	e9cd a700 	strd	sl, r7, [sp]
   b67c2:	9203      	str	r2, [sp, #12]
   b67c4:	f000 fe85 	bl	b74d2 <_ZN12Adafruit_GFX8fillRectEsssst>
        oled.setTextSize(2);
   b67c8:	2102      	movs	r1, #2
   b67ca:	4620      	mov	r0, r4
   b67cc:	f04f 1801 	mov.w	r8, #65537	; 0x10001
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b67d0:	f8a4 9010 	strh.w	r9, [r4, #16]
   b67d4:	8265      	strh	r5, [r4, #18]
   b67d6:	f001 f998 	bl	b7b0a <_ZN12Adafruit_GFX11setTextSizeEh>
        oled.print(MenuItems.at(id).itemName);
   b67da:	4631      	mov	r1, r6
   b67dc:	4815      	ldr	r0, [pc, #84]	; (b6834 <_Z13printMenuItemhbbtt8WaterBot+0x148>)
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b67de:	f8c4 8014 	str.w	r8, [r4, #20]
   b67e2:	f7fe fb05 	bl	b4df0 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b67e6:	f100 011e 	add.w	r1, r0, #30
   b67ea:	4620      	mov	r0, r4
   b67ec:	f006 f95c 	bl	bcaa8 <_ZN5Print5printEPKc>
        oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,0);
   b67f0:	237f      	movs	r3, #127	; 0x7f
   b67f2:	e9cd a700 	strd	sl, r7, [sp]
   b67f6:	9a03      	ldr	r2, [sp, #12]
   b67f8:	2158      	movs	r1, #88	; 0x58
   b67fa:	4620      	mov	r0, r4
   b67fc:	f000 fe69 	bl	b74d2 <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6800:	2359      	movs	r3, #89	; 0x59
   b6802:	8223      	strh	r3, [r4, #16]
   b6804:	8265      	strh	r5, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6806:	f8c4 8014 	str.w	r8, [r4, #20]
        if(MenuItems.at(id).onOffSetting){
   b680a:	e7af      	b.n	b676c <_Z13printMenuItemhbbtt8WaterBot+0x80>
            oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b680c:	68c2      	ldr	r2, [r0, #12]
        else if(MenuItems.at(id).customLabel){
   b680e:	7dc3      	ldrb	r3, [r0, #23]
            oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b6810:	a90c      	add	r1, sp, #48	; 0x30
   b6812:	440a      	add	r2, r1
   b6814:	8892      	ldrh	r2, [r2, #4]
        else if(MenuItems.at(id).customLabel){
   b6816:	b12b      	cbz	r3, b6824 <_Z13printMenuItemhbbtt8WaterBot+0x138>
            oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b6818:	4611      	mov	r1, r2
   b681a:	f7fe fb47 	bl	b4eac <_ZNSt6vectorI6StringSaIS0_EE2atEj>
   b681e:	6801      	ldr	r1, [r0, #0]
   b6820:	4620      	mov	r0, r4
   b6822:	e7b1      	b.n	b6788 <_Z13printMenuItemhbbtt8WaterBot+0x9c>
        else oled.printf("%d",wb.*(MenuItems.at(id).MethodPointer));
   b6824:	4906      	ldr	r1, [pc, #24]	; (b6840 <_Z13printMenuItemhbbtt8WaterBot+0x154>)
   b6826:	4620      	mov	r0, r4
   b6828:	f7fd fe09 	bl	b443e <_ZN5Print6printfEPKcz>
   b682c:	e7ae      	b.n	b678c <_Z13printMenuItemhbbtt8WaterBot+0xa0>
   b682e:	bf00      	nop
   b6830:	2003de58 	.word	0x2003de58
   b6834:	2003dc84 	.word	0x2003dc84
   b6838:	000c0f1a 	.word	0x000c0f1a
   b683c:	000c0f1d 	.word	0x000c0f1d
   b6840:	000c0d93 	.word	0x000c0d93

000b6844 <setup>:
void setup() {
   b6844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pinMode(E_DPAD,INPUT_PULLDOWN);
   b6848:	2103      	movs	r1, #3
void setup() {
   b684a:	b0a0      	sub	sp, #128	; 0x80
    pinMode(E_DPAD,INPUT_PULLDOWN);
   b684c:	201c      	movs	r0, #28
   b684e:	f007 f92b 	bl	bdaa8 <pinMode>
    pinMode(U_DPAD,INPUT_PULLDOWN);
   b6852:	2103      	movs	r1, #3
   b6854:	200e      	movs	r0, #14
   b6856:	f007 f927 	bl	bdaa8 <pinMode>
    pinMode(D_DPAD,INPUT_PULLDOWN);
   b685a:	2103      	movs	r1, #3
   b685c:	2007      	movs	r0, #7
   b685e:	f007 f923 	bl	bdaa8 <pinMode>
    pinMode(L_DPAD,INPUT_PULLDOWN);
   b6862:	2103      	movs	r1, #3
   b6864:	200f      	movs	r0, #15
   b6866:	f007 f91f 	bl	bdaa8 <pinMode>
    pinMode(R_DPAD,INPUT_PULLDOWN);
   b686a:	2103      	movs	r1, #3
   b686c:	2012      	movs	r0, #18
   b686e:	f007 f91b 	bl	bdaa8 <pinMode>
    pinMode(JOY_BTN,INPUT_PULLDOWN);
   b6872:	2103      	movs	r1, #3
   b6874:	201d      	movs	r0, #29
    attachInterrupt(E_DPAD,entHandler,RISING);
   b6876:	2400      	movs	r4, #0
    pinMode(JOY_BTN,INPUT_PULLDOWN);
   b6878:	f007 f916 	bl	bdaa8 <pinMode>
    pinMode(STOP_BTN, INPUT_PULLDOWN);
   b687c:	2103      	movs	r1, #3
   b687e:	2014      	movs	r0, #20
   b6880:	f007 f912 	bl	bdaa8 <pinMode>
    attachInterrupt(E_DPAD,entHandler,RISING);
   b6884:	498f      	ldr	r1, [pc, #572]	; (b6ac4 <setup+0x280>)
   b6886:	9400      	str	r4, [sp, #0]
   b6888:	f04f 33ff 	mov.w	r3, #4294967295
   b688c:	2201      	movs	r2, #1
   b688e:	201c      	movs	r0, #28
   b6890:	f006 fed8 	bl	bd644 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(U_DPAD,uHandler,RISING);
   b6894:	498c      	ldr	r1, [pc, #560]	; (b6ac8 <setup+0x284>)
   b6896:	9400      	str	r4, [sp, #0]
   b6898:	f04f 33ff 	mov.w	r3, #4294967295
   b689c:	2201      	movs	r2, #1
   b689e:	200e      	movs	r0, #14
   b68a0:	f006 fed0 	bl	bd644 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(D_DPAD,dHandler,RISING);
   b68a4:	4989      	ldr	r1, [pc, #548]	; (b6acc <setup+0x288>)
   b68a6:	9400      	str	r4, [sp, #0]
   b68a8:	f04f 33ff 	mov.w	r3, #4294967295
   b68ac:	2201      	movs	r2, #1
   b68ae:	2007      	movs	r0, #7
   b68b0:	f006 fec8 	bl	bd644 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(L_DPAD,lHandler,RISING);
   b68b4:	4986      	ldr	r1, [pc, #536]	; (b6ad0 <setup+0x28c>)
   b68b6:	9400      	str	r4, [sp, #0]
   b68b8:	f04f 33ff 	mov.w	r3, #4294967295
   b68bc:	2201      	movs	r2, #1
   b68be:	200f      	movs	r0, #15
   b68c0:	f006 fec0 	bl	bd644 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(R_DPAD,rHandler,RISING);
   b68c4:	4983      	ldr	r1, [pc, #524]	; (b6ad4 <setup+0x290>)
   b68c6:	9400      	str	r4, [sp, #0]
   b68c8:	f04f 33ff 	mov.w	r3, #4294967295
   b68cc:	2201      	movs	r2, #1
   b68ce:	2012      	movs	r0, #18
   b68d0:	f006 feb8 	bl	bd644 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(JOY_BTN,jHandler,RISING);
   b68d4:	4980      	ldr	r1, [pc, #512]	; (b6ad8 <setup+0x294>)
   b68d6:	9400      	str	r4, [sp, #0]
   b68d8:	f04f 33ff 	mov.w	r3, #4294967295
   b68dc:	2201      	movs	r2, #1
   b68de:	201d      	movs	r0, #29
   b68e0:	f006 feb0 	bl	bd644 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(STOP_BTN,sHandler,RISING);
   b68e4:	497d      	ldr	r1, [pc, #500]	; (b6adc <setup+0x298>)
   b68e6:	9400      	str	r4, [sp, #0]
   b68e8:	2201      	movs	r2, #1
   b68ea:	f04f 33ff 	mov.w	r3, #4294967295
   b68ee:	2014      	movs	r0, #20
   b68f0:	f006 fea8 	bl	bd644 <_Z15attachInterrupttPFvvE13InterruptModeah>
   b68f4:	f002 ffe0 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b68f8:	4b79      	ldr	r3, [pc, #484]	; (b6ae0 <setup+0x29c>)
    logMessages = true;
   b68fa:	f8df 8270 	ldr.w	r8, [pc, #624]	; b6b6c <setup+0x328>
    debounceTime = millis();
   b68fe:	6018      	str	r0, [r3, #0]
   b6900:	f002 ffda 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
    controlUpdateTime = millis();
   b6904:	4b77      	ldr	r3, [pc, #476]	; (b6ae4 <setup+0x2a0>)
   b6906:	6018      	str	r0, [r3, #0]
   b6908:	f002 ffd6 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
    rcTime = millis();
   b690c:	4b76      	ldr	r3, [pc, #472]	; (b6ae8 <setup+0x2a4>)
   b690e:	6018      	str	r0, [r3, #0]
    controlUpdateID = -1;
   b6910:	4b76      	ldr	r3, [pc, #472]	; (b6aec <setup+0x2a8>)
   b6912:	f04f 32ff 	mov.w	r2, #4294967295
   b6916:	601a      	str	r2, [r3, #0]
    Serial.begin(115200);
   b6918:	f006 fe6c 	bl	bd5f4 <_Z16_fetch_usbserialv>
   b691c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b6920:	f006 fe5c 	bl	bd5dc <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b6924:	f007 f91c 	bl	bdb60 <_Z22__fetch_global_Serial1v>
   b6928:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b692c:	f006 ff56 	bl	bd7dc <_ZN11USARTSerial5beginEm>
    setupXBee();
   b6930:	f7fe f854 	bl	b49dc <_Z9setupXBeev>
	BLE.on();
   b6934:	f004 fa8a 	bl	bae4c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6938:	f004 fad2 	bl	baee0 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setScanTimeout(50);  //100ms scan
   b693c:	f004 fa86 	bl	bae4c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6940:	2132      	movs	r1, #50	; 0x32
   b6942:	f004 fb17 	bl	baf74 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>
    BLE.setTxPower(8);
   b6946:	f004 fa81 	bl	bae4c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b694a:	2108      	movs	r1, #8
   b694c:	f004 facf 	bl	baeee <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   b6950:	4a67      	ldr	r2, [pc, #412]	; (b6af0 <setup+0x2ac>)
   b6952:	4968      	ldr	r1, [pc, #416]	; (b6af4 <setup+0x2b0>)
   b6954:	4610      	mov	r0, r2
   b6956:	f005 fb0b 	bl	bbf70 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    peerOffloadCharacteristic.onDataReceived(offloadDataReceived, &peerOffloadCharacteristic);
   b695a:	4a67      	ldr	r2, [pc, #412]	; (b6af8 <setup+0x2b4>)
   b695c:	4967      	ldr	r1, [pc, #412]	; (b6afc <setup+0x2b8>)
   b695e:	4610      	mov	r0, r2
   b6960:	f005 fb06 	bl	bbf70 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b6964:	2301      	movs	r3, #1
   b6966:	4966      	ldr	r1, [pc, #408]	; (b6b00 <setup+0x2bc>)
   b6968:	4866      	ldr	r0, [pc, #408]	; (b6b04 <setup+0x2c0>)
   b696a:	4622      	mov	r2, r4
   b696c:	e9cd 4400 	strd	r4, r4, [sp]
   b6970:	f003 fab8 	bl	b9ee4 <spark_subscribe>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b6974:	4a64      	ldr	r2, [pc, #400]	; (b6b08 <setup+0x2c4>)
   b6976:	4965      	ldr	r1, [pc, #404]	; (b6b0c <setup+0x2c8>)
   b6978:	4865      	ldr	r0, [pc, #404]	; (b6b10 <setup+0x2cc>)
   b697a:	f006 fb02 	bl	bcf82 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    offloadingMode = false;
   b697e:	4b65      	ldr	r3, [pc, #404]	; (b6b14 <setup+0x2d0>)
   b6980:	701c      	strb	r4, [r3, #0]
    offloadingDone = false;
   b6982:	4b65      	ldr	r3, [pc, #404]	; (b6b18 <setup+0x2d4>)
   b6984:	701c      	strb	r4, [r3, #0]
    postStatus = false;
   b6986:	4b65      	ldr	r3, [pc, #404]	; (b6b1c <setup+0x2d8>)
   b6988:	701c      	strb	r4, [r3, #0]
    statusTimeout = false;
   b698a:	4b65      	ldr	r3, [pc, #404]	; (b6b20 <setup+0x2dc>)
   b698c:	701c      	strb	r4, [r3, #0]
    stopActive = false;
   b698e:	4b65      	ldr	r3, [pc, #404]	; (b6b24 <setup+0x2e0>)
   b6990:	701c      	strb	r4, [r3, #0]
    LTEStopSent = false;
   b6992:	4b65      	ldr	r3, [pc, #404]	; (b6b28 <setup+0x2e4>)
   b6994:	701c      	strb	r4, [r3, #0]
    stopTime = 0;
   b6996:	4b65      	ldr	r3, [pc, #404]	; (b6b2c <setup+0x2e8>)
    logMessages = true;
   b6998:	2601      	movs	r6, #1
    stopTime = 0;
   b699a:	601c      	str	r4, [r3, #0]
    logMessages = true;
   b699c:	f888 6000 	strb.w	r6, [r8]
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b69a0:	f006 f9d0 	bl	bcd44 <_ZN9TimeClass5monthEv>
   b69a4:	9007      	str	r0, [sp, #28]
   b69a6:	f006 f9c1 	bl	bcd2c <_ZN9TimeClass3dayEv>
   b69aa:	4605      	mov	r5, r0
   b69ac:	f006 f9d2 	bl	bcd54 <_ZN9TimeClass4yearEv>
   b69b0:	4607      	mov	r7, r0
   b69b2:	f006 f997 	bl	bcce4 <_ZN9TimeClass4hourEv>
   b69b6:	4681      	mov	r9, r0
   b69b8:	f006 f9a0 	bl	bccfc <_ZN9TimeClass6minuteEv>
   b69bc:	4682      	mov	sl, r0
   b69be:	f006 f9a9 	bl	bcd14 <_ZN9TimeClass6secondEv>
   b69c2:	9b07      	ldr	r3, [sp, #28]
   b69c4:	4a5a      	ldr	r2, [pc, #360]	; (b6b30 <setup+0x2ec>)
   b69c6:	9500      	str	r5, [sp, #0]
   b69c8:	e9cd a003 	strd	sl, r0, [sp, #12]
   b69cc:	2110      	movs	r1, #16
   b69ce:	e9cd 7901 	strd	r7, r9, [sp, #4]
   b69d2:	a809      	add	r0, sp, #36	; 0x24
   b69d4:	f003 fac6 	bl	b9f64 <snprintf>
    strcpy(filenameMessages,DEF_FILENAME);
   b69d8:	4956      	ldr	r1, [pc, #344]	; (b6b34 <setup+0x2f0>)
   b69da:	4857      	ldr	r0, [pc, #348]	; (b6b38 <setup+0x2f4>)
    oled.begin(i2c_Address, true); // Address 0x3C default
   b69dc:	4d57      	ldr	r5, [pc, #348]	; (b6b3c <setup+0x2f8>)
    strcpy(filenameMessages,DEF_FILENAME);
   b69de:	f008 f8a4 	bl	beb2a <strcpy>
    strcat(filenameMessages,timestamp);
   b69e2:	a909      	add	r1, sp, #36	; 0x24
   b69e4:	4854      	ldr	r0, [pc, #336]	; (b6b38 <setup+0x2f4>)
   b69e6:	f008 f887 	bl	beaf8 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b69ea:	4955      	ldr	r1, [pc, #340]	; (b6b40 <setup+0x2fc>)
   b69ec:	4852      	ldr	r0, [pc, #328]	; (b6b38 <setup+0x2f4>)
   b69ee:	f008 f883 	bl	beaf8 <strcat>
    createMenu();
   b69f2:	f7ff fc7b 	bl	b62ec <_Z10createMenuv>
    delay(250);
   b69f6:	20fa      	movs	r0, #250	; 0xfa
   b69f8:	f006 f9c2 	bl	bcd80 <delay>
    oled.begin(i2c_Address, true); // Address 0x3C default
   b69fc:	4632      	mov	r2, r6
   b69fe:	213c      	movs	r1, #60	; 0x3c
   b6a00:	4628      	mov	r0, r5
   b6a02:	f002 fe87 	bl	b9714 <_ZN15Adafruit_SH11075beginEhb>
    oled.clearDisplay();
   b6a06:	4628      	mov	r0, r5
   b6a08:	f000 fc10 	bl	b722c <_ZN17Adafruit_GrayOLED12clearDisplayEv>
    oled.display();
   b6a0c:	4628      	mov	r0, r5
   b6a0e:	f002 fd8b 	bl	b9528 <_ZN15Adafruit_SH110X7displayEv>
    oled.setRotation(1);
   b6a12:	4631      	mov	r1, r6
   b6a14:	4628      	mov	r0, r5
   b6a16:	f000 fe10 	bl	b763a <_ZN12Adafruit_GFX11setRotationEh>
    oled.setTextSize(2);
   b6a1a:	2102      	movs	r1, #2
   b6a1c:	4628      	mov	r0, r5
   b6a1e:	f001 f874 	bl	b7b0a <_ZN12Adafruit_GFX11setTextSizeEh>
   b6a22:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    oled.print(" Starting ");
   b6a26:	4947      	ldr	r1, [pc, #284]	; (b6b44 <setup+0x300>)
   b6a28:	616b      	str	r3, [r5, #20]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6a2a:	612c      	str	r4, [r5, #16]
   b6a2c:	4628      	mov	r0, r5
   b6a2e:	f006 f83b 	bl	bcaa8 <_ZN5Print5printEPKc>
    oled.display();
   b6a32:	4628      	mov	r0, r5
   b6a34:	f002 fd78 	bl	b9528 <_ZN15Adafruit_SH110X7displayEv>
    delay(1000);
   b6a38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b6a3c:	f006 f9a0 	bl	bcd80 <delay>
      dataMode_{dataMode}
   b6a40:	4b41      	ldr	r3, [pc, #260]	; (b6b48 <setup+0x304>)
   b6a42:	930d      	str	r3, [sp, #52]	; 0x34
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {
   b6a44:	4841      	ldr	r0, [pc, #260]	; (b6b4c <setup+0x308>)
   b6a46:	4b42      	ldr	r3, [pc, #264]	; (b6b50 <setup+0x30c>)
   b6a48:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
   b6a4c:	aa0d      	add	r2, sp, #52	; 0x34
   b6a4e:	2108      	movs	r1, #8
   b6a50:	930f      	str	r3, [sp, #60]	; 0x3c
   b6a52:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
   b6a56:	f7fd fe49 	bl	b46ec <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b6a5a:	b908      	cbnz	r0, b6a60 <setup+0x21c>
        logMessages = false;
   b6a5c:	f888 4000 	strb.w	r4, [r8]
    sprintf(m.primaryLine,"Hello!\0");
   b6a60:	493c      	ldr	r1, [pc, #240]	; (b6b54 <setup+0x310>)
class MenuPopUp{
   b6a62:	f88d 407a 	strb.w	r4, [sp, #122]	; 0x7a
    sprintf(m.primaryLine,"Hello!\0");
   b6a66:	a80d      	add	r0, sp, #52	; 0x34
class MenuPopUp{
   b6a68:	f88d 407b 	strb.w	r4, [sp, #123]	; 0x7b
   b6a6c:	f88d 407c 	strb.w	r4, [sp, #124]	; 0x7c
    sprintf(m.primaryLine,"Hello!\0");
   b6a70:	f008 f85b 	bl	beb2a <strcpy>
    sprintf(m.secondaryLine,"Scanning for Bots\0", 1);
   b6a74:	4938      	ldr	r1, [pc, #224]	; (b6b58 <setup+0x314>)
   b6a76:	2201      	movs	r2, #1
   b6a78:	f10d 003e 	add.w	r0, sp, #62	; 0x3e
   b6a7c:	f003 fa62 	bl	b9f44 <sprintf>
    sprintf(m.tertiaryLine, "OK when bots ready\0",15);
   b6a80:	220f      	movs	r2, #15
   b6a82:	4936      	ldr	r1, [pc, #216]	; (b6b5c <setup+0x318>)
   b6a84:	a817      	add	r0, sp, #92	; 0x5c
   b6a86:	f003 fa5d 	bl	b9f44 <sprintf>
    m.primaryStart = 32;
   b6a8a:	2320      	movs	r3, #32
   b6a8c:	f88d 307a 	strb.w	r3, [sp, #122]	; 0x7a
    m.secondaryStart = 12;
   b6a90:	230c      	movs	r3, #12
   b6a92:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
    PopUps.push_back(m);
   b6a96:	a90d      	add	r1, sp, #52	; 0x34
    m.tertiaryStart = 10;
   b6a98:	230a      	movs	r3, #10
    PopUps.push_back(m);
   b6a9a:	4831      	ldr	r0, [pc, #196]	; (b6b60 <setup+0x31c>)
    m.tertiaryStart = 10;
   b6a9c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    PopUps.push_back(m);
   b6aa0:	f7fe fb78 	bl	b5194 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>
    at1.start();
   b6aa4:	482f      	ldr	r0, [pc, #188]	; (b6b64 <setup+0x320>)
   b6aa6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b6aaa:	f7fd fcb1 	bl	b4410 <_ZN5Timer5startEj.isra.0>
    at2.start();
   b6aae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b6ab2:	482d      	ldr	r0, [pc, #180]	; (b6b68 <setup+0x324>)
   b6ab4:	f7fd fcac 	bl	b4410 <_ZN5Timer5startEj.isra.0>
    WaterBotSim(1);
   b6ab8:	2001      	movs	r0, #1
   b6aba:	f7ff f8a1 	bl	b5c00 <_Z11WaterBotSimh>
}
   b6abe:	b020      	add	sp, #128	; 0x80
   b6ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6ac4:	000b4399 	.word	0x000b4399
   b6ac8:	000b4e19 	.word	0x000b4e19
   b6acc:	000b4e61 	.word	0x000b4e61
   b6ad0:	000b4219 	.word	0x000b4219
   b6ad4:	000b42d9 	.word	0x000b42d9
   b6ad8:	000b41bd 	.word	0x000b41bd
   b6adc:	000b51bd 	.word	0x000b51bd
   b6ae0:	2003dd5c 	.word	0x2003dd5c
   b6ae4:	2003dd58 	.word	0x2003dd58
   b6ae8:	2003ded4 	.word	0x2003ded4
   b6aec:	2003dd54 	.word	0x2003dd54
   b6af0:	2003dec8 	.word	0x2003dec8
   b6af4:	000b5a45 	.word	0x000b5a45
   b6af8:	2003deb8 	.word	0x2003deb8
   b6afc:	000b45e1 	.word	0x000b45e1
   b6b00:	000b59f5 	.word	0x000b59f5
   b6b04:	000c0c43 	.word	0x000c0c43
   b6b08:	000c0f21 	.word	0x000c0f21
   b6b0c:	000b5ba1 	.word	0x000b5ba1
   b6b10:	000bcf57 	.word	0x000bcf57
   b6b14:	2003de57 	.word	0x2003de57
   b6b18:	2003de56 	.word	0x2003de56
   b6b1c:	2003ded0 	.word	0x2003ded0
   b6b20:	2003e62d 	.word	0x2003e62d
   b6b24:	2003e62e 	.word	0x2003e62e
   b6b28:	2003dc81 	.word	0x2003dc81
   b6b2c:	2003e630 	.word	0x2003e630
   b6b30:	000c0f2f 	.word	0x000c0f2f
   b6b34:	000c0f48 	.word	0x000c0f48
   b6b38:	2003dd74 	.word	0x2003dd74
   b6b3c:	2003de58 	.word	0x2003de58
   b6b40:	000c0f51 	.word	0x000c0f51
   b6b44:	000c0f5a 	.word	0x000c0f5a
   b6b48:	000c0f80 	.word	0x000c0f80
   b6b4c:	2003e1a8 	.word	0x2003e1a8
   b6b50:	007a1200 	.word	0x007a1200
   b6b54:	000c106c 	.word	0x000c106c
   b6b58:	000c1074 	.word	0x000c1074
   b6b5c:	000c1087 	.word	0x000c1087
   b6b60:	2003dc9c 	.word	0x2003dc9c
   b6b64:	2003dd18 	.word	0x2003dd18
   b6b68:	2003dd34 	.word	0x2003dd34
   b6b6c:	2003de00 	.word	0x2003de00

000b6b70 <_Z10updateMenuv>:
void updateMenu(){
   b6b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(redrawMenu){
   b6b74:	f8df a360 	ldr.w	sl, [pc, #864]	; b6ed8 <_Z10updateMenuv+0x368>
   b6b78:	f89a 3000 	ldrb.w	r3, [sl]
void updateMenu(){
   b6b7c:	b095      	sub	sp, #84	; 0x54
    if(redrawMenu){
   b6b7e:	2b00      	cmp	r3, #0
   b6b80:	d06d      	beq.n	b6c5e <_Z10updateMenuv+0xee>
        oled.fillRect(0,0,OLED_MAX_X,OLED_MAX_Y,0);
   b6b82:	4cca      	ldr	r4, [pc, #808]	; (b6eac <_Z10updateMenuv+0x33c>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6b84:	4eca      	ldr	r6, [pc, #808]	; (b6eb0 <_Z10updateMenuv+0x340>)
   b6b86:	2500      	movs	r5, #0
   b6b88:	2340      	movs	r3, #64	; 0x40
   b6b8a:	e9cd 3500 	strd	r3, r5, [sp]
   b6b8e:	462a      	mov	r2, r5
   b6b90:	2380      	movs	r3, #128	; 0x80
   b6b92:	4629      	mov	r1, r5
   b6b94:	4620      	mov	r0, r4
   b6b96:	f000 fc9c 	bl	b74d2 <_ZN12Adafruit_GFX8fillRectEsssst>
        if(PopUps.size() != 0){  //If there is a queue of pop-ups to be displayed
   b6b9a:	e9d6 3200 	ldrd	r3, r2, [r6]
   b6b9e:	429a      	cmp	r2, r3
   b6ba0:	d060      	beq.n	b6c64 <_Z10updateMenuv+0xf4>
            oled.drawRect(1,1,126,62,1);
   b6ba2:	2701      	movs	r7, #1
   b6ba4:	233e      	movs	r3, #62	; 0x3e
   b6ba6:	e9cd 3700 	strd	r3, r7, [sp]
   b6baa:	463a      	mov	r2, r7
   b6bac:	237e      	movs	r3, #126	; 0x7e
   b6bae:	4639      	mov	r1, r7
   b6bb0:	4620      	mov	r0, r4
   b6bb2:	f000 fd01 	bl	b75b8 <_ZN12Adafruit_GFX8drawRectEsssst>
            oled.drawRect(2,2,124,60,1);
   b6bb6:	2202      	movs	r2, #2
   b6bb8:	233c      	movs	r3, #60	; 0x3c
   b6bba:	4611      	mov	r1, r2
   b6bbc:	9300      	str	r3, [sp, #0]
   b6bbe:	4620      	mov	r0, r4
   b6bc0:	237c      	movs	r3, #124	; 0x7c
   b6bc2:	9701      	str	r7, [sp, #4]
   b6bc4:	f000 fcf8 	bl	b75b8 <_ZN12Adafruit_GFX8drawRectEsssst>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6bc8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b6bcc:	6163      	str	r3, [r4, #20]
            oled.setCursor(PopUps.back().primaryStart,4);
   b6bce:	6873      	ldr	r3, [r6, #4]
   b6bd0:	f813 3c03 	ldrb.w	r3, [r3, #-3]
   b6bd4:	8223      	strh	r3, [r4, #16]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6bd6:	2304      	movs	r3, #4
   b6bd8:	8263      	strh	r3, [r4, #18]
            oled.setTextSize(2);
   b6bda:	2102      	movs	r1, #2
   b6bdc:	4620      	mov	r0, r4
   b6bde:	f000 ff94 	bl	b7b0a <_ZN12Adafruit_GFX11setTextSizeEh>
            oled.printf(PopUps.back().primaryLine);
   b6be2:	6871      	ldr	r1, [r6, #4]
   b6be4:	4620      	mov	r0, r4
   b6be6:	3949      	subs	r1, #73	; 0x49
   b6be8:	f7fd fc29 	bl	b443e <_ZN5Print6printfEPKcz>
            oled.setCursor(PopUps.back().secondaryStart,22);
   b6bec:	6873      	ldr	r3, [r6, #4]
   b6bee:	f813 3c02 	ldrb.w	r3, [r3, #-2]
   b6bf2:	8223      	strh	r3, [r4, #16]
   b6bf4:	2316      	movs	r3, #22
   b6bf6:	8263      	strh	r3, [r4, #18]
            oled.setTextSize(1);
   b6bf8:	4639      	mov	r1, r7
   b6bfa:	4620      	mov	r0, r4
   b6bfc:	f000 ff85 	bl	b7b0a <_ZN12Adafruit_GFX11setTextSizeEh>
            oled.printf(PopUps.back().secondaryLine);
   b6c00:	6871      	ldr	r1, [r6, #4]
   b6c02:	4620      	mov	r0, r4
   b6c04:	393f      	subs	r1, #63	; 0x3f
   b6c06:	f7fd fc1a 	bl	b443e <_ZN5Print6printfEPKcz>
            oled.setCursor(PopUps.back().tertiaryStart,32);
   b6c0a:	6873      	ldr	r3, [r6, #4]
   b6c0c:	f04f 0820 	mov.w	r8, #32
   b6c10:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b6c14:	8223      	strh	r3, [r4, #16]
            oled.setTextSize(1);
   b6c16:	4639      	mov	r1, r7
   b6c18:	4620      	mov	r0, r4
   b6c1a:	f8a4 8012 	strh.w	r8, [r4, #18]
   b6c1e:	f000 ff74 	bl	b7b0a <_ZN12Adafruit_GFX11setTextSizeEh>
            oled.printf(PopUps.back().tertiaryLine);
   b6c22:	6871      	ldr	r1, [r6, #4]
   b6c24:	4620      	mov	r0, r4
   b6c26:	3921      	subs	r1, #33	; 0x21
   b6c28:	f7fd fc09 	bl	b443e <_ZN5Print6printfEPKcz>
   b6c2c:	4ba1      	ldr	r3, [pc, #644]	; (b6eb4 <_Z10updateMenuv+0x344>)
   b6c2e:	6123      	str	r3, [r4, #16]
            oled.setTextSize(2);
   b6c30:	2102      	movs	r1, #2
   b6c32:	4620      	mov	r0, r4
   b6c34:	f000 ff69 	bl	b7b0a <_ZN12Adafruit_GFX11setTextSizeEh>
            oled.fillRect(45,44,32,16,1);
   b6c38:	2310      	movs	r3, #16
   b6c3a:	222c      	movs	r2, #44	; 0x2c
   b6c3c:	9300      	str	r3, [sp, #0]
   b6c3e:	212d      	movs	r1, #45	; 0x2d
   b6c40:	4643      	mov	r3, r8
   b6c42:	4620      	mov	r0, r4
   b6c44:	9701      	str	r7, [sp, #4]
   b6c46:	f000 fc44 	bl	b74d2 <_ZN12Adafruit_GFX8fillRectEsssst>
            oled.printf("OK");
   b6c4a:	499b      	ldr	r1, [pc, #620]	; (b6eb8 <_Z10updateMenuv+0x348>)
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6c4c:	6165      	str	r5, [r4, #20]
   b6c4e:	4620      	mov	r0, r4
   b6c50:	f7fd fbf5 	bl	b443e <_ZN5Print6printfEPKcz>
            oled.display();
   b6c54:	4620      	mov	r0, r4
   b6c56:	f002 fc67 	bl	b9528 <_ZN15Adafruit_SH110X7displayEv>
            redrawMenu = false;
   b6c5a:	f88a 5000 	strb.w	r5, [sl]
}
   b6c5e:	b015      	add	sp, #84	; 0x54
   b6c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6c64:	f8df 9264 	ldr.w	r9, [pc, #612]	; b6ecc <_Z10updateMenuv+0x35c>
            if(WaterBots.at(i).botNum == botSelect){
   b6c68:	f8df b270 	ldr.w	fp, [pc, #624]	; b6edc <_Z10updateMenuv+0x36c>
        uint8_t menuSelect = 0;
   b6c6c:	462e      	mov	r6, r5
   b6c6e:	e9d9 2300 	ldrd	r2, r3, [r9]
   b6c72:	1a9b      	subs	r3, r3, r2
   b6c74:	4a91      	ldr	r2, [pc, #580]	; (b6ebc <_Z10updateMenuv+0x34c>)
   b6c76:	10db      	asrs	r3, r3, #3
   b6c78:	b2ef      	uxtb	r7, r5
   b6c7a:	4353      	muls	r3, r2
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b6c7c:	429f      	cmp	r7, r3
   b6c7e:	d247      	bcs.n	b6d10 <_Z10updateMenuv+0x1a0>
            if(WaterBots.at(i).botNum == botSelect){
   b6c80:	4639      	mov	r1, r7
   b6c82:	4648      	mov	r0, r9
   b6c84:	f7fe f924 	bl	b4ed0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
                oled.setCursor(5+18*i,4);
   b6c88:	eb07 08c7 	add.w	r8, r7, r7, lsl #3
            if(WaterBots.at(i).botNum == botSelect){
   b6c8c:	7881      	ldrb	r1, [r0, #2]
   b6c8e:	f89b 3000 	ldrb.w	r3, [fp]
                oled.setTextSize(1);
   b6c92:	4886      	ldr	r0, [pc, #536]	; (b6eac <_Z10updateMenuv+0x33c>)
                oled.setCursor(5+18*i,4);
   b6c94:	ea4f 0848 	mov.w	r8, r8, lsl #1
   b6c98:	f108 0205 	add.w	r2, r8, #5
            if(WaterBots.at(i).botNum == botSelect){
   b6c9c:	4299      	cmp	r1, r3
   b6c9e:	f04f 0304 	mov.w	r3, #4
                oled.fillRect(1+i*18,1,14,14,1);
   b6ca2:	f108 0801 	add.w	r8, r8, #1
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6ca6:	8222      	strh	r2, [r4, #16]
   b6ca8:	8263      	strh	r3, [r4, #18]
                oled.setTextSize(1);
   b6caa:	f04f 0101 	mov.w	r1, #1
            if(WaterBots.at(i).botNum == botSelect){
   b6cae:	d117      	bne.n	b6ce0 <_Z10updateMenuv+0x170>
                oled.setTextSize(1);
   b6cb0:	f000 ff2b 	bl	b7b0a <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6cb4:	2300      	movs	r3, #0
                oled.fillRect(1+i*18,1,14,14,1);
   b6cb6:	2201      	movs	r2, #1
   b6cb8:	6163      	str	r3, [r4, #20]
   b6cba:	230e      	movs	r3, #14
   b6cbc:	e9cd 3200 	strd	r3, r2, [sp]
   b6cc0:	487a      	ldr	r0, [pc, #488]	; (b6eac <_Z10updateMenuv+0x33c>)
   b6cc2:	4641      	mov	r1, r8
   b6cc4:	f000 fc05 	bl	b74d2 <_ZN12Adafruit_GFX8fillRectEsssst>
                oled.printf("%d",WaterBots.at(i).botNum);
   b6cc8:	4639      	mov	r1, r7
   b6cca:	4648      	mov	r0, r9
   b6ccc:	f7fe f900 	bl	b4ed0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6cd0:	497b      	ldr	r1, [pc, #492]	; (b6ec0 <_Z10updateMenuv+0x350>)
   b6cd2:	7882      	ldrb	r2, [r0, #2]
   b6cd4:	4875      	ldr	r0, [pc, #468]	; (b6eac <_Z10updateMenuv+0x33c>)
   b6cd6:	f7fd fbb2 	bl	b443e <_ZN5Print6printfEPKcz>
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b6cda:	3501      	adds	r5, #1
   b6cdc:	463e      	mov	r6, r7
   b6cde:	e7c6      	b.n	b6c6e <_Z10updateMenuv+0xfe>
                oled.setTextSize(1);
   b6ce0:	f000 ff13 	bl	b7b0a <_ZN12Adafruit_GFX11setTextSizeEh>
   b6ce4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
                oled.drawRect(1+i*18,1,14,14,1);
   b6ce8:	2201      	movs	r2, #1
   b6cea:	6163      	str	r3, [r4, #20]
   b6cec:	230e      	movs	r3, #14
   b6cee:	e9cd 3200 	strd	r3, r2, [sp]
   b6cf2:	486e      	ldr	r0, [pc, #440]	; (b6eac <_Z10updateMenuv+0x33c>)
   b6cf4:	4641      	mov	r1, r8
   b6cf6:	f000 fc5f 	bl	b75b8 <_ZN12Adafruit_GFX8drawRectEsssst>
                oled.printf("%d",WaterBots.at(i).botNum);
   b6cfa:	4639      	mov	r1, r7
   b6cfc:	4648      	mov	r0, r9
   b6cfe:	f7fe f8e7 	bl	b4ed0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6d02:	496f      	ldr	r1, [pc, #444]	; (b6ec0 <_Z10updateMenuv+0x350>)
   b6d04:	7882      	ldrb	r2, [r0, #2]
   b6d06:	4869      	ldr	r0, [pc, #420]	; (b6eac <_Z10updateMenuv+0x33c>)
   b6d08:	f7fd fb99 	bl	b443e <_ZN5Print6printfEPKcz>
   b6d0c:	4637      	mov	r7, r6
   b6d0e:	e7e4      	b.n	b6cda <_Z10updateMenuv+0x16a>
        if(menuItem == 0){
   b6d10:	4f6c      	ldr	r7, [pc, #432]	; (b6ec4 <_Z10updateMenuv+0x354>)
   b6d12:	783c      	ldrb	r4, [r7, #0]
   b6d14:	2c00      	cmp	r4, #0
   b6d16:	d144      	bne.n	b6da2 <_Z10updateMenuv+0x232>
   b6d18:	4d6b      	ldr	r5, [pc, #428]	; (b6ec8 <_Z10updateMenuv+0x358>)
            if(MenuItems.size() != 0) printMenuItem(0,true,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6d1a:	e9d5 3200 	ldrd	r3, r2, [r5]
   b6d1e:	429a      	cmp	r2, r3
   b6d20:	d014      	beq.n	b6d4c <_Z10updateMenuv+0x1dc>
   b6d22:	4631      	mov	r1, r6
   b6d24:	4869      	ldr	r0, [pc, #420]	; (b6ecc <_Z10updateMenuv+0x35c>)
   b6d26:	f7fe f8d3 	bl	b4ed0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6d2a:	4b69      	ldr	r3, [pc, #420]	; (b6ed0 <_Z10updateMenuv+0x360>)
   b6d2c:	781f      	ldrb	r7, [r3, #0]
   b6d2e:	4601      	mov	r1, r0
   b6d30:	2248      	movs	r2, #72	; 0x48
   b6d32:	a801      	add	r0, sp, #4
   b6d34:	f007 fe43 	bl	be9be <memcpy>
   b6d38:	f087 0701 	eor.w	r7, r7, #1
   b6d3c:	2310      	movs	r3, #16
   b6d3e:	9300      	str	r3, [sp, #0]
   b6d40:	463a      	mov	r2, r7
   b6d42:	4623      	mov	r3, r4
   b6d44:	2101      	movs	r1, #1
   b6d46:	4620      	mov	r0, r4
   b6d48:	f7ff fcd0 	bl	b66ec <_Z13printMenuItemhbbtt8WaterBot>
   b6d4c:	e9d5 3400 	ldrd	r3, r4, [r5]
   b6d50:	1ae4      	subs	r4, r4, r3
   b6d52:	4b60      	ldr	r3, [pc, #384]	; (b6ed4 <_Z10updateMenuv+0x364>)
                printMenuItem(mi,false,!selectingBots,0,16+(16*mi),WaterBots.at(menuSelect));
   b6d54:	f8df b174 	ldr.w	fp, [pc, #372]	; b6ecc <_Z10updateMenuv+0x35c>
   b6d58:	10e4      	asrs	r4, r4, #3
   b6d5a:	435c      	muls	r4, r3
            uint8_t loopIter = MenuItems.size();
   b6d5c:	b2e4      	uxtb	r4, r4
            if(loopIter > 2) loopIter = 2;
   b6d5e:	2c02      	cmp	r4, #2
   b6d60:	bf28      	it	cs
   b6d62:	2402      	movcs	r4, #2
            for(int mi = 1; mi <= loopIter; mi++){
   b6d64:	2501      	movs	r5, #1
                printMenuItem(mi,false,!selectingBots,0,16+(16*mi),WaterBots.at(menuSelect));
   b6d66:	f10d 0904 	add.w	r9, sp, #4
            for(int mi = 1; mi <= loopIter; mi++){
   b6d6a:	42ac      	cmp	r4, r5
   b6d6c:	db63      	blt.n	b6e36 <_Z10updateMenuv+0x2c6>
                printMenuItem(mi,false,!selectingBots,0,16+(16*mi),WaterBots.at(menuSelect));
   b6d6e:	4631      	mov	r1, r6
   b6d70:	4658      	mov	r0, fp
   b6d72:	f7fe f8ad 	bl	b4ed0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6d76:	4b56      	ldr	r3, [pc, #344]	; (b6ed0 <_Z10updateMenuv+0x360>)
   b6d78:	fa5f f885 	uxtb.w	r8, r5
   b6d7c:	4601      	mov	r1, r0
   b6d7e:	3501      	adds	r5, #1
   b6d80:	2248      	movs	r2, #72	; 0x48
   b6d82:	4648      	mov	r0, r9
   b6d84:	781f      	ldrb	r7, [r3, #0]
   b6d86:	f007 fe1a 	bl	be9be <memcpy>
   b6d8a:	012b      	lsls	r3, r5, #4
   b6d8c:	b29b      	uxth	r3, r3
   b6d8e:	f087 0701 	eor.w	r7, r7, #1
   b6d92:	9300      	str	r3, [sp, #0]
   b6d94:	2300      	movs	r3, #0
   b6d96:	463a      	mov	r2, r7
   b6d98:	4619      	mov	r1, r3
   b6d9a:	4640      	mov	r0, r8
   b6d9c:	f7ff fca6 	bl	b66ec <_Z13printMenuItemhbbtt8WaterBot>
            for(int mi = 1; mi <= loopIter; mi++){
   b6da0:	e7e3      	b.n	b6d6a <_Z10updateMenuv+0x1fa>
            if(MenuItems.size() != 0) printMenuItem(0,true,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6da2:	f8df 812c 	ldr.w	r8, [pc, #300]	; b6ed0 <_Z10updateMenuv+0x360>
            printMenuItem(menuItem,true,!selectingBots,0,48,WaterBots.at(menuSelect));
   b6da6:	4849      	ldr	r0, [pc, #292]	; (b6ecc <_Z10updateMenuv+0x35c>)
            if(MenuItems.size() != 0) printMenuItem(0,true,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6da8:	f898 9000 	ldrb.w	r9, [r8]
        else if(menuItem == MAX_MENU_ITEMS-1){
   b6dac:	2c06      	cmp	r4, #6
            if(MenuItems.size() != 0) printMenuItem(0,true,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6dae:	f089 0901 	eor.w	r9, r9, #1
            printMenuItem(menuItem,true,!selectingBots,0,48,WaterBots.at(menuSelect));
   b6db2:	4631      	mov	r1, r6
   b6db4:	ad01      	add	r5, sp, #4
        else if(menuItem == MAX_MENU_ITEMS-1){
   b6db6:	d145      	bne.n	b6e44 <_Z10updateMenuv+0x2d4>
            printMenuItem(menuItem,true,!selectingBots,0,48,WaterBots.at(menuSelect));
   b6db8:	f7fe f88a 	bl	b4ed0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6dbc:	2248      	movs	r2, #72	; 0x48
   b6dbe:	4601      	mov	r1, r0
   b6dc0:	4628      	mov	r0, r5
   b6dc2:	f007 fdfc 	bl	be9be <memcpy>
   b6dc6:	2330      	movs	r3, #48	; 0x30
   b6dc8:	464a      	mov	r2, r9
   b6dca:	4620      	mov	r0, r4
   b6dcc:	9300      	str	r3, [sp, #0]
   b6dce:	2101      	movs	r1, #1
   b6dd0:	2300      	movs	r3, #0
   b6dd2:	f7ff fc8b 	bl	b66ec <_Z13printMenuItemhbbtt8WaterBot>
            printMenuItem(menuItem-1,false,!selectingBots,0,32,WaterBots.at(menuSelect));
   b6dd6:	4631      	mov	r1, r6
   b6dd8:	483c      	ldr	r0, [pc, #240]	; (b6ecc <_Z10updateMenuv+0x35c>)
   b6dda:	f7fe f879 	bl	b4ed0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6dde:	783c      	ldrb	r4, [r7, #0]
   b6de0:	f898 9000 	ldrb.w	r9, [r8]
   b6de4:	4601      	mov	r1, r0
   b6de6:	2248      	movs	r2, #72	; 0x48
   b6de8:	4628      	mov	r0, r5
   b6dea:	f007 fde8 	bl	be9be <memcpy>
   b6dee:	3c01      	subs	r4, #1
   b6df0:	2320      	movs	r3, #32
   b6df2:	b2e4      	uxtb	r4, r4
   b6df4:	9300      	str	r3, [sp, #0]
   b6df6:	f089 0901 	eor.w	r9, r9, #1
   b6dfa:	2300      	movs	r3, #0
   b6dfc:	4619      	mov	r1, r3
   b6dfe:	4620      	mov	r0, r4
   b6e00:	464a      	mov	r2, r9
   b6e02:	f7ff fc73 	bl	b66ec <_Z13printMenuItemhbbtt8WaterBot>
            printMenuItem(menuItem-2,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6e06:	4631      	mov	r1, r6
   b6e08:	4830      	ldr	r0, [pc, #192]	; (b6ecc <_Z10updateMenuv+0x35c>)
   b6e0a:	f7fe f861 	bl	b4ed0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6e0e:	f898 6000 	ldrb.w	r6, [r8]
   b6e12:	783c      	ldrb	r4, [r7, #0]
   b6e14:	4601      	mov	r1, r0
   b6e16:	f086 0601 	eor.w	r6, r6, #1
   b6e1a:	3c02      	subs	r4, #2
            printMenuItem(menuItem-1,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6e1c:	2248      	movs	r2, #72	; 0x48
   b6e1e:	4628      	mov	r0, r5
   b6e20:	f007 fdcd 	bl	be9be <memcpy>
   b6e24:	2310      	movs	r3, #16
   b6e26:	b2e4      	uxtb	r4, r4
   b6e28:	9300      	str	r3, [sp, #0]
   b6e2a:	2300      	movs	r3, #0
   b6e2c:	4632      	mov	r2, r6
   b6e2e:	4619      	mov	r1, r3
   b6e30:	4620      	mov	r0, r4
   b6e32:	f7ff fc5b 	bl	b66ec <_Z13printMenuItemhbbtt8WaterBot>
        oled.display();
   b6e36:	481d      	ldr	r0, [pc, #116]	; (b6eac <_Z10updateMenuv+0x33c>)
   b6e38:	f002 fb76 	bl	b9528 <_ZN15Adafruit_SH110X7displayEv>
        redrawMenu = false;
   b6e3c:	2300      	movs	r3, #0
   b6e3e:	f88a 3000 	strb.w	r3, [sl]
   b6e42:	e70c      	b.n	b6c5e <_Z10updateMenuv+0xee>
            printMenuItem(menuItem+1,false,!selectingBots,0,48,WaterBots.at(menuSelect));
   b6e44:	f7fe f844 	bl	b4ed0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6e48:	2248      	movs	r2, #72	; 0x48
   b6e4a:	4601      	mov	r1, r0
   b6e4c:	4628      	mov	r0, r5
   b6e4e:	f007 fdb6 	bl	be9be <memcpy>
   b6e52:	3401      	adds	r4, #1
   b6e54:	2330      	movs	r3, #48	; 0x30
   b6e56:	b2e4      	uxtb	r4, r4
   b6e58:	9300      	str	r3, [sp, #0]
   b6e5a:	2300      	movs	r3, #0
   b6e5c:	4619      	mov	r1, r3
   b6e5e:	464a      	mov	r2, r9
   b6e60:	4620      	mov	r0, r4
   b6e62:	f7ff fc43 	bl	b66ec <_Z13printMenuItemhbbtt8WaterBot>
            printMenuItem(menuItem,true,!selectingBots,0,32,WaterBots.at(menuSelect));
   b6e66:	4631      	mov	r1, r6
   b6e68:	4818      	ldr	r0, [pc, #96]	; (b6ecc <_Z10updateMenuv+0x35c>)
   b6e6a:	f897 9000 	ldrb.w	r9, [r7]
   b6e6e:	f7fe f82f 	bl	b4ed0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6e72:	f898 4000 	ldrb.w	r4, [r8]
   b6e76:	4601      	mov	r1, r0
   b6e78:	2248      	movs	r2, #72	; 0x48
   b6e7a:	4628      	mov	r0, r5
   b6e7c:	f007 fd9f 	bl	be9be <memcpy>
   b6e80:	f084 0401 	eor.w	r4, r4, #1
   b6e84:	2320      	movs	r3, #32
   b6e86:	4622      	mov	r2, r4
   b6e88:	9300      	str	r3, [sp, #0]
   b6e8a:	2101      	movs	r1, #1
   b6e8c:	2300      	movs	r3, #0
   b6e8e:	4648      	mov	r0, r9
   b6e90:	f7ff fc2c 	bl	b66ec <_Z13printMenuItemhbbtt8WaterBot>
            printMenuItem(menuItem-1,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6e94:	4631      	mov	r1, r6
   b6e96:	480d      	ldr	r0, [pc, #52]	; (b6ecc <_Z10updateMenuv+0x35c>)
   b6e98:	f7fe f81a 	bl	b4ed0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6e9c:	f898 6000 	ldrb.w	r6, [r8]
   b6ea0:	783c      	ldrb	r4, [r7, #0]
   b6ea2:	4601      	mov	r1, r0
   b6ea4:	f086 0601 	eor.w	r6, r6, #1
   b6ea8:	3c01      	subs	r4, #1
   b6eaa:	e7b7      	b.n	b6e1c <_Z10updateMenuv+0x2ac>
   b6eac:	2003de58 	.word	0x2003de58
   b6eb0:	2003dc9c 	.word	0x2003dc9c
   b6eb4:	002d0030 	.word	0x002d0030
   b6eb8:	000c0f65 	.word	0x000c0f65
   b6ebc:	38e38e39 	.word	0x38e38e39
   b6ec0:	000c0d93 	.word	0x000c0d93
   b6ec4:	2003de01 	.word	0x2003de01
   b6ec8:	2003dc84 	.word	0x2003dc84
   b6ecc:	2003dcb8 	.word	0x2003dcb8
   b6ed0:	2003da81 	.word	0x2003da81
   b6ed4:	cccccccd 	.word	0xcccccccd
   b6ed8:	2003da80 	.word	0x2003da80
   b6edc:	2003dd51 	.word	0x2003dd51

000b6ee0 <loop>:
void loop() {
   b6ee0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(postStatus){
   b6ee2:	4d34      	ldr	r5, [pc, #208]	; (b6fb4 <loop+0xd4>)
   b6ee4:	782b      	ldrb	r3, [r5, #0]
   b6ee6:	b15b      	cbz	r3, b6f00 <loop+0x20>
        sendData("CCABspc",0,true,true,statusTimeout);                                  
   b6ee8:	4c33      	ldr	r4, [pc, #204]	; (b6fb8 <loop+0xd8>)
   b6eea:	4834      	ldr	r0, [pc, #208]	; (b6fbc <loop+0xdc>)
   b6eec:	7823      	ldrb	r3, [r4, #0]
   b6eee:	9300      	str	r3, [sp, #0]
   b6ef0:	2301      	movs	r3, #1
   b6ef2:	461a      	mov	r2, r3
   b6ef4:	2100      	movs	r1, #0
   b6ef6:	f7fd fde5 	bl	b4ac4 <_Z8sendDataPKchbbb>
        postStatus = false;
   b6efa:	2300      	movs	r3, #0
   b6efc:	702b      	strb	r3, [r5, #0]
        statusTimeout = false;
   b6efe:	7023      	strb	r3, [r4, #0]
    if((millis() - rcTime) > MTR_UPDATE_TIME){
   b6f00:	4c2f      	ldr	r4, [pc, #188]	; (b6fc0 <loop+0xe0>)
    updateMenu();
   b6f02:	f7ff fe35 	bl	b6b70 <_Z10updateMenuv>
    updateBotControl();
   b6f06:	f7fd fff7 	bl	b4ef8 <_Z16updateBotControlv>
   b6f0a:	f002 fcd5 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
    if((millis() - rcTime) > MTR_UPDATE_TIME){
   b6f0e:	6823      	ldr	r3, [r4, #0]
   b6f10:	1ac0      	subs	r0, r0, r3
   b6f12:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   b6f16:	d906      	bls.n	b6f26 <loop+0x46>
        manualMotorControl(botSelect);
   b6f18:	4b2a      	ldr	r3, [pc, #168]	; (b6fc4 <loop+0xe4>)
   b6f1a:	7818      	ldrb	r0, [r3, #0]
   b6f1c:	f7fd fe3c 	bl	b4b98 <_Z18manualMotorControlh>
   b6f20:	f002 fcca 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
        rcTime = millis();
   b6f24:	6020      	str	r0, [r4, #0]
    if (BLE.connected()) {
   b6f26:	f003 ff91 	bl	bae4c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6f2a:	f004 f83c 	bl	bafa6 <_ZNK8particle14BleLocalDevice9connectedEv>
   b6f2e:	b970      	cbnz	r0, b6f4e <loop+0x6e>
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   b6f30:	4c25      	ldr	r4, [pc, #148]	; (b6fc8 <loop+0xe8>)
   b6f32:	f002 fcc1 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
   b6f36:	6823      	ldr	r3, [r4, #0]
   b6f38:	1ac0      	subs	r0, r0, r3
   b6f3a:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b6f3e:	d306      	bcc.n	b6f4e <loop+0x6e>
   b6f40:	f002 fcba 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
    		lastScan = millis();
   b6f44:	6020      	str	r0, [r4, #0]
    		BLEScan(-1);
   b6f46:	f04f 30ff 	mov.w	r0, #4294967295
   b6f4a:	f7fe fef5 	bl	b5d38 <_Z7BLEScani>
      : _M_current(__i) { }
   b6f4e:	4b1f      	ldr	r3, [pc, #124]	; (b6fcc <loop+0xec>)
   b6f50:	e9d3 4500 	ldrd	r4, r5, [r3]
            wb.offloading = false;
   b6f54:	2600      	movs	r6, #0
    for(WaterBot &wb: WaterBots){
   b6f56:	42a5      	cmp	r5, r4
   b6f58:	d007      	beq.n	b6f6a <loop+0x8a>
        if(wb.offloading){
   b6f5a:	7d23      	ldrb	r3, [r4, #20]
   b6f5c:	b11b      	cbz	r3, b6f66 <loop+0x86>
            DataOffloader(wb.botNum);
   b6f5e:	78a0      	ldrb	r0, [r4, #2]
   b6f60:	f7fe ffdc 	bl	b5f1c <_Z13DataOffloaderh>
            wb.offloading = false;
   b6f64:	7526      	strb	r6, [r4, #20]
      operator++() _GLIBCXX_NOEXCEPT
   b6f66:	3448      	adds	r4, #72	; 0x48
	return *this;
   b6f68:	e7f5      	b.n	b6f56 <loop+0x76>
    XBeeHandler();
   b6f6a:	f7fe fda7 	bl	b5abc <_Z11XBeeHandlerv>
    RPiHandler();
   b6f6e:	f7fd fd4d 	bl	b4a0c <_Z10RPiHandlerv>
    XBeeLTEPairSet();
   b6f72:	f7fd ff19 	bl	b4da8 <_Z14XBeeLTEPairSetv>
    if(stopActive){
   b6f76:	4b16      	ldr	r3, [pc, #88]	; (b6fd0 <loop+0xf0>)
   b6f78:	781b      	ldrb	r3, [r3, #0]
   b6f7a:	b1c3      	cbz	r3, b6fae <loop+0xce>
        if(millis() - stopTime > STOP_PUB_TIME){
   b6f7c:	4c15      	ldr	r4, [pc, #84]	; (b6fd4 <loop+0xf4>)
   b6f7e:	f002 fc9b 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
   b6f82:	6823      	ldr	r3, [r4, #0]
   b6f84:	1ac0      	subs	r0, r0, r3
   b6f86:	f241 3388 	movw	r3, #5000	; 0x1388
   b6f8a:	4298      	cmp	r0, r3
   b6f8c:	d90f      	bls.n	b6fae <loop+0xce>
   b6f8e:	f002 fc93 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
            stopTime = millis();
   b6f92:	6020      	str	r0, [r4, #0]
            sendData("CCABstp",0,true,true,!LTEStopSent);
   b6f94:	4c10      	ldr	r4, [pc, #64]	; (b6fd8 <loop+0xf8>)
   b6f96:	4811      	ldr	r0, [pc, #68]	; (b6fdc <loop+0xfc>)
   b6f98:	7823      	ldrb	r3, [r4, #0]
   b6f9a:	f083 0301 	eor.w	r3, r3, #1
   b6f9e:	9300      	str	r3, [sp, #0]
   b6fa0:	2301      	movs	r3, #1
   b6fa2:	461a      	mov	r2, r3
   b6fa4:	2100      	movs	r1, #0
   b6fa6:	f7fd fd8d 	bl	b4ac4 <_Z8sendDataPKchbbb>
            LTEStopSent = true;
   b6faa:	2301      	movs	r3, #1
   b6fac:	7023      	strb	r3, [r4, #0]
}
   b6fae:	b002      	add	sp, #8
   b6fb0:	bd70      	pop	{r4, r5, r6, pc}
   b6fb2:	bf00      	nop
   b6fb4:	2003ded0 	.word	0x2003ded0
   b6fb8:	2003e62d 	.word	0x2003e62d
   b6fbc:	000c0f68 	.word	0x000c0f68
   b6fc0:	2003ded4 	.word	0x2003ded4
   b6fc4:	2003dd51 	.word	0x2003dd51
   b6fc8:	2003dd94 	.word	0x2003dd94
   b6fcc:	2003dcb8 	.word	0x2003dcb8
   b6fd0:	2003e62e 	.word	0x2003e62e
   b6fd4:	2003e630 	.word	0x2003e630
   b6fd8:	2003dc81 	.word	0x2003dc81
   b6fdc:	000c0f70 	.word	0x000c0f70

000b6fe0 <_ZN17Adafruit_GrayOLED9drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b6fe0:	2900      	cmp	r1, #0
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b6fe2:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b6fe4:	db66      	blt.n	b70b4 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   b6fe6:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b6fea:	428c      	cmp	r4, r1
   b6fec:	dd62      	ble.n	b70b4 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   b6fee:	2a00      	cmp	r2, #0
   b6ff0:	db60      	blt.n	b70b4 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   b6ff2:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b6ff6:	4294      	cmp	r4, r2
   b6ff8:	dd5c      	ble.n	b70b4 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b6ffa:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
   b6ffc:	2c02      	cmp	r4, #2
   b6ffe:	d05a      	beq.n	b70b6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd6>
   b7000:	2c03      	cmp	r4, #3
   b7002:	d061      	beq.n	b70c8 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xe8>
   b7004:	2c01      	cmp	r4, #1
   b7006:	d104      	bne.n	b7012 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
    case 1:
      grayoled_swap(x, y);
      x = WIDTH - x - 1;
   b7008:	8904      	ldrh	r4, [r0, #8]
   b700a:	43d2      	mvns	r2, r2
   b700c:	4414      	add	r4, r2
      break;
   b700e:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b7010:	b221      	sxth	r1, r4
      y = HEIGHT - y - 1;
      break;
    }

    // adjust dirty window
    window_x1 = min(window_x1, x);
   b7012:	f9b0 4038 	ldrsh.w	r4, [r0, #56]	; 0x38
   b7016:	428c      	cmp	r4, r1
   b7018:	bfa8      	it	ge
   b701a:	460c      	movge	r4, r1
   b701c:	8704      	strh	r4, [r0, #56]	; 0x38
    window_y1 = min(window_y1, y);
   b701e:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
   b7022:	4294      	cmp	r4, r2
   b7024:	bfa8      	it	ge
   b7026:	4614      	movge	r4, r2
   b7028:	8744      	strh	r4, [r0, #58]	; 0x3a
    window_x2 = max(window_x2, x);
   b702a:	f9b0 403c 	ldrsh.w	r4, [r0, #60]	; 0x3c
   b702e:	428c      	cmp	r4, r1
   b7030:	bfb8      	it	lt
   b7032:	460c      	movlt	r4, r1
   b7034:	8784      	strh	r4, [r0, #60]	; 0x3c
    window_y2 = max(window_y2, y);
   b7036:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
   b703a:	4294      	cmp	r4, r2
   b703c:	bfb8      	it	lt
   b703e:	4614      	movlt	r4, r2
   b7040:	87c4      	strh	r4, [r0, #62]	; 0x3e

    if (_bpp == 1) {
   b7042:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   b7046:	2c01      	cmp	r4, #1
   b7048:	d116      	bne.n	b7078 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      switch (color) {
   b704a:	2b01      	cmp	r3, #1
   b704c:	d042      	beq.n	b70d4 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xf4>
   b704e:	2b02      	cmp	r3, #2
   b7050:	d051      	beq.n	b70f6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x116>
   b7052:	b98b      	cbnz	r3, b7078 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      case MONOOLED_WHITE:
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
        break;
      case MONOOLED_BLACK:
        buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
   b7054:	2a00      	cmp	r2, #0
   b7056:	8905      	ldrh	r5, [r0, #8]
   b7058:	6b47      	ldr	r7, [r0, #52]	; 0x34
   b705a:	4614      	mov	r4, r2
   b705c:	bfb8      	it	lt
   b705e:	1dd4      	addlt	r4, r2, #7
   b7060:	10e4      	asrs	r4, r4, #3
   b7062:	fb14 1405 	smlabb	r4, r4, r5, r1
   b7066:	f002 0607 	and.w	r6, r2, #7
   b706a:	2501      	movs	r5, #1
   b706c:	fa05 f606 	lsl.w	r6, r5, r6
   b7070:	5d3d      	ldrb	r5, [r7, r4]
   b7072:	ea25 0506 	bic.w	r5, r5, r6
   b7076:	553d      	strb	r5, [r7, r4]
      case MONOOLED_INVERSE:
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
        break;
      }
    }
    if (_bpp == 4) {
   b7078:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   b707c:	2c04      	cmp	r4, #4
   b707e:	d119      	bne.n	b70b4 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
      uint8_t *pixelptr = &buffer[x / 2 + (y * WIDTH / 2)];
   b7080:	8904      	ldrh	r4, [r0, #8]
   b7082:	fb14 f202 	smulbb	r2, r4, r2
   b7086:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   b708a:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
   b708e:	f342 024f 	sbfx	r2, r2, #1, #16
   b7092:	eb02 0264 	add.w	r2, r2, r4, asr #1
   b7096:	6b44      	ldr	r4, [r0, #52]	; 0x34
      // Serial.printf("(%d, %d) -> offset %d\n", x, y, x/2 + (y * WIDTH / 2));
      if (x % 2 == 0) { // even, left nibble
        uint8_t t = pixelptr[0] & 0x0F;
   b7098:	5ca0      	ldrb	r0, [r4, r2]
      if (x % 2 == 0) { // even, left nibble
   b709a:	07c9      	lsls	r1, r1, #31
        t |= (color & 0xF) << 4;
        pixelptr[0] = t;
      } else { // odd, right lower nibble
        uint8_t t = pixelptr[0] & 0xF0;
        t |= color & 0xF;
   b709c:	bf4b      	itete	mi
   b709e:	f003 030f 	andmi.w	r3, r3, #15
        uint8_t t = pixelptr[0] & 0x0F;
   b70a2:	f000 000f 	andpl.w	r0, r0, #15
        uint8_t t = pixelptr[0] & 0xF0;
   b70a6:	f020 000f 	bicmi.w	r0, r0, #15
        t |= (color & 0xF) << 4;
   b70aa:	ea40 1303 	orrpl.w	r3, r0, r3, lsl #4
        t |= color & 0xF;
   b70ae:	bf48      	it	mi
   b70b0:	4303      	orrmi	r3, r0
        pixelptr[0] = t;
   b70b2:	54a3      	strb	r3, [r4, r2]
      }
    }
  }
}
   b70b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      x = WIDTH - x - 1;
   b70b6:	8904      	ldrh	r4, [r0, #8]
   b70b8:	3c01      	subs	r4, #1
   b70ba:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b70bc:	8944      	ldrh	r4, [r0, #10]
   b70be:	43d2      	mvns	r2, r2
   b70c0:	4422      	add	r2, r4
      x = WIDTH - x - 1;
   b70c2:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b70c4:	b212      	sxth	r2, r2
      break;
   b70c6:	e7a4      	b.n	b7012 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b70c8:	8944      	ldrh	r4, [r0, #10]
   b70ca:	3c01      	subs	r4, #1
   b70cc:	1a64      	subs	r4, r4, r1
      break;
   b70ce:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b70d0:	b222      	sxth	r2, r4
      break;
   b70d2:	e79e      	b.n	b7012 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
   b70d4:	2a00      	cmp	r2, #0
   b70d6:	8905      	ldrh	r5, [r0, #8]
   b70d8:	6b46      	ldr	r6, [r0, #52]	; 0x34
   b70da:	4614      	mov	r4, r2
   b70dc:	bfb8      	it	lt
   b70de:	1dd4      	addlt	r4, r2, #7
   b70e0:	10e4      	asrs	r4, r4, #3
   b70e2:	fb14 1405 	smlabb	r4, r4, r5, r1
   b70e6:	f002 0707 	and.w	r7, r2, #7
   b70ea:	2501      	movs	r5, #1
   b70ec:	40bd      	lsls	r5, r7
   b70ee:	5d37      	ldrb	r7, [r6, r4]
   b70f0:	433d      	orrs	r5, r7
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   b70f2:	5535      	strb	r5, [r6, r4]
        break;
   b70f4:	e7c0      	b.n	b7078 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   b70f6:	2a00      	cmp	r2, #0
   b70f8:	8905      	ldrh	r5, [r0, #8]
   b70fa:	6b46      	ldr	r6, [r0, #52]	; 0x34
   b70fc:	4614      	mov	r4, r2
   b70fe:	bfb8      	it	lt
   b7100:	1dd4      	addlt	r4, r2, #7
   b7102:	10e4      	asrs	r4, r4, #3
   b7104:	fb14 1405 	smlabb	r4, r4, r5, r1
   b7108:	f002 0707 	and.w	r7, r2, #7
   b710c:	2501      	movs	r5, #1
   b710e:	40bd      	lsls	r5, r7
   b7110:	5d37      	ldrb	r7, [r6, r4]
   b7112:	407d      	eors	r5, r7
   b7114:	e7ed      	b.n	b70f2 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x112>
	...

000b7118 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>:
Adafruit_GrayOLED::Adafruit_GrayOLED(uint8_t bpp, uint16_t w, uint16_t h,
   b7118:	b538      	push	{r3, r4, r5, lr}
   b711a:	460d      	mov	r5, r1
   b711c:	4611      	mov	r1, r2
   b711e:	4604      	mov	r4, r0
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   b7120:	b21a      	sxth	r2, r3
   b7122:	b209      	sxth	r1, r1
   b7124:	f000 fa98 	bl	b7658 <_ZN12Adafruit_GFXC1Ess>
   b7128:	9a06      	ldr	r2, [sp, #24]
   b712a:	4b0b      	ldr	r3, [pc, #44]	; (b7158 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm+0x40>)
   b712c:	62e2      	str	r2, [r4, #44]	; 0x2c
   b712e:	9a07      	ldr	r2, [sp, #28]
   b7130:	6023      	str	r3, [r4, #0]
   b7132:	2300      	movs	r3, #0
   b7134:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
   b7138:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   b713c:	f04f 33ff 	mov.w	r3, #4294967295
   b7140:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
   b7144:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   b7148:	64a3      	str	r3, [r4, #72]	; 0x48
  _theWire = twi;
   b714a:	9b04      	ldr	r3, [sp, #16]
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   b714c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  _theWire = twi;
   b7150:	6523      	str	r3, [r4, #80]	; 0x50
}
   b7152:	4620      	mov	r0, r4
   b7154:	bd38      	pop	{r3, r4, r5, pc}
   b7156:	bf00      	nop
   b7158:	000c10a4 	.word	0x000c10a4

000b715c <_ZN17Adafruit_GrayOLEDD1Ev>:
Adafruit_GrayOLED::~Adafruit_GrayOLED(void) {
   b715c:	b538      	push	{r3, r4, r5, lr}
   b715e:	4b0c      	ldr	r3, [pc, #48]	; (b7190 <_ZN17Adafruit_GrayOLEDD1Ev+0x34>)
   b7160:	6003      	str	r3, [r0, #0]
   b7162:	4604      	mov	r4, r0
  if (buffer) {
   b7164:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b7166:	b118      	cbz	r0, b7170 <_ZN17Adafruit_GrayOLEDD1Ev+0x14>
    free(buffer);
   b7168:	f002 fedc 	bl	b9f24 <free>
    buffer = NULL;
   b716c:	2300      	movs	r3, #0
   b716e:	6363      	str	r3, [r4, #52]	; 0x34
  if (spi_dev)
   b7170:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b7172:	b135      	cbz	r5, b7182 <_ZN17Adafruit_GrayOLEDD1Ev+0x26>
    delete spi_dev;
   b7174:	4628      	mov	r0, r5
   b7176:	f000 fcce 	bl	b7b16 <_ZN18Adafruit_SPIDeviceD1Ev>
   b717a:	2138      	movs	r1, #56	; 0x38
   b717c:	4628      	mov	r0, r5
   b717e:	f7fc ff8e 	bl	b409e <_ZdlPvj>
  if (i2c_dev)
   b7182:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7184:	b110      	cbz	r0, b718c <_ZN17Adafruit_GrayOLEDD1Ev+0x30>
    delete i2c_dev;
   b7186:	2110      	movs	r1, #16
   b7188:	f7fc ff89 	bl	b409e <_ZdlPvj>
}
   b718c:	4620      	mov	r0, r4
   b718e:	bd38      	pop	{r3, r4, r5, pc}
   b7190:	000c10a4 	.word	0x000c10a4

000b7194 <_ZN17Adafruit_GrayOLED12oled_commandEh>:
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   b7194:	b530      	push	{r4, r5, lr}
   b7196:	b087      	sub	sp, #28
  if (i2c_dev) {                // I2C
   b7198:	6a85      	ldr	r5, [r0, #40]	; 0x28
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   b719a:	f88d 100f 	strb.w	r1, [sp, #15]
   b719e:	4604      	mov	r4, r0
  if (i2c_dev) {                // I2C
   b71a0:	b17d      	cbz	r5, b71c2 <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2e>
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   b71a2:	2300      	movs	r3, #0
   b71a4:	b2ca      	uxtb	r2, r1
    i2c_dev->write(buf, 2);
   b71a6:	e9cd 3300 	strd	r3, r3, [sp]
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   b71aa:	f88d 3014 	strb.w	r3, [sp, #20]
   b71ae:	f88d 2015 	strb.w	r2, [sp, #21]
    i2c_dev->write(buf, 2);
   b71b2:	2301      	movs	r3, #1
   b71b4:	2202      	movs	r2, #2
   b71b6:	a905      	add	r1, sp, #20
   b71b8:	4628      	mov	r0, r5
   b71ba:	f000 fe03 	bl	b7dc4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   b71be:	b007      	add	sp, #28
   b71c0:	bd30      	pop	{r4, r5, pc}
    digitalWrite(dcPin, LOW);
   b71c2:	4629      	mov	r1, r5
   b71c4:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   b71c8:	f006 fc7f 	bl	bdaca <digitalWrite>
    spi_dev->write(&c, 1);
   b71cc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b71ce:	9500      	str	r5, [sp, #0]
   b71d0:	462b      	mov	r3, r5
   b71d2:	2201      	movs	r2, #1
   b71d4:	f10d 010f 	add.w	r1, sp, #15
   b71d8:	f000 fd97 	bl	b7d0a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
}
   b71dc:	e7ef      	b.n	b71be <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2a>

000b71de <_ZN17Adafruit_GrayOLED13invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing MONOOLED_BLACK (value 0) pixels will actually draw
   white, MONOOLED_WHITE (value 1) will draw black.
*/
void Adafruit_GrayOLED::invertDisplay(bool i) {
  oled_command(i ? GRAYOLED_INVERTDISPLAY : GRAYOLED_NORMALDISPLAY);
   b71de:	2900      	cmp	r1, #0
   b71e0:	bf14      	ite	ne
   b71e2:	21a7      	movne	r1, #167	; 0xa7
   b71e4:	21a6      	moveq	r1, #166	; 0xa6
   b71e6:	f7ff bfd5 	b.w	b7194 <_ZN17Adafruit_GrayOLED12oled_commandEh>

000b71ea <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>:
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   b71ea:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (i2c_dev) {            // I2C
   b71ec:	6a85      	ldr	r5, [r0, #40]	; 0x28
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   b71ee:	b085      	sub	sp, #20
   b71f0:	4604      	mov	r4, r0
   b71f2:	460e      	mov	r6, r1
   b71f4:	4617      	mov	r7, r2
  if (i2c_dev) {            // I2C
   b71f6:	b165      	cbz	r5, b7212 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x28>
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   b71f8:	2300      	movs	r3, #0
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   b71fa:	f10d 000f 	add.w	r0, sp, #15
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   b71fe:	f88d 300f 	strb.w	r3, [sp, #15]
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   b7202:	2301      	movs	r3, #1
   b7204:	9000      	str	r0, [sp, #0]
   b7206:	9301      	str	r3, [sp, #4]
   b7208:	4628      	mov	r0, r5
   b720a:	f000 fddb 	bl	b7dc4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   b720e:	b005      	add	sp, #20
   b7210:	bdf0      	pop	{r4, r5, r6, r7, pc}
    digitalWrite(dcPin, LOW);
   b7212:	4629      	mov	r1, r5
   b7214:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   b7218:	f006 fc57 	bl	bdaca <digitalWrite>
    if (!spi_dev->write((uint8_t *)c, n)) {
   b721c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b721e:	9500      	str	r5, [sp, #0]
   b7220:	462b      	mov	r3, r5
   b7222:	463a      	mov	r2, r7
   b7224:	4631      	mov	r1, r6
   b7226:	f000 fd70 	bl	b7d0a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   b722a:	e7f0      	b.n	b720e <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x24>

000b722c <_ZN17Adafruit_GrayOLED12clearDisplayEv>:
void Adafruit_GrayOLED::clearDisplay(void) {
   b722c:	b510      	push	{r4, lr}
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   b722e:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
   b7232:	8903      	ldrh	r3, [r0, #8]
   b7234:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   b7238:	fb12 f203 	smulbb	r2, r2, r3
   b723c:	1dcb      	adds	r3, r1, #7
   b723e:	bf48      	it	mi
   b7240:	f101 030e 	addmi.w	r3, r1, #14
   b7244:	10db      	asrs	r3, r3, #3
void Adafruit_GrayOLED::clearDisplay(void) {
   b7246:	4604      	mov	r4, r0
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   b7248:	435a      	muls	r2, r3
   b724a:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b724c:	2100      	movs	r1, #0
   b724e:	f007 fbde 	bl	bea0e <memset>
  window_x1 = 0;
   b7252:	2300      	movs	r3, #0
   b7254:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   b7256:	8923      	ldrh	r3, [r4, #8]
   b7258:	3b01      	subs	r3, #1
   b725a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   b725c:	8963      	ldrh	r3, [r4, #10]
   b725e:	3b01      	subs	r3, #1
   b7260:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
   b7262:	bd10      	pop	{r4, pc}

000b7264 <_ZN17Adafruit_GrayOLED5_initEhb>:
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   b7264:	b570      	push	{r4, r5, r6, lr}
  if ((!buffer) &&
   b7266:	6b43      	ldr	r3, [r0, #52]	; 0x34
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   b7268:	4604      	mov	r4, r0
   b726a:	460e      	mov	r6, r1
   b726c:	4615      	mov	r5, r2
  if ((!buffer) &&
   b726e:	b30b      	cbz	r3, b72b4 <_ZN17Adafruit_GrayOLED5_initEhb+0x50>
  if (reset && (rstPin >= 0)) {
   b7270:	2d00      	cmp	r5, #0
   b7272:	d133      	bne.n	b72dc <_ZN17Adafruit_GrayOLED5_initEhb+0x78>
  if (_theWire) { // using I2C
   b7274:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7276:	2b00      	cmp	r3, #0
   b7278:	d050      	beq.n	b731c <_ZN17Adafruit_GrayOLED5_initEhb+0xb8>
    i2c_dev = new Adafruit_I2CDevice(addr, _theWire);
   b727a:	2010      	movs	r0, #16
   b727c:	f7fc ff0b 	bl	b4096 <_Znwj>
   b7280:	4605      	mov	r5, r0
   b7282:	b118      	cbz	r0, b728c <_ZN17Adafruit_GrayOLED5_initEhb+0x28>
   b7284:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b7286:	4631      	mov	r1, r6
   b7288:	f000 fd71 	bl	b7d6e <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b728c:	62a5      	str	r5, [r4, #40]	; 0x28
    if (!i2c_dev || !i2c_dev->begin()) {
   b728e:	b31d      	cbz	r5, b72d8 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   b7290:	2101      	movs	r1, #1
   b7292:	4628      	mov	r0, r5
   b7294:	f000 fd87 	bl	b7da6 <_ZN18Adafruit_I2CDevice5beginEb>
   b7298:	b1f0      	cbz	r0, b72d8 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
  clearDisplay();
   b729a:	4620      	mov	r0, r4
   b729c:	f7ff ffc6 	bl	b722c <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  window_x1 = 0;
   b72a0:	2300      	movs	r3, #0
   b72a2:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   b72a4:	8923      	ldrh	r3, [r4, #8]
   b72a6:	3b01      	subs	r3, #1
   b72a8:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   b72aa:	8963      	ldrh	r3, [r4, #10]
   b72ac:	3b01      	subs	r3, #1
   b72ae:	87e3      	strh	r3, [r4, #62]	; 0x3e
  return true; // Success
   b72b0:	2001      	movs	r0, #1
   b72b2:	e012      	b.n	b72da <_ZN17Adafruit_GrayOLED5_initEhb+0x76>
      !(buffer = (uint8_t *)malloc(_bpp * WIDTH * ((HEIGHT + 7) / 8)))) {
   b72b4:	8923      	ldrh	r3, [r4, #8]
   b72b6:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b72ba:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
   b72be:	fb10 f003 	smulbb	r0, r0, r3
   b72c2:	1dd3      	adds	r3, r2, #7
   b72c4:	bf48      	it	mi
   b72c6:	f102 030e 	addmi.w	r3, r2, #14
   b72ca:	10db      	asrs	r3, r3, #3
   b72cc:	4358      	muls	r0, r3
   b72ce:	f002 fe21 	bl	b9f14 <malloc>
   b72d2:	6360      	str	r0, [r4, #52]	; 0x34
  if ((!buffer) &&
   b72d4:	2800      	cmp	r0, #0
   b72d6:	d1cb      	bne.n	b7270 <_ZN17Adafruit_GrayOLED5_initEhb+0xc>
    return false;
   b72d8:	2000      	movs	r0, #0
}
   b72da:	bd70      	pop	{r4, r5, r6, pc}
  if (reset && (rstPin >= 0)) {
   b72dc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   b72de:	2800      	cmp	r0, #0
   b72e0:	dbc8      	blt.n	b7274 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    pinMode(rstPin, OUTPUT);
   b72e2:	2101      	movs	r1, #1
   b72e4:	b280      	uxth	r0, r0
   b72e6:	f006 fbdf 	bl	bdaa8 <pinMode>
    digitalWrite(rstPin, HIGH);
   b72ea:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   b72ee:	2101      	movs	r1, #1
   b72f0:	f006 fbeb 	bl	bdaca <digitalWrite>
    delay(10);                  // VDD goes high at start, pause
   b72f4:	200a      	movs	r0, #10
   b72f6:	f005 fd43 	bl	bcd80 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b72fa:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   b72fe:	2100      	movs	r1, #0
   b7300:	f006 fbe3 	bl	bdaca <digitalWrite>
    delay(10);                  // Wait 10 ms
   b7304:	200a      	movs	r0, #10
   b7306:	f005 fd3b 	bl	bcd80 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b730a:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   b730e:	2101      	movs	r1, #1
   b7310:	f006 fbdb 	bl	bdaca <digitalWrite>
    delay(10);
   b7314:	200a      	movs	r0, #10
   b7316:	f005 fd33 	bl	bcd80 <delay>
   b731a:	e7ab      	b.n	b7274 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    if (!spi_dev || !spi_dev->begin()) {
   b731c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b731e:	2800      	cmp	r0, #0
   b7320:	d0da      	beq.n	b72d8 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   b7322:	f000 fc01 	bl	b7b28 <_ZN18Adafruit_SPIDevice5beginEv>
   b7326:	2800      	cmp	r0, #0
   b7328:	d0d6      	beq.n	b72d8 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b732a:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   b732e:	2101      	movs	r1, #1
   b7330:	f006 fbba 	bl	bdaa8 <pinMode>
   b7334:	e7b1      	b.n	b729a <_ZN17Adafruit_GrayOLED5_initEhb+0x36>

000b7336 <_ZN17Adafruit_GrayOLED11setContrastEh>:
    @brief  Adjust the display contrast.
    @param  level The contrast level from 0 to 0x7F
    @note   This has an immediate effect on the display, no need to call the
            display() function -- buffer contents are not changed.
*/
void Adafruit_GrayOLED::setContrast(uint8_t level) {
   b7336:	b507      	push	{r0, r1, r2, lr}
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   b7338:	2381      	movs	r3, #129	; 0x81
   b733a:	f88d 1005 	strb.w	r1, [sp, #5]
  oled_commandList(cmd, 2);
   b733e:	2202      	movs	r2, #2
   b7340:	a901      	add	r1, sp, #4
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   b7342:	f88d 3004 	strb.w	r3, [sp, #4]
  oled_commandList(cmd, 2);
   b7346:	f7ff ff50 	bl	b71ea <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
}
   b734a:	b003      	add	sp, #12
   b734c:	f85d fb04 	ldr.w	pc, [sp], #4

000b7350 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b7350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7354:	b085      	sub	sp, #20
   b7356:	461f      	mov	r7, r3
   b7358:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b735c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b7360:	eba8 0902 	sub.w	r9, r8, r2
   b7364:	eba7 0a01 	sub.w	sl, r7, r1
   b7368:	f1b9 0f00 	cmp.w	r9, #0
   b736c:	bfb8      	it	lt
   b736e:	f1c9 0900 	rsblt	r9, r9, #0
   b7372:	f1ba 0f00 	cmp.w	sl, #0
   b7376:	bfb8      	it	lt
   b7378:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b737c:	45d1      	cmp	r9, sl
        uint16_t color) {
   b737e:	4683      	mov	fp, r0
   b7380:	460c      	mov	r4, r1
   b7382:	4615      	mov	r5, r2
    if (steep) {
   b7384:	dd04      	ble.n	b7390 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b7386:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b7388:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b738a:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b738c:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b738e:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b7390:	42bc      	cmp	r4, r7
   b7392:	dd05      	ble.n	b73a0 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b7394:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b7396:	4645      	mov	r5, r8
   b7398:	4690      	mov	r8, r2
    if (x0 > x1) {
   b739a:	4622      	mov	r2, r4
   b739c:	463c      	mov	r4, r7
   b739e:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b73a0:	1b3e      	subs	r6, r7, r4
   b73a2:	b2b2      	uxth	r2, r6
   b73a4:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b73a6:	eba8 0205 	sub.w	r2, r8, r5
   b73aa:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b73ae:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b73b2:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b73b6:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b73ba:	4545      	cmp	r5, r8
   b73bc:	bfb4      	ite	lt
   b73be:	2201      	movlt	r2, #1
   b73c0:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b73c4:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b73c6:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b73c8:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b73ca:	42bc      	cmp	r4, r7
   b73cc:	dc1c      	bgt.n	b7408 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b73ce:	f8db 2000 	ldr.w	r2, [fp]
   b73d2:	9303      	str	r3, [sp, #12]
        if (steep) {
   b73d4:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b73d6:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b73da:	bfc7      	ittee	gt
   b73dc:	4629      	movgt	r1, r5
   b73de:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b73e0:	462a      	movle	r2, r5
   b73e2:	4621      	movle	r1, r4
   b73e4:	4658      	mov	r0, fp
   b73e6:	47c0      	blx	r8
        }
        err -= dy;
   b73e8:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b73ea:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b73ec:	1ab6      	subs	r6, r6, r2
   b73ee:	b2b1      	uxth	r1, r6
   b73f0:	b236      	sxth	r6, r6
        if (err < 0) {
   b73f2:	2e00      	cmp	r6, #0
   b73f4:	da05      	bge.n	b7402 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b73f6:	9a02      	ldr	r2, [sp, #8]
   b73f8:	4415      	add	r5, r2
            err += dx;
   b73fa:	9a00      	ldr	r2, [sp, #0]
   b73fc:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b73fe:	b22d      	sxth	r5, r5
            err += dx;
   b7400:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b7402:	3401      	adds	r4, #1
   b7404:	b224      	sxth	r4, r4
   b7406:	e7e0      	b.n	b73ca <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b7408:	b005      	add	sp, #20
   b740a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b740e <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b740e:	4770      	bx	lr

000b7410 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b7410:	b410      	push	{r4}
    drawPixel(x, y, color);
   b7412:	6804      	ldr	r4, [r0, #0]
   b7414:	6924      	ldr	r4, [r4, #16]
   b7416:	46a4      	mov	ip, r4
}
   b7418:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b741c:	4760      	bx	ip

000b741e <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b741e:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b7420:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b7422:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b7426:	9502      	str	r5, [sp, #8]
   b7428:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b742a:	46a4      	mov	ip, r4
}
   b742c:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b742e:	4760      	bx	ip

000b7430 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b7430:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b7432:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b7434:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b7438:	9502      	str	r5, [sp, #8]
   b743a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b743c:	46a4      	mov	ip, r4
}
   b743e:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b7440:	4760      	bx	ip

000b7442 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b7442:	b470      	push	{r4, r5, r6}
   b7444:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b7448:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b744c:	6804      	ldr	r4, [r0, #0]
   b744e:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b7452:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b7454:	46a4      	mov	ip, r4
}
   b7456:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b7458:	4760      	bx	ip

000b745a <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b745a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b745e:	461c      	mov	r4, r3
    startWrite();
   b7460:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b7462:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b7466:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b7468:	4605      	mov	r5, r0
   b746a:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b746c:	3c01      	subs	r4, #1
   b746e:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b7470:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b7472:	b224      	sxth	r4, r4
    startWrite();
   b7474:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b7476:	682b      	ldr	r3, [r5, #0]
   b7478:	f8cd 8004 	str.w	r8, [sp, #4]
   b747c:	9400      	str	r4, [sp, #0]
   b747e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b7480:	4628      	mov	r0, r5
   b7482:	463b      	mov	r3, r7
   b7484:	4632      	mov	r2, r6
   b7486:	4639      	mov	r1, r7
   b7488:	47a0      	blx	r4
    endWrite();
   b748a:	682b      	ldr	r3, [r5, #0]
   b748c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b748e:	4628      	mov	r0, r5
}
   b7490:	b002      	add	sp, #8
   b7492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b7496:	4718      	bx	r3

000b7498 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b7498:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b749c:	461d      	mov	r5, r3
    startWrite();
   b749e:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b74a0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b74a4:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b74a6:	4604      	mov	r4, r0
   b74a8:	4617      	mov	r7, r2
   b74aa:	460e      	mov	r6, r1
    startWrite();
   b74ac:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b74ae:	e9cd 7800 	strd	r7, r8, [sp]
   b74b2:	6822      	ldr	r2, [r4, #0]
   b74b4:	1e6b      	subs	r3, r5, #1
   b74b6:	4433      	add	r3, r6
   b74b8:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b74ba:	4620      	mov	r0, r4
   b74bc:	b21b      	sxth	r3, r3
   b74be:	463a      	mov	r2, r7
   b74c0:	4631      	mov	r1, r6
   b74c2:	47a8      	blx	r5
    endWrite();
   b74c4:	6823      	ldr	r3, [r4, #0]
   b74c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b74c8:	4620      	mov	r0, r4
}
   b74ca:	b002      	add	sp, #8
   b74cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b74d0:	4718      	bx	r3

000b74d2 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b74d2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b74d6:	461e      	mov	r6, r3
    startWrite();
   b74d8:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b74da:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b74de:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b74e0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b74e4:	460c      	mov	r4, r1
   b74e6:	4605      	mov	r5, r0
   b74e8:	4617      	mov	r7, r2
    startWrite();
   b74ea:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b74ec:	4426      	add	r6, r4
   b74ee:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b74f0:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b74f2:	da0b      	bge.n	b750c <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b74f4:	f8cd 8000 	str.w	r8, [sp]
   b74f8:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b74fc:	4621      	mov	r1, r4
   b74fe:	464b      	mov	r3, r9
   b7500:	463a      	mov	r2, r7
   b7502:	4628      	mov	r0, r5
   b7504:	3401      	adds	r4, #1
   b7506:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b7508:	b224      	sxth	r4, r4
   b750a:	e7f0      	b.n	b74ee <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b750c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b750e:	4628      	mov	r0, r5
}
   b7510:	b002      	add	sp, #8
   b7512:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b7516:	4718      	bx	r3

000b7518 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b7518:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b751a:	6802      	ldr	r2, [r0, #0]
   b751c:	9101      	str	r1, [sp, #4]
   b751e:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b7522:	9100      	str	r1, [sp, #0]
   b7524:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b7526:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b752a:	2200      	movs	r2, #0
   b752c:	4611      	mov	r1, r2
   b752e:	47a0      	blx	r4
}
   b7530:	b002      	add	sp, #8
   b7532:	bd10      	pop	{r4, pc}

000b7534 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b7534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b7538:	4299      	cmp	r1, r3
        uint16_t color) {
   b753a:	4616      	mov	r6, r2
   b753c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b7540:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b7544:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b7546:	4680      	mov	r8, r0
   b7548:	460d      	mov	r5, r1
   b754a:	461c      	mov	r4, r3
    if(x0 == x1){
   b754c:	d113      	bne.n	b7576 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b754e:	42be      	cmp	r6, r7
   b7550:	bfc8      	it	gt
   b7552:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b7554:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b7558:	bfc4      	itt	gt
   b755a:	463e      	movgt	r6, r7
   b755c:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b755e:	1c7b      	adds	r3, r7, #1
   b7560:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b7562:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b7564:	b21b      	sxth	r3, r3
   b7566:	4632      	mov	r2, r6
   b7568:	4629      	mov	r1, r5
   b756a:	4640      	mov	r0, r8
   b756c:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b756e:	b003      	add	sp, #12
   b7570:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b7574:	4760      	bx	ip
    } else if(y0 == y1){
   b7576:	42be      	cmp	r6, r7
   b7578:	d10a      	bne.n	b7590 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b757a:	4299      	cmp	r1, r3
   b757c:	bfc2      	ittt	gt
   b757e:	460b      	movgt	r3, r1
   b7580:	4625      	movgt	r5, r4
   b7582:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b7584:	1c63      	adds	r3, r4, #1
   b7586:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b758a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b758c:	1b5b      	subs	r3, r3, r5
   b758e:	e7e9      	b.n	b7564 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b7590:	6953      	ldr	r3, [r2, #20]
   b7592:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b7594:	e9cd 7900 	strd	r7, r9, [sp]
   b7598:	f8d8 3000 	ldr.w	r3, [r8]
   b759c:	4640      	mov	r0, r8
   b759e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b75a0:	4632      	mov	r2, r6
   b75a2:	4623      	mov	r3, r4
   b75a4:	4629      	mov	r1, r5
   b75a6:	47b8      	blx	r7
        endWrite();
   b75a8:	f8d8 3000 	ldr.w	r3, [r8]
   b75ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b75ae:	4640      	mov	r0, r8
}
   b75b0:	b003      	add	sp, #12
   b75b2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b75b6:	4718      	bx	r3

000b75b8 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b75b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b75bc:	461d      	mov	r5, r3
    startWrite();
   b75be:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b75c0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b75c4:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b75c6:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b75ca:	4604      	mov	r4, r0
   b75cc:	460f      	mov	r7, r1
   b75ce:	4616      	mov	r6, r2
    startWrite();
   b75d0:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b75d2:	6823      	ldr	r3, [r4, #0]
   b75d4:	f8cd 8000 	str.w	r8, [sp]
   b75d8:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b75dc:	4632      	mov	r2, r6
   b75de:	462b      	mov	r3, r5
   b75e0:	4639      	mov	r1, r7
   b75e2:	4620      	mov	r0, r4
   b75e4:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b75e6:	6823      	ldr	r3, [r4, #0]
   b75e8:	f8cd 8000 	str.w	r8, [sp]
   b75ec:	f109 32ff 	add.w	r2, r9, #4294967295
   b75f0:	4432      	add	r2, r6
   b75f2:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b75f6:	4639      	mov	r1, r7
   b75f8:	462b      	mov	r3, r5
   b75fa:	4620      	mov	r0, r4
   b75fc:	b212      	sxth	r2, r2
   b75fe:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b7600:	6823      	ldr	r3, [r4, #0]
   b7602:	f8cd 8000 	str.w	r8, [sp]
   b7606:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b760a:	4632      	mov	r2, r6
   b760c:	464b      	mov	r3, r9
   b760e:	4639      	mov	r1, r7
   b7610:	4620      	mov	r0, r4
   b7612:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b7614:	1e6b      	subs	r3, r5, #1
   b7616:	19d9      	adds	r1, r3, r7
   b7618:	6823      	ldr	r3, [r4, #0]
   b761a:	f8cd 8000 	str.w	r8, [sp]
   b761e:	6a1d      	ldr	r5, [r3, #32]
   b7620:	4620      	mov	r0, r4
   b7622:	464b      	mov	r3, r9
   b7624:	4632      	mov	r2, r6
   b7626:	b209      	sxth	r1, r1
   b7628:	47a8      	blx	r5
    endWrite();
   b762a:	6823      	ldr	r3, [r4, #0]
   b762c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b762e:	4620      	mov	r0, r4
}
   b7630:	b002      	add	sp, #8
   b7632:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b7636:	4718      	bx	r3

000b7638 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b7638:	4770      	bx	lr

000b763a <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b763a:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b763e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b7642:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b7644:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b7646:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b764a:	bf59      	ittee	pl
   b764c:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b764e:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b7650:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b7652:	81c3      	strhmi	r3, [r0, #14]
}
   b7654:	4770      	bx	lr
	...

000b7658 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b7658:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b765a:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b765c:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b765e:	4a07      	ldr	r2, [pc, #28]	; (b767c <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b7660:	4d07      	ldr	r5, [pc, #28]	; (b7680 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b7662:	8101      	strh	r1, [r0, #8]
   b7664:	2400      	movs	r4, #0
    _width    = WIDTH;
   b7666:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b7668:	f04f 31ff 	mov.w	r1, #4294967295
   b766c:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b7670:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b7672:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b7674:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b7676:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b7678:	6204      	str	r4, [r0, #32]
}
   b767a:	bd30      	pop	{r4, r5, pc}
   b767c:	01000101 	.word	0x01000101
   b7680:	000c1600 	.word	0x000c1600

000b7684 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b7684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7688:	b089      	sub	sp, #36	; 0x24
   b768a:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b768e:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b7690:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b7694:	9304      	str	r3, [sp, #16]
   b7696:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b769a:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b769c:	9305      	str	r3, [sp, #20]
   b769e:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b76a2:	4604      	mov	r4, r0
    startWrite();
   b76a4:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b76a6:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b76aa:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b76ae:	bf48      	it	mi
   b76b0:	f108 020e 	addmi.w	r2, r8, #14
   b76b4:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b76b8:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b76ba:	4635      	mov	r5, r6
   b76bc:	9b03      	ldr	r3, [sp, #12]
   b76be:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b76c0:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b76c4:	189a      	adds	r2, r3, r2
   b76c6:	9b05      	ldr	r3, [sp, #20]
   b76c8:	428b      	cmp	r3, r1
   b76ca:	b212      	sxth	r2, r2
   b76cc:	dd27      	ble.n	b771e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b76ce:	9b04      	ldr	r3, [sp, #16]
   b76d0:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b76d2:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b76d6:	9306      	str	r3, [sp, #24]
   b76d8:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b76dc:	4580      	cmp	r8, r0
   b76de:	fa1f f189 	uxth.w	r1, r9
   b76e2:	dd17      	ble.n	b7714 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b76e4:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b76e6:	bf05      	ittet	eq
   b76e8:	9b06      	ldreq	r3, [sp, #24]
   b76ea:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b76ec:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b76ee:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b76f0:	bf18      	it	ne
   b76f2:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b76f4:	062b      	lsls	r3, r5, #24
   b76f6:	d50a      	bpl.n	b770e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b76f8:	9b02      	ldr	r3, [sp, #8]
   b76fa:	6820      	ldr	r0, [r4, #0]
   b76fc:	9207      	str	r2, [sp, #28]
   b76fe:	4419      	add	r1, r3
   b7700:	6983      	ldr	r3, [r0, #24]
   b7702:	b209      	sxth	r1, r1
   b7704:	461f      	mov	r7, r3
   b7706:	4620      	mov	r0, r4
   b7708:	4653      	mov	r3, sl
   b770a:	47b8      	blx	r7
   b770c:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b770e:	f109 0901 	add.w	r9, r9, #1
   b7712:	e7e1      	b.n	b76d8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b7714:	9b01      	ldr	r3, [sp, #4]
   b7716:	3301      	adds	r3, #1
   b7718:	9301      	str	r3, [sp, #4]
   b771a:	445e      	add	r6, fp
   b771c:	e7ce      	b.n	b76bc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b771e:	6823      	ldr	r3, [r4, #0]
   b7720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7722:	4620      	mov	r0, r4
}
   b7724:	b009      	add	sp, #36	; 0x24
   b7726:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b772a:	4718      	bx	r3

000b772c <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b772c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7730:	ed2d 8b02 	vpush	{d8}
   b7734:	b091      	sub	sp, #68	; 0x44
   b7736:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b7738:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b773a:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b773e:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b7742:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b7746:	9103      	str	r1, [sp, #12]
   b7748:	461f      	mov	r7, r3
   b774a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b774e:	9304      	str	r3, [sp, #16]
   b7750:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b7752:	2a00      	cmp	r2, #0
   b7754:	f040 80c5 	bne.w	b78e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b7758:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b775c:	428b      	cmp	r3, r1
   b775e:	f340 814c 	ble.w	b79fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b7762:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b7766:	42b3      	cmp	r3, r6
   b7768:	f340 8147 	ble.w	b79fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b776c:	2306      	movs	r3, #6
   b776e:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b7772:	2b00      	cmp	r3, #0
   b7774:	f340 8141 	ble.w	b79fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b7778:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b777c:	2b00      	cmp	r3, #0
   b777e:	f340 813c 	ble.w	b79fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b7782:	7f03      	ldrb	r3, [r0, #28]
   b7784:	b91b      	cbnz	r3, b778e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b7786:	2faf      	cmp	r7, #175	; 0xaf
   b7788:	bf84      	itt	hi
   b778a:	3701      	addhi	r7, #1
   b778c:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b778e:	f8db 3000 	ldr.w	r3, [fp]
   b7792:	4658      	mov	r0, fp
   b7794:	695b      	ldr	r3, [r3, #20]
   b7796:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b7798:	2205      	movs	r2, #5
   b779a:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b779c:	2200      	movs	r2, #0
   b779e:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b77a0:	4a98      	ldr	r2, [pc, #608]	; (b7a04 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b77a2:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b77a6:	18d3      	adds	r3, r2, r3
   b77a8:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b77aa:	b2b3      	uxth	r3, r6
   b77ac:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b77ae:	9a05      	ldr	r2, [sp, #20]
   b77b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b77b2:	5c9b      	ldrb	r3, [r3, r2]
   b77b4:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b77b6:	b2ab      	uxth	r3, r5
   b77b8:	930b      	str	r3, [sp, #44]	; 0x2c
   b77ba:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b77be:	9308      	str	r3, [sp, #32]
   b77c0:	9b03      	ldr	r3, [sp, #12]
   b77c2:	fb02 f905 	mul.w	r9, r2, r5
   b77c6:	fa19 f983 	uxtah	r9, r9, r3
   b77ca:	fa0f f389 	sxth.w	r3, r9
   b77ce:	ee08 3a10 	vmov	s16, r3
   b77d2:	2308      	movs	r3, #8
   b77d4:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b77d6:	9b03      	ldr	r3, [sp, #12]
   b77d8:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b77dc:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b77e0:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b77e4:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b77e6:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b77ea:	07d2      	lsls	r2, r2, #31
   b77ec:	d552      	bpl.n	b7894 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b77ee:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b77f0:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b77f4:	d13e      	bne.n	b7874 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b77f6:	2c01      	cmp	r4, #1
   b77f8:	d13c      	bne.n	b7874 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b77fa:	699b      	ldr	r3, [r3, #24]
   b77fc:	9906      	ldr	r1, [sp, #24]
   b77fe:	461f      	mov	r7, r3
   b7800:	9b04      	ldr	r3, [sp, #16]
   b7802:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b7804:	b212      	sxth	r2, r2
   b7806:	4651      	mov	r1, sl
   b7808:	4658      	mov	r0, fp
   b780a:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b780c:	f109 0301 	add.w	r3, r9, #1
   b7810:	fa4f f983 	sxtb.w	r9, r3
   b7814:	9b07      	ldr	r3, [sp, #28]
   b7816:	085b      	lsrs	r3, r3, #1
   b7818:	9307      	str	r3, [sp, #28]
   b781a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b781c:	3b01      	subs	r3, #1
   b781e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b7822:	930a      	str	r3, [sp, #40]	; 0x28
   b7824:	d1de      	bne.n	b77e4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b7826:	9f05      	ldr	r7, [sp, #20]
   b7828:	3701      	adds	r7, #1
   b782a:	b27b      	sxtb	r3, r7
   b782c:	9305      	str	r3, [sp, #20]
   b782e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b7830:	3b01      	subs	r3, #1
   b7832:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b7836:	9309      	str	r3, [sp, #36]	; 0x24
   b7838:	d1b9      	bne.n	b77ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b783a:	9b04      	ldr	r3, [sp, #16]
   b783c:	4543      	cmp	r3, r8
   b783e:	d00f      	beq.n	b7860 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b7840:	2d01      	cmp	r5, #1
   b7842:	f8db 3000 	ldr.w	r3, [fp]
   b7846:	d13b      	bne.n	b78c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b7848:	2c01      	cmp	r4, #1
   b784a:	d139      	bne.n	b78c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b784c:	9908      	ldr	r1, [sp, #32]
   b784e:	f8cd 8000 	str.w	r8, [sp]
   b7852:	3105      	adds	r1, #5
   b7854:	6a1c      	ldr	r4, [r3, #32]
   b7856:	4632      	mov	r2, r6
   b7858:	2308      	movs	r3, #8
   b785a:	b209      	sxth	r1, r1
   b785c:	4658      	mov	r0, fp
   b785e:	47a0      	blx	r4
        endWrite();
   b7860:	f8db 3000 	ldr.w	r3, [fp]
   b7864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7866:	4658      	mov	r0, fp
}
   b7868:	b011      	add	sp, #68	; 0x44
   b786a:	ecbd 8b02 	vpop	{d8}
   b786e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b7872:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b7874:	9906      	ldr	r1, [sp, #24]
   b7876:	fb14 f202 	smulbb	r2, r4, r2
   b787a:	440a      	add	r2, r1
   b787c:	9904      	ldr	r1, [sp, #16]
   b787e:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b7880:	9400      	str	r4, [sp, #0]
   b7882:	69db      	ldr	r3, [r3, #28]
   b7884:	ee18 1a10 	vmov	r1, s16
   b7888:	461f      	mov	r7, r3
   b788a:	b212      	sxth	r2, r2
   b788c:	462b      	mov	r3, r5
   b788e:	4658      	mov	r0, fp
   b7890:	47b8      	blx	r7
   b7892:	e7bb      	b.n	b780c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b7894:	9a04      	ldr	r2, [sp, #16]
   b7896:	4542      	cmp	r2, r8
   b7898:	d0b8      	beq.n	b780c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b789a:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b789c:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b78a0:	d107      	bne.n	b78b2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b78a2:	2c01      	cmp	r4, #1
   b78a4:	d105      	bne.n	b78b2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b78a6:	699b      	ldr	r3, [r3, #24]
   b78a8:	9906      	ldr	r1, [sp, #24]
   b78aa:	461f      	mov	r7, r3
   b78ac:	440a      	add	r2, r1
   b78ae:	4643      	mov	r3, r8
   b78b0:	e7a8      	b.n	b7804 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b78b2:	9906      	ldr	r1, [sp, #24]
   b78b4:	f8cd 8004 	str.w	r8, [sp, #4]
   b78b8:	fb14 f202 	smulbb	r2, r4, r2
   b78bc:	440a      	add	r2, r1
   b78be:	e7df      	b.n	b7880 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b78c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b78c2:	f8cd 8004 	str.w	r8, [sp, #4]
   b78c6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b78ca:	9a08      	ldr	r2, [sp, #32]
   b78cc:	00e4      	lsls	r4, r4, #3
   b78ce:	440a      	add	r2, r1
   b78d0:	4611      	mov	r1, r2
   b78d2:	9400      	str	r4, [sp, #0]
   b78d4:	69dc      	ldr	r4, [r3, #28]
   b78d6:	4632      	mov	r2, r6
   b78d8:	462b      	mov	r3, r5
   b78da:	b209      	sxth	r1, r1
   b78dc:	4658      	mov	r0, fp
   b78de:	47a0      	blx	r4
        endWrite();
   b78e0:	e7be      	b.n	b7860 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b78e2:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b78e4:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b78e6:	6812      	ldr	r2, [r2, #0]
   b78e8:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b78ea:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b78ec:	b2ff      	uxtb	r7, r7
   b78ee:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b78f2:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b78f6:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b78f8:	789a      	ldrb	r2, [r3, #2]
   b78fa:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b78fc:	78da      	ldrb	r2, [r3, #3]
   b78fe:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b7900:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b7902:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b7906:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b790a:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b790c:	d801      	bhi.n	b7912 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b790e:	2c01      	cmp	r4, #1
   b7910:	d957      	bls.n	b79c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b7912:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b7916:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b7918:	fa0f f38a 	sxth.w	r3, sl
   b791c:	9307      	str	r3, [sp, #28]
        startWrite();
   b791e:	f8db 3000 	ldr.w	r3, [fp]
   b7922:	4658      	mov	r0, fp
   b7924:	695b      	ldr	r3, [r3, #20]
   b7926:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b7928:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b792a:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b792e:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b7930:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b7934:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b7936:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b7938:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b793a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b793c:	429f      	cmp	r7, r3
   b793e:	d28f      	bcs.n	b7860 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b7940:	9b07      	ldr	r3, [sp, #28]
   b7942:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b7944:	443b      	add	r3, r7
   b7946:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b794a:	2200      	movs	r2, #0
   b794c:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b794e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b7950:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b7952:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b7956:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b795a:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b795e:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b7960:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b7962:	9905      	ldr	r1, [sp, #20]
   b7964:	4291      	cmp	r1, r2
   b7966:	d241      	bcs.n	b79ec <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b7968:	1c5a      	adds	r2, r3, #1
   b796a:	b2d2      	uxtb	r2, r2
   b796c:	075b      	lsls	r3, r3, #29
   b796e:	920d      	str	r2, [sp, #52]	; 0x34
   b7970:	d107      	bne.n	b7982 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b7972:	9b06      	ldr	r3, [sp, #24]
   b7974:	9906      	ldr	r1, [sp, #24]
   b7976:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7978:	3301      	adds	r3, #1
   b797a:	b29b      	uxth	r3, r3
   b797c:	f812 9001 	ldrb.w	r9, [r2, r1]
   b7980:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b7982:	f019 0f80 	tst.w	r9, #128	; 0x80
   b7986:	d012      	beq.n	b79ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b7988:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b798a:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b798e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b7992:	d11a      	bne.n	b79ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b7994:	2c01      	cmp	r4, #1
   b7996:	d118      	bne.n	b79ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b7998:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b799a:	699b      	ldr	r3, [r3, #24]
   b799c:	4411      	add	r1, r2
   b799e:	9a05      	ldr	r2, [sp, #20]
   b79a0:	4411      	add	r1, r2
   b79a2:	461e      	mov	r6, r3
   b79a4:	4652      	mov	r2, sl
   b79a6:	9b04      	ldr	r3, [sp, #16]
   b79a8:	b209      	sxth	r1, r1
   b79aa:	4658      	mov	r0, fp
   b79ac:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b79ae:	9e05      	ldr	r6, [sp, #20]
   b79b0:	3601      	adds	r6, #1
   b79b2:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b79b4:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b79b8:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b79ba:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b79be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b79c0:	e7ce      	b.n	b7960 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b79c2:	2300      	movs	r3, #0
   b79c4:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b79c8:	e7a9      	b.n	b791e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b79ca:	9805      	ldr	r0, [sp, #20]
   b79cc:	9a08      	ldr	r2, [sp, #32]
   b79ce:	4402      	add	r2, r0
   b79d0:	fb02 1105 	mla	r1, r2, r5, r1
   b79d4:	9a04      	ldr	r2, [sp, #16]
   b79d6:	e9cd 4200 	strd	r4, r2, [sp]
   b79da:	69db      	ldr	r3, [r3, #28]
   b79dc:	ee18 2a10 	vmov	r2, s16
   b79e0:	461e      	mov	r6, r3
   b79e2:	b209      	sxth	r1, r1
   b79e4:	462b      	mov	r3, r5
   b79e6:	4658      	mov	r0, fp
   b79e8:	47b0      	blx	r6
   b79ea:	e7e0      	b.n	b79ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b79ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b79ee:	3701      	adds	r7, #1
   b79f0:	4498      	add	r8, r3
   b79f2:	fa5f f888 	uxtb.w	r8, r8
   b79f6:	b2ff      	uxtb	r7, r7
   b79f8:	e79f      	b.n	b793a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b79fa:	b011      	add	sp, #68	; 0x44
   b79fc:	ecbd 8b02 	vpop	{d8}
   b7a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7a04:	000c10f8 	.word	0x000c10f8

000b7a08 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b7a08:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b7a0a:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b7a0c:	b085      	sub	sp, #20
   b7a0e:	4604      	mov	r4, r0
   b7a10:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b7a12:	2a00      	cmp	r2, #0
   b7a14:	d134      	bne.n	b7a80 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b7a16:	290a      	cmp	r1, #10
   b7a18:	d108      	bne.n	b7a2c <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b7a1a:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b7a1c:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b7a1e:	7e42      	ldrb	r2, [r0, #25]
   b7a20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b7a24:	8263      	strh	r3, [r4, #18]
}
   b7a26:	2001      	movs	r0, #1
   b7a28:	b005      	add	sp, #20
   b7a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b7a2c:	290d      	cmp	r1, #13
   b7a2e:	d0fa      	beq.n	b7a26 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b7a30:	7ee1      	ldrb	r1, [r4, #27]
   b7a32:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b7a34:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b7a36:	b171      	cbz	r1, b7a56 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b7a38:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b7a3c:	2106      	movs	r1, #6
   b7a3e:	fb11 6100 	smlabb	r1, r1, r0, r6
   b7a42:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b7a46:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b7a48:	bfc1      	itttt	gt
   b7a4a:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b7a4e:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b7a50:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b7a54:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b7a56:	8ae2      	ldrh	r2, [r4, #22]
   b7a58:	9201      	str	r2, [sp, #4]
   b7a5a:	8aa2      	ldrh	r2, [r4, #20]
   b7a5c:	9200      	str	r2, [sp, #0]
   b7a5e:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b7a62:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b7a66:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b7a6a:	4620      	mov	r0, r4
   b7a6c:	f7ff fe5e 	bl	b772c <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b7a70:	7e23      	ldrb	r3, [r4, #24]
   b7a72:	8a22      	ldrh	r2, [r4, #16]
   b7a74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b7a78:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b7a7c:	8223      	strh	r3, [r4, #16]
   b7a7e:	e7d2      	b.n	b7a26 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b7a80:	290a      	cmp	r1, #10
   b7a82:	d107      	bne.n	b7a94 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b7a84:	2300      	movs	r3, #0
   b7a86:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b7a88:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b7a8a:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b7a8c:	8a43      	ldrh	r3, [r0, #18]
   b7a8e:	fb01 3302 	mla	r3, r1, r2, r3
   b7a92:	e7c7      	b.n	b7a24 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b7a94:	290d      	cmp	r1, #13
   b7a96:	d0c6      	beq.n	b7a26 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b7a98:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b7a9a:	42a9      	cmp	r1, r5
   b7a9c:	d3c3      	bcc.n	b7a26 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b7a9e:	7a51      	ldrb	r1, [r2, #9]
   b7aa0:	4299      	cmp	r1, r3
   b7aa2:	d3c0      	bcc.n	b7a26 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b7aa4:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b7aa6:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b7aa8:	b2ed      	uxtb	r5, r5
   b7aaa:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b7aae:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b7ab0:	b328      	cbz	r0, b7afe <_ZN12Adafruit_GFX5writeEh+0xf6>
   b7ab2:	78e9      	ldrb	r1, [r5, #3]
   b7ab4:	b319      	cbz	r1, b7afe <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b7ab6:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b7ab8:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b7aba:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b7abc:	b191      	cbz	r1, b7ae4 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b7abe:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b7ac2:	4408      	add	r0, r1
   b7ac4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b7ac8:	fb06 1100 	mla	r1, r6, r0, r1
   b7acc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b7ad0:	4281      	cmp	r1, r0
   b7ad2:	dd07      	ble.n	b7ae4 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b7ad4:	2000      	movs	r0, #0
   b7ad6:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b7ad8:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b7adc:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b7ade:	fb02 1207 	mla	r2, r2, r7, r1
   b7ae2:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b7ae4:	8ae2      	ldrh	r2, [r4, #22]
   b7ae6:	9201      	str	r2, [sp, #4]
   b7ae8:	8aa2      	ldrh	r2, [r4, #20]
   b7aea:	9200      	str	r2, [sp, #0]
   b7aec:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b7af0:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b7af4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b7af8:	4620      	mov	r0, r4
   b7afa:	f7ff fe17 	bl	b772c <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b7afe:	7929      	ldrb	r1, [r5, #4]
   b7b00:	7e22      	ldrb	r2, [r4, #24]
   b7b02:	8a23      	ldrh	r3, [r4, #16]
   b7b04:	fb01 3302 	mla	r3, r1, r2, r3
   b7b08:	e7b8      	b.n	b7a7c <_ZN12Adafruit_GFX5writeEh+0x74>

000b7b0a <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b7b0a:	2901      	cmp	r1, #1
   b7b0c:	bf38      	it	cc
   b7b0e:	2101      	movcc	r1, #1
   b7b10:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b7b12:	7641      	strb	r1, [r0, #25]
}
   b7b14:	4770      	bx	lr

000b7b16 <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
   b7b16:	b510      	push	{r4, lr}
   b7b18:	4604      	mov	r4, r0
  if (_spiSetting) {
   b7b1a:	6840      	ldr	r0, [r0, #4]
   b7b1c:	b110      	cbz	r0, b7b24 <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
   b7b1e:	6803      	ldr	r3, [r0, #0]
   b7b20:	689b      	ldr	r3, [r3, #8]
   b7b22:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
   b7b24:	4620      	mov	r0, r4
   b7b26:	bd10      	pop	{r4, pc}

000b7b28 <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
   b7b28:	b538      	push	{r3, r4, r5, lr}
   b7b2a:	4604      	mov	r4, r0
  pinMode(_cs, OUTPUT);
   b7b2c:	f990 000e 	ldrsb.w	r0, [r0, #14]
   b7b30:	2101      	movs	r1, #1
   b7b32:	b280      	uxth	r0, r0
   b7b34:	f005 ffb8 	bl	bdaa8 <pinMode>
  digitalWrite(_cs, HIGH);
   b7b38:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b7b3c:	2101      	movs	r1, #1
   b7b3e:	b280      	uxth	r0, r0
   b7b40:	f005 ffc3 	bl	bdaca <digitalWrite>

  if (_spi) { // hardware SPI
   b7b44:	6825      	ldr	r5, [r4, #0]
   b7b46:	b135      	cbz	r5, b7b56 <_ZN18Adafruit_SPIDevice5beginEv+0x2e>
    _spi->begin();
   b7b48:	4628      	mov	r0, r5
   b7b4a:	f002 fa99 	bl	ba080 <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
   b7b4e:	2001      	movs	r0, #1
   b7b50:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
   b7b54:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
   b7b56:	f994 000f 	ldrsb.w	r0, [r4, #15]
   b7b5a:	2101      	movs	r1, #1
   b7b5c:	b280      	uxth	r0, r0
   b7b5e:	f005 ffa3 	bl	bdaa8 <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
   b7b62:	7b63      	ldrb	r3, [r4, #13]
   b7b64:	f994 000f 	ldrsb.w	r0, [r4, #15]
   b7b68:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
   b7b6a:	bf94      	ite	ls
   b7b6c:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
   b7b6e:	2101      	movhi	r1, #1
   b7b70:	b280      	uxth	r0, r0
   b7b72:	f005 ffaa 	bl	bdaca <digitalWrite>
    if (_mosi != -1) {
   b7b76:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b7b7a:	1c42      	adds	r2, r0, #1
   b7b7c:	d009      	beq.n	b7b92 <_ZN18Adafruit_SPIDevice5beginEv+0x6a>
      pinMode(_mosi, OUTPUT);
   b7b7e:	2101      	movs	r1, #1
   b7b80:	b280      	uxth	r0, r0
   b7b82:	f005 ff91 	bl	bdaa8 <pinMode>
      digitalWrite(_mosi, HIGH);
   b7b86:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b7b8a:	2101      	movs	r1, #1
   b7b8c:	b280      	uxth	r0, r0
   b7b8e:	f005 ff9c 	bl	bdaca <digitalWrite>
    if (_miso != -1) {
   b7b92:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b7b96:	1c43      	adds	r3, r0, #1
   b7b98:	d0d9      	beq.n	b7b4e <_ZN18Adafruit_SPIDevice5beginEv+0x26>
      pinMode(_miso, INPUT);
   b7b9a:	2100      	movs	r1, #0
   b7b9c:	b280      	uxth	r0, r0
   b7b9e:	f005 ff83 	bl	bdaa8 <pinMode>
   b7ba2:	e7d4      	b.n	b7b4e <_ZN18Adafruit_SPIDevice5beginEv+0x26>

000b7ba4 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b7ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7ba8:	4604      	mov	r4, r0
  if (_spi) {
   b7baa:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b7bac:	b085      	sub	sp, #20
   b7bae:	460d      	mov	r5, r1
  if (_spi) {
   b7bb0:	b140      	cbz	r0, b7bc4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   b7bb2:	2300      	movs	r3, #0
   b7bb4:	9300      	str	r3, [sp, #0]
   b7bb6:	4613      	mov	r3, r2
   b7bb8:	460a      	mov	r2, r1
   b7bba:	f002 fb03 	bl	ba1c4 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   b7bbe:	b005      	add	sp, #20
   b7bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   b7bc4:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b7bc6:	68a0      	ldr	r0, [r4, #8]
   b7bc8:	4f48      	ldr	r7, [pc, #288]	; (b7cec <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   b7bca:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   b7bce:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b7bd0:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   b7bd2:	bf0c      	ite	eq
   b7bd4:	f04f 0b01 	moveq.w	fp, #1
   b7bd8:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b7bdc:	ea1b 0f03 	tst.w	fp, r3
   b7be0:	eb01 0302 	add.w	r3, r1, r2
   b7be4:	bf0c      	ite	eq
   b7be6:	f04f 0901 	moveq.w	r9, #1
   b7bea:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b7bee:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   b7bf0:	9303      	str	r3, [sp, #12]
   b7bf2:	9b03      	ldr	r3, [sp, #12]
   b7bf4:	42ab      	cmp	r3, r5
   b7bf6:	d0e2      	beq.n	b7bbe <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   b7bf8:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   b7bfc:	465e      	mov	r6, fp
    uint8_t reply = 0;
   b7bfe:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   b7c02:	b117      	cbz	r7, b7c0a <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b7c04:	4638      	mov	r0, r7
   b7c06:	f001 fe47 	bl	b9898 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   b7c0a:	7b63      	ldrb	r3, [r4, #13]
   b7c0c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   b7c10:	d141      	bne.n	b7c96 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b7c12:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b7c16:	1c5a      	adds	r2, r3, #1
   b7c18:	d00f      	beq.n	b7c3a <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   b7c1a:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b7c1e:	bf14      	ite	ne
   b7c20:	2301      	movne	r3, #1
   b7c22:	2300      	moveq	r3, #0
   b7c24:	454b      	cmp	r3, r9
   b7c26:	d008      	beq.n	b7c3a <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   b7c28:	6963      	ldr	r3, [r4, #20]
   b7c2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7c2c:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   b7c2e:	2900      	cmp	r1, #0
   b7c30:	d02c      	beq.n	b7c8c <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   b7c32:	4302      	orrs	r2, r0
   b7c34:	601a      	str	r2, [r3, #0]
   b7c36:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   b7c3a:	69a1      	ldr	r1, [r4, #24]
   b7c3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b7c3e:	680a      	ldr	r2, [r1, #0]
   b7c40:	4313      	orrs	r3, r2
   b7c42:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b7c44:	b117      	cbz	r7, b7c4c <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   b7c46:	4638      	mov	r0, r7
   b7c48:	f001 fe26 	bl	b9898 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   b7c4c:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b7c50:	3301      	adds	r3, #1
   b7c52:	d006      	beq.n	b7c62 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   b7c54:	69e3      	ldr	r3, [r4, #28]
   b7c56:	681a      	ldr	r2, [r3, #0]
   b7c58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b7c5a:	421a      	tst	r2, r3
            reply |= b;
   b7c5c:	bf18      	it	ne
   b7c5e:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   b7c62:	69a1      	ldr	r1, [r4, #24]
   b7c64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b7c66:	680a      	ldr	r2, [r1, #0]
   b7c68:	ea22 0303 	bic.w	r3, r2, r3
   b7c6c:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   b7c6e:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b7c72:	3301      	adds	r3, #1
        buffer[i] = reply;
   b7c74:	bf18      	it	ne
   b7c76:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   b7c7a:	7b23      	ldrb	r3, [r4, #12]
   b7c7c:	2b00      	cmp	r3, #0
   b7c7e:	d132      	bne.n	b7ce6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   b7c80:	0076      	lsls	r6, r6, #1
   b7c82:	b2f6      	uxtb	r6, r6
   b7c84:	2e00      	cmp	r6, #0
   b7c86:	d1bc      	bne.n	b7c02 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   b7c88:	3501      	adds	r5, #1
   b7c8a:	e7b2      	b.n	b7bf2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   b7c8c:	ea22 0200 	bic.w	r2, r2, r0
   b7c90:	601a      	str	r2, [r3, #0]
   b7c92:	4689      	mov	r9, r1
   b7c94:	e7d1      	b.n	b7c3a <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   b7c96:	69a1      	ldr	r1, [r4, #24]
   b7c98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b7c9a:	680a      	ldr	r2, [r1, #0]
   b7c9c:	4313      	orrs	r3, r2
   b7c9e:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b7ca0:	b117      	cbz	r7, b7ca8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   b7ca2:	4638      	mov	r0, r7
   b7ca4:	f001 fdf8 	bl	b9898 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   b7ca8:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b7cac:	3301      	adds	r3, #1
   b7cae:	d008      	beq.n	b7cc2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   b7cb0:	6963      	ldr	r3, [r4, #20]
   b7cb2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b7cb4:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   b7cb6:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   b7cba:	bf14      	ite	ne
   b7cbc:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   b7cbe:	438a      	biceq	r2, r1
   b7cc0:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   b7cc2:	69a1      	ldr	r1, [r4, #24]
   b7cc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b7cc6:	680a      	ldr	r2, [r1, #0]
   b7cc8:	ea22 0303 	bic.w	r3, r2, r3
   b7ccc:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   b7cce:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b7cd2:	3301      	adds	r3, #1
   b7cd4:	d0cb      	beq.n	b7c6e <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   b7cd6:	69e3      	ldr	r3, [r4, #28]
   b7cd8:	681a      	ldr	r2, [r3, #0]
   b7cda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b7cdc:	421a      	tst	r2, r3
            reply |= b;
   b7cde:	bf18      	it	ne
   b7ce0:	ea46 0808 	orrne.w	r8, r6, r8
   b7ce4:	e7c3      	b.n	b7c6e <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   b7ce6:	0876      	lsrs	r6, r6, #1
   b7ce8:	e7cc      	b.n	b7c84 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   b7cea:	bf00      	nop
   b7cec:	0007a120 	.word	0x0007a120

000b7cf0 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   b7cf0:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   b7cf2:	2201      	movs	r2, #1
  uint8_t data = send;
   b7cf4:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   b7cf8:	f10d 0107 	add.w	r1, sp, #7
   b7cfc:	f7ff ff52 	bl	b7ba4 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   b7d00:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b7d04:	b003      	add	sp, #12
   b7d06:	f85d fb04 	ldr.w	pc, [sp], #4

000b7d0a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   b7d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7d0e:	4604      	mov	r4, r0
  if (_spi) {
   b7d10:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   b7d12:	460e      	mov	r6, r1
   b7d14:	4617      	mov	r7, r2
   b7d16:	461d      	mov	r5, r3
  if (_spi) {
   b7d18:	b110      	cbz	r0, b7d20 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   b7d1a:	6861      	ldr	r1, [r4, #4]
   b7d1c:	f002 f9de 	bl	ba0dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   b7d20:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b7d24:	2100      	movs	r1, #0
   b7d26:	b280      	uxth	r0, r0
   b7d28:	f005 fecf 	bl	bdaca <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   b7d2c:	9b06      	ldr	r3, [sp, #24]
   b7d2e:	eb05 0803 	add.w	r8, r5, r3
   b7d32:	4545      	cmp	r5, r8
   b7d34:	d108      	bne.n	b7d48 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   b7d36:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   b7d38:	42b7      	cmp	r7, r6
   b7d3a:	d00b      	beq.n	b7d54 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   b7d3c:	f816 1b01 	ldrb.w	r1, [r6], #1
   b7d40:	4620      	mov	r0, r4
   b7d42:	f7ff ffd5 	bl	b7cf0 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   b7d46:	e7f7      	b.n	b7d38 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   b7d48:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7d4c:	4620      	mov	r0, r4
   b7d4e:	f7ff ffcf 	bl	b7cf0 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   b7d52:	e7ee      	b.n	b7d32 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   b7d54:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b7d58:	2101      	movs	r1, #1
   b7d5a:	b280      	uxth	r0, r0
   b7d5c:	f005 feb5 	bl	bdaca <digitalWrite>

  if (_spi) {
   b7d60:	6820      	ldr	r0, [r4, #0]
   b7d62:	b108      	cbz	r0, b7d68 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   b7d64:	f002 f9a0 	bl	ba0a8 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b7d68:	2001      	movs	r0, #1
   b7d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7d6e <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   b7d6e:	6042      	str	r2, [r0, #4]
  _begun = false;
   b7d70:	2200      	movs	r2, #0
   b7d72:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   b7d74:	2220      	movs	r2, #32
  _addr = addr;
   b7d76:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   b7d78:	60c2      	str	r2, [r0, #12]
#endif
}
   b7d7a:	4770      	bx	lr

000b7d7c <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   b7d7c:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   b7d7e:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   b7d80:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   b7d82:	b153      	cbz	r3, b7d9a <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   b7d84:	7821      	ldrb	r1, [r4, #0]
   b7d86:	6860      	ldr	r0, [r4, #4]
   b7d88:	f005 fd88 	bl	bd89c <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   b7d8c:	6860      	ldr	r0, [r4, #4]
   b7d8e:	f005 fd8d 	bl	bd8ac <_ZN7TwoWire15endTransmissionEv>
   b7d92:	fab0 f080 	clz	r0, r0
   b7d96:	0940      	lsrs	r0, r0, #5
    return true;
  }
  return false;
}
   b7d98:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   b7d9a:	2101      	movs	r1, #1
   b7d9c:	f000 f803 	bl	b7da6 <_ZN18Adafruit_I2CDevice5beginEb>
   b7da0:	2800      	cmp	r0, #0
   b7da2:	d1ef      	bne.n	b7d84 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   b7da4:	e7f8      	b.n	b7d98 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000b7da6 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b7da6:	b538      	push	{r3, r4, r5, lr}
   b7da8:	4604      	mov	r4, r0
  _wire->begin();
   b7daa:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b7dac:	460d      	mov	r5, r1
  _wire->begin();
   b7dae:	f005 fd6f 	bl	bd890 <_ZN7TwoWire5beginEv>
  _begun = true;
   b7db2:	2001      	movs	r0, #1
   b7db4:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   b7db6:	b125      	cbz	r5, b7dc2 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   b7db8:	4620      	mov	r0, r4
}
   b7dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   b7dbe:	f7ff bfdd 	b.w	b7d7c <_ZN18Adafruit_I2CDevice8detectedEv>
}
   b7dc2:	bd38      	pop	{r3, r4, r5, pc}

000b7dc4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   b7dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7dc8:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   b7dcc:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   b7dce:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   b7dd0:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   b7dd2:	4432      	add	r2, r6
   b7dd4:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   b7dd6:	4604      	mov	r4, r0
   b7dd8:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   b7dda:	d902      	bls.n	b7de2 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   b7ddc:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
   b7dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   b7de2:	7801      	ldrb	r1, [r0, #0]
   b7de4:	6840      	ldr	r0, [r0, #4]
   b7de6:	f005 fd59 	bl	bd89c <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b7dea:	b97e      	cbnz	r6, b7e0c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   b7dec:	6860      	ldr	r0, [r4, #4]
   b7dee:	6803      	ldr	r3, [r0, #0]
   b7df0:	462a      	mov	r2, r5
   b7df2:	68db      	ldr	r3, [r3, #12]
   b7df4:	4641      	mov	r1, r8
   b7df6:	4798      	blx	r3
   b7df8:	4285      	cmp	r5, r0
   b7dfa:	d1ef      	bne.n	b7ddc <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   b7dfc:	6860      	ldr	r0, [r4, #4]
   b7dfe:	4639      	mov	r1, r7
   b7e00:	f005 fd50 	bl	bd8a4 <_ZN7TwoWire15endTransmissionEh>
   b7e04:	fab0 f080 	clz	r0, r0
   b7e08:	0940      	lsrs	r0, r0, #5
   b7e0a:	e7e8      	b.n	b7dde <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b7e0c:	f1b9 0f00 	cmp.w	r9, #0
   b7e10:	d0ec      	beq.n	b7dec <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   b7e12:	6860      	ldr	r0, [r4, #4]
   b7e14:	6803      	ldr	r3, [r0, #0]
   b7e16:	4632      	mov	r2, r6
   b7e18:	68db      	ldr	r3, [r3, #12]
   b7e1a:	4649      	mov	r1, r9
   b7e1c:	4798      	blx	r3
   b7e1e:	4286      	cmp	r6, r0
   b7e20:	d1dc      	bne.n	b7ddc <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   b7e22:	e7e3      	b.n	b7dec <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000b7e24 <_ZN18Adafruit_I2CDevice8setSpeedEm>:
 *    underlying Wire support!
 *    @param desiredclk The desired I2C SCL frequency
 *    @return True if this platform supports changing I2C speed.
 *    Not necessarily that the speed was achieved!
 */
bool Adafruit_I2CDevice::setSpeed(uint32_t desiredclk) {
   b7e24:	b508      	push	{r3, lr}

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b7e26:	6840      	ldr	r0, [r0, #4]
   b7e28:	f005 fd2e 	bl	bd888 <_ZN7TwoWire8setSpeedEm>
  _wire->setClock(desiredclk);
  return true;
#else
  return false;
#endif
}
   b7e2c:	2001      	movs	r0, #1
   b7e2e:	bd08      	pop	{r3, pc}

000b7e30 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b7e30:	2904      	cmp	r1, #4
   b7e32:	d804      	bhi.n	b7e3e <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b7e34:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b7e38:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b7e3c:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b7e3e:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b7e40:	bf9b      	ittet	ls
   b7e42:	f101 31ff 	addls.w	r1, r1, #4294967295
   b7e46:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b7e4a:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b7e4c:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b7e4e:	bf84      	itt	hi
   b7e50:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b7e54:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b7e56:	4770      	bx	lr

000b7e58 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b7e58:	b510      	push	{r4, lr}
   b7e5a:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b7e5c:	3024      	adds	r0, #36	; 0x24
   b7e5e:	f000 feed 	bl	b8c3c <_ZN8FatCache4syncEv>
   b7e62:	b128      	cbz	r0, b7e70 <_ZN9FatVolume9cacheSyncEv+0x18>
   b7e64:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b7e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b7e6c:	f000 bee6 	b.w	b8c3c <_ZN8FatCache4syncEv>
  }
   b7e70:	bd10      	pop	{r4, pc}

000b7e72 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b7e72:	1e41      	subs	r1, r0, #1
   b7e74:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b7e78:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b7e7a:	0842      	lsrs	r2, r0, #1
   b7e7c:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b7e80:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7e84:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b7e88:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b7e8a:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b7e8c:	d1f5      	bne.n	b7e7a <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b7e8e:	4770      	bx	lr

000b7e90 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b7e90:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b7e92:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b7e94:	4604      	mov	r4, r0
   b7e96:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b7e98:	b923      	cbnz	r3, b7ea4 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b7e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b7e9e:	6889      	ldr	r1, [r1, #8]
   b7ea0:	f000 bbc7 	b.w	b8632 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b7ea4:	2224      	movs	r2, #36	; 0x24
   b7ea6:	2100      	movs	r1, #0
   b7ea8:	f006 fdb1 	bl	bea0e <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b7eac:	2310      	movs	r3, #16
  m_flags = F_READ;
   b7eae:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b7eb0:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b7eb2:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b7eb4:	68ab      	ldr	r3, [r5, #8]
   b7eb6:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b7eb8:	68eb      	ldr	r3, [r5, #12]
   b7eba:	6223      	str	r3, [r4, #32]
}
   b7ebc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7ec0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b7ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7ec4:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b7ec6:	f810 3b01 	ldrb.w	r3, [r0], #1
   b7eca:	2b20      	cmp	r3, #32
   b7ecc:	d0fa      	beq.n	b7ec4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b7ece:	4d6a      	ldr	r5, [pc, #424]	; (b8078 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b7ed0:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b7ed2:	2400      	movs	r4, #0
    c = path[len];
   b7ed4:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b7ed6:	b1c3      	cbz	r3, b7f0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b7ed8:	2b2f      	cmp	r3, #47	; 0x2f
   b7eda:	d016      	beq.n	b7f0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b7edc:	2b5c      	cmp	r3, #92	; 0x5c
   b7ede:	d102      	bne.n	b7ee6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b7ee0:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b7ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b7ee6:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b7eea:	b2c0      	uxtb	r0, r0
   b7eec:	281d      	cmp	r0, #29
   b7eee:	d803      	bhi.n	b7ef8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b7ef0:	fa25 f000 	lsr.w	r0, r5, r0
   b7ef4:	07c0      	lsls	r0, r0, #31
   b7ef6:	d4f3      	bmi.n	b7ee0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b7ef8:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b7efc:	283c      	cmp	r0, #60	; 0x3c
   b7efe:	d0ef      	beq.n	b7ee0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b7f00:	3b20      	subs	r3, #32
   b7f02:	2b5e      	cmp	r3, #94	; 0x5e
   b7f04:	d8ec      	bhi.n	b7ee0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b7f06:	3401      	adds	r4, #1
    c = path[len];
   b7f08:	e7e4      	b.n	b7ed4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b7f0a:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b7f0c:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b7f0e:	4607      	mov	r7, r0
   b7f10:	f810 5b01 	ldrb.w	r5, [r0], #1
   b7f14:	2d20      	cmp	r5, #32
   b7f16:	d0fa      	beq.n	b7f0e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b7f18:	2d2f      	cmp	r5, #47	; 0x2f
   b7f1a:	d0f8      	beq.n	b7f0e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b7f1c:	6017      	str	r7, [r2, #0]
  while (len) {
   b7f1e:	b14c      	cbz	r4, b7f34 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b7f20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b7f24:	2a2e      	cmp	r2, #46	; 0x2e
   b7f26:	d001      	beq.n	b7f2c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b7f28:	2a20      	cmp	r2, #32
   b7f2a:	d101      	bne.n	b7f30 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b7f2c:	3c01      	subs	r4, #1
  while (len) {
   b7f2e:	e7f6      	b.n	b7f1e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b7f30:	2cff      	cmp	r4, #255	; 0xff
   b7f32:	dcd5      	bgt.n	b7ee0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b7f34:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b7f38:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b7f3c:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b7f3e:	f8c1 300d 	str.w	r3, [r1, #13]
   b7f42:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b7f44:	f04f 0800 	mov.w	r8, #0
   b7f48:	f816 3008 	ldrb.w	r3, [r6, r8]
   b7f4c:	2b2e      	cmp	r3, #46	; 0x2e
   b7f4e:	d001      	beq.n	b7f54 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b7f50:	2b20      	cmp	r3, #32
   b7f52:	d102      	bne.n	b7f5a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b7f54:	f108 0801 	add.w	r8, r8, #1
   b7f58:	e7f6      	b.n	b7f48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b7f5a:	fab8 f088 	clz	r0, r8
   b7f5e:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b7f60:	1e65      	subs	r5, r4, #1
   b7f62:	1c6b      	adds	r3, r5, #1
   b7f64:	d002      	beq.n	b7f6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b7f66:	5d73      	ldrb	r3, [r6, r5]
   b7f68:	2b2e      	cmp	r3, #46	; 0x2e
   b7f6a:	d114      	bne.n	b7f96 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b7f6c:	f04f 0900 	mov.w	r9, #0
   b7f70:	2707      	movs	r7, #7
   b7f72:	464a      	mov	r2, r9
   b7f74:	46ca      	mov	sl, r9
   b7f76:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b7f7a:	45a0      	cmp	r8, r4
   b7f7c:	da68      	bge.n	b8050 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b7f7e:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b7f82:	2b20      	cmp	r3, #32
   b7f84:	d003      	beq.n	b7f8e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b7f86:	2b2e      	cmp	r3, #46	; 0x2e
   b7f88:	d107      	bne.n	b7f9a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b7f8a:	45a8      	cmp	r8, r5
   b7f8c:	d012      	beq.n	b7fb4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b7f8e:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b7f90:	f108 0801 	add.w	r8, r8, #1
   b7f94:	e7f1      	b.n	b7f7a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b7f96:	3d01      	subs	r5, #1
   b7f98:	e7e3      	b.n	b7f62 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b7f9a:	2b22      	cmp	r3, #34	; 0x22
   b7f9c:	d008      	beq.n	b7fb0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b7f9e:	2b7c      	cmp	r3, #124	; 0x7c
   b7fa0:	d006      	beq.n	b7fb0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b7fa2:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b7fa6:	f1bc 0f05 	cmp.w	ip, #5
   b7faa:	d80a      	bhi.n	b7fc2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b7fac:	2b2d      	cmp	r3, #45	; 0x2d
   b7fae:	d012      	beq.n	b7fd6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b7fb0:	45a8      	cmp	r8, r5
   b7fb2:	d15b      	bne.n	b806c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b7fb4:	2f0a      	cmp	r7, #10
   b7fb6:	d04a      	beq.n	b804e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b7fb8:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b7fba:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b7fbc:	f04f 0e10 	mov.w	lr, #16
   b7fc0:	e7e6      	b.n	b7f90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b7fc2:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b7fc6:	f1bc 0f05 	cmp.w	ip, #5
   b7fca:	d9f1      	bls.n	b7fb0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b7fcc:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b7fd0:	f1bc 0f02 	cmp.w	ip, #2
   b7fd4:	d9ec      	bls.n	b7fb0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b7fd6:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b7fda:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b7fde:	d8e7      	bhi.n	b7fb0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b7fe0:	45a8      	cmp	r8, r5
   b7fe2:	d0e7      	beq.n	b7fb4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b7fe4:	42ba      	cmp	r2, r7
   b7fe6:	d830      	bhi.n	b804a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b7fe8:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b7fec:	f1bc 0f19 	cmp.w	ip, #25
   b7ff0:	d81a      	bhi.n	b8028 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b7ff2:	3b20      	subs	r3, #32
        lc |= bit;
   b7ff4:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b7ff8:	b2db      	uxtb	r3, r3
        lc |= bit;
   b7ffa:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b7ffe:	f102 0c01 	add.w	ip, r2, #1
   b8002:	fa5f fc8c 	uxtb.w	ip, ip
   b8006:	440a      	add	r2, r1
      if (i < 7) {
   b8008:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b800c:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b800e:	d801      	bhi.n	b8014 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b8010:	f881 c00c 	strb.w	ip, [r1, #12]
   b8014:	4662      	mov	r2, ip
   b8016:	e7bb      	b.n	b7f90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b8018:	45a8      	cmp	r8, r5
   b801a:	dc18      	bgt.n	b804e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b801c:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b801e:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b8020:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b8022:	f04f 0e10 	mov.w	lr, #16
   b8026:	e7b2      	b.n	b7f8e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b8028:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b802c:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b8030:	bf98      	it	ls
   b8032:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b8036:	e7e2      	b.n	b7ffe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b8038:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b803a:	2001      	movs	r0, #1
   b803c:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b803e:	4419      	add	r1, r3
   b8040:	237e      	movs	r3, #126	; 0x7e
   b8042:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b8044:	2331      	movs	r3, #49	; 0x31
   b8046:	738b      	strb	r3, [r1, #14]
   b8048:	e74b      	b.n	b7ee2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b804a:	2f0a      	cmp	r7, #10
   b804c:	d1e4      	bne.n	b8018 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b804e:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b8050:	7b4b      	ldrb	r3, [r1, #13]
   b8052:	2b20      	cmp	r3, #32
   b8054:	f43f af44 	beq.w	b7ee0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b8058:	2800      	cmp	r0, #0
   b805a:	d0ed      	beq.n	b8038 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b805c:	ea1a 0f09 	tst.w	sl, r9
   b8060:	bf18      	it	ne
   b8062:	f04f 0902 	movne.w	r9, #2
   b8066:	f881 9000 	strb.w	r9, [r1]
   b806a:	e73a      	b.n	b7ee2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b806c:	42ba      	cmp	r2, r7
   b806e:	d8ec      	bhi.n	b804a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b8070:	2000      	movs	r0, #0
      c = '_';
   b8072:	235f      	movs	r3, #95	; 0x5f
   b8074:	e7c3      	b.n	b7ffe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b8076:	bf00      	nop
   b8078:	31000101 	.word	0x31000101

000b807c <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   b807c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8080:	b08a      	sub	sp, #40	; 0x28
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b8082:	2300      	movs	r3, #0
   b8084:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   b8086:	7803      	ldrb	r3, [r0, #0]
   b8088:	0719      	lsls	r1, r3, #28
bool FatFile::remove() {
   b808a:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & F_WRITE)) {
   b808c:	d50a      	bpl.n	b80a4 <_ZN7FatFile6removeEv+0x28>
   b808e:	7883      	ldrb	r3, [r0, #2]
   b8090:	079a      	lsls	r2, r3, #30
   b8092:	d507      	bpl.n	b80a4 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b8094:	6a01      	ldr	r1, [r0, #32]
   b8096:	b939      	cbnz	r1, b80a8 <_ZN7FatFile6removeEv+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b8098:	2101      	movs	r1, #1
   b809a:	4620      	mov	r0, r4
   b809c:	f000 faba 	bl	b8614 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b80a0:	4605      	mov	r5, r0
   b80a2:	b938      	cbnz	r0, b80b4 <_ZN7FatFile6removeEv+0x38>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   b80a4:	2000      	movs	r0, #0
   b80a6:	e048      	b.n	b813a <_ZN7FatFile6removeEv+0xbe>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b80a8:	6880      	ldr	r0, [r0, #8]
   b80aa:	f000 feb8 	bl	b8e1e <_ZN9FatVolume9freeChainEm>
   b80ae:	2800      	cmp	r0, #0
   b80b0:	d1f2      	bne.n	b8098 <_ZN7FatFile6removeEv+0x1c>
   b80b2:	e7f7      	b.n	b80a4 <_ZN7FatFile6removeEv+0x28>
  chksum = lfnChecksum(dir->name);
   b80b4:	f7ff fedd 	bl	b7e72 <_ZN7FatFile11lfnChecksumEPh>
  dir->name[0] = DIR_NAME_DELETED;
   b80b8:	27e5      	movs	r7, #229	; 0xe5
   b80ba:	702f      	strb	r7, [r5, #0]
  m_attr = FILE_ATTR_CLOSED;
   b80bc:	2300      	movs	r3, #0
  chksum = lfnChecksum(dir->name);
   b80be:	4606      	mov	r6, r0
  m_attr = FILE_ATTR_CLOSED;
   b80c0:	7023      	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
   b80c2:	68a0      	ldr	r0, [r4, #8]
   b80c4:	f7ff fec8 	bl	b7e58 <_ZN9FatVolume9cacheSyncEv>
   b80c8:	2800      	cmp	r0, #0
   b80ca:	d0eb      	beq.n	b80a4 <_ZN7FatFile6removeEv+0x28>
  if (!isLFN()) {
   b80cc:	78e3      	ldrb	r3, [r4, #3]
   b80ce:	2b00      	cmp	r3, #0
   b80d0:	d033      	beq.n	b813a <_ZN7FatFile6removeEv+0xbe>
  if (!dirFile.openCluster(this)) {
   b80d2:	4621      	mov	r1, r4
   b80d4:	a801      	add	r0, sp, #4
   b80d6:	f7ff fedb 	bl	b7e90 <_ZN7FatFile11openClusterEPS_>
   b80da:	2800      	cmp	r0, #0
   b80dc:	d0e2      	beq.n	b80a4 <_ZN7FatFile6removeEv+0x28>
   b80de:	2501      	movs	r5, #1
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   b80e0:	78e3      	ldrb	r3, [r4, #3]
   b80e2:	fa5f f885 	uxtb.w	r8, r5
   b80e6:	4543      	cmp	r3, r8
   b80e8:	d3dc      	bcc.n	b80a4 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b80ea:	88a1      	ldrh	r1, [r4, #4]
   b80ec:	1b49      	subs	r1, r1, r5
   b80ee:	0149      	lsls	r1, r1, #5
   b80f0:	a801      	add	r0, sp, #4
   b80f2:	f000 fb84 	bl	b87fe <_ZN7FatFile7seekSetEm>
   b80f6:	2800      	cmp	r0, #0
   b80f8:	d0d4      	beq.n	b80a4 <_ZN7FatFile6removeEv+0x28>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b80fa:	2100      	movs	r1, #0
   b80fc:	a801      	add	r0, sp, #4
   b80fe:	f000 fb5f 	bl	b87c0 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b8102:	2800      	cmp	r0, #0
   b8104:	d0ce      	beq.n	b80a4 <_ZN7FatFile6removeEv+0x28>
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b8106:	7ac3      	ldrb	r3, [r0, #11]
   b8108:	2b0f      	cmp	r3, #15
   b810a:	d1cb      	bne.n	b80a4 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b810c:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b810e:	f002 031f 	and.w	r3, r2, #31
   b8112:	4543      	cmp	r3, r8
   b8114:	d1c6      	bne.n	b80a4 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b8116:	7b43      	ldrb	r3, [r0, #13]
   b8118:	42b3      	cmp	r3, r6
   b811a:	d1c3      	bne.n	b80a4 <_ZN7FatFile6removeEv+0x28>
    ldir->ord = DIR_NAME_DELETED;
   b811c:	7007      	strb	r7, [r0, #0]
    m_vol->cacheDirty();
   b811e:	68a1      	ldr	r1, [r4, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b8120:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   b8124:	f043 0301 	orr.w	r3, r3, #1
   b8128:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   b812c:	0653      	lsls	r3, r2, #25
   b812e:	f105 0501 	add.w	r5, r5, #1
   b8132:	d5d5      	bpl.n	b80e0 <_ZN7FatFile6removeEv+0x64>
      if (!m_vol->cacheSync()) {
   b8134:	68a0      	ldr	r0, [r4, #8]
   b8136:	f7ff fe8f 	bl	b7e58 <_ZN9FatVolume9cacheSyncEv>
}
   b813a:	b00a      	add	sp, #40	; 0x28
   b813c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8140 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b8140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b8144:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b8148:	4606      	mov	r6, r0
   b814a:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b814c:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b814e:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b8150:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b8154:	6861      	ldr	r1, [r4, #4]
   b8156:	68a2      	ldr	r2, [r4, #8]
   b8158:	186b      	adds	r3, r5, r1
   b815a:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b815c:	4411      	add	r1, r2
   b815e:	4291      	cmp	r1, r2
   b8160:	d006      	beq.n	b8170 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b8162:	f812 0b01 	ldrb.w	r0, [r2], #1
   b8166:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b816a:	4043      	eors	r3, r0
   b816c:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b816e:	e7f6      	b.n	b815e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b8170:	f1b9 0f03 	cmp.w	r9, #3
   b8174:	bf28      	it	cs
   b8176:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b817a:	f109 0204 	add.w	r2, r9, #4
   b817e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b8180:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b8184:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b8186:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b8188:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b818a:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b818c:	bf94      	ite	ls
   b818e:	3130      	addls	r1, #48	; 0x30
   b8190:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b8192:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b8194:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b8196:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b819a:	d1f1      	bne.n	b8180 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b819c:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b81a0:	2100      	movs	r1, #0
   b81a2:	735f      	strb	r7, [r3, #13]
   b81a4:	4630      	mov	r0, r6
   b81a6:	f000 fb2a 	bl	b87fe <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b81aa:	2101      	movs	r1, #1
   b81ac:	4630      	mov	r0, r6
   b81ae:	f000 fb07 	bl	b87c0 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b81b2:	4601      	mov	r1, r0
   b81b4:	b928      	cbnz	r0, b81c2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b81b6:	7870      	ldrb	r0, [r6, #1]
   b81b8:	fab0 f080 	clz	r0, r0
   b81bc:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b81be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b81c2:	7803      	ldrb	r3, [r0, #0]
   b81c4:	b16b      	cbz	r3, b81e2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b81c6:	7ac3      	ldrb	r3, [r0, #11]
   b81c8:	071b      	lsls	r3, r3, #28
   b81ca:	d4ee      	bmi.n	b81aa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b81cc:	220b      	movs	r2, #11
   b81ce:	4640      	mov	r0, r8
   b81d0:	f006 fbe5 	bl	be99e <memcmp>
   b81d4:	2800      	cmp	r0, #0
   b81d6:	d1e8      	bne.n	b81aa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b81d8:	3501      	adds	r5, #1
   b81da:	b2ad      	uxth	r5, r5
   b81dc:	2d64      	cmp	r5, #100	; 0x64
   b81de:	d1b9      	bne.n	b8154 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b81e0:	e7ed      	b.n	b81be <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b81e2:	2001      	movs	r0, #1
   b81e4:	e7eb      	b.n	b81be <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b81e8 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b81e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b81ec:	ed2d 8b02 	vpush	{d8}
   b81f0:	b08b      	sub	sp, #44	; 0x2c
   b81f2:	460d      	mov	r5, r1
   b81f4:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b81f6:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b81f8:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b81fa:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b81fe:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b8200:	d105      	bne.n	b820e <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b8202:	2000      	movs	r0, #0
}
   b8204:	b00b      	add	sp, #44	; 0x2c
   b8206:	ecbd 8b02 	vpop	{d8}
   b820a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b820e:	9b07      	ldr	r3, [sp, #28]
   b8210:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b8212:	2b00      	cmp	r3, #0
   b8214:	d1f5      	bne.n	b8202 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b8216:	6853      	ldr	r3, [r2, #4]
   b8218:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b821a:	7813      	ldrb	r3, [r2, #0]
   b821c:	079c      	lsls	r4, r3, #30
   b821e:	bf1f      	itttt	ne
   b8220:	9b05      	ldrne	r3, [sp, #20]
   b8222:	330c      	addne	r3, #12
   b8224:	220d      	movne	r2, #13
   b8226:	fbb3 f3f2 	udivne	r3, r3, r2
   b822a:	bf1a      	itte	ne
   b822c:	3301      	addne	r3, #1
   b822e:	b2db      	uxtbne	r3, r3
   b8230:	2301      	moveq	r3, #1
    seekSet(0);
   b8232:	2100      	movs	r1, #0
   b8234:	4628      	mov	r0, r5
   b8236:	9303      	str	r3, [sp, #12]
   b8238:	f000 fae1 	bl	b87fe <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b823c:	f107 030d 	add.w	r3, r7, #13
  }
   b8240:	f04f 0b00 	mov.w	fp, #0
   b8244:	ee08 3a10 	vmov	s16, r3
   b8248:	46da      	mov	sl, fp
   b824a:	465c      	mov	r4, fp
   b824c:	465e      	mov	r6, fp
   b824e:	f8cd b010 	str.w	fp, [sp, #16]
   b8252:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b8254:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b8256:	2101      	movs	r1, #1
   b8258:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b825a:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b825e:	f000 faaf 	bl	b87c0 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b8262:	4603      	mov	r3, r0
   b8264:	2800      	cmp	r0, #0
   b8266:	d171      	bne.n	b834c <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b8268:	786b      	ldrb	r3, [r5, #1]
   b826a:	2b00      	cmp	r3, #0
   b826c:	d1c9      	bne.n	b8202 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b826e:	9b06      	ldr	r3, [sp, #24]
   b8270:	059a      	lsls	r2, r3, #22
   b8272:	d5c6      	bpl.n	b8202 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b8274:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b8278:	3b01      	subs	r3, #1
   b827a:	2b01      	cmp	r3, #1
   b827c:	d8c1      	bhi.n	b8202 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b827e:	9b04      	ldr	r3, [sp, #16]
   b8280:	2c00      	cmp	r4, #0
   b8282:	bf08      	it	eq
   b8284:	4643      	moveq	r3, r8
   b8286:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b8288:	9b03      	ldr	r3, [sp, #12]
   b828a:	429c      	cmp	r4, r3
   b828c:	f0c0 80f1 	bcc.w	b8472 <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b8290:	f1b9 0f00 	cmp.w	r9, #0
   b8294:	f040 810a 	bne.w	b84ac <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b8298:	9b04      	ldr	r3, [sp, #16]
   b829a:	4628      	mov	r0, r5
   b829c:	0159      	lsls	r1, r3, #5
   b829e:	f000 faae 	bl	b87fe <_ZN7FatFile7seekSetEm>
   b82a2:	2800      	cmp	r0, #0
   b82a4:	d0ad      	beq.n	b8202 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b82a6:	9b03      	ldr	r3, [sp, #12]
   b82a8:	f103 39ff 	add.w	r9, r3, #4294967295
   b82ac:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b82b0:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b82b2:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b82b6:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b82ba:	2e00      	cmp	r6, #0
   b82bc:	f000 810d 	beq.w	b84da <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b82c0:	2100      	movs	r1, #0
   b82c2:	4628      	mov	r0, r5
   b82c4:	f000 fa7c 	bl	b87c0 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b82c8:	4604      	mov	r4, r0
   b82ca:	2800      	cmp	r0, #0
   b82cc:	d099      	beq.n	b8202 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b82ce:	68aa      	ldr	r2, [r5, #8]
   b82d0:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b82d4:	454e      	cmp	r6, r9
   b82d6:	f043 0301 	orr.w	r3, r3, #1
   b82da:	bf0c      	ite	eq
   b82dc:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b82e0:	46b3      	movne	fp, r6
   b82e2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b82e6:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b82ea:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b82ee:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b82f2:	f107 000d 	add.w	r0, r7, #13
   b82f6:	f7ff fdbc 	bl	b7e72 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b82fa:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b82fe:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b8300:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b8304:	f00b 031f 	and.w	r3, fp, #31
   b8308:	220d      	movs	r2, #13
   b830a:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b830c:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b8310:	4353      	muls	r3, r2
   b8312:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b8314:	9905      	ldr	r1, [sp, #20]
   b8316:	4299      	cmp	r1, r3
   b8318:	f240 80d0 	bls.w	b84bc <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b831c:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b8320:	2a04      	cmp	r2, #4
   b8322:	fa5f fe82 	uxtb.w	lr, r2
   b8326:	f102 0001 	add.w	r0, r2, #1
   b832a:	f200 80cd 	bhi.w	b84c8 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b832e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b8332:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b8336:	280d      	cmp	r0, #13
   b8338:	f103 0301 	add.w	r3, r3, #1
   b833c:	4602      	mov	r2, r0
   b833e:	d1e9      	bne.n	b8314 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b8340:	3e01      	subs	r6, #1
   b8342:	b2f6      	uxtb	r6, r6
   b8344:	e7b9      	b.n	b82ba <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b8346:	f04f 0901 	mov.w	r9, #1
   b834a:	e783      	b.n	b8254 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b834c:	7802      	ldrb	r2, [r0, #0]
   b834e:	2ae5      	cmp	r2, #229	; 0xe5
   b8350:	d000      	beq.n	b8354 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b8352:	b97a      	cbnz	r2, b8374 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b8354:	9904      	ldr	r1, [sp, #16]
   b8356:	2c00      	cmp	r4, #0
   b8358:	bf08      	it	eq
   b835a:	4641      	moveq	r1, r8
   b835c:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b835e:	9903      	ldr	r1, [sp, #12]
   b8360:	428c      	cmp	r4, r1
        freeFound++;
   b8362:	bf3c      	itt	cc
   b8364:	3401      	addcc	r4, #1
   b8366:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b8368:	2a00      	cmp	r2, #0
   b836a:	d080      	beq.n	b826e <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b836c:	2ae5      	cmp	r2, #229	; 0xe5
   b836e:	d105      	bne.n	b837c <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b8370:	2600      	movs	r6, #0
   b8372:	e76f      	b.n	b8254 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b8374:	9903      	ldr	r1, [sp, #12]
   b8376:	428c      	cmp	r4, r1
   b8378:	bf38      	it	cc
   b837a:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b837c:	2a2e      	cmp	r2, #46	; 0x2e
   b837e:	d0f7      	beq.n	b8370 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b8380:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b8382:	290f      	cmp	r1, #15
   b8384:	d14a      	bne.n	b841c <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b8386:	bb16      	cbnz	r6, b83ce <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b8388:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b838c:	f43f af62 	beq.w	b8254 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b8390:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b8394:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b8398:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b839a:	220d      	movs	r2, #13
   b839c:	f10a 38ff 	add.w	r8, sl, #4294967295
   b83a0:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b83a4:	9a05      	ldr	r2, [sp, #20]
   b83a6:	4542      	cmp	r2, r8
   b83a8:	d9e2      	bls.n	b8370 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b83aa:	eba2 0208 	sub.w	r2, r2, r8
   b83ae:	9208      	str	r2, [sp, #32]
   b83b0:	2200      	movs	r2, #0
   b83b2:	eb02 0108 	add.w	r1, r2, r8
   b83b6:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b83b8:	4618      	mov	r0, r3
   b83ba:	b2d1      	uxtb	r1, r2
   b83bc:	f7ff fd38 	bl	b7e30 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b83c0:	9908      	ldr	r1, [sp, #32]
   b83c2:	428a      	cmp	r2, r1
   b83c4:	d10d      	bne.n	b83e2 <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b83c6:	2800      	cmp	r0, #0
   b83c8:	bf18      	it	ne
   b83ca:	2600      	movne	r6, #0
   b83cc:	e742      	b.n	b8254 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b83ce:	f10a 3aff 	add.w	sl, sl, #4294967295
   b83d2:	fa5f fa8a 	uxtb.w	sl, sl
   b83d6:	4552      	cmp	r2, sl
   b83d8:	d1ca      	bne.n	b8370 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b83da:	7b5a      	ldrb	r2, [r3, #13]
   b83dc:	455a      	cmp	r2, fp
   b83de:	d0dc      	beq.n	b839a <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b83e0:	e7c6      	b.n	b8370 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b83e2:	28ff      	cmp	r0, #255	; 0xff
   b83e4:	d8c4      	bhi.n	b8370 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b83e6:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b83ea:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b83ee:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b83f0:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b83f2:	bf9c      	itt	ls
   b83f4:	f10e 0020 	addls.w	r0, lr, #32
   b83f8:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b83fc:	4608      	mov	r0, r1
   b83fe:	9909      	ldr	r1, [sp, #36]	; 0x24
   b8400:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b8402:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b8406:	f1bc 0f19 	cmp.w	ip, #25
   b840a:	bf9c      	itt	ls
   b840c:	3120      	addls	r1, #32
   b840e:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b8410:	4571      	cmp	r1, lr
   b8412:	d1ad      	bne.n	b8370 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b8414:	3201      	adds	r2, #1
   b8416:	2a0d      	cmp	r2, #13
   b8418:	d1cb      	bne.n	b83b2 <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b841a:	e71b      	b.n	b8254 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b841c:	0708      	lsls	r0, r1, #28
   b841e:	d4a7      	bmi.n	b8370 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b8420:	b15e      	cbz	r6, b843a <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b8422:	f1ba 0f01 	cmp.w	sl, #1
   b8426:	f47f aeec 	bne.w	b8202 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b842a:	4618      	mov	r0, r3
   b842c:	f7ff fd21 	bl	b7e72 <_ZN7FatFile11lfnChecksumEPh>
   b8430:	4558      	cmp	r0, fp
   b8432:	f47f aee6 	bne.w	b8202 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b8436:	46b1      	mov	r9, r6
   b8438:	e00e      	b.n	b8458 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b843a:	ee18 1a10 	vmov	r1, s16
   b843e:	220b      	movs	r2, #11
   b8440:	4618      	mov	r0, r3
   b8442:	f006 faac 	bl	be99e <memcmp>
   b8446:	2800      	cmp	r0, #0
   b8448:	f47f af04 	bne.w	b8254 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b844c:	f897 9000 	ldrb.w	r9, [r7]
   b8450:	f019 0901 	ands.w	r9, r9, #1
   b8454:	f47f af77 	bne.w	b8346 <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b8458:	9b06      	ldr	r3, [sp, #24]
   b845a:	0519      	lsls	r1, r3, #20
   b845c:	f53f aed1 	bmi.w	b8202 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b8460:	9b06      	ldr	r3, [sp, #24]
   b8462:	9807      	ldr	r0, [sp, #28]
   b8464:	f8cd 9000 	str.w	r9, [sp]
   b8468:	4642      	mov	r2, r8
   b846a:	4629      	mov	r1, r5
   b846c:	f000 fa0a 	bl	b8884 <_ZN7FatFile15openCachedEntryEPS_tih>
   b8470:	e6c8      	b.n	b8204 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b8472:	2100      	movs	r1, #0
   b8474:	4628      	mov	r0, r5
   b8476:	f000 f9a3 	bl	b87c0 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b847a:	b9a0      	cbnz	r0, b84a6 <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b847c:	786b      	ldrb	r3, [r5, #1]
   b847e:	2b00      	cmp	r3, #0
   b8480:	f47f aebf 	bne.w	b8202 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b8484:	4628      	mov	r0, r5
   b8486:	f000 f887 	bl	b8598 <_ZN7FatFile13addDirClusterEv>
   b848a:	2800      	cmp	r0, #0
   b848c:	f43f aeb9 	beq.w	b8202 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b8490:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b8492:	791b      	ldrb	r3, [r3, #4]
   b8494:	2b01      	cmp	r3, #1
   b8496:	f63f aefb 	bhi.w	b8290 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b849a:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b849c:	3410      	adds	r4, #16
   b849e:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b84a0:	42a3      	cmp	r3, r4
   b84a2:	d8ef      	bhi.n	b8484 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b84a4:	e6f4      	b.n	b8290 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b84a6:	3401      	adds	r4, #1
   b84a8:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b84aa:	e6ed      	b.n	b8288 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b84ac:	4639      	mov	r1, r7
   b84ae:	4628      	mov	r0, r5
   b84b0:	f7ff fe46 	bl	b8140 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b84b4:	2800      	cmp	r0, #0
   b84b6:	f47f aeef 	bne.w	b8298 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b84ba:	e6a2      	b.n	b8202 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b84bc:	bf14      	ite	ne
   b84be:	f04f 31ff 	movne.w	r1, #4294967295
   b84c2:	2100      	moveq	r1, #0
   b84c4:	b289      	uxth	r1, r1
   b84c6:	e72b      	b.n	b8320 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b84c8:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b84cc:	bf94      	ite	ls
   b84ce:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b84d2:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b84d6:	8091      	strh	r1, [r2, #4]
   b84d8:	e72d      	b.n	b8336 <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b84da:	4631      	mov	r1, r6
   b84dc:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b84de:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b84e2:	f000 f96d 	bl	b87c0 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b84e6:	4604      	mov	r4, r0
   b84e8:	2800      	cmp	r0, #0
   b84ea:	f43f ae8a 	beq.w	b8202 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b84ee:	2220      	movs	r2, #32
   b84f0:	4631      	mov	r1, r6
   b84f2:	f006 fa8c 	bl	bea0e <memset>
  memcpy(dir->name, fname->sfn, 11);
   b84f6:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b84fa:	6023      	str	r3, [r4, #0]
   b84fc:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b8500:	6063      	str	r3, [r4, #4]
   b8502:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b8506:	8123      	strh	r3, [r4, #8]
   b8508:	7dfb      	ldrb	r3, [r7, #23]
   b850a:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b850c:	783b      	ldrb	r3, [r7, #0]
   b850e:	f003 0318 	and.w	r3, r3, #24
   b8512:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b8514:	4b0f      	ldr	r3, [pc, #60]	; (b8554 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b8516:	681b      	ldr	r3, [r3, #0]
   b8518:	b19b      	cbz	r3, b8542 <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b851a:	f104 010e 	add.w	r1, r4, #14
   b851e:	f104 0010 	add.w	r0, r4, #16
   b8522:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b8524:	8a23      	ldrh	r3, [r4, #16]
   b8526:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b8528:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b852a:	89e3      	ldrh	r3, [r4, #14]
   b852c:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b852e:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b8530:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b8534:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b8538:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b853c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
   b8540:	e78e      	b.n	b8460 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b8542:	2321      	movs	r3, #33	; 0x21
   b8544:	7423      	strb	r3, [r4, #16]
   b8546:	2328      	movs	r3, #40	; 0x28
   b8548:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b854a:	2308      	movs	r3, #8
   b854c:	73a6      	strb	r6, [r4, #14]
   b854e:	73e3      	strb	r3, [r4, #15]
   b8550:	e7e8      	b.n	b8524 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b8552:	bf00      	nop
   b8554:	2003e644 	.word	0x2003e644

000b8558 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b8558:	b538      	push	{r3, r4, r5, lr}
   b855a:	4604      	mov	r4, r0
   b855c:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b855e:	2224      	movs	r2, #36	; 0x24
   b8560:	2100      	movs	r1, #0
   b8562:	f006 fa54 	bl	bea0e <memset>

  m_vol = vol;
   b8566:	60a5      	str	r5, [r4, #8]
    return m_fatType;
   b8568:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b856a:	2b10      	cmp	r3, #16
   b856c:	d003      	beq.n	b8576 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b856e:	2b20      	cmp	r3, #32
   b8570:	d006      	beq.n	b8580 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b8572:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b8574:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b8576:	2320      	movs	r3, #32
  m_flags = F_READ;
   b8578:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b857a:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b857c:	70a0      	strb	r0, [r4, #2]
  return true;
   b857e:	e7f9      	b.n	b8574 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b8580:	2340      	movs	r3, #64	; 0x40
   b8582:	e7f9      	b.n	b8578 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b8584 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b8584:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b8586:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b8588:	f043 0304 	orr.w	r3, r3, #4
   b858c:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b858e:	f100 0210 	add.w	r2, r0, #16
   b8592:	6880      	ldr	r0, [r0, #8]
   b8594:	f000 bc08 	b.w	b8da8 <_ZN9FatVolume15allocateClusterEmPm>

000b8598 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b8598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b859c:	7801      	ldrb	r1, [r0, #0]
   b859e:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b85a2:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b85a4:	d003      	beq.n	b85ae <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b85a6:	2600      	movs	r6, #0
}
   b85a8:	4630      	mov	r0, r6
   b85aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b85ae:	6942      	ldr	r2, [r0, #20]
   b85b0:	4b17      	ldr	r3, [pc, #92]	; (b8610 <_ZN7FatFile13addDirClusterEv+0x78>)
   b85b2:	429a      	cmp	r2, r3
   b85b4:	d2f7      	bcs.n	b85a6 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b85b6:	f7ff ffe5 	bl	b8584 <_ZN7FatFile10addClusterEv>
   b85ba:	4606      	mov	r6, r0
   b85bc:	2800      	cmp	r0, #0
   b85be:	d0f2      	beq.n	b85a6 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b85c0:	6921      	ldr	r1, [r4, #16]
   b85c2:	68a0      	ldr	r0, [r4, #8]
   b85c4:	f000 fb85 	bl	b8cd2 <_ZNK9FatVolume17clusterFirstBlockEm>
   b85c8:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
   b85ca:	68a0      	ldr	r0, [r4, #8]
   b85cc:	2205      	movs	r2, #5
   b85ce:	4639      	mov	r1, r7
   b85d0:	3024      	adds	r0, #36	; 0x24
   b85d2:	f000 fb5b 	bl	b8c8c <_ZN8FatCache4readEmh>
  if (!pc) {
   b85d6:	4680      	mov	r8, r0
   b85d8:	2800      	cmp	r0, #0
   b85da:	d0e4      	beq.n	b85a6 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b85dc:	4629      	mov	r1, r5
   b85de:	f44f 7200 	mov.w	r2, #512	; 0x200
   b85e2:	f006 fa14 	bl	bea0e <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b85e6:	2501      	movs	r5, #1
   b85e8:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b85ea:	791a      	ldrb	r2, [r3, #4]
   b85ec:	42aa      	cmp	r2, r5
   b85ee:	d909      	bls.n	b8604 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b85f0:	6818      	ldr	r0, [r3, #0]
   b85f2:	4642      	mov	r2, r8
   b85f4:	19e9      	adds	r1, r5, r7
   b85f6:	f000 feb6 	bl	b9366 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b85fa:	2800      	cmp	r0, #0
   b85fc:	d0d3      	beq.n	b85a6 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b85fe:	3501      	adds	r5, #1
   b8600:	b2ed      	uxtb	r5, r5
   b8602:	e7f1      	b.n	b85e8 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b8604:	6963      	ldr	r3, [r4, #20]
   b8606:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b860a:	6163      	str	r3, [r4, #20]
  return true;
   b860c:	e7cc      	b.n	b85a8 <_ZN7FatFile13addDirClusterEv+0x10>
   b860e:	bf00      	nop
   b8610:	001ffe00 	.word	0x001ffe00

000b8614 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b8614:	b510      	push	{r4, lr}
   b8616:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b8618:	6880      	ldr	r0, [r0, #8]
   b861a:	460a      	mov	r2, r1
   b861c:	3024      	adds	r0, #36	; 0x24
   b861e:	69a1      	ldr	r1, [r4, #24]
   b8620:	f000 fb34 	bl	b8c8c <_ZN8FatCache4readEmh>
  if (!pc) {
   b8624:	b120      	cbz	r0, b8630 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b8626:	88a3      	ldrh	r3, [r4, #4]
   b8628:	f003 030f 	and.w	r3, r3, #15
   b862c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b8630:	bd10      	pop	{r4, pc}

000b8632 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b8632:	7803      	ldrb	r3, [r0, #0]
   b8634:	b90b      	cbnz	r3, b863a <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b8636:	f7ff bf8f 	b.w	b8558 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b863a:	2000      	movs	r0, #0
   b863c:	4770      	bx	lr

000b863e <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b863e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b8642:	7803      	ldrb	r3, [r0, #0]
   b8644:	4604      	mov	r4, r0
   b8646:	4688      	mov	r8, r1
   b8648:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b864a:	2b00      	cmp	r3, #0
   b864c:	d05d      	beq.n	b870a <_ZN7FatFile4readEPvj+0xcc>
   b864e:	7882      	ldrb	r2, [r0, #2]
   b8650:	07d1      	lsls	r1, r2, #31
   b8652:	d55a      	bpl.n	b870a <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b8654:	071a      	lsls	r2, r3, #28
   b8656:	d52d      	bpl.n	b86b4 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b8658:	69c3      	ldr	r3, [r0, #28]
   b865a:	6942      	ldr	r2, [r0, #20]
   b865c:	1a9b      	subs	r3, r3, r2
   b865e:	429d      	cmp	r5, r3
   b8660:	bf28      	it	cs
   b8662:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b8664:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b8666:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b866a:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b866e:	2e00      	cmp	r6, #0
   b8670:	f000 808f 	beq.w	b8792 <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b8674:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b8676:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b8678:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b867a:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b867c:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b8680:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b8684:	d51f      	bpl.n	b86c6 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b8686:	6a00      	ldr	r0, [r0, #32]
   b8688:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b868a:	68a0      	ldr	r0, [r4, #8]
   b868c:	f1ba 0f00 	cmp.w	sl, #0
   b8690:	d142      	bne.n	b8718 <_ZN7FatFile4readEPvj+0xda>
   b8692:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b8696:	d33f      	bcc.n	b8718 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b8698:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b869a:	4299      	cmp	r1, r3
   b869c:	d03c      	beq.n	b8718 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b869e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b86a2:	d252      	bcs.n	b874a <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b86a4:	6800      	ldr	r0, [r0, #0]
   b86a6:	4642      	mov	r2, r8
   b86a8:	f000 fdd4 	bl	b9254 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b86ac:	b368      	cbz	r0, b870a <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b86ae:	f44f 7700 	mov.w	r7, #512	; 0x200
   b86b2:	e044      	b.n	b873e <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b86b4:	069b      	lsls	r3, r3, #26
   b86b6:	d5d5      	bpl.n	b8664 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b86b8:	6883      	ldr	r3, [r0, #8]
   b86ba:	891a      	ldrh	r2, [r3, #8]
   b86bc:	6943      	ldr	r3, [r0, #20]
   b86be:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b86c2:	b29b      	uxth	r3, r3
   b86c4:	e7cb      	b.n	b865e <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b86c6:	f890 9005 	ldrb.w	r9, [r0, #5]
   b86ca:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b86ce:	f1ba 0f00 	cmp.w	sl, #0
   b86d2:	d108      	bne.n	b86e6 <_ZN7FatFile4readEPvj+0xa8>
   b86d4:	f1b9 0f00 	cmp.w	r9, #0
   b86d8:	d105      	bne.n	b86e6 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b86da:	b95b      	cbnz	r3, b86f4 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b86dc:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b86de:	bf4c      	ite	mi
   b86e0:	6a03      	ldrmi	r3, [r0, #32]
   b86e2:	6a23      	ldrpl	r3, [r4, #32]
   b86e4:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b86e6:	6921      	ldr	r1, [r4, #16]
   b86e8:	68a0      	ldr	r0, [r4, #8]
   b86ea:	f000 faf2 	bl	b8cd2 <_ZNK9FatVolume17clusterFirstBlockEm>
   b86ee:	eb09 0100 	add.w	r1, r9, r0
   b86f2:	e7ca      	b.n	b868a <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b86f4:	6921      	ldr	r1, [r4, #16]
   b86f6:	465a      	mov	r2, fp
   b86f8:	f000 faf1 	bl	b8cde <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b86fc:	2800      	cmp	r0, #0
   b86fe:	db04      	blt.n	b870a <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b8700:	d1f1      	bne.n	b86e6 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b8702:	7823      	ldrb	r3, [r4, #0]
   b8704:	f013 0f70 	tst.w	r3, #112	; 0x70
   b8708:	d143      	bne.n	b8792 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b870a:	7863      	ldrb	r3, [r4, #1]
   b870c:	f043 0302 	orr.w	r3, r3, #2
   b8710:	7063      	strb	r3, [r4, #1]
  return -1;
   b8712:	f04f 30ff 	mov.w	r0, #4294967295
   b8716:	e03d      	b.n	b8794 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b8718:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b871c:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b871e:	f04f 0200 	mov.w	r2, #0
   b8722:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b8726:	bf28      	it	cs
   b8728:	4637      	movcs	r7, r6
   b872a:	f000 faaf 	bl	b8c8c <_ZN8FatCache4readEmh>
      if (!pc) {
   b872e:	2800      	cmp	r0, #0
   b8730:	d0eb      	beq.n	b870a <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b8732:	eb00 010a 	add.w	r1, r0, sl
   b8736:	463a      	mov	r2, r7
   b8738:	4640      	mov	r0, r8
   b873a:	f006 f940 	bl	be9be <memcpy>
    m_curPosition += n;
   b873e:	6963      	ldr	r3, [r4, #20]
   b8740:	443b      	add	r3, r7
    dst += n;
   b8742:	44b8      	add	r8, r7
    m_curPosition += n;
   b8744:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b8746:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b8748:	e791      	b.n	b866e <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b874a:	7822      	ldrb	r2, [r4, #0]
   b874c:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b874e:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b8752:	d406      	bmi.n	b8762 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b8754:	7902      	ldrb	r2, [r0, #4]
   b8756:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b875a:	b2d2      	uxtb	r2, r2
   b875c:	4592      	cmp	sl, r2
   b875e:	bf28      	it	cs
   b8760:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b8762:	4299      	cmp	r1, r3
      n = 512*nb;
   b8764:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b8768:	d208      	bcs.n	b877c <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b876a:	68a0      	ldr	r0, [r4, #8]
   b876c:	4653      	mov	r3, sl
   b876e:	6800      	ldr	r0, [r0, #0]
   b8770:	4642      	mov	r2, r8
   b8772:	f000 fdb7 	bl	b92e4 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b8776:	2800      	cmp	r0, #0
   b8778:	d1e1      	bne.n	b873e <_ZN7FatFile4readEPvj+0x100>
   b877a:	e7c6      	b.n	b870a <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b877c:	4453      	add	r3, sl
   b877e:	428b      	cmp	r3, r1
   b8780:	d9f3      	bls.n	b876a <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b8782:	3024      	adds	r0, #36	; 0x24
   b8784:	9101      	str	r1, [sp, #4]
   b8786:	f000 fa59 	bl	b8c3c <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b878a:	9901      	ldr	r1, [sp, #4]
   b878c:	2800      	cmp	r0, #0
   b878e:	d1ec      	bne.n	b876a <_ZN7FatFile4readEPvj+0x12c>
   b8790:	e7bb      	b.n	b870a <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b8792:	1ba8      	subs	r0, r5, r6
}
   b8794:	b003      	add	sp, #12
   b8796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b879a <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b879a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b879c:	2201      	movs	r2, #1
   b879e:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b87a2:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b87a6:	4604      	mov	r4, r0
   b87a8:	f7ff ff49 	bl	b863e <_ZN7FatFile4readEPvj>
   b87ac:	2801      	cmp	r0, #1
   b87ae:	bf0a      	itet	eq
   b87b0:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b87b4:	f04f 30ff 	movne.w	r0, #4294967295
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b87b8:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b87bc:	b002      	add	sp, #8
   b87be:	bd70      	pop	{r4, r5, r6, pc}

000b87c0 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b87c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b87c2:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b87c4:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b87c8:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b87ca:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b87ce:	d000      	beq.n	b87d2 <_ZN7FatFile12readDirCacheEb+0x12>
   b87d0:	b999      	cbnz	r1, b87fa <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b87d2:	2201      	movs	r2, #1
   b87d4:	f10d 0107 	add.w	r1, sp, #7
   b87d8:	4620      	mov	r0, r4
   b87da:	f7ff ff30 	bl	b863e <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b87de:	b240      	sxtb	r0, r0
   b87e0:	2801      	cmp	r0, #1
   b87e2:	d002      	beq.n	b87ea <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b87e4:	2000      	movs	r0, #0
}
   b87e6:	b003      	add	sp, #12
   b87e8:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b87ea:	6963      	ldr	r3, [r4, #20]
   b87ec:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b87ee:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b87f0:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b87f2:	3030      	adds	r0, #48	; 0x30
   b87f4:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b87f8:	e7f5      	b.n	b87e6 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b87fa:	3320      	adds	r3, #32
   b87fc:	e7f7      	b.n	b87ee <_ZN7FatFile12readDirCacheEb+0x2e>

000b87fe <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b87fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b8802:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b8804:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b8806:	4604      	mov	r4, r0
   b8808:	460d      	mov	r5, r1
  if (!isOpen()) {
   b880a:	b162      	cbz	r2, b8826 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b880c:	6940      	ldr	r0, [r0, #20]
   b880e:	4288      	cmp	r0, r1
   b8810:	d002      	beq.n	b8818 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b8812:	b919      	cbnz	r1, b881c <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b8814:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b8816:	6165      	str	r5, [r4, #20]
    return true;
   b8818:	2001      	movs	r0, #1
   b881a:	e006      	b.n	b882a <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b881c:	0716      	lsls	r6, r2, #28
   b881e:	d506      	bpl.n	b882e <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b8820:	69e3      	ldr	r3, [r4, #28]
   b8822:	428b      	cmp	r3, r1
   b8824:	d20b      	bcs.n	b883e <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b8826:	6127      	str	r7, [r4, #16]
  return false;
   b8828:	2000      	movs	r0, #0
}
   b882a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b882e:	0691      	lsls	r1, r2, #26
   b8830:	d505      	bpl.n	b883e <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b8832:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b8834:	891b      	ldrh	r3, [r3, #8]
   b8836:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b883a:	d9ec      	bls.n	b8816 <_ZN7FatFile7seekSetEm+0x18>
   b883c:	e7f3      	b.n	b8826 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b883e:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b8842:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b8846:	1e43      	subs	r3, r0, #1
   b8848:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b884c:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b884e:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b8850:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b8852:	42b3      	cmp	r3, r6
   b8854:	d800      	bhi.n	b8858 <_ZN7FatFile7seekSetEm+0x5a>
   b8856:	b998      	cbnz	r0, b8880 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b8858:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b885a:	bf4c      	ite	mi
   b885c:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b8860:	6a23      	ldrpl	r3, [r4, #32]
   b8862:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b8864:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b8868:	2e00      	cmp	r6, #0
   b886a:	d0d4      	beq.n	b8816 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b886c:	6921      	ldr	r1, [r4, #16]
   b886e:	68a0      	ldr	r0, [r4, #8]
   b8870:	4642      	mov	r2, r8
   b8872:	f000 fa34 	bl	b8cde <_ZN9FatVolume6fatGetEmPm>
   b8876:	2800      	cmp	r0, #0
   b8878:	f106 36ff 	add.w	r6, r6, #4294967295
   b887c:	dcf4      	bgt.n	b8868 <_ZN7FatFile7seekSetEm+0x6a>
   b887e:	e7d2      	b.n	b8826 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b8880:	1af6      	subs	r6, r6, r3
   b8882:	e7ef      	b.n	b8864 <_ZN7FatFile7seekSetEm+0x66>

000b8884 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b8884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8886:	460f      	mov	r7, r1
   b8888:	4604      	mov	r4, r0
   b888a:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b888c:	2100      	movs	r1, #0
   b888e:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b8890:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b8892:	f006 f8bc 	bl	bea0e <memset>
  m_vol = dirFile->m_vol;
   b8896:	68b8      	ldr	r0, [r7, #8]
   b8898:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b889a:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b889c:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b88a0:	6a3b      	ldr	r3, [r7, #32]
   b88a2:	60e3      	str	r3, [r4, #12]
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b88a4:	016a      	lsls	r2, r5, #5
   b88a6:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b88aa:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b88ae:	071f      	lsls	r7, r3, #28
   b88b0:	d444      	bmi.n	b893c <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b88b2:	f003 0317 	and.w	r3, r3, #23
   b88b6:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b88b8:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b88bc:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b88c0:	bf04      	itt	eq
   b88c2:	f043 0308 	orreq.w	r3, r3, #8
   b88c6:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b88c8:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b88cc:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b88ce:	f006 0303 	and.w	r3, r6, #3
   b88d2:	2b01      	cmp	r3, #1
   b88d4:	d02c      	beq.n	b8930 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b88d6:	2b02      	cmp	r3, #2
   b88d8:	d028      	beq.n	b892c <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b88da:	bb7b      	cbnz	r3, b893c <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b88dc:	0571      	lsls	r1, r6, #21
   b88de:	d42d      	bmi.n	b893c <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b88e0:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b88e2:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b88e4:	78a1      	ldrb	r1, [r4, #2]
   b88e6:	078b      	lsls	r3, r1, #30
   b88e8:	d504      	bpl.n	b88f4 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b88ea:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b88ec:	06df      	lsls	r7, r3, #27
   b88ee:	d425      	bmi.n	b893c <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b88f0:	07dd      	lsls	r5, r3, #31
   b88f2:	d423      	bmi.n	b893c <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b88f4:	11b3      	asrs	r3, r6, #6
   b88f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b88fa:	f006 0508 	and.w	r5, r6, #8
   b88fe:	432b      	orrs	r3, r5
   b8900:	430b      	orrs	r3, r1
   b8902:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b8904:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b8906:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b8908:	1883      	adds	r3, r0, r2
   b890a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b890e:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b8912:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b8916:	0572      	lsls	r2, r6, #21
   b8918:	d513      	bpl.n	b8942 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b891a:	b959      	cbnz	r1, b8934 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b891c:	78a3      	ldrb	r3, [r4, #2]
   b891e:	f043 0304 	orr.w	r3, r3, #4
   b8922:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b8924:	0473      	lsls	r3, r6, #17
   b8926:	d410      	bmi.n	b894a <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b8928:	2001      	movs	r0, #1
}
   b892a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b892c:	2303      	movs	r3, #3
   b892e:	e7d8      	b.n	b88e2 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b8930:	2302      	movs	r3, #2
   b8932:	e7d6      	b.n	b88e2 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b8934:	f000 fa73 	bl	b8e1e <_ZN9FatVolume9freeChainEm>
   b8938:	2800      	cmp	r0, #0
   b893a:	d1ef      	bne.n	b891c <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b893c:	2000      	movs	r0, #0
   b893e:	7020      	strb	r0, [r4, #0]
  return false;
   b8940:	e7f3      	b.n	b892a <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b8942:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b8944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8946:	61e3      	str	r3, [r4, #28]
   b8948:	e7ec      	b.n	b8924 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b894a:	69e1      	ldr	r1, [r4, #28]
   b894c:	4620      	mov	r0, r4
   b894e:	f7ff ff56 	bl	b87fe <_ZN7FatFile7seekSetEm>
   b8952:	2800      	cmp	r0, #0
   b8954:	d1e8      	bne.n	b8928 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b8956:	e7f1      	b.n	b893c <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b8958 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b8958:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b895a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b895c:	4604      	mov	r4, r0
  if (!isOpen()) {
   b895e:	b90b      	cbnz	r3, b8964 <_ZN7FatFile4syncEv+0xc>
    return true;
   b8960:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b8962:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b8964:	7883      	ldrb	r3, [r0, #2]
   b8966:	075a      	lsls	r2, r3, #29
   b8968:	d523      	bpl.n	b89b2 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b896a:	2101      	movs	r1, #1
   b896c:	f7ff fe52 	bl	b8614 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b8970:	4605      	mov	r5, r0
   b8972:	b928      	cbnz	r0, b8980 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b8974:	7863      	ldrb	r3, [r4, #1]
   b8976:	f043 0301 	orr.w	r3, r3, #1
   b897a:	7063      	strb	r3, [r4, #1]
  return false;
   b897c:	2000      	movs	r0, #0
   b897e:	e7f0      	b.n	b8962 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b8980:	7803      	ldrb	r3, [r0, #0]
   b8982:	2be5      	cmp	r3, #229	; 0xe5
   b8984:	d0f6      	beq.n	b8974 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b8986:	7823      	ldrb	r3, [r4, #0]
   b8988:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b898a:	bf44      	itt	mi
   b898c:	69e3      	ldrmi	r3, [r4, #28]
   b898e:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b8990:	6a23      	ldr	r3, [r4, #32]
   b8992:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b8994:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b8996:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b8998:	4b09      	ldr	r3, [pc, #36]	; (b89c0 <_ZN7FatFile4syncEv+0x68>)
   b899a:	681b      	ldr	r3, [r3, #0]
   b899c:	b12b      	cbz	r3, b89aa <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b899e:	f100 0116 	add.w	r1, r0, #22
   b89a2:	3018      	adds	r0, #24
   b89a4:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b89a6:	8b2b      	ldrh	r3, [r5, #24]
   b89a8:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b89aa:	78a3      	ldrb	r3, [r4, #2]
   b89ac:	f023 0304 	bic.w	r3, r3, #4
   b89b0:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b89b2:	68a0      	ldr	r0, [r4, #8]
   b89b4:	f7ff fa50 	bl	b7e58 <_ZN9FatVolume9cacheSyncEv>
   b89b8:	2800      	cmp	r0, #0
   b89ba:	d0db      	beq.n	b8974 <_ZN7FatFile4syncEv+0x1c>
   b89bc:	e7d0      	b.n	b8960 <_ZN7FatFile4syncEv+0x8>
   b89be:	bf00      	nop
   b89c0:	2003e644 	.word	0x2003e644

000b89c4 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b89c4:	b510      	push	{r4, lr}
   b89c6:	4604      	mov	r4, r0
  bool rtn = sync();
   b89c8:	f7ff ffc6 	bl	b8958 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b89cc:	2300      	movs	r3, #0
   b89ce:	7023      	strb	r3, [r4, #0]
}
   b89d0:	bd10      	pop	{r4, pc}

000b89d2 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b89d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   b89d4:	b093      	sub	sp, #76	; 0x4c
   b89d6:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b89d8:	2300      	movs	r3, #0
   b89da:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b89dc:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b89de:	9201      	str	r2, [sp, #4]
   b89e0:	4606      	mov	r6, r0
   b89e2:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b89e4:	b113      	cbz	r3, b89ec <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b89e6:	2000      	movs	r0, #0
}
   b89e8:	b013      	add	sp, #76	; 0x4c
   b89ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b89ec:	780b      	ldrb	r3, [r1, #0]
   b89ee:	f013 0f70 	tst.w	r3, #112	; 0x70
   b89f2:	d0f8      	beq.n	b89e6 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b89f4:	7813      	ldrb	r3, [r2, #0]
   b89f6:	2b2f      	cmp	r3, #47	; 0x2f
   b89f8:	d112      	bne.n	b8a20 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b89fa:	9a01      	ldr	r2, [sp, #4]
   b89fc:	7813      	ldrb	r3, [r2, #0]
   b89fe:	2b2f      	cmp	r3, #47	; 0x2f
   b8a00:	d102      	bne.n	b8a08 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b8a02:	3201      	adds	r2, #1
   b8a04:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b8a06:	e7f8      	b.n	b89fa <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b8a08:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b8a0a:	b91b      	cbnz	r3, b8a14 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b8a0c:	4630      	mov	r0, r6
   b8a0e:	f7ff fe10 	bl	b8632 <_ZN7FatFile8openRootEP9FatVolume>
   b8a12:	e7e9      	b.n	b89e8 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b8a14:	a809      	add	r0, sp, #36	; 0x24
   b8a16:	f7ff fd9f 	bl	b8558 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b8a1a:	2800      	cmp	r0, #0
   b8a1c:	d0e3      	beq.n	b89e6 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b8a1e:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b8a20:	9801      	ldr	r0, [sp, #4]
   b8a22:	aa01      	add	r2, sp, #4
   b8a24:	a903      	add	r1, sp, #12
   b8a26:	f7ff fa4b 	bl	b7ec0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b8a2a:	2800      	cmp	r0, #0
   b8a2c:	d0db      	beq.n	b89e6 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b8a2e:	9b01      	ldr	r3, [sp, #4]
   b8a30:	781b      	ldrb	r3, [r3, #0]
   b8a32:	b19b      	cbz	r3, b8a5c <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b8a34:	2300      	movs	r3, #0
   b8a36:	aa03      	add	r2, sp, #12
   b8a38:	4621      	mov	r1, r4
   b8a3a:	4630      	mov	r0, r6
   b8a3c:	f7ff fbd4 	bl	b81e8 <_ZN7FatFile4openEPS_P7fname_ti>
   b8a40:	2800      	cmp	r0, #0
   b8a42:	d0d0      	beq.n	b89e6 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b8a44:	4635      	mov	r5, r6
   b8a46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8a48:	ac09      	add	r4, sp, #36	; 0x24
   b8a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8a50:	682b      	ldr	r3, [r5, #0]
   b8a52:	6023      	str	r3, [r4, #0]
    close();
   b8a54:	4630      	mov	r0, r6
   b8a56:	f7ff ffb5 	bl	b89c4 <_ZN7FatFile5closeEv>
  while (1) {
   b8a5a:	e7e0      	b.n	b8a1e <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b8a5c:	463b      	mov	r3, r7
   b8a5e:	aa03      	add	r2, sp, #12
   b8a60:	4621      	mov	r1, r4
   b8a62:	4630      	mov	r0, r6
   b8a64:	f7ff fbc0 	bl	b81e8 <_ZN7FatFile4openEPS_P7fname_ti>
   b8a68:	e7be      	b.n	b89e8 <_ZN7FatFile4openEPS_PKci+0x16>

000b8a6a <_ZN7FatFile6removeEPS_PKc>:
bool FatFile::remove(FatFile* dirFile, const char* path) {
   b8a6a:	b500      	push	{lr}
   b8a6c:	b08b      	sub	sp, #44	; 0x2c
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b8a6e:	2300      	movs	r3, #0
   b8a70:	460a      	mov	r2, r1
   b8a72:	9301      	str	r3, [sp, #4]
  if (!file.open(dirFile, path, O_WRONLY)) {
   b8a74:	4601      	mov	r1, r0
   b8a76:	2301      	movs	r3, #1
   b8a78:	a801      	add	r0, sp, #4
   b8a7a:	f7ff ffaa 	bl	b89d2 <_ZN7FatFile4openEPS_PKci>
   b8a7e:	b110      	cbz	r0, b8a86 <_ZN7FatFile6removeEPS_PKc+0x1c>
  return file.remove();
   b8a80:	a801      	add	r0, sp, #4
   b8a82:	f7ff fafb 	bl	b807c <_ZN7FatFile6removeEv>
}
   b8a86:	b00b      	add	sp, #44	; 0x2c
   b8a88:	f85d fb04 	ldr.w	pc, [sp], #4

000b8a8c <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b8a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b8a90:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b8a92:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b8a94:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b8a96:	4604      	mov	r4, r0
   b8a98:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b8a9a:	d55b      	bpl.n	b8b54 <_ZN7FatFile5writeEPKvj+0xc8>
   b8a9c:	7883      	ldrb	r3, [r0, #2]
   b8a9e:	079a      	lsls	r2, r3, #30
   b8aa0:	d558      	bpl.n	b8b54 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b8aa2:	071b      	lsls	r3, r3, #28
   b8aa4:	d451      	bmi.n	b8b4a <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b8aa6:	6963      	ldr	r3, [r4, #20]
   b8aa8:	43db      	mvns	r3, r3
   b8aaa:	42bb      	cmp	r3, r7
   b8aac:	d352      	bcc.n	b8b54 <_ZN7FatFile5writeEPKvj+0xc8>
   b8aae:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b8ab0:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b8ab4:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b8ab6:	f1b8 0f00 	cmp.w	r8, #0
   b8aba:	f000 8091 	beq.w	b8be0 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b8abe:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b8ac0:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b8ac2:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b8ac6:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b8aca:	d10e      	bne.n	b8aea <_ZN7FatFile5writeEPKvj+0x5e>
   b8acc:	b96d      	cbnz	r5, b8aea <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b8ace:	6921      	ldr	r1, [r4, #16]
   b8ad0:	2900      	cmp	r1, #0
   b8ad2:	d046      	beq.n	b8b62 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b8ad4:	4652      	mov	r2, sl
   b8ad6:	f000 f902 	bl	b8cde <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b8ada:	2800      	cmp	r0, #0
   b8adc:	db3a      	blt.n	b8b54 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b8ade:	d104      	bne.n	b8aea <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b8ae0:	4620      	mov	r0, r4
   b8ae2:	f7ff fd4f 	bl	b8584 <_ZN7FatFile10addClusterEv>
   b8ae6:	2800      	cmp	r0, #0
   b8ae8:	d034      	beq.n	b8b54 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b8aea:	6921      	ldr	r1, [r4, #16]
   b8aec:	68a0      	ldr	r0, [r4, #8]
   b8aee:	f000 f8f0 	bl	b8cd2 <_ZNK9FatVolume17clusterFirstBlockEm>
   b8af2:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b8af4:	68a0      	ldr	r0, [r4, #8]
   b8af6:	b915      	cbnz	r5, b8afe <_ZN7FatFile5writeEPKvj+0x72>
   b8af8:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b8afc:	d23f      	bcs.n	b8b7e <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b8afe:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b8b02:	4546      	cmp	r6, r8
   b8b04:	bf28      	it	cs
   b8b06:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b8b08:	2d00      	cmp	r5, #0
   b8b0a:	d136      	bne.n	b8b7a <_ZN7FatFile5writeEPKvj+0xee>
   b8b0c:	6962      	ldr	r2, [r4, #20]
   b8b0e:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b8b10:	429a      	cmp	r2, r3
   b8b12:	bf34      	ite	cc
   b8b14:	2201      	movcc	r2, #1
   b8b16:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b8b18:	3024      	adds	r0, #36	; 0x24
   b8b1a:	f000 f8b7 	bl	b8c8c <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b8b1e:	b1c8      	cbz	r0, b8b54 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b8b20:	4428      	add	r0, r5
   b8b22:	4632      	mov	r2, r6
   b8b24:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b8b26:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b8b28:	f005 ff49 	bl	be9be <memcpy>
      if (512 == (n + blockOffset)) {
   b8b2c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b8b30:	d104      	bne.n	b8b3c <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b8b32:	68a0      	ldr	r0, [r4, #8]
   b8b34:	3024      	adds	r0, #36	; 0x24
   b8b36:	f000 f881 	bl	b8c3c <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b8b3a:	b158      	cbz	r0, b8b54 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b8b3c:	6963      	ldr	r3, [r4, #20]
   b8b3e:	4433      	add	r3, r6
   b8b40:	6163      	str	r3, [r4, #20]
    src += n;
   b8b42:	44b1      	add	r9, r6
    nToWrite -= n;
   b8b44:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b8b48:	e7b4      	b.n	b8ab4 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b8b4a:	69c1      	ldr	r1, [r0, #28]
   b8b4c:	f7ff fe57 	bl	b87fe <_ZN7FatFile7seekSetEm>
   b8b50:	2800      	cmp	r0, #0
   b8b52:	d1a8      	bne.n	b8aa6 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b8b54:	7863      	ldrb	r3, [r4, #1]
   b8b56:	f043 0301 	orr.w	r3, r3, #1
   b8b5a:	7063      	strb	r3, [r4, #1]
  return -1;
   b8b5c:	f04f 30ff 	mov.w	r0, #4294967295
   b8b60:	e050      	b.n	b8c04 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b8b62:	6a23      	ldr	r3, [r4, #32]
   b8b64:	b93b      	cbnz	r3, b8b76 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b8b66:	4620      	mov	r0, r4
   b8b68:	f7ff fd0c 	bl	b8584 <_ZN7FatFile10addClusterEv>
   b8b6c:	2800      	cmp	r0, #0
   b8b6e:	d0f1      	beq.n	b8b54 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b8b70:	6923      	ldr	r3, [r4, #16]
   b8b72:	6223      	str	r3, [r4, #32]
   b8b74:	e7b9      	b.n	b8aea <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b8b76:	6123      	str	r3, [r4, #16]
   b8b78:	e7b7      	b.n	b8aea <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b8b7a:	2201      	movs	r2, #1
   b8b7c:	e7cc      	b.n	b8b18 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b8b7e:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b8b82:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b8b84:	d31b      	bcc.n	b8bbe <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b8b86:	f890 c004 	ldrb.w	ip, [r0, #4]
   b8b8a:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b8b8e:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b8b90:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b8b94:	4573      	cmp	r3, lr
   b8b96:	bf28      	it	cs
   b8b98:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b8b9a:	4291      	cmp	r1, r2
      n = 512*nb;
   b8b9c:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b8ba0:	d307      	bcc.n	b8bb2 <_ZN7FatFile5writeEPKvj+0x126>
   b8ba2:	441a      	add	r2, r3
   b8ba4:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b8ba6:	bf82      	ittt	hi
   b8ba8:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
   b8bac:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b8bb0:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b8bb2:	68a5      	ldr	r5, [r4, #8]
   b8bb4:	464a      	mov	r2, r9
   b8bb6:	6828      	ldr	r0, [r5, #0]
   b8bb8:	f000 fc4b 	bl	b9452 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b8bbc:	e7bd      	b.n	b8b3a <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b8bbe:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b8bc0:	bf02      	ittt	eq
   b8bc2:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
   b8bc6:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b8bca:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b8bcc:	68a3      	ldr	r3, [r4, #8]
   b8bce:	464a      	mov	r2, r9
   b8bd0:	6818      	ldr	r0, [r3, #0]
   b8bd2:	f000 fbc8 	bl	b9366 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b8bd6:	2800      	cmp	r0, #0
   b8bd8:	d0bc      	beq.n	b8b54 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b8bda:	f44f 7600 	mov.w	r6, #512	; 0x200
   b8bde:	e7ad      	b.n	b8b3c <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b8be0:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b8be2:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b8be4:	42b2      	cmp	r2, r6
   b8be6:	d204      	bcs.n	b8bf2 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b8be8:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b8bea:	f043 0304 	orr.w	r3, r3, #4
   b8bee:	70a3      	strb	r3, [r4, #2]
   b8bf0:	e003      	b.n	b8bfa <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b8bf2:	4a08      	ldr	r2, [pc, #32]	; (b8c14 <_ZN7FatFile5writeEPKvj+0x188>)
   b8bf4:	6812      	ldr	r2, [r2, #0]
   b8bf6:	2a00      	cmp	r2, #0
   b8bf8:	d1f7      	bne.n	b8bea <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b8bfa:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b8bfe:	2b00      	cmp	r3, #0
   b8c00:	db02      	blt.n	b8c08 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b8c02:	4638      	mov	r0, r7
}
   b8c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b8c08:	4620      	mov	r0, r4
   b8c0a:	f7ff fea5 	bl	b8958 <_ZN7FatFile4syncEv>
   b8c0e:	2800      	cmp	r0, #0
   b8c10:	d1f7      	bne.n	b8c02 <_ZN7FatFile5writeEPKvj+0x176>
   b8c12:	e79f      	b.n	b8b54 <_ZN7FatFile5writeEPKvj+0xc8>
   b8c14:	2003e644 	.word	0x2003e644

000b8c18 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b8c18:	b513      	push	{r0, r1, r4, lr}
   b8c1a:	4604      	mov	r4, r0
    }
   b8c1c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b8c1e:	b159      	cbz	r1, b8c38 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b8c20:	9101      	str	r1, [sp, #4]
   b8c22:	f005 ffa8 	bl	beb76 <strlen>
   b8c26:	6823      	ldr	r3, [r4, #0]
   b8c28:	9901      	ldr	r1, [sp, #4]
   b8c2a:	68db      	ldr	r3, [r3, #12]
   b8c2c:	4602      	mov	r2, r0
   b8c2e:	4620      	mov	r0, r4
    }
   b8c30:	b002      	add	sp, #8
   b8c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8c36:	4718      	bx	r3
    }
   b8c38:	b002      	add	sp, #8
   b8c3a:	bd10      	pop	{r4, pc}

000b8c3c <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b8c3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b8c3e:	7803      	ldrb	r3, [r0, #0]
   b8c40:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b8c42:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b8c44:	d520      	bpl.n	b8c88 <_ZN8FatCache4syncEv+0x4c>
   b8c46:	6843      	ldr	r3, [r0, #4]
   b8c48:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b8c4a:	f100 020c 	add.w	r2, r0, #12
   b8c4e:	6818      	ldr	r0, [r3, #0]
   b8c50:	9201      	str	r2, [sp, #4]
   b8c52:	f000 fb88 	bl	b9366 <_ZN9SdSpiCard10writeBlockEmPKh>
   b8c56:	9a01      	ldr	r2, [sp, #4]
   b8c58:	4605      	mov	r5, r0
   b8c5a:	b918      	cbnz	r0, b8c64 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b8c5c:	2500      	movs	r5, #0
}
   b8c5e:	4628      	mov	r0, r5
   b8c60:	b003      	add	sp, #12
   b8c62:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b8c64:	7823      	ldrb	r3, [r4, #0]
   b8c66:	079b      	lsls	r3, r3, #30
   b8c68:	d404      	bmi.n	b8c74 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b8c6a:	7823      	ldrb	r3, [r4, #0]
   b8c6c:	f023 0301 	bic.w	r3, r3, #1
   b8c70:	7023      	strb	r3, [r4, #0]
   b8c72:	e7f4      	b.n	b8c5e <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b8c74:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b8c78:	6919      	ldr	r1, [r3, #16]
   b8c7a:	4401      	add	r1, r0
   b8c7c:	6818      	ldr	r0, [r3, #0]
   b8c7e:	f000 fb72 	bl	b9366 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b8c82:	2800      	cmp	r0, #0
   b8c84:	d1f1      	bne.n	b8c6a <_ZN8FatCache4syncEv+0x2e>
   b8c86:	e7e9      	b.n	b8c5c <_ZN8FatCache4syncEv+0x20>
  return true;
   b8c88:	2501      	movs	r5, #1
   b8c8a:	e7e8      	b.n	b8c5e <_ZN8FatCache4syncEv+0x22>

000b8c8c <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b8c8c:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b8c8e:	6883      	ldr	r3, [r0, #8]
   b8c90:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b8c92:	4604      	mov	r4, r0
   b8c94:	460e      	mov	r6, r1
   b8c96:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b8c98:	d009      	beq.n	b8cae <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b8c9a:	f7ff ffcf 	bl	b8c3c <_ZN8FatCache4syncEv>
   b8c9e:	b908      	cbnz	r0, b8ca4 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b8ca0:	2000      	movs	r0, #0
}
   b8ca2:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b8ca4:	076b      	lsls	r3, r5, #29
   b8ca6:	d50a      	bpl.n	b8cbe <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b8ca8:	2300      	movs	r3, #0
   b8caa:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b8cac:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b8cae:	7822      	ldrb	r2, [r4, #0]
   b8cb0:	f005 0503 	and.w	r5, r5, #3
   b8cb4:	4620      	mov	r0, r4
   b8cb6:	4315      	orrs	r5, r2
   b8cb8:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b8cbc:	e7f1      	b.n	b8ca2 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b8cbe:	6863      	ldr	r3, [r4, #4]
   b8cc0:	f104 020c 	add.w	r2, r4, #12
   b8cc4:	6818      	ldr	r0, [r3, #0]
   b8cc6:	4631      	mov	r1, r6
   b8cc8:	f000 fac4 	bl	b9254 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b8ccc:	2800      	cmp	r0, #0
   b8cce:	d1eb      	bne.n	b8ca8 <_ZN8FatCache4readEmh+0x1c>
   b8cd0:	e7e6      	b.n	b8ca0 <_ZN8FatCache4readEmh+0x14>

000b8cd2 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b8cd2:	7983      	ldrb	r3, [r0, #6]
   b8cd4:	6940      	ldr	r0, [r0, #20]
   b8cd6:	3902      	subs	r1, #2
   b8cd8:	4099      	lsls	r1, r3
}
   b8cda:	4408      	add	r0, r1
   b8cdc:	4770      	bx	lr

000b8cde <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b8cde:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b8ce0:	b570      	push	{r4, r5, r6, lr}
   b8ce2:	4605      	mov	r5, r0
   b8ce4:	460c      	mov	r4, r1
   b8ce6:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b8ce8:	d802      	bhi.n	b8cf0 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b8cea:	f04f 30ff 	mov.w	r0, #4294967295
}
   b8cee:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b8cf0:	69c3      	ldr	r3, [r0, #28]
   b8cf2:	428b      	cmp	r3, r1
   b8cf4:	d3f9      	bcc.n	b8cea <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b8cf6:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b8cf8:	2b20      	cmp	r3, #32
   b8cfa:	d116      	bne.n	b8d2a <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b8cfc:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b8cfe:	2202      	movs	r2, #2
   b8d00:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b8d04:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b8d08:	f7ff ffc0 	bl	b8c8c <_ZN8FatCache4readEmh>
    if (!pc) {
   b8d0c:	2800      	cmp	r0, #0
   b8d0e:	d0ec      	beq.n	b8cea <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b8d10:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b8d14:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b8d18:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b8d1c:	69ea      	ldr	r2, [r5, #28]
   b8d1e:	429a      	cmp	r2, r3
  *value = next;
   b8d20:	bf26      	itte	cs
   b8d22:	6033      	strcs	r3, [r6, #0]
  return 1;
   b8d24:	2001      	movcs	r0, #1
    return 0;
   b8d26:	2000      	movcc	r0, #0
   b8d28:	e7e1      	b.n	b8cee <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b8d2a:	2b10      	cmp	r3, #16
   b8d2c:	d1dd      	bne.n	b8cea <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b8d2e:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b8d32:	6981      	ldr	r1, [r0, #24]
   b8d34:	2202      	movs	r2, #2
   b8d36:	4419      	add	r1, r3
   b8d38:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b8d3c:	f7ff ffa6 	bl	b8c8c <_ZN8FatCache4readEmh>
    if (!pc) {
   b8d40:	2800      	cmp	r0, #0
   b8d42:	d0d2      	beq.n	b8cea <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b8d44:	b2e4      	uxtb	r4, r4
   b8d46:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b8d4a:	e7e7      	b.n	b8d1c <_ZN9FatVolume6fatGetEmPm+0x3e>

000b8d4c <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b8d4c:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b8d4e:	b538      	push	{r3, r4, r5, lr}
   b8d50:	460c      	mov	r4, r1
   b8d52:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b8d54:	d801      	bhi.n	b8d5a <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b8d56:	2000      	movs	r0, #0
}
   b8d58:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b8d5a:	69c3      	ldr	r3, [r0, #28]
   b8d5c:	428b      	cmp	r3, r1
   b8d5e:	d3fa      	bcc.n	b8d56 <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b8d60:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b8d62:	2b20      	cmp	r3, #32
   b8d64:	d10f      	bne.n	b8d86 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b8d66:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b8d68:	2203      	movs	r2, #3
   b8d6a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b8d6e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b8d72:	f7ff ff8b 	bl	b8c8c <_ZN8FatCache4readEmh>
    if (!pc) {
   b8d76:	2800      	cmp	r0, #0
   b8d78:	d0ed      	beq.n	b8d56 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b8d7a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b8d7e:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b8d82:	2001      	movs	r0, #1
   b8d84:	e7e8      	b.n	b8d58 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b8d86:	2b10      	cmp	r3, #16
   b8d88:	d1e5      	bne.n	b8d56 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b8d8a:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b8d8e:	6981      	ldr	r1, [r0, #24]
   b8d90:	2203      	movs	r2, #3
   b8d92:	4419      	add	r1, r3
   b8d94:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b8d98:	f7ff ff78 	bl	b8c8c <_ZN8FatCache4readEmh>
    if (!pc) {
   b8d9c:	2800      	cmp	r0, #0
   b8d9e:	d0da      	beq.n	b8d56 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b8da0:	b2e4      	uxtb	r4, r4
   b8da2:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b8da6:	e7ec      	b.n	b8d82 <_ZN9FatVolume6fatPutEmm+0x36>

000b8da8 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b8da8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b8dac:	68c4      	ldr	r4, [r0, #12]
   b8dae:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b8db0:	4605      	mov	r5, r0
   b8db2:	460e      	mov	r6, r1
   b8db4:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b8db6:	d301      	bcc.n	b8dbc <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b8db8:	2701      	movs	r7, #1
   b8dba:	e001      	b.n	b8dc0 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b8dbc:	460c      	mov	r4, r1
    setStart = false;
   b8dbe:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b8dc0:	69eb      	ldr	r3, [r5, #28]
    find++;
   b8dc2:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b8dc4:	42a3      	cmp	r3, r4
   b8dc6:	d202      	bcs.n	b8dce <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b8dc8:	b9c7      	cbnz	r7, b8dfc <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b8dca:	68ec      	ldr	r4, [r5, #12]
   b8dcc:	e7f4      	b.n	b8db8 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b8dce:	42a6      	cmp	r6, r4
   b8dd0:	d014      	beq.n	b8dfc <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b8dd2:	aa01      	add	r2, sp, #4
   b8dd4:	4621      	mov	r1, r4
   b8dd6:	4628      	mov	r0, r5
   b8dd8:	f7ff ff81 	bl	b8cde <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b8ddc:	2800      	cmp	r0, #0
   b8dde:	db0d      	blt.n	b8dfc <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b8de0:	d0ee      	beq.n	b8dc0 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b8de2:	9b01      	ldr	r3, [sp, #4]
   b8de4:	2b00      	cmp	r3, #0
   b8de6:	d1eb      	bne.n	b8dc0 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b8de8:	b107      	cbz	r7, b8dec <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b8dea:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b8dec:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b8df0:	4621      	mov	r1, r4
   b8df2:	4628      	mov	r0, r5
   b8df4:	f7ff ffaa 	bl	b8d4c <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b8df8:	4607      	mov	r7, r0
   b8dfa:	b920      	cbnz	r0, b8e06 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b8dfc:	2700      	movs	r7, #0
}
   b8dfe:	4638      	mov	r0, r7
   b8e00:	b002      	add	sp, #8
   b8e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b8e06:	b916      	cbnz	r6, b8e0e <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b8e08:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b8e0c:	e7f7      	b.n	b8dfe <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b8e0e:	4622      	mov	r2, r4
   b8e10:	4631      	mov	r1, r6
   b8e12:	4628      	mov	r0, r5
   b8e14:	f7ff ff9a 	bl	b8d4c <_ZN9FatVolume6fatPutEmm>
   b8e18:	2800      	cmp	r0, #0
   b8e1a:	d1f5      	bne.n	b8e08 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b8e1c:	e7ee      	b.n	b8dfc <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b8e1e <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b8e1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8e20:	4605      	mov	r5, r0
   b8e22:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b8e24:	aa01      	add	r2, sp, #4
   b8e26:	4621      	mov	r1, r4
   b8e28:	4628      	mov	r0, r5
   b8e2a:	f7ff ff58 	bl	b8cde <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b8e2e:	1e06      	subs	r6, r0, #0
   b8e30:	db10      	blt.n	b8e54 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b8e32:	2200      	movs	r2, #0
   b8e34:	4621      	mov	r1, r4
   b8e36:	4628      	mov	r0, r5
   b8e38:	f7ff ff88 	bl	b8d4c <_ZN9FatVolume6fatPutEmm>
   b8e3c:	b150      	cbz	r0, b8e54 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b8e3e:	68eb      	ldr	r3, [r5, #12]
   b8e40:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b8e42:	bf24      	itt	cs
   b8e44:	f104 34ff 	addcs.w	r4, r4, #4294967295
   b8e48:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b8e4a:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b8e4c:	2e00      	cmp	r6, #0
   b8e4e:	d1e9      	bne.n	b8e24 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b8e50:	b002      	add	sp, #8
   b8e52:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b8e54:	2000      	movs	r0, #0
   b8e56:	e7fb      	b.n	b8e50 <_ZN9FatVolume9freeChainEm+0x32>

000b8e58 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b8e58:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b8e5a:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b8e5c:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b8e5e:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b8e60:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
   b8e64:	4604      	mov	r4, r0
  m_fatType = 0;
   b8e66:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b8e68:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b8e6c:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b8e6e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b8e72:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b8e74:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b8e78:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b8e7c:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b8e80:	460d      	mov	r5, r1
   b8e82:	b1b9      	cbz	r1, b8eb4 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b8e84:	2904      	cmp	r1, #4
   b8e86:	d901      	bls.n	b8e8c <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b8e88:	2000      	movs	r0, #0
}
   b8e8a:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b8e8c:	4611      	mov	r1, r2
   b8e8e:	4630      	mov	r0, r6
   b8e90:	f7ff fefc 	bl	b8c8c <_ZN8FatCache4readEmh>
    if (!pc) {
   b8e94:	2800      	cmp	r0, #0
   b8e96:	d0f7      	beq.n	b8e88 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b8e98:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b8e9c:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b8ea0:	065b      	lsls	r3, r3, #25
   b8ea2:	d1f1      	bne.n	b8e88 <_ZN9FatVolume4initEh+0x30>
   b8ea4:	f105 011b 	add.w	r1, r5, #27
   b8ea8:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b8eac:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b8eb0:	2d00      	cmp	r5, #0
   b8eb2:	d0e9      	beq.n	b8e88 <_ZN9FatVolume4initEh+0x30>
   b8eb4:	2200      	movs	r2, #0
   b8eb6:	4629      	mov	r1, r5
   b8eb8:	4630      	mov	r0, r6
   b8eba:	f7ff fee7 	bl	b8c8c <_ZN8FatCache4readEmh>
  if (!pc) {
   b8ebe:	2800      	cmp	r0, #0
   b8ec0:	d0e2      	beq.n	b8e88 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b8ec2:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b8ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b8eca:	d1dd      	bne.n	b8e88 <_ZN9FatVolume4initEh+0x30>
   b8ecc:	7c03      	ldrb	r3, [r0, #16]
   b8ece:	2b02      	cmp	r3, #2
   b8ed0:	d1da      	bne.n	b8e88 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b8ed2:	89c3      	ldrh	r3, [r0, #14]
   b8ed4:	2b00      	cmp	r3, #0
   b8ed6:	d0d7      	beq.n	b8e88 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b8ed8:	7b41      	ldrb	r1, [r0, #13]
   b8eda:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b8edc:	1e4b      	subs	r3, r1, #1
   b8ede:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b8ee0:	2300      	movs	r3, #0
   b8ee2:	71a3      	strb	r3, [r4, #6]
   b8ee4:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b8ee6:	2301      	movs	r3, #1
   b8ee8:	4299      	cmp	r1, r3
   b8eea:	d007      	beq.n	b8efc <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b8eec:	3e01      	subs	r6, #1
   b8eee:	d0cb      	beq.n	b8e88 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b8ef0:	79a2      	ldrb	r2, [r4, #6]
   b8ef2:	005b      	lsls	r3, r3, #1
   b8ef4:	3201      	adds	r2, #1
   b8ef6:	b2db      	uxtb	r3, r3
   b8ef8:	71a2      	strb	r2, [r4, #6]
   b8efa:	e7f5      	b.n	b8ee8 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b8efc:	8ac1      	ldrh	r1, [r0, #22]
   b8efe:	b901      	cbnz	r1, b8f02 <_ZN9FatVolume4initEh+0xaa>
   b8f00:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b8f02:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b8f04:	89c3      	ldrh	r3, [r0, #14]
   b8f06:	442b      	add	r3, r5
   b8f08:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b8f0a:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b8f0e:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b8f10:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b8f14:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b8f16:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b8f1a:	0149      	lsls	r1, r1, #5
   b8f1c:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b8f20:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b8f24:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b8f26:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b8f2a:	b902      	cbnz	r2, b8f2e <_ZN9FatVolume4initEh+0xd6>
   b8f2c:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b8f2e:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b8f30:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b8f32:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b8f34:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b8f36:	1c4b      	adds	r3, r1, #1
   b8f38:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b8f3a:	f640 73f4 	movw	r3, #4084	; 0xff4
   b8f3e:	4299      	cmp	r1, r3
   b8f40:	d802      	bhi.n	b8f48 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b8f42:	230c      	movs	r3, #12
   b8f44:	71e3      	strb	r3, [r4, #7]
   b8f46:	e79f      	b.n	b8e88 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b8f48:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b8f4c:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b8f4e:	bf85      	ittet	hi
   b8f50:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b8f52:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b8f54:	2310      	movls	r3, #16
    m_fatType = 32;
   b8f56:	2320      	movhi	r3, #32
   b8f58:	71e3      	strb	r3, [r4, #7]
  return true;
   b8f5a:	2001      	movs	r0, #1
   b8f5c:	e795      	b.n	b8e8a <_ZN9FatVolume4initEh+0x32>

000b8f5e <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b8f5e:	f000 bacb 	b.w	b94f8 <_ZN14SdSpiAltDriver4sendEh>

000b8f62 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b8f62:	f000 baae 	b.w	b94c2 <_ZN14SdSpiAltDriver7receiveEv>
	...

000b8f68 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b8f68:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b8f6a:	4e0e      	ldr	r6, [pc, #56]	; (b8fa4 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b8f6c:	460d      	mov	r5, r1
   b8f6e:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b8f70:	f000 fc9a 	bl	b98a8 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b8f74:	6833      	ldr	r3, [r6, #0]
   b8f76:	1ac0      	subs	r0, r0, r3
   b8f78:	4b0b      	ldr	r3, [pc, #44]	; (b8fa8 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b8f7a:	4298      	cmp	r0, r3
   b8f7c:	d908      	bls.n	b8f90 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8f7e:	f000 fc9b 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8f82:	4b0a      	ldr	r3, [pc, #40]	; (b8fac <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b8f84:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b8f86:	f000 ff95 	bl	b9eb4 <spark_process>
   b8f8a:	f000 fc8d 	bl	b98a8 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b8f8e:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b8f90:	f000 fc92 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b8f94:	b280      	uxth	r0, r0
   b8f96:	1b40      	subs	r0, r0, r5
}
   b8f98:	42a0      	cmp	r0, r4
   b8f9a:	bfd4      	ite	le
   b8f9c:	2000      	movle	r0, #0
   b8f9e:	2001      	movgt	r0, #1
   b8fa0:	bd70      	pop	{r4, r5, r6, pc}
   b8fa2:	bf00      	nop
   b8fa4:	2003e64c 	.word	0x2003e64c
   b8fa8:	000186a0 	.word	0x000186a0
   b8fac:	2003e740 	.word	0x2003e740

000b8fb0 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b8fb0:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b8fb2:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b8fb4:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b8fb6:	b94d      	cbnz	r5, b8fcc <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b8fb8:	6840      	ldr	r0, [r0, #4]
   b8fba:	f000 fa6b 	bl	b9494 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b8fbe:	6863      	ldr	r3, [r4, #4]
   b8fc0:	4629      	mov	r1, r5
   b8fc2:	7d18      	ldrb	r0, [r3, #20]
   b8fc4:	f004 fd81 	bl	bdaca <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b8fc8:	2301      	movs	r3, #1
   b8fca:	7223      	strb	r3, [r4, #8]
  }
}
   b8fcc:	bd38      	pop	{r3, r4, r5, pc}

000b8fce <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b8fce:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b8fd0:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b8fd2:	4604      	mov	r4, r0
  if (m_spiActive) {
   b8fd4:	b16b      	cbz	r3, b8ff2 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b8fd6:	6843      	ldr	r3, [r0, #4]
   b8fd8:	2101      	movs	r1, #1
   b8fda:	7d18      	ldrb	r0, [r3, #20]
   b8fdc:	f004 fd75 	bl	bdaca <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b8fe0:	6860      	ldr	r0, [r4, #4]
   b8fe2:	21ff      	movs	r1, #255	; 0xff
   b8fe4:	f7ff ffbb 	bl	b8f5e <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b8fe8:	6860      	ldr	r0, [r4, #4]
   b8fea:	f000 fa67 	bl	b94bc <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b8fee:	2300      	movs	r3, #0
   b8ff0:	7223      	strb	r3, [r4, #8]
  }
}
   b8ff2:	bd10      	pop	{r4, pc}

000b8ff4 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b8ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8ff6:	4604      	mov	r4, r0
   b8ff8:	460d      	mov	r5, r1
   b8ffa:	4616      	mov	r6, r2
   b8ffc:	f000 fc5c 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b9000:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b9002:	6860      	ldr	r0, [r4, #4]
   b9004:	f7ff ffad 	bl	b8f62 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b9008:	28ff      	cmp	r0, #255	; 0xff
   b900a:	7260      	strb	r0, [r4, #9]
   b900c:	d10e      	bne.n	b902c <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b900e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b9012:	4639      	mov	r1, r7
   b9014:	4620      	mov	r0, r4
   b9016:	f7ff ffa7 	bl	b8f68 <_ZN9SdSpiCard10isTimedOutEtt>
   b901a:	2800      	cmp	r0, #0
   b901c:	d0f1      	beq.n	b9002 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b901e:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b9020:	4620      	mov	r0, r4
   b9022:	7023      	strb	r3, [r4, #0]
   b9024:	f7ff ffd3 	bl	b8fce <_ZN9SdSpiCard7spiStopEv>
  return false;
   b9028:	2000      	movs	r0, #0
}
   b902a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b902c:	28fe      	cmp	r0, #254	; 0xfe
   b902e:	d001      	beq.n	b9034 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b9030:	2350      	movs	r3, #80	; 0x50
   b9032:	e7f5      	b.n	b9020 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b9034:	6860      	ldr	r0, [r4, #4]
   b9036:	4632      	mov	r2, r6
   b9038:	4629      	mov	r1, r5
   b903a:	f000 fa47 	bl	b94cc <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b903e:	7260      	strb	r0, [r4, #9]
   b9040:	b108      	cbz	r0, b9046 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b9042:	2360      	movs	r3, #96	; 0x60
   b9044:	e7ec      	b.n	b9020 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b9046:	6860      	ldr	r0, [r4, #4]
   b9048:	f7ff ff8b 	bl	b8f62 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b904c:	6860      	ldr	r0, [r4, #4]
   b904e:	f7ff ff88 	bl	b8f62 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b9052:	2001      	movs	r0, #1
   b9054:	e7e9      	b.n	b902a <_ZN9SdSpiCard8readDataEPhj+0x36>

000b9056 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b9056:	b570      	push	{r4, r5, r6, lr}
   b9058:	4604      	mov	r4, r0
   b905a:	460e      	mov	r6, r1
   b905c:	f000 fc2c 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
   b9060:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b9062:	4632      	mov	r2, r6
   b9064:	4629      	mov	r1, r5
   b9066:	4620      	mov	r0, r4
   b9068:	f7ff ff7e 	bl	b8f68 <_ZN9SdSpiCard10isTimedOutEtt>
   b906c:	b930      	cbnz	r0, b907c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b906e:	6860      	ldr	r0, [r4, #4]
   b9070:	f7ff ff77 	bl	b8f62 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b9074:	28ff      	cmp	r0, #255	; 0xff
   b9076:	d1f4      	bne.n	b9062 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b9078:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b907a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b907c:	2000      	movs	r0, #0
   b907e:	e7fc      	b.n	b907a <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b9080 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b9080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b9082:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b9084:	9201      	str	r2, [sp, #4]
   b9086:	4604      	mov	r4, r0
   b9088:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b908a:	b90b      	cbnz	r3, b9090 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b908c:	f7ff ff90 	bl	b8fb0 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b9090:	b125      	cbz	r5, b909c <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b9092:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b9096:	4620      	mov	r0, r4
   b9098:	f7ff ffdd 	bl	b9056 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b909c:	6860      	ldr	r0, [r4, #4]
   b909e:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b90a2:	f7ff ff5c 	bl	b8f5e <_ZN9SdSpiCard7spiSendEh.isra.0>
   b90a6:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b90a8:	af01      	add	r7, sp, #4
   b90aa:	5db9      	ldrb	r1, [r7, r6]
   b90ac:	6860      	ldr	r0, [r4, #4]
   b90ae:	f7ff ff56 	bl	b8f5e <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b90b2:	3e01      	subs	r6, #1
   b90b4:	d2f9      	bcs.n	b90aa <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b90b6:	2d00      	cmp	r5, #0
   b90b8:	6860      	ldr	r0, [r4, #4]
   b90ba:	bf0c      	ite	eq
   b90bc:	2195      	moveq	r1, #149	; 0x95
   b90be:	2187      	movne	r1, #135	; 0x87
   b90c0:	f7ff ff4d 	bl	b8f5e <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b90c4:	6860      	ldr	r0, [r4, #4]
   b90c6:	f7ff ff4c 	bl	b8f62 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b90ca:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b90cc:	6860      	ldr	r0, [r4, #4]
   b90ce:	f7ff ff48 	bl	b8f62 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b90d2:	0603      	lsls	r3, r0, #24
   b90d4:	7260      	strb	r0, [r4, #9]
   b90d6:	d503      	bpl.n	b90e0 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b90d8:	3d01      	subs	r5, #1
   b90da:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b90de:	d1f5      	bne.n	b90cc <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b90e0:	b003      	add	sp, #12
   b90e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b90e4 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b90e4:	b570      	push	{r4, r5, r6, lr}
   b90e6:	4604      	mov	r4, r0
   b90e8:	460d      	mov	r5, r1
   b90ea:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b90ec:	2137      	movs	r1, #55	; 0x37
   b90ee:	2200      	movs	r2, #0
   b90f0:	f7ff ffc6 	bl	b9080 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b90f4:	4632      	mov	r2, r6
   b90f6:	4629      	mov	r1, r5
   b90f8:	4620      	mov	r0, r4
  }
   b90fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b90fe:	f7ff bfbf 	b.w	b9080 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b9104 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b9104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b9108:	2500      	movs	r5, #0
   b910a:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b910c:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b910e:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b9110:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b9112:	4604      	mov	r4, r0
   b9114:	4690      	mov	r8, r2
   b9116:	461e      	mov	r6, r3
   b9118:	f000 fbce 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b911c:	4641      	mov	r1, r8
   b911e:	4607      	mov	r7, r0
   b9120:	6860      	ldr	r0, [r4, #4]
   b9122:	f000 f9bb 	bl	b949c <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b9126:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b9128:	4a49      	ldr	r2, [pc, #292]	; (b9250 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b912a:	721d      	strb	r5, [r3, #8]
   b912c:	2501      	movs	r5, #1
   b912e:	60da      	str	r2, [r3, #12]
   b9130:	821d      	strh	r5, [r3, #16]
  spiStart();
   b9132:	4620      	mov	r0, r4
   b9134:	f7ff ff3c 	bl	b8fb0 <_ZN9SdSpiCard8spiStartEv>
   b9138:	6863      	ldr	r3, [r4, #4]
   b913a:	4629      	mov	r1, r5
   b913c:	7d18      	ldrb	r0, [r3, #20]
   b913e:	f004 fcc4 	bl	bdaca <digitalWrite>
   b9142:	250a      	movs	r5, #10
    spiSend(0XFF);
   b9144:	6860      	ldr	r0, [r4, #4]
   b9146:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b9148:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b914a:	f7ff ff08 	bl	b8f5e <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b914e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b9152:	d1f7      	bne.n	b9144 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b9154:	6863      	ldr	r3, [r4, #4]
   b9156:	4629      	mov	r1, r5
   b9158:	7d18      	ldrb	r0, [r3, #20]
   b915a:	f004 fcb6 	bl	bdaca <digitalWrite>
  }
   b915e:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b9160:	2200      	movs	r2, #0
   b9162:	4611      	mov	r1, r2
   b9164:	4620      	mov	r0, r4
   b9166:	f7ff ff8b 	bl	b9080 <_ZN9SdSpiCard11cardCommandEhm>
   b916a:	2801      	cmp	r0, #1
   b916c:	4680      	mov	r8, r0
   b916e:	d018      	beq.n	b91a2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b9170:	3d01      	subs	r5, #1
   b9172:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b9176:	d107      	bne.n	b9188 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b9178:	2320      	movs	r3, #32
  spiStop();
   b917a:	4620      	mov	r0, r4
   b917c:	7023      	strb	r3, [r4, #0]
   b917e:	f7ff ff26 	bl	b8fce <_ZN9SdSpiCard7spiStopEv>
  return false;
   b9182:	2000      	movs	r0, #0
}
   b9184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b9188:	6860      	ldr	r0, [r4, #4]
   b918a:	21fd      	movs	r1, #253	; 0xfd
   b918c:	f7ff fee7 	bl	b8f5e <_ZN9SdSpiCard7spiSendEh.isra.0>
   b9190:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b9194:	6860      	ldr	r0, [r4, #4]
   b9196:	f7ff fee4 	bl	b8f62 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b919a:	f1b8 0801 	subs.w	r8, r8, #1
   b919e:	d1f9      	bne.n	b9194 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b91a0:	e7de      	b.n	b9160 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b91a2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b91a6:	2108      	movs	r1, #8
   b91a8:	4620      	mov	r0, r4
   b91aa:	f7ff ff69 	bl	b9080 <_ZN9SdSpiCard11cardCommandEhm>
   b91ae:	2805      	cmp	r0, #5
   b91b0:	d114      	bne.n	b91dc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b91b2:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b91b6:	2500      	movs	r5, #0
   b91b8:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b91ba:	462a      	mov	r2, r5
   b91bc:	2129      	movs	r1, #41	; 0x29
   b91be:	4620      	mov	r0, r4
   b91c0:	f7ff ff90 	bl	b90e4 <_ZN9SdSpiCard8cardAcmdEhm>
   b91c4:	4602      	mov	r2, r0
   b91c6:	b1d8      	cbz	r0, b9200 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b91c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b91cc:	4639      	mov	r1, r7
   b91ce:	4620      	mov	r0, r4
   b91d0:	f7ff feca 	bl	b8f68 <_ZN9SdSpiCard10isTimedOutEtt>
   b91d4:	2800      	cmp	r0, #0
   b91d6:	d0f0      	beq.n	b91ba <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b91d8:	2343      	movs	r3, #67	; 0x43
   b91da:	e7ce      	b.n	b917a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b91dc:	2504      	movs	r5, #4
      m_status = spiReceive();
   b91de:	6860      	ldr	r0, [r4, #4]
   b91e0:	f7ff febf 	bl	b8f62 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b91e4:	3d01      	subs	r5, #1
   b91e6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b91ea:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b91ec:	d1f7      	bne.n	b91de <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b91ee:	28aa      	cmp	r0, #170	; 0xaa
   b91f0:	d104      	bne.n	b91fc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b91f2:	2302      	movs	r3, #2
   b91f4:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b91f6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b91fa:	e7dd      	b.n	b91b8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b91fc:	2325      	movs	r3, #37	; 0x25
   b91fe:	e7bc      	b.n	b917a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b9200:	7aa3      	ldrb	r3, [r4, #10]
   b9202:	2b02      	cmp	r3, #2
   b9204:	d118      	bne.n	b9238 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b9206:	213a      	movs	r1, #58	; 0x3a
   b9208:	4620      	mov	r0, r4
   b920a:	f7ff ff39 	bl	b9080 <_ZN9SdSpiCard11cardCommandEhm>
   b920e:	b108      	cbz	r0, b9214 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b9210:	2337      	movs	r3, #55	; 0x37
   b9212:	e7b2      	b.n	b917a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b9214:	6860      	ldr	r0, [r4, #4]
   b9216:	f7ff fea4 	bl	b8f62 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b921a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b921e:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b9220:	bf04      	itt	eq
   b9222:	2303      	moveq	r3, #3
   b9224:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b9226:	6860      	ldr	r0, [r4, #4]
   b9228:	f7ff fe9b 	bl	b8f62 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b922c:	6860      	ldr	r0, [r4, #4]
   b922e:	f7ff fe98 	bl	b8f62 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b9232:	6860      	ldr	r0, [r4, #4]
   b9234:	f7ff fe95 	bl	b8f62 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b9238:	4620      	mov	r0, r4
   b923a:	f7ff fec8 	bl	b8fce <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b923e:	6863      	ldr	r3, [r4, #4]
   b9240:	7930      	ldrb	r0, [r6, #4]
   b9242:	68b1      	ldr	r1, [r6, #8]
   b9244:	89b2      	ldrh	r2, [r6, #12]
   b9246:	821a      	strh	r2, [r3, #16]
   b9248:	7218      	strb	r0, [r3, #8]
   b924a:	60d9      	str	r1, [r3, #12]
  return true;
   b924c:	2001      	movs	r0, #1
   b924e:	e799      	b.n	b9184 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b9250:	0003d090 	.word	0x0003d090

000b9254 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b9254:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b9256:	7a83      	ldrb	r3, [r0, #10]
   b9258:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b925a:	bf18      	it	ne
   b925c:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b925e:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b9260:	460a      	mov	r2, r1
   b9262:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b9264:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b9266:	f7ff ff0b 	bl	b9080 <_ZN9SdSpiCard11cardCommandEhm>
   b926a:	b130      	cbz	r0, b927a <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b926c:	2330      	movs	r3, #48	; 0x30
   b926e:	7023      	strb	r3, [r4, #0]
  spiStop();
   b9270:	4620      	mov	r0, r4
   b9272:	f7ff feac 	bl	b8fce <_ZN9SdSpiCard7spiStopEv>
  return false;
   b9276:	2500      	movs	r5, #0
   b9278:	e00b      	b.n	b9292 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b927a:	4629      	mov	r1, r5
   b927c:	f44f 7200 	mov.w	r2, #512	; 0x200
   b9280:	4620      	mov	r0, r4
   b9282:	f7ff feb7 	bl	b8ff4 <_ZN9SdSpiCard8readDataEPhj>
   b9286:	4605      	mov	r5, r0
   b9288:	2800      	cmp	r0, #0
   b928a:	d0f1      	beq.n	b9270 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b928c:	4620      	mov	r0, r4
   b928e:	f7ff fe9e 	bl	b8fce <_ZN9SdSpiCard7spiStopEv>
}
   b9292:	4628      	mov	r0, r5
   b9294:	bd38      	pop	{r3, r4, r5, pc}

000b9296 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b9296:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b9298:	7a83      	ldrb	r3, [r0, #10]
   b929a:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b929c:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b929e:	bf18      	it	ne
   b92a0:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b92a2:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b92a4:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b92a6:	f7ff feeb 	bl	b9080 <_ZN9SdSpiCard11cardCommandEhm>
   b92aa:	b130      	cbz	r0, b92ba <_ZN9SdSpiCard9readStartEm+0x24>
   b92ac:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b92ae:	4620      	mov	r0, r4
   b92b0:	7023      	strb	r3, [r4, #0]
   b92b2:	f7ff fe8c 	bl	b8fce <_ZN9SdSpiCard7spiStopEv>
  return false;
   b92b6:	2000      	movs	r0, #0
}
   b92b8:	bd10      	pop	{r4, pc}
  return true;
   b92ba:	2001      	movs	r0, #1
   b92bc:	e7fc      	b.n	b92b8 <_ZN9SdSpiCard9readStartEm+0x22>

000b92be <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b92be:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b92c0:	2200      	movs	r2, #0
   b92c2:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b92c4:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b92c6:	f7ff fedb 	bl	b9080 <_ZN9SdSpiCard11cardCommandEhm>
   b92ca:	b130      	cbz	r0, b92da <_ZN9SdSpiCard8readStopEv+0x1c>
   b92cc:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b92ce:	4620      	mov	r0, r4
   b92d0:	7023      	strb	r3, [r4, #0]
   b92d2:	f7ff fe7c 	bl	b8fce <_ZN9SdSpiCard7spiStopEv>
  return false;
   b92d6:	2000      	movs	r0, #0
}
   b92d8:	bd10      	pop	{r4, pc}
  spiStop();
   b92da:	4620      	mov	r0, r4
   b92dc:	f7ff fe77 	bl	b8fce <_ZN9SdSpiCard7spiStopEv>
  return true;
   b92e0:	2001      	movs	r0, #1
   b92e2:	e7f9      	b.n	b92d8 <_ZN9SdSpiCard8readStopEv+0x1a>

000b92e4 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b92e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b92e6:	4604      	mov	r4, r0
   b92e8:	4616      	mov	r6, r2
   b92ea:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b92ec:	f7ff ffd3 	bl	b9296 <_ZN9SdSpiCard9readStartEm>
   b92f0:	b168      	cbz	r0, b930e <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b92f2:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b92f4:	b2ab      	uxth	r3, r5
   b92f6:	429f      	cmp	r7, r3
   b92f8:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b92fc:	d909      	bls.n	b9312 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b92fe:	f44f 7200 	mov.w	r2, #512	; 0x200
   b9302:	4620      	mov	r0, r4
   b9304:	f7ff fe76 	bl	b8ff4 <_ZN9SdSpiCard8readDataEPhj>
   b9308:	3501      	adds	r5, #1
   b930a:	2800      	cmp	r0, #0
   b930c:	d1f2      	bne.n	b92f4 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b930e:	2000      	movs	r0, #0
   b9310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b9312:	4620      	mov	r0, r4
}
   b9314:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b9318:	f7ff bfd1 	b.w	b92be <_ZN9SdSpiCard8readStopEv>

000b931c <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b931c:	b538      	push	{r3, r4, r5, lr}
   b931e:	4604      	mov	r4, r0
   b9320:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b9322:	6840      	ldr	r0, [r0, #4]
   b9324:	f7ff fe1b 	bl	b8f5e <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b9328:	f44f 7200 	mov.w	r2, #512	; 0x200
   b932c:	6860      	ldr	r0, [r4, #4]
   b932e:	4629      	mov	r1, r5
   b9330:	f000 f8e6 	bl	b9500 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b9334:	6860      	ldr	r0, [r4, #4]
   b9336:	21ff      	movs	r1, #255	; 0xff
   b9338:	f7ff fe11 	bl	b8f5e <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b933c:	6860      	ldr	r0, [r4, #4]
   b933e:	21ff      	movs	r1, #255	; 0xff
   b9340:	f7ff fe0d 	bl	b8f5e <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b9344:	6860      	ldr	r0, [r4, #4]
   b9346:	f7ff fe0c 	bl	b8f62 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b934a:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b934c:	f000 001f 	and.w	r0, r0, #31
   b9350:	2805      	cmp	r0, #5
   b9352:	d006      	beq.n	b9362 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b9354:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b9356:	4620      	mov	r0, r4
   b9358:	7023      	strb	r3, [r4, #0]
   b935a:	f7ff fe38 	bl	b8fce <_ZN9SdSpiCard7spiStopEv>
  return false;
   b935e:	2000      	movs	r0, #0
}
   b9360:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b9362:	2001      	movs	r0, #1
   b9364:	e7fc      	b.n	b9360 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b9366 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b9366:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b9368:	7a83      	ldrb	r3, [r0, #10]
   b936a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b936c:	bf18      	it	ne
   b936e:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b9370:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b9372:	460a      	mov	r2, r1
   b9374:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b9376:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b9378:	f7ff fe82 	bl	b9080 <_ZN9SdSpiCard11cardCommandEhm>
   b937c:	4606      	mov	r6, r0
   b937e:	b130      	cbz	r0, b938e <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b9380:	2332      	movs	r3, #50	; 0x32
   b9382:	7023      	strb	r3, [r4, #0]
  spiStop();
   b9384:	4620      	mov	r0, r4
   b9386:	f7ff fe22 	bl	b8fce <_ZN9SdSpiCard7spiStopEv>
  return false;
   b938a:	2500      	movs	r5, #0
   b938c:	e01f      	b.n	b93ce <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b938e:	462a      	mov	r2, r5
   b9390:	21fe      	movs	r1, #254	; 0xfe
   b9392:	4620      	mov	r0, r4
   b9394:	f7ff ffc2 	bl	b931c <_ZN9SdSpiCard9writeDataEhPKh>
   b9398:	2800      	cmp	r0, #0
   b939a:	d0f3      	beq.n	b9384 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b939c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b93a0:	4620      	mov	r0, r4
   b93a2:	f7ff fe58 	bl	b9056 <_ZN9SdSpiCard11waitNotBusyEt>
   b93a6:	4605      	mov	r5, r0
   b93a8:	b908      	cbnz	r0, b93ae <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b93aa:	235a      	movs	r3, #90	; 0x5a
   b93ac:	e7e9      	b.n	b9382 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b93ae:	4632      	mov	r2, r6
   b93b0:	210d      	movs	r1, #13
   b93b2:	4620      	mov	r0, r4
   b93b4:	f7ff fe64 	bl	b9080 <_ZN9SdSpiCard11cardCommandEhm>
   b93b8:	b108      	cbz	r0, b93be <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b93ba:	2329      	movs	r3, #41	; 0x29
   b93bc:	e7e1      	b.n	b9382 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b93be:	6860      	ldr	r0, [r4, #4]
   b93c0:	f7ff fdcf 	bl	b8f62 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b93c4:	2800      	cmp	r0, #0
   b93c6:	d1f8      	bne.n	b93ba <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b93c8:	4620      	mov	r0, r4
   b93ca:	f7ff fe00 	bl	b8fce <_ZN9SdSpiCard7spiStopEv>
}
   b93ce:	4628      	mov	r0, r5
   b93d0:	bd70      	pop	{r4, r5, r6, pc}

000b93d2 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b93d2:	b513      	push	{r0, r1, r4, lr}
   b93d4:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b93d6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b93da:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b93dc:	f7ff fe3b 	bl	b9056 <_ZN9SdSpiCard11waitNotBusyEt>
   b93e0:	9a01      	ldr	r2, [sp, #4]
   b93e2:	b930      	cbnz	r0, b93f2 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b93e4:	235b      	movs	r3, #91	; 0x5b
   b93e6:	7023      	strb	r3, [r4, #0]
  spiStop();
   b93e8:	4620      	mov	r0, r4
   b93ea:	f7ff fdf0 	bl	b8fce <_ZN9SdSpiCard7spiStopEv>
  return false;
   b93ee:	2000      	movs	r0, #0
   b93f0:	e005      	b.n	b93fe <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b93f2:	21fc      	movs	r1, #252	; 0xfc
   b93f4:	4620      	mov	r0, r4
   b93f6:	f7ff ff91 	bl	b931c <_ZN9SdSpiCard9writeDataEhPKh>
   b93fa:	2800      	cmp	r0, #0
   b93fc:	d0f4      	beq.n	b93e8 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b93fe:	b002      	add	sp, #8
   b9400:	bd10      	pop	{r4, pc}

000b9402 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b9402:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b9404:	7a83      	ldrb	r3, [r0, #10]
   b9406:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b9408:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b940a:	bf18      	it	ne
   b940c:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b940e:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b9410:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b9412:	f7ff fe35 	bl	b9080 <_ZN9SdSpiCard11cardCommandEhm>
   b9416:	b130      	cbz	r0, b9426 <_ZN9SdSpiCard10writeStartEm+0x24>
   b9418:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b941a:	4620      	mov	r0, r4
   b941c:	7023      	strb	r3, [r4, #0]
   b941e:	f7ff fdd6 	bl	b8fce <_ZN9SdSpiCard7spiStopEv>
  return false;
   b9422:	2000      	movs	r0, #0
}
   b9424:	bd10      	pop	{r4, pc}
  return true;
   b9426:	2001      	movs	r0, #1
   b9428:	e7fc      	b.n	b9424 <_ZN9SdSpiCard10writeStartEm+0x22>

000b942a <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b942a:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b942c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b9430:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b9432:	f7ff fe10 	bl	b9056 <_ZN9SdSpiCard11waitNotBusyEt>
   b9436:	4605      	mov	r5, r0
   b9438:	b930      	cbnz	r0, b9448 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b943a:	2356      	movs	r3, #86	; 0x56
   b943c:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b943e:	4620      	mov	r0, r4
   b9440:	f7ff fdc5 	bl	b8fce <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b9444:	4628      	mov	r0, r5
   b9446:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b9448:	6860      	ldr	r0, [r4, #4]
   b944a:	21fd      	movs	r1, #253	; 0xfd
   b944c:	f7ff fd87 	bl	b8f5e <_ZN9SdSpiCard7spiSendEh.isra.0>
   b9450:	e7f5      	b.n	b943e <_ZN9SdSpiCard9writeStopEv+0x14>

000b9452 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b9452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9454:	4604      	mov	r4, r0
   b9456:	4616      	mov	r6, r2
   b9458:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b945a:	f7ff ffd2 	bl	b9402 <_ZN9SdSpiCard10writeStartEm>
   b945e:	b170      	cbz	r0, b947e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b9460:	2500      	movs	r5, #0
   b9462:	42bd      	cmp	r5, r7
   b9464:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b9468:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b946a:	d004      	beq.n	b9476 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b946c:	f7ff ffb1 	bl	b93d2 <_ZN9SdSpiCard9writeDataEPKh>
   b9470:	b128      	cbz	r0, b947e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b9472:	3501      	adds	r5, #1
   b9474:	e7f5      	b.n	b9462 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b9476:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b947a:	f7ff bfd6 	b.w	b942a <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b947e:	4620      	mov	r0, r4
   b9480:	f7ff fda5 	bl	b8fce <_ZN9SdSpiCard7spiStopEv>
}
   b9484:	2000      	movs	r0, #0
   b9486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9488 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b9488:	4b01      	ldr	r3, [pc, #4]	; (b9490 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b948a:	2201      	movs	r2, #1
   b948c:	701a      	strb	r2, [r3, #0]
}
   b948e:	4770      	bx	lr
   b9490:	2003e650 	.word	0x2003e650

000b9494 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b9494:	1d01      	adds	r1, r0, #4
   b9496:	6800      	ldr	r0, [r0, #0]
   b9498:	f000 be20 	b.w	ba0dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b949c <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b949c:	b510      	push	{r4, lr}
   b949e:	4604      	mov	r4, r0
  m_csPin = csPin;
   b94a0:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b94a2:	6800      	ldr	r0, [r0, #0]
   b94a4:	f000 fdec 	bl	ba080 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b94a8:	7d20      	ldrb	r0, [r4, #20]
   b94aa:	2101      	movs	r1, #1
   b94ac:	f004 fafc 	bl	bdaa8 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b94b0:	7d20      	ldrb	r0, [r4, #20]
   b94b2:	2101      	movs	r1, #1
}
   b94b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b94b8:	f004 bb07 	b.w	bdaca <digitalWrite>

000b94bc <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b94bc:	6800      	ldr	r0, [r0, #0]
   b94be:	f000 bdf3 	b.w	ba0a8 <_ZN8SPIClass14endTransactionEv>

000b94c2 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b94c2:	6800      	ldr	r0, [r0, #0]
   b94c4:	21ff      	movs	r1, #255	; 0xff
   b94c6:	f000 be77 	b.w	ba1b8 <_ZN8SPIClass8transferEh>
	...

000b94cc <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b94cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b94ce:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b94d0:	4a07      	ldr	r2, [pc, #28]	; (b94f0 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b94d2:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b94d4:	2500      	movs	r5, #0
   b94d6:	4c07      	ldr	r4, [pc, #28]	; (b94f4 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b94d8:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b94da:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b94dc:	460a      	mov	r2, r1
   b94de:	4629      	mov	r1, r5
   b94e0:	f000 fe70 	bl	ba1c4 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b94e4:	7823      	ldrb	r3, [r4, #0]
   b94e6:	2b00      	cmp	r3, #0
   b94e8:	d0fc      	beq.n	b94e4 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b94ea:	2000      	movs	r0, #0
   b94ec:	b003      	add	sp, #12
   b94ee:	bd30      	pop	{r4, r5, pc}
   b94f0:	000b9489 	.word	0x000b9489
   b94f4:	2003e650 	.word	0x2003e650

000b94f8 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b94f8:	6800      	ldr	r0, [r0, #0]
   b94fa:	f000 be5d 	b.w	ba1b8 <_ZN8SPIClass8transferEh>
	...

000b9500 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b9500:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9502:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b9504:	4a06      	ldr	r2, [pc, #24]	; (b9520 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b9506:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b9508:	2500      	movs	r5, #0
   b950a:	4c06      	ldr	r4, [pc, #24]	; (b9524 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b950c:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b950e:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b9510:	462a      	mov	r2, r5
   b9512:	f000 fe57 	bl	ba1c4 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b9516:	7823      	ldrb	r3, [r4, #0]
   b9518:	2b00      	cmp	r3, #0
   b951a:	d0fc      	beq.n	b9516 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b951c:	b003      	add	sp, #12
   b951e:	bd30      	pop	{r4, r5, pc}
   b9520:	000b9489 	.word	0x000b9489
   b9524:	2003e650 	.word	0x2003e650

000b9528 <_ZN15Adafruit_SH110X7displayEv>:
    @brief  Push data currently in RAM to SH110X display.
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SH110X::display(void) {
   b9528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b952c:	4604      	mov	r4, r0
   b952e:	b08b      	sub	sp, #44	; 0x2c
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   b9530:	f000 fa84 	bl	b9a3c <os_thread_yield>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();

  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b9534:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
  Serial.print(", ");
  Serial.print(window_y2);
  Serial.println(")");
  */

  uint8_t first_page = window_y1 / 8;
   b9538:	f9b4 603a 	ldrsh.w	r6, [r4, #58]	; 0x3a
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b953c:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
   b9540:	f894 9038 	ldrb.w	r9, [r4, #56]	; 0x38
   b9544:	1dda      	adds	r2, r3, #7
   b9546:	bf48      	it	mi
   b9548:	f103 020e 	addmi.w	r2, r3, #14
  uint8_t dc_byte = 0x40;
   b954c:	2340      	movs	r3, #64	; 0x40
   b954e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  uint8_t pages = ((HEIGHT + 7) / 8);
   b9552:	f3c2 03c7 	ubfx	r3, r2, #3, #8
   b9556:	9303      	str	r3, [sp, #12]
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   b9558:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  uint8_t last_page = (window_y2 + 7) / 8;
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   b955a:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   b955e:	68db      	ldr	r3, [r3, #12]
  uint8_t bytes_per_page = WIDTH;
   b9560:	b2ff      	uxtb	r7, r7
  uint8_t first_page = window_y1 / 8;
   b9562:	2e00      	cmp	r6, #0
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   b9564:	f103 33ff 	add.w	r3, r3, #4294967295
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   b9568:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  uint8_t first_page = window_y1 / 8;
   b956c:	bfb8      	it	lt
   b956e:	3607      	addlt	r6, #7
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   b9570:	b2d2      	uxtb	r2, r2
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   b9572:	b29b      	uxth	r3, r3
  uint8_t first_page = window_y1 / 8;
   b9574:	45b9      	cmp	r9, r7
   b9576:	f3c6 06c7 	ubfx	r6, r6, #3, #8
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   b957a:	bf28      	it	cs
   b957c:	46b9      	movcs	r9, r7
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   b957e:	9204      	str	r2, [sp, #16]
  Serial.print(page_start);
  Serial.print(" -> ");
  Serial.println(page_end);
  */

  for (uint8_t p = first_page; p < pages; p++) {
   b9580:	b2db      	uxtb	r3, r3
    ptr = buffer + (uint16_t)p * (uint16_t)bytes_per_page;
    // fast forward to dirty rectangle beginning
    ptr += page_start;
    bytes_remaining -= page_start;
    // cut off end of dirty rectangle
    bytes_remaining -= (WIDTH - 1) - page_end;
   b9582:	1c7a      	adds	r2, r7, #1
   b9584:	fb06 9b07 	mla	fp, r6, r7, r9
   b9588:	9205      	str	r2, [sp, #20]
   b958a:	9306      	str	r3, [sp, #24]
  for (uint8_t p = first_page; p < pages; p++) {
   b958c:	9b03      	ldr	r3, [sp, #12]
   b958e:	429e      	cmp	r6, r3
   b9590:	d26a      	bcs.n	b9668 <_ZN15Adafruit_SH110X7displayEv+0x140>
    ptr += page_start;
   b9592:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bytes_remaining -= (WIDTH - 1) - page_end;
   b9594:	8925      	ldrh	r5, [r4, #8]

    if (i2c_dev) { // I2C
      uint8_t cmd[] = {
          0x00, (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   b9596:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
    ptr += page_start;
   b959a:	eb03 080b 	add.w	r8, r3, fp
    bytes_remaining -= (WIDTH - 1) - page_end;
   b959e:	9b05      	ldr	r3, [sp, #20]
   b95a0:	1b5d      	subs	r5, r3, r5
   b95a2:	9b04      	ldr	r3, [sp, #16]
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   b95a4:	444a      	add	r2, r9
    bytes_remaining -= (WIDTH - 1) - page_end;
   b95a6:	441d      	add	r5, r3
    if (i2c_dev) { // I2C
   b95a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   b95aa:	1110      	asrs	r0, r2, #4
    bytes_remaining -= (WIDTH - 1) - page_end;
   b95ac:	eba5 0509 	sub.w	r5, r5, r9
   b95b0:	f1a6 0150 	sub.w	r1, r6, #80	; 0x50
   b95b4:	b2ed      	uxtb	r5, r5
    if (i2c_dev) { // I2C
   b95b6:	b2c9      	uxtb	r1, r1
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   b95b8:	3010      	adds	r0, #16
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b95ba:	f002 020f 	and.w	r2, r2, #15
    if (i2c_dev) { // I2C
   b95be:	b39b      	cbz	r3, b9628 <_ZN15Adafruit_SH110X7displayEv+0x100>
      uint8_t cmd[] = {
   b95c0:	f04f 0a00 	mov.w	sl, #0
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b95c4:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
   b95c8:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26

      // Set high speed clk
      i2c_dev->setSpeed(i2c_preclk);
   b95cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      uint8_t cmd[] = {
   b95ce:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
      i2c_dev->setSpeed(i2c_preclk);
   b95d2:	4618      	mov	r0, r3
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b95d4:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
      i2c_dev->setSpeed(i2c_preclk);
   b95d8:	f7fe fc24 	bl	b7e24 <_ZN18Adafruit_I2CDevice8setSpeedEm>

      i2c_dev->write(cmd, 4);
   b95dc:	e9cd aa00 	strd	sl, sl, [sp]
   b95e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b95e2:	2301      	movs	r3, #1
   b95e4:	2204      	movs	r2, #4
   b95e6:	a909      	add	r1, sp, #36	; 0x24
   b95e8:	f7fe fbec 	bl	b7dc4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>

      while (bytes_remaining) {
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
   b95ec:	f10d 0a23 	add.w	sl, sp, #35	; 0x23
   b95f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      while (bytes_remaining) {
   b95f2:	b195      	cbz	r5, b961a <_ZN15Adafruit_SH110X7displayEv+0xf2>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
   b95f4:	9b06      	ldr	r3, [sp, #24]
   b95f6:	42ab      	cmp	r3, r5
   b95f8:	bf28      	it	cs
   b95fa:	462b      	movcs	r3, r5
   b95fc:	461a      	mov	r2, r3
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
   b95fe:	2301      	movs	r3, #1
   b9600:	4641      	mov	r1, r8
   b9602:	e9cd a300 	strd	sl, r3, [sp]
   b9606:	9207      	str	r2, [sp, #28]
   b9608:	f7fe fbdc 	bl	b7dc4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        ptr += to_write;
   b960c:	9a07      	ldr	r2, [sp, #28]
        bytes_remaining -= to_write;
   b960e:	1aad      	subs	r5, r5, r2
        ptr += to_write;
   b9610:	4490      	add	r8, r2
        bytes_remaining -= to_write;
   b9612:	b2ed      	uxtb	r5, r5
   b9614:	f000 fa12 	bl	b9a3c <os_thread_yield>
#endif // PLATFORM_THREADING
}
   b9618:	e7ea      	b.n	b95f0 <_ZN15Adafruit_SH110X7displayEv+0xc8>
        yield();
      }

      // Set low speed clk
      i2c_dev->setSpeed(i2c_postclk);
   b961a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   b961c:	f7fe fc02 	bl	b7e24 <_ZN18Adafruit_I2CDevice8setSpeedEm>
  for (uint8_t p = first_page; p < pages; p++) {
   b9620:	3601      	adds	r6, #1
   b9622:	b2f6      	uxtb	r6, r6
   b9624:	44bb      	add	fp, r7
   b9626:	e7b1      	b.n	b958c <_ZN15Adafruit_SH110X7displayEv+0x64>

    } else { // SPI
      uint8_t cmd[] = {
          (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b9628:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   b962c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25

      digitalWrite(dcPin, LOW);
   b9630:	4619      	mov	r1, r3
   b9632:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b9636:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
      digitalWrite(dcPin, LOW);
   b963a:	9307      	str	r3, [sp, #28]
   b963c:	f004 fa45 	bl	bdaca <digitalWrite>
      spi_dev->write(cmd, 3);
   b9640:	9b07      	ldr	r3, [sp, #28]
   b9642:	9300      	str	r3, [sp, #0]
   b9644:	2203      	movs	r2, #3
   b9646:	a909      	add	r1, sp, #36	; 0x24
   b9648:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b964a:	f7fe fb5e 	bl	b7d0a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
      digitalWrite(dcPin, HIGH);
   b964e:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   b9652:	2101      	movs	r1, #1
   b9654:	f004 fa39 	bl	bdaca <digitalWrite>
      spi_dev->write(ptr, bytes_remaining);
   b9658:	9b07      	ldr	r3, [sp, #28]
   b965a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b965c:	9300      	str	r3, [sp, #0]
   b965e:	462a      	mov	r2, r5
   b9660:	4641      	mov	r1, r8
   b9662:	f7fe fb52 	bl	b7d0a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   b9666:	e7db      	b.n	b9620 <_ZN15Adafruit_SH110X7displayEv+0xf8>
    }
  }
  // reset dirty window
  window_x1 = 1024;
  window_y1 = 1024;
  window_x2 = -1;
   b9668:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
   b966c:	f04f 33ff 	mov.w	r3, #4294967295
   b9670:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  window_y2 = -1;
}
   b9674:	b00b      	add	sp, #44	; 0x2c
   b9676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000b967c <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>:
Adafruit_SH110X::Adafruit_SH110X(uint16_t w, uint16_t h, TwoWire *twi,
   b967c:	b530      	push	{r4, r5, lr}
   b967e:	b085      	sub	sp, #20
   b9680:	4604      	mov	r4, r0
    : Adafruit_GrayOLED(1, w, h, twi, rst_pin, clkDuring, clkAfter) {}
   b9682:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   b9684:	9503      	str	r5, [sp, #12]
   b9686:	9d09      	ldr	r5, [sp, #36]	; 0x24
   b9688:	9502      	str	r5, [sp, #8]
   b968a:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   b968e:	e9cd 3500 	strd	r3, r5, [sp]
   b9692:	4613      	mov	r3, r2
   b9694:	460a      	mov	r2, r1
   b9696:	2101      	movs	r1, #1
   b9698:	f7fd fd3e 	bl	b7118 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>
   b969c:	4b03      	ldr	r3, [pc, #12]	; (b96ac <_ZN15Adafruit_SH110XC1EttP7TwoWireamm+0x30>)
   b969e:	6023      	str	r3, [r4, #0]
   b96a0:	4620      	mov	r0, r4
   b96a2:	2300      	movs	r3, #0
   b96a4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b96a8:	b005      	add	sp, #20
   b96aa:	bd30      	pop	{r4, r5, pc}
   b96ac:	000c1658 	.word	0x000c1658

000b96b0 <_ZN15Adafruit_SH110XD1Ev>:
Adafruit_SH110X::~Adafruit_SH110X(void) {}
   b96b0:	b510      	push	{r4, lr}
   b96b2:	4b03      	ldr	r3, [pc, #12]	; (b96c0 <_ZN15Adafruit_SH110XD1Ev+0x10>)
   b96b4:	6003      	str	r3, [r0, #0]
   b96b6:	4604      	mov	r4, r0
   b96b8:	f7fd fd50 	bl	b715c <_ZN17Adafruit_GrayOLEDD1Ev>
   b96bc:	4620      	mov	r0, r4
   b96be:	bd10      	pop	{r4, pc}
   b96c0:	000c1658 	.word	0x000c1658

000b96c4 <_ZN15Adafruit_SH1107D1Ev>:
    : Adafruit_SH110X(w, h, spi, dc_pin, rst_pin, cs_pin, bitrate) {}

/*!
    @brief  Destructor for Adafruit_SH1107 object.
*/
Adafruit_SH1107::~Adafruit_SH1107(void) {}
   b96c4:	b510      	push	{r4, lr}
   b96c6:	4b03      	ldr	r3, [pc, #12]	; (b96d4 <_ZN15Adafruit_SH1107D1Ev+0x10>)
   b96c8:	6003      	str	r3, [r0, #0]
   b96ca:	4604      	mov	r4, r0
   b96cc:	f7ff fff0 	bl	b96b0 <_ZN15Adafruit_SH110XD1Ev>
   b96d0:	4620      	mov	r0, r4
   b96d2:	bd10      	pop	{r4, pc}
   b96d4:	000c1894 	.word	0x000c1894

000b96d8 <_ZN15Adafruit_SH1107D0Ev>:
   b96d8:	b510      	push	{r4, lr}
   b96da:	4604      	mov	r4, r0
   b96dc:	f7ff fff2 	bl	b96c4 <_ZN15Adafruit_SH1107D1Ev>
   b96e0:	4620      	mov	r0, r4
   b96e2:	2158      	movs	r1, #88	; 0x58
   b96e4:	f7fa fcdb 	bl	b409e <_ZdlPvj>
   b96e8:	4620      	mov	r0, r4
   b96ea:	bd10      	pop	{r4, pc}

000b96ec <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>:
Adafruit_SH1107::Adafruit_SH1107(uint16_t w, uint16_t h, TwoWire *twi,
   b96ec:	b530      	push	{r4, r5, lr}
   b96ee:	b085      	sub	sp, #20
   b96f0:	4604      	mov	r4, r0
    : Adafruit_SH110X(w, h, twi, rst_pin, clkDuring, clkAfter) {}
   b96f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   b96f4:	9502      	str	r5, [sp, #8]
   b96f6:	9d09      	ldr	r5, [sp, #36]	; 0x24
   b96f8:	9501      	str	r5, [sp, #4]
   b96fa:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   b96fe:	9500      	str	r5, [sp, #0]
   b9700:	f7ff ffbc 	bl	b967c <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>
   b9704:	4b02      	ldr	r3, [pc, #8]	; (b9710 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm+0x24>)
   b9706:	6023      	str	r3, [r4, #0]
   b9708:	4620      	mov	r0, r4
   b970a:	b005      	add	sp, #20
   b970c:	bd30      	pop	{r4, r5, pc}
   b970e:	bf00      	nop
   b9710:	000c1894 	.word	0x000c1894

000b9714 <_ZN15Adafruit_SH11075beginEhb>:
    @return true on successful allocation/init, false otherwise.
            Well-behaved code should check the return value before
            proceeding.
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SH1107::begin(uint8_t addr, bool reset) {
   b9714:	b530      	push	{r4, r5, lr}
   b9716:	4604      	mov	r4, r0
   b9718:	b085      	sub	sp, #20

  Adafruit_GrayOLED::_init(addr, reset);
   b971a:	f7fd fda3 	bl	b7264 <_ZN17Adafruit_GrayOLED5_initEhb>

  setContrast(0x2F);
   b971e:	212f      	movs	r1, #47	; 0x2f
   b9720:	4620      	mov	r0, r4
   b9722:	f7fd fe08 	bl	b7336 <_ZN17Adafruit_GrayOLED11setContrastEh>

  // the featherwing with 128x64 oled is 'rotated' so to make the splash right,
  // rotate!
  if (WIDTH == 64 && HEIGHT == 128) {
   b9726:	68a2      	ldr	r2, [r4, #8]
   b9728:	4b2f      	ldr	r3, [pc, #188]	; (b97e8 <_ZN15Adafruit_SH11075beginEhb+0xd4>)
   b972a:	429a      	cmp	r2, r3
   b972c:	d121      	bne.n	b9772 <_ZN15Adafruit_SH11075beginEhb+0x5e>
    setRotation(1);
   b972e:	6823      	ldr	r3, [r4, #0]
   b9730:	2101      	movs	r1, #1
   b9732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9734:	4620      	mov	r0, r4
   b9736:	4798      	blx	r3
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   b9738:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   b973c:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   b9740:	2320      	movs	r3, #32
   b9742:	3a20      	subs	r2, #32
   b9744:	3973      	subs	r1, #115	; 0x73
   b9746:	2501      	movs	r5, #1
   b9748:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b974c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b9750:	2373      	movs	r3, #115	; 0x73
   b9752:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b9756:	9300      	str	r3, [sp, #0]
   b9758:	f341 014f 	sbfx	r1, r1, #1, #16
   b975c:	4b23      	ldr	r3, [pc, #140]	; (b97ec <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   b975e:	4620      	mov	r0, r4
   b9760:	f342 024f 	sbfx	r2, r2, #1, #16
   b9764:	f7fd ff8e 	bl	b7684 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
               splash2_data, splash2_width, splash2_height, 1);
    setRotation(0);
   b9768:	6823      	ldr	r3, [r4, #0]
   b976a:	2100      	movs	r1, #0
   b976c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b976e:	4620      	mov	r0, r4
   b9770:	4798      	blx	r3
  }
  if (WIDTH == 128 && HEIGHT == 128) {
   b9772:	68a3      	ldr	r3, [r4, #8]
   b9774:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   b9778:	d117      	bne.n	b97aa <_ZN15Adafruit_SH11075beginEhb+0x96>
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   b977a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   b977e:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   b9782:	2320      	movs	r3, #32
   b9784:	2001      	movs	r0, #1
   b9786:	3a20      	subs	r2, #32
   b9788:	3973      	subs	r1, #115	; 0x73
   b978a:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b978e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b9792:	2373      	movs	r3, #115	; 0x73
   b9794:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b9798:	9300      	str	r3, [sp, #0]
   b979a:	f342 024f 	sbfx	r2, r2, #1, #16
   b979e:	4b13      	ldr	r3, [pc, #76]	; (b97ec <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   b97a0:	f341 014f 	sbfx	r1, r1, #1, #16
   b97a4:	4620      	mov	r0, r4
   b97a6:	f7fd ff6d 	bl	b7684 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
      SH110X_DISPLAYALLON_RESUME, // 0xa4
      SH110X_NORMALDISPLAY,       // 0xa6
  };
  // clang-format on

  if (!oled_commandList(init, sizeof(init))) {
   b97aa:	4911      	ldr	r1, [pc, #68]	; (b97f0 <_ZN15Adafruit_SH11075beginEhb+0xdc>)
   b97ac:	2216      	movs	r2, #22
   b97ae:	4620      	mov	r0, r4
   b97b0:	f7fd fd1b 	bl	b71ea <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   b97b4:	4605      	mov	r5, r0
   b97b6:	b918      	cbnz	r0, b97c0 <_ZN15Adafruit_SH11075beginEhb+0xac>
    return false;
   b97b8:	2500      	movs	r5, #0

  delay(100);                     // 100ms delay recommended
  oled_command(SH110X_DISPLAYON); // 0xaf

  return true; // Success
}
   b97ba:	4628      	mov	r0, r5
   b97bc:	b005      	add	sp, #20
   b97be:	bd30      	pop	{r4, r5, pc}
  if (WIDTH == 128 && HEIGHT == 128) {
   b97c0:	68a3      	ldr	r3, [r4, #8]
   b97c2:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   b97c6:	d007      	beq.n	b97d8 <_ZN15Adafruit_SH11075beginEhb+0xc4>
  delay(100);                     // 100ms delay recommended
   b97c8:	2064      	movs	r0, #100	; 0x64
   b97ca:	f003 fad9 	bl	bcd80 <delay>
  oled_command(SH110X_DISPLAYON); // 0xaf
   b97ce:	21af      	movs	r1, #175	; 0xaf
   b97d0:	4620      	mov	r0, r4
   b97d2:	f7fd fcdf 	bl	b7194 <_ZN17Adafruit_GrayOLED12oled_commandEh>
  return true; // Success
   b97d6:	e7f0      	b.n	b97ba <_ZN15Adafruit_SH11075beginEhb+0xa6>
    if (!oled_commandList(init_128x128, sizeof(init_128x128))) {
   b97d8:	4906      	ldr	r1, [pc, #24]	; (b97f4 <_ZN15Adafruit_SH11075beginEhb+0xe0>)
   b97da:	2204      	movs	r2, #4
   b97dc:	4620      	mov	r0, r4
   b97de:	f7fd fd04 	bl	b71ea <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   b97e2:	2800      	cmp	r0, #0
   b97e4:	d1f0      	bne.n	b97c8 <_ZN15Adafruit_SH11075beginEhb+0xb4>
   b97e6:	e7e7      	b.n	b97b8 <_ZN15Adafruit_SH11075beginEhb+0xa4>
   b97e8:	00800040 	.word	0x00800040
   b97ec:	000c16ac 	.word	0x000c16ac
   b97f0:	000c18ec 	.word	0x000c18ec
   b97f4:	000c18e8 	.word	0x000c18e8

000b97f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b97f8:	b508      	push	{r3, lr}
   b97fa:	4b02      	ldr	r3, [pc, #8]	; (b9804 <netdb_freeaddrinfo+0xc>)
   b97fc:	681b      	ldr	r3, [r3, #0]
   b97fe:	689b      	ldr	r3, [r3, #8]
   b9800:	9301      	str	r3, [sp, #4]
   b9802:	bd08      	pop	{r3, pc}
   b9804:	00030268 	.word	0x00030268

000b9808 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b9808:	b508      	push	{r3, lr}
   b980a:	4b02      	ldr	r3, [pc, #8]	; (b9814 <netdb_getaddrinfo+0xc>)
   b980c:	681b      	ldr	r3, [r3, #0]
   b980e:	68db      	ldr	r3, [r3, #12]
   b9810:	9301      	str	r3, [sp, #4]
   b9812:	bd08      	pop	{r3, pc}
   b9814:	00030268 	.word	0x00030268

000b9818 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b9818:	b508      	push	{r3, lr}
   b981a:	4b02      	ldr	r3, [pc, #8]	; (b9824 <HAL_Validate_Pin_Function+0xc>)
   b981c:	681b      	ldr	r3, [r3, #0]
   b981e:	685b      	ldr	r3, [r3, #4]
   b9820:	9301      	str	r3, [sp, #4]
   b9822:	bd08      	pop	{r3, pc}
   b9824:	0003022c 	.word	0x0003022c

000b9828 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b9828:	b508      	push	{r3, lr}
   b982a:	4b02      	ldr	r3, [pc, #8]	; (b9834 <HAL_Pin_Mode+0xc>)
   b982c:	681b      	ldr	r3, [r3, #0]
   b982e:	689b      	ldr	r3, [r3, #8]
   b9830:	9301      	str	r3, [sp, #4]
   b9832:	bd08      	pop	{r3, pc}
   b9834:	0003022c 	.word	0x0003022c

000b9838 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b9838:	b508      	push	{r3, lr}
   b983a:	4b02      	ldr	r3, [pc, #8]	; (b9844 <HAL_Get_Pin_Mode+0xc>)
   b983c:	681b      	ldr	r3, [r3, #0]
   b983e:	68db      	ldr	r3, [r3, #12]
   b9840:	9301      	str	r3, [sp, #4]
   b9842:	bd08      	pop	{r3, pc}
   b9844:	0003022c 	.word	0x0003022c

000b9848 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b9848:	b508      	push	{r3, lr}
   b984a:	4b02      	ldr	r3, [pc, #8]	; (b9854 <HAL_GPIO_Write+0xc>)
   b984c:	681b      	ldr	r3, [r3, #0]
   b984e:	691b      	ldr	r3, [r3, #16]
   b9850:	9301      	str	r3, [sp, #4]
   b9852:	bd08      	pop	{r3, pc}
   b9854:	0003022c 	.word	0x0003022c

000b9858 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b9858:	b508      	push	{r3, lr}
   b985a:	4b02      	ldr	r3, [pc, #8]	; (b9864 <HAL_Interrupts_Attach+0xc>)
   b985c:	681b      	ldr	r3, [r3, #0]
   b985e:	699b      	ldr	r3, [r3, #24]
   b9860:	9301      	str	r3, [sp, #4]
   b9862:	bd08      	pop	{r3, pc}
   b9864:	0003022c 	.word	0x0003022c

000b9868 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b9868:	b508      	push	{r3, lr}
   b986a:	4b02      	ldr	r3, [pc, #8]	; (b9874 <HAL_Interrupts_Detach+0xc>)
   b986c:	681b      	ldr	r3, [r3, #0]
   b986e:	69db      	ldr	r3, [r3, #28]
   b9870:	9301      	str	r3, [sp, #4]
   b9872:	bd08      	pop	{r3, pc}
   b9874:	0003022c 	.word	0x0003022c

000b9878 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b9878:	b508      	push	{r3, lr}
   b987a:	4b02      	ldr	r3, [pc, #8]	; (b9884 <hal_adc_read+0xc>)
   b987c:	681b      	ldr	r3, [r3, #0]
   b987e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9880:	9301      	str	r3, [sp, #4]
   b9882:	bd08      	pop	{r3, pc}
   b9884:	0003022c 	.word	0x0003022c

000b9888 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b9888:	b508      	push	{r3, lr}
   b988a:	4b02      	ldr	r3, [pc, #8]	; (b9894 <HAL_RNG_GetRandomNumber+0xc>)
   b988c:	681b      	ldr	r3, [r3, #0]
   b988e:	685b      	ldr	r3, [r3, #4]
   b9890:	9301      	str	r3, [sp, #4]
   b9892:	bd08      	pop	{r3, pc}
   b9894:	00030218 	.word	0x00030218

000b9898 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b9898:	b508      	push	{r3, lr}
   b989a:	4b02      	ldr	r3, [pc, #8]	; (b98a4 <HAL_Delay_Microseconds+0xc>)
   b989c:	681b      	ldr	r3, [r3, #0]
   b989e:	68db      	ldr	r3, [r3, #12]
   b98a0:	9301      	str	r3, [sp, #4]
   b98a2:	bd08      	pop	{r3, pc}
   b98a4:	00030218 	.word	0x00030218

000b98a8 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b98a8:	b508      	push	{r3, lr}
   b98aa:	4b02      	ldr	r3, [pc, #8]	; (b98b4 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b98ac:	681b      	ldr	r3, [r3, #0]
   b98ae:	691b      	ldr	r3, [r3, #16]
   b98b0:	9301      	str	r3, [sp, #4]
   b98b2:	bd08      	pop	{r3, pc}
   b98b4:	00030218 	.word	0x00030218

000b98b8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b98b8:	b508      	push	{r3, lr}
   b98ba:	4b02      	ldr	r3, [pc, #8]	; (b98c4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b98bc:	681b      	ldr	r3, [r3, #0]
   b98be:	695b      	ldr	r3, [r3, #20]
   b98c0:	9301      	str	r3, [sp, #4]
   b98c2:	bd08      	pop	{r3, pc}
   b98c4:	00030218 	.word	0x00030218

000b98c8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b98c8:	b508      	push	{r3, lr}
   b98ca:	4b02      	ldr	r3, [pc, #8]	; (b98d4 <hal_rtc_time_is_valid+0xc>)
   b98cc:	681b      	ldr	r3, [r3, #0]
   b98ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b98d0:	9301      	str	r3, [sp, #4]
   b98d2:	bd08      	pop	{r3, pc}
   b98d4:	00030218 	.word	0x00030218

000b98d8 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b98d8:	b508      	push	{r3, lr}
   b98da:	4b02      	ldr	r3, [pc, #8]	; (b98e4 <hal_rtc_get_time+0xc>)
   b98dc:	681b      	ldr	r3, [r3, #0]
   b98de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b98e0:	9301      	str	r3, [sp, #4]
   b98e2:	bd08      	pop	{r3, pc}
   b98e4:	00030218 	.word	0x00030218

000b98e8 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b98e8:	b508      	push	{r3, lr}
   b98ea:	4b02      	ldr	r3, [pc, #8]	; (b98f4 <hal_ble_stack_init+0xc>)
   b98ec:	681b      	ldr	r3, [r3, #0]
   b98ee:	689b      	ldr	r3, [r3, #8]
   b98f0:	9301      	str	r3, [sp, #4]
   b98f2:	bd08      	pop	{r3, pc}
   b98f4:	00030278 	.word	0x00030278

000b98f8 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   b98f8:	b508      	push	{r3, lr}
   b98fa:	4b02      	ldr	r3, [pc, #8]	; (b9904 <hal_ble_gap_set_tx_power+0xc>)
   b98fc:	681b      	ldr	r3, [r3, #0]
   b98fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9900:	9301      	str	r3, [sp, #4]
   b9902:	bd08      	pop	{r3, pc}
   b9904:	00030278 	.word	0x00030278

000b9908 <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   b9908:	b508      	push	{r3, lr}
   b990a:	4b02      	ldr	r3, [pc, #8]	; (b9914 <hal_ble_gap_set_scan_parameters+0xc>)
   b990c:	681b      	ldr	r3, [r3, #0]
   b990e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b9910:	9301      	str	r3, [sp, #4]
   b9912:	bd08      	pop	{r3, pc}
   b9914:	00030278 	.word	0x00030278

000b9918 <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   b9918:	b508      	push	{r3, lr}
   b991a:	4b02      	ldr	r3, [pc, #8]	; (b9924 <hal_ble_gap_get_scan_parameters+0xc>)
   b991c:	681b      	ldr	r3, [r3, #0]
   b991e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b9920:	9301      	str	r3, [sp, #4]
   b9922:	bd08      	pop	{r3, pc}
   b9924:	00030278 	.word	0x00030278

000b9928 <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b9928:	b508      	push	{r3, lr}
   b992a:	4b02      	ldr	r3, [pc, #8]	; (b9934 <hal_ble_gap_start_scan+0xc>)
   b992c:	681b      	ldr	r3, [r3, #0]
   b992e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9930:	9301      	str	r3, [sp, #4]
   b9932:	bd08      	pop	{r3, pc}
   b9934:	00030278 	.word	0x00030278

000b9938 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b9938:	b508      	push	{r3, lr}
   b993a:	4b03      	ldr	r3, [pc, #12]	; (b9948 <hal_ble_gap_stop_scan+0x10>)
   b993c:	681b      	ldr	r3, [r3, #0]
   b993e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b9942:	9301      	str	r3, [sp, #4]
   b9944:	bd08      	pop	{r3, pc}
   b9946:	0000      	.short	0x0000
   b9948:	00030278 	.word	0x00030278

000b994c <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b994c:	b508      	push	{r3, lr}
   b994e:	4b03      	ldr	r3, [pc, #12]	; (b995c <hal_ble_gap_disconnect+0x10>)
   b9950:	681b      	ldr	r3, [r3, #0]
   b9952:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b9956:	9301      	str	r3, [sp, #4]
   b9958:	bd08      	pop	{r3, pc}
   b995a:	0000      	.short	0x0000
   b995c:	00030278 	.word	0x00030278

000b9960 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9960:	b508      	push	{r3, lr}
   b9962:	4b03      	ldr	r3, [pc, #12]	; (b9970 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b9964:	681b      	ldr	r3, [r3, #0]
   b9966:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b996a:	9301      	str	r3, [sp, #4]
   b996c:	bd08      	pop	{r3, pc}
   b996e:	0000      	.short	0x0000
   b9970:	00030278 	.word	0x00030278

000b9974 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b9974:	b508      	push	{r3, lr}
   b9976:	4b03      	ldr	r3, [pc, #12]	; (b9984 <hal_ble_gatt_client_discover_all_services+0x10>)
   b9978:	681b      	ldr	r3, [r3, #0]
   b997a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b997e:	9301      	str	r3, [sp, #4]
   b9980:	bd08      	pop	{r3, pc}
   b9982:	0000      	.short	0x0000
   b9984:	00030278 	.word	0x00030278

000b9988 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b9988:	b508      	push	{r3, lr}
   b998a:	4b03      	ldr	r3, [pc, #12]	; (b9998 <hal_ble_gatt_client_discover_characteristics+0x10>)
   b998c:	681b      	ldr	r3, [r3, #0]
   b998e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b9992:	9301      	str	r3, [sp, #4]
   b9994:	bd08      	pop	{r3, pc}
   b9996:	0000      	.short	0x0000
   b9998:	00030278 	.word	0x00030278

000b999c <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b999c:	b508      	push	{r3, lr}
   b999e:	4b03      	ldr	r3, [pc, #12]	; (b99ac <hal_ble_gatt_client_write_with_response+0x10>)
   b99a0:	681b      	ldr	r3, [r3, #0]
   b99a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b99a6:	9301      	str	r3, [sp, #4]
   b99a8:	bd08      	pop	{r3, pc}
   b99aa:	0000      	.short	0x0000
   b99ac:	00030278 	.word	0x00030278

000b99b0 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b99b0:	b508      	push	{r3, lr}
   b99b2:	4b03      	ldr	r3, [pc, #12]	; (b99c0 <hal_ble_gatt_client_write_without_response+0x10>)
   b99b4:	681b      	ldr	r3, [r3, #0]
   b99b6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b99ba:	9301      	str	r3, [sp, #4]
   b99bc:	bd08      	pop	{r3, pc}
   b99be:	0000      	.short	0x0000
   b99c0:	00030278 	.word	0x00030278

000b99c4 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b99c4:	b508      	push	{r3, lr}
   b99c6:	4b03      	ldr	r3, [pc, #12]	; (b99d4 <hal_ble_gatt_client_read+0x10>)
   b99c8:	681b      	ldr	r3, [r3, #0]
   b99ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b99ce:	9301      	str	r3, [sp, #4]
   b99d0:	bd08      	pop	{r3, pc}
   b99d2:	0000      	.short	0x0000
   b99d4:	00030278 	.word	0x00030278

000b99d8 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b99d8:	b508      	push	{r3, lr}
   b99da:	4b03      	ldr	r3, [pc, #12]	; (b99e8 <hal_ble_gap_connect+0x10>)
   b99dc:	681b      	ldr	r3, [r3, #0]
   b99de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b99e2:	9301      	str	r3, [sp, #4]
   b99e4:	bd08      	pop	{r3, pc}
   b99e6:	0000      	.short	0x0000
   b99e8:	00030278 	.word	0x00030278

000b99ec <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b99ec:	b508      	push	{r3, lr}
   b99ee:	4b03      	ldr	r3, [pc, #12]	; (b99fc <hal_ble_set_callback_on_periph_link_events+0x10>)
   b99f0:	681b      	ldr	r3, [r3, #0]
   b99f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b99f6:	9301      	str	r3, [sp, #4]
   b99f8:	bd08      	pop	{r3, pc}
   b99fa:	0000      	.short	0x0000
   b99fc:	00030278 	.word	0x00030278

000b9a00 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b9a00:	b508      	push	{r3, lr}
   b9a02:	4b03      	ldr	r3, [pc, #12]	; (b9a10 <hal_ble_gatt_client_configure_cccd+0x10>)
   b9a04:	681b      	ldr	r3, [r3, #0]
   b9a06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b9a0a:	9301      	str	r3, [sp, #4]
   b9a0c:	bd08      	pop	{r3, pc}
   b9a0e:	0000      	.short	0x0000
   b9a10:	00030278 	.word	0x00030278

000b9a14 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9a14:	b508      	push	{r3, lr}
   b9a16:	4b03      	ldr	r3, [pc, #12]	; (b9a24 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b9a18:	681b      	ldr	r3, [r3, #0]
   b9a1a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b9a1e:	9301      	str	r3, [sp, #4]
   b9a20:	bd08      	pop	{r3, pc}
   b9a22:	0000      	.short	0x0000
   b9a24:	00030278 	.word	0x00030278

000b9a28 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9a28:	b508      	push	{r3, lr}
   b9a2a:	4b03      	ldr	r3, [pc, #12]	; (b9a38 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b9a2c:	681b      	ldr	r3, [r3, #0]
   b9a2e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b9a32:	9301      	str	r3, [sp, #4]
   b9a34:	bd08      	pop	{r3, pc}
   b9a36:	0000      	.short	0x0000
   b9a38:	00030278 	.word	0x00030278

000b9a3c <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b9a3c:	b508      	push	{r3, lr}
   b9a3e:	4b02      	ldr	r3, [pc, #8]	; (b9a48 <os_thread_yield+0xc>)
   b9a40:	681b      	ldr	r3, [r3, #0]
   b9a42:	68db      	ldr	r3, [r3, #12]
   b9a44:	9301      	str	r3, [sp, #4]
   b9a46:	bd08      	pop	{r3, pc}
   b9a48:	00030248 	.word	0x00030248

000b9a4c <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b9a4c:	b508      	push	{r3, lr}
   b9a4e:	4b02      	ldr	r3, [pc, #8]	; (b9a58 <os_thread_scheduling+0xc>)
   b9a50:	681b      	ldr	r3, [r3, #0]
   b9a52:	69db      	ldr	r3, [r3, #28]
   b9a54:	9301      	str	r3, [sp, #4]
   b9a56:	bd08      	pop	{r3, pc}
   b9a58:	00030248 	.word	0x00030248

000b9a5c <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b9a5c:	b508      	push	{r3, lr}
   b9a5e:	4b02      	ldr	r3, [pc, #8]	; (b9a68 <os_timer_create+0xc>)
   b9a60:	681b      	ldr	r3, [r3, #0]
   b9a62:	6a1b      	ldr	r3, [r3, #32]
   b9a64:	9301      	str	r3, [sp, #4]
   b9a66:	bd08      	pop	{r3, pc}
   b9a68:	00030248 	.word	0x00030248

000b9a6c <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b9a6c:	b508      	push	{r3, lr}
   b9a6e:	4b02      	ldr	r3, [pc, #8]	; (b9a78 <os_timer_destroy+0xc>)
   b9a70:	681b      	ldr	r3, [r3, #0]
   b9a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9a74:	9301      	str	r3, [sp, #4]
   b9a76:	bd08      	pop	{r3, pc}
   b9a78:	00030248 	.word	0x00030248

000b9a7c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b9a7c:	b508      	push	{r3, lr}
   b9a7e:	4b02      	ldr	r3, [pc, #8]	; (b9a88 <os_timer_get_id+0xc>)
   b9a80:	681b      	ldr	r3, [r3, #0]
   b9a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9a84:	9301      	str	r3, [sp, #4]
   b9a86:	bd08      	pop	{r3, pc}
   b9a88:	00030248 	.word	0x00030248

000b9a8c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b9a8c:	b508      	push	{r3, lr}
   b9a8e:	4b02      	ldr	r3, [pc, #8]	; (b9a98 <os_timer_change+0xc>)
   b9a90:	681b      	ldr	r3, [r3, #0]
   b9a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9a94:	9301      	str	r3, [sp, #4]
   b9a96:	bd08      	pop	{r3, pc}
   b9a98:	00030248 	.word	0x00030248

000b9a9c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b9a9c:	b508      	push	{r3, lr}
   b9a9e:	4b02      	ldr	r3, [pc, #8]	; (b9aa8 <os_mutex_recursive_create+0xc>)
   b9aa0:	681b      	ldr	r3, [r3, #0]
   b9aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9aa4:	9301      	str	r3, [sp, #4]
   b9aa6:	bd08      	pop	{r3, pc}
   b9aa8:	00030248 	.word	0x00030248

000b9aac <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b9aac:	b508      	push	{r3, lr}
   b9aae:	4b02      	ldr	r3, [pc, #8]	; (b9ab8 <os_mutex_recursive_lock+0xc>)
   b9ab0:	681b      	ldr	r3, [r3, #0]
   b9ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9ab4:	9301      	str	r3, [sp, #4]
   b9ab6:	bd08      	pop	{r3, pc}
   b9ab8:	00030248 	.word	0x00030248

000b9abc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b9abc:	b508      	push	{r3, lr}
   b9abe:	4b02      	ldr	r3, [pc, #8]	; (b9ac8 <os_mutex_recursive_unlock+0xc>)
   b9ac0:	681b      	ldr	r3, [r3, #0]
   b9ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b9ac4:	9301      	str	r3, [sp, #4]
   b9ac6:	bd08      	pop	{r3, pc}
   b9ac8:	00030248 	.word	0x00030248

000b9acc <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b9acc:	b508      	push	{r3, lr}
   b9ace:	4b02      	ldr	r3, [pc, #8]	; (b9ad8 <os_timer_set_id+0xc>)
   b9ad0:	681b      	ldr	r3, [r3, #0]
   b9ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b9ad4:	9301      	str	r3, [sp, #4]
   b9ad6:	bd08      	pop	{r3, pc}
   b9ad8:	00030248 	.word	0x00030248

000b9adc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b9adc:	b508      	push	{r3, lr}
   b9ade:	4b02      	ldr	r3, [pc, #8]	; (b9ae8 <inet_inet_ntop+0xc>)
   b9ae0:	681b      	ldr	r3, [r3, #0]
   b9ae2:	695b      	ldr	r3, [r3, #20]
   b9ae4:	9301      	str	r3, [sp, #4]
   b9ae6:	bd08      	pop	{r3, pc}
   b9ae8:	00030264 	.word	0x00030264

000b9aec <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b9aec:	b508      	push	{r3, lr}
   b9aee:	4b02      	ldr	r3, [pc, #8]	; (b9af8 <hal_usart_write+0xc>)
   b9af0:	681b      	ldr	r3, [r3, #0]
   b9af2:	68db      	ldr	r3, [r3, #12]
   b9af4:	9301      	str	r3, [sp, #4]
   b9af6:	bd08      	pop	{r3, pc}
   b9af8:	0003023c 	.word	0x0003023c

000b9afc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b9afc:	b508      	push	{r3, lr}
   b9afe:	4b02      	ldr	r3, [pc, #8]	; (b9b08 <hal_usart_available+0xc>)
   b9b00:	681b      	ldr	r3, [r3, #0]
   b9b02:	691b      	ldr	r3, [r3, #16]
   b9b04:	9301      	str	r3, [sp, #4]
   b9b06:	bd08      	pop	{r3, pc}
   b9b08:	0003023c 	.word	0x0003023c

000b9b0c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b9b0c:	b508      	push	{r3, lr}
   b9b0e:	4b02      	ldr	r3, [pc, #8]	; (b9b18 <hal_usart_read+0xc>)
   b9b10:	681b      	ldr	r3, [r3, #0]
   b9b12:	695b      	ldr	r3, [r3, #20]
   b9b14:	9301      	str	r3, [sp, #4]
   b9b16:	bd08      	pop	{r3, pc}
   b9b18:	0003023c 	.word	0x0003023c

000b9b1c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b9b1c:	b508      	push	{r3, lr}
   b9b1e:	4b02      	ldr	r3, [pc, #8]	; (b9b28 <hal_usart_peek+0xc>)
   b9b20:	681b      	ldr	r3, [r3, #0]
   b9b22:	699b      	ldr	r3, [r3, #24]
   b9b24:	9301      	str	r3, [sp, #4]
   b9b26:	bd08      	pop	{r3, pc}
   b9b28:	0003023c 	.word	0x0003023c

000b9b2c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b9b2c:	b508      	push	{r3, lr}
   b9b2e:	4b02      	ldr	r3, [pc, #8]	; (b9b38 <hal_usart_flush+0xc>)
   b9b30:	681b      	ldr	r3, [r3, #0]
   b9b32:	69db      	ldr	r3, [r3, #28]
   b9b34:	9301      	str	r3, [sp, #4]
   b9b36:	bd08      	pop	{r3, pc}
   b9b38:	0003023c 	.word	0x0003023c

000b9b3c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b9b3c:	b508      	push	{r3, lr}
   b9b3e:	4b02      	ldr	r3, [pc, #8]	; (b9b48 <hal_usart_is_enabled+0xc>)
   b9b40:	681b      	ldr	r3, [r3, #0]
   b9b42:	6a1b      	ldr	r3, [r3, #32]
   b9b44:	9301      	str	r3, [sp, #4]
   b9b46:	bd08      	pop	{r3, pc}
   b9b48:	0003023c 	.word	0x0003023c

000b9b4c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b9b4c:	b508      	push	{r3, lr}
   b9b4e:	4b02      	ldr	r3, [pc, #8]	; (b9b58 <hal_usart_available_data_for_write+0xc>)
   b9b50:	681b      	ldr	r3, [r3, #0]
   b9b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9b54:	9301      	str	r3, [sp, #4]
   b9b56:	bd08      	pop	{r3, pc}
   b9b58:	0003023c 	.word	0x0003023c

000b9b5c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b9b5c:	b508      	push	{r3, lr}
   b9b5e:	4b02      	ldr	r3, [pc, #8]	; (b9b68 <hal_usart_begin_config+0xc>)
   b9b60:	681b      	ldr	r3, [r3, #0]
   b9b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9b64:	9301      	str	r3, [sp, #4]
   b9b66:	bd08      	pop	{r3, pc}
   b9b68:	0003023c 	.word	0x0003023c

000b9b6c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b9b6c:	b508      	push	{r3, lr}
   b9b6e:	4b02      	ldr	r3, [pc, #8]	; (b9b78 <hal_usart_init_ex+0xc>)
   b9b70:	681b      	ldr	r3, [r3, #0]
   b9b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9b74:	9301      	str	r3, [sp, #4]
   b9b76:	bd08      	pop	{r3, pc}
   b9b78:	0003023c 	.word	0x0003023c

000b9b7c <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b9b7c:	b508      	push	{r3, lr}
   b9b7e:	4b02      	ldr	r3, [pc, #8]	; (b9b88 <hal_i2c_set_speed+0xc>)
   b9b80:	681b      	ldr	r3, [r3, #0]
   b9b82:	681b      	ldr	r3, [r3, #0]
   b9b84:	9301      	str	r3, [sp, #4]
   b9b86:	bd08      	pop	{r3, pc}
   b9b88:	00030228 	.word	0x00030228

000b9b8c <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b9b8c:	b508      	push	{r3, lr}
   b9b8e:	4b02      	ldr	r3, [pc, #8]	; (b9b98 <hal_i2c_begin+0xc>)
   b9b90:	681b      	ldr	r3, [r3, #0]
   b9b92:	68db      	ldr	r3, [r3, #12]
   b9b94:	9301      	str	r3, [sp, #4]
   b9b96:	bd08      	pop	{r3, pc}
   b9b98:	00030228 	.word	0x00030228

000b9b9c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b9b9c:	b508      	push	{r3, lr}
   b9b9e:	4b02      	ldr	r3, [pc, #8]	; (b9ba8 <hal_i2c_begin_transmission+0xc>)
   b9ba0:	681b      	ldr	r3, [r3, #0]
   b9ba2:	699b      	ldr	r3, [r3, #24]
   b9ba4:	9301      	str	r3, [sp, #4]
   b9ba6:	bd08      	pop	{r3, pc}
   b9ba8:	00030228 	.word	0x00030228

000b9bac <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b9bac:	b508      	push	{r3, lr}
   b9bae:	4b02      	ldr	r3, [pc, #8]	; (b9bb8 <hal_i2c_end_transmission+0xc>)
   b9bb0:	681b      	ldr	r3, [r3, #0]
   b9bb2:	69db      	ldr	r3, [r3, #28]
   b9bb4:	9301      	str	r3, [sp, #4]
   b9bb6:	bd08      	pop	{r3, pc}
   b9bb8:	00030228 	.word	0x00030228

000b9bbc <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b9bbc:	b508      	push	{r3, lr}
   b9bbe:	4b02      	ldr	r3, [pc, #8]	; (b9bc8 <hal_i2c_write+0xc>)
   b9bc0:	681b      	ldr	r3, [r3, #0]
   b9bc2:	6a1b      	ldr	r3, [r3, #32]
   b9bc4:	9301      	str	r3, [sp, #4]
   b9bc6:	bd08      	pop	{r3, pc}
   b9bc8:	00030228 	.word	0x00030228

000b9bcc <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b9bcc:	b508      	push	{r3, lr}
   b9bce:	4b02      	ldr	r3, [pc, #8]	; (b9bd8 <hal_i2c_available+0xc>)
   b9bd0:	681b      	ldr	r3, [r3, #0]
   b9bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9bd4:	9301      	str	r3, [sp, #4]
   b9bd6:	bd08      	pop	{r3, pc}
   b9bd8:	00030228 	.word	0x00030228

000b9bdc <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b9bdc:	b508      	push	{r3, lr}
   b9bde:	4b02      	ldr	r3, [pc, #8]	; (b9be8 <hal_i2c_read+0xc>)
   b9be0:	681b      	ldr	r3, [r3, #0]
   b9be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9be4:	9301      	str	r3, [sp, #4]
   b9be6:	bd08      	pop	{r3, pc}
   b9be8:	00030228 	.word	0x00030228

000b9bec <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b9bec:	b508      	push	{r3, lr}
   b9bee:	4b02      	ldr	r3, [pc, #8]	; (b9bf8 <hal_i2c_peek+0xc>)
   b9bf0:	681b      	ldr	r3, [r3, #0]
   b9bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9bf4:	9301      	str	r3, [sp, #4]
   b9bf6:	bd08      	pop	{r3, pc}
   b9bf8:	00030228 	.word	0x00030228

000b9bfc <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b9bfc:	b508      	push	{r3, lr}
   b9bfe:	4b02      	ldr	r3, [pc, #8]	; (b9c08 <hal_i2c_flush+0xc>)
   b9c00:	681b      	ldr	r3, [r3, #0]
   b9c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9c04:	9301      	str	r3, [sp, #4]
   b9c06:	bd08      	pop	{r3, pc}
   b9c08:	00030228 	.word	0x00030228

000b9c0c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b9c0c:	b508      	push	{r3, lr}
   b9c0e:	4b02      	ldr	r3, [pc, #8]	; (b9c18 <hal_i2c_is_enabled+0xc>)
   b9c10:	681b      	ldr	r3, [r3, #0]
   b9c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9c14:	9301      	str	r3, [sp, #4]
   b9c16:	bd08      	pop	{r3, pc}
   b9c18:	00030228 	.word	0x00030228

000b9c1c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b9c1c:	b508      	push	{r3, lr}
   b9c1e:	4b02      	ldr	r3, [pc, #8]	; (b9c28 <hal_i2c_init+0xc>)
   b9c20:	681b      	ldr	r3, [r3, #0]
   b9c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9c24:	9301      	str	r3, [sp, #4]
   b9c26:	bd08      	pop	{r3, pc}
   b9c28:	00030228 	.word	0x00030228

000b9c2c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b9c2c:	b508      	push	{r3, lr}
   b9c2e:	4b02      	ldr	r3, [pc, #8]	; (b9c38 <hal_spi_begin+0xc>)
   b9c30:	681b      	ldr	r3, [r3, #0]
   b9c32:	681b      	ldr	r3, [r3, #0]
   b9c34:	9301      	str	r3, [sp, #4]
   b9c36:	bd08      	pop	{r3, pc}
   b9c38:	00030230 	.word	0x00030230

000b9c3c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b9c3c:	b508      	push	{r3, lr}
   b9c3e:	4b02      	ldr	r3, [pc, #8]	; (b9c48 <hal_spi_transfer+0xc>)
   b9c40:	681b      	ldr	r3, [r3, #0]
   b9c42:	695b      	ldr	r3, [r3, #20]
   b9c44:	9301      	str	r3, [sp, #4]
   b9c46:	bd08      	pop	{r3, pc}
   b9c48:	00030230 	.word	0x00030230

000b9c4c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b9c4c:	b508      	push	{r3, lr}
   b9c4e:	4b02      	ldr	r3, [pc, #8]	; (b9c58 <hal_spi_init+0xc>)
   b9c50:	681b      	ldr	r3, [r3, #0]
   b9c52:	69db      	ldr	r3, [r3, #28]
   b9c54:	9301      	str	r3, [sp, #4]
   b9c56:	bd08      	pop	{r3, pc}
   b9c58:	00030230 	.word	0x00030230

000b9c5c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b9c5c:	b508      	push	{r3, lr}
   b9c5e:	4b02      	ldr	r3, [pc, #8]	; (b9c68 <hal_spi_is_enabled+0xc>)
   b9c60:	681b      	ldr	r3, [r3, #0]
   b9c62:	6a1b      	ldr	r3, [r3, #32]
   b9c64:	9301      	str	r3, [sp, #4]
   b9c66:	bd08      	pop	{r3, pc}
   b9c68:	00030230 	.word	0x00030230

000b9c6c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b9c6c:	b508      	push	{r3, lr}
   b9c6e:	4b02      	ldr	r3, [pc, #8]	; (b9c78 <hal_spi_info+0xc>)
   b9c70:	681b      	ldr	r3, [r3, #0]
   b9c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9c74:	9301      	str	r3, [sp, #4]
   b9c76:	bd08      	pop	{r3, pc}
   b9c78:	00030230 	.word	0x00030230

000b9c7c <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b9c7c:	b508      	push	{r3, lr}
   b9c7e:	4b02      	ldr	r3, [pc, #8]	; (b9c88 <hal_spi_transfer_dma+0xc>)
   b9c80:	681b      	ldr	r3, [r3, #0]
   b9c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9c84:	9301      	str	r3, [sp, #4]
   b9c86:	bd08      	pop	{r3, pc}
   b9c88:	00030230 	.word	0x00030230

000b9c8c <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b9c8c:	b508      	push	{r3, lr}
   b9c8e:	4b02      	ldr	r3, [pc, #8]	; (b9c98 <hal_spi_transfer_dma_status+0xc>)
   b9c90:	681b      	ldr	r3, [r3, #0]
   b9c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b9c94:	9301      	str	r3, [sp, #4]
   b9c96:	bd08      	pop	{r3, pc}
   b9c98:	00030230 	.word	0x00030230

000b9c9c <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b9c9c:	b508      	push	{r3, lr}
   b9c9e:	4b02      	ldr	r3, [pc, #8]	; (b9ca8 <hal_spi_set_settings+0xc>)
   b9ca0:	681b      	ldr	r3, [r3, #0]
   b9ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9ca4:	9301      	str	r3, [sp, #4]
   b9ca6:	bd08      	pop	{r3, pc}
   b9ca8:	00030230 	.word	0x00030230

000b9cac <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b9cac:	b508      	push	{r3, lr}
   b9cae:	4b02      	ldr	r3, [pc, #8]	; (b9cb8 <hal_spi_acquire+0xc>)
   b9cb0:	681b      	ldr	r3, [r3, #0]
   b9cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9cb4:	9301      	str	r3, [sp, #4]
   b9cb6:	bd08      	pop	{r3, pc}
   b9cb8:	00030230 	.word	0x00030230

000b9cbc <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b9cbc:	b508      	push	{r3, lr}
   b9cbe:	4b02      	ldr	r3, [pc, #8]	; (b9cc8 <hal_spi_release+0xc>)
   b9cc0:	681b      	ldr	r3, [r3, #0]
   b9cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9cc4:	9301      	str	r3, [sp, #4]
   b9cc6:	bd08      	pop	{r3, pc}
   b9cc8:	00030230 	.word	0x00030230

000b9ccc <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b9ccc:	b508      	push	{r3, lr}
   b9cce:	4b02      	ldr	r3, [pc, #8]	; (b9cd8 <HAL_USB_USART_Init+0xc>)
   b9cd0:	681b      	ldr	r3, [r3, #0]
   b9cd2:	681b      	ldr	r3, [r3, #0]
   b9cd4:	9301      	str	r3, [sp, #4]
   b9cd6:	bd08      	pop	{r3, pc}
   b9cd8:	0003024c 	.word	0x0003024c

000b9cdc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b9cdc:	b508      	push	{r3, lr}
   b9cde:	4b02      	ldr	r3, [pc, #8]	; (b9ce8 <HAL_USB_USART_Begin+0xc>)
   b9ce0:	681b      	ldr	r3, [r3, #0]
   b9ce2:	685b      	ldr	r3, [r3, #4]
   b9ce4:	9301      	str	r3, [sp, #4]
   b9ce6:	bd08      	pop	{r3, pc}
   b9ce8:	0003024c 	.word	0x0003024c

000b9cec <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b9cec:	b508      	push	{r3, lr}
   b9cee:	4b02      	ldr	r3, [pc, #8]	; (b9cf8 <HAL_USB_USART_Available_Data+0xc>)
   b9cf0:	681b      	ldr	r3, [r3, #0]
   b9cf2:	691b      	ldr	r3, [r3, #16]
   b9cf4:	9301      	str	r3, [sp, #4]
   b9cf6:	bd08      	pop	{r3, pc}
   b9cf8:	0003024c 	.word	0x0003024c

000b9cfc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b9cfc:	b508      	push	{r3, lr}
   b9cfe:	4b02      	ldr	r3, [pc, #8]	; (b9d08 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b9d00:	681b      	ldr	r3, [r3, #0]
   b9d02:	695b      	ldr	r3, [r3, #20]
   b9d04:	9301      	str	r3, [sp, #4]
   b9d06:	bd08      	pop	{r3, pc}
   b9d08:	0003024c 	.word	0x0003024c

000b9d0c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9d0c:	b508      	push	{r3, lr}
   b9d0e:	4b02      	ldr	r3, [pc, #8]	; (b9d18 <HAL_USB_USART_Receive_Data+0xc>)
   b9d10:	681b      	ldr	r3, [r3, #0]
   b9d12:	699b      	ldr	r3, [r3, #24]
   b9d14:	9301      	str	r3, [sp, #4]
   b9d16:	bd08      	pop	{r3, pc}
   b9d18:	0003024c 	.word	0x0003024c

000b9d1c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9d1c:	b508      	push	{r3, lr}
   b9d1e:	4b02      	ldr	r3, [pc, #8]	; (b9d28 <HAL_USB_USART_Send_Data+0xc>)
   b9d20:	681b      	ldr	r3, [r3, #0]
   b9d22:	69db      	ldr	r3, [r3, #28]
   b9d24:	9301      	str	r3, [sp, #4]
   b9d26:	bd08      	pop	{r3, pc}
   b9d28:	0003024c 	.word	0x0003024c

000b9d2c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b9d2c:	b508      	push	{r3, lr}
   b9d2e:	4b02      	ldr	r3, [pc, #8]	; (b9d38 <HAL_USB_USART_Flush_Data+0xc>)
   b9d30:	681b      	ldr	r3, [r3, #0]
   b9d32:	6a1b      	ldr	r3, [r3, #32]
   b9d34:	9301      	str	r3, [sp, #4]
   b9d36:	bd08      	pop	{r3, pc}
   b9d38:	0003024c 	.word	0x0003024c

000b9d3c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b9d3c:	b508      	push	{r3, lr}
   b9d3e:	4b02      	ldr	r3, [pc, #8]	; (b9d48 <panic_+0xc>)
   b9d40:	681b      	ldr	r3, [r3, #0]
   b9d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9d44:	9301      	str	r3, [sp, #4]
   b9d46:	bd08      	pop	{r3, pc}
   b9d48:	00030260 	.word	0x00030260

000b9d4c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b9d4c:	b508      	push	{r3, lr}
   b9d4e:	4b02      	ldr	r3, [pc, #8]	; (b9d58 <log_message+0xc>)
   b9d50:	681b      	ldr	r3, [r3, #0]
   b9d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b9d54:	9301      	str	r3, [sp, #4]
   b9d56:	bd08      	pop	{r3, pc}
   b9d58:	00030260 	.word	0x00030260

000b9d5c <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b9d5c:	b508      	push	{r3, lr}
   b9d5e:	4b02      	ldr	r3, [pc, #8]	; (b9d68 <system_mode+0xc>)
   b9d60:	681b      	ldr	r3, [r3, #0]
   b9d62:	681b      	ldr	r3, [r3, #0]
   b9d64:	9301      	str	r3, [sp, #4]
   b9d66:	bd08      	pop	{r3, pc}
   b9d68:	00030220 	.word	0x00030220

000b9d6c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b9d6c:	b508      	push	{r3, lr}
   b9d6e:	4b02      	ldr	r3, [pc, #8]	; (b9d78 <set_system_mode+0xc>)
   b9d70:	681b      	ldr	r3, [r3, #0]
   b9d72:	685b      	ldr	r3, [r3, #4]
   b9d74:	9301      	str	r3, [sp, #4]
   b9d76:	bd08      	pop	{r3, pc}
   b9d78:	00030220 	.word	0x00030220

000b9d7c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b9d7c:	b508      	push	{r3, lr}
   b9d7e:	4b02      	ldr	r3, [pc, #8]	; (b9d88 <system_delay_ms+0xc>)
   b9d80:	681b      	ldr	r3, [r3, #0]
   b9d82:	695b      	ldr	r3, [r3, #20]
   b9d84:	9301      	str	r3, [sp, #4]
   b9d86:	bd08      	pop	{r3, pc}
   b9d88:	00030220 	.word	0x00030220

000b9d8c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b9d8c:	b508      	push	{r3, lr}
   b9d8e:	4b02      	ldr	r3, [pc, #8]	; (b9d98 <application_thread_current+0xc>)
   b9d90:	681b      	ldr	r3, [r3, #0]
   b9d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9d94:	9301      	str	r3, [sp, #4]
   b9d96:	bd08      	pop	{r3, pc}
   b9d98:	00030220 	.word	0x00030220

000b9d9c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b9d9c:	b508      	push	{r3, lr}
   b9d9e:	4b02      	ldr	r3, [pc, #8]	; (b9da8 <application_thread_invoke+0xc>)
   b9da0:	681b      	ldr	r3, [r3, #0]
   b9da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b9da4:	9301      	str	r3, [sp, #4]
   b9da6:	bd08      	pop	{r3, pc}
   b9da8:	00030220 	.word	0x00030220

000b9dac <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b9dac:	b508      	push	{r3, lr}
   b9dae:	4b02      	ldr	r3, [pc, #8]	; (b9db8 <system_thread_get_state+0xc>)
   b9db0:	681b      	ldr	r3, [r3, #0]
   b9db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b9db4:	9301      	str	r3, [sp, #4]
   b9db6:	bd08      	pop	{r3, pc}
   b9db8:	00030220 	.word	0x00030220

000b9dbc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b9dbc:	b508      	push	{r3, lr}
   b9dbe:	4b03      	ldr	r3, [pc, #12]	; (b9dcc <system_ctrl_set_app_request_handler+0x10>)
   b9dc0:	681b      	ldr	r3, [r3, #0]
   b9dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b9dc6:	9301      	str	r3, [sp, #4]
   b9dc8:	bd08      	pop	{r3, pc}
   b9dca:	0000      	.short	0x0000
   b9dcc:	00030220 	.word	0x00030220

000b9dd0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b9dd0:	b508      	push	{r3, lr}
   b9dd2:	4b03      	ldr	r3, [pc, #12]	; (b9de0 <system_ctrl_set_result+0x10>)
   b9dd4:	681b      	ldr	r3, [r3, #0]
   b9dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b9dda:	9301      	str	r3, [sp, #4]
   b9ddc:	bd08      	pop	{r3, pc}
   b9dde:	0000      	.short	0x0000
   b9de0:	00030220 	.word	0x00030220

000b9de4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b9de4:	b508      	push	{r3, lr}
   b9de6:	4b02      	ldr	r3, [pc, #8]	; (b9df0 <network_connect+0xc>)
   b9de8:	681b      	ldr	r3, [r3, #0]
   b9dea:	685b      	ldr	r3, [r3, #4]
   b9dec:	9301      	str	r3, [sp, #4]
   b9dee:	bd08      	pop	{r3, pc}
   b9df0:	00030240 	.word	0x00030240

000b9df4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b9df4:	b508      	push	{r3, lr}
   b9df6:	4b02      	ldr	r3, [pc, #8]	; (b9e00 <network_connecting+0xc>)
   b9df8:	681b      	ldr	r3, [r3, #0]
   b9dfa:	689b      	ldr	r3, [r3, #8]
   b9dfc:	9301      	str	r3, [sp, #4]
   b9dfe:	bd08      	pop	{r3, pc}
   b9e00:	00030240 	.word	0x00030240

000b9e04 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b9e04:	b508      	push	{r3, lr}
   b9e06:	4b02      	ldr	r3, [pc, #8]	; (b9e10 <network_disconnect+0xc>)
   b9e08:	681b      	ldr	r3, [r3, #0]
   b9e0a:	68db      	ldr	r3, [r3, #12]
   b9e0c:	9301      	str	r3, [sp, #4]
   b9e0e:	bd08      	pop	{r3, pc}
   b9e10:	00030240 	.word	0x00030240

000b9e14 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b9e14:	b508      	push	{r3, lr}
   b9e16:	4b02      	ldr	r3, [pc, #8]	; (b9e20 <network_ready+0xc>)
   b9e18:	681b      	ldr	r3, [r3, #0]
   b9e1a:	691b      	ldr	r3, [r3, #16]
   b9e1c:	9301      	str	r3, [sp, #4]
   b9e1e:	bd08      	pop	{r3, pc}
   b9e20:	00030240 	.word	0x00030240

000b9e24 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b9e24:	b508      	push	{r3, lr}
   b9e26:	4b02      	ldr	r3, [pc, #8]	; (b9e30 <network_on+0xc>)
   b9e28:	681b      	ldr	r3, [r3, #0]
   b9e2a:	695b      	ldr	r3, [r3, #20]
   b9e2c:	9301      	str	r3, [sp, #4]
   b9e2e:	bd08      	pop	{r3, pc}
   b9e30:	00030240 	.word	0x00030240

000b9e34 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b9e34:	b508      	push	{r3, lr}
   b9e36:	4b02      	ldr	r3, [pc, #8]	; (b9e40 <network_off+0xc>)
   b9e38:	681b      	ldr	r3, [r3, #0]
   b9e3a:	699b      	ldr	r3, [r3, #24]
   b9e3c:	9301      	str	r3, [sp, #4]
   b9e3e:	bd08      	pop	{r3, pc}
   b9e40:	00030240 	.word	0x00030240

000b9e44 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b9e44:	b508      	push	{r3, lr}
   b9e46:	4b02      	ldr	r3, [pc, #8]	; (b9e50 <network_listen+0xc>)
   b9e48:	681b      	ldr	r3, [r3, #0]
   b9e4a:	69db      	ldr	r3, [r3, #28]
   b9e4c:	9301      	str	r3, [sp, #4]
   b9e4e:	bd08      	pop	{r3, pc}
   b9e50:	00030240 	.word	0x00030240

000b9e54 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b9e54:	b508      	push	{r3, lr}
   b9e56:	4b02      	ldr	r3, [pc, #8]	; (b9e60 <network_listening+0xc>)
   b9e58:	681b      	ldr	r3, [r3, #0]
   b9e5a:	6a1b      	ldr	r3, [r3, #32]
   b9e5c:	9301      	str	r3, [sp, #4]
   b9e5e:	bd08      	pop	{r3, pc}
   b9e60:	00030240 	.word	0x00030240

000b9e64 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b9e64:	b508      	push	{r3, lr}
   b9e66:	4b02      	ldr	r3, [pc, #8]	; (b9e70 <network_set_listen_timeout+0xc>)
   b9e68:	681b      	ldr	r3, [r3, #0]
   b9e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9e6c:	9301      	str	r3, [sp, #4]
   b9e6e:	bd08      	pop	{r3, pc}
   b9e70:	00030240 	.word	0x00030240

000b9e74 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b9e74:	b508      	push	{r3, lr}
   b9e76:	4b02      	ldr	r3, [pc, #8]	; (b9e80 <network_get_listen_timeout+0xc>)
   b9e78:	681b      	ldr	r3, [r3, #0]
   b9e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9e7c:	9301      	str	r3, [sp, #4]
   b9e7e:	bd08      	pop	{r3, pc}
   b9e80:	00030240 	.word	0x00030240

000b9e84 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b9e84:	b508      	push	{r3, lr}
   b9e86:	4b02      	ldr	r3, [pc, #8]	; (b9e90 <network_is_on+0xc>)
   b9e88:	681b      	ldr	r3, [r3, #0]
   b9e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9e8c:	9301      	str	r3, [sp, #4]
   b9e8e:	bd08      	pop	{r3, pc}
   b9e90:	00030240 	.word	0x00030240

000b9e94 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b9e94:	b508      	push	{r3, lr}
   b9e96:	4b02      	ldr	r3, [pc, #8]	; (b9ea0 <network_is_off+0xc>)
   b9e98:	681b      	ldr	r3, [r3, #0]
   b9e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9e9c:	9301      	str	r3, [sp, #4]
   b9e9e:	bd08      	pop	{r3, pc}
   b9ea0:	00030240 	.word	0x00030240

000b9ea4 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   b9ea4:	b508      	push	{r3, lr}
   b9ea6:	4b02      	ldr	r3, [pc, #8]	; (b9eb0 <spark_function+0xc>)
   b9ea8:	681b      	ldr	r3, [r3, #0]
   b9eaa:	685b      	ldr	r3, [r3, #4]
   b9eac:	9301      	str	r3, [sp, #4]
   b9eae:	bd08      	pop	{r3, pc}
   b9eb0:	00030244 	.word	0x00030244

000b9eb4 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b9eb4:	b508      	push	{r3, lr}
   b9eb6:	4b02      	ldr	r3, [pc, #8]	; (b9ec0 <spark_process+0xc>)
   b9eb8:	681b      	ldr	r3, [r3, #0]
   b9eba:	689b      	ldr	r3, [r3, #8]
   b9ebc:	9301      	str	r3, [sp, #4]
   b9ebe:	bd08      	pop	{r3, pc}
   b9ec0:	00030244 	.word	0x00030244

000b9ec4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b9ec4:	b508      	push	{r3, lr}
   b9ec6:	4b02      	ldr	r3, [pc, #8]	; (b9ed0 <spark_cloud_flag_connected+0xc>)
   b9ec8:	681b      	ldr	r3, [r3, #0]
   b9eca:	695b      	ldr	r3, [r3, #20]
   b9ecc:	9301      	str	r3, [sp, #4]
   b9ece:	bd08      	pop	{r3, pc}
   b9ed0:	00030244 	.word	0x00030244

000b9ed4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b9ed4:	b508      	push	{r3, lr}
   b9ed6:	4b02      	ldr	r3, [pc, #8]	; (b9ee0 <spark_send_event+0xc>)
   b9ed8:	681b      	ldr	r3, [r3, #0]
   b9eda:	6a1b      	ldr	r3, [r3, #32]
   b9edc:	9301      	str	r3, [sp, #4]
   b9ede:	bd08      	pop	{r3, pc}
   b9ee0:	00030244 	.word	0x00030244

000b9ee4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b9ee4:	b508      	push	{r3, lr}
   b9ee6:	4b02      	ldr	r3, [pc, #8]	; (b9ef0 <spark_subscribe+0xc>)
   b9ee8:	681b      	ldr	r3, [r3, #0]
   b9eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9eec:	9301      	str	r3, [sp, #4]
   b9eee:	bd08      	pop	{r3, pc}
   b9ef0:	00030244 	.word	0x00030244

000b9ef4 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b9ef4:	b508      	push	{r3, lr}
   b9ef6:	4b02      	ldr	r3, [pc, #8]	; (b9f00 <spark_sync_time_pending+0xc>)
   b9ef8:	681b      	ldr	r3, [r3, #0]
   b9efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9efc:	9301      	str	r3, [sp, #4]
   b9efe:	bd08      	pop	{r3, pc}
   b9f00:	00030244 	.word	0x00030244

000b9f04 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b9f04:	b508      	push	{r3, lr}
   b9f06:	4b02      	ldr	r3, [pc, #8]	; (b9f10 <spark_set_random_seed_from_cloud_handler+0xc>)
   b9f08:	681b      	ldr	r3, [r3, #0]
   b9f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9f0c:	9301      	str	r3, [sp, #4]
   b9f0e:	bd08      	pop	{r3, pc}
   b9f10:	00030244 	.word	0x00030244

000b9f14 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b9f14:	b508      	push	{r3, lr}
   b9f16:	4b02      	ldr	r3, [pc, #8]	; (b9f20 <malloc+0xc>)
   b9f18:	681b      	ldr	r3, [r3, #0]
   b9f1a:	681b      	ldr	r3, [r3, #0]
   b9f1c:	9301      	str	r3, [sp, #4]
   b9f1e:	bd08      	pop	{r3, pc}
   b9f20:	0003021c 	.word	0x0003021c

000b9f24 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b9f24:	b508      	push	{r3, lr}
   b9f26:	4b02      	ldr	r3, [pc, #8]	; (b9f30 <free+0xc>)
   b9f28:	681b      	ldr	r3, [r3, #0]
   b9f2a:	685b      	ldr	r3, [r3, #4]
   b9f2c:	9301      	str	r3, [sp, #4]
   b9f2e:	bd08      	pop	{r3, pc}
   b9f30:	0003021c 	.word	0x0003021c

000b9f34 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b9f34:	b508      	push	{r3, lr}
   b9f36:	4b02      	ldr	r3, [pc, #8]	; (b9f40 <realloc+0xc>)
   b9f38:	681b      	ldr	r3, [r3, #0]
   b9f3a:	689b      	ldr	r3, [r3, #8]
   b9f3c:	9301      	str	r3, [sp, #4]
   b9f3e:	bd08      	pop	{r3, pc}
   b9f40:	0003021c 	.word	0x0003021c

000b9f44 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b9f44:	b508      	push	{r3, lr}
   b9f46:	4b02      	ldr	r3, [pc, #8]	; (b9f50 <sprintf+0xc>)
   b9f48:	681b      	ldr	r3, [r3, #0]
   b9f4a:	68db      	ldr	r3, [r3, #12]
   b9f4c:	9301      	str	r3, [sp, #4]
   b9f4e:	bd08      	pop	{r3, pc}
   b9f50:	0003021c 	.word	0x0003021c

000b9f54 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b9f54:	b508      	push	{r3, lr}
   b9f56:	4b02      	ldr	r3, [pc, #8]	; (b9f60 <sscanf+0xc>)
   b9f58:	681b      	ldr	r3, [r3, #0]
   b9f5a:	695b      	ldr	r3, [r3, #20]
   b9f5c:	9301      	str	r3, [sp, #4]
   b9f5e:	bd08      	pop	{r3, pc}
   b9f60:	0003021c 	.word	0x0003021c

000b9f64 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b9f64:	b508      	push	{r3, lr}
   b9f66:	4b02      	ldr	r3, [pc, #8]	; (b9f70 <snprintf+0xc>)
   b9f68:	681b      	ldr	r3, [r3, #0]
   b9f6a:	69db      	ldr	r3, [r3, #28]
   b9f6c:	9301      	str	r3, [sp, #4]
   b9f6e:	bd08      	pop	{r3, pc}
   b9f70:	0003021c 	.word	0x0003021c

000b9f74 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b9f74:	b508      	push	{r3, lr}
   b9f76:	4b02      	ldr	r3, [pc, #8]	; (b9f80 <vsnprintf+0xc>)
   b9f78:	681b      	ldr	r3, [r3, #0]
   b9f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9f7c:	9301      	str	r3, [sp, #4]
   b9f7e:	bd08      	pop	{r3, pc}
   b9f80:	0003021c 	.word	0x0003021c

000b9f84 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b9f84:	b508      	push	{r3, lr}
   b9f86:	4b02      	ldr	r3, [pc, #8]	; (b9f90 <abort+0xc>)
   b9f88:	681b      	ldr	r3, [r3, #0]
   b9f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9f8c:	9301      	str	r3, [sp, #4]
   b9f8e:	bd08      	pop	{r3, pc}
   b9f90:	0003021c 	.word	0x0003021c

000b9f94 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b9f94:	b508      	push	{r3, lr}
   b9f96:	4b02      	ldr	r3, [pc, #8]	; (b9fa0 <_malloc_r+0xc>)
   b9f98:	681b      	ldr	r3, [r3, #0]
   b9f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9f9c:	9301      	str	r3, [sp, #4]
   b9f9e:	bd08      	pop	{r3, pc}
   b9fa0:	0003021c 	.word	0x0003021c

000b9fa4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b9fa4:	b508      	push	{r3, lr}
   b9fa6:	4b02      	ldr	r3, [pc, #8]	; (b9fb0 <__errno+0xc>)
   b9fa8:	681b      	ldr	r3, [r3, #0]
   b9faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9fac:	9301      	str	r3, [sp, #4]
   b9fae:	bd08      	pop	{r3, pc}
   b9fb0:	0003021c 	.word	0x0003021c

000b9fb4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b9fb4:	b508      	push	{r3, lr}
   b9fb6:	4b02      	ldr	r3, [pc, #8]	; (b9fc0 <__assert_func+0xc>)
   b9fb8:	681b      	ldr	r3, [r3, #0]
   b9fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9fbc:	9301      	str	r3, [sp, #4]
   b9fbe:	bd08      	pop	{r3, pc}
   b9fc0:	0003021c 	.word	0x0003021c

000b9fc4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b9fc4:	b508      	push	{r3, lr}
   b9fc6:	4b02      	ldr	r3, [pc, #8]	; (b9fd0 <newlib_impure_ptr_callback+0xc>)
   b9fc8:	681b      	ldr	r3, [r3, #0]
   b9fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9fcc:	9301      	str	r3, [sp, #4]
   b9fce:	bd08      	pop	{r3, pc}
   b9fd0:	0003021c 	.word	0x0003021c

000b9fd4 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b9fd4:	b508      	push	{r3, lr}
   b9fd6:	4b02      	ldr	r3, [pc, #8]	; (b9fe0 <localtime_r+0xc>)
   b9fd8:	681b      	ldr	r3, [r3, #0]
   b9fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9fdc:	9301      	str	r3, [sp, #4]
   b9fde:	bd08      	pop	{r3, pc}
   b9fe0:	0003021c 	.word	0x0003021c

000b9fe4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9fe4:	2200      	movs	r2, #0
   b9fe6:	6840      	ldr	r0, [r0, #4]
   b9fe8:	4611      	mov	r1, r2
   b9fea:	f7ff bf33 	b.w	b9e54 <network_listening>

000b9fee <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9fee:	2200      	movs	r2, #0
   b9ff0:	6840      	ldr	r0, [r0, #4]
   b9ff2:	4611      	mov	r1, r2
   b9ff4:	f7ff bf3e 	b.w	b9e74 <network_get_listen_timeout>

000b9ff8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9ff8:	6840      	ldr	r0, [r0, #4]
   b9ffa:	2200      	movs	r2, #0
   b9ffc:	f7ff bf32 	b.w	b9e64 <network_set_listen_timeout>

000ba000 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   ba000:	6840      	ldr	r0, [r0, #4]
   ba002:	2200      	movs	r2, #0
   ba004:	f081 0101 	eor.w	r1, r1, #1
   ba008:	f7ff bf1c 	b.w	b9e44 <network_listen>

000ba00c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   ba00c:	2300      	movs	r3, #0
   ba00e:	6840      	ldr	r0, [r0, #4]
   ba010:	461a      	mov	r2, r3
   ba012:	4619      	mov	r1, r3
   ba014:	f7ff bf0e 	b.w	b9e34 <network_off>

000ba018 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   ba018:	2300      	movs	r3, #0
   ba01a:	6840      	ldr	r0, [r0, #4]
   ba01c:	461a      	mov	r2, r3
   ba01e:	4619      	mov	r1, r3
   ba020:	f7ff bf00 	b.w	b9e24 <network_on>

000ba024 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   ba024:	2200      	movs	r2, #0
   ba026:	6840      	ldr	r0, [r0, #4]
   ba028:	4611      	mov	r1, r2
   ba02a:	f7ff bef3 	b.w	b9e14 <network_ready>

000ba02e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   ba02e:	2200      	movs	r2, #0
   ba030:	6840      	ldr	r0, [r0, #4]
   ba032:	4611      	mov	r1, r2
   ba034:	f7ff bede 	b.w	b9df4 <network_connecting>

000ba038 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   ba038:	6840      	ldr	r0, [r0, #4]
   ba03a:	2200      	movs	r2, #0
   ba03c:	2102      	movs	r1, #2
   ba03e:	f7ff bee1 	b.w	b9e04 <network_disconnect>

000ba042 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   ba042:	2300      	movs	r3, #0
   ba044:	6840      	ldr	r0, [r0, #4]
   ba046:	461a      	mov	r2, r3
   ba048:	f7ff becc 	b.w	b9de4 <network_connect>

000ba04c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   ba04c:	4b02      	ldr	r3, [pc, #8]	; (ba058 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   ba04e:	2203      	movs	r2, #3
   ba050:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   ba052:	4a02      	ldr	r2, [pc, #8]	; (ba05c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   ba054:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   ba056:	4770      	bx	lr
   ba058:	2003e654 	.word	0x2003e654
   ba05c:	000c190c 	.word	0x000c190c

000ba060 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   ba060:	2100      	movs	r1, #0
   ba062:	f7ff be2b 	b.w	b9cbc <hal_spi_release>

000ba066 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   ba066:	2100      	movs	r1, #0
   ba068:	f7ff be20 	b.w	b9cac <hal_spi_acquire>

000ba06c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   ba06c:	b510      	push	{r4, lr}
   ba06e:	4604      	mov	r4, r0
   ba070:	4608      	mov	r0, r1
{
    _spi = spi;
   ba072:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   ba074:	f7ff fdea 	bl	b9c4c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   ba078:	2300      	movs	r3, #0
   ba07a:	6063      	str	r3, [r4, #4]
}
   ba07c:	4620      	mov	r0, r4
   ba07e:	bd10      	pop	{r4, pc}

000ba080 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   ba080:	b513      	push	{r0, r1, r4, lr}
   ba082:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   ba084:	7800      	ldrb	r0, [r0, #0]
   ba086:	f7ff ffee 	bl	ba066 <_ZN8SPIClass4lockEv.isra.0>
   ba08a:	b958      	cbnz	r0, ba0a4 <_ZN8SPIClass5beginEv+0x24>
   ba08c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   ba08e:	9001      	str	r0, [sp, #4]
   ba090:	f64f 71ff 	movw	r1, #65535	; 0xffff
   ba094:	f7ff fdca 	bl	b9c2c <hal_spi_begin>
        unlock();
   ba098:	9801      	ldr	r0, [sp, #4]
    }
}
   ba09a:	b002      	add	sp, #8
   ba09c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba0a0:	f7ff bfde 	b.w	ba060 <_ZN8SPIClass6unlockEv.isra.0>
   ba0a4:	b002      	add	sp, #8
   ba0a6:	bd10      	pop	{r4, pc}

000ba0a8 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   ba0a8:	7800      	ldrb	r0, [r0, #0]
   ba0aa:	f7ff bfd9 	b.w	ba060 <_ZN8SPIClass6unlockEv.isra.0>
	...

000ba0b0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   ba0b0:	0840      	lsrs	r0, r0, #1
{
   ba0b2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   ba0b4:	6018      	str	r0, [r3, #0]
   ba0b6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   ba0b8:	6818      	ldr	r0, [r3, #0]
   ba0ba:	4288      	cmp	r0, r1
   ba0bc:	b2e5      	uxtb	r5, r4
   ba0be:	d906      	bls.n	ba0ce <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   ba0c0:	3401      	adds	r4, #1
   ba0c2:	2c08      	cmp	r4, #8
   ba0c4:	d002      	beq.n	ba0cc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   ba0c6:	0840      	lsrs	r0, r0, #1
   ba0c8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   ba0ca:	e7f5      	b.n	ba0b8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   ba0cc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   ba0ce:	4b02      	ldr	r3, [pc, #8]	; (ba0d8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   ba0d0:	5d5b      	ldrb	r3, [r3, r5]
   ba0d2:	7013      	strb	r3, [r2, #0]
}
   ba0d4:	bd30      	pop	{r4, r5, pc}
   ba0d6:	bf00      	nop
   ba0d8:	000c1940 	.word	0x000c1940

000ba0dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   ba0dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba0e0:	4606      	mov	r6, r0
   ba0e2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   ba0e4:	7800      	ldrb	r0, [r0, #0]
{
   ba0e6:	460c      	mov	r4, r1
    CHECK(lock());
   ba0e8:	f7ff ffbd 	bl	ba066 <_ZN8SPIClass4lockEv.isra.0>
   ba0ec:	2800      	cmp	r0, #0
   ba0ee:	db1b      	blt.n	ba128 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   ba0f0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   ba0f2:	2214      	movs	r2, #20
   ba0f4:	2100      	movs	r1, #0
   ba0f6:	a809      	add	r0, sp, #36	; 0x24
   ba0f8:	f004 fc89 	bl	bea0e <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   ba0fc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   ba0fe:	2200      	movs	r2, #0
   ba100:	a909      	add	r1, sp, #36	; 0x24
   ba102:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   ba104:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   ba108:	f7ff fdb0 	bl	b9c6c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   ba10c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   ba110:	b113      	cbz	r3, ba118 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   ba112:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   ba116:	b155      	cbz	r5, ba12e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   ba118:	2700      	movs	r7, #0
   ba11a:	46b9      	mov	r9, r7
   ba11c:	46b8      	mov	r8, r7
   ba11e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   ba120:	7923      	ldrb	r3, [r4, #4]
   ba122:	b15d      	cbz	r5, ba13c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   ba124:	b1c3      	cbz	r3, ba158 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   ba126:	2000      	movs	r0, #0
}
   ba128:	b00f      	add	sp, #60	; 0x3c
   ba12a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   ba12e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   ba132:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   ba136:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   ba13a:	e7f1      	b.n	ba120 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   ba13c:	2b00      	cmp	r3, #0
   ba13e:	d135      	bne.n	ba1ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   ba140:	68a3      	ldr	r3, [r4, #8]
   ba142:	4543      	cmp	r3, r8
   ba144:	d108      	bne.n	ba158 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   ba146:	f88d 9020 	strb.w	r9, [sp, #32]
   ba14a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   ba14e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   ba152:	89a3      	ldrh	r3, [r4, #12]
   ba154:	429a      	cmp	r2, r3
   ba156:	d0e6      	beq.n	ba126 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   ba158:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   ba15a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   ba15c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   ba160:	980a      	ldr	r0, [sp, #40]	; 0x28
   ba162:	ab04      	add	r3, sp, #16
   ba164:	f10d 020f 	add.w	r2, sp, #15
   ba168:	f7ff ffa2 	bl	ba0b0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   ba16c:	7921      	ldrb	r1, [r4, #4]
   ba16e:	b985      	cbnz	r5, ba192 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   ba170:	b989      	cbnz	r1, ba196 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   ba172:	68a3      	ldr	r3, [r4, #8]
   ba174:	4543      	cmp	r3, r8
   ba176:	d30e      	bcc.n	ba196 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   ba178:	f88d 9020 	strb.w	r9, [sp, #32]
   ba17c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   ba180:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   ba184:	89a3      	ldrh	r3, [r4, #12]
   ba186:	429a      	cmp	r2, r3
   ba188:	d105      	bne.n	ba196 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   ba18a:	9b04      	ldr	r3, [sp, #16]
   ba18c:	4543      	cmp	r3, r8
   ba18e:	d102      	bne.n	ba196 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   ba190:	e7c9      	b.n	ba126 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   ba192:	2900      	cmp	r1, #0
   ba194:	d1f9      	bne.n	ba18a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   ba196:	2300      	movs	r3, #0
   ba198:	9301      	str	r3, [sp, #4]
   ba19a:	7b63      	ldrb	r3, [r4, #13]
   ba19c:	9300      	str	r3, [sp, #0]
   ba19e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   ba1a2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   ba1a4:	7830      	ldrb	r0, [r6, #0]
   ba1a6:	f7ff fd79 	bl	b9c9c <hal_spi_set_settings>
   ba1aa:	e7bc      	b.n	ba126 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   ba1ac:	e9cd 5500 	strd	r5, r5, [sp]
   ba1b0:	462b      	mov	r3, r5
   ba1b2:	462a      	mov	r2, r5
   ba1b4:	2101      	movs	r1, #1
   ba1b6:	e7f5      	b.n	ba1a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000ba1b8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   ba1b8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   ba1ba:	7800      	ldrb	r0, [r0, #0]
   ba1bc:	f7ff fd3e 	bl	b9c3c <hal_spi_transfer>
}
   ba1c0:	b2c0      	uxtb	r0, r0
   ba1c2:	bd08      	pop	{r3, pc}

000ba1c4 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   ba1c4:	b530      	push	{r4, r5, lr}
   ba1c6:	b087      	sub	sp, #28
   ba1c8:	4604      	mov	r4, r0
   ba1ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   ba1cc:	9500      	str	r5, [sp, #0]
   ba1ce:	7800      	ldrb	r0, [r0, #0]
   ba1d0:	f7ff fd54 	bl	b9c7c <hal_spi_transfer_dma>
    if (user_callback == NULL)
   ba1d4:	b93d      	cbnz	r5, ba1e6 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   ba1d6:	7820      	ldrb	r0, [r4, #0]
   ba1d8:	a902      	add	r1, sp, #8
   ba1da:	f7ff fd57 	bl	b9c8c <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   ba1de:	f89d 3014 	ldrb.w	r3, [sp, #20]
   ba1e2:	07db      	lsls	r3, r3, #31
   ba1e4:	d4f7      	bmi.n	ba1d6 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   ba1e6:	b007      	add	sp, #28
   ba1e8:	bd30      	pop	{r4, r5, pc}
	...

000ba1ec <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   ba1ec:	4b05      	ldr	r3, [pc, #20]	; (ba204 <_GLOBAL__sub_I_System+0x18>)
   ba1ee:	2202      	movs	r2, #2
   ba1f0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   ba1f2:	4b05      	ldr	r3, [pc, #20]	; (ba208 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   ba1f4:	4a05      	ldr	r2, [pc, #20]	; (ba20c <_GLOBAL__sub_I_System+0x20>)
   ba1f6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   ba1f8:	2000      	movs	r0, #0
   ba1fa:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   ba1fe:	f7ff bdb5 	b.w	b9d6c <set_system_mode>
   ba202:	bf00      	nop
   ba204:	2003e668 	.word	0x2003e668
   ba208:	2003e65c 	.word	0x2003e65c
   ba20c:	ffff0000 	.word	0xffff0000

000ba210 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   ba210:	b510      	push	{r4, lr}
   ba212:	4604      	mov	r4, r0
{
	free(buffer);
   ba214:	6800      	ldr	r0, [r0, #0]
   ba216:	f7ff fe85 	bl	b9f24 <free>
}
   ba21a:	4620      	mov	r0, r4
   ba21c:	bd10      	pop	{r4, pc}

000ba21e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   ba21e:	b510      	push	{r4, lr}
   ba220:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   ba222:	6800      	ldr	r0, [r0, #0]
   ba224:	b108      	cbz	r0, ba22a <_ZN6String10invalidateEv+0xc>
   ba226:	f7ff fe7d 	bl	b9f24 <free>
	buffer = NULL;
   ba22a:	2300      	movs	r3, #0
	capacity = len = 0;
   ba22c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   ba230:	6023      	str	r3, [r4, #0]
}
   ba232:	bd10      	pop	{r4, pc}

000ba234 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   ba234:	b538      	push	{r3, r4, r5, lr}
   ba236:	4604      	mov	r4, r0
   ba238:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   ba23a:	6800      	ldr	r0, [r0, #0]
   ba23c:	3101      	adds	r1, #1
   ba23e:	f7ff fe79 	bl	b9f34 <realloc>
	if (newbuffer) {
   ba242:	b110      	cbz	r0, ba24a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   ba244:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   ba248:	2001      	movs	r0, #1
	}
	return 0;
}
   ba24a:	bd38      	pop	{r3, r4, r5, pc}

000ba24c <_ZN6String7reserveEj>:
{
   ba24c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   ba24e:	6803      	ldr	r3, [r0, #0]
{
   ba250:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   ba252:	b123      	cbz	r3, ba25e <_ZN6String7reserveEj+0x12>
   ba254:	6843      	ldr	r3, [r0, #4]
   ba256:	428b      	cmp	r3, r1
   ba258:	d301      	bcc.n	ba25e <_ZN6String7reserveEj+0x12>
   ba25a:	2001      	movs	r0, #1
}
   ba25c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   ba25e:	4620      	mov	r0, r4
   ba260:	f7ff ffe8 	bl	ba234 <_ZN6String12changeBufferEj>
   ba264:	2800      	cmp	r0, #0
   ba266:	d0f9      	beq.n	ba25c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   ba268:	68a3      	ldr	r3, [r4, #8]
   ba26a:	2b00      	cmp	r3, #0
   ba26c:	d1f5      	bne.n	ba25a <_ZN6String7reserveEj+0xe>
   ba26e:	6822      	ldr	r2, [r4, #0]
   ba270:	7013      	strb	r3, [r2, #0]
   ba272:	e7f2      	b.n	ba25a <_ZN6String7reserveEj+0xe>

000ba274 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   ba274:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba276:	460d      	mov	r5, r1
	if (!reserve(length)) {
   ba278:	4611      	mov	r1, r2
   ba27a:	9201      	str	r2, [sp, #4]
{
   ba27c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   ba27e:	f7ff ffe5 	bl	ba24c <_ZN6String7reserveEj>
   ba282:	9a01      	ldr	r2, [sp, #4]
   ba284:	b928      	cbnz	r0, ba292 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   ba286:	4620      	mov	r0, r4
   ba288:	f7ff ffc9 	bl	ba21e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   ba28c:	4620      	mov	r0, r4
   ba28e:	b003      	add	sp, #12
   ba290:	bd30      	pop	{r4, r5, pc}
	len = length;
   ba292:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   ba294:	4629      	mov	r1, r5
   ba296:	6820      	ldr	r0, [r4, #0]
   ba298:	f004 fb91 	bl	be9be <memcpy>
	buffer[len] = 0;
   ba29c:	6822      	ldr	r2, [r4, #0]
   ba29e:	68a3      	ldr	r3, [r4, #8]
   ba2a0:	2100      	movs	r1, #0
   ba2a2:	54d1      	strb	r1, [r2, r3]
	return *this;
   ba2a4:	e7f2      	b.n	ba28c <_ZN6String4copyEPKcj+0x18>

000ba2a6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   ba2a6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   ba2a8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   ba2aa:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   ba2ae:	4604      	mov	r4, r0
	len = 0;
   ba2b0:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba2b2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   ba2b4:	b141      	cbz	r1, ba2c8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   ba2b6:	4608      	mov	r0, r1
   ba2b8:	9101      	str	r1, [sp, #4]
   ba2ba:	f004 fc5c 	bl	beb76 <strlen>
   ba2be:	9901      	ldr	r1, [sp, #4]
   ba2c0:	4602      	mov	r2, r0
   ba2c2:	4620      	mov	r0, r4
   ba2c4:	f7ff ffd6 	bl	ba274 <_ZN6String4copyEPKcj>
}
   ba2c8:	4620      	mov	r0, r4
   ba2ca:	b002      	add	sp, #8
   ba2cc:	bd10      	pop	{r4, pc}

000ba2ce <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   ba2ce:	b538      	push	{r3, r4, r5, lr}
   ba2d0:	4605      	mov	r5, r0
	if (buffer) {
   ba2d2:	6800      	ldr	r0, [r0, #0]
{
   ba2d4:	460c      	mov	r4, r1
	if (buffer) {
   ba2d6:	b168      	cbz	r0, ba2f4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   ba2d8:	686a      	ldr	r2, [r5, #4]
   ba2da:	688b      	ldr	r3, [r1, #8]
   ba2dc:	429a      	cmp	r2, r3
   ba2de:	d307      	bcc.n	ba2f0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   ba2e0:	6809      	ldr	r1, [r1, #0]
   ba2e2:	f004 fc22 	bl	beb2a <strcpy>
			len = rhs.len;
   ba2e6:	68a3      	ldr	r3, [r4, #8]
   ba2e8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   ba2ea:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   ba2ec:	60a3      	str	r3, [r4, #8]
}
   ba2ee:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   ba2f0:	f7ff fe18 	bl	b9f24 <free>
	buffer = rhs.buffer;
   ba2f4:	6823      	ldr	r3, [r4, #0]
   ba2f6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   ba2f8:	6863      	ldr	r3, [r4, #4]
   ba2fa:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   ba2fc:	68a3      	ldr	r3, [r4, #8]
   ba2fe:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   ba300:	2300      	movs	r3, #0
	rhs.capacity = 0;
   ba302:	e9c4 3300 	strd	r3, r3, [r4]
   ba306:	e7f1      	b.n	ba2ec <_ZN6String4moveERS_+0x1e>

000ba308 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   ba308:	b510      	push	{r4, lr}
	buffer = NULL;
   ba30a:	2300      	movs	r3, #0
	capacity = 0;
   ba30c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   ba310:	4604      	mov	r4, r0
	len = 0;
   ba312:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba314:	7303      	strb	r3, [r0, #12]
	move(rval);
   ba316:	f7ff ffda 	bl	ba2ce <_ZN6String4moveERS_>
}
   ba31a:	4620      	mov	r0, r4
   ba31c:	bd10      	pop	{r4, pc}

000ba31e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   ba31e:	4288      	cmp	r0, r1
{
   ba320:	b510      	push	{r4, lr}
   ba322:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   ba324:	d005      	beq.n	ba332 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   ba326:	680b      	ldr	r3, [r1, #0]
   ba328:	b12b      	cbz	r3, ba336 <_ZN6StringaSERKS_+0x18>
   ba32a:	688a      	ldr	r2, [r1, #8]
   ba32c:	4619      	mov	r1, r3
   ba32e:	f7ff ffa1 	bl	ba274 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba332:	4620      	mov	r0, r4
   ba334:	bd10      	pop	{r4, pc}
	else invalidate();
   ba336:	f7ff ff72 	bl	ba21e <_ZN6String10invalidateEv>
   ba33a:	e7fa      	b.n	ba332 <_ZN6StringaSERKS_+0x14>

000ba33c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   ba33c:	b510      	push	{r4, lr}
	buffer = NULL;
   ba33e:	2300      	movs	r3, #0
String::String(const String &value)
   ba340:	4604      	mov	r4, r0
	capacity = 0;
   ba342:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   ba346:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba348:	7303      	strb	r3, [r0, #12]
	*this = value;
   ba34a:	f7ff ffe8 	bl	ba31e <_ZN6StringaSERKS_>
}
   ba34e:	4620      	mov	r0, r4
   ba350:	bd10      	pop	{r4, pc}

000ba352 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   ba352:	b513      	push	{r0, r1, r4, lr}
   ba354:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   ba356:	b159      	cbz	r1, ba370 <_ZN6StringaSEPKc+0x1e>
   ba358:	4608      	mov	r0, r1
   ba35a:	9101      	str	r1, [sp, #4]
   ba35c:	f004 fc0b 	bl	beb76 <strlen>
   ba360:	9901      	ldr	r1, [sp, #4]
   ba362:	4602      	mov	r2, r0
   ba364:	4620      	mov	r0, r4
   ba366:	f7ff ff85 	bl	ba274 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba36a:	4620      	mov	r0, r4
   ba36c:	b002      	add	sp, #8
   ba36e:	bd10      	pop	{r4, pc}
	else invalidate();
   ba370:	f7ff ff55 	bl	ba21e <_ZN6String10invalidateEv>
   ba374:	e7f9      	b.n	ba36a <_ZN6StringaSEPKc+0x18>

000ba376 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   ba376:	b570      	push	{r4, r5, r6, lr}
   ba378:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   ba37a:	460e      	mov	r6, r1
   ba37c:	b909      	cbnz	r1, ba382 <_ZN6String6concatEPKcj+0xc>
   ba37e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   ba380:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   ba382:	b16a      	cbz	r2, ba3a0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   ba384:	6884      	ldr	r4, [r0, #8]
   ba386:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   ba388:	4621      	mov	r1, r4
   ba38a:	f7ff ff5f 	bl	ba24c <_ZN6String7reserveEj>
   ba38e:	2800      	cmp	r0, #0
   ba390:	d0f5      	beq.n	ba37e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   ba392:	6828      	ldr	r0, [r5, #0]
   ba394:	68ab      	ldr	r3, [r5, #8]
   ba396:	4631      	mov	r1, r6
   ba398:	4418      	add	r0, r3
   ba39a:	f004 fbc6 	bl	beb2a <strcpy>
	len = newlen;
   ba39e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   ba3a0:	2001      	movs	r0, #1
   ba3a2:	e7ed      	b.n	ba380 <_ZN6String6concatEPKcj+0xa>

000ba3a4 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   ba3a4:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   ba3a6:	2300      	movs	r3, #0
	buf[0] = c;
   ba3a8:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   ba3ac:	2201      	movs	r2, #1
   ba3ae:	a901      	add	r1, sp, #4
	buf[1] = 0;
   ba3b0:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   ba3b4:	f7ff ffdf 	bl	ba376 <_ZN6String6concatEPKcj>
}
   ba3b8:	b003      	add	sp, #12
   ba3ba:	f85d fb04 	ldr.w	pc, [sp], #4

000ba3be <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   ba3be:	6802      	ldr	r2, [r0, #0]
{
   ba3c0:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   ba3c2:	6809      	ldr	r1, [r1, #0]
   ba3c4:	b162      	cbz	r2, ba3e0 <_ZNK6String9compareToERKS_+0x22>
   ba3c6:	b941      	cbnz	r1, ba3da <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   ba3c8:	6880      	ldr	r0, [r0, #8]
   ba3ca:	b160      	cbz	r0, ba3e6 <_ZNK6String9compareToERKS_+0x28>
   ba3cc:	7810      	ldrb	r0, [r2, #0]
   ba3ce:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   ba3d0:	6898      	ldr	r0, [r3, #8]
   ba3d2:	b140      	cbz	r0, ba3e6 <_ZNK6String9compareToERKS_+0x28>
   ba3d4:	7809      	ldrb	r1, [r1, #0]
   ba3d6:	4248      	negs	r0, r1
   ba3d8:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   ba3da:	4610      	mov	r0, r2
   ba3dc:	f004 bb9b 	b.w	beb16 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   ba3e0:	2900      	cmp	r1, #0
   ba3e2:	d1f5      	bne.n	ba3d0 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   ba3e4:	4608      	mov	r0, r1
}
   ba3e6:	4770      	bx	lr

000ba3e8 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   ba3e8:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   ba3ea:	6882      	ldr	r2, [r0, #8]
   ba3ec:	688b      	ldr	r3, [r1, #8]
   ba3ee:	429a      	cmp	r2, r3
   ba3f0:	d105      	bne.n	ba3fe <_ZNK6String6equalsERKS_+0x16>
   ba3f2:	f7ff ffe4 	bl	ba3be <_ZNK6String9compareToERKS_>
   ba3f6:	fab0 f080 	clz	r0, r0
   ba3fa:	0940      	lsrs	r0, r0, #5
}
   ba3fc:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   ba3fe:	2000      	movs	r0, #0
   ba400:	e7fc      	b.n	ba3fc <_ZNK6String6equalsERKS_+0x14>

000ba402 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   ba402:	6883      	ldr	r3, [r0, #8]
   ba404:	428b      	cmp	r3, r1
   ba406:	d903      	bls.n	ba410 <_ZNK6StringixEj+0xe>
   ba408:	6800      	ldr	r0, [r0, #0]
   ba40a:	b110      	cbz	r0, ba412 <_ZNK6StringixEj+0x10>
	return buffer[index];
   ba40c:	5c40      	ldrb	r0, [r0, r1]
   ba40e:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   ba410:	2000      	movs	r0, #0
}
   ba412:	4770      	bx	lr

000ba414 <_ZNK6String6charAtEj>:
	return operator[](loc);
   ba414:	f7ff bff5 	b.w	ba402 <_ZNK6StringixEj>

000ba418 <_ZNK6String8getBytesEPhjj>:

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   ba418:	b558      	push	{r3, r4, r6, lr}
   ba41a:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   ba41c:	b12a      	cbz	r2, ba42a <_ZNK6String8getBytesEPhjj+0x12>
   ba41e:	b121      	cbz	r1, ba42a <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   ba420:	6884      	ldr	r4, [r0, #8]
   ba422:	42a3      	cmp	r3, r4
   ba424:	d302      	bcc.n	ba42c <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   ba426:	2300      	movs	r3, #0
   ba428:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   ba42a:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   ba42c:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   ba42e:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   ba430:	6801      	ldr	r1, [r0, #0]
   ba432:	4294      	cmp	r4, r2
   ba434:	bf28      	it	cs
   ba436:	4614      	movcs	r4, r2
   ba438:	4419      	add	r1, r3
   ba43a:	4622      	mov	r2, r4
   ba43c:	4630      	mov	r0, r6
   ba43e:	f004 fbb6 	bl	bebae <strncpy>
	buf[n] = 0;
   ba442:	2300      	movs	r3, #0
   ba444:	5533      	strb	r3, [r6, r4]
   ba446:	e7f0      	b.n	ba42a <_ZNK6String8getBytesEPhjj+0x12>

000ba448 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba448:	4770      	bx	lr

000ba44a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   ba44a:	4770      	bx	lr

000ba44c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   ba44c:	4770      	bx	lr

000ba44e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba44e:	4770      	bx	lr

000ba450 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   ba450:	4b06      	ldr	r3, [pc, #24]	; (ba46c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   ba452:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   ba454:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   ba456:	f100 040c 	add.w	r4, r0, #12
	    ||
   ba45a:	d005      	beq.n	ba468 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   ba45c:	4608      	mov	r0, r1
   ba45e:	f003 fc09 	bl	bdc74 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   ba462:	2800      	cmp	r0, #0
   ba464:	bf08      	it	eq
   ba466:	2400      	moveq	r4, #0
      }
   ba468:	4620      	mov	r0, r4
   ba46a:	bd10      	pop	{r4, pc}
   ba46c:	000c1bb8 	.word	0x000c1bb8

000ba470 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   ba470:	4b06      	ldr	r3, [pc, #24]	; (ba48c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   ba472:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   ba474:	b510      	push	{r4, lr}
   ba476:	f100 040c 	add.w	r4, r0, #12
	    ||
   ba47a:	d005      	beq.n	ba488 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   ba47c:	4608      	mov	r0, r1
   ba47e:	f003 fbf9 	bl	bdc74 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   ba482:	2800      	cmp	r0, #0
   ba484:	bf08      	it	eq
   ba486:	2400      	moveq	r4, #0
      }
   ba488:	4620      	mov	r0, r4
   ba48a:	bd10      	pop	{r4, pc}
   ba48c:	000c1bb8 	.word	0x000c1bb8

000ba490 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   ba490:	4b06      	ldr	r3, [pc, #24]	; (ba4ac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   ba492:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   ba494:	b510      	push	{r4, lr}
   ba496:	f100 040c 	add.w	r4, r0, #12
	    ||
   ba49a:	d005      	beq.n	ba4a8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   ba49c:	4608      	mov	r0, r1
   ba49e:	f003 fbe9 	bl	bdc74 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   ba4a2:	2800      	cmp	r0, #0
   ba4a4:	bf08      	it	eq
   ba4a6:	2400      	moveq	r4, #0
      }
   ba4a8:	4620      	mov	r0, r4
   ba4aa:	bd10      	pop	{r4, pc}
   ba4ac:	000c1bb8 	.word	0x000c1bb8

000ba4b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba4b0:	b510      	push	{r4, lr}
   ba4b2:	2168      	movs	r1, #104	; 0x68
   ba4b4:	4604      	mov	r4, r0
   ba4b6:	f7f9 fdf2 	bl	b409e <_ZdlPvj>
   ba4ba:	4620      	mov	r0, r4
   ba4bc:	bd10      	pop	{r4, pc}

000ba4be <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   ba4be:	b510      	push	{r4, lr}
   ba4c0:	2128      	movs	r1, #40	; 0x28
   ba4c2:	4604      	mov	r4, r0
   ba4c4:	f7f9 fdeb 	bl	b409e <_ZdlPvj>
   ba4c8:	4620      	mov	r0, r4
   ba4ca:	bd10      	pop	{r4, pc}

000ba4cc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   ba4cc:	b510      	push	{r4, lr}
   ba4ce:	2130      	movs	r1, #48	; 0x30
   ba4d0:	4604      	mov	r4, r0
   ba4d2:	f7f9 fde4 	bl	b409e <_ZdlPvj>
   ba4d6:	4620      	mov	r0, r4
   ba4d8:	bd10      	pop	{r4, pc}

000ba4da <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   ba4da:	2168      	movs	r1, #104	; 0x68
   ba4dc:	f7f9 bddf 	b.w	b409e <_ZdlPvj>

000ba4e0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   ba4e0:	2128      	movs	r1, #40	; 0x28
   ba4e2:	f7f9 bddc 	b.w	b409e <_ZdlPvj>

000ba4e6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   ba4e6:	2130      	movs	r1, #48	; 0x30
   ba4e8:	f7f9 bdd9 	b.w	b409e <_ZdlPvj>

000ba4ec <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   ba4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   ba4ee:	2500      	movs	r5, #0
   ba4f0:	1cec      	adds	r4, r5, #3
   ba4f2:	428c      	cmp	r4, r1
   ba4f4:	d80d      	bhi.n	ba512 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   ba4f6:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   ba4f8:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   ba4fa:	5d87      	ldrb	r7, [r0, r6]
   ba4fc:	4297      	cmp	r7, r2
   ba4fe:	d105      	bne.n	ba50c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   ba500:	4426      	add	r6, r4
   ba502:	42b1      	cmp	r1, r6
   ba504:	d305      	bcc.n	ba512 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   ba506:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   ba508:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   ba50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   ba50c:	3401      	adds	r4, #1
   ba50e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   ba510:	e7ee      	b.n	ba4f0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   ba512:	2000      	movs	r0, #0
   ba514:	e7f9      	b.n	ba50a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000ba518 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   ba518:	4a02      	ldr	r2, [pc, #8]	; (ba524 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   ba51a:	4903      	ldr	r1, [pc, #12]	; (ba528 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   ba51c:	200a      	movs	r0, #10
   ba51e:	f7ff bc0d 	b.w	b9d3c <panic_>
   ba522:	bf00      	nop
   ba524:	000b9899 	.word	0x000b9899
   ba528:	000c1948 	.word	0x000c1948

000ba52c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   ba52c:	b430      	push	{r4, r5}
   ba52e:	460d      	mov	r5, r1
   ba530:	4611      	mov	r1, r2
   ba532:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   ba534:	6803      	ldr	r3, [r0, #0]
   ba536:	6809      	ldr	r1, [r1, #0]
   ba538:	6828      	ldr	r0, [r5, #0]
   ba53a:	e9d3 4300 	ldrd	r4, r3, [r3]
   ba53e:	46a4      	mov	ip, r4
      }
   ba540:	bc30      	pop	{r4, r5}
   ba542:	4760      	bx	ip

000ba544 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   ba544:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   ba546:	b538      	push	{r3, r4, r5, lr}
   ba548:	4604      	mov	r4, r0
	switch (__op)
   ba54a:	d102      	bne.n	ba552 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   ba54c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   ba54e:	6023      	str	r3, [r4, #0]
	}
   ba550:	e003      	b.n	ba55a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   ba552:	2a02      	cmp	r2, #2
   ba554:	d003      	beq.n	ba55e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   ba556:	2a03      	cmp	r2, #3
   ba558:	d00d      	beq.n	ba576 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   ba55a:	2000      	movs	r0, #0
   ba55c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   ba55e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   ba560:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   ba562:	f7f9 fd98 	bl	b4096 <_Znwj>
   ba566:	4603      	mov	r3, r0
   ba568:	2800      	cmp	r0, #0
   ba56a:	d0f0      	beq.n	ba54e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   ba56c:	e895 0003 	ldmia.w	r5, {r0, r1}
   ba570:	e883 0003 	stmia.w	r3, {r0, r1}
   ba574:	e7eb      	b.n	ba54e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   ba576:	6800      	ldr	r0, [r0, #0]
   ba578:	2800      	cmp	r0, #0
   ba57a:	d0ee      	beq.n	ba55a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   ba57c:	2108      	movs	r1, #8
   ba57e:	f7f9 fd8e 	bl	b409e <_ZdlPvj>
   ba582:	e7ea      	b.n	ba55a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000ba584 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   ba584:	b510      	push	{r4, lr}
	if (_M_manager)
   ba586:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   ba588:	4604      	mov	r4, r0
	if (_M_manager)
   ba58a:	b12b      	cbz	r3, ba598 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   ba58c:	2203      	movs	r2, #3
   ba58e:	4601      	mov	r1, r0
   ba590:	4798      	blx	r3
	    _M_manager = nullptr;
   ba592:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   ba594:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   ba598:	bd10      	pop	{r4, pc}

000ba59a <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   ba59a:	b510      	push	{r4, lr}
	if (_M_manager)
   ba59c:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   ba59e:	4604      	mov	r4, r0
	if (_M_manager)
   ba5a0:	b12b      	cbz	r3, ba5ae <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   ba5a2:	2203      	movs	r2, #3
   ba5a4:	4601      	mov	r1, r0
   ba5a6:	4798      	blx	r3
	    _M_manager = nullptr;
   ba5a8:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   ba5aa:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   ba5ae:	bd10      	pop	{r4, pc}

000ba5b0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   ba5b0:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   ba5b2:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   ba5b4:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   ba5b6:	2220      	movs	r2, #32
   ba5b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   ba5bc:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   ba5be:	4a08      	ldr	r2, [pc, #32]	; (ba5e0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   ba5c0:	9200      	str	r2, [sp, #0]
   ba5c2:	4908      	ldr	r1, [pc, #32]	; (ba5e4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   ba5c4:	aa02      	add	r2, sp, #8
   ba5c6:	2001      	movs	r0, #1
   ba5c8:	f7ff fbc0 	bl	b9d4c <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   ba5cc:	6820      	ldr	r0, [r4, #0]
   ba5ce:	4906      	ldr	r1, [pc, #24]	; (ba5e8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   ba5d0:	8800      	ldrh	r0, [r0, #0]
   ba5d2:	2300      	movs	r3, #0
   ba5d4:	4622      	mov	r2, r4
    }
   ba5d6:	b00a      	add	sp, #40	; 0x28
   ba5d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   ba5dc:	f7ff b9ca 	b.w	b9974 <hal_ble_gatt_client_discover_all_services>
   ba5e0:	000c196a 	.word	0x000c196a
   ba5e4:	000c195f 	.word	0x000c195f
   ba5e8:	000bc119 	.word	0x000bc119

000ba5ec <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   ba5ec:	b510      	push	{r4, lr}
   ba5ee:	3801      	subs	r0, #1
   ba5f0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   ba5f4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   ba5f8:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   ba5fa:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   ba5fe:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   ba600:	bf88      	it	hi
   ba602:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   ba606:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   ba60a:	7803      	ldrb	r3, [r0, #0]
   ba60c:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   ba610:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   ba614:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   ba616:	bf88      	it	hi
   ba618:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   ba61c:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   ba61e:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   ba622:	d1e7      	bne.n	ba5f4 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   ba624:	bd10      	pop	{r4, pc}

000ba626 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   ba626:	b510      	push	{r4, lr}
   ba628:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   ba62a:	3058      	adds	r0, #88	; 0x58
   ba62c:	f7f9 ff4e 	bl	b44cc <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   ba630:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   ba634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba638:	f7ff bdea 	b.w	ba210 <_ZN6StringD1Ev>

000ba63c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   ba63c:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   ba63e:	6803      	ldr	r3, [r0, #0]
   ba640:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   ba642:	4605      	mov	r5, r0
   ba644:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   ba646:	d008      	beq.n	ba65a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   ba648:	b111      	cbz	r1, ba650 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   ba64a:	684b      	ldr	r3, [r1, #4]
   ba64c:	3301      	adds	r3, #1
   ba64e:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   ba650:	6828      	ldr	r0, [r5, #0]
   ba652:	b108      	cbz	r0, ba658 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   ba654:	f7f9 ff78 	bl	b4548 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   ba658:	602c      	str	r4, [r5, #0]
      }
   ba65a:	bd38      	pop	{r3, r4, r5, pc}

000ba65c <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   ba65c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   ba660:	b2da      	uxtb	r2, r3
   ba662:	2a09      	cmp	r2, #9
   ba664:	d801      	bhi.n	ba66a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   ba666:	4618      	mov	r0, r3
   ba668:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   ba66a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   ba66e:	2b05      	cmp	r3, #5
   ba670:	d801      	bhi.n	ba676 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   ba672:	3857      	subs	r0, #87	; 0x57
   ba674:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   ba676:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   ba67a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   ba67c:	bf94      	ite	ls
   ba67e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   ba680:	f04f 30ff 	movhi.w	r0, #4294967295
}
   ba684:	4770      	bx	lr
	...

000ba688 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   ba688:	b510      	push	{r4, lr}
            locked_(false) {
   ba68a:	2300      	movs	r3, #0
   ba68c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   ba68e:	4b04      	ldr	r3, [pc, #16]	; (ba6a0 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   ba690:	4604      	mov	r4, r0
   ba692:	6818      	ldr	r0, [r3, #0]
   ba694:	f7ff fa0a 	bl	b9aac <os_mutex_recursive_lock>
        locked_ = true;
   ba698:	2301      	movs	r3, #1
   ba69a:	7023      	strb	r3, [r4, #0]
    }
   ba69c:	4620      	mov	r0, r4
   ba69e:	bd10      	pop	{r4, pc}
   ba6a0:	2003e670 	.word	0x2003e670

000ba6a4 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   ba6a4:	b510      	push	{r4, lr}
        if (locked_) {
   ba6a6:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   ba6a8:	4604      	mov	r4, r0
        if (locked_) {
   ba6aa:	b11b      	cbz	r3, ba6b4 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   ba6ac:	4b02      	ldr	r3, [pc, #8]	; (ba6b8 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   ba6ae:	6818      	ldr	r0, [r3, #0]
   ba6b0:	f7ff fa04 	bl	b9abc <os_mutex_recursive_unlock>
    }
   ba6b4:	4620      	mov	r0, r4
   ba6b6:	bd10      	pop	{r4, pc}
   ba6b8:	2003e670 	.word	0x2003e670

000ba6bc <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   ba6bc:	b082      	sub	sp, #8
   ba6be:	4603      	mov	r3, r0
    address_ = addr;
   ba6c0:	6808      	ldr	r0, [r1, #0]
   ba6c2:	6849      	ldr	r1, [r1, #4]
   ba6c4:	466a      	mov	r2, sp
   ba6c6:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   ba6c8:	466a      	mov	r2, sp
   ba6ca:	ca03      	ldmia	r2!, {r0, r1}
   ba6cc:	6018      	str	r0, [r3, #0]
}
   ba6ce:	4618      	mov	r0, r3
    address_ = addr.address_;
   ba6d0:	6059      	str	r1, [r3, #4]
}
   ba6d2:	b002      	add	sp, #8
   ba6d4:	4770      	bx	lr

000ba6d6 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   ba6d6:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   ba6d8:	7982      	ldrb	r2, [r0, #6]
   ba6da:	798b      	ldrb	r3, [r1, #6]
   ba6dc:	429a      	cmp	r2, r3
   ba6de:	d106      	bne.n	ba6ee <_ZNK8particle10BleAddresseqERKS0_+0x18>
   ba6e0:	2206      	movs	r2, #6
   ba6e2:	f004 f95c 	bl	be99e <memcmp>
   ba6e6:	fab0 f080 	clz	r0, r0
   ba6ea:	0940      	lsrs	r0, r0, #5
}
   ba6ec:	bd08      	pop	{r3, pc}
    return false;
   ba6ee:	2000      	movs	r0, #0
   ba6f0:	e7fc      	b.n	ba6ec <_ZNK8particle10BleAddresseqERKS0_+0x16>

000ba6f2 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   ba6f2:	f04f 33ff 	mov.w	r3, #4294967295
   ba6f6:	6003      	str	r3, [r0, #0]
   ba6f8:	8083      	strh	r3, [r0, #4]
}
   ba6fa:	2000      	movs	r0, #0
   ba6fc:	4770      	bx	lr

000ba6fe <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   ba6fe:	b508      	push	{r3, lr}
   ba700:	4602      	mov	r2, r0
        : address_{} {
   ba702:	2100      	movs	r1, #0
   ba704:	6001      	str	r1, [r0, #0]
   ba706:	6041      	str	r1, [r0, #4]
    clear();
   ba708:	f7ff fff3 	bl	ba6f2 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   ba70c:	7191      	strb	r1, [r2, #6]
}
   ba70e:	4610      	mov	r0, r2
   ba710:	bd08      	pop	{r3, pc}
	...

000ba714 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   ba714:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   ba716:	2301      	movs	r3, #1
   ba718:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba71a:	4b05      	ldr	r3, [pc, #20]	; (ba730 <_ZN8particle7BleUuidC1Ev+0x1c>)
   ba71c:	4602      	mov	r2, r0
   ba71e:	f103 0110 	add.w	r1, r3, #16
   ba722:	f853 4b04 	ldr.w	r4, [r3], #4
   ba726:	f842 4b04 	str.w	r4, [r2], #4
   ba72a:	428b      	cmp	r3, r1
   ba72c:	d1f9      	bne.n	ba722 <_ZN8particle7BleUuidC1Ev+0xe>
}
   ba72e:	bd10      	pop	{r4, pc}
   ba730:	000c1bc6 	.word	0x000c1bc6

000ba734 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   ba734:	7c0b      	ldrb	r3, [r1, #16]
   ba736:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   ba73a:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   ba73c:	d10d      	bne.n	ba75a <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   ba73e:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba740:	4b0c      	ldr	r3, [pc, #48]	; (ba774 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   ba742:	4602      	mov	r2, r0
   ba744:	f103 0410 	add.w	r4, r3, #16
   ba748:	f853 5b04 	ldr.w	r5, [r3], #4
   ba74c:	f842 5b04 	str.w	r5, [r2], #4
   ba750:	42a3      	cmp	r3, r4
   ba752:	d1f9      	bne.n	ba748 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   ba754:	880b      	ldrh	r3, [r1, #0]
   ba756:	8183      	strh	r3, [r0, #12]
}
   ba758:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   ba75a:	2301      	movs	r3, #1
   ba75c:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   ba75e:	f101 0210 	add.w	r2, r1, #16
   ba762:	4603      	mov	r3, r0
   ba764:	f851 4b04 	ldr.w	r4, [r1], #4
   ba768:	f843 4b04 	str.w	r4, [r3], #4
   ba76c:	4291      	cmp	r1, r2
   ba76e:	d1f9      	bne.n	ba764 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   ba770:	e7f2      	b.n	ba758 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   ba772:	bf00      	nop
   ba774:	000c1bc6 	.word	0x000c1bc6

000ba778 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   ba778:	b510      	push	{r4, lr}
    if (uuid128) {
   ba77a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   ba77c:	4604      	mov	r4, r0
    if (uuid128) {
   ba77e:	b1b1      	cbz	r1, ba7ae <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   ba780:	2a01      	cmp	r2, #1
   ba782:	f101 0210 	add.w	r2, r1, #16
   ba786:	d10a      	bne.n	ba79e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   ba788:	4601      	mov	r1, r0
   ba78a:	f853 0b04 	ldr.w	r0, [r3], #4
   ba78e:	f841 0b04 	str.w	r0, [r1], #4
   ba792:	4293      	cmp	r3, r2
   ba794:	d1f9      	bne.n	ba78a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   ba796:	2301      	movs	r3, #1
   ba798:	6123      	str	r3, [r4, #16]
}
   ba79a:	4620      	mov	r0, r4
   ba79c:	bd10      	pop	{r4, pc}
   ba79e:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   ba7a0:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   ba7a4:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   ba7a8:	429a      	cmp	r2, r3
   ba7aa:	d1f9      	bne.n	ba7a0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   ba7ac:	e7f3      	b.n	ba796 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   ba7ae:	2210      	movs	r2, #16
   ba7b0:	f004 f92d 	bl	bea0e <memset>
   ba7b4:	e7f1      	b.n	ba79a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000ba7b6 <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   ba7b6:	b538      	push	{r3, r4, r5, lr}
   ba7b8:	4604      	mov	r4, r0
   ba7ba:	460d      	mov	r5, r1
        : BleUuid() {
   ba7bc:	f7ff ffaa 	bl	ba714 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   ba7c0:	2300      	movs	r3, #0
   ba7c2:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   ba7c4:	81a5      	strh	r5, [r4, #12]
}
   ba7c6:	4620      	mov	r0, r4
   ba7c8:	bd38      	pop	{r3, r4, r5, pc}

000ba7ca <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   ba7ca:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   ba7cc:	6902      	ldr	r2, [r0, #16]
   ba7ce:	690b      	ldr	r3, [r1, #16]
   ba7d0:	429a      	cmp	r2, r3
   ba7d2:	d106      	bne.n	ba7e2 <_ZNK8particle7BleUuideqERKS0_+0x18>
   ba7d4:	2210      	movs	r2, #16
   ba7d6:	f004 f8e2 	bl	be99e <memcmp>
   ba7da:	fab0 f080 	clz	r0, r0
   ba7de:	0940      	lsrs	r0, r0, #5
}
   ba7e0:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   ba7e2:	2000      	movs	r0, #0
   ba7e4:	e7fc      	b.n	ba7e0 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000ba7e8 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   ba7e8:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   ba7ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   ba7ee:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba7f0:	4b34      	ldr	r3, [pc, #208]	; (ba8c4 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   ba7f2:	460c      	mov	r4, r1
   ba7f4:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba7f6:	4602      	mov	r2, r0
   ba7f8:	f103 0110 	add.w	r1, r3, #16
   ba7fc:	f853 0b04 	ldr.w	r0, [r3], #4
   ba800:	f842 0b04 	str.w	r0, [r2], #4
   ba804:	428b      	cmp	r3, r1
   ba806:	d1f9      	bne.n	ba7fc <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   ba808:	b344      	cbz	r4, ba85c <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   ba80a:	2124      	movs	r1, #36	; 0x24
   ba80c:	4620      	mov	r0, r4
   ba80e:	f004 f9e1 	bl	bebd4 <strnlen>
   ba812:	2804      	cmp	r0, #4
   ba814:	f04f 0500 	mov.w	r5, #0
   ba818:	d123      	bne.n	ba862 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   ba81a:	f8ad 5004 	strh.w	r5, [sp, #4]
   ba81e:	af01      	add	r7, sp, #4
   ba820:	1ca5      	adds	r5, r4, #2
   ba822:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   ba824:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   ba828:	f7ff ff18 	bl	ba65c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   ba82c:	f1b0 0800 	subs.w	r8, r0, #0
   ba830:	db12      	blt.n	ba858 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   ba832:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   ba836:	f7ff ff11 	bl	ba65c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   ba83a:	2800      	cmp	r0, #0
   ba83c:	db0c      	blt.n	ba858 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   ba83e:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   ba840:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   ba844:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   ba846:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   ba84a:	d1eb      	bne.n	ba824 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   ba84c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   ba850:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   ba852:	f89d 3004 	ldrb.w	r3, [sp, #4]
   ba856:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   ba858:	2300      	movs	r3, #0
   ba85a:	6133      	str	r3, [r6, #16]
}
   ba85c:	b002      	add	sp, #8
   ba85e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   ba862:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   ba866:	2124      	movs	r1, #36	; 0x24
   ba868:	4620      	mov	r0, r4
   ba86a:	f004 f9b3 	bl	bebd4 <strnlen>
   ba86e:	42a8      	cmp	r0, r5
   ba870:	d807      	bhi.n	ba882 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   ba872:	4642      	mov	r2, r8
   ba874:	2100      	movs	r1, #0
   ba876:	4630      	mov	r0, r6
}
   ba878:	b002      	add	sp, #8
   ba87a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   ba87e:	f004 b8c6 	b.w	bea0e <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   ba882:	f1b8 0f00 	cmp.w	r8, #0
   ba886:	d0e9      	beq.n	ba85c <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   ba888:	5d60      	ldrb	r0, [r4, r5]
   ba88a:	f7ff fee7 	bl	ba65c <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   ba88e:	0603      	lsls	r3, r0, #24
   ba890:	d415      	bmi.n	ba8be <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   ba892:	0100      	lsls	r0, r0, #4
   ba894:	f108 38ff 	add.w	r8, r8, #4294967295
   ba898:	b2c7      	uxtb	r7, r0
   ba89a:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   ba89e:	2124      	movs	r1, #36	; 0x24
   ba8a0:	4620      	mov	r0, r4
   ba8a2:	f004 f997 	bl	bebd4 <strnlen>
   ba8a6:	3501      	adds	r5, #1
   ba8a8:	42a8      	cmp	r0, r5
   ba8aa:	d908      	bls.n	ba8be <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   ba8ac:	5d60      	ldrb	r0, [r4, r5]
   ba8ae:	f7ff fed5 	bl	ba65c <_ZN8particle11hexToNibbleEc>
   ba8b2:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   ba8b4:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   ba8b6:	bfa4      	itt	ge
   ba8b8:	4338      	orrge	r0, r7
   ba8ba:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   ba8be:	3501      	adds	r5, #1
   ba8c0:	e7d1      	b.n	ba866 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   ba8c2:	bf00      	nop
   ba8c4:	000c1bc6 	.word	0x000c1bc6

000ba8c8 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   ba8c8:	b513      	push	{r0, r1, r4, lr}
   ba8ca:	4604      	mov	r4, r0
   ba8cc:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   ba8ce:	f7ff ff21 	bl	ba714 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   ba8d2:	4620      	mov	r0, r4
   ba8d4:	9901      	ldr	r1, [sp, #4]
   ba8d6:	f7ff ff87 	bl	ba7e8 <_ZN8particle7BleUuid9constructEPKc>
}
   ba8da:	4620      	mov	r0, r4
   ba8dc:	b002      	add	sp, #8
   ba8de:	bd10      	pop	{r4, pc}

000ba8e0 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   ba8e0:	b510      	push	{r4, lr}
   ba8e2:	f100 030f 	add.w	r3, r0, #15
   ba8e6:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   ba8e8:	781c      	ldrb	r4, [r3, #0]
   ba8ea:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   ba8ee:	4283      	cmp	r3, r0
   ba8f0:	f103 33ff 	add.w	r3, r3, #4294967295
   ba8f4:	d1f8      	bne.n	ba8e8 <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   ba8f6:	bd10      	pop	{r4, pc}

000ba8f8 <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   ba8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba8fc:	461f      	mov	r7, r3
   ba8fe:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   ba900:	460d      	mov	r5, r1
   ba902:	2900      	cmp	r1, #0
   ba904:	d05b      	beq.n	ba9be <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   ba906:	b1da      	cbz	r2, ba940 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   ba908:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   ba90c:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   ba90e:	f1b8 0f00 	cmp.w	r8, #0
   ba912:	d119      	bne.n	ba948 <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   ba914:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   ba916:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   ba91a:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   ba91c:	aa05      	add	r2, sp, #20
   ba91e:	2102      	movs	r1, #2
   ba920:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   ba922:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   ba926:	f7ff fe61 	bl	ba5ec <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   ba92a:	2c04      	cmp	r4, #4
   ba92c:	bf28      	it	cs
   ba92e:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   ba930:	4622      	mov	r2, r4
   ba932:	a905      	add	r1, sp, #20
   ba934:	4628      	mov	r0, r5
   ba936:	f004 f842 	bl	be9be <memcpy>
        buf[len++] = '\0';
   ba93a:	f805 8004 	strb.w	r8, [r5, r4]
   ba93e:	1c62      	adds	r2, r4, #1
}
   ba940:	4610      	mov	r0, r2
   ba942:	b00e      	add	sp, #56	; 0x38
   ba944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   ba948:	a901      	add	r1, sp, #4
   ba94a:	f7ff ffc9 	bl	ba8e0 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   ba94e:	aa05      	add	r2, sp, #20
    if (stripped) {
   ba950:	b17f      	cbz	r7, ba972 <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   ba952:	2110      	movs	r1, #16
   ba954:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   ba956:	f7ff fe49 	bl	ba5ec <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   ba95a:	2c24      	cmp	r4, #36	; 0x24
   ba95c:	bf28      	it	cs
   ba95e:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   ba960:	4622      	mov	r2, r4
   ba962:	a905      	add	r1, sp, #20
   ba964:	4628      	mov	r0, r5
   ba966:	f004 f82a 	bl	be9be <memcpy>
    buf[len++] = '\0';
   ba96a:	2300      	movs	r3, #0
   ba96c:	552b      	strb	r3, [r5, r4]
   ba96e:	1c62      	adds	r2, r4, #1
    return len;
   ba970:	e7e6      	b.n	ba940 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   ba972:	2104      	movs	r1, #4
   ba974:	eb0d 0001 	add.w	r0, sp, r1
   ba978:	f7ff fe38 	bl	ba5ec <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   ba97c:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   ba97e:	f10d 021d 	add.w	r2, sp, #29
   ba982:	2102      	movs	r1, #2
   ba984:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   ba986:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   ba98a:	f7ff fe2f 	bl	ba5ec <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   ba98e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   ba992:	2102      	movs	r1, #2
   ba994:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   ba998:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   ba99c:	f7ff fe26 	bl	ba5ec <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   ba9a0:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   ba9a4:	2102      	movs	r1, #2
   ba9a6:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   ba9a8:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   ba9ac:	f7ff fe1e 	bl	ba5ec <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   ba9b0:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   ba9b4:	aa0b      	add	r2, sp, #44	; 0x2c
   ba9b6:	2106      	movs	r1, #6
   ba9b8:	f10d 000e 	add.w	r0, sp, #14
   ba9bc:	e7cb      	b.n	ba956 <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   ba9be:	460a      	mov	r2, r1
   ba9c0:	e7be      	b.n	ba940 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000ba9c2 <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   ba9c2:	b510      	push	{r4, lr}
   ba9c4:	b08a      	sub	sp, #40	; 0x28
   ba9c6:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   ba9c8:	2300      	movs	r3, #0
   ba9ca:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   ba9cc:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   ba9ce:	4669      	mov	r1, sp
   ba9d0:	f7ff ff92 	bl	ba8f8 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   ba9d4:	4669      	mov	r1, sp
   ba9d6:	4620      	mov	r0, r4
   ba9d8:	f7ff fc65 	bl	ba2a6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   ba9dc:	4620      	mov	r0, r4
   ba9de:	b00a      	add	sp, #40	; 0x28
   ba9e0:	bd10      	pop	{r4, pc}

000ba9e2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   ba9e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba9e4:	4605      	mov	r5, r0
   ba9e6:	4616      	mov	r6, r2
   ba9e8:	461f      	mov	r7, r3
   ba9ea:	460a      	mov	r2, r1
   ba9ec:	ab01      	add	r3, sp, #4
   ba9ee:	e9d0 0100 	ldrd	r0, r1, [r0]
   ba9f2:	f7ff fd7b 	bl	ba4ec <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   ba9f6:	f030 0402 	bics.w	r4, r0, #2
   ba9fa:	d00c      	beq.n	baa16 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   ba9fc:	1e84      	subs	r4, r0, #2
   ba9fe:	42bc      	cmp	r4, r7
   baa00:	bf28      	it	cs
   baa02:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   baa04:	b13e      	cbz	r6, baa16 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   baa06:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   baa08:	682b      	ldr	r3, [r5, #0]
   baa0a:	3102      	adds	r1, #2
   baa0c:	4622      	mov	r2, r4
   baa0e:	4419      	add	r1, r3
   baa10:	4630      	mov	r0, r6
   baa12:	f003 ffd4 	bl	be9be <memcpy>
}
   baa16:	4620      	mov	r0, r4
   baa18:	b003      	add	sp, #12
   baa1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000baa1c <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   baa1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   baa1e:	4613      	mov	r3, r2
   baa20:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   baa22:	9201      	str	r2, [sp, #4]
   baa24:	460a      	mov	r2, r1
   baa26:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   baa28:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   baa2a:	f7ff ffda 	bl	ba9e2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   baa2e:	b940      	cbnz	r0, baa42 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   baa30:	9b01      	ldr	r3, [sp, #4]
   baa32:	4622      	mov	r2, r4
   baa34:	2109      	movs	r1, #9
   baa36:	4628      	mov	r0, r5
}
   baa38:	b003      	add	sp, #12
   baa3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   baa3e:	f7ff bfd0 	b.w	ba9e2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   baa42:	b003      	add	sp, #12
   baa44:	bd30      	pop	{r4, r5, pc}
	...

000baa48 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   baa48:	b5f0      	push	{r4, r5, r6, r7, lr}
   baa4a:	460c      	mov	r4, r1
   baa4c:	b089      	sub	sp, #36	; 0x24
    String name;
   baa4e:	490c      	ldr	r1, [pc, #48]	; (baa80 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   baa50:	4605      	mov	r5, r0
    String name;
   baa52:	f7ff fc28 	bl	ba2a6 <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   baa56:	221f      	movs	r2, #31
   baa58:	4669      	mov	r1, sp
   baa5a:	4620      	mov	r0, r4
   baa5c:	f7ff ffde 	bl	baa1c <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   baa60:	4606      	mov	r6, r0
   baa62:	b150      	cbz	r0, baa7a <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   baa64:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   baa66:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   baa68:	f814 1b01 	ldrb.w	r1, [r4], #1
   baa6c:	4628      	mov	r0, r5
   baa6e:	f7ff fc99 	bl	ba3a4 <_ZN6String6concatEc>
   baa72:	b110      	cbz	r0, baa7a <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   baa74:	3701      	adds	r7, #1
   baa76:	42be      	cmp	r6, r7
   baa78:	d1f6      	bne.n	baa68 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   baa7a:	4628      	mov	r0, r5
   baa7c:	b009      	add	sp, #36	; 0x24
   baa7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   baa80:	000c0c12 	.word	0x000c0c12

000baa84 <_ZNK8particle18BleAdvertisingData10customDataEPhj>:
size_t BleAdvertisingData::customData(uint8_t* buf, size_t len) const {
   baa84:	4613      	mov	r3, r2
    return get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len);
   baa86:	460a      	mov	r2, r1
   baa88:	21ff      	movs	r1, #255	; 0xff
   baa8a:	f7ff bfaa 	b.w	ba9e2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>

000baa8e <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   baa8e:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   baa90:	2302      	movs	r3, #2
   baa92:	aa01      	add	r2, sp, #4
   baa94:	2119      	movs	r1, #25
   baa96:	f7ff ffa4 	bl	ba9e2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   baa9a:	b108      	cbz	r0, baaa0 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   baa9c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   baaa0:	b003      	add	sp, #12
   baaa2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000baaa8 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   baaa8:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   baaaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   baaae:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   baab0:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   baab2:	8043      	strh	r3, [r0, #2]
   baab4:	220e      	movs	r2, #14
   baab6:	4629      	mov	r1, r5
   baab8:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   baaba:	7105      	strb	r5, [r0, #4]
   baabc:	3006      	adds	r0, #6
   baabe:	f003 ffa6 	bl	bea0e <memset>
   baac2:	f104 0014 	add.w	r0, r4, #20
   baac6:	f7ff fe25 	bl	ba714 <_ZN8particle7BleUuidC1Ev>
   baaca:	f104 0028 	add.w	r0, r4, #40	; 0x28
   baace:	f7ff fe21 	bl	ba714 <_ZN8particle7BleUuidC1Ev>
   baad2:	4904      	ldr	r1, [pc, #16]	; (baae4 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   baad4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   baad8:	f7ff fbe5 	bl	ba2a6 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   baadc:	6565      	str	r5, [r4, #84]	; 0x54
    }
   baade:	4620      	mov	r0, r4
   baae0:	bd38      	pop	{r3, r4, r5, pc}
   baae2:	bf00      	nop
   baae4:	000c0c12 	.word	0x000c0c12

000baae8 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   baae8:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   baaea:	680d      	ldr	r5, [r1, #0]
   baaec:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   baaee:	4601      	mov	r1, r0
   baaf0:	f105 0028 	add.w	r0, r5, #40	; 0x28
   baaf4:	f7ff fe69 	bl	ba7ca <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   baaf8:	b140      	cbz	r0, bab0c <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   baafa:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   baafc:	8aa2      	ldrh	r2, [r4, #20]
   baafe:	429a      	cmp	r2, r3
   bab00:	d805      	bhi.n	bab0e <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   bab02:	8ae0      	ldrh	r0, [r4, #22]
   bab04:	4298      	cmp	r0, r3
   bab06:	bf34      	ite	cc
   bab08:	2000      	movcc	r0, #0
   bab0a:	2001      	movcs	r0, #1
    }
   bab0c:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   bab0e:	2000      	movs	r0, #0
   bab10:	e7fc      	b.n	bab0c <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000bab12 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   bab12:	b510      	push	{r4, lr}
    return data_ + size_;
   bab14:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   bab18:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   bab1c:	4293      	cmp	r3, r2
   bab1e:	4618      	mov	r0, r3
   bab20:	d006      	beq.n	bab30 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   bab22:	6804      	ldr	r4, [r0, #0]
   bab24:	8824      	ldrh	r4, [r4, #0]
   bab26:	428c      	cmp	r4, r1
   bab28:	f103 0308 	add.w	r3, r3, #8
   bab2c:	d1f6      	bne.n	bab1c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   bab2e:	bd10      	pop	{r4, pc}
        return nullptr;
   bab30:	2000      	movs	r0, #0
   bab32:	e7fc      	b.n	bab2e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000bab34 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bab34:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   bab36:	b570      	push	{r4, r5, r6, lr}
   bab38:	6003      	str	r3, [r0, #0]
   bab3a:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bab3c:	2068      	movs	r0, #104	; 0x68
   bab3e:	f7f9 faaa 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bab42:	1e04      	subs	r4, r0, #0
   bab44:	f104 060c 	add.w	r6, r4, #12
   bab48:	d007      	beq.n	bab5a <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   bab4a:	2301      	movs	r3, #1
   bab4c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   bab50:	4b04      	ldr	r3, [pc, #16]	; (bab64 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   bab52:	6023      	str	r3, [r4, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bab54:	4630      	mov	r0, r6
   bab56:	f7ff ffa7 	bl	baaa8 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   bab5a:	e9c5 6400 	strd	r6, r4, [r5]
}
   bab5e:	4628      	mov	r0, r5
   bab60:	bd70      	pop	{r4, r5, r6, pc}
   bab62:	bf00      	nop
   bab64:	000c1b6c 	.word	0x000c1b6c

000bab68 <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   bab68:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   bab6a:	680c      	ldr	r4, [r1, #0]
   bab6c:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   bab6e:	4606      	mov	r6, r0
    return impl()->charUUID();
   bab70:	4605      	mov	r5, r0
   bab72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bab74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bab76:	6823      	ldr	r3, [r4, #0]
   bab78:	602b      	str	r3, [r5, #0]
}
   bab7a:	4630      	mov	r0, r6
   bab7c:	bd70      	pop	{r4, r5, r6, pc}
	...

000bab80 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   bab80:	b5f0      	push	{r4, r5, r6, r7, lr}
   bab82:	4606      	mov	r6, r0
   bab84:	b085      	sub	sp, #20
   bab86:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   bab88:	460d      	mov	r5, r1
   bab8a:	2900      	cmp	r1, #0
   bab8c:	d050      	beq.n	bac30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   bab8e:	2a00      	cmp	r2, #0
   bab90:	d04e      	beq.n	bac30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
   bab92:	6804      	ldr	r4, [r0, #0]
    if (impl()->isLocal()) {
   bab94:	7823      	ldrb	r3, [r4, #0]
   bab96:	2af4      	cmp	r2, #244	; 0xf4
   bab98:	bf28      	it	cs
   bab9a:	22f4      	movcs	r2, #244	; 0xf4
   bab9c:	b343      	cbz	r3, babf0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   bab9e:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   baba0:	0798      	lsls	r0, r3, #30
   baba2:	d509      	bpl.n	babb8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   baba4:	89a0      	ldrh	r0, [r4, #12]
   baba6:	9203      	str	r2, [sp, #12]
   baba8:	2300      	movs	r3, #0
   babaa:	f7fe fed9 	bl	b9960 <hal_ble_gatt_server_set_characteristic_value>
   babae:	2800      	cmp	r0, #0
   babb0:	9a03      	ldr	r2, [sp, #12]
   babb2:	da03      	bge.n	babbc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   babb4:	b005      	add	sp, #20
   babb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   babb8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   babbc:	6834      	ldr	r4, [r6, #0]
   babbe:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   babc0:	06d9      	lsls	r1, r3, #27
   babc2:	d509      	bpl.n	babd8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   babc4:	2f01      	cmp	r7, #1
   babc6:	d007      	beq.n	babd8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   babc8:	89a0      	ldrh	r0, [r4, #12]
   babca:	2300      	movs	r3, #0
   babcc:	4629      	mov	r1, r5
}
   babce:	b005      	add	sp, #20
   babd0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   babd4:	f7fe bf1e 	b.w	b9a14 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   babd8:	069b      	lsls	r3, r3, #26
   babda:	d5eb      	bpl.n	babb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   babdc:	2f02      	cmp	r7, #2
   babde:	d0e9      	beq.n	babb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   babe0:	89a0      	ldrh	r0, [r4, #12]
   babe2:	2300      	movs	r3, #0
   babe4:	4629      	mov	r1, r5
}
   babe6:	b005      	add	sp, #20
   babe8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   babec:	f7fe bf1c 	b.w	b9a28 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   babf0:	8860      	ldrh	r0, [r4, #2]
   babf2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   babf6:	4288      	cmp	r0, r1
   babf8:	d01c      	beq.n	bac34 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   babfa:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   babfc:	074e      	lsls	r6, r1, #29
   babfe:	d501      	bpl.n	bac04 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   bac00:	2f01      	cmp	r7, #1
   bac02:	d104      	bne.n	bac0e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   bac04:	070b      	lsls	r3, r1, #28
   bac06:	d409      	bmi.n	bac1c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   bac08:	f06f 0077 	mvn.w	r0, #119	; 0x77
   bac0c:	e7d2      	b.n	babb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   bac0e:	89a1      	ldrh	r1, [r4, #12]
   bac10:	9300      	str	r3, [sp, #0]
   bac12:	4613      	mov	r3, r2
   bac14:	462a      	mov	r2, r5
   bac16:	f7fe fecb 	bl	b99b0 <hal_ble_gatt_client_write_without_response>
   bac1a:	e7cb      	b.n	babb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   bac1c:	2f02      	cmp	r7, #2
   bac1e:	d0f3      	beq.n	bac08 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   bac20:	2300      	movs	r3, #0
   bac22:	89a1      	ldrh	r1, [r4, #12]
   bac24:	9300      	str	r3, [sp, #0]
   bac26:	4613      	mov	r3, r2
   bac28:	462a      	mov	r2, r5
   bac2a:	f7fe feb7 	bl	b999c <hal_ble_gatt_client_write_with_response>
   bac2e:	e7c1      	b.n	babb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   bac30:	4802      	ldr	r0, [pc, #8]	; (bac3c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   bac32:	e7bf      	b.n	babb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   bac34:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   bac38:	e7bc      	b.n	babb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   bac3a:	bf00      	nop
   bac3c:	fffffef2 	.word	0xfffffef2

000bac40 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   bac40:	b510      	push	{r4, lr}
   bac42:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   bac44:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   bac46:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   bac48:	bb52      	cbnz	r2, baca0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   bac4a:	885c      	ldrh	r4, [r3, #2]
   bac4c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   bac50:	4284      	cmp	r4, r0
   bac52:	d025      	beq.n	baca0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   bac54:	8a18      	ldrh	r0, [r3, #16]
   bac56:	b330      	cbz	r0, baca6 <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   bac58:	e9cd 2203 	strd	r2, r2, [sp, #12]
   bac5c:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   bac5e:	4a13      	ldr	r2, [pc, #76]	; (bacac <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   bac60:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   bac62:	4a13      	ldr	r2, [pc, #76]	; (bacb0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   bac64:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   bac68:	885a      	ldrh	r2, [r3, #2]
   bac6a:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   bac6e:	8a1a      	ldrh	r2, [r3, #16]
   bac70:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   bac74:	899a      	ldrh	r2, [r3, #12]
   bac76:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   bac7a:	b159      	cbz	r1, bac94 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   bac7c:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   bac7e:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   bac80:	bf44      	itt	mi
   bac82:	2202      	movmi	r2, #2
   bac84:	9205      	strmi	r2, [sp, #20]
   bac86:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   bac88:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   bac8a:	bf42      	ittt	mi
   bac8c:	9b05      	ldrmi	r3, [sp, #20]
   bac8e:	f043 0301 	orrmi.w	r3, r3, #1
   bac92:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   bac94:	2100      	movs	r1, #0
   bac96:	4668      	mov	r0, sp
   bac98:	f7fe feb2 	bl	b9a00 <hal_ble_gatt_client_configure_cccd>
}
   bac9c:	b006      	add	sp, #24
   bac9e:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   baca0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   baca4:	e7fa      	b.n	bac9c <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   baca6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   bacaa:	e7f7      	b.n	bac9c <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   bacac:	00180003 	.word	0x00180003
   bacb0:	000bae85 	.word	0x000bae85

000bacb4 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   bacb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bacb6:	2600      	movs	r6, #0
   bacb8:	6006      	str	r6, [r0, #0]
   bacba:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bacbc:	2028      	movs	r0, #40	; 0x28
   bacbe:	f7f9 f9ea 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bacc2:	1e04      	subs	r4, r0, #0
   bacc4:	f104 070c 	add.w	r7, r4, #12
   bacc8:	d00a      	beq.n	bace0 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   bacca:	2301      	movs	r3, #1
   baccc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   bacd0:	4b05      	ldr	r3, [pc, #20]	; (bace8 <_ZN8particle10BleServiceC1Ev+0x34>)
   bacd2:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   bacd4:	4638      	mov	r0, r7
   bacd6:	f7ff fd1d 	bl	ba714 <_ZN8particle7BleUuidC1Ev>
   bacda:	6226      	str	r6, [r4, #32]
   bacdc:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   bace0:	e9c5 7400 	strd	r7, r4, [r5]
}
   bace4:	4628      	mov	r0, r5
   bace6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bace8:	000c1b88 	.word	0x000c1b88

000bacec <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   bacec:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bacee:	2500      	movs	r5, #0
   bacf0:	6005      	str	r5, [r0, #0]
   bacf2:	4606      	mov	r6, r0
   bacf4:	2030      	movs	r0, #48	; 0x30
   bacf6:	f7f9 f9ce 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bacfa:	4604      	mov	r4, r0
   bacfc:	b188      	cbz	r0, bad22 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   bacfe:	2301      	movs	r3, #1
   bad00:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   bad04:	4b09      	ldr	r3, [pc, #36]	; (bad2c <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   bad06:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   bad08:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bad0c:	8183      	strh	r3, [r0, #12]
   bad0e:	300e      	adds	r0, #14
   bad10:	f7ff fcf5 	bl	ba6fe <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   bad14:	e9c4 5506 	strd	r5, r5, [r4, #24]
   bad18:	e9c4 5508 	strd	r5, r5, [r4, #32]
   bad1c:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   bad20:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   bad22:	6074      	str	r4, [r6, #4]
   bad24:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   bad26:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   bad28:	4630      	mov	r0, r6
   bad2a:	bd70      	pop	{r4, r5, r6, pc}
   bad2c:	000c1ba4 	.word	0x000c1ba4

000bad30 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   bad30:	b513      	push	{r0, r1, r4, lr}
   bad32:	4604      	mov	r4, r0
    WiringBleLock lk;
   bad34:	a801      	add	r0, sp, #4
   bad36:	f7ff fca7 	bl	ba688 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   bad3a:	6823      	ldr	r3, [r4, #0]
   bad3c:	881c      	ldrh	r4, [r3, #0]
   bad3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bad42:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   bad44:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   bad46:	bf18      	it	ne
   bad48:	2401      	movne	r4, #1
    WiringBleLock lk;
   bad4a:	f7ff fcab 	bl	ba6a4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bad4e:	4620      	mov	r0, r4
   bad50:	b002      	add	sp, #8
   bad52:	bd10      	pop	{r4, pc}

000bad54 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   bad54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bad56:	4605      	mov	r5, r0
   bad58:	460c      	mov	r4, r1
    WiringBleLock lk;
   bad5a:	a801      	add	r0, sp, #4
   bad5c:	f7ff fc94 	bl	ba688 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bad60:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   bad62:	6823      	ldr	r3, [r4, #0]
   bad64:	f8c2 3002 	str.w	r3, [r2, #2]
   bad68:	6863      	ldr	r3, [r4, #4]
   bad6a:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   bad6e:	a801      	add	r0, sp, #4
   bad70:	f7ff fc98 	bl	ba6a4 <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   bad74:	b003      	add	sp, #12
   bad76:	bd30      	pop	{r4, r5, pc}

000bad78 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   bad78:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bad7a:	460d      	mov	r5, r1
   bad7c:	4604      	mov	r4, r0
    WiringBleLock lk;
   bad7e:	a801      	add	r0, sp, #4
   bad80:	f7ff fc82 	bl	ba688 <_ZN8particle3ble13WiringBleLockC1Ev>
   bad84:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   bad86:	f8d2 3002 	ldr.w	r3, [r2, #2]
   bad8a:	6023      	str	r3, [r4, #0]
   bad8c:	f8d2 3006 	ldr.w	r3, [r2, #6]
   bad90:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   bad92:	a801      	add	r0, sp, #4
   bad94:	f7ff fc86 	bl	ba6a4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   bad98:	4620      	mov	r0, r4
   bad9a:	b003      	add	sp, #12
   bad9c:	bd30      	pop	{r4, r5, pc}

000bad9e <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   bad9e:	b530      	push	{r4, r5, lr}
   bada0:	4605      	mov	r5, r0
   bada2:	b087      	sub	sp, #28
   bada4:	460c      	mov	r4, r1
    WiringBleLock lk;
   bada6:	a801      	add	r0, sp, #4
   bada8:	f7ff fc6e 	bl	ba688 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   badac:	682a      	ldr	r2, [r5, #0]
   badae:	6823      	ldr	r3, [r4, #0]
   badb0:	8812      	ldrh	r2, [r2, #0]
   badb2:	881b      	ldrh	r3, [r3, #0]
   badb4:	429a      	cmp	r2, r3
   badb6:	d10d      	bne.n	badd4 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   badb8:	4629      	mov	r1, r5
   badba:	a802      	add	r0, sp, #8
   badbc:	f7ff ffdc 	bl	bad78 <_ZNK8particle13BlePeerDevice7addressEv>
   badc0:	4621      	mov	r1, r4
   badc2:	a804      	add	r0, sp, #16
   badc4:	f7ff ffd8 	bl	bad78 <_ZNK8particle13BlePeerDevice7addressEv>
   badc8:	a904      	add	r1, sp, #16
   badca:	a802      	add	r0, sp, #8
   badcc:	f7ff fc83 	bl	ba6d6 <_ZNK8particle10BleAddresseqERKS0_>
   badd0:	4604      	mov	r4, r0
   badd2:	b900      	cbnz	r0, badd6 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   badd4:	2400      	movs	r4, #0
    WiringBleLock lk;
   badd6:	a801      	add	r0, sp, #4
   badd8:	f7ff fc64 	bl	ba6a4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   baddc:	4620      	mov	r0, r4
   badde:	b007      	add	sp, #28
   bade0:	bd30      	pop	{r4, r5, pc}
	...

000bade4 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   bade4:	b510      	push	{r4, lr}
   bade6:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   bade8:	2064      	movs	r0, #100	; 0x64
   badea:	f7f9 f954 	bl	b4096 <_Znwj>
   badee:	b168      	cbz	r0, bae0c <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   badf0:	2300      	movs	r3, #0
   badf2:	e9c0 3300 	strd	r3, r3, [r0]
   badf6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   badfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
   badfe:	e9c0 3306 	strd	r3, r3, [r0, #24]
   bae02:	6203      	str	r3, [r0, #32]
   bae04:	62c3      	str	r3, [r0, #44]	; 0x2c
   bae06:	63c3      	str	r3, [r0, #60]	; 0x3c
   bae08:	64c3      	str	r3, [r0, #76]	; 0x4c
   bae0a:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   bae0c:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   bae0e:	b920      	cbnz	r0, bae1a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   bae10:	4a0a      	ldr	r2, [pc, #40]	; (bae3c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   bae12:	490b      	ldr	r1, [pc, #44]	; (bae40 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   bae14:	200a      	movs	r0, #10
   bae16:	f7fe ff91 	bl	b9d3c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   bae1a:	2000      	movs	r0, #0
   bae1c:	f7fe fd64 	bl	b98e8 <hal_ble_stack_init>
   bae20:	b120      	cbz	r0, bae2c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   bae22:	4a06      	ldr	r2, [pc, #24]	; (bae3c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   bae24:	4907      	ldr	r1, [pc, #28]	; (bae44 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   bae26:	200a      	movs	r0, #10
   bae28:	f7fe ff88 	bl	b9d3c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   bae2c:	6821      	ldr	r1, [r4, #0]
   bae2e:	4806      	ldr	r0, [pc, #24]	; (bae48 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   bae30:	2200      	movs	r2, #0
   bae32:	f7fe fddb 	bl	b99ec <hal_ble_set_callback_on_periph_link_events>
}
   bae36:	4620      	mov	r0, r4
   bae38:	bd10      	pop	{r4, pc}
   bae3a:	bf00      	nop
   bae3c:	000b9899 	.word	0x000b9899
   bae40:	000c1948 	.word	0x000c1948
   bae44:	000c1986 	.word	0x000c1986
   bae48:	000bb891 	.word	0x000bb891

000bae4c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   bae4c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   bae4e:	4c0a      	ldr	r4, [pc, #40]	; (bae78 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   bae50:	7823      	ldrb	r3, [r4, #0]
   bae52:	f3bf 8f5b 	dmb	ish
   bae56:	07db      	lsls	r3, r3, #31
   bae58:	d40c      	bmi.n	bae74 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   bae5a:	4620      	mov	r0, r4
   bae5c:	f7f9 f92e 	bl	b40bc <__cxa_guard_acquire>
   bae60:	b140      	cbz	r0, bae74 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   bae62:	4806      	ldr	r0, [pc, #24]	; (bae7c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   bae64:	f7ff ffbe 	bl	bade4 <_ZN8particle14BleLocalDeviceC1Ev>
   bae68:	4620      	mov	r0, r4
   bae6a:	f7f9 f92c 	bl	b40c6 <__cxa_guard_release>
   bae6e:	4804      	ldr	r0, [pc, #16]	; (bae80 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   bae70:	f003 fd88 	bl	be984 <atexit>
    return instance;
}
   bae74:	4801      	ldr	r0, [pc, #4]	; (bae7c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   bae76:	bd10      	pop	{r4, pc}
   bae78:	2003e66c 	.word	0x2003e66c
   bae7c:	2003e674 	.word	0x2003e674
   bae80:	000bb195 	.word	0x000bb195

000bae84 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   bae84:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   bae86:	6803      	ldr	r3, [r0, #0]
   bae88:	3b09      	subs	r3, #9
   bae8a:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   bae8c:	b08d      	sub	sp, #52	; 0x34
   bae8e:	4604      	mov	r4, r0
   bae90:	460d      	mov	r5, r1
    switch (event->type) {
   bae92:	d811      	bhi.n	baeb8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   bae94:	f7ff ffda 	bl	bae4c <_ZN8particle14BleLocalDevice11getInstanceEv>
   bae98:	88a1      	ldrh	r1, [r4, #4]
   bae9a:	6800      	ldr	r0, [r0, #0]
   bae9c:	f7ff fe39 	bl	bab12 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   baea0:	4603      	mov	r3, r0
   baea2:	b958      	cbnz	r0, baebc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   baea4:	2220      	movs	r2, #32
   baea6:	e9cd 2004 	strd	r2, r0, [sp, #16]
   baeaa:	4a0b      	ldr	r2, [pc, #44]	; (baed8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   baeac:	9200      	str	r2, [sp, #0]
   baeae:	490b      	ldr	r1, [pc, #44]	; (baedc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   baeb0:	aa04      	add	r2, sp, #16
   baeb2:	2032      	movs	r0, #50	; 0x32
   baeb4:	f7fe ff4a 	bl	b9d4c <log_message>
}
   baeb8:	b00d      	add	sp, #52	; 0x34
   baeba:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   baebc:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   baebe:	2a00      	cmp	r2, #0
   baec0:	d0fa      	beq.n	baeb8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   baec2:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   baec6:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   baeca:	e9cd 1203 	strd	r1, r2, [sp, #12]
   baece:	6dac      	ldr	r4, [r5, #88]	; 0x58
   baed0:	aa04      	add	r2, sp, #16
   baed2:	a903      	add	r1, sp, #12
   baed4:	47a0      	blx	r4
}
   baed6:	e7ef      	b.n	baeb8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   baed8:	000c19c8 	.word	0x000c19c8
   baedc:	000c195f 	.word	0x000c195f

000baee0 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   baee0:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   baee2:	2000      	movs	r0, #0
   baee4:	f7fe fd00 	bl	b98e8 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   baee8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   baeec:	bd08      	pop	{r3, pc}

000baeee <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   baeee:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   baef0:	2100      	movs	r1, #0
   baef2:	f7fe bd01 	b.w	b98f8 <hal_ble_gap_set_tx_power>
	...

000baef8 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   baef8:	b570      	push	{r4, r5, r6, lr}
   baefa:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   baefc:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   baefe:	460e      	mov	r6, r1
   baf00:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   baf02:	f7ff fb3f 	bl	ba584 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   baf06:	f104 0028 	add.w	r0, r4, #40	; 0x28
   baf0a:	f7ff fb46 	bl	ba59a <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   baf0e:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   baf12:	2200      	movs	r2, #0
   baf14:	4621      	mov	r1, r4
   baf16:	4803      	ldr	r0, [pc, #12]	; (baf24 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   baf18:	f7fe fd06 	bl	b9928 <hal_ble_gap_start_scan>
   baf1c:	2800      	cmp	r0, #0
        return foundCount_;
   baf1e:	bfa8      	it	ge
   baf20:	6960      	ldrge	r0, [r4, #20]
    }
   baf22:	bd70      	pop	{r4, r5, r6, pc}
   baf24:	000bc855 	.word	0x000bc855

000baf28 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   baf28:	b510      	push	{r4, lr}
   baf2a:	4604      	mov	r4, r0
    ::free(ptr);
   baf2c:	6940      	ldr	r0, [r0, #20]
   baf2e:	f7fe fff9 	bl	b9f24 <free>
   baf32:	68a0      	ldr	r0, [r4, #8]
   baf34:	f7fe fff6 	bl	b9f24 <free>
   baf38:	4620      	mov	r0, r4
   baf3a:	bd10      	pop	{r4, pc}

000baf3c <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   baf3c:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   baf3e:	f647 717f 	movw	r1, #32639	; 0x7f7f
   baf42:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
   baf46:	e9c0 2202 	strd	r2, r2, [r0, #8]
   baf4a:	e9c0 2204 	strd	r2, r2, [r0, #16]
   baf4e:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   baf52:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   baf56:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   baf5a:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   baf5e:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   baf62:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   baf66:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   baf6a:	6202      	str	r2, [r0, #32]
   baf6c:	6302      	str	r2, [r0, #48]	; 0x30
   baf6e:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
   baf72:	4770      	bx	lr

000baf74 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>:
    std::function<void(const BleScanResult*)> scanResultCallback_;
    BleOnScanResultStdFunction scanResultCallbackRef_;
    BleScanFilter filter_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   baf74:	b530      	push	{r4, r5, lr}
   baf76:	b085      	sub	sp, #20
    hal_ble_scan_params_t scanParams = {};
   baf78:	2400      	movs	r4, #0
    scanParams.size = sizeof(hal_ble_scan_params_t);
   baf7a:	2310      	movs	r3, #16
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   baf7c:	460d      	mov	r5, r1
    scanParams.size = sizeof(hal_ble_scan_params_t);
   baf7e:	f8ad 3002 	strh.w	r3, [sp, #2]
    scanParams.version = BLE_API_VERSION;
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   baf82:	4621      	mov	r1, r4
    scanParams.version = BLE_API_VERSION;
   baf84:	2303      	movs	r3, #3
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   baf86:	4668      	mov	r0, sp
    scanParams.version = BLE_API_VERSION;
   baf88:	f8ad 3000 	strh.w	r3, [sp]
    hal_ble_scan_params_t scanParams = {};
   baf8c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   baf90:	9403      	str	r4, [sp, #12]
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   baf92:	f7fe fcc1 	bl	b9918 <hal_ble_gap_get_scan_parameters>
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   baf96:	4621      	mov	r1, r4
   baf98:	4668      	mov	r0, sp
    scanParams.timeout = timeout;
   baf9a:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   baf9e:	f7fe fcb3 	bl	b9908 <hal_ble_gap_set_scan_parameters>
}
   bafa2:	b005      	add	sp, #20
   bafa4:	bd30      	pop	{r4, r5, pc}

000bafa6 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   bafa6:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   bafa8:	69d8      	ldr	r0, [r3, #28]
}
   bafaa:	2800      	cmp	r0, #0
   bafac:	bfd4      	ite	le
   bafae:	2000      	movle	r0, #0
   bafb0:	2001      	movgt	r0, #1
   bafb2:	4770      	bx	lr

000bafb4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bafb4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bafb6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bafba:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bafbc:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bafc0:	42ae      	cmp	r6, r5
   bafc2:	d004      	beq.n	bafce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bafc4:	4628      	mov	r0, r5
   bafc6:	f7ff f923 	bl	ba210 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bafca:	3510      	adds	r5, #16
   bafcc:	e7f8      	b.n	bafc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bafce:	6820      	ldr	r0, [r4, #0]
   bafd0:	f7fe ffa8 	bl	b9f24 <free>
}
   bafd4:	4620      	mov	r0, r4
   bafd6:	bd70      	pop	{r4, r5, r6, pc}

000bafd8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bafd8:	b510      	push	{r4, lr}
   bafda:	4604      	mov	r4, r0
    ::free(ptr);
   bafdc:	6800      	ldr	r0, [r0, #0]
   bafde:	f7fe ffa1 	bl	b9f24 <free>
}
   bafe2:	4620      	mov	r0, r4
   bafe4:	bd10      	pop	{r4, pc}

000bafe6 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   bafe6:	b570      	push	{r4, r5, r6, lr}
   bafe8:	4604      	mov	r4, r0
    ::free(ptr);
   bafea:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   bafec:	f7fe ff9a 	bl	b9f24 <free>
   baff0:	6d20      	ldr	r0, [r4, #80]	; 0x50
   baff2:	f7fe ff97 	bl	b9f24 <free>
    }
    ~BleScanFilter() = default;
   baff6:	f104 0538 	add.w	r5, r4, #56	; 0x38
   baffa:	f104 0044 	add.w	r0, r4, #68	; 0x44
   baffe:	f7ff ffeb 	bl	bafd8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   bb002:	4628      	mov	r0, r5
   bb004:	f7ff ffd6 	bl	bafb4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   bb008:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bb00c:	f7f9 fa5e 	bl	b44cc <_ZNSt14_Function_baseD1Ev>
   bb010:	f104 0018 	add.w	r0, r4, #24
   bb014:	f7f9 fa5a 	bl	b44cc <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   bb018:	e9d4 5300 	ldrd	r5, r3, [r4]
   bb01c:	2624      	movs	r6, #36	; 0x24
   bb01e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bb022:	42ae      	cmp	r6, r5
   bb024:	d004      	beq.n	bb030 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   bb026:	4628      	mov	r0, r5
   bb028:	f7ff ff7e 	bl	baf28 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   bb02c:	3524      	adds	r5, #36	; 0x24
   bb02e:	e7f8      	b.n	bb022 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   bb030:	6820      	ldr	r0, [r4, #0]
   bb032:	f7fe ff77 	bl	b9f24 <free>
   bb036:	4620      	mov	r0, r4
   bb038:	bd70      	pop	{r4, r5, r6, pc}
	...

000bb03c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   bb03c:	b530      	push	{r4, r5, lr}
   bb03e:	4615      	mov	r5, r2
   bb040:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   bb042:	460c      	mov	r4, r1
   bb044:	b179      	cbz	r1, bb066 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   bb046:	b172      	cbz	r2, bb066 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
    BleScanDelegator scanner;
   bb048:	a801      	add	r0, sp, #4
   bb04a:	f7ff ff77 	bl	baf3c <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   bb04e:	4621      	mov	r1, r4
   bb050:	462a      	mov	r2, r5
   bb052:	a801      	add	r0, sp, #4
   bb054:	f7ff ff50 	bl	baef8 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   bb058:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   bb05a:	a801      	add	r0, sp, #4
   bb05c:	f7ff ffc3 	bl	bafe6 <_ZN8particle16BleScanDelegatorD1Ev>
}
   bb060:	4620      	mov	r0, r4
   bb062:	b01f      	add	sp, #124	; 0x7c
   bb064:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   bb066:	4c01      	ldr	r4, [pc, #4]	; (bb06c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   bb068:	e7fa      	b.n	bb060 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   bb06a:	bf00      	nop
   bb06c:	fffffef2 	.word	0xfffffef2

000bb070 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   bb070:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   bb072:	1e14      	subs	r4, r2, #0
   bb074:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   bb076:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   bb078:	db02      	blt.n	bb080 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   bb07a:	1862      	adds	r2, r4, r1
   bb07c:	429a      	cmp	r2, r3
   bb07e:	dd00      	ble.n	bb082 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   bb080:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   bb082:	682a      	ldr	r2, [r5, #0]
   bb084:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   bb086:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   bb088:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb08a:	1a52      	subs	r2, r2, r1
   bb08c:	f003 fca5 	bl	be9da <memmove>
    size_ -= n;
   bb090:	686a      	ldr	r2, [r5, #4]
   bb092:	1b12      	subs	r2, r2, r4
   bb094:	606a      	str	r2, [r5, #4]
}
   bb096:	bd38      	pop	{r3, r4, r5, pc}

000bb098 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   bb098:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bb09a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   bb09c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   bb09e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bb0a0:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   bb0a2:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bb0a4:	f7f8 fff7 	bl	b4096 <_Znwj>
   bb0a8:	b118      	cbz	r0, bb0b2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   bb0aa:	682b      	ldr	r3, [r5, #0]
   bb0ac:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bb0ae:	686b      	ldr	r3, [r5, #4]
   bb0b0:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   bb0b2:	4b03      	ldr	r3, [pc, #12]	; (bb0c0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   bb0b4:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   bb0b6:	4b03      	ldr	r3, [pc, #12]	; (bb0c4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bb0b8:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   bb0ba:	60a3      	str	r3, [r4, #8]
      }
   bb0bc:	4620      	mov	r0, r4
   bb0be:	bd38      	pop	{r3, r4, r5, pc}
   bb0c0:	000ba52d 	.word	0x000ba52d
   bb0c4:	000ba545 	.word	0x000ba545

000bb0c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   bb0c8:	680b      	ldr	r3, [r1, #0]
   bb0ca:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   bb0cc:	b113      	cbz	r3, bb0d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   bb0ce:	685a      	ldr	r2, [r3, #4]
   bb0d0:	3201      	adds	r2, #1
   bb0d2:	605a      	str	r2, [r3, #4]
      }
   bb0d4:	4770      	bx	lr

000bb0d6 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   bb0d6:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bb0d8:	f851 3b04 	ldr.w	r3, [r1], #4
   bb0dc:	4604      	mov	r4, r0
   bb0de:	f840 3b04 	str.w	r3, [r0], #4
   bb0e2:	f7ff fff1 	bl	bb0c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   bb0e6:	6823      	ldr	r3, [r4, #0]
   bb0e8:	b90b      	cbnz	r3, bb0ee <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   bb0ea:	f7ff fa15 	bl	ba518 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   bb0ee:	4620      	mov	r0, r4
   bb0f0:	bd10      	pop	{r4, pc}

000bb0f2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bb0f2:	b510      	push	{r4, lr}
   bb0f4:	f851 3b04 	ldr.w	r3, [r1], #4
   bb0f8:	4604      	mov	r4, r0
   bb0fa:	f840 3b04 	str.w	r3, [r0], #4
   bb0fe:	f7ff ffe3 	bl	bb0c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bb102:	4620      	mov	r0, r4
   bb104:	bd10      	pop	{r4, pc}

000bb106 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bb106:	b510      	push	{r4, lr}
   bb108:	f851 3b04 	ldr.w	r3, [r1], #4
   bb10c:	4604      	mov	r4, r0
   bb10e:	f840 3b04 	str.w	r3, [r0], #4
   bb112:	f7ff ffd9 	bl	bb0c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bb116:	4620      	mov	r0, r4
   bb118:	bd10      	pop	{r4, pc}

000bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   bb11a:	b510      	push	{r4, lr}
   bb11c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   bb11e:	6800      	ldr	r0, [r0, #0]
   bb120:	b108      	cbz	r0, bb126 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   bb122:	f7f9 fa11 	bl	b4548 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   bb126:	4620      	mov	r0, r4
   bb128:	bd10      	pop	{r4, pc}

000bb12a <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   bb12a:	b510      	push	{r4, lr}
   bb12c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bb12e:	3004      	adds	r0, #4
   bb130:	f7ff fff3 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb134:	4620      	mov	r0, r4
   bb136:	bd10      	pop	{r4, pc}

000bb138 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bb138:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bb13a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bb13e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bb140:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bb144:	42ae      	cmp	r6, r5
   bb146:	d004      	beq.n	bb152 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   bb148:	1d28      	adds	r0, r5, #4
   bb14a:	f7ff ffe6 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb14e:	3508      	adds	r5, #8
   bb150:	e7f8      	b.n	bb144 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bb152:	6820      	ldr	r0, [r4, #0]
   bb154:	f7fe fee6 	bl	b9f24 <free>
}
   bb158:	4620      	mov	r0, r4
   bb15a:	bd70      	pop	{r4, r5, r6, pc}

000bb15c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bb15c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bb15e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bb162:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bb164:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bb168:	42ae      	cmp	r6, r5
   bb16a:	d004      	beq.n	bb176 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   bb16c:	1d28      	adds	r0, r5, #4
   bb16e:	f7ff ffd4 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb172:	3508      	adds	r5, #8
   bb174:	e7f8      	b.n	bb168 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bb176:	6820      	ldr	r0, [r4, #0]
   bb178:	f7fe fed4 	bl	b9f24 <free>
}
   bb17c:	4620      	mov	r0, r4
   bb17e:	bd70      	pop	{r4, r5, r6, pc}

000bb180 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bb180:	b510      	push	{r4, lr}
   bb182:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   bb184:	3024      	adds	r0, #36	; 0x24
   bb186:	f7ff ffe9 	bl	bb15c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bb18a:	f104 0018 	add.w	r0, r4, #24
   bb18e:	f7ff ffd3 	bl	bb138 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   bb192:	bd10      	pop	{r4, pc}

000bb194 <__tcf_0>:
    static BleLocalDevice instance;
   bb194:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   bb196:	4b17      	ldr	r3, [pc, #92]	; (bb1f4 <__tcf_0+0x60>)
   bb198:	681c      	ldr	r4, [r3, #0]
   bb19a:	b354      	cbz	r4, bb1f2 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   bb19c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bb1a0:	f7f9 f994 	bl	b44cc <_ZNSt14_Function_baseD1Ev>
   bb1a4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bb1a8:	f7f9 f990 	bl	b44cc <_ZNSt14_Function_baseD1Ev>
   bb1ac:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bb1b0:	f7f9 f98c 	bl	b44cc <_ZNSt14_Function_baseD1Ev>
   bb1b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bb1b8:	f7f9 f988 	bl	b44cc <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   bb1bc:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   bb1c0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bb1c4:	42ae      	cmp	r6, r5
   bb1c6:	d004      	beq.n	bb1d2 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   bb1c8:	1d28      	adds	r0, r5, #4
   bb1ca:	f7ff ffa6 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb1ce:	3508      	adds	r5, #8
   bb1d0:	e7f8      	b.n	bb1c4 <__tcf_0+0x30>
    ::free(ptr);
   bb1d2:	69a0      	ldr	r0, [r4, #24]
   bb1d4:	f7fe fea6 	bl	b9f24 <free>
    ~BleLocalDeviceImpl() = default;
   bb1d8:	f104 000c 	add.w	r0, r4, #12
   bb1dc:	f7ff ffbe 	bl	bb15c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bb1e0:	4620      	mov	r0, r4
   bb1e2:	f7ff ffa9 	bl	bb138 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   bb1e6:	4620      	mov	r0, r4
   bb1e8:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   bb1ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb1ee:	f7f8 bf56 	b.w	b409e <_ZdlPvj>
   bb1f2:	bd70      	pop	{r4, r5, r6, pc}
   bb1f4:	2003e674 	.word	0x2003e674

000bb1f8 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   bb1f8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bb1fa:	b510      	push	{r4, lr}
      if (_M_empty())
   bb1fc:	b90a      	cbnz	r2, bb202 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   bb1fe:	f002 fd36 	bl	bdc6e <_ZSt25__throw_bad_function_callv>
    }
   bb202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bb206:	68c3      	ldr	r3, [r0, #12]
   bb208:	4718      	bx	r3

000bb20a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb20a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   bb20e:	2300      	movs	r3, #0
   bb210:	e9c0 3300 	strd	r3, r3, [r0]
   bb214:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb216:	f8d1 8004 	ldr.w	r8, [r1, #4]
   bb21a:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb21c:	4605      	mov	r5, r0
   bb21e:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb220:	dd4a      	ble.n	bb2b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   bb222:	ea4f 1008 	mov.w	r0, r8, lsl #4
   bb226:	f7fe fe75 	bl	b9f14 <malloc>
            if (!d) {
   bb22a:	4606      	mov	r6, r0
   bb22c:	2800      	cmp	r0, #0
   bb22e:	d043      	beq.n	bb2b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   bb230:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   bb234:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   bb236:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   bb23a:	d916      	bls.n	bb26a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   bb23c:	4550      	cmp	r0, sl
   bb23e:	d215      	bcs.n	bb26c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   bb240:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   bb244:	f1a4 0910 	sub.w	r9, r4, #16
   bb248:	ebaa 0404 	sub.w	r4, sl, r4
   bb24c:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   bb24e:	45d1      	cmp	r9, sl
   bb250:	d01d      	beq.n	bb28e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   bb252:	b11c      	cbz	r4, bb25c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   bb254:	4651      	mov	r1, sl
   bb256:	4620      	mov	r0, r4
   bb258:	f7ff f856 	bl	ba308 <_ZN6StringC1EOS_>
                end->~T();
   bb25c:	4650      	mov	r0, sl
   bb25e:	f7fe ffd7 	bl	ba210 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bb262:	f1aa 0a10 	sub.w	sl, sl, #16
   bb266:	3c10      	subs	r4, #16
   bb268:	e7f1      	b.n	bb24e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   bb26a:	d010      	beq.n	bb28e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   bb26c:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   bb26e:	45a2      	cmp	sl, r4
   bb270:	d00d      	beq.n	bb28e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   bb272:	f1b9 0f00 	cmp.w	r9, #0
   bb276:	d003      	beq.n	bb280 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   bb278:	4621      	mov	r1, r4
   bb27a:	4648      	mov	r0, r9
   bb27c:	f7ff f844 	bl	ba308 <_ZN6StringC1EOS_>
                p->~T();
   bb280:	4620      	mov	r0, r4
   bb282:	f7fe ffc5 	bl	ba210 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   bb286:	3410      	adds	r4, #16
   bb288:	f109 0910 	add.w	r9, r9, #16
   bb28c:	e7ef      	b.n	bb26e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   bb28e:	6828      	ldr	r0, [r5, #0]
   bb290:	f7fe fe48 	bl	b9f24 <free>
        capacity_ = n;
   bb294:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   bb298:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb29a:	e9d7 4300 	ldrd	r4, r3, [r7]
   bb29e:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   bb2a2:	45a0      	cmp	r8, r4
   bb2a4:	d006      	beq.n	bb2b4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   bb2a6:	4621      	mov	r1, r4
   bb2a8:	4630      	mov	r0, r6
   bb2aa:	f7ff f847 	bl	ba33c <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   bb2ae:	3410      	adds	r4, #16
   bb2b0:	3610      	adds	r6, #16
   bb2b2:	e7f6      	b.n	bb2a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   bb2b4:	687b      	ldr	r3, [r7, #4]
   bb2b6:	606b      	str	r3, [r5, #4]
}
   bb2b8:	4628      	mov	r0, r5
   bb2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000bb2be <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   bb2be:	b530      	push	{r4, r5, lr}
   bb2c0:	b08d      	sub	sp, #52	; 0x34
   bb2c2:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   bb2c4:	f100 0138 	add.w	r1, r0, #56	; 0x38
   bb2c8:	a801      	add	r0, sp, #4
   bb2ca:	f7ff ff9e 	bl	bb20a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   bb2ce:	9b02      	ldr	r3, [sp, #8]
   bb2d0:	2b00      	cmp	r3, #0
   bb2d2:	dd2f      	ble.n	bb334 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   bb2d4:	f104 0114 	add.w	r1, r4, #20
   bb2d8:	a804      	add	r0, sp, #16
   bb2da:	f7ff fbb5 	bl	baa48 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   bb2de:	f104 0108 	add.w	r1, r4, #8
   bb2e2:	a808      	add	r0, sp, #32
   bb2e4:	f7ff fbb0 	bl	baa48 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   bb2e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bb2ea:	9b06      	ldr	r3, [sp, #24]
   bb2ec:	4313      	orrs	r3, r2
   bb2ee:	d01f      	beq.n	bb330 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   bb2f0:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   bb2f4:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   bb2f8:	42ac      	cmp	r4, r5
   bb2fa:	d019      	beq.n	bb330 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   bb2fc:	a904      	add	r1, sp, #16
   bb2fe:	4620      	mov	r0, r4
   bb300:	f7ff f872 	bl	ba3e8 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   bb304:	b160      	cbz	r0, bb320 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   bb306:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   bb308:	a808      	add	r0, sp, #32
   bb30a:	f7fe ff81 	bl	ba210 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   bb30e:	a804      	add	r0, sp, #16
   bb310:	f7fe ff7e 	bl	ba210 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   bb314:	a801      	add	r0, sp, #4
   bb316:	f7ff fe4d 	bl	bafb4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   bb31a:	4620      	mov	r0, r4
   bb31c:	b00d      	add	sp, #52	; 0x34
   bb31e:	bd30      	pop	{r4, r5, pc}
   bb320:	4620      	mov	r0, r4
   bb322:	a908      	add	r1, sp, #32
   bb324:	f7ff f860 	bl	ba3e8 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   bb328:	3410      	adds	r4, #16
   bb32a:	2800      	cmp	r0, #0
   bb32c:	d0e4      	beq.n	bb2f8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   bb32e:	e7ea      	b.n	bb306 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   bb330:	2400      	movs	r4, #0
   bb332:	e7e9      	b.n	bb308 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   bb334:	2401      	movs	r4, #1
   bb336:	e7ed      	b.n	bb314 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000bb338 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   bb33a:	2300      	movs	r3, #0
   bb33c:	e9c0 3300 	strd	r3, r3, [r0]
   bb340:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb342:	684f      	ldr	r7, [r1, #4]
   bb344:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb346:	4605      	mov	r5, r0
   bb348:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb34a:	dd3e      	ble.n	bb3ca <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   bb34c:	00f8      	lsls	r0, r7, #3
   bb34e:	f7fe fde1 	bl	b9f14 <malloc>
            if (!d) {
   bb352:	4604      	mov	r4, r0
   bb354:	b3c8      	cbz	r0, bb3ca <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   bb356:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   bb35a:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   bb35c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   bb360:	d910      	bls.n	bb384 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   bb362:	429c      	cmp	r4, r3
   bb364:	d20f      	bcs.n	bb386 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   bb366:	3b08      	subs	r3, #8
            dest += end - p - 1;
   bb368:	1a1a      	subs	r2, r3, r0
   bb36a:	f1a0 0c08 	sub.w	ip, r0, #8
   bb36e:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   bb370:	459c      	cmp	ip, r3
   bb372:	d018      	beq.n	bb3a6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   bb374:	b11a      	cbz	r2, bb37e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   bb376:	6819      	ldr	r1, [r3, #0]
   bb378:	6011      	str	r1, [r2, #0]
   bb37a:	6859      	ldr	r1, [r3, #4]
   bb37c:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   bb37e:	3b08      	subs	r3, #8
   bb380:	3a08      	subs	r2, #8
   bb382:	e7f5      	b.n	bb370 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   bb384:	d00f      	beq.n	bb3a6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   bb386:	4601      	mov	r1, r0
   bb388:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   bb38a:	428b      	cmp	r3, r1
   bb38c:	d00b      	beq.n	bb3a6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   bb38e:	b13a      	cbz	r2, bb3a0 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   bb390:	f8d1 c000 	ldr.w	ip, [r1]
   bb394:	f8c2 c000 	str.w	ip, [r2]
   bb398:	f8d1 c004 	ldr.w	ip, [r1, #4]
   bb39c:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   bb3a0:	3108      	adds	r1, #8
   bb3a2:	3208      	adds	r2, #8
   bb3a4:	e7f1      	b.n	bb38a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   bb3a6:	f7fe fdbd 	bl	b9f24 <free>
        data_ = d;
   bb3aa:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bb3ac:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb3ae:	e9d6 3100 	ldrd	r3, r1, [r6]
   bb3b2:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   bb3b6:	4298      	cmp	r0, r3
   bb3b8:	d006      	beq.n	bb3c8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   bb3ba:	681a      	ldr	r2, [r3, #0]
   bb3bc:	6022      	str	r2, [r4, #0]
   bb3be:	685a      	ldr	r2, [r3, #4]
   bb3c0:	6062      	str	r2, [r4, #4]
   bb3c2:	3308      	adds	r3, #8
   bb3c4:	3408      	adds	r4, #8
   bb3c6:	e7f6      	b.n	bb3b6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   bb3c8:	6069      	str	r1, [r5, #4]
}
   bb3ca:	4628      	mov	r0, r5
   bb3cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb3ce <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb3ce:	b570      	push	{r4, r5, r6, lr}
   bb3d0:	4604      	mov	r4, r0
        capacity_(0) {
   bb3d2:	2000      	movs	r0, #0
   bb3d4:	e9c4 0000 	strd	r0, r0, [r4]
   bb3d8:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb3da:	684e      	ldr	r6, [r1, #4]
   bb3dc:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb3de:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb3e0:	dd12      	ble.n	bb408 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   bb3e2:	0071      	lsls	r1, r6, #1
   bb3e4:	f7fe fda6 	bl	b9f34 <realloc>
            if (!d) {
   bb3e8:	b170      	cbz	r0, bb408 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   bb3ea:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bb3ec:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb3ee:	e9d5 3200 	ldrd	r3, r2, [r5]
   bb3f2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   bb3f6:	429a      	cmp	r2, r3
   bb3f8:	d004      	beq.n	bb404 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   bb3fa:	f833 1b02 	ldrh.w	r1, [r3], #2
   bb3fe:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   bb402:	e7f8      	b.n	bb3f6 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   bb404:	686b      	ldr	r3, [r5, #4]
   bb406:	6063      	str	r3, [r4, #4]
}
   bb408:	4620      	mov	r0, r4
   bb40a:	bd70      	pop	{r4, r5, r6, pc}

000bb40c <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   bb40c:	b510      	push	{r4, lr}
        if (!dismissed_) {
   bb40e:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   bb410:	4604      	mov	r4, r0
        if (!dismissed_) {
   bb412:	b923      	cbnz	r3, bb41e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   bb414:	6803      	ldr	r3, [r0, #0]
   bb416:	6818      	ldr	r0, [r3, #0]
   bb418:	b108      	cbz	r0, bb41e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   bb41a:	f7fe fd83 	bl	b9f24 <free>
            func_();
        }
    }
   bb41e:	4620      	mov	r0, r4
   bb420:	bd10      	pop	{r4, pc}

000bb422 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   bb422:	b510      	push	{r4, lr}
        if (!dismissed_) {
   bb424:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   bb426:	4604      	mov	r4, r0
        if (!dismissed_) {
   bb428:	b923      	cbnz	r3, bb434 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   bb42a:	6803      	ldr	r3, [r0, #0]
   bb42c:	6818      	ldr	r0, [r3, #0]
   bb42e:	b108      	cbz	r0, bb434 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   bb430:	f7fe fd78 	bl	b9f24 <free>
    }
   bb434:	4620      	mov	r0, r4
   bb436:	bd10      	pop	{r4, pc}

000bb438 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   bb438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   bb43c:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   bb440:	b08f      	sub	sp, #60	; 0x3c
   bb442:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   bb444:	f1b8 0f00 	cmp.w	r8, #0
   bb448:	d072      	beq.n	bb530 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   bb44a:	6f05      	ldr	r5, [r0, #112]	; 0x70
   bb44c:	2d00      	cmp	r5, #0
   bb44e:	d06f      	beq.n	bb530 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   bb450:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   bb454:	231f      	movs	r3, #31
   bb456:	2200      	movs	r2, #0
   bb458:	21ff      	movs	r1, #255	; 0xff
   bb45a:	4648      	mov	r0, r9
   bb45c:	f7ff fac1 	bl	ba9e2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   bb460:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   bb462:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   bb464:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   bb466:	2200      	movs	r2, #0
   bb468:	4619      	mov	r1, r3
   bb46a:	4638      	mov	r0, r7
   bb46c:	f7ff fab9 	bl	ba9e2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   bb470:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   bb472:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   bb474:	d006      	beq.n	bb484 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   bb476:	42ae      	cmp	r6, r5
   bb478:	d030      	beq.n	bb4dc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   bb47a:	2400      	movs	r4, #0
    }
   bb47c:	4620      	mov	r0, r4
   bb47e:	b00f      	add	sp, #60	; 0x3c
   bb480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   bb484:	4620      	mov	r0, r4
   bb486:	f7fe fd45 	bl	b9f14 <malloc>
            dismissed_(false) {
   bb48a:	ab03      	add	r3, sp, #12
   bb48c:	9304      	str	r3, [sp, #16]
   bb48e:	2300      	movs	r3, #0
   bb490:	4604      	mov	r4, r0
   bb492:	9003      	str	r0, [sp, #12]
   bb494:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   bb498:	b970      	cbnz	r0, bb4b8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   bb49a:	2320      	movs	r3, #32
   bb49c:	e9cd 3006 	strd	r3, r0, [sp, #24]
   bb4a0:	4b24      	ldr	r3, [pc, #144]	; (bb534 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   bb4a2:	9300      	str	r3, [sp, #0]
   bb4a4:	4924      	ldr	r1, [pc, #144]	; (bb538 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   bb4a6:	4603      	mov	r3, r0
   bb4a8:	aa06      	add	r2, sp, #24
   bb4aa:	2032      	movs	r0, #50	; 0x32
   bb4ac:	f7fe fc4e 	bl	b9d4c <log_message>
                    return false;
   bb4b0:	a804      	add	r0, sp, #16
   bb4b2:	f7ff ffab 	bl	bb40c <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   bb4b6:	e7e1      	b.n	bb47c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   bb4b8:	4602      	mov	r2, r0
   bb4ba:	21ff      	movs	r1, #255	; 0xff
   bb4bc:	462b      	mov	r3, r5
   bb4be:	4648      	mov	r0, r9
   bb4c0:	f7ff fa8f 	bl	ba9e2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   bb4c4:	9803      	ldr	r0, [sp, #12]
   bb4c6:	462a      	mov	r2, r5
   bb4c8:	4641      	mov	r1, r8
   bb4ca:	f003 fa68 	bl	be99e <memcmp>
   bb4ce:	b118      	cbz	r0, bb4d8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   bb4d0:	a804      	add	r0, sp, #16
   bb4d2:	f7ff ff9b 	bl	bb40c <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   bb4d6:	e7ce      	b.n	bb476 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   bb4d8:	2401      	movs	r4, #1
   bb4da:	e7e9      	b.n	bb4b0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   bb4dc:	4628      	mov	r0, r5
   bb4de:	f7fe fd19 	bl	b9f14 <malloc>
   bb4e2:	2400      	movs	r4, #0
   bb4e4:	ab03      	add	r3, sp, #12
   bb4e6:	4606      	mov	r6, r0
   bb4e8:	9003      	str	r0, [sp, #12]
   bb4ea:	9304      	str	r3, [sp, #16]
   bb4ec:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   bb4f0:	b978      	cbnz	r0, bb512 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   bb4f2:	2320      	movs	r3, #32
   bb4f4:	e9cd 3006 	strd	r3, r0, [sp, #24]
   bb4f8:	4b0e      	ldr	r3, [pc, #56]	; (bb534 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   bb4fa:	9300      	str	r3, [sp, #0]
   bb4fc:	490e      	ldr	r1, [pc, #56]	; (bb538 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   bb4fe:	4603      	mov	r3, r0
   bb500:	aa06      	add	r2, sp, #24
   bb502:	2032      	movs	r0, #50	; 0x32
   bb504:	f7fe fc22 	bl	b9d4c <log_message>
                    return false;
   bb508:	4634      	mov	r4, r6
   bb50a:	a804      	add	r0, sp, #16
   bb50c:	f7ff ff89 	bl	bb422 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   bb510:	e7b4      	b.n	bb47c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   bb512:	4602      	mov	r2, r0
   bb514:	21ff      	movs	r1, #255	; 0xff
   bb516:	462b      	mov	r3, r5
   bb518:	4638      	mov	r0, r7
   bb51a:	f7ff fa62 	bl	ba9e2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   bb51e:	9803      	ldr	r0, [sp, #12]
   bb520:	462a      	mov	r2, r5
   bb522:	4641      	mov	r1, r8
   bb524:	f003 fa3b 	bl	be99e <memcmp>
   bb528:	2800      	cmp	r0, #0
   bb52a:	d1ee      	bne.n	bb50a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   bb52c:	2401      	movs	r4, #1
   bb52e:	e7ec      	b.n	bb50a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   bb530:	2401      	movs	r4, #1
   bb532:	e7a3      	b.n	bb47c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   bb534:	000c19e0 	.word	0x000c19e0
   bb538:	000c195f 	.word	0x000c195f

000bb53c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   bb53c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   bb53e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   bb540:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bb542:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bb544:	dd03      	ble.n	bb54e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   bb546:	f7fe fcf5 	bl	b9f34 <realloc>
            if (!d) {
   bb54a:	b918      	cbnz	r0, bb554 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   bb54c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   bb54e:	f7fe fce9 	bl	b9f24 <free>
        T* d = nullptr;
   bb552:	2000      	movs	r0, #0
        data_ = d;
   bb554:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bb556:	60a5      	str	r5, [r4, #8]
        return true;
   bb558:	2001      	movs	r0, #1
   bb55a:	e7f7      	b.n	bb54c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000bb55c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   bb55c:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   bb55e:	6883      	ldr	r3, [r0, #8]
   bb560:	428b      	cmp	r3, r1
   bb562:	da02      	bge.n	bb56a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   bb564:	f7ff ffea 	bl	bb53c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   bb568:	bd08      	pop	{r3, pc}
    return true;
   bb56a:	2001      	movs	r0, #1
   bb56c:	e7fc      	b.n	bb568 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000bb56e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb56e:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bb570:	2300      	movs	r3, #0
   bb572:	e9c0 3300 	strd	r3, r3, [r0]
   bb576:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb578:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb57a:	6849      	ldr	r1, [r1, #4]
   bb57c:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb57e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb580:	dd10      	ble.n	bb5a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   bb582:	f7ff ffdb 	bl	bb53c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bb586:	b168      	cbz	r0, bb5a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb588:	e9d5 3100 	ldrd	r3, r1, [r5]
   bb58c:	6822      	ldr	r2, [r4, #0]
   bb58e:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   bb590:	4299      	cmp	r1, r3
   bb592:	d005      	beq.n	bb5a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   bb594:	b10a      	cbz	r2, bb59a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   bb596:	7818      	ldrb	r0, [r3, #0]
   bb598:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   bb59a:	3301      	adds	r3, #1
   bb59c:	3201      	adds	r2, #1
   bb59e:	e7f7      	b.n	bb590 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   bb5a0:	686b      	ldr	r3, [r5, #4]
   bb5a2:	6063      	str	r3, [r4, #4]
}
   bb5a4:	4620      	mov	r0, r4
   bb5a6:	bd38      	pop	{r3, r4, r5, pc}

000bb5a8 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   bb5a8:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   bb5aa:	680b      	ldr	r3, [r1, #0]
   bb5ac:	6003      	str	r3, [r0, #0]
   bb5ae:	684b      	ldr	r3, [r1, #4]
   bb5b0:	6043      	str	r3, [r0, #4]
   bb5b2:	4604      	mov	r4, r0
   bb5b4:	460d      	mov	r5, r1
class BleAdvertisingData {
   bb5b6:	3008      	adds	r0, #8
   bb5b8:	3108      	adds	r1, #8
   bb5ba:	f7ff ffd8 	bl	bb56e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   bb5be:	f105 0114 	add.w	r1, r5, #20
   bb5c2:	f104 0014 	add.w	r0, r4, #20
   bb5c6:	f7ff ffd2 	bl	bb56e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   bb5ca:	f895 3020 	ldrb.w	r3, [r5, #32]
   bb5ce:	f884 3020 	strb.w	r3, [r4, #32]
   bb5d2:	4620      	mov	r0, r4
   bb5d4:	bd38      	pop	{r3, r4, r5, pc}

000bb5d6 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   bb5d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bb5d8:	4604      	mov	r4, r0
   bb5da:	a801      	add	r0, sp, #4
   bb5dc:	f7ff ffc7 	bl	bb56e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
      __a = _GLIBCXX_MOVE(__b);
   bb5e0:	9b01      	ldr	r3, [sp, #4]
   bb5e2:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb5e4:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   bb5e6:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb5e8:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   bb5ea:	6062      	str	r2, [r4, #4]
   bb5ec:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bb5ee:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb5f0:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   bb5f2:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bb5f4:	9001      	str	r0, [sp, #4]
   bb5f6:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   bb5f8:	f7fe fc94 	bl	b9f24 <free>
   bb5fc:	b004      	add	sp, #16
   bb5fe:	bd10      	pop	{r4, pc}

000bb600 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bb600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb604:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb606:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bb608:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb60a:	4419      	add	r1, r3
   bb60c:	6883      	ldr	r3, [r0, #8]
   bb60e:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bb610:	4604      	mov	r4, r0
   bb612:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb614:	dc12      	bgt.n	bb63c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   bb616:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb618:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb61a:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb61c:	1bd2      	subs	r2, r2, r7
   bb61e:	4631      	mov	r1, r6
   bb620:	1970      	adds	r0, r6, r5
   bb622:	f003 f9da 	bl	be9da <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   bb626:	462a      	mov	r2, r5
   bb628:	4641      	mov	r1, r8
   bb62a:	4630      	mov	r0, r6
   bb62c:	f003 f9c7 	bl	be9be <memcpy>
    size_ += n;
   bb630:	6863      	ldr	r3, [r4, #4]
   bb632:	442b      	add	r3, r5
   bb634:	6063      	str	r3, [r4, #4]
    return true;
   bb636:	2001      	movs	r0, #1
}
   bb638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb63c:	f7ff ff7e 	bl	bb53c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bb640:	2800      	cmp	r0, #0
   bb642:	d1e8      	bne.n	bb616 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   bb644:	e7f8      	b.n	bb638 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000bb646 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   bb646:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   bb648:	460a      	mov	r2, r1
   bb64a:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   bb64c:	b510      	push	{r4, lr}
   bb64e:	4604      	mov	r4, r0
    size_ = 0;
   bb650:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   bb652:	b102      	cbz	r2, bb656 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   bb654:	b90b      	cbnz	r3, bb65a <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   bb656:	2000      	movs	r0, #0
}
   bb658:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   bb65a:	2bff      	cmp	r3, #255	; 0xff
   bb65c:	bf28      	it	cs
   bb65e:	23ff      	movcs	r3, #255	; 0xff
   bb660:	f7ff ffce 	bl	bb600 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   bb664:	2800      	cmp	r0, #0
   bb666:	d0f7      	beq.n	bb658 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   bb668:	6860      	ldr	r0, [r4, #4]
   bb66a:	e7f5      	b.n	bb658 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000bb66c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bb66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb66e:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb670:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   bb674:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bb676:	4604      	mov	r4, r0
   bb678:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb67a:	da0b      	bge.n	bb694 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   bb67c:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb67e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb680:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb682:	1b52      	subs	r2, r2, r5
   bb684:	1c48      	adds	r0, r1, #1
   bb686:	f003 f9a8 	bl	be9da <memmove>
    new(p) T(std::move(value));
   bb68a:	557e      	strb	r6, [r7, r5]
    ++size_;
   bb68c:	6863      	ldr	r3, [r4, #4]
   bb68e:	3301      	adds	r3, #1
   bb690:	6063      	str	r3, [r4, #4]
}
   bb692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb694:	3101      	adds	r1, #1
   bb696:	f7ff ff51 	bl	bb53c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bb69a:	2800      	cmp	r0, #0
   bb69c:	d1ee      	bne.n	bb67c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   bb69e:	e7f8      	b.n	bb692 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000bb6a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb6a0:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   bb6a2:	6841      	ldr	r1, [r0, #4]
   bb6a4:	f7ff bfe2 	b.w	bb66c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000bb6a8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bb6a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bb6ac:	4604      	mov	r4, r0
   bb6ae:	461d      	mov	r5, r3
   bb6b0:	460f      	mov	r7, r1
   bb6b2:	ab01      	add	r3, sp, #4
   bb6b4:	4690      	mov	r8, r2
   bb6b6:	460a      	mov	r2, r1
   bb6b8:	e9d0 0100 	ldrd	r0, r1, [r0]
   bb6bc:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   bb6c0:	f7fe ff14 	bl	ba4ec <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   bb6c4:	1cae      	adds	r6, r5, #2
   bb6c6:	6863      	ldr	r3, [r4, #4]
   bb6c8:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   bb6ca:	f1b9 0f00 	cmp.w	r9, #0
   bb6ce:	d126      	bne.n	bb71e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   bb6d0:	b328      	cbz	r0, bb71e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bb6d2:	4433      	add	r3, r6
   bb6d4:	1a1b      	subs	r3, r3, r0
   bb6d6:	2bff      	cmp	r3, #255	; 0xff
   bb6d8:	d809      	bhi.n	bb6ee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   bb6da:	9901      	ldr	r1, [sp, #4]
   bb6dc:	4620      	mov	r0, r4
   bb6de:	f7ff fcc7 	bl	bb070 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bb6e2:	6861      	ldr	r1, [r4, #4]
   bb6e4:	4620      	mov	r0, r4
   bb6e6:	4431      	add	r1, r6
   bb6e8:	f7ff ff38 	bl	bb55c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bb6ec:	b918      	cbnz	r0, bb6f6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   bb6ee:	6860      	ldr	r0, [r4, #4]
}
   bb6f0:	b003      	add	sp, #12
   bb6f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   bb6f6:	1c6a      	adds	r2, r5, #1
   bb6f8:	9901      	ldr	r1, [sp, #4]
   bb6fa:	b2d2      	uxtb	r2, r2
   bb6fc:	4620      	mov	r0, r4
   bb6fe:	f7ff ffb5 	bl	bb66c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   bb702:	9901      	ldr	r1, [sp, #4]
   bb704:	463a      	mov	r2, r7
   bb706:	3101      	adds	r1, #1
   bb708:	4620      	mov	r0, r4
   bb70a:	f7ff ffaf 	bl	bb66c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   bb70e:	9901      	ldr	r1, [sp, #4]
   bb710:	462b      	mov	r3, r5
   bb712:	4642      	mov	r2, r8
   bb714:	3102      	adds	r1, #2
    return insert(size_, values, n);
   bb716:	4620      	mov	r0, r4
   bb718:	f7ff ff72 	bl	bb600 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   bb71c:	e7e7      	b.n	bb6ee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bb71e:	18f1      	adds	r1, r6, r3
   bb720:	29ff      	cmp	r1, #255	; 0xff
   bb722:	d8e4      	bhi.n	bb6ee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bb724:	4620      	mov	r0, r4
   bb726:	f7ff ff19 	bl	bb55c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bb72a:	2800      	cmp	r0, #0
   bb72c:	d0df      	beq.n	bb6ee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   bb72e:	1c69      	adds	r1, r5, #1
   bb730:	b2c9      	uxtb	r1, r1
   bb732:	4620      	mov	r0, r4
   bb734:	f7ff ffb4 	bl	bb6a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   bb738:	4639      	mov	r1, r7
   bb73a:	4620      	mov	r0, r4
   bb73c:	f7ff ffb0 	bl	bb6a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   bb740:	6861      	ldr	r1, [r4, #4]
   bb742:	462b      	mov	r3, r5
   bb744:	4642      	mov	r2, r8
   bb746:	e7e6      	b.n	bb716 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000bb748 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bb748:	b430      	push	{r4, r5}
   bb74a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   bb74e:	b11a      	cbz	r2, bb758 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   bb750:	9502      	str	r5, [sp, #8]
}
   bb752:	bc30      	pop	{r4, r5}
   bb754:	f7ff bfa8 	b.w	bb6a8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   bb758:	6840      	ldr	r0, [r0, #4]
}
   bb75a:	bc30      	pop	{r4, r5}
   bb75c:	4770      	bx	lr

000bb75e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   bb75e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   bb760:	2300      	movs	r3, #0
   bb762:	e9c0 3300 	strd	r3, r3, [r0]
   bb766:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bb768:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bb76a:	9300      	str	r3, [sp, #0]
   bb76c:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bb76e:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bb772:	4619      	mov	r1, r3
   bb774:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   bb778:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bb77a:	f7ff ffe5 	bl	bb748 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   bb77e:	4620      	mov	r0, r4
   bb780:	b004      	add	sp, #16
   bb782:	bd10      	pop	{r4, pc}

000bb784 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bb784:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bb786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb788:	4604      	mov	r4, r0
   bb78a:	460d      	mov	r5, r1
   bb78c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bb78e:	d914      	bls.n	bb7ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bb790:	4290      	cmp	r0, r2
   bb792:	d213      	bcs.n	bb7bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bb794:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bb798:	1a75      	subs	r5, r6, r1
   bb79a:	f1a1 0708 	sub.w	r7, r1, #8
   bb79e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bb7a0:	42b7      	cmp	r7, r6
   bb7a2:	d018      	beq.n	bb7d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bb7a4:	b11c      	cbz	r4, bb7ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bb7a6:	4631      	mov	r1, r6
   bb7a8:	4620      	mov	r0, r4
   bb7aa:	f7ff fcac 	bl	bb106 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bb7ae:	1d30      	adds	r0, r6, #4
   bb7b0:	f7ff fcb3 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bb7b4:	3e08      	subs	r6, #8
   bb7b6:	3c08      	subs	r4, #8
   bb7b8:	e7f2      	b.n	bb7a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bb7ba:	d00c      	beq.n	bb7d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bb7bc:	42b5      	cmp	r5, r6
   bb7be:	d00a      	beq.n	bb7d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bb7c0:	b11c      	cbz	r4, bb7ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bb7c2:	4629      	mov	r1, r5
   bb7c4:	4620      	mov	r0, r4
   bb7c6:	f7ff fc9e 	bl	bb106 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bb7ca:	1d28      	adds	r0, r5, #4
   bb7cc:	f7ff fca5 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bb7d0:	3508      	adds	r5, #8
   bb7d2:	3408      	adds	r4, #8
   bb7d4:	e7f2      	b.n	bb7bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bb7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb7d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb7d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bb7da:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bb7dc:	6846      	ldr	r6, [r0, #4]
   bb7de:	4668      	mov	r0, sp
   bb7e0:	f7ff fc91 	bl	bb106 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb7e4:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   bb7e8:	429f      	cmp	r7, r3
   bb7ea:	db12      	blt.n	bb812 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   bb7ec:	3701      	adds	r7, #1
        if (n > 0) {
   bb7ee:	2f00      	cmp	r7, #0
   bb7f0:	dd29      	ble.n	bb846 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   bb7f2:	00f8      	lsls	r0, r7, #3
   bb7f4:	f7fe fb8e 	bl	b9f14 <malloc>
            if (!d) {
   bb7f8:	4605      	mov	r5, r0
   bb7fa:	b1f0      	cbz	r0, bb83a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   bb7fc:	e9d4 1200 	ldrd	r1, r2, [r4]
   bb800:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bb804:	f7ff ffbe 	bl	bb784 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bb808:	6820      	ldr	r0, [r4, #0]
   bb80a:	f7fe fb8b 	bl	b9f24 <free>
        data_ = d;
   bb80e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   bb810:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bb812:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bb814:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb816:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   bb81a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bb81e:	4631      	mov	r1, r6
   bb820:	f106 0008 	add.w	r0, r6, #8
   bb824:	f7ff ffae 	bl	bb784 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bb828:	b11e      	cbz	r6, bb832 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   bb82a:	4669      	mov	r1, sp
   bb82c:	4630      	mov	r0, r6
   bb82e:	f7ff fc6a 	bl	bb106 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   bb832:	6863      	ldr	r3, [r4, #4]
   bb834:	3301      	adds	r3, #1
   bb836:	6063      	str	r3, [r4, #4]
    return true;
   bb838:	2501      	movs	r5, #1
   bb83a:	a801      	add	r0, sp, #4
   bb83c:	f7ff fc6d 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb840:	4628      	mov	r0, r5
   bb842:	b003      	add	sp, #12
   bb844:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   bb846:	2500      	movs	r5, #0
   bb848:	e7de      	b.n	bb808 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000bb84a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bb84a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   bb84c:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bb850:	4605      	mov	r5, r0
   bb852:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   bb854:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   bb858:	42a6      	cmp	r6, r4
   bb85a:	d005      	beq.n	bb868 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   bb85c:	4639      	mov	r1, r7
   bb85e:	4620      	mov	r0, r4
   bb860:	f7ff fa9d 	bl	bad9e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   bb864:	b108      	cbz	r0, bb86a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   bb866:	b914      	cbnz	r4, bb86e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   bb868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   bb86a:	3408      	adds	r4, #8
   bb86c:	e7f4      	b.n	bb858 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   bb86e:	1d20      	adds	r0, r4, #4
   bb870:	f7ff fc53 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   bb874:	e9d5 3200 	ldrd	r3, r2, [r5]
   bb878:	f104 0108 	add.w	r1, r4, #8
   bb87c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bb880:	4620      	mov	r0, r4
   bb882:	f7ff ff7f 	bl	bb784 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   bb886:	686b      	ldr	r3, [r5, #4]
   bb888:	3b01      	subs	r3, #1
   bb88a:	606b      	str	r3, [r5, #4]
    return true;
   bb88c:	e7ec      	b.n	bb868 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000bb890 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bb890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb894:	4605      	mov	r5, r0
   bb896:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   bb898:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bb89a:	460c      	mov	r4, r1
        WiringBleLock lk;
   bb89c:	f7fe fef4 	bl	ba688 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   bb8a0:	682e      	ldr	r6, [r5, #0]
   bb8a2:	1ef3      	subs	r3, r6, #3
   bb8a4:	2b0d      	cmp	r3, #13
   bb8a6:	d83c      	bhi.n	bb922 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bb8a8:	e8df f013 	tbh	[pc, r3, lsl #1]
   bb8ac:	0053000e 	.word	0x0053000e
   bb8b0:	00d1003b 	.word	0x00d1003b
   bb8b4:	003b003b 	.word	0x003b003b
   bb8b8:	003b003b 	.word	0x003b003b
   bb8bc:	009b003b 	.word	0x009b003b
   bb8c0:	009b009b 	.word	0x009b009b
   bb8c4:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   bb8c8:	a804      	add	r0, sp, #16
   bb8ca:	f7ff fa0f 	bl	bacec <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   bb8ce:	9b04      	ldr	r3, [sp, #16]
   bb8d0:	89aa      	ldrh	r2, [r5, #12]
   bb8d2:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   bb8d4:	6869      	ldr	r1, [r5, #4]
   bb8d6:	9804      	ldr	r0, [sp, #16]
   bb8d8:	3108      	adds	r1, #8
   bb8da:	3002      	adds	r0, #2
   bb8dc:	f7fe feee 	bl	ba6bc <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   bb8e0:	a904      	add	r1, sp, #16
   bb8e2:	a806      	add	r0, sp, #24
   bb8e4:	f7ff fc0f 	bl	bb106 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   bb8e8:	a906      	add	r1, sp, #24
   bb8ea:	f104 0018 	add.w	r0, r4, #24
   bb8ee:	f7ff ff73 	bl	bb7d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bb8f2:	4605      	mov	r5, r0
   bb8f4:	a807      	add	r0, sp, #28
   bb8f6:	f7ff fc10 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb8fa:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   bb8fc:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   bb8fe:	b9b5      	cbnz	r5, bb92e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   bb900:	4b5d      	ldr	r3, [pc, #372]	; (bba78 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   bb902:	495e      	ldr	r1, [pc, #376]	; (bba7c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bb904:	9300      	str	r3, [sp, #0]
   bb906:	2032      	movs	r0, #50	; 0x32
   bb908:	462b      	mov	r3, r5
   bb90a:	aa06      	add	r2, sp, #24
   bb90c:	9507      	str	r5, [sp, #28]
   bb90e:	f7fe fa1d 	bl	b9d4c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   bb912:	9b04      	ldr	r3, [sp, #16]
   bb914:	4629      	mov	r1, r5
   bb916:	8818      	ldrh	r0, [r3, #0]
   bb918:	f7fe f818 	bl	b994c <hal_ble_gap_disconnect>
   bb91c:	a805      	add	r0, sp, #20
   bb91e:	f7ff fbfc 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   bb922:	a803      	add	r0, sp, #12
   bb924:	f7fe febe 	bl	ba6a4 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   bb928:	b00e      	add	sp, #56	; 0x38
   bb92a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   bb92e:	4a54      	ldr	r2, [pc, #336]	; (bba80 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   bb930:	9200      	str	r2, [sp, #0]
   bb932:	2300      	movs	r3, #0
   bb934:	4951      	ldr	r1, [pc, #324]	; (bba7c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bb936:	9307      	str	r3, [sp, #28]
   bb938:	aa06      	add	r2, sp, #24
   bb93a:	2001      	movs	r0, #1
   bb93c:	f7fe fa06 	bl	b9d4c <log_message>
                if (impl->connectedCallback_) {
   bb940:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bb942:	2b00      	cmp	r3, #0
   bb944:	d0ea      	beq.n	bb91c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   bb946:	a904      	add	r1, sp, #16
   bb948:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bb94c:	f7ff fc54 	bl	bb1f8 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   bb950:	e7e4      	b.n	bb91c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bb952:	89a9      	ldrh	r1, [r5, #12]
   bb954:	4620      	mov	r0, r4
   bb956:	f7ff f8dc 	bl	bab12 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bb95a:	4606      	mov	r6, r0
   bb95c:	2800      	cmp	r0, #0
   bb95e:	d0e0      	beq.n	bb922 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   bb960:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   bb962:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   bb966:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bb96a:	8029      	strh	r1, [r5, #0]
   bb96c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   bb970:	429a      	cmp	r2, r3
   bb972:	d003      	beq.n	bb97c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   bb974:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bb978:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   bb97a:	e7f9      	b.n	bb970 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   bb97c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   bb980:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bb984:	45b8      	cmp	r8, r7
   bb986:	d004      	beq.n	bb992 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   bb988:	1d38      	adds	r0, r7, #4
   bb98a:	f7ff fbc6 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb98e:	3708      	adds	r7, #8
   bb990:	e7f8      	b.n	bb984 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   bb992:	2300      	movs	r3, #0
   bb994:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   bb996:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   bb99a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bb99e:	45b8      	cmp	r8, r7
   bb9a0:	d004      	beq.n	bb9ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   bb9a2:	1d38      	adds	r0, r7, #4
   bb9a4:	f7ff fbb9 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb9a8:	3708      	adds	r7, #8
   bb9aa:	e7f8      	b.n	bb99e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   bb9ac:	2300      	movs	r3, #0
   bb9ae:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   bb9b0:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   bb9b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bb9b4:	b123      	cbz	r3, bb9c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   bb9b6:	4631      	mov	r1, r6
   bb9b8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bb9bc:	f7ff fc1c 	bl	bb1f8 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   bb9c0:	2300      	movs	r3, #0
   bb9c2:	2220      	movs	r2, #32
   bb9c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   bb9c8:	4a2e      	ldr	r2, [pc, #184]	; (bba84 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   bb9ca:	9200      	str	r2, [sp, #0]
   bb9cc:	492b      	ldr	r1, [pc, #172]	; (bba7c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bb9ce:	aa06      	add	r2, sp, #24
   bb9d0:	2001      	movs	r0, #1
   bb9d2:	f7fe f9bb 	bl	b9d4c <log_message>
                    impl->peers_.removeOne(*peer);
   bb9d6:	4631      	mov	r1, r6
   bb9d8:	f104 0018 	add.w	r0, r4, #24
   bb9dc:	f7ff ff35 	bl	bb84a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   bb9e0:	e79f      	b.n	bb922 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bb9e2:	89a9      	ldrh	r1, [r5, #12]
   bb9e4:	4620      	mov	r0, r4
   bb9e6:	f7ff f894 	bl	bab12 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bb9ea:	2800      	cmp	r0, #0
   bb9ec:	d099      	beq.n	bb922 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   bb9ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bb9f0:	2b00      	cmp	r3, #0
   bb9f2:	d096      	beq.n	bb922 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   bb9f4:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bb9f6:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   bb9f8:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bb9fc:	d001      	beq.n	bba02 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   bb9fe:	2e10      	cmp	r6, #16
   bba00:	d117      	bne.n	bba32 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   bba02:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   bba04:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   bba06:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   bba08:	2506      	movs	r5, #6
                        };
   bba0a:	f88d 3015 	strb.w	r3, [sp, #21]
   bba0e:	9104      	str	r1, [sp, #16]
   bba10:	f88d 2014 	strb.w	r2, [sp, #20]
   bba14:	9006      	str	r0, [sp, #24]
   bba16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   bba1a:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   bba1c:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   bba20:	9508      	str	r5, [sp, #32]
   bba22:	e883 0003 	stmia.w	r3, {r0, r1}
   bba26:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bba28:	a906      	add	r1, sp, #24
   bba2a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bba2e:	4798      	blx	r3
   bba30:	e777      	b.n	bb922 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   bba32:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   bba34:	bf01      	itttt	eq
   bba36:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   bba38:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   bba3a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   bba3e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   bba40:	bf0f      	iteee	eq
   bba42:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   bba46:	461a      	movne	r2, r3
   bba48:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   bba4a:	461d      	movne	r5, r3
   bba4c:	e7dd      	b.n	bba0a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bba4e:	89a9      	ldrh	r1, [r5, #12]
   bba50:	4620      	mov	r0, r4
   bba52:	f7ff f85e 	bl	bab12 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   bba56:	4601      	mov	r1, r0
   bba58:	2800      	cmp	r0, #0
   bba5a:	f43f af62 	beq.w	bb922 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bba5e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bba60:	2b00      	cmp	r3, #0
   bba62:	f43f af5e 	beq.w	bb922 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   bba66:	686b      	ldr	r3, [r5, #4]
   bba68:	9306      	str	r3, [sp, #24]
   bba6a:	aa06      	add	r2, sp, #24
   bba6c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bba6e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bba72:	4798      	blx	r3
   bba74:	e755      	b.n	bb922 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bba76:	bf00      	nop
   bba78:	000c19fb 	.word	0x000c19fb
   bba7c:	000c195f 	.word	0x000c195f
   bba80:	000c1a21 	.word	0x000c1a21
   bba84:	000c1a3e 	.word	0x000c1a3e

000bba88 <_ZNK8particle13BlePeerDevice10disconnectEv>:
int BlePeerDevice::disconnect() const {
   bba88:	b513      	push	{r0, r1, r4, lr}
   bba8a:	4604      	mov	r4, r0
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   bba8c:	f7ff f950 	bl	bad30 <_ZNK8particle13BlePeerDevice9connectedEv>
   bba90:	b1d0      	cbz	r0, bbac8 <_ZNK8particle13BlePeerDevice10disconnectEv+0x40>
    CHECK(hal_ble_gap_disconnect(impl()->connHandle(), nullptr));
   bba92:	6823      	ldr	r3, [r4, #0]
   bba94:	2100      	movs	r1, #0
   bba96:	8818      	ldrh	r0, [r3, #0]
   bba98:	f7fd ff58 	bl	b994c <hal_ble_gap_disconnect>
   bba9c:	2800      	cmp	r0, #0
   bba9e:	db11      	blt.n	bbac4 <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
        WiringBleLock lk;
   bbaa0:	a801      	add	r0, sp, #4
   bbaa2:	f7fe fdf1 	bl	ba688 <_ZN8particle3ble13WiringBleLockC1Ev>
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   bbaa6:	f7ff f9d1 	bl	bae4c <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   bbaaa:	6800      	ldr	r0, [r0, #0]
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   bbaac:	4621      	mov	r1, r4
   bbaae:	3018      	adds	r0, #24
   bbab0:	f7ff fecb 	bl	bb84a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
      { return _M_ptr; }
   bbab4:	6823      	ldr	r3, [r4, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bbab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bbaba:	801a      	strh	r2, [r3, #0]
        WiringBleLock lk;
   bbabc:	a801      	add	r0, sp, #4
   bbabe:	f7fe fdf1 	bl	ba6a4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   bbac2:	2000      	movs	r0, #0
}
   bbac4:	b002      	add	sp, #8
   bbac6:	bd10      	pop	{r4, pc}
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   bbac8:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   bbacc:	e7fa      	b.n	bbac4 <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>

000bbace <_ZNK8particle14BleLocalDevice10disconnectERKNS_13BlePeerDeviceE>:
    }
    return SYSTEM_ERROR_NOT_FOUND;
}

int BleLocalDevice::disconnect(const BlePeerDevice& peer) const {
    return peer.disconnect();
   bbace:	4608      	mov	r0, r1
   bbad0:	f7ff bfda 	b.w	bba88 <_ZNK8particle13BlePeerDevice10disconnectEv>

000bbad4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bbad4:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   bbad6:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   bbad8:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bbada:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bbadc:	dd05      	ble.n	bbaea <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   bbade:	2114      	movs	r1, #20
   bbae0:	4369      	muls	r1, r5
   bbae2:	f7fe fa27 	bl	b9f34 <realloc>
            if (!d) {
   bbae6:	b918      	cbnz	r0, bbaf0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   bbae8:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   bbaea:	f7fe fa1b 	bl	b9f24 <free>
        T* d = nullptr;
   bbaee:	2000      	movs	r0, #0
        data_ = d;
   bbaf0:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bbaf2:	60a5      	str	r5, [r4, #8]
        return true;
   bbaf4:	2001      	movs	r0, #1
   bbaf6:	e7f7      	b.n	bbae8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000bbaf8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bbaf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   bbafc:	2400      	movs	r4, #0
   bbafe:	e9c0 4400 	strd	r4, r4, [r0]
   bbb02:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bbb04:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bbb06:	6849      	ldr	r1, [r1, #4]
   bbb08:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bbb0a:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bbb0c:	dd1a      	ble.n	bbb44 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   bbb0e:	f7ff ffe1 	bl	bbad4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bbb12:	b1b8      	cbz	r0, bbb44 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bbb14:	e9d8 9300 	ldrd	r9, r3, [r8]
   bbb18:	f04f 0c14 	mov.w	ip, #20
   bbb1c:	f8d7 e000 	ldr.w	lr, [r7]
   bbb20:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   bbb24:	eb09 0504 	add.w	r5, r9, r4
   bbb28:	45ac      	cmp	ip, r5
   bbb2a:	d008      	beq.n	bbb3e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   bbb2c:	eb1e 0604 	adds.w	r6, lr, r4
   bbb30:	bf1f      	itttt	ne
   bbb32:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   bbb34:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   bbb36:	682b      	ldrne	r3, [r5, #0]
   bbb38:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   bbb3a:	3414      	adds	r4, #20
   bbb3c:	e7f2      	b.n	bbb24 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   bbb3e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bbb42:	607b      	str	r3, [r7, #4]
}
   bbb44:	4638      	mov	r0, r7
   bbb46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bbb4a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   bbb4a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   bbb4e:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   bbb52:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bbb54:	6883      	ldr	r3, [r0, #8]
   bbb56:	19e9      	adds	r1, r5, r7
   bbb58:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   bbb5a:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bbb5c:	dc17      	bgt.n	bbb8e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   bbb5e:	2314      	movs	r3, #20
   bbb60:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   bbb62:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bbb64:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   bbb66:	fb03 f907 	mul.w	r9, r3, r7
   bbb6a:	435a      	muls	r2, r3
    T* const p = data_ + i;
   bbb6c:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bbb6e:	1b52      	subs	r2, r2, r5
   bbb70:	4631      	mov	r1, r6
   bbb72:	eb06 0009 	add.w	r0, r6, r9
   bbb76:	f002 ff30 	bl	be9da <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   bbb7a:	464a      	mov	r2, r9
   bbb7c:	4641      	mov	r1, r8
   bbb7e:	4630      	mov	r0, r6
   bbb80:	f002 ff1d 	bl	be9be <memcpy>
    size_ += n;
   bbb84:	6863      	ldr	r3, [r4, #4]
   bbb86:	443b      	add	r3, r7
   bbb88:	6063      	str	r3, [r4, #4]
}
   bbb8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bbb8e:	f7ff ffa1 	bl	bbad4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bbb92:	2800      	cmp	r0, #0
   bbb94:	d1e3      	bne.n	bbb5e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   bbb96:	e7f8      	b.n	bbb8a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000bbb98 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bbb98:	b082      	sub	sp, #8
   bbb9a:	b570      	push	{r4, r5, r6, lr}
   bbb9c:	460c      	mov	r4, r1
   bbb9e:	a904      	add	r1, sp, #16
   bbba0:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bbba4:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   bbba8:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bbbaa:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bbbac:	da17      	bge.n	bbbde <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   bbbae:	2314      	movs	r3, #20
   bbbb0:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   bbbb4:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   bbbb6:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   bbbb8:	435a      	muls	r2, r3
    T* const p = data_ + i;
   bbbba:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   bbbbc:	1a52      	subs	r2, r2, r1
   bbbbe:	18e0      	adds	r0, r4, r3
   bbbc0:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   bbbc2:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   bbbc4:	f002 ff09 	bl	be9da <memmove>
    new(p) T(std::move(value));
   bbbc8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   bbbca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bbbcc:	6833      	ldr	r3, [r6, #0]
   bbbce:	6023      	str	r3, [r4, #0]
    ++size_;
   bbbd0:	686b      	ldr	r3, [r5, #4]
   bbbd2:	3301      	adds	r3, #1
   bbbd4:	606b      	str	r3, [r5, #4]
}
   bbbd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bbbda:	b002      	add	sp, #8
   bbbdc:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bbbde:	3101      	adds	r1, #1
   bbbe0:	f7ff ff78 	bl	bbad4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bbbe4:	2800      	cmp	r0, #0
   bbbe6:	d1e2      	bne.n	bbbae <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   bbbe8:	e7f5      	b.n	bbbd6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000bbbea <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   bbbea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   bbbee:	2400      	movs	r4, #0
   bbbf0:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bbbf2:	1e93      	subs	r3, r2, #2
   bbbf4:	e9c0 4400 	strd	r4, r4, [r0]
   bbbf8:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   bbbfa:	4605      	mov	r5, r0
   bbbfc:	460f      	mov	r7, r1
   bbbfe:	4690      	mov	r8, r2
   bbc00:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bbc02:	9305      	str	r3, [sp, #20]
    return size_;
   bbc04:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   bbc06:	428c      	cmp	r4, r1
   bbc08:	da72      	bge.n	bbcf0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   bbc0a:	6838      	ldr	r0, [r7, #0]
   bbc0c:	ab07      	add	r3, sp, #28
   bbc0e:	4642      	mov	r2, r8
   bbc10:	1b09      	subs	r1, r1, r4
   bbc12:	4420      	add	r0, r4
   bbc14:	f7fe fc6a 	bl	ba4ec <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   bbc18:	4606      	mov	r6, r0
   bbc1a:	2800      	cmp	r0, #0
   bbc1c:	d068      	beq.n	bbcf0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bbc1e:	9b05      	ldr	r3, [sp, #20]
   bbc20:	2b01      	cmp	r3, #1
   bbc22:	d82f      	bhi.n	bbc84 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bbc24:	f1a0 0b02 	sub.w	fp, r0, #2
   bbc28:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   bbc2c:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   bbc30:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bbc34:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bbc36:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bbc38:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bbc3a:	d055      	beq.n	bbce8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   bbc3c:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bbc3e:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   bbc42:	4413      	add	r3, r2
   bbc44:	a808      	add	r0, sp, #32
   bbc46:	78d9      	ldrb	r1, [r3, #3]
   bbc48:	789b      	ldrb	r3, [r3, #2]
   bbc4a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   bbc4e:	f7fe fdb2 	bl	ba7b6 <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   bbc52:	f10d 0e20 	add.w	lr, sp, #32
   bbc56:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   bbc5a:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   bbc5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bbc62:	f8de 3000 	ldr.w	r3, [lr]
   bbc66:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   bbc6a:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   bbc6e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   bbc72:	ab0d      	add	r3, sp, #52	; 0x34
   bbc74:	cb0c      	ldmia	r3, {r2, r3}
   bbc76:	6869      	ldr	r1, [r5, #4]
   bbc78:	4628      	mov	r0, r5
   bbc7a:	f7ff ff8d 	bl	bbb98 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bbc7e:	f109 0901 	add.w	r9, r9, #1
   bbc82:	e7d7      	b.n	bbc34 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   bbc84:	f1a8 0306 	sub.w	r3, r8, #6
   bbc88:	2b01      	cmp	r3, #1
   bbc8a:	d82d      	bhi.n	bbce8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bbc8c:	f1a0 0b02 	sub.w	fp, r0, #2
   bbc90:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   bbc94:	f04f 0900 	mov.w	r9, #0
   bbc98:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   bbc9c:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   bbc9e:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bbca0:	d022      	beq.n	bbce8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   bbca2:	3302      	adds	r3, #2
    return data_[i];
   bbca4:	6839      	ldr	r1, [r7, #0]
   bbca6:	4423      	add	r3, r4
   bbca8:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   bbcac:	2201      	movs	r2, #1
   bbcae:	4419      	add	r1, r3
   bbcb0:	a808      	add	r0, sp, #32
   bbcb2:	f7fe fd61 	bl	ba778 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   bbcb6:	f10d 0e20 	add.w	lr, sp, #32
   bbcba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   bbcbe:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   bbcc2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bbcc6:	f8de 3000 	ldr.w	r3, [lr]
   bbcca:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   bbcce:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   bbcd2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   bbcd6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   bbcda:	6869      	ldr	r1, [r5, #4]
   bbcdc:	4628      	mov	r0, r5
   bbcde:	f7ff ff5b 	bl	bbb98 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bbce2:	f109 0901 	add.w	r9, r9, #1
   bbce6:	e7d9      	b.n	bbc9c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   bbce8:	9b07      	ldr	r3, [sp, #28]
   bbcea:	441c      	add	r4, r3
   bbcec:	4434      	add	r4, r6
   bbcee:	e789      	b.n	bbc04 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   bbcf0:	4628      	mov	r0, r5
   bbcf2:	b013      	add	sp, #76	; 0x4c
   bbcf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bbcf8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   bbcf8:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   bbcfa:	2300      	movs	r3, #0
   bbcfc:	b085      	sub	sp, #20
   bbcfe:	e9c0 3300 	strd	r3, r3, [r0]
   bbd02:	6083      	str	r3, [r0, #8]
   bbd04:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bbd06:	2202      	movs	r2, #2
   bbd08:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   bbd0a:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bbd0c:	f7ff ff6d 	bl	bbbea <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bbd10:	a901      	add	r1, sp, #4
   bbd12:	4620      	mov	r0, r4
   bbd14:	f7ff ff19 	bl	bbb4a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bbd18:	a801      	add	r0, sp, #4
   bbd1a:	f7ff f95d 	bl	bafd8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bbd1e:	2202      	movs	r2, #2
   bbd20:	4629      	mov	r1, r5
   bbd22:	a801      	add	r0, sp, #4
   bbd24:	f7ff ff61 	bl	bbbea <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bbd28:	a901      	add	r1, sp, #4
   bbd2a:	4620      	mov	r0, r4
   bbd2c:	f7ff ff0d 	bl	bbb4a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bbd30:	a801      	add	r0, sp, #4
   bbd32:	f7ff f951 	bl	bafd8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   bbd36:	2203      	movs	r2, #3
   bbd38:	4629      	mov	r1, r5
   bbd3a:	a801      	add	r0, sp, #4
   bbd3c:	f7ff ff55 	bl	bbbea <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bbd40:	a901      	add	r1, sp, #4
   bbd42:	4620      	mov	r0, r4
   bbd44:	f7ff ff01 	bl	bbb4a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bbd48:	a801      	add	r0, sp, #4
   bbd4a:	f7ff f945 	bl	bafd8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   bbd4e:	2206      	movs	r2, #6
   bbd50:	4629      	mov	r1, r5
   bbd52:	a801      	add	r0, sp, #4
   bbd54:	f7ff ff49 	bl	bbbea <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bbd58:	a901      	add	r1, sp, #4
   bbd5a:	4620      	mov	r0, r4
   bbd5c:	f7ff fef5 	bl	bbb4a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bbd60:	a801      	add	r0, sp, #4
   bbd62:	f7ff f939 	bl	bafd8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   bbd66:	2207      	movs	r2, #7
   bbd68:	4629      	mov	r1, r5
   bbd6a:	a801      	add	r0, sp, #4
   bbd6c:	f7ff ff3d 	bl	bbbea <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bbd70:	a901      	add	r1, sp, #4
   bbd72:	4620      	mov	r0, r4
   bbd74:	f7ff fee9 	bl	bbb4a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bbd78:	a801      	add	r0, sp, #4
   bbd7a:	f7ff f92d 	bl	bafd8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   bbd7e:	4620      	mov	r0, r4
   bbd80:	b005      	add	sp, #20
   bbd82:	bd30      	pop	{r4, r5, pc}

000bbd84 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   bbd84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bbd88:	b085      	sub	sp, #20
   bbd8a:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bbd8c:	4601      	mov	r1, r0
   bbd8e:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   bbd90:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bbd92:	f7ff ffb1 	bl	bbcf8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_;
   bbd96:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
   bbd98:	9b02      	ldr	r3, [sp, #8]
   bbd9a:	f04f 0e14 	mov.w	lr, #20
   bbd9e:	fb0e 6c03 	mla	ip, lr, r3, r6
   bbda2:	2700      	movs	r7, #0
    for (const auto& uuid : foundUuids) {
   bbda4:	45b4      	cmp	ip, r6
   bbda6:	d00d      	beq.n	bbdc4 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
   bbda8:	45b9      	cmp	r9, r7
   bbdaa:	f106 0614 	add.w	r6, r6, #20
   bbdae:	d009      	beq.n	bbdc4 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
   bbdb0:	f1a6 0514 	sub.w	r5, r6, #20
   bbdb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bbdb6:	fb0e 8407 	mla	r4, lr, r7, r8
   bbdba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bbdbc:	682b      	ldr	r3, [r5, #0]
   bbdbe:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
   bbdc0:	3701      	adds	r7, #1
   bbdc2:	e7ef      	b.n	bbda4 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bbdc4:	a801      	add	r0, sp, #4
   bbdc6:	f7ff f907 	bl	bafd8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   bbdca:	4638      	mov	r0, r7
   bbdcc:	b005      	add	sp, #20
   bbdce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bbdd2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   bbdd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbdd6:	b08b      	sub	sp, #44	; 0x2c
   bbdd8:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   bbdda:	f100 0144 	add.w	r1, r0, #68	; 0x44
   bbdde:	a801      	add	r0, sp, #4
   bbde0:	f7ff fe8a 	bl	bbaf8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   bbde4:	9b02      	ldr	r3, [sp, #8]
   bbde6:	2b00      	cmp	r3, #0
   bbde8:	dd4a      	ble.n	bbe80 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   bbdea:	f104 0114 	add.w	r1, r4, #20
   bbdee:	a804      	add	r0, sp, #16
   bbdf0:	f7ff ff82 	bl	bbcf8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   bbdf4:	f104 0108 	add.w	r1, r4, #8
   bbdf8:	a807      	add	r0, sp, #28
   bbdfa:	f7ff ff7d 	bl	bbcf8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   bbdfe:	9d05      	ldr	r5, [sp, #20]
   bbe00:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   bbe02:	2d00      	cmp	r5, #0
   bbe04:	dc01      	bgt.n	bbe0a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   bbe06:	2e00      	cmp	r6, #0
   bbe08:	dd38      	ble.n	bbe7c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   bbe0a:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   bbe0c:	9f02      	ldr	r7, [sp, #8]
    return data_;
   bbe0e:	f8dd 8010 	ldr.w	r8, [sp, #16]
   bbe12:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   bbe16:	2314      	movs	r3, #20
   bbe18:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   bbe1c:	fb03 8505 	mla	r5, r3, r5, r8
   bbe20:	fb03 9606 	mla	r6, r3, r6, r9
   bbe24:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   bbe26:	45ba      	cmp	sl, r7
   bbe28:	d028      	beq.n	bbe7c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   bbe2a:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   bbe2c:	45ab      	cmp	fp, r5
   bbe2e:	d015      	beq.n	bbe5c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   bbe30:	4659      	mov	r1, fp
   bbe32:	4650      	mov	r0, sl
   bbe34:	f7fe fcc9 	bl	ba7ca <_ZNK8particle7BleUuideqERKS0_>
   bbe38:	f10b 0b14 	add.w	fp, fp, #20
   bbe3c:	4604      	mov	r4, r0
   bbe3e:	2800      	cmp	r0, #0
   bbe40:	d0f4      	beq.n	bbe2c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   bbe42:	a807      	add	r0, sp, #28
   bbe44:	f7ff f8c8 	bl	bafd8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   bbe48:	a804      	add	r0, sp, #16
   bbe4a:	f7ff f8c5 	bl	bafd8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   bbe4e:	a801      	add	r0, sp, #4
   bbe50:	f7ff f8c2 	bl	bafd8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   bbe54:	4620      	mov	r0, r4
   bbe56:	b00b      	add	sp, #44	; 0x2c
   bbe58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbe5c:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   bbe5e:	45b3      	cmp	fp, r6
   bbe60:	d009      	beq.n	bbe76 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   bbe62:	4659      	mov	r1, fp
   bbe64:	4650      	mov	r0, sl
   bbe66:	f7fe fcb0 	bl	ba7ca <_ZNK8particle7BleUuideqERKS0_>
   bbe6a:	f10b 0b14 	add.w	fp, fp, #20
   bbe6e:	4604      	mov	r4, r0
   bbe70:	2800      	cmp	r0, #0
   bbe72:	d0f4      	beq.n	bbe5e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   bbe74:	e7e5      	b.n	bbe42 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   bbe76:	f10a 0a14 	add.w	sl, sl, #20
   bbe7a:	e7d4      	b.n	bbe26 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   bbe7c:	2400      	movs	r4, #0
   bbe7e:	e7e0      	b.n	bbe42 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   bbe80:	2401      	movs	r4, #1
   bbe82:	e7e4      	b.n	bbe4e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000bbe84 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   bbe84:	b513      	push	{r0, r1, r4, lr}
   bbe86:	460b      	mov	r3, r1
   bbe88:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbe8a:	e9d0 0100 	ldrd	r0, r1, [r0]
   bbe8e:	466c      	mov	r4, sp
   bbe90:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   bbe94:	e893 0003 	ldmia.w	r3, {r0, r1}
   bbe98:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   bbe9c:	e894 0003 	ldmia.w	r4, {r0, r1}
   bbea0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   bbea4:	b002      	add	sp, #8
   bbea6:	bd10      	pop	{r4, pc}

000bbea8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   bbea8:	b538      	push	{r3, r4, r5, lr}
   bbeaa:	4605      	mov	r5, r0
   bbeac:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   bbeae:	f7ff ffe9 	bl	bbe84 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbeb2:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   bbeb4:	68a2      	ldr	r2, [r4, #8]
   bbeb6:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bbeb8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbeba:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   bbebc:	68e2      	ldr	r2, [r4, #12]
   bbebe:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bbec0:	60e3      	str	r3, [r4, #12]
      }
   bbec2:	bd38      	pop	{r3, r4, r5, pc}

000bbec4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   bbec4:	b530      	push	{r4, r5, lr}
   bbec6:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   bbec8:	2300      	movs	r3, #0
   bbeca:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   bbecc:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   bbece:	4605      	mov	r5, r0
   bbed0:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   bbed2:	b133      	cbz	r3, bbee2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bbed4:	2202      	movs	r2, #2
   bbed6:	4668      	mov	r0, sp
   bbed8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bbeda:	68e3      	ldr	r3, [r4, #12]
   bbedc:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   bbede:	68a3      	ldr	r3, [r4, #8]
   bbee0:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   bbee2:	4629      	mov	r1, r5
   bbee4:	4668      	mov	r0, sp
   bbee6:	f7ff ffdf 	bl	bbea8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bbeea:	4668      	mov	r0, sp
   bbeec:	f7f8 faee 	bl	b44cc <_ZNSt14_Function_baseD1Ev>
      }
   bbef0:	b005      	add	sp, #20
   bbef2:	bd30      	pop	{r4, r5, pc}

000bbef4 <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   bbef4:	b538      	push	{r3, r4, r5, lr}
   bbef6:	460d      	mov	r5, r1
   bbef8:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   bbefa:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   bbefc:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   bbefe:	b123      	cbz	r3, bbf0a <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   bbf00:	6828      	ldr	r0, [r5, #0]
   bbf02:	314c      	adds	r1, #76	; 0x4c
   bbf04:	304c      	adds	r0, #76	; 0x4c
   bbf06:	f7ff ffdd 	bl	bbec4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bbf0a:	4620      	mov	r0, r4
   bbf0c:	682b      	ldr	r3, [r5, #0]
   bbf0e:	f840 3b04 	str.w	r3, [r0], #4
   bbf12:	6869      	ldr	r1, [r5, #4]
   bbf14:	f7fe fb92 	bl	ba63c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   bbf18:	4620      	mov	r0, r4
   bbf1a:	bd38      	pop	{r3, r4, r5, pc}

000bbf1c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   bbf1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bbf20:	4604      	mov	r4, r0
   bbf22:	b087      	sub	sp, #28
    WiringBleLock lk;
   bbf24:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   bbf26:	460e      	mov	r6, r1
   bbf28:	4617      	mov	r7, r2
    WiringBleLock lk;
   bbf2a:	f7fe fbad 	bl	ba688 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bbf2e:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   bbf30:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   bbf34:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   bbf38:	4544      	cmp	r4, r8
   bbf3a:	46a1      	mov	r9, r4
   bbf3c:	d016      	beq.n	bbf6c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   bbf3e:	4621      	mov	r1, r4
   bbf40:	a801      	add	r0, sp, #4
   bbf42:	f7fe fe11 	bl	bab68 <_ZNK8particle17BleCharacteristic4UUIDEv>
   bbf46:	4639      	mov	r1, r7
   bbf48:	a801      	add	r0, sp, #4
   bbf4a:	f7fe fc3e 	bl	ba7ca <_ZNK8particle7BleUuideqERKS0_>
   bbf4e:	3408      	adds	r4, #8
   bbf50:	4605      	mov	r5, r0
   bbf52:	2800      	cmp	r0, #0
   bbf54:	d0f0      	beq.n	bbf38 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   bbf56:	4649      	mov	r1, r9
   bbf58:	4630      	mov	r0, r6
   bbf5a:	f7ff ffcb 	bl	bbef4 <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   bbf5e:	4668      	mov	r0, sp
   bbf60:	f7fe fba0 	bl	ba6a4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bbf64:	4628      	mov	r0, r5
   bbf66:	b007      	add	sp, #28
   bbf68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   bbf6c:	2500      	movs	r5, #0
   bbf6e:	e7f6      	b.n	bbf5e <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000bbf70 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   bbf70:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bbf72:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   bbf74:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bbf76:	344c      	adds	r4, #76	; 0x4c
   bbf78:	b1b9      	cbz	r1, bbfaa <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   bbf7a:	e9cd 1200 	strd	r1, r2, [sp]
   bbf7e:	a802      	add	r0, sp, #8
   bbf80:	4669      	mov	r1, sp
   bbf82:	f7ff f889 	bl	bb098 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   bbf86:	2300      	movs	r3, #0
	__x.swap(*this);
   bbf88:	a906      	add	r1, sp, #24
   bbf8a:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   bbf8c:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   bbf8e:	f7ff ff8b 	bl	bbea8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   bbf92:	4621      	mov	r1, r4
   bbf94:	a806      	add	r0, sp, #24
   bbf96:	f7ff ff87 	bl	bbea8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bbf9a:	a806      	add	r0, sp, #24
   bbf9c:	f7f8 fa96 	bl	b44cc <_ZNSt14_Function_baseD1Ev>
   bbfa0:	a802      	add	r0, sp, #8
   bbfa2:	f7f8 fa93 	bl	b44cc <_ZNSt14_Function_baseD1Ev>
}
   bbfa6:	b00a      	add	sp, #40	; 0x28
   bbfa8:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   bbfaa:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   bbfac:	e7eb      	b.n	bbf86 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000bbfae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bbfae:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bbfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbfb2:	4604      	mov	r4, r0
   bbfb4:	460d      	mov	r5, r1
   bbfb6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bbfb8:	d914      	bls.n	bbfe4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bbfba:	4290      	cmp	r0, r2
   bbfbc:	d213      	bcs.n	bbfe6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bbfbe:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bbfc2:	1a75      	subs	r5, r6, r1
   bbfc4:	f1a1 0708 	sub.w	r7, r1, #8
   bbfc8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bbfca:	42b7      	cmp	r7, r6
   bbfcc:	d018      	beq.n	bc000 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bbfce:	b11c      	cbz	r4, bbfd8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bbfd0:	4631      	mov	r1, r6
   bbfd2:	4620      	mov	r0, r4
   bbfd4:	f7ff f88d 	bl	bb0f2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   bbfd8:	1d30      	adds	r0, r6, #4
   bbfda:	f7ff f89e 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bbfde:	3e08      	subs	r6, #8
   bbfe0:	3c08      	subs	r4, #8
   bbfe2:	e7f2      	b.n	bbfca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bbfe4:	d00c      	beq.n	bc000 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bbfe6:	42b5      	cmp	r5, r6
   bbfe8:	d00a      	beq.n	bc000 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bbfea:	b11c      	cbz	r4, bbff4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bbfec:	4629      	mov	r1, r5
   bbfee:	4620      	mov	r0, r4
   bbff0:	f7ff f87f 	bl	bb0f2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bbff4:	1d28      	adds	r0, r5, #4
   bbff6:	f7ff f890 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bbffa:	3508      	adds	r5, #8
   bbffc:	3408      	adds	r4, #8
   bbffe:	e7f2      	b.n	bbfe6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bc000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc002 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bc002:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bc004:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bc006:	4605      	mov	r5, r0
        if (n > 0) {
   bc008:	dd11      	ble.n	bc02e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bc00a:	00f0      	lsls	r0, r6, #3
   bc00c:	f7fd ff82 	bl	b9f14 <malloc>
            if (!d) {
   bc010:	4604      	mov	r4, r0
   bc012:	b158      	cbz	r0, bc02c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bc014:	e9d5 1200 	ldrd	r1, r2, [r5]
   bc018:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bc01c:	f7ff ffc7 	bl	bbfae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bc020:	6828      	ldr	r0, [r5, #0]
   bc022:	f7fd ff7f 	bl	b9f24 <free>
        data_ = d;
   bc026:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bc028:	60ae      	str	r6, [r5, #8]
        return true;
   bc02a:	2001      	movs	r0, #1
    }
   bc02c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bc02e:	2400      	movs	r4, #0
   bc030:	e7f6      	b.n	bc020 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bc032 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bc032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   bc036:	2300      	movs	r3, #0
   bc038:	e9c0 3300 	strd	r3, r3, [r0]
   bc03c:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bc03e:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bc040:	6849      	ldr	r1, [r1, #4]
   bc042:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bc044:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bc046:	dd13      	ble.n	bc070 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   bc048:	f7ff ffdb 	bl	bc002 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bc04c:	b180      	cbz	r0, bc070 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bc04e:	e9d5 6300 	ldrd	r6, r3, [r5]
   bc052:	6827      	ldr	r7, [r4, #0]
   bc054:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   bc058:	45b0      	cmp	r8, r6
   bc05a:	d007      	beq.n	bc06c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   bc05c:	b11f      	cbz	r7, bc066 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   bc05e:	4631      	mov	r1, r6
   bc060:	4638      	mov	r0, r7
   bc062:	f7ff f846 	bl	bb0f2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   bc066:	3608      	adds	r6, #8
   bc068:	3708      	adds	r7, #8
   bc06a:	e7f5      	b.n	bc058 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   bc06c:	686b      	ldr	r3, [r5, #4]
   bc06e:	6063      	str	r3, [r4, #4]
}
   bc070:	4620      	mov	r0, r4
   bc072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bc076 <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   bc076:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc078:	460d      	mov	r5, r1
   bc07a:	4604      	mov	r4, r0
    WiringBleLock lk;
   bc07c:	a801      	add	r0, sp, #4
   bc07e:	f7fe fb03 	bl	ba688 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   bc082:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   bc084:	4620      	mov	r0, r4
   bc086:	310c      	adds	r1, #12
   bc088:	f7ff ffd3 	bl	bc032 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   bc08c:	a801      	add	r0, sp, #4
   bc08e:	f7fe fb09 	bl	ba6a4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bc092:	4620      	mov	r0, r4
   bc094:	b003      	add	sp, #12
   bc096:	bd30      	pop	{r4, r5, pc}

000bc098 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   bc098:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   bc09a:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bc09c:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   bc09e:	4605      	mov	r5, r0
   bc0a0:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   bc0a2:	b933      	cbnz	r3, bc0b2 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   bc0a4:	4608      	mov	r0, r1
   bc0a6:	f7fe fa83 	bl	ba5b0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   bc0aa:	b910      	cbnz	r0, bc0b2 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   bc0ac:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   bc0ae:	2201      	movs	r2, #1
   bc0b0:	729a      	strb	r2, [r3, #10]
    return services();
   bc0b2:	4628      	mov	r0, r5
   bc0b4:	4621      	mov	r1, r4
   bc0b6:	f7ff ffde 	bl	bc076 <_ZNK8particle13BlePeerDevice8servicesEv>
}
   bc0ba:	4628      	mov	r0, r5
   bc0bc:	bd38      	pop	{r3, r4, r5, pc}

000bc0be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bc0be:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bc0c0:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bc0c2:	6845      	ldr	r5, [r0, #4]
   bc0c4:	4668      	mov	r0, sp
   bc0c6:	f7ff f814 	bl	bb0f2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc0ca:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bc0ce:	4299      	cmp	r1, r3
   bc0d0:	da10      	bge.n	bc0f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bc0d2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bc0d4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bc0d6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bc0da:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bc0de:	4629      	mov	r1, r5
   bc0e0:	f105 0008 	add.w	r0, r5, #8
   bc0e4:	f7ff ff63 	bl	bbfae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bc0e8:	b98d      	cbnz	r5, bc10e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bc0ea:	6863      	ldr	r3, [r4, #4]
   bc0ec:	3301      	adds	r3, #1
   bc0ee:	6063      	str	r3, [r4, #4]
    return true;
   bc0f0:	2601      	movs	r6, #1
   bc0f2:	e006      	b.n	bc102 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc0f4:	3101      	adds	r1, #1
   bc0f6:	4620      	mov	r0, r4
   bc0f8:	f7ff ff83 	bl	bc002 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bc0fc:	4606      	mov	r6, r0
   bc0fe:	2800      	cmp	r0, #0
   bc100:	d1e7      	bne.n	bc0d2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   bc102:	a801      	add	r0, sp, #4
   bc104:	f7ff f809 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bc108:	4630      	mov	r0, r6
   bc10a:	b002      	add	sp, #8
   bc10c:	bd70      	pop	{r4, r5, r6, pc}
   bc10e:	4669      	mov	r1, sp
   bc110:	4628      	mov	r0, r5
   bc112:	f7fe ffee 	bl	bb0f2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bc116:	e7e8      	b.n	bc0ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bc118 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   bc118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   bc11c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; bc1d8 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   bc120:	f8df a0b8 	ldr.w	sl, [pc, #184]	; bc1dc <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   bc124:	b093      	sub	sp, #76	; 0x4c
   bc126:	4605      	mov	r5, r0
   bc128:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   bc12a:	2700      	movs	r7, #0
   bc12c:	682b      	ldr	r3, [r5, #0]
   bc12e:	42bb      	cmp	r3, r7
   bc130:	d94e      	bls.n	bc1d0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   bc132:	a803      	add	r0, sp, #12
   bc134:	f7fe fdbe 	bl	bacb4 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   bc138:	261c      	movs	r6, #28
   bc13a:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   bc13c:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   bc13e:	437e      	muls	r6, r7
   bc140:	4432      	add	r2, r6
   bc142:	f10d 0c14 	add.w	ip, sp, #20
   bc146:	1d13      	adds	r3, r2, #4
   bc148:	46e3      	mov	fp, ip
   bc14a:	3214      	adds	r2, #20
   bc14c:	6818      	ldr	r0, [r3, #0]
   bc14e:	6859      	ldr	r1, [r3, #4]
   bc150:	46e6      	mov	lr, ip
   bc152:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   bc156:	3308      	adds	r3, #8
   bc158:	4293      	cmp	r3, r2
   bc15a:	46f4      	mov	ip, lr
   bc15c:	d1f6      	bne.n	bc14c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   bc15e:	6818      	ldr	r0, [r3, #0]
   bc160:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   bc164:	4659      	mov	r1, fp
   bc166:	a80a      	add	r0, sp, #40	; 0x28
   bc168:	f7fe fae4 	bl	ba734 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   bc16c:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   bc170:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bc174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc176:	f8dc 3000 	ldr.w	r3, [ip]
   bc17a:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   bc17c:	686b      	ldr	r3, [r5, #4]
   bc17e:	9a03      	ldr	r2, [sp, #12]
   bc180:	4433      	add	r3, r6
   bc182:	a903      	add	r1, sp, #12
   bc184:	8b1b      	ldrh	r3, [r3, #24]
   bc186:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   bc188:	686b      	ldr	r3, [r5, #4]
   bc18a:	4433      	add	r3, r6
   bc18c:	8b5b      	ldrh	r3, [r3, #26]
   bc18e:	82d3      	strh	r3, [r2, #22]
        return services_;
   bc190:	f8d8 0000 	ldr.w	r0, [r8]
   bc194:	f100 040c 	add.w	r4, r0, #12
   bc198:	a80a      	add	r0, sp, #40	; 0x28
   bc19a:	f7fe ffaa 	bl	bb0f2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   bc19e:	4620      	mov	r0, r4
   bc1a0:	a90a      	add	r1, sp, #40	; 0x28
   bc1a2:	f7ff ff8c 	bl	bc0be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   bc1a6:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bc1a8:	a80b      	add	r0, sp, #44	; 0x2c
   bc1aa:	f7fe ffb6 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc1ae:	b954      	cbnz	r4, bc1c6 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   bc1b0:	2320      	movs	r3, #32
   bc1b2:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   bc1b6:	f8cd 9000 	str.w	r9, [sp]
   bc1ba:	4623      	mov	r3, r4
   bc1bc:	aa0a      	add	r2, sp, #40	; 0x28
   bc1be:	4651      	mov	r1, sl
   bc1c0:	2032      	movs	r0, #50	; 0x32
   bc1c2:	f7fd fdc3 	bl	b9d4c <log_message>
   bc1c6:	a804      	add	r0, sp, #16
   bc1c8:	f7fe ffa7 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   bc1cc:	3701      	adds	r7, #1
   bc1ce:	e7ad      	b.n	bc12c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   bc1d0:	b013      	add	sp, #76	; 0x4c
   bc1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc1d6:	bf00      	nop
   bc1d8:	000c1a5d 	.word	0x000c1a5d
   bc1dc:	000c195f 	.word	0x000c195f

000bc1e0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bc1e0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bc1e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc1e4:	4604      	mov	r4, r0
   bc1e6:	460d      	mov	r5, r1
   bc1e8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bc1ea:	d914      	bls.n	bc216 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bc1ec:	4290      	cmp	r0, r2
   bc1ee:	d213      	bcs.n	bc218 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bc1f0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bc1f4:	1a75      	subs	r5, r6, r1
   bc1f6:	f1a1 0708 	sub.w	r7, r1, #8
   bc1fa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bc1fc:	42b7      	cmp	r7, r6
   bc1fe:	d018      	beq.n	bc232 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bc200:	b11c      	cbz	r4, bc20a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bc202:	4631      	mov	r1, r6
   bc204:	4620      	mov	r0, r4
   bc206:	f7fe ff66 	bl	bb0d6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bc20a:	1d30      	adds	r0, r6, #4
   bc20c:	f7fe ff85 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bc210:	3e08      	subs	r6, #8
   bc212:	3c08      	subs	r4, #8
   bc214:	e7f2      	b.n	bc1fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bc216:	d00c      	beq.n	bc232 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bc218:	42b5      	cmp	r5, r6
   bc21a:	d00a      	beq.n	bc232 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bc21c:	b11c      	cbz	r4, bc226 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bc21e:	4629      	mov	r1, r5
   bc220:	4620      	mov	r0, r4
   bc222:	f7fe ff58 	bl	bb0d6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bc226:	1d28      	adds	r0, r5, #4
   bc228:	f7fe ff77 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bc22c:	3508      	adds	r5, #8
   bc22e:	3408      	adds	r4, #8
   bc230:	e7f2      	b.n	bc218 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bc232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc234 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bc234:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bc236:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bc238:	4605      	mov	r5, r0
        if (n > 0) {
   bc23a:	dd11      	ble.n	bc260 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bc23c:	00f0      	lsls	r0, r6, #3
   bc23e:	f7fd fe69 	bl	b9f14 <malloc>
            if (!d) {
   bc242:	4604      	mov	r4, r0
   bc244:	b158      	cbz	r0, bc25e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bc246:	e9d5 1200 	ldrd	r1, r2, [r5]
   bc24a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bc24e:	f7ff ffc7 	bl	bc1e0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bc252:	6828      	ldr	r0, [r5, #0]
   bc254:	f7fd fe66 	bl	b9f24 <free>
        data_ = d;
   bc258:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bc25a:	60ae      	str	r6, [r5, #8]
        return true;
   bc25c:	2001      	movs	r0, #1
    }
   bc25e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bc260:	2400      	movs	r4, #0
   bc262:	e7f6      	b.n	bc252 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bc264 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bc264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   bc268:	2300      	movs	r3, #0
   bc26a:	e9c0 3300 	strd	r3, r3, [r0]
   bc26e:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bc270:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bc272:	6849      	ldr	r1, [r1, #4]
   bc274:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bc276:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bc278:	dd13      	ble.n	bc2a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   bc27a:	f7ff ffdb 	bl	bc234 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bc27e:	b180      	cbz	r0, bc2a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bc280:	e9d5 6300 	ldrd	r6, r3, [r5]
   bc284:	6827      	ldr	r7, [r4, #0]
   bc286:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   bc28a:	45b0      	cmp	r8, r6
   bc28c:	d007      	beq.n	bc29e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   bc28e:	b11f      	cbz	r7, bc298 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   bc290:	4631      	mov	r1, r6
   bc292:	4638      	mov	r0, r7
   bc294:	f7fe ff1f 	bl	bb0d6 <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   bc298:	3608      	adds	r6, #8
   bc29a:	3708      	adds	r7, #8
   bc29c:	e7f5      	b.n	bc28a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   bc29e:	686b      	ldr	r3, [r5, #4]
   bc2a0:	6063      	str	r3, [r4, #4]
}
   bc2a2:	4620      	mov	r0, r4
   bc2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bc2a8 <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   bc2a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc2aa:	460d      	mov	r5, r1
   bc2ac:	4604      	mov	r4, r0
    WiringBleLock lk;
   bc2ae:	a801      	add	r0, sp, #4
   bc2b0:	f7fe f9ea 	bl	ba688 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   bc2b4:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   bc2b6:	4620      	mov	r0, r4
   bc2b8:	3118      	adds	r1, #24
   bc2ba:	f7ff ffd3 	bl	bc264 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   bc2be:	a801      	add	r0, sp, #4
   bc2c0:	f7fe f9f0 	bl	ba6a4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bc2c4:	4620      	mov	r0, r4
   bc2c6:	b003      	add	sp, #12
   bc2c8:	bd30      	pop	{r4, r5, pc}

000bc2ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bc2ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bc2cc:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bc2ce:	6845      	ldr	r5, [r0, #4]
   bc2d0:	4668      	mov	r0, sp
   bc2d2:	f7fe ff00 	bl	bb0d6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc2d6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bc2da:	4299      	cmp	r1, r3
   bc2dc:	da10      	bge.n	bc300 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bc2de:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bc2e0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bc2e2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bc2e6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bc2ea:	4629      	mov	r1, r5
   bc2ec:	f105 0008 	add.w	r0, r5, #8
   bc2f0:	f7ff ff76 	bl	bc1e0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bc2f4:	b98d      	cbnz	r5, bc31a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bc2f6:	6863      	ldr	r3, [r4, #4]
   bc2f8:	3301      	adds	r3, #1
   bc2fa:	6063      	str	r3, [r4, #4]
    return true;
   bc2fc:	2601      	movs	r6, #1
   bc2fe:	e006      	b.n	bc30e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc300:	3101      	adds	r1, #1
   bc302:	4620      	mov	r0, r4
   bc304:	f7ff ff96 	bl	bc234 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bc308:	4606      	mov	r6, r0
   bc30a:	2800      	cmp	r0, #0
   bc30c:	d1e7      	bne.n	bc2de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bc30e:	a801      	add	r0, sp, #4
   bc310:	f7fe ff03 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bc314:	4630      	mov	r0, r6
   bc316:	b002      	add	sp, #8
   bc318:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bc31a:	4669      	mov	r1, sp
   bc31c:	4628      	mov	r0, r5
   bc31e:	f7fe feda 	bl	bb0d6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bc322:	e7e8      	b.n	bc2f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bc324 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   bc324:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc326:	b085      	sub	sp, #20
   bc328:	4605      	mov	r5, r0
    WiringBleLock lk;
   bc32a:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   bc32c:	460c      	mov	r4, r1
   bc32e:	4617      	mov	r7, r2
    WiringBleLock lk;
   bc330:	f7fe f9aa 	bl	ba688 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   bc334:	2300      	movs	r3, #0
   bc336:	e9c5 3300 	strd	r3, r3, [r5]
   bc33a:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   bc33c:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   bc33e:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   bc342:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   bc346:	42b4      	cmp	r4, r6
   bc348:	d011      	beq.n	bc36e <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   bc34a:	6838      	ldr	r0, [r7, #0]
   bc34c:	4621      	mov	r1, r4
   bc34e:	f7fe fbcb 	bl	baae8 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   bc352:	b150      	cbz	r0, bc36a <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   bc354:	4621      	mov	r1, r4
   bc356:	a802      	add	r0, sp, #8
   bc358:	f7fe febd 	bl	bb0d6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bc35c:	a902      	add	r1, sp, #8
   bc35e:	4628      	mov	r0, r5
   bc360:	f7ff ffb3 	bl	bc2ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   bc364:	a803      	add	r0, sp, #12
   bc366:	f7fe fed8 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   bc36a:	3408      	adds	r4, #8
   bc36c:	e7eb      	b.n	bc346 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   bc36e:	a801      	add	r0, sp, #4
   bc370:	f7fe f998 	bl	ba6a4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bc374:	4628      	mov	r0, r5
   bc376:	b005      	add	sp, #20
   bc378:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bc37c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   bc37c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   bc380:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bc382:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   bc384:	b091      	sub	sp, #68	; 0x44
   bc386:	4606      	mov	r6, r0
   bc388:	460f      	mov	r7, r1
   bc38a:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   bc38c:	b933      	cbnz	r3, bc39c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   bc38e:	e9c0 3300 	strd	r3, r3, [r0]
   bc392:	6083      	str	r3, [r0, #8]
}
   bc394:	4630      	mov	r0, r6
   bc396:	b011      	add	sp, #68	; 0x44
   bc398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   bc39c:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   bc39e:	7e0d      	ldrb	r5, [r1, #24]
   bc3a0:	2d00      	cmp	r5, #0
   bc3a2:	d158      	bne.n	bc456 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   bc3a4:	2320      	movs	r3, #32
   bc3a6:	462a      	mov	r2, r5
   bc3a8:	a803      	add	r0, sp, #12
   bc3aa:	e9cd 3508 	strd	r3, r5, [sp, #32]
   bc3ae:	f7fe fb08 	bl	ba9c2 <_ZNK8particle7BleUuid8toStringEb>
   bc3b2:	9b03      	ldr	r3, [sp, #12]
   bc3b4:	9301      	str	r3, [sp, #4]
   bc3b6:	4b2b      	ldr	r3, [pc, #172]	; (bc464 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   bc3b8:	492b      	ldr	r1, [pc, #172]	; (bc468 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   bc3ba:	9300      	str	r3, [sp, #0]
   bc3bc:	aa08      	add	r2, sp, #32
   bc3be:	462b      	mov	r3, r5
   bc3c0:	2001      	movs	r0, #1
   bc3c2:	f7fd fcc3 	bl	b9d4c <log_message>
   bc3c6:	a803      	add	r0, sp, #12
   bc3c8:	f7fd ff22 	bl	ba210 <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   bc3cc:	231c      	movs	r3, #28
   bc3ce:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   bc3d2:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   bc3d6:	8a9a      	ldrh	r2, [r3, #20]
   bc3d8:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   bc3dc:	8adb      	ldrh	r3, [r3, #22]
   bc3de:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   bc3e2:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   bc3e4:	4a21      	ldr	r2, [pc, #132]	; (bc46c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   bc3e6:	8818      	ldrh	r0, [r3, #0]
   bc3e8:	9500      	str	r5, [sp, #0]
   bc3ea:	a908      	add	r1, sp, #32
   bc3ec:	f7fd facc 	bl	b9988 <hal_ble_gatt_client_discover_characteristics>
   bc3f0:	2800      	cmp	r0, #0
   bc3f2:	db30      	blt.n	bc456 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   bc3f4:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   bc3f6:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   bc3fa:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   bc3fe:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   bc400:	f1a4 0308 	sub.w	r3, r4, #8
   bc404:	4599      	cmp	r9, r3
   bc406:	d022      	beq.n	bc44e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   bc408:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bc40c:	89db      	ldrh	r3, [r3, #14]
   bc40e:	2b00      	cmp	r3, #0
   bc410:	d0f5      	beq.n	bc3fe <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   bc412:	2210      	movs	r2, #16
   bc414:	2100      	movs	r1, #0
   bc416:	eb0d 0002 	add.w	r0, sp, r2
   bc41a:	9503      	str	r5, [sp, #12]
   bc41c:	f002 faf7 	bl	bea0e <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   bc420:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bc424:	89d9      	ldrh	r1, [r3, #14]
   bc426:	683b      	ldr	r3, [r7, #0]
   bc428:	aa03      	add	r2, sp, #12
   bc42a:	8818      	ldrh	r0, [r3, #0]
   bc42c:	9500      	str	r5, [sp, #0]
   bc42e:	2313      	movs	r3, #19
   bc430:	f7fd fac8 	bl	b99c4 <hal_ble_gatt_client_read>
                if (len > 0) {
   bc434:	2800      	cmp	r0, #0
   bc436:	d0e2      	beq.n	bc3fe <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   bc438:	ab10      	add	r3, sp, #64	; 0x40
   bc43a:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   bc43c:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   bc43e:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   bc442:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   bc446:	303c      	adds	r0, #60	; 0x3c
   bc448:	f7fd ff83 	bl	ba352 <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   bc44c:	e7d7      	b.n	bc3fe <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   bc44e:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   bc452:	2201      	movs	r2, #1
   bc454:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   bc456:	4642      	mov	r2, r8
   bc458:	4639      	mov	r1, r7
   bc45a:	4630      	mov	r0, r6
   bc45c:	f7ff ff62 	bl	bc324 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   bc460:	e798      	b.n	bc394 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   bc462:	bf00      	nop
   bc464:	000c1a82 	.word	0x000c1a82
   bc468:	000c195f 	.word	0x000c195f
   bc46c:	000bc615 	.word	0x000bc615

000bc470 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   bc470:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   bc472:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bc474:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   bc476:	b085      	sub	sp, #20
   bc478:	4606      	mov	r6, r0
   bc47a:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   bc47c:	b92b      	cbnz	r3, bc48a <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   bc47e:	a801      	add	r0, sp, #4
   bc480:	f7ff fe0a 	bl	bc098 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   bc484:	a801      	add	r0, sp, #4
   bc486:	f7fe fe57 	bl	bb138 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   bc48a:	682b      	ldr	r3, [r5, #0]
   bc48c:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   bc490:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   bc494:	42bc      	cmp	r4, r7
   bc496:	d009      	beq.n	bc4ac <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   bc498:	4622      	mov	r2, r4
   bc49a:	4629      	mov	r1, r5
   bc49c:	a801      	add	r0, sp, #4
   bc49e:	f7ff ff6d 	bl	bc37c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   bc4a2:	a801      	add	r0, sp, #4
   bc4a4:	f7fe fe5a 	bl	bb15c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   bc4a8:	3408      	adds	r4, #8
   bc4aa:	e7f3      	b.n	bc494 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   bc4ac:	4630      	mov	r0, r6
   bc4ae:	4629      	mov	r1, r5
   bc4b0:	f7ff fefa 	bl	bc2a8 <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   bc4b4:	4630      	mov	r0, r6
   bc4b6:	b005      	add	sp, #20
   bc4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bc4bc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bc4bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc4c0:	4605      	mov	r5, r0
   bc4c2:	b093      	sub	sp, #76	; 0x4c
    return address_;
   bc4c4:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   bc4c6:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bc4c8:	460f      	mov	r7, r1
    return address_;
   bc4ca:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bc4cc:	4698      	mov	r8, r3
    return address_;
   bc4ce:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   bc4d0:	4b41      	ldr	r3, [pc, #260]	; (bc5d8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   bc4d2:	9304      	str	r3, [sp, #16]
    return address_;
   bc4d4:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   bc4d6:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   bc4d8:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   bc4dc:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   bc4e0:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   bc4e4:	f7fe fcb2 	bl	bae4c <_ZN8particle14BleLocalDevice11getInstanceEv>
   bc4e8:	4b3c      	ldr	r3, [pc, #240]	; (bc5dc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   bc4ea:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   bc4ec:	f7fe fcae 	bl	bae4c <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   bc4f0:	6829      	ldr	r1, [r5, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   bc4f2:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   bc4f4:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   bc4f6:	464a      	mov	r2, r9
   bc4f8:	a804      	add	r0, sp, #16
   bc4fa:	f7fd fa6d 	bl	b99d8 <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   bc4fe:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   bc500:	4604      	mov	r4, r0
   bc502:	b138      	cbz	r0, bc514 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   bc504:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bc506:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bc50a:	801a      	strh	r2, [r3, #0]
}
   bc50c:	4620      	mov	r0, r4
   bc50e:	b013      	add	sp, #76	; 0x4c
   bc510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   bc514:	4639      	mov	r1, r7
   bc516:	4628      	mov	r0, r5
   bc518:	f7fe fc1c 	bl	bad54 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
   bc51c:	a803      	add	r0, sp, #12
   bc51e:	f7fe f8b3 	bl	ba688 <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   bc522:	f7fe fc93 	bl	bae4c <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   bc526:	6807      	ldr	r7, [r0, #0]
   bc528:	4629      	mov	r1, r5
   bc52a:	3718      	adds	r7, #24
   bc52c:	4630      	mov	r0, r6
   bc52e:	f7fe fdea 	bl	bb106 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   bc532:	4631      	mov	r1, r6
   bc534:	4638      	mov	r0, r7
   bc536:	f7ff f94f 	bl	bb7d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bc53a:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   bc53c:	a80b      	add	r0, sp, #44	; 0x2c
   bc53e:	f7fe fdec 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc542:	f04f 0920 	mov.w	r9, #32
   bc546:	bb1f      	cbnz	r7, bc590 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   bc548:	4632      	mov	r2, r6
   bc54a:	4b25      	ldr	r3, [pc, #148]	; (bc5e0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
   bc54c:	4e25      	ldr	r6, [pc, #148]	; (bc5e4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   bc54e:	4926      	ldr	r1, [pc, #152]	; (bc5e8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   bc550:	9300      	str	r3, [sp, #0]
   bc552:	2032      	movs	r0, #50	; 0x32
   bc554:	4623      	mov	r3, r4
   bc556:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   bc55a:	f7fd fbf7 	bl	b9d4c <log_message>
   bc55e:	6830      	ldr	r0, [r6, #0]
   bc560:	f7fd faac 	bl	b9abc <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bc564:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   bc566:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bc56a:	4621      	mov	r1, r4
   bc56c:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   bc56e:	4c1f      	ldr	r4, [pc, #124]	; (bc5ec <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bc570:	f7fd f9ec 	bl	b994c <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   bc574:	6830      	ldr	r0, [r6, #0]
   bc576:	f7fd fa99 	bl	b9aac <os_mutex_recursive_lock>
        locked_ = true;
   bc57a:	2301      	movs	r3, #1
   bc57c:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   bc580:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bc582:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bc586:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   bc588:	a803      	add	r0, sp, #12
   bc58a:	f7fe f88b 	bl	ba6a4 <_ZN8particle3ble13WiringBleLockD1Ev>
   bc58e:	e7bd      	b.n	bc50c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   bc590:	a803      	add	r0, sp, #12
   bc592:	f7fe f887 	bl	ba6a4 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   bc596:	4b16      	ldr	r3, [pc, #88]	; (bc5f0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   bc598:	9300      	str	r3, [sp, #0]
   bc59a:	4913      	ldr	r1, [pc, #76]	; (bc5e8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   bc59c:	4623      	mov	r3, r4
   bc59e:	4632      	mov	r2, r6
   bc5a0:	2001      	movs	r0, #1
   bc5a2:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   bc5a6:	f7fd fbd1 	bl	b9d4c <log_message>
    if (automatic) {
   bc5aa:	f1b8 0f00 	cmp.w	r8, #0
   bc5ae:	d0ad      	beq.n	bc50c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   bc5b0:	4629      	mov	r1, r5
   bc5b2:	4630      	mov	r0, r6
   bc5b4:	f7ff ff5c 	bl	bc470 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   bc5b8:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   bc5bc:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   bc5c0:	42bd      	cmp	r5, r7
   bc5c2:	d005      	beq.n	bc5d0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   bc5c4:	4628      	mov	r0, r5
   bc5c6:	2101      	movs	r1, #1
   bc5c8:	f7fe fb3a 	bl	bac40 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   bc5cc:	3508      	adds	r5, #8
   bc5ce:	e7f7      	b.n	bc5c0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   bc5d0:	4630      	mov	r0, r6
   bc5d2:	f7fe fdc3 	bl	bb15c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bc5d6:	e799      	b.n	bc50c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   bc5d8:	00180003 	.word	0x00180003
   bc5dc:	000bb891 	.word	0x000bb891
   bc5e0:	000c1ab4 	.word	0x000c1ab4
   bc5e4:	2003e670 	.word	0x2003e670
   bc5e8:	000c195f 	.word	0x000c195f
   bc5ec:	fffffefc 	.word	0xfffffefc
   bc5f0:	000c1ad0 	.word	0x000c1ad0

000bc5f4 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   bc5f4:	b513      	push	{r0, r1, r4, lr}
   bc5f6:	4604      	mov	r4, r0
   bc5f8:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   bc5fc:	f7fe fb76 	bl	bacec <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   bc600:	9b00      	ldr	r3, [sp, #0]
   bc602:	9901      	ldr	r1, [sp, #4]
   bc604:	2200      	movs	r2, #0
   bc606:	4620      	mov	r0, r4
   bc608:	f7ff ff58 	bl	bc4bc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}
   bc60c:	4620      	mov	r0, r4
   bc60e:	b002      	add	sp, #8
   bc610:	bd10      	pop	{r4, pc}
	...

000bc614 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bc614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   bc618:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bc61a:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   bc61c:	2600      	movs	r6, #0
   bc61e:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   bc622:	4b66      	ldr	r3, [pc, #408]	; (bc7bc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   bc624:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bc626:	4605      	mov	r5, r0
   bc628:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   bc62a:	4633      	mov	r3, r6
   bc62c:	4964      	ldr	r1, [pc, #400]	; (bc7c0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   bc62e:	f8df 9194 	ldr.w	r9, [pc, #404]	; bc7c4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   bc632:	f8df 818c 	ldr.w	r8, [pc, #396]	; bc7c0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bc636:	f8df a190 	ldr.w	sl, [pc, #400]	; bc7c8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   bc63a:	aa0c      	add	r2, sp, #48	; 0x30
   bc63c:	2001      	movs	r0, #1
   bc63e:	f7fd fb85 	bl	b9d4c <log_message>
        for (size_t i = 0; i < event->count; i++) {
   bc642:	682b      	ldr	r3, [r5, #0]
   bc644:	42b3      	cmp	r3, r6
   bc646:	f240 80b5 	bls.w	bc7b4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   bc64a:	a803      	add	r0, sp, #12
   bc64c:	f7fe fa72 	bl	bab34 <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   bc650:	a805      	add	r0, sp, #20
   bc652:	f7fe fb2f 	bl	bacb4 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   bc656:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   bc65a:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   bc65c:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   bc65e:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   bc662:	445b      	add	r3, fp
        this->size = halHandles.size;
   bc664:	8bd9      	ldrh	r1, [r3, #30]
   bc666:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   bc668:	8c19      	ldrh	r1, [r3, #32]
   bc66a:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   bc66c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   bc66e:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   bc670:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   bc672:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   bc674:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   bc676:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   bc678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   bc67a:	8253      	strh	r3, [r2, #18]
   bc67c:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   bc680:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   bc684:	429a      	cmp	r2, r3
   bc686:	d07d      	beq.n	bc784 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   bc688:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   bc68a:	8ac4      	ldrh	r4, [r0, #22]
   bc68c:	428c      	cmp	r4, r1
   bc68e:	d377      	bcc.n	bc780 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   bc690:	8a84      	ldrh	r4, [r0, #20]
   bc692:	428c      	cmp	r4, r1
   bc694:	d874      	bhi.n	bc780 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bc696:	6859      	ldr	r1, [r3, #4]
   bc698:	9005      	str	r0, [sp, #20]
   bc69a:	a806      	add	r0, sp, #24
   bc69c:	f7fd ffce 	bl	ba63c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   bc6a0:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   bc6a4:	f8dd e00c 	ldr.w	lr, [sp, #12]
   bc6a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bc6ac:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   bc6b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc6b2:	f8dc 3000 	ldr.w	r3, [ip]
   bc6b6:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   bc6b8:	892b      	ldrh	r3, [r5, #8]
   bc6ba:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   bc6be:	686b      	ldr	r3, [r5, #4]
   bc6c0:	9c03      	ldr	r4, [sp, #12]
   bc6c2:	445b      	add	r3, fp
   bc6c4:	7e5b      	ldrb	r3, [r3, #25]
   bc6c6:	f013 0f02 	tst.w	r3, #2
   bc6ca:	d16e      	bne.n	bc7aa <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   bc6cc:	686b      	ldr	r3, [r5, #4]
   bc6ce:	445b      	add	r3, fp
   bc6d0:	7e5b      	ldrb	r3, [r3, #25]
   bc6d2:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   bc6d4:	bf42      	ittt	mi
   bc6d6:	7923      	ldrbmi	r3, [r4, #4]
   bc6d8:	f043 0304 	orrmi.w	r3, r3, #4
   bc6dc:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   bc6de:	686b      	ldr	r3, [r5, #4]
   bc6e0:	445b      	add	r3, fp
   bc6e2:	7e5b      	ldrb	r3, [r3, #25]
   bc6e4:	0719      	lsls	r1, r3, #28
   bc6e6:	bf42      	ittt	mi
   bc6e8:	7923      	ldrbmi	r3, [r4, #4]
   bc6ea:	f043 0308 	orrmi.w	r3, r3, #8
   bc6ee:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   bc6f0:	686b      	ldr	r3, [r5, #4]
   bc6f2:	445b      	add	r3, fp
   bc6f4:	7e5b      	ldrb	r3, [r3, #25]
   bc6f6:	06da      	lsls	r2, r3, #27
   bc6f8:	bf42      	ittt	mi
   bc6fa:	7923      	ldrbmi	r3, [r4, #4]
   bc6fc:	f043 0310 	orrmi.w	r3, r3, #16
   bc700:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   bc702:	686b      	ldr	r3, [r5, #4]
   bc704:	445b      	add	r3, fp
   bc706:	aa07      	add	r2, sp, #28
   bc708:	7e5b      	ldrb	r3, [r3, #25]
   bc70a:	069b      	lsls	r3, r3, #26
   bc70c:	bf42      	ittt	mi
   bc70e:	7923      	ldrbmi	r3, [r4, #4]
   bc710:	f043 0320 	orrmi.w	r3, r3, #32
   bc714:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   bc716:	686b      	ldr	r3, [r5, #4]
   bc718:	449b      	add	fp, r3
   bc71a:	f10b 0304 	add.w	r3, fp, #4
   bc71e:	4696      	mov	lr, r2
   bc720:	f10b 0b14 	add.w	fp, fp, #20
   bc724:	6818      	ldr	r0, [r3, #0]
   bc726:	6859      	ldr	r1, [r3, #4]
   bc728:	4694      	mov	ip, r2
   bc72a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   bc72e:	3308      	adds	r3, #8
   bc730:	455b      	cmp	r3, fp
   bc732:	4662      	mov	r2, ip
   bc734:	d1f6      	bne.n	bc724 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   bc736:	6818      	ldr	r0, [r3, #0]
   bc738:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   bc73c:	4671      	mov	r1, lr
   bc73e:	a80c      	add	r0, sp, #48	; 0x30
   bc740:	f7fd fff8 	bl	ba734 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   bc744:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   bc748:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bc74c:	3414      	adds	r4, #20
   bc74e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc750:	f8dc 3000 	ldr.w	r3, [ip]
   bc754:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   bc756:	a903      	add	r1, sp, #12
   bc758:	a80c      	add	r0, sp, #48	; 0x30
   bc75a:	f7fe fcbc 	bl	bb0d6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bc75e:	a90c      	add	r1, sp, #48	; 0x30
   bc760:	f107 0018 	add.w	r0, r7, #24
   bc764:	f7ff fdb1 	bl	bc2ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bc768:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bc76a:	a80d      	add	r0, sp, #52	; 0x34
   bc76c:	f7fe fcd5 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc770:	b99c      	cbnz	r4, bc79a <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bc772:	2320      	movs	r3, #32
   bc774:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   bc778:	f8cd a000 	str.w	sl, [sp]
   bc77c:	4623      	mov	r3, r4
   bc77e:	e007      	b.n	bc790 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   bc780:	3308      	adds	r3, #8
   bc782:	e77f      	b.n	bc684 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   bc784:	2420      	movs	r4, #32
   bc786:	2300      	movs	r3, #0
   bc788:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   bc78c:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bc790:	aa0c      	add	r2, sp, #48	; 0x30
   bc792:	4641      	mov	r1, r8
   bc794:	2032      	movs	r0, #50	; 0x32
   bc796:	f7fd fad9 	bl	b9d4c <log_message>
   bc79a:	a806      	add	r0, sp, #24
   bc79c:	f7fe fcbd 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc7a0:	a804      	add	r0, sp, #16
   bc7a2:	f7fe fcba 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   bc7a6:	3601      	adds	r6, #1
   bc7a8:	e74b      	b.n	bc642 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   bc7aa:	7923      	ldrb	r3, [r4, #4]
   bc7ac:	f043 0302 	orr.w	r3, r3, #2
   bc7b0:	7123      	strb	r3, [r4, #4]
   bc7b2:	e78b      	b.n	bc6cc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   bc7b4:	b015      	add	sp, #84	; 0x54
   bc7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc7ba:	bf00      	nop
   bc7bc:	000c1aed 	.word	0x000c1aed
   bc7c0:	000c195f 	.word	0x000c195f
   bc7c4:	000c1b08 	.word	0x000c1b08
   bc7c8:	000c1b37 	.word	0x000c1b37

000bc7cc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bc7cc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bc7ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc7d0:	4604      	mov	r4, r0
   bc7d2:	460d      	mov	r5, r1
   bc7d4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bc7d6:	d914      	bls.n	bc802 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bc7d8:	4290      	cmp	r0, r2
   bc7da:	d213      	bcs.n	bc804 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bc7dc:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   bc7e0:	1a75      	subs	r5, r6, r1
   bc7e2:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   bc7e6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bc7e8:	42b7      	cmp	r7, r6
   bc7ea:	d018      	beq.n	bc81e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bc7ec:	b11c      	cbz	r4, bc7f6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bc7ee:	4631      	mov	r1, r6
   bc7f0:	4620      	mov	r0, r4
   bc7f2:	f7fe fed9 	bl	bb5a8 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   bc7f6:	4630      	mov	r0, r6
   bc7f8:	f7fe fb96 	bl	baf28 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   bc7fc:	3e24      	subs	r6, #36	; 0x24
   bc7fe:	3c24      	subs	r4, #36	; 0x24
   bc800:	e7f2      	b.n	bc7e8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bc802:	d00c      	beq.n	bc81e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bc804:	42b5      	cmp	r5, r6
   bc806:	d00a      	beq.n	bc81e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bc808:	b11c      	cbz	r4, bc812 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bc80a:	4629      	mov	r1, r5
   bc80c:	4620      	mov	r0, r4
   bc80e:	f7fe fecb 	bl	bb5a8 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   bc812:	4628      	mov	r0, r5
   bc814:	f7fe fb88 	bl	baf28 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   bc818:	3524      	adds	r5, #36	; 0x24
   bc81a:	3424      	adds	r4, #36	; 0x24
   bc81c:	e7f2      	b.n	bc804 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bc81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc820 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bc820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   bc822:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bc824:	4605      	mov	r5, r0
        if (n > 0) {
   bc826:	dd13      	ble.n	bc850 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   bc828:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   bc82a:	fb07 f006 	mul.w	r0, r7, r6
   bc82e:	f7fd fb71 	bl	b9f14 <malloc>
            if (!d) {
   bc832:	4604      	mov	r4, r0
   bc834:	b158      	cbz	r0, bc84e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   bc836:	e9d5 1200 	ldrd	r1, r2, [r5]
   bc83a:	fb07 1202 	mla	r2, r7, r2, r1
   bc83e:	f7ff ffc5 	bl	bc7cc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bc842:	6828      	ldr	r0, [r5, #0]
   bc844:	f7fd fb6e 	bl	b9f24 <free>
        data_ = d;
   bc848:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bc84a:	60ae      	str	r6, [r5, #8]
        return true;
   bc84c:	2001      	movs	r0, #1
    }
   bc84e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   bc850:	2400      	movs	r4, #0
   bc852:	e7f6      	b.n	bc842 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000bc854 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   bc854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc858:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   bc85a:	ad01      	add	r5, sp, #4
   bc85c:	4606      	mov	r6, r0
   bc85e:	4628      	mov	r0, r5
   bc860:	460c      	mov	r4, r1
   bc862:	f7fd ff4c 	bl	ba6fe <_ZN8particle10BleAddressC1Ev>
   bc866:	a803      	add	r0, sp, #12
   bc868:	f7fe ff79 	bl	bb75e <_ZN8particle18BleAdvertisingDataC1Ev>
   bc86c:	a806      	add	r0, sp, #24
   bc86e:	f7fe ff76 	bl	bb75e <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   bc872:	6930      	ldr	r0, [r6, #16]
   bc874:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   bc876:	89f2      	ldrh	r2, [r6, #14]
   bc878:	ab13      	add	r3, sp, #76	; 0x4c
   bc87a:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   bc87c:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   bc880:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   bc882:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   bc884:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   bc888:	a806      	add	r0, sp, #24
   bc88a:	f7fe fedc 	bl	bb646 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   bc88e:	89b2      	ldrh	r2, [r6, #12]
   bc890:	6871      	ldr	r1, [r6, #4]
   bc892:	a803      	add	r0, sp, #12
   bc894:	f7fe fed7 	bl	bb646 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   bc898:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   bc89c:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   bc89e:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   bc8a0:	d003      	beq.n	bc8aa <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   bc8a2:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   bc8a6:	429a      	cmp	r2, r3
   bc8a8:	db5c      	blt.n	bc964 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   bc8aa:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   bc8ae:	2b7f      	cmp	r3, #127	; 0x7f
   bc8b0:	d003      	beq.n	bc8ba <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   bc8b2:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   bc8b6:	429a      	cmp	r2, r3
   bc8b8:	dc54      	bgt.n	bc964 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   bc8ba:	f104 0150 	add.w	r1, r4, #80	; 0x50
   bc8be:	4638      	mov	r0, r7
   bc8c0:	f7fe fd3a 	bl	bb338 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   bc8c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   bc8c6:	2b00      	cmp	r3, #0
   bc8c8:	dd52      	ble.n	bc970 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   bc8ca:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   bc8cc:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   bc8d0:	45b1      	cmp	r9, r6
   bc8d2:	d050      	beq.n	bc976 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   bc8d4:	4630      	mov	r0, r6
   bc8d6:	4629      	mov	r1, r5
   bc8d8:	f7fd fefd 	bl	ba6d6 <_ZNK8particle10BleAddresseqERKS0_>
   bc8dc:	3608      	adds	r6, #8
   bc8de:	4680      	mov	r8, r0
   bc8e0:	2800      	cmp	r0, #0
   bc8e2:	d0f5      	beq.n	bc8d0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   bc8e4:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bc8e6:	f7fd fb1d 	bl	b9f24 <free>
        if (!delegator->filterByRssi(result) ||
   bc8ea:	f1b8 0f00 	cmp.w	r8, #0
   bc8ee:	d039      	beq.n	bc964 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   bc8f0:	4629      	mov	r1, r5
   bc8f2:	4620      	mov	r0, r4
   bc8f4:	f7fe fce3 	bl	bb2be <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   bc8f8:	b3a0      	cbz	r0, bc964 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   bc8fa:	4629      	mov	r1, r5
   bc8fc:	4620      	mov	r0, r4
   bc8fe:	f7ff fa68 	bl	bbdd2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   bc902:	4606      	mov	r6, r0
   bc904:	b370      	cbz	r0, bc964 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   bc906:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   bc90a:	4638      	mov	r0, r7
   bc90c:	f7fe fd5f 	bl	bb3ce <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   bc910:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc912:	2b00      	cmp	r3, #0
   bc914:	dd12      	ble.n	bc93c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   bc916:	a806      	add	r0, sp, #24
   bc918:	f7fe f8b9 	bl	baa8e <_ZNK8particle18BleAdvertisingData10appearanceEv>
   bc91c:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   bc91e:	a803      	add	r0, sp, #12
   bc920:	f7fe f8b5 	bl	baa8e <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   bc924:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   bc928:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   bc92c:	429a      	cmp	r2, r3
   bc92e:	d025      	beq.n	bc97c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   bc930:	f833 1b02 	ldrh.w	r1, [r3], #2
   bc934:	4588      	cmp	r8, r1
   bc936:	d001      	beq.n	bc93c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   bc938:	4288      	cmp	r0, r1
   bc93a:	d1f7      	bne.n	bc92c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   bc93c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bc93e:	f7fd faf1 	bl	b9f24 <free>
              !delegator->filterByServiceUUID(result) ||
   bc942:	b17e      	cbz	r6, bc964 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   bc944:	4629      	mov	r1, r5
   bc946:	4620      	mov	r0, r4
   bc948:	f7fe fd76 	bl	bb438 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   bc94c:	b150      	cbz	r0, bc964 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   bc94e:	6a23      	ldr	r3, [r4, #32]
   bc950:	b1b3      	cbz	r3, bc980 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   bc952:	6963      	ldr	r3, [r4, #20]
   bc954:	9513      	str	r5, [sp, #76]	; 0x4c
   bc956:	3301      	adds	r3, #1
   bc958:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc95a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc95c:	4639      	mov	r1, r7
   bc95e:	f104 0018 	add.w	r0, r4, #24
   bc962:	4798      	blx	r3
            return;
   bc964:	4628      	mov	r0, r5
   bc966:	f7fe fadf 	bl	baf28 <_ZN8particle13BleScanResultD1Ev>
    }
   bc96a:	b01d      	add	sp, #116	; 0x74
   bc96c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   bc970:	f04f 0801 	mov.w	r8, #1
   bc974:	e7b6      	b.n	bc8e4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   bc976:	f04f 0800 	mov.w	r8, #0
   bc97a:	e7b3      	b.n	bc8e4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   bc97c:	2600      	movs	r6, #0
   bc97e:	e7dd      	b.n	bc93c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   bc980:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   bc984:	f1b8 0f00 	cmp.w	r8, #0
   bc988:	d007      	beq.n	bc99a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   bc98a:	6963      	ldr	r3, [r4, #20]
   bc98c:	3301      	adds	r3, #1
   bc98e:	6163      	str	r3, [r4, #20]
   bc990:	4629      	mov	r1, r5
   bc992:	6b63      	ldr	r3, [r4, #52]	; 0x34
   bc994:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bc998:	e7e3      	b.n	bc962 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   bc99a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   bc99e:	f1bc 0f00 	cmp.w	ip, #0
   bc9a2:	d025      	beq.n	bc9f0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   bc9a4:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bc9a6:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   bc9a8:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bc9aa:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   bc9ac:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bc9ae:	d8d9      	bhi.n	bc964 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   bc9b0:	2224      	movs	r2, #36	; 0x24
   bc9b2:	4353      	muls	r3, r2
    address_ = addr.address_;
   bc9b4:	462a      	mov	r2, r5
   bc9b6:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   bc9b8:	3b24      	subs	r3, #36	; 0x24
   bc9ba:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   bc9be:	f84c 0003 	str.w	r0, [ip, r3]
   bc9c2:	6071      	str	r1, [r6, #4]
class BleScanResult {
   bc9c4:	f106 0008 	add.w	r0, r6, #8
   bc9c8:	a903      	add	r1, sp, #12
   bc9ca:	f7fe fe04 	bl	bb5d6 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   bc9ce:	a906      	add	r1, sp, #24
   bc9d0:	f106 0014 	add.w	r0, r6, #20
   bc9d4:	f7fe fdff 	bl	bb5d6 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   bc9d8:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   bc9dc:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   bc9e0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   bc9e4:	429a      	cmp	r2, r3
   bc9e6:	d3bd      	bcc.n	bc964 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   bc9e8:	4640      	mov	r0, r8
   bc9ea:	f7fc ffa5 	bl	b9938 <hal_ble_gap_stop_scan>
   bc9ee:	e7b9      	b.n	bc964 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   bc9f0:	e895 0003 	ldmia.w	r5, {r0, r1}
   bc9f4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   bc9f8:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   bc9fc:	a903      	add	r1, sp, #12
   bc9fe:	a80c      	add	r0, sp, #48	; 0x30
   bca00:	f7fe fdb5 	bl	bb56e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   bca04:	a906      	add	r1, sp, #24
   bca06:	a80f      	add	r0, sp, #60	; 0x3c
   bca08:	f7fe fdb1 	bl	bb56e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   bca0c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   bca10:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   bca14:	4641      	mov	r1, r8
   bca16:	4638      	mov	r0, r7
   bca18:	6866      	ldr	r6, [r4, #4]
   bca1a:	f7fe fdc5 	bl	bb5a8 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bca1e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bca22:	4299      	cmp	r1, r3
   bca24:	da10      	bge.n	bca48 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   bca26:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bca28:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   bca2a:	2224      	movs	r2, #36	; 0x24
   bca2c:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   bca30:	f106 0024 	add.w	r0, r6, #36	; 0x24
   bca34:	fb02 3201 	mla	r2, r2, r1, r3
   bca38:	4631      	mov	r1, r6
   bca3a:	f7ff fec7 	bl	bc7cc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bca3e:	b986      	cbnz	r6, bca62 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   bca40:	6863      	ldr	r3, [r4, #4]
   bca42:	3301      	adds	r3, #1
   bca44:	6063      	str	r3, [r4, #4]
    return true;
   bca46:	e005      	b.n	bca54 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bca48:	3101      	adds	r1, #1
   bca4a:	4620      	mov	r0, r4
   bca4c:	f7ff fee8 	bl	bc820 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bca50:	2800      	cmp	r0, #0
   bca52:	d1e8      	bne.n	bca26 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   bca54:	4638      	mov	r0, r7
   bca56:	f7fe fa67 	bl	baf28 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   bca5a:	4640      	mov	r0, r8
   bca5c:	f7fe fa64 	bl	baf28 <_ZN8particle13BleScanResultD1Ev>
   bca60:	e780      	b.n	bc964 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   bca62:	4639      	mov	r1, r7
   bca64:	4630      	mov	r0, r6
   bca66:	f7fe fd9f 	bl	bb5a8 <_ZN8particle13BleScanResultC1EOS0_>
   bca6a:	e7e9      	b.n	bca40 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000bca6c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   bca6c:	4802      	ldr	r0, [pc, #8]	; (bca78 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bca6e:	2300      	movs	r3, #0
   bca70:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   bca72:	f7fd b813 	b.w	b9a9c <os_mutex_recursive_create>
   bca76:	bf00      	nop
   bca78:	2003e670 	.word	0x2003e670

000bca7c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bca7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bca7e:	4606      	mov	r6, r0
   bca80:	460d      	mov	r5, r1
  size_t n = 0;
   bca82:	188f      	adds	r7, r1, r2
   bca84:	2400      	movs	r4, #0
  while (size--) {
   bca86:	42bd      	cmp	r5, r7
   bca88:	d00c      	beq.n	bcaa4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bca8a:	6833      	ldr	r3, [r6, #0]
   bca8c:	f815 1b01 	ldrb.w	r1, [r5], #1
   bca90:	689b      	ldr	r3, [r3, #8]
   bca92:	4630      	mov	r0, r6
   bca94:	4798      	blx	r3
     if (chunk>=0)
   bca96:	1e03      	subs	r3, r0, #0
   bca98:	db01      	blt.n	bca9e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bca9a:	441c      	add	r4, r3
  while (size--) {
   bca9c:	e7f3      	b.n	bca86 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bca9e:	2c00      	cmp	r4, #0
   bcaa0:	bf08      	it	eq
   bcaa2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bcaa4:	4620      	mov	r0, r4
   bcaa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bcaa8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bcaa8:	b508      	push	{r3, lr}
  return write(str);
   bcaaa:	f7fc f8b5 	bl	b8c18 <_ZN5Print5writeEPKc>
}
   bcaae:	bd08      	pop	{r3, pc}

000bcab0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bcab0:	6803      	ldr	r3, [r0, #0]
   bcab2:	689b      	ldr	r3, [r3, #8]
   bcab4:	4718      	bx	r3

000bcab6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bcab6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bcab8:	210d      	movs	r1, #13
{
   bcaba:	4605      	mov	r5, r0
  size_t n = print('\r');
   bcabc:	f7ff fff8 	bl	bcab0 <_ZN5Print5printEc>
  n += print('\n');
   bcac0:	210a      	movs	r1, #10
  size_t n = print('\r');
   bcac2:	4604      	mov	r4, r0
  n += print('\n');
   bcac4:	4628      	mov	r0, r5
   bcac6:	f7ff fff3 	bl	bcab0 <_ZN5Print5printEc>
  return n;
}
   bcaca:	4420      	add	r0, r4
   bcacc:	bd38      	pop	{r3, r4, r5, pc}

000bcace <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   bcace:	b538      	push	{r3, r4, r5, lr}
   bcad0:	4605      	mov	r5, r0
  return write(str);
   bcad2:	f7fc f8a1 	bl	b8c18 <_ZN5Print5writeEPKc>
   bcad6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   bcad8:	4628      	mov	r0, r5
   bcada:	f7ff ffec 	bl	bcab6 <_ZN5Print7printlnEv>
  return n;
}
   bcade:	4420      	add	r0, r4
   bcae0:	bd38      	pop	{r3, r4, r5, pc}

000bcae2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bcae2:	b530      	push	{r4, r5, lr}
   bcae4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bcae6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bcae8:	2a01      	cmp	r2, #1
  *str = '\0';
   bcaea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bcaee:	bf98      	it	ls
   bcaf0:	220a      	movls	r2, #10
   bcaf2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bcaf4:	460d      	mov	r5, r1
   bcaf6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bcafa:	fb01 5312 	mls	r3, r1, r2, r5
   bcafe:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bcb02:	2b09      	cmp	r3, #9
   bcb04:	bf94      	ite	ls
   bcb06:	3330      	addls	r3, #48	; 0x30
   bcb08:	3337      	addhi	r3, #55	; 0x37
   bcb0a:	b2db      	uxtb	r3, r3
  } while(n);
   bcb0c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bcb0e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bcb12:	d9ef      	bls.n	bcaf4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bcb14:	4621      	mov	r1, r4
   bcb16:	f7fc f87f 	bl	b8c18 <_ZN5Print5writeEPKc>
}
   bcb1a:	b00b      	add	sp, #44	; 0x2c
   bcb1c:	bd30      	pop	{r4, r5, pc}

000bcb1e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bcb1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcb22:	b086      	sub	sp, #24
   bcb24:	af00      	add	r7, sp, #0
   bcb26:	4605      	mov	r5, r0
   bcb28:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bcb2a:	1d38      	adds	r0, r7, #4
   bcb2c:	2114      	movs	r1, #20
{
   bcb2e:	4614      	mov	r4, r2
    va_copy(args2, args);
   bcb30:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bcb32:	f7fd fa1f 	bl	b9f74 <vsnprintf>

    if (n<bufsize)
   bcb36:	2813      	cmp	r0, #19
   bcb38:	d80e      	bhi.n	bcb58 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bcb3a:	1d39      	adds	r1, r7, #4
   bcb3c:	4628      	mov	r0, r5
   bcb3e:	f7fc f86b 	bl	b8c18 <_ZN5Print5writeEPKc>
   bcb42:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bcb44:	b11e      	cbz	r6, bcb4e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bcb46:	4628      	mov	r0, r5
   bcb48:	f7ff ffb5 	bl	bcab6 <_ZN5Print7printlnEv>
   bcb4c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bcb4e:	4620      	mov	r0, r4
   bcb50:	3718      	adds	r7, #24
   bcb52:	46bd      	mov	sp, r7
   bcb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bcb58:	f100 0308 	add.w	r3, r0, #8
   bcb5c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bcb60:	46e8      	mov	r8, sp
        char bigger[n+1];
   bcb62:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bcb66:	4622      	mov	r2, r4
   bcb68:	1c41      	adds	r1, r0, #1
   bcb6a:	683b      	ldr	r3, [r7, #0]
   bcb6c:	4668      	mov	r0, sp
   bcb6e:	f7fd fa01 	bl	b9f74 <vsnprintf>
  return write(str);
   bcb72:	4669      	mov	r1, sp
   bcb74:	4628      	mov	r0, r5
   bcb76:	f7fc f84f 	bl	b8c18 <_ZN5Print5writeEPKc>
   bcb7a:	4604      	mov	r4, r0
   bcb7c:	46c5      	mov	sp, r8
   bcb7e:	e7e1      	b.n	bcb44 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bcb80 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   bcb80:	b510      	push	{r4, lr}
   bcb82:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bcb84:	f7fc fe98 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   bcb88:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   bcb8a:	6823      	ldr	r3, [r4, #0]
   bcb8c:	4620      	mov	r0, r4
   bcb8e:	695b      	ldr	r3, [r3, #20]
   bcb90:	4798      	blx	r3
    if (c >= 0) return c;
   bcb92:	2800      	cmp	r0, #0
   bcb94:	da08      	bge.n	bcba8 <_ZN6Stream9timedReadEv+0x28>
   bcb96:	f7fc fe8f 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   bcb9a:	68e3      	ldr	r3, [r4, #12]
   bcb9c:	1ac0      	subs	r0, r0, r3
   bcb9e:	68a3      	ldr	r3, [r4, #8]
   bcba0:	4298      	cmp	r0, r3
   bcba2:	d3f2      	bcc.n	bcb8a <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   bcba4:	f04f 30ff 	mov.w	r0, #4294967295
}
   bcba8:	bd10      	pop	{r4, pc}
	...

000bcbac <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   bcbac:	b570      	push	{r4, r5, r6, lr}
   bcbae:	460d      	mov	r5, r1
  String ret;
   bcbb0:	4909      	ldr	r1, [pc, #36]	; (bcbd8 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   bcbb2:	4604      	mov	r4, r0
   bcbb4:	4616      	mov	r6, r2
  String ret;
   bcbb6:	f7fd fb76 	bl	ba2a6 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   bcbba:	4628      	mov	r0, r5
   bcbbc:	f7ff ffe0 	bl	bcb80 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   bcbc0:	2800      	cmp	r0, #0
   bcbc2:	db06      	blt.n	bcbd2 <_ZN6Stream15readStringUntilEc+0x26>
   bcbc4:	4286      	cmp	r6, r0
   bcbc6:	d004      	beq.n	bcbd2 <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   bcbc8:	b2c1      	uxtb	r1, r0
   bcbca:	4620      	mov	r0, r4
   bcbcc:	f7fd fbea 	bl	ba3a4 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   bcbd0:	e7f3      	b.n	bcbba <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   bcbd2:	4620      	mov	r0, r4
   bcbd4:	bd70      	pop	{r4, r5, r6, pc}
   bcbd6:	bf00      	nop
   bcbd8:	000c0c12 	.word	0x000c0c12

000bcbdc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   bcbdc:	4b01      	ldr	r3, [pc, #4]	; (bcbe4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bcbde:	4a02      	ldr	r2, [pc, #8]	; (bcbe8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bcbe0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bcbe2:	4770      	bx	lr
   bcbe4:	2003e678 	.word	0x2003e678
   bcbe8:	000c1bd6 	.word	0x000c1bd6

000bcbec <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bcbec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bcbf0:	4a15      	ldr	r2, [pc, #84]	; (bcc48 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bcbf2:	f8df 8060 	ldr.w	r8, [pc, #96]	; bcc54 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bcbf6:	e9d2 6300 	ldrd	r6, r3, [r2]
   bcbfa:	1980      	adds	r0, r0, r6
   bcbfc:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bcc00:	4b12      	ldr	r3, [pc, #72]	; (bcc4c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bcc02:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bcc06:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bcc0a:	1986      	adds	r6, r0, r6
   bcc0c:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bcc10:	42bb      	cmp	r3, r7
   bcc12:	bf08      	it	eq
   bcc14:	42b2      	cmpeq	r2, r6
{
   bcc16:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bcc18:	d013      	beq.n	bcc42 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bcc1a:	a903      	add	r1, sp, #12
   bcc1c:	4668      	mov	r0, sp
   bcc1e:	e9cd 6700 	strd	r6, r7, [sp]
   bcc22:	f7fd f9d7 	bl	b9fd4 <localtime_r>
	calendar_time.tm_year += 1900;
   bcc26:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bcc28:	4d09      	ldr	r5, [pc, #36]	; (bcc50 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bcc2a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bcc2e:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bcc30:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bcc32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bcc34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bcc36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bcc38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bcc3a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bcc3e:	6823      	ldr	r3, [r4, #0]
   bcc40:	602b      	str	r3, [r5, #0]
    }
}
   bcc42:	b00c      	add	sp, #48	; 0x30
   bcc44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcc48:	2003e6b0 	.word	0x2003e6b0
   bcc4c:	2003e6a8 	.word	0x2003e6a8
   bcc50:	2003e680 	.word	0x2003e680
   bcc54:	2003e6b8 	.word	0x2003e6b8

000bcc58 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   bcc58:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   bcc5a:	2000      	movs	r0, #0
   bcc5c:	f7fd f94a 	bl	b9ef4 <spark_sync_time_pending>
   bcc60:	b128      	cbz	r0, bcc6e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bcc62:	f7fd f92f 	bl	b9ec4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bcc66:	f080 0001 	eor.w	r0, r0, #1
   bcc6a:	b2c0      	uxtb	r0, r0
    }
   bcc6c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bcc6e:	2001      	movs	r0, #1
   bcc70:	e7fc      	b.n	bcc6c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bcc74 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   bcc74:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bcc76:	f7ff ffb9 	bl	bcbec <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   bcc7a:	4b02      	ldr	r3, [pc, #8]	; (bcc84 <_ZN9TimeClass5monthEx+0x10>)
   bcc7c:	6918      	ldr	r0, [r3, #16]
}
   bcc7e:	3001      	adds	r0, #1
   bcc80:	bd08      	pop	{r3, pc}
   bcc82:	bf00      	nop
   bcc84:	2003e680 	.word	0x2003e680

000bcc88 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   bcc88:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bcc8a:	2000      	movs	r0, #0
   bcc8c:	f7fc fe1c 	bl	b98c8 <hal_rtc_time_is_valid>
    if (rtcstate)
   bcc90:	4604      	mov	r4, r0
   bcc92:	b9a0      	cbnz	r0, bccbe <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bcc94:	f7fd f862 	bl	b9d5c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bcc98:	2801      	cmp	r0, #1
   bcc9a:	d110      	bne.n	bccbe <_ZN9TimeClass7isValidEv+0x36>
   bcc9c:	4620      	mov	r0, r4
   bcc9e:	f7fd f885 	bl	b9dac <system_thread_get_state>
   bcca2:	b960      	cbnz	r0, bccbe <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bcca4:	f7ff ffd8 	bl	bcc58 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bcca8:	b910      	cbnz	r0, bccb0 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bccaa:	f7fd f903 	bl	b9eb4 <spark_process>
        while (_while() && !_condition()) {
   bccae:	e7f9      	b.n	bcca4 <_ZN9TimeClass7isValidEv+0x1c>
   bccb0:	f7ff ffd2 	bl	bcc58 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bccb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bccb8:	2000      	movs	r0, #0
   bccba:	f7fc be05 	b.w	b98c8 <hal_rtc_time_is_valid>
}
   bccbe:	4620      	mov	r0, r4
   bccc0:	bd10      	pop	{r4, pc}

000bccc2 <_ZN9TimeClass3nowEv>:
{
   bccc2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bccc4:	f7ff ffe0 	bl	bcc88 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bccc8:	2210      	movs	r2, #16
   bccca:	2100      	movs	r1, #0
   bcccc:	4668      	mov	r0, sp
   bccce:	f001 fe9e 	bl	bea0e <memset>
    hal_rtc_get_time(&tv, nullptr);
   bccd2:	2100      	movs	r1, #0
   bccd4:	4668      	mov	r0, sp
   bccd6:	f7fc fdff 	bl	b98d8 <hal_rtc_get_time>
}
   bccda:	9800      	ldr	r0, [sp, #0]
   bccdc:	b005      	add	sp, #20
   bccde:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bcce4 <_ZN9TimeClass4hourEv>:
{
   bcce4:	b508      	push	{r3, lr}
	return hour(now());
   bcce6:	f7ff ffec 	bl	bccc2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bccea:	17c1      	asrs	r1, r0, #31
   bccec:	f7ff ff7e 	bl	bcbec <_ZL22Refresh_UnixTime_Cachex>
}
   bccf0:	4b01      	ldr	r3, [pc, #4]	; (bccf8 <_ZN9TimeClass4hourEv+0x14>)
   bccf2:	6898      	ldr	r0, [r3, #8]
   bccf4:	bd08      	pop	{r3, pc}
   bccf6:	bf00      	nop
   bccf8:	2003e680 	.word	0x2003e680

000bccfc <_ZN9TimeClass6minuteEv>:
{
   bccfc:	b508      	push	{r3, lr}
	return minute(now());
   bccfe:	f7ff ffe0 	bl	bccc2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bcd02:	17c1      	asrs	r1, r0, #31
   bcd04:	f7ff ff72 	bl	bcbec <_ZL22Refresh_UnixTime_Cachex>
}
   bcd08:	4b01      	ldr	r3, [pc, #4]	; (bcd10 <_ZN9TimeClass6minuteEv+0x14>)
   bcd0a:	6858      	ldr	r0, [r3, #4]
   bcd0c:	bd08      	pop	{r3, pc}
   bcd0e:	bf00      	nop
   bcd10:	2003e680 	.word	0x2003e680

000bcd14 <_ZN9TimeClass6secondEv>:
{
   bcd14:	b508      	push	{r3, lr}
	return second(now());
   bcd16:	f7ff ffd4 	bl	bccc2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bcd1a:	17c1      	asrs	r1, r0, #31
   bcd1c:	f7ff ff66 	bl	bcbec <_ZL22Refresh_UnixTime_Cachex>
}
   bcd20:	4b01      	ldr	r3, [pc, #4]	; (bcd28 <_ZN9TimeClass6secondEv+0x14>)
   bcd22:	6818      	ldr	r0, [r3, #0]
   bcd24:	bd08      	pop	{r3, pc}
   bcd26:	bf00      	nop
   bcd28:	2003e680 	.word	0x2003e680

000bcd2c <_ZN9TimeClass3dayEv>:
{
   bcd2c:	b508      	push	{r3, lr}
	return day(now());
   bcd2e:	f7ff ffc8 	bl	bccc2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bcd32:	17c1      	asrs	r1, r0, #31
   bcd34:	f7ff ff5a 	bl	bcbec <_ZL22Refresh_UnixTime_Cachex>
}
   bcd38:	4b01      	ldr	r3, [pc, #4]	; (bcd40 <_ZN9TimeClass3dayEv+0x14>)
   bcd3a:	68d8      	ldr	r0, [r3, #12]
   bcd3c:	bd08      	pop	{r3, pc}
   bcd3e:	bf00      	nop
   bcd40:	2003e680 	.word	0x2003e680

000bcd44 <_ZN9TimeClass5monthEv>:
{
   bcd44:	b508      	push	{r3, lr}
	return month(now());
   bcd46:	f7ff ffbc 	bl	bccc2 <_ZN9TimeClass3nowEv>
}
   bcd4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   bcd4e:	17c1      	asrs	r1, r0, #31
   bcd50:	f7ff bf90 	b.w	bcc74 <_ZN9TimeClass5monthEx>

000bcd54 <_ZN9TimeClass4yearEv>:
{
   bcd54:	b508      	push	{r3, lr}
	return year(now());
   bcd56:	f7ff ffb4 	bl	bccc2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bcd5a:	17c1      	asrs	r1, r0, #31
   bcd5c:	f7ff ff46 	bl	bcbec <_ZL22Refresh_UnixTime_Cachex>
}
   bcd60:	4b01      	ldr	r3, [pc, #4]	; (bcd68 <_ZN9TimeClass4yearEv+0x14>)
   bcd62:	6958      	ldr	r0, [r3, #20]
   bcd64:	bd08      	pop	{r3, pc}
   bcd66:	bf00      	nop
   bcd68:	2003e680 	.word	0x2003e680

000bcd6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bcd6c:	4b02      	ldr	r3, [pc, #8]	; (bcd78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bcd6e:	681a      	ldr	r2, [r3, #0]
   bcd70:	4b02      	ldr	r3, [pc, #8]	; (bcd7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bcd72:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bcd74:	4770      	bx	lr
   bcd76:	bf00      	nop
   bcd78:	2003da84 	.word	0x2003da84
   bcd7c:	2003e67c 	.word	0x2003e67c

000bcd80 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bcd80:	2100      	movs	r1, #0
   bcd82:	f7fc bffb 	b.w	b9d7c <system_delay_ms>
	...

000bcd88 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bcd88:	4b01      	ldr	r3, [pc, #4]	; (bcd90 <_GLOBAL__sub_I_RGB+0x8>)
   bcd8a:	2200      	movs	r2, #0
   bcd8c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bcd8e:	4770      	bx	lr
   bcd90:	2003e6c0 	.word	0x2003e6c0

000bcd94 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bcd94:	4b01      	ldr	r3, [pc, #4]	; (bcd9c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bcd96:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bcd98:	4770      	bx	lr
   bcd9a:	bf00      	nop
   bcd9c:	2003da88 	.word	0x2003da88

000bcda0 <serialEventRun>:
{
   bcda0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bcda2:	4b0b      	ldr	r3, [pc, #44]	; (bcdd0 <serialEventRun+0x30>)
   bcda4:	b143      	cbz	r3, bcdb8 <serialEventRun+0x18>
   bcda6:	f000 fc25 	bl	bd5f4 <_Z16_fetch_usbserialv>
   bcdaa:	6803      	ldr	r3, [r0, #0]
   bcdac:	691b      	ldr	r3, [r3, #16]
   bcdae:	4798      	blx	r3
   bcdb0:	2800      	cmp	r0, #0
   bcdb2:	dd01      	ble.n	bcdb8 <serialEventRun+0x18>
        serialEvent();
   bcdb4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bcdb8:	4b06      	ldr	r3, [pc, #24]	; (bcdd4 <serialEventRun+0x34>)
   bcdba:	b143      	cbz	r3, bcdce <serialEventRun+0x2e>
   bcdbc:	f000 fed0 	bl	bdb60 <_Z22__fetch_global_Serial1v>
   bcdc0:	6803      	ldr	r3, [r0, #0]
   bcdc2:	691b      	ldr	r3, [r3, #16]
   bcdc4:	4798      	blx	r3
   bcdc6:	2800      	cmp	r0, #0
   bcdc8:	dd01      	ble.n	bcdce <serialEventRun+0x2e>
        serialEvent1();
   bcdca:	f3af 8000 	nop.w
}
   bcdce:	bd08      	pop	{r3, pc}
	...

000bcdd8 <_post_loop>:
{
   bcdd8:	b508      	push	{r3, lr}
	serialEventRun();
   bcdda:	f7ff ffe1 	bl	bcda0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bcdde:	f7fc fd6b 	bl	b98b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bcde2:	4b01      	ldr	r3, [pc, #4]	; (bcde8 <_post_loop+0x10>)
   bcde4:	6018      	str	r0, [r3, #0]
}
   bcde6:	bd08      	pop	{r3, pc}
   bcde8:	2003e740 	.word	0x2003e740

000bcdec <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bcdec:	4805      	ldr	r0, [pc, #20]	; (bce04 <_Z33system_initialize_user_backup_ramv+0x18>)
   bcdee:	4a06      	ldr	r2, [pc, #24]	; (bce08 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bcdf0:	4906      	ldr	r1, [pc, #24]	; (bce0c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bcdf2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bcdf4:	1a12      	subs	r2, r2, r0
   bcdf6:	f001 fde2 	bl	be9be <memcpy>
    __backup_sram_signature = signature;
   bcdfa:	4b05      	ldr	r3, [pc, #20]	; (bce10 <_Z33system_initialize_user_backup_ramv+0x24>)
   bcdfc:	4a05      	ldr	r2, [pc, #20]	; (bce14 <_Z33system_initialize_user_backup_ramv+0x28>)
   bcdfe:	601a      	str	r2, [r3, #0]
}
   bce00:	bd08      	pop	{r3, pc}
   bce02:	bf00      	nop
   bce04:	2003f400 	.word	0x2003f400
   bce08:	2003f404 	.word	0x2003f404
   bce0c:	000c2304 	.word	0x000c2304
   bce10:	2003f400 	.word	0x2003f400
   bce14:	9a271c1e 	.word	0x9a271c1e

000bce18 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bce18:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bce1a:	2300      	movs	r3, #0
   bce1c:	9300      	str	r3, [sp, #0]
   bce1e:	461a      	mov	r2, r3
   bce20:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bce24:	f7fc ffd4 	bl	b9dd0 <system_ctrl_set_result>
}
   bce28:	b003      	add	sp, #12
   bce2a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bce30 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bce30:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bce32:	8843      	ldrh	r3, [r0, #2]
   bce34:	2b0a      	cmp	r3, #10
   bce36:	d008      	beq.n	bce4a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bce38:	2b50      	cmp	r3, #80	; 0x50
   bce3a:	d10b      	bne.n	bce54 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bce3c:	4b09      	ldr	r3, [pc, #36]	; (bce64 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bce3e:	681b      	ldr	r3, [r3, #0]
   bce40:	b14b      	cbz	r3, bce56 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bce42:	b003      	add	sp, #12
   bce44:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bce48:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bce4a:	f7ff ffe5 	bl	bce18 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bce4e:	b003      	add	sp, #12
   bce50:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bce54:	2300      	movs	r3, #0
   bce56:	9300      	str	r3, [sp, #0]
   bce58:	461a      	mov	r2, r3
   bce5a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bce5e:	f7fc ffb7 	bl	b9dd0 <system_ctrl_set_result>
}
   bce62:	e7f4      	b.n	bce4e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bce64:	2003e6d4 	.word	0x2003e6d4

000bce68 <module_user_init_hook>:
{
   bce68:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bce6a:	4812      	ldr	r0, [pc, #72]	; (bceb4 <module_user_init_hook+0x4c>)
   bce6c:	2100      	movs	r1, #0
   bce6e:	f7fd f8a9 	bl	b9fc4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bce72:	4b11      	ldr	r3, [pc, #68]	; (bceb8 <module_user_init_hook+0x50>)
   bce74:	681a      	ldr	r2, [r3, #0]
   bce76:	4b11      	ldr	r3, [pc, #68]	; (bcebc <module_user_init_hook+0x54>)
   bce78:	429a      	cmp	r2, r3
   bce7a:	4b11      	ldr	r3, [pc, #68]	; (bcec0 <module_user_init_hook+0x58>)
   bce7c:	bf0c      	ite	eq
   bce7e:	2201      	moveq	r2, #1
   bce80:	2200      	movne	r2, #0
   bce82:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bce84:	d001      	beq.n	bce8a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bce86:	f7ff ffb1 	bl	bcdec <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bce8a:	f7fc fcfd 	bl	b9888 <HAL_RNG_GetRandomNumber>
   bce8e:	4604      	mov	r4, r0
    srand(seed);
   bce90:	f001 fdc6 	bl	bea20 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bce94:	4b0b      	ldr	r3, [pc, #44]	; (bcec4 <module_user_init_hook+0x5c>)
   bce96:	b113      	cbz	r3, bce9e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bce98:	4620      	mov	r0, r4
   bce9a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bce9e:	2100      	movs	r1, #0
   bcea0:	4808      	ldr	r0, [pc, #32]	; (bcec4 <module_user_init_hook+0x5c>)
   bcea2:	f7fd f82f 	bl	b9f04 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bcea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bceaa:	4807      	ldr	r0, [pc, #28]	; (bcec8 <module_user_init_hook+0x60>)
   bceac:	2100      	movs	r1, #0
   bceae:	f7fc bf85 	b.w	b9dbc <system_ctrl_set_app_request_handler>
   bceb2:	bf00      	nop
   bceb4:	000bcd95 	.word	0x000bcd95
   bceb8:	2003f400 	.word	0x2003f400
   bcebc:	9a271c1e 	.word	0x9a271c1e
   bcec0:	2003e6d0 	.word	0x2003e6d0
   bcec4:	00000000 	.word	0x00000000
   bcec8:	000bce31 	.word	0x000bce31

000bcecc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bcecc:	4770      	bx	lr

000bcece <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bcece:	2000      	movs	r0, #0
   bced0:	4770      	bx	lr

000bced2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bced2:	b510      	push	{r4, lr}
   bced4:	2110      	movs	r1, #16
   bced6:	4604      	mov	r4, r0
   bced8:	f7f7 f8e1 	bl	b409e <_ZdlPvj>
   bcedc:	4620      	mov	r0, r4
   bcede:	bd10      	pop	{r4, pc}

000bcee0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bcee0:	b508      	push	{r3, lr}
      { delete this; }
   bcee2:	f7ff fff6 	bl	bced2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bcee6:	bd08      	pop	{r3, pc}

000bcee8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bcee8:	b530      	push	{r4, r5, lr}
        type_(type) {
   bceea:	2200      	movs	r2, #0
   bceec:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bcef0:	6002      	str	r2, [r0, #0]
   bcef2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   bcef4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bcef6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bcef8:	680c      	ldr	r4, [r1, #0]
   bcefa:	8085      	strh	r5, [r0, #4]
   bcefc:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bcefe:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bcf00:	bd30      	pop	{r4, r5, pc}

000bcf02 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bcf02:	b510      	push	{r4, lr}
   bcf04:	4604      	mov	r4, r0
    free((void*)msg_);
   bcf06:	6800      	ldr	r0, [r0, #0]
   bcf08:	f7fd f80c 	bl	b9f24 <free>
}
   bcf0c:	4620      	mov	r0, r4
   bcf0e:	bd10      	pop	{r4, pc}

000bcf10 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bcf10:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bcf12:	68c4      	ldr	r4, [r0, #12]
   bcf14:	b1f4      	cbz	r4, bcf54 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bcf16:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bcf18:	2b02      	cmp	r3, #2
   bcf1a:	d103      	bne.n	bcf24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bcf1c:	f104 000c 	add.w	r0, r4, #12
   bcf20:	f7ff ffef 	bl	bcf02 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bcf24:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bcf26:	b135      	cbz	r5, bcf36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bcf28:	4628      	mov	r0, r5
   bcf2a:	f7f7 facf 	bl	b44cc <_ZNSt14_Function_baseD1Ev>
   bcf2e:	2110      	movs	r1, #16
   bcf30:	4628      	mov	r0, r5
   bcf32:	f7f7 f8b4 	bl	b409e <_ZdlPvj>
   bcf36:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bcf38:	b135      	cbz	r5, bcf48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bcf3a:	4628      	mov	r0, r5
   bcf3c:	f7f7 fac6 	bl	b44cc <_ZNSt14_Function_baseD1Ev>
   bcf40:	2110      	movs	r1, #16
   bcf42:	4628      	mov	r0, r5
   bcf44:	f7f7 f8ab 	bl	b409e <_ZdlPvj>
   bcf48:	4620      	mov	r0, r4
   bcf4a:	2114      	movs	r1, #20
   bcf4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bcf50:	f7f7 b8a5 	b.w	b409e <_ZdlPvj>
   bcf54:	bd38      	pop	{r3, r4, r5, pc}

000bcf56 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   bcf56:	b510      	push	{r4, lr}
   bcf58:	b088      	sub	sp, #32
   bcf5a:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   bcf5c:	4668      	mov	r0, sp
   bcf5e:	f7fd f9a2 	bl	ba2a6 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   bcf62:	4669      	mov	r1, sp
   bcf64:	a804      	add	r0, sp, #16
   bcf66:	f7fd f9e9 	bl	ba33c <_ZN6StringC1ERKS_>
   bcf6a:	a804      	add	r0, sp, #16
   bcf6c:	47a0      	blx	r4
   bcf6e:	4604      	mov	r4, r0
   bcf70:	a804      	add	r0, sp, #16
   bcf72:	f7fd f94d 	bl	ba210 <_ZN6StringD1Ev>
    String p(param);
   bcf76:	4668      	mov	r0, sp
   bcf78:	f7fd f94a 	bl	ba210 <_ZN6StringD1Ev>
}
   bcf7c:	4620      	mov	r0, r4
   bcf7e:	b008      	add	sp, #32
   bcf80:	bd10      	pop	{r4, pc}

000bcf82 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bcf82:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bcf84:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bcf86:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bcf8a:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bcf8c:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bcf8e:	461a      	mov	r2, r3
   bcf90:	4669      	mov	r1, sp
   bcf92:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bcf94:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bcf98:	f8ad 4000 	strh.w	r4, [sp]
   bcf9c:	f7fc ff82 	bl	b9ea4 <spark_function>
}
   bcfa0:	b004      	add	sp, #16
   bcfa2:	bd10      	pop	{r4, pc}

000bcfa4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bcfa4:	680b      	ldr	r3, [r1, #0]
   bcfa6:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bcfa8:	684b      	ldr	r3, [r1, #4]
   bcfaa:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bcfac:	b113      	cbz	r3, bcfb4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bcfae:	685a      	ldr	r2, [r3, #4]
   bcfb0:	3201      	adds	r2, #1
   bcfb2:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bcfb4:	4770      	bx	lr

000bcfb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bcfb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bcfb8:	4604      	mov	r4, r0
   bcfba:	4668      	mov	r0, sp
   bcfbc:	460d      	mov	r5, r1
   bcfbe:	f7ff fff1 	bl	bcfa4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bcfc2:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bcfc4:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bcfc6:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bcfc8:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bcfca:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bcfcc:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bcfce:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   bcfd0:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bcfd2:	f7fe f8a2 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bcfd6:	b135      	cbz	r5, bcfe6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bcfd8:	1d28      	adds	r0, r5, #4
   bcfda:	f7fe f89e 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bcfde:	2108      	movs	r1, #8
   bcfe0:	4628      	mov	r0, r5
   bcfe2:	f7f7 f85c 	bl	b409e <_ZdlPvj>
        return p;
    }
   bcfe6:	4620      	mov	r0, r4
   bcfe8:	b003      	add	sp, #12
   bcfea:	bd30      	pop	{r4, r5, pc}

000bcfec <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bcfec:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bcfee:	b510      	push	{r4, lr}
      if (_M_empty())
   bcff0:	b90a      	cbnz	r2, bcff6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bcff2:	f000 fe3c 	bl	bdc6e <_ZSt25__throw_bad_function_callv>
    }
   bcff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bcffa:	68c3      	ldr	r3, [r0, #12]
   bcffc:	4718      	bx	r3

000bcffe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bcffe:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bd000:	6800      	ldr	r0, [r0, #0]
   bd002:	f100 0110 	add.w	r1, r0, #16
   bd006:	f7ff fff1 	bl	bcfec <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bd00a:	bd08      	pop	{r3, pc}

000bd00c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bd00c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bd00e:	b510      	push	{r4, lr}
      if (_M_empty())
   bd010:	b90a      	cbnz	r2, bd016 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bd012:	f000 fe2c 	bl	bdc6e <_ZSt25__throw_bad_function_callv>
    }
   bd016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd01a:	68c3      	ldr	r3, [r0, #12]
   bd01c:	4718      	bx	r3

000bd01e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bd01e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bd020:	6800      	ldr	r0, [r0, #0]
   bd022:	f100 0110 	add.w	r1, r0, #16
   bd026:	f7ff fff1 	bl	bd00c <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bd02a:	bd08      	pop	{r3, pc}

000bd02c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bd02c:	b538      	push	{r3, r4, r5, lr}
   bd02e:	2300      	movs	r3, #0
   bd030:	4604      	mov	r4, r0
   bd032:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bd034:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bd036:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bd038:	f7f7 f82d 	bl	b4096 <_Znwj>
   bd03c:	b128      	cbz	r0, bd04a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bd03e:	2301      	movs	r3, #1
   bd040:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bd044:	4b02      	ldr	r3, [pc, #8]	; (bd050 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bd046:	6003      	str	r3, [r0, #0]
   bd048:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bd04a:	6020      	str	r0, [r4, #0]
	}
   bd04c:	4620      	mov	r0, r4
   bd04e:	bd38      	pop	{r3, r4, r5, pc}
   bd050:	000c1c00 	.word	0x000c1c00

000bd054 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bd054:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bd056:	2300      	movs	r3, #0
   bd058:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bd05a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bd05c:	4604      	mov	r4, r0
   bd05e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bd060:	b12b      	cbz	r3, bd06e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bd062:	2202      	movs	r2, #2
   bd064:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bd066:	68eb      	ldr	r3, [r5, #12]
   bd068:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bd06a:	68ab      	ldr	r3, [r5, #8]
   bd06c:	60a3      	str	r3, [r4, #8]
    }
   bd06e:	4620      	mov	r0, r4
   bd070:	bd38      	pop	{r3, r4, r5, pc}
	...

000bd074 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bd074:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd076:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   bd078:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bd07a:	4668      	mov	r0, sp
   bd07c:	f7ff ff34 	bl	bcee8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bd080:	f04f 0302 	mov.w	r3, #2
   bd084:	e8d4 2f4f 	ldrexb	r2, [r4]
   bd088:	2a00      	cmp	r2, #0
   bd08a:	d103      	bne.n	bd094 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bd08c:	e8c4 3f41 	strexb	r1, r3, [r4]
   bd090:	2900      	cmp	r1, #0
   bd092:	d1f7      	bne.n	bd084 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bd094:	d125      	bne.n	bd0e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bd096:	f104 050c 	add.w	r5, r4, #12
   bd09a:	4669      	mov	r1, sp
   bd09c:	4628      	mov	r0, r5
   bd09e:	f7ff ff23 	bl	bcee8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bd0a2:	f3bf 8f5b 	dmb	ish
   bd0a6:	2301      	movs	r3, #1
   bd0a8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bd0aa:	2000      	movs	r0, #0
   bd0ac:	f104 0308 	add.w	r3, r4, #8
   bd0b0:	f3bf 8f5b 	dmb	ish
   bd0b4:	e853 6f00 	ldrex	r6, [r3]
   bd0b8:	e843 0200 	strex	r2, r0, [r3]
   bd0bc:	2a00      	cmp	r2, #0
   bd0be:	d1f9      	bne.n	bd0b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bd0c0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bd0c4:	b16e      	cbz	r6, bd0e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bd0c6:	f7fc fe61 	bl	b9d8c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bd0ca:	b178      	cbz	r0, bd0ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bd0cc:	4629      	mov	r1, r5
   bd0ce:	4630      	mov	r0, r6
   bd0d0:	f7ff ff8c 	bl	bcfec <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bd0d4:	4630      	mov	r0, r6
   bd0d6:	f7f7 f9f9 	bl	b44cc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bd0da:	2110      	movs	r1, #16
   bd0dc:	4630      	mov	r0, r6
   bd0de:	f7f6 ffde 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bd0e2:	4668      	mov	r0, sp
   bd0e4:	f7ff ff0d 	bl	bcf02 <_ZN8particle5ErrorD1Ev>
    }
   bd0e8:	b009      	add	sp, #36	; 0x24
   bd0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bd0ec:	4631      	mov	r1, r6
   bd0ee:	a802      	add	r0, sp, #8
   bd0f0:	f7ff ffb0 	bl	bd054 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bd0f4:	68e0      	ldr	r0, [r4, #12]
   bd0f6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bd0fa:	b108      	cbz	r0, bd100 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bd0fc:	f001 fd1e 	bl	beb3c <strdup>
        type_(type) {
   bd100:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bd102:	2010      	movs	r0, #16
   bd104:	f8ad 501c 	strh.w	r5, [sp, #28]
   bd108:	f7f6 ffc5 	bl	b4096 <_Znwj>
   bd10c:	4605      	mov	r5, r0
   bd10e:	b1e8      	cbz	r0, bd14c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bd110:	2700      	movs	r7, #0
   bd112:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd114:	2018      	movs	r0, #24
   bd116:	f7f6 ffbe 	bl	b4096 <_Znwj>
   bd11a:	4604      	mov	r4, r0
   bd11c:	b188      	cbz	r0, bd142 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bd11e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bd120:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bd122:	a802      	add	r0, sp, #8
   bd124:	f7fe feae 	bl	bbe84 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd128:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bd12a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bd12c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd12e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bd130:	9204      	str	r2, [sp, #16]
   bd132:	a906      	add	r1, sp, #24
   bd134:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bd136:	60e3      	str	r3, [r4, #12]
   bd138:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bd13c:	9205      	str	r2, [sp, #20]
   bd13e:	f7ff fed3 	bl	bcee8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bd142:	4b08      	ldr	r3, [pc, #32]	; (bd164 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bd144:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bd146:	4b08      	ldr	r3, [pc, #32]	; (bd168 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd148:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bd14a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bd14c:	a806      	add	r0, sp, #24
   bd14e:	f7ff fed8 	bl	bcf02 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bd152:	a802      	add	r0, sp, #8
   bd154:	f7f7 f9ba 	bl	b44cc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bd158:	2200      	movs	r2, #0
   bd15a:	4629      	mov	r1, r5
   bd15c:	4803      	ldr	r0, [pc, #12]	; (bd16c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bd15e:	f7fc fe1d 	bl	b9d9c <application_thread_invoke>
   bd162:	e7b7      	b.n	bd0d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bd164:	000bcfff 	.word	0x000bcfff
   bd168:	000bd281 	.word	0x000bd281
   bd16c:	000bd7e3 	.word	0x000bd7e3

000bd170 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bd170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd174:	b08b      	sub	sp, #44	; 0x2c
   bd176:	4605      	mov	r5, r0
   bd178:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bd17c:	460f      	mov	r7, r1
   bd17e:	4690      	mov	r8, r2
   bd180:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bd182:	f7fc fe9f 	bl	b9ec4 <spark_cloud_flag_connected>
   bd186:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bd188:	4683      	mov	fp, r0
   bd18a:	bb38      	cbnz	r0, bd1dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bd18c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bd190:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bd192:	a905      	add	r1, sp, #20
   bd194:	4630      	mov	r0, r6
   bd196:	f8ad 3018 	strh.w	r3, [sp, #24]
   bd19a:	f7ff fea5 	bl	bcee8 <_ZN8particle5ErrorC1EOS0_>
   bd19e:	2014      	movs	r0, #20
   bd1a0:	f7f6 ff79 	bl	b4096 <_Znwj>
   bd1a4:	4604      	mov	r4, r0
   bd1a6:	b148      	cbz	r0, bd1bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bd1a8:	2302      	movs	r3, #2
   bd1aa:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bd1ac:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bd1ae:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bd1b2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bd1b4:	4631      	mov	r1, r6
   bd1b6:	300c      	adds	r0, #12
   bd1b8:	f7ff fe96 	bl	bcee8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bd1bc:	4628      	mov	r0, r5
	: __shared_count(__p)
   bd1be:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bd1c0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bd1c4:	f7ff ff32 	bl	bd02c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bd1c8:	4630      	mov	r0, r6
   bd1ca:	f7ff fe9a 	bl	bcf02 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bd1ce:	a805      	add	r0, sp, #20
   bd1d0:	f7ff fe97 	bl	bcf02 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   bd1d4:	4628      	mov	r0, r5
   bd1d6:	b00b      	add	sp, #44	; 0x2c
   bd1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bd1dc:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bd1de:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bd1e0:	2014      	movs	r0, #20
   bd1e2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bd1e6:	9307      	str	r3, [sp, #28]
   bd1e8:	f7f6 ff55 	bl	b4096 <_Znwj>
   bd1ec:	4601      	mov	r1, r0
   bd1ee:	b118      	cbz	r0, bd1f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bd1f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bd1f4:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bd1f6:	7044      	strb	r4, [r0, #1]
   bd1f8:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bd1fa:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bd1fc:	f7ff ff16 	bl	bd02c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bd200:	4b1e      	ldr	r3, [pc, #120]	; (bd27c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bd202:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bd204:	2008      	movs	r0, #8
   bd206:	f7f6 ff46 	bl	b4096 <_Znwj>
   bd20a:	4604      	mov	r4, r0
   bd20c:	b110      	cbz	r0, bd214 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bd20e:	a903      	add	r1, sp, #12
   bd210:	f7ff fec8 	bl	bcfa4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bd214:	9600      	str	r6, [sp, #0]
   bd216:	fa5f f38a 	uxtb.w	r3, sl
   bd21a:	464a      	mov	r2, r9
   bd21c:	4641      	mov	r1, r8
   bd21e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bd220:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bd222:	f7fc fe57 	bl	b9ed4 <spark_send_event>
   bd226:	b9b8      	cbnz	r0, bd258 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bd228:	9b03      	ldr	r3, [sp, #12]
   bd22a:	785b      	ldrb	r3, [r3, #1]
   bd22c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bd230:	b993      	cbnz	r3, bd258 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bd232:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bd236:	a905      	add	r1, sp, #20
   bd238:	a803      	add	r0, sp, #12
   bd23a:	9205      	str	r2, [sp, #20]
   bd23c:	f8ad 3018 	strh.w	r3, [sp, #24]
   bd240:	f7ff ff18 	bl	bd074 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bd244:	a805      	add	r0, sp, #20
   bd246:	f7ff fe5c 	bl	bcf02 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bd24a:	a805      	add	r0, sp, #20
   bd24c:	9909      	ldr	r1, [sp, #36]	; 0x24
   bd24e:	f7ff feb2 	bl	bcfb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bd252:	a806      	add	r0, sp, #24
   bd254:	f7fd ff61 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bd258:	a903      	add	r1, sp, #12
   bd25a:	a805      	add	r0, sp, #20
   bd25c:	f7ff fea2 	bl	bcfa4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bd260:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bd262:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bd264:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bd266:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bd268:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bd26a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bd26c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bd26e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bd270:	f7fd ff53 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bd274:	a804      	add	r0, sp, #16
   bd276:	f7fd ff50 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bd27a:	e7ab      	b.n	bd1d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bd27c:	000bd2fd 	.word	0x000bd2fd

000bd280 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bd280:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bd282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd284:	4605      	mov	r5, r0
	switch (__op)
   bd286:	d103      	bne.n	bd290 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bd288:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bd28a:	6003      	str	r3, [r0, #0]
      }
   bd28c:	2000      	movs	r0, #0
   bd28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bd290:	2a02      	cmp	r2, #2
   bd292:	d010      	beq.n	bd2b6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bd294:	2a03      	cmp	r2, #3
   bd296:	d1f9      	bne.n	bd28c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bd298:	6804      	ldr	r4, [r0, #0]
   bd29a:	2c00      	cmp	r4, #0
   bd29c:	d0f6      	beq.n	bd28c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bd29e:	f104 0010 	add.w	r0, r4, #16
   bd2a2:	f7ff fe2e 	bl	bcf02 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bd2a6:	4620      	mov	r0, r4
   bd2a8:	f7f7 f910 	bl	b44cc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bd2ac:	2118      	movs	r1, #24
   bd2ae:	4620      	mov	r0, r4
   bd2b0:	f7f6 fef5 	bl	b409e <_ZdlPvj>
   bd2b4:	e7ea      	b.n	bd28c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bd2b6:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bd2b8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bd2ba:	f7f6 feec 	bl	b4096 <_Znwj>
   bd2be:	4604      	mov	r4, r0
   bd2c0:	b150      	cbz	r0, bd2d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bd2c2:	4631      	mov	r1, r6
   bd2c4:	f7ff fec6 	bl	bd054 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bd2c8:	6930      	ldr	r0, [r6, #16]
   bd2ca:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bd2ce:	b108      	cbz	r0, bd2d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bd2d0:	f001 fc34 	bl	beb3c <strdup>
        type_(type) {
   bd2d4:	6120      	str	r0, [r4, #16]
   bd2d6:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bd2d8:	602c      	str	r4, [r5, #0]
	}
   bd2da:	e7d7      	b.n	bd28c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bd2dc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bd2dc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bd2de:	2300      	movs	r3, #0
   bd2e0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bd2e2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bd2e4:	4604      	mov	r4, r0
   bd2e6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bd2e8:	b12b      	cbz	r3, bd2f6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bd2ea:	2202      	movs	r2, #2
   bd2ec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bd2ee:	68eb      	ldr	r3, [r5, #12]
   bd2f0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bd2f2:	68ab      	ldr	r3, [r5, #8]
   bd2f4:	60a3      	str	r3, [r4, #8]
    }
   bd2f6:	4620      	mov	r0, r4
   bd2f8:	bd38      	pop	{r3, r4, r5, pc}
	...

000bd2fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bd2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd2fe:	b089      	sub	sp, #36	; 0x24
   bd300:	4604      	mov	r4, r0
   bd302:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bd304:	a801      	add	r0, sp, #4
   bd306:	4611      	mov	r1, r2
   bd308:	f7ff fe55 	bl	bcfb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bd30c:	b1a4      	cbz	r4, bd338 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bd30e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bd310:	b11d      	cbz	r5, bd31a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bd312:	4628      	mov	r0, r5
   bd314:	f001 fc12 	bl	beb3c <strdup>
   bd318:	4605      	mov	r5, r0
   bd31a:	a801      	add	r0, sp, #4
   bd31c:	a903      	add	r1, sp, #12
        type_(type) {
   bd31e:	9503      	str	r5, [sp, #12]
   bd320:	f8ad 4010 	strh.w	r4, [sp, #16]
   bd324:	f7ff fea6 	bl	bd074 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bd328:	a803      	add	r0, sp, #12
   bd32a:	f7ff fdea 	bl	bcf02 <_ZN8particle5ErrorD1Ev>
   bd32e:	a802      	add	r0, sp, #8
   bd330:	f7fd fef3 	bl	bb11a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bd334:	b009      	add	sp, #36	; 0x24
   bd336:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bd338:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bd33a:	2301      	movs	r3, #1
   bd33c:	e8d5 2f4f 	ldrexb	r2, [r5]
   bd340:	2a00      	cmp	r2, #0
   bd342:	d103      	bne.n	bd34c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bd344:	e8c5 3f41 	strexb	r1, r3, [r5]
   bd348:	2900      	cmp	r1, #0
   bd34a:	d1f7      	bne.n	bd33c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bd34c:	d1ef      	bne.n	bd32e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bd34e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bd350:	f3bf 8f5b 	dmb	ish
   bd354:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bd356:	1d2b      	adds	r3, r5, #4
   bd358:	f3bf 8f5b 	dmb	ish
   bd35c:	e853 6f00 	ldrex	r6, [r3]
   bd360:	e843 4200 	strex	r2, r4, [r3]
   bd364:	2a00      	cmp	r2, #0
   bd366:	d1f9      	bne.n	bd35c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bd368:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bd36c:	2e00      	cmp	r6, #0
   bd36e:	d0de      	beq.n	bd32e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bd370:	4620      	mov	r0, r4
   bd372:	f7fc fd0b 	bl	b9d8c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bd376:	4607      	mov	r7, r0
   bd378:	b160      	cbz	r0, bd394 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bd37a:	f105 010c 	add.w	r1, r5, #12
   bd37e:	4630      	mov	r0, r6
   bd380:	f7ff fe44 	bl	bd00c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bd384:	4630      	mov	r0, r6
   bd386:	f7f7 f8a1 	bl	b44cc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bd38a:	2110      	movs	r1, #16
   bd38c:	4630      	mov	r0, r6
   bd38e:	f7f6 fe86 	bl	b409e <_ZdlPvj>
   bd392:	e7cc      	b.n	bd32e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bd394:	4631      	mov	r1, r6
   bd396:	a803      	add	r0, sp, #12
   bd398:	f7ff ffa0 	bl	bd2dc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bd39c:	7b2b      	ldrb	r3, [r5, #12]
   bd39e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bd3a2:	2010      	movs	r0, #16
   bd3a4:	f7f6 fe77 	bl	b4096 <_Znwj>
   bd3a8:	4605      	mov	r5, r0
   bd3aa:	b1d0      	cbz	r0, bd3e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bd3ac:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd3ae:	2014      	movs	r0, #20
   bd3b0:	f7f6 fe71 	bl	b4096 <_Znwj>
   bd3b4:	4604      	mov	r4, r0
   bd3b6:	b178      	cbz	r0, bd3d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bd3b8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bd3ba:	4601      	mov	r1, r0
   bd3bc:	a803      	add	r0, sp, #12
   bd3be:	f7fe fd61 	bl	bbe84 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd3c2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bd3c4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bd3c6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd3c8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bd3ca:	9205      	str	r2, [sp, #20]
   bd3cc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bd3ce:	60e3      	str	r3, [r4, #12]
   bd3d0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bd3d4:	9206      	str	r2, [sp, #24]
   bd3d6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bd3d8:	4b06      	ldr	r3, [pc, #24]	; (bd3f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bd3da:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bd3dc:	4b06      	ldr	r3, [pc, #24]	; (bd3f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd3de:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bd3e0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bd3e2:	a803      	add	r0, sp, #12
   bd3e4:	f7f7 f872 	bl	b44cc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bd3e8:	2200      	movs	r2, #0
   bd3ea:	4629      	mov	r1, r5
   bd3ec:	4803      	ldr	r0, [pc, #12]	; (bd3fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bd3ee:	f7fc fcd5 	bl	b9d9c <application_thread_invoke>
   bd3f2:	e7c7      	b.n	bd384 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bd3f4:	000bd01f 	.word	0x000bd01f
   bd3f8:	000bd401 	.word	0x000bd401
   bd3fc:	000bd7e3 	.word	0x000bd7e3

000bd400 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bd400:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bd402:	b570      	push	{r4, r5, r6, lr}
   bd404:	4604      	mov	r4, r0
	switch (__op)
   bd406:	d103      	bne.n	bd410 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bd408:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bd40a:	6003      	str	r3, [r0, #0]
      }
   bd40c:	2000      	movs	r0, #0
   bd40e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bd410:	2a02      	cmp	r2, #2
   bd412:	d00c      	beq.n	bd42e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bd414:	2a03      	cmp	r2, #3
   bd416:	d1f9      	bne.n	bd40c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bd418:	6804      	ldr	r4, [r0, #0]
   bd41a:	2c00      	cmp	r4, #0
   bd41c:	d0f6      	beq.n	bd40c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bd41e:	4620      	mov	r0, r4
   bd420:	f7f7 f854 	bl	b44cc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bd424:	2114      	movs	r1, #20
   bd426:	4620      	mov	r0, r4
   bd428:	f7f6 fe39 	bl	b409e <_ZdlPvj>
   bd42c:	e7ee      	b.n	bd40c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bd42e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bd430:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bd432:	f7f6 fe30 	bl	b4096 <_Znwj>
   bd436:	4605      	mov	r5, r0
   bd438:	b120      	cbz	r0, bd444 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bd43a:	4631      	mov	r1, r6
   bd43c:	f7ff ff4e 	bl	bd2dc <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bd440:	7c33      	ldrb	r3, [r6, #16]
   bd442:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bd444:	6025      	str	r5, [r4, #0]
	}
   bd446:	e7e1      	b.n	bd40c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bd448 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bd448:	4770      	bx	lr

000bd44a <_ZN9IPAddressD0Ev>:
   bd44a:	b510      	push	{r4, lr}
   bd44c:	2118      	movs	r1, #24
   bd44e:	4604      	mov	r4, r0
   bd450:	f7f6 fe25 	bl	b409e <_ZdlPvj>
   bd454:	4620      	mov	r0, r4
   bd456:	bd10      	pop	{r4, pc}

000bd458 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bd458:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bd45a:	7d03      	ldrb	r3, [r0, #20]
   bd45c:	2b06      	cmp	r3, #6
{
   bd45e:	b08d      	sub	sp, #52	; 0x34
   bd460:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bd462:	f100 0704 	add.w	r7, r0, #4
   bd466:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bd46a:	d012      	beq.n	bd492 <_ZNK9IPAddress7printToER5Print+0x3a>
   bd46c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bd470:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bd474:	220a      	movs	r2, #10
   bd476:	4630      	mov	r0, r6
   bd478:	f7ff fb33 	bl	bcae2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bd47c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bd47e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bd480:	d019      	beq.n	bd4b6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bd482:	2c00      	cmp	r4, #0
   bd484:	d0f4      	beq.n	bd470 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bd486:	212e      	movs	r1, #46	; 0x2e
   bd488:	4630      	mov	r0, r6
   bd48a:	f7ff fb11 	bl	bcab0 <_ZN5Print5printEc>
   bd48e:	4404      	add	r4, r0
   bd490:	e7ee      	b.n	bd470 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bd492:	232f      	movs	r3, #47	; 0x2f
   bd494:	466a      	mov	r2, sp
   bd496:	4639      	mov	r1, r7
   bd498:	200a      	movs	r0, #10
		buf[0] = 0;
   bd49a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bd49e:	f7fc fb1d 	bl	b9adc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bd4a2:	4668      	mov	r0, sp
   bd4a4:	f001 fb67 	bl	beb76 <strlen>
   bd4a8:	6833      	ldr	r3, [r6, #0]
   bd4aa:	4602      	mov	r2, r0
   bd4ac:	68db      	ldr	r3, [r3, #12]
   bd4ae:	4669      	mov	r1, sp
   bd4b0:	4630      	mov	r0, r6
   bd4b2:	4798      	blx	r3
   bd4b4:	4604      	mov	r4, r0
    }
    return n;
}
   bd4b6:	4620      	mov	r0, r4
   bd4b8:	b00d      	add	sp, #52	; 0x34
   bd4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bd4bc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bd4bc:	b510      	push	{r4, lr}
   bd4be:	4b05      	ldr	r3, [pc, #20]	; (bd4d4 <_ZN9IPAddressC1Ev+0x18>)
   bd4c0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bd4c2:	2211      	movs	r2, #17
   bd4c4:	f840 3b04 	str.w	r3, [r0], #4
   bd4c8:	2100      	movs	r1, #0
   bd4ca:	f001 faa0 	bl	bea0e <memset>
}
   bd4ce:	4620      	mov	r0, r4
   bd4d0:	bd10      	pop	{r4, pc}
   bd4d2:	bf00      	nop
   bd4d4:	000c1c1c 	.word	0x000c1c1c

000bd4d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bd4d8:	4603      	mov	r3, r0
   bd4da:	4a07      	ldr	r2, [pc, #28]	; (bd4f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bd4dc:	b510      	push	{r4, lr}
   bd4de:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bd4e2:	f101 0210 	add.w	r2, r1, #16
   bd4e6:	f851 4b04 	ldr.w	r4, [r1], #4
   bd4ea:	f843 4b04 	str.w	r4, [r3], #4
   bd4ee:	4291      	cmp	r1, r2
   bd4f0:	d1f9      	bne.n	bd4e6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bd4f2:	780a      	ldrb	r2, [r1, #0]
   bd4f4:	701a      	strb	r2, [r3, #0]
}
   bd4f6:	bd10      	pop	{r4, pc}
   bd4f8:	000c1c1c 	.word	0x000c1c1c

000bd4fc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bd4fc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bd4fe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bd502:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bd506:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bd50a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bd50e:	2304      	movs	r3, #4
   bd510:	6041      	str	r1, [r0, #4]
   bd512:	7503      	strb	r3, [r0, #20]
}
   bd514:	bd10      	pop	{r4, pc}
	...

000bd518 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bd518:	b507      	push	{r0, r1, r2, lr}
   bd51a:	4b06      	ldr	r3, [pc, #24]	; (bd534 <_ZN9IPAddressC1EPKh+0x1c>)
   bd51c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bd51e:	78cb      	ldrb	r3, [r1, #3]
   bd520:	9300      	str	r3, [sp, #0]
   bd522:	788b      	ldrb	r3, [r1, #2]
   bd524:	784a      	ldrb	r2, [r1, #1]
   bd526:	7809      	ldrb	r1, [r1, #0]
   bd528:	f7ff ffe8 	bl	bd4fc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bd52c:	b003      	add	sp, #12
   bd52e:	f85d fb04 	ldr.w	pc, [sp], #4
   bd532:	bf00      	nop
   bd534:	000c1c1c 	.word	0x000c1c1c

000bd538 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bd538:	7441      	strb	r1, [r0, #17]
}
   bd53a:	4770      	bx	lr

000bd53c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bd53c:	4770      	bx	lr

000bd53e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bd53e:	4770      	bx	lr

000bd540 <_ZN9USBSerial4readEv>:
{
   bd540:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bd542:	2100      	movs	r1, #0
   bd544:	7c00      	ldrb	r0, [r0, #16]
   bd546:	f7fc fbe1 	bl	b9d0c <HAL_USB_USART_Receive_Data>
}
   bd54a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bd54e:	bd08      	pop	{r3, pc}

000bd550 <_ZN9USBSerial4peekEv>:
{
   bd550:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bd552:	2101      	movs	r1, #1
   bd554:	7c00      	ldrb	r0, [r0, #16]
   bd556:	f7fc fbd9 	bl	b9d0c <HAL_USB_USART_Receive_Data>
}
   bd55a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bd55e:	bd08      	pop	{r3, pc}

000bd560 <_ZN9USBSerial17availableForWriteEv>:
{
   bd560:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bd562:	7c00      	ldrb	r0, [r0, #16]
   bd564:	f7fc fbca 	bl	b9cfc <HAL_USB_USART_Available_Data_For_Write>
}
   bd568:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bd56c:	bd08      	pop	{r3, pc}

000bd56e <_ZN9USBSerial9availableEv>:
{
   bd56e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bd570:	7c00      	ldrb	r0, [r0, #16]
   bd572:	f7fc fbbb 	bl	b9cec <HAL_USB_USART_Available_Data>
}
   bd576:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bd57a:	bd08      	pop	{r3, pc}

000bd57c <_ZN9USBSerial5writeEh>:
{
   bd57c:	b513      	push	{r0, r1, r4, lr}
   bd57e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bd580:	7c00      	ldrb	r0, [r0, #16]
{
   bd582:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bd584:	f7fc fbba 	bl	b9cfc <HAL_USB_USART_Available_Data_For_Write>
   bd588:	2800      	cmp	r0, #0
   bd58a:	9901      	ldr	r1, [sp, #4]
   bd58c:	dc01      	bgt.n	bd592 <_ZN9USBSerial5writeEh+0x16>
   bd58e:	7c60      	ldrb	r0, [r4, #17]
   bd590:	b120      	cbz	r0, bd59c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bd592:	7c20      	ldrb	r0, [r4, #16]
   bd594:	f7fc fbc2 	bl	b9d1c <HAL_USB_USART_Send_Data>
   bd598:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bd59c:	b002      	add	sp, #8
   bd59e:	bd10      	pop	{r4, pc}

000bd5a0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bd5a0:	7c00      	ldrb	r0, [r0, #16]
   bd5a2:	f7fc bbc3 	b.w	b9d2c <HAL_USB_USART_Flush_Data>

000bd5a6 <_ZN9USBSerialD0Ev>:
   bd5a6:	b510      	push	{r4, lr}
   bd5a8:	2114      	movs	r1, #20
   bd5aa:	4604      	mov	r4, r0
   bd5ac:	f7f6 fd77 	bl	b409e <_ZdlPvj>
   bd5b0:	4620      	mov	r0, r4
   bd5b2:	bd10      	pop	{r4, pc}

000bd5b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bd5b4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bd5b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bd5ba:	4604      	mov	r4, r0
   bd5bc:	4608      	mov	r0, r1
   bd5be:	2100      	movs	r1, #0
   bd5c0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bd5c4:	4b04      	ldr	r3, [pc, #16]	; (bd5d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bd5c6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bd5c8:	2301      	movs	r3, #1
  _serial = serial;
   bd5ca:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bd5cc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bd5ce:	4611      	mov	r1, r2
   bd5d0:	f7fc fb7c 	bl	b9ccc <HAL_USB_USART_Init>
}
   bd5d4:	4620      	mov	r0, r4
   bd5d6:	bd10      	pop	{r4, pc}
   bd5d8:	000c1c30 	.word	0x000c1c30

000bd5dc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bd5dc:	7c00      	ldrb	r0, [r0, #16]
   bd5de:	2200      	movs	r2, #0
   bd5e0:	f7fc bb7c 	b.w	b9cdc <HAL_USB_USART_Begin>

000bd5e4 <_Z19acquireSerialBufferv>:
{
   bd5e4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bd5e6:	2214      	movs	r2, #20
{
   bd5e8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bd5ea:	2100      	movs	r1, #0
   bd5ec:	f001 fa0f 	bl	bea0e <memset>
}
   bd5f0:	4620      	mov	r0, r4
   bd5f2:	bd10      	pop	{r4, pc}

000bd5f4 <_Z16_fetch_usbserialv>:
{
   bd5f4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bd5f6:	4c0f      	ldr	r4, [pc, #60]	; (bd634 <_Z16_fetch_usbserialv+0x40>)
{
   bd5f8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bd5fa:	a803      	add	r0, sp, #12
   bd5fc:	f7ff fff2 	bl	bd5e4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bd600:	7821      	ldrb	r1, [r4, #0]
   bd602:	f3bf 8f5b 	dmb	ish
   bd606:	f011 0101 	ands.w	r1, r1, #1
   bd60a:	d10f      	bne.n	bd62c <_Z16_fetch_usbserialv+0x38>
   bd60c:	4620      	mov	r0, r4
   bd60e:	9101      	str	r1, [sp, #4]
   bd610:	f7f6 fd54 	bl	b40bc <__cxa_guard_acquire>
   bd614:	9901      	ldr	r1, [sp, #4]
   bd616:	b148      	cbz	r0, bd62c <_Z16_fetch_usbserialv+0x38>
   bd618:	aa03      	add	r2, sp, #12
   bd61a:	4807      	ldr	r0, [pc, #28]	; (bd638 <_Z16_fetch_usbserialv+0x44>)
   bd61c:	f7ff ffca 	bl	bd5b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bd620:	4620      	mov	r0, r4
   bd622:	f7f6 fd50 	bl	b40c6 <__cxa_guard_release>
   bd626:	4805      	ldr	r0, [pc, #20]	; (bd63c <_Z16_fetch_usbserialv+0x48>)
   bd628:	f001 f9ac 	bl	be984 <atexit>
	return _usbserial;
}
   bd62c:	4802      	ldr	r0, [pc, #8]	; (bd638 <_Z16_fetch_usbserialv+0x44>)
   bd62e:	b008      	add	sp, #32
   bd630:	bd10      	pop	{r4, pc}
   bd632:	bf00      	nop
   bd634:	2003e6d8 	.word	0x2003e6d8
   bd638:	2003e6dc 	.word	0x2003e6dc
   bd63c:	000bd53d 	.word	0x000bd53d

000bd640 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bd640:	4700      	bx	r0
	...

000bd644 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bd644:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bd648:	2400      	movs	r4, #0
{
   bd64a:	461d      	mov	r5, r3
   bd64c:	460f      	mov	r7, r1
   bd64e:	4690      	mov	r8, r2
   bd650:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bd652:	f7fc f909 	bl	b9868 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bd656:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bd658:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bd65c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bd660:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bd664:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bd668:	bfa2      	ittt	ge
   bd66a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bd66e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bd672:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bd674:	4907      	ldr	r1, [pc, #28]	; (bd694 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bd676:	9400      	str	r4, [sp, #0]
   bd678:	4643      	mov	r3, r8
   bd67a:	463a      	mov	r2, r7
   bd67c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bd67e:	bfa8      	it	ge
   bd680:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bd684:	f7fc f8e8 	bl	b9858 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bd688:	fab0 f080 	clz	r0, r0
   bd68c:	0940      	lsrs	r0, r0, #5
   bd68e:	b004      	add	sp, #16
   bd690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd694:	000bd641 	.word	0x000bd641

000bd698 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bd698:	2200      	movs	r2, #0
   bd69a:	6840      	ldr	r0, [r0, #4]
   bd69c:	4611      	mov	r1, r2
   bd69e:	f7fc bbb9 	b.w	b9e14 <network_ready>

000bd6a2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bd6a2:	2200      	movs	r2, #0
   bd6a4:	6840      	ldr	r0, [r0, #4]
   bd6a6:	4611      	mov	r1, r2
   bd6a8:	f7fc bbd4 	b.w	b9e54 <network_listening>

000bd6ac <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bd6ac:	2200      	movs	r2, #0
   bd6ae:	6840      	ldr	r0, [r0, #4]
   bd6b0:	4611      	mov	r1, r2
   bd6b2:	f7fc bbdf 	b.w	b9e74 <network_get_listen_timeout>

000bd6b6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bd6b6:	6840      	ldr	r0, [r0, #4]
   bd6b8:	2200      	movs	r2, #0
   bd6ba:	f7fc bbd3 	b.w	b9e64 <network_set_listen_timeout>

000bd6be <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bd6be:	6840      	ldr	r0, [r0, #4]
   bd6c0:	2200      	movs	r2, #0
   bd6c2:	f081 0101 	eor.w	r1, r1, #1
   bd6c6:	f7fc bbbd 	b.w	b9e44 <network_listen>

000bd6ca <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bd6ca:	2300      	movs	r3, #0
   bd6cc:	6840      	ldr	r0, [r0, #4]
   bd6ce:	461a      	mov	r2, r3
   bd6d0:	4619      	mov	r1, r3
   bd6d2:	f7fc bbaf 	b.w	b9e34 <network_off>

000bd6d6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bd6d6:	2300      	movs	r3, #0
   bd6d8:	6840      	ldr	r0, [r0, #4]
   bd6da:	461a      	mov	r2, r3
   bd6dc:	4619      	mov	r1, r3
   bd6de:	f7fc bba1 	b.w	b9e24 <network_on>

000bd6e2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bd6e2:	2200      	movs	r2, #0
   bd6e4:	6840      	ldr	r0, [r0, #4]
   bd6e6:	4611      	mov	r1, r2
   bd6e8:	f7fc bb84 	b.w	b9df4 <network_connecting>

000bd6ec <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bd6ec:	6840      	ldr	r0, [r0, #4]
   bd6ee:	2200      	movs	r2, #0
   bd6f0:	2102      	movs	r1, #2
   bd6f2:	f7fc bb87 	b.w	b9e04 <network_disconnect>

000bd6f6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bd6f6:	2300      	movs	r3, #0
   bd6f8:	6840      	ldr	r0, [r0, #4]
   bd6fa:	461a      	mov	r2, r3
   bd6fc:	f7fc bb72 	b.w	b9de4 <network_connect>

000bd700 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bd700:	4b08      	ldr	r3, [pc, #32]	; (bd724 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bd702:	b510      	push	{r4, lr}
   bd704:	2428      	movs	r4, #40	; 0x28
   bd706:	4622      	mov	r2, r4
   bd708:	4618      	mov	r0, r3
   bd70a:	2100      	movs	r1, #0
   bd70c:	f001 f97f 	bl	bea0e <memset>
   bd710:	4b05      	ldr	r3, [pc, #20]	; (bd728 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bd712:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bd714:	f04f 32ff 	mov.w	r2, #4294967295
   bd718:	6042      	str	r2, [r0, #4]
   bd71a:	2204      	movs	r2, #4
   bd71c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bd71e:	4a03      	ldr	r2, [pc, #12]	; (bd72c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bd720:	601a      	str	r2, [r3, #0]
   bd722:	bd10      	pop	{r4, pc}
   bd724:	2003e6f8 	.word	0x2003e6f8
   bd728:	2003e6f0 	.word	0x2003e6f0
   bd72c:	000c1c60 	.word	0x000c1c60

000bd730 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bd730:	4770      	bx	lr

000bd732 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bd732:	7441      	strb	r1, [r0, #17]
}
   bd734:	4770      	bx	lr

000bd736 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bd736:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bd738:	7c00      	ldrb	r0, [r0, #16]
   bd73a:	f7fc fa07 	bl	b9b4c <hal_usart_available_data_for_write>
}
   bd73e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bd742:	bd08      	pop	{r3, pc}

000bd744 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bd744:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bd746:	7c00      	ldrb	r0, [r0, #16]
   bd748:	f7fc f9d8 	bl	b9afc <hal_usart_available>
}
   bd74c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bd750:	bd08      	pop	{r3, pc}

000bd752 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bd752:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bd754:	7c00      	ldrb	r0, [r0, #16]
   bd756:	f7fc f9e1 	bl	b9b1c <hal_usart_peek>
}
   bd75a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bd75e:	bd08      	pop	{r3, pc}

000bd760 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bd760:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bd762:	7c00      	ldrb	r0, [r0, #16]
   bd764:	f7fc f9d2 	bl	b9b0c <hal_usart_read>
}
   bd768:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bd76c:	bd08      	pop	{r3, pc}

000bd76e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bd76e:	7c00      	ldrb	r0, [r0, #16]
   bd770:	f7fc b9dc 	b.w	b9b2c <hal_usart_flush>

000bd774 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bd774:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bd776:	7c45      	ldrb	r5, [r0, #17]
{
   bd778:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bd77a:	b12d      	cbz	r5, bd788 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bd77c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bd77e:	b003      	add	sp, #12
   bd780:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bd784:	f7fc b9b2 	b.w	b9aec <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bd788:	7c00      	ldrb	r0, [r0, #16]
   bd78a:	9101      	str	r1, [sp, #4]
   bd78c:	f7fc f9de 	bl	b9b4c <hal_usart_available_data_for_write>
   bd790:	2800      	cmp	r0, #0
   bd792:	9901      	ldr	r1, [sp, #4]
   bd794:	dcf2      	bgt.n	bd77c <_ZN11USARTSerial5writeEh+0x8>
}
   bd796:	4628      	mov	r0, r5
   bd798:	b003      	add	sp, #12
   bd79a:	bd30      	pop	{r4, r5, pc}

000bd79c <_ZN11USARTSerialD0Ev>:
   bd79c:	b510      	push	{r4, lr}
   bd79e:	2114      	movs	r1, #20
   bd7a0:	4604      	mov	r4, r0
   bd7a2:	f7f6 fc7c 	bl	b409e <_ZdlPvj>
   bd7a6:	4620      	mov	r0, r4
   bd7a8:	bd10      	pop	{r4, pc}
	...

000bd7ac <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bd7ac:	b510      	push	{r4, lr}
   bd7ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bd7b2:	4604      	mov	r4, r0
   bd7b4:	4608      	mov	r0, r1
   bd7b6:	4611      	mov	r1, r2
   bd7b8:	2200      	movs	r2, #0
   bd7ba:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bd7be:	4b04      	ldr	r3, [pc, #16]	; (bd7d0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bd7c0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bd7c2:	2301      	movs	r3, #1
  _serial = serial;
   bd7c4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bd7c6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bd7c8:	f7fc f9d0 	bl	b9b6c <hal_usart_init_ex>
}
   bd7cc:	4620      	mov	r0, r4
   bd7ce:	bd10      	pop	{r4, pc}
   bd7d0:	000c1c9c 	.word	0x000c1c9c

000bd7d4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bd7d4:	7c00      	ldrb	r0, [r0, #16]
   bd7d6:	2300      	movs	r3, #0
   bd7d8:	f7fc b9c0 	b.w	b9b5c <hal_usart_begin_config>

000bd7dc <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bd7dc:	2200      	movs	r2, #0
   bd7de:	f7ff bff9 	b.w	bd7d4 <_ZN11USARTSerial5beginEmm>

000bd7e2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bd7e2:	b510      	push	{r4, lr}
      if (_M_empty())
   bd7e4:	6883      	ldr	r3, [r0, #8]
   bd7e6:	4604      	mov	r4, r0
   bd7e8:	b90b      	cbnz	r3, bd7ee <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bd7ea:	f000 fa40 	bl	bdc6e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd7ee:	68c3      	ldr	r3, [r0, #12]
   bd7f0:	4798      	blx	r3
      if (_M_manager)
   bd7f2:	68a3      	ldr	r3, [r4, #8]
   bd7f4:	b11b      	cbz	r3, bd7fe <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bd7f6:	2203      	movs	r2, #3
   bd7f8:	4621      	mov	r1, r4
   bd7fa:	4620      	mov	r0, r4
   bd7fc:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bd7fe:	4620      	mov	r0, r4
   bd800:	2110      	movs	r1, #16
}
   bd802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bd806:	f7f6 bc4a 	b.w	b409e <_ZdlPvj>

000bd80a <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bd80a:	4770      	bx	lr

000bd80c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bd80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd80e:	4606      	mov	r6, r0
   bd810:	4615      	mov	r5, r2
   bd812:	460c      	mov	r4, r1
   bd814:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bd816:	42bc      	cmp	r4, r7
   bd818:	d006      	beq.n	bd828 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bd81a:	6833      	ldr	r3, [r6, #0]
   bd81c:	f814 1b01 	ldrb.w	r1, [r4], #1
   bd820:	689b      	ldr	r3, [r3, #8]
   bd822:	4630      	mov	r0, r6
   bd824:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bd826:	e7f6      	b.n	bd816 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bd828:	4628      	mov	r0, r5
   bd82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bd82c <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bd82c:	7c00      	ldrb	r0, [r0, #16]
   bd82e:	2200      	movs	r2, #0
   bd830:	f7fc b9c4 	b.w	b9bbc <hal_i2c_write>

000bd834 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bd834:	7c00      	ldrb	r0, [r0, #16]
   bd836:	2100      	movs	r1, #0
   bd838:	f7fc b9c8 	b.w	b9bcc <hal_i2c_available>

000bd83c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bd83c:	7c00      	ldrb	r0, [r0, #16]
   bd83e:	2100      	movs	r1, #0
   bd840:	f7fc b9cc 	b.w	b9bdc <hal_i2c_read>

000bd844 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bd844:	7c00      	ldrb	r0, [r0, #16]
   bd846:	2100      	movs	r1, #0
   bd848:	f7fc b9d0 	b.w	b9bec <hal_i2c_peek>

000bd84c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bd84c:	7c00      	ldrb	r0, [r0, #16]
   bd84e:	2100      	movs	r1, #0
   bd850:	f7fc b9d4 	b.w	b9bfc <hal_i2c_flush>

000bd854 <_ZN7TwoWireD0Ev>:
   bd854:	b510      	push	{r4, lr}
   bd856:	2114      	movs	r1, #20
   bd858:	4604      	mov	r4, r0
   bd85a:	f7f6 fc20 	bl	b409e <_ZdlPvj>
   bd85e:	4620      	mov	r0, r4
   bd860:	bd10      	pop	{r4, pc}
	...

000bd864 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bd864:	b510      	push	{r4, lr}
   bd866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bd86a:	4604      	mov	r4, r0
   bd86c:	4608      	mov	r0, r1
   bd86e:	2100      	movs	r1, #0
   bd870:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bd874:	4b03      	ldr	r3, [pc, #12]	; (bd884 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bd876:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bd878:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bd87a:	4611      	mov	r1, r2
   bd87c:	f7fc f9ce 	bl	b9c1c <hal_i2c_init>
}
   bd880:	4620      	mov	r0, r4
   bd882:	bd10      	pop	{r4, pc}
   bd884:	000c1ccc 	.word	0x000c1ccc

000bd888 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bd888:	7c00      	ldrb	r0, [r0, #16]
   bd88a:	2200      	movs	r2, #0
   bd88c:	f7fc b976 	b.w	b9b7c <hal_i2c_set_speed>

000bd890 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bd890:	2300      	movs	r3, #0
   bd892:	7c00      	ldrb	r0, [r0, #16]
   bd894:	461a      	mov	r2, r3
   bd896:	4619      	mov	r1, r3
   bd898:	f7fc b978 	b.w	b9b8c <hal_i2c_begin>

000bd89c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bd89c:	7c00      	ldrb	r0, [r0, #16]
   bd89e:	2200      	movs	r2, #0
   bd8a0:	f7fc b97c 	b.w	b9b9c <hal_i2c_begin_transmission>

000bd8a4 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bd8a4:	7c00      	ldrb	r0, [r0, #16]
   bd8a6:	2200      	movs	r2, #0
   bd8a8:	f7fc b980 	b.w	b9bac <hal_i2c_end_transmission>

000bd8ac <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bd8ac:	2101      	movs	r1, #1
   bd8ae:	f7ff bff9 	b.w	bd8a4 <_ZN7TwoWire15endTransmissionEh>

000bd8b2 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bd8b2:	b510      	push	{r4, lr}
  if (0 == max) {
   bd8b4:	4604      	mov	r4, r0
   bd8b6:	b128      	cbz	r0, bd8c4 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bd8b8:	f001 f8e0 	bl	bea7c <rand>
   bd8bc:	fb90 f3f4 	sdiv	r3, r0, r4
   bd8c0:	fb03 0414 	mls	r4, r3, r4, r0
}
   bd8c4:	4620      	mov	r0, r4
   bd8c6:	bd10      	pop	{r4, pc}

000bd8c8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bd8c8:	2300      	movs	r3, #0
   bd8ca:	6840      	ldr	r0, [r0, #4]
   bd8cc:	461a      	mov	r2, r3
   bd8ce:	f7fc ba89 	b.w	b9de4 <network_connect>

000bd8d2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bd8d2:	6840      	ldr	r0, [r0, #4]
   bd8d4:	2200      	movs	r2, #0
   bd8d6:	2102      	movs	r1, #2
   bd8d8:	f7fc ba94 	b.w	b9e04 <network_disconnect>

000bd8dc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bd8dc:	2200      	movs	r2, #0
   bd8de:	6840      	ldr	r0, [r0, #4]
   bd8e0:	4611      	mov	r1, r2
   bd8e2:	f7fc ba87 	b.w	b9df4 <network_connecting>

000bd8e6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bd8e6:	2200      	movs	r2, #0
   bd8e8:	6840      	ldr	r0, [r0, #4]
   bd8ea:	4611      	mov	r1, r2
   bd8ec:	f7fc ba92 	b.w	b9e14 <network_ready>

000bd8f0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bd8f0:	2300      	movs	r3, #0
   bd8f2:	6840      	ldr	r0, [r0, #4]
   bd8f4:	461a      	mov	r2, r3
   bd8f6:	4619      	mov	r1, r3
   bd8f8:	f7fc ba94 	b.w	b9e24 <network_on>

000bd8fc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bd8fc:	2300      	movs	r3, #0
   bd8fe:	6840      	ldr	r0, [r0, #4]
   bd900:	461a      	mov	r2, r3
   bd902:	4619      	mov	r1, r3
   bd904:	f7fc ba96 	b.w	b9e34 <network_off>

000bd908 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bd908:	6840      	ldr	r0, [r0, #4]
   bd90a:	2100      	movs	r1, #0
   bd90c:	f7fc baba 	b.w	b9e84 <network_is_on>

000bd910 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bd910:	6840      	ldr	r0, [r0, #4]
   bd912:	2100      	movs	r1, #0
   bd914:	f7fc babe 	b.w	b9e94 <network_is_off>

000bd918 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bd918:	6840      	ldr	r0, [r0, #4]
   bd91a:	2200      	movs	r2, #0
   bd91c:	f081 0101 	eor.w	r1, r1, #1
   bd920:	f7fc ba90 	b.w	b9e44 <network_listen>

000bd924 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bd924:	6840      	ldr	r0, [r0, #4]
   bd926:	2200      	movs	r2, #0
   bd928:	f7fc ba9c 	b.w	b9e64 <network_set_listen_timeout>

000bd92c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bd92c:	2200      	movs	r2, #0
   bd92e:	6840      	ldr	r0, [r0, #4]
   bd930:	4611      	mov	r1, r2
   bd932:	f7fc ba9f 	b.w	b9e74 <network_get_listen_timeout>

000bd936 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bd936:	2200      	movs	r2, #0
   bd938:	6840      	ldr	r0, [r0, #4]
   bd93a:	4611      	mov	r1, r2
   bd93c:	f7fc ba8a 	b.w	b9e54 <network_listening>

000bd940 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bd940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd944:	b095      	sub	sp, #84	; 0x54
   bd946:	4614      	mov	r4, r2
   bd948:	460d      	mov	r5, r1
   bd94a:	4607      	mov	r7, r0
    IPAddress addr;
   bd94c:	f7ff fdb6 	bl	bd4bc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bd950:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bd952:	221c      	movs	r2, #28
   bd954:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bd956:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bd958:	f001 f859 	bl	bea0e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bd95c:	2340      	movs	r3, #64	; 0x40
   bd95e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bd960:	4620      	mov	r0, r4
   bd962:	466b      	mov	r3, sp
   bd964:	aa0c      	add	r2, sp, #48	; 0x30
   bd966:	2100      	movs	r1, #0
   bd968:	f7fb ff4e 	bl	b9808 <netdb_getaddrinfo>
    if (!r) {
   bd96c:	4604      	mov	r4, r0
   bd96e:	2800      	cmp	r0, #0
   bd970:	d14b      	bne.n	bda0a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bd972:	4602      	mov	r2, r0
   bd974:	2101      	movs	r1, #1
   bd976:	6868      	ldr	r0, [r5, #4]
   bd978:	f7fc fa4c 	bl	b9e14 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bd97c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bd97e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bd980:	4622      	mov	r2, r4
   bd982:	6868      	ldr	r0, [r5, #4]
   bd984:	f7fc fa46 	bl	b9e14 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bd988:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bd98a:	4681      	mov	r9, r0
        bool ok = false;
   bd98c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bd98e:	2e00      	cmp	r6, #0
   bd990:	d03b      	beq.n	bda0a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bd992:	2900      	cmp	r1, #0
   bd994:	d139      	bne.n	bda0a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bd996:	6873      	ldr	r3, [r6, #4]
   bd998:	2b02      	cmp	r3, #2
   bd99a:	d003      	beq.n	bd9a4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bd99c:	2b0a      	cmp	r3, #10
   bd99e:	d011      	beq.n	bd9c4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bd9a0:	69f6      	ldr	r6, [r6, #28]
   bd9a2:	e7f4      	b.n	bd98e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bd9a4:	f1b8 0f00 	cmp.w	r8, #0
   bd9a8:	d0fa      	beq.n	bd9a0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bd9aa:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bd9ac:	a806      	add	r0, sp, #24
   bd9ae:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bd9b0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bd9b2:	f7ff fdb1 	bl	bd518 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bd9b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd9b8:	1d3c      	adds	r4, r7, #4
   bd9ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd9bc:	682b      	ldr	r3, [r5, #0]
   bd9be:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bd9c0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bd9c2:	e7ed      	b.n	bd9a0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bd9c4:	f1b9 0f00 	cmp.w	r9, #0
   bd9c8:	d0ea      	beq.n	bd9a0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bd9ca:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bd9cc:	2210      	movs	r2, #16
   bd9ce:	a801      	add	r0, sp, #4
   bd9d0:	f001 f81d 	bl	bea0e <memset>
                    a.v = 6;
   bd9d4:	2306      	movs	r3, #6
   bd9d6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bd9da:	ad01      	add	r5, sp, #4
   bd9dc:	f104 0308 	add.w	r3, r4, #8
   bd9e0:	3418      	adds	r4, #24
   bd9e2:	6818      	ldr	r0, [r3, #0]
   bd9e4:	6859      	ldr	r1, [r3, #4]
   bd9e6:	462a      	mov	r2, r5
   bd9e8:	c203      	stmia	r2!, {r0, r1}
   bd9ea:	3308      	adds	r3, #8
   bd9ec:	42a3      	cmp	r3, r4
   bd9ee:	4615      	mov	r5, r2
   bd9f0:	d1f7      	bne.n	bd9e2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bd9f2:	a901      	add	r1, sp, #4
   bd9f4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bd9f6:	ad07      	add	r5, sp, #28
   bd9f8:	f7ff fd6e 	bl	bd4d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bd9fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd9fe:	1d3c      	adds	r4, r7, #4
   bda00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bda02:	682b      	ldr	r3, [r5, #0]
   bda04:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bda06:	4649      	mov	r1, r9
   bda08:	e7ca      	b.n	bd9a0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bda0a:	9800      	ldr	r0, [sp, #0]
   bda0c:	f7fb fef4 	bl	b97f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bda10:	4638      	mov	r0, r7
   bda12:	b015      	add	sp, #84	; 0x54
   bda14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bda18 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bda18:	4b02      	ldr	r3, [pc, #8]	; (bda24 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bda1a:	4a03      	ldr	r2, [pc, #12]	; (bda28 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bda1c:	601a      	str	r2, [r3, #0]
   bda1e:	2200      	movs	r2, #0
   bda20:	605a      	str	r2, [r3, #4]

} // spark
   bda22:	4770      	bx	lr
   bda24:	2003e720 	.word	0x2003e720
   bda28:	000c1cf4 	.word	0x000c1cf4

000bda2c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bda2c:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   bda2e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bda30:	d902      	bls.n	bda38 <pinAvailable+0xc>
    return false;
   bda32:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bda34:	b002      	add	sp, #8
   bda36:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bda38:	f1a0 030b 	sub.w	r3, r0, #11
   bda3c:	2b02      	cmp	r3, #2
   bda3e:	d81a      	bhi.n	bda76 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bda40:	4c17      	ldr	r4, [pc, #92]	; (bdaa0 <pinAvailable+0x74>)
   bda42:	7821      	ldrb	r1, [r4, #0]
   bda44:	f3bf 8f5b 	dmb	ish
   bda48:	f011 0101 	ands.w	r1, r1, #1
   bda4c:	d10b      	bne.n	bda66 <pinAvailable+0x3a>
   bda4e:	4620      	mov	r0, r4
   bda50:	9101      	str	r1, [sp, #4]
   bda52:	f7f6 fb33 	bl	b40bc <__cxa_guard_acquire>
   bda56:	9901      	ldr	r1, [sp, #4]
   bda58:	b128      	cbz	r0, bda66 <pinAvailable+0x3a>
   bda5a:	4812      	ldr	r0, [pc, #72]	; (bdaa4 <pinAvailable+0x78>)
   bda5c:	f7fc fb06 	bl	ba06c <_ZN8SPIClassC1E19hal_spi_interface_t>
   bda60:	4620      	mov	r0, r4
   bda62:	f7f6 fb30 	bl	b40c6 <__cxa_guard_release>
   bda66:	4b0f      	ldr	r3, [pc, #60]	; (bdaa4 <pinAvailable+0x78>)
   bda68:	7818      	ldrb	r0, [r3, #0]
   bda6a:	f7fc f8f7 	bl	b9c5c <hal_spi_is_enabled>
   bda6e:	2800      	cmp	r0, #0
   bda70:	d1df      	bne.n	bda32 <pinAvailable+0x6>
  return true; // 'pin' is available
   bda72:	2001      	movs	r0, #1
   bda74:	e7de      	b.n	bda34 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bda76:	2801      	cmp	r0, #1
   bda78:	d809      	bhi.n	bda8e <pinAvailable+0x62>
   bda7a:	f000 f8ad 	bl	bdbd8 <_Z19__fetch_global_Wirev>
   bda7e:	2100      	movs	r1, #0
   bda80:	7c00      	ldrb	r0, [r0, #16]
   bda82:	f7fc f8c3 	bl	b9c0c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bda86:	f080 0001 	eor.w	r0, r0, #1
   bda8a:	b2c0      	uxtb	r0, r0
   bda8c:	e7d2      	b.n	bda34 <pinAvailable+0x8>
   bda8e:	3809      	subs	r0, #9
   bda90:	2801      	cmp	r0, #1
   bda92:	d8ee      	bhi.n	bda72 <pinAvailable+0x46>
   bda94:	f000 f864 	bl	bdb60 <_Z22__fetch_global_Serial1v>
   bda98:	7c00      	ldrb	r0, [r0, #16]
   bda9a:	f7fc f84f 	bl	b9b3c <hal_usart_is_enabled>
   bda9e:	e7f2      	b.n	bda86 <pinAvailable+0x5a>
   bdaa0:	2003e638 	.word	0x2003e638
   bdaa4:	2003e63c 	.word	0x2003e63c

000bdaa8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bdaa8:	2825      	cmp	r0, #37	; 0x25
{
   bdaaa:	b538      	push	{r3, r4, r5, lr}
   bdaac:	4604      	mov	r4, r0
   bdaae:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bdab0:	d80a      	bhi.n	bdac8 <pinMode+0x20>
   bdab2:	29ff      	cmp	r1, #255	; 0xff
   bdab4:	d008      	beq.n	bdac8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bdab6:	f7ff ffb9 	bl	bda2c <pinAvailable>
   bdaba:	b128      	cbz	r0, bdac8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bdabc:	4629      	mov	r1, r5
   bdabe:	4620      	mov	r0, r4
}
   bdac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bdac4:	f7fb beb0 	b.w	b9828 <HAL_Pin_Mode>
}
   bdac8:	bd38      	pop	{r3, r4, r5, pc}

000bdaca <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bdaca:	b538      	push	{r3, r4, r5, lr}
   bdacc:	4604      	mov	r4, r0
   bdace:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bdad0:	f7fb feb2 	bl	b9838 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bdad4:	28ff      	cmp	r0, #255	; 0xff
   bdad6:	d010      	beq.n	bdafa <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bdad8:	2806      	cmp	r0, #6
   bdada:	d804      	bhi.n	bdae6 <digitalWrite+0x1c>
   bdadc:	234d      	movs	r3, #77	; 0x4d
   bdade:	fa23 f000 	lsr.w	r0, r3, r0
   bdae2:	07c3      	lsls	r3, r0, #31
   bdae4:	d409      	bmi.n	bdafa <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bdae6:	4620      	mov	r0, r4
   bdae8:	f7ff ffa0 	bl	bda2c <pinAvailable>
   bdaec:	b128      	cbz	r0, bdafa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bdaee:	4629      	mov	r1, r5
   bdaf0:	4620      	mov	r0, r4
}
   bdaf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bdaf6:	f7fb bea7 	b.w	b9848 <HAL_GPIO_Write>
}
   bdafa:	bd38      	pop	{r3, r4, r5, pc}

000bdafc <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bdafc:	280d      	cmp	r0, #13
{
   bdafe:	b510      	push	{r4, lr}
   bdb00:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bdb02:	bf9c      	itt	ls
   bdb04:	340e      	addls	r4, #14
   bdb06:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bdb08:	4620      	mov	r0, r4
   bdb0a:	f7ff ff8f 	bl	bda2c <pinAvailable>
   bdb0e:	b150      	cbz	r0, bdb26 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bdb10:	2103      	movs	r1, #3
   bdb12:	4620      	mov	r0, r4
   bdb14:	f7fb fe80 	bl	b9818 <HAL_Validate_Pin_Function>
   bdb18:	2803      	cmp	r0, #3
   bdb1a:	d104      	bne.n	bdb26 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bdb1c:	4620      	mov	r0, r4
}
   bdb1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bdb22:	f7fb bea9 	b.w	b9878 <hal_adc_read>
}
   bdb26:	2000      	movs	r0, #0
   bdb28:	bd10      	pop	{r4, pc}

000bdb2a <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bdb2a:	4770      	bx	lr

000bdb2c <_Z20acquireSerial1Bufferv>:
{
   bdb2c:	b538      	push	{r3, r4, r5, lr}
   bdb2e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bdb30:	2514      	movs	r5, #20
   bdb32:	462a      	mov	r2, r5
   bdb34:	2100      	movs	r1, #0
   bdb36:	f000 ff6a 	bl	bea0e <memset>
   bdb3a:	8025      	strh	r5, [r4, #0]
   bdb3c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bdb3e:	4907      	ldr	r1, [pc, #28]	; (bdb5c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bdb40:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bdb42:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bdb44:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bdb46:	f000 f86b 	bl	bdc20 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bdb4a:	4904      	ldr	r1, [pc, #16]	; (bdb5c <_Z20acquireSerial1Bufferv+0x30>)
    };
   bdb4c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bdb4e:	4628      	mov	r0, r5
   bdb50:	f000 f866 	bl	bdc20 <_ZnajRKSt9nothrow_t>
    };
   bdb54:	60e0      	str	r0, [r4, #12]
}
   bdb56:	4620      	mov	r0, r4
   bdb58:	bd38      	pop	{r3, r4, r5, pc}
   bdb5a:	bf00      	nop
   bdb5c:	000c1d28 	.word	0x000c1d28

000bdb60 <_Z22__fetch_global_Serial1v>:
{
   bdb60:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bdb62:	4d0e      	ldr	r5, [pc, #56]	; (bdb9c <_Z22__fetch_global_Serial1v+0x3c>)
   bdb64:	7829      	ldrb	r1, [r5, #0]
   bdb66:	f3bf 8f5b 	dmb	ish
   bdb6a:	f011 0401 	ands.w	r4, r1, #1
{
   bdb6e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bdb70:	d111      	bne.n	bdb96 <_Z22__fetch_global_Serial1v+0x36>
   bdb72:	4628      	mov	r0, r5
   bdb74:	f7f6 faa2 	bl	b40bc <__cxa_guard_acquire>
   bdb78:	b168      	cbz	r0, bdb96 <_Z22__fetch_global_Serial1v+0x36>
   bdb7a:	a801      	add	r0, sp, #4
   bdb7c:	f7ff ffd6 	bl	bdb2c <_Z20acquireSerial1Bufferv>
   bdb80:	aa01      	add	r2, sp, #4
   bdb82:	4621      	mov	r1, r4
   bdb84:	4806      	ldr	r0, [pc, #24]	; (bdba0 <_Z22__fetch_global_Serial1v+0x40>)
   bdb86:	f7ff fe11 	bl	bd7ac <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bdb8a:	4628      	mov	r0, r5
   bdb8c:	f7f6 fa9b 	bl	b40c6 <__cxa_guard_release>
   bdb90:	4804      	ldr	r0, [pc, #16]	; (bdba4 <_Z22__fetch_global_Serial1v+0x44>)
   bdb92:	f000 fef7 	bl	be984 <atexit>
    return serial1;
}
   bdb96:	4802      	ldr	r0, [pc, #8]	; (bdba0 <_Z22__fetch_global_Serial1v+0x40>)
   bdb98:	b007      	add	sp, #28
   bdb9a:	bd30      	pop	{r4, r5, pc}
   bdb9c:	2003e728 	.word	0x2003e728
   bdba0:	2003e72c 	.word	0x2003e72c
   bdba4:	000bdb2b 	.word	0x000bdb2b

000bdba8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bdba8:	4770      	bx	lr
	...

000bdbac <_Z17acquireWireBufferv>:
{
   bdbac:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bdbae:	2520      	movs	r5, #32
   bdbb0:	2314      	movs	r3, #20
{
   bdbb2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bdbb4:	6003      	str	r3, [r0, #0]
   bdbb6:	6085      	str	r5, [r0, #8]
   bdbb8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bdbba:	4906      	ldr	r1, [pc, #24]	; (bdbd4 <_Z17acquireWireBufferv+0x28>)
   bdbbc:	4628      	mov	r0, r5
   bdbbe:	f000 f82f 	bl	bdc20 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bdbc2:	4904      	ldr	r1, [pc, #16]	; (bdbd4 <_Z17acquireWireBufferv+0x28>)
	};
   bdbc4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bdbc6:	4628      	mov	r0, r5
   bdbc8:	f000 f82a 	bl	bdc20 <_ZnajRKSt9nothrow_t>
	};
   bdbcc:	60e0      	str	r0, [r4, #12]
}
   bdbce:	4620      	mov	r0, r4
   bdbd0:	bd38      	pop	{r3, r4, r5, pc}
   bdbd2:	bf00      	nop
   bdbd4:	000c1d28 	.word	0x000c1d28

000bdbd8 <_Z19__fetch_global_Wirev>:
{
   bdbd8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bdbda:	4d0e      	ldr	r5, [pc, #56]	; (bdc14 <_Z19__fetch_global_Wirev+0x3c>)
   bdbdc:	7829      	ldrb	r1, [r5, #0]
   bdbde:	f3bf 8f5b 	dmb	ish
   bdbe2:	f011 0401 	ands.w	r4, r1, #1
{
   bdbe6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bdbe8:	d111      	bne.n	bdc0e <_Z19__fetch_global_Wirev+0x36>
   bdbea:	4628      	mov	r0, r5
   bdbec:	f7f6 fa66 	bl	b40bc <__cxa_guard_acquire>
   bdbf0:	b168      	cbz	r0, bdc0e <_Z19__fetch_global_Wirev+0x36>
   bdbf2:	a801      	add	r0, sp, #4
   bdbf4:	f7ff ffda 	bl	bdbac <_Z17acquireWireBufferv>
   bdbf8:	aa01      	add	r2, sp, #4
   bdbfa:	4621      	mov	r1, r4
   bdbfc:	4806      	ldr	r0, [pc, #24]	; (bdc18 <_Z19__fetch_global_Wirev+0x40>)
   bdbfe:	f7ff fe31 	bl	bd864 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bdc02:	4628      	mov	r0, r5
   bdc04:	f7f6 fa5f 	bl	b40c6 <__cxa_guard_release>
   bdc08:	4804      	ldr	r0, [pc, #16]	; (bdc1c <_Z19__fetch_global_Wirev+0x44>)
   bdc0a:	f000 febb 	bl	be984 <atexit>
	return wire;
}
   bdc0e:	4802      	ldr	r0, [pc, #8]	; (bdc18 <_Z19__fetch_global_Wirev+0x40>)
   bdc10:	b007      	add	sp, #28
   bdc12:	bd30      	pop	{r4, r5, pc}
   bdc14:	2003e744 	.word	0x2003e744
   bdc18:	2003e748 	.word	0x2003e748
   bdc1c:	000bdba9 	.word	0x000bdba9

000bdc20 <_ZnajRKSt9nothrow_t>:
   bdc20:	f7f6 ba3b 	b.w	b409a <_Znaj>

000bdc24 <_ZSt17__throw_bad_allocv>:
   bdc24:	b508      	push	{r3, lr}
   bdc26:	f7fc f9ad 	bl	b9f84 <abort>

000bdc2a <_ZSt19__throw_logic_errorPKc>:
   bdc2a:	b508      	push	{r3, lr}
   bdc2c:	f7fc f9aa 	bl	b9f84 <abort>

000bdc30 <_ZSt20__throw_length_errorPKc>:
   bdc30:	b508      	push	{r3, lr}
   bdc32:	f7fc f9a7 	bl	b9f84 <abort>

000bdc36 <_ZSt24__throw_out_of_range_fmtPKcz>:
   bdc36:	b40f      	push	{r0, r1, r2, r3}
   bdc38:	b580      	push	{r7, lr}
   bdc3a:	b084      	sub	sp, #16
   bdc3c:	af00      	add	r7, sp, #0
   bdc3e:	f107 0418 	add.w	r4, r7, #24
   bdc42:	f854 2b04 	ldr.w	r2, [r4], #4
   bdc46:	607a      	str	r2, [r7, #4]
   bdc48:	4610      	mov	r0, r2
   bdc4a:	f000 ff94 	bl	beb76 <strlen>
   bdc4e:	f200 2307 	addw	r3, r0, #519	; 0x207
   bdc52:	f023 0307 	bic.w	r3, r3, #7
   bdc56:	ebad 0d03 	sub.w	sp, sp, r3
   bdc5a:	f500 7100 	add.w	r1, r0, #512	; 0x200
   bdc5e:	687a      	ldr	r2, [r7, #4]
   bdc60:	60fc      	str	r4, [r7, #12]
   bdc62:	4623      	mov	r3, r4
   bdc64:	4668      	mov	r0, sp
   bdc66:	f000 f85d 	bl	bdd24 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   bdc6a:	f7fc f98b 	bl	b9f84 <abort>

000bdc6e <_ZSt25__throw_bad_function_callv>:
   bdc6e:	b508      	push	{r3, lr}
   bdc70:	f7fc f988 	bl	b9f84 <abort>

000bdc74 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bdc74:	4901      	ldr	r1, [pc, #4]	; (bdc7c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bdc76:	f000 b98b 	b.w	bdf90 <_ZNKSt9type_infoeqERKS_>
   bdc7a:	bf00      	nop
   bdc7c:	000c1d44 	.word	0x000c1d44

000bdc80 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   bdc80:	b580      	push	{r7, lr}
   bdc82:	b09c      	sub	sp, #112	; 0x70
   bdc84:	4606      	mov	r6, r0
   bdc86:	af00      	add	r7, sp, #0
   bdc88:	460c      	mov	r4, r1
   bdc8a:	1ba4      	subs	r4, r4, r6
   bdc8c:	490e      	ldr	r1, [pc, #56]	; (bdcc8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   bdc8e:	2269      	movs	r2, #105	; 0x69
   bdc90:	1d38      	adds	r0, r7, #4
   bdc92:	f000 fe94 	bl	be9be <memcpy>
   bdc96:	f104 0370 	add.w	r3, r4, #112	; 0x70
   bdc9a:	f023 0307 	bic.w	r3, r3, #7
   bdc9e:	ebad 0d03 	sub.w	sp, sp, r3
   bdca2:	466d      	mov	r5, sp
   bdca4:	2268      	movs	r2, #104	; 0x68
   bdca6:	1d39      	adds	r1, r7, #4
   bdca8:	4628      	mov	r0, r5
   bdcaa:	f000 fe88 	bl	be9be <memcpy>
   bdcae:	4622      	mov	r2, r4
   bdcb0:	4631      	mov	r1, r6
   bdcb2:	f105 0068 	add.w	r0, r5, #104	; 0x68
   bdcb6:	442c      	add	r4, r5
   bdcb8:	f000 fe81 	bl	be9be <memcpy>
   bdcbc:	2300      	movs	r3, #0
   bdcbe:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   bdcc2:	4628      	mov	r0, r5
   bdcc4:	f7ff ffb1 	bl	bdc2a <_ZSt19__throw_logic_errorPKc>
   bdcc8:	000c1d4c 	.word	0x000c1d4c

000bdccc <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   bdccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bdcd0:	af00      	add	r7, sp, #0
   bdcd2:	b084      	sub	sp, #16
   bdcd4:	466d      	mov	r5, sp
   bdcd6:	f105 040c 	add.w	r4, r5, #12
   bdcda:	f8df 8044 	ldr.w	r8, [pc, #68]	; bdd20 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   bdcde:	4623      	mov	r3, r4
   bdce0:	f04f 0c0a 	mov.w	ip, #10
   bdce4:	fbb2 f6fc 	udiv	r6, r2, ip
   bdce8:	fb0c 2e16 	mls	lr, ip, r6, r2
   bdcec:	f818 e00e 	ldrb.w	lr, [r8, lr]
   bdcf0:	f803 ed01 	strb.w	lr, [r3, #-1]!
   bdcf4:	4696      	mov	lr, r2
   bdcf6:	f1be 0f09 	cmp.w	lr, #9
   bdcfa:	4632      	mov	r2, r6
   bdcfc:	d8f2      	bhi.n	bdce4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   bdcfe:	1ae4      	subs	r4, r4, r3
   bdd00:	428c      	cmp	r4, r1
   bdd02:	d809      	bhi.n	bdd18 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   bdd04:	f1c4 030c 	rsb	r3, r4, #12
   bdd08:	4622      	mov	r2, r4
   bdd0a:	18e9      	adds	r1, r5, r3
   bdd0c:	f000 fe57 	bl	be9be <memcpy>
   bdd10:	4620      	mov	r0, r4
   bdd12:	46bd      	mov	sp, r7
   bdd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bdd18:	f04f 34ff 	mov.w	r4, #4294967295
   bdd1c:	e7f8      	b.n	bdd10 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   bdd1e:	bf00      	nop
   bdd20:	000c1db5 	.word	0x000c1db5

000bdd24 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   bdd24:	3901      	subs	r1, #1
   bdd26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bdd2a:	4607      	mov	r7, r0
   bdd2c:	4615      	mov	r5, r2
   bdd2e:	eb00 0801 	add.w	r8, r0, r1
   bdd32:	4604      	mov	r4, r0
   bdd34:	782a      	ldrb	r2, [r5, #0]
   bdd36:	b392      	cbz	r2, bdd9e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   bdd38:	4544      	cmp	r4, r8
   bdd3a:	d22a      	bcs.n	bdd92 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bdd3c:	2a25      	cmp	r2, #37	; 0x25
   bdd3e:	d107      	bne.n	bdd50 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bdd40:	786a      	ldrb	r2, [r5, #1]
   bdd42:	2a73      	cmp	r2, #115	; 0x73
   bdd44:	d009      	beq.n	bdd5a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   bdd46:	2a7a      	cmp	r2, #122	; 0x7a
   bdd48:	d012      	beq.n	bdd70 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   bdd4a:	2a25      	cmp	r2, #37	; 0x25
   bdd4c:	d100      	bne.n	bdd50 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bdd4e:	3501      	adds	r5, #1
   bdd50:	f815 2b01 	ldrb.w	r2, [r5], #1
   bdd54:	f804 2b01 	strb.w	r2, [r4], #1
   bdd58:	e7ec      	b.n	bdd34 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bdd5a:	f853 2b04 	ldr.w	r2, [r3], #4
   bdd5e:	3a01      	subs	r2, #1
   bdd60:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   bdd64:	b1c9      	cbz	r1, bdd9a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   bdd66:	4544      	cmp	r4, r8
   bdd68:	d013      	beq.n	bdd92 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bdd6a:	f804 1b01 	strb.w	r1, [r4], #1
   bdd6e:	e7f7      	b.n	bdd60 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   bdd70:	78aa      	ldrb	r2, [r5, #2]
   bdd72:	2a75      	cmp	r2, #117	; 0x75
   bdd74:	d1ec      	bne.n	bdd50 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bdd76:	461e      	mov	r6, r3
   bdd78:	eba8 0104 	sub.w	r1, r8, r4
   bdd7c:	f856 2b04 	ldr.w	r2, [r6], #4
   bdd80:	4620      	mov	r0, r4
   bdd82:	f7ff ffa3 	bl	bdccc <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   bdd86:	2800      	cmp	r0, #0
   bdd88:	dd03      	ble.n	bdd92 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bdd8a:	4404      	add	r4, r0
   bdd8c:	3503      	adds	r5, #3
   bdd8e:	4633      	mov	r3, r6
   bdd90:	e7d0      	b.n	bdd34 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bdd92:	4621      	mov	r1, r4
   bdd94:	4638      	mov	r0, r7
   bdd96:	f7ff ff73 	bl	bdc80 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   bdd9a:	3502      	adds	r5, #2
   bdd9c:	e7ca      	b.n	bdd34 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bdd9e:	7022      	strb	r2, [r4, #0]
   bdda0:	1be0      	subs	r0, r4, r7
   bdda2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bdda6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bdda6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bdda8:	2400      	movs	r4, #0
   bddaa:	2310      	movs	r3, #16
   bddac:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bddb0:	6803      	ldr	r3, [r0, #0]
   bddb2:	4615      	mov	r5, r2
   bddb4:	699e      	ldr	r6, [r3, #24]
   bddb6:	6812      	ldr	r2, [r2, #0]
   bddb8:	466b      	mov	r3, sp
   bddba:	e9cd 4400 	strd	r4, r4, [sp]
   bddbe:	47b0      	blx	r6
   bddc0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bddc4:	f003 0306 	and.w	r3, r3, #6
   bddc8:	2b06      	cmp	r3, #6
   bddca:	bf03      	ittte	eq
   bddcc:	9b00      	ldreq	r3, [sp, #0]
   bddce:	602b      	streq	r3, [r5, #0]
   bddd0:	2001      	moveq	r0, #1
   bddd2:	4620      	movne	r0, r4
   bddd4:	b004      	add	sp, #16
   bddd6:	bd70      	pop	{r4, r5, r6, pc}

000bddd8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bddd8:	9800      	ldr	r0, [sp, #0]
   bddda:	4290      	cmp	r0, r2
   bdddc:	bf14      	ite	ne
   bddde:	2001      	movne	r0, #1
   bdde0:	2006      	moveq	r0, #6
   bdde2:	4770      	bx	lr

000bdde4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bdde4:	b510      	push	{r4, lr}
   bdde6:	4b03      	ldr	r3, [pc, #12]	; (bddf4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bdde8:	6003      	str	r3, [r0, #0]
   bddea:	4604      	mov	r4, r0
   bddec:	f000 f8cd 	bl	bdf8a <_ZNSt9type_infoD1Ev>
   bddf0:	4620      	mov	r0, r4
   bddf2:	bd10      	pop	{r4, pc}
   bddf4:	000c1df8 	.word	0x000c1df8

000bddf8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bddf8:	b510      	push	{r4, lr}
   bddfa:	4604      	mov	r4, r0
   bddfc:	f7ff fff2 	bl	bdde4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bde00:	4620      	mov	r0, r4
   bde02:	2108      	movs	r1, #8
   bde04:	f7f6 f94b 	bl	b409e <_ZdlPvj>
   bde08:	4620      	mov	r0, r4
   bde0a:	bd10      	pop	{r4, pc}

000bde0c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bde0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bde10:	461f      	mov	r7, r3
   bde12:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bde16:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bde1a:	4598      	cmp	r8, r3
   bde1c:	4606      	mov	r6, r0
   bde1e:	4615      	mov	r5, r2
   bde20:	d107      	bne.n	bde32 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bde22:	9907      	ldr	r1, [sp, #28]
   bde24:	f000 f8b4 	bl	bdf90 <_ZNKSt9type_infoeqERKS_>
   bde28:	b118      	cbz	r0, bde32 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bde2a:	7165      	strb	r5, [r4, #5]
   bde2c:	2000      	movs	r0, #0
   bde2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bde32:	4639      	mov	r1, r7
   bde34:	4630      	mov	r0, r6
   bde36:	f000 f8ab 	bl	bdf90 <_ZNKSt9type_infoeqERKS_>
   bde3a:	2800      	cmp	r0, #0
   bde3c:	d0f6      	beq.n	bde2c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bde3e:	2301      	movs	r3, #1
   bde40:	f8c4 8000 	str.w	r8, [r4]
   bde44:	7125      	strb	r5, [r4, #4]
   bde46:	71a3      	strb	r3, [r4, #6]
   bde48:	e7f0      	b.n	bde2c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bde4a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bde4a:	b538      	push	{r3, r4, r5, lr}
   bde4c:	4615      	mov	r5, r2
   bde4e:	461c      	mov	r4, r3
   bde50:	f000 f89e 	bl	bdf90 <_ZNKSt9type_infoeqERKS_>
   bde54:	b120      	cbz	r0, bde60 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bde56:	2308      	movs	r3, #8
   bde58:	60e3      	str	r3, [r4, #12]
   bde5a:	2306      	movs	r3, #6
   bde5c:	6025      	str	r5, [r4, #0]
   bde5e:	7123      	strb	r3, [r4, #4]
   bde60:	bd38      	pop	{r3, r4, r5, pc}

000bde62 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bde62:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bde64:	4605      	mov	r5, r0
   bde66:	460c      	mov	r4, r1
   bde68:	9201      	str	r2, [sp, #4]
   bde6a:	461e      	mov	r6, r3
   bde6c:	f000 f890 	bl	bdf90 <_ZNKSt9type_infoeqERKS_>
   bde70:	b950      	cbnz	r0, bde88 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bde72:	2e03      	cmp	r6, #3
   bde74:	d808      	bhi.n	bde88 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bde76:	6823      	ldr	r3, [r4, #0]
   bde78:	9a01      	ldr	r2, [sp, #4]
   bde7a:	695b      	ldr	r3, [r3, #20]
   bde7c:	4629      	mov	r1, r5
   bde7e:	4620      	mov	r0, r4
   bde80:	b002      	add	sp, #8
   bde82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bde86:	4718      	bx	r3
   bde88:	b002      	add	sp, #8
   bde8a:	bd70      	pop	{r4, r5, r6, pc}

000bde8c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bde8c:	b510      	push	{r4, lr}
   bde8e:	4b03      	ldr	r3, [pc, #12]	; (bde9c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bde90:	6003      	str	r3, [r0, #0]
   bde92:	4604      	mov	r4, r0
   bde94:	f7ff ffa6 	bl	bdde4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bde98:	4620      	mov	r0, r4
   bde9a:	bd10      	pop	{r4, pc}
   bde9c:	000c1e58 	.word	0x000c1e58

000bdea0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bdea0:	b510      	push	{r4, lr}
   bdea2:	4604      	mov	r4, r0
   bdea4:	f7ff fff2 	bl	bde8c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bdea8:	4620      	mov	r0, r4
   bdeaa:	210c      	movs	r1, #12
   bdeac:	f7f6 f8f7 	bl	b409e <_ZdlPvj>
   bdeb0:	4620      	mov	r0, r4
   bdeb2:	bd10      	pop	{r4, pc}

000bdeb4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bdeb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bdeb6:	9f08      	ldr	r7, [sp, #32]
   bdeb8:	4297      	cmp	r7, r2
   bdeba:	4605      	mov	r5, r0
   bdebc:	460e      	mov	r6, r1
   bdebe:	4614      	mov	r4, r2
   bdec0:	d00a      	beq.n	bded8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bdec2:	68a8      	ldr	r0, [r5, #8]
   bdec4:	6802      	ldr	r2, [r0, #0]
   bdec6:	9708      	str	r7, [sp, #32]
   bdec8:	6a15      	ldr	r5, [r2, #32]
   bdeca:	4631      	mov	r1, r6
   bdecc:	4622      	mov	r2, r4
   bdece:	46ac      	mov	ip, r5
   bded0:	b003      	add	sp, #12
   bded2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bded6:	4760      	bx	ip
   bded8:	4619      	mov	r1, r3
   bdeda:	9301      	str	r3, [sp, #4]
   bdedc:	f000 f858 	bl	bdf90 <_ZNKSt9type_infoeqERKS_>
   bdee0:	9b01      	ldr	r3, [sp, #4]
   bdee2:	2800      	cmp	r0, #0
   bdee4:	d0ed      	beq.n	bdec2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bdee6:	2006      	movs	r0, #6
   bdee8:	b003      	add	sp, #12
   bdeea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bdeec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bdeec:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdef0:	460d      	mov	r5, r1
   bdef2:	4619      	mov	r1, r3
   bdef4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bdef8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bdefc:	4681      	mov	r9, r0
   bdefe:	4617      	mov	r7, r2
   bdf00:	4698      	mov	r8, r3
   bdf02:	f000 f845 	bl	bdf90 <_ZNKSt9type_infoeqERKS_>
   bdf06:	b190      	cbz	r0, bdf2e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bdf08:	2d00      	cmp	r5, #0
   bdf0a:	6034      	str	r4, [r6, #0]
   bdf0c:	7137      	strb	r7, [r6, #4]
   bdf0e:	db09      	blt.n	bdf24 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bdf10:	1961      	adds	r1, r4, r5
   bdf12:	458a      	cmp	sl, r1
   bdf14:	bf0c      	ite	eq
   bdf16:	2106      	moveq	r1, #6
   bdf18:	2101      	movne	r1, #1
   bdf1a:	71b1      	strb	r1, [r6, #6]
   bdf1c:	2000      	movs	r0, #0
   bdf1e:	b001      	add	sp, #4
   bdf20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bdf24:	3502      	adds	r5, #2
   bdf26:	d1f9      	bne.n	bdf1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bdf28:	2301      	movs	r3, #1
   bdf2a:	71b3      	strb	r3, [r6, #6]
   bdf2c:	e7f6      	b.n	bdf1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bdf2e:	4554      	cmp	r4, sl
   bdf30:	d106      	bne.n	bdf40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bdf32:	4659      	mov	r1, fp
   bdf34:	4648      	mov	r0, r9
   bdf36:	f000 f82b 	bl	bdf90 <_ZNKSt9type_infoeqERKS_>
   bdf3a:	b108      	cbz	r0, bdf40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bdf3c:	7177      	strb	r7, [r6, #5]
   bdf3e:	e7ed      	b.n	bdf1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bdf40:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bdf44:	6803      	ldr	r3, [r0, #0]
   bdf46:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bdf4a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bdf4e:	69dc      	ldr	r4, [r3, #28]
   bdf50:	463a      	mov	r2, r7
   bdf52:	4643      	mov	r3, r8
   bdf54:	4629      	mov	r1, r5
   bdf56:	46a4      	mov	ip, r4
   bdf58:	b001      	add	sp, #4
   bdf5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdf5e:	4760      	bx	ip

000bdf60 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bdf60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bdf64:	4607      	mov	r7, r0
   bdf66:	460c      	mov	r4, r1
   bdf68:	4615      	mov	r5, r2
   bdf6a:	461e      	mov	r6, r3
   bdf6c:	f7ff ff6d 	bl	bde4a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bdf70:	b948      	cbnz	r0, bdf86 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bdf72:	68b8      	ldr	r0, [r7, #8]
   bdf74:	6803      	ldr	r3, [r0, #0]
   bdf76:	699f      	ldr	r7, [r3, #24]
   bdf78:	462a      	mov	r2, r5
   bdf7a:	4633      	mov	r3, r6
   bdf7c:	4621      	mov	r1, r4
   bdf7e:	46bc      	mov	ip, r7
   bdf80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bdf84:	4760      	bx	ip
   bdf86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bdf8a <_ZNSt9type_infoD1Ev>:
   bdf8a:	4770      	bx	lr

000bdf8c <_ZNKSt9type_info14__is_pointer_pEv>:
   bdf8c:	2000      	movs	r0, #0
   bdf8e:	4770      	bx	lr

000bdf90 <_ZNKSt9type_infoeqERKS_>:
   bdf90:	4281      	cmp	r1, r0
   bdf92:	b508      	push	{r3, lr}
   bdf94:	d00e      	beq.n	bdfb4 <_ZNKSt9type_infoeqERKS_+0x24>
   bdf96:	6840      	ldr	r0, [r0, #4]
   bdf98:	7803      	ldrb	r3, [r0, #0]
   bdf9a:	2b2a      	cmp	r3, #42	; 0x2a
   bdf9c:	d00c      	beq.n	bdfb8 <_ZNKSt9type_infoeqERKS_+0x28>
   bdf9e:	6849      	ldr	r1, [r1, #4]
   bdfa0:	780b      	ldrb	r3, [r1, #0]
   bdfa2:	2b2a      	cmp	r3, #42	; 0x2a
   bdfa4:	bf08      	it	eq
   bdfa6:	3101      	addeq	r1, #1
   bdfa8:	f000 fdb5 	bl	beb16 <strcmp>
   bdfac:	fab0 f080 	clz	r0, r0
   bdfb0:	0940      	lsrs	r0, r0, #5
   bdfb2:	bd08      	pop	{r3, pc}
   bdfb4:	2001      	movs	r0, #1
   bdfb6:	e7fc      	b.n	bdfb2 <_ZNKSt9type_infoeqERKS_+0x22>
   bdfb8:	2000      	movs	r0, #0
   bdfba:	e7fa      	b.n	bdfb2 <_ZNKSt9type_infoeqERKS_+0x22>

000bdfbc <__aeabi_drsub>:
   bdfbc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bdfc0:	e002      	b.n	bdfc8 <__adddf3>
   bdfc2:	bf00      	nop

000bdfc4 <__aeabi_dsub>:
   bdfc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bdfc8 <__adddf3>:
   bdfc8:	b530      	push	{r4, r5, lr}
   bdfca:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bdfce:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bdfd2:	ea94 0f05 	teq	r4, r5
   bdfd6:	bf08      	it	eq
   bdfd8:	ea90 0f02 	teqeq	r0, r2
   bdfdc:	bf1f      	itttt	ne
   bdfde:	ea54 0c00 	orrsne.w	ip, r4, r0
   bdfe2:	ea55 0c02 	orrsne.w	ip, r5, r2
   bdfe6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bdfea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bdfee:	f000 80e2 	beq.w	be1b6 <__adddf3+0x1ee>
   bdff2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bdff6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bdffa:	bfb8      	it	lt
   bdffc:	426d      	neglt	r5, r5
   bdffe:	dd0c      	ble.n	be01a <__adddf3+0x52>
   be000:	442c      	add	r4, r5
   be002:	ea80 0202 	eor.w	r2, r0, r2
   be006:	ea81 0303 	eor.w	r3, r1, r3
   be00a:	ea82 0000 	eor.w	r0, r2, r0
   be00e:	ea83 0101 	eor.w	r1, r3, r1
   be012:	ea80 0202 	eor.w	r2, r0, r2
   be016:	ea81 0303 	eor.w	r3, r1, r3
   be01a:	2d36      	cmp	r5, #54	; 0x36
   be01c:	bf88      	it	hi
   be01e:	bd30      	pophi	{r4, r5, pc}
   be020:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   be024:	ea4f 3101 	mov.w	r1, r1, lsl #12
   be028:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   be02c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   be030:	d002      	beq.n	be038 <__adddf3+0x70>
   be032:	4240      	negs	r0, r0
   be034:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be038:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   be03c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   be040:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   be044:	d002      	beq.n	be04c <__adddf3+0x84>
   be046:	4252      	negs	r2, r2
   be048:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   be04c:	ea94 0f05 	teq	r4, r5
   be050:	f000 80a7 	beq.w	be1a2 <__adddf3+0x1da>
   be054:	f1a4 0401 	sub.w	r4, r4, #1
   be058:	f1d5 0e20 	rsbs	lr, r5, #32
   be05c:	db0d      	blt.n	be07a <__adddf3+0xb2>
   be05e:	fa02 fc0e 	lsl.w	ip, r2, lr
   be062:	fa22 f205 	lsr.w	r2, r2, r5
   be066:	1880      	adds	r0, r0, r2
   be068:	f141 0100 	adc.w	r1, r1, #0
   be06c:	fa03 f20e 	lsl.w	r2, r3, lr
   be070:	1880      	adds	r0, r0, r2
   be072:	fa43 f305 	asr.w	r3, r3, r5
   be076:	4159      	adcs	r1, r3
   be078:	e00e      	b.n	be098 <__adddf3+0xd0>
   be07a:	f1a5 0520 	sub.w	r5, r5, #32
   be07e:	f10e 0e20 	add.w	lr, lr, #32
   be082:	2a01      	cmp	r2, #1
   be084:	fa03 fc0e 	lsl.w	ip, r3, lr
   be088:	bf28      	it	cs
   be08a:	f04c 0c02 	orrcs.w	ip, ip, #2
   be08e:	fa43 f305 	asr.w	r3, r3, r5
   be092:	18c0      	adds	r0, r0, r3
   be094:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   be098:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   be09c:	d507      	bpl.n	be0ae <__adddf3+0xe6>
   be09e:	f04f 0e00 	mov.w	lr, #0
   be0a2:	f1dc 0c00 	rsbs	ip, ip, #0
   be0a6:	eb7e 0000 	sbcs.w	r0, lr, r0
   be0aa:	eb6e 0101 	sbc.w	r1, lr, r1
   be0ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   be0b2:	d31b      	bcc.n	be0ec <__adddf3+0x124>
   be0b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   be0b8:	d30c      	bcc.n	be0d4 <__adddf3+0x10c>
   be0ba:	0849      	lsrs	r1, r1, #1
   be0bc:	ea5f 0030 	movs.w	r0, r0, rrx
   be0c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   be0c4:	f104 0401 	add.w	r4, r4, #1
   be0c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   be0cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   be0d0:	f080 809a 	bcs.w	be208 <__adddf3+0x240>
   be0d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   be0d8:	bf08      	it	eq
   be0da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   be0de:	f150 0000 	adcs.w	r0, r0, #0
   be0e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be0e6:	ea41 0105 	orr.w	r1, r1, r5
   be0ea:	bd30      	pop	{r4, r5, pc}
   be0ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   be0f0:	4140      	adcs	r0, r0
   be0f2:	eb41 0101 	adc.w	r1, r1, r1
   be0f6:	3c01      	subs	r4, #1
   be0f8:	bf28      	it	cs
   be0fa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   be0fe:	d2e9      	bcs.n	be0d4 <__adddf3+0x10c>
   be100:	f091 0f00 	teq	r1, #0
   be104:	bf04      	itt	eq
   be106:	4601      	moveq	r1, r0
   be108:	2000      	moveq	r0, #0
   be10a:	fab1 f381 	clz	r3, r1
   be10e:	bf08      	it	eq
   be110:	3320      	addeq	r3, #32
   be112:	f1a3 030b 	sub.w	r3, r3, #11
   be116:	f1b3 0220 	subs.w	r2, r3, #32
   be11a:	da0c      	bge.n	be136 <__adddf3+0x16e>
   be11c:	320c      	adds	r2, #12
   be11e:	dd08      	ble.n	be132 <__adddf3+0x16a>
   be120:	f102 0c14 	add.w	ip, r2, #20
   be124:	f1c2 020c 	rsb	r2, r2, #12
   be128:	fa01 f00c 	lsl.w	r0, r1, ip
   be12c:	fa21 f102 	lsr.w	r1, r1, r2
   be130:	e00c      	b.n	be14c <__adddf3+0x184>
   be132:	f102 0214 	add.w	r2, r2, #20
   be136:	bfd8      	it	le
   be138:	f1c2 0c20 	rsble	ip, r2, #32
   be13c:	fa01 f102 	lsl.w	r1, r1, r2
   be140:	fa20 fc0c 	lsr.w	ip, r0, ip
   be144:	bfdc      	itt	le
   be146:	ea41 010c 	orrle.w	r1, r1, ip
   be14a:	4090      	lslle	r0, r2
   be14c:	1ae4      	subs	r4, r4, r3
   be14e:	bfa2      	ittt	ge
   be150:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   be154:	4329      	orrge	r1, r5
   be156:	bd30      	popge	{r4, r5, pc}
   be158:	ea6f 0404 	mvn.w	r4, r4
   be15c:	3c1f      	subs	r4, #31
   be15e:	da1c      	bge.n	be19a <__adddf3+0x1d2>
   be160:	340c      	adds	r4, #12
   be162:	dc0e      	bgt.n	be182 <__adddf3+0x1ba>
   be164:	f104 0414 	add.w	r4, r4, #20
   be168:	f1c4 0220 	rsb	r2, r4, #32
   be16c:	fa20 f004 	lsr.w	r0, r0, r4
   be170:	fa01 f302 	lsl.w	r3, r1, r2
   be174:	ea40 0003 	orr.w	r0, r0, r3
   be178:	fa21 f304 	lsr.w	r3, r1, r4
   be17c:	ea45 0103 	orr.w	r1, r5, r3
   be180:	bd30      	pop	{r4, r5, pc}
   be182:	f1c4 040c 	rsb	r4, r4, #12
   be186:	f1c4 0220 	rsb	r2, r4, #32
   be18a:	fa20 f002 	lsr.w	r0, r0, r2
   be18e:	fa01 f304 	lsl.w	r3, r1, r4
   be192:	ea40 0003 	orr.w	r0, r0, r3
   be196:	4629      	mov	r1, r5
   be198:	bd30      	pop	{r4, r5, pc}
   be19a:	fa21 f004 	lsr.w	r0, r1, r4
   be19e:	4629      	mov	r1, r5
   be1a0:	bd30      	pop	{r4, r5, pc}
   be1a2:	f094 0f00 	teq	r4, #0
   be1a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   be1aa:	bf06      	itte	eq
   be1ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   be1b0:	3401      	addeq	r4, #1
   be1b2:	3d01      	subne	r5, #1
   be1b4:	e74e      	b.n	be054 <__adddf3+0x8c>
   be1b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   be1ba:	bf18      	it	ne
   be1bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   be1c0:	d029      	beq.n	be216 <__adddf3+0x24e>
   be1c2:	ea94 0f05 	teq	r4, r5
   be1c6:	bf08      	it	eq
   be1c8:	ea90 0f02 	teqeq	r0, r2
   be1cc:	d005      	beq.n	be1da <__adddf3+0x212>
   be1ce:	ea54 0c00 	orrs.w	ip, r4, r0
   be1d2:	bf04      	itt	eq
   be1d4:	4619      	moveq	r1, r3
   be1d6:	4610      	moveq	r0, r2
   be1d8:	bd30      	pop	{r4, r5, pc}
   be1da:	ea91 0f03 	teq	r1, r3
   be1de:	bf1e      	ittt	ne
   be1e0:	2100      	movne	r1, #0
   be1e2:	2000      	movne	r0, #0
   be1e4:	bd30      	popne	{r4, r5, pc}
   be1e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   be1ea:	d105      	bne.n	be1f8 <__adddf3+0x230>
   be1ec:	0040      	lsls	r0, r0, #1
   be1ee:	4149      	adcs	r1, r1
   be1f0:	bf28      	it	cs
   be1f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   be1f6:	bd30      	pop	{r4, r5, pc}
   be1f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   be1fc:	bf3c      	itt	cc
   be1fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   be202:	bd30      	popcc	{r4, r5, pc}
   be204:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   be208:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   be20c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   be210:	f04f 0000 	mov.w	r0, #0
   be214:	bd30      	pop	{r4, r5, pc}
   be216:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   be21a:	bf1a      	itte	ne
   be21c:	4619      	movne	r1, r3
   be21e:	4610      	movne	r0, r2
   be220:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   be224:	bf1c      	itt	ne
   be226:	460b      	movne	r3, r1
   be228:	4602      	movne	r2, r0
   be22a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   be22e:	bf06      	itte	eq
   be230:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   be234:	ea91 0f03 	teqeq	r1, r3
   be238:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   be23c:	bd30      	pop	{r4, r5, pc}
   be23e:	bf00      	nop

000be240 <__aeabi_ui2d>:
   be240:	f090 0f00 	teq	r0, #0
   be244:	bf04      	itt	eq
   be246:	2100      	moveq	r1, #0
   be248:	4770      	bxeq	lr
   be24a:	b530      	push	{r4, r5, lr}
   be24c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   be250:	f104 0432 	add.w	r4, r4, #50	; 0x32
   be254:	f04f 0500 	mov.w	r5, #0
   be258:	f04f 0100 	mov.w	r1, #0
   be25c:	e750      	b.n	be100 <__adddf3+0x138>
   be25e:	bf00      	nop

000be260 <__aeabi_i2d>:
   be260:	f090 0f00 	teq	r0, #0
   be264:	bf04      	itt	eq
   be266:	2100      	moveq	r1, #0
   be268:	4770      	bxeq	lr
   be26a:	b530      	push	{r4, r5, lr}
   be26c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   be270:	f104 0432 	add.w	r4, r4, #50	; 0x32
   be274:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   be278:	bf48      	it	mi
   be27a:	4240      	negmi	r0, r0
   be27c:	f04f 0100 	mov.w	r1, #0
   be280:	e73e      	b.n	be100 <__adddf3+0x138>
   be282:	bf00      	nop

000be284 <__aeabi_f2d>:
   be284:	0042      	lsls	r2, r0, #1
   be286:	ea4f 01e2 	mov.w	r1, r2, asr #3
   be28a:	ea4f 0131 	mov.w	r1, r1, rrx
   be28e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   be292:	bf1f      	itttt	ne
   be294:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   be298:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   be29c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   be2a0:	4770      	bxne	lr
   be2a2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   be2a6:	bf08      	it	eq
   be2a8:	4770      	bxeq	lr
   be2aa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   be2ae:	bf04      	itt	eq
   be2b0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   be2b4:	4770      	bxeq	lr
   be2b6:	b530      	push	{r4, r5, lr}
   be2b8:	f44f 7460 	mov.w	r4, #896	; 0x380
   be2bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   be2c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   be2c4:	e71c      	b.n	be100 <__adddf3+0x138>
   be2c6:	bf00      	nop

000be2c8 <__aeabi_ul2d>:
   be2c8:	ea50 0201 	orrs.w	r2, r0, r1
   be2cc:	bf08      	it	eq
   be2ce:	4770      	bxeq	lr
   be2d0:	b530      	push	{r4, r5, lr}
   be2d2:	f04f 0500 	mov.w	r5, #0
   be2d6:	e00a      	b.n	be2ee <__aeabi_l2d+0x16>

000be2d8 <__aeabi_l2d>:
   be2d8:	ea50 0201 	orrs.w	r2, r0, r1
   be2dc:	bf08      	it	eq
   be2de:	4770      	bxeq	lr
   be2e0:	b530      	push	{r4, r5, lr}
   be2e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   be2e6:	d502      	bpl.n	be2ee <__aeabi_l2d+0x16>
   be2e8:	4240      	negs	r0, r0
   be2ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be2ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
   be2f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   be2f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   be2fa:	f43f aed8 	beq.w	be0ae <__adddf3+0xe6>
   be2fe:	f04f 0203 	mov.w	r2, #3
   be302:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   be306:	bf18      	it	ne
   be308:	3203      	addne	r2, #3
   be30a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   be30e:	bf18      	it	ne
   be310:	3203      	addne	r2, #3
   be312:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   be316:	f1c2 0320 	rsb	r3, r2, #32
   be31a:	fa00 fc03 	lsl.w	ip, r0, r3
   be31e:	fa20 f002 	lsr.w	r0, r0, r2
   be322:	fa01 fe03 	lsl.w	lr, r1, r3
   be326:	ea40 000e 	orr.w	r0, r0, lr
   be32a:	fa21 f102 	lsr.w	r1, r1, r2
   be32e:	4414      	add	r4, r2
   be330:	e6bd      	b.n	be0ae <__adddf3+0xe6>
   be332:	bf00      	nop

000be334 <__aeabi_dmul>:
   be334:	b570      	push	{r4, r5, r6, lr}
   be336:	f04f 0cff 	mov.w	ip, #255	; 0xff
   be33a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   be33e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   be342:	bf1d      	ittte	ne
   be344:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   be348:	ea94 0f0c 	teqne	r4, ip
   be34c:	ea95 0f0c 	teqne	r5, ip
   be350:	f000 f8de 	bleq	be510 <__aeabi_dmul+0x1dc>
   be354:	442c      	add	r4, r5
   be356:	ea81 0603 	eor.w	r6, r1, r3
   be35a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   be35e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   be362:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   be366:	bf18      	it	ne
   be368:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   be36c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be370:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   be374:	d038      	beq.n	be3e8 <__aeabi_dmul+0xb4>
   be376:	fba0 ce02 	umull	ip, lr, r0, r2
   be37a:	f04f 0500 	mov.w	r5, #0
   be37e:	fbe1 e502 	umlal	lr, r5, r1, r2
   be382:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   be386:	fbe0 e503 	umlal	lr, r5, r0, r3
   be38a:	f04f 0600 	mov.w	r6, #0
   be38e:	fbe1 5603 	umlal	r5, r6, r1, r3
   be392:	f09c 0f00 	teq	ip, #0
   be396:	bf18      	it	ne
   be398:	f04e 0e01 	orrne.w	lr, lr, #1
   be39c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   be3a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   be3a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   be3a8:	d204      	bcs.n	be3b4 <__aeabi_dmul+0x80>
   be3aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   be3ae:	416d      	adcs	r5, r5
   be3b0:	eb46 0606 	adc.w	r6, r6, r6
   be3b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   be3b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   be3bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   be3c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   be3c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   be3c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   be3cc:	bf88      	it	hi
   be3ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   be3d2:	d81e      	bhi.n	be412 <__aeabi_dmul+0xde>
   be3d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   be3d8:	bf08      	it	eq
   be3da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   be3de:	f150 0000 	adcs.w	r0, r0, #0
   be3e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be3e6:	bd70      	pop	{r4, r5, r6, pc}
   be3e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   be3ec:	ea46 0101 	orr.w	r1, r6, r1
   be3f0:	ea40 0002 	orr.w	r0, r0, r2
   be3f4:	ea81 0103 	eor.w	r1, r1, r3
   be3f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   be3fc:	bfc2      	ittt	gt
   be3fe:	ebd4 050c 	rsbsgt	r5, r4, ip
   be402:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   be406:	bd70      	popgt	{r4, r5, r6, pc}
   be408:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be40c:	f04f 0e00 	mov.w	lr, #0
   be410:	3c01      	subs	r4, #1
   be412:	f300 80ab 	bgt.w	be56c <__aeabi_dmul+0x238>
   be416:	f114 0f36 	cmn.w	r4, #54	; 0x36
   be41a:	bfde      	ittt	le
   be41c:	2000      	movle	r0, #0
   be41e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   be422:	bd70      	pople	{r4, r5, r6, pc}
   be424:	f1c4 0400 	rsb	r4, r4, #0
   be428:	3c20      	subs	r4, #32
   be42a:	da35      	bge.n	be498 <__aeabi_dmul+0x164>
   be42c:	340c      	adds	r4, #12
   be42e:	dc1b      	bgt.n	be468 <__aeabi_dmul+0x134>
   be430:	f104 0414 	add.w	r4, r4, #20
   be434:	f1c4 0520 	rsb	r5, r4, #32
   be438:	fa00 f305 	lsl.w	r3, r0, r5
   be43c:	fa20 f004 	lsr.w	r0, r0, r4
   be440:	fa01 f205 	lsl.w	r2, r1, r5
   be444:	ea40 0002 	orr.w	r0, r0, r2
   be448:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   be44c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   be450:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   be454:	fa21 f604 	lsr.w	r6, r1, r4
   be458:	eb42 0106 	adc.w	r1, r2, r6
   be45c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   be460:	bf08      	it	eq
   be462:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   be466:	bd70      	pop	{r4, r5, r6, pc}
   be468:	f1c4 040c 	rsb	r4, r4, #12
   be46c:	f1c4 0520 	rsb	r5, r4, #32
   be470:	fa00 f304 	lsl.w	r3, r0, r4
   be474:	fa20 f005 	lsr.w	r0, r0, r5
   be478:	fa01 f204 	lsl.w	r2, r1, r4
   be47c:	ea40 0002 	orr.w	r0, r0, r2
   be480:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be484:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   be488:	f141 0100 	adc.w	r1, r1, #0
   be48c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   be490:	bf08      	it	eq
   be492:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   be496:	bd70      	pop	{r4, r5, r6, pc}
   be498:	f1c4 0520 	rsb	r5, r4, #32
   be49c:	fa00 f205 	lsl.w	r2, r0, r5
   be4a0:	ea4e 0e02 	orr.w	lr, lr, r2
   be4a4:	fa20 f304 	lsr.w	r3, r0, r4
   be4a8:	fa01 f205 	lsl.w	r2, r1, r5
   be4ac:	ea43 0302 	orr.w	r3, r3, r2
   be4b0:	fa21 f004 	lsr.w	r0, r1, r4
   be4b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be4b8:	fa21 f204 	lsr.w	r2, r1, r4
   be4bc:	ea20 0002 	bic.w	r0, r0, r2
   be4c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   be4c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   be4c8:	bf08      	it	eq
   be4ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   be4ce:	bd70      	pop	{r4, r5, r6, pc}
   be4d0:	f094 0f00 	teq	r4, #0
   be4d4:	d10f      	bne.n	be4f6 <__aeabi_dmul+0x1c2>
   be4d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   be4da:	0040      	lsls	r0, r0, #1
   be4dc:	eb41 0101 	adc.w	r1, r1, r1
   be4e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   be4e4:	bf08      	it	eq
   be4e6:	3c01      	subeq	r4, #1
   be4e8:	d0f7      	beq.n	be4da <__aeabi_dmul+0x1a6>
   be4ea:	ea41 0106 	orr.w	r1, r1, r6
   be4ee:	f095 0f00 	teq	r5, #0
   be4f2:	bf18      	it	ne
   be4f4:	4770      	bxne	lr
   be4f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   be4fa:	0052      	lsls	r2, r2, #1
   be4fc:	eb43 0303 	adc.w	r3, r3, r3
   be500:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   be504:	bf08      	it	eq
   be506:	3d01      	subeq	r5, #1
   be508:	d0f7      	beq.n	be4fa <__aeabi_dmul+0x1c6>
   be50a:	ea43 0306 	orr.w	r3, r3, r6
   be50e:	4770      	bx	lr
   be510:	ea94 0f0c 	teq	r4, ip
   be514:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   be518:	bf18      	it	ne
   be51a:	ea95 0f0c 	teqne	r5, ip
   be51e:	d00c      	beq.n	be53a <__aeabi_dmul+0x206>
   be520:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   be524:	bf18      	it	ne
   be526:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   be52a:	d1d1      	bne.n	be4d0 <__aeabi_dmul+0x19c>
   be52c:	ea81 0103 	eor.w	r1, r1, r3
   be530:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be534:	f04f 0000 	mov.w	r0, #0
   be538:	bd70      	pop	{r4, r5, r6, pc}
   be53a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   be53e:	bf06      	itte	eq
   be540:	4610      	moveq	r0, r2
   be542:	4619      	moveq	r1, r3
   be544:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   be548:	d019      	beq.n	be57e <__aeabi_dmul+0x24a>
   be54a:	ea94 0f0c 	teq	r4, ip
   be54e:	d102      	bne.n	be556 <__aeabi_dmul+0x222>
   be550:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   be554:	d113      	bne.n	be57e <__aeabi_dmul+0x24a>
   be556:	ea95 0f0c 	teq	r5, ip
   be55a:	d105      	bne.n	be568 <__aeabi_dmul+0x234>
   be55c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   be560:	bf1c      	itt	ne
   be562:	4610      	movne	r0, r2
   be564:	4619      	movne	r1, r3
   be566:	d10a      	bne.n	be57e <__aeabi_dmul+0x24a>
   be568:	ea81 0103 	eor.w	r1, r1, r3
   be56c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be570:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   be574:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   be578:	f04f 0000 	mov.w	r0, #0
   be57c:	bd70      	pop	{r4, r5, r6, pc}
   be57e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   be582:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   be586:	bd70      	pop	{r4, r5, r6, pc}

000be588 <__aeabi_ddiv>:
   be588:	b570      	push	{r4, r5, r6, lr}
   be58a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   be58e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   be592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   be596:	bf1d      	ittte	ne
   be598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   be59c:	ea94 0f0c 	teqne	r4, ip
   be5a0:	ea95 0f0c 	teqne	r5, ip
   be5a4:	f000 f8a7 	bleq	be6f6 <__aeabi_ddiv+0x16e>
   be5a8:	eba4 0405 	sub.w	r4, r4, r5
   be5ac:	ea81 0e03 	eor.w	lr, r1, r3
   be5b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   be5b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   be5b8:	f000 8088 	beq.w	be6cc <__aeabi_ddiv+0x144>
   be5bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   be5c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   be5c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   be5c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   be5cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   be5d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   be5d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   be5d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   be5dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   be5e0:	429d      	cmp	r5, r3
   be5e2:	bf08      	it	eq
   be5e4:	4296      	cmpeq	r6, r2
   be5e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   be5ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
   be5ee:	d202      	bcs.n	be5f6 <__aeabi_ddiv+0x6e>
   be5f0:	085b      	lsrs	r3, r3, #1
   be5f2:	ea4f 0232 	mov.w	r2, r2, rrx
   be5f6:	1ab6      	subs	r6, r6, r2
   be5f8:	eb65 0503 	sbc.w	r5, r5, r3
   be5fc:	085b      	lsrs	r3, r3, #1
   be5fe:	ea4f 0232 	mov.w	r2, r2, rrx
   be602:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   be606:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   be60a:	ebb6 0e02 	subs.w	lr, r6, r2
   be60e:	eb75 0e03 	sbcs.w	lr, r5, r3
   be612:	bf22      	ittt	cs
   be614:	1ab6      	subcs	r6, r6, r2
   be616:	4675      	movcs	r5, lr
   be618:	ea40 000c 	orrcs.w	r0, r0, ip
   be61c:	085b      	lsrs	r3, r3, #1
   be61e:	ea4f 0232 	mov.w	r2, r2, rrx
   be622:	ebb6 0e02 	subs.w	lr, r6, r2
   be626:	eb75 0e03 	sbcs.w	lr, r5, r3
   be62a:	bf22      	ittt	cs
   be62c:	1ab6      	subcs	r6, r6, r2
   be62e:	4675      	movcs	r5, lr
   be630:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   be634:	085b      	lsrs	r3, r3, #1
   be636:	ea4f 0232 	mov.w	r2, r2, rrx
   be63a:	ebb6 0e02 	subs.w	lr, r6, r2
   be63e:	eb75 0e03 	sbcs.w	lr, r5, r3
   be642:	bf22      	ittt	cs
   be644:	1ab6      	subcs	r6, r6, r2
   be646:	4675      	movcs	r5, lr
   be648:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   be64c:	085b      	lsrs	r3, r3, #1
   be64e:	ea4f 0232 	mov.w	r2, r2, rrx
   be652:	ebb6 0e02 	subs.w	lr, r6, r2
   be656:	eb75 0e03 	sbcs.w	lr, r5, r3
   be65a:	bf22      	ittt	cs
   be65c:	1ab6      	subcs	r6, r6, r2
   be65e:	4675      	movcs	r5, lr
   be660:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   be664:	ea55 0e06 	orrs.w	lr, r5, r6
   be668:	d018      	beq.n	be69c <__aeabi_ddiv+0x114>
   be66a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   be66e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   be672:	ea4f 1606 	mov.w	r6, r6, lsl #4
   be676:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   be67a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   be67e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   be682:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   be686:	d1c0      	bne.n	be60a <__aeabi_ddiv+0x82>
   be688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   be68c:	d10b      	bne.n	be6a6 <__aeabi_ddiv+0x11e>
   be68e:	ea41 0100 	orr.w	r1, r1, r0
   be692:	f04f 0000 	mov.w	r0, #0
   be696:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   be69a:	e7b6      	b.n	be60a <__aeabi_ddiv+0x82>
   be69c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   be6a0:	bf04      	itt	eq
   be6a2:	4301      	orreq	r1, r0
   be6a4:	2000      	moveq	r0, #0
   be6a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   be6aa:	bf88      	it	hi
   be6ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   be6b0:	f63f aeaf 	bhi.w	be412 <__aeabi_dmul+0xde>
   be6b4:	ebb5 0c03 	subs.w	ip, r5, r3
   be6b8:	bf04      	itt	eq
   be6ba:	ebb6 0c02 	subseq.w	ip, r6, r2
   be6be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   be6c2:	f150 0000 	adcs.w	r0, r0, #0
   be6c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be6ca:	bd70      	pop	{r4, r5, r6, pc}
   be6cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   be6d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   be6d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   be6d8:	bfc2      	ittt	gt
   be6da:	ebd4 050c 	rsbsgt	r5, r4, ip
   be6de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   be6e2:	bd70      	popgt	{r4, r5, r6, pc}
   be6e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be6e8:	f04f 0e00 	mov.w	lr, #0
   be6ec:	3c01      	subs	r4, #1
   be6ee:	e690      	b.n	be412 <__aeabi_dmul+0xde>
   be6f0:	ea45 0e06 	orr.w	lr, r5, r6
   be6f4:	e68d      	b.n	be412 <__aeabi_dmul+0xde>
   be6f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   be6fa:	ea94 0f0c 	teq	r4, ip
   be6fe:	bf08      	it	eq
   be700:	ea95 0f0c 	teqeq	r5, ip
   be704:	f43f af3b 	beq.w	be57e <__aeabi_dmul+0x24a>
   be708:	ea94 0f0c 	teq	r4, ip
   be70c:	d10a      	bne.n	be724 <__aeabi_ddiv+0x19c>
   be70e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   be712:	f47f af34 	bne.w	be57e <__aeabi_dmul+0x24a>
   be716:	ea95 0f0c 	teq	r5, ip
   be71a:	f47f af25 	bne.w	be568 <__aeabi_dmul+0x234>
   be71e:	4610      	mov	r0, r2
   be720:	4619      	mov	r1, r3
   be722:	e72c      	b.n	be57e <__aeabi_dmul+0x24a>
   be724:	ea95 0f0c 	teq	r5, ip
   be728:	d106      	bne.n	be738 <__aeabi_ddiv+0x1b0>
   be72a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   be72e:	f43f aefd 	beq.w	be52c <__aeabi_dmul+0x1f8>
   be732:	4610      	mov	r0, r2
   be734:	4619      	mov	r1, r3
   be736:	e722      	b.n	be57e <__aeabi_dmul+0x24a>
   be738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   be73c:	bf18      	it	ne
   be73e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   be742:	f47f aec5 	bne.w	be4d0 <__aeabi_dmul+0x19c>
   be746:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   be74a:	f47f af0d 	bne.w	be568 <__aeabi_dmul+0x234>
   be74e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   be752:	f47f aeeb 	bne.w	be52c <__aeabi_dmul+0x1f8>
   be756:	e712      	b.n	be57e <__aeabi_dmul+0x24a>

000be758 <__gedf2>:
   be758:	f04f 3cff 	mov.w	ip, #4294967295
   be75c:	e006      	b.n	be76c <__cmpdf2+0x4>
   be75e:	bf00      	nop

000be760 <__ledf2>:
   be760:	f04f 0c01 	mov.w	ip, #1
   be764:	e002      	b.n	be76c <__cmpdf2+0x4>
   be766:	bf00      	nop

000be768 <__cmpdf2>:
   be768:	f04f 0c01 	mov.w	ip, #1
   be76c:	f84d cd04 	str.w	ip, [sp, #-4]!
   be770:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   be774:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be778:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   be77c:	bf18      	it	ne
   be77e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   be782:	d01b      	beq.n	be7bc <__cmpdf2+0x54>
   be784:	b001      	add	sp, #4
   be786:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   be78a:	bf0c      	ite	eq
   be78c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   be790:	ea91 0f03 	teqne	r1, r3
   be794:	bf02      	ittt	eq
   be796:	ea90 0f02 	teqeq	r0, r2
   be79a:	2000      	moveq	r0, #0
   be79c:	4770      	bxeq	lr
   be79e:	f110 0f00 	cmn.w	r0, #0
   be7a2:	ea91 0f03 	teq	r1, r3
   be7a6:	bf58      	it	pl
   be7a8:	4299      	cmppl	r1, r3
   be7aa:	bf08      	it	eq
   be7ac:	4290      	cmpeq	r0, r2
   be7ae:	bf2c      	ite	cs
   be7b0:	17d8      	asrcs	r0, r3, #31
   be7b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   be7b6:	f040 0001 	orr.w	r0, r0, #1
   be7ba:	4770      	bx	lr
   be7bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   be7c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be7c4:	d102      	bne.n	be7cc <__cmpdf2+0x64>
   be7c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   be7ca:	d107      	bne.n	be7dc <__cmpdf2+0x74>
   be7cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   be7d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be7d4:	d1d6      	bne.n	be784 <__cmpdf2+0x1c>
   be7d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   be7da:	d0d3      	beq.n	be784 <__cmpdf2+0x1c>
   be7dc:	f85d 0b04 	ldr.w	r0, [sp], #4
   be7e0:	4770      	bx	lr
   be7e2:	bf00      	nop

000be7e4 <__aeabi_cdrcmple>:
   be7e4:	4684      	mov	ip, r0
   be7e6:	4610      	mov	r0, r2
   be7e8:	4662      	mov	r2, ip
   be7ea:	468c      	mov	ip, r1
   be7ec:	4619      	mov	r1, r3
   be7ee:	4663      	mov	r3, ip
   be7f0:	e000      	b.n	be7f4 <__aeabi_cdcmpeq>
   be7f2:	bf00      	nop

000be7f4 <__aeabi_cdcmpeq>:
   be7f4:	b501      	push	{r0, lr}
   be7f6:	f7ff ffb7 	bl	be768 <__cmpdf2>
   be7fa:	2800      	cmp	r0, #0
   be7fc:	bf48      	it	mi
   be7fe:	f110 0f00 	cmnmi.w	r0, #0
   be802:	bd01      	pop	{r0, pc}

000be804 <__aeabi_dcmpeq>:
   be804:	f84d ed08 	str.w	lr, [sp, #-8]!
   be808:	f7ff fff4 	bl	be7f4 <__aeabi_cdcmpeq>
   be80c:	bf0c      	ite	eq
   be80e:	2001      	moveq	r0, #1
   be810:	2000      	movne	r0, #0
   be812:	f85d fb08 	ldr.w	pc, [sp], #8
   be816:	bf00      	nop

000be818 <__aeabi_dcmplt>:
   be818:	f84d ed08 	str.w	lr, [sp, #-8]!
   be81c:	f7ff ffea 	bl	be7f4 <__aeabi_cdcmpeq>
   be820:	bf34      	ite	cc
   be822:	2001      	movcc	r0, #1
   be824:	2000      	movcs	r0, #0
   be826:	f85d fb08 	ldr.w	pc, [sp], #8
   be82a:	bf00      	nop

000be82c <__aeabi_dcmple>:
   be82c:	f84d ed08 	str.w	lr, [sp, #-8]!
   be830:	f7ff ffe0 	bl	be7f4 <__aeabi_cdcmpeq>
   be834:	bf94      	ite	ls
   be836:	2001      	movls	r0, #1
   be838:	2000      	movhi	r0, #0
   be83a:	f85d fb08 	ldr.w	pc, [sp], #8
   be83e:	bf00      	nop

000be840 <__aeabi_dcmpge>:
   be840:	f84d ed08 	str.w	lr, [sp, #-8]!
   be844:	f7ff ffce 	bl	be7e4 <__aeabi_cdrcmple>
   be848:	bf94      	ite	ls
   be84a:	2001      	movls	r0, #1
   be84c:	2000      	movhi	r0, #0
   be84e:	f85d fb08 	ldr.w	pc, [sp], #8
   be852:	bf00      	nop

000be854 <__aeabi_dcmpgt>:
   be854:	f84d ed08 	str.w	lr, [sp, #-8]!
   be858:	f7ff ffc4 	bl	be7e4 <__aeabi_cdrcmple>
   be85c:	bf34      	ite	cc
   be85e:	2001      	movcc	r0, #1
   be860:	2000      	movcs	r0, #0
   be862:	f85d fb08 	ldr.w	pc, [sp], #8
   be866:	bf00      	nop

000be868 <__aeabi_d2uiz>:
   be868:	004a      	lsls	r2, r1, #1
   be86a:	d211      	bcs.n	be890 <__aeabi_d2uiz+0x28>
   be86c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   be870:	d211      	bcs.n	be896 <__aeabi_d2uiz+0x2e>
   be872:	d50d      	bpl.n	be890 <__aeabi_d2uiz+0x28>
   be874:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   be878:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   be87c:	d40e      	bmi.n	be89c <__aeabi_d2uiz+0x34>
   be87e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   be882:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   be886:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   be88a:	fa23 f002 	lsr.w	r0, r3, r2
   be88e:	4770      	bx	lr
   be890:	f04f 0000 	mov.w	r0, #0
   be894:	4770      	bx	lr
   be896:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   be89a:	d102      	bne.n	be8a2 <__aeabi_d2uiz+0x3a>
   be89c:	f04f 30ff 	mov.w	r0, #4294967295
   be8a0:	4770      	bx	lr
   be8a2:	f04f 0000 	mov.w	r0, #0
   be8a6:	4770      	bx	lr

000be8a8 <__aeabi_d2f>:
   be8a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   be8ac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   be8b0:	bf24      	itt	cs
   be8b2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   be8b6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   be8ba:	d90d      	bls.n	be8d8 <__aeabi_d2f+0x30>
   be8bc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   be8c0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   be8c4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   be8c8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   be8cc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   be8d0:	bf08      	it	eq
   be8d2:	f020 0001 	biceq.w	r0, r0, #1
   be8d6:	4770      	bx	lr
   be8d8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   be8dc:	d121      	bne.n	be922 <__aeabi_d2f+0x7a>
   be8de:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   be8e2:	bfbc      	itt	lt
   be8e4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   be8e8:	4770      	bxlt	lr
   be8ea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be8ee:	ea4f 5252 	mov.w	r2, r2, lsr #21
   be8f2:	f1c2 0218 	rsb	r2, r2, #24
   be8f6:	f1c2 0c20 	rsb	ip, r2, #32
   be8fa:	fa10 f30c 	lsls.w	r3, r0, ip
   be8fe:	fa20 f002 	lsr.w	r0, r0, r2
   be902:	bf18      	it	ne
   be904:	f040 0001 	orrne.w	r0, r0, #1
   be908:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   be90c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   be910:	fa03 fc0c 	lsl.w	ip, r3, ip
   be914:	ea40 000c 	orr.w	r0, r0, ip
   be918:	fa23 f302 	lsr.w	r3, r3, r2
   be91c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   be920:	e7cc      	b.n	be8bc <__aeabi_d2f+0x14>
   be922:	ea7f 5362 	mvns.w	r3, r2, asr #21
   be926:	d107      	bne.n	be938 <__aeabi_d2f+0x90>
   be928:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   be92c:	bf1e      	ittt	ne
   be92e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   be932:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   be936:	4770      	bxne	lr
   be938:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   be93c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   be940:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   be944:	4770      	bx	lr
   be946:	bf00      	nop

000be948 <__aeabi_d2ulz>:
   be948:	b5d0      	push	{r4, r6, r7, lr}
   be94a:	4b0c      	ldr	r3, [pc, #48]	; (be97c <__aeabi_d2ulz+0x34>)
   be94c:	2200      	movs	r2, #0
   be94e:	4606      	mov	r6, r0
   be950:	460f      	mov	r7, r1
   be952:	f7ff fcef 	bl	be334 <__aeabi_dmul>
   be956:	f7ff ff87 	bl	be868 <__aeabi_d2uiz>
   be95a:	4604      	mov	r4, r0
   be95c:	f7ff fc70 	bl	be240 <__aeabi_ui2d>
   be960:	4b07      	ldr	r3, [pc, #28]	; (be980 <__aeabi_d2ulz+0x38>)
   be962:	2200      	movs	r2, #0
   be964:	f7ff fce6 	bl	be334 <__aeabi_dmul>
   be968:	4602      	mov	r2, r0
   be96a:	460b      	mov	r3, r1
   be96c:	4630      	mov	r0, r6
   be96e:	4639      	mov	r1, r7
   be970:	f7ff fb28 	bl	bdfc4 <__aeabi_dsub>
   be974:	f7ff ff78 	bl	be868 <__aeabi_d2uiz>
   be978:	4621      	mov	r1, r4
   be97a:	bdd0      	pop	{r4, r6, r7, pc}
   be97c:	3df00000 	.word	0x3df00000
   be980:	41f00000 	.word	0x41f00000

000be984 <atexit>:
   be984:	2300      	movs	r3, #0
   be986:	4601      	mov	r1, r0
   be988:	461a      	mov	r2, r3
   be98a:	4618      	mov	r0, r3
   be98c:	f000 bfea 	b.w	bf964 <__register_exitproc>

000be990 <atof>:
   be990:	2100      	movs	r1, #0
   be992:	f000 bf4f 	b.w	bf834 <strtod>

000be996 <atoi>:
   be996:	220a      	movs	r2, #10
   be998:	2100      	movs	r1, #0
   be99a:	f000 bfd9 	b.w	bf950 <strtol>

000be99e <memcmp>:
   be99e:	b510      	push	{r4, lr}
   be9a0:	3901      	subs	r1, #1
   be9a2:	4402      	add	r2, r0
   be9a4:	4290      	cmp	r0, r2
   be9a6:	d101      	bne.n	be9ac <memcmp+0xe>
   be9a8:	2000      	movs	r0, #0
   be9aa:	e005      	b.n	be9b8 <memcmp+0x1a>
   be9ac:	7803      	ldrb	r3, [r0, #0]
   be9ae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   be9b2:	42a3      	cmp	r3, r4
   be9b4:	d001      	beq.n	be9ba <memcmp+0x1c>
   be9b6:	1b18      	subs	r0, r3, r4
   be9b8:	bd10      	pop	{r4, pc}
   be9ba:	3001      	adds	r0, #1
   be9bc:	e7f2      	b.n	be9a4 <memcmp+0x6>

000be9be <memcpy>:
   be9be:	440a      	add	r2, r1
   be9c0:	4291      	cmp	r1, r2
   be9c2:	f100 33ff 	add.w	r3, r0, #4294967295
   be9c6:	d100      	bne.n	be9ca <memcpy+0xc>
   be9c8:	4770      	bx	lr
   be9ca:	b510      	push	{r4, lr}
   be9cc:	f811 4b01 	ldrb.w	r4, [r1], #1
   be9d0:	f803 4f01 	strb.w	r4, [r3, #1]!
   be9d4:	4291      	cmp	r1, r2
   be9d6:	d1f9      	bne.n	be9cc <memcpy+0xe>
   be9d8:	bd10      	pop	{r4, pc}

000be9da <memmove>:
   be9da:	4288      	cmp	r0, r1
   be9dc:	b510      	push	{r4, lr}
   be9de:	eb01 0402 	add.w	r4, r1, r2
   be9e2:	d902      	bls.n	be9ea <memmove+0x10>
   be9e4:	4284      	cmp	r4, r0
   be9e6:	4623      	mov	r3, r4
   be9e8:	d807      	bhi.n	be9fa <memmove+0x20>
   be9ea:	1e43      	subs	r3, r0, #1
   be9ec:	42a1      	cmp	r1, r4
   be9ee:	d008      	beq.n	bea02 <memmove+0x28>
   be9f0:	f811 2b01 	ldrb.w	r2, [r1], #1
   be9f4:	f803 2f01 	strb.w	r2, [r3, #1]!
   be9f8:	e7f8      	b.n	be9ec <memmove+0x12>
   be9fa:	4402      	add	r2, r0
   be9fc:	4601      	mov	r1, r0
   be9fe:	428a      	cmp	r2, r1
   bea00:	d100      	bne.n	bea04 <memmove+0x2a>
   bea02:	bd10      	pop	{r4, pc}
   bea04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bea08:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bea0c:	e7f7      	b.n	be9fe <memmove+0x24>

000bea0e <memset>:
   bea0e:	4402      	add	r2, r0
   bea10:	4603      	mov	r3, r0
   bea12:	4293      	cmp	r3, r2
   bea14:	d100      	bne.n	bea18 <memset+0xa>
   bea16:	4770      	bx	lr
   bea18:	f803 1b01 	strb.w	r1, [r3], #1
   bea1c:	e7f9      	b.n	bea12 <memset+0x4>
	...

000bea20 <srand>:
   bea20:	b538      	push	{r3, r4, r5, lr}
   bea22:	4b10      	ldr	r3, [pc, #64]	; (bea64 <srand+0x44>)
   bea24:	681d      	ldr	r5, [r3, #0]
   bea26:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bea28:	4604      	mov	r4, r0
   bea2a:	b9b3      	cbnz	r3, bea5a <srand+0x3a>
   bea2c:	2018      	movs	r0, #24
   bea2e:	f7fb fa71 	bl	b9f14 <malloc>
   bea32:	4602      	mov	r2, r0
   bea34:	63a8      	str	r0, [r5, #56]	; 0x38
   bea36:	b920      	cbnz	r0, bea42 <srand+0x22>
   bea38:	4b0b      	ldr	r3, [pc, #44]	; (bea68 <srand+0x48>)
   bea3a:	480c      	ldr	r0, [pc, #48]	; (bea6c <srand+0x4c>)
   bea3c:	2142      	movs	r1, #66	; 0x42
   bea3e:	f7fb fab9 	bl	b9fb4 <__assert_func>
   bea42:	490b      	ldr	r1, [pc, #44]	; (bea70 <srand+0x50>)
   bea44:	4b0b      	ldr	r3, [pc, #44]	; (bea74 <srand+0x54>)
   bea46:	e9c0 1300 	strd	r1, r3, [r0]
   bea4a:	4b0b      	ldr	r3, [pc, #44]	; (bea78 <srand+0x58>)
   bea4c:	6083      	str	r3, [r0, #8]
   bea4e:	230b      	movs	r3, #11
   bea50:	8183      	strh	r3, [r0, #12]
   bea52:	2100      	movs	r1, #0
   bea54:	2001      	movs	r0, #1
   bea56:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bea5a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bea5c:	2200      	movs	r2, #0
   bea5e:	611c      	str	r4, [r3, #16]
   bea60:	615a      	str	r2, [r3, #20]
   bea62:	bd38      	pop	{r3, r4, r5, pc}
   bea64:	2003da88 	.word	0x2003da88
   bea68:	000c1e91 	.word	0x000c1e91
   bea6c:	000c1ea8 	.word	0x000c1ea8
   bea70:	abcd330e 	.word	0xabcd330e
   bea74:	e66d1234 	.word	0xe66d1234
   bea78:	0005deec 	.word	0x0005deec

000bea7c <rand>:
   bea7c:	4b16      	ldr	r3, [pc, #88]	; (bead8 <rand+0x5c>)
   bea7e:	b510      	push	{r4, lr}
   bea80:	681c      	ldr	r4, [r3, #0]
   bea82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bea84:	b9b3      	cbnz	r3, beab4 <rand+0x38>
   bea86:	2018      	movs	r0, #24
   bea88:	f7fb fa44 	bl	b9f14 <malloc>
   bea8c:	63a0      	str	r0, [r4, #56]	; 0x38
   bea8e:	b928      	cbnz	r0, bea9c <rand+0x20>
   bea90:	4602      	mov	r2, r0
   bea92:	4b12      	ldr	r3, [pc, #72]	; (beadc <rand+0x60>)
   bea94:	4812      	ldr	r0, [pc, #72]	; (beae0 <rand+0x64>)
   bea96:	214e      	movs	r1, #78	; 0x4e
   bea98:	f7fb fa8c 	bl	b9fb4 <__assert_func>
   bea9c:	4a11      	ldr	r2, [pc, #68]	; (beae4 <rand+0x68>)
   bea9e:	4b12      	ldr	r3, [pc, #72]	; (beae8 <rand+0x6c>)
   beaa0:	e9c0 2300 	strd	r2, r3, [r0]
   beaa4:	4b11      	ldr	r3, [pc, #68]	; (beaec <rand+0x70>)
   beaa6:	6083      	str	r3, [r0, #8]
   beaa8:	230b      	movs	r3, #11
   beaaa:	8183      	strh	r3, [r0, #12]
   beaac:	2201      	movs	r2, #1
   beaae:	2300      	movs	r3, #0
   beab0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   beab4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   beab6:	4a0e      	ldr	r2, [pc, #56]	; (beaf0 <rand+0x74>)
   beab8:	6920      	ldr	r0, [r4, #16]
   beaba:	6963      	ldr	r3, [r4, #20]
   beabc:	490d      	ldr	r1, [pc, #52]	; (beaf4 <rand+0x78>)
   beabe:	4342      	muls	r2, r0
   beac0:	fb01 2203 	mla	r2, r1, r3, r2
   beac4:	fba0 0101 	umull	r0, r1, r0, r1
   beac8:	1c43      	adds	r3, r0, #1
   beaca:	eb42 0001 	adc.w	r0, r2, r1
   beace:	e9c4 3004 	strd	r3, r0, [r4, #16]
   bead2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   bead6:	bd10      	pop	{r4, pc}
   bead8:	2003da88 	.word	0x2003da88
   beadc:	000c1e91 	.word	0x000c1e91
   beae0:	000c1ea8 	.word	0x000c1ea8
   beae4:	abcd330e 	.word	0xabcd330e
   beae8:	e66d1234 	.word	0xe66d1234
   beaec:	0005deec 	.word	0x0005deec
   beaf0:	5851f42d 	.word	0x5851f42d
   beaf4:	4c957f2d 	.word	0x4c957f2d

000beaf8 <strcat>:
   beaf8:	b510      	push	{r4, lr}
   beafa:	4602      	mov	r2, r0
   beafc:	7814      	ldrb	r4, [r2, #0]
   beafe:	4613      	mov	r3, r2
   beb00:	3201      	adds	r2, #1
   beb02:	2c00      	cmp	r4, #0
   beb04:	d1fa      	bne.n	beafc <strcat+0x4>
   beb06:	3b01      	subs	r3, #1
   beb08:	f811 2b01 	ldrb.w	r2, [r1], #1
   beb0c:	f803 2f01 	strb.w	r2, [r3, #1]!
   beb10:	2a00      	cmp	r2, #0
   beb12:	d1f9      	bne.n	beb08 <strcat+0x10>
   beb14:	bd10      	pop	{r4, pc}

000beb16 <strcmp>:
   beb16:	f810 2b01 	ldrb.w	r2, [r0], #1
   beb1a:	f811 3b01 	ldrb.w	r3, [r1], #1
   beb1e:	2a01      	cmp	r2, #1
   beb20:	bf28      	it	cs
   beb22:	429a      	cmpcs	r2, r3
   beb24:	d0f7      	beq.n	beb16 <strcmp>
   beb26:	1ad0      	subs	r0, r2, r3
   beb28:	4770      	bx	lr

000beb2a <strcpy>:
   beb2a:	4603      	mov	r3, r0
   beb2c:	f811 2b01 	ldrb.w	r2, [r1], #1
   beb30:	f803 2b01 	strb.w	r2, [r3], #1
   beb34:	2a00      	cmp	r2, #0
   beb36:	d1f9      	bne.n	beb2c <strcpy+0x2>
   beb38:	4770      	bx	lr
	...

000beb3c <strdup>:
   beb3c:	4b02      	ldr	r3, [pc, #8]	; (beb48 <strdup+0xc>)
   beb3e:	4601      	mov	r1, r0
   beb40:	6818      	ldr	r0, [r3, #0]
   beb42:	f000 b803 	b.w	beb4c <_strdup_r>
   beb46:	bf00      	nop
   beb48:	2003da88 	.word	0x2003da88

000beb4c <_strdup_r>:
   beb4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   beb4e:	4604      	mov	r4, r0
   beb50:	4608      	mov	r0, r1
   beb52:	460d      	mov	r5, r1
   beb54:	f000 f80f 	bl	beb76 <strlen>
   beb58:	1c42      	adds	r2, r0, #1
   beb5a:	4611      	mov	r1, r2
   beb5c:	4620      	mov	r0, r4
   beb5e:	9201      	str	r2, [sp, #4]
   beb60:	f7fb fa18 	bl	b9f94 <_malloc_r>
   beb64:	4604      	mov	r4, r0
   beb66:	b118      	cbz	r0, beb70 <_strdup_r+0x24>
   beb68:	9a01      	ldr	r2, [sp, #4]
   beb6a:	4629      	mov	r1, r5
   beb6c:	f7ff ff27 	bl	be9be <memcpy>
   beb70:	4620      	mov	r0, r4
   beb72:	b003      	add	sp, #12
   beb74:	bd30      	pop	{r4, r5, pc}

000beb76 <strlen>:
   beb76:	4603      	mov	r3, r0
   beb78:	f813 2b01 	ldrb.w	r2, [r3], #1
   beb7c:	2a00      	cmp	r2, #0
   beb7e:	d1fb      	bne.n	beb78 <strlen+0x2>
   beb80:	1a18      	subs	r0, r3, r0
   beb82:	3801      	subs	r0, #1
   beb84:	4770      	bx	lr

000beb86 <strncmp>:
   beb86:	b510      	push	{r4, lr}
   beb88:	b17a      	cbz	r2, bebaa <strncmp+0x24>
   beb8a:	4603      	mov	r3, r0
   beb8c:	3901      	subs	r1, #1
   beb8e:	1884      	adds	r4, r0, r2
   beb90:	f813 0b01 	ldrb.w	r0, [r3], #1
   beb94:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   beb98:	4290      	cmp	r0, r2
   beb9a:	d101      	bne.n	beba0 <strncmp+0x1a>
   beb9c:	42a3      	cmp	r3, r4
   beb9e:	d101      	bne.n	beba4 <strncmp+0x1e>
   beba0:	1a80      	subs	r0, r0, r2
   beba2:	bd10      	pop	{r4, pc}
   beba4:	2800      	cmp	r0, #0
   beba6:	d1f3      	bne.n	beb90 <strncmp+0xa>
   beba8:	e7fa      	b.n	beba0 <strncmp+0x1a>
   bebaa:	4610      	mov	r0, r2
   bebac:	e7f9      	b.n	beba2 <strncmp+0x1c>

000bebae <strncpy>:
   bebae:	b510      	push	{r4, lr}
   bebb0:	3901      	subs	r1, #1
   bebb2:	4603      	mov	r3, r0
   bebb4:	b132      	cbz	r2, bebc4 <strncpy+0x16>
   bebb6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bebba:	f803 4b01 	strb.w	r4, [r3], #1
   bebbe:	3a01      	subs	r2, #1
   bebc0:	2c00      	cmp	r4, #0
   bebc2:	d1f7      	bne.n	bebb4 <strncpy+0x6>
   bebc4:	441a      	add	r2, r3
   bebc6:	2100      	movs	r1, #0
   bebc8:	4293      	cmp	r3, r2
   bebca:	d100      	bne.n	bebce <strncpy+0x20>
   bebcc:	bd10      	pop	{r4, pc}
   bebce:	f803 1b01 	strb.w	r1, [r3], #1
   bebd2:	e7f9      	b.n	bebc8 <strncpy+0x1a>

000bebd4 <strnlen>:
   bebd4:	b510      	push	{r4, lr}
   bebd6:	4602      	mov	r2, r0
   bebd8:	4401      	add	r1, r0
   bebda:	428a      	cmp	r2, r1
   bebdc:	4613      	mov	r3, r2
   bebde:	d003      	beq.n	bebe8 <strnlen+0x14>
   bebe0:	781c      	ldrb	r4, [r3, #0]
   bebe2:	3201      	adds	r2, #1
   bebe4:	2c00      	cmp	r4, #0
   bebe6:	d1f8      	bne.n	bebda <strnlen+0x6>
   bebe8:	1a18      	subs	r0, r3, r0
   bebea:	bd10      	pop	{r4, pc}

000bebec <sulp>:
   bebec:	b570      	push	{r4, r5, r6, lr}
   bebee:	4604      	mov	r4, r0
   bebf0:	460d      	mov	r5, r1
   bebf2:	ec45 4b10 	vmov	d0, r4, r5
   bebf6:	4616      	mov	r6, r2
   bebf8:	f001 fe0e 	bl	c0818 <__ulp>
   bebfc:	ec51 0b10 	vmov	r0, r1, d0
   bec00:	b17e      	cbz	r6, bec22 <sulp+0x36>
   bec02:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bec06:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bec0a:	2b00      	cmp	r3, #0
   bec0c:	dd09      	ble.n	bec22 <sulp+0x36>
   bec0e:	051b      	lsls	r3, r3, #20
   bec10:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bec14:	2400      	movs	r4, #0
   bec16:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bec1a:	4622      	mov	r2, r4
   bec1c:	462b      	mov	r3, r5
   bec1e:	f7ff fb89 	bl	be334 <__aeabi_dmul>
   bec22:	bd70      	pop	{r4, r5, r6, pc}
   bec24:	0000      	movs	r0, r0
	...

000bec28 <_strtod_l>:
   bec28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bec2c:	ed2d 8b02 	vpush	{d8}
   bec30:	b09d      	sub	sp, #116	; 0x74
   bec32:	461f      	mov	r7, r3
   bec34:	2300      	movs	r3, #0
   bec36:	9318      	str	r3, [sp, #96]	; 0x60
   bec38:	4ba2      	ldr	r3, [pc, #648]	; (beec4 <_strtod_l+0x29c>)
   bec3a:	9213      	str	r2, [sp, #76]	; 0x4c
   bec3c:	681b      	ldr	r3, [r3, #0]
   bec3e:	9305      	str	r3, [sp, #20]
   bec40:	4604      	mov	r4, r0
   bec42:	4618      	mov	r0, r3
   bec44:	4688      	mov	r8, r1
   bec46:	f7ff ff96 	bl	beb76 <strlen>
   bec4a:	f04f 0a00 	mov.w	sl, #0
   bec4e:	4605      	mov	r5, r0
   bec50:	f04f 0b00 	mov.w	fp, #0
   bec54:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bec58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bec5a:	781a      	ldrb	r2, [r3, #0]
   bec5c:	2a2b      	cmp	r2, #43	; 0x2b
   bec5e:	d04e      	beq.n	becfe <_strtod_l+0xd6>
   bec60:	d83b      	bhi.n	becda <_strtod_l+0xb2>
   bec62:	2a0d      	cmp	r2, #13
   bec64:	d834      	bhi.n	becd0 <_strtod_l+0xa8>
   bec66:	2a08      	cmp	r2, #8
   bec68:	d834      	bhi.n	becd4 <_strtod_l+0xac>
   bec6a:	2a00      	cmp	r2, #0
   bec6c:	d03e      	beq.n	becec <_strtod_l+0xc4>
   bec6e:	2300      	movs	r3, #0
   bec70:	930a      	str	r3, [sp, #40]	; 0x28
   bec72:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bec74:	7833      	ldrb	r3, [r6, #0]
   bec76:	2b30      	cmp	r3, #48	; 0x30
   bec78:	f040 80b0 	bne.w	beddc <_strtod_l+0x1b4>
   bec7c:	7873      	ldrb	r3, [r6, #1]
   bec7e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bec82:	2b58      	cmp	r3, #88	; 0x58
   bec84:	d168      	bne.n	bed58 <_strtod_l+0x130>
   bec86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bec88:	9301      	str	r3, [sp, #4]
   bec8a:	ab18      	add	r3, sp, #96	; 0x60
   bec8c:	9702      	str	r7, [sp, #8]
   bec8e:	9300      	str	r3, [sp, #0]
   bec90:	4a8d      	ldr	r2, [pc, #564]	; (beec8 <_strtod_l+0x2a0>)
   bec92:	ab19      	add	r3, sp, #100	; 0x64
   bec94:	a917      	add	r1, sp, #92	; 0x5c
   bec96:	4620      	mov	r0, r4
   bec98:	f000 ff2e 	bl	bfaf8 <__gethex>
   bec9c:	f010 0707 	ands.w	r7, r0, #7
   beca0:	4605      	mov	r5, r0
   beca2:	d005      	beq.n	becb0 <_strtod_l+0x88>
   beca4:	2f06      	cmp	r7, #6
   beca6:	d12c      	bne.n	bed02 <_strtod_l+0xda>
   beca8:	3601      	adds	r6, #1
   becaa:	2300      	movs	r3, #0
   becac:	9617      	str	r6, [sp, #92]	; 0x5c
   becae:	930a      	str	r3, [sp, #40]	; 0x28
   becb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   becb2:	2b00      	cmp	r3, #0
   becb4:	f040 8590 	bne.w	bf7d8 <_strtod_l+0xbb0>
   becb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   becba:	b1eb      	cbz	r3, becf8 <_strtod_l+0xd0>
   becbc:	4652      	mov	r2, sl
   becbe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   becc2:	ec43 2b10 	vmov	d0, r2, r3
   becc6:	b01d      	add	sp, #116	; 0x74
   becc8:	ecbd 8b02 	vpop	{d8}
   beccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   becd0:	2a20      	cmp	r2, #32
   becd2:	d1cc      	bne.n	bec6e <_strtod_l+0x46>
   becd4:	3301      	adds	r3, #1
   becd6:	9317      	str	r3, [sp, #92]	; 0x5c
   becd8:	e7be      	b.n	bec58 <_strtod_l+0x30>
   becda:	2a2d      	cmp	r2, #45	; 0x2d
   becdc:	d1c7      	bne.n	bec6e <_strtod_l+0x46>
   becde:	2201      	movs	r2, #1
   bece0:	920a      	str	r2, [sp, #40]	; 0x28
   bece2:	1c5a      	adds	r2, r3, #1
   bece4:	9217      	str	r2, [sp, #92]	; 0x5c
   bece6:	785b      	ldrb	r3, [r3, #1]
   bece8:	2b00      	cmp	r3, #0
   becea:	d1c2      	bne.n	bec72 <_strtod_l+0x4a>
   becec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   becee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   becf2:	2b00      	cmp	r3, #0
   becf4:	f040 856e 	bne.w	bf7d4 <_strtod_l+0xbac>
   becf8:	4652      	mov	r2, sl
   becfa:	465b      	mov	r3, fp
   becfc:	e7e1      	b.n	becc2 <_strtod_l+0x9a>
   becfe:	2200      	movs	r2, #0
   bed00:	e7ee      	b.n	bece0 <_strtod_l+0xb8>
   bed02:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bed04:	b13a      	cbz	r2, bed16 <_strtod_l+0xee>
   bed06:	2135      	movs	r1, #53	; 0x35
   bed08:	a81a      	add	r0, sp, #104	; 0x68
   bed0a:	f001 fe90 	bl	c0a2e <__copybits>
   bed0e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bed10:	4620      	mov	r0, r4
   bed12:	f001 fa4f 	bl	c01b4 <_Bfree>
   bed16:	3f01      	subs	r7, #1
   bed18:	2f04      	cmp	r7, #4
   bed1a:	d806      	bhi.n	bed2a <_strtod_l+0x102>
   bed1c:	e8df f007 	tbb	[pc, r7]
   bed20:	1714030a 	.word	0x1714030a
   bed24:	0a          	.byte	0x0a
   bed25:	00          	.byte	0x00
   bed26:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bed2a:	0728      	lsls	r0, r5, #28
   bed2c:	d5c0      	bpl.n	becb0 <_strtod_l+0x88>
   bed2e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bed32:	e7bd      	b.n	becb0 <_strtod_l+0x88>
   bed34:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bed38:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bed3a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bed3e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bed42:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bed46:	e7f0      	b.n	bed2a <_strtod_l+0x102>
   bed48:	f8df b180 	ldr.w	fp, [pc, #384]	; beecc <_strtod_l+0x2a4>
   bed4c:	e7ed      	b.n	bed2a <_strtod_l+0x102>
   bed4e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bed52:	f04f 3aff 	mov.w	sl, #4294967295
   bed56:	e7e8      	b.n	bed2a <_strtod_l+0x102>
   bed58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bed5a:	1c5a      	adds	r2, r3, #1
   bed5c:	9217      	str	r2, [sp, #92]	; 0x5c
   bed5e:	785b      	ldrb	r3, [r3, #1]
   bed60:	2b30      	cmp	r3, #48	; 0x30
   bed62:	d0f9      	beq.n	bed58 <_strtod_l+0x130>
   bed64:	2b00      	cmp	r3, #0
   bed66:	d0a3      	beq.n	becb0 <_strtod_l+0x88>
   bed68:	2301      	movs	r3, #1
   bed6a:	f04f 0900 	mov.w	r9, #0
   bed6e:	9304      	str	r3, [sp, #16]
   bed70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bed72:	9308      	str	r3, [sp, #32]
   bed74:	f8cd 901c 	str.w	r9, [sp, #28]
   bed78:	464f      	mov	r7, r9
   bed7a:	220a      	movs	r2, #10
   bed7c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bed7e:	7806      	ldrb	r6, [r0, #0]
   bed80:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bed84:	b2d9      	uxtb	r1, r3
   bed86:	2909      	cmp	r1, #9
   bed88:	d92a      	bls.n	bede0 <_strtod_l+0x1b8>
   bed8a:	9905      	ldr	r1, [sp, #20]
   bed8c:	462a      	mov	r2, r5
   bed8e:	f7ff fefa 	bl	beb86 <strncmp>
   bed92:	b398      	cbz	r0, bedfc <_strtod_l+0x1d4>
   bed94:	2000      	movs	r0, #0
   bed96:	4632      	mov	r2, r6
   bed98:	463d      	mov	r5, r7
   bed9a:	9005      	str	r0, [sp, #20]
   bed9c:	4603      	mov	r3, r0
   bed9e:	2a65      	cmp	r2, #101	; 0x65
   beda0:	d001      	beq.n	beda6 <_strtod_l+0x17e>
   beda2:	2a45      	cmp	r2, #69	; 0x45
   beda4:	d118      	bne.n	bedd8 <_strtod_l+0x1b0>
   beda6:	b91d      	cbnz	r5, bedb0 <_strtod_l+0x188>
   beda8:	9a04      	ldr	r2, [sp, #16]
   bedaa:	4302      	orrs	r2, r0
   bedac:	d09e      	beq.n	becec <_strtod_l+0xc4>
   bedae:	2500      	movs	r5, #0
   bedb0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bedb4:	f108 0201 	add.w	r2, r8, #1
   bedb8:	9217      	str	r2, [sp, #92]	; 0x5c
   bedba:	f898 2001 	ldrb.w	r2, [r8, #1]
   bedbe:	2a2b      	cmp	r2, #43	; 0x2b
   bedc0:	d075      	beq.n	beeae <_strtod_l+0x286>
   bedc2:	2a2d      	cmp	r2, #45	; 0x2d
   bedc4:	d07b      	beq.n	beebe <_strtod_l+0x296>
   bedc6:	f04f 0c00 	mov.w	ip, #0
   bedca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bedce:	2909      	cmp	r1, #9
   bedd0:	f240 8082 	bls.w	beed8 <_strtod_l+0x2b0>
   bedd4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bedd8:	2600      	movs	r6, #0
   bedda:	e09d      	b.n	bef18 <_strtod_l+0x2f0>
   beddc:	2300      	movs	r3, #0
   bedde:	e7c4      	b.n	bed6a <_strtod_l+0x142>
   bede0:	2f08      	cmp	r7, #8
   bede2:	bfd8      	it	le
   bede4:	9907      	ldrle	r1, [sp, #28]
   bede6:	f100 0001 	add.w	r0, r0, #1
   bedea:	bfda      	itte	le
   bedec:	fb02 3301 	mlale	r3, r2, r1, r3
   bedf0:	9307      	strle	r3, [sp, #28]
   bedf2:	fb02 3909 	mlagt	r9, r2, r9, r3
   bedf6:	3701      	adds	r7, #1
   bedf8:	9017      	str	r0, [sp, #92]	; 0x5c
   bedfa:	e7bf      	b.n	bed7c <_strtod_l+0x154>
   bedfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bedfe:	195a      	adds	r2, r3, r5
   bee00:	9217      	str	r2, [sp, #92]	; 0x5c
   bee02:	5d5a      	ldrb	r2, [r3, r5]
   bee04:	2f00      	cmp	r7, #0
   bee06:	d037      	beq.n	bee78 <_strtod_l+0x250>
   bee08:	9005      	str	r0, [sp, #20]
   bee0a:	463d      	mov	r5, r7
   bee0c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bee10:	2b09      	cmp	r3, #9
   bee12:	d912      	bls.n	bee3a <_strtod_l+0x212>
   bee14:	2301      	movs	r3, #1
   bee16:	e7c2      	b.n	bed9e <_strtod_l+0x176>
   bee18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bee1a:	1c5a      	adds	r2, r3, #1
   bee1c:	9217      	str	r2, [sp, #92]	; 0x5c
   bee1e:	785a      	ldrb	r2, [r3, #1]
   bee20:	3001      	adds	r0, #1
   bee22:	2a30      	cmp	r2, #48	; 0x30
   bee24:	d0f8      	beq.n	bee18 <_strtod_l+0x1f0>
   bee26:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bee2a:	2b08      	cmp	r3, #8
   bee2c:	f200 84d9 	bhi.w	bf7e2 <_strtod_l+0xbba>
   bee30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bee32:	9005      	str	r0, [sp, #20]
   bee34:	2000      	movs	r0, #0
   bee36:	9308      	str	r3, [sp, #32]
   bee38:	4605      	mov	r5, r0
   bee3a:	3a30      	subs	r2, #48	; 0x30
   bee3c:	f100 0301 	add.w	r3, r0, #1
   bee40:	d014      	beq.n	bee6c <_strtod_l+0x244>
   bee42:	9905      	ldr	r1, [sp, #20]
   bee44:	4419      	add	r1, r3
   bee46:	9105      	str	r1, [sp, #20]
   bee48:	462b      	mov	r3, r5
   bee4a:	eb00 0e05 	add.w	lr, r0, r5
   bee4e:	210a      	movs	r1, #10
   bee50:	4573      	cmp	r3, lr
   bee52:	d113      	bne.n	bee7c <_strtod_l+0x254>
   bee54:	182b      	adds	r3, r5, r0
   bee56:	2b08      	cmp	r3, #8
   bee58:	f105 0501 	add.w	r5, r5, #1
   bee5c:	4405      	add	r5, r0
   bee5e:	dc1c      	bgt.n	bee9a <_strtod_l+0x272>
   bee60:	9907      	ldr	r1, [sp, #28]
   bee62:	230a      	movs	r3, #10
   bee64:	fb03 2301 	mla	r3, r3, r1, r2
   bee68:	9307      	str	r3, [sp, #28]
   bee6a:	2300      	movs	r3, #0
   bee6c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bee6e:	1c51      	adds	r1, r2, #1
   bee70:	9117      	str	r1, [sp, #92]	; 0x5c
   bee72:	7852      	ldrb	r2, [r2, #1]
   bee74:	4618      	mov	r0, r3
   bee76:	e7c9      	b.n	bee0c <_strtod_l+0x1e4>
   bee78:	4638      	mov	r0, r7
   bee7a:	e7d2      	b.n	bee22 <_strtod_l+0x1fa>
   bee7c:	2b08      	cmp	r3, #8
   bee7e:	dc04      	bgt.n	bee8a <_strtod_l+0x262>
   bee80:	9e07      	ldr	r6, [sp, #28]
   bee82:	434e      	muls	r6, r1
   bee84:	9607      	str	r6, [sp, #28]
   bee86:	3301      	adds	r3, #1
   bee88:	e7e2      	b.n	bee50 <_strtod_l+0x228>
   bee8a:	f103 0c01 	add.w	ip, r3, #1
   bee8e:	f1bc 0f10 	cmp.w	ip, #16
   bee92:	bfd8      	it	le
   bee94:	fb01 f909 	mulle.w	r9, r1, r9
   bee98:	e7f5      	b.n	bee86 <_strtod_l+0x25e>
   bee9a:	2d10      	cmp	r5, #16
   bee9c:	bfdc      	itt	le
   bee9e:	230a      	movle	r3, #10
   beea0:	fb03 2909 	mlale	r9, r3, r9, r2
   beea4:	e7e1      	b.n	bee6a <_strtod_l+0x242>
   beea6:	2300      	movs	r3, #0
   beea8:	9305      	str	r3, [sp, #20]
   beeaa:	2301      	movs	r3, #1
   beeac:	e77c      	b.n	beda8 <_strtod_l+0x180>
   beeae:	f04f 0c00 	mov.w	ip, #0
   beeb2:	f108 0202 	add.w	r2, r8, #2
   beeb6:	9217      	str	r2, [sp, #92]	; 0x5c
   beeb8:	f898 2002 	ldrb.w	r2, [r8, #2]
   beebc:	e785      	b.n	bedca <_strtod_l+0x1a2>
   beebe:	f04f 0c01 	mov.w	ip, #1
   beec2:	e7f6      	b.n	beeb2 <_strtod_l+0x28a>
   beec4:	000c2120 	.word	0x000c2120
   beec8:	000c1f34 	.word	0x000c1f34
   beecc:	7ff00000 	.word	0x7ff00000
   beed0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   beed2:	1c51      	adds	r1, r2, #1
   beed4:	9117      	str	r1, [sp, #92]	; 0x5c
   beed6:	7852      	ldrb	r2, [r2, #1]
   beed8:	2a30      	cmp	r2, #48	; 0x30
   beeda:	d0f9      	beq.n	beed0 <_strtod_l+0x2a8>
   beedc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   beee0:	2908      	cmp	r1, #8
   beee2:	f63f af79 	bhi.w	bedd8 <_strtod_l+0x1b0>
   beee6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   beeea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   beeec:	9206      	str	r2, [sp, #24]
   beeee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   beef0:	1c51      	adds	r1, r2, #1
   beef2:	9117      	str	r1, [sp, #92]	; 0x5c
   beef4:	7852      	ldrb	r2, [r2, #1]
   beef6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   beefa:	2e09      	cmp	r6, #9
   beefc:	d937      	bls.n	bef6e <_strtod_l+0x346>
   beefe:	9e06      	ldr	r6, [sp, #24]
   bef00:	1b89      	subs	r1, r1, r6
   bef02:	2908      	cmp	r1, #8
   bef04:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bef08:	dc02      	bgt.n	bef10 <_strtod_l+0x2e8>
   bef0a:	4576      	cmp	r6, lr
   bef0c:	bfa8      	it	ge
   bef0e:	4676      	movge	r6, lr
   bef10:	f1bc 0f00 	cmp.w	ip, #0
   bef14:	d000      	beq.n	bef18 <_strtod_l+0x2f0>
   bef16:	4276      	negs	r6, r6
   bef18:	2d00      	cmp	r5, #0
   bef1a:	d14d      	bne.n	befb8 <_strtod_l+0x390>
   bef1c:	9904      	ldr	r1, [sp, #16]
   bef1e:	4301      	orrs	r1, r0
   bef20:	f47f aec6 	bne.w	becb0 <_strtod_l+0x88>
   bef24:	2b00      	cmp	r3, #0
   bef26:	f47f aee1 	bne.w	becec <_strtod_l+0xc4>
   bef2a:	2a69      	cmp	r2, #105	; 0x69
   bef2c:	d027      	beq.n	bef7e <_strtod_l+0x356>
   bef2e:	dc24      	bgt.n	bef7a <_strtod_l+0x352>
   bef30:	2a49      	cmp	r2, #73	; 0x49
   bef32:	d024      	beq.n	bef7e <_strtod_l+0x356>
   bef34:	2a4e      	cmp	r2, #78	; 0x4e
   bef36:	f47f aed9 	bne.w	becec <_strtod_l+0xc4>
   bef3a:	499f      	ldr	r1, [pc, #636]	; (bf1b8 <_strtod_l+0x590>)
   bef3c:	a817      	add	r0, sp, #92	; 0x5c
   bef3e:	f001 f833 	bl	bffa8 <__match>
   bef42:	2800      	cmp	r0, #0
   bef44:	f43f aed2 	beq.w	becec <_strtod_l+0xc4>
   bef48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bef4a:	781b      	ldrb	r3, [r3, #0]
   bef4c:	2b28      	cmp	r3, #40	; 0x28
   bef4e:	d12d      	bne.n	befac <_strtod_l+0x384>
   bef50:	499a      	ldr	r1, [pc, #616]	; (bf1bc <_strtod_l+0x594>)
   bef52:	aa1a      	add	r2, sp, #104	; 0x68
   bef54:	a817      	add	r0, sp, #92	; 0x5c
   bef56:	f001 f83b 	bl	bffd0 <__hexnan>
   bef5a:	2805      	cmp	r0, #5
   bef5c:	d126      	bne.n	befac <_strtod_l+0x384>
   bef5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bef60:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bef64:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bef68:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bef6c:	e6a0      	b.n	becb0 <_strtod_l+0x88>
   bef6e:	210a      	movs	r1, #10
   bef70:	fb01 2e0e 	mla	lr, r1, lr, r2
   bef74:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bef78:	e7b9      	b.n	beeee <_strtod_l+0x2c6>
   bef7a:	2a6e      	cmp	r2, #110	; 0x6e
   bef7c:	e7db      	b.n	bef36 <_strtod_l+0x30e>
   bef7e:	4990      	ldr	r1, [pc, #576]	; (bf1c0 <_strtod_l+0x598>)
   bef80:	a817      	add	r0, sp, #92	; 0x5c
   bef82:	f001 f811 	bl	bffa8 <__match>
   bef86:	2800      	cmp	r0, #0
   bef88:	f43f aeb0 	beq.w	becec <_strtod_l+0xc4>
   bef8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bef8e:	498d      	ldr	r1, [pc, #564]	; (bf1c4 <_strtod_l+0x59c>)
   bef90:	3b01      	subs	r3, #1
   bef92:	a817      	add	r0, sp, #92	; 0x5c
   bef94:	9317      	str	r3, [sp, #92]	; 0x5c
   bef96:	f001 f807 	bl	bffa8 <__match>
   bef9a:	b910      	cbnz	r0, befa2 <_strtod_l+0x37a>
   bef9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bef9e:	3301      	adds	r3, #1
   befa0:	9317      	str	r3, [sp, #92]	; 0x5c
   befa2:	f8df b230 	ldr.w	fp, [pc, #560]	; bf1d4 <_strtod_l+0x5ac>
   befa6:	f04f 0a00 	mov.w	sl, #0
   befaa:	e681      	b.n	becb0 <_strtod_l+0x88>
   befac:	4886      	ldr	r0, [pc, #536]	; (bf1c8 <_strtod_l+0x5a0>)
   befae:	f001 fd93 	bl	c0ad8 <nan>
   befb2:	ec5b ab10 	vmov	sl, fp, d0
   befb6:	e67b      	b.n	becb0 <_strtod_l+0x88>
   befb8:	9b05      	ldr	r3, [sp, #20]
   befba:	9807      	ldr	r0, [sp, #28]
   befbc:	1af3      	subs	r3, r6, r3
   befbe:	2f00      	cmp	r7, #0
   befc0:	bf08      	it	eq
   befc2:	462f      	moveq	r7, r5
   befc4:	2d10      	cmp	r5, #16
   befc6:	9306      	str	r3, [sp, #24]
   befc8:	46a8      	mov	r8, r5
   befca:	bfa8      	it	ge
   befcc:	f04f 0810 	movge.w	r8, #16
   befd0:	f7ff f936 	bl	be240 <__aeabi_ui2d>
   befd4:	2d09      	cmp	r5, #9
   befd6:	4682      	mov	sl, r0
   befd8:	468b      	mov	fp, r1
   befda:	dd13      	ble.n	bf004 <_strtod_l+0x3dc>
   befdc:	4b7b      	ldr	r3, [pc, #492]	; (bf1cc <_strtod_l+0x5a4>)
   befde:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   befe2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   befe6:	f7ff f9a5 	bl	be334 <__aeabi_dmul>
   befea:	4682      	mov	sl, r0
   befec:	4648      	mov	r0, r9
   befee:	468b      	mov	fp, r1
   beff0:	f7ff f926 	bl	be240 <__aeabi_ui2d>
   beff4:	4602      	mov	r2, r0
   beff6:	460b      	mov	r3, r1
   beff8:	4650      	mov	r0, sl
   beffa:	4659      	mov	r1, fp
   beffc:	f7fe ffe4 	bl	bdfc8 <__adddf3>
   bf000:	4682      	mov	sl, r0
   bf002:	468b      	mov	fp, r1
   bf004:	2d0f      	cmp	r5, #15
   bf006:	dc38      	bgt.n	bf07a <_strtod_l+0x452>
   bf008:	9b06      	ldr	r3, [sp, #24]
   bf00a:	2b00      	cmp	r3, #0
   bf00c:	f43f ae50 	beq.w	becb0 <_strtod_l+0x88>
   bf010:	dd24      	ble.n	bf05c <_strtod_l+0x434>
   bf012:	2b16      	cmp	r3, #22
   bf014:	dc0b      	bgt.n	bf02e <_strtod_l+0x406>
   bf016:	496d      	ldr	r1, [pc, #436]	; (bf1cc <_strtod_l+0x5a4>)
   bf018:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bf01c:	e9d1 0100 	ldrd	r0, r1, [r1]
   bf020:	4652      	mov	r2, sl
   bf022:	465b      	mov	r3, fp
   bf024:	f7ff f986 	bl	be334 <__aeabi_dmul>
   bf028:	4682      	mov	sl, r0
   bf02a:	468b      	mov	fp, r1
   bf02c:	e640      	b.n	becb0 <_strtod_l+0x88>
   bf02e:	9a06      	ldr	r2, [sp, #24]
   bf030:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bf034:	4293      	cmp	r3, r2
   bf036:	db20      	blt.n	bf07a <_strtod_l+0x452>
   bf038:	4c64      	ldr	r4, [pc, #400]	; (bf1cc <_strtod_l+0x5a4>)
   bf03a:	f1c5 050f 	rsb	r5, r5, #15
   bf03e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bf042:	4652      	mov	r2, sl
   bf044:	465b      	mov	r3, fp
   bf046:	e9d1 0100 	ldrd	r0, r1, [r1]
   bf04a:	f7ff f973 	bl	be334 <__aeabi_dmul>
   bf04e:	9b06      	ldr	r3, [sp, #24]
   bf050:	1b5d      	subs	r5, r3, r5
   bf052:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bf056:	e9d4 2300 	ldrd	r2, r3, [r4]
   bf05a:	e7e3      	b.n	bf024 <_strtod_l+0x3fc>
   bf05c:	9b06      	ldr	r3, [sp, #24]
   bf05e:	3316      	adds	r3, #22
   bf060:	db0b      	blt.n	bf07a <_strtod_l+0x452>
   bf062:	9b05      	ldr	r3, [sp, #20]
   bf064:	1b9e      	subs	r6, r3, r6
   bf066:	4b59      	ldr	r3, [pc, #356]	; (bf1cc <_strtod_l+0x5a4>)
   bf068:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bf06c:	e9d6 2300 	ldrd	r2, r3, [r6]
   bf070:	4650      	mov	r0, sl
   bf072:	4659      	mov	r1, fp
   bf074:	f7ff fa88 	bl	be588 <__aeabi_ddiv>
   bf078:	e7d6      	b.n	bf028 <_strtod_l+0x400>
   bf07a:	9b06      	ldr	r3, [sp, #24]
   bf07c:	eba5 0808 	sub.w	r8, r5, r8
   bf080:	4498      	add	r8, r3
   bf082:	f1b8 0f00 	cmp.w	r8, #0
   bf086:	dd74      	ble.n	bf172 <_strtod_l+0x54a>
   bf088:	f018 030f 	ands.w	r3, r8, #15
   bf08c:	d00a      	beq.n	bf0a4 <_strtod_l+0x47c>
   bf08e:	494f      	ldr	r1, [pc, #316]	; (bf1cc <_strtod_l+0x5a4>)
   bf090:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bf094:	4652      	mov	r2, sl
   bf096:	465b      	mov	r3, fp
   bf098:	e9d1 0100 	ldrd	r0, r1, [r1]
   bf09c:	f7ff f94a 	bl	be334 <__aeabi_dmul>
   bf0a0:	4682      	mov	sl, r0
   bf0a2:	468b      	mov	fp, r1
   bf0a4:	f038 080f 	bics.w	r8, r8, #15
   bf0a8:	d04f      	beq.n	bf14a <_strtod_l+0x522>
   bf0aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bf0ae:	dd22      	ble.n	bf0f6 <_strtod_l+0x4ce>
   bf0b0:	2500      	movs	r5, #0
   bf0b2:	462e      	mov	r6, r5
   bf0b4:	9507      	str	r5, [sp, #28]
   bf0b6:	9505      	str	r5, [sp, #20]
   bf0b8:	2322      	movs	r3, #34	; 0x22
   bf0ba:	f8df b118 	ldr.w	fp, [pc, #280]	; bf1d4 <_strtod_l+0x5ac>
   bf0be:	6023      	str	r3, [r4, #0]
   bf0c0:	f04f 0a00 	mov.w	sl, #0
   bf0c4:	9b07      	ldr	r3, [sp, #28]
   bf0c6:	2b00      	cmp	r3, #0
   bf0c8:	f43f adf2 	beq.w	becb0 <_strtod_l+0x88>
   bf0cc:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf0ce:	4620      	mov	r0, r4
   bf0d0:	f001 f870 	bl	c01b4 <_Bfree>
   bf0d4:	9905      	ldr	r1, [sp, #20]
   bf0d6:	4620      	mov	r0, r4
   bf0d8:	f001 f86c 	bl	c01b4 <_Bfree>
   bf0dc:	4631      	mov	r1, r6
   bf0de:	4620      	mov	r0, r4
   bf0e0:	f001 f868 	bl	c01b4 <_Bfree>
   bf0e4:	9907      	ldr	r1, [sp, #28]
   bf0e6:	4620      	mov	r0, r4
   bf0e8:	f001 f864 	bl	c01b4 <_Bfree>
   bf0ec:	4629      	mov	r1, r5
   bf0ee:	4620      	mov	r0, r4
   bf0f0:	f001 f860 	bl	c01b4 <_Bfree>
   bf0f4:	e5dc      	b.n	becb0 <_strtod_l+0x88>
   bf0f6:	4b36      	ldr	r3, [pc, #216]	; (bf1d0 <_strtod_l+0x5a8>)
   bf0f8:	9304      	str	r3, [sp, #16]
   bf0fa:	2300      	movs	r3, #0
   bf0fc:	ea4f 1828 	mov.w	r8, r8, asr #4
   bf100:	4650      	mov	r0, sl
   bf102:	4659      	mov	r1, fp
   bf104:	4699      	mov	r9, r3
   bf106:	f1b8 0f01 	cmp.w	r8, #1
   bf10a:	dc21      	bgt.n	bf150 <_strtod_l+0x528>
   bf10c:	b10b      	cbz	r3, bf112 <_strtod_l+0x4ea>
   bf10e:	4682      	mov	sl, r0
   bf110:	468b      	mov	fp, r1
   bf112:	4b2f      	ldr	r3, [pc, #188]	; (bf1d0 <_strtod_l+0x5a8>)
   bf114:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bf118:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bf11c:	4652      	mov	r2, sl
   bf11e:	465b      	mov	r3, fp
   bf120:	e9d9 0100 	ldrd	r0, r1, [r9]
   bf124:	f7ff f906 	bl	be334 <__aeabi_dmul>
   bf128:	4b2a      	ldr	r3, [pc, #168]	; (bf1d4 <_strtod_l+0x5ac>)
   bf12a:	460a      	mov	r2, r1
   bf12c:	400b      	ands	r3, r1
   bf12e:	492a      	ldr	r1, [pc, #168]	; (bf1d8 <_strtod_l+0x5b0>)
   bf130:	428b      	cmp	r3, r1
   bf132:	4682      	mov	sl, r0
   bf134:	d8bc      	bhi.n	bf0b0 <_strtod_l+0x488>
   bf136:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bf13a:	428b      	cmp	r3, r1
   bf13c:	bf86      	itte	hi
   bf13e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bf1dc <_strtod_l+0x5b4>
   bf142:	f04f 3aff 	movhi.w	sl, #4294967295
   bf146:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bf14a:	2300      	movs	r3, #0
   bf14c:	9304      	str	r3, [sp, #16]
   bf14e:	e084      	b.n	bf25a <_strtod_l+0x632>
   bf150:	f018 0f01 	tst.w	r8, #1
   bf154:	d005      	beq.n	bf162 <_strtod_l+0x53a>
   bf156:	9b04      	ldr	r3, [sp, #16]
   bf158:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf15c:	f7ff f8ea 	bl	be334 <__aeabi_dmul>
   bf160:	2301      	movs	r3, #1
   bf162:	9a04      	ldr	r2, [sp, #16]
   bf164:	3208      	adds	r2, #8
   bf166:	f109 0901 	add.w	r9, r9, #1
   bf16a:	ea4f 0868 	mov.w	r8, r8, asr #1
   bf16e:	9204      	str	r2, [sp, #16]
   bf170:	e7c9      	b.n	bf106 <_strtod_l+0x4de>
   bf172:	d0ea      	beq.n	bf14a <_strtod_l+0x522>
   bf174:	f1c8 0800 	rsb	r8, r8, #0
   bf178:	f018 020f 	ands.w	r2, r8, #15
   bf17c:	d00a      	beq.n	bf194 <_strtod_l+0x56c>
   bf17e:	4b13      	ldr	r3, [pc, #76]	; (bf1cc <_strtod_l+0x5a4>)
   bf180:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bf184:	4650      	mov	r0, sl
   bf186:	4659      	mov	r1, fp
   bf188:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf18c:	f7ff f9fc 	bl	be588 <__aeabi_ddiv>
   bf190:	4682      	mov	sl, r0
   bf192:	468b      	mov	fp, r1
   bf194:	ea5f 1828 	movs.w	r8, r8, asr #4
   bf198:	d0d7      	beq.n	bf14a <_strtod_l+0x522>
   bf19a:	f1b8 0f1f 	cmp.w	r8, #31
   bf19e:	dd1f      	ble.n	bf1e0 <_strtod_l+0x5b8>
   bf1a0:	2500      	movs	r5, #0
   bf1a2:	462e      	mov	r6, r5
   bf1a4:	9507      	str	r5, [sp, #28]
   bf1a6:	9505      	str	r5, [sp, #20]
   bf1a8:	2322      	movs	r3, #34	; 0x22
   bf1aa:	f04f 0a00 	mov.w	sl, #0
   bf1ae:	f04f 0b00 	mov.w	fp, #0
   bf1b2:	6023      	str	r3, [r4, #0]
   bf1b4:	e786      	b.n	bf0c4 <_strtod_l+0x49c>
   bf1b6:	bf00      	nop
   bf1b8:	000c1f2e 	.word	0x000c1f2e
   bf1bc:	000c1f48 	.word	0x000c1f48
   bf1c0:	000c1f25 	.word	0x000c1f25
   bf1c4:	000c1f28 	.word	0x000c1f28
   bf1c8:	000c0c12 	.word	0x000c0c12
   bf1cc:	000c21e0 	.word	0x000c21e0
   bf1d0:	000c21b8 	.word	0x000c21b8
   bf1d4:	7ff00000 	.word	0x7ff00000
   bf1d8:	7ca00000 	.word	0x7ca00000
   bf1dc:	7fefffff 	.word	0x7fefffff
   bf1e0:	f018 0310 	ands.w	r3, r8, #16
   bf1e4:	bf18      	it	ne
   bf1e6:	236a      	movne	r3, #106	; 0x6a
   bf1e8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bf598 <_strtod_l+0x970>
   bf1ec:	9304      	str	r3, [sp, #16]
   bf1ee:	4650      	mov	r0, sl
   bf1f0:	4659      	mov	r1, fp
   bf1f2:	2300      	movs	r3, #0
   bf1f4:	f018 0f01 	tst.w	r8, #1
   bf1f8:	d004      	beq.n	bf204 <_strtod_l+0x5dc>
   bf1fa:	e9d9 2300 	ldrd	r2, r3, [r9]
   bf1fe:	f7ff f899 	bl	be334 <__aeabi_dmul>
   bf202:	2301      	movs	r3, #1
   bf204:	ea5f 0868 	movs.w	r8, r8, asr #1
   bf208:	f109 0908 	add.w	r9, r9, #8
   bf20c:	d1f2      	bne.n	bf1f4 <_strtod_l+0x5cc>
   bf20e:	b10b      	cbz	r3, bf214 <_strtod_l+0x5ec>
   bf210:	4682      	mov	sl, r0
   bf212:	468b      	mov	fp, r1
   bf214:	9b04      	ldr	r3, [sp, #16]
   bf216:	b1c3      	cbz	r3, bf24a <_strtod_l+0x622>
   bf218:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bf21c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bf220:	2b00      	cmp	r3, #0
   bf222:	4659      	mov	r1, fp
   bf224:	dd11      	ble.n	bf24a <_strtod_l+0x622>
   bf226:	2b1f      	cmp	r3, #31
   bf228:	f340 8124 	ble.w	bf474 <_strtod_l+0x84c>
   bf22c:	2b34      	cmp	r3, #52	; 0x34
   bf22e:	bfde      	ittt	le
   bf230:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bf234:	f04f 33ff 	movle.w	r3, #4294967295
   bf238:	fa03 f202 	lslle.w	r2, r3, r2
   bf23c:	f04f 0a00 	mov.w	sl, #0
   bf240:	bfcc      	ite	gt
   bf242:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bf246:	ea02 0b01 	andle.w	fp, r2, r1
   bf24a:	2200      	movs	r2, #0
   bf24c:	2300      	movs	r3, #0
   bf24e:	4650      	mov	r0, sl
   bf250:	4659      	mov	r1, fp
   bf252:	f7ff fad7 	bl	be804 <__aeabi_dcmpeq>
   bf256:	2800      	cmp	r0, #0
   bf258:	d1a2      	bne.n	bf1a0 <_strtod_l+0x578>
   bf25a:	9b07      	ldr	r3, [sp, #28]
   bf25c:	9300      	str	r3, [sp, #0]
   bf25e:	9908      	ldr	r1, [sp, #32]
   bf260:	462b      	mov	r3, r5
   bf262:	463a      	mov	r2, r7
   bf264:	4620      	mov	r0, r4
   bf266:	f001 f80d 	bl	c0284 <__s2b>
   bf26a:	9007      	str	r0, [sp, #28]
   bf26c:	2800      	cmp	r0, #0
   bf26e:	f43f af1f 	beq.w	bf0b0 <_strtod_l+0x488>
   bf272:	9b05      	ldr	r3, [sp, #20]
   bf274:	1b9e      	subs	r6, r3, r6
   bf276:	9b06      	ldr	r3, [sp, #24]
   bf278:	2b00      	cmp	r3, #0
   bf27a:	bfb4      	ite	lt
   bf27c:	4633      	movlt	r3, r6
   bf27e:	2300      	movge	r3, #0
   bf280:	930c      	str	r3, [sp, #48]	; 0x30
   bf282:	9b06      	ldr	r3, [sp, #24]
   bf284:	2500      	movs	r5, #0
   bf286:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bf28a:	9312      	str	r3, [sp, #72]	; 0x48
   bf28c:	462e      	mov	r6, r5
   bf28e:	9b07      	ldr	r3, [sp, #28]
   bf290:	4620      	mov	r0, r4
   bf292:	6859      	ldr	r1, [r3, #4]
   bf294:	f000 ff4e 	bl	c0134 <_Balloc>
   bf298:	9005      	str	r0, [sp, #20]
   bf29a:	2800      	cmp	r0, #0
   bf29c:	f43f af0c 	beq.w	bf0b8 <_strtod_l+0x490>
   bf2a0:	9b07      	ldr	r3, [sp, #28]
   bf2a2:	691a      	ldr	r2, [r3, #16]
   bf2a4:	3202      	adds	r2, #2
   bf2a6:	f103 010c 	add.w	r1, r3, #12
   bf2aa:	0092      	lsls	r2, r2, #2
   bf2ac:	300c      	adds	r0, #12
   bf2ae:	f7ff fb86 	bl	be9be <memcpy>
   bf2b2:	ec4b ab10 	vmov	d0, sl, fp
   bf2b6:	aa1a      	add	r2, sp, #104	; 0x68
   bf2b8:	a919      	add	r1, sp, #100	; 0x64
   bf2ba:	4620      	mov	r0, r4
   bf2bc:	f001 fb28 	bl	c0910 <__d2b>
   bf2c0:	ec4b ab18 	vmov	d8, sl, fp
   bf2c4:	9018      	str	r0, [sp, #96]	; 0x60
   bf2c6:	2800      	cmp	r0, #0
   bf2c8:	f43f aef6 	beq.w	bf0b8 <_strtod_l+0x490>
   bf2cc:	2101      	movs	r1, #1
   bf2ce:	4620      	mov	r0, r4
   bf2d0:	f001 f872 	bl	c03b8 <__i2b>
   bf2d4:	4606      	mov	r6, r0
   bf2d6:	2800      	cmp	r0, #0
   bf2d8:	f43f aeee 	beq.w	bf0b8 <_strtod_l+0x490>
   bf2dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bf2de:	9904      	ldr	r1, [sp, #16]
   bf2e0:	2b00      	cmp	r3, #0
   bf2e2:	bfab      	itete	ge
   bf2e4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bf2e6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bf2e8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bf2ea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bf2ee:	bfac      	ite	ge
   bf2f0:	eb03 0902 	addge.w	r9, r3, r2
   bf2f4:	1ad7      	sublt	r7, r2, r3
   bf2f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bf2f8:	eba3 0801 	sub.w	r8, r3, r1
   bf2fc:	4490      	add	r8, r2
   bf2fe:	4ba1      	ldr	r3, [pc, #644]	; (bf584 <_strtod_l+0x95c>)
   bf300:	f108 38ff 	add.w	r8, r8, #4294967295
   bf304:	4598      	cmp	r8, r3
   bf306:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bf30a:	f280 80c7 	bge.w	bf49c <_strtod_l+0x874>
   bf30e:	eba3 0308 	sub.w	r3, r3, r8
   bf312:	2b1f      	cmp	r3, #31
   bf314:	eba2 0203 	sub.w	r2, r2, r3
   bf318:	f04f 0101 	mov.w	r1, #1
   bf31c:	f300 80b1 	bgt.w	bf482 <_strtod_l+0x85a>
   bf320:	fa01 f303 	lsl.w	r3, r1, r3
   bf324:	930d      	str	r3, [sp, #52]	; 0x34
   bf326:	2300      	movs	r3, #0
   bf328:	9308      	str	r3, [sp, #32]
   bf32a:	eb09 0802 	add.w	r8, r9, r2
   bf32e:	9b04      	ldr	r3, [sp, #16]
   bf330:	45c1      	cmp	r9, r8
   bf332:	4417      	add	r7, r2
   bf334:	441f      	add	r7, r3
   bf336:	464b      	mov	r3, r9
   bf338:	bfa8      	it	ge
   bf33a:	4643      	movge	r3, r8
   bf33c:	42bb      	cmp	r3, r7
   bf33e:	bfa8      	it	ge
   bf340:	463b      	movge	r3, r7
   bf342:	2b00      	cmp	r3, #0
   bf344:	bfc2      	ittt	gt
   bf346:	eba8 0803 	subgt.w	r8, r8, r3
   bf34a:	1aff      	subgt	r7, r7, r3
   bf34c:	eba9 0903 	subgt.w	r9, r9, r3
   bf350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bf352:	2b00      	cmp	r3, #0
   bf354:	dd17      	ble.n	bf386 <_strtod_l+0x75e>
   bf356:	4631      	mov	r1, r6
   bf358:	461a      	mov	r2, r3
   bf35a:	4620      	mov	r0, r4
   bf35c:	f001 f8ec 	bl	c0538 <__pow5mult>
   bf360:	4606      	mov	r6, r0
   bf362:	2800      	cmp	r0, #0
   bf364:	f43f aea8 	beq.w	bf0b8 <_strtod_l+0x490>
   bf368:	4601      	mov	r1, r0
   bf36a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bf36c:	4620      	mov	r0, r4
   bf36e:	f001 f839 	bl	c03e4 <__multiply>
   bf372:	900b      	str	r0, [sp, #44]	; 0x2c
   bf374:	2800      	cmp	r0, #0
   bf376:	f43f ae9f 	beq.w	bf0b8 <_strtod_l+0x490>
   bf37a:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf37c:	4620      	mov	r0, r4
   bf37e:	f000 ff19 	bl	c01b4 <_Bfree>
   bf382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf384:	9318      	str	r3, [sp, #96]	; 0x60
   bf386:	f1b8 0f00 	cmp.w	r8, #0
   bf38a:	f300 808c 	bgt.w	bf4a6 <_strtod_l+0x87e>
   bf38e:	9b06      	ldr	r3, [sp, #24]
   bf390:	2b00      	cmp	r3, #0
   bf392:	dd08      	ble.n	bf3a6 <_strtod_l+0x77e>
   bf394:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bf396:	9905      	ldr	r1, [sp, #20]
   bf398:	4620      	mov	r0, r4
   bf39a:	f001 f8cd 	bl	c0538 <__pow5mult>
   bf39e:	9005      	str	r0, [sp, #20]
   bf3a0:	2800      	cmp	r0, #0
   bf3a2:	f43f ae89 	beq.w	bf0b8 <_strtod_l+0x490>
   bf3a6:	2f00      	cmp	r7, #0
   bf3a8:	dd08      	ble.n	bf3bc <_strtod_l+0x794>
   bf3aa:	9905      	ldr	r1, [sp, #20]
   bf3ac:	463a      	mov	r2, r7
   bf3ae:	4620      	mov	r0, r4
   bf3b0:	f001 f91c 	bl	c05ec <__lshift>
   bf3b4:	9005      	str	r0, [sp, #20]
   bf3b6:	2800      	cmp	r0, #0
   bf3b8:	f43f ae7e 	beq.w	bf0b8 <_strtod_l+0x490>
   bf3bc:	f1b9 0f00 	cmp.w	r9, #0
   bf3c0:	dd08      	ble.n	bf3d4 <_strtod_l+0x7ac>
   bf3c2:	4631      	mov	r1, r6
   bf3c4:	464a      	mov	r2, r9
   bf3c6:	4620      	mov	r0, r4
   bf3c8:	f001 f910 	bl	c05ec <__lshift>
   bf3cc:	4606      	mov	r6, r0
   bf3ce:	2800      	cmp	r0, #0
   bf3d0:	f43f ae72 	beq.w	bf0b8 <_strtod_l+0x490>
   bf3d4:	9a05      	ldr	r2, [sp, #20]
   bf3d6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf3d8:	4620      	mov	r0, r4
   bf3da:	f001 f993 	bl	c0704 <__mdiff>
   bf3de:	4605      	mov	r5, r0
   bf3e0:	2800      	cmp	r0, #0
   bf3e2:	f43f ae69 	beq.w	bf0b8 <_strtod_l+0x490>
   bf3e6:	68c3      	ldr	r3, [r0, #12]
   bf3e8:	930b      	str	r3, [sp, #44]	; 0x2c
   bf3ea:	2300      	movs	r3, #0
   bf3ec:	60c3      	str	r3, [r0, #12]
   bf3ee:	4631      	mov	r1, r6
   bf3f0:	f001 f96c 	bl	c06cc <__mcmp>
   bf3f4:	2800      	cmp	r0, #0
   bf3f6:	da60      	bge.n	bf4ba <_strtod_l+0x892>
   bf3f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf3fa:	ea53 030a 	orrs.w	r3, r3, sl
   bf3fe:	f040 8082 	bne.w	bf506 <_strtod_l+0x8de>
   bf402:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bf406:	2b00      	cmp	r3, #0
   bf408:	d17d      	bne.n	bf506 <_strtod_l+0x8de>
   bf40a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bf40e:	0d1b      	lsrs	r3, r3, #20
   bf410:	051b      	lsls	r3, r3, #20
   bf412:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bf416:	d976      	bls.n	bf506 <_strtod_l+0x8de>
   bf418:	696b      	ldr	r3, [r5, #20]
   bf41a:	b913      	cbnz	r3, bf422 <_strtod_l+0x7fa>
   bf41c:	692b      	ldr	r3, [r5, #16]
   bf41e:	2b01      	cmp	r3, #1
   bf420:	dd71      	ble.n	bf506 <_strtod_l+0x8de>
   bf422:	4629      	mov	r1, r5
   bf424:	2201      	movs	r2, #1
   bf426:	4620      	mov	r0, r4
   bf428:	f001 f8e0 	bl	c05ec <__lshift>
   bf42c:	4631      	mov	r1, r6
   bf42e:	4605      	mov	r5, r0
   bf430:	f001 f94c 	bl	c06cc <__mcmp>
   bf434:	2800      	cmp	r0, #0
   bf436:	dd66      	ble.n	bf506 <_strtod_l+0x8de>
   bf438:	9904      	ldr	r1, [sp, #16]
   bf43a:	4a53      	ldr	r2, [pc, #332]	; (bf588 <_strtod_l+0x960>)
   bf43c:	465b      	mov	r3, fp
   bf43e:	2900      	cmp	r1, #0
   bf440:	f000 8081 	beq.w	bf546 <_strtod_l+0x91e>
   bf444:	ea02 010b 	and.w	r1, r2, fp
   bf448:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bf44c:	dc7b      	bgt.n	bf546 <_strtod_l+0x91e>
   bf44e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bf452:	f77f aea9 	ble.w	bf1a8 <_strtod_l+0x580>
   bf456:	4b4d      	ldr	r3, [pc, #308]	; (bf58c <_strtod_l+0x964>)
   bf458:	4650      	mov	r0, sl
   bf45a:	4659      	mov	r1, fp
   bf45c:	2200      	movs	r2, #0
   bf45e:	f7fe ff69 	bl	be334 <__aeabi_dmul>
   bf462:	460b      	mov	r3, r1
   bf464:	4303      	orrs	r3, r0
   bf466:	bf08      	it	eq
   bf468:	2322      	moveq	r3, #34	; 0x22
   bf46a:	4682      	mov	sl, r0
   bf46c:	468b      	mov	fp, r1
   bf46e:	bf08      	it	eq
   bf470:	6023      	streq	r3, [r4, #0]
   bf472:	e62b      	b.n	bf0cc <_strtod_l+0x4a4>
   bf474:	f04f 32ff 	mov.w	r2, #4294967295
   bf478:	fa02 f303 	lsl.w	r3, r2, r3
   bf47c:	ea03 0a0a 	and.w	sl, r3, sl
   bf480:	e6e3      	b.n	bf24a <_strtod_l+0x622>
   bf482:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bf486:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bf48a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bf48e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bf492:	fa01 f308 	lsl.w	r3, r1, r8
   bf496:	9308      	str	r3, [sp, #32]
   bf498:	910d      	str	r1, [sp, #52]	; 0x34
   bf49a:	e746      	b.n	bf32a <_strtod_l+0x702>
   bf49c:	2300      	movs	r3, #0
   bf49e:	9308      	str	r3, [sp, #32]
   bf4a0:	2301      	movs	r3, #1
   bf4a2:	930d      	str	r3, [sp, #52]	; 0x34
   bf4a4:	e741      	b.n	bf32a <_strtod_l+0x702>
   bf4a6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf4a8:	4642      	mov	r2, r8
   bf4aa:	4620      	mov	r0, r4
   bf4ac:	f001 f89e 	bl	c05ec <__lshift>
   bf4b0:	9018      	str	r0, [sp, #96]	; 0x60
   bf4b2:	2800      	cmp	r0, #0
   bf4b4:	f47f af6b 	bne.w	bf38e <_strtod_l+0x766>
   bf4b8:	e5fe      	b.n	bf0b8 <_strtod_l+0x490>
   bf4ba:	465f      	mov	r7, fp
   bf4bc:	d16e      	bne.n	bf59c <_strtod_l+0x974>
   bf4be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bf4c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bf4c4:	b342      	cbz	r2, bf518 <_strtod_l+0x8f0>
   bf4c6:	4a32      	ldr	r2, [pc, #200]	; (bf590 <_strtod_l+0x968>)
   bf4c8:	4293      	cmp	r3, r2
   bf4ca:	d128      	bne.n	bf51e <_strtod_l+0x8f6>
   bf4cc:	9b04      	ldr	r3, [sp, #16]
   bf4ce:	4651      	mov	r1, sl
   bf4d0:	b1eb      	cbz	r3, bf50e <_strtod_l+0x8e6>
   bf4d2:	4b2d      	ldr	r3, [pc, #180]	; (bf588 <_strtod_l+0x960>)
   bf4d4:	403b      	ands	r3, r7
   bf4d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bf4da:	f04f 32ff 	mov.w	r2, #4294967295
   bf4de:	d819      	bhi.n	bf514 <_strtod_l+0x8ec>
   bf4e0:	0d1b      	lsrs	r3, r3, #20
   bf4e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bf4e6:	fa02 f303 	lsl.w	r3, r2, r3
   bf4ea:	4299      	cmp	r1, r3
   bf4ec:	d117      	bne.n	bf51e <_strtod_l+0x8f6>
   bf4ee:	4b29      	ldr	r3, [pc, #164]	; (bf594 <_strtod_l+0x96c>)
   bf4f0:	429f      	cmp	r7, r3
   bf4f2:	d102      	bne.n	bf4fa <_strtod_l+0x8d2>
   bf4f4:	3101      	adds	r1, #1
   bf4f6:	f43f addf 	beq.w	bf0b8 <_strtod_l+0x490>
   bf4fa:	4b23      	ldr	r3, [pc, #140]	; (bf588 <_strtod_l+0x960>)
   bf4fc:	403b      	ands	r3, r7
   bf4fe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bf502:	f04f 0a00 	mov.w	sl, #0
   bf506:	9b04      	ldr	r3, [sp, #16]
   bf508:	2b00      	cmp	r3, #0
   bf50a:	d1a4      	bne.n	bf456 <_strtod_l+0x82e>
   bf50c:	e5de      	b.n	bf0cc <_strtod_l+0x4a4>
   bf50e:	f04f 33ff 	mov.w	r3, #4294967295
   bf512:	e7ea      	b.n	bf4ea <_strtod_l+0x8c2>
   bf514:	4613      	mov	r3, r2
   bf516:	e7e8      	b.n	bf4ea <_strtod_l+0x8c2>
   bf518:	ea53 030a 	orrs.w	r3, r3, sl
   bf51c:	d08c      	beq.n	bf438 <_strtod_l+0x810>
   bf51e:	9b08      	ldr	r3, [sp, #32]
   bf520:	b1db      	cbz	r3, bf55a <_strtod_l+0x932>
   bf522:	423b      	tst	r3, r7
   bf524:	d0ef      	beq.n	bf506 <_strtod_l+0x8de>
   bf526:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf528:	9a04      	ldr	r2, [sp, #16]
   bf52a:	4650      	mov	r0, sl
   bf52c:	4659      	mov	r1, fp
   bf52e:	b1c3      	cbz	r3, bf562 <_strtod_l+0x93a>
   bf530:	f7ff fb5c 	bl	bebec <sulp>
   bf534:	4602      	mov	r2, r0
   bf536:	460b      	mov	r3, r1
   bf538:	ec51 0b18 	vmov	r0, r1, d8
   bf53c:	f7fe fd44 	bl	bdfc8 <__adddf3>
   bf540:	4682      	mov	sl, r0
   bf542:	468b      	mov	fp, r1
   bf544:	e7df      	b.n	bf506 <_strtod_l+0x8de>
   bf546:	4013      	ands	r3, r2
   bf548:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bf54c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bf550:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bf554:	f04f 3aff 	mov.w	sl, #4294967295
   bf558:	e7d5      	b.n	bf506 <_strtod_l+0x8de>
   bf55a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bf55c:	ea13 0f0a 	tst.w	r3, sl
   bf560:	e7e0      	b.n	bf524 <_strtod_l+0x8fc>
   bf562:	f7ff fb43 	bl	bebec <sulp>
   bf566:	4602      	mov	r2, r0
   bf568:	460b      	mov	r3, r1
   bf56a:	ec51 0b18 	vmov	r0, r1, d8
   bf56e:	f7fe fd29 	bl	bdfc4 <__aeabi_dsub>
   bf572:	2200      	movs	r2, #0
   bf574:	2300      	movs	r3, #0
   bf576:	4682      	mov	sl, r0
   bf578:	468b      	mov	fp, r1
   bf57a:	f7ff f943 	bl	be804 <__aeabi_dcmpeq>
   bf57e:	2800      	cmp	r0, #0
   bf580:	d0c1      	beq.n	bf506 <_strtod_l+0x8de>
   bf582:	e611      	b.n	bf1a8 <_strtod_l+0x580>
   bf584:	fffffc02 	.word	0xfffffc02
   bf588:	7ff00000 	.word	0x7ff00000
   bf58c:	39500000 	.word	0x39500000
   bf590:	000fffff 	.word	0x000fffff
   bf594:	7fefffff 	.word	0x7fefffff
   bf598:	000c1f60 	.word	0x000c1f60
   bf59c:	4631      	mov	r1, r6
   bf59e:	4628      	mov	r0, r5
   bf5a0:	f001 fa12 	bl	c09c8 <__ratio>
   bf5a4:	ec59 8b10 	vmov	r8, r9, d0
   bf5a8:	ee10 0a10 	vmov	r0, s0
   bf5ac:	2200      	movs	r2, #0
   bf5ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bf5b2:	4649      	mov	r1, r9
   bf5b4:	f7ff f93a 	bl	be82c <__aeabi_dcmple>
   bf5b8:	2800      	cmp	r0, #0
   bf5ba:	d07a      	beq.n	bf6b2 <_strtod_l+0xa8a>
   bf5bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf5be:	2b00      	cmp	r3, #0
   bf5c0:	d04a      	beq.n	bf658 <_strtod_l+0xa30>
   bf5c2:	4b95      	ldr	r3, [pc, #596]	; (bf818 <_strtod_l+0xbf0>)
   bf5c4:	2200      	movs	r2, #0
   bf5c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bf5ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; bf818 <_strtod_l+0xbf0>
   bf5ce:	f04f 0800 	mov.w	r8, #0
   bf5d2:	4b92      	ldr	r3, [pc, #584]	; (bf81c <_strtod_l+0xbf4>)
   bf5d4:	403b      	ands	r3, r7
   bf5d6:	930d      	str	r3, [sp, #52]	; 0x34
   bf5d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bf5da:	4b91      	ldr	r3, [pc, #580]	; (bf820 <_strtod_l+0xbf8>)
   bf5dc:	429a      	cmp	r2, r3
   bf5de:	f040 80b0 	bne.w	bf742 <_strtod_l+0xb1a>
   bf5e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bf5e6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bf5ea:	ec4b ab10 	vmov	d0, sl, fp
   bf5ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bf5f2:	f001 f911 	bl	c0818 <__ulp>
   bf5f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bf5fa:	ec53 2b10 	vmov	r2, r3, d0
   bf5fe:	f7fe fe99 	bl	be334 <__aeabi_dmul>
   bf602:	4652      	mov	r2, sl
   bf604:	465b      	mov	r3, fp
   bf606:	f7fe fcdf 	bl	bdfc8 <__adddf3>
   bf60a:	460b      	mov	r3, r1
   bf60c:	4983      	ldr	r1, [pc, #524]	; (bf81c <_strtod_l+0xbf4>)
   bf60e:	4a85      	ldr	r2, [pc, #532]	; (bf824 <_strtod_l+0xbfc>)
   bf610:	4019      	ands	r1, r3
   bf612:	4291      	cmp	r1, r2
   bf614:	4682      	mov	sl, r0
   bf616:	d960      	bls.n	bf6da <_strtod_l+0xab2>
   bf618:	ee18 3a90 	vmov	r3, s17
   bf61c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bf620:	4293      	cmp	r3, r2
   bf622:	d104      	bne.n	bf62e <_strtod_l+0xa06>
   bf624:	ee18 3a10 	vmov	r3, s16
   bf628:	3301      	adds	r3, #1
   bf62a:	f43f ad45 	beq.w	bf0b8 <_strtod_l+0x490>
   bf62e:	f8df b200 	ldr.w	fp, [pc, #512]	; bf830 <_strtod_l+0xc08>
   bf632:	f04f 3aff 	mov.w	sl, #4294967295
   bf636:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf638:	4620      	mov	r0, r4
   bf63a:	f000 fdbb 	bl	c01b4 <_Bfree>
   bf63e:	9905      	ldr	r1, [sp, #20]
   bf640:	4620      	mov	r0, r4
   bf642:	f000 fdb7 	bl	c01b4 <_Bfree>
   bf646:	4631      	mov	r1, r6
   bf648:	4620      	mov	r0, r4
   bf64a:	f000 fdb3 	bl	c01b4 <_Bfree>
   bf64e:	4629      	mov	r1, r5
   bf650:	4620      	mov	r0, r4
   bf652:	f000 fdaf 	bl	c01b4 <_Bfree>
   bf656:	e61a      	b.n	bf28e <_strtod_l+0x666>
   bf658:	f1ba 0f00 	cmp.w	sl, #0
   bf65c:	d11b      	bne.n	bf696 <_strtod_l+0xa6e>
   bf65e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bf662:	b9f3      	cbnz	r3, bf6a2 <_strtod_l+0xa7a>
   bf664:	4b6c      	ldr	r3, [pc, #432]	; (bf818 <_strtod_l+0xbf0>)
   bf666:	2200      	movs	r2, #0
   bf668:	4640      	mov	r0, r8
   bf66a:	4649      	mov	r1, r9
   bf66c:	f7ff f8d4 	bl	be818 <__aeabi_dcmplt>
   bf670:	b9d0      	cbnz	r0, bf6a8 <_strtod_l+0xa80>
   bf672:	4640      	mov	r0, r8
   bf674:	4649      	mov	r1, r9
   bf676:	4b6c      	ldr	r3, [pc, #432]	; (bf828 <_strtod_l+0xc00>)
   bf678:	2200      	movs	r2, #0
   bf67a:	f7fe fe5b 	bl	be334 <__aeabi_dmul>
   bf67e:	4680      	mov	r8, r0
   bf680:	4689      	mov	r9, r1
   bf682:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bf686:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bf68a:	9315      	str	r3, [sp, #84]	; 0x54
   bf68c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bf690:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bf694:	e79d      	b.n	bf5d2 <_strtod_l+0x9aa>
   bf696:	f1ba 0f01 	cmp.w	sl, #1
   bf69a:	d102      	bne.n	bf6a2 <_strtod_l+0xa7a>
   bf69c:	2f00      	cmp	r7, #0
   bf69e:	f43f ad83 	beq.w	bf1a8 <_strtod_l+0x580>
   bf6a2:	4b62      	ldr	r3, [pc, #392]	; (bf82c <_strtod_l+0xc04>)
   bf6a4:	2200      	movs	r2, #0
   bf6a6:	e78e      	b.n	bf5c6 <_strtod_l+0x99e>
   bf6a8:	f8df 917c 	ldr.w	r9, [pc, #380]	; bf828 <_strtod_l+0xc00>
   bf6ac:	f04f 0800 	mov.w	r8, #0
   bf6b0:	e7e7      	b.n	bf682 <_strtod_l+0xa5a>
   bf6b2:	4b5d      	ldr	r3, [pc, #372]	; (bf828 <_strtod_l+0xc00>)
   bf6b4:	4640      	mov	r0, r8
   bf6b6:	4649      	mov	r1, r9
   bf6b8:	2200      	movs	r2, #0
   bf6ba:	f7fe fe3b 	bl	be334 <__aeabi_dmul>
   bf6be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf6c0:	4680      	mov	r8, r0
   bf6c2:	4689      	mov	r9, r1
   bf6c4:	b933      	cbnz	r3, bf6d4 <_strtod_l+0xaac>
   bf6c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bf6ca:	900e      	str	r0, [sp, #56]	; 0x38
   bf6cc:	930f      	str	r3, [sp, #60]	; 0x3c
   bf6ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bf6d2:	e7dd      	b.n	bf690 <_strtod_l+0xa68>
   bf6d4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bf6d8:	e7f9      	b.n	bf6ce <_strtod_l+0xaa6>
   bf6da:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bf6de:	9b04      	ldr	r3, [sp, #16]
   bf6e0:	2b00      	cmp	r3, #0
   bf6e2:	d1a8      	bne.n	bf636 <_strtod_l+0xa0e>
   bf6e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bf6e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bf6ea:	0d1b      	lsrs	r3, r3, #20
   bf6ec:	051b      	lsls	r3, r3, #20
   bf6ee:	429a      	cmp	r2, r3
   bf6f0:	d1a1      	bne.n	bf636 <_strtod_l+0xa0e>
   bf6f2:	4640      	mov	r0, r8
   bf6f4:	4649      	mov	r1, r9
   bf6f6:	f001 fa05 	bl	c0b04 <__aeabi_d2lz>
   bf6fa:	f7fe fded 	bl	be2d8 <__aeabi_l2d>
   bf6fe:	4602      	mov	r2, r0
   bf700:	460b      	mov	r3, r1
   bf702:	4640      	mov	r0, r8
   bf704:	4649      	mov	r1, r9
   bf706:	f7fe fc5d 	bl	bdfc4 <__aeabi_dsub>
   bf70a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bf70c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bf710:	ea43 030a 	orr.w	r3, r3, sl
   bf714:	4313      	orrs	r3, r2
   bf716:	4680      	mov	r8, r0
   bf718:	4689      	mov	r9, r1
   bf71a:	d055      	beq.n	bf7c8 <_strtod_l+0xba0>
   bf71c:	a336      	add	r3, pc, #216	; (adr r3, bf7f8 <_strtod_l+0xbd0>)
   bf71e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf722:	f7ff f879 	bl	be818 <__aeabi_dcmplt>
   bf726:	2800      	cmp	r0, #0
   bf728:	f47f acd0 	bne.w	bf0cc <_strtod_l+0x4a4>
   bf72c:	a334      	add	r3, pc, #208	; (adr r3, bf800 <_strtod_l+0xbd8>)
   bf72e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf732:	4640      	mov	r0, r8
   bf734:	4649      	mov	r1, r9
   bf736:	f7ff f88d 	bl	be854 <__aeabi_dcmpgt>
   bf73a:	2800      	cmp	r0, #0
   bf73c:	f43f af7b 	beq.w	bf636 <_strtod_l+0xa0e>
   bf740:	e4c4      	b.n	bf0cc <_strtod_l+0x4a4>
   bf742:	9b04      	ldr	r3, [sp, #16]
   bf744:	b333      	cbz	r3, bf794 <_strtod_l+0xb6c>
   bf746:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bf748:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bf74c:	d822      	bhi.n	bf794 <_strtod_l+0xb6c>
   bf74e:	a32e      	add	r3, pc, #184	; (adr r3, bf808 <_strtod_l+0xbe0>)
   bf750:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf754:	4640      	mov	r0, r8
   bf756:	4649      	mov	r1, r9
   bf758:	f7ff f868 	bl	be82c <__aeabi_dcmple>
   bf75c:	b1a0      	cbz	r0, bf788 <_strtod_l+0xb60>
   bf75e:	4649      	mov	r1, r9
   bf760:	4640      	mov	r0, r8
   bf762:	f7ff f881 	bl	be868 <__aeabi_d2uiz>
   bf766:	2801      	cmp	r0, #1
   bf768:	bf38      	it	cc
   bf76a:	2001      	movcc	r0, #1
   bf76c:	f7fe fd68 	bl	be240 <__aeabi_ui2d>
   bf770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf772:	4680      	mov	r8, r0
   bf774:	4689      	mov	r9, r1
   bf776:	bb23      	cbnz	r3, bf7c2 <_strtod_l+0xb9a>
   bf778:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bf77c:	9010      	str	r0, [sp, #64]	; 0x40
   bf77e:	9311      	str	r3, [sp, #68]	; 0x44
   bf780:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bf784:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bf788:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bf78a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bf78c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bf790:	1a9b      	subs	r3, r3, r2
   bf792:	9309      	str	r3, [sp, #36]	; 0x24
   bf794:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bf798:	eeb0 0a48 	vmov.f32	s0, s16
   bf79c:	eef0 0a68 	vmov.f32	s1, s17
   bf7a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bf7a4:	f001 f838 	bl	c0818 <__ulp>
   bf7a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bf7ac:	ec53 2b10 	vmov	r2, r3, d0
   bf7b0:	f7fe fdc0 	bl	be334 <__aeabi_dmul>
   bf7b4:	ec53 2b18 	vmov	r2, r3, d8
   bf7b8:	f7fe fc06 	bl	bdfc8 <__adddf3>
   bf7bc:	4682      	mov	sl, r0
   bf7be:	468b      	mov	fp, r1
   bf7c0:	e78d      	b.n	bf6de <_strtod_l+0xab6>
   bf7c2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bf7c6:	e7db      	b.n	bf780 <_strtod_l+0xb58>
   bf7c8:	a311      	add	r3, pc, #68	; (adr r3, bf810 <_strtod_l+0xbe8>)
   bf7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf7ce:	f7ff f823 	bl	be818 <__aeabi_dcmplt>
   bf7d2:	e7b2      	b.n	bf73a <_strtod_l+0xb12>
   bf7d4:	2300      	movs	r3, #0
   bf7d6:	930a      	str	r3, [sp, #40]	; 0x28
   bf7d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bf7da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bf7dc:	6013      	str	r3, [r2, #0]
   bf7de:	f7ff ba6b 	b.w	becb8 <_strtod_l+0x90>
   bf7e2:	2a65      	cmp	r2, #101	; 0x65
   bf7e4:	f43f ab5f 	beq.w	beea6 <_strtod_l+0x27e>
   bf7e8:	2a45      	cmp	r2, #69	; 0x45
   bf7ea:	f43f ab5c 	beq.w	beea6 <_strtod_l+0x27e>
   bf7ee:	2301      	movs	r3, #1
   bf7f0:	f7ff bb94 	b.w	bef1c <_strtod_l+0x2f4>
   bf7f4:	f3af 8000 	nop.w
   bf7f8:	94a03595 	.word	0x94a03595
   bf7fc:	3fdfffff 	.word	0x3fdfffff
   bf800:	35afe535 	.word	0x35afe535
   bf804:	3fe00000 	.word	0x3fe00000
   bf808:	ffc00000 	.word	0xffc00000
   bf80c:	41dfffff 	.word	0x41dfffff
   bf810:	94a03595 	.word	0x94a03595
   bf814:	3fcfffff 	.word	0x3fcfffff
   bf818:	3ff00000 	.word	0x3ff00000
   bf81c:	7ff00000 	.word	0x7ff00000
   bf820:	7fe00000 	.word	0x7fe00000
   bf824:	7c9fffff 	.word	0x7c9fffff
   bf828:	3fe00000 	.word	0x3fe00000
   bf82c:	bff00000 	.word	0xbff00000
   bf830:	7fefffff 	.word	0x7fefffff

000bf834 <strtod>:
   bf834:	460a      	mov	r2, r1
   bf836:	4601      	mov	r1, r0
   bf838:	4802      	ldr	r0, [pc, #8]	; (bf844 <strtod+0x10>)
   bf83a:	4b03      	ldr	r3, [pc, #12]	; (bf848 <strtod+0x14>)
   bf83c:	6800      	ldr	r0, [r0, #0]
   bf83e:	f7ff b9f3 	b.w	bec28 <_strtod_l>
   bf842:	bf00      	nop
   bf844:	2003da88 	.word	0x2003da88
   bf848:	2003daf4 	.word	0x2003daf4

000bf84c <_strtol_l.constprop.0>:
   bf84c:	2b01      	cmp	r3, #1
   bf84e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bf852:	d001      	beq.n	bf858 <_strtol_l.constprop.0+0xc>
   bf854:	2b24      	cmp	r3, #36	; 0x24
   bf856:	d906      	bls.n	bf866 <_strtol_l.constprop.0+0x1a>
   bf858:	f7fa fba4 	bl	b9fa4 <__errno>
   bf85c:	2316      	movs	r3, #22
   bf85e:	6003      	str	r3, [r0, #0]
   bf860:	2000      	movs	r0, #0
   bf862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bf866:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bf94c <_strtol_l.constprop.0+0x100>
   bf86a:	460d      	mov	r5, r1
   bf86c:	462e      	mov	r6, r5
   bf86e:	f815 4b01 	ldrb.w	r4, [r5], #1
   bf872:	f814 700c 	ldrb.w	r7, [r4, ip]
   bf876:	f017 0708 	ands.w	r7, r7, #8
   bf87a:	d1f7      	bne.n	bf86c <_strtol_l.constprop.0+0x20>
   bf87c:	2c2d      	cmp	r4, #45	; 0x2d
   bf87e:	d132      	bne.n	bf8e6 <_strtol_l.constprop.0+0x9a>
   bf880:	782c      	ldrb	r4, [r5, #0]
   bf882:	2701      	movs	r7, #1
   bf884:	1cb5      	adds	r5, r6, #2
   bf886:	2b00      	cmp	r3, #0
   bf888:	d05b      	beq.n	bf942 <_strtol_l.constprop.0+0xf6>
   bf88a:	2b10      	cmp	r3, #16
   bf88c:	d109      	bne.n	bf8a2 <_strtol_l.constprop.0+0x56>
   bf88e:	2c30      	cmp	r4, #48	; 0x30
   bf890:	d107      	bne.n	bf8a2 <_strtol_l.constprop.0+0x56>
   bf892:	782c      	ldrb	r4, [r5, #0]
   bf894:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bf898:	2c58      	cmp	r4, #88	; 0x58
   bf89a:	d14d      	bne.n	bf938 <_strtol_l.constprop.0+0xec>
   bf89c:	786c      	ldrb	r4, [r5, #1]
   bf89e:	2310      	movs	r3, #16
   bf8a0:	3502      	adds	r5, #2
   bf8a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bf8a6:	f108 38ff 	add.w	r8, r8, #4294967295
   bf8aa:	f04f 0c00 	mov.w	ip, #0
   bf8ae:	fbb8 f9f3 	udiv	r9, r8, r3
   bf8b2:	4666      	mov	r6, ip
   bf8b4:	fb03 8a19 	mls	sl, r3, r9, r8
   bf8b8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bf8bc:	f1be 0f09 	cmp.w	lr, #9
   bf8c0:	d816      	bhi.n	bf8f0 <_strtol_l.constprop.0+0xa4>
   bf8c2:	4674      	mov	r4, lr
   bf8c4:	42a3      	cmp	r3, r4
   bf8c6:	dd24      	ble.n	bf912 <_strtol_l.constprop.0+0xc6>
   bf8c8:	f1bc 0f00 	cmp.w	ip, #0
   bf8cc:	db1e      	blt.n	bf90c <_strtol_l.constprop.0+0xc0>
   bf8ce:	45b1      	cmp	r9, r6
   bf8d0:	d31c      	bcc.n	bf90c <_strtol_l.constprop.0+0xc0>
   bf8d2:	d101      	bne.n	bf8d8 <_strtol_l.constprop.0+0x8c>
   bf8d4:	45a2      	cmp	sl, r4
   bf8d6:	db19      	blt.n	bf90c <_strtol_l.constprop.0+0xc0>
   bf8d8:	fb06 4603 	mla	r6, r6, r3, r4
   bf8dc:	f04f 0c01 	mov.w	ip, #1
   bf8e0:	f815 4b01 	ldrb.w	r4, [r5], #1
   bf8e4:	e7e8      	b.n	bf8b8 <_strtol_l.constprop.0+0x6c>
   bf8e6:	2c2b      	cmp	r4, #43	; 0x2b
   bf8e8:	bf04      	itt	eq
   bf8ea:	782c      	ldrbeq	r4, [r5, #0]
   bf8ec:	1cb5      	addeq	r5, r6, #2
   bf8ee:	e7ca      	b.n	bf886 <_strtol_l.constprop.0+0x3a>
   bf8f0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bf8f4:	f1be 0f19 	cmp.w	lr, #25
   bf8f8:	d801      	bhi.n	bf8fe <_strtol_l.constprop.0+0xb2>
   bf8fa:	3c37      	subs	r4, #55	; 0x37
   bf8fc:	e7e2      	b.n	bf8c4 <_strtol_l.constprop.0+0x78>
   bf8fe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bf902:	f1be 0f19 	cmp.w	lr, #25
   bf906:	d804      	bhi.n	bf912 <_strtol_l.constprop.0+0xc6>
   bf908:	3c57      	subs	r4, #87	; 0x57
   bf90a:	e7db      	b.n	bf8c4 <_strtol_l.constprop.0+0x78>
   bf90c:	f04f 3cff 	mov.w	ip, #4294967295
   bf910:	e7e6      	b.n	bf8e0 <_strtol_l.constprop.0+0x94>
   bf912:	f1bc 0f00 	cmp.w	ip, #0
   bf916:	da05      	bge.n	bf924 <_strtol_l.constprop.0+0xd8>
   bf918:	2322      	movs	r3, #34	; 0x22
   bf91a:	6003      	str	r3, [r0, #0]
   bf91c:	4646      	mov	r6, r8
   bf91e:	b942      	cbnz	r2, bf932 <_strtol_l.constprop.0+0xe6>
   bf920:	4630      	mov	r0, r6
   bf922:	e79e      	b.n	bf862 <_strtol_l.constprop.0+0x16>
   bf924:	b107      	cbz	r7, bf928 <_strtol_l.constprop.0+0xdc>
   bf926:	4276      	negs	r6, r6
   bf928:	2a00      	cmp	r2, #0
   bf92a:	d0f9      	beq.n	bf920 <_strtol_l.constprop.0+0xd4>
   bf92c:	f1bc 0f00 	cmp.w	ip, #0
   bf930:	d000      	beq.n	bf934 <_strtol_l.constprop.0+0xe8>
   bf932:	1e69      	subs	r1, r5, #1
   bf934:	6011      	str	r1, [r2, #0]
   bf936:	e7f3      	b.n	bf920 <_strtol_l.constprop.0+0xd4>
   bf938:	2430      	movs	r4, #48	; 0x30
   bf93a:	2b00      	cmp	r3, #0
   bf93c:	d1b1      	bne.n	bf8a2 <_strtol_l.constprop.0+0x56>
   bf93e:	2308      	movs	r3, #8
   bf940:	e7af      	b.n	bf8a2 <_strtol_l.constprop.0+0x56>
   bf942:	2c30      	cmp	r4, #48	; 0x30
   bf944:	d0a5      	beq.n	bf892 <_strtol_l.constprop.0+0x46>
   bf946:	230a      	movs	r3, #10
   bf948:	e7ab      	b.n	bf8a2 <_strtol_l.constprop.0+0x56>
   bf94a:	bf00      	nop
   bf94c:	000c1f89 	.word	0x000c1f89

000bf950 <strtol>:
   bf950:	4613      	mov	r3, r2
   bf952:	460a      	mov	r2, r1
   bf954:	4601      	mov	r1, r0
   bf956:	4802      	ldr	r0, [pc, #8]	; (bf960 <strtol+0x10>)
   bf958:	6800      	ldr	r0, [r0, #0]
   bf95a:	f7ff bf77 	b.w	bf84c <_strtol_l.constprop.0>
   bf95e:	bf00      	nop
   bf960:	2003da88 	.word	0x2003da88

000bf964 <__register_exitproc>:
   bf964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bf968:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bfa24 <__register_exitproc+0xc0>
   bf96c:	4606      	mov	r6, r0
   bf96e:	f8d8 0000 	ldr.w	r0, [r8]
   bf972:	461f      	mov	r7, r3
   bf974:	460d      	mov	r5, r1
   bf976:	4691      	mov	r9, r2
   bf978:	f000 fbc6 	bl	c0108 <__retarget_lock_acquire_recursive>
   bf97c:	4b25      	ldr	r3, [pc, #148]	; (bfa14 <__register_exitproc+0xb0>)
   bf97e:	681c      	ldr	r4, [r3, #0]
   bf980:	b934      	cbnz	r4, bf990 <__register_exitproc+0x2c>
   bf982:	4c25      	ldr	r4, [pc, #148]	; (bfa18 <__register_exitproc+0xb4>)
   bf984:	601c      	str	r4, [r3, #0]
   bf986:	4b25      	ldr	r3, [pc, #148]	; (bfa1c <__register_exitproc+0xb8>)
   bf988:	b113      	cbz	r3, bf990 <__register_exitproc+0x2c>
   bf98a:	681b      	ldr	r3, [r3, #0]
   bf98c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bf990:	6863      	ldr	r3, [r4, #4]
   bf992:	2b1f      	cmp	r3, #31
   bf994:	dd07      	ble.n	bf9a6 <__register_exitproc+0x42>
   bf996:	f8d8 0000 	ldr.w	r0, [r8]
   bf99a:	f000 fbb7 	bl	c010c <__retarget_lock_release_recursive>
   bf99e:	f04f 30ff 	mov.w	r0, #4294967295
   bf9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bf9a6:	b34e      	cbz	r6, bf9fc <__register_exitproc+0x98>
   bf9a8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bf9ac:	b988      	cbnz	r0, bf9d2 <__register_exitproc+0x6e>
   bf9ae:	4b1c      	ldr	r3, [pc, #112]	; (bfa20 <__register_exitproc+0xbc>)
   bf9b0:	b923      	cbnz	r3, bf9bc <__register_exitproc+0x58>
   bf9b2:	f8d8 0000 	ldr.w	r0, [r8]
   bf9b6:	f000 fba8 	bl	c010a <__retarget_lock_release>
   bf9ba:	e7f0      	b.n	bf99e <__register_exitproc+0x3a>
   bf9bc:	f44f 7084 	mov.w	r0, #264	; 0x108
   bf9c0:	f7fa faa8 	bl	b9f14 <malloc>
   bf9c4:	2800      	cmp	r0, #0
   bf9c6:	d0f4      	beq.n	bf9b2 <__register_exitproc+0x4e>
   bf9c8:	2300      	movs	r3, #0
   bf9ca:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bf9ce:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bf9d2:	6863      	ldr	r3, [r4, #4]
   bf9d4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bf9d8:	2201      	movs	r2, #1
   bf9da:	409a      	lsls	r2, r3
   bf9dc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bf9e0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bf9e4:	4313      	orrs	r3, r2
   bf9e6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bf9ea:	2e02      	cmp	r6, #2
   bf9ec:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bf9f0:	bf02      	ittt	eq
   bf9f2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bf9f6:	4313      	orreq	r3, r2
   bf9f8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bf9fc:	6863      	ldr	r3, [r4, #4]
   bf9fe:	f8d8 0000 	ldr.w	r0, [r8]
   bfa02:	1c5a      	adds	r2, r3, #1
   bfa04:	3302      	adds	r3, #2
   bfa06:	6062      	str	r2, [r4, #4]
   bfa08:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bfa0c:	f000 fb7e 	bl	c010c <__retarget_lock_release_recursive>
   bfa10:	2000      	movs	r0, #0
   bfa12:	e7c6      	b.n	bf9a2 <__register_exitproc+0x3e>
   bfa14:	2003e7e8 	.word	0x2003e7e8
   bfa18:	2003e75c 	.word	0x2003e75c
   bfa1c:	00000000 	.word	0x00000000
   bfa20:	000b9f15 	.word	0x000b9f15
   bfa24:	2003daec 	.word	0x2003daec

000bfa28 <rshift>:
   bfa28:	6903      	ldr	r3, [r0, #16]
   bfa2a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bfa2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bfa32:	ea4f 1261 	mov.w	r2, r1, asr #5
   bfa36:	f100 0414 	add.w	r4, r0, #20
   bfa3a:	dd45      	ble.n	bfac8 <rshift+0xa0>
   bfa3c:	f011 011f 	ands.w	r1, r1, #31
   bfa40:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bfa44:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bfa48:	d10c      	bne.n	bfa64 <rshift+0x3c>
   bfa4a:	f100 0710 	add.w	r7, r0, #16
   bfa4e:	4629      	mov	r1, r5
   bfa50:	42b1      	cmp	r1, r6
   bfa52:	d334      	bcc.n	bfabe <rshift+0x96>
   bfa54:	1a9b      	subs	r3, r3, r2
   bfa56:	009b      	lsls	r3, r3, #2
   bfa58:	1eea      	subs	r2, r5, #3
   bfa5a:	4296      	cmp	r6, r2
   bfa5c:	bf38      	it	cc
   bfa5e:	2300      	movcc	r3, #0
   bfa60:	4423      	add	r3, r4
   bfa62:	e015      	b.n	bfa90 <rshift+0x68>
   bfa64:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bfa68:	f1c1 0820 	rsb	r8, r1, #32
   bfa6c:	40cf      	lsrs	r7, r1
   bfa6e:	f105 0e04 	add.w	lr, r5, #4
   bfa72:	46a1      	mov	r9, r4
   bfa74:	4576      	cmp	r6, lr
   bfa76:	46f4      	mov	ip, lr
   bfa78:	d815      	bhi.n	bfaa6 <rshift+0x7e>
   bfa7a:	1a9a      	subs	r2, r3, r2
   bfa7c:	0092      	lsls	r2, r2, #2
   bfa7e:	3a04      	subs	r2, #4
   bfa80:	3501      	adds	r5, #1
   bfa82:	42ae      	cmp	r6, r5
   bfa84:	bf38      	it	cc
   bfa86:	2200      	movcc	r2, #0
   bfa88:	18a3      	adds	r3, r4, r2
   bfa8a:	50a7      	str	r7, [r4, r2]
   bfa8c:	b107      	cbz	r7, bfa90 <rshift+0x68>
   bfa8e:	3304      	adds	r3, #4
   bfa90:	1b1a      	subs	r2, r3, r4
   bfa92:	42a3      	cmp	r3, r4
   bfa94:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bfa98:	bf08      	it	eq
   bfa9a:	2300      	moveq	r3, #0
   bfa9c:	6102      	str	r2, [r0, #16]
   bfa9e:	bf08      	it	eq
   bfaa0:	6143      	streq	r3, [r0, #20]
   bfaa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bfaa6:	f8dc c000 	ldr.w	ip, [ip]
   bfaaa:	fa0c fc08 	lsl.w	ip, ip, r8
   bfaae:	ea4c 0707 	orr.w	r7, ip, r7
   bfab2:	f849 7b04 	str.w	r7, [r9], #4
   bfab6:	f85e 7b04 	ldr.w	r7, [lr], #4
   bfaba:	40cf      	lsrs	r7, r1
   bfabc:	e7da      	b.n	bfa74 <rshift+0x4c>
   bfabe:	f851 cb04 	ldr.w	ip, [r1], #4
   bfac2:	f847 cf04 	str.w	ip, [r7, #4]!
   bfac6:	e7c3      	b.n	bfa50 <rshift+0x28>
   bfac8:	4623      	mov	r3, r4
   bfaca:	e7e1      	b.n	bfa90 <rshift+0x68>

000bfacc <__hexdig_fun>:
   bfacc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bfad0:	2b09      	cmp	r3, #9
   bfad2:	d802      	bhi.n	bfada <__hexdig_fun+0xe>
   bfad4:	3820      	subs	r0, #32
   bfad6:	b2c0      	uxtb	r0, r0
   bfad8:	4770      	bx	lr
   bfada:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bfade:	2b05      	cmp	r3, #5
   bfae0:	d801      	bhi.n	bfae6 <__hexdig_fun+0x1a>
   bfae2:	3847      	subs	r0, #71	; 0x47
   bfae4:	e7f7      	b.n	bfad6 <__hexdig_fun+0xa>
   bfae6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bfaea:	2b05      	cmp	r3, #5
   bfaec:	d801      	bhi.n	bfaf2 <__hexdig_fun+0x26>
   bfaee:	3827      	subs	r0, #39	; 0x27
   bfaf0:	e7f1      	b.n	bfad6 <__hexdig_fun+0xa>
   bfaf2:	2000      	movs	r0, #0
   bfaf4:	4770      	bx	lr
	...

000bfaf8 <__gethex>:
   bfaf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfafc:	ed2d 8b02 	vpush	{d8}
   bfb00:	b089      	sub	sp, #36	; 0x24
   bfb02:	ee08 0a10 	vmov	s16, r0
   bfb06:	9304      	str	r3, [sp, #16]
   bfb08:	4bb4      	ldr	r3, [pc, #720]	; (bfddc <__gethex+0x2e4>)
   bfb0a:	681b      	ldr	r3, [r3, #0]
   bfb0c:	9301      	str	r3, [sp, #4]
   bfb0e:	4618      	mov	r0, r3
   bfb10:	468b      	mov	fp, r1
   bfb12:	4690      	mov	r8, r2
   bfb14:	f7ff f82f 	bl	beb76 <strlen>
   bfb18:	9b01      	ldr	r3, [sp, #4]
   bfb1a:	f8db 2000 	ldr.w	r2, [fp]
   bfb1e:	4403      	add	r3, r0
   bfb20:	4682      	mov	sl, r0
   bfb22:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bfb26:	9305      	str	r3, [sp, #20]
   bfb28:	1c93      	adds	r3, r2, #2
   bfb2a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bfb2e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bfb32:	32fe      	adds	r2, #254	; 0xfe
   bfb34:	18d1      	adds	r1, r2, r3
   bfb36:	461f      	mov	r7, r3
   bfb38:	f813 0b01 	ldrb.w	r0, [r3], #1
   bfb3c:	9100      	str	r1, [sp, #0]
   bfb3e:	2830      	cmp	r0, #48	; 0x30
   bfb40:	d0f8      	beq.n	bfb34 <__gethex+0x3c>
   bfb42:	f7ff ffc3 	bl	bfacc <__hexdig_fun>
   bfb46:	4604      	mov	r4, r0
   bfb48:	2800      	cmp	r0, #0
   bfb4a:	d13a      	bne.n	bfbc2 <__gethex+0xca>
   bfb4c:	9901      	ldr	r1, [sp, #4]
   bfb4e:	4652      	mov	r2, sl
   bfb50:	4638      	mov	r0, r7
   bfb52:	f7ff f818 	bl	beb86 <strncmp>
   bfb56:	4605      	mov	r5, r0
   bfb58:	2800      	cmp	r0, #0
   bfb5a:	d168      	bne.n	bfc2e <__gethex+0x136>
   bfb5c:	f817 000a 	ldrb.w	r0, [r7, sl]
   bfb60:	eb07 060a 	add.w	r6, r7, sl
   bfb64:	f7ff ffb2 	bl	bfacc <__hexdig_fun>
   bfb68:	2800      	cmp	r0, #0
   bfb6a:	d062      	beq.n	bfc32 <__gethex+0x13a>
   bfb6c:	4633      	mov	r3, r6
   bfb6e:	7818      	ldrb	r0, [r3, #0]
   bfb70:	2830      	cmp	r0, #48	; 0x30
   bfb72:	461f      	mov	r7, r3
   bfb74:	f103 0301 	add.w	r3, r3, #1
   bfb78:	d0f9      	beq.n	bfb6e <__gethex+0x76>
   bfb7a:	f7ff ffa7 	bl	bfacc <__hexdig_fun>
   bfb7e:	2301      	movs	r3, #1
   bfb80:	fab0 f480 	clz	r4, r0
   bfb84:	0964      	lsrs	r4, r4, #5
   bfb86:	4635      	mov	r5, r6
   bfb88:	9300      	str	r3, [sp, #0]
   bfb8a:	463a      	mov	r2, r7
   bfb8c:	4616      	mov	r6, r2
   bfb8e:	3201      	adds	r2, #1
   bfb90:	7830      	ldrb	r0, [r6, #0]
   bfb92:	f7ff ff9b 	bl	bfacc <__hexdig_fun>
   bfb96:	2800      	cmp	r0, #0
   bfb98:	d1f8      	bne.n	bfb8c <__gethex+0x94>
   bfb9a:	9901      	ldr	r1, [sp, #4]
   bfb9c:	4652      	mov	r2, sl
   bfb9e:	4630      	mov	r0, r6
   bfba0:	f7fe fff1 	bl	beb86 <strncmp>
   bfba4:	b980      	cbnz	r0, bfbc8 <__gethex+0xd0>
   bfba6:	b94d      	cbnz	r5, bfbbc <__gethex+0xc4>
   bfba8:	eb06 050a 	add.w	r5, r6, sl
   bfbac:	462a      	mov	r2, r5
   bfbae:	4616      	mov	r6, r2
   bfbb0:	3201      	adds	r2, #1
   bfbb2:	7830      	ldrb	r0, [r6, #0]
   bfbb4:	f7ff ff8a 	bl	bfacc <__hexdig_fun>
   bfbb8:	2800      	cmp	r0, #0
   bfbba:	d1f8      	bne.n	bfbae <__gethex+0xb6>
   bfbbc:	1bad      	subs	r5, r5, r6
   bfbbe:	00ad      	lsls	r5, r5, #2
   bfbc0:	e004      	b.n	bfbcc <__gethex+0xd4>
   bfbc2:	2400      	movs	r4, #0
   bfbc4:	4625      	mov	r5, r4
   bfbc6:	e7e0      	b.n	bfb8a <__gethex+0x92>
   bfbc8:	2d00      	cmp	r5, #0
   bfbca:	d1f7      	bne.n	bfbbc <__gethex+0xc4>
   bfbcc:	7833      	ldrb	r3, [r6, #0]
   bfbce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bfbd2:	2b50      	cmp	r3, #80	; 0x50
   bfbd4:	d13b      	bne.n	bfc4e <__gethex+0x156>
   bfbd6:	7873      	ldrb	r3, [r6, #1]
   bfbd8:	2b2b      	cmp	r3, #43	; 0x2b
   bfbda:	d02c      	beq.n	bfc36 <__gethex+0x13e>
   bfbdc:	2b2d      	cmp	r3, #45	; 0x2d
   bfbde:	d02e      	beq.n	bfc3e <__gethex+0x146>
   bfbe0:	1c71      	adds	r1, r6, #1
   bfbe2:	f04f 0900 	mov.w	r9, #0
   bfbe6:	7808      	ldrb	r0, [r1, #0]
   bfbe8:	f7ff ff70 	bl	bfacc <__hexdig_fun>
   bfbec:	1e43      	subs	r3, r0, #1
   bfbee:	b2db      	uxtb	r3, r3
   bfbf0:	2b18      	cmp	r3, #24
   bfbf2:	d82c      	bhi.n	bfc4e <__gethex+0x156>
   bfbf4:	f1a0 0210 	sub.w	r2, r0, #16
   bfbf8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bfbfc:	f7ff ff66 	bl	bfacc <__hexdig_fun>
   bfc00:	1e43      	subs	r3, r0, #1
   bfc02:	b2db      	uxtb	r3, r3
   bfc04:	2b18      	cmp	r3, #24
   bfc06:	d91d      	bls.n	bfc44 <__gethex+0x14c>
   bfc08:	f1b9 0f00 	cmp.w	r9, #0
   bfc0c:	d000      	beq.n	bfc10 <__gethex+0x118>
   bfc0e:	4252      	negs	r2, r2
   bfc10:	4415      	add	r5, r2
   bfc12:	f8cb 1000 	str.w	r1, [fp]
   bfc16:	b1e4      	cbz	r4, bfc52 <__gethex+0x15a>
   bfc18:	9b00      	ldr	r3, [sp, #0]
   bfc1a:	2b00      	cmp	r3, #0
   bfc1c:	bf14      	ite	ne
   bfc1e:	2700      	movne	r7, #0
   bfc20:	2706      	moveq	r7, #6
   bfc22:	4638      	mov	r0, r7
   bfc24:	b009      	add	sp, #36	; 0x24
   bfc26:	ecbd 8b02 	vpop	{d8}
   bfc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bfc2e:	463e      	mov	r6, r7
   bfc30:	4625      	mov	r5, r4
   bfc32:	2401      	movs	r4, #1
   bfc34:	e7ca      	b.n	bfbcc <__gethex+0xd4>
   bfc36:	f04f 0900 	mov.w	r9, #0
   bfc3a:	1cb1      	adds	r1, r6, #2
   bfc3c:	e7d3      	b.n	bfbe6 <__gethex+0xee>
   bfc3e:	f04f 0901 	mov.w	r9, #1
   bfc42:	e7fa      	b.n	bfc3a <__gethex+0x142>
   bfc44:	230a      	movs	r3, #10
   bfc46:	fb03 0202 	mla	r2, r3, r2, r0
   bfc4a:	3a10      	subs	r2, #16
   bfc4c:	e7d4      	b.n	bfbf8 <__gethex+0x100>
   bfc4e:	4631      	mov	r1, r6
   bfc50:	e7df      	b.n	bfc12 <__gethex+0x11a>
   bfc52:	1bf3      	subs	r3, r6, r7
   bfc54:	3b01      	subs	r3, #1
   bfc56:	4621      	mov	r1, r4
   bfc58:	2b07      	cmp	r3, #7
   bfc5a:	dc0b      	bgt.n	bfc74 <__gethex+0x17c>
   bfc5c:	ee18 0a10 	vmov	r0, s16
   bfc60:	f000 fa68 	bl	c0134 <_Balloc>
   bfc64:	4604      	mov	r4, r0
   bfc66:	b940      	cbnz	r0, bfc7a <__gethex+0x182>
   bfc68:	4b5d      	ldr	r3, [pc, #372]	; (bfde0 <__gethex+0x2e8>)
   bfc6a:	4602      	mov	r2, r0
   bfc6c:	21de      	movs	r1, #222	; 0xde
   bfc6e:	485d      	ldr	r0, [pc, #372]	; (bfde4 <__gethex+0x2ec>)
   bfc70:	f7fa f9a0 	bl	b9fb4 <__assert_func>
   bfc74:	3101      	adds	r1, #1
   bfc76:	105b      	asrs	r3, r3, #1
   bfc78:	e7ee      	b.n	bfc58 <__gethex+0x160>
   bfc7a:	f100 0914 	add.w	r9, r0, #20
   bfc7e:	f04f 0b00 	mov.w	fp, #0
   bfc82:	f1ca 0301 	rsb	r3, sl, #1
   bfc86:	f8cd 9008 	str.w	r9, [sp, #8]
   bfc8a:	f8cd b000 	str.w	fp, [sp]
   bfc8e:	9306      	str	r3, [sp, #24]
   bfc90:	42b7      	cmp	r7, r6
   bfc92:	d340      	bcc.n	bfd16 <__gethex+0x21e>
   bfc94:	9802      	ldr	r0, [sp, #8]
   bfc96:	9b00      	ldr	r3, [sp, #0]
   bfc98:	f840 3b04 	str.w	r3, [r0], #4
   bfc9c:	eba0 0009 	sub.w	r0, r0, r9
   bfca0:	1080      	asrs	r0, r0, #2
   bfca2:	0146      	lsls	r6, r0, #5
   bfca4:	6120      	str	r0, [r4, #16]
   bfca6:	4618      	mov	r0, r3
   bfca8:	f000 fb36 	bl	c0318 <__hi0bits>
   bfcac:	1a30      	subs	r0, r6, r0
   bfcae:	f8d8 6000 	ldr.w	r6, [r8]
   bfcb2:	42b0      	cmp	r0, r6
   bfcb4:	dd63      	ble.n	bfd7e <__gethex+0x286>
   bfcb6:	1b87      	subs	r7, r0, r6
   bfcb8:	4639      	mov	r1, r7
   bfcba:	4620      	mov	r0, r4
   bfcbc:	f000 feda 	bl	c0a74 <__any_on>
   bfcc0:	4682      	mov	sl, r0
   bfcc2:	b1a8      	cbz	r0, bfcf0 <__gethex+0x1f8>
   bfcc4:	1e7b      	subs	r3, r7, #1
   bfcc6:	1159      	asrs	r1, r3, #5
   bfcc8:	f003 021f 	and.w	r2, r3, #31
   bfccc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bfcd0:	f04f 0a01 	mov.w	sl, #1
   bfcd4:	fa0a f202 	lsl.w	r2, sl, r2
   bfcd8:	420a      	tst	r2, r1
   bfcda:	d009      	beq.n	bfcf0 <__gethex+0x1f8>
   bfcdc:	4553      	cmp	r3, sl
   bfcde:	dd05      	ble.n	bfcec <__gethex+0x1f4>
   bfce0:	1eb9      	subs	r1, r7, #2
   bfce2:	4620      	mov	r0, r4
   bfce4:	f000 fec6 	bl	c0a74 <__any_on>
   bfce8:	2800      	cmp	r0, #0
   bfcea:	d145      	bne.n	bfd78 <__gethex+0x280>
   bfcec:	f04f 0a02 	mov.w	sl, #2
   bfcf0:	4639      	mov	r1, r7
   bfcf2:	4620      	mov	r0, r4
   bfcf4:	f7ff fe98 	bl	bfa28 <rshift>
   bfcf8:	443d      	add	r5, r7
   bfcfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bfcfe:	42ab      	cmp	r3, r5
   bfd00:	da4c      	bge.n	bfd9c <__gethex+0x2a4>
   bfd02:	ee18 0a10 	vmov	r0, s16
   bfd06:	4621      	mov	r1, r4
   bfd08:	f000 fa54 	bl	c01b4 <_Bfree>
   bfd0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bfd0e:	2300      	movs	r3, #0
   bfd10:	6013      	str	r3, [r2, #0]
   bfd12:	27a3      	movs	r7, #163	; 0xa3
   bfd14:	e785      	b.n	bfc22 <__gethex+0x12a>
   bfd16:	1e73      	subs	r3, r6, #1
   bfd18:	9a05      	ldr	r2, [sp, #20]
   bfd1a:	9303      	str	r3, [sp, #12]
   bfd1c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bfd20:	4293      	cmp	r3, r2
   bfd22:	d019      	beq.n	bfd58 <__gethex+0x260>
   bfd24:	f1bb 0f20 	cmp.w	fp, #32
   bfd28:	d107      	bne.n	bfd3a <__gethex+0x242>
   bfd2a:	9b02      	ldr	r3, [sp, #8]
   bfd2c:	9a00      	ldr	r2, [sp, #0]
   bfd2e:	f843 2b04 	str.w	r2, [r3], #4
   bfd32:	9302      	str	r3, [sp, #8]
   bfd34:	2300      	movs	r3, #0
   bfd36:	9300      	str	r3, [sp, #0]
   bfd38:	469b      	mov	fp, r3
   bfd3a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bfd3e:	f7ff fec5 	bl	bfacc <__hexdig_fun>
   bfd42:	9b00      	ldr	r3, [sp, #0]
   bfd44:	f000 000f 	and.w	r0, r0, #15
   bfd48:	fa00 f00b 	lsl.w	r0, r0, fp
   bfd4c:	4303      	orrs	r3, r0
   bfd4e:	9300      	str	r3, [sp, #0]
   bfd50:	f10b 0b04 	add.w	fp, fp, #4
   bfd54:	9b03      	ldr	r3, [sp, #12]
   bfd56:	e00d      	b.n	bfd74 <__gethex+0x27c>
   bfd58:	9b03      	ldr	r3, [sp, #12]
   bfd5a:	9a06      	ldr	r2, [sp, #24]
   bfd5c:	4413      	add	r3, r2
   bfd5e:	42bb      	cmp	r3, r7
   bfd60:	d3e0      	bcc.n	bfd24 <__gethex+0x22c>
   bfd62:	4618      	mov	r0, r3
   bfd64:	9901      	ldr	r1, [sp, #4]
   bfd66:	9307      	str	r3, [sp, #28]
   bfd68:	4652      	mov	r2, sl
   bfd6a:	f7fe ff0c 	bl	beb86 <strncmp>
   bfd6e:	9b07      	ldr	r3, [sp, #28]
   bfd70:	2800      	cmp	r0, #0
   bfd72:	d1d7      	bne.n	bfd24 <__gethex+0x22c>
   bfd74:	461e      	mov	r6, r3
   bfd76:	e78b      	b.n	bfc90 <__gethex+0x198>
   bfd78:	f04f 0a03 	mov.w	sl, #3
   bfd7c:	e7b8      	b.n	bfcf0 <__gethex+0x1f8>
   bfd7e:	da0a      	bge.n	bfd96 <__gethex+0x29e>
   bfd80:	1a37      	subs	r7, r6, r0
   bfd82:	4621      	mov	r1, r4
   bfd84:	ee18 0a10 	vmov	r0, s16
   bfd88:	463a      	mov	r2, r7
   bfd8a:	f000 fc2f 	bl	c05ec <__lshift>
   bfd8e:	1bed      	subs	r5, r5, r7
   bfd90:	4604      	mov	r4, r0
   bfd92:	f100 0914 	add.w	r9, r0, #20
   bfd96:	f04f 0a00 	mov.w	sl, #0
   bfd9a:	e7ae      	b.n	bfcfa <__gethex+0x202>
   bfd9c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bfda0:	42a8      	cmp	r0, r5
   bfda2:	dd72      	ble.n	bfe8a <__gethex+0x392>
   bfda4:	1b45      	subs	r5, r0, r5
   bfda6:	42ae      	cmp	r6, r5
   bfda8:	dc36      	bgt.n	bfe18 <__gethex+0x320>
   bfdaa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bfdae:	2b02      	cmp	r3, #2
   bfdb0:	d02a      	beq.n	bfe08 <__gethex+0x310>
   bfdb2:	2b03      	cmp	r3, #3
   bfdb4:	d02c      	beq.n	bfe10 <__gethex+0x318>
   bfdb6:	2b01      	cmp	r3, #1
   bfdb8:	d11c      	bne.n	bfdf4 <__gethex+0x2fc>
   bfdba:	42ae      	cmp	r6, r5
   bfdbc:	d11a      	bne.n	bfdf4 <__gethex+0x2fc>
   bfdbe:	2e01      	cmp	r6, #1
   bfdc0:	d112      	bne.n	bfde8 <__gethex+0x2f0>
   bfdc2:	9a04      	ldr	r2, [sp, #16]
   bfdc4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bfdc8:	6013      	str	r3, [r2, #0]
   bfdca:	2301      	movs	r3, #1
   bfdcc:	6123      	str	r3, [r4, #16]
   bfdce:	f8c9 3000 	str.w	r3, [r9]
   bfdd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bfdd4:	2762      	movs	r7, #98	; 0x62
   bfdd6:	601c      	str	r4, [r3, #0]
   bfdd8:	e723      	b.n	bfc22 <__gethex+0x12a>
   bfdda:	bf00      	nop
   bfddc:	000c2120 	.word	0x000c2120
   bfde0:	000c2089 	.word	0x000c2089
   bfde4:	000c209a 	.word	0x000c209a
   bfde8:	1e71      	subs	r1, r6, #1
   bfdea:	4620      	mov	r0, r4
   bfdec:	f000 fe42 	bl	c0a74 <__any_on>
   bfdf0:	2800      	cmp	r0, #0
   bfdf2:	d1e6      	bne.n	bfdc2 <__gethex+0x2ca>
   bfdf4:	ee18 0a10 	vmov	r0, s16
   bfdf8:	4621      	mov	r1, r4
   bfdfa:	f000 f9db 	bl	c01b4 <_Bfree>
   bfdfe:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bfe00:	2300      	movs	r3, #0
   bfe02:	6013      	str	r3, [r2, #0]
   bfe04:	2750      	movs	r7, #80	; 0x50
   bfe06:	e70c      	b.n	bfc22 <__gethex+0x12a>
   bfe08:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bfe0a:	2b00      	cmp	r3, #0
   bfe0c:	d1f2      	bne.n	bfdf4 <__gethex+0x2fc>
   bfe0e:	e7d8      	b.n	bfdc2 <__gethex+0x2ca>
   bfe10:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bfe12:	2b00      	cmp	r3, #0
   bfe14:	d1d5      	bne.n	bfdc2 <__gethex+0x2ca>
   bfe16:	e7ed      	b.n	bfdf4 <__gethex+0x2fc>
   bfe18:	1e6f      	subs	r7, r5, #1
   bfe1a:	f1ba 0f00 	cmp.w	sl, #0
   bfe1e:	d131      	bne.n	bfe84 <__gethex+0x38c>
   bfe20:	b127      	cbz	r7, bfe2c <__gethex+0x334>
   bfe22:	4639      	mov	r1, r7
   bfe24:	4620      	mov	r0, r4
   bfe26:	f000 fe25 	bl	c0a74 <__any_on>
   bfe2a:	4682      	mov	sl, r0
   bfe2c:	117b      	asrs	r3, r7, #5
   bfe2e:	2101      	movs	r1, #1
   bfe30:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bfe34:	f007 071f 	and.w	r7, r7, #31
   bfe38:	fa01 f707 	lsl.w	r7, r1, r7
   bfe3c:	421f      	tst	r7, r3
   bfe3e:	4629      	mov	r1, r5
   bfe40:	4620      	mov	r0, r4
   bfe42:	bf18      	it	ne
   bfe44:	f04a 0a02 	orrne.w	sl, sl, #2
   bfe48:	1b76      	subs	r6, r6, r5
   bfe4a:	f7ff fded 	bl	bfa28 <rshift>
   bfe4e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bfe52:	2702      	movs	r7, #2
   bfe54:	f1ba 0f00 	cmp.w	sl, #0
   bfe58:	d048      	beq.n	bfeec <__gethex+0x3f4>
   bfe5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bfe5e:	2b02      	cmp	r3, #2
   bfe60:	d015      	beq.n	bfe8e <__gethex+0x396>
   bfe62:	2b03      	cmp	r3, #3
   bfe64:	d017      	beq.n	bfe96 <__gethex+0x39e>
   bfe66:	2b01      	cmp	r3, #1
   bfe68:	d109      	bne.n	bfe7e <__gethex+0x386>
   bfe6a:	f01a 0f02 	tst.w	sl, #2
   bfe6e:	d006      	beq.n	bfe7e <__gethex+0x386>
   bfe70:	f8d9 0000 	ldr.w	r0, [r9]
   bfe74:	ea4a 0a00 	orr.w	sl, sl, r0
   bfe78:	f01a 0f01 	tst.w	sl, #1
   bfe7c:	d10e      	bne.n	bfe9c <__gethex+0x3a4>
   bfe7e:	f047 0710 	orr.w	r7, r7, #16
   bfe82:	e033      	b.n	bfeec <__gethex+0x3f4>
   bfe84:	f04f 0a01 	mov.w	sl, #1
   bfe88:	e7d0      	b.n	bfe2c <__gethex+0x334>
   bfe8a:	2701      	movs	r7, #1
   bfe8c:	e7e2      	b.n	bfe54 <__gethex+0x35c>
   bfe8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bfe90:	f1c3 0301 	rsb	r3, r3, #1
   bfe94:	9315      	str	r3, [sp, #84]	; 0x54
   bfe96:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bfe98:	2b00      	cmp	r3, #0
   bfe9a:	d0f0      	beq.n	bfe7e <__gethex+0x386>
   bfe9c:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bfea0:	f104 0314 	add.w	r3, r4, #20
   bfea4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bfea8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bfeac:	f04f 0c00 	mov.w	ip, #0
   bfeb0:	4618      	mov	r0, r3
   bfeb2:	f853 2b04 	ldr.w	r2, [r3], #4
   bfeb6:	f1b2 3fff 	cmp.w	r2, #4294967295
   bfeba:	d01c      	beq.n	bfef6 <__gethex+0x3fe>
   bfebc:	3201      	adds	r2, #1
   bfebe:	6002      	str	r2, [r0, #0]
   bfec0:	2f02      	cmp	r7, #2
   bfec2:	f104 0314 	add.w	r3, r4, #20
   bfec6:	d13f      	bne.n	bff48 <__gethex+0x450>
   bfec8:	f8d8 2000 	ldr.w	r2, [r8]
   bfecc:	3a01      	subs	r2, #1
   bfece:	42b2      	cmp	r2, r6
   bfed0:	d10a      	bne.n	bfee8 <__gethex+0x3f0>
   bfed2:	1171      	asrs	r1, r6, #5
   bfed4:	2201      	movs	r2, #1
   bfed6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bfeda:	f006 061f 	and.w	r6, r6, #31
   bfede:	fa02 f606 	lsl.w	r6, r2, r6
   bfee2:	421e      	tst	r6, r3
   bfee4:	bf18      	it	ne
   bfee6:	4617      	movne	r7, r2
   bfee8:	f047 0720 	orr.w	r7, r7, #32
   bfeec:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bfeee:	601c      	str	r4, [r3, #0]
   bfef0:	9b04      	ldr	r3, [sp, #16]
   bfef2:	601d      	str	r5, [r3, #0]
   bfef4:	e695      	b.n	bfc22 <__gethex+0x12a>
   bfef6:	4299      	cmp	r1, r3
   bfef8:	f843 cc04 	str.w	ip, [r3, #-4]
   bfefc:	d8d8      	bhi.n	bfeb0 <__gethex+0x3b8>
   bfefe:	68a3      	ldr	r3, [r4, #8]
   bff00:	459b      	cmp	fp, r3
   bff02:	db19      	blt.n	bff38 <__gethex+0x440>
   bff04:	6861      	ldr	r1, [r4, #4]
   bff06:	ee18 0a10 	vmov	r0, s16
   bff0a:	3101      	adds	r1, #1
   bff0c:	f000 f912 	bl	c0134 <_Balloc>
   bff10:	4681      	mov	r9, r0
   bff12:	b918      	cbnz	r0, bff1c <__gethex+0x424>
   bff14:	4b1a      	ldr	r3, [pc, #104]	; (bff80 <__gethex+0x488>)
   bff16:	4602      	mov	r2, r0
   bff18:	2184      	movs	r1, #132	; 0x84
   bff1a:	e6a8      	b.n	bfc6e <__gethex+0x176>
   bff1c:	6922      	ldr	r2, [r4, #16]
   bff1e:	3202      	adds	r2, #2
   bff20:	f104 010c 	add.w	r1, r4, #12
   bff24:	0092      	lsls	r2, r2, #2
   bff26:	300c      	adds	r0, #12
   bff28:	f7fe fd49 	bl	be9be <memcpy>
   bff2c:	4621      	mov	r1, r4
   bff2e:	ee18 0a10 	vmov	r0, s16
   bff32:	f000 f93f 	bl	c01b4 <_Bfree>
   bff36:	464c      	mov	r4, r9
   bff38:	6923      	ldr	r3, [r4, #16]
   bff3a:	1c5a      	adds	r2, r3, #1
   bff3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bff40:	6122      	str	r2, [r4, #16]
   bff42:	2201      	movs	r2, #1
   bff44:	615a      	str	r2, [r3, #20]
   bff46:	e7bb      	b.n	bfec0 <__gethex+0x3c8>
   bff48:	6922      	ldr	r2, [r4, #16]
   bff4a:	455a      	cmp	r2, fp
   bff4c:	dd0b      	ble.n	bff66 <__gethex+0x46e>
   bff4e:	2101      	movs	r1, #1
   bff50:	4620      	mov	r0, r4
   bff52:	f7ff fd69 	bl	bfa28 <rshift>
   bff56:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bff5a:	3501      	adds	r5, #1
   bff5c:	42ab      	cmp	r3, r5
   bff5e:	f6ff aed0 	blt.w	bfd02 <__gethex+0x20a>
   bff62:	2701      	movs	r7, #1
   bff64:	e7c0      	b.n	bfee8 <__gethex+0x3f0>
   bff66:	f016 061f 	ands.w	r6, r6, #31
   bff6a:	d0fa      	beq.n	bff62 <__gethex+0x46a>
   bff6c:	4453      	add	r3, sl
   bff6e:	f1c6 0620 	rsb	r6, r6, #32
   bff72:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bff76:	f000 f9cf 	bl	c0318 <__hi0bits>
   bff7a:	42b0      	cmp	r0, r6
   bff7c:	dbe7      	blt.n	bff4e <__gethex+0x456>
   bff7e:	e7f0      	b.n	bff62 <__gethex+0x46a>
   bff80:	000c2089 	.word	0x000c2089

000bff84 <L_shift>:
   bff84:	f1c2 0208 	rsb	r2, r2, #8
   bff88:	0092      	lsls	r2, r2, #2
   bff8a:	b570      	push	{r4, r5, r6, lr}
   bff8c:	f1c2 0620 	rsb	r6, r2, #32
   bff90:	6843      	ldr	r3, [r0, #4]
   bff92:	6804      	ldr	r4, [r0, #0]
   bff94:	fa03 f506 	lsl.w	r5, r3, r6
   bff98:	432c      	orrs	r4, r5
   bff9a:	40d3      	lsrs	r3, r2
   bff9c:	6004      	str	r4, [r0, #0]
   bff9e:	f840 3f04 	str.w	r3, [r0, #4]!
   bffa2:	4288      	cmp	r0, r1
   bffa4:	d3f4      	bcc.n	bff90 <L_shift+0xc>
   bffa6:	bd70      	pop	{r4, r5, r6, pc}

000bffa8 <__match>:
   bffa8:	b530      	push	{r4, r5, lr}
   bffaa:	6803      	ldr	r3, [r0, #0]
   bffac:	3301      	adds	r3, #1
   bffae:	f811 4b01 	ldrb.w	r4, [r1], #1
   bffb2:	b914      	cbnz	r4, bffba <__match+0x12>
   bffb4:	6003      	str	r3, [r0, #0]
   bffb6:	2001      	movs	r0, #1
   bffb8:	bd30      	pop	{r4, r5, pc}
   bffba:	f813 2b01 	ldrb.w	r2, [r3], #1
   bffbe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bffc2:	2d19      	cmp	r5, #25
   bffc4:	bf98      	it	ls
   bffc6:	3220      	addls	r2, #32
   bffc8:	42a2      	cmp	r2, r4
   bffca:	d0f0      	beq.n	bffae <__match+0x6>
   bffcc:	2000      	movs	r0, #0
   bffce:	e7f3      	b.n	bffb8 <__match+0x10>

000bffd0 <__hexnan>:
   bffd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bffd4:	680b      	ldr	r3, [r1, #0]
   bffd6:	115e      	asrs	r6, r3, #5
   bffd8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bffdc:	f013 031f 	ands.w	r3, r3, #31
   bffe0:	b087      	sub	sp, #28
   bffe2:	bf18      	it	ne
   bffe4:	3604      	addne	r6, #4
   bffe6:	2500      	movs	r5, #0
   bffe8:	1f37      	subs	r7, r6, #4
   bffea:	4690      	mov	r8, r2
   bffec:	6802      	ldr	r2, [r0, #0]
   bffee:	9301      	str	r3, [sp, #4]
   bfff0:	4682      	mov	sl, r0
   bfff2:	f846 5c04 	str.w	r5, [r6, #-4]
   bfff6:	46b9      	mov	r9, r7
   bfff8:	463c      	mov	r4, r7
   bfffa:	9502      	str	r5, [sp, #8]
   bfffc:	46ab      	mov	fp, r5
   bfffe:	7851      	ldrb	r1, [r2, #1]
   c0000:	1c53      	adds	r3, r2, #1
   c0002:	9303      	str	r3, [sp, #12]
   c0004:	b341      	cbz	r1, c0058 <__hexnan+0x88>
   c0006:	4608      	mov	r0, r1
   c0008:	9205      	str	r2, [sp, #20]
   c000a:	9104      	str	r1, [sp, #16]
   c000c:	f7ff fd5e 	bl	bfacc <__hexdig_fun>
   c0010:	2800      	cmp	r0, #0
   c0012:	d14f      	bne.n	c00b4 <__hexnan+0xe4>
   c0014:	9904      	ldr	r1, [sp, #16]
   c0016:	9a05      	ldr	r2, [sp, #20]
   c0018:	2920      	cmp	r1, #32
   c001a:	d818      	bhi.n	c004e <__hexnan+0x7e>
   c001c:	9b02      	ldr	r3, [sp, #8]
   c001e:	459b      	cmp	fp, r3
   c0020:	dd13      	ble.n	c004a <__hexnan+0x7a>
   c0022:	454c      	cmp	r4, r9
   c0024:	d206      	bcs.n	c0034 <__hexnan+0x64>
   c0026:	2d07      	cmp	r5, #7
   c0028:	dc04      	bgt.n	c0034 <__hexnan+0x64>
   c002a:	462a      	mov	r2, r5
   c002c:	4649      	mov	r1, r9
   c002e:	4620      	mov	r0, r4
   c0030:	f7ff ffa8 	bl	bff84 <L_shift>
   c0034:	4544      	cmp	r4, r8
   c0036:	d950      	bls.n	c00da <__hexnan+0x10a>
   c0038:	2300      	movs	r3, #0
   c003a:	f1a4 0904 	sub.w	r9, r4, #4
   c003e:	f844 3c04 	str.w	r3, [r4, #-4]
   c0042:	f8cd b008 	str.w	fp, [sp, #8]
   c0046:	464c      	mov	r4, r9
   c0048:	461d      	mov	r5, r3
   c004a:	9a03      	ldr	r2, [sp, #12]
   c004c:	e7d7      	b.n	bfffe <__hexnan+0x2e>
   c004e:	2929      	cmp	r1, #41	; 0x29
   c0050:	d156      	bne.n	c0100 <__hexnan+0x130>
   c0052:	3202      	adds	r2, #2
   c0054:	f8ca 2000 	str.w	r2, [sl]
   c0058:	f1bb 0f00 	cmp.w	fp, #0
   c005c:	d050      	beq.n	c0100 <__hexnan+0x130>
   c005e:	454c      	cmp	r4, r9
   c0060:	d206      	bcs.n	c0070 <__hexnan+0xa0>
   c0062:	2d07      	cmp	r5, #7
   c0064:	dc04      	bgt.n	c0070 <__hexnan+0xa0>
   c0066:	462a      	mov	r2, r5
   c0068:	4649      	mov	r1, r9
   c006a:	4620      	mov	r0, r4
   c006c:	f7ff ff8a 	bl	bff84 <L_shift>
   c0070:	4544      	cmp	r4, r8
   c0072:	d934      	bls.n	c00de <__hexnan+0x10e>
   c0074:	f1a8 0204 	sub.w	r2, r8, #4
   c0078:	4623      	mov	r3, r4
   c007a:	f853 1b04 	ldr.w	r1, [r3], #4
   c007e:	f842 1f04 	str.w	r1, [r2, #4]!
   c0082:	429f      	cmp	r7, r3
   c0084:	d2f9      	bcs.n	c007a <__hexnan+0xaa>
   c0086:	1b3b      	subs	r3, r7, r4
   c0088:	f023 0303 	bic.w	r3, r3, #3
   c008c:	3304      	adds	r3, #4
   c008e:	3401      	adds	r4, #1
   c0090:	3e03      	subs	r6, #3
   c0092:	42b4      	cmp	r4, r6
   c0094:	bf88      	it	hi
   c0096:	2304      	movhi	r3, #4
   c0098:	4443      	add	r3, r8
   c009a:	2200      	movs	r2, #0
   c009c:	f843 2b04 	str.w	r2, [r3], #4
   c00a0:	429f      	cmp	r7, r3
   c00a2:	d2fb      	bcs.n	c009c <__hexnan+0xcc>
   c00a4:	683b      	ldr	r3, [r7, #0]
   c00a6:	b91b      	cbnz	r3, c00b0 <__hexnan+0xe0>
   c00a8:	4547      	cmp	r7, r8
   c00aa:	d127      	bne.n	c00fc <__hexnan+0x12c>
   c00ac:	2301      	movs	r3, #1
   c00ae:	603b      	str	r3, [r7, #0]
   c00b0:	2005      	movs	r0, #5
   c00b2:	e026      	b.n	c0102 <__hexnan+0x132>
   c00b4:	3501      	adds	r5, #1
   c00b6:	2d08      	cmp	r5, #8
   c00b8:	f10b 0b01 	add.w	fp, fp, #1
   c00bc:	dd06      	ble.n	c00cc <__hexnan+0xfc>
   c00be:	4544      	cmp	r4, r8
   c00c0:	d9c3      	bls.n	c004a <__hexnan+0x7a>
   c00c2:	2300      	movs	r3, #0
   c00c4:	f844 3c04 	str.w	r3, [r4, #-4]
   c00c8:	2501      	movs	r5, #1
   c00ca:	3c04      	subs	r4, #4
   c00cc:	6822      	ldr	r2, [r4, #0]
   c00ce:	f000 000f 	and.w	r0, r0, #15
   c00d2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c00d6:	6022      	str	r2, [r4, #0]
   c00d8:	e7b7      	b.n	c004a <__hexnan+0x7a>
   c00da:	2508      	movs	r5, #8
   c00dc:	e7b5      	b.n	c004a <__hexnan+0x7a>
   c00de:	9b01      	ldr	r3, [sp, #4]
   c00e0:	2b00      	cmp	r3, #0
   c00e2:	d0df      	beq.n	c00a4 <__hexnan+0xd4>
   c00e4:	f04f 32ff 	mov.w	r2, #4294967295
   c00e8:	f1c3 0320 	rsb	r3, r3, #32
   c00ec:	fa22 f303 	lsr.w	r3, r2, r3
   c00f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c00f4:	401a      	ands	r2, r3
   c00f6:	f846 2c04 	str.w	r2, [r6, #-4]
   c00fa:	e7d3      	b.n	c00a4 <__hexnan+0xd4>
   c00fc:	3f04      	subs	r7, #4
   c00fe:	e7d1      	b.n	c00a4 <__hexnan+0xd4>
   c0100:	2004      	movs	r0, #4
   c0102:	b007      	add	sp, #28
   c0104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c0108 <__retarget_lock_acquire_recursive>:
   c0108:	4770      	bx	lr

000c010a <__retarget_lock_release>:
   c010a:	4770      	bx	lr

000c010c <__retarget_lock_release_recursive>:
   c010c:	4770      	bx	lr

000c010e <__ascii_mbtowc>:
   c010e:	b082      	sub	sp, #8
   c0110:	b901      	cbnz	r1, c0114 <__ascii_mbtowc+0x6>
   c0112:	a901      	add	r1, sp, #4
   c0114:	b142      	cbz	r2, c0128 <__ascii_mbtowc+0x1a>
   c0116:	b14b      	cbz	r3, c012c <__ascii_mbtowc+0x1e>
   c0118:	7813      	ldrb	r3, [r2, #0]
   c011a:	600b      	str	r3, [r1, #0]
   c011c:	7812      	ldrb	r2, [r2, #0]
   c011e:	1e10      	subs	r0, r2, #0
   c0120:	bf18      	it	ne
   c0122:	2001      	movne	r0, #1
   c0124:	b002      	add	sp, #8
   c0126:	4770      	bx	lr
   c0128:	4610      	mov	r0, r2
   c012a:	e7fb      	b.n	c0124 <__ascii_mbtowc+0x16>
   c012c:	f06f 0001 	mvn.w	r0, #1
   c0130:	e7f8      	b.n	c0124 <__ascii_mbtowc+0x16>
	...

000c0134 <_Balloc>:
   c0134:	b570      	push	{r4, r5, r6, lr}
   c0136:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c0138:	4604      	mov	r4, r0
   c013a:	460d      	mov	r5, r1
   c013c:	b976      	cbnz	r6, c015c <_Balloc+0x28>
   c013e:	2010      	movs	r0, #16
   c0140:	f7f9 fee8 	bl	b9f14 <malloc>
   c0144:	4602      	mov	r2, r0
   c0146:	6260      	str	r0, [r4, #36]	; 0x24
   c0148:	b920      	cbnz	r0, c0154 <_Balloc+0x20>
   c014a:	4b18      	ldr	r3, [pc, #96]	; (c01ac <_Balloc+0x78>)
   c014c:	4818      	ldr	r0, [pc, #96]	; (c01b0 <_Balloc+0x7c>)
   c014e:	2166      	movs	r1, #102	; 0x66
   c0150:	f7f9 ff30 	bl	b9fb4 <__assert_func>
   c0154:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c0158:	6006      	str	r6, [r0, #0]
   c015a:	60c6      	str	r6, [r0, #12]
   c015c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c015e:	68f3      	ldr	r3, [r6, #12]
   c0160:	b183      	cbz	r3, c0184 <_Balloc+0x50>
   c0162:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c0164:	68db      	ldr	r3, [r3, #12]
   c0166:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c016a:	b9b8      	cbnz	r0, c019c <_Balloc+0x68>
   c016c:	2101      	movs	r1, #1
   c016e:	fa01 f605 	lsl.w	r6, r1, r5
   c0172:	1d72      	adds	r2, r6, #5
   c0174:	0092      	lsls	r2, r2, #2
   c0176:	4620      	mov	r0, r4
   c0178:	f000 fc9d 	bl	c0ab6 <_calloc_r>
   c017c:	b160      	cbz	r0, c0198 <_Balloc+0x64>
   c017e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c0182:	e00e      	b.n	c01a2 <_Balloc+0x6e>
   c0184:	2221      	movs	r2, #33	; 0x21
   c0186:	2104      	movs	r1, #4
   c0188:	4620      	mov	r0, r4
   c018a:	f000 fc94 	bl	c0ab6 <_calloc_r>
   c018e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c0190:	60f0      	str	r0, [r6, #12]
   c0192:	68db      	ldr	r3, [r3, #12]
   c0194:	2b00      	cmp	r3, #0
   c0196:	d1e4      	bne.n	c0162 <_Balloc+0x2e>
   c0198:	2000      	movs	r0, #0
   c019a:	bd70      	pop	{r4, r5, r6, pc}
   c019c:	6802      	ldr	r2, [r0, #0]
   c019e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c01a2:	2300      	movs	r3, #0
   c01a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c01a8:	e7f7      	b.n	c019a <_Balloc+0x66>
   c01aa:	bf00      	nop
   c01ac:	000c1e91 	.word	0x000c1e91
   c01b0:	000c2134 	.word	0x000c2134

000c01b4 <_Bfree>:
   c01b4:	b570      	push	{r4, r5, r6, lr}
   c01b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c01b8:	4605      	mov	r5, r0
   c01ba:	460c      	mov	r4, r1
   c01bc:	b976      	cbnz	r6, c01dc <_Bfree+0x28>
   c01be:	2010      	movs	r0, #16
   c01c0:	f7f9 fea8 	bl	b9f14 <malloc>
   c01c4:	4602      	mov	r2, r0
   c01c6:	6268      	str	r0, [r5, #36]	; 0x24
   c01c8:	b920      	cbnz	r0, c01d4 <_Bfree+0x20>
   c01ca:	4b09      	ldr	r3, [pc, #36]	; (c01f0 <_Bfree+0x3c>)
   c01cc:	4809      	ldr	r0, [pc, #36]	; (c01f4 <_Bfree+0x40>)
   c01ce:	218a      	movs	r1, #138	; 0x8a
   c01d0:	f7f9 fef0 	bl	b9fb4 <__assert_func>
   c01d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c01d8:	6006      	str	r6, [r0, #0]
   c01da:	60c6      	str	r6, [r0, #12]
   c01dc:	b13c      	cbz	r4, c01ee <_Bfree+0x3a>
   c01de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c01e0:	6862      	ldr	r2, [r4, #4]
   c01e2:	68db      	ldr	r3, [r3, #12]
   c01e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c01e8:	6021      	str	r1, [r4, #0]
   c01ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c01ee:	bd70      	pop	{r4, r5, r6, pc}
   c01f0:	000c1e91 	.word	0x000c1e91
   c01f4:	000c2134 	.word	0x000c2134

000c01f8 <__multadd>:
   c01f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c01fc:	690d      	ldr	r5, [r1, #16]
   c01fe:	4607      	mov	r7, r0
   c0200:	460c      	mov	r4, r1
   c0202:	461e      	mov	r6, r3
   c0204:	f101 0c14 	add.w	ip, r1, #20
   c0208:	2000      	movs	r0, #0
   c020a:	f8dc 3000 	ldr.w	r3, [ip]
   c020e:	b299      	uxth	r1, r3
   c0210:	fb02 6101 	mla	r1, r2, r1, r6
   c0214:	0c1e      	lsrs	r6, r3, #16
   c0216:	0c0b      	lsrs	r3, r1, #16
   c0218:	fb02 3306 	mla	r3, r2, r6, r3
   c021c:	b289      	uxth	r1, r1
   c021e:	3001      	adds	r0, #1
   c0220:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c0224:	4285      	cmp	r5, r0
   c0226:	f84c 1b04 	str.w	r1, [ip], #4
   c022a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c022e:	dcec      	bgt.n	c020a <__multadd+0x12>
   c0230:	b30e      	cbz	r6, c0276 <__multadd+0x7e>
   c0232:	68a3      	ldr	r3, [r4, #8]
   c0234:	42ab      	cmp	r3, r5
   c0236:	dc19      	bgt.n	c026c <__multadd+0x74>
   c0238:	6861      	ldr	r1, [r4, #4]
   c023a:	4638      	mov	r0, r7
   c023c:	3101      	adds	r1, #1
   c023e:	f7ff ff79 	bl	c0134 <_Balloc>
   c0242:	4680      	mov	r8, r0
   c0244:	b928      	cbnz	r0, c0252 <__multadd+0x5a>
   c0246:	4602      	mov	r2, r0
   c0248:	4b0c      	ldr	r3, [pc, #48]	; (c027c <__multadd+0x84>)
   c024a:	480d      	ldr	r0, [pc, #52]	; (c0280 <__multadd+0x88>)
   c024c:	21b5      	movs	r1, #181	; 0xb5
   c024e:	f7f9 feb1 	bl	b9fb4 <__assert_func>
   c0252:	6922      	ldr	r2, [r4, #16]
   c0254:	3202      	adds	r2, #2
   c0256:	f104 010c 	add.w	r1, r4, #12
   c025a:	0092      	lsls	r2, r2, #2
   c025c:	300c      	adds	r0, #12
   c025e:	f7fe fbae 	bl	be9be <memcpy>
   c0262:	4621      	mov	r1, r4
   c0264:	4638      	mov	r0, r7
   c0266:	f7ff ffa5 	bl	c01b4 <_Bfree>
   c026a:	4644      	mov	r4, r8
   c026c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c0270:	3501      	adds	r5, #1
   c0272:	615e      	str	r6, [r3, #20]
   c0274:	6125      	str	r5, [r4, #16]
   c0276:	4620      	mov	r0, r4
   c0278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c027c:	000c2089 	.word	0x000c2089
   c0280:	000c2134 	.word	0x000c2134

000c0284 <__s2b>:
   c0284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c0288:	460c      	mov	r4, r1
   c028a:	4615      	mov	r5, r2
   c028c:	461f      	mov	r7, r3
   c028e:	2209      	movs	r2, #9
   c0290:	3308      	adds	r3, #8
   c0292:	4606      	mov	r6, r0
   c0294:	fb93 f3f2 	sdiv	r3, r3, r2
   c0298:	2100      	movs	r1, #0
   c029a:	2201      	movs	r2, #1
   c029c:	429a      	cmp	r2, r3
   c029e:	db09      	blt.n	c02b4 <__s2b+0x30>
   c02a0:	4630      	mov	r0, r6
   c02a2:	f7ff ff47 	bl	c0134 <_Balloc>
   c02a6:	b940      	cbnz	r0, c02ba <__s2b+0x36>
   c02a8:	4602      	mov	r2, r0
   c02aa:	4b19      	ldr	r3, [pc, #100]	; (c0310 <__s2b+0x8c>)
   c02ac:	4819      	ldr	r0, [pc, #100]	; (c0314 <__s2b+0x90>)
   c02ae:	21ce      	movs	r1, #206	; 0xce
   c02b0:	f7f9 fe80 	bl	b9fb4 <__assert_func>
   c02b4:	0052      	lsls	r2, r2, #1
   c02b6:	3101      	adds	r1, #1
   c02b8:	e7f0      	b.n	c029c <__s2b+0x18>
   c02ba:	9b08      	ldr	r3, [sp, #32]
   c02bc:	6143      	str	r3, [r0, #20]
   c02be:	2d09      	cmp	r5, #9
   c02c0:	f04f 0301 	mov.w	r3, #1
   c02c4:	6103      	str	r3, [r0, #16]
   c02c6:	dd16      	ble.n	c02f6 <__s2b+0x72>
   c02c8:	f104 0909 	add.w	r9, r4, #9
   c02cc:	46c8      	mov	r8, r9
   c02ce:	442c      	add	r4, r5
   c02d0:	f818 3b01 	ldrb.w	r3, [r8], #1
   c02d4:	4601      	mov	r1, r0
   c02d6:	3b30      	subs	r3, #48	; 0x30
   c02d8:	220a      	movs	r2, #10
   c02da:	4630      	mov	r0, r6
   c02dc:	f7ff ff8c 	bl	c01f8 <__multadd>
   c02e0:	45a0      	cmp	r8, r4
   c02e2:	d1f5      	bne.n	c02d0 <__s2b+0x4c>
   c02e4:	f1a5 0408 	sub.w	r4, r5, #8
   c02e8:	444c      	add	r4, r9
   c02ea:	1b2d      	subs	r5, r5, r4
   c02ec:	1963      	adds	r3, r4, r5
   c02ee:	42bb      	cmp	r3, r7
   c02f0:	db04      	blt.n	c02fc <__s2b+0x78>
   c02f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c02f6:	340a      	adds	r4, #10
   c02f8:	2509      	movs	r5, #9
   c02fa:	e7f6      	b.n	c02ea <__s2b+0x66>
   c02fc:	f814 3b01 	ldrb.w	r3, [r4], #1
   c0300:	4601      	mov	r1, r0
   c0302:	3b30      	subs	r3, #48	; 0x30
   c0304:	220a      	movs	r2, #10
   c0306:	4630      	mov	r0, r6
   c0308:	f7ff ff76 	bl	c01f8 <__multadd>
   c030c:	e7ee      	b.n	c02ec <__s2b+0x68>
   c030e:	bf00      	nop
   c0310:	000c2089 	.word	0x000c2089
   c0314:	000c2134 	.word	0x000c2134

000c0318 <__hi0bits>:
   c0318:	0c03      	lsrs	r3, r0, #16
   c031a:	041b      	lsls	r3, r3, #16
   c031c:	b9d3      	cbnz	r3, c0354 <__hi0bits+0x3c>
   c031e:	0400      	lsls	r0, r0, #16
   c0320:	2310      	movs	r3, #16
   c0322:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c0326:	bf04      	itt	eq
   c0328:	0200      	lsleq	r0, r0, #8
   c032a:	3308      	addeq	r3, #8
   c032c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c0330:	bf04      	itt	eq
   c0332:	0100      	lsleq	r0, r0, #4
   c0334:	3304      	addeq	r3, #4
   c0336:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c033a:	bf04      	itt	eq
   c033c:	0080      	lsleq	r0, r0, #2
   c033e:	3302      	addeq	r3, #2
   c0340:	2800      	cmp	r0, #0
   c0342:	db05      	blt.n	c0350 <__hi0bits+0x38>
   c0344:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c0348:	f103 0301 	add.w	r3, r3, #1
   c034c:	bf08      	it	eq
   c034e:	2320      	moveq	r3, #32
   c0350:	4618      	mov	r0, r3
   c0352:	4770      	bx	lr
   c0354:	2300      	movs	r3, #0
   c0356:	e7e4      	b.n	c0322 <__hi0bits+0xa>

000c0358 <__lo0bits>:
   c0358:	6803      	ldr	r3, [r0, #0]
   c035a:	f013 0207 	ands.w	r2, r3, #7
   c035e:	4601      	mov	r1, r0
   c0360:	d00b      	beq.n	c037a <__lo0bits+0x22>
   c0362:	07da      	lsls	r2, r3, #31
   c0364:	d423      	bmi.n	c03ae <__lo0bits+0x56>
   c0366:	0798      	lsls	r0, r3, #30
   c0368:	bf49      	itett	mi
   c036a:	085b      	lsrmi	r3, r3, #1
   c036c:	089b      	lsrpl	r3, r3, #2
   c036e:	2001      	movmi	r0, #1
   c0370:	600b      	strmi	r3, [r1, #0]
   c0372:	bf5c      	itt	pl
   c0374:	600b      	strpl	r3, [r1, #0]
   c0376:	2002      	movpl	r0, #2
   c0378:	4770      	bx	lr
   c037a:	b298      	uxth	r0, r3
   c037c:	b9a8      	cbnz	r0, c03aa <__lo0bits+0x52>
   c037e:	0c1b      	lsrs	r3, r3, #16
   c0380:	2010      	movs	r0, #16
   c0382:	b2da      	uxtb	r2, r3
   c0384:	b90a      	cbnz	r2, c038a <__lo0bits+0x32>
   c0386:	3008      	adds	r0, #8
   c0388:	0a1b      	lsrs	r3, r3, #8
   c038a:	071a      	lsls	r2, r3, #28
   c038c:	bf04      	itt	eq
   c038e:	091b      	lsreq	r3, r3, #4
   c0390:	3004      	addeq	r0, #4
   c0392:	079a      	lsls	r2, r3, #30
   c0394:	bf04      	itt	eq
   c0396:	089b      	lsreq	r3, r3, #2
   c0398:	3002      	addeq	r0, #2
   c039a:	07da      	lsls	r2, r3, #31
   c039c:	d403      	bmi.n	c03a6 <__lo0bits+0x4e>
   c039e:	085b      	lsrs	r3, r3, #1
   c03a0:	f100 0001 	add.w	r0, r0, #1
   c03a4:	d005      	beq.n	c03b2 <__lo0bits+0x5a>
   c03a6:	600b      	str	r3, [r1, #0]
   c03a8:	4770      	bx	lr
   c03aa:	4610      	mov	r0, r2
   c03ac:	e7e9      	b.n	c0382 <__lo0bits+0x2a>
   c03ae:	2000      	movs	r0, #0
   c03b0:	4770      	bx	lr
   c03b2:	2020      	movs	r0, #32
   c03b4:	4770      	bx	lr
	...

000c03b8 <__i2b>:
   c03b8:	b510      	push	{r4, lr}
   c03ba:	460c      	mov	r4, r1
   c03bc:	2101      	movs	r1, #1
   c03be:	f7ff feb9 	bl	c0134 <_Balloc>
   c03c2:	4602      	mov	r2, r0
   c03c4:	b928      	cbnz	r0, c03d2 <__i2b+0x1a>
   c03c6:	4b05      	ldr	r3, [pc, #20]	; (c03dc <__i2b+0x24>)
   c03c8:	4805      	ldr	r0, [pc, #20]	; (c03e0 <__i2b+0x28>)
   c03ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c03ce:	f7f9 fdf1 	bl	b9fb4 <__assert_func>
   c03d2:	2301      	movs	r3, #1
   c03d4:	6144      	str	r4, [r0, #20]
   c03d6:	6103      	str	r3, [r0, #16]
   c03d8:	bd10      	pop	{r4, pc}
   c03da:	bf00      	nop
   c03dc:	000c2089 	.word	0x000c2089
   c03e0:	000c2134 	.word	0x000c2134

000c03e4 <__multiply>:
   c03e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c03e8:	4691      	mov	r9, r2
   c03ea:	690a      	ldr	r2, [r1, #16]
   c03ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c03f0:	429a      	cmp	r2, r3
   c03f2:	bfb8      	it	lt
   c03f4:	460b      	movlt	r3, r1
   c03f6:	460c      	mov	r4, r1
   c03f8:	bfbc      	itt	lt
   c03fa:	464c      	movlt	r4, r9
   c03fc:	4699      	movlt	r9, r3
   c03fe:	6927      	ldr	r7, [r4, #16]
   c0400:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c0404:	68a3      	ldr	r3, [r4, #8]
   c0406:	6861      	ldr	r1, [r4, #4]
   c0408:	eb07 060a 	add.w	r6, r7, sl
   c040c:	42b3      	cmp	r3, r6
   c040e:	b085      	sub	sp, #20
   c0410:	bfb8      	it	lt
   c0412:	3101      	addlt	r1, #1
   c0414:	f7ff fe8e 	bl	c0134 <_Balloc>
   c0418:	b930      	cbnz	r0, c0428 <__multiply+0x44>
   c041a:	4602      	mov	r2, r0
   c041c:	4b44      	ldr	r3, [pc, #272]	; (c0530 <__multiply+0x14c>)
   c041e:	4845      	ldr	r0, [pc, #276]	; (c0534 <__multiply+0x150>)
   c0420:	f240 115d 	movw	r1, #349	; 0x15d
   c0424:	f7f9 fdc6 	bl	b9fb4 <__assert_func>
   c0428:	f100 0514 	add.w	r5, r0, #20
   c042c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c0430:	462b      	mov	r3, r5
   c0432:	2200      	movs	r2, #0
   c0434:	4543      	cmp	r3, r8
   c0436:	d321      	bcc.n	c047c <__multiply+0x98>
   c0438:	f104 0314 	add.w	r3, r4, #20
   c043c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c0440:	f109 0314 	add.w	r3, r9, #20
   c0444:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c0448:	9202      	str	r2, [sp, #8]
   c044a:	1b3a      	subs	r2, r7, r4
   c044c:	3a15      	subs	r2, #21
   c044e:	f022 0203 	bic.w	r2, r2, #3
   c0452:	3204      	adds	r2, #4
   c0454:	f104 0115 	add.w	r1, r4, #21
   c0458:	428f      	cmp	r7, r1
   c045a:	bf38      	it	cc
   c045c:	2204      	movcc	r2, #4
   c045e:	9201      	str	r2, [sp, #4]
   c0460:	9a02      	ldr	r2, [sp, #8]
   c0462:	9303      	str	r3, [sp, #12]
   c0464:	429a      	cmp	r2, r3
   c0466:	d80c      	bhi.n	c0482 <__multiply+0x9e>
   c0468:	2e00      	cmp	r6, #0
   c046a:	dd03      	ble.n	c0474 <__multiply+0x90>
   c046c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c0470:	2b00      	cmp	r3, #0
   c0472:	d05a      	beq.n	c052a <__multiply+0x146>
   c0474:	6106      	str	r6, [r0, #16]
   c0476:	b005      	add	sp, #20
   c0478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c047c:	f843 2b04 	str.w	r2, [r3], #4
   c0480:	e7d8      	b.n	c0434 <__multiply+0x50>
   c0482:	f8b3 a000 	ldrh.w	sl, [r3]
   c0486:	f1ba 0f00 	cmp.w	sl, #0
   c048a:	d024      	beq.n	c04d6 <__multiply+0xf2>
   c048c:	f104 0e14 	add.w	lr, r4, #20
   c0490:	46a9      	mov	r9, r5
   c0492:	f04f 0c00 	mov.w	ip, #0
   c0496:	f85e 2b04 	ldr.w	r2, [lr], #4
   c049a:	f8d9 1000 	ldr.w	r1, [r9]
   c049e:	fa1f fb82 	uxth.w	fp, r2
   c04a2:	b289      	uxth	r1, r1
   c04a4:	fb0a 110b 	mla	r1, sl, fp, r1
   c04a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c04ac:	f8d9 2000 	ldr.w	r2, [r9]
   c04b0:	4461      	add	r1, ip
   c04b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c04b6:	fb0a c20b 	mla	r2, sl, fp, ip
   c04ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c04be:	b289      	uxth	r1, r1
   c04c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c04c4:	4577      	cmp	r7, lr
   c04c6:	f849 1b04 	str.w	r1, [r9], #4
   c04ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c04ce:	d8e2      	bhi.n	c0496 <__multiply+0xb2>
   c04d0:	9a01      	ldr	r2, [sp, #4]
   c04d2:	f845 c002 	str.w	ip, [r5, r2]
   c04d6:	9a03      	ldr	r2, [sp, #12]
   c04d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c04dc:	3304      	adds	r3, #4
   c04de:	f1b9 0f00 	cmp.w	r9, #0
   c04e2:	d020      	beq.n	c0526 <__multiply+0x142>
   c04e4:	6829      	ldr	r1, [r5, #0]
   c04e6:	f104 0c14 	add.w	ip, r4, #20
   c04ea:	46ae      	mov	lr, r5
   c04ec:	f04f 0a00 	mov.w	sl, #0
   c04f0:	f8bc b000 	ldrh.w	fp, [ip]
   c04f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c04f8:	fb09 220b 	mla	r2, r9, fp, r2
   c04fc:	4492      	add	sl, r2
   c04fe:	b289      	uxth	r1, r1
   c0500:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c0504:	f84e 1b04 	str.w	r1, [lr], #4
   c0508:	f85c 2b04 	ldr.w	r2, [ip], #4
   c050c:	f8be 1000 	ldrh.w	r1, [lr]
   c0510:	0c12      	lsrs	r2, r2, #16
   c0512:	fb09 1102 	mla	r1, r9, r2, r1
   c0516:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c051a:	4567      	cmp	r7, ip
   c051c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c0520:	d8e6      	bhi.n	c04f0 <__multiply+0x10c>
   c0522:	9a01      	ldr	r2, [sp, #4]
   c0524:	50a9      	str	r1, [r5, r2]
   c0526:	3504      	adds	r5, #4
   c0528:	e79a      	b.n	c0460 <__multiply+0x7c>
   c052a:	3e01      	subs	r6, #1
   c052c:	e79c      	b.n	c0468 <__multiply+0x84>
   c052e:	bf00      	nop
   c0530:	000c2089 	.word	0x000c2089
   c0534:	000c2134 	.word	0x000c2134

000c0538 <__pow5mult>:
   c0538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c053c:	4615      	mov	r5, r2
   c053e:	f012 0203 	ands.w	r2, r2, #3
   c0542:	4606      	mov	r6, r0
   c0544:	460f      	mov	r7, r1
   c0546:	d007      	beq.n	c0558 <__pow5mult+0x20>
   c0548:	4c25      	ldr	r4, [pc, #148]	; (c05e0 <__pow5mult+0xa8>)
   c054a:	3a01      	subs	r2, #1
   c054c:	2300      	movs	r3, #0
   c054e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c0552:	f7ff fe51 	bl	c01f8 <__multadd>
   c0556:	4607      	mov	r7, r0
   c0558:	10ad      	asrs	r5, r5, #2
   c055a:	d03d      	beq.n	c05d8 <__pow5mult+0xa0>
   c055c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c055e:	b97c      	cbnz	r4, c0580 <__pow5mult+0x48>
   c0560:	2010      	movs	r0, #16
   c0562:	f7f9 fcd7 	bl	b9f14 <malloc>
   c0566:	4602      	mov	r2, r0
   c0568:	6270      	str	r0, [r6, #36]	; 0x24
   c056a:	b928      	cbnz	r0, c0578 <__pow5mult+0x40>
   c056c:	4b1d      	ldr	r3, [pc, #116]	; (c05e4 <__pow5mult+0xac>)
   c056e:	481e      	ldr	r0, [pc, #120]	; (c05e8 <__pow5mult+0xb0>)
   c0570:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c0574:	f7f9 fd1e 	bl	b9fb4 <__assert_func>
   c0578:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c057c:	6004      	str	r4, [r0, #0]
   c057e:	60c4      	str	r4, [r0, #12]
   c0580:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c0584:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c0588:	b94c      	cbnz	r4, c059e <__pow5mult+0x66>
   c058a:	f240 2171 	movw	r1, #625	; 0x271
   c058e:	4630      	mov	r0, r6
   c0590:	f7ff ff12 	bl	c03b8 <__i2b>
   c0594:	2300      	movs	r3, #0
   c0596:	f8c8 0008 	str.w	r0, [r8, #8]
   c059a:	4604      	mov	r4, r0
   c059c:	6003      	str	r3, [r0, #0]
   c059e:	f04f 0900 	mov.w	r9, #0
   c05a2:	07eb      	lsls	r3, r5, #31
   c05a4:	d50a      	bpl.n	c05bc <__pow5mult+0x84>
   c05a6:	4639      	mov	r1, r7
   c05a8:	4622      	mov	r2, r4
   c05aa:	4630      	mov	r0, r6
   c05ac:	f7ff ff1a 	bl	c03e4 <__multiply>
   c05b0:	4639      	mov	r1, r7
   c05b2:	4680      	mov	r8, r0
   c05b4:	4630      	mov	r0, r6
   c05b6:	f7ff fdfd 	bl	c01b4 <_Bfree>
   c05ba:	4647      	mov	r7, r8
   c05bc:	106d      	asrs	r5, r5, #1
   c05be:	d00b      	beq.n	c05d8 <__pow5mult+0xa0>
   c05c0:	6820      	ldr	r0, [r4, #0]
   c05c2:	b938      	cbnz	r0, c05d4 <__pow5mult+0x9c>
   c05c4:	4622      	mov	r2, r4
   c05c6:	4621      	mov	r1, r4
   c05c8:	4630      	mov	r0, r6
   c05ca:	f7ff ff0b 	bl	c03e4 <__multiply>
   c05ce:	6020      	str	r0, [r4, #0]
   c05d0:	f8c0 9000 	str.w	r9, [r0]
   c05d4:	4604      	mov	r4, r0
   c05d6:	e7e4      	b.n	c05a2 <__pow5mult+0x6a>
   c05d8:	4638      	mov	r0, r7
   c05da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c05de:	bf00      	nop
   c05e0:	000c22a8 	.word	0x000c22a8
   c05e4:	000c1e91 	.word	0x000c1e91
   c05e8:	000c2134 	.word	0x000c2134

000c05ec <__lshift>:
   c05ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c05f0:	460c      	mov	r4, r1
   c05f2:	6849      	ldr	r1, [r1, #4]
   c05f4:	6923      	ldr	r3, [r4, #16]
   c05f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c05fa:	68a3      	ldr	r3, [r4, #8]
   c05fc:	4607      	mov	r7, r0
   c05fe:	4691      	mov	r9, r2
   c0600:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c0604:	f108 0601 	add.w	r6, r8, #1
   c0608:	42b3      	cmp	r3, r6
   c060a:	db0b      	blt.n	c0624 <__lshift+0x38>
   c060c:	4638      	mov	r0, r7
   c060e:	f7ff fd91 	bl	c0134 <_Balloc>
   c0612:	4605      	mov	r5, r0
   c0614:	b948      	cbnz	r0, c062a <__lshift+0x3e>
   c0616:	4602      	mov	r2, r0
   c0618:	4b2a      	ldr	r3, [pc, #168]	; (c06c4 <__lshift+0xd8>)
   c061a:	482b      	ldr	r0, [pc, #172]	; (c06c8 <__lshift+0xdc>)
   c061c:	f240 11d9 	movw	r1, #473	; 0x1d9
   c0620:	f7f9 fcc8 	bl	b9fb4 <__assert_func>
   c0624:	3101      	adds	r1, #1
   c0626:	005b      	lsls	r3, r3, #1
   c0628:	e7ee      	b.n	c0608 <__lshift+0x1c>
   c062a:	2300      	movs	r3, #0
   c062c:	f100 0114 	add.w	r1, r0, #20
   c0630:	f100 0210 	add.w	r2, r0, #16
   c0634:	4618      	mov	r0, r3
   c0636:	4553      	cmp	r3, sl
   c0638:	db37      	blt.n	c06aa <__lshift+0xbe>
   c063a:	6920      	ldr	r0, [r4, #16]
   c063c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c0640:	f104 0314 	add.w	r3, r4, #20
   c0644:	f019 091f 	ands.w	r9, r9, #31
   c0648:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c064c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c0650:	d02f      	beq.n	c06b2 <__lshift+0xc6>
   c0652:	f1c9 0e20 	rsb	lr, r9, #32
   c0656:	468a      	mov	sl, r1
   c0658:	f04f 0c00 	mov.w	ip, #0
   c065c:	681a      	ldr	r2, [r3, #0]
   c065e:	fa02 f209 	lsl.w	r2, r2, r9
   c0662:	ea42 020c 	orr.w	r2, r2, ip
   c0666:	f84a 2b04 	str.w	r2, [sl], #4
   c066a:	f853 2b04 	ldr.w	r2, [r3], #4
   c066e:	4298      	cmp	r0, r3
   c0670:	fa22 fc0e 	lsr.w	ip, r2, lr
   c0674:	d8f2      	bhi.n	c065c <__lshift+0x70>
   c0676:	1b03      	subs	r3, r0, r4
   c0678:	3b15      	subs	r3, #21
   c067a:	f023 0303 	bic.w	r3, r3, #3
   c067e:	3304      	adds	r3, #4
   c0680:	f104 0215 	add.w	r2, r4, #21
   c0684:	4290      	cmp	r0, r2
   c0686:	bf38      	it	cc
   c0688:	2304      	movcc	r3, #4
   c068a:	f841 c003 	str.w	ip, [r1, r3]
   c068e:	f1bc 0f00 	cmp.w	ip, #0
   c0692:	d001      	beq.n	c0698 <__lshift+0xac>
   c0694:	f108 0602 	add.w	r6, r8, #2
   c0698:	3e01      	subs	r6, #1
   c069a:	4638      	mov	r0, r7
   c069c:	612e      	str	r6, [r5, #16]
   c069e:	4621      	mov	r1, r4
   c06a0:	f7ff fd88 	bl	c01b4 <_Bfree>
   c06a4:	4628      	mov	r0, r5
   c06a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c06aa:	f842 0f04 	str.w	r0, [r2, #4]!
   c06ae:	3301      	adds	r3, #1
   c06b0:	e7c1      	b.n	c0636 <__lshift+0x4a>
   c06b2:	3904      	subs	r1, #4
   c06b4:	f853 2b04 	ldr.w	r2, [r3], #4
   c06b8:	f841 2f04 	str.w	r2, [r1, #4]!
   c06bc:	4298      	cmp	r0, r3
   c06be:	d8f9      	bhi.n	c06b4 <__lshift+0xc8>
   c06c0:	e7ea      	b.n	c0698 <__lshift+0xac>
   c06c2:	bf00      	nop
   c06c4:	000c2089 	.word	0x000c2089
   c06c8:	000c2134 	.word	0x000c2134

000c06cc <__mcmp>:
   c06cc:	b530      	push	{r4, r5, lr}
   c06ce:	6902      	ldr	r2, [r0, #16]
   c06d0:	690c      	ldr	r4, [r1, #16]
   c06d2:	1b12      	subs	r2, r2, r4
   c06d4:	d10e      	bne.n	c06f4 <__mcmp+0x28>
   c06d6:	f100 0314 	add.w	r3, r0, #20
   c06da:	3114      	adds	r1, #20
   c06dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c06e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c06e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c06e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c06ec:	42a5      	cmp	r5, r4
   c06ee:	d003      	beq.n	c06f8 <__mcmp+0x2c>
   c06f0:	d305      	bcc.n	c06fe <__mcmp+0x32>
   c06f2:	2201      	movs	r2, #1
   c06f4:	4610      	mov	r0, r2
   c06f6:	bd30      	pop	{r4, r5, pc}
   c06f8:	4283      	cmp	r3, r0
   c06fa:	d3f3      	bcc.n	c06e4 <__mcmp+0x18>
   c06fc:	e7fa      	b.n	c06f4 <__mcmp+0x28>
   c06fe:	f04f 32ff 	mov.w	r2, #4294967295
   c0702:	e7f7      	b.n	c06f4 <__mcmp+0x28>

000c0704 <__mdiff>:
   c0704:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0708:	460c      	mov	r4, r1
   c070a:	4606      	mov	r6, r0
   c070c:	4611      	mov	r1, r2
   c070e:	4620      	mov	r0, r4
   c0710:	4690      	mov	r8, r2
   c0712:	f7ff ffdb 	bl	c06cc <__mcmp>
   c0716:	1e05      	subs	r5, r0, #0
   c0718:	d110      	bne.n	c073c <__mdiff+0x38>
   c071a:	4629      	mov	r1, r5
   c071c:	4630      	mov	r0, r6
   c071e:	f7ff fd09 	bl	c0134 <_Balloc>
   c0722:	b930      	cbnz	r0, c0732 <__mdiff+0x2e>
   c0724:	4b3a      	ldr	r3, [pc, #232]	; (c0810 <__mdiff+0x10c>)
   c0726:	4602      	mov	r2, r0
   c0728:	f240 2132 	movw	r1, #562	; 0x232
   c072c:	4839      	ldr	r0, [pc, #228]	; (c0814 <__mdiff+0x110>)
   c072e:	f7f9 fc41 	bl	b9fb4 <__assert_func>
   c0732:	2301      	movs	r3, #1
   c0734:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c0738:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c073c:	bfa4      	itt	ge
   c073e:	4643      	movge	r3, r8
   c0740:	46a0      	movge	r8, r4
   c0742:	4630      	mov	r0, r6
   c0744:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c0748:	bfa6      	itte	ge
   c074a:	461c      	movge	r4, r3
   c074c:	2500      	movge	r5, #0
   c074e:	2501      	movlt	r5, #1
   c0750:	f7ff fcf0 	bl	c0134 <_Balloc>
   c0754:	b920      	cbnz	r0, c0760 <__mdiff+0x5c>
   c0756:	4b2e      	ldr	r3, [pc, #184]	; (c0810 <__mdiff+0x10c>)
   c0758:	4602      	mov	r2, r0
   c075a:	f44f 7110 	mov.w	r1, #576	; 0x240
   c075e:	e7e5      	b.n	c072c <__mdiff+0x28>
   c0760:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c0764:	6926      	ldr	r6, [r4, #16]
   c0766:	60c5      	str	r5, [r0, #12]
   c0768:	f104 0914 	add.w	r9, r4, #20
   c076c:	f108 0514 	add.w	r5, r8, #20
   c0770:	f100 0e14 	add.w	lr, r0, #20
   c0774:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c0778:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c077c:	f108 0210 	add.w	r2, r8, #16
   c0780:	46f2      	mov	sl, lr
   c0782:	2100      	movs	r1, #0
   c0784:	f859 3b04 	ldr.w	r3, [r9], #4
   c0788:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c078c:	fa1f f883 	uxth.w	r8, r3
   c0790:	fa11 f18b 	uxtah	r1, r1, fp
   c0794:	0c1b      	lsrs	r3, r3, #16
   c0796:	eba1 0808 	sub.w	r8, r1, r8
   c079a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c079e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c07a2:	fa1f f888 	uxth.w	r8, r8
   c07a6:	1419      	asrs	r1, r3, #16
   c07a8:	454e      	cmp	r6, r9
   c07aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c07ae:	f84a 3b04 	str.w	r3, [sl], #4
   c07b2:	d8e7      	bhi.n	c0784 <__mdiff+0x80>
   c07b4:	1b33      	subs	r3, r6, r4
   c07b6:	3b15      	subs	r3, #21
   c07b8:	f023 0303 	bic.w	r3, r3, #3
   c07bc:	3304      	adds	r3, #4
   c07be:	3415      	adds	r4, #21
   c07c0:	42a6      	cmp	r6, r4
   c07c2:	bf38      	it	cc
   c07c4:	2304      	movcc	r3, #4
   c07c6:	441d      	add	r5, r3
   c07c8:	4473      	add	r3, lr
   c07ca:	469e      	mov	lr, r3
   c07cc:	462e      	mov	r6, r5
   c07ce:	4566      	cmp	r6, ip
   c07d0:	d30e      	bcc.n	c07f0 <__mdiff+0xec>
   c07d2:	f10c 0203 	add.w	r2, ip, #3
   c07d6:	1b52      	subs	r2, r2, r5
   c07d8:	f022 0203 	bic.w	r2, r2, #3
   c07dc:	3d03      	subs	r5, #3
   c07de:	45ac      	cmp	ip, r5
   c07e0:	bf38      	it	cc
   c07e2:	2200      	movcc	r2, #0
   c07e4:	441a      	add	r2, r3
   c07e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c07ea:	b17b      	cbz	r3, c080c <__mdiff+0x108>
   c07ec:	6107      	str	r7, [r0, #16]
   c07ee:	e7a3      	b.n	c0738 <__mdiff+0x34>
   c07f0:	f856 8b04 	ldr.w	r8, [r6], #4
   c07f4:	fa11 f288 	uxtah	r2, r1, r8
   c07f8:	1414      	asrs	r4, r2, #16
   c07fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c07fe:	b292      	uxth	r2, r2
   c0800:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c0804:	f84e 2b04 	str.w	r2, [lr], #4
   c0808:	1421      	asrs	r1, r4, #16
   c080a:	e7e0      	b.n	c07ce <__mdiff+0xca>
   c080c:	3f01      	subs	r7, #1
   c080e:	e7ea      	b.n	c07e6 <__mdiff+0xe2>
   c0810:	000c2089 	.word	0x000c2089
   c0814:	000c2134 	.word	0x000c2134

000c0818 <__ulp>:
   c0818:	b082      	sub	sp, #8
   c081a:	ed8d 0b00 	vstr	d0, [sp]
   c081e:	9b01      	ldr	r3, [sp, #4]
   c0820:	4912      	ldr	r1, [pc, #72]	; (c086c <__ulp+0x54>)
   c0822:	4019      	ands	r1, r3
   c0824:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c0828:	2900      	cmp	r1, #0
   c082a:	dd05      	ble.n	c0838 <__ulp+0x20>
   c082c:	2200      	movs	r2, #0
   c082e:	460b      	mov	r3, r1
   c0830:	ec43 2b10 	vmov	d0, r2, r3
   c0834:	b002      	add	sp, #8
   c0836:	4770      	bx	lr
   c0838:	4249      	negs	r1, r1
   c083a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c083e:	ea4f 5021 	mov.w	r0, r1, asr #20
   c0842:	f04f 0200 	mov.w	r2, #0
   c0846:	f04f 0300 	mov.w	r3, #0
   c084a:	da04      	bge.n	c0856 <__ulp+0x3e>
   c084c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c0850:	fa41 f300 	asr.w	r3, r1, r0
   c0854:	e7ec      	b.n	c0830 <__ulp+0x18>
   c0856:	f1a0 0114 	sub.w	r1, r0, #20
   c085a:	291e      	cmp	r1, #30
   c085c:	bfda      	itte	le
   c085e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c0862:	fa20 f101 	lsrle.w	r1, r0, r1
   c0866:	2101      	movgt	r1, #1
   c0868:	460a      	mov	r2, r1
   c086a:	e7e1      	b.n	c0830 <__ulp+0x18>
   c086c:	7ff00000 	.word	0x7ff00000

000c0870 <__b2d>:
   c0870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0872:	6905      	ldr	r5, [r0, #16]
   c0874:	f100 0714 	add.w	r7, r0, #20
   c0878:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c087c:	1f2e      	subs	r6, r5, #4
   c087e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c0882:	4620      	mov	r0, r4
   c0884:	f7ff fd48 	bl	c0318 <__hi0bits>
   c0888:	f1c0 0320 	rsb	r3, r0, #32
   c088c:	280a      	cmp	r0, #10
   c088e:	f8df c07c 	ldr.w	ip, [pc, #124]	; c090c <__b2d+0x9c>
   c0892:	600b      	str	r3, [r1, #0]
   c0894:	dc14      	bgt.n	c08c0 <__b2d+0x50>
   c0896:	f1c0 0e0b 	rsb	lr, r0, #11
   c089a:	fa24 f10e 	lsr.w	r1, r4, lr
   c089e:	42b7      	cmp	r7, r6
   c08a0:	ea41 030c 	orr.w	r3, r1, ip
   c08a4:	bf34      	ite	cc
   c08a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c08aa:	2100      	movcs	r1, #0
   c08ac:	3015      	adds	r0, #21
   c08ae:	fa04 f000 	lsl.w	r0, r4, r0
   c08b2:	fa21 f10e 	lsr.w	r1, r1, lr
   c08b6:	ea40 0201 	orr.w	r2, r0, r1
   c08ba:	ec43 2b10 	vmov	d0, r2, r3
   c08be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c08c0:	42b7      	cmp	r7, r6
   c08c2:	bf3a      	itte	cc
   c08c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c08c8:	f1a5 0608 	subcc.w	r6, r5, #8
   c08cc:	2100      	movcs	r1, #0
   c08ce:	380b      	subs	r0, #11
   c08d0:	d017      	beq.n	c0902 <__b2d+0x92>
   c08d2:	f1c0 0c20 	rsb	ip, r0, #32
   c08d6:	fa04 f500 	lsl.w	r5, r4, r0
   c08da:	42be      	cmp	r6, r7
   c08dc:	fa21 f40c 	lsr.w	r4, r1, ip
   c08e0:	ea45 0504 	orr.w	r5, r5, r4
   c08e4:	bf8c      	ite	hi
   c08e6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c08ea:	2400      	movls	r4, #0
   c08ec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c08f0:	fa01 f000 	lsl.w	r0, r1, r0
   c08f4:	fa24 f40c 	lsr.w	r4, r4, ip
   c08f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c08fc:	ea40 0204 	orr.w	r2, r0, r4
   c0900:	e7db      	b.n	c08ba <__b2d+0x4a>
   c0902:	ea44 030c 	orr.w	r3, r4, ip
   c0906:	460a      	mov	r2, r1
   c0908:	e7d7      	b.n	c08ba <__b2d+0x4a>
   c090a:	bf00      	nop
   c090c:	3ff00000 	.word	0x3ff00000

000c0910 <__d2b>:
   c0910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c0914:	4689      	mov	r9, r1
   c0916:	2101      	movs	r1, #1
   c0918:	ec57 6b10 	vmov	r6, r7, d0
   c091c:	4690      	mov	r8, r2
   c091e:	f7ff fc09 	bl	c0134 <_Balloc>
   c0922:	4604      	mov	r4, r0
   c0924:	b930      	cbnz	r0, c0934 <__d2b+0x24>
   c0926:	4602      	mov	r2, r0
   c0928:	4b25      	ldr	r3, [pc, #148]	; (c09c0 <__d2b+0xb0>)
   c092a:	4826      	ldr	r0, [pc, #152]	; (c09c4 <__d2b+0xb4>)
   c092c:	f240 310a 	movw	r1, #778	; 0x30a
   c0930:	f7f9 fb40 	bl	b9fb4 <__assert_func>
   c0934:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c0938:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c093c:	bb35      	cbnz	r5, c098c <__d2b+0x7c>
   c093e:	2e00      	cmp	r6, #0
   c0940:	9301      	str	r3, [sp, #4]
   c0942:	d028      	beq.n	c0996 <__d2b+0x86>
   c0944:	4668      	mov	r0, sp
   c0946:	9600      	str	r6, [sp, #0]
   c0948:	f7ff fd06 	bl	c0358 <__lo0bits>
   c094c:	9900      	ldr	r1, [sp, #0]
   c094e:	b300      	cbz	r0, c0992 <__d2b+0x82>
   c0950:	9a01      	ldr	r2, [sp, #4]
   c0952:	f1c0 0320 	rsb	r3, r0, #32
   c0956:	fa02 f303 	lsl.w	r3, r2, r3
   c095a:	430b      	orrs	r3, r1
   c095c:	40c2      	lsrs	r2, r0
   c095e:	6163      	str	r3, [r4, #20]
   c0960:	9201      	str	r2, [sp, #4]
   c0962:	9b01      	ldr	r3, [sp, #4]
   c0964:	61a3      	str	r3, [r4, #24]
   c0966:	2b00      	cmp	r3, #0
   c0968:	bf14      	ite	ne
   c096a:	2202      	movne	r2, #2
   c096c:	2201      	moveq	r2, #1
   c096e:	6122      	str	r2, [r4, #16]
   c0970:	b1d5      	cbz	r5, c09a8 <__d2b+0x98>
   c0972:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c0976:	4405      	add	r5, r0
   c0978:	f8c9 5000 	str.w	r5, [r9]
   c097c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c0980:	f8c8 0000 	str.w	r0, [r8]
   c0984:	4620      	mov	r0, r4
   c0986:	b003      	add	sp, #12
   c0988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c098c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c0990:	e7d5      	b.n	c093e <__d2b+0x2e>
   c0992:	6161      	str	r1, [r4, #20]
   c0994:	e7e5      	b.n	c0962 <__d2b+0x52>
   c0996:	a801      	add	r0, sp, #4
   c0998:	f7ff fcde 	bl	c0358 <__lo0bits>
   c099c:	9b01      	ldr	r3, [sp, #4]
   c099e:	6163      	str	r3, [r4, #20]
   c09a0:	2201      	movs	r2, #1
   c09a2:	6122      	str	r2, [r4, #16]
   c09a4:	3020      	adds	r0, #32
   c09a6:	e7e3      	b.n	c0970 <__d2b+0x60>
   c09a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c09ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c09b0:	f8c9 0000 	str.w	r0, [r9]
   c09b4:	6918      	ldr	r0, [r3, #16]
   c09b6:	f7ff fcaf 	bl	c0318 <__hi0bits>
   c09ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c09be:	e7df      	b.n	c0980 <__d2b+0x70>
   c09c0:	000c2089 	.word	0x000c2089
   c09c4:	000c2134 	.word	0x000c2134

000c09c8 <__ratio>:
   c09c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c09cc:	4688      	mov	r8, r1
   c09ce:	4669      	mov	r1, sp
   c09d0:	4681      	mov	r9, r0
   c09d2:	f7ff ff4d 	bl	c0870 <__b2d>
   c09d6:	a901      	add	r1, sp, #4
   c09d8:	4640      	mov	r0, r8
   c09da:	ec55 4b10 	vmov	r4, r5, d0
   c09de:	f7ff ff47 	bl	c0870 <__b2d>
   c09e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c09e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c09ea:	eba3 0c02 	sub.w	ip, r3, r2
   c09ee:	e9dd 3200 	ldrd	r3, r2, [sp]
   c09f2:	1a9b      	subs	r3, r3, r2
   c09f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c09f8:	ec51 0b10 	vmov	r0, r1, d0
   c09fc:	2b00      	cmp	r3, #0
   c09fe:	bfd6      	itet	le
   c0a00:	460a      	movle	r2, r1
   c0a02:	462a      	movgt	r2, r5
   c0a04:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c0a08:	468b      	mov	fp, r1
   c0a0a:	462f      	mov	r7, r5
   c0a0c:	bfd4      	ite	le
   c0a0e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c0a12:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c0a16:	4620      	mov	r0, r4
   c0a18:	ee10 2a10 	vmov	r2, s0
   c0a1c:	465b      	mov	r3, fp
   c0a1e:	4639      	mov	r1, r7
   c0a20:	f7fd fdb2 	bl	be588 <__aeabi_ddiv>
   c0a24:	ec41 0b10 	vmov	d0, r0, r1
   c0a28:	b003      	add	sp, #12
   c0a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c0a2e <__copybits>:
   c0a2e:	3901      	subs	r1, #1
   c0a30:	b570      	push	{r4, r5, r6, lr}
   c0a32:	1149      	asrs	r1, r1, #5
   c0a34:	6914      	ldr	r4, [r2, #16]
   c0a36:	3101      	adds	r1, #1
   c0a38:	f102 0314 	add.w	r3, r2, #20
   c0a3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c0a40:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c0a44:	1f05      	subs	r5, r0, #4
   c0a46:	42a3      	cmp	r3, r4
   c0a48:	d30c      	bcc.n	c0a64 <__copybits+0x36>
   c0a4a:	1aa3      	subs	r3, r4, r2
   c0a4c:	3b11      	subs	r3, #17
   c0a4e:	f023 0303 	bic.w	r3, r3, #3
   c0a52:	3211      	adds	r2, #17
   c0a54:	42a2      	cmp	r2, r4
   c0a56:	bf88      	it	hi
   c0a58:	2300      	movhi	r3, #0
   c0a5a:	4418      	add	r0, r3
   c0a5c:	2300      	movs	r3, #0
   c0a5e:	4288      	cmp	r0, r1
   c0a60:	d305      	bcc.n	c0a6e <__copybits+0x40>
   c0a62:	bd70      	pop	{r4, r5, r6, pc}
   c0a64:	f853 6b04 	ldr.w	r6, [r3], #4
   c0a68:	f845 6f04 	str.w	r6, [r5, #4]!
   c0a6c:	e7eb      	b.n	c0a46 <__copybits+0x18>
   c0a6e:	f840 3b04 	str.w	r3, [r0], #4
   c0a72:	e7f4      	b.n	c0a5e <__copybits+0x30>

000c0a74 <__any_on>:
   c0a74:	f100 0214 	add.w	r2, r0, #20
   c0a78:	6900      	ldr	r0, [r0, #16]
   c0a7a:	114b      	asrs	r3, r1, #5
   c0a7c:	4298      	cmp	r0, r3
   c0a7e:	b510      	push	{r4, lr}
   c0a80:	db11      	blt.n	c0aa6 <__any_on+0x32>
   c0a82:	dd0a      	ble.n	c0a9a <__any_on+0x26>
   c0a84:	f011 011f 	ands.w	r1, r1, #31
   c0a88:	d007      	beq.n	c0a9a <__any_on+0x26>
   c0a8a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c0a8e:	fa24 f001 	lsr.w	r0, r4, r1
   c0a92:	fa00 f101 	lsl.w	r1, r0, r1
   c0a96:	428c      	cmp	r4, r1
   c0a98:	d10b      	bne.n	c0ab2 <__any_on+0x3e>
   c0a9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c0a9e:	4293      	cmp	r3, r2
   c0aa0:	d803      	bhi.n	c0aaa <__any_on+0x36>
   c0aa2:	2000      	movs	r0, #0
   c0aa4:	bd10      	pop	{r4, pc}
   c0aa6:	4603      	mov	r3, r0
   c0aa8:	e7f7      	b.n	c0a9a <__any_on+0x26>
   c0aaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c0aae:	2900      	cmp	r1, #0
   c0ab0:	d0f5      	beq.n	c0a9e <__any_on+0x2a>
   c0ab2:	2001      	movs	r0, #1
   c0ab4:	e7f6      	b.n	c0aa4 <__any_on+0x30>

000c0ab6 <_calloc_r>:
   c0ab6:	b513      	push	{r0, r1, r4, lr}
   c0ab8:	434a      	muls	r2, r1
   c0aba:	4611      	mov	r1, r2
   c0abc:	9201      	str	r2, [sp, #4]
   c0abe:	f7f9 fa69 	bl	b9f94 <_malloc_r>
   c0ac2:	4604      	mov	r4, r0
   c0ac4:	b118      	cbz	r0, c0ace <_calloc_r+0x18>
   c0ac6:	9a01      	ldr	r2, [sp, #4]
   c0ac8:	2100      	movs	r1, #0
   c0aca:	f7fd ffa0 	bl	bea0e <memset>
   c0ace:	4620      	mov	r0, r4
   c0ad0:	b002      	add	sp, #8
   c0ad2:	bd10      	pop	{r4, pc}
   c0ad4:	0000      	movs	r0, r0
	...

000c0ad8 <nan>:
   c0ad8:	ed9f 0b01 	vldr	d0, [pc, #4]	; c0ae0 <nan+0x8>
   c0adc:	4770      	bx	lr
   c0ade:	bf00      	nop
   c0ae0:	00000000 	.word	0x00000000
   c0ae4:	7ff80000 	.word	0x7ff80000

000c0ae8 <__ascii_wctomb>:
   c0ae8:	b149      	cbz	r1, c0afe <__ascii_wctomb+0x16>
   c0aea:	2aff      	cmp	r2, #255	; 0xff
   c0aec:	bf85      	ittet	hi
   c0aee:	238a      	movhi	r3, #138	; 0x8a
   c0af0:	6003      	strhi	r3, [r0, #0]
   c0af2:	700a      	strbls	r2, [r1, #0]
   c0af4:	f04f 30ff 	movhi.w	r0, #4294967295
   c0af8:	bf98      	it	ls
   c0afa:	2001      	movls	r0, #1
   c0afc:	4770      	bx	lr
   c0afe:	4608      	mov	r0, r1
   c0b00:	4770      	bx	lr
	...

000c0b04 <__aeabi_d2lz>:
   c0b04:	b538      	push	{r3, r4, r5, lr}
   c0b06:	2200      	movs	r2, #0
   c0b08:	2300      	movs	r3, #0
   c0b0a:	4604      	mov	r4, r0
   c0b0c:	460d      	mov	r5, r1
   c0b0e:	f7fd fe83 	bl	be818 <__aeabi_dcmplt>
   c0b12:	b928      	cbnz	r0, c0b20 <__aeabi_d2lz+0x1c>
   c0b14:	4620      	mov	r0, r4
   c0b16:	4629      	mov	r1, r5
   c0b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c0b1c:	f7fd bf14 	b.w	be948 <__aeabi_d2ulz>
   c0b20:	4620      	mov	r0, r4
   c0b22:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c0b26:	f7fd ff0f 	bl	be948 <__aeabi_d2ulz>
   c0b2a:	4240      	negs	r0, r0
   c0b2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c0b30:	bd38      	pop	{r3, r4, r5, pc}
   c0b32:	bf00      	nop

000c0b34 <dynalib_user>:
   c0b34:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c0b44:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c0b54:	7620 7269 7574 6c61 6400 6665 7561 746c      virtual.default
   c0b64:	0020 534d 0042 534c 0042 533c 4950 6553      .MSB.LSB.<SPISe
   c0b74:	7474 6e69 7367 6420 6665 7561 746c 003e     ttings default>.
   c0b84:	533c 4950 6553 7474 6e69 7367 2520 2573     <SPISettings %s%
   c0b94:	2075 7325 4d20 444f 2545 3e75 6600 6c69     u %s MODE%u>.fil
   c0ba4:	6e65 6d61 0065 6966 656c 6f63 706d 6600     ename.filecomp.f
   c0bb4:	6c69 6465 6e6f 0065 575b 5241 5d4e 5220     iledone.[WARN] R
   c0bc4:	6950 4d20 7365 6173 6567 4320 6568 6b63     Pi Message Check
   c0bd4:	7573 206d 6f44 7365 4e20 746f 4d20 7461     sum Does Not Mat
   c0be4:	6863 3a21 2520 0073 4343 3225 6e73 6b61     ch!: %s.CC%2snak
   c0bf4:	3325 0073 7463 006c 7325 2520 2073 7325     %3s.ctl.%s %s %s
   c0c04:	2520 2064 6425 2520 2064 6425 0a00 5b00      %d %d %d %d...[
   c0c14:	4e49 4f46 205d 6552 6563 7669 6465 5220     INFO] Received R
   c0c24:	7361 6270 7265 7972 5020 2069 654d 7373     aspberry Pi Mess
   c0c34:	6761 3a65 2520 0073 7325 3025 7832 4200     age: %s.%s%02x.B
   c0c44:	746f 6431 7461 4300 4243 6425 746d 2572     ot1dat.CCB%dmtr%
   c0c54:	3330 2564 3330 0064 4343 2542 6864 6177     03d%03d.CCB%dhwa
   c0c64:	7600 6365 6f74 3a72 5f3a 5f4d 6172 676e     .vector::_M_rang
   c0c74:	5f65 6863 6365 3a6b 5f20 6e5f 2820 6877     e_check: __n (wh
   c0c84:	6369 2068 7369 2520 757a 2029 3d3e 7420     ich is %zu) >= t
   c0c94:	6968 2d73 733e 7a69 2865 2029 7728 6968     his->size() (whi
   c0ca4:	6863 6920 2073 7a25 2975 4300 4243 6425     ch is %zu).CCB%d
   c0cb4:	7463 256c 2e30 6636 2520 2e30 6636 2520     ctl%0.6f %0.6f %
   c0cc4:	2064 6425 2520 0064 6576 7463 726f 3a3a     d %d %d.vector::
   c0cd4:	4d5f 725f 6165 6c6c 636f 695f 736e 7265     _M_realloc_inser
   c0ce4:	0074 6f4d 6f74 7372 5220 7365 6d75 6e69     t.Motors Resumin
   c0cf4:	0067 7250 7365 2073 6761 6961 206e 6f74     g.Press again to
   c0d04:	7320 6f74 0070 6f4d 6f74 7372 5320 6f74      stop.Motors Sto
   c0d14:	7070 6465 0021 7250 7365 2073 6761 6961     pped!.Press agai
   c0d24:	206e 6f74 7320 6174 7472 5b00 4157 4e52     n to start.[WARN
   c0d34:	205d 6157 6e72 6e69 2c67 6320 6568 6b63     ] Warning, check
   c0d44:	7573 206d 6f64 7365 6e20 746f 6d20 7461     sum does not mat
   c0d54:	6863 0021 7573 0070 7525 2520 2075 7325     ch!.sup.%u %u %s
   c0d64:	2520 2073 6425 2520 0064 7453 7461 7375      %s %d %d.Status
   c0d74:	5520 6470 7461 2165 7300 736e 2500 2073      Update!.sns.%s 
   c0d84:	7325 2520 2064 6425 2520 2064 6425 2520     %s %d %d %d %d %
   c0d94:	0064 616e 006b 7768 0064 7470 0073 505b     d.nak.hwd.pts.[P
   c0da4:	5455 5d53 5220 6365 6965 6576 2064 7453     UTS] Received St
   c0db4:	6972 676e 4320 6d6f 616d 646e 203a 7325     ring Command: %s
   c0dc4:	6c00 7464 6c00 6264 7700 646c 7700 626c     .ldt.ldb.wld.wlb
   c0dd4:	5b00 4e49 4f46 205d 6552 6563 7669 6465     .[INFO] Received
   c0de4:	4c20 4554 4d20 7365 6173 6567 203a 7325      LTE Message: %s
   c0df4:	5b00 4e49 4f46 205d 6552 6563 7669 6465     .[INFO] Received
   c0e04:	4220 454c 4d20 7365 6173 6567 203a 7325      BLE Message: %s
   c0e14:	5b00 4e49 4f46 205d 6552 6563 7669 6465     .[INFO] Received
   c0e24:	5820 6542 2065 654d 7373 6761 3a65 2520      XBee Message: %
   c0e34:	0073 002f 4343 7548 0062 4343 2542 6464     s./.CCHub.CCB%dd
   c0e44:	706d 5200 6365 726f 0064 6142 7474 7265     mp.Record.Batter
   c0e54:	0079 664f 6c66 616f 0064 6553 746e 7972     y.Offload.Sentry
   c0e64:	5200 6d65 5300 6e65 4100 7475 5300 6769     .Rem.Sen.Aut.Sig
   c0e74:	616e 006c 6f53 506c 7277 4200 7461 7750     nal.SolPwr.BatPw
   c0e84:	0072 3462 3032 3936 3031 642d 3463 2d62     r.b4206910-dc4b-
   c0e94:	3735 3334 632d 6238 2d31 3239 3064 3765     5743-c8b1-92d0e7
   c0ea4:	3135 3238 3062 6200 3234 3630 3139 2d32     5182b0.b4206912-
   c0eb4:	6364 6234 352d 3437 2d33 3863 3162 392d     dc4b-5743-c8b1-9
   c0ec4:	6432 6530 3537 3831 6232 0030 3462 3032     2d0e75182b0.b420
   c0ed4:	3936 3331 642d 3463 2d62 3735 3334 632d     6913-dc4b-5743-c
   c0ee4:	6238 2d31 3239 3064 3765 3135 3238 3062     8b1-92d0e75182b0
   c0ef4:	6200 3234 3630 3139 2d34 6364 6234 352d     .b4206914-dc4b-5
   c0f04:	3437 2d33 3863 3162 392d 6432 6530 3537     743-c8b1-92d0e75
   c0f14:	3831 6232 0030 6e4f 4f00 6666 4900 706e     182b0.On.Off.Inp
   c0f24:	7475 4320 6d6f 616d 646e 2500 3230 2564     ut Command.%02d%
   c0f34:	3230 2564 3430 2564 3230 2564 3230 2564     02d%04d%02d%02d%
   c0f44:	3230 0064 6157 6574 4272 746f 5f00 4f4c     02d.WaterBot._LO
   c0f54:	2e47 7874 0074 5320 6174 7472 6e69 2067     G.txt. Starting 
   c0f64:	4f00 004b 4343 4241 7073 0063 4343 4241     .OK.CCABspc.CCAB
   c0f74:	7473 0070                                   stp.

000c0f78 <_ZTVN8particle11SPISettingsE>:
	...
   c0f80:	445d 000b 40cd 000b 410f 000b               ]D...@...A..

000c0f8c <_ZTV5Timer>:
	...
   c0f94:	44e1 000b 4535 000b 4175 000b               .D..5E..uA..

000c0fa0 <_ZTV4File>:
	...
   c0fa8:	410d 000b 411d 000b 415d 000b 4157 000b     .A...A..]A..WA..
   c0fb8:	40cf 000b 4137 000b 4131 000b 412b 000b     .@..7A..1A..+A..
   c0fc8:	4c43 4145 4552 0044 5300 4f54 5050 4445     CLEARED..STOPPED
   c0fd8:	0000 6157 6e72 6e69 0067 4200 746f 2520     ..Warning..Bot %
   c0fe8:	0064 4c00 776f 4220 7461 6574 7972 203a     d..Low Battery: 
   c0ff8:	6425 0000 4453 4320 7261 2064 6146 6c69     %d..SD Card Fail
   c1008:	6465 0000 5047 2f53 6f43 706d 7361 2073     ed..GPS/Compass 
   c1018:	7245 6f72 0072 4c00 6165 206b 6873 7475     Error..Leak shut
   c1028:	666f 0066 4c00 6165 206b 6564 6574 7463     off..Leak detect
   c1038:	6465 0000 6e49 6f66 0000 6f4e 2074 6f63     ed..Info..Not co
   c1048:	6e6e 6365 6574 2064 6f74 4220 454c 0000     nnected to BLE..
   c1058:	7753 7469 6863 6e69 2067 4c42 2045 6f63     Switching BLE co
   c1068:	6e6e 0000 6548 6c6c 216f 0000 6353 6e61     nn..Hello!..Scan
   c1078:	696e 676e 6620 726f 4220 746f 0073 4f00     ning for Bots..O
   c1088:	204b 6877 6e65 6220 746f 2073 6572 6461     K when bots read
   c1098:	0079 0000                                   y...

000c109c <_ZTV17Adafruit_GrayOLED>:
	...
   c10ac:	7a09 000b ca7d 000b 6fe1 000b 740f 000b     .z..}....o...t..
   c10bc:	7411 000b 7443 000b 741f 000b 7431 000b     .t..Ct...t..1t..
   c10cc:	7351 000b 740f 000b 763b 000b 71df 000b     Qs...t..;v...q..
   c10dc:	745b 000b 7499 000b 74d3 000b 7519 000b     [t...t...t...u..
   c10ec:	7535 000b 75b9 000b 40a5 000b               5u...u...@..

000c10f8 <_ZL4font>:
   c10f8:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   c1108:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   c1118:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   c1128:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   c1138:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   c1148:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   c1158:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   c1168:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   c1178:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   c1188:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   c1198:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   c11a8:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   c11b8:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   c11c8:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   c11d8:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   c11e8:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   c11f8:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   c1208:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   c1218:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   c1228:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   c1238:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   c1248:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   c1258:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   c1268:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   c1278:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   c1288:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   c1298:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   c12a8:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   c12b8:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   c12c8:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   c12d8:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   c12e8:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   c12f8:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   c1308:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   c1318:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   c1328:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   c1338:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   c1348:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   c1358:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   c1368:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   c1378:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   c1388:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   c1398:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   c13a8:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   c13b8:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   c13c8:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   c13d8:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   c13e8:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   c13f8:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   c1408:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   c1418:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   c1428:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   c1438:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   c1448:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   c1458:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   c1468:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   c1478:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   c1488:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   c1498:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   c14a8:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   c14b8:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   c14c8:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   c14d8:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   c14e8:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   c14f8:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   c1508:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   c1518:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   c1528:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   c1538:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   c1548:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   c1558:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   c1568:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   c1578:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   c1588:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   c1598:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   c15a8:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   c15b8:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   c15c8:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   c15d8:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   c15e8:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000c15f8 <_ZTV12Adafruit_GFX>:
	...
   c1608:	7a09 000b ca7d 000b 40a5 000b 740f 000b     .z..}....@...t..
   c1618:	7411 000b 7443 000b 741f 000b 7431 000b     .t..Ct...t..1t..
   c1628:	7351 000b 740f 000b 763b 000b 7639 000b     Qs...t..;v..9v..
   c1638:	745b 000b 7499 000b 74d3 000b 7519 000b     [t...t...t...u..
   c1648:	7535 000b 75b9 000b                         5u...u..

000c1650 <_ZTV15Adafruit_SH110X>:
	...
   c1658:	40a5 000b 40a5 000b 7a09 000b ca7d 000b     .@...@...z..}...
   c1668:	6fe1 000b 740f 000b 7411 000b 7443 000b     .o...t...t..Ct..
   c1678:	741f 000b 7431 000b 7351 000b 740f 000b     .t..1t..Qs...t..
   c1688:	763b 000b 71df 000b 745b 000b 7499 000b     ;v...q..[t...t..
   c1698:	74d3 000b 7519 000b 7535 000b 75b9 000b     .t...u..5u...u..
   c16a8:	9529 000b                                   )...

000c16ac <_ZL12splash2_data>:
   c16ac:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   c16bc:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   c16cc:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   c16e8:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   c16f8:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   c1708:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   c1718:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   c1728:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   c1738:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   c1748:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   c1758:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   c1768:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   c1778:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   c1788:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   c1798:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   c17a8:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   c17b8:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   c17c8:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   c17d8:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   c17e8:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   c17f8:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   c1808:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   c1818:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   c1828:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   c1840:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   c1850:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   c1860:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   c1870:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   c1880:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000c188c <_ZTV15Adafruit_SH1107>:
	...
   c1894:	96c5 000b 96d9 000b 7a09 000b ca7d 000b     .........z..}...
   c18a4:	6fe1 000b 740f 000b 7411 000b 7443 000b     .o...t...t..Ct..
   c18b4:	741f 000b 7431 000b 7351 000b 740f 000b     .t..1t..Qs...t..
   c18c4:	763b 000b 71df 000b 745b 000b 7499 000b     ;v...q..[t...t..
   c18d4:	74d3 000b 7519 000b 7535 000b 75b9 000b     .t...u..5u...u..
   c18e4:	9529 000b                                   )...

000c18e8 <_ZZN15Adafruit_SH11075beginEhbE12init_128x128>:
   c18e8:	00d3 7fa8                                   ....

000c18ec <_ZZN15Adafruit_SH11075beginEhbE4init>:
   c18ec:	d5ae 2051 4f81 8aad c0a0 00dc 60d3 22d9     ..Q .O.......`."
   c18fc:	35db 3fa8 a6a4 0000                         .5.?....

000c1904 <_ZTVN5spark13EthernetClassE>:
	...
   c190c:	a043 000b a039 000b a02f 000b a025 000b     C...9.../...%...
   c191c:	a019 000b a00d 000b d909 000b d911 000b     ................
   c192c:	a001 000b 9ff9 000b 9fef 000b 9fe5 000b     ................
   c193c:	d941 000b                                   A...

000c1940 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c1940:	0800 1810 2820 3830 7341 6573 7472 6f69     .... (08Assertio
   c1950:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   c1960:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   c1970:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   c1980:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   c1990:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   c19a0:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   c19b0:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   c19c0:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   c19d0:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   c19e0:	6146 6c69 6465 7420 206f 6c61 6f6c 6163     Failed to alloca
   c19f0:	6574 6d20 6d65 726f 2179 4600 6961 656c     te memory!.Faile
   c1a00:	2064 6f74 6120 7070 6e65 2064 6570 7265     d to append peer
   c1a10:	4320 6e65 7274 6c61 6420 7665 6369 2e65      Central device.
   c1a20:	4300 6e6f 656e 7463 6465 6220 2079 6543     .Connected by Ce
   c1a30:	746e 6172 206c 6564 6976 6563 002e 6944     ntral device..Di
   c1a40:	6373 6e6f 656e 7463 6465 6220 2079 6572     sconnected by re
   c1a50:	6f6d 6574 6420 7665 6369 2e65 4600 6961     mote device..Fai
   c1a60:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   c1a70:	6373 766f 7265 6465 7320 7265 6976 6563     scovered service
   c1a80:	002e 7453 7261 2074 6964 6373 766f 7265     ..Start discover
   c1a90:	6e69 2067 6863 7261 6361 6574 6972 7473     ing characterist
   c1aa0:	6369 2073 666f 7320 7265 6976 6563 203a     ics of service: 
   c1ab0:	7325 002e 6143 6e6e 746f 6120 6464 6e20     %s..Cannot add n
   c1ac0:	7765 7020 6565 2072 6564 6976 6563 002e     ew peer device..
   c1ad0:	654e 2077 6570 6972 6870 7265 6c61 6920     New peripheral i
   c1ae0:	2073 6f63 6e6e 6365 6574 2e64 4300 6168     s connected..Cha
   c1af0:	6172 7463 7265 7369 6974 2063 6964 6373     racteristic disc
   c1b00:	766f 7265 6465 002e 6944 6373 766f 7265     overed..Discover
   c1b10:	6465 6320 6168 6172 7463 7265 7369 6974     ed characteristi
   c1b20:	2763 2073 6168 646e 656c 6920 2073 6e69     c's handle is in
   c1b30:	6176 696c 2e64 4600 6961 656c 2064 6f74     valid..Failed to
   c1b40:	6120 7070 6e65 2064 6964 6373 766f 7265      append discover
   c1b50:	6465 6320 6168 6172 7463 7265 7369 6974     ed characteristi
   c1b60:	2e63 0000                                   c...

000c1b64 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c1b6c:	a44f 000b a4b1 000b a627 000b a4db 000b     O.......'.......
   c1b7c:	a451 000b                                   Q...

000c1b80 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c1b88:	a44b 000b a4bf 000b a44d 000b a4e1 000b     K.......M.......
   c1b98:	a471 000b                                   q...

000c1b9c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c1ba4:	a449 000b a4cd 000b b181 000b a4e7 000b     I...............
   c1bb4:	a491 000b                                   ....

000c1bb8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c1bc4:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
   c1bd4:	0000 7061 0070 5925 252d 2d6d 6425 2554     ..app.%Y-%m-%dT%
   c1be4:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   c1bf4:	0065 0000                                   e...

000c1bf8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c1c00:	cecd 000b ced3 000b cf11 000b cee1 000b     ................
   c1c10:	cecf 000b                                   ....

000c1c14 <_ZTV9IPAddress>:
	...
   c1c1c:	d459 000b d449 000b d44b 000b               Y...I...K...

000c1c28 <_ZTV9USBSerial>:
	...
   c1c30:	d53f 000b d5a7 000b d57d 000b ca7d 000b     ?.......}...}...
   c1c40:	d56f 000b d541 000b d551 000b d5a1 000b     o...A...Q.......
   c1c50:	d561 000b d539 000b                         a...9...

000c1c58 <_ZTVN5spark13CellularClassE>:
	...
   c1c60:	d6f7 000b d6ed 000b d6e3 000b d699 000b     ................
   c1c70:	d6d7 000b d6cb 000b d909 000b d911 000b     ................
   c1c80:	d6bf 000b d6b7 000b d6ad 000b d6a3 000b     ................
   c1c90:	d941 000b                                   A...

000c1c94 <_ZTV11USARTSerial>:
	...
   c1c9c:	d731 000b d79d 000b d775 000b ca7d 000b     1.......u...}...
   c1cac:	d745 000b d761 000b d753 000b d76f 000b     E...a...S...o...
   c1cbc:	d733 000b d737 000b                         3...7...

000c1cc4 <_ZTV7TwoWire>:
	...
   c1ccc:	d80b 000b d855 000b d82d 000b d80d 000b     ....U...-.......
   c1cdc:	d835 000b d83d 000b d845 000b d84d 000b     5...=...E...M...

000c1cec <_ZTVN5spark12NetworkClassE>:
	...
   c1cf4:	d8c9 000b d8d3 000b d8dd 000b d8e7 000b     ................
   c1d04:	d8f1 000b d8fd 000b d909 000b d911 000b     ................
   c1d14:	d919 000b d925 000b d92d 000b d937 000b     ....%...-...7...
   c1d24:	d941 000b                                   A...

000c1d28 <_ZSt7nothrow>:
	...

000c1d29 <_ZTSSt19_Sp_make_shared_tag>:
   c1d29:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c1d39:	6572 5f64 6174 0067 0000                     red_tag....

000c1d44 <_ZTISt19_Sp_make_shared_tag>:
   c1d44:	1df8 000c 1d29 000c 6f6e 2074 6e65 756f     ....)...not enou
   c1d54:	6867 7320 6170 6563 6620 726f 6620 726f     gh space for for
   c1d64:	616d 2074 7865 6170 736e 6f69 206e 5028     mat expansion (P
   c1d74:	656c 7361 2065 7573 6d62 7469 6620 6c75     lease submit ful
   c1d84:	206c 7562 2067 6572 6f70 7472 6120 2074     l bug report at 
   c1d94:	7468 7074 3a73 2f2f 6367 2e63 6e67 2e75     https://gcc.gnu.
   c1da4:	726f 2f67 7562 7367 292f 0a3a 2020 2020     org/bugs/):.    
   c1db4:	3000 3231 3433 3635 3837 0039               .0123456789.

000c1dc0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   c1dc0:	1e58 000c 1dcc 000c 1e7c 000c               X.......|...

000c1dcc <_ZTSN10__cxxabiv117__class_type_infoE>:
   c1dcc:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c1ddc:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c1dec:	0045 0000                                   E...

000c1df0 <_ZTVN10__cxxabiv117__class_type_infoE>:
   c1df0:	0000 0000 1dc0 000c dde5 000b ddf9 000b     ................
   c1e00:	df8d 000b df8d 000b de63 000b dda7 000b     ........c.......
   c1e10:	de4b 000b de0d 000b ddd9 000b               K...........

000c1e1c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c1e1c:	1e58 000c 1e28 000c 1dc0 000c               X...(.......

000c1e28 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c1e28:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c1e38:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c1e48:	666e 456f 0000 0000                         nfoE....

000c1e50 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c1e50:	0000 0000 1e1c 000c de8d 000b dea1 000b     ................
   c1e60:	df8d 000b df8d 000b de63 000b dda7 000b     ........c.......
   c1e70:	df61 000b deed 000b deb5 000b               a...........

000c1e7c <_ZTISt9type_info>:
   c1e7c:	1df8 000c 1e84 000c                         ........

000c1e84 <_ZTSSt9type_info>:
   c1e84:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   c1e94:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   c1ea4:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   c1eb4:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   c1ec4:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   c1ed4:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   c1ee4:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   c1ef4:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   c1f04:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   c1f14:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   c1f24:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000c1f34 <fpi.1>:
   c1f34:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c1f44:	0000 0000                                   ....

000c1f48 <fpinan.0>:
   c1f48:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000c1f60 <tinytens>:
   c1f60:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c1f70:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c1f80:	6f43 64ac 0628 1168                         Co.d(.h.

000c1f88 <_ctype_>:
   c1f88:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c1f98:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c1fa8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c1fb8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c1fc8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c1fd8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c1fe8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c1ff8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c2008:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c2088:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c2098:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   c20a8:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   c20b8:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   c20c8:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   c20d8:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   c20e8:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   c20f8:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   c2108:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   c2118:	6874 7865 632e 0000                         thex.c..

000c2120 <_C_numeric_locale>:
   c2120:	1b61 000c 0c12 000c daf0 2003 0043 4f50     a.......... C.PO
   c2130:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   c2140:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   c2150:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   c2160:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   c2170:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   c2180:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   c2190:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   c21a0:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   c21b0:	0063 0000 0000 0000                         c.......

000c21b8 <__mprec_bigtens>:
   c21b8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c21c8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c21d8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c21e0 <__mprec_tens>:
   c21e0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c21f0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c2200:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c2210:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c2220:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c2230:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c2240:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c2250:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c2260:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c2270:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c2280:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c2290:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c22a0:	9db4 79d9 7843 44ea                         ...yCx.D

000c22a8 <p05.0>:
   c22a8:	0005 0000 0019 0000 007d 0000               ........}...

000c22b4 <link_const_variable_data_end>:
   c22b4:	000b64e1 	.word	0x000b64e1
   c22b8:	000ba04d 	.word	0x000ba04d
   c22bc:	000ba1ed 	.word	0x000ba1ed
   c22c0:	000bca6d 	.word	0x000bca6d
   c22c4:	000bcbdd 	.word	0x000bcbdd
   c22c8:	000bcd6d 	.word	0x000bcd6d
   c22cc:	000bcd89 	.word	0x000bcd89
   c22d0:	000bd701 	.word	0x000bd701
   c22d4:	000bda19 	.word	0x000bda19

000c22d8 <link_constructors_end>:
	...
