
c:/Users/mligh/OneDrive/Particle/WaterNet23/WaterNet23CCHub/target/4.0.0/bsom/WaterNet23CCHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000ad30  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bed50  000bed50  0000ed50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bed74  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  2003db18  000bed78  0001db18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000afc  2003dcf8  2003dcf8  0002dcf8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bef54  000bef54  0001ef54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bef7c  000bef7c  0001ef7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00189472  00000000  00000000  0001ef80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001910e  00000000  00000000  001a83f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00047427  00000000  00000000  001c1500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003428  00000000  00000000  00208927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000c800  00000000  00000000  0020bd4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00043917  00000000  00000000  0021854f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0005567e  00000000  00000000  0025be66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00144c8a  00000000  00000000  002b14e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a168  00000000  00000000  003f6170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
   b4026:	b508      	push	{r3, lr}
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 fe48 	bl	bbcc6 <memcpy>
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f007 fe6a 	bl	bbd16 <memset>
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003db18 	.word	0x2003db18
   b404c:	000bed78 	.word	0x000bed78
   b4050:	2003dcf4 	.word	0x2003dcf4
   b4054:	2003dcf8 	.word	0x2003dcf8
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
   b405c:	b570      	push	{r4, r5, r6, lr}
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
   b4062:	f006 f96f 	bl	ba344 <module_user_init_hook>
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
   b4070:	bd70      	pop	{r4, r5, r6, pc}
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bed24 	.word	0x000bed24
   b4080:	000bed48 	.word	0x000bed48

000b4084 <module_user_setup>:
   b4084:	f000 ba56 	b.w	b4534 <setup>

000b4088 <module_user_loop>:
   b4088:	b508      	push	{r3, lr}
   b408a:	f001 f967 	bl	b535c <loop>
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4092:	f006 b90f 	b.w	ba2b4 <_post_loop>

000b4096 <_Znwj>:
   b4096:	f003 b9bd 	b.w	b7414 <malloc>

000b409a <_Znaj>:
   b409a:	f003 b9bb 	b.w	b7414 <malloc>

000b409e <_ZdlPvj>:
   b409e:	f003 b9c1 	b.w	b7424 <free>

000b40a2 <__cxa_guard_acquire>:
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40b2:	4770      	bx	lr

000b40b4 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40b4:	7c03      	ldrb	r3, [r0, #16]
   b40b6:	f013 0308 	ands.w	r3, r3, #8
   b40ba:	bf1e      	ittt	ne
   b40bc:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40be:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40c0:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40c2:	2b00      	cmp	r3, #0
  }
   b40c4:	bfac      	ite	ge
   b40c6:	4618      	movge	r0, r3
   b40c8:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40cc:	4770      	bx	lr
	...

000b40d0 <_Z12actionTimer5v>:
        Serial1.println(outStr);
    }
}

void actionTimer5(){
    postStatus = true;
   b40d0:	4b01      	ldr	r3, [pc, #4]	; (b40d8 <_Z12actionTimer5v+0x8>)
   b40d2:	2201      	movs	r2, #1
   b40d4:	701a      	strb	r2, [r3, #0]
    for(WaterBot w: WaterBots){
        w.timeoutCount++;
    }
    //if(!BLE.connected)
}
   b40d6:	4770      	bx	lr
   b40d8:	2003dee4 	.word	0x2003dee4

000b40dc <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40dc:	4770      	bx	lr

000b40de <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b40de:	b510      	push	{r4, lr}
  }
   b40e0:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b40e2:	4604      	mov	r4, r0
  }
   b40e4:	f7ff ffdb 	bl	b409e <_ZdlPvj>
   b40e8:	4620      	mov	r0, r4
   b40ea:	bd10      	pop	{r4, pc}

000b40ec <_ZN4FileD0Ev>:
   b40ec:	b510      	push	{r4, lr}
   b40ee:	2134      	movs	r1, #52	; 0x34
   b40f0:	4604      	mov	r4, r0
   b40f2:	f7ff ffd4 	bl	b409e <_ZdlPvj>
   b40f6:	4620      	mov	r0, r4
   b40f8:	bd10      	pop	{r4, pc}

000b40fa <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b40fa:	3010      	adds	r0, #16
   b40fc:	f002 b852 	b.w	b61a4 <_ZN7FatFile4syncEv>

000b4100 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b4100:	3010      	adds	r0, #16
   b4102:	f001 bf70 	b.w	b5fe6 <_ZN7FatFile4peekEv>

000b4106 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b4106:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b4108:	2201      	movs	r2, #1
   b410a:	f10d 0107 	add.w	r1, sp, #7
   b410e:	3010      	adds	r0, #16
   b4110:	f001 febb 	bl	b5e8a <_ZN7FatFile4readEPvj>
   b4114:	2801      	cmp	r0, #1
   b4116:	bf0c      	ite	eq
   b4118:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b411c:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   b4120:	b003      	add	sp, #12
   b4122:	f85d fb04 	ldr.w	pc, [sp], #4

000b4126 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4126:	3010      	adds	r0, #16
   b4128:	f002 b8d6 	b.w	b62d8 <_ZN7FatFile5writeEPKvj>

000b412c <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b412c:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b412e:	2201      	movs	r2, #1
   b4130:	f88d 1007 	strb.w	r1, [sp, #7]
   b4134:	3010      	adds	r0, #16
   b4136:	f10d 0107 	add.w	r1, sp, #7
   b413a:	f002 f8cd 	bl	b62d8 <_ZN7FatFile5writeEPKvj>
  }
   b413e:	b003      	add	sp, #12
   b4140:	f85d fb04 	ldr.w	pc, [sp], #4

000b4144 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4144:	6943      	ldr	r3, [r0, #20]
   b4146:	b113      	cbz	r3, b414e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4148:	6983      	ldr	r3, [r0, #24]
   b414a:	300c      	adds	r0, #12
   b414c:	4718      	bx	r3
            callback();
        }
    }
   b414e:	4770      	bx	lr

000b4150 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4150:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4152:	2100      	movs	r1, #0
   b4154:	4604      	mov	r4, r0
   b4156:	4608      	mov	r0, r1
   b4158:	f002 ff20 	bl	b6f9c <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b415c:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b415e:	4620      	mov	r0, r4
   b4160:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4162:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4164:	f002 ff32 	bl	b6fcc <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4168:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b416a:	b10c      	cbz	r4, b4170 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b416c:	2301      	movs	r3, #1
   b416e:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4170:	2100      	movs	r1, #0
   b4172:	2001      	movs	r0, #1
   b4174:	f002 ff12 	bl	b6f9c <os_thread_scheduling>
            }
        }
        if (t) {
   b4178:	b12c      	cbz	r4, b4186 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b417a:	6823      	ldr	r3, [r4, #0]
   b417c:	4620      	mov	r0, r4
   b417e:	689b      	ldr	r3, [r3, #8]
   b4180:	4798      	blx	r3
            t->running = false;
   b4182:	2300      	movs	r3, #0
   b4184:	7123      	strb	r3, [r4, #4]
        }
    }
   b4186:	b002      	add	sp, #8
   b4188:	bd10      	pop	{r4, pc}
	...

000b418c <_Z13actionTimer60v>:
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
   b418c:	4b0b      	ldr	r3, [pc, #44]	; (b41bc <_Z13actionTimer60v+0x30>)
   b418e:	e9d3 3000 	ldrd	r3, r0, [r3]

void actionTimer60(){
    bool reqLTEStatus = false;
   b4192:	2200      	movs	r2, #0
    for(WaterBot w: WaterBots){
   b4194:	4283      	cmp	r3, r0
   b4196:	d005      	beq.n	b41a4 <_Z13actionTimer60v+0x18>
        if(w.timeoutCount > XBEE_BLE_MAX_TIMEOUT){
   b4198:	6959      	ldr	r1, [r3, #20]
            reqLTEStatus = true;
   b419a:	2925      	cmp	r1, #37	; 0x25
   b419c:	bf28      	it	cs
   b419e:	2201      	movcs	r2, #1
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b41a0:	3318      	adds	r3, #24
      {
	++_M_current;
	return *this;
   b41a2:	e7f7      	b.n	b4194 <_Z13actionTimer60v+0x8>
            w.timeoutCount = 0;            
        }
    }
    if(reqLTEStatus && LTEStatuses < MAX_LTE_STATUSES){
   b41a4:	b142      	cbz	r2, b41b8 <_Z13actionTimer60v+0x2c>
   b41a6:	4a06      	ldr	r2, [pc, #24]	; (b41c0 <_Z13actionTimer60v+0x34>)
   b41a8:	7813      	ldrb	r3, [r2, #0]
   b41aa:	2b18      	cmp	r3, #24
   b41ac:	d804      	bhi.n	b41b8 <_Z13actionTimer60v+0x2c>
        LTEStatuses++;
   b41ae:	3301      	adds	r3, #1
   b41b0:	7013      	strb	r3, [r2, #0]
        statusTimeout = true;
   b41b2:	4b04      	ldr	r3, [pc, #16]	; (b41c4 <_Z13actionTimer60v+0x38>)
   b41b4:	2201      	movs	r2, #1
   b41b6:	701a      	strb	r2, [r3, #0]
    }
   b41b8:	4770      	bx	lr
   b41ba:	bf00      	nop
   b41bc:	2003dd34 	.word	0x2003dd34
   b41c0:	2003dd18 	.word	0x2003dd18
   b41c4:	2003e63c 	.word	0x2003e63c

000b41c8 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b41c8:	2a01      	cmp	r2, #1
   b41ca:	d102      	bne.n	b41d2 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b41cc:	6001      	str	r1, [r0, #0]
      }
   b41ce:	2000      	movs	r0, #0
   b41d0:	4770      	bx	lr
	  switch (__op)
   b41d2:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b41d4:	bf04      	itt	eq
   b41d6:	680b      	ldreq	r3, [r1, #0]
   b41d8:	6003      	streq	r3, [r0, #0]
	      break;
   b41da:	e7f8      	b.n	b41ce <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b41dc <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b41dc:	6803      	ldr	r3, [r0, #0]
   b41de:	4718      	bx	r3

000b41e0 <_ZN5Timer6_startEjb.isra.0>:
    bool _start(unsigned block, bool fromISR=false)
   b41e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b41e2:	4605      	mov	r5, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b41e4:	6880      	ldr	r0, [r0, #8]
    bool _start(unsigned block, bool fromISR=false)
   b41e6:	460e      	mov	r6, r1
   b41e8:	4614      	mov	r4, r2
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b41ea:	b130      	cbz	r0, b41fa <_ZN5Timer6_startEjb.isra.0+0x1a>
   b41ec:	2300      	movs	r3, #0
        stop(fromISR);
   b41ee:	e9cd 2300 	strd	r2, r3, [sp]
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b41f2:	2102      	movs	r1, #2
   b41f4:	461a      	mov	r2, r3
   b41f6:	f002 fef1 	bl	b6fdc <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b41fa:	68a8      	ldr	r0, [r5, #8]
   b41fc:	b130      	cbz	r0, b420c <_ZN5Timer6_startEjb.isra.0+0x2c>
   b41fe:	2300      	movs	r3, #0
   b4200:	e9cd 6300 	strd	r6, r3, [sp]
   b4204:	4622      	mov	r2, r4
   b4206:	4619      	mov	r1, r3
   b4208:	f002 fee8 	bl	b6fdc <os_timer_change>
    }
   b420c:	b002      	add	sp, #8
   b420e:	bd70      	pop	{r4, r5, r6, pc}

000b4210 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4210:	b40e      	push	{r1, r2, r3}
   b4212:	b503      	push	{r0, r1, lr}
   b4214:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4216:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4218:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b421c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b421e:	f005 feec 	bl	b9ffa <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4222:	b002      	add	sp, #8
   b4224:	f85d eb04 	ldr.w	lr, [sp], #4
   b4228:	b003      	add	sp, #12
   b422a:	4770      	bx	lr

000b422c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b422c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b422e:	4604      	mov	r4, r0
   b4230:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4232:	7922      	ldrb	r2, [r4, #4]
   b4234:	68a3      	ldr	r3, [r4, #8]
   b4236:	b132      	cbz	r2, b4246 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4238:	b9a3      	cbnz	r3, b4264 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b423a:	490b      	ldr	r1, [pc, #44]	; (b4268 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b423c:	b002      	add	sp, #8
   b423e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4242:	f005 be9f 	b.w	b9f84 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4246:	4a09      	ldr	r2, [pc, #36]	; (b426c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4248:	7b26      	ldrb	r6, [r4, #12]
   b424a:	4d09      	ldr	r5, [pc, #36]	; (b4270 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b424c:	4909      	ldr	r1, [pc, #36]	; (b4274 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b424e:	7b64      	ldrb	r4, [r4, #13]
   b4250:	2e01      	cmp	r6, #1
   b4252:	bf18      	it	ne
   b4254:	4629      	movne	r1, r5
   b4256:	e9cd 1400 	strd	r1, r4, [sp]
   b425a:	4907      	ldr	r1, [pc, #28]	; (b4278 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b425c:	f7ff ffd8 	bl	b4210 <_ZN5Print6printfEPKcz>
  }
   b4260:	b002      	add	sp, #8
   b4262:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4264:	4a05      	ldr	r2, [pc, #20]	; (b427c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4266:	e7ef      	b.n	b4248 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4268:	000bdde1 	.word	0x000bdde1
   b426c:	000be225 	.word	0x000be225
   b4270:	000bdddd 	.word	0x000bdddd
   b4274:	000bddd9 	.word	0x000bddd9
   b4278:	000bddf7 	.word	0x000bddf7
   b427c:	000bddd0 	.word	0x000bddd0

000b4280 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4280:	b40e      	push	{r1, r2, r3}
   b4282:	b503      	push	{r0, r1, lr}
   b4284:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4286:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4288:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b428c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b428e:	f005 feb4 	bl	b9ffa <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4292:	b002      	add	sp, #8
   b4294:	f85d eb04 	ldr.w	lr, [sp], #4
   b4298:	b003      	add	sp, #12
   b429a:	4770      	bx	lr

000b429c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b429c:	b510      	push	{r4, lr}
      if (_M_manager)
   b429e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b42a0:	4604      	mov	r4, r0
      if (_M_manager)
   b42a2:	b113      	cbz	r3, b42aa <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b42a4:	2203      	movs	r2, #3
   b42a6:	4601      	mov	r1, r0
   b42a8:	4798      	blx	r3
    }
   b42aa:	4620      	mov	r0, r4
   b42ac:	bd10      	pop	{r4, pc}
	...

000b42b0 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b42b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b42b2:	4b13      	ldr	r3, [pc, #76]	; (b4300 <_ZN5TimerD1Ev+0x50>)
   b42b4:	6003      	str	r3, [r0, #0]
   b42b6:	4604      	mov	r4, r0
        if (handle) {
   b42b8:	6880      	ldr	r0, [r0, #8]
   b42ba:	b1c8      	cbz	r0, b42f0 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42bc:	2500      	movs	r5, #0
   b42be:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b42c2:	e9cd 3500 	strd	r3, r5, [sp]
   b42c6:	2102      	movs	r1, #2
   b42c8:	462b      	mov	r3, r5
   b42ca:	462a      	mov	r2, r5
   b42cc:	f002 fe86 	bl	b6fdc <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b42d0:	68a0      	ldr	r0, [r4, #8]
   b42d2:	4629      	mov	r1, r5
   b42d4:	f002 fea2 	bl	b701c <os_timer_set_id>
            while (running) {
   b42d8:	7923      	ldrb	r3, [r4, #4]
   b42da:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b42de:	b113      	cbz	r3, b42e6 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b42e0:	f002 fe54 	bl	b6f8c <os_thread_yield>
            while (running) {
   b42e4:	e7f8      	b.n	b42d8 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b42e6:	68a0      	ldr	r0, [r4, #8]
   b42e8:	4629      	mov	r1, r5
   b42ea:	f002 fe67 	bl	b6fbc <os_timer_destroy>
            handle = nullptr;
   b42ee:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b42f0:	f104 000c 	add.w	r0, r4, #12
   b42f4:	f7ff ffd2 	bl	b429c <_ZNSt14_Function_baseD1Ev>
    }
   b42f8:	4620      	mov	r0, r4
   b42fa:	b003      	add	sp, #12
   b42fc:	bd30      	pop	{r4, r5, pc}
   b42fe:	bf00      	nop
   b4300:	000be3b4 	.word	0x000be3b4

000b4304 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4304:	b510      	push	{r4, lr}
   b4306:	4604      	mov	r4, r0
    }
   b4308:	f7ff ffd2 	bl	b42b0 <_ZN5TimerD1Ev>
   b430c:	4620      	mov	r0, r4
   b430e:	211c      	movs	r1, #28
   b4310:	f7ff fec5 	bl	b409e <_ZdlPvj>
   b4314:	4620      	mov	r0, r4
   b4316:	bd10      	pop	{r4, pc}

000b4318 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b4318:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b431a:	6843      	ldr	r3, [r0, #4]
   b431c:	3b01      	subs	r3, #1
    {
   b431e:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4320:	6043      	str	r3, [r0, #4]
   b4322:	b963      	cbnz	r3, b433e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b4324:	6803      	ldr	r3, [r0, #0]
   b4326:	689b      	ldr	r3, [r3, #8]
   b4328:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b432a:	68a3      	ldr	r3, [r4, #8]
   b432c:	3b01      	subs	r3, #1
   b432e:	60a3      	str	r3, [r4, #8]
   b4330:	b92b      	cbnz	r3, b433e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4332:	6823      	ldr	r3, [r4, #0]
   b4334:	4620      	mov	r0, r4
   b4336:	68db      	ldr	r3, [r3, #12]
        }
    }
   b4338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b433c:	4718      	bx	r3
    }
   b433e:	bd10      	pop	{r4, pc}

000b4340 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b4340:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4342:	468c      	mov	ip, r1
   b4344:	2500      	movs	r5, #0
   b4346:	4914      	ldr	r1, [pc, #80]	; (b4398 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b4348:	7105      	strb	r5, [r0, #4]
   b434a:	4604      	mov	r4, r0
   b434c:	6085      	str	r5, [r0, #8]
   b434e:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4350:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4354:	b085      	sub	sp, #20
   b4356:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4358:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b435c:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4360:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4364:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4368:	e897 0003 	ldmia.w	r7, {r0, r1}
   b436c:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4370:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b4372:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b4374:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4376:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4378:	6095      	str	r5, [r2, #8]
   b437a:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b437c:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b437e:	e9cd 3500 	strd	r3, r5, [sp]
   b4382:	4a06      	ldr	r2, [pc, #24]	; (b439c <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b4384:	4623      	mov	r3, r4
   b4386:	4661      	mov	r1, ip
   b4388:	f104 0008 	add.w	r0, r4, #8
   b438c:	f002 fe0e 	bl	b6fac <os_timer_create>
    }
   b4390:	4620      	mov	r0, r4
   b4392:	b005      	add	sp, #20
   b4394:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4396:	bf00      	nop
   b4398:	000be3b4 	.word	0x000be3b4
   b439c:	000b4151 	.word	0x000b4151

000b43a0 <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b43a0:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b43a2:	460a      	mov	r2, r1
   b43a4:	4901      	ldr	r1, [pc, #4]	; (b43ac <_ZN7FatFile4openEPKci+0xc>)
   b43a6:	6809      	ldr	r1, [r1, #0]
   b43a8:	f001 bf39 	b.w	b621e <_ZN7FatFile4openEPS_PKci>
   b43ac:	2003e644 	.word	0x2003e644

000b43b0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void offloadDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b43b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b43b2:	b095      	sub	sp, #84	; 0x54
   b43b4:	4604      	mov	r4, r0
   b43b6:	af00      	add	r7, sp, #0
   b43b8:	460d      	mov	r5, r1
    memset(fileCommand,0,8 + MAX_FILENAME_LEN);
   b43ba:	221e      	movs	r2, #30
   b43bc:	2100      	movs	r1, #0
   b43be:	f107 0030 	add.w	r0, r7, #48	; 0x30
   b43c2:	f007 fca8 	bl	bbd16 <memset>
    memcpy(fileCommand,data,8);
   b43c6:	6820      	ldr	r0, [r4, #0]
   b43c8:	6861      	ldr	r1, [r4, #4]
   b43ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b43ce:	c303      	stmia	r3!, {r0, r1}
    if(fileCommand[0] == 'f'){
   b43d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   b43d4:	2b66      	cmp	r3, #102	; 0x66
    Serial.println(dataStr);
   b43d6:	466e      	mov	r6, sp
    if(fileCommand[0] == 'f'){
   b43d8:	d168      	bne.n	b44ac <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
        if(!strcmp(fileCommand,"filename")){
   b43da:	493e      	ldr	r1, [pc, #248]	; (b44d4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x124>)
   b43dc:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b43e0:	f007 fcdf 	bl	bbda2 <strcmp>
   b43e4:	2800      	cmp	r0, #0
   b43e6:	d13e      	bne.n	b4466 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb6>
    return m_attr;
   b43e8:	483b      	ldr	r0, [pc, #236]	; (b44d8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b43ea:	7c03      	ldrb	r3, [r0, #16]
   b43ec:	b113      	cbz	r3, b43f4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>
   b43ee:	3010      	adds	r0, #16
   b43f0:	f001 ff0e 	bl	b6210 <_ZN7FatFile5closeEv>
            memcpy(fileCommand,data,8 + MAX_FILENAME_LEN);
   b43f4:	4623      	mov	r3, r4
   b43f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
   b43fa:	f104 0520 	add.w	r5, r4, #32
   b43fe:	6818      	ldr	r0, [r3, #0]
   b4400:	6859      	ldr	r1, [r3, #4]
   b4402:	4614      	mov	r4, r2
   b4404:	c403      	stmia	r4!, {r0, r1}
   b4406:	3308      	adds	r3, #8
   b4408:	42ab      	cmp	r3, r5
   b440a:	4622      	mov	r2, r4
   b440c:	d1f7      	bne.n	b43fe <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>
   b440e:	6818      	ldr	r0, [r3, #0]
   b4410:	6020      	str	r0, [r4, #0]
   b4412:	889b      	ldrh	r3, [r3, #4]
   b4414:	80a3      	strh	r3, [r4, #4]
            strncpy(offloadFilename,fileCommand+8,MAX_FILENAME_LEN);
   b4416:	221e      	movs	r2, #30
   b4418:	f107 0130 	add.w	r1, r7, #48	; 0x30
   b441c:	482f      	ldr	r0, [pc, #188]	; (b44dc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b441e:	f007 fd0c 	bl	bbe3a <strncpy>
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4422:	2300      	movs	r3, #0
    return file.open(this, path, O_RDONLY);
   b4424:	4a2d      	ldr	r2, [pc, #180]	; (b44dc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4426:	492e      	ldr	r1, [pc, #184]	; (b44e0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4428:	607b      	str	r3, [r7, #4]
    return file.open(this, path, O_RDONLY);
   b442a:	1d38      	adds	r0, r7, #4
   b442c:	f001 fef7 	bl	b621e <_ZN7FatFile4openEPS_PKci>
            if(sd.exists(offloadFilename)){
   b4430:	b148      	cbz	r0, b4446 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x96>
                Serial.printlnf("File '%s' already exists, deleting and overwriting",offloadFilename);
   b4432:	f006 fb27 	bl	baa84 <_Z16_fetch_usbserialv>
   b4436:	492b      	ldr	r1, [pc, #172]	; (b44e4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
   b4438:	4a28      	ldr	r2, [pc, #160]	; (b44dc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b443a:	f7ff ff21 	bl	b4280 <_ZN5Print8printlnfEPKcz>
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   b443e:	4927      	ldr	r1, [pc, #156]	; (b44dc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4440:	4827      	ldr	r0, [pc, #156]	; (b44e0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
   b4442:	f001 ff38 	bl	b62b6 <_ZN7FatFile6removeEPS_PKc>
            Serial.printlnf("Starting offload of file: %s",offloadFilename);
   b4446:	f006 fb1d 	bl	baa84 <_Z16_fetch_usbserialv>
   b444a:	4a24      	ldr	r2, [pc, #144]	; (b44dc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b444c:	4926      	ldr	r1, [pc, #152]	; (b44e8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   b444e:	f7ff ff17 	bl	b4280 <_ZN5Print8printlnfEPKcz>
            myFile.open(offloadFilename, O_RDWR | O_CREAT | O_AT_END);
   b4452:	4922      	ldr	r1, [pc, #136]	; (b44dc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4454:	4825      	ldr	r0, [pc, #148]	; (b44ec <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b4456:	f244 2202 	movw	r2, #16898	; 0x4202
   b445a:	f7ff ffa1 	bl	b43a0 <_ZN7FatFile4openEPKci>
}
   b445e:	3754      	adds	r7, #84	; 0x54
   b4460:	46b5      	mov	sp, r6
   b4462:	46bd      	mov	sp, r7
   b4464:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(!strcmp(fileCommand,"filecomp")){
   b4466:	4922      	ldr	r1, [pc, #136]	; (b44f0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>)
   b4468:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b446c:	f007 fc99 	bl	bbda2 <strcmp>
   b4470:	b968      	cbnz	r0, b448e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xde>
            Serial.printlnf("Reached end of file: %s",offloadFilename);
   b4472:	f006 fb07 	bl	baa84 <_Z16_fetch_usbserialv>
   b4476:	4a19      	ldr	r2, [pc, #100]	; (b44dc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4478:	491e      	ldr	r1, [pc, #120]	; (b44f4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>)
   b447a:	f7ff ff01 	bl	b4280 <_ZN5Print8printlnfEPKcz>
    return m_attr;
   b447e:	4b16      	ldr	r3, [pc, #88]	; (b44d8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b4480:	7c1b      	ldrb	r3, [r3, #16]
   b4482:	2b00      	cmp	r3, #0
   b4484:	d0eb      	beq.n	b445e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b4486:	4819      	ldr	r0, [pc, #100]	; (b44ec <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b4488:	f001 fec2 	bl	b6210 <_ZN7FatFile5closeEv>
   b448c:	e7e7      	b.n	b445e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
        else if(!strcmp(fileCommand,"filedone")){
   b448e:	491a      	ldr	r1, [pc, #104]	; (b44f8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
   b4490:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4494:	f007 fc85 	bl	bbda2 <strcmp>
   b4498:	b940      	cbnz	r0, b44ac <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
            Serial.println("Received done command");
   b449a:	f006 faf3 	bl	baa84 <_Z16_fetch_usbserialv>
   b449e:	4917      	ldr	r1, [pc, #92]	; (b44fc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>)
   b44a0:	f005 fd83 	bl	b9faa <_ZN5Print7printlnEPKc>
            offloadingDone = true;
   b44a4:	4b16      	ldr	r3, [pc, #88]	; (b4500 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x150>)
   b44a6:	2201      	movs	r2, #1
   b44a8:	701a      	strb	r2, [r3, #0]
   b44aa:	e7e8      	b.n	b447e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xce>
    char dataStr[len];
   b44ac:	1deb      	adds	r3, r5, #7
   b44ae:	f023 0307 	bic.w	r3, r3, #7
   b44b2:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(dataStr,data,len);
   b44b6:	462a      	mov	r2, r5
   b44b8:	4621      	mov	r1, r4
   b44ba:	4668      	mov	r0, sp
   b44bc:	f007 fc03 	bl	bbcc6 <memcpy>
    myFile.print(dataStr);
   b44c0:	4669      	mov	r1, sp
   b44c2:	4805      	ldr	r0, [pc, #20]	; (b44d8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
   b44c4:	f005 fd5e 	bl	b9f84 <_ZN5Print5printEPKc>
    Serial.println(dataStr);
   b44c8:	f006 fadc 	bl	baa84 <_Z16_fetch_usbserialv>
   b44cc:	4669      	mov	r1, sp
   b44ce:	f005 fd6c 	bl	b9faa <_ZN5Print7printlnEPKc>
   b44d2:	e7c4      	b.n	b445e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b44d4:	000bde14 	.word	0x000bde14
   b44d8:	2003de70 	.word	0x2003de70
   b44dc:	2003dea4 	.word	0x2003dea4
   b44e0:	2003e5f4 	.word	0x2003e5f4
   b44e4:	000bde1d 	.word	0x000bde1d
   b44e8:	000bde50 	.word	0x000bde50
   b44ec:	2003de80 	.word	0x2003de80
   b44f0:	000bde6d 	.word	0x000bde6d
   b44f4:	000bde76 	.word	0x000bde76
   b44f8:	000bde8e 	.word	0x000bde8e
   b44fc:	000bde97 	.word	0x000bde97
   b4500:	2003dec2 	.word	0x2003dec2

000b4504 <_Z9setupXBeev>:
void setupXBee(){
   b4504:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b4506:	f006 fd3b 	bl	baf80 <_Z22__fetch_global_Serial1v>
   b450a:	4908      	ldr	r1, [pc, #32]	; (b452c <_Z9setupXBeev+0x28>)
   b450c:	f7ff fe80 	bl	b4210 <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4510:	2014      	movs	r0, #20
   b4512:	f005 fea3 	bl	ba25c <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b4516:	f006 fd33 	bl	baf80 <_Z22__fetch_global_Serial1v>
   b451a:	4905      	ldr	r1, [pc, #20]	; (b4530 <_Z9setupXBeev+0x2c>)
   b451c:	f7ff fe78 	bl	b4210 <_ZN5Print6printfEPKcz>
}
   b4520:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b4524:	2014      	movs	r0, #20
   b4526:	f005 be99 	b.w	ba25c <delay>
   b452a:	bf00      	nop
   b452c:	000be224 	.word	0x000be224
   b4530:	000be2dd 	.word	0x000be2dd

000b4534 <setup>:
void setup() {
   b4534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pinMode(PAIR_BUTTON,INPUT_PULLDOWN);
   b4538:	2103      	movs	r1, #3
void setup() {
   b453a:	b090      	sub	sp, #64	; 0x40
    pinMode(PAIR_BUTTON,INPUT_PULLDOWN);
   b453c:	2010      	movs	r0, #16
   b453e:	f006 fcaf 	bl	baea0 <pinMode>
    pinMode(OFFLOAD_BTN,INPUT_PULLDOWN);
   b4542:	2103      	movs	r1, #3
   b4544:	2011      	movs	r0, #17
   b4546:	f006 fcab 	bl	baea0 <pinMode>
    pinMode(D7, OUTPUT);
   b454a:	2101      	movs	r1, #1
   b454c:	2007      	movs	r0, #7
   b454e:	f006 fca7 	bl	baea0 <pinMode>
    Serial.begin(115200);
   b4552:	f006 fa97 	bl	baa84 <_Z16_fetch_usbserialv>
   b4556:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b455a:	f006 fa87 	bl	baa6c <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b455e:	f006 fd0f 	bl	baf80 <_Z22__fetch_global_Serial1v>
   b4562:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4566:	f006 fb55 	bl	bac14 <_ZN11USARTSerial5beginEm>
    setupXBee();
   b456a:	f7ff ffcb 	bl	b4504 <_Z9setupXBeev>
	BLE.on();
   b456e:	f003 fed5 	bl	b831c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4572:	f003 ff1d 	bl	b83b0 <_ZNK8particle14BleLocalDevice2onEv>
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   b4576:	4a47      	ldr	r2, [pc, #284]	; (b4694 <setup+0x160>)
   b4578:	4947      	ldr	r1, [pc, #284]	; (b4698 <setup+0x164>)
    logMessages = true;
   b457a:	4f48      	ldr	r7, [pc, #288]	; (b469c <setup+0x168>)
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   b457c:	4610      	mov	r0, r2
   b457e:	f004 ff65 	bl	b944c <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    peerOffloadCharacteristic.onDataReceived(offloadDataReceived, &peerOffloadCharacteristic);
   b4582:	4a47      	ldr	r2, [pc, #284]	; (b46a0 <setup+0x16c>)
   b4584:	4947      	ldr	r1, [pc, #284]	; (b46a4 <setup+0x170>)
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4586:	2400      	movs	r4, #0
   b4588:	4610      	mov	r0, r2
   b458a:	f004 ff5f 	bl	b944c <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
   b458e:	4622      	mov	r2, r4
   b4590:	4945      	ldr	r1, [pc, #276]	; (b46a8 <setup+0x174>)
   b4592:	4846      	ldr	r0, [pc, #280]	; (b46ac <setup+0x178>)
   b4594:	e9cd 4400 	strd	r4, r4, [sp]
   b4598:	2301      	movs	r3, #1
   b459a:	f002 ff23 	bl	b73e4 <spark_subscribe>
    offloadingMode = false;
   b459e:	4b44      	ldr	r3, [pc, #272]	; (b46b0 <setup+0x17c>)
   b45a0:	701c      	strb	r4, [r3, #0]
    offloadingDone = false;
   b45a2:	4b44      	ldr	r3, [pc, #272]	; (b46b4 <setup+0x180>)
   b45a4:	701c      	strb	r4, [r3, #0]
    postStatus = false;
   b45a6:	4b44      	ldr	r3, [pc, #272]	; (b46b8 <setup+0x184>)
   b45a8:	701c      	strb	r4, [r3, #0]
    statusTimeout = false;
   b45aa:	4b44      	ldr	r3, [pc, #272]	; (b46bc <setup+0x188>)
    logMessages = true;
   b45ac:	2501      	movs	r5, #1
    statusTimeout = false;
   b45ae:	701c      	strb	r4, [r3, #0]
    logMessages = true;
   b45b0:	703d      	strb	r5, [r7, #0]
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b45b2:	f005 fe35 	bl	ba220 <_ZN9TimeClass5monthEv>
   b45b6:	9007      	str	r0, [sp, #28]
   b45b8:	f005 fe26 	bl	ba208 <_ZN9TimeClass3dayEv>
   b45bc:	4606      	mov	r6, r0
   b45be:	f005 fe37 	bl	ba230 <_ZN9TimeClass4yearEv>
   b45c2:	4680      	mov	r8, r0
   b45c4:	f005 fdfc 	bl	ba1c0 <_ZN9TimeClass4hourEv>
   b45c8:	4681      	mov	r9, r0
   b45ca:	f005 fe05 	bl	ba1d8 <_ZN9TimeClass6minuteEv>
   b45ce:	4682      	mov	sl, r0
   b45d0:	f005 fe0e 	bl	ba1f0 <_ZN9TimeClass6secondEv>
   b45d4:	9b07      	ldr	r3, [sp, #28]
   b45d6:	4a3a      	ldr	r2, [pc, #232]	; (b46c0 <setup+0x18c>)
   b45d8:	9600      	str	r6, [sp, #0]
   b45da:	e9cd a003 	strd	sl, r0, [sp, #12]
   b45de:	2110      	movs	r1, #16
   b45e0:	e9cd 8901 	strd	r8, r9, [sp, #4]
   b45e4:	a808      	add	r0, sp, #32
   b45e6:	f002 ff3d 	bl	b7464 <snprintf>
    strcpy(filenameMessages,DEF_FILENAME);
   b45ea:	4936      	ldr	r1, [pc, #216]	; (b46c4 <setup+0x190>)
   b45ec:	4836      	ldr	r0, [pc, #216]	; (b46c8 <setup+0x194>)
   b45ee:	f007 fbe2 	bl	bbdb6 <strcpy>
    strcat(filenameMessages,timestamp);
   b45f2:	a908      	add	r1, sp, #32
   b45f4:	4834      	ldr	r0, [pc, #208]	; (b46c8 <setup+0x194>)
   b45f6:	f007 fbc5 	bl	bbd84 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b45fa:	4934      	ldr	r1, [pc, #208]	; (b46cc <setup+0x198>)
   b45fc:	4832      	ldr	r0, [pc, #200]	; (b46c8 <setup+0x194>)
   b45fe:	f007 fbc1 	bl	bbd84 <strcat>
class SPISettings : public Printable {
   b4602:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b4606:	4c32      	ldr	r4, [pc, #200]	; (b46d0 <setup+0x19c>)
   b4608:	4b32      	ldr	r3, [pc, #200]	; (b46d4 <setup+0x1a0>)
   b460a:	930c      	str	r3, [sp, #48]	; 0x30
   b460c:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   b4610:	4b31      	ldr	r3, [pc, #196]	; (b46d8 <setup+0x1a4>)
   b4612:	930e      	str	r3, [sp, #56]	; 0x38
   b4614:	2208      	movs	r2, #8
   b4616:	ab0c      	add	r3, sp, #48	; 0x30
   b4618:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   b461c:	4630      	mov	r0, r6
   b461e:	f8ad 503c 	strh.w	r5, [sp, #60]	; 0x3c
   b4622:	f002 f995 	bl	b6950 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b4626:	b368      	cbz	r0, b4684 <setup+0x150>
    m_blockDev = blockDev;
   b4628:	6026      	str	r6, [r4, #0]
    vwd()->close();
   b462a:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   b462e:	f001 fdef 	bl	b6210 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b4632:	4629      	mov	r1, r5
   b4634:	4620      	mov	r0, r4
   b4636:	f002 f835 	bl	b66a4 <_ZN9FatVolume4initEh>
   b463a:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   b463e:	4601      	mov	r1, r0
   b4640:	b1d8      	cbz	r0, b467a <setup+0x146>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b4642:	4923      	ldr	r1, [pc, #140]	; (b46d0 <setup+0x19c>)
   b4644:	f201 403c 	addw	r0, r1, #1084	; 0x43c
   b4648:	f001 fc19 	bl	b5e7e <_ZN7FatFile8openRootEP9FatVolume>
   b464c:	b1d0      	cbz	r0, b4684 <setup+0x150>
    if (!dir->isDir()) {
   b464e:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b4652:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4656:	d015      	beq.n	b4684 <setup+0x150>
    m_cwd = dir;
   b4658:	4b20      	ldr	r3, [pc, #128]	; (b46dc <setup+0x1a8>)
   b465a:	601d      	str	r5, [r3, #0]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b465c:	4820      	ldr	r0, [pc, #128]	; (b46e0 <setup+0x1ac>)
   b465e:	2200      	movs	r2, #0
   b4660:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b4664:	f7ff fdbc 	bl	b41e0 <_ZN5Timer6_startEjb.isra.0>
   b4668:	481e      	ldr	r0, [pc, #120]	; (b46e4 <setup+0x1b0>)
   b466a:	2200      	movs	r2, #0
   b466c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b4670:	f7ff fdb6 	bl	b41e0 <_ZN5Timer6_startEjb.isra.0>
}
   b4674:	b010      	add	sp, #64	; 0x40
   b4676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return (part ? init(part) : init(1) || init(0))
   b467a:	4620      	mov	r0, r4
   b467c:	f002 f812 	bl	b66a4 <_ZN9FatVolume4initEh>
   b4680:	2800      	cmp	r0, #0
   b4682:	d1de      	bne.n	b4642 <setup+0x10e>
        Serial.println("Error: could not connect to SD card!");
   b4684:	f006 f9fe 	bl	baa84 <_Z16_fetch_usbserialv>
   b4688:	4917      	ldr	r1, [pc, #92]	; (b46e8 <setup+0x1b4>)
   b468a:	f005 fc8e 	bl	b9faa <_ZN5Print7printlnEPKc>
        logMessages = false;
   b468e:	2300      	movs	r3, #0
   b4690:	703b      	strb	r3, [r7, #0]
   b4692:	e7e3      	b.n	b465c <setup+0x128>
   b4694:	2003dedc 	.word	0x2003dedc
   b4698:	000b4e1d 	.word	0x000b4e1d
   b469c:	2003de6c 	.word	0x2003de6c
   b46a0:	2003decc 	.word	0x2003decc
   b46a4:	000b43b1 	.word	0x000b43b1
   b46a8:	000b4dcd 	.word	0x000b4dcd
   b46ac:	000bdead 	.word	0x000bdead
   b46b0:	2003dec3 	.word	0x2003dec3
   b46b4:	2003dec2 	.word	0x2003dec2
   b46b8:	2003dee4 	.word	0x2003dee4
   b46bc:	2003e63c 	.word	0x2003e63c
   b46c0:	000bdeb5 	.word	0x000bdeb5
   b46c4:	000bdece 	.word	0x000bdece
   b46c8:	2003dde1 	.word	0x2003dde1
   b46cc:	000bded7 	.word	0x000bded7
   b46d0:	2003e1b8 	.word	0x2003e1b8
   b46d4:	000be3a0 	.word	0x000be3a0
   b46d8:	003d0900 	.word	0x003d0900
   b46dc:	2003e644 	.word	0x2003e644
   b46e0:	2003dd94 	.word	0x2003dd94
   b46e4:	2003ddb0 	.word	0x2003ddb0
   b46e8:	000bdee0 	.word	0x000bdee0

000b46ec <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b46ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b46f0:	b084      	sub	sp, #16
   b46f2:	af02      	add	r7, sp, #8
   b46f4:	4680      	mov	r8, r0
   b46f6:	4691      	mov	r9, r2
   b46f8:	461e      	mov	r6, r3
   b46fa:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b46fc:	f007 fb81 	bl	bbe02 <strlen>
   b4700:	3009      	adds	r0, #9
   b4702:	f020 0107 	bic.w	r1, r0, #7
   b4706:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b470a:	4640      	mov	r0, r8
   b470c:	f007 fb79 	bl	bbe02 <strlen>
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b4710:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4714:	4926      	ldr	r1, [pc, #152]	; (b47b0 <_Z8sendDataPKchbbb+0xc4>)
    char outStr[strlen(dataOut)+2];
   b4716:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4718:	4603      	mov	r3, r0
   b471a:	4642      	mov	r2, r8
   b471c:	4620      	mov	r0, r4
   b471e:	f002 fe91 	bl	b7444 <sprintf>
    if(sendLTE || sendMode == 4){
   b4722:	f1ba 0f00 	cmp.w	sl, #0
   b4726:	d101      	bne.n	b472c <_Z8sendDataPKchbbb+0x40>
   b4728:	2d04      	cmp	r5, #4
   b472a:	d10d      	bne.n	b4748 <_Z8sendDataPKchbbb+0x5c>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b472c:	4b21      	ldr	r3, [pc, #132]	; (b47b4 <_Z8sendDataPKchbbb+0xc8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b472e:	4922      	ldr	r1, [pc, #136]	; (b47b8 <_Z8sendDataPKchbbb+0xcc>)
   b4730:	781b      	ldrb	r3, [r3, #0]
   b4732:	f88d 3000 	strb.w	r3, [sp]
   b4736:	4638      	mov	r0, r7
   b4738:	233c      	movs	r3, #60	; 0x3c
   b473a:	4622      	mov	r2, r4
   b473c:	f005 ff60 	bl	ba600 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4740:	6878      	ldr	r0, [r7, #4]
   b4742:	b108      	cbz	r0, b4748 <_Z8sendDataPKchbbb+0x5c>
	  _M_pi->_M_release();
   b4744:	f7ff fde8 	bl	b4318 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b4748:	f1b9 0f00 	cmp.w	r9, #0
   b474c:	d101      	bne.n	b4752 <_Z8sendDataPKchbbb+0x66>
   b474e:	2d01      	cmp	r5, #1
   b4750:	d121      	bne.n	b4796 <_Z8sendDataPKchbbb+0xaa>
   b4752:	f003 fde3 	bl	b831c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4756:	f003 fe71 	bl	b843c <_ZNK8particle14BleLocalDevice9connectedEv>
   b475a:	b1e0      	cbz	r0, b4796 <_Z8sendDataPKchbbb+0xaa>
        uint8_t txBuf_tmp[strlen(outStr)];
   b475c:	4620      	mov	r0, r4
   b475e:	f007 fb50 	bl	bbe02 <strlen>
   b4762:	3007      	adds	r0, #7
   b4764:	f020 0007 	bic.w	r0, r0, #7
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b4768:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b476a:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b476e:	4620      	mov	r0, r4
   b4770:	f007 fb47 	bl	bbe02 <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b4774:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b4778:	4602      	mov	r2, r0
   b477a:	4621      	mov	r1, r4
   b477c:	4648      	mov	r0, r9
   b477e:	f007 faa2 	bl	bbcc6 <memcpy>
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b4782:	4620      	mov	r0, r4
   b4784:	f007 fb3d 	bl	bbe02 <strlen>
   b4788:	2300      	movs	r3, #0
   b478a:	4602      	mov	r2, r0
   b478c:	4649      	mov	r1, r9
   b478e:	480b      	ldr	r0, [pc, #44]	; (b47bc <_Z8sendDataPKchbbb+0xd0>)
   b4790:	f003 fc5e 	bl	b8050 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b4794:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b4796:	b90e      	cbnz	r6, b479c <_Z8sendDataPKchbbb+0xb0>
   b4798:	2d02      	cmp	r5, #2
   b479a:	d104      	bne.n	b47a6 <_Z8sendDataPKchbbb+0xba>
        Serial1.println(outStr);
   b479c:	f006 fbf0 	bl	baf80 <_Z22__fetch_global_Serial1v>
   b47a0:	4621      	mov	r1, r4
   b47a2:	f005 fc02 	bl	b9faa <_ZN5Print7printlnEPKc>
}
   b47a6:	3708      	adds	r7, #8
   b47a8:	46bd      	mov	sp, r7
   b47aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b47ae:	bf00      	nop
   b47b0:	000bdf05 	.word	0x000bdf05
   b47b4:	2003dd7c 	.word	0x2003dd7c
   b47b8:	000bdead 	.word	0x000bdead
   b47bc:	2003ded4 	.word	0x2003ded4

000b47c0 <_Z14XBeeLTEPairSetv>:
void XBeeLTEPairSet(){
   b47c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      : _M_current(__i) { }
   b47c4:	4d0e      	ldr	r5, [pc, #56]	; (b4800 <_Z14XBeeLTEPairSetv+0x40>)
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b47c6:	4f0f      	ldr	r7, [pc, #60]	; (b4804 <_Z14XBeeLTEPairSetv+0x44>)
   b47c8:	e9d5 4800 	ldrd	r4, r8, [r5]
void XBeeLTEPairSet(){
   b47cc:	b088      	sub	sp, #32
    for(WaterBot p: PairBots){
   b47ce:	45a0      	cmp	r8, r4
   b47d0:	d013      	beq.n	b47fa <_Z14XBeeLTEPairSetv+0x3a>
   b47d2:	7923      	ldrb	r3, [r4, #4]
   b47d4:	78e6      	ldrb	r6, [r4, #3]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b47d6:	f814 2b18 	ldrb.w	r2, [r4], #24
    for(WaterBot p: PairBots){
   b47da:	9303      	str	r3, [sp, #12]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b47dc:	4639      	mov	r1, r7
   b47de:	a805      	add	r0, sp, #20
   b47e0:	f002 fe30 	bl	b7444 <sprintf>
        sendData(replyStr,0,false,p.XBeeAvail,p.LTEAvail);
   b47e4:	2200      	movs	r2, #0
   b47e6:	9b03      	ldr	r3, [sp, #12]
   b47e8:	9600      	str	r6, [sp, #0]
   b47ea:	4611      	mov	r1, r2
   b47ec:	a805      	add	r0, sp, #20
   b47ee:	f7ff ff7d 	bl	b46ec <_Z8sendDataPKchbbb>
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_nonempty();
	--this->_M_impl._M_finish;
   b47f2:	686b      	ldr	r3, [r5, #4]
   b47f4:	3b18      	subs	r3, #24
   b47f6:	606b      	str	r3, [r5, #4]
	return *this;
   b47f8:	e7e9      	b.n	b47ce <_Z14XBeeLTEPairSetv+0xe>
}
   b47fa:	b008      	add	sp, #32
   b47fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4800:	2003dd1c 	.word	0x2003dd1c
   b4804:	000bdf0c 	.word	0x000bdf0c

000b4808 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b4808:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b480c:	e9d0 8900 	ldrd	r8, r9, [r0]
   b4810:	4b29      	ldr	r3, [pc, #164]	; (b48b8 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb0>)
   b4812:	eba9 0408 	sub.w	r4, r9, r8
   b4816:	10e4      	asrs	r4, r4, #3
   b4818:	435c      	muls	r4, r3

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b481a:	4b28      	ldr	r3, [pc, #160]	; (b48bc <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>)
   b481c:	429c      	cmp	r4, r3
   b481e:	4607      	mov	r7, r0
   b4820:	468a      	mov	sl, r1
   b4822:	4693      	mov	fp, r2
   b4824:	d102      	bne.n	b482c <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
   b4826:	4826      	ldr	r0, [pc, #152]	; (b48c0 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb8>)
   b4828:	f006 fc0c 	bl	bb044 <_ZSt20__throw_length_errorPKc>
   b482c:	2c01      	cmp	r4, #1
   b482e:	4622      	mov	r2, r4
   b4830:	bf38      	it	cc
   b4832:	2201      	movcc	r2, #1
   b4834:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b4836:	eba1 0508 	sub.w	r5, r1, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b483a:	d238      	bcs.n	b48ae <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa6>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b483c:	b3cc      	cbz	r4, b48b2 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
   b483e:	429c      	cmp	r4, r3
   b4840:	bf28      	it	cs
   b4842:	461c      	movcs	r4, r3
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4844:	2018      	movs	r0, #24
   b4846:	4360      	muls	r0, r4
   b4848:	f7ff fc25 	bl	b4096 <_Znwj>
   b484c:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b484e:	eb16 0c05 	adds.w	ip, r6, r5
   b4852:	bf1f      	itttt	ne
   b4854:	e8bb 000f 	ldmiane.w	fp!, {r0, r1, r2, r3}
   b4858:	e8ac 000f 	stmiane.w	ip!, {r0, r1, r2, r3}
   b485c:	e9db 0100 	ldrdne	r0, r1, [fp]
   b4860:	e9cc 0100 	strdne	r0, r1, [ip]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
   b4864:	2d00      	cmp	r5, #0
   b4866:	dd04      	ble.n	b4872 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6a>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b4868:	462a      	mov	r2, r5
   b486a:	4641      	mov	r1, r8
   b486c:	4630      	mov	r0, r6
   b486e:	f007 fa38 	bl	bbce2 <memmove>
      ptrdiff_t __count = __last - __first;
   b4872:	eba9 090a 	sub.w	r9, r9, sl
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   b4876:	3518      	adds	r5, #24
      if (__count > 0)
   b4878:	f1b9 0f00 	cmp.w	r9, #0
   b487c:	4435      	add	r5, r6
   b487e:	dd04      	ble.n	b488a <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b4880:	464a      	mov	r2, r9
   b4882:	4651      	mov	r1, sl
   b4884:	4628      	mov	r0, r5
   b4886:	f007 fa1e 	bl	bbcc6 <memcpy>
      return __result + __count;
   b488a:	444d      	add	r5, r9
	if (__p)
   b488c:	f1b8 0f00 	cmp.w	r8, #0
   b4890:	d005      	beq.n	b489e <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x96>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b4892:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b4894:	4640      	mov	r0, r8
   b4896:	eba1 0108 	sub.w	r1, r1, r8
   b489a:	f7ff fc00 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b489e:	2018      	movs	r0, #24
   b48a0:	fb00 6404 	mla	r4, r0, r4, r6
      this->_M_impl._M_finish = __new_finish;
   b48a4:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b48a8:	60bc      	str	r4, [r7, #8]
    }
   b48aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b48ae:	461c      	mov	r4, r3
   b48b0:	e7c8      	b.n	b4844 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b48b2:	4626      	mov	r6, r4
   b48b4:	e7cb      	b.n	b484e <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
   b48b6:	bf00      	nop
   b48b8:	aaaaaaab 	.word	0xaaaaaaab
   b48bc:	05555555 	.word	0x05555555
   b48c0:	000bdf15 	.word	0x000bdf15

000b48c4 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b48c4:	b570      	push	{r4, r5, r6, lr}
   b48c6:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b48c8:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b48cc:	4299      	cmp	r1, r3
      push_back(const value_type& __x)
   b48ce:	4606      	mov	r6, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b48d0:	d00c      	beq.n	b48ec <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x28>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b48d2:	b139      	cbz	r1, b48e4 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x20>
   b48d4:	4615      	mov	r5, r2
   b48d6:	460c      	mov	r4, r1
   b48d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b48da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b48dc:	e895 0003 	ldmia.w	r5, {r0, r1}
   b48e0:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
   b48e4:	6873      	ldr	r3, [r6, #4]
   b48e6:	3318      	adds	r3, #24
   b48e8:	6073      	str	r3, [r6, #4]
      }
   b48ea:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
   b48ec:	f7ff ff8c 	bl	b4808 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b48f0:	e7fb      	b.n	b48ea <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x26>
	...

000b48f4 <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b48f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b48f8:	b09d      	sub	sp, #116	; 0x74
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b48fa:	7883      	ldrb	r3, [r0, #2]
   b48fc:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b48fe:	af02      	add	r7, sp, #8
   b4900:	4606      	mov	r6, r0
   b4902:	468a      	mov	sl, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b4904:	d15d      	bne.n	b49c2 <_Z14processCommandPKchb+0xce>
   b4906:	78c3      	ldrb	r3, [r0, #3]
   b4908:	2b42      	cmp	r3, #66	; 0x42
   b490a:	f040 8179 	bne.w	b4c00 <_Z14processCommandPKchb+0x30c>
        char dataStr[strlen(command)-8];
   b490e:	4630      	mov	r0, r6
   b4910:	f007 fa77 	bl	bbe02 <strlen>
   b4914:	3801      	subs	r0, #1
   b4916:	f020 0007 	bic.w	r0, r0, #7
        }
   b491a:	46e8      	mov	r8, sp
        char dataStr[strlen(command)-8];
   b491c:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b4920:	4630      	mov	r0, r6
   b4922:	f007 fa6e 	bl	bbe02 <strlen>
        char dataStr[strlen(command)-8];
   b4926:	ad02      	add	r5, sp, #8
        dataStr[strlen(command)-9] = '\0';
   b4928:	4428      	add	r0, r5
   b492a:	f04f 0900 	mov.w	r9, #0
        rxIDBuf[0] = command[1];
   b492e:	7873      	ldrb	r3, [r6, #1]
        dataStr[strlen(command)-9] = '\0';
   b4930:	f800 9c09 	strb.w	r9, [r0, #-9]
        uint8_t rxBotID = atoi(rxIDBuf);
   b4934:	f107 0018 	add.w	r0, r7, #24
        rxIDBuf[0] = command[1];
   b4938:	763b      	strb	r3, [r7, #24]
        uint8_t rxBotID = atoi(rxIDBuf);
   b493a:	f007 f9b0 	bl	bbc9e <atoi>
   b493e:	4604      	mov	r4, r0
        checkStr[0] = command[strlen(command)-2];
   b4940:	4630      	mov	r0, r6
        cmdStr[3] = '\0';
   b4942:	f887 9023 	strb.w	r9, [r7, #35]	; 0x23
        checkStr[0] = command[strlen(command)-2];
   b4946:	f007 fa5c 	bl	bbe02 <strlen>
   b494a:	4430      	add	r0, r6
   b494c:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b4950:	773b      	strb	r3, [r7, #28]
        checkStr[1] = command[strlen(command)-1];
   b4952:	4630      	mov	r0, r6
   b4954:	f007 fa55 	bl	bbe02 <strlen>
   b4958:	4430      	add	r0, r6
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b495a:	4649      	mov	r1, r9
        checkStr[1] = command[strlen(command)-1];
   b495c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b4960:	777b      	strb	r3, [r7, #29]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4962:	2210      	movs	r2, #16
   b4964:	f107 001c 	add.w	r0, r7, #28
        checkStr[2] = '\0';
   b4968:	f887 901e 	strb.w	r9, [r7, #30]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b496c:	f008 f934 	bl	bcbd8 <strtol>
   b4970:	4683      	mov	fp, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b4972:	fa5f fb8b 	uxtb.w	fp, fp
   b4976:	f006 f885 	bl	baa84 <_Z16_fetch_usbserialv>
   b497a:	49c8      	ldr	r1, [pc, #800]	; (b4c9c <_Z14processCommandPKchb+0x3a8>)
   b497c:	465b      	mov	r3, fp
   b497e:	465a      	mov	r2, fp
   b4980:	f7ff fc7e 	bl	b4280 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4984:	f04f 0904 	mov.w	r9, #4
   b4988:	4630      	mov	r0, r6
   b498a:	f007 fa3a 	bl	bbe02 <strlen>
   b498e:	3802      	subs	r0, #2
   b4990:	4581      	cmp	r9, r0
   b4992:	d21c      	bcs.n	b49ce <_Z14processCommandPKchb+0xda>
            if(i < 7) cmdStr[i-4] = command[i];
   b4994:	f1b9 0f06 	cmp.w	r9, #6
   b4998:	bf9b      	ittet	ls
   b499a:	f107 0368 	addls.w	r3, r7, #104	; 0x68
   b499e:	444b      	addls	r3, r9
            else dataStr[i-7] = command[i];
   b49a0:	eb05 0309 	addhi.w	r3, r5, r9
            if(i < 7) cmdStr[i-4] = command[i];
   b49a4:	f816 2009 	ldrbls.w	r2, [r6, r9]
            else dataStr[i-7] = command[i];
   b49a8:	bf8c      	ite	hi
   b49aa:	f816 2009 	ldrbhi.w	r2, [r6, r9]
            if(i < 7) cmdStr[i-4] = command[i];
   b49ae:	f803 2c4c 	strbls.w	r2, [r3, #-76]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b49b2:	f109 0901 	add.w	r9, r9, #1
            else dataStr[i-7] = command[i];
   b49b6:	bf88      	it	hi
   b49b8:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b49bc:	fa5f f989 	uxtb.w	r9, r9
   b49c0:	e7e2      	b.n	b4988 <_Z14processCommandPKchb+0x94>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b49c2:	2b43      	cmp	r3, #67	; 0x43
   b49c4:	f040 811c 	bne.w	b4c00 <_Z14processCommandPKchb+0x30c>
   b49c8:	78c3      	ldrb	r3, [r0, #3]
   b49ca:	2b43      	cmp	r3, #67	; 0x43
   b49cc:	e79d      	b.n	b490a <_Z14processCommandPKchb+0x16>
        if(checksum != strlen(command)-2){
   b49ce:	4558      	cmp	r0, fp
   b49d0:	d042      	beq.n	b4a58 <_Z14processCommandPKchb+0x164>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b49d2:	f006 f857 	bl	baa84 <_Z16_fetch_usbserialv>
   b49d6:	4604      	mov	r4, r0
   b49d8:	4630      	mov	r0, r6
   b49da:	f007 fa12 	bl	bbe02 <strlen>
   b49de:	1e82      	subs	r2, r0, #2
   b49e0:	4620      	mov	r0, r4
    return m_attr;
   b49e2:	4caf      	ldr	r4, [pc, #700]	; (b4ca0 <_Z14processCommandPKchb+0x3ac>)
   b49e4:	49af      	ldr	r1, [pc, #700]	; (b4ca4 <_Z14processCommandPKchb+0x3b0>)
   b49e6:	465b      	mov	r3, fp
   b49e8:	f7ff fc4a 	bl	b4280 <_ZN5Print8printlnfEPKcz>
            if(!logFile.isOpen()){
   b49ec:	7c23      	ldrb	r3, [r4, #16]
   b49ee:	bb6b      	cbnz	r3, b4a4c <_Z14processCommandPKchb+0x158>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b49f0:	49ad      	ldr	r1, [pc, #692]	; (b4ca8 <_Z14processCommandPKchb+0x3b4>)
   b49f2:	f244 2202 	movw	r2, #16898	; 0x4202
   b49f6:	f104 0010 	add.w	r0, r4, #16
   b49fa:	f7ff fcd1 	bl	b43a0 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b49fe:	49ab      	ldr	r1, [pc, #684]	; (b4cac <_Z14processCommandPKchb+0x3b8>)
   b4a00:	4632      	mov	r2, r6
   b4a02:	4620      	mov	r0, r4
   b4a04:	f7ff fc3c 	bl	b4280 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4a08:	f104 0010 	add.w	r0, r4, #16
   b4a0c:	f001 fc00 	bl	b6210 <_ZN7FatFile5closeEv>
            Serial.println("Warning, checksum does not match");
   b4a10:	f006 f838 	bl	baa84 <_Z16_fetch_usbserialv>
   b4a14:	49a6      	ldr	r1, [pc, #664]	; (b4cb0 <_Z14processCommandPKchb+0x3bc>)
   b4a16:	f005 fac8 	bl	b9faa <_ZN5Print7printlnEPKc>
            if((command[1] >= '0' && command[1] <= '9') || command[1] == 'C'){
   b4a1a:	7873      	ldrb	r3, [r6, #1]
   b4a1c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b4a20:	2a09      	cmp	r2, #9
   b4a22:	d902      	bls.n	b4a2a <_Z14processCommandPKchb+0x136>
   b4a24:	2b43      	cmp	r3, #67	; 0x43
   b4a26:	f040 80ea 	bne.w	b4bfe <_Z14processCommandPKchb+0x30a>
                rxBotNum[0] = command[0];
   b4a2a:	7832      	ldrb	r2, [r6, #0]
   b4a2c:	f887 2038 	strb.w	r2, [r7, #56]	; 0x38
                rxBotNum[1] = command[1];
   b4a30:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
                sprintf(errBuf,"CC%2snak%3s",rxBotNum,cmdStr);
   b4a34:	499f      	ldr	r1, [pc, #636]	; (b4cb4 <_Z14processCommandPKchb+0x3c0>)
   b4a36:	48a0      	ldr	r0, [pc, #640]	; (b4cb8 <_Z14processCommandPKchb+0x3c4>)
   b4a38:	f107 0320 	add.w	r3, r7, #32
   b4a3c:	f107 0238 	add.w	r2, r7, #56	; 0x38
   b4a40:	f002 fd00 	bl	b7444 <sprintf>
                errModeReply = mode;
   b4a44:	4b9d      	ldr	r3, [pc, #628]	; (b4cbc <_Z14processCommandPKchb+0x3c8>)
            errCmdMode = mode;
   b4a46:	f883 a000 	strb.w	sl, [r3]
   b4a4a:	e0d8      	b.n	b4bfe <_Z14processCommandPKchb+0x30a>
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4a4c:	4997      	ldr	r1, [pc, #604]	; (b4cac <_Z14processCommandPKchb+0x3b8>)
   b4a4e:	4632      	mov	r2, r6
   b4a50:	4620      	mov	r0, r4
   b4a52:	f7ff fc15 	bl	b4280 <_ZN5Print8printlnfEPKcz>
   b4a56:	e7db      	b.n	b4a10 <_Z14processCommandPKchb+0x11c>
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   b4a58:	4999      	ldr	r1, [pc, #612]	; (b4cc0 <_Z14processCommandPKchb+0x3cc>)
   b4a5a:	f107 0020 	add.w	r0, r7, #32
   b4a5e:	f007 f9a0 	bl	bbda2 <strcmp>
   b4a62:	2800      	cmp	r0, #0
   b4a64:	f000 80cb 	beq.w	b4bfe <_Z14processCommandPKchb+0x30a>
        else if(!strcmp(cmdStr,"sup")){
   b4a68:	4996      	ldr	r1, [pc, #600]	; (b4cc4 <_Z14processCommandPKchb+0x3d0>)
   b4a6a:	f107 0020 	add.w	r0, r7, #32
        uint8_t rxBotID = atoi(rxIDBuf);
   b4a6e:	b2e4      	uxtb	r4, r4
        else if(!strcmp(cmdStr,"sup")){
   b4a70:	f007 f997 	bl	bbda2 <strcmp>
   b4a74:	2800      	cmp	r0, #0
   b4a76:	f040 80c7 	bne.w	b4c08 <_Z14processCommandPKchb+0x314>
      : _M_current(__i) { }
   b4a7a:	4b93      	ldr	r3, [pc, #588]	; (b4cc8 <_Z14processCommandPKchb+0x3d4>)
                    Serial.println("##########################");
   b4a7c:	f8df 9290 	ldr.w	r9, [pc, #656]	; b4d10 <_Z14processCommandPKchb+0x41c>
   b4a80:	685a      	ldr	r2, [r3, #4]
   b4a82:	681e      	ldr	r6, [r3, #0]
   b4a84:	617a      	str	r2, [r7, #20]
            bool newBot = true;
   b4a86:	2301      	movs	r3, #1
            for(WaterBot w: WaterBots){
   b4a88:	697a      	ldr	r2, [r7, #20]
   b4a8a:	42b2      	cmp	r2, r6
   b4a8c:	d074      	beq.n	b4b78 <_Z14processCommandPKchb+0x284>
   b4a8e:	7832      	ldrb	r2, [r6, #0]
                if(rxBotID == w.botNum){
   b4a90:	4294      	cmp	r4, r2
   b4a92:	d16f      	bne.n	b4b74 <_Z14processCommandPKchb+0x280>
                    sscanf(dataStr,"%u %u %s %s",&battpct,&statflags,testLat,testLon);
   b4a94:	f107 0a38 	add.w	sl, r7, #56	; 0x38
   b4a98:	f107 0b28 	add.w	fp, r7, #40	; 0x28
   b4a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
   b4aa0:	f107 021b 	add.w	r2, r7, #27
   b4aa4:	4989      	ldr	r1, [pc, #548]	; (b4ccc <_Z14processCommandPKchb+0x3d8>)
   b4aa6:	f8cd a004 	str.w	sl, [sp, #4]
   b4aaa:	f8cd b000 	str.w	fp, [sp]
   b4aae:	4628      	mov	r0, r5
   b4ab0:	f002 fcd0 	bl	b7454 <sscanf>
                    latRX = atof(testLat);
   b4ab4:	4658      	mov	r0, fp
   b4ab6:	f007 f8ef 	bl	bbc98 <atof>
                    lonRX = atof(testLon);
   b4aba:	4650      	mov	r0, sl
                    latRX = atof(testLat);
   b4abc:	ed87 0b02 	vstr	d0, [r7, #8]
                    lonRX = atof(testLon);
   b4ac0:	f007 f8ea 	bl	bbc98 <atof>
                    w.LTEAvail = statflags & 1;
   b4ac4:	f897 a024 	ldrb.w	sl, [r7, #36]	; 0x24
                    w.battPercent = battpct;
   b4ac8:	f897 b01b 	ldrb.w	fp, [r7, #27]
                    lonRX = atof(testLon);
   b4acc:	ed87 0b00 	vstr	d0, [r7]
                    Serial.println("Status Update!");
   b4ad0:	f005 ffd8 	bl	baa84 <_Z16_fetch_usbserialv>
   b4ad4:	497e      	ldr	r1, [pc, #504]	; (b4cd0 <_Z14processCommandPKchb+0x3dc>)
   b4ad6:	f005 fa68 	bl	b9faa <_ZN5Print7printlnEPKc>
                    Serial.println("##########################");
   b4ada:	f005 ffd3 	bl	baa84 <_Z16_fetch_usbserialv>
   b4ade:	4649      	mov	r1, r9
   b4ae0:	f005 fa63 	bl	b9faa <_ZN5Print7printlnEPKc>
                    Serial.println("##     STATUS UPDATE    ##");
   b4ae4:	f005 ffce 	bl	baa84 <_Z16_fetch_usbserialv>
   b4ae8:	497a      	ldr	r1, [pc, #488]	; (b4cd4 <_Z14processCommandPKchb+0x3e0>)
   b4aea:	f005 fa5e 	bl	b9faa <_ZN5Print7printlnEPKc>
                    Serial.printlnf("##       Bot #: %1d      ##",w.botNum);
   b4aee:	f005 ffc9 	bl	baa84 <_Z16_fetch_usbserialv>
   b4af2:	4979      	ldr	r1, [pc, #484]	; (b4cd8 <_Z14processCommandPKchb+0x3e4>)
   b4af4:	4622      	mov	r2, r4
   b4af6:	f7ff fbc3 	bl	b4280 <_ZN5Print8printlnfEPKcz>
                    Serial.printlnf("##      Batt %: %03d     ##",w.battPercent);
   b4afa:	f005 ffc3 	bl	baa84 <_Z16_fetch_usbserialv>
   b4afe:	465a      	mov	r2, fp
   b4b00:	4976      	ldr	r1, [pc, #472]	; (b4cdc <_Z14processCommandPKchb+0x3e8>)
   b4b02:	f7ff fbbd 	bl	b4280 <_ZN5Print8printlnfEPKcz>
                    Serial.println("##    LTE  BLE  XBee    ##");
   b4b06:	f005 ffbd 	bl	baa84 <_Z16_fetch_usbserialv>
   b4b0a:	4975      	ldr	r1, [pc, #468]	; (b4ce0 <_Z14processCommandPKchb+0x3ec>)
   b4b0c:	f005 fa4d 	bl	b9faa <_ZN5Print7printlnEPKc>
                    Serial.printlnf("##     %d    %d     %d     ##",w.LTEAvail,w.BLEAvail,w.XBeeAvail);
   b4b10:	f005 ffb8 	bl	baa84 <_Z16_fetch_usbserialv>
   b4b14:	f3ca 0340 	ubfx	r3, sl, #1, #1
   b4b18:	f00a 0201 	and.w	r2, sl, #1
   b4b1c:	4971      	ldr	r1, [pc, #452]	; (b4ce4 <_Z14processCommandPKchb+0x3f0>)
   b4b1e:	9300      	str	r3, [sp, #0]
   b4b20:	f3ca 0380 	ubfx	r3, sl, #2, #1
   b4b24:	f7ff fbac 	bl	b4280 <_ZN5Print8printlnfEPKcz>
                    Serial.println("##  Latitude Longitude  ##");
   b4b28:	f005 ffac 	bl	baa84 <_Z16_fetch_usbserialv>
   b4b2c:	496e      	ldr	r1, [pc, #440]	; (b4ce8 <_Z14processCommandPKchb+0x3f4>)
   b4b2e:	f005 fa3c 	bl	b9faa <_ZN5Print7printlnEPKc>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4b32:	f005 ffa7 	bl	baa84 <_Z16_fetch_usbserialv>
   b4b36:	4682      	mov	sl, r0
                    latRX = atof(testLat);
   b4b38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   b4b3c:	f007 f838 	bl	bbbb0 <__aeabi_d2f>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4b40:	f006 fcfc 	bl	bb53c <__aeabi_f2d>
   b4b44:	4602      	mov	r2, r0
   b4b46:	460b      	mov	r3, r1
                    lonRX = atof(testLon);
   b4b48:	e9d7 0100 	ldrd	r0, r1, [r7]
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4b4c:	e9c7 2302 	strd	r2, r3, [r7, #8]
                    lonRX = atof(testLon);
   b4b50:	f007 f82e 	bl	bbbb0 <__aeabi_d2f>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4b54:	f006 fcf2 	bl	bb53c <__aeabi_f2d>
   b4b58:	e9cd 0100 	strd	r0, r1, [sp]
   b4b5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   b4b60:	4962      	ldr	r1, [pc, #392]	; (b4cec <_Z14processCommandPKchb+0x3f8>)
   b4b62:	4650      	mov	r0, sl
   b4b64:	f7ff fb8c 	bl	b4280 <_ZN5Print8printlnfEPKcz>
                    Serial.println("##########################");
   b4b68:	f005 ff8c 	bl	baa84 <_Z16_fetch_usbserialv>
   b4b6c:	4649      	mov	r1, r9
   b4b6e:	f005 fa1c 	bl	b9faa <_ZN5Print7printlnEPKc>
                    newBot = false;
   b4b72:	2300      	movs	r3, #0
      operator++() _GLIBCXX_NOEXCEPT
   b4b74:	3618      	adds	r6, #24
	return *this;
   b4b76:	e787      	b.n	b4a88 <_Z14processCommandPKchb+0x194>
            if(newBot){
   b4b78:	2b00      	cmp	r3, #0
   b4b7a:	d040      	beq.n	b4bfe <_Z14processCommandPKchb+0x30a>
                Serial.println("Found a new water bot ID");
   b4b7c:	f005 ff82 	bl	baa84 <_Z16_fetch_usbserialv>
   b4b80:	495b      	ldr	r1, [pc, #364]	; (b4cf0 <_Z14processCommandPKchb+0x3fc>)
   b4b82:	f005 fa12 	bl	b9faa <_ZN5Print7printlnEPKc>
                newWaterbot.BLEAvail = true;
   b4b86:	2301      	movs	r3, #1
   b4b88:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
                sscanf(dataStr,"%u %u %f %f",&battpct,&statflags,&latRX,&lonRX);
   b4b8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
                newWaterbot.botNum = rxBotID;
   b4b90:	f887 4038 	strb.w	r4, [r7, #56]	; 0x38
                sscanf(dataStr,"%u %u %f %f",&battpct,&statflags,&latRX,&lonRX);
   b4b94:	9301      	str	r3, [sp, #4]
   b4b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
   b4b9a:	4956      	ldr	r1, [pc, #344]	; (b4cf4 <_Z14processCommandPKchb+0x400>)
   b4b9c:	9300      	str	r3, [sp, #0]
   b4b9e:	f107 021a 	add.w	r2, r7, #26
   b4ba2:	f107 031b 	add.w	r3, r7, #27
   b4ba6:	4628      	mov	r0, r5
   b4ba8:	f002 fc54 	bl	b7454 <sscanf>
                newWaterbot.battPercent = battpct;
   b4bac:	7ebb      	ldrb	r3, [r7, #26]
   b4bae:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
                newWaterbot.LTEAvail = statflags & 1;
   b4bb2:	7efb      	ldrb	r3, [r7, #27]
                WaterBots.push_back(newWaterbot);
   b4bb4:	4844      	ldr	r0, [pc, #272]	; (b4cc8 <_Z14processCommandPKchb+0x3d4>)
                newWaterbot.LTEAvail = statflags & 1;
   b4bb6:	f003 0201 	and.w	r2, r3, #1
   b4bba:	f887 203b 	strb.w	r2, [r7, #59]	; 0x3b
                newWaterbot.XBeeAvail = (statflags >> 1) & 1;
   b4bbe:	f3c3 0240 	ubfx	r2, r3, #1, #1
   b4bc2:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
                newWaterbot.BLEAvail = (statflags >> 2) & 1;
   b4bc6:	f3c3 0280 	ubfx	r2, r3, #2, #1
   b4bca:	f887 203a 	strb.w	r2, [r7, #58]	; 0x3a
                newWaterbot.offloading = (statflags >> 3) & 1;
   b4bce:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   b4bd2:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
                newWaterbot.manualRC = (statflags >> 4) & 1;
   b4bd6:	f3c3 1200 	ubfx	r2, r3, #4, #1
   b4bda:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
                newWaterbot.lowBatt = (statflags >> 5) & 1;
   b4bde:	f3c3 1240 	ubfx	r2, r3, #5, #1
                newWaterbot.dataRecording = (statflags >> 6) & 1;
   b4be2:	f3c3 1380 	ubfx	r3, r3, #6, #1
   b4be6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                newWaterbot.GPSLat = latRX;
   b4bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   b4bec:	647b      	str	r3, [r7, #68]	; 0x44
                WaterBots.push_back(newWaterbot);
   b4bee:	f107 0138 	add.w	r1, r7, #56	; 0x38
                newWaterbot.GPSLon = lonRX;
   b4bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
                newWaterbot.lowBatt = (statflags >> 5) & 1;
   b4bf4:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
                newWaterbot.GPSLon = lonRX;
   b4bf8:	64bb      	str	r3, [r7, #72]	; 0x48
                WaterBots.push_back(newWaterbot);
   b4bfa:	f7ff fe63 	bl	b48c4 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
   b4bfe:	46c5      	mov	sp, r8
}
   b4c00:	376c      	adds	r7, #108	; 0x6c
   b4c02:	46bd      	mov	sp, r7
   b4c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(!strcmp(cmdStr,"nak")){  //Acknowledgement for XBee and BLE
   b4c08:	493b      	ldr	r1, [pc, #236]	; (b4cf8 <_Z14processCommandPKchb+0x404>)
   b4c0a:	f107 0020 	add.w	r0, r7, #32
   b4c0e:	f007 f8c8 	bl	bbda2 <strcmp>
   b4c12:	b930      	cbnz	r0, b4c22 <_Z14processCommandPKchb+0x32e>
            strncpy(errCmdStr,dataStr,3);
   b4c14:	4839      	ldr	r0, [pc, #228]	; (b4cfc <_Z14processCommandPKchb+0x408>)
   b4c16:	2203      	movs	r2, #3
   b4c18:	4629      	mov	r1, r5
   b4c1a:	f007 f90e 	bl	bbe3a <strncpy>
            errCmdMode = mode;
   b4c1e:	4b38      	ldr	r3, [pc, #224]	; (b4d00 <_Z14processCommandPKchb+0x40c>)
   b4c20:	e711      	b.n	b4a46 <_Z14processCommandPKchb+0x152>
        else if(!strcmp(cmdStr,"hwd")){  //Hello World! - Received startup pairing message
   b4c22:	4938      	ldr	r1, [pc, #224]	; (b4d04 <_Z14processCommandPKchb+0x410>)
   b4c24:	f107 0020 	add.w	r0, r7, #32
   b4c28:	f007 f8bb 	bl	bbda2 <strcmp>
   b4c2c:	2800      	cmp	r0, #0
   b4c2e:	d171      	bne.n	b4d14 <_Z14processCommandPKchb+0x420>
      : _M_current(__i) { }
   b4c30:	4b25      	ldr	r3, [pc, #148]	; (b4cc8 <_Z14processCommandPKchb+0x3d4>)
   b4c32:	e9d3 2000 	ldrd	r2, r0, [r3]
            bool newBot = true;
   b4c36:	2301      	movs	r3, #1
            for(WaterBot w: WaterBots){
   b4c38:	4282      	cmp	r2, r0
   b4c3a:	d005      	beq.n	b4c48 <_Z14processCommandPKchb+0x354>
                if(rxBotID == w.botNum) newBot = false;
   b4c3c:	f812 1b18 	ldrb.w	r1, [r2], #24
   b4c40:	42a1      	cmp	r1, r4
   b4c42:	bf08      	it	eq
   b4c44:	2300      	moveq	r3, #0
	return *this;
   b4c46:	e7f7      	b.n	b4c38 <_Z14processCommandPKchb+0x344>
            if(newBot){
   b4c48:	b1ab      	cbz	r3, b4c76 <_Z14processCommandPKchb+0x382>
                Serial.println("Found a new water bot ID");
   b4c4a:	f005 ff1b 	bl	baa84 <_Z16_fetch_usbserialv>
   b4c4e:	4928      	ldr	r1, [pc, #160]	; (b4cf0 <_Z14processCommandPKchb+0x3fc>)
   b4c50:	f005 f9ab 	bl	b9faa <_ZN5Print7printlnEPKc>
                if(mode == 1) newWaterbot.BLEAvail = true;
   b4c54:	f1ba 0f01 	cmp.w	sl, #1
   b4c58:	d111      	bne.n	b4c7e <_Z14processCommandPKchb+0x38a>
   b4c5a:	f887 a03a 	strb.w	sl, [r7, #58]	; 0x3a
                WaterBots.push_back(newWaterbot);
   b4c5e:	481a      	ldr	r0, [pc, #104]	; (b4cc8 <_Z14processCommandPKchb+0x3d4>)
                newWaterbot.botNum = rxBotID;
   b4c60:	f887 4038 	strb.w	r4, [r7, #56]	; 0x38
                WaterBots.push_back(newWaterbot);
   b4c64:	f107 0138 	add.w	r1, r7, #56	; 0x38
   b4c68:	f7ff fe2c 	bl	b48c4 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
                PairBots.push_back(newWaterbot);
   b4c6c:	4826      	ldr	r0, [pc, #152]	; (b4d08 <_Z14processCommandPKchb+0x414>)
   b4c6e:	f107 0138 	add.w	r1, r7, #56	; 0x38
   b4c72:	f7ff fe27 	bl	b48c4 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
            botPairRx = true;
   b4c76:	4b25      	ldr	r3, [pc, #148]	; (b4d0c <_Z14processCommandPKchb+0x418>)
   b4c78:	2201      	movs	r2, #1
   b4c7a:	701a      	strb	r2, [r3, #0]
   b4c7c:	e7bf      	b.n	b4bfe <_Z14processCommandPKchb+0x30a>
                else if(mode == 2) newWaterbot.XBeeAvail = true;
   b4c7e:	f1ba 0f02 	cmp.w	sl, #2
   b4c82:	f04f 0301 	mov.w	r3, #1
   b4c86:	d102      	bne.n	b4c8e <_Z14processCommandPKchb+0x39a>
   b4c88:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
   b4c8c:	e7e7      	b.n	b4c5e <_Z14processCommandPKchb+0x36a>
                else if(mode == 3) newWaterbot.LTEAvail = true;
   b4c8e:	f1ba 0f03 	cmp.w	sl, #3
   b4c92:	bf08      	it	eq
   b4c94:	f887 303b 	strbeq.w	r3, [r7, #59]	; 0x3b
   b4c98:	e7e1      	b.n	b4c5e <_Z14processCommandPKchb+0x36a>
   b4c9a:	bf00      	nop
   b4c9c:	000bdf2f 	.word	0x000bdf2f
   b4ca0:	2003de38 	.word	0x2003de38
   b4ca4:	000bdf44 	.word	0x000bdf44
   b4ca8:	2003dde1 	.word	0x2003dde1
   b4cac:	000bdf61 	.word	0x000bdf61
   b4cb0:	000bdf8d 	.word	0x000bdf8d
   b4cb4:	000bdfae 	.word	0x000bdfae
   b4cb8:	2003ddcd 	.word	0x2003ddcd
   b4cbc:	2003dde0 	.word	0x2003dde0
   b4cc0:	000bdfba 	.word	0x000bdfba
   b4cc4:	000bdfbe 	.word	0x000bdfbe
   b4cc8:	2003dd34 	.word	0x2003dd34
   b4ccc:	000bdfc2 	.word	0x000bdfc2
   b4cd0:	000bdfce 	.word	0x000bdfce
   b4cd4:	000bdff8 	.word	0x000bdff8
   b4cd8:	000be013 	.word	0x000be013
   b4cdc:	000be02f 	.word	0x000be02f
   b4ce0:	000be04b 	.word	0x000be04b
   b4ce4:	000be066 	.word	0x000be066
   b4ce8:	000be084 	.word	0x000be084
   b4cec:	000be09f 	.word	0x000be09f
   b4cf0:	000be0af 	.word	0x000be0af
   b4cf4:	000be0c8 	.word	0x000be0c8
   b4cf8:	000be0d4 	.word	0x000be0d4
   b4cfc:	2003dddd 	.word	0x2003dddd
   b4d00:	2003dddc 	.word	0x2003dddc
   b4d04:	000be0d8 	.word	0x000be0d8
   b4d08:	2003dd1c 	.word	0x2003dd1c
   b4d0c:	2003ddcc 	.word	0x2003ddcc
   b4d10:	000bdfdd 	.word	0x000bdfdd
        else if(!strcmp(cmdStr,"pts")){
   b4d14:	4925      	ldr	r1, [pc, #148]	; (b4dac <_Z14processCommandPKchb+0x4b8>)
   b4d16:	f107 0020 	add.w	r0, r7, #32
   b4d1a:	f007 f842 	bl	bbda2 <strcmp>
   b4d1e:	2800      	cmp	r0, #0
   b4d20:	f47f af6d 	bne.w	b4bfe <_Z14processCommandPKchb+0x30a>
            Serial.println(dataStr);
   b4d24:	f005 feae 	bl	baa84 <_Z16_fetch_usbserialv>
   b4d28:	4629      	mov	r1, r5
   b4d2a:	f005 f93e 	bl	b9faa <_ZN5Print7printlnEPKc>
            myFile.open("RawWrite.txt", O_RDWR | O_CREAT | O_AT_END);
   b4d2e:	f244 2202 	movw	r2, #16898	; 0x4202
   b4d32:	491f      	ldr	r1, [pc, #124]	; (b4db0 <_Z14processCommandPKchb+0x4bc>)
   b4d34:	481f      	ldr	r0, [pc, #124]	; (b4db4 <_Z14processCommandPKchb+0x4c0>)
   b4d36:	f7ff fb33 	bl	b43a0 <_ZN7FatFile4openEPKci>
            String modeStr[3] = {"LTE", "XBee", "Bluetooth"};
   b4d3a:	491f      	ldr	r1, [pc, #124]	; (b4db8 <_Z14processCommandPKchb+0x4c4>)
   b4d3c:	f107 0038 	add.w	r0, r7, #56	; 0x38
   b4d40:	f002 fd31 	bl	b77a6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4d44:	491d      	ldr	r1, [pc, #116]	; (b4dbc <_Z14processCommandPKchb+0x4c8>)
   b4d46:	f107 0048 	add.w	r0, r7, #72	; 0x48
   b4d4a:	f002 fd2c 	bl	b77a6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4d4e:	491c      	ldr	r1, [pc, #112]	; (b4dc0 <_Z14processCommandPKchb+0x4cc>)
   b4d50:	f107 0058 	add.w	r0, r7, #88	; 0x58
   b4d54:	f002 fd27 	bl	b77a6 <_ZN6StringC1EPK19__FlashStringHelper>
            myFile.printf("New string from %s: ", modeStr[mode]);
   b4d58:	f107 0338 	add.w	r3, r7, #56	; 0x38
   b4d5c:	eb03 110a 	add.w	r1, r3, sl, lsl #4
   b4d60:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4d64:	f002 fd6a 	bl	b783c <_ZN6StringC1ERKS_>
   b4d68:	f107 0228 	add.w	r2, r7, #40	; 0x28
   b4d6c:	4915      	ldr	r1, [pc, #84]	; (b4dc4 <_Z14processCommandPKchb+0x4d0>)
   b4d6e:	4816      	ldr	r0, [pc, #88]	; (b4dc8 <_Z14processCommandPKchb+0x4d4>)
   b4d70:	f7ff fa4e 	bl	b4210 <_ZN5Print6printfEPKcz>
   b4d74:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4d78:	f002 fcca 	bl	b7710 <_ZN6StringD1Ev>
            myFile.println(dataStr);
   b4d7c:	4629      	mov	r1, r5
   b4d7e:	4812      	ldr	r0, [pc, #72]	; (b4dc8 <_Z14processCommandPKchb+0x4d4>)
   b4d80:	f005 f913 	bl	b9faa <_ZN5Print7printlnEPKc>
            delay(5);
   b4d84:	2005      	movs	r0, #5
   b4d86:	f005 fa69 	bl	ba25c <delay>
            myFile.close();
   b4d8a:	480a      	ldr	r0, [pc, #40]	; (b4db4 <_Z14processCommandPKchb+0x4c0>)
   b4d8c:	f001 fa40 	bl	b6210 <_ZN7FatFile5closeEv>
            String modeStr[3] = {"LTE", "XBee", "Bluetooth"};
   b4d90:	f107 0058 	add.w	r0, r7, #88	; 0x58
   b4d94:	f002 fcbc 	bl	b7710 <_ZN6StringD1Ev>
   b4d98:	f107 0048 	add.w	r0, r7, #72	; 0x48
   b4d9c:	f002 fcb8 	bl	b7710 <_ZN6StringD1Ev>
   b4da0:	f107 0038 	add.w	r0, r7, #56	; 0x38
   b4da4:	f002 fcb4 	bl	b7710 <_ZN6StringD1Ev>
        if(sendAck){    //Transmit out acknowledgement if needed
   b4da8:	e729      	b.n	b4bfe <_Z14processCommandPKchb+0x30a>
   b4daa:	bf00      	nop
   b4dac:	000be0dc 	.word	0x000be0dc
   b4db0:	000be0e0 	.word	0x000be0e0
   b4db4:	2003de80 	.word	0x2003de80
   b4db8:	000be0ed 	.word	0x000be0ed
   b4dbc:	000be0f1 	.word	0x000be0f1
   b4dc0:	000be0f6 	.word	0x000be0f6
   b4dc4:	000be100 	.word	0x000be100
   b4dc8:	2003de70 	.word	0x2003de70

000b4dcc <_Z14dataLTEHandlerPKcS0_>:
void dataLTEHandler(const char *event, const char *data){
   b4dcc:	b510      	push	{r4, lr}
   b4dce:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b4dd0:	2200      	movs	r2, #0
   b4dd2:	2104      	movs	r1, #4
   b4dd4:	4620      	mov	r0, r4
   b4dd6:	f7ff fd8d 	bl	b48f4 <_Z14processCommandPKchb>
    if(logMessages){
   b4dda:	4b0b      	ldr	r3, [pc, #44]	; (b4e08 <_Z14dataLTEHandlerPKcS0_+0x3c>)
   b4ddc:	781b      	ldrb	r3, [r3, #0]
   b4dde:	b193      	cbz	r3, b4e06 <_Z14dataLTEHandlerPKcS0_+0x3a>
   b4de0:	480a      	ldr	r0, [pc, #40]	; (b4e0c <_Z14dataLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4de2:	7c03      	ldrb	r3, [r0, #16]
   b4de4:	b92b      	cbnz	r3, b4df2 <_Z14dataLTEHandlerPKcS0_+0x26>
   b4de6:	490a      	ldr	r1, [pc, #40]	; (b4e10 <_Z14dataLTEHandlerPKcS0_+0x44>)
   b4de8:	f244 2202 	movw	r2, #16898	; 0x4202
   b4dec:	3010      	adds	r0, #16
   b4dee:	f7ff fad7 	bl	b43a0 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b4df2:	4622      	mov	r2, r4
   b4df4:	4907      	ldr	r1, [pc, #28]	; (b4e14 <_Z14dataLTEHandlerPKcS0_+0x48>)
   b4df6:	4805      	ldr	r0, [pc, #20]	; (b4e0c <_Z14dataLTEHandlerPKcS0_+0x40>)
   b4df8:	f7ff fa42 	bl	b4280 <_ZN5Print8printlnfEPKcz>
}
   b4dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b4e00:	4805      	ldr	r0, [pc, #20]	; (b4e18 <_Z14dataLTEHandlerPKcS0_+0x4c>)
   b4e02:	f001 ba05 	b.w	b6210 <_ZN7FatFile5closeEv>
}
   b4e06:	bd10      	pop	{r4, pc}
   b4e08:	2003de6c 	.word	0x2003de6c
   b4e0c:	2003de38 	.word	0x2003de38
   b4e10:	2003dde1 	.word	0x2003dde1
   b4e14:	000be115 	.word	0x000be115
   b4e18:	2003de48 	.word	0x2003de48

000b4e1c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4e1c:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b4e1e:	f101 0308 	add.w	r3, r1, #8
   b4e22:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4e26:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b4e28:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4e2c:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b4e2e:	460a      	mov	r2, r1
   b4e30:	4601      	mov	r1, r0
   b4e32:	4668      	mov	r0, sp
   b4e34:	f006 ff47 	bl	bbcc6 <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4e38:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b4e3c:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4e3e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b4e42:	b113      	cbz	r3, b4e4a <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b4e44:	2300      	movs	r3, #0
   b4e46:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.print("New BT Command: ");
   b4e4a:	f005 fe1b 	bl	baa84 <_Z16_fetch_usbserialv>
   b4e4e:	4911      	ldr	r1, [pc, #68]	; (b4e94 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>)
   b4e50:	f005 f898 	bl	b9f84 <_ZN5Print5printEPKc>
    Serial.println(btBuf);
   b4e54:	f005 fe16 	bl	baa84 <_Z16_fetch_usbserialv>
   b4e58:	4629      	mov	r1, r5
   b4e5a:	f005 f8a6 	bl	b9faa <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b4e5e:	2201      	movs	r2, #1
   b4e60:	4611      	mov	r1, r2
   b4e62:	4628      	mov	r0, r5
   b4e64:	f7ff fd46 	bl	b48f4 <_Z14processCommandPKchb>
    if(logMessages){
   b4e68:	4b0b      	ldr	r3, [pc, #44]	; (b4e98 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   b4e6a:	781b      	ldrb	r3, [r3, #0]
   b4e6c:	b183      	cbz	r3, b4e90 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>
   b4e6e:	480b      	ldr	r0, [pc, #44]	; (b4e9c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4e70:	7c03      	ldrb	r3, [r0, #16]
   b4e72:	b92b      	cbnz	r3, b4e80 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>
   b4e74:	490a      	ldr	r1, [pc, #40]	; (b4ea0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84>)
   b4e76:	f244 2202 	movw	r2, #16898	; 0x4202
   b4e7a:	3010      	adds	r0, #16
   b4e7c:	f7ff fa90 	bl	b43a0 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b4e80:	4908      	ldr	r1, [pc, #32]	; (b4ea4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   b4e82:	4806      	ldr	r0, [pc, #24]	; (b4e9c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
   b4e84:	462a      	mov	r2, r5
   b4e86:	f7ff f9fb 	bl	b4280 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4e8a:	4807      	ldr	r0, [pc, #28]	; (b4ea8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b4e8c:	f001 f9c0 	bl	b6210 <_ZN7FatFile5closeEv>
}
   b4e90:	46bd      	mov	sp, r7
   b4e92:	bdb0      	pop	{r4, r5, r7, pc}
   b4e94:	000be135 	.word	0x000be135
   b4e98:	2003de6c 	.word	0x2003de6c
   b4e9c:	2003de38 	.word	0x2003de38
   b4ea0:	2003dde1 	.word	0x2003dde1
   b4ea4:	000be146 	.word	0x000be146
   b4ea8:	2003de48 	.word	0x2003de48

000b4eac <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b4eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b4eb0:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b4fa0 <_Z11XBeeHandlerv+0xf4>
        if(logMessages){
   b4eb4:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b4fa4 <_Z11XBeeHandlerv+0xf8>
   b4eb8:	4d35      	ldr	r5, [pc, #212]	; (b4f90 <_Z11XBeeHandlerv+0xe4>)
void XBeeHandler(){  
   b4eba:	b089      	sub	sp, #36	; 0x24
   b4ebc:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b4ebe:	f006 f85f 	bl	baf80 <_Z22__fetch_global_Serial1v>
   b4ec2:	6803      	ldr	r3, [r0, #0]
   b4ec4:	691b      	ldr	r3, [r3, #16]
   b4ec6:	4798      	blx	r3
   b4ec8:	2800      	cmp	r0, #0
   b4eca:	d05c      	beq.n	b4f86 <_Z11XBeeHandlerv+0xda>
        String data = Serial1.readStringUntil('\n');
   b4ecc:	f006 f858 	bl	baf80 <_Z22__fetch_global_Serial1v>
   b4ed0:	220a      	movs	r2, #10
   b4ed2:	4601      	mov	r1, r0
   b4ed4:	4638      	mov	r0, r7
   b4ed6:	f005 f8d7 	bl	ba088 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b4eda:	68bb      	ldr	r3, [r7, #8]
   b4edc:	3307      	adds	r3, #7
   b4ede:	f023 0307 	bic.w	r3, r3, #7
    }
   b4ee2:	466e      	mov	r6, sp
        char buffer[data.length()];
   b4ee4:	ebad 0d03 	sub.w	sp, sp, r3
   b4ee8:	46ea      	mov	sl, sp
   b4eea:	2300      	movs	r3, #0
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b4eec:	68b9      	ldr	r1, [r7, #8]
   b4eee:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b4ef2:	458b      	cmp	fp, r1
   b4ef4:	f103 0401 	add.w	r4, r3, #1
   b4ef8:	d207      	bcs.n	b4f0a <_Z11XBeeHandlerv+0x5e>
   b4efa:	4659      	mov	r1, fp
   b4efc:	4638      	mov	r0, r7
   b4efe:	f002 fd09 	bl	b7914 <_ZNK6String6charAtEj>
   b4f02:	4623      	mov	r3, r4
   b4f04:	f80a 000b 	strb.w	r0, [sl, fp]
   b4f08:	e7f0      	b.n	b4eec <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b4f0a:	2901      	cmp	r1, #1
   b4f0c:	d90a      	bls.n	b4f24 <_Z11XBeeHandlerv+0x78>
   b4f0e:	3901      	subs	r1, #1
   b4f10:	4638      	mov	r0, r7
   b4f12:	f002 fcff 	bl	b7914 <_ZNK6String6charAtEj>
   b4f16:	280d      	cmp	r0, #13
   b4f18:	bf01      	itttt	eq
   b4f1a:	68bb      	ldreq	r3, [r7, #8]
   b4f1c:	4453      	addeq	r3, sl
   b4f1e:	2200      	moveq	r2, #0
   b4f20:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        processCommand(buffer,2,true);
   b4f24:	2201      	movs	r2, #1
   b4f26:	2102      	movs	r1, #2
   b4f28:	4650      	mov	r0, sl
   b4f2a:	f7ff fce3 	bl	b48f4 <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   b4f2e:	f005 fda9 	bl	baa84 <_Z16_fetch_usbserialv>
   b4f32:	4641      	mov	r1, r8
   b4f34:	f005 f839 	bl	b9faa <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b4f38:	f005 fda4 	bl	baa84 <_Z16_fetch_usbserialv>
   b4f3c:	6839      	ldr	r1, [r7, #0]
   b4f3e:	f005 f834 	bl	b9faa <_ZN5Print7printlnEPKc>
        if(logMessages){
   b4f42:	f899 3000 	ldrb.w	r3, [r9]
   b4f46:	b1cb      	cbz	r3, b4f7c <_Z11XBeeHandlerv+0xd0>
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4f48:	7c2b      	ldrb	r3, [r5, #16]
   b4f4a:	b92b      	cbnz	r3, b4f58 <_Z11XBeeHandlerv+0xac>
   b4f4c:	4911      	ldr	r1, [pc, #68]	; (b4f94 <_Z11XBeeHandlerv+0xe8>)
   b4f4e:	4812      	ldr	r0, [pc, #72]	; (b4f98 <_Z11XBeeHandlerv+0xec>)
   b4f50:	f244 2202 	movw	r2, #16898	; 0x4202
   b4f54:	f7ff fa24 	bl	b43a0 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b4f58:	4639      	mov	r1, r7
   b4f5a:	f107 0010 	add.w	r0, r7, #16
   b4f5e:	f002 fc6d 	bl	b783c <_ZN6StringC1ERKS_>
   b4f62:	490e      	ldr	r1, [pc, #56]	; (b4f9c <_Z11XBeeHandlerv+0xf0>)
   b4f64:	f107 0210 	add.w	r2, r7, #16
   b4f68:	4628      	mov	r0, r5
   b4f6a:	f7ff f989 	bl	b4280 <_ZN5Print8printlnfEPKcz>
   b4f6e:	f107 0010 	add.w	r0, r7, #16
   b4f72:	f002 fbcd 	bl	b7710 <_ZN6StringD1Ev>
            logFile.close();
   b4f76:	4808      	ldr	r0, [pc, #32]	; (b4f98 <_Z11XBeeHandlerv+0xec>)
   b4f78:	f001 f94a 	bl	b6210 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b4f7c:	4638      	mov	r0, r7
   b4f7e:	f002 fbc7 	bl	b7710 <_ZN6StringD1Ev>
   b4f82:	46b5      	mov	sp, r6
    while(Serial1.available()){
   b4f84:	e79b      	b.n	b4ebe <_Z11XBeeHandlerv+0x12>
}
   b4f86:	3724      	adds	r7, #36	; 0x24
   b4f88:	46bd      	mov	sp, r7
   b4f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4f8e:	bf00      	nop
   b4f90:	2003de38 	.word	0x2003de38
   b4f94:	2003dde1 	.word	0x2003dde1
   b4f98:	2003de48 	.word	0x2003de48
   b4f9c:	000be178 	.word	0x000be178
   b4fa0:	000be166 	.word	0x000be166
   b4fa4:	2003de6c 	.word	0x2003de6c

000b4fa8 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b4fa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4fac:	e9d0 8900 	ldrd	r8, r9, [r0]
   b4fb0:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
   b4fb2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4fb6:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
   b4fba:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   b4fbe:	4607      	mov	r7, r0
   b4fc0:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4fc2:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   b4fc6:	d102      	bne.n	b4fce <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b4fc8:	4820      	ldr	r0, [pc, #128]	; (b504c <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
   b4fca:	f006 f83b 	bl	bb044 <_ZSt20__throw_length_errorPKc>
   b4fce:	2c01      	cmp	r4, #1
   b4fd0:	4622      	mov	r2, r4
   b4fd2:	bf38      	it	cc
   b4fd4:	2201      	movcc	r2, #1
   b4fd6:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b4fd8:	eba1 0508 	sub.w	r5, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4fdc:	d231      	bcs.n	b5042 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4fde:	b394      	cbz	r4, b5046 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
   b4fe0:	429c      	cmp	r4, r3
   b4fe2:	bf28      	it	cs
   b4fe4:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4fe6:	00e0      	lsls	r0, r4, #3
   b4fe8:	f7ff f855 	bl	b4096 <_Znwj>
   b4fec:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4fee:	1973      	adds	r3, r6, r5
   b4ff0:	bf1c      	itt	ne
   b4ff2:	e9db 0100 	ldrdne	r0, r1, [fp]
   b4ff6:	e9c3 0100 	strdne	r0, r1, [r3]
      if (__count > 0)
   b4ffa:	2d00      	cmp	r5, #0
   b4ffc:	dd04      	ble.n	b5008 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x60>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b4ffe:	462a      	mov	r2, r5
   b5000:	4641      	mov	r1, r8
   b5002:	4630      	mov	r0, r6
   b5004:	f006 fe6d 	bl	bbce2 <memmove>
      ptrdiff_t __count = __last - __first;
   b5008:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
   b500c:	3508      	adds	r5, #8
      if (__count > 0)
   b500e:	f1b9 0f00 	cmp.w	r9, #0
   b5012:	4435      	add	r5, r6
   b5014:	dd04      	ble.n	b5020 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b5016:	464a      	mov	r2, r9
   b5018:	4651      	mov	r1, sl
   b501a:	4628      	mov	r0, r5
   b501c:	f006 fe53 	bl	bbcc6 <memcpy>
      return __result + __count;
   b5020:	444d      	add	r5, r9
	if (__p)
   b5022:	f1b8 0f00 	cmp.w	r8, #0
   b5026:	d005      	beq.n	b5034 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
   b5028:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b502a:	4640      	mov	r0, r8
   b502c:	eba1 0108 	sub.w	r1, r1, r8
   b5030:	f7ff f835 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5034:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   b5038:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b503c:	60bc      	str	r4, [r7, #8]
    }
   b503e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5042:	461c      	mov	r4, r3
   b5044:	e7cf      	b.n	b4fe6 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5046:	4626      	mov	r6, r4
   b5048:	e7d1      	b.n	b4fee <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
   b504a:	bf00      	nop
   b504c:	000bdf15 	.word	0x000bdf15

000b5050 <_Z7BLEScani>:
void BLEScan(int BotNumber){
   b5050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5054:	b099      	sub	sp, #100	; 0x64
   b5056:	4605      	mov	r5, r0
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   b5058:	f003 f960 	bl	b831c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b505c:	4960      	ldr	r1, [pc, #384]	; (b51e0 <_Z7BLEScani+0x190>)
   b505e:	2214      	movs	r2, #20
   b5060:	f003 fa36 	bl	b84d0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
	if (count > 0) {
   b5064:	4606      	mov	r6, r0
   b5066:	2800      	cmp	r0, #0
   b5068:	f000 80b6 	beq.w	b51d8 <_Z7BLEScani+0x188>
    const BleAddress& address() const {
        return address_;
    }

    const BleAdvertisingData& advertisingData() const {
        return advertisingData_;
   b506c:	4f5c      	ldr	r7, [pc, #368]	; (b51e0 <_Z7BLEScani+0x190>)
            if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   b506e:	f8df a1a8 	ldr.w	sl, [pc, #424]	; b5218 <_Z7BLEScani+0x1c8>
		for (uint8_t ii = 0; ii < count; ii++) {
   b5072:	2400      	movs	r4, #0
            scanResults->advertisingData().customData(BLECustomData,CUSTOM_DATA_LEN);
   b5074:	f107 0908 	add.w	r9, r7, #8
			BleUuid foundServiceUuid;
   b5078:	eb04 0bc4 	add.w	fp, r4, r4, lsl #3
   b507c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   b5080:	f10b 0808 	add.w	r8, fp, #8
   b5084:	a805      	add	r0, sp, #20
   b5086:	44b8      	add	r8, r7
   b5088:	f002 fdac 	bl	b7be4 <_ZN8particle7BleUuidC1Ev>
			size_t svcCount = scanResults[ii].advertisingData().serviceUUID(&foundServiceUuid, 1);
   b508c:	2201      	movs	r2, #1
   b508e:	a905      	add	r1, sp, #20
   b5090:	4640      	mov	r0, r8
   b5092:	f004 f8e5 	bl	b9260 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
            scanResults->advertisingData().customData(BLECustomData,CUSTOM_DATA_LEN);
   b5096:	2208      	movs	r2, #8
			size_t svcCount = scanResults[ii].advertisingData().serviceUUID(&foundServiceUuid, 1);
   b5098:	9001      	str	r0, [sp, #4]
            scanResults->advertisingData().customData(BLECustomData,CUSTOM_DATA_LEN);
   b509a:	a903      	add	r1, sp, #12
   b509c:	4648      	mov	r0, r9
   b509e:	f002 ff59 	bl	b7f54 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
            if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   b50a2:	9b01      	ldr	r3, [sp, #4]
   b50a4:	b32b      	cbz	r3, b50f2 <_Z7BLEScani+0xa2>
   b50a6:	4651      	mov	r1, sl
   b50a8:	a805      	add	r0, sp, #20
   b50aa:	f002 fdf6 	bl	b7c9a <_ZNK8particle7BleUuideqERKS0_>
   b50ae:	b300      	cbz	r0, b50f2 <_Z7BLEScani+0xa2>
                if(BotNumber == -2){
   b50b0:	1caa      	adds	r2, r5, #2
   b50b2:	d129      	bne.n	b5108 <_Z7BLEScani+0xb8>
      : _M_current(__i) { }
   b50b4:	4a4b      	ldr	r2, [pc, #300]	; (b51e4 <_Z7BLEScani+0x194>)
                        if(BLECustomData[0] == p.botNum){
   b50b6:	f89d 100c 	ldrb.w	r1, [sp, #12]
   b50ba:	f8d2 e004 	ldr.w	lr, [r2, #4]
   b50be:	6813      	ldr	r3, [r2, #0]
                    for(PairBot p: BLEPair){
   b50c0:	4573      	cmp	r3, lr
   b50c2:	d005      	beq.n	b50d0 <_Z7BLEScani+0x80>
                        if(BLECustomData[0] == p.botNum){
   b50c4:	f813 cb08 	ldrb.w	ip, [r3], #8
                            newBot = false;
   b50c8:	458c      	cmp	ip, r1
   b50ca:	bf08      	it	eq
   b50cc:	2000      	moveq	r0, #0
	return *this;
   b50ce:	e7f7      	b.n	b50c0 <_Z7BLEScani+0x70>
                    if(newBot){
   b50d0:	b178      	cbz	r0, b50f2 <_Z7BLEScani+0xa2>
                        NewBot.botNum = BLECustomData[0];
   b50d2:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b50d6:	6891      	ldr	r1, [r2, #8]
                        NewBot.rssi = scanResults->rssi();
   b50d8:	f997 0020 	ldrsb.w	r0, [r7, #32]
   b50dc:	9011      	str	r0, [sp, #68]	; 0x44
   b50de:	428b      	cmp	r3, r1
   b50e0:	d00c      	beq.n	b50fc <_Z7BLEScani+0xac>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b50e2:	b11b      	cbz	r3, b50ec <_Z7BLEScani+0x9c>
   b50e4:	4601      	mov	r1, r0
   b50e6:	9810      	ldr	r0, [sp, #64]	; 0x40
   b50e8:	e883 0003 	stmia.w	r3, {r0, r1}
	    ++this->_M_impl._M_finish;
   b50ec:	6853      	ldr	r3, [r2, #4]
   b50ee:	3308      	adds	r3, #8
   b50f0:	6053      	str	r3, [r2, #4]
		for (uint8_t ii = 0; ii < count; ii++) {
   b50f2:	3401      	adds	r4, #1
   b50f4:	b2e4      	uxtb	r4, r4
   b50f6:	42b4      	cmp	r4, r6
   b50f8:	d3be      	bcc.n	b5078 <_Z7BLEScani+0x28>
   b50fa:	e06d      	b.n	b51d8 <_Z7BLEScani+0x188>
	  _M_realloc_insert(end(), __x);
   b50fc:	4839      	ldr	r0, [pc, #228]	; (b51e4 <_Z7BLEScani+0x194>)
   b50fe:	aa10      	add	r2, sp, #64	; 0x40
   b5100:	4619      	mov	r1, r3
   b5102:	f7ff ff51 	bl	b4fa8 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   b5106:	e7f4      	b.n	b50f2 <_Z7BLEScani+0xa2>
                if(BotNumber == -1 || BotNumber == BLECustomData[0]){   //Check if a particular bot number was specified
   b5108:	1c6b      	adds	r3, r5, #1
   b510a:	d003      	beq.n	b5114 <_Z7BLEScani+0xc4>
   b510c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   b5110:	42ab      	cmp	r3, r5
   b5112:	d1ee      	bne.n	b50f2 <_Z7BLEScani+0xa2>
                    peer = BLE.connect(scanResults[ii].address());
   b5114:	f003 f902 	bl	b831c <_ZN8particle14BleLocalDevice11getInstanceEv>
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5118:	4d33      	ldr	r5, [pc, #204]	; (b51e8 <_Z7BLEScani+0x198>)
   b511a:	4601      	mov	r1, r0
   b511c:	2301      	movs	r3, #1
   b511e:	eb07 020b 	add.w	r2, r7, fp
   b5122:	a810      	add	r0, sp, #64	; 0x40
   b5124:	f004 fcd4 	bl	b9ad0 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   b5128:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b512a:	9c11      	ldr	r4, [sp, #68]	; 0x44
   b512c:	602b      	str	r3, [r5, #0]
	if (__tmp != _M_pi)
   b512e:	686b      	ldr	r3, [r5, #4]
   b5130:	429c      	cmp	r4, r3
   b5132:	d008      	beq.n	b5146 <_Z7BLEScani+0xf6>
	    if (__tmp != 0)
   b5134:	b114      	cbz	r4, b513c <_Z7BLEScani+0xec>
    { ++_M_use_count; }
   b5136:	6863      	ldr	r3, [r4, #4]
   b5138:	3301      	adds	r3, #1
   b513a:	6063      	str	r3, [r4, #4]
	    if (_M_pi != 0)
   b513c:	6868      	ldr	r0, [r5, #4]
   b513e:	b108      	cbz	r0, b5144 <_Z7BLEScani+0xf4>
	      _M_pi->_M_release();
   b5140:	f7ff f8ea 	bl	b4318 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b5144:	606c      	str	r4, [r5, #4]
   b5146:	a810      	add	r0, sp, #64	; 0x40
   b5148:	f003 fa39 	bl	b85be <_ZN8particle13BlePeerDeviceD1Ev>
				    if (peer.connected()) {
   b514c:	4826      	ldr	r0, [pc, #152]	; (b51e8 <_Z7BLEScani+0x198>)
   b514e:	f003 f857 	bl	b8200 <_ZNK8particle13BlePeerDevice9connectedEv>
   b5152:	4604      	mov	r4, r0
   b5154:	2800      	cmp	r0, #0
   b5156:	d03f      	beq.n	b51d8 <_Z7BLEScani+0x188>
                        meshPair = false;
   b5158:	4b24      	ldr	r3, [pc, #144]	; (b51ec <_Z7BLEScani+0x19c>)
      : _M_current(__i) { }
   b515a:	4d25      	ldr	r5, [pc, #148]	; (b51f0 <_Z7BLEScani+0x1a0>)
   b515c:	2200      	movs	r2, #0
   b515e:	701a      	strb	r2, [r3, #0]
                        scanResults[ii].advertisingData().customData(bufName, BLE_MAX_ADV_DATA_LEN);
   b5160:	a910      	add	r1, sp, #64	; 0x40
   b5162:	221f      	movs	r2, #31
   b5164:	4640      	mov	r0, r8
   b5166:	f002 fef5 	bl	b7f54 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
					    peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   b516a:	4a22      	ldr	r2, [pc, #136]	; (b51f4 <_Z7BLEScani+0x1a4>)
   b516c:	4922      	ldr	r1, [pc, #136]	; (b51f8 <_Z7BLEScani+0x1a8>)
   b516e:	481e      	ldr	r0, [pc, #120]	; (b51e8 <_Z7BLEScani+0x198>)
   b5170:	f004 f942 	bl	b93f8 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
					    peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
   b5174:	4a21      	ldr	r2, [pc, #132]	; (b51fc <_Z7BLEScani+0x1ac>)
   b5176:	4922      	ldr	r1, [pc, #136]	; (b5200 <_Z7BLEScani+0x1b0>)
   b5178:	481b      	ldr	r0, [pc, #108]	; (b51e8 <_Z7BLEScani+0x198>)
   b517a:	f004 f93d 	bl	b93f8 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        peer.getCharacteristicByUUID(peerOffloadCharacteristic, offldUuid);
   b517e:	4a21      	ldr	r2, [pc, #132]	; (b5204 <_Z7BLEScani+0x1b4>)
   b5180:	4921      	ldr	r1, [pc, #132]	; (b5208 <_Z7BLEScani+0x1b8>)
   b5182:	4819      	ldr	r0, [pc, #100]	; (b51e8 <_Z7BLEScani+0x198>)
   b5184:	f004 f938 	bl	b93f8 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
						Serial.printlnf("Connected to Bot %d",bufName[0]);
   b5188:	f005 fc7c 	bl	baa84 <_Z16_fetch_usbserialv>
   b518c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   b5190:	491e      	ldr	r1, [pc, #120]	; (b520c <_Z7BLEScani+0x1bc>)
   b5192:	f7ff f875 	bl	b4280 <_ZN5Print8printlnfEPKcz>
   b5196:	6868      	ldr	r0, [r5, #4]
                            if(bufName[0] == w.botNum){
   b5198:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   b519c:	682b      	ldr	r3, [r5, #0]
                        for(WaterBot w: WaterBots){
   b519e:	4298      	cmp	r0, r3
   b51a0:	d005      	beq.n	b51ae <_Z7BLEScani+0x15e>
                            if(bufName[0] == w.botNum){
   b51a2:	f813 1b18 	ldrb.w	r1, [r3], #24
                                newBot = false;
   b51a6:	4291      	cmp	r1, r2
   b51a8:	bf08      	it	eq
   b51aa:	2400      	moveq	r4, #0
	return *this;
   b51ac:	e7f7      	b.n	b519e <_Z7BLEScani+0x14e>
                        if(newBot){
   b51ae:	b19c      	cbz	r4, b51d8 <_Z7BLEScani+0x188>
                            Serial.println("Found a new water bot ID");
   b51b0:	f005 fc68 	bl	baa84 <_Z16_fetch_usbserialv>
   b51b4:	4916      	ldr	r1, [pc, #88]	; (b5210 <_Z7BLEScani+0x1c0>)
   b51b6:	f004 fef8 	bl	b9faa <_ZN5Print7printlnEPKc>
                            newWaterbot.BLEAvail = true;
   b51ba:	2301      	movs	r3, #1
   b51bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
                            WaterBots.push_back(newWaterbot);
   b51c0:	480b      	ldr	r0, [pc, #44]	; (b51f0 <_Z7BLEScani+0x1a0>)
                            newWaterbot.botNum = bufName[0];
   b51c2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   b51c6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                            WaterBots.push_back(newWaterbot);
   b51ca:	a90a      	add	r1, sp, #40	; 0x28
   b51cc:	f7ff fb7a 	bl	b48c4 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      { return __normal_iterator(_M_current - __n); }
   b51d0:	686b      	ldr	r3, [r5, #4]
                            BLEBot = &WaterBots.back();
   b51d2:	4a10      	ldr	r2, [pc, #64]	; (b5214 <_Z7BLEScani+0x1c4>)
   b51d4:	3b18      	subs	r3, #24
   b51d6:	6013      	str	r3, [r2, #0]
}
   b51d8:	b019      	add	sp, #100	; 0x64
   b51da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b51de:	bf00      	nop
   b51e0:	2003dee8 	.word	0x2003dee8
   b51e4:	2003dd08 	.word	0x2003dd08
   b51e8:	2003dec4 	.word	0x2003dec4
   b51ec:	2003de6d 	.word	0x2003de6d
   b51f0:	2003dd34 	.word	0x2003dd34
   b51f4:	2003dd68 	.word	0x2003dd68
   b51f8:	2003dedc 	.word	0x2003dedc
   b51fc:	2003dd54 	.word	0x2003dd54
   b5200:	2003ded4 	.word	0x2003ded4
   b5204:	2003dd80 	.word	0x2003dd80
   b5208:	2003decc 	.word	0x2003decc
   b520c:	000be199 	.word	0x000be199
   b5210:	000be0af 	.word	0x000be0af
   b5214:	2003dd04 	.word	0x2003dd04
   b5218:	2003dd40 	.word	0x2003dd40

000b521c <_Z13DataOffloaderv>:
void DataOffloader(){
   b521c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!logDir.open("/")) {
   b521e:	4940      	ldr	r1, [pc, #256]	; (b5320 <_Z13DataOffloaderv+0x104>)
   b5220:	4840      	ldr	r0, [pc, #256]	; (b5324 <_Z13DataOffloaderv+0x108>)
void DataOffloader(){
   b5222:	b087      	sub	sp, #28
    if (!logDir.open("/")) {
   b5224:	2200      	movs	r2, #0
   b5226:	f7ff f8bb 	bl	b43a0 <_ZN7FatFile4openEPKci>
   b522a:	2401      	movs	r4, #1
   b522c:	b948      	cbnz	r0, b5242 <_Z13DataOffloaderv+0x26>
        offloadingDone = true;
   b522e:	4b3e      	ldr	r3, [pc, #248]	; (b5328 <_Z13DataOffloaderv+0x10c>)
   b5230:	701c      	strb	r4, [r3, #0]
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   b5232:	f005 fc27 	bl	baa84 <_Z16_fetch_usbserialv>
   b5236:	493d      	ldr	r1, [pc, #244]	; (b532c <_Z13DataOffloaderv+0x110>)
}
   b5238:	b007      	add	sp, #28
   b523a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   b523e:	f004 beb4 	b.w	b9faa <_ZN5Print7printlnEPKc>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5242:	4e3b      	ldr	r6, [pc, #236]	; (b5330 <_Z13DataOffloaderv+0x114>)
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   b5244:	4d3b      	ldr	r5, [pc, #236]	; (b5334 <_Z13DataOffloaderv+0x118>)
   b5246:	e9d6 2300 	ldrd	r2, r3, [r6]
   b524a:	1a9b      	subs	r3, r3, r2
   b524c:	4a3a      	ldr	r2, [pc, #232]	; (b5338 <_Z13DataOffloaderv+0x11c>)
   b524e:	10db      	asrs	r3, r3, #3
   b5250:	4353      	muls	r3, r2
    while(OffloadingBot <= WaterBots.size()){
   b5252:	429c      	cmp	r4, r3
   b5254:	d859      	bhi.n	b530a <_Z13DataOffloaderv+0xee>
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   b5256:	466f      	mov	r7, sp
   b5258:	4a38      	ldr	r2, [pc, #224]	; (b533c <_Z13DataOffloaderv+0x120>)
   b525a:	4623      	mov	r3, r4
   b525c:	210a      	movs	r1, #10
   b525e:	4638      	mov	r0, r7
   b5260:	f002 f900 	bl	b7464 <snprintf>
        memcpy(OffloadBuf,OffloadCommand,10);
   b5264:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   b5268:	ab03      	add	r3, sp, #12
   b526a:	c303      	stmia	r3!, {r0, r1}
        peerRxCharacteristic.setValue(OffloadBuf,10);
   b526c:	a903      	add	r1, sp, #12
        memcpy(OffloadBuf,OffloadCommand,10);
   b526e:	801a      	strh	r2, [r3, #0]
        peerRxCharacteristic.setValue(OffloadBuf,10);
   b5270:	4833      	ldr	r0, [pc, #204]	; (b5340 <_Z13DataOffloaderv+0x124>)
   b5272:	2300      	movs	r3, #0
   b5274:	220a      	movs	r2, #10
   b5276:	f002 feeb 	bl	b8050 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   b527a:	f005 fc03 	bl	baa84 <_Z16_fetch_usbserialv>
   b527e:	682b      	ldr	r3, [r5, #0]
   b5280:	4930      	ldr	r1, [pc, #192]	; (b5344 <_Z13DataOffloaderv+0x128>)
   b5282:	781a      	ldrb	r2, [r3, #0]
   b5284:	f7fe fffc 	bl	b4280 <_ZN5Print8printlnfEPKcz>
        delay(1000);
   b5288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b528c:	f004 ffe6 	bl	ba25c <delay>
        if(BLEBot->botNum != OffloadingBot){
   b5290:	682b      	ldr	r3, [r5, #0]
   b5292:	781b      	ldrb	r3, [r3, #0]
   b5294:	42a3      	cmp	r3, r4
   b5296:	d01e      	beq.n	b52d6 <_Z13DataOffloaderv+0xba>
            Serial.printlnf("Currently connected to Bot %f, need to connect to Bot %d",BLEBot->botNum,OffloadingBot);
   b5298:	f005 fbf4 	bl	baa84 <_Z16_fetch_usbserialv>
   b529c:	682a      	ldr	r2, [r5, #0]
   b529e:	492a      	ldr	r1, [pc, #168]	; (b5348 <_Z13DataOffloaderv+0x12c>)
   b52a0:	7812      	ldrb	r2, [r2, #0]
   b52a2:	4623      	mov	r3, r4
   b52a4:	f7fe ffec 	bl	b4280 <_ZN5Print8printlnfEPKcz>
            BLE.disconnect();
   b52a8:	f003 f838 	bl	b831c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b52ac:	f003 fe36 	bl	b8f1c <_ZNK8particle14BleLocalDevice10disconnectEv>
            while(!BLE.connected()){
   b52b0:	f003 f834 	bl	b831c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b52b4:	f003 f8c2 	bl	b843c <_ZNK8particle14BleLocalDevice9connectedEv>
   b52b8:	b930      	cbnz	r0, b52c8 <_Z13DataOffloaderv+0xac>
                BLEScan(OffloadingBot);
   b52ba:	4620      	mov	r0, r4
   b52bc:	f7ff fec8 	bl	b5050 <_Z7BLEScani>
                delay(50);
   b52c0:	2032      	movs	r0, #50	; 0x32
   b52c2:	f004 ffcb 	bl	ba25c <delay>
            while(!BLE.connected()){
   b52c6:	e7f3      	b.n	b52b0 <_Z13DataOffloaderv+0x94>
            Serial.printlnf("Successfully connected to Bot %d", BLEBot->botNum);
   b52c8:	f005 fbdc 	bl	baa84 <_Z16_fetch_usbserialv>
   b52cc:	682b      	ldr	r3, [r5, #0]
   b52ce:	491f      	ldr	r1, [pc, #124]	; (b534c <_Z13DataOffloaderv+0x130>)
   b52d0:	781a      	ldrb	r2, [r3, #0]
   b52d2:	f7fe ffd5 	bl	b4280 <_ZN5Print8printlnfEPKcz>
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   b52d6:	f005 fbd5 	bl	baa84 <_Z16_fetch_usbserialv>
   b52da:	682b      	ldr	r3, [r5, #0]
   b52dc:	491c      	ldr	r1, [pc, #112]	; (b5350 <_Z13DataOffloaderv+0x134>)
   b52de:	781a      	ldrb	r2, [r3, #0]
        offloadingDone = false;
   b52e0:	4f11      	ldr	r7, [pc, #68]	; (b5328 <_Z13DataOffloaderv+0x10c>)
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   b52e2:	f7fe ffcd 	bl	b4280 <_ZN5Print8printlnfEPKcz>
        offloadingDone = false;
   b52e6:	2300      	movs	r3, #0
   b52e8:	703b      	strb	r3, [r7, #0]
        while(!offloadingDone) delay(100);
   b52ea:	2064      	movs	r0, #100	; 0x64
   b52ec:	f004 ffb6 	bl	ba25c <delay>
   b52f0:	783b      	ldrb	r3, [r7, #0]
   b52f2:	2b00      	cmp	r3, #0
   b52f4:	d0f9      	beq.n	b52ea <_Z13DataOffloaderv+0xce>
        Serial.printlnf("Finished transferring file from Bot %d",BLEBot->botNum);
   b52f6:	f005 fbc5 	bl	baa84 <_Z16_fetch_usbserialv>
   b52fa:	682b      	ldr	r3, [r5, #0]
   b52fc:	4915      	ldr	r1, [pc, #84]	; (b5354 <_Z13DataOffloaderv+0x138>)
   b52fe:	781a      	ldrb	r2, [r3, #0]
        OffloadingBot++;
   b5300:	3401      	adds	r4, #1
        Serial.printlnf("Finished transferring file from Bot %d",BLEBot->botNum);
   b5302:	f7fe ffbd 	bl	b4280 <_ZN5Print8printlnfEPKcz>
        OffloadingBot++;
   b5306:	b2e4      	uxtb	r4, r4
    while(OffloadingBot <= WaterBots.size()){
   b5308:	e79d      	b.n	b5246 <_Z13DataOffloaderv+0x2a>
   b530a:	4813      	ldr	r0, [pc, #76]	; (b5358 <_Z13DataOffloaderv+0x13c>)
    if(logDir.isOpen()) logDir.close();
   b530c:	7c03      	ldrb	r3, [r0, #16]
   b530e:	b12b      	cbz	r3, b531c <_Z13DataOffloaderv+0x100>
   b5310:	3010      	adds	r0, #16
}
   b5312:	b007      	add	sp, #28
   b5314:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    if(logDir.isOpen()) logDir.close();
   b5318:	f000 bf7a 	b.w	b6210 <_ZN7FatFile5closeEv>
}
   b531c:	b007      	add	sp, #28
   b531e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5320:	000be1ad 	.word	0x000be1ad
   b5324:	2003de14 	.word	0x2003de14
   b5328:	2003dec2 	.word	0x2003dec2
   b532c:	000be1af 	.word	0x000be1af
   b5330:	2003dd34 	.word	0x2003dd34
   b5334:	2003dd04 	.word	0x2003dd04
   b5338:	aaaaaaab 	.word	0xaaaaaaab
   b533c:	000be1f0 	.word	0x000be1f0
   b5340:	2003ded4 	.word	0x2003ded4
   b5344:	000be1f9 	.word	0x000be1f9
   b5348:	000be226 	.word	0x000be226
   b534c:	000be25f 	.word	0x000be25f
   b5350:	000be280 	.word	0x000be280
   b5354:	000be2a3 	.word	0x000be2a3
   b5358:	2003de04 	.word	0x2003de04

000b535c <loop>:
void loop() {
   b535c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(postStatus){
   b535e:	4d4b      	ldr	r5, [pc, #300]	; (b548c <loop+0x130>)
   b5360:	782b      	ldrb	r3, [r5, #0]
void loop() {
   b5362:	b08b      	sub	sp, #44	; 0x2c
    if(postStatus){
   b5364:	b1a3      	cbz	r3, b5390 <loop+0x34>
        if(ControlledBot != NULL) sprintf(statusStr,"CCABspcB%d",ControlledBot->botNum);
   b5366:	4b4a      	ldr	r3, [pc, #296]	; (b5490 <loop+0x134>)
   b5368:	681b      	ldr	r3, [r3, #0]
   b536a:	2b00      	cmp	r3, #0
   b536c:	d076      	beq.n	b545c <loop+0x100>
   b536e:	781a      	ldrb	r2, [r3, #0]
   b5370:	4948      	ldr	r1, [pc, #288]	; (b5494 <loop+0x138>)
   b5372:	a802      	add	r0, sp, #8
   b5374:	f002 f866 	bl	b7444 <sprintf>
        sendData(statusStr,0,true,true,statusTimeout);                                  
   b5378:	4c47      	ldr	r4, [pc, #284]	; (b5498 <loop+0x13c>)
   b537a:	7823      	ldrb	r3, [r4, #0]
   b537c:	9300      	str	r3, [sp, #0]
   b537e:	2301      	movs	r3, #1
   b5380:	461a      	mov	r2, r3
   b5382:	2100      	movs	r1, #0
   b5384:	a802      	add	r0, sp, #8
   b5386:	f7ff f9b1 	bl	b46ec <_Z8sendDataPKchbbb>
        postStatus = false;
   b538a:	2300      	movs	r3, #0
   b538c:	702b      	strb	r3, [r5, #0]
        statusTimeout = false;
   b538e:	7023      	strb	r3, [r4, #0]
    if (BLE.connected()) {
   b5390:	f002 ffc4 	bl	b831c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5394:	f003 f852 	bl	b843c <_ZNK8particle14BleLocalDevice9connectedEv>
   b5398:	4e40      	ldr	r6, [pc, #256]	; (b549c <loop+0x140>)
   b539a:	4601      	mov	r1, r0
   b539c:	2800      	cmp	r0, #0
   b539e:	d062      	beq.n	b5466 <loop+0x10a>
        if(digitalRead(OFFLOAD_BTN)) offloadingMode = true;
   b53a0:	2011      	movs	r0, #17
   b53a2:	f005 fda7 	bl	baef4 <digitalRead>
   b53a6:	b108      	cbz	r0, b53ac <loop+0x50>
   b53a8:	2301      	movs	r3, #1
   b53aa:	7033      	strb	r3, [r6, #0]
        sprintf(sendStr,"CCB1mtr%03d%03d",(int)(analogRead(JOYV_ADC)/22.75)%1000,(int)(analogRead(JOYV_ADC)/22.75)%1000);
   b53ac:	2012      	movs	r0, #18
   b53ae:	f005 fdb4 	bl	baf1a <analogRead>
   b53b2:	4607      	mov	r7, r0
   b53b4:	2012      	movs	r0, #18
   b53b6:	f005 fdb0 	bl	baf1a <analogRead>
   b53ba:	f006 f8ad 	bl	bb518 <__aeabi_i2d>
   b53be:	4b38      	ldr	r3, [pc, #224]	; (b54a0 <loop+0x144>)
   b53c0:	2200      	movs	r2, #0
   b53c2:	f006 fa3d 	bl	bb840 <__aeabi_ddiv>
   b53c6:	f006 fbab 	bl	bbb20 <__aeabi_d2iz>
   b53ca:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   b53ce:	fb90 f5f4 	sdiv	r5, r0, r4
   b53d2:	fb05 0514 	mls	r5, r5, r4, r0
   b53d6:	4638      	mov	r0, r7
   b53d8:	f006 f89e 	bl	bb518 <__aeabi_i2d>
   b53dc:	4b30      	ldr	r3, [pc, #192]	; (b54a0 <loop+0x144>)
   b53de:	2200      	movs	r2, #0
   b53e0:	f006 fa2e 	bl	bb840 <__aeabi_ddiv>
   b53e4:	f006 fb9c 	bl	bbb20 <__aeabi_d2iz>
   b53e8:	462b      	mov	r3, r5
   b53ea:	492e      	ldr	r1, [pc, #184]	; (b54a4 <loop+0x148>)
   b53ec:	fb90 f2f4 	sdiv	r2, r0, r4
   b53f0:	fb02 0214 	mls	r2, r2, r4, r0
   b53f4:	a802      	add	r0, sp, #8
   b53f6:	f002 f825 	bl	b7444 <sprintf>
        Serial.printlnf("Motor Speed: %03d",(int)(analogRead(JOYV_ADC)/22.75));
   b53fa:	f005 fb43 	bl	baa84 <_Z16_fetch_usbserialv>
   b53fe:	4604      	mov	r4, r0
   b5400:	2012      	movs	r0, #18
   b5402:	f005 fd8a 	bl	baf1a <analogRead>
   b5406:	f006 f887 	bl	bb518 <__aeabi_i2d>
   b540a:	4b25      	ldr	r3, [pc, #148]	; (b54a0 <loop+0x144>)
   b540c:	2200      	movs	r2, #0
   b540e:	f006 fa17 	bl	bb840 <__aeabi_ddiv>
   b5412:	f006 fb85 	bl	bbb20 <__aeabi_d2iz>
   b5416:	4924      	ldr	r1, [pc, #144]	; (b54a8 <loop+0x14c>)
   b5418:	4602      	mov	r2, r0
   b541a:	4620      	mov	r0, r4
   b541c:	f7fe ff30 	bl	b4280 <_ZN5Print8printlnfEPKcz>
        Serial.println(sendStr);
   b5420:	f005 fb30 	bl	baa84 <_Z16_fetch_usbserialv>
   b5424:	a902      	add	r1, sp, #8
   b5426:	f004 fdc0 	bl	b9faa <_ZN5Print7printlnEPKc>
        sendData(sendStr,0,true,false,false);
   b542a:	2300      	movs	r3, #0
   b542c:	4619      	mov	r1, r3
   b542e:	9300      	str	r3, [sp, #0]
   b5430:	2201      	movs	r2, #1
   b5432:	a802      	add	r0, sp, #8
   b5434:	f7ff f95a 	bl	b46ec <_Z8sendDataPKchbbb>
        digitalWrite(D7,HIGH);
   b5438:	2007      	movs	r0, #7
   b543a:	2101      	movs	r1, #1
   b543c:	f005 fd41 	bl	baec2 <digitalWrite>
        delay(250);
   b5440:	20fa      	movs	r0, #250	; 0xfa
   b5442:	f004 ff0b 	bl	ba25c <delay>
    if(offloadingMode) DataOffloader();
   b5446:	7833      	ldrb	r3, [r6, #0]
   b5448:	b10b      	cbz	r3, b544e <loop+0xf2>
   b544a:	f7ff fee7 	bl	b521c <_Z13DataOffloaderv>
    XBeeHandler();
   b544e:	f7ff fd2d 	bl	b4eac <_Z11XBeeHandlerv>
}
   b5452:	b00b      	add	sp, #44	; 0x2c
   b5454:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    XBeeLTEPairSet();
   b5458:	f7ff b9b2 	b.w	b47c0 <_Z14XBeeLTEPairSetv>
        else sprintf(statusStr,"CCABspcNB");
   b545c:	4913      	ldr	r1, [pc, #76]	; (b54ac <loop+0x150>)
   b545e:	a802      	add	r0, sp, #8
   b5460:	f006 fca9 	bl	bbdb6 <strcpy>
   b5464:	e788      	b.n	b5378 <loop+0x1c>
        digitalWrite(D7,LOW);
   b5466:	2007      	movs	r0, #7
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   b5468:	4c11      	ldr	r4, [pc, #68]	; (b54b0 <loop+0x154>)
        digitalWrite(D7,LOW);
   b546a:	f005 fd2a 	bl	baec2 <digitalWrite>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b546e:	f001 fcd9 	bl	b6e24 <HAL_Timer_Get_Milli_Seconds>
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   b5472:	6823      	ldr	r3, [r4, #0]
   b5474:	1ac0      	subs	r0, r0, r3
   b5476:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b547a:	d3e4      	bcc.n	b5446 <loop+0xea>
   b547c:	f001 fcd2 	bl	b6e24 <HAL_Timer_Get_Milli_Seconds>
    		lastScan = millis();
   b5480:	6020      	str	r0, [r4, #0]
    		BLEScan(-1);
   b5482:	f04f 30ff 	mov.w	r0, #4294967295
   b5486:	f7ff fde3 	bl	b5050 <_Z7BLEScani>
   b548a:	e7dc      	b.n	b5446 <loop+0xea>
   b548c:	2003dee4 	.word	0x2003dee4
   b5490:	2003dd14 	.word	0x2003dd14
   b5494:	000be2ca 	.word	0x000be2ca
   b5498:	2003e63c 	.word	0x2003e63c
   b549c:	2003dec3 	.word	0x2003dec3
   b54a0:	4036c000 	.word	0x4036c000
   b54a4:	000be2df 	.word	0x000be2df
   b54a8:	000be2ef 	.word	0x000be2ef
   b54ac:	000be2d5 	.word	0x000be2d5
   b54b0:	2003de00 	.word	0x2003de00

000b54b4 <_GLOBAL__sub_I_SystemMode>:
   b54b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        val_(val) {
   b54b6:	4b51      	ldr	r3, [pc, #324]	; (b55fc <_GLOBAL__sub_I_SystemMode+0x148>)
   b54b8:	4c51      	ldr	r4, [pc, #324]	; (b5600 <_GLOBAL__sub_I_SystemMode+0x14c>)
   b54ba:	2201      	movs	r2, #1
   b54bc:	701a      	strb	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b54be:	4b51      	ldr	r3, [pc, #324]	; (b5604 <_GLOBAL__sub_I_SystemMode+0x150>)
   b54c0:	2200      	movs	r2, #0
   b54c2:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b54c6:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b54ca:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b54cc:	2003      	movs	r0, #3
   b54ce:	f001 fed5 	bl	b727c <set_system_mode>
const BleUuid serviceUuid("b4206910-dc4b-5743-c8b1-92d0e75182b0");
   b54d2:	494d      	ldr	r1, [pc, #308]	; (b5608 <_GLOBAL__sub_I_SystemMode+0x154>)
   b54d4:	484d      	ldr	r0, [pc, #308]	; (b560c <_GLOBAL__sub_I_SystemMode+0x158>)
   b54d6:	f002 fc5f 	bl	b7d98 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("b4206912-dc4b-5743-c8b1-92d0e75182b0");
   b54da:	494d      	ldr	r1, [pc, #308]	; (b5610 <_GLOBAL__sub_I_SystemMode+0x15c>)
   b54dc:	484d      	ldr	r0, [pc, #308]	; (b5614 <_GLOBAL__sub_I_SystemMode+0x160>)
   b54de:	f002 fc5b 	bl	b7d98 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("b4206913-dc4b-5743-c8b1-92d0e75182b0");
   b54e2:	494d      	ldr	r1, [pc, #308]	; (b5618 <_GLOBAL__sub_I_SystemMode+0x164>)
   b54e4:	484d      	ldr	r0, [pc, #308]	; (b561c <_GLOBAL__sub_I_SystemMode+0x168>)
   b54e6:	f002 fc57 	bl	b7d98 <_ZN8particle7BleUuidC1EPKc>
const BleUuid offldUuid("b4206914-dc4b-5743-c8b1-92d0e75182b0");
   b54ea:	494d      	ldr	r1, [pc, #308]	; (b5620 <_GLOBAL__sub_I_SystemMode+0x16c>)
   b54ec:	484d      	ldr	r0, [pc, #308]	; (b5624 <_GLOBAL__sub_I_SystemMode+0x170>)
   b54ee:	f002 fc53 	bl	b7d98 <_ZN8particle7BleUuidC1EPKc>
   b54f2:	2514      	movs	r5, #20
            : rssi_(BLE_RSSI_INVALID) {
   b54f4:	267f      	movs	r6, #127	; 0x7f
   b54f6:	4620      	mov	r0, r4
   b54f8:	f002 fb69 	bl	b7bce <_ZN8particle10BleAddressC1Ev>
   b54fc:	f104 0008 	add.w	r0, r4, #8
   b5500:	f003 fb77 	bl	b8bf2 <_ZN8particle18BleAdvertisingDataC1Ev>
   b5504:	f104 0014 	add.w	r0, r4, #20
   b5508:	f003 fb73 	bl	b8bf2 <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_COUNT];
   b550c:	3d01      	subs	r5, #1
   b550e:	f884 6020 	strb.w	r6, [r4, #32]
   b5512:	f104 0424 	add.w	r4, r4, #36	; 0x24
   b5516:	d1ee      	bne.n	b54f6 <_GLOBAL__sub_I_SystemMode+0x42>
BleCharacteristic peerTxCharacteristic;
   b5518:	4843      	ldr	r0, [pc, #268]	; (b5628 <_GLOBAL__sub_I_SystemMode+0x174>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b551a:	4c44      	ldr	r4, [pc, #272]	; (b562c <_GLOBAL__sub_I_SystemMode+0x178>)
   b551c:	f002 fd72 	bl	b8004 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerRxCharacteristic;
   b5520:	4843      	ldr	r0, [pc, #268]	; (b5630 <_GLOBAL__sub_I_SystemMode+0x17c>)
   b5522:	f002 fd6f 	bl	b8004 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerOffloadCharacteristic;
   b5526:	4843      	ldr	r0, [pc, #268]	; (b5634 <_GLOBAL__sub_I_SystemMode+0x180>)
   b5528:	f002 fd6c 	bl	b8004 <_ZN8particle17BleCharacteristicC1Ev>
BlePeerDevice peer;
   b552c:	4842      	ldr	r0, [pc, #264]	; (b5638 <_GLOBAL__sub_I_SystemMode+0x184>)
   b552e:	f002 fe45 	bl	b81bc <_ZN8particle13BlePeerDeviceC1Ev>
   b5532:	7823      	ldrb	r3, [r4, #0]
   b5534:	f3bf 8f5b 	dmb	ish
   b5538:	07db      	lsls	r3, r3, #31
   b553a:	d40a      	bmi.n	b5552 <_GLOBAL__sub_I_SystemMode+0x9e>
   b553c:	4620      	mov	r0, r4
   b553e:	f7fe fdb0 	bl	b40a2 <__cxa_guard_acquire>
   b5542:	b130      	cbz	r0, b5552 <_GLOBAL__sub_I_SystemMode+0x9e>
   b5544:	483d      	ldr	r0, [pc, #244]	; (b563c <_GLOBAL__sub_I_SystemMode+0x188>)
   b5546:	2101      	movs	r1, #1
   b5548:	f002 f810 	bl	b756c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b554c:	4620      	mov	r0, r4
   b554e:	f7fe fdad 	bl	b40ac <__cxa_guard_release>
  explicit SdFat(SPIClass* spiPort) {
   b5552:	4b3b      	ldr	r3, [pc, #236]	; (b5640 <_GLOBAL__sub_I_SystemMode+0x18c>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5554:	4e3b      	ldr	r6, [pc, #236]	; (b5644 <_GLOBAL__sub_I_SystemMode+0x190>)
	    _M_manager = &_My_handler::_M_manager;
   b5556:	4d3c      	ldr	r5, [pc, #240]	; (b5648 <_GLOBAL__sub_I_SystemMode+0x194>)
Timer at1(5000,actionTimer5);
   b5558:	483c      	ldr	r0, [pc, #240]	; (b564c <_GLOBAL__sub_I_SystemMode+0x198>)
	    _M_invoker = &_My_handler::_M_invoke;
   b555a:	9603      	str	r6, [sp, #12]
   b555c:	2264      	movs	r2, #100	; 0x64
   b555e:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
  {
   b5562:	4a3b      	ldr	r2, [pc, #236]	; (b5650 <_GLOBAL__sub_I_SystemMode+0x19c>)
   b5564:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   b5568:	2201      	movs	r2, #1
   b556a:	2400      	movs	r4, #0
   b556c:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b5570:	4a32      	ldr	r2, [pc, #200]	; (b563c <_GLOBAL__sub_I_SystemMode+0x188>)
   b5572:	605c      	str	r4, [r3, #4]
   b5574:	f8c3 443c 	str.w	r4, [r3, #1084]	; 0x43c
   b5578:	f8c3 4468 	str.w	r4, [r3, #1128]	; 0x468
   b557c:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   b5580:	f8a3 447c 	strh.w	r4, [r3, #1148]	; 0x47c
   b5584:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
    Print() : write_error(0) {}
   b5588:	4b32      	ldr	r3, [pc, #200]	; (b5654 <_GLOBAL__sub_I_SystemMode+0x1a0>)
  File() {}
   b558a:	4a33      	ldr	r2, [pc, #204]	; (b5658 <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b558c:	605c      	str	r4, [r3, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b558e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5592:	6099      	str	r1, [r3, #8]
   b5594:	601a      	str	r2, [r3, #0]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5596:	611c      	str	r4, [r3, #16]
   b5598:	4b30      	ldr	r3, [pc, #192]	; (b565c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b559a:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b559e:	601a      	str	r2, [r3, #0]
   b55a0:	611c      	str	r4, [r3, #16]
   b55a2:	4b2f      	ldr	r3, [pc, #188]	; (b5660 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b55a4:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b55a8:	601a      	str	r2, [r3, #0]
   b55aa:	611c      	str	r4, [r3, #16]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b55ac:	4b2d      	ldr	r3, [pc, #180]	; (b5664 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b55ae:	e9c3 4400 	strd	r4, r4, [r3]
   b55b2:	609c      	str	r4, [r3, #8]
   b55b4:	4b2c      	ldr	r3, [pc, #176]	; (b5668 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b55b6:	e9c3 4400 	strd	r4, r4, [r3]
   b55ba:	609c      	str	r4, [r3, #8]
   b55bc:	4b2b      	ldr	r3, [pc, #172]	; (b566c <_GLOBAL__sub_I_SystemMode+0x1b8>)
   b55be:	e9c3 4400 	strd	r4, r4, [r3]
   b55c2:	609c      	str	r4, [r3, #8]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b55c4:	4b2a      	ldr	r3, [pc, #168]	; (b5670 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b55c6:	9300      	str	r3, [sp, #0]
   b55c8:	466a      	mov	r2, sp
   b55ca:	4623      	mov	r3, r4
   b55cc:	f241 3188 	movw	r1, #5000	; 0x1388
	    _M_manager = &_My_handler::_M_manager;
   b55d0:	9502      	str	r5, [sp, #8]
   b55d2:	f7fe feb5 	bl	b4340 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b55d6:	4668      	mov	r0, sp
   b55d8:	f7fe fe60 	bl	b429c <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b55dc:	4b25      	ldr	r3, [pc, #148]	; (b5674 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   b55de:	9300      	str	r3, [sp, #0]
Timer at2(60000,actionTimer60);
   b55e0:	466a      	mov	r2, sp
   b55e2:	4623      	mov	r3, r4
   b55e4:	f64e 2160 	movw	r1, #60000	; 0xea60
   b55e8:	4823      	ldr	r0, [pc, #140]	; (b5678 <_GLOBAL__sub_I_SystemMode+0x1c4>)
	    _M_manager = &_My_handler::_M_manager;
   b55ea:	e9cd 5602 	strd	r5, r6, [sp, #8]
   b55ee:	f7fe fea7 	bl	b4340 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b55f2:	4668      	mov	r0, sp
   b55f4:	f7fe fe52 	bl	b429c <_ZNSt14_Function_baseD1Ev>
   b55f8:	b004      	add	sp, #16
   b55fa:	bd70      	pop	{r4, r5, r6, pc}
   b55fc:	2003dd7c 	.word	0x2003dd7c
   b5600:	2003dee8 	.word	0x2003dee8
   b5604:	2003dd28 	.word	0x2003dd28
   b5608:	000be301 	.word	0x000be301
   b560c:	2003dd40 	.word	0x2003dd40
   b5610:	000be326 	.word	0x000be326
   b5614:	2003dd54 	.word	0x2003dd54
   b5618:	000be34b 	.word	0x000be34b
   b561c:	2003dd68 	.word	0x2003dd68
   b5620:	000be370 	.word	0x000be370
   b5624:	2003dd80 	.word	0x2003dd80
   b5628:	2003dedc 	.word	0x2003dedc
   b562c:	2003dcf8 	.word	0x2003dcf8
   b5630:	2003ded4 	.word	0x2003ded4
   b5634:	2003decc 	.word	0x2003decc
   b5638:	2003dec4 	.word	0x2003dec4
   b563c:	2003dcfc 	.word	0x2003dcfc
   b5640:	2003e1b8 	.word	0x2003e1b8
   b5644:	000b41dd 	.word	0x000b41dd
   b5648:	000b41c9 	.word	0x000b41c9
   b564c:	2003dd94 	.word	0x2003dd94
   b5650:	000be3a0 	.word	0x000be3a0
   b5654:	2003de70 	.word	0x2003de70
   b5658:	000be3c8 	.word	0x000be3c8
   b565c:	2003de38 	.word	0x2003de38
   b5660:	2003de04 	.word	0x2003de04
   b5664:	2003dd34 	.word	0x2003dd34
   b5668:	2003dd1c 	.word	0x2003dd1c
   b566c:	2003dd08 	.word	0x2003dd08
   b5670:	000b40d1 	.word	0x000b40d1
   b5674:	000b418d 	.word	0x000b418d
   b5678:	2003ddb0 	.word	0x2003ddb0

000b567c <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b567c:	2904      	cmp	r1, #4
   b567e:	d804      	bhi.n	b568a <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b5680:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b5684:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b5688:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b568a:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b568c:	bf9b      	ittet	ls
   b568e:	f101 31ff 	addls.w	r1, r1, #4294967295
   b5692:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b5696:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b5698:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b569a:	bf84      	itt	hi
   b569c:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b56a0:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b56a2:	4770      	bx	lr

000b56a4 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b56a4:	b510      	push	{r4, lr}
   b56a6:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b56a8:	3024      	adds	r0, #36	; 0x24
   b56aa:	f000 feed 	bl	b6488 <_ZN8FatCache4syncEv>
   b56ae:	b128      	cbz	r0, b56bc <_ZN9FatVolume9cacheSyncEv+0x18>
   b56b0:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b56b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b56b8:	f000 bee6 	b.w	b6488 <_ZN8FatCache4syncEv>
  }
   b56bc:	bd10      	pop	{r4, pc}

000b56be <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b56be:	1e41      	subs	r1, r0, #1
   b56c0:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b56c4:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b56c6:	0842      	lsrs	r2, r0, #1
   b56c8:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b56cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b56d0:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b56d4:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b56d6:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b56d8:	d1f5      	bne.n	b56c6 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b56da:	4770      	bx	lr

000b56dc <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b56dc:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b56de:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b56e0:	4604      	mov	r4, r0
   b56e2:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b56e4:	b923      	cbnz	r3, b56f0 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b56e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b56ea:	6889      	ldr	r1, [r1, #8]
   b56ec:	f000 bbc7 	b.w	b5e7e <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b56f0:	2224      	movs	r2, #36	; 0x24
   b56f2:	2100      	movs	r1, #0
   b56f4:	f006 fb0f 	bl	bbd16 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b56f8:	2310      	movs	r3, #16
  m_flags = F_READ;
   b56fa:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b56fc:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b56fe:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b5700:	68ab      	ldr	r3, [r5, #8]
   b5702:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b5704:	68eb      	ldr	r3, [r5, #12]
   b5706:	6223      	str	r3, [r4, #32]
}
   b5708:	bd38      	pop	{r3, r4, r5, pc}
	...

000b570c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b570c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5710:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b5712:	f810 3b01 	ldrb.w	r3, [r0], #1
   b5716:	2b20      	cmp	r3, #32
   b5718:	d0fa      	beq.n	b5710 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b571a:	4d6a      	ldr	r5, [pc, #424]	; (b58c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b571c:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b571e:	2400      	movs	r4, #0
    c = path[len];
   b5720:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b5722:	b1c3      	cbz	r3, b5756 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b5724:	2b2f      	cmp	r3, #47	; 0x2f
   b5726:	d016      	beq.n	b5756 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5728:	2b5c      	cmp	r3, #92	; 0x5c
   b572a:	d102      	bne.n	b5732 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b572c:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b572e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5732:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b5736:	b2c0      	uxtb	r0, r0
   b5738:	281d      	cmp	r0, #29
   b573a:	d803      	bhi.n	b5744 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b573c:	fa25 f000 	lsr.w	r0, r5, r0
   b5740:	07c0      	lsls	r0, r0, #31
   b5742:	d4f3      	bmi.n	b572c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b5744:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b5748:	283c      	cmp	r0, #60	; 0x3c
   b574a:	d0ef      	beq.n	b572c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b574c:	3b20      	subs	r3, #32
   b574e:	2b5e      	cmp	r3, #94	; 0x5e
   b5750:	d8ec      	bhi.n	b572c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b5752:	3401      	adds	r4, #1
    c = path[len];
   b5754:	e7e4      	b.n	b5720 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b5756:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b5758:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b575a:	4607      	mov	r7, r0
   b575c:	f810 5b01 	ldrb.w	r5, [r0], #1
   b5760:	2d20      	cmp	r5, #32
   b5762:	d0fa      	beq.n	b575a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b5764:	2d2f      	cmp	r5, #47	; 0x2f
   b5766:	d0f8      	beq.n	b575a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b5768:	6017      	str	r7, [r2, #0]
  while (len) {
   b576a:	b14c      	cbz	r4, b5780 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b576c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b5770:	2a2e      	cmp	r2, #46	; 0x2e
   b5772:	d001      	beq.n	b5778 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b5774:	2a20      	cmp	r2, #32
   b5776:	d101      	bne.n	b577c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b5778:	3c01      	subs	r4, #1
  while (len) {
   b577a:	e7f6      	b.n	b576a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b577c:	2cff      	cmp	r4, #255	; 0xff
   b577e:	dcd5      	bgt.n	b572c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b5780:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b5784:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b5788:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b578a:	f8c1 300d 	str.w	r3, [r1, #13]
   b578e:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b5790:	f04f 0800 	mov.w	r8, #0
   b5794:	f816 3008 	ldrb.w	r3, [r6, r8]
   b5798:	2b2e      	cmp	r3, #46	; 0x2e
   b579a:	d001      	beq.n	b57a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b579c:	2b20      	cmp	r3, #32
   b579e:	d102      	bne.n	b57a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b57a0:	f108 0801 	add.w	r8, r8, #1
   b57a4:	e7f6      	b.n	b5794 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b57a6:	fab8 f088 	clz	r0, r8
   b57aa:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b57ac:	1e65      	subs	r5, r4, #1
   b57ae:	1c6b      	adds	r3, r5, #1
   b57b0:	d002      	beq.n	b57b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b57b2:	5d73      	ldrb	r3, [r6, r5]
   b57b4:	2b2e      	cmp	r3, #46	; 0x2e
   b57b6:	d114      	bne.n	b57e2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b57b8:	f04f 0900 	mov.w	r9, #0
   b57bc:	2707      	movs	r7, #7
   b57be:	464a      	mov	r2, r9
   b57c0:	46ca      	mov	sl, r9
   b57c2:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b57c6:	45a0      	cmp	r8, r4
   b57c8:	da68      	bge.n	b589c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b57ca:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b57ce:	2b20      	cmp	r3, #32
   b57d0:	d003      	beq.n	b57da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b57d2:	2b2e      	cmp	r3, #46	; 0x2e
   b57d4:	d107      	bne.n	b57e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b57d6:	45a8      	cmp	r8, r5
   b57d8:	d012      	beq.n	b5800 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b57da:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b57dc:	f108 0801 	add.w	r8, r8, #1
   b57e0:	e7f1      	b.n	b57c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b57e2:	3d01      	subs	r5, #1
   b57e4:	e7e3      	b.n	b57ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b57e6:	2b22      	cmp	r3, #34	; 0x22
   b57e8:	d008      	beq.n	b57fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b57ea:	2b7c      	cmp	r3, #124	; 0x7c
   b57ec:	d006      	beq.n	b57fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b57ee:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b57f2:	f1bc 0f05 	cmp.w	ip, #5
   b57f6:	d80a      	bhi.n	b580e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b57f8:	2b2d      	cmp	r3, #45	; 0x2d
   b57fa:	d012      	beq.n	b5822 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b57fc:	45a8      	cmp	r8, r5
   b57fe:	d15b      	bne.n	b58b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b5800:	2f0a      	cmp	r7, #10
   b5802:	d04a      	beq.n	b589a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b5804:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b5806:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b5808:	f04f 0e10 	mov.w	lr, #16
   b580c:	e7e6      	b.n	b57dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b580e:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b5812:	f1bc 0f05 	cmp.w	ip, #5
   b5816:	d9f1      	bls.n	b57fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b5818:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b581c:	f1bc 0f02 	cmp.w	ip, #2
   b5820:	d9ec      	bls.n	b57fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b5822:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b5826:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b582a:	d8e7      	bhi.n	b57fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b582c:	45a8      	cmp	r8, r5
   b582e:	d0e7      	beq.n	b5800 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b5830:	42ba      	cmp	r2, r7
   b5832:	d830      	bhi.n	b5896 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b5834:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b5838:	f1bc 0f19 	cmp.w	ip, #25
   b583c:	d81a      	bhi.n	b5874 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b583e:	3b20      	subs	r3, #32
        lc |= bit;
   b5840:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b5844:	b2db      	uxtb	r3, r3
        lc |= bit;
   b5846:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b584a:	f102 0c01 	add.w	ip, r2, #1
   b584e:	fa5f fc8c 	uxtb.w	ip, ip
   b5852:	440a      	add	r2, r1
      if (i < 7) {
   b5854:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b5858:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b585a:	d801      	bhi.n	b5860 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b585c:	f881 c00c 	strb.w	ip, [r1, #12]
   b5860:	4662      	mov	r2, ip
   b5862:	e7bb      	b.n	b57dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b5864:	45a8      	cmp	r8, r5
   b5866:	dc18      	bgt.n	b589a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b5868:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b586a:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b586c:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b586e:	f04f 0e10 	mov.w	lr, #16
   b5872:	e7b2      	b.n	b57da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b5874:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b5878:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b587c:	bf98      	it	ls
   b587e:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b5882:	e7e2      	b.n	b584a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b5884:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b5886:	2001      	movs	r0, #1
   b5888:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b588a:	4419      	add	r1, r3
   b588c:	237e      	movs	r3, #126	; 0x7e
   b588e:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b5890:	2331      	movs	r3, #49	; 0x31
   b5892:	738b      	strb	r3, [r1, #14]
   b5894:	e74b      	b.n	b572e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b5896:	2f0a      	cmp	r7, #10
   b5898:	d1e4      	bne.n	b5864 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b589a:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b589c:	7b4b      	ldrb	r3, [r1, #13]
   b589e:	2b20      	cmp	r3, #32
   b58a0:	f43f af44 	beq.w	b572c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b58a4:	2800      	cmp	r0, #0
   b58a6:	d0ed      	beq.n	b5884 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b58a8:	ea1a 0f09 	tst.w	sl, r9
   b58ac:	bf18      	it	ne
   b58ae:	f04f 0902 	movne.w	r9, #2
   b58b2:	f881 9000 	strb.w	r9, [r1]
   b58b6:	e73a      	b.n	b572e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b58b8:	42ba      	cmp	r2, r7
   b58ba:	d8ec      	bhi.n	b5896 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b58bc:	2000      	movs	r0, #0
      c = '_';
   b58be:	235f      	movs	r3, #95	; 0x5f
   b58c0:	e7c3      	b.n	b584a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b58c2:	bf00      	nop
   b58c4:	31000101 	.word	0x31000101

000b58c8 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   b58c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b58cc:	b08a      	sub	sp, #40	; 0x28
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b58ce:	2300      	movs	r3, #0
   b58d0:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   b58d2:	7803      	ldrb	r3, [r0, #0]
   b58d4:	0719      	lsls	r1, r3, #28
bool FatFile::remove() {
   b58d6:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & F_WRITE)) {
   b58d8:	d50a      	bpl.n	b58f0 <_ZN7FatFile6removeEv+0x28>
   b58da:	7883      	ldrb	r3, [r0, #2]
   b58dc:	079a      	lsls	r2, r3, #30
   b58de:	d507      	bpl.n	b58f0 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b58e0:	6a01      	ldr	r1, [r0, #32]
   b58e2:	b939      	cbnz	r1, b58f4 <_ZN7FatFile6removeEv+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b58e4:	2101      	movs	r1, #1
   b58e6:	4620      	mov	r0, r4
   b58e8:	f000 faba 	bl	b5e60 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b58ec:	4605      	mov	r5, r0
   b58ee:	b938      	cbnz	r0, b5900 <_ZN7FatFile6removeEv+0x38>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   b58f0:	2000      	movs	r0, #0
   b58f2:	e048      	b.n	b5986 <_ZN7FatFile6removeEv+0xbe>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b58f4:	6880      	ldr	r0, [r0, #8]
   b58f6:	f000 feb8 	bl	b666a <_ZN9FatVolume9freeChainEm>
   b58fa:	2800      	cmp	r0, #0
   b58fc:	d1f2      	bne.n	b58e4 <_ZN7FatFile6removeEv+0x1c>
   b58fe:	e7f7      	b.n	b58f0 <_ZN7FatFile6removeEv+0x28>
  chksum = lfnChecksum(dir->name);
   b5900:	f7ff fedd 	bl	b56be <_ZN7FatFile11lfnChecksumEPh>
  dir->name[0] = DIR_NAME_DELETED;
   b5904:	27e5      	movs	r7, #229	; 0xe5
   b5906:	702f      	strb	r7, [r5, #0]
  m_attr = FILE_ATTR_CLOSED;
   b5908:	2300      	movs	r3, #0
  chksum = lfnChecksum(dir->name);
   b590a:	4606      	mov	r6, r0
  m_attr = FILE_ATTR_CLOSED;
   b590c:	7023      	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
   b590e:	68a0      	ldr	r0, [r4, #8]
   b5910:	f7ff fec8 	bl	b56a4 <_ZN9FatVolume9cacheSyncEv>
   b5914:	2800      	cmp	r0, #0
   b5916:	d0eb      	beq.n	b58f0 <_ZN7FatFile6removeEv+0x28>
  if (!isLFN()) {
   b5918:	78e3      	ldrb	r3, [r4, #3]
   b591a:	2b00      	cmp	r3, #0
   b591c:	d033      	beq.n	b5986 <_ZN7FatFile6removeEv+0xbe>
  if (!dirFile.openCluster(this)) {
   b591e:	4621      	mov	r1, r4
   b5920:	a801      	add	r0, sp, #4
   b5922:	f7ff fedb 	bl	b56dc <_ZN7FatFile11openClusterEPS_>
   b5926:	2800      	cmp	r0, #0
   b5928:	d0e2      	beq.n	b58f0 <_ZN7FatFile6removeEv+0x28>
   b592a:	2501      	movs	r5, #1
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   b592c:	78e3      	ldrb	r3, [r4, #3]
   b592e:	fa5f f885 	uxtb.w	r8, r5
   b5932:	4543      	cmp	r3, r8
   b5934:	d3dc      	bcc.n	b58f0 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b5936:	88a1      	ldrh	r1, [r4, #4]
   b5938:	1b49      	subs	r1, r1, r5
   b593a:	0149      	lsls	r1, r1, #5
   b593c:	a801      	add	r0, sp, #4
   b593e:	f000 fb84 	bl	b604a <_ZN7FatFile7seekSetEm>
   b5942:	2800      	cmp	r0, #0
   b5944:	d0d4      	beq.n	b58f0 <_ZN7FatFile6removeEv+0x28>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b5946:	2100      	movs	r1, #0
   b5948:	a801      	add	r0, sp, #4
   b594a:	f000 fb5f 	bl	b600c <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b594e:	2800      	cmp	r0, #0
   b5950:	d0ce      	beq.n	b58f0 <_ZN7FatFile6removeEv+0x28>
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b5952:	7ac3      	ldrb	r3, [r0, #11]
   b5954:	2b0f      	cmp	r3, #15
   b5956:	d1cb      	bne.n	b58f0 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b5958:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b595a:	f002 031f 	and.w	r3, r2, #31
   b595e:	4543      	cmp	r3, r8
   b5960:	d1c6      	bne.n	b58f0 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b5962:	7b43      	ldrb	r3, [r0, #13]
   b5964:	42b3      	cmp	r3, r6
   b5966:	d1c3      	bne.n	b58f0 <_ZN7FatFile6removeEv+0x28>
    ldir->ord = DIR_NAME_DELETED;
   b5968:	7007      	strb	r7, [r0, #0]
    m_vol->cacheDirty();
   b596a:	68a1      	ldr	r1, [r4, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b596c:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   b5970:	f043 0301 	orr.w	r3, r3, #1
   b5974:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   b5978:	0653      	lsls	r3, r2, #25
   b597a:	f105 0501 	add.w	r5, r5, #1
   b597e:	d5d5      	bpl.n	b592c <_ZN7FatFile6removeEv+0x64>
      if (!m_vol->cacheSync()) {
   b5980:	68a0      	ldr	r0, [r4, #8]
   b5982:	f7ff fe8f 	bl	b56a4 <_ZN9FatVolume9cacheSyncEv>
}
   b5986:	b00a      	add	sp, #40	; 0x28
   b5988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b598c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b598c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b5990:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b5994:	4606      	mov	r6, r0
   b5996:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b5998:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b599a:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b599c:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b59a0:	6861      	ldr	r1, [r4, #4]
   b59a2:	68a2      	ldr	r2, [r4, #8]
   b59a4:	186b      	adds	r3, r5, r1
   b59a6:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b59a8:	4411      	add	r1, r2
   b59aa:	4291      	cmp	r1, r2
   b59ac:	d006      	beq.n	b59bc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b59ae:	f812 0b01 	ldrb.w	r0, [r2], #1
   b59b2:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b59b6:	4043      	eors	r3, r0
   b59b8:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b59ba:	e7f6      	b.n	b59aa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b59bc:	f1b9 0f03 	cmp.w	r9, #3
   b59c0:	bf28      	it	cs
   b59c2:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b59c6:	f109 0204 	add.w	r2, r9, #4
   b59ca:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b59cc:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b59d0:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b59d2:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b59d4:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b59d6:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b59d8:	bf94      	ite	ls
   b59da:	3130      	addls	r1, #48	; 0x30
   b59dc:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b59de:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b59e0:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b59e2:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b59e6:	d1f1      	bne.n	b59cc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b59e8:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b59ec:	2100      	movs	r1, #0
   b59ee:	735f      	strb	r7, [r3, #13]
   b59f0:	4630      	mov	r0, r6
   b59f2:	f000 fb2a 	bl	b604a <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b59f6:	2101      	movs	r1, #1
   b59f8:	4630      	mov	r0, r6
   b59fa:	f000 fb07 	bl	b600c <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b59fe:	4601      	mov	r1, r0
   b5a00:	b928      	cbnz	r0, b5a0e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b5a02:	7870      	ldrb	r0, [r6, #1]
   b5a04:	fab0 f080 	clz	r0, r0
   b5a08:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b5a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b5a0e:	7803      	ldrb	r3, [r0, #0]
   b5a10:	b16b      	cbz	r3, b5a2e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b5a12:	7ac3      	ldrb	r3, [r0, #11]
   b5a14:	071b      	lsls	r3, r3, #28
   b5a16:	d4ee      	bmi.n	b59f6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b5a18:	220b      	movs	r2, #11
   b5a1a:	4640      	mov	r0, r8
   b5a1c:	f006 f943 	bl	bbca6 <memcmp>
   b5a20:	2800      	cmp	r0, #0
   b5a22:	d1e8      	bne.n	b59f6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b5a24:	3501      	adds	r5, #1
   b5a26:	b2ad      	uxth	r5, r5
   b5a28:	2d64      	cmp	r5, #100	; 0x64
   b5a2a:	d1b9      	bne.n	b59a0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b5a2c:	e7ed      	b.n	b5a0a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b5a2e:	2001      	movs	r0, #1
   b5a30:	e7eb      	b.n	b5a0a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b5a34 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b5a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5a38:	ed2d 8b02 	vpush	{d8}
   b5a3c:	b08b      	sub	sp, #44	; 0x2c
   b5a3e:	460d      	mov	r5, r1
   b5a40:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b5a42:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b5a44:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b5a46:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b5a4a:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b5a4c:	d105      	bne.n	b5a5a <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b5a4e:	2000      	movs	r0, #0
}
   b5a50:	b00b      	add	sp, #44	; 0x2c
   b5a52:	ecbd 8b02 	vpop	{d8}
   b5a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b5a5a:	9b07      	ldr	r3, [sp, #28]
   b5a5c:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b5a5e:	2b00      	cmp	r3, #0
   b5a60:	d1f5      	bne.n	b5a4e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b5a62:	6853      	ldr	r3, [r2, #4]
   b5a64:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b5a66:	7813      	ldrb	r3, [r2, #0]
   b5a68:	079c      	lsls	r4, r3, #30
   b5a6a:	bf1f      	itttt	ne
   b5a6c:	9b05      	ldrne	r3, [sp, #20]
   b5a6e:	330c      	addne	r3, #12
   b5a70:	220d      	movne	r2, #13
   b5a72:	fbb3 f3f2 	udivne	r3, r3, r2
   b5a76:	bf1a      	itte	ne
   b5a78:	3301      	addne	r3, #1
   b5a7a:	b2db      	uxtbne	r3, r3
   b5a7c:	2301      	moveq	r3, #1
    seekSet(0);
   b5a7e:	2100      	movs	r1, #0
   b5a80:	4628      	mov	r0, r5
   b5a82:	9303      	str	r3, [sp, #12]
   b5a84:	f000 fae1 	bl	b604a <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b5a88:	f107 030d 	add.w	r3, r7, #13
  }
   b5a8c:	f04f 0b00 	mov.w	fp, #0
   b5a90:	ee08 3a10 	vmov	s16, r3
   b5a94:	46da      	mov	sl, fp
   b5a96:	465c      	mov	r4, fp
   b5a98:	465e      	mov	r6, fp
   b5a9a:	f8cd b010 	str.w	fp, [sp, #16]
   b5a9e:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b5aa0:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b5aa2:	2101      	movs	r1, #1
   b5aa4:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b5aa6:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b5aaa:	f000 faaf 	bl	b600c <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b5aae:	4603      	mov	r3, r0
   b5ab0:	2800      	cmp	r0, #0
   b5ab2:	d171      	bne.n	b5b98 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b5ab4:	786b      	ldrb	r3, [r5, #1]
   b5ab6:	2b00      	cmp	r3, #0
   b5ab8:	d1c9      	bne.n	b5a4e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b5aba:	9b06      	ldr	r3, [sp, #24]
   b5abc:	059a      	lsls	r2, r3, #22
   b5abe:	d5c6      	bpl.n	b5a4e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b5ac0:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b5ac4:	3b01      	subs	r3, #1
   b5ac6:	2b01      	cmp	r3, #1
   b5ac8:	d8c1      	bhi.n	b5a4e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b5aca:	9b04      	ldr	r3, [sp, #16]
   b5acc:	2c00      	cmp	r4, #0
   b5ace:	bf08      	it	eq
   b5ad0:	4643      	moveq	r3, r8
   b5ad2:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b5ad4:	9b03      	ldr	r3, [sp, #12]
   b5ad6:	429c      	cmp	r4, r3
   b5ad8:	f0c0 80f1 	bcc.w	b5cbe <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b5adc:	f1b9 0f00 	cmp.w	r9, #0
   b5ae0:	f040 810a 	bne.w	b5cf8 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b5ae4:	9b04      	ldr	r3, [sp, #16]
   b5ae6:	4628      	mov	r0, r5
   b5ae8:	0159      	lsls	r1, r3, #5
   b5aea:	f000 faae 	bl	b604a <_ZN7FatFile7seekSetEm>
   b5aee:	2800      	cmp	r0, #0
   b5af0:	d0ad      	beq.n	b5a4e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b5af2:	9b03      	ldr	r3, [sp, #12]
   b5af4:	f103 39ff 	add.w	r9, r3, #4294967295
   b5af8:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b5afc:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b5afe:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b5b02:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b5b06:	2e00      	cmp	r6, #0
   b5b08:	f000 810d 	beq.w	b5d26 <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b5b0c:	2100      	movs	r1, #0
   b5b0e:	4628      	mov	r0, r5
   b5b10:	f000 fa7c 	bl	b600c <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b5b14:	4604      	mov	r4, r0
   b5b16:	2800      	cmp	r0, #0
   b5b18:	d099      	beq.n	b5a4e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b5b1a:	68aa      	ldr	r2, [r5, #8]
   b5b1c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b5b20:	454e      	cmp	r6, r9
   b5b22:	f043 0301 	orr.w	r3, r3, #1
   b5b26:	bf0c      	ite	eq
   b5b28:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b5b2c:	46b3      	movne	fp, r6
   b5b2e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b5b32:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b5b36:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b5b3a:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b5b3e:	f107 000d 	add.w	r0, r7, #13
   b5b42:	f7ff fdbc 	bl	b56be <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b5b46:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b5b4a:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b5b4c:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b5b50:	f00b 031f 	and.w	r3, fp, #31
   b5b54:	220d      	movs	r2, #13
   b5b56:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b5b58:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b5b5c:	4353      	muls	r3, r2
   b5b5e:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b5b60:	9905      	ldr	r1, [sp, #20]
   b5b62:	4299      	cmp	r1, r3
   b5b64:	f240 80d0 	bls.w	b5d08 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b5b68:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b5b6c:	2a04      	cmp	r2, #4
   b5b6e:	fa5f fe82 	uxtb.w	lr, r2
   b5b72:	f102 0001 	add.w	r0, r2, #1
   b5b76:	f200 80cd 	bhi.w	b5d14 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b5b7a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b5b7e:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b5b82:	280d      	cmp	r0, #13
   b5b84:	f103 0301 	add.w	r3, r3, #1
   b5b88:	4602      	mov	r2, r0
   b5b8a:	d1e9      	bne.n	b5b60 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b5b8c:	3e01      	subs	r6, #1
   b5b8e:	b2f6      	uxtb	r6, r6
   b5b90:	e7b9      	b.n	b5b06 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b5b92:	f04f 0901 	mov.w	r9, #1
   b5b96:	e783      	b.n	b5aa0 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b5b98:	7802      	ldrb	r2, [r0, #0]
   b5b9a:	2ae5      	cmp	r2, #229	; 0xe5
   b5b9c:	d000      	beq.n	b5ba0 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b5b9e:	b97a      	cbnz	r2, b5bc0 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b5ba0:	9904      	ldr	r1, [sp, #16]
   b5ba2:	2c00      	cmp	r4, #0
   b5ba4:	bf08      	it	eq
   b5ba6:	4641      	moveq	r1, r8
   b5ba8:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b5baa:	9903      	ldr	r1, [sp, #12]
   b5bac:	428c      	cmp	r4, r1
        freeFound++;
   b5bae:	bf3c      	itt	cc
   b5bb0:	3401      	addcc	r4, #1
   b5bb2:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b5bb4:	2a00      	cmp	r2, #0
   b5bb6:	d080      	beq.n	b5aba <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b5bb8:	2ae5      	cmp	r2, #229	; 0xe5
   b5bba:	d105      	bne.n	b5bc8 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b5bbc:	2600      	movs	r6, #0
   b5bbe:	e76f      	b.n	b5aa0 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b5bc0:	9903      	ldr	r1, [sp, #12]
   b5bc2:	428c      	cmp	r4, r1
   b5bc4:	bf38      	it	cc
   b5bc6:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b5bc8:	2a2e      	cmp	r2, #46	; 0x2e
   b5bca:	d0f7      	beq.n	b5bbc <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b5bcc:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b5bce:	290f      	cmp	r1, #15
   b5bd0:	d14a      	bne.n	b5c68 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b5bd2:	bb16      	cbnz	r6, b5c1a <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b5bd4:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b5bd8:	f43f af62 	beq.w	b5aa0 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b5bdc:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b5be0:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b5be4:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b5be6:	220d      	movs	r2, #13
   b5be8:	f10a 38ff 	add.w	r8, sl, #4294967295
   b5bec:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b5bf0:	9a05      	ldr	r2, [sp, #20]
   b5bf2:	4542      	cmp	r2, r8
   b5bf4:	d9e2      	bls.n	b5bbc <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b5bf6:	eba2 0208 	sub.w	r2, r2, r8
   b5bfa:	9208      	str	r2, [sp, #32]
   b5bfc:	2200      	movs	r2, #0
   b5bfe:	eb02 0108 	add.w	r1, r2, r8
   b5c02:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b5c04:	4618      	mov	r0, r3
   b5c06:	b2d1      	uxtb	r1, r2
   b5c08:	f7ff fd38 	bl	b567c <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b5c0c:	9908      	ldr	r1, [sp, #32]
   b5c0e:	428a      	cmp	r2, r1
   b5c10:	d10d      	bne.n	b5c2e <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b5c12:	2800      	cmp	r0, #0
   b5c14:	bf18      	it	ne
   b5c16:	2600      	movne	r6, #0
   b5c18:	e742      	b.n	b5aa0 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b5c1a:	f10a 3aff 	add.w	sl, sl, #4294967295
   b5c1e:	fa5f fa8a 	uxtb.w	sl, sl
   b5c22:	4552      	cmp	r2, sl
   b5c24:	d1ca      	bne.n	b5bbc <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b5c26:	7b5a      	ldrb	r2, [r3, #13]
   b5c28:	455a      	cmp	r2, fp
   b5c2a:	d0dc      	beq.n	b5be6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b5c2c:	e7c6      	b.n	b5bbc <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b5c2e:	28ff      	cmp	r0, #255	; 0xff
   b5c30:	d8c4      	bhi.n	b5bbc <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b5c32:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b5c36:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b5c3a:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b5c3c:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b5c3e:	bf9c      	itt	ls
   b5c40:	f10e 0020 	addls.w	r0, lr, #32
   b5c44:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b5c48:	4608      	mov	r0, r1
   b5c4a:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5c4c:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b5c4e:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b5c52:	f1bc 0f19 	cmp.w	ip, #25
   b5c56:	bf9c      	itt	ls
   b5c58:	3120      	addls	r1, #32
   b5c5a:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b5c5c:	4571      	cmp	r1, lr
   b5c5e:	d1ad      	bne.n	b5bbc <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b5c60:	3201      	adds	r2, #1
   b5c62:	2a0d      	cmp	r2, #13
   b5c64:	d1cb      	bne.n	b5bfe <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b5c66:	e71b      	b.n	b5aa0 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b5c68:	0708      	lsls	r0, r1, #28
   b5c6a:	d4a7      	bmi.n	b5bbc <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b5c6c:	b15e      	cbz	r6, b5c86 <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b5c6e:	f1ba 0f01 	cmp.w	sl, #1
   b5c72:	f47f aeec 	bne.w	b5a4e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b5c76:	4618      	mov	r0, r3
   b5c78:	f7ff fd21 	bl	b56be <_ZN7FatFile11lfnChecksumEPh>
   b5c7c:	4558      	cmp	r0, fp
   b5c7e:	f47f aee6 	bne.w	b5a4e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b5c82:	46b1      	mov	r9, r6
   b5c84:	e00e      	b.n	b5ca4 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b5c86:	ee18 1a10 	vmov	r1, s16
   b5c8a:	220b      	movs	r2, #11
   b5c8c:	4618      	mov	r0, r3
   b5c8e:	f006 f80a 	bl	bbca6 <memcmp>
   b5c92:	2800      	cmp	r0, #0
   b5c94:	f47f af04 	bne.w	b5aa0 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b5c98:	f897 9000 	ldrb.w	r9, [r7]
   b5c9c:	f019 0901 	ands.w	r9, r9, #1
   b5ca0:	f47f af77 	bne.w	b5b92 <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b5ca4:	9b06      	ldr	r3, [sp, #24]
   b5ca6:	0519      	lsls	r1, r3, #20
   b5ca8:	f53f aed1 	bmi.w	b5a4e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b5cac:	9b06      	ldr	r3, [sp, #24]
   b5cae:	9807      	ldr	r0, [sp, #28]
   b5cb0:	f8cd 9000 	str.w	r9, [sp]
   b5cb4:	4642      	mov	r2, r8
   b5cb6:	4629      	mov	r1, r5
   b5cb8:	f000 fa0a 	bl	b60d0 <_ZN7FatFile15openCachedEntryEPS_tih>
   b5cbc:	e6c8      	b.n	b5a50 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b5cbe:	2100      	movs	r1, #0
   b5cc0:	4628      	mov	r0, r5
   b5cc2:	f000 f9a3 	bl	b600c <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b5cc6:	b9a0      	cbnz	r0, b5cf2 <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b5cc8:	786b      	ldrb	r3, [r5, #1]
   b5cca:	2b00      	cmp	r3, #0
   b5ccc:	f47f aebf 	bne.w	b5a4e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b5cd0:	4628      	mov	r0, r5
   b5cd2:	f000 f887 	bl	b5de4 <_ZN7FatFile13addDirClusterEv>
   b5cd6:	2800      	cmp	r0, #0
   b5cd8:	f43f aeb9 	beq.w	b5a4e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b5cdc:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b5cde:	791b      	ldrb	r3, [r3, #4]
   b5ce0:	2b01      	cmp	r3, #1
   b5ce2:	f63f aefb 	bhi.w	b5adc <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b5ce6:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b5ce8:	3410      	adds	r4, #16
   b5cea:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b5cec:	42a3      	cmp	r3, r4
   b5cee:	d8ef      	bhi.n	b5cd0 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b5cf0:	e6f4      	b.n	b5adc <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b5cf2:	3401      	adds	r4, #1
   b5cf4:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b5cf6:	e6ed      	b.n	b5ad4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b5cf8:	4639      	mov	r1, r7
   b5cfa:	4628      	mov	r0, r5
   b5cfc:	f7ff fe46 	bl	b598c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b5d00:	2800      	cmp	r0, #0
   b5d02:	f47f aeef 	bne.w	b5ae4 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b5d06:	e6a2      	b.n	b5a4e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b5d08:	bf14      	ite	ne
   b5d0a:	f04f 31ff 	movne.w	r1, #4294967295
   b5d0e:	2100      	moveq	r1, #0
   b5d10:	b289      	uxth	r1, r1
   b5d12:	e72b      	b.n	b5b6c <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b5d14:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b5d18:	bf94      	ite	ls
   b5d1a:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b5d1e:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b5d22:	8091      	strh	r1, [r2, #4]
   b5d24:	e72d      	b.n	b5b82 <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b5d26:	4631      	mov	r1, r6
   b5d28:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b5d2a:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b5d2e:	f000 f96d 	bl	b600c <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b5d32:	4604      	mov	r4, r0
   b5d34:	2800      	cmp	r0, #0
   b5d36:	f43f ae8a 	beq.w	b5a4e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b5d3a:	2220      	movs	r2, #32
   b5d3c:	4631      	mov	r1, r6
   b5d3e:	f005 ffea 	bl	bbd16 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b5d42:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b5d46:	6023      	str	r3, [r4, #0]
   b5d48:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b5d4c:	6063      	str	r3, [r4, #4]
   b5d4e:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b5d52:	8123      	strh	r3, [r4, #8]
   b5d54:	7dfb      	ldrb	r3, [r7, #23]
   b5d56:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b5d58:	783b      	ldrb	r3, [r7, #0]
   b5d5a:	f003 0318 	and.w	r3, r3, #24
   b5d5e:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b5d60:	4b0f      	ldr	r3, [pc, #60]	; (b5da0 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b5d62:	681b      	ldr	r3, [r3, #0]
   b5d64:	b19b      	cbz	r3, b5d8e <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b5d66:	f104 010e 	add.w	r1, r4, #14
   b5d6a:	f104 0010 	add.w	r0, r4, #16
   b5d6e:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b5d70:	8a23      	ldrh	r3, [r4, #16]
   b5d72:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b5d74:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b5d76:	89e3      	ldrh	r3, [r4, #14]
   b5d78:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b5d7a:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b5d7c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b5d80:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b5d84:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b5d88:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
   b5d8c:	e78e      	b.n	b5cac <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b5d8e:	2321      	movs	r3, #33	; 0x21
   b5d90:	7423      	strb	r3, [r4, #16]
   b5d92:	2328      	movs	r3, #40	; 0x28
   b5d94:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b5d96:	2308      	movs	r3, #8
   b5d98:	73a6      	strb	r6, [r4, #14]
   b5d9a:	73e3      	strb	r3, [r4, #15]
   b5d9c:	e7e8      	b.n	b5d70 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b5d9e:	bf00      	nop
   b5da0:	2003e640 	.word	0x2003e640

000b5da4 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b5da4:	b538      	push	{r3, r4, r5, lr}
   b5da6:	4604      	mov	r4, r0
   b5da8:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b5daa:	2224      	movs	r2, #36	; 0x24
   b5dac:	2100      	movs	r1, #0
   b5dae:	f005 ffb2 	bl	bbd16 <memset>

  m_vol = vol;
   b5db2:	60a5      	str	r5, [r4, #8]
    return m_fatType;
   b5db4:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b5db6:	2b10      	cmp	r3, #16
   b5db8:	d003      	beq.n	b5dc2 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b5dba:	2b20      	cmp	r3, #32
   b5dbc:	d006      	beq.n	b5dcc <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b5dbe:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b5dc0:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b5dc2:	2320      	movs	r3, #32
  m_flags = F_READ;
   b5dc4:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b5dc6:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b5dc8:	70a0      	strb	r0, [r4, #2]
  return true;
   b5dca:	e7f9      	b.n	b5dc0 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b5dcc:	2340      	movs	r3, #64	; 0x40
   b5dce:	e7f9      	b.n	b5dc4 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b5dd0 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b5dd0:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b5dd2:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b5dd4:	f043 0304 	orr.w	r3, r3, #4
   b5dd8:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b5dda:	f100 0210 	add.w	r2, r0, #16
   b5dde:	6880      	ldr	r0, [r0, #8]
   b5de0:	f000 bc08 	b.w	b65f4 <_ZN9FatVolume15allocateClusterEmPm>

000b5de4 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b5de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b5de8:	7801      	ldrb	r1, [r0, #0]
   b5dea:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b5dee:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b5df0:	d003      	beq.n	b5dfa <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b5df2:	2600      	movs	r6, #0
}
   b5df4:	4630      	mov	r0, r6
   b5df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b5dfa:	6942      	ldr	r2, [r0, #20]
   b5dfc:	4b17      	ldr	r3, [pc, #92]	; (b5e5c <_ZN7FatFile13addDirClusterEv+0x78>)
   b5dfe:	429a      	cmp	r2, r3
   b5e00:	d2f7      	bcs.n	b5df2 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b5e02:	f7ff ffe5 	bl	b5dd0 <_ZN7FatFile10addClusterEv>
   b5e06:	4606      	mov	r6, r0
   b5e08:	2800      	cmp	r0, #0
   b5e0a:	d0f2      	beq.n	b5df2 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b5e0c:	6921      	ldr	r1, [r4, #16]
   b5e0e:	68a0      	ldr	r0, [r4, #8]
   b5e10:	f000 fb85 	bl	b651e <_ZNK9FatVolume17clusterFirstBlockEm>
   b5e14:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
   b5e16:	68a0      	ldr	r0, [r4, #8]
   b5e18:	2205      	movs	r2, #5
   b5e1a:	4639      	mov	r1, r7
   b5e1c:	3024      	adds	r0, #36	; 0x24
   b5e1e:	f000 fb5b 	bl	b64d8 <_ZN8FatCache4readEmh>
  if (!pc) {
   b5e22:	4680      	mov	r8, r0
   b5e24:	2800      	cmp	r0, #0
   b5e26:	d0e4      	beq.n	b5df2 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b5e28:	4629      	mov	r1, r5
   b5e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
   b5e2e:	f005 ff72 	bl	bbd16 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b5e32:	2501      	movs	r5, #1
   b5e34:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b5e36:	791a      	ldrb	r2, [r3, #4]
   b5e38:	42aa      	cmp	r2, r5
   b5e3a:	d909      	bls.n	b5e50 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b5e3c:	6818      	ldr	r0, [r3, #0]
   b5e3e:	4642      	mov	r2, r8
   b5e40:	19e9      	adds	r1, r5, r7
   b5e42:	f000 feb6 	bl	b6bb2 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b5e46:	2800      	cmp	r0, #0
   b5e48:	d0d3      	beq.n	b5df2 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b5e4a:	3501      	adds	r5, #1
   b5e4c:	b2ed      	uxtb	r5, r5
   b5e4e:	e7f1      	b.n	b5e34 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b5e50:	6963      	ldr	r3, [r4, #20]
   b5e52:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b5e56:	6163      	str	r3, [r4, #20]
  return true;
   b5e58:	e7cc      	b.n	b5df4 <_ZN7FatFile13addDirClusterEv+0x10>
   b5e5a:	bf00      	nop
   b5e5c:	001ffe00 	.word	0x001ffe00

000b5e60 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b5e60:	b510      	push	{r4, lr}
   b5e62:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b5e64:	6880      	ldr	r0, [r0, #8]
   b5e66:	460a      	mov	r2, r1
   b5e68:	3024      	adds	r0, #36	; 0x24
   b5e6a:	69a1      	ldr	r1, [r4, #24]
   b5e6c:	f000 fb34 	bl	b64d8 <_ZN8FatCache4readEmh>
  if (!pc) {
   b5e70:	b120      	cbz	r0, b5e7c <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b5e72:	88a3      	ldrh	r3, [r4, #4]
   b5e74:	f003 030f 	and.w	r3, r3, #15
   b5e78:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b5e7c:	bd10      	pop	{r4, pc}

000b5e7e <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b5e7e:	7803      	ldrb	r3, [r0, #0]
   b5e80:	b90b      	cbnz	r3, b5e86 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b5e82:	f7ff bf8f 	b.w	b5da4 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b5e86:	2000      	movs	r0, #0
   b5e88:	4770      	bx	lr

000b5e8a <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b5e8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b5e8e:	7803      	ldrb	r3, [r0, #0]
   b5e90:	4604      	mov	r4, r0
   b5e92:	4688      	mov	r8, r1
   b5e94:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b5e96:	2b00      	cmp	r3, #0
   b5e98:	d05d      	beq.n	b5f56 <_ZN7FatFile4readEPvj+0xcc>
   b5e9a:	7882      	ldrb	r2, [r0, #2]
   b5e9c:	07d1      	lsls	r1, r2, #31
   b5e9e:	d55a      	bpl.n	b5f56 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b5ea0:	071a      	lsls	r2, r3, #28
   b5ea2:	d52d      	bpl.n	b5f00 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b5ea4:	69c3      	ldr	r3, [r0, #28]
   b5ea6:	6942      	ldr	r2, [r0, #20]
   b5ea8:	1a9b      	subs	r3, r3, r2
   b5eaa:	429d      	cmp	r5, r3
   b5eac:	bf28      	it	cs
   b5eae:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b5eb0:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b5eb2:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5eb6:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b5eba:	2e00      	cmp	r6, #0
   b5ebc:	f000 808f 	beq.w	b5fde <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b5ec0:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b5ec2:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b5ec4:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b5ec6:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b5ec8:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b5ecc:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b5ed0:	d51f      	bpl.n	b5f12 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b5ed2:	6a00      	ldr	r0, [r0, #32]
   b5ed4:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b5ed6:	68a0      	ldr	r0, [r4, #8]
   b5ed8:	f1ba 0f00 	cmp.w	sl, #0
   b5edc:	d142      	bne.n	b5f64 <_ZN7FatFile4readEPvj+0xda>
   b5ede:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b5ee2:	d33f      	bcc.n	b5f64 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b5ee4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b5ee6:	4299      	cmp	r1, r3
   b5ee8:	d03c      	beq.n	b5f64 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b5eea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b5eee:	d252      	bcs.n	b5f96 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b5ef0:	6800      	ldr	r0, [r0, #0]
   b5ef2:	4642      	mov	r2, r8
   b5ef4:	f000 fdd4 	bl	b6aa0 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b5ef8:	b368      	cbz	r0, b5f56 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b5efa:	f44f 7700 	mov.w	r7, #512	; 0x200
   b5efe:	e044      	b.n	b5f8a <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b5f00:	069b      	lsls	r3, r3, #26
   b5f02:	d5d5      	bpl.n	b5eb0 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b5f04:	6883      	ldr	r3, [r0, #8]
   b5f06:	891a      	ldrh	r2, [r3, #8]
   b5f08:	6943      	ldr	r3, [r0, #20]
   b5f0a:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b5f0e:	b29b      	uxth	r3, r3
   b5f10:	e7cb      	b.n	b5eaa <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b5f12:	f890 9005 	ldrb.w	r9, [r0, #5]
   b5f16:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b5f1a:	f1ba 0f00 	cmp.w	sl, #0
   b5f1e:	d108      	bne.n	b5f32 <_ZN7FatFile4readEPvj+0xa8>
   b5f20:	f1b9 0f00 	cmp.w	r9, #0
   b5f24:	d105      	bne.n	b5f32 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b5f26:	b95b      	cbnz	r3, b5f40 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b5f28:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b5f2a:	bf4c      	ite	mi
   b5f2c:	6a03      	ldrmi	r3, [r0, #32]
   b5f2e:	6a23      	ldrpl	r3, [r4, #32]
   b5f30:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b5f32:	6921      	ldr	r1, [r4, #16]
   b5f34:	68a0      	ldr	r0, [r4, #8]
   b5f36:	f000 faf2 	bl	b651e <_ZNK9FatVolume17clusterFirstBlockEm>
   b5f3a:	eb09 0100 	add.w	r1, r9, r0
   b5f3e:	e7ca      	b.n	b5ed6 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5f40:	6921      	ldr	r1, [r4, #16]
   b5f42:	465a      	mov	r2, fp
   b5f44:	f000 faf1 	bl	b652a <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b5f48:	2800      	cmp	r0, #0
   b5f4a:	db04      	blt.n	b5f56 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b5f4c:	d1f1      	bne.n	b5f32 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b5f4e:	7823      	ldrb	r3, [r4, #0]
   b5f50:	f013 0f70 	tst.w	r3, #112	; 0x70
   b5f54:	d143      	bne.n	b5fde <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b5f56:	7863      	ldrb	r3, [r4, #1]
   b5f58:	f043 0302 	orr.w	r3, r3, #2
   b5f5c:	7063      	strb	r3, [r4, #1]
  return -1;
   b5f5e:	f04f 30ff 	mov.w	r0, #4294967295
   b5f62:	e03d      	b.n	b5fe0 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b5f64:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b5f68:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b5f6a:	f04f 0200 	mov.w	r2, #0
   b5f6e:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b5f72:	bf28      	it	cs
   b5f74:	4637      	movcs	r7, r6
   b5f76:	f000 faaf 	bl	b64d8 <_ZN8FatCache4readEmh>
      if (!pc) {
   b5f7a:	2800      	cmp	r0, #0
   b5f7c:	d0eb      	beq.n	b5f56 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b5f7e:	eb00 010a 	add.w	r1, r0, sl
   b5f82:	463a      	mov	r2, r7
   b5f84:	4640      	mov	r0, r8
   b5f86:	f005 fe9e 	bl	bbcc6 <memcpy>
    m_curPosition += n;
   b5f8a:	6963      	ldr	r3, [r4, #20]
   b5f8c:	443b      	add	r3, r7
    dst += n;
   b5f8e:	44b8      	add	r8, r7
    m_curPosition += n;
   b5f90:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b5f92:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b5f94:	e791      	b.n	b5eba <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b5f96:	7822      	ldrb	r2, [r4, #0]
   b5f98:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b5f9a:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b5f9e:	d406      	bmi.n	b5fae <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b5fa0:	7902      	ldrb	r2, [r0, #4]
   b5fa2:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b5fa6:	b2d2      	uxtb	r2, r2
   b5fa8:	4592      	cmp	sl, r2
   b5faa:	bf28      	it	cs
   b5fac:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5fae:	4299      	cmp	r1, r3
      n = 512*nb;
   b5fb0:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5fb4:	d208      	bcs.n	b5fc8 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b5fb6:	68a0      	ldr	r0, [r4, #8]
   b5fb8:	4653      	mov	r3, sl
   b5fba:	6800      	ldr	r0, [r0, #0]
   b5fbc:	4642      	mov	r2, r8
   b5fbe:	f000 fdb7 	bl	b6b30 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b5fc2:	2800      	cmp	r0, #0
   b5fc4:	d1e1      	bne.n	b5f8a <_ZN7FatFile4readEPvj+0x100>
   b5fc6:	e7c6      	b.n	b5f56 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5fc8:	4453      	add	r3, sl
   b5fca:	428b      	cmp	r3, r1
   b5fcc:	d9f3      	bls.n	b5fb6 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b5fce:	3024      	adds	r0, #36	; 0x24
   b5fd0:	9101      	str	r1, [sp, #4]
   b5fd2:	f000 fa59 	bl	b6488 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b5fd6:	9901      	ldr	r1, [sp, #4]
   b5fd8:	2800      	cmp	r0, #0
   b5fda:	d1ec      	bne.n	b5fb6 <_ZN7FatFile4readEPvj+0x12c>
   b5fdc:	e7bb      	b.n	b5f56 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b5fde:	1ba8      	subs	r0, r5, r6
}
   b5fe0:	b003      	add	sp, #12
   b5fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5fe6 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b5fe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b5fe8:	2201      	movs	r2, #1
   b5fea:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b5fee:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b5ff2:	4604      	mov	r4, r0
   b5ff4:	f7ff ff49 	bl	b5e8a <_ZN7FatFile4readEPvj>
   b5ff8:	2801      	cmp	r0, #1
   b5ffa:	bf0a      	itet	eq
   b5ffc:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b6000:	f04f 30ff 	movne.w	r0, #4294967295
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b6004:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b6008:	b002      	add	sp, #8
   b600a:	bd70      	pop	{r4, r5, r6, pc}

000b600c <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b600c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b600e:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b6010:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6014:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6016:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b601a:	d000      	beq.n	b601e <_ZN7FatFile12readDirCacheEb+0x12>
   b601c:	b999      	cbnz	r1, b6046 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b601e:	2201      	movs	r2, #1
   b6020:	f10d 0107 	add.w	r1, sp, #7
   b6024:	4620      	mov	r0, r4
   b6026:	f7ff ff30 	bl	b5e8a <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b602a:	b240      	sxtb	r0, r0
   b602c:	2801      	cmp	r0, #1
   b602e:	d002      	beq.n	b6036 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b6030:	2000      	movs	r0, #0
}
   b6032:	b003      	add	sp, #12
   b6034:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b6036:	6963      	ldr	r3, [r4, #20]
   b6038:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b603a:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b603c:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b603e:	3030      	adds	r0, #48	; 0x30
   b6040:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b6044:	e7f5      	b.n	b6032 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b6046:	3320      	adds	r3, #32
   b6048:	e7f7      	b.n	b603a <_ZN7FatFile12readDirCacheEb+0x2e>

000b604a <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b604a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b604e:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b6050:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b6052:	4604      	mov	r4, r0
   b6054:	460d      	mov	r5, r1
  if (!isOpen()) {
   b6056:	b162      	cbz	r2, b6072 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b6058:	6940      	ldr	r0, [r0, #20]
   b605a:	4288      	cmp	r0, r1
   b605c:	d002      	beq.n	b6064 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b605e:	b919      	cbnz	r1, b6068 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b6060:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b6062:	6165      	str	r5, [r4, #20]
    return true;
   b6064:	2001      	movs	r0, #1
   b6066:	e006      	b.n	b6076 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b6068:	0716      	lsls	r6, r2, #28
   b606a:	d506      	bpl.n	b607a <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b606c:	69e3      	ldr	r3, [r4, #28]
   b606e:	428b      	cmp	r3, r1
   b6070:	d20b      	bcs.n	b608a <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b6072:	6127      	str	r7, [r4, #16]
  return false;
   b6074:	2000      	movs	r0, #0
}
   b6076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b607a:	0691      	lsls	r1, r2, #26
   b607c:	d505      	bpl.n	b608a <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b607e:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b6080:	891b      	ldrh	r3, [r3, #8]
   b6082:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b6086:	d9ec      	bls.n	b6062 <_ZN7FatFile7seekSetEm+0x18>
   b6088:	e7f3      	b.n	b6072 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b608a:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b608e:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b6092:	1e43      	subs	r3, r0, #1
   b6094:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b6098:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b609a:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b609c:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b609e:	42b3      	cmp	r3, r6
   b60a0:	d800      	bhi.n	b60a4 <_ZN7FatFile7seekSetEm+0x5a>
   b60a2:	b998      	cbnz	r0, b60cc <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b60a4:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b60a6:	bf4c      	ite	mi
   b60a8:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b60ac:	6a23      	ldrpl	r3, [r4, #32]
   b60ae:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b60b0:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b60b4:	2e00      	cmp	r6, #0
   b60b6:	d0d4      	beq.n	b6062 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b60b8:	6921      	ldr	r1, [r4, #16]
   b60ba:	68a0      	ldr	r0, [r4, #8]
   b60bc:	4642      	mov	r2, r8
   b60be:	f000 fa34 	bl	b652a <_ZN9FatVolume6fatGetEmPm>
   b60c2:	2800      	cmp	r0, #0
   b60c4:	f106 36ff 	add.w	r6, r6, #4294967295
   b60c8:	dcf4      	bgt.n	b60b4 <_ZN7FatFile7seekSetEm+0x6a>
   b60ca:	e7d2      	b.n	b6072 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b60cc:	1af6      	subs	r6, r6, r3
   b60ce:	e7ef      	b.n	b60b0 <_ZN7FatFile7seekSetEm+0x66>

000b60d0 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b60d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b60d2:	460f      	mov	r7, r1
   b60d4:	4604      	mov	r4, r0
   b60d6:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b60d8:	2100      	movs	r1, #0
   b60da:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b60dc:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b60de:	f005 fe1a 	bl	bbd16 <memset>
  m_vol = dirFile->m_vol;
   b60e2:	68b8      	ldr	r0, [r7, #8]
   b60e4:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b60e6:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b60e8:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b60ec:	6a3b      	ldr	r3, [r7, #32]
   b60ee:	60e3      	str	r3, [r4, #12]
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b60f0:	016a      	lsls	r2, r5, #5
   b60f2:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b60f6:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b60fa:	071f      	lsls	r7, r3, #28
   b60fc:	d444      	bmi.n	b6188 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b60fe:	f003 0317 	and.w	r3, r3, #23
   b6102:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b6104:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b6108:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b610c:	bf04      	itt	eq
   b610e:	f043 0308 	orreq.w	r3, r3, #8
   b6112:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b6114:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b6118:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b611a:	f006 0303 	and.w	r3, r6, #3
   b611e:	2b01      	cmp	r3, #1
   b6120:	d02c      	beq.n	b617c <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b6122:	2b02      	cmp	r3, #2
   b6124:	d028      	beq.n	b6178 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b6126:	bb7b      	cbnz	r3, b6188 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b6128:	0571      	lsls	r1, r6, #21
   b612a:	d42d      	bmi.n	b6188 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b612c:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b612e:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b6130:	78a1      	ldrb	r1, [r4, #2]
   b6132:	078b      	lsls	r3, r1, #30
   b6134:	d504      	bpl.n	b6140 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b6136:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b6138:	06df      	lsls	r7, r3, #27
   b613a:	d425      	bmi.n	b6188 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b613c:	07dd      	lsls	r5, r3, #31
   b613e:	d423      	bmi.n	b6188 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b6140:	11b3      	asrs	r3, r6, #6
   b6142:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b6146:	f006 0508 	and.w	r5, r6, #8
   b614a:	432b      	orrs	r3, r5
   b614c:	430b      	orrs	r3, r1
   b614e:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b6150:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b6152:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b6154:	1883      	adds	r3, r0, r2
   b6156:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b615a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b615e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b6162:	0572      	lsls	r2, r6, #21
   b6164:	d513      	bpl.n	b618e <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b6166:	b959      	cbnz	r1, b6180 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b6168:	78a3      	ldrb	r3, [r4, #2]
   b616a:	f043 0304 	orr.w	r3, r3, #4
   b616e:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b6170:	0473      	lsls	r3, r6, #17
   b6172:	d410      	bmi.n	b6196 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b6174:	2001      	movs	r0, #1
}
   b6176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b6178:	2303      	movs	r3, #3
   b617a:	e7d8      	b.n	b612e <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b617c:	2302      	movs	r3, #2
   b617e:	e7d6      	b.n	b612e <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b6180:	f000 fa73 	bl	b666a <_ZN9FatVolume9freeChainEm>
   b6184:	2800      	cmp	r0, #0
   b6186:	d1ef      	bne.n	b6168 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b6188:	2000      	movs	r0, #0
   b618a:	7020      	strb	r0, [r4, #0]
  return false;
   b618c:	e7f3      	b.n	b6176 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b618e:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b6190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6192:	61e3      	str	r3, [r4, #28]
   b6194:	e7ec      	b.n	b6170 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b6196:	69e1      	ldr	r1, [r4, #28]
   b6198:	4620      	mov	r0, r4
   b619a:	f7ff ff56 	bl	b604a <_ZN7FatFile7seekSetEm>
   b619e:	2800      	cmp	r0, #0
   b61a0:	d1e8      	bne.n	b6174 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b61a2:	e7f1      	b.n	b6188 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b61a4 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b61a4:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b61a6:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b61a8:	4604      	mov	r4, r0
  if (!isOpen()) {
   b61aa:	b90b      	cbnz	r3, b61b0 <_ZN7FatFile4syncEv+0xc>
    return true;
   b61ac:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b61ae:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b61b0:	7883      	ldrb	r3, [r0, #2]
   b61b2:	075a      	lsls	r2, r3, #29
   b61b4:	d523      	bpl.n	b61fe <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b61b6:	2101      	movs	r1, #1
   b61b8:	f7ff fe52 	bl	b5e60 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b61bc:	4605      	mov	r5, r0
   b61be:	b928      	cbnz	r0, b61cc <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b61c0:	7863      	ldrb	r3, [r4, #1]
   b61c2:	f043 0301 	orr.w	r3, r3, #1
   b61c6:	7063      	strb	r3, [r4, #1]
  return false;
   b61c8:	2000      	movs	r0, #0
   b61ca:	e7f0      	b.n	b61ae <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b61cc:	7803      	ldrb	r3, [r0, #0]
   b61ce:	2be5      	cmp	r3, #229	; 0xe5
   b61d0:	d0f6      	beq.n	b61c0 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b61d2:	7823      	ldrb	r3, [r4, #0]
   b61d4:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b61d6:	bf44      	itt	mi
   b61d8:	69e3      	ldrmi	r3, [r4, #28]
   b61da:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b61dc:	6a23      	ldr	r3, [r4, #32]
   b61de:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b61e0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b61e2:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b61e4:	4b09      	ldr	r3, [pc, #36]	; (b620c <_ZN7FatFile4syncEv+0x68>)
   b61e6:	681b      	ldr	r3, [r3, #0]
   b61e8:	b12b      	cbz	r3, b61f6 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b61ea:	f100 0116 	add.w	r1, r0, #22
   b61ee:	3018      	adds	r0, #24
   b61f0:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b61f2:	8b2b      	ldrh	r3, [r5, #24]
   b61f4:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b61f6:	78a3      	ldrb	r3, [r4, #2]
   b61f8:	f023 0304 	bic.w	r3, r3, #4
   b61fc:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b61fe:	68a0      	ldr	r0, [r4, #8]
   b6200:	f7ff fa50 	bl	b56a4 <_ZN9FatVolume9cacheSyncEv>
   b6204:	2800      	cmp	r0, #0
   b6206:	d0db      	beq.n	b61c0 <_ZN7FatFile4syncEv+0x1c>
   b6208:	e7d0      	b.n	b61ac <_ZN7FatFile4syncEv+0x8>
   b620a:	bf00      	nop
   b620c:	2003e640 	.word	0x2003e640

000b6210 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b6210:	b510      	push	{r4, lr}
   b6212:	4604      	mov	r4, r0
  bool rtn = sync();
   b6214:	f7ff ffc6 	bl	b61a4 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b6218:	2300      	movs	r3, #0
   b621a:	7023      	strb	r3, [r4, #0]
}
   b621c:	bd10      	pop	{r4, pc}

000b621e <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b621e:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6220:	b093      	sub	sp, #76	; 0x4c
   b6222:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6224:	2300      	movs	r3, #0
   b6226:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b6228:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b622a:	9201      	str	r2, [sp, #4]
   b622c:	4606      	mov	r6, r0
   b622e:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b6230:	b113      	cbz	r3, b6238 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b6232:	2000      	movs	r0, #0
}
   b6234:	b013      	add	sp, #76	; 0x4c
   b6236:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b6238:	780b      	ldrb	r3, [r1, #0]
   b623a:	f013 0f70 	tst.w	r3, #112	; 0x70
   b623e:	d0f8      	beq.n	b6232 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b6240:	7813      	ldrb	r3, [r2, #0]
   b6242:	2b2f      	cmp	r3, #47	; 0x2f
   b6244:	d112      	bne.n	b626c <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b6246:	9a01      	ldr	r2, [sp, #4]
   b6248:	7813      	ldrb	r3, [r2, #0]
   b624a:	2b2f      	cmp	r3, #47	; 0x2f
   b624c:	d102      	bne.n	b6254 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b624e:	3201      	adds	r2, #1
   b6250:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b6252:	e7f8      	b.n	b6246 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b6254:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b6256:	b91b      	cbnz	r3, b6260 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b6258:	4630      	mov	r0, r6
   b625a:	f7ff fe10 	bl	b5e7e <_ZN7FatFile8openRootEP9FatVolume>
   b625e:	e7e9      	b.n	b6234 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b6260:	a809      	add	r0, sp, #36	; 0x24
   b6262:	f7ff fd9f 	bl	b5da4 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b6266:	2800      	cmp	r0, #0
   b6268:	d0e3      	beq.n	b6232 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b626a:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b626c:	9801      	ldr	r0, [sp, #4]
   b626e:	aa01      	add	r2, sp, #4
   b6270:	a903      	add	r1, sp, #12
   b6272:	f7ff fa4b 	bl	b570c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b6276:	2800      	cmp	r0, #0
   b6278:	d0db      	beq.n	b6232 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b627a:	9b01      	ldr	r3, [sp, #4]
   b627c:	781b      	ldrb	r3, [r3, #0]
   b627e:	b19b      	cbz	r3, b62a8 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b6280:	2300      	movs	r3, #0
   b6282:	aa03      	add	r2, sp, #12
   b6284:	4621      	mov	r1, r4
   b6286:	4630      	mov	r0, r6
   b6288:	f7ff fbd4 	bl	b5a34 <_ZN7FatFile4openEPS_P7fname_ti>
   b628c:	2800      	cmp	r0, #0
   b628e:	d0d0      	beq.n	b6232 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b6290:	4635      	mov	r5, r6
   b6292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6294:	ac09      	add	r4, sp, #36	; 0x24
   b6296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b629a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b629c:	682b      	ldr	r3, [r5, #0]
   b629e:	6023      	str	r3, [r4, #0]
    close();
   b62a0:	4630      	mov	r0, r6
   b62a2:	f7ff ffb5 	bl	b6210 <_ZN7FatFile5closeEv>
  while (1) {
   b62a6:	e7e0      	b.n	b626a <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b62a8:	463b      	mov	r3, r7
   b62aa:	aa03      	add	r2, sp, #12
   b62ac:	4621      	mov	r1, r4
   b62ae:	4630      	mov	r0, r6
   b62b0:	f7ff fbc0 	bl	b5a34 <_ZN7FatFile4openEPS_P7fname_ti>
   b62b4:	e7be      	b.n	b6234 <_ZN7FatFile4openEPS_PKci+0x16>

000b62b6 <_ZN7FatFile6removeEPS_PKc>:
bool FatFile::remove(FatFile* dirFile, const char* path) {
   b62b6:	b500      	push	{lr}
   b62b8:	b08b      	sub	sp, #44	; 0x2c
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b62ba:	2300      	movs	r3, #0
   b62bc:	460a      	mov	r2, r1
   b62be:	9301      	str	r3, [sp, #4]
  if (!file.open(dirFile, path, O_WRONLY)) {
   b62c0:	4601      	mov	r1, r0
   b62c2:	2301      	movs	r3, #1
   b62c4:	a801      	add	r0, sp, #4
   b62c6:	f7ff ffaa 	bl	b621e <_ZN7FatFile4openEPS_PKci>
   b62ca:	b110      	cbz	r0, b62d2 <_ZN7FatFile6removeEPS_PKc+0x1c>
  return file.remove();
   b62cc:	a801      	add	r0, sp, #4
   b62ce:	f7ff fafb 	bl	b58c8 <_ZN7FatFile6removeEv>
}
   b62d2:	b00b      	add	sp, #44	; 0x2c
   b62d4:	f85d fb04 	ldr.w	pc, [sp], #4

000b62d8 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b62d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b62dc:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b62de:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b62e0:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b62e2:	4604      	mov	r4, r0
   b62e4:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b62e6:	d55b      	bpl.n	b63a0 <_ZN7FatFile5writeEPKvj+0xc8>
   b62e8:	7883      	ldrb	r3, [r0, #2]
   b62ea:	079a      	lsls	r2, r3, #30
   b62ec:	d558      	bpl.n	b63a0 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b62ee:	071b      	lsls	r3, r3, #28
   b62f0:	d451      	bmi.n	b6396 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b62f2:	6963      	ldr	r3, [r4, #20]
   b62f4:	43db      	mvns	r3, r3
   b62f6:	42bb      	cmp	r3, r7
   b62f8:	d352      	bcc.n	b63a0 <_ZN7FatFile5writeEPKvj+0xc8>
   b62fa:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b62fc:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b6300:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b6302:	f1b8 0f00 	cmp.w	r8, #0
   b6306:	f000 8091 	beq.w	b642c <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b630a:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b630c:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b630e:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b6312:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b6316:	d10e      	bne.n	b6336 <_ZN7FatFile5writeEPKvj+0x5e>
   b6318:	b96d      	cbnz	r5, b6336 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b631a:	6921      	ldr	r1, [r4, #16]
   b631c:	2900      	cmp	r1, #0
   b631e:	d046      	beq.n	b63ae <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6320:	4652      	mov	r2, sl
   b6322:	f000 f902 	bl	b652a <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b6326:	2800      	cmp	r0, #0
   b6328:	db3a      	blt.n	b63a0 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b632a:	d104      	bne.n	b6336 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b632c:	4620      	mov	r0, r4
   b632e:	f7ff fd4f 	bl	b5dd0 <_ZN7FatFile10addClusterEv>
   b6332:	2800      	cmp	r0, #0
   b6334:	d034      	beq.n	b63a0 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6336:	6921      	ldr	r1, [r4, #16]
   b6338:	68a0      	ldr	r0, [r4, #8]
   b633a:	f000 f8f0 	bl	b651e <_ZNK9FatVolume17clusterFirstBlockEm>
   b633e:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b6340:	68a0      	ldr	r0, [r4, #8]
   b6342:	b915      	cbnz	r5, b634a <_ZN7FatFile5writeEPKvj+0x72>
   b6344:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b6348:	d23f      	bcs.n	b63ca <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b634a:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b634e:	4546      	cmp	r6, r8
   b6350:	bf28      	it	cs
   b6352:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b6354:	2d00      	cmp	r5, #0
   b6356:	d136      	bne.n	b63c6 <_ZN7FatFile5writeEPKvj+0xee>
   b6358:	6962      	ldr	r2, [r4, #20]
   b635a:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b635c:	429a      	cmp	r2, r3
   b635e:	bf34      	ite	cc
   b6360:	2201      	movcc	r2, #1
   b6362:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b6364:	3024      	adds	r0, #36	; 0x24
   b6366:	f000 f8b7 	bl	b64d8 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b636a:	b1c8      	cbz	r0, b63a0 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b636c:	4428      	add	r0, r5
   b636e:	4632      	mov	r2, r6
   b6370:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b6372:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b6374:	f005 fca7 	bl	bbcc6 <memcpy>
      if (512 == (n + blockOffset)) {
   b6378:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b637c:	d104      	bne.n	b6388 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b637e:	68a0      	ldr	r0, [r4, #8]
   b6380:	3024      	adds	r0, #36	; 0x24
   b6382:	f000 f881 	bl	b6488 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b6386:	b158      	cbz	r0, b63a0 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b6388:	6963      	ldr	r3, [r4, #20]
   b638a:	4433      	add	r3, r6
   b638c:	6163      	str	r3, [r4, #20]
    src += n;
   b638e:	44b1      	add	r9, r6
    nToWrite -= n;
   b6390:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b6394:	e7b4      	b.n	b6300 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b6396:	69c1      	ldr	r1, [r0, #28]
   b6398:	f7ff fe57 	bl	b604a <_ZN7FatFile7seekSetEm>
   b639c:	2800      	cmp	r0, #0
   b639e:	d1a8      	bne.n	b62f2 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b63a0:	7863      	ldrb	r3, [r4, #1]
   b63a2:	f043 0301 	orr.w	r3, r3, #1
   b63a6:	7063      	strb	r3, [r4, #1]
  return -1;
   b63a8:	f04f 30ff 	mov.w	r0, #4294967295
   b63ac:	e050      	b.n	b6450 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b63ae:	6a23      	ldr	r3, [r4, #32]
   b63b0:	b93b      	cbnz	r3, b63c2 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b63b2:	4620      	mov	r0, r4
   b63b4:	f7ff fd0c 	bl	b5dd0 <_ZN7FatFile10addClusterEv>
   b63b8:	2800      	cmp	r0, #0
   b63ba:	d0f1      	beq.n	b63a0 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b63bc:	6923      	ldr	r3, [r4, #16]
   b63be:	6223      	str	r3, [r4, #32]
   b63c0:	e7b9      	b.n	b6336 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b63c2:	6123      	str	r3, [r4, #16]
   b63c4:	e7b7      	b.n	b6336 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b63c6:	2201      	movs	r2, #1
   b63c8:	e7cc      	b.n	b6364 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b63ca:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b63ce:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b63d0:	d31b      	bcc.n	b640a <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b63d2:	f890 c004 	ldrb.w	ip, [r0, #4]
   b63d6:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b63da:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b63dc:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b63e0:	4573      	cmp	r3, lr
   b63e2:	bf28      	it	cs
   b63e4:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b63e6:	4291      	cmp	r1, r2
      n = 512*nb;
   b63e8:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b63ec:	d307      	bcc.n	b63fe <_ZN7FatFile5writeEPKvj+0x126>
   b63ee:	441a      	add	r2, r3
   b63f0:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b63f2:	bf82      	ittt	hi
   b63f4:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
   b63f8:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b63fc:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b63fe:	68a5      	ldr	r5, [r4, #8]
   b6400:	464a      	mov	r2, r9
   b6402:	6828      	ldr	r0, [r5, #0]
   b6404:	f000 fc4b 	bl	b6c9e <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b6408:	e7bd      	b.n	b6386 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b640a:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b640c:	bf02      	ittt	eq
   b640e:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
   b6412:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6416:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b6418:	68a3      	ldr	r3, [r4, #8]
   b641a:	464a      	mov	r2, r9
   b641c:	6818      	ldr	r0, [r3, #0]
   b641e:	f000 fbc8 	bl	b6bb2 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b6422:	2800      	cmp	r0, #0
   b6424:	d0bc      	beq.n	b63a0 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b6426:	f44f 7600 	mov.w	r6, #512	; 0x200
   b642a:	e7ad      	b.n	b6388 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b642c:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b642e:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b6430:	42b2      	cmp	r2, r6
   b6432:	d204      	bcs.n	b643e <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b6434:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b6436:	f043 0304 	orr.w	r3, r3, #4
   b643a:	70a3      	strb	r3, [r4, #2]
   b643c:	e003      	b.n	b6446 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b643e:	4a08      	ldr	r2, [pc, #32]	; (b6460 <_ZN7FatFile5writeEPKvj+0x188>)
   b6440:	6812      	ldr	r2, [r2, #0]
   b6442:	2a00      	cmp	r2, #0
   b6444:	d1f7      	bne.n	b6436 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b6446:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b644a:	2b00      	cmp	r3, #0
   b644c:	db02      	blt.n	b6454 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b644e:	4638      	mov	r0, r7
}
   b6450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b6454:	4620      	mov	r0, r4
   b6456:	f7ff fea5 	bl	b61a4 <_ZN7FatFile4syncEv>
   b645a:	2800      	cmp	r0, #0
   b645c:	d1f7      	bne.n	b644e <_ZN7FatFile5writeEPKvj+0x176>
   b645e:	e79f      	b.n	b63a0 <_ZN7FatFile5writeEPKvj+0xc8>
   b6460:	2003e640 	.word	0x2003e640

000b6464 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6464:	b513      	push	{r0, r1, r4, lr}
   b6466:	4604      	mov	r4, r0
    }
   b6468:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b646a:	b159      	cbz	r1, b6484 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b646c:	9101      	str	r1, [sp, #4]
   b646e:	f005 fcc8 	bl	bbe02 <strlen>
   b6472:	6823      	ldr	r3, [r4, #0]
   b6474:	9901      	ldr	r1, [sp, #4]
   b6476:	68db      	ldr	r3, [r3, #12]
   b6478:	4602      	mov	r2, r0
   b647a:	4620      	mov	r0, r4
    }
   b647c:	b002      	add	sp, #8
   b647e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6482:	4718      	bx	r3
    }
   b6484:	b002      	add	sp, #8
   b6486:	bd10      	pop	{r4, pc}

000b6488 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b6488:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b648a:	7803      	ldrb	r3, [r0, #0]
   b648c:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b648e:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b6490:	d520      	bpl.n	b64d4 <_ZN8FatCache4syncEv+0x4c>
   b6492:	6843      	ldr	r3, [r0, #4]
   b6494:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b6496:	f100 020c 	add.w	r2, r0, #12
   b649a:	6818      	ldr	r0, [r3, #0]
   b649c:	9201      	str	r2, [sp, #4]
   b649e:	f000 fb88 	bl	b6bb2 <_ZN9SdSpiCard10writeBlockEmPKh>
   b64a2:	9a01      	ldr	r2, [sp, #4]
   b64a4:	4605      	mov	r5, r0
   b64a6:	b918      	cbnz	r0, b64b0 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b64a8:	2500      	movs	r5, #0
}
   b64aa:	4628      	mov	r0, r5
   b64ac:	b003      	add	sp, #12
   b64ae:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b64b0:	7823      	ldrb	r3, [r4, #0]
   b64b2:	079b      	lsls	r3, r3, #30
   b64b4:	d404      	bmi.n	b64c0 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b64b6:	7823      	ldrb	r3, [r4, #0]
   b64b8:	f023 0301 	bic.w	r3, r3, #1
   b64bc:	7023      	strb	r3, [r4, #0]
   b64be:	e7f4      	b.n	b64aa <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b64c0:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b64c4:	6919      	ldr	r1, [r3, #16]
   b64c6:	4401      	add	r1, r0
   b64c8:	6818      	ldr	r0, [r3, #0]
   b64ca:	f000 fb72 	bl	b6bb2 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b64ce:	2800      	cmp	r0, #0
   b64d0:	d1f1      	bne.n	b64b6 <_ZN8FatCache4syncEv+0x2e>
   b64d2:	e7e9      	b.n	b64a8 <_ZN8FatCache4syncEv+0x20>
  return true;
   b64d4:	2501      	movs	r5, #1
   b64d6:	e7e8      	b.n	b64aa <_ZN8FatCache4syncEv+0x22>

000b64d8 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b64d8:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b64da:	6883      	ldr	r3, [r0, #8]
   b64dc:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b64de:	4604      	mov	r4, r0
   b64e0:	460e      	mov	r6, r1
   b64e2:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b64e4:	d009      	beq.n	b64fa <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b64e6:	f7ff ffcf 	bl	b6488 <_ZN8FatCache4syncEv>
   b64ea:	b908      	cbnz	r0, b64f0 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b64ec:	2000      	movs	r0, #0
}
   b64ee:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b64f0:	076b      	lsls	r3, r5, #29
   b64f2:	d50a      	bpl.n	b650a <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b64f4:	2300      	movs	r3, #0
   b64f6:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b64f8:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b64fa:	7822      	ldrb	r2, [r4, #0]
   b64fc:	f005 0503 	and.w	r5, r5, #3
   b6500:	4620      	mov	r0, r4
   b6502:	4315      	orrs	r5, r2
   b6504:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b6508:	e7f1      	b.n	b64ee <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b650a:	6863      	ldr	r3, [r4, #4]
   b650c:	f104 020c 	add.w	r2, r4, #12
   b6510:	6818      	ldr	r0, [r3, #0]
   b6512:	4631      	mov	r1, r6
   b6514:	f000 fac4 	bl	b6aa0 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b6518:	2800      	cmp	r0, #0
   b651a:	d1eb      	bne.n	b64f4 <_ZN8FatCache4readEmh+0x1c>
   b651c:	e7e6      	b.n	b64ec <_ZN8FatCache4readEmh+0x14>

000b651e <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b651e:	7983      	ldrb	r3, [r0, #6]
   b6520:	6940      	ldr	r0, [r0, #20]
   b6522:	3902      	subs	r1, #2
   b6524:	4099      	lsls	r1, r3
}
   b6526:	4408      	add	r0, r1
   b6528:	4770      	bx	lr

000b652a <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b652a:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b652c:	b570      	push	{r4, r5, r6, lr}
   b652e:	4605      	mov	r5, r0
   b6530:	460c      	mov	r4, r1
   b6532:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b6534:	d802      	bhi.n	b653c <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b6536:	f04f 30ff 	mov.w	r0, #4294967295
}
   b653a:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b653c:	69c3      	ldr	r3, [r0, #28]
   b653e:	428b      	cmp	r3, r1
   b6540:	d3f9      	bcc.n	b6536 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b6542:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b6544:	2b20      	cmp	r3, #32
   b6546:	d116      	bne.n	b6576 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b6548:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b654a:	2202      	movs	r2, #2
   b654c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b6550:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6554:	f7ff ffc0 	bl	b64d8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6558:	2800      	cmp	r0, #0
   b655a:	d0ec      	beq.n	b6536 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b655c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b6560:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b6564:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b6568:	69ea      	ldr	r2, [r5, #28]
   b656a:	429a      	cmp	r2, r3
  *value = next;
   b656c:	bf26      	itte	cs
   b656e:	6033      	strcs	r3, [r6, #0]
  return 1;
   b6570:	2001      	movcs	r0, #1
    return 0;
   b6572:	2000      	movcc	r0, #0
   b6574:	e7e1      	b.n	b653a <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b6576:	2b10      	cmp	r3, #16
   b6578:	d1dd      	bne.n	b6536 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b657a:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b657e:	6981      	ldr	r1, [r0, #24]
   b6580:	2202      	movs	r2, #2
   b6582:	4419      	add	r1, r3
   b6584:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6588:	f7ff ffa6 	bl	b64d8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b658c:	2800      	cmp	r0, #0
   b658e:	d0d2      	beq.n	b6536 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b6590:	b2e4      	uxtb	r4, r4
   b6592:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b6596:	e7e7      	b.n	b6568 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b6598 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b6598:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b659a:	b538      	push	{r3, r4, r5, lr}
   b659c:	460c      	mov	r4, r1
   b659e:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b65a0:	d801      	bhi.n	b65a6 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b65a2:	2000      	movs	r0, #0
}
   b65a4:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b65a6:	69c3      	ldr	r3, [r0, #28]
   b65a8:	428b      	cmp	r3, r1
   b65aa:	d3fa      	bcc.n	b65a2 <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b65ac:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b65ae:	2b20      	cmp	r3, #32
   b65b0:	d10f      	bne.n	b65d2 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b65b2:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b65b4:	2203      	movs	r2, #3
   b65b6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b65ba:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b65be:	f7ff ff8b 	bl	b64d8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b65c2:	2800      	cmp	r0, #0
   b65c4:	d0ed      	beq.n	b65a2 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b65c6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b65ca:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b65ce:	2001      	movs	r0, #1
   b65d0:	e7e8      	b.n	b65a4 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b65d2:	2b10      	cmp	r3, #16
   b65d4:	d1e5      	bne.n	b65a2 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b65d6:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b65da:	6981      	ldr	r1, [r0, #24]
   b65dc:	2203      	movs	r2, #3
   b65de:	4419      	add	r1, r3
   b65e0:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b65e4:	f7ff ff78 	bl	b64d8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b65e8:	2800      	cmp	r0, #0
   b65ea:	d0da      	beq.n	b65a2 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b65ec:	b2e4      	uxtb	r4, r4
   b65ee:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b65f2:	e7ec      	b.n	b65ce <_ZN9FatVolume6fatPutEmm+0x36>

000b65f4 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b65f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b65f8:	68c4      	ldr	r4, [r0, #12]
   b65fa:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b65fc:	4605      	mov	r5, r0
   b65fe:	460e      	mov	r6, r1
   b6600:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b6602:	d301      	bcc.n	b6608 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b6604:	2701      	movs	r7, #1
   b6606:	e001      	b.n	b660c <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b6608:	460c      	mov	r4, r1
    setStart = false;
   b660a:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b660c:	69eb      	ldr	r3, [r5, #28]
    find++;
   b660e:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b6610:	42a3      	cmp	r3, r4
   b6612:	d202      	bcs.n	b661a <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b6614:	b9c7      	cbnz	r7, b6648 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b6616:	68ec      	ldr	r4, [r5, #12]
   b6618:	e7f4      	b.n	b6604 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b661a:	42a6      	cmp	r6, r4
   b661c:	d014      	beq.n	b6648 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b661e:	aa01      	add	r2, sp, #4
   b6620:	4621      	mov	r1, r4
   b6622:	4628      	mov	r0, r5
   b6624:	f7ff ff81 	bl	b652a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b6628:	2800      	cmp	r0, #0
   b662a:	db0d      	blt.n	b6648 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b662c:	d0ee      	beq.n	b660c <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b662e:	9b01      	ldr	r3, [sp, #4]
   b6630:	2b00      	cmp	r3, #0
   b6632:	d1eb      	bne.n	b660c <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b6634:	b107      	cbz	r7, b6638 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b6636:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b6638:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b663c:	4621      	mov	r1, r4
   b663e:	4628      	mov	r0, r5
   b6640:	f7ff ffaa 	bl	b6598 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b6644:	4607      	mov	r7, r0
   b6646:	b920      	cbnz	r0, b6652 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b6648:	2700      	movs	r7, #0
}
   b664a:	4638      	mov	r0, r7
   b664c:	b002      	add	sp, #8
   b664e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b6652:	b916      	cbnz	r6, b665a <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b6654:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b6658:	e7f7      	b.n	b664a <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b665a:	4622      	mov	r2, r4
   b665c:	4631      	mov	r1, r6
   b665e:	4628      	mov	r0, r5
   b6660:	f7ff ff9a 	bl	b6598 <_ZN9FatVolume6fatPutEmm>
   b6664:	2800      	cmp	r0, #0
   b6666:	d1f5      	bne.n	b6654 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b6668:	e7ee      	b.n	b6648 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b666a <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b666a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b666c:	4605      	mov	r5, r0
   b666e:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b6670:	aa01      	add	r2, sp, #4
   b6672:	4621      	mov	r1, r4
   b6674:	4628      	mov	r0, r5
   b6676:	f7ff ff58 	bl	b652a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b667a:	1e06      	subs	r6, r0, #0
   b667c:	db10      	blt.n	b66a0 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b667e:	2200      	movs	r2, #0
   b6680:	4621      	mov	r1, r4
   b6682:	4628      	mov	r0, r5
   b6684:	f7ff ff88 	bl	b6598 <_ZN9FatVolume6fatPutEmm>
   b6688:	b150      	cbz	r0, b66a0 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b668a:	68eb      	ldr	r3, [r5, #12]
   b668c:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b668e:	bf24      	itt	cs
   b6690:	f104 34ff 	addcs.w	r4, r4, #4294967295
   b6694:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b6696:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b6698:	2e00      	cmp	r6, #0
   b669a:	d1e9      	bne.n	b6670 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b669c:	b002      	add	sp, #8
   b669e:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b66a0:	2000      	movs	r0, #0
   b66a2:	e7fb      	b.n	b669c <_ZN9FatVolume9freeChainEm+0x32>

000b66a4 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b66a4:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b66a6:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b66a8:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b66aa:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b66ac:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
   b66b0:	4604      	mov	r4, r0
  m_fatType = 0;
   b66b2:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b66b4:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b66b8:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b66ba:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b66be:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b66c0:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b66c4:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b66c8:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b66cc:	460d      	mov	r5, r1
   b66ce:	b1b9      	cbz	r1, b6700 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b66d0:	2904      	cmp	r1, #4
   b66d2:	d901      	bls.n	b66d8 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b66d4:	2000      	movs	r0, #0
}
   b66d6:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b66d8:	4611      	mov	r1, r2
   b66da:	4630      	mov	r0, r6
   b66dc:	f7ff fefc 	bl	b64d8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b66e0:	2800      	cmp	r0, #0
   b66e2:	d0f7      	beq.n	b66d4 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b66e4:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b66e8:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b66ec:	065b      	lsls	r3, r3, #25
   b66ee:	d1f1      	bne.n	b66d4 <_ZN9FatVolume4initEh+0x30>
   b66f0:	f105 011b 	add.w	r1, r5, #27
   b66f4:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b66f8:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b66fc:	2d00      	cmp	r5, #0
   b66fe:	d0e9      	beq.n	b66d4 <_ZN9FatVolume4initEh+0x30>
   b6700:	2200      	movs	r2, #0
   b6702:	4629      	mov	r1, r5
   b6704:	4630      	mov	r0, r6
   b6706:	f7ff fee7 	bl	b64d8 <_ZN8FatCache4readEmh>
  if (!pc) {
   b670a:	2800      	cmp	r0, #0
   b670c:	d0e2      	beq.n	b66d4 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b670e:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b6712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b6716:	d1dd      	bne.n	b66d4 <_ZN9FatVolume4initEh+0x30>
   b6718:	7c03      	ldrb	r3, [r0, #16]
   b671a:	2b02      	cmp	r3, #2
   b671c:	d1da      	bne.n	b66d4 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b671e:	89c3      	ldrh	r3, [r0, #14]
   b6720:	2b00      	cmp	r3, #0
   b6722:	d0d7      	beq.n	b66d4 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b6724:	7b41      	ldrb	r1, [r0, #13]
   b6726:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b6728:	1e4b      	subs	r3, r1, #1
   b672a:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b672c:	2300      	movs	r3, #0
   b672e:	71a3      	strb	r3, [r4, #6]
   b6730:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b6732:	2301      	movs	r3, #1
   b6734:	4299      	cmp	r1, r3
   b6736:	d007      	beq.n	b6748 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b6738:	3e01      	subs	r6, #1
   b673a:	d0cb      	beq.n	b66d4 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b673c:	79a2      	ldrb	r2, [r4, #6]
   b673e:	005b      	lsls	r3, r3, #1
   b6740:	3201      	adds	r2, #1
   b6742:	b2db      	uxtb	r3, r3
   b6744:	71a2      	strb	r2, [r4, #6]
   b6746:	e7f5      	b.n	b6734 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b6748:	8ac1      	ldrh	r1, [r0, #22]
   b674a:	b901      	cbnz	r1, b674e <_ZN9FatVolume4initEh+0xaa>
   b674c:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b674e:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b6750:	89c3      	ldrh	r3, [r0, #14]
   b6752:	442b      	add	r3, r5
   b6754:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b6756:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b675a:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b675c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b6760:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b6762:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b6766:	0149      	lsls	r1, r1, #5
   b6768:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b676c:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b6770:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b6772:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b6776:	b902      	cbnz	r2, b677a <_ZN9FatVolume4initEh+0xd6>
   b6778:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b677a:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b677c:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b677e:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b6780:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b6782:	1c4b      	adds	r3, r1, #1
   b6784:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b6786:	f640 73f4 	movw	r3, #4084	; 0xff4
   b678a:	4299      	cmp	r1, r3
   b678c:	d802      	bhi.n	b6794 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b678e:	230c      	movs	r3, #12
   b6790:	71e3      	strb	r3, [r4, #7]
   b6792:	e79f      	b.n	b66d4 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b6794:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b6798:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b679a:	bf85      	ittet	hi
   b679c:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b679e:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b67a0:	2310      	movls	r3, #16
    m_fatType = 32;
   b67a2:	2320      	movhi	r3, #32
   b67a4:	71e3      	strb	r3, [r4, #7]
  return true;
   b67a6:	2001      	movs	r0, #1
   b67a8:	e795      	b.n	b66d6 <_ZN9FatVolume4initEh+0x32>

000b67aa <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b67aa:	f000 bacb 	b.w	b6d44 <_ZN14SdSpiAltDriver4sendEh>

000b67ae <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b67ae:	f000 baae 	b.w	b6d0e <_ZN14SdSpiAltDriver7receiveEv>
	...

000b67b4 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b67b4:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b67b6:	4e0e      	ldr	r6, [pc, #56]	; (b67f0 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b67b8:	460d      	mov	r5, r1
   b67ba:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b67bc:	f000 fb2a 	bl	b6e14 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b67c0:	6833      	ldr	r3, [r6, #0]
   b67c2:	1ac0      	subs	r0, r0, r3
   b67c4:	4b0b      	ldr	r3, [pc, #44]	; (b67f4 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b67c6:	4298      	cmp	r0, r3
   b67c8:	d908      	bls.n	b67dc <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b67ca:	f000 fb2b 	bl	b6e24 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b67ce:	4b0a      	ldr	r3, [pc, #40]	; (b67f8 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b67d0:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b67d2:	f000 fdef 	bl	b73b4 <spark_process>
   b67d6:	f000 fb1d 	bl	b6e14 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b67da:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b67dc:	f000 fb22 	bl	b6e24 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b67e0:	b280      	uxth	r0, r0
   b67e2:	1b40      	subs	r0, r0, r5
}
   b67e4:	42a0      	cmp	r0, r4
   b67e6:	bfd4      	ite	le
   b67e8:	2000      	movle	r0, #0
   b67ea:	2001      	movgt	r0, #1
   b67ec:	bd70      	pop	{r4, r5, r6, pc}
   b67ee:	bf00      	nop
   b67f0:	2003e648 	.word	0x2003e648
   b67f4:	000186a0 	.word	0x000186a0
   b67f8:	2003e744 	.word	0x2003e744

000b67fc <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b67fc:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b67fe:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b6800:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b6802:	b94d      	cbnz	r5, b6818 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b6804:	6840      	ldr	r0, [r0, #4]
   b6806:	f000 fa6b 	bl	b6ce0 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b680a:	6863      	ldr	r3, [r4, #4]
   b680c:	4629      	mov	r1, r5
   b680e:	7d18      	ldrb	r0, [r3, #20]
   b6810:	f004 fb57 	bl	baec2 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b6814:	2301      	movs	r3, #1
   b6816:	7223      	strb	r3, [r4, #8]
  }
}
   b6818:	bd38      	pop	{r3, r4, r5, pc}

000b681a <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b681a:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b681c:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b681e:	4604      	mov	r4, r0
  if (m_spiActive) {
   b6820:	b16b      	cbz	r3, b683e <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b6822:	6843      	ldr	r3, [r0, #4]
   b6824:	2101      	movs	r1, #1
   b6826:	7d18      	ldrb	r0, [r3, #20]
   b6828:	f004 fb4b 	bl	baec2 <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b682c:	6860      	ldr	r0, [r4, #4]
   b682e:	21ff      	movs	r1, #255	; 0xff
   b6830:	f7ff ffbb 	bl	b67aa <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b6834:	6860      	ldr	r0, [r4, #4]
   b6836:	f000 fa67 	bl	b6d08 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b683a:	2300      	movs	r3, #0
   b683c:	7223      	strb	r3, [r4, #8]
  }
}
   b683e:	bd10      	pop	{r4, pc}

000b6840 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b6840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6842:	4604      	mov	r4, r0
   b6844:	460d      	mov	r5, r1
   b6846:	4616      	mov	r6, r2
   b6848:	f000 faec 	bl	b6e24 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b684c:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b684e:	6860      	ldr	r0, [r4, #4]
   b6850:	f7ff ffad 	bl	b67ae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6854:	28ff      	cmp	r0, #255	; 0xff
   b6856:	7260      	strb	r0, [r4, #9]
   b6858:	d10e      	bne.n	b6878 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b685a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b685e:	4639      	mov	r1, r7
   b6860:	4620      	mov	r0, r4
   b6862:	f7ff ffa7 	bl	b67b4 <_ZN9SdSpiCard10isTimedOutEtt>
   b6866:	2800      	cmp	r0, #0
   b6868:	d0f1      	beq.n	b684e <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b686a:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b686c:	4620      	mov	r0, r4
   b686e:	7023      	strb	r3, [r4, #0]
   b6870:	f7ff ffd3 	bl	b681a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6874:	2000      	movs	r0, #0
}
   b6876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b6878:	28fe      	cmp	r0, #254	; 0xfe
   b687a:	d001      	beq.n	b6880 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b687c:	2350      	movs	r3, #80	; 0x50
   b687e:	e7f5      	b.n	b686c <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b6880:	6860      	ldr	r0, [r4, #4]
   b6882:	4632      	mov	r2, r6
   b6884:	4629      	mov	r1, r5
   b6886:	f000 fa47 	bl	b6d18 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b688a:	7260      	strb	r0, [r4, #9]
   b688c:	b108      	cbz	r0, b6892 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b688e:	2360      	movs	r3, #96	; 0x60
   b6890:	e7ec      	b.n	b686c <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b6892:	6860      	ldr	r0, [r4, #4]
   b6894:	f7ff ff8b 	bl	b67ae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b6898:	6860      	ldr	r0, [r4, #4]
   b689a:	f7ff ff88 	bl	b67ae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b689e:	2001      	movs	r0, #1
   b68a0:	e7e9      	b.n	b6876 <_ZN9SdSpiCard8readDataEPhj+0x36>

000b68a2 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b68a2:	b570      	push	{r4, r5, r6, lr}
   b68a4:	4604      	mov	r4, r0
   b68a6:	460e      	mov	r6, r1
   b68a8:	f000 fabc 	bl	b6e24 <HAL_Timer_Get_Milli_Seconds>
   b68ac:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b68ae:	4632      	mov	r2, r6
   b68b0:	4629      	mov	r1, r5
   b68b2:	4620      	mov	r0, r4
   b68b4:	f7ff ff7e 	bl	b67b4 <_ZN9SdSpiCard10isTimedOutEtt>
   b68b8:	b930      	cbnz	r0, b68c8 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b68ba:	6860      	ldr	r0, [r4, #4]
   b68bc:	f7ff ff77 	bl	b67ae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b68c0:	28ff      	cmp	r0, #255	; 0xff
   b68c2:	d1f4      	bne.n	b68ae <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b68c4:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b68c6:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b68c8:	2000      	movs	r0, #0
   b68ca:	e7fc      	b.n	b68c6 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b68cc <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b68cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b68ce:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b68d0:	9201      	str	r2, [sp, #4]
   b68d2:	4604      	mov	r4, r0
   b68d4:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b68d6:	b90b      	cbnz	r3, b68dc <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b68d8:	f7ff ff90 	bl	b67fc <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b68dc:	b125      	cbz	r5, b68e8 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b68de:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b68e2:	4620      	mov	r0, r4
   b68e4:	f7ff ffdd 	bl	b68a2 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b68e8:	6860      	ldr	r0, [r4, #4]
   b68ea:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b68ee:	f7ff ff5c 	bl	b67aa <_ZN9SdSpiCard7spiSendEh.isra.0>
   b68f2:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b68f4:	af01      	add	r7, sp, #4
   b68f6:	5db9      	ldrb	r1, [r7, r6]
   b68f8:	6860      	ldr	r0, [r4, #4]
   b68fa:	f7ff ff56 	bl	b67aa <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b68fe:	3e01      	subs	r6, #1
   b6900:	d2f9      	bcs.n	b68f6 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b6902:	2d00      	cmp	r5, #0
   b6904:	6860      	ldr	r0, [r4, #4]
   b6906:	bf0c      	ite	eq
   b6908:	2195      	moveq	r1, #149	; 0x95
   b690a:	2187      	movne	r1, #135	; 0x87
   b690c:	f7ff ff4d 	bl	b67aa <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b6910:	6860      	ldr	r0, [r4, #4]
   b6912:	f7ff ff4c 	bl	b67ae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6916:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b6918:	6860      	ldr	r0, [r4, #4]
   b691a:	f7ff ff48 	bl	b67ae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b691e:	0603      	lsls	r3, r0, #24
   b6920:	7260      	strb	r0, [r4, #9]
   b6922:	d503      	bpl.n	b692c <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b6924:	3d01      	subs	r5, #1
   b6926:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b692a:	d1f5      	bne.n	b6918 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b692c:	b003      	add	sp, #12
   b692e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6930 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b6930:	b570      	push	{r4, r5, r6, lr}
   b6932:	4604      	mov	r4, r0
   b6934:	460d      	mov	r5, r1
   b6936:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b6938:	2137      	movs	r1, #55	; 0x37
   b693a:	2200      	movs	r2, #0
   b693c:	f7ff ffc6 	bl	b68cc <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b6940:	4632      	mov	r2, r6
   b6942:	4629      	mov	r1, r5
   b6944:	4620      	mov	r0, r4
  }
   b6946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b694a:	f7ff bfbf 	b.w	b68cc <_ZN9SdSpiCard11cardCommandEhm>
	...

000b6950 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b6950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b6954:	2500      	movs	r5, #0
   b6956:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b6958:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b695a:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b695c:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b695e:	4604      	mov	r4, r0
   b6960:	4690      	mov	r8, r2
   b6962:	461e      	mov	r6, r3
   b6964:	f000 fa5e 	bl	b6e24 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b6968:	4641      	mov	r1, r8
   b696a:	4607      	mov	r7, r0
   b696c:	6860      	ldr	r0, [r4, #4]
   b696e:	f000 f9bb 	bl	b6ce8 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b6972:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b6974:	4a49      	ldr	r2, [pc, #292]	; (b6a9c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b6976:	721d      	strb	r5, [r3, #8]
   b6978:	2501      	movs	r5, #1
   b697a:	60da      	str	r2, [r3, #12]
   b697c:	821d      	strh	r5, [r3, #16]
  spiStart();
   b697e:	4620      	mov	r0, r4
   b6980:	f7ff ff3c 	bl	b67fc <_ZN9SdSpiCard8spiStartEv>
   b6984:	6863      	ldr	r3, [r4, #4]
   b6986:	4629      	mov	r1, r5
   b6988:	7d18      	ldrb	r0, [r3, #20]
   b698a:	f004 fa9a 	bl	baec2 <digitalWrite>
   b698e:	250a      	movs	r5, #10
    spiSend(0XFF);
   b6990:	6860      	ldr	r0, [r4, #4]
   b6992:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b6994:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b6996:	f7ff ff08 	bl	b67aa <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b699a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b699e:	d1f7      	bne.n	b6990 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b69a0:	6863      	ldr	r3, [r4, #4]
   b69a2:	4629      	mov	r1, r5
   b69a4:	7d18      	ldrb	r0, [r3, #20]
   b69a6:	f004 fa8c 	bl	baec2 <digitalWrite>
  }
   b69aa:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b69ac:	2200      	movs	r2, #0
   b69ae:	4611      	mov	r1, r2
   b69b0:	4620      	mov	r0, r4
   b69b2:	f7ff ff8b 	bl	b68cc <_ZN9SdSpiCard11cardCommandEhm>
   b69b6:	2801      	cmp	r0, #1
   b69b8:	4680      	mov	r8, r0
   b69ba:	d018      	beq.n	b69ee <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b69bc:	3d01      	subs	r5, #1
   b69be:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b69c2:	d107      	bne.n	b69d4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b69c4:	2320      	movs	r3, #32
  spiStop();
   b69c6:	4620      	mov	r0, r4
   b69c8:	7023      	strb	r3, [r4, #0]
   b69ca:	f7ff ff26 	bl	b681a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b69ce:	2000      	movs	r0, #0
}
   b69d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b69d4:	6860      	ldr	r0, [r4, #4]
   b69d6:	21fd      	movs	r1, #253	; 0xfd
   b69d8:	f7ff fee7 	bl	b67aa <_ZN9SdSpiCard7spiSendEh.isra.0>
   b69dc:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b69e0:	6860      	ldr	r0, [r4, #4]
   b69e2:	f7ff fee4 	bl	b67ae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b69e6:	f1b8 0801 	subs.w	r8, r8, #1
   b69ea:	d1f9      	bne.n	b69e0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b69ec:	e7de      	b.n	b69ac <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b69ee:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b69f2:	2108      	movs	r1, #8
   b69f4:	4620      	mov	r0, r4
   b69f6:	f7ff ff69 	bl	b68cc <_ZN9SdSpiCard11cardCommandEhm>
   b69fa:	2805      	cmp	r0, #5
   b69fc:	d114      	bne.n	b6a28 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b69fe:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b6a02:	2500      	movs	r5, #0
   b6a04:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b6a06:	462a      	mov	r2, r5
   b6a08:	2129      	movs	r1, #41	; 0x29
   b6a0a:	4620      	mov	r0, r4
   b6a0c:	f7ff ff90 	bl	b6930 <_ZN9SdSpiCard8cardAcmdEhm>
   b6a10:	4602      	mov	r2, r0
   b6a12:	b1d8      	cbz	r0, b6a4c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b6a14:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b6a18:	4639      	mov	r1, r7
   b6a1a:	4620      	mov	r0, r4
   b6a1c:	f7ff feca 	bl	b67b4 <_ZN9SdSpiCard10isTimedOutEtt>
   b6a20:	2800      	cmp	r0, #0
   b6a22:	d0f0      	beq.n	b6a06 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b6a24:	2343      	movs	r3, #67	; 0x43
   b6a26:	e7ce      	b.n	b69c6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b6a28:	2504      	movs	r5, #4
      m_status = spiReceive();
   b6a2a:	6860      	ldr	r0, [r4, #4]
   b6a2c:	f7ff febf 	bl	b67ae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b6a30:	3d01      	subs	r5, #1
   b6a32:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b6a36:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b6a38:	d1f7      	bne.n	b6a2a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b6a3a:	28aa      	cmp	r0, #170	; 0xaa
   b6a3c:	d104      	bne.n	b6a48 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b6a3e:	2302      	movs	r3, #2
   b6a40:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b6a42:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b6a46:	e7dd      	b.n	b6a04 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b6a48:	2325      	movs	r3, #37	; 0x25
   b6a4a:	e7bc      	b.n	b69c6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b6a4c:	7aa3      	ldrb	r3, [r4, #10]
   b6a4e:	2b02      	cmp	r3, #2
   b6a50:	d118      	bne.n	b6a84 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b6a52:	213a      	movs	r1, #58	; 0x3a
   b6a54:	4620      	mov	r0, r4
   b6a56:	f7ff ff39 	bl	b68cc <_ZN9SdSpiCard11cardCommandEhm>
   b6a5a:	b108      	cbz	r0, b6a60 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b6a5c:	2337      	movs	r3, #55	; 0x37
   b6a5e:	e7b2      	b.n	b69c6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b6a60:	6860      	ldr	r0, [r4, #4]
   b6a62:	f7ff fea4 	bl	b67ae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6a66:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b6a6a:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b6a6c:	bf04      	itt	eq
   b6a6e:	2303      	moveq	r3, #3
   b6a70:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b6a72:	6860      	ldr	r0, [r4, #4]
   b6a74:	f7ff fe9b 	bl	b67ae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6a78:	6860      	ldr	r0, [r4, #4]
   b6a7a:	f7ff fe98 	bl	b67ae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6a7e:	6860      	ldr	r0, [r4, #4]
   b6a80:	f7ff fe95 	bl	b67ae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b6a84:	4620      	mov	r0, r4
   b6a86:	f7ff fec8 	bl	b681a <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b6a8a:	6863      	ldr	r3, [r4, #4]
   b6a8c:	7930      	ldrb	r0, [r6, #4]
   b6a8e:	68b1      	ldr	r1, [r6, #8]
   b6a90:	89b2      	ldrh	r2, [r6, #12]
   b6a92:	821a      	strh	r2, [r3, #16]
   b6a94:	7218      	strb	r0, [r3, #8]
   b6a96:	60d9      	str	r1, [r3, #12]
  return true;
   b6a98:	2001      	movs	r0, #1
   b6a9a:	e799      	b.n	b69d0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b6a9c:	0003d090 	.word	0x0003d090

000b6aa0 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b6aa0:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b6aa2:	7a83      	ldrb	r3, [r0, #10]
   b6aa4:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b6aa6:	bf18      	it	ne
   b6aa8:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b6aaa:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b6aac:	460a      	mov	r2, r1
   b6aae:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b6ab0:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b6ab2:	f7ff ff0b 	bl	b68cc <_ZN9SdSpiCard11cardCommandEhm>
   b6ab6:	b130      	cbz	r0, b6ac6 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b6ab8:	2330      	movs	r3, #48	; 0x30
   b6aba:	7023      	strb	r3, [r4, #0]
  spiStop();
   b6abc:	4620      	mov	r0, r4
   b6abe:	f7ff feac 	bl	b681a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6ac2:	2500      	movs	r5, #0
   b6ac4:	e00b      	b.n	b6ade <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b6ac6:	4629      	mov	r1, r5
   b6ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6acc:	4620      	mov	r0, r4
   b6ace:	f7ff feb7 	bl	b6840 <_ZN9SdSpiCard8readDataEPhj>
   b6ad2:	4605      	mov	r5, r0
   b6ad4:	2800      	cmp	r0, #0
   b6ad6:	d0f1      	beq.n	b6abc <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b6ad8:	4620      	mov	r0, r4
   b6ada:	f7ff fe9e 	bl	b681a <_ZN9SdSpiCard7spiStopEv>
}
   b6ade:	4628      	mov	r0, r5
   b6ae0:	bd38      	pop	{r3, r4, r5, pc}

000b6ae2 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b6ae2:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b6ae4:	7a83      	ldrb	r3, [r0, #10]
   b6ae6:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b6ae8:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b6aea:	bf18      	it	ne
   b6aec:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b6aee:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b6af0:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b6af2:	f7ff feeb 	bl	b68cc <_ZN9SdSpiCard11cardCommandEhm>
   b6af6:	b130      	cbz	r0, b6b06 <_ZN9SdSpiCard9readStartEm+0x24>
   b6af8:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b6afa:	4620      	mov	r0, r4
   b6afc:	7023      	strb	r3, [r4, #0]
   b6afe:	f7ff fe8c 	bl	b681a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6b02:	2000      	movs	r0, #0
}
   b6b04:	bd10      	pop	{r4, pc}
  return true;
   b6b06:	2001      	movs	r0, #1
   b6b08:	e7fc      	b.n	b6b04 <_ZN9SdSpiCard9readStartEm+0x22>

000b6b0a <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b6b0a:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b6b0c:	2200      	movs	r2, #0
   b6b0e:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b6b10:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b6b12:	f7ff fedb 	bl	b68cc <_ZN9SdSpiCard11cardCommandEhm>
   b6b16:	b130      	cbz	r0, b6b26 <_ZN9SdSpiCard8readStopEv+0x1c>
   b6b18:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b6b1a:	4620      	mov	r0, r4
   b6b1c:	7023      	strb	r3, [r4, #0]
   b6b1e:	f7ff fe7c 	bl	b681a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6b22:	2000      	movs	r0, #0
}
   b6b24:	bd10      	pop	{r4, pc}
  spiStop();
   b6b26:	4620      	mov	r0, r4
   b6b28:	f7ff fe77 	bl	b681a <_ZN9SdSpiCard7spiStopEv>
  return true;
   b6b2c:	2001      	movs	r0, #1
   b6b2e:	e7f9      	b.n	b6b24 <_ZN9SdSpiCard8readStopEv+0x1a>

000b6b30 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b6b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6b32:	4604      	mov	r4, r0
   b6b34:	4616      	mov	r6, r2
   b6b36:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b6b38:	f7ff ffd3 	bl	b6ae2 <_ZN9SdSpiCard9readStartEm>
   b6b3c:	b168      	cbz	r0, b6b5a <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b6b3e:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b6b40:	b2ab      	uxth	r3, r5
   b6b42:	429f      	cmp	r7, r3
   b6b44:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b6b48:	d909      	bls.n	b6b5e <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b6b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6b4e:	4620      	mov	r0, r4
   b6b50:	f7ff fe76 	bl	b6840 <_ZN9SdSpiCard8readDataEPhj>
   b6b54:	3501      	adds	r5, #1
   b6b56:	2800      	cmp	r0, #0
   b6b58:	d1f2      	bne.n	b6b40 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b6b5a:	2000      	movs	r0, #0
   b6b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b6b5e:	4620      	mov	r0, r4
}
   b6b60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b6b64:	f7ff bfd1 	b.w	b6b0a <_ZN9SdSpiCard8readStopEv>

000b6b68 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b6b68:	b538      	push	{r3, r4, r5, lr}
   b6b6a:	4604      	mov	r4, r0
   b6b6c:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b6b6e:	6840      	ldr	r0, [r0, #4]
   b6b70:	f7ff fe1b 	bl	b67aa <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b6b74:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6b78:	6860      	ldr	r0, [r4, #4]
   b6b7a:	4629      	mov	r1, r5
   b6b7c:	f000 f8e6 	bl	b6d4c <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b6b80:	6860      	ldr	r0, [r4, #4]
   b6b82:	21ff      	movs	r1, #255	; 0xff
   b6b84:	f7ff fe11 	bl	b67aa <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b6b88:	6860      	ldr	r0, [r4, #4]
   b6b8a:	21ff      	movs	r1, #255	; 0xff
   b6b8c:	f7ff fe0d 	bl	b67aa <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b6b90:	6860      	ldr	r0, [r4, #4]
   b6b92:	f7ff fe0c 	bl	b67ae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6b96:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b6b98:	f000 001f 	and.w	r0, r0, #31
   b6b9c:	2805      	cmp	r0, #5
   b6b9e:	d006      	beq.n	b6bae <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b6ba0:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b6ba2:	4620      	mov	r0, r4
   b6ba4:	7023      	strb	r3, [r4, #0]
   b6ba6:	f7ff fe38 	bl	b681a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6baa:	2000      	movs	r0, #0
}
   b6bac:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b6bae:	2001      	movs	r0, #1
   b6bb0:	e7fc      	b.n	b6bac <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b6bb2 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b6bb2:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b6bb4:	7a83      	ldrb	r3, [r0, #10]
   b6bb6:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b6bb8:	bf18      	it	ne
   b6bba:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b6bbc:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b6bbe:	460a      	mov	r2, r1
   b6bc0:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b6bc2:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b6bc4:	f7ff fe82 	bl	b68cc <_ZN9SdSpiCard11cardCommandEhm>
   b6bc8:	4606      	mov	r6, r0
   b6bca:	b130      	cbz	r0, b6bda <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b6bcc:	2332      	movs	r3, #50	; 0x32
   b6bce:	7023      	strb	r3, [r4, #0]
  spiStop();
   b6bd0:	4620      	mov	r0, r4
   b6bd2:	f7ff fe22 	bl	b681a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6bd6:	2500      	movs	r5, #0
   b6bd8:	e01f      	b.n	b6c1a <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b6bda:	462a      	mov	r2, r5
   b6bdc:	21fe      	movs	r1, #254	; 0xfe
   b6bde:	4620      	mov	r0, r4
   b6be0:	f7ff ffc2 	bl	b6b68 <_ZN9SdSpiCard9writeDataEhPKh>
   b6be4:	2800      	cmp	r0, #0
   b6be6:	d0f3      	beq.n	b6bd0 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6be8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b6bec:	4620      	mov	r0, r4
   b6bee:	f7ff fe58 	bl	b68a2 <_ZN9SdSpiCard11waitNotBusyEt>
   b6bf2:	4605      	mov	r5, r0
   b6bf4:	b908      	cbnz	r0, b6bfa <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b6bf6:	235a      	movs	r3, #90	; 0x5a
   b6bf8:	e7e9      	b.n	b6bce <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b6bfa:	4632      	mov	r2, r6
   b6bfc:	210d      	movs	r1, #13
   b6bfe:	4620      	mov	r0, r4
   b6c00:	f7ff fe64 	bl	b68cc <_ZN9SdSpiCard11cardCommandEhm>
   b6c04:	b108      	cbz	r0, b6c0a <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b6c06:	2329      	movs	r3, #41	; 0x29
   b6c08:	e7e1      	b.n	b6bce <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b6c0a:	6860      	ldr	r0, [r4, #4]
   b6c0c:	f7ff fdcf 	bl	b67ae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6c10:	2800      	cmp	r0, #0
   b6c12:	d1f8      	bne.n	b6c06 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b6c14:	4620      	mov	r0, r4
   b6c16:	f7ff fe00 	bl	b681a <_ZN9SdSpiCard7spiStopEv>
}
   b6c1a:	4628      	mov	r0, r5
   b6c1c:	bd70      	pop	{r4, r5, r6, pc}

000b6c1e <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b6c1e:	b513      	push	{r0, r1, r4, lr}
   b6c20:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6c22:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b6c26:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6c28:	f7ff fe3b 	bl	b68a2 <_ZN9SdSpiCard11waitNotBusyEt>
   b6c2c:	9a01      	ldr	r2, [sp, #4]
   b6c2e:	b930      	cbnz	r0, b6c3e <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b6c30:	235b      	movs	r3, #91	; 0x5b
   b6c32:	7023      	strb	r3, [r4, #0]
  spiStop();
   b6c34:	4620      	mov	r0, r4
   b6c36:	f7ff fdf0 	bl	b681a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6c3a:	2000      	movs	r0, #0
   b6c3c:	e005      	b.n	b6c4a <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b6c3e:	21fc      	movs	r1, #252	; 0xfc
   b6c40:	4620      	mov	r0, r4
   b6c42:	f7ff ff91 	bl	b6b68 <_ZN9SdSpiCard9writeDataEhPKh>
   b6c46:	2800      	cmp	r0, #0
   b6c48:	d0f4      	beq.n	b6c34 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b6c4a:	b002      	add	sp, #8
   b6c4c:	bd10      	pop	{r4, pc}

000b6c4e <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b6c4e:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b6c50:	7a83      	ldrb	r3, [r0, #10]
   b6c52:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b6c54:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b6c56:	bf18      	it	ne
   b6c58:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b6c5a:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b6c5c:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b6c5e:	f7ff fe35 	bl	b68cc <_ZN9SdSpiCard11cardCommandEhm>
   b6c62:	b130      	cbz	r0, b6c72 <_ZN9SdSpiCard10writeStartEm+0x24>
   b6c64:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b6c66:	4620      	mov	r0, r4
   b6c68:	7023      	strb	r3, [r4, #0]
   b6c6a:	f7ff fdd6 	bl	b681a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6c6e:	2000      	movs	r0, #0
}
   b6c70:	bd10      	pop	{r4, pc}
  return true;
   b6c72:	2001      	movs	r0, #1
   b6c74:	e7fc      	b.n	b6c70 <_ZN9SdSpiCard10writeStartEm+0x22>

000b6c76 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b6c76:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6c78:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b6c7c:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6c7e:	f7ff fe10 	bl	b68a2 <_ZN9SdSpiCard11waitNotBusyEt>
   b6c82:	4605      	mov	r5, r0
   b6c84:	b930      	cbnz	r0, b6c94 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b6c86:	2356      	movs	r3, #86	; 0x56
   b6c88:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b6c8a:	4620      	mov	r0, r4
   b6c8c:	f7ff fdc5 	bl	b681a <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b6c90:	4628      	mov	r0, r5
   b6c92:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b6c94:	6860      	ldr	r0, [r4, #4]
   b6c96:	21fd      	movs	r1, #253	; 0xfd
   b6c98:	f7ff fd87 	bl	b67aa <_ZN9SdSpiCard7spiSendEh.isra.0>
   b6c9c:	e7f5      	b.n	b6c8a <_ZN9SdSpiCard9writeStopEv+0x14>

000b6c9e <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b6c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6ca0:	4604      	mov	r4, r0
   b6ca2:	4616      	mov	r6, r2
   b6ca4:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b6ca6:	f7ff ffd2 	bl	b6c4e <_ZN9SdSpiCard10writeStartEm>
   b6caa:	b170      	cbz	r0, b6cca <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b6cac:	2500      	movs	r5, #0
   b6cae:	42bd      	cmp	r5, r7
   b6cb0:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b6cb4:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b6cb6:	d004      	beq.n	b6cc2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b6cb8:	f7ff ffb1 	bl	b6c1e <_ZN9SdSpiCard9writeDataEPKh>
   b6cbc:	b128      	cbz	r0, b6cca <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b6cbe:	3501      	adds	r5, #1
   b6cc0:	e7f5      	b.n	b6cae <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b6cc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b6cc6:	f7ff bfd6 	b.w	b6c76 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b6cca:	4620      	mov	r0, r4
   b6ccc:	f7ff fda5 	bl	b681a <_ZN9SdSpiCard7spiStopEv>
}
   b6cd0:	2000      	movs	r0, #0
   b6cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6cd4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b6cd4:	4b01      	ldr	r3, [pc, #4]	; (b6cdc <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b6cd6:	2201      	movs	r2, #1
   b6cd8:	701a      	strb	r2, [r3, #0]
}
   b6cda:	4770      	bx	lr
   b6cdc:	2003e64c 	.word	0x2003e64c

000b6ce0 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b6ce0:	1d01      	adds	r1, r0, #4
   b6ce2:	6800      	ldr	r0, [r0, #0]
   b6ce4:	f000 bc7a 	b.w	b75dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b6ce8 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b6ce8:	b510      	push	{r4, lr}
   b6cea:	4604      	mov	r4, r0
  m_csPin = csPin;
   b6cec:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b6cee:	6800      	ldr	r0, [r0, #0]
   b6cf0:	f000 fc46 	bl	b7580 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b6cf4:	7d20      	ldrb	r0, [r4, #20]
   b6cf6:	2101      	movs	r1, #1
   b6cf8:	f004 f8d2 	bl	baea0 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b6cfc:	7d20      	ldrb	r0, [r4, #20]
   b6cfe:	2101      	movs	r1, #1
}
   b6d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b6d04:	f004 b8dd 	b.w	baec2 <digitalWrite>

000b6d08 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b6d08:	6800      	ldr	r0, [r0, #0]
   b6d0a:	f000 bc4d 	b.w	b75a8 <_ZN8SPIClass14endTransactionEv>

000b6d0e <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b6d0e:	6800      	ldr	r0, [r0, #0]
   b6d10:	21ff      	movs	r1, #255	; 0xff
   b6d12:	f000 bcd1 	b.w	b76b8 <_ZN8SPIClass8transferEh>
	...

000b6d18 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b6d18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6d1a:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b6d1c:	4a07      	ldr	r2, [pc, #28]	; (b6d3c <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b6d1e:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b6d20:	2500      	movs	r5, #0
   b6d22:	4c07      	ldr	r4, [pc, #28]	; (b6d40 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b6d24:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b6d26:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b6d28:	460a      	mov	r2, r1
   b6d2a:	4629      	mov	r1, r5
   b6d2c:	f000 fcca 	bl	b76c4 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b6d30:	7823      	ldrb	r3, [r4, #0]
   b6d32:	2b00      	cmp	r3, #0
   b6d34:	d0fc      	beq.n	b6d30 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b6d36:	2000      	movs	r0, #0
   b6d38:	b003      	add	sp, #12
   b6d3a:	bd30      	pop	{r4, r5, pc}
   b6d3c:	000b6cd5 	.word	0x000b6cd5
   b6d40:	2003e64c 	.word	0x2003e64c

000b6d44 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b6d44:	6800      	ldr	r0, [r0, #0]
   b6d46:	f000 bcb7 	b.w	b76b8 <_ZN8SPIClass8transferEh>
	...

000b6d4c <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b6d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6d4e:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b6d50:	4a06      	ldr	r2, [pc, #24]	; (b6d6c <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b6d52:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b6d54:	2500      	movs	r5, #0
   b6d56:	4c06      	ldr	r4, [pc, #24]	; (b6d70 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b6d58:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b6d5a:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b6d5c:	462a      	mov	r2, r5
   b6d5e:	f000 fcb1 	bl	b76c4 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b6d62:	7823      	ldrb	r3, [r4, #0]
   b6d64:	2b00      	cmp	r3, #0
   b6d66:	d0fc      	beq.n	b6d62 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b6d68:	b003      	add	sp, #12
   b6d6a:	bd30      	pop	{r4, r5, pc}
   b6d6c:	000b6cd5 	.word	0x000b6cd5
   b6d70:	2003e64c 	.word	0x2003e64c

000b6d74 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6d74:	b508      	push	{r3, lr}
   b6d76:	4b02      	ldr	r3, [pc, #8]	; (b6d80 <netdb_freeaddrinfo+0xc>)
   b6d78:	681b      	ldr	r3, [r3, #0]
   b6d7a:	689b      	ldr	r3, [r3, #8]
   b6d7c:	9301      	str	r3, [sp, #4]
   b6d7e:	bd08      	pop	{r3, pc}
   b6d80:	00030268 	.word	0x00030268

000b6d84 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6d84:	b508      	push	{r3, lr}
   b6d86:	4b02      	ldr	r3, [pc, #8]	; (b6d90 <netdb_getaddrinfo+0xc>)
   b6d88:	681b      	ldr	r3, [r3, #0]
   b6d8a:	68db      	ldr	r3, [r3, #12]
   b6d8c:	9301      	str	r3, [sp, #4]
   b6d8e:	bd08      	pop	{r3, pc}
   b6d90:	00030268 	.word	0x00030268

000b6d94 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b6d94:	b508      	push	{r3, lr}
   b6d96:	4b02      	ldr	r3, [pc, #8]	; (b6da0 <HAL_Validate_Pin_Function+0xc>)
   b6d98:	681b      	ldr	r3, [r3, #0]
   b6d9a:	685b      	ldr	r3, [r3, #4]
   b6d9c:	9301      	str	r3, [sp, #4]
   b6d9e:	bd08      	pop	{r3, pc}
   b6da0:	0003022c 	.word	0x0003022c

000b6da4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6da4:	b508      	push	{r3, lr}
   b6da6:	4b02      	ldr	r3, [pc, #8]	; (b6db0 <HAL_Pin_Mode+0xc>)
   b6da8:	681b      	ldr	r3, [r3, #0]
   b6daa:	689b      	ldr	r3, [r3, #8]
   b6dac:	9301      	str	r3, [sp, #4]
   b6dae:	bd08      	pop	{r3, pc}
   b6db0:	0003022c 	.word	0x0003022c

000b6db4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6db4:	b508      	push	{r3, lr}
   b6db6:	4b02      	ldr	r3, [pc, #8]	; (b6dc0 <HAL_Get_Pin_Mode+0xc>)
   b6db8:	681b      	ldr	r3, [r3, #0]
   b6dba:	68db      	ldr	r3, [r3, #12]
   b6dbc:	9301      	str	r3, [sp, #4]
   b6dbe:	bd08      	pop	{r3, pc}
   b6dc0:	0003022c 	.word	0x0003022c

000b6dc4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6dc4:	b508      	push	{r3, lr}
   b6dc6:	4b02      	ldr	r3, [pc, #8]	; (b6dd0 <HAL_GPIO_Write+0xc>)
   b6dc8:	681b      	ldr	r3, [r3, #0]
   b6dca:	691b      	ldr	r3, [r3, #16]
   b6dcc:	9301      	str	r3, [sp, #4]
   b6dce:	bd08      	pop	{r3, pc}
   b6dd0:	0003022c 	.word	0x0003022c

000b6dd4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b6dd4:	b508      	push	{r3, lr}
   b6dd6:	4b02      	ldr	r3, [pc, #8]	; (b6de0 <HAL_GPIO_Read+0xc>)
   b6dd8:	681b      	ldr	r3, [r3, #0]
   b6dda:	695b      	ldr	r3, [r3, #20]
   b6ddc:	9301      	str	r3, [sp, #4]
   b6dde:	bd08      	pop	{r3, pc}
   b6de0:	0003022c 	.word	0x0003022c

000b6de4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6de4:	b508      	push	{r3, lr}
   b6de6:	4b02      	ldr	r3, [pc, #8]	; (b6df0 <hal_adc_read+0xc>)
   b6de8:	681b      	ldr	r3, [r3, #0]
   b6dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6dec:	9301      	str	r3, [sp, #4]
   b6dee:	bd08      	pop	{r3, pc}
   b6df0:	0003022c 	.word	0x0003022c

000b6df4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6df4:	b508      	push	{r3, lr}
   b6df6:	4b02      	ldr	r3, [pc, #8]	; (b6e00 <HAL_RNG_GetRandomNumber+0xc>)
   b6df8:	681b      	ldr	r3, [r3, #0]
   b6dfa:	685b      	ldr	r3, [r3, #4]
   b6dfc:	9301      	str	r3, [sp, #4]
   b6dfe:	bd08      	pop	{r3, pc}
   b6e00:	00030218 	.word	0x00030218

000b6e04 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6e04:	b508      	push	{r3, lr}
   b6e06:	4b02      	ldr	r3, [pc, #8]	; (b6e10 <HAL_Delay_Microseconds+0xc>)
   b6e08:	681b      	ldr	r3, [r3, #0]
   b6e0a:	68db      	ldr	r3, [r3, #12]
   b6e0c:	9301      	str	r3, [sp, #4]
   b6e0e:	bd08      	pop	{r3, pc}
   b6e10:	00030218 	.word	0x00030218

000b6e14 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b6e14:	b508      	push	{r3, lr}
   b6e16:	4b02      	ldr	r3, [pc, #8]	; (b6e20 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b6e18:	681b      	ldr	r3, [r3, #0]
   b6e1a:	691b      	ldr	r3, [r3, #16]
   b6e1c:	9301      	str	r3, [sp, #4]
   b6e1e:	bd08      	pop	{r3, pc}
   b6e20:	00030218 	.word	0x00030218

000b6e24 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6e24:	b508      	push	{r3, lr}
   b6e26:	4b02      	ldr	r3, [pc, #8]	; (b6e30 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6e28:	681b      	ldr	r3, [r3, #0]
   b6e2a:	695b      	ldr	r3, [r3, #20]
   b6e2c:	9301      	str	r3, [sp, #4]
   b6e2e:	bd08      	pop	{r3, pc}
   b6e30:	00030218 	.word	0x00030218

000b6e34 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b6e34:	b508      	push	{r3, lr}
   b6e36:	4b02      	ldr	r3, [pc, #8]	; (b6e40 <hal_rtc_time_is_valid+0xc>)
   b6e38:	681b      	ldr	r3, [r3, #0]
   b6e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6e3c:	9301      	str	r3, [sp, #4]
   b6e3e:	bd08      	pop	{r3, pc}
   b6e40:	00030218 	.word	0x00030218

000b6e44 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b6e44:	b508      	push	{r3, lr}
   b6e46:	4b02      	ldr	r3, [pc, #8]	; (b6e50 <hal_rtc_get_time+0xc>)
   b6e48:	681b      	ldr	r3, [r3, #0]
   b6e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b6e4c:	9301      	str	r3, [sp, #4]
   b6e4e:	bd08      	pop	{r3, pc}
   b6e50:	00030218 	.word	0x00030218

000b6e54 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b6e54:	b508      	push	{r3, lr}
   b6e56:	4b02      	ldr	r3, [pc, #8]	; (b6e60 <hal_ble_stack_init+0xc>)
   b6e58:	681b      	ldr	r3, [r3, #0]
   b6e5a:	689b      	ldr	r3, [r3, #8]
   b6e5c:	9301      	str	r3, [sp, #4]
   b6e5e:	bd08      	pop	{r3, pc}
   b6e60:	00030278 	.word	0x00030278

000b6e64 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b6e64:	b508      	push	{r3, lr}
   b6e66:	4b02      	ldr	r3, [pc, #8]	; (b6e70 <hal_ble_gap_start_scan+0xc>)
   b6e68:	681b      	ldr	r3, [r3, #0]
   b6e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b6e6c:	9301      	str	r3, [sp, #4]
   b6e6e:	bd08      	pop	{r3, pc}
   b6e70:	00030278 	.word	0x00030278

000b6e74 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b6e74:	b508      	push	{r3, lr}
   b6e76:	4b03      	ldr	r3, [pc, #12]	; (b6e84 <hal_ble_gap_stop_scan+0x10>)
   b6e78:	681b      	ldr	r3, [r3, #0]
   b6e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b6e7e:	9301      	str	r3, [sp, #4]
   b6e80:	bd08      	pop	{r3, pc}
   b6e82:	0000      	.short	0x0000
   b6e84:	00030278 	.word	0x00030278

000b6e88 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b6e88:	b508      	push	{r3, lr}
   b6e8a:	4b03      	ldr	r3, [pc, #12]	; (b6e98 <hal_ble_gap_disconnect+0x10>)
   b6e8c:	681b      	ldr	r3, [r3, #0]
   b6e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b6e92:	9301      	str	r3, [sp, #4]
   b6e94:	bd08      	pop	{r3, pc}
   b6e96:	0000      	.short	0x0000
   b6e98:	00030278 	.word	0x00030278

000b6e9c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6e9c:	b508      	push	{r3, lr}
   b6e9e:	4b03      	ldr	r3, [pc, #12]	; (b6eac <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b6ea0:	681b      	ldr	r3, [r3, #0]
   b6ea2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b6ea6:	9301      	str	r3, [sp, #4]
   b6ea8:	bd08      	pop	{r3, pc}
   b6eaa:	0000      	.short	0x0000
   b6eac:	00030278 	.word	0x00030278

000b6eb0 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b6eb0:	b508      	push	{r3, lr}
   b6eb2:	4b03      	ldr	r3, [pc, #12]	; (b6ec0 <hal_ble_gatt_client_discover_all_services+0x10>)
   b6eb4:	681b      	ldr	r3, [r3, #0]
   b6eb6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b6eba:	9301      	str	r3, [sp, #4]
   b6ebc:	bd08      	pop	{r3, pc}
   b6ebe:	0000      	.short	0x0000
   b6ec0:	00030278 	.word	0x00030278

000b6ec4 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b6ec4:	b508      	push	{r3, lr}
   b6ec6:	4b03      	ldr	r3, [pc, #12]	; (b6ed4 <hal_ble_gatt_client_discover_characteristics+0x10>)
   b6ec8:	681b      	ldr	r3, [r3, #0]
   b6eca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b6ece:	9301      	str	r3, [sp, #4]
   b6ed0:	bd08      	pop	{r3, pc}
   b6ed2:	0000      	.short	0x0000
   b6ed4:	00030278 	.word	0x00030278

000b6ed8 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6ed8:	b508      	push	{r3, lr}
   b6eda:	4b03      	ldr	r3, [pc, #12]	; (b6ee8 <hal_ble_gatt_client_write_with_response+0x10>)
   b6edc:	681b      	ldr	r3, [r3, #0]
   b6ede:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b6ee2:	9301      	str	r3, [sp, #4]
   b6ee4:	bd08      	pop	{r3, pc}
   b6ee6:	0000      	.short	0x0000
   b6ee8:	00030278 	.word	0x00030278

000b6eec <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6eec:	b508      	push	{r3, lr}
   b6eee:	4b03      	ldr	r3, [pc, #12]	; (b6efc <hal_ble_gatt_client_write_without_response+0x10>)
   b6ef0:	681b      	ldr	r3, [r3, #0]
   b6ef2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b6ef6:	9301      	str	r3, [sp, #4]
   b6ef8:	bd08      	pop	{r3, pc}
   b6efa:	0000      	.short	0x0000
   b6efc:	00030278 	.word	0x00030278

000b6f00 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b6f00:	b508      	push	{r3, lr}
   b6f02:	4b03      	ldr	r3, [pc, #12]	; (b6f10 <hal_ble_gatt_client_read+0x10>)
   b6f04:	681b      	ldr	r3, [r3, #0]
   b6f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b6f0a:	9301      	str	r3, [sp, #4]
   b6f0c:	bd08      	pop	{r3, pc}
   b6f0e:	0000      	.short	0x0000
   b6f10:	00030278 	.word	0x00030278

000b6f14 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b6f14:	b508      	push	{r3, lr}
   b6f16:	4b03      	ldr	r3, [pc, #12]	; (b6f24 <hal_ble_gap_connect+0x10>)
   b6f18:	681b      	ldr	r3, [r3, #0]
   b6f1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b6f1e:	9301      	str	r3, [sp, #4]
   b6f20:	bd08      	pop	{r3, pc}
   b6f22:	0000      	.short	0x0000
   b6f24:	00030278 	.word	0x00030278

000b6f28 <hal_ble_gap_get_connection_info>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   b6f28:	b508      	push	{r3, lr}
   b6f2a:	4b03      	ldr	r3, [pc, #12]	; (b6f38 <hal_ble_gap_get_connection_info+0x10>)
   b6f2c:	681b      	ldr	r3, [r3, #0]
   b6f2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   b6f32:	9301      	str	r3, [sp, #4]
   b6f34:	bd08      	pop	{r3, pc}
   b6f36:	0000      	.short	0x0000
   b6f38:	00030278 	.word	0x00030278

000b6f3c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b6f3c:	b508      	push	{r3, lr}
   b6f3e:	4b03      	ldr	r3, [pc, #12]	; (b6f4c <hal_ble_set_callback_on_periph_link_events+0x10>)
   b6f40:	681b      	ldr	r3, [r3, #0]
   b6f42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b6f46:	9301      	str	r3, [sp, #4]
   b6f48:	bd08      	pop	{r3, pc}
   b6f4a:	0000      	.short	0x0000
   b6f4c:	00030278 	.word	0x00030278

000b6f50 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b6f50:	b508      	push	{r3, lr}
   b6f52:	4b03      	ldr	r3, [pc, #12]	; (b6f60 <hal_ble_gatt_client_configure_cccd+0x10>)
   b6f54:	681b      	ldr	r3, [r3, #0]
   b6f56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b6f5a:	9301      	str	r3, [sp, #4]
   b6f5c:	bd08      	pop	{r3, pc}
   b6f5e:	0000      	.short	0x0000
   b6f60:	00030278 	.word	0x00030278

000b6f64 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6f64:	b508      	push	{r3, lr}
   b6f66:	4b03      	ldr	r3, [pc, #12]	; (b6f74 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b6f68:	681b      	ldr	r3, [r3, #0]
   b6f6a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b6f6e:	9301      	str	r3, [sp, #4]
   b6f70:	bd08      	pop	{r3, pc}
   b6f72:	0000      	.short	0x0000
   b6f74:	00030278 	.word	0x00030278

000b6f78 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6f78:	b508      	push	{r3, lr}
   b6f7a:	4b03      	ldr	r3, [pc, #12]	; (b6f88 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b6f7c:	681b      	ldr	r3, [r3, #0]
   b6f7e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b6f82:	9301      	str	r3, [sp, #4]
   b6f84:	bd08      	pop	{r3, pc}
   b6f86:	0000      	.short	0x0000
   b6f88:	00030278 	.word	0x00030278

000b6f8c <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b6f8c:	b508      	push	{r3, lr}
   b6f8e:	4b02      	ldr	r3, [pc, #8]	; (b6f98 <os_thread_yield+0xc>)
   b6f90:	681b      	ldr	r3, [r3, #0]
   b6f92:	68db      	ldr	r3, [r3, #12]
   b6f94:	9301      	str	r3, [sp, #4]
   b6f96:	bd08      	pop	{r3, pc}
   b6f98:	00030248 	.word	0x00030248

000b6f9c <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b6f9c:	b508      	push	{r3, lr}
   b6f9e:	4b02      	ldr	r3, [pc, #8]	; (b6fa8 <os_thread_scheduling+0xc>)
   b6fa0:	681b      	ldr	r3, [r3, #0]
   b6fa2:	69db      	ldr	r3, [r3, #28]
   b6fa4:	9301      	str	r3, [sp, #4]
   b6fa6:	bd08      	pop	{r3, pc}
   b6fa8:	00030248 	.word	0x00030248

000b6fac <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b6fac:	b508      	push	{r3, lr}
   b6fae:	4b02      	ldr	r3, [pc, #8]	; (b6fb8 <os_timer_create+0xc>)
   b6fb0:	681b      	ldr	r3, [r3, #0]
   b6fb2:	6a1b      	ldr	r3, [r3, #32]
   b6fb4:	9301      	str	r3, [sp, #4]
   b6fb6:	bd08      	pop	{r3, pc}
   b6fb8:	00030248 	.word	0x00030248

000b6fbc <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b6fbc:	b508      	push	{r3, lr}
   b6fbe:	4b02      	ldr	r3, [pc, #8]	; (b6fc8 <os_timer_destroy+0xc>)
   b6fc0:	681b      	ldr	r3, [r3, #0]
   b6fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6fc4:	9301      	str	r3, [sp, #4]
   b6fc6:	bd08      	pop	{r3, pc}
   b6fc8:	00030248 	.word	0x00030248

000b6fcc <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b6fcc:	b508      	push	{r3, lr}
   b6fce:	4b02      	ldr	r3, [pc, #8]	; (b6fd8 <os_timer_get_id+0xc>)
   b6fd0:	681b      	ldr	r3, [r3, #0]
   b6fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6fd4:	9301      	str	r3, [sp, #4]
   b6fd6:	bd08      	pop	{r3, pc}
   b6fd8:	00030248 	.word	0x00030248

000b6fdc <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b6fdc:	b508      	push	{r3, lr}
   b6fde:	4b02      	ldr	r3, [pc, #8]	; (b6fe8 <os_timer_change+0xc>)
   b6fe0:	681b      	ldr	r3, [r3, #0]
   b6fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6fe4:	9301      	str	r3, [sp, #4]
   b6fe6:	bd08      	pop	{r3, pc}
   b6fe8:	00030248 	.word	0x00030248

000b6fec <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6fec:	b508      	push	{r3, lr}
   b6fee:	4b02      	ldr	r3, [pc, #8]	; (b6ff8 <os_mutex_recursive_create+0xc>)
   b6ff0:	681b      	ldr	r3, [r3, #0]
   b6ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6ff4:	9301      	str	r3, [sp, #4]
   b6ff6:	bd08      	pop	{r3, pc}
   b6ff8:	00030248 	.word	0x00030248

000b6ffc <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b6ffc:	b508      	push	{r3, lr}
   b6ffe:	4b02      	ldr	r3, [pc, #8]	; (b7008 <os_mutex_recursive_lock+0xc>)
   b7000:	681b      	ldr	r3, [r3, #0]
   b7002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7004:	9301      	str	r3, [sp, #4]
   b7006:	bd08      	pop	{r3, pc}
   b7008:	00030248 	.word	0x00030248

000b700c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b700c:	b508      	push	{r3, lr}
   b700e:	4b02      	ldr	r3, [pc, #8]	; (b7018 <os_mutex_recursive_unlock+0xc>)
   b7010:	681b      	ldr	r3, [r3, #0]
   b7012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7014:	9301      	str	r3, [sp, #4]
   b7016:	bd08      	pop	{r3, pc}
   b7018:	00030248 	.word	0x00030248

000b701c <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b701c:	b508      	push	{r3, lr}
   b701e:	4b02      	ldr	r3, [pc, #8]	; (b7028 <os_timer_set_id+0xc>)
   b7020:	681b      	ldr	r3, [r3, #0]
   b7022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b7024:	9301      	str	r3, [sp, #4]
   b7026:	bd08      	pop	{r3, pc}
   b7028:	00030248 	.word	0x00030248

000b702c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b702c:	b508      	push	{r3, lr}
   b702e:	4b02      	ldr	r3, [pc, #8]	; (b7038 <inet_inet_ntop+0xc>)
   b7030:	681b      	ldr	r3, [r3, #0]
   b7032:	695b      	ldr	r3, [r3, #20]
   b7034:	9301      	str	r3, [sp, #4]
   b7036:	bd08      	pop	{r3, pc}
   b7038:	00030264 	.word	0x00030264

000b703c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b703c:	b508      	push	{r3, lr}
   b703e:	4b02      	ldr	r3, [pc, #8]	; (b7048 <hal_usart_write+0xc>)
   b7040:	681b      	ldr	r3, [r3, #0]
   b7042:	68db      	ldr	r3, [r3, #12]
   b7044:	9301      	str	r3, [sp, #4]
   b7046:	bd08      	pop	{r3, pc}
   b7048:	0003023c 	.word	0x0003023c

000b704c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b704c:	b508      	push	{r3, lr}
   b704e:	4b02      	ldr	r3, [pc, #8]	; (b7058 <hal_usart_available+0xc>)
   b7050:	681b      	ldr	r3, [r3, #0]
   b7052:	691b      	ldr	r3, [r3, #16]
   b7054:	9301      	str	r3, [sp, #4]
   b7056:	bd08      	pop	{r3, pc}
   b7058:	0003023c 	.word	0x0003023c

000b705c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b705c:	b508      	push	{r3, lr}
   b705e:	4b02      	ldr	r3, [pc, #8]	; (b7068 <hal_usart_read+0xc>)
   b7060:	681b      	ldr	r3, [r3, #0]
   b7062:	695b      	ldr	r3, [r3, #20]
   b7064:	9301      	str	r3, [sp, #4]
   b7066:	bd08      	pop	{r3, pc}
   b7068:	0003023c 	.word	0x0003023c

000b706c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b706c:	b508      	push	{r3, lr}
   b706e:	4b02      	ldr	r3, [pc, #8]	; (b7078 <hal_usart_peek+0xc>)
   b7070:	681b      	ldr	r3, [r3, #0]
   b7072:	699b      	ldr	r3, [r3, #24]
   b7074:	9301      	str	r3, [sp, #4]
   b7076:	bd08      	pop	{r3, pc}
   b7078:	0003023c 	.word	0x0003023c

000b707c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b707c:	b508      	push	{r3, lr}
   b707e:	4b02      	ldr	r3, [pc, #8]	; (b7088 <hal_usart_flush+0xc>)
   b7080:	681b      	ldr	r3, [r3, #0]
   b7082:	69db      	ldr	r3, [r3, #28]
   b7084:	9301      	str	r3, [sp, #4]
   b7086:	bd08      	pop	{r3, pc}
   b7088:	0003023c 	.word	0x0003023c

000b708c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b708c:	b508      	push	{r3, lr}
   b708e:	4b02      	ldr	r3, [pc, #8]	; (b7098 <hal_usart_is_enabled+0xc>)
   b7090:	681b      	ldr	r3, [r3, #0]
   b7092:	6a1b      	ldr	r3, [r3, #32]
   b7094:	9301      	str	r3, [sp, #4]
   b7096:	bd08      	pop	{r3, pc}
   b7098:	0003023c 	.word	0x0003023c

000b709c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b709c:	b508      	push	{r3, lr}
   b709e:	4b02      	ldr	r3, [pc, #8]	; (b70a8 <hal_usart_available_data_for_write+0xc>)
   b70a0:	681b      	ldr	r3, [r3, #0]
   b70a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b70a4:	9301      	str	r3, [sp, #4]
   b70a6:	bd08      	pop	{r3, pc}
   b70a8:	0003023c 	.word	0x0003023c

000b70ac <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b70ac:	b508      	push	{r3, lr}
   b70ae:	4b02      	ldr	r3, [pc, #8]	; (b70b8 <hal_usart_begin_config+0xc>)
   b70b0:	681b      	ldr	r3, [r3, #0]
   b70b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b70b4:	9301      	str	r3, [sp, #4]
   b70b6:	bd08      	pop	{r3, pc}
   b70b8:	0003023c 	.word	0x0003023c

000b70bc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b70bc:	b508      	push	{r3, lr}
   b70be:	4b02      	ldr	r3, [pc, #8]	; (b70c8 <hal_usart_init_ex+0xc>)
   b70c0:	681b      	ldr	r3, [r3, #0]
   b70c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b70c4:	9301      	str	r3, [sp, #4]
   b70c6:	bd08      	pop	{r3, pc}
   b70c8:	0003023c 	.word	0x0003023c

000b70cc <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b70cc:	b508      	push	{r3, lr}
   b70ce:	4b02      	ldr	r3, [pc, #8]	; (b70d8 <hal_i2c_write+0xc>)
   b70d0:	681b      	ldr	r3, [r3, #0]
   b70d2:	6a1b      	ldr	r3, [r3, #32]
   b70d4:	9301      	str	r3, [sp, #4]
   b70d6:	bd08      	pop	{r3, pc}
   b70d8:	00030228 	.word	0x00030228

000b70dc <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b70dc:	b508      	push	{r3, lr}
   b70de:	4b02      	ldr	r3, [pc, #8]	; (b70e8 <hal_i2c_available+0xc>)
   b70e0:	681b      	ldr	r3, [r3, #0]
   b70e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b70e4:	9301      	str	r3, [sp, #4]
   b70e6:	bd08      	pop	{r3, pc}
   b70e8:	00030228 	.word	0x00030228

000b70ec <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b70ec:	b508      	push	{r3, lr}
   b70ee:	4b02      	ldr	r3, [pc, #8]	; (b70f8 <hal_i2c_read+0xc>)
   b70f0:	681b      	ldr	r3, [r3, #0]
   b70f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b70f4:	9301      	str	r3, [sp, #4]
   b70f6:	bd08      	pop	{r3, pc}
   b70f8:	00030228 	.word	0x00030228

000b70fc <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b70fc:	b508      	push	{r3, lr}
   b70fe:	4b02      	ldr	r3, [pc, #8]	; (b7108 <hal_i2c_peek+0xc>)
   b7100:	681b      	ldr	r3, [r3, #0]
   b7102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7104:	9301      	str	r3, [sp, #4]
   b7106:	bd08      	pop	{r3, pc}
   b7108:	00030228 	.word	0x00030228

000b710c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b710c:	b508      	push	{r3, lr}
   b710e:	4b02      	ldr	r3, [pc, #8]	; (b7118 <hal_i2c_flush+0xc>)
   b7110:	681b      	ldr	r3, [r3, #0]
   b7112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7114:	9301      	str	r3, [sp, #4]
   b7116:	bd08      	pop	{r3, pc}
   b7118:	00030228 	.word	0x00030228

000b711c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b711c:	b508      	push	{r3, lr}
   b711e:	4b02      	ldr	r3, [pc, #8]	; (b7128 <hal_i2c_is_enabled+0xc>)
   b7120:	681b      	ldr	r3, [r3, #0]
   b7122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7124:	9301      	str	r3, [sp, #4]
   b7126:	bd08      	pop	{r3, pc}
   b7128:	00030228 	.word	0x00030228

000b712c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b712c:	b508      	push	{r3, lr}
   b712e:	4b02      	ldr	r3, [pc, #8]	; (b7138 <hal_i2c_init+0xc>)
   b7130:	681b      	ldr	r3, [r3, #0]
   b7132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7134:	9301      	str	r3, [sp, #4]
   b7136:	bd08      	pop	{r3, pc}
   b7138:	00030228 	.word	0x00030228

000b713c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b713c:	b508      	push	{r3, lr}
   b713e:	4b02      	ldr	r3, [pc, #8]	; (b7148 <hal_spi_begin+0xc>)
   b7140:	681b      	ldr	r3, [r3, #0]
   b7142:	681b      	ldr	r3, [r3, #0]
   b7144:	9301      	str	r3, [sp, #4]
   b7146:	bd08      	pop	{r3, pc}
   b7148:	00030230 	.word	0x00030230

000b714c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b714c:	b508      	push	{r3, lr}
   b714e:	4b02      	ldr	r3, [pc, #8]	; (b7158 <hal_spi_transfer+0xc>)
   b7150:	681b      	ldr	r3, [r3, #0]
   b7152:	695b      	ldr	r3, [r3, #20]
   b7154:	9301      	str	r3, [sp, #4]
   b7156:	bd08      	pop	{r3, pc}
   b7158:	00030230 	.word	0x00030230

000b715c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b715c:	b508      	push	{r3, lr}
   b715e:	4b02      	ldr	r3, [pc, #8]	; (b7168 <hal_spi_init+0xc>)
   b7160:	681b      	ldr	r3, [r3, #0]
   b7162:	69db      	ldr	r3, [r3, #28]
   b7164:	9301      	str	r3, [sp, #4]
   b7166:	bd08      	pop	{r3, pc}
   b7168:	00030230 	.word	0x00030230

000b716c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b716c:	b508      	push	{r3, lr}
   b716e:	4b02      	ldr	r3, [pc, #8]	; (b7178 <hal_spi_is_enabled+0xc>)
   b7170:	681b      	ldr	r3, [r3, #0]
   b7172:	6a1b      	ldr	r3, [r3, #32]
   b7174:	9301      	str	r3, [sp, #4]
   b7176:	bd08      	pop	{r3, pc}
   b7178:	00030230 	.word	0x00030230

000b717c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b717c:	b508      	push	{r3, lr}
   b717e:	4b02      	ldr	r3, [pc, #8]	; (b7188 <hal_spi_info+0xc>)
   b7180:	681b      	ldr	r3, [r3, #0]
   b7182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7184:	9301      	str	r3, [sp, #4]
   b7186:	bd08      	pop	{r3, pc}
   b7188:	00030230 	.word	0x00030230

000b718c <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b718c:	b508      	push	{r3, lr}
   b718e:	4b02      	ldr	r3, [pc, #8]	; (b7198 <hal_spi_transfer_dma+0xc>)
   b7190:	681b      	ldr	r3, [r3, #0]
   b7192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7194:	9301      	str	r3, [sp, #4]
   b7196:	bd08      	pop	{r3, pc}
   b7198:	00030230 	.word	0x00030230

000b719c <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b719c:	b508      	push	{r3, lr}
   b719e:	4b02      	ldr	r3, [pc, #8]	; (b71a8 <hal_spi_transfer_dma_status+0xc>)
   b71a0:	681b      	ldr	r3, [r3, #0]
   b71a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b71a4:	9301      	str	r3, [sp, #4]
   b71a6:	bd08      	pop	{r3, pc}
   b71a8:	00030230 	.word	0x00030230

000b71ac <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b71ac:	b508      	push	{r3, lr}
   b71ae:	4b02      	ldr	r3, [pc, #8]	; (b71b8 <hal_spi_set_settings+0xc>)
   b71b0:	681b      	ldr	r3, [r3, #0]
   b71b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b71b4:	9301      	str	r3, [sp, #4]
   b71b6:	bd08      	pop	{r3, pc}
   b71b8:	00030230 	.word	0x00030230

000b71bc <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b71bc:	b508      	push	{r3, lr}
   b71be:	4b02      	ldr	r3, [pc, #8]	; (b71c8 <hal_spi_acquire+0xc>)
   b71c0:	681b      	ldr	r3, [r3, #0]
   b71c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b71c4:	9301      	str	r3, [sp, #4]
   b71c6:	bd08      	pop	{r3, pc}
   b71c8:	00030230 	.word	0x00030230

000b71cc <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b71cc:	b508      	push	{r3, lr}
   b71ce:	4b02      	ldr	r3, [pc, #8]	; (b71d8 <hal_spi_release+0xc>)
   b71d0:	681b      	ldr	r3, [r3, #0]
   b71d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b71d4:	9301      	str	r3, [sp, #4]
   b71d6:	bd08      	pop	{r3, pc}
   b71d8:	00030230 	.word	0x00030230

000b71dc <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b71dc:	b508      	push	{r3, lr}
   b71de:	4b02      	ldr	r3, [pc, #8]	; (b71e8 <HAL_USB_USART_Init+0xc>)
   b71e0:	681b      	ldr	r3, [r3, #0]
   b71e2:	681b      	ldr	r3, [r3, #0]
   b71e4:	9301      	str	r3, [sp, #4]
   b71e6:	bd08      	pop	{r3, pc}
   b71e8:	0003024c 	.word	0x0003024c

000b71ec <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b71ec:	b508      	push	{r3, lr}
   b71ee:	4b02      	ldr	r3, [pc, #8]	; (b71f8 <HAL_USB_USART_Begin+0xc>)
   b71f0:	681b      	ldr	r3, [r3, #0]
   b71f2:	685b      	ldr	r3, [r3, #4]
   b71f4:	9301      	str	r3, [sp, #4]
   b71f6:	bd08      	pop	{r3, pc}
   b71f8:	0003024c 	.word	0x0003024c

000b71fc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b71fc:	b508      	push	{r3, lr}
   b71fe:	4b02      	ldr	r3, [pc, #8]	; (b7208 <HAL_USB_USART_Available_Data+0xc>)
   b7200:	681b      	ldr	r3, [r3, #0]
   b7202:	691b      	ldr	r3, [r3, #16]
   b7204:	9301      	str	r3, [sp, #4]
   b7206:	bd08      	pop	{r3, pc}
   b7208:	0003024c 	.word	0x0003024c

000b720c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b720c:	b508      	push	{r3, lr}
   b720e:	4b02      	ldr	r3, [pc, #8]	; (b7218 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7210:	681b      	ldr	r3, [r3, #0]
   b7212:	695b      	ldr	r3, [r3, #20]
   b7214:	9301      	str	r3, [sp, #4]
   b7216:	bd08      	pop	{r3, pc}
   b7218:	0003024c 	.word	0x0003024c

000b721c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b721c:	b508      	push	{r3, lr}
   b721e:	4b02      	ldr	r3, [pc, #8]	; (b7228 <HAL_USB_USART_Receive_Data+0xc>)
   b7220:	681b      	ldr	r3, [r3, #0]
   b7222:	699b      	ldr	r3, [r3, #24]
   b7224:	9301      	str	r3, [sp, #4]
   b7226:	bd08      	pop	{r3, pc}
   b7228:	0003024c 	.word	0x0003024c

000b722c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b722c:	b508      	push	{r3, lr}
   b722e:	4b02      	ldr	r3, [pc, #8]	; (b7238 <HAL_USB_USART_Send_Data+0xc>)
   b7230:	681b      	ldr	r3, [r3, #0]
   b7232:	69db      	ldr	r3, [r3, #28]
   b7234:	9301      	str	r3, [sp, #4]
   b7236:	bd08      	pop	{r3, pc}
   b7238:	0003024c 	.word	0x0003024c

000b723c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b723c:	b508      	push	{r3, lr}
   b723e:	4b02      	ldr	r3, [pc, #8]	; (b7248 <HAL_USB_USART_Flush_Data+0xc>)
   b7240:	681b      	ldr	r3, [r3, #0]
   b7242:	6a1b      	ldr	r3, [r3, #32]
   b7244:	9301      	str	r3, [sp, #4]
   b7246:	bd08      	pop	{r3, pc}
   b7248:	0003024c 	.word	0x0003024c

000b724c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b724c:	b508      	push	{r3, lr}
   b724e:	4b02      	ldr	r3, [pc, #8]	; (b7258 <panic_+0xc>)
   b7250:	681b      	ldr	r3, [r3, #0]
   b7252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7254:	9301      	str	r3, [sp, #4]
   b7256:	bd08      	pop	{r3, pc}
   b7258:	00030260 	.word	0x00030260

000b725c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b725c:	b508      	push	{r3, lr}
   b725e:	4b02      	ldr	r3, [pc, #8]	; (b7268 <log_message+0xc>)
   b7260:	681b      	ldr	r3, [r3, #0]
   b7262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7264:	9301      	str	r3, [sp, #4]
   b7266:	bd08      	pop	{r3, pc}
   b7268:	00030260 	.word	0x00030260

000b726c <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b726c:	b508      	push	{r3, lr}
   b726e:	4b02      	ldr	r3, [pc, #8]	; (b7278 <system_mode+0xc>)
   b7270:	681b      	ldr	r3, [r3, #0]
   b7272:	681b      	ldr	r3, [r3, #0]
   b7274:	9301      	str	r3, [sp, #4]
   b7276:	bd08      	pop	{r3, pc}
   b7278:	00030220 	.word	0x00030220

000b727c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b727c:	b508      	push	{r3, lr}
   b727e:	4b02      	ldr	r3, [pc, #8]	; (b7288 <set_system_mode+0xc>)
   b7280:	681b      	ldr	r3, [r3, #0]
   b7282:	685b      	ldr	r3, [r3, #4]
   b7284:	9301      	str	r3, [sp, #4]
   b7286:	bd08      	pop	{r3, pc}
   b7288:	00030220 	.word	0x00030220

000b728c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b728c:	b508      	push	{r3, lr}
   b728e:	4b02      	ldr	r3, [pc, #8]	; (b7298 <system_delay_ms+0xc>)
   b7290:	681b      	ldr	r3, [r3, #0]
   b7292:	695b      	ldr	r3, [r3, #20]
   b7294:	9301      	str	r3, [sp, #4]
   b7296:	bd08      	pop	{r3, pc}
   b7298:	00030220 	.word	0x00030220

000b729c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b729c:	b508      	push	{r3, lr}
   b729e:	4b02      	ldr	r3, [pc, #8]	; (b72a8 <application_thread_current+0xc>)
   b72a0:	681b      	ldr	r3, [r3, #0]
   b72a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b72a4:	9301      	str	r3, [sp, #4]
   b72a6:	bd08      	pop	{r3, pc}
   b72a8:	00030220 	.word	0x00030220

000b72ac <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b72ac:	b508      	push	{r3, lr}
   b72ae:	4b02      	ldr	r3, [pc, #8]	; (b72b8 <application_thread_invoke+0xc>)
   b72b0:	681b      	ldr	r3, [r3, #0]
   b72b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b72b4:	9301      	str	r3, [sp, #4]
   b72b6:	bd08      	pop	{r3, pc}
   b72b8:	00030220 	.word	0x00030220

000b72bc <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b72bc:	b508      	push	{r3, lr}
   b72be:	4b02      	ldr	r3, [pc, #8]	; (b72c8 <system_thread_get_state+0xc>)
   b72c0:	681b      	ldr	r3, [r3, #0]
   b72c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b72c4:	9301      	str	r3, [sp, #4]
   b72c6:	bd08      	pop	{r3, pc}
   b72c8:	00030220 	.word	0x00030220

000b72cc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b72cc:	b508      	push	{r3, lr}
   b72ce:	4b03      	ldr	r3, [pc, #12]	; (b72dc <system_ctrl_set_app_request_handler+0x10>)
   b72d0:	681b      	ldr	r3, [r3, #0]
   b72d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b72d6:	9301      	str	r3, [sp, #4]
   b72d8:	bd08      	pop	{r3, pc}
   b72da:	0000      	.short	0x0000
   b72dc:	00030220 	.word	0x00030220

000b72e0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b72e0:	b508      	push	{r3, lr}
   b72e2:	4b03      	ldr	r3, [pc, #12]	; (b72f0 <system_ctrl_set_result+0x10>)
   b72e4:	681b      	ldr	r3, [r3, #0]
   b72e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b72ea:	9301      	str	r3, [sp, #4]
   b72ec:	bd08      	pop	{r3, pc}
   b72ee:	0000      	.short	0x0000
   b72f0:	00030220 	.word	0x00030220

000b72f4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b72f4:	b508      	push	{r3, lr}
   b72f6:	4b02      	ldr	r3, [pc, #8]	; (b7300 <network_connect+0xc>)
   b72f8:	681b      	ldr	r3, [r3, #0]
   b72fa:	685b      	ldr	r3, [r3, #4]
   b72fc:	9301      	str	r3, [sp, #4]
   b72fe:	bd08      	pop	{r3, pc}
   b7300:	00030240 	.word	0x00030240

000b7304 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7304:	b508      	push	{r3, lr}
   b7306:	4b02      	ldr	r3, [pc, #8]	; (b7310 <network_connecting+0xc>)
   b7308:	681b      	ldr	r3, [r3, #0]
   b730a:	689b      	ldr	r3, [r3, #8]
   b730c:	9301      	str	r3, [sp, #4]
   b730e:	bd08      	pop	{r3, pc}
   b7310:	00030240 	.word	0x00030240

000b7314 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7314:	b508      	push	{r3, lr}
   b7316:	4b02      	ldr	r3, [pc, #8]	; (b7320 <network_disconnect+0xc>)
   b7318:	681b      	ldr	r3, [r3, #0]
   b731a:	68db      	ldr	r3, [r3, #12]
   b731c:	9301      	str	r3, [sp, #4]
   b731e:	bd08      	pop	{r3, pc}
   b7320:	00030240 	.word	0x00030240

000b7324 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7324:	b508      	push	{r3, lr}
   b7326:	4b02      	ldr	r3, [pc, #8]	; (b7330 <network_ready+0xc>)
   b7328:	681b      	ldr	r3, [r3, #0]
   b732a:	691b      	ldr	r3, [r3, #16]
   b732c:	9301      	str	r3, [sp, #4]
   b732e:	bd08      	pop	{r3, pc}
   b7330:	00030240 	.word	0x00030240

000b7334 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7334:	b508      	push	{r3, lr}
   b7336:	4b02      	ldr	r3, [pc, #8]	; (b7340 <network_on+0xc>)
   b7338:	681b      	ldr	r3, [r3, #0]
   b733a:	695b      	ldr	r3, [r3, #20]
   b733c:	9301      	str	r3, [sp, #4]
   b733e:	bd08      	pop	{r3, pc}
   b7340:	00030240 	.word	0x00030240

000b7344 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7344:	b508      	push	{r3, lr}
   b7346:	4b02      	ldr	r3, [pc, #8]	; (b7350 <network_off+0xc>)
   b7348:	681b      	ldr	r3, [r3, #0]
   b734a:	699b      	ldr	r3, [r3, #24]
   b734c:	9301      	str	r3, [sp, #4]
   b734e:	bd08      	pop	{r3, pc}
   b7350:	00030240 	.word	0x00030240

000b7354 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7354:	b508      	push	{r3, lr}
   b7356:	4b02      	ldr	r3, [pc, #8]	; (b7360 <network_listen+0xc>)
   b7358:	681b      	ldr	r3, [r3, #0]
   b735a:	69db      	ldr	r3, [r3, #28]
   b735c:	9301      	str	r3, [sp, #4]
   b735e:	bd08      	pop	{r3, pc}
   b7360:	00030240 	.word	0x00030240

000b7364 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7364:	b508      	push	{r3, lr}
   b7366:	4b02      	ldr	r3, [pc, #8]	; (b7370 <network_listening+0xc>)
   b7368:	681b      	ldr	r3, [r3, #0]
   b736a:	6a1b      	ldr	r3, [r3, #32]
   b736c:	9301      	str	r3, [sp, #4]
   b736e:	bd08      	pop	{r3, pc}
   b7370:	00030240 	.word	0x00030240

000b7374 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7374:	b508      	push	{r3, lr}
   b7376:	4b02      	ldr	r3, [pc, #8]	; (b7380 <network_set_listen_timeout+0xc>)
   b7378:	681b      	ldr	r3, [r3, #0]
   b737a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b737c:	9301      	str	r3, [sp, #4]
   b737e:	bd08      	pop	{r3, pc}
   b7380:	00030240 	.word	0x00030240

000b7384 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7384:	b508      	push	{r3, lr}
   b7386:	4b02      	ldr	r3, [pc, #8]	; (b7390 <network_get_listen_timeout+0xc>)
   b7388:	681b      	ldr	r3, [r3, #0]
   b738a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b738c:	9301      	str	r3, [sp, #4]
   b738e:	bd08      	pop	{r3, pc}
   b7390:	00030240 	.word	0x00030240

000b7394 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7394:	b508      	push	{r3, lr}
   b7396:	4b02      	ldr	r3, [pc, #8]	; (b73a0 <network_is_on+0xc>)
   b7398:	681b      	ldr	r3, [r3, #0]
   b739a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b739c:	9301      	str	r3, [sp, #4]
   b739e:	bd08      	pop	{r3, pc}
   b73a0:	00030240 	.word	0x00030240

000b73a4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b73a4:	b508      	push	{r3, lr}
   b73a6:	4b02      	ldr	r3, [pc, #8]	; (b73b0 <network_is_off+0xc>)
   b73a8:	681b      	ldr	r3, [r3, #0]
   b73aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b73ac:	9301      	str	r3, [sp, #4]
   b73ae:	bd08      	pop	{r3, pc}
   b73b0:	00030240 	.word	0x00030240

000b73b4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b73b4:	b508      	push	{r3, lr}
   b73b6:	4b02      	ldr	r3, [pc, #8]	; (b73c0 <spark_process+0xc>)
   b73b8:	681b      	ldr	r3, [r3, #0]
   b73ba:	689b      	ldr	r3, [r3, #8]
   b73bc:	9301      	str	r3, [sp, #4]
   b73be:	bd08      	pop	{r3, pc}
   b73c0:	00030244 	.word	0x00030244

000b73c4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b73c4:	b508      	push	{r3, lr}
   b73c6:	4b02      	ldr	r3, [pc, #8]	; (b73d0 <spark_cloud_flag_connected+0xc>)
   b73c8:	681b      	ldr	r3, [r3, #0]
   b73ca:	695b      	ldr	r3, [r3, #20]
   b73cc:	9301      	str	r3, [sp, #4]
   b73ce:	bd08      	pop	{r3, pc}
   b73d0:	00030244 	.word	0x00030244

000b73d4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b73d4:	b508      	push	{r3, lr}
   b73d6:	4b02      	ldr	r3, [pc, #8]	; (b73e0 <spark_send_event+0xc>)
   b73d8:	681b      	ldr	r3, [r3, #0]
   b73da:	6a1b      	ldr	r3, [r3, #32]
   b73dc:	9301      	str	r3, [sp, #4]
   b73de:	bd08      	pop	{r3, pc}
   b73e0:	00030244 	.word	0x00030244

000b73e4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b73e4:	b508      	push	{r3, lr}
   b73e6:	4b02      	ldr	r3, [pc, #8]	; (b73f0 <spark_subscribe+0xc>)
   b73e8:	681b      	ldr	r3, [r3, #0]
   b73ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b73ec:	9301      	str	r3, [sp, #4]
   b73ee:	bd08      	pop	{r3, pc}
   b73f0:	00030244 	.word	0x00030244

000b73f4 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b73f4:	b508      	push	{r3, lr}
   b73f6:	4b02      	ldr	r3, [pc, #8]	; (b7400 <spark_sync_time_pending+0xc>)
   b73f8:	681b      	ldr	r3, [r3, #0]
   b73fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b73fc:	9301      	str	r3, [sp, #4]
   b73fe:	bd08      	pop	{r3, pc}
   b7400:	00030244 	.word	0x00030244

000b7404 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7404:	b508      	push	{r3, lr}
   b7406:	4b02      	ldr	r3, [pc, #8]	; (b7410 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7408:	681b      	ldr	r3, [r3, #0]
   b740a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b740c:	9301      	str	r3, [sp, #4]
   b740e:	bd08      	pop	{r3, pc}
   b7410:	00030244 	.word	0x00030244

000b7414 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7414:	b508      	push	{r3, lr}
   b7416:	4b02      	ldr	r3, [pc, #8]	; (b7420 <malloc+0xc>)
   b7418:	681b      	ldr	r3, [r3, #0]
   b741a:	681b      	ldr	r3, [r3, #0]
   b741c:	9301      	str	r3, [sp, #4]
   b741e:	bd08      	pop	{r3, pc}
   b7420:	0003021c 	.word	0x0003021c

000b7424 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7424:	b508      	push	{r3, lr}
   b7426:	4b02      	ldr	r3, [pc, #8]	; (b7430 <free+0xc>)
   b7428:	681b      	ldr	r3, [r3, #0]
   b742a:	685b      	ldr	r3, [r3, #4]
   b742c:	9301      	str	r3, [sp, #4]
   b742e:	bd08      	pop	{r3, pc}
   b7430:	0003021c 	.word	0x0003021c

000b7434 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7434:	b508      	push	{r3, lr}
   b7436:	4b02      	ldr	r3, [pc, #8]	; (b7440 <realloc+0xc>)
   b7438:	681b      	ldr	r3, [r3, #0]
   b743a:	689b      	ldr	r3, [r3, #8]
   b743c:	9301      	str	r3, [sp, #4]
   b743e:	bd08      	pop	{r3, pc}
   b7440:	0003021c 	.word	0x0003021c

000b7444 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b7444:	b508      	push	{r3, lr}
   b7446:	4b02      	ldr	r3, [pc, #8]	; (b7450 <sprintf+0xc>)
   b7448:	681b      	ldr	r3, [r3, #0]
   b744a:	68db      	ldr	r3, [r3, #12]
   b744c:	9301      	str	r3, [sp, #4]
   b744e:	bd08      	pop	{r3, pc}
   b7450:	0003021c 	.word	0x0003021c

000b7454 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b7454:	b508      	push	{r3, lr}
   b7456:	4b02      	ldr	r3, [pc, #8]	; (b7460 <sscanf+0xc>)
   b7458:	681b      	ldr	r3, [r3, #0]
   b745a:	695b      	ldr	r3, [r3, #20]
   b745c:	9301      	str	r3, [sp, #4]
   b745e:	bd08      	pop	{r3, pc}
   b7460:	0003021c 	.word	0x0003021c

000b7464 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7464:	b508      	push	{r3, lr}
   b7466:	4b02      	ldr	r3, [pc, #8]	; (b7470 <snprintf+0xc>)
   b7468:	681b      	ldr	r3, [r3, #0]
   b746a:	69db      	ldr	r3, [r3, #28]
   b746c:	9301      	str	r3, [sp, #4]
   b746e:	bd08      	pop	{r3, pc}
   b7470:	0003021c 	.word	0x0003021c

000b7474 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7474:	b508      	push	{r3, lr}
   b7476:	4b02      	ldr	r3, [pc, #8]	; (b7480 <vsnprintf+0xc>)
   b7478:	681b      	ldr	r3, [r3, #0]
   b747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b747c:	9301      	str	r3, [sp, #4]
   b747e:	bd08      	pop	{r3, pc}
   b7480:	0003021c 	.word	0x0003021c

000b7484 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7484:	b508      	push	{r3, lr}
   b7486:	4b02      	ldr	r3, [pc, #8]	; (b7490 <abort+0xc>)
   b7488:	681b      	ldr	r3, [r3, #0]
   b748a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b748c:	9301      	str	r3, [sp, #4]
   b748e:	bd08      	pop	{r3, pc}
   b7490:	0003021c 	.word	0x0003021c

000b7494 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7494:	b508      	push	{r3, lr}
   b7496:	4b02      	ldr	r3, [pc, #8]	; (b74a0 <_malloc_r+0xc>)
   b7498:	681b      	ldr	r3, [r3, #0]
   b749a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b749c:	9301      	str	r3, [sp, #4]
   b749e:	bd08      	pop	{r3, pc}
   b74a0:	0003021c 	.word	0x0003021c

000b74a4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b74a4:	b508      	push	{r3, lr}
   b74a6:	4b02      	ldr	r3, [pc, #8]	; (b74b0 <__errno+0xc>)
   b74a8:	681b      	ldr	r3, [r3, #0]
   b74aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b74ac:	9301      	str	r3, [sp, #4]
   b74ae:	bd08      	pop	{r3, pc}
   b74b0:	0003021c 	.word	0x0003021c

000b74b4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b74b4:	b508      	push	{r3, lr}
   b74b6:	4b02      	ldr	r3, [pc, #8]	; (b74c0 <__assert_func+0xc>)
   b74b8:	681b      	ldr	r3, [r3, #0]
   b74ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b74bc:	9301      	str	r3, [sp, #4]
   b74be:	bd08      	pop	{r3, pc}
   b74c0:	0003021c 	.word	0x0003021c

000b74c4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b74c4:	b508      	push	{r3, lr}
   b74c6:	4b02      	ldr	r3, [pc, #8]	; (b74d0 <newlib_impure_ptr_callback+0xc>)
   b74c8:	681b      	ldr	r3, [r3, #0]
   b74ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b74cc:	9301      	str	r3, [sp, #4]
   b74ce:	bd08      	pop	{r3, pc}
   b74d0:	0003021c 	.word	0x0003021c

000b74d4 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b74d4:	b508      	push	{r3, lr}
   b74d6:	4b02      	ldr	r3, [pc, #8]	; (b74e0 <localtime_r+0xc>)
   b74d8:	681b      	ldr	r3, [r3, #0]
   b74da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b74dc:	9301      	str	r3, [sp, #4]
   b74de:	bd08      	pop	{r3, pc}
   b74e0:	0003021c 	.word	0x0003021c

000b74e4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b74e4:	2200      	movs	r2, #0
   b74e6:	6840      	ldr	r0, [r0, #4]
   b74e8:	4611      	mov	r1, r2
   b74ea:	f7ff bf3b 	b.w	b7364 <network_listening>

000b74ee <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b74ee:	2200      	movs	r2, #0
   b74f0:	6840      	ldr	r0, [r0, #4]
   b74f2:	4611      	mov	r1, r2
   b74f4:	f7ff bf46 	b.w	b7384 <network_get_listen_timeout>

000b74f8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b74f8:	6840      	ldr	r0, [r0, #4]
   b74fa:	2200      	movs	r2, #0
   b74fc:	f7ff bf3a 	b.w	b7374 <network_set_listen_timeout>

000b7500 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7500:	6840      	ldr	r0, [r0, #4]
   b7502:	2200      	movs	r2, #0
   b7504:	f081 0101 	eor.w	r1, r1, #1
   b7508:	f7ff bf24 	b.w	b7354 <network_listen>

000b750c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b750c:	2300      	movs	r3, #0
   b750e:	6840      	ldr	r0, [r0, #4]
   b7510:	461a      	mov	r2, r3
   b7512:	4619      	mov	r1, r3
   b7514:	f7ff bf16 	b.w	b7344 <network_off>

000b7518 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7518:	2300      	movs	r3, #0
   b751a:	6840      	ldr	r0, [r0, #4]
   b751c:	461a      	mov	r2, r3
   b751e:	4619      	mov	r1, r3
   b7520:	f7ff bf08 	b.w	b7334 <network_on>

000b7524 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7524:	2200      	movs	r2, #0
   b7526:	6840      	ldr	r0, [r0, #4]
   b7528:	4611      	mov	r1, r2
   b752a:	f7ff befb 	b.w	b7324 <network_ready>

000b752e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b752e:	2200      	movs	r2, #0
   b7530:	6840      	ldr	r0, [r0, #4]
   b7532:	4611      	mov	r1, r2
   b7534:	f7ff bee6 	b.w	b7304 <network_connecting>

000b7538 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7538:	6840      	ldr	r0, [r0, #4]
   b753a:	2200      	movs	r2, #0
   b753c:	2102      	movs	r1, #2
   b753e:	f7ff bee9 	b.w	b7314 <network_disconnect>

000b7542 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7542:	2300      	movs	r3, #0
   b7544:	6840      	ldr	r0, [r0, #4]
   b7546:	461a      	mov	r2, r3
   b7548:	f7ff bed4 	b.w	b72f4 <network_connect>

000b754c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b754c:	4b02      	ldr	r3, [pc, #8]	; (b7558 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b754e:	2203      	movs	r2, #3
   b7550:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7552:	4a02      	ldr	r2, [pc, #8]	; (b755c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7554:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7556:	4770      	bx	lr
   b7558:	2003e650 	.word	0x2003e650
   b755c:	000be3f0 	.word	0x000be3f0

000b7560 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7560:	2100      	movs	r1, #0
   b7562:	f7ff be33 	b.w	b71cc <hal_spi_release>

000b7566 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7566:	2100      	movs	r1, #0
   b7568:	f7ff be28 	b.w	b71bc <hal_spi_acquire>

000b756c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b756c:	b510      	push	{r4, lr}
   b756e:	4604      	mov	r4, r0
   b7570:	4608      	mov	r0, r1
{
    _spi = spi;
   b7572:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7574:	f7ff fdf2 	bl	b715c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7578:	2300      	movs	r3, #0
   b757a:	6063      	str	r3, [r4, #4]
}
   b757c:	4620      	mov	r0, r4
   b757e:	bd10      	pop	{r4, pc}

000b7580 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7580:	b513      	push	{r0, r1, r4, lr}
   b7582:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7584:	7800      	ldrb	r0, [r0, #0]
   b7586:	f7ff ffee 	bl	b7566 <_ZN8SPIClass4lockEv.isra.0>
   b758a:	b958      	cbnz	r0, b75a4 <_ZN8SPIClass5beginEv+0x24>
   b758c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b758e:	9001      	str	r0, [sp, #4]
   b7590:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7594:	f7ff fdd2 	bl	b713c <hal_spi_begin>
        unlock();
   b7598:	9801      	ldr	r0, [sp, #4]
    }
}
   b759a:	b002      	add	sp, #8
   b759c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b75a0:	f7ff bfde 	b.w	b7560 <_ZN8SPIClass6unlockEv.isra.0>
   b75a4:	b002      	add	sp, #8
   b75a6:	bd10      	pop	{r4, pc}

000b75a8 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b75a8:	7800      	ldrb	r0, [r0, #0]
   b75aa:	f7ff bfd9 	b.w	b7560 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b75b0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b75b0:	0840      	lsrs	r0, r0, #1
{
   b75b2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b75b4:	6018      	str	r0, [r3, #0]
   b75b6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b75b8:	6818      	ldr	r0, [r3, #0]
   b75ba:	4288      	cmp	r0, r1
   b75bc:	b2e5      	uxtb	r5, r4
   b75be:	d906      	bls.n	b75ce <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b75c0:	3401      	adds	r4, #1
   b75c2:	2c08      	cmp	r4, #8
   b75c4:	d002      	beq.n	b75cc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b75c6:	0840      	lsrs	r0, r0, #1
   b75c8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b75ca:	e7f5      	b.n	b75b8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b75cc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b75ce:	4b02      	ldr	r3, [pc, #8]	; (b75d8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b75d0:	5d5b      	ldrb	r3, [r3, r5]
   b75d2:	7013      	strb	r3, [r2, #0]
}
   b75d4:	bd30      	pop	{r4, r5, pc}
   b75d6:	bf00      	nop
   b75d8:	000be424 	.word	0x000be424

000b75dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b75dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b75e0:	4606      	mov	r6, r0
   b75e2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b75e4:	7800      	ldrb	r0, [r0, #0]
{
   b75e6:	460c      	mov	r4, r1
    CHECK(lock());
   b75e8:	f7ff ffbd 	bl	b7566 <_ZN8SPIClass4lockEv.isra.0>
   b75ec:	2800      	cmp	r0, #0
   b75ee:	db1b      	blt.n	b7628 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b75f0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b75f2:	2214      	movs	r2, #20
   b75f4:	2100      	movs	r1, #0
   b75f6:	a809      	add	r0, sp, #36	; 0x24
   b75f8:	f004 fb8d 	bl	bbd16 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b75fc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b75fe:	2200      	movs	r2, #0
   b7600:	a909      	add	r1, sp, #36	; 0x24
   b7602:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7604:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7608:	f7ff fdb8 	bl	b717c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b760c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7610:	b113      	cbz	r3, b7618 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7612:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b7616:	b155      	cbz	r5, b762e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7618:	2700      	movs	r7, #0
   b761a:	46b9      	mov	r9, r7
   b761c:	46b8      	mov	r8, r7
   b761e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7620:	7923      	ldrb	r3, [r4, #4]
   b7622:	b15d      	cbz	r5, b763c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7624:	b1c3      	cbz	r3, b7658 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b7626:	2000      	movs	r0, #0
}
   b7628:	b00f      	add	sp, #60	; 0x3c
   b762a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b762e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b7632:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b7636:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b763a:	e7f1      	b.n	b7620 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b763c:	2b00      	cmp	r3, #0
   b763e:	d135      	bne.n	b76ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7640:	68a3      	ldr	r3, [r4, #8]
   b7642:	4543      	cmp	r3, r8
   b7644:	d108      	bne.n	b7658 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b7646:	f88d 9020 	strb.w	r9, [sp, #32]
   b764a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b764e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7652:	89a3      	ldrh	r3, [r4, #12]
   b7654:	429a      	cmp	r2, r3
   b7656:	d0e6      	beq.n	b7626 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7658:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b765a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b765c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7660:	980a      	ldr	r0, [sp, #40]	; 0x28
   b7662:	ab04      	add	r3, sp, #16
   b7664:	f10d 020f 	add.w	r2, sp, #15
   b7668:	f7ff ffa2 	bl	b75b0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b766c:	7921      	ldrb	r1, [r4, #4]
   b766e:	b985      	cbnz	r5, b7692 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7670:	b989      	cbnz	r1, b7696 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7672:	68a3      	ldr	r3, [r4, #8]
   b7674:	4543      	cmp	r3, r8
   b7676:	d30e      	bcc.n	b7696 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7678:	f88d 9020 	strb.w	r9, [sp, #32]
   b767c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7680:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7684:	89a3      	ldrh	r3, [r4, #12]
   b7686:	429a      	cmp	r2, r3
   b7688:	d105      	bne.n	b7696 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b768a:	9b04      	ldr	r3, [sp, #16]
   b768c:	4543      	cmp	r3, r8
   b768e:	d102      	bne.n	b7696 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7690:	e7c9      	b.n	b7626 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b7692:	2900      	cmp	r1, #0
   b7694:	d1f9      	bne.n	b768a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7696:	2300      	movs	r3, #0
   b7698:	9301      	str	r3, [sp, #4]
   b769a:	7b63      	ldrb	r3, [r4, #13]
   b769c:	9300      	str	r3, [sp, #0]
   b769e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b76a2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b76a4:	7830      	ldrb	r0, [r6, #0]
   b76a6:	f7ff fd81 	bl	b71ac <hal_spi_set_settings>
   b76aa:	e7bc      	b.n	b7626 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b76ac:	e9cd 5500 	strd	r5, r5, [sp]
   b76b0:	462b      	mov	r3, r5
   b76b2:	462a      	mov	r2, r5
   b76b4:	2101      	movs	r1, #1
   b76b6:	e7f5      	b.n	b76a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b76b8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b76b8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b76ba:	7800      	ldrb	r0, [r0, #0]
   b76bc:	f7ff fd46 	bl	b714c <hal_spi_transfer>
}
   b76c0:	b2c0      	uxtb	r0, r0
   b76c2:	bd08      	pop	{r3, pc}

000b76c4 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b76c4:	b530      	push	{r4, r5, lr}
   b76c6:	b087      	sub	sp, #28
   b76c8:	4604      	mov	r4, r0
   b76ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b76cc:	9500      	str	r5, [sp, #0]
   b76ce:	7800      	ldrb	r0, [r0, #0]
   b76d0:	f7ff fd5c 	bl	b718c <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b76d4:	b93d      	cbnz	r5, b76e6 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b76d6:	7820      	ldrb	r0, [r4, #0]
   b76d8:	a902      	add	r1, sp, #8
   b76da:	f7ff fd5f 	bl	b719c <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b76de:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b76e2:	07db      	lsls	r3, r3, #31
   b76e4:	d4f7      	bmi.n	b76d6 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b76e6:	b007      	add	sp, #28
   b76e8:	bd30      	pop	{r4, r5, pc}
	...

000b76ec <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b76ec:	4b05      	ldr	r3, [pc, #20]	; (b7704 <_GLOBAL__sub_I_System+0x18>)
   b76ee:	2202      	movs	r2, #2
   b76f0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b76f2:	4b05      	ldr	r3, [pc, #20]	; (b7708 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b76f4:	4a05      	ldr	r2, [pc, #20]	; (b770c <_GLOBAL__sub_I_System+0x20>)
   b76f6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b76f8:	2000      	movs	r0, #0
   b76fa:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b76fe:	f7ff bdbd 	b.w	b727c <set_system_mode>
   b7702:	bf00      	nop
   b7704:	2003e664 	.word	0x2003e664
   b7708:	2003e658 	.word	0x2003e658
   b770c:	ffff0000 	.word	0xffff0000

000b7710 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7710:	b510      	push	{r4, lr}
   b7712:	4604      	mov	r4, r0
{
	free(buffer);
   b7714:	6800      	ldr	r0, [r0, #0]
   b7716:	f7ff fe85 	bl	b7424 <free>
}
   b771a:	4620      	mov	r0, r4
   b771c:	bd10      	pop	{r4, pc}

000b771e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b771e:	b510      	push	{r4, lr}
   b7720:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7722:	6800      	ldr	r0, [r0, #0]
   b7724:	b108      	cbz	r0, b772a <_ZN6String10invalidateEv+0xc>
   b7726:	f7ff fe7d 	bl	b7424 <free>
	buffer = NULL;
   b772a:	2300      	movs	r3, #0
	capacity = len = 0;
   b772c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7730:	6023      	str	r3, [r4, #0]
}
   b7732:	bd10      	pop	{r4, pc}

000b7734 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7734:	b538      	push	{r3, r4, r5, lr}
   b7736:	4604      	mov	r4, r0
   b7738:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b773a:	6800      	ldr	r0, [r0, #0]
   b773c:	3101      	adds	r1, #1
   b773e:	f7ff fe79 	bl	b7434 <realloc>
	if (newbuffer) {
   b7742:	b110      	cbz	r0, b774a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7744:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7748:	2001      	movs	r0, #1
	}
	return 0;
}
   b774a:	bd38      	pop	{r3, r4, r5, pc}

000b774c <_ZN6String7reserveEj>:
{
   b774c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b774e:	6803      	ldr	r3, [r0, #0]
{
   b7750:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7752:	b123      	cbz	r3, b775e <_ZN6String7reserveEj+0x12>
   b7754:	6843      	ldr	r3, [r0, #4]
   b7756:	428b      	cmp	r3, r1
   b7758:	d301      	bcc.n	b775e <_ZN6String7reserveEj+0x12>
   b775a:	2001      	movs	r0, #1
}
   b775c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b775e:	4620      	mov	r0, r4
   b7760:	f7ff ffe8 	bl	b7734 <_ZN6String12changeBufferEj>
   b7764:	2800      	cmp	r0, #0
   b7766:	d0f9      	beq.n	b775c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7768:	68a3      	ldr	r3, [r4, #8]
   b776a:	2b00      	cmp	r3, #0
   b776c:	d1f5      	bne.n	b775a <_ZN6String7reserveEj+0xe>
   b776e:	6822      	ldr	r2, [r4, #0]
   b7770:	7013      	strb	r3, [r2, #0]
   b7772:	e7f2      	b.n	b775a <_ZN6String7reserveEj+0xe>

000b7774 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7774:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7776:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7778:	4611      	mov	r1, r2
   b777a:	9201      	str	r2, [sp, #4]
{
   b777c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b777e:	f7ff ffe5 	bl	b774c <_ZN6String7reserveEj>
   b7782:	9a01      	ldr	r2, [sp, #4]
   b7784:	b928      	cbnz	r0, b7792 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7786:	4620      	mov	r0, r4
   b7788:	f7ff ffc9 	bl	b771e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b778c:	4620      	mov	r0, r4
   b778e:	b003      	add	sp, #12
   b7790:	bd30      	pop	{r4, r5, pc}
	len = length;
   b7792:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7794:	4629      	mov	r1, r5
   b7796:	6820      	ldr	r0, [r4, #0]
   b7798:	f004 fa95 	bl	bbcc6 <memcpy>
	buffer[len] = 0;
   b779c:	6822      	ldr	r2, [r4, #0]
   b779e:	68a3      	ldr	r3, [r4, #8]
   b77a0:	2100      	movs	r1, #0
   b77a2:	54d1      	strb	r1, [r2, r3]
	return *this;
   b77a4:	e7f2      	b.n	b778c <_ZN6String4copyEPKcj+0x18>

000b77a6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b77a6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b77a8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b77aa:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b77ae:	4604      	mov	r4, r0
	len = 0;
   b77b0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b77b2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b77b4:	b141      	cbz	r1, b77c8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b77b6:	4608      	mov	r0, r1
   b77b8:	9101      	str	r1, [sp, #4]
   b77ba:	f004 fb22 	bl	bbe02 <strlen>
   b77be:	9901      	ldr	r1, [sp, #4]
   b77c0:	4602      	mov	r2, r0
   b77c2:	4620      	mov	r0, r4
   b77c4:	f7ff ffd6 	bl	b7774 <_ZN6String4copyEPKcj>
}
   b77c8:	4620      	mov	r0, r4
   b77ca:	b002      	add	sp, #8
   b77cc:	bd10      	pop	{r4, pc}

000b77ce <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b77ce:	b538      	push	{r3, r4, r5, lr}
   b77d0:	4605      	mov	r5, r0
	if (buffer) {
   b77d2:	6800      	ldr	r0, [r0, #0]
{
   b77d4:	460c      	mov	r4, r1
	if (buffer) {
   b77d6:	b168      	cbz	r0, b77f4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b77d8:	686a      	ldr	r2, [r5, #4]
   b77da:	688b      	ldr	r3, [r1, #8]
   b77dc:	429a      	cmp	r2, r3
   b77de:	d307      	bcc.n	b77f0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b77e0:	6809      	ldr	r1, [r1, #0]
   b77e2:	f004 fae8 	bl	bbdb6 <strcpy>
			len = rhs.len;
   b77e6:	68a3      	ldr	r3, [r4, #8]
   b77e8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b77ea:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b77ec:	60a3      	str	r3, [r4, #8]
}
   b77ee:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b77f0:	f7ff fe18 	bl	b7424 <free>
	buffer = rhs.buffer;
   b77f4:	6823      	ldr	r3, [r4, #0]
   b77f6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b77f8:	6863      	ldr	r3, [r4, #4]
   b77fa:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b77fc:	68a3      	ldr	r3, [r4, #8]
   b77fe:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b7800:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b7802:	e9c4 3300 	strd	r3, r3, [r4]
   b7806:	e7f1      	b.n	b77ec <_ZN6String4moveERS_+0x1e>

000b7808 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b7808:	b510      	push	{r4, lr}
	buffer = NULL;
   b780a:	2300      	movs	r3, #0
	capacity = 0;
   b780c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b7810:	4604      	mov	r4, r0
	len = 0;
   b7812:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7814:	7303      	strb	r3, [r0, #12]
	move(rval);
   b7816:	f7ff ffda 	bl	b77ce <_ZN6String4moveERS_>
}
   b781a:	4620      	mov	r0, r4
   b781c:	bd10      	pop	{r4, pc}

000b781e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b781e:	4288      	cmp	r0, r1
{
   b7820:	b510      	push	{r4, lr}
   b7822:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b7824:	d005      	beq.n	b7832 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b7826:	680b      	ldr	r3, [r1, #0]
   b7828:	b12b      	cbz	r3, b7836 <_ZN6StringaSERKS_+0x18>
   b782a:	688a      	ldr	r2, [r1, #8]
   b782c:	4619      	mov	r1, r3
   b782e:	f7ff ffa1 	bl	b7774 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7832:	4620      	mov	r0, r4
   b7834:	bd10      	pop	{r4, pc}
	else invalidate();
   b7836:	f7ff ff72 	bl	b771e <_ZN6String10invalidateEv>
   b783a:	e7fa      	b.n	b7832 <_ZN6StringaSERKS_+0x14>

000b783c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b783c:	b510      	push	{r4, lr}
	buffer = NULL;
   b783e:	2300      	movs	r3, #0
String::String(const String &value)
   b7840:	4604      	mov	r4, r0
	capacity = 0;
   b7842:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b7846:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7848:	7303      	strb	r3, [r0, #12]
	*this = value;
   b784a:	f7ff ffe8 	bl	b781e <_ZN6StringaSERKS_>
}
   b784e:	4620      	mov	r0, r4
   b7850:	bd10      	pop	{r4, pc}

000b7852 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b7852:	b513      	push	{r0, r1, r4, lr}
   b7854:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b7856:	b159      	cbz	r1, b7870 <_ZN6StringaSEPKc+0x1e>
   b7858:	4608      	mov	r0, r1
   b785a:	9101      	str	r1, [sp, #4]
   b785c:	f004 fad1 	bl	bbe02 <strlen>
   b7860:	9901      	ldr	r1, [sp, #4]
   b7862:	4602      	mov	r2, r0
   b7864:	4620      	mov	r0, r4
   b7866:	f7ff ff85 	bl	b7774 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b786a:	4620      	mov	r0, r4
   b786c:	b002      	add	sp, #8
   b786e:	bd10      	pop	{r4, pc}
	else invalidate();
   b7870:	f7ff ff55 	bl	b771e <_ZN6String10invalidateEv>
   b7874:	e7f9      	b.n	b786a <_ZN6StringaSEPKc+0x18>

000b7876 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b7876:	b570      	push	{r4, r5, r6, lr}
   b7878:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b787a:	460e      	mov	r6, r1
   b787c:	b909      	cbnz	r1, b7882 <_ZN6String6concatEPKcj+0xc>
   b787e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b7880:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b7882:	b16a      	cbz	r2, b78a0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b7884:	6884      	ldr	r4, [r0, #8]
   b7886:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b7888:	4621      	mov	r1, r4
   b788a:	f7ff ff5f 	bl	b774c <_ZN6String7reserveEj>
   b788e:	2800      	cmp	r0, #0
   b7890:	d0f5      	beq.n	b787e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b7892:	6828      	ldr	r0, [r5, #0]
   b7894:	68ab      	ldr	r3, [r5, #8]
   b7896:	4631      	mov	r1, r6
   b7898:	4418      	add	r0, r3
   b789a:	f004 fa8c 	bl	bbdb6 <strcpy>
	len = newlen;
   b789e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b78a0:	2001      	movs	r0, #1
   b78a2:	e7ed      	b.n	b7880 <_ZN6String6concatEPKcj+0xa>

000b78a4 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b78a4:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b78a6:	2300      	movs	r3, #0
	buf[0] = c;
   b78a8:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b78ac:	2201      	movs	r2, #1
   b78ae:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b78b0:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b78b4:	f7ff ffdf 	bl	b7876 <_ZN6String6concatEPKcj>
}
   b78b8:	b003      	add	sp, #12
   b78ba:	f85d fb04 	ldr.w	pc, [sp], #4

000b78be <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b78be:	6802      	ldr	r2, [r0, #0]
{
   b78c0:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b78c2:	6809      	ldr	r1, [r1, #0]
   b78c4:	b162      	cbz	r2, b78e0 <_ZNK6String9compareToERKS_+0x22>
   b78c6:	b941      	cbnz	r1, b78da <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b78c8:	6880      	ldr	r0, [r0, #8]
   b78ca:	b160      	cbz	r0, b78e6 <_ZNK6String9compareToERKS_+0x28>
   b78cc:	7810      	ldrb	r0, [r2, #0]
   b78ce:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b78d0:	6898      	ldr	r0, [r3, #8]
   b78d2:	b140      	cbz	r0, b78e6 <_ZNK6String9compareToERKS_+0x28>
   b78d4:	7809      	ldrb	r1, [r1, #0]
   b78d6:	4248      	negs	r0, r1
   b78d8:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b78da:	4610      	mov	r0, r2
   b78dc:	f004 ba61 	b.w	bbda2 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b78e0:	2900      	cmp	r1, #0
   b78e2:	d1f5      	bne.n	b78d0 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b78e4:	4608      	mov	r0, r1
}
   b78e6:	4770      	bx	lr

000b78e8 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b78e8:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b78ea:	6882      	ldr	r2, [r0, #8]
   b78ec:	688b      	ldr	r3, [r1, #8]
   b78ee:	429a      	cmp	r2, r3
   b78f0:	d105      	bne.n	b78fe <_ZNK6String6equalsERKS_+0x16>
   b78f2:	f7ff ffe4 	bl	b78be <_ZNK6String9compareToERKS_>
   b78f6:	fab0 f080 	clz	r0, r0
   b78fa:	0940      	lsrs	r0, r0, #5
}
   b78fc:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b78fe:	2000      	movs	r0, #0
   b7900:	e7fc      	b.n	b78fc <_ZNK6String6equalsERKS_+0x14>

000b7902 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   b7902:	6883      	ldr	r3, [r0, #8]
   b7904:	428b      	cmp	r3, r1
   b7906:	d903      	bls.n	b7910 <_ZNK6StringixEj+0xe>
   b7908:	6800      	ldr	r0, [r0, #0]
   b790a:	b110      	cbz	r0, b7912 <_ZNK6StringixEj+0x10>
	return buffer[index];
   b790c:	5c40      	ldrb	r0, [r0, r1]
   b790e:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   b7910:	2000      	movs	r0, #0
}
   b7912:	4770      	bx	lr

000b7914 <_ZNK6String6charAtEj>:
	return operator[](loc);
   b7914:	f7ff bff5 	b.w	b7902 <_ZNK6StringixEj>

000b7918 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7918:	4770      	bx	lr

000b791a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b791a:	4770      	bx	lr

000b791c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b791c:	4770      	bx	lr

000b791e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b791e:	4770      	bx	lr

000b7920 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7920:	4b06      	ldr	r3, [pc, #24]	; (b793c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7922:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7924:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7926:	f100 040c 	add.w	r4, r0, #12
	    ||
   b792a:	d005      	beq.n	b7938 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b792c:	4608      	mov	r0, r1
   b792e:	f003 fb8f 	bl	bb050 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7932:	2800      	cmp	r0, #0
   b7934:	bf08      	it	eq
   b7936:	2400      	moveq	r4, #0
      }
   b7938:	4620      	mov	r0, r4
   b793a:	bd10      	pop	{r4, pc}
   b793c:	000be69c 	.word	0x000be69c

000b7940 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7940:	4b06      	ldr	r3, [pc, #24]	; (b795c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7942:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7944:	b510      	push	{r4, lr}
   b7946:	f100 040c 	add.w	r4, r0, #12
	    ||
   b794a:	d005      	beq.n	b7958 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b794c:	4608      	mov	r0, r1
   b794e:	f003 fb7f 	bl	bb050 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7952:	2800      	cmp	r0, #0
   b7954:	bf08      	it	eq
   b7956:	2400      	moveq	r4, #0
      }
   b7958:	4620      	mov	r0, r4
   b795a:	bd10      	pop	{r4, pc}
   b795c:	000be69c 	.word	0x000be69c

000b7960 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7960:	4b06      	ldr	r3, [pc, #24]	; (b797c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7962:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7964:	b510      	push	{r4, lr}
   b7966:	f100 040c 	add.w	r4, r0, #12
	    ||
   b796a:	d005      	beq.n	b7978 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b796c:	4608      	mov	r0, r1
   b796e:	f003 fb6f 	bl	bb050 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7972:	2800      	cmp	r0, #0
   b7974:	bf08      	it	eq
   b7976:	2400      	moveq	r4, #0
      }
   b7978:	4620      	mov	r0, r4
   b797a:	bd10      	pop	{r4, pc}
   b797c:	000be69c 	.word	0x000be69c

000b7980 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7980:	b510      	push	{r4, lr}
   b7982:	2168      	movs	r1, #104	; 0x68
   b7984:	4604      	mov	r4, r0
   b7986:	f7fc fb8a 	bl	b409e <_ZdlPvj>
   b798a:	4620      	mov	r0, r4
   b798c:	bd10      	pop	{r4, pc}

000b798e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b798e:	b510      	push	{r4, lr}
   b7990:	2128      	movs	r1, #40	; 0x28
   b7992:	4604      	mov	r4, r0
   b7994:	f7fc fb83 	bl	b409e <_ZdlPvj>
   b7998:	4620      	mov	r0, r4
   b799a:	bd10      	pop	{r4, pc}

000b799c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b799c:	b510      	push	{r4, lr}
   b799e:	2130      	movs	r1, #48	; 0x30
   b79a0:	4604      	mov	r4, r0
   b79a2:	f7fc fb7c 	bl	b409e <_ZdlPvj>
   b79a6:	4620      	mov	r0, r4
   b79a8:	bd10      	pop	{r4, pc}

000b79aa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b79aa:	2168      	movs	r1, #104	; 0x68
   b79ac:	f7fc bb77 	b.w	b409e <_ZdlPvj>

000b79b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b79b0:	2128      	movs	r1, #40	; 0x28
   b79b2:	f7fc bb74 	b.w	b409e <_ZdlPvj>

000b79b6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b79b6:	2130      	movs	r1, #48	; 0x30
   b79b8:	f7fc bb71 	b.w	b409e <_ZdlPvj>

000b79bc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b79bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b79be:	2500      	movs	r5, #0
   b79c0:	1cec      	adds	r4, r5, #3
   b79c2:	428c      	cmp	r4, r1
   b79c4:	d80d      	bhi.n	b79e2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b79c6:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b79c8:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b79ca:	5d87      	ldrb	r7, [r0, r6]
   b79cc:	4297      	cmp	r7, r2
   b79ce:	d105      	bne.n	b79dc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b79d0:	4426      	add	r6, r4
   b79d2:	42b1      	cmp	r1, r6
   b79d4:	d305      	bcc.n	b79e2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b79d6:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b79d8:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b79da:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b79dc:	3401      	adds	r4, #1
   b79de:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b79e0:	e7ee      	b.n	b79c0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b79e2:	2000      	movs	r0, #0
   b79e4:	e7f9      	b.n	b79da <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b79e8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b79e8:	4a02      	ldr	r2, [pc, #8]	; (b79f4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b79ea:	4903      	ldr	r1, [pc, #12]	; (b79f8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b79ec:	200a      	movs	r0, #10
   b79ee:	f7ff bc2d 	b.w	b724c <panic_>
   b79f2:	bf00      	nop
   b79f4:	000b6e05 	.word	0x000b6e05
   b79f8:	000be42c 	.word	0x000be42c

000b79fc <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b79fc:	b430      	push	{r4, r5}
   b79fe:	460d      	mov	r5, r1
   b7a00:	4611      	mov	r1, r2
   b7a02:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b7a04:	6803      	ldr	r3, [r0, #0]
   b7a06:	6809      	ldr	r1, [r1, #0]
   b7a08:	6828      	ldr	r0, [r5, #0]
   b7a0a:	e9d3 4300 	ldrd	r4, r3, [r3]
   b7a0e:	46a4      	mov	ip, r4
      }
   b7a10:	bc30      	pop	{r4, r5}
   b7a12:	4760      	bx	ip

000b7a14 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b7a14:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7a16:	b538      	push	{r3, r4, r5, lr}
   b7a18:	4604      	mov	r4, r0
	switch (__op)
   b7a1a:	d102      	bne.n	b7a22 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b7a1c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b7a1e:	6023      	str	r3, [r4, #0]
	}
   b7a20:	e003      	b.n	b7a2a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b7a22:	2a02      	cmp	r2, #2
   b7a24:	d003      	beq.n	b7a2e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b7a26:	2a03      	cmp	r2, #3
   b7a28:	d00d      	beq.n	b7a46 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b7a2a:	2000      	movs	r0, #0
   b7a2c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b7a2e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b7a30:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7a32:	f7fc fb30 	bl	b4096 <_Znwj>
   b7a36:	4603      	mov	r3, r0
   b7a38:	2800      	cmp	r0, #0
   b7a3a:	d0f0      	beq.n	b7a1e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b7a3c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7a40:	e883 0003 	stmia.w	r3, {r0, r1}
   b7a44:	e7eb      	b.n	b7a1e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b7a46:	6800      	ldr	r0, [r0, #0]
   b7a48:	2800      	cmp	r0, #0
   b7a4a:	d0ee      	beq.n	b7a2a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b7a4c:	2108      	movs	r1, #8
   b7a4e:	f7fc fb26 	bl	b409e <_ZdlPvj>
   b7a52:	e7ea      	b.n	b7a2a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b7a54 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b7a54:	b510      	push	{r4, lr}
	if (_M_manager)
   b7a56:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b7a58:	4604      	mov	r4, r0
	if (_M_manager)
   b7a5a:	b12b      	cbz	r3, b7a68 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b7a5c:	2203      	movs	r2, #3
   b7a5e:	4601      	mov	r1, r0
   b7a60:	4798      	blx	r3
	    _M_manager = nullptr;
   b7a62:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b7a64:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b7a68:	bd10      	pop	{r4, pc}

000b7a6a <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b7a6a:	b510      	push	{r4, lr}
	if (_M_manager)
   b7a6c:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b7a6e:	4604      	mov	r4, r0
	if (_M_manager)
   b7a70:	b12b      	cbz	r3, b7a7e <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b7a72:	2203      	movs	r2, #3
   b7a74:	4601      	mov	r1, r0
   b7a76:	4798      	blx	r3
	    _M_manager = nullptr;
   b7a78:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b7a7a:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b7a7e:	bd10      	pop	{r4, pc}

000b7a80 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   b7a80:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   b7a82:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   b7a84:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   b7a86:	2220      	movs	r2, #32
   b7a88:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   b7a8c:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   b7a8e:	4a08      	ldr	r2, [pc, #32]	; (b7ab0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   b7a90:	9200      	str	r2, [sp, #0]
   b7a92:	4908      	ldr	r1, [pc, #32]	; (b7ab4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   b7a94:	aa02      	add	r2, sp, #8
   b7a96:	2001      	movs	r0, #1
   b7a98:	f7ff fbe0 	bl	b725c <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b7a9c:	6820      	ldr	r0, [r4, #0]
   b7a9e:	4906      	ldr	r1, [pc, #24]	; (b7ab8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   b7aa0:	8800      	ldrh	r0, [r0, #0]
   b7aa2:	2300      	movs	r3, #0
   b7aa4:	4622      	mov	r2, r4
    }
   b7aa6:	b00a      	add	sp, #40	; 0x28
   b7aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b7aac:	f7ff ba00 	b.w	b6eb0 <hal_ble_gatt_client_discover_all_services>
   b7ab0:	000be44e 	.word	0x000be44e
   b7ab4:	000be443 	.word	0x000be443
   b7ab8:	000b95f5 	.word	0x000b95f5

000b7abc <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b7abc:	b510      	push	{r4, lr}
   b7abe:	3801      	subs	r0, #1
   b7ac0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b7ac4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b7ac8:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b7aca:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b7ace:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b7ad0:	bf88      	it	hi
   b7ad2:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b7ad6:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b7ada:	7803      	ldrb	r3, [r0, #0]
   b7adc:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b7ae0:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b7ae4:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b7ae6:	bf88      	it	hi
   b7ae8:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b7aec:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b7aee:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b7af2:	d1e7      	bne.n	b7ac4 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b7af4:	bd10      	pop	{r4, pc}

000b7af6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7af6:	b510      	push	{r4, lr}
   b7af8:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b7afa:	3058      	adds	r0, #88	; 0x58
   b7afc:	f7fc fbce 	bl	b429c <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b7b00:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b7b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7b08:	f7ff be02 	b.w	b7710 <_ZN6StringD1Ev>

000b7b0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   b7b0c:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   b7b0e:	6803      	ldr	r3, [r0, #0]
   b7b10:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   b7b12:	4605      	mov	r5, r0
   b7b14:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   b7b16:	d008      	beq.n	b7b2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   b7b18:	b111      	cbz	r1, b7b20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   b7b1a:	684b      	ldr	r3, [r1, #4]
   b7b1c:	3301      	adds	r3, #1
   b7b1e:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   b7b20:	6828      	ldr	r0, [r5, #0]
   b7b22:	b108      	cbz	r0, b7b28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   b7b24:	f7fc fbf8 	bl	b4318 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b7b28:	602c      	str	r4, [r5, #0]
      }
   b7b2a:	bd38      	pop	{r3, r4, r5, pc}

000b7b2c <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b7b2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7b30:	b2da      	uxtb	r2, r3
   b7b32:	2a09      	cmp	r2, #9
   b7b34:	d801      	bhi.n	b7b3a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b7b36:	4618      	mov	r0, r3
   b7b38:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b7b3a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b7b3e:	2b05      	cmp	r3, #5
   b7b40:	d801      	bhi.n	b7b46 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b7b42:	3857      	subs	r0, #87	; 0x57
   b7b44:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b7b46:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b7b4a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b7b4c:	bf94      	ite	ls
   b7b4e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b7b50:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b7b54:	4770      	bx	lr
	...

000b7b58 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b7b58:	b510      	push	{r4, lr}
            locked_(false) {
   b7b5a:	2300      	movs	r3, #0
   b7b5c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b7b5e:	4b04      	ldr	r3, [pc, #16]	; (b7b70 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b7b60:	4604      	mov	r4, r0
   b7b62:	6818      	ldr	r0, [r3, #0]
   b7b64:	f7ff fa4a 	bl	b6ffc <os_mutex_recursive_lock>
        locked_ = true;
   b7b68:	2301      	movs	r3, #1
   b7b6a:	7023      	strb	r3, [r4, #0]
    }
   b7b6c:	4620      	mov	r0, r4
   b7b6e:	bd10      	pop	{r4, pc}
   b7b70:	2003e66c 	.word	0x2003e66c

000b7b74 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b7b74:	b510      	push	{r4, lr}
        if (locked_) {
   b7b76:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b7b78:	4604      	mov	r4, r0
        if (locked_) {
   b7b7a:	b11b      	cbz	r3, b7b84 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b7b7c:	4b02      	ldr	r3, [pc, #8]	; (b7b88 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b7b7e:	6818      	ldr	r0, [r3, #0]
   b7b80:	f7ff fa44 	bl	b700c <os_mutex_recursive_unlock>
    }
   b7b84:	4620      	mov	r0, r4
   b7b86:	bd10      	pop	{r4, pc}
   b7b88:	2003e66c 	.word	0x2003e66c

000b7b8c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b7b8c:	b082      	sub	sp, #8
   b7b8e:	4603      	mov	r3, r0
    address_ = addr;
   b7b90:	6808      	ldr	r0, [r1, #0]
   b7b92:	6849      	ldr	r1, [r1, #4]
   b7b94:	466a      	mov	r2, sp
   b7b96:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b7b98:	466a      	mov	r2, sp
   b7b9a:	ca03      	ldmia	r2!, {r0, r1}
   b7b9c:	6018      	str	r0, [r3, #0]
}
   b7b9e:	4618      	mov	r0, r3
    address_ = addr.address_;
   b7ba0:	6059      	str	r1, [r3, #4]
}
   b7ba2:	b002      	add	sp, #8
   b7ba4:	4770      	bx	lr

000b7ba6 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b7ba6:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b7ba8:	7982      	ldrb	r2, [r0, #6]
   b7baa:	798b      	ldrb	r3, [r1, #6]
   b7bac:	429a      	cmp	r2, r3
   b7bae:	d106      	bne.n	b7bbe <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b7bb0:	2206      	movs	r2, #6
   b7bb2:	f004 f878 	bl	bbca6 <memcmp>
   b7bb6:	fab0 f080 	clz	r0, r0
   b7bba:	0940      	lsrs	r0, r0, #5
}
   b7bbc:	bd08      	pop	{r3, pc}
    return false;
   b7bbe:	2000      	movs	r0, #0
   b7bc0:	e7fc      	b.n	b7bbc <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b7bc2 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b7bc2:	f04f 33ff 	mov.w	r3, #4294967295
   b7bc6:	6003      	str	r3, [r0, #0]
   b7bc8:	8083      	strh	r3, [r0, #4]
}
   b7bca:	2000      	movs	r0, #0
   b7bcc:	4770      	bx	lr

000b7bce <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b7bce:	b508      	push	{r3, lr}
   b7bd0:	4602      	mov	r2, r0
        : address_{} {
   b7bd2:	2100      	movs	r1, #0
   b7bd4:	6001      	str	r1, [r0, #0]
   b7bd6:	6041      	str	r1, [r0, #4]
    clear();
   b7bd8:	f7ff fff3 	bl	b7bc2 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b7bdc:	7191      	strb	r1, [r2, #6]
}
   b7bde:	4610      	mov	r0, r2
   b7be0:	bd08      	pop	{r3, pc}
	...

000b7be4 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b7be4:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b7be6:	2301      	movs	r3, #1
   b7be8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7bea:	4b05      	ldr	r3, [pc, #20]	; (b7c00 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b7bec:	4602      	mov	r2, r0
   b7bee:	f103 0110 	add.w	r1, r3, #16
   b7bf2:	f853 4b04 	ldr.w	r4, [r3], #4
   b7bf6:	f842 4b04 	str.w	r4, [r2], #4
   b7bfa:	428b      	cmp	r3, r1
   b7bfc:	d1f9      	bne.n	b7bf2 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b7bfe:	bd10      	pop	{r4, pc}
   b7c00:	000be6aa 	.word	0x000be6aa

000b7c04 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b7c04:	7c0b      	ldrb	r3, [r1, #16]
   b7c06:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   b7c0a:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b7c0c:	d10d      	bne.n	b7c2a <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   b7c0e:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7c10:	4b0c      	ldr	r3, [pc, #48]	; (b7c44 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   b7c12:	4602      	mov	r2, r0
   b7c14:	f103 0410 	add.w	r4, r3, #16
   b7c18:	f853 5b04 	ldr.w	r5, [r3], #4
   b7c1c:	f842 5b04 	str.w	r5, [r2], #4
   b7c20:	42a3      	cmp	r3, r4
   b7c22:	d1f9      	bne.n	b7c18 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   b7c24:	880b      	ldrh	r3, [r1, #0]
   b7c26:	8183      	strh	r3, [r0, #12]
}
   b7c28:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   b7c2a:	2301      	movs	r3, #1
   b7c2c:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   b7c2e:	f101 0210 	add.w	r2, r1, #16
   b7c32:	4603      	mov	r3, r0
   b7c34:	f851 4b04 	ldr.w	r4, [r1], #4
   b7c38:	f843 4b04 	str.w	r4, [r3], #4
   b7c3c:	4291      	cmp	r1, r2
   b7c3e:	d1f9      	bne.n	b7c34 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   b7c40:	e7f2      	b.n	b7c28 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   b7c42:	bf00      	nop
   b7c44:	000be6aa 	.word	0x000be6aa

000b7c48 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7c48:	b510      	push	{r4, lr}
    if (uuid128) {
   b7c4a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7c4c:	4604      	mov	r4, r0
    if (uuid128) {
   b7c4e:	b1b1      	cbz	r1, b7c7e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b7c50:	2a01      	cmp	r2, #1
   b7c52:	f101 0210 	add.w	r2, r1, #16
   b7c56:	d10a      	bne.n	b7c6e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b7c58:	4601      	mov	r1, r0
   b7c5a:	f853 0b04 	ldr.w	r0, [r3], #4
   b7c5e:	f841 0b04 	str.w	r0, [r1], #4
   b7c62:	4293      	cmp	r3, r2
   b7c64:	d1f9      	bne.n	b7c5a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b7c66:	2301      	movs	r3, #1
   b7c68:	6123      	str	r3, [r4, #16]
}
   b7c6a:	4620      	mov	r0, r4
   b7c6c:	bd10      	pop	{r4, pc}
   b7c6e:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b7c70:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b7c74:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b7c78:	429a      	cmp	r2, r3
   b7c7a:	d1f9      	bne.n	b7c70 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b7c7c:	e7f3      	b.n	b7c66 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b7c7e:	2210      	movs	r2, #16
   b7c80:	f004 f849 	bl	bbd16 <memset>
   b7c84:	e7f1      	b.n	b7c6a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b7c86 <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b7c86:	b538      	push	{r3, r4, r5, lr}
   b7c88:	4604      	mov	r4, r0
   b7c8a:	460d      	mov	r5, r1
        : BleUuid() {
   b7c8c:	f7ff ffaa 	bl	b7be4 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b7c90:	2300      	movs	r3, #0
   b7c92:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b7c94:	81a5      	strh	r5, [r4, #12]
}
   b7c96:	4620      	mov	r0, r4
   b7c98:	bd38      	pop	{r3, r4, r5, pc}

000b7c9a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b7c9a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7c9c:	6902      	ldr	r2, [r0, #16]
   b7c9e:	690b      	ldr	r3, [r1, #16]
   b7ca0:	429a      	cmp	r2, r3
   b7ca2:	d106      	bne.n	b7cb2 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b7ca4:	2210      	movs	r2, #16
   b7ca6:	f003 fffe 	bl	bbca6 <memcmp>
   b7caa:	fab0 f080 	clz	r0, r0
   b7cae:	0940      	lsrs	r0, r0, #5
}
   b7cb0:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7cb2:	2000      	movs	r0, #0
   b7cb4:	e7fc      	b.n	b7cb0 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b7cb8 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b7cb8:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b7cba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b7cbe:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7cc0:	4b34      	ldr	r3, [pc, #208]	; (b7d94 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b7cc2:	460c      	mov	r4, r1
   b7cc4:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7cc6:	4602      	mov	r2, r0
   b7cc8:	f103 0110 	add.w	r1, r3, #16
   b7ccc:	f853 0b04 	ldr.w	r0, [r3], #4
   b7cd0:	f842 0b04 	str.w	r0, [r2], #4
   b7cd4:	428b      	cmp	r3, r1
   b7cd6:	d1f9      	bne.n	b7ccc <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b7cd8:	b344      	cbz	r4, b7d2c <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b7cda:	2124      	movs	r1, #36	; 0x24
   b7cdc:	4620      	mov	r0, r4
   b7cde:	f004 f8bf 	bl	bbe60 <strnlen>
   b7ce2:	2804      	cmp	r0, #4
   b7ce4:	f04f 0500 	mov.w	r5, #0
   b7ce8:	d123      	bne.n	b7d32 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b7cea:	f8ad 5004 	strh.w	r5, [sp, #4]
   b7cee:	af01      	add	r7, sp, #4
   b7cf0:	1ca5      	adds	r5, r4, #2
   b7cf2:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b7cf4:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b7cf8:	f7ff ff18 	bl	b7b2c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b7cfc:	f1b0 0800 	subs.w	r8, r0, #0
   b7d00:	db12      	blt.n	b7d28 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b7d02:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b7d06:	f7ff ff11 	bl	b7b2c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b7d0a:	2800      	cmp	r0, #0
   b7d0c:	db0c      	blt.n	b7d28 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b7d0e:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7d10:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b7d14:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7d16:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b7d1a:	d1eb      	bne.n	b7cf4 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b7d1c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b7d20:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b7d22:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7d26:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b7d28:	2300      	movs	r3, #0
   b7d2a:	6133      	str	r3, [r6, #16]
}
   b7d2c:	b002      	add	sp, #8
   b7d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b7d32:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7d36:	2124      	movs	r1, #36	; 0x24
   b7d38:	4620      	mov	r0, r4
   b7d3a:	f004 f891 	bl	bbe60 <strnlen>
   b7d3e:	42a8      	cmp	r0, r5
   b7d40:	d807      	bhi.n	b7d52 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b7d42:	4642      	mov	r2, r8
   b7d44:	2100      	movs	r1, #0
   b7d46:	4630      	mov	r0, r6
}
   b7d48:	b002      	add	sp, #8
   b7d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b7d4e:	f003 bfe2 	b.w	bbd16 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7d52:	f1b8 0f00 	cmp.w	r8, #0
   b7d56:	d0e9      	beq.n	b7d2c <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b7d58:	5d60      	ldrb	r0, [r4, r5]
   b7d5a:	f7ff fee7 	bl	b7b2c <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b7d5e:	0603      	lsls	r3, r0, #24
   b7d60:	d415      	bmi.n	b7d8e <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b7d62:	0100      	lsls	r0, r0, #4
   b7d64:	f108 38ff 	add.w	r8, r8, #4294967295
   b7d68:	b2c7      	uxtb	r7, r0
   b7d6a:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b7d6e:	2124      	movs	r1, #36	; 0x24
   b7d70:	4620      	mov	r0, r4
   b7d72:	f004 f875 	bl	bbe60 <strnlen>
   b7d76:	3501      	adds	r5, #1
   b7d78:	42a8      	cmp	r0, r5
   b7d7a:	d908      	bls.n	b7d8e <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b7d7c:	5d60      	ldrb	r0, [r4, r5]
   b7d7e:	f7ff fed5 	bl	b7b2c <_ZN8particle11hexToNibbleEc>
   b7d82:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b7d84:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b7d86:	bfa4      	itt	ge
   b7d88:	4338      	orrge	r0, r7
   b7d8a:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7d8e:	3501      	adds	r5, #1
   b7d90:	e7d1      	b.n	b7d36 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b7d92:	bf00      	nop
   b7d94:	000be6aa 	.word	0x000be6aa

000b7d98 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b7d98:	b513      	push	{r0, r1, r4, lr}
   b7d9a:	4604      	mov	r4, r0
   b7d9c:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b7d9e:	f7ff ff21 	bl	b7be4 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b7da2:	4620      	mov	r0, r4
   b7da4:	9901      	ldr	r1, [sp, #4]
   b7da6:	f7ff ff87 	bl	b7cb8 <_ZN8particle7BleUuid9constructEPKc>
}
   b7daa:	4620      	mov	r0, r4
   b7dac:	b002      	add	sp, #8
   b7dae:	bd10      	pop	{r4, pc}

000b7db0 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   b7db0:	b510      	push	{r4, lr}
   b7db2:	f100 030f 	add.w	r3, r0, #15
   b7db6:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   b7db8:	781c      	ldrb	r4, [r3, #0]
   b7dba:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b7dbe:	4283      	cmp	r3, r0
   b7dc0:	f103 33ff 	add.w	r3, r3, #4294967295
   b7dc4:	d1f8      	bne.n	b7db8 <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   b7dc6:	bd10      	pop	{r4, pc}

000b7dc8 <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   b7dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7dcc:	461f      	mov	r7, r3
   b7dce:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   b7dd0:	460d      	mov	r5, r1
   b7dd2:	2900      	cmp	r1, #0
   b7dd4:	d05b      	beq.n	b7e8e <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   b7dd6:	b1da      	cbz	r2, b7e10 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   b7dd8:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   b7ddc:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   b7dde:	f1b8 0f00 	cmp.w	r8, #0
   b7de2:	d119      	bne.n	b7e18 <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b7de4:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   b7de6:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b7dea:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b7dec:	aa05      	add	r2, sp, #20
   b7dee:	2102      	movs	r1, #2
   b7df0:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b7df2:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b7df6:	f7ff fe61 	bl	b7abc <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   b7dfa:	2c04      	cmp	r4, #4
   b7dfc:	bf28      	it	cs
   b7dfe:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   b7e00:	4622      	mov	r2, r4
   b7e02:	a905      	add	r1, sp, #20
   b7e04:	4628      	mov	r0, r5
   b7e06:	f003 ff5e 	bl	bbcc6 <memcpy>
        buf[len++] = '\0';
   b7e0a:	f805 8004 	strb.w	r8, [r5, r4]
   b7e0e:	1c62      	adds	r2, r4, #1
}
   b7e10:	4610      	mov	r0, r2
   b7e12:	b00e      	add	sp, #56	; 0x38
   b7e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   b7e18:	a901      	add	r1, sp, #4
   b7e1a:	f7ff ffc9 	bl	b7db0 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b7e1e:	aa05      	add	r2, sp, #20
    if (stripped) {
   b7e20:	b17f      	cbz	r7, b7e42 <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b7e22:	2110      	movs	r1, #16
   b7e24:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b7e26:	f7ff fe49 	bl	b7abc <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b7e2a:	2c24      	cmp	r4, #36	; 0x24
   b7e2c:	bf28      	it	cs
   b7e2e:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   b7e30:	4622      	mov	r2, r4
   b7e32:	a905      	add	r1, sp, #20
   b7e34:	4628      	mov	r0, r5
   b7e36:	f003 ff46 	bl	bbcc6 <memcpy>
    buf[len++] = '\0';
   b7e3a:	2300      	movs	r3, #0
   b7e3c:	552b      	strb	r3, [r5, r4]
   b7e3e:	1c62      	adds	r2, r4, #1
    return len;
   b7e40:	e7e6      	b.n	b7e10 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   b7e42:	2104      	movs	r1, #4
   b7e44:	eb0d 0001 	add.w	r0, sp, r1
   b7e48:	f7ff fe38 	bl	b7abc <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   b7e4c:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b7e4e:	f10d 021d 	add.w	r2, sp, #29
   b7e52:	2102      	movs	r1, #2
   b7e54:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   b7e56:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b7e5a:	f7ff fe2f 	bl	b7abc <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b7e5e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   b7e62:	2102      	movs	r1, #2
   b7e64:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   b7e68:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b7e6c:	f7ff fe26 	bl	b7abc <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b7e70:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   b7e74:	2102      	movs	r1, #2
   b7e76:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   b7e78:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b7e7c:	f7ff fe1e 	bl	b7abc <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   b7e80:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b7e84:	aa0b      	add	r2, sp, #44	; 0x2c
   b7e86:	2106      	movs	r1, #6
   b7e88:	f10d 000e 	add.w	r0, sp, #14
   b7e8c:	e7cb      	b.n	b7e26 <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   b7e8e:	460a      	mov	r2, r1
   b7e90:	e7be      	b.n	b7e10 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000b7e92 <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   b7e92:	b510      	push	{r4, lr}
   b7e94:	b08a      	sub	sp, #40	; 0x28
   b7e96:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   b7e98:	2300      	movs	r3, #0
   b7e9a:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   b7e9c:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   b7e9e:	4669      	mov	r1, sp
   b7ea0:	f7ff ff92 	bl	b7dc8 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   b7ea4:	4669      	mov	r1, sp
   b7ea6:	4620      	mov	r0, r4
   b7ea8:	f7ff fc7d 	bl	b77a6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b7eac:	4620      	mov	r0, r4
   b7eae:	b00a      	add	sp, #40	; 0x28
   b7eb0:	bd10      	pop	{r4, pc}

000b7eb2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b7eb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7eb4:	4605      	mov	r5, r0
   b7eb6:	4616      	mov	r6, r2
   b7eb8:	461f      	mov	r7, r3
   b7eba:	460a      	mov	r2, r1
   b7ebc:	ab01      	add	r3, sp, #4
   b7ebe:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7ec2:	f7ff fd7b 	bl	b79bc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b7ec6:	f030 0402 	bics.w	r4, r0, #2
   b7eca:	d00c      	beq.n	b7ee6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b7ecc:	1e84      	subs	r4, r0, #2
   b7ece:	42bc      	cmp	r4, r7
   b7ed0:	bf28      	it	cs
   b7ed2:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b7ed4:	b13e      	cbz	r6, b7ee6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b7ed6:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b7ed8:	682b      	ldr	r3, [r5, #0]
   b7eda:	3102      	adds	r1, #2
   b7edc:	4622      	mov	r2, r4
   b7ede:	4419      	add	r1, r3
   b7ee0:	4630      	mov	r0, r6
   b7ee2:	f003 fef0 	bl	bbcc6 <memcpy>
}
   b7ee6:	4620      	mov	r0, r4
   b7ee8:	b003      	add	sp, #12
   b7eea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7eec <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b7eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7eee:	4613      	mov	r3, r2
   b7ef0:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b7ef2:	9201      	str	r2, [sp, #4]
   b7ef4:	460a      	mov	r2, r1
   b7ef6:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b7ef8:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b7efa:	f7ff ffda 	bl	b7eb2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b7efe:	b940      	cbnz	r0, b7f12 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b7f00:	9b01      	ldr	r3, [sp, #4]
   b7f02:	4622      	mov	r2, r4
   b7f04:	2109      	movs	r1, #9
   b7f06:	4628      	mov	r0, r5
}
   b7f08:	b003      	add	sp, #12
   b7f0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b7f0e:	f7ff bfd0 	b.w	b7eb2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b7f12:	b003      	add	sp, #12
   b7f14:	bd30      	pop	{r4, r5, pc}
	...

000b7f18 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b7f18:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7f1a:	460c      	mov	r4, r1
   b7f1c:	b089      	sub	sp, #36	; 0x24
    String name;
   b7f1e:	490c      	ldr	r1, [pc, #48]	; (b7f50 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b7f20:	4605      	mov	r5, r0
    String name;
   b7f22:	f7ff fc40 	bl	b77a6 <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b7f26:	221f      	movs	r2, #31
   b7f28:	4669      	mov	r1, sp
   b7f2a:	4620      	mov	r0, r4
   b7f2c:	f7ff ffde 	bl	b7eec <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b7f30:	4606      	mov	r6, r0
   b7f32:	b150      	cbz	r0, b7f4a <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b7f34:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b7f36:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b7f38:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7f3c:	4628      	mov	r0, r5
   b7f3e:	f7ff fcb1 	bl	b78a4 <_ZN6String6concatEc>
   b7f42:	b110      	cbz	r0, b7f4a <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b7f44:	3701      	adds	r7, #1
   b7f46:	42be      	cmp	r6, r7
   b7f48:	d1f6      	bne.n	b7f38 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b7f4a:	4628      	mov	r0, r5
   b7f4c:	b009      	add	sp, #36	; 0x24
   b7f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7f50:	000be225 	.word	0x000be225

000b7f54 <_ZNK8particle18BleAdvertisingData10customDataEPhj>:
size_t BleAdvertisingData::customData(uint8_t* buf, size_t len) const {
   b7f54:	4613      	mov	r3, r2
    return get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len);
   b7f56:	460a      	mov	r2, r1
   b7f58:	21ff      	movs	r1, #255	; 0xff
   b7f5a:	f7ff bfaa 	b.w	b7eb2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>

000b7f5e <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b7f5e:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b7f60:	2302      	movs	r3, #2
   b7f62:	aa01      	add	r2, sp, #4
   b7f64:	2119      	movs	r1, #25
   b7f66:	f7ff ffa4 	bl	b7eb2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b7f6a:	b108      	cbz	r0, b7f70 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b7f6c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b7f70:	b003      	add	sp, #12
   b7f72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7f78 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b7f78:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b7f7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7f7e:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b7f80:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b7f82:	8043      	strh	r3, [r0, #2]
   b7f84:	220e      	movs	r2, #14
   b7f86:	4629      	mov	r1, r5
   b7f88:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b7f8a:	7105      	strb	r5, [r0, #4]
   b7f8c:	3006      	adds	r0, #6
   b7f8e:	f003 fec2 	bl	bbd16 <memset>
   b7f92:	f104 0014 	add.w	r0, r4, #20
   b7f96:	f7ff fe25 	bl	b7be4 <_ZN8particle7BleUuidC1Ev>
   b7f9a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b7f9e:	f7ff fe21 	bl	b7be4 <_ZN8particle7BleUuidC1Ev>
   b7fa2:	4904      	ldr	r1, [pc, #16]	; (b7fb4 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b7fa4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7fa8:	f7ff fbfd 	bl	b77a6 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b7fac:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b7fae:	4620      	mov	r0, r4
   b7fb0:	bd38      	pop	{r3, r4, r5, pc}
   b7fb2:	bf00      	nop
   b7fb4:	000be225 	.word	0x000be225

000b7fb8 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   b7fb8:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b7fba:	680d      	ldr	r5, [r1, #0]
   b7fbc:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b7fbe:	4601      	mov	r1, r0
   b7fc0:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b7fc4:	f7ff fe69 	bl	b7c9a <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b7fc8:	b140      	cbz	r0, b7fdc <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   b7fca:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b7fcc:	8aa2      	ldrh	r2, [r4, #20]
   b7fce:	429a      	cmp	r2, r3
   b7fd0:	d805      	bhi.n	b7fde <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b7fd2:	8ae0      	ldrh	r0, [r4, #22]
   b7fd4:	4298      	cmp	r0, r3
   b7fd6:	bf34      	ite	cc
   b7fd8:	2000      	movcc	r0, #0
   b7fda:	2001      	movcs	r0, #1
    }
   b7fdc:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b7fde:	2000      	movs	r0, #0
   b7fe0:	e7fc      	b.n	b7fdc <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000b7fe2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b7fe2:	b510      	push	{r4, lr}
    return data_ + size_;
   b7fe4:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b7fe8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b7fec:	4293      	cmp	r3, r2
   b7fee:	4618      	mov	r0, r3
   b7ff0:	d006      	beq.n	b8000 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b7ff2:	6804      	ldr	r4, [r0, #0]
   b7ff4:	8824      	ldrh	r4, [r4, #0]
   b7ff6:	428c      	cmp	r4, r1
   b7ff8:	f103 0308 	add.w	r3, r3, #8
   b7ffc:	d1f6      	bne.n	b7fec <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b7ffe:	bd10      	pop	{r4, pc}
        return nullptr;
   b8000:	2000      	movs	r0, #0
   b8002:	e7fc      	b.n	b7ffe <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000b8004 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8004:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   b8006:	b570      	push	{r4, r5, r6, lr}
   b8008:	6003      	str	r3, [r0, #0]
   b800a:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b800c:	2068      	movs	r0, #104	; 0x68
   b800e:	f7fc f842 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8012:	1e04      	subs	r4, r0, #0
   b8014:	f104 060c 	add.w	r6, r4, #12
   b8018:	d007      	beq.n	b802a <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   b801a:	2301      	movs	r3, #1
   b801c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b8020:	4b04      	ldr	r3, [pc, #16]	; (b8034 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   b8022:	6023      	str	r3, [r4, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8024:	4630      	mov	r0, r6
   b8026:	f7ff ffa7 	bl	b7f78 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   b802a:	e9c5 6400 	strd	r6, r4, [r5]
}
   b802e:	4628      	mov	r0, r5
   b8030:	bd70      	pop	{r4, r5, r6, pc}
   b8032:	bf00      	nop
   b8034:	000be650 	.word	0x000be650

000b8038 <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   b8038:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   b803a:	680c      	ldr	r4, [r1, #0]
   b803c:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   b803e:	4606      	mov	r6, r0
    return impl()->charUUID();
   b8040:	4605      	mov	r5, r0
   b8042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8044:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8046:	6823      	ldr	r3, [r4, #0]
   b8048:	602b      	str	r3, [r5, #0]
}
   b804a:	4630      	mov	r0, r6
   b804c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8050 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b8050:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8052:	4606      	mov	r6, r0
   b8054:	b085      	sub	sp, #20
   b8056:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b8058:	460d      	mov	r5, r1
   b805a:	2900      	cmp	r1, #0
   b805c:	d050      	beq.n	b8100 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b805e:	2a00      	cmp	r2, #0
   b8060:	d04e      	beq.n	b8100 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
   b8062:	6804      	ldr	r4, [r0, #0]
    if (impl()->isLocal()) {
   b8064:	7823      	ldrb	r3, [r4, #0]
   b8066:	2af4      	cmp	r2, #244	; 0xf4
   b8068:	bf28      	it	cs
   b806a:	22f4      	movcs	r2, #244	; 0xf4
   b806c:	b343      	cbz	r3, b80c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b806e:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b8070:	0798      	lsls	r0, r3, #30
   b8072:	d509      	bpl.n	b8088 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b8074:	89a0      	ldrh	r0, [r4, #12]
   b8076:	9203      	str	r2, [sp, #12]
   b8078:	2300      	movs	r3, #0
   b807a:	f7fe ff0f 	bl	b6e9c <hal_ble_gatt_server_set_characteristic_value>
   b807e:	2800      	cmp	r0, #0
   b8080:	9a03      	ldr	r2, [sp, #12]
   b8082:	da03      	bge.n	b808c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   b8084:	b005      	add	sp, #20
   b8086:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b8088:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b808c:	6834      	ldr	r4, [r6, #0]
   b808e:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b8090:	06d9      	lsls	r1, r3, #27
   b8092:	d509      	bpl.n	b80a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b8094:	2f01      	cmp	r7, #1
   b8096:	d007      	beq.n	b80a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b8098:	89a0      	ldrh	r0, [r4, #12]
   b809a:	2300      	movs	r3, #0
   b809c:	4629      	mov	r1, r5
}
   b809e:	b005      	add	sp, #20
   b80a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b80a4:	f7fe bf5e 	b.w	b6f64 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b80a8:	069b      	lsls	r3, r3, #26
   b80aa:	d5eb      	bpl.n	b8084 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b80ac:	2f02      	cmp	r7, #2
   b80ae:	d0e9      	beq.n	b8084 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b80b0:	89a0      	ldrh	r0, [r4, #12]
   b80b2:	2300      	movs	r3, #0
   b80b4:	4629      	mov	r1, r5
}
   b80b6:	b005      	add	sp, #20
   b80b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b80bc:	f7fe bf5c 	b.w	b6f78 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b80c0:	8860      	ldrh	r0, [r4, #2]
   b80c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b80c6:	4288      	cmp	r0, r1
   b80c8:	d01c      	beq.n	b8104 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b80ca:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b80cc:	074e      	lsls	r6, r1, #29
   b80ce:	d501      	bpl.n	b80d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b80d0:	2f01      	cmp	r7, #1
   b80d2:	d104      	bne.n	b80de <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b80d4:	070b      	lsls	r3, r1, #28
   b80d6:	d409      	bmi.n	b80ec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b80d8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b80dc:	e7d2      	b.n	b8084 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b80de:	89a1      	ldrh	r1, [r4, #12]
   b80e0:	9300      	str	r3, [sp, #0]
   b80e2:	4613      	mov	r3, r2
   b80e4:	462a      	mov	r2, r5
   b80e6:	f7fe ff01 	bl	b6eec <hal_ble_gatt_client_write_without_response>
   b80ea:	e7cb      	b.n	b8084 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b80ec:	2f02      	cmp	r7, #2
   b80ee:	d0f3      	beq.n	b80d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b80f0:	2300      	movs	r3, #0
   b80f2:	89a1      	ldrh	r1, [r4, #12]
   b80f4:	9300      	str	r3, [sp, #0]
   b80f6:	4613      	mov	r3, r2
   b80f8:	462a      	mov	r2, r5
   b80fa:	f7fe feed 	bl	b6ed8 <hal_ble_gatt_client_write_with_response>
   b80fe:	e7c1      	b.n	b8084 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b8100:	4802      	ldr	r0, [pc, #8]	; (b810c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b8102:	e7bf      	b.n	b8084 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b8104:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b8108:	e7bc      	b.n	b8084 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b810a:	bf00      	nop
   b810c:	fffffef2 	.word	0xfffffef2

000b8110 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   b8110:	b510      	push	{r4, lr}
   b8112:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b8114:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   b8116:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b8118:	bb52      	cbnz	r2, b8170 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   b811a:	885c      	ldrh	r4, [r3, #2]
   b811c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b8120:	4284      	cmp	r4, r0
   b8122:	d025      	beq.n	b8170 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b8124:	8a18      	ldrh	r0, [r3, #16]
   b8126:	b330      	cbz	r0, b8176 <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   b8128:	e9cd 2203 	strd	r2, r2, [sp, #12]
   b812c:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   b812e:	4a13      	ldr	r2, [pc, #76]	; (b817c <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   b8130:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   b8132:	4a13      	ldr	r2, [pc, #76]	; (b8180 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   b8134:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   b8138:	885a      	ldrh	r2, [r3, #2]
   b813a:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   b813e:	8a1a      	ldrh	r2, [r3, #16]
   b8140:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   b8144:	899a      	ldrh	r2, [r3, #12]
   b8146:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   b814a:	b159      	cbz	r1, b8164 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   b814c:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   b814e:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   b8150:	bf44      	itt	mi
   b8152:	2202      	movmi	r2, #2
   b8154:	9205      	strmi	r2, [sp, #20]
   b8156:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   b8158:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   b815a:	bf42      	ittt	mi
   b815c:	9b05      	ldrmi	r3, [sp, #20]
   b815e:	f043 0301 	orrmi.w	r3, r3, #1
   b8162:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   b8164:	2100      	movs	r1, #0
   b8166:	4668      	mov	r0, sp
   b8168:	f7fe fef2 	bl	b6f50 <hal_ble_gatt_client_configure_cccd>
}
   b816c:	b006      	add	sp, #24
   b816e:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b8170:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b8174:	e7fa      	b.n	b816c <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b8176:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b817a:	e7f7      	b.n	b816c <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   b817c:	00180003 	.word	0x00180003
   b8180:	000b8355 	.word	0x000b8355

000b8184 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   b8184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8186:	2600      	movs	r6, #0
   b8188:	6006      	str	r6, [r0, #0]
   b818a:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b818c:	2028      	movs	r0, #40	; 0x28
   b818e:	f7fb ff82 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8192:	1e04      	subs	r4, r0, #0
   b8194:	f104 070c 	add.w	r7, r4, #12
   b8198:	d00a      	beq.n	b81b0 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   b819a:	2301      	movs	r3, #1
   b819c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b81a0:	4b05      	ldr	r3, [pc, #20]	; (b81b8 <_ZN8particle10BleServiceC1Ev+0x34>)
   b81a2:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   b81a4:	4638      	mov	r0, r7
   b81a6:	f7ff fd1d 	bl	b7be4 <_ZN8particle7BleUuidC1Ev>
   b81aa:	6226      	str	r6, [r4, #32]
   b81ac:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   b81b0:	e9c5 7400 	strd	r7, r4, [r5]
}
   b81b4:	4628      	mov	r0, r5
   b81b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b81b8:	000be66c 	.word	0x000be66c

000b81bc <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b81bc:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b81be:	2500      	movs	r5, #0
   b81c0:	6005      	str	r5, [r0, #0]
   b81c2:	4606      	mov	r6, r0
   b81c4:	2030      	movs	r0, #48	; 0x30
   b81c6:	f7fb ff66 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b81ca:	4604      	mov	r4, r0
   b81cc:	b188      	cbz	r0, b81f2 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b81ce:	2301      	movs	r3, #1
   b81d0:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b81d4:	4b09      	ldr	r3, [pc, #36]	; (b81fc <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b81d6:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b81d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b81dc:	8183      	strh	r3, [r0, #12]
   b81de:	300e      	adds	r0, #14
   b81e0:	f7ff fcf5 	bl	b7bce <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b81e4:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b81e8:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b81ec:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b81f0:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b81f2:	6074      	str	r4, [r6, #4]
   b81f4:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b81f6:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b81f8:	4630      	mov	r0, r6
   b81fa:	bd70      	pop	{r4, r5, r6, pc}
   b81fc:	000be688 	.word	0x000be688

000b8200 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b8200:	b513      	push	{r0, r1, r4, lr}
   b8202:	4604      	mov	r4, r0
    WiringBleLock lk;
   b8204:	a801      	add	r0, sp, #4
   b8206:	f7ff fca7 	bl	b7b58 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b820a:	6823      	ldr	r3, [r4, #0]
   b820c:	881c      	ldrh	r4, [r3, #0]
   b820e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8212:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b8214:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b8216:	bf18      	it	ne
   b8218:	2401      	movne	r4, #1
    WiringBleLock lk;
   b821a:	f7ff fcab 	bl	b7b74 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b821e:	4620      	mov	r0, r4
   b8220:	b002      	add	sp, #8
   b8222:	bd10      	pop	{r4, pc}

000b8224 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   b8224:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8226:	4605      	mov	r5, r0
   b8228:	460c      	mov	r4, r1
    WiringBleLock lk;
   b822a:	a801      	add	r0, sp, #4
   b822c:	f7ff fc94 	bl	b7b58 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b8230:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b8232:	6823      	ldr	r3, [r4, #0]
   b8234:	f8c2 3002 	str.w	r3, [r2, #2]
   b8238:	6863      	ldr	r3, [r4, #4]
   b823a:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   b823e:	a801      	add	r0, sp, #4
   b8240:	f7ff fc98 	bl	b7b74 <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   b8244:	b003      	add	sp, #12
   b8246:	bd30      	pop	{r4, r5, pc}

000b8248 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   b8248:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b824a:	460d      	mov	r5, r1
   b824c:	4604      	mov	r4, r0
    WiringBleLock lk;
   b824e:	a801      	add	r0, sp, #4
   b8250:	f7ff fc82 	bl	b7b58 <_ZN8particle3ble13WiringBleLockC1Ev>
   b8254:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b8256:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b825a:	6023      	str	r3, [r4, #0]
   b825c:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b8260:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b8262:	a801      	add	r0, sp, #4
   b8264:	f7ff fc86 	bl	b7b74 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b8268:	4620      	mov	r0, r4
   b826a:	b003      	add	sp, #12
   b826c:	bd30      	pop	{r4, r5, pc}

000b826e <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b826e:	b530      	push	{r4, r5, lr}
   b8270:	4605      	mov	r5, r0
   b8272:	b087      	sub	sp, #28
   b8274:	460c      	mov	r4, r1
    WiringBleLock lk;
   b8276:	a801      	add	r0, sp, #4
   b8278:	f7ff fc6e 	bl	b7b58 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b827c:	682a      	ldr	r2, [r5, #0]
   b827e:	6823      	ldr	r3, [r4, #0]
   b8280:	8812      	ldrh	r2, [r2, #0]
   b8282:	881b      	ldrh	r3, [r3, #0]
   b8284:	429a      	cmp	r2, r3
   b8286:	d10d      	bne.n	b82a4 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b8288:	4629      	mov	r1, r5
   b828a:	a802      	add	r0, sp, #8
   b828c:	f7ff ffdc 	bl	b8248 <_ZNK8particle13BlePeerDevice7addressEv>
   b8290:	4621      	mov	r1, r4
   b8292:	a804      	add	r0, sp, #16
   b8294:	f7ff ffd8 	bl	b8248 <_ZNK8particle13BlePeerDevice7addressEv>
   b8298:	a904      	add	r1, sp, #16
   b829a:	a802      	add	r0, sp, #8
   b829c:	f7ff fc83 	bl	b7ba6 <_ZNK8particle10BleAddresseqERKS0_>
   b82a0:	4604      	mov	r4, r0
   b82a2:	b900      	cbnz	r0, b82a6 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b82a4:	2400      	movs	r4, #0
    WiringBleLock lk;
   b82a6:	a801      	add	r0, sp, #4
   b82a8:	f7ff fc64 	bl	b7b74 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b82ac:	4620      	mov	r0, r4
   b82ae:	b007      	add	sp, #28
   b82b0:	bd30      	pop	{r4, r5, pc}
	...

000b82b4 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b82b4:	b510      	push	{r4, lr}
   b82b6:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b82b8:	2064      	movs	r0, #100	; 0x64
   b82ba:	f7fb feec 	bl	b4096 <_Znwj>
   b82be:	b168      	cbz	r0, b82dc <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b82c0:	2300      	movs	r3, #0
   b82c2:	e9c0 3300 	strd	r3, r3, [r0]
   b82c6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b82ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b82ce:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b82d2:	6203      	str	r3, [r0, #32]
   b82d4:	62c3      	str	r3, [r0, #44]	; 0x2c
   b82d6:	63c3      	str	r3, [r0, #60]	; 0x3c
   b82d8:	64c3      	str	r3, [r0, #76]	; 0x4c
   b82da:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b82dc:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b82de:	b920      	cbnz	r0, b82ea <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b82e0:	4a0a      	ldr	r2, [pc, #40]	; (b830c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b82e2:	490b      	ldr	r1, [pc, #44]	; (b8310 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b82e4:	200a      	movs	r0, #10
   b82e6:	f7fe ffb1 	bl	b724c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b82ea:	2000      	movs	r0, #0
   b82ec:	f7fe fdb2 	bl	b6e54 <hal_ble_stack_init>
   b82f0:	b120      	cbz	r0, b82fc <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b82f2:	4a06      	ldr	r2, [pc, #24]	; (b830c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b82f4:	4907      	ldr	r1, [pc, #28]	; (b8314 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b82f6:	200a      	movs	r0, #10
   b82f8:	f7fe ffa8 	bl	b724c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b82fc:	6821      	ldr	r1, [r4, #0]
   b82fe:	4806      	ldr	r0, [pc, #24]	; (b8318 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b8300:	2200      	movs	r2, #0
   b8302:	f7fe fe1b 	bl	b6f3c <hal_ble_set_callback_on_periph_link_events>
}
   b8306:	4620      	mov	r0, r4
   b8308:	bd10      	pop	{r4, pc}
   b830a:	bf00      	nop
   b830c:	000b6e05 	.word	0x000b6e05
   b8310:	000be42c 	.word	0x000be42c
   b8314:	000be46a 	.word	0x000be46a
   b8318:	000b8d25 	.word	0x000b8d25

000b831c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b831c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b831e:	4c0a      	ldr	r4, [pc, #40]	; (b8348 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b8320:	7823      	ldrb	r3, [r4, #0]
   b8322:	f3bf 8f5b 	dmb	ish
   b8326:	07db      	lsls	r3, r3, #31
   b8328:	d40c      	bmi.n	b8344 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b832a:	4620      	mov	r0, r4
   b832c:	f7fb feb9 	bl	b40a2 <__cxa_guard_acquire>
   b8330:	b140      	cbz	r0, b8344 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b8332:	4806      	ldr	r0, [pc, #24]	; (b834c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b8334:	f7ff ffbe 	bl	b82b4 <_ZN8particle14BleLocalDeviceC1Ev>
   b8338:	4620      	mov	r0, r4
   b833a:	f7fb feb7 	bl	b40ac <__cxa_guard_release>
   b833e:	4804      	ldr	r0, [pc, #16]	; (b8350 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b8340:	f003 fca4 	bl	bbc8c <atexit>
    return instance;
}
   b8344:	4801      	ldr	r0, [pc, #4]	; (b834c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b8346:	bd10      	pop	{r4, pc}
   b8348:	2003e668 	.word	0x2003e668
   b834c:	2003e670 	.word	0x2003e670
   b8350:	000b8629 	.word	0x000b8629

000b8354 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b8354:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b8356:	6803      	ldr	r3, [r0, #0]
   b8358:	3b09      	subs	r3, #9
   b835a:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b835c:	b08d      	sub	sp, #52	; 0x34
   b835e:	4604      	mov	r4, r0
   b8360:	460d      	mov	r5, r1
    switch (event->type) {
   b8362:	d811      	bhi.n	b8388 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b8364:	f7ff ffda 	bl	b831c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b8368:	88a1      	ldrh	r1, [r4, #4]
   b836a:	6800      	ldr	r0, [r0, #0]
   b836c:	f7ff fe39 	bl	b7fe2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b8370:	4603      	mov	r3, r0
   b8372:	b958      	cbnz	r0, b838c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b8374:	2220      	movs	r2, #32
   b8376:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b837a:	4a0b      	ldr	r2, [pc, #44]	; (b83a8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b837c:	9200      	str	r2, [sp, #0]
   b837e:	490b      	ldr	r1, [pc, #44]	; (b83ac <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b8380:	aa04      	add	r2, sp, #16
   b8382:	2032      	movs	r0, #50	; 0x32
   b8384:	f7fe ff6a 	bl	b725c <log_message>
}
   b8388:	b00d      	add	sp, #52	; 0x34
   b838a:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b838c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b838e:	2a00      	cmp	r2, #0
   b8390:	d0fa      	beq.n	b8388 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b8392:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8396:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b839a:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b839e:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b83a0:	aa04      	add	r2, sp, #16
   b83a2:	a903      	add	r1, sp, #12
   b83a4:	47a0      	blx	r4
}
   b83a6:	e7ef      	b.n	b8388 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b83a8:	000be4ac 	.word	0x000be4ac
   b83ac:	000be443 	.word	0x000be443

000b83b0 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b83b0:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b83b2:	2000      	movs	r0, #0
   b83b4:	f7fe fd4e 	bl	b6e54 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b83b8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b83bc:	bd08      	pop	{r3, pc}
	...

000b83c0 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   b83c0:	b570      	push	{r4, r5, r6, lr}
   b83c2:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   b83c4:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   b83c6:	460e      	mov	r6, r1
   b83c8:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   b83ca:	f7ff fb43 	bl	b7a54 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   b83ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b83d2:	f7ff fb4a 	bl	b7a6a <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   b83d6:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   b83da:	2200      	movs	r2, #0
   b83dc:	4621      	mov	r1, r4
   b83de:	4803      	ldr	r0, [pc, #12]	; (b83ec <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   b83e0:	f7fe fd40 	bl	b6e64 <hal_ble_gap_start_scan>
   b83e4:	2800      	cmp	r0, #0
        return foundCount_;
   b83e6:	bfa8      	it	ge
   b83e8:	6960      	ldrge	r0, [r4, #20]
    }
   b83ea:	bd70      	pop	{r4, r5, r6, pc}
   b83ec:	000b9d31 	.word	0x000b9d31

000b83f0 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   b83f0:	b510      	push	{r4, lr}
   b83f2:	4604      	mov	r4, r0
    ::free(ptr);
   b83f4:	6940      	ldr	r0, [r0, #20]
   b83f6:	f7ff f815 	bl	b7424 <free>
   b83fa:	68a0      	ldr	r0, [r4, #8]
   b83fc:	f7ff f812 	bl	b7424 <free>
   b8400:	4620      	mov	r0, r4
   b8402:	bd10      	pop	{r4, pc}

000b8404 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   b8404:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b8406:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b840a:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
   b840e:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b8412:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b8416:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b841a:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b841e:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b8422:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b8426:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b842a:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b842e:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   b8432:	6202      	str	r2, [r0, #32]
   b8434:	6302      	str	r2, [r0, #48]	; 0x30
   b8436:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
   b843a:	4770      	bx	lr

000b843c <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b843c:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b843e:	69d8      	ldr	r0, [r3, #28]
}
   b8440:	2800      	cmp	r0, #0
   b8442:	bfd4      	ite	le
   b8444:	2000      	movle	r0, #0
   b8446:	2001      	movgt	r0, #1
   b8448:	4770      	bx	lr

000b844a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b844a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b844c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8450:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8452:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b8456:	42ae      	cmp	r6, r5
   b8458:	d004      	beq.n	b8464 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b845a:	4628      	mov	r0, r5
   b845c:	f7ff f958 	bl	b7710 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b8460:	3510      	adds	r5, #16
   b8462:	e7f8      	b.n	b8456 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8464:	6820      	ldr	r0, [r4, #0]
   b8466:	f7fe ffdd 	bl	b7424 <free>
}
   b846a:	4620      	mov	r0, r4
   b846c:	bd70      	pop	{r4, r5, r6, pc}

000b846e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b846e:	b510      	push	{r4, lr}
   b8470:	4604      	mov	r4, r0
    ::free(ptr);
   b8472:	6800      	ldr	r0, [r0, #0]
   b8474:	f7fe ffd6 	bl	b7424 <free>
}
   b8478:	4620      	mov	r0, r4
   b847a:	bd10      	pop	{r4, pc}

000b847c <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   b847c:	b570      	push	{r4, r5, r6, lr}
   b847e:	4604      	mov	r4, r0
    ::free(ptr);
   b8480:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b8482:	f7fe ffcf 	bl	b7424 <free>
   b8486:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b8488:	f7fe ffcc 	bl	b7424 <free>
    }
    ~BleScanFilter() = default;
   b848c:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b8490:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8494:	f7ff ffeb 	bl	b846e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b8498:	4628      	mov	r0, r5
   b849a:	f7ff ffd6 	bl	b844a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b849e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b84a2:	f7fb fefb 	bl	b429c <_ZNSt14_Function_baseD1Ev>
   b84a6:	f104 0018 	add.w	r0, r4, #24
   b84aa:	f7fb fef7 	bl	b429c <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b84ae:	e9d4 5300 	ldrd	r5, r3, [r4]
   b84b2:	2624      	movs	r6, #36	; 0x24
   b84b4:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b84b8:	42ae      	cmp	r6, r5
   b84ba:	d004      	beq.n	b84c6 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b84bc:	4628      	mov	r0, r5
   b84be:	f7ff ff97 	bl	b83f0 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b84c2:	3524      	adds	r5, #36	; 0x24
   b84c4:	e7f8      	b.n	b84b8 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b84c6:	6820      	ldr	r0, [r4, #0]
   b84c8:	f7fe ffac 	bl	b7424 <free>
   b84cc:	4620      	mov	r0, r4
   b84ce:	bd70      	pop	{r4, r5, r6, pc}

000b84d0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   b84d0:	b530      	push	{r4, r5, lr}
   b84d2:	4615      	mov	r5, r2
   b84d4:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   b84d6:	460c      	mov	r4, r1
   b84d8:	b179      	cbz	r1, b84fa <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   b84da:	b172      	cbz	r2, b84fa <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
    BleScanDelegator scanner;
   b84dc:	a801      	add	r0, sp, #4
   b84de:	f7ff ff91 	bl	b8404 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   b84e2:	4621      	mov	r1, r4
   b84e4:	462a      	mov	r2, r5
   b84e6:	a801      	add	r0, sp, #4
   b84e8:	f7ff ff6a 	bl	b83c0 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   b84ec:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   b84ee:	a801      	add	r0, sp, #4
   b84f0:	f7ff ffc4 	bl	b847c <_ZN8particle16BleScanDelegatorD1Ev>
}
   b84f4:	4620      	mov	r0, r4
   b84f6:	b01f      	add	sp, #124	; 0x7c
   b84f8:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b84fa:	4c01      	ldr	r4, [pc, #4]	; (b8500 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   b84fc:	e7fa      	b.n	b84f4 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   b84fe:	bf00      	nop
   b8500:	fffffef2 	.word	0xfffffef2

000b8504 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b8504:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b8506:	1e14      	subs	r4, r2, #0
   b8508:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b850a:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b850c:	db02      	blt.n	b8514 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b850e:	1862      	adds	r2, r4, r1
   b8510:	429a      	cmp	r2, r3
   b8512:	dd00      	ble.n	b8516 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b8514:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b8516:	682a      	ldr	r2, [r5, #0]
   b8518:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b851a:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b851c:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b851e:	1a52      	subs	r2, r2, r1
   b8520:	f003 fbdf 	bl	bbce2 <memmove>
    size_ -= n;
   b8524:	686a      	ldr	r2, [r5, #4]
   b8526:	1b12      	subs	r2, r2, r4
   b8528:	606a      	str	r2, [r5, #4]
}
   b852a:	bd38      	pop	{r3, r4, r5, pc}

000b852c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b852c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b852e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b8530:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b8532:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8534:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b8536:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8538:	f7fb fdad 	bl	b4096 <_Znwj>
   b853c:	b118      	cbz	r0, b8546 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b853e:	682b      	ldr	r3, [r5, #0]
   b8540:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8542:	686b      	ldr	r3, [r5, #4]
   b8544:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b8546:	4b03      	ldr	r3, [pc, #12]	; (b8554 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b8548:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b854a:	4b03      	ldr	r3, [pc, #12]	; (b8558 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b854c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b854e:	60a3      	str	r3, [r4, #8]
      }
   b8550:	4620      	mov	r0, r4
   b8552:	bd38      	pop	{r3, r4, r5, pc}
   b8554:	000b79fd 	.word	0x000b79fd
   b8558:	000b7a15 	.word	0x000b7a15

000b855c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b855c:	680b      	ldr	r3, [r1, #0]
   b855e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b8560:	b113      	cbz	r3, b8568 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b8562:	685a      	ldr	r2, [r3, #4]
   b8564:	3201      	adds	r2, #1
   b8566:	605a      	str	r2, [r3, #4]
      }
   b8568:	4770      	bx	lr

000b856a <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b856a:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b856c:	f851 3b04 	ldr.w	r3, [r1], #4
   b8570:	4604      	mov	r4, r0
   b8572:	f840 3b04 	str.w	r3, [r0], #4
   b8576:	f7ff fff1 	bl	b855c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b857a:	6823      	ldr	r3, [r4, #0]
   b857c:	b90b      	cbnz	r3, b8582 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b857e:	f7ff fa33 	bl	b79e8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b8582:	4620      	mov	r0, r4
   b8584:	bd10      	pop	{r4, pc}

000b8586 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b8586:	b510      	push	{r4, lr}
   b8588:	f851 3b04 	ldr.w	r3, [r1], #4
   b858c:	4604      	mov	r4, r0
   b858e:	f840 3b04 	str.w	r3, [r0], #4
   b8592:	f7ff ffe3 	bl	b855c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b8596:	4620      	mov	r0, r4
   b8598:	bd10      	pop	{r4, pc}

000b859a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b859a:	b510      	push	{r4, lr}
   b859c:	f851 3b04 	ldr.w	r3, [r1], #4
   b85a0:	4604      	mov	r4, r0
   b85a2:	f840 3b04 	str.w	r3, [r0], #4
   b85a6:	f7ff ffd9 	bl	b855c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b85aa:	4620      	mov	r0, r4
   b85ac:	bd10      	pop	{r4, pc}

000b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b85ae:	b510      	push	{r4, lr}
   b85b0:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b85b2:	6800      	ldr	r0, [r0, #0]
   b85b4:	b108      	cbz	r0, b85ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b85b6:	f7fb feaf 	bl	b4318 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b85ba:	4620      	mov	r0, r4
   b85bc:	bd10      	pop	{r4, pc}

000b85be <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   b85be:	b510      	push	{r4, lr}
   b85c0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b85c2:	3004      	adds	r0, #4
   b85c4:	f7ff fff3 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b85c8:	4620      	mov	r0, r4
   b85ca:	bd10      	pop	{r4, pc}

000b85cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b85cc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b85ce:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b85d2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b85d4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b85d8:	42ae      	cmp	r6, r5
   b85da:	d004      	beq.n	b85e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b85dc:	1d28      	adds	r0, r5, #4
   b85de:	f7ff ffe6 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b85e2:	3508      	adds	r5, #8
   b85e4:	e7f8      	b.n	b85d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b85e6:	6820      	ldr	r0, [r4, #0]
   b85e8:	f7fe ff1c 	bl	b7424 <free>
}
   b85ec:	4620      	mov	r0, r4
   b85ee:	bd70      	pop	{r4, r5, r6, pc}

000b85f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b85f0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b85f2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b85f6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b85f8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b85fc:	42ae      	cmp	r6, r5
   b85fe:	d004      	beq.n	b860a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b8600:	1d28      	adds	r0, r5, #4
   b8602:	f7ff ffd4 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8606:	3508      	adds	r5, #8
   b8608:	e7f8      	b.n	b85fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b860a:	6820      	ldr	r0, [r4, #0]
   b860c:	f7fe ff0a 	bl	b7424 <free>
}
   b8610:	4620      	mov	r0, r4
   b8612:	bd70      	pop	{r4, r5, r6, pc}

000b8614 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8614:	b510      	push	{r4, lr}
   b8616:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b8618:	3024      	adds	r0, #36	; 0x24
   b861a:	f7ff ffe9 	bl	b85f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b861e:	f104 0018 	add.w	r0, r4, #24
   b8622:	f7ff ffd3 	bl	b85cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b8626:	bd10      	pop	{r4, pc}

000b8628 <__tcf_0>:
    static BleLocalDevice instance;
   b8628:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b862a:	4b17      	ldr	r3, [pc, #92]	; (b8688 <__tcf_0+0x60>)
   b862c:	681c      	ldr	r4, [r3, #0]
   b862e:	b354      	cbz	r4, b8686 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b8630:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8634:	f7fb fe32 	bl	b429c <_ZNSt14_Function_baseD1Ev>
   b8638:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b863c:	f7fb fe2e 	bl	b429c <_ZNSt14_Function_baseD1Ev>
   b8640:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8644:	f7fb fe2a 	bl	b429c <_ZNSt14_Function_baseD1Ev>
   b8648:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b864c:	f7fb fe26 	bl	b429c <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b8650:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b8654:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8658:	42ae      	cmp	r6, r5
   b865a:	d004      	beq.n	b8666 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b865c:	1d28      	adds	r0, r5, #4
   b865e:	f7ff ffa6 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8662:	3508      	adds	r5, #8
   b8664:	e7f8      	b.n	b8658 <__tcf_0+0x30>
    ::free(ptr);
   b8666:	69a0      	ldr	r0, [r4, #24]
   b8668:	f7fe fedc 	bl	b7424 <free>
    ~BleLocalDeviceImpl() = default;
   b866c:	f104 000c 	add.w	r0, r4, #12
   b8670:	f7ff ffbe 	bl	b85f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b8674:	4620      	mov	r0, r4
   b8676:	f7ff ffa9 	bl	b85cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b867a:	4620      	mov	r0, r4
   b867c:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b867e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8682:	f7fb bd0c 	b.w	b409e <_ZdlPvj>
   b8686:	bd70      	pop	{r4, r5, r6, pc}
   b8688:	2003e670 	.word	0x2003e670

000b868c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b868c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b868e:	b510      	push	{r4, lr}
      if (_M_empty())
   b8690:	b90a      	cbnz	r2, b8696 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b8692:	f002 fcda 	bl	bb04a <_ZSt25__throw_bad_function_callv>
    }
   b8696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b869a:	68c3      	ldr	r3, [r0, #12]
   b869c:	4718      	bx	r3

000b869e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b869e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b86a2:	2300      	movs	r3, #0
   b86a4:	e9c0 3300 	strd	r3, r3, [r0]
   b86a8:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b86aa:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b86ae:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b86b0:	4605      	mov	r5, r0
   b86b2:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b86b4:	dd4a      	ble.n	b874c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   b86b6:	ea4f 1008 	mov.w	r0, r8, lsl #4
   b86ba:	f7fe feab 	bl	b7414 <malloc>
            if (!d) {
   b86be:	4606      	mov	r6, r0
   b86c0:	2800      	cmp	r0, #0
   b86c2:	d043      	beq.n	b874c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   b86c4:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   b86c8:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b86ca:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   b86ce:	d916      	bls.n	b86fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   b86d0:	4550      	cmp	r0, sl
   b86d2:	d215      	bcs.n	b8700 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   b86d4:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   b86d8:	f1a4 0910 	sub.w	r9, r4, #16
   b86dc:	ebaa 0404 	sub.w	r4, sl, r4
   b86e0:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b86e2:	45d1      	cmp	r9, sl
   b86e4:	d01d      	beq.n	b8722 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   b86e6:	b11c      	cbz	r4, b86f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   b86e8:	4651      	mov	r1, sl
   b86ea:	4620      	mov	r0, r4
   b86ec:	f7ff f88c 	bl	b7808 <_ZN6StringC1EOS_>
                end->~T();
   b86f0:	4650      	mov	r0, sl
   b86f2:	f7ff f80d 	bl	b7710 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b86f6:	f1aa 0a10 	sub.w	sl, sl, #16
   b86fa:	3c10      	subs	r4, #16
   b86fc:	e7f1      	b.n	b86e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   b86fe:	d010      	beq.n	b8722 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   b8700:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   b8702:	45a2      	cmp	sl, r4
   b8704:	d00d      	beq.n	b8722 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   b8706:	f1b9 0f00 	cmp.w	r9, #0
   b870a:	d003      	beq.n	b8714 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   b870c:	4621      	mov	r1, r4
   b870e:	4648      	mov	r0, r9
   b8710:	f7ff f87a 	bl	b7808 <_ZN6StringC1EOS_>
                p->~T();
   b8714:	4620      	mov	r0, r4
   b8716:	f7fe fffb 	bl	b7710 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b871a:	3410      	adds	r4, #16
   b871c:	f109 0910 	add.w	r9, r9, #16
   b8720:	e7ef      	b.n	b8702 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   b8722:	6828      	ldr	r0, [r5, #0]
   b8724:	f7fe fe7e 	bl	b7424 <free>
        capacity_ = n;
   b8728:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   b872c:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b872e:	e9d7 4300 	ldrd	r4, r3, [r7]
   b8732:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   b8736:	45a0      	cmp	r8, r4
   b8738:	d006      	beq.n	b8748 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   b873a:	4621      	mov	r1, r4
   b873c:	4630      	mov	r0, r6
   b873e:	f7ff f87d 	bl	b783c <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   b8742:	3410      	adds	r4, #16
   b8744:	3610      	adds	r6, #16
   b8746:	e7f6      	b.n	b8736 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   b8748:	687b      	ldr	r3, [r7, #4]
   b874a:	606b      	str	r3, [r5, #4]
}
   b874c:	4628      	mov	r0, r5
   b874e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b8752 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   b8752:	b530      	push	{r4, r5, lr}
   b8754:	b08d      	sub	sp, #52	; 0x34
   b8756:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   b8758:	f100 0138 	add.w	r1, r0, #56	; 0x38
   b875c:	a801      	add	r0, sp, #4
   b875e:	f7ff ff9e 	bl	b869e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   b8762:	9b02      	ldr	r3, [sp, #8]
   b8764:	2b00      	cmp	r3, #0
   b8766:	dd2f      	ble.n	b87c8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   b8768:	f104 0114 	add.w	r1, r4, #20
   b876c:	a804      	add	r0, sp, #16
   b876e:	f7ff fbd3 	bl	b7f18 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   b8772:	f104 0108 	add.w	r1, r4, #8
   b8776:	a808      	add	r0, sp, #32
   b8778:	f7ff fbce 	bl	b7f18 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   b877c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b877e:	9b06      	ldr	r3, [sp, #24]
   b8780:	4313      	orrs	r3, r2
   b8782:	d01f      	beq.n	b87c4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   b8784:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   b8788:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   b878c:	42ac      	cmp	r4, r5
   b878e:	d019      	beq.n	b87c4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b8790:	a904      	add	r1, sp, #16
   b8792:	4620      	mov	r0, r4
   b8794:	f7ff f8a8 	bl	b78e8 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b8798:	b160      	cbz	r0, b87b4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   b879a:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   b879c:	a808      	add	r0, sp, #32
   b879e:	f7fe ffb7 	bl	b7710 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   b87a2:	a804      	add	r0, sp, #16
   b87a4:	f7fe ffb4 	bl	b7710 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   b87a8:	a801      	add	r0, sp, #4
   b87aa:	f7ff fe4e 	bl	b844a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   b87ae:	4620      	mov	r0, r4
   b87b0:	b00d      	add	sp, #52	; 0x34
   b87b2:	bd30      	pop	{r4, r5, pc}
   b87b4:	4620      	mov	r0, r4
   b87b6:	a908      	add	r1, sp, #32
   b87b8:	f7ff f896 	bl	b78e8 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b87bc:	3410      	adds	r4, #16
   b87be:	2800      	cmp	r0, #0
   b87c0:	d0e4      	beq.n	b878c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   b87c2:	e7ea      	b.n	b879a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   b87c4:	2400      	movs	r4, #0
   b87c6:	e7e9      	b.n	b879c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   b87c8:	2401      	movs	r4, #1
   b87ca:	e7ed      	b.n	b87a8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000b87cc <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b87cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   b87ce:	2300      	movs	r3, #0
   b87d0:	e9c0 3300 	strd	r3, r3, [r0]
   b87d4:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b87d6:	684f      	ldr	r7, [r1, #4]
   b87d8:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b87da:	4605      	mov	r5, r0
   b87dc:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b87de:	dd3e      	ble.n	b885e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   b87e0:	00f8      	lsls	r0, r7, #3
   b87e2:	f7fe fe17 	bl	b7414 <malloc>
            if (!d) {
   b87e6:	4604      	mov	r4, r0
   b87e8:	b3c8      	cbz	r0, b885e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   b87ea:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   b87ee:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b87f0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   b87f4:	d910      	bls.n	b8818 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b87f6:	429c      	cmp	r4, r3
   b87f8:	d20f      	bcs.n	b881a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   b87fa:	3b08      	subs	r3, #8
            dest += end - p - 1;
   b87fc:	1a1a      	subs	r2, r3, r0
   b87fe:	f1a0 0c08 	sub.w	ip, r0, #8
   b8802:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   b8804:	459c      	cmp	ip, r3
   b8806:	d018      	beq.n	b883a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   b8808:	b11a      	cbz	r2, b8812 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   b880a:	6819      	ldr	r1, [r3, #0]
   b880c:	6011      	str	r1, [r2, #0]
   b880e:	6859      	ldr	r1, [r3, #4]
   b8810:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   b8812:	3b08      	subs	r3, #8
   b8814:	3a08      	subs	r2, #8
   b8816:	e7f5      	b.n	b8804 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   b8818:	d00f      	beq.n	b883a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   b881a:	4601      	mov	r1, r0
   b881c:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   b881e:	428b      	cmp	r3, r1
   b8820:	d00b      	beq.n	b883a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   b8822:	b13a      	cbz	r2, b8834 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   b8824:	f8d1 c000 	ldr.w	ip, [r1]
   b8828:	f8c2 c000 	str.w	ip, [r2]
   b882c:	f8d1 c004 	ldr.w	ip, [r1, #4]
   b8830:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   b8834:	3108      	adds	r1, #8
   b8836:	3208      	adds	r2, #8
   b8838:	e7f1      	b.n	b881e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   b883a:	f7fe fdf3 	bl	b7424 <free>
        data_ = d;
   b883e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8840:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8842:	e9d6 3100 	ldrd	r3, r1, [r6]
   b8846:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   b884a:	4298      	cmp	r0, r3
   b884c:	d006      	beq.n	b885c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   b884e:	681a      	ldr	r2, [r3, #0]
   b8850:	6022      	str	r2, [r4, #0]
   b8852:	685a      	ldr	r2, [r3, #4]
   b8854:	6062      	str	r2, [r4, #4]
   b8856:	3308      	adds	r3, #8
   b8858:	3408      	adds	r4, #8
   b885a:	e7f6      	b.n	b884a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   b885c:	6069      	str	r1, [r5, #4]
}
   b885e:	4628      	mov	r0, r5
   b8860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8862 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8862:	b570      	push	{r4, r5, r6, lr}
   b8864:	4604      	mov	r4, r0
        capacity_(0) {
   b8866:	2000      	movs	r0, #0
   b8868:	e9c4 0000 	strd	r0, r0, [r4]
   b886c:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b886e:	684e      	ldr	r6, [r1, #4]
   b8870:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8872:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8874:	dd12      	ble.n	b889c <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   b8876:	0071      	lsls	r1, r6, #1
   b8878:	f7fe fddc 	bl	b7434 <realloc>
            if (!d) {
   b887c:	b170      	cbz	r0, b889c <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   b887e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8880:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8882:	e9d5 3200 	ldrd	r3, r2, [r5]
   b8886:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   b888a:	429a      	cmp	r2, r3
   b888c:	d004      	beq.n	b8898 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   b888e:	f833 1b02 	ldrh.w	r1, [r3], #2
   b8892:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   b8896:	e7f8      	b.n	b888a <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   b8898:	686b      	ldr	r3, [r5, #4]
   b889a:	6063      	str	r3, [r4, #4]
}
   b889c:	4620      	mov	r0, r4
   b889e:	bd70      	pop	{r4, r5, r6, pc}

000b88a0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   b88a0:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b88a2:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b88a4:	4604      	mov	r4, r0
        if (!dismissed_) {
   b88a6:	b923      	cbnz	r3, b88b2 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   b88a8:	6803      	ldr	r3, [r0, #0]
   b88aa:	6818      	ldr	r0, [r3, #0]
   b88ac:	b108      	cbz	r0, b88b2 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   b88ae:	f7fe fdb9 	bl	b7424 <free>
            func_();
        }
    }
   b88b2:	4620      	mov	r0, r4
   b88b4:	bd10      	pop	{r4, pc}

000b88b6 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   b88b6:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b88b8:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b88ba:	4604      	mov	r4, r0
        if (!dismissed_) {
   b88bc:	b923      	cbnz	r3, b88c8 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   b88be:	6803      	ldr	r3, [r0, #0]
   b88c0:	6818      	ldr	r0, [r3, #0]
   b88c2:	b108      	cbz	r0, b88c8 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   b88c4:	f7fe fdae 	bl	b7424 <free>
    }
   b88c8:	4620      	mov	r0, r4
   b88ca:	bd10      	pop	{r4, pc}

000b88cc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   b88cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   b88d0:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   b88d4:	b08f      	sub	sp, #60	; 0x3c
   b88d6:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   b88d8:	f1b8 0f00 	cmp.w	r8, #0
   b88dc:	d072      	beq.n	b89c4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   b88de:	6f05      	ldr	r5, [r0, #112]	; 0x70
   b88e0:	2d00      	cmp	r5, #0
   b88e2:	d06f      	beq.n	b89c4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   b88e4:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b88e8:	231f      	movs	r3, #31
   b88ea:	2200      	movs	r2, #0
   b88ec:	21ff      	movs	r1, #255	; 0xff
   b88ee:	4648      	mov	r0, r9
   b88f0:	f7ff fadf 	bl	b7eb2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   b88f4:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b88f6:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b88f8:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b88fa:	2200      	movs	r2, #0
   b88fc:	4619      	mov	r1, r3
   b88fe:	4638      	mov	r0, r7
   b8900:	f7ff fad7 	bl	b7eb2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b8904:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b8906:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b8908:	d006      	beq.n	b8918 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   b890a:	42ae      	cmp	r6, r5
   b890c:	d030      	beq.n	b8970 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   b890e:	2400      	movs	r4, #0
    }
   b8910:	4620      	mov	r0, r4
   b8912:	b00f      	add	sp, #60	; 0x3c
   b8914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   b8918:	4620      	mov	r0, r4
   b891a:	f7fe fd7b 	bl	b7414 <malloc>
            dismissed_(false) {
   b891e:	ab03      	add	r3, sp, #12
   b8920:	9304      	str	r3, [sp, #16]
   b8922:	2300      	movs	r3, #0
   b8924:	4604      	mov	r4, r0
   b8926:	9003      	str	r0, [sp, #12]
   b8928:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   b892c:	b970      	cbnz	r0, b894c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   b892e:	2320      	movs	r3, #32
   b8930:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b8934:	4b24      	ldr	r3, [pc, #144]	; (b89c8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b8936:	9300      	str	r3, [sp, #0]
   b8938:	4924      	ldr	r1, [pc, #144]	; (b89cc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b893a:	4603      	mov	r3, r0
   b893c:	aa06      	add	r2, sp, #24
   b893e:	2032      	movs	r0, #50	; 0x32
   b8940:	f7fe fc8c 	bl	b725c <log_message>
                    return false;
   b8944:	a804      	add	r0, sp, #16
   b8946:	f7ff ffab 	bl	b88a0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   b894a:	e7e1      	b.n	b8910 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   b894c:	4602      	mov	r2, r0
   b894e:	21ff      	movs	r1, #255	; 0xff
   b8950:	462b      	mov	r3, r5
   b8952:	4648      	mov	r0, r9
   b8954:	f7ff faad 	bl	b7eb2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   b8958:	9803      	ldr	r0, [sp, #12]
   b895a:	462a      	mov	r2, r5
   b895c:	4641      	mov	r1, r8
   b895e:	f003 f9a2 	bl	bbca6 <memcmp>
   b8962:	b118      	cbz	r0, b896c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   b8964:	a804      	add	r0, sp, #16
   b8966:	f7ff ff9b 	bl	b88a0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   b896a:	e7ce      	b.n	b890a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   b896c:	2401      	movs	r4, #1
   b896e:	e7e9      	b.n	b8944 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   b8970:	4628      	mov	r0, r5
   b8972:	f7fe fd4f 	bl	b7414 <malloc>
   b8976:	2400      	movs	r4, #0
   b8978:	ab03      	add	r3, sp, #12
   b897a:	4606      	mov	r6, r0
   b897c:	9003      	str	r0, [sp, #12]
   b897e:	9304      	str	r3, [sp, #16]
   b8980:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   b8984:	b978      	cbnz	r0, b89a6 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   b8986:	2320      	movs	r3, #32
   b8988:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b898c:	4b0e      	ldr	r3, [pc, #56]	; (b89c8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b898e:	9300      	str	r3, [sp, #0]
   b8990:	490e      	ldr	r1, [pc, #56]	; (b89cc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b8992:	4603      	mov	r3, r0
   b8994:	aa06      	add	r2, sp, #24
   b8996:	2032      	movs	r0, #50	; 0x32
   b8998:	f7fe fc60 	bl	b725c <log_message>
                    return false;
   b899c:	4634      	mov	r4, r6
   b899e:	a804      	add	r0, sp, #16
   b89a0:	f7ff ff89 	bl	b88b6 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   b89a4:	e7b4      	b.n	b8910 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   b89a6:	4602      	mov	r2, r0
   b89a8:	21ff      	movs	r1, #255	; 0xff
   b89aa:	462b      	mov	r3, r5
   b89ac:	4638      	mov	r0, r7
   b89ae:	f7ff fa80 	bl	b7eb2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   b89b2:	9803      	ldr	r0, [sp, #12]
   b89b4:	462a      	mov	r2, r5
   b89b6:	4641      	mov	r1, r8
   b89b8:	f003 f975 	bl	bbca6 <memcmp>
   b89bc:	2800      	cmp	r0, #0
   b89be:	d1ee      	bne.n	b899e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   b89c0:	2401      	movs	r4, #1
   b89c2:	e7ec      	b.n	b899e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   b89c4:	2401      	movs	r4, #1
   b89c6:	e7a3      	b.n	b8910 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   b89c8:	000be4c4 	.word	0x000be4c4
   b89cc:	000be443 	.word	0x000be443

000b89d0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b89d0:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b89d2:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b89d4:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b89d6:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b89d8:	dd03      	ble.n	b89e2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b89da:	f7fe fd2b 	bl	b7434 <realloc>
            if (!d) {
   b89de:	b918      	cbnz	r0, b89e8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b89e0:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b89e2:	f7fe fd1f 	bl	b7424 <free>
        T* d = nullptr;
   b89e6:	2000      	movs	r0, #0
        data_ = d;
   b89e8:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b89ea:	60a5      	str	r5, [r4, #8]
        return true;
   b89ec:	2001      	movs	r0, #1
   b89ee:	e7f7      	b.n	b89e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b89f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b89f0:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b89f2:	6883      	ldr	r3, [r0, #8]
   b89f4:	428b      	cmp	r3, r1
   b89f6:	da02      	bge.n	b89fe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b89f8:	f7ff ffea 	bl	b89d0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b89fc:	bd08      	pop	{r3, pc}
    return true;
   b89fe:	2001      	movs	r0, #1
   b8a00:	e7fc      	b.n	b89fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b8a02 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8a02:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b8a04:	2300      	movs	r3, #0
   b8a06:	e9c0 3300 	strd	r3, r3, [r0]
   b8a0a:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8a0c:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8a0e:	6849      	ldr	r1, [r1, #4]
   b8a10:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8a12:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8a14:	dd10      	ble.n	b8a38 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   b8a16:	f7ff ffdb 	bl	b89d0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8a1a:	b168      	cbz	r0, b8a38 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8a1c:	e9d5 3100 	ldrd	r3, r1, [r5]
   b8a20:	6822      	ldr	r2, [r4, #0]
   b8a22:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   b8a24:	4299      	cmp	r1, r3
   b8a26:	d005      	beq.n	b8a34 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   b8a28:	b10a      	cbz	r2, b8a2e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   b8a2a:	7818      	ldrb	r0, [r3, #0]
   b8a2c:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   b8a2e:	3301      	adds	r3, #1
   b8a30:	3201      	adds	r2, #1
   b8a32:	e7f7      	b.n	b8a24 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   b8a34:	686b      	ldr	r3, [r5, #4]
   b8a36:	6063      	str	r3, [r4, #4]
}
   b8a38:	4620      	mov	r0, r4
   b8a3a:	bd38      	pop	{r3, r4, r5, pc}

000b8a3c <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   b8a3c:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   b8a3e:	680b      	ldr	r3, [r1, #0]
   b8a40:	6003      	str	r3, [r0, #0]
   b8a42:	684b      	ldr	r3, [r1, #4]
   b8a44:	6043      	str	r3, [r0, #4]
   b8a46:	4604      	mov	r4, r0
   b8a48:	460d      	mov	r5, r1
class BleAdvertisingData {
   b8a4a:	3008      	adds	r0, #8
   b8a4c:	3108      	adds	r1, #8
   b8a4e:	f7ff ffd8 	bl	b8a02 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b8a52:	f105 0114 	add.w	r1, r5, #20
   b8a56:	f104 0014 	add.w	r0, r4, #20
   b8a5a:	f7ff ffd2 	bl	b8a02 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b8a5e:	f895 3020 	ldrb.w	r3, [r5, #32]
   b8a62:	f884 3020 	strb.w	r3, [r4, #32]
   b8a66:	4620      	mov	r0, r4
   b8a68:	bd38      	pop	{r3, r4, r5, pc}

000b8a6a <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   b8a6a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8a6c:	4604      	mov	r4, r0
   b8a6e:	a801      	add	r0, sp, #4
   b8a70:	f7ff ffc7 	bl	b8a02 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
      __a = _GLIBCXX_MOVE(__b);
   b8a74:	9b01      	ldr	r3, [sp, #4]
   b8a76:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8a78:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b8a7a:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8a7c:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8a7e:	6062      	str	r2, [r4, #4]
   b8a80:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8a82:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8a84:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8a86:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8a88:	9001      	str	r0, [sp, #4]
   b8a8a:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   b8a8c:	f7fe fcca 	bl	b7424 <free>
   b8a90:	b004      	add	sp, #16
   b8a92:	bd10      	pop	{r4, pc}

000b8a94 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8a98:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8a9a:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8a9c:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8a9e:	4419      	add	r1, r3
   b8aa0:	6883      	ldr	r3, [r0, #8]
   b8aa2:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8aa4:	4604      	mov	r4, r0
   b8aa6:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8aa8:	dc12      	bgt.n	b8ad0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b8aaa:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8aac:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8aae:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8ab0:	1bd2      	subs	r2, r2, r7
   b8ab2:	4631      	mov	r1, r6
   b8ab4:	1970      	adds	r0, r6, r5
   b8ab6:	f003 f914 	bl	bbce2 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b8aba:	462a      	mov	r2, r5
   b8abc:	4641      	mov	r1, r8
   b8abe:	4630      	mov	r0, r6
   b8ac0:	f003 f901 	bl	bbcc6 <memcpy>
    size_ += n;
   b8ac4:	6863      	ldr	r3, [r4, #4]
   b8ac6:	442b      	add	r3, r5
   b8ac8:	6063      	str	r3, [r4, #4]
    return true;
   b8aca:	2001      	movs	r0, #1
}
   b8acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8ad0:	f7ff ff7e 	bl	b89d0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8ad4:	2800      	cmp	r0, #0
   b8ad6:	d1e8      	bne.n	b8aaa <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b8ad8:	e7f8      	b.n	b8acc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b8ada <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b8ada:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   b8adc:	460a      	mov	r2, r1
   b8ade:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b8ae0:	b510      	push	{r4, lr}
   b8ae2:	4604      	mov	r4, r0
    size_ = 0;
   b8ae4:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   b8ae6:	b102      	cbz	r2, b8aea <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   b8ae8:	b90b      	cbnz	r3, b8aee <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   b8aea:	2000      	movs	r0, #0
}
   b8aec:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   b8aee:	2bff      	cmp	r3, #255	; 0xff
   b8af0:	bf28      	it	cs
   b8af2:	23ff      	movcs	r3, #255	; 0xff
   b8af4:	f7ff ffce 	bl	b8a94 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   b8af8:	2800      	cmp	r0, #0
   b8afa:	d0f7      	beq.n	b8aec <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   b8afc:	6860      	ldr	r0, [r4, #4]
   b8afe:	e7f5      	b.n	b8aec <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000b8b00 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8b02:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8b04:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b8b08:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8b0a:	4604      	mov	r4, r0
   b8b0c:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8b0e:	da0b      	bge.n	b8b28 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b8b10:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8b12:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8b14:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8b16:	1b52      	subs	r2, r2, r5
   b8b18:	1c48      	adds	r0, r1, #1
   b8b1a:	f003 f8e2 	bl	bbce2 <memmove>
    new(p) T(std::move(value));
   b8b1e:	557e      	strb	r6, [r7, r5]
    ++size_;
   b8b20:	6863      	ldr	r3, [r4, #4]
   b8b22:	3301      	adds	r3, #1
   b8b24:	6063      	str	r3, [r4, #4]
}
   b8b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8b28:	3101      	adds	r1, #1
   b8b2a:	f7ff ff51 	bl	b89d0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8b2e:	2800      	cmp	r0, #0
   b8b30:	d1ee      	bne.n	b8b10 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b8b32:	e7f8      	b.n	b8b26 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b8b34 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8b34:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b8b36:	6841      	ldr	r1, [r0, #4]
   b8b38:	f7ff bfe2 	b.w	b8b00 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b8b3c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8b3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8b40:	4604      	mov	r4, r0
   b8b42:	461d      	mov	r5, r3
   b8b44:	460f      	mov	r7, r1
   b8b46:	ab01      	add	r3, sp, #4
   b8b48:	4690      	mov	r8, r2
   b8b4a:	460a      	mov	r2, r1
   b8b4c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8b50:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b8b54:	f7fe ff32 	bl	b79bc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b8b58:	1cae      	adds	r6, r5, #2
   b8b5a:	6863      	ldr	r3, [r4, #4]
   b8b5c:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b8b5e:	f1b9 0f00 	cmp.w	r9, #0
   b8b62:	d126      	bne.n	b8bb2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b8b64:	b328      	cbz	r0, b8bb2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8b66:	4433      	add	r3, r6
   b8b68:	1a1b      	subs	r3, r3, r0
   b8b6a:	2bff      	cmp	r3, #255	; 0xff
   b8b6c:	d809      	bhi.n	b8b82 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b8b6e:	9901      	ldr	r1, [sp, #4]
   b8b70:	4620      	mov	r0, r4
   b8b72:	f7ff fcc7 	bl	b8504 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8b76:	6861      	ldr	r1, [r4, #4]
   b8b78:	4620      	mov	r0, r4
   b8b7a:	4431      	add	r1, r6
   b8b7c:	f7ff ff38 	bl	b89f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8b80:	b918      	cbnz	r0, b8b8a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b8b82:	6860      	ldr	r0, [r4, #4]
}
   b8b84:	b003      	add	sp, #12
   b8b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b8b8a:	1c6a      	adds	r2, r5, #1
   b8b8c:	9901      	ldr	r1, [sp, #4]
   b8b8e:	b2d2      	uxtb	r2, r2
   b8b90:	4620      	mov	r0, r4
   b8b92:	f7ff ffb5 	bl	b8b00 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b8b96:	9901      	ldr	r1, [sp, #4]
   b8b98:	463a      	mov	r2, r7
   b8b9a:	3101      	adds	r1, #1
   b8b9c:	4620      	mov	r0, r4
   b8b9e:	f7ff ffaf 	bl	b8b00 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b8ba2:	9901      	ldr	r1, [sp, #4]
   b8ba4:	462b      	mov	r3, r5
   b8ba6:	4642      	mov	r2, r8
   b8ba8:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b8baa:	4620      	mov	r0, r4
   b8bac:	f7ff ff72 	bl	b8a94 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b8bb0:	e7e7      	b.n	b8b82 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8bb2:	18f1      	adds	r1, r6, r3
   b8bb4:	29ff      	cmp	r1, #255	; 0xff
   b8bb6:	d8e4      	bhi.n	b8b82 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8bb8:	4620      	mov	r0, r4
   b8bba:	f7ff ff19 	bl	b89f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8bbe:	2800      	cmp	r0, #0
   b8bc0:	d0df      	beq.n	b8b82 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b8bc2:	1c69      	adds	r1, r5, #1
   b8bc4:	b2c9      	uxtb	r1, r1
   b8bc6:	4620      	mov	r0, r4
   b8bc8:	f7ff ffb4 	bl	b8b34 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b8bcc:	4639      	mov	r1, r7
   b8bce:	4620      	mov	r0, r4
   b8bd0:	f7ff ffb0 	bl	b8b34 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b8bd4:	6861      	ldr	r1, [r4, #4]
   b8bd6:	462b      	mov	r3, r5
   b8bd8:	4642      	mov	r2, r8
   b8bda:	e7e6      	b.n	b8baa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b8bdc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8bdc:	b430      	push	{r4, r5}
   b8bde:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b8be2:	b11a      	cbz	r2, b8bec <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b8be4:	9502      	str	r5, [sp, #8]
}
   b8be6:	bc30      	pop	{r4, r5}
   b8be8:	f7ff bfa8 	b.w	b8b3c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b8bec:	6840      	ldr	r0, [r0, #4]
}
   b8bee:	bc30      	pop	{r4, r5}
   b8bf0:	4770      	bx	lr

000b8bf2 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b8bf2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b8bf4:	2300      	movs	r3, #0
   b8bf6:	e9c0 3300 	strd	r3, r3, [r0]
   b8bfa:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8bfc:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8bfe:	9300      	str	r3, [sp, #0]
   b8c00:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8c02:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8c06:	4619      	mov	r1, r3
   b8c08:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b8c0c:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8c0e:	f7ff ffe5 	bl	b8bdc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b8c12:	4620      	mov	r0, r4
   b8c14:	b004      	add	sp, #16
   b8c16:	bd10      	pop	{r4, pc}

000b8c18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8c18:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8c1c:	4604      	mov	r4, r0
   b8c1e:	460d      	mov	r5, r1
   b8c20:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8c22:	d914      	bls.n	b8c4e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8c24:	4290      	cmp	r0, r2
   b8c26:	d213      	bcs.n	b8c50 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8c28:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8c2c:	1a75      	subs	r5, r6, r1
   b8c2e:	f1a1 0708 	sub.w	r7, r1, #8
   b8c32:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8c34:	42b7      	cmp	r7, r6
   b8c36:	d018      	beq.n	b8c6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8c38:	b11c      	cbz	r4, b8c42 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8c3a:	4631      	mov	r1, r6
   b8c3c:	4620      	mov	r0, r4
   b8c3e:	f7ff fcac 	bl	b859a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8c42:	1d30      	adds	r0, r6, #4
   b8c44:	f7ff fcb3 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8c48:	3e08      	subs	r6, #8
   b8c4a:	3c08      	subs	r4, #8
   b8c4c:	e7f2      	b.n	b8c34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8c4e:	d00c      	beq.n	b8c6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8c50:	42b5      	cmp	r5, r6
   b8c52:	d00a      	beq.n	b8c6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8c54:	b11c      	cbz	r4, b8c5e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8c56:	4629      	mov	r1, r5
   b8c58:	4620      	mov	r0, r4
   b8c5a:	f7ff fc9e 	bl	b859a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8c5e:	1d28      	adds	r0, r5, #4
   b8c60:	f7ff fca5 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8c64:	3508      	adds	r5, #8
   b8c66:	3408      	adds	r4, #8
   b8c68:	e7f2      	b.n	b8c50 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8c6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8c6e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8c70:	6846      	ldr	r6, [r0, #4]
   b8c72:	4668      	mov	r0, sp
   b8c74:	f7ff fc91 	bl	b859a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8c78:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b8c7c:	429f      	cmp	r7, r3
   b8c7e:	db12      	blt.n	b8ca6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b8c80:	3701      	adds	r7, #1
        if (n > 0) {
   b8c82:	2f00      	cmp	r7, #0
   b8c84:	dd29      	ble.n	b8cda <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b8c86:	00f8      	lsls	r0, r7, #3
   b8c88:	f7fe fbc4 	bl	b7414 <malloc>
            if (!d) {
   b8c8c:	4605      	mov	r5, r0
   b8c8e:	b1f0      	cbz	r0, b8cce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b8c90:	e9d4 1200 	ldrd	r1, r2, [r4]
   b8c94:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8c98:	f7ff ffbe 	bl	b8c18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8c9c:	6820      	ldr	r0, [r4, #0]
   b8c9e:	f7fe fbc1 	bl	b7424 <free>
        data_ = d;
   b8ca2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b8ca4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b8ca6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8ca8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8caa:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b8cae:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8cb2:	4631      	mov	r1, r6
   b8cb4:	f106 0008 	add.w	r0, r6, #8
   b8cb8:	f7ff ffae 	bl	b8c18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8cbc:	b11e      	cbz	r6, b8cc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b8cbe:	4669      	mov	r1, sp
   b8cc0:	4630      	mov	r0, r6
   b8cc2:	f7ff fc6a 	bl	b859a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b8cc6:	6863      	ldr	r3, [r4, #4]
   b8cc8:	3301      	adds	r3, #1
   b8cca:	6063      	str	r3, [r4, #4]
    return true;
   b8ccc:	2501      	movs	r5, #1
   b8cce:	a801      	add	r0, sp, #4
   b8cd0:	f7ff fc6d 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8cd4:	4628      	mov	r0, r5
   b8cd6:	b003      	add	sp, #12
   b8cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b8cda:	2500      	movs	r5, #0
   b8cdc:	e7de      	b.n	b8c9c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b8cde <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b8ce0:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8ce4:	4605      	mov	r5, r0
   b8ce6:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b8ce8:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b8cec:	42a6      	cmp	r6, r4
   b8cee:	d005      	beq.n	b8cfc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b8cf0:	4639      	mov	r1, r7
   b8cf2:	4620      	mov	r0, r4
   b8cf4:	f7ff fabb 	bl	b826e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b8cf8:	b108      	cbz	r0, b8cfe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b8cfa:	b914      	cbnz	r4, b8d02 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b8cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b8cfe:	3408      	adds	r4, #8
   b8d00:	e7f4      	b.n	b8cec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b8d02:	1d20      	adds	r0, r4, #4
   b8d04:	f7ff fc53 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b8d08:	e9d5 3200 	ldrd	r3, r2, [r5]
   b8d0c:	f104 0108 	add.w	r1, r4, #8
   b8d10:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8d14:	4620      	mov	r0, r4
   b8d16:	f7ff ff7f 	bl	b8c18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b8d1a:	686b      	ldr	r3, [r5, #4]
   b8d1c:	3b01      	subs	r3, #1
   b8d1e:	606b      	str	r3, [r5, #4]
    return true;
   b8d20:	e7ec      	b.n	b8cfc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b8d24 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8d28:	4605      	mov	r5, r0
   b8d2a:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b8d2c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8d2e:	460c      	mov	r4, r1
        WiringBleLock lk;
   b8d30:	f7fe ff12 	bl	b7b58 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b8d34:	682e      	ldr	r6, [r5, #0]
   b8d36:	1ef3      	subs	r3, r6, #3
   b8d38:	2b0d      	cmp	r3, #13
   b8d3a:	d83c      	bhi.n	b8db6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8d3c:	e8df f013 	tbh	[pc, r3, lsl #1]
   b8d40:	0053000e 	.word	0x0053000e
   b8d44:	00d1003b 	.word	0x00d1003b
   b8d48:	003b003b 	.word	0x003b003b
   b8d4c:	003b003b 	.word	0x003b003b
   b8d50:	009b003b 	.word	0x009b003b
   b8d54:	009b009b 	.word	0x009b009b
   b8d58:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b8d5c:	a804      	add	r0, sp, #16
   b8d5e:	f7ff fa2d 	bl	b81bc <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b8d62:	9b04      	ldr	r3, [sp, #16]
   b8d64:	89aa      	ldrh	r2, [r5, #12]
   b8d66:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b8d68:	6869      	ldr	r1, [r5, #4]
   b8d6a:	9804      	ldr	r0, [sp, #16]
   b8d6c:	3108      	adds	r1, #8
   b8d6e:	3002      	adds	r0, #2
   b8d70:	f7fe ff0c 	bl	b7b8c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b8d74:	a904      	add	r1, sp, #16
   b8d76:	a806      	add	r0, sp, #24
   b8d78:	f7ff fc0f 	bl	b859a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b8d7c:	a906      	add	r1, sp, #24
   b8d7e:	f104 0018 	add.w	r0, r4, #24
   b8d82:	f7ff ff73 	bl	b8c6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b8d86:	4605      	mov	r5, r0
   b8d88:	a807      	add	r0, sp, #28
   b8d8a:	f7ff fc10 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8d8e:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b8d90:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b8d92:	b9b5      	cbnz	r5, b8dc2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b8d94:	4b5d      	ldr	r3, [pc, #372]	; (b8f0c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b8d96:	495e      	ldr	r1, [pc, #376]	; (b8f10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8d98:	9300      	str	r3, [sp, #0]
   b8d9a:	2032      	movs	r0, #50	; 0x32
   b8d9c:	462b      	mov	r3, r5
   b8d9e:	aa06      	add	r2, sp, #24
   b8da0:	9507      	str	r5, [sp, #28]
   b8da2:	f7fe fa5b 	bl	b725c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b8da6:	9b04      	ldr	r3, [sp, #16]
   b8da8:	4629      	mov	r1, r5
   b8daa:	8818      	ldrh	r0, [r3, #0]
   b8dac:	f7fe f86c 	bl	b6e88 <hal_ble_gap_disconnect>
   b8db0:	a805      	add	r0, sp, #20
   b8db2:	f7ff fbfc 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b8db6:	a803      	add	r0, sp, #12
   b8db8:	f7fe fedc 	bl	b7b74 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b8dbc:	b00e      	add	sp, #56	; 0x38
   b8dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b8dc2:	4a54      	ldr	r2, [pc, #336]	; (b8f14 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b8dc4:	9200      	str	r2, [sp, #0]
   b8dc6:	2300      	movs	r3, #0
   b8dc8:	4951      	ldr	r1, [pc, #324]	; (b8f10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8dca:	9307      	str	r3, [sp, #28]
   b8dcc:	aa06      	add	r2, sp, #24
   b8dce:	2001      	movs	r0, #1
   b8dd0:	f7fe fa44 	bl	b725c <log_message>
                if (impl->connectedCallback_) {
   b8dd4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b8dd6:	2b00      	cmp	r3, #0
   b8dd8:	d0ea      	beq.n	b8db0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b8dda:	a904      	add	r1, sp, #16
   b8ddc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8de0:	f7ff fc54 	bl	b868c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b8de4:	e7e4      	b.n	b8db0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8de6:	89a9      	ldrh	r1, [r5, #12]
   b8de8:	4620      	mov	r0, r4
   b8dea:	f7ff f8fa 	bl	b7fe2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8dee:	4606      	mov	r6, r0
   b8df0:	2800      	cmp	r0, #0
   b8df2:	d0e0      	beq.n	b8db6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b8df4:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b8df6:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b8dfa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8dfe:	8029      	strh	r1, [r5, #0]
   b8e00:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b8e04:	429a      	cmp	r2, r3
   b8e06:	d003      	beq.n	b8e10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b8e08:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b8e0c:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b8e0e:	e7f9      	b.n	b8e04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b8e10:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b8e14:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b8e18:	45b8      	cmp	r8, r7
   b8e1a:	d004      	beq.n	b8e26 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b8e1c:	1d38      	adds	r0, r7, #4
   b8e1e:	f7ff fbc6 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8e22:	3708      	adds	r7, #8
   b8e24:	e7f8      	b.n	b8e18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b8e26:	2300      	movs	r3, #0
   b8e28:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b8e2a:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b8e2e:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b8e32:	45b8      	cmp	r8, r7
   b8e34:	d004      	beq.n	b8e40 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b8e36:	1d38      	adds	r0, r7, #4
   b8e38:	f7ff fbb9 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8e3c:	3708      	adds	r7, #8
   b8e3e:	e7f8      	b.n	b8e32 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b8e40:	2300      	movs	r3, #0
   b8e42:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b8e44:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b8e46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8e48:	b123      	cbz	r3, b8e54 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b8e4a:	4631      	mov	r1, r6
   b8e4c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8e50:	f7ff fc1c 	bl	b868c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b8e54:	2300      	movs	r3, #0
   b8e56:	2220      	movs	r2, #32
   b8e58:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b8e5c:	4a2e      	ldr	r2, [pc, #184]	; (b8f18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b8e5e:	9200      	str	r2, [sp, #0]
   b8e60:	492b      	ldr	r1, [pc, #172]	; (b8f10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8e62:	aa06      	add	r2, sp, #24
   b8e64:	2001      	movs	r0, #1
   b8e66:	f7fe f9f9 	bl	b725c <log_message>
                    impl->peers_.removeOne(*peer);
   b8e6a:	4631      	mov	r1, r6
   b8e6c:	f104 0018 	add.w	r0, r4, #24
   b8e70:	f7ff ff35 	bl	b8cde <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b8e74:	e79f      	b.n	b8db6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8e76:	89a9      	ldrh	r1, [r5, #12]
   b8e78:	4620      	mov	r0, r4
   b8e7a:	f7ff f8b2 	bl	b7fe2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8e7e:	2800      	cmp	r0, #0
   b8e80:	d099      	beq.n	b8db6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b8e82:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b8e84:	2b00      	cmp	r3, #0
   b8e86:	d096      	beq.n	b8db6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b8e88:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8e8a:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b8e8c:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8e90:	d001      	beq.n	b8e96 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b8e92:	2e10      	cmp	r6, #16
   b8e94:	d117      	bne.n	b8ec6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b8e96:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b8e98:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b8e9a:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b8e9c:	2506      	movs	r5, #6
                        };
   b8e9e:	f88d 3015 	strb.w	r3, [sp, #21]
   b8ea2:	9104      	str	r1, [sp, #16]
   b8ea4:	f88d 2014 	strb.w	r2, [sp, #20]
   b8ea8:	9006      	str	r0, [sp, #24]
   b8eaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b8eae:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b8eb0:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b8eb4:	9508      	str	r5, [sp, #32]
   b8eb6:	e883 0003 	stmia.w	r3, {r0, r1}
   b8eba:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b8ebc:	a906      	add	r1, sp, #24
   b8ebe:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8ec2:	4798      	blx	r3
   b8ec4:	e777      	b.n	b8db6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b8ec6:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b8ec8:	bf01      	itttt	eq
   b8eca:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b8ecc:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b8ece:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b8ed2:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b8ed4:	bf0f      	iteee	eq
   b8ed6:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b8eda:	461a      	movne	r2, r3
   b8edc:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b8ede:	461d      	movne	r5, r3
   b8ee0:	e7dd      	b.n	b8e9e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8ee2:	89a9      	ldrh	r1, [r5, #12]
   b8ee4:	4620      	mov	r0, r4
   b8ee6:	f7ff f87c 	bl	b7fe2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b8eea:	4601      	mov	r1, r0
   b8eec:	2800      	cmp	r0, #0
   b8eee:	f43f af62 	beq.w	b8db6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8ef2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b8ef4:	2b00      	cmp	r3, #0
   b8ef6:	f43f af5e 	beq.w	b8db6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b8efa:	686b      	ldr	r3, [r5, #4]
   b8efc:	9306      	str	r3, [sp, #24]
   b8efe:	aa06      	add	r2, sp, #24
   b8f00:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b8f02:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8f06:	4798      	blx	r3
   b8f08:	e755      	b.n	b8db6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8f0a:	bf00      	nop
   b8f0c:	000be4df 	.word	0x000be4df
   b8f10:	000be443 	.word	0x000be443
   b8f14:	000be505 	.word	0x000be505
   b8f18:	000be522 	.word	0x000be522

000b8f1c <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   b8f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8f20:	4607      	mov	r7, r0
   b8f22:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   b8f24:	4668      	mov	r0, sp
   b8f26:	f7fe fe17 	bl	b7b58 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b8f2a:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   b8f2c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   b8f30:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (auto& p : impl()->peers()) {
   b8f34:	42ac      	cmp	r4, r5
   b8f36:	d035      	beq.n	b8fa4 <_ZNK8particle14BleLocalDevice10disconnectEv+0x88>
        hal_ble_conn_info_t connInfo = {};
   b8f38:	2224      	movs	r2, #36	; 0x24
   b8f3a:	2100      	movs	r1, #0
   b8f3c:	a801      	add	r0, sp, #4
   b8f3e:	f002 feea 	bl	bbd16 <memset>
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   b8f42:	6823      	ldr	r3, [r4, #0]
   b8f44:	2200      	movs	r2, #0
   b8f46:	8818      	ldrh	r0, [r3, #0]
   b8f48:	a901      	add	r1, sp, #4
   b8f4a:	f7fd ffed 	bl	b6f28 <hal_ble_gap_get_connection_info>
   b8f4e:	4606      	mov	r6, r0
   b8f50:	b108      	cbz	r0, b8f56 <_ZNK8particle14BleLocalDevice10disconnectEv+0x3a>
    for (auto& p : impl()->peers()) {
   b8f52:	3408      	adds	r4, #8
   b8f54:	e7ee      	b.n	b8f34 <_ZNK8particle14BleLocalDevice10disconnectEv+0x18>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   b8f56:	f89d 8008 	ldrb.w	r8, [sp, #8]
   b8f5a:	f1b8 0f01 	cmp.w	r8, #1
   b8f5e:	d1f8      	bne.n	b8f52 <_ZNK8particle14BleLocalDevice10disconnectEv+0x36>
   b8f60:	f8df 9048 	ldr.w	r9, [pc, #72]	; b8fac <_ZNK8particle14BleLocalDevice10disconnectEv+0x90>
   b8f64:	f8d9 0000 	ldr.w	r0, [r9]
   b8f68:	f7fe f850 	bl	b700c <os_mutex_recursive_unlock>
        locked_ = false;
   b8f6c:	f88d 6000 	strb.w	r6, [sp]
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   b8f70:	6823      	ldr	r3, [r4, #0]
   b8f72:	4631      	mov	r1, r6
   b8f74:	8818      	ldrh	r0, [r3, #0]
   b8f76:	f7fd ff87 	bl	b6e88 <hal_ble_gap_disconnect>
   b8f7a:	1e05      	subs	r5, r0, #0
   b8f7c:	db0b      	blt.n	b8f96 <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
    void lock() { os_mutex_recursive_lock(handle_); }
   b8f7e:	f8d9 0000 	ldr.w	r0, [r9]
   b8f82:	f7fe f83b 	bl	b6ffc <os_mutex_recursive_lock>
        return peers_;
   b8f86:	6838      	ldr	r0, [r7, #0]
        locked_ = true;
   b8f88:	f88d 8000 	strb.w	r8, [sp]
            lk.lock();
            impl()->peers().removeOne(p);
   b8f8c:	4621      	mov	r1, r4
   b8f8e:	3018      	adds	r0, #24
   b8f90:	f7ff fea5 	bl	b8cde <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
            return SYSTEM_ERROR_NONE;
   b8f94:	4635      	mov	r5, r6
    WiringBleLock lk;
   b8f96:	4668      	mov	r0, sp
   b8f98:	f7fe fdec 	bl	b7b74 <_ZN8particle3ble13WiringBleLockD1Ev>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   b8f9c:	4628      	mov	r0, r5
   b8f9e:	b00b      	add	sp, #44	; 0x2c
   b8fa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   b8fa4:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
   b8fa8:	e7f5      	b.n	b8f96 <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
   b8faa:	bf00      	nop
   b8fac:	2003e66c 	.word	0x2003e66c

000b8fb0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8fb0:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b8fb2:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b8fb4:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b8fb6:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b8fb8:	dd05      	ble.n	b8fc6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   b8fba:	2114      	movs	r1, #20
   b8fbc:	4369      	muls	r1, r5
   b8fbe:	f7fe fa39 	bl	b7434 <realloc>
            if (!d) {
   b8fc2:	b918      	cbnz	r0, b8fcc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   b8fc4:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b8fc6:	f7fe fa2d 	bl	b7424 <free>
        T* d = nullptr;
   b8fca:	2000      	movs	r0, #0
        data_ = d;
   b8fcc:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8fce:	60a5      	str	r5, [r4, #8]
        return true;
   b8fd0:	2001      	movs	r0, #1
   b8fd2:	e7f7      	b.n	b8fc4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000b8fd4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   b8fd8:	2400      	movs	r4, #0
   b8fda:	e9c0 4400 	strd	r4, r4, [r0]
   b8fde:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8fe0:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8fe2:	6849      	ldr	r1, [r1, #4]
   b8fe4:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8fe6:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8fe8:	dd1a      	ble.n	b9020 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b8fea:	f7ff ffe1 	bl	b8fb0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8fee:	b1b8      	cbz	r0, b9020 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8ff0:	e9d8 9300 	ldrd	r9, r3, [r8]
   b8ff4:	f04f 0c14 	mov.w	ip, #20
   b8ff8:	f8d7 e000 	ldr.w	lr, [r7]
   b8ffc:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   b9000:	eb09 0504 	add.w	r5, r9, r4
   b9004:	45ac      	cmp	ip, r5
   b9006:	d008      	beq.n	b901a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   b9008:	eb1e 0604 	adds.w	r6, lr, r4
   b900c:	bf1f      	itttt	ne
   b900e:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b9010:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b9012:	682b      	ldrne	r3, [r5, #0]
   b9014:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   b9016:	3414      	adds	r4, #20
   b9018:	e7f2      	b.n	b9000 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b901a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b901e:	607b      	str	r3, [r7, #4]
}
   b9020:	4638      	mov	r0, r7
   b9022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b9026 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b9026:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   b902a:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   b902e:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9030:	6883      	ldr	r3, [r0, #8]
   b9032:	19e9      	adds	r1, r5, r7
   b9034:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b9036:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9038:	dc17      	bgt.n	b906a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   b903a:	2314      	movs	r3, #20
   b903c:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   b903e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9040:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   b9042:	fb03 f907 	mul.w	r9, r3, r7
   b9046:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b9048:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b904a:	1b52      	subs	r2, r2, r5
   b904c:	4631      	mov	r1, r6
   b904e:	eb06 0009 	add.w	r0, r6, r9
   b9052:	f002 fe46 	bl	bbce2 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b9056:	464a      	mov	r2, r9
   b9058:	4641      	mov	r1, r8
   b905a:	4630      	mov	r0, r6
   b905c:	f002 fe33 	bl	bbcc6 <memcpy>
    size_ += n;
   b9060:	6863      	ldr	r3, [r4, #4]
   b9062:	443b      	add	r3, r7
   b9064:	6063      	str	r3, [r4, #4]
}
   b9066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b906a:	f7ff ffa1 	bl	b8fb0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b906e:	2800      	cmp	r0, #0
   b9070:	d1e3      	bne.n	b903a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   b9072:	e7f8      	b.n	b9066 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000b9074 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b9074:	b082      	sub	sp, #8
   b9076:	b570      	push	{r4, r5, r6, lr}
   b9078:	460c      	mov	r4, r1
   b907a:	a904      	add	r1, sp, #16
   b907c:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9080:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b9084:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b9086:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9088:	da17      	bge.n	b90ba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   b908a:	2314      	movs	r3, #20
   b908c:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   b9090:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   b9092:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   b9094:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b9096:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9098:	1a52      	subs	r2, r2, r1
   b909a:	18e0      	adds	r0, r4, r3
   b909c:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   b909e:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   b90a0:	f002 fe1f 	bl	bbce2 <memmove>
    new(p) T(std::move(value));
   b90a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b90a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b90a8:	6833      	ldr	r3, [r6, #0]
   b90aa:	6023      	str	r3, [r4, #0]
    ++size_;
   b90ac:	686b      	ldr	r3, [r5, #4]
   b90ae:	3301      	adds	r3, #1
   b90b0:	606b      	str	r3, [r5, #4]
}
   b90b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b90b6:	b002      	add	sp, #8
   b90b8:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b90ba:	3101      	adds	r1, #1
   b90bc:	f7ff ff78 	bl	b8fb0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b90c0:	2800      	cmp	r0, #0
   b90c2:	d1e2      	bne.n	b908a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   b90c4:	e7f5      	b.n	b90b2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000b90c6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b90c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   b90ca:	2400      	movs	r4, #0
   b90cc:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b90ce:	1e93      	subs	r3, r2, #2
   b90d0:	e9c0 4400 	strd	r4, r4, [r0]
   b90d4:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b90d6:	4605      	mov	r5, r0
   b90d8:	460f      	mov	r7, r1
   b90da:	4690      	mov	r8, r2
   b90dc:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b90de:	9305      	str	r3, [sp, #20]
    return size_;
   b90e0:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b90e2:	428c      	cmp	r4, r1
   b90e4:	da72      	bge.n	b91cc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   b90e6:	6838      	ldr	r0, [r7, #0]
   b90e8:	ab07      	add	r3, sp, #28
   b90ea:	4642      	mov	r2, r8
   b90ec:	1b09      	subs	r1, r1, r4
   b90ee:	4420      	add	r0, r4
   b90f0:	f7fe fc64 	bl	b79bc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   b90f4:	4606      	mov	r6, r0
   b90f6:	2800      	cmp	r0, #0
   b90f8:	d068      	beq.n	b91cc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b90fa:	9b05      	ldr	r3, [sp, #20]
   b90fc:	2b01      	cmp	r3, #1
   b90fe:	d82f      	bhi.n	b9160 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b9100:	f1a0 0b02 	sub.w	fp, r0, #2
   b9104:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   b9108:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   b910c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b9110:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b9112:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b9114:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b9116:	d055      	beq.n	b91c4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   b9118:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b911a:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   b911e:	4413      	add	r3, r2
   b9120:	a808      	add	r0, sp, #32
   b9122:	78d9      	ldrb	r1, [r3, #3]
   b9124:	789b      	ldrb	r3, [r3, #2]
   b9126:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   b912a:	f7fe fdac 	bl	b7c86 <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   b912e:	f10d 0e20 	add.w	lr, sp, #32
   b9132:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b9136:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b913a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b913e:	f8de 3000 	ldr.w	r3, [lr]
   b9142:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b9146:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b914a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b914e:	ab0d      	add	r3, sp, #52	; 0x34
   b9150:	cb0c      	ldmia	r3, {r2, r3}
   b9152:	6869      	ldr	r1, [r5, #4]
   b9154:	4628      	mov	r0, r5
   b9156:	f7ff ff8d 	bl	b9074 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b915a:	f109 0901 	add.w	r9, r9, #1
   b915e:	e7d7      	b.n	b9110 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   b9160:	f1a8 0306 	sub.w	r3, r8, #6
   b9164:	2b01      	cmp	r3, #1
   b9166:	d82d      	bhi.n	b91c4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b9168:	f1a0 0b02 	sub.w	fp, r0, #2
   b916c:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   b9170:	f04f 0900 	mov.w	r9, #0
   b9174:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   b9178:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b917a:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b917c:	d022      	beq.n	b91c4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b917e:	3302      	adds	r3, #2
    return data_[i];
   b9180:	6839      	ldr	r1, [r7, #0]
   b9182:	4423      	add	r3, r4
   b9184:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   b9188:	2201      	movs	r2, #1
   b918a:	4419      	add	r1, r3
   b918c:	a808      	add	r0, sp, #32
   b918e:	f7fe fd5b 	bl	b7c48 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   b9192:	f10d 0e20 	add.w	lr, sp, #32
   b9196:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b919a:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b919e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b91a2:	f8de 3000 	ldr.w	r3, [lr]
   b91a6:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b91aa:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b91ae:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b91b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   b91b6:	6869      	ldr	r1, [r5, #4]
   b91b8:	4628      	mov	r0, r5
   b91ba:	f7ff ff5b 	bl	b9074 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b91be:	f109 0901 	add.w	r9, r9, #1
   b91c2:	e7d9      	b.n	b9178 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b91c4:	9b07      	ldr	r3, [sp, #28]
   b91c6:	441c      	add	r4, r3
   b91c8:	4434      	add	r4, r6
   b91ca:	e789      	b.n	b90e0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   b91cc:	4628      	mov	r0, r5
   b91ce:	b013      	add	sp, #76	; 0x4c
   b91d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b91d4 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b91d4:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   b91d6:	2300      	movs	r3, #0
   b91d8:	b085      	sub	sp, #20
   b91da:	e9c0 3300 	strd	r3, r3, [r0]
   b91de:	6083      	str	r3, [r0, #8]
   b91e0:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b91e2:	2202      	movs	r2, #2
   b91e4:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b91e6:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b91e8:	f7ff ff6d 	bl	b90c6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b91ec:	a901      	add	r1, sp, #4
   b91ee:	4620      	mov	r0, r4
   b91f0:	f7ff ff19 	bl	b9026 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b91f4:	a801      	add	r0, sp, #4
   b91f6:	f7ff f93a 	bl	b846e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b91fa:	2202      	movs	r2, #2
   b91fc:	4629      	mov	r1, r5
   b91fe:	a801      	add	r0, sp, #4
   b9200:	f7ff ff61 	bl	b90c6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b9204:	a901      	add	r1, sp, #4
   b9206:	4620      	mov	r0, r4
   b9208:	f7ff ff0d 	bl	b9026 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b920c:	a801      	add	r0, sp, #4
   b920e:	f7ff f92e 	bl	b846e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   b9212:	2203      	movs	r2, #3
   b9214:	4629      	mov	r1, r5
   b9216:	a801      	add	r0, sp, #4
   b9218:	f7ff ff55 	bl	b90c6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b921c:	a901      	add	r1, sp, #4
   b921e:	4620      	mov	r0, r4
   b9220:	f7ff ff01 	bl	b9026 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b9224:	a801      	add	r0, sp, #4
   b9226:	f7ff f922 	bl	b846e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   b922a:	2206      	movs	r2, #6
   b922c:	4629      	mov	r1, r5
   b922e:	a801      	add	r0, sp, #4
   b9230:	f7ff ff49 	bl	b90c6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b9234:	a901      	add	r1, sp, #4
   b9236:	4620      	mov	r0, r4
   b9238:	f7ff fef5 	bl	b9026 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b923c:	a801      	add	r0, sp, #4
   b923e:	f7ff f916 	bl	b846e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   b9242:	2207      	movs	r2, #7
   b9244:	4629      	mov	r1, r5
   b9246:	a801      	add	r0, sp, #4
   b9248:	f7ff ff3d 	bl	b90c6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b924c:	a901      	add	r1, sp, #4
   b924e:	4620      	mov	r0, r4
   b9250:	f7ff fee9 	bl	b9026 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b9254:	a801      	add	r0, sp, #4
   b9256:	f7ff f90a 	bl	b846e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b925a:	4620      	mov	r0, r4
   b925c:	b005      	add	sp, #20
   b925e:	bd30      	pop	{r4, r5, pc}

000b9260 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   b9260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9264:	b085      	sub	sp, #20
   b9266:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b9268:	4601      	mov	r1, r0
   b926a:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   b926c:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b926e:	f7ff ffb1 	bl	b91d4 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_;
   b9272:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
   b9274:	9b02      	ldr	r3, [sp, #8]
   b9276:	f04f 0e14 	mov.w	lr, #20
   b927a:	fb0e 6c03 	mla	ip, lr, r3, r6
   b927e:	2700      	movs	r7, #0
    for (const auto& uuid : foundUuids) {
   b9280:	45b4      	cmp	ip, r6
   b9282:	d00d      	beq.n	b92a0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
   b9284:	45b9      	cmp	r9, r7
   b9286:	f106 0614 	add.w	r6, r6, #20
   b928a:	d009      	beq.n	b92a0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
   b928c:	f1a6 0514 	sub.w	r5, r6, #20
   b9290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9292:	fb0e 8407 	mla	r4, lr, r7, r8
   b9296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9298:	682b      	ldr	r3, [r5, #0]
   b929a:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
   b929c:	3701      	adds	r7, #1
   b929e:	e7ef      	b.n	b9280 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b92a0:	a801      	add	r0, sp, #4
   b92a2:	f7ff f8e4 	bl	b846e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b92a6:	4638      	mov	r0, r7
   b92a8:	b005      	add	sp, #20
   b92aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b92ae <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   b92ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b92b2:	b08b      	sub	sp, #44	; 0x2c
   b92b4:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   b92b6:	f100 0144 	add.w	r1, r0, #68	; 0x44
   b92ba:	a801      	add	r0, sp, #4
   b92bc:	f7ff fe8a 	bl	b8fd4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   b92c0:	9b02      	ldr	r3, [sp, #8]
   b92c2:	2b00      	cmp	r3, #0
   b92c4:	dd4a      	ble.n	b935c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b92c6:	f104 0114 	add.w	r1, r4, #20
   b92ca:	a804      	add	r0, sp, #16
   b92cc:	f7ff ff82 	bl	b91d4 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b92d0:	f104 0108 	add.w	r1, r4, #8
   b92d4:	a807      	add	r0, sp, #28
   b92d6:	f7ff ff7d 	bl	b91d4 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   b92da:	9d05      	ldr	r5, [sp, #20]
   b92dc:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   b92de:	2d00      	cmp	r5, #0
   b92e0:	dc01      	bgt.n	b92e6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   b92e2:	2e00      	cmp	r6, #0
   b92e4:	dd38      	ble.n	b9358 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   b92e6:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   b92e8:	9f02      	ldr	r7, [sp, #8]
    return data_;
   b92ea:	f8dd 8010 	ldr.w	r8, [sp, #16]
   b92ee:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   b92f2:	2314      	movs	r3, #20
   b92f4:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   b92f8:	fb03 8505 	mla	r5, r3, r5, r8
   b92fc:	fb03 9606 	mla	r6, r3, r6, r9
   b9300:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   b9302:	45ba      	cmp	sl, r7
   b9304:	d028      	beq.n	b9358 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   b9306:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   b9308:	45ab      	cmp	fp, r5
   b930a:	d015      	beq.n	b9338 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   b930c:	4659      	mov	r1, fp
   b930e:	4650      	mov	r0, sl
   b9310:	f7fe fcc3 	bl	b7c9a <_ZNK8particle7BleUuideqERKS0_>
   b9314:	f10b 0b14 	add.w	fp, fp, #20
   b9318:	4604      	mov	r4, r0
   b931a:	2800      	cmp	r0, #0
   b931c:	d0f4      	beq.n	b9308 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b931e:	a807      	add	r0, sp, #28
   b9320:	f7ff f8a5 	bl	b846e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b9324:	a804      	add	r0, sp, #16
   b9326:	f7ff f8a2 	bl	b846e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   b932a:	a801      	add	r0, sp, #4
   b932c:	f7ff f89f 	bl	b846e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   b9330:	4620      	mov	r0, r4
   b9332:	b00b      	add	sp, #44	; 0x2c
   b9334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9338:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   b933a:	45b3      	cmp	fp, r6
   b933c:	d009      	beq.n	b9352 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   b933e:	4659      	mov	r1, fp
   b9340:	4650      	mov	r0, sl
   b9342:	f7fe fcaa 	bl	b7c9a <_ZNK8particle7BleUuideqERKS0_>
   b9346:	f10b 0b14 	add.w	fp, fp, #20
   b934a:	4604      	mov	r4, r0
   b934c:	2800      	cmp	r0, #0
   b934e:	d0f4      	beq.n	b933a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   b9350:	e7e5      	b.n	b931e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   b9352:	f10a 0a14 	add.w	sl, sl, #20
   b9356:	e7d4      	b.n	b9302 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   b9358:	2400      	movs	r4, #0
   b935a:	e7e0      	b.n	b931e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   b935c:	2401      	movs	r4, #1
   b935e:	e7e4      	b.n	b932a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000b9360 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b9360:	b513      	push	{r0, r1, r4, lr}
   b9362:	460b      	mov	r3, r1
   b9364:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9366:	e9d0 0100 	ldrd	r0, r1, [r0]
   b936a:	466c      	mov	r4, sp
   b936c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b9370:	e893 0003 	ldmia.w	r3, {r0, r1}
   b9374:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b9378:	e894 0003 	ldmia.w	r4, {r0, r1}
   b937c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b9380:	b002      	add	sp, #8
   b9382:	bd10      	pop	{r4, pc}

000b9384 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b9384:	b538      	push	{r3, r4, r5, lr}
   b9386:	4605      	mov	r5, r0
   b9388:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b938a:	f7ff ffe9 	bl	b9360 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b938e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b9390:	68a2      	ldr	r2, [r4, #8]
   b9392:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9394:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9396:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9398:	68e2      	ldr	r2, [r4, #12]
   b939a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b939c:	60e3      	str	r3, [r4, #12]
      }
   b939e:	bd38      	pop	{r3, r4, r5, pc}

000b93a0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   b93a0:	b530      	push	{r4, r5, lr}
   b93a2:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   b93a4:	2300      	movs	r3, #0
   b93a6:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b93a8:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   b93aa:	4605      	mov	r5, r0
   b93ac:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   b93ae:	b133      	cbz	r3, b93be <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b93b0:	2202      	movs	r2, #2
   b93b2:	4668      	mov	r0, sp
   b93b4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b93b6:	68e3      	ldr	r3, [r4, #12]
   b93b8:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b93ba:	68a3      	ldr	r3, [r4, #8]
   b93bc:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   b93be:	4629      	mov	r1, r5
   b93c0:	4668      	mov	r0, sp
   b93c2:	f7ff ffdf 	bl	b9384 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b93c6:	4668      	mov	r0, sp
   b93c8:	f7fa ff68 	bl	b429c <_ZNSt14_Function_baseD1Ev>
      }
   b93cc:	b005      	add	sp, #20
   b93ce:	bd30      	pop	{r4, r5, pc}

000b93d0 <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b93d0:	b538      	push	{r3, r4, r5, lr}
   b93d2:	460d      	mov	r5, r1
      { return _M_ptr; }
   b93d4:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   b93d6:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b93d8:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   b93da:	b123      	cbz	r3, b93e6 <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   b93dc:	6828      	ldr	r0, [r5, #0]
   b93de:	314c      	adds	r1, #76	; 0x4c
   b93e0:	304c      	adds	r0, #76	; 0x4c
   b93e2:	f7ff ffdd 	bl	b93a0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b93e6:	4620      	mov	r0, r4
   b93e8:	682b      	ldr	r3, [r5, #0]
   b93ea:	f840 3b04 	str.w	r3, [r0], #4
   b93ee:	6869      	ldr	r1, [r5, #4]
   b93f0:	f7fe fb8c 	bl	b7b0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   b93f4:	4620      	mov	r0, r4
   b93f6:	bd38      	pop	{r3, r4, r5, pc}

000b93f8 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b93f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b93fc:	4604      	mov	r4, r0
   b93fe:	b087      	sub	sp, #28
    WiringBleLock lk;
   b9400:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b9402:	460e      	mov	r6, r1
   b9404:	4617      	mov	r7, r2
    WiringBleLock lk;
   b9406:	f7fe fba7 	bl	b7b58 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b940a:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b940c:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b9410:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   b9414:	4544      	cmp	r4, r8
   b9416:	46a1      	mov	r9, r4
   b9418:	d016      	beq.n	b9448 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   b941a:	4621      	mov	r1, r4
   b941c:	a801      	add	r0, sp, #4
   b941e:	f7fe fe0b 	bl	b8038 <_ZNK8particle17BleCharacteristic4UUIDEv>
   b9422:	4639      	mov	r1, r7
   b9424:	a801      	add	r0, sp, #4
   b9426:	f7fe fc38 	bl	b7c9a <_ZNK8particle7BleUuideqERKS0_>
   b942a:	3408      	adds	r4, #8
   b942c:	4605      	mov	r5, r0
   b942e:	2800      	cmp	r0, #0
   b9430:	d0f0      	beq.n	b9414 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   b9432:	4649      	mov	r1, r9
   b9434:	4630      	mov	r0, r6
   b9436:	f7ff ffcb 	bl	b93d0 <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   b943a:	4668      	mov	r0, sp
   b943c:	f7fe fb9a 	bl	b7b74 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b9440:	4628      	mov	r0, r5
   b9442:	b007      	add	sp, #28
   b9444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   b9448:	2500      	movs	r5, #0
   b944a:	e7f6      	b.n	b943a <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000b944c <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b944c:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b944e:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b9450:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b9452:	344c      	adds	r4, #76	; 0x4c
   b9454:	b1b9      	cbz	r1, b9486 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   b9456:	e9cd 1200 	strd	r1, r2, [sp]
   b945a:	a802      	add	r0, sp, #8
   b945c:	4669      	mov	r1, sp
   b945e:	f7ff f865 	bl	b852c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b9462:	2300      	movs	r3, #0
	__x.swap(*this);
   b9464:	a906      	add	r1, sp, #24
   b9466:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b9468:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b946a:	f7ff ff8b 	bl	b9384 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b946e:	4621      	mov	r1, r4
   b9470:	a806      	add	r0, sp, #24
   b9472:	f7ff ff87 	bl	b9384 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b9476:	a806      	add	r0, sp, #24
   b9478:	f7fa ff10 	bl	b429c <_ZNSt14_Function_baseD1Ev>
   b947c:	a802      	add	r0, sp, #8
   b947e:	f7fa ff0d 	bl	b429c <_ZNSt14_Function_baseD1Ev>
}
   b9482:	b00a      	add	sp, #40	; 0x28
   b9484:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b9486:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b9488:	e7eb      	b.n	b9462 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000b948a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b948a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b948c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b948e:	4604      	mov	r4, r0
   b9490:	460d      	mov	r5, r1
   b9492:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9494:	d914      	bls.n	b94c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9496:	4290      	cmp	r0, r2
   b9498:	d213      	bcs.n	b94c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b949a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b949e:	1a75      	subs	r5, r6, r1
   b94a0:	f1a1 0708 	sub.w	r7, r1, #8
   b94a4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b94a6:	42b7      	cmp	r7, r6
   b94a8:	d018      	beq.n	b94dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b94aa:	b11c      	cbz	r4, b94b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b94ac:	4631      	mov	r1, r6
   b94ae:	4620      	mov	r0, r4
   b94b0:	f7ff f869 	bl	b8586 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b94b4:	1d30      	adds	r0, r6, #4
   b94b6:	f7ff f87a 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b94ba:	3e08      	subs	r6, #8
   b94bc:	3c08      	subs	r4, #8
   b94be:	e7f2      	b.n	b94a6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b94c0:	d00c      	beq.n	b94dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b94c2:	42b5      	cmp	r5, r6
   b94c4:	d00a      	beq.n	b94dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b94c6:	b11c      	cbz	r4, b94d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b94c8:	4629      	mov	r1, r5
   b94ca:	4620      	mov	r0, r4
   b94cc:	f7ff f85b 	bl	b8586 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b94d0:	1d28      	adds	r0, r5, #4
   b94d2:	f7ff f86c 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b94d6:	3508      	adds	r5, #8
   b94d8:	3408      	adds	r4, #8
   b94da:	e7f2      	b.n	b94c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b94dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b94de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b94de:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b94e0:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b94e2:	4605      	mov	r5, r0
        if (n > 0) {
   b94e4:	dd11      	ble.n	b950a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b94e6:	00f0      	lsls	r0, r6, #3
   b94e8:	f7fd ff94 	bl	b7414 <malloc>
            if (!d) {
   b94ec:	4604      	mov	r4, r0
   b94ee:	b158      	cbz	r0, b9508 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b94f0:	e9d5 1200 	ldrd	r1, r2, [r5]
   b94f4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b94f8:	f7ff ffc7 	bl	b948a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b94fc:	6828      	ldr	r0, [r5, #0]
   b94fe:	f7fd ff91 	bl	b7424 <free>
        data_ = d;
   b9502:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9504:	60ae      	str	r6, [r5, #8]
        return true;
   b9506:	2001      	movs	r0, #1
    }
   b9508:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b950a:	2400      	movs	r4, #0
   b950c:	e7f6      	b.n	b94fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b950e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b950e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b9512:	2300      	movs	r3, #0
   b9514:	e9c0 3300 	strd	r3, r3, [r0]
   b9518:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b951a:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b951c:	6849      	ldr	r1, [r1, #4]
   b951e:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9520:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b9522:	dd13      	ble.n	b954c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b9524:	f7ff ffdb 	bl	b94de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9528:	b180      	cbz	r0, b954c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b952a:	e9d5 6300 	ldrd	r6, r3, [r5]
   b952e:	6827      	ldr	r7, [r4, #0]
   b9530:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b9534:	45b0      	cmp	r8, r6
   b9536:	d007      	beq.n	b9548 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b9538:	b11f      	cbz	r7, b9542 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b953a:	4631      	mov	r1, r6
   b953c:	4638      	mov	r0, r7
   b953e:	f7ff f822 	bl	b8586 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   b9542:	3608      	adds	r6, #8
   b9544:	3708      	adds	r7, #8
   b9546:	e7f5      	b.n	b9534 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b9548:	686b      	ldr	r3, [r5, #4]
   b954a:	6063      	str	r3, [r4, #4]
}
   b954c:	4620      	mov	r0, r4
   b954e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9552 <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   b9552:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9554:	460d      	mov	r5, r1
   b9556:	4604      	mov	r4, r0
    WiringBleLock lk;
   b9558:	a801      	add	r0, sp, #4
   b955a:	f7fe fafd 	bl	b7b58 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   b955e:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   b9560:	4620      	mov	r0, r4
   b9562:	310c      	adds	r1, #12
   b9564:	f7ff ffd3 	bl	b950e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b9568:	a801      	add	r0, sp, #4
   b956a:	f7fe fb03 	bl	b7b74 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b956e:	4620      	mov	r0, r4
   b9570:	b003      	add	sp, #12
   b9572:	bd30      	pop	{r4, r5, pc}

000b9574 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b9574:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   b9576:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b9578:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b957a:	4605      	mov	r5, r0
   b957c:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   b957e:	b933      	cbnz	r3, b958e <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   b9580:	4608      	mov	r0, r1
   b9582:	f7fe fa7d 	bl	b7a80 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   b9586:	b910      	cbnz	r0, b958e <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   b9588:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   b958a:	2201      	movs	r2, #1
   b958c:	729a      	strb	r2, [r3, #10]
    return services();
   b958e:	4628      	mov	r0, r5
   b9590:	4621      	mov	r1, r4
   b9592:	f7ff ffde 	bl	b9552 <_ZNK8particle13BlePeerDevice8servicesEv>
}
   b9596:	4628      	mov	r0, r5
   b9598:	bd38      	pop	{r3, r4, r5, pc}

000b959a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b959a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b959c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b959e:	6845      	ldr	r5, [r0, #4]
   b95a0:	4668      	mov	r0, sp
   b95a2:	f7fe fff0 	bl	b8586 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b95a6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b95aa:	4299      	cmp	r1, r3
   b95ac:	da10      	bge.n	b95d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b95ae:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b95b0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b95b2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b95b6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b95ba:	4629      	mov	r1, r5
   b95bc:	f105 0008 	add.w	r0, r5, #8
   b95c0:	f7ff ff63 	bl	b948a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b95c4:	b98d      	cbnz	r5, b95ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b95c6:	6863      	ldr	r3, [r4, #4]
   b95c8:	3301      	adds	r3, #1
   b95ca:	6063      	str	r3, [r4, #4]
    return true;
   b95cc:	2601      	movs	r6, #1
   b95ce:	e006      	b.n	b95de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b95d0:	3101      	adds	r1, #1
   b95d2:	4620      	mov	r0, r4
   b95d4:	f7ff ff83 	bl	b94de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b95d8:	4606      	mov	r6, r0
   b95da:	2800      	cmp	r0, #0
   b95dc:	d1e7      	bne.n	b95ae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   b95de:	a801      	add	r0, sp, #4
   b95e0:	f7fe ffe5 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b95e4:	4630      	mov	r0, r6
   b95e6:	b002      	add	sp, #8
   b95e8:	bd70      	pop	{r4, r5, r6, pc}
   b95ea:	4669      	mov	r1, sp
   b95ec:	4628      	mov	r0, r5
   b95ee:	f7fe ffca 	bl	b8586 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b95f2:	e7e8      	b.n	b95c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b95f4 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b95f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   b95f8:	f8df 90b8 	ldr.w	r9, [pc, #184]	; b96b4 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   b95fc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; b96b8 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b9600:	b093      	sub	sp, #76	; 0x4c
   b9602:	4605      	mov	r5, r0
   b9604:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   b9606:	2700      	movs	r7, #0
   b9608:	682b      	ldr	r3, [r5, #0]
   b960a:	42bb      	cmp	r3, r7
   b960c:	d94e      	bls.n	b96ac <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   b960e:	a803      	add	r0, sp, #12
   b9610:	f7fe fdb8 	bl	b8184 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b9614:	261c      	movs	r6, #28
   b9616:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   b9618:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   b961a:	437e      	muls	r6, r7
   b961c:	4432      	add	r2, r6
   b961e:	f10d 0c14 	add.w	ip, sp, #20
   b9622:	1d13      	adds	r3, r2, #4
   b9624:	46e3      	mov	fp, ip
   b9626:	3214      	adds	r2, #20
   b9628:	6818      	ldr	r0, [r3, #0]
   b962a:	6859      	ldr	r1, [r3, #4]
   b962c:	46e6      	mov	lr, ip
   b962e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   b9632:	3308      	adds	r3, #8
   b9634:	4293      	cmp	r3, r2
   b9636:	46f4      	mov	ip, lr
   b9638:	d1f6      	bne.n	b9628 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   b963a:	6818      	ldr	r0, [r3, #0]
   b963c:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   b9640:	4659      	mov	r1, fp
   b9642:	a80a      	add	r0, sp, #40	; 0x28
   b9644:	f7fe fade 	bl	b7c04 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b9648:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   b964c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9652:	f8dc 3000 	ldr.w	r3, [ip]
   b9656:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   b9658:	686b      	ldr	r3, [r5, #4]
   b965a:	9a03      	ldr	r2, [sp, #12]
   b965c:	4433      	add	r3, r6
   b965e:	a903      	add	r1, sp, #12
   b9660:	8b1b      	ldrh	r3, [r3, #24]
   b9662:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   b9664:	686b      	ldr	r3, [r5, #4]
   b9666:	4433      	add	r3, r6
   b9668:	8b5b      	ldrh	r3, [r3, #26]
   b966a:	82d3      	strh	r3, [r2, #22]
        return services_;
   b966c:	f8d8 0000 	ldr.w	r0, [r8]
   b9670:	f100 040c 	add.w	r4, r0, #12
   b9674:	a80a      	add	r0, sp, #40	; 0x28
   b9676:	f7fe ff86 	bl	b8586 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   b967a:	4620      	mov	r0, r4
   b967c:	a90a      	add	r1, sp, #40	; 0x28
   b967e:	f7ff ff8c 	bl	b959a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b9682:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b9684:	a80b      	add	r0, sp, #44	; 0x2c
   b9686:	f7fe ff92 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b968a:	b954      	cbnz	r4, b96a2 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   b968c:	2320      	movs	r3, #32
   b968e:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   b9692:	f8cd 9000 	str.w	r9, [sp]
   b9696:	4623      	mov	r3, r4
   b9698:	aa0a      	add	r2, sp, #40	; 0x28
   b969a:	4651      	mov	r1, sl
   b969c:	2032      	movs	r0, #50	; 0x32
   b969e:	f7fd fddd 	bl	b725c <log_message>
   b96a2:	a804      	add	r0, sp, #16
   b96a4:	f7fe ff83 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b96a8:	3701      	adds	r7, #1
   b96aa:	e7ad      	b.n	b9608 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   b96ac:	b013      	add	sp, #76	; 0x4c
   b96ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b96b2:	bf00      	nop
   b96b4:	000be541 	.word	0x000be541
   b96b8:	000be443 	.word	0x000be443

000b96bc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b96bc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b96be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b96c0:	4604      	mov	r4, r0
   b96c2:	460d      	mov	r5, r1
   b96c4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b96c6:	d914      	bls.n	b96f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b96c8:	4290      	cmp	r0, r2
   b96ca:	d213      	bcs.n	b96f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b96cc:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b96d0:	1a75      	subs	r5, r6, r1
   b96d2:	f1a1 0708 	sub.w	r7, r1, #8
   b96d6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b96d8:	42b7      	cmp	r7, r6
   b96da:	d018      	beq.n	b970e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b96dc:	b11c      	cbz	r4, b96e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b96de:	4631      	mov	r1, r6
   b96e0:	4620      	mov	r0, r4
   b96e2:	f7fe ff42 	bl	b856a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b96e6:	1d30      	adds	r0, r6, #4
   b96e8:	f7fe ff61 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b96ec:	3e08      	subs	r6, #8
   b96ee:	3c08      	subs	r4, #8
   b96f0:	e7f2      	b.n	b96d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b96f2:	d00c      	beq.n	b970e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b96f4:	42b5      	cmp	r5, r6
   b96f6:	d00a      	beq.n	b970e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b96f8:	b11c      	cbz	r4, b9702 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b96fa:	4629      	mov	r1, r5
   b96fc:	4620      	mov	r0, r4
   b96fe:	f7fe ff34 	bl	b856a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9702:	1d28      	adds	r0, r5, #4
   b9704:	f7fe ff53 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b9708:	3508      	adds	r5, #8
   b970a:	3408      	adds	r4, #8
   b970c:	e7f2      	b.n	b96f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b970e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9710 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b9710:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b9712:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9714:	4605      	mov	r5, r0
        if (n > 0) {
   b9716:	dd11      	ble.n	b973c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b9718:	00f0      	lsls	r0, r6, #3
   b971a:	f7fd fe7b 	bl	b7414 <malloc>
            if (!d) {
   b971e:	4604      	mov	r4, r0
   b9720:	b158      	cbz	r0, b973a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b9722:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9726:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b972a:	f7ff ffc7 	bl	b96bc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b972e:	6828      	ldr	r0, [r5, #0]
   b9730:	f7fd fe78 	bl	b7424 <free>
        data_ = d;
   b9734:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9736:	60ae      	str	r6, [r5, #8]
        return true;
   b9738:	2001      	movs	r0, #1
    }
   b973a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b973c:	2400      	movs	r4, #0
   b973e:	e7f6      	b.n	b972e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b9740 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b9744:	2300      	movs	r3, #0
   b9746:	e9c0 3300 	strd	r3, r3, [r0]
   b974a:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b974c:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b974e:	6849      	ldr	r1, [r1, #4]
   b9750:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9752:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b9754:	dd13      	ble.n	b977e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b9756:	f7ff ffdb 	bl	b9710 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b975a:	b180      	cbz	r0, b977e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b975c:	e9d5 6300 	ldrd	r6, r3, [r5]
   b9760:	6827      	ldr	r7, [r4, #0]
   b9762:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b9766:	45b0      	cmp	r8, r6
   b9768:	d007      	beq.n	b977a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b976a:	b11f      	cbz	r7, b9774 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b976c:	4631      	mov	r1, r6
   b976e:	4638      	mov	r0, r7
   b9770:	f7fe fefb 	bl	b856a <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   b9774:	3608      	adds	r6, #8
   b9776:	3708      	adds	r7, #8
   b9778:	e7f5      	b.n	b9766 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b977a:	686b      	ldr	r3, [r5, #4]
   b977c:	6063      	str	r3, [r4, #4]
}
   b977e:	4620      	mov	r0, r4
   b9780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9784 <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   b9784:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9786:	460d      	mov	r5, r1
   b9788:	4604      	mov	r4, r0
    WiringBleLock lk;
   b978a:	a801      	add	r0, sp, #4
   b978c:	f7fe f9e4 	bl	b7b58 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   b9790:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   b9792:	4620      	mov	r0, r4
   b9794:	3118      	adds	r1, #24
   b9796:	f7ff ffd3 	bl	b9740 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b979a:	a801      	add	r0, sp, #4
   b979c:	f7fe f9ea 	bl	b7b74 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b97a0:	4620      	mov	r0, r4
   b97a2:	b003      	add	sp, #12
   b97a4:	bd30      	pop	{r4, r5, pc}

000b97a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b97a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b97a8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b97aa:	6845      	ldr	r5, [r0, #4]
   b97ac:	4668      	mov	r0, sp
   b97ae:	f7fe fedc 	bl	b856a <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b97b2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b97b6:	4299      	cmp	r1, r3
   b97b8:	da10      	bge.n	b97dc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b97ba:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b97bc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b97be:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b97c2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b97c6:	4629      	mov	r1, r5
   b97c8:	f105 0008 	add.w	r0, r5, #8
   b97cc:	f7ff ff76 	bl	b96bc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b97d0:	b98d      	cbnz	r5, b97f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b97d2:	6863      	ldr	r3, [r4, #4]
   b97d4:	3301      	adds	r3, #1
   b97d6:	6063      	str	r3, [r4, #4]
    return true;
   b97d8:	2601      	movs	r6, #1
   b97da:	e006      	b.n	b97ea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b97dc:	3101      	adds	r1, #1
   b97de:	4620      	mov	r0, r4
   b97e0:	f7ff ff96 	bl	b9710 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b97e4:	4606      	mov	r6, r0
   b97e6:	2800      	cmp	r0, #0
   b97e8:	d1e7      	bne.n	b97ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b97ea:	a801      	add	r0, sp, #4
   b97ec:	f7fe fedf 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b97f0:	4630      	mov	r0, r6
   b97f2:	b002      	add	sp, #8
   b97f4:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b97f6:	4669      	mov	r1, sp
   b97f8:	4628      	mov	r0, r5
   b97fa:	f7fe feb6 	bl	b856a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b97fe:	e7e8      	b.n	b97d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b9800 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b9800:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9802:	b085      	sub	sp, #20
   b9804:	4605      	mov	r5, r0
    WiringBleLock lk;
   b9806:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b9808:	460c      	mov	r4, r1
   b980a:	4617      	mov	r7, r2
    WiringBleLock lk;
   b980c:	f7fe f9a4 	bl	b7b58 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   b9810:	2300      	movs	r3, #0
   b9812:	e9c5 3300 	strd	r3, r3, [r5]
   b9816:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   b9818:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b981a:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   b981e:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   b9822:	42b4      	cmp	r4, r6
   b9824:	d011      	beq.n	b984a <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   b9826:	6838      	ldr	r0, [r7, #0]
   b9828:	4621      	mov	r1, r4
   b982a:	f7fe fbc5 	bl	b7fb8 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   b982e:	b150      	cbz	r0, b9846 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   b9830:	4621      	mov	r1, r4
   b9832:	a802      	add	r0, sp, #8
   b9834:	f7fe fe99 	bl	b856a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9838:	a902      	add	r1, sp, #8
   b983a:	4628      	mov	r0, r5
   b983c:	f7ff ffb3 	bl	b97a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   b9840:	a803      	add	r0, sp, #12
   b9842:	f7fe feb4 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   b9846:	3408      	adds	r4, #8
   b9848:	e7eb      	b.n	b9822 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   b984a:	a801      	add	r0, sp, #4
   b984c:	f7fe f992 	bl	b7b74 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b9850:	4628      	mov	r0, r5
   b9852:	b005      	add	sp, #20
   b9854:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b9858 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b9858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   b985c:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b985e:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b9860:	b091      	sub	sp, #68	; 0x44
   b9862:	4606      	mov	r6, r0
   b9864:	460f      	mov	r7, r1
   b9866:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   b9868:	b933      	cbnz	r3, b9878 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   b986a:	e9c0 3300 	strd	r3, r3, [r0]
   b986e:	6083      	str	r3, [r0, #8]
}
   b9870:	4630      	mov	r0, r6
   b9872:	b011      	add	sp, #68	; 0x44
   b9874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   b9878:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   b987a:	7e0d      	ldrb	r5, [r1, #24]
   b987c:	2d00      	cmp	r5, #0
   b987e:	d158      	bne.n	b9932 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   b9880:	2320      	movs	r3, #32
   b9882:	462a      	mov	r2, r5
   b9884:	a803      	add	r0, sp, #12
   b9886:	e9cd 3508 	strd	r3, r5, [sp, #32]
   b988a:	f7fe fb02 	bl	b7e92 <_ZNK8particle7BleUuid8toStringEb>
   b988e:	9b03      	ldr	r3, [sp, #12]
   b9890:	9301      	str	r3, [sp, #4]
   b9892:	4b2b      	ldr	r3, [pc, #172]	; (b9940 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   b9894:	492b      	ldr	r1, [pc, #172]	; (b9944 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   b9896:	9300      	str	r3, [sp, #0]
   b9898:	aa08      	add	r2, sp, #32
   b989a:	462b      	mov	r3, r5
   b989c:	2001      	movs	r0, #1
   b989e:	f7fd fcdd 	bl	b725c <log_message>
   b98a2:	a803      	add	r0, sp, #12
   b98a4:	f7fd ff34 	bl	b7710 <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   b98a8:	231c      	movs	r3, #28
   b98aa:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   b98ae:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   b98b2:	8a9a      	ldrh	r2, [r3, #20]
   b98b4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   b98b8:	8adb      	ldrh	r3, [r3, #22]
   b98ba:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   b98be:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   b98c0:	4a21      	ldr	r2, [pc, #132]	; (b9948 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   b98c2:	8818      	ldrh	r0, [r3, #0]
   b98c4:	9500      	str	r5, [sp, #0]
   b98c6:	a908      	add	r1, sp, #32
   b98c8:	f7fd fafc 	bl	b6ec4 <hal_ble_gatt_client_discover_characteristics>
   b98cc:	2800      	cmp	r0, #0
   b98ce:	db30      	blt.n	b9932 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   b98d0:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   b98d2:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b98d6:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   b98da:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   b98dc:	f1a4 0308 	sub.w	r3, r4, #8
   b98e0:	4599      	cmp	r9, r3
   b98e2:	d022      	beq.n	b992a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   b98e4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b98e8:	89db      	ldrh	r3, [r3, #14]
   b98ea:	2b00      	cmp	r3, #0
   b98ec:	d0f5      	beq.n	b98da <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   b98ee:	2210      	movs	r2, #16
   b98f0:	2100      	movs	r1, #0
   b98f2:	eb0d 0002 	add.w	r0, sp, r2
   b98f6:	9503      	str	r5, [sp, #12]
   b98f8:	f002 fa0d 	bl	bbd16 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   b98fc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b9900:	89d9      	ldrh	r1, [r3, #14]
   b9902:	683b      	ldr	r3, [r7, #0]
   b9904:	aa03      	add	r2, sp, #12
   b9906:	8818      	ldrh	r0, [r3, #0]
   b9908:	9500      	str	r5, [sp, #0]
   b990a:	2313      	movs	r3, #19
   b990c:	f7fd faf8 	bl	b6f00 <hal_ble_gatt_client_read>
                if (len > 0) {
   b9910:	2800      	cmp	r0, #0
   b9912:	d0e2      	beq.n	b98da <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   b9914:	ab10      	add	r3, sp, #64	; 0x40
   b9916:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   b9918:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   b991a:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   b991e:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   b9922:	303c      	adds	r0, #60	; 0x3c
   b9924:	f7fd ff95 	bl	b7852 <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   b9928:	e7d7      	b.n	b98da <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   b992a:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   b992e:	2201      	movs	r2, #1
   b9930:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   b9932:	4642      	mov	r2, r8
   b9934:	4639      	mov	r1, r7
   b9936:	4630      	mov	r0, r6
   b9938:	f7ff ff62 	bl	b9800 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   b993c:	e798      	b.n	b9870 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   b993e:	bf00      	nop
   b9940:	000be566 	.word	0x000be566
   b9944:	000be443 	.word	0x000be443
   b9948:	000b9af1 	.word	0x000b9af1

000b994c <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b994c:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   b994e:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b9950:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b9952:	b085      	sub	sp, #20
   b9954:	4606      	mov	r6, r0
   b9956:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   b9958:	b92b      	cbnz	r3, b9966 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   b995a:	a801      	add	r0, sp, #4
   b995c:	f7ff fe0a 	bl	b9574 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   b9960:	a801      	add	r0, sp, #4
   b9962:	f7fe fe33 	bl	b85cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   b9966:	682b      	ldr	r3, [r5, #0]
   b9968:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   b996c:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   b9970:	42bc      	cmp	r4, r7
   b9972:	d009      	beq.n	b9988 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   b9974:	4622      	mov	r2, r4
   b9976:	4629      	mov	r1, r5
   b9978:	a801      	add	r0, sp, #4
   b997a:	f7ff ff6d 	bl	b9858 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   b997e:	a801      	add	r0, sp, #4
   b9980:	f7fe fe36 	bl	b85f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   b9984:	3408      	adds	r4, #8
   b9986:	e7f3      	b.n	b9970 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   b9988:	4630      	mov	r0, r6
   b998a:	4629      	mov	r1, r5
   b998c:	f7ff fefa 	bl	b9784 <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   b9990:	4630      	mov	r0, r6
   b9992:	b005      	add	sp, #20
   b9994:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b9998 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b9998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b999c:	4605      	mov	r5, r0
   b999e:	b093      	sub	sp, #76	; 0x4c
    return address_;
   b99a0:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   b99a2:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b99a4:	460f      	mov	r7, r1
    return address_;
   b99a6:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b99a8:	4698      	mov	r8, r3
    return address_;
   b99aa:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   b99ac:	4b41      	ldr	r3, [pc, #260]	; (b9ab4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   b99ae:	9304      	str	r3, [sp, #16]
    return address_;
   b99b0:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   b99b2:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   b99b4:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   b99b8:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   b99bc:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   b99c0:	f7fe fcac 	bl	b831c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b99c4:	4b3c      	ldr	r3, [pc, #240]	; (b9ab8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   b99c6:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b99c8:	f7fe fca8 	bl	b831c <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b99cc:	6829      	ldr	r1, [r5, #0]
   b99ce:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b99d0:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b99d2:	464a      	mov	r2, r9
   b99d4:	a804      	add	r0, sp, #16
   b99d6:	f7fd fa9d 	bl	b6f14 <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   b99da:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   b99dc:	4604      	mov	r4, r0
   b99de:	b138      	cbz	r0, b99f0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   b99e0:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b99e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b99e6:	801a      	strh	r2, [r3, #0]
}
   b99e8:	4620      	mov	r0, r4
   b99ea:	b013      	add	sp, #76	; 0x4c
   b99ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   b99f0:	4639      	mov	r1, r7
   b99f2:	4628      	mov	r0, r5
   b99f4:	f7fe fc16 	bl	b8224 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
   b99f8:	a803      	add	r0, sp, #12
   b99fa:	f7fe f8ad 	bl	b7b58 <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b99fe:	f7fe fc8d 	bl	b831c <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b9a02:	6807      	ldr	r7, [r0, #0]
   b9a04:	4629      	mov	r1, r5
   b9a06:	3718      	adds	r7, #24
   b9a08:	4630      	mov	r0, r6
   b9a0a:	f7fe fdc6 	bl	b859a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b9a0e:	4631      	mov	r1, r6
   b9a10:	4638      	mov	r0, r7
   b9a12:	f7ff f92b 	bl	b8c6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b9a16:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   b9a18:	a80b      	add	r0, sp, #44	; 0x2c
   b9a1a:	f7fe fdc8 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9a1e:	f04f 0920 	mov.w	r9, #32
   b9a22:	bb1f      	cbnz	r7, b9a6c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   b9a24:	4632      	mov	r2, r6
   b9a26:	4b25      	ldr	r3, [pc, #148]	; (b9abc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b9a28:	4e25      	ldr	r6, [pc, #148]	; (b9ac0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   b9a2a:	4926      	ldr	r1, [pc, #152]	; (b9ac4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b9a2c:	9300      	str	r3, [sp, #0]
   b9a2e:	2032      	movs	r0, #50	; 0x32
   b9a30:	4623      	mov	r3, r4
   b9a32:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b9a36:	f7fd fc11 	bl	b725c <log_message>
   b9a3a:	6830      	ldr	r0, [r6, #0]
   b9a3c:	f7fd fae6 	bl	b700c <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b9a40:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   b9a42:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b9a46:	4621      	mov	r1, r4
   b9a48:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b9a4a:	4c1f      	ldr	r4, [pc, #124]	; (b9ac8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b9a4c:	f7fd fa1c 	bl	b6e88 <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   b9a50:	6830      	ldr	r0, [r6, #0]
   b9a52:	f7fd fad3 	bl	b6ffc <os_mutex_recursive_lock>
        locked_ = true;
   b9a56:	2301      	movs	r3, #1
   b9a58:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   b9a5c:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b9a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b9a62:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b9a64:	a803      	add	r0, sp, #12
   b9a66:	f7fe f885 	bl	b7b74 <_ZN8particle3ble13WiringBleLockD1Ev>
   b9a6a:	e7bd      	b.n	b99e8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   b9a6c:	a803      	add	r0, sp, #12
   b9a6e:	f7fe f881 	bl	b7b74 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   b9a72:	4b16      	ldr	r3, [pc, #88]	; (b9acc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   b9a74:	9300      	str	r3, [sp, #0]
   b9a76:	4913      	ldr	r1, [pc, #76]	; (b9ac4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b9a78:	4623      	mov	r3, r4
   b9a7a:	4632      	mov	r2, r6
   b9a7c:	2001      	movs	r0, #1
   b9a7e:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b9a82:	f7fd fbeb 	bl	b725c <log_message>
    if (automatic) {
   b9a86:	f1b8 0f00 	cmp.w	r8, #0
   b9a8a:	d0ad      	beq.n	b99e8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b9a8c:	4629      	mov	r1, r5
   b9a8e:	4630      	mov	r0, r6
   b9a90:	f7ff ff5c 	bl	b994c <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   b9a94:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   b9a98:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   b9a9c:	42bd      	cmp	r5, r7
   b9a9e:	d005      	beq.n	b9aac <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   b9aa0:	4628      	mov	r0, r5
   b9aa2:	2101      	movs	r1, #1
   b9aa4:	f7fe fb34 	bl	b8110 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   b9aa8:	3508      	adds	r5, #8
   b9aaa:	e7f7      	b.n	b9a9c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b9aac:	4630      	mov	r0, r6
   b9aae:	f7fe fd9f 	bl	b85f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b9ab2:	e799      	b.n	b99e8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   b9ab4:	00180003 	.word	0x00180003
   b9ab8:	000b8d25 	.word	0x000b8d25
   b9abc:	000be598 	.word	0x000be598
   b9ac0:	2003e66c 	.word	0x2003e66c
   b9ac4:	000be443 	.word	0x000be443
   b9ac8:	fffffefc 	.word	0xfffffefc
   b9acc:	000be5b4 	.word	0x000be5b4

000b9ad0 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   b9ad0:	b513      	push	{r0, r1, r4, lr}
   b9ad2:	4604      	mov	r4, r0
   b9ad4:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   b9ad8:	f7fe fb70 	bl	b81bc <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   b9adc:	9b00      	ldr	r3, [sp, #0]
   b9ade:	9901      	ldr	r1, [sp, #4]
   b9ae0:	2200      	movs	r2, #0
   b9ae2:	4620      	mov	r0, r4
   b9ae4:	f7ff ff58 	bl	b9998 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}
   b9ae8:	4620      	mov	r0, r4
   b9aea:	b002      	add	sp, #8
   b9aec:	bd10      	pop	{r4, pc}
	...

000b9af0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b9af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   b9af4:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b9af6:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   b9af8:	2600      	movs	r6, #0
   b9afa:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   b9afe:	4b66      	ldr	r3, [pc, #408]	; (b9c98 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   b9b00:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b9b02:	4605      	mov	r5, r0
   b9b04:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   b9b06:	4633      	mov	r3, r6
   b9b08:	4964      	ldr	r1, [pc, #400]	; (b9c9c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b9b0a:	f8df 9194 	ldr.w	r9, [pc, #404]	; b9ca0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   b9b0e:	f8df 818c 	ldr.w	r8, [pc, #396]	; b9c9c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b9b12:	f8df a190 	ldr.w	sl, [pc, #400]	; b9ca4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   b9b16:	aa0c      	add	r2, sp, #48	; 0x30
   b9b18:	2001      	movs	r0, #1
   b9b1a:	f7fd fb9f 	bl	b725c <log_message>
        for (size_t i = 0; i < event->count; i++) {
   b9b1e:	682b      	ldr	r3, [r5, #0]
   b9b20:	42b3      	cmp	r3, r6
   b9b22:	f240 80b5 	bls.w	b9c90 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   b9b26:	a803      	add	r0, sp, #12
   b9b28:	f7fe fa6c 	bl	b8004 <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   b9b2c:	a805      	add	r0, sp, #20
   b9b2e:	f7fe fb29 	bl	b8184 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b9b32:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b9b36:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   b9b38:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   b9b3a:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b9b3e:	445b      	add	r3, fp
        this->size = halHandles.size;
   b9b40:	8bd9      	ldrh	r1, [r3, #30]
   b9b42:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   b9b44:	8c19      	ldrh	r1, [r3, #32]
   b9b46:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   b9b48:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   b9b4a:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   b9b4c:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   b9b4e:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   b9b50:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   b9b52:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   b9b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   b9b56:	8253      	strh	r3, [r2, #18]
   b9b58:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   b9b5c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   b9b60:	429a      	cmp	r2, r3
   b9b62:	d07d      	beq.n	b9c60 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   b9b64:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   b9b66:	8ac4      	ldrh	r4, [r0, #22]
   b9b68:	428c      	cmp	r4, r1
   b9b6a:	d377      	bcc.n	b9c5c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   b9b6c:	8a84      	ldrh	r4, [r0, #20]
   b9b6e:	428c      	cmp	r4, r1
   b9b70:	d874      	bhi.n	b9c5c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9b72:	6859      	ldr	r1, [r3, #4]
   b9b74:	9005      	str	r0, [sp, #20]
   b9b76:	a806      	add	r0, sp, #24
   b9b78:	f7fd ffc8 	bl	b7b0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   b9b7c:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   b9b80:	f8dd e00c 	ldr.w	lr, [sp, #12]
   b9b84:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9b88:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   b9b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9b8e:	f8dc 3000 	ldr.w	r3, [ip]
   b9b92:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   b9b94:	892b      	ldrh	r3, [r5, #8]
   b9b96:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   b9b9a:	686b      	ldr	r3, [r5, #4]
   b9b9c:	9c03      	ldr	r4, [sp, #12]
   b9b9e:	445b      	add	r3, fp
   b9ba0:	7e5b      	ldrb	r3, [r3, #25]
   b9ba2:	f013 0f02 	tst.w	r3, #2
   b9ba6:	d16e      	bne.n	b9c86 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   b9ba8:	686b      	ldr	r3, [r5, #4]
   b9baa:	445b      	add	r3, fp
   b9bac:	7e5b      	ldrb	r3, [r3, #25]
   b9bae:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   b9bb0:	bf42      	ittt	mi
   b9bb2:	7923      	ldrbmi	r3, [r4, #4]
   b9bb4:	f043 0304 	orrmi.w	r3, r3, #4
   b9bb8:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   b9bba:	686b      	ldr	r3, [r5, #4]
   b9bbc:	445b      	add	r3, fp
   b9bbe:	7e5b      	ldrb	r3, [r3, #25]
   b9bc0:	0719      	lsls	r1, r3, #28
   b9bc2:	bf42      	ittt	mi
   b9bc4:	7923      	ldrbmi	r3, [r4, #4]
   b9bc6:	f043 0308 	orrmi.w	r3, r3, #8
   b9bca:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   b9bcc:	686b      	ldr	r3, [r5, #4]
   b9bce:	445b      	add	r3, fp
   b9bd0:	7e5b      	ldrb	r3, [r3, #25]
   b9bd2:	06da      	lsls	r2, r3, #27
   b9bd4:	bf42      	ittt	mi
   b9bd6:	7923      	ldrbmi	r3, [r4, #4]
   b9bd8:	f043 0310 	orrmi.w	r3, r3, #16
   b9bdc:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   b9bde:	686b      	ldr	r3, [r5, #4]
   b9be0:	445b      	add	r3, fp
   b9be2:	aa07      	add	r2, sp, #28
   b9be4:	7e5b      	ldrb	r3, [r3, #25]
   b9be6:	069b      	lsls	r3, r3, #26
   b9be8:	bf42      	ittt	mi
   b9bea:	7923      	ldrbmi	r3, [r4, #4]
   b9bec:	f043 0320 	orrmi.w	r3, r3, #32
   b9bf0:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   b9bf2:	686b      	ldr	r3, [r5, #4]
   b9bf4:	449b      	add	fp, r3
   b9bf6:	f10b 0304 	add.w	r3, fp, #4
   b9bfa:	4696      	mov	lr, r2
   b9bfc:	f10b 0b14 	add.w	fp, fp, #20
   b9c00:	6818      	ldr	r0, [r3, #0]
   b9c02:	6859      	ldr	r1, [r3, #4]
   b9c04:	4694      	mov	ip, r2
   b9c06:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b9c0a:	3308      	adds	r3, #8
   b9c0c:	455b      	cmp	r3, fp
   b9c0e:	4662      	mov	r2, ip
   b9c10:	d1f6      	bne.n	b9c00 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   b9c12:	6818      	ldr	r0, [r3, #0]
   b9c14:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   b9c18:	4671      	mov	r1, lr
   b9c1a:	a80c      	add	r0, sp, #48	; 0x30
   b9c1c:	f7fd fff2 	bl	b7c04 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b9c20:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   b9c24:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9c28:	3414      	adds	r4, #20
   b9c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9c2c:	f8dc 3000 	ldr.w	r3, [ip]
   b9c30:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   b9c32:	a903      	add	r1, sp, #12
   b9c34:	a80c      	add	r0, sp, #48	; 0x30
   b9c36:	f7fe fc98 	bl	b856a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9c3a:	a90c      	add	r1, sp, #48	; 0x30
   b9c3c:	f107 0018 	add.w	r0, r7, #24
   b9c40:	f7ff fdb1 	bl	b97a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b9c44:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b9c46:	a80d      	add	r0, sp, #52	; 0x34
   b9c48:	f7fe fcb1 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9c4c:	b99c      	cbnz	r4, b9c76 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b9c4e:	2320      	movs	r3, #32
   b9c50:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   b9c54:	f8cd a000 	str.w	sl, [sp]
   b9c58:	4623      	mov	r3, r4
   b9c5a:	e007      	b.n	b9c6c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   b9c5c:	3308      	adds	r3, #8
   b9c5e:	e77f      	b.n	b9b60 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b9c60:	2420      	movs	r4, #32
   b9c62:	2300      	movs	r3, #0
   b9c64:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   b9c68:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b9c6c:	aa0c      	add	r2, sp, #48	; 0x30
   b9c6e:	4641      	mov	r1, r8
   b9c70:	2032      	movs	r0, #50	; 0x32
   b9c72:	f7fd faf3 	bl	b725c <log_message>
   b9c76:	a806      	add	r0, sp, #24
   b9c78:	f7fe fc99 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9c7c:	a804      	add	r0, sp, #16
   b9c7e:	f7fe fc96 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b9c82:	3601      	adds	r6, #1
   b9c84:	e74b      	b.n	b9b1e <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   b9c86:	7923      	ldrb	r3, [r4, #4]
   b9c88:	f043 0302 	orr.w	r3, r3, #2
   b9c8c:	7123      	strb	r3, [r4, #4]
   b9c8e:	e78b      	b.n	b9ba8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   b9c90:	b015      	add	sp, #84	; 0x54
   b9c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9c96:	bf00      	nop
   b9c98:	000be5d1 	.word	0x000be5d1
   b9c9c:	000be443 	.word	0x000be443
   b9ca0:	000be5ec 	.word	0x000be5ec
   b9ca4:	000be61b 	.word	0x000be61b

000b9ca8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9ca8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9cac:	4604      	mov	r4, r0
   b9cae:	460d      	mov	r5, r1
   b9cb0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9cb2:	d914      	bls.n	b9cde <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9cb4:	4290      	cmp	r0, r2
   b9cb6:	d213      	bcs.n	b9ce0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b9cb8:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b9cbc:	1a75      	subs	r5, r6, r1
   b9cbe:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b9cc2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9cc4:	42b7      	cmp	r7, r6
   b9cc6:	d018      	beq.n	b9cfa <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b9cc8:	b11c      	cbz	r4, b9cd2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b9cca:	4631      	mov	r1, r6
   b9ccc:	4620      	mov	r0, r4
   b9cce:	f7fe feb5 	bl	b8a3c <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   b9cd2:	4630      	mov	r0, r6
   b9cd4:	f7fe fb8c 	bl	b83f0 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   b9cd8:	3e24      	subs	r6, #36	; 0x24
   b9cda:	3c24      	subs	r4, #36	; 0x24
   b9cdc:	e7f2      	b.n	b9cc4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b9cde:	d00c      	beq.n	b9cfa <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b9ce0:	42b5      	cmp	r5, r6
   b9ce2:	d00a      	beq.n	b9cfa <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b9ce4:	b11c      	cbz	r4, b9cee <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b9ce6:	4629      	mov	r1, r5
   b9ce8:	4620      	mov	r0, r4
   b9cea:	f7fe fea7 	bl	b8a3c <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   b9cee:	4628      	mov	r0, r5
   b9cf0:	f7fe fb7e 	bl	b83f0 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   b9cf4:	3524      	adds	r5, #36	; 0x24
   b9cf6:	3424      	adds	r4, #36	; 0x24
   b9cf8:	e7f2      	b.n	b9ce0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b9cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9cfc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b9cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b9cfe:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9d00:	4605      	mov	r5, r0
        if (n > 0) {
   b9d02:	dd13      	ble.n	b9d2c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b9d04:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   b9d06:	fb07 f006 	mul.w	r0, r7, r6
   b9d0a:	f7fd fb83 	bl	b7414 <malloc>
            if (!d) {
   b9d0e:	4604      	mov	r4, r0
   b9d10:	b158      	cbz	r0, b9d2a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b9d12:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9d16:	fb07 1202 	mla	r2, r7, r2, r1
   b9d1a:	f7ff ffc5 	bl	b9ca8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b9d1e:	6828      	ldr	r0, [r5, #0]
   b9d20:	f7fd fb80 	bl	b7424 <free>
        data_ = d;
   b9d24:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9d26:	60ae      	str	r6, [r5, #8]
        return true;
   b9d28:	2001      	movs	r0, #1
    }
   b9d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b9d2c:	2400      	movs	r4, #0
   b9d2e:	e7f6      	b.n	b9d1e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000b9d30 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   b9d30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9d34:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   b9d36:	ad01      	add	r5, sp, #4
   b9d38:	4606      	mov	r6, r0
   b9d3a:	4628      	mov	r0, r5
   b9d3c:	460c      	mov	r4, r1
   b9d3e:	f7fd ff46 	bl	b7bce <_ZN8particle10BleAddressC1Ev>
   b9d42:	a803      	add	r0, sp, #12
   b9d44:	f7fe ff55 	bl	b8bf2 <_ZN8particle18BleAdvertisingDataC1Ev>
   b9d48:	a806      	add	r0, sp, #24
   b9d4a:	f7fe ff52 	bl	b8bf2 <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   b9d4e:	6930      	ldr	r0, [r6, #16]
   b9d50:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   b9d52:	89f2      	ldrh	r2, [r6, #14]
   b9d54:	ab13      	add	r3, sp, #76	; 0x4c
   b9d56:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   b9d58:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   b9d5c:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   b9d5e:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   b9d60:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   b9d64:	a806      	add	r0, sp, #24
   b9d66:	f7fe feb8 	bl	b8ada <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   b9d6a:	89b2      	ldrh	r2, [r6, #12]
   b9d6c:	6871      	ldr	r1, [r6, #4]
   b9d6e:	a803      	add	r0, sp, #12
   b9d70:	f7fe feb3 	bl	b8ada <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   b9d74:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b9d78:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   b9d7a:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b9d7c:	d003      	beq.n	b9d86 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   b9d7e:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b9d82:	429a      	cmp	r2, r3
   b9d84:	db5c      	blt.n	b9e40 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   b9d86:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   b9d8a:	2b7f      	cmp	r3, #127	; 0x7f
   b9d8c:	d003      	beq.n	b9d96 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   b9d8e:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b9d92:	429a      	cmp	r2, r3
   b9d94:	dc54      	bgt.n	b9e40 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   b9d96:	f104 0150 	add.w	r1, r4, #80	; 0x50
   b9d9a:	4638      	mov	r0, r7
   b9d9c:	f7fe fd16 	bl	b87cc <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   b9da0:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   b9da2:	2b00      	cmp	r3, #0
   b9da4:	dd52      	ble.n	b9e4c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   b9da6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   b9da8:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   b9dac:	45b1      	cmp	r9, r6
   b9dae:	d050      	beq.n	b9e52 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   b9db0:	4630      	mov	r0, r6
   b9db2:	4629      	mov	r1, r5
   b9db4:	f7fd fef7 	bl	b7ba6 <_ZNK8particle10BleAddresseqERKS0_>
   b9db8:	3608      	adds	r6, #8
   b9dba:	4680      	mov	r8, r0
   b9dbc:	2800      	cmp	r0, #0
   b9dbe:	d0f5      	beq.n	b9dac <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   b9dc0:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b9dc2:	f7fd fb2f 	bl	b7424 <free>
        if (!delegator->filterByRssi(result) ||
   b9dc6:	f1b8 0f00 	cmp.w	r8, #0
   b9dca:	d039      	beq.n	b9e40 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   b9dcc:	4629      	mov	r1, r5
   b9dce:	4620      	mov	r0, r4
   b9dd0:	f7fe fcbf 	bl	b8752 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   b9dd4:	b3a0      	cbz	r0, b9e40 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   b9dd6:	4629      	mov	r1, r5
   b9dd8:	4620      	mov	r0, r4
   b9dda:	f7ff fa68 	bl	b92ae <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   b9dde:	4606      	mov	r6, r0
   b9de0:	b370      	cbz	r0, b9e40 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   b9de2:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   b9de6:	4638      	mov	r0, r7
   b9de8:	f7fe fd3b 	bl	b8862 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   b9dec:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b9dee:	2b00      	cmp	r3, #0
   b9df0:	dd12      	ble.n	b9e18 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   b9df2:	a806      	add	r0, sp, #24
   b9df4:	f7fe f8b3 	bl	b7f5e <_ZNK8particle18BleAdvertisingData10appearanceEv>
   b9df8:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   b9dfa:	a803      	add	r0, sp, #12
   b9dfc:	f7fe f8af 	bl	b7f5e <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   b9e00:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   b9e04:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   b9e08:	429a      	cmp	r2, r3
   b9e0a:	d025      	beq.n	b9e58 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   b9e0c:	f833 1b02 	ldrh.w	r1, [r3], #2
   b9e10:	4588      	cmp	r8, r1
   b9e12:	d001      	beq.n	b9e18 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   b9e14:	4288      	cmp	r0, r1
   b9e16:	d1f7      	bne.n	b9e08 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   b9e18:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b9e1a:	f7fd fb03 	bl	b7424 <free>
              !delegator->filterByServiceUUID(result) ||
   b9e1e:	b17e      	cbz	r6, b9e40 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   b9e20:	4629      	mov	r1, r5
   b9e22:	4620      	mov	r0, r4
   b9e24:	f7fe fd52 	bl	b88cc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   b9e28:	b150      	cbz	r0, b9e40 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   b9e2a:	6a23      	ldr	r3, [r4, #32]
   b9e2c:	b1b3      	cbz	r3, b9e5c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   b9e2e:	6963      	ldr	r3, [r4, #20]
   b9e30:	9513      	str	r5, [sp, #76]	; 0x4c
   b9e32:	3301      	adds	r3, #1
   b9e34:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9e38:	4639      	mov	r1, r7
   b9e3a:	f104 0018 	add.w	r0, r4, #24
   b9e3e:	4798      	blx	r3
            return;
   b9e40:	4628      	mov	r0, r5
   b9e42:	f7fe fad5 	bl	b83f0 <_ZN8particle13BleScanResultD1Ev>
    }
   b9e46:	b01d      	add	sp, #116	; 0x74
   b9e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   b9e4c:	f04f 0801 	mov.w	r8, #1
   b9e50:	e7b6      	b.n	b9dc0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b9e52:	f04f 0800 	mov.w	r8, #0
   b9e56:	e7b3      	b.n	b9dc0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b9e58:	2600      	movs	r6, #0
   b9e5a:	e7dd      	b.n	b9e18 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   b9e5c:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   b9e60:	f1b8 0f00 	cmp.w	r8, #0
   b9e64:	d007      	beq.n	b9e76 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   b9e66:	6963      	ldr	r3, [r4, #20]
   b9e68:	3301      	adds	r3, #1
   b9e6a:	6163      	str	r3, [r4, #20]
   b9e6c:	4629      	mov	r1, r5
   b9e6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9e70:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b9e74:	e7e3      	b.n	b9e3e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   b9e76:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   b9e7a:	f1bc 0f00 	cmp.w	ip, #0
   b9e7e:	d025      	beq.n	b9ecc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   b9e80:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b9e82:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   b9e84:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b9e86:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   b9e88:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b9e8a:	d8d9      	bhi.n	b9e40 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b9e8c:	2224      	movs	r2, #36	; 0x24
   b9e8e:	4353      	muls	r3, r2
    address_ = addr.address_;
   b9e90:	462a      	mov	r2, r5
   b9e92:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b9e94:	3b24      	subs	r3, #36	; 0x24
   b9e96:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   b9e9a:	f84c 0003 	str.w	r0, [ip, r3]
   b9e9e:	6071      	str	r1, [r6, #4]
class BleScanResult {
   b9ea0:	f106 0008 	add.w	r0, r6, #8
   b9ea4:	a903      	add	r1, sp, #12
   b9ea6:	f7fe fde0 	bl	b8a6a <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b9eaa:	a906      	add	r1, sp, #24
   b9eac:	f106 0014 	add.w	r0, r6, #20
   b9eb0:	f7fe fddb 	bl	b8a6a <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b9eb4:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b9eb8:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b9ebc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b9ec0:	429a      	cmp	r2, r3
   b9ec2:	d3bd      	bcc.n	b9e40 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   b9ec4:	4640      	mov	r0, r8
   b9ec6:	f7fc ffd5 	bl	b6e74 <hal_ble_gap_stop_scan>
   b9eca:	e7b9      	b.n	b9e40 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   b9ecc:	e895 0003 	ldmia.w	r5, {r0, r1}
   b9ed0:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   b9ed4:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   b9ed8:	a903      	add	r1, sp, #12
   b9eda:	a80c      	add	r0, sp, #48	; 0x30
   b9edc:	f7fe fd91 	bl	b8a02 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b9ee0:	a906      	add	r1, sp, #24
   b9ee2:	a80f      	add	r0, sp, #60	; 0x3c
   b9ee4:	f7fe fd8d 	bl	b8a02 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b9ee8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b9eec:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   b9ef0:	4641      	mov	r1, r8
   b9ef2:	4638      	mov	r0, r7
   b9ef4:	6866      	ldr	r6, [r4, #4]
   b9ef6:	f7fe fda1 	bl	b8a3c <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9efa:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b9efe:	4299      	cmp	r1, r3
   b9f00:	da10      	bge.n	b9f24 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   b9f02:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9f04:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b9f06:	2224      	movs	r2, #36	; 0x24
   b9f08:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b9f0c:	f106 0024 	add.w	r0, r6, #36	; 0x24
   b9f10:	fb02 3201 	mla	r2, r2, r1, r3
   b9f14:	4631      	mov	r1, r6
   b9f16:	f7ff fec7 	bl	b9ca8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9f1a:	b986      	cbnz	r6, b9f3e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   b9f1c:	6863      	ldr	r3, [r4, #4]
   b9f1e:	3301      	adds	r3, #1
   b9f20:	6063      	str	r3, [r4, #4]
    return true;
   b9f22:	e005      	b.n	b9f30 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9f24:	3101      	adds	r1, #1
   b9f26:	4620      	mov	r0, r4
   b9f28:	f7ff fee8 	bl	b9cfc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9f2c:	2800      	cmp	r0, #0
   b9f2e:	d1e8      	bne.n	b9f02 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   b9f30:	4638      	mov	r0, r7
   b9f32:	f7fe fa5d 	bl	b83f0 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   b9f36:	4640      	mov	r0, r8
   b9f38:	f7fe fa5a 	bl	b83f0 <_ZN8particle13BleScanResultD1Ev>
   b9f3c:	e780      	b.n	b9e40 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   b9f3e:	4639      	mov	r1, r7
   b9f40:	4630      	mov	r0, r6
   b9f42:	f7fe fd7b 	bl	b8a3c <_ZN8particle13BleScanResultC1EOS0_>
   b9f46:	e7e9      	b.n	b9f1c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000b9f48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b9f48:	4802      	ldr	r0, [pc, #8]	; (b9f54 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b9f4a:	2300      	movs	r3, #0
   b9f4c:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b9f4e:	f7fd b84d 	b.w	b6fec <os_mutex_recursive_create>
   b9f52:	bf00      	nop
   b9f54:	2003e66c 	.word	0x2003e66c

000b9f58 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b9f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9f5a:	4606      	mov	r6, r0
   b9f5c:	460d      	mov	r5, r1
  size_t n = 0;
   b9f5e:	188f      	adds	r7, r1, r2
   b9f60:	2400      	movs	r4, #0
  while (size--) {
   b9f62:	42bd      	cmp	r5, r7
   b9f64:	d00c      	beq.n	b9f80 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b9f66:	6833      	ldr	r3, [r6, #0]
   b9f68:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9f6c:	689b      	ldr	r3, [r3, #8]
   b9f6e:	4630      	mov	r0, r6
   b9f70:	4798      	blx	r3
     if (chunk>=0)
   b9f72:	1e03      	subs	r3, r0, #0
   b9f74:	db01      	blt.n	b9f7a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b9f76:	441c      	add	r4, r3
  while (size--) {
   b9f78:	e7f3      	b.n	b9f62 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b9f7a:	2c00      	cmp	r4, #0
   b9f7c:	bf08      	it	eq
   b9f7e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b9f80:	4620      	mov	r0, r4
   b9f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9f84 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b9f84:	b508      	push	{r3, lr}
  return write(str);
   b9f86:	f7fc fa6d 	bl	b6464 <_ZN5Print5writeEPKc>
}
   b9f8a:	bd08      	pop	{r3, pc}

000b9f8c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b9f8c:	6803      	ldr	r3, [r0, #0]
   b9f8e:	689b      	ldr	r3, [r3, #8]
   b9f90:	4718      	bx	r3

000b9f92 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b9f92:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b9f94:	210d      	movs	r1, #13
{
   b9f96:	4605      	mov	r5, r0
  size_t n = print('\r');
   b9f98:	f7ff fff8 	bl	b9f8c <_ZN5Print5printEc>
  n += print('\n');
   b9f9c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b9f9e:	4604      	mov	r4, r0
  n += print('\n');
   b9fa0:	4628      	mov	r0, r5
   b9fa2:	f7ff fff3 	bl	b9f8c <_ZN5Print5printEc>
  return n;
}
   b9fa6:	4420      	add	r0, r4
   b9fa8:	bd38      	pop	{r3, r4, r5, pc}

000b9faa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b9faa:	b538      	push	{r3, r4, r5, lr}
   b9fac:	4605      	mov	r5, r0
  return write(str);
   b9fae:	f7fc fa59 	bl	b6464 <_ZN5Print5writeEPKc>
   b9fb2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b9fb4:	4628      	mov	r0, r5
   b9fb6:	f7ff ffec 	bl	b9f92 <_ZN5Print7printlnEv>
  return n;
}
   b9fba:	4420      	add	r0, r4
   b9fbc:	bd38      	pop	{r3, r4, r5, pc}

000b9fbe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b9fbe:	b530      	push	{r4, r5, lr}
   b9fc0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b9fc2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b9fc4:	2a01      	cmp	r2, #1
  *str = '\0';
   b9fc6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b9fca:	bf98      	it	ls
   b9fcc:	220a      	movls	r2, #10
   b9fce:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b9fd0:	460d      	mov	r5, r1
   b9fd2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b9fd6:	fb01 5312 	mls	r3, r1, r2, r5
   b9fda:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9fde:	2b09      	cmp	r3, #9
   b9fe0:	bf94      	ite	ls
   b9fe2:	3330      	addls	r3, #48	; 0x30
   b9fe4:	3337      	addhi	r3, #55	; 0x37
   b9fe6:	b2db      	uxtb	r3, r3
  } while(n);
   b9fe8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9fea:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b9fee:	d9ef      	bls.n	b9fd0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b9ff0:	4621      	mov	r1, r4
   b9ff2:	f7fc fa37 	bl	b6464 <_ZN5Print5writeEPKc>
}
   b9ff6:	b00b      	add	sp, #44	; 0x2c
   b9ff8:	bd30      	pop	{r4, r5, pc}

000b9ffa <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b9ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9ffe:	b086      	sub	sp, #24
   ba000:	af00      	add	r7, sp, #0
   ba002:	4605      	mov	r5, r0
   ba004:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   ba006:	1d38      	adds	r0, r7, #4
   ba008:	2114      	movs	r1, #20
{
   ba00a:	4614      	mov	r4, r2
    va_copy(args2, args);
   ba00c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   ba00e:	f7fd fa31 	bl	b7474 <vsnprintf>

    if (n<bufsize)
   ba012:	2813      	cmp	r0, #19
   ba014:	d80e      	bhi.n	ba034 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   ba016:	1d39      	adds	r1, r7, #4
   ba018:	4628      	mov	r0, r5
   ba01a:	f7fc fa23 	bl	b6464 <_ZN5Print5writeEPKc>
   ba01e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   ba020:	b11e      	cbz	r6, ba02a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   ba022:	4628      	mov	r0, r5
   ba024:	f7ff ffb5 	bl	b9f92 <_ZN5Print7printlnEv>
   ba028:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   ba02a:	4620      	mov	r0, r4
   ba02c:	3718      	adds	r7, #24
   ba02e:	46bd      	mov	sp, r7
   ba030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   ba034:	f100 0308 	add.w	r3, r0, #8
   ba038:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   ba03c:	46e8      	mov	r8, sp
        char bigger[n+1];
   ba03e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   ba042:	4622      	mov	r2, r4
   ba044:	1c41      	adds	r1, r0, #1
   ba046:	683b      	ldr	r3, [r7, #0]
   ba048:	4668      	mov	r0, sp
   ba04a:	f7fd fa13 	bl	b7474 <vsnprintf>
  return write(str);
   ba04e:	4669      	mov	r1, sp
   ba050:	4628      	mov	r0, r5
   ba052:	f7fc fa07 	bl	b6464 <_ZN5Print5writeEPKc>
   ba056:	4604      	mov	r4, r0
   ba058:	46c5      	mov	sp, r8
   ba05a:	e7e1      	b.n	ba020 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000ba05c <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   ba05c:	b510      	push	{r4, lr}
   ba05e:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   ba060:	f7fc fee0 	bl	b6e24 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   ba064:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   ba066:	6823      	ldr	r3, [r4, #0]
   ba068:	4620      	mov	r0, r4
   ba06a:	695b      	ldr	r3, [r3, #20]
   ba06c:	4798      	blx	r3
    if (c >= 0) return c;
   ba06e:	2800      	cmp	r0, #0
   ba070:	da08      	bge.n	ba084 <_ZN6Stream9timedReadEv+0x28>
   ba072:	f7fc fed7 	bl	b6e24 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   ba076:	68e3      	ldr	r3, [r4, #12]
   ba078:	1ac0      	subs	r0, r0, r3
   ba07a:	68a3      	ldr	r3, [r4, #8]
   ba07c:	4298      	cmp	r0, r3
   ba07e:	d3f2      	bcc.n	ba066 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   ba080:	f04f 30ff 	mov.w	r0, #4294967295
}
   ba084:	bd10      	pop	{r4, pc}
	...

000ba088 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   ba088:	b570      	push	{r4, r5, r6, lr}
   ba08a:	460d      	mov	r5, r1
  String ret;
   ba08c:	4909      	ldr	r1, [pc, #36]	; (ba0b4 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   ba08e:	4604      	mov	r4, r0
   ba090:	4616      	mov	r6, r2
  String ret;
   ba092:	f7fd fb88 	bl	b77a6 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   ba096:	4628      	mov	r0, r5
   ba098:	f7ff ffe0 	bl	ba05c <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   ba09c:	2800      	cmp	r0, #0
   ba09e:	db06      	blt.n	ba0ae <_ZN6Stream15readStringUntilEc+0x26>
   ba0a0:	4286      	cmp	r6, r0
   ba0a2:	d004      	beq.n	ba0ae <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   ba0a4:	b2c1      	uxtb	r1, r0
   ba0a6:	4620      	mov	r0, r4
   ba0a8:	f7fd fbfc 	bl	b78a4 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   ba0ac:	e7f3      	b.n	ba096 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   ba0ae:	4620      	mov	r0, r4
   ba0b0:	bd70      	pop	{r4, r5, r6, pc}
   ba0b2:	bf00      	nop
   ba0b4:	000be225 	.word	0x000be225

000ba0b8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   ba0b8:	4b01      	ldr	r3, [pc, #4]	; (ba0c0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   ba0ba:	4a02      	ldr	r2, [pc, #8]	; (ba0c4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   ba0bc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   ba0be:	4770      	bx	lr
   ba0c0:	2003e674 	.word	0x2003e674
   ba0c4:	000be6ba 	.word	0x000be6ba

000ba0c8 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   ba0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   ba0cc:	4a15      	ldr	r2, [pc, #84]	; (ba124 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   ba0ce:	f8df 8060 	ldr.w	r8, [pc, #96]	; ba130 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   ba0d2:	e9d2 6300 	ldrd	r6, r3, [r2]
   ba0d6:	1980      	adds	r0, r0, r6
   ba0d8:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   ba0dc:	4b12      	ldr	r3, [pc, #72]	; (ba128 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   ba0de:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   ba0e2:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   ba0e6:	1986      	adds	r6, r0, r6
   ba0e8:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   ba0ec:	42bb      	cmp	r3, r7
   ba0ee:	bf08      	it	eq
   ba0f0:	42b2      	cmpeq	r2, r6
{
   ba0f2:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   ba0f4:	d013      	beq.n	ba11e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   ba0f6:	a903      	add	r1, sp, #12
   ba0f8:	4668      	mov	r0, sp
   ba0fa:	e9cd 6700 	strd	r6, r7, [sp]
   ba0fe:	f7fd f9e9 	bl	b74d4 <localtime_r>
	calendar_time.tm_year += 1900;
   ba102:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba104:	4d09      	ldr	r5, [pc, #36]	; (ba12c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   ba106:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba10a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   ba10c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba10e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   ba112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   ba116:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba11a:	6823      	ldr	r3, [r4, #0]
   ba11c:	602b      	str	r3, [r5, #0]
    }
}
   ba11e:	b00c      	add	sp, #48	; 0x30
   ba120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba124:	2003e6a8 	.word	0x2003e6a8
   ba128:	2003e6a0 	.word	0x2003e6a0
   ba12c:	2003e67c 	.word	0x2003e67c
   ba130:	2003e6b0 	.word	0x2003e6b0

000ba134 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   ba134:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   ba136:	2000      	movs	r0, #0
   ba138:	f7fd f95c 	bl	b73f4 <spark_sync_time_pending>
   ba13c:	b128      	cbz	r0, ba14a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   ba13e:	f7fd f941 	bl	b73c4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   ba142:	f080 0001 	eor.w	r0, r0, #1
   ba146:	b2c0      	uxtb	r0, r0
    }
   ba148:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   ba14a:	2001      	movs	r0, #1
   ba14c:	e7fc      	b.n	ba148 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000ba150 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   ba150:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   ba152:	f7ff ffb9 	bl	ba0c8 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   ba156:	4b02      	ldr	r3, [pc, #8]	; (ba160 <_ZN9TimeClass5monthEx+0x10>)
   ba158:	6918      	ldr	r0, [r3, #16]
}
   ba15a:	3001      	adds	r0, #1
   ba15c:	bd08      	pop	{r3, pc}
   ba15e:	bf00      	nop
   ba160:	2003e67c 	.word	0x2003e67c

000ba164 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   ba164:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   ba166:	2000      	movs	r0, #0
   ba168:	f7fc fe64 	bl	b6e34 <hal_rtc_time_is_valid>
    if (rtcstate)
   ba16c:	4604      	mov	r4, r0
   ba16e:	b9a0      	cbnz	r0, ba19a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   ba170:	f7fd f87c 	bl	b726c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   ba174:	2801      	cmp	r0, #1
   ba176:	d110      	bne.n	ba19a <_ZN9TimeClass7isValidEv+0x36>
   ba178:	4620      	mov	r0, r4
   ba17a:	f7fd f89f 	bl	b72bc <system_thread_get_state>
   ba17e:	b960      	cbnz	r0, ba19a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   ba180:	f7ff ffd8 	bl	ba134 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   ba184:	b910      	cbnz	r0, ba18c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   ba186:	f7fd f915 	bl	b73b4 <spark_process>
        while (_while() && !_condition()) {
   ba18a:	e7f9      	b.n	ba180 <_ZN9TimeClass7isValidEv+0x1c>
   ba18c:	f7ff ffd2 	bl	ba134 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   ba190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   ba194:	2000      	movs	r0, #0
   ba196:	f7fc be4d 	b.w	b6e34 <hal_rtc_time_is_valid>
}
   ba19a:	4620      	mov	r0, r4
   ba19c:	bd10      	pop	{r4, pc}

000ba19e <_ZN9TimeClass3nowEv>:
{
   ba19e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   ba1a0:	f7ff ffe0 	bl	ba164 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   ba1a4:	2210      	movs	r2, #16
   ba1a6:	2100      	movs	r1, #0
   ba1a8:	4668      	mov	r0, sp
   ba1aa:	f001 fdb4 	bl	bbd16 <memset>
    hal_rtc_get_time(&tv, nullptr);
   ba1ae:	2100      	movs	r1, #0
   ba1b0:	4668      	mov	r0, sp
   ba1b2:	f7fc fe47 	bl	b6e44 <hal_rtc_get_time>
}
   ba1b6:	9800      	ldr	r0, [sp, #0]
   ba1b8:	b005      	add	sp, #20
   ba1ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba1c0 <_ZN9TimeClass4hourEv>:
{
   ba1c0:	b508      	push	{r3, lr}
	return hour(now());
   ba1c2:	f7ff ffec 	bl	ba19e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   ba1c6:	17c1      	asrs	r1, r0, #31
   ba1c8:	f7ff ff7e 	bl	ba0c8 <_ZL22Refresh_UnixTime_Cachex>
}
   ba1cc:	4b01      	ldr	r3, [pc, #4]	; (ba1d4 <_ZN9TimeClass4hourEv+0x14>)
   ba1ce:	6898      	ldr	r0, [r3, #8]
   ba1d0:	bd08      	pop	{r3, pc}
   ba1d2:	bf00      	nop
   ba1d4:	2003e67c 	.word	0x2003e67c

000ba1d8 <_ZN9TimeClass6minuteEv>:
{
   ba1d8:	b508      	push	{r3, lr}
	return minute(now());
   ba1da:	f7ff ffe0 	bl	ba19e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   ba1de:	17c1      	asrs	r1, r0, #31
   ba1e0:	f7ff ff72 	bl	ba0c8 <_ZL22Refresh_UnixTime_Cachex>
}
   ba1e4:	4b01      	ldr	r3, [pc, #4]	; (ba1ec <_ZN9TimeClass6minuteEv+0x14>)
   ba1e6:	6858      	ldr	r0, [r3, #4]
   ba1e8:	bd08      	pop	{r3, pc}
   ba1ea:	bf00      	nop
   ba1ec:	2003e67c 	.word	0x2003e67c

000ba1f0 <_ZN9TimeClass6secondEv>:
{
   ba1f0:	b508      	push	{r3, lr}
	return second(now());
   ba1f2:	f7ff ffd4 	bl	ba19e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   ba1f6:	17c1      	asrs	r1, r0, #31
   ba1f8:	f7ff ff66 	bl	ba0c8 <_ZL22Refresh_UnixTime_Cachex>
}
   ba1fc:	4b01      	ldr	r3, [pc, #4]	; (ba204 <_ZN9TimeClass6secondEv+0x14>)
   ba1fe:	6818      	ldr	r0, [r3, #0]
   ba200:	bd08      	pop	{r3, pc}
   ba202:	bf00      	nop
   ba204:	2003e67c 	.word	0x2003e67c

000ba208 <_ZN9TimeClass3dayEv>:
{
   ba208:	b508      	push	{r3, lr}
	return day(now());
   ba20a:	f7ff ffc8 	bl	ba19e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   ba20e:	17c1      	asrs	r1, r0, #31
   ba210:	f7ff ff5a 	bl	ba0c8 <_ZL22Refresh_UnixTime_Cachex>
}
   ba214:	4b01      	ldr	r3, [pc, #4]	; (ba21c <_ZN9TimeClass3dayEv+0x14>)
   ba216:	68d8      	ldr	r0, [r3, #12]
   ba218:	bd08      	pop	{r3, pc}
   ba21a:	bf00      	nop
   ba21c:	2003e67c 	.word	0x2003e67c

000ba220 <_ZN9TimeClass5monthEv>:
{
   ba220:	b508      	push	{r3, lr}
	return month(now());
   ba222:	f7ff ffbc 	bl	ba19e <_ZN9TimeClass3nowEv>
}
   ba226:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   ba22a:	17c1      	asrs	r1, r0, #31
   ba22c:	f7ff bf90 	b.w	ba150 <_ZN9TimeClass5monthEx>

000ba230 <_ZN9TimeClass4yearEv>:
{
   ba230:	b508      	push	{r3, lr}
	return year(now());
   ba232:	f7ff ffb4 	bl	ba19e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   ba236:	17c1      	asrs	r1, r0, #31
   ba238:	f7ff ff46 	bl	ba0c8 <_ZL22Refresh_UnixTime_Cachex>
}
   ba23c:	4b01      	ldr	r3, [pc, #4]	; (ba244 <_ZN9TimeClass4yearEv+0x14>)
   ba23e:	6958      	ldr	r0, [r3, #20]
   ba240:	bd08      	pop	{r3, pc}
   ba242:	bf00      	nop
   ba244:	2003e67c 	.word	0x2003e67c

000ba248 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   ba248:	4b02      	ldr	r3, [pc, #8]	; (ba254 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   ba24a:	681a      	ldr	r2, [r3, #0]
   ba24c:	4b02      	ldr	r3, [pc, #8]	; (ba258 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   ba24e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   ba250:	4770      	bx	lr
   ba252:	bf00      	nop
   ba254:	2003db18 	.word	0x2003db18
   ba258:	2003e678 	.word	0x2003e678

000ba25c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   ba25c:	2100      	movs	r1, #0
   ba25e:	f7fd b815 	b.w	b728c <system_delay_ms>
	...

000ba264 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   ba264:	4b01      	ldr	r3, [pc, #4]	; (ba26c <_GLOBAL__sub_I_RGB+0x8>)
   ba266:	2200      	movs	r2, #0
   ba268:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   ba26a:	4770      	bx	lr
   ba26c:	2003e6b8 	.word	0x2003e6b8

000ba270 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   ba270:	4b01      	ldr	r3, [pc, #4]	; (ba278 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   ba272:	6018      	str	r0, [r3, #0]
    }, nullptr);
   ba274:	4770      	bx	lr
   ba276:	bf00      	nop
   ba278:	2003db1c 	.word	0x2003db1c

000ba27c <serialEventRun>:
{
   ba27c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   ba27e:	4b0b      	ldr	r3, [pc, #44]	; (ba2ac <serialEventRun+0x30>)
   ba280:	b143      	cbz	r3, ba294 <serialEventRun+0x18>
   ba282:	f000 fbff 	bl	baa84 <_Z16_fetch_usbserialv>
   ba286:	6803      	ldr	r3, [r0, #0]
   ba288:	691b      	ldr	r3, [r3, #16]
   ba28a:	4798      	blx	r3
   ba28c:	2800      	cmp	r0, #0
   ba28e:	dd01      	ble.n	ba294 <serialEventRun+0x18>
        serialEvent();
   ba290:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   ba294:	4b06      	ldr	r3, [pc, #24]	; (ba2b0 <serialEventRun+0x34>)
   ba296:	b143      	cbz	r3, ba2aa <serialEventRun+0x2e>
   ba298:	f000 fe72 	bl	baf80 <_Z22__fetch_global_Serial1v>
   ba29c:	6803      	ldr	r3, [r0, #0]
   ba29e:	691b      	ldr	r3, [r3, #16]
   ba2a0:	4798      	blx	r3
   ba2a2:	2800      	cmp	r0, #0
   ba2a4:	dd01      	ble.n	ba2aa <serialEventRun+0x2e>
        serialEvent1();
   ba2a6:	f3af 8000 	nop.w
}
   ba2aa:	bd08      	pop	{r3, pc}
	...

000ba2b4 <_post_loop>:
{
   ba2b4:	b508      	push	{r3, lr}
	serialEventRun();
   ba2b6:	f7ff ffe1 	bl	ba27c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   ba2ba:	f7fc fdb3 	bl	b6e24 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   ba2be:	4b01      	ldr	r3, [pc, #4]	; (ba2c4 <_post_loop+0x10>)
   ba2c0:	6018      	str	r0, [r3, #0]
}
   ba2c2:	bd08      	pop	{r3, pc}
   ba2c4:	2003e744 	.word	0x2003e744

000ba2c8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba2c8:	4805      	ldr	r0, [pc, #20]	; (ba2e0 <_Z33system_initialize_user_backup_ramv+0x18>)
   ba2ca:	4a06      	ldr	r2, [pc, #24]	; (ba2e4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   ba2cc:	4906      	ldr	r1, [pc, #24]	; (ba2e8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   ba2ce:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba2d0:	1a12      	subs	r2, r2, r0
   ba2d2:	f001 fcf8 	bl	bbcc6 <memcpy>
    __backup_sram_signature = signature;
   ba2d6:	4b05      	ldr	r3, [pc, #20]	; (ba2ec <_Z33system_initialize_user_backup_ramv+0x24>)
   ba2d8:	4a05      	ldr	r2, [pc, #20]	; (ba2f0 <_Z33system_initialize_user_backup_ramv+0x28>)
   ba2da:	601a      	str	r2, [r3, #0]
}
   ba2dc:	bd08      	pop	{r3, pc}
   ba2de:	bf00      	nop
   ba2e0:	2003f400 	.word	0x2003f400
   ba2e4:	2003f404 	.word	0x2003f404
   ba2e8:	000bed74 	.word	0x000bed74
   ba2ec:	2003f400 	.word	0x2003f400
   ba2f0:	9a271c1e 	.word	0x9a271c1e

000ba2f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   ba2f4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba2f6:	2300      	movs	r3, #0
   ba2f8:	9300      	str	r3, [sp, #0]
   ba2fa:	461a      	mov	r2, r3
   ba2fc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba300:	f7fc ffee 	bl	b72e0 <system_ctrl_set_result>
}
   ba304:	b003      	add	sp, #12
   ba306:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba30c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   ba30c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   ba30e:	8843      	ldrh	r3, [r0, #2]
   ba310:	2b0a      	cmp	r3, #10
   ba312:	d008      	beq.n	ba326 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   ba314:	2b50      	cmp	r3, #80	; 0x50
   ba316:	d10b      	bne.n	ba330 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   ba318:	4b09      	ldr	r3, [pc, #36]	; (ba340 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   ba31a:	681b      	ldr	r3, [r3, #0]
   ba31c:	b14b      	cbz	r3, ba332 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   ba31e:	b003      	add	sp, #12
   ba320:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   ba324:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   ba326:	f7ff ffe5 	bl	ba2f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   ba32a:	b003      	add	sp, #12
   ba32c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba330:	2300      	movs	r3, #0
   ba332:	9300      	str	r3, [sp, #0]
   ba334:	461a      	mov	r2, r3
   ba336:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba33a:	f7fc ffd1 	bl	b72e0 <system_ctrl_set_result>
}
   ba33e:	e7f4      	b.n	ba32a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   ba340:	2003e6cc 	.word	0x2003e6cc

000ba344 <module_user_init_hook>:
{
   ba344:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   ba346:	4812      	ldr	r0, [pc, #72]	; (ba390 <module_user_init_hook+0x4c>)
   ba348:	2100      	movs	r1, #0
   ba34a:	f7fd f8bb 	bl	b74c4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   ba34e:	4b11      	ldr	r3, [pc, #68]	; (ba394 <module_user_init_hook+0x50>)
   ba350:	681a      	ldr	r2, [r3, #0]
   ba352:	4b11      	ldr	r3, [pc, #68]	; (ba398 <module_user_init_hook+0x54>)
   ba354:	429a      	cmp	r2, r3
   ba356:	4b11      	ldr	r3, [pc, #68]	; (ba39c <module_user_init_hook+0x58>)
   ba358:	bf0c      	ite	eq
   ba35a:	2201      	moveq	r2, #1
   ba35c:	2200      	movne	r2, #0
   ba35e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   ba360:	d001      	beq.n	ba366 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   ba362:	f7ff ffb1 	bl	ba2c8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   ba366:	f7fc fd45 	bl	b6df4 <HAL_RNG_GetRandomNumber>
   ba36a:	4604      	mov	r4, r0
    srand(seed);
   ba36c:	f001 fcdc 	bl	bbd28 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   ba370:	4b0b      	ldr	r3, [pc, #44]	; (ba3a0 <module_user_init_hook+0x5c>)
   ba372:	b113      	cbz	r3, ba37a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   ba374:	4620      	mov	r0, r4
   ba376:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   ba37a:	2100      	movs	r1, #0
   ba37c:	4808      	ldr	r0, [pc, #32]	; (ba3a0 <module_user_init_hook+0x5c>)
   ba37e:	f7fd f841 	bl	b7404 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   ba382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   ba386:	4807      	ldr	r0, [pc, #28]	; (ba3a4 <module_user_init_hook+0x60>)
   ba388:	2100      	movs	r1, #0
   ba38a:	f7fc bf9f 	b.w	b72cc <system_ctrl_set_app_request_handler>
   ba38e:	bf00      	nop
   ba390:	000ba271 	.word	0x000ba271
   ba394:	2003f400 	.word	0x2003f400
   ba398:	9a271c1e 	.word	0x9a271c1e
   ba39c:	2003e6c8 	.word	0x2003e6c8
   ba3a0:	00000000 	.word	0x00000000
   ba3a4:	000ba30d 	.word	0x000ba30d

000ba3a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   ba3a8:	4770      	bx	lr

000ba3aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   ba3aa:	2000      	movs	r0, #0
   ba3ac:	4770      	bx	lr

000ba3ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   ba3ae:	b510      	push	{r4, lr}
   ba3b0:	2110      	movs	r1, #16
   ba3b2:	4604      	mov	r4, r0
   ba3b4:	f7f9 fe73 	bl	b409e <_ZdlPvj>
   ba3b8:	4620      	mov	r0, r4
   ba3ba:	bd10      	pop	{r4, pc}

000ba3bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   ba3bc:	b508      	push	{r3, lr}
      { delete this; }
   ba3be:	f7ff fff6 	bl	ba3ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   ba3c2:	bd08      	pop	{r3, pc}

000ba3c4 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   ba3c4:	b530      	push	{r4, r5, lr}
        type_(type) {
   ba3c6:	2200      	movs	r2, #0
   ba3c8:	f64f 749c 	movw	r4, #65436	; 0xff9c
   ba3cc:	6002      	str	r2, [r0, #0]
   ba3ce:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba3d0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   ba3d2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba3d4:	680c      	ldr	r4, [r1, #0]
   ba3d6:	8085      	strh	r5, [r0, #4]
   ba3d8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   ba3da:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   ba3dc:	bd30      	pop	{r4, r5, pc}

000ba3de <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   ba3de:	b510      	push	{r4, lr}
   ba3e0:	4604      	mov	r4, r0
    free((void*)msg_);
   ba3e2:	6800      	ldr	r0, [r0, #0]
   ba3e4:	f7fd f81e 	bl	b7424 <free>
}
   ba3e8:	4620      	mov	r0, r4
   ba3ea:	bd10      	pop	{r4, pc}

000ba3ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   ba3ec:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   ba3ee:	68c4      	ldr	r4, [r0, #12]
   ba3f0:	b1f4      	cbz	r4, ba430 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   ba3f2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   ba3f4:	2b02      	cmp	r3, #2
   ba3f6:	d103      	bne.n	ba400 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   ba3f8:	f104 000c 	add.w	r0, r4, #12
   ba3fc:	f7ff ffef 	bl	ba3de <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   ba400:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   ba402:	b135      	cbz	r5, ba412 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   ba404:	4628      	mov	r0, r5
   ba406:	f7f9 ff49 	bl	b429c <_ZNSt14_Function_baseD1Ev>
   ba40a:	2110      	movs	r1, #16
   ba40c:	4628      	mov	r0, r5
   ba40e:	f7f9 fe46 	bl	b409e <_ZdlPvj>
   ba412:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   ba414:	b135      	cbz	r5, ba424 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   ba416:	4628      	mov	r0, r5
   ba418:	f7f9 ff40 	bl	b429c <_ZNSt14_Function_baseD1Ev>
   ba41c:	2110      	movs	r1, #16
   ba41e:	4628      	mov	r0, r5
   ba420:	f7f9 fe3d 	bl	b409e <_ZdlPvj>
   ba424:	4620      	mov	r0, r4
   ba426:	2114      	movs	r1, #20
   ba428:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   ba42c:	f7f9 be37 	b.w	b409e <_ZdlPvj>
   ba430:	bd38      	pop	{r3, r4, r5, pc}

000ba432 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   ba432:	680b      	ldr	r3, [r1, #0]
   ba434:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   ba436:	684b      	ldr	r3, [r1, #4]
   ba438:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   ba43a:	b113      	cbz	r3, ba442 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   ba43c:	685a      	ldr	r2, [r3, #4]
   ba43e:	3201      	adds	r2, #1
   ba440:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   ba442:	4770      	bx	lr

000ba444 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   ba444:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba446:	4604      	mov	r4, r0
   ba448:	4668      	mov	r0, sp
   ba44a:	460d      	mov	r5, r1
   ba44c:	f7ff fff1 	bl	ba432 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   ba450:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   ba452:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   ba454:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   ba456:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   ba458:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   ba45a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   ba45c:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   ba45e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   ba460:	f7fe f8a5 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   ba464:	b135      	cbz	r5, ba474 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   ba466:	1d28      	adds	r0, r5, #4
   ba468:	f7fe f8a1 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba46c:	2108      	movs	r1, #8
   ba46e:	4628      	mov	r0, r5
   ba470:	f7f9 fe15 	bl	b409e <_ZdlPvj>
        return p;
    }
   ba474:	4620      	mov	r0, r4
   ba476:	b003      	add	sp, #12
   ba478:	bd30      	pop	{r4, r5, pc}

000ba47a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   ba47a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   ba47c:	b510      	push	{r4, lr}
      if (_M_empty())
   ba47e:	b90a      	cbnz	r2, ba484 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   ba480:	f000 fde3 	bl	bb04a <_ZSt25__throw_bad_function_callv>
    }
   ba484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba488:	68c3      	ldr	r3, [r0, #12]
   ba48a:	4718      	bx	r3

000ba48c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   ba48c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   ba48e:	6800      	ldr	r0, [r0, #0]
   ba490:	f100 0110 	add.w	r1, r0, #16
   ba494:	f7ff fff1 	bl	ba47a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   ba498:	bd08      	pop	{r3, pc}

000ba49a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   ba49a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   ba49c:	b510      	push	{r4, lr}
      if (_M_empty())
   ba49e:	b90a      	cbnz	r2, ba4a4 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   ba4a0:	f000 fdd3 	bl	bb04a <_ZSt25__throw_bad_function_callv>
    }
   ba4a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba4a8:	68c3      	ldr	r3, [r0, #12]
   ba4aa:	4718      	bx	r3

000ba4ac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   ba4ac:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   ba4ae:	6800      	ldr	r0, [r0, #0]
   ba4b0:	f100 0110 	add.w	r1, r0, #16
   ba4b4:	f7ff fff1 	bl	ba49a <_ZNKSt8functionIFvRKbEEclES1_>
      }
   ba4b8:	bd08      	pop	{r3, pc}
	...

000ba4bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   ba4bc:	b538      	push	{r3, r4, r5, lr}
   ba4be:	2300      	movs	r3, #0
   ba4c0:	4604      	mov	r4, r0
   ba4c2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   ba4c4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   ba4c6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   ba4c8:	f7f9 fde5 	bl	b4096 <_Znwj>
   ba4cc:	b128      	cbz	r0, ba4da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   ba4ce:	2301      	movs	r3, #1
   ba4d0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   ba4d4:	4b02      	ldr	r3, [pc, #8]	; (ba4e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   ba4d6:	6003      	str	r3, [r0, #0]
   ba4d8:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   ba4da:	6020      	str	r0, [r4, #0]
	}
   ba4dc:	4620      	mov	r0, r4
   ba4de:	bd38      	pop	{r3, r4, r5, pc}
   ba4e0:	000be6e4 	.word	0x000be6e4

000ba4e4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   ba4e4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   ba4e6:	2300      	movs	r3, #0
   ba4e8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   ba4ea:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   ba4ec:	4604      	mov	r4, r0
   ba4ee:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   ba4f0:	b12b      	cbz	r3, ba4fe <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   ba4f2:	2202      	movs	r2, #2
   ba4f4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   ba4f6:	68eb      	ldr	r3, [r5, #12]
   ba4f8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   ba4fa:	68ab      	ldr	r3, [r5, #8]
   ba4fc:	60a3      	str	r3, [r4, #8]
    }
   ba4fe:	4620      	mov	r0, r4
   ba500:	bd38      	pop	{r3, r4, r5, pc}
	...

000ba504 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   ba504:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba506:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   ba508:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   ba50a:	4668      	mov	r0, sp
   ba50c:	f7ff ff5a 	bl	ba3c4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   ba510:	f04f 0302 	mov.w	r3, #2
   ba514:	e8d4 2f4f 	ldrexb	r2, [r4]
   ba518:	2a00      	cmp	r2, #0
   ba51a:	d103      	bne.n	ba524 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   ba51c:	e8c4 3f41 	strexb	r1, r3, [r4]
   ba520:	2900      	cmp	r1, #0
   ba522:	d1f7      	bne.n	ba514 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   ba524:	d125      	bne.n	ba572 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   ba526:	f104 050c 	add.w	r5, r4, #12
   ba52a:	4669      	mov	r1, sp
   ba52c:	4628      	mov	r0, r5
   ba52e:	f7ff ff49 	bl	ba3c4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   ba532:	f3bf 8f5b 	dmb	ish
   ba536:	2301      	movs	r3, #1
   ba538:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   ba53a:	2000      	movs	r0, #0
   ba53c:	f104 0308 	add.w	r3, r4, #8
   ba540:	f3bf 8f5b 	dmb	ish
   ba544:	e853 6f00 	ldrex	r6, [r3]
   ba548:	e843 0200 	strex	r2, r0, [r3]
   ba54c:	2a00      	cmp	r2, #0
   ba54e:	d1f9      	bne.n	ba544 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   ba550:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   ba554:	b16e      	cbz	r6, ba572 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   ba556:	f7fc fea1 	bl	b729c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   ba55a:	b178      	cbz	r0, ba57c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   ba55c:	4629      	mov	r1, r5
   ba55e:	4630      	mov	r0, r6
   ba560:	f7ff ff8b 	bl	ba47a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   ba564:	4630      	mov	r0, r6
   ba566:	f7f9 fe99 	bl	b429c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   ba56a:	2110      	movs	r1, #16
   ba56c:	4630      	mov	r0, r6
   ba56e:	f7f9 fd96 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   ba572:	4668      	mov	r0, sp
   ba574:	f7ff ff33 	bl	ba3de <_ZN8particle5ErrorD1Ev>
    }
   ba578:	b009      	add	sp, #36	; 0x24
   ba57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   ba57c:	4631      	mov	r1, r6
   ba57e:	a802      	add	r0, sp, #8
   ba580:	f7ff ffb0 	bl	ba4e4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   ba584:	68e0      	ldr	r0, [r4, #12]
   ba586:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   ba58a:	b108      	cbz	r0, ba590 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   ba58c:	f001 fc1c 	bl	bbdc8 <strdup>
        type_(type) {
   ba590:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   ba592:	2010      	movs	r0, #16
   ba594:	f8ad 501c 	strh.w	r5, [sp, #28]
   ba598:	f7f9 fd7d 	bl	b4096 <_Znwj>
   ba59c:	4605      	mov	r5, r0
   ba59e:	b1e8      	cbz	r0, ba5dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   ba5a0:	2700      	movs	r7, #0
   ba5a2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba5a4:	2018      	movs	r0, #24
   ba5a6:	f7f9 fd76 	bl	b4096 <_Znwj>
   ba5aa:	4604      	mov	r4, r0
   ba5ac:	b188      	cbz	r0, ba5d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   ba5ae:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   ba5b0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   ba5b2:	a802      	add	r0, sp, #8
   ba5b4:	f7fe fed4 	bl	b9360 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba5b8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   ba5ba:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba5bc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba5be:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   ba5c0:	9204      	str	r2, [sp, #16]
   ba5c2:	a906      	add	r1, sp, #24
   ba5c4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba5c6:	60e3      	str	r3, [r4, #12]
   ba5c8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   ba5cc:	9205      	str	r2, [sp, #20]
   ba5ce:	f7ff fef9 	bl	ba3c4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   ba5d2:	4b08      	ldr	r3, [pc, #32]	; (ba5f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   ba5d4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   ba5d6:	4b08      	ldr	r3, [pc, #32]	; (ba5f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba5d8:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   ba5da:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   ba5dc:	a806      	add	r0, sp, #24
   ba5de:	f7ff fefe 	bl	ba3de <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   ba5e2:	a802      	add	r0, sp, #8
   ba5e4:	f7f9 fe5a 	bl	b429c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   ba5e8:	2200      	movs	r2, #0
   ba5ea:	4629      	mov	r1, r5
   ba5ec:	4803      	ldr	r0, [pc, #12]	; (ba5fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   ba5ee:	f7fc fe5d 	bl	b72ac <application_thread_invoke>
   ba5f2:	e7b7      	b.n	ba564 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   ba5f4:	000ba48d 	.word	0x000ba48d
   ba5f8:	000ba711 	.word	0x000ba711
   ba5fc:	000bac1b 	.word	0x000bac1b

000ba600 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   ba600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba604:	b08b      	sub	sp, #44	; 0x2c
   ba606:	4605      	mov	r5, r0
   ba608:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   ba60c:	460f      	mov	r7, r1
   ba60e:	4690      	mov	r8, r2
   ba610:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   ba612:	f7fc fed7 	bl	b73c4 <spark_cloud_flag_connected>
   ba616:	ae07      	add	r6, sp, #28
    if (!connected()) {
   ba618:	4683      	mov	fp, r0
   ba61a:	bb38      	cbnz	r0, ba66c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   ba61c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   ba620:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   ba622:	a905      	add	r1, sp, #20
   ba624:	4630      	mov	r0, r6
   ba626:	f8ad 3018 	strh.w	r3, [sp, #24]
   ba62a:	f7ff fecb 	bl	ba3c4 <_ZN8particle5ErrorC1EOS0_>
   ba62e:	2014      	movs	r0, #20
   ba630:	f7f9 fd31 	bl	b4096 <_Znwj>
   ba634:	4604      	mov	r4, r0
   ba636:	b148      	cbz	r0, ba64c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   ba638:	2302      	movs	r3, #2
   ba63a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   ba63c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   ba63e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   ba642:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   ba644:	4631      	mov	r1, r6
   ba646:	300c      	adds	r0, #12
   ba648:	f7ff febc 	bl	ba3c4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   ba64c:	4628      	mov	r0, r5
	: __shared_count(__p)
   ba64e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   ba650:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   ba654:	f7ff ff32 	bl	ba4bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   ba658:	4630      	mov	r0, r6
   ba65a:	f7ff fec0 	bl	ba3de <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   ba65e:	a805      	add	r0, sp, #20
   ba660:	f7ff febd 	bl	ba3de <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   ba664:	4628      	mov	r0, r5
   ba666:	b00b      	add	sp, #44	; 0x2c
   ba668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   ba66c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   ba66e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   ba670:	2014      	movs	r0, #20
   ba672:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   ba676:	9307      	str	r3, [sp, #28]
   ba678:	f7f9 fd0d 	bl	b4096 <_Znwj>
   ba67c:	4601      	mov	r1, r0
   ba67e:	b118      	cbz	r0, ba688 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   ba680:	e9c0 4401 	strd	r4, r4, [r0, #4]
   ba684:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   ba686:	7044      	strb	r4, [r0, #1]
   ba688:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   ba68a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   ba68c:	f7ff ff16 	bl	ba4bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   ba690:	4b1e      	ldr	r3, [pc, #120]	; (ba70c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   ba692:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   ba694:	2008      	movs	r0, #8
   ba696:	f7f9 fcfe 	bl	b4096 <_Znwj>
   ba69a:	4604      	mov	r4, r0
   ba69c:	b110      	cbz	r0, ba6a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   ba69e:	a903      	add	r1, sp, #12
   ba6a0:	f7ff fec7 	bl	ba432 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   ba6a4:	9600      	str	r6, [sp, #0]
   ba6a6:	fa5f f38a 	uxtb.w	r3, sl
   ba6aa:	464a      	mov	r2, r9
   ba6ac:	4641      	mov	r1, r8
   ba6ae:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   ba6b0:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   ba6b2:	f7fc fe8f 	bl	b73d4 <spark_send_event>
   ba6b6:	b9b8      	cbnz	r0, ba6e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   ba6b8:	9b03      	ldr	r3, [sp, #12]
   ba6ba:	785b      	ldrb	r3, [r3, #1]
   ba6bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   ba6c0:	b993      	cbnz	r3, ba6e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   ba6c2:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   ba6c6:	a905      	add	r1, sp, #20
   ba6c8:	a803      	add	r0, sp, #12
   ba6ca:	9205      	str	r2, [sp, #20]
   ba6cc:	f8ad 3018 	strh.w	r3, [sp, #24]
   ba6d0:	f7ff ff18 	bl	ba504 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   ba6d4:	a805      	add	r0, sp, #20
   ba6d6:	f7ff fe82 	bl	ba3de <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   ba6da:	a805      	add	r0, sp, #20
   ba6dc:	9909      	ldr	r1, [sp, #36]	; 0x24
   ba6de:	f7ff feb1 	bl	ba444 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   ba6e2:	a806      	add	r0, sp, #24
   ba6e4:	f7fd ff63 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba6e8:	a903      	add	r1, sp, #12
   ba6ea:	a805      	add	r0, sp, #20
   ba6ec:	f7ff fea1 	bl	ba432 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   ba6f0:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   ba6f2:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   ba6f4:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   ba6f6:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   ba6f8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   ba6fa:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   ba6fc:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   ba6fe:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   ba700:	f7fd ff55 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba704:	a804      	add	r0, sp, #16
   ba706:	f7fd ff52 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   ba70a:	e7ab      	b.n	ba664 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   ba70c:	000ba78d 	.word	0x000ba78d

000ba710 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   ba710:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   ba712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba714:	4605      	mov	r5, r0
	switch (__op)
   ba716:	d103      	bne.n	ba720 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   ba718:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   ba71a:	6003      	str	r3, [r0, #0]
      }
   ba71c:	2000      	movs	r0, #0
   ba71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   ba720:	2a02      	cmp	r2, #2
   ba722:	d010      	beq.n	ba746 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   ba724:	2a03      	cmp	r2, #3
   ba726:	d1f9      	bne.n	ba71c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   ba728:	6804      	ldr	r4, [r0, #0]
   ba72a:	2c00      	cmp	r4, #0
   ba72c:	d0f6      	beq.n	ba71c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   ba72e:	f104 0010 	add.w	r0, r4, #16
   ba732:	f7ff fe54 	bl	ba3de <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   ba736:	4620      	mov	r0, r4
   ba738:	f7f9 fdb0 	bl	b429c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   ba73c:	2118      	movs	r1, #24
   ba73e:	4620      	mov	r0, r4
   ba740:	f7f9 fcad 	bl	b409e <_ZdlPvj>
   ba744:	e7ea      	b.n	ba71c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   ba746:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   ba748:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   ba74a:	f7f9 fca4 	bl	b4096 <_Znwj>
   ba74e:	4604      	mov	r4, r0
   ba750:	b150      	cbz	r0, ba768 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   ba752:	4631      	mov	r1, r6
   ba754:	f7ff fec6 	bl	ba4e4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   ba758:	6930      	ldr	r0, [r6, #16]
   ba75a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   ba75e:	b108      	cbz	r0, ba764 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   ba760:	f001 fb32 	bl	bbdc8 <strdup>
        type_(type) {
   ba764:	6120      	str	r0, [r4, #16]
   ba766:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   ba768:	602c      	str	r4, [r5, #0]
	}
   ba76a:	e7d7      	b.n	ba71c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000ba76c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   ba76c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   ba76e:	2300      	movs	r3, #0
   ba770:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   ba772:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   ba774:	4604      	mov	r4, r0
   ba776:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   ba778:	b12b      	cbz	r3, ba786 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   ba77a:	2202      	movs	r2, #2
   ba77c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   ba77e:	68eb      	ldr	r3, [r5, #12]
   ba780:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   ba782:	68ab      	ldr	r3, [r5, #8]
   ba784:	60a3      	str	r3, [r4, #8]
    }
   ba786:	4620      	mov	r0, r4
   ba788:	bd38      	pop	{r3, r4, r5, pc}
	...

000ba78c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   ba78c:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba78e:	b089      	sub	sp, #36	; 0x24
   ba790:	4604      	mov	r4, r0
   ba792:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   ba794:	a801      	add	r0, sp, #4
   ba796:	4611      	mov	r1, r2
   ba798:	f7ff fe54 	bl	ba444 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   ba79c:	b1a4      	cbz	r4, ba7c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   ba79e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   ba7a0:	b11d      	cbz	r5, ba7aa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   ba7a2:	4628      	mov	r0, r5
   ba7a4:	f001 fb10 	bl	bbdc8 <strdup>
   ba7a8:	4605      	mov	r5, r0
   ba7aa:	a801      	add	r0, sp, #4
   ba7ac:	a903      	add	r1, sp, #12
        type_(type) {
   ba7ae:	9503      	str	r5, [sp, #12]
   ba7b0:	f8ad 4010 	strh.w	r4, [sp, #16]
   ba7b4:	f7ff fea6 	bl	ba504 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   ba7b8:	a803      	add	r0, sp, #12
   ba7ba:	f7ff fe10 	bl	ba3de <_ZN8particle5ErrorD1Ev>
   ba7be:	a802      	add	r0, sp, #8
   ba7c0:	f7fd fef5 	bl	b85ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba7c4:	b009      	add	sp, #36	; 0x24
   ba7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   ba7c8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   ba7ca:	2301      	movs	r3, #1
   ba7cc:	e8d5 2f4f 	ldrexb	r2, [r5]
   ba7d0:	2a00      	cmp	r2, #0
   ba7d2:	d103      	bne.n	ba7dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   ba7d4:	e8c5 3f41 	strexb	r1, r3, [r5]
   ba7d8:	2900      	cmp	r1, #0
   ba7da:	d1f7      	bne.n	ba7cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   ba7dc:	d1ef      	bne.n	ba7be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   ba7de:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   ba7e0:	f3bf 8f5b 	dmb	ish
   ba7e4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   ba7e6:	1d2b      	adds	r3, r5, #4
   ba7e8:	f3bf 8f5b 	dmb	ish
   ba7ec:	e853 6f00 	ldrex	r6, [r3]
   ba7f0:	e843 4200 	strex	r2, r4, [r3]
   ba7f4:	2a00      	cmp	r2, #0
   ba7f6:	d1f9      	bne.n	ba7ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   ba7f8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   ba7fc:	2e00      	cmp	r6, #0
   ba7fe:	d0de      	beq.n	ba7be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   ba800:	4620      	mov	r0, r4
   ba802:	f7fc fd4b 	bl	b729c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   ba806:	4607      	mov	r7, r0
   ba808:	b160      	cbz	r0, ba824 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   ba80a:	f105 010c 	add.w	r1, r5, #12
   ba80e:	4630      	mov	r0, r6
   ba810:	f7ff fe43 	bl	ba49a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   ba814:	4630      	mov	r0, r6
   ba816:	f7f9 fd41 	bl	b429c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   ba81a:	2110      	movs	r1, #16
   ba81c:	4630      	mov	r0, r6
   ba81e:	f7f9 fc3e 	bl	b409e <_ZdlPvj>
   ba822:	e7cc      	b.n	ba7be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   ba824:	4631      	mov	r1, r6
   ba826:	a803      	add	r0, sp, #12
   ba828:	f7ff ffa0 	bl	ba76c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   ba82c:	7b2b      	ldrb	r3, [r5, #12]
   ba82e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   ba832:	2010      	movs	r0, #16
   ba834:	f7f9 fc2f 	bl	b4096 <_Znwj>
   ba838:	4605      	mov	r5, r0
   ba83a:	b1d0      	cbz	r0, ba872 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   ba83c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba83e:	2014      	movs	r0, #20
   ba840:	f7f9 fc29 	bl	b4096 <_Znwj>
   ba844:	4604      	mov	r4, r0
   ba846:	b178      	cbz	r0, ba868 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   ba848:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   ba84a:	4601      	mov	r1, r0
   ba84c:	a803      	add	r0, sp, #12
   ba84e:	f7fe fd87 	bl	b9360 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba852:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   ba854:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba856:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba858:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   ba85a:	9205      	str	r2, [sp, #20]
   ba85c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba85e:	60e3      	str	r3, [r4, #12]
   ba860:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   ba864:	9206      	str	r2, [sp, #24]
   ba866:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   ba868:	4b06      	ldr	r3, [pc, #24]	; (ba884 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   ba86a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   ba86c:	4b06      	ldr	r3, [pc, #24]	; (ba888 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba86e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   ba870:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   ba872:	a803      	add	r0, sp, #12
   ba874:	f7f9 fd12 	bl	b429c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   ba878:	2200      	movs	r2, #0
   ba87a:	4629      	mov	r1, r5
   ba87c:	4803      	ldr	r0, [pc, #12]	; (ba88c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   ba87e:	f7fc fd15 	bl	b72ac <application_thread_invoke>
   ba882:	e7c7      	b.n	ba814 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   ba884:	000ba4ad 	.word	0x000ba4ad
   ba888:	000ba891 	.word	0x000ba891
   ba88c:	000bac1b 	.word	0x000bac1b

000ba890 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   ba890:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   ba892:	b570      	push	{r4, r5, r6, lr}
   ba894:	4604      	mov	r4, r0
	switch (__op)
   ba896:	d103      	bne.n	ba8a0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   ba898:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   ba89a:	6003      	str	r3, [r0, #0]
      }
   ba89c:	2000      	movs	r0, #0
   ba89e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   ba8a0:	2a02      	cmp	r2, #2
   ba8a2:	d00c      	beq.n	ba8be <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   ba8a4:	2a03      	cmp	r2, #3
   ba8a6:	d1f9      	bne.n	ba89c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   ba8a8:	6804      	ldr	r4, [r0, #0]
   ba8aa:	2c00      	cmp	r4, #0
   ba8ac:	d0f6      	beq.n	ba89c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   ba8ae:	4620      	mov	r0, r4
   ba8b0:	f7f9 fcf4 	bl	b429c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   ba8b4:	2114      	movs	r1, #20
   ba8b6:	4620      	mov	r0, r4
   ba8b8:	f7f9 fbf1 	bl	b409e <_ZdlPvj>
   ba8bc:	e7ee      	b.n	ba89c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   ba8be:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   ba8c0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   ba8c2:	f7f9 fbe8 	bl	b4096 <_Znwj>
   ba8c6:	4605      	mov	r5, r0
   ba8c8:	b120      	cbz	r0, ba8d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   ba8ca:	4631      	mov	r1, r6
   ba8cc:	f7ff ff4e 	bl	ba76c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   ba8d0:	7c33      	ldrb	r3, [r6, #16]
   ba8d2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   ba8d4:	6025      	str	r5, [r4, #0]
	}
   ba8d6:	e7e1      	b.n	ba89c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000ba8d8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   ba8d8:	4770      	bx	lr

000ba8da <_ZN9IPAddressD0Ev>:
   ba8da:	b510      	push	{r4, lr}
   ba8dc:	2118      	movs	r1, #24
   ba8de:	4604      	mov	r4, r0
   ba8e0:	f7f9 fbdd 	bl	b409e <_ZdlPvj>
   ba8e4:	4620      	mov	r0, r4
   ba8e6:	bd10      	pop	{r4, pc}

000ba8e8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   ba8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   ba8ea:	7d03      	ldrb	r3, [r0, #20]
   ba8ec:	2b06      	cmp	r3, #6
{
   ba8ee:	b08d      	sub	sp, #52	; 0x34
   ba8f0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba8f2:	f100 0704 	add.w	r7, r0, #4
   ba8f6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   ba8fa:	d012      	beq.n	ba922 <_ZNK9IPAddress7printToER5Print+0x3a>
   ba8fc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   ba900:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   ba904:	220a      	movs	r2, #10
   ba906:	4630      	mov	r0, r6
   ba908:	f7ff fb59 	bl	b9fbe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   ba90c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   ba90e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   ba910:	d019      	beq.n	ba946 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   ba912:	2c00      	cmp	r4, #0
   ba914:	d0f4      	beq.n	ba900 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   ba916:	212e      	movs	r1, #46	; 0x2e
   ba918:	4630      	mov	r0, r6
   ba91a:	f7ff fb37 	bl	b9f8c <_ZN5Print5printEc>
   ba91e:	4404      	add	r4, r0
   ba920:	e7ee      	b.n	ba900 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba922:	232f      	movs	r3, #47	; 0x2f
   ba924:	466a      	mov	r2, sp
   ba926:	4639      	mov	r1, r7
   ba928:	200a      	movs	r0, #10
		buf[0] = 0;
   ba92a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba92e:	f7fc fb7d 	bl	b702c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   ba932:	4668      	mov	r0, sp
   ba934:	f001 fa65 	bl	bbe02 <strlen>
   ba938:	6833      	ldr	r3, [r6, #0]
   ba93a:	4602      	mov	r2, r0
   ba93c:	68db      	ldr	r3, [r3, #12]
   ba93e:	4669      	mov	r1, sp
   ba940:	4630      	mov	r0, r6
   ba942:	4798      	blx	r3
   ba944:	4604      	mov	r4, r0
    }
    return n;
}
   ba946:	4620      	mov	r0, r4
   ba948:	b00d      	add	sp, #52	; 0x34
   ba94a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba94c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   ba94c:	b510      	push	{r4, lr}
   ba94e:	4b05      	ldr	r3, [pc, #20]	; (ba964 <_ZN9IPAddressC1Ev+0x18>)
   ba950:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   ba952:	2211      	movs	r2, #17
   ba954:	f840 3b04 	str.w	r3, [r0], #4
   ba958:	2100      	movs	r1, #0
   ba95a:	f001 f9dc 	bl	bbd16 <memset>
}
   ba95e:	4620      	mov	r0, r4
   ba960:	bd10      	pop	{r4, pc}
   ba962:	bf00      	nop
   ba964:	000be700 	.word	0x000be700

000ba968 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   ba968:	4603      	mov	r3, r0
   ba96a:	4a07      	ldr	r2, [pc, #28]	; (ba988 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   ba96c:	b510      	push	{r4, lr}
   ba96e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   ba972:	f101 0210 	add.w	r2, r1, #16
   ba976:	f851 4b04 	ldr.w	r4, [r1], #4
   ba97a:	f843 4b04 	str.w	r4, [r3], #4
   ba97e:	4291      	cmp	r1, r2
   ba980:	d1f9      	bne.n	ba976 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   ba982:	780a      	ldrb	r2, [r1, #0]
   ba984:	701a      	strb	r2, [r3, #0]
}
   ba986:	bd10      	pop	{r4, pc}
   ba988:	000be700 	.word	0x000be700

000ba98c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   ba98c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   ba98e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   ba992:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   ba996:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   ba99a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   ba99e:	2304      	movs	r3, #4
   ba9a0:	6041      	str	r1, [r0, #4]
   ba9a2:	7503      	strb	r3, [r0, #20]
}
   ba9a4:	bd10      	pop	{r4, pc}
	...

000ba9a8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   ba9a8:	b507      	push	{r0, r1, r2, lr}
   ba9aa:	4b06      	ldr	r3, [pc, #24]	; (ba9c4 <_ZN9IPAddressC1EPKh+0x1c>)
   ba9ac:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   ba9ae:	78cb      	ldrb	r3, [r1, #3]
   ba9b0:	9300      	str	r3, [sp, #0]
   ba9b2:	788b      	ldrb	r3, [r1, #2]
   ba9b4:	784a      	ldrb	r2, [r1, #1]
   ba9b6:	7809      	ldrb	r1, [r1, #0]
   ba9b8:	f7ff ffe8 	bl	ba98c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   ba9bc:	b003      	add	sp, #12
   ba9be:	f85d fb04 	ldr.w	pc, [sp], #4
   ba9c2:	bf00      	nop
   ba9c4:	000be700 	.word	0x000be700

000ba9c8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba9c8:	7441      	strb	r1, [r0, #17]
}
   ba9ca:	4770      	bx	lr

000ba9cc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba9cc:	4770      	bx	lr

000ba9ce <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   ba9ce:	4770      	bx	lr

000ba9d0 <_ZN9USBSerial4readEv>:
{
   ba9d0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   ba9d2:	2100      	movs	r1, #0
   ba9d4:	7c00      	ldrb	r0, [r0, #16]
   ba9d6:	f7fc fc21 	bl	b721c <HAL_USB_USART_Receive_Data>
}
   ba9da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba9de:	bd08      	pop	{r3, pc}

000ba9e0 <_ZN9USBSerial4peekEv>:
{
   ba9e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   ba9e2:	2101      	movs	r1, #1
   ba9e4:	7c00      	ldrb	r0, [r0, #16]
   ba9e6:	f7fc fc19 	bl	b721c <HAL_USB_USART_Receive_Data>
}
   ba9ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba9ee:	bd08      	pop	{r3, pc}

000ba9f0 <_ZN9USBSerial17availableForWriteEv>:
{
   ba9f0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   ba9f2:	7c00      	ldrb	r0, [r0, #16]
   ba9f4:	f7fc fc0a 	bl	b720c <HAL_USB_USART_Available_Data_For_Write>
}
   ba9f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba9fc:	bd08      	pop	{r3, pc}

000ba9fe <_ZN9USBSerial9availableEv>:
{
   ba9fe:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   baa00:	7c00      	ldrb	r0, [r0, #16]
   baa02:	f7fc fbfb 	bl	b71fc <HAL_USB_USART_Available_Data>
}
   baa06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   baa0a:	bd08      	pop	{r3, pc}

000baa0c <_ZN9USBSerial5writeEh>:
{
   baa0c:	b513      	push	{r0, r1, r4, lr}
   baa0e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   baa10:	7c00      	ldrb	r0, [r0, #16]
{
   baa12:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   baa14:	f7fc fbfa 	bl	b720c <HAL_USB_USART_Available_Data_For_Write>
   baa18:	2800      	cmp	r0, #0
   baa1a:	9901      	ldr	r1, [sp, #4]
   baa1c:	dc01      	bgt.n	baa22 <_ZN9USBSerial5writeEh+0x16>
   baa1e:	7c60      	ldrb	r0, [r4, #17]
   baa20:	b120      	cbz	r0, baa2c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   baa22:	7c20      	ldrb	r0, [r4, #16]
   baa24:	f7fc fc02 	bl	b722c <HAL_USB_USART_Send_Data>
   baa28:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   baa2c:	b002      	add	sp, #8
   baa2e:	bd10      	pop	{r4, pc}

000baa30 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   baa30:	7c00      	ldrb	r0, [r0, #16]
   baa32:	f7fc bc03 	b.w	b723c <HAL_USB_USART_Flush_Data>

000baa36 <_ZN9USBSerialD0Ev>:
   baa36:	b510      	push	{r4, lr}
   baa38:	2114      	movs	r1, #20
   baa3a:	4604      	mov	r4, r0
   baa3c:	f7f9 fb2f 	bl	b409e <_ZdlPvj>
   baa40:	4620      	mov	r0, r4
   baa42:	bd10      	pop	{r4, pc}

000baa44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   baa44:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   baa46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   baa4a:	4604      	mov	r4, r0
   baa4c:	4608      	mov	r0, r1
   baa4e:	2100      	movs	r1, #0
   baa50:	e9c4 1301 	strd	r1, r3, [r4, #4]
   baa54:	4b04      	ldr	r3, [pc, #16]	; (baa68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   baa56:	6023      	str	r3, [r4, #0]
  _blocking = true;
   baa58:	2301      	movs	r3, #1
  _serial = serial;
   baa5a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   baa5c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   baa5e:	4611      	mov	r1, r2
   baa60:	f7fc fbbc 	bl	b71dc <HAL_USB_USART_Init>
}
   baa64:	4620      	mov	r0, r4
   baa66:	bd10      	pop	{r4, pc}
   baa68:	000be714 	.word	0x000be714

000baa6c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   baa6c:	7c00      	ldrb	r0, [r0, #16]
   baa6e:	2200      	movs	r2, #0
   baa70:	f7fc bbbc 	b.w	b71ec <HAL_USB_USART_Begin>

000baa74 <_Z19acquireSerialBufferv>:
{
   baa74:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   baa76:	2214      	movs	r2, #20
{
   baa78:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   baa7a:	2100      	movs	r1, #0
   baa7c:	f001 f94b 	bl	bbd16 <memset>
}
   baa80:	4620      	mov	r0, r4
   baa82:	bd10      	pop	{r4, pc}

000baa84 <_Z16_fetch_usbserialv>:
{
   baa84:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   baa86:	4c0f      	ldr	r4, [pc, #60]	; (baac4 <_Z16_fetch_usbserialv+0x40>)
{
   baa88:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   baa8a:	a803      	add	r0, sp, #12
   baa8c:	f7ff fff2 	bl	baa74 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   baa90:	7821      	ldrb	r1, [r4, #0]
   baa92:	f3bf 8f5b 	dmb	ish
   baa96:	f011 0101 	ands.w	r1, r1, #1
   baa9a:	d10f      	bne.n	baabc <_Z16_fetch_usbserialv+0x38>
   baa9c:	4620      	mov	r0, r4
   baa9e:	9101      	str	r1, [sp, #4]
   baaa0:	f7f9 faff 	bl	b40a2 <__cxa_guard_acquire>
   baaa4:	9901      	ldr	r1, [sp, #4]
   baaa6:	b148      	cbz	r0, baabc <_Z16_fetch_usbserialv+0x38>
   baaa8:	aa03      	add	r2, sp, #12
   baaaa:	4807      	ldr	r0, [pc, #28]	; (baac8 <_Z16_fetch_usbserialv+0x44>)
   baaac:	f7ff ffca 	bl	baa44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   baab0:	4620      	mov	r0, r4
   baab2:	f7f9 fafb 	bl	b40ac <__cxa_guard_release>
   baab6:	4805      	ldr	r0, [pc, #20]	; (baacc <_Z16_fetch_usbserialv+0x48>)
   baab8:	f001 f8e8 	bl	bbc8c <atexit>
	return _usbserial;
}
   baabc:	4802      	ldr	r0, [pc, #8]	; (baac8 <_Z16_fetch_usbserialv+0x44>)
   baabe:	b008      	add	sp, #32
   baac0:	bd10      	pop	{r4, pc}
   baac2:	bf00      	nop
   baac4:	2003e6d0 	.word	0x2003e6d0
   baac8:	2003e6d4 	.word	0x2003e6d4
   baacc:	000ba9cd 	.word	0x000ba9cd

000baad0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   baad0:	2200      	movs	r2, #0
   baad2:	6840      	ldr	r0, [r0, #4]
   baad4:	4611      	mov	r1, r2
   baad6:	f7fc bc25 	b.w	b7324 <network_ready>

000baada <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   baada:	2200      	movs	r2, #0
   baadc:	6840      	ldr	r0, [r0, #4]
   baade:	4611      	mov	r1, r2
   baae0:	f7fc bc40 	b.w	b7364 <network_listening>

000baae4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   baae4:	2200      	movs	r2, #0
   baae6:	6840      	ldr	r0, [r0, #4]
   baae8:	4611      	mov	r1, r2
   baaea:	f7fc bc4b 	b.w	b7384 <network_get_listen_timeout>

000baaee <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   baaee:	6840      	ldr	r0, [r0, #4]
   baaf0:	2200      	movs	r2, #0
   baaf2:	f7fc bc3f 	b.w	b7374 <network_set_listen_timeout>

000baaf6 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   baaf6:	6840      	ldr	r0, [r0, #4]
   baaf8:	2200      	movs	r2, #0
   baafa:	f081 0101 	eor.w	r1, r1, #1
   baafe:	f7fc bc29 	b.w	b7354 <network_listen>

000bab02 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bab02:	2300      	movs	r3, #0
   bab04:	6840      	ldr	r0, [r0, #4]
   bab06:	461a      	mov	r2, r3
   bab08:	4619      	mov	r1, r3
   bab0a:	f7fc bc1b 	b.w	b7344 <network_off>

000bab0e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bab0e:	2300      	movs	r3, #0
   bab10:	6840      	ldr	r0, [r0, #4]
   bab12:	461a      	mov	r2, r3
   bab14:	4619      	mov	r1, r3
   bab16:	f7fc bc0d 	b.w	b7334 <network_on>

000bab1a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bab1a:	2200      	movs	r2, #0
   bab1c:	6840      	ldr	r0, [r0, #4]
   bab1e:	4611      	mov	r1, r2
   bab20:	f7fc bbf0 	b.w	b7304 <network_connecting>

000bab24 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bab24:	6840      	ldr	r0, [r0, #4]
   bab26:	2200      	movs	r2, #0
   bab28:	2102      	movs	r1, #2
   bab2a:	f7fc bbf3 	b.w	b7314 <network_disconnect>

000bab2e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bab2e:	2300      	movs	r3, #0
   bab30:	6840      	ldr	r0, [r0, #4]
   bab32:	461a      	mov	r2, r3
   bab34:	f7fc bbde 	b.w	b72f4 <network_connect>

000bab38 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bab38:	4b08      	ldr	r3, [pc, #32]	; (bab5c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bab3a:	b510      	push	{r4, lr}
   bab3c:	2428      	movs	r4, #40	; 0x28
   bab3e:	4622      	mov	r2, r4
   bab40:	4618      	mov	r0, r3
   bab42:	2100      	movs	r1, #0
   bab44:	f001 f8e7 	bl	bbd16 <memset>
   bab48:	4b05      	ldr	r3, [pc, #20]	; (bab60 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bab4a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bab4c:	f04f 32ff 	mov.w	r2, #4294967295
   bab50:	6042      	str	r2, [r0, #4]
   bab52:	2204      	movs	r2, #4
   bab54:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bab56:	4a03      	ldr	r2, [pc, #12]	; (bab64 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bab58:	601a      	str	r2, [r3, #0]
   bab5a:	bd10      	pop	{r4, pc}
   bab5c:	2003e6f0 	.word	0x2003e6f0
   bab60:	2003e6e8 	.word	0x2003e6e8
   bab64:	000be744 	.word	0x000be744

000bab68 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bab68:	4770      	bx	lr

000bab6a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bab6a:	7441      	strb	r1, [r0, #17]
}
   bab6c:	4770      	bx	lr

000bab6e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bab6e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bab70:	7c00      	ldrb	r0, [r0, #16]
   bab72:	f7fc fa93 	bl	b709c <hal_usart_available_data_for_write>
}
   bab76:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bab7a:	bd08      	pop	{r3, pc}

000bab7c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bab7c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bab7e:	7c00      	ldrb	r0, [r0, #16]
   bab80:	f7fc fa64 	bl	b704c <hal_usart_available>
}
   bab84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bab88:	bd08      	pop	{r3, pc}

000bab8a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bab8a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bab8c:	7c00      	ldrb	r0, [r0, #16]
   bab8e:	f7fc fa6d 	bl	b706c <hal_usart_peek>
}
   bab92:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bab96:	bd08      	pop	{r3, pc}

000bab98 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bab98:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bab9a:	7c00      	ldrb	r0, [r0, #16]
   bab9c:	f7fc fa5e 	bl	b705c <hal_usart_read>
}
   baba0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   baba4:	bd08      	pop	{r3, pc}

000baba6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   baba6:	7c00      	ldrb	r0, [r0, #16]
   baba8:	f7fc ba68 	b.w	b707c <hal_usart_flush>

000babac <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   babac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   babae:	7c45      	ldrb	r5, [r0, #17]
{
   babb0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   babb2:	b12d      	cbz	r5, babc0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   babb4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   babb6:	b003      	add	sp, #12
   babb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   babbc:	f7fc ba3e 	b.w	b703c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   babc0:	7c00      	ldrb	r0, [r0, #16]
   babc2:	9101      	str	r1, [sp, #4]
   babc4:	f7fc fa6a 	bl	b709c <hal_usart_available_data_for_write>
   babc8:	2800      	cmp	r0, #0
   babca:	9901      	ldr	r1, [sp, #4]
   babcc:	dcf2      	bgt.n	babb4 <_ZN11USARTSerial5writeEh+0x8>
}
   babce:	4628      	mov	r0, r5
   babd0:	b003      	add	sp, #12
   babd2:	bd30      	pop	{r4, r5, pc}

000babd4 <_ZN11USARTSerialD0Ev>:
   babd4:	b510      	push	{r4, lr}
   babd6:	2114      	movs	r1, #20
   babd8:	4604      	mov	r4, r0
   babda:	f7f9 fa60 	bl	b409e <_ZdlPvj>
   babde:	4620      	mov	r0, r4
   babe0:	bd10      	pop	{r4, pc}
	...

000babe4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   babe4:	b510      	push	{r4, lr}
   babe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   babea:	4604      	mov	r4, r0
   babec:	4608      	mov	r0, r1
   babee:	4611      	mov	r1, r2
   babf0:	2200      	movs	r2, #0
   babf2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   babf6:	4b04      	ldr	r3, [pc, #16]	; (bac08 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   babf8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   babfa:	2301      	movs	r3, #1
  _serial = serial;
   babfc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   babfe:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bac00:	f7fc fa5c 	bl	b70bc <hal_usart_init_ex>
}
   bac04:	4620      	mov	r0, r4
   bac06:	bd10      	pop	{r4, pc}
   bac08:	000be780 	.word	0x000be780

000bac0c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bac0c:	7c00      	ldrb	r0, [r0, #16]
   bac0e:	2300      	movs	r3, #0
   bac10:	f7fc ba4c 	b.w	b70ac <hal_usart_begin_config>

000bac14 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bac14:	2200      	movs	r2, #0
   bac16:	f7ff bff9 	b.w	bac0c <_ZN11USARTSerial5beginEmm>

000bac1a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bac1a:	b510      	push	{r4, lr}
      if (_M_empty())
   bac1c:	6883      	ldr	r3, [r0, #8]
   bac1e:	4604      	mov	r4, r0
   bac20:	b90b      	cbnz	r3, bac26 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bac22:	f000 fa12 	bl	bb04a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bac26:	68c3      	ldr	r3, [r0, #12]
   bac28:	4798      	blx	r3
      if (_M_manager)
   bac2a:	68a3      	ldr	r3, [r4, #8]
   bac2c:	b11b      	cbz	r3, bac36 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bac2e:	2203      	movs	r2, #3
   bac30:	4621      	mov	r1, r4
   bac32:	4620      	mov	r0, r4
   bac34:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bac36:	4620      	mov	r0, r4
   bac38:	2110      	movs	r1, #16
}
   bac3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bac3e:	f7f9 ba2e 	b.w	b409e <_ZdlPvj>

000bac42 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bac42:	4770      	bx	lr

000bac44 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bac44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bac46:	4606      	mov	r6, r0
   bac48:	4615      	mov	r5, r2
   bac4a:	460c      	mov	r4, r1
   bac4c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bac4e:	42bc      	cmp	r4, r7
   bac50:	d006      	beq.n	bac60 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bac52:	6833      	ldr	r3, [r6, #0]
   bac54:	f814 1b01 	ldrb.w	r1, [r4], #1
   bac58:	689b      	ldr	r3, [r3, #8]
   bac5a:	4630      	mov	r0, r6
   bac5c:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bac5e:	e7f6      	b.n	bac4e <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bac60:	4628      	mov	r0, r5
   bac62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bac64 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bac64:	7c00      	ldrb	r0, [r0, #16]
   bac66:	2200      	movs	r2, #0
   bac68:	f7fc ba30 	b.w	b70cc <hal_i2c_write>

000bac6c <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bac6c:	7c00      	ldrb	r0, [r0, #16]
   bac6e:	2100      	movs	r1, #0
   bac70:	f7fc ba34 	b.w	b70dc <hal_i2c_available>

000bac74 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bac74:	7c00      	ldrb	r0, [r0, #16]
   bac76:	2100      	movs	r1, #0
   bac78:	f7fc ba38 	b.w	b70ec <hal_i2c_read>

000bac7c <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bac7c:	7c00      	ldrb	r0, [r0, #16]
   bac7e:	2100      	movs	r1, #0
   bac80:	f7fc ba3c 	b.w	b70fc <hal_i2c_peek>

000bac84 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bac84:	7c00      	ldrb	r0, [r0, #16]
   bac86:	2100      	movs	r1, #0
   bac88:	f7fc ba40 	b.w	b710c <hal_i2c_flush>

000bac8c <_ZN7TwoWireD0Ev>:
   bac8c:	b510      	push	{r4, lr}
   bac8e:	2114      	movs	r1, #20
   bac90:	4604      	mov	r4, r0
   bac92:	f7f9 fa04 	bl	b409e <_ZdlPvj>
   bac96:	4620      	mov	r0, r4
   bac98:	bd10      	pop	{r4, pc}
	...

000bac9c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bac9c:	b510      	push	{r4, lr}
   bac9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   baca2:	4604      	mov	r4, r0
   baca4:	4608      	mov	r0, r1
   baca6:	2100      	movs	r1, #0
   baca8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bacac:	4b03      	ldr	r3, [pc, #12]	; (bacbc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bacae:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bacb0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bacb2:	4611      	mov	r1, r2
   bacb4:	f7fc fa3a 	bl	b712c <hal_i2c_init>
}
   bacb8:	4620      	mov	r0, r4
   bacba:	bd10      	pop	{r4, pc}
   bacbc:	000be7b0 	.word	0x000be7b0

000bacc0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bacc0:	2300      	movs	r3, #0
   bacc2:	6840      	ldr	r0, [r0, #4]
   bacc4:	461a      	mov	r2, r3
   bacc6:	f7fc bb15 	b.w	b72f4 <network_connect>

000bacca <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bacca:	6840      	ldr	r0, [r0, #4]
   baccc:	2200      	movs	r2, #0
   bacce:	2102      	movs	r1, #2
   bacd0:	f7fc bb20 	b.w	b7314 <network_disconnect>

000bacd4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bacd4:	2200      	movs	r2, #0
   bacd6:	6840      	ldr	r0, [r0, #4]
   bacd8:	4611      	mov	r1, r2
   bacda:	f7fc bb13 	b.w	b7304 <network_connecting>

000bacde <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bacde:	2200      	movs	r2, #0
   bace0:	6840      	ldr	r0, [r0, #4]
   bace2:	4611      	mov	r1, r2
   bace4:	f7fc bb1e 	b.w	b7324 <network_ready>

000bace8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bace8:	2300      	movs	r3, #0
   bacea:	6840      	ldr	r0, [r0, #4]
   bacec:	461a      	mov	r2, r3
   bacee:	4619      	mov	r1, r3
   bacf0:	f7fc bb20 	b.w	b7334 <network_on>

000bacf4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bacf4:	2300      	movs	r3, #0
   bacf6:	6840      	ldr	r0, [r0, #4]
   bacf8:	461a      	mov	r2, r3
   bacfa:	4619      	mov	r1, r3
   bacfc:	f7fc bb22 	b.w	b7344 <network_off>

000bad00 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bad00:	6840      	ldr	r0, [r0, #4]
   bad02:	2100      	movs	r1, #0
   bad04:	f7fc bb46 	b.w	b7394 <network_is_on>

000bad08 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bad08:	6840      	ldr	r0, [r0, #4]
   bad0a:	2100      	movs	r1, #0
   bad0c:	f7fc bb4a 	b.w	b73a4 <network_is_off>

000bad10 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bad10:	6840      	ldr	r0, [r0, #4]
   bad12:	2200      	movs	r2, #0
   bad14:	f081 0101 	eor.w	r1, r1, #1
   bad18:	f7fc bb1c 	b.w	b7354 <network_listen>

000bad1c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bad1c:	6840      	ldr	r0, [r0, #4]
   bad1e:	2200      	movs	r2, #0
   bad20:	f7fc bb28 	b.w	b7374 <network_set_listen_timeout>

000bad24 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bad24:	2200      	movs	r2, #0
   bad26:	6840      	ldr	r0, [r0, #4]
   bad28:	4611      	mov	r1, r2
   bad2a:	f7fc bb2b 	b.w	b7384 <network_get_listen_timeout>

000bad2e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bad2e:	2200      	movs	r2, #0
   bad30:	6840      	ldr	r0, [r0, #4]
   bad32:	4611      	mov	r1, r2
   bad34:	f7fc bb16 	b.w	b7364 <network_listening>

000bad38 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bad38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bad3c:	b095      	sub	sp, #84	; 0x54
   bad3e:	4614      	mov	r4, r2
   bad40:	460d      	mov	r5, r1
   bad42:	4607      	mov	r7, r0
    IPAddress addr;
   bad44:	f7ff fe02 	bl	ba94c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bad48:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bad4a:	221c      	movs	r2, #28
   bad4c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bad4e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bad50:	f000 ffe1 	bl	bbd16 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bad54:	2340      	movs	r3, #64	; 0x40
   bad56:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bad58:	4620      	mov	r0, r4
   bad5a:	466b      	mov	r3, sp
   bad5c:	aa0c      	add	r2, sp, #48	; 0x30
   bad5e:	2100      	movs	r1, #0
   bad60:	f7fc f810 	bl	b6d84 <netdb_getaddrinfo>
    if (!r) {
   bad64:	4604      	mov	r4, r0
   bad66:	2800      	cmp	r0, #0
   bad68:	d14b      	bne.n	bae02 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bad6a:	4602      	mov	r2, r0
   bad6c:	2101      	movs	r1, #1
   bad6e:	6868      	ldr	r0, [r5, #4]
   bad70:	f7fc fad8 	bl	b7324 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bad74:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bad76:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bad78:	4622      	mov	r2, r4
   bad7a:	6868      	ldr	r0, [r5, #4]
   bad7c:	f7fc fad2 	bl	b7324 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bad80:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bad82:	4681      	mov	r9, r0
        bool ok = false;
   bad84:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bad86:	2e00      	cmp	r6, #0
   bad88:	d03b      	beq.n	bae02 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bad8a:	2900      	cmp	r1, #0
   bad8c:	d139      	bne.n	bae02 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bad8e:	6873      	ldr	r3, [r6, #4]
   bad90:	2b02      	cmp	r3, #2
   bad92:	d003      	beq.n	bad9c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bad94:	2b0a      	cmp	r3, #10
   bad96:	d011      	beq.n	badbc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bad98:	69f6      	ldr	r6, [r6, #28]
   bad9a:	e7f4      	b.n	bad86 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bad9c:	f1b8 0f00 	cmp.w	r8, #0
   bada0:	d0fa      	beq.n	bad98 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bada2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bada4:	a806      	add	r0, sp, #24
   bada6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bada8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   badaa:	f7ff fdfd 	bl	ba9a8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   badae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   badb0:	1d3c      	adds	r4, r7, #4
   badb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   badb4:	682b      	ldr	r3, [r5, #0]
   badb6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   badb8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   badba:	e7ed      	b.n	bad98 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   badbc:	f1b9 0f00 	cmp.w	r9, #0
   badc0:	d0ea      	beq.n	bad98 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   badc2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   badc4:	2210      	movs	r2, #16
   badc6:	a801      	add	r0, sp, #4
   badc8:	f000 ffa5 	bl	bbd16 <memset>
                    a.v = 6;
   badcc:	2306      	movs	r3, #6
   badce:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   badd2:	ad01      	add	r5, sp, #4
   badd4:	f104 0308 	add.w	r3, r4, #8
   badd8:	3418      	adds	r4, #24
   badda:	6818      	ldr	r0, [r3, #0]
   baddc:	6859      	ldr	r1, [r3, #4]
   badde:	462a      	mov	r2, r5
   bade0:	c203      	stmia	r2!, {r0, r1}
   bade2:	3308      	adds	r3, #8
   bade4:	42a3      	cmp	r3, r4
   bade6:	4615      	mov	r5, r2
   bade8:	d1f7      	bne.n	badda <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   badea:	a901      	add	r1, sp, #4
   badec:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   badee:	ad07      	add	r5, sp, #28
   badf0:	f7ff fdba 	bl	ba968 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   badf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   badf6:	1d3c      	adds	r4, r7, #4
   badf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   badfa:	682b      	ldr	r3, [r5, #0]
   badfc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   badfe:	4649      	mov	r1, r9
   bae00:	e7ca      	b.n	bad98 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bae02:	9800      	ldr	r0, [sp, #0]
   bae04:	f7fb ffb6 	bl	b6d74 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bae08:	4638      	mov	r0, r7
   bae0a:	b015      	add	sp, #84	; 0x54
   bae0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bae10 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bae10:	4b02      	ldr	r3, [pc, #8]	; (bae1c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bae12:	4a03      	ldr	r2, [pc, #12]	; (bae20 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bae14:	601a      	str	r2, [r3, #0]
   bae16:	2200      	movs	r2, #0
   bae18:	605a      	str	r2, [r3, #4]

} // spark
   bae1a:	4770      	bx	lr
   bae1c:	2003e718 	.word	0x2003e718
   bae20:	000be7d8 	.word	0x000be7d8

000bae24 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bae24:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   bae26:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bae28:	d902      	bls.n	bae30 <pinAvailable+0xc>
    return false;
   bae2a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bae2c:	b002      	add	sp, #8
   bae2e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bae30:	f1a0 030b 	sub.w	r3, r0, #11
   bae34:	2b02      	cmp	r3, #2
   bae36:	d81a      	bhi.n	bae6e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bae38:	4c17      	ldr	r4, [pc, #92]	; (bae98 <pinAvailable+0x74>)
   bae3a:	7821      	ldrb	r1, [r4, #0]
   bae3c:	f3bf 8f5b 	dmb	ish
   bae40:	f011 0101 	ands.w	r1, r1, #1
   bae44:	d10b      	bne.n	bae5e <pinAvailable+0x3a>
   bae46:	4620      	mov	r0, r4
   bae48:	9101      	str	r1, [sp, #4]
   bae4a:	f7f9 f92a 	bl	b40a2 <__cxa_guard_acquire>
   bae4e:	9901      	ldr	r1, [sp, #4]
   bae50:	b128      	cbz	r0, bae5e <pinAvailable+0x3a>
   bae52:	4812      	ldr	r0, [pc, #72]	; (bae9c <pinAvailable+0x78>)
   bae54:	f7fc fb8a 	bl	b756c <_ZN8SPIClassC1E19hal_spi_interface_t>
   bae58:	4620      	mov	r0, r4
   bae5a:	f7f9 f927 	bl	b40ac <__cxa_guard_release>
   bae5e:	4b0f      	ldr	r3, [pc, #60]	; (bae9c <pinAvailable+0x78>)
   bae60:	7818      	ldrb	r0, [r3, #0]
   bae62:	f7fc f983 	bl	b716c <hal_spi_is_enabled>
   bae66:	2800      	cmp	r0, #0
   bae68:	d1df      	bne.n	bae2a <pinAvailable+0x6>
  return true; // 'pin' is available
   bae6a:	2001      	movs	r0, #1
   bae6c:	e7de      	b.n	bae2c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bae6e:	2801      	cmp	r0, #1
   bae70:	d809      	bhi.n	bae86 <pinAvailable+0x62>
   bae72:	f000 f8c1 	bl	baff8 <_Z19__fetch_global_Wirev>
   bae76:	2100      	movs	r1, #0
   bae78:	7c00      	ldrb	r0, [r0, #16]
   bae7a:	f7fc f94f 	bl	b711c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bae7e:	f080 0001 	eor.w	r0, r0, #1
   bae82:	b2c0      	uxtb	r0, r0
   bae84:	e7d2      	b.n	bae2c <pinAvailable+0x8>
   bae86:	3809      	subs	r0, #9
   bae88:	2801      	cmp	r0, #1
   bae8a:	d8ee      	bhi.n	bae6a <pinAvailable+0x46>
   bae8c:	f000 f878 	bl	baf80 <_Z22__fetch_global_Serial1v>
   bae90:	7c00      	ldrb	r0, [r0, #16]
   bae92:	f7fc f8fb 	bl	b708c <hal_usart_is_enabled>
   bae96:	e7f2      	b.n	bae7e <pinAvailable+0x5a>
   bae98:	2003e720 	.word	0x2003e720
   bae9c:	2003e724 	.word	0x2003e724

000baea0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   baea0:	2825      	cmp	r0, #37	; 0x25
{
   baea2:	b538      	push	{r3, r4, r5, lr}
   baea4:	4604      	mov	r4, r0
   baea6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   baea8:	d80a      	bhi.n	baec0 <pinMode+0x20>
   baeaa:	29ff      	cmp	r1, #255	; 0xff
   baeac:	d008      	beq.n	baec0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   baeae:	f7ff ffb9 	bl	bae24 <pinAvailable>
   baeb2:	b128      	cbz	r0, baec0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   baeb4:	4629      	mov	r1, r5
   baeb6:	4620      	mov	r0, r4
}
   baeb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   baebc:	f7fb bf72 	b.w	b6da4 <HAL_Pin_Mode>
}
   baec0:	bd38      	pop	{r3, r4, r5, pc}

000baec2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   baec2:	b538      	push	{r3, r4, r5, lr}
   baec4:	4604      	mov	r4, r0
   baec6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   baec8:	f7fb ff74 	bl	b6db4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   baecc:	28ff      	cmp	r0, #255	; 0xff
   baece:	d010      	beq.n	baef2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   baed0:	2806      	cmp	r0, #6
   baed2:	d804      	bhi.n	baede <digitalWrite+0x1c>
   baed4:	234d      	movs	r3, #77	; 0x4d
   baed6:	fa23 f000 	lsr.w	r0, r3, r0
   baeda:	07c3      	lsls	r3, r0, #31
   baedc:	d409      	bmi.n	baef2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   baede:	4620      	mov	r0, r4
   baee0:	f7ff ffa0 	bl	bae24 <pinAvailable>
   baee4:	b128      	cbz	r0, baef2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   baee6:	4629      	mov	r1, r5
   baee8:	4620      	mov	r0, r4
}
   baeea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   baeee:	f7fb bf69 	b.w	b6dc4 <HAL_GPIO_Write>
}
   baef2:	bd38      	pop	{r3, r4, r5, pc}

000baef4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   baef4:	b510      	push	{r4, lr}
   baef6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   baef8:	f7fb ff5c 	bl	b6db4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   baefc:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   baefe:	b2db      	uxtb	r3, r3
   baf00:	2b01      	cmp	r3, #1
   baf02:	d908      	bls.n	baf16 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   baf04:	4620      	mov	r0, r4
   baf06:	f7ff ff8d 	bl	bae24 <pinAvailable>
   baf0a:	b120      	cbz	r0, baf16 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   baf0c:	4620      	mov	r0, r4
}
   baf0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   baf12:	f7fb bf5f 	b.w	b6dd4 <HAL_GPIO_Read>
}
   baf16:	2000      	movs	r0, #0
   baf18:	bd10      	pop	{r4, pc}

000baf1a <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   baf1a:	280d      	cmp	r0, #13
{
   baf1c:	b510      	push	{r4, lr}
   baf1e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   baf20:	bf9c      	itt	ls
   baf22:	340e      	addls	r4, #14
   baf24:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   baf26:	4620      	mov	r0, r4
   baf28:	f7ff ff7c 	bl	bae24 <pinAvailable>
   baf2c:	b150      	cbz	r0, baf44 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   baf2e:	2103      	movs	r1, #3
   baf30:	4620      	mov	r0, r4
   baf32:	f7fb ff2f 	bl	b6d94 <HAL_Validate_Pin_Function>
   baf36:	2803      	cmp	r0, #3
   baf38:	d104      	bne.n	baf44 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   baf3a:	4620      	mov	r0, r4
}
   baf3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   baf40:	f7fb bf50 	b.w	b6de4 <hal_adc_read>
}
   baf44:	2000      	movs	r0, #0
   baf46:	bd10      	pop	{r4, pc}

000baf48 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   baf48:	4770      	bx	lr
	...

000baf4c <_Z20acquireSerial1Bufferv>:
{
   baf4c:	b538      	push	{r3, r4, r5, lr}
   baf4e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   baf50:	2514      	movs	r5, #20
   baf52:	462a      	mov	r2, r5
   baf54:	2100      	movs	r1, #0
   baf56:	f000 fede 	bl	bbd16 <memset>
   baf5a:	8025      	strh	r5, [r4, #0]
   baf5c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   baf5e:	4907      	ldr	r1, [pc, #28]	; (baf7c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   baf60:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   baf62:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   baf64:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   baf66:	f000 f86b 	bl	bb040 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   baf6a:	4904      	ldr	r1, [pc, #16]	; (baf7c <_Z20acquireSerial1Bufferv+0x30>)
    };
   baf6c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   baf6e:	4628      	mov	r0, r5
   baf70:	f000 f866 	bl	bb040 <_ZnajRKSt9nothrow_t>
    };
   baf74:	60e0      	str	r0, [r4, #12]
}
   baf76:	4620      	mov	r0, r4
   baf78:	bd38      	pop	{r3, r4, r5, pc}
   baf7a:	bf00      	nop
   baf7c:	000be80c 	.word	0x000be80c

000baf80 <_Z22__fetch_global_Serial1v>:
{
   baf80:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   baf82:	4d0e      	ldr	r5, [pc, #56]	; (bafbc <_Z22__fetch_global_Serial1v+0x3c>)
   baf84:	7829      	ldrb	r1, [r5, #0]
   baf86:	f3bf 8f5b 	dmb	ish
   baf8a:	f011 0401 	ands.w	r4, r1, #1
{
   baf8e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   baf90:	d111      	bne.n	bafb6 <_Z22__fetch_global_Serial1v+0x36>
   baf92:	4628      	mov	r0, r5
   baf94:	f7f9 f885 	bl	b40a2 <__cxa_guard_acquire>
   baf98:	b168      	cbz	r0, bafb6 <_Z22__fetch_global_Serial1v+0x36>
   baf9a:	a801      	add	r0, sp, #4
   baf9c:	f7ff ffd6 	bl	baf4c <_Z20acquireSerial1Bufferv>
   bafa0:	aa01      	add	r2, sp, #4
   bafa2:	4621      	mov	r1, r4
   bafa4:	4806      	ldr	r0, [pc, #24]	; (bafc0 <_Z22__fetch_global_Serial1v+0x40>)
   bafa6:	f7ff fe1d 	bl	babe4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bafaa:	4628      	mov	r0, r5
   bafac:	f7f9 f87e 	bl	b40ac <__cxa_guard_release>
   bafb0:	4804      	ldr	r0, [pc, #16]	; (bafc4 <_Z22__fetch_global_Serial1v+0x44>)
   bafb2:	f000 fe6b 	bl	bbc8c <atexit>
    return serial1;
}
   bafb6:	4802      	ldr	r0, [pc, #8]	; (bafc0 <_Z22__fetch_global_Serial1v+0x40>)
   bafb8:	b007      	add	sp, #28
   bafba:	bd30      	pop	{r4, r5, pc}
   bafbc:	2003e72c 	.word	0x2003e72c
   bafc0:	2003e730 	.word	0x2003e730
   bafc4:	000baf49 	.word	0x000baf49

000bafc8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bafc8:	4770      	bx	lr
	...

000bafcc <_Z17acquireWireBufferv>:
{
   bafcc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bafce:	2520      	movs	r5, #32
   bafd0:	2314      	movs	r3, #20
{
   bafd2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bafd4:	6003      	str	r3, [r0, #0]
   bafd6:	6085      	str	r5, [r0, #8]
   bafd8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bafda:	4906      	ldr	r1, [pc, #24]	; (baff4 <_Z17acquireWireBufferv+0x28>)
   bafdc:	4628      	mov	r0, r5
   bafde:	f000 f82f 	bl	bb040 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bafe2:	4904      	ldr	r1, [pc, #16]	; (baff4 <_Z17acquireWireBufferv+0x28>)
	};
   bafe4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bafe6:	4628      	mov	r0, r5
   bafe8:	f000 f82a 	bl	bb040 <_ZnajRKSt9nothrow_t>
	};
   bafec:	60e0      	str	r0, [r4, #12]
}
   bafee:	4620      	mov	r0, r4
   baff0:	bd38      	pop	{r3, r4, r5, pc}
   baff2:	bf00      	nop
   baff4:	000be80c 	.word	0x000be80c

000baff8 <_Z19__fetch_global_Wirev>:
{
   baff8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   baffa:	4d0e      	ldr	r5, [pc, #56]	; (bb034 <_Z19__fetch_global_Wirev+0x3c>)
   baffc:	7829      	ldrb	r1, [r5, #0]
   baffe:	f3bf 8f5b 	dmb	ish
   bb002:	f011 0401 	ands.w	r4, r1, #1
{
   bb006:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb008:	d111      	bne.n	bb02e <_Z19__fetch_global_Wirev+0x36>
   bb00a:	4628      	mov	r0, r5
   bb00c:	f7f9 f849 	bl	b40a2 <__cxa_guard_acquire>
   bb010:	b168      	cbz	r0, bb02e <_Z19__fetch_global_Wirev+0x36>
   bb012:	a801      	add	r0, sp, #4
   bb014:	f7ff ffda 	bl	bafcc <_Z17acquireWireBufferv>
   bb018:	aa01      	add	r2, sp, #4
   bb01a:	4621      	mov	r1, r4
   bb01c:	4806      	ldr	r0, [pc, #24]	; (bb038 <_Z19__fetch_global_Wirev+0x40>)
   bb01e:	f7ff fe3d 	bl	bac9c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb022:	4628      	mov	r0, r5
   bb024:	f7f9 f842 	bl	b40ac <__cxa_guard_release>
   bb028:	4804      	ldr	r0, [pc, #16]	; (bb03c <_Z19__fetch_global_Wirev+0x44>)
   bb02a:	f000 fe2f 	bl	bbc8c <atexit>
	return wire;
}
   bb02e:	4802      	ldr	r0, [pc, #8]	; (bb038 <_Z19__fetch_global_Wirev+0x40>)
   bb030:	b007      	add	sp, #28
   bb032:	bd30      	pop	{r4, r5, pc}
   bb034:	2003e748 	.word	0x2003e748
   bb038:	2003e74c 	.word	0x2003e74c
   bb03c:	000bafc9 	.word	0x000bafc9

000bb040 <_ZnajRKSt9nothrow_t>:
   bb040:	f7f9 b82b 	b.w	b409a <_Znaj>

000bb044 <_ZSt20__throw_length_errorPKc>:
   bb044:	b508      	push	{r3, lr}
   bb046:	f7fc fa1d 	bl	b7484 <abort>

000bb04a <_ZSt25__throw_bad_function_callv>:
   bb04a:	b508      	push	{r3, lr}
   bb04c:	f7fc fa1a 	bl	b7484 <abort>

000bb050 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bb050:	4901      	ldr	r1, [pc, #4]	; (bb058 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bb052:	f000 b8f9 	b.w	bb248 <_ZNKSt9type_infoeqERKS_>
   bb056:	bf00      	nop
   bb058:	000be828 	.word	0x000be828

000bb05c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bb05c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bb05e:	2400      	movs	r4, #0
   bb060:	2310      	movs	r3, #16
   bb062:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bb066:	6803      	ldr	r3, [r0, #0]
   bb068:	4615      	mov	r5, r2
   bb06a:	699e      	ldr	r6, [r3, #24]
   bb06c:	6812      	ldr	r2, [r2, #0]
   bb06e:	466b      	mov	r3, sp
   bb070:	e9cd 4400 	strd	r4, r4, [sp]
   bb074:	47b0      	blx	r6
   bb076:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bb07a:	f003 0306 	and.w	r3, r3, #6
   bb07e:	2b06      	cmp	r3, #6
   bb080:	bf03      	ittte	eq
   bb082:	9b00      	ldreq	r3, [sp, #0]
   bb084:	602b      	streq	r3, [r5, #0]
   bb086:	2001      	moveq	r0, #1
   bb088:	4620      	movne	r0, r4
   bb08a:	b004      	add	sp, #16
   bb08c:	bd70      	pop	{r4, r5, r6, pc}

000bb08e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bb08e:	9800      	ldr	r0, [sp, #0]
   bb090:	4290      	cmp	r0, r2
   bb092:	bf14      	ite	ne
   bb094:	2001      	movne	r0, #1
   bb096:	2006      	moveq	r0, #6
   bb098:	4770      	bx	lr
	...

000bb09c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bb09c:	b510      	push	{r4, lr}
   bb09e:	4b03      	ldr	r3, [pc, #12]	; (bb0ac <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bb0a0:	6003      	str	r3, [r0, #0]
   bb0a2:	4604      	mov	r4, r0
   bb0a4:	f000 f8cd 	bl	bb242 <_ZNSt9type_infoD1Ev>
   bb0a8:	4620      	mov	r0, r4
   bb0aa:	bd10      	pop	{r4, pc}
   bb0ac:	000be868 	.word	0x000be868

000bb0b0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bb0b0:	b510      	push	{r4, lr}
   bb0b2:	4604      	mov	r4, r0
   bb0b4:	f7ff fff2 	bl	bb09c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb0b8:	4620      	mov	r0, r4
   bb0ba:	2108      	movs	r1, #8
   bb0bc:	f7f8 ffef 	bl	b409e <_ZdlPvj>
   bb0c0:	4620      	mov	r0, r4
   bb0c2:	bd10      	pop	{r4, pc}

000bb0c4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bb0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb0c8:	461f      	mov	r7, r3
   bb0ca:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bb0ce:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bb0d2:	4598      	cmp	r8, r3
   bb0d4:	4606      	mov	r6, r0
   bb0d6:	4615      	mov	r5, r2
   bb0d8:	d107      	bne.n	bb0ea <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb0da:	9907      	ldr	r1, [sp, #28]
   bb0dc:	f000 f8b4 	bl	bb248 <_ZNKSt9type_infoeqERKS_>
   bb0e0:	b118      	cbz	r0, bb0ea <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb0e2:	7165      	strb	r5, [r4, #5]
   bb0e4:	2000      	movs	r0, #0
   bb0e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb0ea:	4639      	mov	r1, r7
   bb0ec:	4630      	mov	r0, r6
   bb0ee:	f000 f8ab 	bl	bb248 <_ZNKSt9type_infoeqERKS_>
   bb0f2:	2800      	cmp	r0, #0
   bb0f4:	d0f6      	beq.n	bb0e4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bb0f6:	2301      	movs	r3, #1
   bb0f8:	f8c4 8000 	str.w	r8, [r4]
   bb0fc:	7125      	strb	r5, [r4, #4]
   bb0fe:	71a3      	strb	r3, [r4, #6]
   bb100:	e7f0      	b.n	bb0e4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bb102 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bb102:	b538      	push	{r3, r4, r5, lr}
   bb104:	4615      	mov	r5, r2
   bb106:	461c      	mov	r4, r3
   bb108:	f000 f89e 	bl	bb248 <_ZNKSt9type_infoeqERKS_>
   bb10c:	b120      	cbz	r0, bb118 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bb10e:	2308      	movs	r3, #8
   bb110:	60e3      	str	r3, [r4, #12]
   bb112:	2306      	movs	r3, #6
   bb114:	6025      	str	r5, [r4, #0]
   bb116:	7123      	strb	r3, [r4, #4]
   bb118:	bd38      	pop	{r3, r4, r5, pc}

000bb11a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bb11a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb11c:	4605      	mov	r5, r0
   bb11e:	460c      	mov	r4, r1
   bb120:	9201      	str	r2, [sp, #4]
   bb122:	461e      	mov	r6, r3
   bb124:	f000 f890 	bl	bb248 <_ZNKSt9type_infoeqERKS_>
   bb128:	b950      	cbnz	r0, bb140 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bb12a:	2e03      	cmp	r6, #3
   bb12c:	d808      	bhi.n	bb140 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bb12e:	6823      	ldr	r3, [r4, #0]
   bb130:	9a01      	ldr	r2, [sp, #4]
   bb132:	695b      	ldr	r3, [r3, #20]
   bb134:	4629      	mov	r1, r5
   bb136:	4620      	mov	r0, r4
   bb138:	b002      	add	sp, #8
   bb13a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb13e:	4718      	bx	r3
   bb140:	b002      	add	sp, #8
   bb142:	bd70      	pop	{r4, r5, r6, pc}

000bb144 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bb144:	b510      	push	{r4, lr}
   bb146:	4b03      	ldr	r3, [pc, #12]	; (bb154 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bb148:	6003      	str	r3, [r0, #0]
   bb14a:	4604      	mov	r4, r0
   bb14c:	f7ff ffa6 	bl	bb09c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb150:	4620      	mov	r0, r4
   bb152:	bd10      	pop	{r4, pc}
   bb154:	000be8c8 	.word	0x000be8c8

000bb158 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bb158:	b510      	push	{r4, lr}
   bb15a:	4604      	mov	r4, r0
   bb15c:	f7ff fff2 	bl	bb144 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bb160:	4620      	mov	r0, r4
   bb162:	210c      	movs	r1, #12
   bb164:	f7f8 ff9b 	bl	b409e <_ZdlPvj>
   bb168:	4620      	mov	r0, r4
   bb16a:	bd10      	pop	{r4, pc}

000bb16c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bb16c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bb16e:	9f08      	ldr	r7, [sp, #32]
   bb170:	4297      	cmp	r7, r2
   bb172:	4605      	mov	r5, r0
   bb174:	460e      	mov	r6, r1
   bb176:	4614      	mov	r4, r2
   bb178:	d00a      	beq.n	bb190 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bb17a:	68a8      	ldr	r0, [r5, #8]
   bb17c:	6802      	ldr	r2, [r0, #0]
   bb17e:	9708      	str	r7, [sp, #32]
   bb180:	6a15      	ldr	r5, [r2, #32]
   bb182:	4631      	mov	r1, r6
   bb184:	4622      	mov	r2, r4
   bb186:	46ac      	mov	ip, r5
   bb188:	b003      	add	sp, #12
   bb18a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bb18e:	4760      	bx	ip
   bb190:	4619      	mov	r1, r3
   bb192:	9301      	str	r3, [sp, #4]
   bb194:	f000 f858 	bl	bb248 <_ZNKSt9type_infoeqERKS_>
   bb198:	9b01      	ldr	r3, [sp, #4]
   bb19a:	2800      	cmp	r0, #0
   bb19c:	d0ed      	beq.n	bb17a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bb19e:	2006      	movs	r0, #6
   bb1a0:	b003      	add	sp, #12
   bb1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bb1a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bb1a4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb1a8:	460d      	mov	r5, r1
   bb1aa:	4619      	mov	r1, r3
   bb1ac:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bb1b0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bb1b4:	4681      	mov	r9, r0
   bb1b6:	4617      	mov	r7, r2
   bb1b8:	4698      	mov	r8, r3
   bb1ba:	f000 f845 	bl	bb248 <_ZNKSt9type_infoeqERKS_>
   bb1be:	b190      	cbz	r0, bb1e6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bb1c0:	2d00      	cmp	r5, #0
   bb1c2:	6034      	str	r4, [r6, #0]
   bb1c4:	7137      	strb	r7, [r6, #4]
   bb1c6:	db09      	blt.n	bb1dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bb1c8:	1961      	adds	r1, r4, r5
   bb1ca:	458a      	cmp	sl, r1
   bb1cc:	bf0c      	ite	eq
   bb1ce:	2106      	moveq	r1, #6
   bb1d0:	2101      	movne	r1, #1
   bb1d2:	71b1      	strb	r1, [r6, #6]
   bb1d4:	2000      	movs	r0, #0
   bb1d6:	b001      	add	sp, #4
   bb1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb1dc:	3502      	adds	r5, #2
   bb1de:	d1f9      	bne.n	bb1d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb1e0:	2301      	movs	r3, #1
   bb1e2:	71b3      	strb	r3, [r6, #6]
   bb1e4:	e7f6      	b.n	bb1d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb1e6:	4554      	cmp	r4, sl
   bb1e8:	d106      	bne.n	bb1f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb1ea:	4659      	mov	r1, fp
   bb1ec:	4648      	mov	r0, r9
   bb1ee:	f000 f82b 	bl	bb248 <_ZNKSt9type_infoeqERKS_>
   bb1f2:	b108      	cbz	r0, bb1f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb1f4:	7177      	strb	r7, [r6, #5]
   bb1f6:	e7ed      	b.n	bb1d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb1f8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bb1fc:	6803      	ldr	r3, [r0, #0]
   bb1fe:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bb202:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bb206:	69dc      	ldr	r4, [r3, #28]
   bb208:	463a      	mov	r2, r7
   bb20a:	4643      	mov	r3, r8
   bb20c:	4629      	mov	r1, r5
   bb20e:	46a4      	mov	ip, r4
   bb210:	b001      	add	sp, #4
   bb212:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb216:	4760      	bx	ip

000bb218 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bb218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb21c:	4607      	mov	r7, r0
   bb21e:	460c      	mov	r4, r1
   bb220:	4615      	mov	r5, r2
   bb222:	461e      	mov	r6, r3
   bb224:	f7ff ff6d 	bl	bb102 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bb228:	b948      	cbnz	r0, bb23e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bb22a:	68b8      	ldr	r0, [r7, #8]
   bb22c:	6803      	ldr	r3, [r0, #0]
   bb22e:	699f      	ldr	r7, [r3, #24]
   bb230:	462a      	mov	r2, r5
   bb232:	4633      	mov	r3, r6
   bb234:	4621      	mov	r1, r4
   bb236:	46bc      	mov	ip, r7
   bb238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bb23c:	4760      	bx	ip
   bb23e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb242 <_ZNSt9type_infoD1Ev>:
   bb242:	4770      	bx	lr

000bb244 <_ZNKSt9type_info14__is_pointer_pEv>:
   bb244:	2000      	movs	r0, #0
   bb246:	4770      	bx	lr

000bb248 <_ZNKSt9type_infoeqERKS_>:
   bb248:	4281      	cmp	r1, r0
   bb24a:	b508      	push	{r3, lr}
   bb24c:	d00e      	beq.n	bb26c <_ZNKSt9type_infoeqERKS_+0x24>
   bb24e:	6840      	ldr	r0, [r0, #4]
   bb250:	7803      	ldrb	r3, [r0, #0]
   bb252:	2b2a      	cmp	r3, #42	; 0x2a
   bb254:	d00c      	beq.n	bb270 <_ZNKSt9type_infoeqERKS_+0x28>
   bb256:	6849      	ldr	r1, [r1, #4]
   bb258:	780b      	ldrb	r3, [r1, #0]
   bb25a:	2b2a      	cmp	r3, #42	; 0x2a
   bb25c:	bf08      	it	eq
   bb25e:	3101      	addeq	r1, #1
   bb260:	f000 fd9f 	bl	bbda2 <strcmp>
   bb264:	fab0 f080 	clz	r0, r0
   bb268:	0940      	lsrs	r0, r0, #5
   bb26a:	bd08      	pop	{r3, pc}
   bb26c:	2001      	movs	r0, #1
   bb26e:	e7fc      	b.n	bb26a <_ZNKSt9type_infoeqERKS_+0x22>
   bb270:	2000      	movs	r0, #0
   bb272:	e7fa      	b.n	bb26a <_ZNKSt9type_infoeqERKS_+0x22>

000bb274 <__aeabi_drsub>:
   bb274:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bb278:	e002      	b.n	bb280 <__adddf3>
   bb27a:	bf00      	nop

000bb27c <__aeabi_dsub>:
   bb27c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bb280 <__adddf3>:
   bb280:	b530      	push	{r4, r5, lr}
   bb282:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bb286:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bb28a:	ea94 0f05 	teq	r4, r5
   bb28e:	bf08      	it	eq
   bb290:	ea90 0f02 	teqeq	r0, r2
   bb294:	bf1f      	itttt	ne
   bb296:	ea54 0c00 	orrsne.w	ip, r4, r0
   bb29a:	ea55 0c02 	orrsne.w	ip, r5, r2
   bb29e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bb2a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb2a6:	f000 80e2 	beq.w	bb46e <__adddf3+0x1ee>
   bb2aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bb2ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bb2b2:	bfb8      	it	lt
   bb2b4:	426d      	neglt	r5, r5
   bb2b6:	dd0c      	ble.n	bb2d2 <__adddf3+0x52>
   bb2b8:	442c      	add	r4, r5
   bb2ba:	ea80 0202 	eor.w	r2, r0, r2
   bb2be:	ea81 0303 	eor.w	r3, r1, r3
   bb2c2:	ea82 0000 	eor.w	r0, r2, r0
   bb2c6:	ea83 0101 	eor.w	r1, r3, r1
   bb2ca:	ea80 0202 	eor.w	r2, r0, r2
   bb2ce:	ea81 0303 	eor.w	r3, r1, r3
   bb2d2:	2d36      	cmp	r5, #54	; 0x36
   bb2d4:	bf88      	it	hi
   bb2d6:	bd30      	pophi	{r4, r5, pc}
   bb2d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bb2dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb2e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bb2e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bb2e8:	d002      	beq.n	bb2f0 <__adddf3+0x70>
   bb2ea:	4240      	negs	r0, r0
   bb2ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb2f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bb2f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb2f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bb2fc:	d002      	beq.n	bb304 <__adddf3+0x84>
   bb2fe:	4252      	negs	r2, r2
   bb300:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bb304:	ea94 0f05 	teq	r4, r5
   bb308:	f000 80a7 	beq.w	bb45a <__adddf3+0x1da>
   bb30c:	f1a4 0401 	sub.w	r4, r4, #1
   bb310:	f1d5 0e20 	rsbs	lr, r5, #32
   bb314:	db0d      	blt.n	bb332 <__adddf3+0xb2>
   bb316:	fa02 fc0e 	lsl.w	ip, r2, lr
   bb31a:	fa22 f205 	lsr.w	r2, r2, r5
   bb31e:	1880      	adds	r0, r0, r2
   bb320:	f141 0100 	adc.w	r1, r1, #0
   bb324:	fa03 f20e 	lsl.w	r2, r3, lr
   bb328:	1880      	adds	r0, r0, r2
   bb32a:	fa43 f305 	asr.w	r3, r3, r5
   bb32e:	4159      	adcs	r1, r3
   bb330:	e00e      	b.n	bb350 <__adddf3+0xd0>
   bb332:	f1a5 0520 	sub.w	r5, r5, #32
   bb336:	f10e 0e20 	add.w	lr, lr, #32
   bb33a:	2a01      	cmp	r2, #1
   bb33c:	fa03 fc0e 	lsl.w	ip, r3, lr
   bb340:	bf28      	it	cs
   bb342:	f04c 0c02 	orrcs.w	ip, ip, #2
   bb346:	fa43 f305 	asr.w	r3, r3, r5
   bb34a:	18c0      	adds	r0, r0, r3
   bb34c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bb350:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb354:	d507      	bpl.n	bb366 <__adddf3+0xe6>
   bb356:	f04f 0e00 	mov.w	lr, #0
   bb35a:	f1dc 0c00 	rsbs	ip, ip, #0
   bb35e:	eb7e 0000 	sbcs.w	r0, lr, r0
   bb362:	eb6e 0101 	sbc.w	r1, lr, r1
   bb366:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bb36a:	d31b      	bcc.n	bb3a4 <__adddf3+0x124>
   bb36c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bb370:	d30c      	bcc.n	bb38c <__adddf3+0x10c>
   bb372:	0849      	lsrs	r1, r1, #1
   bb374:	ea5f 0030 	movs.w	r0, r0, rrx
   bb378:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bb37c:	f104 0401 	add.w	r4, r4, #1
   bb380:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bb384:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bb388:	f080 809a 	bcs.w	bb4c0 <__adddf3+0x240>
   bb38c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bb390:	bf08      	it	eq
   bb392:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb396:	f150 0000 	adcs.w	r0, r0, #0
   bb39a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb39e:	ea41 0105 	orr.w	r1, r1, r5
   bb3a2:	bd30      	pop	{r4, r5, pc}
   bb3a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bb3a8:	4140      	adcs	r0, r0
   bb3aa:	eb41 0101 	adc.w	r1, r1, r1
   bb3ae:	3c01      	subs	r4, #1
   bb3b0:	bf28      	it	cs
   bb3b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bb3b6:	d2e9      	bcs.n	bb38c <__adddf3+0x10c>
   bb3b8:	f091 0f00 	teq	r1, #0
   bb3bc:	bf04      	itt	eq
   bb3be:	4601      	moveq	r1, r0
   bb3c0:	2000      	moveq	r0, #0
   bb3c2:	fab1 f381 	clz	r3, r1
   bb3c6:	bf08      	it	eq
   bb3c8:	3320      	addeq	r3, #32
   bb3ca:	f1a3 030b 	sub.w	r3, r3, #11
   bb3ce:	f1b3 0220 	subs.w	r2, r3, #32
   bb3d2:	da0c      	bge.n	bb3ee <__adddf3+0x16e>
   bb3d4:	320c      	adds	r2, #12
   bb3d6:	dd08      	ble.n	bb3ea <__adddf3+0x16a>
   bb3d8:	f102 0c14 	add.w	ip, r2, #20
   bb3dc:	f1c2 020c 	rsb	r2, r2, #12
   bb3e0:	fa01 f00c 	lsl.w	r0, r1, ip
   bb3e4:	fa21 f102 	lsr.w	r1, r1, r2
   bb3e8:	e00c      	b.n	bb404 <__adddf3+0x184>
   bb3ea:	f102 0214 	add.w	r2, r2, #20
   bb3ee:	bfd8      	it	le
   bb3f0:	f1c2 0c20 	rsble	ip, r2, #32
   bb3f4:	fa01 f102 	lsl.w	r1, r1, r2
   bb3f8:	fa20 fc0c 	lsr.w	ip, r0, ip
   bb3fc:	bfdc      	itt	le
   bb3fe:	ea41 010c 	orrle.w	r1, r1, ip
   bb402:	4090      	lslle	r0, r2
   bb404:	1ae4      	subs	r4, r4, r3
   bb406:	bfa2      	ittt	ge
   bb408:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bb40c:	4329      	orrge	r1, r5
   bb40e:	bd30      	popge	{r4, r5, pc}
   bb410:	ea6f 0404 	mvn.w	r4, r4
   bb414:	3c1f      	subs	r4, #31
   bb416:	da1c      	bge.n	bb452 <__adddf3+0x1d2>
   bb418:	340c      	adds	r4, #12
   bb41a:	dc0e      	bgt.n	bb43a <__adddf3+0x1ba>
   bb41c:	f104 0414 	add.w	r4, r4, #20
   bb420:	f1c4 0220 	rsb	r2, r4, #32
   bb424:	fa20 f004 	lsr.w	r0, r0, r4
   bb428:	fa01 f302 	lsl.w	r3, r1, r2
   bb42c:	ea40 0003 	orr.w	r0, r0, r3
   bb430:	fa21 f304 	lsr.w	r3, r1, r4
   bb434:	ea45 0103 	orr.w	r1, r5, r3
   bb438:	bd30      	pop	{r4, r5, pc}
   bb43a:	f1c4 040c 	rsb	r4, r4, #12
   bb43e:	f1c4 0220 	rsb	r2, r4, #32
   bb442:	fa20 f002 	lsr.w	r0, r0, r2
   bb446:	fa01 f304 	lsl.w	r3, r1, r4
   bb44a:	ea40 0003 	orr.w	r0, r0, r3
   bb44e:	4629      	mov	r1, r5
   bb450:	bd30      	pop	{r4, r5, pc}
   bb452:	fa21 f004 	lsr.w	r0, r1, r4
   bb456:	4629      	mov	r1, r5
   bb458:	bd30      	pop	{r4, r5, pc}
   bb45a:	f094 0f00 	teq	r4, #0
   bb45e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bb462:	bf06      	itte	eq
   bb464:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bb468:	3401      	addeq	r4, #1
   bb46a:	3d01      	subne	r5, #1
   bb46c:	e74e      	b.n	bb30c <__adddf3+0x8c>
   bb46e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb472:	bf18      	it	ne
   bb474:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb478:	d029      	beq.n	bb4ce <__adddf3+0x24e>
   bb47a:	ea94 0f05 	teq	r4, r5
   bb47e:	bf08      	it	eq
   bb480:	ea90 0f02 	teqeq	r0, r2
   bb484:	d005      	beq.n	bb492 <__adddf3+0x212>
   bb486:	ea54 0c00 	orrs.w	ip, r4, r0
   bb48a:	bf04      	itt	eq
   bb48c:	4619      	moveq	r1, r3
   bb48e:	4610      	moveq	r0, r2
   bb490:	bd30      	pop	{r4, r5, pc}
   bb492:	ea91 0f03 	teq	r1, r3
   bb496:	bf1e      	ittt	ne
   bb498:	2100      	movne	r1, #0
   bb49a:	2000      	movne	r0, #0
   bb49c:	bd30      	popne	{r4, r5, pc}
   bb49e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bb4a2:	d105      	bne.n	bb4b0 <__adddf3+0x230>
   bb4a4:	0040      	lsls	r0, r0, #1
   bb4a6:	4149      	adcs	r1, r1
   bb4a8:	bf28      	it	cs
   bb4aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bb4ae:	bd30      	pop	{r4, r5, pc}
   bb4b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bb4b4:	bf3c      	itt	cc
   bb4b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bb4ba:	bd30      	popcc	{r4, r5, pc}
   bb4bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb4c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bb4c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb4c8:	f04f 0000 	mov.w	r0, #0
   bb4cc:	bd30      	pop	{r4, r5, pc}
   bb4ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb4d2:	bf1a      	itte	ne
   bb4d4:	4619      	movne	r1, r3
   bb4d6:	4610      	movne	r0, r2
   bb4d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bb4dc:	bf1c      	itt	ne
   bb4de:	460b      	movne	r3, r1
   bb4e0:	4602      	movne	r2, r0
   bb4e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb4e6:	bf06      	itte	eq
   bb4e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bb4ec:	ea91 0f03 	teqeq	r1, r3
   bb4f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bb4f4:	bd30      	pop	{r4, r5, pc}
   bb4f6:	bf00      	nop

000bb4f8 <__aeabi_ui2d>:
   bb4f8:	f090 0f00 	teq	r0, #0
   bb4fc:	bf04      	itt	eq
   bb4fe:	2100      	moveq	r1, #0
   bb500:	4770      	bxeq	lr
   bb502:	b530      	push	{r4, r5, lr}
   bb504:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb508:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb50c:	f04f 0500 	mov.w	r5, #0
   bb510:	f04f 0100 	mov.w	r1, #0
   bb514:	e750      	b.n	bb3b8 <__adddf3+0x138>
   bb516:	bf00      	nop

000bb518 <__aeabi_i2d>:
   bb518:	f090 0f00 	teq	r0, #0
   bb51c:	bf04      	itt	eq
   bb51e:	2100      	moveq	r1, #0
   bb520:	4770      	bxeq	lr
   bb522:	b530      	push	{r4, r5, lr}
   bb524:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb528:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb52c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bb530:	bf48      	it	mi
   bb532:	4240      	negmi	r0, r0
   bb534:	f04f 0100 	mov.w	r1, #0
   bb538:	e73e      	b.n	bb3b8 <__adddf3+0x138>
   bb53a:	bf00      	nop

000bb53c <__aeabi_f2d>:
   bb53c:	0042      	lsls	r2, r0, #1
   bb53e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bb542:	ea4f 0131 	mov.w	r1, r1, rrx
   bb546:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bb54a:	bf1f      	itttt	ne
   bb54c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bb550:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bb554:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bb558:	4770      	bxne	lr
   bb55a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bb55e:	bf08      	it	eq
   bb560:	4770      	bxeq	lr
   bb562:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bb566:	bf04      	itt	eq
   bb568:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bb56c:	4770      	bxeq	lr
   bb56e:	b530      	push	{r4, r5, lr}
   bb570:	f44f 7460 	mov.w	r4, #896	; 0x380
   bb574:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb578:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb57c:	e71c      	b.n	bb3b8 <__adddf3+0x138>
   bb57e:	bf00      	nop

000bb580 <__aeabi_ul2d>:
   bb580:	ea50 0201 	orrs.w	r2, r0, r1
   bb584:	bf08      	it	eq
   bb586:	4770      	bxeq	lr
   bb588:	b530      	push	{r4, r5, lr}
   bb58a:	f04f 0500 	mov.w	r5, #0
   bb58e:	e00a      	b.n	bb5a6 <__aeabi_l2d+0x16>

000bb590 <__aeabi_l2d>:
   bb590:	ea50 0201 	orrs.w	r2, r0, r1
   bb594:	bf08      	it	eq
   bb596:	4770      	bxeq	lr
   bb598:	b530      	push	{r4, r5, lr}
   bb59a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bb59e:	d502      	bpl.n	bb5a6 <__aeabi_l2d+0x16>
   bb5a0:	4240      	negs	r0, r0
   bb5a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb5a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb5aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb5ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bb5b2:	f43f aed8 	beq.w	bb366 <__adddf3+0xe6>
   bb5b6:	f04f 0203 	mov.w	r2, #3
   bb5ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb5be:	bf18      	it	ne
   bb5c0:	3203      	addne	r2, #3
   bb5c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb5c6:	bf18      	it	ne
   bb5c8:	3203      	addne	r2, #3
   bb5ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bb5ce:	f1c2 0320 	rsb	r3, r2, #32
   bb5d2:	fa00 fc03 	lsl.w	ip, r0, r3
   bb5d6:	fa20 f002 	lsr.w	r0, r0, r2
   bb5da:	fa01 fe03 	lsl.w	lr, r1, r3
   bb5de:	ea40 000e 	orr.w	r0, r0, lr
   bb5e2:	fa21 f102 	lsr.w	r1, r1, r2
   bb5e6:	4414      	add	r4, r2
   bb5e8:	e6bd      	b.n	bb366 <__adddf3+0xe6>
   bb5ea:	bf00      	nop

000bb5ec <__aeabi_dmul>:
   bb5ec:	b570      	push	{r4, r5, r6, lr}
   bb5ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb5f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb5f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb5fa:	bf1d      	ittte	ne
   bb5fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb600:	ea94 0f0c 	teqne	r4, ip
   bb604:	ea95 0f0c 	teqne	r5, ip
   bb608:	f000 f8de 	bleq	bb7c8 <__aeabi_dmul+0x1dc>
   bb60c:	442c      	add	r4, r5
   bb60e:	ea81 0603 	eor.w	r6, r1, r3
   bb612:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bb616:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bb61a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bb61e:	bf18      	it	ne
   bb620:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bb624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb628:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb62c:	d038      	beq.n	bb6a0 <__aeabi_dmul+0xb4>
   bb62e:	fba0 ce02 	umull	ip, lr, r0, r2
   bb632:	f04f 0500 	mov.w	r5, #0
   bb636:	fbe1 e502 	umlal	lr, r5, r1, r2
   bb63a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bb63e:	fbe0 e503 	umlal	lr, r5, r0, r3
   bb642:	f04f 0600 	mov.w	r6, #0
   bb646:	fbe1 5603 	umlal	r5, r6, r1, r3
   bb64a:	f09c 0f00 	teq	ip, #0
   bb64e:	bf18      	it	ne
   bb650:	f04e 0e01 	orrne.w	lr, lr, #1
   bb654:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bb658:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bb65c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bb660:	d204      	bcs.n	bb66c <__aeabi_dmul+0x80>
   bb662:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bb666:	416d      	adcs	r5, r5
   bb668:	eb46 0606 	adc.w	r6, r6, r6
   bb66c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bb670:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bb674:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bb678:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bb67c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bb680:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb684:	bf88      	it	hi
   bb686:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb68a:	d81e      	bhi.n	bb6ca <__aeabi_dmul+0xde>
   bb68c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bb690:	bf08      	it	eq
   bb692:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bb696:	f150 0000 	adcs.w	r0, r0, #0
   bb69a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb69e:	bd70      	pop	{r4, r5, r6, pc}
   bb6a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bb6a4:	ea46 0101 	orr.w	r1, r6, r1
   bb6a8:	ea40 0002 	orr.w	r0, r0, r2
   bb6ac:	ea81 0103 	eor.w	r1, r1, r3
   bb6b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bb6b4:	bfc2      	ittt	gt
   bb6b6:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb6ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb6be:	bd70      	popgt	{r4, r5, r6, pc}
   bb6c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb6c4:	f04f 0e00 	mov.w	lr, #0
   bb6c8:	3c01      	subs	r4, #1
   bb6ca:	f300 80ab 	bgt.w	bb824 <__aeabi_dmul+0x238>
   bb6ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bb6d2:	bfde      	ittt	le
   bb6d4:	2000      	movle	r0, #0
   bb6d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bb6da:	bd70      	pople	{r4, r5, r6, pc}
   bb6dc:	f1c4 0400 	rsb	r4, r4, #0
   bb6e0:	3c20      	subs	r4, #32
   bb6e2:	da35      	bge.n	bb750 <__aeabi_dmul+0x164>
   bb6e4:	340c      	adds	r4, #12
   bb6e6:	dc1b      	bgt.n	bb720 <__aeabi_dmul+0x134>
   bb6e8:	f104 0414 	add.w	r4, r4, #20
   bb6ec:	f1c4 0520 	rsb	r5, r4, #32
   bb6f0:	fa00 f305 	lsl.w	r3, r0, r5
   bb6f4:	fa20 f004 	lsr.w	r0, r0, r4
   bb6f8:	fa01 f205 	lsl.w	r2, r1, r5
   bb6fc:	ea40 0002 	orr.w	r0, r0, r2
   bb700:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bb704:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb70c:	fa21 f604 	lsr.w	r6, r1, r4
   bb710:	eb42 0106 	adc.w	r1, r2, r6
   bb714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb718:	bf08      	it	eq
   bb71a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb71e:	bd70      	pop	{r4, r5, r6, pc}
   bb720:	f1c4 040c 	rsb	r4, r4, #12
   bb724:	f1c4 0520 	rsb	r5, r4, #32
   bb728:	fa00 f304 	lsl.w	r3, r0, r4
   bb72c:	fa20 f005 	lsr.w	r0, r0, r5
   bb730:	fa01 f204 	lsl.w	r2, r1, r4
   bb734:	ea40 0002 	orr.w	r0, r0, r2
   bb738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb73c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb740:	f141 0100 	adc.w	r1, r1, #0
   bb744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb748:	bf08      	it	eq
   bb74a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb74e:	bd70      	pop	{r4, r5, r6, pc}
   bb750:	f1c4 0520 	rsb	r5, r4, #32
   bb754:	fa00 f205 	lsl.w	r2, r0, r5
   bb758:	ea4e 0e02 	orr.w	lr, lr, r2
   bb75c:	fa20 f304 	lsr.w	r3, r0, r4
   bb760:	fa01 f205 	lsl.w	r2, r1, r5
   bb764:	ea43 0302 	orr.w	r3, r3, r2
   bb768:	fa21 f004 	lsr.w	r0, r1, r4
   bb76c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb770:	fa21 f204 	lsr.w	r2, r1, r4
   bb774:	ea20 0002 	bic.w	r0, r0, r2
   bb778:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bb77c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb780:	bf08      	it	eq
   bb782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb786:	bd70      	pop	{r4, r5, r6, pc}
   bb788:	f094 0f00 	teq	r4, #0
   bb78c:	d10f      	bne.n	bb7ae <__aeabi_dmul+0x1c2>
   bb78e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bb792:	0040      	lsls	r0, r0, #1
   bb794:	eb41 0101 	adc.w	r1, r1, r1
   bb798:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb79c:	bf08      	it	eq
   bb79e:	3c01      	subeq	r4, #1
   bb7a0:	d0f7      	beq.n	bb792 <__aeabi_dmul+0x1a6>
   bb7a2:	ea41 0106 	orr.w	r1, r1, r6
   bb7a6:	f095 0f00 	teq	r5, #0
   bb7aa:	bf18      	it	ne
   bb7ac:	4770      	bxne	lr
   bb7ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bb7b2:	0052      	lsls	r2, r2, #1
   bb7b4:	eb43 0303 	adc.w	r3, r3, r3
   bb7b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bb7bc:	bf08      	it	eq
   bb7be:	3d01      	subeq	r5, #1
   bb7c0:	d0f7      	beq.n	bb7b2 <__aeabi_dmul+0x1c6>
   bb7c2:	ea43 0306 	orr.w	r3, r3, r6
   bb7c6:	4770      	bx	lr
   bb7c8:	ea94 0f0c 	teq	r4, ip
   bb7cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb7d0:	bf18      	it	ne
   bb7d2:	ea95 0f0c 	teqne	r5, ip
   bb7d6:	d00c      	beq.n	bb7f2 <__aeabi_dmul+0x206>
   bb7d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb7dc:	bf18      	it	ne
   bb7de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb7e2:	d1d1      	bne.n	bb788 <__aeabi_dmul+0x19c>
   bb7e4:	ea81 0103 	eor.w	r1, r1, r3
   bb7e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb7ec:	f04f 0000 	mov.w	r0, #0
   bb7f0:	bd70      	pop	{r4, r5, r6, pc}
   bb7f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb7f6:	bf06      	itte	eq
   bb7f8:	4610      	moveq	r0, r2
   bb7fa:	4619      	moveq	r1, r3
   bb7fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb800:	d019      	beq.n	bb836 <__aeabi_dmul+0x24a>
   bb802:	ea94 0f0c 	teq	r4, ip
   bb806:	d102      	bne.n	bb80e <__aeabi_dmul+0x222>
   bb808:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bb80c:	d113      	bne.n	bb836 <__aeabi_dmul+0x24a>
   bb80e:	ea95 0f0c 	teq	r5, ip
   bb812:	d105      	bne.n	bb820 <__aeabi_dmul+0x234>
   bb814:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bb818:	bf1c      	itt	ne
   bb81a:	4610      	movne	r0, r2
   bb81c:	4619      	movne	r1, r3
   bb81e:	d10a      	bne.n	bb836 <__aeabi_dmul+0x24a>
   bb820:	ea81 0103 	eor.w	r1, r1, r3
   bb824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb828:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb82c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb830:	f04f 0000 	mov.w	r0, #0
   bb834:	bd70      	pop	{r4, r5, r6, pc}
   bb836:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb83a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bb83e:	bd70      	pop	{r4, r5, r6, pc}

000bb840 <__aeabi_ddiv>:
   bb840:	b570      	push	{r4, r5, r6, lr}
   bb842:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb846:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb84a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb84e:	bf1d      	ittte	ne
   bb850:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb854:	ea94 0f0c 	teqne	r4, ip
   bb858:	ea95 0f0c 	teqne	r5, ip
   bb85c:	f000 f8a7 	bleq	bb9ae <__aeabi_ddiv+0x16e>
   bb860:	eba4 0405 	sub.w	r4, r4, r5
   bb864:	ea81 0e03 	eor.w	lr, r1, r3
   bb868:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb86c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb870:	f000 8088 	beq.w	bb984 <__aeabi_ddiv+0x144>
   bb874:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb878:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bb87c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bb880:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bb884:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bb888:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bb88c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bb890:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bb894:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bb898:	429d      	cmp	r5, r3
   bb89a:	bf08      	it	eq
   bb89c:	4296      	cmpeq	r6, r2
   bb89e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bb8a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bb8a6:	d202      	bcs.n	bb8ae <__aeabi_ddiv+0x6e>
   bb8a8:	085b      	lsrs	r3, r3, #1
   bb8aa:	ea4f 0232 	mov.w	r2, r2, rrx
   bb8ae:	1ab6      	subs	r6, r6, r2
   bb8b0:	eb65 0503 	sbc.w	r5, r5, r3
   bb8b4:	085b      	lsrs	r3, r3, #1
   bb8b6:	ea4f 0232 	mov.w	r2, r2, rrx
   bb8ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bb8be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bb8c2:	ebb6 0e02 	subs.w	lr, r6, r2
   bb8c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb8ca:	bf22      	ittt	cs
   bb8cc:	1ab6      	subcs	r6, r6, r2
   bb8ce:	4675      	movcs	r5, lr
   bb8d0:	ea40 000c 	orrcs.w	r0, r0, ip
   bb8d4:	085b      	lsrs	r3, r3, #1
   bb8d6:	ea4f 0232 	mov.w	r2, r2, rrx
   bb8da:	ebb6 0e02 	subs.w	lr, r6, r2
   bb8de:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb8e2:	bf22      	ittt	cs
   bb8e4:	1ab6      	subcs	r6, r6, r2
   bb8e6:	4675      	movcs	r5, lr
   bb8e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bb8ec:	085b      	lsrs	r3, r3, #1
   bb8ee:	ea4f 0232 	mov.w	r2, r2, rrx
   bb8f2:	ebb6 0e02 	subs.w	lr, r6, r2
   bb8f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb8fa:	bf22      	ittt	cs
   bb8fc:	1ab6      	subcs	r6, r6, r2
   bb8fe:	4675      	movcs	r5, lr
   bb900:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bb904:	085b      	lsrs	r3, r3, #1
   bb906:	ea4f 0232 	mov.w	r2, r2, rrx
   bb90a:	ebb6 0e02 	subs.w	lr, r6, r2
   bb90e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb912:	bf22      	ittt	cs
   bb914:	1ab6      	subcs	r6, r6, r2
   bb916:	4675      	movcs	r5, lr
   bb918:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bb91c:	ea55 0e06 	orrs.w	lr, r5, r6
   bb920:	d018      	beq.n	bb954 <__aeabi_ddiv+0x114>
   bb922:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bb926:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bb92a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bb92e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bb932:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bb936:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bb93a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bb93e:	d1c0      	bne.n	bb8c2 <__aeabi_ddiv+0x82>
   bb940:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb944:	d10b      	bne.n	bb95e <__aeabi_ddiv+0x11e>
   bb946:	ea41 0100 	orr.w	r1, r1, r0
   bb94a:	f04f 0000 	mov.w	r0, #0
   bb94e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bb952:	e7b6      	b.n	bb8c2 <__aeabi_ddiv+0x82>
   bb954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb958:	bf04      	itt	eq
   bb95a:	4301      	orreq	r1, r0
   bb95c:	2000      	moveq	r0, #0
   bb95e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb962:	bf88      	it	hi
   bb964:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb968:	f63f aeaf 	bhi.w	bb6ca <__aeabi_dmul+0xde>
   bb96c:	ebb5 0c03 	subs.w	ip, r5, r3
   bb970:	bf04      	itt	eq
   bb972:	ebb6 0c02 	subseq.w	ip, r6, r2
   bb976:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb97a:	f150 0000 	adcs.w	r0, r0, #0
   bb97e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb982:	bd70      	pop	{r4, r5, r6, pc}
   bb984:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bb988:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bb98c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bb990:	bfc2      	ittt	gt
   bb992:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb996:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb99a:	bd70      	popgt	{r4, r5, r6, pc}
   bb99c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb9a0:	f04f 0e00 	mov.w	lr, #0
   bb9a4:	3c01      	subs	r4, #1
   bb9a6:	e690      	b.n	bb6ca <__aeabi_dmul+0xde>
   bb9a8:	ea45 0e06 	orr.w	lr, r5, r6
   bb9ac:	e68d      	b.n	bb6ca <__aeabi_dmul+0xde>
   bb9ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb9b2:	ea94 0f0c 	teq	r4, ip
   bb9b6:	bf08      	it	eq
   bb9b8:	ea95 0f0c 	teqeq	r5, ip
   bb9bc:	f43f af3b 	beq.w	bb836 <__aeabi_dmul+0x24a>
   bb9c0:	ea94 0f0c 	teq	r4, ip
   bb9c4:	d10a      	bne.n	bb9dc <__aeabi_ddiv+0x19c>
   bb9c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb9ca:	f47f af34 	bne.w	bb836 <__aeabi_dmul+0x24a>
   bb9ce:	ea95 0f0c 	teq	r5, ip
   bb9d2:	f47f af25 	bne.w	bb820 <__aeabi_dmul+0x234>
   bb9d6:	4610      	mov	r0, r2
   bb9d8:	4619      	mov	r1, r3
   bb9da:	e72c      	b.n	bb836 <__aeabi_dmul+0x24a>
   bb9dc:	ea95 0f0c 	teq	r5, ip
   bb9e0:	d106      	bne.n	bb9f0 <__aeabi_ddiv+0x1b0>
   bb9e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb9e6:	f43f aefd 	beq.w	bb7e4 <__aeabi_dmul+0x1f8>
   bb9ea:	4610      	mov	r0, r2
   bb9ec:	4619      	mov	r1, r3
   bb9ee:	e722      	b.n	bb836 <__aeabi_dmul+0x24a>
   bb9f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb9f4:	bf18      	it	ne
   bb9f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb9fa:	f47f aec5 	bne.w	bb788 <__aeabi_dmul+0x19c>
   bb9fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bba02:	f47f af0d 	bne.w	bb820 <__aeabi_dmul+0x234>
   bba06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bba0a:	f47f aeeb 	bne.w	bb7e4 <__aeabi_dmul+0x1f8>
   bba0e:	e712      	b.n	bb836 <__aeabi_dmul+0x24a>

000bba10 <__gedf2>:
   bba10:	f04f 3cff 	mov.w	ip, #4294967295
   bba14:	e006      	b.n	bba24 <__cmpdf2+0x4>
   bba16:	bf00      	nop

000bba18 <__ledf2>:
   bba18:	f04f 0c01 	mov.w	ip, #1
   bba1c:	e002      	b.n	bba24 <__cmpdf2+0x4>
   bba1e:	bf00      	nop

000bba20 <__cmpdf2>:
   bba20:	f04f 0c01 	mov.w	ip, #1
   bba24:	f84d cd04 	str.w	ip, [sp, #-4]!
   bba28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bba2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bba30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bba34:	bf18      	it	ne
   bba36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bba3a:	d01b      	beq.n	bba74 <__cmpdf2+0x54>
   bba3c:	b001      	add	sp, #4
   bba3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bba42:	bf0c      	ite	eq
   bba44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bba48:	ea91 0f03 	teqne	r1, r3
   bba4c:	bf02      	ittt	eq
   bba4e:	ea90 0f02 	teqeq	r0, r2
   bba52:	2000      	moveq	r0, #0
   bba54:	4770      	bxeq	lr
   bba56:	f110 0f00 	cmn.w	r0, #0
   bba5a:	ea91 0f03 	teq	r1, r3
   bba5e:	bf58      	it	pl
   bba60:	4299      	cmppl	r1, r3
   bba62:	bf08      	it	eq
   bba64:	4290      	cmpeq	r0, r2
   bba66:	bf2c      	ite	cs
   bba68:	17d8      	asrcs	r0, r3, #31
   bba6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bba6e:	f040 0001 	orr.w	r0, r0, #1
   bba72:	4770      	bx	lr
   bba74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bba78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bba7c:	d102      	bne.n	bba84 <__cmpdf2+0x64>
   bba7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bba82:	d107      	bne.n	bba94 <__cmpdf2+0x74>
   bba84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bba88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bba8c:	d1d6      	bne.n	bba3c <__cmpdf2+0x1c>
   bba8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bba92:	d0d3      	beq.n	bba3c <__cmpdf2+0x1c>
   bba94:	f85d 0b04 	ldr.w	r0, [sp], #4
   bba98:	4770      	bx	lr
   bba9a:	bf00      	nop

000bba9c <__aeabi_cdrcmple>:
   bba9c:	4684      	mov	ip, r0
   bba9e:	4610      	mov	r0, r2
   bbaa0:	4662      	mov	r2, ip
   bbaa2:	468c      	mov	ip, r1
   bbaa4:	4619      	mov	r1, r3
   bbaa6:	4663      	mov	r3, ip
   bbaa8:	e000      	b.n	bbaac <__aeabi_cdcmpeq>
   bbaaa:	bf00      	nop

000bbaac <__aeabi_cdcmpeq>:
   bbaac:	b501      	push	{r0, lr}
   bbaae:	f7ff ffb7 	bl	bba20 <__cmpdf2>
   bbab2:	2800      	cmp	r0, #0
   bbab4:	bf48      	it	mi
   bbab6:	f110 0f00 	cmnmi.w	r0, #0
   bbaba:	bd01      	pop	{r0, pc}

000bbabc <__aeabi_dcmpeq>:
   bbabc:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbac0:	f7ff fff4 	bl	bbaac <__aeabi_cdcmpeq>
   bbac4:	bf0c      	ite	eq
   bbac6:	2001      	moveq	r0, #1
   bbac8:	2000      	movne	r0, #0
   bbaca:	f85d fb08 	ldr.w	pc, [sp], #8
   bbace:	bf00      	nop

000bbad0 <__aeabi_dcmplt>:
   bbad0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbad4:	f7ff ffea 	bl	bbaac <__aeabi_cdcmpeq>
   bbad8:	bf34      	ite	cc
   bbada:	2001      	movcc	r0, #1
   bbadc:	2000      	movcs	r0, #0
   bbade:	f85d fb08 	ldr.w	pc, [sp], #8
   bbae2:	bf00      	nop

000bbae4 <__aeabi_dcmple>:
   bbae4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbae8:	f7ff ffe0 	bl	bbaac <__aeabi_cdcmpeq>
   bbaec:	bf94      	ite	ls
   bbaee:	2001      	movls	r0, #1
   bbaf0:	2000      	movhi	r0, #0
   bbaf2:	f85d fb08 	ldr.w	pc, [sp], #8
   bbaf6:	bf00      	nop

000bbaf8 <__aeabi_dcmpge>:
   bbaf8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbafc:	f7ff ffce 	bl	bba9c <__aeabi_cdrcmple>
   bbb00:	bf94      	ite	ls
   bbb02:	2001      	movls	r0, #1
   bbb04:	2000      	movhi	r0, #0
   bbb06:	f85d fb08 	ldr.w	pc, [sp], #8
   bbb0a:	bf00      	nop

000bbb0c <__aeabi_dcmpgt>:
   bbb0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbb10:	f7ff ffc4 	bl	bba9c <__aeabi_cdrcmple>
   bbb14:	bf34      	ite	cc
   bbb16:	2001      	movcc	r0, #1
   bbb18:	2000      	movcs	r0, #0
   bbb1a:	f85d fb08 	ldr.w	pc, [sp], #8
   bbb1e:	bf00      	nop

000bbb20 <__aeabi_d2iz>:
   bbb20:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bbb24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bbb28:	d215      	bcs.n	bbb56 <__aeabi_d2iz+0x36>
   bbb2a:	d511      	bpl.n	bbb50 <__aeabi_d2iz+0x30>
   bbb2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bbb30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bbb34:	d912      	bls.n	bbb5c <__aeabi_d2iz+0x3c>
   bbb36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bbb3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bbb3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bbb42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bbb46:	fa23 f002 	lsr.w	r0, r3, r2
   bbb4a:	bf18      	it	ne
   bbb4c:	4240      	negne	r0, r0
   bbb4e:	4770      	bx	lr
   bbb50:	f04f 0000 	mov.w	r0, #0
   bbb54:	4770      	bx	lr
   bbb56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bbb5a:	d105      	bne.n	bbb68 <__aeabi_d2iz+0x48>
   bbb5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bbb60:	bf08      	it	eq
   bbb62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bbb66:	4770      	bx	lr
   bbb68:	f04f 0000 	mov.w	r0, #0
   bbb6c:	4770      	bx	lr
   bbb6e:	bf00      	nop

000bbb70 <__aeabi_d2uiz>:
   bbb70:	004a      	lsls	r2, r1, #1
   bbb72:	d211      	bcs.n	bbb98 <__aeabi_d2uiz+0x28>
   bbb74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bbb78:	d211      	bcs.n	bbb9e <__aeabi_d2uiz+0x2e>
   bbb7a:	d50d      	bpl.n	bbb98 <__aeabi_d2uiz+0x28>
   bbb7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bbb80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bbb84:	d40e      	bmi.n	bbba4 <__aeabi_d2uiz+0x34>
   bbb86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bbb8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bbb8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bbb92:	fa23 f002 	lsr.w	r0, r3, r2
   bbb96:	4770      	bx	lr
   bbb98:	f04f 0000 	mov.w	r0, #0
   bbb9c:	4770      	bx	lr
   bbb9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bbba2:	d102      	bne.n	bbbaa <__aeabi_d2uiz+0x3a>
   bbba4:	f04f 30ff 	mov.w	r0, #4294967295
   bbba8:	4770      	bx	lr
   bbbaa:	f04f 0000 	mov.w	r0, #0
   bbbae:	4770      	bx	lr

000bbbb0 <__aeabi_d2f>:
   bbbb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bbbb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bbbb8:	bf24      	itt	cs
   bbbba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bbbbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bbbc2:	d90d      	bls.n	bbbe0 <__aeabi_d2f+0x30>
   bbbc4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bbbc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bbbcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bbbd0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bbbd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bbbd8:	bf08      	it	eq
   bbbda:	f020 0001 	biceq.w	r0, r0, #1
   bbbde:	4770      	bx	lr
   bbbe0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bbbe4:	d121      	bne.n	bbc2a <__aeabi_d2f+0x7a>
   bbbe6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bbbea:	bfbc      	itt	lt
   bbbec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bbbf0:	4770      	bxlt	lr
   bbbf2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbbf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bbbfa:	f1c2 0218 	rsb	r2, r2, #24
   bbbfe:	f1c2 0c20 	rsb	ip, r2, #32
   bbc02:	fa10 f30c 	lsls.w	r3, r0, ip
   bbc06:	fa20 f002 	lsr.w	r0, r0, r2
   bbc0a:	bf18      	it	ne
   bbc0c:	f040 0001 	orrne.w	r0, r0, #1
   bbc10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bbc14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bbc18:	fa03 fc0c 	lsl.w	ip, r3, ip
   bbc1c:	ea40 000c 	orr.w	r0, r0, ip
   bbc20:	fa23 f302 	lsr.w	r3, r3, r2
   bbc24:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bbc28:	e7cc      	b.n	bbbc4 <__aeabi_d2f+0x14>
   bbc2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bbc2e:	d107      	bne.n	bbc40 <__aeabi_d2f+0x90>
   bbc30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bbc34:	bf1e      	ittt	ne
   bbc36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bbc3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bbc3e:	4770      	bxne	lr
   bbc40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bbc44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bbc48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bbc4c:	4770      	bx	lr
   bbc4e:	bf00      	nop

000bbc50 <__aeabi_d2ulz>:
   bbc50:	b5d0      	push	{r4, r6, r7, lr}
   bbc52:	4b0c      	ldr	r3, [pc, #48]	; (bbc84 <__aeabi_d2ulz+0x34>)
   bbc54:	2200      	movs	r2, #0
   bbc56:	4606      	mov	r6, r0
   bbc58:	460f      	mov	r7, r1
   bbc5a:	f7ff fcc7 	bl	bb5ec <__aeabi_dmul>
   bbc5e:	f7ff ff87 	bl	bbb70 <__aeabi_d2uiz>
   bbc62:	4604      	mov	r4, r0
   bbc64:	f7ff fc48 	bl	bb4f8 <__aeabi_ui2d>
   bbc68:	4b07      	ldr	r3, [pc, #28]	; (bbc88 <__aeabi_d2ulz+0x38>)
   bbc6a:	2200      	movs	r2, #0
   bbc6c:	f7ff fcbe 	bl	bb5ec <__aeabi_dmul>
   bbc70:	4602      	mov	r2, r0
   bbc72:	460b      	mov	r3, r1
   bbc74:	4630      	mov	r0, r6
   bbc76:	4639      	mov	r1, r7
   bbc78:	f7ff fb00 	bl	bb27c <__aeabi_dsub>
   bbc7c:	f7ff ff78 	bl	bbb70 <__aeabi_d2uiz>
   bbc80:	4621      	mov	r1, r4
   bbc82:	bdd0      	pop	{r4, r6, r7, pc}
   bbc84:	3df00000 	.word	0x3df00000
   bbc88:	41f00000 	.word	0x41f00000

000bbc8c <atexit>:
   bbc8c:	2300      	movs	r3, #0
   bbc8e:	4601      	mov	r1, r0
   bbc90:	461a      	mov	r2, r3
   bbc92:	4618      	mov	r0, r3
   bbc94:	f000 bfaa 	b.w	bcbec <__register_exitproc>

000bbc98 <atof>:
   bbc98:	2100      	movs	r1, #0
   bbc9a:	f000 bf0f 	b.w	bcabc <strtod>

000bbc9e <atoi>:
   bbc9e:	220a      	movs	r2, #10
   bbca0:	2100      	movs	r1, #0
   bbca2:	f000 bf99 	b.w	bcbd8 <strtol>

000bbca6 <memcmp>:
   bbca6:	b510      	push	{r4, lr}
   bbca8:	3901      	subs	r1, #1
   bbcaa:	4402      	add	r2, r0
   bbcac:	4290      	cmp	r0, r2
   bbcae:	d101      	bne.n	bbcb4 <memcmp+0xe>
   bbcb0:	2000      	movs	r0, #0
   bbcb2:	e005      	b.n	bbcc0 <memcmp+0x1a>
   bbcb4:	7803      	ldrb	r3, [r0, #0]
   bbcb6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bbcba:	42a3      	cmp	r3, r4
   bbcbc:	d001      	beq.n	bbcc2 <memcmp+0x1c>
   bbcbe:	1b18      	subs	r0, r3, r4
   bbcc0:	bd10      	pop	{r4, pc}
   bbcc2:	3001      	adds	r0, #1
   bbcc4:	e7f2      	b.n	bbcac <memcmp+0x6>

000bbcc6 <memcpy>:
   bbcc6:	440a      	add	r2, r1
   bbcc8:	4291      	cmp	r1, r2
   bbcca:	f100 33ff 	add.w	r3, r0, #4294967295
   bbcce:	d100      	bne.n	bbcd2 <memcpy+0xc>
   bbcd0:	4770      	bx	lr
   bbcd2:	b510      	push	{r4, lr}
   bbcd4:	f811 4b01 	ldrb.w	r4, [r1], #1
   bbcd8:	f803 4f01 	strb.w	r4, [r3, #1]!
   bbcdc:	4291      	cmp	r1, r2
   bbcde:	d1f9      	bne.n	bbcd4 <memcpy+0xe>
   bbce0:	bd10      	pop	{r4, pc}

000bbce2 <memmove>:
   bbce2:	4288      	cmp	r0, r1
   bbce4:	b510      	push	{r4, lr}
   bbce6:	eb01 0402 	add.w	r4, r1, r2
   bbcea:	d902      	bls.n	bbcf2 <memmove+0x10>
   bbcec:	4284      	cmp	r4, r0
   bbcee:	4623      	mov	r3, r4
   bbcf0:	d807      	bhi.n	bbd02 <memmove+0x20>
   bbcf2:	1e43      	subs	r3, r0, #1
   bbcf4:	42a1      	cmp	r1, r4
   bbcf6:	d008      	beq.n	bbd0a <memmove+0x28>
   bbcf8:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbcfc:	f803 2f01 	strb.w	r2, [r3, #1]!
   bbd00:	e7f8      	b.n	bbcf4 <memmove+0x12>
   bbd02:	4402      	add	r2, r0
   bbd04:	4601      	mov	r1, r0
   bbd06:	428a      	cmp	r2, r1
   bbd08:	d100      	bne.n	bbd0c <memmove+0x2a>
   bbd0a:	bd10      	pop	{r4, pc}
   bbd0c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bbd10:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bbd14:	e7f7      	b.n	bbd06 <memmove+0x24>

000bbd16 <memset>:
   bbd16:	4402      	add	r2, r0
   bbd18:	4603      	mov	r3, r0
   bbd1a:	4293      	cmp	r3, r2
   bbd1c:	d100      	bne.n	bbd20 <memset+0xa>
   bbd1e:	4770      	bx	lr
   bbd20:	f803 1b01 	strb.w	r1, [r3], #1
   bbd24:	e7f9      	b.n	bbd1a <memset+0x4>
	...

000bbd28 <srand>:
   bbd28:	b538      	push	{r3, r4, r5, lr}
   bbd2a:	4b10      	ldr	r3, [pc, #64]	; (bbd6c <srand+0x44>)
   bbd2c:	681d      	ldr	r5, [r3, #0]
   bbd2e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbd30:	4604      	mov	r4, r0
   bbd32:	b9b3      	cbnz	r3, bbd62 <srand+0x3a>
   bbd34:	2018      	movs	r0, #24
   bbd36:	f7fb fb6d 	bl	b7414 <malloc>
   bbd3a:	4602      	mov	r2, r0
   bbd3c:	63a8      	str	r0, [r5, #56]	; 0x38
   bbd3e:	b920      	cbnz	r0, bbd4a <srand+0x22>
   bbd40:	4b0b      	ldr	r3, [pc, #44]	; (bbd70 <srand+0x48>)
   bbd42:	480c      	ldr	r0, [pc, #48]	; (bbd74 <srand+0x4c>)
   bbd44:	2142      	movs	r1, #66	; 0x42
   bbd46:	f7fb fbb5 	bl	b74b4 <__assert_func>
   bbd4a:	490b      	ldr	r1, [pc, #44]	; (bbd78 <srand+0x50>)
   bbd4c:	4b0b      	ldr	r3, [pc, #44]	; (bbd7c <srand+0x54>)
   bbd4e:	e9c0 1300 	strd	r1, r3, [r0]
   bbd52:	4b0b      	ldr	r3, [pc, #44]	; (bbd80 <srand+0x58>)
   bbd54:	6083      	str	r3, [r0, #8]
   bbd56:	230b      	movs	r3, #11
   bbd58:	8183      	strh	r3, [r0, #12]
   bbd5a:	2100      	movs	r1, #0
   bbd5c:	2001      	movs	r0, #1
   bbd5e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bbd62:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbd64:	2200      	movs	r2, #0
   bbd66:	611c      	str	r4, [r3, #16]
   bbd68:	615a      	str	r2, [r3, #20]
   bbd6a:	bd38      	pop	{r3, r4, r5, pc}
   bbd6c:	2003db1c 	.word	0x2003db1c
   bbd70:	000be901 	.word	0x000be901
   bbd74:	000be918 	.word	0x000be918
   bbd78:	abcd330e 	.word	0xabcd330e
   bbd7c:	e66d1234 	.word	0xe66d1234
   bbd80:	0005deec 	.word	0x0005deec

000bbd84 <strcat>:
   bbd84:	b510      	push	{r4, lr}
   bbd86:	4602      	mov	r2, r0
   bbd88:	7814      	ldrb	r4, [r2, #0]
   bbd8a:	4613      	mov	r3, r2
   bbd8c:	3201      	adds	r2, #1
   bbd8e:	2c00      	cmp	r4, #0
   bbd90:	d1fa      	bne.n	bbd88 <strcat+0x4>
   bbd92:	3b01      	subs	r3, #1
   bbd94:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbd98:	f803 2f01 	strb.w	r2, [r3, #1]!
   bbd9c:	2a00      	cmp	r2, #0
   bbd9e:	d1f9      	bne.n	bbd94 <strcat+0x10>
   bbda0:	bd10      	pop	{r4, pc}

000bbda2 <strcmp>:
   bbda2:	f810 2b01 	ldrb.w	r2, [r0], #1
   bbda6:	f811 3b01 	ldrb.w	r3, [r1], #1
   bbdaa:	2a01      	cmp	r2, #1
   bbdac:	bf28      	it	cs
   bbdae:	429a      	cmpcs	r2, r3
   bbdb0:	d0f7      	beq.n	bbda2 <strcmp>
   bbdb2:	1ad0      	subs	r0, r2, r3
   bbdb4:	4770      	bx	lr

000bbdb6 <strcpy>:
   bbdb6:	4603      	mov	r3, r0
   bbdb8:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbdbc:	f803 2b01 	strb.w	r2, [r3], #1
   bbdc0:	2a00      	cmp	r2, #0
   bbdc2:	d1f9      	bne.n	bbdb8 <strcpy+0x2>
   bbdc4:	4770      	bx	lr
	...

000bbdc8 <strdup>:
   bbdc8:	4b02      	ldr	r3, [pc, #8]	; (bbdd4 <strdup+0xc>)
   bbdca:	4601      	mov	r1, r0
   bbdcc:	6818      	ldr	r0, [r3, #0]
   bbdce:	f000 b803 	b.w	bbdd8 <_strdup_r>
   bbdd2:	bf00      	nop
   bbdd4:	2003db1c 	.word	0x2003db1c

000bbdd8 <_strdup_r>:
   bbdd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bbdda:	4604      	mov	r4, r0
   bbddc:	4608      	mov	r0, r1
   bbdde:	460d      	mov	r5, r1
   bbde0:	f000 f80f 	bl	bbe02 <strlen>
   bbde4:	1c42      	adds	r2, r0, #1
   bbde6:	4611      	mov	r1, r2
   bbde8:	4620      	mov	r0, r4
   bbdea:	9201      	str	r2, [sp, #4]
   bbdec:	f7fb fb52 	bl	b7494 <_malloc_r>
   bbdf0:	4604      	mov	r4, r0
   bbdf2:	b118      	cbz	r0, bbdfc <_strdup_r+0x24>
   bbdf4:	9a01      	ldr	r2, [sp, #4]
   bbdf6:	4629      	mov	r1, r5
   bbdf8:	f7ff ff65 	bl	bbcc6 <memcpy>
   bbdfc:	4620      	mov	r0, r4
   bbdfe:	b003      	add	sp, #12
   bbe00:	bd30      	pop	{r4, r5, pc}

000bbe02 <strlen>:
   bbe02:	4603      	mov	r3, r0
   bbe04:	f813 2b01 	ldrb.w	r2, [r3], #1
   bbe08:	2a00      	cmp	r2, #0
   bbe0a:	d1fb      	bne.n	bbe04 <strlen+0x2>
   bbe0c:	1a18      	subs	r0, r3, r0
   bbe0e:	3801      	subs	r0, #1
   bbe10:	4770      	bx	lr

000bbe12 <strncmp>:
   bbe12:	b510      	push	{r4, lr}
   bbe14:	b17a      	cbz	r2, bbe36 <strncmp+0x24>
   bbe16:	4603      	mov	r3, r0
   bbe18:	3901      	subs	r1, #1
   bbe1a:	1884      	adds	r4, r0, r2
   bbe1c:	f813 0b01 	ldrb.w	r0, [r3], #1
   bbe20:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bbe24:	4290      	cmp	r0, r2
   bbe26:	d101      	bne.n	bbe2c <strncmp+0x1a>
   bbe28:	42a3      	cmp	r3, r4
   bbe2a:	d101      	bne.n	bbe30 <strncmp+0x1e>
   bbe2c:	1a80      	subs	r0, r0, r2
   bbe2e:	bd10      	pop	{r4, pc}
   bbe30:	2800      	cmp	r0, #0
   bbe32:	d1f3      	bne.n	bbe1c <strncmp+0xa>
   bbe34:	e7fa      	b.n	bbe2c <strncmp+0x1a>
   bbe36:	4610      	mov	r0, r2
   bbe38:	e7f9      	b.n	bbe2e <strncmp+0x1c>

000bbe3a <strncpy>:
   bbe3a:	b510      	push	{r4, lr}
   bbe3c:	3901      	subs	r1, #1
   bbe3e:	4603      	mov	r3, r0
   bbe40:	b132      	cbz	r2, bbe50 <strncpy+0x16>
   bbe42:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bbe46:	f803 4b01 	strb.w	r4, [r3], #1
   bbe4a:	3a01      	subs	r2, #1
   bbe4c:	2c00      	cmp	r4, #0
   bbe4e:	d1f7      	bne.n	bbe40 <strncpy+0x6>
   bbe50:	441a      	add	r2, r3
   bbe52:	2100      	movs	r1, #0
   bbe54:	4293      	cmp	r3, r2
   bbe56:	d100      	bne.n	bbe5a <strncpy+0x20>
   bbe58:	bd10      	pop	{r4, pc}
   bbe5a:	f803 1b01 	strb.w	r1, [r3], #1
   bbe5e:	e7f9      	b.n	bbe54 <strncpy+0x1a>

000bbe60 <strnlen>:
   bbe60:	b510      	push	{r4, lr}
   bbe62:	4602      	mov	r2, r0
   bbe64:	4401      	add	r1, r0
   bbe66:	428a      	cmp	r2, r1
   bbe68:	4613      	mov	r3, r2
   bbe6a:	d003      	beq.n	bbe74 <strnlen+0x14>
   bbe6c:	781c      	ldrb	r4, [r3, #0]
   bbe6e:	3201      	adds	r2, #1
   bbe70:	2c00      	cmp	r4, #0
   bbe72:	d1f8      	bne.n	bbe66 <strnlen+0x6>
   bbe74:	1a18      	subs	r0, r3, r0
   bbe76:	bd10      	pop	{r4, pc}

000bbe78 <sulp>:
   bbe78:	b570      	push	{r4, r5, r6, lr}
   bbe7a:	4604      	mov	r4, r0
   bbe7c:	460d      	mov	r5, r1
   bbe7e:	ec45 4b10 	vmov	d0, r4, r5
   bbe82:	4616      	mov	r6, r2
   bbe84:	f001 fe0c 	bl	bdaa0 <__ulp>
   bbe88:	ec51 0b10 	vmov	r0, r1, d0
   bbe8c:	b17e      	cbz	r6, bbeae <sulp+0x36>
   bbe8e:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bbe92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bbe96:	2b00      	cmp	r3, #0
   bbe98:	dd09      	ble.n	bbeae <sulp+0x36>
   bbe9a:	051b      	lsls	r3, r3, #20
   bbe9c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bbea0:	2400      	movs	r4, #0
   bbea2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bbea6:	4622      	mov	r2, r4
   bbea8:	462b      	mov	r3, r5
   bbeaa:	f7ff fb9f 	bl	bb5ec <__aeabi_dmul>
   bbeae:	bd70      	pop	{r4, r5, r6, pc}

000bbeb0 <_strtod_l>:
   bbeb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbeb4:	ed2d 8b02 	vpush	{d8}
   bbeb8:	b09d      	sub	sp, #116	; 0x74
   bbeba:	461f      	mov	r7, r3
   bbebc:	2300      	movs	r3, #0
   bbebe:	9318      	str	r3, [sp, #96]	; 0x60
   bbec0:	4ba2      	ldr	r3, [pc, #648]	; (bc14c <_strtod_l+0x29c>)
   bbec2:	9213      	str	r2, [sp, #76]	; 0x4c
   bbec4:	681b      	ldr	r3, [r3, #0]
   bbec6:	9305      	str	r3, [sp, #20]
   bbec8:	4604      	mov	r4, r0
   bbeca:	4618      	mov	r0, r3
   bbecc:	4688      	mov	r8, r1
   bbece:	f7ff ff98 	bl	bbe02 <strlen>
   bbed2:	f04f 0a00 	mov.w	sl, #0
   bbed6:	4605      	mov	r5, r0
   bbed8:	f04f 0b00 	mov.w	fp, #0
   bbedc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bbee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbee2:	781a      	ldrb	r2, [r3, #0]
   bbee4:	2a2b      	cmp	r2, #43	; 0x2b
   bbee6:	d04e      	beq.n	bbf86 <_strtod_l+0xd6>
   bbee8:	d83b      	bhi.n	bbf62 <_strtod_l+0xb2>
   bbeea:	2a0d      	cmp	r2, #13
   bbeec:	d834      	bhi.n	bbf58 <_strtod_l+0xa8>
   bbeee:	2a08      	cmp	r2, #8
   bbef0:	d834      	bhi.n	bbf5c <_strtod_l+0xac>
   bbef2:	2a00      	cmp	r2, #0
   bbef4:	d03e      	beq.n	bbf74 <_strtod_l+0xc4>
   bbef6:	2300      	movs	r3, #0
   bbef8:	930a      	str	r3, [sp, #40]	; 0x28
   bbefa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bbefc:	7833      	ldrb	r3, [r6, #0]
   bbefe:	2b30      	cmp	r3, #48	; 0x30
   bbf00:	f040 80b0 	bne.w	bc064 <_strtod_l+0x1b4>
   bbf04:	7873      	ldrb	r3, [r6, #1]
   bbf06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bbf0a:	2b58      	cmp	r3, #88	; 0x58
   bbf0c:	d168      	bne.n	bbfe0 <_strtod_l+0x130>
   bbf0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bbf10:	9301      	str	r3, [sp, #4]
   bbf12:	ab18      	add	r3, sp, #96	; 0x60
   bbf14:	9702      	str	r7, [sp, #8]
   bbf16:	9300      	str	r3, [sp, #0]
   bbf18:	4a8d      	ldr	r2, [pc, #564]	; (bc150 <_strtod_l+0x2a0>)
   bbf1a:	ab19      	add	r3, sp, #100	; 0x64
   bbf1c:	a917      	add	r1, sp, #92	; 0x5c
   bbf1e:	4620      	mov	r0, r4
   bbf20:	f000 ff2e 	bl	bcd80 <__gethex>
   bbf24:	f010 0707 	ands.w	r7, r0, #7
   bbf28:	4605      	mov	r5, r0
   bbf2a:	d005      	beq.n	bbf38 <_strtod_l+0x88>
   bbf2c:	2f06      	cmp	r7, #6
   bbf2e:	d12c      	bne.n	bbf8a <_strtod_l+0xda>
   bbf30:	3601      	adds	r6, #1
   bbf32:	2300      	movs	r3, #0
   bbf34:	9617      	str	r6, [sp, #92]	; 0x5c
   bbf36:	930a      	str	r3, [sp, #40]	; 0x28
   bbf38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bbf3a:	2b00      	cmp	r3, #0
   bbf3c:	f040 8590 	bne.w	bca60 <_strtod_l+0xbb0>
   bbf40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bbf42:	b1eb      	cbz	r3, bbf80 <_strtod_l+0xd0>
   bbf44:	4652      	mov	r2, sl
   bbf46:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bbf4a:	ec43 2b10 	vmov	d0, r2, r3
   bbf4e:	b01d      	add	sp, #116	; 0x74
   bbf50:	ecbd 8b02 	vpop	{d8}
   bbf54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbf58:	2a20      	cmp	r2, #32
   bbf5a:	d1cc      	bne.n	bbef6 <_strtod_l+0x46>
   bbf5c:	3301      	adds	r3, #1
   bbf5e:	9317      	str	r3, [sp, #92]	; 0x5c
   bbf60:	e7be      	b.n	bbee0 <_strtod_l+0x30>
   bbf62:	2a2d      	cmp	r2, #45	; 0x2d
   bbf64:	d1c7      	bne.n	bbef6 <_strtod_l+0x46>
   bbf66:	2201      	movs	r2, #1
   bbf68:	920a      	str	r2, [sp, #40]	; 0x28
   bbf6a:	1c5a      	adds	r2, r3, #1
   bbf6c:	9217      	str	r2, [sp, #92]	; 0x5c
   bbf6e:	785b      	ldrb	r3, [r3, #1]
   bbf70:	2b00      	cmp	r3, #0
   bbf72:	d1c2      	bne.n	bbefa <_strtod_l+0x4a>
   bbf74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bbf76:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bbf7a:	2b00      	cmp	r3, #0
   bbf7c:	f040 856e 	bne.w	bca5c <_strtod_l+0xbac>
   bbf80:	4652      	mov	r2, sl
   bbf82:	465b      	mov	r3, fp
   bbf84:	e7e1      	b.n	bbf4a <_strtod_l+0x9a>
   bbf86:	2200      	movs	r2, #0
   bbf88:	e7ee      	b.n	bbf68 <_strtod_l+0xb8>
   bbf8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bbf8c:	b13a      	cbz	r2, bbf9e <_strtod_l+0xee>
   bbf8e:	2135      	movs	r1, #53	; 0x35
   bbf90:	a81a      	add	r0, sp, #104	; 0x68
   bbf92:	f001 fe90 	bl	bdcb6 <__copybits>
   bbf96:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbf98:	4620      	mov	r0, r4
   bbf9a:	f001 fa4f 	bl	bd43c <_Bfree>
   bbf9e:	3f01      	subs	r7, #1
   bbfa0:	2f04      	cmp	r7, #4
   bbfa2:	d806      	bhi.n	bbfb2 <_strtod_l+0x102>
   bbfa4:	e8df f007 	tbb	[pc, r7]
   bbfa8:	1714030a 	.word	0x1714030a
   bbfac:	0a          	.byte	0x0a
   bbfad:	00          	.byte	0x00
   bbfae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bbfb2:	0728      	lsls	r0, r5, #28
   bbfb4:	d5c0      	bpl.n	bbf38 <_strtod_l+0x88>
   bbfb6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bbfba:	e7bd      	b.n	bbf38 <_strtod_l+0x88>
   bbfbc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bbfc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bbfc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bbfc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bbfca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bbfce:	e7f0      	b.n	bbfb2 <_strtod_l+0x102>
   bbfd0:	f8df b180 	ldr.w	fp, [pc, #384]	; bc154 <_strtod_l+0x2a4>
   bbfd4:	e7ed      	b.n	bbfb2 <_strtod_l+0x102>
   bbfd6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bbfda:	f04f 3aff 	mov.w	sl, #4294967295
   bbfde:	e7e8      	b.n	bbfb2 <_strtod_l+0x102>
   bbfe0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbfe2:	1c5a      	adds	r2, r3, #1
   bbfe4:	9217      	str	r2, [sp, #92]	; 0x5c
   bbfe6:	785b      	ldrb	r3, [r3, #1]
   bbfe8:	2b30      	cmp	r3, #48	; 0x30
   bbfea:	d0f9      	beq.n	bbfe0 <_strtod_l+0x130>
   bbfec:	2b00      	cmp	r3, #0
   bbfee:	d0a3      	beq.n	bbf38 <_strtod_l+0x88>
   bbff0:	2301      	movs	r3, #1
   bbff2:	f04f 0900 	mov.w	r9, #0
   bbff6:	9304      	str	r3, [sp, #16]
   bbff8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbffa:	9308      	str	r3, [sp, #32]
   bbffc:	f8cd 901c 	str.w	r9, [sp, #28]
   bc000:	464f      	mov	r7, r9
   bc002:	220a      	movs	r2, #10
   bc004:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bc006:	7806      	ldrb	r6, [r0, #0]
   bc008:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bc00c:	b2d9      	uxtb	r1, r3
   bc00e:	2909      	cmp	r1, #9
   bc010:	d92a      	bls.n	bc068 <_strtod_l+0x1b8>
   bc012:	9905      	ldr	r1, [sp, #20]
   bc014:	462a      	mov	r2, r5
   bc016:	f7ff fefc 	bl	bbe12 <strncmp>
   bc01a:	b398      	cbz	r0, bc084 <_strtod_l+0x1d4>
   bc01c:	2000      	movs	r0, #0
   bc01e:	4632      	mov	r2, r6
   bc020:	463d      	mov	r5, r7
   bc022:	9005      	str	r0, [sp, #20]
   bc024:	4603      	mov	r3, r0
   bc026:	2a65      	cmp	r2, #101	; 0x65
   bc028:	d001      	beq.n	bc02e <_strtod_l+0x17e>
   bc02a:	2a45      	cmp	r2, #69	; 0x45
   bc02c:	d118      	bne.n	bc060 <_strtod_l+0x1b0>
   bc02e:	b91d      	cbnz	r5, bc038 <_strtod_l+0x188>
   bc030:	9a04      	ldr	r2, [sp, #16]
   bc032:	4302      	orrs	r2, r0
   bc034:	d09e      	beq.n	bbf74 <_strtod_l+0xc4>
   bc036:	2500      	movs	r5, #0
   bc038:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bc03c:	f108 0201 	add.w	r2, r8, #1
   bc040:	9217      	str	r2, [sp, #92]	; 0x5c
   bc042:	f898 2001 	ldrb.w	r2, [r8, #1]
   bc046:	2a2b      	cmp	r2, #43	; 0x2b
   bc048:	d075      	beq.n	bc136 <_strtod_l+0x286>
   bc04a:	2a2d      	cmp	r2, #45	; 0x2d
   bc04c:	d07b      	beq.n	bc146 <_strtod_l+0x296>
   bc04e:	f04f 0c00 	mov.w	ip, #0
   bc052:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bc056:	2909      	cmp	r1, #9
   bc058:	f240 8082 	bls.w	bc160 <_strtod_l+0x2b0>
   bc05c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc060:	2600      	movs	r6, #0
   bc062:	e09d      	b.n	bc1a0 <_strtod_l+0x2f0>
   bc064:	2300      	movs	r3, #0
   bc066:	e7c4      	b.n	bbff2 <_strtod_l+0x142>
   bc068:	2f08      	cmp	r7, #8
   bc06a:	bfd8      	it	le
   bc06c:	9907      	ldrle	r1, [sp, #28]
   bc06e:	f100 0001 	add.w	r0, r0, #1
   bc072:	bfda      	itte	le
   bc074:	fb02 3301 	mlale	r3, r2, r1, r3
   bc078:	9307      	strle	r3, [sp, #28]
   bc07a:	fb02 3909 	mlagt	r9, r2, r9, r3
   bc07e:	3701      	adds	r7, #1
   bc080:	9017      	str	r0, [sp, #92]	; 0x5c
   bc082:	e7bf      	b.n	bc004 <_strtod_l+0x154>
   bc084:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc086:	195a      	adds	r2, r3, r5
   bc088:	9217      	str	r2, [sp, #92]	; 0x5c
   bc08a:	5d5a      	ldrb	r2, [r3, r5]
   bc08c:	2f00      	cmp	r7, #0
   bc08e:	d037      	beq.n	bc100 <_strtod_l+0x250>
   bc090:	9005      	str	r0, [sp, #20]
   bc092:	463d      	mov	r5, r7
   bc094:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bc098:	2b09      	cmp	r3, #9
   bc09a:	d912      	bls.n	bc0c2 <_strtod_l+0x212>
   bc09c:	2301      	movs	r3, #1
   bc09e:	e7c2      	b.n	bc026 <_strtod_l+0x176>
   bc0a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc0a2:	1c5a      	adds	r2, r3, #1
   bc0a4:	9217      	str	r2, [sp, #92]	; 0x5c
   bc0a6:	785a      	ldrb	r2, [r3, #1]
   bc0a8:	3001      	adds	r0, #1
   bc0aa:	2a30      	cmp	r2, #48	; 0x30
   bc0ac:	d0f8      	beq.n	bc0a0 <_strtod_l+0x1f0>
   bc0ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bc0b2:	2b08      	cmp	r3, #8
   bc0b4:	f200 84d9 	bhi.w	bca6a <_strtod_l+0xbba>
   bc0b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc0ba:	9005      	str	r0, [sp, #20]
   bc0bc:	2000      	movs	r0, #0
   bc0be:	9308      	str	r3, [sp, #32]
   bc0c0:	4605      	mov	r5, r0
   bc0c2:	3a30      	subs	r2, #48	; 0x30
   bc0c4:	f100 0301 	add.w	r3, r0, #1
   bc0c8:	d014      	beq.n	bc0f4 <_strtod_l+0x244>
   bc0ca:	9905      	ldr	r1, [sp, #20]
   bc0cc:	4419      	add	r1, r3
   bc0ce:	9105      	str	r1, [sp, #20]
   bc0d0:	462b      	mov	r3, r5
   bc0d2:	eb00 0e05 	add.w	lr, r0, r5
   bc0d6:	210a      	movs	r1, #10
   bc0d8:	4573      	cmp	r3, lr
   bc0da:	d113      	bne.n	bc104 <_strtod_l+0x254>
   bc0dc:	182b      	adds	r3, r5, r0
   bc0de:	2b08      	cmp	r3, #8
   bc0e0:	f105 0501 	add.w	r5, r5, #1
   bc0e4:	4405      	add	r5, r0
   bc0e6:	dc1c      	bgt.n	bc122 <_strtod_l+0x272>
   bc0e8:	9907      	ldr	r1, [sp, #28]
   bc0ea:	230a      	movs	r3, #10
   bc0ec:	fb03 2301 	mla	r3, r3, r1, r2
   bc0f0:	9307      	str	r3, [sp, #28]
   bc0f2:	2300      	movs	r3, #0
   bc0f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc0f6:	1c51      	adds	r1, r2, #1
   bc0f8:	9117      	str	r1, [sp, #92]	; 0x5c
   bc0fa:	7852      	ldrb	r2, [r2, #1]
   bc0fc:	4618      	mov	r0, r3
   bc0fe:	e7c9      	b.n	bc094 <_strtod_l+0x1e4>
   bc100:	4638      	mov	r0, r7
   bc102:	e7d2      	b.n	bc0aa <_strtod_l+0x1fa>
   bc104:	2b08      	cmp	r3, #8
   bc106:	dc04      	bgt.n	bc112 <_strtod_l+0x262>
   bc108:	9e07      	ldr	r6, [sp, #28]
   bc10a:	434e      	muls	r6, r1
   bc10c:	9607      	str	r6, [sp, #28]
   bc10e:	3301      	adds	r3, #1
   bc110:	e7e2      	b.n	bc0d8 <_strtod_l+0x228>
   bc112:	f103 0c01 	add.w	ip, r3, #1
   bc116:	f1bc 0f10 	cmp.w	ip, #16
   bc11a:	bfd8      	it	le
   bc11c:	fb01 f909 	mulle.w	r9, r1, r9
   bc120:	e7f5      	b.n	bc10e <_strtod_l+0x25e>
   bc122:	2d10      	cmp	r5, #16
   bc124:	bfdc      	itt	le
   bc126:	230a      	movle	r3, #10
   bc128:	fb03 2909 	mlale	r9, r3, r9, r2
   bc12c:	e7e1      	b.n	bc0f2 <_strtod_l+0x242>
   bc12e:	2300      	movs	r3, #0
   bc130:	9305      	str	r3, [sp, #20]
   bc132:	2301      	movs	r3, #1
   bc134:	e77c      	b.n	bc030 <_strtod_l+0x180>
   bc136:	f04f 0c00 	mov.w	ip, #0
   bc13a:	f108 0202 	add.w	r2, r8, #2
   bc13e:	9217      	str	r2, [sp, #92]	; 0x5c
   bc140:	f898 2002 	ldrb.w	r2, [r8, #2]
   bc144:	e785      	b.n	bc052 <_strtod_l+0x1a2>
   bc146:	f04f 0c01 	mov.w	ip, #1
   bc14a:	e7f6      	b.n	bc13a <_strtod_l+0x28a>
   bc14c:	000beb90 	.word	0x000beb90
   bc150:	000be9a4 	.word	0x000be9a4
   bc154:	7ff00000 	.word	0x7ff00000
   bc158:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc15a:	1c51      	adds	r1, r2, #1
   bc15c:	9117      	str	r1, [sp, #92]	; 0x5c
   bc15e:	7852      	ldrb	r2, [r2, #1]
   bc160:	2a30      	cmp	r2, #48	; 0x30
   bc162:	d0f9      	beq.n	bc158 <_strtod_l+0x2a8>
   bc164:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bc168:	2908      	cmp	r1, #8
   bc16a:	f63f af79 	bhi.w	bc060 <_strtod_l+0x1b0>
   bc16e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bc172:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc174:	9206      	str	r2, [sp, #24]
   bc176:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc178:	1c51      	adds	r1, r2, #1
   bc17a:	9117      	str	r1, [sp, #92]	; 0x5c
   bc17c:	7852      	ldrb	r2, [r2, #1]
   bc17e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bc182:	2e09      	cmp	r6, #9
   bc184:	d937      	bls.n	bc1f6 <_strtod_l+0x346>
   bc186:	9e06      	ldr	r6, [sp, #24]
   bc188:	1b89      	subs	r1, r1, r6
   bc18a:	2908      	cmp	r1, #8
   bc18c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bc190:	dc02      	bgt.n	bc198 <_strtod_l+0x2e8>
   bc192:	4576      	cmp	r6, lr
   bc194:	bfa8      	it	ge
   bc196:	4676      	movge	r6, lr
   bc198:	f1bc 0f00 	cmp.w	ip, #0
   bc19c:	d000      	beq.n	bc1a0 <_strtod_l+0x2f0>
   bc19e:	4276      	negs	r6, r6
   bc1a0:	2d00      	cmp	r5, #0
   bc1a2:	d14d      	bne.n	bc240 <_strtod_l+0x390>
   bc1a4:	9904      	ldr	r1, [sp, #16]
   bc1a6:	4301      	orrs	r1, r0
   bc1a8:	f47f aec6 	bne.w	bbf38 <_strtod_l+0x88>
   bc1ac:	2b00      	cmp	r3, #0
   bc1ae:	f47f aee1 	bne.w	bbf74 <_strtod_l+0xc4>
   bc1b2:	2a69      	cmp	r2, #105	; 0x69
   bc1b4:	d027      	beq.n	bc206 <_strtod_l+0x356>
   bc1b6:	dc24      	bgt.n	bc202 <_strtod_l+0x352>
   bc1b8:	2a49      	cmp	r2, #73	; 0x49
   bc1ba:	d024      	beq.n	bc206 <_strtod_l+0x356>
   bc1bc:	2a4e      	cmp	r2, #78	; 0x4e
   bc1be:	f47f aed9 	bne.w	bbf74 <_strtod_l+0xc4>
   bc1c2:	499f      	ldr	r1, [pc, #636]	; (bc440 <_strtod_l+0x590>)
   bc1c4:	a817      	add	r0, sp, #92	; 0x5c
   bc1c6:	f001 f833 	bl	bd230 <__match>
   bc1ca:	2800      	cmp	r0, #0
   bc1cc:	f43f aed2 	beq.w	bbf74 <_strtod_l+0xc4>
   bc1d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc1d2:	781b      	ldrb	r3, [r3, #0]
   bc1d4:	2b28      	cmp	r3, #40	; 0x28
   bc1d6:	d12d      	bne.n	bc234 <_strtod_l+0x384>
   bc1d8:	499a      	ldr	r1, [pc, #616]	; (bc444 <_strtod_l+0x594>)
   bc1da:	aa1a      	add	r2, sp, #104	; 0x68
   bc1dc:	a817      	add	r0, sp, #92	; 0x5c
   bc1de:	f001 f83b 	bl	bd258 <__hexnan>
   bc1e2:	2805      	cmp	r0, #5
   bc1e4:	d126      	bne.n	bc234 <_strtod_l+0x384>
   bc1e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bc1e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bc1ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bc1f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bc1f4:	e6a0      	b.n	bbf38 <_strtod_l+0x88>
   bc1f6:	210a      	movs	r1, #10
   bc1f8:	fb01 2e0e 	mla	lr, r1, lr, r2
   bc1fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bc200:	e7b9      	b.n	bc176 <_strtod_l+0x2c6>
   bc202:	2a6e      	cmp	r2, #110	; 0x6e
   bc204:	e7db      	b.n	bc1be <_strtod_l+0x30e>
   bc206:	4990      	ldr	r1, [pc, #576]	; (bc448 <_strtod_l+0x598>)
   bc208:	a817      	add	r0, sp, #92	; 0x5c
   bc20a:	f001 f811 	bl	bd230 <__match>
   bc20e:	2800      	cmp	r0, #0
   bc210:	f43f aeb0 	beq.w	bbf74 <_strtod_l+0xc4>
   bc214:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc216:	498d      	ldr	r1, [pc, #564]	; (bc44c <_strtod_l+0x59c>)
   bc218:	3b01      	subs	r3, #1
   bc21a:	a817      	add	r0, sp, #92	; 0x5c
   bc21c:	9317      	str	r3, [sp, #92]	; 0x5c
   bc21e:	f001 f807 	bl	bd230 <__match>
   bc222:	b910      	cbnz	r0, bc22a <_strtod_l+0x37a>
   bc224:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc226:	3301      	adds	r3, #1
   bc228:	9317      	str	r3, [sp, #92]	; 0x5c
   bc22a:	f8df b230 	ldr.w	fp, [pc, #560]	; bc45c <_strtod_l+0x5ac>
   bc22e:	f04f 0a00 	mov.w	sl, #0
   bc232:	e681      	b.n	bbf38 <_strtod_l+0x88>
   bc234:	4886      	ldr	r0, [pc, #536]	; (bc450 <_strtod_l+0x5a0>)
   bc236:	f001 fd93 	bl	bdd60 <nan>
   bc23a:	ec5b ab10 	vmov	sl, fp, d0
   bc23e:	e67b      	b.n	bbf38 <_strtod_l+0x88>
   bc240:	9b05      	ldr	r3, [sp, #20]
   bc242:	9807      	ldr	r0, [sp, #28]
   bc244:	1af3      	subs	r3, r6, r3
   bc246:	2f00      	cmp	r7, #0
   bc248:	bf08      	it	eq
   bc24a:	462f      	moveq	r7, r5
   bc24c:	2d10      	cmp	r5, #16
   bc24e:	9306      	str	r3, [sp, #24]
   bc250:	46a8      	mov	r8, r5
   bc252:	bfa8      	it	ge
   bc254:	f04f 0810 	movge.w	r8, #16
   bc258:	f7ff f94e 	bl	bb4f8 <__aeabi_ui2d>
   bc25c:	2d09      	cmp	r5, #9
   bc25e:	4682      	mov	sl, r0
   bc260:	468b      	mov	fp, r1
   bc262:	dd13      	ble.n	bc28c <_strtod_l+0x3dc>
   bc264:	4b7b      	ldr	r3, [pc, #492]	; (bc454 <_strtod_l+0x5a4>)
   bc266:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bc26a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bc26e:	f7ff f9bd 	bl	bb5ec <__aeabi_dmul>
   bc272:	4682      	mov	sl, r0
   bc274:	4648      	mov	r0, r9
   bc276:	468b      	mov	fp, r1
   bc278:	f7ff f93e 	bl	bb4f8 <__aeabi_ui2d>
   bc27c:	4602      	mov	r2, r0
   bc27e:	460b      	mov	r3, r1
   bc280:	4650      	mov	r0, sl
   bc282:	4659      	mov	r1, fp
   bc284:	f7fe fffc 	bl	bb280 <__adddf3>
   bc288:	4682      	mov	sl, r0
   bc28a:	468b      	mov	fp, r1
   bc28c:	2d0f      	cmp	r5, #15
   bc28e:	dc38      	bgt.n	bc302 <_strtod_l+0x452>
   bc290:	9b06      	ldr	r3, [sp, #24]
   bc292:	2b00      	cmp	r3, #0
   bc294:	f43f ae50 	beq.w	bbf38 <_strtod_l+0x88>
   bc298:	dd24      	ble.n	bc2e4 <_strtod_l+0x434>
   bc29a:	2b16      	cmp	r3, #22
   bc29c:	dc0b      	bgt.n	bc2b6 <_strtod_l+0x406>
   bc29e:	496d      	ldr	r1, [pc, #436]	; (bc454 <_strtod_l+0x5a4>)
   bc2a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bc2a4:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc2a8:	4652      	mov	r2, sl
   bc2aa:	465b      	mov	r3, fp
   bc2ac:	f7ff f99e 	bl	bb5ec <__aeabi_dmul>
   bc2b0:	4682      	mov	sl, r0
   bc2b2:	468b      	mov	fp, r1
   bc2b4:	e640      	b.n	bbf38 <_strtod_l+0x88>
   bc2b6:	9a06      	ldr	r2, [sp, #24]
   bc2b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bc2bc:	4293      	cmp	r3, r2
   bc2be:	db20      	blt.n	bc302 <_strtod_l+0x452>
   bc2c0:	4c64      	ldr	r4, [pc, #400]	; (bc454 <_strtod_l+0x5a4>)
   bc2c2:	f1c5 050f 	rsb	r5, r5, #15
   bc2c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bc2ca:	4652      	mov	r2, sl
   bc2cc:	465b      	mov	r3, fp
   bc2ce:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc2d2:	f7ff f98b 	bl	bb5ec <__aeabi_dmul>
   bc2d6:	9b06      	ldr	r3, [sp, #24]
   bc2d8:	1b5d      	subs	r5, r3, r5
   bc2da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bc2de:	e9d4 2300 	ldrd	r2, r3, [r4]
   bc2e2:	e7e3      	b.n	bc2ac <_strtod_l+0x3fc>
   bc2e4:	9b06      	ldr	r3, [sp, #24]
   bc2e6:	3316      	adds	r3, #22
   bc2e8:	db0b      	blt.n	bc302 <_strtod_l+0x452>
   bc2ea:	9b05      	ldr	r3, [sp, #20]
   bc2ec:	1b9e      	subs	r6, r3, r6
   bc2ee:	4b59      	ldr	r3, [pc, #356]	; (bc454 <_strtod_l+0x5a4>)
   bc2f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bc2f4:	e9d6 2300 	ldrd	r2, r3, [r6]
   bc2f8:	4650      	mov	r0, sl
   bc2fa:	4659      	mov	r1, fp
   bc2fc:	f7ff faa0 	bl	bb840 <__aeabi_ddiv>
   bc300:	e7d6      	b.n	bc2b0 <_strtod_l+0x400>
   bc302:	9b06      	ldr	r3, [sp, #24]
   bc304:	eba5 0808 	sub.w	r8, r5, r8
   bc308:	4498      	add	r8, r3
   bc30a:	f1b8 0f00 	cmp.w	r8, #0
   bc30e:	dd74      	ble.n	bc3fa <_strtod_l+0x54a>
   bc310:	f018 030f 	ands.w	r3, r8, #15
   bc314:	d00a      	beq.n	bc32c <_strtod_l+0x47c>
   bc316:	494f      	ldr	r1, [pc, #316]	; (bc454 <_strtod_l+0x5a4>)
   bc318:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bc31c:	4652      	mov	r2, sl
   bc31e:	465b      	mov	r3, fp
   bc320:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc324:	f7ff f962 	bl	bb5ec <__aeabi_dmul>
   bc328:	4682      	mov	sl, r0
   bc32a:	468b      	mov	fp, r1
   bc32c:	f038 080f 	bics.w	r8, r8, #15
   bc330:	d04f      	beq.n	bc3d2 <_strtod_l+0x522>
   bc332:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bc336:	dd22      	ble.n	bc37e <_strtod_l+0x4ce>
   bc338:	2500      	movs	r5, #0
   bc33a:	462e      	mov	r6, r5
   bc33c:	9507      	str	r5, [sp, #28]
   bc33e:	9505      	str	r5, [sp, #20]
   bc340:	2322      	movs	r3, #34	; 0x22
   bc342:	f8df b118 	ldr.w	fp, [pc, #280]	; bc45c <_strtod_l+0x5ac>
   bc346:	6023      	str	r3, [r4, #0]
   bc348:	f04f 0a00 	mov.w	sl, #0
   bc34c:	9b07      	ldr	r3, [sp, #28]
   bc34e:	2b00      	cmp	r3, #0
   bc350:	f43f adf2 	beq.w	bbf38 <_strtod_l+0x88>
   bc354:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc356:	4620      	mov	r0, r4
   bc358:	f001 f870 	bl	bd43c <_Bfree>
   bc35c:	9905      	ldr	r1, [sp, #20]
   bc35e:	4620      	mov	r0, r4
   bc360:	f001 f86c 	bl	bd43c <_Bfree>
   bc364:	4631      	mov	r1, r6
   bc366:	4620      	mov	r0, r4
   bc368:	f001 f868 	bl	bd43c <_Bfree>
   bc36c:	9907      	ldr	r1, [sp, #28]
   bc36e:	4620      	mov	r0, r4
   bc370:	f001 f864 	bl	bd43c <_Bfree>
   bc374:	4629      	mov	r1, r5
   bc376:	4620      	mov	r0, r4
   bc378:	f001 f860 	bl	bd43c <_Bfree>
   bc37c:	e5dc      	b.n	bbf38 <_strtod_l+0x88>
   bc37e:	4b36      	ldr	r3, [pc, #216]	; (bc458 <_strtod_l+0x5a8>)
   bc380:	9304      	str	r3, [sp, #16]
   bc382:	2300      	movs	r3, #0
   bc384:	ea4f 1828 	mov.w	r8, r8, asr #4
   bc388:	4650      	mov	r0, sl
   bc38a:	4659      	mov	r1, fp
   bc38c:	4699      	mov	r9, r3
   bc38e:	f1b8 0f01 	cmp.w	r8, #1
   bc392:	dc21      	bgt.n	bc3d8 <_strtod_l+0x528>
   bc394:	b10b      	cbz	r3, bc39a <_strtod_l+0x4ea>
   bc396:	4682      	mov	sl, r0
   bc398:	468b      	mov	fp, r1
   bc39a:	4b2f      	ldr	r3, [pc, #188]	; (bc458 <_strtod_l+0x5a8>)
   bc39c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bc3a0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bc3a4:	4652      	mov	r2, sl
   bc3a6:	465b      	mov	r3, fp
   bc3a8:	e9d9 0100 	ldrd	r0, r1, [r9]
   bc3ac:	f7ff f91e 	bl	bb5ec <__aeabi_dmul>
   bc3b0:	4b2a      	ldr	r3, [pc, #168]	; (bc45c <_strtod_l+0x5ac>)
   bc3b2:	460a      	mov	r2, r1
   bc3b4:	400b      	ands	r3, r1
   bc3b6:	492a      	ldr	r1, [pc, #168]	; (bc460 <_strtod_l+0x5b0>)
   bc3b8:	428b      	cmp	r3, r1
   bc3ba:	4682      	mov	sl, r0
   bc3bc:	d8bc      	bhi.n	bc338 <_strtod_l+0x488>
   bc3be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bc3c2:	428b      	cmp	r3, r1
   bc3c4:	bf86      	itte	hi
   bc3c6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bc464 <_strtod_l+0x5b4>
   bc3ca:	f04f 3aff 	movhi.w	sl, #4294967295
   bc3ce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bc3d2:	2300      	movs	r3, #0
   bc3d4:	9304      	str	r3, [sp, #16]
   bc3d6:	e084      	b.n	bc4e2 <_strtod_l+0x632>
   bc3d8:	f018 0f01 	tst.w	r8, #1
   bc3dc:	d005      	beq.n	bc3ea <_strtod_l+0x53a>
   bc3de:	9b04      	ldr	r3, [sp, #16]
   bc3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc3e4:	f7ff f902 	bl	bb5ec <__aeabi_dmul>
   bc3e8:	2301      	movs	r3, #1
   bc3ea:	9a04      	ldr	r2, [sp, #16]
   bc3ec:	3208      	adds	r2, #8
   bc3ee:	f109 0901 	add.w	r9, r9, #1
   bc3f2:	ea4f 0868 	mov.w	r8, r8, asr #1
   bc3f6:	9204      	str	r2, [sp, #16]
   bc3f8:	e7c9      	b.n	bc38e <_strtod_l+0x4de>
   bc3fa:	d0ea      	beq.n	bc3d2 <_strtod_l+0x522>
   bc3fc:	f1c8 0800 	rsb	r8, r8, #0
   bc400:	f018 020f 	ands.w	r2, r8, #15
   bc404:	d00a      	beq.n	bc41c <_strtod_l+0x56c>
   bc406:	4b13      	ldr	r3, [pc, #76]	; (bc454 <_strtod_l+0x5a4>)
   bc408:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bc40c:	4650      	mov	r0, sl
   bc40e:	4659      	mov	r1, fp
   bc410:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc414:	f7ff fa14 	bl	bb840 <__aeabi_ddiv>
   bc418:	4682      	mov	sl, r0
   bc41a:	468b      	mov	fp, r1
   bc41c:	ea5f 1828 	movs.w	r8, r8, asr #4
   bc420:	d0d7      	beq.n	bc3d2 <_strtod_l+0x522>
   bc422:	f1b8 0f1f 	cmp.w	r8, #31
   bc426:	dd1f      	ble.n	bc468 <_strtod_l+0x5b8>
   bc428:	2500      	movs	r5, #0
   bc42a:	462e      	mov	r6, r5
   bc42c:	9507      	str	r5, [sp, #28]
   bc42e:	9505      	str	r5, [sp, #20]
   bc430:	2322      	movs	r3, #34	; 0x22
   bc432:	f04f 0a00 	mov.w	sl, #0
   bc436:	f04f 0b00 	mov.w	fp, #0
   bc43a:	6023      	str	r3, [r4, #0]
   bc43c:	e786      	b.n	bc34c <_strtod_l+0x49c>
   bc43e:	bf00      	nop
   bc440:	000be99e 	.word	0x000be99e
   bc444:	000be9b8 	.word	0x000be9b8
   bc448:	000be995 	.word	0x000be995
   bc44c:	000be998 	.word	0x000be998
   bc450:	000be225 	.word	0x000be225
   bc454:	000bec50 	.word	0x000bec50
   bc458:	000bec28 	.word	0x000bec28
   bc45c:	7ff00000 	.word	0x7ff00000
   bc460:	7ca00000 	.word	0x7ca00000
   bc464:	7fefffff 	.word	0x7fefffff
   bc468:	f018 0310 	ands.w	r3, r8, #16
   bc46c:	bf18      	it	ne
   bc46e:	236a      	movne	r3, #106	; 0x6a
   bc470:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bc820 <_strtod_l+0x970>
   bc474:	9304      	str	r3, [sp, #16]
   bc476:	4650      	mov	r0, sl
   bc478:	4659      	mov	r1, fp
   bc47a:	2300      	movs	r3, #0
   bc47c:	f018 0f01 	tst.w	r8, #1
   bc480:	d004      	beq.n	bc48c <_strtod_l+0x5dc>
   bc482:	e9d9 2300 	ldrd	r2, r3, [r9]
   bc486:	f7ff f8b1 	bl	bb5ec <__aeabi_dmul>
   bc48a:	2301      	movs	r3, #1
   bc48c:	ea5f 0868 	movs.w	r8, r8, asr #1
   bc490:	f109 0908 	add.w	r9, r9, #8
   bc494:	d1f2      	bne.n	bc47c <_strtod_l+0x5cc>
   bc496:	b10b      	cbz	r3, bc49c <_strtod_l+0x5ec>
   bc498:	4682      	mov	sl, r0
   bc49a:	468b      	mov	fp, r1
   bc49c:	9b04      	ldr	r3, [sp, #16]
   bc49e:	b1c3      	cbz	r3, bc4d2 <_strtod_l+0x622>
   bc4a0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bc4a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bc4a8:	2b00      	cmp	r3, #0
   bc4aa:	4659      	mov	r1, fp
   bc4ac:	dd11      	ble.n	bc4d2 <_strtod_l+0x622>
   bc4ae:	2b1f      	cmp	r3, #31
   bc4b0:	f340 8124 	ble.w	bc6fc <_strtod_l+0x84c>
   bc4b4:	2b34      	cmp	r3, #52	; 0x34
   bc4b6:	bfde      	ittt	le
   bc4b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bc4bc:	f04f 33ff 	movle.w	r3, #4294967295
   bc4c0:	fa03 f202 	lslle.w	r2, r3, r2
   bc4c4:	f04f 0a00 	mov.w	sl, #0
   bc4c8:	bfcc      	ite	gt
   bc4ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bc4ce:	ea02 0b01 	andle.w	fp, r2, r1
   bc4d2:	2200      	movs	r2, #0
   bc4d4:	2300      	movs	r3, #0
   bc4d6:	4650      	mov	r0, sl
   bc4d8:	4659      	mov	r1, fp
   bc4da:	f7ff faef 	bl	bbabc <__aeabi_dcmpeq>
   bc4de:	2800      	cmp	r0, #0
   bc4e0:	d1a2      	bne.n	bc428 <_strtod_l+0x578>
   bc4e2:	9b07      	ldr	r3, [sp, #28]
   bc4e4:	9300      	str	r3, [sp, #0]
   bc4e6:	9908      	ldr	r1, [sp, #32]
   bc4e8:	462b      	mov	r3, r5
   bc4ea:	463a      	mov	r2, r7
   bc4ec:	4620      	mov	r0, r4
   bc4ee:	f001 f80d 	bl	bd50c <__s2b>
   bc4f2:	9007      	str	r0, [sp, #28]
   bc4f4:	2800      	cmp	r0, #0
   bc4f6:	f43f af1f 	beq.w	bc338 <_strtod_l+0x488>
   bc4fa:	9b05      	ldr	r3, [sp, #20]
   bc4fc:	1b9e      	subs	r6, r3, r6
   bc4fe:	9b06      	ldr	r3, [sp, #24]
   bc500:	2b00      	cmp	r3, #0
   bc502:	bfb4      	ite	lt
   bc504:	4633      	movlt	r3, r6
   bc506:	2300      	movge	r3, #0
   bc508:	930c      	str	r3, [sp, #48]	; 0x30
   bc50a:	9b06      	ldr	r3, [sp, #24]
   bc50c:	2500      	movs	r5, #0
   bc50e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bc512:	9312      	str	r3, [sp, #72]	; 0x48
   bc514:	462e      	mov	r6, r5
   bc516:	9b07      	ldr	r3, [sp, #28]
   bc518:	4620      	mov	r0, r4
   bc51a:	6859      	ldr	r1, [r3, #4]
   bc51c:	f000 ff4e 	bl	bd3bc <_Balloc>
   bc520:	9005      	str	r0, [sp, #20]
   bc522:	2800      	cmp	r0, #0
   bc524:	f43f af0c 	beq.w	bc340 <_strtod_l+0x490>
   bc528:	9b07      	ldr	r3, [sp, #28]
   bc52a:	691a      	ldr	r2, [r3, #16]
   bc52c:	3202      	adds	r2, #2
   bc52e:	f103 010c 	add.w	r1, r3, #12
   bc532:	0092      	lsls	r2, r2, #2
   bc534:	300c      	adds	r0, #12
   bc536:	f7ff fbc6 	bl	bbcc6 <memcpy>
   bc53a:	ec4b ab10 	vmov	d0, sl, fp
   bc53e:	aa1a      	add	r2, sp, #104	; 0x68
   bc540:	a919      	add	r1, sp, #100	; 0x64
   bc542:	4620      	mov	r0, r4
   bc544:	f001 fb28 	bl	bdb98 <__d2b>
   bc548:	ec4b ab18 	vmov	d8, sl, fp
   bc54c:	9018      	str	r0, [sp, #96]	; 0x60
   bc54e:	2800      	cmp	r0, #0
   bc550:	f43f aef6 	beq.w	bc340 <_strtod_l+0x490>
   bc554:	2101      	movs	r1, #1
   bc556:	4620      	mov	r0, r4
   bc558:	f001 f872 	bl	bd640 <__i2b>
   bc55c:	4606      	mov	r6, r0
   bc55e:	2800      	cmp	r0, #0
   bc560:	f43f aeee 	beq.w	bc340 <_strtod_l+0x490>
   bc564:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bc566:	9904      	ldr	r1, [sp, #16]
   bc568:	2b00      	cmp	r3, #0
   bc56a:	bfab      	itete	ge
   bc56c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bc56e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bc570:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bc572:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bc576:	bfac      	ite	ge
   bc578:	eb03 0902 	addge.w	r9, r3, r2
   bc57c:	1ad7      	sublt	r7, r2, r3
   bc57e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bc580:	eba3 0801 	sub.w	r8, r3, r1
   bc584:	4490      	add	r8, r2
   bc586:	4ba1      	ldr	r3, [pc, #644]	; (bc80c <_strtod_l+0x95c>)
   bc588:	f108 38ff 	add.w	r8, r8, #4294967295
   bc58c:	4598      	cmp	r8, r3
   bc58e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bc592:	f280 80c7 	bge.w	bc724 <_strtod_l+0x874>
   bc596:	eba3 0308 	sub.w	r3, r3, r8
   bc59a:	2b1f      	cmp	r3, #31
   bc59c:	eba2 0203 	sub.w	r2, r2, r3
   bc5a0:	f04f 0101 	mov.w	r1, #1
   bc5a4:	f300 80b1 	bgt.w	bc70a <_strtod_l+0x85a>
   bc5a8:	fa01 f303 	lsl.w	r3, r1, r3
   bc5ac:	930d      	str	r3, [sp, #52]	; 0x34
   bc5ae:	2300      	movs	r3, #0
   bc5b0:	9308      	str	r3, [sp, #32]
   bc5b2:	eb09 0802 	add.w	r8, r9, r2
   bc5b6:	9b04      	ldr	r3, [sp, #16]
   bc5b8:	45c1      	cmp	r9, r8
   bc5ba:	4417      	add	r7, r2
   bc5bc:	441f      	add	r7, r3
   bc5be:	464b      	mov	r3, r9
   bc5c0:	bfa8      	it	ge
   bc5c2:	4643      	movge	r3, r8
   bc5c4:	42bb      	cmp	r3, r7
   bc5c6:	bfa8      	it	ge
   bc5c8:	463b      	movge	r3, r7
   bc5ca:	2b00      	cmp	r3, #0
   bc5cc:	bfc2      	ittt	gt
   bc5ce:	eba8 0803 	subgt.w	r8, r8, r3
   bc5d2:	1aff      	subgt	r7, r7, r3
   bc5d4:	eba9 0903 	subgt.w	r9, r9, r3
   bc5d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bc5da:	2b00      	cmp	r3, #0
   bc5dc:	dd17      	ble.n	bc60e <_strtod_l+0x75e>
   bc5de:	4631      	mov	r1, r6
   bc5e0:	461a      	mov	r2, r3
   bc5e2:	4620      	mov	r0, r4
   bc5e4:	f001 f8ec 	bl	bd7c0 <__pow5mult>
   bc5e8:	4606      	mov	r6, r0
   bc5ea:	2800      	cmp	r0, #0
   bc5ec:	f43f aea8 	beq.w	bc340 <_strtod_l+0x490>
   bc5f0:	4601      	mov	r1, r0
   bc5f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bc5f4:	4620      	mov	r0, r4
   bc5f6:	f001 f839 	bl	bd66c <__multiply>
   bc5fa:	900b      	str	r0, [sp, #44]	; 0x2c
   bc5fc:	2800      	cmp	r0, #0
   bc5fe:	f43f ae9f 	beq.w	bc340 <_strtod_l+0x490>
   bc602:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc604:	4620      	mov	r0, r4
   bc606:	f000 ff19 	bl	bd43c <_Bfree>
   bc60a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc60c:	9318      	str	r3, [sp, #96]	; 0x60
   bc60e:	f1b8 0f00 	cmp.w	r8, #0
   bc612:	f300 808c 	bgt.w	bc72e <_strtod_l+0x87e>
   bc616:	9b06      	ldr	r3, [sp, #24]
   bc618:	2b00      	cmp	r3, #0
   bc61a:	dd08      	ble.n	bc62e <_strtod_l+0x77e>
   bc61c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bc61e:	9905      	ldr	r1, [sp, #20]
   bc620:	4620      	mov	r0, r4
   bc622:	f001 f8cd 	bl	bd7c0 <__pow5mult>
   bc626:	9005      	str	r0, [sp, #20]
   bc628:	2800      	cmp	r0, #0
   bc62a:	f43f ae89 	beq.w	bc340 <_strtod_l+0x490>
   bc62e:	2f00      	cmp	r7, #0
   bc630:	dd08      	ble.n	bc644 <_strtod_l+0x794>
   bc632:	9905      	ldr	r1, [sp, #20]
   bc634:	463a      	mov	r2, r7
   bc636:	4620      	mov	r0, r4
   bc638:	f001 f91c 	bl	bd874 <__lshift>
   bc63c:	9005      	str	r0, [sp, #20]
   bc63e:	2800      	cmp	r0, #0
   bc640:	f43f ae7e 	beq.w	bc340 <_strtod_l+0x490>
   bc644:	f1b9 0f00 	cmp.w	r9, #0
   bc648:	dd08      	ble.n	bc65c <_strtod_l+0x7ac>
   bc64a:	4631      	mov	r1, r6
   bc64c:	464a      	mov	r2, r9
   bc64e:	4620      	mov	r0, r4
   bc650:	f001 f910 	bl	bd874 <__lshift>
   bc654:	4606      	mov	r6, r0
   bc656:	2800      	cmp	r0, #0
   bc658:	f43f ae72 	beq.w	bc340 <_strtod_l+0x490>
   bc65c:	9a05      	ldr	r2, [sp, #20]
   bc65e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc660:	4620      	mov	r0, r4
   bc662:	f001 f993 	bl	bd98c <__mdiff>
   bc666:	4605      	mov	r5, r0
   bc668:	2800      	cmp	r0, #0
   bc66a:	f43f ae69 	beq.w	bc340 <_strtod_l+0x490>
   bc66e:	68c3      	ldr	r3, [r0, #12]
   bc670:	930b      	str	r3, [sp, #44]	; 0x2c
   bc672:	2300      	movs	r3, #0
   bc674:	60c3      	str	r3, [r0, #12]
   bc676:	4631      	mov	r1, r6
   bc678:	f001 f96c 	bl	bd954 <__mcmp>
   bc67c:	2800      	cmp	r0, #0
   bc67e:	da60      	bge.n	bc742 <_strtod_l+0x892>
   bc680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc682:	ea53 030a 	orrs.w	r3, r3, sl
   bc686:	f040 8082 	bne.w	bc78e <_strtod_l+0x8de>
   bc68a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc68e:	2b00      	cmp	r3, #0
   bc690:	d17d      	bne.n	bc78e <_strtod_l+0x8de>
   bc692:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bc696:	0d1b      	lsrs	r3, r3, #20
   bc698:	051b      	lsls	r3, r3, #20
   bc69a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bc69e:	d976      	bls.n	bc78e <_strtod_l+0x8de>
   bc6a0:	696b      	ldr	r3, [r5, #20]
   bc6a2:	b913      	cbnz	r3, bc6aa <_strtod_l+0x7fa>
   bc6a4:	692b      	ldr	r3, [r5, #16]
   bc6a6:	2b01      	cmp	r3, #1
   bc6a8:	dd71      	ble.n	bc78e <_strtod_l+0x8de>
   bc6aa:	4629      	mov	r1, r5
   bc6ac:	2201      	movs	r2, #1
   bc6ae:	4620      	mov	r0, r4
   bc6b0:	f001 f8e0 	bl	bd874 <__lshift>
   bc6b4:	4631      	mov	r1, r6
   bc6b6:	4605      	mov	r5, r0
   bc6b8:	f001 f94c 	bl	bd954 <__mcmp>
   bc6bc:	2800      	cmp	r0, #0
   bc6be:	dd66      	ble.n	bc78e <_strtod_l+0x8de>
   bc6c0:	9904      	ldr	r1, [sp, #16]
   bc6c2:	4a53      	ldr	r2, [pc, #332]	; (bc810 <_strtod_l+0x960>)
   bc6c4:	465b      	mov	r3, fp
   bc6c6:	2900      	cmp	r1, #0
   bc6c8:	f000 8081 	beq.w	bc7ce <_strtod_l+0x91e>
   bc6cc:	ea02 010b 	and.w	r1, r2, fp
   bc6d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bc6d4:	dc7b      	bgt.n	bc7ce <_strtod_l+0x91e>
   bc6d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bc6da:	f77f aea9 	ble.w	bc430 <_strtod_l+0x580>
   bc6de:	4b4d      	ldr	r3, [pc, #308]	; (bc814 <_strtod_l+0x964>)
   bc6e0:	4650      	mov	r0, sl
   bc6e2:	4659      	mov	r1, fp
   bc6e4:	2200      	movs	r2, #0
   bc6e6:	f7fe ff81 	bl	bb5ec <__aeabi_dmul>
   bc6ea:	460b      	mov	r3, r1
   bc6ec:	4303      	orrs	r3, r0
   bc6ee:	bf08      	it	eq
   bc6f0:	2322      	moveq	r3, #34	; 0x22
   bc6f2:	4682      	mov	sl, r0
   bc6f4:	468b      	mov	fp, r1
   bc6f6:	bf08      	it	eq
   bc6f8:	6023      	streq	r3, [r4, #0]
   bc6fa:	e62b      	b.n	bc354 <_strtod_l+0x4a4>
   bc6fc:	f04f 32ff 	mov.w	r2, #4294967295
   bc700:	fa02 f303 	lsl.w	r3, r2, r3
   bc704:	ea03 0a0a 	and.w	sl, r3, sl
   bc708:	e6e3      	b.n	bc4d2 <_strtod_l+0x622>
   bc70a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bc70e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bc712:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bc716:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bc71a:	fa01 f308 	lsl.w	r3, r1, r8
   bc71e:	9308      	str	r3, [sp, #32]
   bc720:	910d      	str	r1, [sp, #52]	; 0x34
   bc722:	e746      	b.n	bc5b2 <_strtod_l+0x702>
   bc724:	2300      	movs	r3, #0
   bc726:	9308      	str	r3, [sp, #32]
   bc728:	2301      	movs	r3, #1
   bc72a:	930d      	str	r3, [sp, #52]	; 0x34
   bc72c:	e741      	b.n	bc5b2 <_strtod_l+0x702>
   bc72e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc730:	4642      	mov	r2, r8
   bc732:	4620      	mov	r0, r4
   bc734:	f001 f89e 	bl	bd874 <__lshift>
   bc738:	9018      	str	r0, [sp, #96]	; 0x60
   bc73a:	2800      	cmp	r0, #0
   bc73c:	f47f af6b 	bne.w	bc616 <_strtod_l+0x766>
   bc740:	e5fe      	b.n	bc340 <_strtod_l+0x490>
   bc742:	465f      	mov	r7, fp
   bc744:	d16e      	bne.n	bc824 <_strtod_l+0x974>
   bc746:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bc748:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc74c:	b342      	cbz	r2, bc7a0 <_strtod_l+0x8f0>
   bc74e:	4a32      	ldr	r2, [pc, #200]	; (bc818 <_strtod_l+0x968>)
   bc750:	4293      	cmp	r3, r2
   bc752:	d128      	bne.n	bc7a6 <_strtod_l+0x8f6>
   bc754:	9b04      	ldr	r3, [sp, #16]
   bc756:	4651      	mov	r1, sl
   bc758:	b1eb      	cbz	r3, bc796 <_strtod_l+0x8e6>
   bc75a:	4b2d      	ldr	r3, [pc, #180]	; (bc810 <_strtod_l+0x960>)
   bc75c:	403b      	ands	r3, r7
   bc75e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bc762:	f04f 32ff 	mov.w	r2, #4294967295
   bc766:	d819      	bhi.n	bc79c <_strtod_l+0x8ec>
   bc768:	0d1b      	lsrs	r3, r3, #20
   bc76a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bc76e:	fa02 f303 	lsl.w	r3, r2, r3
   bc772:	4299      	cmp	r1, r3
   bc774:	d117      	bne.n	bc7a6 <_strtod_l+0x8f6>
   bc776:	4b29      	ldr	r3, [pc, #164]	; (bc81c <_strtod_l+0x96c>)
   bc778:	429f      	cmp	r7, r3
   bc77a:	d102      	bne.n	bc782 <_strtod_l+0x8d2>
   bc77c:	3101      	adds	r1, #1
   bc77e:	f43f addf 	beq.w	bc340 <_strtod_l+0x490>
   bc782:	4b23      	ldr	r3, [pc, #140]	; (bc810 <_strtod_l+0x960>)
   bc784:	403b      	ands	r3, r7
   bc786:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bc78a:	f04f 0a00 	mov.w	sl, #0
   bc78e:	9b04      	ldr	r3, [sp, #16]
   bc790:	2b00      	cmp	r3, #0
   bc792:	d1a4      	bne.n	bc6de <_strtod_l+0x82e>
   bc794:	e5de      	b.n	bc354 <_strtod_l+0x4a4>
   bc796:	f04f 33ff 	mov.w	r3, #4294967295
   bc79a:	e7ea      	b.n	bc772 <_strtod_l+0x8c2>
   bc79c:	4613      	mov	r3, r2
   bc79e:	e7e8      	b.n	bc772 <_strtod_l+0x8c2>
   bc7a0:	ea53 030a 	orrs.w	r3, r3, sl
   bc7a4:	d08c      	beq.n	bc6c0 <_strtod_l+0x810>
   bc7a6:	9b08      	ldr	r3, [sp, #32]
   bc7a8:	b1db      	cbz	r3, bc7e2 <_strtod_l+0x932>
   bc7aa:	423b      	tst	r3, r7
   bc7ac:	d0ef      	beq.n	bc78e <_strtod_l+0x8de>
   bc7ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc7b0:	9a04      	ldr	r2, [sp, #16]
   bc7b2:	4650      	mov	r0, sl
   bc7b4:	4659      	mov	r1, fp
   bc7b6:	b1c3      	cbz	r3, bc7ea <_strtod_l+0x93a>
   bc7b8:	f7ff fb5e 	bl	bbe78 <sulp>
   bc7bc:	4602      	mov	r2, r0
   bc7be:	460b      	mov	r3, r1
   bc7c0:	ec51 0b18 	vmov	r0, r1, d8
   bc7c4:	f7fe fd5c 	bl	bb280 <__adddf3>
   bc7c8:	4682      	mov	sl, r0
   bc7ca:	468b      	mov	fp, r1
   bc7cc:	e7df      	b.n	bc78e <_strtod_l+0x8de>
   bc7ce:	4013      	ands	r3, r2
   bc7d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bc7d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bc7d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bc7dc:	f04f 3aff 	mov.w	sl, #4294967295
   bc7e0:	e7d5      	b.n	bc78e <_strtod_l+0x8de>
   bc7e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bc7e4:	ea13 0f0a 	tst.w	r3, sl
   bc7e8:	e7e0      	b.n	bc7ac <_strtod_l+0x8fc>
   bc7ea:	f7ff fb45 	bl	bbe78 <sulp>
   bc7ee:	4602      	mov	r2, r0
   bc7f0:	460b      	mov	r3, r1
   bc7f2:	ec51 0b18 	vmov	r0, r1, d8
   bc7f6:	f7fe fd41 	bl	bb27c <__aeabi_dsub>
   bc7fa:	2200      	movs	r2, #0
   bc7fc:	2300      	movs	r3, #0
   bc7fe:	4682      	mov	sl, r0
   bc800:	468b      	mov	fp, r1
   bc802:	f7ff f95b 	bl	bbabc <__aeabi_dcmpeq>
   bc806:	2800      	cmp	r0, #0
   bc808:	d0c1      	beq.n	bc78e <_strtod_l+0x8de>
   bc80a:	e611      	b.n	bc430 <_strtod_l+0x580>
   bc80c:	fffffc02 	.word	0xfffffc02
   bc810:	7ff00000 	.word	0x7ff00000
   bc814:	39500000 	.word	0x39500000
   bc818:	000fffff 	.word	0x000fffff
   bc81c:	7fefffff 	.word	0x7fefffff
   bc820:	000be9d0 	.word	0x000be9d0
   bc824:	4631      	mov	r1, r6
   bc826:	4628      	mov	r0, r5
   bc828:	f001 fa12 	bl	bdc50 <__ratio>
   bc82c:	ec59 8b10 	vmov	r8, r9, d0
   bc830:	ee10 0a10 	vmov	r0, s0
   bc834:	2200      	movs	r2, #0
   bc836:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bc83a:	4649      	mov	r1, r9
   bc83c:	f7ff f952 	bl	bbae4 <__aeabi_dcmple>
   bc840:	2800      	cmp	r0, #0
   bc842:	d07a      	beq.n	bc93a <_strtod_l+0xa8a>
   bc844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc846:	2b00      	cmp	r3, #0
   bc848:	d04a      	beq.n	bc8e0 <_strtod_l+0xa30>
   bc84a:	4b95      	ldr	r3, [pc, #596]	; (bcaa0 <_strtod_l+0xbf0>)
   bc84c:	2200      	movs	r2, #0
   bc84e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc852:	f8df 924c 	ldr.w	r9, [pc, #588]	; bcaa0 <_strtod_l+0xbf0>
   bc856:	f04f 0800 	mov.w	r8, #0
   bc85a:	4b92      	ldr	r3, [pc, #584]	; (bcaa4 <_strtod_l+0xbf4>)
   bc85c:	403b      	ands	r3, r7
   bc85e:	930d      	str	r3, [sp, #52]	; 0x34
   bc860:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc862:	4b91      	ldr	r3, [pc, #580]	; (bcaa8 <_strtod_l+0xbf8>)
   bc864:	429a      	cmp	r2, r3
   bc866:	f040 80b0 	bne.w	bc9ca <_strtod_l+0xb1a>
   bc86a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc86e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bc872:	ec4b ab10 	vmov	d0, sl, fp
   bc876:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bc87a:	f001 f911 	bl	bdaa0 <__ulp>
   bc87e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc882:	ec53 2b10 	vmov	r2, r3, d0
   bc886:	f7fe feb1 	bl	bb5ec <__aeabi_dmul>
   bc88a:	4652      	mov	r2, sl
   bc88c:	465b      	mov	r3, fp
   bc88e:	f7fe fcf7 	bl	bb280 <__adddf3>
   bc892:	460b      	mov	r3, r1
   bc894:	4983      	ldr	r1, [pc, #524]	; (bcaa4 <_strtod_l+0xbf4>)
   bc896:	4a85      	ldr	r2, [pc, #532]	; (bcaac <_strtod_l+0xbfc>)
   bc898:	4019      	ands	r1, r3
   bc89a:	4291      	cmp	r1, r2
   bc89c:	4682      	mov	sl, r0
   bc89e:	d960      	bls.n	bc962 <_strtod_l+0xab2>
   bc8a0:	ee18 3a90 	vmov	r3, s17
   bc8a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bc8a8:	4293      	cmp	r3, r2
   bc8aa:	d104      	bne.n	bc8b6 <_strtod_l+0xa06>
   bc8ac:	ee18 3a10 	vmov	r3, s16
   bc8b0:	3301      	adds	r3, #1
   bc8b2:	f43f ad45 	beq.w	bc340 <_strtod_l+0x490>
   bc8b6:	f8df b200 	ldr.w	fp, [pc, #512]	; bcab8 <_strtod_l+0xc08>
   bc8ba:	f04f 3aff 	mov.w	sl, #4294967295
   bc8be:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc8c0:	4620      	mov	r0, r4
   bc8c2:	f000 fdbb 	bl	bd43c <_Bfree>
   bc8c6:	9905      	ldr	r1, [sp, #20]
   bc8c8:	4620      	mov	r0, r4
   bc8ca:	f000 fdb7 	bl	bd43c <_Bfree>
   bc8ce:	4631      	mov	r1, r6
   bc8d0:	4620      	mov	r0, r4
   bc8d2:	f000 fdb3 	bl	bd43c <_Bfree>
   bc8d6:	4629      	mov	r1, r5
   bc8d8:	4620      	mov	r0, r4
   bc8da:	f000 fdaf 	bl	bd43c <_Bfree>
   bc8de:	e61a      	b.n	bc516 <_strtod_l+0x666>
   bc8e0:	f1ba 0f00 	cmp.w	sl, #0
   bc8e4:	d11b      	bne.n	bc91e <_strtod_l+0xa6e>
   bc8e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc8ea:	b9f3      	cbnz	r3, bc92a <_strtod_l+0xa7a>
   bc8ec:	4b6c      	ldr	r3, [pc, #432]	; (bcaa0 <_strtod_l+0xbf0>)
   bc8ee:	2200      	movs	r2, #0
   bc8f0:	4640      	mov	r0, r8
   bc8f2:	4649      	mov	r1, r9
   bc8f4:	f7ff f8ec 	bl	bbad0 <__aeabi_dcmplt>
   bc8f8:	b9d0      	cbnz	r0, bc930 <_strtod_l+0xa80>
   bc8fa:	4640      	mov	r0, r8
   bc8fc:	4649      	mov	r1, r9
   bc8fe:	4b6c      	ldr	r3, [pc, #432]	; (bcab0 <_strtod_l+0xc00>)
   bc900:	2200      	movs	r2, #0
   bc902:	f7fe fe73 	bl	bb5ec <__aeabi_dmul>
   bc906:	4680      	mov	r8, r0
   bc908:	4689      	mov	r9, r1
   bc90a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bc90e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bc912:	9315      	str	r3, [sp, #84]	; 0x54
   bc914:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bc918:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc91c:	e79d      	b.n	bc85a <_strtod_l+0x9aa>
   bc91e:	f1ba 0f01 	cmp.w	sl, #1
   bc922:	d102      	bne.n	bc92a <_strtod_l+0xa7a>
   bc924:	2f00      	cmp	r7, #0
   bc926:	f43f ad83 	beq.w	bc430 <_strtod_l+0x580>
   bc92a:	4b62      	ldr	r3, [pc, #392]	; (bcab4 <_strtod_l+0xc04>)
   bc92c:	2200      	movs	r2, #0
   bc92e:	e78e      	b.n	bc84e <_strtod_l+0x99e>
   bc930:	f8df 917c 	ldr.w	r9, [pc, #380]	; bcab0 <_strtod_l+0xc00>
   bc934:	f04f 0800 	mov.w	r8, #0
   bc938:	e7e7      	b.n	bc90a <_strtod_l+0xa5a>
   bc93a:	4b5d      	ldr	r3, [pc, #372]	; (bcab0 <_strtod_l+0xc00>)
   bc93c:	4640      	mov	r0, r8
   bc93e:	4649      	mov	r1, r9
   bc940:	2200      	movs	r2, #0
   bc942:	f7fe fe53 	bl	bb5ec <__aeabi_dmul>
   bc946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc948:	4680      	mov	r8, r0
   bc94a:	4689      	mov	r9, r1
   bc94c:	b933      	cbnz	r3, bc95c <_strtod_l+0xaac>
   bc94e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc952:	900e      	str	r0, [sp, #56]	; 0x38
   bc954:	930f      	str	r3, [sp, #60]	; 0x3c
   bc956:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bc95a:	e7dd      	b.n	bc918 <_strtod_l+0xa68>
   bc95c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bc960:	e7f9      	b.n	bc956 <_strtod_l+0xaa6>
   bc962:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bc966:	9b04      	ldr	r3, [sp, #16]
   bc968:	2b00      	cmp	r3, #0
   bc96a:	d1a8      	bne.n	bc8be <_strtod_l+0xa0e>
   bc96c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bc970:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc972:	0d1b      	lsrs	r3, r3, #20
   bc974:	051b      	lsls	r3, r3, #20
   bc976:	429a      	cmp	r2, r3
   bc978:	d1a1      	bne.n	bc8be <_strtod_l+0xa0e>
   bc97a:	4640      	mov	r0, r8
   bc97c:	4649      	mov	r1, r9
   bc97e:	f001 fa05 	bl	bdd8c <__aeabi_d2lz>
   bc982:	f7fe fe05 	bl	bb590 <__aeabi_l2d>
   bc986:	4602      	mov	r2, r0
   bc988:	460b      	mov	r3, r1
   bc98a:	4640      	mov	r0, r8
   bc98c:	4649      	mov	r1, r9
   bc98e:	f7fe fc75 	bl	bb27c <__aeabi_dsub>
   bc992:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bc994:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc998:	ea43 030a 	orr.w	r3, r3, sl
   bc99c:	4313      	orrs	r3, r2
   bc99e:	4680      	mov	r8, r0
   bc9a0:	4689      	mov	r9, r1
   bc9a2:	d055      	beq.n	bca50 <_strtod_l+0xba0>
   bc9a4:	a336      	add	r3, pc, #216	; (adr r3, bca80 <_strtod_l+0xbd0>)
   bc9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc9aa:	f7ff f891 	bl	bbad0 <__aeabi_dcmplt>
   bc9ae:	2800      	cmp	r0, #0
   bc9b0:	f47f acd0 	bne.w	bc354 <_strtod_l+0x4a4>
   bc9b4:	a334      	add	r3, pc, #208	; (adr r3, bca88 <_strtod_l+0xbd8>)
   bc9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc9ba:	4640      	mov	r0, r8
   bc9bc:	4649      	mov	r1, r9
   bc9be:	f7ff f8a5 	bl	bbb0c <__aeabi_dcmpgt>
   bc9c2:	2800      	cmp	r0, #0
   bc9c4:	f43f af7b 	beq.w	bc8be <_strtod_l+0xa0e>
   bc9c8:	e4c4      	b.n	bc354 <_strtod_l+0x4a4>
   bc9ca:	9b04      	ldr	r3, [sp, #16]
   bc9cc:	b333      	cbz	r3, bca1c <_strtod_l+0xb6c>
   bc9ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bc9d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bc9d4:	d822      	bhi.n	bca1c <_strtod_l+0xb6c>
   bc9d6:	a32e      	add	r3, pc, #184	; (adr r3, bca90 <_strtod_l+0xbe0>)
   bc9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc9dc:	4640      	mov	r0, r8
   bc9de:	4649      	mov	r1, r9
   bc9e0:	f7ff f880 	bl	bbae4 <__aeabi_dcmple>
   bc9e4:	b1a0      	cbz	r0, bca10 <_strtod_l+0xb60>
   bc9e6:	4649      	mov	r1, r9
   bc9e8:	4640      	mov	r0, r8
   bc9ea:	f7ff f8c1 	bl	bbb70 <__aeabi_d2uiz>
   bc9ee:	2801      	cmp	r0, #1
   bc9f0:	bf38      	it	cc
   bc9f2:	2001      	movcc	r0, #1
   bc9f4:	f7fe fd80 	bl	bb4f8 <__aeabi_ui2d>
   bc9f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc9fa:	4680      	mov	r8, r0
   bc9fc:	4689      	mov	r9, r1
   bc9fe:	bb23      	cbnz	r3, bca4a <_strtod_l+0xb9a>
   bca00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bca04:	9010      	str	r0, [sp, #64]	; 0x40
   bca06:	9311      	str	r3, [sp, #68]	; 0x44
   bca08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bca0c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bca10:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bca12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bca14:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bca18:	1a9b      	subs	r3, r3, r2
   bca1a:	9309      	str	r3, [sp, #36]	; 0x24
   bca1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bca20:	eeb0 0a48 	vmov.f32	s0, s16
   bca24:	eef0 0a68 	vmov.f32	s1, s17
   bca28:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bca2c:	f001 f838 	bl	bdaa0 <__ulp>
   bca30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bca34:	ec53 2b10 	vmov	r2, r3, d0
   bca38:	f7fe fdd8 	bl	bb5ec <__aeabi_dmul>
   bca3c:	ec53 2b18 	vmov	r2, r3, d8
   bca40:	f7fe fc1e 	bl	bb280 <__adddf3>
   bca44:	4682      	mov	sl, r0
   bca46:	468b      	mov	fp, r1
   bca48:	e78d      	b.n	bc966 <_strtod_l+0xab6>
   bca4a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bca4e:	e7db      	b.n	bca08 <_strtod_l+0xb58>
   bca50:	a311      	add	r3, pc, #68	; (adr r3, bca98 <_strtod_l+0xbe8>)
   bca52:	e9d3 2300 	ldrd	r2, r3, [r3]
   bca56:	f7ff f83b 	bl	bbad0 <__aeabi_dcmplt>
   bca5a:	e7b2      	b.n	bc9c2 <_strtod_l+0xb12>
   bca5c:	2300      	movs	r3, #0
   bca5e:	930a      	str	r3, [sp, #40]	; 0x28
   bca60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bca62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bca64:	6013      	str	r3, [r2, #0]
   bca66:	f7ff ba6b 	b.w	bbf40 <_strtod_l+0x90>
   bca6a:	2a65      	cmp	r2, #101	; 0x65
   bca6c:	f43f ab5f 	beq.w	bc12e <_strtod_l+0x27e>
   bca70:	2a45      	cmp	r2, #69	; 0x45
   bca72:	f43f ab5c 	beq.w	bc12e <_strtod_l+0x27e>
   bca76:	2301      	movs	r3, #1
   bca78:	f7ff bb94 	b.w	bc1a4 <_strtod_l+0x2f4>
   bca7c:	f3af 8000 	nop.w
   bca80:	94a03595 	.word	0x94a03595
   bca84:	3fdfffff 	.word	0x3fdfffff
   bca88:	35afe535 	.word	0x35afe535
   bca8c:	3fe00000 	.word	0x3fe00000
   bca90:	ffc00000 	.word	0xffc00000
   bca94:	41dfffff 	.word	0x41dfffff
   bca98:	94a03595 	.word	0x94a03595
   bca9c:	3fcfffff 	.word	0x3fcfffff
   bcaa0:	3ff00000 	.word	0x3ff00000
   bcaa4:	7ff00000 	.word	0x7ff00000
   bcaa8:	7fe00000 	.word	0x7fe00000
   bcaac:	7c9fffff 	.word	0x7c9fffff
   bcab0:	3fe00000 	.word	0x3fe00000
   bcab4:	bff00000 	.word	0xbff00000
   bcab8:	7fefffff 	.word	0x7fefffff

000bcabc <strtod>:
   bcabc:	460a      	mov	r2, r1
   bcabe:	4601      	mov	r1, r0
   bcac0:	4802      	ldr	r0, [pc, #8]	; (bcacc <strtod+0x10>)
   bcac2:	4b03      	ldr	r3, [pc, #12]	; (bcad0 <strtod+0x14>)
   bcac4:	6800      	ldr	r0, [r0, #0]
   bcac6:	f7ff b9f3 	b.w	bbeb0 <_strtod_l>
   bcaca:	bf00      	nop
   bcacc:	2003db1c 	.word	0x2003db1c
   bcad0:	2003db88 	.word	0x2003db88

000bcad4 <_strtol_l.constprop.0>:
   bcad4:	2b01      	cmp	r3, #1
   bcad6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bcada:	d001      	beq.n	bcae0 <_strtol_l.constprop.0+0xc>
   bcadc:	2b24      	cmp	r3, #36	; 0x24
   bcade:	d906      	bls.n	bcaee <_strtol_l.constprop.0+0x1a>
   bcae0:	f7fa fce0 	bl	b74a4 <__errno>
   bcae4:	2316      	movs	r3, #22
   bcae6:	6003      	str	r3, [r0, #0]
   bcae8:	2000      	movs	r0, #0
   bcaea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bcaee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bcbd4 <_strtol_l.constprop.0+0x100>
   bcaf2:	460d      	mov	r5, r1
   bcaf4:	462e      	mov	r6, r5
   bcaf6:	f815 4b01 	ldrb.w	r4, [r5], #1
   bcafa:	f814 700c 	ldrb.w	r7, [r4, ip]
   bcafe:	f017 0708 	ands.w	r7, r7, #8
   bcb02:	d1f7      	bne.n	bcaf4 <_strtol_l.constprop.0+0x20>
   bcb04:	2c2d      	cmp	r4, #45	; 0x2d
   bcb06:	d132      	bne.n	bcb6e <_strtol_l.constprop.0+0x9a>
   bcb08:	782c      	ldrb	r4, [r5, #0]
   bcb0a:	2701      	movs	r7, #1
   bcb0c:	1cb5      	adds	r5, r6, #2
   bcb0e:	2b00      	cmp	r3, #0
   bcb10:	d05b      	beq.n	bcbca <_strtol_l.constprop.0+0xf6>
   bcb12:	2b10      	cmp	r3, #16
   bcb14:	d109      	bne.n	bcb2a <_strtol_l.constprop.0+0x56>
   bcb16:	2c30      	cmp	r4, #48	; 0x30
   bcb18:	d107      	bne.n	bcb2a <_strtol_l.constprop.0+0x56>
   bcb1a:	782c      	ldrb	r4, [r5, #0]
   bcb1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bcb20:	2c58      	cmp	r4, #88	; 0x58
   bcb22:	d14d      	bne.n	bcbc0 <_strtol_l.constprop.0+0xec>
   bcb24:	786c      	ldrb	r4, [r5, #1]
   bcb26:	2310      	movs	r3, #16
   bcb28:	3502      	adds	r5, #2
   bcb2a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bcb2e:	f108 38ff 	add.w	r8, r8, #4294967295
   bcb32:	f04f 0c00 	mov.w	ip, #0
   bcb36:	fbb8 f9f3 	udiv	r9, r8, r3
   bcb3a:	4666      	mov	r6, ip
   bcb3c:	fb03 8a19 	mls	sl, r3, r9, r8
   bcb40:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bcb44:	f1be 0f09 	cmp.w	lr, #9
   bcb48:	d816      	bhi.n	bcb78 <_strtol_l.constprop.0+0xa4>
   bcb4a:	4674      	mov	r4, lr
   bcb4c:	42a3      	cmp	r3, r4
   bcb4e:	dd24      	ble.n	bcb9a <_strtol_l.constprop.0+0xc6>
   bcb50:	f1bc 0f00 	cmp.w	ip, #0
   bcb54:	db1e      	blt.n	bcb94 <_strtol_l.constprop.0+0xc0>
   bcb56:	45b1      	cmp	r9, r6
   bcb58:	d31c      	bcc.n	bcb94 <_strtol_l.constprop.0+0xc0>
   bcb5a:	d101      	bne.n	bcb60 <_strtol_l.constprop.0+0x8c>
   bcb5c:	45a2      	cmp	sl, r4
   bcb5e:	db19      	blt.n	bcb94 <_strtol_l.constprop.0+0xc0>
   bcb60:	fb06 4603 	mla	r6, r6, r3, r4
   bcb64:	f04f 0c01 	mov.w	ip, #1
   bcb68:	f815 4b01 	ldrb.w	r4, [r5], #1
   bcb6c:	e7e8      	b.n	bcb40 <_strtol_l.constprop.0+0x6c>
   bcb6e:	2c2b      	cmp	r4, #43	; 0x2b
   bcb70:	bf04      	itt	eq
   bcb72:	782c      	ldrbeq	r4, [r5, #0]
   bcb74:	1cb5      	addeq	r5, r6, #2
   bcb76:	e7ca      	b.n	bcb0e <_strtol_l.constprop.0+0x3a>
   bcb78:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bcb7c:	f1be 0f19 	cmp.w	lr, #25
   bcb80:	d801      	bhi.n	bcb86 <_strtol_l.constprop.0+0xb2>
   bcb82:	3c37      	subs	r4, #55	; 0x37
   bcb84:	e7e2      	b.n	bcb4c <_strtol_l.constprop.0+0x78>
   bcb86:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bcb8a:	f1be 0f19 	cmp.w	lr, #25
   bcb8e:	d804      	bhi.n	bcb9a <_strtol_l.constprop.0+0xc6>
   bcb90:	3c57      	subs	r4, #87	; 0x57
   bcb92:	e7db      	b.n	bcb4c <_strtol_l.constprop.0+0x78>
   bcb94:	f04f 3cff 	mov.w	ip, #4294967295
   bcb98:	e7e6      	b.n	bcb68 <_strtol_l.constprop.0+0x94>
   bcb9a:	f1bc 0f00 	cmp.w	ip, #0
   bcb9e:	da05      	bge.n	bcbac <_strtol_l.constprop.0+0xd8>
   bcba0:	2322      	movs	r3, #34	; 0x22
   bcba2:	6003      	str	r3, [r0, #0]
   bcba4:	4646      	mov	r6, r8
   bcba6:	b942      	cbnz	r2, bcbba <_strtol_l.constprop.0+0xe6>
   bcba8:	4630      	mov	r0, r6
   bcbaa:	e79e      	b.n	bcaea <_strtol_l.constprop.0+0x16>
   bcbac:	b107      	cbz	r7, bcbb0 <_strtol_l.constprop.0+0xdc>
   bcbae:	4276      	negs	r6, r6
   bcbb0:	2a00      	cmp	r2, #0
   bcbb2:	d0f9      	beq.n	bcba8 <_strtol_l.constprop.0+0xd4>
   bcbb4:	f1bc 0f00 	cmp.w	ip, #0
   bcbb8:	d000      	beq.n	bcbbc <_strtol_l.constprop.0+0xe8>
   bcbba:	1e69      	subs	r1, r5, #1
   bcbbc:	6011      	str	r1, [r2, #0]
   bcbbe:	e7f3      	b.n	bcba8 <_strtol_l.constprop.0+0xd4>
   bcbc0:	2430      	movs	r4, #48	; 0x30
   bcbc2:	2b00      	cmp	r3, #0
   bcbc4:	d1b1      	bne.n	bcb2a <_strtol_l.constprop.0+0x56>
   bcbc6:	2308      	movs	r3, #8
   bcbc8:	e7af      	b.n	bcb2a <_strtol_l.constprop.0+0x56>
   bcbca:	2c30      	cmp	r4, #48	; 0x30
   bcbcc:	d0a5      	beq.n	bcb1a <_strtol_l.constprop.0+0x46>
   bcbce:	230a      	movs	r3, #10
   bcbd0:	e7ab      	b.n	bcb2a <_strtol_l.constprop.0+0x56>
   bcbd2:	bf00      	nop
   bcbd4:	000be9f9 	.word	0x000be9f9

000bcbd8 <strtol>:
   bcbd8:	4613      	mov	r3, r2
   bcbda:	460a      	mov	r2, r1
   bcbdc:	4601      	mov	r1, r0
   bcbde:	4802      	ldr	r0, [pc, #8]	; (bcbe8 <strtol+0x10>)
   bcbe0:	6800      	ldr	r0, [r0, #0]
   bcbe2:	f7ff bf77 	b.w	bcad4 <_strtol_l.constprop.0>
   bcbe6:	bf00      	nop
   bcbe8:	2003db1c 	.word	0x2003db1c

000bcbec <__register_exitproc>:
   bcbec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcbf0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bccac <__register_exitproc+0xc0>
   bcbf4:	4606      	mov	r6, r0
   bcbf6:	f8d8 0000 	ldr.w	r0, [r8]
   bcbfa:	461f      	mov	r7, r3
   bcbfc:	460d      	mov	r5, r1
   bcbfe:	4691      	mov	r9, r2
   bcc00:	f000 fbc6 	bl	bd390 <__retarget_lock_acquire_recursive>
   bcc04:	4b25      	ldr	r3, [pc, #148]	; (bcc9c <__register_exitproc+0xb0>)
   bcc06:	681c      	ldr	r4, [r3, #0]
   bcc08:	b934      	cbnz	r4, bcc18 <__register_exitproc+0x2c>
   bcc0a:	4c25      	ldr	r4, [pc, #148]	; (bcca0 <__register_exitproc+0xb4>)
   bcc0c:	601c      	str	r4, [r3, #0]
   bcc0e:	4b25      	ldr	r3, [pc, #148]	; (bcca4 <__register_exitproc+0xb8>)
   bcc10:	b113      	cbz	r3, bcc18 <__register_exitproc+0x2c>
   bcc12:	681b      	ldr	r3, [r3, #0]
   bcc14:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bcc18:	6863      	ldr	r3, [r4, #4]
   bcc1a:	2b1f      	cmp	r3, #31
   bcc1c:	dd07      	ble.n	bcc2e <__register_exitproc+0x42>
   bcc1e:	f8d8 0000 	ldr.w	r0, [r8]
   bcc22:	f000 fbb7 	bl	bd394 <__retarget_lock_release_recursive>
   bcc26:	f04f 30ff 	mov.w	r0, #4294967295
   bcc2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bcc2e:	b34e      	cbz	r6, bcc84 <__register_exitproc+0x98>
   bcc30:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bcc34:	b988      	cbnz	r0, bcc5a <__register_exitproc+0x6e>
   bcc36:	4b1c      	ldr	r3, [pc, #112]	; (bcca8 <__register_exitproc+0xbc>)
   bcc38:	b923      	cbnz	r3, bcc44 <__register_exitproc+0x58>
   bcc3a:	f8d8 0000 	ldr.w	r0, [r8]
   bcc3e:	f000 fba8 	bl	bd392 <__retarget_lock_release>
   bcc42:	e7f0      	b.n	bcc26 <__register_exitproc+0x3a>
   bcc44:	f44f 7084 	mov.w	r0, #264	; 0x108
   bcc48:	f7fa fbe4 	bl	b7414 <malloc>
   bcc4c:	2800      	cmp	r0, #0
   bcc4e:	d0f4      	beq.n	bcc3a <__register_exitproc+0x4e>
   bcc50:	2300      	movs	r3, #0
   bcc52:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bcc56:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bcc5a:	6863      	ldr	r3, [r4, #4]
   bcc5c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bcc60:	2201      	movs	r2, #1
   bcc62:	409a      	lsls	r2, r3
   bcc64:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bcc68:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bcc6c:	4313      	orrs	r3, r2
   bcc6e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bcc72:	2e02      	cmp	r6, #2
   bcc74:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bcc78:	bf02      	ittt	eq
   bcc7a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bcc7e:	4313      	orreq	r3, r2
   bcc80:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bcc84:	6863      	ldr	r3, [r4, #4]
   bcc86:	f8d8 0000 	ldr.w	r0, [r8]
   bcc8a:	1c5a      	adds	r2, r3, #1
   bcc8c:	3302      	adds	r3, #2
   bcc8e:	6062      	str	r2, [r4, #4]
   bcc90:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bcc94:	f000 fb7e 	bl	bd394 <__retarget_lock_release_recursive>
   bcc98:	2000      	movs	r0, #0
   bcc9a:	e7c6      	b.n	bcc2a <__register_exitproc+0x3e>
   bcc9c:	2003e7ec 	.word	0x2003e7ec
   bcca0:	2003e760 	.word	0x2003e760
   bcca4:	00000000 	.word	0x00000000
   bcca8:	000b7415 	.word	0x000b7415
   bccac:	2003db80 	.word	0x2003db80

000bccb0 <rshift>:
   bccb0:	6903      	ldr	r3, [r0, #16]
   bccb2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bccb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bccba:	ea4f 1261 	mov.w	r2, r1, asr #5
   bccbe:	f100 0414 	add.w	r4, r0, #20
   bccc2:	dd45      	ble.n	bcd50 <rshift+0xa0>
   bccc4:	f011 011f 	ands.w	r1, r1, #31
   bccc8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bcccc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bccd0:	d10c      	bne.n	bccec <rshift+0x3c>
   bccd2:	f100 0710 	add.w	r7, r0, #16
   bccd6:	4629      	mov	r1, r5
   bccd8:	42b1      	cmp	r1, r6
   bccda:	d334      	bcc.n	bcd46 <rshift+0x96>
   bccdc:	1a9b      	subs	r3, r3, r2
   bccde:	009b      	lsls	r3, r3, #2
   bcce0:	1eea      	subs	r2, r5, #3
   bcce2:	4296      	cmp	r6, r2
   bcce4:	bf38      	it	cc
   bcce6:	2300      	movcc	r3, #0
   bcce8:	4423      	add	r3, r4
   bccea:	e015      	b.n	bcd18 <rshift+0x68>
   bccec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bccf0:	f1c1 0820 	rsb	r8, r1, #32
   bccf4:	40cf      	lsrs	r7, r1
   bccf6:	f105 0e04 	add.w	lr, r5, #4
   bccfa:	46a1      	mov	r9, r4
   bccfc:	4576      	cmp	r6, lr
   bccfe:	46f4      	mov	ip, lr
   bcd00:	d815      	bhi.n	bcd2e <rshift+0x7e>
   bcd02:	1a9a      	subs	r2, r3, r2
   bcd04:	0092      	lsls	r2, r2, #2
   bcd06:	3a04      	subs	r2, #4
   bcd08:	3501      	adds	r5, #1
   bcd0a:	42ae      	cmp	r6, r5
   bcd0c:	bf38      	it	cc
   bcd0e:	2200      	movcc	r2, #0
   bcd10:	18a3      	adds	r3, r4, r2
   bcd12:	50a7      	str	r7, [r4, r2]
   bcd14:	b107      	cbz	r7, bcd18 <rshift+0x68>
   bcd16:	3304      	adds	r3, #4
   bcd18:	1b1a      	subs	r2, r3, r4
   bcd1a:	42a3      	cmp	r3, r4
   bcd1c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bcd20:	bf08      	it	eq
   bcd22:	2300      	moveq	r3, #0
   bcd24:	6102      	str	r2, [r0, #16]
   bcd26:	bf08      	it	eq
   bcd28:	6143      	streq	r3, [r0, #20]
   bcd2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bcd2e:	f8dc c000 	ldr.w	ip, [ip]
   bcd32:	fa0c fc08 	lsl.w	ip, ip, r8
   bcd36:	ea4c 0707 	orr.w	r7, ip, r7
   bcd3a:	f849 7b04 	str.w	r7, [r9], #4
   bcd3e:	f85e 7b04 	ldr.w	r7, [lr], #4
   bcd42:	40cf      	lsrs	r7, r1
   bcd44:	e7da      	b.n	bccfc <rshift+0x4c>
   bcd46:	f851 cb04 	ldr.w	ip, [r1], #4
   bcd4a:	f847 cf04 	str.w	ip, [r7, #4]!
   bcd4e:	e7c3      	b.n	bccd8 <rshift+0x28>
   bcd50:	4623      	mov	r3, r4
   bcd52:	e7e1      	b.n	bcd18 <rshift+0x68>

000bcd54 <__hexdig_fun>:
   bcd54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bcd58:	2b09      	cmp	r3, #9
   bcd5a:	d802      	bhi.n	bcd62 <__hexdig_fun+0xe>
   bcd5c:	3820      	subs	r0, #32
   bcd5e:	b2c0      	uxtb	r0, r0
   bcd60:	4770      	bx	lr
   bcd62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bcd66:	2b05      	cmp	r3, #5
   bcd68:	d801      	bhi.n	bcd6e <__hexdig_fun+0x1a>
   bcd6a:	3847      	subs	r0, #71	; 0x47
   bcd6c:	e7f7      	b.n	bcd5e <__hexdig_fun+0xa>
   bcd6e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bcd72:	2b05      	cmp	r3, #5
   bcd74:	d801      	bhi.n	bcd7a <__hexdig_fun+0x26>
   bcd76:	3827      	subs	r0, #39	; 0x27
   bcd78:	e7f1      	b.n	bcd5e <__hexdig_fun+0xa>
   bcd7a:	2000      	movs	r0, #0
   bcd7c:	4770      	bx	lr
	...

000bcd80 <__gethex>:
   bcd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcd84:	ed2d 8b02 	vpush	{d8}
   bcd88:	b089      	sub	sp, #36	; 0x24
   bcd8a:	ee08 0a10 	vmov	s16, r0
   bcd8e:	9304      	str	r3, [sp, #16]
   bcd90:	4bb4      	ldr	r3, [pc, #720]	; (bd064 <__gethex+0x2e4>)
   bcd92:	681b      	ldr	r3, [r3, #0]
   bcd94:	9301      	str	r3, [sp, #4]
   bcd96:	4618      	mov	r0, r3
   bcd98:	468b      	mov	fp, r1
   bcd9a:	4690      	mov	r8, r2
   bcd9c:	f7ff f831 	bl	bbe02 <strlen>
   bcda0:	9b01      	ldr	r3, [sp, #4]
   bcda2:	f8db 2000 	ldr.w	r2, [fp]
   bcda6:	4403      	add	r3, r0
   bcda8:	4682      	mov	sl, r0
   bcdaa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bcdae:	9305      	str	r3, [sp, #20]
   bcdb0:	1c93      	adds	r3, r2, #2
   bcdb2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bcdb6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bcdba:	32fe      	adds	r2, #254	; 0xfe
   bcdbc:	18d1      	adds	r1, r2, r3
   bcdbe:	461f      	mov	r7, r3
   bcdc0:	f813 0b01 	ldrb.w	r0, [r3], #1
   bcdc4:	9100      	str	r1, [sp, #0]
   bcdc6:	2830      	cmp	r0, #48	; 0x30
   bcdc8:	d0f8      	beq.n	bcdbc <__gethex+0x3c>
   bcdca:	f7ff ffc3 	bl	bcd54 <__hexdig_fun>
   bcdce:	4604      	mov	r4, r0
   bcdd0:	2800      	cmp	r0, #0
   bcdd2:	d13a      	bne.n	bce4a <__gethex+0xca>
   bcdd4:	9901      	ldr	r1, [sp, #4]
   bcdd6:	4652      	mov	r2, sl
   bcdd8:	4638      	mov	r0, r7
   bcdda:	f7ff f81a 	bl	bbe12 <strncmp>
   bcdde:	4605      	mov	r5, r0
   bcde0:	2800      	cmp	r0, #0
   bcde2:	d168      	bne.n	bceb6 <__gethex+0x136>
   bcde4:	f817 000a 	ldrb.w	r0, [r7, sl]
   bcde8:	eb07 060a 	add.w	r6, r7, sl
   bcdec:	f7ff ffb2 	bl	bcd54 <__hexdig_fun>
   bcdf0:	2800      	cmp	r0, #0
   bcdf2:	d062      	beq.n	bceba <__gethex+0x13a>
   bcdf4:	4633      	mov	r3, r6
   bcdf6:	7818      	ldrb	r0, [r3, #0]
   bcdf8:	2830      	cmp	r0, #48	; 0x30
   bcdfa:	461f      	mov	r7, r3
   bcdfc:	f103 0301 	add.w	r3, r3, #1
   bce00:	d0f9      	beq.n	bcdf6 <__gethex+0x76>
   bce02:	f7ff ffa7 	bl	bcd54 <__hexdig_fun>
   bce06:	2301      	movs	r3, #1
   bce08:	fab0 f480 	clz	r4, r0
   bce0c:	0964      	lsrs	r4, r4, #5
   bce0e:	4635      	mov	r5, r6
   bce10:	9300      	str	r3, [sp, #0]
   bce12:	463a      	mov	r2, r7
   bce14:	4616      	mov	r6, r2
   bce16:	3201      	adds	r2, #1
   bce18:	7830      	ldrb	r0, [r6, #0]
   bce1a:	f7ff ff9b 	bl	bcd54 <__hexdig_fun>
   bce1e:	2800      	cmp	r0, #0
   bce20:	d1f8      	bne.n	bce14 <__gethex+0x94>
   bce22:	9901      	ldr	r1, [sp, #4]
   bce24:	4652      	mov	r2, sl
   bce26:	4630      	mov	r0, r6
   bce28:	f7fe fff3 	bl	bbe12 <strncmp>
   bce2c:	b980      	cbnz	r0, bce50 <__gethex+0xd0>
   bce2e:	b94d      	cbnz	r5, bce44 <__gethex+0xc4>
   bce30:	eb06 050a 	add.w	r5, r6, sl
   bce34:	462a      	mov	r2, r5
   bce36:	4616      	mov	r6, r2
   bce38:	3201      	adds	r2, #1
   bce3a:	7830      	ldrb	r0, [r6, #0]
   bce3c:	f7ff ff8a 	bl	bcd54 <__hexdig_fun>
   bce40:	2800      	cmp	r0, #0
   bce42:	d1f8      	bne.n	bce36 <__gethex+0xb6>
   bce44:	1bad      	subs	r5, r5, r6
   bce46:	00ad      	lsls	r5, r5, #2
   bce48:	e004      	b.n	bce54 <__gethex+0xd4>
   bce4a:	2400      	movs	r4, #0
   bce4c:	4625      	mov	r5, r4
   bce4e:	e7e0      	b.n	bce12 <__gethex+0x92>
   bce50:	2d00      	cmp	r5, #0
   bce52:	d1f7      	bne.n	bce44 <__gethex+0xc4>
   bce54:	7833      	ldrb	r3, [r6, #0]
   bce56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bce5a:	2b50      	cmp	r3, #80	; 0x50
   bce5c:	d13b      	bne.n	bced6 <__gethex+0x156>
   bce5e:	7873      	ldrb	r3, [r6, #1]
   bce60:	2b2b      	cmp	r3, #43	; 0x2b
   bce62:	d02c      	beq.n	bcebe <__gethex+0x13e>
   bce64:	2b2d      	cmp	r3, #45	; 0x2d
   bce66:	d02e      	beq.n	bcec6 <__gethex+0x146>
   bce68:	1c71      	adds	r1, r6, #1
   bce6a:	f04f 0900 	mov.w	r9, #0
   bce6e:	7808      	ldrb	r0, [r1, #0]
   bce70:	f7ff ff70 	bl	bcd54 <__hexdig_fun>
   bce74:	1e43      	subs	r3, r0, #1
   bce76:	b2db      	uxtb	r3, r3
   bce78:	2b18      	cmp	r3, #24
   bce7a:	d82c      	bhi.n	bced6 <__gethex+0x156>
   bce7c:	f1a0 0210 	sub.w	r2, r0, #16
   bce80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bce84:	f7ff ff66 	bl	bcd54 <__hexdig_fun>
   bce88:	1e43      	subs	r3, r0, #1
   bce8a:	b2db      	uxtb	r3, r3
   bce8c:	2b18      	cmp	r3, #24
   bce8e:	d91d      	bls.n	bcecc <__gethex+0x14c>
   bce90:	f1b9 0f00 	cmp.w	r9, #0
   bce94:	d000      	beq.n	bce98 <__gethex+0x118>
   bce96:	4252      	negs	r2, r2
   bce98:	4415      	add	r5, r2
   bce9a:	f8cb 1000 	str.w	r1, [fp]
   bce9e:	b1e4      	cbz	r4, bceda <__gethex+0x15a>
   bcea0:	9b00      	ldr	r3, [sp, #0]
   bcea2:	2b00      	cmp	r3, #0
   bcea4:	bf14      	ite	ne
   bcea6:	2700      	movne	r7, #0
   bcea8:	2706      	moveq	r7, #6
   bceaa:	4638      	mov	r0, r7
   bceac:	b009      	add	sp, #36	; 0x24
   bceae:	ecbd 8b02 	vpop	{d8}
   bceb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bceb6:	463e      	mov	r6, r7
   bceb8:	4625      	mov	r5, r4
   bceba:	2401      	movs	r4, #1
   bcebc:	e7ca      	b.n	bce54 <__gethex+0xd4>
   bcebe:	f04f 0900 	mov.w	r9, #0
   bcec2:	1cb1      	adds	r1, r6, #2
   bcec4:	e7d3      	b.n	bce6e <__gethex+0xee>
   bcec6:	f04f 0901 	mov.w	r9, #1
   bceca:	e7fa      	b.n	bcec2 <__gethex+0x142>
   bcecc:	230a      	movs	r3, #10
   bcece:	fb03 0202 	mla	r2, r3, r2, r0
   bced2:	3a10      	subs	r2, #16
   bced4:	e7d4      	b.n	bce80 <__gethex+0x100>
   bced6:	4631      	mov	r1, r6
   bced8:	e7df      	b.n	bce9a <__gethex+0x11a>
   bceda:	1bf3      	subs	r3, r6, r7
   bcedc:	3b01      	subs	r3, #1
   bcede:	4621      	mov	r1, r4
   bcee0:	2b07      	cmp	r3, #7
   bcee2:	dc0b      	bgt.n	bcefc <__gethex+0x17c>
   bcee4:	ee18 0a10 	vmov	r0, s16
   bcee8:	f000 fa68 	bl	bd3bc <_Balloc>
   bceec:	4604      	mov	r4, r0
   bceee:	b940      	cbnz	r0, bcf02 <__gethex+0x182>
   bcef0:	4b5d      	ldr	r3, [pc, #372]	; (bd068 <__gethex+0x2e8>)
   bcef2:	4602      	mov	r2, r0
   bcef4:	21de      	movs	r1, #222	; 0xde
   bcef6:	485d      	ldr	r0, [pc, #372]	; (bd06c <__gethex+0x2ec>)
   bcef8:	f7fa fadc 	bl	b74b4 <__assert_func>
   bcefc:	3101      	adds	r1, #1
   bcefe:	105b      	asrs	r3, r3, #1
   bcf00:	e7ee      	b.n	bcee0 <__gethex+0x160>
   bcf02:	f100 0914 	add.w	r9, r0, #20
   bcf06:	f04f 0b00 	mov.w	fp, #0
   bcf0a:	f1ca 0301 	rsb	r3, sl, #1
   bcf0e:	f8cd 9008 	str.w	r9, [sp, #8]
   bcf12:	f8cd b000 	str.w	fp, [sp]
   bcf16:	9306      	str	r3, [sp, #24]
   bcf18:	42b7      	cmp	r7, r6
   bcf1a:	d340      	bcc.n	bcf9e <__gethex+0x21e>
   bcf1c:	9802      	ldr	r0, [sp, #8]
   bcf1e:	9b00      	ldr	r3, [sp, #0]
   bcf20:	f840 3b04 	str.w	r3, [r0], #4
   bcf24:	eba0 0009 	sub.w	r0, r0, r9
   bcf28:	1080      	asrs	r0, r0, #2
   bcf2a:	0146      	lsls	r6, r0, #5
   bcf2c:	6120      	str	r0, [r4, #16]
   bcf2e:	4618      	mov	r0, r3
   bcf30:	f000 fb36 	bl	bd5a0 <__hi0bits>
   bcf34:	1a30      	subs	r0, r6, r0
   bcf36:	f8d8 6000 	ldr.w	r6, [r8]
   bcf3a:	42b0      	cmp	r0, r6
   bcf3c:	dd63      	ble.n	bd006 <__gethex+0x286>
   bcf3e:	1b87      	subs	r7, r0, r6
   bcf40:	4639      	mov	r1, r7
   bcf42:	4620      	mov	r0, r4
   bcf44:	f000 feda 	bl	bdcfc <__any_on>
   bcf48:	4682      	mov	sl, r0
   bcf4a:	b1a8      	cbz	r0, bcf78 <__gethex+0x1f8>
   bcf4c:	1e7b      	subs	r3, r7, #1
   bcf4e:	1159      	asrs	r1, r3, #5
   bcf50:	f003 021f 	and.w	r2, r3, #31
   bcf54:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bcf58:	f04f 0a01 	mov.w	sl, #1
   bcf5c:	fa0a f202 	lsl.w	r2, sl, r2
   bcf60:	420a      	tst	r2, r1
   bcf62:	d009      	beq.n	bcf78 <__gethex+0x1f8>
   bcf64:	4553      	cmp	r3, sl
   bcf66:	dd05      	ble.n	bcf74 <__gethex+0x1f4>
   bcf68:	1eb9      	subs	r1, r7, #2
   bcf6a:	4620      	mov	r0, r4
   bcf6c:	f000 fec6 	bl	bdcfc <__any_on>
   bcf70:	2800      	cmp	r0, #0
   bcf72:	d145      	bne.n	bd000 <__gethex+0x280>
   bcf74:	f04f 0a02 	mov.w	sl, #2
   bcf78:	4639      	mov	r1, r7
   bcf7a:	4620      	mov	r0, r4
   bcf7c:	f7ff fe98 	bl	bccb0 <rshift>
   bcf80:	443d      	add	r5, r7
   bcf82:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bcf86:	42ab      	cmp	r3, r5
   bcf88:	da4c      	bge.n	bd024 <__gethex+0x2a4>
   bcf8a:	ee18 0a10 	vmov	r0, s16
   bcf8e:	4621      	mov	r1, r4
   bcf90:	f000 fa54 	bl	bd43c <_Bfree>
   bcf94:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bcf96:	2300      	movs	r3, #0
   bcf98:	6013      	str	r3, [r2, #0]
   bcf9a:	27a3      	movs	r7, #163	; 0xa3
   bcf9c:	e785      	b.n	bceaa <__gethex+0x12a>
   bcf9e:	1e73      	subs	r3, r6, #1
   bcfa0:	9a05      	ldr	r2, [sp, #20]
   bcfa2:	9303      	str	r3, [sp, #12]
   bcfa4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bcfa8:	4293      	cmp	r3, r2
   bcfaa:	d019      	beq.n	bcfe0 <__gethex+0x260>
   bcfac:	f1bb 0f20 	cmp.w	fp, #32
   bcfb0:	d107      	bne.n	bcfc2 <__gethex+0x242>
   bcfb2:	9b02      	ldr	r3, [sp, #8]
   bcfb4:	9a00      	ldr	r2, [sp, #0]
   bcfb6:	f843 2b04 	str.w	r2, [r3], #4
   bcfba:	9302      	str	r3, [sp, #8]
   bcfbc:	2300      	movs	r3, #0
   bcfbe:	9300      	str	r3, [sp, #0]
   bcfc0:	469b      	mov	fp, r3
   bcfc2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bcfc6:	f7ff fec5 	bl	bcd54 <__hexdig_fun>
   bcfca:	9b00      	ldr	r3, [sp, #0]
   bcfcc:	f000 000f 	and.w	r0, r0, #15
   bcfd0:	fa00 f00b 	lsl.w	r0, r0, fp
   bcfd4:	4303      	orrs	r3, r0
   bcfd6:	9300      	str	r3, [sp, #0]
   bcfd8:	f10b 0b04 	add.w	fp, fp, #4
   bcfdc:	9b03      	ldr	r3, [sp, #12]
   bcfde:	e00d      	b.n	bcffc <__gethex+0x27c>
   bcfe0:	9b03      	ldr	r3, [sp, #12]
   bcfe2:	9a06      	ldr	r2, [sp, #24]
   bcfe4:	4413      	add	r3, r2
   bcfe6:	42bb      	cmp	r3, r7
   bcfe8:	d3e0      	bcc.n	bcfac <__gethex+0x22c>
   bcfea:	4618      	mov	r0, r3
   bcfec:	9901      	ldr	r1, [sp, #4]
   bcfee:	9307      	str	r3, [sp, #28]
   bcff0:	4652      	mov	r2, sl
   bcff2:	f7fe ff0e 	bl	bbe12 <strncmp>
   bcff6:	9b07      	ldr	r3, [sp, #28]
   bcff8:	2800      	cmp	r0, #0
   bcffa:	d1d7      	bne.n	bcfac <__gethex+0x22c>
   bcffc:	461e      	mov	r6, r3
   bcffe:	e78b      	b.n	bcf18 <__gethex+0x198>
   bd000:	f04f 0a03 	mov.w	sl, #3
   bd004:	e7b8      	b.n	bcf78 <__gethex+0x1f8>
   bd006:	da0a      	bge.n	bd01e <__gethex+0x29e>
   bd008:	1a37      	subs	r7, r6, r0
   bd00a:	4621      	mov	r1, r4
   bd00c:	ee18 0a10 	vmov	r0, s16
   bd010:	463a      	mov	r2, r7
   bd012:	f000 fc2f 	bl	bd874 <__lshift>
   bd016:	1bed      	subs	r5, r5, r7
   bd018:	4604      	mov	r4, r0
   bd01a:	f100 0914 	add.w	r9, r0, #20
   bd01e:	f04f 0a00 	mov.w	sl, #0
   bd022:	e7ae      	b.n	bcf82 <__gethex+0x202>
   bd024:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bd028:	42a8      	cmp	r0, r5
   bd02a:	dd72      	ble.n	bd112 <__gethex+0x392>
   bd02c:	1b45      	subs	r5, r0, r5
   bd02e:	42ae      	cmp	r6, r5
   bd030:	dc36      	bgt.n	bd0a0 <__gethex+0x320>
   bd032:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bd036:	2b02      	cmp	r3, #2
   bd038:	d02a      	beq.n	bd090 <__gethex+0x310>
   bd03a:	2b03      	cmp	r3, #3
   bd03c:	d02c      	beq.n	bd098 <__gethex+0x318>
   bd03e:	2b01      	cmp	r3, #1
   bd040:	d11c      	bne.n	bd07c <__gethex+0x2fc>
   bd042:	42ae      	cmp	r6, r5
   bd044:	d11a      	bne.n	bd07c <__gethex+0x2fc>
   bd046:	2e01      	cmp	r6, #1
   bd048:	d112      	bne.n	bd070 <__gethex+0x2f0>
   bd04a:	9a04      	ldr	r2, [sp, #16]
   bd04c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bd050:	6013      	str	r3, [r2, #0]
   bd052:	2301      	movs	r3, #1
   bd054:	6123      	str	r3, [r4, #16]
   bd056:	f8c9 3000 	str.w	r3, [r9]
   bd05a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bd05c:	2762      	movs	r7, #98	; 0x62
   bd05e:	601c      	str	r4, [r3, #0]
   bd060:	e723      	b.n	bceaa <__gethex+0x12a>
   bd062:	bf00      	nop
   bd064:	000beb90 	.word	0x000beb90
   bd068:	000beaf9 	.word	0x000beaf9
   bd06c:	000beb0a 	.word	0x000beb0a
   bd070:	1e71      	subs	r1, r6, #1
   bd072:	4620      	mov	r0, r4
   bd074:	f000 fe42 	bl	bdcfc <__any_on>
   bd078:	2800      	cmp	r0, #0
   bd07a:	d1e6      	bne.n	bd04a <__gethex+0x2ca>
   bd07c:	ee18 0a10 	vmov	r0, s16
   bd080:	4621      	mov	r1, r4
   bd082:	f000 f9db 	bl	bd43c <_Bfree>
   bd086:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bd088:	2300      	movs	r3, #0
   bd08a:	6013      	str	r3, [r2, #0]
   bd08c:	2750      	movs	r7, #80	; 0x50
   bd08e:	e70c      	b.n	bceaa <__gethex+0x12a>
   bd090:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd092:	2b00      	cmp	r3, #0
   bd094:	d1f2      	bne.n	bd07c <__gethex+0x2fc>
   bd096:	e7d8      	b.n	bd04a <__gethex+0x2ca>
   bd098:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd09a:	2b00      	cmp	r3, #0
   bd09c:	d1d5      	bne.n	bd04a <__gethex+0x2ca>
   bd09e:	e7ed      	b.n	bd07c <__gethex+0x2fc>
   bd0a0:	1e6f      	subs	r7, r5, #1
   bd0a2:	f1ba 0f00 	cmp.w	sl, #0
   bd0a6:	d131      	bne.n	bd10c <__gethex+0x38c>
   bd0a8:	b127      	cbz	r7, bd0b4 <__gethex+0x334>
   bd0aa:	4639      	mov	r1, r7
   bd0ac:	4620      	mov	r0, r4
   bd0ae:	f000 fe25 	bl	bdcfc <__any_on>
   bd0b2:	4682      	mov	sl, r0
   bd0b4:	117b      	asrs	r3, r7, #5
   bd0b6:	2101      	movs	r1, #1
   bd0b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bd0bc:	f007 071f 	and.w	r7, r7, #31
   bd0c0:	fa01 f707 	lsl.w	r7, r1, r7
   bd0c4:	421f      	tst	r7, r3
   bd0c6:	4629      	mov	r1, r5
   bd0c8:	4620      	mov	r0, r4
   bd0ca:	bf18      	it	ne
   bd0cc:	f04a 0a02 	orrne.w	sl, sl, #2
   bd0d0:	1b76      	subs	r6, r6, r5
   bd0d2:	f7ff fded 	bl	bccb0 <rshift>
   bd0d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bd0da:	2702      	movs	r7, #2
   bd0dc:	f1ba 0f00 	cmp.w	sl, #0
   bd0e0:	d048      	beq.n	bd174 <__gethex+0x3f4>
   bd0e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bd0e6:	2b02      	cmp	r3, #2
   bd0e8:	d015      	beq.n	bd116 <__gethex+0x396>
   bd0ea:	2b03      	cmp	r3, #3
   bd0ec:	d017      	beq.n	bd11e <__gethex+0x39e>
   bd0ee:	2b01      	cmp	r3, #1
   bd0f0:	d109      	bne.n	bd106 <__gethex+0x386>
   bd0f2:	f01a 0f02 	tst.w	sl, #2
   bd0f6:	d006      	beq.n	bd106 <__gethex+0x386>
   bd0f8:	f8d9 0000 	ldr.w	r0, [r9]
   bd0fc:	ea4a 0a00 	orr.w	sl, sl, r0
   bd100:	f01a 0f01 	tst.w	sl, #1
   bd104:	d10e      	bne.n	bd124 <__gethex+0x3a4>
   bd106:	f047 0710 	orr.w	r7, r7, #16
   bd10a:	e033      	b.n	bd174 <__gethex+0x3f4>
   bd10c:	f04f 0a01 	mov.w	sl, #1
   bd110:	e7d0      	b.n	bd0b4 <__gethex+0x334>
   bd112:	2701      	movs	r7, #1
   bd114:	e7e2      	b.n	bd0dc <__gethex+0x35c>
   bd116:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd118:	f1c3 0301 	rsb	r3, r3, #1
   bd11c:	9315      	str	r3, [sp, #84]	; 0x54
   bd11e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd120:	2b00      	cmp	r3, #0
   bd122:	d0f0      	beq.n	bd106 <__gethex+0x386>
   bd124:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bd128:	f104 0314 	add.w	r3, r4, #20
   bd12c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bd130:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bd134:	f04f 0c00 	mov.w	ip, #0
   bd138:	4618      	mov	r0, r3
   bd13a:	f853 2b04 	ldr.w	r2, [r3], #4
   bd13e:	f1b2 3fff 	cmp.w	r2, #4294967295
   bd142:	d01c      	beq.n	bd17e <__gethex+0x3fe>
   bd144:	3201      	adds	r2, #1
   bd146:	6002      	str	r2, [r0, #0]
   bd148:	2f02      	cmp	r7, #2
   bd14a:	f104 0314 	add.w	r3, r4, #20
   bd14e:	d13f      	bne.n	bd1d0 <__gethex+0x450>
   bd150:	f8d8 2000 	ldr.w	r2, [r8]
   bd154:	3a01      	subs	r2, #1
   bd156:	42b2      	cmp	r2, r6
   bd158:	d10a      	bne.n	bd170 <__gethex+0x3f0>
   bd15a:	1171      	asrs	r1, r6, #5
   bd15c:	2201      	movs	r2, #1
   bd15e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bd162:	f006 061f 	and.w	r6, r6, #31
   bd166:	fa02 f606 	lsl.w	r6, r2, r6
   bd16a:	421e      	tst	r6, r3
   bd16c:	bf18      	it	ne
   bd16e:	4617      	movne	r7, r2
   bd170:	f047 0720 	orr.w	r7, r7, #32
   bd174:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bd176:	601c      	str	r4, [r3, #0]
   bd178:	9b04      	ldr	r3, [sp, #16]
   bd17a:	601d      	str	r5, [r3, #0]
   bd17c:	e695      	b.n	bceaa <__gethex+0x12a>
   bd17e:	4299      	cmp	r1, r3
   bd180:	f843 cc04 	str.w	ip, [r3, #-4]
   bd184:	d8d8      	bhi.n	bd138 <__gethex+0x3b8>
   bd186:	68a3      	ldr	r3, [r4, #8]
   bd188:	459b      	cmp	fp, r3
   bd18a:	db19      	blt.n	bd1c0 <__gethex+0x440>
   bd18c:	6861      	ldr	r1, [r4, #4]
   bd18e:	ee18 0a10 	vmov	r0, s16
   bd192:	3101      	adds	r1, #1
   bd194:	f000 f912 	bl	bd3bc <_Balloc>
   bd198:	4681      	mov	r9, r0
   bd19a:	b918      	cbnz	r0, bd1a4 <__gethex+0x424>
   bd19c:	4b1a      	ldr	r3, [pc, #104]	; (bd208 <__gethex+0x488>)
   bd19e:	4602      	mov	r2, r0
   bd1a0:	2184      	movs	r1, #132	; 0x84
   bd1a2:	e6a8      	b.n	bcef6 <__gethex+0x176>
   bd1a4:	6922      	ldr	r2, [r4, #16]
   bd1a6:	3202      	adds	r2, #2
   bd1a8:	f104 010c 	add.w	r1, r4, #12
   bd1ac:	0092      	lsls	r2, r2, #2
   bd1ae:	300c      	adds	r0, #12
   bd1b0:	f7fe fd89 	bl	bbcc6 <memcpy>
   bd1b4:	4621      	mov	r1, r4
   bd1b6:	ee18 0a10 	vmov	r0, s16
   bd1ba:	f000 f93f 	bl	bd43c <_Bfree>
   bd1be:	464c      	mov	r4, r9
   bd1c0:	6923      	ldr	r3, [r4, #16]
   bd1c2:	1c5a      	adds	r2, r3, #1
   bd1c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bd1c8:	6122      	str	r2, [r4, #16]
   bd1ca:	2201      	movs	r2, #1
   bd1cc:	615a      	str	r2, [r3, #20]
   bd1ce:	e7bb      	b.n	bd148 <__gethex+0x3c8>
   bd1d0:	6922      	ldr	r2, [r4, #16]
   bd1d2:	455a      	cmp	r2, fp
   bd1d4:	dd0b      	ble.n	bd1ee <__gethex+0x46e>
   bd1d6:	2101      	movs	r1, #1
   bd1d8:	4620      	mov	r0, r4
   bd1da:	f7ff fd69 	bl	bccb0 <rshift>
   bd1de:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bd1e2:	3501      	adds	r5, #1
   bd1e4:	42ab      	cmp	r3, r5
   bd1e6:	f6ff aed0 	blt.w	bcf8a <__gethex+0x20a>
   bd1ea:	2701      	movs	r7, #1
   bd1ec:	e7c0      	b.n	bd170 <__gethex+0x3f0>
   bd1ee:	f016 061f 	ands.w	r6, r6, #31
   bd1f2:	d0fa      	beq.n	bd1ea <__gethex+0x46a>
   bd1f4:	4453      	add	r3, sl
   bd1f6:	f1c6 0620 	rsb	r6, r6, #32
   bd1fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bd1fe:	f000 f9cf 	bl	bd5a0 <__hi0bits>
   bd202:	42b0      	cmp	r0, r6
   bd204:	dbe7      	blt.n	bd1d6 <__gethex+0x456>
   bd206:	e7f0      	b.n	bd1ea <__gethex+0x46a>
   bd208:	000beaf9 	.word	0x000beaf9

000bd20c <L_shift>:
   bd20c:	f1c2 0208 	rsb	r2, r2, #8
   bd210:	0092      	lsls	r2, r2, #2
   bd212:	b570      	push	{r4, r5, r6, lr}
   bd214:	f1c2 0620 	rsb	r6, r2, #32
   bd218:	6843      	ldr	r3, [r0, #4]
   bd21a:	6804      	ldr	r4, [r0, #0]
   bd21c:	fa03 f506 	lsl.w	r5, r3, r6
   bd220:	432c      	orrs	r4, r5
   bd222:	40d3      	lsrs	r3, r2
   bd224:	6004      	str	r4, [r0, #0]
   bd226:	f840 3f04 	str.w	r3, [r0, #4]!
   bd22a:	4288      	cmp	r0, r1
   bd22c:	d3f4      	bcc.n	bd218 <L_shift+0xc>
   bd22e:	bd70      	pop	{r4, r5, r6, pc}

000bd230 <__match>:
   bd230:	b530      	push	{r4, r5, lr}
   bd232:	6803      	ldr	r3, [r0, #0]
   bd234:	3301      	adds	r3, #1
   bd236:	f811 4b01 	ldrb.w	r4, [r1], #1
   bd23a:	b914      	cbnz	r4, bd242 <__match+0x12>
   bd23c:	6003      	str	r3, [r0, #0]
   bd23e:	2001      	movs	r0, #1
   bd240:	bd30      	pop	{r4, r5, pc}
   bd242:	f813 2b01 	ldrb.w	r2, [r3], #1
   bd246:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bd24a:	2d19      	cmp	r5, #25
   bd24c:	bf98      	it	ls
   bd24e:	3220      	addls	r2, #32
   bd250:	42a2      	cmp	r2, r4
   bd252:	d0f0      	beq.n	bd236 <__match+0x6>
   bd254:	2000      	movs	r0, #0
   bd256:	e7f3      	b.n	bd240 <__match+0x10>

000bd258 <__hexnan>:
   bd258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd25c:	680b      	ldr	r3, [r1, #0]
   bd25e:	115e      	asrs	r6, r3, #5
   bd260:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bd264:	f013 031f 	ands.w	r3, r3, #31
   bd268:	b087      	sub	sp, #28
   bd26a:	bf18      	it	ne
   bd26c:	3604      	addne	r6, #4
   bd26e:	2500      	movs	r5, #0
   bd270:	1f37      	subs	r7, r6, #4
   bd272:	4690      	mov	r8, r2
   bd274:	6802      	ldr	r2, [r0, #0]
   bd276:	9301      	str	r3, [sp, #4]
   bd278:	4682      	mov	sl, r0
   bd27a:	f846 5c04 	str.w	r5, [r6, #-4]
   bd27e:	46b9      	mov	r9, r7
   bd280:	463c      	mov	r4, r7
   bd282:	9502      	str	r5, [sp, #8]
   bd284:	46ab      	mov	fp, r5
   bd286:	7851      	ldrb	r1, [r2, #1]
   bd288:	1c53      	adds	r3, r2, #1
   bd28a:	9303      	str	r3, [sp, #12]
   bd28c:	b341      	cbz	r1, bd2e0 <__hexnan+0x88>
   bd28e:	4608      	mov	r0, r1
   bd290:	9205      	str	r2, [sp, #20]
   bd292:	9104      	str	r1, [sp, #16]
   bd294:	f7ff fd5e 	bl	bcd54 <__hexdig_fun>
   bd298:	2800      	cmp	r0, #0
   bd29a:	d14f      	bne.n	bd33c <__hexnan+0xe4>
   bd29c:	9904      	ldr	r1, [sp, #16]
   bd29e:	9a05      	ldr	r2, [sp, #20]
   bd2a0:	2920      	cmp	r1, #32
   bd2a2:	d818      	bhi.n	bd2d6 <__hexnan+0x7e>
   bd2a4:	9b02      	ldr	r3, [sp, #8]
   bd2a6:	459b      	cmp	fp, r3
   bd2a8:	dd13      	ble.n	bd2d2 <__hexnan+0x7a>
   bd2aa:	454c      	cmp	r4, r9
   bd2ac:	d206      	bcs.n	bd2bc <__hexnan+0x64>
   bd2ae:	2d07      	cmp	r5, #7
   bd2b0:	dc04      	bgt.n	bd2bc <__hexnan+0x64>
   bd2b2:	462a      	mov	r2, r5
   bd2b4:	4649      	mov	r1, r9
   bd2b6:	4620      	mov	r0, r4
   bd2b8:	f7ff ffa8 	bl	bd20c <L_shift>
   bd2bc:	4544      	cmp	r4, r8
   bd2be:	d950      	bls.n	bd362 <__hexnan+0x10a>
   bd2c0:	2300      	movs	r3, #0
   bd2c2:	f1a4 0904 	sub.w	r9, r4, #4
   bd2c6:	f844 3c04 	str.w	r3, [r4, #-4]
   bd2ca:	f8cd b008 	str.w	fp, [sp, #8]
   bd2ce:	464c      	mov	r4, r9
   bd2d0:	461d      	mov	r5, r3
   bd2d2:	9a03      	ldr	r2, [sp, #12]
   bd2d4:	e7d7      	b.n	bd286 <__hexnan+0x2e>
   bd2d6:	2929      	cmp	r1, #41	; 0x29
   bd2d8:	d156      	bne.n	bd388 <__hexnan+0x130>
   bd2da:	3202      	adds	r2, #2
   bd2dc:	f8ca 2000 	str.w	r2, [sl]
   bd2e0:	f1bb 0f00 	cmp.w	fp, #0
   bd2e4:	d050      	beq.n	bd388 <__hexnan+0x130>
   bd2e6:	454c      	cmp	r4, r9
   bd2e8:	d206      	bcs.n	bd2f8 <__hexnan+0xa0>
   bd2ea:	2d07      	cmp	r5, #7
   bd2ec:	dc04      	bgt.n	bd2f8 <__hexnan+0xa0>
   bd2ee:	462a      	mov	r2, r5
   bd2f0:	4649      	mov	r1, r9
   bd2f2:	4620      	mov	r0, r4
   bd2f4:	f7ff ff8a 	bl	bd20c <L_shift>
   bd2f8:	4544      	cmp	r4, r8
   bd2fa:	d934      	bls.n	bd366 <__hexnan+0x10e>
   bd2fc:	f1a8 0204 	sub.w	r2, r8, #4
   bd300:	4623      	mov	r3, r4
   bd302:	f853 1b04 	ldr.w	r1, [r3], #4
   bd306:	f842 1f04 	str.w	r1, [r2, #4]!
   bd30a:	429f      	cmp	r7, r3
   bd30c:	d2f9      	bcs.n	bd302 <__hexnan+0xaa>
   bd30e:	1b3b      	subs	r3, r7, r4
   bd310:	f023 0303 	bic.w	r3, r3, #3
   bd314:	3304      	adds	r3, #4
   bd316:	3401      	adds	r4, #1
   bd318:	3e03      	subs	r6, #3
   bd31a:	42b4      	cmp	r4, r6
   bd31c:	bf88      	it	hi
   bd31e:	2304      	movhi	r3, #4
   bd320:	4443      	add	r3, r8
   bd322:	2200      	movs	r2, #0
   bd324:	f843 2b04 	str.w	r2, [r3], #4
   bd328:	429f      	cmp	r7, r3
   bd32a:	d2fb      	bcs.n	bd324 <__hexnan+0xcc>
   bd32c:	683b      	ldr	r3, [r7, #0]
   bd32e:	b91b      	cbnz	r3, bd338 <__hexnan+0xe0>
   bd330:	4547      	cmp	r7, r8
   bd332:	d127      	bne.n	bd384 <__hexnan+0x12c>
   bd334:	2301      	movs	r3, #1
   bd336:	603b      	str	r3, [r7, #0]
   bd338:	2005      	movs	r0, #5
   bd33a:	e026      	b.n	bd38a <__hexnan+0x132>
   bd33c:	3501      	adds	r5, #1
   bd33e:	2d08      	cmp	r5, #8
   bd340:	f10b 0b01 	add.w	fp, fp, #1
   bd344:	dd06      	ble.n	bd354 <__hexnan+0xfc>
   bd346:	4544      	cmp	r4, r8
   bd348:	d9c3      	bls.n	bd2d2 <__hexnan+0x7a>
   bd34a:	2300      	movs	r3, #0
   bd34c:	f844 3c04 	str.w	r3, [r4, #-4]
   bd350:	2501      	movs	r5, #1
   bd352:	3c04      	subs	r4, #4
   bd354:	6822      	ldr	r2, [r4, #0]
   bd356:	f000 000f 	and.w	r0, r0, #15
   bd35a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bd35e:	6022      	str	r2, [r4, #0]
   bd360:	e7b7      	b.n	bd2d2 <__hexnan+0x7a>
   bd362:	2508      	movs	r5, #8
   bd364:	e7b5      	b.n	bd2d2 <__hexnan+0x7a>
   bd366:	9b01      	ldr	r3, [sp, #4]
   bd368:	2b00      	cmp	r3, #0
   bd36a:	d0df      	beq.n	bd32c <__hexnan+0xd4>
   bd36c:	f04f 32ff 	mov.w	r2, #4294967295
   bd370:	f1c3 0320 	rsb	r3, r3, #32
   bd374:	fa22 f303 	lsr.w	r3, r2, r3
   bd378:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bd37c:	401a      	ands	r2, r3
   bd37e:	f846 2c04 	str.w	r2, [r6, #-4]
   bd382:	e7d3      	b.n	bd32c <__hexnan+0xd4>
   bd384:	3f04      	subs	r7, #4
   bd386:	e7d1      	b.n	bd32c <__hexnan+0xd4>
   bd388:	2004      	movs	r0, #4
   bd38a:	b007      	add	sp, #28
   bd38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd390 <__retarget_lock_acquire_recursive>:
   bd390:	4770      	bx	lr

000bd392 <__retarget_lock_release>:
   bd392:	4770      	bx	lr

000bd394 <__retarget_lock_release_recursive>:
   bd394:	4770      	bx	lr

000bd396 <__ascii_mbtowc>:
   bd396:	b082      	sub	sp, #8
   bd398:	b901      	cbnz	r1, bd39c <__ascii_mbtowc+0x6>
   bd39a:	a901      	add	r1, sp, #4
   bd39c:	b142      	cbz	r2, bd3b0 <__ascii_mbtowc+0x1a>
   bd39e:	b14b      	cbz	r3, bd3b4 <__ascii_mbtowc+0x1e>
   bd3a0:	7813      	ldrb	r3, [r2, #0]
   bd3a2:	600b      	str	r3, [r1, #0]
   bd3a4:	7812      	ldrb	r2, [r2, #0]
   bd3a6:	1e10      	subs	r0, r2, #0
   bd3a8:	bf18      	it	ne
   bd3aa:	2001      	movne	r0, #1
   bd3ac:	b002      	add	sp, #8
   bd3ae:	4770      	bx	lr
   bd3b0:	4610      	mov	r0, r2
   bd3b2:	e7fb      	b.n	bd3ac <__ascii_mbtowc+0x16>
   bd3b4:	f06f 0001 	mvn.w	r0, #1
   bd3b8:	e7f8      	b.n	bd3ac <__ascii_mbtowc+0x16>
	...

000bd3bc <_Balloc>:
   bd3bc:	b570      	push	{r4, r5, r6, lr}
   bd3be:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bd3c0:	4604      	mov	r4, r0
   bd3c2:	460d      	mov	r5, r1
   bd3c4:	b976      	cbnz	r6, bd3e4 <_Balloc+0x28>
   bd3c6:	2010      	movs	r0, #16
   bd3c8:	f7fa f824 	bl	b7414 <malloc>
   bd3cc:	4602      	mov	r2, r0
   bd3ce:	6260      	str	r0, [r4, #36]	; 0x24
   bd3d0:	b920      	cbnz	r0, bd3dc <_Balloc+0x20>
   bd3d2:	4b18      	ldr	r3, [pc, #96]	; (bd434 <_Balloc+0x78>)
   bd3d4:	4818      	ldr	r0, [pc, #96]	; (bd438 <_Balloc+0x7c>)
   bd3d6:	2166      	movs	r1, #102	; 0x66
   bd3d8:	f7fa f86c 	bl	b74b4 <__assert_func>
   bd3dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bd3e0:	6006      	str	r6, [r0, #0]
   bd3e2:	60c6      	str	r6, [r0, #12]
   bd3e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bd3e6:	68f3      	ldr	r3, [r6, #12]
   bd3e8:	b183      	cbz	r3, bd40c <_Balloc+0x50>
   bd3ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bd3ec:	68db      	ldr	r3, [r3, #12]
   bd3ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bd3f2:	b9b8      	cbnz	r0, bd424 <_Balloc+0x68>
   bd3f4:	2101      	movs	r1, #1
   bd3f6:	fa01 f605 	lsl.w	r6, r1, r5
   bd3fa:	1d72      	adds	r2, r6, #5
   bd3fc:	0092      	lsls	r2, r2, #2
   bd3fe:	4620      	mov	r0, r4
   bd400:	f000 fc9d 	bl	bdd3e <_calloc_r>
   bd404:	b160      	cbz	r0, bd420 <_Balloc+0x64>
   bd406:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bd40a:	e00e      	b.n	bd42a <_Balloc+0x6e>
   bd40c:	2221      	movs	r2, #33	; 0x21
   bd40e:	2104      	movs	r1, #4
   bd410:	4620      	mov	r0, r4
   bd412:	f000 fc94 	bl	bdd3e <_calloc_r>
   bd416:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bd418:	60f0      	str	r0, [r6, #12]
   bd41a:	68db      	ldr	r3, [r3, #12]
   bd41c:	2b00      	cmp	r3, #0
   bd41e:	d1e4      	bne.n	bd3ea <_Balloc+0x2e>
   bd420:	2000      	movs	r0, #0
   bd422:	bd70      	pop	{r4, r5, r6, pc}
   bd424:	6802      	ldr	r2, [r0, #0]
   bd426:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bd42a:	2300      	movs	r3, #0
   bd42c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bd430:	e7f7      	b.n	bd422 <_Balloc+0x66>
   bd432:	bf00      	nop
   bd434:	000be901 	.word	0x000be901
   bd438:	000beba4 	.word	0x000beba4

000bd43c <_Bfree>:
   bd43c:	b570      	push	{r4, r5, r6, lr}
   bd43e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bd440:	4605      	mov	r5, r0
   bd442:	460c      	mov	r4, r1
   bd444:	b976      	cbnz	r6, bd464 <_Bfree+0x28>
   bd446:	2010      	movs	r0, #16
   bd448:	f7f9 ffe4 	bl	b7414 <malloc>
   bd44c:	4602      	mov	r2, r0
   bd44e:	6268      	str	r0, [r5, #36]	; 0x24
   bd450:	b920      	cbnz	r0, bd45c <_Bfree+0x20>
   bd452:	4b09      	ldr	r3, [pc, #36]	; (bd478 <_Bfree+0x3c>)
   bd454:	4809      	ldr	r0, [pc, #36]	; (bd47c <_Bfree+0x40>)
   bd456:	218a      	movs	r1, #138	; 0x8a
   bd458:	f7fa f82c 	bl	b74b4 <__assert_func>
   bd45c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bd460:	6006      	str	r6, [r0, #0]
   bd462:	60c6      	str	r6, [r0, #12]
   bd464:	b13c      	cbz	r4, bd476 <_Bfree+0x3a>
   bd466:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bd468:	6862      	ldr	r2, [r4, #4]
   bd46a:	68db      	ldr	r3, [r3, #12]
   bd46c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bd470:	6021      	str	r1, [r4, #0]
   bd472:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bd476:	bd70      	pop	{r4, r5, r6, pc}
   bd478:	000be901 	.word	0x000be901
   bd47c:	000beba4 	.word	0x000beba4

000bd480 <__multadd>:
   bd480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd484:	690d      	ldr	r5, [r1, #16]
   bd486:	4607      	mov	r7, r0
   bd488:	460c      	mov	r4, r1
   bd48a:	461e      	mov	r6, r3
   bd48c:	f101 0c14 	add.w	ip, r1, #20
   bd490:	2000      	movs	r0, #0
   bd492:	f8dc 3000 	ldr.w	r3, [ip]
   bd496:	b299      	uxth	r1, r3
   bd498:	fb02 6101 	mla	r1, r2, r1, r6
   bd49c:	0c1e      	lsrs	r6, r3, #16
   bd49e:	0c0b      	lsrs	r3, r1, #16
   bd4a0:	fb02 3306 	mla	r3, r2, r6, r3
   bd4a4:	b289      	uxth	r1, r1
   bd4a6:	3001      	adds	r0, #1
   bd4a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bd4ac:	4285      	cmp	r5, r0
   bd4ae:	f84c 1b04 	str.w	r1, [ip], #4
   bd4b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bd4b6:	dcec      	bgt.n	bd492 <__multadd+0x12>
   bd4b8:	b30e      	cbz	r6, bd4fe <__multadd+0x7e>
   bd4ba:	68a3      	ldr	r3, [r4, #8]
   bd4bc:	42ab      	cmp	r3, r5
   bd4be:	dc19      	bgt.n	bd4f4 <__multadd+0x74>
   bd4c0:	6861      	ldr	r1, [r4, #4]
   bd4c2:	4638      	mov	r0, r7
   bd4c4:	3101      	adds	r1, #1
   bd4c6:	f7ff ff79 	bl	bd3bc <_Balloc>
   bd4ca:	4680      	mov	r8, r0
   bd4cc:	b928      	cbnz	r0, bd4da <__multadd+0x5a>
   bd4ce:	4602      	mov	r2, r0
   bd4d0:	4b0c      	ldr	r3, [pc, #48]	; (bd504 <__multadd+0x84>)
   bd4d2:	480d      	ldr	r0, [pc, #52]	; (bd508 <__multadd+0x88>)
   bd4d4:	21b5      	movs	r1, #181	; 0xb5
   bd4d6:	f7f9 ffed 	bl	b74b4 <__assert_func>
   bd4da:	6922      	ldr	r2, [r4, #16]
   bd4dc:	3202      	adds	r2, #2
   bd4de:	f104 010c 	add.w	r1, r4, #12
   bd4e2:	0092      	lsls	r2, r2, #2
   bd4e4:	300c      	adds	r0, #12
   bd4e6:	f7fe fbee 	bl	bbcc6 <memcpy>
   bd4ea:	4621      	mov	r1, r4
   bd4ec:	4638      	mov	r0, r7
   bd4ee:	f7ff ffa5 	bl	bd43c <_Bfree>
   bd4f2:	4644      	mov	r4, r8
   bd4f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bd4f8:	3501      	adds	r5, #1
   bd4fa:	615e      	str	r6, [r3, #20]
   bd4fc:	6125      	str	r5, [r4, #16]
   bd4fe:	4620      	mov	r0, r4
   bd500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd504:	000beaf9 	.word	0x000beaf9
   bd508:	000beba4 	.word	0x000beba4

000bd50c <__s2b>:
   bd50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd510:	460c      	mov	r4, r1
   bd512:	4615      	mov	r5, r2
   bd514:	461f      	mov	r7, r3
   bd516:	2209      	movs	r2, #9
   bd518:	3308      	adds	r3, #8
   bd51a:	4606      	mov	r6, r0
   bd51c:	fb93 f3f2 	sdiv	r3, r3, r2
   bd520:	2100      	movs	r1, #0
   bd522:	2201      	movs	r2, #1
   bd524:	429a      	cmp	r2, r3
   bd526:	db09      	blt.n	bd53c <__s2b+0x30>
   bd528:	4630      	mov	r0, r6
   bd52a:	f7ff ff47 	bl	bd3bc <_Balloc>
   bd52e:	b940      	cbnz	r0, bd542 <__s2b+0x36>
   bd530:	4602      	mov	r2, r0
   bd532:	4b19      	ldr	r3, [pc, #100]	; (bd598 <__s2b+0x8c>)
   bd534:	4819      	ldr	r0, [pc, #100]	; (bd59c <__s2b+0x90>)
   bd536:	21ce      	movs	r1, #206	; 0xce
   bd538:	f7f9 ffbc 	bl	b74b4 <__assert_func>
   bd53c:	0052      	lsls	r2, r2, #1
   bd53e:	3101      	adds	r1, #1
   bd540:	e7f0      	b.n	bd524 <__s2b+0x18>
   bd542:	9b08      	ldr	r3, [sp, #32]
   bd544:	6143      	str	r3, [r0, #20]
   bd546:	2d09      	cmp	r5, #9
   bd548:	f04f 0301 	mov.w	r3, #1
   bd54c:	6103      	str	r3, [r0, #16]
   bd54e:	dd16      	ble.n	bd57e <__s2b+0x72>
   bd550:	f104 0909 	add.w	r9, r4, #9
   bd554:	46c8      	mov	r8, r9
   bd556:	442c      	add	r4, r5
   bd558:	f818 3b01 	ldrb.w	r3, [r8], #1
   bd55c:	4601      	mov	r1, r0
   bd55e:	3b30      	subs	r3, #48	; 0x30
   bd560:	220a      	movs	r2, #10
   bd562:	4630      	mov	r0, r6
   bd564:	f7ff ff8c 	bl	bd480 <__multadd>
   bd568:	45a0      	cmp	r8, r4
   bd56a:	d1f5      	bne.n	bd558 <__s2b+0x4c>
   bd56c:	f1a5 0408 	sub.w	r4, r5, #8
   bd570:	444c      	add	r4, r9
   bd572:	1b2d      	subs	r5, r5, r4
   bd574:	1963      	adds	r3, r4, r5
   bd576:	42bb      	cmp	r3, r7
   bd578:	db04      	blt.n	bd584 <__s2b+0x78>
   bd57a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd57e:	340a      	adds	r4, #10
   bd580:	2509      	movs	r5, #9
   bd582:	e7f6      	b.n	bd572 <__s2b+0x66>
   bd584:	f814 3b01 	ldrb.w	r3, [r4], #1
   bd588:	4601      	mov	r1, r0
   bd58a:	3b30      	subs	r3, #48	; 0x30
   bd58c:	220a      	movs	r2, #10
   bd58e:	4630      	mov	r0, r6
   bd590:	f7ff ff76 	bl	bd480 <__multadd>
   bd594:	e7ee      	b.n	bd574 <__s2b+0x68>
   bd596:	bf00      	nop
   bd598:	000beaf9 	.word	0x000beaf9
   bd59c:	000beba4 	.word	0x000beba4

000bd5a0 <__hi0bits>:
   bd5a0:	0c03      	lsrs	r3, r0, #16
   bd5a2:	041b      	lsls	r3, r3, #16
   bd5a4:	b9d3      	cbnz	r3, bd5dc <__hi0bits+0x3c>
   bd5a6:	0400      	lsls	r0, r0, #16
   bd5a8:	2310      	movs	r3, #16
   bd5aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bd5ae:	bf04      	itt	eq
   bd5b0:	0200      	lsleq	r0, r0, #8
   bd5b2:	3308      	addeq	r3, #8
   bd5b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bd5b8:	bf04      	itt	eq
   bd5ba:	0100      	lsleq	r0, r0, #4
   bd5bc:	3304      	addeq	r3, #4
   bd5be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bd5c2:	bf04      	itt	eq
   bd5c4:	0080      	lsleq	r0, r0, #2
   bd5c6:	3302      	addeq	r3, #2
   bd5c8:	2800      	cmp	r0, #0
   bd5ca:	db05      	blt.n	bd5d8 <__hi0bits+0x38>
   bd5cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bd5d0:	f103 0301 	add.w	r3, r3, #1
   bd5d4:	bf08      	it	eq
   bd5d6:	2320      	moveq	r3, #32
   bd5d8:	4618      	mov	r0, r3
   bd5da:	4770      	bx	lr
   bd5dc:	2300      	movs	r3, #0
   bd5de:	e7e4      	b.n	bd5aa <__hi0bits+0xa>

000bd5e0 <__lo0bits>:
   bd5e0:	6803      	ldr	r3, [r0, #0]
   bd5e2:	f013 0207 	ands.w	r2, r3, #7
   bd5e6:	4601      	mov	r1, r0
   bd5e8:	d00b      	beq.n	bd602 <__lo0bits+0x22>
   bd5ea:	07da      	lsls	r2, r3, #31
   bd5ec:	d423      	bmi.n	bd636 <__lo0bits+0x56>
   bd5ee:	0798      	lsls	r0, r3, #30
   bd5f0:	bf49      	itett	mi
   bd5f2:	085b      	lsrmi	r3, r3, #1
   bd5f4:	089b      	lsrpl	r3, r3, #2
   bd5f6:	2001      	movmi	r0, #1
   bd5f8:	600b      	strmi	r3, [r1, #0]
   bd5fa:	bf5c      	itt	pl
   bd5fc:	600b      	strpl	r3, [r1, #0]
   bd5fe:	2002      	movpl	r0, #2
   bd600:	4770      	bx	lr
   bd602:	b298      	uxth	r0, r3
   bd604:	b9a8      	cbnz	r0, bd632 <__lo0bits+0x52>
   bd606:	0c1b      	lsrs	r3, r3, #16
   bd608:	2010      	movs	r0, #16
   bd60a:	b2da      	uxtb	r2, r3
   bd60c:	b90a      	cbnz	r2, bd612 <__lo0bits+0x32>
   bd60e:	3008      	adds	r0, #8
   bd610:	0a1b      	lsrs	r3, r3, #8
   bd612:	071a      	lsls	r2, r3, #28
   bd614:	bf04      	itt	eq
   bd616:	091b      	lsreq	r3, r3, #4
   bd618:	3004      	addeq	r0, #4
   bd61a:	079a      	lsls	r2, r3, #30
   bd61c:	bf04      	itt	eq
   bd61e:	089b      	lsreq	r3, r3, #2
   bd620:	3002      	addeq	r0, #2
   bd622:	07da      	lsls	r2, r3, #31
   bd624:	d403      	bmi.n	bd62e <__lo0bits+0x4e>
   bd626:	085b      	lsrs	r3, r3, #1
   bd628:	f100 0001 	add.w	r0, r0, #1
   bd62c:	d005      	beq.n	bd63a <__lo0bits+0x5a>
   bd62e:	600b      	str	r3, [r1, #0]
   bd630:	4770      	bx	lr
   bd632:	4610      	mov	r0, r2
   bd634:	e7e9      	b.n	bd60a <__lo0bits+0x2a>
   bd636:	2000      	movs	r0, #0
   bd638:	4770      	bx	lr
   bd63a:	2020      	movs	r0, #32
   bd63c:	4770      	bx	lr
	...

000bd640 <__i2b>:
   bd640:	b510      	push	{r4, lr}
   bd642:	460c      	mov	r4, r1
   bd644:	2101      	movs	r1, #1
   bd646:	f7ff feb9 	bl	bd3bc <_Balloc>
   bd64a:	4602      	mov	r2, r0
   bd64c:	b928      	cbnz	r0, bd65a <__i2b+0x1a>
   bd64e:	4b05      	ldr	r3, [pc, #20]	; (bd664 <__i2b+0x24>)
   bd650:	4805      	ldr	r0, [pc, #20]	; (bd668 <__i2b+0x28>)
   bd652:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bd656:	f7f9 ff2d 	bl	b74b4 <__assert_func>
   bd65a:	2301      	movs	r3, #1
   bd65c:	6144      	str	r4, [r0, #20]
   bd65e:	6103      	str	r3, [r0, #16]
   bd660:	bd10      	pop	{r4, pc}
   bd662:	bf00      	nop
   bd664:	000beaf9 	.word	0x000beaf9
   bd668:	000beba4 	.word	0x000beba4

000bd66c <__multiply>:
   bd66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd670:	4691      	mov	r9, r2
   bd672:	690a      	ldr	r2, [r1, #16]
   bd674:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bd678:	429a      	cmp	r2, r3
   bd67a:	bfb8      	it	lt
   bd67c:	460b      	movlt	r3, r1
   bd67e:	460c      	mov	r4, r1
   bd680:	bfbc      	itt	lt
   bd682:	464c      	movlt	r4, r9
   bd684:	4699      	movlt	r9, r3
   bd686:	6927      	ldr	r7, [r4, #16]
   bd688:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bd68c:	68a3      	ldr	r3, [r4, #8]
   bd68e:	6861      	ldr	r1, [r4, #4]
   bd690:	eb07 060a 	add.w	r6, r7, sl
   bd694:	42b3      	cmp	r3, r6
   bd696:	b085      	sub	sp, #20
   bd698:	bfb8      	it	lt
   bd69a:	3101      	addlt	r1, #1
   bd69c:	f7ff fe8e 	bl	bd3bc <_Balloc>
   bd6a0:	b930      	cbnz	r0, bd6b0 <__multiply+0x44>
   bd6a2:	4602      	mov	r2, r0
   bd6a4:	4b44      	ldr	r3, [pc, #272]	; (bd7b8 <__multiply+0x14c>)
   bd6a6:	4845      	ldr	r0, [pc, #276]	; (bd7bc <__multiply+0x150>)
   bd6a8:	f240 115d 	movw	r1, #349	; 0x15d
   bd6ac:	f7f9 ff02 	bl	b74b4 <__assert_func>
   bd6b0:	f100 0514 	add.w	r5, r0, #20
   bd6b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bd6b8:	462b      	mov	r3, r5
   bd6ba:	2200      	movs	r2, #0
   bd6bc:	4543      	cmp	r3, r8
   bd6be:	d321      	bcc.n	bd704 <__multiply+0x98>
   bd6c0:	f104 0314 	add.w	r3, r4, #20
   bd6c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bd6c8:	f109 0314 	add.w	r3, r9, #20
   bd6cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bd6d0:	9202      	str	r2, [sp, #8]
   bd6d2:	1b3a      	subs	r2, r7, r4
   bd6d4:	3a15      	subs	r2, #21
   bd6d6:	f022 0203 	bic.w	r2, r2, #3
   bd6da:	3204      	adds	r2, #4
   bd6dc:	f104 0115 	add.w	r1, r4, #21
   bd6e0:	428f      	cmp	r7, r1
   bd6e2:	bf38      	it	cc
   bd6e4:	2204      	movcc	r2, #4
   bd6e6:	9201      	str	r2, [sp, #4]
   bd6e8:	9a02      	ldr	r2, [sp, #8]
   bd6ea:	9303      	str	r3, [sp, #12]
   bd6ec:	429a      	cmp	r2, r3
   bd6ee:	d80c      	bhi.n	bd70a <__multiply+0x9e>
   bd6f0:	2e00      	cmp	r6, #0
   bd6f2:	dd03      	ble.n	bd6fc <__multiply+0x90>
   bd6f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bd6f8:	2b00      	cmp	r3, #0
   bd6fa:	d05a      	beq.n	bd7b2 <__multiply+0x146>
   bd6fc:	6106      	str	r6, [r0, #16]
   bd6fe:	b005      	add	sp, #20
   bd700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd704:	f843 2b04 	str.w	r2, [r3], #4
   bd708:	e7d8      	b.n	bd6bc <__multiply+0x50>
   bd70a:	f8b3 a000 	ldrh.w	sl, [r3]
   bd70e:	f1ba 0f00 	cmp.w	sl, #0
   bd712:	d024      	beq.n	bd75e <__multiply+0xf2>
   bd714:	f104 0e14 	add.w	lr, r4, #20
   bd718:	46a9      	mov	r9, r5
   bd71a:	f04f 0c00 	mov.w	ip, #0
   bd71e:	f85e 2b04 	ldr.w	r2, [lr], #4
   bd722:	f8d9 1000 	ldr.w	r1, [r9]
   bd726:	fa1f fb82 	uxth.w	fp, r2
   bd72a:	b289      	uxth	r1, r1
   bd72c:	fb0a 110b 	mla	r1, sl, fp, r1
   bd730:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bd734:	f8d9 2000 	ldr.w	r2, [r9]
   bd738:	4461      	add	r1, ip
   bd73a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bd73e:	fb0a c20b 	mla	r2, sl, fp, ip
   bd742:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bd746:	b289      	uxth	r1, r1
   bd748:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bd74c:	4577      	cmp	r7, lr
   bd74e:	f849 1b04 	str.w	r1, [r9], #4
   bd752:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bd756:	d8e2      	bhi.n	bd71e <__multiply+0xb2>
   bd758:	9a01      	ldr	r2, [sp, #4]
   bd75a:	f845 c002 	str.w	ip, [r5, r2]
   bd75e:	9a03      	ldr	r2, [sp, #12]
   bd760:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bd764:	3304      	adds	r3, #4
   bd766:	f1b9 0f00 	cmp.w	r9, #0
   bd76a:	d020      	beq.n	bd7ae <__multiply+0x142>
   bd76c:	6829      	ldr	r1, [r5, #0]
   bd76e:	f104 0c14 	add.w	ip, r4, #20
   bd772:	46ae      	mov	lr, r5
   bd774:	f04f 0a00 	mov.w	sl, #0
   bd778:	f8bc b000 	ldrh.w	fp, [ip]
   bd77c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bd780:	fb09 220b 	mla	r2, r9, fp, r2
   bd784:	4492      	add	sl, r2
   bd786:	b289      	uxth	r1, r1
   bd788:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bd78c:	f84e 1b04 	str.w	r1, [lr], #4
   bd790:	f85c 2b04 	ldr.w	r2, [ip], #4
   bd794:	f8be 1000 	ldrh.w	r1, [lr]
   bd798:	0c12      	lsrs	r2, r2, #16
   bd79a:	fb09 1102 	mla	r1, r9, r2, r1
   bd79e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bd7a2:	4567      	cmp	r7, ip
   bd7a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bd7a8:	d8e6      	bhi.n	bd778 <__multiply+0x10c>
   bd7aa:	9a01      	ldr	r2, [sp, #4]
   bd7ac:	50a9      	str	r1, [r5, r2]
   bd7ae:	3504      	adds	r5, #4
   bd7b0:	e79a      	b.n	bd6e8 <__multiply+0x7c>
   bd7b2:	3e01      	subs	r6, #1
   bd7b4:	e79c      	b.n	bd6f0 <__multiply+0x84>
   bd7b6:	bf00      	nop
   bd7b8:	000beaf9 	.word	0x000beaf9
   bd7bc:	000beba4 	.word	0x000beba4

000bd7c0 <__pow5mult>:
   bd7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd7c4:	4615      	mov	r5, r2
   bd7c6:	f012 0203 	ands.w	r2, r2, #3
   bd7ca:	4606      	mov	r6, r0
   bd7cc:	460f      	mov	r7, r1
   bd7ce:	d007      	beq.n	bd7e0 <__pow5mult+0x20>
   bd7d0:	4c25      	ldr	r4, [pc, #148]	; (bd868 <__pow5mult+0xa8>)
   bd7d2:	3a01      	subs	r2, #1
   bd7d4:	2300      	movs	r3, #0
   bd7d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bd7da:	f7ff fe51 	bl	bd480 <__multadd>
   bd7de:	4607      	mov	r7, r0
   bd7e0:	10ad      	asrs	r5, r5, #2
   bd7e2:	d03d      	beq.n	bd860 <__pow5mult+0xa0>
   bd7e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bd7e6:	b97c      	cbnz	r4, bd808 <__pow5mult+0x48>
   bd7e8:	2010      	movs	r0, #16
   bd7ea:	f7f9 fe13 	bl	b7414 <malloc>
   bd7ee:	4602      	mov	r2, r0
   bd7f0:	6270      	str	r0, [r6, #36]	; 0x24
   bd7f2:	b928      	cbnz	r0, bd800 <__pow5mult+0x40>
   bd7f4:	4b1d      	ldr	r3, [pc, #116]	; (bd86c <__pow5mult+0xac>)
   bd7f6:	481e      	ldr	r0, [pc, #120]	; (bd870 <__pow5mult+0xb0>)
   bd7f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bd7fc:	f7f9 fe5a 	bl	b74b4 <__assert_func>
   bd800:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bd804:	6004      	str	r4, [r0, #0]
   bd806:	60c4      	str	r4, [r0, #12]
   bd808:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bd80c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bd810:	b94c      	cbnz	r4, bd826 <__pow5mult+0x66>
   bd812:	f240 2171 	movw	r1, #625	; 0x271
   bd816:	4630      	mov	r0, r6
   bd818:	f7ff ff12 	bl	bd640 <__i2b>
   bd81c:	2300      	movs	r3, #0
   bd81e:	f8c8 0008 	str.w	r0, [r8, #8]
   bd822:	4604      	mov	r4, r0
   bd824:	6003      	str	r3, [r0, #0]
   bd826:	f04f 0900 	mov.w	r9, #0
   bd82a:	07eb      	lsls	r3, r5, #31
   bd82c:	d50a      	bpl.n	bd844 <__pow5mult+0x84>
   bd82e:	4639      	mov	r1, r7
   bd830:	4622      	mov	r2, r4
   bd832:	4630      	mov	r0, r6
   bd834:	f7ff ff1a 	bl	bd66c <__multiply>
   bd838:	4639      	mov	r1, r7
   bd83a:	4680      	mov	r8, r0
   bd83c:	4630      	mov	r0, r6
   bd83e:	f7ff fdfd 	bl	bd43c <_Bfree>
   bd842:	4647      	mov	r7, r8
   bd844:	106d      	asrs	r5, r5, #1
   bd846:	d00b      	beq.n	bd860 <__pow5mult+0xa0>
   bd848:	6820      	ldr	r0, [r4, #0]
   bd84a:	b938      	cbnz	r0, bd85c <__pow5mult+0x9c>
   bd84c:	4622      	mov	r2, r4
   bd84e:	4621      	mov	r1, r4
   bd850:	4630      	mov	r0, r6
   bd852:	f7ff ff0b 	bl	bd66c <__multiply>
   bd856:	6020      	str	r0, [r4, #0]
   bd858:	f8c0 9000 	str.w	r9, [r0]
   bd85c:	4604      	mov	r4, r0
   bd85e:	e7e4      	b.n	bd82a <__pow5mult+0x6a>
   bd860:	4638      	mov	r0, r7
   bd862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd866:	bf00      	nop
   bd868:	000bed18 	.word	0x000bed18
   bd86c:	000be901 	.word	0x000be901
   bd870:	000beba4 	.word	0x000beba4

000bd874 <__lshift>:
   bd874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd878:	460c      	mov	r4, r1
   bd87a:	6849      	ldr	r1, [r1, #4]
   bd87c:	6923      	ldr	r3, [r4, #16]
   bd87e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bd882:	68a3      	ldr	r3, [r4, #8]
   bd884:	4607      	mov	r7, r0
   bd886:	4691      	mov	r9, r2
   bd888:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bd88c:	f108 0601 	add.w	r6, r8, #1
   bd890:	42b3      	cmp	r3, r6
   bd892:	db0b      	blt.n	bd8ac <__lshift+0x38>
   bd894:	4638      	mov	r0, r7
   bd896:	f7ff fd91 	bl	bd3bc <_Balloc>
   bd89a:	4605      	mov	r5, r0
   bd89c:	b948      	cbnz	r0, bd8b2 <__lshift+0x3e>
   bd89e:	4602      	mov	r2, r0
   bd8a0:	4b2a      	ldr	r3, [pc, #168]	; (bd94c <__lshift+0xd8>)
   bd8a2:	482b      	ldr	r0, [pc, #172]	; (bd950 <__lshift+0xdc>)
   bd8a4:	f240 11d9 	movw	r1, #473	; 0x1d9
   bd8a8:	f7f9 fe04 	bl	b74b4 <__assert_func>
   bd8ac:	3101      	adds	r1, #1
   bd8ae:	005b      	lsls	r3, r3, #1
   bd8b0:	e7ee      	b.n	bd890 <__lshift+0x1c>
   bd8b2:	2300      	movs	r3, #0
   bd8b4:	f100 0114 	add.w	r1, r0, #20
   bd8b8:	f100 0210 	add.w	r2, r0, #16
   bd8bc:	4618      	mov	r0, r3
   bd8be:	4553      	cmp	r3, sl
   bd8c0:	db37      	blt.n	bd932 <__lshift+0xbe>
   bd8c2:	6920      	ldr	r0, [r4, #16]
   bd8c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bd8c8:	f104 0314 	add.w	r3, r4, #20
   bd8cc:	f019 091f 	ands.w	r9, r9, #31
   bd8d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bd8d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bd8d8:	d02f      	beq.n	bd93a <__lshift+0xc6>
   bd8da:	f1c9 0e20 	rsb	lr, r9, #32
   bd8de:	468a      	mov	sl, r1
   bd8e0:	f04f 0c00 	mov.w	ip, #0
   bd8e4:	681a      	ldr	r2, [r3, #0]
   bd8e6:	fa02 f209 	lsl.w	r2, r2, r9
   bd8ea:	ea42 020c 	orr.w	r2, r2, ip
   bd8ee:	f84a 2b04 	str.w	r2, [sl], #4
   bd8f2:	f853 2b04 	ldr.w	r2, [r3], #4
   bd8f6:	4298      	cmp	r0, r3
   bd8f8:	fa22 fc0e 	lsr.w	ip, r2, lr
   bd8fc:	d8f2      	bhi.n	bd8e4 <__lshift+0x70>
   bd8fe:	1b03      	subs	r3, r0, r4
   bd900:	3b15      	subs	r3, #21
   bd902:	f023 0303 	bic.w	r3, r3, #3
   bd906:	3304      	adds	r3, #4
   bd908:	f104 0215 	add.w	r2, r4, #21
   bd90c:	4290      	cmp	r0, r2
   bd90e:	bf38      	it	cc
   bd910:	2304      	movcc	r3, #4
   bd912:	f841 c003 	str.w	ip, [r1, r3]
   bd916:	f1bc 0f00 	cmp.w	ip, #0
   bd91a:	d001      	beq.n	bd920 <__lshift+0xac>
   bd91c:	f108 0602 	add.w	r6, r8, #2
   bd920:	3e01      	subs	r6, #1
   bd922:	4638      	mov	r0, r7
   bd924:	612e      	str	r6, [r5, #16]
   bd926:	4621      	mov	r1, r4
   bd928:	f7ff fd88 	bl	bd43c <_Bfree>
   bd92c:	4628      	mov	r0, r5
   bd92e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bd932:	f842 0f04 	str.w	r0, [r2, #4]!
   bd936:	3301      	adds	r3, #1
   bd938:	e7c1      	b.n	bd8be <__lshift+0x4a>
   bd93a:	3904      	subs	r1, #4
   bd93c:	f853 2b04 	ldr.w	r2, [r3], #4
   bd940:	f841 2f04 	str.w	r2, [r1, #4]!
   bd944:	4298      	cmp	r0, r3
   bd946:	d8f9      	bhi.n	bd93c <__lshift+0xc8>
   bd948:	e7ea      	b.n	bd920 <__lshift+0xac>
   bd94a:	bf00      	nop
   bd94c:	000beaf9 	.word	0x000beaf9
   bd950:	000beba4 	.word	0x000beba4

000bd954 <__mcmp>:
   bd954:	b530      	push	{r4, r5, lr}
   bd956:	6902      	ldr	r2, [r0, #16]
   bd958:	690c      	ldr	r4, [r1, #16]
   bd95a:	1b12      	subs	r2, r2, r4
   bd95c:	d10e      	bne.n	bd97c <__mcmp+0x28>
   bd95e:	f100 0314 	add.w	r3, r0, #20
   bd962:	3114      	adds	r1, #20
   bd964:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bd968:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bd96c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bd970:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bd974:	42a5      	cmp	r5, r4
   bd976:	d003      	beq.n	bd980 <__mcmp+0x2c>
   bd978:	d305      	bcc.n	bd986 <__mcmp+0x32>
   bd97a:	2201      	movs	r2, #1
   bd97c:	4610      	mov	r0, r2
   bd97e:	bd30      	pop	{r4, r5, pc}
   bd980:	4283      	cmp	r3, r0
   bd982:	d3f3      	bcc.n	bd96c <__mcmp+0x18>
   bd984:	e7fa      	b.n	bd97c <__mcmp+0x28>
   bd986:	f04f 32ff 	mov.w	r2, #4294967295
   bd98a:	e7f7      	b.n	bd97c <__mcmp+0x28>

000bd98c <__mdiff>:
   bd98c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd990:	460c      	mov	r4, r1
   bd992:	4606      	mov	r6, r0
   bd994:	4611      	mov	r1, r2
   bd996:	4620      	mov	r0, r4
   bd998:	4690      	mov	r8, r2
   bd99a:	f7ff ffdb 	bl	bd954 <__mcmp>
   bd99e:	1e05      	subs	r5, r0, #0
   bd9a0:	d110      	bne.n	bd9c4 <__mdiff+0x38>
   bd9a2:	4629      	mov	r1, r5
   bd9a4:	4630      	mov	r0, r6
   bd9a6:	f7ff fd09 	bl	bd3bc <_Balloc>
   bd9aa:	b930      	cbnz	r0, bd9ba <__mdiff+0x2e>
   bd9ac:	4b3a      	ldr	r3, [pc, #232]	; (bda98 <__mdiff+0x10c>)
   bd9ae:	4602      	mov	r2, r0
   bd9b0:	f240 2132 	movw	r1, #562	; 0x232
   bd9b4:	4839      	ldr	r0, [pc, #228]	; (bda9c <__mdiff+0x110>)
   bd9b6:	f7f9 fd7d 	bl	b74b4 <__assert_func>
   bd9ba:	2301      	movs	r3, #1
   bd9bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bd9c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd9c4:	bfa4      	itt	ge
   bd9c6:	4643      	movge	r3, r8
   bd9c8:	46a0      	movge	r8, r4
   bd9ca:	4630      	mov	r0, r6
   bd9cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bd9d0:	bfa6      	itte	ge
   bd9d2:	461c      	movge	r4, r3
   bd9d4:	2500      	movge	r5, #0
   bd9d6:	2501      	movlt	r5, #1
   bd9d8:	f7ff fcf0 	bl	bd3bc <_Balloc>
   bd9dc:	b920      	cbnz	r0, bd9e8 <__mdiff+0x5c>
   bd9de:	4b2e      	ldr	r3, [pc, #184]	; (bda98 <__mdiff+0x10c>)
   bd9e0:	4602      	mov	r2, r0
   bd9e2:	f44f 7110 	mov.w	r1, #576	; 0x240
   bd9e6:	e7e5      	b.n	bd9b4 <__mdiff+0x28>
   bd9e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bd9ec:	6926      	ldr	r6, [r4, #16]
   bd9ee:	60c5      	str	r5, [r0, #12]
   bd9f0:	f104 0914 	add.w	r9, r4, #20
   bd9f4:	f108 0514 	add.w	r5, r8, #20
   bd9f8:	f100 0e14 	add.w	lr, r0, #20
   bd9fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bda00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bda04:	f108 0210 	add.w	r2, r8, #16
   bda08:	46f2      	mov	sl, lr
   bda0a:	2100      	movs	r1, #0
   bda0c:	f859 3b04 	ldr.w	r3, [r9], #4
   bda10:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bda14:	fa1f f883 	uxth.w	r8, r3
   bda18:	fa11 f18b 	uxtah	r1, r1, fp
   bda1c:	0c1b      	lsrs	r3, r3, #16
   bda1e:	eba1 0808 	sub.w	r8, r1, r8
   bda22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bda26:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bda2a:	fa1f f888 	uxth.w	r8, r8
   bda2e:	1419      	asrs	r1, r3, #16
   bda30:	454e      	cmp	r6, r9
   bda32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bda36:	f84a 3b04 	str.w	r3, [sl], #4
   bda3a:	d8e7      	bhi.n	bda0c <__mdiff+0x80>
   bda3c:	1b33      	subs	r3, r6, r4
   bda3e:	3b15      	subs	r3, #21
   bda40:	f023 0303 	bic.w	r3, r3, #3
   bda44:	3304      	adds	r3, #4
   bda46:	3415      	adds	r4, #21
   bda48:	42a6      	cmp	r6, r4
   bda4a:	bf38      	it	cc
   bda4c:	2304      	movcc	r3, #4
   bda4e:	441d      	add	r5, r3
   bda50:	4473      	add	r3, lr
   bda52:	469e      	mov	lr, r3
   bda54:	462e      	mov	r6, r5
   bda56:	4566      	cmp	r6, ip
   bda58:	d30e      	bcc.n	bda78 <__mdiff+0xec>
   bda5a:	f10c 0203 	add.w	r2, ip, #3
   bda5e:	1b52      	subs	r2, r2, r5
   bda60:	f022 0203 	bic.w	r2, r2, #3
   bda64:	3d03      	subs	r5, #3
   bda66:	45ac      	cmp	ip, r5
   bda68:	bf38      	it	cc
   bda6a:	2200      	movcc	r2, #0
   bda6c:	441a      	add	r2, r3
   bda6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bda72:	b17b      	cbz	r3, bda94 <__mdiff+0x108>
   bda74:	6107      	str	r7, [r0, #16]
   bda76:	e7a3      	b.n	bd9c0 <__mdiff+0x34>
   bda78:	f856 8b04 	ldr.w	r8, [r6], #4
   bda7c:	fa11 f288 	uxtah	r2, r1, r8
   bda80:	1414      	asrs	r4, r2, #16
   bda82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bda86:	b292      	uxth	r2, r2
   bda88:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bda8c:	f84e 2b04 	str.w	r2, [lr], #4
   bda90:	1421      	asrs	r1, r4, #16
   bda92:	e7e0      	b.n	bda56 <__mdiff+0xca>
   bda94:	3f01      	subs	r7, #1
   bda96:	e7ea      	b.n	bda6e <__mdiff+0xe2>
   bda98:	000beaf9 	.word	0x000beaf9
   bda9c:	000beba4 	.word	0x000beba4

000bdaa0 <__ulp>:
   bdaa0:	b082      	sub	sp, #8
   bdaa2:	ed8d 0b00 	vstr	d0, [sp]
   bdaa6:	9b01      	ldr	r3, [sp, #4]
   bdaa8:	4912      	ldr	r1, [pc, #72]	; (bdaf4 <__ulp+0x54>)
   bdaaa:	4019      	ands	r1, r3
   bdaac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bdab0:	2900      	cmp	r1, #0
   bdab2:	dd05      	ble.n	bdac0 <__ulp+0x20>
   bdab4:	2200      	movs	r2, #0
   bdab6:	460b      	mov	r3, r1
   bdab8:	ec43 2b10 	vmov	d0, r2, r3
   bdabc:	b002      	add	sp, #8
   bdabe:	4770      	bx	lr
   bdac0:	4249      	negs	r1, r1
   bdac2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bdac6:	ea4f 5021 	mov.w	r0, r1, asr #20
   bdaca:	f04f 0200 	mov.w	r2, #0
   bdace:	f04f 0300 	mov.w	r3, #0
   bdad2:	da04      	bge.n	bdade <__ulp+0x3e>
   bdad4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bdad8:	fa41 f300 	asr.w	r3, r1, r0
   bdadc:	e7ec      	b.n	bdab8 <__ulp+0x18>
   bdade:	f1a0 0114 	sub.w	r1, r0, #20
   bdae2:	291e      	cmp	r1, #30
   bdae4:	bfda      	itte	le
   bdae6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bdaea:	fa20 f101 	lsrle.w	r1, r0, r1
   bdaee:	2101      	movgt	r1, #1
   bdaf0:	460a      	mov	r2, r1
   bdaf2:	e7e1      	b.n	bdab8 <__ulp+0x18>
   bdaf4:	7ff00000 	.word	0x7ff00000

000bdaf8 <__b2d>:
   bdaf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bdafa:	6905      	ldr	r5, [r0, #16]
   bdafc:	f100 0714 	add.w	r7, r0, #20
   bdb00:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bdb04:	1f2e      	subs	r6, r5, #4
   bdb06:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bdb0a:	4620      	mov	r0, r4
   bdb0c:	f7ff fd48 	bl	bd5a0 <__hi0bits>
   bdb10:	f1c0 0320 	rsb	r3, r0, #32
   bdb14:	280a      	cmp	r0, #10
   bdb16:	f8df c07c 	ldr.w	ip, [pc, #124]	; bdb94 <__b2d+0x9c>
   bdb1a:	600b      	str	r3, [r1, #0]
   bdb1c:	dc14      	bgt.n	bdb48 <__b2d+0x50>
   bdb1e:	f1c0 0e0b 	rsb	lr, r0, #11
   bdb22:	fa24 f10e 	lsr.w	r1, r4, lr
   bdb26:	42b7      	cmp	r7, r6
   bdb28:	ea41 030c 	orr.w	r3, r1, ip
   bdb2c:	bf34      	ite	cc
   bdb2e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bdb32:	2100      	movcs	r1, #0
   bdb34:	3015      	adds	r0, #21
   bdb36:	fa04 f000 	lsl.w	r0, r4, r0
   bdb3a:	fa21 f10e 	lsr.w	r1, r1, lr
   bdb3e:	ea40 0201 	orr.w	r2, r0, r1
   bdb42:	ec43 2b10 	vmov	d0, r2, r3
   bdb46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bdb48:	42b7      	cmp	r7, r6
   bdb4a:	bf3a      	itte	cc
   bdb4c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bdb50:	f1a5 0608 	subcc.w	r6, r5, #8
   bdb54:	2100      	movcs	r1, #0
   bdb56:	380b      	subs	r0, #11
   bdb58:	d017      	beq.n	bdb8a <__b2d+0x92>
   bdb5a:	f1c0 0c20 	rsb	ip, r0, #32
   bdb5e:	fa04 f500 	lsl.w	r5, r4, r0
   bdb62:	42be      	cmp	r6, r7
   bdb64:	fa21 f40c 	lsr.w	r4, r1, ip
   bdb68:	ea45 0504 	orr.w	r5, r5, r4
   bdb6c:	bf8c      	ite	hi
   bdb6e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bdb72:	2400      	movls	r4, #0
   bdb74:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bdb78:	fa01 f000 	lsl.w	r0, r1, r0
   bdb7c:	fa24 f40c 	lsr.w	r4, r4, ip
   bdb80:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bdb84:	ea40 0204 	orr.w	r2, r0, r4
   bdb88:	e7db      	b.n	bdb42 <__b2d+0x4a>
   bdb8a:	ea44 030c 	orr.w	r3, r4, ip
   bdb8e:	460a      	mov	r2, r1
   bdb90:	e7d7      	b.n	bdb42 <__b2d+0x4a>
   bdb92:	bf00      	nop
   bdb94:	3ff00000 	.word	0x3ff00000

000bdb98 <__d2b>:
   bdb98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bdb9c:	4689      	mov	r9, r1
   bdb9e:	2101      	movs	r1, #1
   bdba0:	ec57 6b10 	vmov	r6, r7, d0
   bdba4:	4690      	mov	r8, r2
   bdba6:	f7ff fc09 	bl	bd3bc <_Balloc>
   bdbaa:	4604      	mov	r4, r0
   bdbac:	b930      	cbnz	r0, bdbbc <__d2b+0x24>
   bdbae:	4602      	mov	r2, r0
   bdbb0:	4b25      	ldr	r3, [pc, #148]	; (bdc48 <__d2b+0xb0>)
   bdbb2:	4826      	ldr	r0, [pc, #152]	; (bdc4c <__d2b+0xb4>)
   bdbb4:	f240 310a 	movw	r1, #778	; 0x30a
   bdbb8:	f7f9 fc7c 	bl	b74b4 <__assert_func>
   bdbbc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bdbc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bdbc4:	bb35      	cbnz	r5, bdc14 <__d2b+0x7c>
   bdbc6:	2e00      	cmp	r6, #0
   bdbc8:	9301      	str	r3, [sp, #4]
   bdbca:	d028      	beq.n	bdc1e <__d2b+0x86>
   bdbcc:	4668      	mov	r0, sp
   bdbce:	9600      	str	r6, [sp, #0]
   bdbd0:	f7ff fd06 	bl	bd5e0 <__lo0bits>
   bdbd4:	9900      	ldr	r1, [sp, #0]
   bdbd6:	b300      	cbz	r0, bdc1a <__d2b+0x82>
   bdbd8:	9a01      	ldr	r2, [sp, #4]
   bdbda:	f1c0 0320 	rsb	r3, r0, #32
   bdbde:	fa02 f303 	lsl.w	r3, r2, r3
   bdbe2:	430b      	orrs	r3, r1
   bdbe4:	40c2      	lsrs	r2, r0
   bdbe6:	6163      	str	r3, [r4, #20]
   bdbe8:	9201      	str	r2, [sp, #4]
   bdbea:	9b01      	ldr	r3, [sp, #4]
   bdbec:	61a3      	str	r3, [r4, #24]
   bdbee:	2b00      	cmp	r3, #0
   bdbf0:	bf14      	ite	ne
   bdbf2:	2202      	movne	r2, #2
   bdbf4:	2201      	moveq	r2, #1
   bdbf6:	6122      	str	r2, [r4, #16]
   bdbf8:	b1d5      	cbz	r5, bdc30 <__d2b+0x98>
   bdbfa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bdbfe:	4405      	add	r5, r0
   bdc00:	f8c9 5000 	str.w	r5, [r9]
   bdc04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bdc08:	f8c8 0000 	str.w	r0, [r8]
   bdc0c:	4620      	mov	r0, r4
   bdc0e:	b003      	add	sp, #12
   bdc10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bdc14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bdc18:	e7d5      	b.n	bdbc6 <__d2b+0x2e>
   bdc1a:	6161      	str	r1, [r4, #20]
   bdc1c:	e7e5      	b.n	bdbea <__d2b+0x52>
   bdc1e:	a801      	add	r0, sp, #4
   bdc20:	f7ff fcde 	bl	bd5e0 <__lo0bits>
   bdc24:	9b01      	ldr	r3, [sp, #4]
   bdc26:	6163      	str	r3, [r4, #20]
   bdc28:	2201      	movs	r2, #1
   bdc2a:	6122      	str	r2, [r4, #16]
   bdc2c:	3020      	adds	r0, #32
   bdc2e:	e7e3      	b.n	bdbf8 <__d2b+0x60>
   bdc30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bdc34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bdc38:	f8c9 0000 	str.w	r0, [r9]
   bdc3c:	6918      	ldr	r0, [r3, #16]
   bdc3e:	f7ff fcaf 	bl	bd5a0 <__hi0bits>
   bdc42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bdc46:	e7df      	b.n	bdc08 <__d2b+0x70>
   bdc48:	000beaf9 	.word	0x000beaf9
   bdc4c:	000beba4 	.word	0x000beba4

000bdc50 <__ratio>:
   bdc50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdc54:	4688      	mov	r8, r1
   bdc56:	4669      	mov	r1, sp
   bdc58:	4681      	mov	r9, r0
   bdc5a:	f7ff ff4d 	bl	bdaf8 <__b2d>
   bdc5e:	a901      	add	r1, sp, #4
   bdc60:	4640      	mov	r0, r8
   bdc62:	ec55 4b10 	vmov	r4, r5, d0
   bdc66:	f7ff ff47 	bl	bdaf8 <__b2d>
   bdc6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bdc6e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bdc72:	eba3 0c02 	sub.w	ip, r3, r2
   bdc76:	e9dd 3200 	ldrd	r3, r2, [sp]
   bdc7a:	1a9b      	subs	r3, r3, r2
   bdc7c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bdc80:	ec51 0b10 	vmov	r0, r1, d0
   bdc84:	2b00      	cmp	r3, #0
   bdc86:	bfd6      	itet	le
   bdc88:	460a      	movle	r2, r1
   bdc8a:	462a      	movgt	r2, r5
   bdc8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bdc90:	468b      	mov	fp, r1
   bdc92:	462f      	mov	r7, r5
   bdc94:	bfd4      	ite	le
   bdc96:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bdc9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bdc9e:	4620      	mov	r0, r4
   bdca0:	ee10 2a10 	vmov	r2, s0
   bdca4:	465b      	mov	r3, fp
   bdca6:	4639      	mov	r1, r7
   bdca8:	f7fd fdca 	bl	bb840 <__aeabi_ddiv>
   bdcac:	ec41 0b10 	vmov	d0, r0, r1
   bdcb0:	b003      	add	sp, #12
   bdcb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bdcb6 <__copybits>:
   bdcb6:	3901      	subs	r1, #1
   bdcb8:	b570      	push	{r4, r5, r6, lr}
   bdcba:	1149      	asrs	r1, r1, #5
   bdcbc:	6914      	ldr	r4, [r2, #16]
   bdcbe:	3101      	adds	r1, #1
   bdcc0:	f102 0314 	add.w	r3, r2, #20
   bdcc4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bdcc8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bdccc:	1f05      	subs	r5, r0, #4
   bdcce:	42a3      	cmp	r3, r4
   bdcd0:	d30c      	bcc.n	bdcec <__copybits+0x36>
   bdcd2:	1aa3      	subs	r3, r4, r2
   bdcd4:	3b11      	subs	r3, #17
   bdcd6:	f023 0303 	bic.w	r3, r3, #3
   bdcda:	3211      	adds	r2, #17
   bdcdc:	42a2      	cmp	r2, r4
   bdcde:	bf88      	it	hi
   bdce0:	2300      	movhi	r3, #0
   bdce2:	4418      	add	r0, r3
   bdce4:	2300      	movs	r3, #0
   bdce6:	4288      	cmp	r0, r1
   bdce8:	d305      	bcc.n	bdcf6 <__copybits+0x40>
   bdcea:	bd70      	pop	{r4, r5, r6, pc}
   bdcec:	f853 6b04 	ldr.w	r6, [r3], #4
   bdcf0:	f845 6f04 	str.w	r6, [r5, #4]!
   bdcf4:	e7eb      	b.n	bdcce <__copybits+0x18>
   bdcf6:	f840 3b04 	str.w	r3, [r0], #4
   bdcfa:	e7f4      	b.n	bdce6 <__copybits+0x30>

000bdcfc <__any_on>:
   bdcfc:	f100 0214 	add.w	r2, r0, #20
   bdd00:	6900      	ldr	r0, [r0, #16]
   bdd02:	114b      	asrs	r3, r1, #5
   bdd04:	4298      	cmp	r0, r3
   bdd06:	b510      	push	{r4, lr}
   bdd08:	db11      	blt.n	bdd2e <__any_on+0x32>
   bdd0a:	dd0a      	ble.n	bdd22 <__any_on+0x26>
   bdd0c:	f011 011f 	ands.w	r1, r1, #31
   bdd10:	d007      	beq.n	bdd22 <__any_on+0x26>
   bdd12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bdd16:	fa24 f001 	lsr.w	r0, r4, r1
   bdd1a:	fa00 f101 	lsl.w	r1, r0, r1
   bdd1e:	428c      	cmp	r4, r1
   bdd20:	d10b      	bne.n	bdd3a <__any_on+0x3e>
   bdd22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bdd26:	4293      	cmp	r3, r2
   bdd28:	d803      	bhi.n	bdd32 <__any_on+0x36>
   bdd2a:	2000      	movs	r0, #0
   bdd2c:	bd10      	pop	{r4, pc}
   bdd2e:	4603      	mov	r3, r0
   bdd30:	e7f7      	b.n	bdd22 <__any_on+0x26>
   bdd32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bdd36:	2900      	cmp	r1, #0
   bdd38:	d0f5      	beq.n	bdd26 <__any_on+0x2a>
   bdd3a:	2001      	movs	r0, #1
   bdd3c:	e7f6      	b.n	bdd2c <__any_on+0x30>

000bdd3e <_calloc_r>:
   bdd3e:	b513      	push	{r0, r1, r4, lr}
   bdd40:	434a      	muls	r2, r1
   bdd42:	4611      	mov	r1, r2
   bdd44:	9201      	str	r2, [sp, #4]
   bdd46:	f7f9 fba5 	bl	b7494 <_malloc_r>
   bdd4a:	4604      	mov	r4, r0
   bdd4c:	b118      	cbz	r0, bdd56 <_calloc_r+0x18>
   bdd4e:	9a01      	ldr	r2, [sp, #4]
   bdd50:	2100      	movs	r1, #0
   bdd52:	f7fd ffe0 	bl	bbd16 <memset>
   bdd56:	4620      	mov	r0, r4
   bdd58:	b002      	add	sp, #8
   bdd5a:	bd10      	pop	{r4, pc}
   bdd5c:	0000      	movs	r0, r0
	...

000bdd60 <nan>:
   bdd60:	ed9f 0b01 	vldr	d0, [pc, #4]	; bdd68 <nan+0x8>
   bdd64:	4770      	bx	lr
   bdd66:	bf00      	nop
   bdd68:	00000000 	.word	0x00000000
   bdd6c:	7ff80000 	.word	0x7ff80000

000bdd70 <__ascii_wctomb>:
   bdd70:	b149      	cbz	r1, bdd86 <__ascii_wctomb+0x16>
   bdd72:	2aff      	cmp	r2, #255	; 0xff
   bdd74:	bf85      	ittet	hi
   bdd76:	238a      	movhi	r3, #138	; 0x8a
   bdd78:	6003      	strhi	r3, [r0, #0]
   bdd7a:	700a      	strbls	r2, [r1, #0]
   bdd7c:	f04f 30ff 	movhi.w	r0, #4294967295
   bdd80:	bf98      	it	ls
   bdd82:	2001      	movls	r0, #1
   bdd84:	4770      	bx	lr
   bdd86:	4608      	mov	r0, r1
   bdd88:	4770      	bx	lr
	...

000bdd8c <__aeabi_d2lz>:
   bdd8c:	b538      	push	{r3, r4, r5, lr}
   bdd8e:	2200      	movs	r2, #0
   bdd90:	2300      	movs	r3, #0
   bdd92:	4604      	mov	r4, r0
   bdd94:	460d      	mov	r5, r1
   bdd96:	f7fd fe9b 	bl	bbad0 <__aeabi_dcmplt>
   bdd9a:	b928      	cbnz	r0, bdda8 <__aeabi_d2lz+0x1c>
   bdd9c:	4620      	mov	r0, r4
   bdd9e:	4629      	mov	r1, r5
   bdda0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bdda4:	f7fd bf54 	b.w	bbc50 <__aeabi_d2ulz>
   bdda8:	4620      	mov	r0, r4
   bddaa:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bddae:	f7fd ff4f 	bl	bbc50 <__aeabi_d2ulz>
   bddb2:	4240      	negs	r0, r0
   bddb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bddb8:	bd38      	pop	{r3, r4, r5, pc}
   bddba:	bf00      	nop

000bddbc <dynalib_user>:
   bddbc:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bddcc:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   bdddc:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   bddec:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   bddfc:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   bde0c:	4f4d 4544 7525 003e 6966 656c 616e 656d     MODE%u>.filename
   bde1c:	4600 6c69 2065 2527 2773 6120 726c 6165     .File '%s' alrea
   bde2c:	7964 6520 6978 7473 2c73 6420 6c65 7465     dy exists, delet
   bde3c:	6e69 2067 6e61 2064 766f 7265 7277 7469     ing and overwrit
   bde4c:	6e69 0067 7453 7261 6974 676e 6f20 6666     ing.Starting off
   bde5c:	6f6c 6461 6f20 2066 6966 656c 203a 7325     load of file: %s
   bde6c:	6600 6c69 6365 6d6f 0070 6552 6361 6568     .filecomp.Reache
   bde7c:	2064 6e65 2064 666f 6620 6c69 3a65 2520     d end of file: %
   bde8c:	0073 6966 656c 6f64 656e 5200 6365 6965     s.filedone.Recei
   bde9c:	6576 2064 6f64 656e 6320 6d6f 616d 646e     ved done command
   bdeac:	4200 746f 6431 7461 2500 3230 2564 3230     .Bot1dat.%02d%02
   bdebc:	2564 3430 2564 3230 2564 3230 2564 3230     d%04d%02d%02d%02
   bdecc:	0064 6157 6574 4272 746f 5f00 4f4c 2e47     d.WaterBot._LOG.
   bdedc:	7874 0074 7245 6f72 3a72 6320 756f 646c     txt.Error: could
   bdeec:	6e20 746f 6320 6e6f 656e 7463 7420 206f      not connect to 
   bdefc:	4453 6320 7261 2164 2500 2573 3230 0078     SD card!.%s%02x.
   bdf0c:	4343 2542 6864 6177 7600 6365 6f74 3a72     CCB%dhwa.vector:
   bdf1c:	5f3a 5f4d 6572 6c61 6f6c 5f63 6e69 6573     :_M_realloc_inse
   bdf2c:	7472 4300 6568 6b63 7573 3a6d 2520 3230     rt.Checksum: %02
   bdf3c:	2c78 2520 3330 0064 7453 6972 676e 4c20     x, %03d.String L
   bdf4c:	6e65 203a 6425 202c 6843 6365 736b 6d75     en: %d, Checksum
   bdf5c:	203a 6425 5b00 4157 4e52 205d 654d 7373     : %d.[WARN] Mess
   bdf6c:	6761 2065 6843 6365 736b 6d75 4420 656f     age Checksum Doe
   bdf7c:	2073 6f4e 2074 614d 6374 2168 203a 7325     s Not Match!: %s
   bdf8c:	5700 7261 696e 676e 202c 6863 6365 736b     .Warning, checks
   bdf9c:	6d75 6420 656f 2073 6f6e 2074 616d 6374     um does not matc
   bdfac:	0068 4343 3225 6e73 6b61 3325 0073 6361     h.CC%2snak%3s.ac
   bdfbc:	006b 7573 0070 7525 2520 2075 7325 2520     k.sup.%u %u %s %
   bdfcc:	0073 7453 7461 7375 5520 6470 7461 2165     s.Status Update!
   bdfdc:	2300 2323 2323 2323 2323 2323 2323 2323     .###############
   bdfec:	2323 2323 2323 2323 2323 0023 2323 2020     ###########.##  
   bdffc:	2020 5320 4154 5554 2053 5055 4144 4554        STATUS UPDATE
   be00c:	2020 2020 2323 2300 2023 2020 2020 2020         ##.##       
   be01c:	6f42 2074 3a23 2520 6431 2020 2020 2020     Bot #: %1d      
   be02c:	2323 2300 2023 2020 2020 4220 7461 2074     ##.##      Batt 
   be03c:	3a25 2520 3330 2064 2020 2020 2323 2300     %: %03d     ##.#
   be04c:	2023 2020 4c20 4554 2020 4c42 2045 5820     #    LTE  BLE  X
   be05c:	6542 2065 2020 2320 0023 2323 2020 2020     Bee    ##.##    
   be06c:	2520 2064 2020 2520 2064 2020 2020 6425      %d    %d     %d
   be07c:	2020 2020 2320 0023 2323 2020 614c 6974          ##.##  Lati
   be08c:	7574 6564 4c20 6e6f 6967 7574 6564 2020     tude Longitude  
   be09c:	2323 2300 2023 2e25 6636 2520 362e 2066     ##.## %.6f %.6f 
   be0ac:	2323 4600 756f 646e 6120 6e20 7765 7720     ##.Found a new w
   be0bc:	7461 7265 6220 746f 4920 0044 7525 2520     ater bot ID.%u %
   be0cc:	2075 6625 2520 0066 616e 006b 7768 0064     u %f %f.nak.hwd.
   be0dc:	7470 0073 6152 5777 6972 6574 742e 7478     pts.RawWrite.txt
   be0ec:	4c00 4554 5800 6542 0065 6c42 6575 6f74     .LTE.XBee.Blueto
   be0fc:	746f 0068 654e 2077 7473 6972 676e 6620     oth.New string f
   be10c:	6f72 206d 7325 203a 5b00 4e49 4f46 205d     rom %s: .[INFO] 
   be11c:	6552 6563 7669 6465 4c20 4554 4d20 7365     Received LTE Mes
   be12c:	6173 6567 203a 7325 4e00 7765 4220 2054     sage: %s.New BT 
   be13c:	6f43 6d6d 6e61 3a64 0020 495b 464e 5d4f     Command: .[INFO]
   be14c:	5220 6365 6965 6576 2064 4c42 2045 654d      Received BLE Me
   be15c:	7373 6761 3a65 2520 0073 654e 2077 4258     ssage: %s.New XB
   be16c:	6565 4320 6d6f 616d 646e 003a 495b 464e     ee Command:.[INF
   be17c:	5d4f 5220 6365 6965 6576 2064 4258 6565     O] Received XBee
   be18c:	4d20 7365 6173 6567 203a 7325 4300 6e6f      Message: %s.Con
   be19c:	656e 7463 6465 7420 206f 6f42 2074 6425     nected to Bot %d
   be1ac:	2f00 4500 7272 726f 202c 6f63 6c75 2064     ./.Error, could 
   be1bc:	6f6e 2074 706f 6e65 7220 6f6f 2074 6964     not open root di
   be1cc:	6572 7463 726f 2079 6e6f 5320 2044 6143     rectory on SD Ca
   be1dc:	6472 202e 7349 6920 2074 6e69 6573 7472     rd. Is it insert
   be1ec:	6465 003f 4343 2542 6464 706d 5200 7165     ed?.CCB%ddmp.Req
   be1fc:	6575 7473 6465 5320 2044 6143 6472 4420     uested SD Card D
   be20c:	7461 2061 7266 6d6f 4220 746f 2520 2064     ata from Bot %d 
   be21c:	764f 7265 4220 454c 000a 7543 7272 6e65     Over BLE..Curren
   be22c:	6c74 2079 6f63 6e6e 6365 6574 2064 6f74     tly connected to
   be23c:	4220 746f 2520 2c66 6e20 6565 2064 6f74      Bot %f, need to
   be24c:	6320 6e6f 656e 7463 7420 206f 6f42 2074      connect to Bot 
   be25c:	6425 5300 6375 6563 7373 7566 6c6c 2079     %d.Successfully 
   be26c:	6f63 6e6e 6365 6574 2064 6f74 4220 746f     connected to Bot
   be27c:	2520 0064 7453 7261 6974 676e 6620 6c69      %d.Starting fil
   be28c:	2065 7274 6e61 6673 7265 6620 6f72 206d     e transfer from 
   be29c:	6f42 2074 6425 4600 6e69 7369 6568 2064     Bot %d.Finished 
   be2ac:	7274 6e61 6673 7265 6972 676e 6620 6c69     transferring fil
   be2bc:	2065 7266 6d6f 4220 746f 2520 0064 4343     e from Bot %d.CC
   be2cc:	4241 7073 4263 6425 4300 4143 7342 6370     ABspcB%d.CCABspc
   be2dc:	424e 4300 4243 6d31 7274 3025 6433 3025     NB.CCB1mtr%03d%0
   be2ec:	6433 4d00 746f 726f 5320 6570 6465 203a     3d.Motor Speed: 
   be2fc:	3025 6433 6200 3234 3630 3139 2d30 6364     %03d.b4206910-dc
   be30c:	6234 352d 3437 2d33 3863 3162 392d 6432     4b-5743-c8b1-92d
   be31c:	6530 3537 3831 6232 0030 3462 3032 3936     0e75182b0.b42069
   be32c:	3231 642d 3463 2d62 3735 3334 632d 6238     12-dc4b-5743-c8b
   be33c:	2d31 3239 3064 3765 3135 3238 3062 6200     1-92d0e75182b0.b
   be34c:	3234 3630 3139 2d33 6364 6234 352d 3437     4206913-dc4b-574
   be35c:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   be36c:	6232 0030 3462 3032 3936 3431 642d 3463     2b0.b4206914-dc4
   be37c:	2d62 3735 3334 632d 6238 2d31 3239 3064     b-5743-c8b1-92d0
   be38c:	3765 3135 3238 3062 0000 0000               e75182b0....

000be398 <_ZTVN8particle11SPISettingsE>:
	...
   be3a0:	422d 000b 40b3 000b 40df 000b               -B...@...@..

000be3ac <_ZTV5Timer>:
	...
   be3b4:	42b1 000b 4305 000b 4145 000b               .B...C..EA..

000be3c0 <_ZTV4File>:
	...
   be3c8:	40dd 000b 40ed 000b 412d 000b 4127 000b     .@...@..-A..'A..
   be3d8:	40b5 000b 4107 000b 4101 000b 40fb 000b     .@...A...A...@..

000be3e8 <_ZTVN5spark13EthernetClassE>:
	...
   be3f0:	7543 000b 7539 000b 752f 000b 7525 000b     Cu..9u../u..%u..
   be400:	7519 000b 750d 000b ad01 000b ad09 000b     .u...u..........
   be410:	7501 000b 74f9 000b 74ef 000b 74e5 000b     .u...t...t...t..
   be420:	ad39 000b                                   9...

000be424 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   be424:	0800 1810 2820 3830 7341 6573 7472 6f69     .... (08Assertio
   be434:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   be444:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   be454:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   be464:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   be474:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   be484:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   be494:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   be4a4:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   be4b4:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   be4c4:	6146 6c69 6465 7420 206f 6c61 6f6c 6163     Failed to alloca
   be4d4:	6574 6d20 6d65 726f 2179 4600 6961 656c     te memory!.Faile
   be4e4:	2064 6f74 6120 7070 6e65 2064 6570 7265     d to append peer
   be4f4:	4320 6e65 7274 6c61 6420 7665 6369 2e65      Central device.
   be504:	4300 6e6f 656e 7463 6465 6220 2079 6543     .Connected by Ce
   be514:	746e 6172 206c 6564 6976 6563 002e 6944     ntral device..Di
   be524:	6373 6e6f 656e 7463 6465 6220 2079 6572     sconnected by re
   be534:	6f6d 6574 6420 7665 6369 2e65 4600 6961     mote device..Fai
   be544:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   be554:	6373 766f 7265 6465 7320 7265 6976 6563     scovered service
   be564:	002e 7453 7261 2074 6964 6373 766f 7265     ..Start discover
   be574:	6e69 2067 6863 7261 6361 6574 6972 7473     ing characterist
   be584:	6369 2073 666f 7320 7265 6976 6563 203a     ics of service: 
   be594:	7325 002e 6143 6e6e 746f 6120 6464 6e20     %s..Cannot add n
   be5a4:	7765 7020 6565 2072 6564 6976 6563 002e     ew peer device..
   be5b4:	654e 2077 6570 6972 6870 7265 6c61 6920     New peripheral i
   be5c4:	2073 6f63 6e6e 6365 6574 2e64 4300 6168     s connected..Cha
   be5d4:	6172 7463 7265 7369 6974 2063 6964 6373     racteristic disc
   be5e4:	766f 7265 6465 002e 6944 6373 766f 7265     overed..Discover
   be5f4:	6465 6320 6168 6172 7463 7265 7369 6974     ed characteristi
   be604:	2763 2073 6168 646e 656c 6920 2073 6e69     c's handle is in
   be614:	6176 696c 2e64 4600 6961 656c 2064 6f74     valid..Failed to
   be624:	6120 7070 6e65 2064 6964 6373 766f 7265      append discover
   be634:	6465 6320 6168 6172 7463 7265 7369 6974     ed characteristi
   be644:	2e63 0000                                   c...

000be648 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be650:	791f 000b 7981 000b 7af7 000b 79ab 000b     .y...y...z...y..
   be660:	7921 000b                                   !y..

000be664 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be66c:	791b 000b 798f 000b 791d 000b 79b1 000b     .y...y...y...y..
   be67c:	7941 000b                                   Ay..

000be680 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be688:	7919 000b 799d 000b 8615 000b 79b7 000b     .y...y.......y..
   be698:	7961 000b                                   ay..

000be69c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   be6a8:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
   be6b8:	0000 7061 0070 5925 252d 2d6d 6425 2554     ..app.%Y-%m-%dT%
   be6c8:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   be6d8:	0065 0000                                   e...

000be6dc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be6e4:	a3a9 000b a3af 000b a3ed 000b a3bd 000b     ................
   be6f4:	a3ab 000b                                   ....

000be6f8 <_ZTV9IPAddress>:
	...
   be700:	a8e9 000b a8d9 000b a8db 000b               ............

000be70c <_ZTV9USBSerial>:
	...
   be714:	a9cf 000b aa37 000b aa0d 000b 9f59 000b     ....7.......Y...
   be724:	a9ff 000b a9d1 000b a9e1 000b aa31 000b     ............1...
   be734:	a9f1 000b a9c9 000b                         ........

000be73c <_ZTVN5spark13CellularClassE>:
	...
   be744:	ab2f 000b ab25 000b ab1b 000b aad1 000b     /...%...........
   be754:	ab0f 000b ab03 000b ad01 000b ad09 000b     ................
   be764:	aaf7 000b aaef 000b aae5 000b aadb 000b     ................
   be774:	ad39 000b                                   9...

000be778 <_ZTV11USARTSerial>:
	...
   be780:	ab69 000b abd5 000b abad 000b 9f59 000b     i...........Y...
   be790:	ab7d 000b ab99 000b ab8b 000b aba7 000b     }...............
   be7a0:	ab6b 000b ab6f 000b                         k...o...

000be7a8 <_ZTV7TwoWire>:
	...
   be7b0:	ac43 000b ac8d 000b ac65 000b ac45 000b     C.......e...E...
   be7c0:	ac6d 000b ac75 000b ac7d 000b ac85 000b     m...u...}.......

000be7d0 <_ZTVN5spark12NetworkClassE>:
	...
   be7d8:	acc1 000b accb 000b acd5 000b acdf 000b     ................
   be7e8:	ace9 000b acf5 000b ad01 000b ad09 000b     ................
   be7f8:	ad11 000b ad1d 000b ad25 000b ad2f 000b     ........%.../...
   be808:	ad39 000b                                   9...

000be80c <_ZSt7nothrow>:
	...

000be80d <_ZTSSt19_Sp_make_shared_tag>:
   be80d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   be81d:	6572 5f64 6174 0067 0000                     red_tag....

000be828 <_ZTISt19_Sp_make_shared_tag>:
   be828:	e868 000b e80d 000b                         h.......

000be830 <_ZTIN10__cxxabiv117__class_type_infoE>:
   be830:	e8c8 000b e83c 000b e8ec 000b               ....<.......

000be83c <_ZTSN10__cxxabiv117__class_type_infoE>:
   be83c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   be84c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   be85c:	0045 0000                                   E...

000be860 <_ZTVN10__cxxabiv117__class_type_infoE>:
   be860:	0000 0000 e830 000b b09d 000b b0b1 000b     ....0...........
   be870:	b245 000b b245 000b b11b 000b b05d 000b     E...E.......]...
   be880:	b103 000b b0c5 000b b08f 000b               ............

000be88c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   be88c:	e8c8 000b e898 000b e830 000b               ........0...

000be898 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   be898:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   be8a8:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   be8b8:	666e 456f 0000 0000                         nfoE....

000be8c0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   be8c0:	0000 0000 e88c 000b b145 000b b159 000b     ........E...Y...
   be8d0:	b245 000b b245 000b b11b 000b b05d 000b     E...E.......]...
   be8e0:	b219 000b b1a5 000b b16d 000b               ........m...

000be8ec <_ZTISt9type_info>:
   be8ec:	e868 000b e8f4 000b                         h.......

000be8f4 <_ZTSSt9type_info>:
   be8f4:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   be904:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   be914:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   be924:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   be934:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   be944:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   be954:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   be964:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   be974:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   be984:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   be994:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000be9a4 <fpi.1>:
   be9a4:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   be9b4:	0000 0000                                   ....

000be9b8 <fpinan.0>:
   be9b8:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000be9d0 <tinytens>:
   be9d0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   be9e0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   be9f0:	6f43 64ac 0628 1168                         Co.d(.h.

000be9f8 <_ctype_>:
   be9f8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bea08:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bea18:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bea28:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bea38:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bea48:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bea58:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bea68:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bea78:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   beaf8:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   beb08:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   beb18:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   beb28:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   beb38:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   beb48:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   beb58:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   beb68:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   beb78:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   beb88:	6874 7865 632e 0000                         thex.c..

000beb90 <_C_numeric_locale>:
   beb90:	e645 000b e225 000b db84 2003 0043 4f50     E...%...... C.PO
   beba0:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   bebb0:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bebc0:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bebd0:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bebe0:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bebf0:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bec00:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bec10:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   bec20:	0063 0000 0000 0000                         c.......

000bec28 <__mprec_bigtens>:
   bec28:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bec38:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bec48:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bec50 <__mprec_tens>:
   bec50:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bec60:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bec70:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bec80:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bec90:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   beca0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   becb0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   becc0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   becd0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bece0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   becf0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bed00:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bed10:	9db4 79d9 7843 44ea                         ...yCx.D

000bed18 <p05.0>:
   bed18:	0005 0000 0019 0000 007d 0000               ........}...

000bed24 <link_const_variable_data_end>:
   bed24:	000b54b5 	.word	0x000b54b5
   bed28:	000b754d 	.word	0x000b754d
   bed2c:	000b76ed 	.word	0x000b76ed
   bed30:	000b9f49 	.word	0x000b9f49
   bed34:	000ba0b9 	.word	0x000ba0b9
   bed38:	000ba249 	.word	0x000ba249
   bed3c:	000ba265 	.word	0x000ba265
   bed40:	000bab39 	.word	0x000bab39
   bed44:	000bae11 	.word	0x000bae11

000bed48 <link_constructors_end>:
	...
