
/Users/matthewpanizza/Downloads/WaterNet23/WaterNet23CCHub/target/4.0.0/bsom/WaterNet23CCHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000df50  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c1f70  000c1f70  00011f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c1f94  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  2003da88  000c1f98  0002da88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000b88  2003dc68  2003dc68  0003dc68  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c2178  000c2178  00032178  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c21a0  000c21a0  000321a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001c3a5d  00000000  00000000  000321a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001dfb4  00000000  00000000  001f5c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0005847c  00000000  00000000  00213bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003b40  00000000  00000000  0026c031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000e150  00000000  00000000  0026fb71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004caa8  00000000  00000000  0027dcc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0006c773  00000000  00000000  002ca769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014bac3  00000000  00000000  00336edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000bd8c  00000000  00000000  004829a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00a f8f0 	bl	be216 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00a f912 	bl	be266 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003da88 	.word	0x2003da88
   b404c:	000c1f98 	.word	0x000c1f98
   b4050:	2003dc68 	.word	0x2003dc68
   b4054:	2003dc68 	.word	0x2003dc68
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f009 f8cb 	bl	bd1fc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c1f44 	.word	0x000c1f44
   b4080:	000c1f68 	.word	0x000c1f68

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 bdde 	b.w	b5c44 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f002 fa8b 	bl	b65a4 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f009 b86b 	b.w	bd16c <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f005 bb6f 	b.w	b9778 <malloc>

000b409a <_Znaj>:
   b409a:	f005 bb6d 	b.w	b9778 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f005 bb73 	b.w	b9788 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f005 fa80 	bl	b95b0 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b9261 	.word	0x000b9261
   b40b8:	000c03a0 	.word	0x000c03a0

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40cc:	4770      	bx	lr

000b40ce <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40ce:	7c03      	ldrb	r3, [r0, #16]
   b40d0:	f013 0308 	ands.w	r3, r3, #8
   b40d4:	bf1e      	ittt	ne
   b40d6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40d8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40da:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40dc:	2b00      	cmp	r3, #0
  }
   b40de:	bfac      	ite	ge
   b40e0:	4618      	movge	r0, r3
   b40e2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40e6:	4770      	bx	lr

000b40e8 <_Z12actionTimer5v>:
        Serial1.println(outStr);
    }
}

void actionTimer5(){
    postStatus = true;
   b40e8:	4b06      	ldr	r3, [pc, #24]	; (b4104 <_Z12actionTimer5v+0x1c>)
   b40ea:	2201      	movs	r2, #1
   b40ec:	701a      	strb	r2, [r3, #0]
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
   b40ee:	4b06      	ldr	r3, [pc, #24]	; (b4108 <_Z12actionTimer5v+0x20>)
   b40f0:	e9d3 3100 	ldrd	r3, r1, [r3]
    for(WaterBot &w: WaterBots){
   b40f4:	4299      	cmp	r1, r3
   b40f6:	d004      	beq.n	b4102 <_Z12actionTimer5v+0x1a>
        w.timeoutCount++;
   b40f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   b40fa:	3201      	adds	r2, #1
   b40fc:	631a      	str	r2, [r3, #48]	; 0x30
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b40fe:	3334      	adds	r3, #52	; 0x34
      {
	++_M_current;
	return *this;
   b4100:	e7f8      	b.n	b40f4 <_Z12actionTimer5v+0xc>
    }
    //if(!BLE.connected)
}
   b4102:	4770      	bx	lr
   b4104:	2003dedc 	.word	0x2003dedc
   b4108:	2003dcb4 	.word	0x2003dcb4

000b410c <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b410c:	4770      	bx	lr

000b410e <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b410e:	b510      	push	{r4, lr}
  }
   b4110:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4112:	4604      	mov	r4, r0
  }
   b4114:	f7ff ffc3 	bl	b409e <_ZdlPvj>
   b4118:	4620      	mov	r0, r4
   b411a:	bd10      	pop	{r4, pc}

000b411c <_ZN4FileD0Ev>:
   b411c:	b510      	push	{r4, lr}
   b411e:	2134      	movs	r1, #52	; 0x34
   b4120:	4604      	mov	r4, r0
   b4122:	f7ff ffbc 	bl	b409e <_ZdlPvj>
   b4126:	4620      	mov	r0, r4
   b4128:	bd10      	pop	{r4, pc}

000b412a <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b412a:	3010      	adds	r0, #16
   b412c:	f002 bd1c 	b.w	b6b68 <_ZN7FatFile4syncEv>

000b4130 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b4130:	3010      	adds	r0, #16
   b4132:	f002 bc3a 	b.w	b69aa <_ZN7FatFile4peekEv>

000b4136 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b4136:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b4138:	2201      	movs	r2, #1
   b413a:	f10d 0107 	add.w	r1, sp, #7
   b413e:	3010      	adds	r0, #16
   b4140:	f002 fb85 	bl	b684e <_ZN7FatFile4readEPvj>
   b4144:	2801      	cmp	r0, #1
   b4146:	bf0c      	ite	eq
   b4148:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b414c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   b4150:	b003      	add	sp, #12
   b4152:	f85d fb04 	ldr.w	pc, [sp], #4

000b4156 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4156:	3010      	adds	r0, #16
   b4158:	f002 bda0 	b.w	b6c9c <_ZN7FatFile5writeEPKvj>

000b415c <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b415c:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b415e:	2201      	movs	r2, #1
   b4160:	f88d 1007 	strb.w	r1, [sp, #7]
   b4164:	3010      	adds	r0, #16
   b4166:	f10d 0107 	add.w	r1, sp, #7
   b416a:	f002 fd97 	bl	b6c9c <_ZN7FatFile5writeEPKvj>
  }
   b416e:	b003      	add	sp, #12
   b4170:	f85d fb04 	ldr.w	pc, [sp], #4

000b4174 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4174:	6943      	ldr	r3, [r0, #20]
   b4176:	b113      	cbz	r3, b417e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4178:	6983      	ldr	r3, [r0, #24]
   b417a:	300c      	adds	r0, #12
   b417c:	4718      	bx	r3
            callback();
        }
    }
   b417e:	4770      	bx	lr

000b4180 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4180:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4182:	2100      	movs	r1, #0
   b4184:	4604      	mov	r4, r0
   b4186:	4608      	mov	r0, r1
   b4188:	f005 f80a 	bl	b91a0 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b418c:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b418e:	4620      	mov	r0, r4
   b4190:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4192:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4194:	f005 f81c 	bl	b91d0 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4198:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b419a:	b10c      	cbz	r4, b41a0 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b419c:	2301      	movs	r3, #1
   b419e:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b41a0:	2100      	movs	r1, #0
   b41a2:	2001      	movs	r0, #1
   b41a4:	f004 fffc 	bl	b91a0 <os_thread_scheduling>
            }
        }
        if (t) {
   b41a8:	b12c      	cbz	r4, b41b6 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b41aa:	6823      	ldr	r3, [r4, #0]
   b41ac:	4620      	mov	r0, r4
   b41ae:	689b      	ldr	r3, [r3, #8]
   b41b0:	4798      	blx	r3
            t->running = false;
   b41b2:	2300      	movs	r3, #0
   b41b4:	7123      	strb	r3, [r4, #4]
        }
    }
   b41b6:	b002      	add	sp, #8
   b41b8:	bd10      	pop	{r4, pc}
	...

000b41bc <_Z10entHandlerv>:
    MenuItems.push_back(sentryToggle);

    SelectedItem = &MenuItems.at(menuItem);
}

void entHandler(){
   b41bc:	b510      	push	{r4, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b41be:	4c0e      	ldr	r4, [pc, #56]	; (b41f8 <_Z10entHandlerv+0x3c>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41c0:	f005 f85e 	bl	b9280 <HAL_Timer_Get_Milli_Seconds>
   b41c4:	6823      	ldr	r3, [r4, #0]
   b41c6:	1ac0      	subs	r0, r0, r3
   b41c8:	2863      	cmp	r0, #99	; 0x63
   b41ca:	d913      	bls.n	b41f4 <_Z10entHandlerv+0x38>
    Serial.println("Enter trigger");
   b41cc:	f008 ff86 	bl	bd0dc <_Z16_fetch_usbserialv>
   b41d0:	490a      	ldr	r1, [pc, #40]	; (b41fc <_Z10entHandlerv+0x40>)
   b41d2:	f008 fb8e 	bl	bc8f2 <_ZN5Print7printlnEPKc>
   b41d6:	f005 f853 	bl	b9280 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
    
    redrawMenu = true;  
   b41da:	4b09      	ldr	r3, [pc, #36]	; (b4200 <_Z10entHandlerv+0x44>)
    selectingBots = !selectingBots;
   b41dc:	4909      	ldr	r1, [pc, #36]	; (b4204 <_Z10entHandlerv+0x48>)
    debounceTime = millis();
   b41de:	6020      	str	r0, [r4, #0]
    redrawMenu = true;  
   b41e0:	2201      	movs	r2, #1
   b41e2:	701a      	strb	r2, [r3, #0]
    selectingBots = !selectingBots;
   b41e4:	780b      	ldrb	r3, [r1, #0]
   b41e6:	4053      	eors	r3, r2
   b41e8:	700b      	strb	r3, [r1, #0]
    if(modifiedValue) updateControl = true;
   b41ea:	4b07      	ldr	r3, [pc, #28]	; (b4208 <_Z10entHandlerv+0x4c>)
   b41ec:	781b      	ldrb	r3, [r3, #0]
   b41ee:	b10b      	cbz	r3, b41f4 <_Z10entHandlerv+0x38>
   b41f0:	4b06      	ldr	r3, [pc, #24]	; (b420c <_Z10entHandlerv+0x50>)
   b41f2:	701a      	strb	r2, [r3, #0]
}
   b41f4:	bd10      	pop	{r4, pc}
   b41f6:	bf00      	nop
   b41f8:	2003dd50 	.word	0x2003dd50
   b41fc:	000c03b5 	.word	0x000c03b5
   b4200:	2003da88 	.word	0x2003da88
   b4204:	2003da89 	.word	0x2003da89
   b4208:	2003ddf7 	.word	0x2003ddf7
   b420c:	2003e636 	.word	0x2003e636

000b4210 <_Z8jHandlerv>:
    SelectedItem = &MenuItems.at(menuItem);
    Serial.println("Down trigger");
    redrawMenu = true;  
}

void jHandler(){
   b4210:	b510      	push	{r4, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4212:	4c09      	ldr	r4, [pc, #36]	; (b4238 <_Z8jHandlerv+0x28>)
   b4214:	f005 f834 	bl	b9280 <HAL_Timer_Get_Milli_Seconds>
   b4218:	6823      	ldr	r3, [r4, #0]
   b421a:	1ac0      	subs	r0, r0, r3
   b421c:	2863      	cmp	r0, #99	; 0x63
   b421e:	d909      	bls.n	b4234 <_Z8jHandlerv+0x24>
   b4220:	f005 f82e 	bl	b9280 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b4224:	6020      	str	r0, [r4, #0]
    Serial.println("Joystick trigger");
   b4226:	f008 ff59 	bl	bd0dc <_Z16_fetch_usbserialv>
   b422a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("Joystick trigger");
   b422e:	4903      	ldr	r1, [pc, #12]	; (b423c <_Z8jHandlerv+0x2c>)
   b4230:	f008 bb5f 	b.w	bc8f2 <_ZN5Print7printlnEPKc>
   b4234:	bd10      	pop	{r4, pc}
   b4236:	bf00      	nop
   b4238:	2003dd50 	.word	0x2003dd50
   b423c:	000c03c3 	.word	0x000c03c3

000b4240 <_Z13actionTimer60v>:
void actionTimer60(){
   b4240:	b510      	push	{r4, lr}
      : _M_current(__i) { }
   b4242:	4b0c      	ldr	r3, [pc, #48]	; (b4274 <_Z13actionTimer60v+0x34>)
   b4244:	e9d3 3100 	ldrd	r3, r1, [r3]
    bool reqLTEStatus = false;
   b4248:	2200      	movs	r2, #0
            w.timeoutCount = 0;            
   b424a:	4610      	mov	r0, r2
    for(WaterBot &w: WaterBots){
   b424c:	4299      	cmp	r1, r3
   b424e:	d006      	beq.n	b425e <_Z13actionTimer60v+0x1e>
        if(w.timeoutCount > XBEE_BLE_MAX_TIMEOUT){
   b4250:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   b4252:	2c24      	cmp	r4, #36	; 0x24
            w.timeoutCount = 0;            
   b4254:	bf84      	itt	hi
   b4256:	6318      	strhi	r0, [r3, #48]	; 0x30
            reqLTEStatus = true;
   b4258:	2201      	movhi	r2, #1
      operator++() _GLIBCXX_NOEXCEPT
   b425a:	3334      	adds	r3, #52	; 0x34
	return *this;
   b425c:	e7f6      	b.n	b424c <_Z13actionTimer60v+0xc>
    if(reqLTEStatus && LTEStatuses < MAX_LTE_STATUSES){
   b425e:	b142      	cbz	r2, b4272 <_Z13actionTimer60v+0x32>
   b4260:	4a05      	ldr	r2, [pc, #20]	; (b4278 <_Z13actionTimer60v+0x38>)
   b4262:	7813      	ldrb	r3, [r2, #0]
   b4264:	2b18      	cmp	r3, #24
   b4266:	d804      	bhi.n	b4272 <_Z13actionTimer60v+0x32>
        LTEStatuses++;
   b4268:	3301      	adds	r3, #1
   b426a:	7013      	strb	r3, [r2, #0]
        statusTimeout = true;
   b426c:	4b03      	ldr	r3, [pc, #12]	; (b427c <_Z13actionTimer60v+0x3c>)
   b426e:	2201      	movs	r2, #1
   b4270:	701a      	strb	r2, [r3, #0]
}
   b4272:	bd10      	pop	{r4, pc}
   b4274:	2003dcb4 	.word	0x2003dcb4
   b4278:	2003dc88 	.word	0x2003dc88
   b427c:	2003e635 	.word	0x2003e635

000b4280 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4280:	2a01      	cmp	r2, #1
   b4282:	d102      	bne.n	b428a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4284:	6001      	str	r1, [r0, #0]
      }
   b4286:	2000      	movs	r0, #0
   b4288:	4770      	bx	lr
	  switch (__op)
   b428a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b428c:	bf04      	itt	eq
   b428e:	680b      	ldreq	r3, [r1, #0]
   b4290:	6003      	streq	r3, [r0, #0]
	      break;
   b4292:	e7f8      	b.n	b4286 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4294 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4294:	6803      	ldr	r3, [r0, #0]
   b4296:	4718      	bx	r3

000b4298 <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4298:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b429a:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b429c:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b429e:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42a0:	b130      	cbz	r0, b42b0 <_ZN5Timer5startEj.isra.0+0x18>
   b42a2:	2300      	movs	r3, #0
   b42a4:	e9cd 3300 	strd	r3, r3, [sp]
   b42a8:	461a      	mov	r2, r3
   b42aa:	2102      	movs	r1, #2
   b42ac:	f004 ff98 	bl	b91e0 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b42b0:	68a0      	ldr	r0, [r4, #8]
   b42b2:	b130      	cbz	r0, b42c2 <_ZN5Timer5startEj.isra.0+0x2a>
   b42b4:	2300      	movs	r3, #0
   b42b6:	e9cd 5300 	strd	r5, r3, [sp]
   b42ba:	461a      	mov	r2, r3
   b42bc:	4619      	mov	r1, r3
   b42be:	f004 ff8f 	bl	b91e0 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42c2:	b003      	add	sp, #12
   b42c4:	bd30      	pop	{r4, r5, pc}

000b42c6 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42c6:	b40e      	push	{r1, r2, r3}
   b42c8:	b503      	push	{r0, r1, lr}
   b42ca:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b42cc:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42ce:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b42d2:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b42d4:	f008 fb35 	bl	bc942 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b42d8:	b002      	add	sp, #8
   b42da:	f85d eb04 	ldr.w	lr, [sp], #4
   b42de:	b003      	add	sp, #12
   b42e0:	4770      	bx	lr
	...

000b42e4 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b42e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b42e6:	4604      	mov	r4, r0
   b42e8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b42ea:	7922      	ldrb	r2, [r4, #4]
   b42ec:	68a3      	ldr	r3, [r4, #8]
   b42ee:	b132      	cbz	r2, b42fe <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b42f0:	b9a3      	cbnz	r3, b431c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b42f2:	490b      	ldr	r1, [pc, #44]	; (b4320 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b42f4:	b002      	add	sp, #8
   b42f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b42fa:	f008 bae7 	b.w	bc8cc <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b42fe:	4a09      	ldr	r2, [pc, #36]	; (b4324 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4300:	7b26      	ldrb	r6, [r4, #12]
   b4302:	4d09      	ldr	r5, [pc, #36]	; (b4328 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4304:	4909      	ldr	r1, [pc, #36]	; (b432c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4306:	7b64      	ldrb	r4, [r4, #13]
   b4308:	2e01      	cmp	r6, #1
   b430a:	bf18      	it	ne
   b430c:	4629      	movne	r1, r5
   b430e:	e9cd 1400 	strd	r1, r4, [sp]
   b4312:	4907      	ldr	r1, [pc, #28]	; (b4330 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4314:	f7ff ffd7 	bl	b42c6 <_ZN5Print6printfEPKcz>
  }
   b4318:	b002      	add	sp, #8
   b431a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b431c:	4a05      	ldr	r2, [pc, #20]	; (b4334 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b431e:	e7ef      	b.n	b4300 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4320:	000c03e5 	.word	0x000c03e5
   b4324:	000c0888 	.word	0x000c0888
   b4328:	000c03e1 	.word	0x000c03e1
   b432c:	000c03dd 	.word	0x000c03dd
   b4330:	000c03fb 	.word	0x000c03fb
   b4334:	000c03d4 	.word	0x000c03d4

000b4338 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4338:	b40e      	push	{r1, r2, r3}
   b433a:	b503      	push	{r0, r1, lr}
   b433c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b433e:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4340:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4344:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4346:	f008 fafc 	bl	bc942 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b434a:	b002      	add	sp, #8
   b434c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4350:	b003      	add	sp, #12
   b4352:	4770      	bx	lr

000b4354 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4354:	b510      	push	{r4, lr}
      if (_M_manager)
   b4356:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4358:	4604      	mov	r4, r0
      if (_M_manager)
   b435a:	b113      	cbz	r3, b4362 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b435c:	2203      	movs	r2, #3
   b435e:	4601      	mov	r1, r0
   b4360:	4798      	blx	r3
    }
   b4362:	4620      	mov	r0, r4
   b4364:	bd10      	pop	{r4, pc}
	...

000b4368 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4368:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b436a:	4b13      	ldr	r3, [pc, #76]	; (b43b8 <_ZN5TimerD1Ev+0x50>)
   b436c:	6003      	str	r3, [r0, #0]
   b436e:	4604      	mov	r4, r0
        if (handle) {
   b4370:	6880      	ldr	r0, [r0, #8]
   b4372:	b1c8      	cbz	r0, b43a8 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4374:	2500      	movs	r5, #0
   b4376:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b437a:	e9cd 3500 	strd	r3, r5, [sp]
   b437e:	2102      	movs	r1, #2
   b4380:	462b      	mov	r3, r5
   b4382:	462a      	mov	r2, r5
   b4384:	f004 ff2c 	bl	b91e0 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b4388:	68a0      	ldr	r0, [r4, #8]
   b438a:	4629      	mov	r1, r5
   b438c:	f004 ff58 	bl	b9240 <os_timer_set_id>
            while (running) {
   b4390:	7923      	ldrb	r3, [r4, #4]
   b4392:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b4396:	b113      	cbz	r3, b439e <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b4398:	f004 fefa 	bl	b9190 <os_thread_yield>
            while (running) {
   b439c:	e7f8      	b.n	b4390 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b439e:	68a0      	ldr	r0, [r4, #8]
   b43a0:	4629      	mov	r1, r5
   b43a2:	f004 ff0d 	bl	b91c0 <os_timer_destroy>
            handle = nullptr;
   b43a6:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b43a8:	f104 000c 	add.w	r0, r4, #12
   b43ac:	f7ff ffd2 	bl	b4354 <_ZNSt14_Function_baseD1Ev>
    }
   b43b0:	4620      	mov	r0, r4
   b43b2:	b003      	add	sp, #12
   b43b4:	bd30      	pop	{r4, r5, pc}
   b43b6:	bf00      	nop
   b43b8:	000c0af4 	.word	0x000c0af4

000b43bc <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b43bc:	b510      	push	{r4, lr}
   b43be:	4604      	mov	r4, r0
    }
   b43c0:	f7ff ffd2 	bl	b4368 <_ZN5TimerD1Ev>
   b43c4:	4620      	mov	r0, r4
   b43c6:	211c      	movs	r1, #28
   b43c8:	f7ff fe69 	bl	b409e <_ZdlPvj>
   b43cc:	4620      	mov	r0, r4
   b43ce:	bd10      	pop	{r4, pc}

000b43d0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b43d0:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b43d2:	6843      	ldr	r3, [r0, #4]
   b43d4:	3b01      	subs	r3, #1
    {
   b43d6:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b43d8:	6043      	str	r3, [r0, #4]
   b43da:	b963      	cbnz	r3, b43f6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b43dc:	6803      	ldr	r3, [r0, #0]
   b43de:	689b      	ldr	r3, [r3, #8]
   b43e0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b43e2:	68a3      	ldr	r3, [r4, #8]
   b43e4:	3b01      	subs	r3, #1
   b43e6:	60a3      	str	r3, [r4, #8]
   b43e8:	b92b      	cbnz	r3, b43f6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b43ea:	6823      	ldr	r3, [r4, #0]
   b43ec:	4620      	mov	r0, r4
   b43ee:	68db      	ldr	r3, [r3, #12]
        }
    }
   b43f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b43f4:	4718      	bx	r3
    }
   b43f6:	bd10      	pop	{r4, pc}

000b43f8 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b43f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b43fa:	468c      	mov	ip, r1
   b43fc:	2500      	movs	r5, #0
   b43fe:	4914      	ldr	r1, [pc, #80]	; (b4450 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b4400:	7105      	strb	r5, [r0, #4]
   b4402:	4604      	mov	r4, r0
   b4404:	6085      	str	r5, [r0, #8]
   b4406:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4408:	e892 0003 	ldmia.w	r2, {r0, r1}
   b440c:	b085      	sub	sp, #20
   b440e:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4410:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4414:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4418:	e896 0003 	ldmia.w	r6, {r0, r1}
   b441c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4420:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4424:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4428:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b442a:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b442c:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b442e:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4430:	6095      	str	r5, [r2, #8]
   b4432:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4434:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b4436:	e9cd 3500 	strd	r3, r5, [sp]
   b443a:	4a06      	ldr	r2, [pc, #24]	; (b4454 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b443c:	4623      	mov	r3, r4
   b443e:	4661      	mov	r1, ip
   b4440:	f104 0008 	add.w	r0, r4, #8
   b4444:	f004 feb4 	bl	b91b0 <os_timer_create>
    }
   b4448:	4620      	mov	r0, r4
   b444a:	b005      	add	sp, #20
   b444c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b444e:	bf00      	nop
   b4450:	000c0af4 	.word	0x000c0af4
   b4454:	000b4181 	.word	0x000b4181

000b4458 <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b4458:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b445a:	460a      	mov	r2, r1
   b445c:	4901      	ldr	r1, [pc, #4]	; (b4464 <_ZN7FatFile4openEPKci+0xc>)
   b445e:	6809      	ldr	r1, [r1, #0]
   b4460:	f002 bbbf 	b.w	b6be2 <_ZN7FatFile4openEPS_PKci>
   b4464:	2003e63c 	.word	0x2003e63c

000b4468 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void offloadDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4468:	b5f0      	push	{r4, r5, r6, r7, lr}
   b446a:	b095      	sub	sp, #84	; 0x54
   b446c:	4604      	mov	r4, r0
   b446e:	af00      	add	r7, sp, #0
   b4470:	460d      	mov	r5, r1
    memset(fileCommand,0,8 + MAX_FILENAME_LEN);
   b4472:	221e      	movs	r2, #30
   b4474:	2100      	movs	r1, #0
   b4476:	f107 0030 	add.w	r0, r7, #48	; 0x30
   b447a:	f009 fef4 	bl	be266 <memset>
    memcpy(fileCommand,data,8);
   b447e:	6820      	ldr	r0, [r4, #0]
   b4480:	6861      	ldr	r1, [r4, #4]
   b4482:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b4486:	c303      	stmia	r3!, {r0, r1}
    if(fileCommand[0] == 'f'){
   b4488:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   b448c:	2b66      	cmp	r3, #102	; 0x66
    Serial.println(dataStr);
   b448e:	466e      	mov	r6, sp
    if(fileCommand[0] == 'f'){
   b4490:	d168      	bne.n	b4564 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
        if(!strcmp(fileCommand,"filename")){
   b4492:	493e      	ldr	r1, [pc, #248]	; (b458c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x124>)
   b4494:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4498:	f009 ff69 	bl	be36e <strcmp>
   b449c:	2800      	cmp	r0, #0
   b449e:	d13e      	bne.n	b451e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb6>
    return m_attr;
   b44a0:	483b      	ldr	r0, [pc, #236]	; (b4590 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b44a2:	7c03      	ldrb	r3, [r0, #16]
   b44a4:	b113      	cbz	r3, b44ac <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>
   b44a6:	3010      	adds	r0, #16
   b44a8:	f002 fb94 	bl	b6bd4 <_ZN7FatFile5closeEv>
            memcpy(fileCommand,data,8 + MAX_FILENAME_LEN);
   b44ac:	4623      	mov	r3, r4
   b44ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
   b44b2:	f104 0520 	add.w	r5, r4, #32
   b44b6:	6818      	ldr	r0, [r3, #0]
   b44b8:	6859      	ldr	r1, [r3, #4]
   b44ba:	4614      	mov	r4, r2
   b44bc:	c403      	stmia	r4!, {r0, r1}
   b44be:	3308      	adds	r3, #8
   b44c0:	42ab      	cmp	r3, r5
   b44c2:	4622      	mov	r2, r4
   b44c4:	d1f7      	bne.n	b44b6 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>
   b44c6:	6818      	ldr	r0, [r3, #0]
   b44c8:	6020      	str	r0, [r4, #0]
   b44ca:	889b      	ldrh	r3, [r3, #4]
   b44cc:	80a3      	strh	r3, [r4, #4]
            strncpy(offloadFilename,fileCommand+8,MAX_FILENAME_LEN);
   b44ce:	221e      	movs	r2, #30
   b44d0:	f107 0130 	add.w	r1, r7, #48	; 0x30
   b44d4:	482f      	ldr	r0, [pc, #188]	; (b4594 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b44d6:	f009 ff96 	bl	be406 <strncpy>
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b44da:	2300      	movs	r3, #0
    return file.open(this, path, O_RDONLY);
   b44dc:	4a2d      	ldr	r2, [pc, #180]	; (b4594 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b44de:	492e      	ldr	r1, [pc, #184]	; (b4598 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b44e0:	607b      	str	r3, [r7, #4]
    return file.open(this, path, O_RDONLY);
   b44e2:	1d38      	adds	r0, r7, #4
   b44e4:	f002 fb7d 	bl	b6be2 <_ZN7FatFile4openEPS_PKci>
            if(sd.exists(offloadFilename)){
   b44e8:	b148      	cbz	r0, b44fe <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x96>
                Serial.printlnf("File '%s' already exists, deleting and overwriting",offloadFilename);
   b44ea:	f008 fdf7 	bl	bd0dc <_Z16_fetch_usbserialv>
   b44ee:	492b      	ldr	r1, [pc, #172]	; (b459c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
   b44f0:	4a28      	ldr	r2, [pc, #160]	; (b4594 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b44f2:	f7ff ff21 	bl	b4338 <_ZN5Print8printlnfEPKcz>
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   b44f6:	4927      	ldr	r1, [pc, #156]	; (b4594 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b44f8:	4827      	ldr	r0, [pc, #156]	; (b4598 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
   b44fa:	f002 fbbe 	bl	b6c7a <_ZN7FatFile6removeEPS_PKc>
            Serial.printlnf("Starting offload of file: %s",offloadFilename);
   b44fe:	f008 fded 	bl	bd0dc <_Z16_fetch_usbserialv>
   b4502:	4a24      	ldr	r2, [pc, #144]	; (b4594 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4504:	4926      	ldr	r1, [pc, #152]	; (b45a0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   b4506:	f7ff ff17 	bl	b4338 <_ZN5Print8printlnfEPKcz>
            myFile.open(offloadFilename, O_RDWR | O_CREAT | O_AT_END);
   b450a:	4922      	ldr	r1, [pc, #136]	; (b4594 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b450c:	4825      	ldr	r0, [pc, #148]	; (b45a4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b450e:	f244 2202 	movw	r2, #16898	; 0x4202
   b4512:	f7ff ffa1 	bl	b4458 <_ZN7FatFile4openEPKci>
}
   b4516:	3754      	adds	r7, #84	; 0x54
   b4518:	46b5      	mov	sp, r6
   b451a:	46bd      	mov	sp, r7
   b451c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(!strcmp(fileCommand,"filecomp")){
   b451e:	4922      	ldr	r1, [pc, #136]	; (b45a8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>)
   b4520:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4524:	f009 ff23 	bl	be36e <strcmp>
   b4528:	b968      	cbnz	r0, b4546 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xde>
            Serial.printlnf("Reached end of file: %s",offloadFilename);
   b452a:	f008 fdd7 	bl	bd0dc <_Z16_fetch_usbserialv>
   b452e:	4a19      	ldr	r2, [pc, #100]	; (b4594 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4530:	491e      	ldr	r1, [pc, #120]	; (b45ac <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>)
   b4532:	f7ff ff01 	bl	b4338 <_ZN5Print8printlnfEPKcz>
    return m_attr;
   b4536:	4b16      	ldr	r3, [pc, #88]	; (b4590 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b4538:	7c1b      	ldrb	r3, [r3, #16]
   b453a:	2b00      	cmp	r3, #0
   b453c:	d0eb      	beq.n	b4516 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b453e:	4819      	ldr	r0, [pc, #100]	; (b45a4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b4540:	f002 fb48 	bl	b6bd4 <_ZN7FatFile5closeEv>
   b4544:	e7e7      	b.n	b4516 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
        else if(!strcmp(fileCommand,"filedone")){
   b4546:	491a      	ldr	r1, [pc, #104]	; (b45b0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
   b4548:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b454c:	f009 ff0f 	bl	be36e <strcmp>
   b4550:	b940      	cbnz	r0, b4564 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
            Serial.println("Received done command");
   b4552:	f008 fdc3 	bl	bd0dc <_Z16_fetch_usbserialv>
   b4556:	4917      	ldr	r1, [pc, #92]	; (b45b4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>)
   b4558:	f008 f9cb 	bl	bc8f2 <_ZN5Print7printlnEPKc>
            offloadingDone = true;
   b455c:	4b16      	ldr	r3, [pc, #88]	; (b45b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x150>)
   b455e:	2201      	movs	r2, #1
   b4560:	701a      	strb	r2, [r3, #0]
   b4562:	e7e8      	b.n	b4536 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xce>
    char dataStr[len];
   b4564:	1deb      	adds	r3, r5, #7
   b4566:	f023 0307 	bic.w	r3, r3, #7
   b456a:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(dataStr,data,len);
   b456e:	462a      	mov	r2, r5
   b4570:	4621      	mov	r1, r4
   b4572:	4668      	mov	r0, sp
   b4574:	f009 fe4f 	bl	be216 <memcpy>
    myFile.print(dataStr);
   b4578:	4669      	mov	r1, sp
   b457a:	4805      	ldr	r0, [pc, #20]	; (b4590 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
   b457c:	f008 f9a6 	bl	bc8cc <_ZN5Print5printEPKc>
    Serial.println(dataStr);
   b4580:	f008 fdac 	bl	bd0dc <_Z16_fetch_usbserialv>
   b4584:	4669      	mov	r1, sp
   b4586:	f008 f9b4 	bl	bc8f2 <_ZN5Print7printlnEPKc>
   b458a:	e7c4      	b.n	b4516 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b458c:	000c0418 	.word	0x000c0418
   b4590:	2003ddf8 	.word	0x2003ddf8
   b4594:	2003de2c 	.word	0x2003de2c
   b4598:	2003e5ec 	.word	0x2003e5ec
   b459c:	000c0421 	.word	0x000c0421
   b45a0:	000c0454 	.word	0x000c0454
   b45a4:	2003de08 	.word	0x2003de08
   b45a8:	000c0471 	.word	0x000c0471
   b45ac:	000c047a 	.word	0x000c047a
   b45b0:	000c0492 	.word	0x000c0492
   b45b4:	000c049b 	.word	0x000c049b
   b45b8:	2003de4a 	.word	0x2003de4a

000b45bc <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b45bc:	b530      	push	{r4, r5, lr}
   b45be:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b45c0:	4b1b      	ldr	r3, [pc, #108]	; (b4630 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b45c2:	9300      	str	r3, [sp, #0]
   b45c4:	7913      	ldrb	r3, [r2, #4]
   b45c6:	f88d 3004 	strb.w	r3, [sp, #4]
   b45ca:	6893      	ldr	r3, [r2, #8]
   b45cc:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b45ce:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b45d2:	8993      	ldrh	r3, [r2, #12]
   b45d4:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b45d8:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b45da:	460a      	mov	r2, r1
   b45dc:	466b      	mov	r3, sp
   b45de:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b45e2:	4628      	mov	r0, r5
   b45e4:	f003 fa1c 	bl	b7a20 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b45e8:	b910      	cbnz	r0, b45f0 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b45ea:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b45ec:	b005      	add	sp, #20
   b45ee:	bd30      	pop	{r4, r5, pc}
    m_blockDev = blockDev;
   b45f0:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b45f2:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b45f6:	4628      	mov	r0, r5
   b45f8:	f002 faec 	bl	b6bd4 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b45fc:	2101      	movs	r1, #1
   b45fe:	4620      	mov	r0, r4
   b4600:	f003 f8b8 	bl	b7774 <_ZN9FatVolume4initEh>
   b4604:	4601      	mov	r1, r0
   b4606:	b168      	cbz	r0, b4624 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b4608:	4621      	mov	r1, r4
   b460a:	4628      	mov	r0, r5
   b460c:	f002 f919 	bl	b6842 <_ZN7FatFile8openRootEP9FatVolume>
   b4610:	2800      	cmp	r0, #0
   b4612:	d0ea      	beq.n	b45ea <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b4614:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b4618:	f013 0f70 	tst.w	r3, #112	; 0x70
   b461c:	d0e5      	beq.n	b45ea <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b461e:	4b05      	ldr	r3, [pc, #20]	; (b4634 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b4620:	601d      	str	r5, [r3, #0]
    return true;
   b4622:	e7e3      	b.n	b45ec <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b4624:	4620      	mov	r0, r4
   b4626:	f003 f8a5 	bl	b7774 <_ZN9FatVolume4initEh>
   b462a:	2800      	cmp	r0, #0
   b462c:	d1ec      	bne.n	b4608 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b462e:	e7dc      	b.n	b45ea <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b4630:	000c0ae0 	.word	0x000c0ae0
   b4634:	2003e63c 	.word	0x2003e63c

000b4638 <_Z10logMessagePKc>:
void logMessage(const char *message){
   b4638:	b538      	push	{r3, r4, r5, lr}
    return m_attr;
   b463a:	4c0d      	ldr	r4, [pc, #52]	; (b4670 <_Z10logMessagePKc+0x38>)
    if(!logFile.isOpen()){
   b463c:	7c23      	ldrb	r3, [r4, #16]
void logMessage(const char *message){
   b463e:	4605      	mov	r5, r0
    if(!logFile.isOpen()){
   b4640:	b983      	cbnz	r3, b4664 <_Z10logMessagePKc+0x2c>
        logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4642:	490c      	ldr	r1, [pc, #48]	; (b4674 <_Z10logMessagePKc+0x3c>)
   b4644:	f244 2202 	movw	r2, #16898	; 0x4202
   b4648:	f104 0010 	add.w	r0, r4, #16
   b464c:	f7ff ff04 	bl	b4458 <_ZN7FatFile4openEPKci>
        logFile.println(message);
   b4650:	4629      	mov	r1, r5
   b4652:	4620      	mov	r0, r4
   b4654:	f008 f94d 	bl	bc8f2 <_ZN5Print7printlnEPKc>
        logFile.close();
   b4658:	f104 0010 	add.w	r0, r4, #16
}
   b465c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        logFile.close();
   b4660:	f002 bab8 	b.w	b6bd4 <_ZN7FatFile5closeEv>
    else logFile.println(message);
   b4664:	4601      	mov	r1, r0
   b4666:	4620      	mov	r0, r4
}
   b4668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    else logFile.println(message);
   b466c:	f008 b941 	b.w	bc8f2 <_ZN5Print7printlnEPKc>
   b4670:	2003ddc0 	.word	0x2003ddc0
   b4674:	2003dd68 	.word	0x2003dd68

000b4678 <_ZN8WaterBotC1Ev>:
class WaterBot{
   b4678:	2201      	movs	r2, #1
   b467a:	7002      	strb	r2, [r0, #0]
   b467c:	2200      	movs	r2, #0
   b467e:	7242      	strb	r2, [r0, #9]
   b4680:	4a05      	ldr	r2, [pc, #20]	; (b4698 <_ZN8WaterBotC1Ev+0x20>)
   b4682:	60c2      	str	r2, [r0, #12]
   b4684:	6102      	str	r2, [r0, #16]
   b4686:	2200      	movs	r2, #0
   b4688:	6142      	str	r2, [r0, #20]
   b468a:	6182      	str	r2, [r0, #24]
   b468c:	61c2      	str	r2, [r0, #28]
   b468e:	6202      	str	r2, [r0, #32]
   b4690:	6242      	str	r2, [r0, #36]	; 0x24
   b4692:	6282      	str	r2, [r0, #40]	; 0x28
   b4694:	62c2      	str	r2, [r0, #44]	; 0x2c
   b4696:	4770      	bx	lr
   b4698:	c479c000 	.word	0xc479c000

000b469c <_Z9setupXBeev>:
void setupXBee(){
   b469c:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b469e:	f008 fec9 	bl	bd434 <_Z22__fetch_global_Serial1v>
   b46a2:	4908      	ldr	r1, [pc, #32]	; (b46c4 <_Z9setupXBeev+0x28>)
   b46a4:	f7ff fe0f 	bl	b42c6 <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b46a8:	2014      	movs	r0, #20
   b46aa:	f005 f8cd 	bl	b9848 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b46ae:	f008 fec1 	bl	bd434 <_Z22__fetch_global_Serial1v>
   b46b2:	4905      	ldr	r1, [pc, #20]	; (b46c8 <_Z9setupXBeev+0x2c>)
   b46b4:	f7ff fe07 	bl	b42c6 <_ZN5Print6printfEPKcz>
}
   b46b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b46bc:	2014      	movs	r0, #20
   b46be:	f005 b8c3 	b.w	b9848 <delay>
   b46c2:	bf00      	nop
   b46c4:	000c0887 	.word	0x000c0887
   b46c8:	000c0a9a 	.word	0x000c0a9a

000b46cc <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b46cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b46d0:	b084      	sub	sp, #16
   b46d2:	af02      	add	r7, sp, #8
   b46d4:	4680      	mov	r8, r0
   b46d6:	4691      	mov	r9, r2
   b46d8:	461e      	mov	r6, r3
   b46da:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b46dc:	f009 fe77 	bl	be3ce <strlen>
   b46e0:	3009      	adds	r0, #9
   b46e2:	f020 0107 	bic.w	r1, r0, #7
   b46e6:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b46ea:	4640      	mov	r0, r8
   b46ec:	f009 fe6f 	bl	be3ce <strlen>
    char outStr[strlen(dataOut)+2];
   b46f0:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b46f2:	4929      	ldr	r1, [pc, #164]	; (b4798 <_Z8sendDataPKchbbb+0xcc>)
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b46f4:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b46f8:	4603      	mov	r3, r0
   b46fa:	4642      	mov	r2, r8
   b46fc:	4620      	mov	r0, r4
   b46fe:	f005 f853 	bl	b97a8 <sprintf>
    if(VERBOSE) Serial.println(outStr);
   b4702:	f008 fceb 	bl	bd0dc <_Z16_fetch_usbserialv>
   b4706:	4621      	mov	r1, r4
   b4708:	f008 f8f3 	bl	bc8f2 <_ZN5Print7printlnEPKc>
    if(sendLTE || sendMode == 4){
   b470c:	f1ba 0f00 	cmp.w	sl, #0
   b4710:	d101      	bne.n	b4716 <_Z8sendDataPKchbbb+0x4a>
   b4712:	2d04      	cmp	r5, #4
   b4714:	d10d      	bne.n	b4732 <_Z8sendDataPKchbbb+0x66>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4716:	4b21      	ldr	r3, [pc, #132]	; (b479c <_Z8sendDataPKchbbb+0xd0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4718:	4921      	ldr	r1, [pc, #132]	; (b47a0 <_Z8sendDataPKchbbb+0xd4>)
   b471a:	781b      	ldrb	r3, [r3, #0]
   b471c:	f88d 3000 	strb.w	r3, [sp]
   b4720:	4638      	mov	r0, r7
   b4722:	233c      	movs	r3, #60	; 0x3c
   b4724:	4622      	mov	r2, r4
   b4726:	f007 fd5d 	bl	bc1e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b472a:	6878      	ldr	r0, [r7, #4]
   b472c:	b108      	cbz	r0, b4732 <_Z8sendDataPKchbbb+0x66>
	  _M_pi->_M_release();
   b472e:	f7ff fe4f 	bl	b43d0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b4732:	f1b9 0f00 	cmp.w	r9, #0
   b4736:	d101      	bne.n	b473c <_Z8sendDataPKchbbb+0x70>
   b4738:	2d01      	cmp	r5, #1
   b473a:	d121      	bne.n	b4780 <_Z8sendDataPKchbbb+0xb4>
   b473c:	f005 fd9e 	bl	ba27c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4740:	f005 fe49 	bl	ba3d6 <_ZNK8particle14BleLocalDevice9connectedEv>
   b4744:	b1e0      	cbz	r0, b4780 <_Z8sendDataPKchbbb+0xb4>
        uint8_t txBuf_tmp[strlen(outStr)];
   b4746:	4620      	mov	r0, r4
   b4748:	f009 fe41 	bl	be3ce <strlen>
   b474c:	3007      	adds	r0, #7
   b474e:	f020 0007 	bic.w	r0, r0, #7
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b4752:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b4754:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b4758:	4620      	mov	r0, r4
   b475a:	f009 fe38 	bl	be3ce <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b475e:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b4762:	4602      	mov	r2, r0
   b4764:	4621      	mov	r1, r4
   b4766:	4648      	mov	r0, r9
   b4768:	f009 fd55 	bl	be216 <memcpy>
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b476c:	4620      	mov	r0, r4
   b476e:	f009 fe2e 	bl	be3ce <strlen>
   b4772:	2300      	movs	r3, #0
   b4774:	4602      	mov	r2, r0
   b4776:	4649      	mov	r1, r9
   b4778:	480a      	ldr	r0, [pc, #40]	; (b47a4 <_Z8sendDataPKchbbb+0xd8>)
   b477a:	f005 fc19 	bl	b9fb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b477e:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b4780:	b90e      	cbnz	r6, b4786 <_Z8sendDataPKchbbb+0xba>
   b4782:	2d02      	cmp	r5, #2
   b4784:	d104      	bne.n	b4790 <_Z8sendDataPKchbbb+0xc4>
        Serial1.println(outStr);
   b4786:	f008 fe55 	bl	bd434 <_Z22__fetch_global_Serial1v>
   b478a:	4621      	mov	r1, r4
   b478c:	f008 f8b1 	bl	bc8f2 <_ZN5Print7printlnEPKc>
}
   b4790:	3708      	adds	r7, #8
   b4792:	46bd      	mov	sp, r7
   b4794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4798:	000c0503 	.word	0x000c0503
   b479c:	2003dcfc 	.word	0x2003dcfc
   b47a0:	000c050a 	.word	0x000c050a
   b47a4:	2003decc 	.word	0x2003decc

000b47a8 <_Z18manualMotorControlh>:
void manualMotorControl(uint8_t commandedBot){
   b47a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b47ac:	4604      	mov	r4, r0
   b47ae:	b087      	sub	sp, #28
    VRead = 4095-analogRead(JOYV_ADC);
   b47b0:	2010      	movs	r0, #16
   b47b2:	f008 fdd0 	bl	bd356 <analogRead>
   b47b6:	f5c0 677f 	rsb	r7, r0, #4080	; 0xff0
   b47ba:	4606      	mov	r6, r0
   b47bc:	370f      	adds	r7, #15
    HRead = analogRead(JOYH_ADC);
   b47be:	2011      	movs	r0, #17
   b47c0:	f008 fdc9 	bl	bd356 <analogRead>
    if(VRead < JOY_MID - JOY_DEADZONE){
   b47c4:	f5b7 6ff9 	cmp.w	r7, #1992	; 0x7c8
   b47c8:	dc40      	bgt.n	b484c <_Z18manualMotorControlh+0xa4>
        VSet = -90 * (VRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b47ca:	f5c6 6303 	rsb	r3, r6, #2096	; 0x830
        if(VSet < -90) VSet = -90;
   b47ce:	4a6c      	ldr	r2, [pc, #432]	; (b4980 <_Z18manualMotorControlh+0x1d8>)
        VSet = -90 * (VRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b47d0:	3306      	adds	r3, #6
   b47d2:	f06f 0159 	mvn.w	r1, #89	; 0x59
   b47d6:	434b      	muls	r3, r1
        if(VSet < -90) VSet = -90;
   b47d8:	4293      	cmp	r3, r2
   b47da:	dc49      	bgt.n	b4870 <_Z18manualMotorControlh+0xc8>
        VSet = -90 * (VRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b47dc:	4e69      	ldr	r6, [pc, #420]	; (b4984 <_Z18manualMotorControlh+0x1dc>)
   b47de:	fb93 f6f6 	sdiv	r6, r3, r6
    if(HRead < JOY_MID - JOY_DEADZONE){
   b47e2:	f5b0 6ff9 	cmp.w	r0, #1992	; 0x7c8
   b47e6:	dc45      	bgt.n	b4874 <_Z18manualMotorControlh+0xcc>
        HSet = -90 * (HRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b47e8:	f46f 63f9 	mvn.w	r3, #1992	; 0x7c8
   b47ec:	4418      	add	r0, r3
   b47ee:	f06f 0159 	mvn.w	r1, #89	; 0x59
        if(HSet < -90) HSet = -90;
   b47f2:	4b63      	ldr	r3, [pc, #396]	; (b4980 <_Z18manualMotorControlh+0x1d8>)
        HSet = -90 * (HRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b47f4:	4348      	muls	r0, r1
        if(HSet < -90) HSet = -90;
   b47f6:	4298      	cmp	r0, r3
   b47f8:	f300 80c0 	bgt.w	b497c <_Z18manualMotorControlh+0x1d4>
        HSet = -90 * (HRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b47fc:	4d61      	ldr	r5, [pc, #388]	; (b4984 <_Z18manualMotorControlh+0x1dc>)
   b47fe:	fb90 f5f5 	sdiv	r5, r0, r5
    if(VSet > 0){
   b4802:	2e00      	cmp	r6, #0
   b4804:	dc47      	bgt.n	b4896 <_Z18manualMotorControlh+0xee>
                RSpeed = 90 - HSet/2 + VSet;
   b4806:	eb05 72d5 	add.w	r2, r5, r5, lsr #31
   b480a:	1053      	asrs	r3, r2, #1
            if((0-HSet) > (0-VSet)){    //H = -90, V = 0 -> LS = 45, RS = 135, H = -90, V = -90 -> LS = 45, RS = 0
   b480c:	42b5      	cmp	r5, r6
                RSpeed = 90 - HSet/2 + VSet;
   b480e:	f1c3 0300 	rsb	r3, r3, #0
   b4812:	ea4f 0562 	mov.w	r5, r2, asr #1
            if((0-HSet) > (0-VSet)){    //H = -90, V = 0 -> LS = 45, RS = 135, H = -90, V = -90 -> LS = 45, RS = 0
   b4816:	f280 80a8 	bge.w	b496a <_Z18manualMotorControlh+0x1c2>
                RSpeed = 90 - HSet/2 + (VSet*1.5);
   b481a:	f103 005a 	add.w	r0, r3, #90	; 0x5a
   b481e:	f009 f94b 	bl	bdab8 <__aeabi_i2d>
   b4822:	4680      	mov	r8, r0
   b4824:	4630      	mov	r0, r6
   b4826:	4689      	mov	r9, r1
   b4828:	f009 f946 	bl	bdab8 <__aeabi_i2d>
   b482c:	4b56      	ldr	r3, [pc, #344]	; (b4988 <_Z18manualMotorControlh+0x1e0>)
   b482e:	2200      	movs	r2, #0
   b4830:	f009 f9ac 	bl	bdb8c <__aeabi_dmul>
   b4834:	460b      	mov	r3, r1
   b4836:	4602      	mov	r2, r0
   b4838:	4649      	mov	r1, r9
   b483a:	4640      	mov	r0, r8
   b483c:	f008 fff0 	bl	bd820 <__adddf3>
   b4840:	f009 fc3e 	bl	be0c0 <__aeabi_d2uiz>
                LSpeed = 90 + HSet/2;
   b4844:	f105 035a 	add.w	r3, r5, #90	; 0x5a
                RSpeed = 90 - HSet/2 + (VSet*1.5);
   b4848:	b2c1      	uxtb	r1, r0
                LSpeed = 90 + HSet/2;
   b484a:	e036      	b.n	b48ba <_Z18manualMotorControlh+0x112>
    else if(VRead > JOY_MID + JOY_DEADZONE){
   b484c:	f640 0337 	movw	r3, #2103	; 0x837
   b4850:	429f      	cmp	r7, r3
   b4852:	dd0b      	ble.n	b486c <_Z18manualMotorControlh+0xc4>
        if(VSet > 90) VSet = 90;
   b4854:	4a4d      	ldr	r2, [pc, #308]	; (b498c <_Z18manualMotorControlh+0x1e4>)
        VSet = 90 * (VRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4856:	f5c6 63f9 	rsb	r3, r6, #1992	; 0x7c8
   b485a:	215a      	movs	r1, #90	; 0x5a
   b485c:	434b      	muls	r3, r1
        if(VSet > 90) VSet = 90;
   b485e:	4293      	cmp	r3, r2
   b4860:	dc06      	bgt.n	b4870 <_Z18manualMotorControlh+0xc8>
        VSet = 90 * (VRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4862:	f240 7164 	movw	r1, #1892	; 0x764
   b4866:	fb93 f6f1 	sdiv	r6, r3, r1
   b486a:	e7ba      	b.n	b47e2 <_Z18manualMotorControlh+0x3a>
        VSet = 0;
   b486c:	2600      	movs	r6, #0
   b486e:	e7b8      	b.n	b47e2 <_Z18manualMotorControlh+0x3a>
        if(VSet > 90) VSet = 90;
   b4870:	460e      	mov	r6, r1
   b4872:	e7b6      	b.n	b47e2 <_Z18manualMotorControlh+0x3a>
    else if(HRead > JOY_MID + JOY_DEADZONE){
   b4874:	f640 0337 	movw	r3, #2103	; 0x837
   b4878:	4298      	cmp	r0, r3
   b487a:	dd20      	ble.n	b48be <_Z18manualMotorControlh+0x116>
        if(HSet > 90) HSet = 90;
   b487c:	4b43      	ldr	r3, [pc, #268]	; (b498c <_Z18manualMotorControlh+0x1e4>)
        HSet = 90 * (HRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b487e:	f6a0 0037 	subw	r0, r0, #2103	; 0x837
   b4882:	215a      	movs	r1, #90	; 0x5a
   b4884:	4348      	muls	r0, r1
        if(HSet > 90) HSet = 90;
   b4886:	4298      	cmp	r0, r3
   b4888:	dc1b      	bgt.n	b48c2 <_Z18manualMotorControlh+0x11a>
        HSet = 90 * (HRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b488a:	f240 7164 	movw	r1, #1892	; 0x764
   b488e:	fbb0 f5f1 	udiv	r5, r0, r1
    if(VSet > 0){
   b4892:	2e00      	cmp	r6, #0
   b4894:	dd3a      	ble.n	b490c <_Z18manualMotorControlh+0x164>
   b4896:	f106 025a 	add.w	r2, r6, #90	; 0x5a
   b489a:	0feb      	lsrs	r3, r5, #31
        if(HSet > 0){
   b489c:	2d00      	cmp	r5, #0
    LSpeed = 90 + VSet/2;
   b489e:	f3c6 0747 	ubfx	r7, r6, #1, #8
        if(HSet > 0){
   b48a2:	b2d2      	uxtb	r2, r2
                RSpeed = 90 - HSet/2 + VSet;
   b48a4:	442b      	add	r3, r5
        if(HSet > 0){
   b48a6:	dd0e      	ble.n	b48c6 <_Z18manualMotorControlh+0x11e>
                RSpeed = 90 - HSet/2 + VSet;
   b48a8:	eba2 0363 	sub.w	r3, r2, r3, asr #1
            if(HSet > VSet){        //H = 90, V = 0 -> LS = 135, RS = 45, H = 90, V = 90 -> LS = 180, RS = 135
   b48ac:	42b5      	cmp	r5, r6
                RSpeed = 90 - HSet/2 + VSet;
   b48ae:	b2d9      	uxtb	r1, r3
            if(HSet > VSet){        //H = 90, V = 0 -> LS = 135, RS = 45, H = 90, V = 90 -> LS = 180, RS = 135
   b48b0:	dd60      	ble.n	b4974 <_Z18manualMotorControlh+0x1cc>
                LSpeed = 90 + HSet/2 + VSet/2;
   b48b2:	f107 035a 	add.w	r3, r7, #90	; 0x5a
   b48b6:	eb03 0365 	add.w	r3, r3, r5, asr #1
                LSpeed = 90 - HSet/2 + VSet;
   b48ba:	b2db      	uxtb	r3, r3
   b48bc:	e00e      	b.n	b48dc <_Z18manualMotorControlh+0x134>
        HSet = 0;
   b48be:	2500      	movs	r5, #0
   b48c0:	e7e7      	b.n	b4892 <_Z18manualMotorControlh+0xea>
        if(HSet > 90) HSet = 90;
   b48c2:	460d      	mov	r5, r1
   b48c4:	e7e5      	b.n	b4892 <_Z18manualMotorControlh+0xea>
            if((0-HSet) > VSet){
   b48c6:	4269      	negs	r1, r5
                LSpeed = 90 + HSet/2 + VSet;
   b48c8:	1058      	asrs	r0, r3, #1
            if((0-HSet) > VSet){
   b48ca:	42b1      	cmp	r1, r6
                LSpeed = 90 + HSet/2 + VSet;
   b48cc:	eb02 0363 	add.w	r3, r2, r3, asr #1
   b48d0:	b2db      	uxtb	r3, r3
            if((0-HSet) > VSet){
   b48d2:	dd51      	ble.n	b4978 <_Z18manualMotorControlh+0x1d0>
                RSpeed = 90 - HSet/2 + VSet/2;
   b48d4:	f107 015a 	add.w	r1, r7, #90	; 0x5a
   b48d8:	1a09      	subs	r1, r1, r0
                RSpeed = 90 + HSet/2 + VSet;
   b48da:	b2c9      	uxtb	r1, r1
    sprintf(mtrStr,"CCB%dmtr%03d%03d",commandedBot, LSpeed, RSpeed);
   b48dc:	4622      	mov	r2, r4
   b48de:	9100      	str	r1, [sp, #0]
   b48e0:	a802      	add	r0, sp, #8
   b48e2:	492b      	ldr	r1, [pc, #172]	; (b4990 <_Z18manualMotorControlh+0x1e8>)
   b48e4:	f004 ff60 	bl	b97a8 <sprintf>
    Serial.println(mtrStr);
   b48e8:	f008 fbf8 	bl	bd0dc <_Z16_fetch_usbserialv>
   b48ec:	a902      	add	r1, sp, #8
   b48ee:	f008 f800 	bl	bc8f2 <_ZN5Print7printlnEPKc>
    sendData(mtrStr,0,true,false, false);
   b48f2:	2300      	movs	r3, #0
   b48f4:	9300      	str	r3, [sp, #0]
   b48f6:	2201      	movs	r2, #1
   b48f8:	4619      	mov	r1, r3
   b48fa:	a802      	add	r0, sp, #8
   b48fc:	f7ff fee6 	bl	b46cc <_Z8sendDataPKchbbb>
    delay(100);
   b4900:	2064      	movs	r0, #100	; 0x64
   b4902:	f004 ffa1 	bl	b9848 <delay>
}
   b4906:	b007      	add	sp, #28
   b4908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(HSet > 0){
   b490c:	2d00      	cmp	r5, #0
   b490e:	f43f af7a 	beq.w	b4806 <_Z18manualMotorControlh+0x5e>
            if(HSet > (0-VSet)){        // H = 90, V = 0 -> LS = 135, RS = 45, H = 90, V = -90 -> LS = 0; RS = 45
   b4912:	4273      	negs	r3, r6
   b4914:	42ab      	cmp	r3, r5
                LSpeed = 90 + HSet/2 + VSet/2;
   b4916:	ea4f 0765 	mov.w	r7, r5, asr #1
            if(HSet > (0-VSet)){        // H = 90, V = 0 -> LS = 135, RS = 45, H = 90, V = -90 -> LS = 0; RS = 45
   b491a:	da20      	bge.n	b495e <_Z18manualMotorControlh+0x1b6>
                Serial.println("Hello World!!!!!!!");
   b491c:	f008 fbde 	bl	bd0dc <_Z16_fetch_usbserialv>
   b4920:	491c      	ldr	r1, [pc, #112]	; (b4994 <_Z18manualMotorControlh+0x1ec>)
   b4922:	f007 ffe6 	bl	bc8f2 <_ZN5Print7printlnEPKc>
                LSpeed = (90 + HSet/2 + VSet*1.5 );
   b4926:	f107 005a 	add.w	r0, r7, #90	; 0x5a
   b492a:	f009 f8c5 	bl	bdab8 <__aeabi_i2d>
   b492e:	4680      	mov	r8, r0
   b4930:	4630      	mov	r0, r6
   b4932:	4689      	mov	r9, r1
   b4934:	f009 f8c0 	bl	bdab8 <__aeabi_i2d>
   b4938:	4b13      	ldr	r3, [pc, #76]	; (b4988 <_Z18manualMotorControlh+0x1e0>)
   b493a:	2200      	movs	r2, #0
   b493c:	f009 f926 	bl	bdb8c <__aeabi_dmul>
   b4940:	460b      	mov	r3, r1
   b4942:	4602      	mov	r2, r0
   b4944:	4649      	mov	r1, r9
   b4946:	4640      	mov	r0, r8
   b4948:	f008 ff6a 	bl	bd820 <__adddf3>
   b494c:	f009 fbb8 	bl	be0c0 <__aeabi_d2uiz>
                RSpeed = (90 - HSet/2);      
   b4950:	eb05 71d5 	add.w	r1, r5, r5, lsr #31
   b4954:	1049      	asrs	r1, r1, #1
                LSpeed = (90 + HSet/2 + VSet*1.5 );
   b4956:	b2c3      	uxtb	r3, r0
                RSpeed = (90 - HSet/2);      
   b4958:	f1c1 015a 	rsb	r1, r1, #90	; 0x5a
   b495c:	e7bd      	b.n	b48da <_Z18manualMotorControlh+0x132>
                LSpeed = 90 + VSet;
   b495e:	f106 015a 	add.w	r1, r6, #90	; 0x5a
   b4962:	b2cb      	uxtb	r3, r1
                RSpeed = 90 + HSet/2 + VSet;
   b4964:	fa57 f181 	uxtab	r1, r7, r1
   b4968:	e7b7      	b.n	b48da <_Z18manualMotorControlh+0x132>
                RSpeed = 90 + VSet;
   b496a:	365a      	adds	r6, #90	; 0x5a
   b496c:	b2f1      	uxtb	r1, r6
                LSpeed = 90 - HSet/2 + VSet;
   b496e:	fa53 f386 	uxtab	r3, r3, r6
   b4972:	e7a2      	b.n	b48ba <_Z18manualMotorControlh+0x112>
                LSpeed = 90 + VSet;
   b4974:	4613      	mov	r3, r2
   b4976:	e7b1      	b.n	b48dc <_Z18manualMotorControlh+0x134>
                RSpeed = 90 + VSet;
   b4978:	4611      	mov	r1, r2
   b497a:	e7af      	b.n	b48dc <_Z18manualMotorControlh+0x134>
        if(HSet < -90) HSet = -90;
   b497c:	460d      	mov	r5, r1
   b497e:	e740      	b.n	b4802 <_Z18manualMotorControlh+0x5a>
   b4980:	0002a0e6 	.word	0x0002a0e6
   b4984:	fffff89b 	.word	0xfffff89b
   b4988:	3ff80000 	.word	0x3ff80000
   b498c:	0002a08b 	.word	0x0002a08b
   b4990:	000c0525 	.word	0x000c0525
   b4994:	000c0512 	.word	0x000c0512

000b4998 <_Z14XBeeLTEPairSetv>:
void XBeeLTEPairSet(){
   b4998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      : _M_current(__i) { }
   b499c:	4d0e      	ldr	r5, [pc, #56]	; (b49d8 <_Z14XBeeLTEPairSetv+0x40>)
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b499e:	4f0f      	ldr	r7, [pc, #60]	; (b49dc <_Z14XBeeLTEPairSetv+0x44>)
   b49a0:	e9d5 4800 	ldrd	r4, r8, [r5]
void XBeeLTEPairSet(){
   b49a4:	b088      	sub	sp, #32
    for(WaterBot p: PairBots){
   b49a6:	45a0      	cmp	r8, r4
   b49a8:	d013      	beq.n	b49d2 <_Z14XBeeLTEPairSetv+0x3a>
   b49aa:	7963      	ldrb	r3, [r4, #5]
   b49ac:	7926      	ldrb	r6, [r4, #4]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b49ae:	7862      	ldrb	r2, [r4, #1]
    for(WaterBot p: PairBots){
   b49b0:	9303      	str	r3, [sp, #12]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b49b2:	4639      	mov	r1, r7
   b49b4:	a805      	add	r0, sp, #20
   b49b6:	f004 fef7 	bl	b97a8 <sprintf>
        sendData(replyStr,0,true,p.XBeeAvail,p.LTEAvail);
   b49ba:	9b03      	ldr	r3, [sp, #12]
   b49bc:	9600      	str	r6, [sp, #0]
   b49be:	2201      	movs	r2, #1
   b49c0:	2100      	movs	r1, #0
   b49c2:	a805      	add	r0, sp, #20
   b49c4:	f7ff fe82 	bl	b46cc <_Z8sendDataPKchbbb>
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_nonempty();
	--this->_M_impl._M_finish;
   b49c8:	686b      	ldr	r3, [r5, #4]
   b49ca:	3b34      	subs	r3, #52	; 0x34
   b49cc:	606b      	str	r3, [r5, #4]
      operator++() _GLIBCXX_NOEXCEPT
   b49ce:	3434      	adds	r4, #52	; 0x34
	return *this;
   b49d0:	e7e9      	b.n	b49a6 <_Z14XBeeLTEPairSetv+0xe>
}
   b49d2:	b008      	add	sp, #32
   b49d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b49d8:	2003dc98 	.word	0x2003dc98
   b49dc:	000c0536 	.word	0x000c0536

000b49e0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>:
      at(size_type __n)
   b49e0:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b49e2:	e9d0 4200 	ldrd	r4, r2, [r0]
   b49e6:	4806      	ldr	r0, [pc, #24]	; (b4a00 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x20>)
   b49e8:	1b12      	subs	r2, r2, r4
   b49ea:	1092      	asrs	r2, r2, #2
   b49ec:	4342      	muls	r2, r0
	if (__n >= this->size())
   b49ee:	4291      	cmp	r1, r2
   b49f0:	d302      	bcc.n	b49f8 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b49f2:	4804      	ldr	r0, [pc, #16]	; (b4a04 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x24>)
   b49f4:	f008 fd4a 	bl	bd48c <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b49f8:	2034      	movs	r0, #52	; 0x34
   b49fa:	fb00 4001 	mla	r0, r0, r1, r4
   b49fe:	bd10      	pop	{r4, pc}
   b4a00:	c4ec4ec5 	.word	0xc4ec4ec5
   b4a04:	000c053f 	.word	0x000c053f

000b4a08 <_Z8lHandlerv>:
void lHandler(){
   b4a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4a0c:	4c3e      	ldr	r4, [pc, #248]	; (b4b08 <_Z8lHandlerv+0x100>)
void lHandler(){
   b4a0e:	b087      	sub	sp, #28
   b4a10:	f004 fc36 	bl	b9280 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4a14:	6823      	ldr	r3, [r4, #0]
   b4a16:	1ac0      	subs	r0, r0, r3
   b4a18:	2863      	cmp	r0, #99	; 0x63
   b4a1a:	d972      	bls.n	b4b02 <_Z8lHandlerv+0xfa>
    Serial.println("Right trigger");
   b4a1c:	f008 fb5e 	bl	bd0dc <_Z16_fetch_usbserialv>
   b4a20:	493a      	ldr	r1, [pc, #232]	; (b4b0c <_Z8lHandlerv+0x104>)
   b4a22:	f007 ff66 	bl	bc8f2 <_ZN5Print7printlnEPKc>
   b4a26:	f004 fc2b 	bl	b9280 <HAL_Timer_Get_Milli_Seconds>
    redrawMenu = true;
   b4a2a:	4b39      	ldr	r3, [pc, #228]	; (b4b10 <_Z8lHandlerv+0x108>)
    debounceTime = millis();
   b4a2c:	6020      	str	r0, [r4, #0]
    redrawMenu = true;
   b4a2e:	2201      	movs	r2, #1
   b4a30:	701a      	strb	r2, [r3, #0]
    if(selectingBots){
   b4a32:	4b38      	ldr	r3, [pc, #224]	; (b4b14 <_Z8lHandlerv+0x10c>)
   b4a34:	4938      	ldr	r1, [pc, #224]	; (b4b18 <_Z8lHandlerv+0x110>)
   b4a36:	781c      	ldrb	r4, [r3, #0]
   b4a38:	b18c      	cbz	r4, b4a5e <_Z8lHandlerv+0x56>
      : _M_current(__i) { }
   b4a3a:	680b      	ldr	r3, [r1, #0]
        if(botSelect != WaterBots.front().botNum){
   b4a3c:	4d37      	ldr	r5, [pc, #220]	; (b4b1c <_Z8lHandlerv+0x114>)
   b4a3e:	7858      	ldrb	r0, [r3, #1]
   b4a40:	782a      	ldrb	r2, [r5, #0]
   b4a42:	4290      	cmp	r0, r2
   b4a44:	d05d      	beq.n	b4b02 <_Z8lHandlerv+0xfa>
   b4a46:	684f      	ldr	r7, [r1, #4]
   b4a48:	2100      	movs	r1, #0
            for(WaterBot ws: WaterBots){
   b4a4a:	429f      	cmp	r7, r3
   b4a4c:	d057      	beq.n	b4afe <_Z8lHandlerv+0xf6>
   b4a4e:	785e      	ldrb	r6, [r3, #1]
                if(ws.botNum == botSelect) botSelect = newBotNum;
   b4a50:	4296      	cmp	r6, r2
   b4a52:	bf12      	itee	ne
   b4a54:	4630      	movne	r0, r6
   b4a56:	4621      	moveq	r1, r4
   b4a58:	4602      	moveq	r2, r0
      operator++() _GLIBCXX_NOEXCEPT
   b4a5a:	3334      	adds	r3, #52	; 0x34
	return *this;
   b4a5c:	e7f5      	b.n	b4a4a <_Z8lHandlerv+0x42>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b4a5e:	e9d1 7800 	ldrd	r7, r8, [r1]
            if(ws.botNum == botSelect){
   b4a62:	f8df 90b8 	ldr.w	r9, [pc, #184]	; b4b1c <_Z8lHandlerv+0x114>
                MenuItem curItem = *SelectedItem;
   b4a66:	f8df a0c0 	ldr.w	sl, [pc, #192]	; b4b28 <_Z8lHandlerv+0x120>
                modifiedValue = true;
   b4a6a:	f8df b0c0 	ldr.w	fp, [pc, #192]	; b4b2c <_Z8lHandlerv+0x124>
        for(WaterBot ws: WaterBots){
   b4a6e:	45b8      	cmp	r8, r7
   b4a70:	d047      	beq.n	b4b02 <_Z8lHandlerv+0xfa>
            if(ws.botNum == botSelect){
   b4a72:	787a      	ldrb	r2, [r7, #1]
   b4a74:	f899 3000 	ldrb.w	r3, [r9]
   b4a78:	429a      	cmp	r2, r3
   b4a7a:	d12e      	bne.n	b4ada <_Z8lHandlerv+0xd2>
                MenuItem curItem = *SelectedItem;
   b4a7c:	f8da 6000 	ldr.w	r6, [sl]
   b4a80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4a82:	466d      	mov	r5, sp
   b4a84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4a86:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4a8a:	e885 0003 	stmia.w	r5, {r0, r1}
                Serial.println(curItem.itemName);
   b4a8e:	f008 fb25 	bl	bd0dc <_Z16_fetch_usbserialv>
   b4a92:	f10d 010d 	add.w	r1, sp, #13
   b4a96:	f007 ff2c 	bl	bc8f2 <_ZN5Print7printlnEPKc>
                if(curItem.statOnly) return;
   b4a9a:	f89d 500a 	ldrb.w	r5, [sp, #10]
   b4a9e:	bb85      	cbnz	r5, b4b02 <_Z8lHandlerv+0xfa>
                if(curItem.onOffSetting){
   b4aa0:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b4aa4:	b1e3      	cbz	r3, b4ae0 <_Z8lHandlerv+0xd8>
                    Serial.println("Modified an On/Off Control");
   b4aa6:	f008 fb19 	bl	bd0dc <_Z16_fetch_usbserialv>
   b4aaa:	491d      	ldr	r1, [pc, #116]	; (b4b20 <_Z8lHandlerv+0x118>)
   b4aac:	f007 ff21 	bl	bc8f2 <_ZN5Print7printlnEPKc>
                    WaterBots.at(index).*(curItem.MethodPointerBool) = false;//!(WaterBots.at(index).*(curItem.MethodPointerBool));
   b4ab0:	4621      	mov	r1, r4
   b4ab2:	4819      	ldr	r0, [pc, #100]	; (b4b18 <_Z8lHandlerv+0x110>)
   b4ab4:	f7ff ff94 	bl	b49e0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b4ab8:	9b01      	ldr	r3, [sp, #4]
   b4aba:	54c5      	strb	r5, [r0, r3]
                    Serial.printlnf("Bot: %d, Modified ",WaterBots.at(index).botNum);
   b4abc:	f008 fb0e 	bl	bd0dc <_Z16_fetch_usbserialv>
   b4ac0:	4621      	mov	r1, r4
   b4ac2:	4605      	mov	r5, r0
   b4ac4:	4814      	ldr	r0, [pc, #80]	; (b4b18 <_Z8lHandlerv+0x110>)
   b4ac6:	f7ff ff8b 	bl	b49e0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b4aca:	4916      	ldr	r1, [pc, #88]	; (b4b24 <_Z8lHandlerv+0x11c>)
   b4acc:	7842      	ldrb	r2, [r0, #1]
   b4ace:	4628      	mov	r0, r5
   b4ad0:	f7ff fc32 	bl	b4338 <_ZN5Print8printlnfEPKcz>
                modifiedValue = true;
   b4ad4:	2301      	movs	r3, #1
   b4ad6:	f88b 3000 	strb.w	r3, [fp]
            index++;
   b4ada:	3401      	adds	r4, #1
      operator++() _GLIBCXX_NOEXCEPT
   b4adc:	3734      	adds	r7, #52	; 0x34
	return *this;
   b4ade:	e7c6      	b.n	b4a6e <_Z8lHandlerv+0x66>
                    if(WaterBots.at(index).*(curItem.MethodPointer) > curItem.minVal) WaterBots.at(index).*(curItem.MethodPointer) -= curItem.stepSize;
   b4ae0:	4621      	mov	r1, r4
   b4ae2:	480d      	ldr	r0, [pc, #52]	; (b4b18 <_Z8lHandlerv+0x110>)
   b4ae4:	f7ff ff7c 	bl	b49e0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b4ae8:	9a00      	ldr	r2, [sp, #0]
   b4aea:	f89d 100b 	ldrb.w	r1, [sp, #11]
   b4aee:	5c83      	ldrb	r3, [r0, r2]
   b4af0:	4299      	cmp	r1, r3
   b4af2:	bf3e      	ittt	cc
   b4af4:	f89d 1008 	ldrbcc.w	r1, [sp, #8]
   b4af8:	1a5b      	subcc	r3, r3, r1
   b4afa:	5483      	strbcc	r3, [r0, r2]
   b4afc:	e7ea      	b.n	b4ad4 <_Z8lHandlerv+0xcc>
   b4afe:	b101      	cbz	r1, b4b02 <_Z8lHandlerv+0xfa>
   b4b00:	702a      	strb	r2, [r5, #0]
}
   b4b02:	b007      	add	sp, #28
   b4b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4b08:	2003dd50 	.word	0x2003dd50
   b4b0c:	000c0589 	.word	0x000c0589
   b4b10:	2003da88 	.word	0x2003da88
   b4b14:	2003da89 	.word	0x2003da89
   b4b18:	2003dcb4 	.word	0x2003dcb4
   b4b1c:	2003dd4d 	.word	0x2003dd4d
   b4b20:	000c0597 	.word	0x000c0597
   b4b24:	000c05b2 	.word	0x000c05b2
   b4b28:	2003dca4 	.word	0x2003dca4
   b4b2c:	2003ddf7 	.word	0x2003ddf7

000b4b30 <_Z8rHandlerv>:
void rHandler(){
   b4b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4b34:	4c3f      	ldr	r4, [pc, #252]	; (b4c34 <_Z8rHandlerv+0x104>)
void rHandler(){
   b4b36:	b087      	sub	sp, #28
   b4b38:	f004 fba2 	bl	b9280 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4b3c:	6823      	ldr	r3, [r4, #0]
   b4b3e:	1ac0      	subs	r0, r0, r3
   b4b40:	2863      	cmp	r0, #99	; 0x63
   b4b42:	d91e      	bls.n	b4b82 <_Z8rHandlerv+0x52>
   b4b44:	f004 fb9c 	bl	b9280 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b4b48:	6020      	str	r0, [r4, #0]
    Serial.println("Right trigger");
   b4b4a:	f008 fac7 	bl	bd0dc <_Z16_fetch_usbserialv>
   b4b4e:	493a      	ldr	r1, [pc, #232]	; (b4c38 <_Z8rHandlerv+0x108>)
   b4b50:	f007 fecf 	bl	bc8f2 <_ZN5Print7printlnEPKc>
    redrawMenu = true;  
   b4b54:	4b39      	ldr	r3, [pc, #228]	; (b4c3c <_Z8rHandlerv+0x10c>)
   b4b56:	2201      	movs	r2, #1
   b4b58:	701a      	strb	r2, [r3, #0]
    if(selectingBots){
   b4b5a:	4b39      	ldr	r3, [pc, #228]	; (b4c40 <_Z8rHandlerv+0x110>)
   b4b5c:	781c      	ldrb	r4, [r3, #0]
   b4b5e:	4b39      	ldr	r3, [pc, #228]	; (b4c44 <_Z8rHandlerv+0x114>)
   b4b60:	b1b4      	cbz	r4, b4b90 <_Z8rHandlerv+0x60>
      : _M_current(__i) { }
   b4b62:	685c      	ldr	r4, [r3, #4]
        if(botSelect != WaterBots.back().botNum){
   b4b64:	4d38      	ldr	r5, [pc, #224]	; (b4c48 <_Z8rHandlerv+0x118>)
   b4b66:	f814 2c33 	ldrb.w	r2, [r4, #-51]
   b4b6a:	7828      	ldrb	r0, [r5, #0]
   b4b6c:	4282      	cmp	r2, r0
   b4b6e:	d008      	beq.n	b4b82 <_Z8rHandlerv+0x52>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b4b70:	681b      	ldr	r3, [r3, #0]
            bool findCurrent = false;
   b4b72:	2200      	movs	r2, #0
            for(WaterBot ws: WaterBots){
   b4b74:	429c      	cmp	r4, r3
   b4b76:	d004      	beq.n	b4b82 <_Z8rHandlerv+0x52>
                if(findCurrent){
   b4b78:	3334      	adds	r3, #52	; 0x34
            for(WaterBot ws: WaterBots){
   b4b7a:	f813 1c33 	ldrb.w	r1, [r3, #-51]
                if(findCurrent){
   b4b7e:	b11a      	cbz	r2, b4b88 <_Z8rHandlerv+0x58>
                    botSelect = ws.botNum;
   b4b80:	7029      	strb	r1, [r5, #0]
}
   b4b82:	b007      	add	sp, #28
   b4b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(ws.botNum == botSelect) findCurrent = true;
   b4b88:	1a41      	subs	r1, r0, r1
   b4b8a:	424a      	negs	r2, r1
   b4b8c:	414a      	adcs	r2, r1
	return *this;
   b4b8e:	e7f1      	b.n	b4b74 <_Z8rHandlerv+0x44>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b4b90:	e9d3 7800 	ldrd	r7, r8, [r3]
            if(ws.botNum == botSelect){
   b4b94:	f8df 90b0 	ldr.w	r9, [pc, #176]	; b4c48 <_Z8rHandlerv+0x118>
                MenuItem curItem = *SelectedItem;
   b4b98:	f8df a0b8 	ldr.w	sl, [pc, #184]	; b4c54 <_Z8rHandlerv+0x124>
                modifiedValue = true;
   b4b9c:	f8df b0b8 	ldr.w	fp, [pc, #184]	; b4c58 <_Z8rHandlerv+0x128>
        for(WaterBot ws: WaterBots){
   b4ba0:	45b8      	cmp	r8, r7
   b4ba2:	d0ee      	beq.n	b4b82 <_Z8rHandlerv+0x52>
            if(ws.botNum == botSelect){
   b4ba4:	787a      	ldrb	r2, [r7, #1]
   b4ba6:	f899 3000 	ldrb.w	r3, [r9]
   b4baa:	429a      	cmp	r2, r3
   b4bac:	d130      	bne.n	b4c10 <_Z8rHandlerv+0xe0>
                MenuItem curItem = *SelectedItem;
   b4bae:	f8da 6000 	ldr.w	r6, [sl]
   b4bb2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4bb4:	466d      	mov	r5, sp
   b4bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4bb8:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4bbc:	e885 0003 	stmia.w	r5, {r0, r1}
                Serial.println(curItem.itemName);
   b4bc0:	f008 fa8c 	bl	bd0dc <_Z16_fetch_usbserialv>
   b4bc4:	f10d 010d 	add.w	r1, sp, #13
   b4bc8:	f007 fe93 	bl	bc8f2 <_ZN5Print7printlnEPKc>
                if(curItem.statOnly) return;
   b4bcc:	f89d 300a 	ldrb.w	r3, [sp, #10]
   b4bd0:	2b00      	cmp	r3, #0
   b4bd2:	d1d6      	bne.n	b4b82 <_Z8rHandlerv+0x52>
                if(curItem.onOffSetting){
   b4bd4:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b4bd8:	b1eb      	cbz	r3, b4c16 <_Z8rHandlerv+0xe6>
                    Serial.println("Modified an On/Off Control");
   b4bda:	f008 fa7f 	bl	bd0dc <_Z16_fetch_usbserialv>
   b4bde:	491b      	ldr	r1, [pc, #108]	; (b4c4c <_Z8rHandlerv+0x11c>)
   b4be0:	f007 fe87 	bl	bc8f2 <_ZN5Print7printlnEPKc>
                    WaterBots.at(index).*(curItem.MethodPointerBool) = true;
   b4be4:	4621      	mov	r1, r4
   b4be6:	4817      	ldr	r0, [pc, #92]	; (b4c44 <_Z8rHandlerv+0x114>)
   b4be8:	f7ff fefa 	bl	b49e0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b4bec:	9b01      	ldr	r3, [sp, #4]
   b4bee:	2201      	movs	r2, #1
   b4bf0:	54c2      	strb	r2, [r0, r3]
                    Serial.printlnf("Bot: %d, Modified ",WaterBots.at(index).botNum);
   b4bf2:	f008 fa73 	bl	bd0dc <_Z16_fetch_usbserialv>
   b4bf6:	4621      	mov	r1, r4
   b4bf8:	4605      	mov	r5, r0
   b4bfa:	4812      	ldr	r0, [pc, #72]	; (b4c44 <_Z8rHandlerv+0x114>)
   b4bfc:	f7ff fef0 	bl	b49e0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b4c00:	4913      	ldr	r1, [pc, #76]	; (b4c50 <_Z8rHandlerv+0x120>)
   b4c02:	7842      	ldrb	r2, [r0, #1]
   b4c04:	4628      	mov	r0, r5
   b4c06:	f7ff fb97 	bl	b4338 <_ZN5Print8printlnfEPKcz>
                modifiedValue = true;
   b4c0a:	2301      	movs	r3, #1
   b4c0c:	f88b 3000 	strb.w	r3, [fp]
            index++;
   b4c10:	3401      	adds	r4, #1
      operator++() _GLIBCXX_NOEXCEPT
   b4c12:	3734      	adds	r7, #52	; 0x34
	return *this;
   b4c14:	e7c4      	b.n	b4ba0 <_Z8rHandlerv+0x70>
                    if(WaterBots.at(index).*(curItem.MethodPointer) < curItem.maxVal) WaterBots.at(index).*(curItem.MethodPointer) += curItem.stepSize;
   b4c16:	4621      	mov	r1, r4
   b4c18:	480a      	ldr	r0, [pc, #40]	; (b4c44 <_Z8rHandlerv+0x114>)
   b4c1a:	f7ff fee1 	bl	b49e0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b4c1e:	9a00      	ldr	r2, [sp, #0]
   b4c20:	f89d 100c 	ldrb.w	r1, [sp, #12]
   b4c24:	5c83      	ldrb	r3, [r0, r2]
   b4c26:	4299      	cmp	r1, r3
   b4c28:	bf82      	ittt	hi
   b4c2a:	f89d 1008 	ldrbhi.w	r1, [sp, #8]
   b4c2e:	185b      	addhi	r3, r3, r1
   b4c30:	5483      	strbhi	r3, [r0, r2]
   b4c32:	e7ea      	b.n	b4c0a <_Z8rHandlerv+0xda>
   b4c34:	2003dd50 	.word	0x2003dd50
   b4c38:	000c0589 	.word	0x000c0589
   b4c3c:	2003da88 	.word	0x2003da88
   b4c40:	2003da89 	.word	0x2003da89
   b4c44:	2003dcb4 	.word	0x2003dcb4
   b4c48:	2003dd4d 	.word	0x2003dd4d
   b4c4c:	000c0597 	.word	0x000c0597
   b4c50:	000c05b2 	.word	0x000c05b2
   b4c54:	2003dca4 	.word	0x2003dca4
   b4c58:	2003ddf7 	.word	0x2003ddf7

000b4c5c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>:
      at(size_type __n)
   b4c5c:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c5e:	e9d0 4200 	ldrd	r4, r2, [r0]
   b4c62:	4806      	ldr	r0, [pc, #24]	; (b4c7c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x20>)
   b4c64:	1b12      	subs	r2, r2, r4
   b4c66:	10d2      	asrs	r2, r2, #3
   b4c68:	4342      	muls	r2, r0
	if (__n >= this->size())
   b4c6a:	4291      	cmp	r1, r2
   b4c6c:	d302      	bcc.n	b4c74 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b4c6e:	4804      	ldr	r0, [pc, #16]	; (b4c80 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x24>)
   b4c70:	f008 fc0c 	bl	bd48c <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4c74:	2018      	movs	r0, #24
   b4c76:	fb00 4001 	mla	r0, r0, r1, r4
   b4c7a:	bd10      	pop	{r4, pc}
   b4c7c:	aaaaaaab 	.word	0xaaaaaaab
   b4c80:	000c053f 	.word	0x000c053f

000b4c84 <_Z8uHandlerv>:
void uHandler(){
   b4c84:	b510      	push	{r4, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4c86:	4c0f      	ldr	r4, [pc, #60]	; (b4cc4 <_Z8uHandlerv+0x40>)
   b4c88:	f004 fafa 	bl	b9280 <HAL_Timer_Get_Milli_Seconds>
   b4c8c:	6823      	ldr	r3, [r4, #0]
   b4c8e:	1ac0      	subs	r0, r0, r3
   b4c90:	2863      	cmp	r0, #99	; 0x63
   b4c92:	d915      	bls.n	b4cc0 <_Z8uHandlerv+0x3c>
   b4c94:	f004 faf4 	bl	b9280 <HAL_Timer_Get_Milli_Seconds>
    if(menuItem) menuItem--;
   b4c98:	4a0b      	ldr	r2, [pc, #44]	; (b4cc8 <_Z8uHandlerv+0x44>)
    debounceTime = millis();
   b4c9a:	6020      	str	r0, [r4, #0]
    if(menuItem) menuItem--;
   b4c9c:	7813      	ldrb	r3, [r2, #0]
   b4c9e:	b10b      	cbz	r3, b4ca4 <_Z8uHandlerv+0x20>
   b4ca0:	3b01      	subs	r3, #1
   b4ca2:	7013      	strb	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);
   b4ca4:	7811      	ldrb	r1, [r2, #0]
   b4ca6:	4809      	ldr	r0, [pc, #36]	; (b4ccc <_Z8uHandlerv+0x48>)
   b4ca8:	f7ff ffd8 	bl	b4c5c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b4cac:	4b08      	ldr	r3, [pc, #32]	; (b4cd0 <_Z8uHandlerv+0x4c>)
   b4cae:	6018      	str	r0, [r3, #0]
    Serial.println("Up trigger");
   b4cb0:	f008 fa14 	bl	bd0dc <_Z16_fetch_usbserialv>
   b4cb4:	4907      	ldr	r1, [pc, #28]	; (b4cd4 <_Z8uHandlerv+0x50>)
   b4cb6:	f007 fe1c 	bl	bc8f2 <_ZN5Print7printlnEPKc>
    redrawMenu = true;  
   b4cba:	4b07      	ldr	r3, [pc, #28]	; (b4cd8 <_Z8uHandlerv+0x54>)
   b4cbc:	2201      	movs	r2, #1
   b4cbe:	701a      	strb	r2, [r3, #0]
}
   b4cc0:	bd10      	pop	{r4, pc}
   b4cc2:	bf00      	nop
   b4cc4:	2003dd50 	.word	0x2003dd50
   b4cc8:	2003ddf5 	.word	0x2003ddf5
   b4ccc:	2003dc8c 	.word	0x2003dc8c
   b4cd0:	2003dca4 	.word	0x2003dca4
   b4cd4:	000c05c5 	.word	0x000c05c5
   b4cd8:	2003da88 	.word	0x2003da88

000b4cdc <_Z8dHandlerv>:
void dHandler(){
   b4cdc:	b510      	push	{r4, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4cde:	4c0f      	ldr	r4, [pc, #60]	; (b4d1c <_Z8dHandlerv+0x40>)
   b4ce0:	f004 face 	bl	b9280 <HAL_Timer_Get_Milli_Seconds>
   b4ce4:	6823      	ldr	r3, [r4, #0]
   b4ce6:	1ac0      	subs	r0, r0, r3
   b4ce8:	2863      	cmp	r0, #99	; 0x63
   b4cea:	d916      	bls.n	b4d1a <_Z8dHandlerv+0x3e>
   b4cec:	f004 fac8 	bl	b9280 <HAL_Timer_Get_Milli_Seconds>
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
   b4cf0:	4a0b      	ldr	r2, [pc, #44]	; (b4d20 <_Z8dHandlerv+0x44>)
    debounceTime = millis();
   b4cf2:	6020      	str	r0, [r4, #0]
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
   b4cf4:	7813      	ldrb	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);
   b4cf6:	480b      	ldr	r0, [pc, #44]	; (b4d24 <_Z8dHandlerv+0x48>)
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
   b4cf8:	2b02      	cmp	r3, #2
   b4cfa:	bf9c      	itt	ls
   b4cfc:	3301      	addls	r3, #1
   b4cfe:	7013      	strbls	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);
   b4d00:	7811      	ldrb	r1, [r2, #0]
   b4d02:	f7ff ffab 	bl	b4c5c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b4d06:	4b08      	ldr	r3, [pc, #32]	; (b4d28 <_Z8dHandlerv+0x4c>)
   b4d08:	6018      	str	r0, [r3, #0]
    Serial.println("Down trigger");
   b4d0a:	f008 f9e7 	bl	bd0dc <_Z16_fetch_usbserialv>
   b4d0e:	4907      	ldr	r1, [pc, #28]	; (b4d2c <_Z8dHandlerv+0x50>)
   b4d10:	f007 fdef 	bl	bc8f2 <_ZN5Print7printlnEPKc>
    redrawMenu = true;  
   b4d14:	4b06      	ldr	r3, [pc, #24]	; (b4d30 <_Z8dHandlerv+0x54>)
   b4d16:	2201      	movs	r2, #1
   b4d18:	701a      	strb	r2, [r3, #0]
}
   b4d1a:	bd10      	pop	{r4, pc}
   b4d1c:	2003dd50 	.word	0x2003dd50
   b4d20:	2003ddf5 	.word	0x2003ddf5
   b4d24:	2003dc8c 	.word	0x2003dc8c
   b4d28:	2003dca4 	.word	0x2003dca4
   b4d2c:	000c05d0 	.word	0x000c05d0
   b4d30:	2003da88 	.word	0x2003da88

000b4d34 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b4d34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4d38:	6843      	ldr	r3, [r0, #4]
   b4d3a:	f8d0 a000 	ldr.w	sl, [r0]
   b4d3e:	9301      	str	r3, [sp, #4]
   b4d40:	eba3 040a 	sub.w	r4, r3, sl
   b4d44:	4b41      	ldr	r3, [pc, #260]	; (b4e4c <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x118>)
   b4d46:	10a4      	asrs	r4, r4, #2
   b4d48:	435c      	muls	r4, r3

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b4d4a:	4b41      	ldr	r3, [pc, #260]	; (b4e50 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11c>)
   b4d4c:	429c      	cmp	r4, r3
   b4d4e:	4681      	mov	r9, r0
   b4d50:	468b      	mov	fp, r1
   b4d52:	4616      	mov	r6, r2
   b4d54:	d102      	bne.n	b4d5c <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x28>
	  __throw_length_error(__N(__s));
   b4d56:	483f      	ldr	r0, [pc, #252]	; (b4e54 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x120>)
   b4d58:	f008 fb95 	bl	bd486 <_ZSt20__throw_length_errorPKc>
   b4d5c:	2c01      	cmp	r4, #1
   b4d5e:	4622      	mov	r2, r4
   b4d60:	bf38      	it	cc
   b4d62:	2201      	movcc	r2, #1
   b4d64:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b4d66:	eba1 070a 	sub.w	r7, r1, sl

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4d6a:	d229      	bcs.n	b4dc0 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4d6c:	b354      	cbz	r4, b4dc4 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>
   b4d6e:	429c      	cmp	r4, r3
   b4d70:	bf28      	it	cs
   b4d72:	461c      	movcs	r4, r3
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4d74:	2034      	movs	r0, #52	; 0x34
   b4d76:	4360      	muls	r0, r4
   b4d78:	f7ff f98d 	bl	b4096 <_Znwj>
   b4d7c:	4680      	mov	r8, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4d7e:	eb18 0507 	adds.w	r5, r8, r7
   b4d82:	d007      	beq.n	b4d94 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x60>
   b4d84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4d86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4d88:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4d8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4d8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4d90:	6833      	ldr	r3, [r6, #0]
   b4d92:	602b      	str	r3, [r5, #0]
   b4d94:	46c4      	mov	ip, r8
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4d96:	46d6      	mov	lr, sl
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
   b4d98:	45f3      	cmp	fp, lr
   b4d9a:	d015      	beq.n	b4dc8 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
   b4d9c:	f1bc 0f00 	cmp.w	ip, #0
   b4da0:	d009      	beq.n	b4db6 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
   b4da2:	4676      	mov	r6, lr
   b4da4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4da6:	4665      	mov	r5, ip
   b4da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4daa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4dae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4db2:	6833      	ldr	r3, [r6, #0]
   b4db4:	602b      	str	r3, [r5, #0]
   b4db6:	f10e 0e34 	add.w	lr, lr, #52	; 0x34
   b4dba:	f10c 0c34 	add.w	ip, ip, #52	; 0x34
   b4dbe:	e7eb      	b.n	b4d98 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x64>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4dc0:	461c      	mov	r4, r3
   b4dc2:	e7d7      	b.n	b4d74 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x40>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4dc4:	46a0      	mov	r8, r4
   b4dc6:	e7da      	b.n	b4d7e <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   b4dc8:	f8df e08c 	ldr.w	lr, [pc, #140]	; b4e58 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x124>
   b4dcc:	08bf      	lsrs	r7, r7, #2
   b4dce:	fb0e f707 	mul.w	r7, lr, r7
   b4dd2:	2334      	movs	r3, #52	; 0x34
   b4dd4:	f027 4740 	bic.w	r7, r7, #3221225472	; 0xc0000000
   b4dd8:	435f      	muls	r7, r3
   b4dda:	eb0a 0b07 	add.w	fp, sl, r7
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   b4dde:	441f      	add	r7, r3
   b4de0:	eb08 0307 	add.w	r3, r8, r7
   b4de4:	9300      	str	r3, [sp, #0]
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b4de6:	469c      	mov	ip, r3
   b4de8:	465f      	mov	r7, fp
      for (; __first != __last; ++__first, (void)++__cur)
   b4dea:	9b01      	ldr	r3, [sp, #4]
   b4dec:	429f      	cmp	r7, r3
   b4dee:	f10c 0c34 	add.w	ip, ip, #52	; 0x34
   b4df2:	d00c      	beq.n	b4e0e <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xda>
   b4df4:	463e      	mov	r6, r7
   b4df6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4df8:	f1ac 0534 	sub.w	r5, ip, #52	; 0x34
   b4dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4dfe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4e00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4e02:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4e04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4e06:	6833      	ldr	r3, [r6, #0]
   b4e08:	602b      	str	r3, [r5, #0]
   b4e0a:	3734      	adds	r7, #52	; 0x34
   b4e0c:	e7ed      	b.n	b4dea <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb6>
   b4e0e:	eba7 070b 	sub.w	r7, r7, fp
   b4e12:	08bf      	lsrs	r7, r7, #2
   b4e14:	fb0e fe07 	mul.w	lr, lr, r7
   b4e18:	9b00      	ldr	r3, [sp, #0]
   b4e1a:	f02e 4e40 	bic.w	lr, lr, #3221225472	; 0xc0000000
   b4e1e:	2734      	movs	r7, #52	; 0x34
   b4e20:	fb07 370e 	mla	r7, r7, lr, r3
	if (__p)
   b4e24:	f1ba 0f00 	cmp.w	sl, #0
   b4e28:	d006      	beq.n	b4e38 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x104>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b4e2a:	f8d9 1008 	ldr.w	r1, [r9, #8]
	::operator delete(__p
   b4e2e:	4650      	mov	r0, sl
   b4e30:	eba1 010a 	sub.w	r1, r1, sl
   b4e34:	f7ff f933 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b4e38:	2034      	movs	r0, #52	; 0x34
   b4e3a:	fb00 8404 	mla	r4, r0, r4, r8
      this->_M_impl._M_finish = __new_finish;
   b4e3e:	e9c9 8700 	strd	r8, r7, [r9]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b4e42:	f8c9 4008 	str.w	r4, [r9, #8]
    }
   b4e46:	b003      	add	sp, #12
   b4e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4e4c:	c4ec4ec5 	.word	0xc4ec4ec5
   b4e50:	02762762 	.word	0x02762762
   b4e54:	000c05dd 	.word	0x000c05dd
   b4e58:	04ec4ec5 	.word	0x04ec4ec5

000b4e5c <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b4e5c:	b570      	push	{r4, r5, r6, lr}
   b4e5e:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b4e60:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b4e64:	4299      	cmp	r1, r3
      push_back(const value_type& __x)
   b4e66:	4606      	mov	r6, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b4e68:	d00e      	beq.n	b4e88 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x2c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4e6a:	b149      	cbz	r1, b4e80 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x24>
   b4e6c:	4615      	mov	r5, r2
   b4e6e:	460c      	mov	r4, r1
   b4e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4e7c:	682b      	ldr	r3, [r5, #0]
   b4e7e:	6023      	str	r3, [r4, #0]
	    ++this->_M_impl._M_finish;
   b4e80:	6873      	ldr	r3, [r6, #4]
   b4e82:	3334      	adds	r3, #52	; 0x34
   b4e84:	6073      	str	r3, [r6, #4]
      }
   b4e86:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
   b4e88:	f7ff ff54 	bl	b4d34 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b4e8c:	e7fb      	b.n	b4e86 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x2a>
	...

000b4e90 <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4e94:	ed2d 8b02 	vpush	{d8}
   b4e98:	b0a3      	sub	sp, #140	; 0x8c
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b4e9a:	7883      	ldrb	r3, [r0, #2]
   b4e9c:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4e9e:	af06      	add	r7, sp, #24
   b4ea0:	4604      	mov	r4, r0
   b4ea2:	460e      	mov	r6, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b4ea4:	d127      	bne.n	b4ef6 <_Z14processCommandPKchb+0x66>
   b4ea6:	78c3      	ldrb	r3, [r0, #3]
   b4ea8:	2b42      	cmp	r3, #66	; 0x42
   b4eaa:	f040 8174 	bne.w	b5196 <_Z14processCommandPKchb+0x306>
        }
   b4eae:	466b      	mov	r3, sp
   b4eb0:	ee08 3a10 	vmov	s16, r3
        uint8_t rxBotID = atoi(rxIDBuf);
   b4eb4:	f107 0010 	add.w	r0, r7, #16
        rxIDBuf[0] = command[1];
   b4eb8:	7863      	ldrb	r3, [r4, #1]
   b4eba:	743b      	strb	r3, [r7, #16]
      : _M_current(__i) { }
   b4ebc:	f8df 8378 	ldr.w	r8, [pc, #888]	; b5238 <_Z14processCommandPKchb+0x3a8>
        uint8_t rxBotID = atoi(rxIDBuf);
   b4ec0:	f009 f995 	bl	be1ee <atoi>
   b4ec4:	e9d8 9b00 	ldrd	r9, fp, [r8]
   b4ec8:	b2c3      	uxtb	r3, r0
   b4eca:	60fb      	str	r3, [r7, #12]
        int index = 0;
   b4ecc:	f04f 0a00 	mov.w	sl, #0
        bool newBot = true;
   b4ed0:	2301      	movs	r3, #1
        for(WaterBot w: WaterBots){
   b4ed2:	45d9      	cmp	r9, fp
   b4ed4:	d015      	beq.n	b4f02 <_Z14processCommandPKchb+0x72>
            if(rxBotID == w.botNum){
   b4ed6:	f899 2001 	ldrb.w	r2, [r9, #1]
   b4eda:	68f9      	ldr	r1, [r7, #12]
   b4edc:	428a      	cmp	r2, r1
   b4ede:	d105      	bne.n	b4eec <_Z14processCommandPKchb+0x5c>
                TargetWB = &WaterBots.at(index);
   b4ee0:	4651      	mov	r1, sl
   b4ee2:	4640      	mov	r0, r8
   b4ee4:	f7ff fd7c 	bl	b49e0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
                newBot = false;
   b4ee8:	2300      	movs	r3, #0
                TargetWB = &WaterBots.at(index);
   b4eea:	4605      	mov	r5, r0
            index++;
   b4eec:	f10a 0a01 	add.w	sl, sl, #1
	++_M_current;
   b4ef0:	f109 0934 	add.w	r9, r9, #52	; 0x34
	return *this;
   b4ef4:	e7ed      	b.n	b4ed2 <_Z14processCommandPKchb+0x42>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b4ef6:	2b43      	cmp	r3, #67	; 0x43
   b4ef8:	f040 814d 	bne.w	b5196 <_Z14processCommandPKchb+0x306>
   b4efc:	78c3      	ldrb	r3, [r0, #3]
   b4efe:	2b43      	cmp	r3, #67	; 0x43
   b4f00:	e7d3      	b.n	b4eaa <_Z14processCommandPKchb+0x1a>
        if(newBot){
   b4f02:	b173      	cbz	r3, b4f22 <_Z14processCommandPKchb+0x92>
            WaterBot newWaterbot;
   b4f04:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   b4f08:	f7ff fbb6 	bl	b4678 <_ZN8WaterBotC1Ev>
            newWaterbot.botNum = rxBotID;
   b4f0c:	68fb      	ldr	r3, [r7, #12]
            WaterBots.push_back(newWaterbot);
   b4f0e:	48ca      	ldr	r0, [pc, #808]	; (b5238 <_Z14processCommandPKchb+0x3a8>)
            newWaterbot.botNum = rxBotID;
   b4f10:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
            WaterBots.push_back(newWaterbot);
   b4f14:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   b4f18:	f7ff ffa0 	bl	b4e5c <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      { return __normal_iterator(_M_current - __n); }
   b4f1c:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b4f20:	3d34      	subs	r5, #52	; 0x34
        char dataStr[strlen(command)-8];
   b4f22:	4620      	mov	r0, r4
   b4f24:	f009 fa53 	bl	be3ce <strlen>
   b4f28:	3801      	subs	r0, #1
   b4f2a:	f020 0007 	bic.w	r0, r0, #7
   b4f2e:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b4f32:	4620      	mov	r0, r4
   b4f34:	f009 fa4b 	bl	be3ce <strlen>
        char dataStr[strlen(command)-8];
   b4f38:	f10d 0918 	add.w	r9, sp, #24
        dataStr[strlen(command)-9] = '\0';
   b4f3c:	4448      	add	r0, r9
   b4f3e:	f04f 0a00 	mov.w	sl, #0
   b4f42:	f800 ac09 	strb.w	sl, [r0, #-9]
        checkStr[0] = command[strlen(command)-2];
   b4f46:	4620      	mov	r0, r4
        cmdStr[3] = '\0';
   b4f48:	f887 a01b 	strb.w	sl, [r7, #27]
        checkStr[0] = command[strlen(command)-2];
   b4f4c:	f009 fa3f 	bl	be3ce <strlen>
   b4f50:	4420      	add	r0, r4
   b4f52:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b4f56:	753b      	strb	r3, [r7, #20]
        checkStr[1] = command[strlen(command)-1];
   b4f58:	4620      	mov	r0, r4
   b4f5a:	f009 fa38 	bl	be3ce <strlen>
   b4f5e:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4f60:	4651      	mov	r1, sl
        checkStr[1] = command[strlen(command)-1];
   b4f62:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b4f66:	757b      	strb	r3, [r7, #21]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4f68:	2210      	movs	r2, #16
   b4f6a:	f107 0014 	add.w	r0, r7, #20
        checkStr[2] = '\0';
   b4f6e:	f887 a016 	strb.w	sl, [r7, #22]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4f72:	f00a f919 	bl	bf1a8 <strtol>
   b4f76:	4683      	mov	fp, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b4f78:	fa5f fb8b 	uxtb.w	fp, fp
   b4f7c:	f008 f8ae 	bl	bd0dc <_Z16_fetch_usbserialv>
   b4f80:	49ae      	ldr	r1, [pc, #696]	; (b523c <_Z14processCommandPKchb+0x3ac>)
   b4f82:	465b      	mov	r3, fp
   b4f84:	465a      	mov	r2, fp
   b4f86:	f7ff f9d7 	bl	b4338 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4f8a:	f04f 0a04 	mov.w	sl, #4
   b4f8e:	4620      	mov	r0, r4
   b4f90:	f009 fa1d 	bl	be3ce <strlen>
   b4f94:	3802      	subs	r0, #2
   b4f96:	4582      	cmp	sl, r0
   b4f98:	d216      	bcs.n	b4fc8 <_Z14processCommandPKchb+0x138>
            if(i < 7) cmdStr[i-4] = command[i];
   b4f9a:	f1ba 0f06 	cmp.w	sl, #6
   b4f9e:	bf9b      	ittet	ls
   b4fa0:	f107 0370 	addls.w	r3, r7, #112	; 0x70
   b4fa4:	4453      	addls	r3, sl
            else dataStr[i-7] = command[i];
   b4fa6:	eb09 030a 	addhi.w	r3, r9, sl
            if(i < 7) cmdStr[i-4] = command[i];
   b4faa:	f814 200a 	ldrbls.w	r2, [r4, sl]
            else dataStr[i-7] = command[i];
   b4fae:	bf8c      	ite	hi
   b4fb0:	f814 200a 	ldrbhi.w	r2, [r4, sl]
            if(i < 7) cmdStr[i-4] = command[i];
   b4fb4:	f803 2c5c 	strbls.w	r2, [r3, #-92]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4fb8:	f10a 0a01 	add.w	sl, sl, #1
            else dataStr[i-7] = command[i];
   b4fbc:	bf88      	it	hi
   b4fbe:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4fc2:	fa5f fa8a 	uxtb.w	sl, sl
   b4fc6:	e7e2      	b.n	b4f8e <_Z14processCommandPKchb+0xfe>
        if(checksum != strlen(command)-2){
   b4fc8:	4558      	cmp	r0, fp
   b4fca:	d02b      	beq.n	b5024 <_Z14processCommandPKchb+0x194>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b4fcc:	f008 f886 	bl	bd0dc <_Z16_fetch_usbserialv>
   b4fd0:	4605      	mov	r5, r0
   b4fd2:	4620      	mov	r0, r4
   b4fd4:	f009 f9fb 	bl	be3ce <strlen>
   b4fd8:	465b      	mov	r3, fp
   b4fda:	1e82      	subs	r2, r0, #2
   b4fdc:	4998      	ldr	r1, [pc, #608]	; (b5240 <_Z14processCommandPKchb+0x3b0>)
   b4fde:	4628      	mov	r0, r5
   b4fe0:	f7ff f9aa 	bl	b4338 <_ZN5Print8printlnfEPKcz>
            logMessage("[WARN] Warning, checksum does not match!");
   b4fe4:	4897      	ldr	r0, [pc, #604]	; (b5244 <_Z14processCommandPKchb+0x3b4>)
   b4fe6:	f7ff fb27 	bl	b4638 <_Z10logMessagePKc>
            Serial.println("Warning, checksum does not match");
   b4fea:	f008 f877 	bl	bd0dc <_Z16_fetch_usbserialv>
   b4fee:	4996      	ldr	r1, [pc, #600]	; (b5248 <_Z14processCommandPKchb+0x3b8>)
   b4ff0:	f007 fc7f 	bl	bc8f2 <_ZN5Print7printlnEPKc>
            if((command[1] >= '0' && command[1] <= '9') || command[1] == 'C'){
   b4ff4:	7863      	ldrb	r3, [r4, #1]
   b4ff6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b4ffa:	2a09      	cmp	r2, #9
   b4ffc:	d902      	bls.n	b5004 <_Z14processCommandPKchb+0x174>
   b4ffe:	2b43      	cmp	r3, #67	; 0x43
   b5000:	f040 80c6 	bne.w	b5190 <_Z14processCommandPKchb+0x300>
                rxBotNum[0] = command[0];
   b5004:	7822      	ldrb	r2, [r4, #0]
   b5006:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
                rxBotNum[1] = command[1];
   b500a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
                sprintf(errBuf,"CC%2snak%3s",rxBotNum,cmdStr);
   b500e:	498f      	ldr	r1, [pc, #572]	; (b524c <_Z14processCommandPKchb+0x3bc>)
   b5010:	488f      	ldr	r0, [pc, #572]	; (b5250 <_Z14processCommandPKchb+0x3c0>)
   b5012:	f107 0318 	add.w	r3, r7, #24
   b5016:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   b501a:	f004 fbc5 	bl	b97a8 <sprintf>
                errModeReply = mode;
   b501e:	4b8d      	ldr	r3, [pc, #564]	; (b5254 <_Z14processCommandPKchb+0x3c4>)
            errCmdMode = mode;
   b5020:	701e      	strb	r6, [r3, #0]
   b5022:	e0b5      	b.n	b5190 <_Z14processCommandPKchb+0x300>
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   b5024:	498c      	ldr	r1, [pc, #560]	; (b5258 <_Z14processCommandPKchb+0x3c8>)
   b5026:	f107 0018 	add.w	r0, r7, #24
   b502a:	f009 f9a0 	bl	be36e <strcmp>
   b502e:	2800      	cmp	r0, #0
   b5030:	f000 80ae 	beq.w	b5190 <_Z14processCommandPKchb+0x300>
        else if(!strcmp(cmdStr,"sup")){
   b5034:	4989      	ldr	r1, [pc, #548]	; (b525c <_Z14processCommandPKchb+0x3cc>)
   b5036:	f107 0018 	add.w	r0, r7, #24
   b503a:	f009 f998 	bl	be36e <strcmp>
   b503e:	2800      	cmp	r0, #0
   b5040:	d14f      	bne.n	b50e2 <_Z14processCommandPKchb+0x252>
      : _M_current(__i) { }
   b5042:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b5046:	f8d8 4000 	ldr.w	r4, [r8]
   b504a:	60bb      	str	r3, [r7, #8]
            for(WaterBot &w: WaterBots){
   b504c:	68bb      	ldr	r3, [r7, #8]
   b504e:	42a3      	cmp	r3, r4
   b5050:	d047      	beq.n	b50e2 <_Z14processCommandPKchb+0x252>
                if(rxBotID == w.botNum){
   b5052:	7863      	ldrb	r3, [r4, #1]
   b5054:	68fa      	ldr	r2, [r7, #12]
   b5056:	4293      	cmp	r3, r2
   b5058:	d141      	bne.n	b50de <_Z14processCommandPKchb+0x24e>
                    sscanf(dataStr,"%u %u %s %s",&battpct,&statflags,testLat,testLon);
   b505a:	f107 0a3c 	add.w	sl, r7, #60	; 0x3c
   b505e:	f107 0b30 	add.w	fp, r7, #48	; 0x30
   b5062:	497f      	ldr	r1, [pc, #508]	; (b5260 <_Z14processCommandPKchb+0x3d0>)
   b5064:	f8cd a004 	str.w	sl, [sp, #4]
   b5068:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   b506c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   b5070:	f8cd b000 	str.w	fp, [sp]
   b5074:	4648      	mov	r0, r9
   b5076:	f004 fb9f 	bl	b97b8 <sscanf>
                    latRX = atof(testLat);
   b507a:	4658      	mov	r0, fp
   b507c:	f009 f8b4 	bl	be1e8 <atof>
                    lonRX = atof(testLon);
   b5080:	4650      	mov	r0, sl
                    latRX = atof(testLat);
   b5082:	ed87 0b00 	vstr	d0, [r7]
                    lonRX = atof(testLon);
   b5086:	f009 f8af 	bl	be1e8 <atof>
                    w.battPercent = battpct;
   b508a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
   b508e:	70a1      	strb	r1, [r4, #2]
                    w.LTEAvail = statflags & 1;
   b5090:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
   b5094:	f001 0001 	and.w	r0, r1, #1
   b5098:	7120      	strb	r0, [r4, #4]
                    w.XBeeAvail = (statflags >> 1) & 1;
   b509a:	f3c1 0040 	ubfx	r0, r1, #1, #1
   b509e:	7160      	strb	r0, [r4, #5]
                    w.BLEAvail = (statflags >> 2) & 1;
   b50a0:	f3c1 0080 	ubfx	r0, r1, #2, #1
                    latRX = atof(testLat);
   b50a4:	e9d7 2300 	ldrd	r2, r3, [r7]
                    w.BLEAvail = (statflags >> 2) & 1;
   b50a8:	70e0      	strb	r0, [r4, #3]
                    w.offloading = (statflags >> 3) & 1;
   b50aa:	f3c1 00c0 	ubfx	r0, r1, #3, #1
   b50ae:	7260      	strb	r0, [r4, #9]
                    w.driveMode = (statflags >> 4) & 3;
   b50b0:	f3c1 1001 	ubfx	r0, r1, #4, #2
   b50b4:	71a0      	strb	r0, [r4, #6]
                    w.lowBatt = (statflags >> 6) & 1;
   b50b6:	f3c1 1080 	ubfx	r0, r1, #6, #1
                    w.dataRecording = (statflags >> 7) & 1;
   b50ba:	09c9      	lsrs	r1, r1, #7
                    w.lowBatt = (statflags >> 6) & 1;
   b50bc:	71e0      	strb	r0, [r4, #7]
                    w.dataRecording = (statflags >> 7) & 1;
   b50be:	7221      	strb	r1, [r4, #8]
                    latRX = atof(testLat);
   b50c0:	4610      	mov	r0, r2
   b50c2:	4619      	mov	r1, r3
                    lonRX = atof(testLon);
   b50c4:	ec5b ab10 	vmov	sl, fp, d0
                    latRX = atof(testLat);
   b50c8:	f009 f81a 	bl	be100 <__aeabi_d2f>
                    lonRX = atof(testLon);
   b50cc:	4659      	mov	r1, fp
                    latRX = atof(testLat);
   b50ce:	6160      	str	r0, [r4, #20]
                    lonRX = atof(testLon);
   b50d0:	4650      	mov	r0, sl
   b50d2:	f009 f815 	bl	be100 <__aeabi_d2f>
   b50d6:	61a0      	str	r0, [r4, #24]
                    logMessage("Status Update!");
   b50d8:	4862      	ldr	r0, [pc, #392]	; (b5264 <_Z14processCommandPKchb+0x3d4>)
   b50da:	f7ff faad 	bl	b4638 <_Z10logMessagePKc>
      operator++() _GLIBCXX_NOEXCEPT
   b50de:	3434      	adds	r4, #52	; 0x34
	return *this;
   b50e0:	e7b4      	b.n	b504c <_Z14processCommandPKchb+0x1bc>
        if(!strcmp(cmdStr,"sns")){
   b50e2:	4961      	ldr	r1, [pc, #388]	; (b5268 <_Z14processCommandPKchb+0x3d8>)
   b50e4:	f107 0018 	add.w	r0, r7, #24
   b50e8:	f009 f941 	bl	be36e <strcmp>
   b50ec:	2800      	cmp	r0, #0
   b50ee:	d158      	bne.n	b51a2 <_Z14processCommandPKchb+0x312>
            sscanf(dataStr,"%s %s %d %d %d %d %d",GPSLatstr,GPSLonstr,&do_in,&pH_in,&cond_in,&mcond_in,&temp_in);
   b50f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   b50f4:	9304      	str	r3, [sp, #16]
   b50f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b50fa:	9303      	str	r3, [sp, #12]
   b50fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
   b5100:	9302      	str	r3, [sp, #8]
   b5102:	f107 0320 	add.w	r3, r7, #32
   b5106:	9301      	str	r3, [sp, #4]
   b5108:	f107 031c 	add.w	r3, r7, #28
   b510c:	4957      	ldr	r1, [pc, #348]	; (b526c <_Z14processCommandPKchb+0x3dc>)
   b510e:	9300      	str	r3, [sp, #0]
   b5110:	f107 0230 	add.w	r2, r7, #48	; 0x30
   b5114:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   b5118:	4648      	mov	r0, r9
   b511a:	f004 fb4d 	bl	b97b8 <sscanf>
            TargetWB->DO = ((float)do_in)/1000.0;
   b511e:	edd7 7a07 	vldr	s15, [r7, #28]
   b5122:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   b5126:	eddf 7a52 	vldr	s15, [pc, #328]	; b5270 <_Z14processCommandPKchb+0x3e0>
   b512a:	eec7 6a27 	vdiv.f32	s13, s14, s15
            TargetWB->pH = ((float)pH_in)/1000.0;
   b512e:	ed97 7a08 	vldr	s14, [r7, #32]
            TargetWB->DO = ((float)do_in)/1000.0;
   b5132:	edc5 6a09 	vstr	s13, [r5, #36]	; 0x24
            TargetWB->pH = ((float)pH_in)/1000.0;
   b5136:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b513a:	eec7 6a27 	vdiv.f32	s13, s14, s15
            TargetWB->Cond = ((float)cond_in)/1000.0;
   b513e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
            TargetWB->pH = ((float)pH_in)/1000.0;
   b5142:	edc5 6a07 	vstr	s13, [r5, #28]
            TargetWB->Cond = ((float)cond_in)/1000.0;
   b5146:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b514a:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b514e:	edc5 6a0a 	vstr	s13, [r5, #40]	; 0x28
            TargetWB->MCond = ((float)mcond_in)/1000.0;
   b5152:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
   b5156:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b515a:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b515e:	edc5 6a0b 	vstr	s13, [r5, #44]	; 0x2c
            TargetWB->temp = ((float)temp_in)/1000.0;
   b5162:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
   b5166:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b516a:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b516e:	edc5 6a08 	vstr	s13, [r5, #32]
            Serial.printlnf("Bot #: %d Temp: %f", TargetWB->botNum,TargetWB->temp);
   b5172:	f007 ffb3 	bl	bd0dc <_Z16_fetch_usbserialv>
   b5176:	786a      	ldrb	r2, [r5, #1]
   b5178:	60fa      	str	r2, [r7, #12]
   b517a:	4604      	mov	r4, r0
   b517c:	6a28      	ldr	r0, [r5, #32]
   b517e:	f008 fcad 	bl	bdadc <__aeabi_f2d>
   b5182:	e9cd 0100 	strd	r0, r1, [sp]
   b5186:	68fa      	ldr	r2, [r7, #12]
   b5188:	493a      	ldr	r1, [pc, #232]	; (b5274 <_Z14processCommandPKchb+0x3e4>)
   b518a:	4620      	mov	r0, r4
   b518c:	f7ff f8d4 	bl	b4338 <_ZN5Print8printlnfEPKcz>
   b5190:	ee18 3a10 	vmov	r3, s16
   b5194:	469d      	mov	sp, r3
}
   b5196:	3774      	adds	r7, #116	; 0x74
   b5198:	46bd      	mov	sp, r7
   b519a:	ecbd 8b02 	vpop	{d8}
   b519e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(!strcmp(cmdStr,"nak")){  //Acknowledgement for XBee and BLE
   b51a2:	4935      	ldr	r1, [pc, #212]	; (b5278 <_Z14processCommandPKchb+0x3e8>)
   b51a4:	f107 0018 	add.w	r0, r7, #24
   b51a8:	f009 f8e1 	bl	be36e <strcmp>
   b51ac:	b930      	cbnz	r0, b51bc <_Z14processCommandPKchb+0x32c>
            strncpy(errCmdStr,dataStr,3);
   b51ae:	4833      	ldr	r0, [pc, #204]	; (b527c <_Z14processCommandPKchb+0x3ec>)
   b51b0:	2203      	movs	r2, #3
   b51b2:	4649      	mov	r1, r9
   b51b4:	f009 f927 	bl	be406 <strncpy>
            errCmdMode = mode;
   b51b8:	4b31      	ldr	r3, [pc, #196]	; (b5280 <_Z14processCommandPKchb+0x3f0>)
   b51ba:	e731      	b.n	b5020 <_Z14processCommandPKchb+0x190>
        else if(!strcmp(cmdStr,"hwd")){  //Hello World! - Received startup pairing message
   b51bc:	4931      	ldr	r1, [pc, #196]	; (b5284 <_Z14processCommandPKchb+0x3f4>)
   b51be:	f107 0018 	add.w	r0, r7, #24
   b51c2:	f009 f8d4 	bl	be36e <strcmp>
   b51c6:	2800      	cmp	r0, #0
   b51c8:	d164      	bne.n	b5294 <_Z14processCommandPKchb+0x404>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b51ca:	e9d8 3000 	ldrd	r3, r0, [r8]
            bool newBot = true;
   b51ce:	2201      	movs	r2, #1
            for(WaterBot w: WaterBots){
   b51d0:	4283      	cmp	r3, r0
   b51d2:	d006      	beq.n	b51e2 <_Z14processCommandPKchb+0x352>
                if(rxBotID == w.botNum) newBot = false;
   b51d4:	7859      	ldrb	r1, [r3, #1]
   b51d6:	68fc      	ldr	r4, [r7, #12]
   b51d8:	3334      	adds	r3, #52	; 0x34
   b51da:	42a1      	cmp	r1, r4
   b51dc:	bf08      	it	eq
   b51de:	2200      	moveq	r2, #0
	return *this;
   b51e0:	e7f6      	b.n	b51d0 <_Z14processCommandPKchb+0x340>
            if(newBot){
   b51e2:	b1ca      	cbz	r2, b5218 <_Z14processCommandPKchb+0x388>
                Serial.println("Found a new water bot ID");
   b51e4:	f007 ff7a 	bl	bd0dc <_Z16_fetch_usbserialv>
   b51e8:	4927      	ldr	r1, [pc, #156]	; (b5288 <_Z14processCommandPKchb+0x3f8>)
   b51ea:	f007 fb82 	bl	bc8f2 <_ZN5Print7printlnEPKc>
                WaterBot newWaterbot;
   b51ee:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   b51f2:	f7ff fa41 	bl	b4678 <_ZN8WaterBotC1Ev>
                if(mode == 1) newWaterbot.BLEAvail = true;
   b51f6:	2e01      	cmp	r6, #1
   b51f8:	d112      	bne.n	b5220 <_Z14processCommandPKchb+0x390>
   b51fa:	f887 603f 	strb.w	r6, [r7, #63]	; 0x3f
                newWaterbot.botNum = rxBotID;
   b51fe:	68fb      	ldr	r3, [r7, #12]
                WaterBots.push_back(newWaterbot);
   b5200:	480d      	ldr	r0, [pc, #52]	; (b5238 <_Z14processCommandPKchb+0x3a8>)
                newWaterbot.botNum = rxBotID;
   b5202:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
                WaterBots.push_back(newWaterbot);
   b5206:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   b520a:	f7ff fe27 	bl	b4e5c <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
                PairBots.push_back(newWaterbot);
   b520e:	481f      	ldr	r0, [pc, #124]	; (b528c <_Z14processCommandPKchb+0x3fc>)
   b5210:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   b5214:	f7ff fe22 	bl	b4e5c <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
            botPairRx = true;
   b5218:	4b1d      	ldr	r3, [pc, #116]	; (b5290 <_Z14processCommandPKchb+0x400>)
   b521a:	2201      	movs	r2, #1
   b521c:	701a      	strb	r2, [r3, #0]
   b521e:	e7b7      	b.n	b5190 <_Z14processCommandPKchb+0x300>
                else if(mode == 2) newWaterbot.XBeeAvail = true;
   b5220:	2e02      	cmp	r6, #2
   b5222:	f04f 0301 	mov.w	r3, #1
   b5226:	d102      	bne.n	b522e <_Z14processCommandPKchb+0x39e>
   b5228:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
   b522c:	e7e7      	b.n	b51fe <_Z14processCommandPKchb+0x36e>
                else if(mode == 3) newWaterbot.LTEAvail = true;
   b522e:	2e03      	cmp	r6, #3
   b5230:	bf08      	it	eq
   b5232:	f887 3040 	strbeq.w	r3, [r7, #64]	; 0x40
   b5236:	e7e2      	b.n	b51fe <_Z14processCommandPKchb+0x36e>
   b5238:	2003dcb4 	.word	0x2003dcb4
   b523c:	000c05f7 	.word	0x000c05f7
   b5240:	000c060c 	.word	0x000c060c
   b5244:	000c0629 	.word	0x000c0629
   b5248:	000c0652 	.word	0x000c0652
   b524c:	000c04e1 	.word	0x000c04e1
   b5250:	2003dd54 	.word	0x2003dd54
   b5254:	2003dd67 	.word	0x2003dd67
   b5258:	000c0673 	.word	0x000c0673
   b525c:	000c0677 	.word	0x000c0677
   b5260:	000c067b 	.word	0x000c067b
   b5264:	000c0687 	.word	0x000c0687
   b5268:	000c0696 	.word	0x000c0696
   b526c:	000c069a 	.word	0x000c069a
   b5270:	447a0000 	.word	0x447a0000
   b5274:	000c06af 	.word	0x000c06af
   b5278:	000c06c2 	.word	0x000c06c2
   b527c:	2003dd64 	.word	0x2003dd64
   b5280:	2003dd63 	.word	0x2003dd63
   b5284:	000c06c6 	.word	0x000c06c6
   b5288:	000c06ca 	.word	0x000c06ca
   b528c:	2003dc98 	.word	0x2003dc98
   b5290:	2003dd4c 	.word	0x2003dd4c
        else if(!strcmp(cmdStr,"pts")){
   b5294:	4910      	ldr	r1, [pc, #64]	; (b52d8 <_Z14processCommandPKchb+0x448>)
   b5296:	f107 0018 	add.w	r0, r7, #24
   b529a:	f009 f868 	bl	be36e <strcmp>
   b529e:	2800      	cmp	r0, #0
   b52a0:	f47f af76 	bne.w	b5190 <_Z14processCommandPKchb+0x300>
   b52a4:	4c0d      	ldr	r4, [pc, #52]	; (b52dc <_Z14processCommandPKchb+0x44c>)
            if(!logFile.isOpen()){
   b52a6:	7c23      	ldrb	r3, [r4, #16]
   b52a8:	b983      	cbnz	r3, b52cc <_Z14processCommandPKchb+0x43c>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b52aa:	490d      	ldr	r1, [pc, #52]	; (b52e0 <_Z14processCommandPKchb+0x450>)
   b52ac:	f244 2202 	movw	r2, #16898	; 0x4202
   b52b0:	f104 0010 	add.w	r0, r4, #16
   b52b4:	f7ff f8d0 	bl	b4458 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b52b8:	490a      	ldr	r1, [pc, #40]	; (b52e4 <_Z14processCommandPKchb+0x454>)
   b52ba:	464a      	mov	r2, r9
   b52bc:	4620      	mov	r0, r4
   b52be:	f7ff f83b 	bl	b4338 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b52c2:	f104 0010 	add.w	r0, r4, #16
   b52c6:	f001 fc85 	bl	b6bd4 <_ZN7FatFile5closeEv>
   b52ca:	e761      	b.n	b5190 <_Z14processCommandPKchb+0x300>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b52cc:	4905      	ldr	r1, [pc, #20]	; (b52e4 <_Z14processCommandPKchb+0x454>)
   b52ce:	464a      	mov	r2, r9
   b52d0:	4620      	mov	r0, r4
   b52d2:	f7ff f831 	bl	b4338 <_ZN5Print8printlnfEPKcz>
        if(sendAck){    //Transmit out acknowledgement if needed
   b52d6:	e75b      	b.n	b5190 <_Z14processCommandPKchb+0x300>
   b52d8:	000c06e3 	.word	0x000c06e3
   b52dc:	2003ddc0 	.word	0x2003ddc0
   b52e0:	2003dd68 	.word	0x2003dd68
   b52e4:	000c06e7 	.word	0x000c06e7

000b52e8 <_Z14dataLTEHandlerPKcS0_>:
void dataLTEHandler(const char *event, const char *data){
   b52e8:	b510      	push	{r4, lr}
   b52ea:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b52ec:	2200      	movs	r2, #0
   b52ee:	2104      	movs	r1, #4
   b52f0:	4620      	mov	r0, r4
   b52f2:	f7ff fdcd 	bl	b4e90 <_Z14processCommandPKchb>
    if(logMessages){
   b52f6:	4b0b      	ldr	r3, [pc, #44]	; (b5324 <_Z14dataLTEHandlerPKcS0_+0x3c>)
   b52f8:	781b      	ldrb	r3, [r3, #0]
   b52fa:	b193      	cbz	r3, b5322 <_Z14dataLTEHandlerPKcS0_+0x3a>
   b52fc:	480a      	ldr	r0, [pc, #40]	; (b5328 <_Z14dataLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b52fe:	7c03      	ldrb	r3, [r0, #16]
   b5300:	b92b      	cbnz	r3, b530e <_Z14dataLTEHandlerPKcS0_+0x26>
   b5302:	490a      	ldr	r1, [pc, #40]	; (b532c <_Z14dataLTEHandlerPKcS0_+0x44>)
   b5304:	f244 2202 	movw	r2, #16898	; 0x4202
   b5308:	3010      	adds	r0, #16
   b530a:	f7ff f8a5 	bl	b4458 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b530e:	4622      	mov	r2, r4
   b5310:	4907      	ldr	r1, [pc, #28]	; (b5330 <_Z14dataLTEHandlerPKcS0_+0x48>)
   b5312:	4805      	ldr	r0, [pc, #20]	; (b5328 <_Z14dataLTEHandlerPKcS0_+0x40>)
   b5314:	f7ff f810 	bl	b4338 <_ZN5Print8printlnfEPKcz>
}
   b5318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b531c:	4805      	ldr	r0, [pc, #20]	; (b5334 <_Z14dataLTEHandlerPKcS0_+0x4c>)
   b531e:	f001 bc59 	b.w	b6bd4 <_ZN7FatFile5closeEv>
}
   b5322:	bd10      	pop	{r4, pc}
   b5324:	2003ddf4 	.word	0x2003ddf4
   b5328:	2003ddc0 	.word	0x2003ddc0
   b532c:	2003dd68 	.word	0x2003dd68
   b5330:	000c070a 	.word	0x000c070a
   b5334:	2003ddd0 	.word	0x2003ddd0

000b5338 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b5338:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b533a:	f101 0308 	add.w	r3, r1, #8
   b533e:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b5342:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b5344:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b5348:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b534a:	460a      	mov	r2, r1
   b534c:	4601      	mov	r1, r0
   b534e:	4668      	mov	r0, sp
   b5350:	f008 ff61 	bl	be216 <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b5354:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b5358:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b535a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b535e:	b113      	cbz	r3, b5366 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b5360:	2300      	movs	r3, #0
   b5362:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.print("New BT Command: ");
   b5366:	f007 feb9 	bl	bd0dc <_Z16_fetch_usbserialv>
   b536a:	4911      	ldr	r1, [pc, #68]	; (b53b0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>)
   b536c:	f007 faae 	bl	bc8cc <_ZN5Print5printEPKc>
    Serial.println(btBuf);
   b5370:	f007 feb4 	bl	bd0dc <_Z16_fetch_usbserialv>
   b5374:	4629      	mov	r1, r5
   b5376:	f007 fabc 	bl	bc8f2 <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b537a:	2201      	movs	r2, #1
   b537c:	4611      	mov	r1, r2
   b537e:	4628      	mov	r0, r5
   b5380:	f7ff fd86 	bl	b4e90 <_Z14processCommandPKchb>
    if(logMessages){
   b5384:	4b0b      	ldr	r3, [pc, #44]	; (b53b4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   b5386:	781b      	ldrb	r3, [r3, #0]
   b5388:	b183      	cbz	r3, b53ac <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>
   b538a:	480b      	ldr	r0, [pc, #44]	; (b53b8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b538c:	7c03      	ldrb	r3, [r0, #16]
   b538e:	b92b      	cbnz	r3, b539c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>
   b5390:	490a      	ldr	r1, [pc, #40]	; (b53bc <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84>)
   b5392:	f244 2202 	movw	r2, #16898	; 0x4202
   b5396:	3010      	adds	r0, #16
   b5398:	f7ff f85e 	bl	b4458 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b539c:	4908      	ldr	r1, [pc, #32]	; (b53c0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   b539e:	4806      	ldr	r0, [pc, #24]	; (b53b8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
   b53a0:	462a      	mov	r2, r5
   b53a2:	f7fe ffc9 	bl	b4338 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b53a6:	4807      	ldr	r0, [pc, #28]	; (b53c4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b53a8:	f001 fc14 	bl	b6bd4 <_ZN7FatFile5closeEv>
}
   b53ac:	46bd      	mov	sp, r7
   b53ae:	bdb0      	pop	{r4, r5, r7, pc}
   b53b0:	000c072a 	.word	0x000c072a
   b53b4:	2003ddf4 	.word	0x2003ddf4
   b53b8:	2003ddc0 	.word	0x2003ddc0
   b53bc:	2003dd68 	.word	0x2003dd68
   b53c0:	000c073b 	.word	0x000c073b
   b53c4:	2003ddd0 	.word	0x2003ddd0

000b53c8 <_Z10RPiHandlerv>:
void RPiHandler(){
   b53c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if(logMessages){
   b53cc:	f8df 90e0 	ldr.w	r9, [pc, #224]	; b54b0 <_Z10RPiHandlerv+0xe8>
   b53d0:	4d34      	ldr	r5, [pc, #208]	; (b54a4 <_Z10RPiHandlerv+0xdc>)
void RPiHandler(){
   b53d2:	b089      	sub	sp, #36	; 0x24
   b53d4:	af00      	add	r7, sp, #0
    while(Serial.available()){
   b53d6:	f007 fe81 	bl	bd0dc <_Z16_fetch_usbserialv>
   b53da:	6803      	ldr	r3, [r0, #0]
   b53dc:	691b      	ldr	r3, [r3, #16]
   b53de:	4798      	blx	r3
   b53e0:	2800      	cmp	r0, #0
   b53e2:	d05b      	beq.n	b549c <_Z10RPiHandlerv+0xd4>
                logFile.printlnf("[INFO] Received Raspberry Pi Message: %s",data);
   b53e4:	f8df 80cc 	ldr.w	r8, [pc, #204]	; b54b4 <_Z10RPiHandlerv+0xec>
        while(Serial.available()){
   b53e8:	f007 fe78 	bl	bd0dc <_Z16_fetch_usbserialv>
   b53ec:	6803      	ldr	r3, [r0, #0]
   b53ee:	691b      	ldr	r3, [r3, #16]
   b53f0:	4798      	blx	r3
   b53f2:	2800      	cmp	r0, #0
   b53f4:	d0ef      	beq.n	b53d6 <_Z10RPiHandlerv+0xe>
            String data = Serial.readStringUntil('\n');
   b53f6:	f007 fe71 	bl	bd0dc <_Z16_fetch_usbserialv>
   b53fa:	220a      	movs	r2, #10
   b53fc:	4601      	mov	r1, r0
   b53fe:	4638      	mov	r0, r7
   b5400:	f007 fbbc 	bl	bcb7c <_ZN6Stream15readStringUntilEc>
            char buffer[data.length()];
   b5404:	68bb      	ldr	r3, [r7, #8]
   b5406:	3307      	adds	r3, #7
   b5408:	f023 0307 	bic.w	r3, r3, #7
        }
   b540c:	466e      	mov	r6, sp
            char buffer[data.length()];
   b540e:	ebad 0d03 	sub.w	sp, sp, r3
   b5412:	46ea      	mov	sl, sp
   b5414:	2300      	movs	r3, #0
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b5416:	68b9      	ldr	r1, [r7, #8]
   b5418:	fa1f fb83 	uxth.w	fp, r3
            for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b541c:	458b      	cmp	fp, r1
   b541e:	f103 0401 	add.w	r4, r3, #1
   b5422:	d207      	bcs.n	b5434 <_Z10RPiHandlerv+0x6c>
   b5424:	4659      	mov	r1, fp
   b5426:	4638      	mov	r0, r7
   b5428:	f007 fcc2 	bl	bcdb0 <_ZNK6String6charAtEj>
   b542c:	4623      	mov	r3, r4
   b542e:	f80a 000b 	strb.w	r0, [sl, fp]
   b5432:	e7f0      	b.n	b5416 <_Z10RPiHandlerv+0x4e>
            if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b5434:	2901      	cmp	r1, #1
   b5436:	d90a      	bls.n	b544e <_Z10RPiHandlerv+0x86>
   b5438:	3901      	subs	r1, #1
   b543a:	4638      	mov	r0, r7
   b543c:	f007 fcb8 	bl	bcdb0 <_ZNK6String6charAtEj>
   b5440:	280d      	cmp	r0, #13
   b5442:	bf01      	itttt	eq
   b5444:	68bb      	ldreq	r3, [r7, #8]
   b5446:	4453      	addeq	r3, sl
   b5448:	2200      	moveq	r2, #0
   b544a:	f803 2c01 	strbeq.w	r2, [r3, #-1]
            processCommand(buffer,3,true);
   b544e:	2201      	movs	r2, #1
   b5450:	2103      	movs	r1, #3
   b5452:	4650      	mov	r0, sl
   b5454:	f7ff fd1c 	bl	b4e90 <_Z14processCommandPKchb>
            if(logMessages){
   b5458:	f899 3000 	ldrb.w	r3, [r9]
   b545c:	b1cb      	cbz	r3, b5492 <_Z10RPiHandlerv+0xca>
                if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b545e:	7c2b      	ldrb	r3, [r5, #16]
   b5460:	b92b      	cbnz	r3, b546e <_Z10RPiHandlerv+0xa6>
   b5462:	4911      	ldr	r1, [pc, #68]	; (b54a8 <_Z10RPiHandlerv+0xe0>)
   b5464:	4811      	ldr	r0, [pc, #68]	; (b54ac <_Z10RPiHandlerv+0xe4>)
   b5466:	f244 2202 	movw	r2, #16898	; 0x4202
   b546a:	f7fe fff5 	bl	b4458 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[INFO] Received Raspberry Pi Message: %s",data);
   b546e:	4639      	mov	r1, r7
   b5470:	f107 0010 	add.w	r0, r7, #16
   b5474:	f007 fc30 	bl	bccd8 <_ZN6StringC1ERKS_>
   b5478:	f107 0210 	add.w	r2, r7, #16
   b547c:	4641      	mov	r1, r8
   b547e:	4628      	mov	r0, r5
   b5480:	f7fe ff5a 	bl	b4338 <_ZN5Print8printlnfEPKcz>
   b5484:	f107 0010 	add.w	r0, r7, #16
   b5488:	f007 fb90 	bl	bcbac <_ZN6StringD1Ev>
                logFile.close();
   b548c:	4807      	ldr	r0, [pc, #28]	; (b54ac <_Z10RPiHandlerv+0xe4>)
   b548e:	f001 fba1 	bl	b6bd4 <_ZN7FatFile5closeEv>
            String data = Serial.readStringUntil('\n');
   b5492:	4638      	mov	r0, r7
   b5494:	f007 fb8a 	bl	bcbac <_ZN6StringD1Ev>
   b5498:	46b5      	mov	sp, r6
        while(Serial.available()){
   b549a:	e7a5      	b.n	b53e8 <_Z10RPiHandlerv+0x20>
}
   b549c:	3724      	adds	r7, #36	; 0x24
   b549e:	46bd      	mov	sp, r7
   b54a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b54a4:	2003ddc0 	.word	0x2003ddc0
   b54a8:	2003dd68 	.word	0x2003dd68
   b54ac:	2003ddd0 	.word	0x2003ddd0
   b54b0:	2003ddf4 	.word	0x2003ddf4
   b54b4:	000c075b 	.word	0x000c075b

000b54b8 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b54b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b54bc:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b55ac <_Z11XBeeHandlerv+0xf4>
        if(logMessages){
   b54c0:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b55b0 <_Z11XBeeHandlerv+0xf8>
   b54c4:	4d35      	ldr	r5, [pc, #212]	; (b559c <_Z11XBeeHandlerv+0xe4>)
void XBeeHandler(){  
   b54c6:	b089      	sub	sp, #36	; 0x24
   b54c8:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b54ca:	f007 ffb3 	bl	bd434 <_Z22__fetch_global_Serial1v>
   b54ce:	6803      	ldr	r3, [r0, #0]
   b54d0:	691b      	ldr	r3, [r3, #16]
   b54d2:	4798      	blx	r3
   b54d4:	2800      	cmp	r0, #0
   b54d6:	d05c      	beq.n	b5592 <_Z11XBeeHandlerv+0xda>
        String data = Serial1.readStringUntil('\n');
   b54d8:	f007 ffac 	bl	bd434 <_Z22__fetch_global_Serial1v>
   b54dc:	220a      	movs	r2, #10
   b54de:	4601      	mov	r1, r0
   b54e0:	4638      	mov	r0, r7
   b54e2:	f007 fb4b 	bl	bcb7c <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b54e6:	68bb      	ldr	r3, [r7, #8]
   b54e8:	3307      	adds	r3, #7
   b54ea:	f023 0307 	bic.w	r3, r3, #7
    }
   b54ee:	466e      	mov	r6, sp
        char buffer[data.length()];
   b54f0:	ebad 0d03 	sub.w	sp, sp, r3
   b54f4:	46ea      	mov	sl, sp
   b54f6:	2300      	movs	r3, #0
   b54f8:	68b9      	ldr	r1, [r7, #8]
   b54fa:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b54fe:	458b      	cmp	fp, r1
   b5500:	f103 0401 	add.w	r4, r3, #1
   b5504:	d207      	bcs.n	b5516 <_Z11XBeeHandlerv+0x5e>
   b5506:	4659      	mov	r1, fp
   b5508:	4638      	mov	r0, r7
   b550a:	f007 fc51 	bl	bcdb0 <_ZNK6String6charAtEj>
   b550e:	4623      	mov	r3, r4
   b5510:	f80a 000b 	strb.w	r0, [sl, fp]
   b5514:	e7f0      	b.n	b54f8 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b5516:	2901      	cmp	r1, #1
   b5518:	d90a      	bls.n	b5530 <_Z11XBeeHandlerv+0x78>
   b551a:	3901      	subs	r1, #1
   b551c:	4638      	mov	r0, r7
   b551e:	f007 fc47 	bl	bcdb0 <_ZNK6String6charAtEj>
   b5522:	280d      	cmp	r0, #13
   b5524:	bf01      	itttt	eq
   b5526:	68bb      	ldreq	r3, [r7, #8]
   b5528:	4453      	addeq	r3, sl
   b552a:	2200      	moveq	r2, #0
   b552c:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        processCommand(buffer,2,true);
   b5530:	2201      	movs	r2, #1
   b5532:	2102      	movs	r1, #2
   b5534:	4650      	mov	r0, sl
   b5536:	f7ff fcab 	bl	b4e90 <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   b553a:	f007 fdcf 	bl	bd0dc <_Z16_fetch_usbserialv>
   b553e:	4641      	mov	r1, r8
   b5540:	f007 f9d7 	bl	bc8f2 <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b5544:	f007 fdca 	bl	bd0dc <_Z16_fetch_usbserialv>
   b5548:	6839      	ldr	r1, [r7, #0]
   b554a:	f007 f9d2 	bl	bc8f2 <_ZN5Print7printlnEPKc>
        if(logMessages){
   b554e:	f899 3000 	ldrb.w	r3, [r9]
   b5552:	b1cb      	cbz	r3, b5588 <_Z11XBeeHandlerv+0xd0>
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5554:	7c2b      	ldrb	r3, [r5, #16]
   b5556:	b92b      	cbnz	r3, b5564 <_Z11XBeeHandlerv+0xac>
   b5558:	4911      	ldr	r1, [pc, #68]	; (b55a0 <_Z11XBeeHandlerv+0xe8>)
   b555a:	4812      	ldr	r0, [pc, #72]	; (b55a4 <_Z11XBeeHandlerv+0xec>)
   b555c:	f244 2202 	movw	r2, #16898	; 0x4202
   b5560:	f7fe ff7a 	bl	b4458 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b5564:	4639      	mov	r1, r7
   b5566:	f107 0010 	add.w	r0, r7, #16
   b556a:	f007 fbb5 	bl	bccd8 <_ZN6StringC1ERKS_>
   b556e:	490e      	ldr	r1, [pc, #56]	; (b55a8 <_Z11XBeeHandlerv+0xf0>)
   b5570:	f107 0210 	add.w	r2, r7, #16
   b5574:	4628      	mov	r0, r5
   b5576:	f7fe fedf 	bl	b4338 <_ZN5Print8printlnfEPKcz>
   b557a:	f107 0010 	add.w	r0, r7, #16
   b557e:	f007 fb15 	bl	bcbac <_ZN6StringD1Ev>
            logFile.close();
   b5582:	4808      	ldr	r0, [pc, #32]	; (b55a4 <_Z11XBeeHandlerv+0xec>)
   b5584:	f001 fb26 	bl	b6bd4 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b5588:	4638      	mov	r0, r7
   b558a:	f007 fb0f 	bl	bcbac <_ZN6StringD1Ev>
   b558e:	46b5      	mov	sp, r6
    while(Serial1.available()){
   b5590:	e79b      	b.n	b54ca <_Z11XBeeHandlerv+0x12>
}
   b5592:	3724      	adds	r7, #36	; 0x24
   b5594:	46bd      	mov	sp, r7
   b5596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b559a:	bf00      	nop
   b559c:	2003ddc0 	.word	0x2003ddc0
   b55a0:	2003dd68 	.word	0x2003dd68
   b55a4:	2003ddd0 	.word	0x2003ddd0
   b55a8:	000c0796 	.word	0x000c0796
   b55ac:	000c0784 	.word	0x000c0784
   b55b0:	2003ddf4 	.word	0x2003ddf4

000b55b4 <_Z11WaterBotSimh>:
void WaterBotSim(uint8_t count){
   b55b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b55b8:	4d1e      	ldr	r5, [pc, #120]	; (b5634 <_Z11WaterBotSimh+0x80>)
        WaterBots.push_back(simBot);
   b55ba:	f8df a078 	ldr.w	sl, [pc, #120]	; b5634 <_Z11WaterBotSimh+0x80>
   b55be:	e9d5 2300 	ldrd	r2, r3, [r5]
   b55c2:	1a9b      	subs	r3, r3, r2
   b55c4:	4a1c      	ldr	r2, [pc, #112]	; (b5638 <_Z11WaterBotSimh+0x84>)
   b55c6:	109b      	asrs	r3, r3, #2
   b55c8:	4353      	muls	r3, r2
    if(count + WaterBots.size() > 10) count = 10-WaterBots.size();
   b55ca:	b2dc      	uxtb	r4, r3
   b55cc:	4403      	add	r3, r0
   b55ce:	2b0a      	cmp	r3, #10
   b55d0:	bf84      	itt	hi
   b55d2:	f1c4 000a 	rsbhi	r0, r4, #10
   b55d6:	b2c0      	uxtbhi	r0, r0
    uint8_t botloop = count+WaterBots.size();
   b55d8:	4420      	add	r0, r4
void WaterBotSim(uint8_t count){
   b55da:	b08e      	sub	sp, #56	; 0x38
    uint8_t botloop = count+WaterBots.size();
   b55dc:	b2c4      	uxtb	r4, r0
   b55de:	2700      	movs	r7, #0
        simBot.LTEAvail = false;
   b55e0:	f44f 7980 	mov.w	r9, #256	; 0x100
   b55e4:	fa5f f887 	uxtb.w	r8, r7
    for(uint8_t temp = 0; temp < botloop; temp++){
   b55e8:	4544      	cmp	r4, r8
   b55ea:	d91f      	bls.n	b562c <_Z11WaterBotSimh+0x78>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b55ec:	e9d5 3100 	ldrd	r3, r1, [r5]
        int dupeBot = false;
   b55f0:	2600      	movs	r6, #0
        for(WaterBot wb: WaterBots){
   b55f2:	4299      	cmp	r1, r3
   b55f4:	d005      	beq.n	b5602 <_Z11WaterBotSimh+0x4e>
            if(wb.botNum == temp) dupeBot = true;
   b55f6:	785a      	ldrb	r2, [r3, #1]
   b55f8:	3334      	adds	r3, #52	; 0x34
   b55fa:	4542      	cmp	r2, r8
   b55fc:	bf08      	it	eq
   b55fe:	2601      	moveq	r6, #1
	return *this;
   b5600:	e7f7      	b.n	b55f2 <_Z11WaterBotSimh+0x3e>
        if(dupeBot) continue;
   b5602:	b98e      	cbnz	r6, b5628 <_Z11WaterBotSimh+0x74>
        WaterBot simBot;
   b5604:	a801      	add	r0, sp, #4
   b5606:	f7ff f837 	bl	b4678 <_ZN8WaterBotC1Ev>
        simBot.battPercent = random(100);
   b560a:	2064      	movs	r0, #100	; 0x64
        simBot.botNum = temp;
   b560c:	f88d 8005 	strb.w	r8, [sp, #5]
        simBot.BLEAvail = false;
   b5610:	f88d 6007 	strb.w	r6, [sp, #7]
        simBot.LTEAvail = false;
   b5614:	f8ad 9008 	strh.w	r9, [sp, #8]
        simBot.battPercent = random(100);
   b5618:	f007 f9c4 	bl	bc9a4 <_Z6randomi>
        WaterBots.push_back(simBot);
   b561c:	a901      	add	r1, sp, #4
        simBot.battPercent = random(100);
   b561e:	f88d 0006 	strb.w	r0, [sp, #6]
        WaterBots.push_back(simBot);
   b5622:	4650      	mov	r0, sl
   b5624:	f7ff fc1a 	bl	b4e5c <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
    for(uint8_t temp = 0; temp < botloop; temp++){
   b5628:	3701      	adds	r7, #1
   b562a:	e7db      	b.n	b55e4 <_Z11WaterBotSimh+0x30>
}
   b562c:	b00e      	add	sp, #56	; 0x38
   b562e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5632:	bf00      	nop
   b5634:	2003dcb4 	.word	0x2003dcb4
   b5638:	c4ec4ec5 	.word	0xc4ec4ec5

000b563c <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b563c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5640:	e9d0 8900 	ldrd	r8, r9, [r0]
   b5644:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
   b5646:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b564a:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
   b564e:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   b5652:	4607      	mov	r7, r0
   b5654:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5656:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   b565a:	d102      	bne.n	b5662 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b565c:	4820      	ldr	r0, [pc, #128]	; (b56e0 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
   b565e:	f007 ff12 	bl	bd486 <_ZSt20__throw_length_errorPKc>
   b5662:	2c01      	cmp	r4, #1
   b5664:	4622      	mov	r2, r4
   b5666:	bf38      	it	cc
   b5668:	2201      	movcc	r2, #1
   b566a:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b566c:	eba1 0508 	sub.w	r5, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5670:	d231      	bcs.n	b56d6 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5672:	b394      	cbz	r4, b56da <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
   b5674:	429c      	cmp	r4, r3
   b5676:	bf28      	it	cs
   b5678:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b567a:	00e0      	lsls	r0, r4, #3
   b567c:	f7fe fd0b 	bl	b4096 <_Znwj>
   b5680:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5682:	1973      	adds	r3, r6, r5
   b5684:	bf1c      	itt	ne
   b5686:	e9db 0100 	ldrdne	r0, r1, [fp]
   b568a:	e9c3 0100 	strdne	r0, r1, [r3]
      if (__count > 0)
   b568e:	2d00      	cmp	r5, #0
   b5690:	dd04      	ble.n	b569c <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x60>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b5692:	462a      	mov	r2, r5
   b5694:	4641      	mov	r1, r8
   b5696:	4630      	mov	r0, r6
   b5698:	f008 fdcb 	bl	be232 <memmove>
      ptrdiff_t __count = __last - __first;
   b569c:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
   b56a0:	3508      	adds	r5, #8
      if (__count > 0)
   b56a2:	f1b9 0f00 	cmp.w	r9, #0
   b56a6:	4435      	add	r5, r6
   b56a8:	dd04      	ble.n	b56b4 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b56aa:	464a      	mov	r2, r9
   b56ac:	4651      	mov	r1, sl
   b56ae:	4628      	mov	r0, r5
   b56b0:	f008 fdb1 	bl	be216 <memcpy>
      return __result + __count;
   b56b4:	444d      	add	r5, r9
	if (__p)
   b56b6:	f1b8 0f00 	cmp.w	r8, #0
   b56ba:	d005      	beq.n	b56c8 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
   b56bc:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b56be:	4640      	mov	r0, r8
   b56c0:	eba1 0108 	sub.w	r1, r1, r8
   b56c4:	f7fe fceb 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b56c8:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   b56cc:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b56d0:	60bc      	str	r4, [r7, #8]
    }
   b56d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b56d6:	461c      	mov	r4, r3
   b56d8:	e7cf      	b.n	b567a <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b56da:	4626      	mov	r6, r4
   b56dc:	e7d1      	b.n	b5682 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
   b56de:	bf00      	nop
   b56e0:	000c05dd 	.word	0x000c05dd

000b56e4 <_Z7BLEScani>:
void BLEScan(int BotNumber){
   b56e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b56e8:	b0a5      	sub	sp, #148	; 0x94
   b56ea:	4606      	mov	r6, r0
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   b56ec:	f004 fdc6 	bl	ba27c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b56f0:	497a      	ldr	r1, [pc, #488]	; (b58dc <_Z7BLEScani+0x1f8>)
   b56f2:	2214      	movs	r2, #20
   b56f4:	f004 feba 	bl	ba46c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
	if (count > 0) {
   b56f8:	4680      	mov	r8, r0
   b56fa:	2800      	cmp	r0, #0
   b56fc:	f000 80eb 	beq.w	b58d6 <_Z7BLEScani+0x1f2>
    const BleAddress& address() const {
        return address_;
    }

    const BleAdvertisingData& advertisingData() const {
        return advertisingData_;
   b5700:	f8df b1d8 	ldr.w	fp, [pc, #472]	; b58dc <_Z7BLEScani+0x1f8>
		for (uint8_t ii = 0; ii < count; ii++) {
   b5704:	2400      	movs	r4, #0
			BleUuid foundServiceUuid;
   b5706:	eb04 09c4 	add.w	r9, r4, r4, lsl #3
   b570a:	ea4f 0989 	mov.w	r9, r9, lsl #2
   b570e:	f109 0708 	add.w	r7, r9, #8
   b5712:	a80a      	add	r0, sp, #40	; 0x28
   b5714:	445f      	add	r7, fp
   b5716:	f004 fa15 	bl	b9b44 <_ZN8particle7BleUuidC1Ev>
			size_t svcCount = scanResults[ii].advertisingData().serviceUUID(&foundServiceUuid, 1);
   b571a:	2201      	movs	r2, #1
   b571c:	a90a      	add	r1, sp, #40	; 0x28
   b571e:	4638      	mov	r0, r7
   b5720:	f005 fd6c 	bl	bb1fc <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
            if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   b5724:	4682      	mov	sl, r0
   b5726:	2800      	cmp	r0, #0
   b5728:	d056      	beq.n	b57d8 <_Z7BLEScani+0xf4>
   b572a:	496d      	ldr	r1, [pc, #436]	; (b58e0 <_Z7BLEScani+0x1fc>)
   b572c:	a80a      	add	r0, sp, #40	; 0x28
   b572e:	f004 fa64 	bl	b9bfa <_ZNK8particle7BleUuideqERKS0_>
   b5732:	4605      	mov	r5, r0
   b5734:	2800      	cmp	r0, #0
   b5736:	d04f      	beq.n	b57d8 <_Z7BLEScani+0xf4>
                scanResults[ii].advertisingData().customData(BLECustomData,CUSTOM_DATA_LEN);
   b5738:	2208      	movs	r2, #8
   b573a:	a908      	add	r1, sp, #32
   b573c:	4638      	mov	r0, r7
   b573e:	f004 fbb9 	bl	b9eb4 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
                if(BotNumber == -2){
   b5742:	1cb2      	adds	r2, r6, #2
   b5744:	d153      	bne.n	b57ee <_Z7BLEScani+0x10a>
                    Serial.printlnf("Found Bot #: %d %d %d %d %d %d %d %d, services: %d",BLECustomData[0],BLECustomData[1],BLECustomData[2],BLECustomData[3],BLECustomData[4],BLECustomData[5],BLECustomData[6],BLECustomData[7], svcCount);
   b5746:	f007 fcc9 	bl	bd0dc <_Z16_fetch_usbserialv>
   b574a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   b574e:	9305      	str	r3, [sp, #20]
   b5750:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   b5754:	9304      	str	r3, [sp, #16]
   b5756:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   b575a:	9303      	str	r3, [sp, #12]
   b575c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b5760:	9302      	str	r3, [sp, #8]
   b5762:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
      : _M_current(__i) { }
   b5766:	4f5f      	ldr	r7, [pc, #380]	; (b58e4 <_Z7BLEScani+0x200>)
   b5768:	9301      	str	r3, [sp, #4]
   b576a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   b576e:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b5772:	495d      	ldr	r1, [pc, #372]	; (b58e8 <_Z7BLEScani+0x204>)
   b5774:	9300      	str	r3, [sp, #0]
   b5776:	f8cd a018 	str.w	sl, [sp, #24]
   b577a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   b577e:	f7fe fddb 	bl	b4338 <_ZN5Print8printlnfEPKcz>
   b5782:	687b      	ldr	r3, [r7, #4]
                        if(BLECustomData[0] == p.botNum){
   b5784:	f89d 1020 	ldrb.w	r1, [sp, #32]
   b5788:	683a      	ldr	r2, [r7, #0]
                    for(PairBot p: BLEPair){
   b578a:	4293      	cmp	r3, r2
   b578c:	d005      	beq.n	b579a <_Z7BLEScani+0xb6>
                        if(BLECustomData[0] == p.botNum){
   b578e:	f812 0b08 	ldrb.w	r0, [r2], #8
                            newBot = false;
   b5792:	4288      	cmp	r0, r1
   b5794:	bf08      	it	eq
   b5796:	2500      	moveq	r5, #0
	return *this;
   b5798:	e7f7      	b.n	b578a <_Z7BLEScani+0xa6>
                    if(newBot){
   b579a:	b1ed      	cbz	r5, b57d8 <_Z7BLEScani+0xf4>
    const BleAdvertisingData& scanResponse() const {
        return scanResponse_;
    }

    int8_t rssi() const {
        return rssi_;
   b579c:	2224      	movs	r2, #36	; 0x24
   b579e:	fb02 b204 	mla	r2, r2, r4, fp
                        NewBot.botNum = BLECustomData[0];
   b57a2:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
                        NewBot.rssi = scanResults[ii].rssi();
   b57a6:	f992 2020 	ldrsb.w	r2, [r2, #32]
   b57aa:	9218      	str	r2, [sp, #96]	; 0x60
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b57ac:	68ba      	ldr	r2, [r7, #8]
   b57ae:	4293      	cmp	r3, r2
   b57b0:	d017      	beq.n	b57e2 <_Z7BLEScani+0xfe>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b57b2:	b11b      	cbz	r3, b57bc <_Z7BLEScani+0xd8>
   b57b4:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
   b57b8:	e883 0003 	stmia.w	r3, {r0, r1}
	    ++this->_M_impl._M_finish;
   b57bc:	687b      	ldr	r3, [r7, #4]
   b57be:	3308      	adds	r3, #8
   b57c0:	607b      	str	r3, [r7, #4]
                        Serial.printlnf("Found new bot: %d", BLECustomData[0],BLEPair.size());
   b57c2:	f007 fc8b 	bl	bd0dc <_Z16_fetch_usbserialv>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b57c6:	e9d7 2300 	ldrd	r2, r3, [r7]
   b57ca:	1a9b      	subs	r3, r3, r2
   b57cc:	4947      	ldr	r1, [pc, #284]	; (b58ec <_Z7BLEScani+0x208>)
   b57ce:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b57d2:	10db      	asrs	r3, r3, #3
   b57d4:	f7fe fdb0 	bl	b4338 <_ZN5Print8printlnfEPKcz>
		for (uint8_t ii = 0; ii < count; ii++) {
   b57d8:	3401      	adds	r4, #1
   b57da:	b2e4      	uxtb	r4, r4
   b57dc:	4544      	cmp	r4, r8
   b57de:	d392      	bcc.n	b5706 <_Z7BLEScani+0x22>
   b57e0:	e079      	b.n	b58d6 <_Z7BLEScani+0x1f2>
	  _M_realloc_insert(end(), __x);
   b57e2:	4840      	ldr	r0, [pc, #256]	; (b58e4 <_Z7BLEScani+0x200>)
   b57e4:	aa17      	add	r2, sp, #92	; 0x5c
   b57e6:	4619      	mov	r1, r3
   b57e8:	f7ff ff28 	bl	b563c <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   b57ec:	e7e9      	b.n	b57c2 <_Z7BLEScani+0xde>
                if(BotNumber == -1 || BotNumber == BLECustomData[0]){   //Check if a particular bot number was specified
   b57ee:	1c73      	adds	r3, r6, #1
   b57f0:	d003      	beq.n	b57fa <_Z7BLEScani+0x116>
   b57f2:	f89d 3020 	ldrb.w	r3, [sp, #32]
   b57f6:	42b3      	cmp	r3, r6
   b57f8:	d1ee      	bne.n	b57d8 <_Z7BLEScani+0xf4>
                    peer = BLE.connect(scanResults[ii].address());
   b57fa:	f004 fd3f 	bl	ba27c <_ZN8particle14BleLocalDevice11getInstanceEv>
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b57fe:	4d3c      	ldr	r5, [pc, #240]	; (b58f0 <_Z7BLEScani+0x20c>)
   b5800:	4601      	mov	r1, r0
   b5802:	2301      	movs	r3, #1
   b5804:	eb0b 0209 	add.w	r2, fp, r9
   b5808:	a817      	add	r0, sp, #92	; 0x5c
   b580a:	f006 f92f 	bl	bba6c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   b580e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b5810:	9c18      	ldr	r4, [sp, #96]	; 0x60
   b5812:	602b      	str	r3, [r5, #0]
	if (__tmp != _M_pi)
   b5814:	686b      	ldr	r3, [r5, #4]
   b5816:	429c      	cmp	r4, r3
   b5818:	d008      	beq.n	b582c <_Z7BLEScani+0x148>
	    if (__tmp != 0)
   b581a:	b114      	cbz	r4, b5822 <_Z7BLEScani+0x13e>
    { ++_M_use_count; }
   b581c:	6863      	ldr	r3, [r4, #4]
   b581e:	3301      	adds	r3, #1
   b5820:	6063      	str	r3, [r4, #4]
	    if (_M_pi != 0)
   b5822:	6868      	ldr	r0, [r5, #4]
   b5824:	b108      	cbz	r0, b582a <_Z7BLEScani+0x146>
	      _M_pi->_M_release();
   b5826:	f7fe fdd3 	bl	b43d0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b582a:	606c      	str	r4, [r5, #4]
   b582c:	a817      	add	r0, sp, #92	; 0x5c
   b582e:	f004 fe94 	bl	ba55a <_ZN8particle13BlePeerDeviceD1Ev>
				    if (peer.connected()) {
   b5832:	482f      	ldr	r0, [pc, #188]	; (b58f0 <_Z7BLEScani+0x20c>)
   b5834:	f004 fc94 	bl	ba160 <_ZNK8particle13BlePeerDevice9connectedEv>
   b5838:	4604      	mov	r4, r0
   b583a:	2800      	cmp	r0, #0
   b583c:	d04b      	beq.n	b58d6 <_Z7BLEScani+0x1f2>
                        meshPair = false;
   b583e:	4b2d      	ldr	r3, [pc, #180]	; (b58f4 <_Z7BLEScani+0x210>)
      : _M_current(__i) { }
   b5840:	4d2d      	ldr	r5, [pc, #180]	; (b58f8 <_Z7BLEScani+0x214>)
   b5842:	2200      	movs	r2, #0
   b5844:	701a      	strb	r2, [r3, #0]
                        startConnect = true;
   b5846:	4b2d      	ldr	r3, [pc, #180]	; (b58fc <_Z7BLEScani+0x218>)
   b5848:	2601      	movs	r6, #1
                        scanResults[ii].advertisingData().customData(bufName, BLE_MAX_ADV_DATA_LEN);
   b584a:	221f      	movs	r2, #31
   b584c:	a90f      	add	r1, sp, #60	; 0x3c
   b584e:	4638      	mov	r0, r7
                        startConnect = true;
   b5850:	701e      	strb	r6, [r3, #0]
                        scanResults[ii].advertisingData().customData(bufName, BLE_MAX_ADV_DATA_LEN);
   b5852:	f004 fb2f 	bl	b9eb4 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
					    peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   b5856:	4a2a      	ldr	r2, [pc, #168]	; (b5900 <_Z7BLEScani+0x21c>)
   b5858:	492a      	ldr	r1, [pc, #168]	; (b5904 <_Z7BLEScani+0x220>)
   b585a:	4825      	ldr	r0, [pc, #148]	; (b58f0 <_Z7BLEScani+0x20c>)
   b585c:	f005 fd9a 	bl	bb394 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
					    peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
   b5860:	4a29      	ldr	r2, [pc, #164]	; (b5908 <_Z7BLEScani+0x224>)
   b5862:	492a      	ldr	r1, [pc, #168]	; (b590c <_Z7BLEScani+0x228>)
   b5864:	4822      	ldr	r0, [pc, #136]	; (b58f0 <_Z7BLEScani+0x20c>)
   b5866:	f005 fd95 	bl	bb394 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        peer.getCharacteristicByUUID(peerOffloadCharacteristic, offldUuid);
   b586a:	4a29      	ldr	r2, [pc, #164]	; (b5910 <_Z7BLEScani+0x22c>)
   b586c:	4929      	ldr	r1, [pc, #164]	; (b5914 <_Z7BLEScani+0x230>)
   b586e:	4820      	ldr	r0, [pc, #128]	; (b58f0 <_Z7BLEScani+0x20c>)
   b5870:	f005 fd90 	bl	bb394 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
						Serial.printlnf("Connected to Bot %d",bufName[0]);
   b5874:	f007 fc32 	bl	bd0dc <_Z16_fetch_usbserialv>
   b5878:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
   b587c:	4926      	ldr	r1, [pc, #152]	; (b5918 <_Z7BLEScani+0x234>)
   b587e:	f7fe fd5b 	bl	b4338 <_ZN5Print8printlnfEPKcz>
                        WaterBot newWaterbot;
   b5882:	a817      	add	r0, sp, #92	; 0x5c
   b5884:	f7fe fef8 	bl	b4678 <_ZN8WaterBotC1Ev>
                        newWaterbot.botNum = bufName[0];
   b5888:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
                        PairBots.push_back(newWaterbot);
   b588c:	4823      	ldr	r0, [pc, #140]	; (b591c <_Z7BLEScani+0x238>)
                        newWaterbot.botNum = bufName[0];
   b588e:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
                        PairBots.push_back(newWaterbot);
   b5892:	a917      	add	r1, sp, #92	; 0x5c
                        newWaterbot.BLEAvail = true;
   b5894:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
                        PairBots.push_back(newWaterbot);
   b5898:	f7ff fae0 	bl	b4e5c <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
   b589c:	6869      	ldr	r1, [r5, #4]
                            if(bufName[0] == w.botNum){
   b589e:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
   b58a2:	682b      	ldr	r3, [r5, #0]
                                BLEBot = &w;
   b58a4:	481e      	ldr	r0, [pc, #120]	; (b5920 <_Z7BLEScani+0x23c>)
                        for(WaterBot &w: WaterBots){
   b58a6:	428b      	cmp	r3, r1
   b58a8:	d007      	beq.n	b58ba <_Z7BLEScani+0x1d6>
                            if(bufName[0] == w.botNum){
   b58aa:	785f      	ldrb	r7, [r3, #1]
   b58ac:	4297      	cmp	r7, r2
                                w.BLEAvail = true;
   b58ae:	bf02      	ittt	eq
   b58b0:	70de      	strbeq	r6, [r3, #3]
                                newBot = false;
   b58b2:	2400      	moveq	r4, #0
                                BLEBot = &w;
   b58b4:	6003      	streq	r3, [r0, #0]
   b58b6:	3334      	adds	r3, #52	; 0x34
	return *this;
   b58b8:	e7f5      	b.n	b58a6 <_Z7BLEScani+0x1c2>
                        if(newBot){
   b58ba:	b164      	cbz	r4, b58d6 <_Z7BLEScani+0x1f2>
                            Serial.println("Found a new water bot ID");
   b58bc:	f007 fc0e 	bl	bd0dc <_Z16_fetch_usbserialv>
   b58c0:	4918      	ldr	r1, [pc, #96]	; (b5924 <_Z7BLEScani+0x240>)
   b58c2:	f007 f816 	bl	bc8f2 <_ZN5Print7printlnEPKc>
                            WaterBots.push_back(newWaterbot);
   b58c6:	480c      	ldr	r0, [pc, #48]	; (b58f8 <_Z7BLEScani+0x214>)
   b58c8:	a917      	add	r1, sp, #92	; 0x5c
   b58ca:	f7ff fac7 	bl	b4e5c <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      { return __normal_iterator(_M_current - __n); }
   b58ce:	686b      	ldr	r3, [r5, #4]
                            BLEBot = &WaterBots.back();
   b58d0:	4a13      	ldr	r2, [pc, #76]	; (b5920 <_Z7BLEScani+0x23c>)
   b58d2:	3b34      	subs	r3, #52	; 0x34
   b58d4:	6013      	str	r3, [r2, #0]
}
   b58d6:	b025      	add	sp, #148	; 0x94
   b58d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b58dc:	2003dee0 	.word	0x2003dee0
   b58e0:	2003dcc0 	.word	0x2003dcc0
   b58e4:	2003dc78 	.word	0x2003dc78
   b58e8:	000c07b7 	.word	0x000c07b7
   b58ec:	000c07ea 	.word	0x000c07ea
   b58f0:	2003debc 	.word	0x2003debc
   b58f4:	2003ddf6 	.word	0x2003ddf6
   b58f8:	2003dcb4 	.word	0x2003dcb4
   b58fc:	2003e634 	.word	0x2003e634
   b5900:	2003dce8 	.word	0x2003dce8
   b5904:	2003ded4 	.word	0x2003ded4
   b5908:	2003dcd4 	.word	0x2003dcd4
   b590c:	2003decc 	.word	0x2003decc
   b5910:	2003dd00 	.word	0x2003dd00
   b5914:	2003dec4 	.word	0x2003dec4
   b5918:	000c07fc 	.word	0x000c07fc
   b591c:	2003dc98 	.word	0x2003dc98
   b5920:	2003dc74 	.word	0x2003dc74
   b5924:	000c06ca 	.word	0x000c06ca

000b5928 <_Z13DataOffloaderh>:
void DataOffloader(uint8_t bot_id){
   b5928:	b530      	push	{r4, r5, lr}
    if (!logDir.open("/")) {
   b592a:	4938      	ldr	r1, [pc, #224]	; (b5a0c <_Z13DataOffloaderh+0xe4>)
void DataOffloader(uint8_t bot_id){
   b592c:	b087      	sub	sp, #28
   b592e:	4605      	mov	r5, r0
    if (!logDir.open("/")) {
   b5930:	2200      	movs	r2, #0
   b5932:	4837      	ldr	r0, [pc, #220]	; (b5a10 <_Z13DataOffloaderh+0xe8>)
   b5934:	f7fe fd90 	bl	b4458 <_ZN7FatFile4openEPKci>
   b5938:	b950      	cbnz	r0, b5950 <_Z13DataOffloaderh+0x28>
        offloadingDone = true;
   b593a:	4b36      	ldr	r3, [pc, #216]	; (b5a14 <_Z13DataOffloaderh+0xec>)
   b593c:	2201      	movs	r2, #1
   b593e:	701a      	strb	r2, [r3, #0]
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   b5940:	f007 fbcc 	bl	bd0dc <_Z16_fetch_usbserialv>
   b5944:	4934      	ldr	r1, [pc, #208]	; (b5a18 <_Z13DataOffloaderh+0xf0>)
}
   b5946:	b007      	add	sp, #28
   b5948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   b594c:	f006 bfd1 	b.w	bc8f2 <_ZN5Print7printlnEPKc>
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   b5950:	4a32      	ldr	r2, [pc, #200]	; (b5a1c <_Z13DataOffloaderh+0xf4>)
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   b5952:	4c33      	ldr	r4, [pc, #204]	; (b5a20 <_Z13DataOffloaderh+0xf8>)
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   b5954:	462b      	mov	r3, r5
   b5956:	210a      	movs	r1, #10
   b5958:	a803      	add	r0, sp, #12
   b595a:	f003 ff35 	bl	b97c8 <snprintf>
        sendData(OffloadCommand,0,true,false,false);
   b595e:	2300      	movs	r3, #0
   b5960:	4619      	mov	r1, r3
   b5962:	9300      	str	r3, [sp, #0]
   b5964:	2201      	movs	r2, #1
   b5966:	a803      	add	r0, sp, #12
   b5968:	f7fe feb0 	bl	b46cc <_Z8sendDataPKchbbb>
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   b596c:	f007 fbb6 	bl	bd0dc <_Z16_fetch_usbserialv>
   b5970:	6823      	ldr	r3, [r4, #0]
   b5972:	492c      	ldr	r1, [pc, #176]	; (b5a24 <_Z13DataOffloaderh+0xfc>)
   b5974:	785a      	ldrb	r2, [r3, #1]
   b5976:	f7fe fcdf 	bl	b4338 <_ZN5Print8printlnfEPKcz>
        delay(1000);
   b597a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b597e:	f003 ff63 	bl	b9848 <delay>
        if(BLEBot->botNum != OffloadingBot){
   b5982:	6823      	ldr	r3, [r4, #0]
   b5984:	785b      	ldrb	r3, [r3, #1]
   b5986:	42ab      	cmp	r3, r5
   b5988:	d01e      	beq.n	b59c8 <_Z13DataOffloaderh+0xa0>
            Serial.printlnf("Currently connected to Bot %f, need to connect to Bot %d",BLEBot->botNum,OffloadingBot);
   b598a:	f007 fba7 	bl	bd0dc <_Z16_fetch_usbserialv>
   b598e:	6822      	ldr	r2, [r4, #0]
   b5990:	4925      	ldr	r1, [pc, #148]	; (b5a28 <_Z13DataOffloaderh+0x100>)
   b5992:	7852      	ldrb	r2, [r2, #1]
   b5994:	462b      	mov	r3, r5
   b5996:	f7fe fccf 	bl	b4338 <_ZN5Print8printlnfEPKcz>
            BLE.disconnect();
   b599a:	f004 fc6f 	bl	ba27c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b599e:	f005 fa8b 	bl	baeb8 <_ZNK8particle14BleLocalDevice10disconnectEv>
            while(!BLE.connected()){
   b59a2:	f004 fc6b 	bl	ba27c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b59a6:	f004 fd16 	bl	ba3d6 <_ZNK8particle14BleLocalDevice9connectedEv>
   b59aa:	b930      	cbnz	r0, b59ba <_Z13DataOffloaderh+0x92>
                BLEScan(OffloadingBot);
   b59ac:	4628      	mov	r0, r5
   b59ae:	f7ff fe99 	bl	b56e4 <_Z7BLEScani>
                delay(50);
   b59b2:	2032      	movs	r0, #50	; 0x32
   b59b4:	f003 ff48 	bl	b9848 <delay>
            while(!BLE.connected()){
   b59b8:	e7f3      	b.n	b59a2 <_Z13DataOffloaderh+0x7a>
            Serial.printlnf("Successfully connected to Bot %d", BLEBot->botNum);
   b59ba:	f007 fb8f 	bl	bd0dc <_Z16_fetch_usbserialv>
   b59be:	6823      	ldr	r3, [r4, #0]
   b59c0:	491a      	ldr	r1, [pc, #104]	; (b5a2c <_Z13DataOffloaderh+0x104>)
   b59c2:	785a      	ldrb	r2, [r3, #1]
   b59c4:	f7fe fcb8 	bl	b4338 <_ZN5Print8printlnfEPKcz>
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   b59c8:	f007 fb88 	bl	bd0dc <_Z16_fetch_usbserialv>
   b59cc:	6823      	ldr	r3, [r4, #0]
   b59ce:	4918      	ldr	r1, [pc, #96]	; (b5a30 <_Z13DataOffloaderh+0x108>)
   b59d0:	785a      	ldrb	r2, [r3, #1]
        offloadingDone = false;
   b59d2:	4d10      	ldr	r5, [pc, #64]	; (b5a14 <_Z13DataOffloaderh+0xec>)
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   b59d4:	f7fe fcb0 	bl	b4338 <_ZN5Print8printlnfEPKcz>
        offloadingDone = false;
   b59d8:	2300      	movs	r3, #0
   b59da:	702b      	strb	r3, [r5, #0]
        while(!offloadingDone) delay(100);
   b59dc:	2064      	movs	r0, #100	; 0x64
   b59de:	f003 ff33 	bl	b9848 <delay>
   b59e2:	782b      	ldrb	r3, [r5, #0]
   b59e4:	2b00      	cmp	r3, #0
   b59e6:	d0f9      	beq.n	b59dc <_Z13DataOffloaderh+0xb4>
        Serial.printlnf("Finished transferring file from Bot %d",BLEBot->botNum);
   b59e8:	f007 fb78 	bl	bd0dc <_Z16_fetch_usbserialv>
   b59ec:	6823      	ldr	r3, [r4, #0]
   b59ee:	4911      	ldr	r1, [pc, #68]	; (b5a34 <_Z13DataOffloaderh+0x10c>)
   b59f0:	785a      	ldrb	r2, [r3, #1]
   b59f2:	f7fe fca1 	bl	b4338 <_ZN5Print8printlnfEPKcz>
   b59f6:	4810      	ldr	r0, [pc, #64]	; (b5a38 <_Z13DataOffloaderh+0x110>)
    if(logDir.isOpen()) logDir.close();
   b59f8:	7c03      	ldrb	r3, [r0, #16]
   b59fa:	b113      	cbz	r3, b5a02 <_Z13DataOffloaderh+0xda>
   b59fc:	3010      	adds	r0, #16
   b59fe:	f001 f8e9 	bl	b6bd4 <_ZN7FatFile5closeEv>
    offloadingMode = false;
   b5a02:	4b0e      	ldr	r3, [pc, #56]	; (b5a3c <_Z13DataOffloaderh+0x114>)
   b5a04:	2200      	movs	r2, #0
   b5a06:	701a      	strb	r2, [r3, #0]
}
   b5a08:	b007      	add	sp, #28
   b5a0a:	bd30      	pop	{r4, r5, pc}
   b5a0c:	000c0810 	.word	0x000c0810
   b5a10:	2003dd9c 	.word	0x2003dd9c
   b5a14:	2003de4a 	.word	0x2003de4a
   b5a18:	000c0812 	.word	0x000c0812
   b5a1c:	000c0853 	.word	0x000c0853
   b5a20:	2003dc74 	.word	0x2003dc74
   b5a24:	000c085c 	.word	0x000c085c
   b5a28:	000c0889 	.word	0x000c0889
   b5a2c:	000c08c2 	.word	0x000c08c2
   b5a30:	000c08e3 	.word	0x000c08e3
   b5a34:	000c0906 	.word	0x000c0906
   b5a38:	2003dd8c 	.word	0x2003dd8c
   b5a3c:	2003de4b 	.word	0x2003de4b

000b5a40 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b5a40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5a44:	6843      	ldr	r3, [r0, #4]
   b5a46:	f8d0 8000 	ldr.w	r8, [r0]
   b5a4a:	9301      	str	r3, [sp, #4]
   b5a4c:	eba3 0408 	sub.w	r4, r3, r8
   b5a50:	4b40      	ldr	r3, [pc, #256]	; (b5b54 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x114>)
   b5a52:	10e4      	asrs	r4, r4, #3
   b5a54:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
   b5a56:	4b40      	ldr	r3, [pc, #256]	; (b5b58 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x118>)
   b5a58:	429c      	cmp	r4, r3
   b5a5a:	4607      	mov	r7, r0
   b5a5c:	4689      	mov	r9, r1
   b5a5e:	4692      	mov	sl, r2
   b5a60:	d102      	bne.n	b5a68 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x28>
	  __throw_length_error(__N(__s));
   b5a62:	483e      	ldr	r0, [pc, #248]	; (b5b5c <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11c>)
   b5a64:	f007 fd0f 	bl	bd486 <_ZSt20__throw_length_errorPKc>
   b5a68:	2c01      	cmp	r4, #1
   b5a6a:	4622      	mov	r2, r4
   b5a6c:	bf38      	it	cc
   b5a6e:	2201      	movcc	r2, #1
   b5a70:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b5a72:	eba1 0508 	sub.w	r5, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5a76:	d229      	bcs.n	b5acc <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5a78:	b354      	cbz	r4, b5ad0 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>
   b5a7a:	429c      	cmp	r4, r3
   b5a7c:	bf28      	it	cs
   b5a7e:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5a80:	2018      	movs	r0, #24
   b5a82:	4360      	muls	r0, r4
   b5a84:	f7fe fb07 	bl	b4096 <_Znwj>
   b5a88:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5a8a:	eb16 0c05 	adds.w	ip, r6, r5
   b5a8e:	bf1f      	itttt	ne
   b5a90:	e8ba 000f 	ldmiane.w	sl!, {r0, r1, r2, r3}
   b5a94:	e8ac 000f 	stmiane.w	ip!, {r0, r1, r2, r3}
   b5a98:	e9da 0100 	ldrdne	r0, r1, [sl]
   b5a9c:	e9cc 0100 	strdne	r0, r1, [ip]
   b5aa0:	46b2      	mov	sl, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5aa2:	46c3      	mov	fp, r8
      for (; __first != __last; ++__first, (void)++__cur)
   b5aa4:	45d9      	cmp	r9, fp
   b5aa6:	d015      	beq.n	b5ad4 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
   b5aa8:	f1ba 0f00 	cmp.w	sl, #0
   b5aac:	d009      	beq.n	b5ac2 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
   b5aae:	46de      	mov	lr, fp
   b5ab0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5ab4:	46d4      	mov	ip, sl
   b5ab6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5aba:	e89e 0003 	ldmia.w	lr, {r0, r1}
   b5abe:	e88c 0003 	stmia.w	ip, {r0, r1}
   b5ac2:	f10b 0b18 	add.w	fp, fp, #24
   b5ac6:	f10a 0a18 	add.w	sl, sl, #24
   b5aca:	e7eb      	b.n	b5aa4 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x64>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5acc:	461c      	mov	r4, r3
   b5ace:	e7d7      	b.n	b5a80 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x40>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5ad0:	4626      	mov	r6, r4
   b5ad2:	e7da      	b.n	b5a8a <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   b5ad4:	f8df a088 	ldr.w	sl, [pc, #136]	; b5b60 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x120>
   b5ad8:	08ed      	lsrs	r5, r5, #3
   b5ada:	fb0a f505 	mul.w	r5, sl, r5
   b5ade:	2318      	movs	r3, #24
   b5ae0:	f025 4560 	bic.w	r5, r5, #3758096384	; 0xe0000000
   b5ae4:	435d      	muls	r5, r3
   b5ae6:	eb08 0b05 	add.w	fp, r8, r5
	      ++__new_finish;
   b5aea:	441d      	add	r5, r3
   b5aec:	1973      	adds	r3, r6, r5
   b5aee:	9300      	str	r3, [sp, #0]
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b5af0:	4699      	mov	r9, r3
   b5af2:	465d      	mov	r5, fp
      for (; __first != __last; ++__first, (void)++__cur)
   b5af4:	9b01      	ldr	r3, [sp, #4]
   b5af6:	429d      	cmp	r5, r3
   b5af8:	f109 0918 	add.w	r9, r9, #24
   b5afc:	d00c      	beq.n	b5b18 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd8>
   b5afe:	46ae      	mov	lr, r5
   b5b00:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5b04:	f1a9 0c18 	sub.w	ip, r9, #24
   b5b08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5b0c:	e89e 0003 	ldmia.w	lr, {r0, r1}
   b5b10:	3518      	adds	r5, #24
   b5b12:	e88c 0003 	stmia.w	ip, {r0, r1}
   b5b16:	e7ed      	b.n	b5af4 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>
   b5b18:	eba5 050b 	sub.w	r5, r5, fp
   b5b1c:	08ed      	lsrs	r5, r5, #3
   b5b1e:	fb0a fa05 	mul.w	sl, sl, r5
   b5b22:	9b00      	ldr	r3, [sp, #0]
   b5b24:	f02a 4a60 	bic.w	sl, sl, #3758096384	; 0xe0000000
   b5b28:	2518      	movs	r5, #24
   b5b2a:	fb05 350a 	mla	r5, r5, sl, r3
	if (__p)
   b5b2e:	f1b8 0f00 	cmp.w	r8, #0
   b5b32:	d005      	beq.n	b5b40 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x100>
		    this->_M_impl._M_end_of_storage - __old_start);
   b5b34:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b5b36:	4640      	mov	r0, r8
   b5b38:	eba1 0108 	sub.w	r1, r1, r8
   b5b3c:	f7fe faaf 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5b40:	2018      	movs	r0, #24
   b5b42:	fb00 6404 	mla	r4, r0, r4, r6
      this->_M_impl._M_finish = __new_finish;
   b5b46:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5b4a:	60bc      	str	r4, [r7, #8]
    }
   b5b4c:	b003      	add	sp, #12
   b5b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5b52:	bf00      	nop
   b5b54:	aaaaaaab 	.word	0xaaaaaaab
   b5b58:	05555555 	.word	0x05555555
   b5b5c:	000c05dd 	.word	0x000c05dd
   b5b60:	0aaaaaab 	.word	0x0aaaaaab

000b5b64 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b5b64:	b570      	push	{r4, r5, r6, lr}
   b5b66:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5b68:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b5b6c:	4299      	cmp	r1, r3
      push_back(const value_type& __x)
   b5b6e:	4606      	mov	r6, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5b70:	d00c      	beq.n	b5b8c <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x28>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5b72:	b139      	cbz	r1, b5b84 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x20>
   b5b74:	4615      	mov	r5, r2
   b5b76:	460c      	mov	r4, r1
   b5b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b7c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5b80:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
   b5b84:	6873      	ldr	r3, [r6, #4]
   b5b86:	3318      	adds	r3, #24
   b5b88:	6073      	str	r3, [r6, #4]
      }
   b5b8a:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
   b5b8c:	f7ff ff58 	bl	b5a40 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b5b90:	e7fb      	b.n	b5b8a <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x26>
	...

000b5b94 <_Z10createMenuv>:
void createMenu(){
   b5b94:	b530      	push	{r4, r5, lr}
   b5b96:	b099      	sub	sp, #100	; 0x64
            strcpy(itemName,itemString);
   b5b98:	4923      	ldr	r1, [pc, #140]	; (b5c28 <_Z10createMenuv+0x94>)
   b5b9a:	f10d 000d 	add.w	r0, sp, #13
   b5b9e:	f008 fbf0 	bl	be382 <strcpy>
            stepSize = inStep;
   b5ba2:	f240 1501 	movw	r5, #257	; 0x101
            maxVal = maxV;
   b5ba6:	2401      	movs	r4, #1
            stepSize = inStep;
   b5ba8:	2308      	movs	r3, #8
            strcpy(itemName,itemString);
   b5baa:	4920      	ldr	r1, [pc, #128]	; (b5c2c <_Z10createMenuv+0x98>)
            maxVal = maxV;
   b5bac:	f88d 400c 	strb.w	r4, [sp, #12]
            strcpy(itemName,itemString);
   b5bb0:	f10d 0025 	add.w	r0, sp, #37	; 0x25
            stepSize = inStep;
   b5bb4:	e9cd 3501 	strd	r3, r5, [sp, #4]
            strcpy(itemName,itemString);
   b5bb8:	f008 fbe3 	bl	be382 <strcpy>
            stepSize = inStep;
   b5bbc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b5bc0:	9308      	str	r3, [sp, #32]
            maxVal = maxV;
   b5bc2:	2364      	movs	r3, #100	; 0x64
   b5bc4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            strcpy(itemName,itemString);
   b5bc8:	4919      	ldr	r1, [pc, #100]	; (b5c30 <_Z10createMenuv+0x9c>)
    battStat.MethodPointer = &WaterBot::battPercent;
   b5bca:	2302      	movs	r3, #2
            strcpy(itemName,itemString);
   b5bcc:	f10d 003d 	add.w	r0, sp, #61	; 0x3d
    battStat.MethodPointer = &WaterBot::battPercent;
   b5bd0:	9306      	str	r3, [sp, #24]
            strcpy(itemName,itemString);
   b5bd2:	f008 fbd6 	bl	be382 <strcpy>
    offloadItem.MethodPointerBool = &WaterBot::offloading;
   b5bd6:	2309      	movs	r3, #9
            strcpy(itemName,itemString);
   b5bd8:	4916      	ldr	r1, [pc, #88]	; (b5c34 <_Z10createMenuv+0xa0>)
            maxVal = maxV;
   b5bda:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
            strcpy(itemName,itemString);
   b5bde:	f10d 0055 	add.w	r0, sp, #85	; 0x55
            stepSize = inStep;
   b5be2:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
   b5be6:	9514      	str	r5, [sp, #80]	; 0x50
            maxVal = maxV;
   b5be8:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
            strcpy(itemName,itemString);
   b5bec:	f008 fbc9 	bl	be382 <strcpy>
    sentryToggle.MethodPointer = &WaterBot::driveMode;
   b5bf0:	2306      	movs	r3, #6
    MenuItems.push_back(dataRecord);
   b5bf2:	4669      	mov	r1, sp
   b5bf4:	4810      	ldr	r0, [pc, #64]	; (b5c38 <_Z10createMenuv+0xa4>)
    sentryToggle.MethodPointer = &WaterBot::driveMode;
   b5bf6:	9312      	str	r3, [sp, #72]	; 0x48
    MenuItems.push_back(dataRecord);
   b5bf8:	f7ff ffb4 	bl	b5b64 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(battStat);
   b5bfc:	a906      	add	r1, sp, #24
   b5bfe:	480e      	ldr	r0, [pc, #56]	; (b5c38 <_Z10createMenuv+0xa4>)
   b5c00:	f7ff ffb0 	bl	b5b64 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(offloadItem);
   b5c04:	a90c      	add	r1, sp, #48	; 0x30
   b5c06:	480c      	ldr	r0, [pc, #48]	; (b5c38 <_Z10createMenuv+0xa4>)
   b5c08:	f7ff ffac 	bl	b5b64 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(sentryToggle);
   b5c0c:	a912      	add	r1, sp, #72	; 0x48
   b5c0e:	480a      	ldr	r0, [pc, #40]	; (b5c38 <_Z10createMenuv+0xa4>)
   b5c10:	f7ff ffa8 	bl	b5b64 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    SelectedItem = &MenuItems.at(menuItem);
   b5c14:	4b09      	ldr	r3, [pc, #36]	; (b5c3c <_Z10createMenuv+0xa8>)
   b5c16:	4808      	ldr	r0, [pc, #32]	; (b5c38 <_Z10createMenuv+0xa4>)
   b5c18:	7819      	ldrb	r1, [r3, #0]
   b5c1a:	f7ff f81f 	bl	b4c5c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b5c1e:	4b08      	ldr	r3, [pc, #32]	; (b5c40 <_Z10createMenuv+0xac>)
   b5c20:	6018      	str	r0, [r3, #0]
}
   b5c22:	b019      	add	sp, #100	; 0x64
   b5c24:	bd30      	pop	{r4, r5, pc}
   b5c26:	bf00      	nop
   b5c28:	000c092d 	.word	0x000c092d
   b5c2c:	000c0934 	.word	0x000c0934
   b5c30:	000c093c 	.word	0x000c093c
   b5c34:	000c0944 	.word	0x000c0944
   b5c38:	2003dc8c 	.word	0x2003dc8c
   b5c3c:	2003ddf5 	.word	0x2003ddf5
   b5c40:	2003dca4 	.word	0x2003dca4

000b5c44 <setup>:
void setup() {
   b5c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pinMode(E_DPAD,INPUT_PULLUP);
   b5c48:	2102      	movs	r1, #2
void setup() {
   b5c4a:	b090      	sub	sp, #64	; 0x40
    pinMode(E_DPAD,INPUT_PULLUP);
   b5c4c:	201c      	movs	r0, #28
   b5c4e:	f007 fb45 	bl	bd2dc <pinMode>
    pinMode(U_DPAD,INPUT_PULLUP);
   b5c52:	2102      	movs	r1, #2
   b5c54:	200e      	movs	r0, #14
   b5c56:	f007 fb41 	bl	bd2dc <pinMode>
    pinMode(D_DPAD,INPUT_PULLUP);
   b5c5a:	2102      	movs	r1, #2
   b5c5c:	2007      	movs	r0, #7
   b5c5e:	f007 fb3d 	bl	bd2dc <pinMode>
    pinMode(L_DPAD,INPUT_PULLUP);
   b5c62:	2102      	movs	r1, #2
   b5c64:	200f      	movs	r0, #15
   b5c66:	f007 fb39 	bl	bd2dc <pinMode>
    pinMode(R_DPAD,INPUT_PULLUP);
   b5c6a:	2102      	movs	r1, #2
   b5c6c:	2012      	movs	r0, #18
    attachInterrupt(E_DPAD,entHandler,FALLING);
   b5c6e:	2400      	movs	r4, #0
    pinMode(R_DPAD,INPUT_PULLUP);
   b5c70:	f007 fb34 	bl	bd2dc <pinMode>
    pinMode(JOY_BTN,INPUT_PULLUP);
   b5c74:	2102      	movs	r1, #2
   b5c76:	201d      	movs	r0, #29
   b5c78:	f007 fb30 	bl	bd2dc <pinMode>
    attachInterrupt(E_DPAD,entHandler,FALLING);
   b5c7c:	496b      	ldr	r1, [pc, #428]	; (b5e2c <setup+0x1e8>)
   b5c7e:	9400      	str	r4, [sp, #0]
   b5c80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5c84:	2202      	movs	r2, #2
   b5c86:	201c      	movs	r0, #28
   b5c88:	f006 fcae 	bl	bc5e8 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(U_DPAD,uHandler,FALLING);
   b5c8c:	4968      	ldr	r1, [pc, #416]	; (b5e30 <setup+0x1ec>)
   b5c8e:	9400      	str	r4, [sp, #0]
   b5c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5c94:	2202      	movs	r2, #2
   b5c96:	200e      	movs	r0, #14
   b5c98:	f006 fca6 	bl	bc5e8 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(D_DPAD,dHandler,FALLING);
   b5c9c:	4965      	ldr	r1, [pc, #404]	; (b5e34 <setup+0x1f0>)
   b5c9e:	9400      	str	r4, [sp, #0]
   b5ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5ca4:	2202      	movs	r2, #2
   b5ca6:	2007      	movs	r0, #7
   b5ca8:	f006 fc9e 	bl	bc5e8 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(L_DPAD,lHandler,FALLING);
   b5cac:	4962      	ldr	r1, [pc, #392]	; (b5e38 <setup+0x1f4>)
   b5cae:	9400      	str	r4, [sp, #0]
   b5cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5cb4:	2202      	movs	r2, #2
   b5cb6:	200f      	movs	r0, #15
   b5cb8:	f006 fc96 	bl	bc5e8 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(R_DPAD,rHandler,FALLING);
   b5cbc:	495f      	ldr	r1, [pc, #380]	; (b5e3c <setup+0x1f8>)
   b5cbe:	9400      	str	r4, [sp, #0]
   b5cc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5cc4:	2202      	movs	r2, #2
   b5cc6:	2012      	movs	r0, #18
   b5cc8:	f006 fc8e 	bl	bc5e8 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(JOY_BTN,jHandler,FALLING);
   b5ccc:	2202      	movs	r2, #2
   b5cce:	495c      	ldr	r1, [pc, #368]	; (b5e40 <setup+0x1fc>)
   b5cd0:	9400      	str	r4, [sp, #0]
   b5cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5cd6:	201d      	movs	r0, #29
   b5cd8:	f006 fc86 	bl	bc5e8 <_Z15attachInterrupttPFvvE13InterruptModeah>
   b5cdc:	f003 fad0 	bl	b9280 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b5ce0:	4b58      	ldr	r3, [pc, #352]	; (b5e44 <setup+0x200>)
    logMessages = true;
   b5ce2:	4f59      	ldr	r7, [pc, #356]	; (b5e48 <setup+0x204>)
    debounceTime = millis();
   b5ce4:	6018      	str	r0, [r3, #0]
    Serial.begin(115200);
   b5ce6:	f007 f9f9 	bl	bd0dc <_Z16_fetch_usbserialv>
   b5cea:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b5cee:	f007 f9e9 	bl	bd0c4 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b5cf2:	f007 fb9f 	bl	bd434 <_Z22__fetch_global_Serial1v>
   b5cf6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5cfa:	f007 f98d 	bl	bd018 <_ZN11USARTSerial5beginEm>
    setupXBee();
   b5cfe:	f7fe fccd 	bl	b469c <_Z9setupXBeev>
	BLE.on();
   b5d02:	f004 fabb 	bl	ba27c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5d06:	f004 fb03 	bl	ba310 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setScanTimeout(50);  //100ms scan
   b5d0a:	f004 fab7 	bl	ba27c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5d0e:	2132      	movs	r1, #50	; 0x32
   b5d10:	f004 fb48 	bl	ba3a4 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>
    BLE.setTxPower(8);
   b5d14:	f004 fab2 	bl	ba27c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5d18:	2108      	movs	r1, #8
   b5d1a:	f004 fb00 	bl	ba31e <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   b5d1e:	4a4b      	ldr	r2, [pc, #300]	; (b5e4c <setup+0x208>)
   b5d20:	494b      	ldr	r1, [pc, #300]	; (b5e50 <setup+0x20c>)
   b5d22:	4610      	mov	r0, r2
   b5d24:	f005 fb60 	bl	bb3e8 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    peerOffloadCharacteristic.onDataReceived(offloadDataReceived, &peerOffloadCharacteristic);
   b5d28:	4a4a      	ldr	r2, [pc, #296]	; (b5e54 <setup+0x210>)
   b5d2a:	494b      	ldr	r1, [pc, #300]	; (b5e58 <setup+0x214>)
   b5d2c:	4610      	mov	r0, r2
   b5d2e:	f005 fb5b 	bl	bb3e8 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b5d32:	4622      	mov	r2, r4
   b5d34:	4949      	ldr	r1, [pc, #292]	; (b5e5c <setup+0x218>)
   b5d36:	484a      	ldr	r0, [pc, #296]	; (b5e60 <setup+0x21c>)
   b5d38:	e9cd 4400 	strd	r4, r4, [sp]
   b5d3c:	2301      	movs	r3, #1
   b5d3e:	f003 fca3 	bl	b9688 <spark_subscribe>
    offloadingMode = false;
   b5d42:	4b48      	ldr	r3, [pc, #288]	; (b5e64 <setup+0x220>)
   b5d44:	701c      	strb	r4, [r3, #0]
    offloadingDone = false;
   b5d46:	4b48      	ldr	r3, [pc, #288]	; (b5e68 <setup+0x224>)
   b5d48:	701c      	strb	r4, [r3, #0]
    postStatus = false;
   b5d4a:	4b48      	ldr	r3, [pc, #288]	; (b5e6c <setup+0x228>)
   b5d4c:	701c      	strb	r4, [r3, #0]
    statusTimeout = false;
   b5d4e:	4b48      	ldr	r3, [pc, #288]	; (b5e70 <setup+0x22c>)
    logMessages = true;
   b5d50:	f04f 0901 	mov.w	r9, #1
    statusTimeout = false;
   b5d54:	701c      	strb	r4, [r3, #0]
    logMessages = true;
   b5d56:	f887 9000 	strb.w	r9, [r7]
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b5d5a:	f007 f8e9 	bl	bcf30 <_ZN9TimeClass5monthEv>
   b5d5e:	9007      	str	r0, [sp, #28]
   b5d60:	f007 f8da 	bl	bcf18 <_ZN9TimeClass3dayEv>
   b5d64:	4605      	mov	r5, r0
   b5d66:	f007 f8eb 	bl	bcf40 <_ZN9TimeClass4yearEv>
   b5d6a:	4606      	mov	r6, r0
   b5d6c:	f007 f8b0 	bl	bced0 <_ZN9TimeClass4hourEv>
   b5d70:	4680      	mov	r8, r0
   b5d72:	f007 f8b9 	bl	bcee8 <_ZN9TimeClass6minuteEv>
   b5d76:	4682      	mov	sl, r0
   b5d78:	f007 f8c2 	bl	bcf00 <_ZN9TimeClass6secondEv>
   b5d7c:	9b07      	ldr	r3, [sp, #28]
   b5d7e:	4a3d      	ldr	r2, [pc, #244]	; (b5e74 <setup+0x230>)
   b5d80:	9500      	str	r5, [sp, #0]
   b5d82:	e9cd a003 	strd	sl, r0, [sp, #12]
   b5d86:	2110      	movs	r1, #16
   b5d88:	e9cd 6801 	strd	r6, r8, [sp, #4]
   b5d8c:	a808      	add	r0, sp, #32
   b5d8e:	f003 fd1b 	bl	b97c8 <snprintf>
    strcpy(filenameMessages,DEF_FILENAME);
   b5d92:	4939      	ldr	r1, [pc, #228]	; (b5e78 <setup+0x234>)
   b5d94:	4839      	ldr	r0, [pc, #228]	; (b5e7c <setup+0x238>)
   b5d96:	f008 faf4 	bl	be382 <strcpy>
    strcat(filenameMessages,timestamp);
   b5d9a:	a908      	add	r1, sp, #32
   b5d9c:	4837      	ldr	r0, [pc, #220]	; (b5e7c <setup+0x238>)
   b5d9e:	f008 fad7 	bl	be350 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b5da2:	4937      	ldr	r1, [pc, #220]	; (b5e80 <setup+0x23c>)
   b5da4:	4835      	ldr	r0, [pc, #212]	; (b5e7c <setup+0x238>)
   b5da6:	f008 fad3 	bl	be350 <strcat>
    createMenu();
   b5daa:	f7ff fef3 	bl	b5b94 <_Z10createMenuv>
    oled.setup(); 
   b5dae:	4835      	ldr	r0, [pc, #212]	; (b5e84 <setup+0x240>)
   b5db0:	f003 f910 	bl	b8fd4 <_ZN16OledWingAdafruit5setupEv>
    oled.clearDisplay();
   b5db4:	4833      	ldr	r0, [pc, #204]	; (b5e84 <setup+0x240>)
   b5db6:	f002 fd9b 	bl	b88f0 <_ZN16Adafruit_SSD130612clearDisplayEv>
    oled.display();
   b5dba:	4832      	ldr	r0, [pc, #200]	; (b5e84 <setup+0x240>)
   b5dbc:	f003 f806 	bl	b8dcc <_ZN16Adafruit_SSD13067displayEv>
      dataMode_{dataMode}
   b5dc0:	4b31      	ldr	r3, [pc, #196]	; (b5e88 <setup+0x244>)
   b5dc2:	930c      	str	r3, [sp, #48]	; 0x30
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {
   b5dc4:	4831      	ldr	r0, [pc, #196]	; (b5e8c <setup+0x248>)
   b5dc6:	4b32      	ldr	r3, [pc, #200]	; (b5e90 <setup+0x24c>)
   b5dc8:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   b5dcc:	aa0c      	add	r2, sp, #48	; 0x30
   b5dce:	2108      	movs	r1, #8
   b5dd0:	930e      	str	r3, [sp, #56]	; 0x38
   b5dd2:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
   b5dd6:	f7fe fbf1 	bl	b45bc <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b5dda:	4604      	mov	r4, r0
   b5ddc:	b928      	cbnz	r0, b5dea <setup+0x1a6>
        Serial.println("Error: could not connect to SD card!");
   b5dde:	f007 f97d 	bl	bd0dc <_Z16_fetch_usbserialv>
   b5de2:	492c      	ldr	r1, [pc, #176]	; (b5e94 <setup+0x250>)
   b5de4:	f006 fd85 	bl	bc8f2 <_ZN5Print7printlnEPKc>
        logMessages = false;
   b5de8:	703c      	strb	r4, [r7, #0]
    oled.setTextSize(2);
   b5dea:	4c26      	ldr	r4, [pc, #152]	; (b5e84 <setup+0x240>)
   b5dec:	2102      	movs	r1, #2
   b5dee:	4620      	mov	r0, r4
   b5df0:	f002 fc05 	bl	b85fe <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b5df4:	2200      	movs	r2, #0
   b5df6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b5dfa:	e9c4 2304 	strd	r2, r3, [r4, #16]
    oled.print(" Starting ");
   b5dfe:	4926      	ldr	r1, [pc, #152]	; (b5e98 <setup+0x254>)
   b5e00:	4620      	mov	r0, r4
   b5e02:	f006 fd63 	bl	bc8cc <_ZN5Print5printEPKc>
    oled.display();
   b5e06:	4620      	mov	r0, r4
   b5e08:	f002 ffe0 	bl	b8dcc <_ZN16Adafruit_SSD13067displayEv>
    at1.start();
   b5e0c:	4823      	ldr	r0, [pc, #140]	; (b5e9c <setup+0x258>)
   b5e0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5e12:	f7fe fa41 	bl	b4298 <_ZN5Timer5startEj.isra.0>
    at2.start();
   b5e16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5e1a:	4821      	ldr	r0, [pc, #132]	; (b5ea0 <setup+0x25c>)
   b5e1c:	f7fe fa3c 	bl	b4298 <_ZN5Timer5startEj.isra.0>
    WaterBotSim(2);
   b5e20:	2002      	movs	r0, #2
   b5e22:	f7ff fbc7 	bl	b55b4 <_Z11WaterBotSimh>
}
   b5e26:	b010      	add	sp, #64	; 0x40
   b5e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5e2c:	000b41bd 	.word	0x000b41bd
   b5e30:	000b4c85 	.word	0x000b4c85
   b5e34:	000b4cdd 	.word	0x000b4cdd
   b5e38:	000b4a09 	.word	0x000b4a09
   b5e3c:	000b4b31 	.word	0x000b4b31
   b5e40:	000b4211 	.word	0x000b4211
   b5e44:	2003dd50 	.word	0x2003dd50
   b5e48:	2003ddf4 	.word	0x2003ddf4
   b5e4c:	2003ded4 	.word	0x2003ded4
   b5e50:	000b5339 	.word	0x000b5339
   b5e54:	2003dec4 	.word	0x2003dec4
   b5e58:	000b4469 	.word	0x000b4469
   b5e5c:	000b52e9 	.word	0x000b52e9
   b5e60:	000c050a 	.word	0x000c050a
   b5e64:	2003de4b 	.word	0x2003de4b
   b5e68:	2003de4a 	.word	0x2003de4a
   b5e6c:	2003dedc 	.word	0x2003dedc
   b5e70:	2003e635 	.word	0x2003e635
   b5e74:	000c094b 	.word	0x000c094b
   b5e78:	000c0964 	.word	0x000c0964
   b5e7c:	2003dd68 	.word	0x2003dd68
   b5e80:	000c096d 	.word	0x000c096d
   b5e84:	2003de4c 	.word	0x2003de4c
   b5e88:	000c0ae0 	.word	0x000c0ae0
   b5e8c:	2003e1b0 	.word	0x2003e1b0
   b5e90:	007a1200 	.word	0x007a1200
   b5e94:	000c0976 	.word	0x000c0976
   b5e98:	000c099b 	.word	0x000c099b
   b5e9c:	2003dd14 	.word	0x2003dd14
   b5ea0:	2003dd30 	.word	0x2003dd30

000b5ea4 <_GLOBAL__sub_I_SystemMode>:
   b5ea4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        val_(val) {
   b5ea6:	4b55      	ldr	r3, [pc, #340]	; (b5ffc <_GLOBAL__sub_I_SystemMode+0x158>)
   b5ea8:	4c55      	ldr	r4, [pc, #340]	; (b6000 <_GLOBAL__sub_I_SystemMode+0x15c>)
   b5eaa:	2201      	movs	r2, #1
   b5eac:	701a      	strb	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5eae:	4b55      	ldr	r3, [pc, #340]	; (b6004 <_GLOBAL__sub_I_SystemMode+0x160>)
   b5eb0:	2200      	movs	r2, #0
   b5eb2:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b5eb6:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b5eba:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5ebc:	2003      	movs	r0, #3
   b5ebe:	f003 fb8f 	bl	b95e0 <set_system_mode>
const BleUuid serviceUuid("b4206910-dc4b-5743-c8b1-92d0e75182b0");
   b5ec2:	4951      	ldr	r1, [pc, #324]	; (b6008 <_GLOBAL__sub_I_SystemMode+0x164>)
   b5ec4:	4851      	ldr	r0, [pc, #324]	; (b600c <_GLOBAL__sub_I_SystemMode+0x168>)
   b5ec6:	f003 ff17 	bl	b9cf8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("b4206912-dc4b-5743-c8b1-92d0e75182b0");
   b5eca:	4951      	ldr	r1, [pc, #324]	; (b6010 <_GLOBAL__sub_I_SystemMode+0x16c>)
   b5ecc:	4851      	ldr	r0, [pc, #324]	; (b6014 <_GLOBAL__sub_I_SystemMode+0x170>)
   b5ece:	f003 ff13 	bl	b9cf8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("b4206913-dc4b-5743-c8b1-92d0e75182b0");
   b5ed2:	4951      	ldr	r1, [pc, #324]	; (b6018 <_GLOBAL__sub_I_SystemMode+0x174>)
   b5ed4:	4851      	ldr	r0, [pc, #324]	; (b601c <_GLOBAL__sub_I_SystemMode+0x178>)
   b5ed6:	f003 ff0f 	bl	b9cf8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid offldUuid("b4206914-dc4b-5743-c8b1-92d0e75182b0");
   b5eda:	4951      	ldr	r1, [pc, #324]	; (b6020 <_GLOBAL__sub_I_SystemMode+0x17c>)
   b5edc:	4851      	ldr	r0, [pc, #324]	; (b6024 <_GLOBAL__sub_I_SystemMode+0x180>)
   b5ede:	f003 ff0b 	bl	b9cf8 <_ZN8particle7BleUuidC1EPKc>
   b5ee2:	2514      	movs	r5, #20
            : rssi_(BLE_RSSI_INVALID) {
   b5ee4:	267f      	movs	r6, #127	; 0x7f
   b5ee6:	4620      	mov	r0, r4
   b5ee8:	f003 fe21 	bl	b9b2e <_ZN8particle10BleAddressC1Ev>
   b5eec:	f104 0008 	add.w	r0, r4, #8
   b5ef0:	f004 fe4d 	bl	bab8e <_ZN8particle18BleAdvertisingDataC1Ev>
   b5ef4:	f104 0014 	add.w	r0, r4, #20
   b5ef8:	f004 fe49 	bl	bab8e <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_COUNT];
   b5efc:	3d01      	subs	r5, #1
   b5efe:	f884 6020 	strb.w	r6, [r4, #32]
   b5f02:	f104 0424 	add.w	r4, r4, #36	; 0x24
   b5f06:	d1ee      	bne.n	b5ee6 <_GLOBAL__sub_I_SystemMode+0x42>
BleCharacteristic peerTxCharacteristic;
   b5f08:	4847      	ldr	r0, [pc, #284]	; (b6028 <_GLOBAL__sub_I_SystemMode+0x184>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5f0a:	4c48      	ldr	r4, [pc, #288]	; (b602c <_GLOBAL__sub_I_SystemMode+0x188>)
   b5f0c:	f004 f82a 	bl	b9f64 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerRxCharacteristic;
   b5f10:	4847      	ldr	r0, [pc, #284]	; (b6030 <_GLOBAL__sub_I_SystemMode+0x18c>)
   b5f12:	f004 f827 	bl	b9f64 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerOffloadCharacteristic;
   b5f16:	4847      	ldr	r0, [pc, #284]	; (b6034 <_GLOBAL__sub_I_SystemMode+0x190>)
   b5f18:	f004 f824 	bl	b9f64 <_ZN8particle17BleCharacteristicC1Ev>
BlePeerDevice peer;
   b5f1c:	4846      	ldr	r0, [pc, #280]	; (b6038 <_GLOBAL__sub_I_SystemMode+0x194>)
   b5f1e:	f004 f8fd 	bl	ba11c <_ZN8particle13BlePeerDeviceC1Ev>
OledWingAdafruit oled;
   b5f22:	4846      	ldr	r0, [pc, #280]	; (b603c <_GLOBAL__sub_I_SystemMode+0x198>)
   b5f24:	2107      	movs	r1, #7
   b5f26:	f003 f827 	bl	b8f78 <_ZN16OledWingAdafruitC1Ei>
   b5f2a:	7823      	ldrb	r3, [r4, #0]
   b5f2c:	f3bf 8f5b 	dmb	ish
   b5f30:	07db      	lsls	r3, r3, #31
   b5f32:	d40a      	bmi.n	b5f4a <_GLOBAL__sub_I_SystemMode+0xa6>
   b5f34:	4620      	mov	r0, r4
   b5f36:	f7fe f8c1 	bl	b40bc <__cxa_guard_acquire>
   b5f3a:	b130      	cbz	r0, b5f4a <_GLOBAL__sub_I_SystemMode+0xa6>
   b5f3c:	4840      	ldr	r0, [pc, #256]	; (b6040 <_GLOBAL__sub_I_SystemMode+0x19c>)
   b5f3e:	2101      	movs	r1, #1
   b5f40:	f006 fd48 	bl	bc9d4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5f44:	4620      	mov	r0, r4
   b5f46:	f7fe f8be 	bl	b40c6 <__cxa_guard_release>
  explicit SdFat(SPIClass* spiPort) {
   b5f4a:	4b3e      	ldr	r3, [pc, #248]	; (b6044 <_GLOBAL__sub_I_SystemMode+0x1a0>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5f4c:	4e3e      	ldr	r6, [pc, #248]	; (b6048 <_GLOBAL__sub_I_SystemMode+0x1a4>)
	    _M_manager = &_My_handler::_M_manager;
   b5f4e:	4d3f      	ldr	r5, [pc, #252]	; (b604c <_GLOBAL__sub_I_SystemMode+0x1a8>)
Timer at1(5000,actionTimer5);
   b5f50:	483f      	ldr	r0, [pc, #252]	; (b6050 <_GLOBAL__sub_I_SystemMode+0x1ac>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5f52:	9603      	str	r6, [sp, #12]
   b5f54:	2264      	movs	r2, #100	; 0x64
   b5f56:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
  {
   b5f5a:	4a3e      	ldr	r2, [pc, #248]	; (b6054 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b5f5c:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   b5f60:	2201      	movs	r2, #1
   b5f62:	2400      	movs	r4, #0
   b5f64:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b5f68:	4a35      	ldr	r2, [pc, #212]	; (b6040 <_GLOBAL__sub_I_SystemMode+0x19c>)
   b5f6a:	605c      	str	r4, [r3, #4]
   b5f6c:	f8c3 443c 	str.w	r4, [r3, #1084]	; 0x43c
   b5f70:	f8c3 4468 	str.w	r4, [r3, #1128]	; 0x468
   b5f74:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   b5f78:	f8a3 447c 	strh.w	r4, [r3, #1148]	; 0x47c
   b5f7c:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
    Print() : write_error(0) {}
   b5f80:	4b35      	ldr	r3, [pc, #212]	; (b6058 <_GLOBAL__sub_I_SystemMode+0x1b4>)
  File() {}
   b5f82:	4a36      	ldr	r2, [pc, #216]	; (b605c <_GLOBAL__sub_I_SystemMode+0x1b8>)
   b5f84:	605c      	str	r4, [r3, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5f86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5f8a:	6099      	str	r1, [r3, #8]
   b5f8c:	601a      	str	r2, [r3, #0]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5f8e:	611c      	str	r4, [r3, #16]
   b5f90:	4b33      	ldr	r3, [pc, #204]	; (b6060 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b5f92:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b5f96:	601a      	str	r2, [r3, #0]
   b5f98:	611c      	str	r4, [r3, #16]
   b5f9a:	4b32      	ldr	r3, [pc, #200]	; (b6064 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   b5f9c:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b5fa0:	601a      	str	r2, [r3, #0]
   b5fa2:	611c      	str	r4, [r3, #16]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5fa4:	4b30      	ldr	r3, [pc, #192]	; (b6068 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b5fa6:	e9c3 4400 	strd	r4, r4, [r3]
   b5faa:	609c      	str	r4, [r3, #8]
   b5fac:	4b2f      	ldr	r3, [pc, #188]	; (b606c <_GLOBAL__sub_I_SystemMode+0x1c8>)
   b5fae:	e9c3 4400 	strd	r4, r4, [r3]
   b5fb2:	609c      	str	r4, [r3, #8]
   b5fb4:	4b2e      	ldr	r3, [pc, #184]	; (b6070 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b5fb6:	e9c3 4400 	strd	r4, r4, [r3]
   b5fba:	609c      	str	r4, [r3, #8]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5fbc:	4b2d      	ldr	r3, [pc, #180]	; (b6074 <_GLOBAL__sub_I_SystemMode+0x1d0>)
   b5fbe:	9300      	str	r3, [sp, #0]
   b5fc0:	466a      	mov	r2, sp
   b5fc2:	4623      	mov	r3, r4
   b5fc4:	f241 3188 	movw	r1, #5000	; 0x1388
	    _M_manager = &_My_handler::_M_manager;
   b5fc8:	9502      	str	r5, [sp, #8]
   b5fca:	f7fe fa15 	bl	b43f8 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5fce:	4668      	mov	r0, sp
   b5fd0:	f7fe f9c0 	bl	b4354 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5fd4:	4b28      	ldr	r3, [pc, #160]	; (b6078 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b5fd6:	9300      	str	r3, [sp, #0]
Timer at2(60000,actionTimer60);
   b5fd8:	466a      	mov	r2, sp
   b5fda:	4623      	mov	r3, r4
   b5fdc:	f64e 2160 	movw	r1, #60000	; 0xea60
   b5fe0:	4826      	ldr	r0, [pc, #152]	; (b607c <_GLOBAL__sub_I_SystemMode+0x1d8>)
	    _M_manager = &_My_handler::_M_manager;
   b5fe2:	e9cd 5602 	strd	r5, r6, [sp, #8]
   b5fe6:	f7fe fa07 	bl	b43f8 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5fea:	4668      	mov	r0, sp
   b5fec:	f7fe f9b2 	bl	b4354 <_ZNSt14_Function_baseD1Ev>
   b5ff0:	4b23      	ldr	r3, [pc, #140]	; (b6080 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b5ff2:	e9c3 4400 	strd	r4, r4, [r3]
   b5ff6:	609c      	str	r4, [r3, #8]
   b5ff8:	b004      	add	sp, #16
   b5ffa:	bd70      	pop	{r4, r5, r6, pc}
   b5ffc:	2003dcfc 	.word	0x2003dcfc
   b6000:	2003dee0 	.word	0x2003dee0
   b6004:	2003dca8 	.word	0x2003dca8
   b6008:	000c09a6 	.word	0x000c09a6
   b600c:	2003dcc0 	.word	0x2003dcc0
   b6010:	000c09cb 	.word	0x000c09cb
   b6014:	2003dcd4 	.word	0x2003dcd4
   b6018:	000c09f0 	.word	0x000c09f0
   b601c:	2003dce8 	.word	0x2003dce8
   b6020:	000c0a15 	.word	0x000c0a15
   b6024:	2003dd00 	.word	0x2003dd00
   b6028:	2003ded4 	.word	0x2003ded4
   b602c:	2003dc68 	.word	0x2003dc68
   b6030:	2003decc 	.word	0x2003decc
   b6034:	2003dec4 	.word	0x2003dec4
   b6038:	2003debc 	.word	0x2003debc
   b603c:	2003de4c 	.word	0x2003de4c
   b6040:	2003dc6c 	.word	0x2003dc6c
   b6044:	2003e1b0 	.word	0x2003e1b0
   b6048:	000b4295 	.word	0x000b4295
   b604c:	000b4281 	.word	0x000b4281
   b6050:	2003dd14 	.word	0x2003dd14
   b6054:	000c0ae0 	.word	0x000c0ae0
   b6058:	2003ddf8 	.word	0x2003ddf8
   b605c:	000c0b08 	.word	0x000c0b08
   b6060:	2003ddc0 	.word	0x2003ddc0
   b6064:	2003dd8c 	.word	0x2003dd8c
   b6068:	2003dcb4 	.word	0x2003dcb4
   b606c:	2003dc98 	.word	0x2003dc98
   b6070:	2003dc78 	.word	0x2003dc78
   b6074:	000b40e9 	.word	0x000b40e9
   b6078:	000b4241 	.word	0x000b4241
   b607c:	2003dd30 	.word	0x2003dd30
   b6080:	2003dc8c 	.word	0x2003dc8c

000b6084 <_Z13printMenuItemhbbtt8WaterBot>:
void printMenuItem(uint8_t id, bool highlighted, bool selected, uint16_t x, uint16_t y, WaterBot wb){
   b6084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b6088:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   b608c:	4c5d      	ldr	r4, [pc, #372]	; (b6204 <_Z13printMenuItemhbbtt8WaterBot+0x180>)
   b608e:	460f      	mov	r7, r1
        oled.setCursor(x+1,y+1);
   b6090:	3601      	adds	r6, #1
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b6092:	b219      	sxth	r1, r3
        oled.setCursor(x+1,y+1);
   b6094:	3301      	adds	r3, #1
void printMenuItem(uint8_t id, bool highlighted, bool selected, uint16_t x, uint16_t y, WaterBot wb){
   b6096:	4690      	mov	r8, r2
   b6098:	4605      	mov	r5, r0
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b609a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
        oled.setCursor(x+1,y+1);
   b609e:	fa0f f983 	sxth.w	r9, r3
   b60a2:	b236      	sxth	r6, r6
   b60a4:	f04f 0a10 	mov.w	sl, #16
    if(highlighted){
   b60a8:	2f00      	cmp	r7, #0
   b60aa:	d067      	beq.n	b617c <_Z13printMenuItemhbbtt8WaterBot+0xf8>
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b60ac:	2701      	movs	r7, #1
   b60ae:	2358      	movs	r3, #88	; 0x58
   b60b0:	4620      	mov	r0, r4
   b60b2:	e9cd a700 	strd	sl, r7, [sp]
   b60b6:	9203      	str	r2, [sp, #12]
   b60b8:	f001 ff85 	bl	b7fc6 <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b60bc:	f8a4 9010 	strh.w	r9, [r4, #16]
        oled.setTextSize(2);
   b60c0:	2102      	movs	r1, #2
   b60c2:	4620      	mov	r0, r4
   b60c4:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b60c6:	f04f 0900 	mov.w	r9, #0
   b60ca:	f002 fa98 	bl	b85fe <_ZN12Adafruit_GFX11setTextSizeEh>
        oled.print(MenuItems.at(id).itemName);
   b60ce:	4629      	mov	r1, r5
   b60d0:	484d      	ldr	r0, [pc, #308]	; (b6208 <_Z13printMenuItemhbbtt8WaterBot+0x184>)
   b60d2:	f8c4 9014 	str.w	r9, [r4, #20]
   b60d6:	f7fe fdc1 	bl	b4c5c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b60da:	f100 010d 	add.w	r1, r0, #13
   b60de:	4620      	mov	r0, r4
   b60e0:	f006 fbf4 	bl	bc8cc <_ZN5Print5printEPKc>
        if(selected){
   b60e4:	9a03      	ldr	r2, [sp, #12]
   b60e6:	f1b8 0f00 	cmp.w	r8, #0
   b60ea:	d030      	beq.n	b614e <_Z13printMenuItemhbbtt8WaterBot+0xca>
            oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,1);
   b60ec:	237f      	movs	r3, #127	; 0x7f
   b60ee:	e9cd a700 	strd	sl, r7, [sp]
   b60f2:	2158      	movs	r1, #88	; 0x58
   b60f4:	4620      	mov	r0, r4
   b60f6:	f001 ff66 	bl	b7fc6 <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b60fa:	2359      	movs	r3, #89	; 0x59
   b60fc:	8223      	strh	r3, [r4, #16]
   b60fe:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6100:	f8c4 9014 	str.w	r9, [r4, #20]
            if(MenuItems.at(id).onOffSetting){
   b6104:	4840      	ldr	r0, [pc, #256]	; (b6208 <_Z13printMenuItemhbbtt8WaterBot+0x184>)
   b6106:	4629      	mov	r1, r5
   b6108:	f7fe fda8 	bl	b4c5c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b610c:	7a43      	ldrb	r3, [r0, #9]
   b610e:	b363      	cbz	r3, b616a <_Z13printMenuItemhbbtt8WaterBot+0xe6>
                if(wb.*(MenuItems.at(id).MethodPointerBool))  oled.printf("On");
   b6110:	6843      	ldr	r3, [r0, #4]
   b6112:	aa0c      	add	r2, sp, #48	; 0x30
   b6114:	4413      	add	r3, r2
   b6116:	791b      	ldrb	r3, [r3, #4]
   b6118:	b1bb      	cbz	r3, b614a <_Z13printMenuItemhbbtt8WaterBot+0xc6>
   b611a:	493c      	ldr	r1, [pc, #240]	; (b620c <_Z13printMenuItemhbbtt8WaterBot+0x188>)
                else oled.printf("Off");
   b611c:	4839      	ldr	r0, [pc, #228]	; (b6204 <_Z13printMenuItemhbbtt8WaterBot+0x180>)
   b611e:	f7fe f8d2 	bl	b42c6 <_ZN5Print6printfEPKcz>
        Serial.printlnf("Printed Highlighted Menu item with name: %s",MenuItems.at(id).itemName);
   b6122:	f006 ffdb 	bl	bd0dc <_Z16_fetch_usbserialv>
   b6126:	4629      	mov	r1, r5
   b6128:	4604      	mov	r4, r0
   b612a:	4837      	ldr	r0, [pc, #220]	; (b6208 <_Z13printMenuItemhbbtt8WaterBot+0x184>)
   b612c:	f7fe fd96 	bl	b4c5c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b6130:	4937      	ldr	r1, [pc, #220]	; (b6210 <_Z13printMenuItemhbbtt8WaterBot+0x18c>)
   b6132:	f100 020d 	add.w	r2, r0, #13
   b6136:	4620      	mov	r0, r4
   b6138:	f7fe f8fe 	bl	b4338 <_ZN5Print8printlnfEPKcz>
    MenuItems.at(id);
   b613c:	4629      	mov	r1, r5
   b613e:	4832      	ldr	r0, [pc, #200]	; (b6208 <_Z13printMenuItemhbbtt8WaterBot+0x184>)
   b6140:	f7fe fd8c 	bl	b4c5c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
}
   b6144:	b004      	add	sp, #16
   b6146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                else oled.printf("Off");
   b614a:	4932      	ldr	r1, [pc, #200]	; (b6214 <_Z13printMenuItemhbbtt8WaterBot+0x190>)
   b614c:	e7e6      	b.n	b611c <_Z13printMenuItemhbbtt8WaterBot+0x98>
            oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,0);
   b614e:	237f      	movs	r3, #127	; 0x7f
   b6150:	e9cd a800 	strd	sl, r8, [sp]
   b6154:	2158      	movs	r1, #88	; 0x58
   b6156:	4620      	mov	r0, r4
   b6158:	f001 ff35 	bl	b7fc6 <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b615c:	2359      	movs	r3, #89	; 0x59
   b615e:	8223      	strh	r3, [r4, #16]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6160:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6164:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6166:	6163      	str	r3, [r4, #20]
            if(MenuItems.at(id).onOffSetting){
   b6168:	e7cc      	b.n	b6104 <_Z13printMenuItemhbbtt8WaterBot+0x80>
            else oled.printf("%d",wb.*(MenuItems.at(id).MethodPointer));
   b616a:	6803      	ldr	r3, [r0, #0]
   b616c:	492a      	ldr	r1, [pc, #168]	; (b6218 <_Z13printMenuItemhbbtt8WaterBot+0x194>)
   b616e:	aa0c      	add	r2, sp, #48	; 0x30
   b6170:	4413      	add	r3, r2
   b6172:	4620      	mov	r0, r4
   b6174:	791a      	ldrb	r2, [r3, #4]
   b6176:	f7fe f8a6 	bl	b42c6 <_ZN5Print6printfEPKcz>
   b617a:	e7d2      	b.n	b6122 <_Z13printMenuItemhbbtt8WaterBot+0x9e>
        oled.fillRect(x,y,OLED_MAX_X - 40,16,0);
   b617c:	2358      	movs	r3, #88	; 0x58
   b617e:	4620      	mov	r0, r4
   b6180:	e9cd a700 	strd	sl, r7, [sp]
   b6184:	9203      	str	r2, [sp, #12]
   b6186:	f04f 1801 	mov.w	r8, #65537	; 0x10001
   b618a:	f001 ff1c 	bl	b7fc6 <_ZN12Adafruit_GFX8fillRectEsssst>
        oled.setTextSize(2);
   b618e:	2102      	movs	r1, #2
   b6190:	4620      	mov	r0, r4
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6192:	f8a4 9010 	strh.w	r9, [r4, #16]
   b6196:	8266      	strh	r6, [r4, #18]
   b6198:	f002 fa31 	bl	b85fe <_ZN12Adafruit_GFX11setTextSizeEh>
        oled.print(MenuItems.at(id).itemName);
   b619c:	4629      	mov	r1, r5
   b619e:	481a      	ldr	r0, [pc, #104]	; (b6208 <_Z13printMenuItemhbbtt8WaterBot+0x184>)
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b61a0:	f8c4 8014 	str.w	r8, [r4, #20]
   b61a4:	f7fe fd5a 	bl	b4c5c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b61a8:	f100 010d 	add.w	r1, r0, #13
   b61ac:	4620      	mov	r0, r4
   b61ae:	f006 fb8d 	bl	bc8cc <_ZN5Print5printEPKc>
        oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,0);
   b61b2:	9a03      	ldr	r2, [sp, #12]
   b61b4:	237f      	movs	r3, #127	; 0x7f
   b61b6:	2158      	movs	r1, #88	; 0x58
   b61b8:	4620      	mov	r0, r4
   b61ba:	e9cd a700 	strd	sl, r7, [sp]
   b61be:	f001 ff02 	bl	b7fc6 <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b61c2:	2359      	movs	r3, #89	; 0x59
   b61c4:	8223      	strh	r3, [r4, #16]
        if(MenuItems.at(id).onOffSetting){
   b61c6:	4810      	ldr	r0, [pc, #64]	; (b6208 <_Z13printMenuItemhbbtt8WaterBot+0x184>)
   b61c8:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b61ca:	f8c4 8014 	str.w	r8, [r4, #20]
   b61ce:	4629      	mov	r1, r5
   b61d0:	f7fe fd44 	bl	b4c5c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b61d4:	7a43      	ldrb	r3, [r0, #9]
   b61d6:	b15b      	cbz	r3, b61f0 <_Z13printMenuItemhbbtt8WaterBot+0x16c>
            if(wb.*(MenuItems.at(id).MethodPointerBool))  oled.printf("On");
   b61d8:	6843      	ldr	r3, [r0, #4]
   b61da:	aa0c      	add	r2, sp, #48	; 0x30
   b61dc:	4413      	add	r3, r2
   b61de:	791b      	ldrb	r3, [r3, #4]
   b61e0:	b123      	cbz	r3, b61ec <_Z13printMenuItemhbbtt8WaterBot+0x168>
   b61e2:	490a      	ldr	r1, [pc, #40]	; (b620c <_Z13printMenuItemhbbtt8WaterBot+0x188>)
            else oled.printf("Off");
   b61e4:	4620      	mov	r0, r4
   b61e6:	f7fe f86e 	bl	b42c6 <_ZN5Print6printfEPKcz>
   b61ea:	e7a7      	b.n	b613c <_Z13printMenuItemhbbtt8WaterBot+0xb8>
   b61ec:	4909      	ldr	r1, [pc, #36]	; (b6214 <_Z13printMenuItemhbbtt8WaterBot+0x190>)
   b61ee:	e7f9      	b.n	b61e4 <_Z13printMenuItemhbbtt8WaterBot+0x160>
        else oled.printf("%d",wb.*(MenuItems.at(id).MethodPointer));
   b61f0:	6803      	ldr	r3, [r0, #0]
   b61f2:	4909      	ldr	r1, [pc, #36]	; (b6218 <_Z13printMenuItemhbbtt8WaterBot+0x194>)
   b61f4:	aa0c      	add	r2, sp, #48	; 0x30
   b61f6:	4413      	add	r3, r2
   b61f8:	4620      	mov	r0, r4
   b61fa:	791a      	ldrb	r2, [r3, #4]
   b61fc:	f7fe f863 	bl	b42c6 <_ZN5Print6printfEPKcz>
   b6200:	e79c      	b.n	b613c <_Z13printMenuItemhbbtt8WaterBot+0xb8>
   b6202:	bf00      	nop
   b6204:	2003de4c 	.word	0x2003de4c
   b6208:	2003dc8c 	.word	0x2003dc8c
   b620c:	000c0a3a 	.word	0x000c0a3a
   b6210:	000c0a41 	.word	0x000c0a41
   b6214:	000c0a3d 	.word	0x000c0a3d
   b6218:	000c0626 	.word	0x000c0626

000b621c <_Z10updateMenuv>:
void updateMenu(){
   b621c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(redrawMenu){
   b6220:	4ba5      	ldr	r3, [pc, #660]	; (b64b8 <_Z10updateMenuv+0x29c>)
   b6222:	781b      	ldrb	r3, [r3, #0]
void updateMenu(){
   b6224:	b08f      	sub	sp, #60	; 0x3c
    if(redrawMenu){
   b6226:	2b00      	cmp	r3, #0
   b6228:	f000 8142 	beq.w	b64b0 <_Z10updateMenuv+0x294>
        oled.fillRect(0,0,OLED_MAX_X,15,0);
   b622c:	2600      	movs	r6, #0
   b622e:	230f      	movs	r3, #15
   b6230:	e9cd 3600 	strd	r3, r6, [sp]
   b6234:	48a1      	ldr	r0, [pc, #644]	; (b64bc <_Z10updateMenuv+0x2a0>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6236:	f8df 9298 	ldr.w	r9, [pc, #664]	; b64d0 <_Z10updateMenuv+0x2b4>
   b623a:	f8df a2a4 	ldr.w	sl, [pc, #676]	; b64e0 <_Z10updateMenuv+0x2c4>
            if(WaterBots.at(i).botNum == botSelect){
   b623e:	f8df b2a4 	ldr.w	fp, [pc, #676]	; b64e4 <_Z10updateMenuv+0x2c8>
        oled.fillRect(0,0,OLED_MAX_X,15,0);
   b6242:	2380      	movs	r3, #128	; 0x80
   b6244:	4632      	mov	r2, r6
   b6246:	4631      	mov	r1, r6
   b6248:	f001 febd 	bl	b7fc6 <_ZN12Adafruit_GFX8fillRectEsssst>
        uint8_t menuSelect = 0;
   b624c:	4635      	mov	r5, r6
   b624e:	e9d9 2300 	ldrd	r2, r3, [r9]
   b6252:	1a9b      	subs	r3, r3, r2
   b6254:	109b      	asrs	r3, r3, #2
   b6256:	b2f7      	uxtb	r7, r6
   b6258:	fb0a f303 	mul.w	r3, sl, r3
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b625c:	429f      	cmp	r7, r3
   b625e:	d248      	bcs.n	b62f2 <_Z10updateMenuv+0xd6>
            if(WaterBots.at(i).botNum == botSelect){
   b6260:	4639      	mov	r1, r7
   b6262:	4648      	mov	r0, r9
   b6264:	f7fe fbbc 	bl	b49e0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
                oled.setCursor(5+18*i,4);
   b6268:	eb07 08c7 	add.w	r8, r7, r7, lsl #3
            if(WaterBots.at(i).botNum == botSelect){
   b626c:	7841      	ldrb	r1, [r0, #1]
   b626e:	f89b 3000 	ldrb.w	r3, [fp]
   b6272:	4c92      	ldr	r4, [pc, #584]	; (b64bc <_Z10updateMenuv+0x2a0>)
                oled.setCursor(5+18*i,4);
   b6274:	ea4f 0848 	mov.w	r8, r8, lsl #1
   b6278:	f108 0205 	add.w	r2, r8, #5
            if(WaterBots.at(i).botNum == botSelect){
   b627c:	4299      	cmp	r1, r3
   b627e:	f04f 0304 	mov.w	r3, #4
                oled.fillRect(1+i*18,1,14,14,1);
   b6282:	f108 0801 	add.w	r8, r8, #1
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6286:	8222      	strh	r2, [r4, #16]
   b6288:	8263      	strh	r3, [r4, #18]
                oled.setTextSize(1);
   b628a:	f04f 0101 	mov.w	r1, #1
   b628e:	4620      	mov	r0, r4
            if(WaterBots.at(i).botNum == botSelect){
   b6290:	d117      	bne.n	b62c2 <_Z10updateMenuv+0xa6>
                oled.setTextSize(1);
   b6292:	f002 f9b4 	bl	b85fe <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6296:	2300      	movs	r3, #0
                oled.fillRect(1+i*18,1,14,14,1);
   b6298:	2201      	movs	r2, #1
   b629a:	6163      	str	r3, [r4, #20]
   b629c:	230e      	movs	r3, #14
   b629e:	e9cd 3200 	strd	r3, r2, [sp]
   b62a2:	4641      	mov	r1, r8
   b62a4:	4620      	mov	r0, r4
   b62a6:	f001 fe8e 	bl	b7fc6 <_ZN12Adafruit_GFX8fillRectEsssst>
                oled.printf("%d",WaterBots.at(i).botNum);
   b62aa:	4639      	mov	r1, r7
   b62ac:	4648      	mov	r0, r9
   b62ae:	f7fe fb97 	bl	b49e0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b62b2:	4983      	ldr	r1, [pc, #524]	; (b64c0 <_Z10updateMenuv+0x2a4>)
   b62b4:	7842      	ldrb	r2, [r0, #1]
   b62b6:	4620      	mov	r0, r4
   b62b8:	f7fe f805 	bl	b42c6 <_ZN5Print6printfEPKcz>
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b62bc:	3601      	adds	r6, #1
   b62be:	463d      	mov	r5, r7
   b62c0:	e7c5      	b.n	b624e <_Z10updateMenuv+0x32>
                oled.setTextSize(1);
   b62c2:	f002 f99c 	bl	b85fe <_ZN12Adafruit_GFX11setTextSizeEh>
   b62c6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
                oled.drawRect(1+i*18,1,14,14,1);
   b62ca:	2201      	movs	r2, #1
   b62cc:	6163      	str	r3, [r4, #20]
   b62ce:	230e      	movs	r3, #14
   b62d0:	e9cd 3200 	strd	r3, r2, [sp]
   b62d4:	4641      	mov	r1, r8
   b62d6:	4620      	mov	r0, r4
   b62d8:	f001 fee8 	bl	b80ac <_ZN12Adafruit_GFX8drawRectEsssst>
                oled.printf("%d",WaterBots.at(i).botNum);
   b62dc:	4639      	mov	r1, r7
   b62de:	4648      	mov	r0, r9
   b62e0:	f7fe fb7e 	bl	b49e0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b62e4:	4976      	ldr	r1, [pc, #472]	; (b64c0 <_Z10updateMenuv+0x2a4>)
   b62e6:	7842      	ldrb	r2, [r0, #1]
   b62e8:	4620      	mov	r0, r4
   b62ea:	f7fd ffec 	bl	b42c6 <_ZN5Print6printfEPKcz>
   b62ee:	462f      	mov	r7, r5
   b62f0:	e7e4      	b.n	b62bc <_Z10updateMenuv+0xa0>
        if(menuItem == 0){
   b62f2:	4f74      	ldr	r7, [pc, #464]	; (b64c4 <_Z10updateMenuv+0x2a8>)
   b62f4:	f897 8000 	ldrb.w	r8, [r7]
   b62f8:	f1b8 0f00 	cmp.w	r8, #0
   b62fc:	d160      	bne.n	b63c0 <_Z10updateMenuv+0x1a4>
   b62fe:	4f72      	ldr	r7, [pc, #456]	; (b64c8 <_Z10updateMenuv+0x2ac>)
            Serial.println("Menu item 0");
   b6300:	f006 feec 	bl	bd0dc <_Z16_fetch_usbserialv>
   b6304:	4971      	ldr	r1, [pc, #452]	; (b64cc <_Z10updateMenuv+0x2b0>)
   b6306:	f006 faf4 	bl	bc8f2 <_ZN5Print7printlnEPKc>
            if(MenuItems.size()) printMenuItem(0,true,!selectingBots,0,16,WaterBots.at(menuSelect));
   b630a:	e9d7 3200 	ldrd	r3, r2, [r7]
   b630e:	429a      	cmp	r2, r3
   b6310:	d019      	beq.n	b6346 <_Z10updateMenuv+0x12a>
   b6312:	4629      	mov	r1, r5
   b6314:	486e      	ldr	r0, [pc, #440]	; (b64d0 <_Z10updateMenuv+0x2b4>)
   b6316:	f7fe fb63 	bl	b49e0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b631a:	4b6e      	ldr	r3, [pc, #440]	; (b64d4 <_Z10updateMenuv+0x2b8>)
   b631c:	4604      	mov	r4, r0
   b631e:	f893 c000 	ldrb.w	ip, [r3]
   b6322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6324:	ae01      	add	r6, sp, #4
   b6326:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6328:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b632a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b632c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b632e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6330:	6823      	ldr	r3, [r4, #0]
   b6332:	6033      	str	r3, [r6, #0]
   b6334:	2310      	movs	r3, #16
   b6336:	9300      	str	r3, [sp, #0]
   b6338:	f08c 0201 	eor.w	r2, ip, #1
   b633c:	4643      	mov	r3, r8
   b633e:	2101      	movs	r1, #1
   b6340:	4640      	mov	r0, r8
   b6342:	f7ff fe9f 	bl	b6084 <_Z13printMenuItemhbbtt8WaterBot>
   b6346:	e9d7 3600 	ldrd	r3, r6, [r7]
   b634a:	1af6      	subs	r6, r6, r3
   b634c:	4b62      	ldr	r3, [pc, #392]	; (b64d8 <_Z10updateMenuv+0x2bc>)
                Serial.printlnf("Menu item %d", mi);
   b634e:	f8df a18c 	ldr.w	sl, [pc, #396]	; b64dc <_Z10updateMenuv+0x2c0>
                printMenuItem(mi,false,!selectingBots,0,16+(16*mi),WaterBots.at(menuSelect));
   b6352:	f8df 917c 	ldr.w	r9, [pc, #380]	; b64d0 <_Z10updateMenuv+0x2b4>
   b6356:	f8df b17c 	ldr.w	fp, [pc, #380]	; b64d4 <_Z10updateMenuv+0x2b8>
   b635a:	10f6      	asrs	r6, r6, #3
   b635c:	435e      	muls	r6, r3
            uint8_t loopIter = MenuItems.size();
   b635e:	b2f6      	uxtb	r6, r6
            if(loopIter > 2) loopIter = 2;
   b6360:	2e02      	cmp	r6, #2
   b6362:	bf28      	it	cs
   b6364:	2602      	movcs	r6, #2
            for(int mi = 1; mi <= loopIter; mi++){
   b6366:	2701      	movs	r7, #1
   b6368:	42be      	cmp	r6, r7
   b636a:	f2c0 809b 	blt.w	b64a4 <_Z10updateMenuv+0x288>
                Serial.printlnf("Menu item %d", mi);
   b636e:	f006 feb5 	bl	bd0dc <_Z16_fetch_usbserialv>
   b6372:	463a      	mov	r2, r7
   b6374:	4651      	mov	r1, sl
   b6376:	f7fd ffdf 	bl	b4338 <_ZN5Print8printlnfEPKcz>
                printMenuItem(mi,false,!selectingBots,0,16+(16*mi),WaterBots.at(menuSelect));
   b637a:	4629      	mov	r1, r5
   b637c:	4648      	mov	r0, r9
   b637e:	f7fe fb2f 	bl	b49e0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6382:	4604      	mov	r4, r0
   b6384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6386:	f10d 0c04 	add.w	ip, sp, #4
   b638a:	f89b e000 	ldrb.w	lr, [fp]
   b638e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6394:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b639a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b639e:	fa5f f887 	uxtb.w	r8, r7
   b63a2:	6823      	ldr	r3, [r4, #0]
   b63a4:	f8cc 3000 	str.w	r3, [ip]
   b63a8:	3701      	adds	r7, #1
   b63aa:	013b      	lsls	r3, r7, #4
   b63ac:	b29b      	uxth	r3, r3
   b63ae:	9300      	str	r3, [sp, #0]
   b63b0:	2300      	movs	r3, #0
   b63b2:	f08e 0201 	eor.w	r2, lr, #1
   b63b6:	4619      	mov	r1, r3
   b63b8:	4640      	mov	r0, r8
   b63ba:	f7ff fe63 	bl	b6084 <_Z13printMenuItemhbbtt8WaterBot>
            for(int mi = 1; mi <= loopIter; mi++){
   b63be:	e7d3      	b.n	b6368 <_Z10updateMenuv+0x14c>
        else if(menuItem == MAX_MENU_ITEMS-1){
   b63c0:	f1b8 0f03 	cmp.w	r8, #3
   b63c4:	f8df 810c 	ldr.w	r8, [pc, #268]	; b64d4 <_Z10updateMenuv+0x2b8>
   b63c8:	f040 808e 	bne.w	b64e8 <_Z10updateMenuv+0x2cc>
            Serial.printlnf("Menu item %d", menuItem);
   b63cc:	f006 fe86 	bl	bd0dc <_Z16_fetch_usbserialv>
   b63d0:	783a      	ldrb	r2, [r7, #0]
   b63d2:	4942      	ldr	r1, [pc, #264]	; (b64dc <_Z10updateMenuv+0x2c0>)
   b63d4:	f7fd ffb0 	bl	b4338 <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem,true,!selectingBots,0,48,WaterBots.at(menuSelect));
   b63d8:	4629      	mov	r1, r5
   b63da:	483d      	ldr	r0, [pc, #244]	; (b64d0 <_Z10updateMenuv+0x2b4>)
   b63dc:	f897 9000 	ldrb.w	r9, [r7]
   b63e0:	f7fe fafe 	bl	b49e0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b63e4:	4606      	mov	r6, r0
   b63e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b63e8:	ac01      	add	r4, sp, #4
   b63ea:	f898 c000 	ldrb.w	ip, [r8]
   b63ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b63f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b63f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b63f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b63f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b63f8:	6833      	ldr	r3, [r6, #0]
   b63fa:	6023      	str	r3, [r4, #0]
   b63fc:	2330      	movs	r3, #48	; 0x30
   b63fe:	f08c 0201 	eor.w	r2, ip, #1
   b6402:	2101      	movs	r1, #1
   b6404:	4648      	mov	r0, r9
   b6406:	9300      	str	r3, [sp, #0]
   b6408:	2300      	movs	r3, #0
   b640a:	f7ff fe3b 	bl	b6084 <_Z13printMenuItemhbbtt8WaterBot>
            Serial.printlnf("Menu item %d", menuItem-1);
   b640e:	f006 fe65 	bl	bd0dc <_Z16_fetch_usbserialv>
   b6412:	783a      	ldrb	r2, [r7, #0]
   b6414:	4931      	ldr	r1, [pc, #196]	; (b64dc <_Z10updateMenuv+0x2c0>)
   b6416:	3a01      	subs	r2, #1
   b6418:	f7fd ff8e 	bl	b4338 <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem-1,false,!selectingBots,0,32,WaterBots.at(menuSelect));
   b641c:	4629      	mov	r1, r5
   b641e:	482c      	ldr	r0, [pc, #176]	; (b64d0 <_Z10updateMenuv+0x2b4>)
   b6420:	f7fe fade 	bl	b49e0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6424:	4606      	mov	r6, r0
   b6426:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6428:	f10d 0c04 	add.w	ip, sp, #4
   b642c:	f897 e000 	ldrb.w	lr, [r7]
   b6430:	f898 9000 	ldrb.w	r9, [r8]
   b6434:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6438:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b643a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b643e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6440:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6444:	6833      	ldr	r3, [r6, #0]
   b6446:	6023      	str	r3, [r4, #0]
   b6448:	2320      	movs	r3, #32
   b644a:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   b644e:	9300      	str	r3, [sp, #0]
   b6450:	2300      	movs	r3, #0
   b6452:	4619      	mov	r1, r3
   b6454:	fa5f f08e 	uxtb.w	r0, lr
   b6458:	f089 0201 	eor.w	r2, r9, #1
   b645c:	f7ff fe12 	bl	b6084 <_Z13printMenuItemhbbtt8WaterBot>
            Serial.printlnf("Menu item %d", menuItem-2);
   b6460:	f006 fe3c 	bl	bd0dc <_Z16_fetch_usbserialv>
   b6464:	783a      	ldrb	r2, [r7, #0]
   b6466:	491d      	ldr	r1, [pc, #116]	; (b64dc <_Z10updateMenuv+0x2c0>)
   b6468:	3a02      	subs	r2, #2
   b646a:	f7fd ff65 	bl	b4338 <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem-2,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b646e:	4818      	ldr	r0, [pc, #96]	; (b64d0 <_Z10updateMenuv+0x2b4>)
   b6470:	4629      	mov	r1, r5
   b6472:	f7fe fab5 	bl	b49e0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6476:	783f      	ldrb	r7, [r7, #0]
   b6478:	f898 c000 	ldrb.w	ip, [r8]
   b647c:	3f02      	subs	r7, #2
            printMenuItem(menuItem-1,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b647e:	4605      	mov	r5, r0
   b6480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6482:	ae01      	add	r6, sp, #4
   b6484:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6488:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b648a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b648c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b648e:	682b      	ldr	r3, [r5, #0]
   b6490:	6023      	str	r3, [r4, #0]
   b6492:	2310      	movs	r3, #16
   b6494:	9300      	str	r3, [sp, #0]
   b6496:	2300      	movs	r3, #0
   b6498:	f08c 0201 	eor.w	r2, ip, #1
   b649c:	4619      	mov	r1, r3
   b649e:	b2f8      	uxtb	r0, r7
   b64a0:	f7ff fdf0 	bl	b6084 <_Z13printMenuItemhbbtt8WaterBot>
        oled.display();
   b64a4:	4805      	ldr	r0, [pc, #20]	; (b64bc <_Z10updateMenuv+0x2a0>)
   b64a6:	f002 fc91 	bl	b8dcc <_ZN16Adafruit_SSD13067displayEv>
        redrawMenu = false;
   b64aa:	4a03      	ldr	r2, [pc, #12]	; (b64b8 <_Z10updateMenuv+0x29c>)
   b64ac:	2300      	movs	r3, #0
   b64ae:	7013      	strb	r3, [r2, #0]
}
   b64b0:	b00f      	add	sp, #60	; 0x3c
   b64b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b64b6:	bf00      	nop
   b64b8:	2003da88 	.word	0x2003da88
   b64bc:	2003de4c 	.word	0x2003de4c
   b64c0:	000c0626 	.word	0x000c0626
   b64c4:	2003ddf5 	.word	0x2003ddf5
   b64c8:	2003dc8c 	.word	0x2003dc8c
   b64cc:	000c0a6d 	.word	0x000c0a6d
   b64d0:	2003dcb4 	.word	0x2003dcb4
   b64d4:	2003da89 	.word	0x2003da89
   b64d8:	aaaaaaab 	.word	0xaaaaaaab
   b64dc:	000c0a79 	.word	0x000c0a79
   b64e0:	c4ec4ec5 	.word	0xc4ec4ec5
   b64e4:	2003dd4d 	.word	0x2003dd4d
            Serial.printlnf("Menu item %d", menuItem+1);
   b64e8:	f006 fdf8 	bl	bd0dc <_Z16_fetch_usbserialv>
   b64ec:	783a      	ldrb	r2, [r7, #0]
   b64ee:	492b      	ldr	r1, [pc, #172]	; (b659c <_Z10updateMenuv+0x380>)
   b64f0:	3201      	adds	r2, #1
   b64f2:	f7fd ff21 	bl	b4338 <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem+1,false,!selectingBots,0,48,WaterBots.at(menuSelect));
   b64f6:	4629      	mov	r1, r5
   b64f8:	4829      	ldr	r0, [pc, #164]	; (b65a0 <_Z10updateMenuv+0x384>)
   b64fa:	f7fe fa71 	bl	b49e0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b64fe:	4606      	mov	r6, r0
   b6500:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6502:	ac01      	add	r4, sp, #4
   b6504:	f898 e000 	ldrb.w	lr, [r8]
   b6508:	f897 c000 	ldrb.w	ip, [r7]
   b650c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b650e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6512:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6516:	6833      	ldr	r3, [r6, #0]
   b6518:	6023      	str	r3, [r4, #0]
   b651a:	2330      	movs	r3, #48	; 0x30
   b651c:	f10c 0c01 	add.w	ip, ip, #1
   b6520:	9300      	str	r3, [sp, #0]
   b6522:	2300      	movs	r3, #0
   b6524:	f08e 0201 	eor.w	r2, lr, #1
   b6528:	4619      	mov	r1, r3
   b652a:	fa5f f08c 	uxtb.w	r0, ip
   b652e:	f7ff fda9 	bl	b6084 <_Z13printMenuItemhbbtt8WaterBot>
            Serial.printlnf("Menu item %d", menuItem);
   b6532:	f006 fdd3 	bl	bd0dc <_Z16_fetch_usbserialv>
   b6536:	783a      	ldrb	r2, [r7, #0]
   b6538:	4918      	ldr	r1, [pc, #96]	; (b659c <_Z10updateMenuv+0x380>)
   b653a:	f7fd fefd 	bl	b4338 <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem,true,!selectingBots,0,32,WaterBots.at(menuSelect));
   b653e:	4629      	mov	r1, r5
   b6540:	4817      	ldr	r0, [pc, #92]	; (b65a0 <_Z10updateMenuv+0x384>)
   b6542:	f897 9000 	ldrb.w	r9, [r7]
   b6546:	f7fe fa4b 	bl	b49e0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b654a:	4606      	mov	r6, r0
   b654c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b654e:	f10d 0c04 	add.w	ip, sp, #4
   b6552:	f898 e000 	ldrb.w	lr, [r8]
   b6556:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b655a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b655c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6560:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6562:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6566:	6833      	ldr	r3, [r6, #0]
   b6568:	6023      	str	r3, [r4, #0]
   b656a:	2320      	movs	r3, #32
   b656c:	f08e 0201 	eor.w	r2, lr, #1
   b6570:	2101      	movs	r1, #1
   b6572:	9300      	str	r3, [sp, #0]
   b6574:	4648      	mov	r0, r9
   b6576:	2300      	movs	r3, #0
   b6578:	f7ff fd84 	bl	b6084 <_Z13printMenuItemhbbtt8WaterBot>
            Serial.printlnf("Menu item %d", menuItem-1);
   b657c:	f006 fdae 	bl	bd0dc <_Z16_fetch_usbserialv>
   b6580:	783a      	ldrb	r2, [r7, #0]
   b6582:	4906      	ldr	r1, [pc, #24]	; (b659c <_Z10updateMenuv+0x380>)
   b6584:	3a01      	subs	r2, #1
   b6586:	f7fd fed7 	bl	b4338 <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem-1,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b658a:	4805      	ldr	r0, [pc, #20]	; (b65a0 <_Z10updateMenuv+0x384>)
   b658c:	4629      	mov	r1, r5
   b658e:	f7fe fa27 	bl	b49e0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6592:	783f      	ldrb	r7, [r7, #0]
   b6594:	f898 c000 	ldrb.w	ip, [r8]
   b6598:	3f01      	subs	r7, #1
   b659a:	e770      	b.n	b647e <_Z10updateMenuv+0x262>
   b659c:	000c0a79 	.word	0x000c0a79
   b65a0:	2003dcb4 	.word	0x2003dcb4

000b65a4 <loop>:
void loop() {
   b65a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(postStatus){
   b65a8:	4d58      	ldr	r5, [pc, #352]	; (b670c <loop+0x168>)
   b65aa:	782b      	ldrb	r3, [r5, #0]
void loop() {
   b65ac:	b08b      	sub	sp, #44	; 0x2c
    if(postStatus){
   b65ae:	b1a3      	cbz	r3, b65da <loop+0x36>
        if(ControlledBot != NULL) sprintf(statusStr,"CCABspcB%1d",ControlledBot->botNum);
   b65b0:	4b57      	ldr	r3, [pc, #348]	; (b6710 <loop+0x16c>)
   b65b2:	681b      	ldr	r3, [r3, #0]
   b65b4:	2b00      	cmp	r3, #0
   b65b6:	d039      	beq.n	b662c <loop+0x88>
   b65b8:	785a      	ldrb	r2, [r3, #1]
   b65ba:	4956      	ldr	r1, [pc, #344]	; (b6714 <loop+0x170>)
   b65bc:	a802      	add	r0, sp, #8
   b65be:	f003 f8f3 	bl	b97a8 <sprintf>
        sendData(statusStr,0,true,true,statusTimeout);                                  
   b65c2:	4c55      	ldr	r4, [pc, #340]	; (b6718 <loop+0x174>)
   b65c4:	7823      	ldrb	r3, [r4, #0]
   b65c6:	9300      	str	r3, [sp, #0]
   b65c8:	2301      	movs	r3, #1
   b65ca:	461a      	mov	r2, r3
   b65cc:	2100      	movs	r1, #0
   b65ce:	a802      	add	r0, sp, #8
   b65d0:	f7fe f87c 	bl	b46cc <_Z8sendDataPKchbbb>
        postStatus = false;
   b65d4:	2300      	movs	r3, #0
   b65d6:	702b      	strb	r3, [r5, #0]
        statusTimeout = false;
   b65d8:	7023      	strb	r3, [r4, #0]
    updateMenu();
   b65da:	f7ff fe1f 	bl	b621c <_Z10updateMenuv>
    if(!logMessages) Serial.println("Error, SD Card Not working");
   b65de:	4b4f      	ldr	r3, [pc, #316]	; (b671c <loop+0x178>)
   b65e0:	781b      	ldrb	r3, [r3, #0]
   b65e2:	b923      	cbnz	r3, b65ee <loop+0x4a>
   b65e4:	f006 fd7a 	bl	bd0dc <_Z16_fetch_usbserialv>
   b65e8:	494d      	ldr	r1, [pc, #308]	; (b6720 <loop+0x17c>)
   b65ea:	f006 f982 	bl	bc8f2 <_ZN5Print7printlnEPKc>
    if(updateControl){
   b65ee:	4b4d      	ldr	r3, [pc, #308]	; (b6724 <loop+0x180>)
   b65f0:	4e4d      	ldr	r6, [pc, #308]	; (b6728 <loop+0x184>)
   b65f2:	781a      	ldrb	r2, [r3, #0]
   b65f4:	2a00      	cmp	r2, #0
   b65f6:	d035      	beq.n	b6664 <loop+0xc0>
   b65f8:	f8df 8144 	ldr.w	r8, [pc, #324]	; b6740 <loop+0x19c>
        ControlledBot = NULL;
   b65fc:	4f44      	ldr	r7, [pc, #272]	; (b6710 <loop+0x16c>)
            if(WaterBots.at(i).botNum == botSelect) ControlledBot =  &WaterBots.at(i);
   b65fe:	f896 9000 	ldrb.w	r9, [r6]
        updateControl = false;
   b6602:	2400      	movs	r4, #0
   b6604:	701c      	strb	r4, [r3, #0]
   b6606:	e9d8 5300 	ldrd	r5, r3, [r8]
   b660a:	1b5d      	subs	r5, r3, r5
   b660c:	4b47      	ldr	r3, [pc, #284]	; (b672c <loop+0x188>)
        ControlledBot = NULL;
   b660e:	603c      	str	r4, [r7, #0]
   b6610:	10ad      	asrs	r5, r5, #2
   b6612:	435d      	muls	r5, r3
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b6614:	b2e1      	uxtb	r1, r4
   b6616:	428d      	cmp	r5, r1
   b6618:	d90d      	bls.n	b6636 <loop+0x92>
            if(WaterBots.at(i).botNum == botSelect) ControlledBot =  &WaterBots.at(i);
   b661a:	4640      	mov	r0, r8
   b661c:	f7fe f9e0 	bl	b49e0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6620:	7843      	ldrb	r3, [r0, #1]
   b6622:	454b      	cmp	r3, r9
   b6624:	bf08      	it	eq
   b6626:	6038      	streq	r0, [r7, #0]
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b6628:	3401      	adds	r4, #1
   b662a:	e7f3      	b.n	b6614 <loop+0x70>
        else sprintf(statusStr,"CCABspcNB");
   b662c:	4940      	ldr	r1, [pc, #256]	; (b6730 <loop+0x18c>)
   b662e:	a802      	add	r0, sp, #8
   b6630:	f007 fea7 	bl	be382 <strcpy>
   b6634:	e7c5      	b.n	b65c2 <loop+0x1e>
        if(ControlledBot == NULL) return;
   b6636:	683a      	ldr	r2, [r7, #0]
   b6638:	2a00      	cmp	r2, #0
   b663a:	d064      	beq.n	b6706 <loop+0x162>
        if(ControlledBot->offloading) offloadingMode = true;
   b663c:	7a53      	ldrb	r3, [r2, #9]
   b663e:	b113      	cbz	r3, b6646 <loop+0xa2>
   b6640:	4b3c      	ldr	r3, [pc, #240]	; (b6734 <loop+0x190>)
   b6642:	2101      	movs	r1, #1
   b6644:	7019      	strb	r1, [r3, #0]
        sprintf(statusStr,"CCB%dcnf%1d",ControlledBot->botNum,int(ControlledBot->dataRecording));
   b6646:	7a13      	ldrb	r3, [r2, #8]
   b6648:	493b      	ldr	r1, [pc, #236]	; (b6738 <loop+0x194>)
   b664a:	7852      	ldrb	r2, [r2, #1]
   b664c:	a802      	add	r0, sp, #8
   b664e:	f003 f8ab 	bl	b97a8 <sprintf>
        sendData(statusStr,0,true,true,statusTimeout);
   b6652:	4b31      	ldr	r3, [pc, #196]	; (b6718 <loop+0x174>)
   b6654:	781b      	ldrb	r3, [r3, #0]
   b6656:	9300      	str	r3, [sp, #0]
   b6658:	2301      	movs	r3, #1
   b665a:	461a      	mov	r2, r3
   b665c:	2100      	movs	r1, #0
   b665e:	a802      	add	r0, sp, #8
   b6660:	f7fe f834 	bl	b46cc <_Z8sendDataPKchbbb>
    manualMotorControl(botSelect);
   b6664:	7830      	ldrb	r0, [r6, #0]
   b6666:	f7fe f89f 	bl	b47a8 <_Z18manualMotorControlh>
    if (BLE.connected()) {
   b666a:	f003 fe07 	bl	ba27c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b666e:	f003 feb2 	bl	ba3d6 <_ZNK8particle14BleLocalDevice9connectedEv>
   b6672:	2800      	cmp	r0, #0
   b6674:	d037      	beq.n	b66e6 <loop+0x142>
        if(!digitalRead(D_DPAD)) sendData("CCB1req",0,true,false,false);//offloadingMode = true;
   b6676:	2007      	movs	r0, #7
   b6678:	f006 fe5a 	bl	bd330 <digitalRead>
   b667c:	4603      	mov	r3, r0
   b667e:	b928      	cbnz	r0, b668c <loop+0xe8>
   b6680:	9000      	str	r0, [sp, #0]
   b6682:	4601      	mov	r1, r0
   b6684:	2201      	movs	r2, #1
   b6686:	482d      	ldr	r0, [pc, #180]	; (b673c <loop+0x198>)
   b6688:	f7fe f820 	bl	b46cc <_Z8sendDataPKchbbb>
      : _M_current(__i) { }
   b668c:	4b2c      	ldr	r3, [pc, #176]	; (b6740 <loop+0x19c>)
        for(WaterBot ws: WaterBots) Serial.printlnf("Temp: %0.6f",ws.temp);
   b668e:	4e2d      	ldr	r6, [pc, #180]	; (b6744 <loop+0x1a0>)
   b6690:	e9d3 4700 	ldrd	r4, r7, [r3]
   b6694:	42a7      	cmp	r7, r4
   b6696:	d00f      	beq.n	b66b8 <loop+0x114>
   b6698:	f8d4 8020 	ldr.w	r8, [r4, #32]
   b669c:	f006 fd1e 	bl	bd0dc <_Z16_fetch_usbserialv>
   b66a0:	4605      	mov	r5, r0
   b66a2:	4640      	mov	r0, r8
   b66a4:	f007 fa1a 	bl	bdadc <__aeabi_f2d>
   b66a8:	4602      	mov	r2, r0
   b66aa:	460b      	mov	r3, r1
   b66ac:	4628      	mov	r0, r5
   b66ae:	4631      	mov	r1, r6
   b66b0:	f7fd fe42 	bl	b4338 <_ZN5Print8printlnfEPKcz>
      operator++() _GLIBCXX_NOEXCEPT
   b66b4:	3434      	adds	r4, #52	; 0x34
	return *this;
   b66b6:	e7ed      	b.n	b6694 <loop+0xf0>
        delay(250);
   b66b8:	20fa      	movs	r0, #250	; 0xfa
   b66ba:	f003 f8c5 	bl	b9848 <delay>
    if(offloadingMode){
   b66be:	4b1d      	ldr	r3, [pc, #116]	; (b6734 <loop+0x190>)
   b66c0:	781b      	ldrb	r3, [r3, #0]
   b66c2:	b13b      	cbz	r3, b66d4 <loop+0x130>
        DataOffloader(ControlledBot->botNum);
   b66c4:	4c12      	ldr	r4, [pc, #72]	; (b6710 <loop+0x16c>)
   b66c6:	6823      	ldr	r3, [r4, #0]
   b66c8:	7858      	ldrb	r0, [r3, #1]
   b66ca:	f7ff f92d 	bl	b5928 <_Z13DataOffloaderh>
        ControlledBot->offloading = false;
   b66ce:	6823      	ldr	r3, [r4, #0]
   b66d0:	2200      	movs	r2, #0
   b66d2:	725a      	strb	r2, [r3, #9]
    XBeeHandler();
   b66d4:	f7fe fef0 	bl	b54b8 <_Z11XBeeHandlerv>
    RPiHandler();
   b66d8:	f7fe fe76 	bl	b53c8 <_Z10RPiHandlerv>
}
   b66dc:	b00b      	add	sp, #44	; 0x2c
   b66de:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    XBeeLTEPairSet();
   b66e2:	f7fe b959 	b.w	b4998 <_Z14XBeeLTEPairSetv>
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   b66e6:	4c18      	ldr	r4, [pc, #96]	; (b6748 <loop+0x1a4>)
   b66e8:	f002 fdca 	bl	b9280 <HAL_Timer_Get_Milli_Seconds>
   b66ec:	6823      	ldr	r3, [r4, #0]
   b66ee:	1ac0      	subs	r0, r0, r3
   b66f0:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b66f4:	d3e3      	bcc.n	b66be <loop+0x11a>
   b66f6:	f002 fdc3 	bl	b9280 <HAL_Timer_Get_Milli_Seconds>
    		lastScan = millis();
   b66fa:	6020      	str	r0, [r4, #0]
    		BLEScan(-1);
   b66fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6700:	f7fe fff0 	bl	b56e4 <_Z7BLEScani>
   b6704:	e7db      	b.n	b66be <loop+0x11a>
}
   b6706:	b00b      	add	sp, #44	; 0x2c
   b6708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b670c:	2003dedc 	.word	0x2003dedc
   b6710:	2003dc84 	.word	0x2003dc84
   b6714:	000c0a86 	.word	0x000c0a86
   b6718:	2003e635 	.word	0x2003e635
   b671c:	2003ddf4 	.word	0x2003ddf4
   b6720:	000c0a9c 	.word	0x000c0a9c
   b6724:	2003e636 	.word	0x2003e636
   b6728:	2003dd4d 	.word	0x2003dd4d
   b672c:	c4ec4ec5 	.word	0xc4ec4ec5
   b6730:	000c0a92 	.word	0x000c0a92
   b6734:	2003de4b 	.word	0x2003de4b
   b6738:	000c0ab7 	.word	0x000c0ab7
   b673c:	000c0ac3 	.word	0x000c0ac3
   b6740:	2003dcb4 	.word	0x2003dcb4
   b6744:	000c0acb 	.word	0x000c0acb
   b6748:	2003dd88 	.word	0x2003dd88

000b674c <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b674c:	b538      	push	{r3, r4, r5, lr}
   b674e:	4604      	mov	r4, r0
   b6750:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b6752:	2224      	movs	r2, #36	; 0x24
   b6754:	2100      	movs	r1, #0
   b6756:	f007 fd86 	bl	be266 <memset>

  m_vol = vol;
   b675a:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b675c:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b675e:	2b10      	cmp	r3, #16
   b6760:	d003      	beq.n	b676a <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b6762:	2b20      	cmp	r3, #32
   b6764:	d006      	beq.n	b6774 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b6766:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b6768:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b676a:	2320      	movs	r3, #32
  m_flags = F_READ;
   b676c:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b676e:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6770:	70a0      	strb	r0, [r4, #2]
  return true;
   b6772:	e7f9      	b.n	b6768 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b6774:	2340      	movs	r3, #64	; 0x40
   b6776:	e7f9      	b.n	b676c <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b6778 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b6778:	b510      	push	{r4, lr}
   b677a:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b677c:	3024      	adds	r0, #36	; 0x24
   b677e:	f000 feeb 	bl	b7558 <_ZN8FatCache4syncEv>
   b6782:	b128      	cbz	r0, b6790 <_ZN9FatVolume9cacheSyncEv+0x18>
   b6784:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b6788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b678c:	f000 bee4 	b.w	b7558 <_ZN8FatCache4syncEv>
  }
   b6790:	bd10      	pop	{r4, pc}

000b6792 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b6792:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6794:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b6796:	f043 0304 	orr.w	r3, r3, #4
   b679a:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b679c:	f100 0210 	add.w	r2, r0, #16
   b67a0:	6880      	ldr	r0, [r0, #8]
   b67a2:	f000 bf8f 	b.w	b76c4 <_ZN9FatVolume15allocateClusterEmPm>
	...

000b67a8 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b67a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b67ac:	7801      	ldrb	r1, [r0, #0]
   b67ae:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b67b2:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b67b4:	d003      	beq.n	b67be <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b67b6:	2600      	movs	r6, #0
}
   b67b8:	4630      	mov	r0, r6
   b67ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b67be:	6942      	ldr	r2, [r0, #20]
   b67c0:	4b17      	ldr	r3, [pc, #92]	; (b6820 <_ZN7FatFile13addDirClusterEv+0x78>)
   b67c2:	429a      	cmp	r2, r3
   b67c4:	d2f7      	bcs.n	b67b6 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b67c6:	f7ff ffe4 	bl	b6792 <_ZN7FatFile10addClusterEv>
   b67ca:	4606      	mov	r6, r0
   b67cc:	2800      	cmp	r0, #0
   b67ce:	d0f2      	beq.n	b67b6 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b67d0:	6921      	ldr	r1, [r4, #16]
   b67d2:	68a0      	ldr	r0, [r4, #8]
   b67d4:	f000 ff0b 	bl	b75ee <_ZNK9FatVolume17clusterFirstBlockEm>
   b67d8:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b67da:	68a0      	ldr	r0, [r4, #8]
   b67dc:	2205      	movs	r2, #5
   b67de:	4639      	mov	r1, r7
   b67e0:	3024      	adds	r0, #36	; 0x24
   b67e2:	f000 fee1 	bl	b75a8 <_ZN8FatCache4readEmh>
  if (!pc) {
   b67e6:	4680      	mov	r8, r0
   b67e8:	2800      	cmp	r0, #0
   b67ea:	d0e4      	beq.n	b67b6 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b67ec:	4629      	mov	r1, r5
   b67ee:	f44f 7200 	mov.w	r2, #512	; 0x200
   b67f2:	f007 fd38 	bl	be266 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b67f6:	2501      	movs	r5, #1
   b67f8:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b67fa:	791a      	ldrb	r2, [r3, #4]
   b67fc:	42aa      	cmp	r2, r5
   b67fe:	d909      	bls.n	b6814 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b6800:	6818      	ldr	r0, [r3, #0]
   b6802:	4642      	mov	r2, r8
   b6804:	19e9      	adds	r1, r5, r7
   b6806:	f001 fa3c 	bl	b7c82 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b680a:	2800      	cmp	r0, #0
   b680c:	d0d3      	beq.n	b67b6 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b680e:	3501      	adds	r5, #1
   b6810:	b2ed      	uxtb	r5, r5
   b6812:	e7f1      	b.n	b67f8 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b6814:	6963      	ldr	r3, [r4, #20]
   b6816:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b681a:	6163      	str	r3, [r4, #20]
  return true;
   b681c:	e7cc      	b.n	b67b8 <_ZN7FatFile13addDirClusterEv+0x10>
   b681e:	bf00      	nop
   b6820:	001ffe00 	.word	0x001ffe00

000b6824 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b6824:	b510      	push	{r4, lr}
   b6826:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b6828:	6880      	ldr	r0, [r0, #8]
   b682a:	460a      	mov	r2, r1
   b682c:	3024      	adds	r0, #36	; 0x24
   b682e:	69a1      	ldr	r1, [r4, #24]
   b6830:	f000 feba 	bl	b75a8 <_ZN8FatCache4readEmh>
  if (!pc) {
   b6834:	b120      	cbz	r0, b6840 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b6836:	88a3      	ldrh	r3, [r4, #4]
   b6838:	f003 030f 	and.w	r3, r3, #15
   b683c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b6840:	bd10      	pop	{r4, pc}

000b6842 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b6842:	7803      	ldrb	r3, [r0, #0]
   b6844:	b90b      	cbnz	r3, b684a <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b6846:	f7ff bf81 	b.w	b674c <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b684a:	2000      	movs	r0, #0
   b684c:	4770      	bx	lr

000b684e <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b684e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b6852:	7803      	ldrb	r3, [r0, #0]
   b6854:	4604      	mov	r4, r0
   b6856:	4688      	mov	r8, r1
   b6858:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b685a:	2b00      	cmp	r3, #0
   b685c:	d05d      	beq.n	b691a <_ZN7FatFile4readEPvj+0xcc>
   b685e:	7882      	ldrb	r2, [r0, #2]
   b6860:	07d1      	lsls	r1, r2, #31
   b6862:	d55a      	bpl.n	b691a <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b6864:	071a      	lsls	r2, r3, #28
   b6866:	d52d      	bpl.n	b68c4 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b6868:	69c3      	ldr	r3, [r0, #28]
   b686a:	6942      	ldr	r2, [r0, #20]
   b686c:	1a9b      	subs	r3, r3, r2
   b686e:	429d      	cmp	r5, r3
   b6870:	bf28      	it	cs
   b6872:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b6874:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b6876:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b687a:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b687e:	2e00      	cmp	r6, #0
   b6880:	f000 808f 	beq.w	b69a2 <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b6884:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b6886:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6888:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b688a:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b688c:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6890:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b6894:	d51f      	bpl.n	b68d6 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6896:	6a00      	ldr	r0, [r0, #32]
   b6898:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b689a:	68a0      	ldr	r0, [r4, #8]
   b689c:	f1ba 0f00 	cmp.w	sl, #0
   b68a0:	d142      	bne.n	b6928 <_ZN7FatFile4readEPvj+0xda>
   b68a2:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b68a6:	d33f      	bcc.n	b6928 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b68a8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b68aa:	4299      	cmp	r1, r3
   b68ac:	d03c      	beq.n	b6928 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b68ae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b68b2:	d252      	bcs.n	b695a <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b68b4:	6800      	ldr	r0, [r0, #0]
   b68b6:	4642      	mov	r2, r8
   b68b8:	f001 f95a 	bl	b7b70 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b68bc:	b368      	cbz	r0, b691a <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b68be:	f44f 7700 	mov.w	r7, #512	; 0x200
   b68c2:	e044      	b.n	b694e <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b68c4:	069b      	lsls	r3, r3, #26
   b68c6:	d5d5      	bpl.n	b6874 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b68c8:	6883      	ldr	r3, [r0, #8]
   b68ca:	891a      	ldrh	r2, [r3, #8]
   b68cc:	6943      	ldr	r3, [r0, #20]
   b68ce:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b68d2:	b29b      	uxth	r3, r3
   b68d4:	e7cb      	b.n	b686e <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b68d6:	f890 9005 	ldrb.w	r9, [r0, #5]
   b68da:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b68de:	f1ba 0f00 	cmp.w	sl, #0
   b68e2:	d108      	bne.n	b68f6 <_ZN7FatFile4readEPvj+0xa8>
   b68e4:	f1b9 0f00 	cmp.w	r9, #0
   b68e8:	d105      	bne.n	b68f6 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b68ea:	b95b      	cbnz	r3, b6904 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b68ec:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b68ee:	bf4c      	ite	mi
   b68f0:	6a03      	ldrmi	r3, [r0, #32]
   b68f2:	6a23      	ldrpl	r3, [r4, #32]
   b68f4:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b68f6:	6921      	ldr	r1, [r4, #16]
   b68f8:	68a0      	ldr	r0, [r4, #8]
   b68fa:	f000 fe78 	bl	b75ee <_ZNK9FatVolume17clusterFirstBlockEm>
   b68fe:	eb09 0100 	add.w	r1, r9, r0
   b6902:	e7ca      	b.n	b689a <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6904:	6921      	ldr	r1, [r4, #16]
   b6906:	465a      	mov	r2, fp
   b6908:	f000 fe77 	bl	b75fa <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b690c:	2800      	cmp	r0, #0
   b690e:	db04      	blt.n	b691a <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b6910:	d1f1      	bne.n	b68f6 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b6912:	7823      	ldrb	r3, [r4, #0]
   b6914:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6918:	d143      	bne.n	b69a2 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b691a:	7863      	ldrb	r3, [r4, #1]
   b691c:	f043 0302 	orr.w	r3, r3, #2
   b6920:	7063      	strb	r3, [r4, #1]
  return -1;
   b6922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6926:	e03d      	b.n	b69a4 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b6928:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b692c:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b692e:	f04f 0200 	mov.w	r2, #0
   b6932:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b6936:	bf28      	it	cs
   b6938:	4637      	movcs	r7, r6
   b693a:	f000 fe35 	bl	b75a8 <_ZN8FatCache4readEmh>
      if (!pc) {
   b693e:	2800      	cmp	r0, #0
   b6940:	d0eb      	beq.n	b691a <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b6942:	eb00 010a 	add.w	r1, r0, sl
   b6946:	463a      	mov	r2, r7
   b6948:	4640      	mov	r0, r8
   b694a:	f007 fc64 	bl	be216 <memcpy>
    m_curPosition += n;
   b694e:	6963      	ldr	r3, [r4, #20]
   b6950:	443b      	add	r3, r7
    dst += n;
   b6952:	44b8      	add	r8, r7
    m_curPosition += n;
   b6954:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b6956:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b6958:	e791      	b.n	b687e <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b695a:	7822      	ldrb	r2, [r4, #0]
   b695c:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b695e:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b6962:	d406      	bmi.n	b6972 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b6964:	7902      	ldrb	r2, [r0, #4]
   b6966:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b696a:	b2d2      	uxtb	r2, r2
   b696c:	4592      	cmp	sl, r2
   b696e:	bf28      	it	cs
   b6970:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6972:	4299      	cmp	r1, r3
      n = 512*nb;
   b6974:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6978:	d208      	bcs.n	b698c <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b697a:	68a0      	ldr	r0, [r4, #8]
   b697c:	4653      	mov	r3, sl
   b697e:	6800      	ldr	r0, [r0, #0]
   b6980:	4642      	mov	r2, r8
   b6982:	f001 f93d 	bl	b7c00 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b6986:	2800      	cmp	r0, #0
   b6988:	d1e1      	bne.n	b694e <_ZN7FatFile4readEPvj+0x100>
   b698a:	e7c6      	b.n	b691a <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b698c:	4453      	add	r3, sl
   b698e:	428b      	cmp	r3, r1
   b6990:	d9f3      	bls.n	b697a <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b6992:	3024      	adds	r0, #36	; 0x24
   b6994:	9101      	str	r1, [sp, #4]
   b6996:	f000 fddf 	bl	b7558 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b699a:	9901      	ldr	r1, [sp, #4]
   b699c:	2800      	cmp	r0, #0
   b699e:	d1ec      	bne.n	b697a <_ZN7FatFile4readEPvj+0x12c>
   b69a0:	e7bb      	b.n	b691a <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b69a2:	1ba8      	subs	r0, r5, r6
}
   b69a4:	b003      	add	sp, #12
   b69a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b69aa <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b69aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b69ac:	2201      	movs	r2, #1
   b69ae:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b69b2:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b69b6:	4604      	mov	r4, r0
   b69b8:	f7ff ff49 	bl	b684e <_ZN7FatFile4readEPvj>
   b69bc:	2801      	cmp	r0, #1
   b69be:	bf0a      	itet	eq
   b69c0:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b69c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b69c8:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b69cc:	b002      	add	sp, #8
   b69ce:	bd70      	pop	{r4, r5, r6, pc}

000b69d0 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b69d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b69d2:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b69d4:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b69d8:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b69da:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b69de:	d000      	beq.n	b69e2 <_ZN7FatFile12readDirCacheEb+0x12>
   b69e0:	b999      	cbnz	r1, b6a0a <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b69e2:	2201      	movs	r2, #1
   b69e4:	f10d 0107 	add.w	r1, sp, #7
   b69e8:	4620      	mov	r0, r4
   b69ea:	f7ff ff30 	bl	b684e <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b69ee:	b240      	sxtb	r0, r0
   b69f0:	2801      	cmp	r0, #1
   b69f2:	d002      	beq.n	b69fa <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b69f4:	2000      	movs	r0, #0
}
   b69f6:	b003      	add	sp, #12
   b69f8:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b69fa:	6963      	ldr	r3, [r4, #20]
   b69fc:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b69fe:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b6a00:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b6a02:	3030      	adds	r0, #48	; 0x30
   b6a04:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b6a08:	e7f5      	b.n	b69f6 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b6a0a:	3320      	adds	r3, #32
   b6a0c:	e7f7      	b.n	b69fe <_ZN7FatFile12readDirCacheEb+0x2e>

000b6a0e <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b6a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b6a12:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b6a14:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b6a16:	4604      	mov	r4, r0
   b6a18:	460d      	mov	r5, r1
  if (!isOpen()) {
   b6a1a:	b162      	cbz	r2, b6a36 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b6a1c:	6940      	ldr	r0, [r0, #20]
   b6a1e:	4288      	cmp	r0, r1
   b6a20:	d002      	beq.n	b6a28 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b6a22:	b919      	cbnz	r1, b6a2c <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b6a24:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b6a26:	6165      	str	r5, [r4, #20]
    return true;
   b6a28:	2001      	movs	r0, #1
   b6a2a:	e006      	b.n	b6a3a <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b6a2c:	0716      	lsls	r6, r2, #28
   b6a2e:	d506      	bpl.n	b6a3e <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b6a30:	69e3      	ldr	r3, [r4, #28]
   b6a32:	428b      	cmp	r3, r1
   b6a34:	d20b      	bcs.n	b6a4e <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b6a36:	6127      	str	r7, [r4, #16]
  return false;
   b6a38:	2000      	movs	r0, #0
}
   b6a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b6a3e:	0691      	lsls	r1, r2, #26
   b6a40:	d505      	bpl.n	b6a4e <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b6a42:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b6a44:	891b      	ldrh	r3, [r3, #8]
   b6a46:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b6a4a:	d9ec      	bls.n	b6a26 <_ZN7FatFile7seekSetEm+0x18>
   b6a4c:	e7f3      	b.n	b6a36 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6a4e:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b6a52:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b6a56:	1e43      	subs	r3, r0, #1
   b6a58:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b6a5c:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6a5e:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b6a60:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b6a62:	42b3      	cmp	r3, r6
   b6a64:	d800      	bhi.n	b6a68 <_ZN7FatFile7seekSetEm+0x5a>
   b6a66:	b998      	cbnz	r0, b6a90 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6a68:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b6a6a:	bf4c      	ite	mi
   b6a6c:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b6a70:	6a23      	ldrpl	r3, [r4, #32]
   b6a72:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6a74:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b6a78:	2e00      	cmp	r6, #0
   b6a7a:	d0d4      	beq.n	b6a26 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6a7c:	6921      	ldr	r1, [r4, #16]
   b6a7e:	68a0      	ldr	r0, [r4, #8]
   b6a80:	4642      	mov	r2, r8
   b6a82:	f000 fdba 	bl	b75fa <_ZN9FatVolume6fatGetEmPm>
   b6a86:	2800      	cmp	r0, #0
   b6a88:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b6a8c:	dcf4      	bgt.n	b6a78 <_ZN7FatFile7seekSetEm+0x6a>
   b6a8e:	e7d2      	b.n	b6a36 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b6a90:	1af6      	subs	r6, r6, r3
   b6a92:	e7ef      	b.n	b6a74 <_ZN7FatFile7seekSetEm+0x66>

000b6a94 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b6a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a96:	460f      	mov	r7, r1
   b6a98:	4604      	mov	r4, r0
   b6a9a:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b6a9c:	2100      	movs	r1, #0
   b6a9e:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b6aa0:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b6aa2:	f007 fbe0 	bl	be266 <memset>
  m_vol = dirFile->m_vol;
   b6aa6:	68b8      	ldr	r0, [r7, #8]
   b6aa8:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b6aaa:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b6aac:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b6ab0:	6a3b      	ldr	r3, [r7, #32]
   b6ab2:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b6ab4:	016a      	lsls	r2, r5, #5
   b6ab6:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b6aba:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6abe:	071f      	lsls	r7, r3, #28
   b6ac0:	d444      	bmi.n	b6b4c <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b6ac2:	f003 0317 	and.w	r3, r3, #23
   b6ac6:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b6ac8:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b6acc:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b6ad0:	bf04      	itt	eq
   b6ad2:	f043 0308 	orreq.w	r3, r3, #8
   b6ad6:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b6ad8:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b6adc:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b6ade:	f006 0303 	and.w	r3, r6, #3
   b6ae2:	2b01      	cmp	r3, #1
   b6ae4:	d02c      	beq.n	b6b40 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b6ae6:	2b02      	cmp	r3, #2
   b6ae8:	d028      	beq.n	b6b3c <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b6aea:	bb7b      	cbnz	r3, b6b4c <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b6aec:	0571      	lsls	r1, r6, #21
   b6aee:	d42d      	bmi.n	b6b4c <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b6af0:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b6af2:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b6af4:	78a1      	ldrb	r1, [r4, #2]
   b6af6:	078b      	lsls	r3, r1, #30
   b6af8:	d504      	bpl.n	b6b04 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b6afa:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b6afc:	06df      	lsls	r7, r3, #27
   b6afe:	d425      	bmi.n	b6b4c <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b6b00:	07dd      	lsls	r5, r3, #31
   b6b02:	d423      	bmi.n	b6b4c <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b6b04:	11b3      	asrs	r3, r6, #6
   b6b06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b6b0a:	f006 0508 	and.w	r5, r6, #8
   b6b0e:	432b      	orrs	r3, r5
   b6b10:	430b      	orrs	r3, r1
   b6b12:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b6b14:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b6b16:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b6b18:	1883      	adds	r3, r0, r2
   b6b1a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b6b1e:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b6b22:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b6b26:	0572      	lsls	r2, r6, #21
   b6b28:	d513      	bpl.n	b6b52 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b6b2a:	b959      	cbnz	r1, b6b44 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b6b2c:	78a3      	ldrb	r3, [r4, #2]
   b6b2e:	f043 0304 	orr.w	r3, r3, #4
   b6b32:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b6b34:	0473      	lsls	r3, r6, #17
   b6b36:	d410      	bmi.n	b6b5a <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b6b38:	2001      	movs	r0, #1
}
   b6b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b6b3c:	2303      	movs	r3, #3
   b6b3e:	e7d8      	b.n	b6af2 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b6b40:	2302      	movs	r3, #2
   b6b42:	e7d6      	b.n	b6af2 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b6b44:	f000 fdf9 	bl	b773a <_ZN9FatVolume9freeChainEm>
   b6b48:	2800      	cmp	r0, #0
   b6b4a:	d1ef      	bne.n	b6b2c <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b6b4c:	2000      	movs	r0, #0
   b6b4e:	7020      	strb	r0, [r4, #0]
  return false;
   b6b50:	e7f3      	b.n	b6b3a <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b6b52:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b6b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6b56:	61e3      	str	r3, [r4, #28]
   b6b58:	e7ec      	b.n	b6b34 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b6b5a:	69e1      	ldr	r1, [r4, #28]
   b6b5c:	4620      	mov	r0, r4
   b6b5e:	f7ff ff56 	bl	b6a0e <_ZN7FatFile7seekSetEm>
   b6b62:	2800      	cmp	r0, #0
   b6b64:	d1e8      	bne.n	b6b38 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b6b66:	e7f1      	b.n	b6b4c <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b6b68 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b6b68:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b6b6a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b6b6c:	4604      	mov	r4, r0
  if (!isOpen()) {
   b6b6e:	b90b      	cbnz	r3, b6b74 <_ZN7FatFile4syncEv+0xc>
    return true;
   b6b70:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b6b72:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b6b74:	7883      	ldrb	r3, [r0, #2]
   b6b76:	075a      	lsls	r2, r3, #29
   b6b78:	d523      	bpl.n	b6bc2 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b6b7a:	2101      	movs	r1, #1
   b6b7c:	f7ff fe52 	bl	b6824 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b6b80:	4605      	mov	r5, r0
   b6b82:	b928      	cbnz	r0, b6b90 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b6b84:	7863      	ldrb	r3, [r4, #1]
   b6b86:	f043 0301 	orr.w	r3, r3, #1
   b6b8a:	7063      	strb	r3, [r4, #1]
  return false;
   b6b8c:	2000      	movs	r0, #0
   b6b8e:	e7f0      	b.n	b6b72 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b6b90:	7803      	ldrb	r3, [r0, #0]
   b6b92:	2be5      	cmp	r3, #229	; 0xe5
   b6b94:	d0f6      	beq.n	b6b84 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b6b96:	7823      	ldrb	r3, [r4, #0]
   b6b98:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b6b9a:	bf44      	itt	mi
   b6b9c:	69e3      	ldrmi	r3, [r4, #28]
   b6b9e:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b6ba0:	6a23      	ldr	r3, [r4, #32]
   b6ba2:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b6ba4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b6ba6:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b6ba8:	4b09      	ldr	r3, [pc, #36]	; (b6bd0 <_ZN7FatFile4syncEv+0x68>)
   b6baa:	681b      	ldr	r3, [r3, #0]
   b6bac:	b12b      	cbz	r3, b6bba <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b6bae:	f100 0116 	add.w	r1, r0, #22
   b6bb2:	3018      	adds	r0, #24
   b6bb4:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b6bb6:	8b2b      	ldrh	r3, [r5, #24]
   b6bb8:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b6bba:	78a3      	ldrb	r3, [r4, #2]
   b6bbc:	f023 0304 	bic.w	r3, r3, #4
   b6bc0:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b6bc2:	68a0      	ldr	r0, [r4, #8]
   b6bc4:	f7ff fdd8 	bl	b6778 <_ZN9FatVolume9cacheSyncEv>
   b6bc8:	2800      	cmp	r0, #0
   b6bca:	d0db      	beq.n	b6b84 <_ZN7FatFile4syncEv+0x1c>
   b6bcc:	e7d0      	b.n	b6b70 <_ZN7FatFile4syncEv+0x8>
   b6bce:	bf00      	nop
   b6bd0:	2003e638 	.word	0x2003e638

000b6bd4 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b6bd4:	b510      	push	{r4, lr}
   b6bd6:	4604      	mov	r4, r0
  bool rtn = sync();
   b6bd8:	f7ff ffc6 	bl	b6b68 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b6bdc:	2300      	movs	r3, #0
   b6bde:	7023      	strb	r3, [r4, #0]
}
   b6be0:	bd10      	pop	{r4, pc}

000b6be2 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b6be2:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6be4:	b093      	sub	sp, #76	; 0x4c
   b6be6:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6be8:	2300      	movs	r3, #0
   b6bea:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b6bec:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b6bee:	9201      	str	r2, [sp, #4]
   b6bf0:	4606      	mov	r6, r0
   b6bf2:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b6bf4:	b113      	cbz	r3, b6bfc <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b6bf6:	2000      	movs	r0, #0
}
   b6bf8:	b013      	add	sp, #76	; 0x4c
   b6bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b6bfc:	780b      	ldrb	r3, [r1, #0]
   b6bfe:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6c02:	d0f8      	beq.n	b6bf6 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b6c04:	7813      	ldrb	r3, [r2, #0]
   b6c06:	2b2f      	cmp	r3, #47	; 0x2f
   b6c08:	d112      	bne.n	b6c30 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b6c0a:	9a01      	ldr	r2, [sp, #4]
   b6c0c:	7813      	ldrb	r3, [r2, #0]
   b6c0e:	2b2f      	cmp	r3, #47	; 0x2f
   b6c10:	d102      	bne.n	b6c18 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b6c12:	3201      	adds	r2, #1
   b6c14:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b6c16:	e7f8      	b.n	b6c0a <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b6c18:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b6c1a:	b91b      	cbnz	r3, b6c24 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b6c1c:	4630      	mov	r0, r6
   b6c1e:	f7ff fe10 	bl	b6842 <_ZN7FatFile8openRootEP9FatVolume>
   b6c22:	e7e9      	b.n	b6bf8 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b6c24:	a809      	add	r0, sp, #36	; 0x24
   b6c26:	f7ff fd91 	bl	b674c <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b6c2a:	2800      	cmp	r0, #0
   b6c2c:	d0e3      	beq.n	b6bf6 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b6c2e:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b6c30:	9801      	ldr	r0, [sp, #4]
   b6c32:	aa01      	add	r2, sp, #4
   b6c34:	a903      	add	r1, sp, #12
   b6c36:	f000 f931 	bl	b6e9c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b6c3a:	2800      	cmp	r0, #0
   b6c3c:	d0db      	beq.n	b6bf6 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b6c3e:	9b01      	ldr	r3, [sp, #4]
   b6c40:	781b      	ldrb	r3, [r3, #0]
   b6c42:	b19b      	cbz	r3, b6c6c <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b6c44:	2300      	movs	r3, #0
   b6c46:	aa03      	add	r2, sp, #12
   b6c48:	4621      	mov	r1, r4
   b6c4a:	4630      	mov	r0, r6
   b6c4c:	f000 faba 	bl	b71c4 <_ZN7FatFile4openEPS_P7fname_ti>
   b6c50:	2800      	cmp	r0, #0
   b6c52:	d0d0      	beq.n	b6bf6 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b6c54:	4635      	mov	r5, r6
   b6c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c58:	ac09      	add	r4, sp, #36	; 0x24
   b6c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c60:	682b      	ldr	r3, [r5, #0]
   b6c62:	6023      	str	r3, [r4, #0]
    close();
   b6c64:	4630      	mov	r0, r6
   b6c66:	f7ff ffb5 	bl	b6bd4 <_ZN7FatFile5closeEv>
  while (1) {
   b6c6a:	e7e0      	b.n	b6c2e <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b6c6c:	463b      	mov	r3, r7
   b6c6e:	aa03      	add	r2, sp, #12
   b6c70:	4621      	mov	r1, r4
   b6c72:	4630      	mov	r0, r6
   b6c74:	f000 faa6 	bl	b71c4 <_ZN7FatFile4openEPS_P7fname_ti>
   b6c78:	e7be      	b.n	b6bf8 <_ZN7FatFile4openEPS_PKci+0x16>

000b6c7a <_ZN7FatFile6removeEPS_PKc>:
bool FatFile::remove(FatFile* dirFile, const char* path) {
   b6c7a:	b500      	push	{lr}
   b6c7c:	b08b      	sub	sp, #44	; 0x2c
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6c7e:	2300      	movs	r3, #0
   b6c80:	460a      	mov	r2, r1
   b6c82:	9301      	str	r3, [sp, #4]
  if (!file.open(dirFile, path, O_WRONLY)) {
   b6c84:	4601      	mov	r1, r0
   b6c86:	2301      	movs	r3, #1
   b6c88:	a801      	add	r0, sp, #4
   b6c8a:	f7ff ffaa 	bl	b6be2 <_ZN7FatFile4openEPS_PKci>
   b6c8e:	b110      	cbz	r0, b6c96 <_ZN7FatFile6removeEPS_PKc+0x1c>
  return file.remove();
   b6c90:	a801      	add	r0, sp, #4
   b6c92:	f000 f9e1 	bl	b7058 <_ZN7FatFile6removeEv>
}
   b6c96:	b00b      	add	sp, #44	; 0x2c
   b6c98:	f85d fb04 	ldr.w	pc, [sp], #4

000b6c9c <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b6c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6ca0:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b6ca2:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6ca4:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b6ca6:	4604      	mov	r4, r0
   b6ca8:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6caa:	d55b      	bpl.n	b6d64 <_ZN7FatFile5writeEPKvj+0xc8>
   b6cac:	7883      	ldrb	r3, [r0, #2]
   b6cae:	079a      	lsls	r2, r3, #30
   b6cb0:	d558      	bpl.n	b6d64 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b6cb2:	071b      	lsls	r3, r3, #28
   b6cb4:	d451      	bmi.n	b6d5a <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b6cb6:	6963      	ldr	r3, [r4, #20]
   b6cb8:	43db      	mvns	r3, r3
   b6cba:	42bb      	cmp	r3, r7
   b6cbc:	d352      	bcc.n	b6d64 <_ZN7FatFile5writeEPKvj+0xc8>
   b6cbe:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6cc0:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b6cc4:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b6cc6:	f1b8 0f00 	cmp.w	r8, #0
   b6cca:	f000 8091 	beq.w	b6df0 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b6cce:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b6cd0:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b6cd2:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b6cd6:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b6cda:	d10e      	bne.n	b6cfa <_ZN7FatFile5writeEPKvj+0x5e>
   b6cdc:	b96d      	cbnz	r5, b6cfa <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b6cde:	6921      	ldr	r1, [r4, #16]
   b6ce0:	2900      	cmp	r1, #0
   b6ce2:	d046      	beq.n	b6d72 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6ce4:	4652      	mov	r2, sl
   b6ce6:	f000 fc88 	bl	b75fa <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b6cea:	2800      	cmp	r0, #0
   b6cec:	db3a      	blt.n	b6d64 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b6cee:	d104      	bne.n	b6cfa <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b6cf0:	4620      	mov	r0, r4
   b6cf2:	f7ff fd4e 	bl	b6792 <_ZN7FatFile10addClusterEv>
   b6cf6:	2800      	cmp	r0, #0
   b6cf8:	d034      	beq.n	b6d64 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6cfa:	6921      	ldr	r1, [r4, #16]
   b6cfc:	68a0      	ldr	r0, [r4, #8]
   b6cfe:	f000 fc76 	bl	b75ee <_ZNK9FatVolume17clusterFirstBlockEm>
   b6d02:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b6d04:	68a0      	ldr	r0, [r4, #8]
   b6d06:	b915      	cbnz	r5, b6d0e <_ZN7FatFile5writeEPKvj+0x72>
   b6d08:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b6d0c:	d23f      	bcs.n	b6d8e <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b6d0e:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b6d12:	4546      	cmp	r6, r8
   b6d14:	bf28      	it	cs
   b6d16:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b6d18:	2d00      	cmp	r5, #0
   b6d1a:	d136      	bne.n	b6d8a <_ZN7FatFile5writeEPKvj+0xee>
   b6d1c:	6962      	ldr	r2, [r4, #20]
   b6d1e:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b6d20:	429a      	cmp	r2, r3
   b6d22:	bf34      	ite	cc
   b6d24:	2201      	movcc	r2, #1
   b6d26:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b6d28:	3024      	adds	r0, #36	; 0x24
   b6d2a:	f000 fc3d 	bl	b75a8 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b6d2e:	b1c8      	cbz	r0, b6d64 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b6d30:	4428      	add	r0, r5
   b6d32:	4632      	mov	r2, r6
   b6d34:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b6d36:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b6d38:	f007 fa6d 	bl	be216 <memcpy>
      if (512 == (n + blockOffset)) {
   b6d3c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b6d40:	d104      	bne.n	b6d4c <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b6d42:	68a0      	ldr	r0, [r4, #8]
   b6d44:	3024      	adds	r0, #36	; 0x24
   b6d46:	f000 fc07 	bl	b7558 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b6d4a:	b158      	cbz	r0, b6d64 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b6d4c:	6963      	ldr	r3, [r4, #20]
   b6d4e:	4433      	add	r3, r6
   b6d50:	6163      	str	r3, [r4, #20]
    src += n;
   b6d52:	44b1      	add	r9, r6
    nToWrite -= n;
   b6d54:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b6d58:	e7b4      	b.n	b6cc4 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b6d5a:	69c1      	ldr	r1, [r0, #28]
   b6d5c:	f7ff fe57 	bl	b6a0e <_ZN7FatFile7seekSetEm>
   b6d60:	2800      	cmp	r0, #0
   b6d62:	d1a8      	bne.n	b6cb6 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b6d64:	7863      	ldrb	r3, [r4, #1]
   b6d66:	f043 0301 	orr.w	r3, r3, #1
   b6d6a:	7063      	strb	r3, [r4, #1]
  return -1;
   b6d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6d70:	e050      	b.n	b6e14 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b6d72:	6a23      	ldr	r3, [r4, #32]
   b6d74:	b93b      	cbnz	r3, b6d86 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b6d76:	4620      	mov	r0, r4
   b6d78:	f7ff fd0b 	bl	b6792 <_ZN7FatFile10addClusterEv>
   b6d7c:	2800      	cmp	r0, #0
   b6d7e:	d0f1      	beq.n	b6d64 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b6d80:	6923      	ldr	r3, [r4, #16]
   b6d82:	6223      	str	r3, [r4, #32]
   b6d84:	e7b9      	b.n	b6cfa <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b6d86:	6123      	str	r3, [r4, #16]
   b6d88:	e7b7      	b.n	b6cfa <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b6d8a:	2201      	movs	r2, #1
   b6d8c:	e7cc      	b.n	b6d28 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b6d8e:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b6d92:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b6d94:	d31b      	bcc.n	b6dce <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b6d96:	f890 c004 	ldrb.w	ip, [r0, #4]
   b6d9a:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b6d9e:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b6da0:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b6da4:	4573      	cmp	r3, lr
   b6da6:	bf28      	it	cs
   b6da8:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6daa:	4291      	cmp	r1, r2
      n = 512*nb;
   b6dac:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6db0:	d307      	bcc.n	b6dc2 <_ZN7FatFile5writeEPKvj+0x126>
   b6db2:	441a      	add	r2, r3
   b6db4:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b6db6:	bf82      	ittt	hi
   b6db8:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b6dbc:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6dc0:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b6dc2:	68a5      	ldr	r5, [r4, #8]
   b6dc4:	464a      	mov	r2, r9
   b6dc6:	6828      	ldr	r0, [r5, #0]
   b6dc8:	f000 ffd1 	bl	b7d6e <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b6dcc:	e7bd      	b.n	b6d4a <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b6dce:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b6dd0:	bf02      	ittt	eq
   b6dd2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b6dd6:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6dda:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b6ddc:	68a3      	ldr	r3, [r4, #8]
   b6dde:	464a      	mov	r2, r9
   b6de0:	6818      	ldr	r0, [r3, #0]
   b6de2:	f000 ff4e 	bl	b7c82 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b6de6:	2800      	cmp	r0, #0
   b6de8:	d0bc      	beq.n	b6d64 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b6dea:	f44f 7600 	mov.w	r6, #512	; 0x200
   b6dee:	e7ad      	b.n	b6d4c <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b6df0:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b6df2:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b6df4:	42b2      	cmp	r2, r6
   b6df6:	d204      	bcs.n	b6e02 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b6df8:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b6dfa:	f043 0304 	orr.w	r3, r3, #4
   b6dfe:	70a3      	strb	r3, [r4, #2]
   b6e00:	e003      	b.n	b6e0a <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b6e02:	4a08      	ldr	r2, [pc, #32]	; (b6e24 <_ZN7FatFile5writeEPKvj+0x188>)
   b6e04:	6812      	ldr	r2, [r2, #0]
   b6e06:	2a00      	cmp	r2, #0
   b6e08:	d1f7      	bne.n	b6dfa <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b6e0a:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b6e0e:	2b00      	cmp	r3, #0
   b6e10:	db02      	blt.n	b6e18 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b6e12:	4638      	mov	r0, r7
}
   b6e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b6e18:	4620      	mov	r0, r4
   b6e1a:	f7ff fea5 	bl	b6b68 <_ZN7FatFile4syncEv>
   b6e1e:	2800      	cmp	r0, #0
   b6e20:	d1f7      	bne.n	b6e12 <_ZN7FatFile5writeEPKvj+0x176>
   b6e22:	e79f      	b.n	b6d64 <_ZN7FatFile5writeEPKvj+0xc8>
   b6e24:	2003e638 	.word	0x2003e638

000b6e28 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b6e28:	2904      	cmp	r1, #4
   b6e2a:	d804      	bhi.n	b6e36 <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b6e2c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b6e30:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b6e34:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b6e36:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6e38:	bf9b      	ittet	ls
   b6e3a:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b6e3e:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6e42:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6e44:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6e46:	bf84      	itt	hi
   b6e48:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b6e4c:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b6e4e:	4770      	bx	lr

000b6e50 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b6e50:	1e41      	subs	r1, r0, #1
   b6e52:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b6e56:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6e58:	0842      	lsrs	r2, r0, #1
   b6e5a:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b6e5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b6e62:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6e66:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6e68:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6e6a:	d1f5      	bne.n	b6e58 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b6e6c:	4770      	bx	lr

000b6e6e <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b6e6e:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b6e70:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b6e72:	4604      	mov	r4, r0
   b6e74:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b6e76:	b923      	cbnz	r3, b6e82 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b6e78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b6e7c:	6889      	ldr	r1, [r1, #8]
   b6e7e:	f7ff bce0 	b.w	b6842 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b6e82:	2224      	movs	r2, #36	; 0x24
   b6e84:	2100      	movs	r1, #0
   b6e86:	f007 f9ee 	bl	be266 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b6e8a:	2310      	movs	r3, #16
  m_flags = F_READ;
   b6e8c:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b6e8e:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6e90:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b6e92:	68ab      	ldr	r3, [r5, #8]
   b6e94:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b6e96:	68eb      	ldr	r3, [r5, #12]
   b6e98:	6223      	str	r3, [r4, #32]
}
   b6e9a:	bd38      	pop	{r3, r4, r5, pc}

000b6e9c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b6e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6ea0:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b6ea2:	f810 3b01 	ldrb.w	r3, [r0], #1
   b6ea6:	2b20      	cmp	r3, #32
   b6ea8:	d0fa      	beq.n	b6ea0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6eaa:	4d6a      	ldr	r5, [pc, #424]	; (b7054 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b6eac:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b6eae:	2400      	movs	r4, #0
    c = path[len];
   b6eb0:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b6eb2:	b1c3      	cbz	r3, b6ee6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b6eb4:	2b2f      	cmp	r3, #47	; 0x2f
   b6eb6:	d016      	beq.n	b6ee6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6eb8:	2b5c      	cmp	r3, #92	; 0x5c
   b6eba:	d102      	bne.n	b6ec2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b6ebc:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b6ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6ec2:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b6ec6:	b2c0      	uxtb	r0, r0
   b6ec8:	281d      	cmp	r0, #29
   b6eca:	d803      	bhi.n	b6ed4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b6ecc:	fa25 f000 	lsr.w	r0, r5, r0
   b6ed0:	07c0      	lsls	r0, r0, #31
   b6ed2:	d4f3      	bmi.n	b6ebc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b6ed4:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b6ed8:	283c      	cmp	r0, #60	; 0x3c
   b6eda:	d0ef      	beq.n	b6ebc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b6edc:	3b20      	subs	r3, #32
   b6ede:	2b5e      	cmp	r3, #94	; 0x5e
   b6ee0:	d8ec      	bhi.n	b6ebc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b6ee2:	3401      	adds	r4, #1
    c = path[len];
   b6ee4:	e7e4      	b.n	b6eb0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b6ee6:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b6ee8:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b6eea:	4607      	mov	r7, r0
   b6eec:	f810 5b01 	ldrb.w	r5, [r0], #1
   b6ef0:	2d20      	cmp	r5, #32
   b6ef2:	d0fa      	beq.n	b6eea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b6ef4:	2d2f      	cmp	r5, #47	; 0x2f
   b6ef6:	d0f8      	beq.n	b6eea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b6ef8:	6017      	str	r7, [r2, #0]
  while (len) {
   b6efa:	b14c      	cbz	r4, b6f10 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b6efc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b6f00:	2a2e      	cmp	r2, #46	; 0x2e
   b6f02:	d001      	beq.n	b6f08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b6f04:	2a20      	cmp	r2, #32
   b6f06:	d101      	bne.n	b6f0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b6f08:	3c01      	subs	r4, #1
  while (len) {
   b6f0a:	e7f6      	b.n	b6efa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b6f0c:	2cff      	cmp	r4, #255	; 0xff
   b6f0e:	dcd5      	bgt.n	b6ebc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b6f10:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b6f14:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b6f18:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b6f1a:	f8c1 300d 	str.w	r3, [r1, #13]
   b6f1e:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b6f20:	f04f 0800 	mov.w	r8, #0
   b6f24:	f816 3008 	ldrb.w	r3, [r6, r8]
   b6f28:	2b2e      	cmp	r3, #46	; 0x2e
   b6f2a:	d001      	beq.n	b6f30 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b6f2c:	2b20      	cmp	r3, #32
   b6f2e:	d102      	bne.n	b6f36 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b6f30:	f108 0801 	add.w	r8, r8, #1
   b6f34:	e7f6      	b.n	b6f24 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b6f36:	fab8 f088 	clz	r0, r8
   b6f3a:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6f3c:	1e65      	subs	r5, r4, #1
   b6f3e:	1c6b      	adds	r3, r5, #1
   b6f40:	d002      	beq.n	b6f48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b6f42:	5d73      	ldrb	r3, [r6, r5]
   b6f44:	2b2e      	cmp	r3, #46	; 0x2e
   b6f46:	d114      	bne.n	b6f72 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b6f48:	f04f 0900 	mov.w	r9, #0
   b6f4c:	2707      	movs	r7, #7
   b6f4e:	464a      	mov	r2, r9
   b6f50:	46ca      	mov	sl, r9
   b6f52:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b6f56:	45a0      	cmp	r8, r4
   b6f58:	da68      	bge.n	b702c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b6f5a:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b6f5e:	2b20      	cmp	r3, #32
   b6f60:	d003      	beq.n	b6f6a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b6f62:	2b2e      	cmp	r3, #46	; 0x2e
   b6f64:	d107      	bne.n	b6f76 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b6f66:	45a8      	cmp	r8, r5
   b6f68:	d012      	beq.n	b6f90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b6f6a:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b6f6c:	f108 0801 	add.w	r8, r8, #1
   b6f70:	e7f1      	b.n	b6f56 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6f72:	3d01      	subs	r5, #1
   b6f74:	e7e3      	b.n	b6f3e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b6f76:	2b22      	cmp	r3, #34	; 0x22
   b6f78:	d008      	beq.n	b6f8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b6f7a:	2b7c      	cmp	r3, #124	; 0x7c
   b6f7c:	d006      	beq.n	b6f8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b6f7e:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b6f82:	f1bc 0f05 	cmp.w	ip, #5
   b6f86:	d80a      	bhi.n	b6f9e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b6f88:	2b2d      	cmp	r3, #45	; 0x2d
   b6f8a:	d012      	beq.n	b6fb2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b6f8c:	45a8      	cmp	r8, r5
   b6f8e:	d15b      	bne.n	b7048 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b6f90:	2f0a      	cmp	r7, #10
   b6f92:	d04a      	beq.n	b702a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b6f94:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6f96:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6f98:	f04f 0e10 	mov.w	lr, #16
   b6f9c:	e7e6      	b.n	b6f6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b6f9e:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b6fa2:	f1bc 0f05 	cmp.w	ip, #5
   b6fa6:	d9f1      	bls.n	b6f8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b6fa8:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b6fac:	f1bc 0f02 	cmp.w	ip, #2
   b6fb0:	d9ec      	bls.n	b6f8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b6fb2:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b6fb6:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b6fba:	d8e7      	bhi.n	b6f8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b6fbc:	45a8      	cmp	r8, r5
   b6fbe:	d0e7      	beq.n	b6f90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b6fc0:	42ba      	cmp	r2, r7
   b6fc2:	d830      	bhi.n	b7026 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b6fc4:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b6fc8:	f1bc 0f19 	cmp.w	ip, #25
   b6fcc:	d81a      	bhi.n	b7004 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b6fce:	3b20      	subs	r3, #32
        lc |= bit;
   b6fd0:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b6fd4:	b2db      	uxtb	r3, r3
        lc |= bit;
   b6fd6:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b6fda:	f102 0c01 	add.w	ip, r2, #1
   b6fde:	fa5f fc8c 	uxtb.w	ip, ip
   b6fe2:	440a      	add	r2, r1
      if (i < 7) {
   b6fe4:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b6fe8:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b6fea:	d801      	bhi.n	b6ff0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b6fec:	f881 c00c 	strb.w	ip, [r1, #12]
   b6ff0:	4662      	mov	r2, ip
   b6ff2:	e7bb      	b.n	b6f6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b6ff4:	45a8      	cmp	r8, r5
   b6ff6:	dc18      	bgt.n	b702a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b6ff8:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b6ffa:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6ffc:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6ffe:	f04f 0e10 	mov.w	lr, #16
   b7002:	e7b2      	b.n	b6f6a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b7004:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b7008:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b700c:	bf98      	it	ls
   b700e:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b7012:	e7e2      	b.n	b6fda <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b7014:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b7016:	2001      	movs	r0, #1
   b7018:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b701a:	4419      	add	r1, r3
   b701c:	237e      	movs	r3, #126	; 0x7e
   b701e:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b7020:	2331      	movs	r3, #49	; 0x31
   b7022:	738b      	strb	r3, [r1, #14]
   b7024:	e74b      	b.n	b6ebe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b7026:	2f0a      	cmp	r7, #10
   b7028:	d1e4      	bne.n	b6ff4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b702a:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b702c:	7b4b      	ldrb	r3, [r1, #13]
   b702e:	2b20      	cmp	r3, #32
   b7030:	f43f af44 	beq.w	b6ebc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b7034:	2800      	cmp	r0, #0
   b7036:	d0ed      	beq.n	b7014 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b7038:	ea1a 0f09 	tst.w	sl, r9
   b703c:	bf18      	it	ne
   b703e:	f04f 0902 	movne.w	r9, #2
   b7042:	f881 9000 	strb.w	r9, [r1]
   b7046:	e73a      	b.n	b6ebe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b7048:	42ba      	cmp	r2, r7
   b704a:	d8ec      	bhi.n	b7026 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b704c:	2000      	movs	r0, #0
      c = '_';
   b704e:	235f      	movs	r3, #95	; 0x5f
   b7050:	e7c3      	b.n	b6fda <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b7052:	bf00      	nop
   b7054:	31000101 	.word	0x31000101

000b7058 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   b7058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b705c:	b08a      	sub	sp, #40	; 0x28
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b705e:	2300      	movs	r3, #0
   b7060:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7062:	7803      	ldrb	r3, [r0, #0]
   b7064:	0719      	lsls	r1, r3, #28
bool FatFile::remove() {
   b7066:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7068:	d50a      	bpl.n	b7080 <_ZN7FatFile6removeEv+0x28>
   b706a:	7883      	ldrb	r3, [r0, #2]
   b706c:	079a      	lsls	r2, r3, #30
   b706e:	d507      	bpl.n	b7080 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b7070:	6a01      	ldr	r1, [r0, #32]
   b7072:	b939      	cbnz	r1, b7084 <_ZN7FatFile6removeEv+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b7074:	2101      	movs	r1, #1
   b7076:	4620      	mov	r0, r4
   b7078:	f7ff fbd4 	bl	b6824 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b707c:	4605      	mov	r5, r0
   b707e:	b938      	cbnz	r0, b7090 <_ZN7FatFile6removeEv+0x38>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   b7080:	2000      	movs	r0, #0
   b7082:	e048      	b.n	b7116 <_ZN7FatFile6removeEv+0xbe>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b7084:	6880      	ldr	r0, [r0, #8]
   b7086:	f000 fb58 	bl	b773a <_ZN9FatVolume9freeChainEm>
   b708a:	2800      	cmp	r0, #0
   b708c:	d1f2      	bne.n	b7074 <_ZN7FatFile6removeEv+0x1c>
   b708e:	e7f7      	b.n	b7080 <_ZN7FatFile6removeEv+0x28>
  chksum = lfnChecksum(dir->name);
   b7090:	f7ff fede 	bl	b6e50 <_ZN7FatFile11lfnChecksumEPh>
  dir->name[0] = DIR_NAME_DELETED;
   b7094:	27e5      	movs	r7, #229	; 0xe5
   b7096:	702f      	strb	r7, [r5, #0]
  m_attr = FILE_ATTR_CLOSED;
   b7098:	2300      	movs	r3, #0
  chksum = lfnChecksum(dir->name);
   b709a:	4606      	mov	r6, r0
  m_attr = FILE_ATTR_CLOSED;
   b709c:	7023      	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
   b709e:	68a0      	ldr	r0, [r4, #8]
   b70a0:	f7ff fb6a 	bl	b6778 <_ZN9FatVolume9cacheSyncEv>
   b70a4:	2800      	cmp	r0, #0
   b70a6:	d0eb      	beq.n	b7080 <_ZN7FatFile6removeEv+0x28>
  if (!isLFN()) {
   b70a8:	78e3      	ldrb	r3, [r4, #3]
   b70aa:	2b00      	cmp	r3, #0
   b70ac:	d033      	beq.n	b7116 <_ZN7FatFile6removeEv+0xbe>
  if (!dirFile.openCluster(this)) {
   b70ae:	4621      	mov	r1, r4
   b70b0:	a801      	add	r0, sp, #4
   b70b2:	f7ff fedc 	bl	b6e6e <_ZN7FatFile11openClusterEPS_>
   b70b6:	2800      	cmp	r0, #0
   b70b8:	d0e2      	beq.n	b7080 <_ZN7FatFile6removeEv+0x28>
   b70ba:	2501      	movs	r5, #1
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   b70bc:	78e3      	ldrb	r3, [r4, #3]
   b70be:	fa5f f885 	uxtb.w	r8, r5
   b70c2:	4543      	cmp	r3, r8
   b70c4:	d3dc      	bcc.n	b7080 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b70c6:	88a1      	ldrh	r1, [r4, #4]
   b70c8:	1b49      	subs	r1, r1, r5
   b70ca:	0149      	lsls	r1, r1, #5
   b70cc:	a801      	add	r0, sp, #4
   b70ce:	f7ff fc9e 	bl	b6a0e <_ZN7FatFile7seekSetEm>
   b70d2:	2800      	cmp	r0, #0
   b70d4:	d0d4      	beq.n	b7080 <_ZN7FatFile6removeEv+0x28>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b70d6:	2100      	movs	r1, #0
   b70d8:	a801      	add	r0, sp, #4
   b70da:	f7ff fc79 	bl	b69d0 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b70de:	2800      	cmp	r0, #0
   b70e0:	d0ce      	beq.n	b7080 <_ZN7FatFile6removeEv+0x28>
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b70e2:	7ac3      	ldrb	r3, [r0, #11]
   b70e4:	2b0f      	cmp	r3, #15
   b70e6:	d1cb      	bne.n	b7080 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b70e8:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b70ea:	f002 031f 	and.w	r3, r2, #31
   b70ee:	4543      	cmp	r3, r8
   b70f0:	d1c6      	bne.n	b7080 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b70f2:	7b43      	ldrb	r3, [r0, #13]
   b70f4:	42b3      	cmp	r3, r6
   b70f6:	d1c3      	bne.n	b7080 <_ZN7FatFile6removeEv+0x28>
    ldir->ord = DIR_NAME_DELETED;
   b70f8:	7007      	strb	r7, [r0, #0]
    m_vol->cacheDirty();
   b70fa:	68a1      	ldr	r1, [r4, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b70fc:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   b7100:	f043 0301 	orr.w	r3, r3, #1
   b7104:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   b7108:	0653      	lsls	r3, r2, #25
   b710a:	f105 0501 	add.w	r5, r5, #1
   b710e:	d5d5      	bpl.n	b70bc <_ZN7FatFile6removeEv+0x64>
      if (!m_vol->cacheSync()) {
   b7110:	68a0      	ldr	r0, [r4, #8]
   b7112:	f7ff fb31 	bl	b6778 <_ZN9FatVolume9cacheSyncEv>
}
   b7116:	b00a      	add	sp, #40	; 0x28
   b7118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b711c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b711c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b7120:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b7124:	4606      	mov	r6, r0
   b7126:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b7128:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b712a:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b712c:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b7130:	6861      	ldr	r1, [r4, #4]
   b7132:	68a2      	ldr	r2, [r4, #8]
   b7134:	186b      	adds	r3, r5, r1
   b7136:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b7138:	4411      	add	r1, r2
   b713a:	4291      	cmp	r1, r2
   b713c:	d006      	beq.n	b714c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b713e:	f812 0b01 	ldrb.w	r0, [r2], #1
   b7142:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b7146:	4043      	eors	r3, r0
   b7148:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b714a:	e7f6      	b.n	b713a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b714c:	f1b9 0f03 	cmp.w	r9, #3
   b7150:	bf28      	it	cs
   b7152:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7156:	f109 0204 	add.w	r2, r9, #4
   b715a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b715c:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7160:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7162:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7164:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7166:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7168:	bf94      	ite	ls
   b716a:	3130      	addls	r1, #48	; 0x30
   b716c:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b716e:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7170:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b7172:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7176:	d1f1      	bne.n	b715c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b7178:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b717c:	2100      	movs	r1, #0
   b717e:	735f      	strb	r7, [r3, #13]
   b7180:	4630      	mov	r0, r6
   b7182:	f7ff fc44 	bl	b6a0e <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b7186:	2101      	movs	r1, #1
   b7188:	4630      	mov	r0, r6
   b718a:	f7ff fc21 	bl	b69d0 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b718e:	4601      	mov	r1, r0
   b7190:	b928      	cbnz	r0, b719e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b7192:	7870      	ldrb	r0, [r6, #1]
   b7194:	fab0 f080 	clz	r0, r0
   b7198:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b719a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b719e:	7803      	ldrb	r3, [r0, #0]
   b71a0:	b16b      	cbz	r3, b71be <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b71a2:	7ac3      	ldrb	r3, [r0, #11]
   b71a4:	071b      	lsls	r3, r3, #28
   b71a6:	d4ee      	bmi.n	b7186 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b71a8:	220b      	movs	r2, #11
   b71aa:	4640      	mov	r0, r8
   b71ac:	f007 f823 	bl	be1f6 <memcmp>
   b71b0:	2800      	cmp	r0, #0
   b71b2:	d1e8      	bne.n	b7186 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b71b4:	3501      	adds	r5, #1
   b71b6:	b2ad      	uxth	r5, r5
   b71b8:	2d64      	cmp	r5, #100	; 0x64
   b71ba:	d1b9      	bne.n	b7130 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b71bc:	e7ed      	b.n	b719a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b71be:	2001      	movs	r0, #1
   b71c0:	e7eb      	b.n	b719a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b71c4 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b71c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b71c8:	ed2d 8b02 	vpush	{d8}
   b71cc:	b08b      	sub	sp, #44	; 0x2c
   b71ce:	460d      	mov	r5, r1
   b71d0:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b71d2:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b71d4:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b71d6:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b71da:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b71dc:	d105      	bne.n	b71ea <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b71de:	2000      	movs	r0, #0
}
   b71e0:	b00b      	add	sp, #44	; 0x2c
   b71e2:	ecbd 8b02 	vpop	{d8}
   b71e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b71ea:	9b07      	ldr	r3, [sp, #28]
   b71ec:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b71ee:	2b00      	cmp	r3, #0
   b71f0:	d1f5      	bne.n	b71de <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b71f2:	6853      	ldr	r3, [r2, #4]
   b71f4:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b71f6:	7813      	ldrb	r3, [r2, #0]
   b71f8:	079c      	lsls	r4, r3, #30
   b71fa:	bf1f      	itttt	ne
   b71fc:	9b05      	ldrne	r3, [sp, #20]
   b71fe:	330c      	addne	r3, #12
   b7200:	220d      	movne	r2, #13
   b7202:	fbb3 f3f2 	udivne	r3, r3, r2
   b7206:	bf1a      	itte	ne
   b7208:	3301      	addne	r3, #1
   b720a:	b2db      	uxtbne	r3, r3
   b720c:	2301      	moveq	r3, #1
    seekSet(0);
   b720e:	2100      	movs	r1, #0
   b7210:	4628      	mov	r0, r5
   b7212:	9303      	str	r3, [sp, #12]
   b7214:	f7ff fbfb 	bl	b6a0e <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b7218:	f107 030d 	add.w	r3, r7, #13
  }
   b721c:	f04f 0b00 	mov.w	fp, #0
   b7220:	ee08 3a10 	vmov	s16, r3
   b7224:	46da      	mov	sl, fp
   b7226:	465c      	mov	r4, fp
   b7228:	465e      	mov	r6, fp
   b722a:	f8cd b010 	str.w	fp, [sp, #16]
   b722e:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b7230:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b7232:	2101      	movs	r1, #1
   b7234:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b7236:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b723a:	f7ff fbc9 	bl	b69d0 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b723e:	4603      	mov	r3, r0
   b7240:	2800      	cmp	r0, #0
   b7242:	d171      	bne.n	b7328 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b7244:	786b      	ldrb	r3, [r5, #1]
   b7246:	2b00      	cmp	r3, #0
   b7248:	d1c9      	bne.n	b71de <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b724a:	9b06      	ldr	r3, [sp, #24]
   b724c:	059a      	lsls	r2, r3, #22
   b724e:	d5c6      	bpl.n	b71de <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b7250:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b7254:	3b01      	subs	r3, #1
   b7256:	2b01      	cmp	r3, #1
   b7258:	d8c1      	bhi.n	b71de <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b725a:	9b04      	ldr	r3, [sp, #16]
   b725c:	2c00      	cmp	r4, #0
   b725e:	bf08      	it	eq
   b7260:	4643      	moveq	r3, r8
   b7262:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b7264:	9b03      	ldr	r3, [sp, #12]
   b7266:	429c      	cmp	r4, r3
   b7268:	f0c0 80f1 	bcc.w	b744e <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b726c:	f1b9 0f00 	cmp.w	r9, #0
   b7270:	f040 810a 	bne.w	b7488 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b7274:	9b04      	ldr	r3, [sp, #16]
   b7276:	4628      	mov	r0, r5
   b7278:	0159      	lsls	r1, r3, #5
   b727a:	f7ff fbc8 	bl	b6a0e <_ZN7FatFile7seekSetEm>
   b727e:	2800      	cmp	r0, #0
   b7280:	d0ad      	beq.n	b71de <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b7282:	9b03      	ldr	r3, [sp, #12]
   b7284:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b7288:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b728c:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b728e:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b7292:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b7296:	2e00      	cmp	r6, #0
   b7298:	f000 810d 	beq.w	b74b6 <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b729c:	2100      	movs	r1, #0
   b729e:	4628      	mov	r0, r5
   b72a0:	f7ff fb96 	bl	b69d0 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b72a4:	4604      	mov	r4, r0
   b72a6:	2800      	cmp	r0, #0
   b72a8:	d099      	beq.n	b71de <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b72aa:	68aa      	ldr	r2, [r5, #8]
   b72ac:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b72b0:	454e      	cmp	r6, r9
   b72b2:	f043 0301 	orr.w	r3, r3, #1
   b72b6:	bf0c      	ite	eq
   b72b8:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b72bc:	46b3      	movne	fp, r6
   b72be:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b72c2:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b72c6:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b72ca:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b72ce:	f107 000d 	add.w	r0, r7, #13
   b72d2:	f7ff fdbd 	bl	b6e50 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b72d6:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b72da:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b72dc:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b72e0:	f00b 031f 	and.w	r3, fp, #31
   b72e4:	220d      	movs	r2, #13
   b72e6:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b72e8:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b72ec:	4353      	muls	r3, r2
   b72ee:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b72f0:	9905      	ldr	r1, [sp, #20]
   b72f2:	4299      	cmp	r1, r3
   b72f4:	f240 80d0 	bls.w	b7498 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b72f8:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b72fc:	2a04      	cmp	r2, #4
   b72fe:	fa5f fe82 	uxtb.w	lr, r2
   b7302:	f102 0001 	add.w	r0, r2, #1
   b7306:	f200 80cd 	bhi.w	b74a4 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b730a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b730e:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b7312:	280d      	cmp	r0, #13
   b7314:	f103 0301 	add.w	r3, r3, #1
   b7318:	4602      	mov	r2, r0
   b731a:	d1e9      	bne.n	b72f0 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b731c:	3e01      	subs	r6, #1
   b731e:	b2f6      	uxtb	r6, r6
   b7320:	e7b9      	b.n	b7296 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b7322:	f04f 0901 	mov.w	r9, #1
   b7326:	e783      	b.n	b7230 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b7328:	7802      	ldrb	r2, [r0, #0]
   b732a:	2ae5      	cmp	r2, #229	; 0xe5
   b732c:	d000      	beq.n	b7330 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b732e:	b97a      	cbnz	r2, b7350 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b7330:	9904      	ldr	r1, [sp, #16]
   b7332:	2c00      	cmp	r4, #0
   b7334:	bf08      	it	eq
   b7336:	4641      	moveq	r1, r8
   b7338:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b733a:	9903      	ldr	r1, [sp, #12]
   b733c:	428c      	cmp	r4, r1
        freeFound++;
   b733e:	bf3c      	itt	cc
   b7340:	3401      	addcc	r4, #1
   b7342:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b7344:	2a00      	cmp	r2, #0
   b7346:	d080      	beq.n	b724a <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b7348:	2ae5      	cmp	r2, #229	; 0xe5
   b734a:	d105      	bne.n	b7358 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b734c:	2600      	movs	r6, #0
   b734e:	e76f      	b.n	b7230 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b7350:	9903      	ldr	r1, [sp, #12]
   b7352:	428c      	cmp	r4, r1
   b7354:	bf38      	it	cc
   b7356:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b7358:	2a2e      	cmp	r2, #46	; 0x2e
   b735a:	d0f7      	beq.n	b734c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b735c:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b735e:	290f      	cmp	r1, #15
   b7360:	d14a      	bne.n	b73f8 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b7362:	bb16      	cbnz	r6, b73aa <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b7364:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b7368:	f43f af62 	beq.w	b7230 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b736c:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b7370:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b7374:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b7376:	220d      	movs	r2, #13
   b7378:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b737c:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b7380:	9a05      	ldr	r2, [sp, #20]
   b7382:	4542      	cmp	r2, r8
   b7384:	d9e2      	bls.n	b734c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b7386:	eba2 0208 	sub.w	r2, r2, r8
   b738a:	9208      	str	r2, [sp, #32]
   b738c:	2200      	movs	r2, #0
   b738e:	eb02 0108 	add.w	r1, r2, r8
   b7392:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b7394:	4618      	mov	r0, r3
   b7396:	b2d1      	uxtb	r1, r2
   b7398:	f7ff fd46 	bl	b6e28 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b739c:	9908      	ldr	r1, [sp, #32]
   b739e:	428a      	cmp	r2, r1
   b73a0:	d10d      	bne.n	b73be <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b73a2:	2800      	cmp	r0, #0
   b73a4:	bf18      	it	ne
   b73a6:	2600      	movne	r6, #0
   b73a8:	e742      	b.n	b7230 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b73aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b73ae:	fa5f fa8a 	uxtb.w	sl, sl
   b73b2:	4552      	cmp	r2, sl
   b73b4:	d1ca      	bne.n	b734c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b73b6:	7b5a      	ldrb	r2, [r3, #13]
   b73b8:	455a      	cmp	r2, fp
   b73ba:	d0dc      	beq.n	b7376 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b73bc:	e7c6      	b.n	b734c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b73be:	28ff      	cmp	r0, #255	; 0xff
   b73c0:	d8c4      	bhi.n	b734c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b73c2:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b73c6:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b73ca:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b73cc:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b73ce:	bf9c      	itt	ls
   b73d0:	f10e 0020 	addls.w	r0, lr, #32
   b73d4:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b73d8:	4608      	mov	r0, r1
   b73da:	9909      	ldr	r1, [sp, #36]	; 0x24
   b73dc:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b73de:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b73e2:	f1bc 0f19 	cmp.w	ip, #25
   b73e6:	bf9c      	itt	ls
   b73e8:	3120      	addls	r1, #32
   b73ea:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b73ec:	4571      	cmp	r1, lr
   b73ee:	d1ad      	bne.n	b734c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b73f0:	3201      	adds	r2, #1
   b73f2:	2a0d      	cmp	r2, #13
   b73f4:	d1cb      	bne.n	b738e <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b73f6:	e71b      	b.n	b7230 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b73f8:	0708      	lsls	r0, r1, #28
   b73fa:	d4a7      	bmi.n	b734c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b73fc:	b15e      	cbz	r6, b7416 <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b73fe:	f1ba 0f01 	cmp.w	sl, #1
   b7402:	f47f aeec 	bne.w	b71de <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b7406:	4618      	mov	r0, r3
   b7408:	f7ff fd22 	bl	b6e50 <_ZN7FatFile11lfnChecksumEPh>
   b740c:	4558      	cmp	r0, fp
   b740e:	f47f aee6 	bne.w	b71de <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b7412:	46b1      	mov	r9, r6
   b7414:	e00e      	b.n	b7434 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b7416:	ee18 1a10 	vmov	r1, s16
   b741a:	220b      	movs	r2, #11
   b741c:	4618      	mov	r0, r3
   b741e:	f006 feea 	bl	be1f6 <memcmp>
   b7422:	2800      	cmp	r0, #0
   b7424:	f47f af04 	bne.w	b7230 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b7428:	f897 9000 	ldrb.w	r9, [r7]
   b742c:	f019 0901 	ands.w	r9, r9, #1
   b7430:	f47f af77 	bne.w	b7322 <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b7434:	9b06      	ldr	r3, [sp, #24]
   b7436:	0519      	lsls	r1, r3, #20
   b7438:	f53f aed1 	bmi.w	b71de <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b743c:	9b06      	ldr	r3, [sp, #24]
   b743e:	9807      	ldr	r0, [sp, #28]
   b7440:	f8cd 9000 	str.w	r9, [sp]
   b7444:	4642      	mov	r2, r8
   b7446:	4629      	mov	r1, r5
   b7448:	f7ff fb24 	bl	b6a94 <_ZN7FatFile15openCachedEntryEPS_tih>
   b744c:	e6c8      	b.n	b71e0 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b744e:	2100      	movs	r1, #0
   b7450:	4628      	mov	r0, r5
   b7452:	f7ff fabd 	bl	b69d0 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b7456:	b9a0      	cbnz	r0, b7482 <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b7458:	786b      	ldrb	r3, [r5, #1]
   b745a:	2b00      	cmp	r3, #0
   b745c:	f47f aebf 	bne.w	b71de <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b7460:	4628      	mov	r0, r5
   b7462:	f7ff f9a1 	bl	b67a8 <_ZN7FatFile13addDirClusterEv>
   b7466:	2800      	cmp	r0, #0
   b7468:	f43f aeb9 	beq.w	b71de <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b746c:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b746e:	791b      	ldrb	r3, [r3, #4]
   b7470:	2b01      	cmp	r3, #1
   b7472:	f63f aefb 	bhi.w	b726c <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b7476:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b7478:	3410      	adds	r4, #16
   b747a:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b747c:	42a3      	cmp	r3, r4
   b747e:	d8ef      	bhi.n	b7460 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b7480:	e6f4      	b.n	b726c <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b7482:	3401      	adds	r4, #1
   b7484:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b7486:	e6ed      	b.n	b7264 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b7488:	4639      	mov	r1, r7
   b748a:	4628      	mov	r0, r5
   b748c:	f7ff fe46 	bl	b711c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b7490:	2800      	cmp	r0, #0
   b7492:	f47f aeef 	bne.w	b7274 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b7496:	e6a2      	b.n	b71de <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b7498:	bf14      	ite	ne
   b749a:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b749e:	2100      	moveq	r1, #0
   b74a0:	b289      	uxth	r1, r1
   b74a2:	e72b      	b.n	b72fc <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b74a4:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b74a8:	bf94      	ite	ls
   b74aa:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b74ae:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b74b2:	8091      	strh	r1, [r2, #4]
   b74b4:	e72d      	b.n	b7312 <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b74b6:	4631      	mov	r1, r6
   b74b8:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b74ba:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b74be:	f7ff fa87 	bl	b69d0 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b74c2:	4604      	mov	r4, r0
   b74c4:	2800      	cmp	r0, #0
   b74c6:	f43f ae8a 	beq.w	b71de <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b74ca:	2220      	movs	r2, #32
   b74cc:	4631      	mov	r1, r6
   b74ce:	f006 feca 	bl	be266 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b74d2:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b74d6:	6023      	str	r3, [r4, #0]
   b74d8:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b74dc:	6063      	str	r3, [r4, #4]
   b74de:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b74e2:	8123      	strh	r3, [r4, #8]
   b74e4:	7dfb      	ldrb	r3, [r7, #23]
   b74e6:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b74e8:	783b      	ldrb	r3, [r7, #0]
   b74ea:	f003 0318 	and.w	r3, r3, #24
   b74ee:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b74f0:	4b0f      	ldr	r3, [pc, #60]	; (b7530 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b74f2:	681b      	ldr	r3, [r3, #0]
   b74f4:	b19b      	cbz	r3, b751e <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b74f6:	f104 010e 	add.w	r1, r4, #14
   b74fa:	f104 0010 	add.w	r0, r4, #16
   b74fe:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b7500:	8a23      	ldrh	r3, [r4, #16]
   b7502:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b7504:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b7506:	89e3      	ldrh	r3, [r4, #14]
   b7508:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b750a:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b750c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b7510:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b7514:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b7518:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b751c:	e78e      	b.n	b743c <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b751e:	2321      	movs	r3, #33	; 0x21
   b7520:	7423      	strb	r3, [r4, #16]
   b7522:	2328      	movs	r3, #40	; 0x28
   b7524:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b7526:	2308      	movs	r3, #8
   b7528:	73a6      	strb	r6, [r4, #14]
   b752a:	73e3      	strb	r3, [r4, #15]
   b752c:	e7e8      	b.n	b7500 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b752e:	bf00      	nop
   b7530:	2003e638 	.word	0x2003e638

000b7534 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7534:	b513      	push	{r0, r1, r4, lr}
   b7536:	4604      	mov	r4, r0
    }
   b7538:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b753a:	b159      	cbz	r1, b7554 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b753c:	9101      	str	r1, [sp, #4]
   b753e:	f006 ff46 	bl	be3ce <strlen>
   b7542:	6823      	ldr	r3, [r4, #0]
   b7544:	9901      	ldr	r1, [sp, #4]
   b7546:	68db      	ldr	r3, [r3, #12]
   b7548:	4602      	mov	r2, r0
   b754a:	4620      	mov	r0, r4
    }
   b754c:	b002      	add	sp, #8
   b754e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7552:	4718      	bx	r3
    }
   b7554:	b002      	add	sp, #8
   b7556:	bd10      	pop	{r4, pc}

000b7558 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b7558:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b755a:	7803      	ldrb	r3, [r0, #0]
   b755c:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b755e:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b7560:	d520      	bpl.n	b75a4 <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b7562:	6843      	ldr	r3, [r0, #4]
   b7564:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b7566:	f100 020c 	add.w	r2, r0, #12
   b756a:	6818      	ldr	r0, [r3, #0]
   b756c:	9201      	str	r2, [sp, #4]
   b756e:	f000 fb88 	bl	b7c82 <_ZN9SdSpiCard10writeBlockEmPKh>
   b7572:	9a01      	ldr	r2, [sp, #4]
   b7574:	4605      	mov	r5, r0
   b7576:	b918      	cbnz	r0, b7580 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b7578:	2500      	movs	r5, #0
}
   b757a:	4628      	mov	r0, r5
   b757c:	b003      	add	sp, #12
   b757e:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b7580:	7823      	ldrb	r3, [r4, #0]
   b7582:	079b      	lsls	r3, r3, #30
   b7584:	d404      	bmi.n	b7590 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b7586:	7823      	ldrb	r3, [r4, #0]
   b7588:	f023 0301 	bic.w	r3, r3, #1
   b758c:	7023      	strb	r3, [r4, #0]
   b758e:	e7f4      	b.n	b757a <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b7590:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b7594:	6919      	ldr	r1, [r3, #16]
   b7596:	4401      	add	r1, r0
   b7598:	6818      	ldr	r0, [r3, #0]
   b759a:	f000 fb72 	bl	b7c82 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b759e:	2800      	cmp	r0, #0
   b75a0:	d1f1      	bne.n	b7586 <_ZN8FatCache4syncEv+0x2e>
   b75a2:	e7e9      	b.n	b7578 <_ZN8FatCache4syncEv+0x20>
  return true;
   b75a4:	2501      	movs	r5, #1
   b75a6:	e7e8      	b.n	b757a <_ZN8FatCache4syncEv+0x22>

000b75a8 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b75a8:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b75aa:	6883      	ldr	r3, [r0, #8]
   b75ac:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b75ae:	4604      	mov	r4, r0
   b75b0:	460e      	mov	r6, r1
   b75b2:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b75b4:	d009      	beq.n	b75ca <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b75b6:	f7ff ffcf 	bl	b7558 <_ZN8FatCache4syncEv>
   b75ba:	b908      	cbnz	r0, b75c0 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b75bc:	2000      	movs	r0, #0
}
   b75be:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b75c0:	076b      	lsls	r3, r5, #29
   b75c2:	d50a      	bpl.n	b75da <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b75c4:	2300      	movs	r3, #0
   b75c6:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b75c8:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b75ca:	7822      	ldrb	r2, [r4, #0]
   b75cc:	f005 0503 	and.w	r5, r5, #3
   b75d0:	4620      	mov	r0, r4
   b75d2:	4315      	orrs	r5, r2
   b75d4:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b75d8:	e7f1      	b.n	b75be <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b75da:	6863      	ldr	r3, [r4, #4]
   b75dc:	f104 020c 	add.w	r2, r4, #12
   b75e0:	6818      	ldr	r0, [r3, #0]
   b75e2:	4631      	mov	r1, r6
   b75e4:	f000 fac4 	bl	b7b70 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b75e8:	2800      	cmp	r0, #0
   b75ea:	d1eb      	bne.n	b75c4 <_ZN8FatCache4readEmh+0x1c>
   b75ec:	e7e6      	b.n	b75bc <_ZN8FatCache4readEmh+0x14>

000b75ee <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b75ee:	7983      	ldrb	r3, [r0, #6]
   b75f0:	6940      	ldr	r0, [r0, #20]
   b75f2:	3902      	subs	r1, #2
   b75f4:	4099      	lsls	r1, r3
}
   b75f6:	4408      	add	r0, r1
   b75f8:	4770      	bx	lr

000b75fa <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b75fa:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b75fc:	b570      	push	{r4, r5, r6, lr}
   b75fe:	4605      	mov	r5, r0
   b7600:	460c      	mov	r4, r1
   b7602:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7604:	d802      	bhi.n	b760c <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b7606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b760a:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b760c:	69c3      	ldr	r3, [r0, #28]
   b760e:	428b      	cmp	r3, r1
   b7610:	d3f9      	bcc.n	b7606 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b7612:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7614:	2b20      	cmp	r3, #32
   b7616:	d116      	bne.n	b7646 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b7618:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b761a:	2202      	movs	r2, #2
   b761c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7620:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7624:	f7ff ffc0 	bl	b75a8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7628:	2800      	cmp	r0, #0
   b762a:	d0ec      	beq.n	b7606 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b762c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7630:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b7634:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b7638:	69ea      	ldr	r2, [r5, #28]
   b763a:	429a      	cmp	r2, r3
  *value = next;
   b763c:	bf26      	itte	cs
   b763e:	6033      	strcs	r3, [r6, #0]
  return 1;
   b7640:	2001      	movcs	r0, #1
    return 0;
   b7642:	2000      	movcc	r0, #0
   b7644:	e7e1      	b.n	b760a <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b7646:	2b10      	cmp	r3, #16
   b7648:	d1dd      	bne.n	b7606 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b764a:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b764e:	6981      	ldr	r1, [r0, #24]
   b7650:	2202      	movs	r2, #2
   b7652:	4419      	add	r1, r3
   b7654:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7658:	f7ff ffa6 	bl	b75a8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b765c:	2800      	cmp	r0, #0
   b765e:	d0d2      	beq.n	b7606 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b7660:	b2e4      	uxtb	r4, r4
   b7662:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b7666:	e7e7      	b.n	b7638 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b7668 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7668:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b766a:	b538      	push	{r3, r4, r5, lr}
   b766c:	460c      	mov	r4, r1
   b766e:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7670:	d801      	bhi.n	b7676 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b7672:	2000      	movs	r0, #0
}
   b7674:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7676:	69c3      	ldr	r3, [r0, #28]
   b7678:	428b      	cmp	r3, r1
   b767a:	d3fa      	bcc.n	b7672 <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b767c:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b767e:	2b20      	cmp	r3, #32
   b7680:	d10f      	bne.n	b76a2 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b7682:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7684:	2203      	movs	r2, #3
   b7686:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b768a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b768e:	f7ff ff8b 	bl	b75a8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7692:	2800      	cmp	r0, #0
   b7694:	d0ed      	beq.n	b7672 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b7696:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b769a:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b769e:	2001      	movs	r0, #1
   b76a0:	e7e8      	b.n	b7674 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b76a2:	2b10      	cmp	r3, #16
   b76a4:	d1e5      	bne.n	b7672 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b76a6:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b76aa:	6981      	ldr	r1, [r0, #24]
   b76ac:	2203      	movs	r2, #3
   b76ae:	4419      	add	r1, r3
   b76b0:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b76b4:	f7ff ff78 	bl	b75a8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b76b8:	2800      	cmp	r0, #0
   b76ba:	d0da      	beq.n	b7672 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b76bc:	b2e4      	uxtb	r4, r4
   b76be:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b76c2:	e7ec      	b.n	b769e <_ZN9FatVolume6fatPutEmm+0x36>

000b76c4 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b76c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b76c8:	68c4      	ldr	r4, [r0, #12]
   b76ca:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b76cc:	4605      	mov	r5, r0
   b76ce:	460e      	mov	r6, r1
   b76d0:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b76d2:	d301      	bcc.n	b76d8 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b76d4:	2701      	movs	r7, #1
   b76d6:	e001      	b.n	b76dc <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b76d8:	460c      	mov	r4, r1
    setStart = false;
   b76da:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b76dc:	69eb      	ldr	r3, [r5, #28]
    find++;
   b76de:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b76e0:	42a3      	cmp	r3, r4
   b76e2:	d202      	bcs.n	b76ea <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b76e4:	b9c7      	cbnz	r7, b7718 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b76e6:	68ec      	ldr	r4, [r5, #12]
   b76e8:	e7f4      	b.n	b76d4 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b76ea:	42a6      	cmp	r6, r4
   b76ec:	d014      	beq.n	b7718 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b76ee:	aa01      	add	r2, sp, #4
   b76f0:	4621      	mov	r1, r4
   b76f2:	4628      	mov	r0, r5
   b76f4:	f7ff ff81 	bl	b75fa <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b76f8:	2800      	cmp	r0, #0
   b76fa:	db0d      	blt.n	b7718 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b76fc:	d0ee      	beq.n	b76dc <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b76fe:	9b01      	ldr	r3, [sp, #4]
   b7700:	2b00      	cmp	r3, #0
   b7702:	d1eb      	bne.n	b76dc <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b7704:	b107      	cbz	r7, b7708 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b7706:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b7708:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b770c:	4621      	mov	r1, r4
   b770e:	4628      	mov	r0, r5
   b7710:	f7ff ffaa 	bl	b7668 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b7714:	4607      	mov	r7, r0
   b7716:	b920      	cbnz	r0, b7722 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b7718:	2700      	movs	r7, #0
}
   b771a:	4638      	mov	r0, r7
   b771c:	b002      	add	sp, #8
   b771e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b7722:	b916      	cbnz	r6, b772a <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b7724:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b7728:	e7f7      	b.n	b771a <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b772a:	4622      	mov	r2, r4
   b772c:	4631      	mov	r1, r6
   b772e:	4628      	mov	r0, r5
   b7730:	f7ff ff9a 	bl	b7668 <_ZN9FatVolume6fatPutEmm>
   b7734:	2800      	cmp	r0, #0
   b7736:	d1f5      	bne.n	b7724 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b7738:	e7ee      	b.n	b7718 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b773a <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b773a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b773c:	4605      	mov	r5, r0
   b773e:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b7740:	aa01      	add	r2, sp, #4
   b7742:	4621      	mov	r1, r4
   b7744:	4628      	mov	r0, r5
   b7746:	f7ff ff58 	bl	b75fa <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b774a:	1e06      	subs	r6, r0, #0
   b774c:	db10      	blt.n	b7770 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b774e:	2200      	movs	r2, #0
   b7750:	4621      	mov	r1, r4
   b7752:	4628      	mov	r0, r5
   b7754:	f7ff ff88 	bl	b7668 <_ZN9FatVolume6fatPutEmm>
   b7758:	b150      	cbz	r0, b7770 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b775a:	68eb      	ldr	r3, [r5, #12]
   b775c:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b775e:	bf24      	itt	cs
   b7760:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b7764:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b7766:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b7768:	2e00      	cmp	r6, #0
   b776a:	d1e9      	bne.n	b7740 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b776c:	b002      	add	sp, #8
   b776e:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7770:	2000      	movs	r0, #0
   b7772:	e7fb      	b.n	b776c <_ZN9FatVolume9freeChainEm+0x32>

000b7774 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b7774:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b7776:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b7778:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b777a:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b777c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b7780:	4604      	mov	r4, r0
  m_fatType = 0;
   b7782:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b7784:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b7788:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b778a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b778e:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b7790:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b7794:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b7798:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b779c:	460d      	mov	r5, r1
   b779e:	b1b9      	cbz	r1, b77d0 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b77a0:	2904      	cmp	r1, #4
   b77a2:	d901      	bls.n	b77a8 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b77a4:	2000      	movs	r0, #0
}
   b77a6:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b77a8:	4611      	mov	r1, r2
   b77aa:	4630      	mov	r0, r6
   b77ac:	f7ff fefc 	bl	b75a8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b77b0:	2800      	cmp	r0, #0
   b77b2:	d0f7      	beq.n	b77a4 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b77b4:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b77b8:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b77bc:	065b      	lsls	r3, r3, #25
   b77be:	d1f1      	bne.n	b77a4 <_ZN9FatVolume4initEh+0x30>
   b77c0:	f105 011b 	add.w	r1, r5, #27
   b77c4:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b77c8:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b77cc:	2d00      	cmp	r5, #0
   b77ce:	d0e9      	beq.n	b77a4 <_ZN9FatVolume4initEh+0x30>
   b77d0:	2200      	movs	r2, #0
   b77d2:	4629      	mov	r1, r5
   b77d4:	4630      	mov	r0, r6
   b77d6:	f7ff fee7 	bl	b75a8 <_ZN8FatCache4readEmh>
  if (!pc) {
   b77da:	2800      	cmp	r0, #0
   b77dc:	d0e2      	beq.n	b77a4 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b77de:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b77e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b77e6:	d1dd      	bne.n	b77a4 <_ZN9FatVolume4initEh+0x30>
   b77e8:	7c03      	ldrb	r3, [r0, #16]
   b77ea:	2b02      	cmp	r3, #2
   b77ec:	d1da      	bne.n	b77a4 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b77ee:	89c3      	ldrh	r3, [r0, #14]
   b77f0:	2b00      	cmp	r3, #0
   b77f2:	d0d7      	beq.n	b77a4 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b77f4:	7b41      	ldrb	r1, [r0, #13]
   b77f6:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b77f8:	1e4b      	subs	r3, r1, #1
   b77fa:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b77fc:	2300      	movs	r3, #0
   b77fe:	71a3      	strb	r3, [r4, #6]
   b7800:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7802:	2301      	movs	r3, #1
   b7804:	4299      	cmp	r1, r3
   b7806:	d007      	beq.n	b7818 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b7808:	3e01      	subs	r6, #1
   b780a:	d0cb      	beq.n	b77a4 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b780c:	79a2      	ldrb	r2, [r4, #6]
   b780e:	005b      	lsls	r3, r3, #1
   b7810:	3201      	adds	r2, #1
   b7812:	b2db      	uxtb	r3, r3
   b7814:	71a2      	strb	r2, [r4, #6]
   b7816:	e7f5      	b.n	b7804 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b7818:	8ac1      	ldrh	r1, [r0, #22]
   b781a:	b901      	cbnz	r1, b781e <_ZN9FatVolume4initEh+0xaa>
   b781c:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b781e:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b7820:	89c3      	ldrh	r3, [r0, #14]
   b7822:	442b      	add	r3, r5
   b7824:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b7826:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b782a:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b782c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b7830:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b7832:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b7836:	0149      	lsls	r1, r1, #5
   b7838:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b783c:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b7840:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b7842:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b7846:	b902      	cbnz	r2, b784a <_ZN9FatVolume4initEh+0xd6>
   b7848:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b784a:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b784c:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b784e:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b7850:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b7852:	1c4b      	adds	r3, r1, #1
   b7854:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b7856:	f640 73f4 	movw	r3, #4084	; 0xff4
   b785a:	4299      	cmp	r1, r3
   b785c:	d802      	bhi.n	b7864 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b785e:	230c      	movs	r3, #12
   b7860:	71e3      	strb	r3, [r4, #7]
   b7862:	e79f      	b.n	b77a4 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b7864:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b7868:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b786a:	bf85      	ittet	hi
   b786c:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b786e:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b7870:	2310      	movls	r3, #16
    m_fatType = 32;
   b7872:	2320      	movhi	r3, #32
   b7874:	71e3      	strb	r3, [r4, #7]
  return true;
   b7876:	2001      	movs	r0, #1
   b7878:	e795      	b.n	b77a6 <_ZN9FatVolume4initEh+0x32>

000b787a <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b787a:	f000 bacb 	b.w	b7e14 <_ZN14SdSpiAltDriver4sendEh>

000b787e <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b787e:	f000 baae 	b.w	b7dde <_ZN14SdSpiAltDriver7receiveEv>
	...

000b7884 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7884:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7886:	4e0e      	ldr	r6, [pc, #56]	; (b78c0 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7888:	460d      	mov	r5, r1
   b788a:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b788c:	f001 fcf0 	bl	b9270 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7890:	6833      	ldr	r3, [r6, #0]
   b7892:	1ac0      	subs	r0, r0, r3
   b7894:	4b0b      	ldr	r3, [pc, #44]	; (b78c4 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b7896:	4298      	cmp	r0, r3
   b7898:	d908      	bls.n	b78ac <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b789a:	f001 fcf1 	bl	b9280 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b789e:	4b0a      	ldr	r3, [pc, #40]	; (b78c8 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b78a0:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b78a2:	f001 fed9 	bl	b9658 <spark_process>
   b78a6:	f001 fce3 	bl	b9270 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b78aa:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b78ac:	f001 fce8 	bl	b9280 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b78b0:	b280      	uxth	r0, r0
   b78b2:	1b40      	subs	r0, r0, r5
}
   b78b4:	42a0      	cmp	r0, r4
   b78b6:	bfd4      	ite	le
   b78b8:	2000      	movle	r0, #0
   b78ba:	2001      	movgt	r0, #1
   b78bc:	bd70      	pop	{r4, r5, r6, pc}
   b78be:	bf00      	nop
   b78c0:	2003e640 	.word	0x2003e640
   b78c4:	000186a0 	.word	0x000186a0
   b78c8:	2003e728 	.word	0x2003e728

000b78cc <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b78cc:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b78ce:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b78d0:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b78d2:	b94d      	cbnz	r5, b78e8 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b78d4:	6840      	ldr	r0, [r0, #4]
   b78d6:	f000 fa6b 	bl	b7db0 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b78da:	6863      	ldr	r3, [r4, #4]
   b78dc:	4629      	mov	r1, r5
   b78de:	7d18      	ldrb	r0, [r3, #20]
   b78e0:	f005 fd0d 	bl	bd2fe <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b78e4:	2301      	movs	r3, #1
   b78e6:	7223      	strb	r3, [r4, #8]
  }
}
   b78e8:	bd38      	pop	{r3, r4, r5, pc}

000b78ea <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b78ea:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b78ec:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b78ee:	4604      	mov	r4, r0
  if (m_spiActive) {
   b78f0:	b16b      	cbz	r3, b790e <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b78f2:	6843      	ldr	r3, [r0, #4]
   b78f4:	2101      	movs	r1, #1
   b78f6:	7d18      	ldrb	r0, [r3, #20]
   b78f8:	f005 fd01 	bl	bd2fe <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b78fc:	6860      	ldr	r0, [r4, #4]
   b78fe:	21ff      	movs	r1, #255	; 0xff
   b7900:	f7ff ffbb 	bl	b787a <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b7904:	6860      	ldr	r0, [r4, #4]
   b7906:	f000 fa67 	bl	b7dd8 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b790a:	2300      	movs	r3, #0
   b790c:	7223      	strb	r3, [r4, #8]
  }
}
   b790e:	bd10      	pop	{r4, pc}

000b7910 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b7910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7912:	4604      	mov	r4, r0
   b7914:	460d      	mov	r5, r1
   b7916:	4616      	mov	r6, r2
   b7918:	f001 fcb2 	bl	b9280 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b791c:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b791e:	6860      	ldr	r0, [r4, #4]
   b7920:	f7ff ffad 	bl	b787e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7924:	28ff      	cmp	r0, #255	; 0xff
   b7926:	7260      	strb	r0, [r4, #9]
   b7928:	d10e      	bne.n	b7948 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b792a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b792e:	4639      	mov	r1, r7
   b7930:	4620      	mov	r0, r4
   b7932:	f7ff ffa7 	bl	b7884 <_ZN9SdSpiCard10isTimedOutEtt>
   b7936:	2800      	cmp	r0, #0
   b7938:	d0f1      	beq.n	b791e <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b793a:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b793c:	4620      	mov	r0, r4
   b793e:	7023      	strb	r3, [r4, #0]
   b7940:	f7ff ffd3 	bl	b78ea <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7944:	2000      	movs	r0, #0
}
   b7946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b7948:	28fe      	cmp	r0, #254	; 0xfe
   b794a:	d001      	beq.n	b7950 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b794c:	2350      	movs	r3, #80	; 0x50
   b794e:	e7f5      	b.n	b793c <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b7950:	6860      	ldr	r0, [r4, #4]
   b7952:	4632      	mov	r2, r6
   b7954:	4629      	mov	r1, r5
   b7956:	f000 fa47 	bl	b7de8 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b795a:	7260      	strb	r0, [r4, #9]
   b795c:	b108      	cbz	r0, b7962 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b795e:	2360      	movs	r3, #96	; 0x60
   b7960:	e7ec      	b.n	b793c <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b7962:	6860      	ldr	r0, [r4, #4]
   b7964:	f7ff ff8b 	bl	b787e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b7968:	6860      	ldr	r0, [r4, #4]
   b796a:	f7ff ff88 	bl	b787e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b796e:	2001      	movs	r0, #1
   b7970:	e7e9      	b.n	b7946 <_ZN9SdSpiCard8readDataEPhj+0x36>

000b7972 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b7972:	b570      	push	{r4, r5, r6, lr}
   b7974:	4604      	mov	r4, r0
   b7976:	460e      	mov	r6, r1
   b7978:	f001 fc82 	bl	b9280 <HAL_Timer_Get_Milli_Seconds>
   b797c:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b797e:	4632      	mov	r2, r6
   b7980:	4629      	mov	r1, r5
   b7982:	4620      	mov	r0, r4
   b7984:	f7ff ff7e 	bl	b7884 <_ZN9SdSpiCard10isTimedOutEtt>
   b7988:	b930      	cbnz	r0, b7998 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b798a:	6860      	ldr	r0, [r4, #4]
   b798c:	f7ff ff77 	bl	b787e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7990:	28ff      	cmp	r0, #255	; 0xff
   b7992:	d1f4      	bne.n	b797e <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b7994:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b7996:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7998:	2000      	movs	r0, #0
   b799a:	e7fc      	b.n	b7996 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b799c <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b799c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b799e:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b79a0:	9201      	str	r2, [sp, #4]
   b79a2:	4604      	mov	r4, r0
   b79a4:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b79a6:	b90b      	cbnz	r3, b79ac <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b79a8:	f7ff ff90 	bl	b78cc <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b79ac:	b125      	cbz	r5, b79b8 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b79ae:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b79b2:	4620      	mov	r0, r4
   b79b4:	f7ff ffdd 	bl	b7972 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b79b8:	6860      	ldr	r0, [r4, #4]
   b79ba:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b79be:	f7ff ff5c 	bl	b787a <_ZN9SdSpiCard7spiSendEh.isra.0>
   b79c2:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b79c4:	af01      	add	r7, sp, #4
   b79c6:	5db9      	ldrb	r1, [r7, r6]
   b79c8:	6860      	ldr	r0, [r4, #4]
   b79ca:	f7ff ff56 	bl	b787a <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b79ce:	3e01      	subs	r6, #1
   b79d0:	d2f9      	bcs.n	b79c6 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b79d2:	2d00      	cmp	r5, #0
   b79d4:	6860      	ldr	r0, [r4, #4]
   b79d6:	bf0c      	ite	eq
   b79d8:	2195      	moveq	r1, #149	; 0x95
   b79da:	2187      	movne	r1, #135	; 0x87
   b79dc:	f7ff ff4d 	bl	b787a <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b79e0:	6860      	ldr	r0, [r4, #4]
   b79e2:	f7ff ff4c 	bl	b787e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b79e6:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b79e8:	6860      	ldr	r0, [r4, #4]
   b79ea:	f7ff ff48 	bl	b787e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b79ee:	0603      	lsls	r3, r0, #24
   b79f0:	7260      	strb	r0, [r4, #9]
   b79f2:	d503      	bpl.n	b79fc <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b79f4:	3d01      	subs	r5, #1
   b79f6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b79fa:	d1f5      	bne.n	b79e8 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b79fc:	b003      	add	sp, #12
   b79fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7a00 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b7a00:	b570      	push	{r4, r5, r6, lr}
   b7a02:	4604      	mov	r4, r0
   b7a04:	460d      	mov	r5, r1
   b7a06:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b7a08:	2137      	movs	r1, #55	; 0x37
   b7a0a:	2200      	movs	r2, #0
   b7a0c:	f7ff ffc6 	bl	b799c <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b7a10:	4632      	mov	r2, r6
   b7a12:	4629      	mov	r1, r5
   b7a14:	4620      	mov	r0, r4
  }
   b7a16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b7a1a:	f7ff bfbf 	b.w	b799c <_ZN9SdSpiCard11cardCommandEhm>
	...

000b7a20 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b7a24:	2500      	movs	r5, #0
   b7a26:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b7a28:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b7a2a:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b7a2c:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7a2e:	4604      	mov	r4, r0
   b7a30:	4690      	mov	r8, r2
   b7a32:	461e      	mov	r6, r3
   b7a34:	f001 fc24 	bl	b9280 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b7a38:	4641      	mov	r1, r8
   b7a3a:	4607      	mov	r7, r0
   b7a3c:	6860      	ldr	r0, [r4, #4]
   b7a3e:	f000 f9bb 	bl	b7db8 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b7a42:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b7a44:	4a49      	ldr	r2, [pc, #292]	; (b7b6c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b7a46:	721d      	strb	r5, [r3, #8]
   b7a48:	2501      	movs	r5, #1
   b7a4a:	60da      	str	r2, [r3, #12]
   b7a4c:	821d      	strh	r5, [r3, #16]
  spiStart();
   b7a4e:	4620      	mov	r0, r4
   b7a50:	f7ff ff3c 	bl	b78cc <_ZN9SdSpiCard8spiStartEv>
   b7a54:	6863      	ldr	r3, [r4, #4]
   b7a56:	4629      	mov	r1, r5
   b7a58:	7d18      	ldrb	r0, [r3, #20]
   b7a5a:	f005 fc50 	bl	bd2fe <digitalWrite>
   b7a5e:	250a      	movs	r5, #10
    spiSend(0XFF);
   b7a60:	6860      	ldr	r0, [r4, #4]
   b7a62:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b7a64:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b7a66:	f7ff ff08 	bl	b787a <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b7a6a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7a6e:	d1f7      	bne.n	b7a60 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b7a70:	6863      	ldr	r3, [r4, #4]
   b7a72:	4629      	mov	r1, r5
   b7a74:	7d18      	ldrb	r0, [r3, #20]
   b7a76:	f005 fc42 	bl	bd2fe <digitalWrite>
  }
   b7a7a:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b7a7c:	2200      	movs	r2, #0
   b7a7e:	4611      	mov	r1, r2
   b7a80:	4620      	mov	r0, r4
   b7a82:	f7ff ff8b 	bl	b799c <_ZN9SdSpiCard11cardCommandEhm>
   b7a86:	2801      	cmp	r0, #1
   b7a88:	4680      	mov	r8, r0
   b7a8a:	d018      	beq.n	b7abe <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b7a8c:	3d01      	subs	r5, #1
   b7a8e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7a92:	d107      	bne.n	b7aa4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b7a94:	2320      	movs	r3, #32
  spiStop();
   b7a96:	4620      	mov	r0, r4
   b7a98:	7023      	strb	r3, [r4, #0]
   b7a9a:	f7ff ff26 	bl	b78ea <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7a9e:	2000      	movs	r0, #0
}
   b7aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b7aa4:	6860      	ldr	r0, [r4, #4]
   b7aa6:	21fd      	movs	r1, #253	; 0xfd
   b7aa8:	f7ff fee7 	bl	b787a <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7aac:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b7ab0:	6860      	ldr	r0, [r4, #4]
   b7ab2:	f7ff fee4 	bl	b787e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b7ab6:	f1b8 0801 	subs.w	r8, r8, #1
   b7aba:	d1f9      	bne.n	b7ab0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b7abc:	e7de      	b.n	b7a7c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b7abe:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b7ac2:	2108      	movs	r1, #8
   b7ac4:	4620      	mov	r0, r4
   b7ac6:	f7ff ff69 	bl	b799c <_ZN9SdSpiCard11cardCommandEhm>
   b7aca:	2805      	cmp	r0, #5
   b7acc:	d114      	bne.n	b7af8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b7ace:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7ad2:	2500      	movs	r5, #0
   b7ad4:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b7ad6:	462a      	mov	r2, r5
   b7ad8:	2129      	movs	r1, #41	; 0x29
   b7ada:	4620      	mov	r0, r4
   b7adc:	f7ff ff90 	bl	b7a00 <_ZN9SdSpiCard8cardAcmdEhm>
   b7ae0:	4602      	mov	r2, r0
   b7ae2:	b1d8      	cbz	r0, b7b1c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b7ae4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b7ae8:	4639      	mov	r1, r7
   b7aea:	4620      	mov	r0, r4
   b7aec:	f7ff feca 	bl	b7884 <_ZN9SdSpiCard10isTimedOutEtt>
   b7af0:	2800      	cmp	r0, #0
   b7af2:	d0f0      	beq.n	b7ad6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b7af4:	2343      	movs	r3, #67	; 0x43
   b7af6:	e7ce      	b.n	b7a96 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b7af8:	2504      	movs	r5, #4
      m_status = spiReceive();
   b7afa:	6860      	ldr	r0, [r4, #4]
   b7afc:	f7ff febf 	bl	b787e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b7b00:	3d01      	subs	r5, #1
   b7b02:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b7b06:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b7b08:	d1f7      	bne.n	b7afa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b7b0a:	28aa      	cmp	r0, #170	; 0xaa
   b7b0c:	d104      	bne.n	b7b18 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b7b0e:	2302      	movs	r3, #2
   b7b10:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7b12:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b7b16:	e7dd      	b.n	b7ad4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b7b18:	2325      	movs	r3, #37	; 0x25
   b7b1a:	e7bc      	b.n	b7a96 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b7b1c:	7aa3      	ldrb	r3, [r4, #10]
   b7b1e:	2b02      	cmp	r3, #2
   b7b20:	d118      	bne.n	b7b54 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b7b22:	213a      	movs	r1, #58	; 0x3a
   b7b24:	4620      	mov	r0, r4
   b7b26:	f7ff ff39 	bl	b799c <_ZN9SdSpiCard11cardCommandEhm>
   b7b2a:	b108      	cbz	r0, b7b30 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b7b2c:	2337      	movs	r3, #55	; 0x37
   b7b2e:	e7b2      	b.n	b7a96 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b7b30:	6860      	ldr	r0, [r4, #4]
   b7b32:	f7ff fea4 	bl	b787e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7b36:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b7b3a:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b7b3c:	bf04      	itt	eq
   b7b3e:	2303      	moveq	r3, #3
   b7b40:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b7b42:	6860      	ldr	r0, [r4, #4]
   b7b44:	f7ff fe9b 	bl	b787e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7b48:	6860      	ldr	r0, [r4, #4]
   b7b4a:	f7ff fe98 	bl	b787e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7b4e:	6860      	ldr	r0, [r4, #4]
   b7b50:	f7ff fe95 	bl	b787e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b7b54:	4620      	mov	r0, r4
   b7b56:	f7ff fec8 	bl	b78ea <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b7b5a:	6863      	ldr	r3, [r4, #4]
   b7b5c:	7930      	ldrb	r0, [r6, #4]
   b7b5e:	68b1      	ldr	r1, [r6, #8]
   b7b60:	89b2      	ldrh	r2, [r6, #12]
   b7b62:	821a      	strh	r2, [r3, #16]
   b7b64:	7218      	strb	r0, [r3, #8]
   b7b66:	60d9      	str	r1, [r3, #12]
  return true;
   b7b68:	2001      	movs	r0, #1
   b7b6a:	e799      	b.n	b7aa0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b7b6c:	0003d090 	.word	0x0003d090

000b7b70 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7b70:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7b72:	7a83      	ldrb	r3, [r0, #10]
   b7b74:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b7b76:	bf18      	it	ne
   b7b78:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7b7a:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b7b7c:	460a      	mov	r2, r1
   b7b7e:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7b80:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b7b82:	f7ff ff0b 	bl	b799c <_ZN9SdSpiCard11cardCommandEhm>
   b7b86:	b130      	cbz	r0, b7b96 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b7b88:	2330      	movs	r3, #48	; 0x30
   b7b8a:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7b8c:	4620      	mov	r0, r4
   b7b8e:	f7ff feac 	bl	b78ea <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7b92:	2500      	movs	r5, #0
   b7b94:	e00b      	b.n	b7bae <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b7b96:	4629      	mov	r1, r5
   b7b98:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7b9c:	4620      	mov	r0, r4
   b7b9e:	f7ff feb7 	bl	b7910 <_ZN9SdSpiCard8readDataEPhj>
   b7ba2:	4605      	mov	r5, r0
   b7ba4:	2800      	cmp	r0, #0
   b7ba6:	d0f1      	beq.n	b7b8c <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b7ba8:	4620      	mov	r0, r4
   b7baa:	f7ff fe9e 	bl	b78ea <_ZN9SdSpiCard7spiStopEv>
}
   b7bae:	4628      	mov	r0, r5
   b7bb0:	bd38      	pop	{r3, r4, r5, pc}

000b7bb2 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7bb2:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7bb4:	7a83      	ldrb	r3, [r0, #10]
   b7bb6:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7bb8:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7bba:	bf18      	it	ne
   b7bbc:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b7bbe:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7bc0:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b7bc2:	f7ff feeb 	bl	b799c <_ZN9SdSpiCard11cardCommandEhm>
   b7bc6:	b130      	cbz	r0, b7bd6 <_ZN9SdSpiCard9readStartEm+0x24>
   b7bc8:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b7bca:	4620      	mov	r0, r4
   b7bcc:	7023      	strb	r3, [r4, #0]
   b7bce:	f7ff fe8c 	bl	b78ea <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7bd2:	2000      	movs	r0, #0
}
   b7bd4:	bd10      	pop	{r4, pc}
  return true;
   b7bd6:	2001      	movs	r0, #1
   b7bd8:	e7fc      	b.n	b7bd4 <_ZN9SdSpiCard9readStartEm+0x22>

000b7bda <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b7bda:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b7bdc:	2200      	movs	r2, #0
   b7bde:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b7be0:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b7be2:	f7ff fedb 	bl	b799c <_ZN9SdSpiCard11cardCommandEhm>
   b7be6:	b130      	cbz	r0, b7bf6 <_ZN9SdSpiCard8readStopEv+0x1c>
   b7be8:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b7bea:	4620      	mov	r0, r4
   b7bec:	7023      	strb	r3, [r4, #0]
   b7bee:	f7ff fe7c 	bl	b78ea <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7bf2:	2000      	movs	r0, #0
}
   b7bf4:	bd10      	pop	{r4, pc}
  spiStop();
   b7bf6:	4620      	mov	r0, r4
   b7bf8:	f7ff fe77 	bl	b78ea <_ZN9SdSpiCard7spiStopEv>
  return true;
   b7bfc:	2001      	movs	r0, #1
   b7bfe:	e7f9      	b.n	b7bf4 <_ZN9SdSpiCard8readStopEv+0x1a>

000b7c00 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b7c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7c02:	4604      	mov	r4, r0
   b7c04:	4616      	mov	r6, r2
   b7c06:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b7c08:	f7ff ffd3 	bl	b7bb2 <_ZN9SdSpiCard9readStartEm>
   b7c0c:	b168      	cbz	r0, b7c2a <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b7c0e:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b7c10:	b2ab      	uxth	r3, r5
   b7c12:	429f      	cmp	r7, r3
   b7c14:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b7c18:	d909      	bls.n	b7c2e <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b7c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7c1e:	4620      	mov	r0, r4
   b7c20:	f7ff fe76 	bl	b7910 <_ZN9SdSpiCard8readDataEPhj>
   b7c24:	3501      	adds	r5, #1
   b7c26:	2800      	cmp	r0, #0
   b7c28:	d1f2      	bne.n	b7c10 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b7c2a:	2000      	movs	r0, #0
   b7c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b7c2e:	4620      	mov	r0, r4
}
   b7c30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b7c34:	f7ff bfd1 	b.w	b7bda <_ZN9SdSpiCard8readStopEv>

000b7c38 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b7c38:	b538      	push	{r3, r4, r5, lr}
   b7c3a:	4604      	mov	r4, r0
   b7c3c:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b7c3e:	6840      	ldr	r0, [r0, #4]
   b7c40:	f7ff fe1b 	bl	b787a <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b7c44:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7c48:	6860      	ldr	r0, [r4, #4]
   b7c4a:	4629      	mov	r1, r5
   b7c4c:	f000 f8e6 	bl	b7e1c <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b7c50:	6860      	ldr	r0, [r4, #4]
   b7c52:	21ff      	movs	r1, #255	; 0xff
   b7c54:	f7ff fe11 	bl	b787a <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b7c58:	6860      	ldr	r0, [r4, #4]
   b7c5a:	21ff      	movs	r1, #255	; 0xff
   b7c5c:	f7ff fe0d 	bl	b787a <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b7c60:	6860      	ldr	r0, [r4, #4]
   b7c62:	f7ff fe0c 	bl	b787e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7c66:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b7c68:	f000 001f 	and.w	r0, r0, #31
   b7c6c:	2805      	cmp	r0, #5
   b7c6e:	d006      	beq.n	b7c7e <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b7c70:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7c72:	4620      	mov	r0, r4
   b7c74:	7023      	strb	r3, [r4, #0]
   b7c76:	f7ff fe38 	bl	b78ea <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7c7a:	2000      	movs	r0, #0
}
   b7c7c:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b7c7e:	2001      	movs	r0, #1
   b7c80:	e7fc      	b.n	b7c7c <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b7c82 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7c82:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7c84:	7a83      	ldrb	r3, [r0, #10]
   b7c86:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b7c88:	bf18      	it	ne
   b7c8a:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7c8c:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b7c8e:	460a      	mov	r2, r1
   b7c90:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7c92:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b7c94:	f7ff fe82 	bl	b799c <_ZN9SdSpiCard11cardCommandEhm>
   b7c98:	4606      	mov	r6, r0
   b7c9a:	b130      	cbz	r0, b7caa <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b7c9c:	2332      	movs	r3, #50	; 0x32
   b7c9e:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7ca0:	4620      	mov	r0, r4
   b7ca2:	f7ff fe22 	bl	b78ea <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7ca6:	2500      	movs	r5, #0
   b7ca8:	e01f      	b.n	b7cea <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b7caa:	462a      	mov	r2, r5
   b7cac:	21fe      	movs	r1, #254	; 0xfe
   b7cae:	4620      	mov	r0, r4
   b7cb0:	f7ff ffc2 	bl	b7c38 <_ZN9SdSpiCard9writeDataEhPKh>
   b7cb4:	2800      	cmp	r0, #0
   b7cb6:	d0f3      	beq.n	b7ca0 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7cb8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b7cbc:	4620      	mov	r0, r4
   b7cbe:	f7ff fe58 	bl	b7972 <_ZN9SdSpiCard11waitNotBusyEt>
   b7cc2:	4605      	mov	r5, r0
   b7cc4:	b908      	cbnz	r0, b7cca <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b7cc6:	235a      	movs	r3, #90	; 0x5a
   b7cc8:	e7e9      	b.n	b7c9e <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b7cca:	4632      	mov	r2, r6
   b7ccc:	210d      	movs	r1, #13
   b7cce:	4620      	mov	r0, r4
   b7cd0:	f7ff fe64 	bl	b799c <_ZN9SdSpiCard11cardCommandEhm>
   b7cd4:	b108      	cbz	r0, b7cda <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b7cd6:	2329      	movs	r3, #41	; 0x29
   b7cd8:	e7e1      	b.n	b7c9e <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b7cda:	6860      	ldr	r0, [r4, #4]
   b7cdc:	f7ff fdcf 	bl	b787e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7ce0:	2800      	cmp	r0, #0
   b7ce2:	d1f8      	bne.n	b7cd6 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b7ce4:	4620      	mov	r0, r4
   b7ce6:	f7ff fe00 	bl	b78ea <_ZN9SdSpiCard7spiStopEv>
}
   b7cea:	4628      	mov	r0, r5
   b7cec:	bd70      	pop	{r4, r5, r6, pc}

000b7cee <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b7cee:	b513      	push	{r0, r1, r4, lr}
   b7cf0:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7cf2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b7cf6:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7cf8:	f7ff fe3b 	bl	b7972 <_ZN9SdSpiCard11waitNotBusyEt>
   b7cfc:	9a01      	ldr	r2, [sp, #4]
   b7cfe:	b930      	cbnz	r0, b7d0e <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b7d00:	235b      	movs	r3, #91	; 0x5b
   b7d02:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7d04:	4620      	mov	r0, r4
   b7d06:	f7ff fdf0 	bl	b78ea <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7d0a:	2000      	movs	r0, #0
   b7d0c:	e005      	b.n	b7d1a <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b7d0e:	21fc      	movs	r1, #252	; 0xfc
   b7d10:	4620      	mov	r0, r4
   b7d12:	f7ff ff91 	bl	b7c38 <_ZN9SdSpiCard9writeDataEhPKh>
   b7d16:	2800      	cmp	r0, #0
   b7d18:	d0f4      	beq.n	b7d04 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b7d1a:	b002      	add	sp, #8
   b7d1c:	bd10      	pop	{r4, pc}

000b7d1e <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7d1e:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b7d20:	7a83      	ldrb	r3, [r0, #10]
   b7d22:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7d24:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7d26:	bf18      	it	ne
   b7d28:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b7d2a:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7d2c:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b7d2e:	f7ff fe35 	bl	b799c <_ZN9SdSpiCard11cardCommandEhm>
   b7d32:	b130      	cbz	r0, b7d42 <_ZN9SdSpiCard10writeStartEm+0x24>
   b7d34:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7d36:	4620      	mov	r0, r4
   b7d38:	7023      	strb	r3, [r4, #0]
   b7d3a:	f7ff fdd6 	bl	b78ea <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7d3e:	2000      	movs	r0, #0
}
   b7d40:	bd10      	pop	{r4, pc}
  return true;
   b7d42:	2001      	movs	r0, #1
   b7d44:	e7fc      	b.n	b7d40 <_ZN9SdSpiCard10writeStartEm+0x22>

000b7d46 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b7d46:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7d48:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b7d4c:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7d4e:	f7ff fe10 	bl	b7972 <_ZN9SdSpiCard11waitNotBusyEt>
   b7d52:	4605      	mov	r5, r0
   b7d54:	b930      	cbnz	r0, b7d64 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b7d56:	2356      	movs	r3, #86	; 0x56
   b7d58:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b7d5a:	4620      	mov	r0, r4
   b7d5c:	f7ff fdc5 	bl	b78ea <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b7d60:	4628      	mov	r0, r5
   b7d62:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b7d64:	6860      	ldr	r0, [r4, #4]
   b7d66:	21fd      	movs	r1, #253	; 0xfd
   b7d68:	f7ff fd87 	bl	b787a <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7d6c:	e7f5      	b.n	b7d5a <_ZN9SdSpiCard9writeStopEv+0x14>

000b7d6e <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b7d6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7d70:	4604      	mov	r4, r0
   b7d72:	4616      	mov	r6, r2
   b7d74:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b7d76:	f7ff ffd2 	bl	b7d1e <_ZN9SdSpiCard10writeStartEm>
   b7d7a:	b170      	cbz	r0, b7d9a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7d7c:	2500      	movs	r5, #0
   b7d7e:	42bd      	cmp	r5, r7
   b7d80:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b7d84:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b7d86:	d004      	beq.n	b7d92 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b7d88:	f7ff ffb1 	bl	b7cee <_ZN9SdSpiCard9writeDataEPKh>
   b7d8c:	b128      	cbz	r0, b7d9a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7d8e:	3501      	adds	r5, #1
   b7d90:	e7f5      	b.n	b7d7e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b7d92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b7d96:	f7ff bfd6 	b.w	b7d46 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b7d9a:	4620      	mov	r0, r4
   b7d9c:	f7ff fda5 	bl	b78ea <_ZN9SdSpiCard7spiStopEv>
}
   b7da0:	2000      	movs	r0, #0
   b7da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7da4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b7da4:	4b01      	ldr	r3, [pc, #4]	; (b7dac <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b7da6:	2201      	movs	r2, #1
   b7da8:	701a      	strb	r2, [r3, #0]
}
   b7daa:	4770      	bx	lr
   b7dac:	2003e644 	.word	0x2003e644

000b7db0 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b7db0:	1d01      	adds	r1, r0, #4
   b7db2:	6800      	ldr	r0, [r0, #0]
   b7db4:	f004 be46 	b.w	bca44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b7db8 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b7db8:	b510      	push	{r4, lr}
   b7dba:	4604      	mov	r4, r0
  m_csPin = csPin;
   b7dbc:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b7dbe:	6800      	ldr	r0, [r0, #0]
   b7dc0:	f004 fe12 	bl	bc9e8 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b7dc4:	7d20      	ldrb	r0, [r4, #20]
   b7dc6:	2101      	movs	r1, #1
   b7dc8:	f005 fa88 	bl	bd2dc <pinMode>
  digitalWrite(m_csPin, HIGH);
   b7dcc:	7d20      	ldrb	r0, [r4, #20]
   b7dce:	2101      	movs	r1, #1
}
   b7dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b7dd4:	f005 ba93 	b.w	bd2fe <digitalWrite>

000b7dd8 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b7dd8:	6800      	ldr	r0, [r0, #0]
   b7dda:	f004 be19 	b.w	bca10 <_ZN8SPIClass14endTransactionEv>

000b7dde <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b7dde:	6800      	ldr	r0, [r0, #0]
   b7de0:	21ff      	movs	r1, #255	; 0xff
   b7de2:	f004 be9d 	b.w	bcb20 <_ZN8SPIClass8transferEh>
	...

000b7de8 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b7de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7dea:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7dec:	4a07      	ldr	r2, [pc, #28]	; (b7e0c <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b7dee:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7df0:	2500      	movs	r5, #0
   b7df2:	4c07      	ldr	r4, [pc, #28]	; (b7e10 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7df4:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7df6:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7df8:	460a      	mov	r2, r1
   b7dfa:	4629      	mov	r1, r5
   b7dfc:	f004 fe96 	bl	bcb2c <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b7e00:	7823      	ldrb	r3, [r4, #0]
   b7e02:	2b00      	cmp	r3, #0
   b7e04:	d0fc      	beq.n	b7e00 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b7e06:	2000      	movs	r0, #0
   b7e08:	b003      	add	sp, #12
   b7e0a:	bd30      	pop	{r4, r5, pc}
   b7e0c:	000b7da5 	.word	0x000b7da5
   b7e10:	2003e644 	.word	0x2003e644

000b7e14 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b7e14:	6800      	ldr	r0, [r0, #0]
   b7e16:	f004 be83 	b.w	bcb20 <_ZN8SPIClass8transferEh>
	...

000b7e1c <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b7e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7e1e:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7e20:	4a06      	ldr	r2, [pc, #24]	; (b7e3c <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b7e22:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7e24:	2500      	movs	r5, #0
   b7e26:	4c06      	ldr	r4, [pc, #24]	; (b7e40 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7e28:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7e2a:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7e2c:	462a      	mov	r2, r5
   b7e2e:	f004 fe7d 	bl	bcb2c <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b7e32:	7823      	ldrb	r3, [r4, #0]
   b7e34:	2b00      	cmp	r3, #0
   b7e36:	d0fc      	beq.n	b7e32 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b7e38:	b003      	add	sp, #12
   b7e3a:	bd30      	pop	{r4, r5, pc}
   b7e3c:	000b7da5 	.word	0x000b7da5
   b7e40:	2003e644 	.word	0x2003e644

000b7e44 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b7e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7e48:	b085      	sub	sp, #20
   b7e4a:	461f      	mov	r7, r3
   b7e4c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b7e50:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b7e54:	eba8 0902 	sub.w	r9, r8, r2
   b7e58:	eba7 0a01 	sub.w	sl, r7, r1
   b7e5c:	f1b9 0f00 	cmp.w	r9, #0
   b7e60:	bfb8      	it	lt
   b7e62:	f1c9 0900 	rsblt	r9, r9, #0
   b7e66:	f1ba 0f00 	cmp.w	sl, #0
   b7e6a:	bfb8      	it	lt
   b7e6c:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b7e70:	45d1      	cmp	r9, sl
        uint16_t color) {
   b7e72:	4683      	mov	fp, r0
   b7e74:	460c      	mov	r4, r1
   b7e76:	4615      	mov	r5, r2
    if (steep) {
   b7e78:	dd04      	ble.n	b7e84 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b7e7a:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b7e7c:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b7e7e:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b7e80:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b7e82:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b7e84:	42bc      	cmp	r4, r7
   b7e86:	dd05      	ble.n	b7e94 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b7e88:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b7e8a:	4645      	mov	r5, r8
   b7e8c:	4690      	mov	r8, r2
    if (x0 > x1) {
   b7e8e:	4622      	mov	r2, r4
   b7e90:	463c      	mov	r4, r7
   b7e92:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b7e94:	1b3e      	subs	r6, r7, r4
   b7e96:	b2b2      	uxth	r2, r6
   b7e98:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b7e9a:	eba8 0205 	sub.w	r2, r8, r5
   b7e9e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b7ea2:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b7ea6:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b7eaa:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b7eae:	4545      	cmp	r5, r8
   b7eb0:	bfb4      	ite	lt
   b7eb2:	2201      	movlt	r2, #1
   b7eb4:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b7eb8:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b7eba:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b7ebc:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b7ebe:	42bc      	cmp	r4, r7
   b7ec0:	dc1c      	bgt.n	b7efc <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b7ec2:	f8db 2000 	ldr.w	r2, [fp]
   b7ec6:	9303      	str	r3, [sp, #12]
        if (steep) {
   b7ec8:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b7eca:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b7ece:	bfc7      	ittee	gt
   b7ed0:	4629      	movgt	r1, r5
   b7ed2:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b7ed4:	462a      	movle	r2, r5
   b7ed6:	4621      	movle	r1, r4
   b7ed8:	4658      	mov	r0, fp
   b7eda:	47c0      	blx	r8
        }
        err -= dy;
   b7edc:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b7ede:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b7ee0:	1ab6      	subs	r6, r6, r2
   b7ee2:	b2b1      	uxth	r1, r6
   b7ee4:	b236      	sxth	r6, r6
        if (err < 0) {
   b7ee6:	2e00      	cmp	r6, #0
   b7ee8:	da05      	bge.n	b7ef6 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b7eea:	9a02      	ldr	r2, [sp, #8]
   b7eec:	4415      	add	r5, r2
            err += dx;
   b7eee:	9a00      	ldr	r2, [sp, #0]
   b7ef0:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b7ef2:	b22d      	sxth	r5, r5
            err += dx;
   b7ef4:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b7ef6:	3401      	adds	r4, #1
   b7ef8:	b224      	sxth	r4, r4
   b7efa:	e7e0      	b.n	b7ebe <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b7efc:	b005      	add	sp, #20
   b7efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7f02 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b7f02:	4770      	bx	lr

000b7f04 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b7f04:	b410      	push	{r4}
    drawPixel(x, y, color);
   b7f06:	6804      	ldr	r4, [r0, #0]
   b7f08:	6924      	ldr	r4, [r4, #16]
   b7f0a:	46a4      	mov	ip, r4
}
   b7f0c:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b7f10:	4760      	bx	ip

000b7f12 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b7f12:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b7f14:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b7f16:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b7f1a:	9502      	str	r5, [sp, #8]
   b7f1c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b7f1e:	46a4      	mov	ip, r4
}
   b7f20:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b7f22:	4760      	bx	ip

000b7f24 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b7f24:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b7f26:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b7f28:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b7f2c:	9502      	str	r5, [sp, #8]
   b7f2e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b7f30:	46a4      	mov	ip, r4
}
   b7f32:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b7f34:	4760      	bx	ip

000b7f36 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b7f36:	b470      	push	{r4, r5, r6}
   b7f38:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b7f3c:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b7f40:	6804      	ldr	r4, [r0, #0]
   b7f42:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b7f46:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b7f48:	46a4      	mov	ip, r4
}
   b7f4a:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b7f4c:	4760      	bx	ip

000b7f4e <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b7f4e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7f52:	461c      	mov	r4, r3
    startWrite();
   b7f54:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b7f56:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b7f5a:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b7f5c:	4605      	mov	r5, r0
   b7f5e:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b7f60:	3c01      	subs	r4, #1
   b7f62:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b7f64:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b7f66:	b224      	sxth	r4, r4
    startWrite();
   b7f68:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b7f6a:	682b      	ldr	r3, [r5, #0]
   b7f6c:	f8cd 8004 	str.w	r8, [sp, #4]
   b7f70:	9400      	str	r4, [sp, #0]
   b7f72:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b7f74:	4628      	mov	r0, r5
   b7f76:	463b      	mov	r3, r7
   b7f78:	4632      	mov	r2, r6
   b7f7a:	4639      	mov	r1, r7
   b7f7c:	47a0      	blx	r4
    endWrite();
   b7f7e:	682b      	ldr	r3, [r5, #0]
   b7f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7f82:	4628      	mov	r0, r5
}
   b7f84:	b002      	add	sp, #8
   b7f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b7f8a:	4718      	bx	r3

000b7f8c <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b7f8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7f90:	461d      	mov	r5, r3
    startWrite();
   b7f92:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b7f94:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b7f98:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b7f9a:	4604      	mov	r4, r0
   b7f9c:	4617      	mov	r7, r2
   b7f9e:	460e      	mov	r6, r1
    startWrite();
   b7fa0:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b7fa2:	e9cd 7800 	strd	r7, r8, [sp]
   b7fa6:	6822      	ldr	r2, [r4, #0]
   b7fa8:	1e6b      	subs	r3, r5, #1
   b7faa:	4433      	add	r3, r6
   b7fac:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b7fae:	4620      	mov	r0, r4
   b7fb0:	b21b      	sxth	r3, r3
   b7fb2:	463a      	mov	r2, r7
   b7fb4:	4631      	mov	r1, r6
   b7fb6:	47a8      	blx	r5
    endWrite();
   b7fb8:	6823      	ldr	r3, [r4, #0]
   b7fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7fbc:	4620      	mov	r0, r4
}
   b7fbe:	b002      	add	sp, #8
   b7fc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b7fc4:	4718      	bx	r3

000b7fc6 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b7fc6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7fca:	461e      	mov	r6, r3
    startWrite();
   b7fcc:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b7fce:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b7fd2:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b7fd4:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b7fd8:	460c      	mov	r4, r1
   b7fda:	4605      	mov	r5, r0
   b7fdc:	4617      	mov	r7, r2
    startWrite();
   b7fde:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b7fe0:	4426      	add	r6, r4
   b7fe2:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b7fe4:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b7fe6:	da0b      	bge.n	b8000 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b7fe8:	f8cd 8000 	str.w	r8, [sp]
   b7fec:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b7ff0:	4621      	mov	r1, r4
   b7ff2:	464b      	mov	r3, r9
   b7ff4:	463a      	mov	r2, r7
   b7ff6:	4628      	mov	r0, r5
   b7ff8:	3401      	adds	r4, #1
   b7ffa:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b7ffc:	b224      	sxth	r4, r4
   b7ffe:	e7f0      	b.n	b7fe2 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b8000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8002:	4628      	mov	r0, r5
}
   b8004:	b002      	add	sp, #8
   b8006:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b800a:	4718      	bx	r3

000b800c <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b800c:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b800e:	6802      	ldr	r2, [r0, #0]
   b8010:	9101      	str	r1, [sp, #4]
   b8012:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b8016:	9100      	str	r1, [sp, #0]
   b8018:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b801a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b801e:	2200      	movs	r2, #0
   b8020:	4611      	mov	r1, r2
   b8022:	47a0      	blx	r4
}
   b8024:	b002      	add	sp, #8
   b8026:	bd10      	pop	{r4, pc}

000b8028 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b8028:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b802c:	4299      	cmp	r1, r3
        uint16_t color) {
   b802e:	4616      	mov	r6, r2
   b8030:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b8034:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b8038:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b803a:	4680      	mov	r8, r0
   b803c:	460d      	mov	r5, r1
   b803e:	461c      	mov	r4, r3
    if(x0 == x1){
   b8040:	d113      	bne.n	b806a <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b8042:	42be      	cmp	r6, r7
   b8044:	bfc8      	it	gt
   b8046:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b8048:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b804c:	bfc4      	itt	gt
   b804e:	463e      	movgt	r6, r7
   b8050:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b8052:	1c7b      	adds	r3, r7, #1
   b8054:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b8056:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b8058:	b21b      	sxth	r3, r3
   b805a:	4632      	mov	r2, r6
   b805c:	4629      	mov	r1, r5
   b805e:	4640      	mov	r0, r8
   b8060:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b8062:	b003      	add	sp, #12
   b8064:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b8068:	4760      	bx	ip
    } else if(y0 == y1){
   b806a:	42be      	cmp	r6, r7
   b806c:	d10a      	bne.n	b8084 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b806e:	4299      	cmp	r1, r3
   b8070:	bfc2      	ittt	gt
   b8072:	460b      	movgt	r3, r1
   b8074:	4625      	movgt	r5, r4
   b8076:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b8078:	1c63      	adds	r3, r4, #1
   b807a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b807e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b8080:	1b5b      	subs	r3, r3, r5
   b8082:	e7e9      	b.n	b8058 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b8084:	6953      	ldr	r3, [r2, #20]
   b8086:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b8088:	e9cd 7900 	strd	r7, r9, [sp]
   b808c:	f8d8 3000 	ldr.w	r3, [r8]
   b8090:	4640      	mov	r0, r8
   b8092:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b8094:	4632      	mov	r2, r6
   b8096:	4623      	mov	r3, r4
   b8098:	4629      	mov	r1, r5
   b809a:	47b8      	blx	r7
        endWrite();
   b809c:	f8d8 3000 	ldr.w	r3, [r8]
   b80a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b80a2:	4640      	mov	r0, r8
}
   b80a4:	b003      	add	sp, #12
   b80a6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b80aa:	4718      	bx	r3

000b80ac <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b80ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b80b0:	461d      	mov	r5, r3
    startWrite();
   b80b2:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b80b4:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b80b8:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b80ba:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b80be:	4604      	mov	r4, r0
   b80c0:	460f      	mov	r7, r1
   b80c2:	4616      	mov	r6, r2
    startWrite();
   b80c4:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b80c6:	6823      	ldr	r3, [r4, #0]
   b80c8:	f8cd 8000 	str.w	r8, [sp]
   b80cc:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b80d0:	4632      	mov	r2, r6
   b80d2:	462b      	mov	r3, r5
   b80d4:	4639      	mov	r1, r7
   b80d6:	4620      	mov	r0, r4
   b80d8:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b80da:	6823      	ldr	r3, [r4, #0]
   b80dc:	f8cd 8000 	str.w	r8, [sp]
   b80e0:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b80e4:	4432      	add	r2, r6
   b80e6:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b80ea:	4639      	mov	r1, r7
   b80ec:	462b      	mov	r3, r5
   b80ee:	4620      	mov	r0, r4
   b80f0:	b212      	sxth	r2, r2
   b80f2:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b80f4:	6823      	ldr	r3, [r4, #0]
   b80f6:	f8cd 8000 	str.w	r8, [sp]
   b80fa:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b80fe:	4632      	mov	r2, r6
   b8100:	464b      	mov	r3, r9
   b8102:	4639      	mov	r1, r7
   b8104:	4620      	mov	r0, r4
   b8106:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b8108:	1e6b      	subs	r3, r5, #1
   b810a:	19d9      	adds	r1, r3, r7
   b810c:	6823      	ldr	r3, [r4, #0]
   b810e:	f8cd 8000 	str.w	r8, [sp]
   b8112:	6a1d      	ldr	r5, [r3, #32]
   b8114:	4620      	mov	r0, r4
   b8116:	464b      	mov	r3, r9
   b8118:	4632      	mov	r2, r6
   b811a:	b209      	sxth	r1, r1
   b811c:	47a8      	blx	r5
    endWrite();
   b811e:	6823      	ldr	r3, [r4, #0]
   b8120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8122:	4620      	mov	r0, r4
}
   b8124:	b002      	add	sp, #8
   b8126:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b812a:	4718      	bx	r3

000b812c <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b812c:	4770      	bx	lr

000b812e <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b812e:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b8132:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b8136:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b8138:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b813a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b813e:	bf59      	ittee	pl
   b8140:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b8142:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b8144:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b8146:	81c3      	strhmi	r3, [r0, #14]
}
   b8148:	4770      	bx	lr
	...

000b814c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b814c:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b814e:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b8150:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b8152:	4a07      	ldr	r2, [pc, #28]	; (b8170 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b8154:	4d07      	ldr	r5, [pc, #28]	; (b8174 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b8156:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b8158:	2400      	movs	r4, #0
    _width    = WIDTH;
   b815a:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b815c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b8160:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b8164:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b8166:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b8168:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b816a:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b816c:	6204      	str	r4, [r0, #32]
}
   b816e:	bd30      	pop	{r4, r5, pc}
   b8170:	01000101 	.word	0x01000101
   b8174:	000c1030 	.word	0x000c1030

000b8178 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b817c:	b089      	sub	sp, #36	; 0x24
   b817e:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b8182:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8184:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b8188:	9304      	str	r3, [sp, #16]
   b818a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b818e:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8190:	9305      	str	r3, [sp, #20]
   b8192:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b8196:	4604      	mov	r4, r0
    startWrite();
   b8198:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b819a:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b819e:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b81a2:	bf48      	it	mi
   b81a4:	f108 020e 	addmi.w	r2, r8, #14
   b81a8:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b81ac:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b81ae:	4635      	mov	r5, r6
   b81b0:	9b03      	ldr	r3, [sp, #12]
   b81b2:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b81b4:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b81b8:	189a      	adds	r2, r3, r2
   b81ba:	9b05      	ldr	r3, [sp, #20]
   b81bc:	428b      	cmp	r3, r1
   b81be:	b212      	sxth	r2, r2
   b81c0:	dd27      	ble.n	b8212 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b81c2:	9b04      	ldr	r3, [sp, #16]
   b81c4:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b81c6:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b81ca:	9306      	str	r3, [sp, #24]
   b81cc:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b81d0:	4580      	cmp	r8, r0
   b81d2:	fa1f f189 	uxth.w	r1, r9
   b81d6:	dd17      	ble.n	b8208 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b81d8:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b81da:	bf05      	ittet	eq
   b81dc:	9b06      	ldreq	r3, [sp, #24]
   b81de:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b81e0:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b81e2:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b81e4:	bf18      	it	ne
   b81e6:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b81e8:	062b      	lsls	r3, r5, #24
   b81ea:	d50a      	bpl.n	b8202 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b81ec:	9b02      	ldr	r3, [sp, #8]
   b81ee:	6820      	ldr	r0, [r4, #0]
   b81f0:	9207      	str	r2, [sp, #28]
   b81f2:	4419      	add	r1, r3
   b81f4:	6983      	ldr	r3, [r0, #24]
   b81f6:	b209      	sxth	r1, r1
   b81f8:	461f      	mov	r7, r3
   b81fa:	4620      	mov	r0, r4
   b81fc:	4653      	mov	r3, sl
   b81fe:	47b8      	blx	r7
   b8200:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b8202:	f109 0901 	add.w	r9, r9, #1
   b8206:	e7e1      	b.n	b81cc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b8208:	9b01      	ldr	r3, [sp, #4]
   b820a:	3301      	adds	r3, #1
   b820c:	9301      	str	r3, [sp, #4]
   b820e:	445e      	add	r6, fp
   b8210:	e7ce      	b.n	b81b0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b8212:	6823      	ldr	r3, [r4, #0]
   b8214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8216:	4620      	mov	r0, r4
}
   b8218:	b009      	add	sp, #36	; 0x24
   b821a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b821e:	4718      	bx	r3

000b8220 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b8220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8224:	ed2d 8b02 	vpush	{d8}
   b8228:	b091      	sub	sp, #68	; 0x44
   b822a:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b822c:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b822e:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b8232:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b8236:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b823a:	9103      	str	r1, [sp, #12]
   b823c:	461f      	mov	r7, r3
   b823e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b8242:	9304      	str	r3, [sp, #16]
   b8244:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b8246:	2a00      	cmp	r2, #0
   b8248:	f040 80c5 	bne.w	b83d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b824c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b8250:	428b      	cmp	r3, r1
   b8252:	f340 814c 	ble.w	b84ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b8256:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b825a:	42b3      	cmp	r3, r6
   b825c:	f340 8147 	ble.w	b84ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b8260:	2306      	movs	r3, #6
   b8262:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b8266:	2b00      	cmp	r3, #0
   b8268:	f340 8141 	ble.w	b84ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b826c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b8270:	2b00      	cmp	r3, #0
   b8272:	f340 813c 	ble.w	b84ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b8276:	7f03      	ldrb	r3, [r0, #28]
   b8278:	b91b      	cbnz	r3, b8282 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b827a:	2faf      	cmp	r7, #175	; 0xaf
   b827c:	bf84      	itt	hi
   b827e:	3701      	addhi	r7, #1
   b8280:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b8282:	f8db 3000 	ldr.w	r3, [fp]
   b8286:	4658      	mov	r0, fp
   b8288:	695b      	ldr	r3, [r3, #20]
   b828a:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b828c:	2205      	movs	r2, #5
   b828e:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b8290:	2200      	movs	r2, #0
   b8292:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b8294:	4a98      	ldr	r2, [pc, #608]	; (b84f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b8296:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b829a:	18d3      	adds	r3, r2, r3
   b829c:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b829e:	b2b3      	uxth	r3, r6
   b82a0:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b82a2:	9a05      	ldr	r2, [sp, #20]
   b82a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b82a6:	5c9b      	ldrb	r3, [r3, r2]
   b82a8:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b82aa:	b2ab      	uxth	r3, r5
   b82ac:	930b      	str	r3, [sp, #44]	; 0x2c
   b82ae:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b82b2:	9308      	str	r3, [sp, #32]
   b82b4:	9b03      	ldr	r3, [sp, #12]
   b82b6:	fb02 f905 	mul.w	r9, r2, r5
   b82ba:	fa19 f983 	uxtah	r9, r9, r3
   b82be:	fa0f f389 	sxth.w	r3, r9
   b82c2:	ee08 3a10 	vmov	s16, r3
   b82c6:	2308      	movs	r3, #8
   b82c8:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b82ca:	9b03      	ldr	r3, [sp, #12]
   b82cc:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b82d0:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b82d4:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b82d8:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b82da:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b82de:	07d2      	lsls	r2, r2, #31
   b82e0:	d552      	bpl.n	b8388 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b82e2:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b82e4:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b82e8:	d13e      	bne.n	b8368 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b82ea:	2c01      	cmp	r4, #1
   b82ec:	d13c      	bne.n	b8368 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b82ee:	699b      	ldr	r3, [r3, #24]
   b82f0:	9906      	ldr	r1, [sp, #24]
   b82f2:	461f      	mov	r7, r3
   b82f4:	9b04      	ldr	r3, [sp, #16]
   b82f6:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b82f8:	b212      	sxth	r2, r2
   b82fa:	4651      	mov	r1, sl
   b82fc:	4658      	mov	r0, fp
   b82fe:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b8300:	f109 0301 	add.w	r3, r9, #1
   b8304:	fa4f f983 	sxtb.w	r9, r3
   b8308:	9b07      	ldr	r3, [sp, #28]
   b830a:	085b      	lsrs	r3, r3, #1
   b830c:	9307      	str	r3, [sp, #28]
   b830e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8310:	3b01      	subs	r3, #1
   b8312:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b8316:	930a      	str	r3, [sp, #40]	; 0x28
   b8318:	d1de      	bne.n	b82d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b831a:	9f05      	ldr	r7, [sp, #20]
   b831c:	3701      	adds	r7, #1
   b831e:	b27b      	sxtb	r3, r7
   b8320:	9305      	str	r3, [sp, #20]
   b8322:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8324:	3b01      	subs	r3, #1
   b8326:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b832a:	9309      	str	r3, [sp, #36]	; 0x24
   b832c:	d1b9      	bne.n	b82a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b832e:	9b04      	ldr	r3, [sp, #16]
   b8330:	4543      	cmp	r3, r8
   b8332:	d00f      	beq.n	b8354 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b8334:	2d01      	cmp	r5, #1
   b8336:	f8db 3000 	ldr.w	r3, [fp]
   b833a:	d13b      	bne.n	b83b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b833c:	2c01      	cmp	r4, #1
   b833e:	d139      	bne.n	b83b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b8340:	9908      	ldr	r1, [sp, #32]
   b8342:	f8cd 8000 	str.w	r8, [sp]
   b8346:	3105      	adds	r1, #5
   b8348:	6a1c      	ldr	r4, [r3, #32]
   b834a:	4632      	mov	r2, r6
   b834c:	2308      	movs	r3, #8
   b834e:	b209      	sxth	r1, r1
   b8350:	4658      	mov	r0, fp
   b8352:	47a0      	blx	r4
        endWrite();
   b8354:	f8db 3000 	ldr.w	r3, [fp]
   b8358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b835a:	4658      	mov	r0, fp
}
   b835c:	b011      	add	sp, #68	; 0x44
   b835e:	ecbd 8b02 	vpop	{d8}
   b8362:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b8366:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b8368:	9906      	ldr	r1, [sp, #24]
   b836a:	fb14 f202 	smulbb	r2, r4, r2
   b836e:	440a      	add	r2, r1
   b8370:	9904      	ldr	r1, [sp, #16]
   b8372:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8374:	9400      	str	r4, [sp, #0]
   b8376:	69db      	ldr	r3, [r3, #28]
   b8378:	ee18 1a10 	vmov	r1, s16
   b837c:	461f      	mov	r7, r3
   b837e:	b212      	sxth	r2, r2
   b8380:	462b      	mov	r3, r5
   b8382:	4658      	mov	r0, fp
   b8384:	47b8      	blx	r7
   b8386:	e7bb      	b.n	b8300 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b8388:	9a04      	ldr	r2, [sp, #16]
   b838a:	4542      	cmp	r2, r8
   b838c:	d0b8      	beq.n	b8300 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b838e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b8390:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b8394:	d107      	bne.n	b83a6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b8396:	2c01      	cmp	r4, #1
   b8398:	d105      	bne.n	b83a6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b839a:	699b      	ldr	r3, [r3, #24]
   b839c:	9906      	ldr	r1, [sp, #24]
   b839e:	461f      	mov	r7, r3
   b83a0:	440a      	add	r2, r1
   b83a2:	4643      	mov	r3, r8
   b83a4:	e7a8      	b.n	b82f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b83a6:	9906      	ldr	r1, [sp, #24]
   b83a8:	f8cd 8004 	str.w	r8, [sp, #4]
   b83ac:	fb14 f202 	smulbb	r2, r4, r2
   b83b0:	440a      	add	r2, r1
   b83b2:	e7df      	b.n	b8374 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b83b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b83b6:	f8cd 8004 	str.w	r8, [sp, #4]
   b83ba:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b83be:	9a08      	ldr	r2, [sp, #32]
   b83c0:	00e4      	lsls	r4, r4, #3
   b83c2:	440a      	add	r2, r1
   b83c4:	4611      	mov	r1, r2
   b83c6:	9400      	str	r4, [sp, #0]
   b83c8:	69dc      	ldr	r4, [r3, #28]
   b83ca:	4632      	mov	r2, r6
   b83cc:	462b      	mov	r3, r5
   b83ce:	b209      	sxth	r1, r1
   b83d0:	4658      	mov	r0, fp
   b83d2:	47a0      	blx	r4
        endWrite();
   b83d4:	e7be      	b.n	b8354 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b83d6:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b83d8:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b83da:	6812      	ldr	r2, [r2, #0]
   b83dc:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b83de:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b83e0:	b2ff      	uxtb	r7, r7
   b83e2:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b83e6:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b83ea:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b83ec:	789a      	ldrb	r2, [r3, #2]
   b83ee:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b83f0:	78da      	ldrb	r2, [r3, #3]
   b83f2:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b83f4:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b83f6:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b83fa:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b83fe:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b8400:	d801      	bhi.n	b8406 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b8402:	2c01      	cmp	r4, #1
   b8404:	d957      	bls.n	b84b6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b8406:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b840a:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b840c:	fa0f f38a 	sxth.w	r3, sl
   b8410:	9307      	str	r3, [sp, #28]
        startWrite();
   b8412:	f8db 3000 	ldr.w	r3, [fp]
   b8416:	4658      	mov	r0, fp
   b8418:	695b      	ldr	r3, [r3, #20]
   b841a:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b841c:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b841e:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8422:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8424:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b8428:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b842a:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b842c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b842e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8430:	429f      	cmp	r7, r3
   b8432:	d28f      	bcs.n	b8354 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8434:	9b07      	ldr	r3, [sp, #28]
   b8436:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b8438:	443b      	add	r3, r7
   b843a:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b843e:	2200      	movs	r2, #0
   b8440:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8442:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8444:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8446:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b844a:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b844e:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8452:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b8454:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b8456:	9905      	ldr	r1, [sp, #20]
   b8458:	4291      	cmp	r1, r2
   b845a:	d241      	bcs.n	b84e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b845c:	1c5a      	adds	r2, r3, #1
   b845e:	b2d2      	uxtb	r2, r2
   b8460:	075b      	lsls	r3, r3, #29
   b8462:	920d      	str	r2, [sp, #52]	; 0x34
   b8464:	d107      	bne.n	b8476 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b8466:	9b06      	ldr	r3, [sp, #24]
   b8468:	9906      	ldr	r1, [sp, #24]
   b846a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b846c:	3301      	adds	r3, #1
   b846e:	b29b      	uxth	r3, r3
   b8470:	f812 9001 	ldrb.w	r9, [r2, r1]
   b8474:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b8476:	f019 0f80 	tst.w	r9, #128	; 0x80
   b847a:	d012      	beq.n	b84a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b847c:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b847e:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8482:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b8486:	d11a      	bne.n	b84be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b8488:	2c01      	cmp	r4, #1
   b848a:	d118      	bne.n	b84be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b848c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b848e:	699b      	ldr	r3, [r3, #24]
   b8490:	4411      	add	r1, r2
   b8492:	9a05      	ldr	r2, [sp, #20]
   b8494:	4411      	add	r1, r2
   b8496:	461e      	mov	r6, r3
   b8498:	4652      	mov	r2, sl
   b849a:	9b04      	ldr	r3, [sp, #16]
   b849c:	b209      	sxth	r1, r1
   b849e:	4658      	mov	r0, fp
   b84a0:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b84a2:	9e05      	ldr	r6, [sp, #20]
   b84a4:	3601      	adds	r6, #1
   b84a6:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b84a8:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b84ac:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b84ae:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b84b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b84b4:	e7ce      	b.n	b8454 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b84b6:	2300      	movs	r3, #0
   b84b8:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b84bc:	e7a9      	b.n	b8412 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b84be:	9805      	ldr	r0, [sp, #20]
   b84c0:	9a08      	ldr	r2, [sp, #32]
   b84c2:	4402      	add	r2, r0
   b84c4:	fb02 1105 	mla	r1, r2, r5, r1
   b84c8:	9a04      	ldr	r2, [sp, #16]
   b84ca:	e9cd 4200 	strd	r4, r2, [sp]
   b84ce:	69db      	ldr	r3, [r3, #28]
   b84d0:	ee18 2a10 	vmov	r2, s16
   b84d4:	461e      	mov	r6, r3
   b84d6:	b209      	sxth	r1, r1
   b84d8:	462b      	mov	r3, r5
   b84da:	4658      	mov	r0, fp
   b84dc:	47b0      	blx	r6
   b84de:	e7e0      	b.n	b84a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b84e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b84e2:	3701      	adds	r7, #1
   b84e4:	4498      	add	r8, r3
   b84e6:	fa5f f888 	uxtb.w	r8, r8
   b84ea:	b2ff      	uxtb	r7, r7
   b84ec:	e79f      	b.n	b842e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b84ee:	b011      	add	sp, #68	; 0x44
   b84f0:	ecbd 8b02 	vpop	{d8}
   b84f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b84f8:	000c0b28 	.word	0x000c0b28

000b84fc <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b84fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b84fe:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b8500:	b085      	sub	sp, #20
   b8502:	4604      	mov	r4, r0
   b8504:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b8506:	2a00      	cmp	r2, #0
   b8508:	d134      	bne.n	b8574 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b850a:	290a      	cmp	r1, #10
   b850c:	d108      	bne.n	b8520 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b850e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b8510:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b8512:	7e42      	ldrb	r2, [r0, #25]
   b8514:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b8518:	8263      	strh	r3, [r4, #18]
}
   b851a:	2001      	movs	r0, #1
   b851c:	b005      	add	sp, #20
   b851e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b8520:	290d      	cmp	r1, #13
   b8522:	d0fa      	beq.n	b851a <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b8524:	7ee1      	ldrb	r1, [r4, #27]
   b8526:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b8528:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b852a:	b171      	cbz	r1, b854a <_ZN12Adafruit_GFX5writeEh+0x4e>
   b852c:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b8530:	2106      	movs	r1, #6
   b8532:	fb11 6100 	smlabb	r1, r1, r0, r6
   b8536:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b853a:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b853c:	bfc1      	itttt	gt
   b853e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b8542:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b8544:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b8548:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b854a:	8ae2      	ldrh	r2, [r4, #22]
   b854c:	9201      	str	r2, [sp, #4]
   b854e:	8aa2      	ldrh	r2, [r4, #20]
   b8550:	9200      	str	r2, [sp, #0]
   b8552:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b8556:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b855a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b855e:	4620      	mov	r0, r4
   b8560:	f7ff fe5e 	bl	b8220 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b8564:	7e23      	ldrb	r3, [r4, #24]
   b8566:	8a22      	ldrh	r2, [r4, #16]
   b8568:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b856c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b8570:	8223      	strh	r3, [r4, #16]
   b8572:	e7d2      	b.n	b851a <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b8574:	290a      	cmp	r1, #10
   b8576:	d107      	bne.n	b8588 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b8578:	2300      	movs	r3, #0
   b857a:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b857c:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b857e:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b8580:	8a43      	ldrh	r3, [r0, #18]
   b8582:	fb01 3302 	mla	r3, r1, r2, r3
   b8586:	e7c7      	b.n	b8518 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b8588:	290d      	cmp	r1, #13
   b858a:	d0c6      	beq.n	b851a <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b858c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b858e:	42a9      	cmp	r1, r5
   b8590:	d3c3      	bcc.n	b851a <_ZN12Adafruit_GFX5writeEh+0x1e>
   b8592:	7a51      	ldrb	r1, [r2, #9]
   b8594:	4299      	cmp	r1, r3
   b8596:	d3c0      	bcc.n	b851a <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b8598:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b859a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b859c:	b2ed      	uxtb	r5, r5
   b859e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b85a2:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b85a4:	b328      	cbz	r0, b85f2 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b85a6:	78e9      	ldrb	r1, [r5, #3]
   b85a8:	b319      	cbz	r1, b85f2 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b85aa:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b85ac:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b85ae:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b85b0:	b191      	cbz	r1, b85d8 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b85b2:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b85b6:	4408      	add	r0, r1
   b85b8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b85bc:	fb06 1100 	mla	r1, r6, r0, r1
   b85c0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b85c4:	4281      	cmp	r1, r0
   b85c6:	dd07      	ble.n	b85d8 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b85c8:	2000      	movs	r0, #0
   b85ca:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b85cc:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b85d0:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b85d2:	fb02 1207 	mla	r2, r2, r7, r1
   b85d6:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b85d8:	8ae2      	ldrh	r2, [r4, #22]
   b85da:	9201      	str	r2, [sp, #4]
   b85dc:	8aa2      	ldrh	r2, [r4, #20]
   b85de:	9200      	str	r2, [sp, #0]
   b85e0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b85e4:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b85e8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b85ec:	4620      	mov	r0, r4
   b85ee:	f7ff fe17 	bl	b8220 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b85f2:	7929      	ldrb	r1, [r5, #4]
   b85f4:	7e22      	ldrb	r2, [r4, #24]
   b85f6:	8a23      	ldrh	r3, [r4, #16]
   b85f8:	fb01 3302 	mla	r3, r1, r2, r3
   b85fc:	e7b8      	b.n	b8570 <_ZN12Adafruit_GFX5writeEh+0x74>

000b85fe <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b85fe:	2901      	cmp	r1, #1
   b8600:	bf38      	it	cc
   b8602:	2101      	movcc	r1, #1
   b8604:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b8606:	7641      	strb	r1, [r0, #25]
}
   b8608:	4770      	bx	lr
	...

000b860c <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b860c:	b510      	push	{r4, lr}
   b860e:	4b04      	ldr	r3, [pc, #16]	; (b8620 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b8610:	6003      	str	r3, [r0, #0]
   b8612:	4604      	mov	r4, r0
  if(buffer) {
   b8614:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b8616:	b108      	cbz	r0, b861c <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b8618:	f001 f8b6 	bl	b9788 <free>
    buffer = NULL;
  }
}
   b861c:	4620      	mov	r0, r4
   b861e:	bd10      	pop	{r4, pc}
   b8620:	000c1528 	.word	0x000c1528

000b8624 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b8624:	b510      	push	{r4, lr}
   b8626:	4604      	mov	r4, r0
}
   b8628:	f7ff fff0 	bl	b860c <_ZN16Adafruit_SSD1306D1Ev>
   b862c:	4620      	mov	r0, r4
   b862e:	2150      	movs	r1, #80	; 0x50
   b8630:	f7fb fd35 	bl	b409e <_ZdlPvj>
   b8634:	4620      	mov	r0, r4
   b8636:	bd10      	pop	{r4, pc}

000b8638 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b8638:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b863a:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b863c:	db4b      	blt.n	b86d6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b863e:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b8642:	428c      	cmp	r4, r1
   b8644:	dd47      	ble.n	b86d6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b8646:	2a00      	cmp	r2, #0
   b8648:	db45      	blt.n	b86d6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b864a:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b864e:	4294      	cmp	r4, r2
   b8650:	dd41      	ble.n	b86d6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b8652:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b8654:	2c02      	cmp	r4, #2
   b8656:	d01f      	beq.n	b8698 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b8658:	2c03      	cmp	r4, #3
   b865a:	d026      	beq.n	b86aa <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b865c:	2c01      	cmp	r4, #1
   b865e:	d104      	bne.n	b866a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b8660:	8904      	ldrh	r4, [r0, #8]
   b8662:	43d2      	mvns	r2, r2
   b8664:	4414      	add	r4, r2
      break;
   b8666:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b8668:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b866a:	2b01      	cmp	r3, #1
   b866c:	d023      	beq.n	b86b6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b866e:	2b02      	cmp	r3, #2
   b8670:	d032      	beq.n	b86d8 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b8672:	bb83      	cbnz	r3, b86d6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b8674:	2a00      	cmp	r2, #0
   b8676:	4613      	mov	r3, r2
   b8678:	8904      	ldrh	r4, [r0, #8]
   b867a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b867c:	bfb8      	it	lt
   b867e:	1dd3      	addlt	r3, r2, #7
   b8680:	10db      	asrs	r3, r3, #3
   b8682:	fb13 1104 	smlabb	r1, r3, r4, r1
   b8686:	f002 0207 	and.w	r2, r2, #7
   b868a:	2301      	movs	r3, #1
   b868c:	4093      	lsls	r3, r2
   b868e:	5c42      	ldrb	r2, [r0, r1]
   b8690:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b8694:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b8696:	e01e      	b.n	b86d6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b8698:	8904      	ldrh	r4, [r0, #8]
   b869a:	3c01      	subs	r4, #1
   b869c:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b869e:	8944      	ldrh	r4, [r0, #10]
   b86a0:	43d2      	mvns	r2, r2
   b86a2:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b86a4:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b86a6:	b212      	sxth	r2, r2
      break;
   b86a8:	e7df      	b.n	b866a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b86aa:	8944      	ldrh	r4, [r0, #10]
   b86ac:	3c01      	subs	r4, #1
   b86ae:	1a64      	subs	r4, r4, r1
      break;
   b86b0:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b86b2:	b222      	sxth	r2, r4
      break;
   b86b4:	e7d9      	b.n	b866a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b86b6:	2a00      	cmp	r2, #0
   b86b8:	8904      	ldrh	r4, [r0, #8]
   b86ba:	4613      	mov	r3, r2
   b86bc:	bfb8      	it	lt
   b86be:	1dd3      	addlt	r3, r2, #7
   b86c0:	10db      	asrs	r3, r3, #3
   b86c2:	fb13 1104 	smlabb	r1, r3, r4, r1
   b86c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b86c8:	f002 0007 	and.w	r0, r2, #7
   b86cc:	2201      	movs	r2, #1
   b86ce:	4082      	lsls	r2, r0
   b86d0:	5c58      	ldrb	r0, [r3, r1]
   b86d2:	4302      	orrs	r2, r0
   b86d4:	545a      	strb	r2, [r3, r1]
}
   b86d6:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b86d8:	2a00      	cmp	r2, #0
   b86da:	4613      	mov	r3, r2
   b86dc:	8904      	ldrh	r4, [r0, #8]
   b86de:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b86e0:	bfb8      	it	lt
   b86e2:	1dd3      	addlt	r3, r2, #7
   b86e4:	10db      	asrs	r3, r3, #3
   b86e6:	fb13 1104 	smlabb	r1, r3, r4, r1
   b86ea:	f002 0207 	and.w	r2, r2, #7
   b86ee:	2301      	movs	r3, #1
   b86f0:	fa03 f202 	lsl.w	r2, r3, r2
   b86f4:	5c43      	ldrb	r3, [r0, r1]
   b86f6:	405a      	eors	r2, r3
   b86f8:	e7cc      	b.n	b8694 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b86fc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b86fc:	b570      	push	{r4, r5, r6, lr}
   b86fe:	4604      	mov	r4, r0
   b8700:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b8702:	2600      	movs	r6, #0
   b8704:	f7ff fd22 	bl	b814c <_ZN12Adafruit_GFXC1Ess>
   b8708:	4b11      	ldr	r3, [pc, #68]	; (b8750 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b870a:	6023      	str	r3, [r4, #0]
   b870c:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b870e:	b915      	cbnz	r5, b8716 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b8710:	f004 fe50 	bl	bd3b4 <_Z19__fetch_global_Wirev>
   b8714:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b8716:	23ff      	movs	r3, #255	; 0xff
   b8718:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b871c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b8720:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b8724:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b8728:	4b0a      	ldr	r3, [pc, #40]	; (b8754 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b872a:	63a3      	str	r3, [r4, #56]	; 0x38
   b872c:	2301      	movs	r3, #1
   b872e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b8732:	9b05      	ldr	r3, [sp, #20]
   b8734:	64a3      	str	r3, [r4, #72]	; 0x48
   b8736:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b873a:	9b06      	ldr	r3, [sp, #24]
   b873c:	86a2      	strh	r2, [r4, #52]	; 0x34
   b873e:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b8742:	6426      	str	r6, [r4, #64]	; 0x40
   b8744:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b8748:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b874a:	4620      	mov	r0, r4
   b874c:	bd70      	pop	{r4, r5, r6, pc}
   b874e:	bf00      	nop
   b8750:	000c1528 	.word	0x000c1528
   b8754:	000c0ae0 	.word	0x000c0ae0

000b8758 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b8758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b875a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b875c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b875e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b8760:	b190      	cbz	r0, b8788 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b8762:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b8766:	f003 ff33 	bl	bc5d0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b876a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b876c:	6803      	ldr	r3, [r0, #0]
   b876e:	2100      	movs	r1, #0
   b8770:	689b      	ldr	r3, [r3, #8]
   b8772:	4798      	blx	r3
    WIRE_WRITE(c);
   b8774:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8776:	6803      	ldr	r3, [r0, #0]
   b8778:	4629      	mov	r1, r5
   b877a:	689b      	ldr	r3, [r3, #8]
   b877c:	4798      	blx	r3
    wire->endTransmission();
   b877e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b8780:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b8784:	f003 bf2b 	b.w	bc5de <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b8788:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b878c:	4601      	mov	r1, r0
   b878e:	b298      	uxth	r0, r3
   b8790:	f004 fdb5 	bl	bd2fe <digitalWrite>
  if(spi) {
   b8794:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8796:	b120      	cbz	r0, b87a2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b8798:	4629      	mov	r1, r5
}
   b879a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b879e:	f004 b9bf 	b.w	bcb20 <_ZN8SPIClass8transferEh>
   b87a2:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b87a4:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b87a6:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b87aa:	ea05 0107 	and.w	r1, r5, r7
   b87ae:	b280      	uxth	r0, r0
   b87b0:	f004 fda5 	bl	bd2fe <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b87b4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b87b8:	2101      	movs	r1, #1
   b87ba:	b280      	uxth	r0, r0
   b87bc:	f004 fd9f 	bl	bd2fe <digitalWrite>
      digitalWrite(clkPin , LOW);
   b87c0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b87c4:	2100      	movs	r1, #0
   b87c6:	b280      	uxth	r0, r0
   b87c8:	f004 fd99 	bl	bd2fe <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b87cc:	3e01      	subs	r6, #1
   b87ce:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b87d2:	d1e8      	bne.n	b87a6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b87d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b87d6 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b87d6:	b538      	push	{r3, r4, r5, lr}
   b87d8:	4604      	mov	r4, r0
  TRANSACTION_START
   b87da:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b87dc:	460d      	mov	r5, r1
  TRANSACTION_START
   b87de:	b180      	cbz	r0, b8802 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b87e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b87e2:	f003 fee7 	bl	bc5b4 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b87e6:	2d00      	cmp	r5, #0
   b87e8:	4620      	mov	r0, r4
   b87ea:	bf14      	ite	ne
   b87ec:	21a7      	movne	r1, #167	; 0xa7
   b87ee:	21a6      	moveq	r1, #166	; 0xa6
   b87f0:	f7ff ffb2 	bl	b8758 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b87f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b87f6:	b188      	cbz	r0, b881c <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b87f8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b87fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b87fe:	f003 bed9 	b.w	bc5b4 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b8802:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8804:	b118      	cbz	r0, b880e <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b8806:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b880a:	f004 f91b 	bl	bca44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b880e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8812:	2100      	movs	r1, #0
   b8814:	b280      	uxth	r0, r0
   b8816:	f004 fd72 	bl	bd2fe <digitalWrite>
   b881a:	e7e4      	b.n	b87e6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b881c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8820:	2101      	movs	r1, #1
   b8822:	b280      	uxth	r0, r0
   b8824:	f004 fd6b 	bl	bd2fe <digitalWrite>
   b8828:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b882a:	b118      	cbz	r0, b8834 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b882c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b8830:	f004 b8ee 	b.w	bca10 <_ZN8SPIClass14endTransactionEv>
}
   b8834:	bd38      	pop	{r3, r4, r5, pc}

000b8836 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b8836:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b883a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b883c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b883e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b8840:	188f      	adds	r7, r1, r2
   b8842:	b340      	cbz	r0, b8896 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b8844:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b8848:	f003 fec2 	bl	bc5d0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b884c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b884e:	6803      	ldr	r3, [r0, #0]
   b8850:	2100      	movs	r1, #0
   b8852:	689b      	ldr	r3, [r3, #8]
   b8854:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b8856:	2601      	movs	r6, #1
    while(n--) {
   b8858:	42af      	cmp	r7, r5
        wire->endTransmission();
   b885a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b885c:	d017      	beq.n	b888e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b885e:	2e1f      	cmp	r6, #31
   b8860:	d90c      	bls.n	b887c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b8862:	f003 febc 	bl	bc5de <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b8866:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b886a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b886c:	f003 feb0 	bl	bc5d0 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b8870:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8872:	6803      	ldr	r3, [r0, #0]
   b8874:	2100      	movs	r1, #0
   b8876:	689b      	ldr	r3, [r3, #8]
   b8878:	4798      	blx	r3
        bytesOut = 1;
   b887a:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b887c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b887e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8882:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b8884:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b8886:	689b      	ldr	r3, [r3, #8]
   b8888:	4798      	blx	r3
      bytesOut++;
   b888a:	b2f6      	uxtb	r6, r6
    while(n--) {
   b888c:	e7e4      	b.n	b8858 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b888e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b8892:	f003 bea4 	b.w	bc5de <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b8896:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b889a:	4601      	mov	r1, r0
   b889c:	b298      	uxth	r0, r3
   b889e:	f004 fd2e 	bl	bd2fe <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b88a2:	42bd      	cmp	r5, r7
   b88a4:	d022      	beq.n	b88ec <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b88a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b88a8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b88ac:	b118      	cbz	r0, b88b6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b88ae:	4649      	mov	r1, r9
   b88b0:	f004 f936 	bl	bcb20 <_ZN8SPIClass8transferEh>
   b88b4:	e7f5      	b.n	b88a2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b88b6:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b88b8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b88bc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b88c0:	ea09 0108 	and.w	r1, r9, r8
   b88c4:	b280      	uxth	r0, r0
   b88c6:	f004 fd1a 	bl	bd2fe <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b88ca:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b88ce:	2101      	movs	r1, #1
   b88d0:	b280      	uxth	r0, r0
   b88d2:	f004 fd14 	bl	bd2fe <digitalWrite>
      digitalWrite(clkPin , LOW);
   b88d6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b88da:	2100      	movs	r1, #0
   b88dc:	b280      	uxth	r0, r0
   b88de:	f004 fd0e 	bl	bd2fe <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b88e2:	3e01      	subs	r6, #1
   b88e4:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b88e8:	d1e8      	bne.n	b88bc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b88ea:	e7da      	b.n	b88a2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b88ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b88f0 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b88f0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b88f4:	1dda      	adds	r2, r3, #7
   b88f6:	bf48      	it	mi
   b88f8:	f103 020e 	addmi.w	r2, r3, #14
   b88fc:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b8900:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b8902:	10d2      	asrs	r2, r2, #3
   b8904:	435a      	muls	r2, r3
   b8906:	2100      	movs	r1, #0
   b8908:	f005 bcad 	b.w	be266 <memset>

000b890c <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b890c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b8910:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b8912:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b8914:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b8918:	4604      	mov	r4, r0
   b891a:	460f      	mov	r7, r1
   b891c:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b891e:	b1c3      	cbz	r3, b8952 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b8920:	4620      	mov	r0, r4
   b8922:	f7ff ffe5 	bl	b88f0 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b8926:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b892a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b892e:	2820      	cmp	r0, #32
   b8930:	dc21      	bgt.n	b8976 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b8932:	2320      	movs	r3, #32
   b8934:	2201      	movs	r2, #1
   b8936:	3820      	subs	r0, #32
   b8938:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b893c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b8940:	2373      	movs	r3, #115	; 0x73
   b8942:	3973      	subs	r1, #115	; 0x73
   b8944:	9300      	str	r3, [sp, #0]
   b8946:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b894a:	4b89      	ldr	r3, [pc, #548]	; (b8b70 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b894c:	f340 024f 	sbfx	r2, r0, #1, #16
   b8950:	e021      	b.n	b8996 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b8952:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b8956:	1dd8      	adds	r0, r3, #7
   b8958:	bf48      	it	mi
   b895a:	f103 000e 	addmi.w	r0, r3, #14
   b895e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b8962:	10c0      	asrs	r0, r0, #3
   b8964:	4358      	muls	r0, r3
   b8966:	f000 ff07 	bl	b9778 <malloc>
   b896a:	62e0      	str	r0, [r4, #44]	; 0x2c
   b896c:	2800      	cmp	r0, #0
   b896e:	d1d7      	bne.n	b8920 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b8970:	b004      	add	sp, #16
   b8972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b8976:	3840      	subs	r0, #64	; 0x40
   b8978:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b897c:	fa02 f280 	sxtah	r2, r2, r0
   b8980:	2340      	movs	r3, #64	; 0x40
   b8982:	2001      	movs	r0, #1
   b8984:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b8988:	2352      	movs	r3, #82	; 0x52
   b898a:	3952      	subs	r1, #82	; 0x52
   b898c:	9300      	str	r3, [sp, #0]
   b898e:	4b79      	ldr	r3, [pc, #484]	; (b8b74 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b8990:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b8994:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b8996:	4620      	mov	r0, r4
   b8998:	f341 014f 	sbfx	r1, r1, #1, #16
   b899c:	f7ff fbec 	bl	b8178 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b89a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b89a2:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b89a6:	2800      	cmp	r0, #0
   b89a8:	d078      	beq.n	b8a9c <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b89aa:	2d00      	cmp	r5, #0
   b89ac:	d174      	bne.n	b8a98 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b89ae:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b89b2:	2b20      	cmp	r3, #32
   b89b4:	bf0c      	ite	eq
   b89b6:	253c      	moveq	r5, #60	; 0x3c
   b89b8:	253d      	movne	r5, #61	; 0x3d
   b89ba:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b89be:	f1b8 0f00 	cmp.w	r8, #0
   b89c2:	d001      	beq.n	b89c8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b89c4:	f003 fdfa 	bl	bc5bc <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b89c8:	b1fe      	cbz	r6, b8a0a <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b89ca:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b89ce:	2800      	cmp	r0, #0
   b89d0:	db1b      	blt.n	b8a0a <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b89d2:	2101      	movs	r1, #1
   b89d4:	b280      	uxth	r0, r0
   b89d6:	f004 fc81 	bl	bd2dc <pinMode>
    digitalWrite(rstPin, HIGH);
   b89da:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b89de:	2101      	movs	r1, #1
   b89e0:	b280      	uxth	r0, r0
   b89e2:	f004 fc8c 	bl	bd2fe <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b89e6:	2001      	movs	r0, #1
   b89e8:	f000 ff2e 	bl	b9848 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b89ec:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b89f0:	2100      	movs	r1, #0
   b89f2:	b280      	uxth	r0, r0
   b89f4:	f004 fc83 	bl	bd2fe <digitalWrite>
    delay(10);                  // Wait 10 ms
   b89f8:	200a      	movs	r0, #10
   b89fa:	f000 ff25 	bl	b9848 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b89fe:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b8a02:	2101      	movs	r1, #1
   b8a04:	b280      	uxth	r0, r0
   b8a06:	f004 fc7a 	bl	bd2fe <digitalWrite>
  TRANSACTION_START
   b8a0a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8a0c:	2800      	cmp	r0, #0
   b8a0e:	d074      	beq.n	b8afa <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b8a10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b8a12:	f003 fdcf 	bl	bc5b4 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b8a16:	2204      	movs	r2, #4
   b8a18:	4957      	ldr	r1, [pc, #348]	; (b8b78 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b8a1a:	4620      	mov	r0, r4
   b8a1c:	f7ff ff0b 	bl	b8836 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b8a20:	8961      	ldrh	r1, [r4, #10]
   b8a22:	3901      	subs	r1, #1
   b8a24:	b2c9      	uxtb	r1, r1
   b8a26:	4620      	mov	r0, r4
   b8a28:	f7ff fe96 	bl	b8758 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b8a2c:	4953      	ldr	r1, [pc, #332]	; (b8b7c <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b8a2e:	2204      	movs	r2, #4
   b8a30:	4620      	mov	r0, r4
   b8a32:	f7ff ff00 	bl	b8836 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b8a36:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8a3a:	2b01      	cmp	r3, #1
   b8a3c:	bf0c      	ite	eq
   b8a3e:	2110      	moveq	r1, #16
   b8a40:	2114      	movne	r1, #20
   b8a42:	4620      	mov	r0, r4
   b8a44:	f7ff fe88 	bl	b8758 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b8a48:	2204      	movs	r2, #4
   b8a4a:	494d      	ldr	r1, [pc, #308]	; (b8b80 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b8a4c:	4620      	mov	r0, r4
   b8a4e:	f7ff fef2 	bl	b8836 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b8a52:	68a3      	ldr	r3, [r4, #8]
   b8a54:	4a4b      	ldr	r2, [pc, #300]	; (b8b84 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b8a56:	4293      	cmp	r3, r2
   b8a58:	d15c      	bne.n	b8b14 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b8a5a:	494b      	ldr	r1, [pc, #300]	; (b8b88 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b8a5c:	2204      	movs	r2, #4
   b8a5e:	4620      	mov	r0, r4
   b8a60:	f7ff fee9 	bl	b8836 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b8a64:	21d9      	movs	r1, #217	; 0xd9
   b8a66:	4620      	mov	r0, r4
   b8a68:	f7ff fe76 	bl	b8758 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b8a6c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8a70:	2b01      	cmp	r3, #1
   b8a72:	bf0c      	ite	eq
   b8a74:	2122      	moveq	r1, #34	; 0x22
   b8a76:	21f1      	movne	r1, #241	; 0xf1
   b8a78:	4620      	mov	r0, r4
   b8a7a:	f7ff fe6d 	bl	b8758 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b8a7e:	4620      	mov	r0, r4
   b8a80:	4942      	ldr	r1, [pc, #264]	; (b8b8c <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b8a82:	2206      	movs	r2, #6
   b8a84:	f7ff fed7 	bl	b8836 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b8a88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8a8a:	2800      	cmp	r0, #0
   b8a8c:	d063      	beq.n	b8b56 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b8a8e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b8a90:	f003 fd90 	bl	bc5b4 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b8a94:	2001      	movs	r0, #1
   b8a96:	e76b      	b.n	b8970 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b8a98:	b26d      	sxtb	r5, r5
   b8a9a:	e78e      	b.n	b89ba <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b8a9c:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b8aa0:	2101      	movs	r1, #1
   b8aa2:	b280      	uxth	r0, r0
   b8aa4:	f004 fc1a 	bl	bd2dc <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b8aa8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8aac:	2101      	movs	r1, #1
   b8aae:	b280      	uxth	r0, r0
   b8ab0:	f004 fc14 	bl	bd2dc <pinMode>
    SSD1306_DESELECT
   b8ab4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8ab8:	2101      	movs	r1, #1
   b8aba:	b280      	uxth	r0, r0
   b8abc:	f004 fc1f 	bl	bd2fe <digitalWrite>
    if(spi) { // Hardware SPI
   b8ac0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b8ac2:	b13d      	cbz	r5, b8ad4 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b8ac4:	f1b8 0f00 	cmp.w	r8, #0
   b8ac8:	f43f af7e 	beq.w	b89c8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b8acc:	4628      	mov	r0, r5
   b8ace:	f003 ff8b 	bl	bc9e8 <_ZN8SPIClass5beginEv>
   b8ad2:	e779      	b.n	b89c8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b8ad4:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b8ad8:	2101      	movs	r1, #1
   b8ada:	b280      	uxth	r0, r0
   b8adc:	f004 fbfe 	bl	bd2dc <pinMode>
      pinMode(clkPin , OUTPUT);
   b8ae0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8ae4:	2101      	movs	r1, #1
   b8ae6:	b280      	uxth	r0, r0
   b8ae8:	f004 fbf8 	bl	bd2dc <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b8aec:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8af0:	4629      	mov	r1, r5
   b8af2:	b280      	uxth	r0, r0
   b8af4:	f004 fc03 	bl	bd2fe <digitalWrite>
   b8af8:	e766      	b.n	b89c8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b8afa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8afc:	b118      	cbz	r0, b8b06 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b8afe:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b8b02:	f003 ff9f 	bl	bca44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b8b06:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8b0a:	2100      	movs	r1, #0
   b8b0c:	b280      	uxth	r0, r0
   b8b0e:	f004 fbf6 	bl	bd2fe <digitalWrite>
   b8b12:	e780      	b.n	b8a16 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b8b14:	4a1e      	ldr	r2, [pc, #120]	; (b8b90 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b8b16:	4293      	cmp	r3, r2
   b8b18:	d10e      	bne.n	b8b38 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b8b1a:	491e      	ldr	r1, [pc, #120]	; (b8b94 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b8b1c:	2203      	movs	r2, #3
   b8b1e:	4620      	mov	r0, r4
   b8b20:	f7ff fe89 	bl	b8836 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b8b24:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8b28:	2b01      	cmp	r3, #1
   b8b2a:	bf0c      	ite	eq
   b8b2c:	219f      	moveq	r1, #159	; 0x9f
   b8b2e:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b8b30:	4620      	mov	r0, r4
   b8b32:	f7ff fe11 	bl	b8758 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b8b36:	e795      	b.n	b8a64 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b8b38:	4a17      	ldr	r2, [pc, #92]	; (b8b98 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b8b3a:	4293      	cmp	r3, r2
   b8b3c:	d192      	bne.n	b8a64 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b8b3e:	4917      	ldr	r1, [pc, #92]	; (b8b9c <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b8b40:	2203      	movs	r2, #3
   b8b42:	4620      	mov	r0, r4
   b8b44:	f7ff fe77 	bl	b8836 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b8b48:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8b4c:	2b01      	cmp	r3, #1
   b8b4e:	bf0c      	ite	eq
   b8b50:	2110      	moveq	r1, #16
   b8b52:	21af      	movne	r1, #175	; 0xaf
   b8b54:	e7ec      	b.n	b8b30 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b8b56:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8b5a:	2101      	movs	r1, #1
   b8b5c:	b280      	uxth	r0, r0
   b8b5e:	f004 fbce 	bl	bd2fe <digitalWrite>
   b8b62:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8b64:	2800      	cmp	r0, #0
   b8b66:	d095      	beq.n	b8a94 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b8b68:	f003 ff52 	bl	bca10 <_ZN8SPIClass14endTransactionEv>
   b8b6c:	e792      	b.n	b8a94 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b8b6e:	bf00      	nop
   b8b70:	000c1340 	.word	0x000c1340
   b8b74:	000c1080 	.word	0x000c1080
   b8b78:	000c1588 	.word	0x000c1588
   b8b7c:	000c158c 	.word	0x000c158c
   b8b80:	000c1590 	.word	0x000c1590
   b8b84:	00200080 	.word	0x00200080
   b8b88:	000c159a 	.word	0x000c159a
   b8b8c:	000c1594 	.word	0x000c1594
   b8b90:	00400080 	.word	0x00400080
   b8b94:	000c159e 	.word	0x000c159e
   b8b98:	00100060 	.word	0x00100060
   b8b9c:	000c15a1 	.word	0x000c15a1

000b8ba0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8ba0:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b8ba2:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8ba4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b8ba8:	db3d      	blt.n	b8c26 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8baa:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b8bae:	4294      	cmp	r4, r2
   b8bb0:	dd39      	ble.n	b8c26 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b8bb2:	2900      	cmp	r1, #0
      w += x;
   b8bb4:	bfbe      	ittt	lt
   b8bb6:	185b      	addlt	r3, r3, r1
   b8bb8:	b21b      	sxthlt	r3, r3
      x  = 0;
   b8bba:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b8bbc:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b8bc0:	18ce      	adds	r6, r1, r3
   b8bc2:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b8bc4:	bfc4      	itt	gt
   b8bc6:	1a63      	subgt	r3, r4, r1
   b8bc8:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b8bca:	2b00      	cmp	r3, #0
   b8bcc:	dd2b      	ble.n	b8c26 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b8bce:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b8bd0:	10d6      	asrs	r6, r2, #3
   b8bd2:	fb14 1106 	smlabb	r1, r4, r6, r1
   b8bd6:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b8bd8:	f002 0007 	and.w	r0, r2, #7
   b8bdc:	2201      	movs	r2, #1
   b8bde:	4082      	lsls	r2, r0
      switch(color) {
   b8be0:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b8be2:	b2d2      	uxtb	r2, r2
      switch(color) {
   b8be4:	d016      	beq.n	b8c14 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b8be6:	2d02      	cmp	r5, #2
   b8be8:	d00b      	beq.n	b8c02 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b8bea:	b9e5      	cbnz	r5, b8c26 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b8bec:	43d2      	mvns	r2, r2
   b8bee:	b2d2      	uxtb	r2, r2
   b8bf0:	440b      	add	r3, r1
   b8bf2:	4299      	cmp	r1, r3
   b8bf4:	d017      	beq.n	b8c26 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8bf6:	f811 0b01 	ldrb.w	r0, [r1], #1
   b8bfa:	4010      	ands	r0, r2
   b8bfc:	f801 0c01 	strb.w	r0, [r1, #-1]
   b8c00:	e7f7      	b.n	b8bf2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b8c02:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b8c04:	4299      	cmp	r1, r3
   b8c06:	d00e      	beq.n	b8c26 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8c08:	f811 0b01 	ldrb.w	r0, [r1], #1
   b8c0c:	4050      	eors	r0, r2
   b8c0e:	f801 0c01 	strb.w	r0, [r1, #-1]
   b8c12:	e7f7      	b.n	b8c04 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b8c14:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b8c16:	4299      	cmp	r1, r3
   b8c18:	d005      	beq.n	b8c26 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8c1a:	f811 0b01 	ldrb.w	r0, [r1], #1
   b8c1e:	4310      	orrs	r0, r2
   b8c20:	f801 0c01 	strb.w	r0, [r1, #-1]
   b8c24:	e7f7      	b.n	b8c16 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b8c26:	bd70      	pop	{r4, r5, r6, pc}

000b8c28 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b8c28:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b8c2a:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b8c2c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b8c30:	db76      	blt.n	b8d20 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b8c32:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b8c36:	42b1      	cmp	r1, r6
   b8c38:	da72      	bge.n	b8d20 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b8c3a:	2a00      	cmp	r2, #0
      __h += __y;
   b8c3c:	bfbe      	ittt	lt
   b8c3e:	189b      	addlt	r3, r3, r2
   b8c40:	b21b      	sxthlt	r3, r3
      __y = 0;
   b8c42:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b8c44:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b8c48:	18d7      	adds	r7, r2, r3
   b8c4a:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b8c4c:	bfc4      	itt	gt
   b8c4e:	1aa3      	subgt	r3, r4, r2
   b8c50:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b8c52:	2b00      	cmp	r3, #0
   b8c54:	dd64      	ble.n	b8d20 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b8c56:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b8c5a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b8c5c:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b8c60:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b8c64:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b8c66:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b8c6a:	d023      	beq.n	b8cb4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b8c6c:	f1c2 0208 	rsb	r2, r2, #8
   b8c70:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b8c72:	492d      	ldr	r1, [pc, #180]	; (b8d28 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b8c74:	4293      	cmp	r3, r2
   b8c76:	bf3c      	itt	cc
   b8c78:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b8c7c:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b8c80:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b8c82:	bf3c      	itt	cc
   b8c84:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b8c88:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b8c8c:	2d01      	cmp	r5, #1
   b8c8e:	d007      	beq.n	b8ca0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b8c90:	2d02      	cmp	r5, #2
   b8c92:	d02e      	beq.n	b8cf2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b8c94:	b94d      	cbnz	r5, b8caa <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b8c96:	f817 c006 	ldrb.w	ip, [r7, r6]
   b8c9a:	ea2c 0101 	bic.w	r1, ip, r1
   b8c9e:	e003      	b.n	b8ca8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b8ca0:	f817 c006 	ldrb.w	ip, [r7, r6]
   b8ca4:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b8ca8:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b8caa:	4293      	cmp	r3, r2
   b8cac:	d338      	bcc.n	b8d20 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b8cae:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b8cb2:	440c      	add	r4, r1
        h -= mod;
   b8cb4:	1a9a      	subs	r2, r3, r2
   b8cb6:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b8cb8:	2a07      	cmp	r2, #7
   b8cba:	d90e      	bls.n	b8cda <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b8cbc:	2d02      	cmp	r5, #2
   b8cbe:	d11d      	bne.n	b8cfc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b8cc0:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b8cc2:	7821      	ldrb	r1, [r4, #0]
   b8cc4:	43c9      	mvns	r1, r1
   b8cc6:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b8cc8:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b8cca:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b8cce:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b8cd0:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b8cd2:	440c      	add	r4, r1
            } while(h >= 8);
   b8cd4:	d8f5      	bhi.n	b8cc2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b8cd6:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b8cda:	b30a      	cbz	r2, b8d20 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b8cdc:	4b13      	ldr	r3, [pc, #76]	; (b8d2c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b8cde:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b8ce0:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b8ce2:	d01a      	beq.n	b8d1a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b8ce4:	2d02      	cmp	r5, #2
   b8ce6:	d01c      	beq.n	b8d22 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b8ce8:	b9d5      	cbnz	r5, b8d20 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b8cea:	7822      	ldrb	r2, [r4, #0]
   b8cec:	ea22 0303 	bic.w	r3, r2, r3
   b8cf0:	e015      	b.n	b8d1e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b8cf2:	f817 c006 	ldrb.w	ip, [r7, r6]
   b8cf6:	ea81 010c 	eor.w	r1, r1, ip
   b8cfa:	e7d5      	b.n	b8ca8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b8cfc:	1e29      	subs	r1, r5, #0
   b8cfe:	bf18      	it	ne
   b8d00:	2101      	movne	r1, #1
   b8d02:	4249      	negs	r1, r1
   b8d04:	b2c9      	uxtb	r1, r1
   b8d06:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b8d08:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b8d0a:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b8d0c:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b8d10:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b8d12:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b8d14:	4434      	add	r4, r6
            } while(h >= 8);
   b8d16:	d8f7      	bhi.n	b8d08 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b8d18:	e7dd      	b.n	b8cd6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b8d1a:	7822      	ldrb	r2, [r4, #0]
   b8d1c:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b8d1e:	7023      	strb	r3, [r4, #0]
}
   b8d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b8d22:	7822      	ldrb	r2, [r4, #0]
   b8d24:	4053      	eors	r3, r2
   b8d26:	e7fa      	b.n	b8d1e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b8d28:	000c1578 	.word	0x000c1578
   b8d2c:	000c1580 	.word	0x000c1580

000b8d30 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8d30:	b470      	push	{r4, r5, r6}
   b8d32:	4614      	mov	r4, r2
  switch(rotation) {
   b8d34:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8d36:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b8d3a:	2a02      	cmp	r2, #2
   b8d3c:	d00d      	beq.n	b8d5a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b8d3e:	2a03      	cmp	r2, #3
   b8d40:	d018      	beq.n	b8d74 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b8d42:	2a01      	cmp	r2, #1
   b8d44:	d111      	bne.n	b8d6a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b8d46:	8902      	ldrh	r2, [r0, #8]
   b8d48:	43e4      	mvns	r4, r4
   b8d4a:	4414      	add	r4, r2
   b8d4c:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b8d4e:	9603      	str	r6, [sp, #12]
   b8d50:	460a      	mov	r2, r1
   b8d52:	4621      	mov	r1, r4
}
   b8d54:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b8d56:	f7ff bf67 	b.w	b8c28 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b8d5a:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b8d5c:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b8d5e:	43e4      	mvns	r4, r4
    x -= (w-1);
   b8d60:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b8d62:	4414      	add	r4, r2
    x -= (w-1);
   b8d64:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b8d66:	b224      	sxth	r4, r4
    x -= (w-1);
   b8d68:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b8d6a:	9603      	str	r6, [sp, #12]
   b8d6c:	4622      	mov	r2, r4
}
   b8d6e:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b8d70:	f7ff bf16 	b.w	b8ba0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b8d74:	8945      	ldrh	r5, [r0, #10]
   b8d76:	4419      	add	r1, r3
   b8d78:	1a69      	subs	r1, r5, r1
   b8d7a:	b209      	sxth	r1, r1
    break;
   b8d7c:	e7e7      	b.n	b8d4e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b8d7e <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b8d7e:	b430      	push	{r4, r5}
   b8d80:	4614      	mov	r4, r2
  switch(rotation) {
   b8d82:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b8d84:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b8d88:	2a02      	cmp	r2, #2
   b8d8a:	d00d      	beq.n	b8da8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b8d8c:	2a03      	cmp	r2, #3
   b8d8e:	d018      	beq.n	b8dc2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b8d90:	2a01      	cmp	r2, #1
   b8d92:	d111      	bne.n	b8db8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b8d94:	18e2      	adds	r2, r4, r3
   b8d96:	8904      	ldrh	r4, [r0, #8]
   b8d98:	1aa4      	subs	r4, r4, r2
   b8d9a:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b8d9c:	9502      	str	r5, [sp, #8]
   b8d9e:	460a      	mov	r2, r1
   b8da0:	4621      	mov	r1, r4
}
   b8da2:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b8da4:	f7ff befc 	b.w	b8ba0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b8da8:	8902      	ldrh	r2, [r0, #8]
   b8daa:	43c9      	mvns	r1, r1
   b8dac:	4411      	add	r1, r2
    y -= (h-1);
   b8dae:	18e2      	adds	r2, r4, r3
   b8db0:	8944      	ldrh	r4, [r0, #10]
   b8db2:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b8db4:	b209      	sxth	r1, r1
    y -= (h-1);
   b8db6:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b8db8:	9502      	str	r5, [sp, #8]
   b8dba:	4622      	mov	r2, r4
}
   b8dbc:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b8dbe:	f7ff bf33 	b.w	b8c28 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b8dc2:	8942      	ldrh	r2, [r0, #10]
   b8dc4:	43c9      	mvns	r1, r1
   b8dc6:	4411      	add	r1, r2
   b8dc8:	b209      	sxth	r1, r1
    break;
   b8dca:	e7e7      	b.n	b8d9c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b8dcc <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b8dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8dd0:	4604      	mov	r4, r0
  TRANSACTION_START
   b8dd2:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b8dd4:	2800      	cmp	r0, #0
   b8dd6:	d042      	beq.n	b8e5e <_ZN16Adafruit_SSD13067displayEv+0x92>
   b8dd8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b8dda:	f003 fbeb 	bl	bc5b4 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b8dde:	4947      	ldr	r1, [pc, #284]	; (b8efc <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b8de0:	2205      	movs	r2, #5
   b8de2:	4620      	mov	r0, r4
   b8de4:	f7ff fd27 	bl	b8836 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b8de8:	8921      	ldrh	r1, [r4, #8]
   b8dea:	3901      	subs	r1, #1
   b8dec:	4620      	mov	r0, r4
   b8dee:	b2c9      	uxtb	r1, r1
   b8df0:	f7ff fcb2 	bl	b8758 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b8df4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b8df8:	1dde      	adds	r6, r3, #7
   b8dfa:	bf48      	it	mi
   b8dfc:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b8e00:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b8e04:	8923      	ldrh	r3, [r4, #8]
   b8e06:	10f6      	asrs	r6, r6, #3
   b8e08:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b8e0c:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b8e10:	2800      	cmp	r0, #0
   b8e12:	d03a      	beq.n	b8e8a <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b8e14:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b8e18:	f003 fbda 	bl	bc5d0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b8e1c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8e1e:	6803      	ldr	r3, [r0, #0]
   b8e20:	2140      	movs	r1, #64	; 0x40
   b8e22:	689b      	ldr	r3, [r3, #8]
   b8e24:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b8e26:	2701      	movs	r7, #1
    while(count--) {
   b8e28:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b8e2a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b8e2c:	d024      	beq.n	b8e78 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b8e2e:	2f1f      	cmp	r7, #31
   b8e30:	d90c      	bls.n	b8e4c <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b8e32:	f003 fbd4 	bl	bc5de <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b8e36:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b8e3a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8e3c:	f003 fbc8 	bl	bc5d0 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b8e40:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8e42:	6803      	ldr	r3, [r0, #0]
   b8e44:	2140      	movs	r1, #64	; 0x40
   b8e46:	689b      	ldr	r3, [r3, #8]
   b8e48:	4798      	blx	r3
        bytesOut = 1;
   b8e4a:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b8e4c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8e4e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8e52:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b8e54:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b8e56:	689b      	ldr	r3, [r3, #8]
   b8e58:	4798      	blx	r3
      bytesOut++;
   b8e5a:	b2ff      	uxtb	r7, r7
    while(count--) {
   b8e5c:	e7e4      	b.n	b8e28 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b8e5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8e60:	b118      	cbz	r0, b8e6a <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b8e62:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b8e66:	f003 fded 	bl	bca44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b8e6a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8e6e:	2100      	movs	r1, #0
   b8e70:	b280      	uxth	r0, r0
   b8e72:	f004 fa44 	bl	bd2fe <digitalWrite>
   b8e76:	e7b2      	b.n	b8dde <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b8e78:	f003 fbb1 	bl	bc5de <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b8e7c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8e7e:	b378      	cbz	r0, b8ee0 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b8e80:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b8e82:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8e86:	f003 bb95 	b.w	bc5b4 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b8e8a:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b8e8e:	2101      	movs	r1, #1
   b8e90:	b280      	uxth	r0, r0
   b8e92:	f004 fa34 	bl	bd2fe <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b8e96:	42ae      	cmp	r6, r5
   b8e98:	d0f0      	beq.n	b8e7c <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b8e9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b8e9c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b8ea0:	b118      	cbz	r0, b8eaa <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b8ea2:	4649      	mov	r1, r9
   b8ea4:	f003 fe3c 	bl	bcb20 <_ZN8SPIClass8transferEh>
   b8ea8:	e7f5      	b.n	b8e96 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b8eaa:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b8eac:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b8eb0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b8eb4:	ea09 0108 	and.w	r1, r9, r8
   b8eb8:	b280      	uxth	r0, r0
   b8eba:	f004 fa20 	bl	bd2fe <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b8ebe:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8ec2:	2101      	movs	r1, #1
   b8ec4:	b280      	uxth	r0, r0
   b8ec6:	f004 fa1a 	bl	bd2fe <digitalWrite>
      digitalWrite(clkPin , LOW);
   b8eca:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8ece:	2100      	movs	r1, #0
   b8ed0:	b280      	uxth	r0, r0
   b8ed2:	f004 fa14 	bl	bd2fe <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b8ed6:	3f01      	subs	r7, #1
   b8ed8:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b8edc:	d1e8      	bne.n	b8eb0 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b8ede:	e7da      	b.n	b8e96 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b8ee0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8ee4:	2101      	movs	r1, #1
   b8ee6:	b280      	uxth	r0, r0
   b8ee8:	f004 fa09 	bl	bd2fe <digitalWrite>
   b8eec:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8eee:	b118      	cbz	r0, b8ef8 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b8ef0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b8ef4:	f003 bd8c 	b.w	bca10 <_ZN8SPIClass14endTransactionEv>
}
   b8ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8efc:	000c15a4 	.word	0x000c15a4

000b8f00 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b8f00:	2100      	movs	r1, #0
   b8f02:	220a      	movs	r2, #10
   b8f04:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b8f08:	4770      	bx	lr

000b8f0a <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b8f0a:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b8f0c:	b510      	push	{r4, lr}
   b8f0e:	4604      	mov	r4, r0
    this->pin = pin;
   b8f10:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b8f12:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b8f14:	b288      	uxth	r0, r1
   b8f16:	f004 fa0b 	bl	bd330 <digitalRead>
   b8f1a:	b108      	cbz	r0, b8f20 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b8f1c:	2303      	movs	r3, #3
   b8f1e:	71a3      	strb	r3, [r4, #6]
   b8f20:	f000 f9ae 	bl	b9280 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b8f24:	6020      	str	r0, [r4, #0]
#endif
}
   b8f26:	bd10      	pop	{r4, pc}

000b8f28 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b8f28:	b538      	push	{r3, r4, r5, lr}
   b8f2a:	460c      	mov	r4, r1
   b8f2c:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b8f2e:	4611      	mov	r1, r2
   b8f30:	b2a0      	uxth	r0, r4
   b8f32:	f004 f9d3 	bl	bd2dc <pinMode>
  
  this->attach(pin);
   b8f36:	4621      	mov	r1, r4
   b8f38:	4628      	mov	r0, r5
}
   b8f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b8f3e:	f7ff bfe4 	b.w	b8f0a <_ZN8Debounce6attachEi>
	...

000b8f44 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b8f44:	b510      	push	{r4, lr}
   b8f46:	4b06      	ldr	r3, [pc, #24]	; (b8f60 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b8f48:	6003      	str	r3, [r0, #0]
   b8f4a:	4604      	mov	r4, r0
	if (mutex) {
   b8f4c:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b8f4e:	b108      	cbz	r0, b8f54 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b8f50:	f000 f956 	bl	b9200 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b8f54:	4620      	mov	r0, r4
   b8f56:	f7ff fb59 	bl	b860c <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b8f5a:	4620      	mov	r0, r4
   b8f5c:	bd10      	pop	{r4, pc}
   b8f5e:	bf00      	nop
   b8f60:	000c15b4 	.word	0x000c15b4

000b8f64 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b8f64:	b510      	push	{r4, lr}
   b8f66:	4604      	mov	r4, r0
}
   b8f68:	f7ff ffec 	bl	b8f44 <_ZN16OledWingAdafruitD1Ev>
   b8f6c:	4620      	mov	r0, r4
   b8f6e:	2170      	movs	r1, #112	; 0x70
   b8f70:	f7fb f895 	bl	b409e <_ZdlPvj>
   b8f74:	4620      	mov	r0, r4
   b8f76:	bd10      	pop	{r4, pc}

000b8f78 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b8f78:	b530      	push	{r4, r5, lr}
   b8f7a:	b085      	sub	sp, #20
   b8f7c:	4604      	mov	r4, r0
   b8f7e:	460d      	mov	r5, r1
   b8f80:	f004 fa18 	bl	bd3b4 <_Z19__fetch_global_Wirev>
   b8f84:	4a10      	ldr	r2, [pc, #64]	; (b8fc8 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b8f86:	4911      	ldr	r1, [pc, #68]	; (b8fcc <_ZN16OledWingAdafruitC1Ei+0x54>)
   b8f88:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b8f8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8f90:	2180      	movs	r1, #128	; 0x80
   b8f92:	4603      	mov	r3, r0
   b8f94:	9200      	str	r2, [sp, #0]
   b8f96:	4620      	mov	r0, r4
   b8f98:	2220      	movs	r2, #32
   b8f9a:	f7ff fbaf 	bl	b86fc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b8f9e:	4b0c      	ldr	r3, [pc, #48]	; (b8fd0 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b8fa0:	6023      	str	r3, [r4, #0]
   b8fa2:	2300      	movs	r3, #0
   b8fa4:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b8fa8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b8fac:	f7ff ffa8 	bl	b8f00 <_ZN8DebounceC1Ev>
   b8fb0:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b8fb4:	f7ff ffa4 	bl	b8f00 <_ZN8DebounceC1Ev>
   b8fb8:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b8fbc:	f7ff ffa0 	bl	b8f00 <_ZN8DebounceC1Ev>
}
   b8fc0:	4620      	mov	r0, r4
   b8fc2:	b005      	add	sp, #20
   b8fc4:	bd30      	pop	{r4, r5, pc}
   b8fc6:	bf00      	nop
   b8fc8:	00061a80 	.word	0x00061a80
   b8fcc:	000186a0 	.word	0x000186a0
   b8fd0:	000c15b4 	.word	0x000c15b4

000b8fd4 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b8fd4:	b513      	push	{r0, r1, r4, lr}
   b8fd6:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b8fd8:	3050      	adds	r0, #80	; 0x50
   b8fda:	f000 f909 	bl	b91f0 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b8fde:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b8fe0:	07d9      	lsls	r1, r3, #31
   b8fe2:	d505      	bpl.n	b8ff0 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b8fe4:	2202      	movs	r2, #2
   b8fe6:	2104      	movs	r1, #4
   b8fe8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b8fec:	f7ff ff9c 	bl	b8f28 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b8ff0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b8ff2:	079a      	lsls	r2, r3, #30
   b8ff4:	d505      	bpl.n	b9002 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b8ff6:	2200      	movs	r2, #0
   b8ff8:	2103      	movs	r1, #3
   b8ffa:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b8ffe:	f7ff ff93 	bl	b8f28 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b9002:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b9004:	075b      	lsls	r3, r3, #29
   b9006:	d505      	bpl.n	b9014 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b9008:	2202      	movs	r2, #2
   b900a:	4611      	mov	r1, r2
   b900c:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b9010:	f7ff ff8a 	bl	b8f28 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b9014:	2301      	movs	r3, #1
   b9016:	9300      	str	r3, [sp, #0]
   b9018:	223c      	movs	r2, #60	; 0x3c
   b901a:	2102      	movs	r1, #2
   b901c:	4620      	mov	r0, r4
   b901e:	f7ff fc75 	bl	b890c <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b9022:	b002      	add	sp, #8
   b9024:	bd10      	pop	{r4, pc}
	...

000b9028 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b9028:	b508      	push	{r3, lr}
   b902a:	4b02      	ldr	r3, [pc, #8]	; (b9034 <hal_ble_stack_init+0xc>)
   b902c:	681b      	ldr	r3, [r3, #0]
   b902e:	689b      	ldr	r3, [r3, #8]
   b9030:	9301      	str	r3, [sp, #4]
   b9032:	bd08      	pop	{r3, pc}
   b9034:	00030278 	.word	0x00030278

000b9038 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   b9038:	b508      	push	{r3, lr}
   b903a:	4b02      	ldr	r3, [pc, #8]	; (b9044 <hal_ble_gap_set_tx_power+0xc>)
   b903c:	681b      	ldr	r3, [r3, #0]
   b903e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9040:	9301      	str	r3, [sp, #4]
   b9042:	bd08      	pop	{r3, pc}
   b9044:	00030278 	.word	0x00030278

000b9048 <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   b9048:	b508      	push	{r3, lr}
   b904a:	4b02      	ldr	r3, [pc, #8]	; (b9054 <hal_ble_gap_set_scan_parameters+0xc>)
   b904c:	681b      	ldr	r3, [r3, #0]
   b904e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b9050:	9301      	str	r3, [sp, #4]
   b9052:	bd08      	pop	{r3, pc}
   b9054:	00030278 	.word	0x00030278

000b9058 <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   b9058:	b508      	push	{r3, lr}
   b905a:	4b02      	ldr	r3, [pc, #8]	; (b9064 <hal_ble_gap_get_scan_parameters+0xc>)
   b905c:	681b      	ldr	r3, [r3, #0]
   b905e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b9060:	9301      	str	r3, [sp, #4]
   b9062:	bd08      	pop	{r3, pc}
   b9064:	00030278 	.word	0x00030278

000b9068 <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b9068:	b508      	push	{r3, lr}
   b906a:	4b02      	ldr	r3, [pc, #8]	; (b9074 <hal_ble_gap_start_scan+0xc>)
   b906c:	681b      	ldr	r3, [r3, #0]
   b906e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9070:	9301      	str	r3, [sp, #4]
   b9072:	bd08      	pop	{r3, pc}
   b9074:	00030278 	.word	0x00030278

000b9078 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b9078:	b508      	push	{r3, lr}
   b907a:	4b03      	ldr	r3, [pc, #12]	; (b9088 <hal_ble_gap_stop_scan+0x10>)
   b907c:	681b      	ldr	r3, [r3, #0]
   b907e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b9082:	9301      	str	r3, [sp, #4]
   b9084:	bd08      	pop	{r3, pc}
   b9086:	0000      	.short	0x0000
   b9088:	00030278 	.word	0x00030278

000b908c <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b908c:	b508      	push	{r3, lr}
   b908e:	4b03      	ldr	r3, [pc, #12]	; (b909c <hal_ble_gap_disconnect+0x10>)
   b9090:	681b      	ldr	r3, [r3, #0]
   b9092:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b9096:	9301      	str	r3, [sp, #4]
   b9098:	bd08      	pop	{r3, pc}
   b909a:	0000      	.short	0x0000
   b909c:	00030278 	.word	0x00030278

000b90a0 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b90a0:	b508      	push	{r3, lr}
   b90a2:	4b03      	ldr	r3, [pc, #12]	; (b90b0 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b90a4:	681b      	ldr	r3, [r3, #0]
   b90a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b90aa:	9301      	str	r3, [sp, #4]
   b90ac:	bd08      	pop	{r3, pc}
   b90ae:	0000      	.short	0x0000
   b90b0:	00030278 	.word	0x00030278

000b90b4 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b90b4:	b508      	push	{r3, lr}
   b90b6:	4b03      	ldr	r3, [pc, #12]	; (b90c4 <hal_ble_gatt_client_discover_all_services+0x10>)
   b90b8:	681b      	ldr	r3, [r3, #0]
   b90ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b90be:	9301      	str	r3, [sp, #4]
   b90c0:	bd08      	pop	{r3, pc}
   b90c2:	0000      	.short	0x0000
   b90c4:	00030278 	.word	0x00030278

000b90c8 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b90c8:	b508      	push	{r3, lr}
   b90ca:	4b03      	ldr	r3, [pc, #12]	; (b90d8 <hal_ble_gatt_client_discover_characteristics+0x10>)
   b90cc:	681b      	ldr	r3, [r3, #0]
   b90ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b90d2:	9301      	str	r3, [sp, #4]
   b90d4:	bd08      	pop	{r3, pc}
   b90d6:	0000      	.short	0x0000
   b90d8:	00030278 	.word	0x00030278

000b90dc <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b90dc:	b508      	push	{r3, lr}
   b90de:	4b03      	ldr	r3, [pc, #12]	; (b90ec <hal_ble_gatt_client_write_with_response+0x10>)
   b90e0:	681b      	ldr	r3, [r3, #0]
   b90e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b90e6:	9301      	str	r3, [sp, #4]
   b90e8:	bd08      	pop	{r3, pc}
   b90ea:	0000      	.short	0x0000
   b90ec:	00030278 	.word	0x00030278

000b90f0 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b90f0:	b508      	push	{r3, lr}
   b90f2:	4b03      	ldr	r3, [pc, #12]	; (b9100 <hal_ble_gatt_client_write_without_response+0x10>)
   b90f4:	681b      	ldr	r3, [r3, #0]
   b90f6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b90fa:	9301      	str	r3, [sp, #4]
   b90fc:	bd08      	pop	{r3, pc}
   b90fe:	0000      	.short	0x0000
   b9100:	00030278 	.word	0x00030278

000b9104 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b9104:	b508      	push	{r3, lr}
   b9106:	4b03      	ldr	r3, [pc, #12]	; (b9114 <hal_ble_gatt_client_read+0x10>)
   b9108:	681b      	ldr	r3, [r3, #0]
   b910a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b910e:	9301      	str	r3, [sp, #4]
   b9110:	bd08      	pop	{r3, pc}
   b9112:	0000      	.short	0x0000
   b9114:	00030278 	.word	0x00030278

000b9118 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b9118:	b508      	push	{r3, lr}
   b911a:	4b03      	ldr	r3, [pc, #12]	; (b9128 <hal_ble_gap_connect+0x10>)
   b911c:	681b      	ldr	r3, [r3, #0]
   b911e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b9122:	9301      	str	r3, [sp, #4]
   b9124:	bd08      	pop	{r3, pc}
   b9126:	0000      	.short	0x0000
   b9128:	00030278 	.word	0x00030278

000b912c <hal_ble_gap_get_connection_info>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   b912c:	b508      	push	{r3, lr}
   b912e:	4b03      	ldr	r3, [pc, #12]	; (b913c <hal_ble_gap_get_connection_info+0x10>)
   b9130:	681b      	ldr	r3, [r3, #0]
   b9132:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   b9136:	9301      	str	r3, [sp, #4]
   b9138:	bd08      	pop	{r3, pc}
   b913a:	0000      	.short	0x0000
   b913c:	00030278 	.word	0x00030278

000b9140 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b9140:	b508      	push	{r3, lr}
   b9142:	4b03      	ldr	r3, [pc, #12]	; (b9150 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b9144:	681b      	ldr	r3, [r3, #0]
   b9146:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b914a:	9301      	str	r3, [sp, #4]
   b914c:	bd08      	pop	{r3, pc}
   b914e:	0000      	.short	0x0000
   b9150:	00030278 	.word	0x00030278

000b9154 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b9154:	b508      	push	{r3, lr}
   b9156:	4b03      	ldr	r3, [pc, #12]	; (b9164 <hal_ble_gatt_client_configure_cccd+0x10>)
   b9158:	681b      	ldr	r3, [r3, #0]
   b915a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b915e:	9301      	str	r3, [sp, #4]
   b9160:	bd08      	pop	{r3, pc}
   b9162:	0000      	.short	0x0000
   b9164:	00030278 	.word	0x00030278

000b9168 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9168:	b508      	push	{r3, lr}
   b916a:	4b03      	ldr	r3, [pc, #12]	; (b9178 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b916c:	681b      	ldr	r3, [r3, #0]
   b916e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b9172:	9301      	str	r3, [sp, #4]
   b9174:	bd08      	pop	{r3, pc}
   b9176:	0000      	.short	0x0000
   b9178:	00030278 	.word	0x00030278

000b917c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b917c:	b508      	push	{r3, lr}
   b917e:	4b03      	ldr	r3, [pc, #12]	; (b918c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b9180:	681b      	ldr	r3, [r3, #0]
   b9182:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b9186:	9301      	str	r3, [sp, #4]
   b9188:	bd08      	pop	{r3, pc}
   b918a:	0000      	.short	0x0000
   b918c:	00030278 	.word	0x00030278

000b9190 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b9190:	b508      	push	{r3, lr}
   b9192:	4b02      	ldr	r3, [pc, #8]	; (b919c <os_thread_yield+0xc>)
   b9194:	681b      	ldr	r3, [r3, #0]
   b9196:	68db      	ldr	r3, [r3, #12]
   b9198:	9301      	str	r3, [sp, #4]
   b919a:	bd08      	pop	{r3, pc}
   b919c:	00030248 	.word	0x00030248

000b91a0 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b91a0:	b508      	push	{r3, lr}
   b91a2:	4b02      	ldr	r3, [pc, #8]	; (b91ac <os_thread_scheduling+0xc>)
   b91a4:	681b      	ldr	r3, [r3, #0]
   b91a6:	69db      	ldr	r3, [r3, #28]
   b91a8:	9301      	str	r3, [sp, #4]
   b91aa:	bd08      	pop	{r3, pc}
   b91ac:	00030248 	.word	0x00030248

000b91b0 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b91b0:	b508      	push	{r3, lr}
   b91b2:	4b02      	ldr	r3, [pc, #8]	; (b91bc <os_timer_create+0xc>)
   b91b4:	681b      	ldr	r3, [r3, #0]
   b91b6:	6a1b      	ldr	r3, [r3, #32]
   b91b8:	9301      	str	r3, [sp, #4]
   b91ba:	bd08      	pop	{r3, pc}
   b91bc:	00030248 	.word	0x00030248

000b91c0 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b91c0:	b508      	push	{r3, lr}
   b91c2:	4b02      	ldr	r3, [pc, #8]	; (b91cc <os_timer_destroy+0xc>)
   b91c4:	681b      	ldr	r3, [r3, #0]
   b91c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b91c8:	9301      	str	r3, [sp, #4]
   b91ca:	bd08      	pop	{r3, pc}
   b91cc:	00030248 	.word	0x00030248

000b91d0 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b91d0:	b508      	push	{r3, lr}
   b91d2:	4b02      	ldr	r3, [pc, #8]	; (b91dc <os_timer_get_id+0xc>)
   b91d4:	681b      	ldr	r3, [r3, #0]
   b91d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b91d8:	9301      	str	r3, [sp, #4]
   b91da:	bd08      	pop	{r3, pc}
   b91dc:	00030248 	.word	0x00030248

000b91e0 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b91e0:	b508      	push	{r3, lr}
   b91e2:	4b02      	ldr	r3, [pc, #8]	; (b91ec <os_timer_change+0xc>)
   b91e4:	681b      	ldr	r3, [r3, #0]
   b91e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b91e8:	9301      	str	r3, [sp, #4]
   b91ea:	bd08      	pop	{r3, pc}
   b91ec:	00030248 	.word	0x00030248

000b91f0 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b91f0:	b508      	push	{r3, lr}
   b91f2:	4b02      	ldr	r3, [pc, #8]	; (b91fc <os_mutex_create+0xc>)
   b91f4:	681b      	ldr	r3, [r3, #0]
   b91f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b91f8:	9301      	str	r3, [sp, #4]
   b91fa:	bd08      	pop	{r3, pc}
   b91fc:	00030248 	.word	0x00030248

000b9200 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b9200:	b508      	push	{r3, lr}
   b9202:	4b02      	ldr	r3, [pc, #8]	; (b920c <os_mutex_destroy+0xc>)
   b9204:	681b      	ldr	r3, [r3, #0]
   b9206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9208:	9301      	str	r3, [sp, #4]
   b920a:	bd08      	pop	{r3, pc}
   b920c:	00030248 	.word	0x00030248

000b9210 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b9210:	b508      	push	{r3, lr}
   b9212:	4b02      	ldr	r3, [pc, #8]	; (b921c <os_mutex_recursive_create+0xc>)
   b9214:	681b      	ldr	r3, [r3, #0]
   b9216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9218:	9301      	str	r3, [sp, #4]
   b921a:	bd08      	pop	{r3, pc}
   b921c:	00030248 	.word	0x00030248

000b9220 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b9220:	b508      	push	{r3, lr}
   b9222:	4b02      	ldr	r3, [pc, #8]	; (b922c <os_mutex_recursive_lock+0xc>)
   b9224:	681b      	ldr	r3, [r3, #0]
   b9226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9228:	9301      	str	r3, [sp, #4]
   b922a:	bd08      	pop	{r3, pc}
   b922c:	00030248 	.word	0x00030248

000b9230 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b9230:	b508      	push	{r3, lr}
   b9232:	4b02      	ldr	r3, [pc, #8]	; (b923c <os_mutex_recursive_unlock+0xc>)
   b9234:	681b      	ldr	r3, [r3, #0]
   b9236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b9238:	9301      	str	r3, [sp, #4]
   b923a:	bd08      	pop	{r3, pc}
   b923c:	00030248 	.word	0x00030248

000b9240 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b9240:	b508      	push	{r3, lr}
   b9242:	4b02      	ldr	r3, [pc, #8]	; (b924c <os_timer_set_id+0xc>)
   b9244:	681b      	ldr	r3, [r3, #0]
   b9246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b9248:	9301      	str	r3, [sp, #4]
   b924a:	bd08      	pop	{r3, pc}
   b924c:	00030248 	.word	0x00030248

000b9250 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b9250:	b508      	push	{r3, lr}
   b9252:	4b02      	ldr	r3, [pc, #8]	; (b925c <HAL_RNG_GetRandomNumber+0xc>)
   b9254:	681b      	ldr	r3, [r3, #0]
   b9256:	685b      	ldr	r3, [r3, #4]
   b9258:	9301      	str	r3, [sp, #4]
   b925a:	bd08      	pop	{r3, pc}
   b925c:	00030218 	.word	0x00030218

000b9260 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b9260:	b508      	push	{r3, lr}
   b9262:	4b02      	ldr	r3, [pc, #8]	; (b926c <HAL_Delay_Microseconds+0xc>)
   b9264:	681b      	ldr	r3, [r3, #0]
   b9266:	68db      	ldr	r3, [r3, #12]
   b9268:	9301      	str	r3, [sp, #4]
   b926a:	bd08      	pop	{r3, pc}
   b926c:	00030218 	.word	0x00030218

000b9270 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b9270:	b508      	push	{r3, lr}
   b9272:	4b02      	ldr	r3, [pc, #8]	; (b927c <HAL_Timer_Get_Micro_Seconds+0xc>)
   b9274:	681b      	ldr	r3, [r3, #0]
   b9276:	691b      	ldr	r3, [r3, #16]
   b9278:	9301      	str	r3, [sp, #4]
   b927a:	bd08      	pop	{r3, pc}
   b927c:	00030218 	.word	0x00030218

000b9280 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b9280:	b508      	push	{r3, lr}
   b9282:	4b02      	ldr	r3, [pc, #8]	; (b928c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b9284:	681b      	ldr	r3, [r3, #0]
   b9286:	695b      	ldr	r3, [r3, #20]
   b9288:	9301      	str	r3, [sp, #4]
   b928a:	bd08      	pop	{r3, pc}
   b928c:	00030218 	.word	0x00030218

000b9290 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b9290:	b508      	push	{r3, lr}
   b9292:	4b02      	ldr	r3, [pc, #8]	; (b929c <hal_rtc_time_is_valid+0xc>)
   b9294:	681b      	ldr	r3, [r3, #0]
   b9296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b9298:	9301      	str	r3, [sp, #4]
   b929a:	bd08      	pop	{r3, pc}
   b929c:	00030218 	.word	0x00030218

000b92a0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b92a0:	b508      	push	{r3, lr}
   b92a2:	4b02      	ldr	r3, [pc, #8]	; (b92ac <hal_rtc_get_time+0xc>)
   b92a4:	681b      	ldr	r3, [r3, #0]
   b92a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b92a8:	9301      	str	r3, [sp, #4]
   b92aa:	bd08      	pop	{r3, pc}
   b92ac:	00030218 	.word	0x00030218

000b92b0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b92b0:	b508      	push	{r3, lr}
   b92b2:	4b02      	ldr	r3, [pc, #8]	; (b92bc <HAL_Validate_Pin_Function+0xc>)
   b92b4:	681b      	ldr	r3, [r3, #0]
   b92b6:	685b      	ldr	r3, [r3, #4]
   b92b8:	9301      	str	r3, [sp, #4]
   b92ba:	bd08      	pop	{r3, pc}
   b92bc:	0003022c 	.word	0x0003022c

000b92c0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b92c0:	b508      	push	{r3, lr}
   b92c2:	4b02      	ldr	r3, [pc, #8]	; (b92cc <HAL_Pin_Mode+0xc>)
   b92c4:	681b      	ldr	r3, [r3, #0]
   b92c6:	689b      	ldr	r3, [r3, #8]
   b92c8:	9301      	str	r3, [sp, #4]
   b92ca:	bd08      	pop	{r3, pc}
   b92cc:	0003022c 	.word	0x0003022c

000b92d0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b92d0:	b508      	push	{r3, lr}
   b92d2:	4b02      	ldr	r3, [pc, #8]	; (b92dc <HAL_Get_Pin_Mode+0xc>)
   b92d4:	681b      	ldr	r3, [r3, #0]
   b92d6:	68db      	ldr	r3, [r3, #12]
   b92d8:	9301      	str	r3, [sp, #4]
   b92da:	bd08      	pop	{r3, pc}
   b92dc:	0003022c 	.word	0x0003022c

000b92e0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b92e0:	b508      	push	{r3, lr}
   b92e2:	4b02      	ldr	r3, [pc, #8]	; (b92ec <HAL_GPIO_Write+0xc>)
   b92e4:	681b      	ldr	r3, [r3, #0]
   b92e6:	691b      	ldr	r3, [r3, #16]
   b92e8:	9301      	str	r3, [sp, #4]
   b92ea:	bd08      	pop	{r3, pc}
   b92ec:	0003022c 	.word	0x0003022c

000b92f0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b92f0:	b508      	push	{r3, lr}
   b92f2:	4b02      	ldr	r3, [pc, #8]	; (b92fc <HAL_GPIO_Read+0xc>)
   b92f4:	681b      	ldr	r3, [r3, #0]
   b92f6:	695b      	ldr	r3, [r3, #20]
   b92f8:	9301      	str	r3, [sp, #4]
   b92fa:	bd08      	pop	{r3, pc}
   b92fc:	0003022c 	.word	0x0003022c

000b9300 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b9300:	b508      	push	{r3, lr}
   b9302:	4b02      	ldr	r3, [pc, #8]	; (b930c <HAL_Interrupts_Attach+0xc>)
   b9304:	681b      	ldr	r3, [r3, #0]
   b9306:	699b      	ldr	r3, [r3, #24]
   b9308:	9301      	str	r3, [sp, #4]
   b930a:	bd08      	pop	{r3, pc}
   b930c:	0003022c 	.word	0x0003022c

000b9310 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b9310:	b508      	push	{r3, lr}
   b9312:	4b02      	ldr	r3, [pc, #8]	; (b931c <HAL_Interrupts_Detach+0xc>)
   b9314:	681b      	ldr	r3, [r3, #0]
   b9316:	69db      	ldr	r3, [r3, #28]
   b9318:	9301      	str	r3, [sp, #4]
   b931a:	bd08      	pop	{r3, pc}
   b931c:	0003022c 	.word	0x0003022c

000b9320 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b9320:	b508      	push	{r3, lr}
   b9322:	4b02      	ldr	r3, [pc, #8]	; (b932c <hal_adc_read+0xc>)
   b9324:	681b      	ldr	r3, [r3, #0]
   b9326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9328:	9301      	str	r3, [sp, #4]
   b932a:	bd08      	pop	{r3, pc}
   b932c:	0003022c 	.word	0x0003022c

000b9330 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b9330:	b508      	push	{r3, lr}
   b9332:	4b02      	ldr	r3, [pc, #8]	; (b933c <hal_i2c_set_speed+0xc>)
   b9334:	681b      	ldr	r3, [r3, #0]
   b9336:	681b      	ldr	r3, [r3, #0]
   b9338:	9301      	str	r3, [sp, #4]
   b933a:	bd08      	pop	{r3, pc}
   b933c:	00030228 	.word	0x00030228

000b9340 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b9340:	b508      	push	{r3, lr}
   b9342:	4b02      	ldr	r3, [pc, #8]	; (b934c <hal_i2c_begin+0xc>)
   b9344:	681b      	ldr	r3, [r3, #0]
   b9346:	68db      	ldr	r3, [r3, #12]
   b9348:	9301      	str	r3, [sp, #4]
   b934a:	bd08      	pop	{r3, pc}
   b934c:	00030228 	.word	0x00030228

000b9350 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b9350:	b508      	push	{r3, lr}
   b9352:	4b02      	ldr	r3, [pc, #8]	; (b935c <hal_i2c_begin_transmission+0xc>)
   b9354:	681b      	ldr	r3, [r3, #0]
   b9356:	699b      	ldr	r3, [r3, #24]
   b9358:	9301      	str	r3, [sp, #4]
   b935a:	bd08      	pop	{r3, pc}
   b935c:	00030228 	.word	0x00030228

000b9360 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b9360:	b508      	push	{r3, lr}
   b9362:	4b02      	ldr	r3, [pc, #8]	; (b936c <hal_i2c_end_transmission+0xc>)
   b9364:	681b      	ldr	r3, [r3, #0]
   b9366:	69db      	ldr	r3, [r3, #28]
   b9368:	9301      	str	r3, [sp, #4]
   b936a:	bd08      	pop	{r3, pc}
   b936c:	00030228 	.word	0x00030228

000b9370 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b9370:	b508      	push	{r3, lr}
   b9372:	4b02      	ldr	r3, [pc, #8]	; (b937c <hal_i2c_write+0xc>)
   b9374:	681b      	ldr	r3, [r3, #0]
   b9376:	6a1b      	ldr	r3, [r3, #32]
   b9378:	9301      	str	r3, [sp, #4]
   b937a:	bd08      	pop	{r3, pc}
   b937c:	00030228 	.word	0x00030228

000b9380 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b9380:	b508      	push	{r3, lr}
   b9382:	4b02      	ldr	r3, [pc, #8]	; (b938c <hal_i2c_available+0xc>)
   b9384:	681b      	ldr	r3, [r3, #0]
   b9386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9388:	9301      	str	r3, [sp, #4]
   b938a:	bd08      	pop	{r3, pc}
   b938c:	00030228 	.word	0x00030228

000b9390 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b9390:	b508      	push	{r3, lr}
   b9392:	4b02      	ldr	r3, [pc, #8]	; (b939c <hal_i2c_read+0xc>)
   b9394:	681b      	ldr	r3, [r3, #0]
   b9396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9398:	9301      	str	r3, [sp, #4]
   b939a:	bd08      	pop	{r3, pc}
   b939c:	00030228 	.word	0x00030228

000b93a0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b93a0:	b508      	push	{r3, lr}
   b93a2:	4b02      	ldr	r3, [pc, #8]	; (b93ac <hal_i2c_peek+0xc>)
   b93a4:	681b      	ldr	r3, [r3, #0]
   b93a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b93a8:	9301      	str	r3, [sp, #4]
   b93aa:	bd08      	pop	{r3, pc}
   b93ac:	00030228 	.word	0x00030228

000b93b0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b93b0:	b508      	push	{r3, lr}
   b93b2:	4b02      	ldr	r3, [pc, #8]	; (b93bc <hal_i2c_flush+0xc>)
   b93b4:	681b      	ldr	r3, [r3, #0]
   b93b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b93b8:	9301      	str	r3, [sp, #4]
   b93ba:	bd08      	pop	{r3, pc}
   b93bc:	00030228 	.word	0x00030228

000b93c0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b93c0:	b508      	push	{r3, lr}
   b93c2:	4b02      	ldr	r3, [pc, #8]	; (b93cc <hal_i2c_is_enabled+0xc>)
   b93c4:	681b      	ldr	r3, [r3, #0]
   b93c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b93c8:	9301      	str	r3, [sp, #4]
   b93ca:	bd08      	pop	{r3, pc}
   b93cc:	00030228 	.word	0x00030228

000b93d0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b93d0:	b508      	push	{r3, lr}
   b93d2:	4b02      	ldr	r3, [pc, #8]	; (b93dc <hal_i2c_init+0xc>)
   b93d4:	681b      	ldr	r3, [r3, #0]
   b93d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b93d8:	9301      	str	r3, [sp, #4]
   b93da:	bd08      	pop	{r3, pc}
   b93dc:	00030228 	.word	0x00030228

000b93e0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b93e0:	b508      	push	{r3, lr}
   b93e2:	4b02      	ldr	r3, [pc, #8]	; (b93ec <inet_inet_ntop+0xc>)
   b93e4:	681b      	ldr	r3, [r3, #0]
   b93e6:	695b      	ldr	r3, [r3, #20]
   b93e8:	9301      	str	r3, [sp, #4]
   b93ea:	bd08      	pop	{r3, pc}
   b93ec:	00030264 	.word	0x00030264

000b93f0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b93f0:	b508      	push	{r3, lr}
   b93f2:	4b02      	ldr	r3, [pc, #8]	; (b93fc <netdb_freeaddrinfo+0xc>)
   b93f4:	681b      	ldr	r3, [r3, #0]
   b93f6:	689b      	ldr	r3, [r3, #8]
   b93f8:	9301      	str	r3, [sp, #4]
   b93fa:	bd08      	pop	{r3, pc}
   b93fc:	00030268 	.word	0x00030268

000b9400 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b9400:	b508      	push	{r3, lr}
   b9402:	4b02      	ldr	r3, [pc, #8]	; (b940c <netdb_getaddrinfo+0xc>)
   b9404:	681b      	ldr	r3, [r3, #0]
   b9406:	68db      	ldr	r3, [r3, #12]
   b9408:	9301      	str	r3, [sp, #4]
   b940a:	bd08      	pop	{r3, pc}
   b940c:	00030268 	.word	0x00030268

000b9410 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b9410:	b508      	push	{r3, lr}
   b9412:	4b02      	ldr	r3, [pc, #8]	; (b941c <hal_spi_begin+0xc>)
   b9414:	681b      	ldr	r3, [r3, #0]
   b9416:	681b      	ldr	r3, [r3, #0]
   b9418:	9301      	str	r3, [sp, #4]
   b941a:	bd08      	pop	{r3, pc}
   b941c:	00030230 	.word	0x00030230

000b9420 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b9420:	b508      	push	{r3, lr}
   b9422:	4b02      	ldr	r3, [pc, #8]	; (b942c <hal_spi_transfer+0xc>)
   b9424:	681b      	ldr	r3, [r3, #0]
   b9426:	695b      	ldr	r3, [r3, #20]
   b9428:	9301      	str	r3, [sp, #4]
   b942a:	bd08      	pop	{r3, pc}
   b942c:	00030230 	.word	0x00030230

000b9430 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b9430:	b508      	push	{r3, lr}
   b9432:	4b02      	ldr	r3, [pc, #8]	; (b943c <hal_spi_init+0xc>)
   b9434:	681b      	ldr	r3, [r3, #0]
   b9436:	69db      	ldr	r3, [r3, #28]
   b9438:	9301      	str	r3, [sp, #4]
   b943a:	bd08      	pop	{r3, pc}
   b943c:	00030230 	.word	0x00030230

000b9440 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b9440:	b508      	push	{r3, lr}
   b9442:	4b02      	ldr	r3, [pc, #8]	; (b944c <hal_spi_is_enabled+0xc>)
   b9444:	681b      	ldr	r3, [r3, #0]
   b9446:	6a1b      	ldr	r3, [r3, #32]
   b9448:	9301      	str	r3, [sp, #4]
   b944a:	bd08      	pop	{r3, pc}
   b944c:	00030230 	.word	0x00030230

000b9450 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b9450:	b508      	push	{r3, lr}
   b9452:	4b02      	ldr	r3, [pc, #8]	; (b945c <hal_spi_info+0xc>)
   b9454:	681b      	ldr	r3, [r3, #0]
   b9456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9458:	9301      	str	r3, [sp, #4]
   b945a:	bd08      	pop	{r3, pc}
   b945c:	00030230 	.word	0x00030230

000b9460 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b9460:	b508      	push	{r3, lr}
   b9462:	4b02      	ldr	r3, [pc, #8]	; (b946c <hal_spi_transfer_dma+0xc>)
   b9464:	681b      	ldr	r3, [r3, #0]
   b9466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9468:	9301      	str	r3, [sp, #4]
   b946a:	bd08      	pop	{r3, pc}
   b946c:	00030230 	.word	0x00030230

000b9470 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b9470:	b508      	push	{r3, lr}
   b9472:	4b02      	ldr	r3, [pc, #8]	; (b947c <hal_spi_transfer_dma_status+0xc>)
   b9474:	681b      	ldr	r3, [r3, #0]
   b9476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b9478:	9301      	str	r3, [sp, #4]
   b947a:	bd08      	pop	{r3, pc}
   b947c:	00030230 	.word	0x00030230

000b9480 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b9480:	b508      	push	{r3, lr}
   b9482:	4b02      	ldr	r3, [pc, #8]	; (b948c <hal_spi_set_settings+0xc>)
   b9484:	681b      	ldr	r3, [r3, #0]
   b9486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9488:	9301      	str	r3, [sp, #4]
   b948a:	bd08      	pop	{r3, pc}
   b948c:	00030230 	.word	0x00030230

000b9490 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b9490:	b508      	push	{r3, lr}
   b9492:	4b02      	ldr	r3, [pc, #8]	; (b949c <hal_spi_acquire+0xc>)
   b9494:	681b      	ldr	r3, [r3, #0]
   b9496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9498:	9301      	str	r3, [sp, #4]
   b949a:	bd08      	pop	{r3, pc}
   b949c:	00030230 	.word	0x00030230

000b94a0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b94a0:	b508      	push	{r3, lr}
   b94a2:	4b02      	ldr	r3, [pc, #8]	; (b94ac <hal_spi_release+0xc>)
   b94a4:	681b      	ldr	r3, [r3, #0]
   b94a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b94a8:	9301      	str	r3, [sp, #4]
   b94aa:	bd08      	pop	{r3, pc}
   b94ac:	00030230 	.word	0x00030230

000b94b0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b94b0:	b508      	push	{r3, lr}
   b94b2:	4b02      	ldr	r3, [pc, #8]	; (b94bc <hal_usart_write+0xc>)
   b94b4:	681b      	ldr	r3, [r3, #0]
   b94b6:	68db      	ldr	r3, [r3, #12]
   b94b8:	9301      	str	r3, [sp, #4]
   b94ba:	bd08      	pop	{r3, pc}
   b94bc:	0003023c 	.word	0x0003023c

000b94c0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b94c0:	b508      	push	{r3, lr}
   b94c2:	4b02      	ldr	r3, [pc, #8]	; (b94cc <hal_usart_available+0xc>)
   b94c4:	681b      	ldr	r3, [r3, #0]
   b94c6:	691b      	ldr	r3, [r3, #16]
   b94c8:	9301      	str	r3, [sp, #4]
   b94ca:	bd08      	pop	{r3, pc}
   b94cc:	0003023c 	.word	0x0003023c

000b94d0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b94d0:	b508      	push	{r3, lr}
   b94d2:	4b02      	ldr	r3, [pc, #8]	; (b94dc <hal_usart_read+0xc>)
   b94d4:	681b      	ldr	r3, [r3, #0]
   b94d6:	695b      	ldr	r3, [r3, #20]
   b94d8:	9301      	str	r3, [sp, #4]
   b94da:	bd08      	pop	{r3, pc}
   b94dc:	0003023c 	.word	0x0003023c

000b94e0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b94e0:	b508      	push	{r3, lr}
   b94e2:	4b02      	ldr	r3, [pc, #8]	; (b94ec <hal_usart_peek+0xc>)
   b94e4:	681b      	ldr	r3, [r3, #0]
   b94e6:	699b      	ldr	r3, [r3, #24]
   b94e8:	9301      	str	r3, [sp, #4]
   b94ea:	bd08      	pop	{r3, pc}
   b94ec:	0003023c 	.word	0x0003023c

000b94f0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b94f0:	b508      	push	{r3, lr}
   b94f2:	4b02      	ldr	r3, [pc, #8]	; (b94fc <hal_usart_flush+0xc>)
   b94f4:	681b      	ldr	r3, [r3, #0]
   b94f6:	69db      	ldr	r3, [r3, #28]
   b94f8:	9301      	str	r3, [sp, #4]
   b94fa:	bd08      	pop	{r3, pc}
   b94fc:	0003023c 	.word	0x0003023c

000b9500 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b9500:	b508      	push	{r3, lr}
   b9502:	4b02      	ldr	r3, [pc, #8]	; (b950c <hal_usart_is_enabled+0xc>)
   b9504:	681b      	ldr	r3, [r3, #0]
   b9506:	6a1b      	ldr	r3, [r3, #32]
   b9508:	9301      	str	r3, [sp, #4]
   b950a:	bd08      	pop	{r3, pc}
   b950c:	0003023c 	.word	0x0003023c

000b9510 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b9510:	b508      	push	{r3, lr}
   b9512:	4b02      	ldr	r3, [pc, #8]	; (b951c <hal_usart_available_data_for_write+0xc>)
   b9514:	681b      	ldr	r3, [r3, #0]
   b9516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9518:	9301      	str	r3, [sp, #4]
   b951a:	bd08      	pop	{r3, pc}
   b951c:	0003023c 	.word	0x0003023c

000b9520 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b9520:	b508      	push	{r3, lr}
   b9522:	4b02      	ldr	r3, [pc, #8]	; (b952c <hal_usart_begin_config+0xc>)
   b9524:	681b      	ldr	r3, [r3, #0]
   b9526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9528:	9301      	str	r3, [sp, #4]
   b952a:	bd08      	pop	{r3, pc}
   b952c:	0003023c 	.word	0x0003023c

000b9530 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b9530:	b508      	push	{r3, lr}
   b9532:	4b02      	ldr	r3, [pc, #8]	; (b953c <hal_usart_init_ex+0xc>)
   b9534:	681b      	ldr	r3, [r3, #0]
   b9536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9538:	9301      	str	r3, [sp, #4]
   b953a:	bd08      	pop	{r3, pc}
   b953c:	0003023c 	.word	0x0003023c

000b9540 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b9540:	b508      	push	{r3, lr}
   b9542:	4b02      	ldr	r3, [pc, #8]	; (b954c <HAL_USB_USART_Init+0xc>)
   b9544:	681b      	ldr	r3, [r3, #0]
   b9546:	681b      	ldr	r3, [r3, #0]
   b9548:	9301      	str	r3, [sp, #4]
   b954a:	bd08      	pop	{r3, pc}
   b954c:	0003024c 	.word	0x0003024c

000b9550 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b9550:	b508      	push	{r3, lr}
   b9552:	4b02      	ldr	r3, [pc, #8]	; (b955c <HAL_USB_USART_Begin+0xc>)
   b9554:	681b      	ldr	r3, [r3, #0]
   b9556:	685b      	ldr	r3, [r3, #4]
   b9558:	9301      	str	r3, [sp, #4]
   b955a:	bd08      	pop	{r3, pc}
   b955c:	0003024c 	.word	0x0003024c

000b9560 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b9560:	b508      	push	{r3, lr}
   b9562:	4b02      	ldr	r3, [pc, #8]	; (b956c <HAL_USB_USART_Available_Data+0xc>)
   b9564:	681b      	ldr	r3, [r3, #0]
   b9566:	691b      	ldr	r3, [r3, #16]
   b9568:	9301      	str	r3, [sp, #4]
   b956a:	bd08      	pop	{r3, pc}
   b956c:	0003024c 	.word	0x0003024c

000b9570 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b9570:	b508      	push	{r3, lr}
   b9572:	4b02      	ldr	r3, [pc, #8]	; (b957c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b9574:	681b      	ldr	r3, [r3, #0]
   b9576:	695b      	ldr	r3, [r3, #20]
   b9578:	9301      	str	r3, [sp, #4]
   b957a:	bd08      	pop	{r3, pc}
   b957c:	0003024c 	.word	0x0003024c

000b9580 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9580:	b508      	push	{r3, lr}
   b9582:	4b02      	ldr	r3, [pc, #8]	; (b958c <HAL_USB_USART_Receive_Data+0xc>)
   b9584:	681b      	ldr	r3, [r3, #0]
   b9586:	699b      	ldr	r3, [r3, #24]
   b9588:	9301      	str	r3, [sp, #4]
   b958a:	bd08      	pop	{r3, pc}
   b958c:	0003024c 	.word	0x0003024c

000b9590 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9590:	b508      	push	{r3, lr}
   b9592:	4b02      	ldr	r3, [pc, #8]	; (b959c <HAL_USB_USART_Send_Data+0xc>)
   b9594:	681b      	ldr	r3, [r3, #0]
   b9596:	69db      	ldr	r3, [r3, #28]
   b9598:	9301      	str	r3, [sp, #4]
   b959a:	bd08      	pop	{r3, pc}
   b959c:	0003024c 	.word	0x0003024c

000b95a0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b95a0:	b508      	push	{r3, lr}
   b95a2:	4b02      	ldr	r3, [pc, #8]	; (b95ac <HAL_USB_USART_Flush_Data+0xc>)
   b95a4:	681b      	ldr	r3, [r3, #0]
   b95a6:	6a1b      	ldr	r3, [r3, #32]
   b95a8:	9301      	str	r3, [sp, #4]
   b95aa:	bd08      	pop	{r3, pc}
   b95ac:	0003024c 	.word	0x0003024c

000b95b0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b95b0:	b508      	push	{r3, lr}
   b95b2:	4b02      	ldr	r3, [pc, #8]	; (b95bc <panic_+0xc>)
   b95b4:	681b      	ldr	r3, [r3, #0]
   b95b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b95b8:	9301      	str	r3, [sp, #4]
   b95ba:	bd08      	pop	{r3, pc}
   b95bc:	00030260 	.word	0x00030260

000b95c0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b95c0:	b508      	push	{r3, lr}
   b95c2:	4b02      	ldr	r3, [pc, #8]	; (b95cc <log_message+0xc>)
   b95c4:	681b      	ldr	r3, [r3, #0]
   b95c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b95c8:	9301      	str	r3, [sp, #4]
   b95ca:	bd08      	pop	{r3, pc}
   b95cc:	00030260 	.word	0x00030260

000b95d0 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b95d0:	b508      	push	{r3, lr}
   b95d2:	4b02      	ldr	r3, [pc, #8]	; (b95dc <system_mode+0xc>)
   b95d4:	681b      	ldr	r3, [r3, #0]
   b95d6:	681b      	ldr	r3, [r3, #0]
   b95d8:	9301      	str	r3, [sp, #4]
   b95da:	bd08      	pop	{r3, pc}
   b95dc:	00030220 	.word	0x00030220

000b95e0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b95e0:	b508      	push	{r3, lr}
   b95e2:	4b02      	ldr	r3, [pc, #8]	; (b95ec <set_system_mode+0xc>)
   b95e4:	681b      	ldr	r3, [r3, #0]
   b95e6:	685b      	ldr	r3, [r3, #4]
   b95e8:	9301      	str	r3, [sp, #4]
   b95ea:	bd08      	pop	{r3, pc}
   b95ec:	00030220 	.word	0x00030220

000b95f0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b95f0:	b508      	push	{r3, lr}
   b95f2:	4b02      	ldr	r3, [pc, #8]	; (b95fc <system_delay_ms+0xc>)
   b95f4:	681b      	ldr	r3, [r3, #0]
   b95f6:	695b      	ldr	r3, [r3, #20]
   b95f8:	9301      	str	r3, [sp, #4]
   b95fa:	bd08      	pop	{r3, pc}
   b95fc:	00030220 	.word	0x00030220

000b9600 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b9600:	b508      	push	{r3, lr}
   b9602:	4b02      	ldr	r3, [pc, #8]	; (b960c <application_thread_current+0xc>)
   b9604:	681b      	ldr	r3, [r3, #0]
   b9606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9608:	9301      	str	r3, [sp, #4]
   b960a:	bd08      	pop	{r3, pc}
   b960c:	00030220 	.word	0x00030220

000b9610 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b9610:	b508      	push	{r3, lr}
   b9612:	4b02      	ldr	r3, [pc, #8]	; (b961c <application_thread_invoke+0xc>)
   b9614:	681b      	ldr	r3, [r3, #0]
   b9616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b9618:	9301      	str	r3, [sp, #4]
   b961a:	bd08      	pop	{r3, pc}
   b961c:	00030220 	.word	0x00030220

000b9620 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b9620:	b508      	push	{r3, lr}
   b9622:	4b02      	ldr	r3, [pc, #8]	; (b962c <system_thread_get_state+0xc>)
   b9624:	681b      	ldr	r3, [r3, #0]
   b9626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b9628:	9301      	str	r3, [sp, #4]
   b962a:	bd08      	pop	{r3, pc}
   b962c:	00030220 	.word	0x00030220

000b9630 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b9630:	b508      	push	{r3, lr}
   b9632:	4b03      	ldr	r3, [pc, #12]	; (b9640 <system_ctrl_set_app_request_handler+0x10>)
   b9634:	681b      	ldr	r3, [r3, #0]
   b9636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b963a:	9301      	str	r3, [sp, #4]
   b963c:	bd08      	pop	{r3, pc}
   b963e:	0000      	.short	0x0000
   b9640:	00030220 	.word	0x00030220

000b9644 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b9644:	b508      	push	{r3, lr}
   b9646:	4b03      	ldr	r3, [pc, #12]	; (b9654 <system_ctrl_set_result+0x10>)
   b9648:	681b      	ldr	r3, [r3, #0]
   b964a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b964e:	9301      	str	r3, [sp, #4]
   b9650:	bd08      	pop	{r3, pc}
   b9652:	0000      	.short	0x0000
   b9654:	00030220 	.word	0x00030220

000b9658 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b9658:	b508      	push	{r3, lr}
   b965a:	4b02      	ldr	r3, [pc, #8]	; (b9664 <spark_process+0xc>)
   b965c:	681b      	ldr	r3, [r3, #0]
   b965e:	689b      	ldr	r3, [r3, #8]
   b9660:	9301      	str	r3, [sp, #4]
   b9662:	bd08      	pop	{r3, pc}
   b9664:	00030244 	.word	0x00030244

000b9668 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b9668:	b508      	push	{r3, lr}
   b966a:	4b02      	ldr	r3, [pc, #8]	; (b9674 <spark_cloud_flag_connected+0xc>)
   b966c:	681b      	ldr	r3, [r3, #0]
   b966e:	695b      	ldr	r3, [r3, #20]
   b9670:	9301      	str	r3, [sp, #4]
   b9672:	bd08      	pop	{r3, pc}
   b9674:	00030244 	.word	0x00030244

000b9678 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b9678:	b508      	push	{r3, lr}
   b967a:	4b02      	ldr	r3, [pc, #8]	; (b9684 <spark_send_event+0xc>)
   b967c:	681b      	ldr	r3, [r3, #0]
   b967e:	6a1b      	ldr	r3, [r3, #32]
   b9680:	9301      	str	r3, [sp, #4]
   b9682:	bd08      	pop	{r3, pc}
   b9684:	00030244 	.word	0x00030244

000b9688 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b9688:	b508      	push	{r3, lr}
   b968a:	4b02      	ldr	r3, [pc, #8]	; (b9694 <spark_subscribe+0xc>)
   b968c:	681b      	ldr	r3, [r3, #0]
   b968e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9690:	9301      	str	r3, [sp, #4]
   b9692:	bd08      	pop	{r3, pc}
   b9694:	00030244 	.word	0x00030244

000b9698 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b9698:	b508      	push	{r3, lr}
   b969a:	4b02      	ldr	r3, [pc, #8]	; (b96a4 <spark_sync_time_pending+0xc>)
   b969c:	681b      	ldr	r3, [r3, #0]
   b969e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b96a0:	9301      	str	r3, [sp, #4]
   b96a2:	bd08      	pop	{r3, pc}
   b96a4:	00030244 	.word	0x00030244

000b96a8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b96a8:	b508      	push	{r3, lr}
   b96aa:	4b02      	ldr	r3, [pc, #8]	; (b96b4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b96ac:	681b      	ldr	r3, [r3, #0]
   b96ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b96b0:	9301      	str	r3, [sp, #4]
   b96b2:	bd08      	pop	{r3, pc}
   b96b4:	00030244 	.word	0x00030244

000b96b8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b96b8:	b508      	push	{r3, lr}
   b96ba:	4b02      	ldr	r3, [pc, #8]	; (b96c4 <network_connect+0xc>)
   b96bc:	681b      	ldr	r3, [r3, #0]
   b96be:	685b      	ldr	r3, [r3, #4]
   b96c0:	9301      	str	r3, [sp, #4]
   b96c2:	bd08      	pop	{r3, pc}
   b96c4:	00030240 	.word	0x00030240

000b96c8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b96c8:	b508      	push	{r3, lr}
   b96ca:	4b02      	ldr	r3, [pc, #8]	; (b96d4 <network_connecting+0xc>)
   b96cc:	681b      	ldr	r3, [r3, #0]
   b96ce:	689b      	ldr	r3, [r3, #8]
   b96d0:	9301      	str	r3, [sp, #4]
   b96d2:	bd08      	pop	{r3, pc}
   b96d4:	00030240 	.word	0x00030240

000b96d8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b96d8:	b508      	push	{r3, lr}
   b96da:	4b02      	ldr	r3, [pc, #8]	; (b96e4 <network_disconnect+0xc>)
   b96dc:	681b      	ldr	r3, [r3, #0]
   b96de:	68db      	ldr	r3, [r3, #12]
   b96e0:	9301      	str	r3, [sp, #4]
   b96e2:	bd08      	pop	{r3, pc}
   b96e4:	00030240 	.word	0x00030240

000b96e8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b96e8:	b508      	push	{r3, lr}
   b96ea:	4b02      	ldr	r3, [pc, #8]	; (b96f4 <network_ready+0xc>)
   b96ec:	681b      	ldr	r3, [r3, #0]
   b96ee:	691b      	ldr	r3, [r3, #16]
   b96f0:	9301      	str	r3, [sp, #4]
   b96f2:	bd08      	pop	{r3, pc}
   b96f4:	00030240 	.word	0x00030240

000b96f8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b96f8:	b508      	push	{r3, lr}
   b96fa:	4b02      	ldr	r3, [pc, #8]	; (b9704 <network_on+0xc>)
   b96fc:	681b      	ldr	r3, [r3, #0]
   b96fe:	695b      	ldr	r3, [r3, #20]
   b9700:	9301      	str	r3, [sp, #4]
   b9702:	bd08      	pop	{r3, pc}
   b9704:	00030240 	.word	0x00030240

000b9708 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b9708:	b508      	push	{r3, lr}
   b970a:	4b02      	ldr	r3, [pc, #8]	; (b9714 <network_off+0xc>)
   b970c:	681b      	ldr	r3, [r3, #0]
   b970e:	699b      	ldr	r3, [r3, #24]
   b9710:	9301      	str	r3, [sp, #4]
   b9712:	bd08      	pop	{r3, pc}
   b9714:	00030240 	.word	0x00030240

000b9718 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b9718:	b508      	push	{r3, lr}
   b971a:	4b02      	ldr	r3, [pc, #8]	; (b9724 <network_listen+0xc>)
   b971c:	681b      	ldr	r3, [r3, #0]
   b971e:	69db      	ldr	r3, [r3, #28]
   b9720:	9301      	str	r3, [sp, #4]
   b9722:	bd08      	pop	{r3, pc}
   b9724:	00030240 	.word	0x00030240

000b9728 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b9728:	b508      	push	{r3, lr}
   b972a:	4b02      	ldr	r3, [pc, #8]	; (b9734 <network_listening+0xc>)
   b972c:	681b      	ldr	r3, [r3, #0]
   b972e:	6a1b      	ldr	r3, [r3, #32]
   b9730:	9301      	str	r3, [sp, #4]
   b9732:	bd08      	pop	{r3, pc}
   b9734:	00030240 	.word	0x00030240

000b9738 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b9738:	b508      	push	{r3, lr}
   b973a:	4b02      	ldr	r3, [pc, #8]	; (b9744 <network_set_listen_timeout+0xc>)
   b973c:	681b      	ldr	r3, [r3, #0]
   b973e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9740:	9301      	str	r3, [sp, #4]
   b9742:	bd08      	pop	{r3, pc}
   b9744:	00030240 	.word	0x00030240

000b9748 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b9748:	b508      	push	{r3, lr}
   b974a:	4b02      	ldr	r3, [pc, #8]	; (b9754 <network_get_listen_timeout+0xc>)
   b974c:	681b      	ldr	r3, [r3, #0]
   b974e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9750:	9301      	str	r3, [sp, #4]
   b9752:	bd08      	pop	{r3, pc}
   b9754:	00030240 	.word	0x00030240

000b9758 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b9758:	b508      	push	{r3, lr}
   b975a:	4b02      	ldr	r3, [pc, #8]	; (b9764 <network_is_on+0xc>)
   b975c:	681b      	ldr	r3, [r3, #0]
   b975e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9760:	9301      	str	r3, [sp, #4]
   b9762:	bd08      	pop	{r3, pc}
   b9764:	00030240 	.word	0x00030240

000b9768 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b9768:	b508      	push	{r3, lr}
   b976a:	4b02      	ldr	r3, [pc, #8]	; (b9774 <network_is_off+0xc>)
   b976c:	681b      	ldr	r3, [r3, #0]
   b976e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9770:	9301      	str	r3, [sp, #4]
   b9772:	bd08      	pop	{r3, pc}
   b9774:	00030240 	.word	0x00030240

000b9778 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b9778:	b508      	push	{r3, lr}
   b977a:	4b02      	ldr	r3, [pc, #8]	; (b9784 <malloc+0xc>)
   b977c:	681b      	ldr	r3, [r3, #0]
   b977e:	681b      	ldr	r3, [r3, #0]
   b9780:	9301      	str	r3, [sp, #4]
   b9782:	bd08      	pop	{r3, pc}
   b9784:	0003021c 	.word	0x0003021c

000b9788 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b9788:	b508      	push	{r3, lr}
   b978a:	4b02      	ldr	r3, [pc, #8]	; (b9794 <free+0xc>)
   b978c:	681b      	ldr	r3, [r3, #0]
   b978e:	685b      	ldr	r3, [r3, #4]
   b9790:	9301      	str	r3, [sp, #4]
   b9792:	bd08      	pop	{r3, pc}
   b9794:	0003021c 	.word	0x0003021c

000b9798 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b9798:	b508      	push	{r3, lr}
   b979a:	4b02      	ldr	r3, [pc, #8]	; (b97a4 <realloc+0xc>)
   b979c:	681b      	ldr	r3, [r3, #0]
   b979e:	689b      	ldr	r3, [r3, #8]
   b97a0:	9301      	str	r3, [sp, #4]
   b97a2:	bd08      	pop	{r3, pc}
   b97a4:	0003021c 	.word	0x0003021c

000b97a8 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b97a8:	b508      	push	{r3, lr}
   b97aa:	4b02      	ldr	r3, [pc, #8]	; (b97b4 <sprintf+0xc>)
   b97ac:	681b      	ldr	r3, [r3, #0]
   b97ae:	68db      	ldr	r3, [r3, #12]
   b97b0:	9301      	str	r3, [sp, #4]
   b97b2:	bd08      	pop	{r3, pc}
   b97b4:	0003021c 	.word	0x0003021c

000b97b8 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b97b8:	b508      	push	{r3, lr}
   b97ba:	4b02      	ldr	r3, [pc, #8]	; (b97c4 <sscanf+0xc>)
   b97bc:	681b      	ldr	r3, [r3, #0]
   b97be:	695b      	ldr	r3, [r3, #20]
   b97c0:	9301      	str	r3, [sp, #4]
   b97c2:	bd08      	pop	{r3, pc}
   b97c4:	0003021c 	.word	0x0003021c

000b97c8 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b97c8:	b508      	push	{r3, lr}
   b97ca:	4b02      	ldr	r3, [pc, #8]	; (b97d4 <snprintf+0xc>)
   b97cc:	681b      	ldr	r3, [r3, #0]
   b97ce:	69db      	ldr	r3, [r3, #28]
   b97d0:	9301      	str	r3, [sp, #4]
   b97d2:	bd08      	pop	{r3, pc}
   b97d4:	0003021c 	.word	0x0003021c

000b97d8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b97d8:	b508      	push	{r3, lr}
   b97da:	4b02      	ldr	r3, [pc, #8]	; (b97e4 <vsnprintf+0xc>)
   b97dc:	681b      	ldr	r3, [r3, #0]
   b97de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b97e0:	9301      	str	r3, [sp, #4]
   b97e2:	bd08      	pop	{r3, pc}
   b97e4:	0003021c 	.word	0x0003021c

000b97e8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b97e8:	b508      	push	{r3, lr}
   b97ea:	4b02      	ldr	r3, [pc, #8]	; (b97f4 <abort+0xc>)
   b97ec:	681b      	ldr	r3, [r3, #0]
   b97ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b97f0:	9301      	str	r3, [sp, #4]
   b97f2:	bd08      	pop	{r3, pc}
   b97f4:	0003021c 	.word	0x0003021c

000b97f8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b97f8:	b508      	push	{r3, lr}
   b97fa:	4b02      	ldr	r3, [pc, #8]	; (b9804 <_malloc_r+0xc>)
   b97fc:	681b      	ldr	r3, [r3, #0]
   b97fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9800:	9301      	str	r3, [sp, #4]
   b9802:	bd08      	pop	{r3, pc}
   b9804:	0003021c 	.word	0x0003021c

000b9808 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b9808:	b508      	push	{r3, lr}
   b980a:	4b02      	ldr	r3, [pc, #8]	; (b9814 <__errno+0xc>)
   b980c:	681b      	ldr	r3, [r3, #0]
   b980e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9810:	9301      	str	r3, [sp, #4]
   b9812:	bd08      	pop	{r3, pc}
   b9814:	0003021c 	.word	0x0003021c

000b9818 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b9818:	b508      	push	{r3, lr}
   b981a:	4b02      	ldr	r3, [pc, #8]	; (b9824 <__assert_func+0xc>)
   b981c:	681b      	ldr	r3, [r3, #0]
   b981e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9820:	9301      	str	r3, [sp, #4]
   b9822:	bd08      	pop	{r3, pc}
   b9824:	0003021c 	.word	0x0003021c

000b9828 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b9828:	b508      	push	{r3, lr}
   b982a:	4b02      	ldr	r3, [pc, #8]	; (b9834 <newlib_impure_ptr_callback+0xc>)
   b982c:	681b      	ldr	r3, [r3, #0]
   b982e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9830:	9301      	str	r3, [sp, #4]
   b9832:	bd08      	pop	{r3, pc}
   b9834:	0003021c 	.word	0x0003021c

000b9838 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b9838:	b508      	push	{r3, lr}
   b983a:	4b02      	ldr	r3, [pc, #8]	; (b9844 <localtime_r+0xc>)
   b983c:	681b      	ldr	r3, [r3, #0]
   b983e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9840:	9301      	str	r3, [sp, #4]
   b9842:	bd08      	pop	{r3, pc}
   b9844:	0003021c 	.word	0x0003021c

000b9848 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b9848:	2100      	movs	r1, #0
   b984a:	f7ff bed1 	b.w	b95f0 <system_delay_ms>

000b984e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b984e:	b510      	push	{r4, lr}
      if (_M_empty())
   b9850:	6883      	ldr	r3, [r0, #8]
   b9852:	4604      	mov	r4, r0
   b9854:	b90b      	cbnz	r3, b985a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b9856:	f003 fe35 	bl	bd4c4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b985a:	68c3      	ldr	r3, [r0, #12]
   b985c:	4798      	blx	r3
      if (_M_manager)
   b985e:	68a3      	ldr	r3, [r4, #8]
   b9860:	b11b      	cbz	r3, b986a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b9862:	2203      	movs	r2, #3
   b9864:	4621      	mov	r1, r4
   b9866:	4620      	mov	r0, r4
   b9868:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b986a:	4620      	mov	r0, r4
   b986c:	2110      	movs	r1, #16
}
   b986e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b9872:	f7fa bc14 	b.w	b409e <_ZdlPvj>

000b9876 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9876:	4770      	bx	lr

000b9878 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b9878:	4770      	bx	lr

000b987a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b987a:	4770      	bx	lr

000b987c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b987c:	4770      	bx	lr
	...

000b9880 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9880:	4b06      	ldr	r3, [pc, #24]	; (b989c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9882:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9884:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b9886:	f100 040c 	add.w	r4, r0, #12
	    ||
   b988a:	d005      	beq.n	b9898 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b988c:	4608      	mov	r0, r1
   b988e:	f003 fe1d 	bl	bd4cc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b9892:	2800      	cmp	r0, #0
   b9894:	bf08      	it	eq
   b9896:	2400      	moveq	r4, #0
      }
   b9898:	4620      	mov	r0, r4
   b989a:	bd10      	pop	{r4, pc}
   b989c:	000c1874 	.word	0x000c1874

000b98a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b98a0:	4b06      	ldr	r3, [pc, #24]	; (b98bc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b98a2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b98a4:	b510      	push	{r4, lr}
   b98a6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b98aa:	d005      	beq.n	b98b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b98ac:	4608      	mov	r0, r1
   b98ae:	f003 fe0d 	bl	bd4cc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b98b2:	2800      	cmp	r0, #0
   b98b4:	bf08      	it	eq
   b98b6:	2400      	moveq	r4, #0
      }
   b98b8:	4620      	mov	r0, r4
   b98ba:	bd10      	pop	{r4, pc}
   b98bc:	000c1874 	.word	0x000c1874

000b98c0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b98c0:	4b06      	ldr	r3, [pc, #24]	; (b98dc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b98c2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b98c4:	b510      	push	{r4, lr}
   b98c6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b98ca:	d005      	beq.n	b98d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b98cc:	4608      	mov	r0, r1
   b98ce:	f003 fdfd 	bl	bd4cc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b98d2:	2800      	cmp	r0, #0
   b98d4:	bf08      	it	eq
   b98d6:	2400      	moveq	r4, #0
      }
   b98d8:	4620      	mov	r0, r4
   b98da:	bd10      	pop	{r4, pc}
   b98dc:	000c1874 	.word	0x000c1874

000b98e0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b98e0:	b510      	push	{r4, lr}
   b98e2:	2168      	movs	r1, #104	; 0x68
   b98e4:	4604      	mov	r4, r0
   b98e6:	f7fa fbda 	bl	b409e <_ZdlPvj>
   b98ea:	4620      	mov	r0, r4
   b98ec:	bd10      	pop	{r4, pc}

000b98ee <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b98ee:	b510      	push	{r4, lr}
   b98f0:	2128      	movs	r1, #40	; 0x28
   b98f2:	4604      	mov	r4, r0
   b98f4:	f7fa fbd3 	bl	b409e <_ZdlPvj>
   b98f8:	4620      	mov	r0, r4
   b98fa:	bd10      	pop	{r4, pc}

000b98fc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b98fc:	b510      	push	{r4, lr}
   b98fe:	2130      	movs	r1, #48	; 0x30
   b9900:	4604      	mov	r4, r0
   b9902:	f7fa fbcc 	bl	b409e <_ZdlPvj>
   b9906:	4620      	mov	r0, r4
   b9908:	bd10      	pop	{r4, pc}

000b990a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b990a:	2168      	movs	r1, #104	; 0x68
   b990c:	f7fa bbc7 	b.w	b409e <_ZdlPvj>

000b9910 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b9910:	2128      	movs	r1, #40	; 0x28
   b9912:	f7fa bbc4 	b.w	b409e <_ZdlPvj>

000b9916 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b9916:	2130      	movs	r1, #48	; 0x30
   b9918:	f7fa bbc1 	b.w	b409e <_ZdlPvj>

000b991c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b991c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b991e:	2500      	movs	r5, #0
   b9920:	1cec      	adds	r4, r5, #3
   b9922:	428c      	cmp	r4, r1
   b9924:	d80d      	bhi.n	b9942 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b9926:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b9928:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b992a:	5d87      	ldrb	r7, [r0, r6]
   b992c:	4297      	cmp	r7, r2
   b992e:	d105      	bne.n	b993c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b9930:	4426      	add	r6, r4
   b9932:	42b1      	cmp	r1, r6
   b9934:	d305      	bcc.n	b9942 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b9936:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b9938:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b993a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b993c:	3401      	adds	r4, #1
   b993e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b9940:	e7ee      	b.n	b9920 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b9942:	2000      	movs	r0, #0
   b9944:	e7f9      	b.n	b993a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b9948 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b9948:	4a02      	ldr	r2, [pc, #8]	; (b9954 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b994a:	4903      	ldr	r1, [pc, #12]	; (b9958 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b994c:	200a      	movs	r0, #10
   b994e:	f7ff be2f 	b.w	b95b0 <panic_>
   b9952:	bf00      	nop
   b9954:	000b9261 	.word	0x000b9261
   b9958:	000c1604 	.word	0x000c1604

000b995c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b995c:	b430      	push	{r4, r5}
   b995e:	460d      	mov	r5, r1
   b9960:	4611      	mov	r1, r2
   b9962:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b9964:	6803      	ldr	r3, [r0, #0]
   b9966:	6809      	ldr	r1, [r1, #0]
   b9968:	6828      	ldr	r0, [r5, #0]
   b996a:	e9d3 4300 	ldrd	r4, r3, [r3]
   b996e:	46a4      	mov	ip, r4
      }
   b9970:	bc30      	pop	{r4, r5}
   b9972:	4760      	bx	ip

000b9974 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b9974:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b9976:	b538      	push	{r3, r4, r5, lr}
   b9978:	4604      	mov	r4, r0
	switch (__op)
   b997a:	d102      	bne.n	b9982 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b997c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b997e:	6023      	str	r3, [r4, #0]
	}
   b9980:	e003      	b.n	b998a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b9982:	2a02      	cmp	r2, #2
   b9984:	d003      	beq.n	b998e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b9986:	2a03      	cmp	r2, #3
   b9988:	d00d      	beq.n	b99a6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b998a:	2000      	movs	r0, #0
   b998c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b998e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b9990:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b9992:	f7fa fb80 	bl	b4096 <_Znwj>
   b9996:	4603      	mov	r3, r0
   b9998:	2800      	cmp	r0, #0
   b999a:	d0f0      	beq.n	b997e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b999c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b99a0:	e883 0003 	stmia.w	r3, {r0, r1}
   b99a4:	e7eb      	b.n	b997e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b99a6:	6800      	ldr	r0, [r0, #0]
   b99a8:	2800      	cmp	r0, #0
   b99aa:	d0ee      	beq.n	b998a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b99ac:	2108      	movs	r1, #8
   b99ae:	f7fa fb76 	bl	b409e <_ZdlPvj>
   b99b2:	e7ea      	b.n	b998a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b99b4 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b99b4:	b510      	push	{r4, lr}
	if (_M_manager)
   b99b6:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b99b8:	4604      	mov	r4, r0
	if (_M_manager)
   b99ba:	b12b      	cbz	r3, b99c8 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b99bc:	2203      	movs	r2, #3
   b99be:	4601      	mov	r1, r0
   b99c0:	4798      	blx	r3
	    _M_manager = nullptr;
   b99c2:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b99c4:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b99c8:	bd10      	pop	{r4, pc}

000b99ca <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b99ca:	b510      	push	{r4, lr}
	if (_M_manager)
   b99cc:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b99ce:	4604      	mov	r4, r0
	if (_M_manager)
   b99d0:	b12b      	cbz	r3, b99de <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b99d2:	2203      	movs	r2, #3
   b99d4:	4601      	mov	r1, r0
   b99d6:	4798      	blx	r3
	    _M_manager = nullptr;
   b99d8:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b99da:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b99de:	bd10      	pop	{r4, pc}

000b99e0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   b99e0:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   b99e2:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   b99e4:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   b99e6:	2220      	movs	r2, #32
   b99e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   b99ec:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   b99ee:	4a08      	ldr	r2, [pc, #32]	; (b9a10 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   b99f0:	9200      	str	r2, [sp, #0]
   b99f2:	4908      	ldr	r1, [pc, #32]	; (b9a14 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   b99f4:	aa02      	add	r2, sp, #8
   b99f6:	2001      	movs	r0, #1
   b99f8:	f7ff fde2 	bl	b95c0 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b99fc:	6820      	ldr	r0, [r4, #0]
   b99fe:	4906      	ldr	r1, [pc, #24]	; (b9a18 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   b9a00:	8800      	ldrh	r0, [r0, #0]
   b9a02:	2300      	movs	r3, #0
   b9a04:	4622      	mov	r2, r4
    }
   b9a06:	b00a      	add	sp, #40	; 0x28
   b9a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b9a0c:	f7ff bb52 	b.w	b90b4 <hal_ble_gatt_client_discover_all_services>
   b9a10:	000c1626 	.word	0x000c1626
   b9a14:	000c161b 	.word	0x000c161b
   b9a18:	000bb591 	.word	0x000bb591

000b9a1c <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b9a1c:	b510      	push	{r4, lr}
   b9a1e:	3801      	subs	r0, #1
   b9a20:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b9a24:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b9a28:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b9a2a:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b9a2e:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b9a30:	bf88      	it	hi
   b9a32:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b9a36:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b9a3a:	7803      	ldrb	r3, [r0, #0]
   b9a3c:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b9a40:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b9a44:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b9a46:	bf88      	it	hi
   b9a48:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b9a4c:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b9a4e:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b9a52:	d1e7      	bne.n	b9a24 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b9a54:	bd10      	pop	{r4, pc}

000b9a56 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b9a56:	b510      	push	{r4, lr}
   b9a58:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b9a5a:	3058      	adds	r0, #88	; 0x58
   b9a5c:	f7fa fc7a 	bl	b4354 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b9a60:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b9a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9a68:	f003 b8a0 	b.w	bcbac <_ZN6StringD1Ev>

000b9a6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   b9a6c:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   b9a6e:	6803      	ldr	r3, [r0, #0]
   b9a70:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   b9a72:	4605      	mov	r5, r0
   b9a74:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   b9a76:	d008      	beq.n	b9a8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   b9a78:	b111      	cbz	r1, b9a80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   b9a7a:	684b      	ldr	r3, [r1, #4]
   b9a7c:	3301      	adds	r3, #1
   b9a7e:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   b9a80:	6828      	ldr	r0, [r5, #0]
   b9a82:	b108      	cbz	r0, b9a88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   b9a84:	f7fa fca4 	bl	b43d0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b9a88:	602c      	str	r4, [r5, #0]
      }
   b9a8a:	bd38      	pop	{r3, r4, r5, pc}

000b9a8c <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b9a8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9a90:	b2da      	uxtb	r2, r3
   b9a92:	2a09      	cmp	r2, #9
   b9a94:	d801      	bhi.n	b9a9a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b9a96:	4618      	mov	r0, r3
   b9a98:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b9a9a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b9a9e:	2b05      	cmp	r3, #5
   b9aa0:	d801      	bhi.n	b9aa6 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b9aa2:	3857      	subs	r0, #87	; 0x57
   b9aa4:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b9aa6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b9aaa:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b9aac:	bf94      	ite	ls
   b9aae:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b9ab0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b9ab4:	4770      	bx	lr
	...

000b9ab8 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b9ab8:	b510      	push	{r4, lr}
            locked_(false) {
   b9aba:	2300      	movs	r3, #0
   b9abc:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b9abe:	4b04      	ldr	r3, [pc, #16]	; (b9ad0 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b9ac0:	4604      	mov	r4, r0
   b9ac2:	6818      	ldr	r0, [r3, #0]
   b9ac4:	f7ff fbac 	bl	b9220 <os_mutex_recursive_lock>
        locked_ = true;
   b9ac8:	2301      	movs	r3, #1
   b9aca:	7023      	strb	r3, [r4, #0]
    }
   b9acc:	4620      	mov	r0, r4
   b9ace:	bd10      	pop	{r4, pc}
   b9ad0:	2003e658 	.word	0x2003e658

000b9ad4 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b9ad4:	b510      	push	{r4, lr}
        if (locked_) {
   b9ad6:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b9ad8:	4604      	mov	r4, r0
        if (locked_) {
   b9ada:	b11b      	cbz	r3, b9ae4 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b9adc:	4b02      	ldr	r3, [pc, #8]	; (b9ae8 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b9ade:	6818      	ldr	r0, [r3, #0]
   b9ae0:	f7ff fba6 	bl	b9230 <os_mutex_recursive_unlock>
    }
   b9ae4:	4620      	mov	r0, r4
   b9ae6:	bd10      	pop	{r4, pc}
   b9ae8:	2003e658 	.word	0x2003e658

000b9aec <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b9aec:	b082      	sub	sp, #8
   b9aee:	4603      	mov	r3, r0
    address_ = addr;
   b9af0:	6808      	ldr	r0, [r1, #0]
   b9af2:	6849      	ldr	r1, [r1, #4]
   b9af4:	466a      	mov	r2, sp
   b9af6:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b9af8:	466a      	mov	r2, sp
   b9afa:	ca03      	ldmia	r2!, {r0, r1}
   b9afc:	6018      	str	r0, [r3, #0]
}
   b9afe:	4618      	mov	r0, r3
    address_ = addr.address_;
   b9b00:	6059      	str	r1, [r3, #4]
}
   b9b02:	b002      	add	sp, #8
   b9b04:	4770      	bx	lr

000b9b06 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b9b06:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b9b08:	7982      	ldrb	r2, [r0, #6]
   b9b0a:	798b      	ldrb	r3, [r1, #6]
   b9b0c:	429a      	cmp	r2, r3
   b9b0e:	d106      	bne.n	b9b1e <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b9b10:	2206      	movs	r2, #6
   b9b12:	f004 fb70 	bl	be1f6 <memcmp>
   b9b16:	fab0 f080 	clz	r0, r0
   b9b1a:	0940      	lsrs	r0, r0, #5
}
   b9b1c:	bd08      	pop	{r3, pc}
    return false;
   b9b1e:	2000      	movs	r0, #0
   b9b20:	e7fc      	b.n	b9b1c <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b9b22 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b9b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9b26:	6003      	str	r3, [r0, #0]
   b9b28:	8083      	strh	r3, [r0, #4]
}
   b9b2a:	2000      	movs	r0, #0
   b9b2c:	4770      	bx	lr

000b9b2e <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b9b2e:	b508      	push	{r3, lr}
   b9b30:	4602      	mov	r2, r0
        : address_{} {
   b9b32:	2100      	movs	r1, #0
   b9b34:	6001      	str	r1, [r0, #0]
   b9b36:	6041      	str	r1, [r0, #4]
    clear();
   b9b38:	f7ff fff3 	bl	b9b22 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b9b3c:	7191      	strb	r1, [r2, #6]
}
   b9b3e:	4610      	mov	r0, r2
   b9b40:	bd08      	pop	{r3, pc}
	...

000b9b44 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b9b44:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b9b46:	2301      	movs	r3, #1
   b9b48:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9b4a:	4b05      	ldr	r3, [pc, #20]	; (b9b60 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b9b4c:	4602      	mov	r2, r0
   b9b4e:	f103 0110 	add.w	r1, r3, #16
   b9b52:	f853 4b04 	ldr.w	r4, [r3], #4
   b9b56:	f842 4b04 	str.w	r4, [r2], #4
   b9b5a:	428b      	cmp	r3, r1
   b9b5c:	d1f9      	bne.n	b9b52 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b9b5e:	bd10      	pop	{r4, pc}
   b9b60:	000c1882 	.word	0x000c1882

000b9b64 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b9b64:	7c0b      	ldrb	r3, [r1, #16]
   b9b66:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   b9b6a:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b9b6c:	d10d      	bne.n	b9b8a <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   b9b6e:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9b70:	4b0c      	ldr	r3, [pc, #48]	; (b9ba4 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   b9b72:	4602      	mov	r2, r0
   b9b74:	f103 0410 	add.w	r4, r3, #16
   b9b78:	f853 5b04 	ldr.w	r5, [r3], #4
   b9b7c:	f842 5b04 	str.w	r5, [r2], #4
   b9b80:	42a3      	cmp	r3, r4
   b9b82:	d1f9      	bne.n	b9b78 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   b9b84:	880b      	ldrh	r3, [r1, #0]
   b9b86:	8183      	strh	r3, [r0, #12]
}
   b9b88:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   b9b8a:	2301      	movs	r3, #1
   b9b8c:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   b9b8e:	f101 0210 	add.w	r2, r1, #16
   b9b92:	4603      	mov	r3, r0
   b9b94:	f851 4b04 	ldr.w	r4, [r1], #4
   b9b98:	f843 4b04 	str.w	r4, [r3], #4
   b9b9c:	4291      	cmp	r1, r2
   b9b9e:	d1f9      	bne.n	b9b94 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   b9ba0:	e7f2      	b.n	b9b88 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   b9ba2:	bf00      	nop
   b9ba4:	000c1882 	.word	0x000c1882

000b9ba8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b9ba8:	b510      	push	{r4, lr}
    if (uuid128) {
   b9baa:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b9bac:	4604      	mov	r4, r0
    if (uuid128) {
   b9bae:	b1b1      	cbz	r1, b9bde <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b9bb0:	2a01      	cmp	r2, #1
   b9bb2:	f101 0210 	add.w	r2, r1, #16
   b9bb6:	d10a      	bne.n	b9bce <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b9bb8:	4601      	mov	r1, r0
   b9bba:	f853 0b04 	ldr.w	r0, [r3], #4
   b9bbe:	f841 0b04 	str.w	r0, [r1], #4
   b9bc2:	4293      	cmp	r3, r2
   b9bc4:	d1f9      	bne.n	b9bba <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b9bc6:	2301      	movs	r3, #1
   b9bc8:	6123      	str	r3, [r4, #16]
}
   b9bca:	4620      	mov	r0, r4
   b9bcc:	bd10      	pop	{r4, pc}
   b9bce:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b9bd0:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b9bd4:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b9bd8:	429a      	cmp	r2, r3
   b9bda:	d1f9      	bne.n	b9bd0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b9bdc:	e7f3      	b.n	b9bc6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b9bde:	2210      	movs	r2, #16
   b9be0:	f004 fb41 	bl	be266 <memset>
   b9be4:	e7f1      	b.n	b9bca <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b9be6 <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b9be6:	b538      	push	{r3, r4, r5, lr}
   b9be8:	4604      	mov	r4, r0
   b9bea:	460d      	mov	r5, r1
        : BleUuid() {
   b9bec:	f7ff ffaa 	bl	b9b44 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b9bf0:	2300      	movs	r3, #0
   b9bf2:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b9bf4:	81a5      	strh	r5, [r4, #12]
}
   b9bf6:	4620      	mov	r0, r4
   b9bf8:	bd38      	pop	{r3, r4, r5, pc}

000b9bfa <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b9bfa:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b9bfc:	6902      	ldr	r2, [r0, #16]
   b9bfe:	690b      	ldr	r3, [r1, #16]
   b9c00:	429a      	cmp	r2, r3
   b9c02:	d106      	bne.n	b9c12 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b9c04:	2210      	movs	r2, #16
   b9c06:	f004 faf6 	bl	be1f6 <memcmp>
   b9c0a:	fab0 f080 	clz	r0, r0
   b9c0e:	0940      	lsrs	r0, r0, #5
}
   b9c10:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b9c12:	2000      	movs	r0, #0
   b9c14:	e7fc      	b.n	b9c10 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b9c18 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b9c18:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b9c1a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b9c1e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9c20:	4b34      	ldr	r3, [pc, #208]	; (b9cf4 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b9c22:	460c      	mov	r4, r1
   b9c24:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9c26:	4602      	mov	r2, r0
   b9c28:	f103 0110 	add.w	r1, r3, #16
   b9c2c:	f853 0b04 	ldr.w	r0, [r3], #4
   b9c30:	f842 0b04 	str.w	r0, [r2], #4
   b9c34:	428b      	cmp	r3, r1
   b9c36:	d1f9      	bne.n	b9c2c <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b9c38:	b344      	cbz	r4, b9c8c <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b9c3a:	2124      	movs	r1, #36	; 0x24
   b9c3c:	4620      	mov	r0, r4
   b9c3e:	f004 fbf5 	bl	be42c <strnlen>
   b9c42:	2804      	cmp	r0, #4
   b9c44:	f04f 0500 	mov.w	r5, #0
   b9c48:	d123      	bne.n	b9c92 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b9c4a:	f8ad 5004 	strh.w	r5, [sp, #4]
   b9c4e:	af01      	add	r7, sp, #4
   b9c50:	1ca5      	adds	r5, r4, #2
   b9c52:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b9c54:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b9c58:	f7ff ff18 	bl	b9a8c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b9c5c:	f1b0 0800 	subs.w	r8, r0, #0
   b9c60:	db12      	blt.n	b9c88 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b9c62:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b9c66:	f7ff ff11 	bl	b9a8c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b9c6a:	2800      	cmp	r0, #0
   b9c6c:	db0c      	blt.n	b9c88 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b9c6e:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b9c70:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b9c74:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b9c76:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b9c7a:	d1eb      	bne.n	b9c54 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b9c7c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b9c80:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b9c82:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b9c86:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b9c88:	2300      	movs	r3, #0
   b9c8a:	6133      	str	r3, [r6, #16]
}
   b9c8c:	b002      	add	sp, #8
   b9c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b9c92:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b9c96:	2124      	movs	r1, #36	; 0x24
   b9c98:	4620      	mov	r0, r4
   b9c9a:	f004 fbc7 	bl	be42c <strnlen>
   b9c9e:	42a8      	cmp	r0, r5
   b9ca0:	d807      	bhi.n	b9cb2 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b9ca2:	4642      	mov	r2, r8
   b9ca4:	2100      	movs	r1, #0
   b9ca6:	4630      	mov	r0, r6
}
   b9ca8:	b002      	add	sp, #8
   b9caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b9cae:	f004 bada 	b.w	be266 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b9cb2:	f1b8 0f00 	cmp.w	r8, #0
   b9cb6:	d0e9      	beq.n	b9c8c <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b9cb8:	5d60      	ldrb	r0, [r4, r5]
   b9cba:	f7ff fee7 	bl	b9a8c <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b9cbe:	0603      	lsls	r3, r0, #24
   b9cc0:	d415      	bmi.n	b9cee <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b9cc2:	0100      	lsls	r0, r0, #4
   b9cc4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9cc8:	b2c7      	uxtb	r7, r0
   b9cca:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b9cce:	2124      	movs	r1, #36	; 0x24
   b9cd0:	4620      	mov	r0, r4
   b9cd2:	f004 fbab 	bl	be42c <strnlen>
   b9cd6:	3501      	adds	r5, #1
   b9cd8:	42a8      	cmp	r0, r5
   b9cda:	d908      	bls.n	b9cee <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b9cdc:	5d60      	ldrb	r0, [r4, r5]
   b9cde:	f7ff fed5 	bl	b9a8c <_ZN8particle11hexToNibbleEc>
   b9ce2:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b9ce4:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b9ce6:	bfa4      	itt	ge
   b9ce8:	4338      	orrge	r0, r7
   b9cea:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b9cee:	3501      	adds	r5, #1
   b9cf0:	e7d1      	b.n	b9c96 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b9cf2:	bf00      	nop
   b9cf4:	000c1882 	.word	0x000c1882

000b9cf8 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b9cf8:	b513      	push	{r0, r1, r4, lr}
   b9cfa:	4604      	mov	r4, r0
   b9cfc:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b9cfe:	f7ff ff21 	bl	b9b44 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b9d02:	4620      	mov	r0, r4
   b9d04:	9901      	ldr	r1, [sp, #4]
   b9d06:	f7ff ff87 	bl	b9c18 <_ZN8particle7BleUuid9constructEPKc>
}
   b9d0a:	4620      	mov	r0, r4
   b9d0c:	b002      	add	sp, #8
   b9d0e:	bd10      	pop	{r4, pc}

000b9d10 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   b9d10:	b510      	push	{r4, lr}
   b9d12:	f100 030f 	add.w	r3, r0, #15
   b9d16:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   b9d18:	781c      	ldrb	r4, [r3, #0]
   b9d1a:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b9d1e:	4283      	cmp	r3, r0
   b9d20:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   b9d24:	d1f8      	bne.n	b9d18 <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   b9d26:	bd10      	pop	{r4, pc}

000b9d28 <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   b9d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9d2c:	461f      	mov	r7, r3
   b9d2e:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   b9d30:	460d      	mov	r5, r1
   b9d32:	2900      	cmp	r1, #0
   b9d34:	d05b      	beq.n	b9dee <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   b9d36:	b1da      	cbz	r2, b9d70 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   b9d38:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   b9d3c:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   b9d3e:	f1b8 0f00 	cmp.w	r8, #0
   b9d42:	d119      	bne.n	b9d78 <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b9d44:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   b9d46:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b9d4a:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b9d4c:	aa05      	add	r2, sp, #20
   b9d4e:	2102      	movs	r1, #2
   b9d50:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b9d52:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b9d56:	f7ff fe61 	bl	b9a1c <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   b9d5a:	2c04      	cmp	r4, #4
   b9d5c:	bf28      	it	cs
   b9d5e:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   b9d60:	4622      	mov	r2, r4
   b9d62:	a905      	add	r1, sp, #20
   b9d64:	4628      	mov	r0, r5
   b9d66:	f004 fa56 	bl	be216 <memcpy>
        buf[len++] = '\0';
   b9d6a:	f805 8004 	strb.w	r8, [r5, r4]
   b9d6e:	1c62      	adds	r2, r4, #1
}
   b9d70:	4610      	mov	r0, r2
   b9d72:	b00e      	add	sp, #56	; 0x38
   b9d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   b9d78:	a901      	add	r1, sp, #4
   b9d7a:	f7ff ffc9 	bl	b9d10 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b9d7e:	aa05      	add	r2, sp, #20
    if (stripped) {
   b9d80:	b17f      	cbz	r7, b9da2 <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b9d82:	2110      	movs	r1, #16
   b9d84:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b9d86:	f7ff fe49 	bl	b9a1c <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b9d8a:	2c24      	cmp	r4, #36	; 0x24
   b9d8c:	bf28      	it	cs
   b9d8e:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   b9d90:	4622      	mov	r2, r4
   b9d92:	a905      	add	r1, sp, #20
   b9d94:	4628      	mov	r0, r5
   b9d96:	f004 fa3e 	bl	be216 <memcpy>
    buf[len++] = '\0';
   b9d9a:	2300      	movs	r3, #0
   b9d9c:	552b      	strb	r3, [r5, r4]
   b9d9e:	1c62      	adds	r2, r4, #1
    return len;
   b9da0:	e7e6      	b.n	b9d70 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   b9da2:	2104      	movs	r1, #4
   b9da4:	eb0d 0001 	add.w	r0, sp, r1
   b9da8:	f7ff fe38 	bl	b9a1c <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   b9dac:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b9dae:	f10d 021d 	add.w	r2, sp, #29
   b9db2:	2102      	movs	r1, #2
   b9db4:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   b9db6:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b9dba:	f7ff fe2f 	bl	b9a1c <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b9dbe:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   b9dc2:	2102      	movs	r1, #2
   b9dc4:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   b9dc8:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b9dcc:	f7ff fe26 	bl	b9a1c <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b9dd0:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   b9dd4:	2102      	movs	r1, #2
   b9dd6:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   b9dd8:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b9ddc:	f7ff fe1e 	bl	b9a1c <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   b9de0:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b9de4:	aa0b      	add	r2, sp, #44	; 0x2c
   b9de6:	2106      	movs	r1, #6
   b9de8:	f10d 000e 	add.w	r0, sp, #14
   b9dec:	e7cb      	b.n	b9d86 <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   b9dee:	460a      	mov	r2, r1
   b9df0:	e7be      	b.n	b9d70 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000b9df2 <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   b9df2:	b510      	push	{r4, lr}
   b9df4:	b08a      	sub	sp, #40	; 0x28
   b9df6:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   b9df8:	2300      	movs	r3, #0
   b9dfa:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   b9dfc:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   b9dfe:	4669      	mov	r1, sp
   b9e00:	f7ff ff92 	bl	b9d28 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   b9e04:	4669      	mov	r1, sp
   b9e06:	4620      	mov	r0, r4
   b9e08:	f002 ff1b 	bl	bcc42 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b9e0c:	4620      	mov	r0, r4
   b9e0e:	b00a      	add	sp, #40	; 0x28
   b9e10:	bd10      	pop	{r4, pc}

000b9e12 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b9e12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9e14:	4605      	mov	r5, r0
   b9e16:	4616      	mov	r6, r2
   b9e18:	461f      	mov	r7, r3
   b9e1a:	460a      	mov	r2, r1
   b9e1c:	ab01      	add	r3, sp, #4
   b9e1e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b9e22:	f7ff fd7b 	bl	b991c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b9e26:	f030 0402 	bics.w	r4, r0, #2
   b9e2a:	d00c      	beq.n	b9e46 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b9e2c:	1e84      	subs	r4, r0, #2
   b9e2e:	42bc      	cmp	r4, r7
   b9e30:	bf28      	it	cs
   b9e32:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b9e34:	b13e      	cbz	r6, b9e46 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b9e36:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b9e38:	682b      	ldr	r3, [r5, #0]
   b9e3a:	3102      	adds	r1, #2
   b9e3c:	4622      	mov	r2, r4
   b9e3e:	4419      	add	r1, r3
   b9e40:	4630      	mov	r0, r6
   b9e42:	f004 f9e8 	bl	be216 <memcpy>
}
   b9e46:	4620      	mov	r0, r4
   b9e48:	b003      	add	sp, #12
   b9e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9e4c <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b9e4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9e4e:	4613      	mov	r3, r2
   b9e50:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b9e52:	9201      	str	r2, [sp, #4]
   b9e54:	460a      	mov	r2, r1
   b9e56:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b9e58:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b9e5a:	f7ff ffda 	bl	b9e12 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b9e5e:	b940      	cbnz	r0, b9e72 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b9e60:	9b01      	ldr	r3, [sp, #4]
   b9e62:	4622      	mov	r2, r4
   b9e64:	2109      	movs	r1, #9
   b9e66:	4628      	mov	r0, r5
}
   b9e68:	b003      	add	sp, #12
   b9e6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b9e6e:	f7ff bfd0 	b.w	b9e12 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b9e72:	b003      	add	sp, #12
   b9e74:	bd30      	pop	{r4, r5, pc}
	...

000b9e78 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b9e78:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9e7a:	460c      	mov	r4, r1
   b9e7c:	b089      	sub	sp, #36	; 0x24
    String name;
   b9e7e:	490c      	ldr	r1, [pc, #48]	; (b9eb0 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b9e80:	4605      	mov	r5, r0
    String name;
   b9e82:	f002 fede 	bl	bcc42 <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b9e86:	221f      	movs	r2, #31
   b9e88:	4669      	mov	r1, sp
   b9e8a:	4620      	mov	r0, r4
   b9e8c:	f7ff ffde 	bl	b9e4c <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b9e90:	4606      	mov	r6, r0
   b9e92:	b150      	cbz	r0, b9eaa <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b9e94:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b9e96:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b9e98:	f814 1b01 	ldrb.w	r1, [r4], #1
   b9e9c:	4628      	mov	r0, r5
   b9e9e:	f002 ff4f 	bl	bcd40 <_ZN6String6concatEc>
   b9ea2:	b110      	cbz	r0, b9eaa <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b9ea4:	3701      	adds	r7, #1
   b9ea6:	42be      	cmp	r6, r7
   b9ea8:	d1f6      	bne.n	b9e98 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b9eaa:	4628      	mov	r0, r5
   b9eac:	b009      	add	sp, #36	; 0x24
   b9eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9eb0:	000c0888 	.word	0x000c0888

000b9eb4 <_ZNK8particle18BleAdvertisingData10customDataEPhj>:
size_t BleAdvertisingData::customData(uint8_t* buf, size_t len) const {
   b9eb4:	4613      	mov	r3, r2
    return get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len);
   b9eb6:	460a      	mov	r2, r1
   b9eb8:	21ff      	movs	r1, #255	; 0xff
   b9eba:	f7ff bfaa 	b.w	b9e12 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>

000b9ebe <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b9ebe:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b9ec0:	2302      	movs	r3, #2
   b9ec2:	aa01      	add	r2, sp, #4
   b9ec4:	2119      	movs	r1, #25
   b9ec6:	f7ff ffa4 	bl	b9e12 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b9eca:	b108      	cbz	r0, b9ed0 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b9ecc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b9ed0:	b003      	add	sp, #12
   b9ed2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9ed8 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b9ed8:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b9eda:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9ede:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b9ee0:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b9ee2:	8043      	strh	r3, [r0, #2]
   b9ee4:	220e      	movs	r2, #14
   b9ee6:	4629      	mov	r1, r5
   b9ee8:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b9eea:	7105      	strb	r5, [r0, #4]
   b9eec:	3006      	adds	r0, #6
   b9eee:	f004 f9ba 	bl	be266 <memset>
   b9ef2:	f104 0014 	add.w	r0, r4, #20
   b9ef6:	f7ff fe25 	bl	b9b44 <_ZN8particle7BleUuidC1Ev>
   b9efa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b9efe:	f7ff fe21 	bl	b9b44 <_ZN8particle7BleUuidC1Ev>
   b9f02:	4904      	ldr	r1, [pc, #16]	; (b9f14 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b9f04:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b9f08:	f002 fe9b 	bl	bcc42 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b9f0c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b9f0e:	4620      	mov	r0, r4
   b9f10:	bd38      	pop	{r3, r4, r5, pc}
   b9f12:	bf00      	nop
   b9f14:	000c0888 	.word	0x000c0888

000b9f18 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   b9f18:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b9f1a:	680d      	ldr	r5, [r1, #0]
   b9f1c:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b9f1e:	4601      	mov	r1, r0
   b9f20:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b9f24:	f7ff fe69 	bl	b9bfa <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b9f28:	b140      	cbz	r0, b9f3c <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   b9f2a:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b9f2c:	8aa2      	ldrh	r2, [r4, #20]
   b9f2e:	429a      	cmp	r2, r3
   b9f30:	d805      	bhi.n	b9f3e <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b9f32:	8ae0      	ldrh	r0, [r4, #22]
   b9f34:	4298      	cmp	r0, r3
   b9f36:	bf34      	ite	cc
   b9f38:	2000      	movcc	r0, #0
   b9f3a:	2001      	movcs	r0, #1
    }
   b9f3c:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b9f3e:	2000      	movs	r0, #0
   b9f40:	e7fc      	b.n	b9f3c <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000b9f42 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b9f42:	b510      	push	{r4, lr}
    return data_ + size_;
   b9f44:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b9f48:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b9f4c:	4293      	cmp	r3, r2
   b9f4e:	4618      	mov	r0, r3
   b9f50:	d006      	beq.n	b9f60 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b9f52:	6804      	ldr	r4, [r0, #0]
   b9f54:	8824      	ldrh	r4, [r4, #0]
   b9f56:	428c      	cmp	r4, r1
   b9f58:	f103 0308 	add.w	r3, r3, #8
   b9f5c:	d1f6      	bne.n	b9f4c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b9f5e:	bd10      	pop	{r4, pc}
        return nullptr;
   b9f60:	2000      	movs	r0, #0
   b9f62:	e7fc      	b.n	b9f5e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000b9f64 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9f64:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   b9f66:	b570      	push	{r4, r5, r6, lr}
   b9f68:	6003      	str	r3, [r0, #0]
   b9f6a:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9f6c:	2068      	movs	r0, #104	; 0x68
   b9f6e:	f7fa f892 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9f72:	1e04      	subs	r4, r0, #0
   b9f74:	f104 060c 	add.w	r6, r4, #12
   b9f78:	d007      	beq.n	b9f8a <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   b9f7a:	2301      	movs	r3, #1
   b9f7c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b9f80:	4b04      	ldr	r3, [pc, #16]	; (b9f94 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   b9f82:	6023      	str	r3, [r4, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9f84:	4630      	mov	r0, r6
   b9f86:	f7ff ffa7 	bl	b9ed8 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   b9f8a:	e9c5 6400 	strd	r6, r4, [r5]
}
   b9f8e:	4628      	mov	r0, r5
   b9f90:	bd70      	pop	{r4, r5, r6, pc}
   b9f92:	bf00      	nop
   b9f94:	000c1828 	.word	0x000c1828

000b9f98 <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   b9f98:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   b9f9a:	680c      	ldr	r4, [r1, #0]
   b9f9c:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   b9f9e:	4606      	mov	r6, r0
    return impl()->charUUID();
   b9fa0:	4605      	mov	r5, r0
   b9fa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9fa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9fa6:	6823      	ldr	r3, [r4, #0]
   b9fa8:	602b      	str	r3, [r5, #0]
}
   b9faa:	4630      	mov	r0, r6
   b9fac:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9fb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b9fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9fb2:	4606      	mov	r6, r0
   b9fb4:	b085      	sub	sp, #20
   b9fb6:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b9fb8:	460d      	mov	r5, r1
   b9fba:	2900      	cmp	r1, #0
   b9fbc:	d050      	beq.n	ba060 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b9fbe:	2a00      	cmp	r2, #0
   b9fc0:	d04e      	beq.n	ba060 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
   b9fc2:	6804      	ldr	r4, [r0, #0]
    if (impl()->isLocal()) {
   b9fc4:	7823      	ldrb	r3, [r4, #0]
   b9fc6:	2af4      	cmp	r2, #244	; 0xf4
   b9fc8:	bf28      	it	cs
   b9fca:	22f4      	movcs	r2, #244	; 0xf4
   b9fcc:	b343      	cbz	r3, ba020 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b9fce:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b9fd0:	0798      	lsls	r0, r3, #30
   b9fd2:	d509      	bpl.n	b9fe8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b9fd4:	89a0      	ldrh	r0, [r4, #12]
   b9fd6:	9203      	str	r2, [sp, #12]
   b9fd8:	2300      	movs	r3, #0
   b9fda:	f7ff f861 	bl	b90a0 <hal_ble_gatt_server_set_characteristic_value>
   b9fde:	2800      	cmp	r0, #0
   b9fe0:	9a03      	ldr	r2, [sp, #12]
   b9fe2:	da03      	bge.n	b9fec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   b9fe4:	b005      	add	sp, #20
   b9fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b9fe8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b9fec:	6834      	ldr	r4, [r6, #0]
   b9fee:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b9ff0:	06d9      	lsls	r1, r3, #27
   b9ff2:	d509      	bpl.n	ba008 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b9ff4:	2f01      	cmp	r7, #1
   b9ff6:	d007      	beq.n	ba008 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9ff8:	89a0      	ldrh	r0, [r4, #12]
   b9ffa:	2300      	movs	r3, #0
   b9ffc:	4629      	mov	r1, r5
}
   b9ffe:	b005      	add	sp, #20
   ba000:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba004:	f7ff b8b0 	b.w	b9168 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   ba008:	069b      	lsls	r3, r3, #26
   ba00a:	d5eb      	bpl.n	b9fe4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   ba00c:	2f02      	cmp	r7, #2
   ba00e:	d0e9      	beq.n	b9fe4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba010:	89a0      	ldrh	r0, [r4, #12]
   ba012:	2300      	movs	r3, #0
   ba014:	4629      	mov	r1, r5
}
   ba016:	b005      	add	sp, #20
   ba018:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba01c:	f7ff b8ae 	b.w	b917c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   ba020:	8860      	ldrh	r0, [r4, #2]
   ba022:	f64f 71ff 	movw	r1, #65535	; 0xffff
   ba026:	4288      	cmp	r0, r1
   ba028:	d01c      	beq.n	ba064 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   ba02a:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   ba02c:	074e      	lsls	r6, r1, #29
   ba02e:	d501      	bpl.n	ba034 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   ba030:	2f01      	cmp	r7, #1
   ba032:	d104      	bne.n	ba03e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   ba034:	070b      	lsls	r3, r1, #28
   ba036:	d409      	bmi.n	ba04c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   ba038:	f06f 0077 	mvn.w	r0, #119	; 0x77
   ba03c:	e7d2      	b.n	b9fe4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   ba03e:	89a1      	ldrh	r1, [r4, #12]
   ba040:	9300      	str	r3, [sp, #0]
   ba042:	4613      	mov	r3, r2
   ba044:	462a      	mov	r2, r5
   ba046:	f7ff f853 	bl	b90f0 <hal_ble_gatt_client_write_without_response>
   ba04a:	e7cb      	b.n	b9fe4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   ba04c:	2f02      	cmp	r7, #2
   ba04e:	d0f3      	beq.n	ba038 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   ba050:	2300      	movs	r3, #0
   ba052:	89a1      	ldrh	r1, [r4, #12]
   ba054:	9300      	str	r3, [sp, #0]
   ba056:	4613      	mov	r3, r2
   ba058:	462a      	mov	r2, r5
   ba05a:	f7ff f83f 	bl	b90dc <hal_ble_gatt_client_write_with_response>
   ba05e:	e7c1      	b.n	b9fe4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   ba060:	4802      	ldr	r0, [pc, #8]	; (ba06c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   ba062:	e7bf      	b.n	b9fe4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   ba064:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   ba068:	e7bc      	b.n	b9fe4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   ba06a:	bf00      	nop
   ba06c:	fffffef2 	.word	0xfffffef2

000ba070 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   ba070:	b510      	push	{r4, lr}
   ba072:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   ba074:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   ba076:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   ba078:	bb52      	cbnz	r2, ba0d0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   ba07a:	885c      	ldrh	r4, [r3, #2]
   ba07c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   ba080:	4284      	cmp	r4, r0
   ba082:	d025      	beq.n	ba0d0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   ba084:	8a18      	ldrh	r0, [r3, #16]
   ba086:	b330      	cbz	r0, ba0d6 <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   ba088:	e9cd 2203 	strd	r2, r2, [sp, #12]
   ba08c:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   ba08e:	4a13      	ldr	r2, [pc, #76]	; (ba0dc <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   ba090:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   ba092:	4a13      	ldr	r2, [pc, #76]	; (ba0e0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   ba094:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   ba098:	885a      	ldrh	r2, [r3, #2]
   ba09a:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   ba09e:	8a1a      	ldrh	r2, [r3, #16]
   ba0a0:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   ba0a4:	899a      	ldrh	r2, [r3, #12]
   ba0a6:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   ba0aa:	b159      	cbz	r1, ba0c4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   ba0ac:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   ba0ae:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   ba0b0:	bf44      	itt	mi
   ba0b2:	2202      	movmi	r2, #2
   ba0b4:	9205      	strmi	r2, [sp, #20]
   ba0b6:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   ba0b8:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   ba0ba:	bf42      	ittt	mi
   ba0bc:	9b05      	ldrmi	r3, [sp, #20]
   ba0be:	f043 0301 	orrmi.w	r3, r3, #1
   ba0c2:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   ba0c4:	2100      	movs	r1, #0
   ba0c6:	4668      	mov	r0, sp
   ba0c8:	f7ff f844 	bl	b9154 <hal_ble_gatt_client_configure_cccd>
}
   ba0cc:	b006      	add	sp, #24
   ba0ce:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   ba0d0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   ba0d4:	e7fa      	b.n	ba0cc <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   ba0d6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   ba0da:	e7f7      	b.n	ba0cc <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   ba0dc:	00180003 	.word	0x00180003
   ba0e0:	000ba2b5 	.word	0x000ba2b5

000ba0e4 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   ba0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba0e6:	2600      	movs	r6, #0
   ba0e8:	6006      	str	r6, [r0, #0]
   ba0ea:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba0ec:	2028      	movs	r0, #40	; 0x28
   ba0ee:	f7f9 ffd2 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba0f2:	1e04      	subs	r4, r0, #0
   ba0f4:	f104 070c 	add.w	r7, r4, #12
   ba0f8:	d00a      	beq.n	ba110 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   ba0fa:	2301      	movs	r3, #1
   ba0fc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   ba100:	4b05      	ldr	r3, [pc, #20]	; (ba118 <_ZN8particle10BleServiceC1Ev+0x34>)
   ba102:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   ba104:	4638      	mov	r0, r7
   ba106:	f7ff fd1d 	bl	b9b44 <_ZN8particle7BleUuidC1Ev>
   ba10a:	6226      	str	r6, [r4, #32]
   ba10c:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   ba110:	e9c5 7400 	strd	r7, r4, [r5]
}
   ba114:	4628      	mov	r0, r5
   ba116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba118:	000c1844 	.word	0x000c1844

000ba11c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   ba11c:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba11e:	2500      	movs	r5, #0
   ba120:	6005      	str	r5, [r0, #0]
   ba122:	4606      	mov	r6, r0
   ba124:	2030      	movs	r0, #48	; 0x30
   ba126:	f7f9 ffb6 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba12a:	4604      	mov	r4, r0
   ba12c:	b188      	cbz	r0, ba152 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   ba12e:	2301      	movs	r3, #1
   ba130:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   ba134:	4b09      	ldr	r3, [pc, #36]	; (ba15c <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   ba136:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   ba138:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba13c:	8183      	strh	r3, [r0, #12]
   ba13e:	300e      	adds	r0, #14
   ba140:	f7ff fcf5 	bl	b9b2e <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   ba144:	e9c4 5506 	strd	r5, r5, [r4, #24]
   ba148:	e9c4 5508 	strd	r5, r5, [r4, #32]
   ba14c:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   ba150:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   ba152:	6074      	str	r4, [r6, #4]
   ba154:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   ba156:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   ba158:	4630      	mov	r0, r6
   ba15a:	bd70      	pop	{r4, r5, r6, pc}
   ba15c:	000c1860 	.word	0x000c1860

000ba160 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   ba160:	b513      	push	{r0, r1, r4, lr}
   ba162:	4604      	mov	r4, r0
    WiringBleLock lk;
   ba164:	a801      	add	r0, sp, #4
   ba166:	f7ff fca7 	bl	b9ab8 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   ba16a:	6823      	ldr	r3, [r4, #0]
   ba16c:	881c      	ldrh	r4, [r3, #0]
   ba16e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba172:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   ba174:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   ba176:	bf18      	it	ne
   ba178:	2401      	movne	r4, #1
    WiringBleLock lk;
   ba17a:	f7ff fcab 	bl	b9ad4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   ba17e:	4620      	mov	r0, r4
   ba180:	b002      	add	sp, #8
   ba182:	bd10      	pop	{r4, pc}

000ba184 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   ba184:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba186:	4605      	mov	r5, r0
   ba188:	460c      	mov	r4, r1
    WiringBleLock lk;
   ba18a:	a801      	add	r0, sp, #4
   ba18c:	f7ff fc94 	bl	b9ab8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   ba190:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   ba192:	6823      	ldr	r3, [r4, #0]
   ba194:	f8c2 3002 	str.w	r3, [r2, #2]
   ba198:	6863      	ldr	r3, [r4, #4]
   ba19a:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   ba19e:	a801      	add	r0, sp, #4
   ba1a0:	f7ff fc98 	bl	b9ad4 <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   ba1a4:	b003      	add	sp, #12
   ba1a6:	bd30      	pop	{r4, r5, pc}

000ba1a8 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   ba1a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba1aa:	460d      	mov	r5, r1
   ba1ac:	4604      	mov	r4, r0
    WiringBleLock lk;
   ba1ae:	a801      	add	r0, sp, #4
   ba1b0:	f7ff fc82 	bl	b9ab8 <_ZN8particle3ble13WiringBleLockC1Ev>
   ba1b4:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   ba1b6:	f8d2 3002 	ldr.w	r3, [r2, #2]
   ba1ba:	6023      	str	r3, [r4, #0]
   ba1bc:	f8d2 3006 	ldr.w	r3, [r2, #6]
   ba1c0:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   ba1c2:	a801      	add	r0, sp, #4
   ba1c4:	f7ff fc86 	bl	b9ad4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   ba1c8:	4620      	mov	r0, r4
   ba1ca:	b003      	add	sp, #12
   ba1cc:	bd30      	pop	{r4, r5, pc}

000ba1ce <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   ba1ce:	b530      	push	{r4, r5, lr}
   ba1d0:	4605      	mov	r5, r0
   ba1d2:	b087      	sub	sp, #28
   ba1d4:	460c      	mov	r4, r1
    WiringBleLock lk;
   ba1d6:	a801      	add	r0, sp, #4
   ba1d8:	f7ff fc6e 	bl	b9ab8 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   ba1dc:	682a      	ldr	r2, [r5, #0]
   ba1de:	6823      	ldr	r3, [r4, #0]
   ba1e0:	8812      	ldrh	r2, [r2, #0]
   ba1e2:	881b      	ldrh	r3, [r3, #0]
   ba1e4:	429a      	cmp	r2, r3
   ba1e6:	d10d      	bne.n	ba204 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   ba1e8:	4629      	mov	r1, r5
   ba1ea:	a802      	add	r0, sp, #8
   ba1ec:	f7ff ffdc 	bl	ba1a8 <_ZNK8particle13BlePeerDevice7addressEv>
   ba1f0:	4621      	mov	r1, r4
   ba1f2:	a804      	add	r0, sp, #16
   ba1f4:	f7ff ffd8 	bl	ba1a8 <_ZNK8particle13BlePeerDevice7addressEv>
   ba1f8:	a904      	add	r1, sp, #16
   ba1fa:	a802      	add	r0, sp, #8
   ba1fc:	f7ff fc83 	bl	b9b06 <_ZNK8particle10BleAddresseqERKS0_>
   ba200:	4604      	mov	r4, r0
   ba202:	b900      	cbnz	r0, ba206 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   ba204:	2400      	movs	r4, #0
    WiringBleLock lk;
   ba206:	a801      	add	r0, sp, #4
   ba208:	f7ff fc64 	bl	b9ad4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   ba20c:	4620      	mov	r0, r4
   ba20e:	b007      	add	sp, #28
   ba210:	bd30      	pop	{r4, r5, pc}
	...

000ba214 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   ba214:	b510      	push	{r4, lr}
   ba216:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   ba218:	2064      	movs	r0, #100	; 0x64
   ba21a:	f7f9 ff3c 	bl	b4096 <_Znwj>
   ba21e:	b168      	cbz	r0, ba23c <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   ba220:	2300      	movs	r3, #0
   ba222:	e9c0 3300 	strd	r3, r3, [r0]
   ba226:	e9c0 3302 	strd	r3, r3, [r0, #8]
   ba22a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   ba22e:	e9c0 3306 	strd	r3, r3, [r0, #24]
   ba232:	6203      	str	r3, [r0, #32]
   ba234:	62c3      	str	r3, [r0, #44]	; 0x2c
   ba236:	63c3      	str	r3, [r0, #60]	; 0x3c
   ba238:	64c3      	str	r3, [r0, #76]	; 0x4c
   ba23a:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   ba23c:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   ba23e:	b920      	cbnz	r0, ba24a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   ba240:	4a0a      	ldr	r2, [pc, #40]	; (ba26c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   ba242:	490b      	ldr	r1, [pc, #44]	; (ba270 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   ba244:	200a      	movs	r0, #10
   ba246:	f7ff f9b3 	bl	b95b0 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   ba24a:	2000      	movs	r0, #0
   ba24c:	f7fe feec 	bl	b9028 <hal_ble_stack_init>
   ba250:	b120      	cbz	r0, ba25c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   ba252:	4a06      	ldr	r2, [pc, #24]	; (ba26c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   ba254:	4907      	ldr	r1, [pc, #28]	; (ba274 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   ba256:	200a      	movs	r0, #10
   ba258:	f7ff f9aa 	bl	b95b0 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   ba25c:	6821      	ldr	r1, [r4, #0]
   ba25e:	4806      	ldr	r0, [pc, #24]	; (ba278 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   ba260:	2200      	movs	r2, #0
   ba262:	f7fe ff6d 	bl	b9140 <hal_ble_set_callback_on_periph_link_events>
}
   ba266:	4620      	mov	r0, r4
   ba268:	bd10      	pop	{r4, pc}
   ba26a:	bf00      	nop
   ba26c:	000b9261 	.word	0x000b9261
   ba270:	000c1604 	.word	0x000c1604
   ba274:	000c1642 	.word	0x000c1642
   ba278:	000bacc1 	.word	0x000bacc1

000ba27c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   ba27c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   ba27e:	4c0a      	ldr	r4, [pc, #40]	; (ba2a8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   ba280:	7823      	ldrb	r3, [r4, #0]
   ba282:	f3bf 8f5b 	dmb	ish
   ba286:	07db      	lsls	r3, r3, #31
   ba288:	d40c      	bmi.n	ba2a4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   ba28a:	4620      	mov	r0, r4
   ba28c:	f7f9 ff16 	bl	b40bc <__cxa_guard_acquire>
   ba290:	b140      	cbz	r0, ba2a4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   ba292:	4806      	ldr	r0, [pc, #24]	; (ba2ac <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   ba294:	f7ff ffbe 	bl	ba214 <_ZN8particle14BleLocalDeviceC1Ev>
   ba298:	4620      	mov	r0, r4
   ba29a:	f7f9 ff14 	bl	b40c6 <__cxa_guard_release>
   ba29e:	4804      	ldr	r0, [pc, #16]	; (ba2b0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   ba2a0:	f003 ff9c 	bl	be1dc <atexit>
    return instance;
}
   ba2a4:	4801      	ldr	r0, [pc, #4]	; (ba2ac <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   ba2a6:	bd10      	pop	{r4, pc}
   ba2a8:	2003e654 	.word	0x2003e654
   ba2ac:	2003e65c 	.word	0x2003e65c
   ba2b0:	000ba5c5 	.word	0x000ba5c5

000ba2b4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   ba2b4:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   ba2b6:	6803      	ldr	r3, [r0, #0]
   ba2b8:	3b09      	subs	r3, #9
   ba2ba:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   ba2bc:	b08d      	sub	sp, #52	; 0x34
   ba2be:	4604      	mov	r4, r0
   ba2c0:	460d      	mov	r5, r1
    switch (event->type) {
   ba2c2:	d811      	bhi.n	ba2e8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   ba2c4:	f7ff ffda 	bl	ba27c <_ZN8particle14BleLocalDevice11getInstanceEv>
   ba2c8:	88a1      	ldrh	r1, [r4, #4]
   ba2ca:	6800      	ldr	r0, [r0, #0]
   ba2cc:	f7ff fe39 	bl	b9f42 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   ba2d0:	4603      	mov	r3, r0
   ba2d2:	b958      	cbnz	r0, ba2ec <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   ba2d4:	2220      	movs	r2, #32
   ba2d6:	e9cd 2004 	strd	r2, r0, [sp, #16]
   ba2da:	4a0b      	ldr	r2, [pc, #44]	; (ba308 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   ba2dc:	9200      	str	r2, [sp, #0]
   ba2de:	490b      	ldr	r1, [pc, #44]	; (ba30c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   ba2e0:	aa04      	add	r2, sp, #16
   ba2e2:	2032      	movs	r0, #50	; 0x32
   ba2e4:	f7ff f96c 	bl	b95c0 <log_message>
}
   ba2e8:	b00d      	add	sp, #52	; 0x34
   ba2ea:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   ba2ec:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   ba2ee:	2a00      	cmp	r2, #0
   ba2f0:	d0fa      	beq.n	ba2e8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   ba2f2:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba2f6:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   ba2fa:	e9cd 1203 	strd	r1, r2, [sp, #12]
   ba2fe:	6dac      	ldr	r4, [r5, #88]	; 0x58
   ba300:	aa04      	add	r2, sp, #16
   ba302:	a903      	add	r1, sp, #12
   ba304:	47a0      	blx	r4
}
   ba306:	e7ef      	b.n	ba2e8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   ba308:	000c1684 	.word	0x000c1684
   ba30c:	000c161b 	.word	0x000c161b

000ba310 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   ba310:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   ba312:	2000      	movs	r0, #0
   ba314:	f7fe fe88 	bl	b9028 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   ba318:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   ba31c:	bd08      	pop	{r3, pc}

000ba31e <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   ba31e:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   ba320:	2100      	movs	r1, #0
   ba322:	f7fe be89 	b.w	b9038 <hal_ble_gap_set_tx_power>
	...

000ba328 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   ba328:	b570      	push	{r4, r5, r6, lr}
   ba32a:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   ba32c:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   ba32e:	460e      	mov	r6, r1
   ba330:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   ba332:	f7ff fb3f 	bl	b99b4 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   ba336:	f104 0028 	add.w	r0, r4, #40	; 0x28
   ba33a:	f7ff fb46 	bl	b99ca <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   ba33e:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   ba342:	2200      	movs	r2, #0
   ba344:	4621      	mov	r1, r4
   ba346:	4803      	ldr	r0, [pc, #12]	; (ba354 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   ba348:	f7fe fe8e 	bl	b9068 <hal_ble_gap_start_scan>
   ba34c:	2800      	cmp	r0, #0
        return foundCount_;
   ba34e:	bfa8      	it	ge
   ba350:	6960      	ldrge	r0, [r4, #20]
    }
   ba352:	bd70      	pop	{r4, r5, r6, pc}
   ba354:	000bbccd 	.word	0x000bbccd

000ba358 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   ba358:	b510      	push	{r4, lr}
   ba35a:	4604      	mov	r4, r0
    ::free(ptr);
   ba35c:	6940      	ldr	r0, [r0, #20]
   ba35e:	f7ff fa13 	bl	b9788 <free>
   ba362:	68a0      	ldr	r0, [r4, #8]
   ba364:	f7ff fa10 	bl	b9788 <free>
   ba368:	4620      	mov	r0, r4
   ba36a:	bd10      	pop	{r4, pc}

000ba36c <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   ba36c:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   ba36e:	f647 717f 	movw	r1, #32639	; 0x7f7f
   ba372:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
   ba376:	e9c0 2202 	strd	r2, r2, [r0, #8]
   ba37a:	e9c0 2204 	strd	r2, r2, [r0, #16]
   ba37e:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   ba382:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   ba386:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   ba38a:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   ba38e:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   ba392:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   ba396:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   ba39a:	6202      	str	r2, [r0, #32]
   ba39c:	6302      	str	r2, [r0, #48]	; 0x30
   ba39e:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
   ba3a2:	4770      	bx	lr

000ba3a4 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>:
    std::function<void(const BleScanResult*)> scanResultCallback_;
    BleOnScanResultStdFunction scanResultCallbackRef_;
    BleScanFilter filter_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   ba3a4:	b530      	push	{r4, r5, lr}
   ba3a6:	b085      	sub	sp, #20
    hal_ble_scan_params_t scanParams = {};
   ba3a8:	2400      	movs	r4, #0
    scanParams.size = sizeof(hal_ble_scan_params_t);
   ba3aa:	2310      	movs	r3, #16
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   ba3ac:	460d      	mov	r5, r1
    scanParams.size = sizeof(hal_ble_scan_params_t);
   ba3ae:	f8ad 3002 	strh.w	r3, [sp, #2]
    scanParams.version = BLE_API_VERSION;
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   ba3b2:	4621      	mov	r1, r4
    scanParams.version = BLE_API_VERSION;
   ba3b4:	2303      	movs	r3, #3
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   ba3b6:	4668      	mov	r0, sp
    scanParams.version = BLE_API_VERSION;
   ba3b8:	f8ad 3000 	strh.w	r3, [sp]
    hal_ble_scan_params_t scanParams = {};
   ba3bc:	e9cd 4401 	strd	r4, r4, [sp, #4]
   ba3c0:	9403      	str	r4, [sp, #12]
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   ba3c2:	f7fe fe49 	bl	b9058 <hal_ble_gap_get_scan_parameters>
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   ba3c6:	4621      	mov	r1, r4
   ba3c8:	4668      	mov	r0, sp
    scanParams.timeout = timeout;
   ba3ca:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   ba3ce:	f7fe fe3b 	bl	b9048 <hal_ble_gap_set_scan_parameters>
}
   ba3d2:	b005      	add	sp, #20
   ba3d4:	bd30      	pop	{r4, r5, pc}

000ba3d6 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   ba3d6:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   ba3d8:	69d8      	ldr	r0, [r3, #28]
}
   ba3da:	2800      	cmp	r0, #0
   ba3dc:	bfd4      	ite	le
   ba3de:	2000      	movle	r0, #0
   ba3e0:	2001      	movgt	r0, #1
   ba3e2:	4770      	bx	lr

000ba3e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba3e4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   ba3e6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba3ea:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   ba3ec:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   ba3f0:	42ae      	cmp	r6, r5
   ba3f2:	d004      	beq.n	ba3fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   ba3f4:	4628      	mov	r0, r5
   ba3f6:	f002 fbd9 	bl	bcbac <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   ba3fa:	3510      	adds	r5, #16
   ba3fc:	e7f8      	b.n	ba3f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   ba3fe:	6820      	ldr	r0, [r4, #0]
   ba400:	f7ff f9c2 	bl	b9788 <free>
}
   ba404:	4620      	mov	r0, r4
   ba406:	bd70      	pop	{r4, r5, r6, pc}

000ba408 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba408:	b510      	push	{r4, lr}
   ba40a:	4604      	mov	r4, r0
    ::free(ptr);
   ba40c:	6800      	ldr	r0, [r0, #0]
   ba40e:	f7ff f9bb 	bl	b9788 <free>
}
   ba412:	4620      	mov	r0, r4
   ba414:	bd10      	pop	{r4, pc}

000ba416 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   ba416:	b570      	push	{r4, r5, r6, lr}
   ba418:	4604      	mov	r4, r0
    ::free(ptr);
   ba41a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   ba41c:	f7ff f9b4 	bl	b9788 <free>
   ba420:	6d20      	ldr	r0, [r4, #80]	; 0x50
   ba422:	f7ff f9b1 	bl	b9788 <free>
    }
    ~BleScanFilter() = default;
   ba426:	f104 0538 	add.w	r5, r4, #56	; 0x38
   ba42a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   ba42e:	f7ff ffeb 	bl	ba408 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   ba432:	4628      	mov	r0, r5
   ba434:	f7ff ffd6 	bl	ba3e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   ba438:	f104 0028 	add.w	r0, r4, #40	; 0x28
   ba43c:	f7f9 ff8a 	bl	b4354 <_ZNSt14_Function_baseD1Ev>
   ba440:	f104 0018 	add.w	r0, r4, #24
   ba444:	f7f9 ff86 	bl	b4354 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   ba448:	e9d4 5300 	ldrd	r5, r3, [r4]
   ba44c:	2624      	movs	r6, #36	; 0x24
   ba44e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ba452:	42ae      	cmp	r6, r5
   ba454:	d004      	beq.n	ba460 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   ba456:	4628      	mov	r0, r5
   ba458:	f7ff ff7e 	bl	ba358 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   ba45c:	3524      	adds	r5, #36	; 0x24
   ba45e:	e7f8      	b.n	ba452 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   ba460:	6820      	ldr	r0, [r4, #0]
   ba462:	f7ff f991 	bl	b9788 <free>
   ba466:	4620      	mov	r0, r4
   ba468:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba46c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   ba46c:	b530      	push	{r4, r5, lr}
   ba46e:	4615      	mov	r5, r2
   ba470:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   ba472:	460c      	mov	r4, r1
   ba474:	b179      	cbz	r1, ba496 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   ba476:	b172      	cbz	r2, ba496 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
    BleScanDelegator scanner;
   ba478:	a801      	add	r0, sp, #4
   ba47a:	f7ff ff77 	bl	ba36c <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   ba47e:	4621      	mov	r1, r4
   ba480:	462a      	mov	r2, r5
   ba482:	a801      	add	r0, sp, #4
   ba484:	f7ff ff50 	bl	ba328 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   ba488:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   ba48a:	a801      	add	r0, sp, #4
   ba48c:	f7ff ffc3 	bl	ba416 <_ZN8particle16BleScanDelegatorD1Ev>
}
   ba490:	4620      	mov	r0, r4
   ba492:	b01f      	add	sp, #124	; 0x7c
   ba494:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   ba496:	4c01      	ldr	r4, [pc, #4]	; (ba49c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   ba498:	e7fa      	b.n	ba490 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   ba49a:	bf00      	nop
   ba49c:	fffffef2 	.word	0xfffffef2

000ba4a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   ba4a0:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   ba4a2:	1e14      	subs	r4, r2, #0
   ba4a4:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   ba4a6:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   ba4a8:	db02      	blt.n	ba4b0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   ba4aa:	1862      	adds	r2, r4, r1
   ba4ac:	429a      	cmp	r2, r3
   ba4ae:	dd00      	ble.n	ba4b2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   ba4b0:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   ba4b2:	682a      	ldr	r2, [r5, #0]
   ba4b4:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   ba4b6:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   ba4b8:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba4ba:	1a52      	subs	r2, r2, r1
   ba4bc:	f003 feb9 	bl	be232 <memmove>
    size_ -= n;
   ba4c0:	686a      	ldr	r2, [r5, #4]
   ba4c2:	1b12      	subs	r2, r2, r4
   ba4c4:	606a      	str	r2, [r5, #4]
}
   ba4c6:	bd38      	pop	{r3, r4, r5, pc}

000ba4c8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   ba4c8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   ba4ca:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   ba4cc:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   ba4ce:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba4d0:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   ba4d2:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba4d4:	f7f9 fddf 	bl	b4096 <_Znwj>
   ba4d8:	b118      	cbz	r0, ba4e2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   ba4da:	682b      	ldr	r3, [r5, #0]
   ba4dc:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   ba4de:	686b      	ldr	r3, [r5, #4]
   ba4e0:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   ba4e2:	4b03      	ldr	r3, [pc, #12]	; (ba4f0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   ba4e4:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   ba4e6:	4b03      	ldr	r3, [pc, #12]	; (ba4f4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba4e8:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   ba4ea:	60a3      	str	r3, [r4, #8]
      }
   ba4ec:	4620      	mov	r0, r4
   ba4ee:	bd38      	pop	{r3, r4, r5, pc}
   ba4f0:	000b995d 	.word	0x000b995d
   ba4f4:	000b9975 	.word	0x000b9975

000ba4f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   ba4f8:	680b      	ldr	r3, [r1, #0]
   ba4fa:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   ba4fc:	b113      	cbz	r3, ba504 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   ba4fe:	685a      	ldr	r2, [r3, #4]
   ba500:	3201      	adds	r2, #1
   ba502:	605a      	str	r2, [r3, #4]
      }
   ba504:	4770      	bx	lr

000ba506 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   ba506:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   ba508:	f851 3b04 	ldr.w	r3, [r1], #4
   ba50c:	4604      	mov	r4, r0
   ba50e:	f840 3b04 	str.w	r3, [r0], #4
   ba512:	f7ff fff1 	bl	ba4f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   ba516:	6823      	ldr	r3, [r4, #0]
   ba518:	b90b      	cbnz	r3, ba51e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   ba51a:	f7ff fa15 	bl	b9948 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   ba51e:	4620      	mov	r0, r4
   ba520:	bd10      	pop	{r4, pc}

000ba522 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   ba522:	b510      	push	{r4, lr}
   ba524:	f851 3b04 	ldr.w	r3, [r1], #4
   ba528:	4604      	mov	r4, r0
   ba52a:	f840 3b04 	str.w	r3, [r0], #4
   ba52e:	f7ff ffe3 	bl	ba4f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   ba532:	4620      	mov	r0, r4
   ba534:	bd10      	pop	{r4, pc}

000ba536 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   ba536:	b510      	push	{r4, lr}
   ba538:	f851 3b04 	ldr.w	r3, [r1], #4
   ba53c:	4604      	mov	r4, r0
   ba53e:	f840 3b04 	str.w	r3, [r0], #4
   ba542:	f7ff ffd9 	bl	ba4f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   ba546:	4620      	mov	r0, r4
   ba548:	bd10      	pop	{r4, pc}

000ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   ba54a:	b510      	push	{r4, lr}
   ba54c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   ba54e:	6800      	ldr	r0, [r0, #0]
   ba550:	b108      	cbz	r0, ba556 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   ba552:	f7f9 ff3d 	bl	b43d0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   ba556:	4620      	mov	r0, r4
   ba558:	bd10      	pop	{r4, pc}

000ba55a <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   ba55a:	b510      	push	{r4, lr}
   ba55c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   ba55e:	3004      	adds	r0, #4
   ba560:	f7ff fff3 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba564:	4620      	mov	r0, r4
   ba566:	bd10      	pop	{r4, pc}

000ba568 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba568:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   ba56a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba56e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   ba570:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   ba574:	42ae      	cmp	r6, r5
   ba576:	d004      	beq.n	ba582 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   ba578:	1d28      	adds	r0, r5, #4
   ba57a:	f7ff ffe6 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba57e:	3508      	adds	r5, #8
   ba580:	e7f8      	b.n	ba574 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   ba582:	6820      	ldr	r0, [r4, #0]
   ba584:	f7ff f900 	bl	b9788 <free>
}
   ba588:	4620      	mov	r0, r4
   ba58a:	bd70      	pop	{r4, r5, r6, pc}

000ba58c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba58c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   ba58e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba592:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   ba594:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   ba598:	42ae      	cmp	r6, r5
   ba59a:	d004      	beq.n	ba5a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   ba59c:	1d28      	adds	r0, r5, #4
   ba59e:	f7ff ffd4 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba5a2:	3508      	adds	r5, #8
   ba5a4:	e7f8      	b.n	ba598 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   ba5a6:	6820      	ldr	r0, [r4, #0]
   ba5a8:	f7ff f8ee 	bl	b9788 <free>
}
   ba5ac:	4620      	mov	r0, r4
   ba5ae:	bd70      	pop	{r4, r5, r6, pc}

000ba5b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   ba5b0:	b510      	push	{r4, lr}
   ba5b2:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   ba5b4:	3024      	adds	r0, #36	; 0x24
   ba5b6:	f7ff ffe9 	bl	ba58c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   ba5ba:	f104 0018 	add.w	r0, r4, #24
   ba5be:	f7ff ffd3 	bl	ba568 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   ba5c2:	bd10      	pop	{r4, pc}

000ba5c4 <__tcf_0>:
    static BleLocalDevice instance;
   ba5c4:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   ba5c6:	4b17      	ldr	r3, [pc, #92]	; (ba624 <__tcf_0+0x60>)
   ba5c8:	681c      	ldr	r4, [r3, #0]
   ba5ca:	b354      	cbz	r4, ba622 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   ba5cc:	f104 0054 	add.w	r0, r4, #84	; 0x54
   ba5d0:	f7f9 fec0 	bl	b4354 <_ZNSt14_Function_baseD1Ev>
   ba5d4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   ba5d8:	f7f9 febc 	bl	b4354 <_ZNSt14_Function_baseD1Ev>
   ba5dc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   ba5e0:	f7f9 feb8 	bl	b4354 <_ZNSt14_Function_baseD1Ev>
   ba5e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   ba5e8:	f7f9 feb4 	bl	b4354 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   ba5ec:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   ba5f0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   ba5f4:	42ae      	cmp	r6, r5
   ba5f6:	d004      	beq.n	ba602 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   ba5f8:	1d28      	adds	r0, r5, #4
   ba5fa:	f7ff ffa6 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba5fe:	3508      	adds	r5, #8
   ba600:	e7f8      	b.n	ba5f4 <__tcf_0+0x30>
    ::free(ptr);
   ba602:	69a0      	ldr	r0, [r4, #24]
   ba604:	f7ff f8c0 	bl	b9788 <free>
    ~BleLocalDeviceImpl() = default;
   ba608:	f104 000c 	add.w	r0, r4, #12
   ba60c:	f7ff ffbe 	bl	ba58c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   ba610:	4620      	mov	r0, r4
   ba612:	f7ff ffa9 	bl	ba568 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   ba616:	4620      	mov	r0, r4
   ba618:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   ba61a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba61e:	f7f9 bd3e 	b.w	b409e <_ZdlPvj>
   ba622:	bd70      	pop	{r4, r5, r6, pc}
   ba624:	2003e65c 	.word	0x2003e65c

000ba628 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   ba628:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   ba62a:	b510      	push	{r4, lr}
      if (_M_empty())
   ba62c:	b90a      	cbnz	r2, ba632 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   ba62e:	f002 ff49 	bl	bd4c4 <_ZSt25__throw_bad_function_callv>
    }
   ba632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba636:	68c3      	ldr	r3, [r0, #12]
   ba638:	4718      	bx	r3

000ba63a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba63a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   ba63e:	2300      	movs	r3, #0
   ba640:	e9c0 3300 	strd	r3, r3, [r0]
   ba644:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba646:	f8d1 8004 	ldr.w	r8, [r1, #4]
   ba64a:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba64c:	4605      	mov	r5, r0
   ba64e:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba650:	dd4a      	ble.n	ba6e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   ba652:	ea4f 1008 	mov.w	r0, r8, lsl #4
   ba656:	f7ff f88f 	bl	b9778 <malloc>
            if (!d) {
   ba65a:	4606      	mov	r6, r0
   ba65c:	2800      	cmp	r0, #0
   ba65e:	d043      	beq.n	ba6e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   ba660:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   ba664:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   ba666:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   ba66a:	d916      	bls.n	ba69a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   ba66c:	4550      	cmp	r0, sl
   ba66e:	d215      	bcs.n	ba69c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   ba670:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   ba674:	f1a4 0910 	sub.w	r9, r4, #16
   ba678:	ebaa 0404 	sub.w	r4, sl, r4
   ba67c:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   ba67e:	45d1      	cmp	r9, sl
   ba680:	d01d      	beq.n	ba6be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   ba682:	b11c      	cbz	r4, ba68c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   ba684:	4651      	mov	r1, sl
   ba686:	4620      	mov	r0, r4
   ba688:	f002 fb0c 	bl	bcca4 <_ZN6StringC1EOS_>
                end->~T();
   ba68c:	4650      	mov	r0, sl
   ba68e:	f002 fa8d 	bl	bcbac <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   ba692:	f1aa 0a10 	sub.w	sl, sl, #16
   ba696:	3c10      	subs	r4, #16
   ba698:	e7f1      	b.n	ba67e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   ba69a:	d010      	beq.n	ba6be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   ba69c:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   ba69e:	45a2      	cmp	sl, r4
   ba6a0:	d00d      	beq.n	ba6be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   ba6a2:	f1b9 0f00 	cmp.w	r9, #0
   ba6a6:	d003      	beq.n	ba6b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   ba6a8:	4621      	mov	r1, r4
   ba6aa:	4648      	mov	r0, r9
   ba6ac:	f002 fafa 	bl	bcca4 <_ZN6StringC1EOS_>
                p->~T();
   ba6b0:	4620      	mov	r0, r4
   ba6b2:	f002 fa7b 	bl	bcbac <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   ba6b6:	3410      	adds	r4, #16
   ba6b8:	f109 0910 	add.w	r9, r9, #16
   ba6bc:	e7ef      	b.n	ba69e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   ba6be:	6828      	ldr	r0, [r5, #0]
   ba6c0:	f7ff f862 	bl	b9788 <free>
        capacity_ = n;
   ba6c4:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   ba6c8:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba6ca:	e9d7 4300 	ldrd	r4, r3, [r7]
   ba6ce:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   ba6d2:	45a0      	cmp	r8, r4
   ba6d4:	d006      	beq.n	ba6e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   ba6d6:	4621      	mov	r1, r4
   ba6d8:	4630      	mov	r0, r6
   ba6da:	f002 fafd 	bl	bccd8 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   ba6de:	3410      	adds	r4, #16
   ba6e0:	3610      	adds	r6, #16
   ba6e2:	e7f6      	b.n	ba6d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   ba6e4:	687b      	ldr	r3, [r7, #4]
   ba6e6:	606b      	str	r3, [r5, #4]
}
   ba6e8:	4628      	mov	r0, r5
   ba6ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000ba6ee <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   ba6ee:	b530      	push	{r4, r5, lr}
   ba6f0:	b08d      	sub	sp, #52	; 0x34
   ba6f2:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   ba6f4:	f100 0138 	add.w	r1, r0, #56	; 0x38
   ba6f8:	a801      	add	r0, sp, #4
   ba6fa:	f7ff ff9e 	bl	ba63a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   ba6fe:	9b02      	ldr	r3, [sp, #8]
   ba700:	2b00      	cmp	r3, #0
   ba702:	dd2f      	ble.n	ba764 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   ba704:	f104 0114 	add.w	r1, r4, #20
   ba708:	a804      	add	r0, sp, #16
   ba70a:	f7ff fbb5 	bl	b9e78 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   ba70e:	f104 0108 	add.w	r1, r4, #8
   ba712:	a808      	add	r0, sp, #32
   ba714:	f7ff fbb0 	bl	b9e78 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   ba718:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   ba71a:	9b06      	ldr	r3, [sp, #24]
   ba71c:	4313      	orrs	r3, r2
   ba71e:	d01f      	beq.n	ba760 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   ba720:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   ba724:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   ba728:	42ac      	cmp	r4, r5
   ba72a:	d019      	beq.n	ba760 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   ba72c:	a904      	add	r1, sp, #16
   ba72e:	4620      	mov	r0, r4
   ba730:	f002 fb28 	bl	bcd84 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   ba734:	b160      	cbz	r0, ba750 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   ba736:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   ba738:	a808      	add	r0, sp, #32
   ba73a:	f002 fa37 	bl	bcbac <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   ba73e:	a804      	add	r0, sp, #16
   ba740:	f002 fa34 	bl	bcbac <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   ba744:	a801      	add	r0, sp, #4
   ba746:	f7ff fe4d 	bl	ba3e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   ba74a:	4620      	mov	r0, r4
   ba74c:	b00d      	add	sp, #52	; 0x34
   ba74e:	bd30      	pop	{r4, r5, pc}
   ba750:	4620      	mov	r0, r4
   ba752:	a908      	add	r1, sp, #32
   ba754:	f002 fb16 	bl	bcd84 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   ba758:	3410      	adds	r4, #16
   ba75a:	2800      	cmp	r0, #0
   ba75c:	d0e4      	beq.n	ba728 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   ba75e:	e7ea      	b.n	ba736 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   ba760:	2400      	movs	r4, #0
   ba762:	e7e9      	b.n	ba738 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   ba764:	2401      	movs	r4, #1
   ba766:	e7ed      	b.n	ba744 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000ba768 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   ba76a:	2300      	movs	r3, #0
   ba76c:	e9c0 3300 	strd	r3, r3, [r0]
   ba770:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba772:	684f      	ldr	r7, [r1, #4]
   ba774:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba776:	4605      	mov	r5, r0
   ba778:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba77a:	dd3e      	ble.n	ba7fa <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   ba77c:	00f8      	lsls	r0, r7, #3
   ba77e:	f7fe fffb 	bl	b9778 <malloc>
            if (!d) {
   ba782:	4604      	mov	r4, r0
   ba784:	b3c8      	cbz	r0, ba7fa <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   ba786:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   ba78a:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   ba78c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   ba790:	d910      	bls.n	ba7b4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   ba792:	429c      	cmp	r4, r3
   ba794:	d20f      	bcs.n	ba7b6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   ba796:	3b08      	subs	r3, #8
            dest += end - p - 1;
   ba798:	1a1a      	subs	r2, r3, r0
   ba79a:	f1a0 0c08 	sub.w	ip, r0, #8
   ba79e:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   ba7a0:	459c      	cmp	ip, r3
   ba7a2:	d018      	beq.n	ba7d6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   ba7a4:	b11a      	cbz	r2, ba7ae <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   ba7a6:	6819      	ldr	r1, [r3, #0]
   ba7a8:	6011      	str	r1, [r2, #0]
   ba7aa:	6859      	ldr	r1, [r3, #4]
   ba7ac:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   ba7ae:	3b08      	subs	r3, #8
   ba7b0:	3a08      	subs	r2, #8
   ba7b2:	e7f5      	b.n	ba7a0 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   ba7b4:	d00f      	beq.n	ba7d6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   ba7b6:	4601      	mov	r1, r0
   ba7b8:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   ba7ba:	428b      	cmp	r3, r1
   ba7bc:	d00b      	beq.n	ba7d6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   ba7be:	b13a      	cbz	r2, ba7d0 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   ba7c0:	f8d1 c000 	ldr.w	ip, [r1]
   ba7c4:	f8c2 c000 	str.w	ip, [r2]
   ba7c8:	f8d1 c004 	ldr.w	ip, [r1, #4]
   ba7cc:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   ba7d0:	3108      	adds	r1, #8
   ba7d2:	3208      	adds	r2, #8
   ba7d4:	e7f1      	b.n	ba7ba <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   ba7d6:	f7fe ffd7 	bl	b9788 <free>
        data_ = d;
   ba7da:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   ba7dc:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba7de:	e9d6 3100 	ldrd	r3, r1, [r6]
   ba7e2:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   ba7e6:	4298      	cmp	r0, r3
   ba7e8:	d006      	beq.n	ba7f8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   ba7ea:	681a      	ldr	r2, [r3, #0]
   ba7ec:	6022      	str	r2, [r4, #0]
   ba7ee:	685a      	ldr	r2, [r3, #4]
   ba7f0:	6062      	str	r2, [r4, #4]
   ba7f2:	3308      	adds	r3, #8
   ba7f4:	3408      	adds	r4, #8
   ba7f6:	e7f6      	b.n	ba7e6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   ba7f8:	6069      	str	r1, [r5, #4]
}
   ba7fa:	4628      	mov	r0, r5
   ba7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba7fe <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba7fe:	b570      	push	{r4, r5, r6, lr}
   ba800:	4604      	mov	r4, r0
        capacity_(0) {
   ba802:	2000      	movs	r0, #0
   ba804:	e9c4 0000 	strd	r0, r0, [r4]
   ba808:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba80a:	684e      	ldr	r6, [r1, #4]
   ba80c:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba80e:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba810:	dd12      	ble.n	ba838 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   ba812:	0071      	lsls	r1, r6, #1
   ba814:	f7fe ffc0 	bl	b9798 <realloc>
            if (!d) {
   ba818:	b170      	cbz	r0, ba838 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   ba81a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   ba81c:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba81e:	e9d5 3200 	ldrd	r3, r2, [r5]
   ba822:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   ba826:	429a      	cmp	r2, r3
   ba828:	d004      	beq.n	ba834 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   ba82a:	f833 1b02 	ldrh.w	r1, [r3], #2
   ba82e:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   ba832:	e7f8      	b.n	ba826 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   ba834:	686b      	ldr	r3, [r5, #4]
   ba836:	6063      	str	r3, [r4, #4]
}
   ba838:	4620      	mov	r0, r4
   ba83a:	bd70      	pop	{r4, r5, r6, pc}

000ba83c <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   ba83c:	b510      	push	{r4, lr}
        if (!dismissed_) {
   ba83e:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   ba840:	4604      	mov	r4, r0
        if (!dismissed_) {
   ba842:	b923      	cbnz	r3, ba84e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   ba844:	6803      	ldr	r3, [r0, #0]
   ba846:	6818      	ldr	r0, [r3, #0]
   ba848:	b108      	cbz	r0, ba84e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   ba84a:	f7fe ff9d 	bl	b9788 <free>
            func_();
        }
    }
   ba84e:	4620      	mov	r0, r4
   ba850:	bd10      	pop	{r4, pc}

000ba852 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   ba852:	b510      	push	{r4, lr}
        if (!dismissed_) {
   ba854:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   ba856:	4604      	mov	r4, r0
        if (!dismissed_) {
   ba858:	b923      	cbnz	r3, ba864 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   ba85a:	6803      	ldr	r3, [r0, #0]
   ba85c:	6818      	ldr	r0, [r3, #0]
   ba85e:	b108      	cbz	r0, ba864 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   ba860:	f7fe ff92 	bl	b9788 <free>
    }
   ba864:	4620      	mov	r0, r4
   ba866:	bd10      	pop	{r4, pc}

000ba868 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   ba868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   ba86c:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   ba870:	b08f      	sub	sp, #60	; 0x3c
   ba872:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   ba874:	f1b8 0f00 	cmp.w	r8, #0
   ba878:	d072      	beq.n	ba960 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   ba87a:	6f05      	ldr	r5, [r0, #112]	; 0x70
   ba87c:	2d00      	cmp	r5, #0
   ba87e:	d06f      	beq.n	ba960 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   ba880:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   ba884:	231f      	movs	r3, #31
   ba886:	2200      	movs	r2, #0
   ba888:	21ff      	movs	r1, #255	; 0xff
   ba88a:	4648      	mov	r0, r9
   ba88c:	f7ff fac1 	bl	b9e12 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   ba890:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   ba892:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   ba894:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   ba896:	2200      	movs	r2, #0
   ba898:	4619      	mov	r1, r3
   ba89a:	4638      	mov	r0, r7
   ba89c:	f7ff fab9 	bl	b9e12 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   ba8a0:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   ba8a2:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   ba8a4:	d006      	beq.n	ba8b4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   ba8a6:	42ae      	cmp	r6, r5
   ba8a8:	d030      	beq.n	ba90c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   ba8aa:	2400      	movs	r4, #0
    }
   ba8ac:	4620      	mov	r0, r4
   ba8ae:	b00f      	add	sp, #60	; 0x3c
   ba8b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   ba8b4:	4620      	mov	r0, r4
   ba8b6:	f7fe ff5f 	bl	b9778 <malloc>
            dismissed_(false) {
   ba8ba:	ab03      	add	r3, sp, #12
   ba8bc:	9304      	str	r3, [sp, #16]
   ba8be:	2300      	movs	r3, #0
   ba8c0:	4604      	mov	r4, r0
   ba8c2:	9003      	str	r0, [sp, #12]
   ba8c4:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   ba8c8:	b970      	cbnz	r0, ba8e8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   ba8ca:	2320      	movs	r3, #32
   ba8cc:	e9cd 3006 	strd	r3, r0, [sp, #24]
   ba8d0:	4b24      	ldr	r3, [pc, #144]	; (ba964 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   ba8d2:	9300      	str	r3, [sp, #0]
   ba8d4:	4924      	ldr	r1, [pc, #144]	; (ba968 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   ba8d6:	4603      	mov	r3, r0
   ba8d8:	aa06      	add	r2, sp, #24
   ba8da:	2032      	movs	r0, #50	; 0x32
   ba8dc:	f7fe fe70 	bl	b95c0 <log_message>
                    return false;
   ba8e0:	a804      	add	r0, sp, #16
   ba8e2:	f7ff ffab 	bl	ba83c <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   ba8e6:	e7e1      	b.n	ba8ac <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   ba8e8:	4602      	mov	r2, r0
   ba8ea:	21ff      	movs	r1, #255	; 0xff
   ba8ec:	462b      	mov	r3, r5
   ba8ee:	4648      	mov	r0, r9
   ba8f0:	f7ff fa8f 	bl	b9e12 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   ba8f4:	9803      	ldr	r0, [sp, #12]
   ba8f6:	462a      	mov	r2, r5
   ba8f8:	4641      	mov	r1, r8
   ba8fa:	f003 fc7c 	bl	be1f6 <memcmp>
   ba8fe:	b118      	cbz	r0, ba908 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   ba900:	a804      	add	r0, sp, #16
   ba902:	f7ff ff9b 	bl	ba83c <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   ba906:	e7ce      	b.n	ba8a6 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   ba908:	2401      	movs	r4, #1
   ba90a:	e7e9      	b.n	ba8e0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   ba90c:	4628      	mov	r0, r5
   ba90e:	f7fe ff33 	bl	b9778 <malloc>
   ba912:	2400      	movs	r4, #0
   ba914:	ab03      	add	r3, sp, #12
   ba916:	4606      	mov	r6, r0
   ba918:	9003      	str	r0, [sp, #12]
   ba91a:	9304      	str	r3, [sp, #16]
   ba91c:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   ba920:	b978      	cbnz	r0, ba942 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   ba922:	2320      	movs	r3, #32
   ba924:	e9cd 3006 	strd	r3, r0, [sp, #24]
   ba928:	4b0e      	ldr	r3, [pc, #56]	; (ba964 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   ba92a:	9300      	str	r3, [sp, #0]
   ba92c:	490e      	ldr	r1, [pc, #56]	; (ba968 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   ba92e:	4603      	mov	r3, r0
   ba930:	aa06      	add	r2, sp, #24
   ba932:	2032      	movs	r0, #50	; 0x32
   ba934:	f7fe fe44 	bl	b95c0 <log_message>
                    return false;
   ba938:	4634      	mov	r4, r6
   ba93a:	a804      	add	r0, sp, #16
   ba93c:	f7ff ff89 	bl	ba852 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   ba940:	e7b4      	b.n	ba8ac <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   ba942:	4602      	mov	r2, r0
   ba944:	21ff      	movs	r1, #255	; 0xff
   ba946:	462b      	mov	r3, r5
   ba948:	4638      	mov	r0, r7
   ba94a:	f7ff fa62 	bl	b9e12 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   ba94e:	9803      	ldr	r0, [sp, #12]
   ba950:	462a      	mov	r2, r5
   ba952:	4641      	mov	r1, r8
   ba954:	f003 fc4f 	bl	be1f6 <memcmp>
   ba958:	2800      	cmp	r0, #0
   ba95a:	d1ee      	bne.n	ba93a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   ba95c:	2401      	movs	r4, #1
   ba95e:	e7ec      	b.n	ba93a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   ba960:	2401      	movs	r4, #1
   ba962:	e7a3      	b.n	ba8ac <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   ba964:	000c169c 	.word	0x000c169c
   ba968:	000c161b 	.word	0x000c161b

000ba96c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   ba96c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   ba96e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   ba970:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   ba972:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   ba974:	dd03      	ble.n	ba97e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   ba976:	f7fe ff0f 	bl	b9798 <realloc>
            if (!d) {
   ba97a:	b918      	cbnz	r0, ba984 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   ba97c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   ba97e:	f7fe ff03 	bl	b9788 <free>
        T* d = nullptr;
   ba982:	2000      	movs	r0, #0
        data_ = d;
   ba984:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   ba986:	60a5      	str	r5, [r4, #8]
        return true;
   ba988:	2001      	movs	r0, #1
   ba98a:	e7f7      	b.n	ba97c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000ba98c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   ba98c:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   ba98e:	6883      	ldr	r3, [r0, #8]
   ba990:	428b      	cmp	r3, r1
   ba992:	da02      	bge.n	ba99a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   ba994:	f7ff ffea 	bl	ba96c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   ba998:	bd08      	pop	{r3, pc}
    return true;
   ba99a:	2001      	movs	r0, #1
   ba99c:	e7fc      	b.n	ba998 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000ba99e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba99e:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   ba9a0:	2300      	movs	r3, #0
   ba9a2:	e9c0 3300 	strd	r3, r3, [r0]
   ba9a6:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba9a8:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba9aa:	6849      	ldr	r1, [r1, #4]
   ba9ac:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba9ae:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba9b0:	dd10      	ble.n	ba9d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   ba9b2:	f7ff ffdb 	bl	ba96c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   ba9b6:	b168      	cbz	r0, ba9d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba9b8:	e9d5 3100 	ldrd	r3, r1, [r5]
   ba9bc:	6822      	ldr	r2, [r4, #0]
   ba9be:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   ba9c0:	4299      	cmp	r1, r3
   ba9c2:	d005      	beq.n	ba9d0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   ba9c4:	b10a      	cbz	r2, ba9ca <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   ba9c6:	7818      	ldrb	r0, [r3, #0]
   ba9c8:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   ba9ca:	3301      	adds	r3, #1
   ba9cc:	3201      	adds	r2, #1
   ba9ce:	e7f7      	b.n	ba9c0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   ba9d0:	686b      	ldr	r3, [r5, #4]
   ba9d2:	6063      	str	r3, [r4, #4]
}
   ba9d4:	4620      	mov	r0, r4
   ba9d6:	bd38      	pop	{r3, r4, r5, pc}

000ba9d8 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   ba9d8:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   ba9da:	680b      	ldr	r3, [r1, #0]
   ba9dc:	6003      	str	r3, [r0, #0]
   ba9de:	684b      	ldr	r3, [r1, #4]
   ba9e0:	6043      	str	r3, [r0, #4]
   ba9e2:	4604      	mov	r4, r0
   ba9e4:	460d      	mov	r5, r1
class BleAdvertisingData {
   ba9e6:	3008      	adds	r0, #8
   ba9e8:	3108      	adds	r1, #8
   ba9ea:	f7ff ffd8 	bl	ba99e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   ba9ee:	f105 0114 	add.w	r1, r5, #20
   ba9f2:	f104 0014 	add.w	r0, r4, #20
   ba9f6:	f7ff ffd2 	bl	ba99e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   ba9fa:	f895 3020 	ldrb.w	r3, [r5, #32]
   ba9fe:	f884 3020 	strb.w	r3, [r4, #32]
   baa02:	4620      	mov	r0, r4
   baa04:	bd38      	pop	{r3, r4, r5, pc}

000baa06 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   baa06:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   baa08:	4604      	mov	r4, r0
   baa0a:	a801      	add	r0, sp, #4
   baa0c:	f7ff ffc7 	bl	ba99e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
      __a = _GLIBCXX_MOVE(__b);
   baa10:	9b01      	ldr	r3, [sp, #4]
   baa12:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   baa14:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   baa16:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   baa18:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   baa1a:	6062      	str	r2, [r4, #4]
   baa1c:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   baa1e:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   baa20:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   baa22:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   baa24:	9001      	str	r0, [sp, #4]
   baa26:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   baa28:	f7fe feae 	bl	b9788 <free>
   baa2c:	b004      	add	sp, #16
   baa2e:	bd10      	pop	{r4, pc}

000baa30 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   baa30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   baa34:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   baa36:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   baa38:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   baa3a:	4419      	add	r1, r3
   baa3c:	6883      	ldr	r3, [r0, #8]
   baa3e:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   baa40:	4604      	mov	r4, r0
   baa42:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   baa44:	dc12      	bgt.n	baa6c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   baa46:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   baa48:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   baa4a:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   baa4c:	1bd2      	subs	r2, r2, r7
   baa4e:	4631      	mov	r1, r6
   baa50:	1970      	adds	r0, r6, r5
   baa52:	f003 fbee 	bl	be232 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   baa56:	462a      	mov	r2, r5
   baa58:	4641      	mov	r1, r8
   baa5a:	4630      	mov	r0, r6
   baa5c:	f003 fbdb 	bl	be216 <memcpy>
    size_ += n;
   baa60:	6863      	ldr	r3, [r4, #4]
   baa62:	442b      	add	r3, r5
   baa64:	6063      	str	r3, [r4, #4]
    return true;
   baa66:	2001      	movs	r0, #1
}
   baa68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   baa6c:	f7ff ff7e 	bl	ba96c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   baa70:	2800      	cmp	r0, #0
   baa72:	d1e8      	bne.n	baa46 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   baa74:	e7f8      	b.n	baa68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000baa76 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   baa76:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   baa78:	460a      	mov	r2, r1
   baa7a:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   baa7c:	b510      	push	{r4, lr}
   baa7e:	4604      	mov	r4, r0
    size_ = 0;
   baa80:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   baa82:	b102      	cbz	r2, baa86 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   baa84:	b90b      	cbnz	r3, baa8a <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   baa86:	2000      	movs	r0, #0
}
   baa88:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   baa8a:	2bff      	cmp	r3, #255	; 0xff
   baa8c:	bf28      	it	cs
   baa8e:	23ff      	movcs	r3, #255	; 0xff
   baa90:	f7ff ffce 	bl	baa30 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   baa94:	2800      	cmp	r0, #0
   baa96:	d0f7      	beq.n	baa88 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   baa98:	6860      	ldr	r0, [r4, #4]
   baa9a:	e7f5      	b.n	baa88 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000baa9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   baa9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baa9e:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   baaa0:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   baaa4:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   baaa6:	4604      	mov	r4, r0
   baaa8:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   baaaa:	da0b      	bge.n	baac4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   baaac:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   baaae:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   baab0:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   baab2:	1b52      	subs	r2, r2, r5
   baab4:	1c48      	adds	r0, r1, #1
   baab6:	f003 fbbc 	bl	be232 <memmove>
    new(p) T(std::move(value));
   baaba:	557e      	strb	r6, [r7, r5]
    ++size_;
   baabc:	6863      	ldr	r3, [r4, #4]
   baabe:	3301      	adds	r3, #1
   baac0:	6063      	str	r3, [r4, #4]
}
   baac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   baac4:	3101      	adds	r1, #1
   baac6:	f7ff ff51 	bl	ba96c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   baaca:	2800      	cmp	r0, #0
   baacc:	d1ee      	bne.n	baaac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   baace:	e7f8      	b.n	baac2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000baad0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   baad0:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   baad2:	6841      	ldr	r1, [r0, #4]
   baad4:	f7ff bfe2 	b.w	baa9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000baad8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   baad8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   baadc:	4604      	mov	r4, r0
   baade:	461d      	mov	r5, r3
   baae0:	460f      	mov	r7, r1
   baae2:	ab01      	add	r3, sp, #4
   baae4:	4690      	mov	r8, r2
   baae6:	460a      	mov	r2, r1
   baae8:	e9d0 0100 	ldrd	r0, r1, [r0]
   baaec:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   baaf0:	f7fe ff14 	bl	b991c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   baaf4:	1cae      	adds	r6, r5, #2
   baaf6:	6863      	ldr	r3, [r4, #4]
   baaf8:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   baafa:	f1b9 0f00 	cmp.w	r9, #0
   baafe:	d126      	bne.n	bab4e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   bab00:	b328      	cbz	r0, bab4e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bab02:	4433      	add	r3, r6
   bab04:	1a1b      	subs	r3, r3, r0
   bab06:	2bff      	cmp	r3, #255	; 0xff
   bab08:	d809      	bhi.n	bab1e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   bab0a:	9901      	ldr	r1, [sp, #4]
   bab0c:	4620      	mov	r0, r4
   bab0e:	f7ff fcc7 	bl	ba4a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bab12:	6861      	ldr	r1, [r4, #4]
   bab14:	4620      	mov	r0, r4
   bab16:	4431      	add	r1, r6
   bab18:	f7ff ff38 	bl	ba98c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bab1c:	b918      	cbnz	r0, bab26 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   bab1e:	6860      	ldr	r0, [r4, #4]
}
   bab20:	b003      	add	sp, #12
   bab22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   bab26:	1c6a      	adds	r2, r5, #1
   bab28:	9901      	ldr	r1, [sp, #4]
   bab2a:	b2d2      	uxtb	r2, r2
   bab2c:	4620      	mov	r0, r4
   bab2e:	f7ff ffb5 	bl	baa9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   bab32:	9901      	ldr	r1, [sp, #4]
   bab34:	463a      	mov	r2, r7
   bab36:	3101      	adds	r1, #1
   bab38:	4620      	mov	r0, r4
   bab3a:	f7ff ffaf 	bl	baa9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   bab3e:	9901      	ldr	r1, [sp, #4]
   bab40:	462b      	mov	r3, r5
   bab42:	4642      	mov	r2, r8
   bab44:	3102      	adds	r1, #2
    return insert(size_, values, n);
   bab46:	4620      	mov	r0, r4
   bab48:	f7ff ff72 	bl	baa30 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   bab4c:	e7e7      	b.n	bab1e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bab4e:	18f1      	adds	r1, r6, r3
   bab50:	29ff      	cmp	r1, #255	; 0xff
   bab52:	d8e4      	bhi.n	bab1e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bab54:	4620      	mov	r0, r4
   bab56:	f7ff ff19 	bl	ba98c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bab5a:	2800      	cmp	r0, #0
   bab5c:	d0df      	beq.n	bab1e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   bab5e:	1c69      	adds	r1, r5, #1
   bab60:	b2c9      	uxtb	r1, r1
   bab62:	4620      	mov	r0, r4
   bab64:	f7ff ffb4 	bl	baad0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   bab68:	4639      	mov	r1, r7
   bab6a:	4620      	mov	r0, r4
   bab6c:	f7ff ffb0 	bl	baad0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   bab70:	6861      	ldr	r1, [r4, #4]
   bab72:	462b      	mov	r3, r5
   bab74:	4642      	mov	r2, r8
   bab76:	e7e6      	b.n	bab46 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000bab78 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bab78:	b430      	push	{r4, r5}
   bab7a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   bab7e:	b11a      	cbz	r2, bab88 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   bab80:	9502      	str	r5, [sp, #8]
}
   bab82:	bc30      	pop	{r4, r5}
   bab84:	f7ff bfa8 	b.w	baad8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   bab88:	6840      	ldr	r0, [r0, #4]
}
   bab8a:	bc30      	pop	{r4, r5}
   bab8c:	4770      	bx	lr

000bab8e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   bab8e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   bab90:	2300      	movs	r3, #0
   bab92:	e9c0 3300 	strd	r3, r3, [r0]
   bab96:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bab98:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bab9a:	9300      	str	r3, [sp, #0]
   bab9c:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bab9e:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   baba2:	4619      	mov	r1, r3
   baba4:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   baba8:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   babaa:	f7ff ffe5 	bl	bab78 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   babae:	4620      	mov	r0, r4
   babb0:	b004      	add	sp, #16
   babb2:	bd10      	pop	{r4, pc}

000babb4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   babb4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   babb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   babb8:	4604      	mov	r4, r0
   babba:	460d      	mov	r5, r1
   babbc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   babbe:	d914      	bls.n	babea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   babc0:	4290      	cmp	r0, r2
   babc2:	d213      	bcs.n	babec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   babc4:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   babc8:	1a75      	subs	r5, r6, r1
   babca:	f1a1 0708 	sub.w	r7, r1, #8
   babce:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   babd0:	42b7      	cmp	r7, r6
   babd2:	d018      	beq.n	bac06 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   babd4:	b11c      	cbz	r4, babde <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   babd6:	4631      	mov	r1, r6
   babd8:	4620      	mov	r0, r4
   babda:	f7ff fcac 	bl	ba536 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   babde:	1d30      	adds	r0, r6, #4
   babe0:	f7ff fcb3 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   babe4:	3e08      	subs	r6, #8
   babe6:	3c08      	subs	r4, #8
   babe8:	e7f2      	b.n	babd0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   babea:	d00c      	beq.n	bac06 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   babec:	42b5      	cmp	r5, r6
   babee:	d00a      	beq.n	bac06 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   babf0:	b11c      	cbz	r4, babfa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   babf2:	4629      	mov	r1, r5
   babf4:	4620      	mov	r0, r4
   babf6:	f7ff fc9e 	bl	ba536 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   babfa:	1d28      	adds	r0, r5, #4
   babfc:	f7ff fca5 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bac00:	3508      	adds	r5, #8
   bac02:	3408      	adds	r4, #8
   bac04:	e7f2      	b.n	babec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bac06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bac08 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bac08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bac0a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bac0c:	6846      	ldr	r6, [r0, #4]
   bac0e:	4668      	mov	r0, sp
   bac10:	f7ff fc91 	bl	ba536 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bac14:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   bac18:	429f      	cmp	r7, r3
   bac1a:	db12      	blt.n	bac42 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   bac1c:	3701      	adds	r7, #1
        if (n > 0) {
   bac1e:	2f00      	cmp	r7, #0
   bac20:	dd29      	ble.n	bac76 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   bac22:	00f8      	lsls	r0, r7, #3
   bac24:	f7fe fda8 	bl	b9778 <malloc>
            if (!d) {
   bac28:	4605      	mov	r5, r0
   bac2a:	b1f0      	cbz	r0, bac6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   bac2c:	e9d4 1200 	ldrd	r1, r2, [r4]
   bac30:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bac34:	f7ff ffbe 	bl	babb4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bac38:	6820      	ldr	r0, [r4, #0]
   bac3a:	f7fe fda5 	bl	b9788 <free>
        data_ = d;
   bac3e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   bac40:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bac42:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bac44:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bac46:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   bac4a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bac4e:	4631      	mov	r1, r6
   bac50:	f106 0008 	add.w	r0, r6, #8
   bac54:	f7ff ffae 	bl	babb4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bac58:	b11e      	cbz	r6, bac62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   bac5a:	4669      	mov	r1, sp
   bac5c:	4630      	mov	r0, r6
   bac5e:	f7ff fc6a 	bl	ba536 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   bac62:	6863      	ldr	r3, [r4, #4]
   bac64:	3301      	adds	r3, #1
   bac66:	6063      	str	r3, [r4, #4]
    return true;
   bac68:	2501      	movs	r5, #1
   bac6a:	a801      	add	r0, sp, #4
   bac6c:	f7ff fc6d 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bac70:	4628      	mov	r0, r5
   bac72:	b003      	add	sp, #12
   bac74:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   bac76:	2500      	movs	r5, #0
   bac78:	e7de      	b.n	bac38 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000bac7a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bac7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   bac7c:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bac80:	4605      	mov	r5, r0
   bac82:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   bac84:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   bac88:	42a6      	cmp	r6, r4
   bac8a:	d005      	beq.n	bac98 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   bac8c:	4639      	mov	r1, r7
   bac8e:	4620      	mov	r0, r4
   bac90:	f7ff fa9d 	bl	ba1ce <_ZNK8particle13BlePeerDeviceeqERKS0_>
   bac94:	b108      	cbz	r0, bac9a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   bac96:	b914      	cbnz	r4, bac9e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   bac98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   bac9a:	3408      	adds	r4, #8
   bac9c:	e7f4      	b.n	bac88 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   bac9e:	1d20      	adds	r0, r4, #4
   baca0:	f7ff fc53 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   baca4:	e9d5 3200 	ldrd	r3, r2, [r5]
   baca8:	f104 0108 	add.w	r1, r4, #8
   bacac:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bacb0:	4620      	mov	r0, r4
   bacb2:	f7ff ff7f 	bl	babb4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   bacb6:	686b      	ldr	r3, [r5, #4]
   bacb8:	3b01      	subs	r3, #1
   bacba:	606b      	str	r3, [r5, #4]
    return true;
   bacbc:	e7ec      	b.n	bac98 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000bacc0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bacc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bacc4:	4605      	mov	r5, r0
   bacc6:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   bacc8:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bacca:	460c      	mov	r4, r1
        WiringBleLock lk;
   baccc:	f7fe fef4 	bl	b9ab8 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   bacd0:	682e      	ldr	r6, [r5, #0]
   bacd2:	1ef3      	subs	r3, r6, #3
   bacd4:	2b0d      	cmp	r3, #13
   bacd6:	d83c      	bhi.n	bad52 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bacd8:	e8df f013 	tbh	[pc, r3, lsl #1]
   bacdc:	0053000e 	.word	0x0053000e
   bace0:	00d1003b 	.word	0x00d1003b
   bace4:	003b003b 	.word	0x003b003b
   bace8:	003b003b 	.word	0x003b003b
   bacec:	009b003b 	.word	0x009b003b
   bacf0:	009b009b 	.word	0x009b009b
   bacf4:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   bacf8:	a804      	add	r0, sp, #16
   bacfa:	f7ff fa0f 	bl	ba11c <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   bacfe:	9b04      	ldr	r3, [sp, #16]
   bad00:	89aa      	ldrh	r2, [r5, #12]
   bad02:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   bad04:	6869      	ldr	r1, [r5, #4]
   bad06:	9804      	ldr	r0, [sp, #16]
   bad08:	3108      	adds	r1, #8
   bad0a:	3002      	adds	r0, #2
   bad0c:	f7fe feee 	bl	b9aec <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   bad10:	a904      	add	r1, sp, #16
   bad12:	a806      	add	r0, sp, #24
   bad14:	f7ff fc0f 	bl	ba536 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   bad18:	a906      	add	r1, sp, #24
   bad1a:	f104 0018 	add.w	r0, r4, #24
   bad1e:	f7ff ff73 	bl	bac08 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bad22:	4605      	mov	r5, r0
   bad24:	a807      	add	r0, sp, #28
   bad26:	f7ff fc10 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bad2a:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   bad2c:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   bad2e:	b9b5      	cbnz	r5, bad5e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   bad30:	4b5d      	ldr	r3, [pc, #372]	; (baea8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   bad32:	495e      	ldr	r1, [pc, #376]	; (baeac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bad34:	9300      	str	r3, [sp, #0]
   bad36:	2032      	movs	r0, #50	; 0x32
   bad38:	462b      	mov	r3, r5
   bad3a:	aa06      	add	r2, sp, #24
   bad3c:	9507      	str	r5, [sp, #28]
   bad3e:	f7fe fc3f 	bl	b95c0 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   bad42:	9b04      	ldr	r3, [sp, #16]
   bad44:	4629      	mov	r1, r5
   bad46:	8818      	ldrh	r0, [r3, #0]
   bad48:	f7fe f9a0 	bl	b908c <hal_ble_gap_disconnect>
   bad4c:	a805      	add	r0, sp, #20
   bad4e:	f7ff fbfc 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   bad52:	a803      	add	r0, sp, #12
   bad54:	f7fe febe 	bl	b9ad4 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   bad58:	b00e      	add	sp, #56	; 0x38
   bad5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   bad5e:	4a54      	ldr	r2, [pc, #336]	; (baeb0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   bad60:	9200      	str	r2, [sp, #0]
   bad62:	2300      	movs	r3, #0
   bad64:	4951      	ldr	r1, [pc, #324]	; (baeac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bad66:	9307      	str	r3, [sp, #28]
   bad68:	aa06      	add	r2, sp, #24
   bad6a:	2001      	movs	r0, #1
   bad6c:	f7fe fc28 	bl	b95c0 <log_message>
                if (impl->connectedCallback_) {
   bad70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bad72:	2b00      	cmp	r3, #0
   bad74:	d0ea      	beq.n	bad4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   bad76:	a904      	add	r1, sp, #16
   bad78:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bad7c:	f7ff fc54 	bl	ba628 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   bad80:	e7e4      	b.n	bad4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bad82:	89a9      	ldrh	r1, [r5, #12]
   bad84:	4620      	mov	r0, r4
   bad86:	f7ff f8dc 	bl	b9f42 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bad8a:	4606      	mov	r6, r0
   bad8c:	2800      	cmp	r0, #0
   bad8e:	d0e0      	beq.n	bad52 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   bad90:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   bad92:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   bad96:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bad9a:	8029      	strh	r1, [r5, #0]
   bad9c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   bada0:	429a      	cmp	r2, r3
   bada2:	d003      	beq.n	badac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   bada4:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bada8:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   badaa:	e7f9      	b.n	bada0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   badac:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   badb0:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   badb4:	45b8      	cmp	r8, r7
   badb6:	d004      	beq.n	badc2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   badb8:	1d38      	adds	r0, r7, #4
   badba:	f7ff fbc6 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   badbe:	3708      	adds	r7, #8
   badc0:	e7f8      	b.n	badb4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   badc2:	2300      	movs	r3, #0
   badc4:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   badc6:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   badca:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   badce:	45b8      	cmp	r8, r7
   badd0:	d004      	beq.n	baddc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   badd2:	1d38      	adds	r0, r7, #4
   badd4:	f7ff fbb9 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   badd8:	3708      	adds	r7, #8
   badda:	e7f8      	b.n	badce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   baddc:	2300      	movs	r3, #0
   badde:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   bade0:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   bade2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bade4:	b123      	cbz	r3, badf0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   bade6:	4631      	mov	r1, r6
   bade8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   badec:	f7ff fc1c 	bl	ba628 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   badf0:	2300      	movs	r3, #0
   badf2:	2220      	movs	r2, #32
   badf4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   badf8:	4a2e      	ldr	r2, [pc, #184]	; (baeb4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   badfa:	9200      	str	r2, [sp, #0]
   badfc:	492b      	ldr	r1, [pc, #172]	; (baeac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   badfe:	aa06      	add	r2, sp, #24
   bae00:	2001      	movs	r0, #1
   bae02:	f7fe fbdd 	bl	b95c0 <log_message>
                    impl->peers_.removeOne(*peer);
   bae06:	4631      	mov	r1, r6
   bae08:	f104 0018 	add.w	r0, r4, #24
   bae0c:	f7ff ff35 	bl	bac7a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   bae10:	e79f      	b.n	bad52 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bae12:	89a9      	ldrh	r1, [r5, #12]
   bae14:	4620      	mov	r0, r4
   bae16:	f7ff f894 	bl	b9f42 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bae1a:	2800      	cmp	r0, #0
   bae1c:	d099      	beq.n	bad52 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   bae1e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bae20:	2b00      	cmp	r3, #0
   bae22:	d096      	beq.n	bad52 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   bae24:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bae26:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   bae28:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bae2c:	d001      	beq.n	bae32 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   bae2e:	2e10      	cmp	r6, #16
   bae30:	d117      	bne.n	bae62 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   bae32:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   bae34:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   bae36:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   bae38:	2506      	movs	r5, #6
                        };
   bae3a:	f88d 3015 	strb.w	r3, [sp, #21]
   bae3e:	9104      	str	r1, [sp, #16]
   bae40:	f88d 2014 	strb.w	r2, [sp, #20]
   bae44:	9006      	str	r0, [sp, #24]
   bae46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   bae4a:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   bae4c:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   bae50:	9508      	str	r5, [sp, #32]
   bae52:	e883 0003 	stmia.w	r3, {r0, r1}
   bae56:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bae58:	a906      	add	r1, sp, #24
   bae5a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bae5e:	4798      	blx	r3
   bae60:	e777      	b.n	bad52 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   bae62:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   bae64:	bf01      	itttt	eq
   bae66:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   bae68:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   bae6a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   bae6e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   bae70:	bf0f      	iteee	eq
   bae72:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   bae76:	461a      	movne	r2, r3
   bae78:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   bae7a:	461d      	movne	r5, r3
   bae7c:	e7dd      	b.n	bae3a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bae7e:	89a9      	ldrh	r1, [r5, #12]
   bae80:	4620      	mov	r0, r4
   bae82:	f7ff f85e 	bl	b9f42 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   bae86:	4601      	mov	r1, r0
   bae88:	2800      	cmp	r0, #0
   bae8a:	f43f af62 	beq.w	bad52 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bae8e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bae90:	2b00      	cmp	r3, #0
   bae92:	f43f af5e 	beq.w	bad52 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   bae96:	686b      	ldr	r3, [r5, #4]
   bae98:	9306      	str	r3, [sp, #24]
   bae9a:	aa06      	add	r2, sp, #24
   bae9c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bae9e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   baea2:	4798      	blx	r3
   baea4:	e755      	b.n	bad52 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   baea6:	bf00      	nop
   baea8:	000c16b7 	.word	0x000c16b7
   baeac:	000c161b 	.word	0x000c161b
   baeb0:	000c16dd 	.word	0x000c16dd
   baeb4:	000c16fa 	.word	0x000c16fa

000baeb8 <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   baeb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   baebc:	4607      	mov	r7, r0
   baebe:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   baec0:	4668      	mov	r0, sp
   baec2:	f7fe fdf9 	bl	b9ab8 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   baec6:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   baec8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   baecc:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (auto& p : impl()->peers()) {
   baed0:	42ac      	cmp	r4, r5
   baed2:	d035      	beq.n	baf40 <_ZNK8particle14BleLocalDevice10disconnectEv+0x88>
        hal_ble_conn_info_t connInfo = {};
   baed4:	2224      	movs	r2, #36	; 0x24
   baed6:	2100      	movs	r1, #0
   baed8:	a801      	add	r0, sp, #4
   baeda:	f003 f9c4 	bl	be266 <memset>
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   baede:	6823      	ldr	r3, [r4, #0]
   baee0:	2200      	movs	r2, #0
   baee2:	8818      	ldrh	r0, [r3, #0]
   baee4:	a901      	add	r1, sp, #4
   baee6:	f7fe f921 	bl	b912c <hal_ble_gap_get_connection_info>
   baeea:	4606      	mov	r6, r0
   baeec:	b108      	cbz	r0, baef2 <_ZNK8particle14BleLocalDevice10disconnectEv+0x3a>
    for (auto& p : impl()->peers()) {
   baeee:	3408      	adds	r4, #8
   baef0:	e7ee      	b.n	baed0 <_ZNK8particle14BleLocalDevice10disconnectEv+0x18>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   baef2:	f89d 8008 	ldrb.w	r8, [sp, #8]
   baef6:	f1b8 0f01 	cmp.w	r8, #1
   baefa:	d1f8      	bne.n	baeee <_ZNK8particle14BleLocalDevice10disconnectEv+0x36>
   baefc:	f8df 9048 	ldr.w	r9, [pc, #72]	; baf48 <_ZNK8particle14BleLocalDevice10disconnectEv+0x90>
   baf00:	f8d9 0000 	ldr.w	r0, [r9]
   baf04:	f7fe f994 	bl	b9230 <os_mutex_recursive_unlock>
        locked_ = false;
   baf08:	f88d 6000 	strb.w	r6, [sp]
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   baf0c:	6823      	ldr	r3, [r4, #0]
   baf0e:	4631      	mov	r1, r6
   baf10:	8818      	ldrh	r0, [r3, #0]
   baf12:	f7fe f8bb 	bl	b908c <hal_ble_gap_disconnect>
   baf16:	1e05      	subs	r5, r0, #0
   baf18:	db0b      	blt.n	baf32 <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
    void lock() { os_mutex_recursive_lock(handle_); }
   baf1a:	f8d9 0000 	ldr.w	r0, [r9]
   baf1e:	f7fe f97f 	bl	b9220 <os_mutex_recursive_lock>
        return peers_;
   baf22:	6838      	ldr	r0, [r7, #0]
        locked_ = true;
   baf24:	f88d 8000 	strb.w	r8, [sp]
            lk.lock();
            impl()->peers().removeOne(p);
   baf28:	4621      	mov	r1, r4
   baf2a:	3018      	adds	r0, #24
   baf2c:	f7ff fea5 	bl	bac7a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
            return SYSTEM_ERROR_NONE;
   baf30:	4635      	mov	r5, r6
    WiringBleLock lk;
   baf32:	4668      	mov	r0, sp
   baf34:	f7fe fdce 	bl	b9ad4 <_ZN8particle3ble13WiringBleLockD1Ev>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   baf38:	4628      	mov	r0, r5
   baf3a:	b00b      	add	sp, #44	; 0x2c
   baf3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   baf40:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
   baf44:	e7f5      	b.n	baf32 <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
   baf46:	bf00      	nop
   baf48:	2003e658 	.word	0x2003e658

000baf4c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   baf4c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   baf4e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   baf50:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   baf52:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   baf54:	dd05      	ble.n	baf62 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   baf56:	2114      	movs	r1, #20
   baf58:	4369      	muls	r1, r5
   baf5a:	f7fe fc1d 	bl	b9798 <realloc>
            if (!d) {
   baf5e:	b918      	cbnz	r0, baf68 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   baf60:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   baf62:	f7fe fc11 	bl	b9788 <free>
        T* d = nullptr;
   baf66:	2000      	movs	r0, #0
        data_ = d;
   baf68:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   baf6a:	60a5      	str	r5, [r4, #8]
        return true;
   baf6c:	2001      	movs	r0, #1
   baf6e:	e7f7      	b.n	baf60 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000baf70 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   baf70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   baf74:	2400      	movs	r4, #0
   baf76:	e9c0 4400 	strd	r4, r4, [r0]
   baf7a:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   baf7c:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   baf7e:	6849      	ldr	r1, [r1, #4]
   baf80:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   baf82:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   baf84:	dd1a      	ble.n	bafbc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   baf86:	f7ff ffe1 	bl	baf4c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   baf8a:	b1b8      	cbz	r0, bafbc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   baf8c:	e9d8 9300 	ldrd	r9, r3, [r8]
   baf90:	f04f 0c14 	mov.w	ip, #20
   baf94:	f8d7 e000 	ldr.w	lr, [r7]
   baf98:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   baf9c:	eb09 0504 	add.w	r5, r9, r4
   bafa0:	45ac      	cmp	ip, r5
   bafa2:	d008      	beq.n	bafb6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   bafa4:	eb1e 0604 	adds.w	r6, lr, r4
   bafa8:	bf1f      	itttt	ne
   bafaa:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   bafac:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   bafae:	682b      	ldrne	r3, [r5, #0]
   bafb0:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   bafb2:	3414      	adds	r4, #20
   bafb4:	e7f2      	b.n	baf9c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   bafb6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bafba:	607b      	str	r3, [r7, #4]
}
   bafbc:	4638      	mov	r0, r7
   bafbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bafc2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   bafc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   bafc6:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   bafca:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bafcc:	6883      	ldr	r3, [r0, #8]
   bafce:	19e9      	adds	r1, r5, r7
   bafd0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   bafd2:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bafd4:	dc17      	bgt.n	bb006 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   bafd6:	2314      	movs	r3, #20
   bafd8:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   bafda:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bafdc:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   bafde:	fb03 f907 	mul.w	r9, r3, r7
   bafe2:	435a      	muls	r2, r3
    T* const p = data_ + i;
   bafe4:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bafe6:	1b52      	subs	r2, r2, r5
   bafe8:	4631      	mov	r1, r6
   bafea:	eb06 0009 	add.w	r0, r6, r9
   bafee:	f003 f920 	bl	be232 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   baff2:	464a      	mov	r2, r9
   baff4:	4641      	mov	r1, r8
   baff6:	4630      	mov	r0, r6
   baff8:	f003 f90d 	bl	be216 <memcpy>
    size_ += n;
   baffc:	6863      	ldr	r3, [r4, #4]
   baffe:	443b      	add	r3, r7
   bb000:	6063      	str	r3, [r4, #4]
}
   bb002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb006:	f7ff ffa1 	bl	baf4c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb00a:	2800      	cmp	r0, #0
   bb00c:	d1e3      	bne.n	bafd6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   bb00e:	e7f8      	b.n	bb002 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000bb010 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bb010:	b082      	sub	sp, #8
   bb012:	b570      	push	{r4, r5, r6, lr}
   bb014:	460c      	mov	r4, r1
   bb016:	a904      	add	r1, sp, #16
   bb018:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb01c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   bb020:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bb022:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb024:	da17      	bge.n	bb056 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   bb026:	2314      	movs	r3, #20
   bb028:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   bb02c:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   bb02e:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   bb030:	435a      	muls	r2, r3
    T* const p = data_ + i;
   bb032:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb034:	1a52      	subs	r2, r2, r1
   bb036:	18e0      	adds	r0, r4, r3
   bb038:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   bb03a:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb03c:	f003 f8f9 	bl	be232 <memmove>
    new(p) T(std::move(value));
   bb040:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   bb042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb044:	6833      	ldr	r3, [r6, #0]
   bb046:	6023      	str	r3, [r4, #0]
    ++size_;
   bb048:	686b      	ldr	r3, [r5, #4]
   bb04a:	3301      	adds	r3, #1
   bb04c:	606b      	str	r3, [r5, #4]
}
   bb04e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb052:	b002      	add	sp, #8
   bb054:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb056:	3101      	adds	r1, #1
   bb058:	f7ff ff78 	bl	baf4c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb05c:	2800      	cmp	r0, #0
   bb05e:	d1e2      	bne.n	bb026 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   bb060:	e7f5      	b.n	bb04e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000bb062 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   bb062:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   bb066:	2400      	movs	r4, #0
   bb068:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bb06a:	1e93      	subs	r3, r2, #2
   bb06c:	e9c0 4400 	strd	r4, r4, [r0]
   bb070:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   bb072:	4605      	mov	r5, r0
   bb074:	460f      	mov	r7, r1
   bb076:	4690      	mov	r8, r2
   bb078:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bb07a:	9305      	str	r3, [sp, #20]
    return size_;
   bb07c:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   bb07e:	428c      	cmp	r4, r1
   bb080:	da72      	bge.n	bb168 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   bb082:	6838      	ldr	r0, [r7, #0]
   bb084:	ab07      	add	r3, sp, #28
   bb086:	4642      	mov	r2, r8
   bb088:	1b09      	subs	r1, r1, r4
   bb08a:	4420      	add	r0, r4
   bb08c:	f7fe fc46 	bl	b991c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   bb090:	4606      	mov	r6, r0
   bb092:	2800      	cmp	r0, #0
   bb094:	d068      	beq.n	bb168 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bb096:	9b05      	ldr	r3, [sp, #20]
   bb098:	2b01      	cmp	r3, #1
   bb09a:	d82f      	bhi.n	bb0fc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bb09c:	f1a0 0b02 	sub.w	fp, r0, #2
   bb0a0:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   bb0a4:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   bb0a8:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bb0ac:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bb0ae:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bb0b0:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bb0b2:	d055      	beq.n	bb160 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   bb0b4:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bb0b6:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   bb0ba:	4413      	add	r3, r2
   bb0bc:	a808      	add	r0, sp, #32
   bb0be:	78d9      	ldrb	r1, [r3, #3]
   bb0c0:	789b      	ldrb	r3, [r3, #2]
   bb0c2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   bb0c6:	f7fe fd8e 	bl	b9be6 <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   bb0ca:	f10d 0e20 	add.w	lr, sp, #32
   bb0ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   bb0d2:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   bb0d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bb0da:	f8de 3000 	ldr.w	r3, [lr]
   bb0de:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   bb0e2:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   bb0e6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   bb0ea:	ab0d      	add	r3, sp, #52	; 0x34
   bb0ec:	cb0c      	ldmia	r3, {r2, r3}
   bb0ee:	6869      	ldr	r1, [r5, #4]
   bb0f0:	4628      	mov	r0, r5
   bb0f2:	f7ff ff8d 	bl	bb010 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bb0f6:	f109 0901 	add.w	r9, r9, #1
   bb0fa:	e7d7      	b.n	bb0ac <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   bb0fc:	f1a8 0306 	sub.w	r3, r8, #6
   bb100:	2b01      	cmp	r3, #1
   bb102:	d82d      	bhi.n	bb160 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bb104:	f1a0 0b02 	sub.w	fp, r0, #2
   bb108:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   bb10c:	f04f 0900 	mov.w	r9, #0
   bb110:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   bb114:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   bb116:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bb118:	d022      	beq.n	bb160 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   bb11a:	3302      	adds	r3, #2
    return data_[i];
   bb11c:	6839      	ldr	r1, [r7, #0]
   bb11e:	4423      	add	r3, r4
   bb120:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   bb124:	2201      	movs	r2, #1
   bb126:	4419      	add	r1, r3
   bb128:	a808      	add	r0, sp, #32
   bb12a:	f7fe fd3d 	bl	b9ba8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   bb12e:	f10d 0e20 	add.w	lr, sp, #32
   bb132:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   bb136:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   bb13a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bb13e:	f8de 3000 	ldr.w	r3, [lr]
   bb142:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   bb146:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   bb14a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   bb14e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   bb152:	6869      	ldr	r1, [r5, #4]
   bb154:	4628      	mov	r0, r5
   bb156:	f7ff ff5b 	bl	bb010 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bb15a:	f109 0901 	add.w	r9, r9, #1
   bb15e:	e7d9      	b.n	bb114 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   bb160:	9b07      	ldr	r3, [sp, #28]
   bb162:	441c      	add	r4, r3
   bb164:	4434      	add	r4, r6
   bb166:	e789      	b.n	bb07c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   bb168:	4628      	mov	r0, r5
   bb16a:	b013      	add	sp, #76	; 0x4c
   bb16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb170 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   bb170:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   bb172:	2300      	movs	r3, #0
   bb174:	b085      	sub	sp, #20
   bb176:	e9c0 3300 	strd	r3, r3, [r0]
   bb17a:	6083      	str	r3, [r0, #8]
   bb17c:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bb17e:	2202      	movs	r2, #2
   bb180:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   bb182:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bb184:	f7ff ff6d 	bl	bb062 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb188:	a901      	add	r1, sp, #4
   bb18a:	4620      	mov	r0, r4
   bb18c:	f7ff ff19 	bl	bafc2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb190:	a801      	add	r0, sp, #4
   bb192:	f7ff f939 	bl	ba408 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bb196:	2202      	movs	r2, #2
   bb198:	4629      	mov	r1, r5
   bb19a:	a801      	add	r0, sp, #4
   bb19c:	f7ff ff61 	bl	bb062 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb1a0:	a901      	add	r1, sp, #4
   bb1a2:	4620      	mov	r0, r4
   bb1a4:	f7ff ff0d 	bl	bafc2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb1a8:	a801      	add	r0, sp, #4
   bb1aa:	f7ff f92d 	bl	ba408 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   bb1ae:	2203      	movs	r2, #3
   bb1b0:	4629      	mov	r1, r5
   bb1b2:	a801      	add	r0, sp, #4
   bb1b4:	f7ff ff55 	bl	bb062 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb1b8:	a901      	add	r1, sp, #4
   bb1ba:	4620      	mov	r0, r4
   bb1bc:	f7ff ff01 	bl	bafc2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb1c0:	a801      	add	r0, sp, #4
   bb1c2:	f7ff f921 	bl	ba408 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   bb1c6:	2206      	movs	r2, #6
   bb1c8:	4629      	mov	r1, r5
   bb1ca:	a801      	add	r0, sp, #4
   bb1cc:	f7ff ff49 	bl	bb062 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb1d0:	a901      	add	r1, sp, #4
   bb1d2:	4620      	mov	r0, r4
   bb1d4:	f7ff fef5 	bl	bafc2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb1d8:	a801      	add	r0, sp, #4
   bb1da:	f7ff f915 	bl	ba408 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   bb1de:	2207      	movs	r2, #7
   bb1e0:	4629      	mov	r1, r5
   bb1e2:	a801      	add	r0, sp, #4
   bb1e4:	f7ff ff3d 	bl	bb062 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb1e8:	a901      	add	r1, sp, #4
   bb1ea:	4620      	mov	r0, r4
   bb1ec:	f7ff fee9 	bl	bafc2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb1f0:	a801      	add	r0, sp, #4
   bb1f2:	f7ff f909 	bl	ba408 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   bb1f6:	4620      	mov	r0, r4
   bb1f8:	b005      	add	sp, #20
   bb1fa:	bd30      	pop	{r4, r5, pc}

000bb1fc <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   bb1fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb200:	b085      	sub	sp, #20
   bb202:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bb204:	4601      	mov	r1, r0
   bb206:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   bb208:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bb20a:	f7ff ffb1 	bl	bb170 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_;
   bb20e:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
   bb210:	9b02      	ldr	r3, [sp, #8]
   bb212:	f04f 0e14 	mov.w	lr, #20
   bb216:	fb0e 6c03 	mla	ip, lr, r3, r6
   bb21a:	2700      	movs	r7, #0
    for (const auto& uuid : foundUuids) {
   bb21c:	45b4      	cmp	ip, r6
   bb21e:	d00d      	beq.n	bb23c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
   bb220:	45b9      	cmp	r9, r7
   bb222:	f106 0614 	add.w	r6, r6, #20
   bb226:	d009      	beq.n	bb23c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
   bb228:	f1a6 0514 	sub.w	r5, r6, #20
   bb22c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb22e:	fb0e 8407 	mla	r4, lr, r7, r8
   bb232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb234:	682b      	ldr	r3, [r5, #0]
   bb236:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
   bb238:	3701      	adds	r7, #1
   bb23a:	e7ef      	b.n	bb21c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bb23c:	a801      	add	r0, sp, #4
   bb23e:	f7ff f8e3 	bl	ba408 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   bb242:	4638      	mov	r0, r7
   bb244:	b005      	add	sp, #20
   bb246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bb24a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   bb24a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb24e:	b08b      	sub	sp, #44	; 0x2c
   bb250:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   bb252:	f100 0144 	add.w	r1, r0, #68	; 0x44
   bb256:	a801      	add	r0, sp, #4
   bb258:	f7ff fe8a 	bl	baf70 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   bb25c:	9b02      	ldr	r3, [sp, #8]
   bb25e:	2b00      	cmp	r3, #0
   bb260:	dd4a      	ble.n	bb2f8 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   bb262:	f104 0114 	add.w	r1, r4, #20
   bb266:	a804      	add	r0, sp, #16
   bb268:	f7ff ff82 	bl	bb170 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   bb26c:	f104 0108 	add.w	r1, r4, #8
   bb270:	a807      	add	r0, sp, #28
   bb272:	f7ff ff7d 	bl	bb170 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   bb276:	9d05      	ldr	r5, [sp, #20]
   bb278:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   bb27a:	2d00      	cmp	r5, #0
   bb27c:	dc01      	bgt.n	bb282 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   bb27e:	2e00      	cmp	r6, #0
   bb280:	dd38      	ble.n	bb2f4 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   bb282:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   bb284:	9f02      	ldr	r7, [sp, #8]
    return data_;
   bb286:	f8dd 8010 	ldr.w	r8, [sp, #16]
   bb28a:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   bb28e:	2314      	movs	r3, #20
   bb290:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   bb294:	fb03 8505 	mla	r5, r3, r5, r8
   bb298:	fb03 9606 	mla	r6, r3, r6, r9
   bb29c:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   bb29e:	45ba      	cmp	sl, r7
   bb2a0:	d028      	beq.n	bb2f4 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   bb2a2:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   bb2a4:	45ab      	cmp	fp, r5
   bb2a6:	d015      	beq.n	bb2d4 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   bb2a8:	4659      	mov	r1, fp
   bb2aa:	4650      	mov	r0, sl
   bb2ac:	f7fe fca5 	bl	b9bfa <_ZNK8particle7BleUuideqERKS0_>
   bb2b0:	f10b 0b14 	add.w	fp, fp, #20
   bb2b4:	4604      	mov	r4, r0
   bb2b6:	2800      	cmp	r0, #0
   bb2b8:	d0f4      	beq.n	bb2a4 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   bb2ba:	a807      	add	r0, sp, #28
   bb2bc:	f7ff f8a4 	bl	ba408 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   bb2c0:	a804      	add	r0, sp, #16
   bb2c2:	f7ff f8a1 	bl	ba408 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   bb2c6:	a801      	add	r0, sp, #4
   bb2c8:	f7ff f89e 	bl	ba408 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   bb2cc:	4620      	mov	r0, r4
   bb2ce:	b00b      	add	sp, #44	; 0x2c
   bb2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb2d4:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   bb2d6:	45b3      	cmp	fp, r6
   bb2d8:	d009      	beq.n	bb2ee <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   bb2da:	4659      	mov	r1, fp
   bb2dc:	4650      	mov	r0, sl
   bb2de:	f7fe fc8c 	bl	b9bfa <_ZNK8particle7BleUuideqERKS0_>
   bb2e2:	f10b 0b14 	add.w	fp, fp, #20
   bb2e6:	4604      	mov	r4, r0
   bb2e8:	2800      	cmp	r0, #0
   bb2ea:	d0f4      	beq.n	bb2d6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   bb2ec:	e7e5      	b.n	bb2ba <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   bb2ee:	f10a 0a14 	add.w	sl, sl, #20
   bb2f2:	e7d4      	b.n	bb29e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   bb2f4:	2400      	movs	r4, #0
   bb2f6:	e7e0      	b.n	bb2ba <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   bb2f8:	2401      	movs	r4, #1
   bb2fa:	e7e4      	b.n	bb2c6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000bb2fc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   bb2fc:	b513      	push	{r0, r1, r4, lr}
   bb2fe:	460b      	mov	r3, r1
   bb300:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb302:	e9d0 0100 	ldrd	r0, r1, [r0]
   bb306:	466c      	mov	r4, sp
   bb308:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   bb30c:	e893 0003 	ldmia.w	r3, {r0, r1}
   bb310:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   bb314:	e894 0003 	ldmia.w	r4, {r0, r1}
   bb318:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   bb31c:	b002      	add	sp, #8
   bb31e:	bd10      	pop	{r4, pc}

000bb320 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   bb320:	b538      	push	{r3, r4, r5, lr}
   bb322:	4605      	mov	r5, r0
   bb324:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   bb326:	f7ff ffe9 	bl	bb2fc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb32a:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   bb32c:	68a2      	ldr	r2, [r4, #8]
   bb32e:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bb330:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb332:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   bb334:	68e2      	ldr	r2, [r4, #12]
   bb336:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bb338:	60e3      	str	r3, [r4, #12]
      }
   bb33a:	bd38      	pop	{r3, r4, r5, pc}

000bb33c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   bb33c:	b530      	push	{r4, r5, lr}
   bb33e:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   bb340:	2300      	movs	r3, #0
   bb342:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   bb344:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   bb346:	4605      	mov	r5, r0
   bb348:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   bb34a:	b133      	cbz	r3, bb35a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bb34c:	2202      	movs	r2, #2
   bb34e:	4668      	mov	r0, sp
   bb350:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bb352:	68e3      	ldr	r3, [r4, #12]
   bb354:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   bb356:	68a3      	ldr	r3, [r4, #8]
   bb358:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   bb35a:	4629      	mov	r1, r5
   bb35c:	4668      	mov	r0, sp
   bb35e:	f7ff ffdf 	bl	bb320 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bb362:	4668      	mov	r0, sp
   bb364:	f7f8 fff6 	bl	b4354 <_ZNSt14_Function_baseD1Ev>
      }
   bb368:	b005      	add	sp, #20
   bb36a:	bd30      	pop	{r4, r5, pc}

000bb36c <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   bb36c:	b538      	push	{r3, r4, r5, lr}
   bb36e:	460d      	mov	r5, r1
      { return _M_ptr; }
   bb370:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   bb372:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   bb374:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   bb376:	b123      	cbz	r3, bb382 <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   bb378:	6828      	ldr	r0, [r5, #0]
   bb37a:	314c      	adds	r1, #76	; 0x4c
   bb37c:	304c      	adds	r0, #76	; 0x4c
   bb37e:	f7ff ffdd 	bl	bb33c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bb382:	4620      	mov	r0, r4
   bb384:	682b      	ldr	r3, [r5, #0]
   bb386:	f840 3b04 	str.w	r3, [r0], #4
   bb38a:	6869      	ldr	r1, [r5, #4]
   bb38c:	f7fe fb6e 	bl	b9a6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   bb390:	4620      	mov	r0, r4
   bb392:	bd38      	pop	{r3, r4, r5, pc}

000bb394 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   bb394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb398:	4604      	mov	r4, r0
   bb39a:	b087      	sub	sp, #28
    WiringBleLock lk;
   bb39c:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   bb39e:	460e      	mov	r6, r1
   bb3a0:	4617      	mov	r7, r2
    WiringBleLock lk;
   bb3a2:	f7fe fb89 	bl	b9ab8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bb3a6:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   bb3a8:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   bb3ac:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   bb3b0:	4544      	cmp	r4, r8
   bb3b2:	46a1      	mov	r9, r4
   bb3b4:	d016      	beq.n	bb3e4 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   bb3b6:	4621      	mov	r1, r4
   bb3b8:	a801      	add	r0, sp, #4
   bb3ba:	f7fe fded 	bl	b9f98 <_ZNK8particle17BleCharacteristic4UUIDEv>
   bb3be:	4639      	mov	r1, r7
   bb3c0:	a801      	add	r0, sp, #4
   bb3c2:	f7fe fc1a 	bl	b9bfa <_ZNK8particle7BleUuideqERKS0_>
   bb3c6:	3408      	adds	r4, #8
   bb3c8:	4605      	mov	r5, r0
   bb3ca:	2800      	cmp	r0, #0
   bb3cc:	d0f0      	beq.n	bb3b0 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   bb3ce:	4649      	mov	r1, r9
   bb3d0:	4630      	mov	r0, r6
   bb3d2:	f7ff ffcb 	bl	bb36c <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   bb3d6:	4668      	mov	r0, sp
   bb3d8:	f7fe fb7c 	bl	b9ad4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bb3dc:	4628      	mov	r0, r5
   bb3de:	b007      	add	sp, #28
   bb3e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   bb3e4:	2500      	movs	r5, #0
   bb3e6:	e7f6      	b.n	bb3d6 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000bb3e8 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   bb3e8:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bb3ea:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   bb3ec:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bb3ee:	344c      	adds	r4, #76	; 0x4c
   bb3f0:	b1b9      	cbz	r1, bb422 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   bb3f2:	e9cd 1200 	strd	r1, r2, [sp]
   bb3f6:	a802      	add	r0, sp, #8
   bb3f8:	4669      	mov	r1, sp
   bb3fa:	f7ff f865 	bl	ba4c8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   bb3fe:	2300      	movs	r3, #0
	__x.swap(*this);
   bb400:	a906      	add	r1, sp, #24
   bb402:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   bb404:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   bb406:	f7ff ff8b 	bl	bb320 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   bb40a:	4621      	mov	r1, r4
   bb40c:	a806      	add	r0, sp, #24
   bb40e:	f7ff ff87 	bl	bb320 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bb412:	a806      	add	r0, sp, #24
   bb414:	f7f8 ff9e 	bl	b4354 <_ZNSt14_Function_baseD1Ev>
   bb418:	a802      	add	r0, sp, #8
   bb41a:	f7f8 ff9b 	bl	b4354 <_ZNSt14_Function_baseD1Ev>
}
   bb41e:	b00a      	add	sp, #40	; 0x28
   bb420:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   bb422:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   bb424:	e7eb      	b.n	bb3fe <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000bb426 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bb426:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bb428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb42a:	4604      	mov	r4, r0
   bb42c:	460d      	mov	r5, r1
   bb42e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bb430:	d914      	bls.n	bb45c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bb432:	4290      	cmp	r0, r2
   bb434:	d213      	bcs.n	bb45e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bb436:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bb43a:	1a75      	subs	r5, r6, r1
   bb43c:	f1a1 0708 	sub.w	r7, r1, #8
   bb440:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bb442:	42b7      	cmp	r7, r6
   bb444:	d018      	beq.n	bb478 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bb446:	b11c      	cbz	r4, bb450 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bb448:	4631      	mov	r1, r6
   bb44a:	4620      	mov	r0, r4
   bb44c:	f7ff f869 	bl	ba522 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   bb450:	1d30      	adds	r0, r6, #4
   bb452:	f7ff f87a 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bb456:	3e08      	subs	r6, #8
   bb458:	3c08      	subs	r4, #8
   bb45a:	e7f2      	b.n	bb442 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bb45c:	d00c      	beq.n	bb478 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bb45e:	42b5      	cmp	r5, r6
   bb460:	d00a      	beq.n	bb478 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bb462:	b11c      	cbz	r4, bb46c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bb464:	4629      	mov	r1, r5
   bb466:	4620      	mov	r0, r4
   bb468:	f7ff f85b 	bl	ba522 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bb46c:	1d28      	adds	r0, r5, #4
   bb46e:	f7ff f86c 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bb472:	3508      	adds	r5, #8
   bb474:	3408      	adds	r4, #8
   bb476:	e7f2      	b.n	bb45e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bb478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb47a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bb47a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bb47c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bb47e:	4605      	mov	r5, r0
        if (n > 0) {
   bb480:	dd11      	ble.n	bb4a6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bb482:	00f0      	lsls	r0, r6, #3
   bb484:	f7fe f978 	bl	b9778 <malloc>
            if (!d) {
   bb488:	4604      	mov	r4, r0
   bb48a:	b158      	cbz	r0, bb4a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bb48c:	e9d5 1200 	ldrd	r1, r2, [r5]
   bb490:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bb494:	f7ff ffc7 	bl	bb426 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bb498:	6828      	ldr	r0, [r5, #0]
   bb49a:	f7fe f975 	bl	b9788 <free>
        data_ = d;
   bb49e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bb4a0:	60ae      	str	r6, [r5, #8]
        return true;
   bb4a2:	2001      	movs	r0, #1
    }
   bb4a4:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bb4a6:	2400      	movs	r4, #0
   bb4a8:	e7f6      	b.n	bb498 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bb4aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb4aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   bb4ae:	2300      	movs	r3, #0
   bb4b0:	e9c0 3300 	strd	r3, r3, [r0]
   bb4b4:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb4b6:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb4b8:	6849      	ldr	r1, [r1, #4]
   bb4ba:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb4bc:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb4be:	dd13      	ble.n	bb4e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   bb4c0:	f7ff ffdb 	bl	bb47a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb4c4:	b180      	cbz	r0, bb4e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb4c6:	e9d5 6300 	ldrd	r6, r3, [r5]
   bb4ca:	6827      	ldr	r7, [r4, #0]
   bb4cc:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   bb4d0:	45b0      	cmp	r8, r6
   bb4d2:	d007      	beq.n	bb4e4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   bb4d4:	b11f      	cbz	r7, bb4de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   bb4d6:	4631      	mov	r1, r6
   bb4d8:	4638      	mov	r0, r7
   bb4da:	f7ff f822 	bl	ba522 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   bb4de:	3608      	adds	r6, #8
   bb4e0:	3708      	adds	r7, #8
   bb4e2:	e7f5      	b.n	bb4d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   bb4e4:	686b      	ldr	r3, [r5, #4]
   bb4e6:	6063      	str	r3, [r4, #4]
}
   bb4e8:	4620      	mov	r0, r4
   bb4ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb4ee <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   bb4ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb4f0:	460d      	mov	r5, r1
   bb4f2:	4604      	mov	r4, r0
    WiringBleLock lk;
   bb4f4:	a801      	add	r0, sp, #4
   bb4f6:	f7fe fadf 	bl	b9ab8 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   bb4fa:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   bb4fc:	4620      	mov	r0, r4
   bb4fe:	310c      	adds	r1, #12
   bb500:	f7ff ffd3 	bl	bb4aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   bb504:	a801      	add	r0, sp, #4
   bb506:	f7fe fae5 	bl	b9ad4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bb50a:	4620      	mov	r0, r4
   bb50c:	b003      	add	sp, #12
   bb50e:	bd30      	pop	{r4, r5, pc}

000bb510 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   bb510:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   bb512:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bb514:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   bb516:	4605      	mov	r5, r0
   bb518:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   bb51a:	b933      	cbnz	r3, bb52a <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   bb51c:	4608      	mov	r0, r1
   bb51e:	f7fe fa5f 	bl	b99e0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   bb522:	b910      	cbnz	r0, bb52a <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   bb524:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   bb526:	2201      	movs	r2, #1
   bb528:	729a      	strb	r2, [r3, #10]
    return services();
   bb52a:	4628      	mov	r0, r5
   bb52c:	4621      	mov	r1, r4
   bb52e:	f7ff ffde 	bl	bb4ee <_ZNK8particle13BlePeerDevice8servicesEv>
}
   bb532:	4628      	mov	r0, r5
   bb534:	bd38      	pop	{r3, r4, r5, pc}

000bb536 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb536:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb538:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bb53a:	6845      	ldr	r5, [r0, #4]
   bb53c:	4668      	mov	r0, sp
   bb53e:	f7fe fff0 	bl	ba522 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb542:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bb546:	4299      	cmp	r1, r3
   bb548:	da10      	bge.n	bb56c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bb54a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bb54c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb54e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bb552:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bb556:	4629      	mov	r1, r5
   bb558:	f105 0008 	add.w	r0, r5, #8
   bb55c:	f7ff ff63 	bl	bb426 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bb560:	b98d      	cbnz	r5, bb586 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bb562:	6863      	ldr	r3, [r4, #4]
   bb564:	3301      	adds	r3, #1
   bb566:	6063      	str	r3, [r4, #4]
    return true;
   bb568:	2601      	movs	r6, #1
   bb56a:	e006      	b.n	bb57a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb56c:	3101      	adds	r1, #1
   bb56e:	4620      	mov	r0, r4
   bb570:	f7ff ff83 	bl	bb47a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb574:	4606      	mov	r6, r0
   bb576:	2800      	cmp	r0, #0
   bb578:	d1e7      	bne.n	bb54a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   bb57a:	a801      	add	r0, sp, #4
   bb57c:	f7fe ffe5 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb580:	4630      	mov	r0, r6
   bb582:	b002      	add	sp, #8
   bb584:	bd70      	pop	{r4, r5, r6, pc}
   bb586:	4669      	mov	r1, sp
   bb588:	4628      	mov	r0, r5
   bb58a:	f7fe ffca 	bl	ba522 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bb58e:	e7e8      	b.n	bb562 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bb590 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   bb590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   bb594:	f8df 90b8 	ldr.w	r9, [pc, #184]	; bb650 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   bb598:	f8df a0b8 	ldr.w	sl, [pc, #184]	; bb654 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   bb59c:	b093      	sub	sp, #76	; 0x4c
   bb59e:	4605      	mov	r5, r0
   bb5a0:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   bb5a2:	2700      	movs	r7, #0
   bb5a4:	682b      	ldr	r3, [r5, #0]
   bb5a6:	42bb      	cmp	r3, r7
   bb5a8:	d94e      	bls.n	bb648 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   bb5aa:	a803      	add	r0, sp, #12
   bb5ac:	f7fe fd9a 	bl	ba0e4 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   bb5b0:	261c      	movs	r6, #28
   bb5b2:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   bb5b4:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   bb5b6:	437e      	muls	r6, r7
   bb5b8:	4432      	add	r2, r6
   bb5ba:	f10d 0c14 	add.w	ip, sp, #20
   bb5be:	1d13      	adds	r3, r2, #4
   bb5c0:	46e3      	mov	fp, ip
   bb5c2:	3214      	adds	r2, #20
   bb5c4:	6818      	ldr	r0, [r3, #0]
   bb5c6:	6859      	ldr	r1, [r3, #4]
   bb5c8:	46e6      	mov	lr, ip
   bb5ca:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   bb5ce:	3308      	adds	r3, #8
   bb5d0:	4293      	cmp	r3, r2
   bb5d2:	46f4      	mov	ip, lr
   bb5d4:	d1f6      	bne.n	bb5c4 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   bb5d6:	6818      	ldr	r0, [r3, #0]
   bb5d8:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   bb5dc:	4659      	mov	r1, fp
   bb5de:	a80a      	add	r0, sp, #40	; 0x28
   bb5e0:	f7fe fac0 	bl	b9b64 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   bb5e4:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   bb5e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bb5ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb5ee:	f8dc 3000 	ldr.w	r3, [ip]
   bb5f2:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   bb5f4:	686b      	ldr	r3, [r5, #4]
   bb5f6:	9a03      	ldr	r2, [sp, #12]
   bb5f8:	4433      	add	r3, r6
   bb5fa:	a903      	add	r1, sp, #12
   bb5fc:	8b1b      	ldrh	r3, [r3, #24]
   bb5fe:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   bb600:	686b      	ldr	r3, [r5, #4]
   bb602:	4433      	add	r3, r6
   bb604:	8b5b      	ldrh	r3, [r3, #26]
   bb606:	82d3      	strh	r3, [r2, #22]
        return services_;
   bb608:	f8d8 0000 	ldr.w	r0, [r8]
   bb60c:	f100 040c 	add.w	r4, r0, #12
   bb610:	a80a      	add	r0, sp, #40	; 0x28
   bb612:	f7fe ff86 	bl	ba522 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   bb616:	4620      	mov	r0, r4
   bb618:	a90a      	add	r1, sp, #40	; 0x28
   bb61a:	f7ff ff8c 	bl	bb536 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   bb61e:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bb620:	a80b      	add	r0, sp, #44	; 0x2c
   bb622:	f7fe ff92 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb626:	b954      	cbnz	r4, bb63e <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   bb628:	2320      	movs	r3, #32
   bb62a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   bb62e:	f8cd 9000 	str.w	r9, [sp]
   bb632:	4623      	mov	r3, r4
   bb634:	aa0a      	add	r2, sp, #40	; 0x28
   bb636:	4651      	mov	r1, sl
   bb638:	2032      	movs	r0, #50	; 0x32
   bb63a:	f7fd ffc1 	bl	b95c0 <log_message>
   bb63e:	a804      	add	r0, sp, #16
   bb640:	f7fe ff83 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   bb644:	3701      	adds	r7, #1
   bb646:	e7ad      	b.n	bb5a4 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   bb648:	b013      	add	sp, #76	; 0x4c
   bb64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb64e:	bf00      	nop
   bb650:	000c1719 	.word	0x000c1719
   bb654:	000c161b 	.word	0x000c161b

000bb658 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bb658:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bb65a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb65c:	4604      	mov	r4, r0
   bb65e:	460d      	mov	r5, r1
   bb660:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bb662:	d914      	bls.n	bb68e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bb664:	4290      	cmp	r0, r2
   bb666:	d213      	bcs.n	bb690 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bb668:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bb66c:	1a75      	subs	r5, r6, r1
   bb66e:	f1a1 0708 	sub.w	r7, r1, #8
   bb672:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bb674:	42b7      	cmp	r7, r6
   bb676:	d018      	beq.n	bb6aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bb678:	b11c      	cbz	r4, bb682 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bb67a:	4631      	mov	r1, r6
   bb67c:	4620      	mov	r0, r4
   bb67e:	f7fe ff42 	bl	ba506 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb682:	1d30      	adds	r0, r6, #4
   bb684:	f7fe ff61 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bb688:	3e08      	subs	r6, #8
   bb68a:	3c08      	subs	r4, #8
   bb68c:	e7f2      	b.n	bb674 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bb68e:	d00c      	beq.n	bb6aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bb690:	42b5      	cmp	r5, r6
   bb692:	d00a      	beq.n	bb6aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bb694:	b11c      	cbz	r4, bb69e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bb696:	4629      	mov	r1, r5
   bb698:	4620      	mov	r0, r4
   bb69a:	f7fe ff34 	bl	ba506 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb69e:	1d28      	adds	r0, r5, #4
   bb6a0:	f7fe ff53 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bb6a4:	3508      	adds	r5, #8
   bb6a6:	3408      	adds	r4, #8
   bb6a8:	e7f2      	b.n	bb690 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bb6aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb6ac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bb6ac:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bb6ae:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bb6b0:	4605      	mov	r5, r0
        if (n > 0) {
   bb6b2:	dd11      	ble.n	bb6d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bb6b4:	00f0      	lsls	r0, r6, #3
   bb6b6:	f7fe f85f 	bl	b9778 <malloc>
            if (!d) {
   bb6ba:	4604      	mov	r4, r0
   bb6bc:	b158      	cbz	r0, bb6d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bb6be:	e9d5 1200 	ldrd	r1, r2, [r5]
   bb6c2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bb6c6:	f7ff ffc7 	bl	bb658 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bb6ca:	6828      	ldr	r0, [r5, #0]
   bb6cc:	f7fe f85c 	bl	b9788 <free>
        data_ = d;
   bb6d0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bb6d2:	60ae      	str	r6, [r5, #8]
        return true;
   bb6d4:	2001      	movs	r0, #1
    }
   bb6d6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bb6d8:	2400      	movs	r4, #0
   bb6da:	e7f6      	b.n	bb6ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bb6dc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   bb6e0:	2300      	movs	r3, #0
   bb6e2:	e9c0 3300 	strd	r3, r3, [r0]
   bb6e6:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb6e8:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb6ea:	6849      	ldr	r1, [r1, #4]
   bb6ec:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb6ee:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb6f0:	dd13      	ble.n	bb71a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   bb6f2:	f7ff ffdb 	bl	bb6ac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb6f6:	b180      	cbz	r0, bb71a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb6f8:	e9d5 6300 	ldrd	r6, r3, [r5]
   bb6fc:	6827      	ldr	r7, [r4, #0]
   bb6fe:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   bb702:	45b0      	cmp	r8, r6
   bb704:	d007      	beq.n	bb716 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   bb706:	b11f      	cbz	r7, bb710 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   bb708:	4631      	mov	r1, r6
   bb70a:	4638      	mov	r0, r7
   bb70c:	f7fe fefb 	bl	ba506 <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   bb710:	3608      	adds	r6, #8
   bb712:	3708      	adds	r7, #8
   bb714:	e7f5      	b.n	bb702 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   bb716:	686b      	ldr	r3, [r5, #4]
   bb718:	6063      	str	r3, [r4, #4]
}
   bb71a:	4620      	mov	r0, r4
   bb71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb720 <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   bb720:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb722:	460d      	mov	r5, r1
   bb724:	4604      	mov	r4, r0
    WiringBleLock lk;
   bb726:	a801      	add	r0, sp, #4
   bb728:	f7fe f9c6 	bl	b9ab8 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   bb72c:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   bb72e:	4620      	mov	r0, r4
   bb730:	3118      	adds	r1, #24
   bb732:	f7ff ffd3 	bl	bb6dc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   bb736:	a801      	add	r0, sp, #4
   bb738:	f7fe f9cc 	bl	b9ad4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bb73c:	4620      	mov	r0, r4
   bb73e:	b003      	add	sp, #12
   bb740:	bd30      	pop	{r4, r5, pc}

000bb742 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb742:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb744:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bb746:	6845      	ldr	r5, [r0, #4]
   bb748:	4668      	mov	r0, sp
   bb74a:	f7fe fedc 	bl	ba506 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb74e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bb752:	4299      	cmp	r1, r3
   bb754:	da10      	bge.n	bb778 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bb756:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bb758:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb75a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bb75e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bb762:	4629      	mov	r1, r5
   bb764:	f105 0008 	add.w	r0, r5, #8
   bb768:	f7ff ff76 	bl	bb658 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bb76c:	b98d      	cbnz	r5, bb792 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bb76e:	6863      	ldr	r3, [r4, #4]
   bb770:	3301      	adds	r3, #1
   bb772:	6063      	str	r3, [r4, #4]
    return true;
   bb774:	2601      	movs	r6, #1
   bb776:	e006      	b.n	bb786 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb778:	3101      	adds	r1, #1
   bb77a:	4620      	mov	r0, r4
   bb77c:	f7ff ff96 	bl	bb6ac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb780:	4606      	mov	r6, r0
   bb782:	2800      	cmp	r0, #0
   bb784:	d1e7      	bne.n	bb756 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bb786:	a801      	add	r0, sp, #4
   bb788:	f7fe fedf 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb78c:	4630      	mov	r0, r6
   bb78e:	b002      	add	sp, #8
   bb790:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bb792:	4669      	mov	r1, sp
   bb794:	4628      	mov	r0, r5
   bb796:	f7fe feb6 	bl	ba506 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb79a:	e7e8      	b.n	bb76e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bb79c <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   bb79c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb79e:	b085      	sub	sp, #20
   bb7a0:	4605      	mov	r5, r0
    WiringBleLock lk;
   bb7a2:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   bb7a4:	460c      	mov	r4, r1
   bb7a6:	4617      	mov	r7, r2
    WiringBleLock lk;
   bb7a8:	f7fe f986 	bl	b9ab8 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   bb7ac:	2300      	movs	r3, #0
   bb7ae:	e9c5 3300 	strd	r3, r3, [r5]
   bb7b2:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   bb7b4:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   bb7b6:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   bb7ba:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   bb7be:	42b4      	cmp	r4, r6
   bb7c0:	d011      	beq.n	bb7e6 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   bb7c2:	6838      	ldr	r0, [r7, #0]
   bb7c4:	4621      	mov	r1, r4
   bb7c6:	f7fe fba7 	bl	b9f18 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   bb7ca:	b150      	cbz	r0, bb7e2 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   bb7cc:	4621      	mov	r1, r4
   bb7ce:	a802      	add	r0, sp, #8
   bb7d0:	f7fe fe99 	bl	ba506 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb7d4:	a902      	add	r1, sp, #8
   bb7d6:	4628      	mov	r0, r5
   bb7d8:	f7ff ffb3 	bl	bb742 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   bb7dc:	a803      	add	r0, sp, #12
   bb7de:	f7fe feb4 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   bb7e2:	3408      	adds	r4, #8
   bb7e4:	e7eb      	b.n	bb7be <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   bb7e6:	a801      	add	r0, sp, #4
   bb7e8:	f7fe f974 	bl	b9ad4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bb7ec:	4628      	mov	r0, r5
   bb7ee:	b005      	add	sp, #20
   bb7f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bb7f4 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   bb7f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   bb7f8:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bb7fa:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   bb7fc:	b091      	sub	sp, #68	; 0x44
   bb7fe:	4606      	mov	r6, r0
   bb800:	460f      	mov	r7, r1
   bb802:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   bb804:	b933      	cbnz	r3, bb814 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   bb806:	e9c0 3300 	strd	r3, r3, [r0]
   bb80a:	6083      	str	r3, [r0, #8]
}
   bb80c:	4630      	mov	r0, r6
   bb80e:	b011      	add	sp, #68	; 0x44
   bb810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   bb814:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   bb816:	7e0d      	ldrb	r5, [r1, #24]
   bb818:	2d00      	cmp	r5, #0
   bb81a:	d158      	bne.n	bb8ce <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   bb81c:	2320      	movs	r3, #32
   bb81e:	462a      	mov	r2, r5
   bb820:	a803      	add	r0, sp, #12
   bb822:	e9cd 3508 	strd	r3, r5, [sp, #32]
   bb826:	f7fe fae4 	bl	b9df2 <_ZNK8particle7BleUuid8toStringEb>
   bb82a:	9b03      	ldr	r3, [sp, #12]
   bb82c:	9301      	str	r3, [sp, #4]
   bb82e:	4b2b      	ldr	r3, [pc, #172]	; (bb8dc <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   bb830:	492b      	ldr	r1, [pc, #172]	; (bb8e0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   bb832:	9300      	str	r3, [sp, #0]
   bb834:	aa08      	add	r2, sp, #32
   bb836:	462b      	mov	r3, r5
   bb838:	2001      	movs	r0, #1
   bb83a:	f7fd fec1 	bl	b95c0 <log_message>
   bb83e:	a803      	add	r0, sp, #12
   bb840:	f001 f9b4 	bl	bcbac <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   bb844:	231c      	movs	r3, #28
   bb846:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   bb84a:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   bb84e:	8a9a      	ldrh	r2, [r3, #20]
   bb850:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   bb854:	8adb      	ldrh	r3, [r3, #22]
   bb856:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   bb85a:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   bb85c:	4a21      	ldr	r2, [pc, #132]	; (bb8e4 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   bb85e:	8818      	ldrh	r0, [r3, #0]
   bb860:	9500      	str	r5, [sp, #0]
   bb862:	a908      	add	r1, sp, #32
   bb864:	f7fd fc30 	bl	b90c8 <hal_ble_gatt_client_discover_characteristics>
   bb868:	2800      	cmp	r0, #0
   bb86a:	db30      	blt.n	bb8ce <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   bb86c:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   bb86e:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   bb872:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   bb876:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   bb878:	f1a4 0308 	sub.w	r3, r4, #8
   bb87c:	4599      	cmp	r9, r3
   bb87e:	d022      	beq.n	bb8c6 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   bb880:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bb884:	89db      	ldrh	r3, [r3, #14]
   bb886:	2b00      	cmp	r3, #0
   bb888:	d0f5      	beq.n	bb876 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   bb88a:	2210      	movs	r2, #16
   bb88c:	2100      	movs	r1, #0
   bb88e:	eb0d 0002 	add.w	r0, sp, r2
   bb892:	9503      	str	r5, [sp, #12]
   bb894:	f002 fce7 	bl	be266 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   bb898:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bb89c:	89d9      	ldrh	r1, [r3, #14]
   bb89e:	683b      	ldr	r3, [r7, #0]
   bb8a0:	aa03      	add	r2, sp, #12
   bb8a2:	8818      	ldrh	r0, [r3, #0]
   bb8a4:	9500      	str	r5, [sp, #0]
   bb8a6:	2313      	movs	r3, #19
   bb8a8:	f7fd fc2c 	bl	b9104 <hal_ble_gatt_client_read>
                if (len > 0) {
   bb8ac:	2800      	cmp	r0, #0
   bb8ae:	d0e2      	beq.n	bb876 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   bb8b0:	ab10      	add	r3, sp, #64	; 0x40
   bb8b2:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   bb8b4:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   bb8b6:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   bb8ba:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   bb8be:	303c      	adds	r0, #60	; 0x3c
   bb8c0:	f001 fa15 	bl	bccee <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   bb8c4:	e7d7      	b.n	bb876 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   bb8c6:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   bb8ca:	2201      	movs	r2, #1
   bb8cc:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   bb8ce:	4642      	mov	r2, r8
   bb8d0:	4639      	mov	r1, r7
   bb8d2:	4630      	mov	r0, r6
   bb8d4:	f7ff ff62 	bl	bb79c <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   bb8d8:	e798      	b.n	bb80c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   bb8da:	bf00      	nop
   bb8dc:	000c173e 	.word	0x000c173e
   bb8e0:	000c161b 	.word	0x000c161b
   bb8e4:	000bba8d 	.word	0x000bba8d

000bb8e8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   bb8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   bb8ea:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bb8ec:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   bb8ee:	b085      	sub	sp, #20
   bb8f0:	4606      	mov	r6, r0
   bb8f2:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   bb8f4:	b92b      	cbnz	r3, bb902 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   bb8f6:	a801      	add	r0, sp, #4
   bb8f8:	f7ff fe0a 	bl	bb510 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   bb8fc:	a801      	add	r0, sp, #4
   bb8fe:	f7fe fe33 	bl	ba568 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   bb902:	682b      	ldr	r3, [r5, #0]
   bb904:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   bb908:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   bb90c:	42bc      	cmp	r4, r7
   bb90e:	d009      	beq.n	bb924 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   bb910:	4622      	mov	r2, r4
   bb912:	4629      	mov	r1, r5
   bb914:	a801      	add	r0, sp, #4
   bb916:	f7ff ff6d 	bl	bb7f4 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   bb91a:	a801      	add	r0, sp, #4
   bb91c:	f7fe fe36 	bl	ba58c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   bb920:	3408      	adds	r4, #8
   bb922:	e7f3      	b.n	bb90c <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   bb924:	4630      	mov	r0, r6
   bb926:	4629      	mov	r1, r5
   bb928:	f7ff fefa 	bl	bb720 <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   bb92c:	4630      	mov	r0, r6
   bb92e:	b005      	add	sp, #20
   bb930:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bb934 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bb934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb938:	4605      	mov	r5, r0
   bb93a:	b093      	sub	sp, #76	; 0x4c
    return address_;
   bb93c:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   bb93e:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bb940:	460f      	mov	r7, r1
    return address_;
   bb942:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bb944:	4698      	mov	r8, r3
    return address_;
   bb946:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   bb948:	4b41      	ldr	r3, [pc, #260]	; (bba50 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   bb94a:	9304      	str	r3, [sp, #16]
    return address_;
   bb94c:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   bb94e:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   bb950:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   bb954:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   bb958:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   bb95c:	f7fe fc8e 	bl	ba27c <_ZN8particle14BleLocalDevice11getInstanceEv>
   bb960:	4b3c      	ldr	r3, [pc, #240]	; (bba54 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   bb962:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   bb964:	f7fe fc8a 	bl	ba27c <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   bb968:	6829      	ldr	r1, [r5, #0]
   bb96a:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   bb96c:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   bb96e:	464a      	mov	r2, r9
   bb970:	a804      	add	r0, sp, #16
   bb972:	f7fd fbd1 	bl	b9118 <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   bb976:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   bb978:	4604      	mov	r4, r0
   bb97a:	b138      	cbz	r0, bb98c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   bb97c:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bb97e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bb982:	801a      	strh	r2, [r3, #0]
}
   bb984:	4620      	mov	r0, r4
   bb986:	b013      	add	sp, #76	; 0x4c
   bb988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   bb98c:	4639      	mov	r1, r7
   bb98e:	4628      	mov	r0, r5
   bb990:	f7fe fbf8 	bl	ba184 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
   bb994:	a803      	add	r0, sp, #12
   bb996:	f7fe f88f 	bl	b9ab8 <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   bb99a:	f7fe fc6f 	bl	ba27c <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   bb99e:	6807      	ldr	r7, [r0, #0]
   bb9a0:	4629      	mov	r1, r5
   bb9a2:	3718      	adds	r7, #24
   bb9a4:	4630      	mov	r0, r6
   bb9a6:	f7fe fdc6 	bl	ba536 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   bb9aa:	4631      	mov	r1, r6
   bb9ac:	4638      	mov	r0, r7
   bb9ae:	f7ff f92b 	bl	bac08 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bb9b2:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   bb9b4:	a80b      	add	r0, sp, #44	; 0x2c
   bb9b6:	f7fe fdc8 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb9ba:	f04f 0920 	mov.w	r9, #32
   bb9be:	bb1f      	cbnz	r7, bba08 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   bb9c0:	4632      	mov	r2, r6
   bb9c2:	4b25      	ldr	r3, [pc, #148]	; (bba58 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bb9c4:	4e25      	ldr	r6, [pc, #148]	; (bba5c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   bb9c6:	4926      	ldr	r1, [pc, #152]	; (bba60 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   bb9c8:	9300      	str	r3, [sp, #0]
   bb9ca:	2032      	movs	r0, #50	; 0x32
   bb9cc:	4623      	mov	r3, r4
   bb9ce:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   bb9d2:	f7fd fdf5 	bl	b95c0 <log_message>
   bb9d6:	6830      	ldr	r0, [r6, #0]
   bb9d8:	f7fd fc2a 	bl	b9230 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bb9dc:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   bb9de:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bb9e2:	4621      	mov	r1, r4
   bb9e4:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   bb9e6:	4c1f      	ldr	r4, [pc, #124]	; (bba64 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bb9e8:	f7fd fb50 	bl	b908c <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   bb9ec:	6830      	ldr	r0, [r6, #0]
   bb9ee:	f7fd fc17 	bl	b9220 <os_mutex_recursive_lock>
        locked_ = true;
   bb9f2:	2301      	movs	r3, #1
   bb9f4:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   bb9f8:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bb9fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bb9fe:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   bba00:	a803      	add	r0, sp, #12
   bba02:	f7fe f867 	bl	b9ad4 <_ZN8particle3ble13WiringBleLockD1Ev>
   bba06:	e7bd      	b.n	bb984 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   bba08:	a803      	add	r0, sp, #12
   bba0a:	f7fe f863 	bl	b9ad4 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   bba0e:	4b16      	ldr	r3, [pc, #88]	; (bba68 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   bba10:	9300      	str	r3, [sp, #0]
   bba12:	4913      	ldr	r1, [pc, #76]	; (bba60 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   bba14:	4623      	mov	r3, r4
   bba16:	4632      	mov	r2, r6
   bba18:	2001      	movs	r0, #1
   bba1a:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   bba1e:	f7fd fdcf 	bl	b95c0 <log_message>
    if (automatic) {
   bba22:	f1b8 0f00 	cmp.w	r8, #0
   bba26:	d0ad      	beq.n	bb984 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   bba28:	4629      	mov	r1, r5
   bba2a:	4630      	mov	r0, r6
   bba2c:	f7ff ff5c 	bl	bb8e8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   bba30:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   bba34:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   bba38:	42bd      	cmp	r5, r7
   bba3a:	d005      	beq.n	bba48 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   bba3c:	4628      	mov	r0, r5
   bba3e:	2101      	movs	r1, #1
   bba40:	f7fe fb16 	bl	ba070 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   bba44:	3508      	adds	r5, #8
   bba46:	e7f7      	b.n	bba38 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   bba48:	4630      	mov	r0, r6
   bba4a:	f7fe fd9f 	bl	ba58c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bba4e:	e799      	b.n	bb984 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   bba50:	00180003 	.word	0x00180003
   bba54:	000bacc1 	.word	0x000bacc1
   bba58:	000c1770 	.word	0x000c1770
   bba5c:	2003e658 	.word	0x2003e658
   bba60:	000c161b 	.word	0x000c161b
   bba64:	fffffefc 	.word	0xfffffefc
   bba68:	000c178c 	.word	0x000c178c

000bba6c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   bba6c:	b513      	push	{r0, r1, r4, lr}
   bba6e:	4604      	mov	r4, r0
   bba70:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   bba74:	f7fe fb52 	bl	ba11c <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   bba78:	9b00      	ldr	r3, [sp, #0]
   bba7a:	9901      	ldr	r1, [sp, #4]
   bba7c:	2200      	movs	r2, #0
   bba7e:	4620      	mov	r0, r4
   bba80:	f7ff ff58 	bl	bb934 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}
   bba84:	4620      	mov	r0, r4
   bba86:	b002      	add	sp, #8
   bba88:	bd10      	pop	{r4, pc}
	...

000bba8c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bba8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   bba90:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bba92:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   bba94:	2600      	movs	r6, #0
   bba96:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   bba9a:	4b66      	ldr	r3, [pc, #408]	; (bbc34 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   bba9c:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bba9e:	4605      	mov	r5, r0
   bbaa0:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   bbaa2:	4633      	mov	r3, r6
   bbaa4:	4964      	ldr	r1, [pc, #400]	; (bbc38 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   bbaa6:	f8df 9194 	ldr.w	r9, [pc, #404]	; bbc3c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   bbaaa:	f8df 818c 	ldr.w	r8, [pc, #396]	; bbc38 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bbaae:	f8df a190 	ldr.w	sl, [pc, #400]	; bbc40 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   bbab2:	aa0c      	add	r2, sp, #48	; 0x30
   bbab4:	2001      	movs	r0, #1
   bbab6:	f7fd fd83 	bl	b95c0 <log_message>
        for (size_t i = 0; i < event->count; i++) {
   bbaba:	682b      	ldr	r3, [r5, #0]
   bbabc:	42b3      	cmp	r3, r6
   bbabe:	f240 80b5 	bls.w	bbc2c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   bbac2:	a803      	add	r0, sp, #12
   bbac4:	f7fe fa4e 	bl	b9f64 <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   bbac8:	a805      	add	r0, sp, #20
   bbaca:	f7fe fb0b 	bl	ba0e4 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   bbace:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   bbad2:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   bbad4:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   bbad6:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   bbada:	445b      	add	r3, fp
        this->size = halHandles.size;
   bbadc:	8bd9      	ldrh	r1, [r3, #30]
   bbade:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   bbae0:	8c19      	ldrh	r1, [r3, #32]
   bbae2:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   bbae4:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   bbae6:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   bbae8:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   bbaea:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   bbaec:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   bbaee:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   bbaf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   bbaf2:	8253      	strh	r3, [r2, #18]
   bbaf4:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   bbaf8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   bbafc:	429a      	cmp	r2, r3
   bbafe:	d07d      	beq.n	bbbfc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   bbb00:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   bbb02:	8ac4      	ldrh	r4, [r0, #22]
   bbb04:	428c      	cmp	r4, r1
   bbb06:	d377      	bcc.n	bbbf8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   bbb08:	8a84      	ldrh	r4, [r0, #20]
   bbb0a:	428c      	cmp	r4, r1
   bbb0c:	d874      	bhi.n	bbbf8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bbb0e:	6859      	ldr	r1, [r3, #4]
   bbb10:	9005      	str	r0, [sp, #20]
   bbb12:	a806      	add	r0, sp, #24
   bbb14:	f7fd ffaa 	bl	b9a6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   bbb18:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   bbb1c:	f8dd e00c 	ldr.w	lr, [sp, #12]
   bbb20:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bbb24:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   bbb28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bbb2a:	f8dc 3000 	ldr.w	r3, [ip]
   bbb2e:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   bbb30:	892b      	ldrh	r3, [r5, #8]
   bbb32:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   bbb36:	686b      	ldr	r3, [r5, #4]
   bbb38:	9c03      	ldr	r4, [sp, #12]
   bbb3a:	445b      	add	r3, fp
   bbb3c:	7e5b      	ldrb	r3, [r3, #25]
   bbb3e:	f013 0f02 	tst.w	r3, #2
   bbb42:	d16e      	bne.n	bbc22 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   bbb44:	686b      	ldr	r3, [r5, #4]
   bbb46:	445b      	add	r3, fp
   bbb48:	7e5b      	ldrb	r3, [r3, #25]
   bbb4a:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   bbb4c:	bf42      	ittt	mi
   bbb4e:	7923      	ldrbmi	r3, [r4, #4]
   bbb50:	f043 0304 	orrmi.w	r3, r3, #4
   bbb54:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   bbb56:	686b      	ldr	r3, [r5, #4]
   bbb58:	445b      	add	r3, fp
   bbb5a:	7e5b      	ldrb	r3, [r3, #25]
   bbb5c:	0719      	lsls	r1, r3, #28
   bbb5e:	bf42      	ittt	mi
   bbb60:	7923      	ldrbmi	r3, [r4, #4]
   bbb62:	f043 0308 	orrmi.w	r3, r3, #8
   bbb66:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   bbb68:	686b      	ldr	r3, [r5, #4]
   bbb6a:	445b      	add	r3, fp
   bbb6c:	7e5b      	ldrb	r3, [r3, #25]
   bbb6e:	06da      	lsls	r2, r3, #27
   bbb70:	bf42      	ittt	mi
   bbb72:	7923      	ldrbmi	r3, [r4, #4]
   bbb74:	f043 0310 	orrmi.w	r3, r3, #16
   bbb78:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   bbb7a:	686b      	ldr	r3, [r5, #4]
   bbb7c:	445b      	add	r3, fp
   bbb7e:	aa07      	add	r2, sp, #28
   bbb80:	7e5b      	ldrb	r3, [r3, #25]
   bbb82:	069b      	lsls	r3, r3, #26
   bbb84:	bf42      	ittt	mi
   bbb86:	7923      	ldrbmi	r3, [r4, #4]
   bbb88:	f043 0320 	orrmi.w	r3, r3, #32
   bbb8c:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   bbb8e:	686b      	ldr	r3, [r5, #4]
   bbb90:	449b      	add	fp, r3
   bbb92:	f10b 0304 	add.w	r3, fp, #4
   bbb96:	4696      	mov	lr, r2
   bbb98:	f10b 0b14 	add.w	fp, fp, #20
   bbb9c:	6818      	ldr	r0, [r3, #0]
   bbb9e:	6859      	ldr	r1, [r3, #4]
   bbba0:	4694      	mov	ip, r2
   bbba2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   bbba6:	3308      	adds	r3, #8
   bbba8:	455b      	cmp	r3, fp
   bbbaa:	4662      	mov	r2, ip
   bbbac:	d1f6      	bne.n	bbb9c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   bbbae:	6818      	ldr	r0, [r3, #0]
   bbbb0:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   bbbb4:	4671      	mov	r1, lr
   bbbb6:	a80c      	add	r0, sp, #48	; 0x30
   bbbb8:	f7fd ffd4 	bl	b9b64 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   bbbbc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   bbbc0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bbbc4:	3414      	adds	r4, #20
   bbbc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bbbc8:	f8dc 3000 	ldr.w	r3, [ip]
   bbbcc:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   bbbce:	a903      	add	r1, sp, #12
   bbbd0:	a80c      	add	r0, sp, #48	; 0x30
   bbbd2:	f7fe fc98 	bl	ba506 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bbbd6:	a90c      	add	r1, sp, #48	; 0x30
   bbbd8:	f107 0018 	add.w	r0, r7, #24
   bbbdc:	f7ff fdb1 	bl	bb742 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bbbe0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bbbe2:	a80d      	add	r0, sp, #52	; 0x34
   bbbe4:	f7fe fcb1 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbbe8:	b99c      	cbnz	r4, bbc12 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bbbea:	2320      	movs	r3, #32
   bbbec:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   bbbf0:	f8cd a000 	str.w	sl, [sp]
   bbbf4:	4623      	mov	r3, r4
   bbbf6:	e007      	b.n	bbc08 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   bbbf8:	3308      	adds	r3, #8
   bbbfa:	e77f      	b.n	bbafc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   bbbfc:	2420      	movs	r4, #32
   bbbfe:	2300      	movs	r3, #0
   bbc00:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   bbc04:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bbc08:	aa0c      	add	r2, sp, #48	; 0x30
   bbc0a:	4641      	mov	r1, r8
   bbc0c:	2032      	movs	r0, #50	; 0x32
   bbc0e:	f7fd fcd7 	bl	b95c0 <log_message>
   bbc12:	a806      	add	r0, sp, #24
   bbc14:	f7fe fc99 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbc18:	a804      	add	r0, sp, #16
   bbc1a:	f7fe fc96 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   bbc1e:	3601      	adds	r6, #1
   bbc20:	e74b      	b.n	bbaba <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   bbc22:	7923      	ldrb	r3, [r4, #4]
   bbc24:	f043 0302 	orr.w	r3, r3, #2
   bbc28:	7123      	strb	r3, [r4, #4]
   bbc2a:	e78b      	b.n	bbb44 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   bbc2c:	b015      	add	sp, #84	; 0x54
   bbc2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbc32:	bf00      	nop
   bbc34:	000c17a9 	.word	0x000c17a9
   bbc38:	000c161b 	.word	0x000c161b
   bbc3c:	000c17c4 	.word	0x000c17c4
   bbc40:	000c17f3 	.word	0x000c17f3

000bbc44 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bbc44:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bbc46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbc48:	4604      	mov	r4, r0
   bbc4a:	460d      	mov	r5, r1
   bbc4c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bbc4e:	d914      	bls.n	bbc7a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bbc50:	4290      	cmp	r0, r2
   bbc52:	d213      	bcs.n	bbc7c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bbc54:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   bbc58:	1a75      	subs	r5, r6, r1
   bbc5a:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   bbc5e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bbc60:	42b7      	cmp	r7, r6
   bbc62:	d018      	beq.n	bbc96 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bbc64:	b11c      	cbz	r4, bbc6e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bbc66:	4631      	mov	r1, r6
   bbc68:	4620      	mov	r0, r4
   bbc6a:	f7fe feb5 	bl	ba9d8 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   bbc6e:	4630      	mov	r0, r6
   bbc70:	f7fe fb72 	bl	ba358 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   bbc74:	3e24      	subs	r6, #36	; 0x24
   bbc76:	3c24      	subs	r4, #36	; 0x24
   bbc78:	e7f2      	b.n	bbc60 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bbc7a:	d00c      	beq.n	bbc96 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bbc7c:	42b5      	cmp	r5, r6
   bbc7e:	d00a      	beq.n	bbc96 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bbc80:	b11c      	cbz	r4, bbc8a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bbc82:	4629      	mov	r1, r5
   bbc84:	4620      	mov	r0, r4
   bbc86:	f7fe fea7 	bl	ba9d8 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   bbc8a:	4628      	mov	r0, r5
   bbc8c:	f7fe fb64 	bl	ba358 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   bbc90:	3524      	adds	r5, #36	; 0x24
   bbc92:	3424      	adds	r4, #36	; 0x24
   bbc94:	e7f2      	b.n	bbc7c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bbc96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bbc98 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bbc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   bbc9a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bbc9c:	4605      	mov	r5, r0
        if (n > 0) {
   bbc9e:	dd13      	ble.n	bbcc8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   bbca0:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   bbca2:	fb07 f006 	mul.w	r0, r7, r6
   bbca6:	f7fd fd67 	bl	b9778 <malloc>
            if (!d) {
   bbcaa:	4604      	mov	r4, r0
   bbcac:	b158      	cbz	r0, bbcc6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   bbcae:	e9d5 1200 	ldrd	r1, r2, [r5]
   bbcb2:	fb07 1202 	mla	r2, r7, r2, r1
   bbcb6:	f7ff ffc5 	bl	bbc44 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bbcba:	6828      	ldr	r0, [r5, #0]
   bbcbc:	f7fd fd64 	bl	b9788 <free>
        data_ = d;
   bbcc0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bbcc2:	60ae      	str	r6, [r5, #8]
        return true;
   bbcc4:	2001      	movs	r0, #1
    }
   bbcc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   bbcc8:	2400      	movs	r4, #0
   bbcca:	e7f6      	b.n	bbcba <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000bbccc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   bbccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bbcd0:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   bbcd2:	ad01      	add	r5, sp, #4
   bbcd4:	4606      	mov	r6, r0
   bbcd6:	4628      	mov	r0, r5
   bbcd8:	460c      	mov	r4, r1
   bbcda:	f7fd ff28 	bl	b9b2e <_ZN8particle10BleAddressC1Ev>
   bbcde:	a803      	add	r0, sp, #12
   bbce0:	f7fe ff55 	bl	bab8e <_ZN8particle18BleAdvertisingDataC1Ev>
   bbce4:	a806      	add	r0, sp, #24
   bbce6:	f7fe ff52 	bl	bab8e <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   bbcea:	6930      	ldr	r0, [r6, #16]
   bbcec:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   bbcee:	89f2      	ldrh	r2, [r6, #14]
   bbcf0:	ab13      	add	r3, sp, #76	; 0x4c
   bbcf2:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   bbcf4:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   bbcf8:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   bbcfa:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   bbcfc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   bbd00:	a806      	add	r0, sp, #24
   bbd02:	f7fe feb8 	bl	baa76 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   bbd06:	89b2      	ldrh	r2, [r6, #12]
   bbd08:	6871      	ldr	r1, [r6, #4]
   bbd0a:	a803      	add	r0, sp, #12
   bbd0c:	f7fe feb3 	bl	baa76 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   bbd10:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   bbd14:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   bbd16:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   bbd18:	d003      	beq.n	bbd22 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   bbd1a:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   bbd1e:	429a      	cmp	r2, r3
   bbd20:	db5c      	blt.n	bbddc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   bbd22:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   bbd26:	2b7f      	cmp	r3, #127	; 0x7f
   bbd28:	d003      	beq.n	bbd32 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   bbd2a:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   bbd2e:	429a      	cmp	r2, r3
   bbd30:	dc54      	bgt.n	bbddc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   bbd32:	f104 0150 	add.w	r1, r4, #80	; 0x50
   bbd36:	4638      	mov	r0, r7
   bbd38:	f7fe fd16 	bl	ba768 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   bbd3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   bbd3e:	2b00      	cmp	r3, #0
   bbd40:	dd52      	ble.n	bbde8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   bbd42:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   bbd44:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   bbd48:	45b1      	cmp	r9, r6
   bbd4a:	d050      	beq.n	bbdee <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   bbd4c:	4630      	mov	r0, r6
   bbd4e:	4629      	mov	r1, r5
   bbd50:	f7fd fed9 	bl	b9b06 <_ZNK8particle10BleAddresseqERKS0_>
   bbd54:	3608      	adds	r6, #8
   bbd56:	4680      	mov	r8, r0
   bbd58:	2800      	cmp	r0, #0
   bbd5a:	d0f5      	beq.n	bbd48 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   bbd5c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bbd5e:	f7fd fd13 	bl	b9788 <free>
        if (!delegator->filterByRssi(result) ||
   bbd62:	f1b8 0f00 	cmp.w	r8, #0
   bbd66:	d039      	beq.n	bbddc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   bbd68:	4629      	mov	r1, r5
   bbd6a:	4620      	mov	r0, r4
   bbd6c:	f7fe fcbf 	bl	ba6ee <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   bbd70:	b3a0      	cbz	r0, bbddc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   bbd72:	4629      	mov	r1, r5
   bbd74:	4620      	mov	r0, r4
   bbd76:	f7ff fa68 	bl	bb24a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   bbd7a:	4606      	mov	r6, r0
   bbd7c:	b370      	cbz	r0, bbddc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   bbd7e:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   bbd82:	4638      	mov	r0, r7
   bbd84:	f7fe fd3b 	bl	ba7fe <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   bbd88:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bbd8a:	2b00      	cmp	r3, #0
   bbd8c:	dd12      	ble.n	bbdb4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   bbd8e:	a806      	add	r0, sp, #24
   bbd90:	f7fe f895 	bl	b9ebe <_ZNK8particle18BleAdvertisingData10appearanceEv>
   bbd94:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   bbd96:	a803      	add	r0, sp, #12
   bbd98:	f7fe f891 	bl	b9ebe <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   bbd9c:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   bbda0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   bbda4:	429a      	cmp	r2, r3
   bbda6:	d025      	beq.n	bbdf4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   bbda8:	f833 1b02 	ldrh.w	r1, [r3], #2
   bbdac:	4588      	cmp	r8, r1
   bbdae:	d001      	beq.n	bbdb4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   bbdb0:	4288      	cmp	r0, r1
   bbdb2:	d1f7      	bne.n	bbda4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   bbdb4:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bbdb6:	f7fd fce7 	bl	b9788 <free>
              !delegator->filterByServiceUUID(result) ||
   bbdba:	b17e      	cbz	r6, bbddc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   bbdbc:	4629      	mov	r1, r5
   bbdbe:	4620      	mov	r0, r4
   bbdc0:	f7fe fd52 	bl	ba868 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   bbdc4:	b150      	cbz	r0, bbddc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   bbdc6:	6a23      	ldr	r3, [r4, #32]
   bbdc8:	b1b3      	cbz	r3, bbdf8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   bbdca:	6963      	ldr	r3, [r4, #20]
   bbdcc:	9513      	str	r5, [sp, #76]	; 0x4c
   bbdce:	3301      	adds	r3, #1
   bbdd0:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bbdd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bbdd4:	4639      	mov	r1, r7
   bbdd6:	f104 0018 	add.w	r0, r4, #24
   bbdda:	4798      	blx	r3
            return;
   bbddc:	4628      	mov	r0, r5
   bbdde:	f7fe fabb 	bl	ba358 <_ZN8particle13BleScanResultD1Ev>
    }
   bbde2:	b01d      	add	sp, #116	; 0x74
   bbde4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   bbde8:	f04f 0801 	mov.w	r8, #1
   bbdec:	e7b6      	b.n	bbd5c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   bbdee:	f04f 0800 	mov.w	r8, #0
   bbdf2:	e7b3      	b.n	bbd5c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   bbdf4:	2600      	movs	r6, #0
   bbdf6:	e7dd      	b.n	bbdb4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   bbdf8:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   bbdfc:	f1b8 0f00 	cmp.w	r8, #0
   bbe00:	d007      	beq.n	bbe12 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   bbe02:	6963      	ldr	r3, [r4, #20]
   bbe04:	3301      	adds	r3, #1
   bbe06:	6163      	str	r3, [r4, #20]
   bbe08:	4629      	mov	r1, r5
   bbe0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   bbe0c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bbe10:	e7e3      	b.n	bbdda <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   bbe12:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   bbe16:	f1bc 0f00 	cmp.w	ip, #0
   bbe1a:	d025      	beq.n	bbe68 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   bbe1c:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bbe1e:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   bbe20:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bbe22:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   bbe24:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bbe26:	d8d9      	bhi.n	bbddc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   bbe28:	2224      	movs	r2, #36	; 0x24
   bbe2a:	4353      	muls	r3, r2
    address_ = addr.address_;
   bbe2c:	462a      	mov	r2, r5
   bbe2e:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   bbe30:	3b24      	subs	r3, #36	; 0x24
   bbe32:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   bbe36:	f84c 0003 	str.w	r0, [ip, r3]
   bbe3a:	6071      	str	r1, [r6, #4]
class BleScanResult {
   bbe3c:	f106 0008 	add.w	r0, r6, #8
   bbe40:	a903      	add	r1, sp, #12
   bbe42:	f7fe fde0 	bl	baa06 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   bbe46:	a906      	add	r1, sp, #24
   bbe48:	f106 0014 	add.w	r0, r6, #20
   bbe4c:	f7fe fddb 	bl	baa06 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   bbe50:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   bbe54:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   bbe58:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   bbe5c:	429a      	cmp	r2, r3
   bbe5e:	d3bd      	bcc.n	bbddc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   bbe60:	4640      	mov	r0, r8
   bbe62:	f7fd f909 	bl	b9078 <hal_ble_gap_stop_scan>
   bbe66:	e7b9      	b.n	bbddc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   bbe68:	e895 0003 	ldmia.w	r5, {r0, r1}
   bbe6c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   bbe70:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   bbe74:	a903      	add	r1, sp, #12
   bbe76:	a80c      	add	r0, sp, #48	; 0x30
   bbe78:	f7fe fd91 	bl	ba99e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   bbe7c:	a906      	add	r1, sp, #24
   bbe7e:	a80f      	add	r0, sp, #60	; 0x3c
   bbe80:	f7fe fd8d 	bl	ba99e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   bbe84:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   bbe88:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   bbe8c:	4641      	mov	r1, r8
   bbe8e:	4638      	mov	r0, r7
   bbe90:	6866      	ldr	r6, [r4, #4]
   bbe92:	f7fe fda1 	bl	ba9d8 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bbe96:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bbe9a:	4299      	cmp	r1, r3
   bbe9c:	da10      	bge.n	bbec0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   bbe9e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bbea0:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   bbea2:	2224      	movs	r2, #36	; 0x24
   bbea4:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   bbea8:	f106 0024 	add.w	r0, r6, #36	; 0x24
   bbeac:	fb02 3201 	mla	r2, r2, r1, r3
   bbeb0:	4631      	mov	r1, r6
   bbeb2:	f7ff fec7 	bl	bbc44 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bbeb6:	b986      	cbnz	r6, bbeda <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   bbeb8:	6863      	ldr	r3, [r4, #4]
   bbeba:	3301      	adds	r3, #1
   bbebc:	6063      	str	r3, [r4, #4]
    return true;
   bbebe:	e005      	b.n	bbecc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bbec0:	3101      	adds	r1, #1
   bbec2:	4620      	mov	r0, r4
   bbec4:	f7ff fee8 	bl	bbc98 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bbec8:	2800      	cmp	r0, #0
   bbeca:	d1e8      	bne.n	bbe9e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   bbecc:	4638      	mov	r0, r7
   bbece:	f7fe fa43 	bl	ba358 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   bbed2:	4640      	mov	r0, r8
   bbed4:	f7fe fa40 	bl	ba358 <_ZN8particle13BleScanResultD1Ev>
   bbed8:	e780      	b.n	bbddc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   bbeda:	4639      	mov	r1, r7
   bbedc:	4630      	mov	r0, r6
   bbede:	f7fe fd7b 	bl	ba9d8 <_ZN8particle13BleScanResultC1EOS0_>
   bbee2:	e7e9      	b.n	bbeb8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000bbee4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   bbee4:	4802      	ldr	r0, [pc, #8]	; (bbef0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bbee6:	2300      	movs	r3, #0
   bbee8:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   bbeea:	f7fd b991 	b.w	b9210 <os_mutex_recursive_create>
   bbeee:	bf00      	nop
   bbef0:	2003e658 	.word	0x2003e658

000bbef4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bbef4:	2200      	movs	r2, #0
   bbef6:	6840      	ldr	r0, [r0, #4]
   bbef8:	4611      	mov	r1, r2
   bbefa:	f7fd bbf5 	b.w	b96e8 <network_ready>

000bbefe <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bbefe:	2200      	movs	r2, #0
   bbf00:	6840      	ldr	r0, [r0, #4]
   bbf02:	4611      	mov	r1, r2
   bbf04:	f7fd bc10 	b.w	b9728 <network_listening>

000bbf08 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bbf08:	2200      	movs	r2, #0
   bbf0a:	6840      	ldr	r0, [r0, #4]
   bbf0c:	4611      	mov	r1, r2
   bbf0e:	f7fd bc1b 	b.w	b9748 <network_get_listen_timeout>

000bbf12 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bbf12:	6840      	ldr	r0, [r0, #4]
   bbf14:	2200      	movs	r2, #0
   bbf16:	f7fd bc0f 	b.w	b9738 <network_set_listen_timeout>

000bbf1a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bbf1a:	6840      	ldr	r0, [r0, #4]
   bbf1c:	2200      	movs	r2, #0
   bbf1e:	f081 0101 	eor.w	r1, r1, #1
   bbf22:	f7fd bbf9 	b.w	b9718 <network_listen>

000bbf26 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bbf26:	2300      	movs	r3, #0
   bbf28:	6840      	ldr	r0, [r0, #4]
   bbf2a:	461a      	mov	r2, r3
   bbf2c:	4619      	mov	r1, r3
   bbf2e:	f7fd bbeb 	b.w	b9708 <network_off>

000bbf32 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bbf32:	2300      	movs	r3, #0
   bbf34:	6840      	ldr	r0, [r0, #4]
   bbf36:	461a      	mov	r2, r3
   bbf38:	4619      	mov	r1, r3
   bbf3a:	f7fd bbdd 	b.w	b96f8 <network_on>

000bbf3e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bbf3e:	2200      	movs	r2, #0
   bbf40:	6840      	ldr	r0, [r0, #4]
   bbf42:	4611      	mov	r1, r2
   bbf44:	f7fd bbc0 	b.w	b96c8 <network_connecting>

000bbf48 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bbf48:	6840      	ldr	r0, [r0, #4]
   bbf4a:	2200      	movs	r2, #0
   bbf4c:	2102      	movs	r1, #2
   bbf4e:	f7fd bbc3 	b.w	b96d8 <network_disconnect>

000bbf52 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bbf52:	2300      	movs	r3, #0
   bbf54:	6840      	ldr	r0, [r0, #4]
   bbf56:	461a      	mov	r2, r3
   bbf58:	f7fd bbae 	b.w	b96b8 <network_connect>

000bbf5c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bbf5c:	4b08      	ldr	r3, [pc, #32]	; (bbf80 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bbf5e:	b510      	push	{r4, lr}
   bbf60:	2428      	movs	r4, #40	; 0x28
   bbf62:	4622      	mov	r2, r4
   bbf64:	4618      	mov	r0, r3
   bbf66:	2100      	movs	r1, #0
   bbf68:	f002 f97d 	bl	be266 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bbf6c:	4b05      	ldr	r3, [pc, #20]	; (bbf84 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bbf6e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bbf70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbf74:	6042      	str	r2, [r0, #4]
   bbf76:	2204      	movs	r2, #4
   bbf78:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bbf7a:	4a03      	ldr	r2, [pc, #12]	; (bbf88 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bbf7c:	601a      	str	r2, [r3, #0]
   bbf7e:	bd10      	pop	{r4, pc}
   bbf80:	2003e668 	.word	0x2003e668
   bbf84:	2003e660 	.word	0x2003e660
   bbf88:	000c189c 	.word	0x000c189c

000bbf8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bbf8c:	4770      	bx	lr

000bbf8e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bbf8e:	2000      	movs	r0, #0
   bbf90:	4770      	bx	lr

000bbf92 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bbf92:	b510      	push	{r4, lr}
   bbf94:	2110      	movs	r1, #16
   bbf96:	4604      	mov	r4, r0
   bbf98:	f7f8 f881 	bl	b409e <_ZdlPvj>
   bbf9c:	4620      	mov	r0, r4
   bbf9e:	bd10      	pop	{r4, pc}

000bbfa0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bbfa0:	b508      	push	{r3, lr}
      { delete this; }
   bbfa2:	f7ff fff6 	bl	bbf92 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bbfa6:	bd08      	pop	{r3, pc}

000bbfa8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bbfa8:	b530      	push	{r4, r5, lr}
        type_(type) {
   bbfaa:	2200      	movs	r2, #0
   bbfac:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bbfb0:	6002      	str	r2, [r0, #0]
   bbfb2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   bbfb4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bbfb6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bbfb8:	680c      	ldr	r4, [r1, #0]
   bbfba:	8085      	strh	r5, [r0, #4]
   bbfbc:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bbfbe:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bbfc0:	bd30      	pop	{r4, r5, pc}

000bbfc2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bbfc2:	b510      	push	{r4, lr}
   bbfc4:	4604      	mov	r4, r0
    free((void*)msg_);
   bbfc6:	6800      	ldr	r0, [r0, #0]
   bbfc8:	f7fd fbde 	bl	b9788 <free>
}
   bbfcc:	4620      	mov	r0, r4
   bbfce:	bd10      	pop	{r4, pc}

000bbfd0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bbfd0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bbfd2:	68c4      	ldr	r4, [r0, #12]
   bbfd4:	b1f4      	cbz	r4, bc014 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bbfd6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bbfd8:	2b02      	cmp	r3, #2
   bbfda:	d103      	bne.n	bbfe4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bbfdc:	f104 000c 	add.w	r0, r4, #12
   bbfe0:	f7ff ffef 	bl	bbfc2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bbfe4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bbfe6:	b135      	cbz	r5, bbff6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bbfe8:	4628      	mov	r0, r5
   bbfea:	f7f8 f9b3 	bl	b4354 <_ZNSt14_Function_baseD1Ev>
   bbfee:	2110      	movs	r1, #16
   bbff0:	4628      	mov	r0, r5
   bbff2:	f7f8 f854 	bl	b409e <_ZdlPvj>
   bbff6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bbff8:	b135      	cbz	r5, bc008 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bbffa:	4628      	mov	r0, r5
   bbffc:	f7f8 f9aa 	bl	b4354 <_ZNSt14_Function_baseD1Ev>
   bc000:	2110      	movs	r1, #16
   bc002:	4628      	mov	r0, r5
   bc004:	f7f8 f84b 	bl	b409e <_ZdlPvj>
   bc008:	4620      	mov	r0, r4
   bc00a:	2114      	movs	r1, #20
   bc00c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc010:	f7f8 b845 	b.w	b409e <_ZdlPvj>
   bc014:	bd38      	pop	{r3, r4, r5, pc}

000bc016 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bc016:	680b      	ldr	r3, [r1, #0]
   bc018:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bc01a:	684b      	ldr	r3, [r1, #4]
   bc01c:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bc01e:	b113      	cbz	r3, bc026 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bc020:	685a      	ldr	r2, [r3, #4]
   bc022:	3201      	adds	r2, #1
   bc024:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bc026:	4770      	bx	lr

000bc028 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bc028:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc02a:	4604      	mov	r4, r0
   bc02c:	4668      	mov	r0, sp
   bc02e:	460d      	mov	r5, r1
   bc030:	f7ff fff1 	bl	bc016 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc034:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bc036:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc038:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bc03a:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bc03c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bc03e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bc040:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   bc042:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bc044:	f7fe fa81 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bc048:	b135      	cbz	r5, bc058 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bc04a:	1d28      	adds	r0, r5, #4
   bc04c:	f7fe fa7d 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc050:	2108      	movs	r1, #8
   bc052:	4628      	mov	r0, r5
   bc054:	f7f8 f823 	bl	b409e <_ZdlPvj>
        return p;
    }
   bc058:	4620      	mov	r0, r4
   bc05a:	b003      	add	sp, #12
   bc05c:	bd30      	pop	{r4, r5, pc}

000bc05e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bc05e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bc060:	b510      	push	{r4, lr}
      if (_M_empty())
   bc062:	b90a      	cbnz	r2, bc068 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bc064:	f001 fa2e 	bl	bd4c4 <_ZSt25__throw_bad_function_callv>
    }
   bc068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc06c:	68c3      	ldr	r3, [r0, #12]
   bc06e:	4718      	bx	r3

000bc070 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bc070:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bc072:	6800      	ldr	r0, [r0, #0]
   bc074:	f100 0110 	add.w	r1, r0, #16
   bc078:	f7ff fff1 	bl	bc05e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bc07c:	bd08      	pop	{r3, pc}

000bc07e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bc07e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bc080:	b510      	push	{r4, lr}
      if (_M_empty())
   bc082:	b90a      	cbnz	r2, bc088 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bc084:	f001 fa1e 	bl	bd4c4 <_ZSt25__throw_bad_function_callv>
    }
   bc088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc08c:	68c3      	ldr	r3, [r0, #12]
   bc08e:	4718      	bx	r3

000bc090 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bc090:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bc092:	6800      	ldr	r0, [r0, #0]
   bc094:	f100 0110 	add.w	r1, r0, #16
   bc098:	f7ff fff1 	bl	bc07e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bc09c:	bd08      	pop	{r3, pc}
	...

000bc0a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bc0a0:	b538      	push	{r3, r4, r5, lr}
   bc0a2:	2300      	movs	r3, #0
   bc0a4:	4604      	mov	r4, r0
   bc0a6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc0a8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bc0aa:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc0ac:	f7f7 fff3 	bl	b4096 <_Znwj>
   bc0b0:	b128      	cbz	r0, bc0be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bc0b2:	2301      	movs	r3, #1
   bc0b4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bc0b8:	4b02      	ldr	r3, [pc, #8]	; (bc0c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bc0ba:	6003      	str	r3, [r0, #0]
   bc0bc:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc0be:	6020      	str	r0, [r4, #0]
	}
   bc0c0:	4620      	mov	r0, r4
   bc0c2:	bd38      	pop	{r3, r4, r5, pc}
   bc0c4:	000c18d8 	.word	0x000c18d8

000bc0c8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bc0c8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bc0ca:	2300      	movs	r3, #0
   bc0cc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bc0ce:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bc0d0:	4604      	mov	r4, r0
   bc0d2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bc0d4:	b12b      	cbz	r3, bc0e2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bc0d6:	2202      	movs	r2, #2
   bc0d8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bc0da:	68eb      	ldr	r3, [r5, #12]
   bc0dc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bc0de:	68ab      	ldr	r3, [r5, #8]
   bc0e0:	60a3      	str	r3, [r4, #8]
    }
   bc0e2:	4620      	mov	r0, r4
   bc0e4:	bd38      	pop	{r3, r4, r5, pc}
	...

000bc0e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bc0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc0ea:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   bc0ec:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bc0ee:	4668      	mov	r0, sp
   bc0f0:	f7ff ff5a 	bl	bbfa8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bc0f4:	f04f 0302 	mov.w	r3, #2
   bc0f8:	e8d4 2f4f 	ldrexb	r2, [r4]
   bc0fc:	2a00      	cmp	r2, #0
   bc0fe:	d103      	bne.n	bc108 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bc100:	e8c4 3f41 	strexb	r1, r3, [r4]
   bc104:	2900      	cmp	r1, #0
   bc106:	d1f7      	bne.n	bc0f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bc108:	d125      	bne.n	bc156 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bc10a:	f104 050c 	add.w	r5, r4, #12
   bc10e:	4669      	mov	r1, sp
   bc110:	4628      	mov	r0, r5
   bc112:	f7ff ff49 	bl	bbfa8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bc116:	f3bf 8f5b 	dmb	ish
   bc11a:	2301      	movs	r3, #1
   bc11c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bc11e:	2000      	movs	r0, #0
   bc120:	f104 0308 	add.w	r3, r4, #8
   bc124:	f3bf 8f5b 	dmb	ish
   bc128:	e853 6f00 	ldrex	r6, [r3]
   bc12c:	e843 0200 	strex	r2, r0, [r3]
   bc130:	2a00      	cmp	r2, #0
   bc132:	d1f9      	bne.n	bc128 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bc134:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bc138:	b16e      	cbz	r6, bc156 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bc13a:	f7fd fa61 	bl	b9600 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bc13e:	b178      	cbz	r0, bc160 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bc140:	4629      	mov	r1, r5
   bc142:	4630      	mov	r0, r6
   bc144:	f7ff ff8b 	bl	bc05e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bc148:	4630      	mov	r0, r6
   bc14a:	f7f8 f903 	bl	b4354 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bc14e:	2110      	movs	r1, #16
   bc150:	4630      	mov	r0, r6
   bc152:	f7f7 ffa4 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bc156:	4668      	mov	r0, sp
   bc158:	f7ff ff33 	bl	bbfc2 <_ZN8particle5ErrorD1Ev>
    }
   bc15c:	b009      	add	sp, #36	; 0x24
   bc15e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bc160:	4631      	mov	r1, r6
   bc162:	a802      	add	r0, sp, #8
   bc164:	f7ff ffb0 	bl	bc0c8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bc168:	68e0      	ldr	r0, [r4, #12]
   bc16a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bc16e:	b108      	cbz	r0, bc174 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bc170:	f002 f910 	bl	be394 <strdup>
        type_(type) {
   bc174:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bc176:	2010      	movs	r0, #16
   bc178:	f8ad 501c 	strh.w	r5, [sp, #28]
   bc17c:	f7f7 ff8b 	bl	b4096 <_Znwj>
   bc180:	4605      	mov	r5, r0
   bc182:	b1e8      	cbz	r0, bc1c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bc184:	2700      	movs	r7, #0
   bc186:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc188:	2018      	movs	r0, #24
   bc18a:	f7f7 ff84 	bl	b4096 <_Znwj>
   bc18e:	4604      	mov	r4, r0
   bc190:	b188      	cbz	r0, bc1b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bc192:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bc194:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bc196:	a802      	add	r0, sp, #8
   bc198:	f7ff f8b0 	bl	bb2fc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc19c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bc19e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc1a0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc1a2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bc1a4:	9204      	str	r2, [sp, #16]
   bc1a6:	a906      	add	r1, sp, #24
   bc1a8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bc1aa:	60e3      	str	r3, [r4, #12]
   bc1ac:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bc1b0:	9205      	str	r2, [sp, #20]
   bc1b2:	f7ff fef9 	bl	bbfa8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bc1b6:	4b08      	ldr	r3, [pc, #32]	; (bc1d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bc1b8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bc1ba:	4b08      	ldr	r3, [pc, #32]	; (bc1dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc1bc:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bc1be:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bc1c0:	a806      	add	r0, sp, #24
   bc1c2:	f7ff fefe 	bl	bbfc2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bc1c6:	a802      	add	r0, sp, #8
   bc1c8:	f7f8 f8c4 	bl	b4354 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bc1cc:	2200      	movs	r2, #0
   bc1ce:	4629      	mov	r1, r5
   bc1d0:	4803      	ldr	r0, [pc, #12]	; (bc1e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bc1d2:	f7fd fa1d 	bl	b9610 <application_thread_invoke>
   bc1d6:	e7b7      	b.n	bc148 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bc1d8:	000bc071 	.word	0x000bc071
   bc1dc:	000bc2f5 	.word	0x000bc2f5
   bc1e0:	000b984f 	.word	0x000b984f

000bc1e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bc1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc1e8:	b08b      	sub	sp, #44	; 0x2c
   bc1ea:	4605      	mov	r5, r0
   bc1ec:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bc1f0:	460f      	mov	r7, r1
   bc1f2:	4690      	mov	r8, r2
   bc1f4:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bc1f6:	f7fd fa37 	bl	b9668 <spark_cloud_flag_connected>
   bc1fa:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bc1fc:	4683      	mov	fp, r0
   bc1fe:	bb38      	cbnz	r0, bc250 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bc200:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bc204:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bc206:	a905      	add	r1, sp, #20
   bc208:	4630      	mov	r0, r6
   bc20a:	f8ad 3018 	strh.w	r3, [sp, #24]
   bc20e:	f7ff fecb 	bl	bbfa8 <_ZN8particle5ErrorC1EOS0_>
   bc212:	2014      	movs	r0, #20
   bc214:	f7f7 ff3f 	bl	b4096 <_Znwj>
   bc218:	4604      	mov	r4, r0
   bc21a:	b148      	cbz	r0, bc230 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bc21c:	2302      	movs	r3, #2
   bc21e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bc220:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bc222:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bc226:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bc228:	4631      	mov	r1, r6
   bc22a:	300c      	adds	r0, #12
   bc22c:	f7ff febc 	bl	bbfa8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc230:	4628      	mov	r0, r5
	: __shared_count(__p)
   bc232:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc234:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bc238:	f7ff ff32 	bl	bc0a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bc23c:	4630      	mov	r0, r6
   bc23e:	f7ff fec0 	bl	bbfc2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bc242:	a805      	add	r0, sp, #20
   bc244:	f7ff febd 	bl	bbfc2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   bc248:	4628      	mov	r0, r5
   bc24a:	b00b      	add	sp, #44	; 0x2c
   bc24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bc250:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bc252:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bc254:	2014      	movs	r0, #20
   bc256:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bc25a:	9307      	str	r3, [sp, #28]
   bc25c:	f7f7 ff1b 	bl	b4096 <_Znwj>
   bc260:	4601      	mov	r1, r0
   bc262:	b118      	cbz	r0, bc26c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bc264:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bc268:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bc26a:	7044      	strb	r4, [r0, #1]
   bc26c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc26e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bc270:	f7ff ff16 	bl	bc0a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bc274:	4b1e      	ldr	r3, [pc, #120]	; (bc2f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bc276:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bc278:	2008      	movs	r0, #8
   bc27a:	f7f7 ff0c 	bl	b4096 <_Znwj>
   bc27e:	4604      	mov	r4, r0
   bc280:	b110      	cbz	r0, bc288 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bc282:	a903      	add	r1, sp, #12
   bc284:	f7ff fec7 	bl	bc016 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bc288:	9600      	str	r6, [sp, #0]
   bc28a:	fa5f f38a 	uxtb.w	r3, sl
   bc28e:	464a      	mov	r2, r9
   bc290:	4641      	mov	r1, r8
   bc292:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bc294:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bc296:	f7fd f9ef 	bl	b9678 <spark_send_event>
   bc29a:	b9b8      	cbnz	r0, bc2cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bc29c:	9b03      	ldr	r3, [sp, #12]
   bc29e:	785b      	ldrb	r3, [r3, #1]
   bc2a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bc2a4:	b993      	cbnz	r3, bc2cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bc2a6:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bc2aa:	a905      	add	r1, sp, #20
   bc2ac:	a803      	add	r0, sp, #12
   bc2ae:	9205      	str	r2, [sp, #20]
   bc2b0:	f8ad 3018 	strh.w	r3, [sp, #24]
   bc2b4:	f7ff ff18 	bl	bc0e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bc2b8:	a805      	add	r0, sp, #20
   bc2ba:	f7ff fe82 	bl	bbfc2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bc2be:	a805      	add	r0, sp, #20
   bc2c0:	9909      	ldr	r1, [sp, #36]	; 0x24
   bc2c2:	f7ff feb1 	bl	bc028 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bc2c6:	a806      	add	r0, sp, #24
   bc2c8:	f7fe f93f 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc2cc:	a903      	add	r1, sp, #12
   bc2ce:	a805      	add	r0, sp, #20
   bc2d0:	f7ff fea1 	bl	bc016 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc2d4:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bc2d6:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc2d8:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bc2da:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bc2dc:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bc2de:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bc2e0:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bc2e2:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bc2e4:	f7fe f931 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc2e8:	a804      	add	r0, sp, #16
   bc2ea:	f7fe f92e 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bc2ee:	e7ab      	b.n	bc248 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bc2f0:	000bc371 	.word	0x000bc371

000bc2f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bc2f4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bc2f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc2f8:	4605      	mov	r5, r0
	switch (__op)
   bc2fa:	d103      	bne.n	bc304 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bc2fc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bc2fe:	6003      	str	r3, [r0, #0]
      }
   bc300:	2000      	movs	r0, #0
   bc302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bc304:	2a02      	cmp	r2, #2
   bc306:	d010      	beq.n	bc32a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bc308:	2a03      	cmp	r2, #3
   bc30a:	d1f9      	bne.n	bc300 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bc30c:	6804      	ldr	r4, [r0, #0]
   bc30e:	2c00      	cmp	r4, #0
   bc310:	d0f6      	beq.n	bc300 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bc312:	f104 0010 	add.w	r0, r4, #16
   bc316:	f7ff fe54 	bl	bbfc2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bc31a:	4620      	mov	r0, r4
   bc31c:	f7f8 f81a 	bl	b4354 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bc320:	2118      	movs	r1, #24
   bc322:	4620      	mov	r0, r4
   bc324:	f7f7 febb 	bl	b409e <_ZdlPvj>
   bc328:	e7ea      	b.n	bc300 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bc32a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bc32c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bc32e:	f7f7 feb2 	bl	b4096 <_Znwj>
   bc332:	4604      	mov	r4, r0
   bc334:	b150      	cbz	r0, bc34c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bc336:	4631      	mov	r1, r6
   bc338:	f7ff fec6 	bl	bc0c8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bc33c:	6930      	ldr	r0, [r6, #16]
   bc33e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bc342:	b108      	cbz	r0, bc348 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bc344:	f002 f826 	bl	be394 <strdup>
        type_(type) {
   bc348:	6120      	str	r0, [r4, #16]
   bc34a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bc34c:	602c      	str	r4, [r5, #0]
	}
   bc34e:	e7d7      	b.n	bc300 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bc350 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bc350:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bc352:	2300      	movs	r3, #0
   bc354:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bc356:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bc358:	4604      	mov	r4, r0
   bc35a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bc35c:	b12b      	cbz	r3, bc36a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bc35e:	2202      	movs	r2, #2
   bc360:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bc362:	68eb      	ldr	r3, [r5, #12]
   bc364:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bc366:	68ab      	ldr	r3, [r5, #8]
   bc368:	60a3      	str	r3, [r4, #8]
    }
   bc36a:	4620      	mov	r0, r4
   bc36c:	bd38      	pop	{r3, r4, r5, pc}
	...

000bc370 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bc370:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc372:	b089      	sub	sp, #36	; 0x24
   bc374:	4604      	mov	r4, r0
   bc376:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bc378:	a801      	add	r0, sp, #4
   bc37a:	4611      	mov	r1, r2
   bc37c:	f7ff fe54 	bl	bc028 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bc380:	b1a4      	cbz	r4, bc3ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bc382:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bc384:	b11d      	cbz	r5, bc38e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bc386:	4628      	mov	r0, r5
   bc388:	f002 f804 	bl	be394 <strdup>
   bc38c:	4605      	mov	r5, r0
   bc38e:	a801      	add	r0, sp, #4
   bc390:	a903      	add	r1, sp, #12
        type_(type) {
   bc392:	9503      	str	r5, [sp, #12]
   bc394:	f8ad 4010 	strh.w	r4, [sp, #16]
   bc398:	f7ff fea6 	bl	bc0e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bc39c:	a803      	add	r0, sp, #12
   bc39e:	f7ff fe10 	bl	bbfc2 <_ZN8particle5ErrorD1Ev>
   bc3a2:	a802      	add	r0, sp, #8
   bc3a4:	f7fe f8d1 	bl	ba54a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bc3a8:	b009      	add	sp, #36	; 0x24
   bc3aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bc3ac:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bc3ae:	2301      	movs	r3, #1
   bc3b0:	e8d5 2f4f 	ldrexb	r2, [r5]
   bc3b4:	2a00      	cmp	r2, #0
   bc3b6:	d103      	bne.n	bc3c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bc3b8:	e8c5 3f41 	strexb	r1, r3, [r5]
   bc3bc:	2900      	cmp	r1, #0
   bc3be:	d1f7      	bne.n	bc3b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bc3c0:	d1ef      	bne.n	bc3a2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bc3c2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bc3c4:	f3bf 8f5b 	dmb	ish
   bc3c8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bc3ca:	1d2b      	adds	r3, r5, #4
   bc3cc:	f3bf 8f5b 	dmb	ish
   bc3d0:	e853 6f00 	ldrex	r6, [r3]
   bc3d4:	e843 4200 	strex	r2, r4, [r3]
   bc3d8:	2a00      	cmp	r2, #0
   bc3da:	d1f9      	bne.n	bc3d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bc3dc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bc3e0:	2e00      	cmp	r6, #0
   bc3e2:	d0de      	beq.n	bc3a2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bc3e4:	4620      	mov	r0, r4
   bc3e6:	f7fd f90b 	bl	b9600 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bc3ea:	4607      	mov	r7, r0
   bc3ec:	b160      	cbz	r0, bc408 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bc3ee:	f105 010c 	add.w	r1, r5, #12
   bc3f2:	4630      	mov	r0, r6
   bc3f4:	f7ff fe43 	bl	bc07e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bc3f8:	4630      	mov	r0, r6
   bc3fa:	f7f7 ffab 	bl	b4354 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bc3fe:	2110      	movs	r1, #16
   bc400:	4630      	mov	r0, r6
   bc402:	f7f7 fe4c 	bl	b409e <_ZdlPvj>
   bc406:	e7cc      	b.n	bc3a2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bc408:	4631      	mov	r1, r6
   bc40a:	a803      	add	r0, sp, #12
   bc40c:	f7ff ffa0 	bl	bc350 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bc410:	7b2b      	ldrb	r3, [r5, #12]
   bc412:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bc416:	2010      	movs	r0, #16
   bc418:	f7f7 fe3d 	bl	b4096 <_Znwj>
   bc41c:	4605      	mov	r5, r0
   bc41e:	b1d0      	cbz	r0, bc456 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bc420:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc422:	2014      	movs	r0, #20
   bc424:	f7f7 fe37 	bl	b4096 <_Znwj>
   bc428:	4604      	mov	r4, r0
   bc42a:	b178      	cbz	r0, bc44c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bc42c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bc42e:	4601      	mov	r1, r0
   bc430:	a803      	add	r0, sp, #12
   bc432:	f7fe ff63 	bl	bb2fc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc436:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bc438:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc43a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc43c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bc43e:	9205      	str	r2, [sp, #20]
   bc440:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bc442:	60e3      	str	r3, [r4, #12]
   bc444:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bc448:	9206      	str	r2, [sp, #24]
   bc44a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bc44c:	4b06      	ldr	r3, [pc, #24]	; (bc468 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bc44e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bc450:	4b06      	ldr	r3, [pc, #24]	; (bc46c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc452:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bc454:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bc456:	a803      	add	r0, sp, #12
   bc458:	f7f7 ff7c 	bl	b4354 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bc45c:	2200      	movs	r2, #0
   bc45e:	4629      	mov	r1, r5
   bc460:	4803      	ldr	r0, [pc, #12]	; (bc470 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bc462:	f7fd f8d5 	bl	b9610 <application_thread_invoke>
   bc466:	e7c7      	b.n	bc3f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bc468:	000bc091 	.word	0x000bc091
   bc46c:	000bc475 	.word	0x000bc475
   bc470:	000b984f 	.word	0x000b984f

000bc474 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bc474:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bc476:	b570      	push	{r4, r5, r6, lr}
   bc478:	4604      	mov	r4, r0
	switch (__op)
   bc47a:	d103      	bne.n	bc484 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bc47c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bc47e:	6003      	str	r3, [r0, #0]
      }
   bc480:	2000      	movs	r0, #0
   bc482:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bc484:	2a02      	cmp	r2, #2
   bc486:	d00c      	beq.n	bc4a2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bc488:	2a03      	cmp	r2, #3
   bc48a:	d1f9      	bne.n	bc480 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bc48c:	6804      	ldr	r4, [r0, #0]
   bc48e:	2c00      	cmp	r4, #0
   bc490:	d0f6      	beq.n	bc480 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bc492:	4620      	mov	r0, r4
   bc494:	f7f7 ff5e 	bl	b4354 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bc498:	2114      	movs	r1, #20
   bc49a:	4620      	mov	r0, r4
   bc49c:	f7f7 fdff 	bl	b409e <_ZdlPvj>
   bc4a0:	e7ee      	b.n	bc480 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bc4a2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bc4a4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bc4a6:	f7f7 fdf6 	bl	b4096 <_Znwj>
   bc4aa:	4605      	mov	r5, r0
   bc4ac:	b120      	cbz	r0, bc4b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bc4ae:	4631      	mov	r1, r6
   bc4b0:	f7ff ff4e 	bl	bc350 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bc4b4:	7c33      	ldrb	r3, [r6, #16]
   bc4b6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bc4b8:	6025      	str	r5, [r4, #0]
	}
   bc4ba:	e7e1      	b.n	bc480 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bc4bc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bc4bc:	2200      	movs	r2, #0
   bc4be:	6840      	ldr	r0, [r0, #4]
   bc4c0:	4611      	mov	r1, r2
   bc4c2:	f7fd b931 	b.w	b9728 <network_listening>

000bc4c6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bc4c6:	2200      	movs	r2, #0
   bc4c8:	6840      	ldr	r0, [r0, #4]
   bc4ca:	4611      	mov	r1, r2
   bc4cc:	f7fd b93c 	b.w	b9748 <network_get_listen_timeout>

000bc4d0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bc4d0:	6840      	ldr	r0, [r0, #4]
   bc4d2:	2200      	movs	r2, #0
   bc4d4:	f7fd b930 	b.w	b9738 <network_set_listen_timeout>

000bc4d8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bc4d8:	6840      	ldr	r0, [r0, #4]
   bc4da:	2200      	movs	r2, #0
   bc4dc:	f081 0101 	eor.w	r1, r1, #1
   bc4e0:	f7fd b91a 	b.w	b9718 <network_listen>

000bc4e4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bc4e4:	2300      	movs	r3, #0
   bc4e6:	6840      	ldr	r0, [r0, #4]
   bc4e8:	461a      	mov	r2, r3
   bc4ea:	4619      	mov	r1, r3
   bc4ec:	f7fd b90c 	b.w	b9708 <network_off>

000bc4f0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bc4f0:	2300      	movs	r3, #0
   bc4f2:	6840      	ldr	r0, [r0, #4]
   bc4f4:	461a      	mov	r2, r3
   bc4f6:	4619      	mov	r1, r3
   bc4f8:	f7fd b8fe 	b.w	b96f8 <network_on>

000bc4fc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bc4fc:	2200      	movs	r2, #0
   bc4fe:	6840      	ldr	r0, [r0, #4]
   bc500:	4611      	mov	r1, r2
   bc502:	f7fd b8f1 	b.w	b96e8 <network_ready>

000bc506 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bc506:	2200      	movs	r2, #0
   bc508:	6840      	ldr	r0, [r0, #4]
   bc50a:	4611      	mov	r1, r2
   bc50c:	f7fd b8dc 	b.w	b96c8 <network_connecting>

000bc510 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bc510:	6840      	ldr	r0, [r0, #4]
   bc512:	2200      	movs	r2, #0
   bc514:	2102      	movs	r1, #2
   bc516:	f7fd b8df 	b.w	b96d8 <network_disconnect>

000bc51a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bc51a:	2300      	movs	r3, #0
   bc51c:	6840      	ldr	r0, [r0, #4]
   bc51e:	461a      	mov	r2, r3
   bc520:	f7fd b8ca 	b.w	b96b8 <network_connect>

000bc524 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bc524:	4b02      	ldr	r3, [pc, #8]	; (bc530 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bc526:	2203      	movs	r2, #3
   bc528:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bc52a:	4a02      	ldr	r2, [pc, #8]	; (bc534 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bc52c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bc52e:	4770      	bx	lr
   bc530:	2003e690 	.word	0x2003e690
   bc534:	000c18f4 	.word	0x000c18f4

000bc538 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bc538:	4770      	bx	lr

000bc53a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bc53a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc53c:	4606      	mov	r6, r0
   bc53e:	4615      	mov	r5, r2
   bc540:	460c      	mov	r4, r1
   bc542:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bc544:	42bc      	cmp	r4, r7
   bc546:	d006      	beq.n	bc556 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bc548:	6833      	ldr	r3, [r6, #0]
   bc54a:	f814 1b01 	ldrb.w	r1, [r4], #1
   bc54e:	689b      	ldr	r3, [r3, #8]
   bc550:	4630      	mov	r0, r6
   bc552:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bc554:	e7f6      	b.n	bc544 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bc556:	4628      	mov	r0, r5
   bc558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc55a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bc55a:	7c00      	ldrb	r0, [r0, #16]
   bc55c:	2200      	movs	r2, #0
   bc55e:	f7fc bf07 	b.w	b9370 <hal_i2c_write>

000bc562 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bc562:	7c00      	ldrb	r0, [r0, #16]
   bc564:	2100      	movs	r1, #0
   bc566:	f7fc bf0b 	b.w	b9380 <hal_i2c_available>

000bc56a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bc56a:	7c00      	ldrb	r0, [r0, #16]
   bc56c:	2100      	movs	r1, #0
   bc56e:	f7fc bf0f 	b.w	b9390 <hal_i2c_read>

000bc572 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bc572:	7c00      	ldrb	r0, [r0, #16]
   bc574:	2100      	movs	r1, #0
   bc576:	f7fc bf13 	b.w	b93a0 <hal_i2c_peek>

000bc57a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bc57a:	7c00      	ldrb	r0, [r0, #16]
   bc57c:	2100      	movs	r1, #0
   bc57e:	f7fc bf17 	b.w	b93b0 <hal_i2c_flush>

000bc582 <_ZN7TwoWireD0Ev>:
   bc582:	b510      	push	{r4, lr}
   bc584:	2114      	movs	r1, #20
   bc586:	4604      	mov	r4, r0
   bc588:	f7f7 fd89 	bl	b409e <_ZdlPvj>
   bc58c:	4620      	mov	r0, r4
   bc58e:	bd10      	pop	{r4, pc}

000bc590 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bc590:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bc592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bc596:	4604      	mov	r4, r0
   bc598:	4608      	mov	r0, r1
   bc59a:	2100      	movs	r1, #0
   bc59c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bc5a0:	4b03      	ldr	r3, [pc, #12]	; (bc5b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bc5a2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bc5a4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bc5a6:	4611      	mov	r1, r2
   bc5a8:	f7fc ff12 	bl	b93d0 <hal_i2c_init>
}
   bc5ac:	4620      	mov	r0, r4
   bc5ae:	bd10      	pop	{r4, pc}
   bc5b0:	000c1930 	.word	0x000c1930

000bc5b4 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bc5b4:	7c00      	ldrb	r0, [r0, #16]
   bc5b6:	2200      	movs	r2, #0
   bc5b8:	f7fc beba 	b.w	b9330 <hal_i2c_set_speed>

000bc5bc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bc5bc:	2300      	movs	r3, #0
   bc5be:	7c00      	ldrb	r0, [r0, #16]
   bc5c0:	461a      	mov	r2, r3
   bc5c2:	4619      	mov	r1, r3
   bc5c4:	f7fc bebc 	b.w	b9340 <hal_i2c_begin>

000bc5c8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bc5c8:	7c00      	ldrb	r0, [r0, #16]
   bc5ca:	2200      	movs	r2, #0
   bc5cc:	f7fc bec0 	b.w	b9350 <hal_i2c_begin_transmission>

000bc5d0 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bc5d0:	b2c9      	uxtb	r1, r1
   bc5d2:	f7ff bff9 	b.w	bc5c8 <_ZN7TwoWire17beginTransmissionEh>

000bc5d6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bc5d6:	7c00      	ldrb	r0, [r0, #16]
   bc5d8:	2200      	movs	r2, #0
   bc5da:	f7fc bec1 	b.w	b9360 <hal_i2c_end_transmission>

000bc5de <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bc5de:	2101      	movs	r1, #1
   bc5e0:	f7ff bff9 	b.w	bc5d6 <_ZN7TwoWire15endTransmissionEh>

000bc5e4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bc5e4:	4700      	bx	r0
	...

000bc5e8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bc5e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bc5ec:	2400      	movs	r4, #0
{
   bc5ee:	461d      	mov	r5, r3
   bc5f0:	460f      	mov	r7, r1
   bc5f2:	4690      	mov	r8, r2
   bc5f4:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bc5f6:	f7fc fe8b 	bl	b9310 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bc5fa:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bc5fc:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bc600:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bc604:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bc608:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bc60c:	bfa2      	ittt	ge
   bc60e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bc612:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bc616:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bc618:	4907      	ldr	r1, [pc, #28]	; (bc638 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bc61a:	9400      	str	r4, [sp, #0]
   bc61c:	4643      	mov	r3, r8
   bc61e:	463a      	mov	r2, r7
   bc620:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bc622:	bfa8      	it	ge
   bc624:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bc628:	f7fc fe6a 	bl	b9300 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bc62c:	fab0 f080 	clz	r0, r0
   bc630:	0940      	lsrs	r0, r0, #5
   bc632:	b004      	add	sp, #16
   bc634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc638:	000bc5e5 	.word	0x000bc5e5

000bc63c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bc63c:	4770      	bx	lr

000bc63e <_ZN9IPAddressD0Ev>:
   bc63e:	b510      	push	{r4, lr}
   bc640:	2118      	movs	r1, #24
   bc642:	4604      	mov	r4, r0
   bc644:	f7f7 fd2b 	bl	b409e <_ZdlPvj>
   bc648:	4620      	mov	r0, r4
   bc64a:	bd10      	pop	{r4, pc}

000bc64c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bc64c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bc64e:	7d03      	ldrb	r3, [r0, #20]
   bc650:	2b06      	cmp	r3, #6
{
   bc652:	b08d      	sub	sp, #52	; 0x34
   bc654:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc656:	f100 0704 	add.w	r7, r0, #4
   bc65a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bc65e:	d012      	beq.n	bc686 <_ZNK9IPAddress7printToER5Print+0x3a>
   bc660:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bc664:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bc668:	220a      	movs	r2, #10
   bc66a:	4630      	mov	r0, r6
   bc66c:	f000 f94b 	bl	bc906 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bc670:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bc672:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bc674:	d019      	beq.n	bc6aa <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bc676:	2c00      	cmp	r4, #0
   bc678:	d0f4      	beq.n	bc664 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bc67a:	212e      	movs	r1, #46	; 0x2e
   bc67c:	4630      	mov	r0, r6
   bc67e:	f000 f929 	bl	bc8d4 <_ZN5Print5printEc>
   bc682:	4404      	add	r4, r0
   bc684:	e7ee      	b.n	bc664 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc686:	232f      	movs	r3, #47	; 0x2f
   bc688:	466a      	mov	r2, sp
   bc68a:	4639      	mov	r1, r7
   bc68c:	200a      	movs	r0, #10
		buf[0] = 0;
   bc68e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc692:	f7fc fea5 	bl	b93e0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bc696:	4668      	mov	r0, sp
   bc698:	f001 fe99 	bl	be3ce <strlen>
   bc69c:	6833      	ldr	r3, [r6, #0]
   bc69e:	4602      	mov	r2, r0
   bc6a0:	68db      	ldr	r3, [r3, #12]
   bc6a2:	4669      	mov	r1, sp
   bc6a4:	4630      	mov	r0, r6
   bc6a6:	4798      	blx	r3
   bc6a8:	4604      	mov	r4, r0
    }
    return n;
}
   bc6aa:	4620      	mov	r0, r4
   bc6ac:	b00d      	add	sp, #52	; 0x34
   bc6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bc6b0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bc6b0:	b510      	push	{r4, lr}
   bc6b2:	4b05      	ldr	r3, [pc, #20]	; (bc6c8 <_ZN9IPAddressC1Ev+0x18>)
   bc6b4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bc6b6:	2211      	movs	r2, #17
   bc6b8:	f840 3b04 	str.w	r3, [r0], #4
   bc6bc:	2100      	movs	r1, #0
   bc6be:	f001 fdd2 	bl	be266 <memset>
}
   bc6c2:	4620      	mov	r0, r4
   bc6c4:	bd10      	pop	{r4, pc}
   bc6c6:	bf00      	nop
   bc6c8:	000c1958 	.word	0x000c1958

000bc6cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bc6cc:	4603      	mov	r3, r0
   bc6ce:	4a07      	ldr	r2, [pc, #28]	; (bc6ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bc6d0:	b510      	push	{r4, lr}
   bc6d2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bc6d6:	f101 0210 	add.w	r2, r1, #16
   bc6da:	f851 4b04 	ldr.w	r4, [r1], #4
   bc6de:	f843 4b04 	str.w	r4, [r3], #4
   bc6e2:	4291      	cmp	r1, r2
   bc6e4:	d1f9      	bne.n	bc6da <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bc6e6:	780a      	ldrb	r2, [r1, #0]
   bc6e8:	701a      	strb	r2, [r3, #0]
}
   bc6ea:	bd10      	pop	{r4, pc}
   bc6ec:	000c1958 	.word	0x000c1958

000bc6f0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bc6f0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bc6f2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bc6f6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bc6fa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bc6fe:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bc702:	2304      	movs	r3, #4
   bc704:	6041      	str	r1, [r0, #4]
   bc706:	7503      	strb	r3, [r0, #20]
}
   bc708:	bd10      	pop	{r4, pc}
	...

000bc70c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bc70c:	b507      	push	{r0, r1, r2, lr}
   bc70e:	4b06      	ldr	r3, [pc, #24]	; (bc728 <_ZN9IPAddressC1EPKh+0x1c>)
   bc710:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bc712:	78cb      	ldrb	r3, [r1, #3]
   bc714:	9300      	str	r3, [sp, #0]
   bc716:	788b      	ldrb	r3, [r1, #2]
   bc718:	784a      	ldrb	r2, [r1, #1]
   bc71a:	7809      	ldrb	r1, [r1, #0]
   bc71c:	f7ff ffe8 	bl	bc6f0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bc720:	b003      	add	sp, #12
   bc722:	f85d fb04 	ldr.w	pc, [sp], #4
   bc726:	bf00      	nop
   bc728:	000c1958 	.word	0x000c1958

000bc72c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   bc72c:	4b01      	ldr	r3, [pc, #4]	; (bc734 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bc72e:	4a02      	ldr	r2, [pc, #8]	; (bc738 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bc730:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bc732:	4770      	bx	lr
   bc734:	2003e698 	.word	0x2003e698
   bc738:	000c1964 	.word	0x000c1964

000bc73c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bc73c:	2300      	movs	r3, #0
   bc73e:	6840      	ldr	r0, [r0, #4]
   bc740:	461a      	mov	r2, r3
   bc742:	f7fc bfb9 	b.w	b96b8 <network_connect>

000bc746 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bc746:	6840      	ldr	r0, [r0, #4]
   bc748:	2200      	movs	r2, #0
   bc74a:	2102      	movs	r1, #2
   bc74c:	f7fc bfc4 	b.w	b96d8 <network_disconnect>

000bc750 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bc750:	2200      	movs	r2, #0
   bc752:	6840      	ldr	r0, [r0, #4]
   bc754:	4611      	mov	r1, r2
   bc756:	f7fc bfb7 	b.w	b96c8 <network_connecting>

000bc75a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bc75a:	2200      	movs	r2, #0
   bc75c:	6840      	ldr	r0, [r0, #4]
   bc75e:	4611      	mov	r1, r2
   bc760:	f7fc bfc2 	b.w	b96e8 <network_ready>

000bc764 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bc764:	2300      	movs	r3, #0
   bc766:	6840      	ldr	r0, [r0, #4]
   bc768:	461a      	mov	r2, r3
   bc76a:	4619      	mov	r1, r3
   bc76c:	f7fc bfc4 	b.w	b96f8 <network_on>

000bc770 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bc770:	2300      	movs	r3, #0
   bc772:	6840      	ldr	r0, [r0, #4]
   bc774:	461a      	mov	r2, r3
   bc776:	4619      	mov	r1, r3
   bc778:	f7fc bfc6 	b.w	b9708 <network_off>

000bc77c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bc77c:	6840      	ldr	r0, [r0, #4]
   bc77e:	2100      	movs	r1, #0
   bc780:	f7fc bfea 	b.w	b9758 <network_is_on>

000bc784 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bc784:	6840      	ldr	r0, [r0, #4]
   bc786:	2100      	movs	r1, #0
   bc788:	f7fc bfee 	b.w	b9768 <network_is_off>

000bc78c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bc78c:	6840      	ldr	r0, [r0, #4]
   bc78e:	2200      	movs	r2, #0
   bc790:	f081 0101 	eor.w	r1, r1, #1
   bc794:	f7fc bfc0 	b.w	b9718 <network_listen>

000bc798 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bc798:	6840      	ldr	r0, [r0, #4]
   bc79a:	2200      	movs	r2, #0
   bc79c:	f7fc bfcc 	b.w	b9738 <network_set_listen_timeout>

000bc7a0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bc7a0:	2200      	movs	r2, #0
   bc7a2:	6840      	ldr	r0, [r0, #4]
   bc7a4:	4611      	mov	r1, r2
   bc7a6:	f7fc bfcf 	b.w	b9748 <network_get_listen_timeout>

000bc7aa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bc7aa:	2200      	movs	r2, #0
   bc7ac:	6840      	ldr	r0, [r0, #4]
   bc7ae:	4611      	mov	r1, r2
   bc7b0:	f7fc bfba 	b.w	b9728 <network_listening>

000bc7b4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bc7b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc7b8:	b095      	sub	sp, #84	; 0x54
   bc7ba:	4614      	mov	r4, r2
   bc7bc:	460d      	mov	r5, r1
   bc7be:	4607      	mov	r7, r0
    IPAddress addr;
   bc7c0:	f7ff ff76 	bl	bc6b0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bc7c4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bc7c6:	221c      	movs	r2, #28
   bc7c8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bc7ca:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bc7cc:	f001 fd4b 	bl	be266 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bc7d0:	2340      	movs	r3, #64	; 0x40
   bc7d2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bc7d4:	4620      	mov	r0, r4
   bc7d6:	466b      	mov	r3, sp
   bc7d8:	aa0c      	add	r2, sp, #48	; 0x30
   bc7da:	2100      	movs	r1, #0
   bc7dc:	f7fc fe10 	bl	b9400 <netdb_getaddrinfo>
    if (!r) {
   bc7e0:	4604      	mov	r4, r0
   bc7e2:	2800      	cmp	r0, #0
   bc7e4:	d14b      	bne.n	bc87e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bc7e6:	4602      	mov	r2, r0
   bc7e8:	2101      	movs	r1, #1
   bc7ea:	6868      	ldr	r0, [r5, #4]
   bc7ec:	f7fc ff7c 	bl	b96e8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bc7f0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bc7f2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bc7f4:	4622      	mov	r2, r4
   bc7f6:	6868      	ldr	r0, [r5, #4]
   bc7f8:	f7fc ff76 	bl	b96e8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bc7fc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bc7fe:	4681      	mov	r9, r0
        bool ok = false;
   bc800:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bc802:	2e00      	cmp	r6, #0
   bc804:	d03b      	beq.n	bc87e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bc806:	2900      	cmp	r1, #0
   bc808:	d139      	bne.n	bc87e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bc80a:	6873      	ldr	r3, [r6, #4]
   bc80c:	2b02      	cmp	r3, #2
   bc80e:	d003      	beq.n	bc818 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bc810:	2b0a      	cmp	r3, #10
   bc812:	d011      	beq.n	bc838 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bc814:	69f6      	ldr	r6, [r6, #28]
   bc816:	e7f4      	b.n	bc802 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bc818:	f1b8 0f00 	cmp.w	r8, #0
   bc81c:	d0fa      	beq.n	bc814 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bc81e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bc820:	a806      	add	r0, sp, #24
   bc822:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bc824:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bc826:	f7ff ff71 	bl	bc70c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bc82a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bc82c:	1d3c      	adds	r4, r7, #4
   bc82e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc830:	682b      	ldr	r3, [r5, #0]
   bc832:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bc834:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bc836:	e7ed      	b.n	bc814 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bc838:	f1b9 0f00 	cmp.w	r9, #0
   bc83c:	d0ea      	beq.n	bc814 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bc83e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bc840:	2210      	movs	r2, #16
   bc842:	a801      	add	r0, sp, #4
   bc844:	f001 fd0f 	bl	be266 <memset>
                    a.v = 6;
   bc848:	2306      	movs	r3, #6
   bc84a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bc84e:	ad01      	add	r5, sp, #4
   bc850:	f104 0308 	add.w	r3, r4, #8
   bc854:	3418      	adds	r4, #24
   bc856:	6818      	ldr	r0, [r3, #0]
   bc858:	6859      	ldr	r1, [r3, #4]
   bc85a:	462a      	mov	r2, r5
   bc85c:	c203      	stmia	r2!, {r0, r1}
   bc85e:	3308      	adds	r3, #8
   bc860:	42a3      	cmp	r3, r4
   bc862:	4615      	mov	r5, r2
   bc864:	d1f7      	bne.n	bc856 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bc866:	a901      	add	r1, sp, #4
   bc868:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bc86a:	ad07      	add	r5, sp, #28
   bc86c:	f7ff ff2e 	bl	bc6cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bc870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bc872:	1d3c      	adds	r4, r7, #4
   bc874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc876:	682b      	ldr	r3, [r5, #0]
   bc878:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bc87a:	4649      	mov	r1, r9
   bc87c:	e7ca      	b.n	bc814 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bc87e:	9800      	ldr	r0, [sp, #0]
   bc880:	f7fc fdb6 	bl	b93f0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bc884:	4638      	mov	r0, r7
   bc886:	b015      	add	sp, #84	; 0x54
   bc888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bc88c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bc88c:	4b02      	ldr	r3, [pc, #8]	; (bc898 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bc88e:	4a03      	ldr	r2, [pc, #12]	; (bc89c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bc890:	601a      	str	r2, [r3, #0]
   bc892:	2200      	movs	r2, #0
   bc894:	605a      	str	r2, [r3, #4]

} // spark
   bc896:	4770      	bx	lr
   bc898:	2003e69c 	.word	0x2003e69c
   bc89c:	000c1970 	.word	0x000c1970

000bc8a0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bc8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc8a2:	4606      	mov	r6, r0
   bc8a4:	460d      	mov	r5, r1
  size_t n = 0;
   bc8a6:	188f      	adds	r7, r1, r2
   bc8a8:	2400      	movs	r4, #0
  while (size--) {
   bc8aa:	42bd      	cmp	r5, r7
   bc8ac:	d00c      	beq.n	bc8c8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bc8ae:	6833      	ldr	r3, [r6, #0]
   bc8b0:	f815 1b01 	ldrb.w	r1, [r5], #1
   bc8b4:	689b      	ldr	r3, [r3, #8]
   bc8b6:	4630      	mov	r0, r6
   bc8b8:	4798      	blx	r3
     if (chunk>=0)
   bc8ba:	1e03      	subs	r3, r0, #0
   bc8bc:	db01      	blt.n	bc8c2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bc8be:	441c      	add	r4, r3
  while (size--) {
   bc8c0:	e7f3      	b.n	bc8aa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bc8c2:	2c00      	cmp	r4, #0
   bc8c4:	bf08      	it	eq
   bc8c6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bc8c8:	4620      	mov	r0, r4
   bc8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc8cc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bc8cc:	b508      	push	{r3, lr}
  return write(str);
   bc8ce:	f7fa fe31 	bl	b7534 <_ZN5Print5writeEPKc>
}
   bc8d2:	bd08      	pop	{r3, pc}

000bc8d4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bc8d4:	6803      	ldr	r3, [r0, #0]
   bc8d6:	689b      	ldr	r3, [r3, #8]
   bc8d8:	4718      	bx	r3

000bc8da <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bc8da:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bc8dc:	210d      	movs	r1, #13
{
   bc8de:	4605      	mov	r5, r0
  size_t n = print('\r');
   bc8e0:	f7ff fff8 	bl	bc8d4 <_ZN5Print5printEc>
  n += print('\n');
   bc8e4:	210a      	movs	r1, #10
  size_t n = print('\r');
   bc8e6:	4604      	mov	r4, r0
  n += print('\n');
   bc8e8:	4628      	mov	r0, r5
   bc8ea:	f7ff fff3 	bl	bc8d4 <_ZN5Print5printEc>
  return n;
}
   bc8ee:	4420      	add	r0, r4
   bc8f0:	bd38      	pop	{r3, r4, r5, pc}

000bc8f2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   bc8f2:	b538      	push	{r3, r4, r5, lr}
   bc8f4:	4605      	mov	r5, r0
  return write(str);
   bc8f6:	f7fa fe1d 	bl	b7534 <_ZN5Print5writeEPKc>
   bc8fa:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   bc8fc:	4628      	mov	r0, r5
   bc8fe:	f7ff ffec 	bl	bc8da <_ZN5Print7printlnEv>
  return n;
}
   bc902:	4420      	add	r0, r4
   bc904:	bd38      	pop	{r3, r4, r5, pc}

000bc906 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bc906:	b530      	push	{r4, r5, lr}
   bc908:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bc90a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bc90c:	2a01      	cmp	r2, #1
  *str = '\0';
   bc90e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bc912:	bf98      	it	ls
   bc914:	220a      	movls	r2, #10
   bc916:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bc918:	460d      	mov	r5, r1
   bc91a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bc91e:	fb01 5312 	mls	r3, r1, r2, r5
   bc922:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bc926:	2b09      	cmp	r3, #9
   bc928:	bf94      	ite	ls
   bc92a:	3330      	addls	r3, #48	; 0x30
   bc92c:	3337      	addhi	r3, #55	; 0x37
   bc92e:	b2db      	uxtb	r3, r3
  } while(n);
   bc930:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bc932:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bc936:	d9ef      	bls.n	bc918 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bc938:	4621      	mov	r1, r4
   bc93a:	f7fa fdfb 	bl	b7534 <_ZN5Print5writeEPKc>
}
   bc93e:	b00b      	add	sp, #44	; 0x2c
   bc940:	bd30      	pop	{r4, r5, pc}

000bc942 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bc942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc946:	b086      	sub	sp, #24
   bc948:	af00      	add	r7, sp, #0
   bc94a:	4605      	mov	r5, r0
   bc94c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bc94e:	1d38      	adds	r0, r7, #4
   bc950:	2114      	movs	r1, #20
{
   bc952:	4614      	mov	r4, r2
    va_copy(args2, args);
   bc954:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bc956:	f7fc ff3f 	bl	b97d8 <vsnprintf>

    if (n<bufsize)
   bc95a:	2813      	cmp	r0, #19
   bc95c:	d80e      	bhi.n	bc97c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bc95e:	1d39      	adds	r1, r7, #4
   bc960:	4628      	mov	r0, r5
   bc962:	f7fa fde7 	bl	b7534 <_ZN5Print5writeEPKc>
   bc966:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bc968:	b11e      	cbz	r6, bc972 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bc96a:	4628      	mov	r0, r5
   bc96c:	f7ff ffb5 	bl	bc8da <_ZN5Print7printlnEv>
   bc970:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bc972:	4620      	mov	r0, r4
   bc974:	3718      	adds	r7, #24
   bc976:	46bd      	mov	sp, r7
   bc978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bc97c:	f100 0308 	add.w	r3, r0, #8
   bc980:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bc984:	46e8      	mov	r8, sp
        char bigger[n+1];
   bc986:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bc98a:	4622      	mov	r2, r4
   bc98c:	1c41      	adds	r1, r0, #1
   bc98e:	683b      	ldr	r3, [r7, #0]
   bc990:	4668      	mov	r0, sp
   bc992:	f7fc ff21 	bl	b97d8 <vsnprintf>
  return write(str);
   bc996:	4669      	mov	r1, sp
   bc998:	4628      	mov	r0, r5
   bc99a:	f7fa fdcb 	bl	b7534 <_ZN5Print5writeEPKc>
   bc99e:	4604      	mov	r4, r0
   bc9a0:	46c5      	mov	sp, r8
   bc9a2:	e7e1      	b.n	bc968 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bc9a4 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bc9a4:	b510      	push	{r4, lr}
  if (0 == max) {
   bc9a6:	4604      	mov	r4, r0
   bc9a8:	b128      	cbz	r0, bc9b6 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bc9aa:	f001 fc93 	bl	be2d4 <rand>
   bc9ae:	fb90 f3f4 	sdiv	r3, r0, r4
   bc9b2:	fb03 0414 	mls	r4, r3, r4, r0
}
   bc9b6:	4620      	mov	r0, r4
   bc9b8:	bd10      	pop	{r4, pc}
	...

000bc9bc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bc9bc:	4b01      	ldr	r3, [pc, #4]	; (bc9c4 <_GLOBAL__sub_I_RGB+0x8>)
   bc9be:	2200      	movs	r2, #0
   bc9c0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bc9c2:	4770      	bx	lr
   bc9c4:	2003e6a4 	.word	0x2003e6a4

000bc9c8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bc9c8:	2100      	movs	r1, #0
   bc9ca:	f7fc bd69 	b.w	b94a0 <hal_spi_release>

000bc9ce <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bc9ce:	2100      	movs	r1, #0
   bc9d0:	f7fc bd5e 	b.w	b9490 <hal_spi_acquire>

000bc9d4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bc9d4:	b510      	push	{r4, lr}
   bc9d6:	4604      	mov	r4, r0
   bc9d8:	4608      	mov	r0, r1
{
    _spi = spi;
   bc9da:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bc9dc:	f7fc fd28 	bl	b9430 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bc9e0:	2300      	movs	r3, #0
   bc9e2:	6063      	str	r3, [r4, #4]
}
   bc9e4:	4620      	mov	r0, r4
   bc9e6:	bd10      	pop	{r4, pc}

000bc9e8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bc9e8:	b513      	push	{r0, r1, r4, lr}
   bc9ea:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bc9ec:	7800      	ldrb	r0, [r0, #0]
   bc9ee:	f7ff ffee 	bl	bc9ce <_ZN8SPIClass4lockEv.isra.0>
   bc9f2:	b958      	cbnz	r0, bca0c <_ZN8SPIClass5beginEv+0x24>
   bc9f4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bc9f6:	9001      	str	r0, [sp, #4]
   bc9f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bc9fc:	f7fc fd08 	bl	b9410 <hal_spi_begin>
        unlock();
   bca00:	9801      	ldr	r0, [sp, #4]
    }
}
   bca02:	b002      	add	sp, #8
   bca04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bca08:	f7ff bfde 	b.w	bc9c8 <_ZN8SPIClass6unlockEv.isra.0>
   bca0c:	b002      	add	sp, #8
   bca0e:	bd10      	pop	{r4, pc}

000bca10 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bca10:	7800      	ldrb	r0, [r0, #0]
   bca12:	f7ff bfd9 	b.w	bc9c8 <_ZN8SPIClass6unlockEv.isra.0>
	...

000bca18 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bca18:	0840      	lsrs	r0, r0, #1
{
   bca1a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bca1c:	6018      	str	r0, [r3, #0]
   bca1e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bca20:	6818      	ldr	r0, [r3, #0]
   bca22:	4288      	cmp	r0, r1
   bca24:	b2e5      	uxtb	r5, r4
   bca26:	d906      	bls.n	bca36 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bca28:	3401      	adds	r4, #1
   bca2a:	2c08      	cmp	r4, #8
   bca2c:	d002      	beq.n	bca34 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bca2e:	0840      	lsrs	r0, r0, #1
   bca30:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bca32:	e7f5      	b.n	bca20 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bca34:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bca36:	4b02      	ldr	r3, [pc, #8]	; (bca40 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bca38:	5d5b      	ldrb	r3, [r3, r5]
   bca3a:	7013      	strb	r3, [r2, #0]
}
   bca3c:	bd30      	pop	{r4, r5, pc}
   bca3e:	bf00      	nop
   bca40:	000c19a4 	.word	0x000c19a4

000bca44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bca44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bca48:	4606      	mov	r6, r0
   bca4a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bca4c:	7800      	ldrb	r0, [r0, #0]
{
   bca4e:	460c      	mov	r4, r1
    CHECK(lock());
   bca50:	f7ff ffbd 	bl	bc9ce <_ZN8SPIClass4lockEv.isra.0>
   bca54:	2800      	cmp	r0, #0
   bca56:	db1b      	blt.n	bca90 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bca58:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bca5a:	2214      	movs	r2, #20
   bca5c:	2100      	movs	r1, #0
   bca5e:	a809      	add	r0, sp, #36	; 0x24
   bca60:	f001 fc01 	bl	be266 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bca64:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bca66:	2200      	movs	r2, #0
   bca68:	a909      	add	r1, sp, #36	; 0x24
   bca6a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bca6c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bca70:	f7fc fcee 	bl	b9450 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bca74:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bca78:	b113      	cbz	r3, bca80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bca7a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bca7e:	b155      	cbz	r5, bca96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bca80:	2700      	movs	r7, #0
   bca82:	46b9      	mov	r9, r7
   bca84:	46b8      	mov	r8, r7
   bca86:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bca88:	7923      	ldrb	r3, [r4, #4]
   bca8a:	b15d      	cbz	r5, bcaa4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bca8c:	b1c3      	cbz	r3, bcac0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bca8e:	2000      	movs	r0, #0
}
   bca90:	b00f      	add	sp, #60	; 0x3c
   bca92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bca96:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bca9a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bca9e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bcaa2:	e7f1      	b.n	bca88 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bcaa4:	2b00      	cmp	r3, #0
   bcaa6:	d135      	bne.n	bcb14 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bcaa8:	68a3      	ldr	r3, [r4, #8]
   bcaaa:	4543      	cmp	r3, r8
   bcaac:	d108      	bne.n	bcac0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bcaae:	f88d 9020 	strb.w	r9, [sp, #32]
   bcab2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bcab6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bcaba:	89a3      	ldrh	r3, [r4, #12]
   bcabc:	429a      	cmp	r2, r3
   bcabe:	d0e6      	beq.n	bca8e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bcac0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bcac2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bcac4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bcac8:	980a      	ldr	r0, [sp, #40]	; 0x28
   bcaca:	ab04      	add	r3, sp, #16
   bcacc:	f10d 020f 	add.w	r2, sp, #15
   bcad0:	f7ff ffa2 	bl	bca18 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bcad4:	7921      	ldrb	r1, [r4, #4]
   bcad6:	b985      	cbnz	r5, bcafa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bcad8:	b989      	cbnz	r1, bcafe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bcada:	68a3      	ldr	r3, [r4, #8]
   bcadc:	4543      	cmp	r3, r8
   bcade:	d30e      	bcc.n	bcafe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bcae0:	f88d 9020 	strb.w	r9, [sp, #32]
   bcae4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bcae8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bcaec:	89a3      	ldrh	r3, [r4, #12]
   bcaee:	429a      	cmp	r2, r3
   bcaf0:	d105      	bne.n	bcafe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bcaf2:	9b04      	ldr	r3, [sp, #16]
   bcaf4:	4543      	cmp	r3, r8
   bcaf6:	d102      	bne.n	bcafe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bcaf8:	e7c9      	b.n	bca8e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bcafa:	2900      	cmp	r1, #0
   bcafc:	d1f9      	bne.n	bcaf2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bcafe:	2300      	movs	r3, #0
   bcb00:	9301      	str	r3, [sp, #4]
   bcb02:	7b63      	ldrb	r3, [r4, #13]
   bcb04:	9300      	str	r3, [sp, #0]
   bcb06:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bcb0a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bcb0c:	7830      	ldrb	r0, [r6, #0]
   bcb0e:	f7fc fcb7 	bl	b9480 <hal_spi_set_settings>
   bcb12:	e7bc      	b.n	bca8e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bcb14:	e9cd 5500 	strd	r5, r5, [sp]
   bcb18:	462b      	mov	r3, r5
   bcb1a:	462a      	mov	r2, r5
   bcb1c:	2101      	movs	r1, #1
   bcb1e:	e7f5      	b.n	bcb0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bcb20 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bcb20:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bcb22:	7800      	ldrb	r0, [r0, #0]
   bcb24:	f7fc fc7c 	bl	b9420 <hal_spi_transfer>
}
   bcb28:	b2c0      	uxtb	r0, r0
   bcb2a:	bd08      	pop	{r3, pc}

000bcb2c <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   bcb2c:	b530      	push	{r4, r5, lr}
   bcb2e:	b087      	sub	sp, #28
   bcb30:	4604      	mov	r4, r0
   bcb32:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   bcb34:	9500      	str	r5, [sp, #0]
   bcb36:	7800      	ldrb	r0, [r0, #0]
   bcb38:	f7fc fc92 	bl	b9460 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   bcb3c:	b93d      	cbnz	r5, bcb4e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   bcb3e:	7820      	ldrb	r0, [r4, #0]
   bcb40:	a902      	add	r1, sp, #8
   bcb42:	f7fc fc95 	bl	b9470 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   bcb46:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bcb4a:	07db      	lsls	r3, r3, #31
   bcb4c:	d4f7      	bmi.n	bcb3e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   bcb4e:	b007      	add	sp, #28
   bcb50:	bd30      	pop	{r4, r5, pc}

000bcb52 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   bcb52:	b510      	push	{r4, lr}
   bcb54:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bcb56:	f7fc fb93 	bl	b9280 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   bcb5a:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   bcb5c:	6823      	ldr	r3, [r4, #0]
   bcb5e:	4620      	mov	r0, r4
   bcb60:	695b      	ldr	r3, [r3, #20]
   bcb62:	4798      	blx	r3
    if (c >= 0) return c;
   bcb64:	2800      	cmp	r0, #0
   bcb66:	da08      	bge.n	bcb7a <_ZN6Stream9timedReadEv+0x28>
   bcb68:	f7fc fb8a 	bl	b9280 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   bcb6c:	68e3      	ldr	r3, [r4, #12]
   bcb6e:	1ac0      	subs	r0, r0, r3
   bcb70:	68a3      	ldr	r3, [r4, #8]
   bcb72:	4298      	cmp	r0, r3
   bcb74:	d3f2      	bcc.n	bcb5c <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   bcb76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   bcb7a:	bd10      	pop	{r4, pc}

000bcb7c <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   bcb7c:	b570      	push	{r4, r5, r6, lr}
   bcb7e:	460d      	mov	r5, r1
  String ret;
   bcb80:	4909      	ldr	r1, [pc, #36]	; (bcba8 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   bcb82:	4604      	mov	r4, r0
   bcb84:	4616      	mov	r6, r2
  String ret;
   bcb86:	f000 f85c 	bl	bcc42 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   bcb8a:	4628      	mov	r0, r5
   bcb8c:	f7ff ffe1 	bl	bcb52 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   bcb90:	2800      	cmp	r0, #0
   bcb92:	db06      	blt.n	bcba2 <_ZN6Stream15readStringUntilEc+0x26>
   bcb94:	4286      	cmp	r6, r0
   bcb96:	d004      	beq.n	bcba2 <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   bcb98:	b2c1      	uxtb	r1, r0
   bcb9a:	4620      	mov	r0, r4
   bcb9c:	f000 f8d0 	bl	bcd40 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   bcba0:	e7f3      	b.n	bcb8a <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   bcba2:	4620      	mov	r0, r4
   bcba4:	bd70      	pop	{r4, r5, r6, pc}
   bcba6:	bf00      	nop
   bcba8:	000c0888 	.word	0x000c0888

000bcbac <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bcbac:	b510      	push	{r4, lr}
   bcbae:	4604      	mov	r4, r0
{
	free(buffer);
   bcbb0:	6800      	ldr	r0, [r0, #0]
   bcbb2:	f7fc fde9 	bl	b9788 <free>
}
   bcbb6:	4620      	mov	r0, r4
   bcbb8:	bd10      	pop	{r4, pc}

000bcbba <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bcbba:	b510      	push	{r4, lr}
   bcbbc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bcbbe:	6800      	ldr	r0, [r0, #0]
   bcbc0:	b108      	cbz	r0, bcbc6 <_ZN6String10invalidateEv+0xc>
   bcbc2:	f7fc fde1 	bl	b9788 <free>
	buffer = NULL;
   bcbc6:	2300      	movs	r3, #0
	capacity = len = 0;
   bcbc8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bcbcc:	6023      	str	r3, [r4, #0]
}
   bcbce:	bd10      	pop	{r4, pc}

000bcbd0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bcbd0:	b538      	push	{r3, r4, r5, lr}
   bcbd2:	4604      	mov	r4, r0
   bcbd4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bcbd6:	6800      	ldr	r0, [r0, #0]
   bcbd8:	3101      	adds	r1, #1
   bcbda:	f7fc fddd 	bl	b9798 <realloc>
	if (newbuffer) {
   bcbde:	b110      	cbz	r0, bcbe6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bcbe0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bcbe4:	2001      	movs	r0, #1
	}
	return 0;
}
   bcbe6:	bd38      	pop	{r3, r4, r5, pc}

000bcbe8 <_ZN6String7reserveEj>:
{
   bcbe8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bcbea:	6803      	ldr	r3, [r0, #0]
{
   bcbec:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bcbee:	b123      	cbz	r3, bcbfa <_ZN6String7reserveEj+0x12>
   bcbf0:	6843      	ldr	r3, [r0, #4]
   bcbf2:	428b      	cmp	r3, r1
   bcbf4:	d301      	bcc.n	bcbfa <_ZN6String7reserveEj+0x12>
   bcbf6:	2001      	movs	r0, #1
}
   bcbf8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bcbfa:	4620      	mov	r0, r4
   bcbfc:	f7ff ffe8 	bl	bcbd0 <_ZN6String12changeBufferEj>
   bcc00:	2800      	cmp	r0, #0
   bcc02:	d0f9      	beq.n	bcbf8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bcc04:	68a3      	ldr	r3, [r4, #8]
   bcc06:	2b00      	cmp	r3, #0
   bcc08:	d1f5      	bne.n	bcbf6 <_ZN6String7reserveEj+0xe>
   bcc0a:	6822      	ldr	r2, [r4, #0]
   bcc0c:	7013      	strb	r3, [r2, #0]
   bcc0e:	e7f2      	b.n	bcbf6 <_ZN6String7reserveEj+0xe>

000bcc10 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bcc10:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bcc12:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bcc14:	4611      	mov	r1, r2
   bcc16:	9201      	str	r2, [sp, #4]
{
   bcc18:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bcc1a:	f7ff ffe5 	bl	bcbe8 <_ZN6String7reserveEj>
   bcc1e:	9a01      	ldr	r2, [sp, #4]
   bcc20:	b928      	cbnz	r0, bcc2e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bcc22:	4620      	mov	r0, r4
   bcc24:	f7ff ffc9 	bl	bcbba <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bcc28:	4620      	mov	r0, r4
   bcc2a:	b003      	add	sp, #12
   bcc2c:	bd30      	pop	{r4, r5, pc}
	len = length;
   bcc2e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bcc30:	4629      	mov	r1, r5
   bcc32:	6820      	ldr	r0, [r4, #0]
   bcc34:	f001 faef 	bl	be216 <memcpy>
	buffer[len] = 0;
   bcc38:	6822      	ldr	r2, [r4, #0]
   bcc3a:	68a3      	ldr	r3, [r4, #8]
   bcc3c:	2100      	movs	r1, #0
   bcc3e:	54d1      	strb	r1, [r2, r3]
	return *this;
   bcc40:	e7f2      	b.n	bcc28 <_ZN6String4copyEPKcj+0x18>

000bcc42 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bcc42:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bcc44:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bcc46:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bcc4a:	4604      	mov	r4, r0
	len = 0;
   bcc4c:	6083      	str	r3, [r0, #8]
	flags = 0;
   bcc4e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bcc50:	b141      	cbz	r1, bcc64 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bcc52:	4608      	mov	r0, r1
   bcc54:	9101      	str	r1, [sp, #4]
   bcc56:	f001 fbba 	bl	be3ce <strlen>
   bcc5a:	9901      	ldr	r1, [sp, #4]
   bcc5c:	4602      	mov	r2, r0
   bcc5e:	4620      	mov	r0, r4
   bcc60:	f7ff ffd6 	bl	bcc10 <_ZN6String4copyEPKcj>
}
   bcc64:	4620      	mov	r0, r4
   bcc66:	b002      	add	sp, #8
   bcc68:	bd10      	pop	{r4, pc}

000bcc6a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bcc6a:	b538      	push	{r3, r4, r5, lr}
   bcc6c:	4605      	mov	r5, r0
	if (buffer) {
   bcc6e:	6800      	ldr	r0, [r0, #0]
{
   bcc70:	460c      	mov	r4, r1
	if (buffer) {
   bcc72:	b168      	cbz	r0, bcc90 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bcc74:	686a      	ldr	r2, [r5, #4]
   bcc76:	688b      	ldr	r3, [r1, #8]
   bcc78:	429a      	cmp	r2, r3
   bcc7a:	d307      	bcc.n	bcc8c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bcc7c:	6809      	ldr	r1, [r1, #0]
   bcc7e:	f001 fb80 	bl	be382 <strcpy>
			len = rhs.len;
   bcc82:	68a3      	ldr	r3, [r4, #8]
   bcc84:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bcc86:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bcc88:	60a3      	str	r3, [r4, #8]
}
   bcc8a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bcc8c:	f7fc fd7c 	bl	b9788 <free>
	buffer = rhs.buffer;
   bcc90:	6823      	ldr	r3, [r4, #0]
   bcc92:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bcc94:	6863      	ldr	r3, [r4, #4]
   bcc96:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bcc98:	68a3      	ldr	r3, [r4, #8]
   bcc9a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bcc9c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bcc9e:	e9c4 3300 	strd	r3, r3, [r4]
   bcca2:	e7f1      	b.n	bcc88 <_ZN6String4moveERS_+0x1e>

000bcca4 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bcca4:	b510      	push	{r4, lr}
	buffer = NULL;
   bcca6:	2300      	movs	r3, #0
	capacity = 0;
   bcca8:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bccac:	4604      	mov	r4, r0
	len = 0;
   bccae:	6083      	str	r3, [r0, #8]
	flags = 0;
   bccb0:	7303      	strb	r3, [r0, #12]
	move(rval);
   bccb2:	f7ff ffda 	bl	bcc6a <_ZN6String4moveERS_>
}
   bccb6:	4620      	mov	r0, r4
   bccb8:	bd10      	pop	{r4, pc}

000bccba <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bccba:	4288      	cmp	r0, r1
{
   bccbc:	b510      	push	{r4, lr}
   bccbe:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bccc0:	d005      	beq.n	bccce <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bccc2:	680b      	ldr	r3, [r1, #0]
   bccc4:	b12b      	cbz	r3, bccd2 <_ZN6StringaSERKS_+0x18>
   bccc6:	688a      	ldr	r2, [r1, #8]
   bccc8:	4619      	mov	r1, r3
   bccca:	f7ff ffa1 	bl	bcc10 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bccce:	4620      	mov	r0, r4
   bccd0:	bd10      	pop	{r4, pc}
	else invalidate();
   bccd2:	f7ff ff72 	bl	bcbba <_ZN6String10invalidateEv>
   bccd6:	e7fa      	b.n	bccce <_ZN6StringaSERKS_+0x14>

000bccd8 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bccd8:	b510      	push	{r4, lr}
	buffer = NULL;
   bccda:	2300      	movs	r3, #0
String::String(const String &value)
   bccdc:	4604      	mov	r4, r0
	capacity = 0;
   bccde:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bcce2:	6083      	str	r3, [r0, #8]
	flags = 0;
   bcce4:	7303      	strb	r3, [r0, #12]
	*this = value;
   bcce6:	f7ff ffe8 	bl	bccba <_ZN6StringaSERKS_>
}
   bccea:	4620      	mov	r0, r4
   bccec:	bd10      	pop	{r4, pc}

000bccee <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bccee:	b513      	push	{r0, r1, r4, lr}
   bccf0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bccf2:	b159      	cbz	r1, bcd0c <_ZN6StringaSEPKc+0x1e>
   bccf4:	4608      	mov	r0, r1
   bccf6:	9101      	str	r1, [sp, #4]
   bccf8:	f001 fb69 	bl	be3ce <strlen>
   bccfc:	9901      	ldr	r1, [sp, #4]
   bccfe:	4602      	mov	r2, r0
   bcd00:	4620      	mov	r0, r4
   bcd02:	f7ff ff85 	bl	bcc10 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bcd06:	4620      	mov	r0, r4
   bcd08:	b002      	add	sp, #8
   bcd0a:	bd10      	pop	{r4, pc}
	else invalidate();
   bcd0c:	f7ff ff55 	bl	bcbba <_ZN6String10invalidateEv>
   bcd10:	e7f9      	b.n	bcd06 <_ZN6StringaSEPKc+0x18>

000bcd12 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bcd12:	b570      	push	{r4, r5, r6, lr}
   bcd14:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bcd16:	460e      	mov	r6, r1
   bcd18:	b909      	cbnz	r1, bcd1e <_ZN6String6concatEPKcj+0xc>
   bcd1a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bcd1c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bcd1e:	b16a      	cbz	r2, bcd3c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bcd20:	6884      	ldr	r4, [r0, #8]
   bcd22:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bcd24:	4621      	mov	r1, r4
   bcd26:	f7ff ff5f 	bl	bcbe8 <_ZN6String7reserveEj>
   bcd2a:	2800      	cmp	r0, #0
   bcd2c:	d0f5      	beq.n	bcd1a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bcd2e:	6828      	ldr	r0, [r5, #0]
   bcd30:	68ab      	ldr	r3, [r5, #8]
   bcd32:	4631      	mov	r1, r6
   bcd34:	4418      	add	r0, r3
   bcd36:	f001 fb24 	bl	be382 <strcpy>
	len = newlen;
   bcd3a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bcd3c:	2001      	movs	r0, #1
   bcd3e:	e7ed      	b.n	bcd1c <_ZN6String6concatEPKcj+0xa>

000bcd40 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   bcd40:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   bcd42:	2300      	movs	r3, #0
	buf[0] = c;
   bcd44:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   bcd48:	2201      	movs	r2, #1
   bcd4a:	a901      	add	r1, sp, #4
	buf[1] = 0;
   bcd4c:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   bcd50:	f7ff ffdf 	bl	bcd12 <_ZN6String6concatEPKcj>
}
   bcd54:	b003      	add	sp, #12
   bcd56:	f85d fb04 	ldr.w	pc, [sp], #4

000bcd5a <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   bcd5a:	6802      	ldr	r2, [r0, #0]
{
   bcd5c:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   bcd5e:	6809      	ldr	r1, [r1, #0]
   bcd60:	b162      	cbz	r2, bcd7c <_ZNK6String9compareToERKS_+0x22>
   bcd62:	b941      	cbnz	r1, bcd76 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   bcd64:	6880      	ldr	r0, [r0, #8]
   bcd66:	b160      	cbz	r0, bcd82 <_ZNK6String9compareToERKS_+0x28>
   bcd68:	7810      	ldrb	r0, [r2, #0]
   bcd6a:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   bcd6c:	6898      	ldr	r0, [r3, #8]
   bcd6e:	b140      	cbz	r0, bcd82 <_ZNK6String9compareToERKS_+0x28>
   bcd70:	7809      	ldrb	r1, [r1, #0]
   bcd72:	4248      	negs	r0, r1
   bcd74:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   bcd76:	4610      	mov	r0, r2
   bcd78:	f001 baf9 	b.w	be36e <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   bcd7c:	2900      	cmp	r1, #0
   bcd7e:	d1f5      	bne.n	bcd6c <_ZNK6String9compareToERKS_+0x12>
		return 0;
   bcd80:	4608      	mov	r0, r1
}
   bcd82:	4770      	bx	lr

000bcd84 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   bcd84:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   bcd86:	6882      	ldr	r2, [r0, #8]
   bcd88:	688b      	ldr	r3, [r1, #8]
   bcd8a:	429a      	cmp	r2, r3
   bcd8c:	d105      	bne.n	bcd9a <_ZNK6String6equalsERKS_+0x16>
   bcd8e:	f7ff ffe4 	bl	bcd5a <_ZNK6String9compareToERKS_>
   bcd92:	fab0 f080 	clz	r0, r0
   bcd96:	0940      	lsrs	r0, r0, #5
}
   bcd98:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   bcd9a:	2000      	movs	r0, #0
   bcd9c:	e7fc      	b.n	bcd98 <_ZNK6String6equalsERKS_+0x14>

000bcd9e <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   bcd9e:	6883      	ldr	r3, [r0, #8]
   bcda0:	428b      	cmp	r3, r1
   bcda2:	d903      	bls.n	bcdac <_ZNK6StringixEj+0xe>
   bcda4:	6800      	ldr	r0, [r0, #0]
   bcda6:	b110      	cbz	r0, bcdae <_ZNK6StringixEj+0x10>
	return buffer[index];
   bcda8:	5c40      	ldrb	r0, [r0, r1]
   bcdaa:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   bcdac:	2000      	movs	r0, #0
}
   bcdae:	4770      	bx	lr

000bcdb0 <_ZNK6String6charAtEj>:
	return operator[](loc);
   bcdb0:	f7ff bff5 	b.w	bcd9e <_ZNK6StringixEj>

000bcdb4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bcdb4:	4b05      	ldr	r3, [pc, #20]	; (bcdcc <_GLOBAL__sub_I_System+0x18>)
   bcdb6:	2202      	movs	r2, #2
   bcdb8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   bcdba:	4b05      	ldr	r3, [pc, #20]	; (bcdd0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bcdbc:	4a05      	ldr	r2, [pc, #20]	; (bcdd4 <_GLOBAL__sub_I_System+0x20>)
   bcdbe:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bcdc0:	2000      	movs	r0, #0
   bcdc2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bcdc6:	f7fc bc0b 	b.w	b95e0 <set_system_mode>
   bcdca:	bf00      	nop
   bcdcc:	2003e6c0 	.word	0x2003e6c0
   bcdd0:	2003e6b4 	.word	0x2003e6b4
   bcdd4:	ffff0000 	.word	0xffff0000

000bcdd8 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bcdd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bcddc:	4a15      	ldr	r2, [pc, #84]	; (bce34 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bcdde:	f8df 8060 	ldr.w	r8, [pc, #96]	; bce40 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bcde2:	e9d2 6300 	ldrd	r6, r3, [r2]
   bcde6:	1980      	adds	r0, r0, r6
   bcde8:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bcdec:	4b12      	ldr	r3, [pc, #72]	; (bce38 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bcdee:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bcdf2:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bcdf6:	1986      	adds	r6, r0, r6
   bcdf8:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bcdfc:	42bb      	cmp	r3, r7
   bcdfe:	bf08      	it	eq
   bce00:	42b2      	cmpeq	r2, r6
{
   bce02:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bce04:	d013      	beq.n	bce2e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bce06:	a903      	add	r1, sp, #12
   bce08:	4668      	mov	r0, sp
   bce0a:	e9cd 6700 	strd	r6, r7, [sp]
   bce0e:	f7fc fd13 	bl	b9838 <localtime_r>
	calendar_time.tm_year += 1900;
   bce12:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bce14:	4d09      	ldr	r5, [pc, #36]	; (bce3c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bce16:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bce1a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bce1c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bce1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bce20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bce22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bce24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bce26:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bce2a:	6823      	ldr	r3, [r4, #0]
   bce2c:	602b      	str	r3, [r5, #0]
    }
}
   bce2e:	b00c      	add	sp, #48	; 0x30
   bce30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bce34:	2003e6f8 	.word	0x2003e6f8
   bce38:	2003e6f0 	.word	0x2003e6f0
   bce3c:	2003e6c8 	.word	0x2003e6c8
   bce40:	2003e700 	.word	0x2003e700

000bce44 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   bce44:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bce46:	2000      	movs	r0, #0
   bce48:	f7fc fc26 	bl	b9698 <spark_sync_time_pending>
   bce4c:	b128      	cbz	r0, bce5a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bce4e:	f7fc fc0b 	bl	b9668 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bce52:	f080 0001 	eor.w	r0, r0, #1
   bce56:	b2c0      	uxtb	r0, r0
    }
   bce58:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bce5a:	2001      	movs	r0, #1
   bce5c:	e7fc      	b.n	bce58 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bce60 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   bce60:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bce62:	f7ff ffb9 	bl	bcdd8 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   bce66:	4b02      	ldr	r3, [pc, #8]	; (bce70 <_ZN9TimeClass5monthEx+0x10>)
   bce68:	6918      	ldr	r0, [r3, #16]
}
   bce6a:	3001      	adds	r0, #1
   bce6c:	bd08      	pop	{r3, pc}
   bce6e:	bf00      	nop
   bce70:	2003e6c8 	.word	0x2003e6c8

000bce74 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   bce74:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bce76:	2000      	movs	r0, #0
   bce78:	f7fc fa0a 	bl	b9290 <hal_rtc_time_is_valid>
    if (rtcstate)
   bce7c:	4604      	mov	r4, r0
   bce7e:	b9a0      	cbnz	r0, bceaa <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bce80:	f7fc fba6 	bl	b95d0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bce84:	2801      	cmp	r0, #1
   bce86:	d110      	bne.n	bceaa <_ZN9TimeClass7isValidEv+0x36>
   bce88:	4620      	mov	r0, r4
   bce8a:	f7fc fbc9 	bl	b9620 <system_thread_get_state>
   bce8e:	b960      	cbnz	r0, bceaa <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bce90:	f7ff ffd8 	bl	bce44 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bce94:	b910      	cbnz	r0, bce9c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bce96:	f7fc fbdf 	bl	b9658 <spark_process>
        while (_while() && !_condition()) {
   bce9a:	e7f9      	b.n	bce90 <_ZN9TimeClass7isValidEv+0x1c>
   bce9c:	f7ff ffd2 	bl	bce44 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bcea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bcea4:	2000      	movs	r0, #0
   bcea6:	f7fc b9f3 	b.w	b9290 <hal_rtc_time_is_valid>
}
   bceaa:	4620      	mov	r0, r4
   bceac:	bd10      	pop	{r4, pc}

000bceae <_ZN9TimeClass3nowEv>:
{
   bceae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bceb0:	f7ff ffe0 	bl	bce74 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bceb4:	2210      	movs	r2, #16
   bceb6:	2100      	movs	r1, #0
   bceb8:	4668      	mov	r0, sp
   bceba:	f001 f9d4 	bl	be266 <memset>
    hal_rtc_get_time(&tv, nullptr);
   bcebe:	2100      	movs	r1, #0
   bcec0:	4668      	mov	r0, sp
   bcec2:	f7fc f9ed 	bl	b92a0 <hal_rtc_get_time>
}
   bcec6:	9800      	ldr	r0, [sp, #0]
   bcec8:	b005      	add	sp, #20
   bceca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bced0 <_ZN9TimeClass4hourEv>:
{
   bced0:	b508      	push	{r3, lr}
	return hour(now());
   bced2:	f7ff ffec 	bl	bceae <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bced6:	17c1      	asrs	r1, r0, #31
   bced8:	f7ff ff7e 	bl	bcdd8 <_ZL22Refresh_UnixTime_Cachex>
}
   bcedc:	4b01      	ldr	r3, [pc, #4]	; (bcee4 <_ZN9TimeClass4hourEv+0x14>)
   bcede:	6898      	ldr	r0, [r3, #8]
   bcee0:	bd08      	pop	{r3, pc}
   bcee2:	bf00      	nop
   bcee4:	2003e6c8 	.word	0x2003e6c8

000bcee8 <_ZN9TimeClass6minuteEv>:
{
   bcee8:	b508      	push	{r3, lr}
	return minute(now());
   bceea:	f7ff ffe0 	bl	bceae <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bceee:	17c1      	asrs	r1, r0, #31
   bcef0:	f7ff ff72 	bl	bcdd8 <_ZL22Refresh_UnixTime_Cachex>
}
   bcef4:	4b01      	ldr	r3, [pc, #4]	; (bcefc <_ZN9TimeClass6minuteEv+0x14>)
   bcef6:	6858      	ldr	r0, [r3, #4]
   bcef8:	bd08      	pop	{r3, pc}
   bcefa:	bf00      	nop
   bcefc:	2003e6c8 	.word	0x2003e6c8

000bcf00 <_ZN9TimeClass6secondEv>:
{
   bcf00:	b508      	push	{r3, lr}
	return second(now());
   bcf02:	f7ff ffd4 	bl	bceae <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bcf06:	17c1      	asrs	r1, r0, #31
   bcf08:	f7ff ff66 	bl	bcdd8 <_ZL22Refresh_UnixTime_Cachex>
}
   bcf0c:	4b01      	ldr	r3, [pc, #4]	; (bcf14 <_ZN9TimeClass6secondEv+0x14>)
   bcf0e:	6818      	ldr	r0, [r3, #0]
   bcf10:	bd08      	pop	{r3, pc}
   bcf12:	bf00      	nop
   bcf14:	2003e6c8 	.word	0x2003e6c8

000bcf18 <_ZN9TimeClass3dayEv>:
{
   bcf18:	b508      	push	{r3, lr}
	return day(now());
   bcf1a:	f7ff ffc8 	bl	bceae <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bcf1e:	17c1      	asrs	r1, r0, #31
   bcf20:	f7ff ff5a 	bl	bcdd8 <_ZL22Refresh_UnixTime_Cachex>
}
   bcf24:	4b01      	ldr	r3, [pc, #4]	; (bcf2c <_ZN9TimeClass3dayEv+0x14>)
   bcf26:	68d8      	ldr	r0, [r3, #12]
   bcf28:	bd08      	pop	{r3, pc}
   bcf2a:	bf00      	nop
   bcf2c:	2003e6c8 	.word	0x2003e6c8

000bcf30 <_ZN9TimeClass5monthEv>:
{
   bcf30:	b508      	push	{r3, lr}
	return month(now());
   bcf32:	f7ff ffbc 	bl	bceae <_ZN9TimeClass3nowEv>
}
   bcf36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   bcf3a:	17c1      	asrs	r1, r0, #31
   bcf3c:	f7ff bf90 	b.w	bce60 <_ZN9TimeClass5monthEx>

000bcf40 <_ZN9TimeClass4yearEv>:
{
   bcf40:	b508      	push	{r3, lr}
	return year(now());
   bcf42:	f7ff ffb4 	bl	bceae <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bcf46:	17c1      	asrs	r1, r0, #31
   bcf48:	f7ff ff46 	bl	bcdd8 <_ZL22Refresh_UnixTime_Cachex>
}
   bcf4c:	4b01      	ldr	r3, [pc, #4]	; (bcf54 <_ZN9TimeClass4yearEv+0x14>)
   bcf4e:	6958      	ldr	r0, [r3, #20]
   bcf50:	bd08      	pop	{r3, pc}
   bcf52:	bf00      	nop
   bcf54:	2003e6c8 	.word	0x2003e6c8

000bcf58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bcf58:	4b02      	ldr	r3, [pc, #8]	; (bcf64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bcf5a:	681a      	ldr	r2, [r3, #0]
   bcf5c:	4b02      	ldr	r3, [pc, #8]	; (bcf68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bcf5e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bcf60:	4770      	bx	lr
   bcf62:	bf00      	nop
   bcf64:	2003da8c 	.word	0x2003da8c
   bcf68:	2003e6c4 	.word	0x2003e6c4

000bcf6c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bcf6c:	4770      	bx	lr

000bcf6e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bcf6e:	7441      	strb	r1, [r0, #17]
}
   bcf70:	4770      	bx	lr

000bcf72 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bcf72:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bcf74:	7c00      	ldrb	r0, [r0, #16]
   bcf76:	f7fc facb 	bl	b9510 <hal_usart_available_data_for_write>
}
   bcf7a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bcf7e:	bd08      	pop	{r3, pc}

000bcf80 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bcf80:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bcf82:	7c00      	ldrb	r0, [r0, #16]
   bcf84:	f7fc fa9c 	bl	b94c0 <hal_usart_available>
}
   bcf88:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bcf8c:	bd08      	pop	{r3, pc}

000bcf8e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bcf8e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bcf90:	7c00      	ldrb	r0, [r0, #16]
   bcf92:	f7fc faa5 	bl	b94e0 <hal_usart_peek>
}
   bcf96:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bcf9a:	bd08      	pop	{r3, pc}

000bcf9c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bcf9c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bcf9e:	7c00      	ldrb	r0, [r0, #16]
   bcfa0:	f7fc fa96 	bl	b94d0 <hal_usart_read>
}
   bcfa4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bcfa8:	bd08      	pop	{r3, pc}

000bcfaa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bcfaa:	7c00      	ldrb	r0, [r0, #16]
   bcfac:	f7fc baa0 	b.w	b94f0 <hal_usart_flush>

000bcfb0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bcfb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bcfb2:	7c45      	ldrb	r5, [r0, #17]
{
   bcfb4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bcfb6:	b12d      	cbz	r5, bcfc4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bcfb8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bcfba:	b003      	add	sp, #12
   bcfbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bcfc0:	f7fc ba76 	b.w	b94b0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bcfc4:	7c00      	ldrb	r0, [r0, #16]
   bcfc6:	9101      	str	r1, [sp, #4]
   bcfc8:	f7fc faa2 	bl	b9510 <hal_usart_available_data_for_write>
   bcfcc:	2800      	cmp	r0, #0
   bcfce:	9901      	ldr	r1, [sp, #4]
   bcfd0:	dcf2      	bgt.n	bcfb8 <_ZN11USARTSerial5writeEh+0x8>
}
   bcfd2:	4628      	mov	r0, r5
   bcfd4:	b003      	add	sp, #12
   bcfd6:	bd30      	pop	{r4, r5, pc}

000bcfd8 <_ZN11USARTSerialD0Ev>:
   bcfd8:	b510      	push	{r4, lr}
   bcfda:	2114      	movs	r1, #20
   bcfdc:	4604      	mov	r4, r0
   bcfde:	f7f7 f85e 	bl	b409e <_ZdlPvj>
   bcfe2:	4620      	mov	r0, r4
   bcfe4:	bd10      	pop	{r4, pc}
	...

000bcfe8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bcfe8:	b510      	push	{r4, lr}
   bcfea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bcfee:	4604      	mov	r4, r0
   bcff0:	4608      	mov	r0, r1
   bcff2:	4611      	mov	r1, r2
   bcff4:	2200      	movs	r2, #0
   bcff6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bcffa:	4b04      	ldr	r3, [pc, #16]	; (bd00c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bcffc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bcffe:	2301      	movs	r3, #1
  _serial = serial;
   bd000:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bd002:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bd004:	f7fc fa94 	bl	b9530 <hal_usart_init_ex>
}
   bd008:	4620      	mov	r0, r4
   bd00a:	bd10      	pop	{r4, pc}
   bd00c:	000c19d0 	.word	0x000c19d0

000bd010 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bd010:	7c00      	ldrb	r0, [r0, #16]
   bd012:	2300      	movs	r3, #0
   bd014:	f7fc ba84 	b.w	b9520 <hal_usart_begin_config>

000bd018 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bd018:	2200      	movs	r2, #0
   bd01a:	f7ff bff9 	b.w	bd010 <_ZN11USARTSerial5beginEmm>

000bd01e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bd01e:	7441      	strb	r1, [r0, #17]
}
   bd020:	4770      	bx	lr

000bd022 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bd022:	4770      	bx	lr

000bd024 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bd024:	4770      	bx	lr

000bd026 <_ZN9USBSerial4readEv>:
{
   bd026:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bd028:	2100      	movs	r1, #0
   bd02a:	7c00      	ldrb	r0, [r0, #16]
   bd02c:	f7fc faa8 	bl	b9580 <HAL_USB_USART_Receive_Data>
}
   bd030:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bd034:	bd08      	pop	{r3, pc}

000bd036 <_ZN9USBSerial4peekEv>:
{
   bd036:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bd038:	2101      	movs	r1, #1
   bd03a:	7c00      	ldrb	r0, [r0, #16]
   bd03c:	f7fc faa0 	bl	b9580 <HAL_USB_USART_Receive_Data>
}
   bd040:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bd044:	bd08      	pop	{r3, pc}

000bd046 <_ZN9USBSerial17availableForWriteEv>:
{
   bd046:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bd048:	7c00      	ldrb	r0, [r0, #16]
   bd04a:	f7fc fa91 	bl	b9570 <HAL_USB_USART_Available_Data_For_Write>
}
   bd04e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bd052:	bd08      	pop	{r3, pc}

000bd054 <_ZN9USBSerial9availableEv>:
{
   bd054:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bd056:	7c00      	ldrb	r0, [r0, #16]
   bd058:	f7fc fa82 	bl	b9560 <HAL_USB_USART_Available_Data>
}
   bd05c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bd060:	bd08      	pop	{r3, pc}

000bd062 <_ZN9USBSerial5writeEh>:
{
   bd062:	b513      	push	{r0, r1, r4, lr}
   bd064:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bd066:	7c00      	ldrb	r0, [r0, #16]
{
   bd068:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bd06a:	f7fc fa81 	bl	b9570 <HAL_USB_USART_Available_Data_For_Write>
   bd06e:	2800      	cmp	r0, #0
   bd070:	9901      	ldr	r1, [sp, #4]
   bd072:	dc01      	bgt.n	bd078 <_ZN9USBSerial5writeEh+0x16>
   bd074:	7c60      	ldrb	r0, [r4, #17]
   bd076:	b120      	cbz	r0, bd082 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bd078:	7c20      	ldrb	r0, [r4, #16]
   bd07a:	f7fc fa89 	bl	b9590 <HAL_USB_USART_Send_Data>
   bd07e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bd082:	b002      	add	sp, #8
   bd084:	bd10      	pop	{r4, pc}

000bd086 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bd086:	7c00      	ldrb	r0, [r0, #16]
   bd088:	f7fc ba8a 	b.w	b95a0 <HAL_USB_USART_Flush_Data>

000bd08c <_ZN9USBSerialD0Ev>:
   bd08c:	b510      	push	{r4, lr}
   bd08e:	2114      	movs	r1, #20
   bd090:	4604      	mov	r4, r0
   bd092:	f7f7 f804 	bl	b409e <_ZdlPvj>
   bd096:	4620      	mov	r0, r4
   bd098:	bd10      	pop	{r4, pc}
	...

000bd09c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bd09c:	b510      	push	{r4, lr}
   bd09e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bd0a2:	4604      	mov	r4, r0
   bd0a4:	4608      	mov	r0, r1
   bd0a6:	2100      	movs	r1, #0
   bd0a8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bd0ac:	4b04      	ldr	r3, [pc, #16]	; (bd0c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bd0ae:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bd0b0:	2301      	movs	r3, #1
  _serial = serial;
   bd0b2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bd0b4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bd0b6:	4611      	mov	r1, r2
   bd0b8:	f7fc fa42 	bl	b9540 <HAL_USB_USART_Init>
}
   bd0bc:	4620      	mov	r0, r4
   bd0be:	bd10      	pop	{r4, pc}
   bd0c0:	000c1a00 	.word	0x000c1a00

000bd0c4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bd0c4:	7c00      	ldrb	r0, [r0, #16]
   bd0c6:	2200      	movs	r2, #0
   bd0c8:	f7fc ba42 	b.w	b9550 <HAL_USB_USART_Begin>

000bd0cc <_Z19acquireSerialBufferv>:
{
   bd0cc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bd0ce:	2214      	movs	r2, #20
{
   bd0d0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bd0d2:	2100      	movs	r1, #0
   bd0d4:	f001 f8c7 	bl	be266 <memset>
}
   bd0d8:	4620      	mov	r0, r4
   bd0da:	bd10      	pop	{r4, pc}

000bd0dc <_Z16_fetch_usbserialv>:
{
   bd0dc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bd0de:	4c0f      	ldr	r4, [pc, #60]	; (bd11c <_Z16_fetch_usbserialv+0x40>)
{
   bd0e0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bd0e2:	a803      	add	r0, sp, #12
   bd0e4:	f7ff fff2 	bl	bd0cc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bd0e8:	7821      	ldrb	r1, [r4, #0]
   bd0ea:	f3bf 8f5b 	dmb	ish
   bd0ee:	f011 0101 	ands.w	r1, r1, #1
   bd0f2:	d10f      	bne.n	bd114 <_Z16_fetch_usbserialv+0x38>
   bd0f4:	4620      	mov	r0, r4
   bd0f6:	9101      	str	r1, [sp, #4]
   bd0f8:	f7f6 ffe0 	bl	b40bc <__cxa_guard_acquire>
   bd0fc:	9901      	ldr	r1, [sp, #4]
   bd0fe:	b148      	cbz	r0, bd114 <_Z16_fetch_usbserialv+0x38>
   bd100:	aa03      	add	r2, sp, #12
   bd102:	4807      	ldr	r0, [pc, #28]	; (bd120 <_Z16_fetch_usbserialv+0x44>)
   bd104:	f7ff ffca 	bl	bd09c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bd108:	4620      	mov	r0, r4
   bd10a:	f7f6 ffdc 	bl	b40c6 <__cxa_guard_release>
   bd10e:	4805      	ldr	r0, [pc, #20]	; (bd124 <_Z16_fetch_usbserialv+0x48>)
   bd110:	f001 f864 	bl	be1dc <atexit>
	return _usbserial;
}
   bd114:	4802      	ldr	r0, [pc, #8]	; (bd120 <_Z16_fetch_usbserialv+0x44>)
   bd116:	b008      	add	sp, #32
   bd118:	bd10      	pop	{r4, pc}
   bd11a:	bf00      	nop
   bd11c:	2003e708 	.word	0x2003e708
   bd120:	2003e70c 	.word	0x2003e70c
   bd124:	000bd023 	.word	0x000bd023

000bd128 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bd128:	4b01      	ldr	r3, [pc, #4]	; (bd130 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bd12a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bd12c:	4770      	bx	lr
   bd12e:	bf00      	nop
   bd130:	2003da90 	.word	0x2003da90

000bd134 <serialEventRun>:
{
   bd134:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bd136:	4b0b      	ldr	r3, [pc, #44]	; (bd164 <serialEventRun+0x30>)
   bd138:	b143      	cbz	r3, bd14c <serialEventRun+0x18>
   bd13a:	f7ff ffcf 	bl	bd0dc <_Z16_fetch_usbserialv>
   bd13e:	6803      	ldr	r3, [r0, #0]
   bd140:	691b      	ldr	r3, [r3, #16]
   bd142:	4798      	blx	r3
   bd144:	2800      	cmp	r0, #0
   bd146:	dd01      	ble.n	bd14c <serialEventRun+0x18>
        serialEvent();
   bd148:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bd14c:	4b06      	ldr	r3, [pc, #24]	; (bd168 <serialEventRun+0x34>)
   bd14e:	b143      	cbz	r3, bd162 <serialEventRun+0x2e>
   bd150:	f000 f970 	bl	bd434 <_Z22__fetch_global_Serial1v>
   bd154:	6803      	ldr	r3, [r0, #0]
   bd156:	691b      	ldr	r3, [r3, #16]
   bd158:	4798      	blx	r3
   bd15a:	2800      	cmp	r0, #0
   bd15c:	dd01      	ble.n	bd162 <serialEventRun+0x2e>
        serialEvent1();
   bd15e:	f3af 8000 	nop.w
}
   bd162:	bd08      	pop	{r3, pc}
	...

000bd16c <_post_loop>:
{
   bd16c:	b508      	push	{r3, lr}
	serialEventRun();
   bd16e:	f7ff ffe1 	bl	bd134 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bd172:	f7fc f885 	bl	b9280 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bd176:	4b01      	ldr	r3, [pc, #4]	; (bd17c <_post_loop+0x10>)
   bd178:	6018      	str	r0, [r3, #0]
}
   bd17a:	bd08      	pop	{r3, pc}
   bd17c:	2003e728 	.word	0x2003e728

000bd180 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bd180:	4805      	ldr	r0, [pc, #20]	; (bd198 <_Z33system_initialize_user_backup_ramv+0x18>)
   bd182:	4a06      	ldr	r2, [pc, #24]	; (bd19c <_Z33system_initialize_user_backup_ramv+0x1c>)
   bd184:	4906      	ldr	r1, [pc, #24]	; (bd1a0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bd186:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bd188:	1a12      	subs	r2, r2, r0
   bd18a:	f001 f844 	bl	be216 <memcpy>
    __backup_sram_signature = signature;
   bd18e:	4b05      	ldr	r3, [pc, #20]	; (bd1a4 <_Z33system_initialize_user_backup_ramv+0x24>)
   bd190:	4a05      	ldr	r2, [pc, #20]	; (bd1a8 <_Z33system_initialize_user_backup_ramv+0x28>)
   bd192:	601a      	str	r2, [r3, #0]
}
   bd194:	bd08      	pop	{r3, pc}
   bd196:	bf00      	nop
   bd198:	2003f400 	.word	0x2003f400
   bd19c:	2003f404 	.word	0x2003f404
   bd1a0:	000c1f94 	.word	0x000c1f94
   bd1a4:	2003f400 	.word	0x2003f400
   bd1a8:	9a271c1e 	.word	0x9a271c1e

000bd1ac <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bd1ac:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bd1ae:	2300      	movs	r3, #0
   bd1b0:	9300      	str	r3, [sp, #0]
   bd1b2:	461a      	mov	r2, r3
   bd1b4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bd1b8:	f7fc fa44 	bl	b9644 <system_ctrl_set_result>
}
   bd1bc:	b003      	add	sp, #12
   bd1be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bd1c4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bd1c4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bd1c6:	8843      	ldrh	r3, [r0, #2]
   bd1c8:	2b0a      	cmp	r3, #10
   bd1ca:	d008      	beq.n	bd1de <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bd1cc:	2b50      	cmp	r3, #80	; 0x50
   bd1ce:	d10b      	bne.n	bd1e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bd1d0:	4b09      	ldr	r3, [pc, #36]	; (bd1f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bd1d2:	681b      	ldr	r3, [r3, #0]
   bd1d4:	b14b      	cbz	r3, bd1ea <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bd1d6:	b003      	add	sp, #12
   bd1d8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bd1dc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bd1de:	f7ff ffe5 	bl	bd1ac <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bd1e2:	b003      	add	sp, #12
   bd1e4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bd1e8:	2300      	movs	r3, #0
   bd1ea:	9300      	str	r3, [sp, #0]
   bd1ec:	461a      	mov	r2, r3
   bd1ee:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bd1f2:	f7fc fa27 	bl	b9644 <system_ctrl_set_result>
}
   bd1f6:	e7f4      	b.n	bd1e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bd1f8:	2003e724 	.word	0x2003e724

000bd1fc <module_user_init_hook>:
{
   bd1fc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bd1fe:	4812      	ldr	r0, [pc, #72]	; (bd248 <module_user_init_hook+0x4c>)
   bd200:	2100      	movs	r1, #0
   bd202:	f7fc fb11 	bl	b9828 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bd206:	4b11      	ldr	r3, [pc, #68]	; (bd24c <module_user_init_hook+0x50>)
   bd208:	681a      	ldr	r2, [r3, #0]
   bd20a:	4b11      	ldr	r3, [pc, #68]	; (bd250 <module_user_init_hook+0x54>)
   bd20c:	429a      	cmp	r2, r3
   bd20e:	4b11      	ldr	r3, [pc, #68]	; (bd254 <module_user_init_hook+0x58>)
   bd210:	bf0c      	ite	eq
   bd212:	2201      	moveq	r2, #1
   bd214:	2200      	movne	r2, #0
   bd216:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bd218:	d001      	beq.n	bd21e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bd21a:	f7ff ffb1 	bl	bd180 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bd21e:	f7fc f817 	bl	b9250 <HAL_RNG_GetRandomNumber>
   bd222:	4604      	mov	r4, r0
    srand(seed);
   bd224:	f001 f828 	bl	be278 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bd228:	4b0b      	ldr	r3, [pc, #44]	; (bd258 <module_user_init_hook+0x5c>)
   bd22a:	b113      	cbz	r3, bd232 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bd22c:	4620      	mov	r0, r4
   bd22e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bd232:	2100      	movs	r1, #0
   bd234:	4808      	ldr	r0, [pc, #32]	; (bd258 <module_user_init_hook+0x5c>)
   bd236:	f7fc fa37 	bl	b96a8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bd23a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bd23e:	4807      	ldr	r0, [pc, #28]	; (bd25c <module_user_init_hook+0x60>)
   bd240:	2100      	movs	r1, #0
   bd242:	f7fc b9f5 	b.w	b9630 <system_ctrl_set_app_request_handler>
   bd246:	bf00      	nop
   bd248:	000bd129 	.word	0x000bd129
   bd24c:	2003f400 	.word	0x2003f400
   bd250:	9a271c1e 	.word	0x9a271c1e
   bd254:	2003e720 	.word	0x2003e720
   bd258:	00000000 	.word	0x00000000
   bd25c:	000bd1c5 	.word	0x000bd1c5

000bd260 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bd260:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   bd262:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bd264:	d902      	bls.n	bd26c <pinAvailable+0xc>
    return false;
   bd266:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bd268:	b002      	add	sp, #8
   bd26a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bd26c:	f1a0 030b 	sub.w	r3, r0, #11
   bd270:	2b02      	cmp	r3, #2
   bd272:	d81a      	bhi.n	bd2aa <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bd274:	4c17      	ldr	r4, [pc, #92]	; (bd2d4 <pinAvailable+0x74>)
   bd276:	7821      	ldrb	r1, [r4, #0]
   bd278:	f3bf 8f5b 	dmb	ish
   bd27c:	f011 0101 	ands.w	r1, r1, #1
   bd280:	d10b      	bne.n	bd29a <pinAvailable+0x3a>
   bd282:	4620      	mov	r0, r4
   bd284:	9101      	str	r1, [sp, #4]
   bd286:	f7f6 ff19 	bl	b40bc <__cxa_guard_acquire>
   bd28a:	9901      	ldr	r1, [sp, #4]
   bd28c:	b128      	cbz	r0, bd29a <pinAvailable+0x3a>
   bd28e:	4812      	ldr	r0, [pc, #72]	; (bd2d8 <pinAvailable+0x78>)
   bd290:	f7ff fba0 	bl	bc9d4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bd294:	4620      	mov	r0, r4
   bd296:	f7f6 ff16 	bl	b40c6 <__cxa_guard_release>
   bd29a:	4b0f      	ldr	r3, [pc, #60]	; (bd2d8 <pinAvailable+0x78>)
   bd29c:	7818      	ldrb	r0, [r3, #0]
   bd29e:	f7fc f8cf 	bl	b9440 <hal_spi_is_enabled>
   bd2a2:	2800      	cmp	r0, #0
   bd2a4:	d1df      	bne.n	bd266 <pinAvailable+0x6>
  return true; // 'pin' is available
   bd2a6:	2001      	movs	r0, #1
   bd2a8:	e7de      	b.n	bd268 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bd2aa:	2801      	cmp	r0, #1
   bd2ac:	d809      	bhi.n	bd2c2 <pinAvailable+0x62>
   bd2ae:	f000 f881 	bl	bd3b4 <_Z19__fetch_global_Wirev>
   bd2b2:	2100      	movs	r1, #0
   bd2b4:	7c00      	ldrb	r0, [r0, #16]
   bd2b6:	f7fc f883 	bl	b93c0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bd2ba:	f080 0001 	eor.w	r0, r0, #1
   bd2be:	b2c0      	uxtb	r0, r0
   bd2c0:	e7d2      	b.n	bd268 <pinAvailable+0x8>
   bd2c2:	3809      	subs	r0, #9
   bd2c4:	2801      	cmp	r0, #1
   bd2c6:	d8ee      	bhi.n	bd2a6 <pinAvailable+0x46>
   bd2c8:	f000 f8b4 	bl	bd434 <_Z22__fetch_global_Serial1v>
   bd2cc:	7c00      	ldrb	r0, [r0, #16]
   bd2ce:	f7fc f917 	bl	b9500 <hal_usart_is_enabled>
   bd2d2:	e7f2      	b.n	bd2ba <pinAvailable+0x5a>
   bd2d4:	2003e648 	.word	0x2003e648
   bd2d8:	2003e64c 	.word	0x2003e64c

000bd2dc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bd2dc:	2825      	cmp	r0, #37	; 0x25
{
   bd2de:	b538      	push	{r3, r4, r5, lr}
   bd2e0:	4604      	mov	r4, r0
   bd2e2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bd2e4:	d80a      	bhi.n	bd2fc <pinMode+0x20>
   bd2e6:	29ff      	cmp	r1, #255	; 0xff
   bd2e8:	d008      	beq.n	bd2fc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bd2ea:	f7ff ffb9 	bl	bd260 <pinAvailable>
   bd2ee:	b128      	cbz	r0, bd2fc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bd2f0:	4629      	mov	r1, r5
   bd2f2:	4620      	mov	r0, r4
}
   bd2f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bd2f8:	f7fb bfe2 	b.w	b92c0 <HAL_Pin_Mode>
}
   bd2fc:	bd38      	pop	{r3, r4, r5, pc}

000bd2fe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bd2fe:	b538      	push	{r3, r4, r5, lr}
   bd300:	4604      	mov	r4, r0
   bd302:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bd304:	f7fb ffe4 	bl	b92d0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bd308:	28ff      	cmp	r0, #255	; 0xff
   bd30a:	d010      	beq.n	bd32e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bd30c:	2806      	cmp	r0, #6
   bd30e:	d804      	bhi.n	bd31a <digitalWrite+0x1c>
   bd310:	234d      	movs	r3, #77	; 0x4d
   bd312:	fa23 f000 	lsr.w	r0, r3, r0
   bd316:	07c3      	lsls	r3, r0, #31
   bd318:	d409      	bmi.n	bd32e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bd31a:	4620      	mov	r0, r4
   bd31c:	f7ff ffa0 	bl	bd260 <pinAvailable>
   bd320:	b128      	cbz	r0, bd32e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bd322:	4629      	mov	r1, r5
   bd324:	4620      	mov	r0, r4
}
   bd326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bd32a:	f7fb bfd9 	b.w	b92e0 <HAL_GPIO_Write>
}
   bd32e:	bd38      	pop	{r3, r4, r5, pc}

000bd330 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bd330:	b510      	push	{r4, lr}
   bd332:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bd334:	f7fb ffcc 	bl	b92d0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bd338:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bd33a:	b2db      	uxtb	r3, r3
   bd33c:	2b01      	cmp	r3, #1
   bd33e:	d908      	bls.n	bd352 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bd340:	4620      	mov	r0, r4
   bd342:	f7ff ff8d 	bl	bd260 <pinAvailable>
   bd346:	b120      	cbz	r0, bd352 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bd348:	4620      	mov	r0, r4
}
   bd34a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bd34e:	f7fb bfcf 	b.w	b92f0 <HAL_GPIO_Read>
}
   bd352:	2000      	movs	r0, #0
   bd354:	bd10      	pop	{r4, pc}

000bd356 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bd356:	280d      	cmp	r0, #13
{
   bd358:	b510      	push	{r4, lr}
   bd35a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bd35c:	bf9c      	itt	ls
   bd35e:	340e      	addls	r4, #14
   bd360:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bd362:	4620      	mov	r0, r4
   bd364:	f7ff ff7c 	bl	bd260 <pinAvailable>
   bd368:	b150      	cbz	r0, bd380 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bd36a:	2103      	movs	r1, #3
   bd36c:	4620      	mov	r0, r4
   bd36e:	f7fb ff9f 	bl	b92b0 <HAL_Validate_Pin_Function>
   bd372:	2803      	cmp	r0, #3
   bd374:	d104      	bne.n	bd380 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bd376:	4620      	mov	r0, r4
}
   bd378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bd37c:	f7fb bfd0 	b.w	b9320 <hal_adc_read>
}
   bd380:	2000      	movs	r0, #0
   bd382:	bd10      	pop	{r4, pc}

000bd384 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bd384:	4770      	bx	lr
	...

000bd388 <_Z17acquireWireBufferv>:
{
   bd388:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bd38a:	2520      	movs	r5, #32
   bd38c:	2314      	movs	r3, #20
{
   bd38e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bd390:	6003      	str	r3, [r0, #0]
   bd392:	6085      	str	r5, [r0, #8]
   bd394:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bd396:	4906      	ldr	r1, [pc, #24]	; (bd3b0 <_Z17acquireWireBufferv+0x28>)
   bd398:	4628      	mov	r0, r5
   bd39a:	f000 f86f 	bl	bd47c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bd39e:	4904      	ldr	r1, [pc, #16]	; (bd3b0 <_Z17acquireWireBufferv+0x28>)
	};
   bd3a0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bd3a2:	4628      	mov	r0, r5
   bd3a4:	f000 f86a 	bl	bd47c <_ZnajRKSt9nothrow_t>
	};
   bd3a8:	60e0      	str	r0, [r4, #12]
}
   bd3aa:	4620      	mov	r0, r4
   bd3ac:	bd38      	pop	{r3, r4, r5, pc}
   bd3ae:	bf00      	nop
   bd3b0:	000c1a28 	.word	0x000c1a28

000bd3b4 <_Z19__fetch_global_Wirev>:
{
   bd3b4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bd3b6:	4d0e      	ldr	r5, [pc, #56]	; (bd3f0 <_Z19__fetch_global_Wirev+0x3c>)
   bd3b8:	7829      	ldrb	r1, [r5, #0]
   bd3ba:	f3bf 8f5b 	dmb	ish
   bd3be:	f011 0401 	ands.w	r4, r1, #1
{
   bd3c2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bd3c4:	d111      	bne.n	bd3ea <_Z19__fetch_global_Wirev+0x36>
   bd3c6:	4628      	mov	r0, r5
   bd3c8:	f7f6 fe78 	bl	b40bc <__cxa_guard_acquire>
   bd3cc:	b168      	cbz	r0, bd3ea <_Z19__fetch_global_Wirev+0x36>
   bd3ce:	a801      	add	r0, sp, #4
   bd3d0:	f7ff ffda 	bl	bd388 <_Z17acquireWireBufferv>
   bd3d4:	aa01      	add	r2, sp, #4
   bd3d6:	4621      	mov	r1, r4
   bd3d8:	4806      	ldr	r0, [pc, #24]	; (bd3f4 <_Z19__fetch_global_Wirev+0x40>)
   bd3da:	f7ff f8d9 	bl	bc590 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bd3de:	4628      	mov	r0, r5
   bd3e0:	f7f6 fe71 	bl	b40c6 <__cxa_guard_release>
   bd3e4:	4804      	ldr	r0, [pc, #16]	; (bd3f8 <_Z19__fetch_global_Wirev+0x44>)
   bd3e6:	f000 fef9 	bl	be1dc <atexit>
	return wire;
}
   bd3ea:	4802      	ldr	r0, [pc, #8]	; (bd3f4 <_Z19__fetch_global_Wirev+0x40>)
   bd3ec:	b007      	add	sp, #28
   bd3ee:	bd30      	pop	{r4, r5, pc}
   bd3f0:	2003e72c 	.word	0x2003e72c
   bd3f4:	2003e730 	.word	0x2003e730
   bd3f8:	000bd385 	.word	0x000bd385

000bd3fc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bd3fc:	4770      	bx	lr
	...

000bd400 <_Z20acquireSerial1Bufferv>:
{
   bd400:	b538      	push	{r3, r4, r5, lr}
   bd402:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bd404:	2514      	movs	r5, #20
   bd406:	462a      	mov	r2, r5
   bd408:	2100      	movs	r1, #0
   bd40a:	f000 ff2c 	bl	be266 <memset>
   bd40e:	8025      	strh	r5, [r4, #0]
   bd410:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd412:	4907      	ldr	r1, [pc, #28]	; (bd430 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bd414:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd416:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bd418:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd41a:	f000 f82f 	bl	bd47c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd41e:	4904      	ldr	r1, [pc, #16]	; (bd430 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bd420:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd422:	4628      	mov	r0, r5
   bd424:	f000 f82a 	bl	bd47c <_ZnajRKSt9nothrow_t>
    };
   bd428:	60e0      	str	r0, [r4, #12]
}
   bd42a:	4620      	mov	r0, r4
   bd42c:	bd38      	pop	{r3, r4, r5, pc}
   bd42e:	bf00      	nop
   bd430:	000c1a28 	.word	0x000c1a28

000bd434 <_Z22__fetch_global_Serial1v>:
{
   bd434:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bd436:	4d0e      	ldr	r5, [pc, #56]	; (bd470 <_Z22__fetch_global_Serial1v+0x3c>)
   bd438:	7829      	ldrb	r1, [r5, #0]
   bd43a:	f3bf 8f5b 	dmb	ish
   bd43e:	f011 0401 	ands.w	r4, r1, #1
{
   bd442:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bd444:	d111      	bne.n	bd46a <_Z22__fetch_global_Serial1v+0x36>
   bd446:	4628      	mov	r0, r5
   bd448:	f7f6 fe38 	bl	b40bc <__cxa_guard_acquire>
   bd44c:	b168      	cbz	r0, bd46a <_Z22__fetch_global_Serial1v+0x36>
   bd44e:	a801      	add	r0, sp, #4
   bd450:	f7ff ffd6 	bl	bd400 <_Z20acquireSerial1Bufferv>
   bd454:	aa01      	add	r2, sp, #4
   bd456:	4621      	mov	r1, r4
   bd458:	4806      	ldr	r0, [pc, #24]	; (bd474 <_Z22__fetch_global_Serial1v+0x40>)
   bd45a:	f7ff fdc5 	bl	bcfe8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bd45e:	4628      	mov	r0, r5
   bd460:	f7f6 fe31 	bl	b40c6 <__cxa_guard_release>
   bd464:	4804      	ldr	r0, [pc, #16]	; (bd478 <_Z22__fetch_global_Serial1v+0x44>)
   bd466:	f000 feb9 	bl	be1dc <atexit>
    return serial1;
}
   bd46a:	4802      	ldr	r0, [pc, #8]	; (bd474 <_Z22__fetch_global_Serial1v+0x40>)
   bd46c:	b007      	add	sp, #28
   bd46e:	bd30      	pop	{r4, r5, pc}
   bd470:	2003e744 	.word	0x2003e744
   bd474:	2003e748 	.word	0x2003e748
   bd478:	000bd3fd 	.word	0x000bd3fd

000bd47c <_ZnajRKSt9nothrow_t>:
   bd47c:	f7f6 be0d 	b.w	b409a <_Znaj>

000bd480 <_ZSt19__throw_logic_errorPKc>:
   bd480:	b508      	push	{r3, lr}
   bd482:	f7fc f9b1 	bl	b97e8 <abort>

000bd486 <_ZSt20__throw_length_errorPKc>:
   bd486:	b508      	push	{r3, lr}
   bd488:	f7fc f9ae 	bl	b97e8 <abort>

000bd48c <_ZSt24__throw_out_of_range_fmtPKcz>:
   bd48c:	b40f      	push	{r0, r1, r2, r3}
   bd48e:	b580      	push	{r7, lr}
   bd490:	b084      	sub	sp, #16
   bd492:	af00      	add	r7, sp, #0
   bd494:	f107 0418 	add.w	r4, r7, #24
   bd498:	f854 2b04 	ldr.w	r2, [r4], #4
   bd49c:	607a      	str	r2, [r7, #4]
   bd49e:	4610      	mov	r0, r2
   bd4a0:	f000 ff95 	bl	be3ce <strlen>
   bd4a4:	f200 2307 	addw	r3, r0, #519	; 0x207
   bd4a8:	f023 0307 	bic.w	r3, r3, #7
   bd4ac:	ebad 0d03 	sub.w	sp, sp, r3
   bd4b0:	f500 7100 	add.w	r1, r0, #512	; 0x200
   bd4b4:	687a      	ldr	r2, [r7, #4]
   bd4b6:	60fc      	str	r4, [r7, #12]
   bd4b8:	4623      	mov	r3, r4
   bd4ba:	4668      	mov	r0, sp
   bd4bc:	f000 f85e 	bl	bd57c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   bd4c0:	f7fc f992 	bl	b97e8 <abort>

000bd4c4 <_ZSt25__throw_bad_function_callv>:
   bd4c4:	b508      	push	{r3, lr}
   bd4c6:	f7fc f98f 	bl	b97e8 <abort>
	...

000bd4cc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bd4cc:	4901      	ldr	r1, [pc, #4]	; (bd4d4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bd4ce:	f000 b98b 	b.w	bd7e8 <_ZNKSt9type_infoeqERKS_>
   bd4d2:	bf00      	nop
   bd4d4:	000c1a44 	.word	0x000c1a44

000bd4d8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   bd4d8:	b580      	push	{r7, lr}
   bd4da:	b09c      	sub	sp, #112	; 0x70
   bd4dc:	4606      	mov	r6, r0
   bd4de:	af00      	add	r7, sp, #0
   bd4e0:	460c      	mov	r4, r1
   bd4e2:	1ba4      	subs	r4, r4, r6
   bd4e4:	490e      	ldr	r1, [pc, #56]	; (bd520 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   bd4e6:	2269      	movs	r2, #105	; 0x69
   bd4e8:	1d38      	adds	r0, r7, #4
   bd4ea:	f000 fe94 	bl	be216 <memcpy>
   bd4ee:	f104 0370 	add.w	r3, r4, #112	; 0x70
   bd4f2:	f023 0307 	bic.w	r3, r3, #7
   bd4f6:	ebad 0d03 	sub.w	sp, sp, r3
   bd4fa:	466d      	mov	r5, sp
   bd4fc:	2268      	movs	r2, #104	; 0x68
   bd4fe:	1d39      	adds	r1, r7, #4
   bd500:	4628      	mov	r0, r5
   bd502:	f000 fe88 	bl	be216 <memcpy>
   bd506:	4622      	mov	r2, r4
   bd508:	4631      	mov	r1, r6
   bd50a:	f105 0068 	add.w	r0, r5, #104	; 0x68
   bd50e:	442c      	add	r4, r5
   bd510:	f000 fe81 	bl	be216 <memcpy>
   bd514:	2300      	movs	r3, #0
   bd516:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   bd51a:	4628      	mov	r0, r5
   bd51c:	f7ff ffb0 	bl	bd480 <_ZSt19__throw_logic_errorPKc>
   bd520:	000c1a4c 	.word	0x000c1a4c

000bd524 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   bd524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd528:	af00      	add	r7, sp, #0
   bd52a:	b084      	sub	sp, #16
   bd52c:	466d      	mov	r5, sp
   bd52e:	f105 040c 	add.w	r4, r5, #12
   bd532:	f8df 8044 	ldr.w	r8, [pc, #68]	; bd578 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   bd536:	4623      	mov	r3, r4
   bd538:	f04f 0c0a 	mov.w	ip, #10
   bd53c:	fbb2 f6fc 	udiv	r6, r2, ip
   bd540:	fb0c 2e16 	mls	lr, ip, r6, r2
   bd544:	f818 e00e 	ldrb.w	lr, [r8, lr]
   bd548:	f803 ed01 	strb.w	lr, [r3, #-1]!
   bd54c:	4696      	mov	lr, r2
   bd54e:	f1be 0f09 	cmp.w	lr, #9
   bd552:	4632      	mov	r2, r6
   bd554:	d8f2      	bhi.n	bd53c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   bd556:	1ae4      	subs	r4, r4, r3
   bd558:	428c      	cmp	r4, r1
   bd55a:	d809      	bhi.n	bd570 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   bd55c:	f1c4 030c 	rsb	r3, r4, #12
   bd560:	4622      	mov	r2, r4
   bd562:	18e9      	adds	r1, r5, r3
   bd564:	f000 fe57 	bl	be216 <memcpy>
   bd568:	4620      	mov	r0, r4
   bd56a:	46bd      	mov	sp, r7
   bd56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd570:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bd574:	e7f8      	b.n	bd568 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   bd576:	bf00      	nop
   bd578:	000c1ab5 	.word	0x000c1ab5

000bd57c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   bd57c:	3901      	subs	r1, #1
   bd57e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd582:	4607      	mov	r7, r0
   bd584:	4615      	mov	r5, r2
   bd586:	eb00 0801 	add.w	r8, r0, r1
   bd58a:	4604      	mov	r4, r0
   bd58c:	782a      	ldrb	r2, [r5, #0]
   bd58e:	b392      	cbz	r2, bd5f6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   bd590:	4544      	cmp	r4, r8
   bd592:	d22a      	bcs.n	bd5ea <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bd594:	2a25      	cmp	r2, #37	; 0x25
   bd596:	d107      	bne.n	bd5a8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bd598:	786a      	ldrb	r2, [r5, #1]
   bd59a:	2a73      	cmp	r2, #115	; 0x73
   bd59c:	d009      	beq.n	bd5b2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   bd59e:	2a7a      	cmp	r2, #122	; 0x7a
   bd5a0:	d012      	beq.n	bd5c8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   bd5a2:	2a25      	cmp	r2, #37	; 0x25
   bd5a4:	d100      	bne.n	bd5a8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bd5a6:	3501      	adds	r5, #1
   bd5a8:	f815 2b01 	ldrb.w	r2, [r5], #1
   bd5ac:	f804 2b01 	strb.w	r2, [r4], #1
   bd5b0:	e7ec      	b.n	bd58c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bd5b2:	f853 2b04 	ldr.w	r2, [r3], #4
   bd5b6:	3a01      	subs	r2, #1
   bd5b8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   bd5bc:	b1c9      	cbz	r1, bd5f2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   bd5be:	4544      	cmp	r4, r8
   bd5c0:	d013      	beq.n	bd5ea <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bd5c2:	f804 1b01 	strb.w	r1, [r4], #1
   bd5c6:	e7f7      	b.n	bd5b8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   bd5c8:	78aa      	ldrb	r2, [r5, #2]
   bd5ca:	2a75      	cmp	r2, #117	; 0x75
   bd5cc:	d1ec      	bne.n	bd5a8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bd5ce:	461e      	mov	r6, r3
   bd5d0:	eba8 0104 	sub.w	r1, r8, r4
   bd5d4:	f856 2b04 	ldr.w	r2, [r6], #4
   bd5d8:	4620      	mov	r0, r4
   bd5da:	f7ff ffa3 	bl	bd524 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   bd5de:	2800      	cmp	r0, #0
   bd5e0:	dd03      	ble.n	bd5ea <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bd5e2:	4404      	add	r4, r0
   bd5e4:	3503      	adds	r5, #3
   bd5e6:	4633      	mov	r3, r6
   bd5e8:	e7d0      	b.n	bd58c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bd5ea:	4621      	mov	r1, r4
   bd5ec:	4638      	mov	r0, r7
   bd5ee:	f7ff ff73 	bl	bd4d8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   bd5f2:	3502      	adds	r5, #2
   bd5f4:	e7ca      	b.n	bd58c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bd5f6:	7022      	strb	r2, [r4, #0]
   bd5f8:	1be0      	subs	r0, r4, r7
   bd5fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd5fe <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bd5fe:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bd600:	2400      	movs	r4, #0
   bd602:	2310      	movs	r3, #16
   bd604:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bd608:	6803      	ldr	r3, [r0, #0]
   bd60a:	4615      	mov	r5, r2
   bd60c:	699e      	ldr	r6, [r3, #24]
   bd60e:	6812      	ldr	r2, [r2, #0]
   bd610:	466b      	mov	r3, sp
   bd612:	e9cd 4400 	strd	r4, r4, [sp]
   bd616:	47b0      	blx	r6
   bd618:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bd61c:	f003 0306 	and.w	r3, r3, #6
   bd620:	2b06      	cmp	r3, #6
   bd622:	bf03      	ittte	eq
   bd624:	9b00      	ldreq	r3, [sp, #0]
   bd626:	602b      	streq	r3, [r5, #0]
   bd628:	2001      	moveq	r0, #1
   bd62a:	4620      	movne	r0, r4
   bd62c:	b004      	add	sp, #16
   bd62e:	bd70      	pop	{r4, r5, r6, pc}

000bd630 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bd630:	9800      	ldr	r0, [sp, #0]
   bd632:	4290      	cmp	r0, r2
   bd634:	bf14      	ite	ne
   bd636:	2001      	movne	r0, #1
   bd638:	2006      	moveq	r0, #6
   bd63a:	4770      	bx	lr

000bd63c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bd63c:	b510      	push	{r4, lr}
   bd63e:	4b03      	ldr	r3, [pc, #12]	; (bd64c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bd640:	6003      	str	r3, [r0, #0]
   bd642:	4604      	mov	r4, r0
   bd644:	f000 f8cd 	bl	bd7e2 <_ZNSt9type_infoD1Ev>
   bd648:	4620      	mov	r0, r4
   bd64a:	bd10      	pop	{r4, pc}
   bd64c:	000c1af8 	.word	0x000c1af8

000bd650 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bd650:	b510      	push	{r4, lr}
   bd652:	4604      	mov	r4, r0
   bd654:	f7ff fff2 	bl	bd63c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bd658:	4620      	mov	r0, r4
   bd65a:	2108      	movs	r1, #8
   bd65c:	f7f6 fd1f 	bl	b409e <_ZdlPvj>
   bd660:	4620      	mov	r0, r4
   bd662:	bd10      	pop	{r4, pc}

000bd664 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bd664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd668:	461f      	mov	r7, r3
   bd66a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bd66e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bd672:	4598      	cmp	r8, r3
   bd674:	4606      	mov	r6, r0
   bd676:	4615      	mov	r5, r2
   bd678:	d107      	bne.n	bd68a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bd67a:	9907      	ldr	r1, [sp, #28]
   bd67c:	f000 f8b4 	bl	bd7e8 <_ZNKSt9type_infoeqERKS_>
   bd680:	b118      	cbz	r0, bd68a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bd682:	7165      	strb	r5, [r4, #5]
   bd684:	2000      	movs	r0, #0
   bd686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd68a:	4639      	mov	r1, r7
   bd68c:	4630      	mov	r0, r6
   bd68e:	f000 f8ab 	bl	bd7e8 <_ZNKSt9type_infoeqERKS_>
   bd692:	2800      	cmp	r0, #0
   bd694:	d0f6      	beq.n	bd684 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bd696:	2301      	movs	r3, #1
   bd698:	f8c4 8000 	str.w	r8, [r4]
   bd69c:	7125      	strb	r5, [r4, #4]
   bd69e:	71a3      	strb	r3, [r4, #6]
   bd6a0:	e7f0      	b.n	bd684 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bd6a2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bd6a2:	b538      	push	{r3, r4, r5, lr}
   bd6a4:	4615      	mov	r5, r2
   bd6a6:	461c      	mov	r4, r3
   bd6a8:	f000 f89e 	bl	bd7e8 <_ZNKSt9type_infoeqERKS_>
   bd6ac:	b120      	cbz	r0, bd6b8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bd6ae:	2308      	movs	r3, #8
   bd6b0:	60e3      	str	r3, [r4, #12]
   bd6b2:	2306      	movs	r3, #6
   bd6b4:	6025      	str	r5, [r4, #0]
   bd6b6:	7123      	strb	r3, [r4, #4]
   bd6b8:	bd38      	pop	{r3, r4, r5, pc}

000bd6ba <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bd6ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bd6bc:	4605      	mov	r5, r0
   bd6be:	460c      	mov	r4, r1
   bd6c0:	9201      	str	r2, [sp, #4]
   bd6c2:	461e      	mov	r6, r3
   bd6c4:	f000 f890 	bl	bd7e8 <_ZNKSt9type_infoeqERKS_>
   bd6c8:	b950      	cbnz	r0, bd6e0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bd6ca:	2e03      	cmp	r6, #3
   bd6cc:	d808      	bhi.n	bd6e0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bd6ce:	6823      	ldr	r3, [r4, #0]
   bd6d0:	9a01      	ldr	r2, [sp, #4]
   bd6d2:	695b      	ldr	r3, [r3, #20]
   bd6d4:	4629      	mov	r1, r5
   bd6d6:	4620      	mov	r0, r4
   bd6d8:	b002      	add	sp, #8
   bd6da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bd6de:	4718      	bx	r3
   bd6e0:	b002      	add	sp, #8
   bd6e2:	bd70      	pop	{r4, r5, r6, pc}

000bd6e4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bd6e4:	b510      	push	{r4, lr}
   bd6e6:	4b03      	ldr	r3, [pc, #12]	; (bd6f4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bd6e8:	6003      	str	r3, [r0, #0]
   bd6ea:	4604      	mov	r4, r0
   bd6ec:	f7ff ffa6 	bl	bd63c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bd6f0:	4620      	mov	r0, r4
   bd6f2:	bd10      	pop	{r4, pc}
   bd6f4:	000c1b58 	.word	0x000c1b58

000bd6f8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bd6f8:	b510      	push	{r4, lr}
   bd6fa:	4604      	mov	r4, r0
   bd6fc:	f7ff fff2 	bl	bd6e4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bd700:	4620      	mov	r0, r4
   bd702:	210c      	movs	r1, #12
   bd704:	f7f6 fccb 	bl	b409e <_ZdlPvj>
   bd708:	4620      	mov	r0, r4
   bd70a:	bd10      	pop	{r4, pc}

000bd70c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bd70c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bd70e:	9f08      	ldr	r7, [sp, #32]
   bd710:	4297      	cmp	r7, r2
   bd712:	4605      	mov	r5, r0
   bd714:	460e      	mov	r6, r1
   bd716:	4614      	mov	r4, r2
   bd718:	d00a      	beq.n	bd730 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bd71a:	68a8      	ldr	r0, [r5, #8]
   bd71c:	6802      	ldr	r2, [r0, #0]
   bd71e:	9708      	str	r7, [sp, #32]
   bd720:	6a15      	ldr	r5, [r2, #32]
   bd722:	4631      	mov	r1, r6
   bd724:	4622      	mov	r2, r4
   bd726:	46ac      	mov	ip, r5
   bd728:	b003      	add	sp, #12
   bd72a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bd72e:	4760      	bx	ip
   bd730:	4619      	mov	r1, r3
   bd732:	9301      	str	r3, [sp, #4]
   bd734:	f000 f858 	bl	bd7e8 <_ZNKSt9type_infoeqERKS_>
   bd738:	9b01      	ldr	r3, [sp, #4]
   bd73a:	2800      	cmp	r0, #0
   bd73c:	d0ed      	beq.n	bd71a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bd73e:	2006      	movs	r0, #6
   bd740:	b003      	add	sp, #12
   bd742:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bd744 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bd744:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd748:	460d      	mov	r5, r1
   bd74a:	4619      	mov	r1, r3
   bd74c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bd750:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bd754:	4681      	mov	r9, r0
   bd756:	4617      	mov	r7, r2
   bd758:	4698      	mov	r8, r3
   bd75a:	f000 f845 	bl	bd7e8 <_ZNKSt9type_infoeqERKS_>
   bd75e:	b190      	cbz	r0, bd786 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bd760:	2d00      	cmp	r5, #0
   bd762:	6034      	str	r4, [r6, #0]
   bd764:	7137      	strb	r7, [r6, #4]
   bd766:	db09      	blt.n	bd77c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bd768:	1961      	adds	r1, r4, r5
   bd76a:	458a      	cmp	sl, r1
   bd76c:	bf0c      	ite	eq
   bd76e:	2106      	moveq	r1, #6
   bd770:	2101      	movne	r1, #1
   bd772:	71b1      	strb	r1, [r6, #6]
   bd774:	2000      	movs	r0, #0
   bd776:	b001      	add	sp, #4
   bd778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd77c:	3502      	adds	r5, #2
   bd77e:	d1f9      	bne.n	bd774 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bd780:	2301      	movs	r3, #1
   bd782:	71b3      	strb	r3, [r6, #6]
   bd784:	e7f6      	b.n	bd774 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bd786:	4554      	cmp	r4, sl
   bd788:	d106      	bne.n	bd798 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bd78a:	4659      	mov	r1, fp
   bd78c:	4648      	mov	r0, r9
   bd78e:	f000 f82b 	bl	bd7e8 <_ZNKSt9type_infoeqERKS_>
   bd792:	b108      	cbz	r0, bd798 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bd794:	7177      	strb	r7, [r6, #5]
   bd796:	e7ed      	b.n	bd774 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bd798:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bd79c:	6803      	ldr	r3, [r0, #0]
   bd79e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bd7a2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bd7a6:	69dc      	ldr	r4, [r3, #28]
   bd7a8:	463a      	mov	r2, r7
   bd7aa:	4643      	mov	r3, r8
   bd7ac:	4629      	mov	r1, r5
   bd7ae:	46a4      	mov	ip, r4
   bd7b0:	b001      	add	sp, #4
   bd7b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd7b6:	4760      	bx	ip

000bd7b8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bd7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd7bc:	4607      	mov	r7, r0
   bd7be:	460c      	mov	r4, r1
   bd7c0:	4615      	mov	r5, r2
   bd7c2:	461e      	mov	r6, r3
   bd7c4:	f7ff ff6d 	bl	bd6a2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bd7c8:	b948      	cbnz	r0, bd7de <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bd7ca:	68b8      	ldr	r0, [r7, #8]
   bd7cc:	6803      	ldr	r3, [r0, #0]
   bd7ce:	699f      	ldr	r7, [r3, #24]
   bd7d0:	462a      	mov	r2, r5
   bd7d2:	4633      	mov	r3, r6
   bd7d4:	4621      	mov	r1, r4
   bd7d6:	46bc      	mov	ip, r7
   bd7d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bd7dc:	4760      	bx	ip
   bd7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd7e2 <_ZNSt9type_infoD1Ev>:
   bd7e2:	4770      	bx	lr

000bd7e4 <_ZNKSt9type_info14__is_pointer_pEv>:
   bd7e4:	2000      	movs	r0, #0
   bd7e6:	4770      	bx	lr

000bd7e8 <_ZNKSt9type_infoeqERKS_>:
   bd7e8:	4281      	cmp	r1, r0
   bd7ea:	b508      	push	{r3, lr}
   bd7ec:	d00e      	beq.n	bd80c <_ZNKSt9type_infoeqERKS_+0x24>
   bd7ee:	6840      	ldr	r0, [r0, #4]
   bd7f0:	7803      	ldrb	r3, [r0, #0]
   bd7f2:	2b2a      	cmp	r3, #42	; 0x2a
   bd7f4:	d00c      	beq.n	bd810 <_ZNKSt9type_infoeqERKS_+0x28>
   bd7f6:	6849      	ldr	r1, [r1, #4]
   bd7f8:	780b      	ldrb	r3, [r1, #0]
   bd7fa:	2b2a      	cmp	r3, #42	; 0x2a
   bd7fc:	bf08      	it	eq
   bd7fe:	3101      	addeq	r1, #1
   bd800:	f000 fdb5 	bl	be36e <strcmp>
   bd804:	fab0 f080 	clz	r0, r0
   bd808:	0940      	lsrs	r0, r0, #5
   bd80a:	bd08      	pop	{r3, pc}
   bd80c:	2001      	movs	r0, #1
   bd80e:	e7fc      	b.n	bd80a <_ZNKSt9type_infoeqERKS_+0x22>
   bd810:	2000      	movs	r0, #0
   bd812:	e7fa      	b.n	bd80a <_ZNKSt9type_infoeqERKS_+0x22>

000bd814 <__aeabi_drsub>:
   bd814:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bd818:	e002      	b.n	bd820 <__adddf3>
   bd81a:	bf00      	nop

000bd81c <__aeabi_dsub>:
   bd81c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bd820 <__adddf3>:
   bd820:	b530      	push	{r4, r5, lr}
   bd822:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bd826:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bd82a:	ea94 0f05 	teq	r4, r5
   bd82e:	bf08      	it	eq
   bd830:	ea90 0f02 	teqeq	r0, r2
   bd834:	bf1f      	itttt	ne
   bd836:	ea54 0c00 	orrsne.w	ip, r4, r0
   bd83a:	ea55 0c02 	orrsne.w	ip, r5, r2
   bd83e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bd842:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bd846:	f000 80e2 	beq.w	bda0e <__adddf3+0x1ee>
   bd84a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bd84e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bd852:	bfb8      	it	lt
   bd854:	426d      	neglt	r5, r5
   bd856:	dd0c      	ble.n	bd872 <__adddf3+0x52>
   bd858:	442c      	add	r4, r5
   bd85a:	ea80 0202 	eor.w	r2, r0, r2
   bd85e:	ea81 0303 	eor.w	r3, r1, r3
   bd862:	ea82 0000 	eor.w	r0, r2, r0
   bd866:	ea83 0101 	eor.w	r1, r3, r1
   bd86a:	ea80 0202 	eor.w	r2, r0, r2
   bd86e:	ea81 0303 	eor.w	r3, r1, r3
   bd872:	2d36      	cmp	r5, #54	; 0x36
   bd874:	bf88      	it	hi
   bd876:	bd30      	pophi	{r4, r5, pc}
   bd878:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bd87c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bd880:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bd884:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bd888:	d002      	beq.n	bd890 <__adddf3+0x70>
   bd88a:	4240      	negs	r0, r0
   bd88c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd890:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bd894:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bd898:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bd89c:	d002      	beq.n	bd8a4 <__adddf3+0x84>
   bd89e:	4252      	negs	r2, r2
   bd8a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bd8a4:	ea94 0f05 	teq	r4, r5
   bd8a8:	f000 80a7 	beq.w	bd9fa <__adddf3+0x1da>
   bd8ac:	f1a4 0401 	sub.w	r4, r4, #1
   bd8b0:	f1d5 0e20 	rsbs	lr, r5, #32
   bd8b4:	db0d      	blt.n	bd8d2 <__adddf3+0xb2>
   bd8b6:	fa02 fc0e 	lsl.w	ip, r2, lr
   bd8ba:	fa22 f205 	lsr.w	r2, r2, r5
   bd8be:	1880      	adds	r0, r0, r2
   bd8c0:	f141 0100 	adc.w	r1, r1, #0
   bd8c4:	fa03 f20e 	lsl.w	r2, r3, lr
   bd8c8:	1880      	adds	r0, r0, r2
   bd8ca:	fa43 f305 	asr.w	r3, r3, r5
   bd8ce:	4159      	adcs	r1, r3
   bd8d0:	e00e      	b.n	bd8f0 <__adddf3+0xd0>
   bd8d2:	f1a5 0520 	sub.w	r5, r5, #32
   bd8d6:	f10e 0e20 	add.w	lr, lr, #32
   bd8da:	2a01      	cmp	r2, #1
   bd8dc:	fa03 fc0e 	lsl.w	ip, r3, lr
   bd8e0:	bf28      	it	cs
   bd8e2:	f04c 0c02 	orrcs.w	ip, ip, #2
   bd8e6:	fa43 f305 	asr.w	r3, r3, r5
   bd8ea:	18c0      	adds	r0, r0, r3
   bd8ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bd8f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bd8f4:	d507      	bpl.n	bd906 <__adddf3+0xe6>
   bd8f6:	f04f 0e00 	mov.w	lr, #0
   bd8fa:	f1dc 0c00 	rsbs	ip, ip, #0
   bd8fe:	eb7e 0000 	sbcs.w	r0, lr, r0
   bd902:	eb6e 0101 	sbc.w	r1, lr, r1
   bd906:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bd90a:	d31b      	bcc.n	bd944 <__adddf3+0x124>
   bd90c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bd910:	d30c      	bcc.n	bd92c <__adddf3+0x10c>
   bd912:	0849      	lsrs	r1, r1, #1
   bd914:	ea5f 0030 	movs.w	r0, r0, rrx
   bd918:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bd91c:	f104 0401 	add.w	r4, r4, #1
   bd920:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bd924:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bd928:	f080 809a 	bcs.w	bda60 <__adddf3+0x240>
   bd92c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bd930:	bf08      	it	eq
   bd932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bd936:	f150 0000 	adcs.w	r0, r0, #0
   bd93a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd93e:	ea41 0105 	orr.w	r1, r1, r5
   bd942:	bd30      	pop	{r4, r5, pc}
   bd944:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bd948:	4140      	adcs	r0, r0
   bd94a:	eb41 0101 	adc.w	r1, r1, r1
   bd94e:	3c01      	subs	r4, #1
   bd950:	bf28      	it	cs
   bd952:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bd956:	d2e9      	bcs.n	bd92c <__adddf3+0x10c>
   bd958:	f091 0f00 	teq	r1, #0
   bd95c:	bf04      	itt	eq
   bd95e:	4601      	moveq	r1, r0
   bd960:	2000      	moveq	r0, #0
   bd962:	fab1 f381 	clz	r3, r1
   bd966:	bf08      	it	eq
   bd968:	3320      	addeq	r3, #32
   bd96a:	f1a3 030b 	sub.w	r3, r3, #11
   bd96e:	f1b3 0220 	subs.w	r2, r3, #32
   bd972:	da0c      	bge.n	bd98e <__adddf3+0x16e>
   bd974:	320c      	adds	r2, #12
   bd976:	dd08      	ble.n	bd98a <__adddf3+0x16a>
   bd978:	f102 0c14 	add.w	ip, r2, #20
   bd97c:	f1c2 020c 	rsb	r2, r2, #12
   bd980:	fa01 f00c 	lsl.w	r0, r1, ip
   bd984:	fa21 f102 	lsr.w	r1, r1, r2
   bd988:	e00c      	b.n	bd9a4 <__adddf3+0x184>
   bd98a:	f102 0214 	add.w	r2, r2, #20
   bd98e:	bfd8      	it	le
   bd990:	f1c2 0c20 	rsble	ip, r2, #32
   bd994:	fa01 f102 	lsl.w	r1, r1, r2
   bd998:	fa20 fc0c 	lsr.w	ip, r0, ip
   bd99c:	bfdc      	itt	le
   bd99e:	ea41 010c 	orrle.w	r1, r1, ip
   bd9a2:	4090      	lslle	r0, r2
   bd9a4:	1ae4      	subs	r4, r4, r3
   bd9a6:	bfa2      	ittt	ge
   bd9a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bd9ac:	4329      	orrge	r1, r5
   bd9ae:	bd30      	popge	{r4, r5, pc}
   bd9b0:	ea6f 0404 	mvn.w	r4, r4
   bd9b4:	3c1f      	subs	r4, #31
   bd9b6:	da1c      	bge.n	bd9f2 <__adddf3+0x1d2>
   bd9b8:	340c      	adds	r4, #12
   bd9ba:	dc0e      	bgt.n	bd9da <__adddf3+0x1ba>
   bd9bc:	f104 0414 	add.w	r4, r4, #20
   bd9c0:	f1c4 0220 	rsb	r2, r4, #32
   bd9c4:	fa20 f004 	lsr.w	r0, r0, r4
   bd9c8:	fa01 f302 	lsl.w	r3, r1, r2
   bd9cc:	ea40 0003 	orr.w	r0, r0, r3
   bd9d0:	fa21 f304 	lsr.w	r3, r1, r4
   bd9d4:	ea45 0103 	orr.w	r1, r5, r3
   bd9d8:	bd30      	pop	{r4, r5, pc}
   bd9da:	f1c4 040c 	rsb	r4, r4, #12
   bd9de:	f1c4 0220 	rsb	r2, r4, #32
   bd9e2:	fa20 f002 	lsr.w	r0, r0, r2
   bd9e6:	fa01 f304 	lsl.w	r3, r1, r4
   bd9ea:	ea40 0003 	orr.w	r0, r0, r3
   bd9ee:	4629      	mov	r1, r5
   bd9f0:	bd30      	pop	{r4, r5, pc}
   bd9f2:	fa21 f004 	lsr.w	r0, r1, r4
   bd9f6:	4629      	mov	r1, r5
   bd9f8:	bd30      	pop	{r4, r5, pc}
   bd9fa:	f094 0f00 	teq	r4, #0
   bd9fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bda02:	bf06      	itte	eq
   bda04:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bda08:	3401      	addeq	r4, #1
   bda0a:	3d01      	subne	r5, #1
   bda0c:	e74e      	b.n	bd8ac <__adddf3+0x8c>
   bda0e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bda12:	bf18      	it	ne
   bda14:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bda18:	d029      	beq.n	bda6e <__adddf3+0x24e>
   bda1a:	ea94 0f05 	teq	r4, r5
   bda1e:	bf08      	it	eq
   bda20:	ea90 0f02 	teqeq	r0, r2
   bda24:	d005      	beq.n	bda32 <__adddf3+0x212>
   bda26:	ea54 0c00 	orrs.w	ip, r4, r0
   bda2a:	bf04      	itt	eq
   bda2c:	4619      	moveq	r1, r3
   bda2e:	4610      	moveq	r0, r2
   bda30:	bd30      	pop	{r4, r5, pc}
   bda32:	ea91 0f03 	teq	r1, r3
   bda36:	bf1e      	ittt	ne
   bda38:	2100      	movne	r1, #0
   bda3a:	2000      	movne	r0, #0
   bda3c:	bd30      	popne	{r4, r5, pc}
   bda3e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bda42:	d105      	bne.n	bda50 <__adddf3+0x230>
   bda44:	0040      	lsls	r0, r0, #1
   bda46:	4149      	adcs	r1, r1
   bda48:	bf28      	it	cs
   bda4a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bda4e:	bd30      	pop	{r4, r5, pc}
   bda50:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bda54:	bf3c      	itt	cc
   bda56:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bda5a:	bd30      	popcc	{r4, r5, pc}
   bda5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bda60:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bda64:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bda68:	f04f 0000 	mov.w	r0, #0
   bda6c:	bd30      	pop	{r4, r5, pc}
   bda6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bda72:	bf1a      	itte	ne
   bda74:	4619      	movne	r1, r3
   bda76:	4610      	movne	r0, r2
   bda78:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bda7c:	bf1c      	itt	ne
   bda7e:	460b      	movne	r3, r1
   bda80:	4602      	movne	r2, r0
   bda82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bda86:	bf06      	itte	eq
   bda88:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bda8c:	ea91 0f03 	teqeq	r1, r3
   bda90:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bda94:	bd30      	pop	{r4, r5, pc}
   bda96:	bf00      	nop

000bda98 <__aeabi_ui2d>:
   bda98:	f090 0f00 	teq	r0, #0
   bda9c:	bf04      	itt	eq
   bda9e:	2100      	moveq	r1, #0
   bdaa0:	4770      	bxeq	lr
   bdaa2:	b530      	push	{r4, r5, lr}
   bdaa4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bdaa8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bdaac:	f04f 0500 	mov.w	r5, #0
   bdab0:	f04f 0100 	mov.w	r1, #0
   bdab4:	e750      	b.n	bd958 <__adddf3+0x138>
   bdab6:	bf00      	nop

000bdab8 <__aeabi_i2d>:
   bdab8:	f090 0f00 	teq	r0, #0
   bdabc:	bf04      	itt	eq
   bdabe:	2100      	moveq	r1, #0
   bdac0:	4770      	bxeq	lr
   bdac2:	b530      	push	{r4, r5, lr}
   bdac4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bdac8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bdacc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bdad0:	bf48      	it	mi
   bdad2:	4240      	negmi	r0, r0
   bdad4:	f04f 0100 	mov.w	r1, #0
   bdad8:	e73e      	b.n	bd958 <__adddf3+0x138>
   bdada:	bf00      	nop

000bdadc <__aeabi_f2d>:
   bdadc:	0042      	lsls	r2, r0, #1
   bdade:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bdae2:	ea4f 0131 	mov.w	r1, r1, rrx
   bdae6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bdaea:	bf1f      	itttt	ne
   bdaec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bdaf0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bdaf4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bdaf8:	4770      	bxne	lr
   bdafa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bdafe:	bf08      	it	eq
   bdb00:	4770      	bxeq	lr
   bdb02:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bdb06:	bf04      	itt	eq
   bdb08:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bdb0c:	4770      	bxeq	lr
   bdb0e:	b530      	push	{r4, r5, lr}
   bdb10:	f44f 7460 	mov.w	r4, #896	; 0x380
   bdb14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bdb18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bdb1c:	e71c      	b.n	bd958 <__adddf3+0x138>
   bdb1e:	bf00      	nop

000bdb20 <__aeabi_ul2d>:
   bdb20:	ea50 0201 	orrs.w	r2, r0, r1
   bdb24:	bf08      	it	eq
   bdb26:	4770      	bxeq	lr
   bdb28:	b530      	push	{r4, r5, lr}
   bdb2a:	f04f 0500 	mov.w	r5, #0
   bdb2e:	e00a      	b.n	bdb46 <__aeabi_l2d+0x16>

000bdb30 <__aeabi_l2d>:
   bdb30:	ea50 0201 	orrs.w	r2, r0, r1
   bdb34:	bf08      	it	eq
   bdb36:	4770      	bxeq	lr
   bdb38:	b530      	push	{r4, r5, lr}
   bdb3a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bdb3e:	d502      	bpl.n	bdb46 <__aeabi_l2d+0x16>
   bdb40:	4240      	negs	r0, r0
   bdb42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bdb46:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bdb4a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bdb4e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bdb52:	f43f aed8 	beq.w	bd906 <__adddf3+0xe6>
   bdb56:	f04f 0203 	mov.w	r2, #3
   bdb5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bdb5e:	bf18      	it	ne
   bdb60:	3203      	addne	r2, #3
   bdb62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bdb66:	bf18      	it	ne
   bdb68:	3203      	addne	r2, #3
   bdb6a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bdb6e:	f1c2 0320 	rsb	r3, r2, #32
   bdb72:	fa00 fc03 	lsl.w	ip, r0, r3
   bdb76:	fa20 f002 	lsr.w	r0, r0, r2
   bdb7a:	fa01 fe03 	lsl.w	lr, r1, r3
   bdb7e:	ea40 000e 	orr.w	r0, r0, lr
   bdb82:	fa21 f102 	lsr.w	r1, r1, r2
   bdb86:	4414      	add	r4, r2
   bdb88:	e6bd      	b.n	bd906 <__adddf3+0xe6>
   bdb8a:	bf00      	nop

000bdb8c <__aeabi_dmul>:
   bdb8c:	b570      	push	{r4, r5, r6, lr}
   bdb8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bdb92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bdb96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bdb9a:	bf1d      	ittte	ne
   bdb9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bdba0:	ea94 0f0c 	teqne	r4, ip
   bdba4:	ea95 0f0c 	teqne	r5, ip
   bdba8:	f000 f8de 	bleq	bdd68 <__aeabi_dmul+0x1dc>
   bdbac:	442c      	add	r4, r5
   bdbae:	ea81 0603 	eor.w	r6, r1, r3
   bdbb2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bdbb6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bdbba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bdbbe:	bf18      	it	ne
   bdbc0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bdbc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bdbc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bdbcc:	d038      	beq.n	bdc40 <__aeabi_dmul+0xb4>
   bdbce:	fba0 ce02 	umull	ip, lr, r0, r2
   bdbd2:	f04f 0500 	mov.w	r5, #0
   bdbd6:	fbe1 e502 	umlal	lr, r5, r1, r2
   bdbda:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bdbde:	fbe0 e503 	umlal	lr, r5, r0, r3
   bdbe2:	f04f 0600 	mov.w	r6, #0
   bdbe6:	fbe1 5603 	umlal	r5, r6, r1, r3
   bdbea:	f09c 0f00 	teq	ip, #0
   bdbee:	bf18      	it	ne
   bdbf0:	f04e 0e01 	orrne.w	lr, lr, #1
   bdbf4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bdbf8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bdbfc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bdc00:	d204      	bcs.n	bdc0c <__aeabi_dmul+0x80>
   bdc02:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bdc06:	416d      	adcs	r5, r5
   bdc08:	eb46 0606 	adc.w	r6, r6, r6
   bdc0c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bdc10:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bdc14:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bdc18:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bdc1c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bdc20:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bdc24:	bf88      	it	hi
   bdc26:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bdc2a:	d81e      	bhi.n	bdc6a <__aeabi_dmul+0xde>
   bdc2c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bdc30:	bf08      	it	eq
   bdc32:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bdc36:	f150 0000 	adcs.w	r0, r0, #0
   bdc3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bdc3e:	bd70      	pop	{r4, r5, r6, pc}
   bdc40:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bdc44:	ea46 0101 	orr.w	r1, r6, r1
   bdc48:	ea40 0002 	orr.w	r0, r0, r2
   bdc4c:	ea81 0103 	eor.w	r1, r1, r3
   bdc50:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bdc54:	bfc2      	ittt	gt
   bdc56:	ebd4 050c 	rsbsgt	r5, r4, ip
   bdc5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bdc5e:	bd70      	popgt	{r4, r5, r6, pc}
   bdc60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bdc64:	f04f 0e00 	mov.w	lr, #0
   bdc68:	3c01      	subs	r4, #1
   bdc6a:	f300 80ab 	bgt.w	bddc4 <__aeabi_dmul+0x238>
   bdc6e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bdc72:	bfde      	ittt	le
   bdc74:	2000      	movle	r0, #0
   bdc76:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bdc7a:	bd70      	pople	{r4, r5, r6, pc}
   bdc7c:	f1c4 0400 	rsb	r4, r4, #0
   bdc80:	3c20      	subs	r4, #32
   bdc82:	da35      	bge.n	bdcf0 <__aeabi_dmul+0x164>
   bdc84:	340c      	adds	r4, #12
   bdc86:	dc1b      	bgt.n	bdcc0 <__aeabi_dmul+0x134>
   bdc88:	f104 0414 	add.w	r4, r4, #20
   bdc8c:	f1c4 0520 	rsb	r5, r4, #32
   bdc90:	fa00 f305 	lsl.w	r3, r0, r5
   bdc94:	fa20 f004 	lsr.w	r0, r0, r4
   bdc98:	fa01 f205 	lsl.w	r2, r1, r5
   bdc9c:	ea40 0002 	orr.w	r0, r0, r2
   bdca0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bdca4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bdca8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bdcac:	fa21 f604 	lsr.w	r6, r1, r4
   bdcb0:	eb42 0106 	adc.w	r1, r2, r6
   bdcb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bdcb8:	bf08      	it	eq
   bdcba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bdcbe:	bd70      	pop	{r4, r5, r6, pc}
   bdcc0:	f1c4 040c 	rsb	r4, r4, #12
   bdcc4:	f1c4 0520 	rsb	r5, r4, #32
   bdcc8:	fa00 f304 	lsl.w	r3, r0, r4
   bdccc:	fa20 f005 	lsr.w	r0, r0, r5
   bdcd0:	fa01 f204 	lsl.w	r2, r1, r4
   bdcd4:	ea40 0002 	orr.w	r0, r0, r2
   bdcd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bdcdc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bdce0:	f141 0100 	adc.w	r1, r1, #0
   bdce4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bdce8:	bf08      	it	eq
   bdcea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bdcee:	bd70      	pop	{r4, r5, r6, pc}
   bdcf0:	f1c4 0520 	rsb	r5, r4, #32
   bdcf4:	fa00 f205 	lsl.w	r2, r0, r5
   bdcf8:	ea4e 0e02 	orr.w	lr, lr, r2
   bdcfc:	fa20 f304 	lsr.w	r3, r0, r4
   bdd00:	fa01 f205 	lsl.w	r2, r1, r5
   bdd04:	ea43 0302 	orr.w	r3, r3, r2
   bdd08:	fa21 f004 	lsr.w	r0, r1, r4
   bdd0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bdd10:	fa21 f204 	lsr.w	r2, r1, r4
   bdd14:	ea20 0002 	bic.w	r0, r0, r2
   bdd18:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bdd1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bdd20:	bf08      	it	eq
   bdd22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bdd26:	bd70      	pop	{r4, r5, r6, pc}
   bdd28:	f094 0f00 	teq	r4, #0
   bdd2c:	d10f      	bne.n	bdd4e <__aeabi_dmul+0x1c2>
   bdd2e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bdd32:	0040      	lsls	r0, r0, #1
   bdd34:	eb41 0101 	adc.w	r1, r1, r1
   bdd38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bdd3c:	bf08      	it	eq
   bdd3e:	3c01      	subeq	r4, #1
   bdd40:	d0f7      	beq.n	bdd32 <__aeabi_dmul+0x1a6>
   bdd42:	ea41 0106 	orr.w	r1, r1, r6
   bdd46:	f095 0f00 	teq	r5, #0
   bdd4a:	bf18      	it	ne
   bdd4c:	4770      	bxne	lr
   bdd4e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bdd52:	0052      	lsls	r2, r2, #1
   bdd54:	eb43 0303 	adc.w	r3, r3, r3
   bdd58:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bdd5c:	bf08      	it	eq
   bdd5e:	3d01      	subeq	r5, #1
   bdd60:	d0f7      	beq.n	bdd52 <__aeabi_dmul+0x1c6>
   bdd62:	ea43 0306 	orr.w	r3, r3, r6
   bdd66:	4770      	bx	lr
   bdd68:	ea94 0f0c 	teq	r4, ip
   bdd6c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bdd70:	bf18      	it	ne
   bdd72:	ea95 0f0c 	teqne	r5, ip
   bdd76:	d00c      	beq.n	bdd92 <__aeabi_dmul+0x206>
   bdd78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bdd7c:	bf18      	it	ne
   bdd7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bdd82:	d1d1      	bne.n	bdd28 <__aeabi_dmul+0x19c>
   bdd84:	ea81 0103 	eor.w	r1, r1, r3
   bdd88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bdd8c:	f04f 0000 	mov.w	r0, #0
   bdd90:	bd70      	pop	{r4, r5, r6, pc}
   bdd92:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bdd96:	bf06      	itte	eq
   bdd98:	4610      	moveq	r0, r2
   bdd9a:	4619      	moveq	r1, r3
   bdd9c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bdda0:	d019      	beq.n	bddd6 <__aeabi_dmul+0x24a>
   bdda2:	ea94 0f0c 	teq	r4, ip
   bdda6:	d102      	bne.n	bddae <__aeabi_dmul+0x222>
   bdda8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bddac:	d113      	bne.n	bddd6 <__aeabi_dmul+0x24a>
   bddae:	ea95 0f0c 	teq	r5, ip
   bddb2:	d105      	bne.n	bddc0 <__aeabi_dmul+0x234>
   bddb4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bddb8:	bf1c      	itt	ne
   bddba:	4610      	movne	r0, r2
   bddbc:	4619      	movne	r1, r3
   bddbe:	d10a      	bne.n	bddd6 <__aeabi_dmul+0x24a>
   bddc0:	ea81 0103 	eor.w	r1, r1, r3
   bddc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bddc8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bddcc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bddd0:	f04f 0000 	mov.w	r0, #0
   bddd4:	bd70      	pop	{r4, r5, r6, pc}
   bddd6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bddda:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bddde:	bd70      	pop	{r4, r5, r6, pc}

000bdde0 <__aeabi_ddiv>:
   bdde0:	b570      	push	{r4, r5, r6, lr}
   bdde2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bdde6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bddea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bddee:	bf1d      	ittte	ne
   bddf0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bddf4:	ea94 0f0c 	teqne	r4, ip
   bddf8:	ea95 0f0c 	teqne	r5, ip
   bddfc:	f000 f8a7 	bleq	bdf4e <__aeabi_ddiv+0x16e>
   bde00:	eba4 0405 	sub.w	r4, r4, r5
   bde04:	ea81 0e03 	eor.w	lr, r1, r3
   bde08:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bde0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bde10:	f000 8088 	beq.w	bdf24 <__aeabi_ddiv+0x144>
   bde14:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bde18:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bde1c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bde20:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bde24:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bde28:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bde2c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bde30:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bde34:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bde38:	429d      	cmp	r5, r3
   bde3a:	bf08      	it	eq
   bde3c:	4296      	cmpeq	r6, r2
   bde3e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bde42:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bde46:	d202      	bcs.n	bde4e <__aeabi_ddiv+0x6e>
   bde48:	085b      	lsrs	r3, r3, #1
   bde4a:	ea4f 0232 	mov.w	r2, r2, rrx
   bde4e:	1ab6      	subs	r6, r6, r2
   bde50:	eb65 0503 	sbc.w	r5, r5, r3
   bde54:	085b      	lsrs	r3, r3, #1
   bde56:	ea4f 0232 	mov.w	r2, r2, rrx
   bde5a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bde5e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bde62:	ebb6 0e02 	subs.w	lr, r6, r2
   bde66:	eb75 0e03 	sbcs.w	lr, r5, r3
   bde6a:	bf22      	ittt	cs
   bde6c:	1ab6      	subcs	r6, r6, r2
   bde6e:	4675      	movcs	r5, lr
   bde70:	ea40 000c 	orrcs.w	r0, r0, ip
   bde74:	085b      	lsrs	r3, r3, #1
   bde76:	ea4f 0232 	mov.w	r2, r2, rrx
   bde7a:	ebb6 0e02 	subs.w	lr, r6, r2
   bde7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bde82:	bf22      	ittt	cs
   bde84:	1ab6      	subcs	r6, r6, r2
   bde86:	4675      	movcs	r5, lr
   bde88:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bde8c:	085b      	lsrs	r3, r3, #1
   bde8e:	ea4f 0232 	mov.w	r2, r2, rrx
   bde92:	ebb6 0e02 	subs.w	lr, r6, r2
   bde96:	eb75 0e03 	sbcs.w	lr, r5, r3
   bde9a:	bf22      	ittt	cs
   bde9c:	1ab6      	subcs	r6, r6, r2
   bde9e:	4675      	movcs	r5, lr
   bdea0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bdea4:	085b      	lsrs	r3, r3, #1
   bdea6:	ea4f 0232 	mov.w	r2, r2, rrx
   bdeaa:	ebb6 0e02 	subs.w	lr, r6, r2
   bdeae:	eb75 0e03 	sbcs.w	lr, r5, r3
   bdeb2:	bf22      	ittt	cs
   bdeb4:	1ab6      	subcs	r6, r6, r2
   bdeb6:	4675      	movcs	r5, lr
   bdeb8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bdebc:	ea55 0e06 	orrs.w	lr, r5, r6
   bdec0:	d018      	beq.n	bdef4 <__aeabi_ddiv+0x114>
   bdec2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bdec6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bdeca:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bdece:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bded2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bded6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bdeda:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bdede:	d1c0      	bne.n	bde62 <__aeabi_ddiv+0x82>
   bdee0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bdee4:	d10b      	bne.n	bdefe <__aeabi_ddiv+0x11e>
   bdee6:	ea41 0100 	orr.w	r1, r1, r0
   bdeea:	f04f 0000 	mov.w	r0, #0
   bdeee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bdef2:	e7b6      	b.n	bde62 <__aeabi_ddiv+0x82>
   bdef4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bdef8:	bf04      	itt	eq
   bdefa:	4301      	orreq	r1, r0
   bdefc:	2000      	moveq	r0, #0
   bdefe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bdf02:	bf88      	it	hi
   bdf04:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bdf08:	f63f aeaf 	bhi.w	bdc6a <__aeabi_dmul+0xde>
   bdf0c:	ebb5 0c03 	subs.w	ip, r5, r3
   bdf10:	bf04      	itt	eq
   bdf12:	ebb6 0c02 	subseq.w	ip, r6, r2
   bdf16:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bdf1a:	f150 0000 	adcs.w	r0, r0, #0
   bdf1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bdf22:	bd70      	pop	{r4, r5, r6, pc}
   bdf24:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bdf28:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bdf2c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bdf30:	bfc2      	ittt	gt
   bdf32:	ebd4 050c 	rsbsgt	r5, r4, ip
   bdf36:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bdf3a:	bd70      	popgt	{r4, r5, r6, pc}
   bdf3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bdf40:	f04f 0e00 	mov.w	lr, #0
   bdf44:	3c01      	subs	r4, #1
   bdf46:	e690      	b.n	bdc6a <__aeabi_dmul+0xde>
   bdf48:	ea45 0e06 	orr.w	lr, r5, r6
   bdf4c:	e68d      	b.n	bdc6a <__aeabi_dmul+0xde>
   bdf4e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bdf52:	ea94 0f0c 	teq	r4, ip
   bdf56:	bf08      	it	eq
   bdf58:	ea95 0f0c 	teqeq	r5, ip
   bdf5c:	f43f af3b 	beq.w	bddd6 <__aeabi_dmul+0x24a>
   bdf60:	ea94 0f0c 	teq	r4, ip
   bdf64:	d10a      	bne.n	bdf7c <__aeabi_ddiv+0x19c>
   bdf66:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bdf6a:	f47f af34 	bne.w	bddd6 <__aeabi_dmul+0x24a>
   bdf6e:	ea95 0f0c 	teq	r5, ip
   bdf72:	f47f af25 	bne.w	bddc0 <__aeabi_dmul+0x234>
   bdf76:	4610      	mov	r0, r2
   bdf78:	4619      	mov	r1, r3
   bdf7a:	e72c      	b.n	bddd6 <__aeabi_dmul+0x24a>
   bdf7c:	ea95 0f0c 	teq	r5, ip
   bdf80:	d106      	bne.n	bdf90 <__aeabi_ddiv+0x1b0>
   bdf82:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bdf86:	f43f aefd 	beq.w	bdd84 <__aeabi_dmul+0x1f8>
   bdf8a:	4610      	mov	r0, r2
   bdf8c:	4619      	mov	r1, r3
   bdf8e:	e722      	b.n	bddd6 <__aeabi_dmul+0x24a>
   bdf90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bdf94:	bf18      	it	ne
   bdf96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bdf9a:	f47f aec5 	bne.w	bdd28 <__aeabi_dmul+0x19c>
   bdf9e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bdfa2:	f47f af0d 	bne.w	bddc0 <__aeabi_dmul+0x234>
   bdfa6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bdfaa:	f47f aeeb 	bne.w	bdd84 <__aeabi_dmul+0x1f8>
   bdfae:	e712      	b.n	bddd6 <__aeabi_dmul+0x24a>

000bdfb0 <__gedf2>:
   bdfb0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bdfb4:	e006      	b.n	bdfc4 <__cmpdf2+0x4>
   bdfb6:	bf00      	nop

000bdfb8 <__ledf2>:
   bdfb8:	f04f 0c01 	mov.w	ip, #1
   bdfbc:	e002      	b.n	bdfc4 <__cmpdf2+0x4>
   bdfbe:	bf00      	nop

000bdfc0 <__cmpdf2>:
   bdfc0:	f04f 0c01 	mov.w	ip, #1
   bdfc4:	f84d cd04 	str.w	ip, [sp, #-4]!
   bdfc8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bdfcc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bdfd0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bdfd4:	bf18      	it	ne
   bdfd6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bdfda:	d01b      	beq.n	be014 <__cmpdf2+0x54>
   bdfdc:	b001      	add	sp, #4
   bdfde:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bdfe2:	bf0c      	ite	eq
   bdfe4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bdfe8:	ea91 0f03 	teqne	r1, r3
   bdfec:	bf02      	ittt	eq
   bdfee:	ea90 0f02 	teqeq	r0, r2
   bdff2:	2000      	moveq	r0, #0
   bdff4:	4770      	bxeq	lr
   bdff6:	f110 0f00 	cmn.w	r0, #0
   bdffa:	ea91 0f03 	teq	r1, r3
   bdffe:	bf58      	it	pl
   be000:	4299      	cmppl	r1, r3
   be002:	bf08      	it	eq
   be004:	4290      	cmpeq	r0, r2
   be006:	bf2c      	ite	cs
   be008:	17d8      	asrcs	r0, r3, #31
   be00a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   be00e:	f040 0001 	orr.w	r0, r0, #1
   be012:	4770      	bx	lr
   be014:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   be018:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be01c:	d102      	bne.n	be024 <__cmpdf2+0x64>
   be01e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   be022:	d107      	bne.n	be034 <__cmpdf2+0x74>
   be024:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   be028:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be02c:	d1d6      	bne.n	bdfdc <__cmpdf2+0x1c>
   be02e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   be032:	d0d3      	beq.n	bdfdc <__cmpdf2+0x1c>
   be034:	f85d 0b04 	ldr.w	r0, [sp], #4
   be038:	4770      	bx	lr
   be03a:	bf00      	nop

000be03c <__aeabi_cdrcmple>:
   be03c:	4684      	mov	ip, r0
   be03e:	4610      	mov	r0, r2
   be040:	4662      	mov	r2, ip
   be042:	468c      	mov	ip, r1
   be044:	4619      	mov	r1, r3
   be046:	4663      	mov	r3, ip
   be048:	e000      	b.n	be04c <__aeabi_cdcmpeq>
   be04a:	bf00      	nop

000be04c <__aeabi_cdcmpeq>:
   be04c:	b501      	push	{r0, lr}
   be04e:	f7ff ffb7 	bl	bdfc0 <__cmpdf2>
   be052:	2800      	cmp	r0, #0
   be054:	bf48      	it	mi
   be056:	f110 0f00 	cmnmi.w	r0, #0
   be05a:	bd01      	pop	{r0, pc}

000be05c <__aeabi_dcmpeq>:
   be05c:	f84d ed08 	str.w	lr, [sp, #-8]!
   be060:	f7ff fff4 	bl	be04c <__aeabi_cdcmpeq>
   be064:	bf0c      	ite	eq
   be066:	2001      	moveq	r0, #1
   be068:	2000      	movne	r0, #0
   be06a:	f85d fb08 	ldr.w	pc, [sp], #8
   be06e:	bf00      	nop

000be070 <__aeabi_dcmplt>:
   be070:	f84d ed08 	str.w	lr, [sp, #-8]!
   be074:	f7ff ffea 	bl	be04c <__aeabi_cdcmpeq>
   be078:	bf34      	ite	cc
   be07a:	2001      	movcc	r0, #1
   be07c:	2000      	movcs	r0, #0
   be07e:	f85d fb08 	ldr.w	pc, [sp], #8
   be082:	bf00      	nop

000be084 <__aeabi_dcmple>:
   be084:	f84d ed08 	str.w	lr, [sp, #-8]!
   be088:	f7ff ffe0 	bl	be04c <__aeabi_cdcmpeq>
   be08c:	bf94      	ite	ls
   be08e:	2001      	movls	r0, #1
   be090:	2000      	movhi	r0, #0
   be092:	f85d fb08 	ldr.w	pc, [sp], #8
   be096:	bf00      	nop

000be098 <__aeabi_dcmpge>:
   be098:	f84d ed08 	str.w	lr, [sp, #-8]!
   be09c:	f7ff ffce 	bl	be03c <__aeabi_cdrcmple>
   be0a0:	bf94      	ite	ls
   be0a2:	2001      	movls	r0, #1
   be0a4:	2000      	movhi	r0, #0
   be0a6:	f85d fb08 	ldr.w	pc, [sp], #8
   be0aa:	bf00      	nop

000be0ac <__aeabi_dcmpgt>:
   be0ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   be0b0:	f7ff ffc4 	bl	be03c <__aeabi_cdrcmple>
   be0b4:	bf34      	ite	cc
   be0b6:	2001      	movcc	r0, #1
   be0b8:	2000      	movcs	r0, #0
   be0ba:	f85d fb08 	ldr.w	pc, [sp], #8
   be0be:	bf00      	nop

000be0c0 <__aeabi_d2uiz>:
   be0c0:	004a      	lsls	r2, r1, #1
   be0c2:	d211      	bcs.n	be0e8 <__aeabi_d2uiz+0x28>
   be0c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   be0c8:	d211      	bcs.n	be0ee <__aeabi_d2uiz+0x2e>
   be0ca:	d50d      	bpl.n	be0e8 <__aeabi_d2uiz+0x28>
   be0cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   be0d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   be0d4:	d40e      	bmi.n	be0f4 <__aeabi_d2uiz+0x34>
   be0d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   be0da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   be0de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   be0e2:	fa23 f002 	lsr.w	r0, r3, r2
   be0e6:	4770      	bx	lr
   be0e8:	f04f 0000 	mov.w	r0, #0
   be0ec:	4770      	bx	lr
   be0ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   be0f2:	d102      	bne.n	be0fa <__aeabi_d2uiz+0x3a>
   be0f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   be0f8:	4770      	bx	lr
   be0fa:	f04f 0000 	mov.w	r0, #0
   be0fe:	4770      	bx	lr

000be100 <__aeabi_d2f>:
   be100:	ea4f 0241 	mov.w	r2, r1, lsl #1
   be104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   be108:	bf24      	itt	cs
   be10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   be10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   be112:	d90d      	bls.n	be130 <__aeabi_d2f+0x30>
   be114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   be118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   be11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   be120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   be124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   be128:	bf08      	it	eq
   be12a:	f020 0001 	biceq.w	r0, r0, #1
   be12e:	4770      	bx	lr
   be130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   be134:	d121      	bne.n	be17a <__aeabi_d2f+0x7a>
   be136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   be13a:	bfbc      	itt	lt
   be13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   be140:	4770      	bxlt	lr
   be142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be146:	ea4f 5252 	mov.w	r2, r2, lsr #21
   be14a:	f1c2 0218 	rsb	r2, r2, #24
   be14e:	f1c2 0c20 	rsb	ip, r2, #32
   be152:	fa10 f30c 	lsls.w	r3, r0, ip
   be156:	fa20 f002 	lsr.w	r0, r0, r2
   be15a:	bf18      	it	ne
   be15c:	f040 0001 	orrne.w	r0, r0, #1
   be160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   be164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   be168:	fa03 fc0c 	lsl.w	ip, r3, ip
   be16c:	ea40 000c 	orr.w	r0, r0, ip
   be170:	fa23 f302 	lsr.w	r3, r3, r2
   be174:	ea4f 0343 	mov.w	r3, r3, lsl #1
   be178:	e7cc      	b.n	be114 <__aeabi_d2f+0x14>
   be17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   be17e:	d107      	bne.n	be190 <__aeabi_d2f+0x90>
   be180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   be184:	bf1e      	ittt	ne
   be186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   be18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   be18e:	4770      	bxne	lr
   be190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   be194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   be198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   be19c:	4770      	bx	lr
   be19e:	bf00      	nop

000be1a0 <__aeabi_d2ulz>:
   be1a0:	b5d0      	push	{r4, r6, r7, lr}
   be1a2:	4b0c      	ldr	r3, [pc, #48]	; (be1d4 <__aeabi_d2ulz+0x34>)
   be1a4:	2200      	movs	r2, #0
   be1a6:	4606      	mov	r6, r0
   be1a8:	460f      	mov	r7, r1
   be1aa:	f7ff fcef 	bl	bdb8c <__aeabi_dmul>
   be1ae:	f7ff ff87 	bl	be0c0 <__aeabi_d2uiz>
   be1b2:	4604      	mov	r4, r0
   be1b4:	f7ff fc70 	bl	bda98 <__aeabi_ui2d>
   be1b8:	4b07      	ldr	r3, [pc, #28]	; (be1d8 <__aeabi_d2ulz+0x38>)
   be1ba:	2200      	movs	r2, #0
   be1bc:	f7ff fce6 	bl	bdb8c <__aeabi_dmul>
   be1c0:	4602      	mov	r2, r0
   be1c2:	460b      	mov	r3, r1
   be1c4:	4630      	mov	r0, r6
   be1c6:	4639      	mov	r1, r7
   be1c8:	f7ff fb28 	bl	bd81c <__aeabi_dsub>
   be1cc:	f7ff ff78 	bl	be0c0 <__aeabi_d2uiz>
   be1d0:	4621      	mov	r1, r4
   be1d2:	bdd0      	pop	{r4, r6, r7, pc}
   be1d4:	3df00000 	.word	0x3df00000
   be1d8:	41f00000 	.word	0x41f00000

000be1dc <atexit>:
   be1dc:	2300      	movs	r3, #0
   be1de:	4601      	mov	r1, r0
   be1e0:	461a      	mov	r2, r3
   be1e2:	4618      	mov	r0, r3
   be1e4:	f000 bfea 	b.w	bf1bc <__register_exitproc>

000be1e8 <atof>:
   be1e8:	2100      	movs	r1, #0
   be1ea:	f000 bf4f 	b.w	bf08c <strtod>

000be1ee <atoi>:
   be1ee:	220a      	movs	r2, #10
   be1f0:	2100      	movs	r1, #0
   be1f2:	f000 bfd9 	b.w	bf1a8 <strtol>

000be1f6 <memcmp>:
   be1f6:	b510      	push	{r4, lr}
   be1f8:	3901      	subs	r1, #1
   be1fa:	4402      	add	r2, r0
   be1fc:	4290      	cmp	r0, r2
   be1fe:	d101      	bne.n	be204 <memcmp+0xe>
   be200:	2000      	movs	r0, #0
   be202:	e005      	b.n	be210 <memcmp+0x1a>
   be204:	7803      	ldrb	r3, [r0, #0]
   be206:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   be20a:	42a3      	cmp	r3, r4
   be20c:	d001      	beq.n	be212 <memcmp+0x1c>
   be20e:	1b18      	subs	r0, r3, r4
   be210:	bd10      	pop	{r4, pc}
   be212:	3001      	adds	r0, #1
   be214:	e7f2      	b.n	be1fc <memcmp+0x6>

000be216 <memcpy>:
   be216:	440a      	add	r2, r1
   be218:	4291      	cmp	r1, r2
   be21a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   be21e:	d100      	bne.n	be222 <memcpy+0xc>
   be220:	4770      	bx	lr
   be222:	b510      	push	{r4, lr}
   be224:	f811 4b01 	ldrb.w	r4, [r1], #1
   be228:	f803 4f01 	strb.w	r4, [r3, #1]!
   be22c:	4291      	cmp	r1, r2
   be22e:	d1f9      	bne.n	be224 <memcpy+0xe>
   be230:	bd10      	pop	{r4, pc}

000be232 <memmove>:
   be232:	4288      	cmp	r0, r1
   be234:	b510      	push	{r4, lr}
   be236:	eb01 0402 	add.w	r4, r1, r2
   be23a:	d902      	bls.n	be242 <memmove+0x10>
   be23c:	4284      	cmp	r4, r0
   be23e:	4623      	mov	r3, r4
   be240:	d807      	bhi.n	be252 <memmove+0x20>
   be242:	1e43      	subs	r3, r0, #1
   be244:	42a1      	cmp	r1, r4
   be246:	d008      	beq.n	be25a <memmove+0x28>
   be248:	f811 2b01 	ldrb.w	r2, [r1], #1
   be24c:	f803 2f01 	strb.w	r2, [r3, #1]!
   be250:	e7f8      	b.n	be244 <memmove+0x12>
   be252:	4402      	add	r2, r0
   be254:	4601      	mov	r1, r0
   be256:	428a      	cmp	r2, r1
   be258:	d100      	bne.n	be25c <memmove+0x2a>
   be25a:	bd10      	pop	{r4, pc}
   be25c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   be260:	f802 4d01 	strb.w	r4, [r2, #-1]!
   be264:	e7f7      	b.n	be256 <memmove+0x24>

000be266 <memset>:
   be266:	4402      	add	r2, r0
   be268:	4603      	mov	r3, r0
   be26a:	4293      	cmp	r3, r2
   be26c:	d100      	bne.n	be270 <memset+0xa>
   be26e:	4770      	bx	lr
   be270:	f803 1b01 	strb.w	r1, [r3], #1
   be274:	e7f9      	b.n	be26a <memset+0x4>
	...

000be278 <srand>:
   be278:	b538      	push	{r3, r4, r5, lr}
   be27a:	4b10      	ldr	r3, [pc, #64]	; (be2bc <srand+0x44>)
   be27c:	681d      	ldr	r5, [r3, #0]
   be27e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   be280:	4604      	mov	r4, r0
   be282:	b9b3      	cbnz	r3, be2b2 <srand+0x3a>
   be284:	2018      	movs	r0, #24
   be286:	f7fb fa77 	bl	b9778 <malloc>
   be28a:	4602      	mov	r2, r0
   be28c:	63a8      	str	r0, [r5, #56]	; 0x38
   be28e:	b920      	cbnz	r0, be29a <srand+0x22>
   be290:	4b0b      	ldr	r3, [pc, #44]	; (be2c0 <srand+0x48>)
   be292:	480c      	ldr	r0, [pc, #48]	; (be2c4 <srand+0x4c>)
   be294:	2142      	movs	r1, #66	; 0x42
   be296:	f7fb fabf 	bl	b9818 <__assert_func>
   be29a:	490b      	ldr	r1, [pc, #44]	; (be2c8 <srand+0x50>)
   be29c:	4b0b      	ldr	r3, [pc, #44]	; (be2cc <srand+0x54>)
   be29e:	e9c0 1300 	strd	r1, r3, [r0]
   be2a2:	4b0b      	ldr	r3, [pc, #44]	; (be2d0 <srand+0x58>)
   be2a4:	6083      	str	r3, [r0, #8]
   be2a6:	230b      	movs	r3, #11
   be2a8:	8183      	strh	r3, [r0, #12]
   be2aa:	2100      	movs	r1, #0
   be2ac:	2001      	movs	r0, #1
   be2ae:	e9c2 0104 	strd	r0, r1, [r2, #16]
   be2b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   be2b4:	2200      	movs	r2, #0
   be2b6:	611c      	str	r4, [r3, #16]
   be2b8:	615a      	str	r2, [r3, #20]
   be2ba:	bd38      	pop	{r3, r4, r5, pc}
   be2bc:	2003da90 	.word	0x2003da90
   be2c0:	000c1b91 	.word	0x000c1b91
   be2c4:	000c1ba8 	.word	0x000c1ba8
   be2c8:	abcd330e 	.word	0xabcd330e
   be2cc:	e66d1234 	.word	0xe66d1234
   be2d0:	0005deec 	.word	0x0005deec

000be2d4 <rand>:
   be2d4:	4b16      	ldr	r3, [pc, #88]	; (be330 <rand+0x5c>)
   be2d6:	b510      	push	{r4, lr}
   be2d8:	681c      	ldr	r4, [r3, #0]
   be2da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   be2dc:	b9b3      	cbnz	r3, be30c <rand+0x38>
   be2de:	2018      	movs	r0, #24
   be2e0:	f7fb fa4a 	bl	b9778 <malloc>
   be2e4:	63a0      	str	r0, [r4, #56]	; 0x38
   be2e6:	b928      	cbnz	r0, be2f4 <rand+0x20>
   be2e8:	4602      	mov	r2, r0
   be2ea:	4b12      	ldr	r3, [pc, #72]	; (be334 <rand+0x60>)
   be2ec:	4812      	ldr	r0, [pc, #72]	; (be338 <rand+0x64>)
   be2ee:	214e      	movs	r1, #78	; 0x4e
   be2f0:	f7fb fa92 	bl	b9818 <__assert_func>
   be2f4:	4a11      	ldr	r2, [pc, #68]	; (be33c <rand+0x68>)
   be2f6:	4b12      	ldr	r3, [pc, #72]	; (be340 <rand+0x6c>)
   be2f8:	e9c0 2300 	strd	r2, r3, [r0]
   be2fc:	4b11      	ldr	r3, [pc, #68]	; (be344 <rand+0x70>)
   be2fe:	6083      	str	r3, [r0, #8]
   be300:	230b      	movs	r3, #11
   be302:	8183      	strh	r3, [r0, #12]
   be304:	2201      	movs	r2, #1
   be306:	2300      	movs	r3, #0
   be308:	e9c0 2304 	strd	r2, r3, [r0, #16]
   be30c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   be30e:	4a0e      	ldr	r2, [pc, #56]	; (be348 <rand+0x74>)
   be310:	6920      	ldr	r0, [r4, #16]
   be312:	6963      	ldr	r3, [r4, #20]
   be314:	490d      	ldr	r1, [pc, #52]	; (be34c <rand+0x78>)
   be316:	4342      	muls	r2, r0
   be318:	fb01 2203 	mla	r2, r1, r3, r2
   be31c:	fba0 0101 	umull	r0, r1, r0, r1
   be320:	1c43      	adds	r3, r0, #1
   be322:	eb42 0001 	adc.w	r0, r2, r1
   be326:	e9c4 3004 	strd	r3, r0, [r4, #16]
   be32a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   be32e:	bd10      	pop	{r4, pc}
   be330:	2003da90 	.word	0x2003da90
   be334:	000c1b91 	.word	0x000c1b91
   be338:	000c1ba8 	.word	0x000c1ba8
   be33c:	abcd330e 	.word	0xabcd330e
   be340:	e66d1234 	.word	0xe66d1234
   be344:	0005deec 	.word	0x0005deec
   be348:	5851f42d 	.word	0x5851f42d
   be34c:	4c957f2d 	.word	0x4c957f2d

000be350 <strcat>:
   be350:	b510      	push	{r4, lr}
   be352:	4602      	mov	r2, r0
   be354:	7814      	ldrb	r4, [r2, #0]
   be356:	4613      	mov	r3, r2
   be358:	3201      	adds	r2, #1
   be35a:	2c00      	cmp	r4, #0
   be35c:	d1fa      	bne.n	be354 <strcat+0x4>
   be35e:	3b01      	subs	r3, #1
   be360:	f811 2b01 	ldrb.w	r2, [r1], #1
   be364:	f803 2f01 	strb.w	r2, [r3, #1]!
   be368:	2a00      	cmp	r2, #0
   be36a:	d1f9      	bne.n	be360 <strcat+0x10>
   be36c:	bd10      	pop	{r4, pc}

000be36e <strcmp>:
   be36e:	f810 2b01 	ldrb.w	r2, [r0], #1
   be372:	f811 3b01 	ldrb.w	r3, [r1], #1
   be376:	2a01      	cmp	r2, #1
   be378:	bf28      	it	cs
   be37a:	429a      	cmpcs	r2, r3
   be37c:	d0f7      	beq.n	be36e <strcmp>
   be37e:	1ad0      	subs	r0, r2, r3
   be380:	4770      	bx	lr

000be382 <strcpy>:
   be382:	4603      	mov	r3, r0
   be384:	f811 2b01 	ldrb.w	r2, [r1], #1
   be388:	f803 2b01 	strb.w	r2, [r3], #1
   be38c:	2a00      	cmp	r2, #0
   be38e:	d1f9      	bne.n	be384 <strcpy+0x2>
   be390:	4770      	bx	lr
	...

000be394 <strdup>:
   be394:	4b02      	ldr	r3, [pc, #8]	; (be3a0 <strdup+0xc>)
   be396:	4601      	mov	r1, r0
   be398:	6818      	ldr	r0, [r3, #0]
   be39a:	f000 b803 	b.w	be3a4 <_strdup_r>
   be39e:	bf00      	nop
   be3a0:	2003da90 	.word	0x2003da90

000be3a4 <_strdup_r>:
   be3a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be3a6:	4604      	mov	r4, r0
   be3a8:	4608      	mov	r0, r1
   be3aa:	460d      	mov	r5, r1
   be3ac:	f000 f80f 	bl	be3ce <strlen>
   be3b0:	1c42      	adds	r2, r0, #1
   be3b2:	4611      	mov	r1, r2
   be3b4:	4620      	mov	r0, r4
   be3b6:	9201      	str	r2, [sp, #4]
   be3b8:	f7fb fa1e 	bl	b97f8 <_malloc_r>
   be3bc:	4604      	mov	r4, r0
   be3be:	b118      	cbz	r0, be3c8 <_strdup_r+0x24>
   be3c0:	9a01      	ldr	r2, [sp, #4]
   be3c2:	4629      	mov	r1, r5
   be3c4:	f7ff ff27 	bl	be216 <memcpy>
   be3c8:	4620      	mov	r0, r4
   be3ca:	b003      	add	sp, #12
   be3cc:	bd30      	pop	{r4, r5, pc}

000be3ce <strlen>:
   be3ce:	4603      	mov	r3, r0
   be3d0:	f813 2b01 	ldrb.w	r2, [r3], #1
   be3d4:	2a00      	cmp	r2, #0
   be3d6:	d1fb      	bne.n	be3d0 <strlen+0x2>
   be3d8:	1a18      	subs	r0, r3, r0
   be3da:	3801      	subs	r0, #1
   be3dc:	4770      	bx	lr

000be3de <strncmp>:
   be3de:	b510      	push	{r4, lr}
   be3e0:	b17a      	cbz	r2, be402 <strncmp+0x24>
   be3e2:	4603      	mov	r3, r0
   be3e4:	3901      	subs	r1, #1
   be3e6:	1884      	adds	r4, r0, r2
   be3e8:	f813 0b01 	ldrb.w	r0, [r3], #1
   be3ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   be3f0:	4290      	cmp	r0, r2
   be3f2:	d101      	bne.n	be3f8 <strncmp+0x1a>
   be3f4:	42a3      	cmp	r3, r4
   be3f6:	d101      	bne.n	be3fc <strncmp+0x1e>
   be3f8:	1a80      	subs	r0, r0, r2
   be3fa:	bd10      	pop	{r4, pc}
   be3fc:	2800      	cmp	r0, #0
   be3fe:	d1f3      	bne.n	be3e8 <strncmp+0xa>
   be400:	e7fa      	b.n	be3f8 <strncmp+0x1a>
   be402:	4610      	mov	r0, r2
   be404:	e7f9      	b.n	be3fa <strncmp+0x1c>

000be406 <strncpy>:
   be406:	b510      	push	{r4, lr}
   be408:	3901      	subs	r1, #1
   be40a:	4603      	mov	r3, r0
   be40c:	b132      	cbz	r2, be41c <strncpy+0x16>
   be40e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   be412:	f803 4b01 	strb.w	r4, [r3], #1
   be416:	3a01      	subs	r2, #1
   be418:	2c00      	cmp	r4, #0
   be41a:	d1f7      	bne.n	be40c <strncpy+0x6>
   be41c:	441a      	add	r2, r3
   be41e:	2100      	movs	r1, #0
   be420:	4293      	cmp	r3, r2
   be422:	d100      	bne.n	be426 <strncpy+0x20>
   be424:	bd10      	pop	{r4, pc}
   be426:	f803 1b01 	strb.w	r1, [r3], #1
   be42a:	e7f9      	b.n	be420 <strncpy+0x1a>

000be42c <strnlen>:
   be42c:	b510      	push	{r4, lr}
   be42e:	4602      	mov	r2, r0
   be430:	4401      	add	r1, r0
   be432:	428a      	cmp	r2, r1
   be434:	4613      	mov	r3, r2
   be436:	d003      	beq.n	be440 <strnlen+0x14>
   be438:	781c      	ldrb	r4, [r3, #0]
   be43a:	3201      	adds	r2, #1
   be43c:	2c00      	cmp	r4, #0
   be43e:	d1f8      	bne.n	be432 <strnlen+0x6>
   be440:	1a18      	subs	r0, r3, r0
   be442:	bd10      	pop	{r4, pc}

000be444 <sulp>:
   be444:	b570      	push	{r4, r5, r6, lr}
   be446:	4604      	mov	r4, r0
   be448:	460d      	mov	r5, r1
   be44a:	ec45 4b10 	vmov	d0, r4, r5
   be44e:	4616      	mov	r6, r2
   be450:	f001 fe0e 	bl	c0070 <__ulp>
   be454:	ec51 0b10 	vmov	r0, r1, d0
   be458:	b17e      	cbz	r6, be47a <sulp+0x36>
   be45a:	f3c5 530a 	ubfx	r3, r5, #20, #11
   be45e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   be462:	2b00      	cmp	r3, #0
   be464:	dd09      	ble.n	be47a <sulp+0x36>
   be466:	051b      	lsls	r3, r3, #20
   be468:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   be46c:	2400      	movs	r4, #0
   be46e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   be472:	4622      	mov	r2, r4
   be474:	462b      	mov	r3, r5
   be476:	f7ff fb89 	bl	bdb8c <__aeabi_dmul>
   be47a:	bd70      	pop	{r4, r5, r6, pc}
   be47c:	0000      	movs	r0, r0
	...

000be480 <_strtod_l>:
   be480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be484:	ed2d 8b02 	vpush	{d8}
   be488:	b09d      	sub	sp, #116	; 0x74
   be48a:	461f      	mov	r7, r3
   be48c:	2300      	movs	r3, #0
   be48e:	9318      	str	r3, [sp, #96]	; 0x60
   be490:	4ba2      	ldr	r3, [pc, #648]	; (be71c <_strtod_l+0x29c>)
   be492:	9213      	str	r2, [sp, #76]	; 0x4c
   be494:	681b      	ldr	r3, [r3, #0]
   be496:	9305      	str	r3, [sp, #20]
   be498:	4604      	mov	r4, r0
   be49a:	4618      	mov	r0, r3
   be49c:	4688      	mov	r8, r1
   be49e:	f7ff ff96 	bl	be3ce <strlen>
   be4a2:	f04f 0a00 	mov.w	sl, #0
   be4a6:	4605      	mov	r5, r0
   be4a8:	f04f 0b00 	mov.w	fp, #0
   be4ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   be4b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be4b2:	781a      	ldrb	r2, [r3, #0]
   be4b4:	2a2b      	cmp	r2, #43	; 0x2b
   be4b6:	d04e      	beq.n	be556 <_strtod_l+0xd6>
   be4b8:	d83b      	bhi.n	be532 <_strtod_l+0xb2>
   be4ba:	2a0d      	cmp	r2, #13
   be4bc:	d834      	bhi.n	be528 <_strtod_l+0xa8>
   be4be:	2a08      	cmp	r2, #8
   be4c0:	d834      	bhi.n	be52c <_strtod_l+0xac>
   be4c2:	2a00      	cmp	r2, #0
   be4c4:	d03e      	beq.n	be544 <_strtod_l+0xc4>
   be4c6:	2300      	movs	r3, #0
   be4c8:	930a      	str	r3, [sp, #40]	; 0x28
   be4ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   be4cc:	7833      	ldrb	r3, [r6, #0]
   be4ce:	2b30      	cmp	r3, #48	; 0x30
   be4d0:	f040 80b0 	bne.w	be634 <_strtod_l+0x1b4>
   be4d4:	7873      	ldrb	r3, [r6, #1]
   be4d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   be4da:	2b58      	cmp	r3, #88	; 0x58
   be4dc:	d168      	bne.n	be5b0 <_strtod_l+0x130>
   be4de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   be4e0:	9301      	str	r3, [sp, #4]
   be4e2:	ab18      	add	r3, sp, #96	; 0x60
   be4e4:	9702      	str	r7, [sp, #8]
   be4e6:	9300      	str	r3, [sp, #0]
   be4e8:	4a8d      	ldr	r2, [pc, #564]	; (be720 <_strtod_l+0x2a0>)
   be4ea:	ab19      	add	r3, sp, #100	; 0x64
   be4ec:	a917      	add	r1, sp, #92	; 0x5c
   be4ee:	4620      	mov	r0, r4
   be4f0:	f000 ff2e 	bl	bf350 <__gethex>
   be4f4:	f010 0707 	ands.w	r7, r0, #7
   be4f8:	4605      	mov	r5, r0
   be4fa:	d005      	beq.n	be508 <_strtod_l+0x88>
   be4fc:	2f06      	cmp	r7, #6
   be4fe:	d12c      	bne.n	be55a <_strtod_l+0xda>
   be500:	3601      	adds	r6, #1
   be502:	2300      	movs	r3, #0
   be504:	9617      	str	r6, [sp, #92]	; 0x5c
   be506:	930a      	str	r3, [sp, #40]	; 0x28
   be508:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   be50a:	2b00      	cmp	r3, #0
   be50c:	f040 8590 	bne.w	bf030 <_strtod_l+0xbb0>
   be510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   be512:	b1eb      	cbz	r3, be550 <_strtod_l+0xd0>
   be514:	4652      	mov	r2, sl
   be516:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   be51a:	ec43 2b10 	vmov	d0, r2, r3
   be51e:	b01d      	add	sp, #116	; 0x74
   be520:	ecbd 8b02 	vpop	{d8}
   be524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be528:	2a20      	cmp	r2, #32
   be52a:	d1cc      	bne.n	be4c6 <_strtod_l+0x46>
   be52c:	3301      	adds	r3, #1
   be52e:	9317      	str	r3, [sp, #92]	; 0x5c
   be530:	e7be      	b.n	be4b0 <_strtod_l+0x30>
   be532:	2a2d      	cmp	r2, #45	; 0x2d
   be534:	d1c7      	bne.n	be4c6 <_strtod_l+0x46>
   be536:	2201      	movs	r2, #1
   be538:	920a      	str	r2, [sp, #40]	; 0x28
   be53a:	1c5a      	adds	r2, r3, #1
   be53c:	9217      	str	r2, [sp, #92]	; 0x5c
   be53e:	785b      	ldrb	r3, [r3, #1]
   be540:	2b00      	cmp	r3, #0
   be542:	d1c2      	bne.n	be4ca <_strtod_l+0x4a>
   be544:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   be546:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   be54a:	2b00      	cmp	r3, #0
   be54c:	f040 856e 	bne.w	bf02c <_strtod_l+0xbac>
   be550:	4652      	mov	r2, sl
   be552:	465b      	mov	r3, fp
   be554:	e7e1      	b.n	be51a <_strtod_l+0x9a>
   be556:	2200      	movs	r2, #0
   be558:	e7ee      	b.n	be538 <_strtod_l+0xb8>
   be55a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   be55c:	b13a      	cbz	r2, be56e <_strtod_l+0xee>
   be55e:	2135      	movs	r1, #53	; 0x35
   be560:	a81a      	add	r0, sp, #104	; 0x68
   be562:	f001 fe90 	bl	c0286 <__copybits>
   be566:	9918      	ldr	r1, [sp, #96]	; 0x60
   be568:	4620      	mov	r0, r4
   be56a:	f001 fa4f 	bl	bfa0c <_Bfree>
   be56e:	3f01      	subs	r7, #1
   be570:	2f04      	cmp	r7, #4
   be572:	d806      	bhi.n	be582 <_strtod_l+0x102>
   be574:	e8df f007 	tbb	[pc, r7]
   be578:	1714030a 	.word	0x1714030a
   be57c:	0a          	.byte	0x0a
   be57d:	00          	.byte	0x00
   be57e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   be582:	0728      	lsls	r0, r5, #28
   be584:	d5c0      	bpl.n	be508 <_strtod_l+0x88>
   be586:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   be58a:	e7bd      	b.n	be508 <_strtod_l+0x88>
   be58c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   be590:	9a19      	ldr	r2, [sp, #100]	; 0x64
   be592:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   be596:	f202 4233 	addw	r2, r2, #1075	; 0x433
   be59a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   be59e:	e7f0      	b.n	be582 <_strtod_l+0x102>
   be5a0:	f8df b180 	ldr.w	fp, [pc, #384]	; be724 <_strtod_l+0x2a4>
   be5a4:	e7ed      	b.n	be582 <_strtod_l+0x102>
   be5a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   be5aa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   be5ae:	e7e8      	b.n	be582 <_strtod_l+0x102>
   be5b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be5b2:	1c5a      	adds	r2, r3, #1
   be5b4:	9217      	str	r2, [sp, #92]	; 0x5c
   be5b6:	785b      	ldrb	r3, [r3, #1]
   be5b8:	2b30      	cmp	r3, #48	; 0x30
   be5ba:	d0f9      	beq.n	be5b0 <_strtod_l+0x130>
   be5bc:	2b00      	cmp	r3, #0
   be5be:	d0a3      	beq.n	be508 <_strtod_l+0x88>
   be5c0:	2301      	movs	r3, #1
   be5c2:	f04f 0900 	mov.w	r9, #0
   be5c6:	9304      	str	r3, [sp, #16]
   be5c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be5ca:	9308      	str	r3, [sp, #32]
   be5cc:	f8cd 901c 	str.w	r9, [sp, #28]
   be5d0:	464f      	mov	r7, r9
   be5d2:	220a      	movs	r2, #10
   be5d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
   be5d6:	7806      	ldrb	r6, [r0, #0]
   be5d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   be5dc:	b2d9      	uxtb	r1, r3
   be5de:	2909      	cmp	r1, #9
   be5e0:	d92a      	bls.n	be638 <_strtod_l+0x1b8>
   be5e2:	9905      	ldr	r1, [sp, #20]
   be5e4:	462a      	mov	r2, r5
   be5e6:	f7ff fefa 	bl	be3de <strncmp>
   be5ea:	b398      	cbz	r0, be654 <_strtod_l+0x1d4>
   be5ec:	2000      	movs	r0, #0
   be5ee:	4632      	mov	r2, r6
   be5f0:	463d      	mov	r5, r7
   be5f2:	9005      	str	r0, [sp, #20]
   be5f4:	4603      	mov	r3, r0
   be5f6:	2a65      	cmp	r2, #101	; 0x65
   be5f8:	d001      	beq.n	be5fe <_strtod_l+0x17e>
   be5fa:	2a45      	cmp	r2, #69	; 0x45
   be5fc:	d118      	bne.n	be630 <_strtod_l+0x1b0>
   be5fe:	b91d      	cbnz	r5, be608 <_strtod_l+0x188>
   be600:	9a04      	ldr	r2, [sp, #16]
   be602:	4302      	orrs	r2, r0
   be604:	d09e      	beq.n	be544 <_strtod_l+0xc4>
   be606:	2500      	movs	r5, #0
   be608:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   be60c:	f108 0201 	add.w	r2, r8, #1
   be610:	9217      	str	r2, [sp, #92]	; 0x5c
   be612:	f898 2001 	ldrb.w	r2, [r8, #1]
   be616:	2a2b      	cmp	r2, #43	; 0x2b
   be618:	d075      	beq.n	be706 <_strtod_l+0x286>
   be61a:	2a2d      	cmp	r2, #45	; 0x2d
   be61c:	d07b      	beq.n	be716 <_strtod_l+0x296>
   be61e:	f04f 0c00 	mov.w	ip, #0
   be622:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   be626:	2909      	cmp	r1, #9
   be628:	f240 8082 	bls.w	be730 <_strtod_l+0x2b0>
   be62c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   be630:	2600      	movs	r6, #0
   be632:	e09d      	b.n	be770 <_strtod_l+0x2f0>
   be634:	2300      	movs	r3, #0
   be636:	e7c4      	b.n	be5c2 <_strtod_l+0x142>
   be638:	2f08      	cmp	r7, #8
   be63a:	bfd8      	it	le
   be63c:	9907      	ldrle	r1, [sp, #28]
   be63e:	f100 0001 	add.w	r0, r0, #1
   be642:	bfda      	itte	le
   be644:	fb02 3301 	mlale	r3, r2, r1, r3
   be648:	9307      	strle	r3, [sp, #28]
   be64a:	fb02 3909 	mlagt	r9, r2, r9, r3
   be64e:	3701      	adds	r7, #1
   be650:	9017      	str	r0, [sp, #92]	; 0x5c
   be652:	e7bf      	b.n	be5d4 <_strtod_l+0x154>
   be654:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be656:	195a      	adds	r2, r3, r5
   be658:	9217      	str	r2, [sp, #92]	; 0x5c
   be65a:	5d5a      	ldrb	r2, [r3, r5]
   be65c:	2f00      	cmp	r7, #0
   be65e:	d037      	beq.n	be6d0 <_strtod_l+0x250>
   be660:	9005      	str	r0, [sp, #20]
   be662:	463d      	mov	r5, r7
   be664:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   be668:	2b09      	cmp	r3, #9
   be66a:	d912      	bls.n	be692 <_strtod_l+0x212>
   be66c:	2301      	movs	r3, #1
   be66e:	e7c2      	b.n	be5f6 <_strtod_l+0x176>
   be670:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be672:	1c5a      	adds	r2, r3, #1
   be674:	9217      	str	r2, [sp, #92]	; 0x5c
   be676:	785a      	ldrb	r2, [r3, #1]
   be678:	3001      	adds	r0, #1
   be67a:	2a30      	cmp	r2, #48	; 0x30
   be67c:	d0f8      	beq.n	be670 <_strtod_l+0x1f0>
   be67e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   be682:	2b08      	cmp	r3, #8
   be684:	f200 84d9 	bhi.w	bf03a <_strtod_l+0xbba>
   be688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be68a:	9005      	str	r0, [sp, #20]
   be68c:	2000      	movs	r0, #0
   be68e:	9308      	str	r3, [sp, #32]
   be690:	4605      	mov	r5, r0
   be692:	3a30      	subs	r2, #48	; 0x30
   be694:	f100 0301 	add.w	r3, r0, #1
   be698:	d014      	beq.n	be6c4 <_strtod_l+0x244>
   be69a:	9905      	ldr	r1, [sp, #20]
   be69c:	4419      	add	r1, r3
   be69e:	9105      	str	r1, [sp, #20]
   be6a0:	462b      	mov	r3, r5
   be6a2:	eb00 0e05 	add.w	lr, r0, r5
   be6a6:	210a      	movs	r1, #10
   be6a8:	4573      	cmp	r3, lr
   be6aa:	d113      	bne.n	be6d4 <_strtod_l+0x254>
   be6ac:	182b      	adds	r3, r5, r0
   be6ae:	2b08      	cmp	r3, #8
   be6b0:	f105 0501 	add.w	r5, r5, #1
   be6b4:	4405      	add	r5, r0
   be6b6:	dc1c      	bgt.n	be6f2 <_strtod_l+0x272>
   be6b8:	9907      	ldr	r1, [sp, #28]
   be6ba:	230a      	movs	r3, #10
   be6bc:	fb03 2301 	mla	r3, r3, r1, r2
   be6c0:	9307      	str	r3, [sp, #28]
   be6c2:	2300      	movs	r3, #0
   be6c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   be6c6:	1c51      	adds	r1, r2, #1
   be6c8:	9117      	str	r1, [sp, #92]	; 0x5c
   be6ca:	7852      	ldrb	r2, [r2, #1]
   be6cc:	4618      	mov	r0, r3
   be6ce:	e7c9      	b.n	be664 <_strtod_l+0x1e4>
   be6d0:	4638      	mov	r0, r7
   be6d2:	e7d2      	b.n	be67a <_strtod_l+0x1fa>
   be6d4:	2b08      	cmp	r3, #8
   be6d6:	dc04      	bgt.n	be6e2 <_strtod_l+0x262>
   be6d8:	9e07      	ldr	r6, [sp, #28]
   be6da:	434e      	muls	r6, r1
   be6dc:	9607      	str	r6, [sp, #28]
   be6de:	3301      	adds	r3, #1
   be6e0:	e7e2      	b.n	be6a8 <_strtod_l+0x228>
   be6e2:	f103 0c01 	add.w	ip, r3, #1
   be6e6:	f1bc 0f10 	cmp.w	ip, #16
   be6ea:	bfd8      	it	le
   be6ec:	fb01 f909 	mulle.w	r9, r1, r9
   be6f0:	e7f5      	b.n	be6de <_strtod_l+0x25e>
   be6f2:	2d10      	cmp	r5, #16
   be6f4:	bfdc      	itt	le
   be6f6:	230a      	movle	r3, #10
   be6f8:	fb03 2909 	mlale	r9, r3, r9, r2
   be6fc:	e7e1      	b.n	be6c2 <_strtod_l+0x242>
   be6fe:	2300      	movs	r3, #0
   be700:	9305      	str	r3, [sp, #20]
   be702:	2301      	movs	r3, #1
   be704:	e77c      	b.n	be600 <_strtod_l+0x180>
   be706:	f04f 0c00 	mov.w	ip, #0
   be70a:	f108 0202 	add.w	r2, r8, #2
   be70e:	9217      	str	r2, [sp, #92]	; 0x5c
   be710:	f898 2002 	ldrb.w	r2, [r8, #2]
   be714:	e785      	b.n	be622 <_strtod_l+0x1a2>
   be716:	f04f 0c01 	mov.w	ip, #1
   be71a:	e7f6      	b.n	be70a <_strtod_l+0x28a>
   be71c:	000c1dd4 	.word	0x000c1dd4
   be720:	000c1c10 	.word	0x000c1c10
   be724:	7ff00000 	.word	0x7ff00000
   be728:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   be72a:	1c51      	adds	r1, r2, #1
   be72c:	9117      	str	r1, [sp, #92]	; 0x5c
   be72e:	7852      	ldrb	r2, [r2, #1]
   be730:	2a30      	cmp	r2, #48	; 0x30
   be732:	d0f9      	beq.n	be728 <_strtod_l+0x2a8>
   be734:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   be738:	2908      	cmp	r1, #8
   be73a:	f63f af79 	bhi.w	be630 <_strtod_l+0x1b0>
   be73e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   be742:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   be744:	9206      	str	r2, [sp, #24]
   be746:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   be748:	1c51      	adds	r1, r2, #1
   be74a:	9117      	str	r1, [sp, #92]	; 0x5c
   be74c:	7852      	ldrb	r2, [r2, #1]
   be74e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   be752:	2e09      	cmp	r6, #9
   be754:	d937      	bls.n	be7c6 <_strtod_l+0x346>
   be756:	9e06      	ldr	r6, [sp, #24]
   be758:	1b89      	subs	r1, r1, r6
   be75a:	2908      	cmp	r1, #8
   be75c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   be760:	dc02      	bgt.n	be768 <_strtod_l+0x2e8>
   be762:	4576      	cmp	r6, lr
   be764:	bfa8      	it	ge
   be766:	4676      	movge	r6, lr
   be768:	f1bc 0f00 	cmp.w	ip, #0
   be76c:	d000      	beq.n	be770 <_strtod_l+0x2f0>
   be76e:	4276      	negs	r6, r6
   be770:	2d00      	cmp	r5, #0
   be772:	d14d      	bne.n	be810 <_strtod_l+0x390>
   be774:	9904      	ldr	r1, [sp, #16]
   be776:	4301      	orrs	r1, r0
   be778:	f47f aec6 	bne.w	be508 <_strtod_l+0x88>
   be77c:	2b00      	cmp	r3, #0
   be77e:	f47f aee1 	bne.w	be544 <_strtod_l+0xc4>
   be782:	2a69      	cmp	r2, #105	; 0x69
   be784:	d027      	beq.n	be7d6 <_strtod_l+0x356>
   be786:	dc24      	bgt.n	be7d2 <_strtod_l+0x352>
   be788:	2a49      	cmp	r2, #73	; 0x49
   be78a:	d024      	beq.n	be7d6 <_strtod_l+0x356>
   be78c:	2a4e      	cmp	r2, #78	; 0x4e
   be78e:	f47f aed9 	bne.w	be544 <_strtod_l+0xc4>
   be792:	499f      	ldr	r1, [pc, #636]	; (bea10 <_strtod_l+0x590>)
   be794:	a817      	add	r0, sp, #92	; 0x5c
   be796:	f001 f833 	bl	bf800 <__match>
   be79a:	2800      	cmp	r0, #0
   be79c:	f43f aed2 	beq.w	be544 <_strtod_l+0xc4>
   be7a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be7a2:	781b      	ldrb	r3, [r3, #0]
   be7a4:	2b28      	cmp	r3, #40	; 0x28
   be7a6:	d12d      	bne.n	be804 <_strtod_l+0x384>
   be7a8:	499a      	ldr	r1, [pc, #616]	; (bea14 <_strtod_l+0x594>)
   be7aa:	aa1a      	add	r2, sp, #104	; 0x68
   be7ac:	a817      	add	r0, sp, #92	; 0x5c
   be7ae:	f001 f83b 	bl	bf828 <__hexnan>
   be7b2:	2805      	cmp	r0, #5
   be7b4:	d126      	bne.n	be804 <_strtod_l+0x384>
   be7b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   be7b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   be7bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   be7c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   be7c4:	e6a0      	b.n	be508 <_strtod_l+0x88>
   be7c6:	210a      	movs	r1, #10
   be7c8:	fb01 2e0e 	mla	lr, r1, lr, r2
   be7cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   be7d0:	e7b9      	b.n	be746 <_strtod_l+0x2c6>
   be7d2:	2a6e      	cmp	r2, #110	; 0x6e
   be7d4:	e7db      	b.n	be78e <_strtod_l+0x30e>
   be7d6:	4990      	ldr	r1, [pc, #576]	; (bea18 <_strtod_l+0x598>)
   be7d8:	a817      	add	r0, sp, #92	; 0x5c
   be7da:	f001 f811 	bl	bf800 <__match>
   be7de:	2800      	cmp	r0, #0
   be7e0:	f43f aeb0 	beq.w	be544 <_strtod_l+0xc4>
   be7e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be7e6:	498d      	ldr	r1, [pc, #564]	; (bea1c <_strtod_l+0x59c>)
   be7e8:	3b01      	subs	r3, #1
   be7ea:	a817      	add	r0, sp, #92	; 0x5c
   be7ec:	9317      	str	r3, [sp, #92]	; 0x5c
   be7ee:	f001 f807 	bl	bf800 <__match>
   be7f2:	b910      	cbnz	r0, be7fa <_strtod_l+0x37a>
   be7f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be7f6:	3301      	adds	r3, #1
   be7f8:	9317      	str	r3, [sp, #92]	; 0x5c
   be7fa:	f8df b230 	ldr.w	fp, [pc, #560]	; bea2c <_strtod_l+0x5ac>
   be7fe:	f04f 0a00 	mov.w	sl, #0
   be802:	e681      	b.n	be508 <_strtod_l+0x88>
   be804:	4886      	ldr	r0, [pc, #536]	; (bea20 <_strtod_l+0x5a0>)
   be806:	f001 fd93 	bl	c0330 <nan>
   be80a:	ec5b ab10 	vmov	sl, fp, d0
   be80e:	e67b      	b.n	be508 <_strtod_l+0x88>
   be810:	9b05      	ldr	r3, [sp, #20]
   be812:	9807      	ldr	r0, [sp, #28]
   be814:	1af3      	subs	r3, r6, r3
   be816:	2f00      	cmp	r7, #0
   be818:	bf08      	it	eq
   be81a:	462f      	moveq	r7, r5
   be81c:	2d10      	cmp	r5, #16
   be81e:	9306      	str	r3, [sp, #24]
   be820:	46a8      	mov	r8, r5
   be822:	bfa8      	it	ge
   be824:	f04f 0810 	movge.w	r8, #16
   be828:	f7ff f936 	bl	bda98 <__aeabi_ui2d>
   be82c:	2d09      	cmp	r5, #9
   be82e:	4682      	mov	sl, r0
   be830:	468b      	mov	fp, r1
   be832:	dd13      	ble.n	be85c <_strtod_l+0x3dc>
   be834:	4b7b      	ldr	r3, [pc, #492]	; (bea24 <_strtod_l+0x5a4>)
   be836:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   be83a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   be83e:	f7ff f9a5 	bl	bdb8c <__aeabi_dmul>
   be842:	4682      	mov	sl, r0
   be844:	4648      	mov	r0, r9
   be846:	468b      	mov	fp, r1
   be848:	f7ff f926 	bl	bda98 <__aeabi_ui2d>
   be84c:	4602      	mov	r2, r0
   be84e:	460b      	mov	r3, r1
   be850:	4650      	mov	r0, sl
   be852:	4659      	mov	r1, fp
   be854:	f7fe ffe4 	bl	bd820 <__adddf3>
   be858:	4682      	mov	sl, r0
   be85a:	468b      	mov	fp, r1
   be85c:	2d0f      	cmp	r5, #15
   be85e:	dc38      	bgt.n	be8d2 <_strtod_l+0x452>
   be860:	9b06      	ldr	r3, [sp, #24]
   be862:	2b00      	cmp	r3, #0
   be864:	f43f ae50 	beq.w	be508 <_strtod_l+0x88>
   be868:	dd24      	ble.n	be8b4 <_strtod_l+0x434>
   be86a:	2b16      	cmp	r3, #22
   be86c:	dc0b      	bgt.n	be886 <_strtod_l+0x406>
   be86e:	496d      	ldr	r1, [pc, #436]	; (bea24 <_strtod_l+0x5a4>)
   be870:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   be874:	e9d1 0100 	ldrd	r0, r1, [r1]
   be878:	4652      	mov	r2, sl
   be87a:	465b      	mov	r3, fp
   be87c:	f7ff f986 	bl	bdb8c <__aeabi_dmul>
   be880:	4682      	mov	sl, r0
   be882:	468b      	mov	fp, r1
   be884:	e640      	b.n	be508 <_strtod_l+0x88>
   be886:	9a06      	ldr	r2, [sp, #24]
   be888:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   be88c:	4293      	cmp	r3, r2
   be88e:	db20      	blt.n	be8d2 <_strtod_l+0x452>
   be890:	4c64      	ldr	r4, [pc, #400]	; (bea24 <_strtod_l+0x5a4>)
   be892:	f1c5 050f 	rsb	r5, r5, #15
   be896:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   be89a:	4652      	mov	r2, sl
   be89c:	465b      	mov	r3, fp
   be89e:	e9d1 0100 	ldrd	r0, r1, [r1]
   be8a2:	f7ff f973 	bl	bdb8c <__aeabi_dmul>
   be8a6:	9b06      	ldr	r3, [sp, #24]
   be8a8:	1b5d      	subs	r5, r3, r5
   be8aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   be8ae:	e9d4 2300 	ldrd	r2, r3, [r4]
   be8b2:	e7e3      	b.n	be87c <_strtod_l+0x3fc>
   be8b4:	9b06      	ldr	r3, [sp, #24]
   be8b6:	3316      	adds	r3, #22
   be8b8:	db0b      	blt.n	be8d2 <_strtod_l+0x452>
   be8ba:	9b05      	ldr	r3, [sp, #20]
   be8bc:	1b9e      	subs	r6, r3, r6
   be8be:	4b59      	ldr	r3, [pc, #356]	; (bea24 <_strtod_l+0x5a4>)
   be8c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   be8c4:	e9d6 2300 	ldrd	r2, r3, [r6]
   be8c8:	4650      	mov	r0, sl
   be8ca:	4659      	mov	r1, fp
   be8cc:	f7ff fa88 	bl	bdde0 <__aeabi_ddiv>
   be8d0:	e7d6      	b.n	be880 <_strtod_l+0x400>
   be8d2:	9b06      	ldr	r3, [sp, #24]
   be8d4:	eba5 0808 	sub.w	r8, r5, r8
   be8d8:	4498      	add	r8, r3
   be8da:	f1b8 0f00 	cmp.w	r8, #0
   be8de:	dd74      	ble.n	be9ca <_strtod_l+0x54a>
   be8e0:	f018 030f 	ands.w	r3, r8, #15
   be8e4:	d00a      	beq.n	be8fc <_strtod_l+0x47c>
   be8e6:	494f      	ldr	r1, [pc, #316]	; (bea24 <_strtod_l+0x5a4>)
   be8e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   be8ec:	4652      	mov	r2, sl
   be8ee:	465b      	mov	r3, fp
   be8f0:	e9d1 0100 	ldrd	r0, r1, [r1]
   be8f4:	f7ff f94a 	bl	bdb8c <__aeabi_dmul>
   be8f8:	4682      	mov	sl, r0
   be8fa:	468b      	mov	fp, r1
   be8fc:	f038 080f 	bics.w	r8, r8, #15
   be900:	d04f      	beq.n	be9a2 <_strtod_l+0x522>
   be902:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   be906:	dd22      	ble.n	be94e <_strtod_l+0x4ce>
   be908:	2500      	movs	r5, #0
   be90a:	462e      	mov	r6, r5
   be90c:	9507      	str	r5, [sp, #28]
   be90e:	9505      	str	r5, [sp, #20]
   be910:	2322      	movs	r3, #34	; 0x22
   be912:	f8df b118 	ldr.w	fp, [pc, #280]	; bea2c <_strtod_l+0x5ac>
   be916:	6023      	str	r3, [r4, #0]
   be918:	f04f 0a00 	mov.w	sl, #0
   be91c:	9b07      	ldr	r3, [sp, #28]
   be91e:	2b00      	cmp	r3, #0
   be920:	f43f adf2 	beq.w	be508 <_strtod_l+0x88>
   be924:	9918      	ldr	r1, [sp, #96]	; 0x60
   be926:	4620      	mov	r0, r4
   be928:	f001 f870 	bl	bfa0c <_Bfree>
   be92c:	9905      	ldr	r1, [sp, #20]
   be92e:	4620      	mov	r0, r4
   be930:	f001 f86c 	bl	bfa0c <_Bfree>
   be934:	4631      	mov	r1, r6
   be936:	4620      	mov	r0, r4
   be938:	f001 f868 	bl	bfa0c <_Bfree>
   be93c:	9907      	ldr	r1, [sp, #28]
   be93e:	4620      	mov	r0, r4
   be940:	f001 f864 	bl	bfa0c <_Bfree>
   be944:	4629      	mov	r1, r5
   be946:	4620      	mov	r0, r4
   be948:	f001 f860 	bl	bfa0c <_Bfree>
   be94c:	e5dc      	b.n	be508 <_strtod_l+0x88>
   be94e:	4b36      	ldr	r3, [pc, #216]	; (bea28 <_strtod_l+0x5a8>)
   be950:	9304      	str	r3, [sp, #16]
   be952:	2300      	movs	r3, #0
   be954:	ea4f 1828 	mov.w	r8, r8, asr #4
   be958:	4650      	mov	r0, sl
   be95a:	4659      	mov	r1, fp
   be95c:	4699      	mov	r9, r3
   be95e:	f1b8 0f01 	cmp.w	r8, #1
   be962:	dc21      	bgt.n	be9a8 <_strtod_l+0x528>
   be964:	b10b      	cbz	r3, be96a <_strtod_l+0x4ea>
   be966:	4682      	mov	sl, r0
   be968:	468b      	mov	fp, r1
   be96a:	4b2f      	ldr	r3, [pc, #188]	; (bea28 <_strtod_l+0x5a8>)
   be96c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   be970:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   be974:	4652      	mov	r2, sl
   be976:	465b      	mov	r3, fp
   be978:	e9d9 0100 	ldrd	r0, r1, [r9]
   be97c:	f7ff f906 	bl	bdb8c <__aeabi_dmul>
   be980:	4b2a      	ldr	r3, [pc, #168]	; (bea2c <_strtod_l+0x5ac>)
   be982:	460a      	mov	r2, r1
   be984:	400b      	ands	r3, r1
   be986:	492a      	ldr	r1, [pc, #168]	; (bea30 <_strtod_l+0x5b0>)
   be988:	428b      	cmp	r3, r1
   be98a:	4682      	mov	sl, r0
   be98c:	d8bc      	bhi.n	be908 <_strtod_l+0x488>
   be98e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   be992:	428b      	cmp	r3, r1
   be994:	bf86      	itte	hi
   be996:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bea34 <_strtod_l+0x5b4>
   be99a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   be99e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   be9a2:	2300      	movs	r3, #0
   be9a4:	9304      	str	r3, [sp, #16]
   be9a6:	e084      	b.n	beab2 <_strtod_l+0x632>
   be9a8:	f018 0f01 	tst.w	r8, #1
   be9ac:	d005      	beq.n	be9ba <_strtod_l+0x53a>
   be9ae:	9b04      	ldr	r3, [sp, #16]
   be9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   be9b4:	f7ff f8ea 	bl	bdb8c <__aeabi_dmul>
   be9b8:	2301      	movs	r3, #1
   be9ba:	9a04      	ldr	r2, [sp, #16]
   be9bc:	3208      	adds	r2, #8
   be9be:	f109 0901 	add.w	r9, r9, #1
   be9c2:	ea4f 0868 	mov.w	r8, r8, asr #1
   be9c6:	9204      	str	r2, [sp, #16]
   be9c8:	e7c9      	b.n	be95e <_strtod_l+0x4de>
   be9ca:	d0ea      	beq.n	be9a2 <_strtod_l+0x522>
   be9cc:	f1c8 0800 	rsb	r8, r8, #0
   be9d0:	f018 020f 	ands.w	r2, r8, #15
   be9d4:	d00a      	beq.n	be9ec <_strtod_l+0x56c>
   be9d6:	4b13      	ldr	r3, [pc, #76]	; (bea24 <_strtod_l+0x5a4>)
   be9d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   be9dc:	4650      	mov	r0, sl
   be9de:	4659      	mov	r1, fp
   be9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   be9e4:	f7ff f9fc 	bl	bdde0 <__aeabi_ddiv>
   be9e8:	4682      	mov	sl, r0
   be9ea:	468b      	mov	fp, r1
   be9ec:	ea5f 1828 	movs.w	r8, r8, asr #4
   be9f0:	d0d7      	beq.n	be9a2 <_strtod_l+0x522>
   be9f2:	f1b8 0f1f 	cmp.w	r8, #31
   be9f6:	dd1f      	ble.n	bea38 <_strtod_l+0x5b8>
   be9f8:	2500      	movs	r5, #0
   be9fa:	462e      	mov	r6, r5
   be9fc:	9507      	str	r5, [sp, #28]
   be9fe:	9505      	str	r5, [sp, #20]
   bea00:	2322      	movs	r3, #34	; 0x22
   bea02:	f04f 0a00 	mov.w	sl, #0
   bea06:	f04f 0b00 	mov.w	fp, #0
   bea0a:	6023      	str	r3, [r4, #0]
   bea0c:	e786      	b.n	be91c <_strtod_l+0x49c>
   bea0e:	bf00      	nop
   bea10:	000c1c0a 	.word	0x000c1c0a
   bea14:	000c1c24 	.word	0x000c1c24
   bea18:	000c1c01 	.word	0x000c1c01
   bea1c:	000c1c04 	.word	0x000c1c04
   bea20:	000c0888 	.word	0x000c0888
   bea24:	000c1e70 	.word	0x000c1e70
   bea28:	000c1e48 	.word	0x000c1e48
   bea2c:	7ff00000 	.word	0x7ff00000
   bea30:	7ca00000 	.word	0x7ca00000
   bea34:	7fefffff 	.word	0x7fefffff
   bea38:	f018 0310 	ands.w	r3, r8, #16
   bea3c:	bf18      	it	ne
   bea3e:	236a      	movne	r3, #106	; 0x6a
   bea40:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bedf0 <_strtod_l+0x970>
   bea44:	9304      	str	r3, [sp, #16]
   bea46:	4650      	mov	r0, sl
   bea48:	4659      	mov	r1, fp
   bea4a:	2300      	movs	r3, #0
   bea4c:	f018 0f01 	tst.w	r8, #1
   bea50:	d004      	beq.n	bea5c <_strtod_l+0x5dc>
   bea52:	e9d9 2300 	ldrd	r2, r3, [r9]
   bea56:	f7ff f899 	bl	bdb8c <__aeabi_dmul>
   bea5a:	2301      	movs	r3, #1
   bea5c:	ea5f 0868 	movs.w	r8, r8, asr #1
   bea60:	f109 0908 	add.w	r9, r9, #8
   bea64:	d1f2      	bne.n	bea4c <_strtod_l+0x5cc>
   bea66:	b10b      	cbz	r3, bea6c <_strtod_l+0x5ec>
   bea68:	4682      	mov	sl, r0
   bea6a:	468b      	mov	fp, r1
   bea6c:	9b04      	ldr	r3, [sp, #16]
   bea6e:	b1c3      	cbz	r3, beaa2 <_strtod_l+0x622>
   bea70:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bea74:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bea78:	2b00      	cmp	r3, #0
   bea7a:	4659      	mov	r1, fp
   bea7c:	dd11      	ble.n	beaa2 <_strtod_l+0x622>
   bea7e:	2b1f      	cmp	r3, #31
   bea80:	f340 8124 	ble.w	beccc <_strtod_l+0x84c>
   bea84:	2b34      	cmp	r3, #52	; 0x34
   bea86:	bfde      	ittt	le
   bea88:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bea8c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bea90:	fa03 f202 	lslle.w	r2, r3, r2
   bea94:	f04f 0a00 	mov.w	sl, #0
   bea98:	bfcc      	ite	gt
   bea9a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bea9e:	ea02 0b01 	andle.w	fp, r2, r1
   beaa2:	2200      	movs	r2, #0
   beaa4:	2300      	movs	r3, #0
   beaa6:	4650      	mov	r0, sl
   beaa8:	4659      	mov	r1, fp
   beaaa:	f7ff fad7 	bl	be05c <__aeabi_dcmpeq>
   beaae:	2800      	cmp	r0, #0
   beab0:	d1a2      	bne.n	be9f8 <_strtod_l+0x578>
   beab2:	9b07      	ldr	r3, [sp, #28]
   beab4:	9300      	str	r3, [sp, #0]
   beab6:	9908      	ldr	r1, [sp, #32]
   beab8:	462b      	mov	r3, r5
   beaba:	463a      	mov	r2, r7
   beabc:	4620      	mov	r0, r4
   beabe:	f001 f80d 	bl	bfadc <__s2b>
   beac2:	9007      	str	r0, [sp, #28]
   beac4:	2800      	cmp	r0, #0
   beac6:	f43f af1f 	beq.w	be908 <_strtod_l+0x488>
   beaca:	9b05      	ldr	r3, [sp, #20]
   beacc:	1b9e      	subs	r6, r3, r6
   beace:	9b06      	ldr	r3, [sp, #24]
   bead0:	2b00      	cmp	r3, #0
   bead2:	bfb4      	ite	lt
   bead4:	4633      	movlt	r3, r6
   bead6:	2300      	movge	r3, #0
   bead8:	930c      	str	r3, [sp, #48]	; 0x30
   beada:	9b06      	ldr	r3, [sp, #24]
   beadc:	2500      	movs	r5, #0
   beade:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   beae2:	9312      	str	r3, [sp, #72]	; 0x48
   beae4:	462e      	mov	r6, r5
   beae6:	9b07      	ldr	r3, [sp, #28]
   beae8:	4620      	mov	r0, r4
   beaea:	6859      	ldr	r1, [r3, #4]
   beaec:	f000 ff4e 	bl	bf98c <_Balloc>
   beaf0:	9005      	str	r0, [sp, #20]
   beaf2:	2800      	cmp	r0, #0
   beaf4:	f43f af0c 	beq.w	be910 <_strtod_l+0x490>
   beaf8:	9b07      	ldr	r3, [sp, #28]
   beafa:	691a      	ldr	r2, [r3, #16]
   beafc:	3202      	adds	r2, #2
   beafe:	f103 010c 	add.w	r1, r3, #12
   beb02:	0092      	lsls	r2, r2, #2
   beb04:	300c      	adds	r0, #12
   beb06:	f7ff fb86 	bl	be216 <memcpy>
   beb0a:	ec4b ab10 	vmov	d0, sl, fp
   beb0e:	aa1a      	add	r2, sp, #104	; 0x68
   beb10:	a919      	add	r1, sp, #100	; 0x64
   beb12:	4620      	mov	r0, r4
   beb14:	f001 fb28 	bl	c0168 <__d2b>
   beb18:	ec4b ab18 	vmov	d8, sl, fp
   beb1c:	9018      	str	r0, [sp, #96]	; 0x60
   beb1e:	2800      	cmp	r0, #0
   beb20:	f43f aef6 	beq.w	be910 <_strtod_l+0x490>
   beb24:	2101      	movs	r1, #1
   beb26:	4620      	mov	r0, r4
   beb28:	f001 f872 	bl	bfc10 <__i2b>
   beb2c:	4606      	mov	r6, r0
   beb2e:	2800      	cmp	r0, #0
   beb30:	f43f aeee 	beq.w	be910 <_strtod_l+0x490>
   beb34:	9b19      	ldr	r3, [sp, #100]	; 0x64
   beb36:	9904      	ldr	r1, [sp, #16]
   beb38:	2b00      	cmp	r3, #0
   beb3a:	bfab      	itete	ge
   beb3c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   beb3e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   beb40:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   beb42:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   beb46:	bfac      	ite	ge
   beb48:	eb03 0902 	addge.w	r9, r3, r2
   beb4c:	1ad7      	sublt	r7, r2, r3
   beb4e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   beb50:	eba3 0801 	sub.w	r8, r3, r1
   beb54:	4490      	add	r8, r2
   beb56:	4ba1      	ldr	r3, [pc, #644]	; (beddc <_strtod_l+0x95c>)
   beb58:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   beb5c:	4598      	cmp	r8, r3
   beb5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   beb62:	f280 80c7 	bge.w	becf4 <_strtod_l+0x874>
   beb66:	eba3 0308 	sub.w	r3, r3, r8
   beb6a:	2b1f      	cmp	r3, #31
   beb6c:	eba2 0203 	sub.w	r2, r2, r3
   beb70:	f04f 0101 	mov.w	r1, #1
   beb74:	f300 80b1 	bgt.w	becda <_strtod_l+0x85a>
   beb78:	fa01 f303 	lsl.w	r3, r1, r3
   beb7c:	930d      	str	r3, [sp, #52]	; 0x34
   beb7e:	2300      	movs	r3, #0
   beb80:	9308      	str	r3, [sp, #32]
   beb82:	eb09 0802 	add.w	r8, r9, r2
   beb86:	9b04      	ldr	r3, [sp, #16]
   beb88:	45c1      	cmp	r9, r8
   beb8a:	4417      	add	r7, r2
   beb8c:	441f      	add	r7, r3
   beb8e:	464b      	mov	r3, r9
   beb90:	bfa8      	it	ge
   beb92:	4643      	movge	r3, r8
   beb94:	42bb      	cmp	r3, r7
   beb96:	bfa8      	it	ge
   beb98:	463b      	movge	r3, r7
   beb9a:	2b00      	cmp	r3, #0
   beb9c:	bfc2      	ittt	gt
   beb9e:	eba8 0803 	subgt.w	r8, r8, r3
   beba2:	1aff      	subgt	r7, r7, r3
   beba4:	eba9 0903 	subgt.w	r9, r9, r3
   beba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bebaa:	2b00      	cmp	r3, #0
   bebac:	dd17      	ble.n	bebde <_strtod_l+0x75e>
   bebae:	4631      	mov	r1, r6
   bebb0:	461a      	mov	r2, r3
   bebb2:	4620      	mov	r0, r4
   bebb4:	f001 f8ec 	bl	bfd90 <__pow5mult>
   bebb8:	4606      	mov	r6, r0
   bebba:	2800      	cmp	r0, #0
   bebbc:	f43f aea8 	beq.w	be910 <_strtod_l+0x490>
   bebc0:	4601      	mov	r1, r0
   bebc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bebc4:	4620      	mov	r0, r4
   bebc6:	f001 f839 	bl	bfc3c <__multiply>
   bebca:	900b      	str	r0, [sp, #44]	; 0x2c
   bebcc:	2800      	cmp	r0, #0
   bebce:	f43f ae9f 	beq.w	be910 <_strtod_l+0x490>
   bebd2:	9918      	ldr	r1, [sp, #96]	; 0x60
   bebd4:	4620      	mov	r0, r4
   bebd6:	f000 ff19 	bl	bfa0c <_Bfree>
   bebda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bebdc:	9318      	str	r3, [sp, #96]	; 0x60
   bebde:	f1b8 0f00 	cmp.w	r8, #0
   bebe2:	f300 808c 	bgt.w	becfe <_strtod_l+0x87e>
   bebe6:	9b06      	ldr	r3, [sp, #24]
   bebe8:	2b00      	cmp	r3, #0
   bebea:	dd08      	ble.n	bebfe <_strtod_l+0x77e>
   bebec:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bebee:	9905      	ldr	r1, [sp, #20]
   bebf0:	4620      	mov	r0, r4
   bebf2:	f001 f8cd 	bl	bfd90 <__pow5mult>
   bebf6:	9005      	str	r0, [sp, #20]
   bebf8:	2800      	cmp	r0, #0
   bebfa:	f43f ae89 	beq.w	be910 <_strtod_l+0x490>
   bebfe:	2f00      	cmp	r7, #0
   bec00:	dd08      	ble.n	bec14 <_strtod_l+0x794>
   bec02:	9905      	ldr	r1, [sp, #20]
   bec04:	463a      	mov	r2, r7
   bec06:	4620      	mov	r0, r4
   bec08:	f001 f91c 	bl	bfe44 <__lshift>
   bec0c:	9005      	str	r0, [sp, #20]
   bec0e:	2800      	cmp	r0, #0
   bec10:	f43f ae7e 	beq.w	be910 <_strtod_l+0x490>
   bec14:	f1b9 0f00 	cmp.w	r9, #0
   bec18:	dd08      	ble.n	bec2c <_strtod_l+0x7ac>
   bec1a:	4631      	mov	r1, r6
   bec1c:	464a      	mov	r2, r9
   bec1e:	4620      	mov	r0, r4
   bec20:	f001 f910 	bl	bfe44 <__lshift>
   bec24:	4606      	mov	r6, r0
   bec26:	2800      	cmp	r0, #0
   bec28:	f43f ae72 	beq.w	be910 <_strtod_l+0x490>
   bec2c:	9a05      	ldr	r2, [sp, #20]
   bec2e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bec30:	4620      	mov	r0, r4
   bec32:	f001 f993 	bl	bff5c <__mdiff>
   bec36:	4605      	mov	r5, r0
   bec38:	2800      	cmp	r0, #0
   bec3a:	f43f ae69 	beq.w	be910 <_strtod_l+0x490>
   bec3e:	68c3      	ldr	r3, [r0, #12]
   bec40:	930b      	str	r3, [sp, #44]	; 0x2c
   bec42:	2300      	movs	r3, #0
   bec44:	60c3      	str	r3, [r0, #12]
   bec46:	4631      	mov	r1, r6
   bec48:	f001 f96c 	bl	bff24 <__mcmp>
   bec4c:	2800      	cmp	r0, #0
   bec4e:	da60      	bge.n	bed12 <_strtod_l+0x892>
   bec50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bec52:	ea53 030a 	orrs.w	r3, r3, sl
   bec56:	f040 8082 	bne.w	bed5e <_strtod_l+0x8de>
   bec5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bec5e:	2b00      	cmp	r3, #0
   bec60:	d17d      	bne.n	bed5e <_strtod_l+0x8de>
   bec62:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bec66:	0d1b      	lsrs	r3, r3, #20
   bec68:	051b      	lsls	r3, r3, #20
   bec6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bec6e:	d976      	bls.n	bed5e <_strtod_l+0x8de>
   bec70:	696b      	ldr	r3, [r5, #20]
   bec72:	b913      	cbnz	r3, bec7a <_strtod_l+0x7fa>
   bec74:	692b      	ldr	r3, [r5, #16]
   bec76:	2b01      	cmp	r3, #1
   bec78:	dd71      	ble.n	bed5e <_strtod_l+0x8de>
   bec7a:	4629      	mov	r1, r5
   bec7c:	2201      	movs	r2, #1
   bec7e:	4620      	mov	r0, r4
   bec80:	f001 f8e0 	bl	bfe44 <__lshift>
   bec84:	4631      	mov	r1, r6
   bec86:	4605      	mov	r5, r0
   bec88:	f001 f94c 	bl	bff24 <__mcmp>
   bec8c:	2800      	cmp	r0, #0
   bec8e:	dd66      	ble.n	bed5e <_strtod_l+0x8de>
   bec90:	9904      	ldr	r1, [sp, #16]
   bec92:	4a53      	ldr	r2, [pc, #332]	; (bede0 <_strtod_l+0x960>)
   bec94:	465b      	mov	r3, fp
   bec96:	2900      	cmp	r1, #0
   bec98:	f000 8081 	beq.w	bed9e <_strtod_l+0x91e>
   bec9c:	ea02 010b 	and.w	r1, r2, fp
   beca0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   beca4:	dc7b      	bgt.n	bed9e <_strtod_l+0x91e>
   beca6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   becaa:	f77f aea9 	ble.w	bea00 <_strtod_l+0x580>
   becae:	4b4d      	ldr	r3, [pc, #308]	; (bede4 <_strtod_l+0x964>)
   becb0:	4650      	mov	r0, sl
   becb2:	4659      	mov	r1, fp
   becb4:	2200      	movs	r2, #0
   becb6:	f7fe ff69 	bl	bdb8c <__aeabi_dmul>
   becba:	460b      	mov	r3, r1
   becbc:	4303      	orrs	r3, r0
   becbe:	bf08      	it	eq
   becc0:	2322      	moveq	r3, #34	; 0x22
   becc2:	4682      	mov	sl, r0
   becc4:	468b      	mov	fp, r1
   becc6:	bf08      	it	eq
   becc8:	6023      	streq	r3, [r4, #0]
   becca:	e62b      	b.n	be924 <_strtod_l+0x4a4>
   beccc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   becd0:	fa02 f303 	lsl.w	r3, r2, r3
   becd4:	ea03 0a0a 	and.w	sl, r3, sl
   becd8:	e6e3      	b.n	beaa2 <_strtod_l+0x622>
   becda:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   becde:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bece2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bece6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   becea:	fa01 f308 	lsl.w	r3, r1, r8
   becee:	9308      	str	r3, [sp, #32]
   becf0:	910d      	str	r1, [sp, #52]	; 0x34
   becf2:	e746      	b.n	beb82 <_strtod_l+0x702>
   becf4:	2300      	movs	r3, #0
   becf6:	9308      	str	r3, [sp, #32]
   becf8:	2301      	movs	r3, #1
   becfa:	930d      	str	r3, [sp, #52]	; 0x34
   becfc:	e741      	b.n	beb82 <_strtod_l+0x702>
   becfe:	9918      	ldr	r1, [sp, #96]	; 0x60
   bed00:	4642      	mov	r2, r8
   bed02:	4620      	mov	r0, r4
   bed04:	f001 f89e 	bl	bfe44 <__lshift>
   bed08:	9018      	str	r0, [sp, #96]	; 0x60
   bed0a:	2800      	cmp	r0, #0
   bed0c:	f47f af6b 	bne.w	bebe6 <_strtod_l+0x766>
   bed10:	e5fe      	b.n	be910 <_strtod_l+0x490>
   bed12:	465f      	mov	r7, fp
   bed14:	d16e      	bne.n	bedf4 <_strtod_l+0x974>
   bed16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bed18:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bed1c:	b342      	cbz	r2, bed70 <_strtod_l+0x8f0>
   bed1e:	4a32      	ldr	r2, [pc, #200]	; (bede8 <_strtod_l+0x968>)
   bed20:	4293      	cmp	r3, r2
   bed22:	d128      	bne.n	bed76 <_strtod_l+0x8f6>
   bed24:	9b04      	ldr	r3, [sp, #16]
   bed26:	4651      	mov	r1, sl
   bed28:	b1eb      	cbz	r3, bed66 <_strtod_l+0x8e6>
   bed2a:	4b2d      	ldr	r3, [pc, #180]	; (bede0 <_strtod_l+0x960>)
   bed2c:	403b      	ands	r3, r7
   bed2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bed32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bed36:	d819      	bhi.n	bed6c <_strtod_l+0x8ec>
   bed38:	0d1b      	lsrs	r3, r3, #20
   bed3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bed3e:	fa02 f303 	lsl.w	r3, r2, r3
   bed42:	4299      	cmp	r1, r3
   bed44:	d117      	bne.n	bed76 <_strtod_l+0x8f6>
   bed46:	4b29      	ldr	r3, [pc, #164]	; (bedec <_strtod_l+0x96c>)
   bed48:	429f      	cmp	r7, r3
   bed4a:	d102      	bne.n	bed52 <_strtod_l+0x8d2>
   bed4c:	3101      	adds	r1, #1
   bed4e:	f43f addf 	beq.w	be910 <_strtod_l+0x490>
   bed52:	4b23      	ldr	r3, [pc, #140]	; (bede0 <_strtod_l+0x960>)
   bed54:	403b      	ands	r3, r7
   bed56:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bed5a:	f04f 0a00 	mov.w	sl, #0
   bed5e:	9b04      	ldr	r3, [sp, #16]
   bed60:	2b00      	cmp	r3, #0
   bed62:	d1a4      	bne.n	becae <_strtod_l+0x82e>
   bed64:	e5de      	b.n	be924 <_strtod_l+0x4a4>
   bed66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bed6a:	e7ea      	b.n	bed42 <_strtod_l+0x8c2>
   bed6c:	4613      	mov	r3, r2
   bed6e:	e7e8      	b.n	bed42 <_strtod_l+0x8c2>
   bed70:	ea53 030a 	orrs.w	r3, r3, sl
   bed74:	d08c      	beq.n	bec90 <_strtod_l+0x810>
   bed76:	9b08      	ldr	r3, [sp, #32]
   bed78:	b1db      	cbz	r3, bedb2 <_strtod_l+0x932>
   bed7a:	423b      	tst	r3, r7
   bed7c:	d0ef      	beq.n	bed5e <_strtod_l+0x8de>
   bed7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bed80:	9a04      	ldr	r2, [sp, #16]
   bed82:	4650      	mov	r0, sl
   bed84:	4659      	mov	r1, fp
   bed86:	b1c3      	cbz	r3, bedba <_strtod_l+0x93a>
   bed88:	f7ff fb5c 	bl	be444 <sulp>
   bed8c:	4602      	mov	r2, r0
   bed8e:	460b      	mov	r3, r1
   bed90:	ec51 0b18 	vmov	r0, r1, d8
   bed94:	f7fe fd44 	bl	bd820 <__adddf3>
   bed98:	4682      	mov	sl, r0
   bed9a:	468b      	mov	fp, r1
   bed9c:	e7df      	b.n	bed5e <_strtod_l+0x8de>
   bed9e:	4013      	ands	r3, r2
   beda0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   beda4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   beda8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bedac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bedb0:	e7d5      	b.n	bed5e <_strtod_l+0x8de>
   bedb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bedb4:	ea13 0f0a 	tst.w	r3, sl
   bedb8:	e7e0      	b.n	bed7c <_strtod_l+0x8fc>
   bedba:	f7ff fb43 	bl	be444 <sulp>
   bedbe:	4602      	mov	r2, r0
   bedc0:	460b      	mov	r3, r1
   bedc2:	ec51 0b18 	vmov	r0, r1, d8
   bedc6:	f7fe fd29 	bl	bd81c <__aeabi_dsub>
   bedca:	2200      	movs	r2, #0
   bedcc:	2300      	movs	r3, #0
   bedce:	4682      	mov	sl, r0
   bedd0:	468b      	mov	fp, r1
   bedd2:	f7ff f943 	bl	be05c <__aeabi_dcmpeq>
   bedd6:	2800      	cmp	r0, #0
   bedd8:	d0c1      	beq.n	bed5e <_strtod_l+0x8de>
   bedda:	e611      	b.n	bea00 <_strtod_l+0x580>
   beddc:	fffffc02 	.word	0xfffffc02
   bede0:	7ff00000 	.word	0x7ff00000
   bede4:	39500000 	.word	0x39500000
   bede8:	000fffff 	.word	0x000fffff
   bedec:	7fefffff 	.word	0x7fefffff
   bedf0:	000c1c38 	.word	0x000c1c38
   bedf4:	4631      	mov	r1, r6
   bedf6:	4628      	mov	r0, r5
   bedf8:	f001 fa12 	bl	c0220 <__ratio>
   bedfc:	ec59 8b10 	vmov	r8, r9, d0
   bee00:	ee10 0a10 	vmov	r0, s0
   bee04:	2200      	movs	r2, #0
   bee06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bee0a:	4649      	mov	r1, r9
   bee0c:	f7ff f93a 	bl	be084 <__aeabi_dcmple>
   bee10:	2800      	cmp	r0, #0
   bee12:	d07a      	beq.n	bef0a <_strtod_l+0xa8a>
   bee14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bee16:	2b00      	cmp	r3, #0
   bee18:	d04a      	beq.n	beeb0 <_strtod_l+0xa30>
   bee1a:	4b95      	ldr	r3, [pc, #596]	; (bf070 <_strtod_l+0xbf0>)
   bee1c:	2200      	movs	r2, #0
   bee1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bee22:	f8df 924c 	ldr.w	r9, [pc, #588]	; bf070 <_strtod_l+0xbf0>
   bee26:	f04f 0800 	mov.w	r8, #0
   bee2a:	4b92      	ldr	r3, [pc, #584]	; (bf074 <_strtod_l+0xbf4>)
   bee2c:	403b      	ands	r3, r7
   bee2e:	930d      	str	r3, [sp, #52]	; 0x34
   bee30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bee32:	4b91      	ldr	r3, [pc, #580]	; (bf078 <_strtod_l+0xbf8>)
   bee34:	429a      	cmp	r2, r3
   bee36:	f040 80b0 	bne.w	bef9a <_strtod_l+0xb1a>
   bee3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bee3e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bee42:	ec4b ab10 	vmov	d0, sl, fp
   bee46:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bee4a:	f001 f911 	bl	c0070 <__ulp>
   bee4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bee52:	ec53 2b10 	vmov	r2, r3, d0
   bee56:	f7fe fe99 	bl	bdb8c <__aeabi_dmul>
   bee5a:	4652      	mov	r2, sl
   bee5c:	465b      	mov	r3, fp
   bee5e:	f7fe fcdf 	bl	bd820 <__adddf3>
   bee62:	460b      	mov	r3, r1
   bee64:	4983      	ldr	r1, [pc, #524]	; (bf074 <_strtod_l+0xbf4>)
   bee66:	4a85      	ldr	r2, [pc, #532]	; (bf07c <_strtod_l+0xbfc>)
   bee68:	4019      	ands	r1, r3
   bee6a:	4291      	cmp	r1, r2
   bee6c:	4682      	mov	sl, r0
   bee6e:	d960      	bls.n	bef32 <_strtod_l+0xab2>
   bee70:	ee18 3a90 	vmov	r3, s17
   bee74:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bee78:	4293      	cmp	r3, r2
   bee7a:	d104      	bne.n	bee86 <_strtod_l+0xa06>
   bee7c:	ee18 3a10 	vmov	r3, s16
   bee80:	3301      	adds	r3, #1
   bee82:	f43f ad45 	beq.w	be910 <_strtod_l+0x490>
   bee86:	f8df b200 	ldr.w	fp, [pc, #512]	; bf088 <_strtod_l+0xc08>
   bee8a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bee8e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bee90:	4620      	mov	r0, r4
   bee92:	f000 fdbb 	bl	bfa0c <_Bfree>
   bee96:	9905      	ldr	r1, [sp, #20]
   bee98:	4620      	mov	r0, r4
   bee9a:	f000 fdb7 	bl	bfa0c <_Bfree>
   bee9e:	4631      	mov	r1, r6
   beea0:	4620      	mov	r0, r4
   beea2:	f000 fdb3 	bl	bfa0c <_Bfree>
   beea6:	4629      	mov	r1, r5
   beea8:	4620      	mov	r0, r4
   beeaa:	f000 fdaf 	bl	bfa0c <_Bfree>
   beeae:	e61a      	b.n	beae6 <_strtod_l+0x666>
   beeb0:	f1ba 0f00 	cmp.w	sl, #0
   beeb4:	d11b      	bne.n	beeee <_strtod_l+0xa6e>
   beeb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   beeba:	b9f3      	cbnz	r3, beefa <_strtod_l+0xa7a>
   beebc:	4b6c      	ldr	r3, [pc, #432]	; (bf070 <_strtod_l+0xbf0>)
   beebe:	2200      	movs	r2, #0
   beec0:	4640      	mov	r0, r8
   beec2:	4649      	mov	r1, r9
   beec4:	f7ff f8d4 	bl	be070 <__aeabi_dcmplt>
   beec8:	b9d0      	cbnz	r0, bef00 <_strtod_l+0xa80>
   beeca:	4640      	mov	r0, r8
   beecc:	4649      	mov	r1, r9
   beece:	4b6c      	ldr	r3, [pc, #432]	; (bf080 <_strtod_l+0xc00>)
   beed0:	2200      	movs	r2, #0
   beed2:	f7fe fe5b 	bl	bdb8c <__aeabi_dmul>
   beed6:	4680      	mov	r8, r0
   beed8:	4689      	mov	r9, r1
   beeda:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   beede:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   beee2:	9315      	str	r3, [sp, #84]	; 0x54
   beee4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   beee8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   beeec:	e79d      	b.n	bee2a <_strtod_l+0x9aa>
   beeee:	f1ba 0f01 	cmp.w	sl, #1
   beef2:	d102      	bne.n	beefa <_strtod_l+0xa7a>
   beef4:	2f00      	cmp	r7, #0
   beef6:	f43f ad83 	beq.w	bea00 <_strtod_l+0x580>
   beefa:	4b62      	ldr	r3, [pc, #392]	; (bf084 <_strtod_l+0xc04>)
   beefc:	2200      	movs	r2, #0
   beefe:	e78e      	b.n	bee1e <_strtod_l+0x99e>
   bef00:	f8df 917c 	ldr.w	r9, [pc, #380]	; bf080 <_strtod_l+0xc00>
   bef04:	f04f 0800 	mov.w	r8, #0
   bef08:	e7e7      	b.n	beeda <_strtod_l+0xa5a>
   bef0a:	4b5d      	ldr	r3, [pc, #372]	; (bf080 <_strtod_l+0xc00>)
   bef0c:	4640      	mov	r0, r8
   bef0e:	4649      	mov	r1, r9
   bef10:	2200      	movs	r2, #0
   bef12:	f7fe fe3b 	bl	bdb8c <__aeabi_dmul>
   bef16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bef18:	4680      	mov	r8, r0
   bef1a:	4689      	mov	r9, r1
   bef1c:	b933      	cbnz	r3, bef2c <_strtod_l+0xaac>
   bef1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bef22:	900e      	str	r0, [sp, #56]	; 0x38
   bef24:	930f      	str	r3, [sp, #60]	; 0x3c
   bef26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bef2a:	e7dd      	b.n	beee8 <_strtod_l+0xa68>
   bef2c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bef30:	e7f9      	b.n	bef26 <_strtod_l+0xaa6>
   bef32:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bef36:	9b04      	ldr	r3, [sp, #16]
   bef38:	2b00      	cmp	r3, #0
   bef3a:	d1a8      	bne.n	bee8e <_strtod_l+0xa0e>
   bef3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bef40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bef42:	0d1b      	lsrs	r3, r3, #20
   bef44:	051b      	lsls	r3, r3, #20
   bef46:	429a      	cmp	r2, r3
   bef48:	d1a1      	bne.n	bee8e <_strtod_l+0xa0e>
   bef4a:	4640      	mov	r0, r8
   bef4c:	4649      	mov	r1, r9
   bef4e:	f001 fa05 	bl	c035c <__aeabi_d2lz>
   bef52:	f7fe fded 	bl	bdb30 <__aeabi_l2d>
   bef56:	4602      	mov	r2, r0
   bef58:	460b      	mov	r3, r1
   bef5a:	4640      	mov	r0, r8
   bef5c:	4649      	mov	r1, r9
   bef5e:	f7fe fc5d 	bl	bd81c <__aeabi_dsub>
   bef62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bef64:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bef68:	ea43 030a 	orr.w	r3, r3, sl
   bef6c:	4313      	orrs	r3, r2
   bef6e:	4680      	mov	r8, r0
   bef70:	4689      	mov	r9, r1
   bef72:	d055      	beq.n	bf020 <_strtod_l+0xba0>
   bef74:	a336      	add	r3, pc, #216	; (adr r3, bf050 <_strtod_l+0xbd0>)
   bef76:	e9d3 2300 	ldrd	r2, r3, [r3]
   bef7a:	f7ff f879 	bl	be070 <__aeabi_dcmplt>
   bef7e:	2800      	cmp	r0, #0
   bef80:	f47f acd0 	bne.w	be924 <_strtod_l+0x4a4>
   bef84:	a334      	add	r3, pc, #208	; (adr r3, bf058 <_strtod_l+0xbd8>)
   bef86:	e9d3 2300 	ldrd	r2, r3, [r3]
   bef8a:	4640      	mov	r0, r8
   bef8c:	4649      	mov	r1, r9
   bef8e:	f7ff f88d 	bl	be0ac <__aeabi_dcmpgt>
   bef92:	2800      	cmp	r0, #0
   bef94:	f43f af7b 	beq.w	bee8e <_strtod_l+0xa0e>
   bef98:	e4c4      	b.n	be924 <_strtod_l+0x4a4>
   bef9a:	9b04      	ldr	r3, [sp, #16]
   bef9c:	b333      	cbz	r3, befec <_strtod_l+0xb6c>
   bef9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   befa0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   befa4:	d822      	bhi.n	befec <_strtod_l+0xb6c>
   befa6:	a32e      	add	r3, pc, #184	; (adr r3, bf060 <_strtod_l+0xbe0>)
   befa8:	e9d3 2300 	ldrd	r2, r3, [r3]
   befac:	4640      	mov	r0, r8
   befae:	4649      	mov	r1, r9
   befb0:	f7ff f868 	bl	be084 <__aeabi_dcmple>
   befb4:	b1a0      	cbz	r0, befe0 <_strtod_l+0xb60>
   befb6:	4649      	mov	r1, r9
   befb8:	4640      	mov	r0, r8
   befba:	f7ff f881 	bl	be0c0 <__aeabi_d2uiz>
   befbe:	2801      	cmp	r0, #1
   befc0:	bf38      	it	cc
   befc2:	2001      	movcc	r0, #1
   befc4:	f7fe fd68 	bl	bda98 <__aeabi_ui2d>
   befc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   befca:	4680      	mov	r8, r0
   befcc:	4689      	mov	r9, r1
   befce:	bb23      	cbnz	r3, bf01a <_strtod_l+0xb9a>
   befd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   befd4:	9010      	str	r0, [sp, #64]	; 0x40
   befd6:	9311      	str	r3, [sp, #68]	; 0x44
   befd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   befdc:	e9cd 2308 	strd	r2, r3, [sp, #32]
   befe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   befe2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   befe4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   befe8:	1a9b      	subs	r3, r3, r2
   befea:	9309      	str	r3, [sp, #36]	; 0x24
   befec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   beff0:	eeb0 0a48 	vmov.f32	s0, s16
   beff4:	eef0 0a68 	vmov.f32	s1, s17
   beff8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   beffc:	f001 f838 	bl	c0070 <__ulp>
   bf000:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bf004:	ec53 2b10 	vmov	r2, r3, d0
   bf008:	f7fe fdc0 	bl	bdb8c <__aeabi_dmul>
   bf00c:	ec53 2b18 	vmov	r2, r3, d8
   bf010:	f7fe fc06 	bl	bd820 <__adddf3>
   bf014:	4682      	mov	sl, r0
   bf016:	468b      	mov	fp, r1
   bf018:	e78d      	b.n	bef36 <_strtod_l+0xab6>
   bf01a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bf01e:	e7db      	b.n	befd8 <_strtod_l+0xb58>
   bf020:	a311      	add	r3, pc, #68	; (adr r3, bf068 <_strtod_l+0xbe8>)
   bf022:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf026:	f7ff f823 	bl	be070 <__aeabi_dcmplt>
   bf02a:	e7b2      	b.n	bef92 <_strtod_l+0xb12>
   bf02c:	2300      	movs	r3, #0
   bf02e:	930a      	str	r3, [sp, #40]	; 0x28
   bf030:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bf032:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bf034:	6013      	str	r3, [r2, #0]
   bf036:	f7ff ba6b 	b.w	be510 <_strtod_l+0x90>
   bf03a:	2a65      	cmp	r2, #101	; 0x65
   bf03c:	f43f ab5f 	beq.w	be6fe <_strtod_l+0x27e>
   bf040:	2a45      	cmp	r2, #69	; 0x45
   bf042:	f43f ab5c 	beq.w	be6fe <_strtod_l+0x27e>
   bf046:	2301      	movs	r3, #1
   bf048:	f7ff bb94 	b.w	be774 <_strtod_l+0x2f4>
   bf04c:	f3af 8000 	nop.w
   bf050:	94a03595 	.word	0x94a03595
   bf054:	3fdfffff 	.word	0x3fdfffff
   bf058:	35afe535 	.word	0x35afe535
   bf05c:	3fe00000 	.word	0x3fe00000
   bf060:	ffc00000 	.word	0xffc00000
   bf064:	41dfffff 	.word	0x41dfffff
   bf068:	94a03595 	.word	0x94a03595
   bf06c:	3fcfffff 	.word	0x3fcfffff
   bf070:	3ff00000 	.word	0x3ff00000
   bf074:	7ff00000 	.word	0x7ff00000
   bf078:	7fe00000 	.word	0x7fe00000
   bf07c:	7c9fffff 	.word	0x7c9fffff
   bf080:	3fe00000 	.word	0x3fe00000
   bf084:	bff00000 	.word	0xbff00000
   bf088:	7fefffff 	.word	0x7fefffff

000bf08c <strtod>:
   bf08c:	460a      	mov	r2, r1
   bf08e:	4601      	mov	r1, r0
   bf090:	4802      	ldr	r0, [pc, #8]	; (bf09c <strtod+0x10>)
   bf092:	4b03      	ldr	r3, [pc, #12]	; (bf0a0 <strtod+0x14>)
   bf094:	6800      	ldr	r0, [r0, #0]
   bf096:	f7ff b9f3 	b.w	be480 <_strtod_l>
   bf09a:	bf00      	nop
   bf09c:	2003da90 	.word	0x2003da90
   bf0a0:	2003dafc 	.word	0x2003dafc

000bf0a4 <_strtol_l.constprop.0>:
   bf0a4:	2b01      	cmp	r3, #1
   bf0a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bf0aa:	d001      	beq.n	bf0b0 <_strtol_l.constprop.0+0xc>
   bf0ac:	2b24      	cmp	r3, #36	; 0x24
   bf0ae:	d906      	bls.n	bf0be <_strtol_l.constprop.0+0x1a>
   bf0b0:	f7fa fbaa 	bl	b9808 <__errno>
   bf0b4:	2316      	movs	r3, #22
   bf0b6:	6003      	str	r3, [r0, #0]
   bf0b8:	2000      	movs	r0, #0
   bf0ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bf0be:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bf1a4 <_strtol_l.constprop.0+0x100>
   bf0c2:	460d      	mov	r5, r1
   bf0c4:	462e      	mov	r6, r5
   bf0c6:	f815 4b01 	ldrb.w	r4, [r5], #1
   bf0ca:	f814 700c 	ldrb.w	r7, [r4, ip]
   bf0ce:	f017 0708 	ands.w	r7, r7, #8
   bf0d2:	d1f7      	bne.n	bf0c4 <_strtol_l.constprop.0+0x20>
   bf0d4:	2c2d      	cmp	r4, #45	; 0x2d
   bf0d6:	d132      	bne.n	bf13e <_strtol_l.constprop.0+0x9a>
   bf0d8:	782c      	ldrb	r4, [r5, #0]
   bf0da:	2701      	movs	r7, #1
   bf0dc:	1cb5      	adds	r5, r6, #2
   bf0de:	2b00      	cmp	r3, #0
   bf0e0:	d05b      	beq.n	bf19a <_strtol_l.constprop.0+0xf6>
   bf0e2:	2b10      	cmp	r3, #16
   bf0e4:	d109      	bne.n	bf0fa <_strtol_l.constprop.0+0x56>
   bf0e6:	2c30      	cmp	r4, #48	; 0x30
   bf0e8:	d107      	bne.n	bf0fa <_strtol_l.constprop.0+0x56>
   bf0ea:	782c      	ldrb	r4, [r5, #0]
   bf0ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bf0f0:	2c58      	cmp	r4, #88	; 0x58
   bf0f2:	d14d      	bne.n	bf190 <_strtol_l.constprop.0+0xec>
   bf0f4:	786c      	ldrb	r4, [r5, #1]
   bf0f6:	2310      	movs	r3, #16
   bf0f8:	3502      	adds	r5, #2
   bf0fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bf0fe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bf102:	f04f 0c00 	mov.w	ip, #0
   bf106:	fbb8 f9f3 	udiv	r9, r8, r3
   bf10a:	4666      	mov	r6, ip
   bf10c:	fb03 8a19 	mls	sl, r3, r9, r8
   bf110:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bf114:	f1be 0f09 	cmp.w	lr, #9
   bf118:	d816      	bhi.n	bf148 <_strtol_l.constprop.0+0xa4>
   bf11a:	4674      	mov	r4, lr
   bf11c:	42a3      	cmp	r3, r4
   bf11e:	dd24      	ble.n	bf16a <_strtol_l.constprop.0+0xc6>
   bf120:	f1bc 0f00 	cmp.w	ip, #0
   bf124:	db1e      	blt.n	bf164 <_strtol_l.constprop.0+0xc0>
   bf126:	45b1      	cmp	r9, r6
   bf128:	d31c      	bcc.n	bf164 <_strtol_l.constprop.0+0xc0>
   bf12a:	d101      	bne.n	bf130 <_strtol_l.constprop.0+0x8c>
   bf12c:	45a2      	cmp	sl, r4
   bf12e:	db19      	blt.n	bf164 <_strtol_l.constprop.0+0xc0>
   bf130:	fb06 4603 	mla	r6, r6, r3, r4
   bf134:	f04f 0c01 	mov.w	ip, #1
   bf138:	f815 4b01 	ldrb.w	r4, [r5], #1
   bf13c:	e7e8      	b.n	bf110 <_strtol_l.constprop.0+0x6c>
   bf13e:	2c2b      	cmp	r4, #43	; 0x2b
   bf140:	bf04      	itt	eq
   bf142:	782c      	ldrbeq	r4, [r5, #0]
   bf144:	1cb5      	addeq	r5, r6, #2
   bf146:	e7ca      	b.n	bf0de <_strtol_l.constprop.0+0x3a>
   bf148:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bf14c:	f1be 0f19 	cmp.w	lr, #25
   bf150:	d801      	bhi.n	bf156 <_strtol_l.constprop.0+0xb2>
   bf152:	3c37      	subs	r4, #55	; 0x37
   bf154:	e7e2      	b.n	bf11c <_strtol_l.constprop.0+0x78>
   bf156:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bf15a:	f1be 0f19 	cmp.w	lr, #25
   bf15e:	d804      	bhi.n	bf16a <_strtol_l.constprop.0+0xc6>
   bf160:	3c57      	subs	r4, #87	; 0x57
   bf162:	e7db      	b.n	bf11c <_strtol_l.constprop.0+0x78>
   bf164:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bf168:	e7e6      	b.n	bf138 <_strtol_l.constprop.0+0x94>
   bf16a:	f1bc 0f00 	cmp.w	ip, #0
   bf16e:	da05      	bge.n	bf17c <_strtol_l.constprop.0+0xd8>
   bf170:	2322      	movs	r3, #34	; 0x22
   bf172:	6003      	str	r3, [r0, #0]
   bf174:	4646      	mov	r6, r8
   bf176:	b942      	cbnz	r2, bf18a <_strtol_l.constprop.0+0xe6>
   bf178:	4630      	mov	r0, r6
   bf17a:	e79e      	b.n	bf0ba <_strtol_l.constprop.0+0x16>
   bf17c:	b107      	cbz	r7, bf180 <_strtol_l.constprop.0+0xdc>
   bf17e:	4276      	negs	r6, r6
   bf180:	2a00      	cmp	r2, #0
   bf182:	d0f9      	beq.n	bf178 <_strtol_l.constprop.0+0xd4>
   bf184:	f1bc 0f00 	cmp.w	ip, #0
   bf188:	d000      	beq.n	bf18c <_strtol_l.constprop.0+0xe8>
   bf18a:	1e69      	subs	r1, r5, #1
   bf18c:	6011      	str	r1, [r2, #0]
   bf18e:	e7f3      	b.n	bf178 <_strtol_l.constprop.0+0xd4>
   bf190:	2430      	movs	r4, #48	; 0x30
   bf192:	2b00      	cmp	r3, #0
   bf194:	d1b1      	bne.n	bf0fa <_strtol_l.constprop.0+0x56>
   bf196:	2308      	movs	r3, #8
   bf198:	e7af      	b.n	bf0fa <_strtol_l.constprop.0+0x56>
   bf19a:	2c30      	cmp	r4, #48	; 0x30
   bf19c:	d0a5      	beq.n	bf0ea <_strtol_l.constprop.0+0x46>
   bf19e:	230a      	movs	r3, #10
   bf1a0:	e7ab      	b.n	bf0fa <_strtol_l.constprop.0+0x56>
   bf1a2:	bf00      	nop
   bf1a4:	000c1c61 	.word	0x000c1c61

000bf1a8 <strtol>:
   bf1a8:	4613      	mov	r3, r2
   bf1aa:	460a      	mov	r2, r1
   bf1ac:	4601      	mov	r1, r0
   bf1ae:	4802      	ldr	r0, [pc, #8]	; (bf1b8 <strtol+0x10>)
   bf1b0:	6800      	ldr	r0, [r0, #0]
   bf1b2:	f7ff bf77 	b.w	bf0a4 <_strtol_l.constprop.0>
   bf1b6:	bf00      	nop
   bf1b8:	2003da90 	.word	0x2003da90

000bf1bc <__register_exitproc>:
   bf1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bf1c0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bf27c <__register_exitproc+0xc0>
   bf1c4:	4606      	mov	r6, r0
   bf1c6:	f8d8 0000 	ldr.w	r0, [r8]
   bf1ca:	461f      	mov	r7, r3
   bf1cc:	460d      	mov	r5, r1
   bf1ce:	4691      	mov	r9, r2
   bf1d0:	f000 fbc6 	bl	bf960 <__retarget_lock_acquire_recursive>
   bf1d4:	4b25      	ldr	r3, [pc, #148]	; (bf26c <__register_exitproc+0xb0>)
   bf1d6:	681c      	ldr	r4, [r3, #0]
   bf1d8:	b934      	cbnz	r4, bf1e8 <__register_exitproc+0x2c>
   bf1da:	4c25      	ldr	r4, [pc, #148]	; (bf270 <__register_exitproc+0xb4>)
   bf1dc:	601c      	str	r4, [r3, #0]
   bf1de:	4b25      	ldr	r3, [pc, #148]	; (bf274 <__register_exitproc+0xb8>)
   bf1e0:	b113      	cbz	r3, bf1e8 <__register_exitproc+0x2c>
   bf1e2:	681b      	ldr	r3, [r3, #0]
   bf1e4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bf1e8:	6863      	ldr	r3, [r4, #4]
   bf1ea:	2b1f      	cmp	r3, #31
   bf1ec:	dd07      	ble.n	bf1fe <__register_exitproc+0x42>
   bf1ee:	f8d8 0000 	ldr.w	r0, [r8]
   bf1f2:	f000 fbb7 	bl	bf964 <__retarget_lock_release_recursive>
   bf1f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bf1fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bf1fe:	b34e      	cbz	r6, bf254 <__register_exitproc+0x98>
   bf200:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bf204:	b988      	cbnz	r0, bf22a <__register_exitproc+0x6e>
   bf206:	4b1c      	ldr	r3, [pc, #112]	; (bf278 <__register_exitproc+0xbc>)
   bf208:	b923      	cbnz	r3, bf214 <__register_exitproc+0x58>
   bf20a:	f8d8 0000 	ldr.w	r0, [r8]
   bf20e:	f000 fba8 	bl	bf962 <__retarget_lock_release>
   bf212:	e7f0      	b.n	bf1f6 <__register_exitproc+0x3a>
   bf214:	f44f 7084 	mov.w	r0, #264	; 0x108
   bf218:	f7fa faae 	bl	b9778 <malloc>
   bf21c:	2800      	cmp	r0, #0
   bf21e:	d0f4      	beq.n	bf20a <__register_exitproc+0x4e>
   bf220:	2300      	movs	r3, #0
   bf222:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bf226:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bf22a:	6863      	ldr	r3, [r4, #4]
   bf22c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bf230:	2201      	movs	r2, #1
   bf232:	409a      	lsls	r2, r3
   bf234:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bf238:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bf23c:	4313      	orrs	r3, r2
   bf23e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bf242:	2e02      	cmp	r6, #2
   bf244:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bf248:	bf02      	ittt	eq
   bf24a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bf24e:	4313      	orreq	r3, r2
   bf250:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bf254:	6863      	ldr	r3, [r4, #4]
   bf256:	f8d8 0000 	ldr.w	r0, [r8]
   bf25a:	1c5a      	adds	r2, r3, #1
   bf25c:	3302      	adds	r3, #2
   bf25e:	6062      	str	r2, [r4, #4]
   bf260:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bf264:	f000 fb7e 	bl	bf964 <__retarget_lock_release_recursive>
   bf268:	2000      	movs	r0, #0
   bf26a:	e7c6      	b.n	bf1fa <__register_exitproc+0x3e>
   bf26c:	2003e7e8 	.word	0x2003e7e8
   bf270:	2003e75c 	.word	0x2003e75c
   bf274:	00000000 	.word	0x00000000
   bf278:	000b9779 	.word	0x000b9779
   bf27c:	2003daf4 	.word	0x2003daf4

000bf280 <rshift>:
   bf280:	6903      	ldr	r3, [r0, #16]
   bf282:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bf286:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bf28a:	ea4f 1261 	mov.w	r2, r1, asr #5
   bf28e:	f100 0414 	add.w	r4, r0, #20
   bf292:	dd45      	ble.n	bf320 <rshift+0xa0>
   bf294:	f011 011f 	ands.w	r1, r1, #31
   bf298:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bf29c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bf2a0:	d10c      	bne.n	bf2bc <rshift+0x3c>
   bf2a2:	f100 0710 	add.w	r7, r0, #16
   bf2a6:	4629      	mov	r1, r5
   bf2a8:	42b1      	cmp	r1, r6
   bf2aa:	d334      	bcc.n	bf316 <rshift+0x96>
   bf2ac:	1a9b      	subs	r3, r3, r2
   bf2ae:	009b      	lsls	r3, r3, #2
   bf2b0:	1eea      	subs	r2, r5, #3
   bf2b2:	4296      	cmp	r6, r2
   bf2b4:	bf38      	it	cc
   bf2b6:	2300      	movcc	r3, #0
   bf2b8:	4423      	add	r3, r4
   bf2ba:	e015      	b.n	bf2e8 <rshift+0x68>
   bf2bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bf2c0:	f1c1 0820 	rsb	r8, r1, #32
   bf2c4:	40cf      	lsrs	r7, r1
   bf2c6:	f105 0e04 	add.w	lr, r5, #4
   bf2ca:	46a1      	mov	r9, r4
   bf2cc:	4576      	cmp	r6, lr
   bf2ce:	46f4      	mov	ip, lr
   bf2d0:	d815      	bhi.n	bf2fe <rshift+0x7e>
   bf2d2:	1a9a      	subs	r2, r3, r2
   bf2d4:	0092      	lsls	r2, r2, #2
   bf2d6:	3a04      	subs	r2, #4
   bf2d8:	3501      	adds	r5, #1
   bf2da:	42ae      	cmp	r6, r5
   bf2dc:	bf38      	it	cc
   bf2de:	2200      	movcc	r2, #0
   bf2e0:	18a3      	adds	r3, r4, r2
   bf2e2:	50a7      	str	r7, [r4, r2]
   bf2e4:	b107      	cbz	r7, bf2e8 <rshift+0x68>
   bf2e6:	3304      	adds	r3, #4
   bf2e8:	1b1a      	subs	r2, r3, r4
   bf2ea:	42a3      	cmp	r3, r4
   bf2ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bf2f0:	bf08      	it	eq
   bf2f2:	2300      	moveq	r3, #0
   bf2f4:	6102      	str	r2, [r0, #16]
   bf2f6:	bf08      	it	eq
   bf2f8:	6143      	streq	r3, [r0, #20]
   bf2fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bf2fe:	f8dc c000 	ldr.w	ip, [ip]
   bf302:	fa0c fc08 	lsl.w	ip, ip, r8
   bf306:	ea4c 0707 	orr.w	r7, ip, r7
   bf30a:	f849 7b04 	str.w	r7, [r9], #4
   bf30e:	f85e 7b04 	ldr.w	r7, [lr], #4
   bf312:	40cf      	lsrs	r7, r1
   bf314:	e7da      	b.n	bf2cc <rshift+0x4c>
   bf316:	f851 cb04 	ldr.w	ip, [r1], #4
   bf31a:	f847 cf04 	str.w	ip, [r7, #4]!
   bf31e:	e7c3      	b.n	bf2a8 <rshift+0x28>
   bf320:	4623      	mov	r3, r4
   bf322:	e7e1      	b.n	bf2e8 <rshift+0x68>

000bf324 <__hexdig_fun>:
   bf324:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bf328:	2b09      	cmp	r3, #9
   bf32a:	d802      	bhi.n	bf332 <__hexdig_fun+0xe>
   bf32c:	3820      	subs	r0, #32
   bf32e:	b2c0      	uxtb	r0, r0
   bf330:	4770      	bx	lr
   bf332:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bf336:	2b05      	cmp	r3, #5
   bf338:	d801      	bhi.n	bf33e <__hexdig_fun+0x1a>
   bf33a:	3847      	subs	r0, #71	; 0x47
   bf33c:	e7f7      	b.n	bf32e <__hexdig_fun+0xa>
   bf33e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bf342:	2b05      	cmp	r3, #5
   bf344:	d801      	bhi.n	bf34a <__hexdig_fun+0x26>
   bf346:	3827      	subs	r0, #39	; 0x27
   bf348:	e7f1      	b.n	bf32e <__hexdig_fun+0xa>
   bf34a:	2000      	movs	r0, #0
   bf34c:	4770      	bx	lr
	...

000bf350 <__gethex>:
   bf350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf354:	ed2d 8b02 	vpush	{d8}
   bf358:	b089      	sub	sp, #36	; 0x24
   bf35a:	ee08 0a10 	vmov	s16, r0
   bf35e:	9304      	str	r3, [sp, #16]
   bf360:	4bb4      	ldr	r3, [pc, #720]	; (bf634 <__gethex+0x2e4>)
   bf362:	681b      	ldr	r3, [r3, #0]
   bf364:	9301      	str	r3, [sp, #4]
   bf366:	4618      	mov	r0, r3
   bf368:	468b      	mov	fp, r1
   bf36a:	4690      	mov	r8, r2
   bf36c:	f7ff f82f 	bl	be3ce <strlen>
   bf370:	9b01      	ldr	r3, [sp, #4]
   bf372:	f8db 2000 	ldr.w	r2, [fp]
   bf376:	4403      	add	r3, r0
   bf378:	4682      	mov	sl, r0
   bf37a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bf37e:	9305      	str	r3, [sp, #20]
   bf380:	1c93      	adds	r3, r2, #2
   bf382:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bf386:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bf38a:	32fe      	adds	r2, #254	; 0xfe
   bf38c:	18d1      	adds	r1, r2, r3
   bf38e:	461f      	mov	r7, r3
   bf390:	f813 0b01 	ldrb.w	r0, [r3], #1
   bf394:	9100      	str	r1, [sp, #0]
   bf396:	2830      	cmp	r0, #48	; 0x30
   bf398:	d0f8      	beq.n	bf38c <__gethex+0x3c>
   bf39a:	f7ff ffc3 	bl	bf324 <__hexdig_fun>
   bf39e:	4604      	mov	r4, r0
   bf3a0:	2800      	cmp	r0, #0
   bf3a2:	d13a      	bne.n	bf41a <__gethex+0xca>
   bf3a4:	9901      	ldr	r1, [sp, #4]
   bf3a6:	4652      	mov	r2, sl
   bf3a8:	4638      	mov	r0, r7
   bf3aa:	f7ff f818 	bl	be3de <strncmp>
   bf3ae:	4605      	mov	r5, r0
   bf3b0:	2800      	cmp	r0, #0
   bf3b2:	d168      	bne.n	bf486 <__gethex+0x136>
   bf3b4:	f817 000a 	ldrb.w	r0, [r7, sl]
   bf3b8:	eb07 060a 	add.w	r6, r7, sl
   bf3bc:	f7ff ffb2 	bl	bf324 <__hexdig_fun>
   bf3c0:	2800      	cmp	r0, #0
   bf3c2:	d062      	beq.n	bf48a <__gethex+0x13a>
   bf3c4:	4633      	mov	r3, r6
   bf3c6:	7818      	ldrb	r0, [r3, #0]
   bf3c8:	2830      	cmp	r0, #48	; 0x30
   bf3ca:	461f      	mov	r7, r3
   bf3cc:	f103 0301 	add.w	r3, r3, #1
   bf3d0:	d0f9      	beq.n	bf3c6 <__gethex+0x76>
   bf3d2:	f7ff ffa7 	bl	bf324 <__hexdig_fun>
   bf3d6:	2301      	movs	r3, #1
   bf3d8:	fab0 f480 	clz	r4, r0
   bf3dc:	0964      	lsrs	r4, r4, #5
   bf3de:	4635      	mov	r5, r6
   bf3e0:	9300      	str	r3, [sp, #0]
   bf3e2:	463a      	mov	r2, r7
   bf3e4:	4616      	mov	r6, r2
   bf3e6:	3201      	adds	r2, #1
   bf3e8:	7830      	ldrb	r0, [r6, #0]
   bf3ea:	f7ff ff9b 	bl	bf324 <__hexdig_fun>
   bf3ee:	2800      	cmp	r0, #0
   bf3f0:	d1f8      	bne.n	bf3e4 <__gethex+0x94>
   bf3f2:	9901      	ldr	r1, [sp, #4]
   bf3f4:	4652      	mov	r2, sl
   bf3f6:	4630      	mov	r0, r6
   bf3f8:	f7fe fff1 	bl	be3de <strncmp>
   bf3fc:	b980      	cbnz	r0, bf420 <__gethex+0xd0>
   bf3fe:	b94d      	cbnz	r5, bf414 <__gethex+0xc4>
   bf400:	eb06 050a 	add.w	r5, r6, sl
   bf404:	462a      	mov	r2, r5
   bf406:	4616      	mov	r6, r2
   bf408:	3201      	adds	r2, #1
   bf40a:	7830      	ldrb	r0, [r6, #0]
   bf40c:	f7ff ff8a 	bl	bf324 <__hexdig_fun>
   bf410:	2800      	cmp	r0, #0
   bf412:	d1f8      	bne.n	bf406 <__gethex+0xb6>
   bf414:	1bad      	subs	r5, r5, r6
   bf416:	00ad      	lsls	r5, r5, #2
   bf418:	e004      	b.n	bf424 <__gethex+0xd4>
   bf41a:	2400      	movs	r4, #0
   bf41c:	4625      	mov	r5, r4
   bf41e:	e7e0      	b.n	bf3e2 <__gethex+0x92>
   bf420:	2d00      	cmp	r5, #0
   bf422:	d1f7      	bne.n	bf414 <__gethex+0xc4>
   bf424:	7833      	ldrb	r3, [r6, #0]
   bf426:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bf42a:	2b50      	cmp	r3, #80	; 0x50
   bf42c:	d13b      	bne.n	bf4a6 <__gethex+0x156>
   bf42e:	7873      	ldrb	r3, [r6, #1]
   bf430:	2b2b      	cmp	r3, #43	; 0x2b
   bf432:	d02c      	beq.n	bf48e <__gethex+0x13e>
   bf434:	2b2d      	cmp	r3, #45	; 0x2d
   bf436:	d02e      	beq.n	bf496 <__gethex+0x146>
   bf438:	1c71      	adds	r1, r6, #1
   bf43a:	f04f 0900 	mov.w	r9, #0
   bf43e:	7808      	ldrb	r0, [r1, #0]
   bf440:	f7ff ff70 	bl	bf324 <__hexdig_fun>
   bf444:	1e43      	subs	r3, r0, #1
   bf446:	b2db      	uxtb	r3, r3
   bf448:	2b18      	cmp	r3, #24
   bf44a:	d82c      	bhi.n	bf4a6 <__gethex+0x156>
   bf44c:	f1a0 0210 	sub.w	r2, r0, #16
   bf450:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bf454:	f7ff ff66 	bl	bf324 <__hexdig_fun>
   bf458:	1e43      	subs	r3, r0, #1
   bf45a:	b2db      	uxtb	r3, r3
   bf45c:	2b18      	cmp	r3, #24
   bf45e:	d91d      	bls.n	bf49c <__gethex+0x14c>
   bf460:	f1b9 0f00 	cmp.w	r9, #0
   bf464:	d000      	beq.n	bf468 <__gethex+0x118>
   bf466:	4252      	negs	r2, r2
   bf468:	4415      	add	r5, r2
   bf46a:	f8cb 1000 	str.w	r1, [fp]
   bf46e:	b1e4      	cbz	r4, bf4aa <__gethex+0x15a>
   bf470:	9b00      	ldr	r3, [sp, #0]
   bf472:	2b00      	cmp	r3, #0
   bf474:	bf14      	ite	ne
   bf476:	2700      	movne	r7, #0
   bf478:	2706      	moveq	r7, #6
   bf47a:	4638      	mov	r0, r7
   bf47c:	b009      	add	sp, #36	; 0x24
   bf47e:	ecbd 8b02 	vpop	{d8}
   bf482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bf486:	463e      	mov	r6, r7
   bf488:	4625      	mov	r5, r4
   bf48a:	2401      	movs	r4, #1
   bf48c:	e7ca      	b.n	bf424 <__gethex+0xd4>
   bf48e:	f04f 0900 	mov.w	r9, #0
   bf492:	1cb1      	adds	r1, r6, #2
   bf494:	e7d3      	b.n	bf43e <__gethex+0xee>
   bf496:	f04f 0901 	mov.w	r9, #1
   bf49a:	e7fa      	b.n	bf492 <__gethex+0x142>
   bf49c:	230a      	movs	r3, #10
   bf49e:	fb03 0202 	mla	r2, r3, r2, r0
   bf4a2:	3a10      	subs	r2, #16
   bf4a4:	e7d4      	b.n	bf450 <__gethex+0x100>
   bf4a6:	4631      	mov	r1, r6
   bf4a8:	e7df      	b.n	bf46a <__gethex+0x11a>
   bf4aa:	1bf3      	subs	r3, r6, r7
   bf4ac:	3b01      	subs	r3, #1
   bf4ae:	4621      	mov	r1, r4
   bf4b0:	2b07      	cmp	r3, #7
   bf4b2:	dc0b      	bgt.n	bf4cc <__gethex+0x17c>
   bf4b4:	ee18 0a10 	vmov	r0, s16
   bf4b8:	f000 fa68 	bl	bf98c <_Balloc>
   bf4bc:	4604      	mov	r4, r0
   bf4be:	b940      	cbnz	r0, bf4d2 <__gethex+0x182>
   bf4c0:	4b5d      	ldr	r3, [pc, #372]	; (bf638 <__gethex+0x2e8>)
   bf4c2:	4602      	mov	r2, r0
   bf4c4:	21de      	movs	r1, #222	; 0xde
   bf4c6:	485d      	ldr	r0, [pc, #372]	; (bf63c <__gethex+0x2ec>)
   bf4c8:	f7fa f9a6 	bl	b9818 <__assert_func>
   bf4cc:	3101      	adds	r1, #1
   bf4ce:	105b      	asrs	r3, r3, #1
   bf4d0:	e7ee      	b.n	bf4b0 <__gethex+0x160>
   bf4d2:	f100 0914 	add.w	r9, r0, #20
   bf4d6:	f04f 0b00 	mov.w	fp, #0
   bf4da:	f1ca 0301 	rsb	r3, sl, #1
   bf4de:	f8cd 9008 	str.w	r9, [sp, #8]
   bf4e2:	f8cd b000 	str.w	fp, [sp]
   bf4e6:	9306      	str	r3, [sp, #24]
   bf4e8:	42b7      	cmp	r7, r6
   bf4ea:	d340      	bcc.n	bf56e <__gethex+0x21e>
   bf4ec:	9802      	ldr	r0, [sp, #8]
   bf4ee:	9b00      	ldr	r3, [sp, #0]
   bf4f0:	f840 3b04 	str.w	r3, [r0], #4
   bf4f4:	eba0 0009 	sub.w	r0, r0, r9
   bf4f8:	1080      	asrs	r0, r0, #2
   bf4fa:	0146      	lsls	r6, r0, #5
   bf4fc:	6120      	str	r0, [r4, #16]
   bf4fe:	4618      	mov	r0, r3
   bf500:	f000 fb36 	bl	bfb70 <__hi0bits>
   bf504:	1a30      	subs	r0, r6, r0
   bf506:	f8d8 6000 	ldr.w	r6, [r8]
   bf50a:	42b0      	cmp	r0, r6
   bf50c:	dd63      	ble.n	bf5d6 <__gethex+0x286>
   bf50e:	1b87      	subs	r7, r0, r6
   bf510:	4639      	mov	r1, r7
   bf512:	4620      	mov	r0, r4
   bf514:	f000 feda 	bl	c02cc <__any_on>
   bf518:	4682      	mov	sl, r0
   bf51a:	b1a8      	cbz	r0, bf548 <__gethex+0x1f8>
   bf51c:	1e7b      	subs	r3, r7, #1
   bf51e:	1159      	asrs	r1, r3, #5
   bf520:	f003 021f 	and.w	r2, r3, #31
   bf524:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bf528:	f04f 0a01 	mov.w	sl, #1
   bf52c:	fa0a f202 	lsl.w	r2, sl, r2
   bf530:	420a      	tst	r2, r1
   bf532:	d009      	beq.n	bf548 <__gethex+0x1f8>
   bf534:	4553      	cmp	r3, sl
   bf536:	dd05      	ble.n	bf544 <__gethex+0x1f4>
   bf538:	1eb9      	subs	r1, r7, #2
   bf53a:	4620      	mov	r0, r4
   bf53c:	f000 fec6 	bl	c02cc <__any_on>
   bf540:	2800      	cmp	r0, #0
   bf542:	d145      	bne.n	bf5d0 <__gethex+0x280>
   bf544:	f04f 0a02 	mov.w	sl, #2
   bf548:	4639      	mov	r1, r7
   bf54a:	4620      	mov	r0, r4
   bf54c:	f7ff fe98 	bl	bf280 <rshift>
   bf550:	443d      	add	r5, r7
   bf552:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bf556:	42ab      	cmp	r3, r5
   bf558:	da4c      	bge.n	bf5f4 <__gethex+0x2a4>
   bf55a:	ee18 0a10 	vmov	r0, s16
   bf55e:	4621      	mov	r1, r4
   bf560:	f000 fa54 	bl	bfa0c <_Bfree>
   bf564:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bf566:	2300      	movs	r3, #0
   bf568:	6013      	str	r3, [r2, #0]
   bf56a:	27a3      	movs	r7, #163	; 0xa3
   bf56c:	e785      	b.n	bf47a <__gethex+0x12a>
   bf56e:	1e73      	subs	r3, r6, #1
   bf570:	9a05      	ldr	r2, [sp, #20]
   bf572:	9303      	str	r3, [sp, #12]
   bf574:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bf578:	4293      	cmp	r3, r2
   bf57a:	d019      	beq.n	bf5b0 <__gethex+0x260>
   bf57c:	f1bb 0f20 	cmp.w	fp, #32
   bf580:	d107      	bne.n	bf592 <__gethex+0x242>
   bf582:	9b02      	ldr	r3, [sp, #8]
   bf584:	9a00      	ldr	r2, [sp, #0]
   bf586:	f843 2b04 	str.w	r2, [r3], #4
   bf58a:	9302      	str	r3, [sp, #8]
   bf58c:	2300      	movs	r3, #0
   bf58e:	9300      	str	r3, [sp, #0]
   bf590:	469b      	mov	fp, r3
   bf592:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bf596:	f7ff fec5 	bl	bf324 <__hexdig_fun>
   bf59a:	9b00      	ldr	r3, [sp, #0]
   bf59c:	f000 000f 	and.w	r0, r0, #15
   bf5a0:	fa00 f00b 	lsl.w	r0, r0, fp
   bf5a4:	4303      	orrs	r3, r0
   bf5a6:	9300      	str	r3, [sp, #0]
   bf5a8:	f10b 0b04 	add.w	fp, fp, #4
   bf5ac:	9b03      	ldr	r3, [sp, #12]
   bf5ae:	e00d      	b.n	bf5cc <__gethex+0x27c>
   bf5b0:	9b03      	ldr	r3, [sp, #12]
   bf5b2:	9a06      	ldr	r2, [sp, #24]
   bf5b4:	4413      	add	r3, r2
   bf5b6:	42bb      	cmp	r3, r7
   bf5b8:	d3e0      	bcc.n	bf57c <__gethex+0x22c>
   bf5ba:	4618      	mov	r0, r3
   bf5bc:	9901      	ldr	r1, [sp, #4]
   bf5be:	9307      	str	r3, [sp, #28]
   bf5c0:	4652      	mov	r2, sl
   bf5c2:	f7fe ff0c 	bl	be3de <strncmp>
   bf5c6:	9b07      	ldr	r3, [sp, #28]
   bf5c8:	2800      	cmp	r0, #0
   bf5ca:	d1d7      	bne.n	bf57c <__gethex+0x22c>
   bf5cc:	461e      	mov	r6, r3
   bf5ce:	e78b      	b.n	bf4e8 <__gethex+0x198>
   bf5d0:	f04f 0a03 	mov.w	sl, #3
   bf5d4:	e7b8      	b.n	bf548 <__gethex+0x1f8>
   bf5d6:	da0a      	bge.n	bf5ee <__gethex+0x29e>
   bf5d8:	1a37      	subs	r7, r6, r0
   bf5da:	4621      	mov	r1, r4
   bf5dc:	ee18 0a10 	vmov	r0, s16
   bf5e0:	463a      	mov	r2, r7
   bf5e2:	f000 fc2f 	bl	bfe44 <__lshift>
   bf5e6:	1bed      	subs	r5, r5, r7
   bf5e8:	4604      	mov	r4, r0
   bf5ea:	f100 0914 	add.w	r9, r0, #20
   bf5ee:	f04f 0a00 	mov.w	sl, #0
   bf5f2:	e7ae      	b.n	bf552 <__gethex+0x202>
   bf5f4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bf5f8:	42a8      	cmp	r0, r5
   bf5fa:	dd72      	ble.n	bf6e2 <__gethex+0x392>
   bf5fc:	1b45      	subs	r5, r0, r5
   bf5fe:	42ae      	cmp	r6, r5
   bf600:	dc36      	bgt.n	bf670 <__gethex+0x320>
   bf602:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bf606:	2b02      	cmp	r3, #2
   bf608:	d02a      	beq.n	bf660 <__gethex+0x310>
   bf60a:	2b03      	cmp	r3, #3
   bf60c:	d02c      	beq.n	bf668 <__gethex+0x318>
   bf60e:	2b01      	cmp	r3, #1
   bf610:	d11c      	bne.n	bf64c <__gethex+0x2fc>
   bf612:	42ae      	cmp	r6, r5
   bf614:	d11a      	bne.n	bf64c <__gethex+0x2fc>
   bf616:	2e01      	cmp	r6, #1
   bf618:	d112      	bne.n	bf640 <__gethex+0x2f0>
   bf61a:	9a04      	ldr	r2, [sp, #16]
   bf61c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bf620:	6013      	str	r3, [r2, #0]
   bf622:	2301      	movs	r3, #1
   bf624:	6123      	str	r3, [r4, #16]
   bf626:	f8c9 3000 	str.w	r3, [r9]
   bf62a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bf62c:	2762      	movs	r7, #98	; 0x62
   bf62e:	601c      	str	r4, [r3, #0]
   bf630:	e723      	b.n	bf47a <__gethex+0x12a>
   bf632:	bf00      	nop
   bf634:	000c1dd4 	.word	0x000c1dd4
   bf638:	000c1d61 	.word	0x000c1d61
   bf63c:	000c1d72 	.word	0x000c1d72
   bf640:	1e71      	subs	r1, r6, #1
   bf642:	4620      	mov	r0, r4
   bf644:	f000 fe42 	bl	c02cc <__any_on>
   bf648:	2800      	cmp	r0, #0
   bf64a:	d1e6      	bne.n	bf61a <__gethex+0x2ca>
   bf64c:	ee18 0a10 	vmov	r0, s16
   bf650:	4621      	mov	r1, r4
   bf652:	f000 f9db 	bl	bfa0c <_Bfree>
   bf656:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bf658:	2300      	movs	r3, #0
   bf65a:	6013      	str	r3, [r2, #0]
   bf65c:	2750      	movs	r7, #80	; 0x50
   bf65e:	e70c      	b.n	bf47a <__gethex+0x12a>
   bf660:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bf662:	2b00      	cmp	r3, #0
   bf664:	d1f2      	bne.n	bf64c <__gethex+0x2fc>
   bf666:	e7d8      	b.n	bf61a <__gethex+0x2ca>
   bf668:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bf66a:	2b00      	cmp	r3, #0
   bf66c:	d1d5      	bne.n	bf61a <__gethex+0x2ca>
   bf66e:	e7ed      	b.n	bf64c <__gethex+0x2fc>
   bf670:	1e6f      	subs	r7, r5, #1
   bf672:	f1ba 0f00 	cmp.w	sl, #0
   bf676:	d131      	bne.n	bf6dc <__gethex+0x38c>
   bf678:	b127      	cbz	r7, bf684 <__gethex+0x334>
   bf67a:	4639      	mov	r1, r7
   bf67c:	4620      	mov	r0, r4
   bf67e:	f000 fe25 	bl	c02cc <__any_on>
   bf682:	4682      	mov	sl, r0
   bf684:	117b      	asrs	r3, r7, #5
   bf686:	2101      	movs	r1, #1
   bf688:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bf68c:	f007 071f 	and.w	r7, r7, #31
   bf690:	fa01 f707 	lsl.w	r7, r1, r7
   bf694:	421f      	tst	r7, r3
   bf696:	4629      	mov	r1, r5
   bf698:	4620      	mov	r0, r4
   bf69a:	bf18      	it	ne
   bf69c:	f04a 0a02 	orrne.w	sl, sl, #2
   bf6a0:	1b76      	subs	r6, r6, r5
   bf6a2:	f7ff fded 	bl	bf280 <rshift>
   bf6a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bf6aa:	2702      	movs	r7, #2
   bf6ac:	f1ba 0f00 	cmp.w	sl, #0
   bf6b0:	d048      	beq.n	bf744 <__gethex+0x3f4>
   bf6b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bf6b6:	2b02      	cmp	r3, #2
   bf6b8:	d015      	beq.n	bf6e6 <__gethex+0x396>
   bf6ba:	2b03      	cmp	r3, #3
   bf6bc:	d017      	beq.n	bf6ee <__gethex+0x39e>
   bf6be:	2b01      	cmp	r3, #1
   bf6c0:	d109      	bne.n	bf6d6 <__gethex+0x386>
   bf6c2:	f01a 0f02 	tst.w	sl, #2
   bf6c6:	d006      	beq.n	bf6d6 <__gethex+0x386>
   bf6c8:	f8d9 0000 	ldr.w	r0, [r9]
   bf6cc:	ea4a 0a00 	orr.w	sl, sl, r0
   bf6d0:	f01a 0f01 	tst.w	sl, #1
   bf6d4:	d10e      	bne.n	bf6f4 <__gethex+0x3a4>
   bf6d6:	f047 0710 	orr.w	r7, r7, #16
   bf6da:	e033      	b.n	bf744 <__gethex+0x3f4>
   bf6dc:	f04f 0a01 	mov.w	sl, #1
   bf6e0:	e7d0      	b.n	bf684 <__gethex+0x334>
   bf6e2:	2701      	movs	r7, #1
   bf6e4:	e7e2      	b.n	bf6ac <__gethex+0x35c>
   bf6e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bf6e8:	f1c3 0301 	rsb	r3, r3, #1
   bf6ec:	9315      	str	r3, [sp, #84]	; 0x54
   bf6ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bf6f0:	2b00      	cmp	r3, #0
   bf6f2:	d0f0      	beq.n	bf6d6 <__gethex+0x386>
   bf6f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bf6f8:	f104 0314 	add.w	r3, r4, #20
   bf6fc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bf700:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bf704:	f04f 0c00 	mov.w	ip, #0
   bf708:	4618      	mov	r0, r3
   bf70a:	f853 2b04 	ldr.w	r2, [r3], #4
   bf70e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bf712:	d01c      	beq.n	bf74e <__gethex+0x3fe>
   bf714:	3201      	adds	r2, #1
   bf716:	6002      	str	r2, [r0, #0]
   bf718:	2f02      	cmp	r7, #2
   bf71a:	f104 0314 	add.w	r3, r4, #20
   bf71e:	d13f      	bne.n	bf7a0 <__gethex+0x450>
   bf720:	f8d8 2000 	ldr.w	r2, [r8]
   bf724:	3a01      	subs	r2, #1
   bf726:	42b2      	cmp	r2, r6
   bf728:	d10a      	bne.n	bf740 <__gethex+0x3f0>
   bf72a:	1171      	asrs	r1, r6, #5
   bf72c:	2201      	movs	r2, #1
   bf72e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bf732:	f006 061f 	and.w	r6, r6, #31
   bf736:	fa02 f606 	lsl.w	r6, r2, r6
   bf73a:	421e      	tst	r6, r3
   bf73c:	bf18      	it	ne
   bf73e:	4617      	movne	r7, r2
   bf740:	f047 0720 	orr.w	r7, r7, #32
   bf744:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bf746:	601c      	str	r4, [r3, #0]
   bf748:	9b04      	ldr	r3, [sp, #16]
   bf74a:	601d      	str	r5, [r3, #0]
   bf74c:	e695      	b.n	bf47a <__gethex+0x12a>
   bf74e:	4299      	cmp	r1, r3
   bf750:	f843 cc04 	str.w	ip, [r3, #-4]
   bf754:	d8d8      	bhi.n	bf708 <__gethex+0x3b8>
   bf756:	68a3      	ldr	r3, [r4, #8]
   bf758:	459b      	cmp	fp, r3
   bf75a:	db19      	blt.n	bf790 <__gethex+0x440>
   bf75c:	6861      	ldr	r1, [r4, #4]
   bf75e:	ee18 0a10 	vmov	r0, s16
   bf762:	3101      	adds	r1, #1
   bf764:	f000 f912 	bl	bf98c <_Balloc>
   bf768:	4681      	mov	r9, r0
   bf76a:	b918      	cbnz	r0, bf774 <__gethex+0x424>
   bf76c:	4b1a      	ldr	r3, [pc, #104]	; (bf7d8 <__gethex+0x488>)
   bf76e:	4602      	mov	r2, r0
   bf770:	2184      	movs	r1, #132	; 0x84
   bf772:	e6a8      	b.n	bf4c6 <__gethex+0x176>
   bf774:	6922      	ldr	r2, [r4, #16]
   bf776:	3202      	adds	r2, #2
   bf778:	f104 010c 	add.w	r1, r4, #12
   bf77c:	0092      	lsls	r2, r2, #2
   bf77e:	300c      	adds	r0, #12
   bf780:	f7fe fd49 	bl	be216 <memcpy>
   bf784:	4621      	mov	r1, r4
   bf786:	ee18 0a10 	vmov	r0, s16
   bf78a:	f000 f93f 	bl	bfa0c <_Bfree>
   bf78e:	464c      	mov	r4, r9
   bf790:	6923      	ldr	r3, [r4, #16]
   bf792:	1c5a      	adds	r2, r3, #1
   bf794:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bf798:	6122      	str	r2, [r4, #16]
   bf79a:	2201      	movs	r2, #1
   bf79c:	615a      	str	r2, [r3, #20]
   bf79e:	e7bb      	b.n	bf718 <__gethex+0x3c8>
   bf7a0:	6922      	ldr	r2, [r4, #16]
   bf7a2:	455a      	cmp	r2, fp
   bf7a4:	dd0b      	ble.n	bf7be <__gethex+0x46e>
   bf7a6:	2101      	movs	r1, #1
   bf7a8:	4620      	mov	r0, r4
   bf7aa:	f7ff fd69 	bl	bf280 <rshift>
   bf7ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bf7b2:	3501      	adds	r5, #1
   bf7b4:	42ab      	cmp	r3, r5
   bf7b6:	f6ff aed0 	blt.w	bf55a <__gethex+0x20a>
   bf7ba:	2701      	movs	r7, #1
   bf7bc:	e7c0      	b.n	bf740 <__gethex+0x3f0>
   bf7be:	f016 061f 	ands.w	r6, r6, #31
   bf7c2:	d0fa      	beq.n	bf7ba <__gethex+0x46a>
   bf7c4:	4453      	add	r3, sl
   bf7c6:	f1c6 0620 	rsb	r6, r6, #32
   bf7ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bf7ce:	f000 f9cf 	bl	bfb70 <__hi0bits>
   bf7d2:	42b0      	cmp	r0, r6
   bf7d4:	dbe7      	blt.n	bf7a6 <__gethex+0x456>
   bf7d6:	e7f0      	b.n	bf7ba <__gethex+0x46a>
   bf7d8:	000c1d61 	.word	0x000c1d61

000bf7dc <L_shift>:
   bf7dc:	f1c2 0208 	rsb	r2, r2, #8
   bf7e0:	0092      	lsls	r2, r2, #2
   bf7e2:	b570      	push	{r4, r5, r6, lr}
   bf7e4:	f1c2 0620 	rsb	r6, r2, #32
   bf7e8:	6843      	ldr	r3, [r0, #4]
   bf7ea:	6804      	ldr	r4, [r0, #0]
   bf7ec:	fa03 f506 	lsl.w	r5, r3, r6
   bf7f0:	432c      	orrs	r4, r5
   bf7f2:	40d3      	lsrs	r3, r2
   bf7f4:	6004      	str	r4, [r0, #0]
   bf7f6:	f840 3f04 	str.w	r3, [r0, #4]!
   bf7fa:	4288      	cmp	r0, r1
   bf7fc:	d3f4      	bcc.n	bf7e8 <L_shift+0xc>
   bf7fe:	bd70      	pop	{r4, r5, r6, pc}

000bf800 <__match>:
   bf800:	b530      	push	{r4, r5, lr}
   bf802:	6803      	ldr	r3, [r0, #0]
   bf804:	3301      	adds	r3, #1
   bf806:	f811 4b01 	ldrb.w	r4, [r1], #1
   bf80a:	b914      	cbnz	r4, bf812 <__match+0x12>
   bf80c:	6003      	str	r3, [r0, #0]
   bf80e:	2001      	movs	r0, #1
   bf810:	bd30      	pop	{r4, r5, pc}
   bf812:	f813 2b01 	ldrb.w	r2, [r3], #1
   bf816:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bf81a:	2d19      	cmp	r5, #25
   bf81c:	bf98      	it	ls
   bf81e:	3220      	addls	r2, #32
   bf820:	42a2      	cmp	r2, r4
   bf822:	d0f0      	beq.n	bf806 <__match+0x6>
   bf824:	2000      	movs	r0, #0
   bf826:	e7f3      	b.n	bf810 <__match+0x10>

000bf828 <__hexnan>:
   bf828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf82c:	680b      	ldr	r3, [r1, #0]
   bf82e:	115e      	asrs	r6, r3, #5
   bf830:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bf834:	f013 031f 	ands.w	r3, r3, #31
   bf838:	b087      	sub	sp, #28
   bf83a:	bf18      	it	ne
   bf83c:	3604      	addne	r6, #4
   bf83e:	2500      	movs	r5, #0
   bf840:	1f37      	subs	r7, r6, #4
   bf842:	4690      	mov	r8, r2
   bf844:	6802      	ldr	r2, [r0, #0]
   bf846:	9301      	str	r3, [sp, #4]
   bf848:	4682      	mov	sl, r0
   bf84a:	f846 5c04 	str.w	r5, [r6, #-4]
   bf84e:	46b9      	mov	r9, r7
   bf850:	463c      	mov	r4, r7
   bf852:	9502      	str	r5, [sp, #8]
   bf854:	46ab      	mov	fp, r5
   bf856:	7851      	ldrb	r1, [r2, #1]
   bf858:	1c53      	adds	r3, r2, #1
   bf85a:	9303      	str	r3, [sp, #12]
   bf85c:	b341      	cbz	r1, bf8b0 <__hexnan+0x88>
   bf85e:	4608      	mov	r0, r1
   bf860:	9205      	str	r2, [sp, #20]
   bf862:	9104      	str	r1, [sp, #16]
   bf864:	f7ff fd5e 	bl	bf324 <__hexdig_fun>
   bf868:	2800      	cmp	r0, #0
   bf86a:	d14f      	bne.n	bf90c <__hexnan+0xe4>
   bf86c:	9904      	ldr	r1, [sp, #16]
   bf86e:	9a05      	ldr	r2, [sp, #20]
   bf870:	2920      	cmp	r1, #32
   bf872:	d818      	bhi.n	bf8a6 <__hexnan+0x7e>
   bf874:	9b02      	ldr	r3, [sp, #8]
   bf876:	459b      	cmp	fp, r3
   bf878:	dd13      	ble.n	bf8a2 <__hexnan+0x7a>
   bf87a:	454c      	cmp	r4, r9
   bf87c:	d206      	bcs.n	bf88c <__hexnan+0x64>
   bf87e:	2d07      	cmp	r5, #7
   bf880:	dc04      	bgt.n	bf88c <__hexnan+0x64>
   bf882:	462a      	mov	r2, r5
   bf884:	4649      	mov	r1, r9
   bf886:	4620      	mov	r0, r4
   bf888:	f7ff ffa8 	bl	bf7dc <L_shift>
   bf88c:	4544      	cmp	r4, r8
   bf88e:	d950      	bls.n	bf932 <__hexnan+0x10a>
   bf890:	2300      	movs	r3, #0
   bf892:	f1a4 0904 	sub.w	r9, r4, #4
   bf896:	f844 3c04 	str.w	r3, [r4, #-4]
   bf89a:	f8cd b008 	str.w	fp, [sp, #8]
   bf89e:	464c      	mov	r4, r9
   bf8a0:	461d      	mov	r5, r3
   bf8a2:	9a03      	ldr	r2, [sp, #12]
   bf8a4:	e7d7      	b.n	bf856 <__hexnan+0x2e>
   bf8a6:	2929      	cmp	r1, #41	; 0x29
   bf8a8:	d156      	bne.n	bf958 <__hexnan+0x130>
   bf8aa:	3202      	adds	r2, #2
   bf8ac:	f8ca 2000 	str.w	r2, [sl]
   bf8b0:	f1bb 0f00 	cmp.w	fp, #0
   bf8b4:	d050      	beq.n	bf958 <__hexnan+0x130>
   bf8b6:	454c      	cmp	r4, r9
   bf8b8:	d206      	bcs.n	bf8c8 <__hexnan+0xa0>
   bf8ba:	2d07      	cmp	r5, #7
   bf8bc:	dc04      	bgt.n	bf8c8 <__hexnan+0xa0>
   bf8be:	462a      	mov	r2, r5
   bf8c0:	4649      	mov	r1, r9
   bf8c2:	4620      	mov	r0, r4
   bf8c4:	f7ff ff8a 	bl	bf7dc <L_shift>
   bf8c8:	4544      	cmp	r4, r8
   bf8ca:	d934      	bls.n	bf936 <__hexnan+0x10e>
   bf8cc:	f1a8 0204 	sub.w	r2, r8, #4
   bf8d0:	4623      	mov	r3, r4
   bf8d2:	f853 1b04 	ldr.w	r1, [r3], #4
   bf8d6:	f842 1f04 	str.w	r1, [r2, #4]!
   bf8da:	429f      	cmp	r7, r3
   bf8dc:	d2f9      	bcs.n	bf8d2 <__hexnan+0xaa>
   bf8de:	1b3b      	subs	r3, r7, r4
   bf8e0:	f023 0303 	bic.w	r3, r3, #3
   bf8e4:	3304      	adds	r3, #4
   bf8e6:	3401      	adds	r4, #1
   bf8e8:	3e03      	subs	r6, #3
   bf8ea:	42b4      	cmp	r4, r6
   bf8ec:	bf88      	it	hi
   bf8ee:	2304      	movhi	r3, #4
   bf8f0:	4443      	add	r3, r8
   bf8f2:	2200      	movs	r2, #0
   bf8f4:	f843 2b04 	str.w	r2, [r3], #4
   bf8f8:	429f      	cmp	r7, r3
   bf8fa:	d2fb      	bcs.n	bf8f4 <__hexnan+0xcc>
   bf8fc:	683b      	ldr	r3, [r7, #0]
   bf8fe:	b91b      	cbnz	r3, bf908 <__hexnan+0xe0>
   bf900:	4547      	cmp	r7, r8
   bf902:	d127      	bne.n	bf954 <__hexnan+0x12c>
   bf904:	2301      	movs	r3, #1
   bf906:	603b      	str	r3, [r7, #0]
   bf908:	2005      	movs	r0, #5
   bf90a:	e026      	b.n	bf95a <__hexnan+0x132>
   bf90c:	3501      	adds	r5, #1
   bf90e:	2d08      	cmp	r5, #8
   bf910:	f10b 0b01 	add.w	fp, fp, #1
   bf914:	dd06      	ble.n	bf924 <__hexnan+0xfc>
   bf916:	4544      	cmp	r4, r8
   bf918:	d9c3      	bls.n	bf8a2 <__hexnan+0x7a>
   bf91a:	2300      	movs	r3, #0
   bf91c:	f844 3c04 	str.w	r3, [r4, #-4]
   bf920:	2501      	movs	r5, #1
   bf922:	3c04      	subs	r4, #4
   bf924:	6822      	ldr	r2, [r4, #0]
   bf926:	f000 000f 	and.w	r0, r0, #15
   bf92a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bf92e:	6022      	str	r2, [r4, #0]
   bf930:	e7b7      	b.n	bf8a2 <__hexnan+0x7a>
   bf932:	2508      	movs	r5, #8
   bf934:	e7b5      	b.n	bf8a2 <__hexnan+0x7a>
   bf936:	9b01      	ldr	r3, [sp, #4]
   bf938:	2b00      	cmp	r3, #0
   bf93a:	d0df      	beq.n	bf8fc <__hexnan+0xd4>
   bf93c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf940:	f1c3 0320 	rsb	r3, r3, #32
   bf944:	fa22 f303 	lsr.w	r3, r2, r3
   bf948:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bf94c:	401a      	ands	r2, r3
   bf94e:	f846 2c04 	str.w	r2, [r6, #-4]
   bf952:	e7d3      	b.n	bf8fc <__hexnan+0xd4>
   bf954:	3f04      	subs	r7, #4
   bf956:	e7d1      	b.n	bf8fc <__hexnan+0xd4>
   bf958:	2004      	movs	r0, #4
   bf95a:	b007      	add	sp, #28
   bf95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bf960 <__retarget_lock_acquire_recursive>:
   bf960:	4770      	bx	lr

000bf962 <__retarget_lock_release>:
   bf962:	4770      	bx	lr

000bf964 <__retarget_lock_release_recursive>:
   bf964:	4770      	bx	lr

000bf966 <__ascii_mbtowc>:
   bf966:	b082      	sub	sp, #8
   bf968:	b901      	cbnz	r1, bf96c <__ascii_mbtowc+0x6>
   bf96a:	a901      	add	r1, sp, #4
   bf96c:	b142      	cbz	r2, bf980 <__ascii_mbtowc+0x1a>
   bf96e:	b14b      	cbz	r3, bf984 <__ascii_mbtowc+0x1e>
   bf970:	7813      	ldrb	r3, [r2, #0]
   bf972:	600b      	str	r3, [r1, #0]
   bf974:	7812      	ldrb	r2, [r2, #0]
   bf976:	1e10      	subs	r0, r2, #0
   bf978:	bf18      	it	ne
   bf97a:	2001      	movne	r0, #1
   bf97c:	b002      	add	sp, #8
   bf97e:	4770      	bx	lr
   bf980:	4610      	mov	r0, r2
   bf982:	e7fb      	b.n	bf97c <__ascii_mbtowc+0x16>
   bf984:	f06f 0001 	mvn.w	r0, #1
   bf988:	e7f8      	b.n	bf97c <__ascii_mbtowc+0x16>
	...

000bf98c <_Balloc>:
   bf98c:	b570      	push	{r4, r5, r6, lr}
   bf98e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bf990:	4604      	mov	r4, r0
   bf992:	460d      	mov	r5, r1
   bf994:	b976      	cbnz	r6, bf9b4 <_Balloc+0x28>
   bf996:	2010      	movs	r0, #16
   bf998:	f7f9 feee 	bl	b9778 <malloc>
   bf99c:	4602      	mov	r2, r0
   bf99e:	6260      	str	r0, [r4, #36]	; 0x24
   bf9a0:	b920      	cbnz	r0, bf9ac <_Balloc+0x20>
   bf9a2:	4b18      	ldr	r3, [pc, #96]	; (bfa04 <_Balloc+0x78>)
   bf9a4:	4818      	ldr	r0, [pc, #96]	; (bfa08 <_Balloc+0x7c>)
   bf9a6:	2166      	movs	r1, #102	; 0x66
   bf9a8:	f7f9 ff36 	bl	b9818 <__assert_func>
   bf9ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bf9b0:	6006      	str	r6, [r0, #0]
   bf9b2:	60c6      	str	r6, [r0, #12]
   bf9b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bf9b6:	68f3      	ldr	r3, [r6, #12]
   bf9b8:	b183      	cbz	r3, bf9dc <_Balloc+0x50>
   bf9ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bf9bc:	68db      	ldr	r3, [r3, #12]
   bf9be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bf9c2:	b9b8      	cbnz	r0, bf9f4 <_Balloc+0x68>
   bf9c4:	2101      	movs	r1, #1
   bf9c6:	fa01 f605 	lsl.w	r6, r1, r5
   bf9ca:	1d72      	adds	r2, r6, #5
   bf9cc:	0092      	lsls	r2, r2, #2
   bf9ce:	4620      	mov	r0, r4
   bf9d0:	f000 fc9d 	bl	c030e <_calloc_r>
   bf9d4:	b160      	cbz	r0, bf9f0 <_Balloc+0x64>
   bf9d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bf9da:	e00e      	b.n	bf9fa <_Balloc+0x6e>
   bf9dc:	2221      	movs	r2, #33	; 0x21
   bf9de:	2104      	movs	r1, #4
   bf9e0:	4620      	mov	r0, r4
   bf9e2:	f000 fc94 	bl	c030e <_calloc_r>
   bf9e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bf9e8:	60f0      	str	r0, [r6, #12]
   bf9ea:	68db      	ldr	r3, [r3, #12]
   bf9ec:	2b00      	cmp	r3, #0
   bf9ee:	d1e4      	bne.n	bf9ba <_Balloc+0x2e>
   bf9f0:	2000      	movs	r0, #0
   bf9f2:	bd70      	pop	{r4, r5, r6, pc}
   bf9f4:	6802      	ldr	r2, [r0, #0]
   bf9f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bf9fa:	2300      	movs	r3, #0
   bf9fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bfa00:	e7f7      	b.n	bf9f2 <_Balloc+0x66>
   bfa02:	bf00      	nop
   bfa04:	000c1b91 	.word	0x000c1b91
   bfa08:	000c1de8 	.word	0x000c1de8

000bfa0c <_Bfree>:
   bfa0c:	b570      	push	{r4, r5, r6, lr}
   bfa0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bfa10:	4605      	mov	r5, r0
   bfa12:	460c      	mov	r4, r1
   bfa14:	b976      	cbnz	r6, bfa34 <_Bfree+0x28>
   bfa16:	2010      	movs	r0, #16
   bfa18:	f7f9 feae 	bl	b9778 <malloc>
   bfa1c:	4602      	mov	r2, r0
   bfa1e:	6268      	str	r0, [r5, #36]	; 0x24
   bfa20:	b920      	cbnz	r0, bfa2c <_Bfree+0x20>
   bfa22:	4b09      	ldr	r3, [pc, #36]	; (bfa48 <_Bfree+0x3c>)
   bfa24:	4809      	ldr	r0, [pc, #36]	; (bfa4c <_Bfree+0x40>)
   bfa26:	218a      	movs	r1, #138	; 0x8a
   bfa28:	f7f9 fef6 	bl	b9818 <__assert_func>
   bfa2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bfa30:	6006      	str	r6, [r0, #0]
   bfa32:	60c6      	str	r6, [r0, #12]
   bfa34:	b13c      	cbz	r4, bfa46 <_Bfree+0x3a>
   bfa36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bfa38:	6862      	ldr	r2, [r4, #4]
   bfa3a:	68db      	ldr	r3, [r3, #12]
   bfa3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bfa40:	6021      	str	r1, [r4, #0]
   bfa42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bfa46:	bd70      	pop	{r4, r5, r6, pc}
   bfa48:	000c1b91 	.word	0x000c1b91
   bfa4c:	000c1de8 	.word	0x000c1de8

000bfa50 <__multadd>:
   bfa50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bfa54:	690d      	ldr	r5, [r1, #16]
   bfa56:	4607      	mov	r7, r0
   bfa58:	460c      	mov	r4, r1
   bfa5a:	461e      	mov	r6, r3
   bfa5c:	f101 0c14 	add.w	ip, r1, #20
   bfa60:	2000      	movs	r0, #0
   bfa62:	f8dc 3000 	ldr.w	r3, [ip]
   bfa66:	b299      	uxth	r1, r3
   bfa68:	fb02 6101 	mla	r1, r2, r1, r6
   bfa6c:	0c1e      	lsrs	r6, r3, #16
   bfa6e:	0c0b      	lsrs	r3, r1, #16
   bfa70:	fb02 3306 	mla	r3, r2, r6, r3
   bfa74:	b289      	uxth	r1, r1
   bfa76:	3001      	adds	r0, #1
   bfa78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bfa7c:	4285      	cmp	r5, r0
   bfa7e:	f84c 1b04 	str.w	r1, [ip], #4
   bfa82:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bfa86:	dcec      	bgt.n	bfa62 <__multadd+0x12>
   bfa88:	b30e      	cbz	r6, bface <__multadd+0x7e>
   bfa8a:	68a3      	ldr	r3, [r4, #8]
   bfa8c:	42ab      	cmp	r3, r5
   bfa8e:	dc19      	bgt.n	bfac4 <__multadd+0x74>
   bfa90:	6861      	ldr	r1, [r4, #4]
   bfa92:	4638      	mov	r0, r7
   bfa94:	3101      	adds	r1, #1
   bfa96:	f7ff ff79 	bl	bf98c <_Balloc>
   bfa9a:	4680      	mov	r8, r0
   bfa9c:	b928      	cbnz	r0, bfaaa <__multadd+0x5a>
   bfa9e:	4602      	mov	r2, r0
   bfaa0:	4b0c      	ldr	r3, [pc, #48]	; (bfad4 <__multadd+0x84>)
   bfaa2:	480d      	ldr	r0, [pc, #52]	; (bfad8 <__multadd+0x88>)
   bfaa4:	21b5      	movs	r1, #181	; 0xb5
   bfaa6:	f7f9 feb7 	bl	b9818 <__assert_func>
   bfaaa:	6922      	ldr	r2, [r4, #16]
   bfaac:	3202      	adds	r2, #2
   bfaae:	f104 010c 	add.w	r1, r4, #12
   bfab2:	0092      	lsls	r2, r2, #2
   bfab4:	300c      	adds	r0, #12
   bfab6:	f7fe fbae 	bl	be216 <memcpy>
   bfaba:	4621      	mov	r1, r4
   bfabc:	4638      	mov	r0, r7
   bfabe:	f7ff ffa5 	bl	bfa0c <_Bfree>
   bfac2:	4644      	mov	r4, r8
   bfac4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bfac8:	3501      	adds	r5, #1
   bfaca:	615e      	str	r6, [r3, #20]
   bfacc:	6125      	str	r5, [r4, #16]
   bface:	4620      	mov	r0, r4
   bfad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bfad4:	000c1d61 	.word	0x000c1d61
   bfad8:	000c1de8 	.word	0x000c1de8

000bfadc <__s2b>:
   bfadc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bfae0:	460c      	mov	r4, r1
   bfae2:	4615      	mov	r5, r2
   bfae4:	461f      	mov	r7, r3
   bfae6:	2209      	movs	r2, #9
   bfae8:	3308      	adds	r3, #8
   bfaea:	4606      	mov	r6, r0
   bfaec:	fb93 f3f2 	sdiv	r3, r3, r2
   bfaf0:	2100      	movs	r1, #0
   bfaf2:	2201      	movs	r2, #1
   bfaf4:	429a      	cmp	r2, r3
   bfaf6:	db09      	blt.n	bfb0c <__s2b+0x30>
   bfaf8:	4630      	mov	r0, r6
   bfafa:	f7ff ff47 	bl	bf98c <_Balloc>
   bfafe:	b940      	cbnz	r0, bfb12 <__s2b+0x36>
   bfb00:	4602      	mov	r2, r0
   bfb02:	4b19      	ldr	r3, [pc, #100]	; (bfb68 <__s2b+0x8c>)
   bfb04:	4819      	ldr	r0, [pc, #100]	; (bfb6c <__s2b+0x90>)
   bfb06:	21ce      	movs	r1, #206	; 0xce
   bfb08:	f7f9 fe86 	bl	b9818 <__assert_func>
   bfb0c:	0052      	lsls	r2, r2, #1
   bfb0e:	3101      	adds	r1, #1
   bfb10:	e7f0      	b.n	bfaf4 <__s2b+0x18>
   bfb12:	9b08      	ldr	r3, [sp, #32]
   bfb14:	6143      	str	r3, [r0, #20]
   bfb16:	2d09      	cmp	r5, #9
   bfb18:	f04f 0301 	mov.w	r3, #1
   bfb1c:	6103      	str	r3, [r0, #16]
   bfb1e:	dd16      	ble.n	bfb4e <__s2b+0x72>
   bfb20:	f104 0909 	add.w	r9, r4, #9
   bfb24:	46c8      	mov	r8, r9
   bfb26:	442c      	add	r4, r5
   bfb28:	f818 3b01 	ldrb.w	r3, [r8], #1
   bfb2c:	4601      	mov	r1, r0
   bfb2e:	3b30      	subs	r3, #48	; 0x30
   bfb30:	220a      	movs	r2, #10
   bfb32:	4630      	mov	r0, r6
   bfb34:	f7ff ff8c 	bl	bfa50 <__multadd>
   bfb38:	45a0      	cmp	r8, r4
   bfb3a:	d1f5      	bne.n	bfb28 <__s2b+0x4c>
   bfb3c:	f1a5 0408 	sub.w	r4, r5, #8
   bfb40:	444c      	add	r4, r9
   bfb42:	1b2d      	subs	r5, r5, r4
   bfb44:	1963      	adds	r3, r4, r5
   bfb46:	42bb      	cmp	r3, r7
   bfb48:	db04      	blt.n	bfb54 <__s2b+0x78>
   bfb4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bfb4e:	340a      	adds	r4, #10
   bfb50:	2509      	movs	r5, #9
   bfb52:	e7f6      	b.n	bfb42 <__s2b+0x66>
   bfb54:	f814 3b01 	ldrb.w	r3, [r4], #1
   bfb58:	4601      	mov	r1, r0
   bfb5a:	3b30      	subs	r3, #48	; 0x30
   bfb5c:	220a      	movs	r2, #10
   bfb5e:	4630      	mov	r0, r6
   bfb60:	f7ff ff76 	bl	bfa50 <__multadd>
   bfb64:	e7ee      	b.n	bfb44 <__s2b+0x68>
   bfb66:	bf00      	nop
   bfb68:	000c1d61 	.word	0x000c1d61
   bfb6c:	000c1de8 	.word	0x000c1de8

000bfb70 <__hi0bits>:
   bfb70:	0c03      	lsrs	r3, r0, #16
   bfb72:	041b      	lsls	r3, r3, #16
   bfb74:	b9d3      	cbnz	r3, bfbac <__hi0bits+0x3c>
   bfb76:	0400      	lsls	r0, r0, #16
   bfb78:	2310      	movs	r3, #16
   bfb7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bfb7e:	bf04      	itt	eq
   bfb80:	0200      	lsleq	r0, r0, #8
   bfb82:	3308      	addeq	r3, #8
   bfb84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bfb88:	bf04      	itt	eq
   bfb8a:	0100      	lsleq	r0, r0, #4
   bfb8c:	3304      	addeq	r3, #4
   bfb8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bfb92:	bf04      	itt	eq
   bfb94:	0080      	lsleq	r0, r0, #2
   bfb96:	3302      	addeq	r3, #2
   bfb98:	2800      	cmp	r0, #0
   bfb9a:	db05      	blt.n	bfba8 <__hi0bits+0x38>
   bfb9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bfba0:	f103 0301 	add.w	r3, r3, #1
   bfba4:	bf08      	it	eq
   bfba6:	2320      	moveq	r3, #32
   bfba8:	4618      	mov	r0, r3
   bfbaa:	4770      	bx	lr
   bfbac:	2300      	movs	r3, #0
   bfbae:	e7e4      	b.n	bfb7a <__hi0bits+0xa>

000bfbb0 <__lo0bits>:
   bfbb0:	6803      	ldr	r3, [r0, #0]
   bfbb2:	f013 0207 	ands.w	r2, r3, #7
   bfbb6:	4601      	mov	r1, r0
   bfbb8:	d00b      	beq.n	bfbd2 <__lo0bits+0x22>
   bfbba:	07da      	lsls	r2, r3, #31
   bfbbc:	d423      	bmi.n	bfc06 <__lo0bits+0x56>
   bfbbe:	0798      	lsls	r0, r3, #30
   bfbc0:	bf49      	itett	mi
   bfbc2:	085b      	lsrmi	r3, r3, #1
   bfbc4:	089b      	lsrpl	r3, r3, #2
   bfbc6:	2001      	movmi	r0, #1
   bfbc8:	600b      	strmi	r3, [r1, #0]
   bfbca:	bf5c      	itt	pl
   bfbcc:	600b      	strpl	r3, [r1, #0]
   bfbce:	2002      	movpl	r0, #2
   bfbd0:	4770      	bx	lr
   bfbd2:	b298      	uxth	r0, r3
   bfbd4:	b9a8      	cbnz	r0, bfc02 <__lo0bits+0x52>
   bfbd6:	0c1b      	lsrs	r3, r3, #16
   bfbd8:	2010      	movs	r0, #16
   bfbda:	b2da      	uxtb	r2, r3
   bfbdc:	b90a      	cbnz	r2, bfbe2 <__lo0bits+0x32>
   bfbde:	3008      	adds	r0, #8
   bfbe0:	0a1b      	lsrs	r3, r3, #8
   bfbe2:	071a      	lsls	r2, r3, #28
   bfbe4:	bf04      	itt	eq
   bfbe6:	091b      	lsreq	r3, r3, #4
   bfbe8:	3004      	addeq	r0, #4
   bfbea:	079a      	lsls	r2, r3, #30
   bfbec:	bf04      	itt	eq
   bfbee:	089b      	lsreq	r3, r3, #2
   bfbf0:	3002      	addeq	r0, #2
   bfbf2:	07da      	lsls	r2, r3, #31
   bfbf4:	d403      	bmi.n	bfbfe <__lo0bits+0x4e>
   bfbf6:	085b      	lsrs	r3, r3, #1
   bfbf8:	f100 0001 	add.w	r0, r0, #1
   bfbfc:	d005      	beq.n	bfc0a <__lo0bits+0x5a>
   bfbfe:	600b      	str	r3, [r1, #0]
   bfc00:	4770      	bx	lr
   bfc02:	4610      	mov	r0, r2
   bfc04:	e7e9      	b.n	bfbda <__lo0bits+0x2a>
   bfc06:	2000      	movs	r0, #0
   bfc08:	4770      	bx	lr
   bfc0a:	2020      	movs	r0, #32
   bfc0c:	4770      	bx	lr
	...

000bfc10 <__i2b>:
   bfc10:	b510      	push	{r4, lr}
   bfc12:	460c      	mov	r4, r1
   bfc14:	2101      	movs	r1, #1
   bfc16:	f7ff feb9 	bl	bf98c <_Balloc>
   bfc1a:	4602      	mov	r2, r0
   bfc1c:	b928      	cbnz	r0, bfc2a <__i2b+0x1a>
   bfc1e:	4b05      	ldr	r3, [pc, #20]	; (bfc34 <__i2b+0x24>)
   bfc20:	4805      	ldr	r0, [pc, #20]	; (bfc38 <__i2b+0x28>)
   bfc22:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bfc26:	f7f9 fdf7 	bl	b9818 <__assert_func>
   bfc2a:	2301      	movs	r3, #1
   bfc2c:	6144      	str	r4, [r0, #20]
   bfc2e:	6103      	str	r3, [r0, #16]
   bfc30:	bd10      	pop	{r4, pc}
   bfc32:	bf00      	nop
   bfc34:	000c1d61 	.word	0x000c1d61
   bfc38:	000c1de8 	.word	0x000c1de8

000bfc3c <__multiply>:
   bfc3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfc40:	4691      	mov	r9, r2
   bfc42:	690a      	ldr	r2, [r1, #16]
   bfc44:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bfc48:	429a      	cmp	r2, r3
   bfc4a:	bfb8      	it	lt
   bfc4c:	460b      	movlt	r3, r1
   bfc4e:	460c      	mov	r4, r1
   bfc50:	bfbc      	itt	lt
   bfc52:	464c      	movlt	r4, r9
   bfc54:	4699      	movlt	r9, r3
   bfc56:	6927      	ldr	r7, [r4, #16]
   bfc58:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bfc5c:	68a3      	ldr	r3, [r4, #8]
   bfc5e:	6861      	ldr	r1, [r4, #4]
   bfc60:	eb07 060a 	add.w	r6, r7, sl
   bfc64:	42b3      	cmp	r3, r6
   bfc66:	b085      	sub	sp, #20
   bfc68:	bfb8      	it	lt
   bfc6a:	3101      	addlt	r1, #1
   bfc6c:	f7ff fe8e 	bl	bf98c <_Balloc>
   bfc70:	b930      	cbnz	r0, bfc80 <__multiply+0x44>
   bfc72:	4602      	mov	r2, r0
   bfc74:	4b44      	ldr	r3, [pc, #272]	; (bfd88 <__multiply+0x14c>)
   bfc76:	4845      	ldr	r0, [pc, #276]	; (bfd8c <__multiply+0x150>)
   bfc78:	f240 115d 	movw	r1, #349	; 0x15d
   bfc7c:	f7f9 fdcc 	bl	b9818 <__assert_func>
   bfc80:	f100 0514 	add.w	r5, r0, #20
   bfc84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bfc88:	462b      	mov	r3, r5
   bfc8a:	2200      	movs	r2, #0
   bfc8c:	4543      	cmp	r3, r8
   bfc8e:	d321      	bcc.n	bfcd4 <__multiply+0x98>
   bfc90:	f104 0314 	add.w	r3, r4, #20
   bfc94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bfc98:	f109 0314 	add.w	r3, r9, #20
   bfc9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bfca0:	9202      	str	r2, [sp, #8]
   bfca2:	1b3a      	subs	r2, r7, r4
   bfca4:	3a15      	subs	r2, #21
   bfca6:	f022 0203 	bic.w	r2, r2, #3
   bfcaa:	3204      	adds	r2, #4
   bfcac:	f104 0115 	add.w	r1, r4, #21
   bfcb0:	428f      	cmp	r7, r1
   bfcb2:	bf38      	it	cc
   bfcb4:	2204      	movcc	r2, #4
   bfcb6:	9201      	str	r2, [sp, #4]
   bfcb8:	9a02      	ldr	r2, [sp, #8]
   bfcba:	9303      	str	r3, [sp, #12]
   bfcbc:	429a      	cmp	r2, r3
   bfcbe:	d80c      	bhi.n	bfcda <__multiply+0x9e>
   bfcc0:	2e00      	cmp	r6, #0
   bfcc2:	dd03      	ble.n	bfccc <__multiply+0x90>
   bfcc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bfcc8:	2b00      	cmp	r3, #0
   bfcca:	d05a      	beq.n	bfd82 <__multiply+0x146>
   bfccc:	6106      	str	r6, [r0, #16]
   bfcce:	b005      	add	sp, #20
   bfcd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bfcd4:	f843 2b04 	str.w	r2, [r3], #4
   bfcd8:	e7d8      	b.n	bfc8c <__multiply+0x50>
   bfcda:	f8b3 a000 	ldrh.w	sl, [r3]
   bfcde:	f1ba 0f00 	cmp.w	sl, #0
   bfce2:	d024      	beq.n	bfd2e <__multiply+0xf2>
   bfce4:	f104 0e14 	add.w	lr, r4, #20
   bfce8:	46a9      	mov	r9, r5
   bfcea:	f04f 0c00 	mov.w	ip, #0
   bfcee:	f85e 2b04 	ldr.w	r2, [lr], #4
   bfcf2:	f8d9 1000 	ldr.w	r1, [r9]
   bfcf6:	fa1f fb82 	uxth.w	fp, r2
   bfcfa:	b289      	uxth	r1, r1
   bfcfc:	fb0a 110b 	mla	r1, sl, fp, r1
   bfd00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bfd04:	f8d9 2000 	ldr.w	r2, [r9]
   bfd08:	4461      	add	r1, ip
   bfd0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bfd0e:	fb0a c20b 	mla	r2, sl, fp, ip
   bfd12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bfd16:	b289      	uxth	r1, r1
   bfd18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bfd1c:	4577      	cmp	r7, lr
   bfd1e:	f849 1b04 	str.w	r1, [r9], #4
   bfd22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bfd26:	d8e2      	bhi.n	bfcee <__multiply+0xb2>
   bfd28:	9a01      	ldr	r2, [sp, #4]
   bfd2a:	f845 c002 	str.w	ip, [r5, r2]
   bfd2e:	9a03      	ldr	r2, [sp, #12]
   bfd30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bfd34:	3304      	adds	r3, #4
   bfd36:	f1b9 0f00 	cmp.w	r9, #0
   bfd3a:	d020      	beq.n	bfd7e <__multiply+0x142>
   bfd3c:	6829      	ldr	r1, [r5, #0]
   bfd3e:	f104 0c14 	add.w	ip, r4, #20
   bfd42:	46ae      	mov	lr, r5
   bfd44:	f04f 0a00 	mov.w	sl, #0
   bfd48:	f8bc b000 	ldrh.w	fp, [ip]
   bfd4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bfd50:	fb09 220b 	mla	r2, r9, fp, r2
   bfd54:	4492      	add	sl, r2
   bfd56:	b289      	uxth	r1, r1
   bfd58:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bfd5c:	f84e 1b04 	str.w	r1, [lr], #4
   bfd60:	f85c 2b04 	ldr.w	r2, [ip], #4
   bfd64:	f8be 1000 	ldrh.w	r1, [lr]
   bfd68:	0c12      	lsrs	r2, r2, #16
   bfd6a:	fb09 1102 	mla	r1, r9, r2, r1
   bfd6e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bfd72:	4567      	cmp	r7, ip
   bfd74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bfd78:	d8e6      	bhi.n	bfd48 <__multiply+0x10c>
   bfd7a:	9a01      	ldr	r2, [sp, #4]
   bfd7c:	50a9      	str	r1, [r5, r2]
   bfd7e:	3504      	adds	r5, #4
   bfd80:	e79a      	b.n	bfcb8 <__multiply+0x7c>
   bfd82:	3e01      	subs	r6, #1
   bfd84:	e79c      	b.n	bfcc0 <__multiply+0x84>
   bfd86:	bf00      	nop
   bfd88:	000c1d61 	.word	0x000c1d61
   bfd8c:	000c1de8 	.word	0x000c1de8

000bfd90 <__pow5mult>:
   bfd90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bfd94:	4615      	mov	r5, r2
   bfd96:	f012 0203 	ands.w	r2, r2, #3
   bfd9a:	4606      	mov	r6, r0
   bfd9c:	460f      	mov	r7, r1
   bfd9e:	d007      	beq.n	bfdb0 <__pow5mult+0x20>
   bfda0:	4c25      	ldr	r4, [pc, #148]	; (bfe38 <__pow5mult+0xa8>)
   bfda2:	3a01      	subs	r2, #1
   bfda4:	2300      	movs	r3, #0
   bfda6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bfdaa:	f7ff fe51 	bl	bfa50 <__multadd>
   bfdae:	4607      	mov	r7, r0
   bfdb0:	10ad      	asrs	r5, r5, #2
   bfdb2:	d03d      	beq.n	bfe30 <__pow5mult+0xa0>
   bfdb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bfdb6:	b97c      	cbnz	r4, bfdd8 <__pow5mult+0x48>
   bfdb8:	2010      	movs	r0, #16
   bfdba:	f7f9 fcdd 	bl	b9778 <malloc>
   bfdbe:	4602      	mov	r2, r0
   bfdc0:	6270      	str	r0, [r6, #36]	; 0x24
   bfdc2:	b928      	cbnz	r0, bfdd0 <__pow5mult+0x40>
   bfdc4:	4b1d      	ldr	r3, [pc, #116]	; (bfe3c <__pow5mult+0xac>)
   bfdc6:	481e      	ldr	r0, [pc, #120]	; (bfe40 <__pow5mult+0xb0>)
   bfdc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bfdcc:	f7f9 fd24 	bl	b9818 <__assert_func>
   bfdd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bfdd4:	6004      	str	r4, [r0, #0]
   bfdd6:	60c4      	str	r4, [r0, #12]
   bfdd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bfddc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bfde0:	b94c      	cbnz	r4, bfdf6 <__pow5mult+0x66>
   bfde2:	f240 2171 	movw	r1, #625	; 0x271
   bfde6:	4630      	mov	r0, r6
   bfde8:	f7ff ff12 	bl	bfc10 <__i2b>
   bfdec:	2300      	movs	r3, #0
   bfdee:	f8c8 0008 	str.w	r0, [r8, #8]
   bfdf2:	4604      	mov	r4, r0
   bfdf4:	6003      	str	r3, [r0, #0]
   bfdf6:	f04f 0900 	mov.w	r9, #0
   bfdfa:	07eb      	lsls	r3, r5, #31
   bfdfc:	d50a      	bpl.n	bfe14 <__pow5mult+0x84>
   bfdfe:	4639      	mov	r1, r7
   bfe00:	4622      	mov	r2, r4
   bfe02:	4630      	mov	r0, r6
   bfe04:	f7ff ff1a 	bl	bfc3c <__multiply>
   bfe08:	4639      	mov	r1, r7
   bfe0a:	4680      	mov	r8, r0
   bfe0c:	4630      	mov	r0, r6
   bfe0e:	f7ff fdfd 	bl	bfa0c <_Bfree>
   bfe12:	4647      	mov	r7, r8
   bfe14:	106d      	asrs	r5, r5, #1
   bfe16:	d00b      	beq.n	bfe30 <__pow5mult+0xa0>
   bfe18:	6820      	ldr	r0, [r4, #0]
   bfe1a:	b938      	cbnz	r0, bfe2c <__pow5mult+0x9c>
   bfe1c:	4622      	mov	r2, r4
   bfe1e:	4621      	mov	r1, r4
   bfe20:	4630      	mov	r0, r6
   bfe22:	f7ff ff0b 	bl	bfc3c <__multiply>
   bfe26:	6020      	str	r0, [r4, #0]
   bfe28:	f8c0 9000 	str.w	r9, [r0]
   bfe2c:	4604      	mov	r4, r0
   bfe2e:	e7e4      	b.n	bfdfa <__pow5mult+0x6a>
   bfe30:	4638      	mov	r0, r7
   bfe32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bfe36:	bf00      	nop
   bfe38:	000c1f38 	.word	0x000c1f38
   bfe3c:	000c1b91 	.word	0x000c1b91
   bfe40:	000c1de8 	.word	0x000c1de8

000bfe44 <__lshift>:
   bfe44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bfe48:	460c      	mov	r4, r1
   bfe4a:	6849      	ldr	r1, [r1, #4]
   bfe4c:	6923      	ldr	r3, [r4, #16]
   bfe4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bfe52:	68a3      	ldr	r3, [r4, #8]
   bfe54:	4607      	mov	r7, r0
   bfe56:	4691      	mov	r9, r2
   bfe58:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bfe5c:	f108 0601 	add.w	r6, r8, #1
   bfe60:	42b3      	cmp	r3, r6
   bfe62:	db0b      	blt.n	bfe7c <__lshift+0x38>
   bfe64:	4638      	mov	r0, r7
   bfe66:	f7ff fd91 	bl	bf98c <_Balloc>
   bfe6a:	4605      	mov	r5, r0
   bfe6c:	b948      	cbnz	r0, bfe82 <__lshift+0x3e>
   bfe6e:	4602      	mov	r2, r0
   bfe70:	4b2a      	ldr	r3, [pc, #168]	; (bff1c <__lshift+0xd8>)
   bfe72:	482b      	ldr	r0, [pc, #172]	; (bff20 <__lshift+0xdc>)
   bfe74:	f240 11d9 	movw	r1, #473	; 0x1d9
   bfe78:	f7f9 fcce 	bl	b9818 <__assert_func>
   bfe7c:	3101      	adds	r1, #1
   bfe7e:	005b      	lsls	r3, r3, #1
   bfe80:	e7ee      	b.n	bfe60 <__lshift+0x1c>
   bfe82:	2300      	movs	r3, #0
   bfe84:	f100 0114 	add.w	r1, r0, #20
   bfe88:	f100 0210 	add.w	r2, r0, #16
   bfe8c:	4618      	mov	r0, r3
   bfe8e:	4553      	cmp	r3, sl
   bfe90:	db37      	blt.n	bff02 <__lshift+0xbe>
   bfe92:	6920      	ldr	r0, [r4, #16]
   bfe94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bfe98:	f104 0314 	add.w	r3, r4, #20
   bfe9c:	f019 091f 	ands.w	r9, r9, #31
   bfea0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bfea4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bfea8:	d02f      	beq.n	bff0a <__lshift+0xc6>
   bfeaa:	f1c9 0e20 	rsb	lr, r9, #32
   bfeae:	468a      	mov	sl, r1
   bfeb0:	f04f 0c00 	mov.w	ip, #0
   bfeb4:	681a      	ldr	r2, [r3, #0]
   bfeb6:	fa02 f209 	lsl.w	r2, r2, r9
   bfeba:	ea42 020c 	orr.w	r2, r2, ip
   bfebe:	f84a 2b04 	str.w	r2, [sl], #4
   bfec2:	f853 2b04 	ldr.w	r2, [r3], #4
   bfec6:	4298      	cmp	r0, r3
   bfec8:	fa22 fc0e 	lsr.w	ip, r2, lr
   bfecc:	d8f2      	bhi.n	bfeb4 <__lshift+0x70>
   bfece:	1b03      	subs	r3, r0, r4
   bfed0:	3b15      	subs	r3, #21
   bfed2:	f023 0303 	bic.w	r3, r3, #3
   bfed6:	3304      	adds	r3, #4
   bfed8:	f104 0215 	add.w	r2, r4, #21
   bfedc:	4290      	cmp	r0, r2
   bfede:	bf38      	it	cc
   bfee0:	2304      	movcc	r3, #4
   bfee2:	f841 c003 	str.w	ip, [r1, r3]
   bfee6:	f1bc 0f00 	cmp.w	ip, #0
   bfeea:	d001      	beq.n	bfef0 <__lshift+0xac>
   bfeec:	f108 0602 	add.w	r6, r8, #2
   bfef0:	3e01      	subs	r6, #1
   bfef2:	4638      	mov	r0, r7
   bfef4:	612e      	str	r6, [r5, #16]
   bfef6:	4621      	mov	r1, r4
   bfef8:	f7ff fd88 	bl	bfa0c <_Bfree>
   bfefc:	4628      	mov	r0, r5
   bfefe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bff02:	f842 0f04 	str.w	r0, [r2, #4]!
   bff06:	3301      	adds	r3, #1
   bff08:	e7c1      	b.n	bfe8e <__lshift+0x4a>
   bff0a:	3904      	subs	r1, #4
   bff0c:	f853 2b04 	ldr.w	r2, [r3], #4
   bff10:	f841 2f04 	str.w	r2, [r1, #4]!
   bff14:	4298      	cmp	r0, r3
   bff16:	d8f9      	bhi.n	bff0c <__lshift+0xc8>
   bff18:	e7ea      	b.n	bfef0 <__lshift+0xac>
   bff1a:	bf00      	nop
   bff1c:	000c1d61 	.word	0x000c1d61
   bff20:	000c1de8 	.word	0x000c1de8

000bff24 <__mcmp>:
   bff24:	b530      	push	{r4, r5, lr}
   bff26:	6902      	ldr	r2, [r0, #16]
   bff28:	690c      	ldr	r4, [r1, #16]
   bff2a:	1b12      	subs	r2, r2, r4
   bff2c:	d10e      	bne.n	bff4c <__mcmp+0x28>
   bff2e:	f100 0314 	add.w	r3, r0, #20
   bff32:	3114      	adds	r1, #20
   bff34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bff38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bff3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bff40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bff44:	42a5      	cmp	r5, r4
   bff46:	d003      	beq.n	bff50 <__mcmp+0x2c>
   bff48:	d305      	bcc.n	bff56 <__mcmp+0x32>
   bff4a:	2201      	movs	r2, #1
   bff4c:	4610      	mov	r0, r2
   bff4e:	bd30      	pop	{r4, r5, pc}
   bff50:	4283      	cmp	r3, r0
   bff52:	d3f3      	bcc.n	bff3c <__mcmp+0x18>
   bff54:	e7fa      	b.n	bff4c <__mcmp+0x28>
   bff56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bff5a:	e7f7      	b.n	bff4c <__mcmp+0x28>

000bff5c <__mdiff>:
   bff5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bff60:	460c      	mov	r4, r1
   bff62:	4606      	mov	r6, r0
   bff64:	4611      	mov	r1, r2
   bff66:	4620      	mov	r0, r4
   bff68:	4690      	mov	r8, r2
   bff6a:	f7ff ffdb 	bl	bff24 <__mcmp>
   bff6e:	1e05      	subs	r5, r0, #0
   bff70:	d110      	bne.n	bff94 <__mdiff+0x38>
   bff72:	4629      	mov	r1, r5
   bff74:	4630      	mov	r0, r6
   bff76:	f7ff fd09 	bl	bf98c <_Balloc>
   bff7a:	b930      	cbnz	r0, bff8a <__mdiff+0x2e>
   bff7c:	4b3a      	ldr	r3, [pc, #232]	; (c0068 <__mdiff+0x10c>)
   bff7e:	4602      	mov	r2, r0
   bff80:	f240 2132 	movw	r1, #562	; 0x232
   bff84:	4839      	ldr	r0, [pc, #228]	; (c006c <__mdiff+0x110>)
   bff86:	f7f9 fc47 	bl	b9818 <__assert_func>
   bff8a:	2301      	movs	r3, #1
   bff8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bff90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bff94:	bfa4      	itt	ge
   bff96:	4643      	movge	r3, r8
   bff98:	46a0      	movge	r8, r4
   bff9a:	4630      	mov	r0, r6
   bff9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bffa0:	bfa6      	itte	ge
   bffa2:	461c      	movge	r4, r3
   bffa4:	2500      	movge	r5, #0
   bffa6:	2501      	movlt	r5, #1
   bffa8:	f7ff fcf0 	bl	bf98c <_Balloc>
   bffac:	b920      	cbnz	r0, bffb8 <__mdiff+0x5c>
   bffae:	4b2e      	ldr	r3, [pc, #184]	; (c0068 <__mdiff+0x10c>)
   bffb0:	4602      	mov	r2, r0
   bffb2:	f44f 7110 	mov.w	r1, #576	; 0x240
   bffb6:	e7e5      	b.n	bff84 <__mdiff+0x28>
   bffb8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bffbc:	6926      	ldr	r6, [r4, #16]
   bffbe:	60c5      	str	r5, [r0, #12]
   bffc0:	f104 0914 	add.w	r9, r4, #20
   bffc4:	f108 0514 	add.w	r5, r8, #20
   bffc8:	f100 0e14 	add.w	lr, r0, #20
   bffcc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bffd0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bffd4:	f108 0210 	add.w	r2, r8, #16
   bffd8:	46f2      	mov	sl, lr
   bffda:	2100      	movs	r1, #0
   bffdc:	f859 3b04 	ldr.w	r3, [r9], #4
   bffe0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bffe4:	fa1f f883 	uxth.w	r8, r3
   bffe8:	fa11 f18b 	uxtah	r1, r1, fp
   bffec:	0c1b      	lsrs	r3, r3, #16
   bffee:	eba1 0808 	sub.w	r8, r1, r8
   bfff2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bfff6:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bfffa:	fa1f f888 	uxth.w	r8, r8
   bfffe:	1419      	asrs	r1, r3, #16
   c0000:	454e      	cmp	r6, r9
   c0002:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c0006:	f84a 3b04 	str.w	r3, [sl], #4
   c000a:	d8e7      	bhi.n	bffdc <__mdiff+0x80>
   c000c:	1b33      	subs	r3, r6, r4
   c000e:	3b15      	subs	r3, #21
   c0010:	f023 0303 	bic.w	r3, r3, #3
   c0014:	3304      	adds	r3, #4
   c0016:	3415      	adds	r4, #21
   c0018:	42a6      	cmp	r6, r4
   c001a:	bf38      	it	cc
   c001c:	2304      	movcc	r3, #4
   c001e:	441d      	add	r5, r3
   c0020:	4473      	add	r3, lr
   c0022:	469e      	mov	lr, r3
   c0024:	462e      	mov	r6, r5
   c0026:	4566      	cmp	r6, ip
   c0028:	d30e      	bcc.n	c0048 <__mdiff+0xec>
   c002a:	f10c 0203 	add.w	r2, ip, #3
   c002e:	1b52      	subs	r2, r2, r5
   c0030:	f022 0203 	bic.w	r2, r2, #3
   c0034:	3d03      	subs	r5, #3
   c0036:	45ac      	cmp	ip, r5
   c0038:	bf38      	it	cc
   c003a:	2200      	movcc	r2, #0
   c003c:	441a      	add	r2, r3
   c003e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c0042:	b17b      	cbz	r3, c0064 <__mdiff+0x108>
   c0044:	6107      	str	r7, [r0, #16]
   c0046:	e7a3      	b.n	bff90 <__mdiff+0x34>
   c0048:	f856 8b04 	ldr.w	r8, [r6], #4
   c004c:	fa11 f288 	uxtah	r2, r1, r8
   c0050:	1414      	asrs	r4, r2, #16
   c0052:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c0056:	b292      	uxth	r2, r2
   c0058:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c005c:	f84e 2b04 	str.w	r2, [lr], #4
   c0060:	1421      	asrs	r1, r4, #16
   c0062:	e7e0      	b.n	c0026 <__mdiff+0xca>
   c0064:	3f01      	subs	r7, #1
   c0066:	e7ea      	b.n	c003e <__mdiff+0xe2>
   c0068:	000c1d61 	.word	0x000c1d61
   c006c:	000c1de8 	.word	0x000c1de8

000c0070 <__ulp>:
   c0070:	b082      	sub	sp, #8
   c0072:	ed8d 0b00 	vstr	d0, [sp]
   c0076:	9b01      	ldr	r3, [sp, #4]
   c0078:	4912      	ldr	r1, [pc, #72]	; (c00c4 <__ulp+0x54>)
   c007a:	4019      	ands	r1, r3
   c007c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c0080:	2900      	cmp	r1, #0
   c0082:	dd05      	ble.n	c0090 <__ulp+0x20>
   c0084:	2200      	movs	r2, #0
   c0086:	460b      	mov	r3, r1
   c0088:	ec43 2b10 	vmov	d0, r2, r3
   c008c:	b002      	add	sp, #8
   c008e:	4770      	bx	lr
   c0090:	4249      	negs	r1, r1
   c0092:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c0096:	ea4f 5021 	mov.w	r0, r1, asr #20
   c009a:	f04f 0200 	mov.w	r2, #0
   c009e:	f04f 0300 	mov.w	r3, #0
   c00a2:	da04      	bge.n	c00ae <__ulp+0x3e>
   c00a4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c00a8:	fa41 f300 	asr.w	r3, r1, r0
   c00ac:	e7ec      	b.n	c0088 <__ulp+0x18>
   c00ae:	f1a0 0114 	sub.w	r1, r0, #20
   c00b2:	291e      	cmp	r1, #30
   c00b4:	bfda      	itte	le
   c00b6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c00ba:	fa20 f101 	lsrle.w	r1, r0, r1
   c00be:	2101      	movgt	r1, #1
   c00c0:	460a      	mov	r2, r1
   c00c2:	e7e1      	b.n	c0088 <__ulp+0x18>
   c00c4:	7ff00000 	.word	0x7ff00000

000c00c8 <__b2d>:
   c00c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c00ca:	6905      	ldr	r5, [r0, #16]
   c00cc:	f100 0714 	add.w	r7, r0, #20
   c00d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c00d4:	1f2e      	subs	r6, r5, #4
   c00d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c00da:	4620      	mov	r0, r4
   c00dc:	f7ff fd48 	bl	bfb70 <__hi0bits>
   c00e0:	f1c0 0320 	rsb	r3, r0, #32
   c00e4:	280a      	cmp	r0, #10
   c00e6:	f8df c07c 	ldr.w	ip, [pc, #124]	; c0164 <__b2d+0x9c>
   c00ea:	600b      	str	r3, [r1, #0]
   c00ec:	dc14      	bgt.n	c0118 <__b2d+0x50>
   c00ee:	f1c0 0e0b 	rsb	lr, r0, #11
   c00f2:	fa24 f10e 	lsr.w	r1, r4, lr
   c00f6:	42b7      	cmp	r7, r6
   c00f8:	ea41 030c 	orr.w	r3, r1, ip
   c00fc:	bf34      	ite	cc
   c00fe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c0102:	2100      	movcs	r1, #0
   c0104:	3015      	adds	r0, #21
   c0106:	fa04 f000 	lsl.w	r0, r4, r0
   c010a:	fa21 f10e 	lsr.w	r1, r1, lr
   c010e:	ea40 0201 	orr.w	r2, r0, r1
   c0112:	ec43 2b10 	vmov	d0, r2, r3
   c0116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c0118:	42b7      	cmp	r7, r6
   c011a:	bf3a      	itte	cc
   c011c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c0120:	f1a5 0608 	subcc.w	r6, r5, #8
   c0124:	2100      	movcs	r1, #0
   c0126:	380b      	subs	r0, #11
   c0128:	d017      	beq.n	c015a <__b2d+0x92>
   c012a:	f1c0 0c20 	rsb	ip, r0, #32
   c012e:	fa04 f500 	lsl.w	r5, r4, r0
   c0132:	42be      	cmp	r6, r7
   c0134:	fa21 f40c 	lsr.w	r4, r1, ip
   c0138:	ea45 0504 	orr.w	r5, r5, r4
   c013c:	bf8c      	ite	hi
   c013e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c0142:	2400      	movls	r4, #0
   c0144:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c0148:	fa01 f000 	lsl.w	r0, r1, r0
   c014c:	fa24 f40c 	lsr.w	r4, r4, ip
   c0150:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c0154:	ea40 0204 	orr.w	r2, r0, r4
   c0158:	e7db      	b.n	c0112 <__b2d+0x4a>
   c015a:	ea44 030c 	orr.w	r3, r4, ip
   c015e:	460a      	mov	r2, r1
   c0160:	e7d7      	b.n	c0112 <__b2d+0x4a>
   c0162:	bf00      	nop
   c0164:	3ff00000 	.word	0x3ff00000

000c0168 <__d2b>:
   c0168:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c016c:	4689      	mov	r9, r1
   c016e:	2101      	movs	r1, #1
   c0170:	ec57 6b10 	vmov	r6, r7, d0
   c0174:	4690      	mov	r8, r2
   c0176:	f7ff fc09 	bl	bf98c <_Balloc>
   c017a:	4604      	mov	r4, r0
   c017c:	b930      	cbnz	r0, c018c <__d2b+0x24>
   c017e:	4602      	mov	r2, r0
   c0180:	4b25      	ldr	r3, [pc, #148]	; (c0218 <__d2b+0xb0>)
   c0182:	4826      	ldr	r0, [pc, #152]	; (c021c <__d2b+0xb4>)
   c0184:	f240 310a 	movw	r1, #778	; 0x30a
   c0188:	f7f9 fb46 	bl	b9818 <__assert_func>
   c018c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c0190:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c0194:	bb35      	cbnz	r5, c01e4 <__d2b+0x7c>
   c0196:	2e00      	cmp	r6, #0
   c0198:	9301      	str	r3, [sp, #4]
   c019a:	d028      	beq.n	c01ee <__d2b+0x86>
   c019c:	4668      	mov	r0, sp
   c019e:	9600      	str	r6, [sp, #0]
   c01a0:	f7ff fd06 	bl	bfbb0 <__lo0bits>
   c01a4:	9900      	ldr	r1, [sp, #0]
   c01a6:	b300      	cbz	r0, c01ea <__d2b+0x82>
   c01a8:	9a01      	ldr	r2, [sp, #4]
   c01aa:	f1c0 0320 	rsb	r3, r0, #32
   c01ae:	fa02 f303 	lsl.w	r3, r2, r3
   c01b2:	430b      	orrs	r3, r1
   c01b4:	40c2      	lsrs	r2, r0
   c01b6:	6163      	str	r3, [r4, #20]
   c01b8:	9201      	str	r2, [sp, #4]
   c01ba:	9b01      	ldr	r3, [sp, #4]
   c01bc:	61a3      	str	r3, [r4, #24]
   c01be:	2b00      	cmp	r3, #0
   c01c0:	bf14      	ite	ne
   c01c2:	2202      	movne	r2, #2
   c01c4:	2201      	moveq	r2, #1
   c01c6:	6122      	str	r2, [r4, #16]
   c01c8:	b1d5      	cbz	r5, c0200 <__d2b+0x98>
   c01ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c01ce:	4405      	add	r5, r0
   c01d0:	f8c9 5000 	str.w	r5, [r9]
   c01d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c01d8:	f8c8 0000 	str.w	r0, [r8]
   c01dc:	4620      	mov	r0, r4
   c01de:	b003      	add	sp, #12
   c01e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c01e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c01e8:	e7d5      	b.n	c0196 <__d2b+0x2e>
   c01ea:	6161      	str	r1, [r4, #20]
   c01ec:	e7e5      	b.n	c01ba <__d2b+0x52>
   c01ee:	a801      	add	r0, sp, #4
   c01f0:	f7ff fcde 	bl	bfbb0 <__lo0bits>
   c01f4:	9b01      	ldr	r3, [sp, #4]
   c01f6:	6163      	str	r3, [r4, #20]
   c01f8:	2201      	movs	r2, #1
   c01fa:	6122      	str	r2, [r4, #16]
   c01fc:	3020      	adds	r0, #32
   c01fe:	e7e3      	b.n	c01c8 <__d2b+0x60>
   c0200:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c0204:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c0208:	f8c9 0000 	str.w	r0, [r9]
   c020c:	6918      	ldr	r0, [r3, #16]
   c020e:	f7ff fcaf 	bl	bfb70 <__hi0bits>
   c0212:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c0216:	e7df      	b.n	c01d8 <__d2b+0x70>
   c0218:	000c1d61 	.word	0x000c1d61
   c021c:	000c1de8 	.word	0x000c1de8

000c0220 <__ratio>:
   c0220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0224:	4688      	mov	r8, r1
   c0226:	4669      	mov	r1, sp
   c0228:	4681      	mov	r9, r0
   c022a:	f7ff ff4d 	bl	c00c8 <__b2d>
   c022e:	a901      	add	r1, sp, #4
   c0230:	4640      	mov	r0, r8
   c0232:	ec55 4b10 	vmov	r4, r5, d0
   c0236:	f7ff ff47 	bl	c00c8 <__b2d>
   c023a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c023e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c0242:	eba3 0c02 	sub.w	ip, r3, r2
   c0246:	e9dd 3200 	ldrd	r3, r2, [sp]
   c024a:	1a9b      	subs	r3, r3, r2
   c024c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c0250:	ec51 0b10 	vmov	r0, r1, d0
   c0254:	2b00      	cmp	r3, #0
   c0256:	bfd6      	itet	le
   c0258:	460a      	movle	r2, r1
   c025a:	462a      	movgt	r2, r5
   c025c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c0260:	468b      	mov	fp, r1
   c0262:	462f      	mov	r7, r5
   c0264:	bfd4      	ite	le
   c0266:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c026a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c026e:	4620      	mov	r0, r4
   c0270:	ee10 2a10 	vmov	r2, s0
   c0274:	465b      	mov	r3, fp
   c0276:	4639      	mov	r1, r7
   c0278:	f7fd fdb2 	bl	bdde0 <__aeabi_ddiv>
   c027c:	ec41 0b10 	vmov	d0, r0, r1
   c0280:	b003      	add	sp, #12
   c0282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c0286 <__copybits>:
   c0286:	3901      	subs	r1, #1
   c0288:	b570      	push	{r4, r5, r6, lr}
   c028a:	1149      	asrs	r1, r1, #5
   c028c:	6914      	ldr	r4, [r2, #16]
   c028e:	3101      	adds	r1, #1
   c0290:	f102 0314 	add.w	r3, r2, #20
   c0294:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c0298:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c029c:	1f05      	subs	r5, r0, #4
   c029e:	42a3      	cmp	r3, r4
   c02a0:	d30c      	bcc.n	c02bc <__copybits+0x36>
   c02a2:	1aa3      	subs	r3, r4, r2
   c02a4:	3b11      	subs	r3, #17
   c02a6:	f023 0303 	bic.w	r3, r3, #3
   c02aa:	3211      	adds	r2, #17
   c02ac:	42a2      	cmp	r2, r4
   c02ae:	bf88      	it	hi
   c02b0:	2300      	movhi	r3, #0
   c02b2:	4418      	add	r0, r3
   c02b4:	2300      	movs	r3, #0
   c02b6:	4288      	cmp	r0, r1
   c02b8:	d305      	bcc.n	c02c6 <__copybits+0x40>
   c02ba:	bd70      	pop	{r4, r5, r6, pc}
   c02bc:	f853 6b04 	ldr.w	r6, [r3], #4
   c02c0:	f845 6f04 	str.w	r6, [r5, #4]!
   c02c4:	e7eb      	b.n	c029e <__copybits+0x18>
   c02c6:	f840 3b04 	str.w	r3, [r0], #4
   c02ca:	e7f4      	b.n	c02b6 <__copybits+0x30>

000c02cc <__any_on>:
   c02cc:	f100 0214 	add.w	r2, r0, #20
   c02d0:	6900      	ldr	r0, [r0, #16]
   c02d2:	114b      	asrs	r3, r1, #5
   c02d4:	4298      	cmp	r0, r3
   c02d6:	b510      	push	{r4, lr}
   c02d8:	db11      	blt.n	c02fe <__any_on+0x32>
   c02da:	dd0a      	ble.n	c02f2 <__any_on+0x26>
   c02dc:	f011 011f 	ands.w	r1, r1, #31
   c02e0:	d007      	beq.n	c02f2 <__any_on+0x26>
   c02e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c02e6:	fa24 f001 	lsr.w	r0, r4, r1
   c02ea:	fa00 f101 	lsl.w	r1, r0, r1
   c02ee:	428c      	cmp	r4, r1
   c02f0:	d10b      	bne.n	c030a <__any_on+0x3e>
   c02f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c02f6:	4293      	cmp	r3, r2
   c02f8:	d803      	bhi.n	c0302 <__any_on+0x36>
   c02fa:	2000      	movs	r0, #0
   c02fc:	bd10      	pop	{r4, pc}
   c02fe:	4603      	mov	r3, r0
   c0300:	e7f7      	b.n	c02f2 <__any_on+0x26>
   c0302:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c0306:	2900      	cmp	r1, #0
   c0308:	d0f5      	beq.n	c02f6 <__any_on+0x2a>
   c030a:	2001      	movs	r0, #1
   c030c:	e7f6      	b.n	c02fc <__any_on+0x30>

000c030e <_calloc_r>:
   c030e:	b513      	push	{r0, r1, r4, lr}
   c0310:	434a      	muls	r2, r1
   c0312:	4611      	mov	r1, r2
   c0314:	9201      	str	r2, [sp, #4]
   c0316:	f7f9 fa6f 	bl	b97f8 <_malloc_r>
   c031a:	4604      	mov	r4, r0
   c031c:	b118      	cbz	r0, c0326 <_calloc_r+0x18>
   c031e:	9a01      	ldr	r2, [sp, #4]
   c0320:	2100      	movs	r1, #0
   c0322:	f7fd ffa0 	bl	be266 <memset>
   c0326:	4620      	mov	r0, r4
   c0328:	b002      	add	sp, #8
   c032a:	bd10      	pop	{r4, pc}
   c032c:	0000      	movs	r0, r0
	...

000c0330 <nan>:
   c0330:	ed9f 0b01 	vldr	d0, [pc, #4]	; c0338 <nan+0x8>
   c0334:	4770      	bx	lr
   c0336:	bf00      	nop
   c0338:	00000000 	.word	0x00000000
   c033c:	7ff80000 	.word	0x7ff80000

000c0340 <__ascii_wctomb>:
   c0340:	b149      	cbz	r1, c0356 <__ascii_wctomb+0x16>
   c0342:	2aff      	cmp	r2, #255	; 0xff
   c0344:	bf85      	ittet	hi
   c0346:	238a      	movhi	r3, #138	; 0x8a
   c0348:	6003      	strhi	r3, [r0, #0]
   c034a:	700a      	strbls	r2, [r1, #0]
   c034c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c0350:	bf98      	it	ls
   c0352:	2001      	movls	r0, #1
   c0354:	4770      	bx	lr
   c0356:	4608      	mov	r0, r1
   c0358:	4770      	bx	lr
	...

000c035c <__aeabi_d2lz>:
   c035c:	b538      	push	{r3, r4, r5, lr}
   c035e:	2200      	movs	r2, #0
   c0360:	2300      	movs	r3, #0
   c0362:	4604      	mov	r4, r0
   c0364:	460d      	mov	r5, r1
   c0366:	f7fd fe83 	bl	be070 <__aeabi_dcmplt>
   c036a:	b928      	cbnz	r0, c0378 <__aeabi_d2lz+0x1c>
   c036c:	4620      	mov	r0, r4
   c036e:	4629      	mov	r1, r5
   c0370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c0374:	f7fd bf14 	b.w	be1a0 <__aeabi_d2ulz>
   c0378:	4620      	mov	r0, r4
   c037a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c037e:	f7fd ff0f 	bl	be1a0 <__aeabi_d2ulz>
   c0382:	4240      	negs	r0, r0
   c0384:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c0388:	bd38      	pop	{r3, r4, r5, pc}
   c038a:	bf00      	nop

000c038c <dynalib_user>:
   c038c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c039c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c03ac:	7620 7269 7574 6c61 4500 746e 7265 7420      virtual.Enter t
   c03bc:	6972 6767 7265 4a00 796f 7473 6369 206b     rigger.Joystick 
   c03cc:	7274 6769 6567 0072 6564 6166 6c75 2074     trigger.default 
   c03dc:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   c03ec:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   c03fc:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   c040c:	2520 2073 4f4d 4544 7525 003e 6966 656c      %s MODE%u>.file
   c041c:	616e 656d 4600 6c69 2065 2527 2773 6120     name.File '%s' a
   c042c:	726c 6165 7964 6520 6978 7473 2c73 6420     lready exists, d
   c043c:	6c65 7465 6e69 2067 6e61 2064 766f 7265     eleting and over
   c044c:	7277 7469 6e69 0067 7453 7261 6974 676e     writing.Starting
   c045c:	6f20 6666 6f6c 6461 6f20 2066 6966 656c      offload of file
   c046c:	203a 7325 6600 6c69 6365 6d6f 0070 6552     : %s.filecomp.Re
   c047c:	6361 6568 2064 6e65 2064 666f 6620 6c69     ached end of fil
   c048c:	3a65 2520 0073 6966 656c 6f64 656e 5200     e: %s.filedone.R
   c049c:	6365 6965 6576 2064 6f64 656e 6320 6d6f     eceived done com
   c04ac:	616d 646e 5b00 4157 4e52 205d 5052 2069     mand.[WARN] RPi 
   c04bc:	654d 7373 6761 2065 6843 6365 736b 6d75     Message Checksum
   c04cc:	4420 656f 2073 6f4e 2074 614d 6374 2168      Does Not Match!
   c04dc:	203a 7325 4300 2543 7332 616e 256b 7333     : %s.CC%2snak%3s
   c04ec:	6300 6c74 2500 2073 7325 2520 2073 6425     .ctl.%s %s %s %d
   c04fc:	2520 2064 6425 2500 2573 3230 0078 6f42      %d %d.%s%02x.Bo
   c050c:	3174 6164 0074 6548 6c6c 206f 6f57 6c72     t1dat.Hello Worl
   c051c:	2164 2121 2121 2121 4300 4243 6425 746d     d!!!!!!!.CCB%dmt
   c052c:	2572 3330 2564 3330 0064 4343 2542 6864     r%03d%03d.CCB%dh
   c053c:	6177 7600 6365 6f74 3a72 5f3a 5f4d 6172     wa.vector::_M_ra
   c054c:	676e 5f65 6863 6365 3a6b 5f20 6e5f 2820     nge_check: __n (
   c055c:	6877 6369 2068 7369 2520 757a 2029 3d3e     which is %zu) >=
   c056c:	7420 6968 2d73 733e 7a69 2865 2029 7728      this->size() (w
   c057c:	6968 6863 6920 2073 7a25 2975 5200 6769     hich is %zu).Rig
   c058c:	7468 7420 6972 6767 7265 4d00 646f 6669     ht trigger.Modif
   c059c:	6569 2064 6e61 4f20 2f6e 664f 2066 6f43     ied an On/Off Co
   c05ac:	746e 6f72 006c 6f42 3a74 2520 2c64 4d20     ntrol.Bot: %d, M
   c05bc:	646f 6669 6569 2064 5500 2070 7274 6769     odified .Up trig
   c05cc:	6567 0072 6f44 6e77 7420 6972 6767 7265     ger.Down trigger
   c05dc:	7600 6365 6f74 3a72 5f3a 5f4d 6572 6c61     .vector::_M_real
   c05ec:	6f6c 5f63 6e69 6573 7472 4300 6568 6b63     loc_insert.Check
   c05fc:	7573 3a6d 2520 3230 2c78 2520 3330 0064     sum: %02x, %03d.
   c060c:	7453 6972 676e 4c20 6e65 203a 6425 202c     String Len: %d, 
   c061c:	6843 6365 736b 6d75 203a 6425 5b00 4157     Checksum: %d.[WA
   c062c:	4e52 205d 6157 6e72 6e69 2c67 6320 6568     RN] Warning, che
   c063c:	6b63 7573 206d 6f64 7365 6e20 746f 6d20     cksum does not m
   c064c:	7461 6863 0021 6157 6e72 6e69 2c67 6320     atch!.Warning, c
   c065c:	6568 6b63 7573 206d 6f64 7365 6e20 746f     hecksum does not
   c066c:	6d20 7461 6863 6100 6b63 7300 7075 2500      match.ack.sup.%
   c067c:	2075 7525 2520 2073 7325 5300 6174 7574     u %u %s %s.Statu
   c068c:	2073 7055 6164 6574 0021 6e73 0073 7325     s Update!.sns.%s
   c069c:	2520 2073 6425 2520 2064 6425 2520 2064      %s %d %d %d %d 
   c06ac:	6425 4200 746f 2320 203a 6425 5420 6d65     %d.Bot #: %d Tem
   c06bc:	3a70 2520 0066 616e 006b 7768 0064 6f46     p: %f.nak.hwd.Fo
   c06cc:	6e75 2064 2061 656e 2077 6177 6574 2072     und a new water 
   c06dc:	6f62 2074 4449 7000 7374 5b00 5550 5354     bot ID.pts.[PUTS
   c06ec:	205d 6552 6563 7669 6465 5320 7274 6e69     ] Received Strin
   c06fc:	2067 6f43 6d6d 6e61 3a64 2520 0073 495b     g Command: %s.[I
   c070c:	464e 5d4f 5220 6365 6965 6576 2064 544c     NFO] Received LT
   c071c:	2045 654d 7373 6761 3a65 2520 0073 654e     E Message: %s.Ne
   c072c:	2077 5442 4320 6d6f 616d 646e 203a 5b00     w BT Command: .[
   c073c:	4e49 4f46 205d 6552 6563 7669 6465 4220     INFO] Received B
   c074c:	454c 4d20 7365 6173 6567 203a 7325 5b00     LE Message: %s.[
   c075c:	4e49 4f46 205d 6552 6563 7669 6465 5220     INFO] Received R
   c076c:	7361 6270 7265 7972 5020 2069 654d 7373     aspberry Pi Mess
   c077c:	6761 3a65 2520 0073 654e 2077 4258 6565     age: %s.New XBee
   c078c:	4320 6d6f 616d 646e 003a 495b 464e 5d4f      Command:.[INFO]
   c079c:	5220 6365 6965 6576 2064 4258 6565 4d20      Received XBee M
   c07ac:	7365 6173 6567 203a 7325 4600 756f 646e     essage: %s.Found
   c07bc:	4220 746f 2320 203a 6425 2520 2064 6425      Bot #: %d %d %d
   c07cc:	2520 2064 6425 2520 2064 6425 2520 2c64      %d %d %d %d %d,
   c07dc:	7320 7265 6976 6563 3a73 2520 0064 6f46      services: %d.Fo
   c07ec:	6e75 2064 656e 2077 6f62 3a74 2520 0064     und new bot: %d.
   c07fc:	6f43 6e6e 6365 6574 2064 6f74 4220 746f     Connected to Bot
   c080c:	2520 0064 002f 7245 6f72 2c72 6320 756f      %d./.Error, cou
   c081c:	646c 6e20 746f 6f20 6570 206e 6f72 746f     ld not open root
   c082c:	6420 7269 6365 6f74 7972 6f20 206e 4453      directory on SD
   c083c:	4320 7261 2e64 4920 2073 7469 6920 736e      Card. Is it ins
   c084c:	7265 6574 3f64 4300 4243 6425 6d64 0070     erted?.CCB%ddmp.
   c085c:	6552 7571 7365 6574 2064 4453 4320 7261     Requested SD Car
   c086c:	2064 6144 6174 6620 6f72 206d 6f42 2074     d Data from Bot 
   c087c:	6425 4f20 6576 2072 4c42 0a45 4300 7275     %d Over BLE..Cur
   c088c:	6572 746e 796c 6320 6e6f 656e 7463 6465     rently connected
   c089c:	7420 206f 6f42 2074 6625 202c 656e 6465      to Bot %f, need
   c08ac:	7420 206f 6f63 6e6e 6365 2074 6f74 4220      to connect to B
   c08bc:	746f 2520 0064 7553 6363 7365 6673 6c75     ot %d.Successful
   c08cc:	796c 6320 6e6f 656e 7463 6465 7420 206f     ly connected to 
   c08dc:	6f42 2074 6425 5300 6174 7472 6e69 2067     Bot %d.Starting 
   c08ec:	6966 656c 7420 6172 736e 6566 2072 7266     file transfer fr
   c08fc:	6d6f 4220 746f 2520 0064 6946 696e 6873     om Bot %d.Finish
   c090c:	6465 7420 6172 736e 6566 7272 6e69 2067     ed transferring 
   c091c:	6966 656c 6620 6f72 206d 6f42 2074 6425     file from Bot %d
   c092c:	5200 6365 726f 0064 6142 7474 7265 0079     .Record.Battery.
   c093c:	664f 6c66 616f 0064 6553 746e 7972 2500     Offload.Sentry.%
   c094c:	3230 2564 3230 2564 3430 2564 3230 2564     02d%02d%04d%02d%
   c095c:	3230 2564 3230 0064 6157 6574 4272 746f     02d%02d.WaterBot
   c096c:	5f00 4f4c 2e47 7874 0074 7245 6f72 3a72     ._LOG.txt.Error:
   c097c:	6320 756f 646c 6e20 746f 6320 6e6f 656e      could not conne
   c098c:	7463 7420 206f 4453 6320 7261 2164 2000     ct to SD card!. 
   c099c:	7453 7261 6974 676e 0020 3462 3032 3936     Starting .b42069
   c09ac:	3031 642d 3463 2d62 3735 3334 632d 6238     10-dc4b-5743-c8b
   c09bc:	2d31 3239 3064 3765 3135 3238 3062 6200     1-92d0e75182b0.b
   c09cc:	3234 3630 3139 2d32 6364 6234 352d 3437     4206912-dc4b-574
   c09dc:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   c09ec:	6232 0030 3462 3032 3936 3331 642d 3463     2b0.b4206913-dc4
   c09fc:	2d62 3735 3334 632d 6238 2d31 3239 3064     b-5743-c8b1-92d0
   c0a0c:	3765 3135 3238 3062 6200 3234 3630 3139     e75182b0.b420691
   c0a1c:	2d34 6364 6234 352d 3437 2d33 3863 3162     4-dc4b-5743-c8b1
   c0a2c:	392d 6432 6530 3537 3831 6232 0030 6e4f     -92d0e75182b0.On
   c0a3c:	4f00 6666 5000 6972 746e 6465 4820 6769     .Off.Printed Hig
   c0a4c:	6c68 6769 7468 6465 4d20 6e65 2075 7469     hlighted Menu it
   c0a5c:	6d65 7720 7469 2068 616e 656d 203a 7325     em with name: %s
   c0a6c:	4d00 6e65 2075 7469 6d65 3020 4d00 6e65     .Menu item 0.Men
   c0a7c:	2075 7469 6d65 2520 0064 4343 4241 7073     u item %d.CCABsp
   c0a8c:	4263 3125 0064 4343 4241 7073 4e63 0042     cB%1d.CCABspcNB.
   c0a9c:	7245 6f72 2c72 5320 2044 6143 6472 4e20     Error, SD Card N
   c0aac:	746f 7720 726f 696b 676e 4300 4243 6425     ot working.CCB%d
   c0abc:	6e63 2566 6431 4300 4243 7231 7165 5400     cnf%1d.CCB1req.T
   c0acc:	6d65 3a70 2520 2e30 6636 0000               emp: %0.6f..

000c0ad8 <_ZTVN8particle11SPISettingsE>:
	...
   c0ae0:	42e5 000b 40cd 000b 410f 000b               .B...@...A..

000c0aec <_ZTV5Timer>:
	...
   c0af4:	4369 000b 43bd 000b 4175 000b               iC...C..uA..

000c0b00 <_ZTV4File>:
	...
   c0b08:	410d 000b 411d 000b 415d 000b 4157 000b     .A...A..]A..WA..
   c0b18:	40cf 000b 4137 000b 4131 000b 412b 000b     .@..7A..1A..+A..

000c0b28 <_ZL4font>:
   c0b28:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   c0b38:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   c0b48:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   c0b58:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   c0b68:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   c0b78:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   c0b88:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   c0b98:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   c0ba8:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   c0bb8:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   c0bc8:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   c0bd8:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   c0be8:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   c0bf8:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   c0c08:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   c0c18:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   c0c28:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   c0c38:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   c0c48:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   c0c58:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   c0c68:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   c0c78:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   c0c88:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   c0c98:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   c0ca8:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   c0cb8:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   c0cc8:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   c0cd8:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   c0ce8:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   c0cf8:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   c0d08:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   c0d18:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   c0d28:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   c0d38:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   c0d48:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   c0d58:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   c0d68:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   c0d78:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   c0d88:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   c0d98:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   c0da8:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   c0db8:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   c0dc8:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   c0dd8:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   c0de8:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   c0df8:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   c0e08:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   c0e18:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   c0e28:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   c0e38:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   c0e48:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   c0e58:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   c0e68:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   c0e78:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   c0e88:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   c0e98:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   c0ea8:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   c0eb8:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   c0ec8:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   c0ed8:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   c0ee8:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   c0ef8:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   c0f08:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   c0f18:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   c0f28:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   c0f38:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   c0f48:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   c0f58:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   c0f68:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   c0f78:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   c0f88:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   c0f98:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   c0fa8:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   c0fb8:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   c0fc8:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   c0fd8:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   c0fe8:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   c0ff8:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   c1008:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   c1018:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000c1028 <_ZTV12Adafruit_GFX>:
	...
   c1038:	84fd 000b c8a1 000b 40a5 000b 7f03 000b     .........@......
   c1048:	7f05 000b 7f37 000b 7f13 000b 7f25 000b     ....7.......%...
   c1058:	7e45 000b 7f03 000b 812f 000b 812d 000b     E~....../...-...
   c1068:	7f4f 000b 7f8d 000b 7fc7 000b 800d 000b     O...............
   c1078:	8029 000b 80ad 000b                         ).......

000c1080 <_ZL12splash1_data>:
   c1080:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   c1090:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   c10a0:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   c10b0:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   c10c0:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   c10d0:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   c10e8:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   c10f8:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   c1108:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   c1118:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   c1128:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   c1138:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   c1148:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   c1158:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   c1168:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   c1178:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   c1188:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   c1198:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   c11a8:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   c11b8:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   c11c8:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   c11d8:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   c11e8:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   c11f8:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   c1210:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   c1228:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   c1238:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   c1248:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   c1258:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   c1268:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   c1278:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   c1288:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   c1298:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   c12a8:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   c12b8:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   c12c8:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   c12d8:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   c12e8:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   c12f8:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   c1308:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   c1318:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   c1328:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   c1338:	fdff 5b6b 6adb c0fd                         ..k[.j..

000c1340 <_ZL12splash2_data>:
   c1340:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   c1350:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   c1360:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   c137c:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   c138c:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   c139c:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   c13ac:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   c13bc:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   c13cc:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   c13dc:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   c13ec:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   c13fc:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   c140c:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   c141c:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   c142c:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   c143c:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   c144c:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   c145c:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   c146c:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   c147c:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   c148c:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   c149c:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   c14ac:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   c14bc:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   c14d4:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   c14e4:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   c14f4:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   c1504:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   c1514:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000c1520 <_ZTV16Adafruit_SSD1306>:
	...
   c1528:	860d 000b 8625 000b 84fd 000b c8a1 000b     ....%...........
   c1538:	8639 000b 7f03 000b 7f05 000b 7f37 000b     9...........7...
   c1548:	7f13 000b 7f25 000b 7e45 000b 7f03 000b     ....%...E~......
   c1558:	812f 000b 87d7 000b 8d7f 000b 8d31 000b     /...........1...
   c1568:	7fc7 000b 800d 000b 8029 000b 80ad 000b     ........).......

000c1578 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   c1578:	8000 e0c0 f8f0 fefc                         ........

000c1580 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   c1580:	0100 0703 1f0f 7f3f                         ......?.

000c1588 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   c1588:	d5ae a880                                   ....

000c158c <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   c158c:	00d3 8d40                                   ..@.

000c1590 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   c1590:	0020 c8a1                                    ...

000c1594 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   c1594:	40db a6a4 af2e                              .@....

000c159a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   c159a:	02da 8f81                                   ....

000c159e <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   c159e:	12da                                         ...

000c15a1 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   c15a1:	02da                                         ...

000c15a4 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   c15a4:	0022 21ff 0000 0000                         "..!....

000c15ac <_ZTV16OledWingAdafruit>:
	...
   c15b4:	8f45 000b 8f65 000b 84fd 000b c8a1 000b     E...e...........
   c15c4:	8639 000b 7f03 000b 7f05 000b 7f37 000b     9...........7...
   c15d4:	7f13 000b 7f25 000b 7e45 000b 7f03 000b     ....%...E~......
   c15e4:	812f 000b 87d7 000b 8d7f 000b 8d31 000b     /...........1...
   c15f4:	7fc7 000b 800d 000b 8029 000b 80ad 000b     ........).......
   c1604:	7341 6573 7472 6f69 466e 6961 756c 6572     AssertionFailure
   c1614:	6620 6c61 6573 7700 7269 6e69 2e67 6c62      false.wiring.bl
   c1624:	0065 7453 7261 2074 6964 6373 766f 7265     e.Start discover
   c1634:	6e69 2067 6573 7672 6369 7365 002e 7341     ing services..As
   c1644:	6573 7472 6f69 466e 6961 756c 6572 6820     sertionFailure h
   c1654:	6c61 625f 656c 735f 6174 6b63 695f 696e     al_ble_stack_ini
   c1664:	2874 756e 6c6c 7470 2972 3d20 203d 5953     t(nullptr) == SY
   c1674:	5453 4d45 455f 5252 524f 4e5f 4e4f 0045     STEM_ERROR_NONE.
   c1684:	6550 7265 6420 7665 6369 2065 7369 6d20     Peer device is m
   c1694:	7369 6973 676e 0021 6146 6c69 6465 7420     issing!.Failed t
   c16a4:	206f 6c61 6f6c 6163 6574 6d20 6d65 726f     o allocate memor
   c16b4:	2179 4600 6961 656c 2064 6f74 6120 7070     y!.Failed to app
   c16c4:	6e65 2064 6570 7265 4320 6e65 7274 6c61     end peer Central
   c16d4:	6420 7665 6369 2e65 4300 6e6f 656e 7463      device..Connect
   c16e4:	6465 6220 2079 6543 746e 6172 206c 6564     ed by Central de
   c16f4:	6976 6563 002e 6944 6373 6e6f 656e 7463     vice..Disconnect
   c1704:	6465 6220 2079 6572 6f6d 6574 6420 7665     ed by remote dev
   c1714:	6369 2e65 4600 6961 656c 2064 6f74 6120     ice..Failed to a
   c1724:	7070 6e65 2064 6964 6373 766f 7265 6465     ppend discovered
   c1734:	7320 7265 6976 6563 002e 7453 7261 2074      service..Start 
   c1744:	6964 6373 766f 7265 6e69 2067 6863 7261     discovering char
   c1754:	6361 6574 6972 7473 6369 2073 666f 7320     acteristics of s
   c1764:	7265 6976 6563 203a 7325 002e 6143 6e6e     ervice: %s..Cann
   c1774:	746f 6120 6464 6e20 7765 7020 6565 2072     ot add new peer 
   c1784:	6564 6976 6563 002e 654e 2077 6570 6972     device..New peri
   c1794:	6870 7265 6c61 6920 2073 6f63 6e6e 6365     pheral is connec
   c17a4:	6574 2e64 4300 6168 6172 7463 7265 7369     ted..Characteris
   c17b4:	6974 2063 6964 6373 766f 7265 6465 002e     tic discovered..
   c17c4:	6944 6373 766f 7265 6465 6320 6168 6172     Discovered chara
   c17d4:	7463 7265 7369 6974 2763 2073 6168 646e     cteristic's hand
   c17e4:	656c 6920 2073 6e69 6176 696c 2e64 4600     le is invalid..F
   c17f4:	6961 656c 2064 6f74 6120 7070 6e65 2064     ailed to append 
   c1804:	6964 6373 766f 7265 6465 6320 6168 6172     discovered chara
   c1814:	7463 7265 7369 6974 2e63 0000               cteristic...

000c1820 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c1828:	987d 000b 98e1 000b 9a57 000b 990b 000b     }.......W.......
   c1838:	9881 000b                                   ....

000c183c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c1844:	9879 000b 98ef 000b 987b 000b 9911 000b     y.......{.......
   c1854:	98a1 000b                                   ....

000c1858 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c1860:	9877 000b 98fd 000b a5b1 000b 9917 000b     w...............
   c1870:	98c1 000b                                   ....

000c1874 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c1880:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
   c1890:	0000 0000                                   ....

000c1894 <_ZTVN5spark13CellularClassE>:
	...
   c189c:	bf53 000b bf49 000b bf3f 000b bef5 000b     S...I...?.......
   c18ac:	bf33 000b bf27 000b c77d 000b c785 000b     3...'...}.......
   c18bc:	bf1b 000b bf13 000b bf09 000b beff 000b     ................
   c18cc:	c7b5 000b                                   ....

000c18d0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c18d8:	bf8d 000b bf93 000b bfd1 000b bfa1 000b     ................
   c18e8:	bf8f 000b                                   ....

000c18ec <_ZTVN5spark13EthernetClassE>:
	...
   c18f4:	c51b 000b c511 000b c507 000b c4fd 000b     ................
   c1904:	c4f1 000b c4e5 000b c77d 000b c785 000b     ........}.......
   c1914:	c4d9 000b c4d1 000b c4c7 000b c4bd 000b     ................
   c1924:	c7b5 000b                                   ....

000c1928 <_ZTV7TwoWire>:
	...
   c1930:	c539 000b c583 000b c55b 000b c53b 000b     9.......[...;...
   c1940:	c563 000b c56b 000b c573 000b c57b 000b     c...k...s...{...

000c1950 <_ZTV9IPAddress>:
	...
   c1958:	c64d 000b c63d 000b c63f 000b 7061 0070     M...=...?...app.

000c1968 <_ZTVN5spark12NetworkClassE>:
	...
   c1970:	c73d 000b c747 000b c751 000b c75b 000b     =...G...Q...[...
   c1980:	c765 000b c771 000b c77d 000b c785 000b     e...q...}.......
   c1990:	c78d 000b c799 000b c7a1 000b c7ab 000b     ................
   c19a0:	c7b5 000b                                   ....

000c19a4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c19a4:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   c19b4:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   c19c4:	6d69 0065                                   ime.

000c19c8 <_ZTV11USARTSerial>:
	...
   c19d0:	cf6d 000b cfd9 000b cfb1 000b c8a1 000b     m...............
   c19e0:	cf81 000b cf9d 000b cf8f 000b cfab 000b     ................
   c19f0:	cf6f 000b cf73 000b                         o...s...

000c19f8 <_ZTV9USBSerial>:
	...
   c1a00:	d025 000b d08d 000b d063 000b c8a1 000b     %.......c.......
   c1a10:	d055 000b d027 000b d037 000b d087 000b     U...'...7.......
   c1a20:	d047 000b d01f 000b                         G.......

000c1a28 <_ZSt7nothrow>:
	...

000c1a29 <_ZTSSt19_Sp_make_shared_tag>:
   c1a29:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c1a39:	6572 5f64 6174 0067 0000                     red_tag....

000c1a44 <_ZTISt19_Sp_make_shared_tag>:
   c1a44:	1af8 000c 1a29 000c 6f6e 2074 6e65 756f     ....)...not enou
   c1a54:	6867 7320 6170 6563 6620 726f 6620 726f     gh space for for
   c1a64:	616d 2074 7865 6170 736e 6f69 206e 5028     mat expansion (P
   c1a74:	656c 7361 2065 7573 6d62 7469 6620 6c75     lease submit ful
   c1a84:	206c 7562 2067 6572 6f70 7472 6120 2074     l bug report at 
   c1a94:	7468 7074 3a73 2f2f 6367 2e63 6e67 2e75     https://gcc.gnu.
   c1aa4:	726f 2f67 7562 7367 292f 0a3a 2020 2020     org/bugs/):.    
   c1ab4:	3000 3231 3433 3635 3837 0039               .0123456789.

000c1ac0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   c1ac0:	1b58 000c 1acc 000c 1b7c 000c               X.......|...

000c1acc <_ZTSN10__cxxabiv117__class_type_infoE>:
   c1acc:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c1adc:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c1aec:	0045 0000                                   E...

000c1af0 <_ZTVN10__cxxabiv117__class_type_infoE>:
   c1af0:	0000 0000 1ac0 000c d63d 000b d651 000b     ........=...Q...
   c1b00:	d7e5 000b d7e5 000b d6bb 000b d5ff 000b     ................
   c1b10:	d6a3 000b d665 000b d631 000b               ....e...1...

000c1b1c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c1b1c:	1b58 000c 1b28 000c 1ac0 000c               X...(.......

000c1b28 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c1b28:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c1b38:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c1b48:	666e 456f 0000 0000                         nfoE....

000c1b50 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c1b50:	0000 0000 1b1c 000c d6e5 000b d6f9 000b     ................
   c1b60:	d7e5 000b d7e5 000b d6bb 000b d5ff 000b     ................
   c1b70:	d7b9 000b d745 000b d70d 000b               ....E.......

000c1b7c <_ZTISt9type_info>:
   c1b7c:	1af8 000c 1b84 000c                         ........

000c1b84 <_ZTSSt9type_info>:
   c1b84:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   c1b94:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   c1ba4:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   c1bb4:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c1bc4:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c1bd4:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c1be4:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c1bf4:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   c1c04:	6e69 7469 0079 6e61 0000 0000               inity.an....

000c1c10 <fpi.1>:
   c1c10:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c1c20:	0000 0000                                   ....

000c1c24 <fpinan.0>:
   c1c24:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   c1c34:	0000 0000                                   ....

000c1c38 <tinytens>:
   c1c38:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c1c48:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c1c58:	6f43 64ac 0628 1168                         Co.d(.h.

000c1c60 <_ctype_>:
   c1c60:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c1c70:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c1c80:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c1c90:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c1ca0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c1cb0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c1cc0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c1cd0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c1ce0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c1d60:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c1d70:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   c1d80:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c1d90:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c1da0:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c1db0:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c1dc0:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   c1dd0:	632e 0000                                   .c..

000c1dd4 <_C_numeric_locale>:
   c1dd4:	181d 000c 0888 000c daf8 2003 0043 4f50     ........... C.PO
   c1de4:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   c1df4:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c1e04:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c1e14:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c1e24:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c1e34:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   c1e44:	0000 0000                                   ....

000c1e48 <__mprec_bigtens>:
   c1e48:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c1e58:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c1e68:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c1e70 <__mprec_tens>:
   c1e70:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c1e80:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c1e90:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c1ea0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c1eb0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c1ec0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c1ed0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c1ee0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c1ef0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c1f00:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c1f10:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c1f20:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c1f30:	9db4 79d9 7843 44ea                         ...yCx.D

000c1f38 <p05.0>:
   c1f38:	0005 0000 0019 0000 007d 0000               ........}...

000c1f44 <link_const_variable_data_end>:
   c1f44:	000b5ea5 	.word	0x000b5ea5
   c1f48:	000bbee5 	.word	0x000bbee5
   c1f4c:	000bbf5d 	.word	0x000bbf5d
   c1f50:	000bc525 	.word	0x000bc525
   c1f54:	000bc72d 	.word	0x000bc72d
   c1f58:	000bc88d 	.word	0x000bc88d
   c1f5c:	000bc9bd 	.word	0x000bc9bd
   c1f60:	000bcdb5 	.word	0x000bcdb5
   c1f64:	000bcf59 	.word	0x000bcf59

000c1f68 <link_constructors_end>:
	...
