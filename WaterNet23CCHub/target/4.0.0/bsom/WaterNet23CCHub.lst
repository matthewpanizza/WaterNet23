
c:/Users/mligh/OneDrive/Particle/WaterNet23/WaterNet23CCHub/target/4.0.0/bsom/WaterNet23CCHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000d140  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c1160  000c1160  00011160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c1184  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  2003daa4  000c1188  0002daa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000b70  2003dc80  2003dc80  0003dc80  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c1364  000c1364  00031364  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c138c  000c138c  0003138c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001ba814  00000000  00000000  00031390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001d539  00000000  00000000  001ebba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0005517e  00000000  00000000  002090dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000039f0  00000000  00000000  0025e25b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000d770  00000000  00000000  00261c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004b5b0  00000000  00000000  0026f3bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000685e2  00000000  00000000  002ba96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014821a  00000000  00000000  00322f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000b894  00000000  00000000  0046b168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
   b4026:	b508      	push	{r3, lr}
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f009 fa8e 	bl	bd552 <memcpy>
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f009 fab0 	bl	bd5a2 <memset>
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003daa4 	.word	0x2003daa4
   b404c:	000c1188 	.word	0x000c1188
   b4050:	2003dc80 	.word	0x2003dc80
   b4054:	2003dc80 	.word	0x2003dc80
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
   b405c:	b570      	push	{r4, r5, r6, lr}
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
   b4062:	f007 fd9d 	bl	bbba0 <module_user_init_hook>
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
   b4070:	bd70      	pop	{r4, r5, r6, pc}
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c113c 	.word	0x000c113c
   b4080:	000c1160 	.word	0x000c1160

000b4084 <module_user_setup>:
   b4084:	f001 bb46 	b.w	b5714 <setup>

000b4088 <module_user_loop>:
   b4088:	b508      	push	{r3, lr}
   b408a:	f001 f8c9 	bl	b5220 <loop>
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4092:	f007 bd3d 	b.w	bbb10 <_post_loop>

000b4096 <_Znwj>:
   b4096:	f004 bdd1 	b.w	b8c3c <malloc>

000b409a <_Znaj>:
   b409a:	f004 bdcf 	b.w	b8c3c <malloc>

000b409e <_ZdlPvj>:
   b409e:	f004 bdd5 	b.w	b8c4c <free>
	...

000b40a4 <__cxa_pure_virtual>:
   b40a4:	b508      	push	{r3, lr}
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f004 fce2 	bl	b8a74 <panic_>
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b85ad 	.word	0x000b85ad
   b40b8:	000bf660 	.word	0x000bf660

000b40bc <__cxa_guard_acquire>:
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40cc:	4770      	bx	lr

000b40ce <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40ce:	7c03      	ldrb	r3, [r0, #16]
   b40d0:	f013 0308 	ands.w	r3, r3, #8
   b40d4:	bf1e      	ittt	ne
   b40d6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40d8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40da:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40dc:	2b00      	cmp	r3, #0
  }
   b40de:	bfac      	ite	ge
   b40e0:	4618      	movge	r0, r3
   b40e2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40e6:	4770      	bx	lr

000b40e8 <_Z12actionTimer5v>:
        Serial1.println(outStr);
    }
}

void actionTimer5(){
    postStatus = true;
   b40e8:	4b01      	ldr	r3, [pc, #4]	; (b40f0 <_Z12actionTimer5v+0x8>)
   b40ea:	2201      	movs	r2, #1
   b40ec:	701a      	strb	r2, [r3, #0]
    for(WaterBot w: WaterBots){
        w.timeoutCount++;
    }
    //if(!BLE.connected)
}
   b40ee:	4770      	bx	lr
   b40f0:	2003dedc 	.word	0x2003dedc

000b40f4 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40f4:	4770      	bx	lr

000b40f6 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b40f6:	b510      	push	{r4, lr}
  }
   b40f8:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b40fa:	4604      	mov	r4, r0
  }
   b40fc:	f7ff ffcf 	bl	b409e <_ZdlPvj>
   b4100:	4620      	mov	r0, r4
   b4102:	bd10      	pop	{r4, pc}

000b4104 <_ZN4FileD0Ev>:
   b4104:	b510      	push	{r4, lr}
   b4106:	2134      	movs	r1, #52	; 0x34
   b4108:	4604      	mov	r4, r0
   b410a:	f7ff ffc8 	bl	b409e <_ZdlPvj>
   b410e:	4620      	mov	r0, r4
   b4110:	bd10      	pop	{r4, pc}

000b4112 <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b4112:	3010      	adds	r0, #16
   b4114:	f002 bfa0 	b.w	b7058 <_ZN7FatFile4syncEv>

000b4118 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b4118:	3010      	adds	r0, #16
   b411a:	f002 bebe 	b.w	b6e9a <_ZN7FatFile4peekEv>

000b411e <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b411e:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b4120:	2201      	movs	r2, #1
   b4122:	f10d 0107 	add.w	r1, sp, #7
   b4126:	3010      	adds	r0, #16
   b4128:	f002 fe09 	bl	b6d3e <_ZN7FatFile4readEPvj>
   b412c:	2801      	cmp	r0, #1
   b412e:	bf0c      	ite	eq
   b4130:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b4134:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   b4138:	b003      	add	sp, #12
   b413a:	f85d fb04 	ldr.w	pc, [sp], #4

000b413e <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b413e:	3010      	adds	r0, #16
   b4140:	f003 b824 	b.w	b718c <_ZN7FatFile5writeEPKvj>

000b4144 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b4144:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4146:	2201      	movs	r2, #1
   b4148:	f88d 1007 	strb.w	r1, [sp, #7]
   b414c:	3010      	adds	r0, #16
   b414e:	f10d 0107 	add.w	r1, sp, #7
   b4152:	f003 f81b 	bl	b718c <_ZN7FatFile5writeEPKvj>
  }
   b4156:	b003      	add	sp, #12
   b4158:	f85d fb04 	ldr.w	pc, [sp], #4

000b415c <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b415c:	6943      	ldr	r3, [r0, #20]
   b415e:	b113      	cbz	r3, b4166 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4160:	6983      	ldr	r3, [r0, #24]
   b4162:	300c      	adds	r0, #12
   b4164:	4718      	bx	r3
            callback();
        }
    }
   b4166:	4770      	bx	lr

000b4168 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4168:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b416a:	2100      	movs	r1, #0
   b416c:	4604      	mov	r4, r0
   b416e:	4608      	mov	r0, r1
   b4170:	f004 faf8 	bl	b8764 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4174:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4176:	4620      	mov	r0, r4
   b4178:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b417a:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b417c:	f004 fb0a 	bl	b8794 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4180:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4182:	b10c      	cbz	r4, b4188 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4184:	2301      	movs	r3, #1
   b4186:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4188:	2100      	movs	r1, #0
   b418a:	2001      	movs	r0, #1
   b418c:	f004 faea 	bl	b8764 <os_thread_scheduling>
            }
        }
        if (t) {
   b4190:	b12c      	cbz	r4, b419e <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4192:	6823      	ldr	r3, [r4, #0]
   b4194:	4620      	mov	r0, r4
   b4196:	689b      	ldr	r3, [r3, #8]
   b4198:	4798      	blx	r3
            t->running = false;
   b419a:	2300      	movs	r3, #0
   b419c:	7123      	strb	r3, [r4, #4]
        }
    }
   b419e:	b002      	add	sp, #8
   b41a0:	bd10      	pop	{r4, pc}
	...

000b41a4 <_Z13actionTimer60v>:
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
   b41a4:	4b0b      	ldr	r3, [pc, #44]	; (b41d4 <_Z13actionTimer60v+0x30>)
   b41a6:	e9d3 3000 	ldrd	r3, r0, [r3]

void actionTimer60(){
    bool reqLTEStatus = false;
   b41aa:	2200      	movs	r2, #0
    for(WaterBot w: WaterBots){
   b41ac:	4283      	cmp	r3, r0
   b41ae:	d005      	beq.n	b41bc <_Z13actionTimer60v+0x18>
        if(w.timeoutCount > XBEE_BLE_MAX_TIMEOUT){
   b41b0:	6959      	ldr	r1, [r3, #20]
            reqLTEStatus = true;
   b41b2:	2925      	cmp	r1, #37	; 0x25
   b41b4:	bf28      	it	cs
   b41b6:	2201      	movcs	r2, #1
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b41b8:	3318      	adds	r3, #24
      {
	++_M_current;
	return *this;
   b41ba:	e7f7      	b.n	b41ac <_Z13actionTimer60v+0x8>
            w.timeoutCount = 0;            
        }
    }
    if(reqLTEStatus && LTEStatuses < MAX_LTE_STATUSES){
   b41bc:	b142      	cbz	r2, b41d0 <_Z13actionTimer60v+0x2c>
   b41be:	4a06      	ldr	r2, [pc, #24]	; (b41d8 <_Z13actionTimer60v+0x34>)
   b41c0:	7813      	ldrb	r3, [r2, #0]
   b41c2:	2b18      	cmp	r3, #24
   b41c4:	d804      	bhi.n	b41d0 <_Z13actionTimer60v+0x2c>
        LTEStatuses++;
   b41c6:	3301      	adds	r3, #1
   b41c8:	7013      	strb	r3, [r2, #0]
        statusTimeout = true;
   b41ca:	4b04      	ldr	r3, [pc, #16]	; (b41dc <_Z13actionTimer60v+0x38>)
   b41cc:	2201      	movs	r2, #1
   b41ce:	701a      	strb	r2, [r3, #0]
    }
   b41d0:	4770      	bx	lr
   b41d2:	bf00      	nop
   b41d4:	2003dcbc 	.word	0x2003dcbc
   b41d8:	2003dca0 	.word	0x2003dca0
   b41dc:	2003e635 	.word	0x2003e635

000b41e0 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b41e0:	2a01      	cmp	r2, #1
   b41e2:	d102      	bne.n	b41ea <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b41e4:	6001      	str	r1, [r0, #0]
      }
   b41e6:	2000      	movs	r0, #0
   b41e8:	4770      	bx	lr
	  switch (__op)
   b41ea:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b41ec:	bf04      	itt	eq
   b41ee:	680b      	ldreq	r3, [r1, #0]
   b41f0:	6003      	streq	r3, [r0, #0]
	      break;
   b41f2:	e7f8      	b.n	b41e6 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b41f4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b41f4:	6803      	ldr	r3, [r0, #0]
   b41f6:	4718      	bx	r3

000b41f8 <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b41f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b41fa:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b41fc:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b41fe:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4200:	b130      	cbz	r0, b4210 <_ZN5Timer5startEj.isra.0+0x18>
   b4202:	2300      	movs	r3, #0
   b4204:	e9cd 3300 	strd	r3, r3, [sp]
   b4208:	461a      	mov	r2, r3
   b420a:	2102      	movs	r1, #2
   b420c:	f004 faca 	bl	b87a4 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b4210:	68a0      	ldr	r0, [r4, #8]
   b4212:	b130      	cbz	r0, b4222 <_ZN5Timer5startEj.isra.0+0x2a>
   b4214:	2300      	movs	r3, #0
   b4216:	e9cd 5300 	strd	r5, r3, [sp]
   b421a:	461a      	mov	r2, r3
   b421c:	4619      	mov	r1, r3
   b421e:	f004 fac1 	bl	b87a4 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4222:	b003      	add	sp, #12
   b4224:	bd30      	pop	{r4, r5, pc}

000b4226 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4226:	b40e      	push	{r1, r2, r3}
   b4228:	b503      	push	{r0, r1, lr}
   b422a:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b422c:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b422e:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4232:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4234:	f007 fb0f 	bl	bb856 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4238:	b002      	add	sp, #8
   b423a:	f85d eb04 	ldr.w	lr, [sp], #4
   b423e:	b003      	add	sp, #12
   b4240:	4770      	bx	lr
	...

000b4244 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4244:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4246:	4604      	mov	r4, r0
   b4248:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b424a:	7922      	ldrb	r2, [r4, #4]
   b424c:	68a3      	ldr	r3, [r4, #8]
   b424e:	b132      	cbz	r2, b425e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4250:	b9a3      	cbnz	r3, b427c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4252:	490b      	ldr	r1, [pc, #44]	; (b4280 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4254:	b002      	add	sp, #8
   b4256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b425a:	f007 bac1 	b.w	bb7e0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b425e:	4a09      	ldr	r2, [pc, #36]	; (b4284 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4260:	7b26      	ldrb	r6, [r4, #12]
   b4262:	4d09      	ldr	r5, [pc, #36]	; (b4288 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4264:	4909      	ldr	r1, [pc, #36]	; (b428c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4266:	7b64      	ldrb	r4, [r4, #13]
   b4268:	2e01      	cmp	r6, #1
   b426a:	bf18      	it	ne
   b426c:	4629      	movne	r1, r5
   b426e:	e9cd 1400 	strd	r1, r4, [sp]
   b4272:	4907      	ldr	r1, [pc, #28]	; (b4290 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4274:	f7ff ffd7 	bl	b4226 <_ZN5Print6printfEPKcz>
  }
   b4278:	b002      	add	sp, #8
   b427a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b427c:	4a05      	ldr	r2, [pc, #20]	; (b4294 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b427e:	e7ef      	b.n	b4260 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4280:	000bf686 	.word	0x000bf686
   b4284:	000bfabb 	.word	0x000bfabb
   b4288:	000bf682 	.word	0x000bf682
   b428c:	000bf67e 	.word	0x000bf67e
   b4290:	000bf69c 	.word	0x000bf69c
   b4294:	000bf675 	.word	0x000bf675

000b4298 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4298:	b40e      	push	{r1, r2, r3}
   b429a:	b503      	push	{r0, r1, lr}
   b429c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b429e:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42a0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b42a4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b42a6:	f007 fad6 	bl	bb856 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b42aa:	b002      	add	sp, #8
   b42ac:	f85d eb04 	ldr.w	lr, [sp], #4
   b42b0:	b003      	add	sp, #12
   b42b2:	4770      	bx	lr

000b42b4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b42b4:	b510      	push	{r4, lr}
      if (_M_manager)
   b42b6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b42b8:	4604      	mov	r4, r0
      if (_M_manager)
   b42ba:	b113      	cbz	r3, b42c2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b42bc:	2203      	movs	r2, #3
   b42be:	4601      	mov	r1, r0
   b42c0:	4798      	blx	r3
    }
   b42c2:	4620      	mov	r0, r4
   b42c4:	bd10      	pop	{r4, pc}
	...

000b42c8 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b42c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b42ca:	4b13      	ldr	r3, [pc, #76]	; (b4318 <_ZN5TimerD1Ev+0x50>)
   b42cc:	6003      	str	r3, [r0, #0]
   b42ce:	4604      	mov	r4, r0
        if (handle) {
   b42d0:	6880      	ldr	r0, [r0, #8]
   b42d2:	b1c8      	cbz	r0, b4308 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42d4:	2500      	movs	r5, #0
   b42d6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b42da:	e9cd 3500 	strd	r3, r5, [sp]
   b42de:	2102      	movs	r1, #2
   b42e0:	462b      	mov	r3, r5
   b42e2:	462a      	mov	r2, r5
   b42e4:	f004 fa5e 	bl	b87a4 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b42e8:	68a0      	ldr	r0, [r4, #8]
   b42ea:	4629      	mov	r1, r5
   b42ec:	f004 fa8a 	bl	b8804 <os_timer_set_id>
            while (running) {
   b42f0:	7923      	ldrb	r3, [r4, #4]
   b42f2:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b42f6:	b113      	cbz	r3, b42fe <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b42f8:	f004 fa2c 	bl	b8754 <os_thread_yield>
            while (running) {
   b42fc:	e7f8      	b.n	b42f0 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b42fe:	68a0      	ldr	r0, [r4, #8]
   b4300:	4629      	mov	r1, r5
   b4302:	f004 fa3f 	bl	b8784 <os_timer_destroy>
            handle = nullptr;
   b4306:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4308:	f104 000c 	add.w	r0, r4, #12
   b430c:	f7ff ffd2 	bl	b42b4 <_ZNSt14_Function_baseD1Ev>
    }
   b4310:	4620      	mov	r0, r4
   b4312:	b003      	add	sp, #12
   b4314:	bd30      	pop	{r4, r5, pc}
   b4316:	bf00      	nop
   b4318:	000bfcf4 	.word	0x000bfcf4

000b431c <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b431c:	b510      	push	{r4, lr}
   b431e:	4604      	mov	r4, r0
    }
   b4320:	f7ff ffd2 	bl	b42c8 <_ZN5TimerD1Ev>
   b4324:	4620      	mov	r0, r4
   b4326:	211c      	movs	r1, #28
   b4328:	f7ff feb9 	bl	b409e <_ZdlPvj>
   b432c:	4620      	mov	r0, r4
   b432e:	bd10      	pop	{r4, pc}

000b4330 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b4330:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4332:	6843      	ldr	r3, [r0, #4]
   b4334:	3b01      	subs	r3, #1
    {
   b4336:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4338:	6043      	str	r3, [r0, #4]
   b433a:	b963      	cbnz	r3, b4356 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b433c:	6803      	ldr	r3, [r0, #0]
   b433e:	689b      	ldr	r3, [r3, #8]
   b4340:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4342:	68a3      	ldr	r3, [r4, #8]
   b4344:	3b01      	subs	r3, #1
   b4346:	60a3      	str	r3, [r4, #8]
   b4348:	b92b      	cbnz	r3, b4356 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b434a:	6823      	ldr	r3, [r4, #0]
   b434c:	4620      	mov	r0, r4
   b434e:	68db      	ldr	r3, [r3, #12]
        }
    }
   b4350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4354:	4718      	bx	r3
    }
   b4356:	bd10      	pop	{r4, pc}

000b4358 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b4358:	b5f0      	push	{r4, r5, r6, r7, lr}
   b435a:	468c      	mov	ip, r1
   b435c:	2500      	movs	r5, #0
   b435e:	4914      	ldr	r1, [pc, #80]	; (b43b0 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b4360:	7105      	strb	r5, [r0, #4]
   b4362:	4604      	mov	r4, r0
   b4364:	6085      	str	r5, [r0, #8]
   b4366:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4368:	e892 0003 	ldmia.w	r2, {r0, r1}
   b436c:	b085      	sub	sp, #20
   b436e:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4370:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4374:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4378:	e896 0003 	ldmia.w	r6, {r0, r1}
   b437c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4380:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4384:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4388:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b438a:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b438c:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b438e:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4390:	6095      	str	r5, [r2, #8]
   b4392:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4394:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b4396:	e9cd 3500 	strd	r3, r5, [sp]
   b439a:	4a06      	ldr	r2, [pc, #24]	; (b43b4 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b439c:	4623      	mov	r3, r4
   b439e:	4661      	mov	r1, ip
   b43a0:	f104 0008 	add.w	r0, r4, #8
   b43a4:	f004 f9e6 	bl	b8774 <os_timer_create>
    }
   b43a8:	4620      	mov	r0, r4
   b43aa:	b005      	add	sp, #20
   b43ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b43ae:	bf00      	nop
   b43b0:	000bfcf4 	.word	0x000bfcf4
   b43b4:	000b4169 	.word	0x000b4169

000b43b8 <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b43b8:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b43ba:	460a      	mov	r2, r1
   b43bc:	4901      	ldr	r1, [pc, #4]	; (b43c4 <_ZN7FatFile4openEPKci+0xc>)
   b43be:	6809      	ldr	r1, [r1, #0]
   b43c0:	f002 be87 	b.w	b70d2 <_ZN7FatFile4openEPS_PKci>
   b43c4:	2003e648 	.word	0x2003e648

000b43c8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void offloadDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b43c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b43ca:	b095      	sub	sp, #84	; 0x54
   b43cc:	4604      	mov	r4, r0
   b43ce:	af00      	add	r7, sp, #0
   b43d0:	460d      	mov	r5, r1
    memset(fileCommand,0,8 + MAX_FILENAME_LEN);
   b43d2:	221e      	movs	r2, #30
   b43d4:	2100      	movs	r1, #0
   b43d6:	f107 0030 	add.w	r0, r7, #48	; 0x30
   b43da:	f009 f8e2 	bl	bd5a2 <memset>
    memcpy(fileCommand,data,8);
   b43de:	6820      	ldr	r0, [r4, #0]
   b43e0:	6861      	ldr	r1, [r4, #4]
   b43e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b43e6:	c303      	stmia	r3!, {r0, r1}
    if(fileCommand[0] == 'f'){
   b43e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   b43ec:	2b66      	cmp	r3, #102	; 0x66
    Serial.println(dataStr);
   b43ee:	466e      	mov	r6, sp
    if(fileCommand[0] == 'f'){
   b43f0:	d168      	bne.n	b44c4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
        if(!strcmp(fileCommand,"filename")){
   b43f2:	493e      	ldr	r1, [pc, #248]	; (b44ec <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x124>)
   b43f4:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b43f8:	f009 f919 	bl	bd62e <strcmp>
   b43fc:	2800      	cmp	r0, #0
   b43fe:	d13e      	bne.n	b447e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb6>
    return m_attr;
   b4400:	483b      	ldr	r0, [pc, #236]	; (b44f0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b4402:	7c03      	ldrb	r3, [r0, #16]
   b4404:	b113      	cbz	r3, b440c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>
   b4406:	3010      	adds	r0, #16
   b4408:	f002 fe5c 	bl	b70c4 <_ZN7FatFile5closeEv>
            memcpy(fileCommand,data,8 + MAX_FILENAME_LEN);
   b440c:	4623      	mov	r3, r4
   b440e:	f107 0228 	add.w	r2, r7, #40	; 0x28
   b4412:	f104 0520 	add.w	r5, r4, #32
   b4416:	6818      	ldr	r0, [r3, #0]
   b4418:	6859      	ldr	r1, [r3, #4]
   b441a:	4614      	mov	r4, r2
   b441c:	c403      	stmia	r4!, {r0, r1}
   b441e:	3308      	adds	r3, #8
   b4420:	42ab      	cmp	r3, r5
   b4422:	4622      	mov	r2, r4
   b4424:	d1f7      	bne.n	b4416 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>
   b4426:	6818      	ldr	r0, [r3, #0]
   b4428:	6020      	str	r0, [r4, #0]
   b442a:	889b      	ldrh	r3, [r3, #4]
   b442c:	80a3      	strh	r3, [r4, #4]
            strncpy(offloadFilename,fileCommand+8,MAX_FILENAME_LEN);
   b442e:	221e      	movs	r2, #30
   b4430:	f107 0130 	add.w	r1, r7, #48	; 0x30
   b4434:	482f      	ldr	r0, [pc, #188]	; (b44f4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4436:	f009 f946 	bl	bd6c6 <strncpy>
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b443a:	2300      	movs	r3, #0
    return file.open(this, path, O_RDONLY);
   b443c:	4a2d      	ldr	r2, [pc, #180]	; (b44f4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b443e:	492e      	ldr	r1, [pc, #184]	; (b44f8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4440:	607b      	str	r3, [r7, #4]
    return file.open(this, path, O_RDONLY);
   b4442:	1d38      	adds	r0, r7, #4
   b4444:	f002 fe45 	bl	b70d2 <_ZN7FatFile4openEPS_PKci>
            if(sd.exists(offloadFilename)){
   b4448:	b148      	cbz	r0, b445e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x96>
                Serial.printlnf("File '%s' already exists, deleting and overwriting",offloadFilename);
   b444a:	f007 ff49 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b444e:	492b      	ldr	r1, [pc, #172]	; (b44fc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
   b4450:	4a28      	ldr	r2, [pc, #160]	; (b44f4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4452:	f7ff ff21 	bl	b4298 <_ZN5Print8printlnfEPKcz>
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   b4456:	4927      	ldr	r1, [pc, #156]	; (b44f4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4458:	4827      	ldr	r0, [pc, #156]	; (b44f8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
   b445a:	f002 fe86 	bl	b716a <_ZN7FatFile6removeEPS_PKc>
            Serial.printlnf("Starting offload of file: %s",offloadFilename);
   b445e:	f007 ff3f 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b4462:	4a24      	ldr	r2, [pc, #144]	; (b44f4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4464:	4926      	ldr	r1, [pc, #152]	; (b4500 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   b4466:	f7ff ff17 	bl	b4298 <_ZN5Print8printlnfEPKcz>
            myFile.open(offloadFilename, O_RDWR | O_CREAT | O_AT_END);
   b446a:	4922      	ldr	r1, [pc, #136]	; (b44f4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b446c:	4825      	ldr	r0, [pc, #148]	; (b4504 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b446e:	f244 2202 	movw	r2, #16898	; 0x4202
   b4472:	f7ff ffa1 	bl	b43b8 <_ZN7FatFile4openEPKci>
}
   b4476:	3754      	adds	r7, #84	; 0x54
   b4478:	46b5      	mov	sp, r6
   b447a:	46bd      	mov	sp, r7
   b447c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(!strcmp(fileCommand,"filecomp")){
   b447e:	4922      	ldr	r1, [pc, #136]	; (b4508 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>)
   b4480:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4484:	f009 f8d3 	bl	bd62e <strcmp>
   b4488:	b968      	cbnz	r0, b44a6 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xde>
            Serial.printlnf("Reached end of file: %s",offloadFilename);
   b448a:	f007 ff29 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b448e:	4a19      	ldr	r2, [pc, #100]	; (b44f4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4490:	491e      	ldr	r1, [pc, #120]	; (b450c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>)
   b4492:	f7ff ff01 	bl	b4298 <_ZN5Print8printlnfEPKcz>
    return m_attr;
   b4496:	4b16      	ldr	r3, [pc, #88]	; (b44f0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b4498:	7c1b      	ldrb	r3, [r3, #16]
   b449a:	2b00      	cmp	r3, #0
   b449c:	d0eb      	beq.n	b4476 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b449e:	4819      	ldr	r0, [pc, #100]	; (b4504 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b44a0:	f002 fe10 	bl	b70c4 <_ZN7FatFile5closeEv>
   b44a4:	e7e7      	b.n	b4476 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
        else if(!strcmp(fileCommand,"filedone")){
   b44a6:	491a      	ldr	r1, [pc, #104]	; (b4510 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
   b44a8:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b44ac:	f009 f8bf 	bl	bd62e <strcmp>
   b44b0:	b940      	cbnz	r0, b44c4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
            Serial.println("Received done command");
   b44b2:	f007 ff15 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b44b6:	4917      	ldr	r1, [pc, #92]	; (b4514 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>)
   b44b8:	f007 f9a5 	bl	bb806 <_ZN5Print7printlnEPKc>
            offloadingDone = true;
   b44bc:	4b16      	ldr	r3, [pc, #88]	; (b4518 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x150>)
   b44be:	2201      	movs	r2, #1
   b44c0:	701a      	strb	r2, [r3, #0]
   b44c2:	e7e8      	b.n	b4496 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xce>
    char dataStr[len];
   b44c4:	1deb      	adds	r3, r5, #7
   b44c6:	f023 0307 	bic.w	r3, r3, #7
   b44ca:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(dataStr,data,len);
   b44ce:	462a      	mov	r2, r5
   b44d0:	4621      	mov	r1, r4
   b44d2:	4668      	mov	r0, sp
   b44d4:	f009 f83d 	bl	bd552 <memcpy>
    myFile.print(dataStr);
   b44d8:	4669      	mov	r1, sp
   b44da:	4805      	ldr	r0, [pc, #20]	; (b44f0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
   b44dc:	f007 f980 	bl	bb7e0 <_ZN5Print5printEPKc>
    Serial.println(dataStr);
   b44e0:	f007 fefe 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b44e4:	4669      	mov	r1, sp
   b44e6:	f007 f98e 	bl	bb806 <_ZN5Print7printlnEPKc>
   b44ea:	e7c4      	b.n	b4476 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b44ec:	000bf6b9 	.word	0x000bf6b9
   b44f0:	2003ddf8 	.word	0x2003ddf8
   b44f4:	2003de2c 	.word	0x2003de2c
   b44f8:	2003e5ec 	.word	0x2003e5ec
   b44fc:	000bf6c2 	.word	0x000bf6c2
   b4500:	000bf6f5 	.word	0x000bf6f5
   b4504:	2003de08 	.word	0x2003de08
   b4508:	000bf712 	.word	0x000bf712
   b450c:	000bf71b 	.word	0x000bf71b
   b4510:	000bf733 	.word	0x000bf733
   b4514:	000bf73c 	.word	0x000bf73c
   b4518:	2003de4a 	.word	0x2003de4a

000b451c <_Z9setupXBeev>:
void setupXBee(){
   b451c:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b451e:	f008 f975 	bl	bc80c <_Z22__fetch_global_Serial1v>
   b4522:	4908      	ldr	r1, [pc, #32]	; (b4544 <_Z9setupXBeev+0x28>)
   b4524:	f7ff fe7f 	bl	b4226 <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4528:	2014      	movs	r0, #20
   b452a:	f007 fac5 	bl	bbab8 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b452e:	f008 f96d 	bl	bc80c <_Z22__fetch_global_Serial1v>
   b4532:	4905      	ldr	r1, [pc, #20]	; (b4548 <_Z9setupXBeev+0x2c>)
   b4534:	f7ff fe77 	bl	b4226 <_ZN5Print6printfEPKcz>
}
   b4538:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b453c:	2014      	movs	r0, #20
   b453e:	f007 babb 	b.w	bbab8 <delay>
   b4542:	bf00      	nop
   b4544:	000bfaba 	.word	0x000bfaba
   b4548:	000bfb73 	.word	0x000bfb73

000b454c <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b454c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4550:	b084      	sub	sp, #16
   b4552:	af02      	add	r7, sp, #8
   b4554:	4680      	mov	r8, r0
   b4556:	4691      	mov	r9, r2
   b4558:	461e      	mov	r6, r3
   b455a:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b455c:	f009 f897 	bl	bd68e <strlen>
   b4560:	3009      	adds	r0, #9
   b4562:	f020 0107 	bic.w	r1, r0, #7
   b4566:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b456a:	4640      	mov	r0, r8
   b456c:	f009 f88f 	bl	bd68e <strlen>
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b4570:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4574:	4926      	ldr	r1, [pc, #152]	; (b4610 <_Z8sendDataPKchbbb+0xc4>)
    char outStr[strlen(dataOut)+2];
   b4576:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4578:	4603      	mov	r3, r0
   b457a:	4642      	mov	r2, r8
   b457c:	4620      	mov	r0, r4
   b457e:	f004 fb75 	bl	b8c6c <sprintf>
    if(sendLTE || sendMode == 4){
   b4582:	f1ba 0f00 	cmp.w	sl, #0
   b4586:	d101      	bne.n	b458c <_Z8sendDataPKchbbb+0x40>
   b4588:	2d04      	cmp	r5, #4
   b458a:	d10d      	bne.n	b45a8 <_Z8sendDataPKchbbb+0x5c>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b458c:	4b21      	ldr	r3, [pc, #132]	; (b4614 <_Z8sendDataPKchbbb+0xc8>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b458e:	4922      	ldr	r1, [pc, #136]	; (b4618 <_Z8sendDataPKchbbb+0xcc>)
   b4590:	781b      	ldrb	r3, [r3, #0]
   b4592:	f88d 3000 	strb.w	r3, [sp]
   b4596:	4638      	mov	r0, r7
   b4598:	233c      	movs	r3, #60	; 0x3c
   b459a:	4622      	mov	r2, r4
   b459c:	f007 fc5e 	bl	bbe5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b45a0:	6878      	ldr	r0, [r7, #4]
   b45a2:	b108      	cbz	r0, b45a8 <_Z8sendDataPKchbbb+0x5c>
	  _M_pi->_M_release();
   b45a4:	f7ff fec4 	bl	b4330 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b45a8:	f1b9 0f00 	cmp.w	r9, #0
   b45ac:	d101      	bne.n	b45b2 <_Z8sendDataPKchbbb+0x66>
   b45ae:	2d01      	cmp	r5, #1
   b45b0:	d121      	bne.n	b45f6 <_Z8sendDataPKchbbb+0xaa>
   b45b2:	f005 fac7 	bl	b9b44 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b45b6:	f005 fb6e 	bl	b9c96 <_ZNK8particle14BleLocalDevice9connectedEv>
   b45ba:	b1e0      	cbz	r0, b45f6 <_Z8sendDataPKchbbb+0xaa>
        uint8_t txBuf_tmp[strlen(outStr)];
   b45bc:	4620      	mov	r0, r4
   b45be:	f009 f866 	bl	bd68e <strlen>
   b45c2:	3007      	adds	r0, #7
   b45c4:	f020 0007 	bic.w	r0, r0, #7
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b45c8:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b45ca:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b45ce:	4620      	mov	r0, r4
   b45d0:	f009 f85d 	bl	bd68e <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b45d4:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b45d8:	4602      	mov	r2, r0
   b45da:	4621      	mov	r1, r4
   b45dc:	4648      	mov	r0, r9
   b45de:	f008 ffb8 	bl	bd552 <memcpy>
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b45e2:	4620      	mov	r0, r4
   b45e4:	f009 f853 	bl	bd68e <strlen>
   b45e8:	2300      	movs	r3, #0
   b45ea:	4602      	mov	r2, r0
   b45ec:	4649      	mov	r1, r9
   b45ee:	480b      	ldr	r0, [pc, #44]	; (b461c <_Z8sendDataPKchbbb+0xd0>)
   b45f0:	f005 f942 	bl	b9878 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b45f4:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b45f6:	b90e      	cbnz	r6, b45fc <_Z8sendDataPKchbbb+0xb0>
   b45f8:	2d02      	cmp	r5, #2
   b45fa:	d104      	bne.n	b4606 <_Z8sendDataPKchbbb+0xba>
        Serial1.println(outStr);
   b45fc:	f008 f906 	bl	bc80c <_Z22__fetch_global_Serial1v>
   b4600:	4621      	mov	r1, r4
   b4602:	f007 f900 	bl	bb806 <_ZN5Print7printlnEPKc>
}
   b4606:	3708      	adds	r7, #8
   b4608:	46bd      	mov	sp, r7
   b460a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b460e:	bf00      	nop
   b4610:	000bf752 	.word	0x000bf752
   b4614:	2003dd04 	.word	0x2003dd04
   b4618:	000bf759 	.word	0x000bf759
   b461c:	2003decc 	.word	0x2003decc

000b4620 <_Z14XBeeLTEPairSetv>:
void XBeeLTEPairSet(){
   b4620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      : _M_current(__i) { }
   b4624:	4d0e      	ldr	r5, [pc, #56]	; (b4660 <_Z14XBeeLTEPairSetv+0x40>)
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b4626:	4f0f      	ldr	r7, [pc, #60]	; (b4664 <_Z14XBeeLTEPairSetv+0x44>)
   b4628:	e9d5 4800 	ldrd	r4, r8, [r5]
void XBeeLTEPairSet(){
   b462c:	b088      	sub	sp, #32
    for(WaterBot p: PairBots){
   b462e:	45a0      	cmp	r8, r4
   b4630:	d013      	beq.n	b465a <_Z14XBeeLTEPairSetv+0x3a>
   b4632:	7923      	ldrb	r3, [r4, #4]
   b4634:	78e6      	ldrb	r6, [r4, #3]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b4636:	f814 2b18 	ldrb.w	r2, [r4], #24
    for(WaterBot p: PairBots){
   b463a:	9303      	str	r3, [sp, #12]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b463c:	4639      	mov	r1, r7
   b463e:	a805      	add	r0, sp, #20
   b4640:	f004 fb14 	bl	b8c6c <sprintf>
        sendData(replyStr,0,false,p.XBeeAvail,p.LTEAvail);
   b4644:	2200      	movs	r2, #0
   b4646:	9b03      	ldr	r3, [sp, #12]
   b4648:	9600      	str	r6, [sp, #0]
   b464a:	4611      	mov	r1, r2
   b464c:	a805      	add	r0, sp, #20
   b464e:	f7ff ff7d 	bl	b454c <_Z8sendDataPKchbbb>
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_nonempty();
	--this->_M_impl._M_finish;
   b4652:	686b      	ldr	r3, [r5, #4]
   b4654:	3b18      	subs	r3, #24
   b4656:	606b      	str	r3, [r5, #4]
	return *this;
   b4658:	e7e9      	b.n	b462e <_Z14XBeeLTEPairSetv+0xe>
}
   b465a:	b008      	add	sp, #32
   b465c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4660:	2003dca4 	.word	0x2003dca4
   b4664:	000bf761 	.word	0x000bf761

000b4668 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b4668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b466c:	e9d0 8900 	ldrd	r8, r9, [r0]
   b4670:	4b29      	ldr	r3, [pc, #164]	; (b4718 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb0>)
   b4672:	eba9 0408 	sub.w	r4, r9, r8
   b4676:	10e4      	asrs	r4, r4, #3
   b4678:	435c      	muls	r4, r3

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b467a:	4b28      	ldr	r3, [pc, #160]	; (b471c <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>)
   b467c:	429c      	cmp	r4, r3
   b467e:	4607      	mov	r7, r0
   b4680:	468a      	mov	sl, r1
   b4682:	4693      	mov	fp, r2
   b4684:	d102      	bne.n	b468c <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
   b4686:	4826      	ldr	r0, [pc, #152]	; (b4720 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb8>)
   b4688:	f008 f922 	bl	bc8d0 <_ZSt20__throw_length_errorPKc>
   b468c:	2c01      	cmp	r4, #1
   b468e:	4622      	mov	r2, r4
   b4690:	bf38      	it	cc
   b4692:	2201      	movcc	r2, #1
   b4694:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b4696:	eba1 0508 	sub.w	r5, r1, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b469a:	d238      	bcs.n	b470e <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa6>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b469c:	b3cc      	cbz	r4, b4712 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
   b469e:	429c      	cmp	r4, r3
   b46a0:	bf28      	it	cs
   b46a2:	461c      	movcs	r4, r3
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b46a4:	2018      	movs	r0, #24
   b46a6:	4360      	muls	r0, r4
   b46a8:	f7ff fcf5 	bl	b4096 <_Znwj>
   b46ac:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b46ae:	eb16 0c05 	adds.w	ip, r6, r5
   b46b2:	bf1f      	itttt	ne
   b46b4:	e8bb 000f 	ldmiane.w	fp!, {r0, r1, r2, r3}
   b46b8:	e8ac 000f 	stmiane.w	ip!, {r0, r1, r2, r3}
   b46bc:	e9db 0100 	ldrdne	r0, r1, [fp]
   b46c0:	e9cc 0100 	strdne	r0, r1, [ip]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
   b46c4:	2d00      	cmp	r5, #0
   b46c6:	dd04      	ble.n	b46d2 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6a>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b46c8:	462a      	mov	r2, r5
   b46ca:	4641      	mov	r1, r8
   b46cc:	4630      	mov	r0, r6
   b46ce:	f008 ff4e 	bl	bd56e <memmove>
      ptrdiff_t __count = __last - __first;
   b46d2:	eba9 090a 	sub.w	r9, r9, sl
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   b46d6:	3518      	adds	r5, #24
      if (__count > 0)
   b46d8:	f1b9 0f00 	cmp.w	r9, #0
   b46dc:	4435      	add	r5, r6
   b46de:	dd04      	ble.n	b46ea <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b46e0:	464a      	mov	r2, r9
   b46e2:	4651      	mov	r1, sl
   b46e4:	4628      	mov	r0, r5
   b46e6:	f008 ff34 	bl	bd552 <memcpy>
      return __result + __count;
   b46ea:	444d      	add	r5, r9
	if (__p)
   b46ec:	f1b8 0f00 	cmp.w	r8, #0
   b46f0:	d005      	beq.n	b46fe <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x96>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b46f2:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b46f4:	4640      	mov	r0, r8
   b46f6:	eba1 0108 	sub.w	r1, r1, r8
   b46fa:	f7ff fcd0 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b46fe:	2018      	movs	r0, #24
   b4700:	fb00 6404 	mla	r4, r0, r4, r6
      this->_M_impl._M_finish = __new_finish;
   b4704:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b4708:	60bc      	str	r4, [r7, #8]
    }
   b470a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b470e:	461c      	mov	r4, r3
   b4710:	e7c8      	b.n	b46a4 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4712:	4626      	mov	r6, r4
   b4714:	e7cb      	b.n	b46ae <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
   b4716:	bf00      	nop
   b4718:	aaaaaaab 	.word	0xaaaaaaab
   b471c:	05555555 	.word	0x05555555
   b4720:	000bf76a 	.word	0x000bf76a

000b4724 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b4724:	b570      	push	{r4, r5, r6, lr}
   b4726:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b4728:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b472c:	4299      	cmp	r1, r3
      push_back(const value_type& __x)
   b472e:	4606      	mov	r6, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b4730:	d00c      	beq.n	b474c <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x28>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4732:	b139      	cbz	r1, b4744 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x20>
   b4734:	4615      	mov	r5, r2
   b4736:	460c      	mov	r4, r1
   b4738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b473a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b473c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4740:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
   b4744:	6873      	ldr	r3, [r6, #4]
   b4746:	3318      	adds	r3, #24
   b4748:	6073      	str	r3, [r6, #4]
      }
   b474a:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
   b474c:	f7ff ff8c 	bl	b4668 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b4750:	e7fb      	b.n	b474a <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x26>
	...

000b4754 <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4758:	b09d      	sub	sp, #116	; 0x74
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b475a:	7883      	ldrb	r3, [r0, #2]
   b475c:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b475e:	af02      	add	r7, sp, #8
   b4760:	4606      	mov	r6, r0
   b4762:	468a      	mov	sl, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b4764:	d15d      	bne.n	b4822 <_Z14processCommandPKchb+0xce>
   b4766:	78c3      	ldrb	r3, [r0, #3]
   b4768:	2b42      	cmp	r3, #66	; 0x42
   b476a:	f040 8179 	bne.w	b4a60 <_Z14processCommandPKchb+0x30c>
        char dataStr[strlen(command)-8];
   b476e:	4630      	mov	r0, r6
   b4770:	f008 ff8d 	bl	bd68e <strlen>
   b4774:	3801      	subs	r0, #1
   b4776:	f020 0007 	bic.w	r0, r0, #7
        }
   b477a:	46e8      	mov	r8, sp
        char dataStr[strlen(command)-8];
   b477c:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b4780:	4630      	mov	r0, r6
   b4782:	f008 ff84 	bl	bd68e <strlen>
        char dataStr[strlen(command)-8];
   b4786:	ad02      	add	r5, sp, #8
        dataStr[strlen(command)-9] = '\0';
   b4788:	4428      	add	r0, r5
   b478a:	f04f 0900 	mov.w	r9, #0
        rxIDBuf[0] = command[1];
   b478e:	7873      	ldrb	r3, [r6, #1]
        dataStr[strlen(command)-9] = '\0';
   b4790:	f800 9c09 	strb.w	r9, [r0, #-9]
        uint8_t rxBotID = atoi(rxIDBuf);
   b4794:	f107 0018 	add.w	r0, r7, #24
        rxIDBuf[0] = command[1];
   b4798:	763b      	strb	r3, [r7, #24]
        uint8_t rxBotID = atoi(rxIDBuf);
   b479a:	f008 fec6 	bl	bd52a <atoi>
   b479e:	4604      	mov	r4, r0
        checkStr[0] = command[strlen(command)-2];
   b47a0:	4630      	mov	r0, r6
        cmdStr[3] = '\0';
   b47a2:	f887 9023 	strb.w	r9, [r7, #35]	; 0x23
        checkStr[0] = command[strlen(command)-2];
   b47a6:	f008 ff72 	bl	bd68e <strlen>
   b47aa:	4430      	add	r0, r6
   b47ac:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b47b0:	773b      	strb	r3, [r7, #28]
        checkStr[1] = command[strlen(command)-1];
   b47b2:	4630      	mov	r0, r6
   b47b4:	f008 ff6b 	bl	bd68e <strlen>
   b47b8:	4430      	add	r0, r6
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b47ba:	4649      	mov	r1, r9
        checkStr[1] = command[strlen(command)-1];
   b47bc:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b47c0:	777b      	strb	r3, [r7, #29]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b47c2:	2210      	movs	r2, #16
   b47c4:	f107 001c 	add.w	r0, r7, #28
        checkStr[2] = '\0';
   b47c8:	f887 901e 	strb.w	r9, [r7, #30]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b47cc:	f009 fe4c 	bl	be468 <strtol>
   b47d0:	4683      	mov	fp, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b47d2:	fa5f fb8b 	uxtb.w	fp, fp
   b47d6:	f007 fd83 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b47da:	49c8      	ldr	r1, [pc, #800]	; (b4afc <_Z14processCommandPKchb+0x3a8>)
   b47dc:	465b      	mov	r3, fp
   b47de:	465a      	mov	r2, fp
   b47e0:	f7ff fd5a 	bl	b4298 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b47e4:	f04f 0904 	mov.w	r9, #4
   b47e8:	4630      	mov	r0, r6
   b47ea:	f008 ff50 	bl	bd68e <strlen>
   b47ee:	3802      	subs	r0, #2
   b47f0:	4581      	cmp	r9, r0
   b47f2:	d21c      	bcs.n	b482e <_Z14processCommandPKchb+0xda>
            if(i < 7) cmdStr[i-4] = command[i];
   b47f4:	f1b9 0f06 	cmp.w	r9, #6
   b47f8:	bf9b      	ittet	ls
   b47fa:	f107 0368 	addls.w	r3, r7, #104	; 0x68
   b47fe:	444b      	addls	r3, r9
            else dataStr[i-7] = command[i];
   b4800:	eb05 0309 	addhi.w	r3, r5, r9
            if(i < 7) cmdStr[i-4] = command[i];
   b4804:	f816 2009 	ldrbls.w	r2, [r6, r9]
            else dataStr[i-7] = command[i];
   b4808:	bf8c      	ite	hi
   b480a:	f816 2009 	ldrbhi.w	r2, [r6, r9]
            if(i < 7) cmdStr[i-4] = command[i];
   b480e:	f803 2c4c 	strbls.w	r2, [r3, #-76]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4812:	f109 0901 	add.w	r9, r9, #1
            else dataStr[i-7] = command[i];
   b4816:	bf88      	it	hi
   b4818:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b481c:	fa5f f989 	uxtb.w	r9, r9
   b4820:	e7e2      	b.n	b47e8 <_Z14processCommandPKchb+0x94>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b4822:	2b43      	cmp	r3, #67	; 0x43
   b4824:	f040 811c 	bne.w	b4a60 <_Z14processCommandPKchb+0x30c>
   b4828:	78c3      	ldrb	r3, [r0, #3]
   b482a:	2b43      	cmp	r3, #67	; 0x43
   b482c:	e79d      	b.n	b476a <_Z14processCommandPKchb+0x16>
        if(checksum != strlen(command)-2){
   b482e:	4558      	cmp	r0, fp
   b4830:	d042      	beq.n	b48b8 <_Z14processCommandPKchb+0x164>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b4832:	f007 fd55 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b4836:	4604      	mov	r4, r0
   b4838:	4630      	mov	r0, r6
   b483a:	f008 ff28 	bl	bd68e <strlen>
   b483e:	1e82      	subs	r2, r0, #2
   b4840:	4620      	mov	r0, r4
   b4842:	4caf      	ldr	r4, [pc, #700]	; (b4b00 <_Z14processCommandPKchb+0x3ac>)
   b4844:	49af      	ldr	r1, [pc, #700]	; (b4b04 <_Z14processCommandPKchb+0x3b0>)
   b4846:	465b      	mov	r3, fp
   b4848:	f7ff fd26 	bl	b4298 <_ZN5Print8printlnfEPKcz>
            if(!logFile.isOpen()){
   b484c:	7c23      	ldrb	r3, [r4, #16]
   b484e:	bb6b      	cbnz	r3, b48ac <_Z14processCommandPKchb+0x158>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4850:	49ad      	ldr	r1, [pc, #692]	; (b4b08 <_Z14processCommandPKchb+0x3b4>)
   b4852:	f244 2202 	movw	r2, #16898	; 0x4202
   b4856:	f104 0010 	add.w	r0, r4, #16
   b485a:	f7ff fdad 	bl	b43b8 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b485e:	49ab      	ldr	r1, [pc, #684]	; (b4b0c <_Z14processCommandPKchb+0x3b8>)
   b4860:	4632      	mov	r2, r6
   b4862:	4620      	mov	r0, r4
   b4864:	f7ff fd18 	bl	b4298 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4868:	f104 0010 	add.w	r0, r4, #16
   b486c:	f002 fc2a 	bl	b70c4 <_ZN7FatFile5closeEv>
            Serial.println("Warning, checksum does not match");
   b4870:	f007 fd36 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b4874:	49a6      	ldr	r1, [pc, #664]	; (b4b10 <_Z14processCommandPKchb+0x3bc>)
   b4876:	f006 ffc6 	bl	bb806 <_ZN5Print7printlnEPKc>
            if((command[1] >= '0' && command[1] <= '9') || command[1] == 'C'){
   b487a:	7873      	ldrb	r3, [r6, #1]
   b487c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b4880:	2a09      	cmp	r2, #9
   b4882:	d902      	bls.n	b488a <_Z14processCommandPKchb+0x136>
   b4884:	2b43      	cmp	r3, #67	; 0x43
   b4886:	f040 80ea 	bne.w	b4a5e <_Z14processCommandPKchb+0x30a>
                rxBotNum[0] = command[0];
   b488a:	7832      	ldrb	r2, [r6, #0]
   b488c:	f887 2038 	strb.w	r2, [r7, #56]	; 0x38
                rxBotNum[1] = command[1];
   b4890:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
                sprintf(errBuf,"CC%2snak%3s",rxBotNum,cmdStr);
   b4894:	499f      	ldr	r1, [pc, #636]	; (b4b14 <_Z14processCommandPKchb+0x3c0>)
   b4896:	48a0      	ldr	r0, [pc, #640]	; (b4b18 <_Z14processCommandPKchb+0x3c4>)
   b4898:	f107 0320 	add.w	r3, r7, #32
   b489c:	f107 0238 	add.w	r2, r7, #56	; 0x38
   b48a0:	f004 f9e4 	bl	b8c6c <sprintf>
                errModeReply = mode;
   b48a4:	4b9d      	ldr	r3, [pc, #628]	; (b4b1c <_Z14processCommandPKchb+0x3c8>)
            errCmdMode = mode;
   b48a6:	f883 a000 	strb.w	sl, [r3]
   b48aa:	e0d8      	b.n	b4a5e <_Z14processCommandPKchb+0x30a>
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b48ac:	4997      	ldr	r1, [pc, #604]	; (b4b0c <_Z14processCommandPKchb+0x3b8>)
   b48ae:	4632      	mov	r2, r6
   b48b0:	4620      	mov	r0, r4
   b48b2:	f7ff fcf1 	bl	b4298 <_ZN5Print8printlnfEPKcz>
   b48b6:	e7db      	b.n	b4870 <_Z14processCommandPKchb+0x11c>
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   b48b8:	4999      	ldr	r1, [pc, #612]	; (b4b20 <_Z14processCommandPKchb+0x3cc>)
   b48ba:	f107 0020 	add.w	r0, r7, #32
   b48be:	f008 feb6 	bl	bd62e <strcmp>
   b48c2:	2800      	cmp	r0, #0
   b48c4:	f000 80cb 	beq.w	b4a5e <_Z14processCommandPKchb+0x30a>
        else if(!strcmp(cmdStr,"sup")){
   b48c8:	4996      	ldr	r1, [pc, #600]	; (b4b24 <_Z14processCommandPKchb+0x3d0>)
   b48ca:	f107 0020 	add.w	r0, r7, #32
        uint8_t rxBotID = atoi(rxIDBuf);
   b48ce:	b2e4      	uxtb	r4, r4
        else if(!strcmp(cmdStr,"sup")){
   b48d0:	f008 fead 	bl	bd62e <strcmp>
   b48d4:	2800      	cmp	r0, #0
   b48d6:	f040 80c7 	bne.w	b4a68 <_Z14processCommandPKchb+0x314>
      : _M_current(__i) { }
   b48da:	4b93      	ldr	r3, [pc, #588]	; (b4b28 <_Z14processCommandPKchb+0x3d4>)
                    Serial.println("##########################");
   b48dc:	f8df 9290 	ldr.w	r9, [pc, #656]	; b4b70 <_Z14processCommandPKchb+0x41c>
   b48e0:	685a      	ldr	r2, [r3, #4]
   b48e2:	681e      	ldr	r6, [r3, #0]
   b48e4:	617a      	str	r2, [r7, #20]
            bool newBot = true;
   b48e6:	2301      	movs	r3, #1
            for(WaterBot w: WaterBots){
   b48e8:	697a      	ldr	r2, [r7, #20]
   b48ea:	42b2      	cmp	r2, r6
   b48ec:	d074      	beq.n	b49d8 <_Z14processCommandPKchb+0x284>
   b48ee:	7832      	ldrb	r2, [r6, #0]
                if(rxBotID == w.botNum){
   b48f0:	4294      	cmp	r4, r2
   b48f2:	d16f      	bne.n	b49d4 <_Z14processCommandPKchb+0x280>
                    sscanf(dataStr,"%u %u %s %s",&battpct,&statflags,testLat,testLon);
   b48f4:	f107 0a38 	add.w	sl, r7, #56	; 0x38
   b48f8:	f107 0b28 	add.w	fp, r7, #40	; 0x28
   b48fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
   b4900:	f107 021b 	add.w	r2, r7, #27
   b4904:	4989      	ldr	r1, [pc, #548]	; (b4b2c <_Z14processCommandPKchb+0x3d8>)
   b4906:	f8cd a004 	str.w	sl, [sp, #4]
   b490a:	f8cd b000 	str.w	fp, [sp]
   b490e:	4628      	mov	r0, r5
   b4910:	f004 f9b4 	bl	b8c7c <sscanf>
                    latRX = atof(testLat);
   b4914:	4658      	mov	r0, fp
   b4916:	f008 fe05 	bl	bd524 <atof>
                    lonRX = atof(testLon);
   b491a:	4650      	mov	r0, sl
                    latRX = atof(testLat);
   b491c:	ed87 0b02 	vstr	d0, [r7, #8]
                    lonRX = atof(testLon);
   b4920:	f008 fe00 	bl	bd524 <atof>
                    w.LTEAvail = statflags & 1;
   b4924:	f897 a024 	ldrb.w	sl, [r7, #36]	; 0x24
                    w.battPercent = battpct;
   b4928:	f897 b01b 	ldrb.w	fp, [r7, #27]
                    lonRX = atof(testLon);
   b492c:	ed87 0b00 	vstr	d0, [r7]
                    Serial.println("Status Update!");
   b4930:	f007 fcd6 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b4934:	497e      	ldr	r1, [pc, #504]	; (b4b30 <_Z14processCommandPKchb+0x3dc>)
   b4936:	f006 ff66 	bl	bb806 <_ZN5Print7printlnEPKc>
                    Serial.println("##########################");
   b493a:	f007 fcd1 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b493e:	4649      	mov	r1, r9
   b4940:	f006 ff61 	bl	bb806 <_ZN5Print7printlnEPKc>
                    Serial.println("##     STATUS UPDATE    ##");
   b4944:	f007 fccc 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b4948:	497a      	ldr	r1, [pc, #488]	; (b4b34 <_Z14processCommandPKchb+0x3e0>)
   b494a:	f006 ff5c 	bl	bb806 <_ZN5Print7printlnEPKc>
                    Serial.printlnf("##       Bot #: %1d      ##",w.botNum);
   b494e:	f007 fcc7 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b4952:	4979      	ldr	r1, [pc, #484]	; (b4b38 <_Z14processCommandPKchb+0x3e4>)
   b4954:	4622      	mov	r2, r4
   b4956:	f7ff fc9f 	bl	b4298 <_ZN5Print8printlnfEPKcz>
                    Serial.printlnf("##      Batt %: %03d     ##",w.battPercent);
   b495a:	f007 fcc1 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b495e:	465a      	mov	r2, fp
   b4960:	4976      	ldr	r1, [pc, #472]	; (b4b3c <_Z14processCommandPKchb+0x3e8>)
   b4962:	f7ff fc99 	bl	b4298 <_ZN5Print8printlnfEPKcz>
                    Serial.println("##    LTE  BLE  XBee    ##");
   b4966:	f007 fcbb 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b496a:	4975      	ldr	r1, [pc, #468]	; (b4b40 <_Z14processCommandPKchb+0x3ec>)
   b496c:	f006 ff4b 	bl	bb806 <_ZN5Print7printlnEPKc>
                    Serial.printlnf("##     %d    %d     %d     ##",w.LTEAvail,w.BLEAvail,w.XBeeAvail);
   b4970:	f007 fcb6 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b4974:	f3ca 0340 	ubfx	r3, sl, #1, #1
   b4978:	f00a 0201 	and.w	r2, sl, #1
   b497c:	4971      	ldr	r1, [pc, #452]	; (b4b44 <_Z14processCommandPKchb+0x3f0>)
   b497e:	9300      	str	r3, [sp, #0]
   b4980:	f3ca 0380 	ubfx	r3, sl, #2, #1
   b4984:	f7ff fc88 	bl	b4298 <_ZN5Print8printlnfEPKcz>
                    Serial.println("##  Latitude Longitude  ##");
   b4988:	f007 fcaa 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b498c:	496e      	ldr	r1, [pc, #440]	; (b4b48 <_Z14processCommandPKchb+0x3f4>)
   b498e:	f006 ff3a 	bl	bb806 <_ZN5Print7printlnEPKc>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4992:	f007 fca5 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b4996:	4682      	mov	sl, r0
                    latRX = atof(testLat);
   b4998:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   b499c:	f008 fd4e 	bl	bd43c <__aeabi_d2f>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b49a0:	f008 fa12 	bl	bcdc8 <__aeabi_f2d>
   b49a4:	4602      	mov	r2, r0
   b49a6:	460b      	mov	r3, r1
                    lonRX = atof(testLon);
   b49a8:	e9d7 0100 	ldrd	r0, r1, [r7]
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b49ac:	e9c7 2302 	strd	r2, r3, [r7, #8]
                    lonRX = atof(testLon);
   b49b0:	f008 fd44 	bl	bd43c <__aeabi_d2f>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b49b4:	f008 fa08 	bl	bcdc8 <__aeabi_f2d>
   b49b8:	e9cd 0100 	strd	r0, r1, [sp]
   b49bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   b49c0:	4962      	ldr	r1, [pc, #392]	; (b4b4c <_Z14processCommandPKchb+0x3f8>)
   b49c2:	4650      	mov	r0, sl
   b49c4:	f7ff fc68 	bl	b4298 <_ZN5Print8printlnfEPKcz>
                    Serial.println("##########################");
   b49c8:	f007 fc8a 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b49cc:	4649      	mov	r1, r9
   b49ce:	f006 ff1a 	bl	bb806 <_ZN5Print7printlnEPKc>
                    newBot = false;
   b49d2:	2300      	movs	r3, #0
      operator++() _GLIBCXX_NOEXCEPT
   b49d4:	3618      	adds	r6, #24
	return *this;
   b49d6:	e787      	b.n	b48e8 <_Z14processCommandPKchb+0x194>
            if(newBot){
   b49d8:	2b00      	cmp	r3, #0
   b49da:	d040      	beq.n	b4a5e <_Z14processCommandPKchb+0x30a>
                Serial.println("Found a new water bot ID");
   b49dc:	f007 fc80 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b49e0:	495b      	ldr	r1, [pc, #364]	; (b4b50 <_Z14processCommandPKchb+0x3fc>)
   b49e2:	f006 ff10 	bl	bb806 <_ZN5Print7printlnEPKc>
                newWaterbot.BLEAvail = true;
   b49e6:	2301      	movs	r3, #1
   b49e8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
                sscanf(dataStr,"%u %u %f %f",&battpct,&statflags,&latRX,&lonRX);
   b49ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
                newWaterbot.botNum = rxBotID;
   b49f0:	f887 4038 	strb.w	r4, [r7, #56]	; 0x38
                sscanf(dataStr,"%u %u %f %f",&battpct,&statflags,&latRX,&lonRX);
   b49f4:	9301      	str	r3, [sp, #4]
   b49f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
   b49fa:	4956      	ldr	r1, [pc, #344]	; (b4b54 <_Z14processCommandPKchb+0x400>)
   b49fc:	9300      	str	r3, [sp, #0]
   b49fe:	f107 021a 	add.w	r2, r7, #26
   b4a02:	f107 031b 	add.w	r3, r7, #27
   b4a06:	4628      	mov	r0, r5
   b4a08:	f004 f938 	bl	b8c7c <sscanf>
                newWaterbot.battPercent = battpct;
   b4a0c:	7ebb      	ldrb	r3, [r7, #26]
   b4a0e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
                newWaterbot.LTEAvail = statflags & 1;
   b4a12:	7efb      	ldrb	r3, [r7, #27]
                WaterBots.push_back(newWaterbot);
   b4a14:	4844      	ldr	r0, [pc, #272]	; (b4b28 <_Z14processCommandPKchb+0x3d4>)
                newWaterbot.LTEAvail = statflags & 1;
   b4a16:	f003 0201 	and.w	r2, r3, #1
   b4a1a:	f887 203b 	strb.w	r2, [r7, #59]	; 0x3b
                newWaterbot.XBeeAvail = (statflags >> 1) & 1;
   b4a1e:	f3c3 0240 	ubfx	r2, r3, #1, #1
   b4a22:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
                newWaterbot.BLEAvail = (statflags >> 2) & 1;
   b4a26:	f3c3 0280 	ubfx	r2, r3, #2, #1
   b4a2a:	f887 203a 	strb.w	r2, [r7, #58]	; 0x3a
                newWaterbot.offloading = (statflags >> 3) & 1;
   b4a2e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   b4a32:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
                newWaterbot.manualRC = (statflags >> 4) & 1;
   b4a36:	f3c3 1200 	ubfx	r2, r3, #4, #1
   b4a3a:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
                newWaterbot.lowBatt = (statflags >> 5) & 1;
   b4a3e:	f3c3 1240 	ubfx	r2, r3, #5, #1
                newWaterbot.dataRecording = (statflags >> 6) & 1;
   b4a42:	f3c3 1380 	ubfx	r3, r3, #6, #1
   b4a46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                newWaterbot.GPSLat = latRX;
   b4a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   b4a4c:	647b      	str	r3, [r7, #68]	; 0x44
                WaterBots.push_back(newWaterbot);
   b4a4e:	f107 0138 	add.w	r1, r7, #56	; 0x38
                newWaterbot.GPSLon = lonRX;
   b4a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
                newWaterbot.lowBatt = (statflags >> 5) & 1;
   b4a54:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
                newWaterbot.GPSLon = lonRX;
   b4a58:	64bb      	str	r3, [r7, #72]	; 0x48
                WaterBots.push_back(newWaterbot);
   b4a5a:	f7ff fe63 	bl	b4724 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
   b4a5e:	46c5      	mov	sp, r8
}
   b4a60:	376c      	adds	r7, #108	; 0x6c
   b4a62:	46bd      	mov	sp, r7
   b4a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(!strcmp(cmdStr,"nak")){  //Acknowledgement for XBee and BLE
   b4a68:	493b      	ldr	r1, [pc, #236]	; (b4b58 <_Z14processCommandPKchb+0x404>)
   b4a6a:	f107 0020 	add.w	r0, r7, #32
   b4a6e:	f008 fdde 	bl	bd62e <strcmp>
   b4a72:	b930      	cbnz	r0, b4a82 <_Z14processCommandPKchb+0x32e>
            strncpy(errCmdStr,dataStr,3);
   b4a74:	4839      	ldr	r0, [pc, #228]	; (b4b5c <_Z14processCommandPKchb+0x408>)
   b4a76:	2203      	movs	r2, #3
   b4a78:	4629      	mov	r1, r5
   b4a7a:	f008 fe24 	bl	bd6c6 <strncpy>
            errCmdMode = mode;
   b4a7e:	4b38      	ldr	r3, [pc, #224]	; (b4b60 <_Z14processCommandPKchb+0x40c>)
   b4a80:	e711      	b.n	b48a6 <_Z14processCommandPKchb+0x152>
        else if(!strcmp(cmdStr,"hwd")){  //Hello World! - Received startup pairing message
   b4a82:	4938      	ldr	r1, [pc, #224]	; (b4b64 <_Z14processCommandPKchb+0x410>)
   b4a84:	f107 0020 	add.w	r0, r7, #32
   b4a88:	f008 fdd1 	bl	bd62e <strcmp>
   b4a8c:	2800      	cmp	r0, #0
   b4a8e:	d171      	bne.n	b4b74 <_Z14processCommandPKchb+0x420>
      : _M_current(__i) { }
   b4a90:	4b25      	ldr	r3, [pc, #148]	; (b4b28 <_Z14processCommandPKchb+0x3d4>)
   b4a92:	e9d3 2000 	ldrd	r2, r0, [r3]
            bool newBot = true;
   b4a96:	2301      	movs	r3, #1
            for(WaterBot w: WaterBots){
   b4a98:	4282      	cmp	r2, r0
   b4a9a:	d005      	beq.n	b4aa8 <_Z14processCommandPKchb+0x354>
                if(rxBotID == w.botNum) newBot = false;
   b4a9c:	f812 1b18 	ldrb.w	r1, [r2], #24
   b4aa0:	42a1      	cmp	r1, r4
   b4aa2:	bf08      	it	eq
   b4aa4:	2300      	moveq	r3, #0
	return *this;
   b4aa6:	e7f7      	b.n	b4a98 <_Z14processCommandPKchb+0x344>
            if(newBot){
   b4aa8:	b1ab      	cbz	r3, b4ad6 <_Z14processCommandPKchb+0x382>
                Serial.println("Found a new water bot ID");
   b4aaa:	f007 fc19 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b4aae:	4928      	ldr	r1, [pc, #160]	; (b4b50 <_Z14processCommandPKchb+0x3fc>)
   b4ab0:	f006 fea9 	bl	bb806 <_ZN5Print7printlnEPKc>
                if(mode == 1) newWaterbot.BLEAvail = true;
   b4ab4:	f1ba 0f01 	cmp.w	sl, #1
   b4ab8:	d111      	bne.n	b4ade <_Z14processCommandPKchb+0x38a>
   b4aba:	f887 a03a 	strb.w	sl, [r7, #58]	; 0x3a
                WaterBots.push_back(newWaterbot);
   b4abe:	481a      	ldr	r0, [pc, #104]	; (b4b28 <_Z14processCommandPKchb+0x3d4>)
                newWaterbot.botNum = rxBotID;
   b4ac0:	f887 4038 	strb.w	r4, [r7, #56]	; 0x38
                WaterBots.push_back(newWaterbot);
   b4ac4:	f107 0138 	add.w	r1, r7, #56	; 0x38
   b4ac8:	f7ff fe2c 	bl	b4724 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
                PairBots.push_back(newWaterbot);
   b4acc:	4826      	ldr	r0, [pc, #152]	; (b4b68 <_Z14processCommandPKchb+0x414>)
   b4ace:	f107 0138 	add.w	r1, r7, #56	; 0x38
   b4ad2:	f7ff fe27 	bl	b4724 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
            botPairRx = true;
   b4ad6:	4b25      	ldr	r3, [pc, #148]	; (b4b6c <_Z14processCommandPKchb+0x418>)
   b4ad8:	2201      	movs	r2, #1
   b4ada:	701a      	strb	r2, [r3, #0]
   b4adc:	e7bf      	b.n	b4a5e <_Z14processCommandPKchb+0x30a>
                else if(mode == 2) newWaterbot.XBeeAvail = true;
   b4ade:	f1ba 0f02 	cmp.w	sl, #2
   b4ae2:	f04f 0301 	mov.w	r3, #1
   b4ae6:	d102      	bne.n	b4aee <_Z14processCommandPKchb+0x39a>
   b4ae8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
   b4aec:	e7e7      	b.n	b4abe <_Z14processCommandPKchb+0x36a>
                else if(mode == 3) newWaterbot.LTEAvail = true;
   b4aee:	f1ba 0f03 	cmp.w	sl, #3
   b4af2:	bf08      	it	eq
   b4af4:	f887 303b 	strbeq.w	r3, [r7, #59]	; 0x3b
   b4af8:	e7e1      	b.n	b4abe <_Z14processCommandPKchb+0x36a>
   b4afa:	bf00      	nop
   b4afc:	000bf784 	.word	0x000bf784
   b4b00:	2003ddc0 	.word	0x2003ddc0
   b4b04:	000bf799 	.word	0x000bf799
   b4b08:	2003dd69 	.word	0x2003dd69
   b4b0c:	000bf7b6 	.word	0x000bf7b6
   b4b10:	000bf7e2 	.word	0x000bf7e2
   b4b14:	000bf803 	.word	0x000bf803
   b4b18:	2003dd55 	.word	0x2003dd55
   b4b1c:	2003dd68 	.word	0x2003dd68
   b4b20:	000bf80f 	.word	0x000bf80f
   b4b24:	000bf813 	.word	0x000bf813
   b4b28:	2003dcbc 	.word	0x2003dcbc
   b4b2c:	000bf817 	.word	0x000bf817
   b4b30:	000bf823 	.word	0x000bf823
   b4b34:	000bf84d 	.word	0x000bf84d
   b4b38:	000bf868 	.word	0x000bf868
   b4b3c:	000bf884 	.word	0x000bf884
   b4b40:	000bf8a0 	.word	0x000bf8a0
   b4b44:	000bf8bb 	.word	0x000bf8bb
   b4b48:	000bf8d9 	.word	0x000bf8d9
   b4b4c:	000bf8f4 	.word	0x000bf8f4
   b4b50:	000bf904 	.word	0x000bf904
   b4b54:	000bf91d 	.word	0x000bf91d
   b4b58:	000bf929 	.word	0x000bf929
   b4b5c:	2003dd65 	.word	0x2003dd65
   b4b60:	2003dd64 	.word	0x2003dd64
   b4b64:	000bfc76 	.word	0x000bfc76
   b4b68:	2003dca4 	.word	0x2003dca4
   b4b6c:	2003dd54 	.word	0x2003dd54
   b4b70:	000bf832 	.word	0x000bf832
        else if(!strcmp(cmdStr,"pts")){
   b4b74:	4925      	ldr	r1, [pc, #148]	; (b4c0c <_Z14processCommandPKchb+0x4b8>)
   b4b76:	f107 0020 	add.w	r0, r7, #32
   b4b7a:	f008 fd58 	bl	bd62e <strcmp>
   b4b7e:	2800      	cmp	r0, #0
   b4b80:	f47f af6d 	bne.w	b4a5e <_Z14processCommandPKchb+0x30a>
            Serial.println(dataStr);
   b4b84:	f007 fbac 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b4b88:	4629      	mov	r1, r5
   b4b8a:	f006 fe3c 	bl	bb806 <_ZN5Print7printlnEPKc>
            myFile.open("RawWrite.txt", O_RDWR | O_CREAT | O_AT_END);
   b4b8e:	f244 2202 	movw	r2, #16898	; 0x4202
   b4b92:	491f      	ldr	r1, [pc, #124]	; (b4c10 <_Z14processCommandPKchb+0x4bc>)
   b4b94:	481f      	ldr	r0, [pc, #124]	; (b4c14 <_Z14processCommandPKchb+0x4c0>)
   b4b96:	f7ff fc0f 	bl	b43b8 <_ZN7FatFile4openEPKci>
            String modeStr[3] = {"LTE", "XBee", "Bluetooth"};
   b4b9a:	491f      	ldr	r1, [pc, #124]	; (b4c18 <_Z14processCommandPKchb+0x4c4>)
   b4b9c:	f107 0038 	add.w	r0, r7, #56	; 0x38
   b4ba0:	f004 fa15 	bl	b8fce <_ZN6StringC1EPK19__FlashStringHelper>
   b4ba4:	491d      	ldr	r1, [pc, #116]	; (b4c1c <_Z14processCommandPKchb+0x4c8>)
   b4ba6:	f107 0048 	add.w	r0, r7, #72	; 0x48
   b4baa:	f004 fa10 	bl	b8fce <_ZN6StringC1EPK19__FlashStringHelper>
   b4bae:	491c      	ldr	r1, [pc, #112]	; (b4c20 <_Z14processCommandPKchb+0x4cc>)
   b4bb0:	f107 0058 	add.w	r0, r7, #88	; 0x58
   b4bb4:	f004 fa0b 	bl	b8fce <_ZN6StringC1EPK19__FlashStringHelper>
            myFile.printf("New string from %s: ", modeStr[mode]);
   b4bb8:	f107 0338 	add.w	r3, r7, #56	; 0x38
   b4bbc:	eb03 110a 	add.w	r1, r3, sl, lsl #4
   b4bc0:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4bc4:	f004 fa4e 	bl	b9064 <_ZN6StringC1ERKS_>
   b4bc8:	f107 0228 	add.w	r2, r7, #40	; 0x28
   b4bcc:	4915      	ldr	r1, [pc, #84]	; (b4c24 <_Z14processCommandPKchb+0x4d0>)
   b4bce:	4816      	ldr	r0, [pc, #88]	; (b4c28 <_Z14processCommandPKchb+0x4d4>)
   b4bd0:	f7ff fb29 	bl	b4226 <_ZN5Print6printfEPKcz>
   b4bd4:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4bd8:	f004 f9ae 	bl	b8f38 <_ZN6StringD1Ev>
            myFile.println(dataStr);
   b4bdc:	4629      	mov	r1, r5
   b4bde:	4812      	ldr	r0, [pc, #72]	; (b4c28 <_Z14processCommandPKchb+0x4d4>)
   b4be0:	f006 fe11 	bl	bb806 <_ZN5Print7printlnEPKc>
            delay(5);
   b4be4:	2005      	movs	r0, #5
   b4be6:	f006 ff67 	bl	bbab8 <delay>
            myFile.close();
   b4bea:	480a      	ldr	r0, [pc, #40]	; (b4c14 <_Z14processCommandPKchb+0x4c0>)
   b4bec:	f002 fa6a 	bl	b70c4 <_ZN7FatFile5closeEv>
            String modeStr[3] = {"LTE", "XBee", "Bluetooth"};
   b4bf0:	f107 0058 	add.w	r0, r7, #88	; 0x58
   b4bf4:	f004 f9a0 	bl	b8f38 <_ZN6StringD1Ev>
   b4bf8:	f107 0048 	add.w	r0, r7, #72	; 0x48
   b4bfc:	f004 f99c 	bl	b8f38 <_ZN6StringD1Ev>
   b4c00:	f107 0038 	add.w	r0, r7, #56	; 0x38
   b4c04:	f004 f998 	bl	b8f38 <_ZN6StringD1Ev>
        if(sendAck){    //Transmit out acknowledgement if needed
   b4c08:	e729      	b.n	b4a5e <_Z14processCommandPKchb+0x30a>
   b4c0a:	bf00      	nop
   b4c0c:	000bf92d 	.word	0x000bf92d
   b4c10:	000bf931 	.word	0x000bf931
   b4c14:	2003de08 	.word	0x2003de08
   b4c18:	000bf93e 	.word	0x000bf93e
   b4c1c:	000bf942 	.word	0x000bf942
   b4c20:	000bf947 	.word	0x000bf947
   b4c24:	000bf951 	.word	0x000bf951
   b4c28:	2003ddf8 	.word	0x2003ddf8

000b4c2c <_Z14dataLTEHandlerPKcS0_>:
void dataLTEHandler(const char *event, const char *data){
   b4c2c:	b510      	push	{r4, lr}
   b4c2e:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b4c30:	2200      	movs	r2, #0
   b4c32:	2104      	movs	r1, #4
   b4c34:	4620      	mov	r0, r4
   b4c36:	f7ff fd8d 	bl	b4754 <_Z14processCommandPKchb>
    if(logMessages){
   b4c3a:	4b0b      	ldr	r3, [pc, #44]	; (b4c68 <_Z14dataLTEHandlerPKcS0_+0x3c>)
   b4c3c:	781b      	ldrb	r3, [r3, #0]
   b4c3e:	b193      	cbz	r3, b4c66 <_Z14dataLTEHandlerPKcS0_+0x3a>
   b4c40:	480a      	ldr	r0, [pc, #40]	; (b4c6c <_Z14dataLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4c42:	7c03      	ldrb	r3, [r0, #16]
   b4c44:	b92b      	cbnz	r3, b4c52 <_Z14dataLTEHandlerPKcS0_+0x26>
   b4c46:	490a      	ldr	r1, [pc, #40]	; (b4c70 <_Z14dataLTEHandlerPKcS0_+0x44>)
   b4c48:	f244 2202 	movw	r2, #16898	; 0x4202
   b4c4c:	3010      	adds	r0, #16
   b4c4e:	f7ff fbb3 	bl	b43b8 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b4c52:	4622      	mov	r2, r4
   b4c54:	4907      	ldr	r1, [pc, #28]	; (b4c74 <_Z14dataLTEHandlerPKcS0_+0x48>)
   b4c56:	4805      	ldr	r0, [pc, #20]	; (b4c6c <_Z14dataLTEHandlerPKcS0_+0x40>)
   b4c58:	f7ff fb1e 	bl	b4298 <_ZN5Print8printlnfEPKcz>
}
   b4c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b4c60:	4805      	ldr	r0, [pc, #20]	; (b4c78 <_Z14dataLTEHandlerPKcS0_+0x4c>)
   b4c62:	f002 ba2f 	b.w	b70c4 <_ZN7FatFile5closeEv>
}
   b4c66:	bd10      	pop	{r4, pc}
   b4c68:	2003ddf4 	.word	0x2003ddf4
   b4c6c:	2003ddc0 	.word	0x2003ddc0
   b4c70:	2003dd69 	.word	0x2003dd69
   b4c74:	000bf966 	.word	0x000bf966
   b4c78:	2003ddd0 	.word	0x2003ddd0

000b4c7c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4c7c:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b4c7e:	f101 0308 	add.w	r3, r1, #8
   b4c82:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4c86:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b4c88:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4c8c:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b4c8e:	460a      	mov	r2, r1
   b4c90:	4601      	mov	r1, r0
   b4c92:	4668      	mov	r0, sp
   b4c94:	f008 fc5d 	bl	bd552 <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4c98:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b4c9c:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4c9e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b4ca2:	b113      	cbz	r3, b4caa <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b4ca4:	2300      	movs	r3, #0
   b4ca6:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.print("New BT Command: ");
   b4caa:	f007 fb19 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b4cae:	4911      	ldr	r1, [pc, #68]	; (b4cf4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>)
   b4cb0:	f006 fd96 	bl	bb7e0 <_ZN5Print5printEPKc>
    Serial.println(btBuf);
   b4cb4:	f007 fb14 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b4cb8:	4629      	mov	r1, r5
   b4cba:	f006 fda4 	bl	bb806 <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b4cbe:	2201      	movs	r2, #1
   b4cc0:	4611      	mov	r1, r2
   b4cc2:	4628      	mov	r0, r5
   b4cc4:	f7ff fd46 	bl	b4754 <_Z14processCommandPKchb>
    if(logMessages){
   b4cc8:	4b0b      	ldr	r3, [pc, #44]	; (b4cf8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   b4cca:	781b      	ldrb	r3, [r3, #0]
   b4ccc:	b183      	cbz	r3, b4cf0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>
   b4cce:	480b      	ldr	r0, [pc, #44]	; (b4cfc <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4cd0:	7c03      	ldrb	r3, [r0, #16]
   b4cd2:	b92b      	cbnz	r3, b4ce0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>
   b4cd4:	490a      	ldr	r1, [pc, #40]	; (b4d00 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84>)
   b4cd6:	f244 2202 	movw	r2, #16898	; 0x4202
   b4cda:	3010      	adds	r0, #16
   b4cdc:	f7ff fb6c 	bl	b43b8 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b4ce0:	4908      	ldr	r1, [pc, #32]	; (b4d04 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   b4ce2:	4806      	ldr	r0, [pc, #24]	; (b4cfc <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
   b4ce4:	462a      	mov	r2, r5
   b4ce6:	f7ff fad7 	bl	b4298 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4cea:	4807      	ldr	r0, [pc, #28]	; (b4d08 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b4cec:	f002 f9ea 	bl	b70c4 <_ZN7FatFile5closeEv>
}
   b4cf0:	46bd      	mov	sp, r7
   b4cf2:	bdb0      	pop	{r4, r5, r7, pc}
   b4cf4:	000bf986 	.word	0x000bf986
   b4cf8:	2003ddf4 	.word	0x2003ddf4
   b4cfc:	2003ddc0 	.word	0x2003ddc0
   b4d00:	2003dd69 	.word	0x2003dd69
   b4d04:	000bf997 	.word	0x000bf997
   b4d08:	2003ddd0 	.word	0x2003ddd0

000b4d0c <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b4d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b4d10:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b4e00 <_Z11XBeeHandlerv+0xf4>
        if(logMessages){
   b4d14:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b4e04 <_Z11XBeeHandlerv+0xf8>
   b4d18:	4d35      	ldr	r5, [pc, #212]	; (b4df0 <_Z11XBeeHandlerv+0xe4>)
void XBeeHandler(){  
   b4d1a:	b089      	sub	sp, #36	; 0x24
   b4d1c:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b4d1e:	f007 fd75 	bl	bc80c <_Z22__fetch_global_Serial1v>
   b4d22:	6803      	ldr	r3, [r0, #0]
   b4d24:	691b      	ldr	r3, [r3, #16]
   b4d26:	4798      	blx	r3
   b4d28:	2800      	cmp	r0, #0
   b4d2a:	d05c      	beq.n	b4de6 <_Z11XBeeHandlerv+0xda>
        String data = Serial1.readStringUntil('\n');
   b4d2c:	f007 fd6e 	bl	bc80c <_Z22__fetch_global_Serial1v>
   b4d30:	220a      	movs	r2, #10
   b4d32:	4601      	mov	r1, r0
   b4d34:	4638      	mov	r0, r7
   b4d36:	f006 fdd5 	bl	bb8e4 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b4d3a:	68bb      	ldr	r3, [r7, #8]
   b4d3c:	3307      	adds	r3, #7
   b4d3e:	f023 0307 	bic.w	r3, r3, #7
    }
   b4d42:	466e      	mov	r6, sp
        char buffer[data.length()];
   b4d44:	ebad 0d03 	sub.w	sp, sp, r3
   b4d48:	46ea      	mov	sl, sp
   b4d4a:	2300      	movs	r3, #0
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b4d4c:	68b9      	ldr	r1, [r7, #8]
   b4d4e:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b4d52:	458b      	cmp	fp, r1
   b4d54:	f103 0401 	add.w	r4, r3, #1
   b4d58:	d207      	bcs.n	b4d6a <_Z11XBeeHandlerv+0x5e>
   b4d5a:	4659      	mov	r1, fp
   b4d5c:	4638      	mov	r0, r7
   b4d5e:	f004 f9ed 	bl	b913c <_ZNK6String6charAtEj>
   b4d62:	4623      	mov	r3, r4
   b4d64:	f80a 000b 	strb.w	r0, [sl, fp]
   b4d68:	e7f0      	b.n	b4d4c <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b4d6a:	2901      	cmp	r1, #1
   b4d6c:	d90a      	bls.n	b4d84 <_Z11XBeeHandlerv+0x78>
   b4d6e:	3901      	subs	r1, #1
   b4d70:	4638      	mov	r0, r7
   b4d72:	f004 f9e3 	bl	b913c <_ZNK6String6charAtEj>
   b4d76:	280d      	cmp	r0, #13
   b4d78:	bf01      	itttt	eq
   b4d7a:	68bb      	ldreq	r3, [r7, #8]
   b4d7c:	4453      	addeq	r3, sl
   b4d7e:	2200      	moveq	r2, #0
   b4d80:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        processCommand(buffer,2,true);
   b4d84:	2201      	movs	r2, #1
   b4d86:	2102      	movs	r1, #2
   b4d88:	4650      	mov	r0, sl
   b4d8a:	f7ff fce3 	bl	b4754 <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   b4d8e:	f007 faa7 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b4d92:	4641      	mov	r1, r8
   b4d94:	f006 fd37 	bl	bb806 <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b4d98:	f007 faa2 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b4d9c:	6839      	ldr	r1, [r7, #0]
   b4d9e:	f006 fd32 	bl	bb806 <_ZN5Print7printlnEPKc>
        if(logMessages){
   b4da2:	f899 3000 	ldrb.w	r3, [r9]
   b4da6:	b1cb      	cbz	r3, b4ddc <_Z11XBeeHandlerv+0xd0>
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4da8:	7c2b      	ldrb	r3, [r5, #16]
   b4daa:	b92b      	cbnz	r3, b4db8 <_Z11XBeeHandlerv+0xac>
   b4dac:	4911      	ldr	r1, [pc, #68]	; (b4df4 <_Z11XBeeHandlerv+0xe8>)
   b4dae:	4812      	ldr	r0, [pc, #72]	; (b4df8 <_Z11XBeeHandlerv+0xec>)
   b4db0:	f244 2202 	movw	r2, #16898	; 0x4202
   b4db4:	f7ff fb00 	bl	b43b8 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b4db8:	4639      	mov	r1, r7
   b4dba:	f107 0010 	add.w	r0, r7, #16
   b4dbe:	f004 f951 	bl	b9064 <_ZN6StringC1ERKS_>
   b4dc2:	490e      	ldr	r1, [pc, #56]	; (b4dfc <_Z11XBeeHandlerv+0xf0>)
   b4dc4:	f107 0210 	add.w	r2, r7, #16
   b4dc8:	4628      	mov	r0, r5
   b4dca:	f7ff fa65 	bl	b4298 <_ZN5Print8printlnfEPKcz>
   b4dce:	f107 0010 	add.w	r0, r7, #16
   b4dd2:	f004 f8b1 	bl	b8f38 <_ZN6StringD1Ev>
            logFile.close();
   b4dd6:	4808      	ldr	r0, [pc, #32]	; (b4df8 <_Z11XBeeHandlerv+0xec>)
   b4dd8:	f002 f974 	bl	b70c4 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b4ddc:	4638      	mov	r0, r7
   b4dde:	f004 f8ab 	bl	b8f38 <_ZN6StringD1Ev>
   b4de2:	46b5      	mov	sp, r6
    while(Serial1.available()){
   b4de4:	e79b      	b.n	b4d1e <_Z11XBeeHandlerv+0x12>
}
   b4de6:	3724      	adds	r7, #36	; 0x24
   b4de8:	46bd      	mov	sp, r7
   b4dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4dee:	bf00      	nop
   b4df0:	2003ddc0 	.word	0x2003ddc0
   b4df4:	2003dd69 	.word	0x2003dd69
   b4df8:	2003ddd0 	.word	0x2003ddd0
   b4dfc:	000bf9c9 	.word	0x000bf9c9
   b4e00:	000bf9b7 	.word	0x000bf9b7
   b4e04:	2003ddf4 	.word	0x2003ddf4

000b4e08 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b4e08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4e0c:	e9d0 8900 	ldrd	r8, r9, [r0]
   b4e10:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
   b4e12:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4e16:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
   b4e1a:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   b4e1e:	4607      	mov	r7, r0
   b4e20:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4e22:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   b4e26:	d102      	bne.n	b4e2e <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b4e28:	4820      	ldr	r0, [pc, #128]	; (b4eac <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
   b4e2a:	f007 fd51 	bl	bc8d0 <_ZSt20__throw_length_errorPKc>
   b4e2e:	2c01      	cmp	r4, #1
   b4e30:	4622      	mov	r2, r4
   b4e32:	bf38      	it	cc
   b4e34:	2201      	movcc	r2, #1
   b4e36:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b4e38:	eba1 0508 	sub.w	r5, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4e3c:	d231      	bcs.n	b4ea2 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4e3e:	b394      	cbz	r4, b4ea6 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
   b4e40:	429c      	cmp	r4, r3
   b4e42:	bf28      	it	cs
   b4e44:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4e46:	00e0      	lsls	r0, r4, #3
   b4e48:	f7ff f925 	bl	b4096 <_Znwj>
   b4e4c:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4e4e:	1973      	adds	r3, r6, r5
   b4e50:	bf1c      	itt	ne
   b4e52:	e9db 0100 	ldrdne	r0, r1, [fp]
   b4e56:	e9c3 0100 	strdne	r0, r1, [r3]
      if (__count > 0)
   b4e5a:	2d00      	cmp	r5, #0
   b4e5c:	dd04      	ble.n	b4e68 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x60>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b4e5e:	462a      	mov	r2, r5
   b4e60:	4641      	mov	r1, r8
   b4e62:	4630      	mov	r0, r6
   b4e64:	f008 fb83 	bl	bd56e <memmove>
      ptrdiff_t __count = __last - __first;
   b4e68:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
   b4e6c:	3508      	adds	r5, #8
      if (__count > 0)
   b4e6e:	f1b9 0f00 	cmp.w	r9, #0
   b4e72:	4435      	add	r5, r6
   b4e74:	dd04      	ble.n	b4e80 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b4e76:	464a      	mov	r2, r9
   b4e78:	4651      	mov	r1, sl
   b4e7a:	4628      	mov	r0, r5
   b4e7c:	f008 fb69 	bl	bd552 <memcpy>
      return __result + __count;
   b4e80:	444d      	add	r5, r9
	if (__p)
   b4e82:	f1b8 0f00 	cmp.w	r8, #0
   b4e86:	d005      	beq.n	b4e94 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
   b4e88:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b4e8a:	4640      	mov	r0, r8
   b4e8c:	eba1 0108 	sub.w	r1, r1, r8
   b4e90:	f7ff f905 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b4e94:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   b4e98:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b4e9c:	60bc      	str	r4, [r7, #8]
    }
   b4e9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4ea2:	461c      	mov	r4, r3
   b4ea4:	e7cf      	b.n	b4e46 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4ea6:	4626      	mov	r6, r4
   b4ea8:	e7d1      	b.n	b4e4e <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
   b4eaa:	bf00      	nop
   b4eac:	000bf76a 	.word	0x000bf76a

000b4eb0 <_Z7BLEScani>:
void BLEScan(int BotNumber){
   b4eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4eb4:	b09f      	sub	sp, #124	; 0x7c
   b4eb6:	4606      	mov	r6, r0
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   b4eb8:	f004 fe44 	bl	b9b44 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4ebc:	4976      	ldr	r1, [pc, #472]	; (b5098 <_Z7BLEScani+0x1e8>)
   b4ebe:	2214      	movs	r2, #20
   b4ec0:	f004 ff34 	bl	b9d2c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
	if (count > 0) {
   b4ec4:	4680      	mov	r8, r0
   b4ec6:	2800      	cmp	r0, #0
   b4ec8:	f000 80e2 	beq.w	b5090 <_Z7BLEScani+0x1e0>
    const BleAddress& address() const {
        return address_;
    }

    const BleAdvertisingData& advertisingData() const {
        return advertisingData_;
   b4ecc:	f8df b1c8 	ldr.w	fp, [pc, #456]	; b5098 <_Z7BLEScani+0x1e8>
		for (uint8_t ii = 0; ii < count; ii++) {
   b4ed0:	2400      	movs	r4, #0
			BleUuid foundServiceUuid;
   b4ed2:	eb04 09c4 	add.w	r9, r4, r4, lsl #3
   b4ed6:	ea4f 0989 	mov.w	r9, r9, lsl #2
   b4eda:	f109 0708 	add.w	r7, r9, #8
   b4ede:	a80b      	add	r0, sp, #44	; 0x2c
   b4ee0:	445f      	add	r7, fp
   b4ee2:	f004 fa93 	bl	b940c <_ZN8particle7BleUuidC1Ev>
			size_t svcCount = scanResults[ii].advertisingData().serviceUUID(&foundServiceUuid, 1);
   b4ee6:	2201      	movs	r2, #1
   b4ee8:	a90b      	add	r1, sp, #44	; 0x2c
   b4eea:	4638      	mov	r0, r7
   b4eec:	f005 fde6 	bl	baabc <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
            if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   b4ef0:	4682      	mov	sl, r0
   b4ef2:	2800      	cmp	r0, #0
   b4ef4:	d056      	beq.n	b4fa4 <_Z7BLEScani+0xf4>
   b4ef6:	4969      	ldr	r1, [pc, #420]	; (b509c <_Z7BLEScani+0x1ec>)
   b4ef8:	a80b      	add	r0, sp, #44	; 0x2c
   b4efa:	f004 fae2 	bl	b94c2 <_ZNK8particle7BleUuideqERKS0_>
   b4efe:	4605      	mov	r5, r0
   b4f00:	2800      	cmp	r0, #0
   b4f02:	d04f      	beq.n	b4fa4 <_Z7BLEScani+0xf4>
                scanResults[ii].advertisingData().customData(BLECustomData,CUSTOM_DATA_LEN);
   b4f04:	2208      	movs	r2, #8
   b4f06:	a909      	add	r1, sp, #36	; 0x24
   b4f08:	4638      	mov	r0, r7
   b4f0a:	f004 fc37 	bl	b977c <_ZNK8particle18BleAdvertisingData10customDataEPhj>
                if(BotNumber == -2){
   b4f0e:	1cb2      	adds	r2, r6, #2
   b4f10:	d153      	bne.n	b4fba <_Z7BLEScani+0x10a>
                    Serial.printlnf("Found Bot #: %d %d %d %d %d %d %d %d, services: %d",BLECustomData[0],BLECustomData[1],BLECustomData[2],BLECustomData[3],BLECustomData[4],BLECustomData[5],BLECustomData[6],BLECustomData[7], svcCount);
   b4f12:	f007 f9e5 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b4f16:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   b4f1a:	9305      	str	r3, [sp, #20]
   b4f1c:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   b4f20:	9304      	str	r3, [sp, #16]
   b4f22:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   b4f26:	9303      	str	r3, [sp, #12]
   b4f28:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   b4f2c:	9302      	str	r3, [sp, #8]
   b4f2e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
      : _M_current(__i) { }
   b4f32:	4f5b      	ldr	r7, [pc, #364]	; (b50a0 <_Z7BLEScani+0x1f0>)
   b4f34:	9301      	str	r3, [sp, #4]
   b4f36:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   b4f3a:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   b4f3e:	4959      	ldr	r1, [pc, #356]	; (b50a4 <_Z7BLEScani+0x1f4>)
   b4f40:	9300      	str	r3, [sp, #0]
   b4f42:	f8cd a018 	str.w	sl, [sp, #24]
   b4f46:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   b4f4a:	f7ff f9a5 	bl	b4298 <_ZN5Print8printlnfEPKcz>
   b4f4e:	687b      	ldr	r3, [r7, #4]
                        if(BLECustomData[0] == p.botNum){
   b4f50:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
   b4f54:	683a      	ldr	r2, [r7, #0]
                    for(PairBot p: BLEPair){
   b4f56:	4293      	cmp	r3, r2
   b4f58:	d005      	beq.n	b4f66 <_Z7BLEScani+0xb6>
                        if(BLECustomData[0] == p.botNum){
   b4f5a:	f812 0b08 	ldrb.w	r0, [r2], #8
                            newBot = false;
   b4f5e:	4288      	cmp	r0, r1
   b4f60:	bf08      	it	eq
   b4f62:	2500      	moveq	r5, #0
	return *this;
   b4f64:	e7f7      	b.n	b4f56 <_Z7BLEScani+0xa6>
                    if(newBot){
   b4f66:	b1ed      	cbz	r5, b4fa4 <_Z7BLEScani+0xf4>
    const BleAdvertisingData& scanResponse() const {
        return scanResponse_;
    }

    int8_t rssi() const {
        return rssi_;
   b4f68:	2224      	movs	r2, #36	; 0x24
   b4f6a:	fb02 b204 	mla	r2, r2, r4, fp
                        NewBot.botNum = BLECustomData[0];
   b4f6e:	f88d 1058 	strb.w	r1, [sp, #88]	; 0x58
                        NewBot.rssi = scanResults[ii].rssi();
   b4f72:	f992 2020 	ldrsb.w	r2, [r2, #32]
   b4f76:	9217      	str	r2, [sp, #92]	; 0x5c
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b4f78:	68ba      	ldr	r2, [r7, #8]
   b4f7a:	4293      	cmp	r3, r2
   b4f7c:	d017      	beq.n	b4fae <_Z7BLEScani+0xfe>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4f7e:	b11b      	cbz	r3, b4f88 <_Z7BLEScani+0xd8>
   b4f80:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   b4f84:	e883 0003 	stmia.w	r3, {r0, r1}
	    ++this->_M_impl._M_finish;
   b4f88:	687b      	ldr	r3, [r7, #4]
   b4f8a:	3308      	adds	r3, #8
   b4f8c:	607b      	str	r3, [r7, #4]
                        Serial.printlnf("Found new bot: %d", BLECustomData[0],BLEPair.size());
   b4f8e:	f007 f9a7 	bl	bc2e0 <_Z16_fetch_usbserialv>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f92:	e9d7 2300 	ldrd	r2, r3, [r7]
   b4f96:	1a9b      	subs	r3, r3, r2
   b4f98:	4943      	ldr	r1, [pc, #268]	; (b50a8 <_Z7BLEScani+0x1f8>)
   b4f9a:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   b4f9e:	10db      	asrs	r3, r3, #3
   b4fa0:	f7ff f97a 	bl	b4298 <_ZN5Print8printlnfEPKcz>
		for (uint8_t ii = 0; ii < count; ii++) {
   b4fa4:	3401      	adds	r4, #1
   b4fa6:	b2e4      	uxtb	r4, r4
   b4fa8:	4544      	cmp	r4, r8
   b4faa:	d392      	bcc.n	b4ed2 <_Z7BLEScani+0x22>
   b4fac:	e070      	b.n	b5090 <_Z7BLEScani+0x1e0>
	  _M_realloc_insert(end(), __x);
   b4fae:	483c      	ldr	r0, [pc, #240]	; (b50a0 <_Z7BLEScani+0x1f0>)
   b4fb0:	aa16      	add	r2, sp, #88	; 0x58
   b4fb2:	4619      	mov	r1, r3
   b4fb4:	f7ff ff28 	bl	b4e08 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   b4fb8:	e7e9      	b.n	b4f8e <_Z7BLEScani+0xde>
                if(BotNumber == -1 || BotNumber == BLECustomData[0]){   //Check if a particular bot number was specified
   b4fba:	1c73      	adds	r3, r6, #1
   b4fbc:	d003      	beq.n	b4fc6 <_Z7BLEScani+0x116>
   b4fbe:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b4fc2:	42b3      	cmp	r3, r6
   b4fc4:	d1ee      	bne.n	b4fa4 <_Z7BLEScani+0xf4>
                    peer = BLE.connect(scanResults[ii].address());
   b4fc6:	f004 fdbd 	bl	b9b44 <_ZN8particle14BleLocalDevice11getInstanceEv>
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4fca:	4d38      	ldr	r5, [pc, #224]	; (b50ac <_Z7BLEScani+0x1fc>)
   b4fcc:	4601      	mov	r1, r0
   b4fce:	2301      	movs	r3, #1
   b4fd0:	eb0b 0209 	add.w	r2, fp, r9
   b4fd4:	a816      	add	r0, sp, #88	; 0x58
   b4fd6:	f006 f9a9 	bl	bb32c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   b4fda:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b4fdc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   b4fde:	602b      	str	r3, [r5, #0]
	if (__tmp != _M_pi)
   b4fe0:	686b      	ldr	r3, [r5, #4]
   b4fe2:	429c      	cmp	r4, r3
   b4fe4:	d008      	beq.n	b4ff8 <_Z7BLEScani+0x148>
	    if (__tmp != 0)
   b4fe6:	b114      	cbz	r4, b4fee <_Z7BLEScani+0x13e>
    { ++_M_use_count; }
   b4fe8:	6863      	ldr	r3, [r4, #4]
   b4fea:	3301      	adds	r3, #1
   b4fec:	6063      	str	r3, [r4, #4]
	    if (_M_pi != 0)
   b4fee:	6868      	ldr	r0, [r5, #4]
   b4ff0:	b108      	cbz	r0, b4ff6 <_Z7BLEScani+0x146>
	      _M_pi->_M_release();
   b4ff2:	f7ff f99d 	bl	b4330 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b4ff6:	606c      	str	r4, [r5, #4]
   b4ff8:	a816      	add	r0, sp, #88	; 0x58
   b4ffa:	f004 ff0e 	bl	b9e1a <_ZN8particle13BlePeerDeviceD1Ev>
				    if (peer.connected()) {
   b4ffe:	482b      	ldr	r0, [pc, #172]	; (b50ac <_Z7BLEScani+0x1fc>)
   b5000:	f004 fd12 	bl	b9a28 <_ZNK8particle13BlePeerDevice9connectedEv>
   b5004:	4604      	mov	r4, r0
   b5006:	2800      	cmp	r0, #0
   b5008:	d042      	beq.n	b5090 <_Z7BLEScani+0x1e0>
                        meshPair = false;
   b500a:	4b29      	ldr	r3, [pc, #164]	; (b50b0 <_Z7BLEScani+0x200>)
      : _M_current(__i) { }
   b500c:	4d29      	ldr	r5, [pc, #164]	; (b50b4 <_Z7BLEScani+0x204>)
   b500e:	2200      	movs	r2, #0
   b5010:	701a      	strb	r2, [r3, #0]
                        startConnect = true;
   b5012:	4b29      	ldr	r3, [pc, #164]	; (b50b8 <_Z7BLEScani+0x208>)
   b5014:	2201      	movs	r2, #1
   b5016:	701a      	strb	r2, [r3, #0]
                        scanResults[ii].advertisingData().customData(bufName, BLE_MAX_ADV_DATA_LEN);
   b5018:	a916      	add	r1, sp, #88	; 0x58
   b501a:	221f      	movs	r2, #31
   b501c:	4638      	mov	r0, r7
   b501e:	f004 fbad 	bl	b977c <_ZNK8particle18BleAdvertisingData10customDataEPhj>
					    peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   b5022:	4a26      	ldr	r2, [pc, #152]	; (b50bc <_Z7BLEScani+0x20c>)
   b5024:	4926      	ldr	r1, [pc, #152]	; (b50c0 <_Z7BLEScani+0x210>)
   b5026:	4821      	ldr	r0, [pc, #132]	; (b50ac <_Z7BLEScani+0x1fc>)
   b5028:	f005 fe14 	bl	bac54 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
					    peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
   b502c:	4a25      	ldr	r2, [pc, #148]	; (b50c4 <_Z7BLEScani+0x214>)
   b502e:	4926      	ldr	r1, [pc, #152]	; (b50c8 <_Z7BLEScani+0x218>)
   b5030:	481e      	ldr	r0, [pc, #120]	; (b50ac <_Z7BLEScani+0x1fc>)
   b5032:	f005 fe0f 	bl	bac54 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        peer.getCharacteristicByUUID(peerOffloadCharacteristic, offldUuid);
   b5036:	4a25      	ldr	r2, [pc, #148]	; (b50cc <_Z7BLEScani+0x21c>)
   b5038:	4925      	ldr	r1, [pc, #148]	; (b50d0 <_Z7BLEScani+0x220>)
   b503a:	481c      	ldr	r0, [pc, #112]	; (b50ac <_Z7BLEScani+0x1fc>)
   b503c:	f005 fe0a 	bl	bac54 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
						Serial.printlnf("Connected to Bot %d",bufName[0]);
   b5040:	f007 f94e 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b5044:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   b5048:	4922      	ldr	r1, [pc, #136]	; (b50d4 <_Z7BLEScani+0x224>)
   b504a:	f7ff f925 	bl	b4298 <_ZN5Print8printlnfEPKcz>
   b504e:	6868      	ldr	r0, [r5, #4]
                            if(bufName[0] == w.botNum){
   b5050:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   b5054:	682b      	ldr	r3, [r5, #0]
                        for(WaterBot w: WaterBots){
   b5056:	4298      	cmp	r0, r3
   b5058:	d005      	beq.n	b5066 <_Z7BLEScani+0x1b6>
                            if(bufName[0] == w.botNum){
   b505a:	f813 1b18 	ldrb.w	r1, [r3], #24
                                newBot = false;
   b505e:	4291      	cmp	r1, r2
   b5060:	bf08      	it	eq
   b5062:	2400      	moveq	r4, #0
	return *this;
   b5064:	e7f7      	b.n	b5056 <_Z7BLEScani+0x1a6>
                        if(newBot){
   b5066:	b19c      	cbz	r4, b5090 <_Z7BLEScani+0x1e0>
                            Serial.println("Found a new water bot ID");
   b5068:	f007 f93a 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b506c:	491a      	ldr	r1, [pc, #104]	; (b50d8 <_Z7BLEScani+0x228>)
   b506e:	f006 fbca 	bl	bb806 <_ZN5Print7printlnEPKc>
                            newWaterbot.BLEAvail = true;
   b5072:	2301      	movs	r3, #1
   b5074:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
                            WaterBots.push_back(newWaterbot);
   b5078:	480e      	ldr	r0, [pc, #56]	; (b50b4 <_Z7BLEScani+0x204>)
                            newWaterbot.botNum = bufName[0];
   b507a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   b507e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
                            WaterBots.push_back(newWaterbot);
   b5082:	a910      	add	r1, sp, #64	; 0x40
   b5084:	f7ff fb4e 	bl	b4724 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      { return __normal_iterator(_M_current - __n); }
   b5088:	686b      	ldr	r3, [r5, #4]
                            BLEBot = &WaterBots.back();
   b508a:	4a14      	ldr	r2, [pc, #80]	; (b50dc <_Z7BLEScani+0x22c>)
   b508c:	3b18      	subs	r3, #24
   b508e:	6013      	str	r3, [r2, #0]
}
   b5090:	b01f      	add	sp, #124	; 0x7c
   b5092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5096:	bf00      	nop
   b5098:	2003dee0 	.word	0x2003dee0
   b509c:	2003dcc8 	.word	0x2003dcc8
   b50a0:	2003dc90 	.word	0x2003dc90
   b50a4:	000bf9ea 	.word	0x000bf9ea
   b50a8:	000bfa1d 	.word	0x000bfa1d
   b50ac:	2003debc 	.word	0x2003debc
   b50b0:	2003ddf5 	.word	0x2003ddf5
   b50b4:	2003dcbc 	.word	0x2003dcbc
   b50b8:	2003e634 	.word	0x2003e634
   b50bc:	2003dcf0 	.word	0x2003dcf0
   b50c0:	2003ded4 	.word	0x2003ded4
   b50c4:	2003dcdc 	.word	0x2003dcdc
   b50c8:	2003decc 	.word	0x2003decc
   b50cc:	2003dd08 	.word	0x2003dd08
   b50d0:	2003dec4 	.word	0x2003dec4
   b50d4:	000bfa2f 	.word	0x000bfa2f
   b50d8:	000bf904 	.word	0x000bf904
   b50dc:	2003dc8c 	.word	0x2003dc8c

000b50e0 <_Z13DataOffloaderv>:
void DataOffloader(){
   b50e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!logDir.open("/")) {
   b50e2:	4940      	ldr	r1, [pc, #256]	; (b51e4 <_Z13DataOffloaderv+0x104>)
   b50e4:	4840      	ldr	r0, [pc, #256]	; (b51e8 <_Z13DataOffloaderv+0x108>)
void DataOffloader(){
   b50e6:	b087      	sub	sp, #28
    if (!logDir.open("/")) {
   b50e8:	2200      	movs	r2, #0
   b50ea:	f7ff f965 	bl	b43b8 <_ZN7FatFile4openEPKci>
   b50ee:	2401      	movs	r4, #1
   b50f0:	b948      	cbnz	r0, b5106 <_Z13DataOffloaderv+0x26>
        offloadingDone = true;
   b50f2:	4b3e      	ldr	r3, [pc, #248]	; (b51ec <_Z13DataOffloaderv+0x10c>)
   b50f4:	701c      	strb	r4, [r3, #0]
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   b50f6:	f007 f8f3 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b50fa:	493d      	ldr	r1, [pc, #244]	; (b51f0 <_Z13DataOffloaderv+0x110>)
}
   b50fc:	b007      	add	sp, #28
   b50fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   b5102:	f006 bb80 	b.w	bb806 <_ZN5Print7printlnEPKc>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5106:	4e3b      	ldr	r6, [pc, #236]	; (b51f4 <_Z13DataOffloaderv+0x114>)
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   b5108:	4d3b      	ldr	r5, [pc, #236]	; (b51f8 <_Z13DataOffloaderv+0x118>)
   b510a:	e9d6 2300 	ldrd	r2, r3, [r6]
   b510e:	1a9b      	subs	r3, r3, r2
   b5110:	4a3a      	ldr	r2, [pc, #232]	; (b51fc <_Z13DataOffloaderv+0x11c>)
   b5112:	10db      	asrs	r3, r3, #3
   b5114:	4353      	muls	r3, r2
    while(OffloadingBot <= WaterBots.size()){
   b5116:	429c      	cmp	r4, r3
   b5118:	d859      	bhi.n	b51ce <_Z13DataOffloaderv+0xee>
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   b511a:	466f      	mov	r7, sp
   b511c:	4a38      	ldr	r2, [pc, #224]	; (b5200 <_Z13DataOffloaderv+0x120>)
   b511e:	4623      	mov	r3, r4
   b5120:	210a      	movs	r1, #10
   b5122:	4638      	mov	r0, r7
   b5124:	f003 fdb2 	bl	b8c8c <snprintf>
        memcpy(OffloadBuf,OffloadCommand,10);
   b5128:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   b512c:	ab03      	add	r3, sp, #12
   b512e:	c303      	stmia	r3!, {r0, r1}
        peerRxCharacteristic.setValue(OffloadBuf,10);
   b5130:	a903      	add	r1, sp, #12
        memcpy(OffloadBuf,OffloadCommand,10);
   b5132:	801a      	strh	r2, [r3, #0]
        peerRxCharacteristic.setValue(OffloadBuf,10);
   b5134:	4833      	ldr	r0, [pc, #204]	; (b5204 <_Z13DataOffloaderv+0x124>)
   b5136:	2300      	movs	r3, #0
   b5138:	220a      	movs	r2, #10
   b513a:	f004 fb9d 	bl	b9878 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   b513e:	f007 f8cf 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b5142:	682b      	ldr	r3, [r5, #0]
   b5144:	4930      	ldr	r1, [pc, #192]	; (b5208 <_Z13DataOffloaderv+0x128>)
   b5146:	781a      	ldrb	r2, [r3, #0]
   b5148:	f7ff f8a6 	bl	b4298 <_ZN5Print8printlnfEPKcz>
        delay(1000);
   b514c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5150:	f006 fcb2 	bl	bbab8 <delay>
        if(BLEBot->botNum != OffloadingBot){
   b5154:	682b      	ldr	r3, [r5, #0]
   b5156:	781b      	ldrb	r3, [r3, #0]
   b5158:	42a3      	cmp	r3, r4
   b515a:	d01e      	beq.n	b519a <_Z13DataOffloaderv+0xba>
            Serial.printlnf("Currently connected to Bot %f, need to connect to Bot %d",BLEBot->botNum,OffloadingBot);
   b515c:	f007 f8c0 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b5160:	682a      	ldr	r2, [r5, #0]
   b5162:	492a      	ldr	r1, [pc, #168]	; (b520c <_Z13DataOffloaderv+0x12c>)
   b5164:	7812      	ldrb	r2, [r2, #0]
   b5166:	4623      	mov	r3, r4
   b5168:	f7ff f896 	bl	b4298 <_ZN5Print8printlnfEPKcz>
            BLE.disconnect();
   b516c:	f004 fcea 	bl	b9b44 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5170:	f005 fb02 	bl	ba778 <_ZNK8particle14BleLocalDevice10disconnectEv>
            while(!BLE.connected()){
   b5174:	f004 fce6 	bl	b9b44 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5178:	f004 fd8d 	bl	b9c96 <_ZNK8particle14BleLocalDevice9connectedEv>
   b517c:	b930      	cbnz	r0, b518c <_Z13DataOffloaderv+0xac>
                BLEScan(OffloadingBot);
   b517e:	4620      	mov	r0, r4
   b5180:	f7ff fe96 	bl	b4eb0 <_Z7BLEScani>
                delay(50);
   b5184:	2032      	movs	r0, #50	; 0x32
   b5186:	f006 fc97 	bl	bbab8 <delay>
            while(!BLE.connected()){
   b518a:	e7f3      	b.n	b5174 <_Z13DataOffloaderv+0x94>
            Serial.printlnf("Successfully connected to Bot %d", BLEBot->botNum);
   b518c:	f007 f8a8 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b5190:	682b      	ldr	r3, [r5, #0]
   b5192:	491f      	ldr	r1, [pc, #124]	; (b5210 <_Z13DataOffloaderv+0x130>)
   b5194:	781a      	ldrb	r2, [r3, #0]
   b5196:	f7ff f87f 	bl	b4298 <_ZN5Print8printlnfEPKcz>
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   b519a:	f007 f8a1 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b519e:	682b      	ldr	r3, [r5, #0]
   b51a0:	491c      	ldr	r1, [pc, #112]	; (b5214 <_Z13DataOffloaderv+0x134>)
   b51a2:	781a      	ldrb	r2, [r3, #0]
        offloadingDone = false;
   b51a4:	4f11      	ldr	r7, [pc, #68]	; (b51ec <_Z13DataOffloaderv+0x10c>)
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   b51a6:	f7ff f877 	bl	b4298 <_ZN5Print8printlnfEPKcz>
        offloadingDone = false;
   b51aa:	2300      	movs	r3, #0
   b51ac:	703b      	strb	r3, [r7, #0]
        while(!offloadingDone) delay(100);
   b51ae:	2064      	movs	r0, #100	; 0x64
   b51b0:	f006 fc82 	bl	bbab8 <delay>
   b51b4:	783b      	ldrb	r3, [r7, #0]
   b51b6:	2b00      	cmp	r3, #0
   b51b8:	d0f9      	beq.n	b51ae <_Z13DataOffloaderv+0xce>
        Serial.printlnf("Finished transferring file from Bot %d",BLEBot->botNum);
   b51ba:	f007 f891 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b51be:	682b      	ldr	r3, [r5, #0]
   b51c0:	4915      	ldr	r1, [pc, #84]	; (b5218 <_Z13DataOffloaderv+0x138>)
   b51c2:	781a      	ldrb	r2, [r3, #0]
        OffloadingBot++;
   b51c4:	3401      	adds	r4, #1
        Serial.printlnf("Finished transferring file from Bot %d",BLEBot->botNum);
   b51c6:	f7ff f867 	bl	b4298 <_ZN5Print8printlnfEPKcz>
        OffloadingBot++;
   b51ca:	b2e4      	uxtb	r4, r4
    while(OffloadingBot <= WaterBots.size()){
   b51cc:	e79d      	b.n	b510a <_Z13DataOffloaderv+0x2a>
   b51ce:	4813      	ldr	r0, [pc, #76]	; (b521c <_Z13DataOffloaderv+0x13c>)
    if(logDir.isOpen()) logDir.close();
   b51d0:	7c03      	ldrb	r3, [r0, #16]
   b51d2:	b12b      	cbz	r3, b51e0 <_Z13DataOffloaderv+0x100>
   b51d4:	3010      	adds	r0, #16
}
   b51d6:	b007      	add	sp, #28
   b51d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    if(logDir.isOpen()) logDir.close();
   b51dc:	f001 bf72 	b.w	b70c4 <_ZN7FatFile5closeEv>
}
   b51e0:	b007      	add	sp, #28
   b51e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b51e4:	000bfa43 	.word	0x000bfa43
   b51e8:	2003dd9c 	.word	0x2003dd9c
   b51ec:	2003de4a 	.word	0x2003de4a
   b51f0:	000bfa45 	.word	0x000bfa45
   b51f4:	2003dcbc 	.word	0x2003dcbc
   b51f8:	2003dc8c 	.word	0x2003dc8c
   b51fc:	aaaaaaab 	.word	0xaaaaaaab
   b5200:	000bfa86 	.word	0x000bfa86
   b5204:	2003decc 	.word	0x2003decc
   b5208:	000bfa8f 	.word	0x000bfa8f
   b520c:	000bfabc 	.word	0x000bfabc
   b5210:	000bfaf5 	.word	0x000bfaf5
   b5214:	000bfb16 	.word	0x000bfb16
   b5218:	000bfb39 	.word	0x000bfb39
   b521c:	2003dd8c 	.word	0x2003dd8c

000b5220 <loop>:
void loop() {
   b5220:	b570      	push	{r4, r5, r6, lr}
    if(postStatus){
   b5222:	4d44      	ldr	r5, [pc, #272]	; (b5334 <loop+0x114>)
   b5224:	782b      	ldrb	r3, [r5, #0]
void loop() {
   b5226:	b08a      	sub	sp, #40	; 0x28
    if(postStatus){
   b5228:	b1a3      	cbz	r3, b5254 <loop+0x34>
        if(ControlledBot != NULL) sprintf(statusStr,"CCABspcB%d",ControlledBot->botNum);
   b522a:	4b43      	ldr	r3, [pc, #268]	; (b5338 <loop+0x118>)
   b522c:	681b      	ldr	r3, [r3, #0]
   b522e:	2b00      	cmp	r3, #0
   b5230:	d06b      	beq.n	b530a <loop+0xea>
   b5232:	781a      	ldrb	r2, [r3, #0]
   b5234:	4941      	ldr	r1, [pc, #260]	; (b533c <loop+0x11c>)
   b5236:	a802      	add	r0, sp, #8
   b5238:	f003 fd18 	bl	b8c6c <sprintf>
        sendData(statusStr,0,true,true,statusTimeout);                                  
   b523c:	4c40      	ldr	r4, [pc, #256]	; (b5340 <loop+0x120>)
   b523e:	7823      	ldrb	r3, [r4, #0]
   b5240:	9300      	str	r3, [sp, #0]
   b5242:	2301      	movs	r3, #1
   b5244:	461a      	mov	r2, r3
   b5246:	2100      	movs	r1, #0
   b5248:	a802      	add	r0, sp, #8
   b524a:	f7ff f97f 	bl	b454c <_Z8sendDataPKchbbb>
        postStatus = false;
   b524e:	2300      	movs	r3, #0
   b5250:	702b      	strb	r3, [r5, #0]
        statusTimeout = false;
   b5252:	7023      	strb	r3, [r4, #0]
    if (BLE.connected()) {
   b5254:	f004 fc76 	bl	b9b44 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5258:	f004 fd1d 	bl	b9c96 <_ZNK8particle14BleLocalDevice9connectedEv>
   b525c:	2800      	cmp	r0, #0
   b525e:	d059      	beq.n	b5314 <loop+0xf4>
        sprintf(sendStr,"CCB1mtr%03d%03d",(int)(analogRead(JOYV_ADC)/22.75)%1000,(int)(analogRead(JOYV_ADC)/22.75)%1000);
   b5260:	2010      	movs	r0, #16
   b5262:	f007 faa0 	bl	bc7a6 <analogRead>
   b5266:	4606      	mov	r6, r0
   b5268:	2010      	movs	r0, #16
   b526a:	f007 fa9c 	bl	bc7a6 <analogRead>
   b526e:	f007 fd99 	bl	bcda4 <__aeabi_i2d>
   b5272:	4b34      	ldr	r3, [pc, #208]	; (b5344 <loop+0x124>)
   b5274:	2200      	movs	r2, #0
   b5276:	f007 ff29 	bl	bd0cc <__aeabi_ddiv>
   b527a:	f008 f897 	bl	bd3ac <__aeabi_d2iz>
   b527e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   b5282:	fb90 f5f4 	sdiv	r5, r0, r4
   b5286:	fb05 0514 	mls	r5, r5, r4, r0
   b528a:	4630      	mov	r0, r6
   b528c:	f007 fd8a 	bl	bcda4 <__aeabi_i2d>
   b5290:	4b2c      	ldr	r3, [pc, #176]	; (b5344 <loop+0x124>)
   b5292:	2200      	movs	r2, #0
   b5294:	f007 ff1a 	bl	bd0cc <__aeabi_ddiv>
   b5298:	f008 f888 	bl	bd3ac <__aeabi_d2iz>
   b529c:	462b      	mov	r3, r5
   b529e:	492a      	ldr	r1, [pc, #168]	; (b5348 <loop+0x128>)
   b52a0:	fb90 f2f4 	sdiv	r2, r0, r4
   b52a4:	fb02 0214 	mls	r2, r2, r4, r0
   b52a8:	a802      	add	r0, sp, #8
   b52aa:	f003 fcdf 	bl	b8c6c <sprintf>
        Serial.printlnf("Motor Speed: %03d",(int)(analogRead(JOYV_ADC)/22.75));
   b52ae:	f007 f817 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b52b2:	4604      	mov	r4, r0
   b52b4:	2010      	movs	r0, #16
   b52b6:	f007 fa76 	bl	bc7a6 <analogRead>
   b52ba:	f007 fd73 	bl	bcda4 <__aeabi_i2d>
   b52be:	4b21      	ldr	r3, [pc, #132]	; (b5344 <loop+0x124>)
   b52c0:	2200      	movs	r2, #0
   b52c2:	f007 ff03 	bl	bd0cc <__aeabi_ddiv>
   b52c6:	f008 f871 	bl	bd3ac <__aeabi_d2iz>
   b52ca:	4920      	ldr	r1, [pc, #128]	; (b534c <loop+0x12c>)
   b52cc:	4602      	mov	r2, r0
   b52ce:	4620      	mov	r0, r4
   b52d0:	f7fe ffe2 	bl	b4298 <_ZN5Print8printlnfEPKcz>
        Serial.println(sendStr);
   b52d4:	f007 f804 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b52d8:	a902      	add	r1, sp, #8
   b52da:	f006 fa94 	bl	bb806 <_ZN5Print7printlnEPKc>
        sendData(sendStr,0,true,false,false);
   b52de:	2300      	movs	r3, #0
   b52e0:	a802      	add	r0, sp, #8
   b52e2:	9300      	str	r3, [sp, #0]
   b52e4:	2201      	movs	r2, #1
   b52e6:	4619      	mov	r1, r3
   b52e8:	f7ff f930 	bl	b454c <_Z8sendDataPKchbbb>
        delay(250);
   b52ec:	20fa      	movs	r0, #250	; 0xfa
   b52ee:	f006 fbe3 	bl	bbab8 <delay>
    if(offloadingMode) DataOffloader();
   b52f2:	4b17      	ldr	r3, [pc, #92]	; (b5350 <loop+0x130>)
   b52f4:	781b      	ldrb	r3, [r3, #0]
   b52f6:	b10b      	cbz	r3, b52fc <loop+0xdc>
   b52f8:	f7ff fef2 	bl	b50e0 <_Z13DataOffloaderv>
    XBeeHandler();
   b52fc:	f7ff fd06 	bl	b4d0c <_Z11XBeeHandlerv>
}
   b5300:	b00a      	add	sp, #40	; 0x28
   b5302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    XBeeLTEPairSet();
   b5306:	f7ff b98b 	b.w	b4620 <_Z14XBeeLTEPairSetv>
        else sprintf(statusStr,"CCABspcNB");
   b530a:	4912      	ldr	r1, [pc, #72]	; (b5354 <loop+0x134>)
   b530c:	a802      	add	r0, sp, #8
   b530e:	f008 f998 	bl	bd642 <strcpy>
   b5312:	e793      	b.n	b523c <loop+0x1c>
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   b5314:	4c10      	ldr	r4, [pc, #64]	; (b5358 <loop+0x138>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5316:	f003 f959 	bl	b85cc <HAL_Timer_Get_Milli_Seconds>
   b531a:	6823      	ldr	r3, [r4, #0]
   b531c:	1ac0      	subs	r0, r0, r3
   b531e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b5322:	d3e6      	bcc.n	b52f2 <loop+0xd2>
   b5324:	f003 f952 	bl	b85cc <HAL_Timer_Get_Milli_Seconds>
    		lastScan = millis();
   b5328:	6020      	str	r0, [r4, #0]
    		BLEScan(-1);
   b532a:	f04f 30ff 	mov.w	r0, #4294967295
   b532e:	f7ff fdbf 	bl	b4eb0 <_Z7BLEScani>
   b5332:	e7de      	b.n	b52f2 <loop+0xd2>
   b5334:	2003dedc 	.word	0x2003dedc
   b5338:	2003dc9c 	.word	0x2003dc9c
   b533c:	000bfb60 	.word	0x000bfb60
   b5340:	2003e635 	.word	0x2003e635
   b5344:	4036c000 	.word	0x4036c000
   b5348:	000bfb75 	.word	0x000bfb75
   b534c:	000bfb85 	.word	0x000bfb85
   b5350:	2003de4b 	.word	0x2003de4b
   b5354:	000bfb6b 	.word	0x000bfb6b
   b5358:	2003dd88 	.word	0x2003dd88

000b535c <_GLOBAL__sub_I_SystemMode>:
   b535c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        val_(val) {
   b535e:	4b53      	ldr	r3, [pc, #332]	; (b54ac <_GLOBAL__sub_I_SystemMode+0x150>)
   b5360:	4c53      	ldr	r4, [pc, #332]	; (b54b0 <_GLOBAL__sub_I_SystemMode+0x154>)
   b5362:	2201      	movs	r2, #1
   b5364:	701a      	strb	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5366:	4b53      	ldr	r3, [pc, #332]	; (b54b4 <_GLOBAL__sub_I_SystemMode+0x158>)
   b5368:	2200      	movs	r2, #0
   b536a:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b536e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b5372:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5374:	2003      	movs	r0, #3
   b5376:	f003 fb95 	bl	b8aa4 <set_system_mode>
const BleUuid serviceUuid("b4206910-dc4b-5743-c8b1-92d0e75182b0");
   b537a:	494f      	ldr	r1, [pc, #316]	; (b54b8 <_GLOBAL__sub_I_SystemMode+0x15c>)
   b537c:	484f      	ldr	r0, [pc, #316]	; (b54bc <_GLOBAL__sub_I_SystemMode+0x160>)
   b537e:	f004 f91f 	bl	b95c0 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("b4206912-dc4b-5743-c8b1-92d0e75182b0");
   b5382:	494f      	ldr	r1, [pc, #316]	; (b54c0 <_GLOBAL__sub_I_SystemMode+0x164>)
   b5384:	484f      	ldr	r0, [pc, #316]	; (b54c4 <_GLOBAL__sub_I_SystemMode+0x168>)
   b5386:	f004 f91b 	bl	b95c0 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("b4206913-dc4b-5743-c8b1-92d0e75182b0");
   b538a:	494f      	ldr	r1, [pc, #316]	; (b54c8 <_GLOBAL__sub_I_SystemMode+0x16c>)
   b538c:	484f      	ldr	r0, [pc, #316]	; (b54cc <_GLOBAL__sub_I_SystemMode+0x170>)
   b538e:	f004 f917 	bl	b95c0 <_ZN8particle7BleUuidC1EPKc>
const BleUuid offldUuid("b4206914-dc4b-5743-c8b1-92d0e75182b0");
   b5392:	494f      	ldr	r1, [pc, #316]	; (b54d0 <_GLOBAL__sub_I_SystemMode+0x174>)
   b5394:	484f      	ldr	r0, [pc, #316]	; (b54d4 <_GLOBAL__sub_I_SystemMode+0x178>)
   b5396:	f004 f913 	bl	b95c0 <_ZN8particle7BleUuidC1EPKc>
   b539a:	2514      	movs	r5, #20
            : rssi_(BLE_RSSI_INVALID) {
   b539c:	267f      	movs	r6, #127	; 0x7f
   b539e:	4620      	mov	r0, r4
   b53a0:	f004 f829 	bl	b93f6 <_ZN8particle10BleAddressC1Ev>
   b53a4:	f104 0008 	add.w	r0, r4, #8
   b53a8:	f005 f851 	bl	ba44e <_ZN8particle18BleAdvertisingDataC1Ev>
   b53ac:	f104 0014 	add.w	r0, r4, #20
   b53b0:	f005 f84d 	bl	ba44e <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_COUNT];
   b53b4:	3d01      	subs	r5, #1
   b53b6:	f884 6020 	strb.w	r6, [r4, #32]
   b53ba:	f104 0424 	add.w	r4, r4, #36	; 0x24
   b53be:	d1ee      	bne.n	b539e <_GLOBAL__sub_I_SystemMode+0x42>
BleCharacteristic peerTxCharacteristic;
   b53c0:	4845      	ldr	r0, [pc, #276]	; (b54d8 <_GLOBAL__sub_I_SystemMode+0x17c>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b53c2:	4c46      	ldr	r4, [pc, #280]	; (b54dc <_GLOBAL__sub_I_SystemMode+0x180>)
   b53c4:	f004 fa32 	bl	b982c <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerRxCharacteristic;
   b53c8:	4845      	ldr	r0, [pc, #276]	; (b54e0 <_GLOBAL__sub_I_SystemMode+0x184>)
   b53ca:	f004 fa2f 	bl	b982c <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerOffloadCharacteristic;
   b53ce:	4845      	ldr	r0, [pc, #276]	; (b54e4 <_GLOBAL__sub_I_SystemMode+0x188>)
   b53d0:	f004 fa2c 	bl	b982c <_ZN8particle17BleCharacteristicC1Ev>
BlePeerDevice peer;
   b53d4:	4844      	ldr	r0, [pc, #272]	; (b54e8 <_GLOBAL__sub_I_SystemMode+0x18c>)
   b53d6:	f004 fb05 	bl	b99e4 <_ZN8particle13BlePeerDeviceC1Ev>
OledWingAdafruit oled;
   b53da:	4844      	ldr	r0, [pc, #272]	; (b54ec <_GLOBAL__sub_I_SystemMode+0x190>)
   b53dc:	2107      	movs	r1, #7
   b53de:	f001 f82f 	bl	b6440 <_ZN16OledWingAdafruitC1Ei>
   b53e2:	7823      	ldrb	r3, [r4, #0]
   b53e4:	f3bf 8f5b 	dmb	ish
   b53e8:	07db      	lsls	r3, r3, #31
   b53ea:	d40a      	bmi.n	b5402 <_GLOBAL__sub_I_SystemMode+0xa6>
   b53ec:	4620      	mov	r0, r4
   b53ee:	f7fe fe65 	bl	b40bc <__cxa_guard_acquire>
   b53f2:	b130      	cbz	r0, b5402 <_GLOBAL__sub_I_SystemMode+0xa6>
   b53f4:	483e      	ldr	r0, [pc, #248]	; (b54f0 <_GLOBAL__sub_I_SystemMode+0x194>)
   b53f6:	2101      	movs	r1, #1
   b53f8:	f003 fccc 	bl	b8d94 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b53fc:	4620      	mov	r0, r4
   b53fe:	f7fe fe62 	bl	b40c6 <__cxa_guard_release>
    m_spi.setPort(nullptr);
  }
  /** Constructor with SPI port selection.
   * \param[in] spiPort SPI port number.
   */
  explicit SdFat(SPIClass* spiPort) {
   b5402:	4b3c      	ldr	r3, [pc, #240]	; (b54f4 <_GLOBAL__sub_I_SystemMode+0x198>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5404:	4e3c      	ldr	r6, [pc, #240]	; (b54f8 <_GLOBAL__sub_I_SystemMode+0x19c>)
	    _M_manager = &_My_handler::_M_manager;
   b5406:	4d3d      	ldr	r5, [pc, #244]	; (b54fc <_GLOBAL__sub_I_SystemMode+0x1a0>)
Timer at1(5000,actionTimer5);
   b5408:	483d      	ldr	r0, [pc, #244]	; (b5500 <_GLOBAL__sub_I_SystemMode+0x1a4>)
	    _M_invoker = &_My_handler::_M_invoke;
   b540a:	9603      	str	r6, [sp, #12]
   b540c:	2264      	movs	r2, #100	; 0x64
   b540e:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
  {
   b5412:	4a3c      	ldr	r2, [pc, #240]	; (b5504 <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b5414:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   b5418:	2201      	movs	r2, #1
   b541a:	2400      	movs	r4, #0
   b541c:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b5420:	4a33      	ldr	r2, [pc, #204]	; (b54f0 <_GLOBAL__sub_I_SystemMode+0x194>)
   b5422:	605c      	str	r4, [r3, #4]
   b5424:	f8c3 443c 	str.w	r4, [r3, #1084]	; 0x43c
   b5428:	f8c3 4468 	str.w	r4, [r3, #1128]	; 0x468
   b542c:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   b5430:	f8a3 447c 	strh.w	r4, [r3, #1148]	; 0x47c
   b5434:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
    Print() : write_error(0) {}
   b5438:	4b33      	ldr	r3, [pc, #204]	; (b5508 <_GLOBAL__sub_I_SystemMode+0x1ac>)
  File() {}
   b543a:	4a34      	ldr	r2, [pc, #208]	; (b550c <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b543c:	605c      	str	r4, [r3, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b543e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5442:	6099      	str	r1, [r3, #8]
   b5444:	601a      	str	r2, [r3, #0]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5446:	611c      	str	r4, [r3, #16]
   b5448:	4b31      	ldr	r3, [pc, #196]	; (b5510 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b544a:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b544e:	601a      	str	r2, [r3, #0]
   b5450:	611c      	str	r4, [r3, #16]
   b5452:	4b30      	ldr	r3, [pc, #192]	; (b5514 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   b5454:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b5458:	601a      	str	r2, [r3, #0]
   b545a:	611c      	str	r4, [r3, #16]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b545c:	4b2e      	ldr	r3, [pc, #184]	; (b5518 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b545e:	e9c3 4400 	strd	r4, r4, [r3]
   b5462:	609c      	str	r4, [r3, #8]
   b5464:	4b2d      	ldr	r3, [pc, #180]	; (b551c <_GLOBAL__sub_I_SystemMode+0x1c0>)
   b5466:	e9c3 4400 	strd	r4, r4, [r3]
   b546a:	609c      	str	r4, [r3, #8]
   b546c:	4b2c      	ldr	r3, [pc, #176]	; (b5520 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b546e:	e9c3 4400 	strd	r4, r4, [r3]
   b5472:	609c      	str	r4, [r3, #8]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5474:	4b2b      	ldr	r3, [pc, #172]	; (b5524 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   b5476:	9300      	str	r3, [sp, #0]
   b5478:	466a      	mov	r2, sp
   b547a:	4623      	mov	r3, r4
   b547c:	f241 3188 	movw	r1, #5000	; 0x1388
	    _M_manager = &_My_handler::_M_manager;
   b5480:	9502      	str	r5, [sp, #8]
   b5482:	f7fe ff69 	bl	b4358 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5486:	4668      	mov	r0, sp
   b5488:	f7fe ff14 	bl	b42b4 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b548c:	4b26      	ldr	r3, [pc, #152]	; (b5528 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b548e:	9300      	str	r3, [sp, #0]
Timer at2(60000,actionTimer60);
   b5490:	466a      	mov	r2, sp
   b5492:	4623      	mov	r3, r4
   b5494:	f64e 2160 	movw	r1, #60000	; 0xea60
   b5498:	4824      	ldr	r0, [pc, #144]	; (b552c <_GLOBAL__sub_I_SystemMode+0x1d0>)
	    _M_manager = &_My_handler::_M_manager;
   b549a:	e9cd 5602 	strd	r5, r6, [sp, #8]
   b549e:	f7fe ff5b 	bl	b4358 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b54a2:	4668      	mov	r0, sp
   b54a4:	f7fe ff06 	bl	b42b4 <_ZNSt14_Function_baseD1Ev>
   b54a8:	b004      	add	sp, #16
   b54aa:	bd70      	pop	{r4, r5, r6, pc}
   b54ac:	2003dd04 	.word	0x2003dd04
   b54b0:	2003dee0 	.word	0x2003dee0
   b54b4:	2003dcb0 	.word	0x2003dcb0
   b54b8:	000bfb97 	.word	0x000bfb97
   b54bc:	2003dcc8 	.word	0x2003dcc8
   b54c0:	000bfbbc 	.word	0x000bfbbc
   b54c4:	2003dcdc 	.word	0x2003dcdc
   b54c8:	000bfbe1 	.word	0x000bfbe1
   b54cc:	2003dcf0 	.word	0x2003dcf0
   b54d0:	000bfc06 	.word	0x000bfc06
   b54d4:	2003dd08 	.word	0x2003dd08
   b54d8:	2003ded4 	.word	0x2003ded4
   b54dc:	2003dc80 	.word	0x2003dc80
   b54e0:	2003decc 	.word	0x2003decc
   b54e4:	2003dec4 	.word	0x2003dec4
   b54e8:	2003debc 	.word	0x2003debc
   b54ec:	2003de4c 	.word	0x2003de4c
   b54f0:	2003dc84 	.word	0x2003dc84
   b54f4:	2003e1b0 	.word	0x2003e1b0
   b54f8:	000b41f5 	.word	0x000b41f5
   b54fc:	000b41e1 	.word	0x000b41e1
   b5500:	2003dd1c 	.word	0x2003dd1c
   b5504:	000bfce0 	.word	0x000bfce0
   b5508:	2003ddf8 	.word	0x2003ddf8
   b550c:	000bfd08 	.word	0x000bfd08
   b5510:	2003ddc0 	.word	0x2003ddc0
   b5514:	2003dd8c 	.word	0x2003dd8c
   b5518:	2003dcbc 	.word	0x2003dcbc
   b551c:	2003dca4 	.word	0x2003dca4
   b5520:	2003dc90 	.word	0x2003dc90
   b5524:	000b40e9 	.word	0x000b40e9
   b5528:	000b41a5 	.word	0x000b41a5
   b552c:	2003dd38 	.word	0x2003dd38

000b5530 <_Z11startupPairv>:
void startupPair(){
   b5530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    oled.clearDisplay();
   b5534:	4c68      	ldr	r4, [pc, #416]	; (b56d8 <_Z11startupPairv+0x1a8>)
    startConnect = false;
   b5536:	f8df a1cc 	ldr.w	sl, [pc, #460]	; b5704 <_Z11startupPairv+0x1d4>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b553a:	4f68      	ldr	r7, [pc, #416]	; (b56dc <_Z11startupPairv+0x1ac>)
void startupPair(){
   b553c:	b087      	sub	sp, #28
    startConnect = false;
   b553e:	2500      	movs	r5, #0
    oled.clearDisplay();
   b5540:	4620      	mov	r0, r4
    startConnect = false;
   b5542:	f88a 5000 	strb.w	r5, [sl]
    oled.clearDisplay();
   b5546:	f002 fce1 	bl	b7f0c <_ZN16Adafruit_SSD130612clearDisplayEv>
    oled.print("Scanning ");
   b554a:	4965      	ldr	r1, [pc, #404]	; (b56e0 <_Z11startupPairv+0x1b0>)
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b554c:	6125      	str	r5, [r4, #16]
   b554e:	4620      	mov	r0, r4
   b5550:	f006 f946 	bl	bb7e0 <_ZN5Print5printEPKc>
    oled.fillCircle(115,7,3,WHITE);
   b5554:	2301      	movs	r3, #1
   b5556:	9300      	str	r3, [sp, #0]
   b5558:	2207      	movs	r2, #7
   b555a:	2303      	movs	r3, #3
   b555c:	2173      	movs	r1, #115	; 0x73
   b555e:	4620      	mov	r0, r4
   b5560:	f000 fcdf 	bl	b5f22 <_ZN12Adafruit_GFX10fillCircleEssst>
    oled.display();
   b5564:	4620      	mov	r0, r4
   b5566:	f002 ff3f 	bl	b83e8 <_ZN16Adafruit_SSD13067displayEv>
    while(!startConnect){
   b556a:	f89a 6000 	ldrb.w	r6, [sl]
   b556e:	2e00      	cmp	r6, #0
   b5570:	f040 80af 	bne.w	b56d2 <_Z11startupPairv+0x1a2>
   b5574:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   b5578:	6123      	str	r3, [r4, #16]
        oled.fillRect(72,16,35,15,0);
   b557a:	230f      	movs	r3, #15
   b557c:	9300      	str	r3, [sp, #0]
   b557e:	2210      	movs	r2, #16
   b5580:	2323      	movs	r3, #35	; 0x23
   b5582:	2148      	movs	r1, #72	; 0x48
   b5584:	4620      	mov	r0, r4
   b5586:	9601      	str	r6, [sp, #4]
   b5588:	f000 fa91 	bl	b5aae <_ZN12Adafruit_GFX8fillRectEsssst>
   b558c:	e9d7 3200 	ldrd	r3, r2, [r7]
   b5590:	1ad2      	subs	r2, r2, r3
        oled.printlnf("Bots: %d",BLEPair.size());
   b5592:	4954      	ldr	r1, [pc, #336]	; (b56e4 <_Z11startupPairv+0x1b4>)
   b5594:	10d2      	asrs	r2, r2, #3
   b5596:	4620      	mov	r0, r4
   b5598:	f7fe fe7e 	bl	b4298 <_ZN5Print8printlnfEPKcz>
        Serial.printlnf("Array size: %d",BLEPair.size());
   b559c:	f006 fea0 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b55a0:	e9d7 3200 	ldrd	r3, r2, [r7]
   b55a4:	1ad2      	subs	r2, r2, r3
   b55a6:	4950      	ldr	r1, [pc, #320]	; (b56e8 <_Z11startupPairv+0x1b8>)
   b55a8:	10d2      	asrs	r2, r2, #3
   b55aa:	f7fe fe75 	bl	b4298 <_ZN5Print8printlnfEPKcz>
        oled.drawCircle(115,7,loadAnim,WHITE);
   b55ae:	2301      	movs	r3, #1
   b55b0:	9300      	str	r3, [sp, #0]
   b55b2:	2207      	movs	r2, #7
   b55b4:	462b      	mov	r3, r5
   b55b6:	2173      	movs	r1, #115	; 0x73
   b55b8:	4620      	mov	r0, r4
   b55ba:	f000 fb51 	bl	b5c60 <_ZN12Adafruit_GFX10drawCircleEssst>
        if(loadAnim-1) oled.fillCircle(115,7,loadAnim-1,0);
   b55be:	2d01      	cmp	r5, #1
   b55c0:	d006      	beq.n	b55d0 <_Z11startupPairv+0xa0>
   b55c2:	9600      	str	r6, [sp, #0]
   b55c4:	1e6b      	subs	r3, r5, #1
   b55c6:	2207      	movs	r2, #7
   b55c8:	2173      	movs	r1, #115	; 0x73
   b55ca:	4620      	mov	r0, r4
   b55cc:	f000 fca9 	bl	b5f22 <_ZN12Adafruit_GFX10fillCircleEssst>
        loadAnim++;
   b55d0:	3501      	adds	r5, #1
        oled.display();
   b55d2:	4620      	mov	r0, r4
        loadAnim++;
   b55d4:	b2ed      	uxtb	r5, r5
        oled.display();
   b55d6:	f002 ff07 	bl	b83e8 <_ZN16Adafruit_SSD13067displayEv>
        if(loadAnim > 7){
   b55da:	2d07      	cmp	r5, #7
   b55dc:	d907      	bls.n	b55ee <_Z11startupPairv+0xbe>
            oled.drawCircle(115,7,7,0);
   b55de:	2500      	movs	r5, #0
   b55e0:	2307      	movs	r3, #7
   b55e2:	9500      	str	r5, [sp, #0]
   b55e4:	461a      	mov	r2, r3
   b55e6:	2173      	movs	r1, #115	; 0x73
   b55e8:	4620      	mov	r0, r4
   b55ea:	f000 fb39 	bl	b5c60 <_ZN12Adafruit_GFX10drawCircleEssst>
        BLEScan(-2);
   b55ee:	f06f 0001 	mvn.w	r0, #1
   b55f2:	f7ff fc5d 	bl	b4eb0 <_Z7BLEScani>
        XBeeHandler();
   b55f6:	f7ff fb89 	bl	b4d0c <_Z11XBeeHandlerv>
        XBeeLTEPairSet();
   b55fa:	f7ff f811 	bl	b4620 <_Z14XBeeLTEPairSetv>
        if(digitalRead(E_DPAD) == LOW){
   b55fe:	201c      	movs	r0, #28
   b5600:	f007 f8be 	bl	bc780 <digitalRead>
   b5604:	2800      	cmp	r0, #0
   b5606:	d1b0      	bne.n	b556a <_Z11startupPairv+0x3a>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b5608:	e9d7 6200 	ldrd	r6, r2, [r7]
            int minRSSI = -999;
   b560c:	4b37      	ldr	r3, [pc, #220]	; (b56ec <_Z11startupPairv+0x1bc>)
                    Serial.println("Found a local bot");
   b560e:	f8df b0f8 	ldr.w	fp, [pc, #248]	; b5708 <_Z11startupPairv+0x1d8>
            int selectedBot = -1;
   b5612:	f04f 38ff 	mov.w	r8, #4294967295
            for(PairBot pb: BLEPair){
   b5616:	42b2      	cmp	r2, r6
   b5618:	d00f      	beq.n	b563a <_Z11startupPairv+0x10a>
   b561a:	f8d6 9004 	ldr.w	r9, [r6, #4]
                if(pb.rssi > minRSSI){
   b561e:	454b      	cmp	r3, r9
   b5620:	da09      	bge.n	b5636 <_Z11startupPairv+0x106>
   b5622:	9203      	str	r2, [sp, #12]
                    selectedBot = pb.botNum;
   b5624:	f896 8000 	ldrb.w	r8, [r6]
                    Serial.println("Found a local bot");
   b5628:	f006 fe5a 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b562c:	4659      	mov	r1, fp
   b562e:	f006 f8ea 	bl	bb806 <_ZN5Print7printlnEPKc>
   b5632:	9a03      	ldr	r2, [sp, #12]
   b5634:	464b      	mov	r3, r9
      operator++() _GLIBCXX_NOEXCEPT
   b5636:	3608      	adds	r6, #8
	return *this;
   b5638:	e7ed      	b.n	b5616 <_Z11startupPairv+0xe6>
            if(selectedBot >= 0){
   b563a:	f1b8 3fff 	cmp.w	r8, #4294967295
   b563e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; b570c <_Z11startupPairv+0x1dc>
   b5642:	f8df b0cc 	ldr.w	fp, [pc, #204]	; b5710 <_Z11startupPairv+0x1e0>
                meshPair = true;    //Did we find any bots over BLE
   b5646:	bf18      	it	ne
   b5648:	2301      	movne	r3, #1
            oled.clearDisplay();
   b564a:	4620      	mov	r0, r4
                meshPair = true;    //Did we find any bots over BLE
   b564c:	bf18      	it	ne
   b564e:	f889 3000 	strbne.w	r3, [r9]
   b5652:	2600      	movs	r6, #0
            oled.clearDisplay();
   b5654:	f002 fc5a 	bl	b7f0c <_ZN16Adafruit_SSD130612clearDisplayEv>
            oled.print("Connecting");
   b5658:	4925      	ldr	r1, [pc, #148]	; (b56f0 <_Z11startupPairv+0x1c0>)
   b565a:	6126      	str	r6, [r4, #16]
   b565c:	4620      	mov	r0, r4
   b565e:	f006 f8bf 	bl	bb7e0 <_ZN5Print5printEPKc>
   b5662:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
            oled.printlnf("Bot: %d",selectedBot);
   b5666:	4923      	ldr	r1, [pc, #140]	; (b56f4 <_Z11startupPairv+0x1c4>)
   b5668:	6123      	str	r3, [r4, #16]
   b566a:	4642      	mov	r2, r8
   b566c:	4620      	mov	r0, r4
   b566e:	f7fe fe13 	bl	b4298 <_ZN5Print8printlnfEPKcz>
            oled.display();
   b5672:	4620      	mov	r0, r4
   b5674:	f002 feb8 	bl	b83e8 <_ZN16Adafruit_SSD13067displayEv>
            while(meshPair){
   b5678:	f899 3000 	ldrb.w	r3, [r9]
   b567c:	b313      	cbz	r3, b56c4 <_Z11startupPairv+0x194>
                BLEScan(selectedBot);
   b567e:	4640      	mov	r0, r8
   b5680:	f7ff fc16 	bl	b4eb0 <_Z7BLEScani>
                if(WaterBots.size() == 0 && BLETimeout == LTE_BKP_Time) Particle.publish("Bot1dat", "CCABhwd", PRIVATE);
   b5684:	e9db 3200 	ldrd	r3, r2, [fp]
                BLETimeout++;
   b5688:	3601      	adds	r6, #1
                if(WaterBots.size() == 0 && BLETimeout == LTE_BKP_Time) Particle.publish("Bot1dat", "CCABhwd", PRIVATE);
   b568a:	429a      	cmp	r2, r3
                BLETimeout++;
   b568c:	b2f6      	uxtb	r6, r6
                if(WaterBots.size() == 0 && BLETimeout == LTE_BKP_Time) Particle.publish("Bot1dat", "CCABhwd", PRIVATE);
   b568e:	d113      	bne.n	b56b8 <_Z11startupPairv+0x188>
   b5690:	2e64      	cmp	r6, #100	; 0x64
   b5692:	d111      	bne.n	b56b8 <_Z11startupPairv+0x188>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5694:	4b18      	ldr	r3, [pc, #96]	; (b56f8 <_Z11startupPairv+0x1c8>)
   b5696:	4a19      	ldr	r2, [pc, #100]	; (b56fc <_Z11startupPairv+0x1cc>)
   b5698:	781b      	ldrb	r3, [r3, #0]
   b569a:	f88d 3000 	strb.w	r3, [sp]
   b569e:	a804      	add	r0, sp, #16
   b56a0:	4917      	ldr	r1, [pc, #92]	; (b5700 <_Z11startupPairv+0x1d0>)
   b56a2:	233c      	movs	r3, #60	; 0x3c
   b56a4:	f006 fbda 	bl	bbe5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   b56a8:	9805      	ldr	r0, [sp, #20]
   b56aa:	b108      	cbz	r0, b56b0 <_Z11startupPairv+0x180>
	  _M_pi->_M_release();
   b56ac:	f7fe fe40 	bl	b4330 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
                delay(100);
   b56b0:	2064      	movs	r0, #100	; 0x64
   b56b2:	f006 fa01 	bl	bbab8 <delay>
            while(meshPair){
   b56b6:	e7df      	b.n	b5678 <_Z11startupPairv+0x148>
                if(BLETimeout > BLE_MAX_CONN_TIME) meshPair = false;
   b56b8:	2ec8      	cmp	r6, #200	; 0xc8
   b56ba:	bf84      	itt	hi
   b56bc:	2300      	movhi	r3, #0
   b56be:	f889 3000 	strbhi.w	r3, [r9]
   b56c2:	e7f5      	b.n	b56b0 <_Z11startupPairv+0x180>
            oled.clearDisplay();
   b56c4:	4620      	mov	r0, r4
   b56c6:	f002 fc21 	bl	b7f0c <_ZN16Adafruit_SSD130612clearDisplayEv>
            oled.display();
   b56ca:	4620      	mov	r0, r4
   b56cc:	f002 fe8c 	bl	b83e8 <_ZN16Adafruit_SSD13067displayEv>
   b56d0:	e74b      	b.n	b556a <_Z11startupPairv+0x3a>
}
   b56d2:	b007      	add	sp, #28
   b56d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b56d8:	2003de4c 	.word	0x2003de4c
   b56dc:	2003dc90 	.word	0x2003dc90
   b56e0:	000bfc2b 	.word	0x000bfc2b
   b56e4:	000bfc35 	.word	0x000bfc35
   b56e8:	000bfc3e 	.word	0x000bfc3e
   b56ec:	fffffc19 	.word	0xfffffc19
   b56f0:	000bfc5f 	.word	0x000bfc5f
   b56f4:	000bfc6a 	.word	0x000bfc6a
   b56f8:	2003dd04 	.word	0x2003dd04
   b56fc:	000bfc72 	.word	0x000bfc72
   b5700:	000bf759 	.word	0x000bf759
   b5704:	2003e634 	.word	0x2003e634
   b5708:	000bfc4d 	.word	0x000bfc4d
   b570c:	2003ddf5 	.word	0x2003ddf5
   b5710:	2003dcbc 	.word	0x2003dcbc

000b5714 <setup>:
void setup() {
   b5714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pinMode(E_DPAD,INPUT_PULLUP);
   b5718:	2102      	movs	r1, #2
void setup() {
   b571a:	b090      	sub	sp, #64	; 0x40
    pinMode(E_DPAD,INPUT_PULLUP);
   b571c:	201c      	movs	r0, #28
   b571e:	f007 f805 	bl	bc72c <pinMode>
    pinMode(U_DPAD,INPUT_PULLUP);
   b5722:	2102      	movs	r1, #2
   b5724:	200e      	movs	r0, #14
   b5726:	f007 f801 	bl	bc72c <pinMode>
    pinMode(D_DPAD,INPUT_PULLUP);
   b572a:	2102      	movs	r1, #2
   b572c:	2007      	movs	r0, #7
   b572e:	f006 fffd 	bl	bc72c <pinMode>
    pinMode(L_DPAD,INPUT_PULLUP);
   b5732:	2102      	movs	r1, #2
   b5734:	200f      	movs	r0, #15
   b5736:	f006 fff9 	bl	bc72c <pinMode>
    pinMode(R_DPAD,INPUT_PULLUP);
   b573a:	2102      	movs	r1, #2
   b573c:	2006      	movs	r0, #6
   b573e:	f006 fff5 	bl	bc72c <pinMode>
    pinMode(JOY_BTN,INPUT_PULLUP);
   b5742:	2102      	movs	r1, #2
   b5744:	201d      	movs	r0, #29
   b5746:	f006 fff1 	bl	bc72c <pinMode>
    Serial.begin(115200);
   b574a:	f006 fdc9 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b574e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b5752:	f006 fdb9 	bl	bc2c8 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b5756:	f007 f859 	bl	bc80c <_Z22__fetch_global_Serial1v>
   b575a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b575e:	f006 fe87 	bl	bc470 <_ZN11USARTSerial5beginEm>
    setupXBee();
   b5762:	f7fe fedb 	bl	b451c <_Z9setupXBeev>
	BLE.on();
   b5766:	f004 f9ed 	bl	b9b44 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b576a:	f004 fa35 	bl	b9bd8 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setScanTimeout(50);
   b576e:	f004 f9e9 	bl	b9b44 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5772:	2132      	movs	r1, #50	; 0x32
   b5774:	f004 fa76 	bl	b9c64 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   b5778:	4a54      	ldr	r2, [pc, #336]	; (b58cc <setup+0x1b8>)
   b577a:	4955      	ldr	r1, [pc, #340]	; (b58d0 <setup+0x1bc>)
    logMessages = true;
   b577c:	4f55      	ldr	r7, [pc, #340]	; (b58d4 <setup+0x1c0>)
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   b577e:	4610      	mov	r0, r2
   b5780:	f005 fa92 	bl	baca8 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    peerOffloadCharacteristic.onDataReceived(offloadDataReceived, &peerOffloadCharacteristic);
   b5784:	4a54      	ldr	r2, [pc, #336]	; (b58d8 <setup+0x1c4>)
   b5786:	4955      	ldr	r1, [pc, #340]	; (b58dc <setup+0x1c8>)
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b5788:	2400      	movs	r4, #0
   b578a:	4610      	mov	r0, r2
   b578c:	f005 fa8c 	bl	baca8 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
   b5790:	4622      	mov	r2, r4
   b5792:	4953      	ldr	r1, [pc, #332]	; (b58e0 <setup+0x1cc>)
   b5794:	4853      	ldr	r0, [pc, #332]	; (b58e4 <setup+0x1d0>)
   b5796:	e9cd 4400 	strd	r4, r4, [sp]
   b579a:	2301      	movs	r3, #1
   b579c:	f003 fa36 	bl	b8c0c <spark_subscribe>
    offloadingMode = false;
   b57a0:	4b51      	ldr	r3, [pc, #324]	; (b58e8 <setup+0x1d4>)
   b57a2:	701c      	strb	r4, [r3, #0]
    offloadingDone = false;
   b57a4:	4b51      	ldr	r3, [pc, #324]	; (b58ec <setup+0x1d8>)
   b57a6:	701c      	strb	r4, [r3, #0]
    postStatus = false;
   b57a8:	4b51      	ldr	r3, [pc, #324]	; (b58f0 <setup+0x1dc>)
   b57aa:	701c      	strb	r4, [r3, #0]
    statusTimeout = false;
   b57ac:	4b51      	ldr	r3, [pc, #324]	; (b58f4 <setup+0x1e0>)
    logMessages = true;
   b57ae:	2501      	movs	r5, #1
    statusTimeout = false;
   b57b0:	701c      	strb	r4, [r3, #0]
    logMessages = true;
   b57b2:	703d      	strb	r5, [r7, #0]
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b57b4:	f006 f962 	bl	bba7c <_ZN9TimeClass5monthEv>
   b57b8:	9007      	str	r0, [sp, #28]
   b57ba:	f006 f953 	bl	bba64 <_ZN9TimeClass3dayEv>
   b57be:	4606      	mov	r6, r0
   b57c0:	f006 f964 	bl	bba8c <_ZN9TimeClass4yearEv>
   b57c4:	4680      	mov	r8, r0
   b57c6:	f006 f929 	bl	bba1c <_ZN9TimeClass4hourEv>
   b57ca:	4681      	mov	r9, r0
   b57cc:	f006 f932 	bl	bba34 <_ZN9TimeClass6minuteEv>
   b57d0:	4682      	mov	sl, r0
   b57d2:	f006 f93b 	bl	bba4c <_ZN9TimeClass6secondEv>
   b57d6:	9b07      	ldr	r3, [sp, #28]
   b57d8:	4a47      	ldr	r2, [pc, #284]	; (b58f8 <setup+0x1e4>)
   b57da:	9600      	str	r6, [sp, #0]
   b57dc:	e9cd a003 	strd	sl, r0, [sp, #12]
   b57e0:	2110      	movs	r1, #16
   b57e2:	e9cd 8901 	strd	r8, r9, [sp, #4]
   b57e6:	a808      	add	r0, sp, #32
   b57e8:	f003 fa50 	bl	b8c8c <snprintf>
    strcpy(filenameMessages,DEF_FILENAME);
   b57ec:	4943      	ldr	r1, [pc, #268]	; (b58fc <setup+0x1e8>)
   b57ee:	4844      	ldr	r0, [pc, #272]	; (b5900 <setup+0x1ec>)
   b57f0:	f007 ff27 	bl	bd642 <strcpy>
    strcat(filenameMessages,timestamp);
   b57f4:	a908      	add	r1, sp, #32
   b57f6:	4842      	ldr	r0, [pc, #264]	; (b5900 <setup+0x1ec>)
   b57f8:	f007 ff0a 	bl	bd610 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b57fc:	4941      	ldr	r1, [pc, #260]	; (b5904 <setup+0x1f0>)
   b57fe:	4840      	ldr	r0, [pc, #256]	; (b5900 <setup+0x1ec>)
   b5800:	f007 ff06 	bl	bd610 <strcat>
    oled.setup(); 
   b5804:	4840      	ldr	r0, [pc, #256]	; (b5908 <setup+0x1f4>)
   b5806:	f000 fe49 	bl	b649c <_ZN16OledWingAdafruit5setupEv>
    oled.clearDisplay();
   b580a:	483f      	ldr	r0, [pc, #252]	; (b5908 <setup+0x1f4>)
   b580c:	f002 fb7e 	bl	b7f0c <_ZN16Adafruit_SSD130612clearDisplayEv>
    oled.display();
   b5810:	483d      	ldr	r0, [pc, #244]	; (b5908 <setup+0x1f4>)
   b5812:	f002 fde9 	bl	b83e8 <_ZN16Adafruit_SSD13067displayEv>
class SPISettings : public Printable {
   b5816:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b581a:	4c3c      	ldr	r4, [pc, #240]	; (b590c <setup+0x1f8>)
   b581c:	4b3c      	ldr	r3, [pc, #240]	; (b5910 <setup+0x1fc>)
   b581e:	930c      	str	r3, [sp, #48]	; 0x30
   b5820:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   b5824:	4b3b      	ldr	r3, [pc, #236]	; (b5914 <setup+0x200>)
   b5826:	930e      	str	r3, [sp, #56]	; 0x38
   b5828:	2208      	movs	r2, #8
   b582a:	ab0c      	add	r3, sp, #48	; 0x30
   b582c:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   b5830:	4630      	mov	r0, r6
   b5832:	f8ad 503c 	strh.w	r5, [sp, #60]	; 0x3c
   b5836:	f001 ffe5 	bl	b7804 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b583a:	2800      	cmp	r0, #0
   b583c:	d03e      	beq.n	b58bc <setup+0x1a8>
    m_blockDev = blockDev;
   b583e:	6026      	str	r6, [r4, #0]
    vwd()->close();
   b5840:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   b5844:	f001 fc3e 	bl	b70c4 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b5848:	4629      	mov	r1, r5
   b584a:	4620      	mov	r0, r4
   b584c:	f001 fe84 	bl	b7558 <_ZN9FatVolume4initEh>
   b5850:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   b5854:	4601      	mov	r1, r0
   b5856:	b360      	cbz	r0, b58b2 <setup+0x19e>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b5858:	492c      	ldr	r1, [pc, #176]	; (b590c <setup+0x1f8>)
   b585a:	f201 403c 	addw	r0, r1, #1084	; 0x43c
   b585e:	f001 fa68 	bl	b6d32 <_ZN7FatFile8openRootEP9FatVolume>
   b5862:	b358      	cbz	r0, b58bc <setup+0x1a8>
    if (!dir->isDir()) {
   b5864:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b5868:	f013 0f70 	tst.w	r3, #112	; 0x70
   b586c:	d026      	beq.n	b58bc <setup+0x1a8>
    m_cwd = dir;
   b586e:	4b2a      	ldr	r3, [pc, #168]	; (b5918 <setup+0x204>)
   b5870:	601d      	str	r5, [r3, #0]
    oled.setTextSize(2);
   b5872:	4c25      	ldr	r4, [pc, #148]	; (b5908 <setup+0x1f4>)
   b5874:	2102      	movs	r1, #2
   b5876:	4620      	mov	r0, r4
   b5878:	f000 fdc1 	bl	b63fe <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b587c:	2200      	movs	r2, #0
   b587e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b5882:	e9c4 2304 	strd	r2, r3, [r4, #16]
    oled.print(" Starting ");
   b5886:	4925      	ldr	r1, [pc, #148]	; (b591c <setup+0x208>)
   b5888:	4620      	mov	r0, r4
   b588a:	f005 ffa9 	bl	bb7e0 <_ZN5Print5printEPKc>
    oled.display();
   b588e:	4620      	mov	r0, r4
   b5890:	f002 fdaa 	bl	b83e8 <_ZN16Adafruit_SSD13067displayEv>
    startupPair();
   b5894:	f7ff fe4c 	bl	b5530 <_Z11startupPairv>
    at1.start();
   b5898:	4821      	ldr	r0, [pc, #132]	; (b5920 <setup+0x20c>)
   b589a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b589e:	f7fe fcab 	bl	b41f8 <_ZN5Timer5startEj.isra.0>
    at2.start();
   b58a2:	4820      	ldr	r0, [pc, #128]	; (b5924 <setup+0x210>)
   b58a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b58a8:	f7fe fca6 	bl	b41f8 <_ZN5Timer5startEj.isra.0>
}
   b58ac:	b010      	add	sp, #64	; 0x40
   b58ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return (part ? init(part) : init(1) || init(0))
   b58b2:	4620      	mov	r0, r4
   b58b4:	f001 fe50 	bl	b7558 <_ZN9FatVolume4initEh>
   b58b8:	2800      	cmp	r0, #0
   b58ba:	d1cd      	bne.n	b5858 <setup+0x144>
        Serial.println("Error: could not connect to SD card!");
   b58bc:	f006 fd10 	bl	bc2e0 <_Z16_fetch_usbserialv>
   b58c0:	4919      	ldr	r1, [pc, #100]	; (b5928 <setup+0x214>)
   b58c2:	f005 ffa0 	bl	bb806 <_ZN5Print7printlnEPKc>
        logMessages = false;
   b58c6:	2300      	movs	r3, #0
   b58c8:	703b      	strb	r3, [r7, #0]
   b58ca:	e7d2      	b.n	b5872 <setup+0x15e>
   b58cc:	2003ded4 	.word	0x2003ded4
   b58d0:	000b4c7d 	.word	0x000b4c7d
   b58d4:	2003ddf4 	.word	0x2003ddf4
   b58d8:	2003dec4 	.word	0x2003dec4
   b58dc:	000b43c9 	.word	0x000b43c9
   b58e0:	000b4c2d 	.word	0x000b4c2d
   b58e4:	000bf759 	.word	0x000bf759
   b58e8:	2003de4b 	.word	0x2003de4b
   b58ec:	2003de4a 	.word	0x2003de4a
   b58f0:	2003dedc 	.word	0x2003dedc
   b58f4:	2003e635 	.word	0x2003e635
   b58f8:	000bfc7a 	.word	0x000bfc7a
   b58fc:	000bfc93 	.word	0x000bfc93
   b5900:	2003dd69 	.word	0x2003dd69
   b5904:	000bfc9c 	.word	0x000bfc9c
   b5908:	2003de4c 	.word	0x2003de4c
   b590c:	2003e1b0 	.word	0x2003e1b0
   b5910:	000bfce0 	.word	0x000bfce0
   b5914:	003d0900 	.word	0x003d0900
   b5918:	2003e648 	.word	0x2003e648
   b591c:	000bfcca 	.word	0x000bfcca
   b5920:	2003dd1c 	.word	0x2003dd1c
   b5924:	2003dd38 	.word	0x2003dd38
   b5928:	000bfca5 	.word	0x000bfca5

000b592c <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b592c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5930:	b085      	sub	sp, #20
   b5932:	461f      	mov	r7, r3
   b5934:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5938:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b593c:	eba8 0902 	sub.w	r9, r8, r2
   b5940:	eba7 0a01 	sub.w	sl, r7, r1
   b5944:	f1b9 0f00 	cmp.w	r9, #0
   b5948:	bfb8      	it	lt
   b594a:	f1c9 0900 	rsblt	r9, r9, #0
   b594e:	f1ba 0f00 	cmp.w	sl, #0
   b5952:	bfb8      	it	lt
   b5954:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b5958:	45d1      	cmp	r9, sl
        uint16_t color) {
   b595a:	4683      	mov	fp, r0
   b595c:	460c      	mov	r4, r1
   b595e:	4615      	mov	r5, r2
    if (steep) {
   b5960:	dd04      	ble.n	b596c <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b5962:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b5964:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b5966:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b5968:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b596a:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b596c:	42bc      	cmp	r4, r7
   b596e:	dd05      	ble.n	b597c <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b5970:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b5972:	4645      	mov	r5, r8
   b5974:	4690      	mov	r8, r2
    if (x0 > x1) {
   b5976:	4622      	mov	r2, r4
   b5978:	463c      	mov	r4, r7
   b597a:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b597c:	1b3e      	subs	r6, r7, r4
   b597e:	b2b2      	uxth	r2, r6
   b5980:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b5982:	eba8 0205 	sub.w	r2, r8, r5
   b5986:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b598a:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b598e:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b5992:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b5996:	4545      	cmp	r5, r8
   b5998:	bfb4      	ite	lt
   b599a:	2201      	movlt	r2, #1
   b599c:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b59a0:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b59a2:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b59a4:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b59a6:	42bc      	cmp	r4, r7
   b59a8:	dc1c      	bgt.n	b59e4 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b59aa:	f8db 2000 	ldr.w	r2, [fp]
   b59ae:	9303      	str	r3, [sp, #12]
        if (steep) {
   b59b0:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b59b2:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b59b6:	bfc7      	ittee	gt
   b59b8:	4629      	movgt	r1, r5
   b59ba:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b59bc:	462a      	movle	r2, r5
   b59be:	4621      	movle	r1, r4
   b59c0:	4658      	mov	r0, fp
   b59c2:	47c0      	blx	r8
        }
        err -= dy;
   b59c4:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b59c6:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b59c8:	1ab6      	subs	r6, r6, r2
   b59ca:	b2b1      	uxth	r1, r6
   b59cc:	b236      	sxth	r6, r6
        if (err < 0) {
   b59ce:	2e00      	cmp	r6, #0
   b59d0:	da05      	bge.n	b59de <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b59d2:	9a02      	ldr	r2, [sp, #8]
   b59d4:	4415      	add	r5, r2
            err += dx;
   b59d6:	9a00      	ldr	r2, [sp, #0]
   b59d8:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b59da:	b22d      	sxth	r5, r5
            err += dx;
   b59dc:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b59de:	3401      	adds	r4, #1
   b59e0:	b224      	sxth	r4, r4
   b59e2:	e7e0      	b.n	b59a6 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b59e4:	b005      	add	sp, #20
   b59e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b59ea <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b59ea:	4770      	bx	lr

000b59ec <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b59ec:	b410      	push	{r4}
    drawPixel(x, y, color);
   b59ee:	6804      	ldr	r4, [r0, #0]
   b59f0:	6924      	ldr	r4, [r4, #16]
   b59f2:	46a4      	mov	ip, r4
}
   b59f4:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b59f8:	4760      	bx	ip

000b59fa <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b59fa:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b59fc:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b59fe:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b5a02:	9502      	str	r5, [sp, #8]
   b5a04:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b5a06:	46a4      	mov	ip, r4
}
   b5a08:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b5a0a:	4760      	bx	ip

000b5a0c <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5a0c:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b5a0e:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b5a10:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b5a14:	9502      	str	r5, [sp, #8]
   b5a16:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b5a18:	46a4      	mov	ip, r4
}
   b5a1a:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b5a1c:	4760      	bx	ip

000b5a1e <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5a1e:	b470      	push	{r4, r5, r6}
   b5a20:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b5a24:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b5a28:	6804      	ldr	r4, [r0, #0]
   b5a2a:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b5a2e:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b5a30:	46a4      	mov	ip, r4
}
   b5a32:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b5a34:	4760      	bx	ip

000b5a36 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5a36:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5a3a:	461c      	mov	r4, r3
    startWrite();
   b5a3c:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b5a3e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5a42:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b5a44:	4605      	mov	r5, r0
   b5a46:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b5a48:	3c01      	subs	r4, #1
   b5a4a:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b5a4c:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b5a4e:	b224      	sxth	r4, r4
    startWrite();
   b5a50:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b5a52:	682b      	ldr	r3, [r5, #0]
   b5a54:	f8cd 8004 	str.w	r8, [sp, #4]
   b5a58:	9400      	str	r4, [sp, #0]
   b5a5a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b5a5c:	4628      	mov	r0, r5
   b5a5e:	463b      	mov	r3, r7
   b5a60:	4632      	mov	r2, r6
   b5a62:	4639      	mov	r1, r7
   b5a64:	47a0      	blx	r4
    endWrite();
   b5a66:	682b      	ldr	r3, [r5, #0]
   b5a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5a6a:	4628      	mov	r0, r5
}
   b5a6c:	b002      	add	sp, #8
   b5a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5a72:	4718      	bx	r3

000b5a74 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5a74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5a78:	461d      	mov	r5, r3
    startWrite();
   b5a7a:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b5a7c:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5a80:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b5a82:	4604      	mov	r4, r0
   b5a84:	4617      	mov	r7, r2
   b5a86:	460e      	mov	r6, r1
    startWrite();
   b5a88:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b5a8a:	e9cd 7800 	strd	r7, r8, [sp]
   b5a8e:	6822      	ldr	r2, [r4, #0]
   b5a90:	1e6b      	subs	r3, r5, #1
   b5a92:	4433      	add	r3, r6
   b5a94:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b5a96:	4620      	mov	r0, r4
   b5a98:	b21b      	sxth	r3, r3
   b5a9a:	463a      	mov	r2, r7
   b5a9c:	4631      	mov	r1, r6
   b5a9e:	47a8      	blx	r5
    endWrite();
   b5aa0:	6823      	ldr	r3, [r4, #0]
   b5aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5aa4:	4620      	mov	r0, r4
}
   b5aa6:	b002      	add	sp, #8
   b5aa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5aac:	4718      	bx	r3

000b5aae <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5aae:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5ab2:	461e      	mov	r6, r3
    startWrite();
   b5ab4:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5ab6:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b5aba:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5abc:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5ac0:	460c      	mov	r4, r1
   b5ac2:	4605      	mov	r5, r0
   b5ac4:	4617      	mov	r7, r2
    startWrite();
   b5ac6:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b5ac8:	4426      	add	r6, r4
   b5aca:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b5acc:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b5ace:	da0b      	bge.n	b5ae8 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b5ad0:	f8cd 8000 	str.w	r8, [sp]
   b5ad4:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5ad8:	4621      	mov	r1, r4
   b5ada:	464b      	mov	r3, r9
   b5adc:	463a      	mov	r2, r7
   b5ade:	4628      	mov	r0, r5
   b5ae0:	3401      	adds	r4, #1
   b5ae2:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b5ae4:	b224      	sxth	r4, r4
   b5ae6:	e7f0      	b.n	b5aca <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b5ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5aea:	4628      	mov	r0, r5
}
   b5aec:	b002      	add	sp, #8
   b5aee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5af2:	4718      	bx	r3

000b5af4 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b5af4:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b5af6:	6802      	ldr	r2, [r0, #0]
   b5af8:	9101      	str	r1, [sp, #4]
   b5afa:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5afe:	9100      	str	r1, [sp, #0]
   b5b00:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b5b02:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5b06:	2200      	movs	r2, #0
   b5b08:	4611      	mov	r1, r2
   b5b0a:	47a0      	blx	r4
}
   b5b0c:	b002      	add	sp, #8
   b5b0e:	bd10      	pop	{r4, pc}

000b5b10 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5b10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b5b14:	4299      	cmp	r1, r3
        uint16_t color) {
   b5b16:	4616      	mov	r6, r2
   b5b18:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b5b1c:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5b20:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b5b22:	4680      	mov	r8, r0
   b5b24:	460d      	mov	r5, r1
   b5b26:	461c      	mov	r4, r3
    if(x0 == x1){
   b5b28:	d113      	bne.n	b5b52 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5b2a:	42be      	cmp	r6, r7
   b5b2c:	bfc8      	it	gt
   b5b2e:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5b30:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5b34:	bfc4      	itt	gt
   b5b36:	463e      	movgt	r6, r7
   b5b38:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5b3a:	1c7b      	adds	r3, r7, #1
   b5b3c:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b5b3e:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5b40:	b21b      	sxth	r3, r3
   b5b42:	4632      	mov	r2, r6
   b5b44:	4629      	mov	r1, r5
   b5b46:	4640      	mov	r0, r8
   b5b48:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b5b4a:	b003      	add	sp, #12
   b5b4c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5b50:	4760      	bx	ip
    } else if(y0 == y1){
   b5b52:	42be      	cmp	r6, r7
   b5b54:	d10a      	bne.n	b5b6c <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b5b56:	4299      	cmp	r1, r3
   b5b58:	bfc2      	ittt	gt
   b5b5a:	460b      	movgt	r3, r1
   b5b5c:	4625      	movgt	r5, r4
   b5b5e:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5b60:	1c63      	adds	r3, r4, #1
   b5b62:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b5b66:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5b68:	1b5b      	subs	r3, r3, r5
   b5b6a:	e7e9      	b.n	b5b40 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b5b6c:	6953      	ldr	r3, [r2, #20]
   b5b6e:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b5b70:	e9cd 7900 	strd	r7, r9, [sp]
   b5b74:	f8d8 3000 	ldr.w	r3, [r8]
   b5b78:	4640      	mov	r0, r8
   b5b7a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b5b7c:	4632      	mov	r2, r6
   b5b7e:	4623      	mov	r3, r4
   b5b80:	4629      	mov	r1, r5
   b5b82:	47b8      	blx	r7
        endWrite();
   b5b84:	f8d8 3000 	ldr.w	r3, [r8]
   b5b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5b8a:	4640      	mov	r0, r8
}
   b5b8c:	b003      	add	sp, #12
   b5b8e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b5b92:	4718      	bx	r3

000b5b94 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5b94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5b98:	461d      	mov	r5, r3
    startWrite();
   b5b9a:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5b9c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b5ba0:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5ba2:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5ba6:	4604      	mov	r4, r0
   b5ba8:	460f      	mov	r7, r1
   b5baa:	4616      	mov	r6, r2
    startWrite();
   b5bac:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b5bae:	6823      	ldr	r3, [r4, #0]
   b5bb0:	f8cd 8000 	str.w	r8, [sp]
   b5bb4:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5bb8:	4632      	mov	r2, r6
   b5bba:	462b      	mov	r3, r5
   b5bbc:	4639      	mov	r1, r7
   b5bbe:	4620      	mov	r0, r4
   b5bc0:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b5bc2:	6823      	ldr	r3, [r4, #0]
   b5bc4:	f8cd 8000 	str.w	r8, [sp]
   b5bc8:	f109 32ff 	add.w	r2, r9, #4294967295
   b5bcc:	4432      	add	r2, r6
   b5bce:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5bd2:	4639      	mov	r1, r7
   b5bd4:	462b      	mov	r3, r5
   b5bd6:	4620      	mov	r0, r4
   b5bd8:	b212      	sxth	r2, r2
   b5bda:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b5bdc:	6823      	ldr	r3, [r4, #0]
   b5bde:	f8cd 8000 	str.w	r8, [sp]
   b5be2:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5be6:	4632      	mov	r2, r6
   b5be8:	464b      	mov	r3, r9
   b5bea:	4639      	mov	r1, r7
   b5bec:	4620      	mov	r0, r4
   b5bee:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b5bf0:	1e6b      	subs	r3, r5, #1
   b5bf2:	19d9      	adds	r1, r3, r7
   b5bf4:	6823      	ldr	r3, [r4, #0]
   b5bf6:	f8cd 8000 	str.w	r8, [sp]
   b5bfa:	6a1d      	ldr	r5, [r3, #32]
   b5bfc:	4620      	mov	r0, r4
   b5bfe:	464b      	mov	r3, r9
   b5c00:	4632      	mov	r2, r6
   b5c02:	b209      	sxth	r1, r1
   b5c04:	47a8      	blx	r5
    endWrite();
   b5c06:	6823      	ldr	r3, [r4, #0]
   b5c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5c0a:	4620      	mov	r0, r4
}
   b5c0c:	b002      	add	sp, #8
   b5c0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5c12:	4718      	bx	r3

000b5c14 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b5c14:	4770      	bx	lr

000b5c16 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b5c16:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b5c1a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b5c1e:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b5c20:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b5c22:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5c26:	bf59      	ittee	pl
   b5c28:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b5c2a:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b5c2c:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b5c2e:	81c3      	strhmi	r3, [r0, #14]
}
   b5c30:	4770      	bx	lr
	...

000b5c34 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5c34:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b5c36:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b5c38:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b5c3a:	4a07      	ldr	r2, [pc, #28]	; (b5c58 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b5c3c:	4d07      	ldr	r5, [pc, #28]	; (b5c5c <_ZN12Adafruit_GFXC1Ess+0x28>)
   b5c3e:	8101      	strh	r1, [r0, #8]
   b5c40:	2400      	movs	r4, #0
    _width    = WIDTH;
   b5c42:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b5c44:	f04f 31ff 	mov.w	r1, #4294967295
   b5c48:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b5c4c:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b5c4e:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b5c50:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b5c52:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b5c54:	6204      	str	r4, [r0, #32]
}
   b5c56:	bd30      	pop	{r4, r5, pc}
   b5c58:	01000101 	.word	0x01000101
   b5c5c:	000c0230 	.word	0x000c0230

000b5c60 <_ZN12Adafruit_GFX10drawCircleEssst>:
        uint16_t color) {
   b5c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int16_t f = 1 - r;
   b5c64:	b29d      	uxth	r5, r3
        uint16_t color) {
   b5c66:	4616      	mov	r6, r2
    int16_t f = 1 - r;
   b5c68:	f1c5 0201 	rsb	r2, r5, #1
        uint16_t color) {
   b5c6c:	b087      	sub	sp, #28
   b5c6e:	461f      	mov	r7, r3
    int16_t f = 1 - r;
   b5c70:	b213      	sxth	r3, r2
    int16_t ddF_y = -2 * r;
   b5c72:	ebc5 32c5 	rsb	r2, r5, r5, lsl #15
   b5c76:	0052      	lsls	r2, r2, #1
    int16_t f = 1 - r;
   b5c78:	9301      	str	r3, [sp, #4]
    int16_t ddF_y = -2 * r;
   b5c7a:	b213      	sxth	r3, r2
    startWrite();
   b5c7c:	6802      	ldr	r2, [r0, #0]
    int16_t ddF_y = -2 * r;
   b5c7e:	9304      	str	r3, [sp, #16]
        uint16_t color) {
   b5c80:	4604      	mov	r4, r0
    startWrite();
   b5c82:	6952      	ldr	r2, [r2, #20]
        uint16_t color) {
   b5c84:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
   b5c88:	4689      	mov	r9, r1
    startWrite();
   b5c8a:	4790      	blx	r2
    writePixel(x0  , y0+r, color);
   b5c8c:	6821      	ldr	r1, [r4, #0]
   b5c8e:	b2b3      	uxth	r3, r6
   b5c90:	fa15 f286 	uxtah	r2, r5, r6
   b5c94:	f8d1 8018 	ldr.w	r8, [r1, #24]
   b5c98:	9300      	str	r3, [sp, #0]
   b5c9a:	4649      	mov	r1, r9
   b5c9c:	465b      	mov	r3, fp
   b5c9e:	b212      	sxth	r2, r2
   b5ca0:	4620      	mov	r0, r4
   b5ca2:	47c0      	blx	r8
    writePixel(x0  , y0-r, color);
   b5ca4:	9b00      	ldr	r3, [sp, #0]
   b5ca6:	6821      	ldr	r1, [r4, #0]
   b5ca8:	1b5a      	subs	r2, r3, r5
   b5caa:	f8d1 8018 	ldr.w	r8, [r1, #24]
   b5cae:	465b      	mov	r3, fp
   b5cb0:	4649      	mov	r1, r9
   b5cb2:	b212      	sxth	r2, r2
   b5cb4:	4620      	mov	r0, r4
   b5cb6:	47c0      	blx	r8
    writePixel(x0+r, y0  , color);
   b5cb8:	6822      	ldr	r2, [r4, #0]
   b5cba:	fa15 f189 	uxtah	r1, r5, r9
   b5cbe:	fa1f f889 	uxth.w	r8, r9
   b5cc2:	465b      	mov	r3, fp
   b5cc4:	f8d2 9018 	ldr.w	r9, [r2, #24]
   b5cc8:	b209      	sxth	r1, r1
   b5cca:	4632      	mov	r2, r6
   b5ccc:	4620      	mov	r0, r4
   b5cce:	47c8      	blx	r9
    writePixel(x0-r, y0  , color);
   b5cd0:	6822      	ldr	r2, [r4, #0]
   b5cd2:	eba8 0105 	sub.w	r1, r8, r5
   b5cd6:	465b      	mov	r3, fp
   b5cd8:	6995      	ldr	r5, [r2, #24]
   b5cda:	b209      	sxth	r1, r1
   b5cdc:	4632      	mov	r2, r6
   b5cde:	4620      	mov	r0, r4
   b5ce0:	47a8      	blx	r5
    int16_t x = 0;
   b5ce2:	2300      	movs	r3, #0
   b5ce4:	9303      	str	r3, [sp, #12]
    while (x<y) {
   b5ce6:	9b03      	ldr	r3, [sp, #12]
   b5ce8:	42bb      	cmp	r3, r7
   b5cea:	da76      	bge.n	b5dda <_ZN12Adafruit_GFX10drawCircleEssst+0x17a>
        if (f >= 0) {
   b5cec:	9b01      	ldr	r3, [sp, #4]
   b5cee:	2b00      	cmp	r3, #0
   b5cf0:	db0a      	blt.n	b5d08 <_ZN12Adafruit_GFX10drawCircleEssst+0xa8>
            ddF_y += 2;
   b5cf2:	9a04      	ldr	r2, [sp, #16]
   b5cf4:	3202      	adds	r2, #2
   b5cf6:	b213      	sxth	r3, r2
   b5cf8:	9304      	str	r3, [sp, #16]
            f += ddF_y;
   b5cfa:	9b01      	ldr	r3, [sp, #4]
   b5cfc:	fa13 f282 	uxtah	r2, r3, r2
            y--;
   b5d00:	3f01      	subs	r7, #1
            f += ddF_y;
   b5d02:	b213      	sxth	r3, r2
            y--;
   b5d04:	b23f      	sxth	r7, r7
            f += ddF_y;
   b5d06:	9301      	str	r3, [sp, #4]
        x++;
   b5d08:	9a03      	ldr	r2, [sp, #12]
        writePixel(x0 + x, y0 + y, color);
   b5d0a:	6821      	ldr	r1, [r4, #0]
   b5d0c:	3201      	adds	r2, #1
   b5d0e:	b213      	sxth	r3, r2
   b5d10:	9303      	str	r3, [sp, #12]
        ddF_x += 2;
   b5d12:	9b01      	ldr	r3, [sp, #4]
        writePixel(x0 + x, y0 + y, color);
   b5d14:	698d      	ldr	r5, [r1, #24]
   b5d16:	b296      	uxth	r6, r2
        ddF_x += 2;
   b5d18:	eb03 0246 	add.w	r2, r3, r6, lsl #1
        f += ddF_x;
   b5d1c:	3201      	adds	r2, #1
   b5d1e:	b213      	sxth	r3, r2
   b5d20:	9301      	str	r3, [sp, #4]
        writePixel(x0 + x, y0 + y, color);
   b5d22:	9b00      	ldr	r3, [sp, #0]
   b5d24:	eb08 0a06 	add.w	sl, r8, r6
   b5d28:	fa13 f287 	uxtah	r2, r3, r7
   b5d2c:	fa0f fa8a 	sxth.w	sl, sl
   b5d30:	b212      	sxth	r2, r2
   b5d32:	465b      	mov	r3, fp
   b5d34:	9202      	str	r2, [sp, #8]
   b5d36:	4651      	mov	r1, sl
   b5d38:	4620      	mov	r0, r4
   b5d3a:	47a8      	blx	r5
        writePixel(x0 - x, y0 + y, color);
   b5d3c:	eba8 0906 	sub.w	r9, r8, r6
   b5d40:	6821      	ldr	r1, [r4, #0]
   b5d42:	9a02      	ldr	r2, [sp, #8]
   b5d44:	698d      	ldr	r5, [r1, #24]
   b5d46:	fa0f f989 	sxth.w	r9, r9
   b5d4a:	465b      	mov	r3, fp
   b5d4c:	4649      	mov	r1, r9
   b5d4e:	4620      	mov	r0, r4
   b5d50:	47a8      	blx	r5
        writePixel(x0 + x, y0 - y, color);
   b5d52:	b2bb      	uxth	r3, r7
   b5d54:	9302      	str	r3, [sp, #8]
   b5d56:	6821      	ldr	r1, [r4, #0]
   b5d58:	9b00      	ldr	r3, [sp, #0]
   b5d5a:	9a02      	ldr	r2, [sp, #8]
   b5d5c:	1a9a      	subs	r2, r3, r2
   b5d5e:	698b      	ldr	r3, [r1, #24]
   b5d60:	b212      	sxth	r2, r2
   b5d62:	461d      	mov	r5, r3
   b5d64:	9205      	str	r2, [sp, #20]
   b5d66:	465b      	mov	r3, fp
   b5d68:	4651      	mov	r1, sl
   b5d6a:	4620      	mov	r0, r4
   b5d6c:	47a8      	blx	r5
        writePixel(x0 - x, y0 - y, color);
   b5d6e:	6821      	ldr	r1, [r4, #0]
   b5d70:	9a05      	ldr	r2, [sp, #20]
   b5d72:	f8d1 a018 	ldr.w	sl, [r1, #24]
   b5d76:	465b      	mov	r3, fp
   b5d78:	4649      	mov	r1, r9
   b5d7a:	4620      	mov	r0, r4
   b5d7c:	47d0      	blx	sl
        writePixel(x0 + y, y0 + x, color);
   b5d7e:	9b02      	ldr	r3, [sp, #8]
   b5d80:	6821      	ldr	r1, [r4, #0]
   b5d82:	eb08 0903 	add.w	r9, r8, r3
   b5d86:	9b00      	ldr	r3, [sp, #0]
   b5d88:	f8d1 a018 	ldr.w	sl, [r1, #24]
   b5d8c:	199a      	adds	r2, r3, r6
   b5d8e:	fa0f f989 	sxth.w	r9, r9
   b5d92:	b212      	sxth	r2, r2
   b5d94:	465b      	mov	r3, fp
   b5d96:	9205      	str	r2, [sp, #20]
   b5d98:	4649      	mov	r1, r9
   b5d9a:	4620      	mov	r0, r4
   b5d9c:	47d0      	blx	sl
        writePixel(x0 - y, y0 + x, color);
   b5d9e:	9b02      	ldr	r3, [sp, #8]
   b5da0:	6821      	ldr	r1, [r4, #0]
   b5da2:	9a05      	ldr	r2, [sp, #20]
   b5da4:	f8d1 a018 	ldr.w	sl, [r1, #24]
   b5da8:	eba8 0503 	sub.w	r5, r8, r3
   b5dac:	b22d      	sxth	r5, r5
   b5dae:	465b      	mov	r3, fp
   b5db0:	4629      	mov	r1, r5
   b5db2:	4620      	mov	r0, r4
   b5db4:	47d0      	blx	sl
        writePixel(x0 + y, y0 - x, color);
   b5db6:	9b00      	ldr	r3, [sp, #0]
   b5db8:	6821      	ldr	r1, [r4, #0]
   b5dba:	1b9a      	subs	r2, r3, r6
   b5dbc:	b212      	sxth	r2, r2
   b5dbe:	698e      	ldr	r6, [r1, #24]
   b5dc0:	9202      	str	r2, [sp, #8]
   b5dc2:	465b      	mov	r3, fp
   b5dc4:	4649      	mov	r1, r9
   b5dc6:	4620      	mov	r0, r4
   b5dc8:	47b0      	blx	r6
        writePixel(x0 - y, y0 - x, color);
   b5dca:	6821      	ldr	r1, [r4, #0]
   b5dcc:	9a02      	ldr	r2, [sp, #8]
   b5dce:	698e      	ldr	r6, [r1, #24]
   b5dd0:	465b      	mov	r3, fp
   b5dd2:	4629      	mov	r1, r5
   b5dd4:	4620      	mov	r0, r4
   b5dd6:	47b0      	blx	r6
    while (x<y) {
   b5dd8:	e785      	b.n	b5ce6 <_ZN12Adafruit_GFX10drawCircleEssst+0x86>
    endWrite();
   b5dda:	6823      	ldr	r3, [r4, #0]
   b5ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5dde:	4620      	mov	r0, r4
}
   b5de0:	b007      	add	sp, #28
   b5de2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b5de6:	4718      	bx	r3

000b5de8 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>:
  uint8_t corners, int16_t delta, uint16_t color) {
   b5de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5dec:	b08b      	sub	sp, #44	; 0x2c
   b5dee:	461c      	mov	r4, r3
   b5df0:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   b5df4:	9304      	str	r3, [sp, #16]
    int16_t f     = 1 - r;
   b5df6:	b2a3      	uxth	r3, r4
   b5df8:	f1c3 0501 	rsb	r5, r3, #1
    int16_t ddF_y = -2 * r;
   b5dfc:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
   b5e00:	005b      	lsls	r3, r3, #1
   b5e02:	b21b      	sxth	r3, r3
   b5e04:	9307      	str	r3, [sp, #28]
    delta++; // Avoid some +1's in the loop
   b5e06:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
   b5e0a:	3301      	adds	r3, #1
   b5e0c:	b29b      	uxth	r3, r3
   b5e0e:	9305      	str	r3, [sp, #20]
   b5e10:	b293      	uxth	r3, r2
   b5e12:	9306      	str	r3, [sp, #24]
  uint8_t corners, int16_t delta, uint16_t color) {
   b5e14:	4688      	mov	r8, r1
    delta++; // Avoid some +1's in the loop
   b5e16:	9b05      	ldr	r3, [sp, #20]
  uint8_t corners, int16_t delta, uint16_t color) {
   b5e18:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
    delta++; // Avoid some +1's in the loop
   b5e1c:	9303      	str	r3, [sp, #12]
    int16_t x     = 0;
   b5e1e:	2300      	movs	r3, #0
   b5e20:	9302      	str	r3, [sp, #8]
            if(corners & 1) writeFastVLine(x0+x, y0-y, 2*y+delta, color);
   b5e22:	f001 0301 	and.w	r3, r1, #1
   b5e26:	9308      	str	r3, [sp, #32]
    delta++; // Avoid some +1's in the loop
   b5e28:	f8dd a018 	ldr.w	sl, [sp, #24]
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
   b5e2c:	f001 0302 	and.w	r3, r1, #2
  uint8_t corners, int16_t delta, uint16_t color) {
   b5e30:	4683      	mov	fp, r0
    int16_t f     = 1 - r;
   b5e32:	b22d      	sxth	r5, r5
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
   b5e34:	9309      	str	r3, [sp, #36]	; 0x24
    while(x < y) {
   b5e36:	9b02      	ldr	r3, [sp, #8]
   b5e38:	42a3      	cmp	r3, r4
   b5e3a:	da6f      	bge.n	b5f1c <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x134>
        if (f >= 0) {
   b5e3c:	2d00      	cmp	r5, #0
   b5e3e:	db6b      	blt.n	b5f18 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x130>
            ddF_y += 2;
   b5e40:	9b07      	ldr	r3, [sp, #28]
   b5e42:	3302      	adds	r3, #2
            y--;
   b5e44:	1e66      	subs	r6, r4, #1
            ddF_y += 2;
   b5e46:	b21a      	sxth	r2, r3
            f     += ddF_y;
   b5e48:	fa15 f583 	uxtah	r5, r5, r3
            y--;
   b5e4c:	b236      	sxth	r6, r6
            ddF_y += 2;
   b5e4e:	9207      	str	r2, [sp, #28]
            f     += ddF_y;
   b5e50:	b22d      	sxth	r5, r5
        x++;
   b5e52:	9f02      	ldr	r7, [sp, #8]
   b5e54:	3701      	adds	r7, #1
   b5e56:	fa1f f987 	uxth.w	r9, r7
   b5e5a:	b23b      	sxth	r3, r7
        ddF_x += 2;
   b5e5c:	eb05 0549 	add.w	r5, r5, r9, lsl #1
        f     += ddF_x;
   b5e60:	3501      	adds	r5, #1
        if(x < (y + 1)) {
   b5e62:	429e      	cmp	r6, r3
   b5e64:	9302      	str	r3, [sp, #8]
        f     += ddF_x;
   b5e66:	b22d      	sxth	r5, r5
        if(x < (y + 1)) {
   b5e68:	db29      	blt.n	b5ebe <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd6>
            if(corners & 1) writeFastVLine(x0+x, y0-y, 2*y+delta, color);
   b5e6a:	9b08      	ldr	r3, [sp, #32]
   b5e6c:	b193      	cbz	r3, b5e94 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xac>
   b5e6e:	9804      	ldr	r0, [sp, #16]
   b5e70:	9000      	str	r0, [sp, #0]
   b5e72:	f8db 0000 	ldr.w	r0, [fp]
   b5e76:	9906      	ldr	r1, [sp, #24]
   b5e78:	9b05      	ldr	r3, [sp, #20]
   b5e7a:	6a00      	ldr	r0, [r0, #32]
   b5e7c:	b2b2      	uxth	r2, r6
   b5e7e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   b5e82:	1a8a      	subs	r2, r1, r2
   b5e84:	eb09 0108 	add.w	r1, r9, r8
   b5e88:	4607      	mov	r7, r0
   b5e8a:	b21b      	sxth	r3, r3
   b5e8c:	b212      	sxth	r2, r2
   b5e8e:	b209      	sxth	r1, r1
   b5e90:	4658      	mov	r0, fp
   b5e92:	47b8      	blx	r7
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
   b5e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5e96:	b193      	cbz	r3, b5ebe <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd6>
   b5e98:	9906      	ldr	r1, [sp, #24]
   b5e9a:	9804      	ldr	r0, [sp, #16]
   b5e9c:	9b05      	ldr	r3, [sp, #20]
   b5e9e:	9000      	str	r0, [sp, #0]
   b5ea0:	b2b2      	uxth	r2, r6
   b5ea2:	f8db 0000 	ldr.w	r0, [fp]
   b5ea6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   b5eaa:	1a8a      	subs	r2, r1, r2
   b5eac:	eba8 0109 	sub.w	r1, r8, r9
   b5eb0:	b21b      	sxth	r3, r3
   b5eb2:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b5eb6:	b212      	sxth	r2, r2
   b5eb8:	b209      	sxth	r1, r1
   b5eba:	4658      	mov	r0, fp
   b5ebc:	47c8      	blx	r9
        if(y != py) {
   b5ebe:	42b4      	cmp	r4, r6
   b5ec0:	d020      	beq.n	b5f04 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x11c>
            if(corners & 1) writeFastVLine(x0+py, y0-px, 2*px+delta, color);
   b5ec2:	9b08      	ldr	r3, [sp, #32]
   b5ec4:	b173      	cbz	r3, b5ee4 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xfc>
   b5ec6:	f8db 3000 	ldr.w	r3, [fp]
   b5eca:	9a04      	ldr	r2, [sp, #16]
   b5ecc:	9200      	str	r2, [sp, #0]
   b5ece:	eb08 0104 	add.w	r1, r8, r4
   b5ed2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b5ed6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   b5eda:	fa0f f28a 	sxth.w	r2, sl
   b5ede:	b209      	sxth	r1, r1
   b5ee0:	4658      	mov	r0, fp
   b5ee2:	47c8      	blx	r9
            if(corners & 2) writeFastVLine(x0-py, y0-px, 2*px+delta, color);
   b5ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5ee6:	b16b      	cbz	r3, b5f04 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x11c>
   b5ee8:	f8db 3000 	ldr.w	r3, [fp]
   b5eec:	9a04      	ldr	r2, [sp, #16]
   b5eee:	9200      	str	r2, [sp, #0]
   b5ef0:	eba8 0104 	sub.w	r1, r8, r4
   b5ef4:	fa0f f28a 	sxth.w	r2, sl
   b5ef8:	6a1c      	ldr	r4, [r3, #32]
   b5efa:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   b5efe:	b209      	sxth	r1, r1
   b5f00:	4658      	mov	r0, fp
   b5f02:	47a0      	blx	r4
   b5f04:	f10a 33ff 	add.w	r3, sl, #4294967295
   b5f08:	fa1f fa83 	uxth.w	sl, r3
   b5f0c:	9b03      	ldr	r3, [sp, #12]
   b5f0e:	3302      	adds	r3, #2
   b5f10:	b29b      	uxth	r3, r3
   b5f12:	9303      	str	r3, [sp, #12]
  uint8_t corners, int16_t delta, uint16_t color) {
   b5f14:	4634      	mov	r4, r6
   b5f16:	e78e      	b.n	b5e36 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x4e>
   b5f18:	4626      	mov	r6, r4
   b5f1a:	e79a      	b.n	b5e52 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x6a>
}
   b5f1c:	b00b      	add	sp, #44	; 0x2c
   b5f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5f22 <_ZN12Adafruit_GFX10fillCircleEssst>:
        uint16_t color) {
   b5f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5f26:	461e      	mov	r6, r3
   b5f28:	b086      	sub	sp, #24
    startWrite();
   b5f2a:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5f2c:	9105      	str	r1, [sp, #20]
   b5f2e:	4604      	mov	r4, r0
    startWrite();
   b5f30:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5f32:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
   b5f36:	4615      	mov	r5, r2
    startWrite();
   b5f38:	4798      	blx	r3
    writeFastVLine(x0, y0-r, 2*r+1, color);
   b5f3a:	b2b2      	uxth	r2, r6
   b5f3c:	6820      	ldr	r0, [r4, #0]
   b5f3e:	9700      	str	r7, [sp, #0]
   b5f40:	0053      	lsls	r3, r2, #1
   b5f42:	3301      	adds	r3, #1
   b5f44:	1aaa      	subs	r2, r5, r2
   b5f46:	f8d0 8020 	ldr.w	r8, [r0, #32]
   b5f4a:	9905      	ldr	r1, [sp, #20]
   b5f4c:	4620      	mov	r0, r4
   b5f4e:	b21b      	sxth	r3, r3
   b5f50:	b212      	sxth	r2, r2
   b5f52:	47c0      	blx	r8
    fillCircleHelper(x0, y0, r, 3, 0, color);
   b5f54:	2303      	movs	r3, #3
   b5f56:	2200      	movs	r2, #0
   b5f58:	e9cd 3200 	strd	r3, r2, [sp]
   b5f5c:	4620      	mov	r0, r4
   b5f5e:	4633      	mov	r3, r6
   b5f60:	9905      	ldr	r1, [sp, #20]
   b5f62:	9702      	str	r7, [sp, #8]
   b5f64:	462a      	mov	r2, r5
   b5f66:	f7ff ff3f 	bl	b5de8 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
    endWrite();
   b5f6a:	6823      	ldr	r3, [r4, #0]
   b5f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5f6e:	4620      	mov	r0, r4
}
   b5f70:	b006      	add	sp, #24
   b5f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5f76:	4718      	bx	r3

000b5f78 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5f7c:	b089      	sub	sp, #36	; 0x24
   b5f7e:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b5f82:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5f84:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b5f88:	9304      	str	r3, [sp, #16]
   b5f8a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b5f8e:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5f90:	9305      	str	r3, [sp, #20]
   b5f92:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b5f96:	4604      	mov	r4, r0
    startWrite();
   b5f98:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5f9a:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b5f9e:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5fa2:	bf48      	it	mi
   b5fa4:	f108 020e 	addmi.w	r2, r8, #14
   b5fa8:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b5fac:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b5fae:	4635      	mov	r5, r6
   b5fb0:	9b03      	ldr	r3, [sp, #12]
   b5fb2:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b5fb4:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b5fb8:	189a      	adds	r2, r3, r2
   b5fba:	9b05      	ldr	r3, [sp, #20]
   b5fbc:	428b      	cmp	r3, r1
   b5fbe:	b212      	sxth	r2, r2
   b5fc0:	dd27      	ble.n	b6012 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5fc2:	9b04      	ldr	r3, [sp, #16]
   b5fc4:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b5fc6:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5fca:	9306      	str	r3, [sp, #24]
   b5fcc:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5fd0:	4580      	cmp	r8, r0
   b5fd2:	fa1f f189 	uxth.w	r1, r9
   b5fd6:	dd17      	ble.n	b6008 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5fd8:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5fda:	bf05      	ittet	eq
   b5fdc:	9b06      	ldreq	r3, [sp, #24]
   b5fde:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b5fe0:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5fe2:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5fe4:	bf18      	it	ne
   b5fe6:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5fe8:	062b      	lsls	r3, r5, #24
   b5fea:	d50a      	bpl.n	b6002 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b5fec:	9b02      	ldr	r3, [sp, #8]
   b5fee:	6820      	ldr	r0, [r4, #0]
   b5ff0:	9207      	str	r2, [sp, #28]
   b5ff2:	4419      	add	r1, r3
   b5ff4:	6983      	ldr	r3, [r0, #24]
   b5ff6:	b209      	sxth	r1, r1
   b5ff8:	461f      	mov	r7, r3
   b5ffa:	4620      	mov	r0, r4
   b5ffc:	4653      	mov	r3, sl
   b5ffe:	47b8      	blx	r7
   b6000:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b6002:	f109 0901 	add.w	r9, r9, #1
   b6006:	e7e1      	b.n	b5fcc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b6008:	9b01      	ldr	r3, [sp, #4]
   b600a:	3301      	adds	r3, #1
   b600c:	9301      	str	r3, [sp, #4]
   b600e:	445e      	add	r6, fp
   b6010:	e7ce      	b.n	b5fb0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b6012:	6823      	ldr	r3, [r4, #0]
   b6014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6016:	4620      	mov	r0, r4
}
   b6018:	b009      	add	sp, #36	; 0x24
   b601a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b601e:	4718      	bx	r3

000b6020 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b6020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6024:	ed2d 8b02 	vpush	{d8}
   b6028:	b091      	sub	sp, #68	; 0x44
   b602a:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b602c:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b602e:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b6032:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b6036:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b603a:	9103      	str	r1, [sp, #12]
   b603c:	461f      	mov	r7, r3
   b603e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b6042:	9304      	str	r3, [sp, #16]
   b6044:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b6046:	2a00      	cmp	r2, #0
   b6048:	f040 80c5 	bne.w	b61d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b604c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b6050:	428b      	cmp	r3, r1
   b6052:	f340 814c 	ble.w	b62ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b6056:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b605a:	42b3      	cmp	r3, r6
   b605c:	f340 8147 	ble.w	b62ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b6060:	2306      	movs	r3, #6
   b6062:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b6066:	2b00      	cmp	r3, #0
   b6068:	f340 8141 	ble.w	b62ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b606c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b6070:	2b00      	cmp	r3, #0
   b6072:	f340 813c 	ble.w	b62ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b6076:	7f03      	ldrb	r3, [r0, #28]
   b6078:	b91b      	cbnz	r3, b6082 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b607a:	2faf      	cmp	r7, #175	; 0xaf
   b607c:	bf84      	itt	hi
   b607e:	3701      	addhi	r7, #1
   b6080:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b6082:	f8db 3000 	ldr.w	r3, [fp]
   b6086:	4658      	mov	r0, fp
   b6088:	695b      	ldr	r3, [r3, #20]
   b608a:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b608c:	2205      	movs	r2, #5
   b608e:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b6090:	2200      	movs	r2, #0
   b6092:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b6094:	4a98      	ldr	r2, [pc, #608]	; (b62f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b6096:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b609a:	18d3      	adds	r3, r2, r3
   b609c:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b609e:	b2b3      	uxth	r3, r6
   b60a0:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b60a2:	9a05      	ldr	r2, [sp, #20]
   b60a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b60a6:	5c9b      	ldrb	r3, [r3, r2]
   b60a8:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b60aa:	b2ab      	uxth	r3, r5
   b60ac:	930b      	str	r3, [sp, #44]	; 0x2c
   b60ae:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b60b2:	9308      	str	r3, [sp, #32]
   b60b4:	9b03      	ldr	r3, [sp, #12]
   b60b6:	fb02 f905 	mul.w	r9, r2, r5
   b60ba:	fa19 f983 	uxtah	r9, r9, r3
   b60be:	fa0f f389 	sxth.w	r3, r9
   b60c2:	ee08 3a10 	vmov	s16, r3
   b60c6:	2308      	movs	r3, #8
   b60c8:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b60ca:	9b03      	ldr	r3, [sp, #12]
   b60cc:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b60d0:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b60d4:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b60d8:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b60da:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b60de:	07d2      	lsls	r2, r2, #31
   b60e0:	d552      	bpl.n	b6188 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b60e2:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b60e4:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b60e8:	d13e      	bne.n	b6168 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b60ea:	2c01      	cmp	r4, #1
   b60ec:	d13c      	bne.n	b6168 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b60ee:	699b      	ldr	r3, [r3, #24]
   b60f0:	9906      	ldr	r1, [sp, #24]
   b60f2:	461f      	mov	r7, r3
   b60f4:	9b04      	ldr	r3, [sp, #16]
   b60f6:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b60f8:	b212      	sxth	r2, r2
   b60fa:	4651      	mov	r1, sl
   b60fc:	4658      	mov	r0, fp
   b60fe:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b6100:	f109 0301 	add.w	r3, r9, #1
   b6104:	fa4f f983 	sxtb.w	r9, r3
   b6108:	9b07      	ldr	r3, [sp, #28]
   b610a:	085b      	lsrs	r3, r3, #1
   b610c:	9307      	str	r3, [sp, #28]
   b610e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6110:	3b01      	subs	r3, #1
   b6112:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b6116:	930a      	str	r3, [sp, #40]	; 0x28
   b6118:	d1de      	bne.n	b60d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b611a:	9f05      	ldr	r7, [sp, #20]
   b611c:	3701      	adds	r7, #1
   b611e:	b27b      	sxtb	r3, r7
   b6120:	9305      	str	r3, [sp, #20]
   b6122:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6124:	3b01      	subs	r3, #1
   b6126:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b612a:	9309      	str	r3, [sp, #36]	; 0x24
   b612c:	d1b9      	bne.n	b60a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b612e:	9b04      	ldr	r3, [sp, #16]
   b6130:	4543      	cmp	r3, r8
   b6132:	d00f      	beq.n	b6154 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b6134:	2d01      	cmp	r5, #1
   b6136:	f8db 3000 	ldr.w	r3, [fp]
   b613a:	d13b      	bne.n	b61b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b613c:	2c01      	cmp	r4, #1
   b613e:	d139      	bne.n	b61b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b6140:	9908      	ldr	r1, [sp, #32]
   b6142:	f8cd 8000 	str.w	r8, [sp]
   b6146:	3105      	adds	r1, #5
   b6148:	6a1c      	ldr	r4, [r3, #32]
   b614a:	4632      	mov	r2, r6
   b614c:	2308      	movs	r3, #8
   b614e:	b209      	sxth	r1, r1
   b6150:	4658      	mov	r0, fp
   b6152:	47a0      	blx	r4
        endWrite();
   b6154:	f8db 3000 	ldr.w	r3, [fp]
   b6158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b615a:	4658      	mov	r0, fp
}
   b615c:	b011      	add	sp, #68	; 0x44
   b615e:	ecbd 8b02 	vpop	{d8}
   b6162:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b6166:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b6168:	9906      	ldr	r1, [sp, #24]
   b616a:	fb14 f202 	smulbb	r2, r4, r2
   b616e:	440a      	add	r2, r1
   b6170:	9904      	ldr	r1, [sp, #16]
   b6172:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6174:	9400      	str	r4, [sp, #0]
   b6176:	69db      	ldr	r3, [r3, #28]
   b6178:	ee18 1a10 	vmov	r1, s16
   b617c:	461f      	mov	r7, r3
   b617e:	b212      	sxth	r2, r2
   b6180:	462b      	mov	r3, r5
   b6182:	4658      	mov	r0, fp
   b6184:	47b8      	blx	r7
   b6186:	e7bb      	b.n	b6100 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b6188:	9a04      	ldr	r2, [sp, #16]
   b618a:	4542      	cmp	r2, r8
   b618c:	d0b8      	beq.n	b6100 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b618e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b6190:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b6194:	d107      	bne.n	b61a6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b6196:	2c01      	cmp	r4, #1
   b6198:	d105      	bne.n	b61a6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b619a:	699b      	ldr	r3, [r3, #24]
   b619c:	9906      	ldr	r1, [sp, #24]
   b619e:	461f      	mov	r7, r3
   b61a0:	440a      	add	r2, r1
   b61a2:	4643      	mov	r3, r8
   b61a4:	e7a8      	b.n	b60f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b61a6:	9906      	ldr	r1, [sp, #24]
   b61a8:	f8cd 8004 	str.w	r8, [sp, #4]
   b61ac:	fb14 f202 	smulbb	r2, r4, r2
   b61b0:	440a      	add	r2, r1
   b61b2:	e7df      	b.n	b6174 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b61b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b61b6:	f8cd 8004 	str.w	r8, [sp, #4]
   b61ba:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b61be:	9a08      	ldr	r2, [sp, #32]
   b61c0:	00e4      	lsls	r4, r4, #3
   b61c2:	440a      	add	r2, r1
   b61c4:	4611      	mov	r1, r2
   b61c6:	9400      	str	r4, [sp, #0]
   b61c8:	69dc      	ldr	r4, [r3, #28]
   b61ca:	4632      	mov	r2, r6
   b61cc:	462b      	mov	r3, r5
   b61ce:	b209      	sxth	r1, r1
   b61d0:	4658      	mov	r0, fp
   b61d2:	47a0      	blx	r4
        endWrite();
   b61d4:	e7be      	b.n	b6154 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b61d6:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b61d8:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b61da:	6812      	ldr	r2, [r2, #0]
   b61dc:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b61de:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b61e0:	b2ff      	uxtb	r7, r7
   b61e2:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b61e6:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b61ea:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b61ec:	789a      	ldrb	r2, [r3, #2]
   b61ee:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b61f0:	78da      	ldrb	r2, [r3, #3]
   b61f2:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b61f4:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b61f6:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b61fa:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b61fe:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b6200:	d801      	bhi.n	b6206 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b6202:	2c01      	cmp	r4, #1
   b6204:	d957      	bls.n	b62b6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b6206:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b620a:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b620c:	fa0f f38a 	sxth.w	r3, sl
   b6210:	9307      	str	r3, [sp, #28]
        startWrite();
   b6212:	f8db 3000 	ldr.w	r3, [fp]
   b6216:	4658      	mov	r0, fp
   b6218:	695b      	ldr	r3, [r3, #20]
   b621a:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b621c:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b621e:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6222:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6224:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b6228:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b622a:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b622c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b622e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b6230:	429f      	cmp	r7, r3
   b6232:	d28f      	bcs.n	b6154 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6234:	9b07      	ldr	r3, [sp, #28]
   b6236:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b6238:	443b      	add	r3, r7
   b623a:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b623e:	2200      	movs	r2, #0
   b6240:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6242:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6244:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6246:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b624a:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b624e:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6252:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b6254:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b6256:	9905      	ldr	r1, [sp, #20]
   b6258:	4291      	cmp	r1, r2
   b625a:	d241      	bcs.n	b62e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b625c:	1c5a      	adds	r2, r3, #1
   b625e:	b2d2      	uxtb	r2, r2
   b6260:	075b      	lsls	r3, r3, #29
   b6262:	920d      	str	r2, [sp, #52]	; 0x34
   b6264:	d107      	bne.n	b6276 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b6266:	9b06      	ldr	r3, [sp, #24]
   b6268:	9906      	ldr	r1, [sp, #24]
   b626a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b626c:	3301      	adds	r3, #1
   b626e:	b29b      	uxth	r3, r3
   b6270:	f812 9001 	ldrb.w	r9, [r2, r1]
   b6274:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b6276:	f019 0f80 	tst.w	r9, #128	; 0x80
   b627a:	d012      	beq.n	b62a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b627c:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b627e:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6282:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b6286:	d11a      	bne.n	b62be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b6288:	2c01      	cmp	r4, #1
   b628a:	d118      	bne.n	b62be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b628c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b628e:	699b      	ldr	r3, [r3, #24]
   b6290:	4411      	add	r1, r2
   b6292:	9a05      	ldr	r2, [sp, #20]
   b6294:	4411      	add	r1, r2
   b6296:	461e      	mov	r6, r3
   b6298:	4652      	mov	r2, sl
   b629a:	9b04      	ldr	r3, [sp, #16]
   b629c:	b209      	sxth	r1, r1
   b629e:	4658      	mov	r0, fp
   b62a0:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b62a2:	9e05      	ldr	r6, [sp, #20]
   b62a4:	3601      	adds	r6, #1
   b62a6:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b62a8:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b62ac:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b62ae:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b62b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b62b4:	e7ce      	b.n	b6254 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b62b6:	2300      	movs	r3, #0
   b62b8:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b62bc:	e7a9      	b.n	b6212 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b62be:	9805      	ldr	r0, [sp, #20]
   b62c0:	9a08      	ldr	r2, [sp, #32]
   b62c2:	4402      	add	r2, r0
   b62c4:	fb02 1105 	mla	r1, r2, r5, r1
   b62c8:	9a04      	ldr	r2, [sp, #16]
   b62ca:	e9cd 4200 	strd	r4, r2, [sp]
   b62ce:	69db      	ldr	r3, [r3, #28]
   b62d0:	ee18 2a10 	vmov	r2, s16
   b62d4:	461e      	mov	r6, r3
   b62d6:	b209      	sxth	r1, r1
   b62d8:	462b      	mov	r3, r5
   b62da:	4658      	mov	r0, fp
   b62dc:	47b0      	blx	r6
   b62de:	e7e0      	b.n	b62a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b62e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b62e2:	3701      	adds	r7, #1
   b62e4:	4498      	add	r8, r3
   b62e6:	fa5f f888 	uxtb.w	r8, r8
   b62ea:	b2ff      	uxtb	r7, r7
   b62ec:	e79f      	b.n	b622e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b62ee:	b011      	add	sp, #68	; 0x44
   b62f0:	ecbd 8b02 	vpop	{d8}
   b62f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b62f8:	000bfd28 	.word	0x000bfd28

000b62fc <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b62fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b62fe:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b6300:	b085      	sub	sp, #20
   b6302:	4604      	mov	r4, r0
   b6304:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b6306:	2a00      	cmp	r2, #0
   b6308:	d134      	bne.n	b6374 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b630a:	290a      	cmp	r1, #10
   b630c:	d108      	bne.n	b6320 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b630e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b6310:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b6312:	7e42      	ldrb	r2, [r0, #25]
   b6314:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b6318:	8263      	strh	r3, [r4, #18]
}
   b631a:	2001      	movs	r0, #1
   b631c:	b005      	add	sp, #20
   b631e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b6320:	290d      	cmp	r1, #13
   b6322:	d0fa      	beq.n	b631a <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b6324:	7ee1      	ldrb	r1, [r4, #27]
   b6326:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b6328:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b632a:	b171      	cbz	r1, b634a <_ZN12Adafruit_GFX5writeEh+0x4e>
   b632c:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b6330:	2106      	movs	r1, #6
   b6332:	fb11 6100 	smlabb	r1, r1, r0, r6
   b6336:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b633a:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b633c:	bfc1      	itttt	gt
   b633e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b6342:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b6344:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b6348:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b634a:	8ae2      	ldrh	r2, [r4, #22]
   b634c:	9201      	str	r2, [sp, #4]
   b634e:	8aa2      	ldrh	r2, [r4, #20]
   b6350:	9200      	str	r2, [sp, #0]
   b6352:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b6356:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b635a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b635e:	4620      	mov	r0, r4
   b6360:	f7ff fe5e 	bl	b6020 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b6364:	7e23      	ldrb	r3, [r4, #24]
   b6366:	8a22      	ldrh	r2, [r4, #16]
   b6368:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b636c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b6370:	8223      	strh	r3, [r4, #16]
   b6372:	e7d2      	b.n	b631a <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b6374:	290a      	cmp	r1, #10
   b6376:	d107      	bne.n	b6388 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b6378:	2300      	movs	r3, #0
   b637a:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b637c:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b637e:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b6380:	8a43      	ldrh	r3, [r0, #18]
   b6382:	fb01 3302 	mla	r3, r1, r2, r3
   b6386:	e7c7      	b.n	b6318 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b6388:	290d      	cmp	r1, #13
   b638a:	d0c6      	beq.n	b631a <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b638c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b638e:	42a9      	cmp	r1, r5
   b6390:	d3c3      	bcc.n	b631a <_ZN12Adafruit_GFX5writeEh+0x1e>
   b6392:	7a51      	ldrb	r1, [r2, #9]
   b6394:	4299      	cmp	r1, r3
   b6396:	d3c0      	bcc.n	b631a <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b6398:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b639a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b639c:	b2ed      	uxtb	r5, r5
   b639e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b63a2:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b63a4:	b328      	cbz	r0, b63f2 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b63a6:	78e9      	ldrb	r1, [r5, #3]
   b63a8:	b319      	cbz	r1, b63f2 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b63aa:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b63ac:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b63ae:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b63b0:	b191      	cbz	r1, b63d8 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b63b2:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b63b6:	4408      	add	r0, r1
   b63b8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b63bc:	fb06 1100 	mla	r1, r6, r0, r1
   b63c0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b63c4:	4281      	cmp	r1, r0
   b63c6:	dd07      	ble.n	b63d8 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b63c8:	2000      	movs	r0, #0
   b63ca:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b63cc:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b63d0:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b63d2:	fb02 1207 	mla	r2, r2, r7, r1
   b63d6:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b63d8:	8ae2      	ldrh	r2, [r4, #22]
   b63da:	9201      	str	r2, [sp, #4]
   b63dc:	8aa2      	ldrh	r2, [r4, #20]
   b63de:	9200      	str	r2, [sp, #0]
   b63e0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b63e4:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b63e8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b63ec:	4620      	mov	r0, r4
   b63ee:	f7ff fe17 	bl	b6020 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b63f2:	7929      	ldrb	r1, [r5, #4]
   b63f4:	7e22      	ldrb	r2, [r4, #24]
   b63f6:	8a23      	ldrh	r3, [r4, #16]
   b63f8:	fb01 3302 	mla	r3, r1, r2, r3
   b63fc:	e7b8      	b.n	b6370 <_ZN12Adafruit_GFX5writeEh+0x74>

000b63fe <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b63fe:	2901      	cmp	r1, #1
   b6400:	bf38      	it	cc
   b6402:	2101      	movcc	r1, #1
   b6404:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b6406:	7641      	strb	r1, [r0, #25]
}
   b6408:	4770      	bx	lr
	...

000b640c <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b640c:	b510      	push	{r4, lr}
   b640e:	4b06      	ldr	r3, [pc, #24]	; (b6428 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b6410:	6003      	str	r3, [r0, #0]
   b6412:	4604      	mov	r4, r0
	if (mutex) {
   b6414:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b6416:	b108      	cbz	r0, b641c <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b6418:	f002 f9d4 	bl	b87c4 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b641c:	4620      	mov	r0, r4
   b641e:	f001 fc03 	bl	b7c28 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b6422:	4620      	mov	r0, r4
   b6424:	bd10      	pop	{r4, pc}
   b6426:	bf00      	nop
   b6428:	000c0288 	.word	0x000c0288

000b642c <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b642c:	b510      	push	{r4, lr}
   b642e:	4604      	mov	r4, r0
}
   b6430:	f7ff ffec 	bl	b640c <_ZN16OledWingAdafruitD1Ev>
   b6434:	4620      	mov	r0, r4
   b6436:	2170      	movs	r1, #112	; 0x70
   b6438:	f7fd fe31 	bl	b409e <_ZdlPvj>
   b643c:	4620      	mov	r0, r4
   b643e:	bd10      	pop	{r4, pc}

000b6440 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b6440:	b530      	push	{r4, r5, lr}
   b6442:	b085      	sub	sp, #20
   b6444:	4604      	mov	r4, r0
   b6446:	460d      	mov	r5, r1
   b6448:	f006 fa1c 	bl	bc884 <_Z19__fetch_global_Wirev>
   b644c:	4a10      	ldr	r2, [pc, #64]	; (b6490 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b644e:	4911      	ldr	r1, [pc, #68]	; (b6494 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b6450:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b6454:	f04f 32ff 	mov.w	r2, #4294967295
   b6458:	2180      	movs	r1, #128	; 0x80
   b645a:	4603      	mov	r3, r0
   b645c:	9200      	str	r2, [sp, #0]
   b645e:	4620      	mov	r0, r4
   b6460:	2220      	movs	r2, #32
   b6462:	f001 fc59 	bl	b7d18 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b6466:	4b0c      	ldr	r3, [pc, #48]	; (b6498 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b6468:	6023      	str	r3, [r4, #0]
   b646a:	2300      	movs	r3, #0
   b646c:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b6470:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6474:	f000 f83b 	bl	b64ee <_ZN8DebounceC1Ev>
   b6478:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b647c:	f000 f837 	bl	b64ee <_ZN8DebounceC1Ev>
   b6480:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b6484:	f000 f833 	bl	b64ee <_ZN8DebounceC1Ev>
}
   b6488:	4620      	mov	r0, r4
   b648a:	b005      	add	sp, #20
   b648c:	bd30      	pop	{r4, r5, pc}
   b648e:	bf00      	nop
   b6490:	00061a80 	.word	0x00061a80
   b6494:	000186a0 	.word	0x000186a0
   b6498:	000c0288 	.word	0x000c0288

000b649c <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b649c:	b513      	push	{r0, r1, r4, lr}
   b649e:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b64a0:	3050      	adds	r0, #80	; 0x50
   b64a2:	f002 f987 	bl	b87b4 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b64a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b64a8:	07d9      	lsls	r1, r3, #31
   b64aa:	d505      	bpl.n	b64b8 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b64ac:	2202      	movs	r2, #2
   b64ae:	2104      	movs	r1, #4
   b64b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b64b4:	f000 f82f 	bl	b6516 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b64b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b64ba:	079a      	lsls	r2, r3, #30
   b64bc:	d505      	bpl.n	b64ca <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b64be:	2200      	movs	r2, #0
   b64c0:	2103      	movs	r1, #3
   b64c2:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b64c6:	f000 f826 	bl	b6516 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b64ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b64cc:	075b      	lsls	r3, r3, #29
   b64ce:	d505      	bpl.n	b64dc <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b64d0:	2202      	movs	r2, #2
   b64d2:	4611      	mov	r1, r2
   b64d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b64d8:	f000 f81d 	bl	b6516 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b64dc:	2301      	movs	r3, #1
   b64de:	9300      	str	r3, [sp, #0]
   b64e0:	223c      	movs	r2, #60	; 0x3c
   b64e2:	2102      	movs	r1, #2
   b64e4:	4620      	mov	r0, r4
   b64e6:	f001 fd1f 	bl	b7f28 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b64ea:	b002      	add	sp, #8
   b64ec:	bd10      	pop	{r4, pc}

000b64ee <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b64ee:	2100      	movs	r1, #0
   b64f0:	220a      	movs	r2, #10
   b64f2:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b64f6:	4770      	bx	lr

000b64f8 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b64f8:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b64fa:	b510      	push	{r4, lr}
   b64fc:	4604      	mov	r4, r0
    this->pin = pin;
   b64fe:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b6500:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b6502:	b288      	uxth	r0, r1
   b6504:	f006 f93c 	bl	bc780 <digitalRead>
   b6508:	b108      	cbz	r0, b650e <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b650a:	2303      	movs	r3, #3
   b650c:	71a3      	strb	r3, [r4, #6]
   b650e:	f002 f85d 	bl	b85cc <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b6512:	6020      	str	r0, [r4, #0]
#endif
}
   b6514:	bd10      	pop	{r4, pc}

000b6516 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b6516:	b538      	push	{r3, r4, r5, lr}
   b6518:	460c      	mov	r4, r1
   b651a:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b651c:	4611      	mov	r1, r2
   b651e:	b2a0      	uxth	r0, r4
   b6520:	f006 f904 	bl	bc72c <pinMode>
  
  this->attach(pin);
   b6524:	4621      	mov	r1, r4
   b6526:	4628      	mov	r0, r5
}
   b6528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b652c:	f7ff bfe4 	b.w	b64f8 <_ZN8Debounce6attachEi>

000b6530 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b6530:	2904      	cmp	r1, #4
   b6532:	d804      	bhi.n	b653e <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b6534:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b6538:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b653c:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b653e:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6540:	bf9b      	ittet	ls
   b6542:	f101 31ff 	addls.w	r1, r1, #4294967295
   b6546:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b654a:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b654c:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b654e:	bf84      	itt	hi
   b6550:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b6554:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b6556:	4770      	bx	lr

000b6558 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b6558:	b510      	push	{r4, lr}
   b655a:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b655c:	3024      	adds	r0, #36	; 0x24
   b655e:	f000 feed 	bl	b733c <_ZN8FatCache4syncEv>
   b6562:	b128      	cbz	r0, b6570 <_ZN9FatVolume9cacheSyncEv+0x18>
   b6564:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b6568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b656c:	f000 bee6 	b.w	b733c <_ZN8FatCache4syncEv>
  }
   b6570:	bd10      	pop	{r4, pc}

000b6572 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b6572:	1e41      	subs	r1, r0, #1
   b6574:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b6578:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b657a:	0842      	lsrs	r2, r0, #1
   b657c:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b6580:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b6584:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6588:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b658a:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b658c:	d1f5      	bne.n	b657a <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b658e:	4770      	bx	lr

000b6590 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b6590:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b6592:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b6594:	4604      	mov	r4, r0
   b6596:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b6598:	b923      	cbnz	r3, b65a4 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b659a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b659e:	6889      	ldr	r1, [r1, #8]
   b65a0:	f000 bbc7 	b.w	b6d32 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b65a4:	2224      	movs	r2, #36	; 0x24
   b65a6:	2100      	movs	r1, #0
   b65a8:	f006 fffb 	bl	bd5a2 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b65ac:	2310      	movs	r3, #16
  m_flags = F_READ;
   b65ae:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b65b0:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b65b2:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b65b4:	68ab      	ldr	r3, [r5, #8]
   b65b6:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b65b8:	68eb      	ldr	r3, [r5, #12]
   b65ba:	6223      	str	r3, [r4, #32]
}
   b65bc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b65c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b65c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b65c4:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b65c6:	f810 3b01 	ldrb.w	r3, [r0], #1
   b65ca:	2b20      	cmp	r3, #32
   b65cc:	d0fa      	beq.n	b65c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b65ce:	4d6a      	ldr	r5, [pc, #424]	; (b6778 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b65d0:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b65d2:	2400      	movs	r4, #0
    c = path[len];
   b65d4:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b65d6:	b1c3      	cbz	r3, b660a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b65d8:	2b2f      	cmp	r3, #47	; 0x2f
   b65da:	d016      	beq.n	b660a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b65dc:	2b5c      	cmp	r3, #92	; 0x5c
   b65de:	d102      	bne.n	b65e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b65e0:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b65e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b65e6:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b65ea:	b2c0      	uxtb	r0, r0
   b65ec:	281d      	cmp	r0, #29
   b65ee:	d803      	bhi.n	b65f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b65f0:	fa25 f000 	lsr.w	r0, r5, r0
   b65f4:	07c0      	lsls	r0, r0, #31
   b65f6:	d4f3      	bmi.n	b65e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b65f8:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b65fc:	283c      	cmp	r0, #60	; 0x3c
   b65fe:	d0ef      	beq.n	b65e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b6600:	3b20      	subs	r3, #32
   b6602:	2b5e      	cmp	r3, #94	; 0x5e
   b6604:	d8ec      	bhi.n	b65e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b6606:	3401      	adds	r4, #1
    c = path[len];
   b6608:	e7e4      	b.n	b65d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b660a:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b660c:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b660e:	4607      	mov	r7, r0
   b6610:	f810 5b01 	ldrb.w	r5, [r0], #1
   b6614:	2d20      	cmp	r5, #32
   b6616:	d0fa      	beq.n	b660e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b6618:	2d2f      	cmp	r5, #47	; 0x2f
   b661a:	d0f8      	beq.n	b660e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b661c:	6017      	str	r7, [r2, #0]
  while (len) {
   b661e:	b14c      	cbz	r4, b6634 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b6620:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b6624:	2a2e      	cmp	r2, #46	; 0x2e
   b6626:	d001      	beq.n	b662c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b6628:	2a20      	cmp	r2, #32
   b662a:	d101      	bne.n	b6630 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b662c:	3c01      	subs	r4, #1
  while (len) {
   b662e:	e7f6      	b.n	b661e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b6630:	2cff      	cmp	r4, #255	; 0xff
   b6632:	dcd5      	bgt.n	b65e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b6634:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b6638:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b663c:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b663e:	f8c1 300d 	str.w	r3, [r1, #13]
   b6642:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b6644:	f04f 0800 	mov.w	r8, #0
   b6648:	f816 3008 	ldrb.w	r3, [r6, r8]
   b664c:	2b2e      	cmp	r3, #46	; 0x2e
   b664e:	d001      	beq.n	b6654 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b6650:	2b20      	cmp	r3, #32
   b6652:	d102      	bne.n	b665a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b6654:	f108 0801 	add.w	r8, r8, #1
   b6658:	e7f6      	b.n	b6648 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b665a:	fab8 f088 	clz	r0, r8
   b665e:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6660:	1e65      	subs	r5, r4, #1
   b6662:	1c6b      	adds	r3, r5, #1
   b6664:	d002      	beq.n	b666c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b6666:	5d73      	ldrb	r3, [r6, r5]
   b6668:	2b2e      	cmp	r3, #46	; 0x2e
   b666a:	d114      	bne.n	b6696 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b666c:	f04f 0900 	mov.w	r9, #0
   b6670:	2707      	movs	r7, #7
   b6672:	464a      	mov	r2, r9
   b6674:	46ca      	mov	sl, r9
   b6676:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b667a:	45a0      	cmp	r8, r4
   b667c:	da68      	bge.n	b6750 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b667e:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b6682:	2b20      	cmp	r3, #32
   b6684:	d003      	beq.n	b668e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b6686:	2b2e      	cmp	r3, #46	; 0x2e
   b6688:	d107      	bne.n	b669a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b668a:	45a8      	cmp	r8, r5
   b668c:	d012      	beq.n	b66b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b668e:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b6690:	f108 0801 	add.w	r8, r8, #1
   b6694:	e7f1      	b.n	b667a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6696:	3d01      	subs	r5, #1
   b6698:	e7e3      	b.n	b6662 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b669a:	2b22      	cmp	r3, #34	; 0x22
   b669c:	d008      	beq.n	b66b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b669e:	2b7c      	cmp	r3, #124	; 0x7c
   b66a0:	d006      	beq.n	b66b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b66a2:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b66a6:	f1bc 0f05 	cmp.w	ip, #5
   b66aa:	d80a      	bhi.n	b66c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b66ac:	2b2d      	cmp	r3, #45	; 0x2d
   b66ae:	d012      	beq.n	b66d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b66b0:	45a8      	cmp	r8, r5
   b66b2:	d15b      	bne.n	b676c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b66b4:	2f0a      	cmp	r7, #10
   b66b6:	d04a      	beq.n	b674e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b66b8:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b66ba:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b66bc:	f04f 0e10 	mov.w	lr, #16
   b66c0:	e7e6      	b.n	b6690 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b66c2:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b66c6:	f1bc 0f05 	cmp.w	ip, #5
   b66ca:	d9f1      	bls.n	b66b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b66cc:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b66d0:	f1bc 0f02 	cmp.w	ip, #2
   b66d4:	d9ec      	bls.n	b66b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b66d6:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b66da:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b66de:	d8e7      	bhi.n	b66b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b66e0:	45a8      	cmp	r8, r5
   b66e2:	d0e7      	beq.n	b66b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b66e4:	42ba      	cmp	r2, r7
   b66e6:	d830      	bhi.n	b674a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b66e8:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b66ec:	f1bc 0f19 	cmp.w	ip, #25
   b66f0:	d81a      	bhi.n	b6728 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b66f2:	3b20      	subs	r3, #32
        lc |= bit;
   b66f4:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b66f8:	b2db      	uxtb	r3, r3
        lc |= bit;
   b66fa:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b66fe:	f102 0c01 	add.w	ip, r2, #1
   b6702:	fa5f fc8c 	uxtb.w	ip, ip
   b6706:	440a      	add	r2, r1
      if (i < 7) {
   b6708:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b670c:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b670e:	d801      	bhi.n	b6714 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b6710:	f881 c00c 	strb.w	ip, [r1, #12]
   b6714:	4662      	mov	r2, ip
   b6716:	e7bb      	b.n	b6690 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b6718:	45a8      	cmp	r8, r5
   b671a:	dc18      	bgt.n	b674e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b671c:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b671e:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6720:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6722:	f04f 0e10 	mov.w	lr, #16
   b6726:	e7b2      	b.n	b668e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b6728:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b672c:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b6730:	bf98      	it	ls
   b6732:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b6736:	e7e2      	b.n	b66fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b6738:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b673a:	2001      	movs	r0, #1
   b673c:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b673e:	4419      	add	r1, r3
   b6740:	237e      	movs	r3, #126	; 0x7e
   b6742:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b6744:	2331      	movs	r3, #49	; 0x31
   b6746:	738b      	strb	r3, [r1, #14]
   b6748:	e74b      	b.n	b65e2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b674a:	2f0a      	cmp	r7, #10
   b674c:	d1e4      	bne.n	b6718 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b674e:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b6750:	7b4b      	ldrb	r3, [r1, #13]
   b6752:	2b20      	cmp	r3, #32
   b6754:	f43f af44 	beq.w	b65e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b6758:	2800      	cmp	r0, #0
   b675a:	d0ed      	beq.n	b6738 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b675c:	ea1a 0f09 	tst.w	sl, r9
   b6760:	bf18      	it	ne
   b6762:	f04f 0902 	movne.w	r9, #2
   b6766:	f881 9000 	strb.w	r9, [r1]
   b676a:	e73a      	b.n	b65e2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b676c:	42ba      	cmp	r2, r7
   b676e:	d8ec      	bhi.n	b674a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b6770:	2000      	movs	r0, #0
      c = '_';
   b6772:	235f      	movs	r3, #95	; 0x5f
   b6774:	e7c3      	b.n	b66fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b6776:	bf00      	nop
   b6778:	31000101 	.word	0x31000101

000b677c <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   b677c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6780:	b08a      	sub	sp, #40	; 0x28
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6782:	2300      	movs	r3, #0
   b6784:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6786:	7803      	ldrb	r3, [r0, #0]
   b6788:	0719      	lsls	r1, r3, #28
bool FatFile::remove() {
   b678a:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & F_WRITE)) {
   b678c:	d50a      	bpl.n	b67a4 <_ZN7FatFile6removeEv+0x28>
   b678e:	7883      	ldrb	r3, [r0, #2]
   b6790:	079a      	lsls	r2, r3, #30
   b6792:	d507      	bpl.n	b67a4 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b6794:	6a01      	ldr	r1, [r0, #32]
   b6796:	b939      	cbnz	r1, b67a8 <_ZN7FatFile6removeEv+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b6798:	2101      	movs	r1, #1
   b679a:	4620      	mov	r0, r4
   b679c:	f000 faba 	bl	b6d14 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b67a0:	4605      	mov	r5, r0
   b67a2:	b938      	cbnz	r0, b67b4 <_ZN7FatFile6removeEv+0x38>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   b67a4:	2000      	movs	r0, #0
   b67a6:	e048      	b.n	b683a <_ZN7FatFile6removeEv+0xbe>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b67a8:	6880      	ldr	r0, [r0, #8]
   b67aa:	f000 feb8 	bl	b751e <_ZN9FatVolume9freeChainEm>
   b67ae:	2800      	cmp	r0, #0
   b67b0:	d1f2      	bne.n	b6798 <_ZN7FatFile6removeEv+0x1c>
   b67b2:	e7f7      	b.n	b67a4 <_ZN7FatFile6removeEv+0x28>
  chksum = lfnChecksum(dir->name);
   b67b4:	f7ff fedd 	bl	b6572 <_ZN7FatFile11lfnChecksumEPh>
  dir->name[0] = DIR_NAME_DELETED;
   b67b8:	27e5      	movs	r7, #229	; 0xe5
   b67ba:	702f      	strb	r7, [r5, #0]
  m_attr = FILE_ATTR_CLOSED;
   b67bc:	2300      	movs	r3, #0
  chksum = lfnChecksum(dir->name);
   b67be:	4606      	mov	r6, r0
  m_attr = FILE_ATTR_CLOSED;
   b67c0:	7023      	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
   b67c2:	68a0      	ldr	r0, [r4, #8]
   b67c4:	f7ff fec8 	bl	b6558 <_ZN9FatVolume9cacheSyncEv>
   b67c8:	2800      	cmp	r0, #0
   b67ca:	d0eb      	beq.n	b67a4 <_ZN7FatFile6removeEv+0x28>
  if (!isLFN()) {
   b67cc:	78e3      	ldrb	r3, [r4, #3]
   b67ce:	2b00      	cmp	r3, #0
   b67d0:	d033      	beq.n	b683a <_ZN7FatFile6removeEv+0xbe>
  if (!dirFile.openCluster(this)) {
   b67d2:	4621      	mov	r1, r4
   b67d4:	a801      	add	r0, sp, #4
   b67d6:	f7ff fedb 	bl	b6590 <_ZN7FatFile11openClusterEPS_>
   b67da:	2800      	cmp	r0, #0
   b67dc:	d0e2      	beq.n	b67a4 <_ZN7FatFile6removeEv+0x28>
   b67de:	2501      	movs	r5, #1
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   b67e0:	78e3      	ldrb	r3, [r4, #3]
   b67e2:	fa5f f885 	uxtb.w	r8, r5
   b67e6:	4543      	cmp	r3, r8
   b67e8:	d3dc      	bcc.n	b67a4 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b67ea:	88a1      	ldrh	r1, [r4, #4]
   b67ec:	1b49      	subs	r1, r1, r5
   b67ee:	0149      	lsls	r1, r1, #5
   b67f0:	a801      	add	r0, sp, #4
   b67f2:	f000 fb84 	bl	b6efe <_ZN7FatFile7seekSetEm>
   b67f6:	2800      	cmp	r0, #0
   b67f8:	d0d4      	beq.n	b67a4 <_ZN7FatFile6removeEv+0x28>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b67fa:	2100      	movs	r1, #0
   b67fc:	a801      	add	r0, sp, #4
   b67fe:	f000 fb5f 	bl	b6ec0 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6802:	2800      	cmp	r0, #0
   b6804:	d0ce      	beq.n	b67a4 <_ZN7FatFile6removeEv+0x28>
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b6806:	7ac3      	ldrb	r3, [r0, #11]
   b6808:	2b0f      	cmp	r3, #15
   b680a:	d1cb      	bne.n	b67a4 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b680c:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b680e:	f002 031f 	and.w	r3, r2, #31
   b6812:	4543      	cmp	r3, r8
   b6814:	d1c6      	bne.n	b67a4 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b6816:	7b43      	ldrb	r3, [r0, #13]
   b6818:	42b3      	cmp	r3, r6
   b681a:	d1c3      	bne.n	b67a4 <_ZN7FatFile6removeEv+0x28>
    ldir->ord = DIR_NAME_DELETED;
   b681c:	7007      	strb	r7, [r0, #0]
    m_vol->cacheDirty();
   b681e:	68a1      	ldr	r1, [r4, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6820:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   b6824:	f043 0301 	orr.w	r3, r3, #1
   b6828:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   b682c:	0653      	lsls	r3, r2, #25
   b682e:	f105 0501 	add.w	r5, r5, #1
   b6832:	d5d5      	bpl.n	b67e0 <_ZN7FatFile6removeEv+0x64>
      if (!m_vol->cacheSync()) {
   b6834:	68a0      	ldr	r0, [r4, #8]
   b6836:	f7ff fe8f 	bl	b6558 <_ZN9FatVolume9cacheSyncEv>
}
   b683a:	b00a      	add	sp, #40	; 0x28
   b683c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6840 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b6844:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6848:	4606      	mov	r6, r0
   b684a:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b684c:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b684e:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b6850:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b6854:	6861      	ldr	r1, [r4, #4]
   b6856:	68a2      	ldr	r2, [r4, #8]
   b6858:	186b      	adds	r3, r5, r1
   b685a:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b685c:	4411      	add	r1, r2
   b685e:	4291      	cmp	r1, r2
   b6860:	d006      	beq.n	b6870 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b6862:	f812 0b01 	ldrb.w	r0, [r2], #1
   b6866:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b686a:	4043      	eors	r3, r0
   b686c:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b686e:	e7f6      	b.n	b685e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b6870:	f1b9 0f03 	cmp.w	r9, #3
   b6874:	bf28      	it	cs
   b6876:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b687a:	f109 0204 	add.w	r2, r9, #4
   b687e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b6880:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6884:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6886:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6888:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b688a:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b688c:	bf94      	ite	ls
   b688e:	3130      	addls	r1, #48	; 0x30
   b6890:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6892:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6894:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b6896:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b689a:	d1f1      	bne.n	b6880 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b689c:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b68a0:	2100      	movs	r1, #0
   b68a2:	735f      	strb	r7, [r3, #13]
   b68a4:	4630      	mov	r0, r6
   b68a6:	f000 fb2a 	bl	b6efe <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b68aa:	2101      	movs	r1, #1
   b68ac:	4630      	mov	r0, r6
   b68ae:	f000 fb07 	bl	b6ec0 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b68b2:	4601      	mov	r1, r0
   b68b4:	b928      	cbnz	r0, b68c2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b68b6:	7870      	ldrb	r0, [r6, #1]
   b68b8:	fab0 f080 	clz	r0, r0
   b68bc:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b68be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b68c2:	7803      	ldrb	r3, [r0, #0]
   b68c4:	b16b      	cbz	r3, b68e2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b68c6:	7ac3      	ldrb	r3, [r0, #11]
   b68c8:	071b      	lsls	r3, r3, #28
   b68ca:	d4ee      	bmi.n	b68aa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b68cc:	220b      	movs	r2, #11
   b68ce:	4640      	mov	r0, r8
   b68d0:	f006 fe2f 	bl	bd532 <memcmp>
   b68d4:	2800      	cmp	r0, #0
   b68d6:	d1e8      	bne.n	b68aa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b68d8:	3501      	adds	r5, #1
   b68da:	b2ad      	uxth	r5, r5
   b68dc:	2d64      	cmp	r5, #100	; 0x64
   b68de:	d1b9      	bne.n	b6854 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b68e0:	e7ed      	b.n	b68be <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b68e2:	2001      	movs	r0, #1
   b68e4:	e7eb      	b.n	b68be <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b68e8 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b68e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b68ec:	ed2d 8b02 	vpush	{d8}
   b68f0:	b08b      	sub	sp, #44	; 0x2c
   b68f2:	460d      	mov	r5, r1
   b68f4:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b68f6:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b68f8:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b68fa:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b68fe:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b6900:	d105      	bne.n	b690e <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b6902:	2000      	movs	r0, #0
}
   b6904:	b00b      	add	sp, #44	; 0x2c
   b6906:	ecbd 8b02 	vpop	{d8}
   b690a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b690e:	9b07      	ldr	r3, [sp, #28]
   b6910:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b6912:	2b00      	cmp	r3, #0
   b6914:	d1f5      	bne.n	b6902 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b6916:	6853      	ldr	r3, [r2, #4]
   b6918:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b691a:	7813      	ldrb	r3, [r2, #0]
   b691c:	079c      	lsls	r4, r3, #30
   b691e:	bf1f      	itttt	ne
   b6920:	9b05      	ldrne	r3, [sp, #20]
   b6922:	330c      	addne	r3, #12
   b6924:	220d      	movne	r2, #13
   b6926:	fbb3 f3f2 	udivne	r3, r3, r2
   b692a:	bf1a      	itte	ne
   b692c:	3301      	addne	r3, #1
   b692e:	b2db      	uxtbne	r3, r3
   b6930:	2301      	moveq	r3, #1
    seekSet(0);
   b6932:	2100      	movs	r1, #0
   b6934:	4628      	mov	r0, r5
   b6936:	9303      	str	r3, [sp, #12]
   b6938:	f000 fae1 	bl	b6efe <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b693c:	f107 030d 	add.w	r3, r7, #13
  }
   b6940:	f04f 0b00 	mov.w	fp, #0
   b6944:	ee08 3a10 	vmov	s16, r3
   b6948:	46da      	mov	sl, fp
   b694a:	465c      	mov	r4, fp
   b694c:	465e      	mov	r6, fp
   b694e:	f8cd b010 	str.w	fp, [sp, #16]
   b6952:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b6954:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b6956:	2101      	movs	r1, #1
   b6958:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b695a:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b695e:	f000 faaf 	bl	b6ec0 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6962:	4603      	mov	r3, r0
   b6964:	2800      	cmp	r0, #0
   b6966:	d171      	bne.n	b6a4c <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b6968:	786b      	ldrb	r3, [r5, #1]
   b696a:	2b00      	cmp	r3, #0
   b696c:	d1c9      	bne.n	b6902 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b696e:	9b06      	ldr	r3, [sp, #24]
   b6970:	059a      	lsls	r2, r3, #22
   b6972:	d5c6      	bpl.n	b6902 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b6974:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b6978:	3b01      	subs	r3, #1
   b697a:	2b01      	cmp	r3, #1
   b697c:	d8c1      	bhi.n	b6902 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b697e:	9b04      	ldr	r3, [sp, #16]
   b6980:	2c00      	cmp	r4, #0
   b6982:	bf08      	it	eq
   b6984:	4643      	moveq	r3, r8
   b6986:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b6988:	9b03      	ldr	r3, [sp, #12]
   b698a:	429c      	cmp	r4, r3
   b698c:	f0c0 80f1 	bcc.w	b6b72 <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b6990:	f1b9 0f00 	cmp.w	r9, #0
   b6994:	f040 810a 	bne.w	b6bac <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b6998:	9b04      	ldr	r3, [sp, #16]
   b699a:	4628      	mov	r0, r5
   b699c:	0159      	lsls	r1, r3, #5
   b699e:	f000 faae 	bl	b6efe <_ZN7FatFile7seekSetEm>
   b69a2:	2800      	cmp	r0, #0
   b69a4:	d0ad      	beq.n	b6902 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b69a6:	9b03      	ldr	r3, [sp, #12]
   b69a8:	f103 39ff 	add.w	r9, r3, #4294967295
   b69ac:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b69b0:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b69b2:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b69b6:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b69ba:	2e00      	cmp	r6, #0
   b69bc:	f000 810d 	beq.w	b6bda <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b69c0:	2100      	movs	r1, #0
   b69c2:	4628      	mov	r0, r5
   b69c4:	f000 fa7c 	bl	b6ec0 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b69c8:	4604      	mov	r4, r0
   b69ca:	2800      	cmp	r0, #0
   b69cc:	d099      	beq.n	b6902 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b69ce:	68aa      	ldr	r2, [r5, #8]
   b69d0:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b69d4:	454e      	cmp	r6, r9
   b69d6:	f043 0301 	orr.w	r3, r3, #1
   b69da:	bf0c      	ite	eq
   b69dc:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b69e0:	46b3      	movne	fp, r6
   b69e2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b69e6:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b69ea:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b69ee:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b69f2:	f107 000d 	add.w	r0, r7, #13
   b69f6:	f7ff fdbc 	bl	b6572 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b69fa:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b69fe:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b6a00:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6a04:	f00b 031f 	and.w	r3, fp, #31
   b6a08:	220d      	movs	r2, #13
   b6a0a:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b6a0c:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6a10:	4353      	muls	r3, r2
   b6a12:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b6a14:	9905      	ldr	r1, [sp, #20]
   b6a16:	4299      	cmp	r1, r3
   b6a18:	f240 80d0 	bls.w	b6bbc <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b6a1c:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b6a20:	2a04      	cmp	r2, #4
   b6a22:	fa5f fe82 	uxtb.w	lr, r2
   b6a26:	f102 0001 	add.w	r0, r2, #1
   b6a2a:	f200 80cd 	bhi.w	b6bc8 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b6a2e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b6a32:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b6a36:	280d      	cmp	r0, #13
   b6a38:	f103 0301 	add.w	r3, r3, #1
   b6a3c:	4602      	mov	r2, r0
   b6a3e:	d1e9      	bne.n	b6a14 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6a40:	3e01      	subs	r6, #1
   b6a42:	b2f6      	uxtb	r6, r6
   b6a44:	e7b9      	b.n	b69ba <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b6a46:	f04f 0901 	mov.w	r9, #1
   b6a4a:	e783      	b.n	b6954 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b6a4c:	7802      	ldrb	r2, [r0, #0]
   b6a4e:	2ae5      	cmp	r2, #229	; 0xe5
   b6a50:	d000      	beq.n	b6a54 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b6a52:	b97a      	cbnz	r2, b6a74 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b6a54:	9904      	ldr	r1, [sp, #16]
   b6a56:	2c00      	cmp	r4, #0
   b6a58:	bf08      	it	eq
   b6a5a:	4641      	moveq	r1, r8
   b6a5c:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b6a5e:	9903      	ldr	r1, [sp, #12]
   b6a60:	428c      	cmp	r4, r1
        freeFound++;
   b6a62:	bf3c      	itt	cc
   b6a64:	3401      	addcc	r4, #1
   b6a66:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b6a68:	2a00      	cmp	r2, #0
   b6a6a:	d080      	beq.n	b696e <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6a6c:	2ae5      	cmp	r2, #229	; 0xe5
   b6a6e:	d105      	bne.n	b6a7c <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b6a70:	2600      	movs	r6, #0
   b6a72:	e76f      	b.n	b6954 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b6a74:	9903      	ldr	r1, [sp, #12]
   b6a76:	428c      	cmp	r4, r1
   b6a78:	bf38      	it	cc
   b6a7a:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6a7c:	2a2e      	cmp	r2, #46	; 0x2e
   b6a7e:	d0f7      	beq.n	b6a70 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b6a80:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b6a82:	290f      	cmp	r1, #15
   b6a84:	d14a      	bne.n	b6b1c <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b6a86:	bb16      	cbnz	r6, b6ace <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b6a88:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b6a8c:	f43f af62 	beq.w	b6954 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b6a90:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b6a94:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b6a98:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b6a9a:	220d      	movs	r2, #13
   b6a9c:	f10a 38ff 	add.w	r8, sl, #4294967295
   b6aa0:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b6aa4:	9a05      	ldr	r2, [sp, #20]
   b6aa6:	4542      	cmp	r2, r8
   b6aa8:	d9e2      	bls.n	b6a70 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6aaa:	eba2 0208 	sub.w	r2, r2, r8
   b6aae:	9208      	str	r2, [sp, #32]
   b6ab0:	2200      	movs	r2, #0
   b6ab2:	eb02 0108 	add.w	r1, r2, r8
   b6ab6:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b6ab8:	4618      	mov	r0, r3
   b6aba:	b2d1      	uxtb	r1, r2
   b6abc:	f7ff fd38 	bl	b6530 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b6ac0:	9908      	ldr	r1, [sp, #32]
   b6ac2:	428a      	cmp	r2, r1
   b6ac4:	d10d      	bne.n	b6ae2 <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b6ac6:	2800      	cmp	r0, #0
   b6ac8:	bf18      	it	ne
   b6aca:	2600      	movne	r6, #0
   b6acc:	e742      	b.n	b6954 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b6ace:	f10a 3aff 	add.w	sl, sl, #4294967295
   b6ad2:	fa5f fa8a 	uxtb.w	sl, sl
   b6ad6:	4552      	cmp	r2, sl
   b6ad8:	d1ca      	bne.n	b6a70 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6ada:	7b5a      	ldrb	r2, [r3, #13]
   b6adc:	455a      	cmp	r2, fp
   b6ade:	d0dc      	beq.n	b6a9a <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b6ae0:	e7c6      	b.n	b6a70 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6ae2:	28ff      	cmp	r0, #255	; 0xff
   b6ae4:	d8c4      	bhi.n	b6a70 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6ae6:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6aea:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b6aee:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6af0:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6af2:	bf9c      	itt	ls
   b6af4:	f10e 0020 	addls.w	r0, lr, #32
   b6af8:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6afc:	4608      	mov	r0, r1
   b6afe:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6b00:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6b02:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b6b06:	f1bc 0f19 	cmp.w	ip, #25
   b6b0a:	bf9c      	itt	ls
   b6b0c:	3120      	addls	r1, #32
   b6b0e:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6b10:	4571      	cmp	r1, lr
   b6b12:	d1ad      	bne.n	b6a70 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b6b14:	3201      	adds	r2, #1
   b6b16:	2a0d      	cmp	r2, #13
   b6b18:	d1cb      	bne.n	b6ab2 <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b6b1a:	e71b      	b.n	b6954 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6b1c:	0708      	lsls	r0, r1, #28
   b6b1e:	d4a7      	bmi.n	b6a70 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b6b20:	b15e      	cbz	r6, b6b3a <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b6b22:	f1ba 0f01 	cmp.w	sl, #1
   b6b26:	f47f aeec 	bne.w	b6902 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b6b2a:	4618      	mov	r0, r3
   b6b2c:	f7ff fd21 	bl	b6572 <_ZN7FatFile11lfnChecksumEPh>
   b6b30:	4558      	cmp	r0, fp
   b6b32:	f47f aee6 	bne.w	b6902 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b6b36:	46b1      	mov	r9, r6
   b6b38:	e00e      	b.n	b6b58 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6b3a:	ee18 1a10 	vmov	r1, s16
   b6b3e:	220b      	movs	r2, #11
   b6b40:	4618      	mov	r0, r3
   b6b42:	f006 fcf6 	bl	bd532 <memcmp>
   b6b46:	2800      	cmp	r0, #0
   b6b48:	f47f af04 	bne.w	b6954 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b6b4c:	f897 9000 	ldrb.w	r9, [r7]
   b6b50:	f019 0901 	ands.w	r9, r9, #1
   b6b54:	f47f af77 	bne.w	b6a46 <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b6b58:	9b06      	ldr	r3, [sp, #24]
   b6b5a:	0519      	lsls	r1, r3, #20
   b6b5c:	f53f aed1 	bmi.w	b6902 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b6b60:	9b06      	ldr	r3, [sp, #24]
   b6b62:	9807      	ldr	r0, [sp, #28]
   b6b64:	f8cd 9000 	str.w	r9, [sp]
   b6b68:	4642      	mov	r2, r8
   b6b6a:	4629      	mov	r1, r5
   b6b6c:	f000 fa0a 	bl	b6f84 <_ZN7FatFile15openCachedEntryEPS_tih>
   b6b70:	e6c8      	b.n	b6904 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b6b72:	2100      	movs	r1, #0
   b6b74:	4628      	mov	r0, r5
   b6b76:	f000 f9a3 	bl	b6ec0 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6b7a:	b9a0      	cbnz	r0, b6ba6 <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b6b7c:	786b      	ldrb	r3, [r5, #1]
   b6b7e:	2b00      	cmp	r3, #0
   b6b80:	f47f aebf 	bne.w	b6902 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b6b84:	4628      	mov	r0, r5
   b6b86:	f000 f887 	bl	b6c98 <_ZN7FatFile13addDirClusterEv>
   b6b8a:	2800      	cmp	r0, #0
   b6b8c:	f43f aeb9 	beq.w	b6902 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b6b90:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b6b92:	791b      	ldrb	r3, [r3, #4]
   b6b94:	2b01      	cmp	r3, #1
   b6b96:	f63f aefb 	bhi.w	b6990 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b6b9a:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b6b9c:	3410      	adds	r4, #16
   b6b9e:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6ba0:	42a3      	cmp	r3, r4
   b6ba2:	d8ef      	bhi.n	b6b84 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b6ba4:	e6f4      	b.n	b6990 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b6ba6:	3401      	adds	r4, #1
   b6ba8:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6baa:	e6ed      	b.n	b6988 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b6bac:	4639      	mov	r1, r7
   b6bae:	4628      	mov	r0, r5
   b6bb0:	f7ff fe46 	bl	b6840 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b6bb4:	2800      	cmp	r0, #0
   b6bb6:	f47f aeef 	bne.w	b6998 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b6bba:	e6a2      	b.n	b6902 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b6bbc:	bf14      	ite	ne
   b6bbe:	f04f 31ff 	movne.w	r1, #4294967295
   b6bc2:	2100      	moveq	r1, #0
   b6bc4:	b289      	uxth	r1, r1
   b6bc6:	e72b      	b.n	b6a20 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b6bc8:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b6bcc:	bf94      	ite	ls
   b6bce:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b6bd2:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b6bd6:	8091      	strh	r1, [r2, #4]
   b6bd8:	e72d      	b.n	b6a36 <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b6bda:	4631      	mov	r1, r6
   b6bdc:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b6bde:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b6be2:	f000 f96d 	bl	b6ec0 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b6be6:	4604      	mov	r4, r0
   b6be8:	2800      	cmp	r0, #0
   b6bea:	f43f ae8a 	beq.w	b6902 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b6bee:	2220      	movs	r2, #32
   b6bf0:	4631      	mov	r1, r6
   b6bf2:	f006 fcd6 	bl	bd5a2 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b6bf6:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b6bfa:	6023      	str	r3, [r4, #0]
   b6bfc:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b6c00:	6063      	str	r3, [r4, #4]
   b6c02:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b6c06:	8123      	strh	r3, [r4, #8]
   b6c08:	7dfb      	ldrb	r3, [r7, #23]
   b6c0a:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b6c0c:	783b      	ldrb	r3, [r7, #0]
   b6c0e:	f003 0318 	and.w	r3, r3, #24
   b6c12:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b6c14:	4b0f      	ldr	r3, [pc, #60]	; (b6c54 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b6c16:	681b      	ldr	r3, [r3, #0]
   b6c18:	b19b      	cbz	r3, b6c42 <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b6c1a:	f104 010e 	add.w	r1, r4, #14
   b6c1e:	f104 0010 	add.w	r0, r4, #16
   b6c22:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b6c24:	8a23      	ldrh	r3, [r4, #16]
   b6c26:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b6c28:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b6c2a:	89e3      	ldrh	r3, [r4, #14]
   b6c2c:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b6c2e:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6c30:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b6c34:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b6c38:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b6c3c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
   b6c40:	e78e      	b.n	b6b60 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b6c42:	2321      	movs	r3, #33	; 0x21
   b6c44:	7423      	strb	r3, [r4, #16]
   b6c46:	2328      	movs	r3, #40	; 0x28
   b6c48:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b6c4a:	2308      	movs	r3, #8
   b6c4c:	73a6      	strb	r6, [r4, #14]
   b6c4e:	73e3      	strb	r3, [r4, #15]
   b6c50:	e7e8      	b.n	b6c24 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b6c52:	bf00      	nop
   b6c54:	2003e644 	.word	0x2003e644

000b6c58 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b6c58:	b538      	push	{r3, r4, r5, lr}
   b6c5a:	4604      	mov	r4, r0
   b6c5c:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b6c5e:	2224      	movs	r2, #36	; 0x24
   b6c60:	2100      	movs	r1, #0
   b6c62:	f006 fc9e 	bl	bd5a2 <memset>

  m_vol = vol;
   b6c66:	60a5      	str	r5, [r4, #8]
    return m_fatType;
   b6c68:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b6c6a:	2b10      	cmp	r3, #16
   b6c6c:	d003      	beq.n	b6c76 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b6c6e:	2b20      	cmp	r3, #32
   b6c70:	d006      	beq.n	b6c80 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b6c72:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b6c74:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b6c76:	2320      	movs	r3, #32
  m_flags = F_READ;
   b6c78:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b6c7a:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6c7c:	70a0      	strb	r0, [r4, #2]
  return true;
   b6c7e:	e7f9      	b.n	b6c74 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b6c80:	2340      	movs	r3, #64	; 0x40
   b6c82:	e7f9      	b.n	b6c78 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b6c84 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b6c84:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6c86:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b6c88:	f043 0304 	orr.w	r3, r3, #4
   b6c8c:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6c8e:	f100 0210 	add.w	r2, r0, #16
   b6c92:	6880      	ldr	r0, [r0, #8]
   b6c94:	f000 bc08 	b.w	b74a8 <_ZN9FatVolume15allocateClusterEmPm>

000b6c98 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b6c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b6c9c:	7801      	ldrb	r1, [r0, #0]
   b6c9e:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b6ca2:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b6ca4:	d003      	beq.n	b6cae <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b6ca6:	2600      	movs	r6, #0
}
   b6ca8:	4630      	mov	r0, r6
   b6caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b6cae:	6942      	ldr	r2, [r0, #20]
   b6cb0:	4b17      	ldr	r3, [pc, #92]	; (b6d10 <_ZN7FatFile13addDirClusterEv+0x78>)
   b6cb2:	429a      	cmp	r2, r3
   b6cb4:	d2f7      	bcs.n	b6ca6 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b6cb6:	f7ff ffe5 	bl	b6c84 <_ZN7FatFile10addClusterEv>
   b6cba:	4606      	mov	r6, r0
   b6cbc:	2800      	cmp	r0, #0
   b6cbe:	d0f2      	beq.n	b6ca6 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b6cc0:	6921      	ldr	r1, [r4, #16]
   b6cc2:	68a0      	ldr	r0, [r4, #8]
   b6cc4:	f000 fb85 	bl	b73d2 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6cc8:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
   b6cca:	68a0      	ldr	r0, [r4, #8]
   b6ccc:	2205      	movs	r2, #5
   b6cce:	4639      	mov	r1, r7
   b6cd0:	3024      	adds	r0, #36	; 0x24
   b6cd2:	f000 fb5b 	bl	b738c <_ZN8FatCache4readEmh>
  if (!pc) {
   b6cd6:	4680      	mov	r8, r0
   b6cd8:	2800      	cmp	r0, #0
   b6cda:	d0e4      	beq.n	b6ca6 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b6cdc:	4629      	mov	r1, r5
   b6cde:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6ce2:	f006 fc5e 	bl	bd5a2 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b6ce6:	2501      	movs	r5, #1
   b6ce8:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b6cea:	791a      	ldrb	r2, [r3, #4]
   b6cec:	42aa      	cmp	r2, r5
   b6cee:	d909      	bls.n	b6d04 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b6cf0:	6818      	ldr	r0, [r3, #0]
   b6cf2:	4642      	mov	r2, r8
   b6cf4:	19e9      	adds	r1, r5, r7
   b6cf6:	f000 feb6 	bl	b7a66 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b6cfa:	2800      	cmp	r0, #0
   b6cfc:	d0d3      	beq.n	b6ca6 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b6cfe:	3501      	adds	r5, #1
   b6d00:	b2ed      	uxtb	r5, r5
   b6d02:	e7f1      	b.n	b6ce8 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b6d04:	6963      	ldr	r3, [r4, #20]
   b6d06:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b6d0a:	6163      	str	r3, [r4, #20]
  return true;
   b6d0c:	e7cc      	b.n	b6ca8 <_ZN7FatFile13addDirClusterEv+0x10>
   b6d0e:	bf00      	nop
   b6d10:	001ffe00 	.word	0x001ffe00

000b6d14 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b6d14:	b510      	push	{r4, lr}
   b6d16:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b6d18:	6880      	ldr	r0, [r0, #8]
   b6d1a:	460a      	mov	r2, r1
   b6d1c:	3024      	adds	r0, #36	; 0x24
   b6d1e:	69a1      	ldr	r1, [r4, #24]
   b6d20:	f000 fb34 	bl	b738c <_ZN8FatCache4readEmh>
  if (!pc) {
   b6d24:	b120      	cbz	r0, b6d30 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b6d26:	88a3      	ldrh	r3, [r4, #4]
   b6d28:	f003 030f 	and.w	r3, r3, #15
   b6d2c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b6d30:	bd10      	pop	{r4, pc}

000b6d32 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b6d32:	7803      	ldrb	r3, [r0, #0]
   b6d34:	b90b      	cbnz	r3, b6d3a <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b6d36:	f7ff bf8f 	b.w	b6c58 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b6d3a:	2000      	movs	r0, #0
   b6d3c:	4770      	bx	lr

000b6d3e <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b6d3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b6d42:	7803      	ldrb	r3, [r0, #0]
   b6d44:	4604      	mov	r4, r0
   b6d46:	4688      	mov	r8, r1
   b6d48:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b6d4a:	2b00      	cmp	r3, #0
   b6d4c:	d05d      	beq.n	b6e0a <_ZN7FatFile4readEPvj+0xcc>
   b6d4e:	7882      	ldrb	r2, [r0, #2]
   b6d50:	07d1      	lsls	r1, r2, #31
   b6d52:	d55a      	bpl.n	b6e0a <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b6d54:	071a      	lsls	r2, r3, #28
   b6d56:	d52d      	bpl.n	b6db4 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b6d58:	69c3      	ldr	r3, [r0, #28]
   b6d5a:	6942      	ldr	r2, [r0, #20]
   b6d5c:	1a9b      	subs	r3, r3, r2
   b6d5e:	429d      	cmp	r5, r3
   b6d60:	bf28      	it	cs
   b6d62:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b6d64:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b6d66:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6d6a:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b6d6e:	2e00      	cmp	r6, #0
   b6d70:	f000 808f 	beq.w	b6e92 <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b6d74:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b6d76:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6d78:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b6d7a:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b6d7c:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6d80:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b6d84:	d51f      	bpl.n	b6dc6 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6d86:	6a00      	ldr	r0, [r0, #32]
   b6d88:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b6d8a:	68a0      	ldr	r0, [r4, #8]
   b6d8c:	f1ba 0f00 	cmp.w	sl, #0
   b6d90:	d142      	bne.n	b6e18 <_ZN7FatFile4readEPvj+0xda>
   b6d92:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6d96:	d33f      	bcc.n	b6e18 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b6d98:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6d9a:	4299      	cmp	r1, r3
   b6d9c:	d03c      	beq.n	b6e18 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b6d9e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b6da2:	d252      	bcs.n	b6e4a <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b6da4:	6800      	ldr	r0, [r0, #0]
   b6da6:	4642      	mov	r2, r8
   b6da8:	f000 fdd4 	bl	b7954 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b6dac:	b368      	cbz	r0, b6e0a <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b6dae:	f44f 7700 	mov.w	r7, #512	; 0x200
   b6db2:	e044      	b.n	b6e3e <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b6db4:	069b      	lsls	r3, r3, #26
   b6db6:	d5d5      	bpl.n	b6d64 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b6db8:	6883      	ldr	r3, [r0, #8]
   b6dba:	891a      	ldrh	r2, [r3, #8]
   b6dbc:	6943      	ldr	r3, [r0, #20]
   b6dbe:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b6dc2:	b29b      	uxth	r3, r3
   b6dc4:	e7cb      	b.n	b6d5e <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b6dc6:	f890 9005 	ldrb.w	r9, [r0, #5]
   b6dca:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b6dce:	f1ba 0f00 	cmp.w	sl, #0
   b6dd2:	d108      	bne.n	b6de6 <_ZN7FatFile4readEPvj+0xa8>
   b6dd4:	f1b9 0f00 	cmp.w	r9, #0
   b6dd8:	d105      	bne.n	b6de6 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b6dda:	b95b      	cbnz	r3, b6df4 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6ddc:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b6dde:	bf4c      	ite	mi
   b6de0:	6a03      	ldrmi	r3, [r0, #32]
   b6de2:	6a23      	ldrpl	r3, [r4, #32]
   b6de4:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6de6:	6921      	ldr	r1, [r4, #16]
   b6de8:	68a0      	ldr	r0, [r4, #8]
   b6dea:	f000 faf2 	bl	b73d2 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6dee:	eb09 0100 	add.w	r1, r9, r0
   b6df2:	e7ca      	b.n	b6d8a <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6df4:	6921      	ldr	r1, [r4, #16]
   b6df6:	465a      	mov	r2, fp
   b6df8:	f000 faf1 	bl	b73de <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b6dfc:	2800      	cmp	r0, #0
   b6dfe:	db04      	blt.n	b6e0a <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b6e00:	d1f1      	bne.n	b6de6 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b6e02:	7823      	ldrb	r3, [r4, #0]
   b6e04:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6e08:	d143      	bne.n	b6e92 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b6e0a:	7863      	ldrb	r3, [r4, #1]
   b6e0c:	f043 0302 	orr.w	r3, r3, #2
   b6e10:	7063      	strb	r3, [r4, #1]
  return -1;
   b6e12:	f04f 30ff 	mov.w	r0, #4294967295
   b6e16:	e03d      	b.n	b6e94 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b6e18:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b6e1c:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b6e1e:	f04f 0200 	mov.w	r2, #0
   b6e22:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b6e26:	bf28      	it	cs
   b6e28:	4637      	movcs	r7, r6
   b6e2a:	f000 faaf 	bl	b738c <_ZN8FatCache4readEmh>
      if (!pc) {
   b6e2e:	2800      	cmp	r0, #0
   b6e30:	d0eb      	beq.n	b6e0a <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b6e32:	eb00 010a 	add.w	r1, r0, sl
   b6e36:	463a      	mov	r2, r7
   b6e38:	4640      	mov	r0, r8
   b6e3a:	f006 fb8a 	bl	bd552 <memcpy>
    m_curPosition += n;
   b6e3e:	6963      	ldr	r3, [r4, #20]
   b6e40:	443b      	add	r3, r7
    dst += n;
   b6e42:	44b8      	add	r8, r7
    m_curPosition += n;
   b6e44:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b6e46:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b6e48:	e791      	b.n	b6d6e <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b6e4a:	7822      	ldrb	r2, [r4, #0]
   b6e4c:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b6e4e:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b6e52:	d406      	bmi.n	b6e62 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b6e54:	7902      	ldrb	r2, [r0, #4]
   b6e56:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b6e5a:	b2d2      	uxtb	r2, r2
   b6e5c:	4592      	cmp	sl, r2
   b6e5e:	bf28      	it	cs
   b6e60:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6e62:	4299      	cmp	r1, r3
      n = 512*nb;
   b6e64:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6e68:	d208      	bcs.n	b6e7c <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b6e6a:	68a0      	ldr	r0, [r4, #8]
   b6e6c:	4653      	mov	r3, sl
   b6e6e:	6800      	ldr	r0, [r0, #0]
   b6e70:	4642      	mov	r2, r8
   b6e72:	f000 fdb7 	bl	b79e4 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b6e76:	2800      	cmp	r0, #0
   b6e78:	d1e1      	bne.n	b6e3e <_ZN7FatFile4readEPvj+0x100>
   b6e7a:	e7c6      	b.n	b6e0a <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6e7c:	4453      	add	r3, sl
   b6e7e:	428b      	cmp	r3, r1
   b6e80:	d9f3      	bls.n	b6e6a <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b6e82:	3024      	adds	r0, #36	; 0x24
   b6e84:	9101      	str	r1, [sp, #4]
   b6e86:	f000 fa59 	bl	b733c <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b6e8a:	9901      	ldr	r1, [sp, #4]
   b6e8c:	2800      	cmp	r0, #0
   b6e8e:	d1ec      	bne.n	b6e6a <_ZN7FatFile4readEPvj+0x12c>
   b6e90:	e7bb      	b.n	b6e0a <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b6e92:	1ba8      	subs	r0, r5, r6
}
   b6e94:	b003      	add	sp, #12
   b6e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6e9a <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b6e9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b6e9c:	2201      	movs	r2, #1
   b6e9e:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b6ea2:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b6ea6:	4604      	mov	r4, r0
   b6ea8:	f7ff ff49 	bl	b6d3e <_ZN7FatFile4readEPvj>
   b6eac:	2801      	cmp	r0, #1
   b6eae:	bf0a      	itet	eq
   b6eb0:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b6eb4:	f04f 30ff 	movne.w	r0, #4294967295
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b6eb8:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b6ebc:	b002      	add	sp, #8
   b6ebe:	bd70      	pop	{r4, r5, r6, pc}

000b6ec0 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6ec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6ec2:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b6ec4:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6ec8:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6eca:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b6ece:	d000      	beq.n	b6ed2 <_ZN7FatFile12readDirCacheEb+0x12>
   b6ed0:	b999      	cbnz	r1, b6efa <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b6ed2:	2201      	movs	r2, #1
   b6ed4:	f10d 0107 	add.w	r1, sp, #7
   b6ed8:	4620      	mov	r0, r4
   b6eda:	f7ff ff30 	bl	b6d3e <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b6ede:	b240      	sxtb	r0, r0
   b6ee0:	2801      	cmp	r0, #1
   b6ee2:	d002      	beq.n	b6eea <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b6ee4:	2000      	movs	r0, #0
}
   b6ee6:	b003      	add	sp, #12
   b6ee8:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b6eea:	6963      	ldr	r3, [r4, #20]
   b6eec:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b6eee:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b6ef0:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b6ef2:	3030      	adds	r0, #48	; 0x30
   b6ef4:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b6ef8:	e7f5      	b.n	b6ee6 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b6efa:	3320      	adds	r3, #32
   b6efc:	e7f7      	b.n	b6eee <_ZN7FatFile12readDirCacheEb+0x2e>

000b6efe <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b6efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b6f02:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b6f04:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b6f06:	4604      	mov	r4, r0
   b6f08:	460d      	mov	r5, r1
  if (!isOpen()) {
   b6f0a:	b162      	cbz	r2, b6f26 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b6f0c:	6940      	ldr	r0, [r0, #20]
   b6f0e:	4288      	cmp	r0, r1
   b6f10:	d002      	beq.n	b6f18 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b6f12:	b919      	cbnz	r1, b6f1c <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b6f14:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b6f16:	6165      	str	r5, [r4, #20]
    return true;
   b6f18:	2001      	movs	r0, #1
   b6f1a:	e006      	b.n	b6f2a <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b6f1c:	0716      	lsls	r6, r2, #28
   b6f1e:	d506      	bpl.n	b6f2e <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b6f20:	69e3      	ldr	r3, [r4, #28]
   b6f22:	428b      	cmp	r3, r1
   b6f24:	d20b      	bcs.n	b6f3e <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b6f26:	6127      	str	r7, [r4, #16]
  return false;
   b6f28:	2000      	movs	r0, #0
}
   b6f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b6f2e:	0691      	lsls	r1, r2, #26
   b6f30:	d505      	bpl.n	b6f3e <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b6f32:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b6f34:	891b      	ldrh	r3, [r3, #8]
   b6f36:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b6f3a:	d9ec      	bls.n	b6f16 <_ZN7FatFile7seekSetEm+0x18>
   b6f3c:	e7f3      	b.n	b6f26 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6f3e:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b6f42:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b6f46:	1e43      	subs	r3, r0, #1
   b6f48:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b6f4c:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6f4e:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b6f50:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b6f52:	42b3      	cmp	r3, r6
   b6f54:	d800      	bhi.n	b6f58 <_ZN7FatFile7seekSetEm+0x5a>
   b6f56:	b998      	cbnz	r0, b6f80 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6f58:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b6f5a:	bf4c      	ite	mi
   b6f5c:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b6f60:	6a23      	ldrpl	r3, [r4, #32]
   b6f62:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6f64:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b6f68:	2e00      	cmp	r6, #0
   b6f6a:	d0d4      	beq.n	b6f16 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6f6c:	6921      	ldr	r1, [r4, #16]
   b6f6e:	68a0      	ldr	r0, [r4, #8]
   b6f70:	4642      	mov	r2, r8
   b6f72:	f000 fa34 	bl	b73de <_ZN9FatVolume6fatGetEmPm>
   b6f76:	2800      	cmp	r0, #0
   b6f78:	f106 36ff 	add.w	r6, r6, #4294967295
   b6f7c:	dcf4      	bgt.n	b6f68 <_ZN7FatFile7seekSetEm+0x6a>
   b6f7e:	e7d2      	b.n	b6f26 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b6f80:	1af6      	subs	r6, r6, r3
   b6f82:	e7ef      	b.n	b6f64 <_ZN7FatFile7seekSetEm+0x66>

000b6f84 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b6f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6f86:	460f      	mov	r7, r1
   b6f88:	4604      	mov	r4, r0
   b6f8a:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b6f8c:	2100      	movs	r1, #0
   b6f8e:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b6f90:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b6f92:	f006 fb06 	bl	bd5a2 <memset>
  m_vol = dirFile->m_vol;
   b6f96:	68b8      	ldr	r0, [r7, #8]
   b6f98:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b6f9a:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b6f9c:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b6fa0:	6a3b      	ldr	r3, [r7, #32]
   b6fa2:	60e3      	str	r3, [r4, #12]
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b6fa4:	016a      	lsls	r2, r5, #5
   b6fa6:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b6faa:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6fae:	071f      	lsls	r7, r3, #28
   b6fb0:	d444      	bmi.n	b703c <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b6fb2:	f003 0317 	and.w	r3, r3, #23
   b6fb6:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b6fb8:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b6fbc:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b6fc0:	bf04      	itt	eq
   b6fc2:	f043 0308 	orreq.w	r3, r3, #8
   b6fc6:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b6fc8:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b6fcc:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b6fce:	f006 0303 	and.w	r3, r6, #3
   b6fd2:	2b01      	cmp	r3, #1
   b6fd4:	d02c      	beq.n	b7030 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b6fd6:	2b02      	cmp	r3, #2
   b6fd8:	d028      	beq.n	b702c <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b6fda:	bb7b      	cbnz	r3, b703c <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b6fdc:	0571      	lsls	r1, r6, #21
   b6fde:	d42d      	bmi.n	b703c <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b6fe0:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b6fe2:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b6fe4:	78a1      	ldrb	r1, [r4, #2]
   b6fe6:	078b      	lsls	r3, r1, #30
   b6fe8:	d504      	bpl.n	b6ff4 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b6fea:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b6fec:	06df      	lsls	r7, r3, #27
   b6fee:	d425      	bmi.n	b703c <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b6ff0:	07dd      	lsls	r5, r3, #31
   b6ff2:	d423      	bmi.n	b703c <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b6ff4:	11b3      	asrs	r3, r6, #6
   b6ff6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b6ffa:	f006 0508 	and.w	r5, r6, #8
   b6ffe:	432b      	orrs	r3, r5
   b7000:	430b      	orrs	r3, r1
   b7002:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b7004:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b7006:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b7008:	1883      	adds	r3, r0, r2
   b700a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b700e:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b7012:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b7016:	0572      	lsls	r2, r6, #21
   b7018:	d513      	bpl.n	b7042 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b701a:	b959      	cbnz	r1, b7034 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b701c:	78a3      	ldrb	r3, [r4, #2]
   b701e:	f043 0304 	orr.w	r3, r3, #4
   b7022:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b7024:	0473      	lsls	r3, r6, #17
   b7026:	d410      	bmi.n	b704a <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b7028:	2001      	movs	r0, #1
}
   b702a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b702c:	2303      	movs	r3, #3
   b702e:	e7d8      	b.n	b6fe2 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b7030:	2302      	movs	r3, #2
   b7032:	e7d6      	b.n	b6fe2 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b7034:	f000 fa73 	bl	b751e <_ZN9FatVolume9freeChainEm>
   b7038:	2800      	cmp	r0, #0
   b703a:	d1ef      	bne.n	b701c <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b703c:	2000      	movs	r0, #0
   b703e:	7020      	strb	r0, [r4, #0]
  return false;
   b7040:	e7f3      	b.n	b702a <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b7042:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b7044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7046:	61e3      	str	r3, [r4, #28]
   b7048:	e7ec      	b.n	b7024 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b704a:	69e1      	ldr	r1, [r4, #28]
   b704c:	4620      	mov	r0, r4
   b704e:	f7ff ff56 	bl	b6efe <_ZN7FatFile7seekSetEm>
   b7052:	2800      	cmp	r0, #0
   b7054:	d1e8      	bne.n	b7028 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b7056:	e7f1      	b.n	b703c <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b7058 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b7058:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b705a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b705c:	4604      	mov	r4, r0
  if (!isOpen()) {
   b705e:	b90b      	cbnz	r3, b7064 <_ZN7FatFile4syncEv+0xc>
    return true;
   b7060:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b7062:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b7064:	7883      	ldrb	r3, [r0, #2]
   b7066:	075a      	lsls	r2, r3, #29
   b7068:	d523      	bpl.n	b70b2 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b706a:	2101      	movs	r1, #1
   b706c:	f7ff fe52 	bl	b6d14 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b7070:	4605      	mov	r5, r0
   b7072:	b928      	cbnz	r0, b7080 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b7074:	7863      	ldrb	r3, [r4, #1]
   b7076:	f043 0301 	orr.w	r3, r3, #1
   b707a:	7063      	strb	r3, [r4, #1]
  return false;
   b707c:	2000      	movs	r0, #0
   b707e:	e7f0      	b.n	b7062 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b7080:	7803      	ldrb	r3, [r0, #0]
   b7082:	2be5      	cmp	r3, #229	; 0xe5
   b7084:	d0f6      	beq.n	b7074 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b7086:	7823      	ldrb	r3, [r4, #0]
   b7088:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b708a:	bf44      	itt	mi
   b708c:	69e3      	ldrmi	r3, [r4, #28]
   b708e:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b7090:	6a23      	ldr	r3, [r4, #32]
   b7092:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b7094:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b7096:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b7098:	4b09      	ldr	r3, [pc, #36]	; (b70c0 <_ZN7FatFile4syncEv+0x68>)
   b709a:	681b      	ldr	r3, [r3, #0]
   b709c:	b12b      	cbz	r3, b70aa <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b709e:	f100 0116 	add.w	r1, r0, #22
   b70a2:	3018      	adds	r0, #24
   b70a4:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b70a6:	8b2b      	ldrh	r3, [r5, #24]
   b70a8:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b70aa:	78a3      	ldrb	r3, [r4, #2]
   b70ac:	f023 0304 	bic.w	r3, r3, #4
   b70b0:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b70b2:	68a0      	ldr	r0, [r4, #8]
   b70b4:	f7ff fa50 	bl	b6558 <_ZN9FatVolume9cacheSyncEv>
   b70b8:	2800      	cmp	r0, #0
   b70ba:	d0db      	beq.n	b7074 <_ZN7FatFile4syncEv+0x1c>
   b70bc:	e7d0      	b.n	b7060 <_ZN7FatFile4syncEv+0x8>
   b70be:	bf00      	nop
   b70c0:	2003e644 	.word	0x2003e644

000b70c4 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b70c4:	b510      	push	{r4, lr}
   b70c6:	4604      	mov	r4, r0
  bool rtn = sync();
   b70c8:	f7ff ffc6 	bl	b7058 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b70cc:	2300      	movs	r3, #0
   b70ce:	7023      	strb	r3, [r4, #0]
}
   b70d0:	bd10      	pop	{r4, pc}

000b70d2 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b70d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   b70d4:	b093      	sub	sp, #76	; 0x4c
   b70d6:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b70d8:	2300      	movs	r3, #0
   b70da:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b70dc:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b70de:	9201      	str	r2, [sp, #4]
   b70e0:	4606      	mov	r6, r0
   b70e2:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b70e4:	b113      	cbz	r3, b70ec <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b70e6:	2000      	movs	r0, #0
}
   b70e8:	b013      	add	sp, #76	; 0x4c
   b70ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b70ec:	780b      	ldrb	r3, [r1, #0]
   b70ee:	f013 0f70 	tst.w	r3, #112	; 0x70
   b70f2:	d0f8      	beq.n	b70e6 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b70f4:	7813      	ldrb	r3, [r2, #0]
   b70f6:	2b2f      	cmp	r3, #47	; 0x2f
   b70f8:	d112      	bne.n	b7120 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b70fa:	9a01      	ldr	r2, [sp, #4]
   b70fc:	7813      	ldrb	r3, [r2, #0]
   b70fe:	2b2f      	cmp	r3, #47	; 0x2f
   b7100:	d102      	bne.n	b7108 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b7102:	3201      	adds	r2, #1
   b7104:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b7106:	e7f8      	b.n	b70fa <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b7108:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b710a:	b91b      	cbnz	r3, b7114 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b710c:	4630      	mov	r0, r6
   b710e:	f7ff fe10 	bl	b6d32 <_ZN7FatFile8openRootEP9FatVolume>
   b7112:	e7e9      	b.n	b70e8 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b7114:	a809      	add	r0, sp, #36	; 0x24
   b7116:	f7ff fd9f 	bl	b6c58 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b711a:	2800      	cmp	r0, #0
   b711c:	d0e3      	beq.n	b70e6 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b711e:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b7120:	9801      	ldr	r0, [sp, #4]
   b7122:	aa01      	add	r2, sp, #4
   b7124:	a903      	add	r1, sp, #12
   b7126:	f7ff fa4b 	bl	b65c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b712a:	2800      	cmp	r0, #0
   b712c:	d0db      	beq.n	b70e6 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b712e:	9b01      	ldr	r3, [sp, #4]
   b7130:	781b      	ldrb	r3, [r3, #0]
   b7132:	b19b      	cbz	r3, b715c <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b7134:	2300      	movs	r3, #0
   b7136:	aa03      	add	r2, sp, #12
   b7138:	4621      	mov	r1, r4
   b713a:	4630      	mov	r0, r6
   b713c:	f7ff fbd4 	bl	b68e8 <_ZN7FatFile4openEPS_P7fname_ti>
   b7140:	2800      	cmp	r0, #0
   b7142:	d0d0      	beq.n	b70e6 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b7144:	4635      	mov	r5, r6
   b7146:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7148:	ac09      	add	r4, sp, #36	; 0x24
   b714a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b714c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b714e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7150:	682b      	ldr	r3, [r5, #0]
   b7152:	6023      	str	r3, [r4, #0]
    close();
   b7154:	4630      	mov	r0, r6
   b7156:	f7ff ffb5 	bl	b70c4 <_ZN7FatFile5closeEv>
  while (1) {
   b715a:	e7e0      	b.n	b711e <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b715c:	463b      	mov	r3, r7
   b715e:	aa03      	add	r2, sp, #12
   b7160:	4621      	mov	r1, r4
   b7162:	4630      	mov	r0, r6
   b7164:	f7ff fbc0 	bl	b68e8 <_ZN7FatFile4openEPS_P7fname_ti>
   b7168:	e7be      	b.n	b70e8 <_ZN7FatFile4openEPS_PKci+0x16>

000b716a <_ZN7FatFile6removeEPS_PKc>:
bool FatFile::remove(FatFile* dirFile, const char* path) {
   b716a:	b500      	push	{lr}
   b716c:	b08b      	sub	sp, #44	; 0x2c
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b716e:	2300      	movs	r3, #0
   b7170:	460a      	mov	r2, r1
   b7172:	9301      	str	r3, [sp, #4]
  if (!file.open(dirFile, path, O_WRONLY)) {
   b7174:	4601      	mov	r1, r0
   b7176:	2301      	movs	r3, #1
   b7178:	a801      	add	r0, sp, #4
   b717a:	f7ff ffaa 	bl	b70d2 <_ZN7FatFile4openEPS_PKci>
   b717e:	b110      	cbz	r0, b7186 <_ZN7FatFile6removeEPS_PKc+0x1c>
  return file.remove();
   b7180:	a801      	add	r0, sp, #4
   b7182:	f7ff fafb 	bl	b677c <_ZN7FatFile6removeEv>
}
   b7186:	b00b      	add	sp, #44	; 0x2c
   b7188:	f85d fb04 	ldr.w	pc, [sp], #4

000b718c <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b718c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7190:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b7192:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7194:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b7196:	4604      	mov	r4, r0
   b7198:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b719a:	d55b      	bpl.n	b7254 <_ZN7FatFile5writeEPKvj+0xc8>
   b719c:	7883      	ldrb	r3, [r0, #2]
   b719e:	079a      	lsls	r2, r3, #30
   b71a0:	d558      	bpl.n	b7254 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b71a2:	071b      	lsls	r3, r3, #28
   b71a4:	d451      	bmi.n	b724a <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b71a6:	6963      	ldr	r3, [r4, #20]
   b71a8:	43db      	mvns	r3, r3
   b71aa:	42bb      	cmp	r3, r7
   b71ac:	d352      	bcc.n	b7254 <_ZN7FatFile5writeEPKvj+0xc8>
   b71ae:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b71b0:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b71b4:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b71b6:	f1b8 0f00 	cmp.w	r8, #0
   b71ba:	f000 8091 	beq.w	b72e0 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b71be:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b71c0:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b71c2:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b71c6:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b71ca:	d10e      	bne.n	b71ea <_ZN7FatFile5writeEPKvj+0x5e>
   b71cc:	b96d      	cbnz	r5, b71ea <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b71ce:	6921      	ldr	r1, [r4, #16]
   b71d0:	2900      	cmp	r1, #0
   b71d2:	d046      	beq.n	b7262 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b71d4:	4652      	mov	r2, sl
   b71d6:	f000 f902 	bl	b73de <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b71da:	2800      	cmp	r0, #0
   b71dc:	db3a      	blt.n	b7254 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b71de:	d104      	bne.n	b71ea <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b71e0:	4620      	mov	r0, r4
   b71e2:	f7ff fd4f 	bl	b6c84 <_ZN7FatFile10addClusterEv>
   b71e6:	2800      	cmp	r0, #0
   b71e8:	d034      	beq.n	b7254 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b71ea:	6921      	ldr	r1, [r4, #16]
   b71ec:	68a0      	ldr	r0, [r4, #8]
   b71ee:	f000 f8f0 	bl	b73d2 <_ZNK9FatVolume17clusterFirstBlockEm>
   b71f2:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b71f4:	68a0      	ldr	r0, [r4, #8]
   b71f6:	b915      	cbnz	r5, b71fe <_ZN7FatFile5writeEPKvj+0x72>
   b71f8:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b71fc:	d23f      	bcs.n	b727e <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b71fe:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b7202:	4546      	cmp	r6, r8
   b7204:	bf28      	it	cs
   b7206:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b7208:	2d00      	cmp	r5, #0
   b720a:	d136      	bne.n	b727a <_ZN7FatFile5writeEPKvj+0xee>
   b720c:	6962      	ldr	r2, [r4, #20]
   b720e:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b7210:	429a      	cmp	r2, r3
   b7212:	bf34      	ite	cc
   b7214:	2201      	movcc	r2, #1
   b7216:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b7218:	3024      	adds	r0, #36	; 0x24
   b721a:	f000 f8b7 	bl	b738c <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b721e:	b1c8      	cbz	r0, b7254 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b7220:	4428      	add	r0, r5
   b7222:	4632      	mov	r2, r6
   b7224:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b7226:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b7228:	f006 f993 	bl	bd552 <memcpy>
      if (512 == (n + blockOffset)) {
   b722c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b7230:	d104      	bne.n	b723c <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b7232:	68a0      	ldr	r0, [r4, #8]
   b7234:	3024      	adds	r0, #36	; 0x24
   b7236:	f000 f881 	bl	b733c <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b723a:	b158      	cbz	r0, b7254 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b723c:	6963      	ldr	r3, [r4, #20]
   b723e:	4433      	add	r3, r6
   b7240:	6163      	str	r3, [r4, #20]
    src += n;
   b7242:	44b1      	add	r9, r6
    nToWrite -= n;
   b7244:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b7248:	e7b4      	b.n	b71b4 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b724a:	69c1      	ldr	r1, [r0, #28]
   b724c:	f7ff fe57 	bl	b6efe <_ZN7FatFile7seekSetEm>
   b7250:	2800      	cmp	r0, #0
   b7252:	d1a8      	bne.n	b71a6 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b7254:	7863      	ldrb	r3, [r4, #1]
   b7256:	f043 0301 	orr.w	r3, r3, #1
   b725a:	7063      	strb	r3, [r4, #1]
  return -1;
   b725c:	f04f 30ff 	mov.w	r0, #4294967295
   b7260:	e050      	b.n	b7304 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b7262:	6a23      	ldr	r3, [r4, #32]
   b7264:	b93b      	cbnz	r3, b7276 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b7266:	4620      	mov	r0, r4
   b7268:	f7ff fd0c 	bl	b6c84 <_ZN7FatFile10addClusterEv>
   b726c:	2800      	cmp	r0, #0
   b726e:	d0f1      	beq.n	b7254 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b7270:	6923      	ldr	r3, [r4, #16]
   b7272:	6223      	str	r3, [r4, #32]
   b7274:	e7b9      	b.n	b71ea <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b7276:	6123      	str	r3, [r4, #16]
   b7278:	e7b7      	b.n	b71ea <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b727a:	2201      	movs	r2, #1
   b727c:	e7cc      	b.n	b7218 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b727e:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b7282:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b7284:	d31b      	bcc.n	b72be <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b7286:	f890 c004 	ldrb.w	ip, [r0, #4]
   b728a:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b728e:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b7290:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b7294:	4573      	cmp	r3, lr
   b7296:	bf28      	it	cs
   b7298:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b729a:	4291      	cmp	r1, r2
      n = 512*nb;
   b729c:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b72a0:	d307      	bcc.n	b72b2 <_ZN7FatFile5writeEPKvj+0x126>
   b72a2:	441a      	add	r2, r3
   b72a4:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b72a6:	bf82      	ittt	hi
   b72a8:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
   b72ac:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b72b0:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b72b2:	68a5      	ldr	r5, [r4, #8]
   b72b4:	464a      	mov	r2, r9
   b72b6:	6828      	ldr	r0, [r5, #0]
   b72b8:	f000 fc4b 	bl	b7b52 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b72bc:	e7bd      	b.n	b723a <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b72be:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b72c0:	bf02      	ittt	eq
   b72c2:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
   b72c6:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b72ca:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b72cc:	68a3      	ldr	r3, [r4, #8]
   b72ce:	464a      	mov	r2, r9
   b72d0:	6818      	ldr	r0, [r3, #0]
   b72d2:	f000 fbc8 	bl	b7a66 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b72d6:	2800      	cmp	r0, #0
   b72d8:	d0bc      	beq.n	b7254 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b72da:	f44f 7600 	mov.w	r6, #512	; 0x200
   b72de:	e7ad      	b.n	b723c <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b72e0:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b72e2:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b72e4:	42b2      	cmp	r2, r6
   b72e6:	d204      	bcs.n	b72f2 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b72e8:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b72ea:	f043 0304 	orr.w	r3, r3, #4
   b72ee:	70a3      	strb	r3, [r4, #2]
   b72f0:	e003      	b.n	b72fa <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b72f2:	4a08      	ldr	r2, [pc, #32]	; (b7314 <_ZN7FatFile5writeEPKvj+0x188>)
   b72f4:	6812      	ldr	r2, [r2, #0]
   b72f6:	2a00      	cmp	r2, #0
   b72f8:	d1f7      	bne.n	b72ea <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b72fa:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b72fe:	2b00      	cmp	r3, #0
   b7300:	db02      	blt.n	b7308 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b7302:	4638      	mov	r0, r7
}
   b7304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b7308:	4620      	mov	r0, r4
   b730a:	f7ff fea5 	bl	b7058 <_ZN7FatFile4syncEv>
   b730e:	2800      	cmp	r0, #0
   b7310:	d1f7      	bne.n	b7302 <_ZN7FatFile5writeEPKvj+0x176>
   b7312:	e79f      	b.n	b7254 <_ZN7FatFile5writeEPKvj+0xc8>
   b7314:	2003e644 	.word	0x2003e644

000b7318 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7318:	b513      	push	{r0, r1, r4, lr}
   b731a:	4604      	mov	r4, r0
    }
   b731c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b731e:	b159      	cbz	r1, b7338 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7320:	9101      	str	r1, [sp, #4]
   b7322:	f006 f9b4 	bl	bd68e <strlen>
   b7326:	6823      	ldr	r3, [r4, #0]
   b7328:	9901      	ldr	r1, [sp, #4]
   b732a:	68db      	ldr	r3, [r3, #12]
   b732c:	4602      	mov	r2, r0
   b732e:	4620      	mov	r0, r4
    }
   b7330:	b002      	add	sp, #8
   b7332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7336:	4718      	bx	r3
    }
   b7338:	b002      	add	sp, #8
   b733a:	bd10      	pop	{r4, pc}

000b733c <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b733c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b733e:	7803      	ldrb	r3, [r0, #0]
   b7340:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b7342:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b7344:	d520      	bpl.n	b7388 <_ZN8FatCache4syncEv+0x4c>
   b7346:	6843      	ldr	r3, [r0, #4]
   b7348:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b734a:	f100 020c 	add.w	r2, r0, #12
   b734e:	6818      	ldr	r0, [r3, #0]
   b7350:	9201      	str	r2, [sp, #4]
   b7352:	f000 fb88 	bl	b7a66 <_ZN9SdSpiCard10writeBlockEmPKh>
   b7356:	9a01      	ldr	r2, [sp, #4]
   b7358:	4605      	mov	r5, r0
   b735a:	b918      	cbnz	r0, b7364 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b735c:	2500      	movs	r5, #0
}
   b735e:	4628      	mov	r0, r5
   b7360:	b003      	add	sp, #12
   b7362:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b7364:	7823      	ldrb	r3, [r4, #0]
   b7366:	079b      	lsls	r3, r3, #30
   b7368:	d404      	bmi.n	b7374 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b736a:	7823      	ldrb	r3, [r4, #0]
   b736c:	f023 0301 	bic.w	r3, r3, #1
   b7370:	7023      	strb	r3, [r4, #0]
   b7372:	e7f4      	b.n	b735e <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b7374:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b7378:	6919      	ldr	r1, [r3, #16]
   b737a:	4401      	add	r1, r0
   b737c:	6818      	ldr	r0, [r3, #0]
   b737e:	f000 fb72 	bl	b7a66 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b7382:	2800      	cmp	r0, #0
   b7384:	d1f1      	bne.n	b736a <_ZN8FatCache4syncEv+0x2e>
   b7386:	e7e9      	b.n	b735c <_ZN8FatCache4syncEv+0x20>
  return true;
   b7388:	2501      	movs	r5, #1
   b738a:	e7e8      	b.n	b735e <_ZN8FatCache4syncEv+0x22>

000b738c <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b738c:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b738e:	6883      	ldr	r3, [r0, #8]
   b7390:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b7392:	4604      	mov	r4, r0
   b7394:	460e      	mov	r6, r1
   b7396:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b7398:	d009      	beq.n	b73ae <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b739a:	f7ff ffcf 	bl	b733c <_ZN8FatCache4syncEv>
   b739e:	b908      	cbnz	r0, b73a4 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b73a0:	2000      	movs	r0, #0
}
   b73a2:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b73a4:	076b      	lsls	r3, r5, #29
   b73a6:	d50a      	bpl.n	b73be <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b73a8:	2300      	movs	r3, #0
   b73aa:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b73ac:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b73ae:	7822      	ldrb	r2, [r4, #0]
   b73b0:	f005 0503 	and.w	r5, r5, #3
   b73b4:	4620      	mov	r0, r4
   b73b6:	4315      	orrs	r5, r2
   b73b8:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b73bc:	e7f1      	b.n	b73a2 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b73be:	6863      	ldr	r3, [r4, #4]
   b73c0:	f104 020c 	add.w	r2, r4, #12
   b73c4:	6818      	ldr	r0, [r3, #0]
   b73c6:	4631      	mov	r1, r6
   b73c8:	f000 fac4 	bl	b7954 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b73cc:	2800      	cmp	r0, #0
   b73ce:	d1eb      	bne.n	b73a8 <_ZN8FatCache4readEmh+0x1c>
   b73d0:	e7e6      	b.n	b73a0 <_ZN8FatCache4readEmh+0x14>

000b73d2 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b73d2:	7983      	ldrb	r3, [r0, #6]
   b73d4:	6940      	ldr	r0, [r0, #20]
   b73d6:	3902      	subs	r1, #2
   b73d8:	4099      	lsls	r1, r3
}
   b73da:	4408      	add	r0, r1
   b73dc:	4770      	bx	lr

000b73de <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b73de:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b73e0:	b570      	push	{r4, r5, r6, lr}
   b73e2:	4605      	mov	r5, r0
   b73e4:	460c      	mov	r4, r1
   b73e6:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b73e8:	d802      	bhi.n	b73f0 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b73ea:	f04f 30ff 	mov.w	r0, #4294967295
}
   b73ee:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b73f0:	69c3      	ldr	r3, [r0, #28]
   b73f2:	428b      	cmp	r3, r1
   b73f4:	d3f9      	bcc.n	b73ea <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b73f6:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b73f8:	2b20      	cmp	r3, #32
   b73fa:	d116      	bne.n	b742a <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b73fc:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b73fe:	2202      	movs	r2, #2
   b7400:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7404:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7408:	f7ff ffc0 	bl	b738c <_ZN8FatCache4readEmh>
    if (!pc) {
   b740c:	2800      	cmp	r0, #0
   b740e:	d0ec      	beq.n	b73ea <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b7410:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7414:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b7418:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b741c:	69ea      	ldr	r2, [r5, #28]
   b741e:	429a      	cmp	r2, r3
  *value = next;
   b7420:	bf26      	itte	cs
   b7422:	6033      	strcs	r3, [r6, #0]
  return 1;
   b7424:	2001      	movcs	r0, #1
    return 0;
   b7426:	2000      	movcc	r0, #0
   b7428:	e7e1      	b.n	b73ee <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b742a:	2b10      	cmp	r3, #16
   b742c:	d1dd      	bne.n	b73ea <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b742e:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7432:	6981      	ldr	r1, [r0, #24]
   b7434:	2202      	movs	r2, #2
   b7436:	4419      	add	r1, r3
   b7438:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b743c:	f7ff ffa6 	bl	b738c <_ZN8FatCache4readEmh>
    if (!pc) {
   b7440:	2800      	cmp	r0, #0
   b7442:	d0d2      	beq.n	b73ea <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b7444:	b2e4      	uxtb	r4, r4
   b7446:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b744a:	e7e7      	b.n	b741c <_ZN9FatVolume6fatGetEmPm+0x3e>

000b744c <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b744c:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b744e:	b538      	push	{r3, r4, r5, lr}
   b7450:	460c      	mov	r4, r1
   b7452:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7454:	d801      	bhi.n	b745a <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b7456:	2000      	movs	r0, #0
}
   b7458:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b745a:	69c3      	ldr	r3, [r0, #28]
   b745c:	428b      	cmp	r3, r1
   b745e:	d3fa      	bcc.n	b7456 <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b7460:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7462:	2b20      	cmp	r3, #32
   b7464:	d10f      	bne.n	b7486 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b7466:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7468:	2203      	movs	r2, #3
   b746a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b746e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7472:	f7ff ff8b 	bl	b738c <_ZN8FatCache4readEmh>
    if (!pc) {
   b7476:	2800      	cmp	r0, #0
   b7478:	d0ed      	beq.n	b7456 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b747a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b747e:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b7482:	2001      	movs	r0, #1
   b7484:	e7e8      	b.n	b7458 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b7486:	2b10      	cmp	r3, #16
   b7488:	d1e5      	bne.n	b7456 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b748a:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b748e:	6981      	ldr	r1, [r0, #24]
   b7490:	2203      	movs	r2, #3
   b7492:	4419      	add	r1, r3
   b7494:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7498:	f7ff ff78 	bl	b738c <_ZN8FatCache4readEmh>
    if (!pc) {
   b749c:	2800      	cmp	r0, #0
   b749e:	d0da      	beq.n	b7456 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b74a0:	b2e4      	uxtb	r4, r4
   b74a2:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b74a6:	e7ec      	b.n	b7482 <_ZN9FatVolume6fatPutEmm+0x36>

000b74a8 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b74a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b74ac:	68c4      	ldr	r4, [r0, #12]
   b74ae:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b74b0:	4605      	mov	r5, r0
   b74b2:	460e      	mov	r6, r1
   b74b4:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b74b6:	d301      	bcc.n	b74bc <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b74b8:	2701      	movs	r7, #1
   b74ba:	e001      	b.n	b74c0 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b74bc:	460c      	mov	r4, r1
    setStart = false;
   b74be:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b74c0:	69eb      	ldr	r3, [r5, #28]
    find++;
   b74c2:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b74c4:	42a3      	cmp	r3, r4
   b74c6:	d202      	bcs.n	b74ce <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b74c8:	b9c7      	cbnz	r7, b74fc <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b74ca:	68ec      	ldr	r4, [r5, #12]
   b74cc:	e7f4      	b.n	b74b8 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b74ce:	42a6      	cmp	r6, r4
   b74d0:	d014      	beq.n	b74fc <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b74d2:	aa01      	add	r2, sp, #4
   b74d4:	4621      	mov	r1, r4
   b74d6:	4628      	mov	r0, r5
   b74d8:	f7ff ff81 	bl	b73de <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b74dc:	2800      	cmp	r0, #0
   b74de:	db0d      	blt.n	b74fc <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b74e0:	d0ee      	beq.n	b74c0 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b74e2:	9b01      	ldr	r3, [sp, #4]
   b74e4:	2b00      	cmp	r3, #0
   b74e6:	d1eb      	bne.n	b74c0 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b74e8:	b107      	cbz	r7, b74ec <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b74ea:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b74ec:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b74f0:	4621      	mov	r1, r4
   b74f2:	4628      	mov	r0, r5
   b74f4:	f7ff ffaa 	bl	b744c <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b74f8:	4607      	mov	r7, r0
   b74fa:	b920      	cbnz	r0, b7506 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b74fc:	2700      	movs	r7, #0
}
   b74fe:	4638      	mov	r0, r7
   b7500:	b002      	add	sp, #8
   b7502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b7506:	b916      	cbnz	r6, b750e <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b7508:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b750c:	e7f7      	b.n	b74fe <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b750e:	4622      	mov	r2, r4
   b7510:	4631      	mov	r1, r6
   b7512:	4628      	mov	r0, r5
   b7514:	f7ff ff9a 	bl	b744c <_ZN9FatVolume6fatPutEmm>
   b7518:	2800      	cmp	r0, #0
   b751a:	d1f5      	bne.n	b7508 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b751c:	e7ee      	b.n	b74fc <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b751e <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b751e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7520:	4605      	mov	r5, r0
   b7522:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b7524:	aa01      	add	r2, sp, #4
   b7526:	4621      	mov	r1, r4
   b7528:	4628      	mov	r0, r5
   b752a:	f7ff ff58 	bl	b73de <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b752e:	1e06      	subs	r6, r0, #0
   b7530:	db10      	blt.n	b7554 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b7532:	2200      	movs	r2, #0
   b7534:	4621      	mov	r1, r4
   b7536:	4628      	mov	r0, r5
   b7538:	f7ff ff88 	bl	b744c <_ZN9FatVolume6fatPutEmm>
   b753c:	b150      	cbz	r0, b7554 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b753e:	68eb      	ldr	r3, [r5, #12]
   b7540:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b7542:	bf24      	itt	cs
   b7544:	f104 34ff 	addcs.w	r4, r4, #4294967295
   b7548:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b754a:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b754c:	2e00      	cmp	r6, #0
   b754e:	d1e9      	bne.n	b7524 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b7550:	b002      	add	sp, #8
   b7552:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7554:	2000      	movs	r0, #0
   b7556:	e7fb      	b.n	b7550 <_ZN9FatVolume9freeChainEm+0x32>

000b7558 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b7558:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b755a:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b755c:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b755e:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b7560:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
   b7564:	4604      	mov	r4, r0
  m_fatType = 0;
   b7566:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b7568:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b756c:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b756e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7572:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b7574:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b7578:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b757c:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b7580:	460d      	mov	r5, r1
   b7582:	b1b9      	cbz	r1, b75b4 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b7584:	2904      	cmp	r1, #4
   b7586:	d901      	bls.n	b758c <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b7588:	2000      	movs	r0, #0
}
   b758a:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b758c:	4611      	mov	r1, r2
   b758e:	4630      	mov	r0, r6
   b7590:	f7ff fefc 	bl	b738c <_ZN8FatCache4readEmh>
    if (!pc) {
   b7594:	2800      	cmp	r0, #0
   b7596:	d0f7      	beq.n	b7588 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b7598:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b759c:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b75a0:	065b      	lsls	r3, r3, #25
   b75a2:	d1f1      	bne.n	b7588 <_ZN9FatVolume4initEh+0x30>
   b75a4:	f105 011b 	add.w	r1, r5, #27
   b75a8:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b75ac:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b75b0:	2d00      	cmp	r5, #0
   b75b2:	d0e9      	beq.n	b7588 <_ZN9FatVolume4initEh+0x30>
   b75b4:	2200      	movs	r2, #0
   b75b6:	4629      	mov	r1, r5
   b75b8:	4630      	mov	r0, r6
   b75ba:	f7ff fee7 	bl	b738c <_ZN8FatCache4readEmh>
  if (!pc) {
   b75be:	2800      	cmp	r0, #0
   b75c0:	d0e2      	beq.n	b7588 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b75c2:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b75c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b75ca:	d1dd      	bne.n	b7588 <_ZN9FatVolume4initEh+0x30>
   b75cc:	7c03      	ldrb	r3, [r0, #16]
   b75ce:	2b02      	cmp	r3, #2
   b75d0:	d1da      	bne.n	b7588 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b75d2:	89c3      	ldrh	r3, [r0, #14]
   b75d4:	2b00      	cmp	r3, #0
   b75d6:	d0d7      	beq.n	b7588 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b75d8:	7b41      	ldrb	r1, [r0, #13]
   b75da:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b75dc:	1e4b      	subs	r3, r1, #1
   b75de:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b75e0:	2300      	movs	r3, #0
   b75e2:	71a3      	strb	r3, [r4, #6]
   b75e4:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b75e6:	2301      	movs	r3, #1
   b75e8:	4299      	cmp	r1, r3
   b75ea:	d007      	beq.n	b75fc <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b75ec:	3e01      	subs	r6, #1
   b75ee:	d0cb      	beq.n	b7588 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b75f0:	79a2      	ldrb	r2, [r4, #6]
   b75f2:	005b      	lsls	r3, r3, #1
   b75f4:	3201      	adds	r2, #1
   b75f6:	b2db      	uxtb	r3, r3
   b75f8:	71a2      	strb	r2, [r4, #6]
   b75fa:	e7f5      	b.n	b75e8 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b75fc:	8ac1      	ldrh	r1, [r0, #22]
   b75fe:	b901      	cbnz	r1, b7602 <_ZN9FatVolume4initEh+0xaa>
   b7600:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b7602:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b7604:	89c3      	ldrh	r3, [r0, #14]
   b7606:	442b      	add	r3, r5
   b7608:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b760a:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b760e:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b7610:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b7614:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b7616:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b761a:	0149      	lsls	r1, r1, #5
   b761c:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b7620:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b7624:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b7626:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b762a:	b902      	cbnz	r2, b762e <_ZN9FatVolume4initEh+0xd6>
   b762c:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b762e:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b7630:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7632:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b7634:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b7636:	1c4b      	adds	r3, r1, #1
   b7638:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b763a:	f640 73f4 	movw	r3, #4084	; 0xff4
   b763e:	4299      	cmp	r1, r3
   b7640:	d802      	bhi.n	b7648 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b7642:	230c      	movs	r3, #12
   b7644:	71e3      	strb	r3, [r4, #7]
   b7646:	e79f      	b.n	b7588 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b7648:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b764c:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b764e:	bf85      	ittet	hi
   b7650:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b7652:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b7654:	2310      	movls	r3, #16
    m_fatType = 32;
   b7656:	2320      	movhi	r3, #32
   b7658:	71e3      	strb	r3, [r4, #7]
  return true;
   b765a:	2001      	movs	r0, #1
   b765c:	e795      	b.n	b758a <_ZN9FatVolume4initEh+0x32>

000b765e <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b765e:	f000 bacb 	b.w	b7bf8 <_ZN14SdSpiAltDriver4sendEh>

000b7662 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b7662:	f000 baae 	b.w	b7bc2 <_ZN14SdSpiAltDriver7receiveEv>
	...

000b7668 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7668:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b766a:	4e0e      	ldr	r6, [pc, #56]	; (b76a4 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b766c:	460d      	mov	r5, r1
   b766e:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b7670:	f000 ffa4 	bl	b85bc <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7674:	6833      	ldr	r3, [r6, #0]
   b7676:	1ac0      	subs	r0, r0, r3
   b7678:	4b0b      	ldr	r3, [pc, #44]	; (b76a8 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b767a:	4298      	cmp	r0, r3
   b767c:	d908      	bls.n	b7690 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b767e:	f000 ffa5 	bl	b85cc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7682:	4b0a      	ldr	r3, [pc, #40]	; (b76ac <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b7684:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b7686:	f001 faa9 	bl	b8bdc <spark_process>
   b768a:	f000 ff97 	bl	b85bc <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b768e:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7690:	f000 ff9c 	bl	b85cc <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b7694:	b280      	uxth	r0, r0
   b7696:	1b40      	subs	r0, r0, r5
}
   b7698:	42a0      	cmp	r0, r4
   b769a:	bfd4      	ite	le
   b769c:	2000      	movle	r0, #0
   b769e:	2001      	movgt	r0, #1
   b76a0:	bd70      	pop	{r4, r5, r6, pc}
   b76a2:	bf00      	nop
   b76a4:	2003e64c 	.word	0x2003e64c
   b76a8:	000186a0 	.word	0x000186a0
   b76ac:	2003e740 	.word	0x2003e740

000b76b0 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b76b0:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b76b2:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b76b4:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b76b6:	b94d      	cbnz	r5, b76cc <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b76b8:	6840      	ldr	r0, [r0, #4]
   b76ba:	f000 fa6b 	bl	b7b94 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b76be:	6863      	ldr	r3, [r4, #4]
   b76c0:	4629      	mov	r1, r5
   b76c2:	7d18      	ldrb	r0, [r3, #20]
   b76c4:	f005 f843 	bl	bc74e <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b76c8:	2301      	movs	r3, #1
   b76ca:	7223      	strb	r3, [r4, #8]
  }
}
   b76cc:	bd38      	pop	{r3, r4, r5, pc}

000b76ce <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b76ce:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b76d0:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b76d2:	4604      	mov	r4, r0
  if (m_spiActive) {
   b76d4:	b16b      	cbz	r3, b76f2 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b76d6:	6843      	ldr	r3, [r0, #4]
   b76d8:	2101      	movs	r1, #1
   b76da:	7d18      	ldrb	r0, [r3, #20]
   b76dc:	f005 f837 	bl	bc74e <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b76e0:	6860      	ldr	r0, [r4, #4]
   b76e2:	21ff      	movs	r1, #255	; 0xff
   b76e4:	f7ff ffbb 	bl	b765e <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b76e8:	6860      	ldr	r0, [r4, #4]
   b76ea:	f000 fa67 	bl	b7bbc <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b76ee:	2300      	movs	r3, #0
   b76f0:	7223      	strb	r3, [r4, #8]
  }
}
   b76f2:	bd10      	pop	{r4, pc}

000b76f4 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b76f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b76f6:	4604      	mov	r4, r0
   b76f8:	460d      	mov	r5, r1
   b76fa:	4616      	mov	r6, r2
   b76fc:	f000 ff66 	bl	b85cc <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b7700:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b7702:	6860      	ldr	r0, [r4, #4]
   b7704:	f7ff ffad 	bl	b7662 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7708:	28ff      	cmp	r0, #255	; 0xff
   b770a:	7260      	strb	r0, [r4, #9]
   b770c:	d10e      	bne.n	b772c <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b770e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7712:	4639      	mov	r1, r7
   b7714:	4620      	mov	r0, r4
   b7716:	f7ff ffa7 	bl	b7668 <_ZN9SdSpiCard10isTimedOutEtt>
   b771a:	2800      	cmp	r0, #0
   b771c:	d0f1      	beq.n	b7702 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b771e:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b7720:	4620      	mov	r0, r4
   b7722:	7023      	strb	r3, [r4, #0]
   b7724:	f7ff ffd3 	bl	b76ce <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7728:	2000      	movs	r0, #0
}
   b772a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b772c:	28fe      	cmp	r0, #254	; 0xfe
   b772e:	d001      	beq.n	b7734 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b7730:	2350      	movs	r3, #80	; 0x50
   b7732:	e7f5      	b.n	b7720 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b7734:	6860      	ldr	r0, [r4, #4]
   b7736:	4632      	mov	r2, r6
   b7738:	4629      	mov	r1, r5
   b773a:	f000 fa47 	bl	b7bcc <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b773e:	7260      	strb	r0, [r4, #9]
   b7740:	b108      	cbz	r0, b7746 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b7742:	2360      	movs	r3, #96	; 0x60
   b7744:	e7ec      	b.n	b7720 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b7746:	6860      	ldr	r0, [r4, #4]
   b7748:	f7ff ff8b 	bl	b7662 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b774c:	6860      	ldr	r0, [r4, #4]
   b774e:	f7ff ff88 	bl	b7662 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b7752:	2001      	movs	r0, #1
   b7754:	e7e9      	b.n	b772a <_ZN9SdSpiCard8readDataEPhj+0x36>

000b7756 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b7756:	b570      	push	{r4, r5, r6, lr}
   b7758:	4604      	mov	r4, r0
   b775a:	460e      	mov	r6, r1
   b775c:	f000 ff36 	bl	b85cc <HAL_Timer_Get_Milli_Seconds>
   b7760:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b7762:	4632      	mov	r2, r6
   b7764:	4629      	mov	r1, r5
   b7766:	4620      	mov	r0, r4
   b7768:	f7ff ff7e 	bl	b7668 <_ZN9SdSpiCard10isTimedOutEtt>
   b776c:	b930      	cbnz	r0, b777c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b776e:	6860      	ldr	r0, [r4, #4]
   b7770:	f7ff ff77 	bl	b7662 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7774:	28ff      	cmp	r0, #255	; 0xff
   b7776:	d1f4      	bne.n	b7762 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b7778:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b777a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b777c:	2000      	movs	r0, #0
   b777e:	e7fc      	b.n	b777a <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b7780 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b7782:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7784:	9201      	str	r2, [sp, #4]
   b7786:	4604      	mov	r4, r0
   b7788:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b778a:	b90b      	cbnz	r3, b7790 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b778c:	f7ff ff90 	bl	b76b0 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b7790:	b125      	cbz	r5, b779c <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b7792:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b7796:	4620      	mov	r0, r4
   b7798:	f7ff ffdd 	bl	b7756 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b779c:	6860      	ldr	r0, [r4, #4]
   b779e:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b77a2:	f7ff ff5c 	bl	b765e <_ZN9SdSpiCard7spiSendEh.isra.0>
   b77a6:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b77a8:	af01      	add	r7, sp, #4
   b77aa:	5db9      	ldrb	r1, [r7, r6]
   b77ac:	6860      	ldr	r0, [r4, #4]
   b77ae:	f7ff ff56 	bl	b765e <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b77b2:	3e01      	subs	r6, #1
   b77b4:	d2f9      	bcs.n	b77aa <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b77b6:	2d00      	cmp	r5, #0
   b77b8:	6860      	ldr	r0, [r4, #4]
   b77ba:	bf0c      	ite	eq
   b77bc:	2195      	moveq	r1, #149	; 0x95
   b77be:	2187      	movne	r1, #135	; 0x87
   b77c0:	f7ff ff4d 	bl	b765e <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b77c4:	6860      	ldr	r0, [r4, #4]
   b77c6:	f7ff ff4c 	bl	b7662 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b77ca:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b77cc:	6860      	ldr	r0, [r4, #4]
   b77ce:	f7ff ff48 	bl	b7662 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b77d2:	0603      	lsls	r3, r0, #24
   b77d4:	7260      	strb	r0, [r4, #9]
   b77d6:	d503      	bpl.n	b77e0 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b77d8:	3d01      	subs	r5, #1
   b77da:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b77de:	d1f5      	bne.n	b77cc <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b77e0:	b003      	add	sp, #12
   b77e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b77e4 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b77e4:	b570      	push	{r4, r5, r6, lr}
   b77e6:	4604      	mov	r4, r0
   b77e8:	460d      	mov	r5, r1
   b77ea:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b77ec:	2137      	movs	r1, #55	; 0x37
   b77ee:	2200      	movs	r2, #0
   b77f0:	f7ff ffc6 	bl	b7780 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b77f4:	4632      	mov	r2, r6
   b77f6:	4629      	mov	r1, r5
   b77f8:	4620      	mov	r0, r4
  }
   b77fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b77fe:	f7ff bfbf 	b.w	b7780 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b7804 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b7808:	2500      	movs	r5, #0
   b780a:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b780c:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b780e:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b7810:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7812:	4604      	mov	r4, r0
   b7814:	4690      	mov	r8, r2
   b7816:	461e      	mov	r6, r3
   b7818:	f000 fed8 	bl	b85cc <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b781c:	4641      	mov	r1, r8
   b781e:	4607      	mov	r7, r0
   b7820:	6860      	ldr	r0, [r4, #4]
   b7822:	f000 f9bb 	bl	b7b9c <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b7826:	6863      	ldr	r3, [r4, #4]
   b7828:	4a49      	ldr	r2, [pc, #292]	; (b7950 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b782a:	721d      	strb	r5, [r3, #8]
   b782c:	2501      	movs	r5, #1
   b782e:	60da      	str	r2, [r3, #12]
   b7830:	821d      	strh	r5, [r3, #16]
  spiStart();
   b7832:	4620      	mov	r0, r4
   b7834:	f7ff ff3c 	bl	b76b0 <_ZN9SdSpiCard8spiStartEv>
   b7838:	6863      	ldr	r3, [r4, #4]
   b783a:	4629      	mov	r1, r5
   b783c:	7d18      	ldrb	r0, [r3, #20]
   b783e:	f004 ff86 	bl	bc74e <digitalWrite>
   b7842:	250a      	movs	r5, #10
    spiSend(0XFF);
   b7844:	6860      	ldr	r0, [r4, #4]
   b7846:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b7848:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b784a:	f7ff ff08 	bl	b765e <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b784e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7852:	d1f7      	bne.n	b7844 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b7854:	6863      	ldr	r3, [r4, #4]
   b7856:	4629      	mov	r1, r5
   b7858:	7d18      	ldrb	r0, [r3, #20]
   b785a:	f004 ff78 	bl	bc74e <digitalWrite>
  }
   b785e:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b7860:	2200      	movs	r2, #0
   b7862:	4611      	mov	r1, r2
   b7864:	4620      	mov	r0, r4
   b7866:	f7ff ff8b 	bl	b7780 <_ZN9SdSpiCard11cardCommandEhm>
   b786a:	2801      	cmp	r0, #1
   b786c:	4680      	mov	r8, r0
   b786e:	d018      	beq.n	b78a2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b7870:	3d01      	subs	r5, #1
   b7872:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7876:	d107      	bne.n	b7888 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b7878:	2320      	movs	r3, #32
  spiStop();
   b787a:	4620      	mov	r0, r4
   b787c:	7023      	strb	r3, [r4, #0]
   b787e:	f7ff ff26 	bl	b76ce <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7882:	2000      	movs	r0, #0
}
   b7884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b7888:	6860      	ldr	r0, [r4, #4]
   b788a:	21fd      	movs	r1, #253	; 0xfd
   b788c:	f7ff fee7 	bl	b765e <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7890:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b7894:	6860      	ldr	r0, [r4, #4]
   b7896:	f7ff fee4 	bl	b7662 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b789a:	f1b8 0801 	subs.w	r8, r8, #1
   b789e:	d1f9      	bne.n	b7894 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b78a0:	e7de      	b.n	b7860 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b78a2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b78a6:	2108      	movs	r1, #8
   b78a8:	4620      	mov	r0, r4
   b78aa:	f7ff ff69 	bl	b7780 <_ZN9SdSpiCard11cardCommandEhm>
   b78ae:	2805      	cmp	r0, #5
   b78b0:	d114      	bne.n	b78dc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b78b2:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b78b6:	2500      	movs	r5, #0
   b78b8:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b78ba:	462a      	mov	r2, r5
   b78bc:	2129      	movs	r1, #41	; 0x29
   b78be:	4620      	mov	r0, r4
   b78c0:	f7ff ff90 	bl	b77e4 <_ZN9SdSpiCard8cardAcmdEhm>
   b78c4:	4602      	mov	r2, r0
   b78c6:	b1d8      	cbz	r0, b7900 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b78c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b78cc:	4639      	mov	r1, r7
   b78ce:	4620      	mov	r0, r4
   b78d0:	f7ff feca 	bl	b7668 <_ZN9SdSpiCard10isTimedOutEtt>
   b78d4:	2800      	cmp	r0, #0
   b78d6:	d0f0      	beq.n	b78ba <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b78d8:	2343      	movs	r3, #67	; 0x43
   b78da:	e7ce      	b.n	b787a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b78dc:	2504      	movs	r5, #4
      m_status = spiReceive();
   b78de:	6860      	ldr	r0, [r4, #4]
   b78e0:	f7ff febf 	bl	b7662 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b78e4:	3d01      	subs	r5, #1
   b78e6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b78ea:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b78ec:	d1f7      	bne.n	b78de <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b78ee:	28aa      	cmp	r0, #170	; 0xaa
   b78f0:	d104      	bne.n	b78fc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b78f2:	2302      	movs	r3, #2
   b78f4:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b78f6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b78fa:	e7dd      	b.n	b78b8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b78fc:	2325      	movs	r3, #37	; 0x25
   b78fe:	e7bc      	b.n	b787a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b7900:	7aa3      	ldrb	r3, [r4, #10]
   b7902:	2b02      	cmp	r3, #2
   b7904:	d118      	bne.n	b7938 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b7906:	213a      	movs	r1, #58	; 0x3a
   b7908:	4620      	mov	r0, r4
   b790a:	f7ff ff39 	bl	b7780 <_ZN9SdSpiCard11cardCommandEhm>
   b790e:	b108      	cbz	r0, b7914 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b7910:	2337      	movs	r3, #55	; 0x37
   b7912:	e7b2      	b.n	b787a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b7914:	6860      	ldr	r0, [r4, #4]
   b7916:	f7ff fea4 	bl	b7662 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b791a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b791e:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b7920:	bf04      	itt	eq
   b7922:	2303      	moveq	r3, #3
   b7924:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b7926:	6860      	ldr	r0, [r4, #4]
   b7928:	f7ff fe9b 	bl	b7662 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b792c:	6860      	ldr	r0, [r4, #4]
   b792e:	f7ff fe98 	bl	b7662 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7932:	6860      	ldr	r0, [r4, #4]
   b7934:	f7ff fe95 	bl	b7662 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b7938:	4620      	mov	r0, r4
   b793a:	f7ff fec8 	bl	b76ce <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b793e:	6863      	ldr	r3, [r4, #4]
   b7940:	7930      	ldrb	r0, [r6, #4]
   b7942:	68b1      	ldr	r1, [r6, #8]
   b7944:	89b2      	ldrh	r2, [r6, #12]
   b7946:	821a      	strh	r2, [r3, #16]
   b7948:	7218      	strb	r0, [r3, #8]
   b794a:	60d9      	str	r1, [r3, #12]
  return true;
   b794c:	2001      	movs	r0, #1
   b794e:	e799      	b.n	b7884 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b7950:	0003d090 	.word	0x0003d090

000b7954 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7954:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7956:	7a83      	ldrb	r3, [r0, #10]
   b7958:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b795a:	bf18      	it	ne
   b795c:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b795e:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b7960:	460a      	mov	r2, r1
   b7962:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7964:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b7966:	f7ff ff0b 	bl	b7780 <_ZN9SdSpiCard11cardCommandEhm>
   b796a:	b130      	cbz	r0, b797a <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b796c:	2330      	movs	r3, #48	; 0x30
   b796e:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7970:	4620      	mov	r0, r4
   b7972:	f7ff feac 	bl	b76ce <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7976:	2500      	movs	r5, #0
   b7978:	e00b      	b.n	b7992 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b797a:	4629      	mov	r1, r5
   b797c:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7980:	4620      	mov	r0, r4
   b7982:	f7ff feb7 	bl	b76f4 <_ZN9SdSpiCard8readDataEPhj>
   b7986:	4605      	mov	r5, r0
   b7988:	2800      	cmp	r0, #0
   b798a:	d0f1      	beq.n	b7970 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b798c:	4620      	mov	r0, r4
   b798e:	f7ff fe9e 	bl	b76ce <_ZN9SdSpiCard7spiStopEv>
}
   b7992:	4628      	mov	r0, r5
   b7994:	bd38      	pop	{r3, r4, r5, pc}

000b7996 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7996:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7998:	7a83      	ldrb	r3, [r0, #10]
   b799a:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b799c:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b799e:	bf18      	it	ne
   b79a0:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b79a2:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b79a4:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b79a6:	f7ff feeb 	bl	b7780 <_ZN9SdSpiCard11cardCommandEhm>
   b79aa:	b130      	cbz	r0, b79ba <_ZN9SdSpiCard9readStartEm+0x24>
   b79ac:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b79ae:	4620      	mov	r0, r4
   b79b0:	7023      	strb	r3, [r4, #0]
   b79b2:	f7ff fe8c 	bl	b76ce <_ZN9SdSpiCard7spiStopEv>
  return false;
   b79b6:	2000      	movs	r0, #0
}
   b79b8:	bd10      	pop	{r4, pc}
  return true;
   b79ba:	2001      	movs	r0, #1
   b79bc:	e7fc      	b.n	b79b8 <_ZN9SdSpiCard9readStartEm+0x22>

000b79be <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b79be:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b79c0:	2200      	movs	r2, #0
   b79c2:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b79c4:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b79c6:	f7ff fedb 	bl	b7780 <_ZN9SdSpiCard11cardCommandEhm>
   b79ca:	b130      	cbz	r0, b79da <_ZN9SdSpiCard8readStopEv+0x1c>
   b79cc:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b79ce:	4620      	mov	r0, r4
   b79d0:	7023      	strb	r3, [r4, #0]
   b79d2:	f7ff fe7c 	bl	b76ce <_ZN9SdSpiCard7spiStopEv>
  return false;
   b79d6:	2000      	movs	r0, #0
}
   b79d8:	bd10      	pop	{r4, pc}
  spiStop();
   b79da:	4620      	mov	r0, r4
   b79dc:	f7ff fe77 	bl	b76ce <_ZN9SdSpiCard7spiStopEv>
  return true;
   b79e0:	2001      	movs	r0, #1
   b79e2:	e7f9      	b.n	b79d8 <_ZN9SdSpiCard8readStopEv+0x1a>

000b79e4 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b79e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b79e6:	4604      	mov	r4, r0
   b79e8:	4616      	mov	r6, r2
   b79ea:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b79ec:	f7ff ffd3 	bl	b7996 <_ZN9SdSpiCard9readStartEm>
   b79f0:	b168      	cbz	r0, b7a0e <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b79f2:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b79f4:	b2ab      	uxth	r3, r5
   b79f6:	429f      	cmp	r7, r3
   b79f8:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b79fc:	d909      	bls.n	b7a12 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b79fe:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7a02:	4620      	mov	r0, r4
   b7a04:	f7ff fe76 	bl	b76f4 <_ZN9SdSpiCard8readDataEPhj>
   b7a08:	3501      	adds	r5, #1
   b7a0a:	2800      	cmp	r0, #0
   b7a0c:	d1f2      	bne.n	b79f4 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b7a0e:	2000      	movs	r0, #0
   b7a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b7a12:	4620      	mov	r0, r4
}
   b7a14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b7a18:	f7ff bfd1 	b.w	b79be <_ZN9SdSpiCard8readStopEv>

000b7a1c <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b7a1c:	b538      	push	{r3, r4, r5, lr}
   b7a1e:	4604      	mov	r4, r0
   b7a20:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b7a22:	6840      	ldr	r0, [r0, #4]
   b7a24:	f7ff fe1b 	bl	b765e <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b7a28:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7a2c:	6860      	ldr	r0, [r4, #4]
   b7a2e:	4629      	mov	r1, r5
   b7a30:	f000 f8e6 	bl	b7c00 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b7a34:	6860      	ldr	r0, [r4, #4]
   b7a36:	21ff      	movs	r1, #255	; 0xff
   b7a38:	f7ff fe11 	bl	b765e <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b7a3c:	6860      	ldr	r0, [r4, #4]
   b7a3e:	21ff      	movs	r1, #255	; 0xff
   b7a40:	f7ff fe0d 	bl	b765e <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b7a44:	6860      	ldr	r0, [r4, #4]
   b7a46:	f7ff fe0c 	bl	b7662 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7a4a:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b7a4c:	f000 001f 	and.w	r0, r0, #31
   b7a50:	2805      	cmp	r0, #5
   b7a52:	d006      	beq.n	b7a62 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b7a54:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7a56:	4620      	mov	r0, r4
   b7a58:	7023      	strb	r3, [r4, #0]
   b7a5a:	f7ff fe38 	bl	b76ce <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7a5e:	2000      	movs	r0, #0
}
   b7a60:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b7a62:	2001      	movs	r0, #1
   b7a64:	e7fc      	b.n	b7a60 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b7a66 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7a66:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7a68:	7a83      	ldrb	r3, [r0, #10]
   b7a6a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b7a6c:	bf18      	it	ne
   b7a6e:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7a70:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b7a72:	460a      	mov	r2, r1
   b7a74:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7a76:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b7a78:	f7ff fe82 	bl	b7780 <_ZN9SdSpiCard11cardCommandEhm>
   b7a7c:	4606      	mov	r6, r0
   b7a7e:	b130      	cbz	r0, b7a8e <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b7a80:	2332      	movs	r3, #50	; 0x32
   b7a82:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7a84:	4620      	mov	r0, r4
   b7a86:	f7ff fe22 	bl	b76ce <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7a8a:	2500      	movs	r5, #0
   b7a8c:	e01f      	b.n	b7ace <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b7a8e:	462a      	mov	r2, r5
   b7a90:	21fe      	movs	r1, #254	; 0xfe
   b7a92:	4620      	mov	r0, r4
   b7a94:	f7ff ffc2 	bl	b7a1c <_ZN9SdSpiCard9writeDataEhPKh>
   b7a98:	2800      	cmp	r0, #0
   b7a9a:	d0f3      	beq.n	b7a84 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7a9c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b7aa0:	4620      	mov	r0, r4
   b7aa2:	f7ff fe58 	bl	b7756 <_ZN9SdSpiCard11waitNotBusyEt>
   b7aa6:	4605      	mov	r5, r0
   b7aa8:	b908      	cbnz	r0, b7aae <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b7aaa:	235a      	movs	r3, #90	; 0x5a
   b7aac:	e7e9      	b.n	b7a82 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b7aae:	4632      	mov	r2, r6
   b7ab0:	210d      	movs	r1, #13
   b7ab2:	4620      	mov	r0, r4
   b7ab4:	f7ff fe64 	bl	b7780 <_ZN9SdSpiCard11cardCommandEhm>
   b7ab8:	b108      	cbz	r0, b7abe <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b7aba:	2329      	movs	r3, #41	; 0x29
   b7abc:	e7e1      	b.n	b7a82 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b7abe:	6860      	ldr	r0, [r4, #4]
   b7ac0:	f7ff fdcf 	bl	b7662 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7ac4:	2800      	cmp	r0, #0
   b7ac6:	d1f8      	bne.n	b7aba <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b7ac8:	4620      	mov	r0, r4
   b7aca:	f7ff fe00 	bl	b76ce <_ZN9SdSpiCard7spiStopEv>
}
   b7ace:	4628      	mov	r0, r5
   b7ad0:	bd70      	pop	{r4, r5, r6, pc}

000b7ad2 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b7ad2:	b513      	push	{r0, r1, r4, lr}
   b7ad4:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7ad6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b7ada:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7adc:	f7ff fe3b 	bl	b7756 <_ZN9SdSpiCard11waitNotBusyEt>
   b7ae0:	9a01      	ldr	r2, [sp, #4]
   b7ae2:	b930      	cbnz	r0, b7af2 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b7ae4:	235b      	movs	r3, #91	; 0x5b
   b7ae6:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7ae8:	4620      	mov	r0, r4
   b7aea:	f7ff fdf0 	bl	b76ce <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7aee:	2000      	movs	r0, #0
   b7af0:	e005      	b.n	b7afe <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b7af2:	21fc      	movs	r1, #252	; 0xfc
   b7af4:	4620      	mov	r0, r4
   b7af6:	f7ff ff91 	bl	b7a1c <_ZN9SdSpiCard9writeDataEhPKh>
   b7afa:	2800      	cmp	r0, #0
   b7afc:	d0f4      	beq.n	b7ae8 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b7afe:	b002      	add	sp, #8
   b7b00:	bd10      	pop	{r4, pc}

000b7b02 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7b02:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b7b04:	7a83      	ldrb	r3, [r0, #10]
   b7b06:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7b08:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7b0a:	bf18      	it	ne
   b7b0c:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b7b0e:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7b10:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b7b12:	f7ff fe35 	bl	b7780 <_ZN9SdSpiCard11cardCommandEhm>
   b7b16:	b130      	cbz	r0, b7b26 <_ZN9SdSpiCard10writeStartEm+0x24>
   b7b18:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7b1a:	4620      	mov	r0, r4
   b7b1c:	7023      	strb	r3, [r4, #0]
   b7b1e:	f7ff fdd6 	bl	b76ce <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7b22:	2000      	movs	r0, #0
}
   b7b24:	bd10      	pop	{r4, pc}
  return true;
   b7b26:	2001      	movs	r0, #1
   b7b28:	e7fc      	b.n	b7b24 <_ZN9SdSpiCard10writeStartEm+0x22>

000b7b2a <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b7b2a:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7b2c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b7b30:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7b32:	f7ff fe10 	bl	b7756 <_ZN9SdSpiCard11waitNotBusyEt>
   b7b36:	4605      	mov	r5, r0
   b7b38:	b930      	cbnz	r0, b7b48 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b7b3a:	2356      	movs	r3, #86	; 0x56
   b7b3c:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b7b3e:	4620      	mov	r0, r4
   b7b40:	f7ff fdc5 	bl	b76ce <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b7b44:	4628      	mov	r0, r5
   b7b46:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b7b48:	6860      	ldr	r0, [r4, #4]
   b7b4a:	21fd      	movs	r1, #253	; 0xfd
   b7b4c:	f7ff fd87 	bl	b765e <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7b50:	e7f5      	b.n	b7b3e <_ZN9SdSpiCard9writeStopEv+0x14>

000b7b52 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b7b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b54:	4604      	mov	r4, r0
   b7b56:	4616      	mov	r6, r2
   b7b58:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b7b5a:	f7ff ffd2 	bl	b7b02 <_ZN9SdSpiCard10writeStartEm>
   b7b5e:	b170      	cbz	r0, b7b7e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7b60:	2500      	movs	r5, #0
   b7b62:	42bd      	cmp	r5, r7
   b7b64:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b7b68:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b7b6a:	d004      	beq.n	b7b76 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b7b6c:	f7ff ffb1 	bl	b7ad2 <_ZN9SdSpiCard9writeDataEPKh>
   b7b70:	b128      	cbz	r0, b7b7e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7b72:	3501      	adds	r5, #1
   b7b74:	e7f5      	b.n	b7b62 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b7b76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b7b7a:	f7ff bfd6 	b.w	b7b2a <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b7b7e:	4620      	mov	r0, r4
   b7b80:	f7ff fda5 	bl	b76ce <_ZN9SdSpiCard7spiStopEv>
}
   b7b84:	2000      	movs	r0, #0
   b7b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7b88 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b7b88:	4b01      	ldr	r3, [pc, #4]	; (b7b90 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b7b8a:	2201      	movs	r2, #1
   b7b8c:	701a      	strb	r2, [r3, #0]
}
   b7b8e:	4770      	bx	lr
   b7b90:	2003e650 	.word	0x2003e650

000b7b94 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b7b94:	1d01      	adds	r1, r0, #4
   b7b96:	6800      	ldr	r0, [r0, #0]
   b7b98:	f001 b934 	b.w	b8e04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b7b9c <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b7b9c:	b510      	push	{r4, lr}
   b7b9e:	4604      	mov	r4, r0
  m_csPin = csPin;
   b7ba0:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b7ba2:	6800      	ldr	r0, [r0, #0]
   b7ba4:	f001 f900 	bl	b8da8 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b7ba8:	7d20      	ldrb	r0, [r4, #20]
   b7baa:	2101      	movs	r1, #1
   b7bac:	f004 fdbe 	bl	bc72c <pinMode>
  digitalWrite(m_csPin, HIGH);
   b7bb0:	7d20      	ldrb	r0, [r4, #20]
   b7bb2:	2101      	movs	r1, #1
}
   b7bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b7bb8:	f004 bdc9 	b.w	bc74e <digitalWrite>

000b7bbc <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b7bbc:	6800      	ldr	r0, [r0, #0]
   b7bbe:	f001 b907 	b.w	b8dd0 <_ZN8SPIClass14endTransactionEv>

000b7bc2 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b7bc2:	6800      	ldr	r0, [r0, #0]
   b7bc4:	21ff      	movs	r1, #255	; 0xff
   b7bc6:	f001 b98b 	b.w	b8ee0 <_ZN8SPIClass8transferEh>
	...

000b7bcc <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b7bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7bce:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7bd0:	4a07      	ldr	r2, [pc, #28]	; (b7bf0 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b7bd2:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7bd4:	2500      	movs	r5, #0
   b7bd6:	4c07      	ldr	r4, [pc, #28]	; (b7bf4 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7bd8:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7bda:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7bdc:	460a      	mov	r2, r1
   b7bde:	4629      	mov	r1, r5
   b7be0:	f001 f984 	bl	b8eec <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b7be4:	7823      	ldrb	r3, [r4, #0]
   b7be6:	2b00      	cmp	r3, #0
   b7be8:	d0fc      	beq.n	b7be4 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b7bea:	2000      	movs	r0, #0
   b7bec:	b003      	add	sp, #12
   b7bee:	bd30      	pop	{r4, r5, pc}
   b7bf0:	000b7b89 	.word	0x000b7b89
   b7bf4:	2003e650 	.word	0x2003e650

000b7bf8 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b7bf8:	6800      	ldr	r0, [r0, #0]
   b7bfa:	f001 b971 	b.w	b8ee0 <_ZN8SPIClass8transferEh>
	...

000b7c00 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b7c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7c02:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7c04:	4a06      	ldr	r2, [pc, #24]	; (b7c20 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b7c06:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7c08:	2500      	movs	r5, #0
   b7c0a:	4c06      	ldr	r4, [pc, #24]	; (b7c24 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7c0c:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7c0e:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7c10:	462a      	mov	r2, r5
   b7c12:	f001 f96b 	bl	b8eec <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b7c16:	7823      	ldrb	r3, [r4, #0]
   b7c18:	2b00      	cmp	r3, #0
   b7c1a:	d0fc      	beq.n	b7c16 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b7c1c:	b003      	add	sp, #12
   b7c1e:	bd30      	pop	{r4, r5, pc}
   b7c20:	000b7b89 	.word	0x000b7b89
   b7c24:	2003e650 	.word	0x2003e650

000b7c28 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b7c28:	b510      	push	{r4, lr}
   b7c2a:	4b04      	ldr	r3, [pc, #16]	; (b7c3c <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b7c2c:	6003      	str	r3, [r0, #0]
   b7c2e:	4604      	mov	r4, r0
  if(buffer) {
   b7c30:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7c32:	b108      	cbz	r0, b7c38 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b7c34:	f001 f80a 	bl	b8c4c <free>
    buffer = NULL;
  }
}
   b7c38:	4620      	mov	r0, r4
   b7c3a:	bd10      	pop	{r4, pc}
   b7c3c:	000c0780 	.word	0x000c0780

000b7c40 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b7c40:	b510      	push	{r4, lr}
   b7c42:	4604      	mov	r4, r0
}
   b7c44:	f7ff fff0 	bl	b7c28 <_ZN16Adafruit_SSD1306D1Ev>
   b7c48:	4620      	mov	r0, r4
   b7c4a:	2150      	movs	r1, #80	; 0x50
   b7c4c:	f7fc fa27 	bl	b409e <_ZdlPvj>
   b7c50:	4620      	mov	r0, r4
   b7c52:	bd10      	pop	{r4, pc}

000b7c54 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b7c54:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b7c56:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b7c58:	db4b      	blt.n	b7cf2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b7c5a:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b7c5e:	428c      	cmp	r4, r1
   b7c60:	dd47      	ble.n	b7cf2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b7c62:	2a00      	cmp	r2, #0
   b7c64:	db45      	blt.n	b7cf2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b7c66:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b7c6a:	4294      	cmp	r4, r2
   b7c6c:	dd41      	ble.n	b7cf2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b7c6e:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b7c70:	2c02      	cmp	r4, #2
   b7c72:	d01f      	beq.n	b7cb4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b7c74:	2c03      	cmp	r4, #3
   b7c76:	d026      	beq.n	b7cc6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b7c78:	2c01      	cmp	r4, #1
   b7c7a:	d104      	bne.n	b7c86 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b7c7c:	8904      	ldrh	r4, [r0, #8]
   b7c7e:	43d2      	mvns	r2, r2
   b7c80:	4414      	add	r4, r2
      break;
   b7c82:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b7c84:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b7c86:	2b01      	cmp	r3, #1
   b7c88:	d023      	beq.n	b7cd2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b7c8a:	2b02      	cmp	r3, #2
   b7c8c:	d032      	beq.n	b7cf4 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b7c8e:	bb83      	cbnz	r3, b7cf2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b7c90:	2a00      	cmp	r2, #0
   b7c92:	4613      	mov	r3, r2
   b7c94:	8904      	ldrh	r4, [r0, #8]
   b7c96:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7c98:	bfb8      	it	lt
   b7c9a:	1dd3      	addlt	r3, r2, #7
   b7c9c:	10db      	asrs	r3, r3, #3
   b7c9e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b7ca2:	f002 0207 	and.w	r2, r2, #7
   b7ca6:	2301      	movs	r3, #1
   b7ca8:	4093      	lsls	r3, r2
   b7caa:	5c42      	ldrb	r2, [r0, r1]
   b7cac:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b7cb0:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b7cb2:	e01e      	b.n	b7cf2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b7cb4:	8904      	ldrh	r4, [r0, #8]
   b7cb6:	3c01      	subs	r4, #1
   b7cb8:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b7cba:	8944      	ldrh	r4, [r0, #10]
   b7cbc:	43d2      	mvns	r2, r2
   b7cbe:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b7cc0:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b7cc2:	b212      	sxth	r2, r2
      break;
   b7cc4:	e7df      	b.n	b7c86 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b7cc6:	8944      	ldrh	r4, [r0, #10]
   b7cc8:	3c01      	subs	r4, #1
   b7cca:	1a64      	subs	r4, r4, r1
      break;
   b7ccc:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b7cce:	b222      	sxth	r2, r4
      break;
   b7cd0:	e7d9      	b.n	b7c86 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b7cd2:	2a00      	cmp	r2, #0
   b7cd4:	8904      	ldrh	r4, [r0, #8]
   b7cd6:	4613      	mov	r3, r2
   b7cd8:	bfb8      	it	lt
   b7cda:	1dd3      	addlt	r3, r2, #7
   b7cdc:	10db      	asrs	r3, r3, #3
   b7cde:	fb13 1104 	smlabb	r1, r3, r4, r1
   b7ce2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b7ce4:	f002 0007 	and.w	r0, r2, #7
   b7ce8:	2201      	movs	r2, #1
   b7cea:	4082      	lsls	r2, r0
   b7cec:	5c58      	ldrb	r0, [r3, r1]
   b7cee:	4302      	orrs	r2, r0
   b7cf0:	545a      	strb	r2, [r3, r1]
}
   b7cf2:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b7cf4:	2a00      	cmp	r2, #0
   b7cf6:	4613      	mov	r3, r2
   b7cf8:	8904      	ldrh	r4, [r0, #8]
   b7cfa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7cfc:	bfb8      	it	lt
   b7cfe:	1dd3      	addlt	r3, r2, #7
   b7d00:	10db      	asrs	r3, r3, #3
   b7d02:	fb13 1104 	smlabb	r1, r3, r4, r1
   b7d06:	f002 0207 	and.w	r2, r2, #7
   b7d0a:	2301      	movs	r3, #1
   b7d0c:	fa03 f202 	lsl.w	r2, r3, r2
   b7d10:	5c43      	ldrb	r3, [r0, r1]
   b7d12:	405a      	eors	r2, r3
   b7d14:	e7cc      	b.n	b7cb0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b7d18 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b7d18:	b570      	push	{r4, r5, r6, lr}
   b7d1a:	4604      	mov	r4, r0
   b7d1c:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b7d1e:	2600      	movs	r6, #0
   b7d20:	f7fd ff88 	bl	b5c34 <_ZN12Adafruit_GFXC1Ess>
   b7d24:	4b11      	ldr	r3, [pc, #68]	; (b7d6c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b7d26:	6023      	str	r3, [r4, #0]
   b7d28:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b7d2a:	b915      	cbnz	r5, b7d32 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b7d2c:	f004 fdaa 	bl	bc884 <_Z19__fetch_global_Wirev>
   b7d30:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b7d32:	23ff      	movs	r3, #255	; 0xff
   b7d34:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b7d38:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b7d3c:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b7d40:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b7d44:	4b0a      	ldr	r3, [pc, #40]	; (b7d70 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b7d46:	63a3      	str	r3, [r4, #56]	; 0x38
   b7d48:	2301      	movs	r3, #1
   b7d4a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b7d4e:	9b05      	ldr	r3, [sp, #20]
   b7d50:	64a3      	str	r3, [r4, #72]	; 0x48
   b7d52:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b7d56:	9b06      	ldr	r3, [sp, #24]
   b7d58:	86a2      	strh	r2, [r4, #52]	; 0x34
   b7d5a:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b7d5e:	6426      	str	r6, [r4, #64]	; 0x40
   b7d60:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b7d64:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b7d66:	4620      	mov	r0, r4
   b7d68:	bd70      	pop	{r4, r5, r6, pc}
   b7d6a:	bf00      	nop
   b7d6c:	000c0780 	.word	0x000c0780
   b7d70:	000bfce0 	.word	0x000bfce0

000b7d74 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b7d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7d76:	4604      	mov	r4, r0
  if(wire) { // I2C
   b7d78:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b7d7a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b7d7c:	b190      	cbz	r0, b7da4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b7d7e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b7d82:	f004 fbd9 	bl	bc538 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b7d86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7d88:	6803      	ldr	r3, [r0, #0]
   b7d8a:	2100      	movs	r1, #0
   b7d8c:	689b      	ldr	r3, [r3, #8]
   b7d8e:	4798      	blx	r3
    WIRE_WRITE(c);
   b7d90:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7d92:	6803      	ldr	r3, [r0, #0]
   b7d94:	4629      	mov	r1, r5
   b7d96:	689b      	ldr	r3, [r3, #8]
   b7d98:	4798      	blx	r3
    wire->endTransmission();
   b7d9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b7d9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b7da0:	f004 bbd1 	b.w	bc546 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b7da4:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b7da8:	4601      	mov	r1, r0
   b7daa:	b298      	uxth	r0, r3
   b7dac:	f004 fccf 	bl	bc74e <digitalWrite>
  if(spi) {
   b7db0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7db2:	b120      	cbz	r0, b7dbe <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b7db4:	4629      	mov	r1, r5
}
   b7db6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b7dba:	f001 b891 	b.w	b8ee0 <_ZN8SPIClass8transferEh>
   b7dbe:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b7dc0:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b7dc2:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b7dc6:	ea05 0107 	and.w	r1, r5, r7
   b7dca:	b280      	uxth	r0, r0
   b7dcc:	f004 fcbf 	bl	bc74e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b7dd0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7dd4:	2101      	movs	r1, #1
   b7dd6:	b280      	uxth	r0, r0
   b7dd8:	f004 fcb9 	bl	bc74e <digitalWrite>
      digitalWrite(clkPin , LOW);
   b7ddc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7de0:	2100      	movs	r1, #0
   b7de2:	b280      	uxth	r0, r0
   b7de4:	f004 fcb3 	bl	bc74e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b7de8:	3e01      	subs	r6, #1
   b7dea:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b7dee:	d1e8      	bne.n	b7dc2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b7df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7df2 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b7df2:	b538      	push	{r3, r4, r5, lr}
   b7df4:	4604      	mov	r4, r0
  TRANSACTION_START
   b7df6:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b7df8:	460d      	mov	r5, r1
  TRANSACTION_START
   b7dfa:	b180      	cbz	r0, b7e1e <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b7dfc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b7dfe:	f004 fb8d 	bl	bc51c <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b7e02:	2d00      	cmp	r5, #0
   b7e04:	4620      	mov	r0, r4
   b7e06:	bf14      	ite	ne
   b7e08:	21a7      	movne	r1, #167	; 0xa7
   b7e0a:	21a6      	moveq	r1, #166	; 0xa6
   b7e0c:	f7ff ffb2 	bl	b7d74 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b7e10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7e12:	b188      	cbz	r0, b7e38 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b7e14:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b7e16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7e1a:	f004 bb7f 	b.w	bc51c <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b7e1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7e20:	b118      	cbz	r0, b7e2a <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b7e22:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b7e26:	f000 ffed 	bl	b8e04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b7e2a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7e2e:	2100      	movs	r1, #0
   b7e30:	b280      	uxth	r0, r0
   b7e32:	f004 fc8c 	bl	bc74e <digitalWrite>
   b7e36:	e7e4      	b.n	b7e02 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b7e38:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7e3c:	2101      	movs	r1, #1
   b7e3e:	b280      	uxth	r0, r0
   b7e40:	f004 fc85 	bl	bc74e <digitalWrite>
   b7e44:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7e46:	b118      	cbz	r0, b7e50 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b7e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b7e4c:	f000 bfc0 	b.w	b8dd0 <_ZN8SPIClass14endTransactionEv>
}
   b7e50:	bd38      	pop	{r3, r4, r5, pc}

000b7e52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b7e52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7e56:	4604      	mov	r4, r0
  if(wire) { // I2C
   b7e58:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b7e5a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b7e5c:	188f      	adds	r7, r1, r2
   b7e5e:	b340      	cbz	r0, b7eb2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b7e60:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b7e64:	f004 fb68 	bl	bc538 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b7e68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7e6a:	6803      	ldr	r3, [r0, #0]
   b7e6c:	2100      	movs	r1, #0
   b7e6e:	689b      	ldr	r3, [r3, #8]
   b7e70:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b7e72:	2601      	movs	r6, #1
    while(n--) {
   b7e74:	42af      	cmp	r7, r5
        wire->endTransmission();
   b7e76:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b7e78:	d017      	beq.n	b7eaa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b7e7a:	2e1f      	cmp	r6, #31
   b7e7c:	d90c      	bls.n	b7e98 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b7e7e:	f004 fb62 	bl	bc546 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b7e82:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b7e86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7e88:	f004 fb56 	bl	bc538 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b7e8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7e8e:	6803      	ldr	r3, [r0, #0]
   b7e90:	2100      	movs	r1, #0
   b7e92:	689b      	ldr	r3, [r3, #8]
   b7e94:	4798      	blx	r3
        bytesOut = 1;
   b7e96:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b7e98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7e9a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7e9e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b7ea0:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b7ea2:	689b      	ldr	r3, [r3, #8]
   b7ea4:	4798      	blx	r3
      bytesOut++;
   b7ea6:	b2f6      	uxtb	r6, r6
    while(n--) {
   b7ea8:	e7e4      	b.n	b7e74 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b7eaa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b7eae:	f004 bb4a 	b.w	bc546 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b7eb2:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b7eb6:	4601      	mov	r1, r0
   b7eb8:	b298      	uxth	r0, r3
   b7eba:	f004 fc48 	bl	bc74e <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b7ebe:	42bd      	cmp	r5, r7
   b7ec0:	d022      	beq.n	b7f08 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b7ec2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b7ec4:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b7ec8:	b118      	cbz	r0, b7ed2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b7eca:	4649      	mov	r1, r9
   b7ecc:	f001 f808 	bl	b8ee0 <_ZN8SPIClass8transferEh>
   b7ed0:	e7f5      	b.n	b7ebe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b7ed2:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b7ed4:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b7ed8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b7edc:	ea09 0108 	and.w	r1, r9, r8
   b7ee0:	b280      	uxth	r0, r0
   b7ee2:	f004 fc34 	bl	bc74e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b7ee6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7eea:	2101      	movs	r1, #1
   b7eec:	b280      	uxth	r0, r0
   b7eee:	f004 fc2e 	bl	bc74e <digitalWrite>
      digitalWrite(clkPin , LOW);
   b7ef2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7ef6:	2100      	movs	r1, #0
   b7ef8:	b280      	uxth	r0, r0
   b7efa:	f004 fc28 	bl	bc74e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b7efe:	3e01      	subs	r6, #1
   b7f00:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b7f04:	d1e8      	bne.n	b7ed8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b7f06:	e7da      	b.n	b7ebe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b7f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b7f0c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b7f0c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b7f10:	1dda      	adds	r2, r3, #7
   b7f12:	bf48      	it	mi
   b7f14:	f103 020e 	addmi.w	r2, r3, #14
   b7f18:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b7f1c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7f1e:	10d2      	asrs	r2, r2, #3
   b7f20:	435a      	muls	r2, r3
   b7f22:	2100      	movs	r1, #0
   b7f24:	f005 bb3d 	b.w	bd5a2 <memset>

000b7f28 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b7f28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b7f2c:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b7f2e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b7f30:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b7f34:	4604      	mov	r4, r0
   b7f36:	460f      	mov	r7, r1
   b7f38:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b7f3a:	b1c3      	cbz	r3, b7f6e <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b7f3c:	4620      	mov	r0, r4
   b7f3e:	f7ff ffe5 	bl	b7f0c <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b7f42:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b7f46:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b7f4a:	2820      	cmp	r0, #32
   b7f4c:	dc21      	bgt.n	b7f92 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b7f4e:	2320      	movs	r3, #32
   b7f50:	2201      	movs	r2, #1
   b7f52:	3820      	subs	r0, #32
   b7f54:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b7f58:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b7f5c:	2373      	movs	r3, #115	; 0x73
   b7f5e:	3973      	subs	r1, #115	; 0x73
   b7f60:	9300      	str	r3, [sp, #0]
   b7f62:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b7f66:	4b89      	ldr	r3, [pc, #548]	; (b818c <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b7f68:	f340 024f 	sbfx	r2, r0, #1, #16
   b7f6c:	e021      	b.n	b7fb2 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b7f6e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b7f72:	1dd8      	adds	r0, r3, #7
   b7f74:	bf48      	it	mi
   b7f76:	f103 000e 	addmi.w	r0, r3, #14
   b7f7a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b7f7e:	10c0      	asrs	r0, r0, #3
   b7f80:	4358      	muls	r0, r3
   b7f82:	f000 fe5b 	bl	b8c3c <malloc>
   b7f86:	62e0      	str	r0, [r4, #44]	; 0x2c
   b7f88:	2800      	cmp	r0, #0
   b7f8a:	d1d7      	bne.n	b7f3c <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b7f8c:	b004      	add	sp, #16
   b7f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b7f92:	3840      	subs	r0, #64	; 0x40
   b7f94:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b7f98:	fa02 f280 	sxtah	r2, r2, r0
   b7f9c:	2340      	movs	r3, #64	; 0x40
   b7f9e:	2001      	movs	r0, #1
   b7fa0:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b7fa4:	2352      	movs	r3, #82	; 0x52
   b7fa6:	3952      	subs	r1, #82	; 0x52
   b7fa8:	9300      	str	r3, [sp, #0]
   b7faa:	4b79      	ldr	r3, [pc, #484]	; (b8190 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b7fac:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b7fb0:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b7fb2:	4620      	mov	r0, r4
   b7fb4:	f341 014f 	sbfx	r1, r1, #1, #16
   b7fb8:	f7fd ffde 	bl	b5f78 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b7fbc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b7fbe:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b7fc2:	2800      	cmp	r0, #0
   b7fc4:	d078      	beq.n	b80b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b7fc6:	2d00      	cmp	r5, #0
   b7fc8:	d174      	bne.n	b80b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b7fca:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b7fce:	2b20      	cmp	r3, #32
   b7fd0:	bf0c      	ite	eq
   b7fd2:	253c      	moveq	r5, #60	; 0x3c
   b7fd4:	253d      	movne	r5, #61	; 0x3d
   b7fd6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b7fda:	f1b8 0f00 	cmp.w	r8, #0
   b7fde:	d001      	beq.n	b7fe4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b7fe0:	f004 faa0 	bl	bc524 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b7fe4:	b1fe      	cbz	r6, b8026 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b7fe6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b7fea:	2800      	cmp	r0, #0
   b7fec:	db1b      	blt.n	b8026 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b7fee:	2101      	movs	r1, #1
   b7ff0:	b280      	uxth	r0, r0
   b7ff2:	f004 fb9b 	bl	bc72c <pinMode>
    digitalWrite(rstPin, HIGH);
   b7ff6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b7ffa:	2101      	movs	r1, #1
   b7ffc:	b280      	uxth	r0, r0
   b7ffe:	f004 fba6 	bl	bc74e <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b8002:	2001      	movs	r0, #1
   b8004:	f003 fd58 	bl	bbab8 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b8008:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b800c:	2100      	movs	r1, #0
   b800e:	b280      	uxth	r0, r0
   b8010:	f004 fb9d 	bl	bc74e <digitalWrite>
    delay(10);                  // Wait 10 ms
   b8014:	200a      	movs	r0, #10
   b8016:	f003 fd4f 	bl	bbab8 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b801a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b801e:	2101      	movs	r1, #1
   b8020:	b280      	uxth	r0, r0
   b8022:	f004 fb94 	bl	bc74e <digitalWrite>
  TRANSACTION_START
   b8026:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8028:	2800      	cmp	r0, #0
   b802a:	d074      	beq.n	b8116 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b802c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b802e:	f004 fa75 	bl	bc51c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b8032:	2204      	movs	r2, #4
   b8034:	4957      	ldr	r1, [pc, #348]	; (b8194 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b8036:	4620      	mov	r0, r4
   b8038:	f7ff ff0b 	bl	b7e52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b803c:	8961      	ldrh	r1, [r4, #10]
   b803e:	3901      	subs	r1, #1
   b8040:	b2c9      	uxtb	r1, r1
   b8042:	4620      	mov	r0, r4
   b8044:	f7ff fe96 	bl	b7d74 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b8048:	4953      	ldr	r1, [pc, #332]	; (b8198 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b804a:	2204      	movs	r2, #4
   b804c:	4620      	mov	r0, r4
   b804e:	f7ff ff00 	bl	b7e52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b8052:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8056:	2b01      	cmp	r3, #1
   b8058:	bf0c      	ite	eq
   b805a:	2110      	moveq	r1, #16
   b805c:	2114      	movne	r1, #20
   b805e:	4620      	mov	r0, r4
   b8060:	f7ff fe88 	bl	b7d74 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b8064:	2204      	movs	r2, #4
   b8066:	494d      	ldr	r1, [pc, #308]	; (b819c <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b8068:	4620      	mov	r0, r4
   b806a:	f7ff fef2 	bl	b7e52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b806e:	68a3      	ldr	r3, [r4, #8]
   b8070:	4a4b      	ldr	r2, [pc, #300]	; (b81a0 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b8072:	4293      	cmp	r3, r2
   b8074:	d15c      	bne.n	b8130 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b8076:	494b      	ldr	r1, [pc, #300]	; (b81a4 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b8078:	2204      	movs	r2, #4
   b807a:	4620      	mov	r0, r4
   b807c:	f7ff fee9 	bl	b7e52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b8080:	21d9      	movs	r1, #217	; 0xd9
   b8082:	4620      	mov	r0, r4
   b8084:	f7ff fe76 	bl	b7d74 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b8088:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b808c:	2b01      	cmp	r3, #1
   b808e:	bf0c      	ite	eq
   b8090:	2122      	moveq	r1, #34	; 0x22
   b8092:	21f1      	movne	r1, #241	; 0xf1
   b8094:	4620      	mov	r0, r4
   b8096:	f7ff fe6d 	bl	b7d74 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b809a:	4620      	mov	r0, r4
   b809c:	4942      	ldr	r1, [pc, #264]	; (b81a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b809e:	2206      	movs	r2, #6
   b80a0:	f7ff fed7 	bl	b7e52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b80a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b80a6:	2800      	cmp	r0, #0
   b80a8:	d063      	beq.n	b8172 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b80aa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b80ac:	f004 fa36 	bl	bc51c <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b80b0:	2001      	movs	r0, #1
   b80b2:	e76b      	b.n	b7f8c <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b80b4:	b26d      	sxtb	r5, r5
   b80b6:	e78e      	b.n	b7fd6 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b80b8:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b80bc:	2101      	movs	r1, #1
   b80be:	b280      	uxth	r0, r0
   b80c0:	f004 fb34 	bl	bc72c <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b80c4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b80c8:	2101      	movs	r1, #1
   b80ca:	b280      	uxth	r0, r0
   b80cc:	f004 fb2e 	bl	bc72c <pinMode>
    SSD1306_DESELECT
   b80d0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b80d4:	2101      	movs	r1, #1
   b80d6:	b280      	uxth	r0, r0
   b80d8:	f004 fb39 	bl	bc74e <digitalWrite>
    if(spi) { // Hardware SPI
   b80dc:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b80de:	b13d      	cbz	r5, b80f0 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b80e0:	f1b8 0f00 	cmp.w	r8, #0
   b80e4:	f43f af7e 	beq.w	b7fe4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b80e8:	4628      	mov	r0, r5
   b80ea:	f000 fe5d 	bl	b8da8 <_ZN8SPIClass5beginEv>
   b80ee:	e779      	b.n	b7fe4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b80f0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b80f4:	2101      	movs	r1, #1
   b80f6:	b280      	uxth	r0, r0
   b80f8:	f004 fb18 	bl	bc72c <pinMode>
      pinMode(clkPin , OUTPUT);
   b80fc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8100:	2101      	movs	r1, #1
   b8102:	b280      	uxth	r0, r0
   b8104:	f004 fb12 	bl	bc72c <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b8108:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b810c:	4629      	mov	r1, r5
   b810e:	b280      	uxth	r0, r0
   b8110:	f004 fb1d 	bl	bc74e <digitalWrite>
   b8114:	e766      	b.n	b7fe4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b8116:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8118:	b118      	cbz	r0, b8122 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b811a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b811e:	f000 fe71 	bl	b8e04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b8122:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8126:	2100      	movs	r1, #0
   b8128:	b280      	uxth	r0, r0
   b812a:	f004 fb10 	bl	bc74e <digitalWrite>
   b812e:	e780      	b.n	b8032 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b8130:	4a1e      	ldr	r2, [pc, #120]	; (b81ac <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b8132:	4293      	cmp	r3, r2
   b8134:	d10e      	bne.n	b8154 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b8136:	491e      	ldr	r1, [pc, #120]	; (b81b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b8138:	2203      	movs	r2, #3
   b813a:	4620      	mov	r0, r4
   b813c:	f7ff fe89 	bl	b7e52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b8140:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8144:	2b01      	cmp	r3, #1
   b8146:	bf0c      	ite	eq
   b8148:	219f      	moveq	r1, #159	; 0x9f
   b814a:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b814c:	4620      	mov	r0, r4
   b814e:	f7ff fe11 	bl	b7d74 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b8152:	e795      	b.n	b8080 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b8154:	4a17      	ldr	r2, [pc, #92]	; (b81b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b8156:	4293      	cmp	r3, r2
   b8158:	d192      	bne.n	b8080 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b815a:	4917      	ldr	r1, [pc, #92]	; (b81b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b815c:	2203      	movs	r2, #3
   b815e:	4620      	mov	r0, r4
   b8160:	f7ff fe77 	bl	b7e52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b8164:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8168:	2b01      	cmp	r3, #1
   b816a:	bf0c      	ite	eq
   b816c:	2110      	moveq	r1, #16
   b816e:	21af      	movne	r1, #175	; 0xaf
   b8170:	e7ec      	b.n	b814c <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b8172:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8176:	2101      	movs	r1, #1
   b8178:	b280      	uxth	r0, r0
   b817a:	f004 fae8 	bl	bc74e <digitalWrite>
   b817e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8180:	2800      	cmp	r0, #0
   b8182:	d095      	beq.n	b80b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b8184:	f000 fe24 	bl	b8dd0 <_ZN8SPIClass14endTransactionEv>
   b8188:	e792      	b.n	b80b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b818a:	bf00      	nop
   b818c:	000c0598 	.word	0x000c0598
   b8190:	000c02d8 	.word	0x000c02d8
   b8194:	000c07e0 	.word	0x000c07e0
   b8198:	000c07e4 	.word	0x000c07e4
   b819c:	000c07e8 	.word	0x000c07e8
   b81a0:	00200080 	.word	0x00200080
   b81a4:	000c07f2 	.word	0x000c07f2
   b81a8:	000c07ec 	.word	0x000c07ec
   b81ac:	00400080 	.word	0x00400080
   b81b0:	000c07f6 	.word	0x000c07f6
   b81b4:	00100060 	.word	0x00100060
   b81b8:	000c07f9 	.word	0x000c07f9

000b81bc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b81bc:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b81be:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b81c0:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b81c4:	db3d      	blt.n	b8242 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b81c6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b81ca:	4294      	cmp	r4, r2
   b81cc:	dd39      	ble.n	b8242 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b81ce:	2900      	cmp	r1, #0
      w += x;
   b81d0:	bfbe      	ittt	lt
   b81d2:	185b      	addlt	r3, r3, r1
   b81d4:	b21b      	sxthlt	r3, r3
      x  = 0;
   b81d6:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b81d8:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b81dc:	18ce      	adds	r6, r1, r3
   b81de:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b81e0:	bfc4      	itt	gt
   b81e2:	1a63      	subgt	r3, r4, r1
   b81e4:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b81e6:	2b00      	cmp	r3, #0
   b81e8:	dd2b      	ble.n	b8242 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b81ea:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b81ec:	10d6      	asrs	r6, r2, #3
   b81ee:	fb14 1106 	smlabb	r1, r4, r6, r1
   b81f2:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b81f4:	f002 0007 	and.w	r0, r2, #7
   b81f8:	2201      	movs	r2, #1
   b81fa:	4082      	lsls	r2, r0
      switch(color) {
   b81fc:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b81fe:	b2d2      	uxtb	r2, r2
      switch(color) {
   b8200:	d016      	beq.n	b8230 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b8202:	2d02      	cmp	r5, #2
   b8204:	d00b      	beq.n	b821e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b8206:	b9e5      	cbnz	r5, b8242 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b8208:	43d2      	mvns	r2, r2
   b820a:	b2d2      	uxtb	r2, r2
   b820c:	440b      	add	r3, r1
   b820e:	4299      	cmp	r1, r3
   b8210:	d017      	beq.n	b8242 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8212:	f811 0b01 	ldrb.w	r0, [r1], #1
   b8216:	4010      	ands	r0, r2
   b8218:	f801 0c01 	strb.w	r0, [r1, #-1]
   b821c:	e7f7      	b.n	b820e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b821e:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b8220:	4299      	cmp	r1, r3
   b8222:	d00e      	beq.n	b8242 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8224:	f811 0b01 	ldrb.w	r0, [r1], #1
   b8228:	4050      	eors	r0, r2
   b822a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b822e:	e7f7      	b.n	b8220 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b8230:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b8232:	4299      	cmp	r1, r3
   b8234:	d005      	beq.n	b8242 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8236:	f811 0b01 	ldrb.w	r0, [r1], #1
   b823a:	4310      	orrs	r0, r2
   b823c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b8240:	e7f7      	b.n	b8232 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b8242:	bd70      	pop	{r4, r5, r6, pc}

000b8244 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b8244:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b8246:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b8248:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b824c:	db76      	blt.n	b833c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b824e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b8252:	42b1      	cmp	r1, r6
   b8254:	da72      	bge.n	b833c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b8256:	2a00      	cmp	r2, #0
      __h += __y;
   b8258:	bfbe      	ittt	lt
   b825a:	189b      	addlt	r3, r3, r2
   b825c:	b21b      	sxthlt	r3, r3
      __y = 0;
   b825e:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b8260:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b8264:	18d7      	adds	r7, r2, r3
   b8266:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b8268:	bfc4      	itt	gt
   b826a:	1aa3      	subgt	r3, r4, r2
   b826c:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b826e:	2b00      	cmp	r3, #0
   b8270:	dd64      	ble.n	b833c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b8272:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b8276:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b8278:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b827c:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b8280:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b8282:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b8286:	d023      	beq.n	b82d0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b8288:	f1c2 0208 	rsb	r2, r2, #8
   b828c:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b828e:	492d      	ldr	r1, [pc, #180]	; (b8344 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b8290:	4293      	cmp	r3, r2
   b8292:	bf3c      	itt	cc
   b8294:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b8298:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b829c:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b829e:	bf3c      	itt	cc
   b82a0:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b82a4:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b82a8:	2d01      	cmp	r5, #1
   b82aa:	d007      	beq.n	b82bc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b82ac:	2d02      	cmp	r5, #2
   b82ae:	d02e      	beq.n	b830e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b82b0:	b94d      	cbnz	r5, b82c6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b82b2:	f817 c006 	ldrb.w	ip, [r7, r6]
   b82b6:	ea2c 0101 	bic.w	r1, ip, r1
   b82ba:	e003      	b.n	b82c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b82bc:	f817 c006 	ldrb.w	ip, [r7, r6]
   b82c0:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b82c4:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b82c6:	4293      	cmp	r3, r2
   b82c8:	d338      	bcc.n	b833c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b82ca:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b82ce:	440c      	add	r4, r1
        h -= mod;
   b82d0:	1a9a      	subs	r2, r3, r2
   b82d2:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b82d4:	2a07      	cmp	r2, #7
   b82d6:	d90e      	bls.n	b82f6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b82d8:	2d02      	cmp	r5, #2
   b82da:	d11d      	bne.n	b8318 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b82dc:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b82de:	7821      	ldrb	r1, [r4, #0]
   b82e0:	43c9      	mvns	r1, r1
   b82e2:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b82e4:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b82e6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b82ea:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b82ec:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b82ee:	440c      	add	r4, r1
            } while(h >= 8);
   b82f0:	d8f5      	bhi.n	b82de <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b82f2:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b82f6:	b30a      	cbz	r2, b833c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b82f8:	4b13      	ldr	r3, [pc, #76]	; (b8348 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b82fa:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b82fc:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b82fe:	d01a      	beq.n	b8336 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b8300:	2d02      	cmp	r5, #2
   b8302:	d01c      	beq.n	b833e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b8304:	b9d5      	cbnz	r5, b833c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b8306:	7822      	ldrb	r2, [r4, #0]
   b8308:	ea22 0303 	bic.w	r3, r2, r3
   b830c:	e015      	b.n	b833a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b830e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b8312:	ea81 010c 	eor.w	r1, r1, ip
   b8316:	e7d5      	b.n	b82c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b8318:	1e29      	subs	r1, r5, #0
   b831a:	bf18      	it	ne
   b831c:	2101      	movne	r1, #1
   b831e:	4249      	negs	r1, r1
   b8320:	b2c9      	uxtb	r1, r1
   b8322:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b8324:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b8326:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b8328:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b832c:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b832e:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b8330:	4434      	add	r4, r6
            } while(h >= 8);
   b8332:	d8f7      	bhi.n	b8324 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b8334:	e7dd      	b.n	b82f2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b8336:	7822      	ldrb	r2, [r4, #0]
   b8338:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b833a:	7023      	strb	r3, [r4, #0]
}
   b833c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b833e:	7822      	ldrb	r2, [r4, #0]
   b8340:	4053      	eors	r3, r2
   b8342:	e7fa      	b.n	b833a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b8344:	000c07d0 	.word	0x000c07d0
   b8348:	000c07d8 	.word	0x000c07d8

000b834c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b834c:	b470      	push	{r4, r5, r6}
   b834e:	4614      	mov	r4, r2
  switch(rotation) {
   b8350:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8352:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b8356:	2a02      	cmp	r2, #2
   b8358:	d00d      	beq.n	b8376 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b835a:	2a03      	cmp	r2, #3
   b835c:	d018      	beq.n	b8390 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b835e:	2a01      	cmp	r2, #1
   b8360:	d111      	bne.n	b8386 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b8362:	8902      	ldrh	r2, [r0, #8]
   b8364:	43e4      	mvns	r4, r4
   b8366:	4414      	add	r4, r2
   b8368:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b836a:	9603      	str	r6, [sp, #12]
   b836c:	460a      	mov	r2, r1
   b836e:	4621      	mov	r1, r4
}
   b8370:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b8372:	f7ff bf67 	b.w	b8244 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b8376:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b8378:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b837a:	43e4      	mvns	r4, r4
    x -= (w-1);
   b837c:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b837e:	4414      	add	r4, r2
    x -= (w-1);
   b8380:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b8382:	b224      	sxth	r4, r4
    x -= (w-1);
   b8384:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b8386:	9603      	str	r6, [sp, #12]
   b8388:	4622      	mov	r2, r4
}
   b838a:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b838c:	f7ff bf16 	b.w	b81bc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b8390:	8945      	ldrh	r5, [r0, #10]
   b8392:	4419      	add	r1, r3
   b8394:	1a69      	subs	r1, r5, r1
   b8396:	b209      	sxth	r1, r1
    break;
   b8398:	e7e7      	b.n	b836a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b839a <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b839a:	b430      	push	{r4, r5}
   b839c:	4614      	mov	r4, r2
  switch(rotation) {
   b839e:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b83a0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b83a4:	2a02      	cmp	r2, #2
   b83a6:	d00d      	beq.n	b83c4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b83a8:	2a03      	cmp	r2, #3
   b83aa:	d018      	beq.n	b83de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b83ac:	2a01      	cmp	r2, #1
   b83ae:	d111      	bne.n	b83d4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b83b0:	18e2      	adds	r2, r4, r3
   b83b2:	8904      	ldrh	r4, [r0, #8]
   b83b4:	1aa4      	subs	r4, r4, r2
   b83b6:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b83b8:	9502      	str	r5, [sp, #8]
   b83ba:	460a      	mov	r2, r1
   b83bc:	4621      	mov	r1, r4
}
   b83be:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b83c0:	f7ff befc 	b.w	b81bc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b83c4:	8902      	ldrh	r2, [r0, #8]
   b83c6:	43c9      	mvns	r1, r1
   b83c8:	4411      	add	r1, r2
    y -= (h-1);
   b83ca:	18e2      	adds	r2, r4, r3
   b83cc:	8944      	ldrh	r4, [r0, #10]
   b83ce:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b83d0:	b209      	sxth	r1, r1
    y -= (h-1);
   b83d2:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b83d4:	9502      	str	r5, [sp, #8]
   b83d6:	4622      	mov	r2, r4
}
   b83d8:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b83da:	f7ff bf33 	b.w	b8244 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b83de:	8942      	ldrh	r2, [r0, #10]
   b83e0:	43c9      	mvns	r1, r1
   b83e2:	4411      	add	r1, r2
   b83e4:	b209      	sxth	r1, r1
    break;
   b83e6:	e7e7      	b.n	b83b8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b83e8 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b83e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b83ec:	4604      	mov	r4, r0
  TRANSACTION_START
   b83ee:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b83f0:	2800      	cmp	r0, #0
   b83f2:	d042      	beq.n	b847a <_ZN16Adafruit_SSD13067displayEv+0x92>
   b83f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b83f6:	f004 f891 	bl	bc51c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b83fa:	4947      	ldr	r1, [pc, #284]	; (b8518 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b83fc:	2205      	movs	r2, #5
   b83fe:	4620      	mov	r0, r4
   b8400:	f7ff fd27 	bl	b7e52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b8404:	8921      	ldrh	r1, [r4, #8]
   b8406:	3901      	subs	r1, #1
   b8408:	4620      	mov	r0, r4
   b840a:	b2c9      	uxtb	r1, r1
   b840c:	f7ff fcb2 	bl	b7d74 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b8410:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b8414:	1dde      	adds	r6, r3, #7
   b8416:	bf48      	it	mi
   b8418:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b841c:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b8420:	8923      	ldrh	r3, [r4, #8]
   b8422:	10f6      	asrs	r6, r6, #3
   b8424:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b8428:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b842c:	2800      	cmp	r0, #0
   b842e:	d03a      	beq.n	b84a6 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b8430:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b8434:	f004 f880 	bl	bc538 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b8438:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b843a:	6803      	ldr	r3, [r0, #0]
   b843c:	2140      	movs	r1, #64	; 0x40
   b843e:	689b      	ldr	r3, [r3, #8]
   b8440:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b8442:	2701      	movs	r7, #1
    while(count--) {
   b8444:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b8446:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b8448:	d024      	beq.n	b8494 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b844a:	2f1f      	cmp	r7, #31
   b844c:	d90c      	bls.n	b8468 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b844e:	f004 f87a 	bl	bc546 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b8452:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b8456:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8458:	f004 f86e 	bl	bc538 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b845c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b845e:	6803      	ldr	r3, [r0, #0]
   b8460:	2140      	movs	r1, #64	; 0x40
   b8462:	689b      	ldr	r3, [r3, #8]
   b8464:	4798      	blx	r3
        bytesOut = 1;
   b8466:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b8468:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b846a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b846e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b8470:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b8472:	689b      	ldr	r3, [r3, #8]
   b8474:	4798      	blx	r3
      bytesOut++;
   b8476:	b2ff      	uxtb	r7, r7
    while(count--) {
   b8478:	e7e4      	b.n	b8444 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b847a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b847c:	b118      	cbz	r0, b8486 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b847e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b8482:	f000 fcbf 	bl	b8e04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b8486:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b848a:	2100      	movs	r1, #0
   b848c:	b280      	uxth	r0, r0
   b848e:	f004 f95e 	bl	bc74e <digitalWrite>
   b8492:	e7b2      	b.n	b83fa <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b8494:	f004 f857 	bl	bc546 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b8498:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b849a:	b378      	cbz	r0, b84fc <_ZN16Adafruit_SSD13067displayEv+0x114>
   b849c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b849e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b84a2:	f004 b83b 	b.w	bc51c <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b84a6:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b84aa:	2101      	movs	r1, #1
   b84ac:	b280      	uxth	r0, r0
   b84ae:	f004 f94e 	bl	bc74e <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b84b2:	42ae      	cmp	r6, r5
   b84b4:	d0f0      	beq.n	b8498 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b84b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b84b8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b84bc:	b118      	cbz	r0, b84c6 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b84be:	4649      	mov	r1, r9
   b84c0:	f000 fd0e 	bl	b8ee0 <_ZN8SPIClass8transferEh>
   b84c4:	e7f5      	b.n	b84b2 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b84c6:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b84c8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b84cc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b84d0:	ea09 0108 	and.w	r1, r9, r8
   b84d4:	b280      	uxth	r0, r0
   b84d6:	f004 f93a 	bl	bc74e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b84da:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b84de:	2101      	movs	r1, #1
   b84e0:	b280      	uxth	r0, r0
   b84e2:	f004 f934 	bl	bc74e <digitalWrite>
      digitalWrite(clkPin , LOW);
   b84e6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b84ea:	2100      	movs	r1, #0
   b84ec:	b280      	uxth	r0, r0
   b84ee:	f004 f92e 	bl	bc74e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b84f2:	3f01      	subs	r7, #1
   b84f4:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b84f8:	d1e8      	bne.n	b84cc <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b84fa:	e7da      	b.n	b84b2 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b84fc:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8500:	2101      	movs	r1, #1
   b8502:	b280      	uxth	r0, r0
   b8504:	f004 f923 	bl	bc74e <digitalWrite>
   b8508:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b850a:	b118      	cbz	r0, b8514 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b850c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b8510:	f000 bc5e 	b.w	b8dd0 <_ZN8SPIClass14endTransactionEv>
}
   b8514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8518:	000c07fc 	.word	0x000c07fc

000b851c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b851c:	b508      	push	{r3, lr}
   b851e:	4b02      	ldr	r3, [pc, #8]	; (b8528 <netdb_freeaddrinfo+0xc>)
   b8520:	681b      	ldr	r3, [r3, #0]
   b8522:	689b      	ldr	r3, [r3, #8]
   b8524:	9301      	str	r3, [sp, #4]
   b8526:	bd08      	pop	{r3, pc}
   b8528:	00030268 	.word	0x00030268

000b852c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b852c:	b508      	push	{r3, lr}
   b852e:	4b02      	ldr	r3, [pc, #8]	; (b8538 <netdb_getaddrinfo+0xc>)
   b8530:	681b      	ldr	r3, [r3, #0]
   b8532:	68db      	ldr	r3, [r3, #12]
   b8534:	9301      	str	r3, [sp, #4]
   b8536:	bd08      	pop	{r3, pc}
   b8538:	00030268 	.word	0x00030268

000b853c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b853c:	b508      	push	{r3, lr}
   b853e:	4b02      	ldr	r3, [pc, #8]	; (b8548 <HAL_Validate_Pin_Function+0xc>)
   b8540:	681b      	ldr	r3, [r3, #0]
   b8542:	685b      	ldr	r3, [r3, #4]
   b8544:	9301      	str	r3, [sp, #4]
   b8546:	bd08      	pop	{r3, pc}
   b8548:	0003022c 	.word	0x0003022c

000b854c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b854c:	b508      	push	{r3, lr}
   b854e:	4b02      	ldr	r3, [pc, #8]	; (b8558 <HAL_Pin_Mode+0xc>)
   b8550:	681b      	ldr	r3, [r3, #0]
   b8552:	689b      	ldr	r3, [r3, #8]
   b8554:	9301      	str	r3, [sp, #4]
   b8556:	bd08      	pop	{r3, pc}
   b8558:	0003022c 	.word	0x0003022c

000b855c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b855c:	b508      	push	{r3, lr}
   b855e:	4b02      	ldr	r3, [pc, #8]	; (b8568 <HAL_Get_Pin_Mode+0xc>)
   b8560:	681b      	ldr	r3, [r3, #0]
   b8562:	68db      	ldr	r3, [r3, #12]
   b8564:	9301      	str	r3, [sp, #4]
   b8566:	bd08      	pop	{r3, pc}
   b8568:	0003022c 	.word	0x0003022c

000b856c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b856c:	b508      	push	{r3, lr}
   b856e:	4b02      	ldr	r3, [pc, #8]	; (b8578 <HAL_GPIO_Write+0xc>)
   b8570:	681b      	ldr	r3, [r3, #0]
   b8572:	691b      	ldr	r3, [r3, #16]
   b8574:	9301      	str	r3, [sp, #4]
   b8576:	bd08      	pop	{r3, pc}
   b8578:	0003022c 	.word	0x0003022c

000b857c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b857c:	b508      	push	{r3, lr}
   b857e:	4b02      	ldr	r3, [pc, #8]	; (b8588 <HAL_GPIO_Read+0xc>)
   b8580:	681b      	ldr	r3, [r3, #0]
   b8582:	695b      	ldr	r3, [r3, #20]
   b8584:	9301      	str	r3, [sp, #4]
   b8586:	bd08      	pop	{r3, pc}
   b8588:	0003022c 	.word	0x0003022c

000b858c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b858c:	b508      	push	{r3, lr}
   b858e:	4b02      	ldr	r3, [pc, #8]	; (b8598 <hal_adc_read+0xc>)
   b8590:	681b      	ldr	r3, [r3, #0]
   b8592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8594:	9301      	str	r3, [sp, #4]
   b8596:	bd08      	pop	{r3, pc}
   b8598:	0003022c 	.word	0x0003022c

000b859c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b859c:	b508      	push	{r3, lr}
   b859e:	4b02      	ldr	r3, [pc, #8]	; (b85a8 <HAL_RNG_GetRandomNumber+0xc>)
   b85a0:	681b      	ldr	r3, [r3, #0]
   b85a2:	685b      	ldr	r3, [r3, #4]
   b85a4:	9301      	str	r3, [sp, #4]
   b85a6:	bd08      	pop	{r3, pc}
   b85a8:	00030218 	.word	0x00030218

000b85ac <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b85ac:	b508      	push	{r3, lr}
   b85ae:	4b02      	ldr	r3, [pc, #8]	; (b85b8 <HAL_Delay_Microseconds+0xc>)
   b85b0:	681b      	ldr	r3, [r3, #0]
   b85b2:	68db      	ldr	r3, [r3, #12]
   b85b4:	9301      	str	r3, [sp, #4]
   b85b6:	bd08      	pop	{r3, pc}
   b85b8:	00030218 	.word	0x00030218

000b85bc <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b85bc:	b508      	push	{r3, lr}
   b85be:	4b02      	ldr	r3, [pc, #8]	; (b85c8 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b85c0:	681b      	ldr	r3, [r3, #0]
   b85c2:	691b      	ldr	r3, [r3, #16]
   b85c4:	9301      	str	r3, [sp, #4]
   b85c6:	bd08      	pop	{r3, pc}
   b85c8:	00030218 	.word	0x00030218

000b85cc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b85cc:	b508      	push	{r3, lr}
   b85ce:	4b02      	ldr	r3, [pc, #8]	; (b85d8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b85d0:	681b      	ldr	r3, [r3, #0]
   b85d2:	695b      	ldr	r3, [r3, #20]
   b85d4:	9301      	str	r3, [sp, #4]
   b85d6:	bd08      	pop	{r3, pc}
   b85d8:	00030218 	.word	0x00030218

000b85dc <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b85dc:	b508      	push	{r3, lr}
   b85de:	4b02      	ldr	r3, [pc, #8]	; (b85e8 <hal_rtc_time_is_valid+0xc>)
   b85e0:	681b      	ldr	r3, [r3, #0]
   b85e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b85e4:	9301      	str	r3, [sp, #4]
   b85e6:	bd08      	pop	{r3, pc}
   b85e8:	00030218 	.word	0x00030218

000b85ec <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b85ec:	b508      	push	{r3, lr}
   b85ee:	4b02      	ldr	r3, [pc, #8]	; (b85f8 <hal_rtc_get_time+0xc>)
   b85f0:	681b      	ldr	r3, [r3, #0]
   b85f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b85f4:	9301      	str	r3, [sp, #4]
   b85f6:	bd08      	pop	{r3, pc}
   b85f8:	00030218 	.word	0x00030218

000b85fc <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b85fc:	b508      	push	{r3, lr}
   b85fe:	4b02      	ldr	r3, [pc, #8]	; (b8608 <hal_ble_stack_init+0xc>)
   b8600:	681b      	ldr	r3, [r3, #0]
   b8602:	689b      	ldr	r3, [r3, #8]
   b8604:	9301      	str	r3, [sp, #4]
   b8606:	bd08      	pop	{r3, pc}
   b8608:	00030278 	.word	0x00030278

000b860c <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   b860c:	b508      	push	{r3, lr}
   b860e:	4b02      	ldr	r3, [pc, #8]	; (b8618 <hal_ble_gap_set_scan_parameters+0xc>)
   b8610:	681b      	ldr	r3, [r3, #0]
   b8612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b8614:	9301      	str	r3, [sp, #4]
   b8616:	bd08      	pop	{r3, pc}
   b8618:	00030278 	.word	0x00030278

000b861c <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   b861c:	b508      	push	{r3, lr}
   b861e:	4b02      	ldr	r3, [pc, #8]	; (b8628 <hal_ble_gap_get_scan_parameters+0xc>)
   b8620:	681b      	ldr	r3, [r3, #0]
   b8622:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b8624:	9301      	str	r3, [sp, #4]
   b8626:	bd08      	pop	{r3, pc}
   b8628:	00030278 	.word	0x00030278

000b862c <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b862c:	b508      	push	{r3, lr}
   b862e:	4b02      	ldr	r3, [pc, #8]	; (b8638 <hal_ble_gap_start_scan+0xc>)
   b8630:	681b      	ldr	r3, [r3, #0]
   b8632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b8634:	9301      	str	r3, [sp, #4]
   b8636:	bd08      	pop	{r3, pc}
   b8638:	00030278 	.word	0x00030278

000b863c <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b863c:	b508      	push	{r3, lr}
   b863e:	4b03      	ldr	r3, [pc, #12]	; (b864c <hal_ble_gap_stop_scan+0x10>)
   b8640:	681b      	ldr	r3, [r3, #0]
   b8642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b8646:	9301      	str	r3, [sp, #4]
   b8648:	bd08      	pop	{r3, pc}
   b864a:	0000      	.short	0x0000
   b864c:	00030278 	.word	0x00030278

000b8650 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b8650:	b508      	push	{r3, lr}
   b8652:	4b03      	ldr	r3, [pc, #12]	; (b8660 <hal_ble_gap_disconnect+0x10>)
   b8654:	681b      	ldr	r3, [r3, #0]
   b8656:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b865a:	9301      	str	r3, [sp, #4]
   b865c:	bd08      	pop	{r3, pc}
   b865e:	0000      	.short	0x0000
   b8660:	00030278 	.word	0x00030278

000b8664 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8664:	b508      	push	{r3, lr}
   b8666:	4b03      	ldr	r3, [pc, #12]	; (b8674 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b8668:	681b      	ldr	r3, [r3, #0]
   b866a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b866e:	9301      	str	r3, [sp, #4]
   b8670:	bd08      	pop	{r3, pc}
   b8672:	0000      	.short	0x0000
   b8674:	00030278 	.word	0x00030278

000b8678 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b8678:	b508      	push	{r3, lr}
   b867a:	4b03      	ldr	r3, [pc, #12]	; (b8688 <hal_ble_gatt_client_discover_all_services+0x10>)
   b867c:	681b      	ldr	r3, [r3, #0]
   b867e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b8682:	9301      	str	r3, [sp, #4]
   b8684:	bd08      	pop	{r3, pc}
   b8686:	0000      	.short	0x0000
   b8688:	00030278 	.word	0x00030278

000b868c <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b868c:	b508      	push	{r3, lr}
   b868e:	4b03      	ldr	r3, [pc, #12]	; (b869c <hal_ble_gatt_client_discover_characteristics+0x10>)
   b8690:	681b      	ldr	r3, [r3, #0]
   b8692:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b8696:	9301      	str	r3, [sp, #4]
   b8698:	bd08      	pop	{r3, pc}
   b869a:	0000      	.short	0x0000
   b869c:	00030278 	.word	0x00030278

000b86a0 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b86a0:	b508      	push	{r3, lr}
   b86a2:	4b03      	ldr	r3, [pc, #12]	; (b86b0 <hal_ble_gatt_client_write_with_response+0x10>)
   b86a4:	681b      	ldr	r3, [r3, #0]
   b86a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b86aa:	9301      	str	r3, [sp, #4]
   b86ac:	bd08      	pop	{r3, pc}
   b86ae:	0000      	.short	0x0000
   b86b0:	00030278 	.word	0x00030278

000b86b4 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b86b4:	b508      	push	{r3, lr}
   b86b6:	4b03      	ldr	r3, [pc, #12]	; (b86c4 <hal_ble_gatt_client_write_without_response+0x10>)
   b86b8:	681b      	ldr	r3, [r3, #0]
   b86ba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b86be:	9301      	str	r3, [sp, #4]
   b86c0:	bd08      	pop	{r3, pc}
   b86c2:	0000      	.short	0x0000
   b86c4:	00030278 	.word	0x00030278

000b86c8 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b86c8:	b508      	push	{r3, lr}
   b86ca:	4b03      	ldr	r3, [pc, #12]	; (b86d8 <hal_ble_gatt_client_read+0x10>)
   b86cc:	681b      	ldr	r3, [r3, #0]
   b86ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b86d2:	9301      	str	r3, [sp, #4]
   b86d4:	bd08      	pop	{r3, pc}
   b86d6:	0000      	.short	0x0000
   b86d8:	00030278 	.word	0x00030278

000b86dc <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b86dc:	b508      	push	{r3, lr}
   b86de:	4b03      	ldr	r3, [pc, #12]	; (b86ec <hal_ble_gap_connect+0x10>)
   b86e0:	681b      	ldr	r3, [r3, #0]
   b86e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b86e6:	9301      	str	r3, [sp, #4]
   b86e8:	bd08      	pop	{r3, pc}
   b86ea:	0000      	.short	0x0000
   b86ec:	00030278 	.word	0x00030278

000b86f0 <hal_ble_gap_get_connection_info>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   b86f0:	b508      	push	{r3, lr}
   b86f2:	4b03      	ldr	r3, [pc, #12]	; (b8700 <hal_ble_gap_get_connection_info+0x10>)
   b86f4:	681b      	ldr	r3, [r3, #0]
   b86f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   b86fa:	9301      	str	r3, [sp, #4]
   b86fc:	bd08      	pop	{r3, pc}
   b86fe:	0000      	.short	0x0000
   b8700:	00030278 	.word	0x00030278

000b8704 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b8704:	b508      	push	{r3, lr}
   b8706:	4b03      	ldr	r3, [pc, #12]	; (b8714 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b8708:	681b      	ldr	r3, [r3, #0]
   b870a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b870e:	9301      	str	r3, [sp, #4]
   b8710:	bd08      	pop	{r3, pc}
   b8712:	0000      	.short	0x0000
   b8714:	00030278 	.word	0x00030278

000b8718 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b8718:	b508      	push	{r3, lr}
   b871a:	4b03      	ldr	r3, [pc, #12]	; (b8728 <hal_ble_gatt_client_configure_cccd+0x10>)
   b871c:	681b      	ldr	r3, [r3, #0]
   b871e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b8722:	9301      	str	r3, [sp, #4]
   b8724:	bd08      	pop	{r3, pc}
   b8726:	0000      	.short	0x0000
   b8728:	00030278 	.word	0x00030278

000b872c <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b872c:	b508      	push	{r3, lr}
   b872e:	4b03      	ldr	r3, [pc, #12]	; (b873c <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b8730:	681b      	ldr	r3, [r3, #0]
   b8732:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b8736:	9301      	str	r3, [sp, #4]
   b8738:	bd08      	pop	{r3, pc}
   b873a:	0000      	.short	0x0000
   b873c:	00030278 	.word	0x00030278

000b8740 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8740:	b508      	push	{r3, lr}
   b8742:	4b03      	ldr	r3, [pc, #12]	; (b8750 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b8744:	681b      	ldr	r3, [r3, #0]
   b8746:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b874a:	9301      	str	r3, [sp, #4]
   b874c:	bd08      	pop	{r3, pc}
   b874e:	0000      	.short	0x0000
   b8750:	00030278 	.word	0x00030278

000b8754 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b8754:	b508      	push	{r3, lr}
   b8756:	4b02      	ldr	r3, [pc, #8]	; (b8760 <os_thread_yield+0xc>)
   b8758:	681b      	ldr	r3, [r3, #0]
   b875a:	68db      	ldr	r3, [r3, #12]
   b875c:	9301      	str	r3, [sp, #4]
   b875e:	bd08      	pop	{r3, pc}
   b8760:	00030248 	.word	0x00030248

000b8764 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b8764:	b508      	push	{r3, lr}
   b8766:	4b02      	ldr	r3, [pc, #8]	; (b8770 <os_thread_scheduling+0xc>)
   b8768:	681b      	ldr	r3, [r3, #0]
   b876a:	69db      	ldr	r3, [r3, #28]
   b876c:	9301      	str	r3, [sp, #4]
   b876e:	bd08      	pop	{r3, pc}
   b8770:	00030248 	.word	0x00030248

000b8774 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b8774:	b508      	push	{r3, lr}
   b8776:	4b02      	ldr	r3, [pc, #8]	; (b8780 <os_timer_create+0xc>)
   b8778:	681b      	ldr	r3, [r3, #0]
   b877a:	6a1b      	ldr	r3, [r3, #32]
   b877c:	9301      	str	r3, [sp, #4]
   b877e:	bd08      	pop	{r3, pc}
   b8780:	00030248 	.word	0x00030248

000b8784 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b8784:	b508      	push	{r3, lr}
   b8786:	4b02      	ldr	r3, [pc, #8]	; (b8790 <os_timer_destroy+0xc>)
   b8788:	681b      	ldr	r3, [r3, #0]
   b878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b878c:	9301      	str	r3, [sp, #4]
   b878e:	bd08      	pop	{r3, pc}
   b8790:	00030248 	.word	0x00030248

000b8794 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b8794:	b508      	push	{r3, lr}
   b8796:	4b02      	ldr	r3, [pc, #8]	; (b87a0 <os_timer_get_id+0xc>)
   b8798:	681b      	ldr	r3, [r3, #0]
   b879a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b879c:	9301      	str	r3, [sp, #4]
   b879e:	bd08      	pop	{r3, pc}
   b87a0:	00030248 	.word	0x00030248

000b87a4 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b87a4:	b508      	push	{r3, lr}
   b87a6:	4b02      	ldr	r3, [pc, #8]	; (b87b0 <os_timer_change+0xc>)
   b87a8:	681b      	ldr	r3, [r3, #0]
   b87aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b87ac:	9301      	str	r3, [sp, #4]
   b87ae:	bd08      	pop	{r3, pc}
   b87b0:	00030248 	.word	0x00030248

000b87b4 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b87b4:	b508      	push	{r3, lr}
   b87b6:	4b02      	ldr	r3, [pc, #8]	; (b87c0 <os_mutex_create+0xc>)
   b87b8:	681b      	ldr	r3, [r3, #0]
   b87ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b87bc:	9301      	str	r3, [sp, #4]
   b87be:	bd08      	pop	{r3, pc}
   b87c0:	00030248 	.word	0x00030248

000b87c4 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b87c4:	b508      	push	{r3, lr}
   b87c6:	4b02      	ldr	r3, [pc, #8]	; (b87d0 <os_mutex_destroy+0xc>)
   b87c8:	681b      	ldr	r3, [r3, #0]
   b87ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b87cc:	9301      	str	r3, [sp, #4]
   b87ce:	bd08      	pop	{r3, pc}
   b87d0:	00030248 	.word	0x00030248

000b87d4 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b87d4:	b508      	push	{r3, lr}
   b87d6:	4b02      	ldr	r3, [pc, #8]	; (b87e0 <os_mutex_recursive_create+0xc>)
   b87d8:	681b      	ldr	r3, [r3, #0]
   b87da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b87dc:	9301      	str	r3, [sp, #4]
   b87de:	bd08      	pop	{r3, pc}
   b87e0:	00030248 	.word	0x00030248

000b87e4 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b87e4:	b508      	push	{r3, lr}
   b87e6:	4b02      	ldr	r3, [pc, #8]	; (b87f0 <os_mutex_recursive_lock+0xc>)
   b87e8:	681b      	ldr	r3, [r3, #0]
   b87ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b87ec:	9301      	str	r3, [sp, #4]
   b87ee:	bd08      	pop	{r3, pc}
   b87f0:	00030248 	.word	0x00030248

000b87f4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b87f4:	b508      	push	{r3, lr}
   b87f6:	4b02      	ldr	r3, [pc, #8]	; (b8800 <os_mutex_recursive_unlock+0xc>)
   b87f8:	681b      	ldr	r3, [r3, #0]
   b87fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b87fc:	9301      	str	r3, [sp, #4]
   b87fe:	bd08      	pop	{r3, pc}
   b8800:	00030248 	.word	0x00030248

000b8804 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b8804:	b508      	push	{r3, lr}
   b8806:	4b02      	ldr	r3, [pc, #8]	; (b8810 <os_timer_set_id+0xc>)
   b8808:	681b      	ldr	r3, [r3, #0]
   b880a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b880c:	9301      	str	r3, [sp, #4]
   b880e:	bd08      	pop	{r3, pc}
   b8810:	00030248 	.word	0x00030248

000b8814 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b8814:	b508      	push	{r3, lr}
   b8816:	4b02      	ldr	r3, [pc, #8]	; (b8820 <inet_inet_ntop+0xc>)
   b8818:	681b      	ldr	r3, [r3, #0]
   b881a:	695b      	ldr	r3, [r3, #20]
   b881c:	9301      	str	r3, [sp, #4]
   b881e:	bd08      	pop	{r3, pc}
   b8820:	00030264 	.word	0x00030264

000b8824 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b8824:	b508      	push	{r3, lr}
   b8826:	4b02      	ldr	r3, [pc, #8]	; (b8830 <hal_usart_write+0xc>)
   b8828:	681b      	ldr	r3, [r3, #0]
   b882a:	68db      	ldr	r3, [r3, #12]
   b882c:	9301      	str	r3, [sp, #4]
   b882e:	bd08      	pop	{r3, pc}
   b8830:	0003023c 	.word	0x0003023c

000b8834 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b8834:	b508      	push	{r3, lr}
   b8836:	4b02      	ldr	r3, [pc, #8]	; (b8840 <hal_usart_available+0xc>)
   b8838:	681b      	ldr	r3, [r3, #0]
   b883a:	691b      	ldr	r3, [r3, #16]
   b883c:	9301      	str	r3, [sp, #4]
   b883e:	bd08      	pop	{r3, pc}
   b8840:	0003023c 	.word	0x0003023c

000b8844 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b8844:	b508      	push	{r3, lr}
   b8846:	4b02      	ldr	r3, [pc, #8]	; (b8850 <hal_usart_read+0xc>)
   b8848:	681b      	ldr	r3, [r3, #0]
   b884a:	695b      	ldr	r3, [r3, #20]
   b884c:	9301      	str	r3, [sp, #4]
   b884e:	bd08      	pop	{r3, pc}
   b8850:	0003023c 	.word	0x0003023c

000b8854 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b8854:	b508      	push	{r3, lr}
   b8856:	4b02      	ldr	r3, [pc, #8]	; (b8860 <hal_usart_peek+0xc>)
   b8858:	681b      	ldr	r3, [r3, #0]
   b885a:	699b      	ldr	r3, [r3, #24]
   b885c:	9301      	str	r3, [sp, #4]
   b885e:	bd08      	pop	{r3, pc}
   b8860:	0003023c 	.word	0x0003023c

000b8864 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b8864:	b508      	push	{r3, lr}
   b8866:	4b02      	ldr	r3, [pc, #8]	; (b8870 <hal_usart_flush+0xc>)
   b8868:	681b      	ldr	r3, [r3, #0]
   b886a:	69db      	ldr	r3, [r3, #28]
   b886c:	9301      	str	r3, [sp, #4]
   b886e:	bd08      	pop	{r3, pc}
   b8870:	0003023c 	.word	0x0003023c

000b8874 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b8874:	b508      	push	{r3, lr}
   b8876:	4b02      	ldr	r3, [pc, #8]	; (b8880 <hal_usart_is_enabled+0xc>)
   b8878:	681b      	ldr	r3, [r3, #0]
   b887a:	6a1b      	ldr	r3, [r3, #32]
   b887c:	9301      	str	r3, [sp, #4]
   b887e:	bd08      	pop	{r3, pc}
   b8880:	0003023c 	.word	0x0003023c

000b8884 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b8884:	b508      	push	{r3, lr}
   b8886:	4b02      	ldr	r3, [pc, #8]	; (b8890 <hal_usart_available_data_for_write+0xc>)
   b8888:	681b      	ldr	r3, [r3, #0]
   b888a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b888c:	9301      	str	r3, [sp, #4]
   b888e:	bd08      	pop	{r3, pc}
   b8890:	0003023c 	.word	0x0003023c

000b8894 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b8894:	b508      	push	{r3, lr}
   b8896:	4b02      	ldr	r3, [pc, #8]	; (b88a0 <hal_usart_begin_config+0xc>)
   b8898:	681b      	ldr	r3, [r3, #0]
   b889a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b889c:	9301      	str	r3, [sp, #4]
   b889e:	bd08      	pop	{r3, pc}
   b88a0:	0003023c 	.word	0x0003023c

000b88a4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b88a4:	b508      	push	{r3, lr}
   b88a6:	4b02      	ldr	r3, [pc, #8]	; (b88b0 <hal_usart_init_ex+0xc>)
   b88a8:	681b      	ldr	r3, [r3, #0]
   b88aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b88ac:	9301      	str	r3, [sp, #4]
   b88ae:	bd08      	pop	{r3, pc}
   b88b0:	0003023c 	.word	0x0003023c

000b88b4 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b88b4:	b508      	push	{r3, lr}
   b88b6:	4b02      	ldr	r3, [pc, #8]	; (b88c0 <hal_i2c_set_speed+0xc>)
   b88b8:	681b      	ldr	r3, [r3, #0]
   b88ba:	681b      	ldr	r3, [r3, #0]
   b88bc:	9301      	str	r3, [sp, #4]
   b88be:	bd08      	pop	{r3, pc}
   b88c0:	00030228 	.word	0x00030228

000b88c4 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b88c4:	b508      	push	{r3, lr}
   b88c6:	4b02      	ldr	r3, [pc, #8]	; (b88d0 <hal_i2c_begin+0xc>)
   b88c8:	681b      	ldr	r3, [r3, #0]
   b88ca:	68db      	ldr	r3, [r3, #12]
   b88cc:	9301      	str	r3, [sp, #4]
   b88ce:	bd08      	pop	{r3, pc}
   b88d0:	00030228 	.word	0x00030228

000b88d4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b88d4:	b508      	push	{r3, lr}
   b88d6:	4b02      	ldr	r3, [pc, #8]	; (b88e0 <hal_i2c_begin_transmission+0xc>)
   b88d8:	681b      	ldr	r3, [r3, #0]
   b88da:	699b      	ldr	r3, [r3, #24]
   b88dc:	9301      	str	r3, [sp, #4]
   b88de:	bd08      	pop	{r3, pc}
   b88e0:	00030228 	.word	0x00030228

000b88e4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b88e4:	b508      	push	{r3, lr}
   b88e6:	4b02      	ldr	r3, [pc, #8]	; (b88f0 <hal_i2c_end_transmission+0xc>)
   b88e8:	681b      	ldr	r3, [r3, #0]
   b88ea:	69db      	ldr	r3, [r3, #28]
   b88ec:	9301      	str	r3, [sp, #4]
   b88ee:	bd08      	pop	{r3, pc}
   b88f0:	00030228 	.word	0x00030228

000b88f4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b88f4:	b508      	push	{r3, lr}
   b88f6:	4b02      	ldr	r3, [pc, #8]	; (b8900 <hal_i2c_write+0xc>)
   b88f8:	681b      	ldr	r3, [r3, #0]
   b88fa:	6a1b      	ldr	r3, [r3, #32]
   b88fc:	9301      	str	r3, [sp, #4]
   b88fe:	bd08      	pop	{r3, pc}
   b8900:	00030228 	.word	0x00030228

000b8904 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b8904:	b508      	push	{r3, lr}
   b8906:	4b02      	ldr	r3, [pc, #8]	; (b8910 <hal_i2c_available+0xc>)
   b8908:	681b      	ldr	r3, [r3, #0]
   b890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b890c:	9301      	str	r3, [sp, #4]
   b890e:	bd08      	pop	{r3, pc}
   b8910:	00030228 	.word	0x00030228

000b8914 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b8914:	b508      	push	{r3, lr}
   b8916:	4b02      	ldr	r3, [pc, #8]	; (b8920 <hal_i2c_read+0xc>)
   b8918:	681b      	ldr	r3, [r3, #0]
   b891a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b891c:	9301      	str	r3, [sp, #4]
   b891e:	bd08      	pop	{r3, pc}
   b8920:	00030228 	.word	0x00030228

000b8924 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b8924:	b508      	push	{r3, lr}
   b8926:	4b02      	ldr	r3, [pc, #8]	; (b8930 <hal_i2c_peek+0xc>)
   b8928:	681b      	ldr	r3, [r3, #0]
   b892a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b892c:	9301      	str	r3, [sp, #4]
   b892e:	bd08      	pop	{r3, pc}
   b8930:	00030228 	.word	0x00030228

000b8934 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b8934:	b508      	push	{r3, lr}
   b8936:	4b02      	ldr	r3, [pc, #8]	; (b8940 <hal_i2c_flush+0xc>)
   b8938:	681b      	ldr	r3, [r3, #0]
   b893a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b893c:	9301      	str	r3, [sp, #4]
   b893e:	bd08      	pop	{r3, pc}
   b8940:	00030228 	.word	0x00030228

000b8944 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b8944:	b508      	push	{r3, lr}
   b8946:	4b02      	ldr	r3, [pc, #8]	; (b8950 <hal_i2c_is_enabled+0xc>)
   b8948:	681b      	ldr	r3, [r3, #0]
   b894a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b894c:	9301      	str	r3, [sp, #4]
   b894e:	bd08      	pop	{r3, pc}
   b8950:	00030228 	.word	0x00030228

000b8954 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b8954:	b508      	push	{r3, lr}
   b8956:	4b02      	ldr	r3, [pc, #8]	; (b8960 <hal_i2c_init+0xc>)
   b8958:	681b      	ldr	r3, [r3, #0]
   b895a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b895c:	9301      	str	r3, [sp, #4]
   b895e:	bd08      	pop	{r3, pc}
   b8960:	00030228 	.word	0x00030228

000b8964 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b8964:	b508      	push	{r3, lr}
   b8966:	4b02      	ldr	r3, [pc, #8]	; (b8970 <hal_spi_begin+0xc>)
   b8968:	681b      	ldr	r3, [r3, #0]
   b896a:	681b      	ldr	r3, [r3, #0]
   b896c:	9301      	str	r3, [sp, #4]
   b896e:	bd08      	pop	{r3, pc}
   b8970:	00030230 	.word	0x00030230

000b8974 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b8974:	b508      	push	{r3, lr}
   b8976:	4b02      	ldr	r3, [pc, #8]	; (b8980 <hal_spi_transfer+0xc>)
   b8978:	681b      	ldr	r3, [r3, #0]
   b897a:	695b      	ldr	r3, [r3, #20]
   b897c:	9301      	str	r3, [sp, #4]
   b897e:	bd08      	pop	{r3, pc}
   b8980:	00030230 	.word	0x00030230

000b8984 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b8984:	b508      	push	{r3, lr}
   b8986:	4b02      	ldr	r3, [pc, #8]	; (b8990 <hal_spi_init+0xc>)
   b8988:	681b      	ldr	r3, [r3, #0]
   b898a:	69db      	ldr	r3, [r3, #28]
   b898c:	9301      	str	r3, [sp, #4]
   b898e:	bd08      	pop	{r3, pc}
   b8990:	00030230 	.word	0x00030230

000b8994 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b8994:	b508      	push	{r3, lr}
   b8996:	4b02      	ldr	r3, [pc, #8]	; (b89a0 <hal_spi_is_enabled+0xc>)
   b8998:	681b      	ldr	r3, [r3, #0]
   b899a:	6a1b      	ldr	r3, [r3, #32]
   b899c:	9301      	str	r3, [sp, #4]
   b899e:	bd08      	pop	{r3, pc}
   b89a0:	00030230 	.word	0x00030230

000b89a4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b89a4:	b508      	push	{r3, lr}
   b89a6:	4b02      	ldr	r3, [pc, #8]	; (b89b0 <hal_spi_info+0xc>)
   b89a8:	681b      	ldr	r3, [r3, #0]
   b89aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b89ac:	9301      	str	r3, [sp, #4]
   b89ae:	bd08      	pop	{r3, pc}
   b89b0:	00030230 	.word	0x00030230

000b89b4 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b89b4:	b508      	push	{r3, lr}
   b89b6:	4b02      	ldr	r3, [pc, #8]	; (b89c0 <hal_spi_transfer_dma+0xc>)
   b89b8:	681b      	ldr	r3, [r3, #0]
   b89ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b89bc:	9301      	str	r3, [sp, #4]
   b89be:	bd08      	pop	{r3, pc}
   b89c0:	00030230 	.word	0x00030230

000b89c4 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b89c4:	b508      	push	{r3, lr}
   b89c6:	4b02      	ldr	r3, [pc, #8]	; (b89d0 <hal_spi_transfer_dma_status+0xc>)
   b89c8:	681b      	ldr	r3, [r3, #0]
   b89ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b89cc:	9301      	str	r3, [sp, #4]
   b89ce:	bd08      	pop	{r3, pc}
   b89d0:	00030230 	.word	0x00030230

000b89d4 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b89d4:	b508      	push	{r3, lr}
   b89d6:	4b02      	ldr	r3, [pc, #8]	; (b89e0 <hal_spi_set_settings+0xc>)
   b89d8:	681b      	ldr	r3, [r3, #0]
   b89da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b89dc:	9301      	str	r3, [sp, #4]
   b89de:	bd08      	pop	{r3, pc}
   b89e0:	00030230 	.word	0x00030230

000b89e4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b89e4:	b508      	push	{r3, lr}
   b89e6:	4b02      	ldr	r3, [pc, #8]	; (b89f0 <hal_spi_acquire+0xc>)
   b89e8:	681b      	ldr	r3, [r3, #0]
   b89ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b89ec:	9301      	str	r3, [sp, #4]
   b89ee:	bd08      	pop	{r3, pc}
   b89f0:	00030230 	.word	0x00030230

000b89f4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b89f4:	b508      	push	{r3, lr}
   b89f6:	4b02      	ldr	r3, [pc, #8]	; (b8a00 <hal_spi_release+0xc>)
   b89f8:	681b      	ldr	r3, [r3, #0]
   b89fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b89fc:	9301      	str	r3, [sp, #4]
   b89fe:	bd08      	pop	{r3, pc}
   b8a00:	00030230 	.word	0x00030230

000b8a04 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b8a04:	b508      	push	{r3, lr}
   b8a06:	4b02      	ldr	r3, [pc, #8]	; (b8a10 <HAL_USB_USART_Init+0xc>)
   b8a08:	681b      	ldr	r3, [r3, #0]
   b8a0a:	681b      	ldr	r3, [r3, #0]
   b8a0c:	9301      	str	r3, [sp, #4]
   b8a0e:	bd08      	pop	{r3, pc}
   b8a10:	0003024c 	.word	0x0003024c

000b8a14 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b8a14:	b508      	push	{r3, lr}
   b8a16:	4b02      	ldr	r3, [pc, #8]	; (b8a20 <HAL_USB_USART_Begin+0xc>)
   b8a18:	681b      	ldr	r3, [r3, #0]
   b8a1a:	685b      	ldr	r3, [r3, #4]
   b8a1c:	9301      	str	r3, [sp, #4]
   b8a1e:	bd08      	pop	{r3, pc}
   b8a20:	0003024c 	.word	0x0003024c

000b8a24 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b8a24:	b508      	push	{r3, lr}
   b8a26:	4b02      	ldr	r3, [pc, #8]	; (b8a30 <HAL_USB_USART_Available_Data+0xc>)
   b8a28:	681b      	ldr	r3, [r3, #0]
   b8a2a:	691b      	ldr	r3, [r3, #16]
   b8a2c:	9301      	str	r3, [sp, #4]
   b8a2e:	bd08      	pop	{r3, pc}
   b8a30:	0003024c 	.word	0x0003024c

000b8a34 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b8a34:	b508      	push	{r3, lr}
   b8a36:	4b02      	ldr	r3, [pc, #8]	; (b8a40 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b8a38:	681b      	ldr	r3, [r3, #0]
   b8a3a:	695b      	ldr	r3, [r3, #20]
   b8a3c:	9301      	str	r3, [sp, #4]
   b8a3e:	bd08      	pop	{r3, pc}
   b8a40:	0003024c 	.word	0x0003024c

000b8a44 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8a44:	b508      	push	{r3, lr}
   b8a46:	4b02      	ldr	r3, [pc, #8]	; (b8a50 <HAL_USB_USART_Receive_Data+0xc>)
   b8a48:	681b      	ldr	r3, [r3, #0]
   b8a4a:	699b      	ldr	r3, [r3, #24]
   b8a4c:	9301      	str	r3, [sp, #4]
   b8a4e:	bd08      	pop	{r3, pc}
   b8a50:	0003024c 	.word	0x0003024c

000b8a54 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8a54:	b508      	push	{r3, lr}
   b8a56:	4b02      	ldr	r3, [pc, #8]	; (b8a60 <HAL_USB_USART_Send_Data+0xc>)
   b8a58:	681b      	ldr	r3, [r3, #0]
   b8a5a:	69db      	ldr	r3, [r3, #28]
   b8a5c:	9301      	str	r3, [sp, #4]
   b8a5e:	bd08      	pop	{r3, pc}
   b8a60:	0003024c 	.word	0x0003024c

000b8a64 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b8a64:	b508      	push	{r3, lr}
   b8a66:	4b02      	ldr	r3, [pc, #8]	; (b8a70 <HAL_USB_USART_Flush_Data+0xc>)
   b8a68:	681b      	ldr	r3, [r3, #0]
   b8a6a:	6a1b      	ldr	r3, [r3, #32]
   b8a6c:	9301      	str	r3, [sp, #4]
   b8a6e:	bd08      	pop	{r3, pc}
   b8a70:	0003024c 	.word	0x0003024c

000b8a74 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b8a74:	b508      	push	{r3, lr}
   b8a76:	4b02      	ldr	r3, [pc, #8]	; (b8a80 <panic_+0xc>)
   b8a78:	681b      	ldr	r3, [r3, #0]
   b8a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8a7c:	9301      	str	r3, [sp, #4]
   b8a7e:	bd08      	pop	{r3, pc}
   b8a80:	00030260 	.word	0x00030260

000b8a84 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b8a84:	b508      	push	{r3, lr}
   b8a86:	4b02      	ldr	r3, [pc, #8]	; (b8a90 <log_message+0xc>)
   b8a88:	681b      	ldr	r3, [r3, #0]
   b8a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8a8c:	9301      	str	r3, [sp, #4]
   b8a8e:	bd08      	pop	{r3, pc}
   b8a90:	00030260 	.word	0x00030260

000b8a94 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b8a94:	b508      	push	{r3, lr}
   b8a96:	4b02      	ldr	r3, [pc, #8]	; (b8aa0 <system_mode+0xc>)
   b8a98:	681b      	ldr	r3, [r3, #0]
   b8a9a:	681b      	ldr	r3, [r3, #0]
   b8a9c:	9301      	str	r3, [sp, #4]
   b8a9e:	bd08      	pop	{r3, pc}
   b8aa0:	00030220 	.word	0x00030220

000b8aa4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b8aa4:	b508      	push	{r3, lr}
   b8aa6:	4b02      	ldr	r3, [pc, #8]	; (b8ab0 <set_system_mode+0xc>)
   b8aa8:	681b      	ldr	r3, [r3, #0]
   b8aaa:	685b      	ldr	r3, [r3, #4]
   b8aac:	9301      	str	r3, [sp, #4]
   b8aae:	bd08      	pop	{r3, pc}
   b8ab0:	00030220 	.word	0x00030220

000b8ab4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b8ab4:	b508      	push	{r3, lr}
   b8ab6:	4b02      	ldr	r3, [pc, #8]	; (b8ac0 <system_delay_ms+0xc>)
   b8ab8:	681b      	ldr	r3, [r3, #0]
   b8aba:	695b      	ldr	r3, [r3, #20]
   b8abc:	9301      	str	r3, [sp, #4]
   b8abe:	bd08      	pop	{r3, pc}
   b8ac0:	00030220 	.word	0x00030220

000b8ac4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b8ac4:	b508      	push	{r3, lr}
   b8ac6:	4b02      	ldr	r3, [pc, #8]	; (b8ad0 <application_thread_current+0xc>)
   b8ac8:	681b      	ldr	r3, [r3, #0]
   b8aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8acc:	9301      	str	r3, [sp, #4]
   b8ace:	bd08      	pop	{r3, pc}
   b8ad0:	00030220 	.word	0x00030220

000b8ad4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b8ad4:	b508      	push	{r3, lr}
   b8ad6:	4b02      	ldr	r3, [pc, #8]	; (b8ae0 <application_thread_invoke+0xc>)
   b8ad8:	681b      	ldr	r3, [r3, #0]
   b8ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8adc:	9301      	str	r3, [sp, #4]
   b8ade:	bd08      	pop	{r3, pc}
   b8ae0:	00030220 	.word	0x00030220

000b8ae4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b8ae4:	b508      	push	{r3, lr}
   b8ae6:	4b02      	ldr	r3, [pc, #8]	; (b8af0 <system_thread_get_state+0xc>)
   b8ae8:	681b      	ldr	r3, [r3, #0]
   b8aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8aec:	9301      	str	r3, [sp, #4]
   b8aee:	bd08      	pop	{r3, pc}
   b8af0:	00030220 	.word	0x00030220

000b8af4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b8af4:	b508      	push	{r3, lr}
   b8af6:	4b03      	ldr	r3, [pc, #12]	; (b8b04 <system_ctrl_set_app_request_handler+0x10>)
   b8af8:	681b      	ldr	r3, [r3, #0]
   b8afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b8afe:	9301      	str	r3, [sp, #4]
   b8b00:	bd08      	pop	{r3, pc}
   b8b02:	0000      	.short	0x0000
   b8b04:	00030220 	.word	0x00030220

000b8b08 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b8b08:	b508      	push	{r3, lr}
   b8b0a:	4b03      	ldr	r3, [pc, #12]	; (b8b18 <system_ctrl_set_result+0x10>)
   b8b0c:	681b      	ldr	r3, [r3, #0]
   b8b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b8b12:	9301      	str	r3, [sp, #4]
   b8b14:	bd08      	pop	{r3, pc}
   b8b16:	0000      	.short	0x0000
   b8b18:	00030220 	.word	0x00030220

000b8b1c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b8b1c:	b508      	push	{r3, lr}
   b8b1e:	4b02      	ldr	r3, [pc, #8]	; (b8b28 <network_connect+0xc>)
   b8b20:	681b      	ldr	r3, [r3, #0]
   b8b22:	685b      	ldr	r3, [r3, #4]
   b8b24:	9301      	str	r3, [sp, #4]
   b8b26:	bd08      	pop	{r3, pc}
   b8b28:	00030240 	.word	0x00030240

000b8b2c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b8b2c:	b508      	push	{r3, lr}
   b8b2e:	4b02      	ldr	r3, [pc, #8]	; (b8b38 <network_connecting+0xc>)
   b8b30:	681b      	ldr	r3, [r3, #0]
   b8b32:	689b      	ldr	r3, [r3, #8]
   b8b34:	9301      	str	r3, [sp, #4]
   b8b36:	bd08      	pop	{r3, pc}
   b8b38:	00030240 	.word	0x00030240

000b8b3c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b8b3c:	b508      	push	{r3, lr}
   b8b3e:	4b02      	ldr	r3, [pc, #8]	; (b8b48 <network_disconnect+0xc>)
   b8b40:	681b      	ldr	r3, [r3, #0]
   b8b42:	68db      	ldr	r3, [r3, #12]
   b8b44:	9301      	str	r3, [sp, #4]
   b8b46:	bd08      	pop	{r3, pc}
   b8b48:	00030240 	.word	0x00030240

000b8b4c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b8b4c:	b508      	push	{r3, lr}
   b8b4e:	4b02      	ldr	r3, [pc, #8]	; (b8b58 <network_ready+0xc>)
   b8b50:	681b      	ldr	r3, [r3, #0]
   b8b52:	691b      	ldr	r3, [r3, #16]
   b8b54:	9301      	str	r3, [sp, #4]
   b8b56:	bd08      	pop	{r3, pc}
   b8b58:	00030240 	.word	0x00030240

000b8b5c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b8b5c:	b508      	push	{r3, lr}
   b8b5e:	4b02      	ldr	r3, [pc, #8]	; (b8b68 <network_on+0xc>)
   b8b60:	681b      	ldr	r3, [r3, #0]
   b8b62:	695b      	ldr	r3, [r3, #20]
   b8b64:	9301      	str	r3, [sp, #4]
   b8b66:	bd08      	pop	{r3, pc}
   b8b68:	00030240 	.word	0x00030240

000b8b6c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b8b6c:	b508      	push	{r3, lr}
   b8b6e:	4b02      	ldr	r3, [pc, #8]	; (b8b78 <network_off+0xc>)
   b8b70:	681b      	ldr	r3, [r3, #0]
   b8b72:	699b      	ldr	r3, [r3, #24]
   b8b74:	9301      	str	r3, [sp, #4]
   b8b76:	bd08      	pop	{r3, pc}
   b8b78:	00030240 	.word	0x00030240

000b8b7c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b8b7c:	b508      	push	{r3, lr}
   b8b7e:	4b02      	ldr	r3, [pc, #8]	; (b8b88 <network_listen+0xc>)
   b8b80:	681b      	ldr	r3, [r3, #0]
   b8b82:	69db      	ldr	r3, [r3, #28]
   b8b84:	9301      	str	r3, [sp, #4]
   b8b86:	bd08      	pop	{r3, pc}
   b8b88:	00030240 	.word	0x00030240

000b8b8c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b8b8c:	b508      	push	{r3, lr}
   b8b8e:	4b02      	ldr	r3, [pc, #8]	; (b8b98 <network_listening+0xc>)
   b8b90:	681b      	ldr	r3, [r3, #0]
   b8b92:	6a1b      	ldr	r3, [r3, #32]
   b8b94:	9301      	str	r3, [sp, #4]
   b8b96:	bd08      	pop	{r3, pc}
   b8b98:	00030240 	.word	0x00030240

000b8b9c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b8b9c:	b508      	push	{r3, lr}
   b8b9e:	4b02      	ldr	r3, [pc, #8]	; (b8ba8 <network_set_listen_timeout+0xc>)
   b8ba0:	681b      	ldr	r3, [r3, #0]
   b8ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8ba4:	9301      	str	r3, [sp, #4]
   b8ba6:	bd08      	pop	{r3, pc}
   b8ba8:	00030240 	.word	0x00030240

000b8bac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b8bac:	b508      	push	{r3, lr}
   b8bae:	4b02      	ldr	r3, [pc, #8]	; (b8bb8 <network_get_listen_timeout+0xc>)
   b8bb0:	681b      	ldr	r3, [r3, #0]
   b8bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8bb4:	9301      	str	r3, [sp, #4]
   b8bb6:	bd08      	pop	{r3, pc}
   b8bb8:	00030240 	.word	0x00030240

000b8bbc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8bbc:	b508      	push	{r3, lr}
   b8bbe:	4b02      	ldr	r3, [pc, #8]	; (b8bc8 <network_is_on+0xc>)
   b8bc0:	681b      	ldr	r3, [r3, #0]
   b8bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8bc4:	9301      	str	r3, [sp, #4]
   b8bc6:	bd08      	pop	{r3, pc}
   b8bc8:	00030240 	.word	0x00030240

000b8bcc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8bcc:	b508      	push	{r3, lr}
   b8bce:	4b02      	ldr	r3, [pc, #8]	; (b8bd8 <network_is_off+0xc>)
   b8bd0:	681b      	ldr	r3, [r3, #0]
   b8bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8bd4:	9301      	str	r3, [sp, #4]
   b8bd6:	bd08      	pop	{r3, pc}
   b8bd8:	00030240 	.word	0x00030240

000b8bdc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b8bdc:	b508      	push	{r3, lr}
   b8bde:	4b02      	ldr	r3, [pc, #8]	; (b8be8 <spark_process+0xc>)
   b8be0:	681b      	ldr	r3, [r3, #0]
   b8be2:	689b      	ldr	r3, [r3, #8]
   b8be4:	9301      	str	r3, [sp, #4]
   b8be6:	bd08      	pop	{r3, pc}
   b8be8:	00030244 	.word	0x00030244

000b8bec <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b8bec:	b508      	push	{r3, lr}
   b8bee:	4b02      	ldr	r3, [pc, #8]	; (b8bf8 <spark_cloud_flag_connected+0xc>)
   b8bf0:	681b      	ldr	r3, [r3, #0]
   b8bf2:	695b      	ldr	r3, [r3, #20]
   b8bf4:	9301      	str	r3, [sp, #4]
   b8bf6:	bd08      	pop	{r3, pc}
   b8bf8:	00030244 	.word	0x00030244

000b8bfc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b8bfc:	b508      	push	{r3, lr}
   b8bfe:	4b02      	ldr	r3, [pc, #8]	; (b8c08 <spark_send_event+0xc>)
   b8c00:	681b      	ldr	r3, [r3, #0]
   b8c02:	6a1b      	ldr	r3, [r3, #32]
   b8c04:	9301      	str	r3, [sp, #4]
   b8c06:	bd08      	pop	{r3, pc}
   b8c08:	00030244 	.word	0x00030244

000b8c0c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b8c0c:	b508      	push	{r3, lr}
   b8c0e:	4b02      	ldr	r3, [pc, #8]	; (b8c18 <spark_subscribe+0xc>)
   b8c10:	681b      	ldr	r3, [r3, #0]
   b8c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8c14:	9301      	str	r3, [sp, #4]
   b8c16:	bd08      	pop	{r3, pc}
   b8c18:	00030244 	.word	0x00030244

000b8c1c <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b8c1c:	b508      	push	{r3, lr}
   b8c1e:	4b02      	ldr	r3, [pc, #8]	; (b8c28 <spark_sync_time_pending+0xc>)
   b8c20:	681b      	ldr	r3, [r3, #0]
   b8c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8c24:	9301      	str	r3, [sp, #4]
   b8c26:	bd08      	pop	{r3, pc}
   b8c28:	00030244 	.word	0x00030244

000b8c2c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b8c2c:	b508      	push	{r3, lr}
   b8c2e:	4b02      	ldr	r3, [pc, #8]	; (b8c38 <spark_set_random_seed_from_cloud_handler+0xc>)
   b8c30:	681b      	ldr	r3, [r3, #0]
   b8c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8c34:	9301      	str	r3, [sp, #4]
   b8c36:	bd08      	pop	{r3, pc}
   b8c38:	00030244 	.word	0x00030244

000b8c3c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8c3c:	b508      	push	{r3, lr}
   b8c3e:	4b02      	ldr	r3, [pc, #8]	; (b8c48 <malloc+0xc>)
   b8c40:	681b      	ldr	r3, [r3, #0]
   b8c42:	681b      	ldr	r3, [r3, #0]
   b8c44:	9301      	str	r3, [sp, #4]
   b8c46:	bd08      	pop	{r3, pc}
   b8c48:	0003021c 	.word	0x0003021c

000b8c4c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b8c4c:	b508      	push	{r3, lr}
   b8c4e:	4b02      	ldr	r3, [pc, #8]	; (b8c58 <free+0xc>)
   b8c50:	681b      	ldr	r3, [r3, #0]
   b8c52:	685b      	ldr	r3, [r3, #4]
   b8c54:	9301      	str	r3, [sp, #4]
   b8c56:	bd08      	pop	{r3, pc}
   b8c58:	0003021c 	.word	0x0003021c

000b8c5c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b8c5c:	b508      	push	{r3, lr}
   b8c5e:	4b02      	ldr	r3, [pc, #8]	; (b8c68 <realloc+0xc>)
   b8c60:	681b      	ldr	r3, [r3, #0]
   b8c62:	689b      	ldr	r3, [r3, #8]
   b8c64:	9301      	str	r3, [sp, #4]
   b8c66:	bd08      	pop	{r3, pc}
   b8c68:	0003021c 	.word	0x0003021c

000b8c6c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b8c6c:	b508      	push	{r3, lr}
   b8c6e:	4b02      	ldr	r3, [pc, #8]	; (b8c78 <sprintf+0xc>)
   b8c70:	681b      	ldr	r3, [r3, #0]
   b8c72:	68db      	ldr	r3, [r3, #12]
   b8c74:	9301      	str	r3, [sp, #4]
   b8c76:	bd08      	pop	{r3, pc}
   b8c78:	0003021c 	.word	0x0003021c

000b8c7c <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b8c7c:	b508      	push	{r3, lr}
   b8c7e:	4b02      	ldr	r3, [pc, #8]	; (b8c88 <sscanf+0xc>)
   b8c80:	681b      	ldr	r3, [r3, #0]
   b8c82:	695b      	ldr	r3, [r3, #20]
   b8c84:	9301      	str	r3, [sp, #4]
   b8c86:	bd08      	pop	{r3, pc}
   b8c88:	0003021c 	.word	0x0003021c

000b8c8c <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b8c8c:	b508      	push	{r3, lr}
   b8c8e:	4b02      	ldr	r3, [pc, #8]	; (b8c98 <snprintf+0xc>)
   b8c90:	681b      	ldr	r3, [r3, #0]
   b8c92:	69db      	ldr	r3, [r3, #28]
   b8c94:	9301      	str	r3, [sp, #4]
   b8c96:	bd08      	pop	{r3, pc}
   b8c98:	0003021c 	.word	0x0003021c

000b8c9c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b8c9c:	b508      	push	{r3, lr}
   b8c9e:	4b02      	ldr	r3, [pc, #8]	; (b8ca8 <vsnprintf+0xc>)
   b8ca0:	681b      	ldr	r3, [r3, #0]
   b8ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8ca4:	9301      	str	r3, [sp, #4]
   b8ca6:	bd08      	pop	{r3, pc}
   b8ca8:	0003021c 	.word	0x0003021c

000b8cac <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b8cac:	b508      	push	{r3, lr}
   b8cae:	4b02      	ldr	r3, [pc, #8]	; (b8cb8 <abort+0xc>)
   b8cb0:	681b      	ldr	r3, [r3, #0]
   b8cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8cb4:	9301      	str	r3, [sp, #4]
   b8cb6:	bd08      	pop	{r3, pc}
   b8cb8:	0003021c 	.word	0x0003021c

000b8cbc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b8cbc:	b508      	push	{r3, lr}
   b8cbe:	4b02      	ldr	r3, [pc, #8]	; (b8cc8 <_malloc_r+0xc>)
   b8cc0:	681b      	ldr	r3, [r3, #0]
   b8cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8cc4:	9301      	str	r3, [sp, #4]
   b8cc6:	bd08      	pop	{r3, pc}
   b8cc8:	0003021c 	.word	0x0003021c

000b8ccc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b8ccc:	b508      	push	{r3, lr}
   b8cce:	4b02      	ldr	r3, [pc, #8]	; (b8cd8 <__errno+0xc>)
   b8cd0:	681b      	ldr	r3, [r3, #0]
   b8cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8cd4:	9301      	str	r3, [sp, #4]
   b8cd6:	bd08      	pop	{r3, pc}
   b8cd8:	0003021c 	.word	0x0003021c

000b8cdc <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b8cdc:	b508      	push	{r3, lr}
   b8cde:	4b02      	ldr	r3, [pc, #8]	; (b8ce8 <__assert_func+0xc>)
   b8ce0:	681b      	ldr	r3, [r3, #0]
   b8ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8ce4:	9301      	str	r3, [sp, #4]
   b8ce6:	bd08      	pop	{r3, pc}
   b8ce8:	0003021c 	.word	0x0003021c

000b8cec <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b8cec:	b508      	push	{r3, lr}
   b8cee:	4b02      	ldr	r3, [pc, #8]	; (b8cf8 <newlib_impure_ptr_callback+0xc>)
   b8cf0:	681b      	ldr	r3, [r3, #0]
   b8cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8cf4:	9301      	str	r3, [sp, #4]
   b8cf6:	bd08      	pop	{r3, pc}
   b8cf8:	0003021c 	.word	0x0003021c

000b8cfc <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b8cfc:	b508      	push	{r3, lr}
   b8cfe:	4b02      	ldr	r3, [pc, #8]	; (b8d08 <localtime_r+0xc>)
   b8d00:	681b      	ldr	r3, [r3, #0]
   b8d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8d04:	9301      	str	r3, [sp, #4]
   b8d06:	bd08      	pop	{r3, pc}
   b8d08:	0003021c 	.word	0x0003021c

000b8d0c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8d0c:	2200      	movs	r2, #0
   b8d0e:	6840      	ldr	r0, [r0, #4]
   b8d10:	4611      	mov	r1, r2
   b8d12:	f7ff bf3b 	b.w	b8b8c <network_listening>

000b8d16 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8d16:	2200      	movs	r2, #0
   b8d18:	6840      	ldr	r0, [r0, #4]
   b8d1a:	4611      	mov	r1, r2
   b8d1c:	f7ff bf46 	b.w	b8bac <network_get_listen_timeout>

000b8d20 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8d20:	6840      	ldr	r0, [r0, #4]
   b8d22:	2200      	movs	r2, #0
   b8d24:	f7ff bf3a 	b.w	b8b9c <network_set_listen_timeout>

000b8d28 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8d28:	6840      	ldr	r0, [r0, #4]
   b8d2a:	2200      	movs	r2, #0
   b8d2c:	f081 0101 	eor.w	r1, r1, #1
   b8d30:	f7ff bf24 	b.w	b8b7c <network_listen>

000b8d34 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8d34:	2300      	movs	r3, #0
   b8d36:	6840      	ldr	r0, [r0, #4]
   b8d38:	461a      	mov	r2, r3
   b8d3a:	4619      	mov	r1, r3
   b8d3c:	f7ff bf16 	b.w	b8b6c <network_off>

000b8d40 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8d40:	2300      	movs	r3, #0
   b8d42:	6840      	ldr	r0, [r0, #4]
   b8d44:	461a      	mov	r2, r3
   b8d46:	4619      	mov	r1, r3
   b8d48:	f7ff bf08 	b.w	b8b5c <network_on>

000b8d4c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8d4c:	2200      	movs	r2, #0
   b8d4e:	6840      	ldr	r0, [r0, #4]
   b8d50:	4611      	mov	r1, r2
   b8d52:	f7ff befb 	b.w	b8b4c <network_ready>

000b8d56 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8d56:	2200      	movs	r2, #0
   b8d58:	6840      	ldr	r0, [r0, #4]
   b8d5a:	4611      	mov	r1, r2
   b8d5c:	f7ff bee6 	b.w	b8b2c <network_connecting>

000b8d60 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8d60:	6840      	ldr	r0, [r0, #4]
   b8d62:	2200      	movs	r2, #0
   b8d64:	2102      	movs	r1, #2
   b8d66:	f7ff bee9 	b.w	b8b3c <network_disconnect>

000b8d6a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8d6a:	2300      	movs	r3, #0
   b8d6c:	6840      	ldr	r0, [r0, #4]
   b8d6e:	461a      	mov	r2, r3
   b8d70:	f7ff bed4 	b.w	b8b1c <network_connect>

000b8d74 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8d74:	4b02      	ldr	r3, [pc, #8]	; (b8d80 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b8d76:	2203      	movs	r2, #3
   b8d78:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b8d7a:	4a02      	ldr	r2, [pc, #8]	; (b8d84 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b8d7c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b8d7e:	4770      	bx	lr
   b8d80:	2003e654 	.word	0x2003e654
   b8d84:	000c080c 	.word	0x000c080c

000b8d88 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b8d88:	2100      	movs	r1, #0
   b8d8a:	f7ff be33 	b.w	b89f4 <hal_spi_release>

000b8d8e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b8d8e:	2100      	movs	r1, #0
   b8d90:	f7ff be28 	b.w	b89e4 <hal_spi_acquire>

000b8d94 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b8d94:	b510      	push	{r4, lr}
   b8d96:	4604      	mov	r4, r0
   b8d98:	4608      	mov	r0, r1
{
    _spi = spi;
   b8d9a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b8d9c:	f7ff fdf2 	bl	b8984 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b8da0:	2300      	movs	r3, #0
   b8da2:	6063      	str	r3, [r4, #4]
}
   b8da4:	4620      	mov	r0, r4
   b8da6:	bd10      	pop	{r4, pc}

000b8da8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b8da8:	b513      	push	{r0, r1, r4, lr}
   b8daa:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b8dac:	7800      	ldrb	r0, [r0, #0]
   b8dae:	f7ff ffee 	bl	b8d8e <_ZN8SPIClass4lockEv.isra.0>
   b8db2:	b958      	cbnz	r0, b8dcc <_ZN8SPIClass5beginEv+0x24>
   b8db4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b8db6:	9001      	str	r0, [sp, #4]
   b8db8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8dbc:	f7ff fdd2 	bl	b8964 <hal_spi_begin>
        unlock();
   b8dc0:	9801      	ldr	r0, [sp, #4]
    }
}
   b8dc2:	b002      	add	sp, #8
   b8dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8dc8:	f7ff bfde 	b.w	b8d88 <_ZN8SPIClass6unlockEv.isra.0>
   b8dcc:	b002      	add	sp, #8
   b8dce:	bd10      	pop	{r4, pc}

000b8dd0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b8dd0:	7800      	ldrb	r0, [r0, #0]
   b8dd2:	f7ff bfd9 	b.w	b8d88 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b8dd8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b8dd8:	0840      	lsrs	r0, r0, #1
{
   b8dda:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b8ddc:	6018      	str	r0, [r3, #0]
   b8dde:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b8de0:	6818      	ldr	r0, [r3, #0]
   b8de2:	4288      	cmp	r0, r1
   b8de4:	b2e5      	uxtb	r5, r4
   b8de6:	d906      	bls.n	b8df6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b8de8:	3401      	adds	r4, #1
   b8dea:	2c08      	cmp	r4, #8
   b8dec:	d002      	beq.n	b8df4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b8dee:	0840      	lsrs	r0, r0, #1
   b8df0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b8df2:	e7f5      	b.n	b8de0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b8df4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b8df6:	4b02      	ldr	r3, [pc, #8]	; (b8e00 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b8df8:	5d5b      	ldrb	r3, [r3, r5]
   b8dfa:	7013      	strb	r3, [r2, #0]
}
   b8dfc:	bd30      	pop	{r4, r5, pc}
   b8dfe:	bf00      	nop
   b8e00:	000c0840 	.word	0x000c0840

000b8e04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b8e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8e08:	4606      	mov	r6, r0
   b8e0a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b8e0c:	7800      	ldrb	r0, [r0, #0]
{
   b8e0e:	460c      	mov	r4, r1
    CHECK(lock());
   b8e10:	f7ff ffbd 	bl	b8d8e <_ZN8SPIClass4lockEv.isra.0>
   b8e14:	2800      	cmp	r0, #0
   b8e16:	db1b      	blt.n	b8e50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b8e18:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b8e1a:	2214      	movs	r2, #20
   b8e1c:	2100      	movs	r1, #0
   b8e1e:	a809      	add	r0, sp, #36	; 0x24
   b8e20:	f004 fbbf 	bl	bd5a2 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b8e24:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b8e26:	2200      	movs	r2, #0
   b8e28:	a909      	add	r1, sp, #36	; 0x24
   b8e2a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b8e2c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b8e30:	f7ff fdb8 	bl	b89a4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b8e34:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b8e38:	b113      	cbz	r3, b8e40 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b8e3a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b8e3e:	b155      	cbz	r5, b8e56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b8e40:	2700      	movs	r7, #0
   b8e42:	46b9      	mov	r9, r7
   b8e44:	46b8      	mov	r8, r7
   b8e46:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b8e48:	7923      	ldrb	r3, [r4, #4]
   b8e4a:	b15d      	cbz	r5, b8e64 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b8e4c:	b1c3      	cbz	r3, b8e80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b8e4e:	2000      	movs	r0, #0
}
   b8e50:	b00f      	add	sp, #60	; 0x3c
   b8e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b8e56:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b8e5a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b8e5e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b8e62:	e7f1      	b.n	b8e48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b8e64:	2b00      	cmp	r3, #0
   b8e66:	d135      	bne.n	b8ed4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b8e68:	68a3      	ldr	r3, [r4, #8]
   b8e6a:	4543      	cmp	r3, r8
   b8e6c:	d108      	bne.n	b8e80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b8e6e:	f88d 9020 	strb.w	r9, [sp, #32]
   b8e72:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b8e76:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b8e7a:	89a3      	ldrh	r3, [r4, #12]
   b8e7c:	429a      	cmp	r2, r3
   b8e7e:	d0e6      	beq.n	b8e4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b8e80:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b8e82:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b8e84:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b8e88:	980a      	ldr	r0, [sp, #40]	; 0x28
   b8e8a:	ab04      	add	r3, sp, #16
   b8e8c:	f10d 020f 	add.w	r2, sp, #15
   b8e90:	f7ff ffa2 	bl	b8dd8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b8e94:	7921      	ldrb	r1, [r4, #4]
   b8e96:	b985      	cbnz	r5, b8eba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b8e98:	b989      	cbnz	r1, b8ebe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b8e9a:	68a3      	ldr	r3, [r4, #8]
   b8e9c:	4543      	cmp	r3, r8
   b8e9e:	d30e      	bcc.n	b8ebe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b8ea0:	f88d 9020 	strb.w	r9, [sp, #32]
   b8ea4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b8ea8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b8eac:	89a3      	ldrh	r3, [r4, #12]
   b8eae:	429a      	cmp	r2, r3
   b8eb0:	d105      	bne.n	b8ebe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b8eb2:	9b04      	ldr	r3, [sp, #16]
   b8eb4:	4543      	cmp	r3, r8
   b8eb6:	d102      	bne.n	b8ebe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b8eb8:	e7c9      	b.n	b8e4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b8eba:	2900      	cmp	r1, #0
   b8ebc:	d1f9      	bne.n	b8eb2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b8ebe:	2300      	movs	r3, #0
   b8ec0:	9301      	str	r3, [sp, #4]
   b8ec2:	7b63      	ldrb	r3, [r4, #13]
   b8ec4:	9300      	str	r3, [sp, #0]
   b8ec6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b8eca:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b8ecc:	7830      	ldrb	r0, [r6, #0]
   b8ece:	f7ff fd81 	bl	b89d4 <hal_spi_set_settings>
   b8ed2:	e7bc      	b.n	b8e4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b8ed4:	e9cd 5500 	strd	r5, r5, [sp]
   b8ed8:	462b      	mov	r3, r5
   b8eda:	462a      	mov	r2, r5
   b8edc:	2101      	movs	r1, #1
   b8ede:	e7f5      	b.n	b8ecc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b8ee0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b8ee0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b8ee2:	7800      	ldrb	r0, [r0, #0]
   b8ee4:	f7ff fd46 	bl	b8974 <hal_spi_transfer>
}
   b8ee8:	b2c0      	uxtb	r0, r0
   b8eea:	bd08      	pop	{r3, pc}

000b8eec <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b8eec:	b530      	push	{r4, r5, lr}
   b8eee:	b087      	sub	sp, #28
   b8ef0:	4604      	mov	r4, r0
   b8ef2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b8ef4:	9500      	str	r5, [sp, #0]
   b8ef6:	7800      	ldrb	r0, [r0, #0]
   b8ef8:	f7ff fd5c 	bl	b89b4 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b8efc:	b93d      	cbnz	r5, b8f0e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b8efe:	7820      	ldrb	r0, [r4, #0]
   b8f00:	a902      	add	r1, sp, #8
   b8f02:	f7ff fd5f 	bl	b89c4 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b8f06:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b8f0a:	07db      	lsls	r3, r3, #31
   b8f0c:	d4f7      	bmi.n	b8efe <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b8f0e:	b007      	add	sp, #28
   b8f10:	bd30      	pop	{r4, r5, pc}
	...

000b8f14 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8f14:	4b05      	ldr	r3, [pc, #20]	; (b8f2c <_GLOBAL__sub_I_System+0x18>)
   b8f16:	2202      	movs	r2, #2
   b8f18:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b8f1a:	4b05      	ldr	r3, [pc, #20]	; (b8f30 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8f1c:	4a05      	ldr	r2, [pc, #20]	; (b8f34 <_GLOBAL__sub_I_System+0x20>)
   b8f1e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8f20:	2000      	movs	r0, #0
   b8f22:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8f26:	f7ff bdbd 	b.w	b8aa4 <set_system_mode>
   b8f2a:	bf00      	nop
   b8f2c:	2003e668 	.word	0x2003e668
   b8f30:	2003e65c 	.word	0x2003e65c
   b8f34:	ffff0000 	.word	0xffff0000

000b8f38 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b8f38:	b510      	push	{r4, lr}
   b8f3a:	4604      	mov	r4, r0
{
	free(buffer);
   b8f3c:	6800      	ldr	r0, [r0, #0]
   b8f3e:	f7ff fe85 	bl	b8c4c <free>
}
   b8f42:	4620      	mov	r0, r4
   b8f44:	bd10      	pop	{r4, pc}

000b8f46 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b8f46:	b510      	push	{r4, lr}
   b8f48:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b8f4a:	6800      	ldr	r0, [r0, #0]
   b8f4c:	b108      	cbz	r0, b8f52 <_ZN6String10invalidateEv+0xc>
   b8f4e:	f7ff fe7d 	bl	b8c4c <free>
	buffer = NULL;
   b8f52:	2300      	movs	r3, #0
	capacity = len = 0;
   b8f54:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8f58:	6023      	str	r3, [r4, #0]
}
   b8f5a:	bd10      	pop	{r4, pc}

000b8f5c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8f5c:	b538      	push	{r3, r4, r5, lr}
   b8f5e:	4604      	mov	r4, r0
   b8f60:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b8f62:	6800      	ldr	r0, [r0, #0]
   b8f64:	3101      	adds	r1, #1
   b8f66:	f7ff fe79 	bl	b8c5c <realloc>
	if (newbuffer) {
   b8f6a:	b110      	cbz	r0, b8f72 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b8f6c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b8f70:	2001      	movs	r0, #1
	}
	return 0;
}
   b8f72:	bd38      	pop	{r3, r4, r5, pc}

000b8f74 <_ZN6String7reserveEj>:
{
   b8f74:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b8f76:	6803      	ldr	r3, [r0, #0]
{
   b8f78:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b8f7a:	b123      	cbz	r3, b8f86 <_ZN6String7reserveEj+0x12>
   b8f7c:	6843      	ldr	r3, [r0, #4]
   b8f7e:	428b      	cmp	r3, r1
   b8f80:	d301      	bcc.n	b8f86 <_ZN6String7reserveEj+0x12>
   b8f82:	2001      	movs	r0, #1
}
   b8f84:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b8f86:	4620      	mov	r0, r4
   b8f88:	f7ff ffe8 	bl	b8f5c <_ZN6String12changeBufferEj>
   b8f8c:	2800      	cmp	r0, #0
   b8f8e:	d0f9      	beq.n	b8f84 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8f90:	68a3      	ldr	r3, [r4, #8]
   b8f92:	2b00      	cmp	r3, #0
   b8f94:	d1f5      	bne.n	b8f82 <_ZN6String7reserveEj+0xe>
   b8f96:	6822      	ldr	r2, [r4, #0]
   b8f98:	7013      	strb	r3, [r2, #0]
   b8f9a:	e7f2      	b.n	b8f82 <_ZN6String7reserveEj+0xe>

000b8f9c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8f9e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8fa0:	4611      	mov	r1, r2
   b8fa2:	9201      	str	r2, [sp, #4]
{
   b8fa4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b8fa6:	f7ff ffe5 	bl	b8f74 <_ZN6String7reserveEj>
   b8faa:	9a01      	ldr	r2, [sp, #4]
   b8fac:	b928      	cbnz	r0, b8fba <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8fae:	4620      	mov	r0, r4
   b8fb0:	f7ff ffc9 	bl	b8f46 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8fb4:	4620      	mov	r0, r4
   b8fb6:	b003      	add	sp, #12
   b8fb8:	bd30      	pop	{r4, r5, pc}
	len = length;
   b8fba:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8fbc:	4629      	mov	r1, r5
   b8fbe:	6820      	ldr	r0, [r4, #0]
   b8fc0:	f004 fac7 	bl	bd552 <memcpy>
	buffer[len] = 0;
   b8fc4:	6822      	ldr	r2, [r4, #0]
   b8fc6:	68a3      	ldr	r3, [r4, #8]
   b8fc8:	2100      	movs	r1, #0
   b8fca:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8fcc:	e7f2      	b.n	b8fb4 <_ZN6String4copyEPKcj+0x18>

000b8fce <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8fce:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8fd0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b8fd2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b8fd6:	4604      	mov	r4, r0
	len = 0;
   b8fd8:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8fda:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8fdc:	b141      	cbz	r1, b8ff0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8fde:	4608      	mov	r0, r1
   b8fe0:	9101      	str	r1, [sp, #4]
   b8fe2:	f004 fb54 	bl	bd68e <strlen>
   b8fe6:	9901      	ldr	r1, [sp, #4]
   b8fe8:	4602      	mov	r2, r0
   b8fea:	4620      	mov	r0, r4
   b8fec:	f7ff ffd6 	bl	b8f9c <_ZN6String4copyEPKcj>
}
   b8ff0:	4620      	mov	r0, r4
   b8ff2:	b002      	add	sp, #8
   b8ff4:	bd10      	pop	{r4, pc}

000b8ff6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b8ff6:	b538      	push	{r3, r4, r5, lr}
   b8ff8:	4605      	mov	r5, r0
	if (buffer) {
   b8ffa:	6800      	ldr	r0, [r0, #0]
{
   b8ffc:	460c      	mov	r4, r1
	if (buffer) {
   b8ffe:	b168      	cbz	r0, b901c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b9000:	686a      	ldr	r2, [r5, #4]
   b9002:	688b      	ldr	r3, [r1, #8]
   b9004:	429a      	cmp	r2, r3
   b9006:	d307      	bcc.n	b9018 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b9008:	6809      	ldr	r1, [r1, #0]
   b900a:	f004 fb1a 	bl	bd642 <strcpy>
			len = rhs.len;
   b900e:	68a3      	ldr	r3, [r4, #8]
   b9010:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b9012:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b9014:	60a3      	str	r3, [r4, #8]
}
   b9016:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b9018:	f7ff fe18 	bl	b8c4c <free>
	buffer = rhs.buffer;
   b901c:	6823      	ldr	r3, [r4, #0]
   b901e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b9020:	6863      	ldr	r3, [r4, #4]
   b9022:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b9024:	68a3      	ldr	r3, [r4, #8]
   b9026:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b9028:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b902a:	e9c4 3300 	strd	r3, r3, [r4]
   b902e:	e7f1      	b.n	b9014 <_ZN6String4moveERS_+0x1e>

000b9030 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b9030:	b510      	push	{r4, lr}
	buffer = NULL;
   b9032:	2300      	movs	r3, #0
	capacity = 0;
   b9034:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b9038:	4604      	mov	r4, r0
	len = 0;
   b903a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b903c:	7303      	strb	r3, [r0, #12]
	move(rval);
   b903e:	f7ff ffda 	bl	b8ff6 <_ZN6String4moveERS_>
}
   b9042:	4620      	mov	r0, r4
   b9044:	bd10      	pop	{r4, pc}

000b9046 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b9046:	4288      	cmp	r0, r1
{
   b9048:	b510      	push	{r4, lr}
   b904a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b904c:	d005      	beq.n	b905a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b904e:	680b      	ldr	r3, [r1, #0]
   b9050:	b12b      	cbz	r3, b905e <_ZN6StringaSERKS_+0x18>
   b9052:	688a      	ldr	r2, [r1, #8]
   b9054:	4619      	mov	r1, r3
   b9056:	f7ff ffa1 	bl	b8f9c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b905a:	4620      	mov	r0, r4
   b905c:	bd10      	pop	{r4, pc}
	else invalidate();
   b905e:	f7ff ff72 	bl	b8f46 <_ZN6String10invalidateEv>
   b9062:	e7fa      	b.n	b905a <_ZN6StringaSERKS_+0x14>

000b9064 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b9064:	b510      	push	{r4, lr}
	buffer = NULL;
   b9066:	2300      	movs	r3, #0
String::String(const String &value)
   b9068:	4604      	mov	r4, r0
	capacity = 0;
   b906a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b906e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b9070:	7303      	strb	r3, [r0, #12]
	*this = value;
   b9072:	f7ff ffe8 	bl	b9046 <_ZN6StringaSERKS_>
}
   b9076:	4620      	mov	r0, r4
   b9078:	bd10      	pop	{r4, pc}

000b907a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b907a:	b513      	push	{r0, r1, r4, lr}
   b907c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b907e:	b159      	cbz	r1, b9098 <_ZN6StringaSEPKc+0x1e>
   b9080:	4608      	mov	r0, r1
   b9082:	9101      	str	r1, [sp, #4]
   b9084:	f004 fb03 	bl	bd68e <strlen>
   b9088:	9901      	ldr	r1, [sp, #4]
   b908a:	4602      	mov	r2, r0
   b908c:	4620      	mov	r0, r4
   b908e:	f7ff ff85 	bl	b8f9c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b9092:	4620      	mov	r0, r4
   b9094:	b002      	add	sp, #8
   b9096:	bd10      	pop	{r4, pc}
	else invalidate();
   b9098:	f7ff ff55 	bl	b8f46 <_ZN6String10invalidateEv>
   b909c:	e7f9      	b.n	b9092 <_ZN6StringaSEPKc+0x18>

000b909e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b909e:	b570      	push	{r4, r5, r6, lr}
   b90a0:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b90a2:	460e      	mov	r6, r1
   b90a4:	b909      	cbnz	r1, b90aa <_ZN6String6concatEPKcj+0xc>
   b90a6:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b90a8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b90aa:	b16a      	cbz	r2, b90c8 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b90ac:	6884      	ldr	r4, [r0, #8]
   b90ae:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b90b0:	4621      	mov	r1, r4
   b90b2:	f7ff ff5f 	bl	b8f74 <_ZN6String7reserveEj>
   b90b6:	2800      	cmp	r0, #0
   b90b8:	d0f5      	beq.n	b90a6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b90ba:	6828      	ldr	r0, [r5, #0]
   b90bc:	68ab      	ldr	r3, [r5, #8]
   b90be:	4631      	mov	r1, r6
   b90c0:	4418      	add	r0, r3
   b90c2:	f004 fabe 	bl	bd642 <strcpy>
	len = newlen;
   b90c6:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b90c8:	2001      	movs	r0, #1
   b90ca:	e7ed      	b.n	b90a8 <_ZN6String6concatEPKcj+0xa>

000b90cc <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b90cc:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b90ce:	2300      	movs	r3, #0
	buf[0] = c;
   b90d0:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b90d4:	2201      	movs	r2, #1
   b90d6:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b90d8:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b90dc:	f7ff ffdf 	bl	b909e <_ZN6String6concatEPKcj>
}
   b90e0:	b003      	add	sp, #12
   b90e2:	f85d fb04 	ldr.w	pc, [sp], #4

000b90e6 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b90e6:	6802      	ldr	r2, [r0, #0]
{
   b90e8:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b90ea:	6809      	ldr	r1, [r1, #0]
   b90ec:	b162      	cbz	r2, b9108 <_ZNK6String9compareToERKS_+0x22>
   b90ee:	b941      	cbnz	r1, b9102 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b90f0:	6880      	ldr	r0, [r0, #8]
   b90f2:	b160      	cbz	r0, b910e <_ZNK6String9compareToERKS_+0x28>
   b90f4:	7810      	ldrb	r0, [r2, #0]
   b90f6:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b90f8:	6898      	ldr	r0, [r3, #8]
   b90fa:	b140      	cbz	r0, b910e <_ZNK6String9compareToERKS_+0x28>
   b90fc:	7809      	ldrb	r1, [r1, #0]
   b90fe:	4248      	negs	r0, r1
   b9100:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b9102:	4610      	mov	r0, r2
   b9104:	f004 ba93 	b.w	bd62e <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b9108:	2900      	cmp	r1, #0
   b910a:	d1f5      	bne.n	b90f8 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b910c:	4608      	mov	r0, r1
}
   b910e:	4770      	bx	lr

000b9110 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b9110:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b9112:	6882      	ldr	r2, [r0, #8]
   b9114:	688b      	ldr	r3, [r1, #8]
   b9116:	429a      	cmp	r2, r3
   b9118:	d105      	bne.n	b9126 <_ZNK6String6equalsERKS_+0x16>
   b911a:	f7ff ffe4 	bl	b90e6 <_ZNK6String9compareToERKS_>
   b911e:	fab0 f080 	clz	r0, r0
   b9122:	0940      	lsrs	r0, r0, #5
}
   b9124:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b9126:	2000      	movs	r0, #0
   b9128:	e7fc      	b.n	b9124 <_ZNK6String6equalsERKS_+0x14>

000b912a <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   b912a:	6883      	ldr	r3, [r0, #8]
   b912c:	428b      	cmp	r3, r1
   b912e:	d903      	bls.n	b9138 <_ZNK6StringixEj+0xe>
   b9130:	6800      	ldr	r0, [r0, #0]
   b9132:	b110      	cbz	r0, b913a <_ZNK6StringixEj+0x10>
	return buffer[index];
   b9134:	5c40      	ldrb	r0, [r0, r1]
   b9136:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   b9138:	2000      	movs	r0, #0
}
   b913a:	4770      	bx	lr

000b913c <_ZNK6String6charAtEj>:
	return operator[](loc);
   b913c:	f7ff bff5 	b.w	b912a <_ZNK6StringixEj>

000b9140 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9140:	4770      	bx	lr

000b9142 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b9142:	4770      	bx	lr

000b9144 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b9144:	4770      	bx	lr

000b9146 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9146:	4770      	bx	lr

000b9148 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9148:	4b06      	ldr	r3, [pc, #24]	; (b9164 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b914a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b914c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b914e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b9152:	d005      	beq.n	b9160 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9154:	4608      	mov	r0, r1
   b9156:	f003 fbc1 	bl	bc8dc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b915a:	2800      	cmp	r0, #0
   b915c:	bf08      	it	eq
   b915e:	2400      	moveq	r4, #0
      }
   b9160:	4620      	mov	r0, r4
   b9162:	bd10      	pop	{r4, pc}
   b9164:	000c0ab8 	.word	0x000c0ab8

000b9168 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9168:	4b06      	ldr	r3, [pc, #24]	; (b9184 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b916a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b916c:	b510      	push	{r4, lr}
   b916e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b9172:	d005      	beq.n	b9180 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9174:	4608      	mov	r0, r1
   b9176:	f003 fbb1 	bl	bc8dc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b917a:	2800      	cmp	r0, #0
   b917c:	bf08      	it	eq
   b917e:	2400      	moveq	r4, #0
      }
   b9180:	4620      	mov	r0, r4
   b9182:	bd10      	pop	{r4, pc}
   b9184:	000c0ab8 	.word	0x000c0ab8

000b9188 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9188:	4b06      	ldr	r3, [pc, #24]	; (b91a4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b918a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b918c:	b510      	push	{r4, lr}
   b918e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b9192:	d005      	beq.n	b91a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9194:	4608      	mov	r0, r1
   b9196:	f003 fba1 	bl	bc8dc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b919a:	2800      	cmp	r0, #0
   b919c:	bf08      	it	eq
   b919e:	2400      	moveq	r4, #0
      }
   b91a0:	4620      	mov	r0, r4
   b91a2:	bd10      	pop	{r4, pc}
   b91a4:	000c0ab8 	.word	0x000c0ab8

000b91a8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b91a8:	b510      	push	{r4, lr}
   b91aa:	2168      	movs	r1, #104	; 0x68
   b91ac:	4604      	mov	r4, r0
   b91ae:	f7fa ff76 	bl	b409e <_ZdlPvj>
   b91b2:	4620      	mov	r0, r4
   b91b4:	bd10      	pop	{r4, pc}

000b91b6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b91b6:	b510      	push	{r4, lr}
   b91b8:	2128      	movs	r1, #40	; 0x28
   b91ba:	4604      	mov	r4, r0
   b91bc:	f7fa ff6f 	bl	b409e <_ZdlPvj>
   b91c0:	4620      	mov	r0, r4
   b91c2:	bd10      	pop	{r4, pc}

000b91c4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b91c4:	b510      	push	{r4, lr}
   b91c6:	2130      	movs	r1, #48	; 0x30
   b91c8:	4604      	mov	r4, r0
   b91ca:	f7fa ff68 	bl	b409e <_ZdlPvj>
   b91ce:	4620      	mov	r0, r4
   b91d0:	bd10      	pop	{r4, pc}

000b91d2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b91d2:	2168      	movs	r1, #104	; 0x68
   b91d4:	f7fa bf63 	b.w	b409e <_ZdlPvj>

000b91d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b91d8:	2128      	movs	r1, #40	; 0x28
   b91da:	f7fa bf60 	b.w	b409e <_ZdlPvj>

000b91de <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b91de:	2130      	movs	r1, #48	; 0x30
   b91e0:	f7fa bf5d 	b.w	b409e <_ZdlPvj>

000b91e4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b91e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b91e6:	2500      	movs	r5, #0
   b91e8:	1cec      	adds	r4, r5, #3
   b91ea:	428c      	cmp	r4, r1
   b91ec:	d80d      	bhi.n	b920a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b91ee:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b91f0:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b91f2:	5d87      	ldrb	r7, [r0, r6]
   b91f4:	4297      	cmp	r7, r2
   b91f6:	d105      	bne.n	b9204 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b91f8:	4426      	add	r6, r4
   b91fa:	42b1      	cmp	r1, r6
   b91fc:	d305      	bcc.n	b920a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b91fe:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b9200:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b9202:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b9204:	3401      	adds	r4, #1
   b9206:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b9208:	e7ee      	b.n	b91e8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b920a:	2000      	movs	r0, #0
   b920c:	e7f9      	b.n	b9202 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b9210 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b9210:	4a02      	ldr	r2, [pc, #8]	; (b921c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b9212:	4903      	ldr	r1, [pc, #12]	; (b9220 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b9214:	200a      	movs	r0, #10
   b9216:	f7ff bc2d 	b.w	b8a74 <panic_>
   b921a:	bf00      	nop
   b921c:	000b85ad 	.word	0x000b85ad
   b9220:	000c0848 	.word	0x000c0848

000b9224 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b9224:	b430      	push	{r4, r5}
   b9226:	460d      	mov	r5, r1
   b9228:	4611      	mov	r1, r2
   b922a:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b922c:	6803      	ldr	r3, [r0, #0]
   b922e:	6809      	ldr	r1, [r1, #0]
   b9230:	6828      	ldr	r0, [r5, #0]
   b9232:	e9d3 4300 	ldrd	r4, r3, [r3]
   b9236:	46a4      	mov	ip, r4
      }
   b9238:	bc30      	pop	{r4, r5}
   b923a:	4760      	bx	ip

000b923c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b923c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b923e:	b538      	push	{r3, r4, r5, lr}
   b9240:	4604      	mov	r4, r0
	switch (__op)
   b9242:	d102      	bne.n	b924a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b9244:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b9246:	6023      	str	r3, [r4, #0]
	}
   b9248:	e003      	b.n	b9252 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b924a:	2a02      	cmp	r2, #2
   b924c:	d003      	beq.n	b9256 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b924e:	2a03      	cmp	r2, #3
   b9250:	d00d      	beq.n	b926e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b9252:	2000      	movs	r0, #0
   b9254:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b9256:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b9258:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b925a:	f7fa ff1c 	bl	b4096 <_Znwj>
   b925e:	4603      	mov	r3, r0
   b9260:	2800      	cmp	r0, #0
   b9262:	d0f0      	beq.n	b9246 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b9264:	e895 0003 	ldmia.w	r5, {r0, r1}
   b9268:	e883 0003 	stmia.w	r3, {r0, r1}
   b926c:	e7eb      	b.n	b9246 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b926e:	6800      	ldr	r0, [r0, #0]
   b9270:	2800      	cmp	r0, #0
   b9272:	d0ee      	beq.n	b9252 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b9274:	2108      	movs	r1, #8
   b9276:	f7fa ff12 	bl	b409e <_ZdlPvj>
   b927a:	e7ea      	b.n	b9252 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b927c <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b927c:	b510      	push	{r4, lr}
	if (_M_manager)
   b927e:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b9280:	4604      	mov	r4, r0
	if (_M_manager)
   b9282:	b12b      	cbz	r3, b9290 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b9284:	2203      	movs	r2, #3
   b9286:	4601      	mov	r1, r0
   b9288:	4798      	blx	r3
	    _M_manager = nullptr;
   b928a:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b928c:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b9290:	bd10      	pop	{r4, pc}

000b9292 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b9292:	b510      	push	{r4, lr}
	if (_M_manager)
   b9294:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b9296:	4604      	mov	r4, r0
	if (_M_manager)
   b9298:	b12b      	cbz	r3, b92a6 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b929a:	2203      	movs	r2, #3
   b929c:	4601      	mov	r1, r0
   b929e:	4798      	blx	r3
	    _M_manager = nullptr;
   b92a0:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b92a2:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b92a6:	bd10      	pop	{r4, pc}

000b92a8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   b92a8:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   b92aa:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   b92ac:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   b92ae:	2220      	movs	r2, #32
   b92b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   b92b4:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   b92b6:	4a08      	ldr	r2, [pc, #32]	; (b92d8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   b92b8:	9200      	str	r2, [sp, #0]
   b92ba:	4908      	ldr	r1, [pc, #32]	; (b92dc <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   b92bc:	aa02      	add	r2, sp, #8
   b92be:	2001      	movs	r0, #1
   b92c0:	f7ff fbe0 	bl	b8a84 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b92c4:	6820      	ldr	r0, [r4, #0]
   b92c6:	4906      	ldr	r1, [pc, #24]	; (b92e0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   b92c8:	8800      	ldrh	r0, [r0, #0]
   b92ca:	2300      	movs	r3, #0
   b92cc:	4622      	mov	r2, r4
    }
   b92ce:	b00a      	add	sp, #40	; 0x28
   b92d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b92d4:	f7ff b9d0 	b.w	b8678 <hal_ble_gatt_client_discover_all_services>
   b92d8:	000c086a 	.word	0x000c086a
   b92dc:	000c085f 	.word	0x000c085f
   b92e0:	000bae51 	.word	0x000bae51

000b92e4 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b92e4:	b510      	push	{r4, lr}
   b92e6:	3801      	subs	r0, #1
   b92e8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b92ec:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b92f0:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b92f2:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b92f6:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b92f8:	bf88      	it	hi
   b92fa:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b92fe:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b9302:	7803      	ldrb	r3, [r0, #0]
   b9304:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b9308:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b930c:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b930e:	bf88      	it	hi
   b9310:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b9314:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b9316:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b931a:	d1e7      	bne.n	b92ec <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b931c:	bd10      	pop	{r4, pc}

000b931e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b931e:	b510      	push	{r4, lr}
   b9320:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b9322:	3058      	adds	r0, #88	; 0x58
   b9324:	f7fa ffc6 	bl	b42b4 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b9328:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b932c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9330:	f7ff be02 	b.w	b8f38 <_ZN6StringD1Ev>

000b9334 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   b9334:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   b9336:	6803      	ldr	r3, [r0, #0]
   b9338:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   b933a:	4605      	mov	r5, r0
   b933c:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   b933e:	d008      	beq.n	b9352 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   b9340:	b111      	cbz	r1, b9348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   b9342:	684b      	ldr	r3, [r1, #4]
   b9344:	3301      	adds	r3, #1
   b9346:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   b9348:	6828      	ldr	r0, [r5, #0]
   b934a:	b108      	cbz	r0, b9350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   b934c:	f7fa fff0 	bl	b4330 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b9350:	602c      	str	r4, [r5, #0]
      }
   b9352:	bd38      	pop	{r3, r4, r5, pc}

000b9354 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b9354:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9358:	b2da      	uxtb	r2, r3
   b935a:	2a09      	cmp	r2, #9
   b935c:	d801      	bhi.n	b9362 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b935e:	4618      	mov	r0, r3
   b9360:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b9362:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b9366:	2b05      	cmp	r3, #5
   b9368:	d801      	bhi.n	b936e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b936a:	3857      	subs	r0, #87	; 0x57
   b936c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b936e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b9372:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b9374:	bf94      	ite	ls
   b9376:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b9378:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b937c:	4770      	bx	lr
	...

000b9380 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b9380:	b510      	push	{r4, lr}
            locked_(false) {
   b9382:	2300      	movs	r3, #0
   b9384:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b9386:	4b04      	ldr	r3, [pc, #16]	; (b9398 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b9388:	4604      	mov	r4, r0
   b938a:	6818      	ldr	r0, [r3, #0]
   b938c:	f7ff fa2a 	bl	b87e4 <os_mutex_recursive_lock>
        locked_ = true;
   b9390:	2301      	movs	r3, #1
   b9392:	7023      	strb	r3, [r4, #0]
    }
   b9394:	4620      	mov	r0, r4
   b9396:	bd10      	pop	{r4, pc}
   b9398:	2003e670 	.word	0x2003e670

000b939c <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b939c:	b510      	push	{r4, lr}
        if (locked_) {
   b939e:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b93a0:	4604      	mov	r4, r0
        if (locked_) {
   b93a2:	b11b      	cbz	r3, b93ac <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b93a4:	4b02      	ldr	r3, [pc, #8]	; (b93b0 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b93a6:	6818      	ldr	r0, [r3, #0]
   b93a8:	f7ff fa24 	bl	b87f4 <os_mutex_recursive_unlock>
    }
   b93ac:	4620      	mov	r0, r4
   b93ae:	bd10      	pop	{r4, pc}
   b93b0:	2003e670 	.word	0x2003e670

000b93b4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b93b4:	b082      	sub	sp, #8
   b93b6:	4603      	mov	r3, r0
    address_ = addr;
   b93b8:	6808      	ldr	r0, [r1, #0]
   b93ba:	6849      	ldr	r1, [r1, #4]
   b93bc:	466a      	mov	r2, sp
   b93be:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b93c0:	466a      	mov	r2, sp
   b93c2:	ca03      	ldmia	r2!, {r0, r1}
   b93c4:	6018      	str	r0, [r3, #0]
}
   b93c6:	4618      	mov	r0, r3
    address_ = addr.address_;
   b93c8:	6059      	str	r1, [r3, #4]
}
   b93ca:	b002      	add	sp, #8
   b93cc:	4770      	bx	lr

000b93ce <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b93ce:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b93d0:	7982      	ldrb	r2, [r0, #6]
   b93d2:	798b      	ldrb	r3, [r1, #6]
   b93d4:	429a      	cmp	r2, r3
   b93d6:	d106      	bne.n	b93e6 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b93d8:	2206      	movs	r2, #6
   b93da:	f004 f8aa 	bl	bd532 <memcmp>
   b93de:	fab0 f080 	clz	r0, r0
   b93e2:	0940      	lsrs	r0, r0, #5
}
   b93e4:	bd08      	pop	{r3, pc}
    return false;
   b93e6:	2000      	movs	r0, #0
   b93e8:	e7fc      	b.n	b93e4 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b93ea <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b93ea:	f04f 33ff 	mov.w	r3, #4294967295
   b93ee:	6003      	str	r3, [r0, #0]
   b93f0:	8083      	strh	r3, [r0, #4]
}
   b93f2:	2000      	movs	r0, #0
   b93f4:	4770      	bx	lr

000b93f6 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b93f6:	b508      	push	{r3, lr}
   b93f8:	4602      	mov	r2, r0
        : address_{} {
   b93fa:	2100      	movs	r1, #0
   b93fc:	6001      	str	r1, [r0, #0]
   b93fe:	6041      	str	r1, [r0, #4]
    clear();
   b9400:	f7ff fff3 	bl	b93ea <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b9404:	7191      	strb	r1, [r2, #6]
}
   b9406:	4610      	mov	r0, r2
   b9408:	bd08      	pop	{r3, pc}
	...

000b940c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b940c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b940e:	2301      	movs	r3, #1
   b9410:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9412:	4b05      	ldr	r3, [pc, #20]	; (b9428 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b9414:	4602      	mov	r2, r0
   b9416:	f103 0110 	add.w	r1, r3, #16
   b941a:	f853 4b04 	ldr.w	r4, [r3], #4
   b941e:	f842 4b04 	str.w	r4, [r2], #4
   b9422:	428b      	cmp	r3, r1
   b9424:	d1f9      	bne.n	b941a <_ZN8particle7BleUuidC1Ev+0xe>
}
   b9426:	bd10      	pop	{r4, pc}
   b9428:	000c0ac6 	.word	0x000c0ac6

000b942c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b942c:	7c0b      	ldrb	r3, [r1, #16]
   b942e:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   b9432:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b9434:	d10d      	bne.n	b9452 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   b9436:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9438:	4b0c      	ldr	r3, [pc, #48]	; (b946c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   b943a:	4602      	mov	r2, r0
   b943c:	f103 0410 	add.w	r4, r3, #16
   b9440:	f853 5b04 	ldr.w	r5, [r3], #4
   b9444:	f842 5b04 	str.w	r5, [r2], #4
   b9448:	42a3      	cmp	r3, r4
   b944a:	d1f9      	bne.n	b9440 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   b944c:	880b      	ldrh	r3, [r1, #0]
   b944e:	8183      	strh	r3, [r0, #12]
}
   b9450:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   b9452:	2301      	movs	r3, #1
   b9454:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   b9456:	f101 0210 	add.w	r2, r1, #16
   b945a:	4603      	mov	r3, r0
   b945c:	f851 4b04 	ldr.w	r4, [r1], #4
   b9460:	f843 4b04 	str.w	r4, [r3], #4
   b9464:	4291      	cmp	r1, r2
   b9466:	d1f9      	bne.n	b945c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   b9468:	e7f2      	b.n	b9450 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   b946a:	bf00      	nop
   b946c:	000c0ac6 	.word	0x000c0ac6

000b9470 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b9470:	b510      	push	{r4, lr}
    if (uuid128) {
   b9472:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b9474:	4604      	mov	r4, r0
    if (uuid128) {
   b9476:	b1b1      	cbz	r1, b94a6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b9478:	2a01      	cmp	r2, #1
   b947a:	f101 0210 	add.w	r2, r1, #16
   b947e:	d10a      	bne.n	b9496 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b9480:	4601      	mov	r1, r0
   b9482:	f853 0b04 	ldr.w	r0, [r3], #4
   b9486:	f841 0b04 	str.w	r0, [r1], #4
   b948a:	4293      	cmp	r3, r2
   b948c:	d1f9      	bne.n	b9482 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b948e:	2301      	movs	r3, #1
   b9490:	6123      	str	r3, [r4, #16]
}
   b9492:	4620      	mov	r0, r4
   b9494:	bd10      	pop	{r4, pc}
   b9496:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b9498:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b949c:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b94a0:	429a      	cmp	r2, r3
   b94a2:	d1f9      	bne.n	b9498 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b94a4:	e7f3      	b.n	b948e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b94a6:	2210      	movs	r2, #16
   b94a8:	f004 f87b 	bl	bd5a2 <memset>
   b94ac:	e7f1      	b.n	b9492 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b94ae <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b94ae:	b538      	push	{r3, r4, r5, lr}
   b94b0:	4604      	mov	r4, r0
   b94b2:	460d      	mov	r5, r1
        : BleUuid() {
   b94b4:	f7ff ffaa 	bl	b940c <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b94b8:	2300      	movs	r3, #0
   b94ba:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b94bc:	81a5      	strh	r5, [r4, #12]
}
   b94be:	4620      	mov	r0, r4
   b94c0:	bd38      	pop	{r3, r4, r5, pc}

000b94c2 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b94c2:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b94c4:	6902      	ldr	r2, [r0, #16]
   b94c6:	690b      	ldr	r3, [r1, #16]
   b94c8:	429a      	cmp	r2, r3
   b94ca:	d106      	bne.n	b94da <_ZNK8particle7BleUuideqERKS0_+0x18>
   b94cc:	2210      	movs	r2, #16
   b94ce:	f004 f830 	bl	bd532 <memcmp>
   b94d2:	fab0 f080 	clz	r0, r0
   b94d6:	0940      	lsrs	r0, r0, #5
}
   b94d8:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b94da:	2000      	movs	r0, #0
   b94dc:	e7fc      	b.n	b94d8 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b94e0 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b94e0:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b94e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b94e6:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b94e8:	4b34      	ldr	r3, [pc, #208]	; (b95bc <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b94ea:	460c      	mov	r4, r1
   b94ec:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b94ee:	4602      	mov	r2, r0
   b94f0:	f103 0110 	add.w	r1, r3, #16
   b94f4:	f853 0b04 	ldr.w	r0, [r3], #4
   b94f8:	f842 0b04 	str.w	r0, [r2], #4
   b94fc:	428b      	cmp	r3, r1
   b94fe:	d1f9      	bne.n	b94f4 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b9500:	b344      	cbz	r4, b9554 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b9502:	2124      	movs	r1, #36	; 0x24
   b9504:	4620      	mov	r0, r4
   b9506:	f004 f8f1 	bl	bd6ec <strnlen>
   b950a:	2804      	cmp	r0, #4
   b950c:	f04f 0500 	mov.w	r5, #0
   b9510:	d123      	bne.n	b955a <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b9512:	f8ad 5004 	strh.w	r5, [sp, #4]
   b9516:	af01      	add	r7, sp, #4
   b9518:	1ca5      	adds	r5, r4, #2
   b951a:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b951c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b9520:	f7ff ff18 	bl	b9354 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b9524:	f1b0 0800 	subs.w	r8, r0, #0
   b9528:	db12      	blt.n	b9550 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b952a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b952e:	f7ff ff11 	bl	b9354 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b9532:	2800      	cmp	r0, #0
   b9534:	db0c      	blt.n	b9550 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b9536:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b9538:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b953c:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b953e:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b9542:	d1eb      	bne.n	b951c <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b9544:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b9548:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b954a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b954e:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b9550:	2300      	movs	r3, #0
   b9552:	6133      	str	r3, [r6, #16]
}
   b9554:	b002      	add	sp, #8
   b9556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b955a:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b955e:	2124      	movs	r1, #36	; 0x24
   b9560:	4620      	mov	r0, r4
   b9562:	f004 f8c3 	bl	bd6ec <strnlen>
   b9566:	42a8      	cmp	r0, r5
   b9568:	d807      	bhi.n	b957a <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b956a:	4642      	mov	r2, r8
   b956c:	2100      	movs	r1, #0
   b956e:	4630      	mov	r0, r6
}
   b9570:	b002      	add	sp, #8
   b9572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b9576:	f004 b814 	b.w	bd5a2 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b957a:	f1b8 0f00 	cmp.w	r8, #0
   b957e:	d0e9      	beq.n	b9554 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b9580:	5d60      	ldrb	r0, [r4, r5]
   b9582:	f7ff fee7 	bl	b9354 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b9586:	0603      	lsls	r3, r0, #24
   b9588:	d415      	bmi.n	b95b6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b958a:	0100      	lsls	r0, r0, #4
   b958c:	f108 38ff 	add.w	r8, r8, #4294967295
   b9590:	b2c7      	uxtb	r7, r0
   b9592:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b9596:	2124      	movs	r1, #36	; 0x24
   b9598:	4620      	mov	r0, r4
   b959a:	f004 f8a7 	bl	bd6ec <strnlen>
   b959e:	3501      	adds	r5, #1
   b95a0:	42a8      	cmp	r0, r5
   b95a2:	d908      	bls.n	b95b6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b95a4:	5d60      	ldrb	r0, [r4, r5]
   b95a6:	f7ff fed5 	bl	b9354 <_ZN8particle11hexToNibbleEc>
   b95aa:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b95ac:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b95ae:	bfa4      	itt	ge
   b95b0:	4338      	orrge	r0, r7
   b95b2:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b95b6:	3501      	adds	r5, #1
   b95b8:	e7d1      	b.n	b955e <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b95ba:	bf00      	nop
   b95bc:	000c0ac6 	.word	0x000c0ac6

000b95c0 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b95c0:	b513      	push	{r0, r1, r4, lr}
   b95c2:	4604      	mov	r4, r0
   b95c4:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b95c6:	f7ff ff21 	bl	b940c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b95ca:	4620      	mov	r0, r4
   b95cc:	9901      	ldr	r1, [sp, #4]
   b95ce:	f7ff ff87 	bl	b94e0 <_ZN8particle7BleUuid9constructEPKc>
}
   b95d2:	4620      	mov	r0, r4
   b95d4:	b002      	add	sp, #8
   b95d6:	bd10      	pop	{r4, pc}

000b95d8 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   b95d8:	b510      	push	{r4, lr}
   b95da:	f100 030f 	add.w	r3, r0, #15
   b95de:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   b95e0:	781c      	ldrb	r4, [r3, #0]
   b95e2:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b95e6:	4283      	cmp	r3, r0
   b95e8:	f103 33ff 	add.w	r3, r3, #4294967295
   b95ec:	d1f8      	bne.n	b95e0 <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   b95ee:	bd10      	pop	{r4, pc}

000b95f0 <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   b95f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b95f4:	461f      	mov	r7, r3
   b95f6:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   b95f8:	460d      	mov	r5, r1
   b95fa:	2900      	cmp	r1, #0
   b95fc:	d05b      	beq.n	b96b6 <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   b95fe:	b1da      	cbz	r2, b9638 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   b9600:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   b9604:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   b9606:	f1b8 0f00 	cmp.w	r8, #0
   b960a:	d119      	bne.n	b9640 <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b960c:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   b960e:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b9612:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b9614:	aa05      	add	r2, sp, #20
   b9616:	2102      	movs	r1, #2
   b9618:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b961a:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b961e:	f7ff fe61 	bl	b92e4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   b9622:	2c04      	cmp	r4, #4
   b9624:	bf28      	it	cs
   b9626:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   b9628:	4622      	mov	r2, r4
   b962a:	a905      	add	r1, sp, #20
   b962c:	4628      	mov	r0, r5
   b962e:	f003 ff90 	bl	bd552 <memcpy>
        buf[len++] = '\0';
   b9632:	f805 8004 	strb.w	r8, [r5, r4]
   b9636:	1c62      	adds	r2, r4, #1
}
   b9638:	4610      	mov	r0, r2
   b963a:	b00e      	add	sp, #56	; 0x38
   b963c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   b9640:	a901      	add	r1, sp, #4
   b9642:	f7ff ffc9 	bl	b95d8 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b9646:	aa05      	add	r2, sp, #20
    if (stripped) {
   b9648:	b17f      	cbz	r7, b966a <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b964a:	2110      	movs	r1, #16
   b964c:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b964e:	f7ff fe49 	bl	b92e4 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b9652:	2c24      	cmp	r4, #36	; 0x24
   b9654:	bf28      	it	cs
   b9656:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   b9658:	4622      	mov	r2, r4
   b965a:	a905      	add	r1, sp, #20
   b965c:	4628      	mov	r0, r5
   b965e:	f003 ff78 	bl	bd552 <memcpy>
    buf[len++] = '\0';
   b9662:	2300      	movs	r3, #0
   b9664:	552b      	strb	r3, [r5, r4]
   b9666:	1c62      	adds	r2, r4, #1
    return len;
   b9668:	e7e6      	b.n	b9638 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   b966a:	2104      	movs	r1, #4
   b966c:	eb0d 0001 	add.w	r0, sp, r1
   b9670:	f7ff fe38 	bl	b92e4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   b9674:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b9676:	f10d 021d 	add.w	r2, sp, #29
   b967a:	2102      	movs	r1, #2
   b967c:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   b967e:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b9682:	f7ff fe2f 	bl	b92e4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b9686:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   b968a:	2102      	movs	r1, #2
   b968c:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   b9690:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b9694:	f7ff fe26 	bl	b92e4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b9698:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   b969c:	2102      	movs	r1, #2
   b969e:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   b96a0:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b96a4:	f7ff fe1e 	bl	b92e4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   b96a8:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b96ac:	aa0b      	add	r2, sp, #44	; 0x2c
   b96ae:	2106      	movs	r1, #6
   b96b0:	f10d 000e 	add.w	r0, sp, #14
   b96b4:	e7cb      	b.n	b964e <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   b96b6:	460a      	mov	r2, r1
   b96b8:	e7be      	b.n	b9638 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000b96ba <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   b96ba:	b510      	push	{r4, lr}
   b96bc:	b08a      	sub	sp, #40	; 0x28
   b96be:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   b96c0:	2300      	movs	r3, #0
   b96c2:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   b96c4:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   b96c6:	4669      	mov	r1, sp
   b96c8:	f7ff ff92 	bl	b95f0 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   b96cc:	4669      	mov	r1, sp
   b96ce:	4620      	mov	r0, r4
   b96d0:	f7ff fc7d 	bl	b8fce <_ZN6StringC1EPK19__FlashStringHelper>
}
   b96d4:	4620      	mov	r0, r4
   b96d6:	b00a      	add	sp, #40	; 0x28
   b96d8:	bd10      	pop	{r4, pc}

000b96da <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b96da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b96dc:	4605      	mov	r5, r0
   b96de:	4616      	mov	r6, r2
   b96e0:	461f      	mov	r7, r3
   b96e2:	460a      	mov	r2, r1
   b96e4:	ab01      	add	r3, sp, #4
   b96e6:	e9d0 0100 	ldrd	r0, r1, [r0]
   b96ea:	f7ff fd7b 	bl	b91e4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b96ee:	f030 0402 	bics.w	r4, r0, #2
   b96f2:	d00c      	beq.n	b970e <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b96f4:	1e84      	subs	r4, r0, #2
   b96f6:	42bc      	cmp	r4, r7
   b96f8:	bf28      	it	cs
   b96fa:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b96fc:	b13e      	cbz	r6, b970e <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b96fe:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b9700:	682b      	ldr	r3, [r5, #0]
   b9702:	3102      	adds	r1, #2
   b9704:	4622      	mov	r2, r4
   b9706:	4419      	add	r1, r3
   b9708:	4630      	mov	r0, r6
   b970a:	f003 ff22 	bl	bd552 <memcpy>
}
   b970e:	4620      	mov	r0, r4
   b9710:	b003      	add	sp, #12
   b9712:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9714 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b9714:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9716:	4613      	mov	r3, r2
   b9718:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b971a:	9201      	str	r2, [sp, #4]
   b971c:	460a      	mov	r2, r1
   b971e:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b9720:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b9722:	f7ff ffda 	bl	b96da <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b9726:	b940      	cbnz	r0, b973a <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b9728:	9b01      	ldr	r3, [sp, #4]
   b972a:	4622      	mov	r2, r4
   b972c:	2109      	movs	r1, #9
   b972e:	4628      	mov	r0, r5
}
   b9730:	b003      	add	sp, #12
   b9732:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b9736:	f7ff bfd0 	b.w	b96da <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b973a:	b003      	add	sp, #12
   b973c:	bd30      	pop	{r4, r5, pc}
	...

000b9740 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b9740:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9742:	460c      	mov	r4, r1
   b9744:	b089      	sub	sp, #36	; 0x24
    String name;
   b9746:	490c      	ldr	r1, [pc, #48]	; (b9778 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b9748:	4605      	mov	r5, r0
    String name;
   b974a:	f7ff fc40 	bl	b8fce <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b974e:	221f      	movs	r2, #31
   b9750:	4669      	mov	r1, sp
   b9752:	4620      	mov	r0, r4
   b9754:	f7ff ffde 	bl	b9714 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b9758:	4606      	mov	r6, r0
   b975a:	b150      	cbz	r0, b9772 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b975c:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b975e:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b9760:	f814 1b01 	ldrb.w	r1, [r4], #1
   b9764:	4628      	mov	r0, r5
   b9766:	f7ff fcb1 	bl	b90cc <_ZN6String6concatEc>
   b976a:	b110      	cbz	r0, b9772 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b976c:	3701      	adds	r7, #1
   b976e:	42be      	cmp	r6, r7
   b9770:	d1f6      	bne.n	b9760 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b9772:	4628      	mov	r0, r5
   b9774:	b009      	add	sp, #36	; 0x24
   b9776:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9778:	000bfabb 	.word	0x000bfabb

000b977c <_ZNK8particle18BleAdvertisingData10customDataEPhj>:
size_t BleAdvertisingData::customData(uint8_t* buf, size_t len) const {
   b977c:	4613      	mov	r3, r2
    return get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len);
   b977e:	460a      	mov	r2, r1
   b9780:	21ff      	movs	r1, #255	; 0xff
   b9782:	f7ff bfaa 	b.w	b96da <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>

000b9786 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b9786:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b9788:	2302      	movs	r3, #2
   b978a:	aa01      	add	r2, sp, #4
   b978c:	2119      	movs	r1, #25
   b978e:	f7ff ffa4 	bl	b96da <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b9792:	b108      	cbz	r0, b9798 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b9794:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b9798:	b003      	add	sp, #12
   b979a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b97a0 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b97a0:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b97a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b97a6:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b97a8:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b97aa:	8043      	strh	r3, [r0, #2]
   b97ac:	220e      	movs	r2, #14
   b97ae:	4629      	mov	r1, r5
   b97b0:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b97b2:	7105      	strb	r5, [r0, #4]
   b97b4:	3006      	adds	r0, #6
   b97b6:	f003 fef4 	bl	bd5a2 <memset>
   b97ba:	f104 0014 	add.w	r0, r4, #20
   b97be:	f7ff fe25 	bl	b940c <_ZN8particle7BleUuidC1Ev>
   b97c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b97c6:	f7ff fe21 	bl	b940c <_ZN8particle7BleUuidC1Ev>
   b97ca:	4904      	ldr	r1, [pc, #16]	; (b97dc <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b97cc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b97d0:	f7ff fbfd 	bl	b8fce <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b97d4:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b97d6:	4620      	mov	r0, r4
   b97d8:	bd38      	pop	{r3, r4, r5, pc}
   b97da:	bf00      	nop
   b97dc:	000bfabb 	.word	0x000bfabb

000b97e0 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   b97e0:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b97e2:	680d      	ldr	r5, [r1, #0]
   b97e4:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b97e6:	4601      	mov	r1, r0
   b97e8:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b97ec:	f7ff fe69 	bl	b94c2 <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b97f0:	b140      	cbz	r0, b9804 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   b97f2:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b97f4:	8aa2      	ldrh	r2, [r4, #20]
   b97f6:	429a      	cmp	r2, r3
   b97f8:	d805      	bhi.n	b9806 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b97fa:	8ae0      	ldrh	r0, [r4, #22]
   b97fc:	4298      	cmp	r0, r3
   b97fe:	bf34      	ite	cc
   b9800:	2000      	movcc	r0, #0
   b9802:	2001      	movcs	r0, #1
    }
   b9804:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b9806:	2000      	movs	r0, #0
   b9808:	e7fc      	b.n	b9804 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000b980a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b980a:	b510      	push	{r4, lr}
    return data_ + size_;
   b980c:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b9810:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b9814:	4293      	cmp	r3, r2
   b9816:	4618      	mov	r0, r3
   b9818:	d006      	beq.n	b9828 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b981a:	6804      	ldr	r4, [r0, #0]
   b981c:	8824      	ldrh	r4, [r4, #0]
   b981e:	428c      	cmp	r4, r1
   b9820:	f103 0308 	add.w	r3, r3, #8
   b9824:	d1f6      	bne.n	b9814 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b9826:	bd10      	pop	{r4, pc}
        return nullptr;
   b9828:	2000      	movs	r0, #0
   b982a:	e7fc      	b.n	b9826 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000b982c <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b982c:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   b982e:	b570      	push	{r4, r5, r6, lr}
   b9830:	6003      	str	r3, [r0, #0]
   b9832:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9834:	2068      	movs	r0, #104	; 0x68
   b9836:	f7fa fc2e 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b983a:	1e04      	subs	r4, r0, #0
   b983c:	f104 060c 	add.w	r6, r4, #12
   b9840:	d007      	beq.n	b9852 <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   b9842:	2301      	movs	r3, #1
   b9844:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b9848:	4b04      	ldr	r3, [pc, #16]	; (b985c <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   b984a:	6023      	str	r3, [r4, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b984c:	4630      	mov	r0, r6
   b984e:	f7ff ffa7 	bl	b97a0 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   b9852:	e9c5 6400 	strd	r6, r4, [r5]
}
   b9856:	4628      	mov	r0, r5
   b9858:	bd70      	pop	{r4, r5, r6, pc}
   b985a:	bf00      	nop
   b985c:	000c0a6c 	.word	0x000c0a6c

000b9860 <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   b9860:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   b9862:	680c      	ldr	r4, [r1, #0]
   b9864:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   b9866:	4606      	mov	r6, r0
    return impl()->charUUID();
   b9868:	4605      	mov	r5, r0
   b986a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b986c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b986e:	6823      	ldr	r3, [r4, #0]
   b9870:	602b      	str	r3, [r5, #0]
}
   b9872:	4630      	mov	r0, r6
   b9874:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9878 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b9878:	b5f0      	push	{r4, r5, r6, r7, lr}
   b987a:	4606      	mov	r6, r0
   b987c:	b085      	sub	sp, #20
   b987e:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b9880:	460d      	mov	r5, r1
   b9882:	2900      	cmp	r1, #0
   b9884:	d050      	beq.n	b9928 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b9886:	2a00      	cmp	r2, #0
   b9888:	d04e      	beq.n	b9928 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
   b988a:	6804      	ldr	r4, [r0, #0]
    if (impl()->isLocal()) {
   b988c:	7823      	ldrb	r3, [r4, #0]
   b988e:	2af4      	cmp	r2, #244	; 0xf4
   b9890:	bf28      	it	cs
   b9892:	22f4      	movcs	r2, #244	; 0xf4
   b9894:	b343      	cbz	r3, b98e8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b9896:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b9898:	0798      	lsls	r0, r3, #30
   b989a:	d509      	bpl.n	b98b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b989c:	89a0      	ldrh	r0, [r4, #12]
   b989e:	9203      	str	r2, [sp, #12]
   b98a0:	2300      	movs	r3, #0
   b98a2:	f7fe fedf 	bl	b8664 <hal_ble_gatt_server_set_characteristic_value>
   b98a6:	2800      	cmp	r0, #0
   b98a8:	9a03      	ldr	r2, [sp, #12]
   b98aa:	da03      	bge.n	b98b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   b98ac:	b005      	add	sp, #20
   b98ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b98b0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b98b4:	6834      	ldr	r4, [r6, #0]
   b98b6:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b98b8:	06d9      	lsls	r1, r3, #27
   b98ba:	d509      	bpl.n	b98d0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b98bc:	2f01      	cmp	r7, #1
   b98be:	d007      	beq.n	b98d0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b98c0:	89a0      	ldrh	r0, [r4, #12]
   b98c2:	2300      	movs	r3, #0
   b98c4:	4629      	mov	r1, r5
}
   b98c6:	b005      	add	sp, #20
   b98c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b98cc:	f7fe bf2e 	b.w	b872c <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b98d0:	069b      	lsls	r3, r3, #26
   b98d2:	d5eb      	bpl.n	b98ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b98d4:	2f02      	cmp	r7, #2
   b98d6:	d0e9      	beq.n	b98ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b98d8:	89a0      	ldrh	r0, [r4, #12]
   b98da:	2300      	movs	r3, #0
   b98dc:	4629      	mov	r1, r5
}
   b98de:	b005      	add	sp, #20
   b98e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b98e4:	f7fe bf2c 	b.w	b8740 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b98e8:	8860      	ldrh	r0, [r4, #2]
   b98ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b98ee:	4288      	cmp	r0, r1
   b98f0:	d01c      	beq.n	b992c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b98f2:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b98f4:	074e      	lsls	r6, r1, #29
   b98f6:	d501      	bpl.n	b98fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b98f8:	2f01      	cmp	r7, #1
   b98fa:	d104      	bne.n	b9906 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b98fc:	070b      	lsls	r3, r1, #28
   b98fe:	d409      	bmi.n	b9914 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b9900:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b9904:	e7d2      	b.n	b98ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b9906:	89a1      	ldrh	r1, [r4, #12]
   b9908:	9300      	str	r3, [sp, #0]
   b990a:	4613      	mov	r3, r2
   b990c:	462a      	mov	r2, r5
   b990e:	f7fe fed1 	bl	b86b4 <hal_ble_gatt_client_write_without_response>
   b9912:	e7cb      	b.n	b98ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b9914:	2f02      	cmp	r7, #2
   b9916:	d0f3      	beq.n	b9900 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b9918:	2300      	movs	r3, #0
   b991a:	89a1      	ldrh	r1, [r4, #12]
   b991c:	9300      	str	r3, [sp, #0]
   b991e:	4613      	mov	r3, r2
   b9920:	462a      	mov	r2, r5
   b9922:	f7fe febd 	bl	b86a0 <hal_ble_gatt_client_write_with_response>
   b9926:	e7c1      	b.n	b98ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b9928:	4802      	ldr	r0, [pc, #8]	; (b9934 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b992a:	e7bf      	b.n	b98ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b992c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b9930:	e7bc      	b.n	b98ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b9932:	bf00      	nop
   b9934:	fffffef2 	.word	0xfffffef2

000b9938 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   b9938:	b510      	push	{r4, lr}
   b993a:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b993c:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   b993e:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b9940:	bb52      	cbnz	r2, b9998 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   b9942:	885c      	ldrh	r4, [r3, #2]
   b9944:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9948:	4284      	cmp	r4, r0
   b994a:	d025      	beq.n	b9998 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b994c:	8a18      	ldrh	r0, [r3, #16]
   b994e:	b330      	cbz	r0, b999e <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   b9950:	e9cd 2203 	strd	r2, r2, [sp, #12]
   b9954:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   b9956:	4a13      	ldr	r2, [pc, #76]	; (b99a4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   b9958:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   b995a:	4a13      	ldr	r2, [pc, #76]	; (b99a8 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   b995c:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   b9960:	885a      	ldrh	r2, [r3, #2]
   b9962:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   b9966:	8a1a      	ldrh	r2, [r3, #16]
   b9968:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   b996c:	899a      	ldrh	r2, [r3, #12]
   b996e:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   b9972:	b159      	cbz	r1, b998c <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   b9974:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   b9976:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   b9978:	bf44      	itt	mi
   b997a:	2202      	movmi	r2, #2
   b997c:	9205      	strmi	r2, [sp, #20]
   b997e:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   b9980:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   b9982:	bf42      	ittt	mi
   b9984:	9b05      	ldrmi	r3, [sp, #20]
   b9986:	f043 0301 	orrmi.w	r3, r3, #1
   b998a:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   b998c:	2100      	movs	r1, #0
   b998e:	4668      	mov	r0, sp
   b9990:	f7fe fec2 	bl	b8718 <hal_ble_gatt_client_configure_cccd>
}
   b9994:	b006      	add	sp, #24
   b9996:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b9998:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b999c:	e7fa      	b.n	b9994 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b999e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b99a2:	e7f7      	b.n	b9994 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   b99a4:	00180003 	.word	0x00180003
   b99a8:	000b9b7d 	.word	0x000b9b7d

000b99ac <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   b99ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b99ae:	2600      	movs	r6, #0
   b99b0:	6006      	str	r6, [r0, #0]
   b99b2:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b99b4:	2028      	movs	r0, #40	; 0x28
   b99b6:	f7fa fb6e 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b99ba:	1e04      	subs	r4, r0, #0
   b99bc:	f104 070c 	add.w	r7, r4, #12
   b99c0:	d00a      	beq.n	b99d8 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   b99c2:	2301      	movs	r3, #1
   b99c4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b99c8:	4b05      	ldr	r3, [pc, #20]	; (b99e0 <_ZN8particle10BleServiceC1Ev+0x34>)
   b99ca:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   b99cc:	4638      	mov	r0, r7
   b99ce:	f7ff fd1d 	bl	b940c <_ZN8particle7BleUuidC1Ev>
   b99d2:	6226      	str	r6, [r4, #32]
   b99d4:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   b99d8:	e9c5 7400 	strd	r7, r4, [r5]
}
   b99dc:	4628      	mov	r0, r5
   b99de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b99e0:	000c0a88 	.word	0x000c0a88

000b99e4 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b99e4:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b99e6:	2500      	movs	r5, #0
   b99e8:	6005      	str	r5, [r0, #0]
   b99ea:	4606      	mov	r6, r0
   b99ec:	2030      	movs	r0, #48	; 0x30
   b99ee:	f7fa fb52 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b99f2:	4604      	mov	r4, r0
   b99f4:	b188      	cbz	r0, b9a1a <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b99f6:	2301      	movs	r3, #1
   b99f8:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b99fc:	4b09      	ldr	r3, [pc, #36]	; (b9a24 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b99fe:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b9a00:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9a04:	8183      	strh	r3, [r0, #12]
   b9a06:	300e      	adds	r0, #14
   b9a08:	f7ff fcf5 	bl	b93f6 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b9a0c:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b9a10:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b9a14:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b9a18:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b9a1a:	6074      	str	r4, [r6, #4]
   b9a1c:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b9a1e:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b9a20:	4630      	mov	r0, r6
   b9a22:	bd70      	pop	{r4, r5, r6, pc}
   b9a24:	000c0aa4 	.word	0x000c0aa4

000b9a28 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b9a28:	b513      	push	{r0, r1, r4, lr}
   b9a2a:	4604      	mov	r4, r0
    WiringBleLock lk;
   b9a2c:	a801      	add	r0, sp, #4
   b9a2e:	f7ff fca7 	bl	b9380 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b9a32:	6823      	ldr	r3, [r4, #0]
   b9a34:	881c      	ldrh	r4, [r3, #0]
   b9a36:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9a3a:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b9a3c:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b9a3e:	bf18      	it	ne
   b9a40:	2401      	movne	r4, #1
    WiringBleLock lk;
   b9a42:	f7ff fcab 	bl	b939c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b9a46:	4620      	mov	r0, r4
   b9a48:	b002      	add	sp, #8
   b9a4a:	bd10      	pop	{r4, pc}

000b9a4c <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   b9a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9a4e:	4605      	mov	r5, r0
   b9a50:	460c      	mov	r4, r1
    WiringBleLock lk;
   b9a52:	a801      	add	r0, sp, #4
   b9a54:	f7ff fc94 	bl	b9380 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b9a58:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b9a5a:	6823      	ldr	r3, [r4, #0]
   b9a5c:	f8c2 3002 	str.w	r3, [r2, #2]
   b9a60:	6863      	ldr	r3, [r4, #4]
   b9a62:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   b9a66:	a801      	add	r0, sp, #4
   b9a68:	f7ff fc98 	bl	b939c <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   b9a6c:	b003      	add	sp, #12
   b9a6e:	bd30      	pop	{r4, r5, pc}

000b9a70 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   b9a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9a72:	460d      	mov	r5, r1
   b9a74:	4604      	mov	r4, r0
    WiringBleLock lk;
   b9a76:	a801      	add	r0, sp, #4
   b9a78:	f7ff fc82 	bl	b9380 <_ZN8particle3ble13WiringBleLockC1Ev>
   b9a7c:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b9a7e:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b9a82:	6023      	str	r3, [r4, #0]
   b9a84:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b9a88:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b9a8a:	a801      	add	r0, sp, #4
   b9a8c:	f7ff fc86 	bl	b939c <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b9a90:	4620      	mov	r0, r4
   b9a92:	b003      	add	sp, #12
   b9a94:	bd30      	pop	{r4, r5, pc}

000b9a96 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b9a96:	b530      	push	{r4, r5, lr}
   b9a98:	4605      	mov	r5, r0
   b9a9a:	b087      	sub	sp, #28
   b9a9c:	460c      	mov	r4, r1
    WiringBleLock lk;
   b9a9e:	a801      	add	r0, sp, #4
   b9aa0:	f7ff fc6e 	bl	b9380 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b9aa4:	682a      	ldr	r2, [r5, #0]
   b9aa6:	6823      	ldr	r3, [r4, #0]
   b9aa8:	8812      	ldrh	r2, [r2, #0]
   b9aaa:	881b      	ldrh	r3, [r3, #0]
   b9aac:	429a      	cmp	r2, r3
   b9aae:	d10d      	bne.n	b9acc <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b9ab0:	4629      	mov	r1, r5
   b9ab2:	a802      	add	r0, sp, #8
   b9ab4:	f7ff ffdc 	bl	b9a70 <_ZNK8particle13BlePeerDevice7addressEv>
   b9ab8:	4621      	mov	r1, r4
   b9aba:	a804      	add	r0, sp, #16
   b9abc:	f7ff ffd8 	bl	b9a70 <_ZNK8particle13BlePeerDevice7addressEv>
   b9ac0:	a904      	add	r1, sp, #16
   b9ac2:	a802      	add	r0, sp, #8
   b9ac4:	f7ff fc83 	bl	b93ce <_ZNK8particle10BleAddresseqERKS0_>
   b9ac8:	4604      	mov	r4, r0
   b9aca:	b900      	cbnz	r0, b9ace <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b9acc:	2400      	movs	r4, #0
    WiringBleLock lk;
   b9ace:	a801      	add	r0, sp, #4
   b9ad0:	f7ff fc64 	bl	b939c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b9ad4:	4620      	mov	r0, r4
   b9ad6:	b007      	add	sp, #28
   b9ad8:	bd30      	pop	{r4, r5, pc}
	...

000b9adc <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b9adc:	b510      	push	{r4, lr}
   b9ade:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b9ae0:	2064      	movs	r0, #100	; 0x64
   b9ae2:	f7fa fad8 	bl	b4096 <_Znwj>
   b9ae6:	b168      	cbz	r0, b9b04 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b9ae8:	2300      	movs	r3, #0
   b9aea:	e9c0 3300 	strd	r3, r3, [r0]
   b9aee:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b9af2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b9af6:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b9afa:	6203      	str	r3, [r0, #32]
   b9afc:	62c3      	str	r3, [r0, #44]	; 0x2c
   b9afe:	63c3      	str	r3, [r0, #60]	; 0x3c
   b9b00:	64c3      	str	r3, [r0, #76]	; 0x4c
   b9b02:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b9b04:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b9b06:	b920      	cbnz	r0, b9b12 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b9b08:	4a0a      	ldr	r2, [pc, #40]	; (b9b34 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b9b0a:	490b      	ldr	r1, [pc, #44]	; (b9b38 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b9b0c:	200a      	movs	r0, #10
   b9b0e:	f7fe ffb1 	bl	b8a74 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b9b12:	2000      	movs	r0, #0
   b9b14:	f7fe fd72 	bl	b85fc <hal_ble_stack_init>
   b9b18:	b120      	cbz	r0, b9b24 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b9b1a:	4a06      	ldr	r2, [pc, #24]	; (b9b34 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b9b1c:	4907      	ldr	r1, [pc, #28]	; (b9b3c <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b9b1e:	200a      	movs	r0, #10
   b9b20:	f7fe ffa8 	bl	b8a74 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b9b24:	6821      	ldr	r1, [r4, #0]
   b9b26:	4806      	ldr	r0, [pc, #24]	; (b9b40 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b9b28:	2200      	movs	r2, #0
   b9b2a:	f7fe fdeb 	bl	b8704 <hal_ble_set_callback_on_periph_link_events>
}
   b9b2e:	4620      	mov	r0, r4
   b9b30:	bd10      	pop	{r4, pc}
   b9b32:	bf00      	nop
   b9b34:	000b85ad 	.word	0x000b85ad
   b9b38:	000c0848 	.word	0x000c0848
   b9b3c:	000c0886 	.word	0x000c0886
   b9b40:	000ba581 	.word	0x000ba581

000b9b44 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b9b44:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b9b46:	4c0a      	ldr	r4, [pc, #40]	; (b9b70 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b9b48:	7823      	ldrb	r3, [r4, #0]
   b9b4a:	f3bf 8f5b 	dmb	ish
   b9b4e:	07db      	lsls	r3, r3, #31
   b9b50:	d40c      	bmi.n	b9b6c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b9b52:	4620      	mov	r0, r4
   b9b54:	f7fa fab2 	bl	b40bc <__cxa_guard_acquire>
   b9b58:	b140      	cbz	r0, b9b6c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b9b5a:	4806      	ldr	r0, [pc, #24]	; (b9b74 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b9b5c:	f7ff ffbe 	bl	b9adc <_ZN8particle14BleLocalDeviceC1Ev>
   b9b60:	4620      	mov	r0, r4
   b9b62:	f7fa fab0 	bl	b40c6 <__cxa_guard_release>
   b9b66:	4804      	ldr	r0, [pc, #16]	; (b9b78 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b9b68:	f003 fcd6 	bl	bd518 <atexit>
    return instance;
}
   b9b6c:	4801      	ldr	r0, [pc, #4]	; (b9b74 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b9b6e:	bd10      	pop	{r4, pc}
   b9b70:	2003e66c 	.word	0x2003e66c
   b9b74:	2003e674 	.word	0x2003e674
   b9b78:	000b9e85 	.word	0x000b9e85

000b9b7c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b9b7c:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b9b7e:	6803      	ldr	r3, [r0, #0]
   b9b80:	3b09      	subs	r3, #9
   b9b82:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b9b84:	b08d      	sub	sp, #52	; 0x34
   b9b86:	4604      	mov	r4, r0
   b9b88:	460d      	mov	r5, r1
    switch (event->type) {
   b9b8a:	d811      	bhi.n	b9bb0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b9b8c:	f7ff ffda 	bl	b9b44 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b9b90:	88a1      	ldrh	r1, [r4, #4]
   b9b92:	6800      	ldr	r0, [r0, #0]
   b9b94:	f7ff fe39 	bl	b980a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b9b98:	4603      	mov	r3, r0
   b9b9a:	b958      	cbnz	r0, b9bb4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b9b9c:	2220      	movs	r2, #32
   b9b9e:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b9ba2:	4a0b      	ldr	r2, [pc, #44]	; (b9bd0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b9ba4:	9200      	str	r2, [sp, #0]
   b9ba6:	490b      	ldr	r1, [pc, #44]	; (b9bd4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b9ba8:	aa04      	add	r2, sp, #16
   b9baa:	2032      	movs	r0, #50	; 0x32
   b9bac:	f7fe ff6a 	bl	b8a84 <log_message>
}
   b9bb0:	b00d      	add	sp, #52	; 0x34
   b9bb2:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b9bb4:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b9bb6:	2a00      	cmp	r2, #0
   b9bb8:	d0fa      	beq.n	b9bb0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b9bba:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9bbe:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b9bc2:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b9bc6:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b9bc8:	aa04      	add	r2, sp, #16
   b9bca:	a903      	add	r1, sp, #12
   b9bcc:	47a0      	blx	r4
}
   b9bce:	e7ef      	b.n	b9bb0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b9bd0:	000c08c8 	.word	0x000c08c8
   b9bd4:	000c085f 	.word	0x000c085f

000b9bd8 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b9bd8:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b9bda:	2000      	movs	r0, #0
   b9bdc:	f7fe fd0e 	bl	b85fc <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b9be0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b9be4:	bd08      	pop	{r3, pc}
	...

000b9be8 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   b9be8:	b570      	push	{r4, r5, r6, lr}
   b9bea:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   b9bec:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   b9bee:	460e      	mov	r6, r1
   b9bf0:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   b9bf2:	f7ff fb43 	bl	b927c <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   b9bf6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b9bfa:	f7ff fb4a 	bl	b9292 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   b9bfe:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   b9c02:	2200      	movs	r2, #0
   b9c04:	4621      	mov	r1, r4
   b9c06:	4803      	ldr	r0, [pc, #12]	; (b9c14 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   b9c08:	f7fe fd10 	bl	b862c <hal_ble_gap_start_scan>
   b9c0c:	2800      	cmp	r0, #0
        return foundCount_;
   b9c0e:	bfa8      	it	ge
   b9c10:	6960      	ldrge	r0, [r4, #20]
    }
   b9c12:	bd70      	pop	{r4, r5, r6, pc}
   b9c14:	000bb58d 	.word	0x000bb58d

000b9c18 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   b9c18:	b510      	push	{r4, lr}
   b9c1a:	4604      	mov	r4, r0
    ::free(ptr);
   b9c1c:	6940      	ldr	r0, [r0, #20]
   b9c1e:	f7ff f815 	bl	b8c4c <free>
   b9c22:	68a0      	ldr	r0, [r4, #8]
   b9c24:	f7ff f812 	bl	b8c4c <free>
   b9c28:	4620      	mov	r0, r4
   b9c2a:	bd10      	pop	{r4, pc}

000b9c2c <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   b9c2c:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b9c2e:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b9c32:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
   b9c36:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b9c3a:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b9c3e:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b9c42:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b9c46:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b9c4a:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b9c4e:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b9c52:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b9c56:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   b9c5a:	6202      	str	r2, [r0, #32]
   b9c5c:	6302      	str	r2, [r0, #48]	; 0x30
   b9c5e:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
   b9c62:	4770      	bx	lr

000b9c64 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>:
    std::function<void(const BleScanResult*)> scanResultCallback_;
    BleOnScanResultStdFunction scanResultCallbackRef_;
    BleScanFilter filter_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   b9c64:	b530      	push	{r4, r5, lr}
   b9c66:	b085      	sub	sp, #20
    hal_ble_scan_params_t scanParams = {};
   b9c68:	2400      	movs	r4, #0
    scanParams.size = sizeof(hal_ble_scan_params_t);
   b9c6a:	2310      	movs	r3, #16
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   b9c6c:	460d      	mov	r5, r1
    scanParams.size = sizeof(hal_ble_scan_params_t);
   b9c6e:	f8ad 3002 	strh.w	r3, [sp, #2]
    scanParams.version = BLE_API_VERSION;
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   b9c72:	4621      	mov	r1, r4
    scanParams.version = BLE_API_VERSION;
   b9c74:	2303      	movs	r3, #3
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   b9c76:	4668      	mov	r0, sp
    scanParams.version = BLE_API_VERSION;
   b9c78:	f8ad 3000 	strh.w	r3, [sp]
    hal_ble_scan_params_t scanParams = {};
   b9c7c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b9c80:	9403      	str	r4, [sp, #12]
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   b9c82:	f7fe fccb 	bl	b861c <hal_ble_gap_get_scan_parameters>
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   b9c86:	4621      	mov	r1, r4
   b9c88:	4668      	mov	r0, sp
    scanParams.timeout = timeout;
   b9c8a:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   b9c8e:	f7fe fcbd 	bl	b860c <hal_ble_gap_set_scan_parameters>
}
   b9c92:	b005      	add	sp, #20
   b9c94:	bd30      	pop	{r4, r5, pc}

000b9c96 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b9c96:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b9c98:	69d8      	ldr	r0, [r3, #28]
}
   b9c9a:	2800      	cmp	r0, #0
   b9c9c:	bfd4      	ite	le
   b9c9e:	2000      	movle	r0, #0
   b9ca0:	2001      	movgt	r0, #1
   b9ca2:	4770      	bx	lr

000b9ca4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9ca4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b9ca6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9caa:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b9cac:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b9cb0:	42ae      	cmp	r6, r5
   b9cb2:	d004      	beq.n	b9cbe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b9cb4:	4628      	mov	r0, r5
   b9cb6:	f7ff f93f 	bl	b8f38 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b9cba:	3510      	adds	r5, #16
   b9cbc:	e7f8      	b.n	b9cb0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b9cbe:	6820      	ldr	r0, [r4, #0]
   b9cc0:	f7fe ffc4 	bl	b8c4c <free>
}
   b9cc4:	4620      	mov	r0, r4
   b9cc6:	bd70      	pop	{r4, r5, r6, pc}

000b9cc8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9cc8:	b510      	push	{r4, lr}
   b9cca:	4604      	mov	r4, r0
    ::free(ptr);
   b9ccc:	6800      	ldr	r0, [r0, #0]
   b9cce:	f7fe ffbd 	bl	b8c4c <free>
}
   b9cd2:	4620      	mov	r0, r4
   b9cd4:	bd10      	pop	{r4, pc}

000b9cd6 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   b9cd6:	b570      	push	{r4, r5, r6, lr}
   b9cd8:	4604      	mov	r4, r0
    ::free(ptr);
   b9cda:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b9cdc:	f7fe ffb6 	bl	b8c4c <free>
   b9ce0:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b9ce2:	f7fe ffb3 	bl	b8c4c <free>
    }
    ~BleScanFilter() = default;
   b9ce6:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b9cea:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b9cee:	f7ff ffeb 	bl	b9cc8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b9cf2:	4628      	mov	r0, r5
   b9cf4:	f7ff ffd6 	bl	b9ca4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b9cf8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b9cfc:	f7fa fada 	bl	b42b4 <_ZNSt14_Function_baseD1Ev>
   b9d00:	f104 0018 	add.w	r0, r4, #24
   b9d04:	f7fa fad6 	bl	b42b4 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b9d08:	e9d4 5300 	ldrd	r5, r3, [r4]
   b9d0c:	2624      	movs	r6, #36	; 0x24
   b9d0e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9d12:	42ae      	cmp	r6, r5
   b9d14:	d004      	beq.n	b9d20 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b9d16:	4628      	mov	r0, r5
   b9d18:	f7ff ff7e 	bl	b9c18 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b9d1c:	3524      	adds	r5, #36	; 0x24
   b9d1e:	e7f8      	b.n	b9d12 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b9d20:	6820      	ldr	r0, [r4, #0]
   b9d22:	f7fe ff93 	bl	b8c4c <free>
   b9d26:	4620      	mov	r0, r4
   b9d28:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9d2c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   b9d2c:	b530      	push	{r4, r5, lr}
   b9d2e:	4615      	mov	r5, r2
   b9d30:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   b9d32:	460c      	mov	r4, r1
   b9d34:	b179      	cbz	r1, b9d56 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   b9d36:	b172      	cbz	r2, b9d56 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
    BleScanDelegator scanner;
   b9d38:	a801      	add	r0, sp, #4
   b9d3a:	f7ff ff77 	bl	b9c2c <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   b9d3e:	4621      	mov	r1, r4
   b9d40:	462a      	mov	r2, r5
   b9d42:	a801      	add	r0, sp, #4
   b9d44:	f7ff ff50 	bl	b9be8 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   b9d48:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   b9d4a:	a801      	add	r0, sp, #4
   b9d4c:	f7ff ffc3 	bl	b9cd6 <_ZN8particle16BleScanDelegatorD1Ev>
}
   b9d50:	4620      	mov	r0, r4
   b9d52:	b01f      	add	sp, #124	; 0x7c
   b9d54:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b9d56:	4c01      	ldr	r4, [pc, #4]	; (b9d5c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   b9d58:	e7fa      	b.n	b9d50 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   b9d5a:	bf00      	nop
   b9d5c:	fffffef2 	.word	0xfffffef2

000b9d60 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b9d60:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b9d62:	1e14      	subs	r4, r2, #0
   b9d64:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b9d66:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b9d68:	db02      	blt.n	b9d70 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b9d6a:	1862      	adds	r2, r4, r1
   b9d6c:	429a      	cmp	r2, r3
   b9d6e:	dd00      	ble.n	b9d72 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b9d70:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b9d72:	682a      	ldr	r2, [r5, #0]
   b9d74:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b9d76:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b9d78:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9d7a:	1a52      	subs	r2, r2, r1
   b9d7c:	f003 fbf7 	bl	bd56e <memmove>
    size_ -= n;
   b9d80:	686a      	ldr	r2, [r5, #4]
   b9d82:	1b12      	subs	r2, r2, r4
   b9d84:	606a      	str	r2, [r5, #4]
}
   b9d86:	bd38      	pop	{r3, r4, r5, pc}

000b9d88 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b9d88:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b9d8a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b9d8c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b9d8e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9d90:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b9d92:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9d94:	f7fa f97f 	bl	b4096 <_Znwj>
   b9d98:	b118      	cbz	r0, b9da2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b9d9a:	682b      	ldr	r3, [r5, #0]
   b9d9c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b9d9e:	686b      	ldr	r3, [r5, #4]
   b9da0:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b9da2:	4b03      	ldr	r3, [pc, #12]	; (b9db0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b9da4:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b9da6:	4b03      	ldr	r3, [pc, #12]	; (b9db4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9da8:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b9daa:	60a3      	str	r3, [r4, #8]
      }
   b9dac:	4620      	mov	r0, r4
   b9dae:	bd38      	pop	{r3, r4, r5, pc}
   b9db0:	000b9225 	.word	0x000b9225
   b9db4:	000b923d 	.word	0x000b923d

000b9db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b9db8:	680b      	ldr	r3, [r1, #0]
   b9dba:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b9dbc:	b113      	cbz	r3, b9dc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b9dbe:	685a      	ldr	r2, [r3, #4]
   b9dc0:	3201      	adds	r2, #1
   b9dc2:	605a      	str	r2, [r3, #4]
      }
   b9dc4:	4770      	bx	lr

000b9dc6 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b9dc6:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9dc8:	f851 3b04 	ldr.w	r3, [r1], #4
   b9dcc:	4604      	mov	r4, r0
   b9dce:	f840 3b04 	str.w	r3, [r0], #4
   b9dd2:	f7ff fff1 	bl	b9db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b9dd6:	6823      	ldr	r3, [r4, #0]
   b9dd8:	b90b      	cbnz	r3, b9dde <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b9dda:	f7ff fa19 	bl	b9210 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b9dde:	4620      	mov	r0, r4
   b9de0:	bd10      	pop	{r4, pc}

000b9de2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b9de2:	b510      	push	{r4, lr}
   b9de4:	f851 3b04 	ldr.w	r3, [r1], #4
   b9de8:	4604      	mov	r4, r0
   b9dea:	f840 3b04 	str.w	r3, [r0], #4
   b9dee:	f7ff ffe3 	bl	b9db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b9df2:	4620      	mov	r0, r4
   b9df4:	bd10      	pop	{r4, pc}

000b9df6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b9df6:	b510      	push	{r4, lr}
   b9df8:	f851 3b04 	ldr.w	r3, [r1], #4
   b9dfc:	4604      	mov	r4, r0
   b9dfe:	f840 3b04 	str.w	r3, [r0], #4
   b9e02:	f7ff ffd9 	bl	b9db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b9e06:	4620      	mov	r0, r4
   b9e08:	bd10      	pop	{r4, pc}

000b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b9e0a:	b510      	push	{r4, lr}
   b9e0c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b9e0e:	6800      	ldr	r0, [r0, #0]
   b9e10:	b108      	cbz	r0, b9e16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b9e12:	f7fa fa8d 	bl	b4330 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b9e16:	4620      	mov	r0, r4
   b9e18:	bd10      	pop	{r4, pc}

000b9e1a <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   b9e1a:	b510      	push	{r4, lr}
   b9e1c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b9e1e:	3004      	adds	r0, #4
   b9e20:	f7ff fff3 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9e24:	4620      	mov	r0, r4
   b9e26:	bd10      	pop	{r4, pc}

000b9e28 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9e28:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b9e2a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9e2e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b9e30:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b9e34:	42ae      	cmp	r6, r5
   b9e36:	d004      	beq.n	b9e42 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b9e38:	1d28      	adds	r0, r5, #4
   b9e3a:	f7ff ffe6 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9e3e:	3508      	adds	r5, #8
   b9e40:	e7f8      	b.n	b9e34 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b9e42:	6820      	ldr	r0, [r4, #0]
   b9e44:	f7fe ff02 	bl	b8c4c <free>
}
   b9e48:	4620      	mov	r0, r4
   b9e4a:	bd70      	pop	{r4, r5, r6, pc}

000b9e4c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9e4c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b9e4e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9e52:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b9e54:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b9e58:	42ae      	cmp	r6, r5
   b9e5a:	d004      	beq.n	b9e66 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b9e5c:	1d28      	adds	r0, r5, #4
   b9e5e:	f7ff ffd4 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9e62:	3508      	adds	r5, #8
   b9e64:	e7f8      	b.n	b9e58 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b9e66:	6820      	ldr	r0, [r4, #0]
   b9e68:	f7fe fef0 	bl	b8c4c <free>
}
   b9e6c:	4620      	mov	r0, r4
   b9e6e:	bd70      	pop	{r4, r5, r6, pc}

000b9e70 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b9e70:	b510      	push	{r4, lr}
   b9e72:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b9e74:	3024      	adds	r0, #36	; 0x24
   b9e76:	f7ff ffe9 	bl	b9e4c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b9e7a:	f104 0018 	add.w	r0, r4, #24
   b9e7e:	f7ff ffd3 	bl	b9e28 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b9e82:	bd10      	pop	{r4, pc}

000b9e84 <__tcf_0>:
    static BleLocalDevice instance;
   b9e84:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b9e86:	4b17      	ldr	r3, [pc, #92]	; (b9ee4 <__tcf_0+0x60>)
   b9e88:	681c      	ldr	r4, [r3, #0]
   b9e8a:	b354      	cbz	r4, b9ee2 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b9e8c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b9e90:	f7fa fa10 	bl	b42b4 <_ZNSt14_Function_baseD1Ev>
   b9e94:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b9e98:	f7fa fa0c 	bl	b42b4 <_ZNSt14_Function_baseD1Ev>
   b9e9c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b9ea0:	f7fa fa08 	bl	b42b4 <_ZNSt14_Function_baseD1Ev>
   b9ea4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b9ea8:	f7fa fa04 	bl	b42b4 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b9eac:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b9eb0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b9eb4:	42ae      	cmp	r6, r5
   b9eb6:	d004      	beq.n	b9ec2 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b9eb8:	1d28      	adds	r0, r5, #4
   b9eba:	f7ff ffa6 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9ebe:	3508      	adds	r5, #8
   b9ec0:	e7f8      	b.n	b9eb4 <__tcf_0+0x30>
    ::free(ptr);
   b9ec2:	69a0      	ldr	r0, [r4, #24]
   b9ec4:	f7fe fec2 	bl	b8c4c <free>
    ~BleLocalDeviceImpl() = default;
   b9ec8:	f104 000c 	add.w	r0, r4, #12
   b9ecc:	f7ff ffbe 	bl	b9e4c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b9ed0:	4620      	mov	r0, r4
   b9ed2:	f7ff ffa9 	bl	b9e28 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b9ed6:	4620      	mov	r0, r4
   b9ed8:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b9eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9ede:	f7fa b8de 	b.w	b409e <_ZdlPvj>
   b9ee2:	bd70      	pop	{r4, r5, r6, pc}
   b9ee4:	2003e674 	.word	0x2003e674

000b9ee8 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b9ee8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b9eea:	b510      	push	{r4, lr}
      if (_M_empty())
   b9eec:	b90a      	cbnz	r2, b9ef2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b9eee:	f002 fcf2 	bl	bc8d6 <_ZSt25__throw_bad_function_callv>
    }
   b9ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9ef6:	68c3      	ldr	r3, [r0, #12]
   b9ef8:	4718      	bx	r3

000b9efa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9efa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b9efe:	2300      	movs	r3, #0
   b9f00:	e9c0 3300 	strd	r3, r3, [r0]
   b9f04:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b9f06:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b9f0a:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9f0c:	4605      	mov	r5, r0
   b9f0e:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b9f10:	dd4a      	ble.n	b9fa8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   b9f12:	ea4f 1008 	mov.w	r0, r8, lsl #4
   b9f16:	f7fe fe91 	bl	b8c3c <malloc>
            if (!d) {
   b9f1a:	4606      	mov	r6, r0
   b9f1c:	2800      	cmp	r0, #0
   b9f1e:	d043      	beq.n	b9fa8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   b9f20:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   b9f24:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b9f26:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   b9f2a:	d916      	bls.n	b9f5a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   b9f2c:	4550      	cmp	r0, sl
   b9f2e:	d215      	bcs.n	b9f5c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   b9f30:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   b9f34:	f1a4 0910 	sub.w	r9, r4, #16
   b9f38:	ebaa 0404 	sub.w	r4, sl, r4
   b9f3c:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b9f3e:	45d1      	cmp	r9, sl
   b9f40:	d01d      	beq.n	b9f7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   b9f42:	b11c      	cbz	r4, b9f4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   b9f44:	4651      	mov	r1, sl
   b9f46:	4620      	mov	r0, r4
   b9f48:	f7ff f872 	bl	b9030 <_ZN6StringC1EOS_>
                end->~T();
   b9f4c:	4650      	mov	r0, sl
   b9f4e:	f7fe fff3 	bl	b8f38 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b9f52:	f1aa 0a10 	sub.w	sl, sl, #16
   b9f56:	3c10      	subs	r4, #16
   b9f58:	e7f1      	b.n	b9f3e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   b9f5a:	d010      	beq.n	b9f7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   b9f5c:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   b9f5e:	45a2      	cmp	sl, r4
   b9f60:	d00d      	beq.n	b9f7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   b9f62:	f1b9 0f00 	cmp.w	r9, #0
   b9f66:	d003      	beq.n	b9f70 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   b9f68:	4621      	mov	r1, r4
   b9f6a:	4648      	mov	r0, r9
   b9f6c:	f7ff f860 	bl	b9030 <_ZN6StringC1EOS_>
                p->~T();
   b9f70:	4620      	mov	r0, r4
   b9f72:	f7fe ffe1 	bl	b8f38 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b9f76:	3410      	adds	r4, #16
   b9f78:	f109 0910 	add.w	r9, r9, #16
   b9f7c:	e7ef      	b.n	b9f5e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   b9f7e:	6828      	ldr	r0, [r5, #0]
   b9f80:	f7fe fe64 	bl	b8c4c <free>
        capacity_ = n;
   b9f84:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   b9f88:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b9f8a:	e9d7 4300 	ldrd	r4, r3, [r7]
   b9f8e:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   b9f92:	45a0      	cmp	r8, r4
   b9f94:	d006      	beq.n	b9fa4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   b9f96:	4621      	mov	r1, r4
   b9f98:	4630      	mov	r0, r6
   b9f9a:	f7ff f863 	bl	b9064 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   b9f9e:	3410      	adds	r4, #16
   b9fa0:	3610      	adds	r6, #16
   b9fa2:	e7f6      	b.n	b9f92 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   b9fa4:	687b      	ldr	r3, [r7, #4]
   b9fa6:	606b      	str	r3, [r5, #4]
}
   b9fa8:	4628      	mov	r0, r5
   b9faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b9fae <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   b9fae:	b530      	push	{r4, r5, lr}
   b9fb0:	b08d      	sub	sp, #52	; 0x34
   b9fb2:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   b9fb4:	f100 0138 	add.w	r1, r0, #56	; 0x38
   b9fb8:	a801      	add	r0, sp, #4
   b9fba:	f7ff ff9e 	bl	b9efa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   b9fbe:	9b02      	ldr	r3, [sp, #8]
   b9fc0:	2b00      	cmp	r3, #0
   b9fc2:	dd2f      	ble.n	ba024 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   b9fc4:	f104 0114 	add.w	r1, r4, #20
   b9fc8:	a804      	add	r0, sp, #16
   b9fca:	f7ff fbb9 	bl	b9740 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   b9fce:	f104 0108 	add.w	r1, r4, #8
   b9fd2:	a808      	add	r0, sp, #32
   b9fd4:	f7ff fbb4 	bl	b9740 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   b9fd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b9fda:	9b06      	ldr	r3, [sp, #24]
   b9fdc:	4313      	orrs	r3, r2
   b9fde:	d01f      	beq.n	ba020 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   b9fe0:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   b9fe4:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   b9fe8:	42ac      	cmp	r4, r5
   b9fea:	d019      	beq.n	ba020 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b9fec:	a904      	add	r1, sp, #16
   b9fee:	4620      	mov	r0, r4
   b9ff0:	f7ff f88e 	bl	b9110 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b9ff4:	b160      	cbz	r0, ba010 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   b9ff6:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   b9ff8:	a808      	add	r0, sp, #32
   b9ffa:	f7fe ff9d 	bl	b8f38 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   b9ffe:	a804      	add	r0, sp, #16
   ba000:	f7fe ff9a 	bl	b8f38 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   ba004:	a801      	add	r0, sp, #4
   ba006:	f7ff fe4d 	bl	b9ca4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   ba00a:	4620      	mov	r0, r4
   ba00c:	b00d      	add	sp, #52	; 0x34
   ba00e:	bd30      	pop	{r4, r5, pc}
   ba010:	4620      	mov	r0, r4
   ba012:	a908      	add	r1, sp, #32
   ba014:	f7ff f87c 	bl	b9110 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   ba018:	3410      	adds	r4, #16
   ba01a:	2800      	cmp	r0, #0
   ba01c:	d0e4      	beq.n	b9fe8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   ba01e:	e7ea      	b.n	b9ff6 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   ba020:	2400      	movs	r4, #0
   ba022:	e7e9      	b.n	b9ff8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   ba024:	2401      	movs	r4, #1
   ba026:	e7ed      	b.n	ba004 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000ba028 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   ba02a:	2300      	movs	r3, #0
   ba02c:	e9c0 3300 	strd	r3, r3, [r0]
   ba030:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba032:	684f      	ldr	r7, [r1, #4]
   ba034:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba036:	4605      	mov	r5, r0
   ba038:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba03a:	dd3e      	ble.n	ba0ba <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   ba03c:	00f8      	lsls	r0, r7, #3
   ba03e:	f7fe fdfd 	bl	b8c3c <malloc>
            if (!d) {
   ba042:	4604      	mov	r4, r0
   ba044:	b3c8      	cbz	r0, ba0ba <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   ba046:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   ba04a:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   ba04c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   ba050:	d910      	bls.n	ba074 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   ba052:	429c      	cmp	r4, r3
   ba054:	d20f      	bcs.n	ba076 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   ba056:	3b08      	subs	r3, #8
            dest += end - p - 1;
   ba058:	1a1a      	subs	r2, r3, r0
   ba05a:	f1a0 0c08 	sub.w	ip, r0, #8
   ba05e:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   ba060:	459c      	cmp	ip, r3
   ba062:	d018      	beq.n	ba096 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   ba064:	b11a      	cbz	r2, ba06e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   ba066:	6819      	ldr	r1, [r3, #0]
   ba068:	6011      	str	r1, [r2, #0]
   ba06a:	6859      	ldr	r1, [r3, #4]
   ba06c:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   ba06e:	3b08      	subs	r3, #8
   ba070:	3a08      	subs	r2, #8
   ba072:	e7f5      	b.n	ba060 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   ba074:	d00f      	beq.n	ba096 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   ba076:	4601      	mov	r1, r0
   ba078:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   ba07a:	428b      	cmp	r3, r1
   ba07c:	d00b      	beq.n	ba096 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   ba07e:	b13a      	cbz	r2, ba090 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   ba080:	f8d1 c000 	ldr.w	ip, [r1]
   ba084:	f8c2 c000 	str.w	ip, [r2]
   ba088:	f8d1 c004 	ldr.w	ip, [r1, #4]
   ba08c:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   ba090:	3108      	adds	r1, #8
   ba092:	3208      	adds	r2, #8
   ba094:	e7f1      	b.n	ba07a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   ba096:	f7fe fdd9 	bl	b8c4c <free>
        data_ = d;
   ba09a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   ba09c:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba09e:	e9d6 3100 	ldrd	r3, r1, [r6]
   ba0a2:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   ba0a6:	4298      	cmp	r0, r3
   ba0a8:	d006      	beq.n	ba0b8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   ba0aa:	681a      	ldr	r2, [r3, #0]
   ba0ac:	6022      	str	r2, [r4, #0]
   ba0ae:	685a      	ldr	r2, [r3, #4]
   ba0b0:	6062      	str	r2, [r4, #4]
   ba0b2:	3308      	adds	r3, #8
   ba0b4:	3408      	adds	r4, #8
   ba0b6:	e7f6      	b.n	ba0a6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   ba0b8:	6069      	str	r1, [r5, #4]
}
   ba0ba:	4628      	mov	r0, r5
   ba0bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba0be <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba0be:	b570      	push	{r4, r5, r6, lr}
   ba0c0:	4604      	mov	r4, r0
        capacity_(0) {
   ba0c2:	2000      	movs	r0, #0
   ba0c4:	e9c4 0000 	strd	r0, r0, [r4]
   ba0c8:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba0ca:	684e      	ldr	r6, [r1, #4]
   ba0cc:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba0ce:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba0d0:	dd12      	ble.n	ba0f8 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   ba0d2:	0071      	lsls	r1, r6, #1
   ba0d4:	f7fe fdc2 	bl	b8c5c <realloc>
            if (!d) {
   ba0d8:	b170      	cbz	r0, ba0f8 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   ba0da:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   ba0dc:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba0de:	e9d5 3200 	ldrd	r3, r2, [r5]
   ba0e2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   ba0e6:	429a      	cmp	r2, r3
   ba0e8:	d004      	beq.n	ba0f4 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   ba0ea:	f833 1b02 	ldrh.w	r1, [r3], #2
   ba0ee:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   ba0f2:	e7f8      	b.n	ba0e6 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   ba0f4:	686b      	ldr	r3, [r5, #4]
   ba0f6:	6063      	str	r3, [r4, #4]
}
   ba0f8:	4620      	mov	r0, r4
   ba0fa:	bd70      	pop	{r4, r5, r6, pc}

000ba0fc <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   ba0fc:	b510      	push	{r4, lr}
        if (!dismissed_) {
   ba0fe:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   ba100:	4604      	mov	r4, r0
        if (!dismissed_) {
   ba102:	b923      	cbnz	r3, ba10e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   ba104:	6803      	ldr	r3, [r0, #0]
   ba106:	6818      	ldr	r0, [r3, #0]
   ba108:	b108      	cbz	r0, ba10e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   ba10a:	f7fe fd9f 	bl	b8c4c <free>
            func_();
        }
    }
   ba10e:	4620      	mov	r0, r4
   ba110:	bd10      	pop	{r4, pc}

000ba112 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   ba112:	b510      	push	{r4, lr}
        if (!dismissed_) {
   ba114:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   ba116:	4604      	mov	r4, r0
        if (!dismissed_) {
   ba118:	b923      	cbnz	r3, ba124 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   ba11a:	6803      	ldr	r3, [r0, #0]
   ba11c:	6818      	ldr	r0, [r3, #0]
   ba11e:	b108      	cbz	r0, ba124 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   ba120:	f7fe fd94 	bl	b8c4c <free>
    }
   ba124:	4620      	mov	r0, r4
   ba126:	bd10      	pop	{r4, pc}

000ba128 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   ba128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   ba12c:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   ba130:	b08f      	sub	sp, #60	; 0x3c
   ba132:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   ba134:	f1b8 0f00 	cmp.w	r8, #0
   ba138:	d072      	beq.n	ba220 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   ba13a:	6f05      	ldr	r5, [r0, #112]	; 0x70
   ba13c:	2d00      	cmp	r5, #0
   ba13e:	d06f      	beq.n	ba220 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   ba140:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   ba144:	231f      	movs	r3, #31
   ba146:	2200      	movs	r2, #0
   ba148:	21ff      	movs	r1, #255	; 0xff
   ba14a:	4648      	mov	r0, r9
   ba14c:	f7ff fac5 	bl	b96da <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   ba150:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   ba152:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   ba154:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   ba156:	2200      	movs	r2, #0
   ba158:	4619      	mov	r1, r3
   ba15a:	4638      	mov	r0, r7
   ba15c:	f7ff fabd 	bl	b96da <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   ba160:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   ba162:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   ba164:	d006      	beq.n	ba174 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   ba166:	42ae      	cmp	r6, r5
   ba168:	d030      	beq.n	ba1cc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   ba16a:	2400      	movs	r4, #0
    }
   ba16c:	4620      	mov	r0, r4
   ba16e:	b00f      	add	sp, #60	; 0x3c
   ba170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   ba174:	4620      	mov	r0, r4
   ba176:	f7fe fd61 	bl	b8c3c <malloc>
            dismissed_(false) {
   ba17a:	ab03      	add	r3, sp, #12
   ba17c:	9304      	str	r3, [sp, #16]
   ba17e:	2300      	movs	r3, #0
   ba180:	4604      	mov	r4, r0
   ba182:	9003      	str	r0, [sp, #12]
   ba184:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   ba188:	b970      	cbnz	r0, ba1a8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   ba18a:	2320      	movs	r3, #32
   ba18c:	e9cd 3006 	strd	r3, r0, [sp, #24]
   ba190:	4b24      	ldr	r3, [pc, #144]	; (ba224 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   ba192:	9300      	str	r3, [sp, #0]
   ba194:	4924      	ldr	r1, [pc, #144]	; (ba228 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   ba196:	4603      	mov	r3, r0
   ba198:	aa06      	add	r2, sp, #24
   ba19a:	2032      	movs	r0, #50	; 0x32
   ba19c:	f7fe fc72 	bl	b8a84 <log_message>
                    return false;
   ba1a0:	a804      	add	r0, sp, #16
   ba1a2:	f7ff ffab 	bl	ba0fc <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   ba1a6:	e7e1      	b.n	ba16c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   ba1a8:	4602      	mov	r2, r0
   ba1aa:	21ff      	movs	r1, #255	; 0xff
   ba1ac:	462b      	mov	r3, r5
   ba1ae:	4648      	mov	r0, r9
   ba1b0:	f7ff fa93 	bl	b96da <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   ba1b4:	9803      	ldr	r0, [sp, #12]
   ba1b6:	462a      	mov	r2, r5
   ba1b8:	4641      	mov	r1, r8
   ba1ba:	f003 f9ba 	bl	bd532 <memcmp>
   ba1be:	b118      	cbz	r0, ba1c8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   ba1c0:	a804      	add	r0, sp, #16
   ba1c2:	f7ff ff9b 	bl	ba0fc <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   ba1c6:	e7ce      	b.n	ba166 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   ba1c8:	2401      	movs	r4, #1
   ba1ca:	e7e9      	b.n	ba1a0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   ba1cc:	4628      	mov	r0, r5
   ba1ce:	f7fe fd35 	bl	b8c3c <malloc>
   ba1d2:	2400      	movs	r4, #0
   ba1d4:	ab03      	add	r3, sp, #12
   ba1d6:	4606      	mov	r6, r0
   ba1d8:	9003      	str	r0, [sp, #12]
   ba1da:	9304      	str	r3, [sp, #16]
   ba1dc:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   ba1e0:	b978      	cbnz	r0, ba202 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   ba1e2:	2320      	movs	r3, #32
   ba1e4:	e9cd 3006 	strd	r3, r0, [sp, #24]
   ba1e8:	4b0e      	ldr	r3, [pc, #56]	; (ba224 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   ba1ea:	9300      	str	r3, [sp, #0]
   ba1ec:	490e      	ldr	r1, [pc, #56]	; (ba228 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   ba1ee:	4603      	mov	r3, r0
   ba1f0:	aa06      	add	r2, sp, #24
   ba1f2:	2032      	movs	r0, #50	; 0x32
   ba1f4:	f7fe fc46 	bl	b8a84 <log_message>
                    return false;
   ba1f8:	4634      	mov	r4, r6
   ba1fa:	a804      	add	r0, sp, #16
   ba1fc:	f7ff ff89 	bl	ba112 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   ba200:	e7b4      	b.n	ba16c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   ba202:	4602      	mov	r2, r0
   ba204:	21ff      	movs	r1, #255	; 0xff
   ba206:	462b      	mov	r3, r5
   ba208:	4638      	mov	r0, r7
   ba20a:	f7ff fa66 	bl	b96da <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   ba20e:	9803      	ldr	r0, [sp, #12]
   ba210:	462a      	mov	r2, r5
   ba212:	4641      	mov	r1, r8
   ba214:	f003 f98d 	bl	bd532 <memcmp>
   ba218:	2800      	cmp	r0, #0
   ba21a:	d1ee      	bne.n	ba1fa <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   ba21c:	2401      	movs	r4, #1
   ba21e:	e7ec      	b.n	ba1fa <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   ba220:	2401      	movs	r4, #1
   ba222:	e7a3      	b.n	ba16c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   ba224:	000c08e0 	.word	0x000c08e0
   ba228:	000c085f 	.word	0x000c085f

000ba22c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   ba22c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   ba22e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   ba230:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   ba232:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   ba234:	dd03      	ble.n	ba23e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   ba236:	f7fe fd11 	bl	b8c5c <realloc>
            if (!d) {
   ba23a:	b918      	cbnz	r0, ba244 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   ba23c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   ba23e:	f7fe fd05 	bl	b8c4c <free>
        T* d = nullptr;
   ba242:	2000      	movs	r0, #0
        data_ = d;
   ba244:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   ba246:	60a5      	str	r5, [r4, #8]
        return true;
   ba248:	2001      	movs	r0, #1
   ba24a:	e7f7      	b.n	ba23c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000ba24c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   ba24c:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   ba24e:	6883      	ldr	r3, [r0, #8]
   ba250:	428b      	cmp	r3, r1
   ba252:	da02      	bge.n	ba25a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   ba254:	f7ff ffea 	bl	ba22c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   ba258:	bd08      	pop	{r3, pc}
    return true;
   ba25a:	2001      	movs	r0, #1
   ba25c:	e7fc      	b.n	ba258 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000ba25e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba25e:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   ba260:	2300      	movs	r3, #0
   ba262:	e9c0 3300 	strd	r3, r3, [r0]
   ba266:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba268:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba26a:	6849      	ldr	r1, [r1, #4]
   ba26c:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba26e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba270:	dd10      	ble.n	ba294 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   ba272:	f7ff ffdb 	bl	ba22c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   ba276:	b168      	cbz	r0, ba294 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba278:	e9d5 3100 	ldrd	r3, r1, [r5]
   ba27c:	6822      	ldr	r2, [r4, #0]
   ba27e:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   ba280:	4299      	cmp	r1, r3
   ba282:	d005      	beq.n	ba290 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   ba284:	b10a      	cbz	r2, ba28a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   ba286:	7818      	ldrb	r0, [r3, #0]
   ba288:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   ba28a:	3301      	adds	r3, #1
   ba28c:	3201      	adds	r2, #1
   ba28e:	e7f7      	b.n	ba280 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   ba290:	686b      	ldr	r3, [r5, #4]
   ba292:	6063      	str	r3, [r4, #4]
}
   ba294:	4620      	mov	r0, r4
   ba296:	bd38      	pop	{r3, r4, r5, pc}

000ba298 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   ba298:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   ba29a:	680b      	ldr	r3, [r1, #0]
   ba29c:	6003      	str	r3, [r0, #0]
   ba29e:	684b      	ldr	r3, [r1, #4]
   ba2a0:	6043      	str	r3, [r0, #4]
   ba2a2:	4604      	mov	r4, r0
   ba2a4:	460d      	mov	r5, r1
class BleAdvertisingData {
   ba2a6:	3008      	adds	r0, #8
   ba2a8:	3108      	adds	r1, #8
   ba2aa:	f7ff ffd8 	bl	ba25e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   ba2ae:	f105 0114 	add.w	r1, r5, #20
   ba2b2:	f104 0014 	add.w	r0, r4, #20
   ba2b6:	f7ff ffd2 	bl	ba25e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   ba2ba:	f895 3020 	ldrb.w	r3, [r5, #32]
   ba2be:	f884 3020 	strb.w	r3, [r4, #32]
   ba2c2:	4620      	mov	r0, r4
   ba2c4:	bd38      	pop	{r3, r4, r5, pc}

000ba2c6 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   ba2c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   ba2c8:	4604      	mov	r4, r0
   ba2ca:	a801      	add	r0, sp, #4
   ba2cc:	f7ff ffc7 	bl	ba25e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
      __a = _GLIBCXX_MOVE(__b);
   ba2d0:	9b01      	ldr	r3, [sp, #4]
   ba2d2:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba2d4:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   ba2d6:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba2d8:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba2da:	6062      	str	r2, [r4, #4]
   ba2dc:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba2de:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba2e0:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba2e2:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba2e4:	9001      	str	r0, [sp, #4]
   ba2e6:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   ba2e8:	f7fe fcb0 	bl	b8c4c <free>
   ba2ec:	b004      	add	sp, #16
   ba2ee:	bd10      	pop	{r4, pc}

000ba2f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   ba2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba2f4:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   ba2f6:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   ba2f8:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   ba2fa:	4419      	add	r1, r3
   ba2fc:	6883      	ldr	r3, [r0, #8]
   ba2fe:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   ba300:	4604      	mov	r4, r0
   ba302:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   ba304:	dc12      	bgt.n	ba32c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   ba306:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba308:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba30a:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba30c:	1bd2      	subs	r2, r2, r7
   ba30e:	4631      	mov	r1, r6
   ba310:	1970      	adds	r0, r6, r5
   ba312:	f003 f92c 	bl	bd56e <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   ba316:	462a      	mov	r2, r5
   ba318:	4641      	mov	r1, r8
   ba31a:	4630      	mov	r0, r6
   ba31c:	f003 f919 	bl	bd552 <memcpy>
    size_ += n;
   ba320:	6863      	ldr	r3, [r4, #4]
   ba322:	442b      	add	r3, r5
   ba324:	6063      	str	r3, [r4, #4]
    return true;
   ba326:	2001      	movs	r0, #1
}
   ba328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   ba32c:	f7ff ff7e 	bl	ba22c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   ba330:	2800      	cmp	r0, #0
   ba332:	d1e8      	bne.n	ba306 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   ba334:	e7f8      	b.n	ba328 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000ba336 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   ba336:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   ba338:	460a      	mov	r2, r1
   ba33a:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   ba33c:	b510      	push	{r4, lr}
   ba33e:	4604      	mov	r4, r0
    size_ = 0;
   ba340:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   ba342:	b102      	cbz	r2, ba346 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   ba344:	b90b      	cbnz	r3, ba34a <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   ba346:	2000      	movs	r0, #0
}
   ba348:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   ba34a:	2bff      	cmp	r3, #255	; 0xff
   ba34c:	bf28      	it	cs
   ba34e:	23ff      	movcs	r3, #255	; 0xff
   ba350:	f7ff ffce 	bl	ba2f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   ba354:	2800      	cmp	r0, #0
   ba356:	d0f7      	beq.n	ba348 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   ba358:	6860      	ldr	r0, [r4, #4]
   ba35a:	e7f5      	b.n	ba348 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000ba35c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   ba35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba35e:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba360:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   ba364:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   ba366:	4604      	mov	r4, r0
   ba368:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba36a:	da0b      	bge.n	ba384 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   ba36c:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba36e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba370:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba372:	1b52      	subs	r2, r2, r5
   ba374:	1c48      	adds	r0, r1, #1
   ba376:	f003 f8fa 	bl	bd56e <memmove>
    new(p) T(std::move(value));
   ba37a:	557e      	strb	r6, [r7, r5]
    ++size_;
   ba37c:	6863      	ldr	r3, [r4, #4]
   ba37e:	3301      	adds	r3, #1
   ba380:	6063      	str	r3, [r4, #4]
}
   ba382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba384:	3101      	adds	r1, #1
   ba386:	f7ff ff51 	bl	ba22c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   ba38a:	2800      	cmp	r0, #0
   ba38c:	d1ee      	bne.n	ba36c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   ba38e:	e7f8      	b.n	ba382 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000ba390 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba390:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   ba392:	6841      	ldr	r1, [r0, #4]
   ba394:	f7ff bfe2 	b.w	ba35c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000ba398 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   ba398:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   ba39c:	4604      	mov	r4, r0
   ba39e:	461d      	mov	r5, r3
   ba3a0:	460f      	mov	r7, r1
   ba3a2:	ab01      	add	r3, sp, #4
   ba3a4:	4690      	mov	r8, r2
   ba3a6:	460a      	mov	r2, r1
   ba3a8:	e9d0 0100 	ldrd	r0, r1, [r0]
   ba3ac:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   ba3b0:	f7fe ff18 	bl	b91e4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   ba3b4:	1cae      	adds	r6, r5, #2
   ba3b6:	6863      	ldr	r3, [r4, #4]
   ba3b8:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   ba3ba:	f1b9 0f00 	cmp.w	r9, #0
   ba3be:	d126      	bne.n	ba40e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   ba3c0:	b328      	cbz	r0, ba40e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   ba3c2:	4433      	add	r3, r6
   ba3c4:	1a1b      	subs	r3, r3, r0
   ba3c6:	2bff      	cmp	r3, #255	; 0xff
   ba3c8:	d809      	bhi.n	ba3de <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   ba3ca:	9901      	ldr	r1, [sp, #4]
   ba3cc:	4620      	mov	r0, r4
   ba3ce:	f7ff fcc7 	bl	b9d60 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   ba3d2:	6861      	ldr	r1, [r4, #4]
   ba3d4:	4620      	mov	r0, r4
   ba3d6:	4431      	add	r1, r6
   ba3d8:	f7ff ff38 	bl	ba24c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   ba3dc:	b918      	cbnz	r0, ba3e6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   ba3de:	6860      	ldr	r0, [r4, #4]
}
   ba3e0:	b003      	add	sp, #12
   ba3e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   ba3e6:	1c6a      	adds	r2, r5, #1
   ba3e8:	9901      	ldr	r1, [sp, #4]
   ba3ea:	b2d2      	uxtb	r2, r2
   ba3ec:	4620      	mov	r0, r4
   ba3ee:	f7ff ffb5 	bl	ba35c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   ba3f2:	9901      	ldr	r1, [sp, #4]
   ba3f4:	463a      	mov	r2, r7
   ba3f6:	3101      	adds	r1, #1
   ba3f8:	4620      	mov	r0, r4
   ba3fa:	f7ff ffaf 	bl	ba35c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   ba3fe:	9901      	ldr	r1, [sp, #4]
   ba400:	462b      	mov	r3, r5
   ba402:	4642      	mov	r2, r8
   ba404:	3102      	adds	r1, #2
    return insert(size_, values, n);
   ba406:	4620      	mov	r0, r4
   ba408:	f7ff ff72 	bl	ba2f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   ba40c:	e7e7      	b.n	ba3de <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   ba40e:	18f1      	adds	r1, r6, r3
   ba410:	29ff      	cmp	r1, #255	; 0xff
   ba412:	d8e4      	bhi.n	ba3de <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   ba414:	4620      	mov	r0, r4
   ba416:	f7ff ff19 	bl	ba24c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   ba41a:	2800      	cmp	r0, #0
   ba41c:	d0df      	beq.n	ba3de <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   ba41e:	1c69      	adds	r1, r5, #1
   ba420:	b2c9      	uxtb	r1, r1
   ba422:	4620      	mov	r0, r4
   ba424:	f7ff ffb4 	bl	ba390 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   ba428:	4639      	mov	r1, r7
   ba42a:	4620      	mov	r0, r4
   ba42c:	f7ff ffb0 	bl	ba390 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   ba430:	6861      	ldr	r1, [r4, #4]
   ba432:	462b      	mov	r3, r5
   ba434:	4642      	mov	r2, r8
   ba436:	e7e6      	b.n	ba406 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000ba438 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   ba438:	b430      	push	{r4, r5}
   ba43a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   ba43e:	b11a      	cbz	r2, ba448 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   ba440:	9502      	str	r5, [sp, #8]
}
   ba442:	bc30      	pop	{r4, r5}
   ba444:	f7ff bfa8 	b.w	ba398 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   ba448:	6840      	ldr	r0, [r0, #4]
}
   ba44a:	bc30      	pop	{r4, r5}
   ba44c:	4770      	bx	lr

000ba44e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   ba44e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   ba450:	2300      	movs	r3, #0
   ba452:	e9c0 3300 	strd	r3, r3, [r0]
   ba456:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   ba458:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   ba45a:	9300      	str	r3, [sp, #0]
   ba45c:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   ba45e:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   ba462:	4619      	mov	r1, r3
   ba464:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   ba468:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   ba46a:	f7ff ffe5 	bl	ba438 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   ba46e:	4620      	mov	r0, r4
   ba470:	b004      	add	sp, #16
   ba472:	bd10      	pop	{r4, pc}

000ba474 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   ba474:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba478:	4604      	mov	r4, r0
   ba47a:	460d      	mov	r5, r1
   ba47c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba47e:	d914      	bls.n	ba4aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   ba480:	4290      	cmp	r0, r2
   ba482:	d213      	bcs.n	ba4ac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   ba484:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   ba488:	1a75      	subs	r5, r6, r1
   ba48a:	f1a1 0708 	sub.w	r7, r1, #8
   ba48e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba490:	42b7      	cmp	r7, r6
   ba492:	d018      	beq.n	ba4c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   ba494:	b11c      	cbz	r4, ba49e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   ba496:	4631      	mov	r1, r6
   ba498:	4620      	mov	r0, r4
   ba49a:	f7ff fcac 	bl	b9df6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   ba49e:	1d30      	adds	r0, r6, #4
   ba4a0:	f7ff fcb3 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   ba4a4:	3e08      	subs	r6, #8
   ba4a6:	3c08      	subs	r4, #8
   ba4a8:	e7f2      	b.n	ba490 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   ba4aa:	d00c      	beq.n	ba4c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   ba4ac:	42b5      	cmp	r5, r6
   ba4ae:	d00a      	beq.n	ba4c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   ba4b0:	b11c      	cbz	r4, ba4ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   ba4b2:	4629      	mov	r1, r5
   ba4b4:	4620      	mov	r0, r4
   ba4b6:	f7ff fc9e 	bl	b9df6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   ba4ba:	1d28      	adds	r0, r5, #4
   ba4bc:	f7ff fca5 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   ba4c0:	3508      	adds	r5, #8
   ba4c2:	3408      	adds	r4, #8
   ba4c4:	e7f2      	b.n	ba4ac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   ba4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba4c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba4c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba4ca:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   ba4cc:	6846      	ldr	r6, [r0, #4]
   ba4ce:	4668      	mov	r0, sp
   ba4d0:	f7ff fc91 	bl	b9df6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba4d4:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   ba4d8:	429f      	cmp	r7, r3
   ba4da:	db12      	blt.n	ba502 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   ba4dc:	3701      	adds	r7, #1
        if (n > 0) {
   ba4de:	2f00      	cmp	r7, #0
   ba4e0:	dd29      	ble.n	ba536 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   ba4e2:	00f8      	lsls	r0, r7, #3
   ba4e4:	f7fe fbaa 	bl	b8c3c <malloc>
            if (!d) {
   ba4e8:	4605      	mov	r5, r0
   ba4ea:	b1f0      	cbz	r0, ba52a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   ba4ec:	e9d4 1200 	ldrd	r1, r2, [r4]
   ba4f0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   ba4f4:	f7ff ffbe 	bl	ba474 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   ba4f8:	6820      	ldr	r0, [r4, #0]
   ba4fa:	f7fe fba7 	bl	b8c4c <free>
        data_ = d;
   ba4fe:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   ba500:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   ba502:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   ba504:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba506:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   ba50a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   ba50e:	4631      	mov	r1, r6
   ba510:	f106 0008 	add.w	r0, r6, #8
   ba514:	f7ff ffae 	bl	ba474 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   ba518:	b11e      	cbz	r6, ba522 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   ba51a:	4669      	mov	r1, sp
   ba51c:	4630      	mov	r0, r6
   ba51e:	f7ff fc6a 	bl	b9df6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   ba522:	6863      	ldr	r3, [r4, #4]
   ba524:	3301      	adds	r3, #1
   ba526:	6063      	str	r3, [r4, #4]
    return true;
   ba528:	2501      	movs	r5, #1
   ba52a:	a801      	add	r0, sp, #4
   ba52c:	f7ff fc6d 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba530:	4628      	mov	r0, r5
   ba532:	b003      	add	sp, #12
   ba534:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   ba536:	2500      	movs	r5, #0
   ba538:	e7de      	b.n	ba4f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000ba53a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ba53a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   ba53c:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ba540:	4605      	mov	r5, r0
   ba542:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   ba544:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   ba548:	42a6      	cmp	r6, r4
   ba54a:	d005      	beq.n	ba558 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   ba54c:	4639      	mov	r1, r7
   ba54e:	4620      	mov	r0, r4
   ba550:	f7ff faa1 	bl	b9a96 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   ba554:	b108      	cbz	r0, ba55a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   ba556:	b914      	cbnz	r4, ba55e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   ba558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   ba55a:	3408      	adds	r4, #8
   ba55c:	e7f4      	b.n	ba548 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   ba55e:	1d20      	adds	r0, r4, #4
   ba560:	f7ff fc53 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   ba564:	e9d5 3200 	ldrd	r3, r2, [r5]
   ba568:	f104 0108 	add.w	r1, r4, #8
   ba56c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   ba570:	4620      	mov	r0, r4
   ba572:	f7ff ff7f 	bl	ba474 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   ba576:	686b      	ldr	r3, [r5, #4]
   ba578:	3b01      	subs	r3, #1
   ba57a:	606b      	str	r3, [r5, #4]
    return true;
   ba57c:	e7ec      	b.n	ba558 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000ba580 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   ba580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba584:	4605      	mov	r5, r0
   ba586:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   ba588:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   ba58a:	460c      	mov	r4, r1
        WiringBleLock lk;
   ba58c:	f7fe fef8 	bl	b9380 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   ba590:	682e      	ldr	r6, [r5, #0]
   ba592:	1ef3      	subs	r3, r6, #3
   ba594:	2b0d      	cmp	r3, #13
   ba596:	d83c      	bhi.n	ba612 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   ba598:	e8df f013 	tbh	[pc, r3, lsl #1]
   ba59c:	0053000e 	.word	0x0053000e
   ba5a0:	00d1003b 	.word	0x00d1003b
   ba5a4:	003b003b 	.word	0x003b003b
   ba5a8:	003b003b 	.word	0x003b003b
   ba5ac:	009b003b 	.word	0x009b003b
   ba5b0:	009b009b 	.word	0x009b009b
   ba5b4:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   ba5b8:	a804      	add	r0, sp, #16
   ba5ba:	f7ff fa13 	bl	b99e4 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   ba5be:	9b04      	ldr	r3, [sp, #16]
   ba5c0:	89aa      	ldrh	r2, [r5, #12]
   ba5c2:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   ba5c4:	6869      	ldr	r1, [r5, #4]
   ba5c6:	9804      	ldr	r0, [sp, #16]
   ba5c8:	3108      	adds	r1, #8
   ba5ca:	3002      	adds	r0, #2
   ba5cc:	f7fe fef2 	bl	b93b4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   ba5d0:	a904      	add	r1, sp, #16
   ba5d2:	a806      	add	r0, sp, #24
   ba5d4:	f7ff fc0f 	bl	b9df6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   ba5d8:	a906      	add	r1, sp, #24
   ba5da:	f104 0018 	add.w	r0, r4, #24
   ba5de:	f7ff ff73 	bl	ba4c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   ba5e2:	4605      	mov	r5, r0
   ba5e4:	a807      	add	r0, sp, #28
   ba5e6:	f7ff fc10 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba5ea:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   ba5ec:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   ba5ee:	b9b5      	cbnz	r5, ba61e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   ba5f0:	4b5d      	ldr	r3, [pc, #372]	; (ba768 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   ba5f2:	495e      	ldr	r1, [pc, #376]	; (ba76c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   ba5f4:	9300      	str	r3, [sp, #0]
   ba5f6:	2032      	movs	r0, #50	; 0x32
   ba5f8:	462b      	mov	r3, r5
   ba5fa:	aa06      	add	r2, sp, #24
   ba5fc:	9507      	str	r5, [sp, #28]
   ba5fe:	f7fe fa41 	bl	b8a84 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   ba602:	9b04      	ldr	r3, [sp, #16]
   ba604:	4629      	mov	r1, r5
   ba606:	8818      	ldrh	r0, [r3, #0]
   ba608:	f7fe f822 	bl	b8650 <hal_ble_gap_disconnect>
   ba60c:	a805      	add	r0, sp, #20
   ba60e:	f7ff fbfc 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   ba612:	a803      	add	r0, sp, #12
   ba614:	f7fe fec2 	bl	b939c <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   ba618:	b00e      	add	sp, #56	; 0x38
   ba61a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   ba61e:	4a54      	ldr	r2, [pc, #336]	; (ba770 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   ba620:	9200      	str	r2, [sp, #0]
   ba622:	2300      	movs	r3, #0
   ba624:	4951      	ldr	r1, [pc, #324]	; (ba76c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   ba626:	9307      	str	r3, [sp, #28]
   ba628:	aa06      	add	r2, sp, #24
   ba62a:	2001      	movs	r0, #1
   ba62c:	f7fe fa2a 	bl	b8a84 <log_message>
                if (impl->connectedCallback_) {
   ba630:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba632:	2b00      	cmp	r3, #0
   ba634:	d0ea      	beq.n	ba60c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   ba636:	a904      	add	r1, sp, #16
   ba638:	f104 0024 	add.w	r0, r4, #36	; 0x24
   ba63c:	f7ff fc54 	bl	b9ee8 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   ba640:	e7e4      	b.n	ba60c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   ba642:	89a9      	ldrh	r1, [r5, #12]
   ba644:	4620      	mov	r0, r4
   ba646:	f7ff f8e0 	bl	b980a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   ba64a:	4606      	mov	r6, r0
   ba64c:	2800      	cmp	r0, #0
   ba64e:	d0e0      	beq.n	ba612 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   ba650:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   ba652:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   ba656:	f64f 71ff 	movw	r1, #65535	; 0xffff
   ba65a:	8029      	strh	r1, [r5, #0]
   ba65c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   ba660:	429a      	cmp	r2, r3
   ba662:	d003      	beq.n	ba66c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   ba664:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   ba668:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   ba66a:	e7f9      	b.n	ba660 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   ba66c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   ba670:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   ba674:	45b8      	cmp	r8, r7
   ba676:	d004      	beq.n	ba682 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   ba678:	1d38      	adds	r0, r7, #4
   ba67a:	f7ff fbc6 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba67e:	3708      	adds	r7, #8
   ba680:	e7f8      	b.n	ba674 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   ba682:	2300      	movs	r3, #0
   ba684:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   ba686:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   ba68a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   ba68e:	45b8      	cmp	r8, r7
   ba690:	d004      	beq.n	ba69c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   ba692:	1d38      	adds	r0, r7, #4
   ba694:	f7ff fbb9 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba698:	3708      	adds	r7, #8
   ba69a:	e7f8      	b.n	ba68e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   ba69c:	2300      	movs	r3, #0
   ba69e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   ba6a0:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   ba6a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   ba6a4:	b123      	cbz	r3, ba6b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   ba6a6:	4631      	mov	r1, r6
   ba6a8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   ba6ac:	f7ff fc1c 	bl	b9ee8 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   ba6b0:	2300      	movs	r3, #0
   ba6b2:	2220      	movs	r2, #32
   ba6b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   ba6b8:	4a2e      	ldr	r2, [pc, #184]	; (ba774 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   ba6ba:	9200      	str	r2, [sp, #0]
   ba6bc:	492b      	ldr	r1, [pc, #172]	; (ba76c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   ba6be:	aa06      	add	r2, sp, #24
   ba6c0:	2001      	movs	r0, #1
   ba6c2:	f7fe f9df 	bl	b8a84 <log_message>
                    impl->peers_.removeOne(*peer);
   ba6c6:	4631      	mov	r1, r6
   ba6c8:	f104 0018 	add.w	r0, r4, #24
   ba6cc:	f7ff ff35 	bl	ba53a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   ba6d0:	e79f      	b.n	ba612 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   ba6d2:	89a9      	ldrh	r1, [r5, #12]
   ba6d4:	4620      	mov	r0, r4
   ba6d6:	f7ff f898 	bl	b980a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   ba6da:	2800      	cmp	r0, #0
   ba6dc:	d099      	beq.n	ba612 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   ba6de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba6e0:	2b00      	cmp	r3, #0
   ba6e2:	d096      	beq.n	ba612 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   ba6e4:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   ba6e6:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   ba6e8:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   ba6ec:	d001      	beq.n	ba6f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   ba6ee:	2e10      	cmp	r6, #16
   ba6f0:	d117      	bne.n	ba722 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   ba6f2:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   ba6f4:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   ba6f6:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   ba6f8:	2506      	movs	r5, #6
                        };
   ba6fa:	f88d 3015 	strb.w	r3, [sp, #21]
   ba6fe:	9104      	str	r1, [sp, #16]
   ba700:	f88d 2014 	strb.w	r2, [sp, #20]
   ba704:	9006      	str	r0, [sp, #24]
   ba706:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   ba70a:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   ba70c:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   ba710:	9508      	str	r5, [sp, #32]
   ba712:	e883 0003 	stmia.w	r3, {r0, r1}
   ba716:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba718:	a906      	add	r1, sp, #24
   ba71a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   ba71e:	4798      	blx	r3
   ba720:	e777      	b.n	ba612 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   ba722:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   ba724:	bf01      	itttt	eq
   ba726:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   ba728:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   ba72a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   ba72e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   ba730:	bf0f      	iteee	eq
   ba732:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   ba736:	461a      	movne	r2, r3
   ba738:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   ba73a:	461d      	movne	r5, r3
   ba73c:	e7dd      	b.n	ba6fa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   ba73e:	89a9      	ldrh	r1, [r5, #12]
   ba740:	4620      	mov	r0, r4
   ba742:	f7ff f862 	bl	b980a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   ba746:	4601      	mov	r1, r0
   ba748:	2800      	cmp	r0, #0
   ba74a:	f43f af62 	beq.w	ba612 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   ba74e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba750:	2b00      	cmp	r3, #0
   ba752:	f43f af5e 	beq.w	ba612 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   ba756:	686b      	ldr	r3, [r5, #4]
   ba758:	9306      	str	r3, [sp, #24]
   ba75a:	aa06      	add	r2, sp, #24
   ba75c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba75e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   ba762:	4798      	blx	r3
   ba764:	e755      	b.n	ba612 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   ba766:	bf00      	nop
   ba768:	000c08fb 	.word	0x000c08fb
   ba76c:	000c085f 	.word	0x000c085f
   ba770:	000c0921 	.word	0x000c0921
   ba774:	000c093e 	.word	0x000c093e

000ba778 <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   ba778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba77c:	4607      	mov	r7, r0
   ba77e:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   ba780:	4668      	mov	r0, sp
   ba782:	f7fe fdfd 	bl	b9380 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   ba786:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   ba788:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   ba78c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (auto& p : impl()->peers()) {
   ba790:	42ac      	cmp	r4, r5
   ba792:	d035      	beq.n	ba800 <_ZNK8particle14BleLocalDevice10disconnectEv+0x88>
        hal_ble_conn_info_t connInfo = {};
   ba794:	2224      	movs	r2, #36	; 0x24
   ba796:	2100      	movs	r1, #0
   ba798:	a801      	add	r0, sp, #4
   ba79a:	f002 ff02 	bl	bd5a2 <memset>
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   ba79e:	6823      	ldr	r3, [r4, #0]
   ba7a0:	2200      	movs	r2, #0
   ba7a2:	8818      	ldrh	r0, [r3, #0]
   ba7a4:	a901      	add	r1, sp, #4
   ba7a6:	f7fd ffa3 	bl	b86f0 <hal_ble_gap_get_connection_info>
   ba7aa:	4606      	mov	r6, r0
   ba7ac:	b108      	cbz	r0, ba7b2 <_ZNK8particle14BleLocalDevice10disconnectEv+0x3a>
    for (auto& p : impl()->peers()) {
   ba7ae:	3408      	adds	r4, #8
   ba7b0:	e7ee      	b.n	ba790 <_ZNK8particle14BleLocalDevice10disconnectEv+0x18>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   ba7b2:	f89d 8008 	ldrb.w	r8, [sp, #8]
   ba7b6:	f1b8 0f01 	cmp.w	r8, #1
   ba7ba:	d1f8      	bne.n	ba7ae <_ZNK8particle14BleLocalDevice10disconnectEv+0x36>
   ba7bc:	f8df 9048 	ldr.w	r9, [pc, #72]	; ba808 <_ZNK8particle14BleLocalDevice10disconnectEv+0x90>
   ba7c0:	f8d9 0000 	ldr.w	r0, [r9]
   ba7c4:	f7fe f816 	bl	b87f4 <os_mutex_recursive_unlock>
        locked_ = false;
   ba7c8:	f88d 6000 	strb.w	r6, [sp]
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   ba7cc:	6823      	ldr	r3, [r4, #0]
   ba7ce:	4631      	mov	r1, r6
   ba7d0:	8818      	ldrh	r0, [r3, #0]
   ba7d2:	f7fd ff3d 	bl	b8650 <hal_ble_gap_disconnect>
   ba7d6:	1e05      	subs	r5, r0, #0
   ba7d8:	db0b      	blt.n	ba7f2 <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
    void lock() { os_mutex_recursive_lock(handle_); }
   ba7da:	f8d9 0000 	ldr.w	r0, [r9]
   ba7de:	f7fe f801 	bl	b87e4 <os_mutex_recursive_lock>
        return peers_;
   ba7e2:	6838      	ldr	r0, [r7, #0]
        locked_ = true;
   ba7e4:	f88d 8000 	strb.w	r8, [sp]
            lk.lock();
            impl()->peers().removeOne(p);
   ba7e8:	4621      	mov	r1, r4
   ba7ea:	3018      	adds	r0, #24
   ba7ec:	f7ff fea5 	bl	ba53a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
            return SYSTEM_ERROR_NONE;
   ba7f0:	4635      	mov	r5, r6
    WiringBleLock lk;
   ba7f2:	4668      	mov	r0, sp
   ba7f4:	f7fe fdd2 	bl	b939c <_ZN8particle3ble13WiringBleLockD1Ev>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   ba7f8:	4628      	mov	r0, r5
   ba7fa:	b00b      	add	sp, #44	; 0x2c
   ba7fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   ba800:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
   ba804:	e7f5      	b.n	ba7f2 <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
   ba806:	bf00      	nop
   ba808:	2003e670 	.word	0x2003e670

000ba80c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   ba80c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   ba80e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   ba810:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   ba812:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   ba814:	dd05      	ble.n	ba822 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   ba816:	2114      	movs	r1, #20
   ba818:	4369      	muls	r1, r5
   ba81a:	f7fe fa1f 	bl	b8c5c <realloc>
            if (!d) {
   ba81e:	b918      	cbnz	r0, ba828 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   ba820:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   ba822:	f7fe fa13 	bl	b8c4c <free>
        T* d = nullptr;
   ba826:	2000      	movs	r0, #0
        data_ = d;
   ba828:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   ba82a:	60a5      	str	r5, [r4, #8]
        return true;
   ba82c:	2001      	movs	r0, #1
   ba82e:	e7f7      	b.n	ba820 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000ba830 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   ba834:	2400      	movs	r4, #0
   ba836:	e9c0 4400 	strd	r4, r4, [r0]
   ba83a:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba83c:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba83e:	6849      	ldr	r1, [r1, #4]
   ba840:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba842:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba844:	dd1a      	ble.n	ba87c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   ba846:	f7ff ffe1 	bl	ba80c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   ba84a:	b1b8      	cbz	r0, ba87c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba84c:	e9d8 9300 	ldrd	r9, r3, [r8]
   ba850:	f04f 0c14 	mov.w	ip, #20
   ba854:	f8d7 e000 	ldr.w	lr, [r7]
   ba858:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   ba85c:	eb09 0504 	add.w	r5, r9, r4
   ba860:	45ac      	cmp	ip, r5
   ba862:	d008      	beq.n	ba876 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   ba864:	eb1e 0604 	adds.w	r6, lr, r4
   ba868:	bf1f      	itttt	ne
   ba86a:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   ba86c:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   ba86e:	682b      	ldrne	r3, [r5, #0]
   ba870:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   ba872:	3414      	adds	r4, #20
   ba874:	e7f2      	b.n	ba85c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   ba876:	f8d8 3004 	ldr.w	r3, [r8, #4]
   ba87a:	607b      	str	r3, [r7, #4]
}
   ba87c:	4638      	mov	r0, r7
   ba87e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000ba882 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   ba882:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   ba886:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   ba88a:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   ba88c:	6883      	ldr	r3, [r0, #8]
   ba88e:	19e9      	adds	r1, r5, r7
   ba890:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   ba892:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   ba894:	dc17      	bgt.n	ba8c6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   ba896:	2314      	movs	r3, #20
   ba898:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   ba89a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba89c:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   ba89e:	fb03 f907 	mul.w	r9, r3, r7
   ba8a2:	435a      	muls	r2, r3
    T* const p = data_ + i;
   ba8a4:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba8a6:	1b52      	subs	r2, r2, r5
   ba8a8:	4631      	mov	r1, r6
   ba8aa:	eb06 0009 	add.w	r0, r6, r9
   ba8ae:	f002 fe5e 	bl	bd56e <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   ba8b2:	464a      	mov	r2, r9
   ba8b4:	4641      	mov	r1, r8
   ba8b6:	4630      	mov	r0, r6
   ba8b8:	f002 fe4b 	bl	bd552 <memcpy>
    size_ += n;
   ba8bc:	6863      	ldr	r3, [r4, #4]
   ba8be:	443b      	add	r3, r7
   ba8c0:	6063      	str	r3, [r4, #4]
}
   ba8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   ba8c6:	f7ff ffa1 	bl	ba80c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   ba8ca:	2800      	cmp	r0, #0
   ba8cc:	d1e3      	bne.n	ba896 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   ba8ce:	e7f8      	b.n	ba8c2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000ba8d0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   ba8d0:	b082      	sub	sp, #8
   ba8d2:	b570      	push	{r4, r5, r6, lr}
   ba8d4:	460c      	mov	r4, r1
   ba8d6:	a904      	add	r1, sp, #16
   ba8d8:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba8dc:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   ba8e0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   ba8e2:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba8e4:	da17      	bge.n	ba916 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   ba8e6:	2314      	movs	r3, #20
   ba8e8:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   ba8ec:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   ba8ee:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   ba8f0:	435a      	muls	r2, r3
    T* const p = data_ + i;
   ba8f2:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba8f4:	1a52      	subs	r2, r2, r1
   ba8f6:	18e0      	adds	r0, r4, r3
   ba8f8:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   ba8fa:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba8fc:	f002 fe37 	bl	bd56e <memmove>
    new(p) T(std::move(value));
   ba900:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   ba902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba904:	6833      	ldr	r3, [r6, #0]
   ba906:	6023      	str	r3, [r4, #0]
    ++size_;
   ba908:	686b      	ldr	r3, [r5, #4]
   ba90a:	3301      	adds	r3, #1
   ba90c:	606b      	str	r3, [r5, #4]
}
   ba90e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba912:	b002      	add	sp, #8
   ba914:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba916:	3101      	adds	r1, #1
   ba918:	f7ff ff78 	bl	ba80c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   ba91c:	2800      	cmp	r0, #0
   ba91e:	d1e2      	bne.n	ba8e6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   ba920:	e7f5      	b.n	ba90e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000ba922 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   ba922:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   ba926:	2400      	movs	r4, #0
   ba928:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   ba92a:	1e93      	subs	r3, r2, #2
   ba92c:	e9c0 4400 	strd	r4, r4, [r0]
   ba930:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   ba932:	4605      	mov	r5, r0
   ba934:	460f      	mov	r7, r1
   ba936:	4690      	mov	r8, r2
   ba938:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   ba93a:	9305      	str	r3, [sp, #20]
    return size_;
   ba93c:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   ba93e:	428c      	cmp	r4, r1
   ba940:	da72      	bge.n	baa28 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   ba942:	6838      	ldr	r0, [r7, #0]
   ba944:	ab07      	add	r3, sp, #28
   ba946:	4642      	mov	r2, r8
   ba948:	1b09      	subs	r1, r1, r4
   ba94a:	4420      	add	r0, r4
   ba94c:	f7fe fc4a 	bl	b91e4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   ba950:	4606      	mov	r6, r0
   ba952:	2800      	cmp	r0, #0
   ba954:	d068      	beq.n	baa28 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   ba956:	9b05      	ldr	r3, [sp, #20]
   ba958:	2b01      	cmp	r3, #1
   ba95a:	d82f      	bhi.n	ba9bc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   ba95c:	f1a0 0b02 	sub.w	fp, r0, #2
   ba960:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   ba964:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   ba968:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   ba96c:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   ba96e:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   ba970:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   ba972:	d055      	beq.n	baa20 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   ba974:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   ba976:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   ba97a:	4413      	add	r3, r2
   ba97c:	a808      	add	r0, sp, #32
   ba97e:	78d9      	ldrb	r1, [r3, #3]
   ba980:	789b      	ldrb	r3, [r3, #2]
   ba982:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   ba986:	f7fe fd92 	bl	b94ae <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   ba98a:	f10d 0e20 	add.w	lr, sp, #32
   ba98e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   ba992:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   ba996:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   ba99a:	f8de 3000 	ldr.w	r3, [lr]
   ba99e:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   ba9a2:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   ba9a6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   ba9aa:	ab0d      	add	r3, sp, #52	; 0x34
   ba9ac:	cb0c      	ldmia	r3, {r2, r3}
   ba9ae:	6869      	ldr	r1, [r5, #4]
   ba9b0:	4628      	mov	r0, r5
   ba9b2:	f7ff ff8d 	bl	ba8d0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   ba9b6:	f109 0901 	add.w	r9, r9, #1
   ba9ba:	e7d7      	b.n	ba96c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   ba9bc:	f1a8 0306 	sub.w	r3, r8, #6
   ba9c0:	2b01      	cmp	r3, #1
   ba9c2:	d82d      	bhi.n	baa20 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   ba9c4:	f1a0 0b02 	sub.w	fp, r0, #2
   ba9c8:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   ba9cc:	f04f 0900 	mov.w	r9, #0
   ba9d0:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   ba9d4:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   ba9d6:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   ba9d8:	d022      	beq.n	baa20 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   ba9da:	3302      	adds	r3, #2
    return data_[i];
   ba9dc:	6839      	ldr	r1, [r7, #0]
   ba9de:	4423      	add	r3, r4
   ba9e0:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   ba9e4:	2201      	movs	r2, #1
   ba9e6:	4419      	add	r1, r3
   ba9e8:	a808      	add	r0, sp, #32
   ba9ea:	f7fe fd41 	bl	b9470 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   ba9ee:	f10d 0e20 	add.w	lr, sp, #32
   ba9f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   ba9f6:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   ba9fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   ba9fe:	f8de 3000 	ldr.w	r3, [lr]
   baa02:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   baa06:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   baa0a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   baa0e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   baa12:	6869      	ldr	r1, [r5, #4]
   baa14:	4628      	mov	r0, r5
   baa16:	f7ff ff5b 	bl	ba8d0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   baa1a:	f109 0901 	add.w	r9, r9, #1
   baa1e:	e7d9      	b.n	ba9d4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   baa20:	9b07      	ldr	r3, [sp, #28]
   baa22:	441c      	add	r4, r3
   baa24:	4434      	add	r4, r6
   baa26:	e789      	b.n	ba93c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   baa28:	4628      	mov	r0, r5
   baa2a:	b013      	add	sp, #76	; 0x4c
   baa2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000baa30 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   baa30:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   baa32:	2300      	movs	r3, #0
   baa34:	b085      	sub	sp, #20
   baa36:	e9c0 3300 	strd	r3, r3, [r0]
   baa3a:	6083      	str	r3, [r0, #8]
   baa3c:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   baa3e:	2202      	movs	r2, #2
   baa40:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   baa42:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   baa44:	f7ff ff6d 	bl	ba922 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   baa48:	a901      	add	r1, sp, #4
   baa4a:	4620      	mov	r0, r4
   baa4c:	f7ff ff19 	bl	ba882 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   baa50:	a801      	add	r0, sp, #4
   baa52:	f7ff f939 	bl	b9cc8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   baa56:	2202      	movs	r2, #2
   baa58:	4629      	mov	r1, r5
   baa5a:	a801      	add	r0, sp, #4
   baa5c:	f7ff ff61 	bl	ba922 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   baa60:	a901      	add	r1, sp, #4
   baa62:	4620      	mov	r0, r4
   baa64:	f7ff ff0d 	bl	ba882 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   baa68:	a801      	add	r0, sp, #4
   baa6a:	f7ff f92d 	bl	b9cc8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   baa6e:	2203      	movs	r2, #3
   baa70:	4629      	mov	r1, r5
   baa72:	a801      	add	r0, sp, #4
   baa74:	f7ff ff55 	bl	ba922 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   baa78:	a901      	add	r1, sp, #4
   baa7a:	4620      	mov	r0, r4
   baa7c:	f7ff ff01 	bl	ba882 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   baa80:	a801      	add	r0, sp, #4
   baa82:	f7ff f921 	bl	b9cc8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   baa86:	2206      	movs	r2, #6
   baa88:	4629      	mov	r1, r5
   baa8a:	a801      	add	r0, sp, #4
   baa8c:	f7ff ff49 	bl	ba922 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   baa90:	a901      	add	r1, sp, #4
   baa92:	4620      	mov	r0, r4
   baa94:	f7ff fef5 	bl	ba882 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   baa98:	a801      	add	r0, sp, #4
   baa9a:	f7ff f915 	bl	b9cc8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   baa9e:	2207      	movs	r2, #7
   baaa0:	4629      	mov	r1, r5
   baaa2:	a801      	add	r0, sp, #4
   baaa4:	f7ff ff3d 	bl	ba922 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   baaa8:	a901      	add	r1, sp, #4
   baaaa:	4620      	mov	r0, r4
   baaac:	f7ff fee9 	bl	ba882 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   baab0:	a801      	add	r0, sp, #4
   baab2:	f7ff f909 	bl	b9cc8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   baab6:	4620      	mov	r0, r4
   baab8:	b005      	add	sp, #20
   baaba:	bd30      	pop	{r4, r5, pc}

000baabc <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   baabc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   baac0:	b085      	sub	sp, #20
   baac2:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
   baac4:	4601      	mov	r1, r0
   baac6:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   baac8:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
   baaca:	f7ff ffb1 	bl	baa30 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_;
   baace:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
   baad0:	9b02      	ldr	r3, [sp, #8]
   baad2:	f04f 0e14 	mov.w	lr, #20
   baad6:	fb0e 6c03 	mla	ip, lr, r3, r6
   baada:	2700      	movs	r7, #0
    for (const auto& uuid : foundUuids) {
   baadc:	45b4      	cmp	ip, r6
   baade:	d00d      	beq.n	baafc <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
   baae0:	45b9      	cmp	r9, r7
   baae2:	f106 0614 	add.w	r6, r6, #20
   baae6:	d009      	beq.n	baafc <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
   baae8:	f1a6 0514 	sub.w	r5, r6, #20
   baaec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   baaee:	fb0e 8407 	mla	r4, lr, r7, r8
   baaf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   baaf4:	682b      	ldr	r3, [r5, #0]
   baaf6:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
   baaf8:	3701      	adds	r7, #1
   baafa:	e7ef      	b.n	baadc <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
   baafc:	a801      	add	r0, sp, #4
   baafe:	f7ff f8e3 	bl	b9cc8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   bab02:	4638      	mov	r0, r7
   bab04:	b005      	add	sp, #20
   bab06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bab0a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   bab0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bab0e:	b08b      	sub	sp, #44	; 0x2c
   bab10:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   bab12:	f100 0144 	add.w	r1, r0, #68	; 0x44
   bab16:	a801      	add	r0, sp, #4
   bab18:	f7ff fe8a 	bl	ba830 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   bab1c:	9b02      	ldr	r3, [sp, #8]
   bab1e:	2b00      	cmp	r3, #0
   bab20:	dd4a      	ble.n	babb8 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   bab22:	f104 0114 	add.w	r1, r4, #20
   bab26:	a804      	add	r0, sp, #16
   bab28:	f7ff ff82 	bl	baa30 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   bab2c:	f104 0108 	add.w	r1, r4, #8
   bab30:	a807      	add	r0, sp, #28
   bab32:	f7ff ff7d 	bl	baa30 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   bab36:	9d05      	ldr	r5, [sp, #20]
   bab38:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   bab3a:	2d00      	cmp	r5, #0
   bab3c:	dc01      	bgt.n	bab42 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   bab3e:	2e00      	cmp	r6, #0
   bab40:	dd38      	ble.n	babb4 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   bab42:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   bab44:	9f02      	ldr	r7, [sp, #8]
    return data_;
   bab46:	f8dd 8010 	ldr.w	r8, [sp, #16]
   bab4a:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   bab4e:	2314      	movs	r3, #20
   bab50:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   bab54:	fb03 8505 	mla	r5, r3, r5, r8
   bab58:	fb03 9606 	mla	r6, r3, r6, r9
   bab5c:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   bab5e:	45ba      	cmp	sl, r7
   bab60:	d028      	beq.n	babb4 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   bab62:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   bab64:	45ab      	cmp	fp, r5
   bab66:	d015      	beq.n	bab94 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   bab68:	4659      	mov	r1, fp
   bab6a:	4650      	mov	r0, sl
   bab6c:	f7fe fca9 	bl	b94c2 <_ZNK8particle7BleUuideqERKS0_>
   bab70:	f10b 0b14 	add.w	fp, fp, #20
   bab74:	4604      	mov	r4, r0
   bab76:	2800      	cmp	r0, #0
   bab78:	d0f4      	beq.n	bab64 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   bab7a:	a807      	add	r0, sp, #28
   bab7c:	f7ff f8a4 	bl	b9cc8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   bab80:	a804      	add	r0, sp, #16
   bab82:	f7ff f8a1 	bl	b9cc8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   bab86:	a801      	add	r0, sp, #4
   bab88:	f7ff f89e 	bl	b9cc8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   bab8c:	4620      	mov	r0, r4
   bab8e:	b00b      	add	sp, #44	; 0x2c
   bab90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bab94:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   bab96:	45b3      	cmp	fp, r6
   bab98:	d009      	beq.n	babae <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   bab9a:	4659      	mov	r1, fp
   bab9c:	4650      	mov	r0, sl
   bab9e:	f7fe fc90 	bl	b94c2 <_ZNK8particle7BleUuideqERKS0_>
   baba2:	f10b 0b14 	add.w	fp, fp, #20
   baba6:	4604      	mov	r4, r0
   baba8:	2800      	cmp	r0, #0
   babaa:	d0f4      	beq.n	bab96 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   babac:	e7e5      	b.n	bab7a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   babae:	f10a 0a14 	add.w	sl, sl, #20
   babb2:	e7d4      	b.n	bab5e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   babb4:	2400      	movs	r4, #0
   babb6:	e7e0      	b.n	bab7a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   babb8:	2401      	movs	r4, #1
   babba:	e7e4      	b.n	bab86 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000babbc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   babbc:	b513      	push	{r0, r1, r4, lr}
   babbe:	460b      	mov	r3, r1
   babc0:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   babc2:	e9d0 0100 	ldrd	r0, r1, [r0]
   babc6:	466c      	mov	r4, sp
   babc8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   babcc:	e893 0003 	ldmia.w	r3, {r0, r1}
   babd0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   babd4:	e894 0003 	ldmia.w	r4, {r0, r1}
   babd8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   babdc:	b002      	add	sp, #8
   babde:	bd10      	pop	{r4, pc}

000babe0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   babe0:	b538      	push	{r3, r4, r5, lr}
   babe2:	4605      	mov	r5, r0
   babe4:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   babe6:	f7ff ffe9 	bl	babbc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   babea:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   babec:	68a2      	ldr	r2, [r4, #8]
   babee:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   babf0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   babf2:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   babf4:	68e2      	ldr	r2, [r4, #12]
   babf6:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   babf8:	60e3      	str	r3, [r4, #12]
      }
   babfa:	bd38      	pop	{r3, r4, r5, pc}

000babfc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   babfc:	b530      	push	{r4, r5, lr}
   babfe:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   bac00:	2300      	movs	r3, #0
   bac02:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   bac04:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   bac06:	4605      	mov	r5, r0
   bac08:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   bac0a:	b133      	cbz	r3, bac1a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bac0c:	2202      	movs	r2, #2
   bac0e:	4668      	mov	r0, sp
   bac10:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bac12:	68e3      	ldr	r3, [r4, #12]
   bac14:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   bac16:	68a3      	ldr	r3, [r4, #8]
   bac18:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   bac1a:	4629      	mov	r1, r5
   bac1c:	4668      	mov	r0, sp
   bac1e:	f7ff ffdf 	bl	babe0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bac22:	4668      	mov	r0, sp
   bac24:	f7f9 fb46 	bl	b42b4 <_ZNSt14_Function_baseD1Ev>
      }
   bac28:	b005      	add	sp, #20
   bac2a:	bd30      	pop	{r4, r5, pc}

000bac2c <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   bac2c:	b538      	push	{r3, r4, r5, lr}
   bac2e:	460d      	mov	r5, r1
      { return _M_ptr; }
   bac30:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   bac32:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   bac34:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   bac36:	b123      	cbz	r3, bac42 <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   bac38:	6828      	ldr	r0, [r5, #0]
   bac3a:	314c      	adds	r1, #76	; 0x4c
   bac3c:	304c      	adds	r0, #76	; 0x4c
   bac3e:	f7ff ffdd 	bl	babfc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bac42:	4620      	mov	r0, r4
   bac44:	682b      	ldr	r3, [r5, #0]
   bac46:	f840 3b04 	str.w	r3, [r0], #4
   bac4a:	6869      	ldr	r1, [r5, #4]
   bac4c:	f7fe fb72 	bl	b9334 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   bac50:	4620      	mov	r0, r4
   bac52:	bd38      	pop	{r3, r4, r5, pc}

000bac54 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   bac54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bac58:	4604      	mov	r4, r0
   bac5a:	b087      	sub	sp, #28
    WiringBleLock lk;
   bac5c:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   bac5e:	460e      	mov	r6, r1
   bac60:	4617      	mov	r7, r2
    WiringBleLock lk;
   bac62:	f7fe fb8d 	bl	b9380 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bac66:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   bac68:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   bac6c:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   bac70:	4544      	cmp	r4, r8
   bac72:	46a1      	mov	r9, r4
   bac74:	d016      	beq.n	baca4 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   bac76:	4621      	mov	r1, r4
   bac78:	a801      	add	r0, sp, #4
   bac7a:	f7fe fdf1 	bl	b9860 <_ZNK8particle17BleCharacteristic4UUIDEv>
   bac7e:	4639      	mov	r1, r7
   bac80:	a801      	add	r0, sp, #4
   bac82:	f7fe fc1e 	bl	b94c2 <_ZNK8particle7BleUuideqERKS0_>
   bac86:	3408      	adds	r4, #8
   bac88:	4605      	mov	r5, r0
   bac8a:	2800      	cmp	r0, #0
   bac8c:	d0f0      	beq.n	bac70 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   bac8e:	4649      	mov	r1, r9
   bac90:	4630      	mov	r0, r6
   bac92:	f7ff ffcb 	bl	bac2c <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   bac96:	4668      	mov	r0, sp
   bac98:	f7fe fb80 	bl	b939c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bac9c:	4628      	mov	r0, r5
   bac9e:	b007      	add	sp, #28
   baca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   baca4:	2500      	movs	r5, #0
   baca6:	e7f6      	b.n	bac96 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000baca8 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   baca8:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bacaa:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   bacac:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bacae:	344c      	adds	r4, #76	; 0x4c
   bacb0:	b1b9      	cbz	r1, bace2 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   bacb2:	e9cd 1200 	strd	r1, r2, [sp]
   bacb6:	a802      	add	r0, sp, #8
   bacb8:	4669      	mov	r1, sp
   bacba:	f7ff f865 	bl	b9d88 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   bacbe:	2300      	movs	r3, #0
	__x.swap(*this);
   bacc0:	a906      	add	r1, sp, #24
   bacc2:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   bacc4:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   bacc6:	f7ff ff8b 	bl	babe0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   bacca:	4621      	mov	r1, r4
   baccc:	a806      	add	r0, sp, #24
   bacce:	f7ff ff87 	bl	babe0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bacd2:	a806      	add	r0, sp, #24
   bacd4:	f7f9 faee 	bl	b42b4 <_ZNSt14_Function_baseD1Ev>
   bacd8:	a802      	add	r0, sp, #8
   bacda:	f7f9 faeb 	bl	b42b4 <_ZNSt14_Function_baseD1Ev>
}
   bacde:	b00a      	add	sp, #40	; 0x28
   bace0:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   bace2:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   bace4:	e7eb      	b.n	bacbe <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000bace6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bace6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bace8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bacea:	4604      	mov	r4, r0
   bacec:	460d      	mov	r5, r1
   bacee:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bacf0:	d914      	bls.n	bad1c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bacf2:	4290      	cmp	r0, r2
   bacf4:	d213      	bcs.n	bad1e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bacf6:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bacfa:	1a75      	subs	r5, r6, r1
   bacfc:	f1a1 0708 	sub.w	r7, r1, #8
   bad00:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bad02:	42b7      	cmp	r7, r6
   bad04:	d018      	beq.n	bad38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bad06:	b11c      	cbz	r4, bad10 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bad08:	4631      	mov	r1, r6
   bad0a:	4620      	mov	r0, r4
   bad0c:	f7ff f869 	bl	b9de2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   bad10:	1d30      	adds	r0, r6, #4
   bad12:	f7ff f87a 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bad16:	3e08      	subs	r6, #8
   bad18:	3c08      	subs	r4, #8
   bad1a:	e7f2      	b.n	bad02 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bad1c:	d00c      	beq.n	bad38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bad1e:	42b5      	cmp	r5, r6
   bad20:	d00a      	beq.n	bad38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bad22:	b11c      	cbz	r4, bad2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bad24:	4629      	mov	r1, r5
   bad26:	4620      	mov	r0, r4
   bad28:	f7ff f85b 	bl	b9de2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bad2c:	1d28      	adds	r0, r5, #4
   bad2e:	f7ff f86c 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bad32:	3508      	adds	r5, #8
   bad34:	3408      	adds	r4, #8
   bad36:	e7f2      	b.n	bad1e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bad38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bad3a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bad3a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bad3c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bad3e:	4605      	mov	r5, r0
        if (n > 0) {
   bad40:	dd11      	ble.n	bad66 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bad42:	00f0      	lsls	r0, r6, #3
   bad44:	f7fd ff7a 	bl	b8c3c <malloc>
            if (!d) {
   bad48:	4604      	mov	r4, r0
   bad4a:	b158      	cbz	r0, bad64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bad4c:	e9d5 1200 	ldrd	r1, r2, [r5]
   bad50:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bad54:	f7ff ffc7 	bl	bace6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bad58:	6828      	ldr	r0, [r5, #0]
   bad5a:	f7fd ff77 	bl	b8c4c <free>
        data_ = d;
   bad5e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bad60:	60ae      	str	r6, [r5, #8]
        return true;
   bad62:	2001      	movs	r0, #1
    }
   bad64:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bad66:	2400      	movs	r4, #0
   bad68:	e7f6      	b.n	bad58 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bad6a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bad6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   bad6e:	2300      	movs	r3, #0
   bad70:	e9c0 3300 	strd	r3, r3, [r0]
   bad74:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bad76:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bad78:	6849      	ldr	r1, [r1, #4]
   bad7a:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bad7c:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bad7e:	dd13      	ble.n	bada8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   bad80:	f7ff ffdb 	bl	bad3a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bad84:	b180      	cbz	r0, bada8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bad86:	e9d5 6300 	ldrd	r6, r3, [r5]
   bad8a:	6827      	ldr	r7, [r4, #0]
   bad8c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   bad90:	45b0      	cmp	r8, r6
   bad92:	d007      	beq.n	bada4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   bad94:	b11f      	cbz	r7, bad9e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   bad96:	4631      	mov	r1, r6
   bad98:	4638      	mov	r0, r7
   bad9a:	f7ff f822 	bl	b9de2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   bad9e:	3608      	adds	r6, #8
   bada0:	3708      	adds	r7, #8
   bada2:	e7f5      	b.n	bad90 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   bada4:	686b      	ldr	r3, [r5, #4]
   bada6:	6063      	str	r3, [r4, #4]
}
   bada8:	4620      	mov	r0, r4
   badaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000badae <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   badae:	b537      	push	{r0, r1, r2, r4, r5, lr}
   badb0:	460d      	mov	r5, r1
   badb2:	4604      	mov	r4, r0
    WiringBleLock lk;
   badb4:	a801      	add	r0, sp, #4
   badb6:	f7fe fae3 	bl	b9380 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   badba:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   badbc:	4620      	mov	r0, r4
   badbe:	310c      	adds	r1, #12
   badc0:	f7ff ffd3 	bl	bad6a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   badc4:	a801      	add	r0, sp, #4
   badc6:	f7fe fae9 	bl	b939c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   badca:	4620      	mov	r0, r4
   badcc:	b003      	add	sp, #12
   badce:	bd30      	pop	{r4, r5, pc}

000badd0 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   badd0:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   badd2:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   badd4:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   badd6:	4605      	mov	r5, r0
   badd8:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   badda:	b933      	cbnz	r3, badea <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   baddc:	4608      	mov	r0, r1
   badde:	f7fe fa63 	bl	b92a8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   bade2:	b910      	cbnz	r0, badea <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   bade4:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   bade6:	2201      	movs	r2, #1
   bade8:	729a      	strb	r2, [r3, #10]
    return services();
   badea:	4628      	mov	r0, r5
   badec:	4621      	mov	r1, r4
   badee:	f7ff ffde 	bl	badae <_ZNK8particle13BlePeerDevice8servicesEv>
}
   badf2:	4628      	mov	r0, r5
   badf4:	bd38      	pop	{r3, r4, r5, pc}

000badf6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   badf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   badf8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   badfa:	6845      	ldr	r5, [r0, #4]
   badfc:	4668      	mov	r0, sp
   badfe:	f7fe fff0 	bl	b9de2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bae02:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bae06:	4299      	cmp	r1, r3
   bae08:	da10      	bge.n	bae2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bae0a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bae0c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bae0e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bae12:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bae16:	4629      	mov	r1, r5
   bae18:	f105 0008 	add.w	r0, r5, #8
   bae1c:	f7ff ff63 	bl	bace6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bae20:	b98d      	cbnz	r5, bae46 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bae22:	6863      	ldr	r3, [r4, #4]
   bae24:	3301      	adds	r3, #1
   bae26:	6063      	str	r3, [r4, #4]
    return true;
   bae28:	2601      	movs	r6, #1
   bae2a:	e006      	b.n	bae3a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bae2c:	3101      	adds	r1, #1
   bae2e:	4620      	mov	r0, r4
   bae30:	f7ff ff83 	bl	bad3a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bae34:	4606      	mov	r6, r0
   bae36:	2800      	cmp	r0, #0
   bae38:	d1e7      	bne.n	bae0a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   bae3a:	a801      	add	r0, sp, #4
   bae3c:	f7fe ffe5 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bae40:	4630      	mov	r0, r6
   bae42:	b002      	add	sp, #8
   bae44:	bd70      	pop	{r4, r5, r6, pc}
   bae46:	4669      	mov	r1, sp
   bae48:	4628      	mov	r0, r5
   bae4a:	f7fe ffca 	bl	b9de2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bae4e:	e7e8      	b.n	bae22 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bae50 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   bae50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   bae54:	f8df 90b8 	ldr.w	r9, [pc, #184]	; baf10 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   bae58:	f8df a0b8 	ldr.w	sl, [pc, #184]	; baf14 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   bae5c:	b093      	sub	sp, #76	; 0x4c
   bae5e:	4605      	mov	r5, r0
   bae60:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   bae62:	2700      	movs	r7, #0
   bae64:	682b      	ldr	r3, [r5, #0]
   bae66:	42bb      	cmp	r3, r7
   bae68:	d94e      	bls.n	baf08 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   bae6a:	a803      	add	r0, sp, #12
   bae6c:	f7fe fd9e 	bl	b99ac <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   bae70:	261c      	movs	r6, #28
   bae72:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   bae74:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   bae76:	437e      	muls	r6, r7
   bae78:	4432      	add	r2, r6
   bae7a:	f10d 0c14 	add.w	ip, sp, #20
   bae7e:	1d13      	adds	r3, r2, #4
   bae80:	46e3      	mov	fp, ip
   bae82:	3214      	adds	r2, #20
   bae84:	6818      	ldr	r0, [r3, #0]
   bae86:	6859      	ldr	r1, [r3, #4]
   bae88:	46e6      	mov	lr, ip
   bae8a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   bae8e:	3308      	adds	r3, #8
   bae90:	4293      	cmp	r3, r2
   bae92:	46f4      	mov	ip, lr
   bae94:	d1f6      	bne.n	bae84 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   bae96:	6818      	ldr	r0, [r3, #0]
   bae98:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   bae9c:	4659      	mov	r1, fp
   bae9e:	a80a      	add	r0, sp, #40	; 0x28
   baea0:	f7fe fac4 	bl	b942c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   baea4:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   baea8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   baeac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   baeae:	f8dc 3000 	ldr.w	r3, [ip]
   baeb2:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   baeb4:	686b      	ldr	r3, [r5, #4]
   baeb6:	9a03      	ldr	r2, [sp, #12]
   baeb8:	4433      	add	r3, r6
   baeba:	a903      	add	r1, sp, #12
   baebc:	8b1b      	ldrh	r3, [r3, #24]
   baebe:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   baec0:	686b      	ldr	r3, [r5, #4]
   baec2:	4433      	add	r3, r6
   baec4:	8b5b      	ldrh	r3, [r3, #26]
   baec6:	82d3      	strh	r3, [r2, #22]
        return services_;
   baec8:	f8d8 0000 	ldr.w	r0, [r8]
   baecc:	f100 040c 	add.w	r4, r0, #12
   baed0:	a80a      	add	r0, sp, #40	; 0x28
   baed2:	f7fe ff86 	bl	b9de2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   baed6:	4620      	mov	r0, r4
   baed8:	a90a      	add	r1, sp, #40	; 0x28
   baeda:	f7ff ff8c 	bl	badf6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   baede:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   baee0:	a80b      	add	r0, sp, #44	; 0x2c
   baee2:	f7fe ff92 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   baee6:	b954      	cbnz	r4, baefe <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   baee8:	2320      	movs	r3, #32
   baeea:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   baeee:	f8cd 9000 	str.w	r9, [sp]
   baef2:	4623      	mov	r3, r4
   baef4:	aa0a      	add	r2, sp, #40	; 0x28
   baef6:	4651      	mov	r1, sl
   baef8:	2032      	movs	r0, #50	; 0x32
   baefa:	f7fd fdc3 	bl	b8a84 <log_message>
   baefe:	a804      	add	r0, sp, #16
   baf00:	f7fe ff83 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   baf04:	3701      	adds	r7, #1
   baf06:	e7ad      	b.n	bae64 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   baf08:	b013      	add	sp, #76	; 0x4c
   baf0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   baf0e:	bf00      	nop
   baf10:	000c095d 	.word	0x000c095d
   baf14:	000c085f 	.word	0x000c085f

000baf18 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   baf18:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   baf1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baf1c:	4604      	mov	r4, r0
   baf1e:	460d      	mov	r5, r1
   baf20:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   baf22:	d914      	bls.n	baf4e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   baf24:	4290      	cmp	r0, r2
   baf26:	d213      	bcs.n	baf50 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   baf28:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   baf2c:	1a75      	subs	r5, r6, r1
   baf2e:	f1a1 0708 	sub.w	r7, r1, #8
   baf32:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   baf34:	42b7      	cmp	r7, r6
   baf36:	d018      	beq.n	baf6a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   baf38:	b11c      	cbz	r4, baf42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   baf3a:	4631      	mov	r1, r6
   baf3c:	4620      	mov	r0, r4
   baf3e:	f7fe ff42 	bl	b9dc6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   baf42:	1d30      	adds	r0, r6, #4
   baf44:	f7fe ff61 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   baf48:	3e08      	subs	r6, #8
   baf4a:	3c08      	subs	r4, #8
   baf4c:	e7f2      	b.n	baf34 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   baf4e:	d00c      	beq.n	baf6a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   baf50:	42b5      	cmp	r5, r6
   baf52:	d00a      	beq.n	baf6a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   baf54:	b11c      	cbz	r4, baf5e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   baf56:	4629      	mov	r1, r5
   baf58:	4620      	mov	r0, r4
   baf5a:	f7fe ff34 	bl	b9dc6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   baf5e:	1d28      	adds	r0, r5, #4
   baf60:	f7fe ff53 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   baf64:	3508      	adds	r5, #8
   baf66:	3408      	adds	r4, #8
   baf68:	e7f2      	b.n	baf50 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   baf6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000baf6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   baf6c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   baf6e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   baf70:	4605      	mov	r5, r0
        if (n > 0) {
   baf72:	dd11      	ble.n	baf98 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   baf74:	00f0      	lsls	r0, r6, #3
   baf76:	f7fd fe61 	bl	b8c3c <malloc>
            if (!d) {
   baf7a:	4604      	mov	r4, r0
   baf7c:	b158      	cbz	r0, baf96 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   baf7e:	e9d5 1200 	ldrd	r1, r2, [r5]
   baf82:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   baf86:	f7ff ffc7 	bl	baf18 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   baf8a:	6828      	ldr	r0, [r5, #0]
   baf8c:	f7fd fe5e 	bl	b8c4c <free>
        data_ = d;
   baf90:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   baf92:	60ae      	str	r6, [r5, #8]
        return true;
   baf94:	2001      	movs	r0, #1
    }
   baf96:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   baf98:	2400      	movs	r4, #0
   baf9a:	e7f6      	b.n	baf8a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000baf9c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   baf9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   bafa0:	2300      	movs	r3, #0
   bafa2:	e9c0 3300 	strd	r3, r3, [r0]
   bafa6:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bafa8:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bafaa:	6849      	ldr	r1, [r1, #4]
   bafac:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bafae:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bafb0:	dd13      	ble.n	bafda <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   bafb2:	f7ff ffdb 	bl	baf6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bafb6:	b180      	cbz	r0, bafda <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bafb8:	e9d5 6300 	ldrd	r6, r3, [r5]
   bafbc:	6827      	ldr	r7, [r4, #0]
   bafbe:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   bafc2:	45b0      	cmp	r8, r6
   bafc4:	d007      	beq.n	bafd6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   bafc6:	b11f      	cbz	r7, bafd0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   bafc8:	4631      	mov	r1, r6
   bafca:	4638      	mov	r0, r7
   bafcc:	f7fe fefb 	bl	b9dc6 <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   bafd0:	3608      	adds	r6, #8
   bafd2:	3708      	adds	r7, #8
   bafd4:	e7f5      	b.n	bafc2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   bafd6:	686b      	ldr	r3, [r5, #4]
   bafd8:	6063      	str	r3, [r4, #4]
}
   bafda:	4620      	mov	r0, r4
   bafdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bafe0 <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   bafe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bafe2:	460d      	mov	r5, r1
   bafe4:	4604      	mov	r4, r0
    WiringBleLock lk;
   bafe6:	a801      	add	r0, sp, #4
   bafe8:	f7fe f9ca 	bl	b9380 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   bafec:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   bafee:	4620      	mov	r0, r4
   baff0:	3118      	adds	r1, #24
   baff2:	f7ff ffd3 	bl	baf9c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   baff6:	a801      	add	r0, sp, #4
   baff8:	f7fe f9d0 	bl	b939c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   baffc:	4620      	mov	r0, r4
   baffe:	b003      	add	sp, #12
   bb000:	bd30      	pop	{r4, r5, pc}

000bb002 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb002:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb004:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bb006:	6845      	ldr	r5, [r0, #4]
   bb008:	4668      	mov	r0, sp
   bb00a:	f7fe fedc 	bl	b9dc6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb00e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bb012:	4299      	cmp	r1, r3
   bb014:	da10      	bge.n	bb038 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bb016:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bb018:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb01a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bb01e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bb022:	4629      	mov	r1, r5
   bb024:	f105 0008 	add.w	r0, r5, #8
   bb028:	f7ff ff76 	bl	baf18 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bb02c:	b98d      	cbnz	r5, bb052 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bb02e:	6863      	ldr	r3, [r4, #4]
   bb030:	3301      	adds	r3, #1
   bb032:	6063      	str	r3, [r4, #4]
    return true;
   bb034:	2601      	movs	r6, #1
   bb036:	e006      	b.n	bb046 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb038:	3101      	adds	r1, #1
   bb03a:	4620      	mov	r0, r4
   bb03c:	f7ff ff96 	bl	baf6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb040:	4606      	mov	r6, r0
   bb042:	2800      	cmp	r0, #0
   bb044:	d1e7      	bne.n	bb016 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bb046:	a801      	add	r0, sp, #4
   bb048:	f7fe fedf 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb04c:	4630      	mov	r0, r6
   bb04e:	b002      	add	sp, #8
   bb050:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bb052:	4669      	mov	r1, sp
   bb054:	4628      	mov	r0, r5
   bb056:	f7fe feb6 	bl	b9dc6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb05a:	e7e8      	b.n	bb02e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bb05c <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   bb05c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb05e:	b085      	sub	sp, #20
   bb060:	4605      	mov	r5, r0
    WiringBleLock lk;
   bb062:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   bb064:	460c      	mov	r4, r1
   bb066:	4617      	mov	r7, r2
    WiringBleLock lk;
   bb068:	f7fe f98a 	bl	b9380 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   bb06c:	2300      	movs	r3, #0
   bb06e:	e9c5 3300 	strd	r3, r3, [r5]
   bb072:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   bb074:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   bb076:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   bb07a:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   bb07e:	42b4      	cmp	r4, r6
   bb080:	d011      	beq.n	bb0a6 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   bb082:	6838      	ldr	r0, [r7, #0]
   bb084:	4621      	mov	r1, r4
   bb086:	f7fe fbab 	bl	b97e0 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   bb08a:	b150      	cbz	r0, bb0a2 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   bb08c:	4621      	mov	r1, r4
   bb08e:	a802      	add	r0, sp, #8
   bb090:	f7fe fe99 	bl	b9dc6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb094:	a902      	add	r1, sp, #8
   bb096:	4628      	mov	r0, r5
   bb098:	f7ff ffb3 	bl	bb002 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   bb09c:	a803      	add	r0, sp, #12
   bb09e:	f7fe feb4 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   bb0a2:	3408      	adds	r4, #8
   bb0a4:	e7eb      	b.n	bb07e <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   bb0a6:	a801      	add	r0, sp, #4
   bb0a8:	f7fe f978 	bl	b939c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bb0ac:	4628      	mov	r0, r5
   bb0ae:	b005      	add	sp, #20
   bb0b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bb0b4 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   bb0b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   bb0b8:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bb0ba:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   bb0bc:	b091      	sub	sp, #68	; 0x44
   bb0be:	4606      	mov	r6, r0
   bb0c0:	460f      	mov	r7, r1
   bb0c2:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   bb0c4:	b933      	cbnz	r3, bb0d4 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   bb0c6:	e9c0 3300 	strd	r3, r3, [r0]
   bb0ca:	6083      	str	r3, [r0, #8]
}
   bb0cc:	4630      	mov	r0, r6
   bb0ce:	b011      	add	sp, #68	; 0x44
   bb0d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   bb0d4:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   bb0d6:	7e0d      	ldrb	r5, [r1, #24]
   bb0d8:	2d00      	cmp	r5, #0
   bb0da:	d158      	bne.n	bb18e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   bb0dc:	2320      	movs	r3, #32
   bb0de:	462a      	mov	r2, r5
   bb0e0:	a803      	add	r0, sp, #12
   bb0e2:	e9cd 3508 	strd	r3, r5, [sp, #32]
   bb0e6:	f7fe fae8 	bl	b96ba <_ZNK8particle7BleUuid8toStringEb>
   bb0ea:	9b03      	ldr	r3, [sp, #12]
   bb0ec:	9301      	str	r3, [sp, #4]
   bb0ee:	4b2b      	ldr	r3, [pc, #172]	; (bb19c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   bb0f0:	492b      	ldr	r1, [pc, #172]	; (bb1a0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   bb0f2:	9300      	str	r3, [sp, #0]
   bb0f4:	aa08      	add	r2, sp, #32
   bb0f6:	462b      	mov	r3, r5
   bb0f8:	2001      	movs	r0, #1
   bb0fa:	f7fd fcc3 	bl	b8a84 <log_message>
   bb0fe:	a803      	add	r0, sp, #12
   bb100:	f7fd ff1a 	bl	b8f38 <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   bb104:	231c      	movs	r3, #28
   bb106:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   bb10a:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   bb10e:	8a9a      	ldrh	r2, [r3, #20]
   bb110:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   bb114:	8adb      	ldrh	r3, [r3, #22]
   bb116:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   bb11a:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   bb11c:	4a21      	ldr	r2, [pc, #132]	; (bb1a4 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   bb11e:	8818      	ldrh	r0, [r3, #0]
   bb120:	9500      	str	r5, [sp, #0]
   bb122:	a908      	add	r1, sp, #32
   bb124:	f7fd fab2 	bl	b868c <hal_ble_gatt_client_discover_characteristics>
   bb128:	2800      	cmp	r0, #0
   bb12a:	db30      	blt.n	bb18e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   bb12c:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   bb12e:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   bb132:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   bb136:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   bb138:	f1a4 0308 	sub.w	r3, r4, #8
   bb13c:	4599      	cmp	r9, r3
   bb13e:	d022      	beq.n	bb186 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   bb140:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bb144:	89db      	ldrh	r3, [r3, #14]
   bb146:	2b00      	cmp	r3, #0
   bb148:	d0f5      	beq.n	bb136 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   bb14a:	2210      	movs	r2, #16
   bb14c:	2100      	movs	r1, #0
   bb14e:	eb0d 0002 	add.w	r0, sp, r2
   bb152:	9503      	str	r5, [sp, #12]
   bb154:	f002 fa25 	bl	bd5a2 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   bb158:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bb15c:	89d9      	ldrh	r1, [r3, #14]
   bb15e:	683b      	ldr	r3, [r7, #0]
   bb160:	aa03      	add	r2, sp, #12
   bb162:	8818      	ldrh	r0, [r3, #0]
   bb164:	9500      	str	r5, [sp, #0]
   bb166:	2313      	movs	r3, #19
   bb168:	f7fd faae 	bl	b86c8 <hal_ble_gatt_client_read>
                if (len > 0) {
   bb16c:	2800      	cmp	r0, #0
   bb16e:	d0e2      	beq.n	bb136 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   bb170:	ab10      	add	r3, sp, #64	; 0x40
   bb172:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   bb174:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   bb176:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   bb17a:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   bb17e:	303c      	adds	r0, #60	; 0x3c
   bb180:	f7fd ff7b 	bl	b907a <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   bb184:	e7d7      	b.n	bb136 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   bb186:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   bb18a:	2201      	movs	r2, #1
   bb18c:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   bb18e:	4642      	mov	r2, r8
   bb190:	4639      	mov	r1, r7
   bb192:	4630      	mov	r0, r6
   bb194:	f7ff ff62 	bl	bb05c <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   bb198:	e798      	b.n	bb0cc <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   bb19a:	bf00      	nop
   bb19c:	000c0982 	.word	0x000c0982
   bb1a0:	000c085f 	.word	0x000c085f
   bb1a4:	000bb34d 	.word	0x000bb34d

000bb1a8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   bb1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   bb1aa:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bb1ac:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   bb1ae:	b085      	sub	sp, #20
   bb1b0:	4606      	mov	r6, r0
   bb1b2:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   bb1b4:	b92b      	cbnz	r3, bb1c2 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   bb1b6:	a801      	add	r0, sp, #4
   bb1b8:	f7ff fe0a 	bl	badd0 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   bb1bc:	a801      	add	r0, sp, #4
   bb1be:	f7fe fe33 	bl	b9e28 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   bb1c2:	682b      	ldr	r3, [r5, #0]
   bb1c4:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   bb1c8:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   bb1cc:	42bc      	cmp	r4, r7
   bb1ce:	d009      	beq.n	bb1e4 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   bb1d0:	4622      	mov	r2, r4
   bb1d2:	4629      	mov	r1, r5
   bb1d4:	a801      	add	r0, sp, #4
   bb1d6:	f7ff ff6d 	bl	bb0b4 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   bb1da:	a801      	add	r0, sp, #4
   bb1dc:	f7fe fe36 	bl	b9e4c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   bb1e0:	3408      	adds	r4, #8
   bb1e2:	e7f3      	b.n	bb1cc <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   bb1e4:	4630      	mov	r0, r6
   bb1e6:	4629      	mov	r1, r5
   bb1e8:	f7ff fefa 	bl	bafe0 <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   bb1ec:	4630      	mov	r0, r6
   bb1ee:	b005      	add	sp, #20
   bb1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bb1f4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bb1f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb1f8:	4605      	mov	r5, r0
   bb1fa:	b093      	sub	sp, #76	; 0x4c
    return address_;
   bb1fc:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   bb1fe:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bb200:	460f      	mov	r7, r1
    return address_;
   bb202:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bb204:	4698      	mov	r8, r3
    return address_;
   bb206:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   bb208:	4b41      	ldr	r3, [pc, #260]	; (bb310 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   bb20a:	9304      	str	r3, [sp, #16]
    return address_;
   bb20c:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   bb20e:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   bb210:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   bb214:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   bb218:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   bb21c:	f7fe fc92 	bl	b9b44 <_ZN8particle14BleLocalDevice11getInstanceEv>
   bb220:	4b3c      	ldr	r3, [pc, #240]	; (bb314 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   bb222:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   bb224:	f7fe fc8e 	bl	b9b44 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   bb228:	6829      	ldr	r1, [r5, #0]
   bb22a:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   bb22c:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   bb22e:	464a      	mov	r2, r9
   bb230:	a804      	add	r0, sp, #16
   bb232:	f7fd fa53 	bl	b86dc <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   bb236:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   bb238:	4604      	mov	r4, r0
   bb23a:	b138      	cbz	r0, bb24c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   bb23c:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bb23e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bb242:	801a      	strh	r2, [r3, #0]
}
   bb244:	4620      	mov	r0, r4
   bb246:	b013      	add	sp, #76	; 0x4c
   bb248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   bb24c:	4639      	mov	r1, r7
   bb24e:	4628      	mov	r0, r5
   bb250:	f7fe fbfc 	bl	b9a4c <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
   bb254:	a803      	add	r0, sp, #12
   bb256:	f7fe f893 	bl	b9380 <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   bb25a:	f7fe fc73 	bl	b9b44 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   bb25e:	6807      	ldr	r7, [r0, #0]
   bb260:	4629      	mov	r1, r5
   bb262:	3718      	adds	r7, #24
   bb264:	4630      	mov	r0, r6
   bb266:	f7fe fdc6 	bl	b9df6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   bb26a:	4631      	mov	r1, r6
   bb26c:	4638      	mov	r0, r7
   bb26e:	f7ff f92b 	bl	ba4c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bb272:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   bb274:	a80b      	add	r0, sp, #44	; 0x2c
   bb276:	f7fe fdc8 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb27a:	f04f 0920 	mov.w	r9, #32
   bb27e:	bb1f      	cbnz	r7, bb2c8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   bb280:	4632      	mov	r2, r6
   bb282:	4b25      	ldr	r3, [pc, #148]	; (bb318 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bb284:	4e25      	ldr	r6, [pc, #148]	; (bb31c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   bb286:	4926      	ldr	r1, [pc, #152]	; (bb320 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   bb288:	9300      	str	r3, [sp, #0]
   bb28a:	2032      	movs	r0, #50	; 0x32
   bb28c:	4623      	mov	r3, r4
   bb28e:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   bb292:	f7fd fbf7 	bl	b8a84 <log_message>
   bb296:	6830      	ldr	r0, [r6, #0]
   bb298:	f7fd faac 	bl	b87f4 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bb29c:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   bb29e:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bb2a2:	4621      	mov	r1, r4
   bb2a4:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   bb2a6:	4c1f      	ldr	r4, [pc, #124]	; (bb324 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bb2a8:	f7fd f9d2 	bl	b8650 <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   bb2ac:	6830      	ldr	r0, [r6, #0]
   bb2ae:	f7fd fa99 	bl	b87e4 <os_mutex_recursive_lock>
        locked_ = true;
   bb2b2:	2301      	movs	r3, #1
   bb2b4:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   bb2b8:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bb2ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bb2be:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   bb2c0:	a803      	add	r0, sp, #12
   bb2c2:	f7fe f86b 	bl	b939c <_ZN8particle3ble13WiringBleLockD1Ev>
   bb2c6:	e7bd      	b.n	bb244 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   bb2c8:	a803      	add	r0, sp, #12
   bb2ca:	f7fe f867 	bl	b939c <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   bb2ce:	4b16      	ldr	r3, [pc, #88]	; (bb328 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   bb2d0:	9300      	str	r3, [sp, #0]
   bb2d2:	4913      	ldr	r1, [pc, #76]	; (bb320 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   bb2d4:	4623      	mov	r3, r4
   bb2d6:	4632      	mov	r2, r6
   bb2d8:	2001      	movs	r0, #1
   bb2da:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   bb2de:	f7fd fbd1 	bl	b8a84 <log_message>
    if (automatic) {
   bb2e2:	f1b8 0f00 	cmp.w	r8, #0
   bb2e6:	d0ad      	beq.n	bb244 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   bb2e8:	4629      	mov	r1, r5
   bb2ea:	4630      	mov	r0, r6
   bb2ec:	f7ff ff5c 	bl	bb1a8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   bb2f0:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   bb2f4:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   bb2f8:	42bd      	cmp	r5, r7
   bb2fa:	d005      	beq.n	bb308 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   bb2fc:	4628      	mov	r0, r5
   bb2fe:	2101      	movs	r1, #1
   bb300:	f7fe fb1a 	bl	b9938 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   bb304:	3508      	adds	r5, #8
   bb306:	e7f7      	b.n	bb2f8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   bb308:	4630      	mov	r0, r6
   bb30a:	f7fe fd9f 	bl	b9e4c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bb30e:	e799      	b.n	bb244 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   bb310:	00180003 	.word	0x00180003
   bb314:	000ba581 	.word	0x000ba581
   bb318:	000c09b4 	.word	0x000c09b4
   bb31c:	2003e670 	.word	0x2003e670
   bb320:	000c085f 	.word	0x000c085f
   bb324:	fffffefc 	.word	0xfffffefc
   bb328:	000c09d0 	.word	0x000c09d0

000bb32c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   bb32c:	b513      	push	{r0, r1, r4, lr}
   bb32e:	4604      	mov	r4, r0
   bb330:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   bb334:	f7fe fb56 	bl	b99e4 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   bb338:	9b00      	ldr	r3, [sp, #0]
   bb33a:	9901      	ldr	r1, [sp, #4]
   bb33c:	2200      	movs	r2, #0
   bb33e:	4620      	mov	r0, r4
   bb340:	f7ff ff58 	bl	bb1f4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}
   bb344:	4620      	mov	r0, r4
   bb346:	b002      	add	sp, #8
   bb348:	bd10      	pop	{r4, pc}
	...

000bb34c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bb34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   bb350:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bb352:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   bb354:	2600      	movs	r6, #0
   bb356:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   bb35a:	4b66      	ldr	r3, [pc, #408]	; (bb4f4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   bb35c:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bb35e:	4605      	mov	r5, r0
   bb360:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   bb362:	4633      	mov	r3, r6
   bb364:	4964      	ldr	r1, [pc, #400]	; (bb4f8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   bb366:	f8df 9194 	ldr.w	r9, [pc, #404]	; bb4fc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   bb36a:	f8df 818c 	ldr.w	r8, [pc, #396]	; bb4f8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bb36e:	f8df a190 	ldr.w	sl, [pc, #400]	; bb500 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   bb372:	aa0c      	add	r2, sp, #48	; 0x30
   bb374:	2001      	movs	r0, #1
   bb376:	f7fd fb85 	bl	b8a84 <log_message>
        for (size_t i = 0; i < event->count; i++) {
   bb37a:	682b      	ldr	r3, [r5, #0]
   bb37c:	42b3      	cmp	r3, r6
   bb37e:	f240 80b5 	bls.w	bb4ec <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   bb382:	a803      	add	r0, sp, #12
   bb384:	f7fe fa52 	bl	b982c <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   bb388:	a805      	add	r0, sp, #20
   bb38a:	f7fe fb0f 	bl	b99ac <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   bb38e:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   bb392:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   bb394:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   bb396:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   bb39a:	445b      	add	r3, fp
        this->size = halHandles.size;
   bb39c:	8bd9      	ldrh	r1, [r3, #30]
   bb39e:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   bb3a0:	8c19      	ldrh	r1, [r3, #32]
   bb3a2:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   bb3a4:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   bb3a6:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   bb3a8:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   bb3aa:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   bb3ac:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   bb3ae:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   bb3b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   bb3b2:	8253      	strh	r3, [r2, #18]
   bb3b4:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   bb3b8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   bb3bc:	429a      	cmp	r2, r3
   bb3be:	d07d      	beq.n	bb4bc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   bb3c0:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   bb3c2:	8ac4      	ldrh	r4, [r0, #22]
   bb3c4:	428c      	cmp	r4, r1
   bb3c6:	d377      	bcc.n	bb4b8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   bb3c8:	8a84      	ldrh	r4, [r0, #20]
   bb3ca:	428c      	cmp	r4, r1
   bb3cc:	d874      	bhi.n	bb4b8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bb3ce:	6859      	ldr	r1, [r3, #4]
   bb3d0:	9005      	str	r0, [sp, #20]
   bb3d2:	a806      	add	r0, sp, #24
   bb3d4:	f7fd ffae 	bl	b9334 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   bb3d8:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   bb3dc:	f8dd e00c 	ldr.w	lr, [sp, #12]
   bb3e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bb3e4:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   bb3e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb3ea:	f8dc 3000 	ldr.w	r3, [ip]
   bb3ee:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   bb3f0:	892b      	ldrh	r3, [r5, #8]
   bb3f2:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   bb3f6:	686b      	ldr	r3, [r5, #4]
   bb3f8:	9c03      	ldr	r4, [sp, #12]
   bb3fa:	445b      	add	r3, fp
   bb3fc:	7e5b      	ldrb	r3, [r3, #25]
   bb3fe:	f013 0f02 	tst.w	r3, #2
   bb402:	d16e      	bne.n	bb4e2 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   bb404:	686b      	ldr	r3, [r5, #4]
   bb406:	445b      	add	r3, fp
   bb408:	7e5b      	ldrb	r3, [r3, #25]
   bb40a:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   bb40c:	bf42      	ittt	mi
   bb40e:	7923      	ldrbmi	r3, [r4, #4]
   bb410:	f043 0304 	orrmi.w	r3, r3, #4
   bb414:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   bb416:	686b      	ldr	r3, [r5, #4]
   bb418:	445b      	add	r3, fp
   bb41a:	7e5b      	ldrb	r3, [r3, #25]
   bb41c:	0719      	lsls	r1, r3, #28
   bb41e:	bf42      	ittt	mi
   bb420:	7923      	ldrbmi	r3, [r4, #4]
   bb422:	f043 0308 	orrmi.w	r3, r3, #8
   bb426:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   bb428:	686b      	ldr	r3, [r5, #4]
   bb42a:	445b      	add	r3, fp
   bb42c:	7e5b      	ldrb	r3, [r3, #25]
   bb42e:	06da      	lsls	r2, r3, #27
   bb430:	bf42      	ittt	mi
   bb432:	7923      	ldrbmi	r3, [r4, #4]
   bb434:	f043 0310 	orrmi.w	r3, r3, #16
   bb438:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   bb43a:	686b      	ldr	r3, [r5, #4]
   bb43c:	445b      	add	r3, fp
   bb43e:	aa07      	add	r2, sp, #28
   bb440:	7e5b      	ldrb	r3, [r3, #25]
   bb442:	069b      	lsls	r3, r3, #26
   bb444:	bf42      	ittt	mi
   bb446:	7923      	ldrbmi	r3, [r4, #4]
   bb448:	f043 0320 	orrmi.w	r3, r3, #32
   bb44c:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   bb44e:	686b      	ldr	r3, [r5, #4]
   bb450:	449b      	add	fp, r3
   bb452:	f10b 0304 	add.w	r3, fp, #4
   bb456:	4696      	mov	lr, r2
   bb458:	f10b 0b14 	add.w	fp, fp, #20
   bb45c:	6818      	ldr	r0, [r3, #0]
   bb45e:	6859      	ldr	r1, [r3, #4]
   bb460:	4694      	mov	ip, r2
   bb462:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   bb466:	3308      	adds	r3, #8
   bb468:	455b      	cmp	r3, fp
   bb46a:	4662      	mov	r2, ip
   bb46c:	d1f6      	bne.n	bb45c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   bb46e:	6818      	ldr	r0, [r3, #0]
   bb470:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   bb474:	4671      	mov	r1, lr
   bb476:	a80c      	add	r0, sp, #48	; 0x30
   bb478:	f7fd ffd8 	bl	b942c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   bb47c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   bb480:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bb484:	3414      	adds	r4, #20
   bb486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb488:	f8dc 3000 	ldr.w	r3, [ip]
   bb48c:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   bb48e:	a903      	add	r1, sp, #12
   bb490:	a80c      	add	r0, sp, #48	; 0x30
   bb492:	f7fe fc98 	bl	b9dc6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb496:	a90c      	add	r1, sp, #48	; 0x30
   bb498:	f107 0018 	add.w	r0, r7, #24
   bb49c:	f7ff fdb1 	bl	bb002 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bb4a0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bb4a2:	a80d      	add	r0, sp, #52	; 0x34
   bb4a4:	f7fe fcb1 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb4a8:	b99c      	cbnz	r4, bb4d2 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bb4aa:	2320      	movs	r3, #32
   bb4ac:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   bb4b0:	f8cd a000 	str.w	sl, [sp]
   bb4b4:	4623      	mov	r3, r4
   bb4b6:	e007      	b.n	bb4c8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   bb4b8:	3308      	adds	r3, #8
   bb4ba:	e77f      	b.n	bb3bc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   bb4bc:	2420      	movs	r4, #32
   bb4be:	2300      	movs	r3, #0
   bb4c0:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   bb4c4:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bb4c8:	aa0c      	add	r2, sp, #48	; 0x30
   bb4ca:	4641      	mov	r1, r8
   bb4cc:	2032      	movs	r0, #50	; 0x32
   bb4ce:	f7fd fad9 	bl	b8a84 <log_message>
   bb4d2:	a806      	add	r0, sp, #24
   bb4d4:	f7fe fc99 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb4d8:	a804      	add	r0, sp, #16
   bb4da:	f7fe fc96 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   bb4de:	3601      	adds	r6, #1
   bb4e0:	e74b      	b.n	bb37a <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   bb4e2:	7923      	ldrb	r3, [r4, #4]
   bb4e4:	f043 0302 	orr.w	r3, r3, #2
   bb4e8:	7123      	strb	r3, [r4, #4]
   bb4ea:	e78b      	b.n	bb404 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   bb4ec:	b015      	add	sp, #84	; 0x54
   bb4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb4f2:	bf00      	nop
   bb4f4:	000c09ed 	.word	0x000c09ed
   bb4f8:	000c085f 	.word	0x000c085f
   bb4fc:	000c0a08 	.word	0x000c0a08
   bb500:	000c0a37 	.word	0x000c0a37

000bb504 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bb504:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bb506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb508:	4604      	mov	r4, r0
   bb50a:	460d      	mov	r5, r1
   bb50c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bb50e:	d914      	bls.n	bb53a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bb510:	4290      	cmp	r0, r2
   bb512:	d213      	bcs.n	bb53c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bb514:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   bb518:	1a75      	subs	r5, r6, r1
   bb51a:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   bb51e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bb520:	42b7      	cmp	r7, r6
   bb522:	d018      	beq.n	bb556 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bb524:	b11c      	cbz	r4, bb52e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bb526:	4631      	mov	r1, r6
   bb528:	4620      	mov	r0, r4
   bb52a:	f7fe feb5 	bl	ba298 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   bb52e:	4630      	mov	r0, r6
   bb530:	f7fe fb72 	bl	b9c18 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   bb534:	3e24      	subs	r6, #36	; 0x24
   bb536:	3c24      	subs	r4, #36	; 0x24
   bb538:	e7f2      	b.n	bb520 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bb53a:	d00c      	beq.n	bb556 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bb53c:	42b5      	cmp	r5, r6
   bb53e:	d00a      	beq.n	bb556 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bb540:	b11c      	cbz	r4, bb54a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bb542:	4629      	mov	r1, r5
   bb544:	4620      	mov	r0, r4
   bb546:	f7fe fea7 	bl	ba298 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   bb54a:	4628      	mov	r0, r5
   bb54c:	f7fe fb64 	bl	b9c18 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   bb550:	3524      	adds	r5, #36	; 0x24
   bb552:	3424      	adds	r4, #36	; 0x24
   bb554:	e7f2      	b.n	bb53c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bb556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb558 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bb558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   bb55a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bb55c:	4605      	mov	r5, r0
        if (n > 0) {
   bb55e:	dd13      	ble.n	bb588 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   bb560:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   bb562:	fb07 f006 	mul.w	r0, r7, r6
   bb566:	f7fd fb69 	bl	b8c3c <malloc>
            if (!d) {
   bb56a:	4604      	mov	r4, r0
   bb56c:	b158      	cbz	r0, bb586 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   bb56e:	e9d5 1200 	ldrd	r1, r2, [r5]
   bb572:	fb07 1202 	mla	r2, r7, r2, r1
   bb576:	f7ff ffc5 	bl	bb504 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bb57a:	6828      	ldr	r0, [r5, #0]
   bb57c:	f7fd fb66 	bl	b8c4c <free>
        data_ = d;
   bb580:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bb582:	60ae      	str	r6, [r5, #8]
        return true;
   bb584:	2001      	movs	r0, #1
    }
   bb586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   bb588:	2400      	movs	r4, #0
   bb58a:	e7f6      	b.n	bb57a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000bb58c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   bb58c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb590:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   bb592:	ad01      	add	r5, sp, #4
   bb594:	4606      	mov	r6, r0
   bb596:	4628      	mov	r0, r5
   bb598:	460c      	mov	r4, r1
   bb59a:	f7fd ff2c 	bl	b93f6 <_ZN8particle10BleAddressC1Ev>
   bb59e:	a803      	add	r0, sp, #12
   bb5a0:	f7fe ff55 	bl	ba44e <_ZN8particle18BleAdvertisingDataC1Ev>
   bb5a4:	a806      	add	r0, sp, #24
   bb5a6:	f7fe ff52 	bl	ba44e <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   bb5aa:	6930      	ldr	r0, [r6, #16]
   bb5ac:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   bb5ae:	89f2      	ldrh	r2, [r6, #14]
   bb5b0:	ab13      	add	r3, sp, #76	; 0x4c
   bb5b2:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   bb5b4:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   bb5b8:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   bb5ba:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   bb5bc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   bb5c0:	a806      	add	r0, sp, #24
   bb5c2:	f7fe feb8 	bl	ba336 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   bb5c6:	89b2      	ldrh	r2, [r6, #12]
   bb5c8:	6871      	ldr	r1, [r6, #4]
   bb5ca:	a803      	add	r0, sp, #12
   bb5cc:	f7fe feb3 	bl	ba336 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   bb5d0:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   bb5d4:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   bb5d6:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   bb5d8:	d003      	beq.n	bb5e2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   bb5da:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   bb5de:	429a      	cmp	r2, r3
   bb5e0:	db5c      	blt.n	bb69c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   bb5e2:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   bb5e6:	2b7f      	cmp	r3, #127	; 0x7f
   bb5e8:	d003      	beq.n	bb5f2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   bb5ea:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   bb5ee:	429a      	cmp	r2, r3
   bb5f0:	dc54      	bgt.n	bb69c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   bb5f2:	f104 0150 	add.w	r1, r4, #80	; 0x50
   bb5f6:	4638      	mov	r0, r7
   bb5f8:	f7fe fd16 	bl	ba028 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   bb5fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   bb5fe:	2b00      	cmp	r3, #0
   bb600:	dd52      	ble.n	bb6a8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   bb602:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   bb604:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   bb608:	45b1      	cmp	r9, r6
   bb60a:	d050      	beq.n	bb6ae <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   bb60c:	4630      	mov	r0, r6
   bb60e:	4629      	mov	r1, r5
   bb610:	f7fd fedd 	bl	b93ce <_ZNK8particle10BleAddresseqERKS0_>
   bb614:	3608      	adds	r6, #8
   bb616:	4680      	mov	r8, r0
   bb618:	2800      	cmp	r0, #0
   bb61a:	d0f5      	beq.n	bb608 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   bb61c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bb61e:	f7fd fb15 	bl	b8c4c <free>
        if (!delegator->filterByRssi(result) ||
   bb622:	f1b8 0f00 	cmp.w	r8, #0
   bb626:	d039      	beq.n	bb69c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   bb628:	4629      	mov	r1, r5
   bb62a:	4620      	mov	r0, r4
   bb62c:	f7fe fcbf 	bl	b9fae <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   bb630:	b3a0      	cbz	r0, bb69c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   bb632:	4629      	mov	r1, r5
   bb634:	4620      	mov	r0, r4
   bb636:	f7ff fa68 	bl	bab0a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   bb63a:	4606      	mov	r6, r0
   bb63c:	b370      	cbz	r0, bb69c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   bb63e:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   bb642:	4638      	mov	r0, r7
   bb644:	f7fe fd3b 	bl	ba0be <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   bb648:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb64a:	2b00      	cmp	r3, #0
   bb64c:	dd12      	ble.n	bb674 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   bb64e:	a806      	add	r0, sp, #24
   bb650:	f7fe f899 	bl	b9786 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   bb654:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   bb656:	a803      	add	r0, sp, #12
   bb658:	f7fe f895 	bl	b9786 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   bb65c:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   bb660:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   bb664:	429a      	cmp	r2, r3
   bb666:	d025      	beq.n	bb6b4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   bb668:	f833 1b02 	ldrh.w	r1, [r3], #2
   bb66c:	4588      	cmp	r8, r1
   bb66e:	d001      	beq.n	bb674 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   bb670:	4288      	cmp	r0, r1
   bb672:	d1f7      	bne.n	bb664 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   bb674:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bb676:	f7fd fae9 	bl	b8c4c <free>
              !delegator->filterByServiceUUID(result) ||
   bb67a:	b17e      	cbz	r6, bb69c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   bb67c:	4629      	mov	r1, r5
   bb67e:	4620      	mov	r0, r4
   bb680:	f7fe fd52 	bl	ba128 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   bb684:	b150      	cbz	r0, bb69c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   bb686:	6a23      	ldr	r3, [r4, #32]
   bb688:	b1b3      	cbz	r3, bb6b8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   bb68a:	6963      	ldr	r3, [r4, #20]
   bb68c:	9513      	str	r5, [sp, #76]	; 0x4c
   bb68e:	3301      	adds	r3, #1
   bb690:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bb692:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bb694:	4639      	mov	r1, r7
   bb696:	f104 0018 	add.w	r0, r4, #24
   bb69a:	4798      	blx	r3
            return;
   bb69c:	4628      	mov	r0, r5
   bb69e:	f7fe fabb 	bl	b9c18 <_ZN8particle13BleScanResultD1Ev>
    }
   bb6a2:	b01d      	add	sp, #116	; 0x74
   bb6a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   bb6a8:	f04f 0801 	mov.w	r8, #1
   bb6ac:	e7b6      	b.n	bb61c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   bb6ae:	f04f 0800 	mov.w	r8, #0
   bb6b2:	e7b3      	b.n	bb61c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   bb6b4:	2600      	movs	r6, #0
   bb6b6:	e7dd      	b.n	bb674 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   bb6b8:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   bb6bc:	f1b8 0f00 	cmp.w	r8, #0
   bb6c0:	d007      	beq.n	bb6d2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   bb6c2:	6963      	ldr	r3, [r4, #20]
   bb6c4:	3301      	adds	r3, #1
   bb6c6:	6163      	str	r3, [r4, #20]
   bb6c8:	4629      	mov	r1, r5
   bb6ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
   bb6cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bb6d0:	e7e3      	b.n	bb69a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   bb6d2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   bb6d6:	f1bc 0f00 	cmp.w	ip, #0
   bb6da:	d025      	beq.n	bb728 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   bb6dc:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bb6de:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   bb6e0:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bb6e2:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   bb6e4:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bb6e6:	d8d9      	bhi.n	bb69c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   bb6e8:	2224      	movs	r2, #36	; 0x24
   bb6ea:	4353      	muls	r3, r2
    address_ = addr.address_;
   bb6ec:	462a      	mov	r2, r5
   bb6ee:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   bb6f0:	3b24      	subs	r3, #36	; 0x24
   bb6f2:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   bb6f6:	f84c 0003 	str.w	r0, [ip, r3]
   bb6fa:	6071      	str	r1, [r6, #4]
class BleScanResult {
   bb6fc:	f106 0008 	add.w	r0, r6, #8
   bb700:	a903      	add	r1, sp, #12
   bb702:	f7fe fde0 	bl	ba2c6 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   bb706:	a906      	add	r1, sp, #24
   bb708:	f106 0014 	add.w	r0, r6, #20
   bb70c:	f7fe fddb 	bl	ba2c6 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   bb710:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   bb714:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   bb718:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   bb71c:	429a      	cmp	r2, r3
   bb71e:	d3bd      	bcc.n	bb69c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   bb720:	4640      	mov	r0, r8
   bb722:	f7fc ff8b 	bl	b863c <hal_ble_gap_stop_scan>
   bb726:	e7b9      	b.n	bb69c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   bb728:	e895 0003 	ldmia.w	r5, {r0, r1}
   bb72c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   bb730:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   bb734:	a903      	add	r1, sp, #12
   bb736:	a80c      	add	r0, sp, #48	; 0x30
   bb738:	f7fe fd91 	bl	ba25e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   bb73c:	a906      	add	r1, sp, #24
   bb73e:	a80f      	add	r0, sp, #60	; 0x3c
   bb740:	f7fe fd8d 	bl	ba25e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   bb744:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   bb748:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   bb74c:	4641      	mov	r1, r8
   bb74e:	4638      	mov	r0, r7
   bb750:	6866      	ldr	r6, [r4, #4]
   bb752:	f7fe fda1 	bl	ba298 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb756:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bb75a:	4299      	cmp	r1, r3
   bb75c:	da10      	bge.n	bb780 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   bb75e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bb760:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   bb762:	2224      	movs	r2, #36	; 0x24
   bb764:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   bb768:	f106 0024 	add.w	r0, r6, #36	; 0x24
   bb76c:	fb02 3201 	mla	r2, r2, r1, r3
   bb770:	4631      	mov	r1, r6
   bb772:	f7ff fec7 	bl	bb504 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bb776:	b986      	cbnz	r6, bb79a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   bb778:	6863      	ldr	r3, [r4, #4]
   bb77a:	3301      	adds	r3, #1
   bb77c:	6063      	str	r3, [r4, #4]
    return true;
   bb77e:	e005      	b.n	bb78c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb780:	3101      	adds	r1, #1
   bb782:	4620      	mov	r0, r4
   bb784:	f7ff fee8 	bl	bb558 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb788:	2800      	cmp	r0, #0
   bb78a:	d1e8      	bne.n	bb75e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   bb78c:	4638      	mov	r0, r7
   bb78e:	f7fe fa43 	bl	b9c18 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   bb792:	4640      	mov	r0, r8
   bb794:	f7fe fa40 	bl	b9c18 <_ZN8particle13BleScanResultD1Ev>
   bb798:	e780      	b.n	bb69c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   bb79a:	4639      	mov	r1, r7
   bb79c:	4630      	mov	r0, r6
   bb79e:	f7fe fd7b 	bl	ba298 <_ZN8particle13BleScanResultC1EOS0_>
   bb7a2:	e7e9      	b.n	bb778 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000bb7a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   bb7a4:	4802      	ldr	r0, [pc, #8]	; (bb7b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bb7a6:	2300      	movs	r3, #0
   bb7a8:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   bb7aa:	f7fd b813 	b.w	b87d4 <os_mutex_recursive_create>
   bb7ae:	bf00      	nop
   bb7b0:	2003e670 	.word	0x2003e670

000bb7b4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bb7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb7b6:	4606      	mov	r6, r0
   bb7b8:	460d      	mov	r5, r1
  size_t n = 0;
   bb7ba:	188f      	adds	r7, r1, r2
   bb7bc:	2400      	movs	r4, #0
  while (size--) {
   bb7be:	42bd      	cmp	r5, r7
   bb7c0:	d00c      	beq.n	bb7dc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bb7c2:	6833      	ldr	r3, [r6, #0]
   bb7c4:	f815 1b01 	ldrb.w	r1, [r5], #1
   bb7c8:	689b      	ldr	r3, [r3, #8]
   bb7ca:	4630      	mov	r0, r6
   bb7cc:	4798      	blx	r3
     if (chunk>=0)
   bb7ce:	1e03      	subs	r3, r0, #0
   bb7d0:	db01      	blt.n	bb7d6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bb7d2:	441c      	add	r4, r3
  while (size--) {
   bb7d4:	e7f3      	b.n	bb7be <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bb7d6:	2c00      	cmp	r4, #0
   bb7d8:	bf08      	it	eq
   bb7da:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bb7dc:	4620      	mov	r0, r4
   bb7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb7e0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bb7e0:	b508      	push	{r3, lr}
  return write(str);
   bb7e2:	f7fb fd99 	bl	b7318 <_ZN5Print5writeEPKc>
}
   bb7e6:	bd08      	pop	{r3, pc}

000bb7e8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bb7e8:	6803      	ldr	r3, [r0, #0]
   bb7ea:	689b      	ldr	r3, [r3, #8]
   bb7ec:	4718      	bx	r3

000bb7ee <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bb7ee:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bb7f0:	210d      	movs	r1, #13
{
   bb7f2:	4605      	mov	r5, r0
  size_t n = print('\r');
   bb7f4:	f7ff fff8 	bl	bb7e8 <_ZN5Print5printEc>
  n += print('\n');
   bb7f8:	210a      	movs	r1, #10
  size_t n = print('\r');
   bb7fa:	4604      	mov	r4, r0
  n += print('\n');
   bb7fc:	4628      	mov	r0, r5
   bb7fe:	f7ff fff3 	bl	bb7e8 <_ZN5Print5printEc>
  return n;
}
   bb802:	4420      	add	r0, r4
   bb804:	bd38      	pop	{r3, r4, r5, pc}

000bb806 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   bb806:	b538      	push	{r3, r4, r5, lr}
   bb808:	4605      	mov	r5, r0
  return write(str);
   bb80a:	f7fb fd85 	bl	b7318 <_ZN5Print5writeEPKc>
   bb80e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   bb810:	4628      	mov	r0, r5
   bb812:	f7ff ffec 	bl	bb7ee <_ZN5Print7printlnEv>
  return n;
}
   bb816:	4420      	add	r0, r4
   bb818:	bd38      	pop	{r3, r4, r5, pc}

000bb81a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bb81a:	b530      	push	{r4, r5, lr}
   bb81c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bb81e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bb820:	2a01      	cmp	r2, #1
  *str = '\0';
   bb822:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bb826:	bf98      	it	ls
   bb828:	220a      	movls	r2, #10
   bb82a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bb82c:	460d      	mov	r5, r1
   bb82e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bb832:	fb01 5312 	mls	r3, r1, r2, r5
   bb836:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bb83a:	2b09      	cmp	r3, #9
   bb83c:	bf94      	ite	ls
   bb83e:	3330      	addls	r3, #48	; 0x30
   bb840:	3337      	addhi	r3, #55	; 0x37
   bb842:	b2db      	uxtb	r3, r3
  } while(n);
   bb844:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bb846:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bb84a:	d9ef      	bls.n	bb82c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bb84c:	4621      	mov	r1, r4
   bb84e:	f7fb fd63 	bl	b7318 <_ZN5Print5writeEPKc>
}
   bb852:	b00b      	add	sp, #44	; 0x2c
   bb854:	bd30      	pop	{r4, r5, pc}

000bb856 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bb856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb85a:	b086      	sub	sp, #24
   bb85c:	af00      	add	r7, sp, #0
   bb85e:	4605      	mov	r5, r0
   bb860:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bb862:	1d38      	adds	r0, r7, #4
   bb864:	2114      	movs	r1, #20
{
   bb866:	4614      	mov	r4, r2
    va_copy(args2, args);
   bb868:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bb86a:	f7fd fa17 	bl	b8c9c <vsnprintf>

    if (n<bufsize)
   bb86e:	2813      	cmp	r0, #19
   bb870:	d80e      	bhi.n	bb890 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bb872:	1d39      	adds	r1, r7, #4
   bb874:	4628      	mov	r0, r5
   bb876:	f7fb fd4f 	bl	b7318 <_ZN5Print5writeEPKc>
   bb87a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bb87c:	b11e      	cbz	r6, bb886 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bb87e:	4628      	mov	r0, r5
   bb880:	f7ff ffb5 	bl	bb7ee <_ZN5Print7printlnEv>
   bb884:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bb886:	4620      	mov	r0, r4
   bb888:	3718      	adds	r7, #24
   bb88a:	46bd      	mov	sp, r7
   bb88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bb890:	f100 0308 	add.w	r3, r0, #8
   bb894:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bb898:	46e8      	mov	r8, sp
        char bigger[n+1];
   bb89a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bb89e:	4622      	mov	r2, r4
   bb8a0:	1c41      	adds	r1, r0, #1
   bb8a2:	683b      	ldr	r3, [r7, #0]
   bb8a4:	4668      	mov	r0, sp
   bb8a6:	f7fd f9f9 	bl	b8c9c <vsnprintf>
  return write(str);
   bb8aa:	4669      	mov	r1, sp
   bb8ac:	4628      	mov	r0, r5
   bb8ae:	f7fb fd33 	bl	b7318 <_ZN5Print5writeEPKc>
   bb8b2:	4604      	mov	r4, r0
   bb8b4:	46c5      	mov	sp, r8
   bb8b6:	e7e1      	b.n	bb87c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bb8b8 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   bb8b8:	b510      	push	{r4, lr}
   bb8ba:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bb8bc:	f7fc fe86 	bl	b85cc <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   bb8c0:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   bb8c2:	6823      	ldr	r3, [r4, #0]
   bb8c4:	4620      	mov	r0, r4
   bb8c6:	695b      	ldr	r3, [r3, #20]
   bb8c8:	4798      	blx	r3
    if (c >= 0) return c;
   bb8ca:	2800      	cmp	r0, #0
   bb8cc:	da08      	bge.n	bb8e0 <_ZN6Stream9timedReadEv+0x28>
   bb8ce:	f7fc fe7d 	bl	b85cc <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   bb8d2:	68e3      	ldr	r3, [r4, #12]
   bb8d4:	1ac0      	subs	r0, r0, r3
   bb8d6:	68a3      	ldr	r3, [r4, #8]
   bb8d8:	4298      	cmp	r0, r3
   bb8da:	d3f2      	bcc.n	bb8c2 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   bb8dc:	f04f 30ff 	mov.w	r0, #4294967295
}
   bb8e0:	bd10      	pop	{r4, pc}
	...

000bb8e4 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   bb8e4:	b570      	push	{r4, r5, r6, lr}
   bb8e6:	460d      	mov	r5, r1
  String ret;
   bb8e8:	4909      	ldr	r1, [pc, #36]	; (bb910 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   bb8ea:	4604      	mov	r4, r0
   bb8ec:	4616      	mov	r6, r2
  String ret;
   bb8ee:	f7fd fb6e 	bl	b8fce <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   bb8f2:	4628      	mov	r0, r5
   bb8f4:	f7ff ffe0 	bl	bb8b8 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   bb8f8:	2800      	cmp	r0, #0
   bb8fa:	db06      	blt.n	bb90a <_ZN6Stream15readStringUntilEc+0x26>
   bb8fc:	4286      	cmp	r6, r0
   bb8fe:	d004      	beq.n	bb90a <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   bb900:	b2c1      	uxtb	r1, r0
   bb902:	4620      	mov	r0, r4
   bb904:	f7fd fbe2 	bl	b90cc <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   bb908:	e7f3      	b.n	bb8f2 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   bb90a:	4620      	mov	r0, r4
   bb90c:	bd70      	pop	{r4, r5, r6, pc}
   bb90e:	bf00      	nop
   bb910:	000bfabb 	.word	0x000bfabb

000bb914 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   bb914:	4b01      	ldr	r3, [pc, #4]	; (bb91c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bb916:	4a02      	ldr	r2, [pc, #8]	; (bb920 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bb918:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bb91a:	4770      	bx	lr
   bb91c:	2003e678 	.word	0x2003e678
   bb920:	000c0ad6 	.word	0x000c0ad6

000bb924 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bb924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bb928:	4a15      	ldr	r2, [pc, #84]	; (bb980 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bb92a:	f8df 8060 	ldr.w	r8, [pc, #96]	; bb98c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bb92e:	e9d2 6300 	ldrd	r6, r3, [r2]
   bb932:	1980      	adds	r0, r0, r6
   bb934:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bb938:	4b12      	ldr	r3, [pc, #72]	; (bb984 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bb93a:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bb93e:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bb942:	1986      	adds	r6, r0, r6
   bb944:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bb948:	42bb      	cmp	r3, r7
   bb94a:	bf08      	it	eq
   bb94c:	42b2      	cmpeq	r2, r6
{
   bb94e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bb950:	d013      	beq.n	bb97a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bb952:	a903      	add	r1, sp, #12
   bb954:	4668      	mov	r0, sp
   bb956:	e9cd 6700 	strd	r6, r7, [sp]
   bb95a:	f7fd f9cf 	bl	b8cfc <localtime_r>
	calendar_time.tm_year += 1900;
   bb95e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb960:	4d09      	ldr	r5, [pc, #36]	; (bb988 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bb962:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb966:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bb968:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb96a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bb96c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bb96e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bb970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bb972:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb976:	6823      	ldr	r3, [r4, #0]
   bb978:	602b      	str	r3, [r5, #0]
    }
}
   bb97a:	b00c      	add	sp, #48	; 0x30
   bb97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb980:	2003e6b0 	.word	0x2003e6b0
   bb984:	2003e6a8 	.word	0x2003e6a8
   bb988:	2003e680 	.word	0x2003e680
   bb98c:	2003e6b8 	.word	0x2003e6b8

000bb990 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   bb990:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   bb992:	2000      	movs	r0, #0
   bb994:	f7fd f942 	bl	b8c1c <spark_sync_time_pending>
   bb998:	b128      	cbz	r0, bb9a6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bb99a:	f7fd f927 	bl	b8bec <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bb99e:	f080 0001 	eor.w	r0, r0, #1
   bb9a2:	b2c0      	uxtb	r0, r0
    }
   bb9a4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bb9a6:	2001      	movs	r0, #1
   bb9a8:	e7fc      	b.n	bb9a4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bb9ac <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   bb9ac:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bb9ae:	f7ff ffb9 	bl	bb924 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   bb9b2:	4b02      	ldr	r3, [pc, #8]	; (bb9bc <_ZN9TimeClass5monthEx+0x10>)
   bb9b4:	6918      	ldr	r0, [r3, #16]
}
   bb9b6:	3001      	adds	r0, #1
   bb9b8:	bd08      	pop	{r3, pc}
   bb9ba:	bf00      	nop
   bb9bc:	2003e680 	.word	0x2003e680

000bb9c0 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   bb9c0:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bb9c2:	2000      	movs	r0, #0
   bb9c4:	f7fc fe0a 	bl	b85dc <hal_rtc_time_is_valid>
    if (rtcstate)
   bb9c8:	4604      	mov	r4, r0
   bb9ca:	b9a0      	cbnz	r0, bb9f6 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bb9cc:	f7fd f862 	bl	b8a94 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bb9d0:	2801      	cmp	r0, #1
   bb9d2:	d110      	bne.n	bb9f6 <_ZN9TimeClass7isValidEv+0x36>
   bb9d4:	4620      	mov	r0, r4
   bb9d6:	f7fd f885 	bl	b8ae4 <system_thread_get_state>
   bb9da:	b960      	cbnz	r0, bb9f6 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bb9dc:	f7ff ffd8 	bl	bb990 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bb9e0:	b910      	cbnz	r0, bb9e8 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bb9e2:	f7fd f8fb 	bl	b8bdc <spark_process>
        while (_while() && !_condition()) {
   bb9e6:	e7f9      	b.n	bb9dc <_ZN9TimeClass7isValidEv+0x1c>
   bb9e8:	f7ff ffd2 	bl	bb990 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bb9ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bb9f0:	2000      	movs	r0, #0
   bb9f2:	f7fc bdf3 	b.w	b85dc <hal_rtc_time_is_valid>
}
   bb9f6:	4620      	mov	r0, r4
   bb9f8:	bd10      	pop	{r4, pc}

000bb9fa <_ZN9TimeClass3nowEv>:
{
   bb9fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bb9fc:	f7ff ffe0 	bl	bb9c0 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bba00:	2210      	movs	r2, #16
   bba02:	2100      	movs	r1, #0
   bba04:	4668      	mov	r0, sp
   bba06:	f001 fdcc 	bl	bd5a2 <memset>
    hal_rtc_get_time(&tv, nullptr);
   bba0a:	2100      	movs	r1, #0
   bba0c:	4668      	mov	r0, sp
   bba0e:	f7fc fded 	bl	b85ec <hal_rtc_get_time>
}
   bba12:	9800      	ldr	r0, [sp, #0]
   bba14:	b005      	add	sp, #20
   bba16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bba1c <_ZN9TimeClass4hourEv>:
{
   bba1c:	b508      	push	{r3, lr}
	return hour(now());
   bba1e:	f7ff ffec 	bl	bb9fa <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bba22:	17c1      	asrs	r1, r0, #31
   bba24:	f7ff ff7e 	bl	bb924 <_ZL22Refresh_UnixTime_Cachex>
}
   bba28:	4b01      	ldr	r3, [pc, #4]	; (bba30 <_ZN9TimeClass4hourEv+0x14>)
   bba2a:	6898      	ldr	r0, [r3, #8]
   bba2c:	bd08      	pop	{r3, pc}
   bba2e:	bf00      	nop
   bba30:	2003e680 	.word	0x2003e680

000bba34 <_ZN9TimeClass6minuteEv>:
{
   bba34:	b508      	push	{r3, lr}
	return minute(now());
   bba36:	f7ff ffe0 	bl	bb9fa <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bba3a:	17c1      	asrs	r1, r0, #31
   bba3c:	f7ff ff72 	bl	bb924 <_ZL22Refresh_UnixTime_Cachex>
}
   bba40:	4b01      	ldr	r3, [pc, #4]	; (bba48 <_ZN9TimeClass6minuteEv+0x14>)
   bba42:	6858      	ldr	r0, [r3, #4]
   bba44:	bd08      	pop	{r3, pc}
   bba46:	bf00      	nop
   bba48:	2003e680 	.word	0x2003e680

000bba4c <_ZN9TimeClass6secondEv>:
{
   bba4c:	b508      	push	{r3, lr}
	return second(now());
   bba4e:	f7ff ffd4 	bl	bb9fa <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bba52:	17c1      	asrs	r1, r0, #31
   bba54:	f7ff ff66 	bl	bb924 <_ZL22Refresh_UnixTime_Cachex>
}
   bba58:	4b01      	ldr	r3, [pc, #4]	; (bba60 <_ZN9TimeClass6secondEv+0x14>)
   bba5a:	6818      	ldr	r0, [r3, #0]
   bba5c:	bd08      	pop	{r3, pc}
   bba5e:	bf00      	nop
   bba60:	2003e680 	.word	0x2003e680

000bba64 <_ZN9TimeClass3dayEv>:
{
   bba64:	b508      	push	{r3, lr}
	return day(now());
   bba66:	f7ff ffc8 	bl	bb9fa <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bba6a:	17c1      	asrs	r1, r0, #31
   bba6c:	f7ff ff5a 	bl	bb924 <_ZL22Refresh_UnixTime_Cachex>
}
   bba70:	4b01      	ldr	r3, [pc, #4]	; (bba78 <_ZN9TimeClass3dayEv+0x14>)
   bba72:	68d8      	ldr	r0, [r3, #12]
   bba74:	bd08      	pop	{r3, pc}
   bba76:	bf00      	nop
   bba78:	2003e680 	.word	0x2003e680

000bba7c <_ZN9TimeClass5monthEv>:
{
   bba7c:	b508      	push	{r3, lr}
	return month(now());
   bba7e:	f7ff ffbc 	bl	bb9fa <_ZN9TimeClass3nowEv>
}
   bba82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   bba86:	17c1      	asrs	r1, r0, #31
   bba88:	f7ff bf90 	b.w	bb9ac <_ZN9TimeClass5monthEx>

000bba8c <_ZN9TimeClass4yearEv>:
{
   bba8c:	b508      	push	{r3, lr}
	return year(now());
   bba8e:	f7ff ffb4 	bl	bb9fa <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bba92:	17c1      	asrs	r1, r0, #31
   bba94:	f7ff ff46 	bl	bb924 <_ZL22Refresh_UnixTime_Cachex>
}
   bba98:	4b01      	ldr	r3, [pc, #4]	; (bbaa0 <_ZN9TimeClass4yearEv+0x14>)
   bba9a:	6958      	ldr	r0, [r3, #20]
   bba9c:	bd08      	pop	{r3, pc}
   bba9e:	bf00      	nop
   bbaa0:	2003e680 	.word	0x2003e680

000bbaa4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bbaa4:	4b02      	ldr	r3, [pc, #8]	; (bbab0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bbaa6:	681a      	ldr	r2, [r3, #0]
   bbaa8:	4b02      	ldr	r3, [pc, #8]	; (bbab4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bbaaa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bbaac:	4770      	bx	lr
   bbaae:	bf00      	nop
   bbab0:	2003daa4 	.word	0x2003daa4
   bbab4:	2003e67c 	.word	0x2003e67c

000bbab8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bbab8:	2100      	movs	r1, #0
   bbaba:	f7fc bffb 	b.w	b8ab4 <system_delay_ms>
	...

000bbac0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bbac0:	4b01      	ldr	r3, [pc, #4]	; (bbac8 <_GLOBAL__sub_I_RGB+0x8>)
   bbac2:	2200      	movs	r2, #0
   bbac4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bbac6:	4770      	bx	lr
   bbac8:	2003e6c0 	.word	0x2003e6c0

000bbacc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bbacc:	4b01      	ldr	r3, [pc, #4]	; (bbad4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bbace:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bbad0:	4770      	bx	lr
   bbad2:	bf00      	nop
   bbad4:	2003daa8 	.word	0x2003daa8

000bbad8 <serialEventRun>:
{
   bbad8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bbada:	4b0b      	ldr	r3, [pc, #44]	; (bbb08 <serialEventRun+0x30>)
   bbadc:	b143      	cbz	r3, bbaf0 <serialEventRun+0x18>
   bbade:	f000 fbff 	bl	bc2e0 <_Z16_fetch_usbserialv>
   bbae2:	6803      	ldr	r3, [r0, #0]
   bbae4:	691b      	ldr	r3, [r3, #16]
   bbae6:	4798      	blx	r3
   bbae8:	2800      	cmp	r0, #0
   bbaea:	dd01      	ble.n	bbaf0 <serialEventRun+0x18>
        serialEvent();
   bbaec:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bbaf0:	4b06      	ldr	r3, [pc, #24]	; (bbb0c <serialEventRun+0x34>)
   bbaf2:	b143      	cbz	r3, bbb06 <serialEventRun+0x2e>
   bbaf4:	f000 fe8a 	bl	bc80c <_Z22__fetch_global_Serial1v>
   bbaf8:	6803      	ldr	r3, [r0, #0]
   bbafa:	691b      	ldr	r3, [r3, #16]
   bbafc:	4798      	blx	r3
   bbafe:	2800      	cmp	r0, #0
   bbb00:	dd01      	ble.n	bbb06 <serialEventRun+0x2e>
        serialEvent1();
   bbb02:	f3af 8000 	nop.w
}
   bbb06:	bd08      	pop	{r3, pc}
	...

000bbb10 <_post_loop>:
{
   bbb10:	b508      	push	{r3, lr}
	serialEventRun();
   bbb12:	f7ff ffe1 	bl	bbad8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bbb16:	f7fc fd59 	bl	b85cc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bbb1a:	4b01      	ldr	r3, [pc, #4]	; (bbb20 <_post_loop+0x10>)
   bbb1c:	6018      	str	r0, [r3, #0]
}
   bbb1e:	bd08      	pop	{r3, pc}
   bbb20:	2003e740 	.word	0x2003e740

000bbb24 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bbb24:	4805      	ldr	r0, [pc, #20]	; (bbb3c <_Z33system_initialize_user_backup_ramv+0x18>)
   bbb26:	4a06      	ldr	r2, [pc, #24]	; (bbb40 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bbb28:	4906      	ldr	r1, [pc, #24]	; (bbb44 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bbb2a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bbb2c:	1a12      	subs	r2, r2, r0
   bbb2e:	f001 fd10 	bl	bd552 <memcpy>
    __backup_sram_signature = signature;
   bbb32:	4b05      	ldr	r3, [pc, #20]	; (bbb48 <_Z33system_initialize_user_backup_ramv+0x24>)
   bbb34:	4a05      	ldr	r2, [pc, #20]	; (bbb4c <_Z33system_initialize_user_backup_ramv+0x28>)
   bbb36:	601a      	str	r2, [r3, #0]
}
   bbb38:	bd08      	pop	{r3, pc}
   bbb3a:	bf00      	nop
   bbb3c:	2003f400 	.word	0x2003f400
   bbb40:	2003f404 	.word	0x2003f404
   bbb44:	000c1184 	.word	0x000c1184
   bbb48:	2003f400 	.word	0x2003f400
   bbb4c:	9a271c1e 	.word	0x9a271c1e

000bbb50 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bbb50:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bbb52:	2300      	movs	r3, #0
   bbb54:	9300      	str	r3, [sp, #0]
   bbb56:	461a      	mov	r2, r3
   bbb58:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bbb5c:	f7fc ffd4 	bl	b8b08 <system_ctrl_set_result>
}
   bbb60:	b003      	add	sp, #12
   bbb62:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bbb68 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bbb68:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bbb6a:	8843      	ldrh	r3, [r0, #2]
   bbb6c:	2b0a      	cmp	r3, #10
   bbb6e:	d008      	beq.n	bbb82 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bbb70:	2b50      	cmp	r3, #80	; 0x50
   bbb72:	d10b      	bne.n	bbb8c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bbb74:	4b09      	ldr	r3, [pc, #36]	; (bbb9c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bbb76:	681b      	ldr	r3, [r3, #0]
   bbb78:	b14b      	cbz	r3, bbb8e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bbb7a:	b003      	add	sp, #12
   bbb7c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bbb80:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bbb82:	f7ff ffe5 	bl	bbb50 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bbb86:	b003      	add	sp, #12
   bbb88:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bbb8c:	2300      	movs	r3, #0
   bbb8e:	9300      	str	r3, [sp, #0]
   bbb90:	461a      	mov	r2, r3
   bbb92:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bbb96:	f7fc ffb7 	bl	b8b08 <system_ctrl_set_result>
}
   bbb9a:	e7f4      	b.n	bbb86 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bbb9c:	2003e6d4 	.word	0x2003e6d4

000bbba0 <module_user_init_hook>:
{
   bbba0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bbba2:	4812      	ldr	r0, [pc, #72]	; (bbbec <module_user_init_hook+0x4c>)
   bbba4:	2100      	movs	r1, #0
   bbba6:	f7fd f8a1 	bl	b8cec <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bbbaa:	4b11      	ldr	r3, [pc, #68]	; (bbbf0 <module_user_init_hook+0x50>)
   bbbac:	681a      	ldr	r2, [r3, #0]
   bbbae:	4b11      	ldr	r3, [pc, #68]	; (bbbf4 <module_user_init_hook+0x54>)
   bbbb0:	429a      	cmp	r2, r3
   bbbb2:	4b11      	ldr	r3, [pc, #68]	; (bbbf8 <module_user_init_hook+0x58>)
   bbbb4:	bf0c      	ite	eq
   bbbb6:	2201      	moveq	r2, #1
   bbbb8:	2200      	movne	r2, #0
   bbbba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bbbbc:	d001      	beq.n	bbbc2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bbbbe:	f7ff ffb1 	bl	bbb24 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bbbc2:	f7fc fceb 	bl	b859c <HAL_RNG_GetRandomNumber>
   bbbc6:	4604      	mov	r4, r0
    srand(seed);
   bbbc8:	f001 fcf4 	bl	bd5b4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bbbcc:	4b0b      	ldr	r3, [pc, #44]	; (bbbfc <module_user_init_hook+0x5c>)
   bbbce:	b113      	cbz	r3, bbbd6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bbbd0:	4620      	mov	r0, r4
   bbbd2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bbbd6:	2100      	movs	r1, #0
   bbbd8:	4808      	ldr	r0, [pc, #32]	; (bbbfc <module_user_init_hook+0x5c>)
   bbbda:	f7fd f827 	bl	b8c2c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bbbde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bbbe2:	4807      	ldr	r0, [pc, #28]	; (bbc00 <module_user_init_hook+0x60>)
   bbbe4:	2100      	movs	r1, #0
   bbbe6:	f7fc bf85 	b.w	b8af4 <system_ctrl_set_app_request_handler>
   bbbea:	bf00      	nop
   bbbec:	000bbacd 	.word	0x000bbacd
   bbbf0:	2003f400 	.word	0x2003f400
   bbbf4:	9a271c1e 	.word	0x9a271c1e
   bbbf8:	2003e6d0 	.word	0x2003e6d0
   bbbfc:	00000000 	.word	0x00000000
   bbc00:	000bbb69 	.word	0x000bbb69

000bbc04 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bbc04:	4770      	bx	lr

000bbc06 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bbc06:	2000      	movs	r0, #0
   bbc08:	4770      	bx	lr

000bbc0a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bbc0a:	b510      	push	{r4, lr}
   bbc0c:	2110      	movs	r1, #16
   bbc0e:	4604      	mov	r4, r0
   bbc10:	f7f8 fa45 	bl	b409e <_ZdlPvj>
   bbc14:	4620      	mov	r0, r4
   bbc16:	bd10      	pop	{r4, pc}

000bbc18 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bbc18:	b508      	push	{r3, lr}
      { delete this; }
   bbc1a:	f7ff fff6 	bl	bbc0a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bbc1e:	bd08      	pop	{r3, pc}

000bbc20 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bbc20:	b530      	push	{r4, r5, lr}
        type_(type) {
   bbc22:	2200      	movs	r2, #0
   bbc24:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bbc28:	6002      	str	r2, [r0, #0]
   bbc2a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   bbc2c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bbc2e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bbc30:	680c      	ldr	r4, [r1, #0]
   bbc32:	8085      	strh	r5, [r0, #4]
   bbc34:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bbc36:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bbc38:	bd30      	pop	{r4, r5, pc}

000bbc3a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bbc3a:	b510      	push	{r4, lr}
   bbc3c:	4604      	mov	r4, r0
    free((void*)msg_);
   bbc3e:	6800      	ldr	r0, [r0, #0]
   bbc40:	f7fd f804 	bl	b8c4c <free>
}
   bbc44:	4620      	mov	r0, r4
   bbc46:	bd10      	pop	{r4, pc}

000bbc48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bbc48:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bbc4a:	68c4      	ldr	r4, [r0, #12]
   bbc4c:	b1f4      	cbz	r4, bbc8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bbc4e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bbc50:	2b02      	cmp	r3, #2
   bbc52:	d103      	bne.n	bbc5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bbc54:	f104 000c 	add.w	r0, r4, #12
   bbc58:	f7ff ffef 	bl	bbc3a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bbc5c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bbc5e:	b135      	cbz	r5, bbc6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bbc60:	4628      	mov	r0, r5
   bbc62:	f7f8 fb27 	bl	b42b4 <_ZNSt14_Function_baseD1Ev>
   bbc66:	2110      	movs	r1, #16
   bbc68:	4628      	mov	r0, r5
   bbc6a:	f7f8 fa18 	bl	b409e <_ZdlPvj>
   bbc6e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bbc70:	b135      	cbz	r5, bbc80 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bbc72:	4628      	mov	r0, r5
   bbc74:	f7f8 fb1e 	bl	b42b4 <_ZNSt14_Function_baseD1Ev>
   bbc78:	2110      	movs	r1, #16
   bbc7a:	4628      	mov	r0, r5
   bbc7c:	f7f8 fa0f 	bl	b409e <_ZdlPvj>
   bbc80:	4620      	mov	r0, r4
   bbc82:	2114      	movs	r1, #20
   bbc84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bbc88:	f7f8 ba09 	b.w	b409e <_ZdlPvj>
   bbc8c:	bd38      	pop	{r3, r4, r5, pc}

000bbc8e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bbc8e:	680b      	ldr	r3, [r1, #0]
   bbc90:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bbc92:	684b      	ldr	r3, [r1, #4]
   bbc94:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bbc96:	b113      	cbz	r3, bbc9e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bbc98:	685a      	ldr	r2, [r3, #4]
   bbc9a:	3201      	adds	r2, #1
   bbc9c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bbc9e:	4770      	bx	lr

000bbca0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bbca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bbca2:	4604      	mov	r4, r0
   bbca4:	4668      	mov	r0, sp
   bbca6:	460d      	mov	r5, r1
   bbca8:	f7ff fff1 	bl	bbc8e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bbcac:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bbcae:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bbcb0:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bbcb2:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bbcb4:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bbcb6:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bbcb8:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   bbcba:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bbcbc:	f7fe f8a5 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bbcc0:	b135      	cbz	r5, bbcd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bbcc2:	1d28      	adds	r0, r5, #4
   bbcc4:	f7fe f8a1 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbcc8:	2108      	movs	r1, #8
   bbcca:	4628      	mov	r0, r5
   bbccc:	f7f8 f9e7 	bl	b409e <_ZdlPvj>
        return p;
    }
   bbcd0:	4620      	mov	r0, r4
   bbcd2:	b003      	add	sp, #12
   bbcd4:	bd30      	pop	{r4, r5, pc}

000bbcd6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bbcd6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bbcd8:	b510      	push	{r4, lr}
      if (_M_empty())
   bbcda:	b90a      	cbnz	r2, bbce0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bbcdc:	f000 fdfb 	bl	bc8d6 <_ZSt25__throw_bad_function_callv>
    }
   bbce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bbce4:	68c3      	ldr	r3, [r0, #12]
   bbce6:	4718      	bx	r3

000bbce8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bbce8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bbcea:	6800      	ldr	r0, [r0, #0]
   bbcec:	f100 0110 	add.w	r1, r0, #16
   bbcf0:	f7ff fff1 	bl	bbcd6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bbcf4:	bd08      	pop	{r3, pc}

000bbcf6 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bbcf6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bbcf8:	b510      	push	{r4, lr}
      if (_M_empty())
   bbcfa:	b90a      	cbnz	r2, bbd00 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bbcfc:	f000 fdeb 	bl	bc8d6 <_ZSt25__throw_bad_function_callv>
    }
   bbd00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bbd04:	68c3      	ldr	r3, [r0, #12]
   bbd06:	4718      	bx	r3

000bbd08 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bbd08:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bbd0a:	6800      	ldr	r0, [r0, #0]
   bbd0c:	f100 0110 	add.w	r1, r0, #16
   bbd10:	f7ff fff1 	bl	bbcf6 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bbd14:	bd08      	pop	{r3, pc}
	...

000bbd18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bbd18:	b538      	push	{r3, r4, r5, lr}
   bbd1a:	2300      	movs	r3, #0
   bbd1c:	4604      	mov	r4, r0
   bbd1e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bbd20:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bbd22:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bbd24:	f7f8 f9b7 	bl	b4096 <_Znwj>
   bbd28:	b128      	cbz	r0, bbd36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bbd2a:	2301      	movs	r3, #1
   bbd2c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bbd30:	4b02      	ldr	r3, [pc, #8]	; (bbd3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bbd32:	6003      	str	r3, [r0, #0]
   bbd34:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bbd36:	6020      	str	r0, [r4, #0]
	}
   bbd38:	4620      	mov	r0, r4
   bbd3a:	bd38      	pop	{r3, r4, r5, pc}
   bbd3c:	000c0b00 	.word	0x000c0b00

000bbd40 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bbd40:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bbd42:	2300      	movs	r3, #0
   bbd44:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bbd46:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bbd48:	4604      	mov	r4, r0
   bbd4a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bbd4c:	b12b      	cbz	r3, bbd5a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bbd4e:	2202      	movs	r2, #2
   bbd50:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bbd52:	68eb      	ldr	r3, [r5, #12]
   bbd54:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bbd56:	68ab      	ldr	r3, [r5, #8]
   bbd58:	60a3      	str	r3, [r4, #8]
    }
   bbd5a:	4620      	mov	r0, r4
   bbd5c:	bd38      	pop	{r3, r4, r5, pc}
	...

000bbd60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bbd60:	b5f0      	push	{r4, r5, r6, r7, lr}
   bbd62:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   bbd64:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bbd66:	4668      	mov	r0, sp
   bbd68:	f7ff ff5a 	bl	bbc20 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bbd6c:	f04f 0302 	mov.w	r3, #2
   bbd70:	e8d4 2f4f 	ldrexb	r2, [r4]
   bbd74:	2a00      	cmp	r2, #0
   bbd76:	d103      	bne.n	bbd80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bbd78:	e8c4 3f41 	strexb	r1, r3, [r4]
   bbd7c:	2900      	cmp	r1, #0
   bbd7e:	d1f7      	bne.n	bbd70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bbd80:	d125      	bne.n	bbdce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bbd82:	f104 050c 	add.w	r5, r4, #12
   bbd86:	4669      	mov	r1, sp
   bbd88:	4628      	mov	r0, r5
   bbd8a:	f7ff ff49 	bl	bbc20 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bbd8e:	f3bf 8f5b 	dmb	ish
   bbd92:	2301      	movs	r3, #1
   bbd94:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bbd96:	2000      	movs	r0, #0
   bbd98:	f104 0308 	add.w	r3, r4, #8
   bbd9c:	f3bf 8f5b 	dmb	ish
   bbda0:	e853 6f00 	ldrex	r6, [r3]
   bbda4:	e843 0200 	strex	r2, r0, [r3]
   bbda8:	2a00      	cmp	r2, #0
   bbdaa:	d1f9      	bne.n	bbda0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bbdac:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bbdb0:	b16e      	cbz	r6, bbdce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bbdb2:	f7fc fe87 	bl	b8ac4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bbdb6:	b178      	cbz	r0, bbdd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bbdb8:	4629      	mov	r1, r5
   bbdba:	4630      	mov	r0, r6
   bbdbc:	f7ff ff8b 	bl	bbcd6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bbdc0:	4630      	mov	r0, r6
   bbdc2:	f7f8 fa77 	bl	b42b4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bbdc6:	2110      	movs	r1, #16
   bbdc8:	4630      	mov	r0, r6
   bbdca:	f7f8 f968 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bbdce:	4668      	mov	r0, sp
   bbdd0:	f7ff ff33 	bl	bbc3a <_ZN8particle5ErrorD1Ev>
    }
   bbdd4:	b009      	add	sp, #36	; 0x24
   bbdd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bbdd8:	4631      	mov	r1, r6
   bbdda:	a802      	add	r0, sp, #8
   bbddc:	f7ff ffb0 	bl	bbd40 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bbde0:	68e0      	ldr	r0, [r4, #12]
   bbde2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bbde6:	b108      	cbz	r0, bbdec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bbde8:	f001 fc34 	bl	bd654 <strdup>
        type_(type) {
   bbdec:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bbdee:	2010      	movs	r0, #16
   bbdf0:	f8ad 501c 	strh.w	r5, [sp, #28]
   bbdf4:	f7f8 f94f 	bl	b4096 <_Znwj>
   bbdf8:	4605      	mov	r5, r0
   bbdfa:	b1e8      	cbz	r0, bbe38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bbdfc:	2700      	movs	r7, #0
   bbdfe:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bbe00:	2018      	movs	r0, #24
   bbe02:	f7f8 f948 	bl	b4096 <_Znwj>
   bbe06:	4604      	mov	r4, r0
   bbe08:	b188      	cbz	r0, bbe2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bbe0a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bbe0c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bbe0e:	a802      	add	r0, sp, #8
   bbe10:	f7fe fed4 	bl	babbc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbe14:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bbe16:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bbe18:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbe1a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bbe1c:	9204      	str	r2, [sp, #16]
   bbe1e:	a906      	add	r1, sp, #24
   bbe20:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bbe22:	60e3      	str	r3, [r4, #12]
   bbe24:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bbe28:	9205      	str	r2, [sp, #20]
   bbe2a:	f7ff fef9 	bl	bbc20 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bbe2e:	4b08      	ldr	r3, [pc, #32]	; (bbe50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bbe30:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bbe32:	4b08      	ldr	r3, [pc, #32]	; (bbe54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bbe34:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bbe36:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bbe38:	a806      	add	r0, sp, #24
   bbe3a:	f7ff fefe 	bl	bbc3a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bbe3e:	a802      	add	r0, sp, #8
   bbe40:	f7f8 fa38 	bl	b42b4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bbe44:	2200      	movs	r2, #0
   bbe46:	4629      	mov	r1, r5
   bbe48:	4803      	ldr	r0, [pc, #12]	; (bbe58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bbe4a:	f7fc fe43 	bl	b8ad4 <application_thread_invoke>
   bbe4e:	e7b7      	b.n	bbdc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bbe50:	000bbce9 	.word	0x000bbce9
   bbe54:	000bbf6d 	.word	0x000bbf6d
   bbe58:	000bc477 	.word	0x000bc477

000bbe5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bbe5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbe60:	b08b      	sub	sp, #44	; 0x2c
   bbe62:	4605      	mov	r5, r0
   bbe64:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bbe68:	460f      	mov	r7, r1
   bbe6a:	4690      	mov	r8, r2
   bbe6c:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bbe6e:	f7fc febd 	bl	b8bec <spark_cloud_flag_connected>
   bbe72:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bbe74:	4683      	mov	fp, r0
   bbe76:	bb38      	cbnz	r0, bbec8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bbe78:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bbe7c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bbe7e:	a905      	add	r1, sp, #20
   bbe80:	4630      	mov	r0, r6
   bbe82:	f8ad 3018 	strh.w	r3, [sp, #24]
   bbe86:	f7ff fecb 	bl	bbc20 <_ZN8particle5ErrorC1EOS0_>
   bbe8a:	2014      	movs	r0, #20
   bbe8c:	f7f8 f903 	bl	b4096 <_Znwj>
   bbe90:	4604      	mov	r4, r0
   bbe92:	b148      	cbz	r0, bbea8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bbe94:	2302      	movs	r3, #2
   bbe96:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bbe98:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bbe9a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bbe9e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bbea0:	4631      	mov	r1, r6
   bbea2:	300c      	adds	r0, #12
   bbea4:	f7ff febc 	bl	bbc20 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bbea8:	4628      	mov	r0, r5
	: __shared_count(__p)
   bbeaa:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bbeac:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bbeb0:	f7ff ff32 	bl	bbd18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bbeb4:	4630      	mov	r0, r6
   bbeb6:	f7ff fec0 	bl	bbc3a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bbeba:	a805      	add	r0, sp, #20
   bbebc:	f7ff febd 	bl	bbc3a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   bbec0:	4628      	mov	r0, r5
   bbec2:	b00b      	add	sp, #44	; 0x2c
   bbec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bbec8:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bbeca:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bbecc:	2014      	movs	r0, #20
   bbece:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bbed2:	9307      	str	r3, [sp, #28]
   bbed4:	f7f8 f8df 	bl	b4096 <_Znwj>
   bbed8:	4601      	mov	r1, r0
   bbeda:	b118      	cbz	r0, bbee4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bbedc:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bbee0:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bbee2:	7044      	strb	r4, [r0, #1]
   bbee4:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bbee6:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bbee8:	f7ff ff16 	bl	bbd18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bbeec:	4b1e      	ldr	r3, [pc, #120]	; (bbf68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bbeee:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bbef0:	2008      	movs	r0, #8
   bbef2:	f7f8 f8d0 	bl	b4096 <_Znwj>
   bbef6:	4604      	mov	r4, r0
   bbef8:	b110      	cbz	r0, bbf00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bbefa:	a903      	add	r1, sp, #12
   bbefc:	f7ff fec7 	bl	bbc8e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bbf00:	9600      	str	r6, [sp, #0]
   bbf02:	fa5f f38a 	uxtb.w	r3, sl
   bbf06:	464a      	mov	r2, r9
   bbf08:	4641      	mov	r1, r8
   bbf0a:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bbf0c:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bbf0e:	f7fc fe75 	bl	b8bfc <spark_send_event>
   bbf12:	b9b8      	cbnz	r0, bbf44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bbf14:	9b03      	ldr	r3, [sp, #12]
   bbf16:	785b      	ldrb	r3, [r3, #1]
   bbf18:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bbf1c:	b993      	cbnz	r3, bbf44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bbf1e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bbf22:	a905      	add	r1, sp, #20
   bbf24:	a803      	add	r0, sp, #12
   bbf26:	9205      	str	r2, [sp, #20]
   bbf28:	f8ad 3018 	strh.w	r3, [sp, #24]
   bbf2c:	f7ff ff18 	bl	bbd60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bbf30:	a805      	add	r0, sp, #20
   bbf32:	f7ff fe82 	bl	bbc3a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bbf36:	a805      	add	r0, sp, #20
   bbf38:	9909      	ldr	r1, [sp, #36]	; 0x24
   bbf3a:	f7ff feb1 	bl	bbca0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bbf3e:	a806      	add	r0, sp, #24
   bbf40:	f7fd ff63 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbf44:	a903      	add	r1, sp, #12
   bbf46:	a805      	add	r0, sp, #20
   bbf48:	f7ff fea1 	bl	bbc8e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bbf4c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bbf4e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bbf50:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bbf52:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bbf54:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bbf56:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bbf58:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bbf5a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bbf5c:	f7fd ff55 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbf60:	a804      	add	r0, sp, #16
   bbf62:	f7fd ff52 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bbf66:	e7ab      	b.n	bbec0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bbf68:	000bbfe9 	.word	0x000bbfe9

000bbf6c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bbf6c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bbf6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbf70:	4605      	mov	r5, r0
	switch (__op)
   bbf72:	d103      	bne.n	bbf7c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bbf74:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bbf76:	6003      	str	r3, [r0, #0]
      }
   bbf78:	2000      	movs	r0, #0
   bbf7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bbf7c:	2a02      	cmp	r2, #2
   bbf7e:	d010      	beq.n	bbfa2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bbf80:	2a03      	cmp	r2, #3
   bbf82:	d1f9      	bne.n	bbf78 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bbf84:	6804      	ldr	r4, [r0, #0]
   bbf86:	2c00      	cmp	r4, #0
   bbf88:	d0f6      	beq.n	bbf78 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bbf8a:	f104 0010 	add.w	r0, r4, #16
   bbf8e:	f7ff fe54 	bl	bbc3a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bbf92:	4620      	mov	r0, r4
   bbf94:	f7f8 f98e 	bl	b42b4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bbf98:	2118      	movs	r1, #24
   bbf9a:	4620      	mov	r0, r4
   bbf9c:	f7f8 f87f 	bl	b409e <_ZdlPvj>
   bbfa0:	e7ea      	b.n	bbf78 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bbfa2:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bbfa4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bbfa6:	f7f8 f876 	bl	b4096 <_Znwj>
   bbfaa:	4604      	mov	r4, r0
   bbfac:	b150      	cbz	r0, bbfc4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bbfae:	4631      	mov	r1, r6
   bbfb0:	f7ff fec6 	bl	bbd40 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bbfb4:	6930      	ldr	r0, [r6, #16]
   bbfb6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bbfba:	b108      	cbz	r0, bbfc0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bbfbc:	f001 fb4a 	bl	bd654 <strdup>
        type_(type) {
   bbfc0:	6120      	str	r0, [r4, #16]
   bbfc2:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bbfc4:	602c      	str	r4, [r5, #0]
	}
   bbfc6:	e7d7      	b.n	bbf78 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bbfc8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bbfc8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bbfca:	2300      	movs	r3, #0
   bbfcc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bbfce:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bbfd0:	4604      	mov	r4, r0
   bbfd2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bbfd4:	b12b      	cbz	r3, bbfe2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bbfd6:	2202      	movs	r2, #2
   bbfd8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bbfda:	68eb      	ldr	r3, [r5, #12]
   bbfdc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bbfde:	68ab      	ldr	r3, [r5, #8]
   bbfe0:	60a3      	str	r3, [r4, #8]
    }
   bbfe2:	4620      	mov	r0, r4
   bbfe4:	bd38      	pop	{r3, r4, r5, pc}
	...

000bbfe8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bbfe8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bbfea:	b089      	sub	sp, #36	; 0x24
   bbfec:	4604      	mov	r4, r0
   bbfee:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bbff0:	a801      	add	r0, sp, #4
   bbff2:	4611      	mov	r1, r2
   bbff4:	f7ff fe54 	bl	bbca0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bbff8:	b1a4      	cbz	r4, bc024 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bbffa:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bbffc:	b11d      	cbz	r5, bc006 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bbffe:	4628      	mov	r0, r5
   bc000:	f001 fb28 	bl	bd654 <strdup>
   bc004:	4605      	mov	r5, r0
   bc006:	a801      	add	r0, sp, #4
   bc008:	a903      	add	r1, sp, #12
        type_(type) {
   bc00a:	9503      	str	r5, [sp, #12]
   bc00c:	f8ad 4010 	strh.w	r4, [sp, #16]
   bc010:	f7ff fea6 	bl	bbd60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bc014:	a803      	add	r0, sp, #12
   bc016:	f7ff fe10 	bl	bbc3a <_ZN8particle5ErrorD1Ev>
   bc01a:	a802      	add	r0, sp, #8
   bc01c:	f7fd fef5 	bl	b9e0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bc020:	b009      	add	sp, #36	; 0x24
   bc022:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bc024:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bc026:	2301      	movs	r3, #1
   bc028:	e8d5 2f4f 	ldrexb	r2, [r5]
   bc02c:	2a00      	cmp	r2, #0
   bc02e:	d103      	bne.n	bc038 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bc030:	e8c5 3f41 	strexb	r1, r3, [r5]
   bc034:	2900      	cmp	r1, #0
   bc036:	d1f7      	bne.n	bc028 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bc038:	d1ef      	bne.n	bc01a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bc03a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bc03c:	f3bf 8f5b 	dmb	ish
   bc040:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bc042:	1d2b      	adds	r3, r5, #4
   bc044:	f3bf 8f5b 	dmb	ish
   bc048:	e853 6f00 	ldrex	r6, [r3]
   bc04c:	e843 4200 	strex	r2, r4, [r3]
   bc050:	2a00      	cmp	r2, #0
   bc052:	d1f9      	bne.n	bc048 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bc054:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bc058:	2e00      	cmp	r6, #0
   bc05a:	d0de      	beq.n	bc01a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bc05c:	4620      	mov	r0, r4
   bc05e:	f7fc fd31 	bl	b8ac4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bc062:	4607      	mov	r7, r0
   bc064:	b160      	cbz	r0, bc080 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bc066:	f105 010c 	add.w	r1, r5, #12
   bc06a:	4630      	mov	r0, r6
   bc06c:	f7ff fe43 	bl	bbcf6 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bc070:	4630      	mov	r0, r6
   bc072:	f7f8 f91f 	bl	b42b4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bc076:	2110      	movs	r1, #16
   bc078:	4630      	mov	r0, r6
   bc07a:	f7f8 f810 	bl	b409e <_ZdlPvj>
   bc07e:	e7cc      	b.n	bc01a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bc080:	4631      	mov	r1, r6
   bc082:	a803      	add	r0, sp, #12
   bc084:	f7ff ffa0 	bl	bbfc8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bc088:	7b2b      	ldrb	r3, [r5, #12]
   bc08a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bc08e:	2010      	movs	r0, #16
   bc090:	f7f8 f801 	bl	b4096 <_Znwj>
   bc094:	4605      	mov	r5, r0
   bc096:	b1d0      	cbz	r0, bc0ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bc098:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc09a:	2014      	movs	r0, #20
   bc09c:	f7f7 fffb 	bl	b4096 <_Znwj>
   bc0a0:	4604      	mov	r4, r0
   bc0a2:	b178      	cbz	r0, bc0c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bc0a4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bc0a6:	4601      	mov	r1, r0
   bc0a8:	a803      	add	r0, sp, #12
   bc0aa:	f7fe fd87 	bl	babbc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc0ae:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bc0b0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc0b2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc0b4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bc0b6:	9205      	str	r2, [sp, #20]
   bc0b8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bc0ba:	60e3      	str	r3, [r4, #12]
   bc0bc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bc0c0:	9206      	str	r2, [sp, #24]
   bc0c2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bc0c4:	4b06      	ldr	r3, [pc, #24]	; (bc0e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bc0c6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bc0c8:	4b06      	ldr	r3, [pc, #24]	; (bc0e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc0ca:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bc0cc:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bc0ce:	a803      	add	r0, sp, #12
   bc0d0:	f7f8 f8f0 	bl	b42b4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bc0d4:	2200      	movs	r2, #0
   bc0d6:	4629      	mov	r1, r5
   bc0d8:	4803      	ldr	r0, [pc, #12]	; (bc0e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bc0da:	f7fc fcfb 	bl	b8ad4 <application_thread_invoke>
   bc0de:	e7c7      	b.n	bc070 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bc0e0:	000bbd09 	.word	0x000bbd09
   bc0e4:	000bc0ed 	.word	0x000bc0ed
   bc0e8:	000bc477 	.word	0x000bc477

000bc0ec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bc0ec:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bc0ee:	b570      	push	{r4, r5, r6, lr}
   bc0f0:	4604      	mov	r4, r0
	switch (__op)
   bc0f2:	d103      	bne.n	bc0fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bc0f4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bc0f6:	6003      	str	r3, [r0, #0]
      }
   bc0f8:	2000      	movs	r0, #0
   bc0fa:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bc0fc:	2a02      	cmp	r2, #2
   bc0fe:	d00c      	beq.n	bc11a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bc100:	2a03      	cmp	r2, #3
   bc102:	d1f9      	bne.n	bc0f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bc104:	6804      	ldr	r4, [r0, #0]
   bc106:	2c00      	cmp	r4, #0
   bc108:	d0f6      	beq.n	bc0f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bc10a:	4620      	mov	r0, r4
   bc10c:	f7f8 f8d2 	bl	b42b4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bc110:	2114      	movs	r1, #20
   bc112:	4620      	mov	r0, r4
   bc114:	f7f7 ffc3 	bl	b409e <_ZdlPvj>
   bc118:	e7ee      	b.n	bc0f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bc11a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bc11c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bc11e:	f7f7 ffba 	bl	b4096 <_Znwj>
   bc122:	4605      	mov	r5, r0
   bc124:	b120      	cbz	r0, bc130 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bc126:	4631      	mov	r1, r6
   bc128:	f7ff ff4e 	bl	bbfc8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bc12c:	7c33      	ldrb	r3, [r6, #16]
   bc12e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bc130:	6025      	str	r5, [r4, #0]
	}
   bc132:	e7e1      	b.n	bc0f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bc134 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bc134:	4770      	bx	lr

000bc136 <_ZN9IPAddressD0Ev>:
   bc136:	b510      	push	{r4, lr}
   bc138:	2118      	movs	r1, #24
   bc13a:	4604      	mov	r4, r0
   bc13c:	f7f7 ffaf 	bl	b409e <_ZdlPvj>
   bc140:	4620      	mov	r0, r4
   bc142:	bd10      	pop	{r4, pc}

000bc144 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bc144:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bc146:	7d03      	ldrb	r3, [r0, #20]
   bc148:	2b06      	cmp	r3, #6
{
   bc14a:	b08d      	sub	sp, #52	; 0x34
   bc14c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc14e:	f100 0704 	add.w	r7, r0, #4
   bc152:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bc156:	d012      	beq.n	bc17e <_ZNK9IPAddress7printToER5Print+0x3a>
   bc158:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bc15c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bc160:	220a      	movs	r2, #10
   bc162:	4630      	mov	r0, r6
   bc164:	f7ff fb59 	bl	bb81a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bc168:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bc16a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bc16c:	d019      	beq.n	bc1a2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bc16e:	2c00      	cmp	r4, #0
   bc170:	d0f4      	beq.n	bc15c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bc172:	212e      	movs	r1, #46	; 0x2e
   bc174:	4630      	mov	r0, r6
   bc176:	f7ff fb37 	bl	bb7e8 <_ZN5Print5printEc>
   bc17a:	4404      	add	r4, r0
   bc17c:	e7ee      	b.n	bc15c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc17e:	232f      	movs	r3, #47	; 0x2f
   bc180:	466a      	mov	r2, sp
   bc182:	4639      	mov	r1, r7
   bc184:	200a      	movs	r0, #10
		buf[0] = 0;
   bc186:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc18a:	f7fc fb43 	bl	b8814 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bc18e:	4668      	mov	r0, sp
   bc190:	f001 fa7d 	bl	bd68e <strlen>
   bc194:	6833      	ldr	r3, [r6, #0]
   bc196:	4602      	mov	r2, r0
   bc198:	68db      	ldr	r3, [r3, #12]
   bc19a:	4669      	mov	r1, sp
   bc19c:	4630      	mov	r0, r6
   bc19e:	4798      	blx	r3
   bc1a0:	4604      	mov	r4, r0
    }
    return n;
}
   bc1a2:	4620      	mov	r0, r4
   bc1a4:	b00d      	add	sp, #52	; 0x34
   bc1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bc1a8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bc1a8:	b510      	push	{r4, lr}
   bc1aa:	4b05      	ldr	r3, [pc, #20]	; (bc1c0 <_ZN9IPAddressC1Ev+0x18>)
   bc1ac:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bc1ae:	2211      	movs	r2, #17
   bc1b0:	f840 3b04 	str.w	r3, [r0], #4
   bc1b4:	2100      	movs	r1, #0
   bc1b6:	f001 f9f4 	bl	bd5a2 <memset>
}
   bc1ba:	4620      	mov	r0, r4
   bc1bc:	bd10      	pop	{r4, pc}
   bc1be:	bf00      	nop
   bc1c0:	000c0b1c 	.word	0x000c0b1c

000bc1c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bc1c4:	4603      	mov	r3, r0
   bc1c6:	4a07      	ldr	r2, [pc, #28]	; (bc1e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bc1c8:	b510      	push	{r4, lr}
   bc1ca:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bc1ce:	f101 0210 	add.w	r2, r1, #16
   bc1d2:	f851 4b04 	ldr.w	r4, [r1], #4
   bc1d6:	f843 4b04 	str.w	r4, [r3], #4
   bc1da:	4291      	cmp	r1, r2
   bc1dc:	d1f9      	bne.n	bc1d2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bc1de:	780a      	ldrb	r2, [r1, #0]
   bc1e0:	701a      	strb	r2, [r3, #0]
}
   bc1e2:	bd10      	pop	{r4, pc}
   bc1e4:	000c0b1c 	.word	0x000c0b1c

000bc1e8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bc1e8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bc1ea:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bc1ee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bc1f2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bc1f6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bc1fa:	2304      	movs	r3, #4
   bc1fc:	6041      	str	r1, [r0, #4]
   bc1fe:	7503      	strb	r3, [r0, #20]
}
   bc200:	bd10      	pop	{r4, pc}
	...

000bc204 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bc204:	b507      	push	{r0, r1, r2, lr}
   bc206:	4b06      	ldr	r3, [pc, #24]	; (bc220 <_ZN9IPAddressC1EPKh+0x1c>)
   bc208:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bc20a:	78cb      	ldrb	r3, [r1, #3]
   bc20c:	9300      	str	r3, [sp, #0]
   bc20e:	788b      	ldrb	r3, [r1, #2]
   bc210:	784a      	ldrb	r2, [r1, #1]
   bc212:	7809      	ldrb	r1, [r1, #0]
   bc214:	f7ff ffe8 	bl	bc1e8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bc218:	b003      	add	sp, #12
   bc21a:	f85d fb04 	ldr.w	pc, [sp], #4
   bc21e:	bf00      	nop
   bc220:	000c0b1c 	.word	0x000c0b1c

000bc224 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bc224:	7441      	strb	r1, [r0, #17]
}
   bc226:	4770      	bx	lr

000bc228 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bc228:	4770      	bx	lr

000bc22a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bc22a:	4770      	bx	lr

000bc22c <_ZN9USBSerial4readEv>:
{
   bc22c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bc22e:	2100      	movs	r1, #0
   bc230:	7c00      	ldrb	r0, [r0, #16]
   bc232:	f7fc fc07 	bl	b8a44 <HAL_USB_USART_Receive_Data>
}
   bc236:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bc23a:	bd08      	pop	{r3, pc}

000bc23c <_ZN9USBSerial4peekEv>:
{
   bc23c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bc23e:	2101      	movs	r1, #1
   bc240:	7c00      	ldrb	r0, [r0, #16]
   bc242:	f7fc fbff 	bl	b8a44 <HAL_USB_USART_Receive_Data>
}
   bc246:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bc24a:	bd08      	pop	{r3, pc}

000bc24c <_ZN9USBSerial17availableForWriteEv>:
{
   bc24c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bc24e:	7c00      	ldrb	r0, [r0, #16]
   bc250:	f7fc fbf0 	bl	b8a34 <HAL_USB_USART_Available_Data_For_Write>
}
   bc254:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bc258:	bd08      	pop	{r3, pc}

000bc25a <_ZN9USBSerial9availableEv>:
{
   bc25a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bc25c:	7c00      	ldrb	r0, [r0, #16]
   bc25e:	f7fc fbe1 	bl	b8a24 <HAL_USB_USART_Available_Data>
}
   bc262:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bc266:	bd08      	pop	{r3, pc}

000bc268 <_ZN9USBSerial5writeEh>:
{
   bc268:	b513      	push	{r0, r1, r4, lr}
   bc26a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bc26c:	7c00      	ldrb	r0, [r0, #16]
{
   bc26e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bc270:	f7fc fbe0 	bl	b8a34 <HAL_USB_USART_Available_Data_For_Write>
   bc274:	2800      	cmp	r0, #0
   bc276:	9901      	ldr	r1, [sp, #4]
   bc278:	dc01      	bgt.n	bc27e <_ZN9USBSerial5writeEh+0x16>
   bc27a:	7c60      	ldrb	r0, [r4, #17]
   bc27c:	b120      	cbz	r0, bc288 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bc27e:	7c20      	ldrb	r0, [r4, #16]
   bc280:	f7fc fbe8 	bl	b8a54 <HAL_USB_USART_Send_Data>
   bc284:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bc288:	b002      	add	sp, #8
   bc28a:	bd10      	pop	{r4, pc}

000bc28c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bc28c:	7c00      	ldrb	r0, [r0, #16]
   bc28e:	f7fc bbe9 	b.w	b8a64 <HAL_USB_USART_Flush_Data>

000bc292 <_ZN9USBSerialD0Ev>:
   bc292:	b510      	push	{r4, lr}
   bc294:	2114      	movs	r1, #20
   bc296:	4604      	mov	r4, r0
   bc298:	f7f7 ff01 	bl	b409e <_ZdlPvj>
   bc29c:	4620      	mov	r0, r4
   bc29e:	bd10      	pop	{r4, pc}

000bc2a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bc2a0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bc2a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bc2a6:	4604      	mov	r4, r0
   bc2a8:	4608      	mov	r0, r1
   bc2aa:	2100      	movs	r1, #0
   bc2ac:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bc2b0:	4b04      	ldr	r3, [pc, #16]	; (bc2c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bc2b2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bc2b4:	2301      	movs	r3, #1
  _serial = serial;
   bc2b6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bc2b8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bc2ba:	4611      	mov	r1, r2
   bc2bc:	f7fc fba2 	bl	b8a04 <HAL_USB_USART_Init>
}
   bc2c0:	4620      	mov	r0, r4
   bc2c2:	bd10      	pop	{r4, pc}
   bc2c4:	000c0b30 	.word	0x000c0b30

000bc2c8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bc2c8:	7c00      	ldrb	r0, [r0, #16]
   bc2ca:	2200      	movs	r2, #0
   bc2cc:	f7fc bba2 	b.w	b8a14 <HAL_USB_USART_Begin>

000bc2d0 <_Z19acquireSerialBufferv>:
{
   bc2d0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bc2d2:	2214      	movs	r2, #20
{
   bc2d4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bc2d6:	2100      	movs	r1, #0
   bc2d8:	f001 f963 	bl	bd5a2 <memset>
}
   bc2dc:	4620      	mov	r0, r4
   bc2de:	bd10      	pop	{r4, pc}

000bc2e0 <_Z16_fetch_usbserialv>:
{
   bc2e0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bc2e2:	4c0f      	ldr	r4, [pc, #60]	; (bc320 <_Z16_fetch_usbserialv+0x40>)
{
   bc2e4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bc2e6:	a803      	add	r0, sp, #12
   bc2e8:	f7ff fff2 	bl	bc2d0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bc2ec:	7821      	ldrb	r1, [r4, #0]
   bc2ee:	f3bf 8f5b 	dmb	ish
   bc2f2:	f011 0101 	ands.w	r1, r1, #1
   bc2f6:	d10f      	bne.n	bc318 <_Z16_fetch_usbserialv+0x38>
   bc2f8:	4620      	mov	r0, r4
   bc2fa:	9101      	str	r1, [sp, #4]
   bc2fc:	f7f7 fede 	bl	b40bc <__cxa_guard_acquire>
   bc300:	9901      	ldr	r1, [sp, #4]
   bc302:	b148      	cbz	r0, bc318 <_Z16_fetch_usbserialv+0x38>
   bc304:	aa03      	add	r2, sp, #12
   bc306:	4807      	ldr	r0, [pc, #28]	; (bc324 <_Z16_fetch_usbserialv+0x44>)
   bc308:	f7ff ffca 	bl	bc2a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bc30c:	4620      	mov	r0, r4
   bc30e:	f7f7 feda 	bl	b40c6 <__cxa_guard_release>
   bc312:	4805      	ldr	r0, [pc, #20]	; (bc328 <_Z16_fetch_usbserialv+0x48>)
   bc314:	f001 f900 	bl	bd518 <atexit>
	return _usbserial;
}
   bc318:	4802      	ldr	r0, [pc, #8]	; (bc324 <_Z16_fetch_usbserialv+0x44>)
   bc31a:	b008      	add	sp, #32
   bc31c:	bd10      	pop	{r4, pc}
   bc31e:	bf00      	nop
   bc320:	2003e6d8 	.word	0x2003e6d8
   bc324:	2003e6dc 	.word	0x2003e6dc
   bc328:	000bc229 	.word	0x000bc229

000bc32c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bc32c:	2200      	movs	r2, #0
   bc32e:	6840      	ldr	r0, [r0, #4]
   bc330:	4611      	mov	r1, r2
   bc332:	f7fc bc0b 	b.w	b8b4c <network_ready>

000bc336 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bc336:	2200      	movs	r2, #0
   bc338:	6840      	ldr	r0, [r0, #4]
   bc33a:	4611      	mov	r1, r2
   bc33c:	f7fc bc26 	b.w	b8b8c <network_listening>

000bc340 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bc340:	2200      	movs	r2, #0
   bc342:	6840      	ldr	r0, [r0, #4]
   bc344:	4611      	mov	r1, r2
   bc346:	f7fc bc31 	b.w	b8bac <network_get_listen_timeout>

000bc34a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bc34a:	6840      	ldr	r0, [r0, #4]
   bc34c:	2200      	movs	r2, #0
   bc34e:	f7fc bc25 	b.w	b8b9c <network_set_listen_timeout>

000bc352 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bc352:	6840      	ldr	r0, [r0, #4]
   bc354:	2200      	movs	r2, #0
   bc356:	f081 0101 	eor.w	r1, r1, #1
   bc35a:	f7fc bc0f 	b.w	b8b7c <network_listen>

000bc35e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bc35e:	2300      	movs	r3, #0
   bc360:	6840      	ldr	r0, [r0, #4]
   bc362:	461a      	mov	r2, r3
   bc364:	4619      	mov	r1, r3
   bc366:	f7fc bc01 	b.w	b8b6c <network_off>

000bc36a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bc36a:	2300      	movs	r3, #0
   bc36c:	6840      	ldr	r0, [r0, #4]
   bc36e:	461a      	mov	r2, r3
   bc370:	4619      	mov	r1, r3
   bc372:	f7fc bbf3 	b.w	b8b5c <network_on>

000bc376 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bc376:	2200      	movs	r2, #0
   bc378:	6840      	ldr	r0, [r0, #4]
   bc37a:	4611      	mov	r1, r2
   bc37c:	f7fc bbd6 	b.w	b8b2c <network_connecting>

000bc380 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bc380:	6840      	ldr	r0, [r0, #4]
   bc382:	2200      	movs	r2, #0
   bc384:	2102      	movs	r1, #2
   bc386:	f7fc bbd9 	b.w	b8b3c <network_disconnect>

000bc38a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bc38a:	2300      	movs	r3, #0
   bc38c:	6840      	ldr	r0, [r0, #4]
   bc38e:	461a      	mov	r2, r3
   bc390:	f7fc bbc4 	b.w	b8b1c <network_connect>

000bc394 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bc394:	4b08      	ldr	r3, [pc, #32]	; (bc3b8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bc396:	b510      	push	{r4, lr}
   bc398:	2428      	movs	r4, #40	; 0x28
   bc39a:	4622      	mov	r2, r4
   bc39c:	4618      	mov	r0, r3
   bc39e:	2100      	movs	r1, #0
   bc3a0:	f001 f8ff 	bl	bd5a2 <memset>
   bc3a4:	4b05      	ldr	r3, [pc, #20]	; (bc3bc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bc3a6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bc3a8:	f04f 32ff 	mov.w	r2, #4294967295
   bc3ac:	6042      	str	r2, [r0, #4]
   bc3ae:	2204      	movs	r2, #4
   bc3b0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bc3b2:	4a03      	ldr	r2, [pc, #12]	; (bc3c0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bc3b4:	601a      	str	r2, [r3, #0]
   bc3b6:	bd10      	pop	{r4, pc}
   bc3b8:	2003e6f8 	.word	0x2003e6f8
   bc3bc:	2003e6f0 	.word	0x2003e6f0
   bc3c0:	000c0b60 	.word	0x000c0b60

000bc3c4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bc3c4:	4770      	bx	lr

000bc3c6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bc3c6:	7441      	strb	r1, [r0, #17]
}
   bc3c8:	4770      	bx	lr

000bc3ca <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bc3ca:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bc3cc:	7c00      	ldrb	r0, [r0, #16]
   bc3ce:	f7fc fa59 	bl	b8884 <hal_usart_available_data_for_write>
}
   bc3d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bc3d6:	bd08      	pop	{r3, pc}

000bc3d8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bc3d8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bc3da:	7c00      	ldrb	r0, [r0, #16]
   bc3dc:	f7fc fa2a 	bl	b8834 <hal_usart_available>
}
   bc3e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bc3e4:	bd08      	pop	{r3, pc}

000bc3e6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bc3e6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bc3e8:	7c00      	ldrb	r0, [r0, #16]
   bc3ea:	f7fc fa33 	bl	b8854 <hal_usart_peek>
}
   bc3ee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bc3f2:	bd08      	pop	{r3, pc}

000bc3f4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bc3f4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bc3f6:	7c00      	ldrb	r0, [r0, #16]
   bc3f8:	f7fc fa24 	bl	b8844 <hal_usart_read>
}
   bc3fc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bc400:	bd08      	pop	{r3, pc}

000bc402 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bc402:	7c00      	ldrb	r0, [r0, #16]
   bc404:	f7fc ba2e 	b.w	b8864 <hal_usart_flush>

000bc408 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bc408:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bc40a:	7c45      	ldrb	r5, [r0, #17]
{
   bc40c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bc40e:	b12d      	cbz	r5, bc41c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bc410:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bc412:	b003      	add	sp, #12
   bc414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bc418:	f7fc ba04 	b.w	b8824 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bc41c:	7c00      	ldrb	r0, [r0, #16]
   bc41e:	9101      	str	r1, [sp, #4]
   bc420:	f7fc fa30 	bl	b8884 <hal_usart_available_data_for_write>
   bc424:	2800      	cmp	r0, #0
   bc426:	9901      	ldr	r1, [sp, #4]
   bc428:	dcf2      	bgt.n	bc410 <_ZN11USARTSerial5writeEh+0x8>
}
   bc42a:	4628      	mov	r0, r5
   bc42c:	b003      	add	sp, #12
   bc42e:	bd30      	pop	{r4, r5, pc}

000bc430 <_ZN11USARTSerialD0Ev>:
   bc430:	b510      	push	{r4, lr}
   bc432:	2114      	movs	r1, #20
   bc434:	4604      	mov	r4, r0
   bc436:	f7f7 fe32 	bl	b409e <_ZdlPvj>
   bc43a:	4620      	mov	r0, r4
   bc43c:	bd10      	pop	{r4, pc}
	...

000bc440 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bc440:	b510      	push	{r4, lr}
   bc442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bc446:	4604      	mov	r4, r0
   bc448:	4608      	mov	r0, r1
   bc44a:	4611      	mov	r1, r2
   bc44c:	2200      	movs	r2, #0
   bc44e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bc452:	4b04      	ldr	r3, [pc, #16]	; (bc464 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bc454:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bc456:	2301      	movs	r3, #1
  _serial = serial;
   bc458:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bc45a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bc45c:	f7fc fa22 	bl	b88a4 <hal_usart_init_ex>
}
   bc460:	4620      	mov	r0, r4
   bc462:	bd10      	pop	{r4, pc}
   bc464:	000c0b9c 	.word	0x000c0b9c

000bc468 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bc468:	7c00      	ldrb	r0, [r0, #16]
   bc46a:	2300      	movs	r3, #0
   bc46c:	f7fc ba12 	b.w	b8894 <hal_usart_begin_config>

000bc470 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bc470:	2200      	movs	r2, #0
   bc472:	f7ff bff9 	b.w	bc468 <_ZN11USARTSerial5beginEmm>

000bc476 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bc476:	b510      	push	{r4, lr}
      if (_M_empty())
   bc478:	6883      	ldr	r3, [r0, #8]
   bc47a:	4604      	mov	r4, r0
   bc47c:	b90b      	cbnz	r3, bc482 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bc47e:	f000 fa2a 	bl	bc8d6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc482:	68c3      	ldr	r3, [r0, #12]
   bc484:	4798      	blx	r3
      if (_M_manager)
   bc486:	68a3      	ldr	r3, [r4, #8]
   bc488:	b11b      	cbz	r3, bc492 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bc48a:	2203      	movs	r2, #3
   bc48c:	4621      	mov	r1, r4
   bc48e:	4620      	mov	r0, r4
   bc490:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bc492:	4620      	mov	r0, r4
   bc494:	2110      	movs	r1, #16
}
   bc496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bc49a:	f7f7 be00 	b.w	b409e <_ZdlPvj>

000bc49e <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bc49e:	4770      	bx	lr

000bc4a0 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bc4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc4a2:	4606      	mov	r6, r0
   bc4a4:	4615      	mov	r5, r2
   bc4a6:	460c      	mov	r4, r1
   bc4a8:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bc4aa:	42bc      	cmp	r4, r7
   bc4ac:	d006      	beq.n	bc4bc <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bc4ae:	6833      	ldr	r3, [r6, #0]
   bc4b0:	f814 1b01 	ldrb.w	r1, [r4], #1
   bc4b4:	689b      	ldr	r3, [r3, #8]
   bc4b6:	4630      	mov	r0, r6
   bc4b8:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bc4ba:	e7f6      	b.n	bc4aa <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bc4bc:	4628      	mov	r0, r5
   bc4be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc4c0 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bc4c0:	7c00      	ldrb	r0, [r0, #16]
   bc4c2:	2200      	movs	r2, #0
   bc4c4:	f7fc ba16 	b.w	b88f4 <hal_i2c_write>

000bc4c8 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bc4c8:	7c00      	ldrb	r0, [r0, #16]
   bc4ca:	2100      	movs	r1, #0
   bc4cc:	f7fc ba1a 	b.w	b8904 <hal_i2c_available>

000bc4d0 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bc4d0:	7c00      	ldrb	r0, [r0, #16]
   bc4d2:	2100      	movs	r1, #0
   bc4d4:	f7fc ba1e 	b.w	b8914 <hal_i2c_read>

000bc4d8 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bc4d8:	7c00      	ldrb	r0, [r0, #16]
   bc4da:	2100      	movs	r1, #0
   bc4dc:	f7fc ba22 	b.w	b8924 <hal_i2c_peek>

000bc4e0 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bc4e0:	7c00      	ldrb	r0, [r0, #16]
   bc4e2:	2100      	movs	r1, #0
   bc4e4:	f7fc ba26 	b.w	b8934 <hal_i2c_flush>

000bc4e8 <_ZN7TwoWireD0Ev>:
   bc4e8:	b510      	push	{r4, lr}
   bc4ea:	2114      	movs	r1, #20
   bc4ec:	4604      	mov	r4, r0
   bc4ee:	f7f7 fdd6 	bl	b409e <_ZdlPvj>
   bc4f2:	4620      	mov	r0, r4
   bc4f4:	bd10      	pop	{r4, pc}
	...

000bc4f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bc4f8:	b510      	push	{r4, lr}
   bc4fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bc4fe:	4604      	mov	r4, r0
   bc500:	4608      	mov	r0, r1
   bc502:	2100      	movs	r1, #0
   bc504:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bc508:	4b03      	ldr	r3, [pc, #12]	; (bc518 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bc50a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bc50c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bc50e:	4611      	mov	r1, r2
   bc510:	f7fc fa20 	bl	b8954 <hal_i2c_init>
}
   bc514:	4620      	mov	r0, r4
   bc516:	bd10      	pop	{r4, pc}
   bc518:	000c0bcc 	.word	0x000c0bcc

000bc51c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bc51c:	7c00      	ldrb	r0, [r0, #16]
   bc51e:	2200      	movs	r2, #0
   bc520:	f7fc b9c8 	b.w	b88b4 <hal_i2c_set_speed>

000bc524 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bc524:	2300      	movs	r3, #0
   bc526:	7c00      	ldrb	r0, [r0, #16]
   bc528:	461a      	mov	r2, r3
   bc52a:	4619      	mov	r1, r3
   bc52c:	f7fc b9ca 	b.w	b88c4 <hal_i2c_begin>

000bc530 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bc530:	7c00      	ldrb	r0, [r0, #16]
   bc532:	2200      	movs	r2, #0
   bc534:	f7fc b9ce 	b.w	b88d4 <hal_i2c_begin_transmission>

000bc538 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bc538:	b2c9      	uxtb	r1, r1
   bc53a:	f7ff bff9 	b.w	bc530 <_ZN7TwoWire17beginTransmissionEh>

000bc53e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bc53e:	7c00      	ldrb	r0, [r0, #16]
   bc540:	2200      	movs	r2, #0
   bc542:	f7fc b9cf 	b.w	b88e4 <hal_i2c_end_transmission>

000bc546 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bc546:	2101      	movs	r1, #1
   bc548:	f7ff bff9 	b.w	bc53e <_ZN7TwoWire15endTransmissionEh>

000bc54c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bc54c:	2300      	movs	r3, #0
   bc54e:	6840      	ldr	r0, [r0, #4]
   bc550:	461a      	mov	r2, r3
   bc552:	f7fc bae3 	b.w	b8b1c <network_connect>

000bc556 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bc556:	6840      	ldr	r0, [r0, #4]
   bc558:	2200      	movs	r2, #0
   bc55a:	2102      	movs	r1, #2
   bc55c:	f7fc baee 	b.w	b8b3c <network_disconnect>

000bc560 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bc560:	2200      	movs	r2, #0
   bc562:	6840      	ldr	r0, [r0, #4]
   bc564:	4611      	mov	r1, r2
   bc566:	f7fc bae1 	b.w	b8b2c <network_connecting>

000bc56a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bc56a:	2200      	movs	r2, #0
   bc56c:	6840      	ldr	r0, [r0, #4]
   bc56e:	4611      	mov	r1, r2
   bc570:	f7fc baec 	b.w	b8b4c <network_ready>

000bc574 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bc574:	2300      	movs	r3, #0
   bc576:	6840      	ldr	r0, [r0, #4]
   bc578:	461a      	mov	r2, r3
   bc57a:	4619      	mov	r1, r3
   bc57c:	f7fc baee 	b.w	b8b5c <network_on>

000bc580 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bc580:	2300      	movs	r3, #0
   bc582:	6840      	ldr	r0, [r0, #4]
   bc584:	461a      	mov	r2, r3
   bc586:	4619      	mov	r1, r3
   bc588:	f7fc baf0 	b.w	b8b6c <network_off>

000bc58c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bc58c:	6840      	ldr	r0, [r0, #4]
   bc58e:	2100      	movs	r1, #0
   bc590:	f7fc bb14 	b.w	b8bbc <network_is_on>

000bc594 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bc594:	6840      	ldr	r0, [r0, #4]
   bc596:	2100      	movs	r1, #0
   bc598:	f7fc bb18 	b.w	b8bcc <network_is_off>

000bc59c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bc59c:	6840      	ldr	r0, [r0, #4]
   bc59e:	2200      	movs	r2, #0
   bc5a0:	f081 0101 	eor.w	r1, r1, #1
   bc5a4:	f7fc baea 	b.w	b8b7c <network_listen>

000bc5a8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bc5a8:	6840      	ldr	r0, [r0, #4]
   bc5aa:	2200      	movs	r2, #0
   bc5ac:	f7fc baf6 	b.w	b8b9c <network_set_listen_timeout>

000bc5b0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bc5b0:	2200      	movs	r2, #0
   bc5b2:	6840      	ldr	r0, [r0, #4]
   bc5b4:	4611      	mov	r1, r2
   bc5b6:	f7fc baf9 	b.w	b8bac <network_get_listen_timeout>

000bc5ba <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bc5ba:	2200      	movs	r2, #0
   bc5bc:	6840      	ldr	r0, [r0, #4]
   bc5be:	4611      	mov	r1, r2
   bc5c0:	f7fc bae4 	b.w	b8b8c <network_listening>

000bc5c4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bc5c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc5c8:	b095      	sub	sp, #84	; 0x54
   bc5ca:	4614      	mov	r4, r2
   bc5cc:	460d      	mov	r5, r1
   bc5ce:	4607      	mov	r7, r0
    IPAddress addr;
   bc5d0:	f7ff fdea 	bl	bc1a8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bc5d4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bc5d6:	221c      	movs	r2, #28
   bc5d8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bc5da:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bc5dc:	f000 ffe1 	bl	bd5a2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bc5e0:	2340      	movs	r3, #64	; 0x40
   bc5e2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bc5e4:	4620      	mov	r0, r4
   bc5e6:	466b      	mov	r3, sp
   bc5e8:	aa0c      	add	r2, sp, #48	; 0x30
   bc5ea:	2100      	movs	r1, #0
   bc5ec:	f7fb ff9e 	bl	b852c <netdb_getaddrinfo>
    if (!r) {
   bc5f0:	4604      	mov	r4, r0
   bc5f2:	2800      	cmp	r0, #0
   bc5f4:	d14b      	bne.n	bc68e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bc5f6:	4602      	mov	r2, r0
   bc5f8:	2101      	movs	r1, #1
   bc5fa:	6868      	ldr	r0, [r5, #4]
   bc5fc:	f7fc faa6 	bl	b8b4c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bc600:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bc602:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bc604:	4622      	mov	r2, r4
   bc606:	6868      	ldr	r0, [r5, #4]
   bc608:	f7fc faa0 	bl	b8b4c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bc60c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bc60e:	4681      	mov	r9, r0
        bool ok = false;
   bc610:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bc612:	2e00      	cmp	r6, #0
   bc614:	d03b      	beq.n	bc68e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bc616:	2900      	cmp	r1, #0
   bc618:	d139      	bne.n	bc68e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bc61a:	6873      	ldr	r3, [r6, #4]
   bc61c:	2b02      	cmp	r3, #2
   bc61e:	d003      	beq.n	bc628 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bc620:	2b0a      	cmp	r3, #10
   bc622:	d011      	beq.n	bc648 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bc624:	69f6      	ldr	r6, [r6, #28]
   bc626:	e7f4      	b.n	bc612 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bc628:	f1b8 0f00 	cmp.w	r8, #0
   bc62c:	d0fa      	beq.n	bc624 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bc62e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bc630:	a806      	add	r0, sp, #24
   bc632:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bc634:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bc636:	f7ff fde5 	bl	bc204 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bc63a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bc63c:	1d3c      	adds	r4, r7, #4
   bc63e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc640:	682b      	ldr	r3, [r5, #0]
   bc642:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bc644:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bc646:	e7ed      	b.n	bc624 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bc648:	f1b9 0f00 	cmp.w	r9, #0
   bc64c:	d0ea      	beq.n	bc624 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bc64e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bc650:	2210      	movs	r2, #16
   bc652:	a801      	add	r0, sp, #4
   bc654:	f000 ffa5 	bl	bd5a2 <memset>
                    a.v = 6;
   bc658:	2306      	movs	r3, #6
   bc65a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bc65e:	ad01      	add	r5, sp, #4
   bc660:	f104 0308 	add.w	r3, r4, #8
   bc664:	3418      	adds	r4, #24
   bc666:	6818      	ldr	r0, [r3, #0]
   bc668:	6859      	ldr	r1, [r3, #4]
   bc66a:	462a      	mov	r2, r5
   bc66c:	c203      	stmia	r2!, {r0, r1}
   bc66e:	3308      	adds	r3, #8
   bc670:	42a3      	cmp	r3, r4
   bc672:	4615      	mov	r5, r2
   bc674:	d1f7      	bne.n	bc666 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bc676:	a901      	add	r1, sp, #4
   bc678:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bc67a:	ad07      	add	r5, sp, #28
   bc67c:	f7ff fda2 	bl	bc1c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bc680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bc682:	1d3c      	adds	r4, r7, #4
   bc684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc686:	682b      	ldr	r3, [r5, #0]
   bc688:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bc68a:	4649      	mov	r1, r9
   bc68c:	e7ca      	b.n	bc624 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bc68e:	9800      	ldr	r0, [sp, #0]
   bc690:	f7fb ff44 	bl	b851c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bc694:	4638      	mov	r0, r7
   bc696:	b015      	add	sp, #84	; 0x54
   bc698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bc69c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bc69c:	4b02      	ldr	r3, [pc, #8]	; (bc6a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bc69e:	4a03      	ldr	r2, [pc, #12]	; (bc6ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bc6a0:	601a      	str	r2, [r3, #0]
   bc6a2:	2200      	movs	r2, #0
   bc6a4:	605a      	str	r2, [r3, #4]

} // spark
   bc6a6:	4770      	bx	lr
   bc6a8:	2003e720 	.word	0x2003e720
   bc6ac:	000c0bf4 	.word	0x000c0bf4

000bc6b0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bc6b0:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   bc6b2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bc6b4:	d902      	bls.n	bc6bc <pinAvailable+0xc>
    return false;
   bc6b6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bc6b8:	b002      	add	sp, #8
   bc6ba:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bc6bc:	f1a0 030b 	sub.w	r3, r0, #11
   bc6c0:	2b02      	cmp	r3, #2
   bc6c2:	d81a      	bhi.n	bc6fa <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bc6c4:	4c17      	ldr	r4, [pc, #92]	; (bc724 <pinAvailable+0x74>)
   bc6c6:	7821      	ldrb	r1, [r4, #0]
   bc6c8:	f3bf 8f5b 	dmb	ish
   bc6cc:	f011 0101 	ands.w	r1, r1, #1
   bc6d0:	d10b      	bne.n	bc6ea <pinAvailable+0x3a>
   bc6d2:	4620      	mov	r0, r4
   bc6d4:	9101      	str	r1, [sp, #4]
   bc6d6:	f7f7 fcf1 	bl	b40bc <__cxa_guard_acquire>
   bc6da:	9901      	ldr	r1, [sp, #4]
   bc6dc:	b128      	cbz	r0, bc6ea <pinAvailable+0x3a>
   bc6de:	4812      	ldr	r0, [pc, #72]	; (bc728 <pinAvailable+0x78>)
   bc6e0:	f7fc fb58 	bl	b8d94 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bc6e4:	4620      	mov	r0, r4
   bc6e6:	f7f7 fcee 	bl	b40c6 <__cxa_guard_release>
   bc6ea:	4b0f      	ldr	r3, [pc, #60]	; (bc728 <pinAvailable+0x78>)
   bc6ec:	7818      	ldrb	r0, [r3, #0]
   bc6ee:	f7fc f951 	bl	b8994 <hal_spi_is_enabled>
   bc6f2:	2800      	cmp	r0, #0
   bc6f4:	d1df      	bne.n	bc6b6 <pinAvailable+0x6>
  return true; // 'pin' is available
   bc6f6:	2001      	movs	r0, #1
   bc6f8:	e7de      	b.n	bc6b8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bc6fa:	2801      	cmp	r0, #1
   bc6fc:	d809      	bhi.n	bc712 <pinAvailable+0x62>
   bc6fe:	f000 f8c1 	bl	bc884 <_Z19__fetch_global_Wirev>
   bc702:	2100      	movs	r1, #0
   bc704:	7c00      	ldrb	r0, [r0, #16]
   bc706:	f7fc f91d 	bl	b8944 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bc70a:	f080 0001 	eor.w	r0, r0, #1
   bc70e:	b2c0      	uxtb	r0, r0
   bc710:	e7d2      	b.n	bc6b8 <pinAvailable+0x8>
   bc712:	3809      	subs	r0, #9
   bc714:	2801      	cmp	r0, #1
   bc716:	d8ee      	bhi.n	bc6f6 <pinAvailable+0x46>
   bc718:	f000 f878 	bl	bc80c <_Z22__fetch_global_Serial1v>
   bc71c:	7c00      	ldrb	r0, [r0, #16]
   bc71e:	f7fc f8a9 	bl	b8874 <hal_usart_is_enabled>
   bc722:	e7f2      	b.n	bc70a <pinAvailable+0x5a>
   bc724:	2003e638 	.word	0x2003e638
   bc728:	2003e63c 	.word	0x2003e63c

000bc72c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bc72c:	2825      	cmp	r0, #37	; 0x25
{
   bc72e:	b538      	push	{r3, r4, r5, lr}
   bc730:	4604      	mov	r4, r0
   bc732:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bc734:	d80a      	bhi.n	bc74c <pinMode+0x20>
   bc736:	29ff      	cmp	r1, #255	; 0xff
   bc738:	d008      	beq.n	bc74c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bc73a:	f7ff ffb9 	bl	bc6b0 <pinAvailable>
   bc73e:	b128      	cbz	r0, bc74c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bc740:	4629      	mov	r1, r5
   bc742:	4620      	mov	r0, r4
}
   bc744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bc748:	f7fb bf00 	b.w	b854c <HAL_Pin_Mode>
}
   bc74c:	bd38      	pop	{r3, r4, r5, pc}

000bc74e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bc74e:	b538      	push	{r3, r4, r5, lr}
   bc750:	4604      	mov	r4, r0
   bc752:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bc754:	f7fb ff02 	bl	b855c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bc758:	28ff      	cmp	r0, #255	; 0xff
   bc75a:	d010      	beq.n	bc77e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bc75c:	2806      	cmp	r0, #6
   bc75e:	d804      	bhi.n	bc76a <digitalWrite+0x1c>
   bc760:	234d      	movs	r3, #77	; 0x4d
   bc762:	fa23 f000 	lsr.w	r0, r3, r0
   bc766:	07c3      	lsls	r3, r0, #31
   bc768:	d409      	bmi.n	bc77e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bc76a:	4620      	mov	r0, r4
   bc76c:	f7ff ffa0 	bl	bc6b0 <pinAvailable>
   bc770:	b128      	cbz	r0, bc77e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bc772:	4629      	mov	r1, r5
   bc774:	4620      	mov	r0, r4
}
   bc776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bc77a:	f7fb bef7 	b.w	b856c <HAL_GPIO_Write>
}
   bc77e:	bd38      	pop	{r3, r4, r5, pc}

000bc780 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bc780:	b510      	push	{r4, lr}
   bc782:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bc784:	f7fb feea 	bl	b855c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bc788:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bc78a:	b2db      	uxtb	r3, r3
   bc78c:	2b01      	cmp	r3, #1
   bc78e:	d908      	bls.n	bc7a2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bc790:	4620      	mov	r0, r4
   bc792:	f7ff ff8d 	bl	bc6b0 <pinAvailable>
   bc796:	b120      	cbz	r0, bc7a2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bc798:	4620      	mov	r0, r4
}
   bc79a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bc79e:	f7fb beed 	b.w	b857c <HAL_GPIO_Read>
}
   bc7a2:	2000      	movs	r0, #0
   bc7a4:	bd10      	pop	{r4, pc}

000bc7a6 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bc7a6:	280d      	cmp	r0, #13
{
   bc7a8:	b510      	push	{r4, lr}
   bc7aa:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bc7ac:	bf9c      	itt	ls
   bc7ae:	340e      	addls	r4, #14
   bc7b0:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bc7b2:	4620      	mov	r0, r4
   bc7b4:	f7ff ff7c 	bl	bc6b0 <pinAvailable>
   bc7b8:	b150      	cbz	r0, bc7d0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bc7ba:	2103      	movs	r1, #3
   bc7bc:	4620      	mov	r0, r4
   bc7be:	f7fb febd 	bl	b853c <HAL_Validate_Pin_Function>
   bc7c2:	2803      	cmp	r0, #3
   bc7c4:	d104      	bne.n	bc7d0 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bc7c6:	4620      	mov	r0, r4
}
   bc7c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bc7cc:	f7fb bede 	b.w	b858c <hal_adc_read>
}
   bc7d0:	2000      	movs	r0, #0
   bc7d2:	bd10      	pop	{r4, pc}

000bc7d4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bc7d4:	4770      	bx	lr
	...

000bc7d8 <_Z20acquireSerial1Bufferv>:
{
   bc7d8:	b538      	push	{r3, r4, r5, lr}
   bc7da:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bc7dc:	2514      	movs	r5, #20
   bc7de:	462a      	mov	r2, r5
   bc7e0:	2100      	movs	r1, #0
   bc7e2:	f000 fede 	bl	bd5a2 <memset>
   bc7e6:	8025      	strh	r5, [r4, #0]
   bc7e8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bc7ea:	4907      	ldr	r1, [pc, #28]	; (bc808 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bc7ec:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bc7ee:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bc7f0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bc7f2:	f000 f86b 	bl	bc8cc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bc7f6:	4904      	ldr	r1, [pc, #16]	; (bc808 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bc7f8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bc7fa:	4628      	mov	r0, r5
   bc7fc:	f000 f866 	bl	bc8cc <_ZnajRKSt9nothrow_t>
    };
   bc800:	60e0      	str	r0, [r4, #12]
}
   bc802:	4620      	mov	r0, r4
   bc804:	bd38      	pop	{r3, r4, r5, pc}
   bc806:	bf00      	nop
   bc808:	000c0c28 	.word	0x000c0c28

000bc80c <_Z22__fetch_global_Serial1v>:
{
   bc80c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bc80e:	4d0e      	ldr	r5, [pc, #56]	; (bc848 <_Z22__fetch_global_Serial1v+0x3c>)
   bc810:	7829      	ldrb	r1, [r5, #0]
   bc812:	f3bf 8f5b 	dmb	ish
   bc816:	f011 0401 	ands.w	r4, r1, #1
{
   bc81a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bc81c:	d111      	bne.n	bc842 <_Z22__fetch_global_Serial1v+0x36>
   bc81e:	4628      	mov	r0, r5
   bc820:	f7f7 fc4c 	bl	b40bc <__cxa_guard_acquire>
   bc824:	b168      	cbz	r0, bc842 <_Z22__fetch_global_Serial1v+0x36>
   bc826:	a801      	add	r0, sp, #4
   bc828:	f7ff ffd6 	bl	bc7d8 <_Z20acquireSerial1Bufferv>
   bc82c:	aa01      	add	r2, sp, #4
   bc82e:	4621      	mov	r1, r4
   bc830:	4806      	ldr	r0, [pc, #24]	; (bc84c <_Z22__fetch_global_Serial1v+0x40>)
   bc832:	f7ff fe05 	bl	bc440 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bc836:	4628      	mov	r0, r5
   bc838:	f7f7 fc45 	bl	b40c6 <__cxa_guard_release>
   bc83c:	4804      	ldr	r0, [pc, #16]	; (bc850 <_Z22__fetch_global_Serial1v+0x44>)
   bc83e:	f000 fe6b 	bl	bd518 <atexit>
    return serial1;
}
   bc842:	4802      	ldr	r0, [pc, #8]	; (bc84c <_Z22__fetch_global_Serial1v+0x40>)
   bc844:	b007      	add	sp, #28
   bc846:	bd30      	pop	{r4, r5, pc}
   bc848:	2003e728 	.word	0x2003e728
   bc84c:	2003e72c 	.word	0x2003e72c
   bc850:	000bc7d5 	.word	0x000bc7d5

000bc854 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bc854:	4770      	bx	lr
	...

000bc858 <_Z17acquireWireBufferv>:
{
   bc858:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bc85a:	2520      	movs	r5, #32
   bc85c:	2314      	movs	r3, #20
{
   bc85e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bc860:	6003      	str	r3, [r0, #0]
   bc862:	6085      	str	r5, [r0, #8]
   bc864:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bc866:	4906      	ldr	r1, [pc, #24]	; (bc880 <_Z17acquireWireBufferv+0x28>)
   bc868:	4628      	mov	r0, r5
   bc86a:	f000 f82f 	bl	bc8cc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bc86e:	4904      	ldr	r1, [pc, #16]	; (bc880 <_Z17acquireWireBufferv+0x28>)
	};
   bc870:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bc872:	4628      	mov	r0, r5
   bc874:	f000 f82a 	bl	bc8cc <_ZnajRKSt9nothrow_t>
	};
   bc878:	60e0      	str	r0, [r4, #12]
}
   bc87a:	4620      	mov	r0, r4
   bc87c:	bd38      	pop	{r3, r4, r5, pc}
   bc87e:	bf00      	nop
   bc880:	000c0c28 	.word	0x000c0c28

000bc884 <_Z19__fetch_global_Wirev>:
{
   bc884:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bc886:	4d0e      	ldr	r5, [pc, #56]	; (bc8c0 <_Z19__fetch_global_Wirev+0x3c>)
   bc888:	7829      	ldrb	r1, [r5, #0]
   bc88a:	f3bf 8f5b 	dmb	ish
   bc88e:	f011 0401 	ands.w	r4, r1, #1
{
   bc892:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bc894:	d111      	bne.n	bc8ba <_Z19__fetch_global_Wirev+0x36>
   bc896:	4628      	mov	r0, r5
   bc898:	f7f7 fc10 	bl	b40bc <__cxa_guard_acquire>
   bc89c:	b168      	cbz	r0, bc8ba <_Z19__fetch_global_Wirev+0x36>
   bc89e:	a801      	add	r0, sp, #4
   bc8a0:	f7ff ffda 	bl	bc858 <_Z17acquireWireBufferv>
   bc8a4:	aa01      	add	r2, sp, #4
   bc8a6:	4621      	mov	r1, r4
   bc8a8:	4806      	ldr	r0, [pc, #24]	; (bc8c4 <_Z19__fetch_global_Wirev+0x40>)
   bc8aa:	f7ff fe25 	bl	bc4f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bc8ae:	4628      	mov	r0, r5
   bc8b0:	f7f7 fc09 	bl	b40c6 <__cxa_guard_release>
   bc8b4:	4804      	ldr	r0, [pc, #16]	; (bc8c8 <_Z19__fetch_global_Wirev+0x44>)
   bc8b6:	f000 fe2f 	bl	bd518 <atexit>
	return wire;
}
   bc8ba:	4802      	ldr	r0, [pc, #8]	; (bc8c4 <_Z19__fetch_global_Wirev+0x40>)
   bc8bc:	b007      	add	sp, #28
   bc8be:	bd30      	pop	{r4, r5, pc}
   bc8c0:	2003e744 	.word	0x2003e744
   bc8c4:	2003e748 	.word	0x2003e748
   bc8c8:	000bc855 	.word	0x000bc855

000bc8cc <_ZnajRKSt9nothrow_t>:
   bc8cc:	f7f7 bbe5 	b.w	b409a <_Znaj>

000bc8d0 <_ZSt20__throw_length_errorPKc>:
   bc8d0:	b508      	push	{r3, lr}
   bc8d2:	f7fc f9eb 	bl	b8cac <abort>

000bc8d6 <_ZSt25__throw_bad_function_callv>:
   bc8d6:	b508      	push	{r3, lr}
   bc8d8:	f7fc f9e8 	bl	b8cac <abort>

000bc8dc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bc8dc:	4901      	ldr	r1, [pc, #4]	; (bc8e4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bc8de:	f000 b8f9 	b.w	bcad4 <_ZNKSt9type_infoeqERKS_>
   bc8e2:	bf00      	nop
   bc8e4:	000c0c44 	.word	0x000c0c44

000bc8e8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bc8e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bc8ea:	2400      	movs	r4, #0
   bc8ec:	2310      	movs	r3, #16
   bc8ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bc8f2:	6803      	ldr	r3, [r0, #0]
   bc8f4:	4615      	mov	r5, r2
   bc8f6:	699e      	ldr	r6, [r3, #24]
   bc8f8:	6812      	ldr	r2, [r2, #0]
   bc8fa:	466b      	mov	r3, sp
   bc8fc:	e9cd 4400 	strd	r4, r4, [sp]
   bc900:	47b0      	blx	r6
   bc902:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bc906:	f003 0306 	and.w	r3, r3, #6
   bc90a:	2b06      	cmp	r3, #6
   bc90c:	bf03      	ittte	eq
   bc90e:	9b00      	ldreq	r3, [sp, #0]
   bc910:	602b      	streq	r3, [r5, #0]
   bc912:	2001      	moveq	r0, #1
   bc914:	4620      	movne	r0, r4
   bc916:	b004      	add	sp, #16
   bc918:	bd70      	pop	{r4, r5, r6, pc}

000bc91a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bc91a:	9800      	ldr	r0, [sp, #0]
   bc91c:	4290      	cmp	r0, r2
   bc91e:	bf14      	ite	ne
   bc920:	2001      	movne	r0, #1
   bc922:	2006      	moveq	r0, #6
   bc924:	4770      	bx	lr
	...

000bc928 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bc928:	b510      	push	{r4, lr}
   bc92a:	4b03      	ldr	r3, [pc, #12]	; (bc938 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bc92c:	6003      	str	r3, [r0, #0]
   bc92e:	4604      	mov	r4, r0
   bc930:	f000 f8cd 	bl	bcace <_ZNSt9type_infoD1Ev>
   bc934:	4620      	mov	r0, r4
   bc936:	bd10      	pop	{r4, pc}
   bc938:	000c0c84 	.word	0x000c0c84

000bc93c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bc93c:	b510      	push	{r4, lr}
   bc93e:	4604      	mov	r4, r0
   bc940:	f7ff fff2 	bl	bc928 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bc944:	4620      	mov	r0, r4
   bc946:	2108      	movs	r1, #8
   bc948:	f7f7 fba9 	bl	b409e <_ZdlPvj>
   bc94c:	4620      	mov	r0, r4
   bc94e:	bd10      	pop	{r4, pc}

000bc950 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bc950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc954:	461f      	mov	r7, r3
   bc956:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bc95a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bc95e:	4598      	cmp	r8, r3
   bc960:	4606      	mov	r6, r0
   bc962:	4615      	mov	r5, r2
   bc964:	d107      	bne.n	bc976 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bc966:	9907      	ldr	r1, [sp, #28]
   bc968:	f000 f8b4 	bl	bcad4 <_ZNKSt9type_infoeqERKS_>
   bc96c:	b118      	cbz	r0, bc976 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bc96e:	7165      	strb	r5, [r4, #5]
   bc970:	2000      	movs	r0, #0
   bc972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc976:	4639      	mov	r1, r7
   bc978:	4630      	mov	r0, r6
   bc97a:	f000 f8ab 	bl	bcad4 <_ZNKSt9type_infoeqERKS_>
   bc97e:	2800      	cmp	r0, #0
   bc980:	d0f6      	beq.n	bc970 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bc982:	2301      	movs	r3, #1
   bc984:	f8c4 8000 	str.w	r8, [r4]
   bc988:	7125      	strb	r5, [r4, #4]
   bc98a:	71a3      	strb	r3, [r4, #6]
   bc98c:	e7f0      	b.n	bc970 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bc98e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bc98e:	b538      	push	{r3, r4, r5, lr}
   bc990:	4615      	mov	r5, r2
   bc992:	461c      	mov	r4, r3
   bc994:	f000 f89e 	bl	bcad4 <_ZNKSt9type_infoeqERKS_>
   bc998:	b120      	cbz	r0, bc9a4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bc99a:	2308      	movs	r3, #8
   bc99c:	60e3      	str	r3, [r4, #12]
   bc99e:	2306      	movs	r3, #6
   bc9a0:	6025      	str	r5, [r4, #0]
   bc9a2:	7123      	strb	r3, [r4, #4]
   bc9a4:	bd38      	pop	{r3, r4, r5, pc}

000bc9a6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bc9a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bc9a8:	4605      	mov	r5, r0
   bc9aa:	460c      	mov	r4, r1
   bc9ac:	9201      	str	r2, [sp, #4]
   bc9ae:	461e      	mov	r6, r3
   bc9b0:	f000 f890 	bl	bcad4 <_ZNKSt9type_infoeqERKS_>
   bc9b4:	b950      	cbnz	r0, bc9cc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bc9b6:	2e03      	cmp	r6, #3
   bc9b8:	d808      	bhi.n	bc9cc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bc9ba:	6823      	ldr	r3, [r4, #0]
   bc9bc:	9a01      	ldr	r2, [sp, #4]
   bc9be:	695b      	ldr	r3, [r3, #20]
   bc9c0:	4629      	mov	r1, r5
   bc9c2:	4620      	mov	r0, r4
   bc9c4:	b002      	add	sp, #8
   bc9c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bc9ca:	4718      	bx	r3
   bc9cc:	b002      	add	sp, #8
   bc9ce:	bd70      	pop	{r4, r5, r6, pc}

000bc9d0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bc9d0:	b510      	push	{r4, lr}
   bc9d2:	4b03      	ldr	r3, [pc, #12]	; (bc9e0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bc9d4:	6003      	str	r3, [r0, #0]
   bc9d6:	4604      	mov	r4, r0
   bc9d8:	f7ff ffa6 	bl	bc928 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bc9dc:	4620      	mov	r0, r4
   bc9de:	bd10      	pop	{r4, pc}
   bc9e0:	000c0ce4 	.word	0x000c0ce4

000bc9e4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bc9e4:	b510      	push	{r4, lr}
   bc9e6:	4604      	mov	r4, r0
   bc9e8:	f7ff fff2 	bl	bc9d0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bc9ec:	4620      	mov	r0, r4
   bc9ee:	210c      	movs	r1, #12
   bc9f0:	f7f7 fb55 	bl	b409e <_ZdlPvj>
   bc9f4:	4620      	mov	r0, r4
   bc9f6:	bd10      	pop	{r4, pc}

000bc9f8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bc9f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bc9fa:	9f08      	ldr	r7, [sp, #32]
   bc9fc:	4297      	cmp	r7, r2
   bc9fe:	4605      	mov	r5, r0
   bca00:	460e      	mov	r6, r1
   bca02:	4614      	mov	r4, r2
   bca04:	d00a      	beq.n	bca1c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bca06:	68a8      	ldr	r0, [r5, #8]
   bca08:	6802      	ldr	r2, [r0, #0]
   bca0a:	9708      	str	r7, [sp, #32]
   bca0c:	6a15      	ldr	r5, [r2, #32]
   bca0e:	4631      	mov	r1, r6
   bca10:	4622      	mov	r2, r4
   bca12:	46ac      	mov	ip, r5
   bca14:	b003      	add	sp, #12
   bca16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bca1a:	4760      	bx	ip
   bca1c:	4619      	mov	r1, r3
   bca1e:	9301      	str	r3, [sp, #4]
   bca20:	f000 f858 	bl	bcad4 <_ZNKSt9type_infoeqERKS_>
   bca24:	9b01      	ldr	r3, [sp, #4]
   bca26:	2800      	cmp	r0, #0
   bca28:	d0ed      	beq.n	bca06 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bca2a:	2006      	movs	r0, #6
   bca2c:	b003      	add	sp, #12
   bca2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bca30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bca30:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bca34:	460d      	mov	r5, r1
   bca36:	4619      	mov	r1, r3
   bca38:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bca3c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bca40:	4681      	mov	r9, r0
   bca42:	4617      	mov	r7, r2
   bca44:	4698      	mov	r8, r3
   bca46:	f000 f845 	bl	bcad4 <_ZNKSt9type_infoeqERKS_>
   bca4a:	b190      	cbz	r0, bca72 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bca4c:	2d00      	cmp	r5, #0
   bca4e:	6034      	str	r4, [r6, #0]
   bca50:	7137      	strb	r7, [r6, #4]
   bca52:	db09      	blt.n	bca68 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bca54:	1961      	adds	r1, r4, r5
   bca56:	458a      	cmp	sl, r1
   bca58:	bf0c      	ite	eq
   bca5a:	2106      	moveq	r1, #6
   bca5c:	2101      	movne	r1, #1
   bca5e:	71b1      	strb	r1, [r6, #6]
   bca60:	2000      	movs	r0, #0
   bca62:	b001      	add	sp, #4
   bca64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bca68:	3502      	adds	r5, #2
   bca6a:	d1f9      	bne.n	bca60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bca6c:	2301      	movs	r3, #1
   bca6e:	71b3      	strb	r3, [r6, #6]
   bca70:	e7f6      	b.n	bca60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bca72:	4554      	cmp	r4, sl
   bca74:	d106      	bne.n	bca84 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bca76:	4659      	mov	r1, fp
   bca78:	4648      	mov	r0, r9
   bca7a:	f000 f82b 	bl	bcad4 <_ZNKSt9type_infoeqERKS_>
   bca7e:	b108      	cbz	r0, bca84 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bca80:	7177      	strb	r7, [r6, #5]
   bca82:	e7ed      	b.n	bca60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bca84:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bca88:	6803      	ldr	r3, [r0, #0]
   bca8a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bca8e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bca92:	69dc      	ldr	r4, [r3, #28]
   bca94:	463a      	mov	r2, r7
   bca96:	4643      	mov	r3, r8
   bca98:	4629      	mov	r1, r5
   bca9a:	46a4      	mov	ip, r4
   bca9c:	b001      	add	sp, #4
   bca9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcaa2:	4760      	bx	ip

000bcaa4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bcaa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcaa8:	4607      	mov	r7, r0
   bcaaa:	460c      	mov	r4, r1
   bcaac:	4615      	mov	r5, r2
   bcaae:	461e      	mov	r6, r3
   bcab0:	f7ff ff6d 	bl	bc98e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bcab4:	b948      	cbnz	r0, bcaca <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bcab6:	68b8      	ldr	r0, [r7, #8]
   bcab8:	6803      	ldr	r3, [r0, #0]
   bcaba:	699f      	ldr	r7, [r3, #24]
   bcabc:	462a      	mov	r2, r5
   bcabe:	4633      	mov	r3, r6
   bcac0:	4621      	mov	r1, r4
   bcac2:	46bc      	mov	ip, r7
   bcac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bcac8:	4760      	bx	ip
   bcaca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bcace <_ZNSt9type_infoD1Ev>:
   bcace:	4770      	bx	lr

000bcad0 <_ZNKSt9type_info14__is_pointer_pEv>:
   bcad0:	2000      	movs	r0, #0
   bcad2:	4770      	bx	lr

000bcad4 <_ZNKSt9type_infoeqERKS_>:
   bcad4:	4281      	cmp	r1, r0
   bcad6:	b508      	push	{r3, lr}
   bcad8:	d00e      	beq.n	bcaf8 <_ZNKSt9type_infoeqERKS_+0x24>
   bcada:	6840      	ldr	r0, [r0, #4]
   bcadc:	7803      	ldrb	r3, [r0, #0]
   bcade:	2b2a      	cmp	r3, #42	; 0x2a
   bcae0:	d00c      	beq.n	bcafc <_ZNKSt9type_infoeqERKS_+0x28>
   bcae2:	6849      	ldr	r1, [r1, #4]
   bcae4:	780b      	ldrb	r3, [r1, #0]
   bcae6:	2b2a      	cmp	r3, #42	; 0x2a
   bcae8:	bf08      	it	eq
   bcaea:	3101      	addeq	r1, #1
   bcaec:	f000 fd9f 	bl	bd62e <strcmp>
   bcaf0:	fab0 f080 	clz	r0, r0
   bcaf4:	0940      	lsrs	r0, r0, #5
   bcaf6:	bd08      	pop	{r3, pc}
   bcaf8:	2001      	movs	r0, #1
   bcafa:	e7fc      	b.n	bcaf6 <_ZNKSt9type_infoeqERKS_+0x22>
   bcafc:	2000      	movs	r0, #0
   bcafe:	e7fa      	b.n	bcaf6 <_ZNKSt9type_infoeqERKS_+0x22>

000bcb00 <__aeabi_drsub>:
   bcb00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bcb04:	e002      	b.n	bcb0c <__adddf3>
   bcb06:	bf00      	nop

000bcb08 <__aeabi_dsub>:
   bcb08:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bcb0c <__adddf3>:
   bcb0c:	b530      	push	{r4, r5, lr}
   bcb0e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bcb12:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bcb16:	ea94 0f05 	teq	r4, r5
   bcb1a:	bf08      	it	eq
   bcb1c:	ea90 0f02 	teqeq	r0, r2
   bcb20:	bf1f      	itttt	ne
   bcb22:	ea54 0c00 	orrsne.w	ip, r4, r0
   bcb26:	ea55 0c02 	orrsne.w	ip, r5, r2
   bcb2a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bcb2e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bcb32:	f000 80e2 	beq.w	bccfa <__adddf3+0x1ee>
   bcb36:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bcb3a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bcb3e:	bfb8      	it	lt
   bcb40:	426d      	neglt	r5, r5
   bcb42:	dd0c      	ble.n	bcb5e <__adddf3+0x52>
   bcb44:	442c      	add	r4, r5
   bcb46:	ea80 0202 	eor.w	r2, r0, r2
   bcb4a:	ea81 0303 	eor.w	r3, r1, r3
   bcb4e:	ea82 0000 	eor.w	r0, r2, r0
   bcb52:	ea83 0101 	eor.w	r1, r3, r1
   bcb56:	ea80 0202 	eor.w	r2, r0, r2
   bcb5a:	ea81 0303 	eor.w	r3, r1, r3
   bcb5e:	2d36      	cmp	r5, #54	; 0x36
   bcb60:	bf88      	it	hi
   bcb62:	bd30      	pophi	{r4, r5, pc}
   bcb64:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bcb68:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bcb6c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bcb70:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bcb74:	d002      	beq.n	bcb7c <__adddf3+0x70>
   bcb76:	4240      	negs	r0, r0
   bcb78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bcb7c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bcb80:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bcb84:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bcb88:	d002      	beq.n	bcb90 <__adddf3+0x84>
   bcb8a:	4252      	negs	r2, r2
   bcb8c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bcb90:	ea94 0f05 	teq	r4, r5
   bcb94:	f000 80a7 	beq.w	bcce6 <__adddf3+0x1da>
   bcb98:	f1a4 0401 	sub.w	r4, r4, #1
   bcb9c:	f1d5 0e20 	rsbs	lr, r5, #32
   bcba0:	db0d      	blt.n	bcbbe <__adddf3+0xb2>
   bcba2:	fa02 fc0e 	lsl.w	ip, r2, lr
   bcba6:	fa22 f205 	lsr.w	r2, r2, r5
   bcbaa:	1880      	adds	r0, r0, r2
   bcbac:	f141 0100 	adc.w	r1, r1, #0
   bcbb0:	fa03 f20e 	lsl.w	r2, r3, lr
   bcbb4:	1880      	adds	r0, r0, r2
   bcbb6:	fa43 f305 	asr.w	r3, r3, r5
   bcbba:	4159      	adcs	r1, r3
   bcbbc:	e00e      	b.n	bcbdc <__adddf3+0xd0>
   bcbbe:	f1a5 0520 	sub.w	r5, r5, #32
   bcbc2:	f10e 0e20 	add.w	lr, lr, #32
   bcbc6:	2a01      	cmp	r2, #1
   bcbc8:	fa03 fc0e 	lsl.w	ip, r3, lr
   bcbcc:	bf28      	it	cs
   bcbce:	f04c 0c02 	orrcs.w	ip, ip, #2
   bcbd2:	fa43 f305 	asr.w	r3, r3, r5
   bcbd6:	18c0      	adds	r0, r0, r3
   bcbd8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bcbdc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bcbe0:	d507      	bpl.n	bcbf2 <__adddf3+0xe6>
   bcbe2:	f04f 0e00 	mov.w	lr, #0
   bcbe6:	f1dc 0c00 	rsbs	ip, ip, #0
   bcbea:	eb7e 0000 	sbcs.w	r0, lr, r0
   bcbee:	eb6e 0101 	sbc.w	r1, lr, r1
   bcbf2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bcbf6:	d31b      	bcc.n	bcc30 <__adddf3+0x124>
   bcbf8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bcbfc:	d30c      	bcc.n	bcc18 <__adddf3+0x10c>
   bcbfe:	0849      	lsrs	r1, r1, #1
   bcc00:	ea5f 0030 	movs.w	r0, r0, rrx
   bcc04:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bcc08:	f104 0401 	add.w	r4, r4, #1
   bcc0c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bcc10:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bcc14:	f080 809a 	bcs.w	bcd4c <__adddf3+0x240>
   bcc18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bcc1c:	bf08      	it	eq
   bcc1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bcc22:	f150 0000 	adcs.w	r0, r0, #0
   bcc26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bcc2a:	ea41 0105 	orr.w	r1, r1, r5
   bcc2e:	bd30      	pop	{r4, r5, pc}
   bcc30:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bcc34:	4140      	adcs	r0, r0
   bcc36:	eb41 0101 	adc.w	r1, r1, r1
   bcc3a:	3c01      	subs	r4, #1
   bcc3c:	bf28      	it	cs
   bcc3e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bcc42:	d2e9      	bcs.n	bcc18 <__adddf3+0x10c>
   bcc44:	f091 0f00 	teq	r1, #0
   bcc48:	bf04      	itt	eq
   bcc4a:	4601      	moveq	r1, r0
   bcc4c:	2000      	moveq	r0, #0
   bcc4e:	fab1 f381 	clz	r3, r1
   bcc52:	bf08      	it	eq
   bcc54:	3320      	addeq	r3, #32
   bcc56:	f1a3 030b 	sub.w	r3, r3, #11
   bcc5a:	f1b3 0220 	subs.w	r2, r3, #32
   bcc5e:	da0c      	bge.n	bcc7a <__adddf3+0x16e>
   bcc60:	320c      	adds	r2, #12
   bcc62:	dd08      	ble.n	bcc76 <__adddf3+0x16a>
   bcc64:	f102 0c14 	add.w	ip, r2, #20
   bcc68:	f1c2 020c 	rsb	r2, r2, #12
   bcc6c:	fa01 f00c 	lsl.w	r0, r1, ip
   bcc70:	fa21 f102 	lsr.w	r1, r1, r2
   bcc74:	e00c      	b.n	bcc90 <__adddf3+0x184>
   bcc76:	f102 0214 	add.w	r2, r2, #20
   bcc7a:	bfd8      	it	le
   bcc7c:	f1c2 0c20 	rsble	ip, r2, #32
   bcc80:	fa01 f102 	lsl.w	r1, r1, r2
   bcc84:	fa20 fc0c 	lsr.w	ip, r0, ip
   bcc88:	bfdc      	itt	le
   bcc8a:	ea41 010c 	orrle.w	r1, r1, ip
   bcc8e:	4090      	lslle	r0, r2
   bcc90:	1ae4      	subs	r4, r4, r3
   bcc92:	bfa2      	ittt	ge
   bcc94:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bcc98:	4329      	orrge	r1, r5
   bcc9a:	bd30      	popge	{r4, r5, pc}
   bcc9c:	ea6f 0404 	mvn.w	r4, r4
   bcca0:	3c1f      	subs	r4, #31
   bcca2:	da1c      	bge.n	bccde <__adddf3+0x1d2>
   bcca4:	340c      	adds	r4, #12
   bcca6:	dc0e      	bgt.n	bccc6 <__adddf3+0x1ba>
   bcca8:	f104 0414 	add.w	r4, r4, #20
   bccac:	f1c4 0220 	rsb	r2, r4, #32
   bccb0:	fa20 f004 	lsr.w	r0, r0, r4
   bccb4:	fa01 f302 	lsl.w	r3, r1, r2
   bccb8:	ea40 0003 	orr.w	r0, r0, r3
   bccbc:	fa21 f304 	lsr.w	r3, r1, r4
   bccc0:	ea45 0103 	orr.w	r1, r5, r3
   bccc4:	bd30      	pop	{r4, r5, pc}
   bccc6:	f1c4 040c 	rsb	r4, r4, #12
   bccca:	f1c4 0220 	rsb	r2, r4, #32
   bccce:	fa20 f002 	lsr.w	r0, r0, r2
   bccd2:	fa01 f304 	lsl.w	r3, r1, r4
   bccd6:	ea40 0003 	orr.w	r0, r0, r3
   bccda:	4629      	mov	r1, r5
   bccdc:	bd30      	pop	{r4, r5, pc}
   bccde:	fa21 f004 	lsr.w	r0, r1, r4
   bcce2:	4629      	mov	r1, r5
   bcce4:	bd30      	pop	{r4, r5, pc}
   bcce6:	f094 0f00 	teq	r4, #0
   bccea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bccee:	bf06      	itte	eq
   bccf0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bccf4:	3401      	addeq	r4, #1
   bccf6:	3d01      	subne	r5, #1
   bccf8:	e74e      	b.n	bcb98 <__adddf3+0x8c>
   bccfa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bccfe:	bf18      	it	ne
   bcd00:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bcd04:	d029      	beq.n	bcd5a <__adddf3+0x24e>
   bcd06:	ea94 0f05 	teq	r4, r5
   bcd0a:	bf08      	it	eq
   bcd0c:	ea90 0f02 	teqeq	r0, r2
   bcd10:	d005      	beq.n	bcd1e <__adddf3+0x212>
   bcd12:	ea54 0c00 	orrs.w	ip, r4, r0
   bcd16:	bf04      	itt	eq
   bcd18:	4619      	moveq	r1, r3
   bcd1a:	4610      	moveq	r0, r2
   bcd1c:	bd30      	pop	{r4, r5, pc}
   bcd1e:	ea91 0f03 	teq	r1, r3
   bcd22:	bf1e      	ittt	ne
   bcd24:	2100      	movne	r1, #0
   bcd26:	2000      	movne	r0, #0
   bcd28:	bd30      	popne	{r4, r5, pc}
   bcd2a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bcd2e:	d105      	bne.n	bcd3c <__adddf3+0x230>
   bcd30:	0040      	lsls	r0, r0, #1
   bcd32:	4149      	adcs	r1, r1
   bcd34:	bf28      	it	cs
   bcd36:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bcd3a:	bd30      	pop	{r4, r5, pc}
   bcd3c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bcd40:	bf3c      	itt	cc
   bcd42:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bcd46:	bd30      	popcc	{r4, r5, pc}
   bcd48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bcd4c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bcd50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bcd54:	f04f 0000 	mov.w	r0, #0
   bcd58:	bd30      	pop	{r4, r5, pc}
   bcd5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bcd5e:	bf1a      	itte	ne
   bcd60:	4619      	movne	r1, r3
   bcd62:	4610      	movne	r0, r2
   bcd64:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bcd68:	bf1c      	itt	ne
   bcd6a:	460b      	movne	r3, r1
   bcd6c:	4602      	movne	r2, r0
   bcd6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bcd72:	bf06      	itte	eq
   bcd74:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bcd78:	ea91 0f03 	teqeq	r1, r3
   bcd7c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bcd80:	bd30      	pop	{r4, r5, pc}
   bcd82:	bf00      	nop

000bcd84 <__aeabi_ui2d>:
   bcd84:	f090 0f00 	teq	r0, #0
   bcd88:	bf04      	itt	eq
   bcd8a:	2100      	moveq	r1, #0
   bcd8c:	4770      	bxeq	lr
   bcd8e:	b530      	push	{r4, r5, lr}
   bcd90:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bcd94:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bcd98:	f04f 0500 	mov.w	r5, #0
   bcd9c:	f04f 0100 	mov.w	r1, #0
   bcda0:	e750      	b.n	bcc44 <__adddf3+0x138>
   bcda2:	bf00      	nop

000bcda4 <__aeabi_i2d>:
   bcda4:	f090 0f00 	teq	r0, #0
   bcda8:	bf04      	itt	eq
   bcdaa:	2100      	moveq	r1, #0
   bcdac:	4770      	bxeq	lr
   bcdae:	b530      	push	{r4, r5, lr}
   bcdb0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bcdb4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bcdb8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bcdbc:	bf48      	it	mi
   bcdbe:	4240      	negmi	r0, r0
   bcdc0:	f04f 0100 	mov.w	r1, #0
   bcdc4:	e73e      	b.n	bcc44 <__adddf3+0x138>
   bcdc6:	bf00      	nop

000bcdc8 <__aeabi_f2d>:
   bcdc8:	0042      	lsls	r2, r0, #1
   bcdca:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bcdce:	ea4f 0131 	mov.w	r1, r1, rrx
   bcdd2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bcdd6:	bf1f      	itttt	ne
   bcdd8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bcddc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bcde0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bcde4:	4770      	bxne	lr
   bcde6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bcdea:	bf08      	it	eq
   bcdec:	4770      	bxeq	lr
   bcdee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bcdf2:	bf04      	itt	eq
   bcdf4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bcdf8:	4770      	bxeq	lr
   bcdfa:	b530      	push	{r4, r5, lr}
   bcdfc:	f44f 7460 	mov.w	r4, #896	; 0x380
   bce00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bce04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bce08:	e71c      	b.n	bcc44 <__adddf3+0x138>
   bce0a:	bf00      	nop

000bce0c <__aeabi_ul2d>:
   bce0c:	ea50 0201 	orrs.w	r2, r0, r1
   bce10:	bf08      	it	eq
   bce12:	4770      	bxeq	lr
   bce14:	b530      	push	{r4, r5, lr}
   bce16:	f04f 0500 	mov.w	r5, #0
   bce1a:	e00a      	b.n	bce32 <__aeabi_l2d+0x16>

000bce1c <__aeabi_l2d>:
   bce1c:	ea50 0201 	orrs.w	r2, r0, r1
   bce20:	bf08      	it	eq
   bce22:	4770      	bxeq	lr
   bce24:	b530      	push	{r4, r5, lr}
   bce26:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bce2a:	d502      	bpl.n	bce32 <__aeabi_l2d+0x16>
   bce2c:	4240      	negs	r0, r0
   bce2e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bce32:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bce36:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bce3a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bce3e:	f43f aed8 	beq.w	bcbf2 <__adddf3+0xe6>
   bce42:	f04f 0203 	mov.w	r2, #3
   bce46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bce4a:	bf18      	it	ne
   bce4c:	3203      	addne	r2, #3
   bce4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bce52:	bf18      	it	ne
   bce54:	3203      	addne	r2, #3
   bce56:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bce5a:	f1c2 0320 	rsb	r3, r2, #32
   bce5e:	fa00 fc03 	lsl.w	ip, r0, r3
   bce62:	fa20 f002 	lsr.w	r0, r0, r2
   bce66:	fa01 fe03 	lsl.w	lr, r1, r3
   bce6a:	ea40 000e 	orr.w	r0, r0, lr
   bce6e:	fa21 f102 	lsr.w	r1, r1, r2
   bce72:	4414      	add	r4, r2
   bce74:	e6bd      	b.n	bcbf2 <__adddf3+0xe6>
   bce76:	bf00      	nop

000bce78 <__aeabi_dmul>:
   bce78:	b570      	push	{r4, r5, r6, lr}
   bce7a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bce7e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bce82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bce86:	bf1d      	ittte	ne
   bce88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bce8c:	ea94 0f0c 	teqne	r4, ip
   bce90:	ea95 0f0c 	teqne	r5, ip
   bce94:	f000 f8de 	bleq	bd054 <__aeabi_dmul+0x1dc>
   bce98:	442c      	add	r4, r5
   bce9a:	ea81 0603 	eor.w	r6, r1, r3
   bce9e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bcea2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bcea6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bceaa:	bf18      	it	ne
   bceac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bceb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bceb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bceb8:	d038      	beq.n	bcf2c <__aeabi_dmul+0xb4>
   bceba:	fba0 ce02 	umull	ip, lr, r0, r2
   bcebe:	f04f 0500 	mov.w	r5, #0
   bcec2:	fbe1 e502 	umlal	lr, r5, r1, r2
   bcec6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bceca:	fbe0 e503 	umlal	lr, r5, r0, r3
   bcece:	f04f 0600 	mov.w	r6, #0
   bced2:	fbe1 5603 	umlal	r5, r6, r1, r3
   bced6:	f09c 0f00 	teq	ip, #0
   bceda:	bf18      	it	ne
   bcedc:	f04e 0e01 	orrne.w	lr, lr, #1
   bcee0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bcee4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bcee8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bceec:	d204      	bcs.n	bcef8 <__aeabi_dmul+0x80>
   bceee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bcef2:	416d      	adcs	r5, r5
   bcef4:	eb46 0606 	adc.w	r6, r6, r6
   bcef8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bcefc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bcf00:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bcf04:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bcf08:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bcf0c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bcf10:	bf88      	it	hi
   bcf12:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bcf16:	d81e      	bhi.n	bcf56 <__aeabi_dmul+0xde>
   bcf18:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bcf1c:	bf08      	it	eq
   bcf1e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bcf22:	f150 0000 	adcs.w	r0, r0, #0
   bcf26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bcf2a:	bd70      	pop	{r4, r5, r6, pc}
   bcf2c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bcf30:	ea46 0101 	orr.w	r1, r6, r1
   bcf34:	ea40 0002 	orr.w	r0, r0, r2
   bcf38:	ea81 0103 	eor.w	r1, r1, r3
   bcf3c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bcf40:	bfc2      	ittt	gt
   bcf42:	ebd4 050c 	rsbsgt	r5, r4, ip
   bcf46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bcf4a:	bd70      	popgt	{r4, r5, r6, pc}
   bcf4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bcf50:	f04f 0e00 	mov.w	lr, #0
   bcf54:	3c01      	subs	r4, #1
   bcf56:	f300 80ab 	bgt.w	bd0b0 <__aeabi_dmul+0x238>
   bcf5a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bcf5e:	bfde      	ittt	le
   bcf60:	2000      	movle	r0, #0
   bcf62:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bcf66:	bd70      	pople	{r4, r5, r6, pc}
   bcf68:	f1c4 0400 	rsb	r4, r4, #0
   bcf6c:	3c20      	subs	r4, #32
   bcf6e:	da35      	bge.n	bcfdc <__aeabi_dmul+0x164>
   bcf70:	340c      	adds	r4, #12
   bcf72:	dc1b      	bgt.n	bcfac <__aeabi_dmul+0x134>
   bcf74:	f104 0414 	add.w	r4, r4, #20
   bcf78:	f1c4 0520 	rsb	r5, r4, #32
   bcf7c:	fa00 f305 	lsl.w	r3, r0, r5
   bcf80:	fa20 f004 	lsr.w	r0, r0, r4
   bcf84:	fa01 f205 	lsl.w	r2, r1, r5
   bcf88:	ea40 0002 	orr.w	r0, r0, r2
   bcf8c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bcf90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bcf94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bcf98:	fa21 f604 	lsr.w	r6, r1, r4
   bcf9c:	eb42 0106 	adc.w	r1, r2, r6
   bcfa0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bcfa4:	bf08      	it	eq
   bcfa6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bcfaa:	bd70      	pop	{r4, r5, r6, pc}
   bcfac:	f1c4 040c 	rsb	r4, r4, #12
   bcfb0:	f1c4 0520 	rsb	r5, r4, #32
   bcfb4:	fa00 f304 	lsl.w	r3, r0, r4
   bcfb8:	fa20 f005 	lsr.w	r0, r0, r5
   bcfbc:	fa01 f204 	lsl.w	r2, r1, r4
   bcfc0:	ea40 0002 	orr.w	r0, r0, r2
   bcfc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bcfc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bcfcc:	f141 0100 	adc.w	r1, r1, #0
   bcfd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bcfd4:	bf08      	it	eq
   bcfd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bcfda:	bd70      	pop	{r4, r5, r6, pc}
   bcfdc:	f1c4 0520 	rsb	r5, r4, #32
   bcfe0:	fa00 f205 	lsl.w	r2, r0, r5
   bcfe4:	ea4e 0e02 	orr.w	lr, lr, r2
   bcfe8:	fa20 f304 	lsr.w	r3, r0, r4
   bcfec:	fa01 f205 	lsl.w	r2, r1, r5
   bcff0:	ea43 0302 	orr.w	r3, r3, r2
   bcff4:	fa21 f004 	lsr.w	r0, r1, r4
   bcff8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bcffc:	fa21 f204 	lsr.w	r2, r1, r4
   bd000:	ea20 0002 	bic.w	r0, r0, r2
   bd004:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bd008:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bd00c:	bf08      	it	eq
   bd00e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bd012:	bd70      	pop	{r4, r5, r6, pc}
   bd014:	f094 0f00 	teq	r4, #0
   bd018:	d10f      	bne.n	bd03a <__aeabi_dmul+0x1c2>
   bd01a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bd01e:	0040      	lsls	r0, r0, #1
   bd020:	eb41 0101 	adc.w	r1, r1, r1
   bd024:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bd028:	bf08      	it	eq
   bd02a:	3c01      	subeq	r4, #1
   bd02c:	d0f7      	beq.n	bd01e <__aeabi_dmul+0x1a6>
   bd02e:	ea41 0106 	orr.w	r1, r1, r6
   bd032:	f095 0f00 	teq	r5, #0
   bd036:	bf18      	it	ne
   bd038:	4770      	bxne	lr
   bd03a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bd03e:	0052      	lsls	r2, r2, #1
   bd040:	eb43 0303 	adc.w	r3, r3, r3
   bd044:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bd048:	bf08      	it	eq
   bd04a:	3d01      	subeq	r5, #1
   bd04c:	d0f7      	beq.n	bd03e <__aeabi_dmul+0x1c6>
   bd04e:	ea43 0306 	orr.w	r3, r3, r6
   bd052:	4770      	bx	lr
   bd054:	ea94 0f0c 	teq	r4, ip
   bd058:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bd05c:	bf18      	it	ne
   bd05e:	ea95 0f0c 	teqne	r5, ip
   bd062:	d00c      	beq.n	bd07e <__aeabi_dmul+0x206>
   bd064:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bd068:	bf18      	it	ne
   bd06a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bd06e:	d1d1      	bne.n	bd014 <__aeabi_dmul+0x19c>
   bd070:	ea81 0103 	eor.w	r1, r1, r3
   bd074:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd078:	f04f 0000 	mov.w	r0, #0
   bd07c:	bd70      	pop	{r4, r5, r6, pc}
   bd07e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bd082:	bf06      	itte	eq
   bd084:	4610      	moveq	r0, r2
   bd086:	4619      	moveq	r1, r3
   bd088:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bd08c:	d019      	beq.n	bd0c2 <__aeabi_dmul+0x24a>
   bd08e:	ea94 0f0c 	teq	r4, ip
   bd092:	d102      	bne.n	bd09a <__aeabi_dmul+0x222>
   bd094:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bd098:	d113      	bne.n	bd0c2 <__aeabi_dmul+0x24a>
   bd09a:	ea95 0f0c 	teq	r5, ip
   bd09e:	d105      	bne.n	bd0ac <__aeabi_dmul+0x234>
   bd0a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bd0a4:	bf1c      	itt	ne
   bd0a6:	4610      	movne	r0, r2
   bd0a8:	4619      	movne	r1, r3
   bd0aa:	d10a      	bne.n	bd0c2 <__aeabi_dmul+0x24a>
   bd0ac:	ea81 0103 	eor.w	r1, r1, r3
   bd0b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd0b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bd0b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bd0bc:	f04f 0000 	mov.w	r0, #0
   bd0c0:	bd70      	pop	{r4, r5, r6, pc}
   bd0c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bd0c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bd0ca:	bd70      	pop	{r4, r5, r6, pc}

000bd0cc <__aeabi_ddiv>:
   bd0cc:	b570      	push	{r4, r5, r6, lr}
   bd0ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bd0d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bd0d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bd0da:	bf1d      	ittte	ne
   bd0dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bd0e0:	ea94 0f0c 	teqne	r4, ip
   bd0e4:	ea95 0f0c 	teqne	r5, ip
   bd0e8:	f000 f8a7 	bleq	bd23a <__aeabi_ddiv+0x16e>
   bd0ec:	eba4 0405 	sub.w	r4, r4, r5
   bd0f0:	ea81 0e03 	eor.w	lr, r1, r3
   bd0f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bd0f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bd0fc:	f000 8088 	beq.w	bd210 <__aeabi_ddiv+0x144>
   bd100:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bd104:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bd108:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bd10c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bd110:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bd114:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bd118:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bd11c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bd120:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bd124:	429d      	cmp	r5, r3
   bd126:	bf08      	it	eq
   bd128:	4296      	cmpeq	r6, r2
   bd12a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bd12e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bd132:	d202      	bcs.n	bd13a <__aeabi_ddiv+0x6e>
   bd134:	085b      	lsrs	r3, r3, #1
   bd136:	ea4f 0232 	mov.w	r2, r2, rrx
   bd13a:	1ab6      	subs	r6, r6, r2
   bd13c:	eb65 0503 	sbc.w	r5, r5, r3
   bd140:	085b      	lsrs	r3, r3, #1
   bd142:	ea4f 0232 	mov.w	r2, r2, rrx
   bd146:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bd14a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bd14e:	ebb6 0e02 	subs.w	lr, r6, r2
   bd152:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd156:	bf22      	ittt	cs
   bd158:	1ab6      	subcs	r6, r6, r2
   bd15a:	4675      	movcs	r5, lr
   bd15c:	ea40 000c 	orrcs.w	r0, r0, ip
   bd160:	085b      	lsrs	r3, r3, #1
   bd162:	ea4f 0232 	mov.w	r2, r2, rrx
   bd166:	ebb6 0e02 	subs.w	lr, r6, r2
   bd16a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd16e:	bf22      	ittt	cs
   bd170:	1ab6      	subcs	r6, r6, r2
   bd172:	4675      	movcs	r5, lr
   bd174:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bd178:	085b      	lsrs	r3, r3, #1
   bd17a:	ea4f 0232 	mov.w	r2, r2, rrx
   bd17e:	ebb6 0e02 	subs.w	lr, r6, r2
   bd182:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd186:	bf22      	ittt	cs
   bd188:	1ab6      	subcs	r6, r6, r2
   bd18a:	4675      	movcs	r5, lr
   bd18c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bd190:	085b      	lsrs	r3, r3, #1
   bd192:	ea4f 0232 	mov.w	r2, r2, rrx
   bd196:	ebb6 0e02 	subs.w	lr, r6, r2
   bd19a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd19e:	bf22      	ittt	cs
   bd1a0:	1ab6      	subcs	r6, r6, r2
   bd1a2:	4675      	movcs	r5, lr
   bd1a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bd1a8:	ea55 0e06 	orrs.w	lr, r5, r6
   bd1ac:	d018      	beq.n	bd1e0 <__aeabi_ddiv+0x114>
   bd1ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bd1b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bd1b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bd1ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bd1be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bd1c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bd1c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bd1ca:	d1c0      	bne.n	bd14e <__aeabi_ddiv+0x82>
   bd1cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bd1d0:	d10b      	bne.n	bd1ea <__aeabi_ddiv+0x11e>
   bd1d2:	ea41 0100 	orr.w	r1, r1, r0
   bd1d6:	f04f 0000 	mov.w	r0, #0
   bd1da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bd1de:	e7b6      	b.n	bd14e <__aeabi_ddiv+0x82>
   bd1e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bd1e4:	bf04      	itt	eq
   bd1e6:	4301      	orreq	r1, r0
   bd1e8:	2000      	moveq	r0, #0
   bd1ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bd1ee:	bf88      	it	hi
   bd1f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bd1f4:	f63f aeaf 	bhi.w	bcf56 <__aeabi_dmul+0xde>
   bd1f8:	ebb5 0c03 	subs.w	ip, r5, r3
   bd1fc:	bf04      	itt	eq
   bd1fe:	ebb6 0c02 	subseq.w	ip, r6, r2
   bd202:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bd206:	f150 0000 	adcs.w	r0, r0, #0
   bd20a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd20e:	bd70      	pop	{r4, r5, r6, pc}
   bd210:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bd214:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bd218:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bd21c:	bfc2      	ittt	gt
   bd21e:	ebd4 050c 	rsbsgt	r5, r4, ip
   bd222:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bd226:	bd70      	popgt	{r4, r5, r6, pc}
   bd228:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd22c:	f04f 0e00 	mov.w	lr, #0
   bd230:	3c01      	subs	r4, #1
   bd232:	e690      	b.n	bcf56 <__aeabi_dmul+0xde>
   bd234:	ea45 0e06 	orr.w	lr, r5, r6
   bd238:	e68d      	b.n	bcf56 <__aeabi_dmul+0xde>
   bd23a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bd23e:	ea94 0f0c 	teq	r4, ip
   bd242:	bf08      	it	eq
   bd244:	ea95 0f0c 	teqeq	r5, ip
   bd248:	f43f af3b 	beq.w	bd0c2 <__aeabi_dmul+0x24a>
   bd24c:	ea94 0f0c 	teq	r4, ip
   bd250:	d10a      	bne.n	bd268 <__aeabi_ddiv+0x19c>
   bd252:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bd256:	f47f af34 	bne.w	bd0c2 <__aeabi_dmul+0x24a>
   bd25a:	ea95 0f0c 	teq	r5, ip
   bd25e:	f47f af25 	bne.w	bd0ac <__aeabi_dmul+0x234>
   bd262:	4610      	mov	r0, r2
   bd264:	4619      	mov	r1, r3
   bd266:	e72c      	b.n	bd0c2 <__aeabi_dmul+0x24a>
   bd268:	ea95 0f0c 	teq	r5, ip
   bd26c:	d106      	bne.n	bd27c <__aeabi_ddiv+0x1b0>
   bd26e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bd272:	f43f aefd 	beq.w	bd070 <__aeabi_dmul+0x1f8>
   bd276:	4610      	mov	r0, r2
   bd278:	4619      	mov	r1, r3
   bd27a:	e722      	b.n	bd0c2 <__aeabi_dmul+0x24a>
   bd27c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bd280:	bf18      	it	ne
   bd282:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bd286:	f47f aec5 	bne.w	bd014 <__aeabi_dmul+0x19c>
   bd28a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bd28e:	f47f af0d 	bne.w	bd0ac <__aeabi_dmul+0x234>
   bd292:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bd296:	f47f aeeb 	bne.w	bd070 <__aeabi_dmul+0x1f8>
   bd29a:	e712      	b.n	bd0c2 <__aeabi_dmul+0x24a>

000bd29c <__gedf2>:
   bd29c:	f04f 3cff 	mov.w	ip, #4294967295
   bd2a0:	e006      	b.n	bd2b0 <__cmpdf2+0x4>
   bd2a2:	bf00      	nop

000bd2a4 <__ledf2>:
   bd2a4:	f04f 0c01 	mov.w	ip, #1
   bd2a8:	e002      	b.n	bd2b0 <__cmpdf2+0x4>
   bd2aa:	bf00      	nop

000bd2ac <__cmpdf2>:
   bd2ac:	f04f 0c01 	mov.w	ip, #1
   bd2b0:	f84d cd04 	str.w	ip, [sp, #-4]!
   bd2b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bd2b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd2bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bd2c0:	bf18      	it	ne
   bd2c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bd2c6:	d01b      	beq.n	bd300 <__cmpdf2+0x54>
   bd2c8:	b001      	add	sp, #4
   bd2ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bd2ce:	bf0c      	ite	eq
   bd2d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bd2d4:	ea91 0f03 	teqne	r1, r3
   bd2d8:	bf02      	ittt	eq
   bd2da:	ea90 0f02 	teqeq	r0, r2
   bd2de:	2000      	moveq	r0, #0
   bd2e0:	4770      	bxeq	lr
   bd2e2:	f110 0f00 	cmn.w	r0, #0
   bd2e6:	ea91 0f03 	teq	r1, r3
   bd2ea:	bf58      	it	pl
   bd2ec:	4299      	cmppl	r1, r3
   bd2ee:	bf08      	it	eq
   bd2f0:	4290      	cmpeq	r0, r2
   bd2f2:	bf2c      	ite	cs
   bd2f4:	17d8      	asrcs	r0, r3, #31
   bd2f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bd2fa:	f040 0001 	orr.w	r0, r0, #1
   bd2fe:	4770      	bx	lr
   bd300:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bd304:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd308:	d102      	bne.n	bd310 <__cmpdf2+0x64>
   bd30a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bd30e:	d107      	bne.n	bd320 <__cmpdf2+0x74>
   bd310:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bd314:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd318:	d1d6      	bne.n	bd2c8 <__cmpdf2+0x1c>
   bd31a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bd31e:	d0d3      	beq.n	bd2c8 <__cmpdf2+0x1c>
   bd320:	f85d 0b04 	ldr.w	r0, [sp], #4
   bd324:	4770      	bx	lr
   bd326:	bf00      	nop

000bd328 <__aeabi_cdrcmple>:
   bd328:	4684      	mov	ip, r0
   bd32a:	4610      	mov	r0, r2
   bd32c:	4662      	mov	r2, ip
   bd32e:	468c      	mov	ip, r1
   bd330:	4619      	mov	r1, r3
   bd332:	4663      	mov	r3, ip
   bd334:	e000      	b.n	bd338 <__aeabi_cdcmpeq>
   bd336:	bf00      	nop

000bd338 <__aeabi_cdcmpeq>:
   bd338:	b501      	push	{r0, lr}
   bd33a:	f7ff ffb7 	bl	bd2ac <__cmpdf2>
   bd33e:	2800      	cmp	r0, #0
   bd340:	bf48      	it	mi
   bd342:	f110 0f00 	cmnmi.w	r0, #0
   bd346:	bd01      	pop	{r0, pc}

000bd348 <__aeabi_dcmpeq>:
   bd348:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd34c:	f7ff fff4 	bl	bd338 <__aeabi_cdcmpeq>
   bd350:	bf0c      	ite	eq
   bd352:	2001      	moveq	r0, #1
   bd354:	2000      	movne	r0, #0
   bd356:	f85d fb08 	ldr.w	pc, [sp], #8
   bd35a:	bf00      	nop

000bd35c <__aeabi_dcmplt>:
   bd35c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd360:	f7ff ffea 	bl	bd338 <__aeabi_cdcmpeq>
   bd364:	bf34      	ite	cc
   bd366:	2001      	movcc	r0, #1
   bd368:	2000      	movcs	r0, #0
   bd36a:	f85d fb08 	ldr.w	pc, [sp], #8
   bd36e:	bf00      	nop

000bd370 <__aeabi_dcmple>:
   bd370:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd374:	f7ff ffe0 	bl	bd338 <__aeabi_cdcmpeq>
   bd378:	bf94      	ite	ls
   bd37a:	2001      	movls	r0, #1
   bd37c:	2000      	movhi	r0, #0
   bd37e:	f85d fb08 	ldr.w	pc, [sp], #8
   bd382:	bf00      	nop

000bd384 <__aeabi_dcmpge>:
   bd384:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd388:	f7ff ffce 	bl	bd328 <__aeabi_cdrcmple>
   bd38c:	bf94      	ite	ls
   bd38e:	2001      	movls	r0, #1
   bd390:	2000      	movhi	r0, #0
   bd392:	f85d fb08 	ldr.w	pc, [sp], #8
   bd396:	bf00      	nop

000bd398 <__aeabi_dcmpgt>:
   bd398:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd39c:	f7ff ffc4 	bl	bd328 <__aeabi_cdrcmple>
   bd3a0:	bf34      	ite	cc
   bd3a2:	2001      	movcc	r0, #1
   bd3a4:	2000      	movcs	r0, #0
   bd3a6:	f85d fb08 	ldr.w	pc, [sp], #8
   bd3aa:	bf00      	nop

000bd3ac <__aeabi_d2iz>:
   bd3ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bd3b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bd3b4:	d215      	bcs.n	bd3e2 <__aeabi_d2iz+0x36>
   bd3b6:	d511      	bpl.n	bd3dc <__aeabi_d2iz+0x30>
   bd3b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bd3bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bd3c0:	d912      	bls.n	bd3e8 <__aeabi_d2iz+0x3c>
   bd3c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bd3c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bd3ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bd3ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bd3d2:	fa23 f002 	lsr.w	r0, r3, r2
   bd3d6:	bf18      	it	ne
   bd3d8:	4240      	negne	r0, r0
   bd3da:	4770      	bx	lr
   bd3dc:	f04f 0000 	mov.w	r0, #0
   bd3e0:	4770      	bx	lr
   bd3e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bd3e6:	d105      	bne.n	bd3f4 <__aeabi_d2iz+0x48>
   bd3e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bd3ec:	bf08      	it	eq
   bd3ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bd3f2:	4770      	bx	lr
   bd3f4:	f04f 0000 	mov.w	r0, #0
   bd3f8:	4770      	bx	lr
   bd3fa:	bf00      	nop

000bd3fc <__aeabi_d2uiz>:
   bd3fc:	004a      	lsls	r2, r1, #1
   bd3fe:	d211      	bcs.n	bd424 <__aeabi_d2uiz+0x28>
   bd400:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bd404:	d211      	bcs.n	bd42a <__aeabi_d2uiz+0x2e>
   bd406:	d50d      	bpl.n	bd424 <__aeabi_d2uiz+0x28>
   bd408:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bd40c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bd410:	d40e      	bmi.n	bd430 <__aeabi_d2uiz+0x34>
   bd412:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bd416:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bd41a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bd41e:	fa23 f002 	lsr.w	r0, r3, r2
   bd422:	4770      	bx	lr
   bd424:	f04f 0000 	mov.w	r0, #0
   bd428:	4770      	bx	lr
   bd42a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bd42e:	d102      	bne.n	bd436 <__aeabi_d2uiz+0x3a>
   bd430:	f04f 30ff 	mov.w	r0, #4294967295
   bd434:	4770      	bx	lr
   bd436:	f04f 0000 	mov.w	r0, #0
   bd43a:	4770      	bx	lr

000bd43c <__aeabi_d2f>:
   bd43c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bd440:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bd444:	bf24      	itt	cs
   bd446:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bd44a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bd44e:	d90d      	bls.n	bd46c <__aeabi_d2f+0x30>
   bd450:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bd454:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bd458:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bd45c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bd460:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bd464:	bf08      	it	eq
   bd466:	f020 0001 	biceq.w	r0, r0, #1
   bd46a:	4770      	bx	lr
   bd46c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bd470:	d121      	bne.n	bd4b6 <__aeabi_d2f+0x7a>
   bd472:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bd476:	bfbc      	itt	lt
   bd478:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bd47c:	4770      	bxlt	lr
   bd47e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd482:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bd486:	f1c2 0218 	rsb	r2, r2, #24
   bd48a:	f1c2 0c20 	rsb	ip, r2, #32
   bd48e:	fa10 f30c 	lsls.w	r3, r0, ip
   bd492:	fa20 f002 	lsr.w	r0, r0, r2
   bd496:	bf18      	it	ne
   bd498:	f040 0001 	orrne.w	r0, r0, #1
   bd49c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bd4a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bd4a4:	fa03 fc0c 	lsl.w	ip, r3, ip
   bd4a8:	ea40 000c 	orr.w	r0, r0, ip
   bd4ac:	fa23 f302 	lsr.w	r3, r3, r2
   bd4b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bd4b4:	e7cc      	b.n	bd450 <__aeabi_d2f+0x14>
   bd4b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bd4ba:	d107      	bne.n	bd4cc <__aeabi_d2f+0x90>
   bd4bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bd4c0:	bf1e      	ittt	ne
   bd4c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bd4c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bd4ca:	4770      	bxne	lr
   bd4cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bd4d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bd4d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bd4d8:	4770      	bx	lr
   bd4da:	bf00      	nop

000bd4dc <__aeabi_d2ulz>:
   bd4dc:	b5d0      	push	{r4, r6, r7, lr}
   bd4de:	4b0c      	ldr	r3, [pc, #48]	; (bd510 <__aeabi_d2ulz+0x34>)
   bd4e0:	2200      	movs	r2, #0
   bd4e2:	4606      	mov	r6, r0
   bd4e4:	460f      	mov	r7, r1
   bd4e6:	f7ff fcc7 	bl	bce78 <__aeabi_dmul>
   bd4ea:	f7ff ff87 	bl	bd3fc <__aeabi_d2uiz>
   bd4ee:	4604      	mov	r4, r0
   bd4f0:	f7ff fc48 	bl	bcd84 <__aeabi_ui2d>
   bd4f4:	4b07      	ldr	r3, [pc, #28]	; (bd514 <__aeabi_d2ulz+0x38>)
   bd4f6:	2200      	movs	r2, #0
   bd4f8:	f7ff fcbe 	bl	bce78 <__aeabi_dmul>
   bd4fc:	4602      	mov	r2, r0
   bd4fe:	460b      	mov	r3, r1
   bd500:	4630      	mov	r0, r6
   bd502:	4639      	mov	r1, r7
   bd504:	f7ff fb00 	bl	bcb08 <__aeabi_dsub>
   bd508:	f7ff ff78 	bl	bd3fc <__aeabi_d2uiz>
   bd50c:	4621      	mov	r1, r4
   bd50e:	bdd0      	pop	{r4, r6, r7, pc}
   bd510:	3df00000 	.word	0x3df00000
   bd514:	41f00000 	.word	0x41f00000

000bd518 <atexit>:
   bd518:	2300      	movs	r3, #0
   bd51a:	4601      	mov	r1, r0
   bd51c:	461a      	mov	r2, r3
   bd51e:	4618      	mov	r0, r3
   bd520:	f000 bfac 	b.w	be47c <__register_exitproc>

000bd524 <atof>:
   bd524:	2100      	movs	r1, #0
   bd526:	f000 bf11 	b.w	be34c <strtod>

000bd52a <atoi>:
   bd52a:	220a      	movs	r2, #10
   bd52c:	2100      	movs	r1, #0
   bd52e:	f000 bf9b 	b.w	be468 <strtol>

000bd532 <memcmp>:
   bd532:	b510      	push	{r4, lr}
   bd534:	3901      	subs	r1, #1
   bd536:	4402      	add	r2, r0
   bd538:	4290      	cmp	r0, r2
   bd53a:	d101      	bne.n	bd540 <memcmp+0xe>
   bd53c:	2000      	movs	r0, #0
   bd53e:	e005      	b.n	bd54c <memcmp+0x1a>
   bd540:	7803      	ldrb	r3, [r0, #0]
   bd542:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bd546:	42a3      	cmp	r3, r4
   bd548:	d001      	beq.n	bd54e <memcmp+0x1c>
   bd54a:	1b18      	subs	r0, r3, r4
   bd54c:	bd10      	pop	{r4, pc}
   bd54e:	3001      	adds	r0, #1
   bd550:	e7f2      	b.n	bd538 <memcmp+0x6>

000bd552 <memcpy>:
   bd552:	440a      	add	r2, r1
   bd554:	4291      	cmp	r1, r2
   bd556:	f100 33ff 	add.w	r3, r0, #4294967295
   bd55a:	d100      	bne.n	bd55e <memcpy+0xc>
   bd55c:	4770      	bx	lr
   bd55e:	b510      	push	{r4, lr}
   bd560:	f811 4b01 	ldrb.w	r4, [r1], #1
   bd564:	f803 4f01 	strb.w	r4, [r3, #1]!
   bd568:	4291      	cmp	r1, r2
   bd56a:	d1f9      	bne.n	bd560 <memcpy+0xe>
   bd56c:	bd10      	pop	{r4, pc}

000bd56e <memmove>:
   bd56e:	4288      	cmp	r0, r1
   bd570:	b510      	push	{r4, lr}
   bd572:	eb01 0402 	add.w	r4, r1, r2
   bd576:	d902      	bls.n	bd57e <memmove+0x10>
   bd578:	4284      	cmp	r4, r0
   bd57a:	4623      	mov	r3, r4
   bd57c:	d807      	bhi.n	bd58e <memmove+0x20>
   bd57e:	1e43      	subs	r3, r0, #1
   bd580:	42a1      	cmp	r1, r4
   bd582:	d008      	beq.n	bd596 <memmove+0x28>
   bd584:	f811 2b01 	ldrb.w	r2, [r1], #1
   bd588:	f803 2f01 	strb.w	r2, [r3, #1]!
   bd58c:	e7f8      	b.n	bd580 <memmove+0x12>
   bd58e:	4402      	add	r2, r0
   bd590:	4601      	mov	r1, r0
   bd592:	428a      	cmp	r2, r1
   bd594:	d100      	bne.n	bd598 <memmove+0x2a>
   bd596:	bd10      	pop	{r4, pc}
   bd598:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bd59c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bd5a0:	e7f7      	b.n	bd592 <memmove+0x24>

000bd5a2 <memset>:
   bd5a2:	4402      	add	r2, r0
   bd5a4:	4603      	mov	r3, r0
   bd5a6:	4293      	cmp	r3, r2
   bd5a8:	d100      	bne.n	bd5ac <memset+0xa>
   bd5aa:	4770      	bx	lr
   bd5ac:	f803 1b01 	strb.w	r1, [r3], #1
   bd5b0:	e7f9      	b.n	bd5a6 <memset+0x4>
	...

000bd5b4 <srand>:
   bd5b4:	b538      	push	{r3, r4, r5, lr}
   bd5b6:	4b10      	ldr	r3, [pc, #64]	; (bd5f8 <srand+0x44>)
   bd5b8:	681d      	ldr	r5, [r3, #0]
   bd5ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bd5bc:	4604      	mov	r4, r0
   bd5be:	b9b3      	cbnz	r3, bd5ee <srand+0x3a>
   bd5c0:	2018      	movs	r0, #24
   bd5c2:	f7fb fb3b 	bl	b8c3c <malloc>
   bd5c6:	4602      	mov	r2, r0
   bd5c8:	63a8      	str	r0, [r5, #56]	; 0x38
   bd5ca:	b920      	cbnz	r0, bd5d6 <srand+0x22>
   bd5cc:	4b0b      	ldr	r3, [pc, #44]	; (bd5fc <srand+0x48>)
   bd5ce:	480c      	ldr	r0, [pc, #48]	; (bd600 <srand+0x4c>)
   bd5d0:	2142      	movs	r1, #66	; 0x42
   bd5d2:	f7fb fb83 	bl	b8cdc <__assert_func>
   bd5d6:	490b      	ldr	r1, [pc, #44]	; (bd604 <srand+0x50>)
   bd5d8:	4b0b      	ldr	r3, [pc, #44]	; (bd608 <srand+0x54>)
   bd5da:	e9c0 1300 	strd	r1, r3, [r0]
   bd5de:	4b0b      	ldr	r3, [pc, #44]	; (bd60c <srand+0x58>)
   bd5e0:	6083      	str	r3, [r0, #8]
   bd5e2:	230b      	movs	r3, #11
   bd5e4:	8183      	strh	r3, [r0, #12]
   bd5e6:	2100      	movs	r1, #0
   bd5e8:	2001      	movs	r0, #1
   bd5ea:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bd5ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bd5f0:	2200      	movs	r2, #0
   bd5f2:	611c      	str	r4, [r3, #16]
   bd5f4:	615a      	str	r2, [r3, #20]
   bd5f6:	bd38      	pop	{r3, r4, r5, pc}
   bd5f8:	2003daa8 	.word	0x2003daa8
   bd5fc:	000c0d1d 	.word	0x000c0d1d
   bd600:	000c0d34 	.word	0x000c0d34
   bd604:	abcd330e 	.word	0xabcd330e
   bd608:	e66d1234 	.word	0xe66d1234
   bd60c:	0005deec 	.word	0x0005deec

000bd610 <strcat>:
   bd610:	b510      	push	{r4, lr}
   bd612:	4602      	mov	r2, r0
   bd614:	7814      	ldrb	r4, [r2, #0]
   bd616:	4613      	mov	r3, r2
   bd618:	3201      	adds	r2, #1
   bd61a:	2c00      	cmp	r4, #0
   bd61c:	d1fa      	bne.n	bd614 <strcat+0x4>
   bd61e:	3b01      	subs	r3, #1
   bd620:	f811 2b01 	ldrb.w	r2, [r1], #1
   bd624:	f803 2f01 	strb.w	r2, [r3, #1]!
   bd628:	2a00      	cmp	r2, #0
   bd62a:	d1f9      	bne.n	bd620 <strcat+0x10>
   bd62c:	bd10      	pop	{r4, pc}

000bd62e <strcmp>:
   bd62e:	f810 2b01 	ldrb.w	r2, [r0], #1
   bd632:	f811 3b01 	ldrb.w	r3, [r1], #1
   bd636:	2a01      	cmp	r2, #1
   bd638:	bf28      	it	cs
   bd63a:	429a      	cmpcs	r2, r3
   bd63c:	d0f7      	beq.n	bd62e <strcmp>
   bd63e:	1ad0      	subs	r0, r2, r3
   bd640:	4770      	bx	lr

000bd642 <strcpy>:
   bd642:	4603      	mov	r3, r0
   bd644:	f811 2b01 	ldrb.w	r2, [r1], #1
   bd648:	f803 2b01 	strb.w	r2, [r3], #1
   bd64c:	2a00      	cmp	r2, #0
   bd64e:	d1f9      	bne.n	bd644 <strcpy+0x2>
   bd650:	4770      	bx	lr
	...

000bd654 <strdup>:
   bd654:	4b02      	ldr	r3, [pc, #8]	; (bd660 <strdup+0xc>)
   bd656:	4601      	mov	r1, r0
   bd658:	6818      	ldr	r0, [r3, #0]
   bd65a:	f000 b803 	b.w	bd664 <_strdup_r>
   bd65e:	bf00      	nop
   bd660:	2003daa8 	.word	0x2003daa8

000bd664 <_strdup_r>:
   bd664:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd666:	4604      	mov	r4, r0
   bd668:	4608      	mov	r0, r1
   bd66a:	460d      	mov	r5, r1
   bd66c:	f000 f80f 	bl	bd68e <strlen>
   bd670:	1c42      	adds	r2, r0, #1
   bd672:	4611      	mov	r1, r2
   bd674:	4620      	mov	r0, r4
   bd676:	9201      	str	r2, [sp, #4]
   bd678:	f7fb fb20 	bl	b8cbc <_malloc_r>
   bd67c:	4604      	mov	r4, r0
   bd67e:	b118      	cbz	r0, bd688 <_strdup_r+0x24>
   bd680:	9a01      	ldr	r2, [sp, #4]
   bd682:	4629      	mov	r1, r5
   bd684:	f7ff ff65 	bl	bd552 <memcpy>
   bd688:	4620      	mov	r0, r4
   bd68a:	b003      	add	sp, #12
   bd68c:	bd30      	pop	{r4, r5, pc}

000bd68e <strlen>:
   bd68e:	4603      	mov	r3, r0
   bd690:	f813 2b01 	ldrb.w	r2, [r3], #1
   bd694:	2a00      	cmp	r2, #0
   bd696:	d1fb      	bne.n	bd690 <strlen+0x2>
   bd698:	1a18      	subs	r0, r3, r0
   bd69a:	3801      	subs	r0, #1
   bd69c:	4770      	bx	lr

000bd69e <strncmp>:
   bd69e:	b510      	push	{r4, lr}
   bd6a0:	b17a      	cbz	r2, bd6c2 <strncmp+0x24>
   bd6a2:	4603      	mov	r3, r0
   bd6a4:	3901      	subs	r1, #1
   bd6a6:	1884      	adds	r4, r0, r2
   bd6a8:	f813 0b01 	ldrb.w	r0, [r3], #1
   bd6ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bd6b0:	4290      	cmp	r0, r2
   bd6b2:	d101      	bne.n	bd6b8 <strncmp+0x1a>
   bd6b4:	42a3      	cmp	r3, r4
   bd6b6:	d101      	bne.n	bd6bc <strncmp+0x1e>
   bd6b8:	1a80      	subs	r0, r0, r2
   bd6ba:	bd10      	pop	{r4, pc}
   bd6bc:	2800      	cmp	r0, #0
   bd6be:	d1f3      	bne.n	bd6a8 <strncmp+0xa>
   bd6c0:	e7fa      	b.n	bd6b8 <strncmp+0x1a>
   bd6c2:	4610      	mov	r0, r2
   bd6c4:	e7f9      	b.n	bd6ba <strncmp+0x1c>

000bd6c6 <strncpy>:
   bd6c6:	b510      	push	{r4, lr}
   bd6c8:	3901      	subs	r1, #1
   bd6ca:	4603      	mov	r3, r0
   bd6cc:	b132      	cbz	r2, bd6dc <strncpy+0x16>
   bd6ce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bd6d2:	f803 4b01 	strb.w	r4, [r3], #1
   bd6d6:	3a01      	subs	r2, #1
   bd6d8:	2c00      	cmp	r4, #0
   bd6da:	d1f7      	bne.n	bd6cc <strncpy+0x6>
   bd6dc:	441a      	add	r2, r3
   bd6de:	2100      	movs	r1, #0
   bd6e0:	4293      	cmp	r3, r2
   bd6e2:	d100      	bne.n	bd6e6 <strncpy+0x20>
   bd6e4:	bd10      	pop	{r4, pc}
   bd6e6:	f803 1b01 	strb.w	r1, [r3], #1
   bd6ea:	e7f9      	b.n	bd6e0 <strncpy+0x1a>

000bd6ec <strnlen>:
   bd6ec:	b510      	push	{r4, lr}
   bd6ee:	4602      	mov	r2, r0
   bd6f0:	4401      	add	r1, r0
   bd6f2:	428a      	cmp	r2, r1
   bd6f4:	4613      	mov	r3, r2
   bd6f6:	d003      	beq.n	bd700 <strnlen+0x14>
   bd6f8:	781c      	ldrb	r4, [r3, #0]
   bd6fa:	3201      	adds	r2, #1
   bd6fc:	2c00      	cmp	r4, #0
   bd6fe:	d1f8      	bne.n	bd6f2 <strnlen+0x6>
   bd700:	1a18      	subs	r0, r3, r0
   bd702:	bd10      	pop	{r4, pc}

000bd704 <sulp>:
   bd704:	b570      	push	{r4, r5, r6, lr}
   bd706:	4604      	mov	r4, r0
   bd708:	460d      	mov	r5, r1
   bd70a:	ec45 4b10 	vmov	d0, r4, r5
   bd70e:	4616      	mov	r6, r2
   bd710:	f001 fe0e 	bl	bf330 <__ulp>
   bd714:	ec51 0b10 	vmov	r0, r1, d0
   bd718:	b17e      	cbz	r6, bd73a <sulp+0x36>
   bd71a:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bd71e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bd722:	2b00      	cmp	r3, #0
   bd724:	dd09      	ble.n	bd73a <sulp+0x36>
   bd726:	051b      	lsls	r3, r3, #20
   bd728:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bd72c:	2400      	movs	r4, #0
   bd72e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bd732:	4622      	mov	r2, r4
   bd734:	462b      	mov	r3, r5
   bd736:	f7ff fb9f 	bl	bce78 <__aeabi_dmul>
   bd73a:	bd70      	pop	{r4, r5, r6, pc}
   bd73c:	0000      	movs	r0, r0
	...

000bd740 <_strtod_l>:
   bd740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd744:	ed2d 8b02 	vpush	{d8}
   bd748:	b09d      	sub	sp, #116	; 0x74
   bd74a:	461f      	mov	r7, r3
   bd74c:	2300      	movs	r3, #0
   bd74e:	9318      	str	r3, [sp, #96]	; 0x60
   bd750:	4ba2      	ldr	r3, [pc, #648]	; (bd9dc <_strtod_l+0x29c>)
   bd752:	9213      	str	r2, [sp, #76]	; 0x4c
   bd754:	681b      	ldr	r3, [r3, #0]
   bd756:	9305      	str	r3, [sp, #20]
   bd758:	4604      	mov	r4, r0
   bd75a:	4618      	mov	r0, r3
   bd75c:	4688      	mov	r8, r1
   bd75e:	f7ff ff96 	bl	bd68e <strlen>
   bd762:	f04f 0a00 	mov.w	sl, #0
   bd766:	4605      	mov	r5, r0
   bd768:	f04f 0b00 	mov.w	fp, #0
   bd76c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bd770:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd772:	781a      	ldrb	r2, [r3, #0]
   bd774:	2a2b      	cmp	r2, #43	; 0x2b
   bd776:	d04e      	beq.n	bd816 <_strtod_l+0xd6>
   bd778:	d83b      	bhi.n	bd7f2 <_strtod_l+0xb2>
   bd77a:	2a0d      	cmp	r2, #13
   bd77c:	d834      	bhi.n	bd7e8 <_strtod_l+0xa8>
   bd77e:	2a08      	cmp	r2, #8
   bd780:	d834      	bhi.n	bd7ec <_strtod_l+0xac>
   bd782:	2a00      	cmp	r2, #0
   bd784:	d03e      	beq.n	bd804 <_strtod_l+0xc4>
   bd786:	2300      	movs	r3, #0
   bd788:	930a      	str	r3, [sp, #40]	; 0x28
   bd78a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bd78c:	7833      	ldrb	r3, [r6, #0]
   bd78e:	2b30      	cmp	r3, #48	; 0x30
   bd790:	f040 80b0 	bne.w	bd8f4 <_strtod_l+0x1b4>
   bd794:	7873      	ldrb	r3, [r6, #1]
   bd796:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bd79a:	2b58      	cmp	r3, #88	; 0x58
   bd79c:	d168      	bne.n	bd870 <_strtod_l+0x130>
   bd79e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bd7a0:	9301      	str	r3, [sp, #4]
   bd7a2:	ab18      	add	r3, sp, #96	; 0x60
   bd7a4:	9702      	str	r7, [sp, #8]
   bd7a6:	9300      	str	r3, [sp, #0]
   bd7a8:	4a8d      	ldr	r2, [pc, #564]	; (bd9e0 <_strtod_l+0x2a0>)
   bd7aa:	ab19      	add	r3, sp, #100	; 0x64
   bd7ac:	a917      	add	r1, sp, #92	; 0x5c
   bd7ae:	4620      	mov	r0, r4
   bd7b0:	f000 ff2e 	bl	be610 <__gethex>
   bd7b4:	f010 0707 	ands.w	r7, r0, #7
   bd7b8:	4605      	mov	r5, r0
   bd7ba:	d005      	beq.n	bd7c8 <_strtod_l+0x88>
   bd7bc:	2f06      	cmp	r7, #6
   bd7be:	d12c      	bne.n	bd81a <_strtod_l+0xda>
   bd7c0:	3601      	adds	r6, #1
   bd7c2:	2300      	movs	r3, #0
   bd7c4:	9617      	str	r6, [sp, #92]	; 0x5c
   bd7c6:	930a      	str	r3, [sp, #40]	; 0x28
   bd7c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bd7ca:	2b00      	cmp	r3, #0
   bd7cc:	f040 8590 	bne.w	be2f0 <_strtod_l+0xbb0>
   bd7d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bd7d2:	b1eb      	cbz	r3, bd810 <_strtod_l+0xd0>
   bd7d4:	4652      	mov	r2, sl
   bd7d6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bd7da:	ec43 2b10 	vmov	d0, r2, r3
   bd7de:	b01d      	add	sp, #116	; 0x74
   bd7e0:	ecbd 8b02 	vpop	{d8}
   bd7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd7e8:	2a20      	cmp	r2, #32
   bd7ea:	d1cc      	bne.n	bd786 <_strtod_l+0x46>
   bd7ec:	3301      	adds	r3, #1
   bd7ee:	9317      	str	r3, [sp, #92]	; 0x5c
   bd7f0:	e7be      	b.n	bd770 <_strtod_l+0x30>
   bd7f2:	2a2d      	cmp	r2, #45	; 0x2d
   bd7f4:	d1c7      	bne.n	bd786 <_strtod_l+0x46>
   bd7f6:	2201      	movs	r2, #1
   bd7f8:	920a      	str	r2, [sp, #40]	; 0x28
   bd7fa:	1c5a      	adds	r2, r3, #1
   bd7fc:	9217      	str	r2, [sp, #92]	; 0x5c
   bd7fe:	785b      	ldrb	r3, [r3, #1]
   bd800:	2b00      	cmp	r3, #0
   bd802:	d1c2      	bne.n	bd78a <_strtod_l+0x4a>
   bd804:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bd806:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bd80a:	2b00      	cmp	r3, #0
   bd80c:	f040 856e 	bne.w	be2ec <_strtod_l+0xbac>
   bd810:	4652      	mov	r2, sl
   bd812:	465b      	mov	r3, fp
   bd814:	e7e1      	b.n	bd7da <_strtod_l+0x9a>
   bd816:	2200      	movs	r2, #0
   bd818:	e7ee      	b.n	bd7f8 <_strtod_l+0xb8>
   bd81a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bd81c:	b13a      	cbz	r2, bd82e <_strtod_l+0xee>
   bd81e:	2135      	movs	r1, #53	; 0x35
   bd820:	a81a      	add	r0, sp, #104	; 0x68
   bd822:	f001 fe90 	bl	bf546 <__copybits>
   bd826:	9918      	ldr	r1, [sp, #96]	; 0x60
   bd828:	4620      	mov	r0, r4
   bd82a:	f001 fa4f 	bl	beccc <_Bfree>
   bd82e:	3f01      	subs	r7, #1
   bd830:	2f04      	cmp	r7, #4
   bd832:	d806      	bhi.n	bd842 <_strtod_l+0x102>
   bd834:	e8df f007 	tbb	[pc, r7]
   bd838:	1714030a 	.word	0x1714030a
   bd83c:	0a          	.byte	0x0a
   bd83d:	00          	.byte	0x00
   bd83e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bd842:	0728      	lsls	r0, r5, #28
   bd844:	d5c0      	bpl.n	bd7c8 <_strtod_l+0x88>
   bd846:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bd84a:	e7bd      	b.n	bd7c8 <_strtod_l+0x88>
   bd84c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bd850:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bd852:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bd856:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bd85a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bd85e:	e7f0      	b.n	bd842 <_strtod_l+0x102>
   bd860:	f8df b180 	ldr.w	fp, [pc, #384]	; bd9e4 <_strtod_l+0x2a4>
   bd864:	e7ed      	b.n	bd842 <_strtod_l+0x102>
   bd866:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bd86a:	f04f 3aff 	mov.w	sl, #4294967295
   bd86e:	e7e8      	b.n	bd842 <_strtod_l+0x102>
   bd870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd872:	1c5a      	adds	r2, r3, #1
   bd874:	9217      	str	r2, [sp, #92]	; 0x5c
   bd876:	785b      	ldrb	r3, [r3, #1]
   bd878:	2b30      	cmp	r3, #48	; 0x30
   bd87a:	d0f9      	beq.n	bd870 <_strtod_l+0x130>
   bd87c:	2b00      	cmp	r3, #0
   bd87e:	d0a3      	beq.n	bd7c8 <_strtod_l+0x88>
   bd880:	2301      	movs	r3, #1
   bd882:	f04f 0900 	mov.w	r9, #0
   bd886:	9304      	str	r3, [sp, #16]
   bd888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd88a:	9308      	str	r3, [sp, #32]
   bd88c:	f8cd 901c 	str.w	r9, [sp, #28]
   bd890:	464f      	mov	r7, r9
   bd892:	220a      	movs	r2, #10
   bd894:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bd896:	7806      	ldrb	r6, [r0, #0]
   bd898:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bd89c:	b2d9      	uxtb	r1, r3
   bd89e:	2909      	cmp	r1, #9
   bd8a0:	d92a      	bls.n	bd8f8 <_strtod_l+0x1b8>
   bd8a2:	9905      	ldr	r1, [sp, #20]
   bd8a4:	462a      	mov	r2, r5
   bd8a6:	f7ff fefa 	bl	bd69e <strncmp>
   bd8aa:	b398      	cbz	r0, bd914 <_strtod_l+0x1d4>
   bd8ac:	2000      	movs	r0, #0
   bd8ae:	4632      	mov	r2, r6
   bd8b0:	463d      	mov	r5, r7
   bd8b2:	9005      	str	r0, [sp, #20]
   bd8b4:	4603      	mov	r3, r0
   bd8b6:	2a65      	cmp	r2, #101	; 0x65
   bd8b8:	d001      	beq.n	bd8be <_strtod_l+0x17e>
   bd8ba:	2a45      	cmp	r2, #69	; 0x45
   bd8bc:	d118      	bne.n	bd8f0 <_strtod_l+0x1b0>
   bd8be:	b91d      	cbnz	r5, bd8c8 <_strtod_l+0x188>
   bd8c0:	9a04      	ldr	r2, [sp, #16]
   bd8c2:	4302      	orrs	r2, r0
   bd8c4:	d09e      	beq.n	bd804 <_strtod_l+0xc4>
   bd8c6:	2500      	movs	r5, #0
   bd8c8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bd8cc:	f108 0201 	add.w	r2, r8, #1
   bd8d0:	9217      	str	r2, [sp, #92]	; 0x5c
   bd8d2:	f898 2001 	ldrb.w	r2, [r8, #1]
   bd8d6:	2a2b      	cmp	r2, #43	; 0x2b
   bd8d8:	d075      	beq.n	bd9c6 <_strtod_l+0x286>
   bd8da:	2a2d      	cmp	r2, #45	; 0x2d
   bd8dc:	d07b      	beq.n	bd9d6 <_strtod_l+0x296>
   bd8de:	f04f 0c00 	mov.w	ip, #0
   bd8e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bd8e6:	2909      	cmp	r1, #9
   bd8e8:	f240 8082 	bls.w	bd9f0 <_strtod_l+0x2b0>
   bd8ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bd8f0:	2600      	movs	r6, #0
   bd8f2:	e09d      	b.n	bda30 <_strtod_l+0x2f0>
   bd8f4:	2300      	movs	r3, #0
   bd8f6:	e7c4      	b.n	bd882 <_strtod_l+0x142>
   bd8f8:	2f08      	cmp	r7, #8
   bd8fa:	bfd8      	it	le
   bd8fc:	9907      	ldrle	r1, [sp, #28]
   bd8fe:	f100 0001 	add.w	r0, r0, #1
   bd902:	bfda      	itte	le
   bd904:	fb02 3301 	mlale	r3, r2, r1, r3
   bd908:	9307      	strle	r3, [sp, #28]
   bd90a:	fb02 3909 	mlagt	r9, r2, r9, r3
   bd90e:	3701      	adds	r7, #1
   bd910:	9017      	str	r0, [sp, #92]	; 0x5c
   bd912:	e7bf      	b.n	bd894 <_strtod_l+0x154>
   bd914:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd916:	195a      	adds	r2, r3, r5
   bd918:	9217      	str	r2, [sp, #92]	; 0x5c
   bd91a:	5d5a      	ldrb	r2, [r3, r5]
   bd91c:	2f00      	cmp	r7, #0
   bd91e:	d037      	beq.n	bd990 <_strtod_l+0x250>
   bd920:	9005      	str	r0, [sp, #20]
   bd922:	463d      	mov	r5, r7
   bd924:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bd928:	2b09      	cmp	r3, #9
   bd92a:	d912      	bls.n	bd952 <_strtod_l+0x212>
   bd92c:	2301      	movs	r3, #1
   bd92e:	e7c2      	b.n	bd8b6 <_strtod_l+0x176>
   bd930:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd932:	1c5a      	adds	r2, r3, #1
   bd934:	9217      	str	r2, [sp, #92]	; 0x5c
   bd936:	785a      	ldrb	r2, [r3, #1]
   bd938:	3001      	adds	r0, #1
   bd93a:	2a30      	cmp	r2, #48	; 0x30
   bd93c:	d0f8      	beq.n	bd930 <_strtod_l+0x1f0>
   bd93e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bd942:	2b08      	cmp	r3, #8
   bd944:	f200 84d9 	bhi.w	be2fa <_strtod_l+0xbba>
   bd948:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd94a:	9005      	str	r0, [sp, #20]
   bd94c:	2000      	movs	r0, #0
   bd94e:	9308      	str	r3, [sp, #32]
   bd950:	4605      	mov	r5, r0
   bd952:	3a30      	subs	r2, #48	; 0x30
   bd954:	f100 0301 	add.w	r3, r0, #1
   bd958:	d014      	beq.n	bd984 <_strtod_l+0x244>
   bd95a:	9905      	ldr	r1, [sp, #20]
   bd95c:	4419      	add	r1, r3
   bd95e:	9105      	str	r1, [sp, #20]
   bd960:	462b      	mov	r3, r5
   bd962:	eb00 0e05 	add.w	lr, r0, r5
   bd966:	210a      	movs	r1, #10
   bd968:	4573      	cmp	r3, lr
   bd96a:	d113      	bne.n	bd994 <_strtod_l+0x254>
   bd96c:	182b      	adds	r3, r5, r0
   bd96e:	2b08      	cmp	r3, #8
   bd970:	f105 0501 	add.w	r5, r5, #1
   bd974:	4405      	add	r5, r0
   bd976:	dc1c      	bgt.n	bd9b2 <_strtod_l+0x272>
   bd978:	9907      	ldr	r1, [sp, #28]
   bd97a:	230a      	movs	r3, #10
   bd97c:	fb03 2301 	mla	r3, r3, r1, r2
   bd980:	9307      	str	r3, [sp, #28]
   bd982:	2300      	movs	r3, #0
   bd984:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bd986:	1c51      	adds	r1, r2, #1
   bd988:	9117      	str	r1, [sp, #92]	; 0x5c
   bd98a:	7852      	ldrb	r2, [r2, #1]
   bd98c:	4618      	mov	r0, r3
   bd98e:	e7c9      	b.n	bd924 <_strtod_l+0x1e4>
   bd990:	4638      	mov	r0, r7
   bd992:	e7d2      	b.n	bd93a <_strtod_l+0x1fa>
   bd994:	2b08      	cmp	r3, #8
   bd996:	dc04      	bgt.n	bd9a2 <_strtod_l+0x262>
   bd998:	9e07      	ldr	r6, [sp, #28]
   bd99a:	434e      	muls	r6, r1
   bd99c:	9607      	str	r6, [sp, #28]
   bd99e:	3301      	adds	r3, #1
   bd9a0:	e7e2      	b.n	bd968 <_strtod_l+0x228>
   bd9a2:	f103 0c01 	add.w	ip, r3, #1
   bd9a6:	f1bc 0f10 	cmp.w	ip, #16
   bd9aa:	bfd8      	it	le
   bd9ac:	fb01 f909 	mulle.w	r9, r1, r9
   bd9b0:	e7f5      	b.n	bd99e <_strtod_l+0x25e>
   bd9b2:	2d10      	cmp	r5, #16
   bd9b4:	bfdc      	itt	le
   bd9b6:	230a      	movle	r3, #10
   bd9b8:	fb03 2909 	mlale	r9, r3, r9, r2
   bd9bc:	e7e1      	b.n	bd982 <_strtod_l+0x242>
   bd9be:	2300      	movs	r3, #0
   bd9c0:	9305      	str	r3, [sp, #20]
   bd9c2:	2301      	movs	r3, #1
   bd9c4:	e77c      	b.n	bd8c0 <_strtod_l+0x180>
   bd9c6:	f04f 0c00 	mov.w	ip, #0
   bd9ca:	f108 0202 	add.w	r2, r8, #2
   bd9ce:	9217      	str	r2, [sp, #92]	; 0x5c
   bd9d0:	f898 2002 	ldrb.w	r2, [r8, #2]
   bd9d4:	e785      	b.n	bd8e2 <_strtod_l+0x1a2>
   bd9d6:	f04f 0c01 	mov.w	ip, #1
   bd9da:	e7f6      	b.n	bd9ca <_strtod_l+0x28a>
   bd9dc:	000c0fa8 	.word	0x000c0fa8
   bd9e0:	000c0dc0 	.word	0x000c0dc0
   bd9e4:	7ff00000 	.word	0x7ff00000
   bd9e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bd9ea:	1c51      	adds	r1, r2, #1
   bd9ec:	9117      	str	r1, [sp, #92]	; 0x5c
   bd9ee:	7852      	ldrb	r2, [r2, #1]
   bd9f0:	2a30      	cmp	r2, #48	; 0x30
   bd9f2:	d0f9      	beq.n	bd9e8 <_strtod_l+0x2a8>
   bd9f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bd9f8:	2908      	cmp	r1, #8
   bd9fa:	f63f af79 	bhi.w	bd8f0 <_strtod_l+0x1b0>
   bd9fe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bda02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bda04:	9206      	str	r2, [sp, #24]
   bda06:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bda08:	1c51      	adds	r1, r2, #1
   bda0a:	9117      	str	r1, [sp, #92]	; 0x5c
   bda0c:	7852      	ldrb	r2, [r2, #1]
   bda0e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bda12:	2e09      	cmp	r6, #9
   bda14:	d937      	bls.n	bda86 <_strtod_l+0x346>
   bda16:	9e06      	ldr	r6, [sp, #24]
   bda18:	1b89      	subs	r1, r1, r6
   bda1a:	2908      	cmp	r1, #8
   bda1c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bda20:	dc02      	bgt.n	bda28 <_strtod_l+0x2e8>
   bda22:	4576      	cmp	r6, lr
   bda24:	bfa8      	it	ge
   bda26:	4676      	movge	r6, lr
   bda28:	f1bc 0f00 	cmp.w	ip, #0
   bda2c:	d000      	beq.n	bda30 <_strtod_l+0x2f0>
   bda2e:	4276      	negs	r6, r6
   bda30:	2d00      	cmp	r5, #0
   bda32:	d14d      	bne.n	bdad0 <_strtod_l+0x390>
   bda34:	9904      	ldr	r1, [sp, #16]
   bda36:	4301      	orrs	r1, r0
   bda38:	f47f aec6 	bne.w	bd7c8 <_strtod_l+0x88>
   bda3c:	2b00      	cmp	r3, #0
   bda3e:	f47f aee1 	bne.w	bd804 <_strtod_l+0xc4>
   bda42:	2a69      	cmp	r2, #105	; 0x69
   bda44:	d027      	beq.n	bda96 <_strtod_l+0x356>
   bda46:	dc24      	bgt.n	bda92 <_strtod_l+0x352>
   bda48:	2a49      	cmp	r2, #73	; 0x49
   bda4a:	d024      	beq.n	bda96 <_strtod_l+0x356>
   bda4c:	2a4e      	cmp	r2, #78	; 0x4e
   bda4e:	f47f aed9 	bne.w	bd804 <_strtod_l+0xc4>
   bda52:	499f      	ldr	r1, [pc, #636]	; (bdcd0 <_strtod_l+0x590>)
   bda54:	a817      	add	r0, sp, #92	; 0x5c
   bda56:	f001 f833 	bl	beac0 <__match>
   bda5a:	2800      	cmp	r0, #0
   bda5c:	f43f aed2 	beq.w	bd804 <_strtod_l+0xc4>
   bda60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bda62:	781b      	ldrb	r3, [r3, #0]
   bda64:	2b28      	cmp	r3, #40	; 0x28
   bda66:	d12d      	bne.n	bdac4 <_strtod_l+0x384>
   bda68:	499a      	ldr	r1, [pc, #616]	; (bdcd4 <_strtod_l+0x594>)
   bda6a:	aa1a      	add	r2, sp, #104	; 0x68
   bda6c:	a817      	add	r0, sp, #92	; 0x5c
   bda6e:	f001 f83b 	bl	beae8 <__hexnan>
   bda72:	2805      	cmp	r0, #5
   bda74:	d126      	bne.n	bdac4 <_strtod_l+0x384>
   bda76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bda78:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bda7c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bda80:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bda84:	e6a0      	b.n	bd7c8 <_strtod_l+0x88>
   bda86:	210a      	movs	r1, #10
   bda88:	fb01 2e0e 	mla	lr, r1, lr, r2
   bda8c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bda90:	e7b9      	b.n	bda06 <_strtod_l+0x2c6>
   bda92:	2a6e      	cmp	r2, #110	; 0x6e
   bda94:	e7db      	b.n	bda4e <_strtod_l+0x30e>
   bda96:	4990      	ldr	r1, [pc, #576]	; (bdcd8 <_strtod_l+0x598>)
   bda98:	a817      	add	r0, sp, #92	; 0x5c
   bda9a:	f001 f811 	bl	beac0 <__match>
   bda9e:	2800      	cmp	r0, #0
   bdaa0:	f43f aeb0 	beq.w	bd804 <_strtod_l+0xc4>
   bdaa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bdaa6:	498d      	ldr	r1, [pc, #564]	; (bdcdc <_strtod_l+0x59c>)
   bdaa8:	3b01      	subs	r3, #1
   bdaaa:	a817      	add	r0, sp, #92	; 0x5c
   bdaac:	9317      	str	r3, [sp, #92]	; 0x5c
   bdaae:	f001 f807 	bl	beac0 <__match>
   bdab2:	b910      	cbnz	r0, bdaba <_strtod_l+0x37a>
   bdab4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bdab6:	3301      	adds	r3, #1
   bdab8:	9317      	str	r3, [sp, #92]	; 0x5c
   bdaba:	f8df b230 	ldr.w	fp, [pc, #560]	; bdcec <_strtod_l+0x5ac>
   bdabe:	f04f 0a00 	mov.w	sl, #0
   bdac2:	e681      	b.n	bd7c8 <_strtod_l+0x88>
   bdac4:	4886      	ldr	r0, [pc, #536]	; (bdce0 <_strtod_l+0x5a0>)
   bdac6:	f001 fd93 	bl	bf5f0 <nan>
   bdaca:	ec5b ab10 	vmov	sl, fp, d0
   bdace:	e67b      	b.n	bd7c8 <_strtod_l+0x88>
   bdad0:	9b05      	ldr	r3, [sp, #20]
   bdad2:	9807      	ldr	r0, [sp, #28]
   bdad4:	1af3      	subs	r3, r6, r3
   bdad6:	2f00      	cmp	r7, #0
   bdad8:	bf08      	it	eq
   bdada:	462f      	moveq	r7, r5
   bdadc:	2d10      	cmp	r5, #16
   bdade:	9306      	str	r3, [sp, #24]
   bdae0:	46a8      	mov	r8, r5
   bdae2:	bfa8      	it	ge
   bdae4:	f04f 0810 	movge.w	r8, #16
   bdae8:	f7ff f94c 	bl	bcd84 <__aeabi_ui2d>
   bdaec:	2d09      	cmp	r5, #9
   bdaee:	4682      	mov	sl, r0
   bdaf0:	468b      	mov	fp, r1
   bdaf2:	dd13      	ble.n	bdb1c <_strtod_l+0x3dc>
   bdaf4:	4b7b      	ldr	r3, [pc, #492]	; (bdce4 <_strtod_l+0x5a4>)
   bdaf6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bdafa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bdafe:	f7ff f9bb 	bl	bce78 <__aeabi_dmul>
   bdb02:	4682      	mov	sl, r0
   bdb04:	4648      	mov	r0, r9
   bdb06:	468b      	mov	fp, r1
   bdb08:	f7ff f93c 	bl	bcd84 <__aeabi_ui2d>
   bdb0c:	4602      	mov	r2, r0
   bdb0e:	460b      	mov	r3, r1
   bdb10:	4650      	mov	r0, sl
   bdb12:	4659      	mov	r1, fp
   bdb14:	f7fe fffa 	bl	bcb0c <__adddf3>
   bdb18:	4682      	mov	sl, r0
   bdb1a:	468b      	mov	fp, r1
   bdb1c:	2d0f      	cmp	r5, #15
   bdb1e:	dc38      	bgt.n	bdb92 <_strtod_l+0x452>
   bdb20:	9b06      	ldr	r3, [sp, #24]
   bdb22:	2b00      	cmp	r3, #0
   bdb24:	f43f ae50 	beq.w	bd7c8 <_strtod_l+0x88>
   bdb28:	dd24      	ble.n	bdb74 <_strtod_l+0x434>
   bdb2a:	2b16      	cmp	r3, #22
   bdb2c:	dc0b      	bgt.n	bdb46 <_strtod_l+0x406>
   bdb2e:	496d      	ldr	r1, [pc, #436]	; (bdce4 <_strtod_l+0x5a4>)
   bdb30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bdb34:	e9d1 0100 	ldrd	r0, r1, [r1]
   bdb38:	4652      	mov	r2, sl
   bdb3a:	465b      	mov	r3, fp
   bdb3c:	f7ff f99c 	bl	bce78 <__aeabi_dmul>
   bdb40:	4682      	mov	sl, r0
   bdb42:	468b      	mov	fp, r1
   bdb44:	e640      	b.n	bd7c8 <_strtod_l+0x88>
   bdb46:	9a06      	ldr	r2, [sp, #24]
   bdb48:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bdb4c:	4293      	cmp	r3, r2
   bdb4e:	db20      	blt.n	bdb92 <_strtod_l+0x452>
   bdb50:	4c64      	ldr	r4, [pc, #400]	; (bdce4 <_strtod_l+0x5a4>)
   bdb52:	f1c5 050f 	rsb	r5, r5, #15
   bdb56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bdb5a:	4652      	mov	r2, sl
   bdb5c:	465b      	mov	r3, fp
   bdb5e:	e9d1 0100 	ldrd	r0, r1, [r1]
   bdb62:	f7ff f989 	bl	bce78 <__aeabi_dmul>
   bdb66:	9b06      	ldr	r3, [sp, #24]
   bdb68:	1b5d      	subs	r5, r3, r5
   bdb6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bdb6e:	e9d4 2300 	ldrd	r2, r3, [r4]
   bdb72:	e7e3      	b.n	bdb3c <_strtod_l+0x3fc>
   bdb74:	9b06      	ldr	r3, [sp, #24]
   bdb76:	3316      	adds	r3, #22
   bdb78:	db0b      	blt.n	bdb92 <_strtod_l+0x452>
   bdb7a:	9b05      	ldr	r3, [sp, #20]
   bdb7c:	1b9e      	subs	r6, r3, r6
   bdb7e:	4b59      	ldr	r3, [pc, #356]	; (bdce4 <_strtod_l+0x5a4>)
   bdb80:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bdb84:	e9d6 2300 	ldrd	r2, r3, [r6]
   bdb88:	4650      	mov	r0, sl
   bdb8a:	4659      	mov	r1, fp
   bdb8c:	f7ff fa9e 	bl	bd0cc <__aeabi_ddiv>
   bdb90:	e7d6      	b.n	bdb40 <_strtod_l+0x400>
   bdb92:	9b06      	ldr	r3, [sp, #24]
   bdb94:	eba5 0808 	sub.w	r8, r5, r8
   bdb98:	4498      	add	r8, r3
   bdb9a:	f1b8 0f00 	cmp.w	r8, #0
   bdb9e:	dd74      	ble.n	bdc8a <_strtod_l+0x54a>
   bdba0:	f018 030f 	ands.w	r3, r8, #15
   bdba4:	d00a      	beq.n	bdbbc <_strtod_l+0x47c>
   bdba6:	494f      	ldr	r1, [pc, #316]	; (bdce4 <_strtod_l+0x5a4>)
   bdba8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bdbac:	4652      	mov	r2, sl
   bdbae:	465b      	mov	r3, fp
   bdbb0:	e9d1 0100 	ldrd	r0, r1, [r1]
   bdbb4:	f7ff f960 	bl	bce78 <__aeabi_dmul>
   bdbb8:	4682      	mov	sl, r0
   bdbba:	468b      	mov	fp, r1
   bdbbc:	f038 080f 	bics.w	r8, r8, #15
   bdbc0:	d04f      	beq.n	bdc62 <_strtod_l+0x522>
   bdbc2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bdbc6:	dd22      	ble.n	bdc0e <_strtod_l+0x4ce>
   bdbc8:	2500      	movs	r5, #0
   bdbca:	462e      	mov	r6, r5
   bdbcc:	9507      	str	r5, [sp, #28]
   bdbce:	9505      	str	r5, [sp, #20]
   bdbd0:	2322      	movs	r3, #34	; 0x22
   bdbd2:	f8df b118 	ldr.w	fp, [pc, #280]	; bdcec <_strtod_l+0x5ac>
   bdbd6:	6023      	str	r3, [r4, #0]
   bdbd8:	f04f 0a00 	mov.w	sl, #0
   bdbdc:	9b07      	ldr	r3, [sp, #28]
   bdbde:	2b00      	cmp	r3, #0
   bdbe0:	f43f adf2 	beq.w	bd7c8 <_strtod_l+0x88>
   bdbe4:	9918      	ldr	r1, [sp, #96]	; 0x60
   bdbe6:	4620      	mov	r0, r4
   bdbe8:	f001 f870 	bl	beccc <_Bfree>
   bdbec:	9905      	ldr	r1, [sp, #20]
   bdbee:	4620      	mov	r0, r4
   bdbf0:	f001 f86c 	bl	beccc <_Bfree>
   bdbf4:	4631      	mov	r1, r6
   bdbf6:	4620      	mov	r0, r4
   bdbf8:	f001 f868 	bl	beccc <_Bfree>
   bdbfc:	9907      	ldr	r1, [sp, #28]
   bdbfe:	4620      	mov	r0, r4
   bdc00:	f001 f864 	bl	beccc <_Bfree>
   bdc04:	4629      	mov	r1, r5
   bdc06:	4620      	mov	r0, r4
   bdc08:	f001 f860 	bl	beccc <_Bfree>
   bdc0c:	e5dc      	b.n	bd7c8 <_strtod_l+0x88>
   bdc0e:	4b36      	ldr	r3, [pc, #216]	; (bdce8 <_strtod_l+0x5a8>)
   bdc10:	9304      	str	r3, [sp, #16]
   bdc12:	2300      	movs	r3, #0
   bdc14:	ea4f 1828 	mov.w	r8, r8, asr #4
   bdc18:	4650      	mov	r0, sl
   bdc1a:	4659      	mov	r1, fp
   bdc1c:	4699      	mov	r9, r3
   bdc1e:	f1b8 0f01 	cmp.w	r8, #1
   bdc22:	dc21      	bgt.n	bdc68 <_strtod_l+0x528>
   bdc24:	b10b      	cbz	r3, bdc2a <_strtod_l+0x4ea>
   bdc26:	4682      	mov	sl, r0
   bdc28:	468b      	mov	fp, r1
   bdc2a:	4b2f      	ldr	r3, [pc, #188]	; (bdce8 <_strtod_l+0x5a8>)
   bdc2c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bdc30:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bdc34:	4652      	mov	r2, sl
   bdc36:	465b      	mov	r3, fp
   bdc38:	e9d9 0100 	ldrd	r0, r1, [r9]
   bdc3c:	f7ff f91c 	bl	bce78 <__aeabi_dmul>
   bdc40:	4b2a      	ldr	r3, [pc, #168]	; (bdcec <_strtod_l+0x5ac>)
   bdc42:	460a      	mov	r2, r1
   bdc44:	400b      	ands	r3, r1
   bdc46:	492a      	ldr	r1, [pc, #168]	; (bdcf0 <_strtod_l+0x5b0>)
   bdc48:	428b      	cmp	r3, r1
   bdc4a:	4682      	mov	sl, r0
   bdc4c:	d8bc      	bhi.n	bdbc8 <_strtod_l+0x488>
   bdc4e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bdc52:	428b      	cmp	r3, r1
   bdc54:	bf86      	itte	hi
   bdc56:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bdcf4 <_strtod_l+0x5b4>
   bdc5a:	f04f 3aff 	movhi.w	sl, #4294967295
   bdc5e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bdc62:	2300      	movs	r3, #0
   bdc64:	9304      	str	r3, [sp, #16]
   bdc66:	e084      	b.n	bdd72 <_strtod_l+0x632>
   bdc68:	f018 0f01 	tst.w	r8, #1
   bdc6c:	d005      	beq.n	bdc7a <_strtod_l+0x53a>
   bdc6e:	9b04      	ldr	r3, [sp, #16]
   bdc70:	e9d3 2300 	ldrd	r2, r3, [r3]
   bdc74:	f7ff f900 	bl	bce78 <__aeabi_dmul>
   bdc78:	2301      	movs	r3, #1
   bdc7a:	9a04      	ldr	r2, [sp, #16]
   bdc7c:	3208      	adds	r2, #8
   bdc7e:	f109 0901 	add.w	r9, r9, #1
   bdc82:	ea4f 0868 	mov.w	r8, r8, asr #1
   bdc86:	9204      	str	r2, [sp, #16]
   bdc88:	e7c9      	b.n	bdc1e <_strtod_l+0x4de>
   bdc8a:	d0ea      	beq.n	bdc62 <_strtod_l+0x522>
   bdc8c:	f1c8 0800 	rsb	r8, r8, #0
   bdc90:	f018 020f 	ands.w	r2, r8, #15
   bdc94:	d00a      	beq.n	bdcac <_strtod_l+0x56c>
   bdc96:	4b13      	ldr	r3, [pc, #76]	; (bdce4 <_strtod_l+0x5a4>)
   bdc98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bdc9c:	4650      	mov	r0, sl
   bdc9e:	4659      	mov	r1, fp
   bdca0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bdca4:	f7ff fa12 	bl	bd0cc <__aeabi_ddiv>
   bdca8:	4682      	mov	sl, r0
   bdcaa:	468b      	mov	fp, r1
   bdcac:	ea5f 1828 	movs.w	r8, r8, asr #4
   bdcb0:	d0d7      	beq.n	bdc62 <_strtod_l+0x522>
   bdcb2:	f1b8 0f1f 	cmp.w	r8, #31
   bdcb6:	dd1f      	ble.n	bdcf8 <_strtod_l+0x5b8>
   bdcb8:	2500      	movs	r5, #0
   bdcba:	462e      	mov	r6, r5
   bdcbc:	9507      	str	r5, [sp, #28]
   bdcbe:	9505      	str	r5, [sp, #20]
   bdcc0:	2322      	movs	r3, #34	; 0x22
   bdcc2:	f04f 0a00 	mov.w	sl, #0
   bdcc6:	f04f 0b00 	mov.w	fp, #0
   bdcca:	6023      	str	r3, [r4, #0]
   bdccc:	e786      	b.n	bdbdc <_strtod_l+0x49c>
   bdcce:	bf00      	nop
   bdcd0:	000c0dba 	.word	0x000c0dba
   bdcd4:	000c0dd4 	.word	0x000c0dd4
   bdcd8:	000c0db1 	.word	0x000c0db1
   bdcdc:	000c0db4 	.word	0x000c0db4
   bdce0:	000bfabb 	.word	0x000bfabb
   bdce4:	000c1068 	.word	0x000c1068
   bdce8:	000c1040 	.word	0x000c1040
   bdcec:	7ff00000 	.word	0x7ff00000
   bdcf0:	7ca00000 	.word	0x7ca00000
   bdcf4:	7fefffff 	.word	0x7fefffff
   bdcf8:	f018 0310 	ands.w	r3, r8, #16
   bdcfc:	bf18      	it	ne
   bdcfe:	236a      	movne	r3, #106	; 0x6a
   bdd00:	f8df 93ac 	ldr.w	r9, [pc, #940]	; be0b0 <_strtod_l+0x970>
   bdd04:	9304      	str	r3, [sp, #16]
   bdd06:	4650      	mov	r0, sl
   bdd08:	4659      	mov	r1, fp
   bdd0a:	2300      	movs	r3, #0
   bdd0c:	f018 0f01 	tst.w	r8, #1
   bdd10:	d004      	beq.n	bdd1c <_strtod_l+0x5dc>
   bdd12:	e9d9 2300 	ldrd	r2, r3, [r9]
   bdd16:	f7ff f8af 	bl	bce78 <__aeabi_dmul>
   bdd1a:	2301      	movs	r3, #1
   bdd1c:	ea5f 0868 	movs.w	r8, r8, asr #1
   bdd20:	f109 0908 	add.w	r9, r9, #8
   bdd24:	d1f2      	bne.n	bdd0c <_strtod_l+0x5cc>
   bdd26:	b10b      	cbz	r3, bdd2c <_strtod_l+0x5ec>
   bdd28:	4682      	mov	sl, r0
   bdd2a:	468b      	mov	fp, r1
   bdd2c:	9b04      	ldr	r3, [sp, #16]
   bdd2e:	b1c3      	cbz	r3, bdd62 <_strtod_l+0x622>
   bdd30:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bdd34:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bdd38:	2b00      	cmp	r3, #0
   bdd3a:	4659      	mov	r1, fp
   bdd3c:	dd11      	ble.n	bdd62 <_strtod_l+0x622>
   bdd3e:	2b1f      	cmp	r3, #31
   bdd40:	f340 8124 	ble.w	bdf8c <_strtod_l+0x84c>
   bdd44:	2b34      	cmp	r3, #52	; 0x34
   bdd46:	bfde      	ittt	le
   bdd48:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bdd4c:	f04f 33ff 	movle.w	r3, #4294967295
   bdd50:	fa03 f202 	lslle.w	r2, r3, r2
   bdd54:	f04f 0a00 	mov.w	sl, #0
   bdd58:	bfcc      	ite	gt
   bdd5a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bdd5e:	ea02 0b01 	andle.w	fp, r2, r1
   bdd62:	2200      	movs	r2, #0
   bdd64:	2300      	movs	r3, #0
   bdd66:	4650      	mov	r0, sl
   bdd68:	4659      	mov	r1, fp
   bdd6a:	f7ff faed 	bl	bd348 <__aeabi_dcmpeq>
   bdd6e:	2800      	cmp	r0, #0
   bdd70:	d1a2      	bne.n	bdcb8 <_strtod_l+0x578>
   bdd72:	9b07      	ldr	r3, [sp, #28]
   bdd74:	9300      	str	r3, [sp, #0]
   bdd76:	9908      	ldr	r1, [sp, #32]
   bdd78:	462b      	mov	r3, r5
   bdd7a:	463a      	mov	r2, r7
   bdd7c:	4620      	mov	r0, r4
   bdd7e:	f001 f80d 	bl	bed9c <__s2b>
   bdd82:	9007      	str	r0, [sp, #28]
   bdd84:	2800      	cmp	r0, #0
   bdd86:	f43f af1f 	beq.w	bdbc8 <_strtod_l+0x488>
   bdd8a:	9b05      	ldr	r3, [sp, #20]
   bdd8c:	1b9e      	subs	r6, r3, r6
   bdd8e:	9b06      	ldr	r3, [sp, #24]
   bdd90:	2b00      	cmp	r3, #0
   bdd92:	bfb4      	ite	lt
   bdd94:	4633      	movlt	r3, r6
   bdd96:	2300      	movge	r3, #0
   bdd98:	930c      	str	r3, [sp, #48]	; 0x30
   bdd9a:	9b06      	ldr	r3, [sp, #24]
   bdd9c:	2500      	movs	r5, #0
   bdd9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bdda2:	9312      	str	r3, [sp, #72]	; 0x48
   bdda4:	462e      	mov	r6, r5
   bdda6:	9b07      	ldr	r3, [sp, #28]
   bdda8:	4620      	mov	r0, r4
   bddaa:	6859      	ldr	r1, [r3, #4]
   bddac:	f000 ff4e 	bl	bec4c <_Balloc>
   bddb0:	9005      	str	r0, [sp, #20]
   bddb2:	2800      	cmp	r0, #0
   bddb4:	f43f af0c 	beq.w	bdbd0 <_strtod_l+0x490>
   bddb8:	9b07      	ldr	r3, [sp, #28]
   bddba:	691a      	ldr	r2, [r3, #16]
   bddbc:	3202      	adds	r2, #2
   bddbe:	f103 010c 	add.w	r1, r3, #12
   bddc2:	0092      	lsls	r2, r2, #2
   bddc4:	300c      	adds	r0, #12
   bddc6:	f7ff fbc4 	bl	bd552 <memcpy>
   bddca:	ec4b ab10 	vmov	d0, sl, fp
   bddce:	aa1a      	add	r2, sp, #104	; 0x68
   bddd0:	a919      	add	r1, sp, #100	; 0x64
   bddd2:	4620      	mov	r0, r4
   bddd4:	f001 fb28 	bl	bf428 <__d2b>
   bddd8:	ec4b ab18 	vmov	d8, sl, fp
   bdddc:	9018      	str	r0, [sp, #96]	; 0x60
   bddde:	2800      	cmp	r0, #0
   bdde0:	f43f aef6 	beq.w	bdbd0 <_strtod_l+0x490>
   bdde4:	2101      	movs	r1, #1
   bdde6:	4620      	mov	r0, r4
   bdde8:	f001 f872 	bl	beed0 <__i2b>
   bddec:	4606      	mov	r6, r0
   bddee:	2800      	cmp	r0, #0
   bddf0:	f43f aeee 	beq.w	bdbd0 <_strtod_l+0x490>
   bddf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bddf6:	9904      	ldr	r1, [sp, #16]
   bddf8:	2b00      	cmp	r3, #0
   bddfa:	bfab      	itete	ge
   bddfc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bddfe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bde00:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bde02:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bde06:	bfac      	ite	ge
   bde08:	eb03 0902 	addge.w	r9, r3, r2
   bde0c:	1ad7      	sublt	r7, r2, r3
   bde0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bde10:	eba3 0801 	sub.w	r8, r3, r1
   bde14:	4490      	add	r8, r2
   bde16:	4ba1      	ldr	r3, [pc, #644]	; (be09c <_strtod_l+0x95c>)
   bde18:	f108 38ff 	add.w	r8, r8, #4294967295
   bde1c:	4598      	cmp	r8, r3
   bde1e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bde22:	f280 80c7 	bge.w	bdfb4 <_strtod_l+0x874>
   bde26:	eba3 0308 	sub.w	r3, r3, r8
   bde2a:	2b1f      	cmp	r3, #31
   bde2c:	eba2 0203 	sub.w	r2, r2, r3
   bde30:	f04f 0101 	mov.w	r1, #1
   bde34:	f300 80b1 	bgt.w	bdf9a <_strtod_l+0x85a>
   bde38:	fa01 f303 	lsl.w	r3, r1, r3
   bde3c:	930d      	str	r3, [sp, #52]	; 0x34
   bde3e:	2300      	movs	r3, #0
   bde40:	9308      	str	r3, [sp, #32]
   bde42:	eb09 0802 	add.w	r8, r9, r2
   bde46:	9b04      	ldr	r3, [sp, #16]
   bde48:	45c1      	cmp	r9, r8
   bde4a:	4417      	add	r7, r2
   bde4c:	441f      	add	r7, r3
   bde4e:	464b      	mov	r3, r9
   bde50:	bfa8      	it	ge
   bde52:	4643      	movge	r3, r8
   bde54:	42bb      	cmp	r3, r7
   bde56:	bfa8      	it	ge
   bde58:	463b      	movge	r3, r7
   bde5a:	2b00      	cmp	r3, #0
   bde5c:	bfc2      	ittt	gt
   bde5e:	eba8 0803 	subgt.w	r8, r8, r3
   bde62:	1aff      	subgt	r7, r7, r3
   bde64:	eba9 0903 	subgt.w	r9, r9, r3
   bde68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bde6a:	2b00      	cmp	r3, #0
   bde6c:	dd17      	ble.n	bde9e <_strtod_l+0x75e>
   bde6e:	4631      	mov	r1, r6
   bde70:	461a      	mov	r2, r3
   bde72:	4620      	mov	r0, r4
   bde74:	f001 f8ec 	bl	bf050 <__pow5mult>
   bde78:	4606      	mov	r6, r0
   bde7a:	2800      	cmp	r0, #0
   bde7c:	f43f aea8 	beq.w	bdbd0 <_strtod_l+0x490>
   bde80:	4601      	mov	r1, r0
   bde82:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bde84:	4620      	mov	r0, r4
   bde86:	f001 f839 	bl	beefc <__multiply>
   bde8a:	900b      	str	r0, [sp, #44]	; 0x2c
   bde8c:	2800      	cmp	r0, #0
   bde8e:	f43f ae9f 	beq.w	bdbd0 <_strtod_l+0x490>
   bde92:	9918      	ldr	r1, [sp, #96]	; 0x60
   bde94:	4620      	mov	r0, r4
   bde96:	f000 ff19 	bl	beccc <_Bfree>
   bde9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bde9c:	9318      	str	r3, [sp, #96]	; 0x60
   bde9e:	f1b8 0f00 	cmp.w	r8, #0
   bdea2:	f300 808c 	bgt.w	bdfbe <_strtod_l+0x87e>
   bdea6:	9b06      	ldr	r3, [sp, #24]
   bdea8:	2b00      	cmp	r3, #0
   bdeaa:	dd08      	ble.n	bdebe <_strtod_l+0x77e>
   bdeac:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bdeae:	9905      	ldr	r1, [sp, #20]
   bdeb0:	4620      	mov	r0, r4
   bdeb2:	f001 f8cd 	bl	bf050 <__pow5mult>
   bdeb6:	9005      	str	r0, [sp, #20]
   bdeb8:	2800      	cmp	r0, #0
   bdeba:	f43f ae89 	beq.w	bdbd0 <_strtod_l+0x490>
   bdebe:	2f00      	cmp	r7, #0
   bdec0:	dd08      	ble.n	bded4 <_strtod_l+0x794>
   bdec2:	9905      	ldr	r1, [sp, #20]
   bdec4:	463a      	mov	r2, r7
   bdec6:	4620      	mov	r0, r4
   bdec8:	f001 f91c 	bl	bf104 <__lshift>
   bdecc:	9005      	str	r0, [sp, #20]
   bdece:	2800      	cmp	r0, #0
   bded0:	f43f ae7e 	beq.w	bdbd0 <_strtod_l+0x490>
   bded4:	f1b9 0f00 	cmp.w	r9, #0
   bded8:	dd08      	ble.n	bdeec <_strtod_l+0x7ac>
   bdeda:	4631      	mov	r1, r6
   bdedc:	464a      	mov	r2, r9
   bdede:	4620      	mov	r0, r4
   bdee0:	f001 f910 	bl	bf104 <__lshift>
   bdee4:	4606      	mov	r6, r0
   bdee6:	2800      	cmp	r0, #0
   bdee8:	f43f ae72 	beq.w	bdbd0 <_strtod_l+0x490>
   bdeec:	9a05      	ldr	r2, [sp, #20]
   bdeee:	9918      	ldr	r1, [sp, #96]	; 0x60
   bdef0:	4620      	mov	r0, r4
   bdef2:	f001 f993 	bl	bf21c <__mdiff>
   bdef6:	4605      	mov	r5, r0
   bdef8:	2800      	cmp	r0, #0
   bdefa:	f43f ae69 	beq.w	bdbd0 <_strtod_l+0x490>
   bdefe:	68c3      	ldr	r3, [r0, #12]
   bdf00:	930b      	str	r3, [sp, #44]	; 0x2c
   bdf02:	2300      	movs	r3, #0
   bdf04:	60c3      	str	r3, [r0, #12]
   bdf06:	4631      	mov	r1, r6
   bdf08:	f001 f96c 	bl	bf1e4 <__mcmp>
   bdf0c:	2800      	cmp	r0, #0
   bdf0e:	da60      	bge.n	bdfd2 <_strtod_l+0x892>
   bdf10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bdf12:	ea53 030a 	orrs.w	r3, r3, sl
   bdf16:	f040 8082 	bne.w	be01e <_strtod_l+0x8de>
   bdf1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bdf1e:	2b00      	cmp	r3, #0
   bdf20:	d17d      	bne.n	be01e <_strtod_l+0x8de>
   bdf22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bdf26:	0d1b      	lsrs	r3, r3, #20
   bdf28:	051b      	lsls	r3, r3, #20
   bdf2a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bdf2e:	d976      	bls.n	be01e <_strtod_l+0x8de>
   bdf30:	696b      	ldr	r3, [r5, #20]
   bdf32:	b913      	cbnz	r3, bdf3a <_strtod_l+0x7fa>
   bdf34:	692b      	ldr	r3, [r5, #16]
   bdf36:	2b01      	cmp	r3, #1
   bdf38:	dd71      	ble.n	be01e <_strtod_l+0x8de>
   bdf3a:	4629      	mov	r1, r5
   bdf3c:	2201      	movs	r2, #1
   bdf3e:	4620      	mov	r0, r4
   bdf40:	f001 f8e0 	bl	bf104 <__lshift>
   bdf44:	4631      	mov	r1, r6
   bdf46:	4605      	mov	r5, r0
   bdf48:	f001 f94c 	bl	bf1e4 <__mcmp>
   bdf4c:	2800      	cmp	r0, #0
   bdf4e:	dd66      	ble.n	be01e <_strtod_l+0x8de>
   bdf50:	9904      	ldr	r1, [sp, #16]
   bdf52:	4a53      	ldr	r2, [pc, #332]	; (be0a0 <_strtod_l+0x960>)
   bdf54:	465b      	mov	r3, fp
   bdf56:	2900      	cmp	r1, #0
   bdf58:	f000 8081 	beq.w	be05e <_strtod_l+0x91e>
   bdf5c:	ea02 010b 	and.w	r1, r2, fp
   bdf60:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bdf64:	dc7b      	bgt.n	be05e <_strtod_l+0x91e>
   bdf66:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bdf6a:	f77f aea9 	ble.w	bdcc0 <_strtod_l+0x580>
   bdf6e:	4b4d      	ldr	r3, [pc, #308]	; (be0a4 <_strtod_l+0x964>)
   bdf70:	4650      	mov	r0, sl
   bdf72:	4659      	mov	r1, fp
   bdf74:	2200      	movs	r2, #0
   bdf76:	f7fe ff7f 	bl	bce78 <__aeabi_dmul>
   bdf7a:	460b      	mov	r3, r1
   bdf7c:	4303      	orrs	r3, r0
   bdf7e:	bf08      	it	eq
   bdf80:	2322      	moveq	r3, #34	; 0x22
   bdf82:	4682      	mov	sl, r0
   bdf84:	468b      	mov	fp, r1
   bdf86:	bf08      	it	eq
   bdf88:	6023      	streq	r3, [r4, #0]
   bdf8a:	e62b      	b.n	bdbe4 <_strtod_l+0x4a4>
   bdf8c:	f04f 32ff 	mov.w	r2, #4294967295
   bdf90:	fa02 f303 	lsl.w	r3, r2, r3
   bdf94:	ea03 0a0a 	and.w	sl, r3, sl
   bdf98:	e6e3      	b.n	bdd62 <_strtod_l+0x622>
   bdf9a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bdf9e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bdfa2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bdfa6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bdfaa:	fa01 f308 	lsl.w	r3, r1, r8
   bdfae:	9308      	str	r3, [sp, #32]
   bdfb0:	910d      	str	r1, [sp, #52]	; 0x34
   bdfb2:	e746      	b.n	bde42 <_strtod_l+0x702>
   bdfb4:	2300      	movs	r3, #0
   bdfb6:	9308      	str	r3, [sp, #32]
   bdfb8:	2301      	movs	r3, #1
   bdfba:	930d      	str	r3, [sp, #52]	; 0x34
   bdfbc:	e741      	b.n	bde42 <_strtod_l+0x702>
   bdfbe:	9918      	ldr	r1, [sp, #96]	; 0x60
   bdfc0:	4642      	mov	r2, r8
   bdfc2:	4620      	mov	r0, r4
   bdfc4:	f001 f89e 	bl	bf104 <__lshift>
   bdfc8:	9018      	str	r0, [sp, #96]	; 0x60
   bdfca:	2800      	cmp	r0, #0
   bdfcc:	f47f af6b 	bne.w	bdea6 <_strtod_l+0x766>
   bdfd0:	e5fe      	b.n	bdbd0 <_strtod_l+0x490>
   bdfd2:	465f      	mov	r7, fp
   bdfd4:	d16e      	bne.n	be0b4 <_strtod_l+0x974>
   bdfd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bdfd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bdfdc:	b342      	cbz	r2, be030 <_strtod_l+0x8f0>
   bdfde:	4a32      	ldr	r2, [pc, #200]	; (be0a8 <_strtod_l+0x968>)
   bdfe0:	4293      	cmp	r3, r2
   bdfe2:	d128      	bne.n	be036 <_strtod_l+0x8f6>
   bdfe4:	9b04      	ldr	r3, [sp, #16]
   bdfe6:	4651      	mov	r1, sl
   bdfe8:	b1eb      	cbz	r3, be026 <_strtod_l+0x8e6>
   bdfea:	4b2d      	ldr	r3, [pc, #180]	; (be0a0 <_strtod_l+0x960>)
   bdfec:	403b      	ands	r3, r7
   bdfee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bdff2:	f04f 32ff 	mov.w	r2, #4294967295
   bdff6:	d819      	bhi.n	be02c <_strtod_l+0x8ec>
   bdff8:	0d1b      	lsrs	r3, r3, #20
   bdffa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bdffe:	fa02 f303 	lsl.w	r3, r2, r3
   be002:	4299      	cmp	r1, r3
   be004:	d117      	bne.n	be036 <_strtod_l+0x8f6>
   be006:	4b29      	ldr	r3, [pc, #164]	; (be0ac <_strtod_l+0x96c>)
   be008:	429f      	cmp	r7, r3
   be00a:	d102      	bne.n	be012 <_strtod_l+0x8d2>
   be00c:	3101      	adds	r1, #1
   be00e:	f43f addf 	beq.w	bdbd0 <_strtod_l+0x490>
   be012:	4b23      	ldr	r3, [pc, #140]	; (be0a0 <_strtod_l+0x960>)
   be014:	403b      	ands	r3, r7
   be016:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   be01a:	f04f 0a00 	mov.w	sl, #0
   be01e:	9b04      	ldr	r3, [sp, #16]
   be020:	2b00      	cmp	r3, #0
   be022:	d1a4      	bne.n	bdf6e <_strtod_l+0x82e>
   be024:	e5de      	b.n	bdbe4 <_strtod_l+0x4a4>
   be026:	f04f 33ff 	mov.w	r3, #4294967295
   be02a:	e7ea      	b.n	be002 <_strtod_l+0x8c2>
   be02c:	4613      	mov	r3, r2
   be02e:	e7e8      	b.n	be002 <_strtod_l+0x8c2>
   be030:	ea53 030a 	orrs.w	r3, r3, sl
   be034:	d08c      	beq.n	bdf50 <_strtod_l+0x810>
   be036:	9b08      	ldr	r3, [sp, #32]
   be038:	b1db      	cbz	r3, be072 <_strtod_l+0x932>
   be03a:	423b      	tst	r3, r7
   be03c:	d0ef      	beq.n	be01e <_strtod_l+0x8de>
   be03e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   be040:	9a04      	ldr	r2, [sp, #16]
   be042:	4650      	mov	r0, sl
   be044:	4659      	mov	r1, fp
   be046:	b1c3      	cbz	r3, be07a <_strtod_l+0x93a>
   be048:	f7ff fb5c 	bl	bd704 <sulp>
   be04c:	4602      	mov	r2, r0
   be04e:	460b      	mov	r3, r1
   be050:	ec51 0b18 	vmov	r0, r1, d8
   be054:	f7fe fd5a 	bl	bcb0c <__adddf3>
   be058:	4682      	mov	sl, r0
   be05a:	468b      	mov	fp, r1
   be05c:	e7df      	b.n	be01e <_strtod_l+0x8de>
   be05e:	4013      	ands	r3, r2
   be060:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   be064:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   be068:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   be06c:	f04f 3aff 	mov.w	sl, #4294967295
   be070:	e7d5      	b.n	be01e <_strtod_l+0x8de>
   be072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   be074:	ea13 0f0a 	tst.w	r3, sl
   be078:	e7e0      	b.n	be03c <_strtod_l+0x8fc>
   be07a:	f7ff fb43 	bl	bd704 <sulp>
   be07e:	4602      	mov	r2, r0
   be080:	460b      	mov	r3, r1
   be082:	ec51 0b18 	vmov	r0, r1, d8
   be086:	f7fe fd3f 	bl	bcb08 <__aeabi_dsub>
   be08a:	2200      	movs	r2, #0
   be08c:	2300      	movs	r3, #0
   be08e:	4682      	mov	sl, r0
   be090:	468b      	mov	fp, r1
   be092:	f7ff f959 	bl	bd348 <__aeabi_dcmpeq>
   be096:	2800      	cmp	r0, #0
   be098:	d0c1      	beq.n	be01e <_strtod_l+0x8de>
   be09a:	e611      	b.n	bdcc0 <_strtod_l+0x580>
   be09c:	fffffc02 	.word	0xfffffc02
   be0a0:	7ff00000 	.word	0x7ff00000
   be0a4:	39500000 	.word	0x39500000
   be0a8:	000fffff 	.word	0x000fffff
   be0ac:	7fefffff 	.word	0x7fefffff
   be0b0:	000c0de8 	.word	0x000c0de8
   be0b4:	4631      	mov	r1, r6
   be0b6:	4628      	mov	r0, r5
   be0b8:	f001 fa12 	bl	bf4e0 <__ratio>
   be0bc:	ec59 8b10 	vmov	r8, r9, d0
   be0c0:	ee10 0a10 	vmov	r0, s0
   be0c4:	2200      	movs	r2, #0
   be0c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   be0ca:	4649      	mov	r1, r9
   be0cc:	f7ff f950 	bl	bd370 <__aeabi_dcmple>
   be0d0:	2800      	cmp	r0, #0
   be0d2:	d07a      	beq.n	be1ca <_strtod_l+0xa8a>
   be0d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   be0d6:	2b00      	cmp	r3, #0
   be0d8:	d04a      	beq.n	be170 <_strtod_l+0xa30>
   be0da:	4b95      	ldr	r3, [pc, #596]	; (be330 <_strtod_l+0xbf0>)
   be0dc:	2200      	movs	r2, #0
   be0de:	e9cd 2308 	strd	r2, r3, [sp, #32]
   be0e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; be330 <_strtod_l+0xbf0>
   be0e6:	f04f 0800 	mov.w	r8, #0
   be0ea:	4b92      	ldr	r3, [pc, #584]	; (be334 <_strtod_l+0xbf4>)
   be0ec:	403b      	ands	r3, r7
   be0ee:	930d      	str	r3, [sp, #52]	; 0x34
   be0f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   be0f2:	4b91      	ldr	r3, [pc, #580]	; (be338 <_strtod_l+0xbf8>)
   be0f4:	429a      	cmp	r2, r3
   be0f6:	f040 80b0 	bne.w	be25a <_strtod_l+0xb1a>
   be0fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   be0fe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   be102:	ec4b ab10 	vmov	d0, sl, fp
   be106:	e9cd 0108 	strd	r0, r1, [sp, #32]
   be10a:	f001 f911 	bl	bf330 <__ulp>
   be10e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   be112:	ec53 2b10 	vmov	r2, r3, d0
   be116:	f7fe feaf 	bl	bce78 <__aeabi_dmul>
   be11a:	4652      	mov	r2, sl
   be11c:	465b      	mov	r3, fp
   be11e:	f7fe fcf5 	bl	bcb0c <__adddf3>
   be122:	460b      	mov	r3, r1
   be124:	4983      	ldr	r1, [pc, #524]	; (be334 <_strtod_l+0xbf4>)
   be126:	4a85      	ldr	r2, [pc, #532]	; (be33c <_strtod_l+0xbfc>)
   be128:	4019      	ands	r1, r3
   be12a:	4291      	cmp	r1, r2
   be12c:	4682      	mov	sl, r0
   be12e:	d960      	bls.n	be1f2 <_strtod_l+0xab2>
   be130:	ee18 3a90 	vmov	r3, s17
   be134:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   be138:	4293      	cmp	r3, r2
   be13a:	d104      	bne.n	be146 <_strtod_l+0xa06>
   be13c:	ee18 3a10 	vmov	r3, s16
   be140:	3301      	adds	r3, #1
   be142:	f43f ad45 	beq.w	bdbd0 <_strtod_l+0x490>
   be146:	f8df b200 	ldr.w	fp, [pc, #512]	; be348 <_strtod_l+0xc08>
   be14a:	f04f 3aff 	mov.w	sl, #4294967295
   be14e:	9918      	ldr	r1, [sp, #96]	; 0x60
   be150:	4620      	mov	r0, r4
   be152:	f000 fdbb 	bl	beccc <_Bfree>
   be156:	9905      	ldr	r1, [sp, #20]
   be158:	4620      	mov	r0, r4
   be15a:	f000 fdb7 	bl	beccc <_Bfree>
   be15e:	4631      	mov	r1, r6
   be160:	4620      	mov	r0, r4
   be162:	f000 fdb3 	bl	beccc <_Bfree>
   be166:	4629      	mov	r1, r5
   be168:	4620      	mov	r0, r4
   be16a:	f000 fdaf 	bl	beccc <_Bfree>
   be16e:	e61a      	b.n	bdda6 <_strtod_l+0x666>
   be170:	f1ba 0f00 	cmp.w	sl, #0
   be174:	d11b      	bne.n	be1ae <_strtod_l+0xa6e>
   be176:	f3cb 0313 	ubfx	r3, fp, #0, #20
   be17a:	b9f3      	cbnz	r3, be1ba <_strtod_l+0xa7a>
   be17c:	4b6c      	ldr	r3, [pc, #432]	; (be330 <_strtod_l+0xbf0>)
   be17e:	2200      	movs	r2, #0
   be180:	4640      	mov	r0, r8
   be182:	4649      	mov	r1, r9
   be184:	f7ff f8ea 	bl	bd35c <__aeabi_dcmplt>
   be188:	b9d0      	cbnz	r0, be1c0 <_strtod_l+0xa80>
   be18a:	4640      	mov	r0, r8
   be18c:	4649      	mov	r1, r9
   be18e:	4b6c      	ldr	r3, [pc, #432]	; (be340 <_strtod_l+0xc00>)
   be190:	2200      	movs	r2, #0
   be192:	f7fe fe71 	bl	bce78 <__aeabi_dmul>
   be196:	4680      	mov	r8, r0
   be198:	4689      	mov	r9, r1
   be19a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   be19e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   be1a2:	9315      	str	r3, [sp, #84]	; 0x54
   be1a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   be1a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   be1ac:	e79d      	b.n	be0ea <_strtod_l+0x9aa>
   be1ae:	f1ba 0f01 	cmp.w	sl, #1
   be1b2:	d102      	bne.n	be1ba <_strtod_l+0xa7a>
   be1b4:	2f00      	cmp	r7, #0
   be1b6:	f43f ad83 	beq.w	bdcc0 <_strtod_l+0x580>
   be1ba:	4b62      	ldr	r3, [pc, #392]	; (be344 <_strtod_l+0xc04>)
   be1bc:	2200      	movs	r2, #0
   be1be:	e78e      	b.n	be0de <_strtod_l+0x99e>
   be1c0:	f8df 917c 	ldr.w	r9, [pc, #380]	; be340 <_strtod_l+0xc00>
   be1c4:	f04f 0800 	mov.w	r8, #0
   be1c8:	e7e7      	b.n	be19a <_strtod_l+0xa5a>
   be1ca:	4b5d      	ldr	r3, [pc, #372]	; (be340 <_strtod_l+0xc00>)
   be1cc:	4640      	mov	r0, r8
   be1ce:	4649      	mov	r1, r9
   be1d0:	2200      	movs	r2, #0
   be1d2:	f7fe fe51 	bl	bce78 <__aeabi_dmul>
   be1d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   be1d8:	4680      	mov	r8, r0
   be1da:	4689      	mov	r9, r1
   be1dc:	b933      	cbnz	r3, be1ec <_strtod_l+0xaac>
   be1de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   be1e2:	900e      	str	r0, [sp, #56]	; 0x38
   be1e4:	930f      	str	r3, [sp, #60]	; 0x3c
   be1e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   be1ea:	e7dd      	b.n	be1a8 <_strtod_l+0xa68>
   be1ec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   be1f0:	e7f9      	b.n	be1e6 <_strtod_l+0xaa6>
   be1f2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   be1f6:	9b04      	ldr	r3, [sp, #16]
   be1f8:	2b00      	cmp	r3, #0
   be1fa:	d1a8      	bne.n	be14e <_strtod_l+0xa0e>
   be1fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   be200:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   be202:	0d1b      	lsrs	r3, r3, #20
   be204:	051b      	lsls	r3, r3, #20
   be206:	429a      	cmp	r2, r3
   be208:	d1a1      	bne.n	be14e <_strtod_l+0xa0e>
   be20a:	4640      	mov	r0, r8
   be20c:	4649      	mov	r1, r9
   be20e:	f001 fa05 	bl	bf61c <__aeabi_d2lz>
   be212:	f7fe fe03 	bl	bce1c <__aeabi_l2d>
   be216:	4602      	mov	r2, r0
   be218:	460b      	mov	r3, r1
   be21a:	4640      	mov	r0, r8
   be21c:	4649      	mov	r1, r9
   be21e:	f7fe fc73 	bl	bcb08 <__aeabi_dsub>
   be222:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   be224:	f3cb 0313 	ubfx	r3, fp, #0, #20
   be228:	ea43 030a 	orr.w	r3, r3, sl
   be22c:	4313      	orrs	r3, r2
   be22e:	4680      	mov	r8, r0
   be230:	4689      	mov	r9, r1
   be232:	d055      	beq.n	be2e0 <_strtod_l+0xba0>
   be234:	a336      	add	r3, pc, #216	; (adr r3, be310 <_strtod_l+0xbd0>)
   be236:	e9d3 2300 	ldrd	r2, r3, [r3]
   be23a:	f7ff f88f 	bl	bd35c <__aeabi_dcmplt>
   be23e:	2800      	cmp	r0, #0
   be240:	f47f acd0 	bne.w	bdbe4 <_strtod_l+0x4a4>
   be244:	a334      	add	r3, pc, #208	; (adr r3, be318 <_strtod_l+0xbd8>)
   be246:	e9d3 2300 	ldrd	r2, r3, [r3]
   be24a:	4640      	mov	r0, r8
   be24c:	4649      	mov	r1, r9
   be24e:	f7ff f8a3 	bl	bd398 <__aeabi_dcmpgt>
   be252:	2800      	cmp	r0, #0
   be254:	f43f af7b 	beq.w	be14e <_strtod_l+0xa0e>
   be258:	e4c4      	b.n	bdbe4 <_strtod_l+0x4a4>
   be25a:	9b04      	ldr	r3, [sp, #16]
   be25c:	b333      	cbz	r3, be2ac <_strtod_l+0xb6c>
   be25e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   be260:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   be264:	d822      	bhi.n	be2ac <_strtod_l+0xb6c>
   be266:	a32e      	add	r3, pc, #184	; (adr r3, be320 <_strtod_l+0xbe0>)
   be268:	e9d3 2300 	ldrd	r2, r3, [r3]
   be26c:	4640      	mov	r0, r8
   be26e:	4649      	mov	r1, r9
   be270:	f7ff f87e 	bl	bd370 <__aeabi_dcmple>
   be274:	b1a0      	cbz	r0, be2a0 <_strtod_l+0xb60>
   be276:	4649      	mov	r1, r9
   be278:	4640      	mov	r0, r8
   be27a:	f7ff f8bf 	bl	bd3fc <__aeabi_d2uiz>
   be27e:	2801      	cmp	r0, #1
   be280:	bf38      	it	cc
   be282:	2001      	movcc	r0, #1
   be284:	f7fe fd7e 	bl	bcd84 <__aeabi_ui2d>
   be288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   be28a:	4680      	mov	r8, r0
   be28c:	4689      	mov	r9, r1
   be28e:	bb23      	cbnz	r3, be2da <_strtod_l+0xb9a>
   be290:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   be294:	9010      	str	r0, [sp, #64]	; 0x40
   be296:	9311      	str	r3, [sp, #68]	; 0x44
   be298:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   be29c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   be2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   be2a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   be2a4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   be2a8:	1a9b      	subs	r3, r3, r2
   be2aa:	9309      	str	r3, [sp, #36]	; 0x24
   be2ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   be2b0:	eeb0 0a48 	vmov.f32	s0, s16
   be2b4:	eef0 0a68 	vmov.f32	s1, s17
   be2b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   be2bc:	f001 f838 	bl	bf330 <__ulp>
   be2c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   be2c4:	ec53 2b10 	vmov	r2, r3, d0
   be2c8:	f7fe fdd6 	bl	bce78 <__aeabi_dmul>
   be2cc:	ec53 2b18 	vmov	r2, r3, d8
   be2d0:	f7fe fc1c 	bl	bcb0c <__adddf3>
   be2d4:	4682      	mov	sl, r0
   be2d6:	468b      	mov	fp, r1
   be2d8:	e78d      	b.n	be1f6 <_strtod_l+0xab6>
   be2da:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   be2de:	e7db      	b.n	be298 <_strtod_l+0xb58>
   be2e0:	a311      	add	r3, pc, #68	; (adr r3, be328 <_strtod_l+0xbe8>)
   be2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   be2e6:	f7ff f839 	bl	bd35c <__aeabi_dcmplt>
   be2ea:	e7b2      	b.n	be252 <_strtod_l+0xb12>
   be2ec:	2300      	movs	r3, #0
   be2ee:	930a      	str	r3, [sp, #40]	; 0x28
   be2f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   be2f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be2f4:	6013      	str	r3, [r2, #0]
   be2f6:	f7ff ba6b 	b.w	bd7d0 <_strtod_l+0x90>
   be2fa:	2a65      	cmp	r2, #101	; 0x65
   be2fc:	f43f ab5f 	beq.w	bd9be <_strtod_l+0x27e>
   be300:	2a45      	cmp	r2, #69	; 0x45
   be302:	f43f ab5c 	beq.w	bd9be <_strtod_l+0x27e>
   be306:	2301      	movs	r3, #1
   be308:	f7ff bb94 	b.w	bda34 <_strtod_l+0x2f4>
   be30c:	f3af 8000 	nop.w
   be310:	94a03595 	.word	0x94a03595
   be314:	3fdfffff 	.word	0x3fdfffff
   be318:	35afe535 	.word	0x35afe535
   be31c:	3fe00000 	.word	0x3fe00000
   be320:	ffc00000 	.word	0xffc00000
   be324:	41dfffff 	.word	0x41dfffff
   be328:	94a03595 	.word	0x94a03595
   be32c:	3fcfffff 	.word	0x3fcfffff
   be330:	3ff00000 	.word	0x3ff00000
   be334:	7ff00000 	.word	0x7ff00000
   be338:	7fe00000 	.word	0x7fe00000
   be33c:	7c9fffff 	.word	0x7c9fffff
   be340:	3fe00000 	.word	0x3fe00000
   be344:	bff00000 	.word	0xbff00000
   be348:	7fefffff 	.word	0x7fefffff

000be34c <strtod>:
   be34c:	460a      	mov	r2, r1
   be34e:	4601      	mov	r1, r0
   be350:	4802      	ldr	r0, [pc, #8]	; (be35c <strtod+0x10>)
   be352:	4b03      	ldr	r3, [pc, #12]	; (be360 <strtod+0x14>)
   be354:	6800      	ldr	r0, [r0, #0]
   be356:	f7ff b9f3 	b.w	bd740 <_strtod_l>
   be35a:	bf00      	nop
   be35c:	2003daa8 	.word	0x2003daa8
   be360:	2003db14 	.word	0x2003db14

000be364 <_strtol_l.constprop.0>:
   be364:	2b01      	cmp	r3, #1
   be366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   be36a:	d001      	beq.n	be370 <_strtol_l.constprop.0+0xc>
   be36c:	2b24      	cmp	r3, #36	; 0x24
   be36e:	d906      	bls.n	be37e <_strtol_l.constprop.0+0x1a>
   be370:	f7fa fcac 	bl	b8ccc <__errno>
   be374:	2316      	movs	r3, #22
   be376:	6003      	str	r3, [r0, #0]
   be378:	2000      	movs	r0, #0
   be37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   be37e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; be464 <_strtol_l.constprop.0+0x100>
   be382:	460d      	mov	r5, r1
   be384:	462e      	mov	r6, r5
   be386:	f815 4b01 	ldrb.w	r4, [r5], #1
   be38a:	f814 700c 	ldrb.w	r7, [r4, ip]
   be38e:	f017 0708 	ands.w	r7, r7, #8
   be392:	d1f7      	bne.n	be384 <_strtol_l.constprop.0+0x20>
   be394:	2c2d      	cmp	r4, #45	; 0x2d
   be396:	d132      	bne.n	be3fe <_strtol_l.constprop.0+0x9a>
   be398:	782c      	ldrb	r4, [r5, #0]
   be39a:	2701      	movs	r7, #1
   be39c:	1cb5      	adds	r5, r6, #2
   be39e:	2b00      	cmp	r3, #0
   be3a0:	d05b      	beq.n	be45a <_strtol_l.constprop.0+0xf6>
   be3a2:	2b10      	cmp	r3, #16
   be3a4:	d109      	bne.n	be3ba <_strtol_l.constprop.0+0x56>
   be3a6:	2c30      	cmp	r4, #48	; 0x30
   be3a8:	d107      	bne.n	be3ba <_strtol_l.constprop.0+0x56>
   be3aa:	782c      	ldrb	r4, [r5, #0]
   be3ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   be3b0:	2c58      	cmp	r4, #88	; 0x58
   be3b2:	d14d      	bne.n	be450 <_strtol_l.constprop.0+0xec>
   be3b4:	786c      	ldrb	r4, [r5, #1]
   be3b6:	2310      	movs	r3, #16
   be3b8:	3502      	adds	r5, #2
   be3ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   be3be:	f108 38ff 	add.w	r8, r8, #4294967295
   be3c2:	f04f 0c00 	mov.w	ip, #0
   be3c6:	fbb8 f9f3 	udiv	r9, r8, r3
   be3ca:	4666      	mov	r6, ip
   be3cc:	fb03 8a19 	mls	sl, r3, r9, r8
   be3d0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   be3d4:	f1be 0f09 	cmp.w	lr, #9
   be3d8:	d816      	bhi.n	be408 <_strtol_l.constprop.0+0xa4>
   be3da:	4674      	mov	r4, lr
   be3dc:	42a3      	cmp	r3, r4
   be3de:	dd24      	ble.n	be42a <_strtol_l.constprop.0+0xc6>
   be3e0:	f1bc 0f00 	cmp.w	ip, #0
   be3e4:	db1e      	blt.n	be424 <_strtol_l.constprop.0+0xc0>
   be3e6:	45b1      	cmp	r9, r6
   be3e8:	d31c      	bcc.n	be424 <_strtol_l.constprop.0+0xc0>
   be3ea:	d101      	bne.n	be3f0 <_strtol_l.constprop.0+0x8c>
   be3ec:	45a2      	cmp	sl, r4
   be3ee:	db19      	blt.n	be424 <_strtol_l.constprop.0+0xc0>
   be3f0:	fb06 4603 	mla	r6, r6, r3, r4
   be3f4:	f04f 0c01 	mov.w	ip, #1
   be3f8:	f815 4b01 	ldrb.w	r4, [r5], #1
   be3fc:	e7e8      	b.n	be3d0 <_strtol_l.constprop.0+0x6c>
   be3fe:	2c2b      	cmp	r4, #43	; 0x2b
   be400:	bf04      	itt	eq
   be402:	782c      	ldrbeq	r4, [r5, #0]
   be404:	1cb5      	addeq	r5, r6, #2
   be406:	e7ca      	b.n	be39e <_strtol_l.constprop.0+0x3a>
   be408:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   be40c:	f1be 0f19 	cmp.w	lr, #25
   be410:	d801      	bhi.n	be416 <_strtol_l.constprop.0+0xb2>
   be412:	3c37      	subs	r4, #55	; 0x37
   be414:	e7e2      	b.n	be3dc <_strtol_l.constprop.0+0x78>
   be416:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   be41a:	f1be 0f19 	cmp.w	lr, #25
   be41e:	d804      	bhi.n	be42a <_strtol_l.constprop.0+0xc6>
   be420:	3c57      	subs	r4, #87	; 0x57
   be422:	e7db      	b.n	be3dc <_strtol_l.constprop.0+0x78>
   be424:	f04f 3cff 	mov.w	ip, #4294967295
   be428:	e7e6      	b.n	be3f8 <_strtol_l.constprop.0+0x94>
   be42a:	f1bc 0f00 	cmp.w	ip, #0
   be42e:	da05      	bge.n	be43c <_strtol_l.constprop.0+0xd8>
   be430:	2322      	movs	r3, #34	; 0x22
   be432:	6003      	str	r3, [r0, #0]
   be434:	4646      	mov	r6, r8
   be436:	b942      	cbnz	r2, be44a <_strtol_l.constprop.0+0xe6>
   be438:	4630      	mov	r0, r6
   be43a:	e79e      	b.n	be37a <_strtol_l.constprop.0+0x16>
   be43c:	b107      	cbz	r7, be440 <_strtol_l.constprop.0+0xdc>
   be43e:	4276      	negs	r6, r6
   be440:	2a00      	cmp	r2, #0
   be442:	d0f9      	beq.n	be438 <_strtol_l.constprop.0+0xd4>
   be444:	f1bc 0f00 	cmp.w	ip, #0
   be448:	d000      	beq.n	be44c <_strtol_l.constprop.0+0xe8>
   be44a:	1e69      	subs	r1, r5, #1
   be44c:	6011      	str	r1, [r2, #0]
   be44e:	e7f3      	b.n	be438 <_strtol_l.constprop.0+0xd4>
   be450:	2430      	movs	r4, #48	; 0x30
   be452:	2b00      	cmp	r3, #0
   be454:	d1b1      	bne.n	be3ba <_strtol_l.constprop.0+0x56>
   be456:	2308      	movs	r3, #8
   be458:	e7af      	b.n	be3ba <_strtol_l.constprop.0+0x56>
   be45a:	2c30      	cmp	r4, #48	; 0x30
   be45c:	d0a5      	beq.n	be3aa <_strtol_l.constprop.0+0x46>
   be45e:	230a      	movs	r3, #10
   be460:	e7ab      	b.n	be3ba <_strtol_l.constprop.0+0x56>
   be462:	bf00      	nop
   be464:	000c0e11 	.word	0x000c0e11

000be468 <strtol>:
   be468:	4613      	mov	r3, r2
   be46a:	460a      	mov	r2, r1
   be46c:	4601      	mov	r1, r0
   be46e:	4802      	ldr	r0, [pc, #8]	; (be478 <strtol+0x10>)
   be470:	6800      	ldr	r0, [r0, #0]
   be472:	f7ff bf77 	b.w	be364 <_strtol_l.constprop.0>
   be476:	bf00      	nop
   be478:	2003daa8 	.word	0x2003daa8

000be47c <__register_exitproc>:
   be47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   be480:	f8df 80b8 	ldr.w	r8, [pc, #184]	; be53c <__register_exitproc+0xc0>
   be484:	4606      	mov	r6, r0
   be486:	f8d8 0000 	ldr.w	r0, [r8]
   be48a:	461f      	mov	r7, r3
   be48c:	460d      	mov	r5, r1
   be48e:	4691      	mov	r9, r2
   be490:	f000 fbc6 	bl	bec20 <__retarget_lock_acquire_recursive>
   be494:	4b25      	ldr	r3, [pc, #148]	; (be52c <__register_exitproc+0xb0>)
   be496:	681c      	ldr	r4, [r3, #0]
   be498:	b934      	cbnz	r4, be4a8 <__register_exitproc+0x2c>
   be49a:	4c25      	ldr	r4, [pc, #148]	; (be530 <__register_exitproc+0xb4>)
   be49c:	601c      	str	r4, [r3, #0]
   be49e:	4b25      	ldr	r3, [pc, #148]	; (be534 <__register_exitproc+0xb8>)
   be4a0:	b113      	cbz	r3, be4a8 <__register_exitproc+0x2c>
   be4a2:	681b      	ldr	r3, [r3, #0]
   be4a4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   be4a8:	6863      	ldr	r3, [r4, #4]
   be4aa:	2b1f      	cmp	r3, #31
   be4ac:	dd07      	ble.n	be4be <__register_exitproc+0x42>
   be4ae:	f8d8 0000 	ldr.w	r0, [r8]
   be4b2:	f000 fbb7 	bl	bec24 <__retarget_lock_release_recursive>
   be4b6:	f04f 30ff 	mov.w	r0, #4294967295
   be4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   be4be:	b34e      	cbz	r6, be514 <__register_exitproc+0x98>
   be4c0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   be4c4:	b988      	cbnz	r0, be4ea <__register_exitproc+0x6e>
   be4c6:	4b1c      	ldr	r3, [pc, #112]	; (be538 <__register_exitproc+0xbc>)
   be4c8:	b923      	cbnz	r3, be4d4 <__register_exitproc+0x58>
   be4ca:	f8d8 0000 	ldr.w	r0, [r8]
   be4ce:	f000 fba8 	bl	bec22 <__retarget_lock_release>
   be4d2:	e7f0      	b.n	be4b6 <__register_exitproc+0x3a>
   be4d4:	f44f 7084 	mov.w	r0, #264	; 0x108
   be4d8:	f7fa fbb0 	bl	b8c3c <malloc>
   be4dc:	2800      	cmp	r0, #0
   be4de:	d0f4      	beq.n	be4ca <__register_exitproc+0x4e>
   be4e0:	2300      	movs	r3, #0
   be4e2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   be4e6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   be4ea:	6863      	ldr	r3, [r4, #4]
   be4ec:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   be4f0:	2201      	movs	r2, #1
   be4f2:	409a      	lsls	r2, r3
   be4f4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   be4f8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   be4fc:	4313      	orrs	r3, r2
   be4fe:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   be502:	2e02      	cmp	r6, #2
   be504:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   be508:	bf02      	ittt	eq
   be50a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   be50e:	4313      	orreq	r3, r2
   be510:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   be514:	6863      	ldr	r3, [r4, #4]
   be516:	f8d8 0000 	ldr.w	r0, [r8]
   be51a:	1c5a      	adds	r2, r3, #1
   be51c:	3302      	adds	r3, #2
   be51e:	6062      	str	r2, [r4, #4]
   be520:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   be524:	f000 fb7e 	bl	bec24 <__retarget_lock_release_recursive>
   be528:	2000      	movs	r0, #0
   be52a:	e7c6      	b.n	be4ba <__register_exitproc+0x3e>
   be52c:	2003e7e8 	.word	0x2003e7e8
   be530:	2003e75c 	.word	0x2003e75c
   be534:	00000000 	.word	0x00000000
   be538:	000b8c3d 	.word	0x000b8c3d
   be53c:	2003db0c 	.word	0x2003db0c

000be540 <rshift>:
   be540:	6903      	ldr	r3, [r0, #16]
   be542:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   be546:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   be54a:	ea4f 1261 	mov.w	r2, r1, asr #5
   be54e:	f100 0414 	add.w	r4, r0, #20
   be552:	dd45      	ble.n	be5e0 <rshift+0xa0>
   be554:	f011 011f 	ands.w	r1, r1, #31
   be558:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   be55c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   be560:	d10c      	bne.n	be57c <rshift+0x3c>
   be562:	f100 0710 	add.w	r7, r0, #16
   be566:	4629      	mov	r1, r5
   be568:	42b1      	cmp	r1, r6
   be56a:	d334      	bcc.n	be5d6 <rshift+0x96>
   be56c:	1a9b      	subs	r3, r3, r2
   be56e:	009b      	lsls	r3, r3, #2
   be570:	1eea      	subs	r2, r5, #3
   be572:	4296      	cmp	r6, r2
   be574:	bf38      	it	cc
   be576:	2300      	movcc	r3, #0
   be578:	4423      	add	r3, r4
   be57a:	e015      	b.n	be5a8 <rshift+0x68>
   be57c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   be580:	f1c1 0820 	rsb	r8, r1, #32
   be584:	40cf      	lsrs	r7, r1
   be586:	f105 0e04 	add.w	lr, r5, #4
   be58a:	46a1      	mov	r9, r4
   be58c:	4576      	cmp	r6, lr
   be58e:	46f4      	mov	ip, lr
   be590:	d815      	bhi.n	be5be <rshift+0x7e>
   be592:	1a9a      	subs	r2, r3, r2
   be594:	0092      	lsls	r2, r2, #2
   be596:	3a04      	subs	r2, #4
   be598:	3501      	adds	r5, #1
   be59a:	42ae      	cmp	r6, r5
   be59c:	bf38      	it	cc
   be59e:	2200      	movcc	r2, #0
   be5a0:	18a3      	adds	r3, r4, r2
   be5a2:	50a7      	str	r7, [r4, r2]
   be5a4:	b107      	cbz	r7, be5a8 <rshift+0x68>
   be5a6:	3304      	adds	r3, #4
   be5a8:	1b1a      	subs	r2, r3, r4
   be5aa:	42a3      	cmp	r3, r4
   be5ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
   be5b0:	bf08      	it	eq
   be5b2:	2300      	moveq	r3, #0
   be5b4:	6102      	str	r2, [r0, #16]
   be5b6:	bf08      	it	eq
   be5b8:	6143      	streq	r3, [r0, #20]
   be5ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   be5be:	f8dc c000 	ldr.w	ip, [ip]
   be5c2:	fa0c fc08 	lsl.w	ip, ip, r8
   be5c6:	ea4c 0707 	orr.w	r7, ip, r7
   be5ca:	f849 7b04 	str.w	r7, [r9], #4
   be5ce:	f85e 7b04 	ldr.w	r7, [lr], #4
   be5d2:	40cf      	lsrs	r7, r1
   be5d4:	e7da      	b.n	be58c <rshift+0x4c>
   be5d6:	f851 cb04 	ldr.w	ip, [r1], #4
   be5da:	f847 cf04 	str.w	ip, [r7, #4]!
   be5de:	e7c3      	b.n	be568 <rshift+0x28>
   be5e0:	4623      	mov	r3, r4
   be5e2:	e7e1      	b.n	be5a8 <rshift+0x68>

000be5e4 <__hexdig_fun>:
   be5e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   be5e8:	2b09      	cmp	r3, #9
   be5ea:	d802      	bhi.n	be5f2 <__hexdig_fun+0xe>
   be5ec:	3820      	subs	r0, #32
   be5ee:	b2c0      	uxtb	r0, r0
   be5f0:	4770      	bx	lr
   be5f2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   be5f6:	2b05      	cmp	r3, #5
   be5f8:	d801      	bhi.n	be5fe <__hexdig_fun+0x1a>
   be5fa:	3847      	subs	r0, #71	; 0x47
   be5fc:	e7f7      	b.n	be5ee <__hexdig_fun+0xa>
   be5fe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   be602:	2b05      	cmp	r3, #5
   be604:	d801      	bhi.n	be60a <__hexdig_fun+0x26>
   be606:	3827      	subs	r0, #39	; 0x27
   be608:	e7f1      	b.n	be5ee <__hexdig_fun+0xa>
   be60a:	2000      	movs	r0, #0
   be60c:	4770      	bx	lr
	...

000be610 <__gethex>:
   be610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be614:	ed2d 8b02 	vpush	{d8}
   be618:	b089      	sub	sp, #36	; 0x24
   be61a:	ee08 0a10 	vmov	s16, r0
   be61e:	9304      	str	r3, [sp, #16]
   be620:	4bb4      	ldr	r3, [pc, #720]	; (be8f4 <__gethex+0x2e4>)
   be622:	681b      	ldr	r3, [r3, #0]
   be624:	9301      	str	r3, [sp, #4]
   be626:	4618      	mov	r0, r3
   be628:	468b      	mov	fp, r1
   be62a:	4690      	mov	r8, r2
   be62c:	f7ff f82f 	bl	bd68e <strlen>
   be630:	9b01      	ldr	r3, [sp, #4]
   be632:	f8db 2000 	ldr.w	r2, [fp]
   be636:	4403      	add	r3, r0
   be638:	4682      	mov	sl, r0
   be63a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   be63e:	9305      	str	r3, [sp, #20]
   be640:	1c93      	adds	r3, r2, #2
   be642:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   be646:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   be64a:	32fe      	adds	r2, #254	; 0xfe
   be64c:	18d1      	adds	r1, r2, r3
   be64e:	461f      	mov	r7, r3
   be650:	f813 0b01 	ldrb.w	r0, [r3], #1
   be654:	9100      	str	r1, [sp, #0]
   be656:	2830      	cmp	r0, #48	; 0x30
   be658:	d0f8      	beq.n	be64c <__gethex+0x3c>
   be65a:	f7ff ffc3 	bl	be5e4 <__hexdig_fun>
   be65e:	4604      	mov	r4, r0
   be660:	2800      	cmp	r0, #0
   be662:	d13a      	bne.n	be6da <__gethex+0xca>
   be664:	9901      	ldr	r1, [sp, #4]
   be666:	4652      	mov	r2, sl
   be668:	4638      	mov	r0, r7
   be66a:	f7ff f818 	bl	bd69e <strncmp>
   be66e:	4605      	mov	r5, r0
   be670:	2800      	cmp	r0, #0
   be672:	d168      	bne.n	be746 <__gethex+0x136>
   be674:	f817 000a 	ldrb.w	r0, [r7, sl]
   be678:	eb07 060a 	add.w	r6, r7, sl
   be67c:	f7ff ffb2 	bl	be5e4 <__hexdig_fun>
   be680:	2800      	cmp	r0, #0
   be682:	d062      	beq.n	be74a <__gethex+0x13a>
   be684:	4633      	mov	r3, r6
   be686:	7818      	ldrb	r0, [r3, #0]
   be688:	2830      	cmp	r0, #48	; 0x30
   be68a:	461f      	mov	r7, r3
   be68c:	f103 0301 	add.w	r3, r3, #1
   be690:	d0f9      	beq.n	be686 <__gethex+0x76>
   be692:	f7ff ffa7 	bl	be5e4 <__hexdig_fun>
   be696:	2301      	movs	r3, #1
   be698:	fab0 f480 	clz	r4, r0
   be69c:	0964      	lsrs	r4, r4, #5
   be69e:	4635      	mov	r5, r6
   be6a0:	9300      	str	r3, [sp, #0]
   be6a2:	463a      	mov	r2, r7
   be6a4:	4616      	mov	r6, r2
   be6a6:	3201      	adds	r2, #1
   be6a8:	7830      	ldrb	r0, [r6, #0]
   be6aa:	f7ff ff9b 	bl	be5e4 <__hexdig_fun>
   be6ae:	2800      	cmp	r0, #0
   be6b0:	d1f8      	bne.n	be6a4 <__gethex+0x94>
   be6b2:	9901      	ldr	r1, [sp, #4]
   be6b4:	4652      	mov	r2, sl
   be6b6:	4630      	mov	r0, r6
   be6b8:	f7fe fff1 	bl	bd69e <strncmp>
   be6bc:	b980      	cbnz	r0, be6e0 <__gethex+0xd0>
   be6be:	b94d      	cbnz	r5, be6d4 <__gethex+0xc4>
   be6c0:	eb06 050a 	add.w	r5, r6, sl
   be6c4:	462a      	mov	r2, r5
   be6c6:	4616      	mov	r6, r2
   be6c8:	3201      	adds	r2, #1
   be6ca:	7830      	ldrb	r0, [r6, #0]
   be6cc:	f7ff ff8a 	bl	be5e4 <__hexdig_fun>
   be6d0:	2800      	cmp	r0, #0
   be6d2:	d1f8      	bne.n	be6c6 <__gethex+0xb6>
   be6d4:	1bad      	subs	r5, r5, r6
   be6d6:	00ad      	lsls	r5, r5, #2
   be6d8:	e004      	b.n	be6e4 <__gethex+0xd4>
   be6da:	2400      	movs	r4, #0
   be6dc:	4625      	mov	r5, r4
   be6de:	e7e0      	b.n	be6a2 <__gethex+0x92>
   be6e0:	2d00      	cmp	r5, #0
   be6e2:	d1f7      	bne.n	be6d4 <__gethex+0xc4>
   be6e4:	7833      	ldrb	r3, [r6, #0]
   be6e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   be6ea:	2b50      	cmp	r3, #80	; 0x50
   be6ec:	d13b      	bne.n	be766 <__gethex+0x156>
   be6ee:	7873      	ldrb	r3, [r6, #1]
   be6f0:	2b2b      	cmp	r3, #43	; 0x2b
   be6f2:	d02c      	beq.n	be74e <__gethex+0x13e>
   be6f4:	2b2d      	cmp	r3, #45	; 0x2d
   be6f6:	d02e      	beq.n	be756 <__gethex+0x146>
   be6f8:	1c71      	adds	r1, r6, #1
   be6fa:	f04f 0900 	mov.w	r9, #0
   be6fe:	7808      	ldrb	r0, [r1, #0]
   be700:	f7ff ff70 	bl	be5e4 <__hexdig_fun>
   be704:	1e43      	subs	r3, r0, #1
   be706:	b2db      	uxtb	r3, r3
   be708:	2b18      	cmp	r3, #24
   be70a:	d82c      	bhi.n	be766 <__gethex+0x156>
   be70c:	f1a0 0210 	sub.w	r2, r0, #16
   be710:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   be714:	f7ff ff66 	bl	be5e4 <__hexdig_fun>
   be718:	1e43      	subs	r3, r0, #1
   be71a:	b2db      	uxtb	r3, r3
   be71c:	2b18      	cmp	r3, #24
   be71e:	d91d      	bls.n	be75c <__gethex+0x14c>
   be720:	f1b9 0f00 	cmp.w	r9, #0
   be724:	d000      	beq.n	be728 <__gethex+0x118>
   be726:	4252      	negs	r2, r2
   be728:	4415      	add	r5, r2
   be72a:	f8cb 1000 	str.w	r1, [fp]
   be72e:	b1e4      	cbz	r4, be76a <__gethex+0x15a>
   be730:	9b00      	ldr	r3, [sp, #0]
   be732:	2b00      	cmp	r3, #0
   be734:	bf14      	ite	ne
   be736:	2700      	movne	r7, #0
   be738:	2706      	moveq	r7, #6
   be73a:	4638      	mov	r0, r7
   be73c:	b009      	add	sp, #36	; 0x24
   be73e:	ecbd 8b02 	vpop	{d8}
   be742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be746:	463e      	mov	r6, r7
   be748:	4625      	mov	r5, r4
   be74a:	2401      	movs	r4, #1
   be74c:	e7ca      	b.n	be6e4 <__gethex+0xd4>
   be74e:	f04f 0900 	mov.w	r9, #0
   be752:	1cb1      	adds	r1, r6, #2
   be754:	e7d3      	b.n	be6fe <__gethex+0xee>
   be756:	f04f 0901 	mov.w	r9, #1
   be75a:	e7fa      	b.n	be752 <__gethex+0x142>
   be75c:	230a      	movs	r3, #10
   be75e:	fb03 0202 	mla	r2, r3, r2, r0
   be762:	3a10      	subs	r2, #16
   be764:	e7d4      	b.n	be710 <__gethex+0x100>
   be766:	4631      	mov	r1, r6
   be768:	e7df      	b.n	be72a <__gethex+0x11a>
   be76a:	1bf3      	subs	r3, r6, r7
   be76c:	3b01      	subs	r3, #1
   be76e:	4621      	mov	r1, r4
   be770:	2b07      	cmp	r3, #7
   be772:	dc0b      	bgt.n	be78c <__gethex+0x17c>
   be774:	ee18 0a10 	vmov	r0, s16
   be778:	f000 fa68 	bl	bec4c <_Balloc>
   be77c:	4604      	mov	r4, r0
   be77e:	b940      	cbnz	r0, be792 <__gethex+0x182>
   be780:	4b5d      	ldr	r3, [pc, #372]	; (be8f8 <__gethex+0x2e8>)
   be782:	4602      	mov	r2, r0
   be784:	21de      	movs	r1, #222	; 0xde
   be786:	485d      	ldr	r0, [pc, #372]	; (be8fc <__gethex+0x2ec>)
   be788:	f7fa faa8 	bl	b8cdc <__assert_func>
   be78c:	3101      	adds	r1, #1
   be78e:	105b      	asrs	r3, r3, #1
   be790:	e7ee      	b.n	be770 <__gethex+0x160>
   be792:	f100 0914 	add.w	r9, r0, #20
   be796:	f04f 0b00 	mov.w	fp, #0
   be79a:	f1ca 0301 	rsb	r3, sl, #1
   be79e:	f8cd 9008 	str.w	r9, [sp, #8]
   be7a2:	f8cd b000 	str.w	fp, [sp]
   be7a6:	9306      	str	r3, [sp, #24]
   be7a8:	42b7      	cmp	r7, r6
   be7aa:	d340      	bcc.n	be82e <__gethex+0x21e>
   be7ac:	9802      	ldr	r0, [sp, #8]
   be7ae:	9b00      	ldr	r3, [sp, #0]
   be7b0:	f840 3b04 	str.w	r3, [r0], #4
   be7b4:	eba0 0009 	sub.w	r0, r0, r9
   be7b8:	1080      	asrs	r0, r0, #2
   be7ba:	0146      	lsls	r6, r0, #5
   be7bc:	6120      	str	r0, [r4, #16]
   be7be:	4618      	mov	r0, r3
   be7c0:	f000 fb36 	bl	bee30 <__hi0bits>
   be7c4:	1a30      	subs	r0, r6, r0
   be7c6:	f8d8 6000 	ldr.w	r6, [r8]
   be7ca:	42b0      	cmp	r0, r6
   be7cc:	dd63      	ble.n	be896 <__gethex+0x286>
   be7ce:	1b87      	subs	r7, r0, r6
   be7d0:	4639      	mov	r1, r7
   be7d2:	4620      	mov	r0, r4
   be7d4:	f000 feda 	bl	bf58c <__any_on>
   be7d8:	4682      	mov	sl, r0
   be7da:	b1a8      	cbz	r0, be808 <__gethex+0x1f8>
   be7dc:	1e7b      	subs	r3, r7, #1
   be7de:	1159      	asrs	r1, r3, #5
   be7e0:	f003 021f 	and.w	r2, r3, #31
   be7e4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   be7e8:	f04f 0a01 	mov.w	sl, #1
   be7ec:	fa0a f202 	lsl.w	r2, sl, r2
   be7f0:	420a      	tst	r2, r1
   be7f2:	d009      	beq.n	be808 <__gethex+0x1f8>
   be7f4:	4553      	cmp	r3, sl
   be7f6:	dd05      	ble.n	be804 <__gethex+0x1f4>
   be7f8:	1eb9      	subs	r1, r7, #2
   be7fa:	4620      	mov	r0, r4
   be7fc:	f000 fec6 	bl	bf58c <__any_on>
   be800:	2800      	cmp	r0, #0
   be802:	d145      	bne.n	be890 <__gethex+0x280>
   be804:	f04f 0a02 	mov.w	sl, #2
   be808:	4639      	mov	r1, r7
   be80a:	4620      	mov	r0, r4
   be80c:	f7ff fe98 	bl	be540 <rshift>
   be810:	443d      	add	r5, r7
   be812:	f8d8 3008 	ldr.w	r3, [r8, #8]
   be816:	42ab      	cmp	r3, r5
   be818:	da4c      	bge.n	be8b4 <__gethex+0x2a4>
   be81a:	ee18 0a10 	vmov	r0, s16
   be81e:	4621      	mov	r1, r4
   be820:	f000 fa54 	bl	beccc <_Bfree>
   be824:	9a14      	ldr	r2, [sp, #80]	; 0x50
   be826:	2300      	movs	r3, #0
   be828:	6013      	str	r3, [r2, #0]
   be82a:	27a3      	movs	r7, #163	; 0xa3
   be82c:	e785      	b.n	be73a <__gethex+0x12a>
   be82e:	1e73      	subs	r3, r6, #1
   be830:	9a05      	ldr	r2, [sp, #20]
   be832:	9303      	str	r3, [sp, #12]
   be834:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   be838:	4293      	cmp	r3, r2
   be83a:	d019      	beq.n	be870 <__gethex+0x260>
   be83c:	f1bb 0f20 	cmp.w	fp, #32
   be840:	d107      	bne.n	be852 <__gethex+0x242>
   be842:	9b02      	ldr	r3, [sp, #8]
   be844:	9a00      	ldr	r2, [sp, #0]
   be846:	f843 2b04 	str.w	r2, [r3], #4
   be84a:	9302      	str	r3, [sp, #8]
   be84c:	2300      	movs	r3, #0
   be84e:	9300      	str	r3, [sp, #0]
   be850:	469b      	mov	fp, r3
   be852:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   be856:	f7ff fec5 	bl	be5e4 <__hexdig_fun>
   be85a:	9b00      	ldr	r3, [sp, #0]
   be85c:	f000 000f 	and.w	r0, r0, #15
   be860:	fa00 f00b 	lsl.w	r0, r0, fp
   be864:	4303      	orrs	r3, r0
   be866:	9300      	str	r3, [sp, #0]
   be868:	f10b 0b04 	add.w	fp, fp, #4
   be86c:	9b03      	ldr	r3, [sp, #12]
   be86e:	e00d      	b.n	be88c <__gethex+0x27c>
   be870:	9b03      	ldr	r3, [sp, #12]
   be872:	9a06      	ldr	r2, [sp, #24]
   be874:	4413      	add	r3, r2
   be876:	42bb      	cmp	r3, r7
   be878:	d3e0      	bcc.n	be83c <__gethex+0x22c>
   be87a:	4618      	mov	r0, r3
   be87c:	9901      	ldr	r1, [sp, #4]
   be87e:	9307      	str	r3, [sp, #28]
   be880:	4652      	mov	r2, sl
   be882:	f7fe ff0c 	bl	bd69e <strncmp>
   be886:	9b07      	ldr	r3, [sp, #28]
   be888:	2800      	cmp	r0, #0
   be88a:	d1d7      	bne.n	be83c <__gethex+0x22c>
   be88c:	461e      	mov	r6, r3
   be88e:	e78b      	b.n	be7a8 <__gethex+0x198>
   be890:	f04f 0a03 	mov.w	sl, #3
   be894:	e7b8      	b.n	be808 <__gethex+0x1f8>
   be896:	da0a      	bge.n	be8ae <__gethex+0x29e>
   be898:	1a37      	subs	r7, r6, r0
   be89a:	4621      	mov	r1, r4
   be89c:	ee18 0a10 	vmov	r0, s16
   be8a0:	463a      	mov	r2, r7
   be8a2:	f000 fc2f 	bl	bf104 <__lshift>
   be8a6:	1bed      	subs	r5, r5, r7
   be8a8:	4604      	mov	r4, r0
   be8aa:	f100 0914 	add.w	r9, r0, #20
   be8ae:	f04f 0a00 	mov.w	sl, #0
   be8b2:	e7ae      	b.n	be812 <__gethex+0x202>
   be8b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   be8b8:	42a8      	cmp	r0, r5
   be8ba:	dd72      	ble.n	be9a2 <__gethex+0x392>
   be8bc:	1b45      	subs	r5, r0, r5
   be8be:	42ae      	cmp	r6, r5
   be8c0:	dc36      	bgt.n	be930 <__gethex+0x320>
   be8c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   be8c6:	2b02      	cmp	r3, #2
   be8c8:	d02a      	beq.n	be920 <__gethex+0x310>
   be8ca:	2b03      	cmp	r3, #3
   be8cc:	d02c      	beq.n	be928 <__gethex+0x318>
   be8ce:	2b01      	cmp	r3, #1
   be8d0:	d11c      	bne.n	be90c <__gethex+0x2fc>
   be8d2:	42ae      	cmp	r6, r5
   be8d4:	d11a      	bne.n	be90c <__gethex+0x2fc>
   be8d6:	2e01      	cmp	r6, #1
   be8d8:	d112      	bne.n	be900 <__gethex+0x2f0>
   be8da:	9a04      	ldr	r2, [sp, #16]
   be8dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   be8e0:	6013      	str	r3, [r2, #0]
   be8e2:	2301      	movs	r3, #1
   be8e4:	6123      	str	r3, [r4, #16]
   be8e6:	f8c9 3000 	str.w	r3, [r9]
   be8ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   be8ec:	2762      	movs	r7, #98	; 0x62
   be8ee:	601c      	str	r4, [r3, #0]
   be8f0:	e723      	b.n	be73a <__gethex+0x12a>
   be8f2:	bf00      	nop
   be8f4:	000c0fa8 	.word	0x000c0fa8
   be8f8:	000c0f11 	.word	0x000c0f11
   be8fc:	000c0f22 	.word	0x000c0f22
   be900:	1e71      	subs	r1, r6, #1
   be902:	4620      	mov	r0, r4
   be904:	f000 fe42 	bl	bf58c <__any_on>
   be908:	2800      	cmp	r0, #0
   be90a:	d1e6      	bne.n	be8da <__gethex+0x2ca>
   be90c:	ee18 0a10 	vmov	r0, s16
   be910:	4621      	mov	r1, r4
   be912:	f000 f9db 	bl	beccc <_Bfree>
   be916:	9a14      	ldr	r2, [sp, #80]	; 0x50
   be918:	2300      	movs	r3, #0
   be91a:	6013      	str	r3, [r2, #0]
   be91c:	2750      	movs	r7, #80	; 0x50
   be91e:	e70c      	b.n	be73a <__gethex+0x12a>
   be920:	9b15      	ldr	r3, [sp, #84]	; 0x54
   be922:	2b00      	cmp	r3, #0
   be924:	d1f2      	bne.n	be90c <__gethex+0x2fc>
   be926:	e7d8      	b.n	be8da <__gethex+0x2ca>
   be928:	9b15      	ldr	r3, [sp, #84]	; 0x54
   be92a:	2b00      	cmp	r3, #0
   be92c:	d1d5      	bne.n	be8da <__gethex+0x2ca>
   be92e:	e7ed      	b.n	be90c <__gethex+0x2fc>
   be930:	1e6f      	subs	r7, r5, #1
   be932:	f1ba 0f00 	cmp.w	sl, #0
   be936:	d131      	bne.n	be99c <__gethex+0x38c>
   be938:	b127      	cbz	r7, be944 <__gethex+0x334>
   be93a:	4639      	mov	r1, r7
   be93c:	4620      	mov	r0, r4
   be93e:	f000 fe25 	bl	bf58c <__any_on>
   be942:	4682      	mov	sl, r0
   be944:	117b      	asrs	r3, r7, #5
   be946:	2101      	movs	r1, #1
   be948:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   be94c:	f007 071f 	and.w	r7, r7, #31
   be950:	fa01 f707 	lsl.w	r7, r1, r7
   be954:	421f      	tst	r7, r3
   be956:	4629      	mov	r1, r5
   be958:	4620      	mov	r0, r4
   be95a:	bf18      	it	ne
   be95c:	f04a 0a02 	orrne.w	sl, sl, #2
   be960:	1b76      	subs	r6, r6, r5
   be962:	f7ff fded 	bl	be540 <rshift>
   be966:	f8d8 5004 	ldr.w	r5, [r8, #4]
   be96a:	2702      	movs	r7, #2
   be96c:	f1ba 0f00 	cmp.w	sl, #0
   be970:	d048      	beq.n	bea04 <__gethex+0x3f4>
   be972:	f8d8 300c 	ldr.w	r3, [r8, #12]
   be976:	2b02      	cmp	r3, #2
   be978:	d015      	beq.n	be9a6 <__gethex+0x396>
   be97a:	2b03      	cmp	r3, #3
   be97c:	d017      	beq.n	be9ae <__gethex+0x39e>
   be97e:	2b01      	cmp	r3, #1
   be980:	d109      	bne.n	be996 <__gethex+0x386>
   be982:	f01a 0f02 	tst.w	sl, #2
   be986:	d006      	beq.n	be996 <__gethex+0x386>
   be988:	f8d9 0000 	ldr.w	r0, [r9]
   be98c:	ea4a 0a00 	orr.w	sl, sl, r0
   be990:	f01a 0f01 	tst.w	sl, #1
   be994:	d10e      	bne.n	be9b4 <__gethex+0x3a4>
   be996:	f047 0710 	orr.w	r7, r7, #16
   be99a:	e033      	b.n	bea04 <__gethex+0x3f4>
   be99c:	f04f 0a01 	mov.w	sl, #1
   be9a0:	e7d0      	b.n	be944 <__gethex+0x334>
   be9a2:	2701      	movs	r7, #1
   be9a4:	e7e2      	b.n	be96c <__gethex+0x35c>
   be9a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   be9a8:	f1c3 0301 	rsb	r3, r3, #1
   be9ac:	9315      	str	r3, [sp, #84]	; 0x54
   be9ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
   be9b0:	2b00      	cmp	r3, #0
   be9b2:	d0f0      	beq.n	be996 <__gethex+0x386>
   be9b4:	f8d4 b010 	ldr.w	fp, [r4, #16]
   be9b8:	f104 0314 	add.w	r3, r4, #20
   be9bc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   be9c0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   be9c4:	f04f 0c00 	mov.w	ip, #0
   be9c8:	4618      	mov	r0, r3
   be9ca:	f853 2b04 	ldr.w	r2, [r3], #4
   be9ce:	f1b2 3fff 	cmp.w	r2, #4294967295
   be9d2:	d01c      	beq.n	bea0e <__gethex+0x3fe>
   be9d4:	3201      	adds	r2, #1
   be9d6:	6002      	str	r2, [r0, #0]
   be9d8:	2f02      	cmp	r7, #2
   be9da:	f104 0314 	add.w	r3, r4, #20
   be9de:	d13f      	bne.n	bea60 <__gethex+0x450>
   be9e0:	f8d8 2000 	ldr.w	r2, [r8]
   be9e4:	3a01      	subs	r2, #1
   be9e6:	42b2      	cmp	r2, r6
   be9e8:	d10a      	bne.n	bea00 <__gethex+0x3f0>
   be9ea:	1171      	asrs	r1, r6, #5
   be9ec:	2201      	movs	r2, #1
   be9ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   be9f2:	f006 061f 	and.w	r6, r6, #31
   be9f6:	fa02 f606 	lsl.w	r6, r2, r6
   be9fa:	421e      	tst	r6, r3
   be9fc:	bf18      	it	ne
   be9fe:	4617      	movne	r7, r2
   bea00:	f047 0720 	orr.w	r7, r7, #32
   bea04:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bea06:	601c      	str	r4, [r3, #0]
   bea08:	9b04      	ldr	r3, [sp, #16]
   bea0a:	601d      	str	r5, [r3, #0]
   bea0c:	e695      	b.n	be73a <__gethex+0x12a>
   bea0e:	4299      	cmp	r1, r3
   bea10:	f843 cc04 	str.w	ip, [r3, #-4]
   bea14:	d8d8      	bhi.n	be9c8 <__gethex+0x3b8>
   bea16:	68a3      	ldr	r3, [r4, #8]
   bea18:	459b      	cmp	fp, r3
   bea1a:	db19      	blt.n	bea50 <__gethex+0x440>
   bea1c:	6861      	ldr	r1, [r4, #4]
   bea1e:	ee18 0a10 	vmov	r0, s16
   bea22:	3101      	adds	r1, #1
   bea24:	f000 f912 	bl	bec4c <_Balloc>
   bea28:	4681      	mov	r9, r0
   bea2a:	b918      	cbnz	r0, bea34 <__gethex+0x424>
   bea2c:	4b1a      	ldr	r3, [pc, #104]	; (bea98 <__gethex+0x488>)
   bea2e:	4602      	mov	r2, r0
   bea30:	2184      	movs	r1, #132	; 0x84
   bea32:	e6a8      	b.n	be786 <__gethex+0x176>
   bea34:	6922      	ldr	r2, [r4, #16]
   bea36:	3202      	adds	r2, #2
   bea38:	f104 010c 	add.w	r1, r4, #12
   bea3c:	0092      	lsls	r2, r2, #2
   bea3e:	300c      	adds	r0, #12
   bea40:	f7fe fd87 	bl	bd552 <memcpy>
   bea44:	4621      	mov	r1, r4
   bea46:	ee18 0a10 	vmov	r0, s16
   bea4a:	f000 f93f 	bl	beccc <_Bfree>
   bea4e:	464c      	mov	r4, r9
   bea50:	6923      	ldr	r3, [r4, #16]
   bea52:	1c5a      	adds	r2, r3, #1
   bea54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bea58:	6122      	str	r2, [r4, #16]
   bea5a:	2201      	movs	r2, #1
   bea5c:	615a      	str	r2, [r3, #20]
   bea5e:	e7bb      	b.n	be9d8 <__gethex+0x3c8>
   bea60:	6922      	ldr	r2, [r4, #16]
   bea62:	455a      	cmp	r2, fp
   bea64:	dd0b      	ble.n	bea7e <__gethex+0x46e>
   bea66:	2101      	movs	r1, #1
   bea68:	4620      	mov	r0, r4
   bea6a:	f7ff fd69 	bl	be540 <rshift>
   bea6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bea72:	3501      	adds	r5, #1
   bea74:	42ab      	cmp	r3, r5
   bea76:	f6ff aed0 	blt.w	be81a <__gethex+0x20a>
   bea7a:	2701      	movs	r7, #1
   bea7c:	e7c0      	b.n	bea00 <__gethex+0x3f0>
   bea7e:	f016 061f 	ands.w	r6, r6, #31
   bea82:	d0fa      	beq.n	bea7a <__gethex+0x46a>
   bea84:	4453      	add	r3, sl
   bea86:	f1c6 0620 	rsb	r6, r6, #32
   bea8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bea8e:	f000 f9cf 	bl	bee30 <__hi0bits>
   bea92:	42b0      	cmp	r0, r6
   bea94:	dbe7      	blt.n	bea66 <__gethex+0x456>
   bea96:	e7f0      	b.n	bea7a <__gethex+0x46a>
   bea98:	000c0f11 	.word	0x000c0f11

000bea9c <L_shift>:
   bea9c:	f1c2 0208 	rsb	r2, r2, #8
   beaa0:	0092      	lsls	r2, r2, #2
   beaa2:	b570      	push	{r4, r5, r6, lr}
   beaa4:	f1c2 0620 	rsb	r6, r2, #32
   beaa8:	6843      	ldr	r3, [r0, #4]
   beaaa:	6804      	ldr	r4, [r0, #0]
   beaac:	fa03 f506 	lsl.w	r5, r3, r6
   beab0:	432c      	orrs	r4, r5
   beab2:	40d3      	lsrs	r3, r2
   beab4:	6004      	str	r4, [r0, #0]
   beab6:	f840 3f04 	str.w	r3, [r0, #4]!
   beaba:	4288      	cmp	r0, r1
   beabc:	d3f4      	bcc.n	beaa8 <L_shift+0xc>
   beabe:	bd70      	pop	{r4, r5, r6, pc}

000beac0 <__match>:
   beac0:	b530      	push	{r4, r5, lr}
   beac2:	6803      	ldr	r3, [r0, #0]
   beac4:	3301      	adds	r3, #1
   beac6:	f811 4b01 	ldrb.w	r4, [r1], #1
   beaca:	b914      	cbnz	r4, bead2 <__match+0x12>
   beacc:	6003      	str	r3, [r0, #0]
   beace:	2001      	movs	r0, #1
   bead0:	bd30      	pop	{r4, r5, pc}
   bead2:	f813 2b01 	ldrb.w	r2, [r3], #1
   bead6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   beada:	2d19      	cmp	r5, #25
   beadc:	bf98      	it	ls
   beade:	3220      	addls	r2, #32
   beae0:	42a2      	cmp	r2, r4
   beae2:	d0f0      	beq.n	beac6 <__match+0x6>
   beae4:	2000      	movs	r0, #0
   beae6:	e7f3      	b.n	bead0 <__match+0x10>

000beae8 <__hexnan>:
   beae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   beaec:	680b      	ldr	r3, [r1, #0]
   beaee:	115e      	asrs	r6, r3, #5
   beaf0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   beaf4:	f013 031f 	ands.w	r3, r3, #31
   beaf8:	b087      	sub	sp, #28
   beafa:	bf18      	it	ne
   beafc:	3604      	addne	r6, #4
   beafe:	2500      	movs	r5, #0
   beb00:	1f37      	subs	r7, r6, #4
   beb02:	4690      	mov	r8, r2
   beb04:	6802      	ldr	r2, [r0, #0]
   beb06:	9301      	str	r3, [sp, #4]
   beb08:	4682      	mov	sl, r0
   beb0a:	f846 5c04 	str.w	r5, [r6, #-4]
   beb0e:	46b9      	mov	r9, r7
   beb10:	463c      	mov	r4, r7
   beb12:	9502      	str	r5, [sp, #8]
   beb14:	46ab      	mov	fp, r5
   beb16:	7851      	ldrb	r1, [r2, #1]
   beb18:	1c53      	adds	r3, r2, #1
   beb1a:	9303      	str	r3, [sp, #12]
   beb1c:	b341      	cbz	r1, beb70 <__hexnan+0x88>
   beb1e:	4608      	mov	r0, r1
   beb20:	9205      	str	r2, [sp, #20]
   beb22:	9104      	str	r1, [sp, #16]
   beb24:	f7ff fd5e 	bl	be5e4 <__hexdig_fun>
   beb28:	2800      	cmp	r0, #0
   beb2a:	d14f      	bne.n	bebcc <__hexnan+0xe4>
   beb2c:	9904      	ldr	r1, [sp, #16]
   beb2e:	9a05      	ldr	r2, [sp, #20]
   beb30:	2920      	cmp	r1, #32
   beb32:	d818      	bhi.n	beb66 <__hexnan+0x7e>
   beb34:	9b02      	ldr	r3, [sp, #8]
   beb36:	459b      	cmp	fp, r3
   beb38:	dd13      	ble.n	beb62 <__hexnan+0x7a>
   beb3a:	454c      	cmp	r4, r9
   beb3c:	d206      	bcs.n	beb4c <__hexnan+0x64>
   beb3e:	2d07      	cmp	r5, #7
   beb40:	dc04      	bgt.n	beb4c <__hexnan+0x64>
   beb42:	462a      	mov	r2, r5
   beb44:	4649      	mov	r1, r9
   beb46:	4620      	mov	r0, r4
   beb48:	f7ff ffa8 	bl	bea9c <L_shift>
   beb4c:	4544      	cmp	r4, r8
   beb4e:	d950      	bls.n	bebf2 <__hexnan+0x10a>
   beb50:	2300      	movs	r3, #0
   beb52:	f1a4 0904 	sub.w	r9, r4, #4
   beb56:	f844 3c04 	str.w	r3, [r4, #-4]
   beb5a:	f8cd b008 	str.w	fp, [sp, #8]
   beb5e:	464c      	mov	r4, r9
   beb60:	461d      	mov	r5, r3
   beb62:	9a03      	ldr	r2, [sp, #12]
   beb64:	e7d7      	b.n	beb16 <__hexnan+0x2e>
   beb66:	2929      	cmp	r1, #41	; 0x29
   beb68:	d156      	bne.n	bec18 <__hexnan+0x130>
   beb6a:	3202      	adds	r2, #2
   beb6c:	f8ca 2000 	str.w	r2, [sl]
   beb70:	f1bb 0f00 	cmp.w	fp, #0
   beb74:	d050      	beq.n	bec18 <__hexnan+0x130>
   beb76:	454c      	cmp	r4, r9
   beb78:	d206      	bcs.n	beb88 <__hexnan+0xa0>
   beb7a:	2d07      	cmp	r5, #7
   beb7c:	dc04      	bgt.n	beb88 <__hexnan+0xa0>
   beb7e:	462a      	mov	r2, r5
   beb80:	4649      	mov	r1, r9
   beb82:	4620      	mov	r0, r4
   beb84:	f7ff ff8a 	bl	bea9c <L_shift>
   beb88:	4544      	cmp	r4, r8
   beb8a:	d934      	bls.n	bebf6 <__hexnan+0x10e>
   beb8c:	f1a8 0204 	sub.w	r2, r8, #4
   beb90:	4623      	mov	r3, r4
   beb92:	f853 1b04 	ldr.w	r1, [r3], #4
   beb96:	f842 1f04 	str.w	r1, [r2, #4]!
   beb9a:	429f      	cmp	r7, r3
   beb9c:	d2f9      	bcs.n	beb92 <__hexnan+0xaa>
   beb9e:	1b3b      	subs	r3, r7, r4
   beba0:	f023 0303 	bic.w	r3, r3, #3
   beba4:	3304      	adds	r3, #4
   beba6:	3401      	adds	r4, #1
   beba8:	3e03      	subs	r6, #3
   bebaa:	42b4      	cmp	r4, r6
   bebac:	bf88      	it	hi
   bebae:	2304      	movhi	r3, #4
   bebb0:	4443      	add	r3, r8
   bebb2:	2200      	movs	r2, #0
   bebb4:	f843 2b04 	str.w	r2, [r3], #4
   bebb8:	429f      	cmp	r7, r3
   bebba:	d2fb      	bcs.n	bebb4 <__hexnan+0xcc>
   bebbc:	683b      	ldr	r3, [r7, #0]
   bebbe:	b91b      	cbnz	r3, bebc8 <__hexnan+0xe0>
   bebc0:	4547      	cmp	r7, r8
   bebc2:	d127      	bne.n	bec14 <__hexnan+0x12c>
   bebc4:	2301      	movs	r3, #1
   bebc6:	603b      	str	r3, [r7, #0]
   bebc8:	2005      	movs	r0, #5
   bebca:	e026      	b.n	bec1a <__hexnan+0x132>
   bebcc:	3501      	adds	r5, #1
   bebce:	2d08      	cmp	r5, #8
   bebd0:	f10b 0b01 	add.w	fp, fp, #1
   bebd4:	dd06      	ble.n	bebe4 <__hexnan+0xfc>
   bebd6:	4544      	cmp	r4, r8
   bebd8:	d9c3      	bls.n	beb62 <__hexnan+0x7a>
   bebda:	2300      	movs	r3, #0
   bebdc:	f844 3c04 	str.w	r3, [r4, #-4]
   bebe0:	2501      	movs	r5, #1
   bebe2:	3c04      	subs	r4, #4
   bebe4:	6822      	ldr	r2, [r4, #0]
   bebe6:	f000 000f 	and.w	r0, r0, #15
   bebea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bebee:	6022      	str	r2, [r4, #0]
   bebf0:	e7b7      	b.n	beb62 <__hexnan+0x7a>
   bebf2:	2508      	movs	r5, #8
   bebf4:	e7b5      	b.n	beb62 <__hexnan+0x7a>
   bebf6:	9b01      	ldr	r3, [sp, #4]
   bebf8:	2b00      	cmp	r3, #0
   bebfa:	d0df      	beq.n	bebbc <__hexnan+0xd4>
   bebfc:	f04f 32ff 	mov.w	r2, #4294967295
   bec00:	f1c3 0320 	rsb	r3, r3, #32
   bec04:	fa22 f303 	lsr.w	r3, r2, r3
   bec08:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bec0c:	401a      	ands	r2, r3
   bec0e:	f846 2c04 	str.w	r2, [r6, #-4]
   bec12:	e7d3      	b.n	bebbc <__hexnan+0xd4>
   bec14:	3f04      	subs	r7, #4
   bec16:	e7d1      	b.n	bebbc <__hexnan+0xd4>
   bec18:	2004      	movs	r0, #4
   bec1a:	b007      	add	sp, #28
   bec1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bec20 <__retarget_lock_acquire_recursive>:
   bec20:	4770      	bx	lr

000bec22 <__retarget_lock_release>:
   bec22:	4770      	bx	lr

000bec24 <__retarget_lock_release_recursive>:
   bec24:	4770      	bx	lr

000bec26 <__ascii_mbtowc>:
   bec26:	b082      	sub	sp, #8
   bec28:	b901      	cbnz	r1, bec2c <__ascii_mbtowc+0x6>
   bec2a:	a901      	add	r1, sp, #4
   bec2c:	b142      	cbz	r2, bec40 <__ascii_mbtowc+0x1a>
   bec2e:	b14b      	cbz	r3, bec44 <__ascii_mbtowc+0x1e>
   bec30:	7813      	ldrb	r3, [r2, #0]
   bec32:	600b      	str	r3, [r1, #0]
   bec34:	7812      	ldrb	r2, [r2, #0]
   bec36:	1e10      	subs	r0, r2, #0
   bec38:	bf18      	it	ne
   bec3a:	2001      	movne	r0, #1
   bec3c:	b002      	add	sp, #8
   bec3e:	4770      	bx	lr
   bec40:	4610      	mov	r0, r2
   bec42:	e7fb      	b.n	bec3c <__ascii_mbtowc+0x16>
   bec44:	f06f 0001 	mvn.w	r0, #1
   bec48:	e7f8      	b.n	bec3c <__ascii_mbtowc+0x16>
	...

000bec4c <_Balloc>:
   bec4c:	b570      	push	{r4, r5, r6, lr}
   bec4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bec50:	4604      	mov	r4, r0
   bec52:	460d      	mov	r5, r1
   bec54:	b976      	cbnz	r6, bec74 <_Balloc+0x28>
   bec56:	2010      	movs	r0, #16
   bec58:	f7f9 fff0 	bl	b8c3c <malloc>
   bec5c:	4602      	mov	r2, r0
   bec5e:	6260      	str	r0, [r4, #36]	; 0x24
   bec60:	b920      	cbnz	r0, bec6c <_Balloc+0x20>
   bec62:	4b18      	ldr	r3, [pc, #96]	; (becc4 <_Balloc+0x78>)
   bec64:	4818      	ldr	r0, [pc, #96]	; (becc8 <_Balloc+0x7c>)
   bec66:	2166      	movs	r1, #102	; 0x66
   bec68:	f7fa f838 	bl	b8cdc <__assert_func>
   bec6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bec70:	6006      	str	r6, [r0, #0]
   bec72:	60c6      	str	r6, [r0, #12]
   bec74:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bec76:	68f3      	ldr	r3, [r6, #12]
   bec78:	b183      	cbz	r3, bec9c <_Balloc+0x50>
   bec7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bec7c:	68db      	ldr	r3, [r3, #12]
   bec7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bec82:	b9b8      	cbnz	r0, becb4 <_Balloc+0x68>
   bec84:	2101      	movs	r1, #1
   bec86:	fa01 f605 	lsl.w	r6, r1, r5
   bec8a:	1d72      	adds	r2, r6, #5
   bec8c:	0092      	lsls	r2, r2, #2
   bec8e:	4620      	mov	r0, r4
   bec90:	f000 fc9d 	bl	bf5ce <_calloc_r>
   bec94:	b160      	cbz	r0, becb0 <_Balloc+0x64>
   bec96:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bec9a:	e00e      	b.n	becba <_Balloc+0x6e>
   bec9c:	2221      	movs	r2, #33	; 0x21
   bec9e:	2104      	movs	r1, #4
   beca0:	4620      	mov	r0, r4
   beca2:	f000 fc94 	bl	bf5ce <_calloc_r>
   beca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   beca8:	60f0      	str	r0, [r6, #12]
   becaa:	68db      	ldr	r3, [r3, #12]
   becac:	2b00      	cmp	r3, #0
   becae:	d1e4      	bne.n	bec7a <_Balloc+0x2e>
   becb0:	2000      	movs	r0, #0
   becb2:	bd70      	pop	{r4, r5, r6, pc}
   becb4:	6802      	ldr	r2, [r0, #0]
   becb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   becba:	2300      	movs	r3, #0
   becbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
   becc0:	e7f7      	b.n	becb2 <_Balloc+0x66>
   becc2:	bf00      	nop
   becc4:	000c0d1d 	.word	0x000c0d1d
   becc8:	000c0fbc 	.word	0x000c0fbc

000beccc <_Bfree>:
   beccc:	b570      	push	{r4, r5, r6, lr}
   becce:	6a46      	ldr	r6, [r0, #36]	; 0x24
   becd0:	4605      	mov	r5, r0
   becd2:	460c      	mov	r4, r1
   becd4:	b976      	cbnz	r6, becf4 <_Bfree+0x28>
   becd6:	2010      	movs	r0, #16
   becd8:	f7f9 ffb0 	bl	b8c3c <malloc>
   becdc:	4602      	mov	r2, r0
   becde:	6268      	str	r0, [r5, #36]	; 0x24
   bece0:	b920      	cbnz	r0, becec <_Bfree+0x20>
   bece2:	4b09      	ldr	r3, [pc, #36]	; (bed08 <_Bfree+0x3c>)
   bece4:	4809      	ldr	r0, [pc, #36]	; (bed0c <_Bfree+0x40>)
   bece6:	218a      	movs	r1, #138	; 0x8a
   bece8:	f7f9 fff8 	bl	b8cdc <__assert_func>
   becec:	e9c0 6601 	strd	r6, r6, [r0, #4]
   becf0:	6006      	str	r6, [r0, #0]
   becf2:	60c6      	str	r6, [r0, #12]
   becf4:	b13c      	cbz	r4, bed06 <_Bfree+0x3a>
   becf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   becf8:	6862      	ldr	r2, [r4, #4]
   becfa:	68db      	ldr	r3, [r3, #12]
   becfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bed00:	6021      	str	r1, [r4, #0]
   bed02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bed06:	bd70      	pop	{r4, r5, r6, pc}
   bed08:	000c0d1d 	.word	0x000c0d1d
   bed0c:	000c0fbc 	.word	0x000c0fbc

000bed10 <__multadd>:
   bed10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bed14:	690d      	ldr	r5, [r1, #16]
   bed16:	4607      	mov	r7, r0
   bed18:	460c      	mov	r4, r1
   bed1a:	461e      	mov	r6, r3
   bed1c:	f101 0c14 	add.w	ip, r1, #20
   bed20:	2000      	movs	r0, #0
   bed22:	f8dc 3000 	ldr.w	r3, [ip]
   bed26:	b299      	uxth	r1, r3
   bed28:	fb02 6101 	mla	r1, r2, r1, r6
   bed2c:	0c1e      	lsrs	r6, r3, #16
   bed2e:	0c0b      	lsrs	r3, r1, #16
   bed30:	fb02 3306 	mla	r3, r2, r6, r3
   bed34:	b289      	uxth	r1, r1
   bed36:	3001      	adds	r0, #1
   bed38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bed3c:	4285      	cmp	r5, r0
   bed3e:	f84c 1b04 	str.w	r1, [ip], #4
   bed42:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bed46:	dcec      	bgt.n	bed22 <__multadd+0x12>
   bed48:	b30e      	cbz	r6, bed8e <__multadd+0x7e>
   bed4a:	68a3      	ldr	r3, [r4, #8]
   bed4c:	42ab      	cmp	r3, r5
   bed4e:	dc19      	bgt.n	bed84 <__multadd+0x74>
   bed50:	6861      	ldr	r1, [r4, #4]
   bed52:	4638      	mov	r0, r7
   bed54:	3101      	adds	r1, #1
   bed56:	f7ff ff79 	bl	bec4c <_Balloc>
   bed5a:	4680      	mov	r8, r0
   bed5c:	b928      	cbnz	r0, bed6a <__multadd+0x5a>
   bed5e:	4602      	mov	r2, r0
   bed60:	4b0c      	ldr	r3, [pc, #48]	; (bed94 <__multadd+0x84>)
   bed62:	480d      	ldr	r0, [pc, #52]	; (bed98 <__multadd+0x88>)
   bed64:	21b5      	movs	r1, #181	; 0xb5
   bed66:	f7f9 ffb9 	bl	b8cdc <__assert_func>
   bed6a:	6922      	ldr	r2, [r4, #16]
   bed6c:	3202      	adds	r2, #2
   bed6e:	f104 010c 	add.w	r1, r4, #12
   bed72:	0092      	lsls	r2, r2, #2
   bed74:	300c      	adds	r0, #12
   bed76:	f7fe fbec 	bl	bd552 <memcpy>
   bed7a:	4621      	mov	r1, r4
   bed7c:	4638      	mov	r0, r7
   bed7e:	f7ff ffa5 	bl	beccc <_Bfree>
   bed82:	4644      	mov	r4, r8
   bed84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bed88:	3501      	adds	r5, #1
   bed8a:	615e      	str	r6, [r3, #20]
   bed8c:	6125      	str	r5, [r4, #16]
   bed8e:	4620      	mov	r0, r4
   bed90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bed94:	000c0f11 	.word	0x000c0f11
   bed98:	000c0fbc 	.word	0x000c0fbc

000bed9c <__s2b>:
   bed9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   beda0:	460c      	mov	r4, r1
   beda2:	4615      	mov	r5, r2
   beda4:	461f      	mov	r7, r3
   beda6:	2209      	movs	r2, #9
   beda8:	3308      	adds	r3, #8
   bedaa:	4606      	mov	r6, r0
   bedac:	fb93 f3f2 	sdiv	r3, r3, r2
   bedb0:	2100      	movs	r1, #0
   bedb2:	2201      	movs	r2, #1
   bedb4:	429a      	cmp	r2, r3
   bedb6:	db09      	blt.n	bedcc <__s2b+0x30>
   bedb8:	4630      	mov	r0, r6
   bedba:	f7ff ff47 	bl	bec4c <_Balloc>
   bedbe:	b940      	cbnz	r0, bedd2 <__s2b+0x36>
   bedc0:	4602      	mov	r2, r0
   bedc2:	4b19      	ldr	r3, [pc, #100]	; (bee28 <__s2b+0x8c>)
   bedc4:	4819      	ldr	r0, [pc, #100]	; (bee2c <__s2b+0x90>)
   bedc6:	21ce      	movs	r1, #206	; 0xce
   bedc8:	f7f9 ff88 	bl	b8cdc <__assert_func>
   bedcc:	0052      	lsls	r2, r2, #1
   bedce:	3101      	adds	r1, #1
   bedd0:	e7f0      	b.n	bedb4 <__s2b+0x18>
   bedd2:	9b08      	ldr	r3, [sp, #32]
   bedd4:	6143      	str	r3, [r0, #20]
   bedd6:	2d09      	cmp	r5, #9
   bedd8:	f04f 0301 	mov.w	r3, #1
   beddc:	6103      	str	r3, [r0, #16]
   bedde:	dd16      	ble.n	bee0e <__s2b+0x72>
   bede0:	f104 0909 	add.w	r9, r4, #9
   bede4:	46c8      	mov	r8, r9
   bede6:	442c      	add	r4, r5
   bede8:	f818 3b01 	ldrb.w	r3, [r8], #1
   bedec:	4601      	mov	r1, r0
   bedee:	3b30      	subs	r3, #48	; 0x30
   bedf0:	220a      	movs	r2, #10
   bedf2:	4630      	mov	r0, r6
   bedf4:	f7ff ff8c 	bl	bed10 <__multadd>
   bedf8:	45a0      	cmp	r8, r4
   bedfa:	d1f5      	bne.n	bede8 <__s2b+0x4c>
   bedfc:	f1a5 0408 	sub.w	r4, r5, #8
   bee00:	444c      	add	r4, r9
   bee02:	1b2d      	subs	r5, r5, r4
   bee04:	1963      	adds	r3, r4, r5
   bee06:	42bb      	cmp	r3, r7
   bee08:	db04      	blt.n	bee14 <__s2b+0x78>
   bee0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bee0e:	340a      	adds	r4, #10
   bee10:	2509      	movs	r5, #9
   bee12:	e7f6      	b.n	bee02 <__s2b+0x66>
   bee14:	f814 3b01 	ldrb.w	r3, [r4], #1
   bee18:	4601      	mov	r1, r0
   bee1a:	3b30      	subs	r3, #48	; 0x30
   bee1c:	220a      	movs	r2, #10
   bee1e:	4630      	mov	r0, r6
   bee20:	f7ff ff76 	bl	bed10 <__multadd>
   bee24:	e7ee      	b.n	bee04 <__s2b+0x68>
   bee26:	bf00      	nop
   bee28:	000c0f11 	.word	0x000c0f11
   bee2c:	000c0fbc 	.word	0x000c0fbc

000bee30 <__hi0bits>:
   bee30:	0c03      	lsrs	r3, r0, #16
   bee32:	041b      	lsls	r3, r3, #16
   bee34:	b9d3      	cbnz	r3, bee6c <__hi0bits+0x3c>
   bee36:	0400      	lsls	r0, r0, #16
   bee38:	2310      	movs	r3, #16
   bee3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bee3e:	bf04      	itt	eq
   bee40:	0200      	lsleq	r0, r0, #8
   bee42:	3308      	addeq	r3, #8
   bee44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bee48:	bf04      	itt	eq
   bee4a:	0100      	lsleq	r0, r0, #4
   bee4c:	3304      	addeq	r3, #4
   bee4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bee52:	bf04      	itt	eq
   bee54:	0080      	lsleq	r0, r0, #2
   bee56:	3302      	addeq	r3, #2
   bee58:	2800      	cmp	r0, #0
   bee5a:	db05      	blt.n	bee68 <__hi0bits+0x38>
   bee5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bee60:	f103 0301 	add.w	r3, r3, #1
   bee64:	bf08      	it	eq
   bee66:	2320      	moveq	r3, #32
   bee68:	4618      	mov	r0, r3
   bee6a:	4770      	bx	lr
   bee6c:	2300      	movs	r3, #0
   bee6e:	e7e4      	b.n	bee3a <__hi0bits+0xa>

000bee70 <__lo0bits>:
   bee70:	6803      	ldr	r3, [r0, #0]
   bee72:	f013 0207 	ands.w	r2, r3, #7
   bee76:	4601      	mov	r1, r0
   bee78:	d00b      	beq.n	bee92 <__lo0bits+0x22>
   bee7a:	07da      	lsls	r2, r3, #31
   bee7c:	d423      	bmi.n	beec6 <__lo0bits+0x56>
   bee7e:	0798      	lsls	r0, r3, #30
   bee80:	bf49      	itett	mi
   bee82:	085b      	lsrmi	r3, r3, #1
   bee84:	089b      	lsrpl	r3, r3, #2
   bee86:	2001      	movmi	r0, #1
   bee88:	600b      	strmi	r3, [r1, #0]
   bee8a:	bf5c      	itt	pl
   bee8c:	600b      	strpl	r3, [r1, #0]
   bee8e:	2002      	movpl	r0, #2
   bee90:	4770      	bx	lr
   bee92:	b298      	uxth	r0, r3
   bee94:	b9a8      	cbnz	r0, beec2 <__lo0bits+0x52>
   bee96:	0c1b      	lsrs	r3, r3, #16
   bee98:	2010      	movs	r0, #16
   bee9a:	b2da      	uxtb	r2, r3
   bee9c:	b90a      	cbnz	r2, beea2 <__lo0bits+0x32>
   bee9e:	3008      	adds	r0, #8
   beea0:	0a1b      	lsrs	r3, r3, #8
   beea2:	071a      	lsls	r2, r3, #28
   beea4:	bf04      	itt	eq
   beea6:	091b      	lsreq	r3, r3, #4
   beea8:	3004      	addeq	r0, #4
   beeaa:	079a      	lsls	r2, r3, #30
   beeac:	bf04      	itt	eq
   beeae:	089b      	lsreq	r3, r3, #2
   beeb0:	3002      	addeq	r0, #2
   beeb2:	07da      	lsls	r2, r3, #31
   beeb4:	d403      	bmi.n	beebe <__lo0bits+0x4e>
   beeb6:	085b      	lsrs	r3, r3, #1
   beeb8:	f100 0001 	add.w	r0, r0, #1
   beebc:	d005      	beq.n	beeca <__lo0bits+0x5a>
   beebe:	600b      	str	r3, [r1, #0]
   beec0:	4770      	bx	lr
   beec2:	4610      	mov	r0, r2
   beec4:	e7e9      	b.n	bee9a <__lo0bits+0x2a>
   beec6:	2000      	movs	r0, #0
   beec8:	4770      	bx	lr
   beeca:	2020      	movs	r0, #32
   beecc:	4770      	bx	lr
	...

000beed0 <__i2b>:
   beed0:	b510      	push	{r4, lr}
   beed2:	460c      	mov	r4, r1
   beed4:	2101      	movs	r1, #1
   beed6:	f7ff feb9 	bl	bec4c <_Balloc>
   beeda:	4602      	mov	r2, r0
   beedc:	b928      	cbnz	r0, beeea <__i2b+0x1a>
   beede:	4b05      	ldr	r3, [pc, #20]	; (beef4 <__i2b+0x24>)
   beee0:	4805      	ldr	r0, [pc, #20]	; (beef8 <__i2b+0x28>)
   beee2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   beee6:	f7f9 fef9 	bl	b8cdc <__assert_func>
   beeea:	2301      	movs	r3, #1
   beeec:	6144      	str	r4, [r0, #20]
   beeee:	6103      	str	r3, [r0, #16]
   beef0:	bd10      	pop	{r4, pc}
   beef2:	bf00      	nop
   beef4:	000c0f11 	.word	0x000c0f11
   beef8:	000c0fbc 	.word	0x000c0fbc

000beefc <__multiply>:
   beefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bef00:	4691      	mov	r9, r2
   bef02:	690a      	ldr	r2, [r1, #16]
   bef04:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bef08:	429a      	cmp	r2, r3
   bef0a:	bfb8      	it	lt
   bef0c:	460b      	movlt	r3, r1
   bef0e:	460c      	mov	r4, r1
   bef10:	bfbc      	itt	lt
   bef12:	464c      	movlt	r4, r9
   bef14:	4699      	movlt	r9, r3
   bef16:	6927      	ldr	r7, [r4, #16]
   bef18:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bef1c:	68a3      	ldr	r3, [r4, #8]
   bef1e:	6861      	ldr	r1, [r4, #4]
   bef20:	eb07 060a 	add.w	r6, r7, sl
   bef24:	42b3      	cmp	r3, r6
   bef26:	b085      	sub	sp, #20
   bef28:	bfb8      	it	lt
   bef2a:	3101      	addlt	r1, #1
   bef2c:	f7ff fe8e 	bl	bec4c <_Balloc>
   bef30:	b930      	cbnz	r0, bef40 <__multiply+0x44>
   bef32:	4602      	mov	r2, r0
   bef34:	4b44      	ldr	r3, [pc, #272]	; (bf048 <__multiply+0x14c>)
   bef36:	4845      	ldr	r0, [pc, #276]	; (bf04c <__multiply+0x150>)
   bef38:	f240 115d 	movw	r1, #349	; 0x15d
   bef3c:	f7f9 fece 	bl	b8cdc <__assert_func>
   bef40:	f100 0514 	add.w	r5, r0, #20
   bef44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bef48:	462b      	mov	r3, r5
   bef4a:	2200      	movs	r2, #0
   bef4c:	4543      	cmp	r3, r8
   bef4e:	d321      	bcc.n	bef94 <__multiply+0x98>
   bef50:	f104 0314 	add.w	r3, r4, #20
   bef54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bef58:	f109 0314 	add.w	r3, r9, #20
   bef5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bef60:	9202      	str	r2, [sp, #8]
   bef62:	1b3a      	subs	r2, r7, r4
   bef64:	3a15      	subs	r2, #21
   bef66:	f022 0203 	bic.w	r2, r2, #3
   bef6a:	3204      	adds	r2, #4
   bef6c:	f104 0115 	add.w	r1, r4, #21
   bef70:	428f      	cmp	r7, r1
   bef72:	bf38      	it	cc
   bef74:	2204      	movcc	r2, #4
   bef76:	9201      	str	r2, [sp, #4]
   bef78:	9a02      	ldr	r2, [sp, #8]
   bef7a:	9303      	str	r3, [sp, #12]
   bef7c:	429a      	cmp	r2, r3
   bef7e:	d80c      	bhi.n	bef9a <__multiply+0x9e>
   bef80:	2e00      	cmp	r6, #0
   bef82:	dd03      	ble.n	bef8c <__multiply+0x90>
   bef84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bef88:	2b00      	cmp	r3, #0
   bef8a:	d05a      	beq.n	bf042 <__multiply+0x146>
   bef8c:	6106      	str	r6, [r0, #16]
   bef8e:	b005      	add	sp, #20
   bef90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bef94:	f843 2b04 	str.w	r2, [r3], #4
   bef98:	e7d8      	b.n	bef4c <__multiply+0x50>
   bef9a:	f8b3 a000 	ldrh.w	sl, [r3]
   bef9e:	f1ba 0f00 	cmp.w	sl, #0
   befa2:	d024      	beq.n	befee <__multiply+0xf2>
   befa4:	f104 0e14 	add.w	lr, r4, #20
   befa8:	46a9      	mov	r9, r5
   befaa:	f04f 0c00 	mov.w	ip, #0
   befae:	f85e 2b04 	ldr.w	r2, [lr], #4
   befb2:	f8d9 1000 	ldr.w	r1, [r9]
   befb6:	fa1f fb82 	uxth.w	fp, r2
   befba:	b289      	uxth	r1, r1
   befbc:	fb0a 110b 	mla	r1, sl, fp, r1
   befc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   befc4:	f8d9 2000 	ldr.w	r2, [r9]
   befc8:	4461      	add	r1, ip
   befca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   befce:	fb0a c20b 	mla	r2, sl, fp, ip
   befd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   befd6:	b289      	uxth	r1, r1
   befd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   befdc:	4577      	cmp	r7, lr
   befde:	f849 1b04 	str.w	r1, [r9], #4
   befe2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   befe6:	d8e2      	bhi.n	befae <__multiply+0xb2>
   befe8:	9a01      	ldr	r2, [sp, #4]
   befea:	f845 c002 	str.w	ip, [r5, r2]
   befee:	9a03      	ldr	r2, [sp, #12]
   beff0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   beff4:	3304      	adds	r3, #4
   beff6:	f1b9 0f00 	cmp.w	r9, #0
   beffa:	d020      	beq.n	bf03e <__multiply+0x142>
   beffc:	6829      	ldr	r1, [r5, #0]
   beffe:	f104 0c14 	add.w	ip, r4, #20
   bf002:	46ae      	mov	lr, r5
   bf004:	f04f 0a00 	mov.w	sl, #0
   bf008:	f8bc b000 	ldrh.w	fp, [ip]
   bf00c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bf010:	fb09 220b 	mla	r2, r9, fp, r2
   bf014:	4492      	add	sl, r2
   bf016:	b289      	uxth	r1, r1
   bf018:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bf01c:	f84e 1b04 	str.w	r1, [lr], #4
   bf020:	f85c 2b04 	ldr.w	r2, [ip], #4
   bf024:	f8be 1000 	ldrh.w	r1, [lr]
   bf028:	0c12      	lsrs	r2, r2, #16
   bf02a:	fb09 1102 	mla	r1, r9, r2, r1
   bf02e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bf032:	4567      	cmp	r7, ip
   bf034:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bf038:	d8e6      	bhi.n	bf008 <__multiply+0x10c>
   bf03a:	9a01      	ldr	r2, [sp, #4]
   bf03c:	50a9      	str	r1, [r5, r2]
   bf03e:	3504      	adds	r5, #4
   bf040:	e79a      	b.n	bef78 <__multiply+0x7c>
   bf042:	3e01      	subs	r6, #1
   bf044:	e79c      	b.n	bef80 <__multiply+0x84>
   bf046:	bf00      	nop
   bf048:	000c0f11 	.word	0x000c0f11
   bf04c:	000c0fbc 	.word	0x000c0fbc

000bf050 <__pow5mult>:
   bf050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bf054:	4615      	mov	r5, r2
   bf056:	f012 0203 	ands.w	r2, r2, #3
   bf05a:	4606      	mov	r6, r0
   bf05c:	460f      	mov	r7, r1
   bf05e:	d007      	beq.n	bf070 <__pow5mult+0x20>
   bf060:	4c25      	ldr	r4, [pc, #148]	; (bf0f8 <__pow5mult+0xa8>)
   bf062:	3a01      	subs	r2, #1
   bf064:	2300      	movs	r3, #0
   bf066:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bf06a:	f7ff fe51 	bl	bed10 <__multadd>
   bf06e:	4607      	mov	r7, r0
   bf070:	10ad      	asrs	r5, r5, #2
   bf072:	d03d      	beq.n	bf0f0 <__pow5mult+0xa0>
   bf074:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bf076:	b97c      	cbnz	r4, bf098 <__pow5mult+0x48>
   bf078:	2010      	movs	r0, #16
   bf07a:	f7f9 fddf 	bl	b8c3c <malloc>
   bf07e:	4602      	mov	r2, r0
   bf080:	6270      	str	r0, [r6, #36]	; 0x24
   bf082:	b928      	cbnz	r0, bf090 <__pow5mult+0x40>
   bf084:	4b1d      	ldr	r3, [pc, #116]	; (bf0fc <__pow5mult+0xac>)
   bf086:	481e      	ldr	r0, [pc, #120]	; (bf100 <__pow5mult+0xb0>)
   bf088:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bf08c:	f7f9 fe26 	bl	b8cdc <__assert_func>
   bf090:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bf094:	6004      	str	r4, [r0, #0]
   bf096:	60c4      	str	r4, [r0, #12]
   bf098:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bf09c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bf0a0:	b94c      	cbnz	r4, bf0b6 <__pow5mult+0x66>
   bf0a2:	f240 2171 	movw	r1, #625	; 0x271
   bf0a6:	4630      	mov	r0, r6
   bf0a8:	f7ff ff12 	bl	beed0 <__i2b>
   bf0ac:	2300      	movs	r3, #0
   bf0ae:	f8c8 0008 	str.w	r0, [r8, #8]
   bf0b2:	4604      	mov	r4, r0
   bf0b4:	6003      	str	r3, [r0, #0]
   bf0b6:	f04f 0900 	mov.w	r9, #0
   bf0ba:	07eb      	lsls	r3, r5, #31
   bf0bc:	d50a      	bpl.n	bf0d4 <__pow5mult+0x84>
   bf0be:	4639      	mov	r1, r7
   bf0c0:	4622      	mov	r2, r4
   bf0c2:	4630      	mov	r0, r6
   bf0c4:	f7ff ff1a 	bl	beefc <__multiply>
   bf0c8:	4639      	mov	r1, r7
   bf0ca:	4680      	mov	r8, r0
   bf0cc:	4630      	mov	r0, r6
   bf0ce:	f7ff fdfd 	bl	beccc <_Bfree>
   bf0d2:	4647      	mov	r7, r8
   bf0d4:	106d      	asrs	r5, r5, #1
   bf0d6:	d00b      	beq.n	bf0f0 <__pow5mult+0xa0>
   bf0d8:	6820      	ldr	r0, [r4, #0]
   bf0da:	b938      	cbnz	r0, bf0ec <__pow5mult+0x9c>
   bf0dc:	4622      	mov	r2, r4
   bf0de:	4621      	mov	r1, r4
   bf0e0:	4630      	mov	r0, r6
   bf0e2:	f7ff ff0b 	bl	beefc <__multiply>
   bf0e6:	6020      	str	r0, [r4, #0]
   bf0e8:	f8c0 9000 	str.w	r9, [r0]
   bf0ec:	4604      	mov	r4, r0
   bf0ee:	e7e4      	b.n	bf0ba <__pow5mult+0x6a>
   bf0f0:	4638      	mov	r0, r7
   bf0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bf0f6:	bf00      	nop
   bf0f8:	000c1130 	.word	0x000c1130
   bf0fc:	000c0d1d 	.word	0x000c0d1d
   bf100:	000c0fbc 	.word	0x000c0fbc

000bf104 <__lshift>:
   bf104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bf108:	460c      	mov	r4, r1
   bf10a:	6849      	ldr	r1, [r1, #4]
   bf10c:	6923      	ldr	r3, [r4, #16]
   bf10e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bf112:	68a3      	ldr	r3, [r4, #8]
   bf114:	4607      	mov	r7, r0
   bf116:	4691      	mov	r9, r2
   bf118:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bf11c:	f108 0601 	add.w	r6, r8, #1
   bf120:	42b3      	cmp	r3, r6
   bf122:	db0b      	blt.n	bf13c <__lshift+0x38>
   bf124:	4638      	mov	r0, r7
   bf126:	f7ff fd91 	bl	bec4c <_Balloc>
   bf12a:	4605      	mov	r5, r0
   bf12c:	b948      	cbnz	r0, bf142 <__lshift+0x3e>
   bf12e:	4602      	mov	r2, r0
   bf130:	4b2a      	ldr	r3, [pc, #168]	; (bf1dc <__lshift+0xd8>)
   bf132:	482b      	ldr	r0, [pc, #172]	; (bf1e0 <__lshift+0xdc>)
   bf134:	f240 11d9 	movw	r1, #473	; 0x1d9
   bf138:	f7f9 fdd0 	bl	b8cdc <__assert_func>
   bf13c:	3101      	adds	r1, #1
   bf13e:	005b      	lsls	r3, r3, #1
   bf140:	e7ee      	b.n	bf120 <__lshift+0x1c>
   bf142:	2300      	movs	r3, #0
   bf144:	f100 0114 	add.w	r1, r0, #20
   bf148:	f100 0210 	add.w	r2, r0, #16
   bf14c:	4618      	mov	r0, r3
   bf14e:	4553      	cmp	r3, sl
   bf150:	db37      	blt.n	bf1c2 <__lshift+0xbe>
   bf152:	6920      	ldr	r0, [r4, #16]
   bf154:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bf158:	f104 0314 	add.w	r3, r4, #20
   bf15c:	f019 091f 	ands.w	r9, r9, #31
   bf160:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bf164:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bf168:	d02f      	beq.n	bf1ca <__lshift+0xc6>
   bf16a:	f1c9 0e20 	rsb	lr, r9, #32
   bf16e:	468a      	mov	sl, r1
   bf170:	f04f 0c00 	mov.w	ip, #0
   bf174:	681a      	ldr	r2, [r3, #0]
   bf176:	fa02 f209 	lsl.w	r2, r2, r9
   bf17a:	ea42 020c 	orr.w	r2, r2, ip
   bf17e:	f84a 2b04 	str.w	r2, [sl], #4
   bf182:	f853 2b04 	ldr.w	r2, [r3], #4
   bf186:	4298      	cmp	r0, r3
   bf188:	fa22 fc0e 	lsr.w	ip, r2, lr
   bf18c:	d8f2      	bhi.n	bf174 <__lshift+0x70>
   bf18e:	1b03      	subs	r3, r0, r4
   bf190:	3b15      	subs	r3, #21
   bf192:	f023 0303 	bic.w	r3, r3, #3
   bf196:	3304      	adds	r3, #4
   bf198:	f104 0215 	add.w	r2, r4, #21
   bf19c:	4290      	cmp	r0, r2
   bf19e:	bf38      	it	cc
   bf1a0:	2304      	movcc	r3, #4
   bf1a2:	f841 c003 	str.w	ip, [r1, r3]
   bf1a6:	f1bc 0f00 	cmp.w	ip, #0
   bf1aa:	d001      	beq.n	bf1b0 <__lshift+0xac>
   bf1ac:	f108 0602 	add.w	r6, r8, #2
   bf1b0:	3e01      	subs	r6, #1
   bf1b2:	4638      	mov	r0, r7
   bf1b4:	612e      	str	r6, [r5, #16]
   bf1b6:	4621      	mov	r1, r4
   bf1b8:	f7ff fd88 	bl	beccc <_Bfree>
   bf1bc:	4628      	mov	r0, r5
   bf1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bf1c2:	f842 0f04 	str.w	r0, [r2, #4]!
   bf1c6:	3301      	adds	r3, #1
   bf1c8:	e7c1      	b.n	bf14e <__lshift+0x4a>
   bf1ca:	3904      	subs	r1, #4
   bf1cc:	f853 2b04 	ldr.w	r2, [r3], #4
   bf1d0:	f841 2f04 	str.w	r2, [r1, #4]!
   bf1d4:	4298      	cmp	r0, r3
   bf1d6:	d8f9      	bhi.n	bf1cc <__lshift+0xc8>
   bf1d8:	e7ea      	b.n	bf1b0 <__lshift+0xac>
   bf1da:	bf00      	nop
   bf1dc:	000c0f11 	.word	0x000c0f11
   bf1e0:	000c0fbc 	.word	0x000c0fbc

000bf1e4 <__mcmp>:
   bf1e4:	b530      	push	{r4, r5, lr}
   bf1e6:	6902      	ldr	r2, [r0, #16]
   bf1e8:	690c      	ldr	r4, [r1, #16]
   bf1ea:	1b12      	subs	r2, r2, r4
   bf1ec:	d10e      	bne.n	bf20c <__mcmp+0x28>
   bf1ee:	f100 0314 	add.w	r3, r0, #20
   bf1f2:	3114      	adds	r1, #20
   bf1f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bf1f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bf1fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bf200:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bf204:	42a5      	cmp	r5, r4
   bf206:	d003      	beq.n	bf210 <__mcmp+0x2c>
   bf208:	d305      	bcc.n	bf216 <__mcmp+0x32>
   bf20a:	2201      	movs	r2, #1
   bf20c:	4610      	mov	r0, r2
   bf20e:	bd30      	pop	{r4, r5, pc}
   bf210:	4283      	cmp	r3, r0
   bf212:	d3f3      	bcc.n	bf1fc <__mcmp+0x18>
   bf214:	e7fa      	b.n	bf20c <__mcmp+0x28>
   bf216:	f04f 32ff 	mov.w	r2, #4294967295
   bf21a:	e7f7      	b.n	bf20c <__mcmp+0x28>

000bf21c <__mdiff>:
   bf21c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf220:	460c      	mov	r4, r1
   bf222:	4606      	mov	r6, r0
   bf224:	4611      	mov	r1, r2
   bf226:	4620      	mov	r0, r4
   bf228:	4690      	mov	r8, r2
   bf22a:	f7ff ffdb 	bl	bf1e4 <__mcmp>
   bf22e:	1e05      	subs	r5, r0, #0
   bf230:	d110      	bne.n	bf254 <__mdiff+0x38>
   bf232:	4629      	mov	r1, r5
   bf234:	4630      	mov	r0, r6
   bf236:	f7ff fd09 	bl	bec4c <_Balloc>
   bf23a:	b930      	cbnz	r0, bf24a <__mdiff+0x2e>
   bf23c:	4b3a      	ldr	r3, [pc, #232]	; (bf328 <__mdiff+0x10c>)
   bf23e:	4602      	mov	r2, r0
   bf240:	f240 2132 	movw	r1, #562	; 0x232
   bf244:	4839      	ldr	r0, [pc, #228]	; (bf32c <__mdiff+0x110>)
   bf246:	f7f9 fd49 	bl	b8cdc <__assert_func>
   bf24a:	2301      	movs	r3, #1
   bf24c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bf250:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bf254:	bfa4      	itt	ge
   bf256:	4643      	movge	r3, r8
   bf258:	46a0      	movge	r8, r4
   bf25a:	4630      	mov	r0, r6
   bf25c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bf260:	bfa6      	itte	ge
   bf262:	461c      	movge	r4, r3
   bf264:	2500      	movge	r5, #0
   bf266:	2501      	movlt	r5, #1
   bf268:	f7ff fcf0 	bl	bec4c <_Balloc>
   bf26c:	b920      	cbnz	r0, bf278 <__mdiff+0x5c>
   bf26e:	4b2e      	ldr	r3, [pc, #184]	; (bf328 <__mdiff+0x10c>)
   bf270:	4602      	mov	r2, r0
   bf272:	f44f 7110 	mov.w	r1, #576	; 0x240
   bf276:	e7e5      	b.n	bf244 <__mdiff+0x28>
   bf278:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bf27c:	6926      	ldr	r6, [r4, #16]
   bf27e:	60c5      	str	r5, [r0, #12]
   bf280:	f104 0914 	add.w	r9, r4, #20
   bf284:	f108 0514 	add.w	r5, r8, #20
   bf288:	f100 0e14 	add.w	lr, r0, #20
   bf28c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bf290:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bf294:	f108 0210 	add.w	r2, r8, #16
   bf298:	46f2      	mov	sl, lr
   bf29a:	2100      	movs	r1, #0
   bf29c:	f859 3b04 	ldr.w	r3, [r9], #4
   bf2a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bf2a4:	fa1f f883 	uxth.w	r8, r3
   bf2a8:	fa11 f18b 	uxtah	r1, r1, fp
   bf2ac:	0c1b      	lsrs	r3, r3, #16
   bf2ae:	eba1 0808 	sub.w	r8, r1, r8
   bf2b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bf2b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bf2ba:	fa1f f888 	uxth.w	r8, r8
   bf2be:	1419      	asrs	r1, r3, #16
   bf2c0:	454e      	cmp	r6, r9
   bf2c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bf2c6:	f84a 3b04 	str.w	r3, [sl], #4
   bf2ca:	d8e7      	bhi.n	bf29c <__mdiff+0x80>
   bf2cc:	1b33      	subs	r3, r6, r4
   bf2ce:	3b15      	subs	r3, #21
   bf2d0:	f023 0303 	bic.w	r3, r3, #3
   bf2d4:	3304      	adds	r3, #4
   bf2d6:	3415      	adds	r4, #21
   bf2d8:	42a6      	cmp	r6, r4
   bf2da:	bf38      	it	cc
   bf2dc:	2304      	movcc	r3, #4
   bf2de:	441d      	add	r5, r3
   bf2e0:	4473      	add	r3, lr
   bf2e2:	469e      	mov	lr, r3
   bf2e4:	462e      	mov	r6, r5
   bf2e6:	4566      	cmp	r6, ip
   bf2e8:	d30e      	bcc.n	bf308 <__mdiff+0xec>
   bf2ea:	f10c 0203 	add.w	r2, ip, #3
   bf2ee:	1b52      	subs	r2, r2, r5
   bf2f0:	f022 0203 	bic.w	r2, r2, #3
   bf2f4:	3d03      	subs	r5, #3
   bf2f6:	45ac      	cmp	ip, r5
   bf2f8:	bf38      	it	cc
   bf2fa:	2200      	movcc	r2, #0
   bf2fc:	441a      	add	r2, r3
   bf2fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bf302:	b17b      	cbz	r3, bf324 <__mdiff+0x108>
   bf304:	6107      	str	r7, [r0, #16]
   bf306:	e7a3      	b.n	bf250 <__mdiff+0x34>
   bf308:	f856 8b04 	ldr.w	r8, [r6], #4
   bf30c:	fa11 f288 	uxtah	r2, r1, r8
   bf310:	1414      	asrs	r4, r2, #16
   bf312:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bf316:	b292      	uxth	r2, r2
   bf318:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bf31c:	f84e 2b04 	str.w	r2, [lr], #4
   bf320:	1421      	asrs	r1, r4, #16
   bf322:	e7e0      	b.n	bf2e6 <__mdiff+0xca>
   bf324:	3f01      	subs	r7, #1
   bf326:	e7ea      	b.n	bf2fe <__mdiff+0xe2>
   bf328:	000c0f11 	.word	0x000c0f11
   bf32c:	000c0fbc 	.word	0x000c0fbc

000bf330 <__ulp>:
   bf330:	b082      	sub	sp, #8
   bf332:	ed8d 0b00 	vstr	d0, [sp]
   bf336:	9b01      	ldr	r3, [sp, #4]
   bf338:	4912      	ldr	r1, [pc, #72]	; (bf384 <__ulp+0x54>)
   bf33a:	4019      	ands	r1, r3
   bf33c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bf340:	2900      	cmp	r1, #0
   bf342:	dd05      	ble.n	bf350 <__ulp+0x20>
   bf344:	2200      	movs	r2, #0
   bf346:	460b      	mov	r3, r1
   bf348:	ec43 2b10 	vmov	d0, r2, r3
   bf34c:	b002      	add	sp, #8
   bf34e:	4770      	bx	lr
   bf350:	4249      	negs	r1, r1
   bf352:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bf356:	ea4f 5021 	mov.w	r0, r1, asr #20
   bf35a:	f04f 0200 	mov.w	r2, #0
   bf35e:	f04f 0300 	mov.w	r3, #0
   bf362:	da04      	bge.n	bf36e <__ulp+0x3e>
   bf364:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bf368:	fa41 f300 	asr.w	r3, r1, r0
   bf36c:	e7ec      	b.n	bf348 <__ulp+0x18>
   bf36e:	f1a0 0114 	sub.w	r1, r0, #20
   bf372:	291e      	cmp	r1, #30
   bf374:	bfda      	itte	le
   bf376:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bf37a:	fa20 f101 	lsrle.w	r1, r0, r1
   bf37e:	2101      	movgt	r1, #1
   bf380:	460a      	mov	r2, r1
   bf382:	e7e1      	b.n	bf348 <__ulp+0x18>
   bf384:	7ff00000 	.word	0x7ff00000

000bf388 <__b2d>:
   bf388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf38a:	6905      	ldr	r5, [r0, #16]
   bf38c:	f100 0714 	add.w	r7, r0, #20
   bf390:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bf394:	1f2e      	subs	r6, r5, #4
   bf396:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bf39a:	4620      	mov	r0, r4
   bf39c:	f7ff fd48 	bl	bee30 <__hi0bits>
   bf3a0:	f1c0 0320 	rsb	r3, r0, #32
   bf3a4:	280a      	cmp	r0, #10
   bf3a6:	f8df c07c 	ldr.w	ip, [pc, #124]	; bf424 <__b2d+0x9c>
   bf3aa:	600b      	str	r3, [r1, #0]
   bf3ac:	dc14      	bgt.n	bf3d8 <__b2d+0x50>
   bf3ae:	f1c0 0e0b 	rsb	lr, r0, #11
   bf3b2:	fa24 f10e 	lsr.w	r1, r4, lr
   bf3b6:	42b7      	cmp	r7, r6
   bf3b8:	ea41 030c 	orr.w	r3, r1, ip
   bf3bc:	bf34      	ite	cc
   bf3be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bf3c2:	2100      	movcs	r1, #0
   bf3c4:	3015      	adds	r0, #21
   bf3c6:	fa04 f000 	lsl.w	r0, r4, r0
   bf3ca:	fa21 f10e 	lsr.w	r1, r1, lr
   bf3ce:	ea40 0201 	orr.w	r2, r0, r1
   bf3d2:	ec43 2b10 	vmov	d0, r2, r3
   bf3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bf3d8:	42b7      	cmp	r7, r6
   bf3da:	bf3a      	itte	cc
   bf3dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bf3e0:	f1a5 0608 	subcc.w	r6, r5, #8
   bf3e4:	2100      	movcs	r1, #0
   bf3e6:	380b      	subs	r0, #11
   bf3e8:	d017      	beq.n	bf41a <__b2d+0x92>
   bf3ea:	f1c0 0c20 	rsb	ip, r0, #32
   bf3ee:	fa04 f500 	lsl.w	r5, r4, r0
   bf3f2:	42be      	cmp	r6, r7
   bf3f4:	fa21 f40c 	lsr.w	r4, r1, ip
   bf3f8:	ea45 0504 	orr.w	r5, r5, r4
   bf3fc:	bf8c      	ite	hi
   bf3fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bf402:	2400      	movls	r4, #0
   bf404:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bf408:	fa01 f000 	lsl.w	r0, r1, r0
   bf40c:	fa24 f40c 	lsr.w	r4, r4, ip
   bf410:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bf414:	ea40 0204 	orr.w	r2, r0, r4
   bf418:	e7db      	b.n	bf3d2 <__b2d+0x4a>
   bf41a:	ea44 030c 	orr.w	r3, r4, ip
   bf41e:	460a      	mov	r2, r1
   bf420:	e7d7      	b.n	bf3d2 <__b2d+0x4a>
   bf422:	bf00      	nop
   bf424:	3ff00000 	.word	0x3ff00000

000bf428 <__d2b>:
   bf428:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bf42c:	4689      	mov	r9, r1
   bf42e:	2101      	movs	r1, #1
   bf430:	ec57 6b10 	vmov	r6, r7, d0
   bf434:	4690      	mov	r8, r2
   bf436:	f7ff fc09 	bl	bec4c <_Balloc>
   bf43a:	4604      	mov	r4, r0
   bf43c:	b930      	cbnz	r0, bf44c <__d2b+0x24>
   bf43e:	4602      	mov	r2, r0
   bf440:	4b25      	ldr	r3, [pc, #148]	; (bf4d8 <__d2b+0xb0>)
   bf442:	4826      	ldr	r0, [pc, #152]	; (bf4dc <__d2b+0xb4>)
   bf444:	f240 310a 	movw	r1, #778	; 0x30a
   bf448:	f7f9 fc48 	bl	b8cdc <__assert_func>
   bf44c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bf450:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bf454:	bb35      	cbnz	r5, bf4a4 <__d2b+0x7c>
   bf456:	2e00      	cmp	r6, #0
   bf458:	9301      	str	r3, [sp, #4]
   bf45a:	d028      	beq.n	bf4ae <__d2b+0x86>
   bf45c:	4668      	mov	r0, sp
   bf45e:	9600      	str	r6, [sp, #0]
   bf460:	f7ff fd06 	bl	bee70 <__lo0bits>
   bf464:	9900      	ldr	r1, [sp, #0]
   bf466:	b300      	cbz	r0, bf4aa <__d2b+0x82>
   bf468:	9a01      	ldr	r2, [sp, #4]
   bf46a:	f1c0 0320 	rsb	r3, r0, #32
   bf46e:	fa02 f303 	lsl.w	r3, r2, r3
   bf472:	430b      	orrs	r3, r1
   bf474:	40c2      	lsrs	r2, r0
   bf476:	6163      	str	r3, [r4, #20]
   bf478:	9201      	str	r2, [sp, #4]
   bf47a:	9b01      	ldr	r3, [sp, #4]
   bf47c:	61a3      	str	r3, [r4, #24]
   bf47e:	2b00      	cmp	r3, #0
   bf480:	bf14      	ite	ne
   bf482:	2202      	movne	r2, #2
   bf484:	2201      	moveq	r2, #1
   bf486:	6122      	str	r2, [r4, #16]
   bf488:	b1d5      	cbz	r5, bf4c0 <__d2b+0x98>
   bf48a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bf48e:	4405      	add	r5, r0
   bf490:	f8c9 5000 	str.w	r5, [r9]
   bf494:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bf498:	f8c8 0000 	str.w	r0, [r8]
   bf49c:	4620      	mov	r0, r4
   bf49e:	b003      	add	sp, #12
   bf4a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bf4a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bf4a8:	e7d5      	b.n	bf456 <__d2b+0x2e>
   bf4aa:	6161      	str	r1, [r4, #20]
   bf4ac:	e7e5      	b.n	bf47a <__d2b+0x52>
   bf4ae:	a801      	add	r0, sp, #4
   bf4b0:	f7ff fcde 	bl	bee70 <__lo0bits>
   bf4b4:	9b01      	ldr	r3, [sp, #4]
   bf4b6:	6163      	str	r3, [r4, #20]
   bf4b8:	2201      	movs	r2, #1
   bf4ba:	6122      	str	r2, [r4, #16]
   bf4bc:	3020      	adds	r0, #32
   bf4be:	e7e3      	b.n	bf488 <__d2b+0x60>
   bf4c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bf4c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bf4c8:	f8c9 0000 	str.w	r0, [r9]
   bf4cc:	6918      	ldr	r0, [r3, #16]
   bf4ce:	f7ff fcaf 	bl	bee30 <__hi0bits>
   bf4d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bf4d6:	e7df      	b.n	bf498 <__d2b+0x70>
   bf4d8:	000c0f11 	.word	0x000c0f11
   bf4dc:	000c0fbc 	.word	0x000c0fbc

000bf4e0 <__ratio>:
   bf4e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf4e4:	4688      	mov	r8, r1
   bf4e6:	4669      	mov	r1, sp
   bf4e8:	4681      	mov	r9, r0
   bf4ea:	f7ff ff4d 	bl	bf388 <__b2d>
   bf4ee:	a901      	add	r1, sp, #4
   bf4f0:	4640      	mov	r0, r8
   bf4f2:	ec55 4b10 	vmov	r4, r5, d0
   bf4f6:	f7ff ff47 	bl	bf388 <__b2d>
   bf4fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bf4fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bf502:	eba3 0c02 	sub.w	ip, r3, r2
   bf506:	e9dd 3200 	ldrd	r3, r2, [sp]
   bf50a:	1a9b      	subs	r3, r3, r2
   bf50c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bf510:	ec51 0b10 	vmov	r0, r1, d0
   bf514:	2b00      	cmp	r3, #0
   bf516:	bfd6      	itet	le
   bf518:	460a      	movle	r2, r1
   bf51a:	462a      	movgt	r2, r5
   bf51c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bf520:	468b      	mov	fp, r1
   bf522:	462f      	mov	r7, r5
   bf524:	bfd4      	ite	le
   bf526:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bf52a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bf52e:	4620      	mov	r0, r4
   bf530:	ee10 2a10 	vmov	r2, s0
   bf534:	465b      	mov	r3, fp
   bf536:	4639      	mov	r1, r7
   bf538:	f7fd fdc8 	bl	bd0cc <__aeabi_ddiv>
   bf53c:	ec41 0b10 	vmov	d0, r0, r1
   bf540:	b003      	add	sp, #12
   bf542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bf546 <__copybits>:
   bf546:	3901      	subs	r1, #1
   bf548:	b570      	push	{r4, r5, r6, lr}
   bf54a:	1149      	asrs	r1, r1, #5
   bf54c:	6914      	ldr	r4, [r2, #16]
   bf54e:	3101      	adds	r1, #1
   bf550:	f102 0314 	add.w	r3, r2, #20
   bf554:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bf558:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bf55c:	1f05      	subs	r5, r0, #4
   bf55e:	42a3      	cmp	r3, r4
   bf560:	d30c      	bcc.n	bf57c <__copybits+0x36>
   bf562:	1aa3      	subs	r3, r4, r2
   bf564:	3b11      	subs	r3, #17
   bf566:	f023 0303 	bic.w	r3, r3, #3
   bf56a:	3211      	adds	r2, #17
   bf56c:	42a2      	cmp	r2, r4
   bf56e:	bf88      	it	hi
   bf570:	2300      	movhi	r3, #0
   bf572:	4418      	add	r0, r3
   bf574:	2300      	movs	r3, #0
   bf576:	4288      	cmp	r0, r1
   bf578:	d305      	bcc.n	bf586 <__copybits+0x40>
   bf57a:	bd70      	pop	{r4, r5, r6, pc}
   bf57c:	f853 6b04 	ldr.w	r6, [r3], #4
   bf580:	f845 6f04 	str.w	r6, [r5, #4]!
   bf584:	e7eb      	b.n	bf55e <__copybits+0x18>
   bf586:	f840 3b04 	str.w	r3, [r0], #4
   bf58a:	e7f4      	b.n	bf576 <__copybits+0x30>

000bf58c <__any_on>:
   bf58c:	f100 0214 	add.w	r2, r0, #20
   bf590:	6900      	ldr	r0, [r0, #16]
   bf592:	114b      	asrs	r3, r1, #5
   bf594:	4298      	cmp	r0, r3
   bf596:	b510      	push	{r4, lr}
   bf598:	db11      	blt.n	bf5be <__any_on+0x32>
   bf59a:	dd0a      	ble.n	bf5b2 <__any_on+0x26>
   bf59c:	f011 011f 	ands.w	r1, r1, #31
   bf5a0:	d007      	beq.n	bf5b2 <__any_on+0x26>
   bf5a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bf5a6:	fa24 f001 	lsr.w	r0, r4, r1
   bf5aa:	fa00 f101 	lsl.w	r1, r0, r1
   bf5ae:	428c      	cmp	r4, r1
   bf5b0:	d10b      	bne.n	bf5ca <__any_on+0x3e>
   bf5b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bf5b6:	4293      	cmp	r3, r2
   bf5b8:	d803      	bhi.n	bf5c2 <__any_on+0x36>
   bf5ba:	2000      	movs	r0, #0
   bf5bc:	bd10      	pop	{r4, pc}
   bf5be:	4603      	mov	r3, r0
   bf5c0:	e7f7      	b.n	bf5b2 <__any_on+0x26>
   bf5c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bf5c6:	2900      	cmp	r1, #0
   bf5c8:	d0f5      	beq.n	bf5b6 <__any_on+0x2a>
   bf5ca:	2001      	movs	r0, #1
   bf5cc:	e7f6      	b.n	bf5bc <__any_on+0x30>

000bf5ce <_calloc_r>:
   bf5ce:	b513      	push	{r0, r1, r4, lr}
   bf5d0:	434a      	muls	r2, r1
   bf5d2:	4611      	mov	r1, r2
   bf5d4:	9201      	str	r2, [sp, #4]
   bf5d6:	f7f9 fb71 	bl	b8cbc <_malloc_r>
   bf5da:	4604      	mov	r4, r0
   bf5dc:	b118      	cbz	r0, bf5e6 <_calloc_r+0x18>
   bf5de:	9a01      	ldr	r2, [sp, #4]
   bf5e0:	2100      	movs	r1, #0
   bf5e2:	f7fd ffde 	bl	bd5a2 <memset>
   bf5e6:	4620      	mov	r0, r4
   bf5e8:	b002      	add	sp, #8
   bf5ea:	bd10      	pop	{r4, pc}
   bf5ec:	0000      	movs	r0, r0
	...

000bf5f0 <nan>:
   bf5f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; bf5f8 <nan+0x8>
   bf5f4:	4770      	bx	lr
   bf5f6:	bf00      	nop
   bf5f8:	00000000 	.word	0x00000000
   bf5fc:	7ff80000 	.word	0x7ff80000

000bf600 <__ascii_wctomb>:
   bf600:	b149      	cbz	r1, bf616 <__ascii_wctomb+0x16>
   bf602:	2aff      	cmp	r2, #255	; 0xff
   bf604:	bf85      	ittet	hi
   bf606:	238a      	movhi	r3, #138	; 0x8a
   bf608:	6003      	strhi	r3, [r0, #0]
   bf60a:	700a      	strbls	r2, [r1, #0]
   bf60c:	f04f 30ff 	movhi.w	r0, #4294967295
   bf610:	bf98      	it	ls
   bf612:	2001      	movls	r0, #1
   bf614:	4770      	bx	lr
   bf616:	4608      	mov	r0, r1
   bf618:	4770      	bx	lr
	...

000bf61c <__aeabi_d2lz>:
   bf61c:	b538      	push	{r3, r4, r5, lr}
   bf61e:	2200      	movs	r2, #0
   bf620:	2300      	movs	r3, #0
   bf622:	4604      	mov	r4, r0
   bf624:	460d      	mov	r5, r1
   bf626:	f7fd fe99 	bl	bd35c <__aeabi_dcmplt>
   bf62a:	b928      	cbnz	r0, bf638 <__aeabi_d2lz+0x1c>
   bf62c:	4620      	mov	r0, r4
   bf62e:	4629      	mov	r1, r5
   bf630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bf634:	f7fd bf52 	b.w	bd4dc <__aeabi_d2ulz>
   bf638:	4620      	mov	r0, r4
   bf63a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bf63e:	f7fd ff4d 	bl	bd4dc <__aeabi_d2ulz>
   bf642:	4240      	negs	r0, r0
   bf644:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bf648:	bd38      	pop	{r3, r4, r5, pc}
   bf64a:	bf00      	nop

000bf64c <dynalib_user>:
   bf64c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bf65c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bf66c:	7620 7269 7574 6c61 6400 6665 7561 746c      virtual.default
   bf67c:	0020 534d 0042 534c 0042 533c 4950 6553      .MSB.LSB.<SPISe
   bf68c:	7474 6e69 7367 6420 6665 7561 746c 003e     ttings default>.
   bf69c:	533c 4950 6553 7474 6e69 7367 2520 2573     <SPISettings %s%
   bf6ac:	2075 7325 4d20 444f 2545 3e75 6600 6c69     u %s MODE%u>.fil
   bf6bc:	6e65 6d61 0065 6946 656c 2720 7325 2027     ename.File '%s' 
   bf6cc:	6c61 6572 6461 2079 7865 7369 7374 202c     already exists, 
   bf6dc:	6564 656c 6974 676e 6120 646e 6f20 6576     deleting and ove
   bf6ec:	7772 6972 6974 676e 5300 6174 7472 6e69     rwriting.Startin
   bf6fc:	2067 666f 6c66 616f 2064 666f 6620 6c69     g offload of fil
   bf70c:	3a65 2520 0073 6966 656c 6f63 706d 5200     e: %s.filecomp.R
   bf71c:	6165 6863 6465 6520 646e 6f20 2066 6966     eached end of fi
   bf72c:	656c 203a 7325 6600 6c69 6465 6e6f 0065     le: %s.filedone.
   bf73c:	6552 6563 7669 6465 6420 6e6f 2065 6f63     Received done co
   bf74c:	6d6d 6e61 0064 7325 3025 7832 4200 746f     mmand.%s%02x.Bot
   bf75c:	6431 7461 4300 4243 6425 7768 0061 6576     1dat.CCB%dhwa.ve
   bf76c:	7463 726f 3a3a 4d5f 725f 6165 6c6c 636f     ctor::_M_realloc
   bf77c:	695f 736e 7265 0074 6843 6365 736b 6d75     _insert.Checksum
   bf78c:	203a 3025 7832 202c 3025 6433 5300 7274     : %02x, %03d.Str
   bf79c:	6e69 2067 654c 3a6e 2520 2c64 4320 6568     ing Len: %d, Che
   bf7ac:	6b63 7573 3a6d 2520 0064 575b 5241 5d4e     cksum: %d.[WARN]
   bf7bc:	4d20 7365 6173 6567 4320 6568 6b63 7573      Message Checksu
   bf7cc:	206d 6f44 7365 4e20 746f 4d20 7461 6863     m Does Not Match
   bf7dc:	3a21 2520 0073 6157 6e72 6e69 2c67 6320     !: %s.Warning, c
   bf7ec:	6568 6b63 7573 206d 6f64 7365 6e20 746f     hecksum does not
   bf7fc:	6d20 7461 6863 4300 2543 7332 616e 256b      match.CC%2snak%
   bf80c:	7333 6100 6b63 7300 7075 2500 2075 7525     3s.ack.sup.%u %u
   bf81c:	2520 2073 7325 5300 6174 7574 2073 7055      %s %s.Status Up
   bf82c:	6164 6574 0021 2323 2323 2323 2323 2323     date!.##########
   bf83c:	2323 2323 2323 2323 2323 2323 2323 2323     ################
   bf84c:	2300 2023 2020 2020 5453 5441 5355 5520     .##     STATUS U
   bf85c:	4450 5441 2045 2020 2320 0023 2323 2020     PDATE    ##.##  
   bf86c:	2020 2020 4220 746f 2320 203a 3125 2064          Bot #: %1d 
   bf87c:	2020 2020 2320 0023 2323 2020 2020 2020          ##.##      
   bf88c:	6142 7474 2520 203a 3025 6433 2020 2020     Batt %: %03d    
   bf89c:	2320 0023 2323 2020 2020 544c 2045 4220      ##.##    LTE  B
   bf8ac:	454c 2020 4258 6565 2020 2020 2323 2300     LE  XBee    ##.#
   bf8bc:	2023 2020 2020 6425 2020 2020 6425 2020     #     %d    %d  
   bf8cc:	2020 2520 2064 2020 2020 2323 2300 2023        %d     ##.## 
   bf8dc:	4c20 7461 7469 6475 2065 6f4c 676e 7469      Latitude Longit
   bf8ec:	6475 2065 2320 0023 2323 2520 362e 2066     ude  ##.## %.6f 
   bf8fc:	2e25 6636 2320 0023 6f46 6e75 2064 2061     %.6f ##.Found a 
   bf90c:	656e 2077 6177 6574 2072 6f62 2074 4449     new water bot ID
   bf91c:	2500 2075 7525 2520 2066 6625 6e00 6b61     .%u %u %f %f.nak
   bf92c:	7000 7374 5200 7761 7257 7469 2e65 7874     .pts.RawWrite.tx
   bf93c:	0074 544c 0045 4258 6565 4200 756c 7465     t.LTE.XBee.Bluet
   bf94c:	6f6f 6874 4e00 7765 7320 7274 6e69 2067     ooth.New string 
   bf95c:	7266 6d6f 2520 3a73 0020 495b 464e 5d4f     from %s: .[INFO]
   bf96c:	5220 6365 6965 6576 2064 544c 2045 654d      Received LTE Me
   bf97c:	7373 6761 3a65 2520 0073 654e 2077 5442     ssage: %s.New BT
   bf98c:	4320 6d6f 616d 646e 203a 5b00 4e49 4f46      Command: .[INFO
   bf99c:	205d 6552 6563 7669 6465 4220 454c 4d20     ] Received BLE M
   bf9ac:	7365 6173 6567 203a 7325 4e00 7765 5820     essage: %s.New X
   bf9bc:	6542 2065 6f43 6d6d 6e61 3a64 5b00 4e49     Bee Command:.[IN
   bf9cc:	4f46 205d 6552 6563 7669 6465 5820 6542     FO] Received XBe
   bf9dc:	2065 654d 7373 6761 3a65 2520 0073 6f46     e Message: %s.Fo
   bf9ec:	6e75 2064 6f42 2074 3a23 2520 2064 6425     und Bot #: %d %d
   bf9fc:	2520 2064 6425 2520 2064 6425 2520 2064      %d %d %d %d %d 
   bfa0c:	6425 202c 6573 7672 6369 7365 203a 6425     %d, services: %d
   bfa1c:	4600 756f 646e 6e20 7765 6220 746f 203a     .Found new bot: 
   bfa2c:	6425 4300 6e6f 656e 7463 6465 7420 206f     %d.Connected to 
   bfa3c:	6f42 2074 6425 2f00 4500 7272 726f 202c     Bot %d./.Error, 
   bfa4c:	6f63 6c75 2064 6f6e 2074 706f 6e65 7220     could not open r
   bfa5c:	6f6f 2074 6964 6572 7463 726f 2079 6e6f     oot directory on
   bfa6c:	5320 2044 6143 6472 202e 7349 6920 2074      SD Card. Is it 
   bfa7c:	6e69 6573 7472 6465 003f 4343 2542 6464     inserted?.CCB%dd
   bfa8c:	706d 5200 7165 6575 7473 6465 5320 2044     mp.Requested SD 
   bfa9c:	6143 6472 4420 7461 2061 7266 6d6f 4220     Card Data from B
   bfaac:	746f 2520 2064 764f 7265 4220 454c 000a     ot %d Over BLE..
   bfabc:	7543 7272 6e65 6c74 2079 6f63 6e6e 6365     Currently connec
   bfacc:	6574 2064 6f74 4220 746f 2520 2c66 6e20     ted to Bot %f, n
   bfadc:	6565 2064 6f74 6320 6e6f 656e 7463 7420     eed to connect t
   bfaec:	206f 6f42 2074 6425 5300 6375 6563 7373     o Bot %d.Success
   bfafc:	7566 6c6c 2079 6f63 6e6e 6365 6574 2064     fully connected 
   bfb0c:	6f74 4220 746f 2520 0064 7453 7261 6974     to Bot %d.Starti
   bfb1c:	676e 6620 6c69 2065 7274 6e61 6673 7265     ng file transfer
   bfb2c:	6620 6f72 206d 6f42 2074 6425 4600 6e69      from Bot %d.Fin
   bfb3c:	7369 6568 2064 7274 6e61 6673 7265 6972     ished transferri
   bfb4c:	676e 6620 6c69 2065 7266 6d6f 4220 746f     ng file from Bot
   bfb5c:	2520 0064 4343 4241 7073 4263 6425 4300      %d.CCABspcB%d.C
   bfb6c:	4143 7342 6370 424e 4300 4243 6d31 7274     CABspcNB.CCB1mtr
   bfb7c:	3025 6433 3025 6433 4d00 746f 726f 5320     %03d%03d.Motor S
   bfb8c:	6570 6465 203a 3025 6433 6200 3234 3630     peed: %03d.b4206
   bfb9c:	3139 2d30 6364 6234 352d 3437 2d33 3863     910-dc4b-5743-c8
   bfbac:	3162 392d 6432 6530 3537 3831 6232 0030     b1-92d0e75182b0.
   bfbbc:	3462 3032 3936 3231 642d 3463 2d62 3735     b4206912-dc4b-57
   bfbcc:	3334 632d 6238 2d31 3239 3064 3765 3135     43-c8b1-92d0e751
   bfbdc:	3238 3062 6200 3234 3630 3139 2d33 6364     82b0.b4206913-dc
   bfbec:	6234 352d 3437 2d33 3863 3162 392d 6432     4b-5743-c8b1-92d
   bfbfc:	6530 3537 3831 6232 0030 3462 3032 3936     0e75182b0.b42069
   bfc0c:	3431 642d 3463 2d62 3735 3334 632d 6238     14-dc4b-5743-c8b
   bfc1c:	2d31 3239 3064 3765 3135 3238 3062 5300     1-92d0e75182b0.S
   bfc2c:	6163 6e6e 6e69 2067 4200 746f 3a73 2520     canning .Bots: %
   bfc3c:	0064 7241 6172 2079 6973 657a 203a 6425     d.Array size: %d
   bfc4c:	4600 756f 646e 6120 6c20 636f 6c61 6220     .Found a local b
   bfc5c:	746f 4300 6e6f 656e 7463 6e69 0067 6f42     ot.Connecting.Bo
   bfc6c:	3a74 2520 0064 4343 4241 7768 0064 3025     t: %d.CCABhwd.%0
   bfc7c:	6432 3025 6432 3025 6434 3025 6432 3025     2d%02d%04d%02d%0
   bfc8c:	6432 3025 6432 5700 7461 7265 6f42 0074     2d%02d.WaterBot.
   bfc9c:	4c5f 474f 742e 7478 4500 7272 726f 203a     _LOG.txt.Error: 
   bfcac:	6f63 6c75 2064 6f6e 2074 6f63 6e6e 6365     could not connec
   bfcbc:	2074 6f74 5320 2044 6163 6472 0021 5320     t to SD card!. S
   bfccc:	6174 7472 6e69 2067 0000 0000               tarting ....

000bfcd8 <_ZTVN8particle11SPISettingsE>:
	...
   bfce0:	4245 000b 40cd 000b 40f7 000b               EB...@...@..

000bfcec <_ZTV5Timer>:
	...
   bfcf4:	42c9 000b 431d 000b 415d 000b               .B...C..]A..

000bfd00 <_ZTV4File>:
	...
   bfd08:	40f5 000b 4105 000b 4145 000b 413f 000b     .@...A..EA..?A..
   bfd18:	40cf 000b 411f 000b 4119 000b 4113 000b     .@...A...A...A..

000bfd28 <_ZL4font>:
   bfd28:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   bfd38:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   bfd48:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   bfd58:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   bfd68:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   bfd78:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   bfd88:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   bfd98:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   bfda8:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   bfdb8:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   bfdc8:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   bfdd8:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   bfde8:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   bfdf8:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   bfe08:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   bfe18:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   bfe28:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   bfe38:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   bfe48:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   bfe58:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   bfe68:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   bfe78:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   bfe88:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   bfe98:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   bfea8:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   bfeb8:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   bfec8:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   bfed8:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   bfee8:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   bfef8:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   bff08:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   bff18:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   bff28:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   bff38:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   bff48:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   bff58:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   bff68:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   bff78:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   bff88:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   bff98:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   bffa8:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   bffb8:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   bffc8:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   bffd8:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   bffe8:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   bfff8:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   c0008:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   c0018:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   c0028:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   c0038:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   c0048:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   c0058:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   c0068:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   c0078:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   c0088:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   c0098:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   c00a8:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   c00b8:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   c00c8:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   c00d8:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   c00e8:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   c00f8:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   c0108:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   c0118:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   c0128:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   c0138:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   c0148:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   c0158:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   c0168:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   c0178:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   c0188:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   c0198:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   c01a8:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   c01b8:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   c01c8:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   c01d8:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   c01e8:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   c01f8:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   c0208:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   c0218:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000c0228 <_ZTV12Adafruit_GFX>:
	...
   c0238:	62fd 000b b7b5 000b 40a5 000b 59eb 000b     .b.......@...Y..
   c0248:	59ed 000b 5a1f 000b 59fb 000b 5a0d 000b     .Y...Z...Y...Z..
   c0258:	592d 000b 59eb 000b 5c17 000b 5c15 000b     -Y...Y...\...\..
   c0268:	5a37 000b 5a75 000b 5aaf 000b 5af5 000b     7Z..uZ...Z...Z..
   c0278:	5b11 000b 5b95 000b                         .[...[..

000c0280 <_ZTV16OledWingAdafruit>:
	...
   c0288:	640d 000b 642d 000b 62fd 000b b7b5 000b     .d..-d...b......
   c0298:	7c55 000b 59eb 000b 59ed 000b 5a1f 000b     U|...Y...Y...Z..
   c02a8:	59fb 000b 5a0d 000b 592d 000b 59eb 000b     .Y...Z..-Y...Y..
   c02b8:	5c17 000b 7df3 000b 839b 000b 834d 000b     .\...}......M...
   c02c8:	5aaf 000b 5af5 000b 5b11 000b 5b95 000b     .Z...Z...[...[..

000c02d8 <_ZL12splash1_data>:
   c02d8:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   c02e8:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   c02f8:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   c0308:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   c0318:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   c0328:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   c0340:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   c0350:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   c0360:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   c0370:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   c0380:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   c0390:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   c03a0:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   c03b0:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   c03c0:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   c03d0:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   c03e0:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   c03f0:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   c0400:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   c0410:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   c0420:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   c0430:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   c0440:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   c0450:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   c0468:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   c0480:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   c0490:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   c04a0:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   c04b0:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   c04c0:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   c04d0:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   c04e0:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   c04f0:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   c0500:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   c0510:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   c0520:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   c0530:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   c0540:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   c0550:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   c0560:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   c0570:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   c0580:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   c0590:	fdff 5b6b 6adb c0fd                         ..k[.j..

000c0598 <_ZL12splash2_data>:
   c0598:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   c05a8:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   c05b8:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   c05d4:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   c05e4:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   c05f4:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   c0604:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   c0614:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   c0624:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   c0634:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   c0644:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   c0654:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   c0664:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   c0674:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   c0684:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   c0694:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   c06a4:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   c06b4:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   c06c4:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   c06d4:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   c06e4:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   c06f4:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   c0704:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   c0714:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   c072c:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   c073c:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   c074c:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   c075c:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   c076c:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000c0778 <_ZTV16Adafruit_SSD1306>:
	...
   c0780:	7c29 000b 7c41 000b 62fd 000b b7b5 000b     )|..A|...b......
   c0790:	7c55 000b 59eb 000b 59ed 000b 5a1f 000b     U|...Y...Y...Z..
   c07a0:	59fb 000b 5a0d 000b 592d 000b 59eb 000b     .Y...Z..-Y...Y..
   c07b0:	5c17 000b 7df3 000b 839b 000b 834d 000b     .\...}......M...
   c07c0:	5aaf 000b 5af5 000b 5b11 000b 5b95 000b     .Z...Z...[...[..

000c07d0 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   c07d0:	8000 e0c0 f8f0 fefc                         ........

000c07d8 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   c07d8:	0100 0703 1f0f 7f3f                         ......?.

000c07e0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   c07e0:	d5ae a880                                   ....

000c07e4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   c07e4:	00d3 8d40                                   ..@.

000c07e8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   c07e8:	0020 c8a1                                    ...

000c07ec <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   c07ec:	40db a6a4 af2e                              .@....

000c07f2 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   c07f2:	02da 8f81                                   ....

000c07f6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   c07f6:	12da                                         ...

000c07f9 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   c07f9:	02da                                         ...

000c07fc <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   c07fc:	0022 21ff 0000 0000                         "..!....

000c0804 <_ZTVN5spark13EthernetClassE>:
	...
   c080c:	8d6b 000b 8d61 000b 8d57 000b 8d4d 000b     k...a...W...M...
   c081c:	8d41 000b 8d35 000b c58d 000b c595 000b     A...5...........
   c082c:	8d29 000b 8d21 000b 8d17 000b 8d0d 000b     )...!...........
   c083c:	c5c5 000b                                   ....

000c0840 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c0840:	0800 1810 2820 3830 7341 6573 7472 6f69     .... (08Assertio
   c0850:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   c0860:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   c0870:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   c0880:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   c0890:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   c08a0:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   c08b0:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   c08c0:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   c08d0:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   c08e0:	6146 6c69 6465 7420 206f 6c61 6f6c 6163     Failed to alloca
   c08f0:	6574 6d20 6d65 726f 2179 4600 6961 656c     te memory!.Faile
   c0900:	2064 6f74 6120 7070 6e65 2064 6570 7265     d to append peer
   c0910:	4320 6e65 7274 6c61 6420 7665 6369 2e65      Central device.
   c0920:	4300 6e6f 656e 7463 6465 6220 2079 6543     .Connected by Ce
   c0930:	746e 6172 206c 6564 6976 6563 002e 6944     ntral device..Di
   c0940:	6373 6e6f 656e 7463 6465 6220 2079 6572     sconnected by re
   c0950:	6f6d 6574 6420 7665 6369 2e65 4600 6961     mote device..Fai
   c0960:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   c0970:	6373 766f 7265 6465 7320 7265 6976 6563     scovered service
   c0980:	002e 7453 7261 2074 6964 6373 766f 7265     ..Start discover
   c0990:	6e69 2067 6863 7261 6361 6574 6972 7473     ing characterist
   c09a0:	6369 2073 666f 7320 7265 6976 6563 203a     ics of service: 
   c09b0:	7325 002e 6143 6e6e 746f 6120 6464 6e20     %s..Cannot add n
   c09c0:	7765 7020 6565 2072 6564 6976 6563 002e     ew peer device..
   c09d0:	654e 2077 6570 6972 6870 7265 6c61 6920     New peripheral i
   c09e0:	2073 6f63 6e6e 6365 6574 2e64 4300 6168     s connected..Cha
   c09f0:	6172 7463 7265 7369 6974 2063 6964 6373     racteristic disc
   c0a00:	766f 7265 6465 002e 6944 6373 766f 7265     overed..Discover
   c0a10:	6465 6320 6168 6172 7463 7265 7369 6974     ed characteristi
   c0a20:	2763 2073 6168 646e 656c 6920 2073 6e69     c's handle is in
   c0a30:	6176 696c 2e64 4600 6961 656c 2064 6f74     valid..Failed to
   c0a40:	6120 7070 6e65 2064 6964 6373 766f 7265      append discover
   c0a50:	6465 6320 6168 6172 7463 7265 7369 6974     ed characteristi
   c0a60:	2e63 0000                                   c...

000c0a64 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c0a6c:	9147 000b 91a9 000b 931f 000b 91d3 000b     G...............
   c0a7c:	9149 000b                                   I...

000c0a80 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c0a88:	9143 000b 91b7 000b 9145 000b 91d9 000b     C.......E.......
   c0a98:	9169 000b                                   i...

000c0a9c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c0aa4:	9141 000b 91c5 000b 9e71 000b 91df 000b     A.......q.......
   c0ab4:	9189 000b                                   ....

000c0ab8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c0ac4:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
   c0ad4:	0000 7061 0070 5925 252d 2d6d 6425 2554     ..app.%Y-%m-%dT%
   c0ae4:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   c0af4:	0065 0000                                   e...

000c0af8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c0b00:	bc05 000b bc0b 000b bc49 000b bc19 000b     ........I.......
   c0b10:	bc07 000b                                   ....

000c0b14 <_ZTV9IPAddress>:
	...
   c0b1c:	c145 000b c135 000b c137 000b               E...5...7...

000c0b28 <_ZTV9USBSerial>:
	...
   c0b30:	c22b 000b c293 000b c269 000b b7b5 000b     +.......i.......
   c0b40:	c25b 000b c22d 000b c23d 000b c28d 000b     [...-...=.......
   c0b50:	c24d 000b c225 000b                         M...%...

000c0b58 <_ZTVN5spark13CellularClassE>:
	...
   c0b60:	c38b 000b c381 000b c377 000b c32d 000b     ........w...-...
   c0b70:	c36b 000b c35f 000b c58d 000b c595 000b     k..._...........
   c0b80:	c353 000b c34b 000b c341 000b c337 000b     S...K...A...7...
   c0b90:	c5c5 000b                                   ....

000c0b94 <_ZTV11USARTSerial>:
	...
   c0b9c:	c3c5 000b c431 000b c409 000b b7b5 000b     ....1...........
   c0bac:	c3d9 000b c3f5 000b c3e7 000b c403 000b     ................
   c0bbc:	c3c7 000b c3cb 000b                         ........

000c0bc4 <_ZTV7TwoWire>:
	...
   c0bcc:	c49f 000b c4e9 000b c4c1 000b c4a1 000b     ................
   c0bdc:	c4c9 000b c4d1 000b c4d9 000b c4e1 000b     ................

000c0bec <_ZTVN5spark12NetworkClassE>:
	...
   c0bf4:	c54d 000b c557 000b c561 000b c56b 000b     M...W...a...k...
   c0c04:	c575 000b c581 000b c58d 000b c595 000b     u...............
   c0c14:	c59d 000b c5a9 000b c5b1 000b c5bb 000b     ................
   c0c24:	c5c5 000b                                   ....

000c0c28 <_ZSt7nothrow>:
	...

000c0c29 <_ZTSSt19_Sp_make_shared_tag>:
   c0c29:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c0c39:	6572 5f64 6174 0067 0000                     red_tag....

000c0c44 <_ZTISt19_Sp_make_shared_tag>:
   c0c44:	0c84 000c 0c29 000c                         ....)...

000c0c4c <_ZTIN10__cxxabiv117__class_type_infoE>:
   c0c4c:	0ce4 000c 0c58 000c 0d08 000c               ....X.......

000c0c58 <_ZTSN10__cxxabiv117__class_type_infoE>:
   c0c58:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c0c68:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c0c78:	0045 0000                                   E...

000c0c7c <_ZTVN10__cxxabiv117__class_type_infoE>:
   c0c7c:	0000 0000 0c4c 000c c929 000b c93d 000b     ....L...)...=...
   c0c8c:	cad1 000b cad1 000b c9a7 000b c8e9 000b     ................
   c0c9c:	c98f 000b c951 000b c91b 000b               ....Q.......

000c0ca8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c0ca8:	0ce4 000c 0cb4 000c 0c4c 000c               ........L...

000c0cb4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c0cb4:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c0cc4:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c0cd4:	666e 456f 0000 0000                         nfoE....

000c0cdc <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c0cdc:	0000 0000 0ca8 000c c9d1 000b c9e5 000b     ................
   c0cec:	cad1 000b cad1 000b c9a7 000b c8e9 000b     ................
   c0cfc:	caa5 000b ca31 000b c9f9 000b               ....1.......

000c0d08 <_ZTISt9type_info>:
   c0d08:	0c84 000c 0d10 000c                         ........

000c0d10 <_ZTSSt9type_info>:
   c0d10:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   c0d20:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   c0d30:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   c0d40:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   c0d50:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   c0d60:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   c0d70:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   c0d80:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   c0d90:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   c0da0:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   c0db0:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000c0dc0 <fpi.1>:
   c0dc0:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c0dd0:	0000 0000                                   ....

000c0dd4 <fpinan.0>:
   c0dd4:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   c0de4:	0000 0000                                   ....

000c0de8 <tinytens>:
   c0de8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c0df8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c0e08:	6f43 64ac 0628 1168                         Co.d(.h.

000c0e10 <_ctype_>:
   c0e10:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c0e20:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c0e30:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c0e40:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c0e50:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c0e60:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c0e70:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c0e80:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c0e90:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c0f10:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c0f20:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   c0f30:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   c0f40:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   c0f50:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   c0f60:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   c0f70:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   c0f80:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   c0f90:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   c0fa0:	6874 7865 632e 0000                         thex.c..

000c0fa8 <_C_numeric_locale>:
   c0fa8:	0a61 000c fabb 000b db10 2003 0043 4f50     a.......... C.PO
   c0fb8:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   c0fc8:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   c0fd8:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   c0fe8:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   c0ff8:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   c1008:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   c1018:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   c1028:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   c1038:	0063 0000 0000 0000                         c.......

000c1040 <__mprec_bigtens>:
   c1040:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c1050:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c1060:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c1068 <__mprec_tens>:
   c1068:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c1078:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c1088:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c1098:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c10a8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c10b8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c10c8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c10d8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c10e8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c10f8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c1108:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c1118:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c1128:	9db4 79d9 7843 44ea                         ...yCx.D

000c1130 <p05.0>:
   c1130:	0005 0000 0019 0000 007d 0000               ........}...

000c113c <link_const_variable_data_end>:
   c113c:	000b535d 	.word	0x000b535d
   c1140:	000b8d75 	.word	0x000b8d75
   c1144:	000b8f15 	.word	0x000b8f15
   c1148:	000bb7a5 	.word	0x000bb7a5
   c114c:	000bb915 	.word	0x000bb915
   c1150:	000bbaa5 	.word	0x000bbaa5
   c1154:	000bbac1 	.word	0x000bbac1
   c1158:	000bc395 	.word	0x000bc395
   c115c:	000bc69d 	.word	0x000bc69d
