
/Users/matthewpanizza/Downloads/WaterNet23/WaterNet23CCHub/target/4.0.0/bsom/WaterNet23CCHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000e4f0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c2510  000c2510  00012510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c2534  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  2003da90  000c2538  0002da90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000b80  2003dc70  2003dc70  0003dc70  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c2718  000c2718  00032718  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c2740  000c2740  00032740  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001e1914  00000000  00000000  00032744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001fa72  00000000  00000000  00214058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0005ab7b  00000000  00000000  00233aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003bc8  00000000  00000000  0028e645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000e940  00000000  00000000  0029220d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004fc7e  00000000  00000000  002a0b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00072b4c  00000000  00000000  002f07cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00151cef  00000000  00000000  00363317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000be90  00000000  00000000  004b5008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
   b4026:	b508      	push	{r3, lr}
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00a fcaa 	bl	be98a <memcpy>
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00a fccc 	bl	be9da <memset>
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003da90 	.word	0x2003da90
   b404c:	000c2538 	.word	0x000c2538
   b4050:	2003dc70 	.word	0x2003dc70
   b4054:	2003dc70 	.word	0x2003dc70
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
   b405c:	b570      	push	{r4, r5, r6, lr}
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
   b4062:	f009 fc97 	bl	bd994 <module_user_init_hook>
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
   b4070:	bd70      	pop	{r4, r5, r6, pc}
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c24ec 	.word	0x000c24ec
   b4080:	000c2510 	.word	0x000c2510

000b4084 <module_user_setup>:
   b4084:	f002 bb84 	b.w	b6790 <setup>

000b4088 <module_user_loop>:
   b4088:	b508      	push	{r3, lr}
   b408a:	f002 ff2d 	bl	b6ee8 <loop>
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4092:	f009 bc37 	b.w	bd904 <_post_loop>

000b4096 <_Znwj>:
   b4096:	f005 bf3f 	b.w	b9f18 <malloc>

000b409a <_Znaj>:
   b409a:	f005 bf3d 	b.w	b9f18 <malloc>

000b409e <_ZdlPvj>:
   b409e:	f005 bf43 	b.w	b9f28 <free>
	...

000b40a4 <__cxa_pure_virtual>:
   b40a4:	b508      	push	{r3, lr}
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f005 fe50 	bl	b9d50 <panic_>
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b9a11 	.word	0x000b9a11
   b40b8:	000c0b10 	.word	0x000c0b10

000b40bc <__cxa_guard_acquire>:
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40cc:	4770      	bx	lr

000b40ce <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40ce:	7c03      	ldrb	r3, [r0, #16]
   b40d0:	f013 0308 	ands.w	r3, r3, #8
   b40d4:	bf1e      	ittt	ne
   b40d6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40d8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40da:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40dc:	2b00      	cmp	r3, #0
  }
   b40de:	bfac      	ite	ge
   b40e0:	4618      	movge	r0, r3
   b40e2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40e6:	4770      	bx	lr

000b40e8 <_Z12actionTimer5v>:
        Serial1.println(outStr);
    }
}

void actionTimer5(){
    postStatus = true;
   b40e8:	4b06      	ldr	r3, [pc, #24]	; (b4104 <_Z12actionTimer5v+0x1c>)
   b40ea:	2201      	movs	r2, #1
   b40ec:	701a      	strb	r2, [r3, #0]
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
   b40ee:	4b06      	ldr	r3, [pc, #24]	; (b4108 <_Z12actionTimer5v+0x20>)
   b40f0:	e9d3 3100 	ldrd	r3, r1, [r3]
    for(WaterBot &w: WaterBots){
   b40f4:	4299      	cmp	r1, r3
   b40f6:	d004      	beq.n	b4102 <_Z12actionTimer5v+0x1a>
        w.timeoutCount++;
   b40f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   b40fa:	3201      	adds	r2, #1
   b40fc:	639a      	str	r2, [r3, #56]	; 0x38
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b40fe:	333c      	adds	r3, #60	; 0x3c
      {
	++_M_current;
	return *this;
   b4100:	e7f8      	b.n	b40f4 <_Z12actionTimer5v+0xc>
    }
    //if(!BLE.connected)
}
   b4102:	4770      	bx	lr
   b4104:	2003dee0 	.word	0x2003dee0
   b4108:	2003dcc8 	.word	0x2003dcc8

000b410c <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b410c:	4770      	bx	lr

000b410e <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b410e:	b510      	push	{r4, lr}
  }
   b4110:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4112:	4604      	mov	r4, r0
  }
   b4114:	f7ff ffc3 	bl	b409e <_ZdlPvj>
   b4118:	4620      	mov	r0, r4
   b411a:	bd10      	pop	{r4, pc}

000b411c <_ZN4FileD0Ev>:
   b411c:	b510      	push	{r4, lr}
   b411e:	2134      	movs	r1, #52	; 0x34
   b4120:	4604      	mov	r4, r0
   b4122:	f7ff ffbc 	bl	b409e <_ZdlPvj>
   b4126:	4620      	mov	r0, r4
   b4128:	bd10      	pop	{r4, pc}

000b412a <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b412a:	3010      	adds	r0, #16
   b412c:	f003 b966 	b.w	b73fc <_ZN7FatFile4syncEv>

000b4130 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b4130:	3010      	adds	r0, #16
   b4132:	f003 b884 	b.w	b723e <_ZN7FatFile4peekEv>

000b4136 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b4136:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b4138:	2201      	movs	r2, #1
   b413a:	f10d 0107 	add.w	r1, sp, #7
   b413e:	3010      	adds	r0, #16
   b4140:	f002 ffcf 	bl	b70e2 <_ZN7FatFile4readEPvj>
   b4144:	2801      	cmp	r0, #1
   b4146:	bf0c      	ite	eq
   b4148:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b414c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   b4150:	b003      	add	sp, #12
   b4152:	f85d fb04 	ldr.w	pc, [sp], #4

000b4156 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4156:	3010      	adds	r0, #16
   b4158:	f003 b9ea 	b.w	b7530 <_ZN7FatFile5writeEPKvj>

000b415c <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b415c:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b415e:	2201      	movs	r2, #1
   b4160:	f88d 1007 	strb.w	r1, [sp, #7]
   b4164:	3010      	adds	r0, #16
   b4166:	f10d 0107 	add.w	r1, sp, #7
   b416a:	f003 f9e1 	bl	b7530 <_ZN7FatFile5writeEPKvj>
  }
   b416e:	b003      	add	sp, #12
   b4170:	f85d fb04 	ldr.w	pc, [sp], #4

000b4174 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4174:	6943      	ldr	r3, [r0, #20]
   b4176:	b113      	cbz	r3, b417e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4178:	6983      	ldr	r3, [r0, #24]
   b417a:	300c      	adds	r0, #12
   b417c:	4718      	bx	r3
            callback();
        }
    }
   b417e:	4770      	bx	lr

000b4180 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4180:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4182:	2100      	movs	r1, #0
   b4184:	4604      	mov	r4, r0
   b4186:	4608      	mov	r0, r1
   b4188:	f005 fbf2 	bl	b9970 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b418c:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b418e:	4620      	mov	r0, r4
   b4190:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4192:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4194:	f005 fc04 	bl	b99a0 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4198:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b419a:	b10c      	cbz	r4, b41a0 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b419c:	2301      	movs	r3, #1
   b419e:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b41a0:	2100      	movs	r1, #0
   b41a2:	2001      	movs	r0, #1
   b41a4:	f005 fbe4 	bl	b9970 <os_thread_scheduling>
            }
        }
        if (t) {
   b41a8:	b12c      	cbz	r4, b41b6 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b41aa:	6823      	ldr	r3, [r4, #0]
   b41ac:	4620      	mov	r0, r4
   b41ae:	689b      	ldr	r3, [r3, #8]
   b41b0:	4798      	blx	r3
            t->running = false;
   b41b2:	2300      	movs	r3, #0
   b41b4:	7123      	strb	r3, [r4, #4]
        }
    }
   b41b6:	b002      	add	sp, #8
   b41b8:	bd10      	pop	{r4, pc}
	...

000b41bc <_Z8jHandlerv>:
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
    SelectedItem = &MenuItems.at(menuItem);
    Serial.println("Down trigger");
}

void jHandler(){
   b41bc:	b510      	push	{r4, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b41be:	4c09      	ldr	r4, [pc, #36]	; (b41e4 <_Z8jHandlerv+0x28>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41c0:	f005 fc36 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
   b41c4:	6823      	ldr	r3, [r4, #0]
   b41c6:	1ac0      	subs	r0, r0, r3
   b41c8:	2895      	cmp	r0, #149	; 0x95
   b41ca:	d909      	bls.n	b41e0 <_Z8jHandlerv+0x24>
   b41cc:	f005 fc30 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b41d0:	6020      	str	r0, [r4, #0]
    Serial.println("Joystick trigger");
   b41d2:	f009 fb4f 	bl	bd874 <_Z16_fetch_usbserialv>
   b41d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("Joystick trigger");
   b41da:	4903      	ldr	r1, [pc, #12]	; (b41e8 <_Z8jHandlerv+0x2c>)
   b41dc:	f008 bf55 	b.w	bd08a <_ZN5Print7printlnEPKc>
   b41e0:	bd10      	pop	{r4, pc}
   b41e2:	bf00      	nop
   b41e4:	2003dd6c 	.word	0x2003dd6c
   b41e8:	000c0b25 	.word	0x000c0b25

000b41ec <_Z13actionTimer60v>:
void actionTimer60(){
   b41ec:	b510      	push	{r4, lr}
      : _M_current(__i) { }
   b41ee:	4b0c      	ldr	r3, [pc, #48]	; (b4220 <_Z13actionTimer60v+0x34>)
   b41f0:	e9d3 3100 	ldrd	r3, r1, [r3]
    bool reqLTEStatus = false;
   b41f4:	2200      	movs	r2, #0
            w.timeoutCount = 0;            
   b41f6:	4610      	mov	r0, r2
    for(WaterBot &w: WaterBots){
   b41f8:	4299      	cmp	r1, r3
   b41fa:	d006      	beq.n	b420a <_Z13actionTimer60v+0x1e>
        if(w.timeoutCount > XBEE_BLE_MAX_TIMEOUT){
   b41fc:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   b41fe:	2c24      	cmp	r4, #36	; 0x24
            w.timeoutCount = 0;            
   b4200:	bf84      	itt	hi
   b4202:	6398      	strhi	r0, [r3, #56]	; 0x38
            reqLTEStatus = true;
   b4204:	2201      	movhi	r2, #1
      operator++() _GLIBCXX_NOEXCEPT
   b4206:	333c      	adds	r3, #60	; 0x3c
	return *this;
   b4208:	e7f6      	b.n	b41f8 <_Z13actionTimer60v+0xc>
    if(reqLTEStatus && LTEStatuses < MAX_LTE_STATUSES){
   b420a:	b142      	cbz	r2, b421e <_Z13actionTimer60v+0x32>
   b420c:	4a05      	ldr	r2, [pc, #20]	; (b4224 <_Z13actionTimer60v+0x38>)
   b420e:	7813      	ldrb	r3, [r2, #0]
   b4210:	2b18      	cmp	r3, #24
   b4212:	d804      	bhi.n	b421e <_Z13actionTimer60v+0x32>
        LTEStatuses++;
   b4214:	3301      	adds	r3, #1
   b4216:	7013      	strb	r3, [r2, #0]
        statusTimeout = true;
   b4218:	4b03      	ldr	r3, [pc, #12]	; (b4228 <_Z13actionTimer60v+0x3c>)
   b421a:	2201      	movs	r2, #1
   b421c:	701a      	strb	r2, [r3, #0]
}
   b421e:	bd10      	pop	{r4, pc}
   b4220:	2003dcc8 	.word	0x2003dcc8
   b4224:	2003dc90 	.word	0x2003dc90
   b4228:	2003e639 	.word	0x2003e639

000b422c <_Z10entHandlerv>:
void entHandler(){
   b422c:	b538      	push	{r3, r4, r5, lr}
    redrawMenu = true;  
   b422e:	4b14      	ldr	r3, [pc, #80]	; (b4280 <_Z10entHandlerv+0x54>)
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4230:	4d14      	ldr	r5, [pc, #80]	; (b4284 <_Z10entHandlerv+0x58>)
    redrawMenu = true;  
   b4232:	2401      	movs	r4, #1
   b4234:	701c      	strb	r4, [r3, #0]
   b4236:	f005 fbfb 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b423a:	682b      	ldr	r3, [r5, #0]
   b423c:	1ac0      	subs	r0, r0, r3
   b423e:	2895      	cmp	r0, #149	; 0x95
   b4240:	d90e      	bls.n	b4260 <_Z10entHandlerv+0x34>
    Serial.println("Enter trigger");
   b4242:	f009 fb17 	bl	bd874 <_Z16_fetch_usbserialv>
   b4246:	4910      	ldr	r1, [pc, #64]	; (b4288 <_Z10entHandlerv+0x5c>)
   b4248:	f008 ff1f 	bl	bd08a <_ZN5Print7printlnEPKc>
   b424c:	f005 fbf0 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4250:	4a0e      	ldr	r2, [pc, #56]	; (b428c <_Z10entHandlerv+0x60>)
    debounceTime = millis();
   b4252:	6028      	str	r0, [r5, #0]
    if(PopUps.size() != 0){
   b4254:	e9d2 1300 	ldrd	r1, r3, [r2]
   b4258:	428b      	cmp	r3, r1
   b425a:	d002      	beq.n	b4262 <_Z10entHandlerv+0x36>
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_nonempty();
	--this->_M_impl._M_finish;
   b425c:	3b49      	subs	r3, #73	; 0x49
   b425e:	6053      	str	r3, [r2, #4]
}
   b4260:	bd38      	pop	{r3, r4, r5, pc}
    selectingBots = !selectingBots;
   b4262:	4a0b      	ldr	r2, [pc, #44]	; (b4290 <_Z10entHandlerv+0x64>)
   b4264:	7813      	ldrb	r3, [r2, #0]
   b4266:	f083 0301 	eor.w	r3, r3, #1
   b426a:	7013      	strb	r3, [r2, #0]
    if(modifiedValue){
   b426c:	4b09      	ldr	r3, [pc, #36]	; (b4294 <_Z10entHandlerv+0x68>)
   b426e:	781a      	ldrb	r2, [r3, #0]
   b4270:	2a00      	cmp	r2, #0
   b4272:	d0f5      	beq.n	b4260 <_Z10entHandlerv+0x34>
        updateControl = true;
   b4274:	4a08      	ldr	r2, [pc, #32]	; (b4298 <_Z10entHandlerv+0x6c>)
   b4276:	7014      	strb	r4, [r2, #0]
        modifiedValue = false;
   b4278:	2200      	movs	r2, #0
   b427a:	701a      	strb	r2, [r3, #0]
   b427c:	e7f0      	b.n	b4260 <_Z10entHandlerv+0x34>
   b427e:	bf00      	nop
   b4280:	2003da90 	.word	0x2003da90
   b4284:	2003dd6c 	.word	0x2003dd6c
   b4288:	000c0b36 	.word	0x000c0b36
   b428c:	2003dcac 	.word	0x2003dcac
   b4290:	2003da91 	.word	0x2003da91
   b4294:	2003de13 	.word	0x2003de13
   b4298:	2003e63a 	.word	0x2003e63a

000b429c <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b429c:	2a01      	cmp	r2, #1
   b429e:	d102      	bne.n	b42a6 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b42a0:	6001      	str	r1, [r0, #0]
      }
   b42a2:	2000      	movs	r0, #0
   b42a4:	4770      	bx	lr
	  switch (__op)
   b42a6:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b42a8:	bf04      	itt	eq
   b42aa:	680b      	ldreq	r3, [r1, #0]
   b42ac:	6003      	streq	r3, [r0, #0]
	      break;
   b42ae:	e7f8      	b.n	b42a2 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b42b0 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b42b0:	6803      	ldr	r3, [r0, #0]
   b42b2:	4718      	bx	r3

000b42b4 <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b42b6:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42b8:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42ba:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42bc:	b130      	cbz	r0, b42cc <_ZN5Timer5startEj.isra.0+0x18>
   b42be:	2300      	movs	r3, #0
   b42c0:	e9cd 3300 	strd	r3, r3, [sp]
   b42c4:	461a      	mov	r2, r3
   b42c6:	2102      	movs	r1, #2
   b42c8:	f005 fb72 	bl	b99b0 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b42cc:	68a0      	ldr	r0, [r4, #8]
   b42ce:	b130      	cbz	r0, b42de <_ZN5Timer5startEj.isra.0+0x2a>
   b42d0:	2300      	movs	r3, #0
   b42d2:	e9cd 5300 	strd	r5, r3, [sp]
   b42d6:	461a      	mov	r2, r3
   b42d8:	4619      	mov	r1, r3
   b42da:	f005 fb69 	bl	b99b0 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42de:	b003      	add	sp, #12
   b42e0:	bd30      	pop	{r4, r5, pc}

000b42e2 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42e2:	b40e      	push	{r1, r2, r3}
   b42e4:	b503      	push	{r0, r1, lr}
   b42e6:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b42e8:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42ea:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b42ee:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b42f0:	f008 fef3 	bl	bd0da <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b42f4:	b002      	add	sp, #8
   b42f6:	f85d eb04 	ldr.w	lr, [sp], #4
   b42fa:	b003      	add	sp, #12
   b42fc:	4770      	bx	lr
	...

000b4300 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4300:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4302:	4604      	mov	r4, r0
   b4304:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4306:	7922      	ldrb	r2, [r4, #4]
   b4308:	68a3      	ldr	r3, [r4, #8]
   b430a:	b132      	cbz	r2, b431a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b430c:	b9a3      	cbnz	r3, b4338 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b430e:	490b      	ldr	r1, [pc, #44]	; (b433c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4310:	b002      	add	sp, #8
   b4312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4316:	f008 bea5 	b.w	bd064 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b431a:	4a09      	ldr	r2, [pc, #36]	; (b4340 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b431c:	7b26      	ldrb	r6, [r4, #12]
   b431e:	4d09      	ldr	r5, [pc, #36]	; (b4344 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4320:	4909      	ldr	r1, [pc, #36]	; (b4348 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4322:	7b64      	ldrb	r4, [r4, #13]
   b4324:	2e01      	cmp	r6, #1
   b4326:	bf18      	it	ne
   b4328:	4629      	movne	r1, r5
   b432a:	e9cd 1400 	strd	r1, r4, [sp]
   b432e:	4907      	ldr	r1, [pc, #28]	; (b434c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4330:	f7ff ffd7 	bl	b42e2 <_ZN5Print6printfEPKcz>
  }
   b4334:	b002      	add	sp, #8
   b4336:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4338:	4a05      	ldr	r2, [pc, #20]	; (b4350 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b433a:	e7ef      	b.n	b431c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b433c:	000c0b55 	.word	0x000c0b55
   b4340:	000c1067 	.word	0x000c1067
   b4344:	000c0b51 	.word	0x000c0b51
   b4348:	000c0b4d 	.word	0x000c0b4d
   b434c:	000c0b6b 	.word	0x000c0b6b
   b4350:	000c0b44 	.word	0x000c0b44

000b4354 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4354:	b40e      	push	{r1, r2, r3}
   b4356:	b503      	push	{r0, r1, lr}
   b4358:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b435a:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b435c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4360:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4362:	f008 feba 	bl	bd0da <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4366:	b002      	add	sp, #8
   b4368:	f85d eb04 	ldr.w	lr, [sp], #4
   b436c:	b003      	add	sp, #12
   b436e:	4770      	bx	lr

000b4370 <_Z8lHandlerv>:
void lHandler(){
   b4370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    redrawMenu = true;  
   b4374:	4c35      	ldr	r4, [pc, #212]	; (b444c <_Z8lHandlerv+0xdc>)
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4376:	4e36      	ldr	r6, [pc, #216]	; (b4450 <_Z8lHandlerv+0xe0>)
    redrawMenu = true;  
   b4378:	2501      	movs	r5, #1
   b437a:	7025      	strb	r5, [r4, #0]
   b437c:	f005 fb58 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4380:	6833      	ldr	r3, [r6, #0]
   b4382:	1ac0      	subs	r0, r0, r3
   b4384:	2895      	cmp	r0, #149	; 0x95
   b4386:	d95f      	bls.n	b4448 <_Z8lHandlerv+0xd8>
    Serial.println("Right trigger");
   b4388:	f009 fa74 	bl	bd874 <_Z16_fetch_usbserialv>
   b438c:	4931      	ldr	r1, [pc, #196]	; (b4454 <_Z8lHandlerv+0xe4>)
   b438e:	f008 fe7c 	bl	bd08a <_ZN5Print7printlnEPKc>
   b4392:	f005 fb4d 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
    if(selectingBots){
   b4396:	4b30      	ldr	r3, [pc, #192]	; (b4458 <_Z8lHandlerv+0xe8>)
    debounceTime = millis();
   b4398:	6030      	str	r0, [r6, #0]
    if(selectingBots){
   b439a:	781e      	ldrb	r6, [r3, #0]
   b439c:	492f      	ldr	r1, [pc, #188]	; (b445c <_Z8lHandlerv+0xec>)
    redrawMenu = true;
   b439e:	7025      	strb	r5, [r4, #0]
    if(selectingBots){
   b43a0:	b1b6      	cbz	r6, b43d0 <_Z8lHandlerv+0x60>
      : _M_current(__i) { }
   b43a2:	680b      	ldr	r3, [r1, #0]
        if(botSelect != WaterBots.front().botNum){
   b43a4:	4c2e      	ldr	r4, [pc, #184]	; (b4460 <_Z8lHandlerv+0xf0>)
   b43a6:	7898      	ldrb	r0, [r3, #2]
   b43a8:	7822      	ldrb	r2, [r4, #0]
   b43aa:	4290      	cmp	r0, r2
   b43ac:	d04c      	beq.n	b4448 <_Z8lHandlerv+0xd8>
   b43ae:	684f      	ldr	r7, [r1, #4]
                    ControlledBot = &ws;
   b43b0:	f8df c0b8 	ldr.w	ip, [pc, #184]	; b446c <_Z8lHandlerv+0xfc>
   b43b4:	2500      	movs	r5, #0
            for(WaterBot &ws: WaterBots){
   b43b6:	429f      	cmp	r7, r3
   b43b8:	d044      	beq.n	b4444 <_Z8lHandlerv+0xd4>
                if(ws.botNum == botSelect){
   b43ba:	7899      	ldrb	r1, [r3, #2]
   b43bc:	4291      	cmp	r1, r2
                    botSelect = newBotNum;
   b43be:	bf01      	itttt	eq
   b43c0:	4602      	moveq	r2, r0
   b43c2:	4611      	moveq	r1, r2
                    ControlledBot = &ws;
   b43c4:	f8cc 3000 	streq.w	r3, [ip]
   b43c8:	4635      	moveq	r5, r6
   b43ca:	333c      	adds	r3, #60	; 0x3c
	return *this;
   b43cc:	4608      	mov	r0, r1
   b43ce:	e7f2      	b.n	b43b6 <_Z8lHandlerv+0x46>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b43d0:	e9d1 4600 	ldrd	r4, r6, [r1]
            if(ws.botNum == botSelect){
   b43d4:	4f22      	ldr	r7, [pc, #136]	; (b4460 <_Z8lHandlerv+0xf0>)
                MenuItem *curItem = SelectedItem;
   b43d6:	f8df 8098 	ldr.w	r8, [pc, #152]	; b4470 <_Z8lHandlerv+0x100>
                modifiedValue = true;
   b43da:	f8df 9098 	ldr.w	r9, [pc, #152]	; b4474 <_Z8lHandlerv+0x104>
        for(WaterBot &ws: WaterBots){
   b43de:	42a6      	cmp	r6, r4
   b43e0:	d032      	beq.n	b4448 <_Z8lHandlerv+0xd8>
            if(ws.botNum == botSelect){
   b43e2:	78a2      	ldrb	r2, [r4, #2]
   b43e4:	783b      	ldrb	r3, [r7, #0]
   b43e6:	429a      	cmp	r2, r3
   b43e8:	d121      	bne.n	b442e <_Z8lHandlerv+0xbe>
                MenuItem *curItem = SelectedItem;
   b43ea:	f8d8 5000 	ldr.w	r5, [r8]
                Serial.println(curItem->itemName);
   b43ee:	f009 fa41 	bl	bd874 <_Z16_fetch_usbserialv>
   b43f2:	f105 011a 	add.w	r1, r5, #26
   b43f6:	f008 fe48 	bl	bd08a <_ZN5Print7printlnEPKc>
                if(curItem == nullptr) return;
   b43fa:	b32d      	cbz	r5, b4448 <_Z8lHandlerv+0xd8>
                if(curItem->statOnly) return;
   b43fc:	f895 a017 	ldrb.w	sl, [r5, #23]
   b4400:	f1ba 0f00 	cmp.w	sl, #0
   b4404:	d120      	bne.n	b4448 <_Z8lHandlerv+0xd8>
                if(curItem->onOffSetting){
   b4406:	7d6b      	ldrb	r3, [r5, #21]
   b4408:	b19b      	cbz	r3, b4432 <_Z8lHandlerv+0xc2>
                    Serial.println("Modified an On/Off Control");
   b440a:	f009 fa33 	bl	bd874 <_Z16_fetch_usbserialv>
   b440e:	4915      	ldr	r1, [pc, #84]	; (b4464 <_Z8lHandlerv+0xf4>)
   b4410:	f008 fe3b 	bl	bd08a <_ZN5Print7printlnEPKc>
                    ws.*(curItem->MethodPointerBool) = false;
   b4414:	692b      	ldr	r3, [r5, #16]
   b4416:	f804 a003 	strb.w	sl, [r4, r3]
                    Serial.printlnf("Bot: %d, Modified ",ws.botNum);
   b441a:	f009 fa2b 	bl	bd874 <_Z16_fetch_usbserialv>
   b441e:	78a2      	ldrb	r2, [r4, #2]
   b4420:	4911      	ldr	r1, [pc, #68]	; (b4468 <_Z8lHandlerv+0xf8>)
   b4422:	f7ff ff97 	bl	b4354 <_ZN5Print8printlnfEPKcz>
                modifiedValue = true;
   b4426:	2301      	movs	r3, #1
   b4428:	f889 3000 	strb.w	r3, [r9]
                ws.updatedControl = true;
   b442c:	7063      	strb	r3, [r4, #1]
      operator++() _GLIBCXX_NOEXCEPT
   b442e:	343c      	adds	r4, #60	; 0x3c
	return *this;
   b4430:	e7d5      	b.n	b43de <_Z8lHandlerv+0x6e>
                    if(ws.*(curItem->MethodPointer) > curItem->minVal) ws.*(curItem->MethodPointer) -= curItem->stepSize;
   b4432:	68ea      	ldr	r2, [r5, #12]
   b4434:	7e29      	ldrb	r1, [r5, #24]
   b4436:	5ca3      	ldrb	r3, [r4, r2]
   b4438:	4299      	cmp	r1, r3
   b443a:	bf3e      	ittt	cc
   b443c:	7d29      	ldrbcc	r1, [r5, #20]
   b443e:	1a5b      	subcc	r3, r3, r1
   b4440:	54a3      	strbcc	r3, [r4, r2]
   b4442:	e7f0      	b.n	b4426 <_Z8lHandlerv+0xb6>
   b4444:	b105      	cbz	r5, b4448 <_Z8lHandlerv+0xd8>
   b4446:	7022      	strb	r2, [r4, #0]
}
   b4448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b444c:	2003da90 	.word	0x2003da90
   b4450:	2003dd6c 	.word	0x2003dd6c
   b4454:	000c0b88 	.word	0x000c0b88
   b4458:	2003da91 	.word	0x2003da91
   b445c:	2003dcc8 	.word	0x2003dcc8
   b4460:	2003dd61 	.word	0x2003dd61
   b4464:	000c0b96 	.word	0x000c0b96
   b4468:	000c0bb1 	.word	0x000c0bb1
   b446c:	2003dc8c 	.word	0x2003dc8c
   b4470:	2003dcb8 	.word	0x2003dcb8
   b4474:	2003de13 	.word	0x2003de13

000b4478 <_Z8rHandlerv>:
void rHandler(){
   b4478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    redrawMenu = true;  
   b447c:	4b33      	ldr	r3, [pc, #204]	; (b454c <_Z8rHandlerv+0xd4>)
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b447e:	4c34      	ldr	r4, [pc, #208]	; (b4550 <_Z8rHandlerv+0xd8>)
    redrawMenu = true;  
   b4480:	2201      	movs	r2, #1
   b4482:	701a      	strb	r2, [r3, #0]
   b4484:	f005 fad4 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4488:	6823      	ldr	r3, [r4, #0]
   b448a:	1ac0      	subs	r0, r0, r3
   b448c:	2895      	cmp	r0, #149	; 0x95
   b448e:	d91e      	bls.n	b44ce <_Z8rHandlerv+0x56>
   b4490:	f005 face 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b4494:	6020      	str	r0, [r4, #0]
    Serial.println("Right trigger");
   b4496:	f009 f9ed 	bl	bd874 <_Z16_fetch_usbserialv>
   b449a:	492e      	ldr	r1, [pc, #184]	; (b4554 <_Z8rHandlerv+0xdc>)
   b449c:	f008 fdf5 	bl	bd08a <_ZN5Print7printlnEPKc>
    if(selectingBots){
   b44a0:	4b2d      	ldr	r3, [pc, #180]	; (b4558 <_Z8rHandlerv+0xe0>)
   b44a2:	781a      	ldrb	r2, [r3, #0]
   b44a4:	4b2d      	ldr	r3, [pc, #180]	; (b455c <_Z8rHandlerv+0xe4>)
   b44a6:	b1c2      	cbz	r2, b44da <_Z8rHandlerv+0x62>
      : _M_current(__i) { }
   b44a8:	685c      	ldr	r4, [r3, #4]
        if(botSelect != WaterBots.back().botNum){
   b44aa:	4d2d      	ldr	r5, [pc, #180]	; (b4560 <_Z8rHandlerv+0xe8>)
   b44ac:	f814 2c3a 	ldrb.w	r2, [r4, #-58]
   b44b0:	7828      	ldrb	r0, [r5, #0]
   b44b2:	4282      	cmp	r2, r0
   b44b4:	d00b      	beq.n	b44ce <_Z8rHandlerv+0x56>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b44b6:	681b      	ldr	r3, [r3, #0]
            bool findCurrent = false;
   b44b8:	2200      	movs	r2, #0
            for(WaterBot &ws: WaterBots){
   b44ba:	429c      	cmp	r4, r3
   b44bc:	461e      	mov	r6, r3
   b44be:	d006      	beq.n	b44ce <_Z8rHandlerv+0x56>
                if(findCurrent){
   b44c0:	333c      	adds	r3, #60	; 0x3c
                    botSelect = ws.botNum;
   b44c2:	f813 1c3a 	ldrb.w	r1, [r3, #-58]
                if(findCurrent){
   b44c6:	b122      	cbz	r2, b44d2 <_Z8rHandlerv+0x5a>
                    ControlledBot = &ws;
   b44c8:	4b26      	ldr	r3, [pc, #152]	; (b4564 <_Z8rHandlerv+0xec>)
                    botSelect = ws.botNum;
   b44ca:	7029      	strb	r1, [r5, #0]
                    ControlledBot = &ws;
   b44cc:	601e      	str	r6, [r3, #0]
}
   b44ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if(ws.botNum == botSelect) findCurrent = true;
   b44d2:	1a41      	subs	r1, r0, r1
   b44d4:	424a      	negs	r2, r1
   b44d6:	414a      	adcs	r2, r1
	return *this;
   b44d8:	e7ef      	b.n	b44ba <_Z8rHandlerv+0x42>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b44da:	e9d3 4600 	ldrd	r4, r6, [r3]
            if(ws.botNum == botSelect){
   b44de:	4f20      	ldr	r7, [pc, #128]	; (b4560 <_Z8rHandlerv+0xe8>)
                MenuItem *curItem = SelectedItem;
   b44e0:	f8df 808c 	ldr.w	r8, [pc, #140]	; b4570 <_Z8rHandlerv+0xf8>
                modifiedValue = true;
   b44e4:	f8df 908c 	ldr.w	r9, [pc, #140]	; b4574 <_Z8rHandlerv+0xfc>
        for(WaterBot &ws: WaterBots){
   b44e8:	42a6      	cmp	r6, r4
   b44ea:	d0f0      	beq.n	b44ce <_Z8rHandlerv+0x56>
            if(ws.botNum == botSelect){
   b44ec:	78a2      	ldrb	r2, [r4, #2]
   b44ee:	783b      	ldrb	r3, [r7, #0]
   b44f0:	429a      	cmp	r2, r3
   b44f2:	d120      	bne.n	b4536 <_Z8rHandlerv+0xbe>
                MenuItem *curItem = SelectedItem;
   b44f4:	f8d8 5000 	ldr.w	r5, [r8]
                Serial.println(curItem->itemName);
   b44f8:	f009 f9bc 	bl	bd874 <_Z16_fetch_usbserialv>
   b44fc:	f105 011a 	add.w	r1, r5, #26
   b4500:	f008 fdc3 	bl	bd08a <_ZN5Print7printlnEPKc>
                if(curItem == nullptr) return;
   b4504:	2d00      	cmp	r5, #0
   b4506:	d0e2      	beq.n	b44ce <_Z8rHandlerv+0x56>
                if(curItem->statOnly) return;
   b4508:	7deb      	ldrb	r3, [r5, #23]
   b450a:	2b00      	cmp	r3, #0
   b450c:	d1df      	bne.n	b44ce <_Z8rHandlerv+0x56>
                if(curItem->onOffSetting){
   b450e:	7d6b      	ldrb	r3, [r5, #21]
   b4510:	b19b      	cbz	r3, b453a <_Z8rHandlerv+0xc2>
                    Serial.println("Modified an On/Off Control");
   b4512:	f009 f9af 	bl	bd874 <_Z16_fetch_usbserialv>
   b4516:	4914      	ldr	r1, [pc, #80]	; (b4568 <_Z8rHandlerv+0xf0>)
   b4518:	f008 fdb7 	bl	bd08a <_ZN5Print7printlnEPKc>
                    ws.*(curItem->MethodPointerBool) = true;
   b451c:	692b      	ldr	r3, [r5, #16]
   b451e:	2201      	movs	r2, #1
   b4520:	54e2      	strb	r2, [r4, r3]
                    Serial.printlnf("Bot: %d, Modified ",ws.botNum);
   b4522:	f009 f9a7 	bl	bd874 <_Z16_fetch_usbserialv>
   b4526:	78a2      	ldrb	r2, [r4, #2]
   b4528:	4910      	ldr	r1, [pc, #64]	; (b456c <_Z8rHandlerv+0xf4>)
   b452a:	f7ff ff13 	bl	b4354 <_ZN5Print8printlnfEPKcz>
                modifiedValue = true;
   b452e:	2301      	movs	r3, #1
   b4530:	f889 3000 	strb.w	r3, [r9]
                ws.updatedControl = true;
   b4534:	7063      	strb	r3, [r4, #1]
      operator++() _GLIBCXX_NOEXCEPT
   b4536:	343c      	adds	r4, #60	; 0x3c
	return *this;
   b4538:	e7d6      	b.n	b44e8 <_Z8rHandlerv+0x70>
                    if(ws.*(curItem->MethodPointer) < curItem->maxVal) ws.*(curItem->MethodPointer) += curItem->stepSize;
   b453a:	68ea      	ldr	r2, [r5, #12]
   b453c:	7e69      	ldrb	r1, [r5, #25]
   b453e:	5ca3      	ldrb	r3, [r4, r2]
   b4540:	4299      	cmp	r1, r3
   b4542:	bf82      	ittt	hi
   b4544:	7d29      	ldrbhi	r1, [r5, #20]
   b4546:	185b      	addhi	r3, r3, r1
   b4548:	54a3      	strbhi	r3, [r4, r2]
   b454a:	e7f0      	b.n	b452e <_Z8rHandlerv+0xb6>
   b454c:	2003da90 	.word	0x2003da90
   b4550:	2003dd6c 	.word	0x2003dd6c
   b4554:	000c0b88 	.word	0x000c0b88
   b4558:	2003da91 	.word	0x2003da91
   b455c:	2003dcc8 	.word	0x2003dcc8
   b4560:	2003dd61 	.word	0x2003dd61
   b4564:	2003dc8c 	.word	0x2003dc8c
   b4568:	000c0b96 	.word	0x000c0b96
   b456c:	000c0bb1 	.word	0x000c0bb1
   b4570:	2003dcb8 	.word	0x2003dcb8
   b4574:	2003de13 	.word	0x2003de13

000b4578 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4578:	b510      	push	{r4, lr}
      if (_M_manager)
   b457a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b457c:	4604      	mov	r4, r0
      if (_M_manager)
   b457e:	b113      	cbz	r3, b4586 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4580:	2203      	movs	r2, #3
   b4582:	4601      	mov	r1, r0
   b4584:	4798      	blx	r3
    }
   b4586:	4620      	mov	r0, r4
   b4588:	bd10      	pop	{r4, pc}
	...

000b458c <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b458c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b458e:	4b13      	ldr	r3, [pc, #76]	; (b45dc <_ZN5TimerD1Ev+0x50>)
   b4590:	6003      	str	r3, [r0, #0]
   b4592:	4604      	mov	r4, r0
        if (handle) {
   b4594:	6880      	ldr	r0, [r0, #8]
   b4596:	b1c8      	cbz	r0, b45cc <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4598:	2500      	movs	r5, #0
   b459a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b459e:	e9cd 3500 	strd	r3, r5, [sp]
   b45a2:	2102      	movs	r1, #2
   b45a4:	462b      	mov	r3, r5
   b45a6:	462a      	mov	r2, r5
   b45a8:	f005 fa02 	bl	b99b0 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b45ac:	68a0      	ldr	r0, [r4, #8]
   b45ae:	4629      	mov	r1, r5
   b45b0:	f005 fa1e 	bl	b99f0 <os_timer_set_id>
            while (running) {
   b45b4:	7923      	ldrb	r3, [r4, #4]
   b45b6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b45ba:	b113      	cbz	r3, b45c2 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b45bc:	f005 f9d0 	bl	b9960 <os_thread_yield>
            while (running) {
   b45c0:	e7f8      	b.n	b45b4 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b45c2:	68a0      	ldr	r0, [r4, #8]
   b45c4:	4629      	mov	r1, r5
   b45c6:	f005 f9e3 	bl	b9990 <os_timer_destroy>
            handle = nullptr;
   b45ca:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b45cc:	f104 000c 	add.w	r0, r4, #12
   b45d0:	f7ff ffd2 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
    }
   b45d4:	4620      	mov	r0, r4
   b45d6:	b003      	add	sp, #12
   b45d8:	bd30      	pop	{r4, r5, pc}
   b45da:	bf00      	nop
   b45dc:	000c12bc 	.word	0x000c12bc

000b45e0 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b45e0:	b510      	push	{r4, lr}
   b45e2:	4604      	mov	r4, r0
    }
   b45e4:	f7ff ffd2 	bl	b458c <_ZN5TimerD1Ev>
   b45e8:	4620      	mov	r0, r4
   b45ea:	211c      	movs	r1, #28
   b45ec:	f7ff fd57 	bl	b409e <_ZdlPvj>
   b45f0:	4620      	mov	r0, r4
   b45f2:	bd10      	pop	{r4, pc}

000b45f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b45f4:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b45f6:	6843      	ldr	r3, [r0, #4]
   b45f8:	3b01      	subs	r3, #1
    {
   b45fa:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b45fc:	6043      	str	r3, [r0, #4]
   b45fe:	b963      	cbnz	r3, b461a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b4600:	6803      	ldr	r3, [r0, #0]
   b4602:	689b      	ldr	r3, [r3, #8]
   b4604:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4606:	68a3      	ldr	r3, [r4, #8]
   b4608:	3b01      	subs	r3, #1
   b460a:	60a3      	str	r3, [r4, #8]
   b460c:	b92b      	cbnz	r3, b461a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b460e:	6823      	ldr	r3, [r4, #0]
   b4610:	4620      	mov	r0, r4
   b4612:	68db      	ldr	r3, [r3, #12]
        }
    }
   b4614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4618:	4718      	bx	r3
    }
   b461a:	bd10      	pop	{r4, pc}

000b461c <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b461c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b461e:	468c      	mov	ip, r1
   b4620:	2500      	movs	r5, #0
   b4622:	4914      	ldr	r1, [pc, #80]	; (b4674 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b4624:	7105      	strb	r5, [r0, #4]
   b4626:	4604      	mov	r4, r0
   b4628:	6085      	str	r5, [r0, #8]
   b462a:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b462c:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4630:	b085      	sub	sp, #20
   b4632:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4634:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4638:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b463c:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4640:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4644:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4648:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b464c:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b464e:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b4650:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4652:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4654:	6095      	str	r5, [r2, #8]
   b4656:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4658:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b465a:	e9cd 3500 	strd	r3, r5, [sp]
   b465e:	4a06      	ldr	r2, [pc, #24]	; (b4678 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b4660:	4623      	mov	r3, r4
   b4662:	4661      	mov	r1, ip
   b4664:	f104 0008 	add.w	r0, r4, #8
   b4668:	f005 f98a 	bl	b9980 <os_timer_create>
    }
   b466c:	4620      	mov	r0, r4
   b466e:	b005      	add	sp, #20
   b4670:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4672:	bf00      	nop
   b4674:	000c12bc 	.word	0x000c12bc
   b4678:	000b4181 	.word	0x000b4181

000b467c <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b467c:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b467e:	460a      	mov	r2, r1
   b4680:	4901      	ldr	r1, [pc, #4]	; (b4688 <_ZN7FatFile4openEPKci+0xc>)
   b4682:	6809      	ldr	r1, [r1, #0]
   b4684:	f002 bef7 	b.w	b7476 <_ZN7FatFile4openEPS_PKci>
   b4688:	2003e640 	.word	0x2003e640

000b468c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void offloadDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b468c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b468e:	b095      	sub	sp, #84	; 0x54
   b4690:	4604      	mov	r4, r0
   b4692:	af00      	add	r7, sp, #0
   b4694:	460d      	mov	r5, r1
    memset(fileCommand,0,8 + MAX_FILENAME_LEN);
   b4696:	221e      	movs	r2, #30
   b4698:	2100      	movs	r1, #0
   b469a:	f107 0030 	add.w	r0, r7, #48	; 0x30
   b469e:	f00a f99c 	bl	be9da <memset>
    memcpy(fileCommand,data,8);
   b46a2:	6820      	ldr	r0, [r4, #0]
   b46a4:	6861      	ldr	r1, [r4, #4]
   b46a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b46aa:	c303      	stmia	r3!, {r0, r1}
    if(fileCommand[0] == 'f'){
   b46ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   b46b0:	2b66      	cmp	r3, #102	; 0x66
    Serial.println(dataStr);
   b46b2:	466e      	mov	r6, sp
    if(fileCommand[0] == 'f'){
   b46b4:	d168      	bne.n	b4788 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
        if(!strcmp(fileCommand,"filename")){
   b46b6:	493e      	ldr	r1, [pc, #248]	; (b47b0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x124>)
   b46b8:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b46bc:	f00a fa11 	bl	beae2 <strcmp>
   b46c0:	2800      	cmp	r0, #0
   b46c2:	d13e      	bne.n	b4742 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb6>
    return m_attr;
   b46c4:	483b      	ldr	r0, [pc, #236]	; (b47b4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b46c6:	7c03      	ldrb	r3, [r0, #16]
   b46c8:	b113      	cbz	r3, b46d0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>
   b46ca:	3010      	adds	r0, #16
   b46cc:	f002 fecc 	bl	b7468 <_ZN7FatFile5closeEv>
            memcpy(fileCommand,data,8 + MAX_FILENAME_LEN);
   b46d0:	4623      	mov	r3, r4
   b46d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
   b46d6:	f104 0520 	add.w	r5, r4, #32
   b46da:	6818      	ldr	r0, [r3, #0]
   b46dc:	6859      	ldr	r1, [r3, #4]
   b46de:	4614      	mov	r4, r2
   b46e0:	c403      	stmia	r4!, {r0, r1}
   b46e2:	3308      	adds	r3, #8
   b46e4:	42ab      	cmp	r3, r5
   b46e6:	4622      	mov	r2, r4
   b46e8:	d1f7      	bne.n	b46da <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>
   b46ea:	6818      	ldr	r0, [r3, #0]
   b46ec:	6020      	str	r0, [r4, #0]
   b46ee:	889b      	ldrh	r3, [r3, #4]
   b46f0:	80a3      	strh	r3, [r4, #4]
            strncpy(offloadFilename,fileCommand+8,MAX_FILENAME_LEN);
   b46f2:	221e      	movs	r2, #30
   b46f4:	f107 0130 	add.w	r1, r7, #48	; 0x30
   b46f8:	482f      	ldr	r0, [pc, #188]	; (b47b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b46fa:	f00a fa3e 	bl	beb7a <strncpy>
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b46fe:	2300      	movs	r3, #0
    return file.open(this, path, O_RDONLY);
   b4700:	4a2d      	ldr	r2, [pc, #180]	; (b47b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4702:	492e      	ldr	r1, [pc, #184]	; (b47bc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4704:	607b      	str	r3, [r7, #4]
    return file.open(this, path, O_RDONLY);
   b4706:	1d38      	adds	r0, r7, #4
   b4708:	f002 feb5 	bl	b7476 <_ZN7FatFile4openEPS_PKci>
            if(sd.exists(offloadFilename)){
   b470c:	b148      	cbz	r0, b4722 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x96>
                Serial.printlnf("File '%s' already exists, deleting and overwriting",offloadFilename);
   b470e:	f009 f8b1 	bl	bd874 <_Z16_fetch_usbserialv>
   b4712:	492b      	ldr	r1, [pc, #172]	; (b47c0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
   b4714:	4a28      	ldr	r2, [pc, #160]	; (b47b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4716:	f7ff fe1d 	bl	b4354 <_ZN5Print8printlnfEPKcz>
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   b471a:	4927      	ldr	r1, [pc, #156]	; (b47b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b471c:	4827      	ldr	r0, [pc, #156]	; (b47bc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
   b471e:	f002 fef6 	bl	b750e <_ZN7FatFile6removeEPS_PKc>
            Serial.printlnf("Starting offload of file: %s",offloadFilename);
   b4722:	f009 f8a7 	bl	bd874 <_Z16_fetch_usbserialv>
   b4726:	4a24      	ldr	r2, [pc, #144]	; (b47b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4728:	4926      	ldr	r1, [pc, #152]	; (b47c4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   b472a:	f7ff fe13 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            myFile.open(offloadFilename, O_RDWR | O_CREAT | O_AT_END);
   b472e:	4922      	ldr	r1, [pc, #136]	; (b47b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4730:	4825      	ldr	r0, [pc, #148]	; (b47c8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b4732:	f244 2202 	movw	r2, #16898	; 0x4202
   b4736:	f7ff ffa1 	bl	b467c <_ZN7FatFile4openEPKci>
}
   b473a:	3754      	adds	r7, #84	; 0x54
   b473c:	46b5      	mov	sp, r6
   b473e:	46bd      	mov	sp, r7
   b4740:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(!strcmp(fileCommand,"filecomp")){
   b4742:	4922      	ldr	r1, [pc, #136]	; (b47cc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>)
   b4744:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4748:	f00a f9cb 	bl	beae2 <strcmp>
   b474c:	b968      	cbnz	r0, b476a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xde>
            Serial.printlnf("Reached end of file: %s",offloadFilename);
   b474e:	f009 f891 	bl	bd874 <_Z16_fetch_usbserialv>
   b4752:	4a19      	ldr	r2, [pc, #100]	; (b47b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4754:	491e      	ldr	r1, [pc, #120]	; (b47d0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>)
   b4756:	f7ff fdfd 	bl	b4354 <_ZN5Print8printlnfEPKcz>
    return m_attr;
   b475a:	4b16      	ldr	r3, [pc, #88]	; (b47b4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b475c:	7c1b      	ldrb	r3, [r3, #16]
   b475e:	2b00      	cmp	r3, #0
   b4760:	d0eb      	beq.n	b473a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b4762:	4819      	ldr	r0, [pc, #100]	; (b47c8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b4764:	f002 fe80 	bl	b7468 <_ZN7FatFile5closeEv>
   b4768:	e7e7      	b.n	b473a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
        else if(!strcmp(fileCommand,"filedone")){
   b476a:	491a      	ldr	r1, [pc, #104]	; (b47d4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
   b476c:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4770:	f00a f9b7 	bl	beae2 <strcmp>
   b4774:	b940      	cbnz	r0, b4788 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
            Serial.println("Received done command");
   b4776:	f009 f87d 	bl	bd874 <_Z16_fetch_usbserialv>
   b477a:	4917      	ldr	r1, [pc, #92]	; (b47d8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>)
   b477c:	f008 fc85 	bl	bd08a <_ZN5Print7printlnEPKc>
            offloadingDone = true;
   b4780:	4b16      	ldr	r3, [pc, #88]	; (b47dc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x150>)
   b4782:	2201      	movs	r2, #1
   b4784:	701a      	strb	r2, [r3, #0]
   b4786:	e7e8      	b.n	b475a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xce>
    char dataStr[len];
   b4788:	1deb      	adds	r3, r5, #7
   b478a:	f023 0307 	bic.w	r3, r3, #7
   b478e:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(dataStr,data,len);
   b4792:	462a      	mov	r2, r5
   b4794:	4621      	mov	r1, r4
   b4796:	4668      	mov	r0, sp
   b4798:	f00a f8f7 	bl	be98a <memcpy>
    myFile.print(dataStr);
   b479c:	4669      	mov	r1, sp
   b479e:	4805      	ldr	r0, [pc, #20]	; (b47b4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
   b47a0:	f008 fc60 	bl	bd064 <_ZN5Print5printEPKc>
    Serial.println(dataStr);
   b47a4:	f009 f866 	bl	bd874 <_Z16_fetch_usbserialv>
   b47a8:	4669      	mov	r1, sp
   b47aa:	f008 fc6e 	bl	bd08a <_ZN5Print7printlnEPKc>
   b47ae:	e7c4      	b.n	b473a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b47b0:	000c0bc4 	.word	0x000c0bc4
   b47b4:	2003de14 	.word	0x2003de14
   b47b8:	2003de48 	.word	0x2003de48
   b47bc:	2003e5f0 	.word	0x2003e5f0
   b47c0:	000c0bcd 	.word	0x000c0bcd
   b47c4:	000c0c00 	.word	0x000c0c00
   b47c8:	2003de24 	.word	0x2003de24
   b47cc:	000c0c1d 	.word	0x000c0c1d
   b47d0:	000c0c26 	.word	0x000c0c26
   b47d4:	000c0c3e 	.word	0x000c0c3e
   b47d8:	000c0c47 	.word	0x000c0c47
   b47dc:	2003de66 	.word	0x2003de66

000b47e0 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b47e0:	b530      	push	{r4, r5, lr}
   b47e2:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b47e4:	4b1b      	ldr	r3, [pc, #108]	; (b4854 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b47e6:	9300      	str	r3, [sp, #0]
   b47e8:	7913      	ldrb	r3, [r2, #4]
   b47ea:	f88d 3004 	strb.w	r3, [sp, #4]
   b47ee:	6893      	ldr	r3, [r2, #8]
   b47f0:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b47f2:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b47f6:	8993      	ldrh	r3, [r2, #12]
   b47f8:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b47fc:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b47fe:	460a      	mov	r2, r1
   b4800:	466b      	mov	r3, sp
   b4802:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b4806:	4628      	mov	r0, r5
   b4808:	f003 fd54 	bl	b82b4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b480c:	b910      	cbnz	r0, b4814 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b480e:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b4810:	b005      	add	sp, #20
   b4812:	bd30      	pop	{r4, r5, pc}
    m_blockDev = blockDev;
   b4814:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b4816:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b481a:	4628      	mov	r0, r5
   b481c:	f002 fe24 	bl	b7468 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b4820:	2101      	movs	r1, #1
   b4822:	4620      	mov	r0, r4
   b4824:	f003 fbf0 	bl	b8008 <_ZN9FatVolume4initEh>
   b4828:	4601      	mov	r1, r0
   b482a:	b168      	cbz	r0, b4848 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b482c:	4621      	mov	r1, r4
   b482e:	4628      	mov	r0, r5
   b4830:	f002 fc51 	bl	b70d6 <_ZN7FatFile8openRootEP9FatVolume>
   b4834:	2800      	cmp	r0, #0
   b4836:	d0ea      	beq.n	b480e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b4838:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b483c:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4840:	d0e5      	beq.n	b480e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b4842:	4b05      	ldr	r3, [pc, #20]	; (b4858 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b4844:	601d      	str	r5, [r3, #0]
    return true;
   b4846:	e7e3      	b.n	b4810 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b4848:	4620      	mov	r0, r4
   b484a:	f003 fbdd 	bl	b8008 <_ZN9FatVolume4initEh>
   b484e:	2800      	cmp	r0, #0
   b4850:	d1ec      	bne.n	b482c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b4852:	e7dc      	b.n	b480e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b4854:	000c12a8 	.word	0x000c12a8
   b4858:	2003e640 	.word	0x2003e640

000b485c <_Z10logMessagePKc>:
void logMessage(const char *message){
   b485c:	b538      	push	{r3, r4, r5, lr}
    return m_attr;
   b485e:	4c0d      	ldr	r4, [pc, #52]	; (b4894 <_Z10logMessagePKc+0x38>)
    if(!logFile.isOpen()){
   b4860:	7c23      	ldrb	r3, [r4, #16]
void logMessage(const char *message){
   b4862:	4605      	mov	r5, r0
    if(!logFile.isOpen()){
   b4864:	b983      	cbnz	r3, b4888 <_Z10logMessagePKc+0x2c>
        logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4866:	490c      	ldr	r1, [pc, #48]	; (b4898 <_Z10logMessagePKc+0x3c>)
   b4868:	f244 2202 	movw	r2, #16898	; 0x4202
   b486c:	f104 0010 	add.w	r0, r4, #16
   b4870:	f7ff ff04 	bl	b467c <_ZN7FatFile4openEPKci>
        logFile.println(message);
   b4874:	4629      	mov	r1, r5
   b4876:	4620      	mov	r0, r4
   b4878:	f008 fc07 	bl	bd08a <_ZN5Print7printlnEPKc>
        logFile.close();
   b487c:	f104 0010 	add.w	r0, r4, #16
}
   b4880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        logFile.close();
   b4884:	f002 bdf0 	b.w	b7468 <_ZN7FatFile5closeEv>
    else logFile.println(message);
   b4888:	4601      	mov	r1, r0
   b488a:	4620      	mov	r0, r4
}
   b488c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    else logFile.println(message);
   b4890:	f008 bbfb 	b.w	bd08a <_ZN5Print7printlnEPKc>
   b4894:	2003dddc 	.word	0x2003dddc
   b4898:	2003dd84 	.word	0x2003dd84

000b489c <_ZN8WaterBotC1Ev>:
class WaterBot{
   b489c:	f240 1201 	movw	r2, #257	; 0x101
   b48a0:	8002      	strh	r2, [r0, #0]
   b48a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   b48a6:	6082      	str	r2, [r0, #8]
   b48a8:	4a08      	ldr	r2, [pc, #32]	; (b48cc <_ZN8WaterBotC1Ev+0x30>)
   b48aa:	6102      	str	r2, [r0, #16]
   b48ac:	2100      	movs	r1, #0
   b48ae:	6142      	str	r2, [r0, #20]
   b48b0:	2200      	movs	r2, #0
   b48b2:	70c1      	strb	r1, [r0, #3]
   b48b4:	71c1      	strb	r1, [r0, #7]
   b48b6:	7301      	strb	r1, [r0, #12]
   b48b8:	6182      	str	r2, [r0, #24]
   b48ba:	61c2      	str	r2, [r0, #28]
   b48bc:	6202      	str	r2, [r0, #32]
   b48be:	6242      	str	r2, [r0, #36]	; 0x24
   b48c0:	6282      	str	r2, [r0, #40]	; 0x28
   b48c2:	62c2      	str	r2, [r0, #44]	; 0x2c
   b48c4:	6302      	str	r2, [r0, #48]	; 0x30
   b48c6:	6341      	str	r1, [r0, #52]	; 0x34
   b48c8:	4770      	bx	lr
   b48ca:	bf00      	nop
   b48cc:	c479c000 	.word	0xc479c000

000b48d0 <_Z17processRPiCommandPKch>:
void processRPiCommand(const char *command, uint8_t mode){
   b48d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b48d4:	b094      	sub	sp, #80	; 0x50
    if(command[0] == 'R' && command[1] == 'P'){  
   b48d6:	7803      	ldrb	r3, [r0, #0]
   b48d8:	2b52      	cmp	r3, #82	; 0x52
void processRPiCommand(const char *command, uint8_t mode){
   b48da:	af06      	add	r7, sp, #24
   b48dc:	4604      	mov	r4, r0
   b48de:	4688      	mov	r8, r1
    if(command[0] == 'R' && command[1] == 'P'){  
   b48e0:	f040 808c 	bne.w	b49fc <_Z17processRPiCommandPKch+0x12c>
   b48e4:	7843      	ldrb	r3, [r0, #1]
   b48e6:	2b50      	cmp	r3, #80	; 0x50
   b48e8:	f040 8088 	bne.w	b49fc <_Z17processRPiCommandPKch+0x12c>
        Serial.println("Received Pi command");
   b48ec:	f008 ffc2 	bl	bd874 <_Z16_fetch_usbserialv>
   b48f0:	497a      	ldr	r1, [pc, #488]	; (b4adc <_Z17processRPiCommandPKch+0x20c>)
   b48f2:	f008 fbca 	bl	bd08a <_ZN5Print7printlnEPKc>
        char dataStr[strlen(command)-8];
   b48f6:	4620      	mov	r0, r4
   b48f8:	f00a f923 	bl	beb42 <strlen>
   b48fc:	3801      	subs	r0, #1
   b48fe:	f020 0007 	bic.w	r0, r0, #7
        }
   b4902:	466e      	mov	r6, sp
        char dataStr[strlen(command)-8];
   b4904:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b4908:	4620      	mov	r0, r4
   b490a:	f00a f91a 	bl	beb42 <strlen>
        char dataStr[strlen(command)-8];
   b490e:	f10d 0918 	add.w	r9, sp, #24
        dataStr[strlen(command)-9] = '\0';
   b4912:	4448      	add	r0, r9
   b4914:	2500      	movs	r5, #0
   b4916:	f800 5c09 	strb.w	r5, [r0, #-9]
        checkStr[0] = command[strlen(command)-2];
   b491a:	4620      	mov	r0, r4
        cmdStr[3] = '\0';
   b491c:	74fd      	strb	r5, [r7, #19]
        checkStr[0] = command[strlen(command)-2];
   b491e:	f00a f910 	bl	beb42 <strlen>
   b4922:	4420      	add	r0, r4
   b4924:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b4928:	733b      	strb	r3, [r7, #12]
        checkStr[1] = command[strlen(command)-1];
   b492a:	4620      	mov	r0, r4
   b492c:	f00a f909 	bl	beb42 <strlen>
   b4930:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4932:	4629      	mov	r1, r5
        checkStr[1] = command[strlen(command)-1];
   b4934:	f810 3c01 	ldrb.w	r3, [r0, #-1]
        checkStr[2] = '\0';
   b4938:	73bd      	strb	r5, [r7, #14]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b493a:	2210      	movs	r2, #16
   b493c:	f107 000c 	add.w	r0, r7, #12
        checkStr[1] = command[strlen(command)-1];
   b4940:	737b      	strb	r3, [r7, #13]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4942:	f00a ffe9 	bl	bf918 <strtol>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4946:	2504      	movs	r5, #4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4948:	4682      	mov	sl, r0
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b494a:	4620      	mov	r0, r4
   b494c:	f00a f8f9 	bl	beb42 <strlen>
   b4950:	3802      	subs	r0, #2
   b4952:	4285      	cmp	r5, r0
   b4954:	d212      	bcs.n	b497c <_Z17processRPiCommandPKch+0xac>
            if(i < 7) cmdStr[i-4] = command[i];
   b4956:	2d06      	cmp	r5, #6
   b4958:	bf9b      	ittet	ls
   b495a:	f107 0338 	addls.w	r3, r7, #56	; 0x38
   b495e:	195b      	addls	r3, r3, r5
            else dataStr[i-7] = command[i];
   b4960:	eb09 0305 	addhi.w	r3, r9, r5
            if(i < 7) cmdStr[i-4] = command[i];
   b4964:	5d62      	ldrbls	r2, [r4, r5]
            else dataStr[i-7] = command[i];
   b4966:	bf8c      	ite	hi
   b4968:	5d62      	ldrbhi	r2, [r4, r5]
            if(i < 7) cmdStr[i-4] = command[i];
   b496a:	f803 2c2c 	strbls.w	r2, [r3, #-44]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b496e:	f105 0501 	add.w	r5, r5, #1
            else dataStr[i-7] = command[i];
   b4972:	bf88      	it	hi
   b4974:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4978:	b2ed      	uxtb	r5, r5
   b497a:	e7e6      	b.n	b494a <_Z17processRPiCommandPKch+0x7a>
        if(checksum != strlen(command)-2){
   b497c:	fa5f fa8a 	uxtb.w	sl, sl
   b4980:	4550      	cmp	r0, sl
   b4982:	d045      	beq.n	b4a10 <_Z17processRPiCommandPKch+0x140>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b4984:	f008 ff76 	bl	bd874 <_Z16_fetch_usbserialv>
   b4988:	4681      	mov	r9, r0
   b498a:	4620      	mov	r0, r4
   b498c:	f00a f8d9 	bl	beb42 <strlen>
   b4990:	4d53      	ldr	r5, [pc, #332]	; (b4ae0 <_Z17processRPiCommandPKch+0x210>)
   b4992:	4954      	ldr	r1, [pc, #336]	; (b4ae4 <_Z17processRPiCommandPKch+0x214>)
   b4994:	4653      	mov	r3, sl
   b4996:	1e82      	subs	r2, r0, #2
   b4998:	4648      	mov	r0, r9
   b499a:	f7ff fcdb 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            if(!logFile.isOpen()){
   b499e:	7c2b      	ldrb	r3, [r5, #16]
   b49a0:	bb83      	cbnz	r3, b4a04 <_Z17processRPiCommandPKch+0x134>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b49a2:	4951      	ldr	r1, [pc, #324]	; (b4ae8 <_Z17processRPiCommandPKch+0x218>)
   b49a4:	f244 2202 	movw	r2, #16898	; 0x4202
   b49a8:	f105 0010 	add.w	r0, r5, #16
   b49ac:	f7ff fe66 	bl	b467c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] RPi Message Checksum Does Not Match!: %s",command);
   b49b0:	494e      	ldr	r1, [pc, #312]	; (b4aec <_Z17processRPiCommandPKch+0x21c>)
   b49b2:	4622      	mov	r2, r4
   b49b4:	4628      	mov	r0, r5
   b49b6:	f7ff fccd 	bl	b4354 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b49ba:	f105 0010 	add.w	r0, r5, #16
   b49be:	f002 fd53 	bl	b7468 <_ZN7FatFile5closeEv>
            Serial.println("Warning, checksum does not match");
   b49c2:	f008 ff57 	bl	bd874 <_Z16_fetch_usbserialv>
   b49c6:	494a      	ldr	r1, [pc, #296]	; (b4af0 <_Z17processRPiCommandPKch+0x220>)
   b49c8:	f008 fb5f 	bl	bd08a <_ZN5Print7printlnEPKc>
            if((command[1] >= '0' && command[1] <= '9') || command[1] == 'C'){
   b49cc:	7863      	ldrb	r3, [r4, #1]
   b49ce:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b49d2:	2a09      	cmp	r2, #9
   b49d4:	d901      	bls.n	b49da <_Z17processRPiCommandPKch+0x10a>
   b49d6:	2b43      	cmp	r3, #67	; 0x43
   b49d8:	d10f      	bne.n	b49fa <_Z17processRPiCommandPKch+0x12a>
                rxBotNum[0] = command[0];
   b49da:	7822      	ldrb	r2, [r4, #0]
   b49dc:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
                rxBotNum[1] = command[1];
   b49e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                sprintf(errBuf,"CC%2snak%3s",rxBotNum,cmdStr);
   b49e4:	4943      	ldr	r1, [pc, #268]	; (b4af4 <_Z17processRPiCommandPKch+0x224>)
   b49e6:	4844      	ldr	r0, [pc, #272]	; (b4af8 <_Z17processRPiCommandPKch+0x228>)
   b49e8:	f107 0310 	add.w	r3, r7, #16
   b49ec:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   b49f0:	f005 faaa 	bl	b9f48 <sprintf>
                errModeReply = mode;
   b49f4:	4b41      	ldr	r3, [pc, #260]	; (b4afc <_Z17processRPiCommandPKch+0x22c>)
   b49f6:	f883 8000 	strb.w	r8, [r3]
   b49fa:	46b5      	mov	sp, r6
}
   b49fc:	3738      	adds	r7, #56	; 0x38
   b49fe:	46bd      	mov	sp, r7
   b4a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else logFile.printlnf("[WARN] RPi Message Checksum Does Not Match!: %s",command);
   b4a04:	4939      	ldr	r1, [pc, #228]	; (b4aec <_Z17processRPiCommandPKch+0x21c>)
   b4a06:	4622      	mov	r2, r4
   b4a08:	4628      	mov	r0, r5
   b4a0a:	f7ff fca3 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b4a0e:	e7d8      	b.n	b49c2 <_Z17processRPiCommandPKch+0xf2>
        if(!strcmp(cmdStr,"ctl")){
   b4a10:	493b      	ldr	r1, [pc, #236]	; (b4b00 <_Z17processRPiCommandPKch+0x230>)
   b4a12:	f107 0010 	add.w	r0, r7, #16
   b4a16:	f00a f864 	bl	beae2 <strcmp>
   b4a1a:	4605      	mov	r5, r0
   b4a1c:	2800      	cmp	r0, #0
   b4a1e:	d1ec      	bne.n	b49fa <_Z17processRPiCommandPKch+0x12a>
            sscanf(dataStr,"%s %s %s %d %d %d %d",idStr,GPSLatstr,GPSLonstr,&drivemode,&offloading,&recording,&signal);
   b4a20:	1dfb      	adds	r3, r7, #7
   b4a22:	9304      	str	r3, [sp, #16]
   b4a24:	1dbb      	adds	r3, r7, #6
   b4a26:	9303      	str	r3, [sp, #12]
   b4a28:	1d3b      	adds	r3, r7, #4
   b4a2a:	9302      	str	r3, [sp, #8]
   b4a2c:	f107 082c 	add.w	r8, r7, #44	; 0x2c
   b4a30:	1d7b      	adds	r3, r7, #5
   b4a32:	4934      	ldr	r1, [pc, #208]	; (b4b04 <_Z17processRPiCommandPKch+0x234>)
   b4a34:	9301      	str	r3, [sp, #4]
   b4a36:	f107 0214 	add.w	r2, r7, #20
   b4a3a:	f107 0320 	add.w	r3, r7, #32
   b4a3e:	f8cd 8000 	str.w	r8, [sp]
   b4a42:	4648      	mov	r0, r9
   b4a44:	f005 fa88 	bl	b9f58 <sscanf>
            char botChar[2] = {command[8], '\0'};
   b4a48:	7a23      	ldrb	r3, [r4, #8]
   b4a4a:	723b      	strb	r3, [r7, #8]
            uint8_t targetBot = atoi(botChar);
   b4a4c:	f107 0008 	add.w	r0, r7, #8
            char botChar[2] = {command[8], '\0'};
   b4a50:	727d      	strb	r5, [r7, #9]
            uint8_t targetBot = atoi(botChar);
   b4a52:	f009 ff86 	bl	be962 <atoi>
   b4a56:	b2c5      	uxtb	r5, r0
            Serial.printlnf("Got a command packet from Pi for Bot %d",targetBot);
   b4a58:	f008 ff0c 	bl	bd874 <_Z16_fetch_usbserialv>
   b4a5c:	492a      	ldr	r1, [pc, #168]	; (b4b08 <_Z17processRPiCommandPKch+0x238>)
   b4a5e:	462a      	mov	r2, r5
   b4a60:	f7ff fc78 	bl	b4354 <_ZN5Print8printlnfEPKcz>
      : _M_current(__i) { }
   b4a64:	4b29      	ldr	r3, [pc, #164]	; (b4b0c <_Z17processRPiCommandPKch+0x23c>)
   b4a66:	e9d3 3100 	ldrd	r3, r1, [r3]
            for(WaterBot &wb: WaterBots){
   b4a6a:	4299      	cmp	r1, r3
   b4a6c:	461c      	mov	r4, r3
   b4a6e:	d0c4      	beq.n	b49fa <_Z17processRPiCommandPKch+0x12a>
                if(wb.botNum == targetBot){
   b4a70:	78a2      	ldrb	r2, [r4, #2]
   b4a72:	42aa      	cmp	r2, r5
   b4a74:	f103 033c 	add.w	r3, r3, #60	; 0x3c
   b4a78:	d1f7      	bne.n	b4a6a <_Z17processRPiCommandPKch+0x19a>
                    wb.TargetLat = atof(GPSLatstr);
   b4a7a:	f107 0020 	add.w	r0, r7, #32
   b4a7e:	f009 ff6d 	bl	be95c <atof>
   b4a82:	ec51 0b10 	vmov	r0, r1, d0
   b4a86:	f009 fef5 	bl	be874 <__aeabi_d2f>
   b4a8a:	6120      	str	r0, [r4, #16]
                    wb.TargetLon = atof(GPSLonstr);
   b4a8c:	4640      	mov	r0, r8
   b4a8e:	f009 ff65 	bl	be95c <atof>
   b4a92:	ec51 0b10 	vmov	r0, r1, d0
   b4a96:	f009 feed 	bl	be874 <__aeabi_d2f>
                    wb.driveMode = drivemode;
   b4a9a:	797b      	ldrb	r3, [r7, #5]
   b4a9c:	71e3      	strb	r3, [r4, #7]
                    wb.offloading = offloading;
   b4a9e:	793b      	ldrb	r3, [r7, #4]
                    if(botSelect == wb.botNum) redrawMenu = true;
   b4aa0:	78a2      	ldrb	r2, [r4, #2]
                    wb.TargetLon = atof(GPSLonstr);
   b4aa2:	6160      	str	r0, [r4, #20]
                    wb.offloading = offloading;
   b4aa4:	3b00      	subs	r3, #0
   b4aa6:	bf18      	it	ne
   b4aa8:	2301      	movne	r3, #1
   b4aaa:	7323      	strb	r3, [r4, #12]
                    wb.dataRecording = recording;
   b4aac:	79bb      	ldrb	r3, [r7, #6]
   b4aae:	3b00      	subs	r3, #0
   b4ab0:	bf18      	it	ne
   b4ab2:	2301      	movne	r3, #1
   b4ab4:	72e3      	strb	r3, [r4, #11]
                    wb.signal = signal;
   b4ab6:	79fb      	ldrb	r3, [r7, #7]
   b4ab8:	3b00      	subs	r3, #0
   b4aba:	bf18      	it	ne
   b4abc:	2301      	movne	r3, #1
   b4abe:	7223      	strb	r3, [r4, #8]
                    if(botSelect == wb.botNum) redrawMenu = true;
   b4ac0:	4b13      	ldr	r3, [pc, #76]	; (b4b10 <_Z17processRPiCommandPKch+0x240>)
   b4ac2:	781b      	ldrb	r3, [r3, #0]
   b4ac4:	429a      	cmp	r2, r3
   b4ac6:	bf08      	it	eq
   b4ac8:	4a12      	ldreq	r2, [pc, #72]	; (b4b14 <_Z17processRPiCommandPKch+0x244>)
   b4aca:	f04f 0301 	mov.w	r3, #1
   b4ace:	bf08      	it	eq
   b4ad0:	7013      	strbeq	r3, [r2, #0]
                    updateControl = true;
   b4ad2:	4a11      	ldr	r2, [pc, #68]	; (b4b18 <_Z17processRPiCommandPKch+0x248>)
                    wb.updatedControl = true;
   b4ad4:	7063      	strb	r3, [r4, #1]
                    updateControl = true;
   b4ad6:	7013      	strb	r3, [r2, #0]
                    return;
   b4ad8:	e78f      	b.n	b49fa <_Z17processRPiCommandPKch+0x12a>
   b4ada:	bf00      	nop
   b4adc:	000c0c5d 	.word	0x000c0c5d
   b4ae0:	2003dddc 	.word	0x2003dddc
   b4ae4:	000c0c71 	.word	0x000c0c71
   b4ae8:	2003dd84 	.word	0x2003dd84
   b4aec:	000c0c8e 	.word	0x000c0c8e
   b4af0:	000c0cbe 	.word	0x000c0cbe
   b4af4:	000c0cdf 	.word	0x000c0cdf
   b4af8:	2003dd70 	.word	0x2003dd70
   b4afc:	2003dd83 	.word	0x2003dd83
   b4b00:	000c0ceb 	.word	0x000c0ceb
   b4b04:	000c0cef 	.word	0x000c0cef
   b4b08:	000c0d04 	.word	0x000c0d04
   b4b0c:	2003dcc8 	.word	0x2003dcc8
   b4b10:	2003dd61 	.word	0x2003dd61
   b4b14:	2003da90 	.word	0x2003da90
   b4b18:	2003e63a 	.word	0x2003e63a

000b4b1c <_Z9setupXBeev>:
void setupXBee(){
   b4b1c:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b4b1e:	f009 f841 	bl	bdba4 <_Z22__fetch_global_Serial1v>
   b4b22:	4908      	ldr	r1, [pc, #32]	; (b4b44 <_Z9setupXBeev+0x28>)
   b4b24:	f7ff fbdd 	bl	b42e2 <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4b28:	2014      	movs	r0, #20
   b4b2a:	f005 fa5d 	bl	b9fe8 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b4b2e:	f009 f839 	bl	bdba4 <_Z22__fetch_global_Serial1v>
   b4b32:	4905      	ldr	r1, [pc, #20]	; (b4b48 <_Z9setupXBeev+0x2c>)
   b4b34:	f7ff fbd5 	bl	b42e2 <_ZN5Print6printfEPKcz>
}
   b4b38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b4b3c:	2014      	movs	r0, #20
   b4b3e:	f005 ba53 	b.w	b9fe8 <delay>
   b4b42:	bf00      	nop
   b4b44:	000c1066 	.word	0x000c1066
   b4b48:	000c128f 	.word	0x000c128f

000b4b4c <_Z10RPiHandlerv>:
void RPiHandler(){
   b4b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if(logMessages){
   b4b50:	f8df 80dc 	ldr.w	r8, [pc, #220]	; b4c30 <_Z10RPiHandlerv+0xe4>
   b4b54:	4d33      	ldr	r5, [pc, #204]	; (b4c24 <_Z10RPiHandlerv+0xd8>)
                logFile.printlnf("[INFO] Received Raspberry Pi Message: %s",data);
   b4b56:	f8df 90dc 	ldr.w	r9, [pc, #220]	; b4c34 <_Z10RPiHandlerv+0xe8>
void RPiHandler(){
   b4b5a:	b089      	sub	sp, #36	; 0x24
   b4b5c:	af00      	add	r7, sp, #0
    while(Serial.available()){
   b4b5e:	f008 fe89 	bl	bd874 <_Z16_fetch_usbserialv>
   b4b62:	6803      	ldr	r3, [r0, #0]
   b4b64:	691b      	ldr	r3, [r3, #16]
   b4b66:	4798      	blx	r3
   b4b68:	2800      	cmp	r0, #0
   b4b6a:	d056      	beq.n	b4c1a <_Z10RPiHandlerv+0xce>
            String data = Serial.readStringUntil('\n');
   b4b6c:	f008 fe82 	bl	bd874 <_Z16_fetch_usbserialv>
   b4b70:	220a      	movs	r2, #10
   b4b72:	4601      	mov	r1, r0
   b4b74:	4638      	mov	r0, r7
   b4b76:	f008 fbcd 	bl	bd314 <_ZN6Stream15readStringUntilEc>
            Serial.println(data);
   b4b7a:	f008 fe7b 	bl	bd874 <_Z16_fetch_usbserialv>
   b4b7e:	6839      	ldr	r1, [r7, #0]
   b4b80:	f008 fa83 	bl	bd08a <_ZN5Print7printlnEPKc>
            char buffer[data.length()];
   b4b84:	68bb      	ldr	r3, [r7, #8]
   b4b86:	3307      	adds	r3, #7
   b4b88:	f023 0307 	bic.w	r3, r3, #7
    }
   b4b8c:	466e      	mov	r6, sp
            char buffer[data.length()];
   b4b8e:	ebad 0d03 	sub.w	sp, sp, r3
   b4b92:	46ea      	mov	sl, sp
   b4b94:	2300      	movs	r3, #0
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b4b96:	68b9      	ldr	r1, [r7, #8]
   b4b98:	fa1f fb83 	uxth.w	fp, r3
            for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b4b9c:	458b      	cmp	fp, r1
   b4b9e:	f103 0401 	add.w	r4, r3, #1
   b4ba2:	d207      	bcs.n	b4bb4 <_Z10RPiHandlerv+0x68>
   b4ba4:	4659      	mov	r1, fp
   b4ba6:	4638      	mov	r0, r7
   b4ba8:	f008 fcce 	bl	bd548 <_ZNK6String6charAtEj>
   b4bac:	4623      	mov	r3, r4
   b4bae:	f80a 000b 	strb.w	r0, [sl, fp]
   b4bb2:	e7f0      	b.n	b4b96 <_Z10RPiHandlerv+0x4a>
            if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b4bb4:	2901      	cmp	r1, #1
   b4bb6:	d90a      	bls.n	b4bce <_Z10RPiHandlerv+0x82>
   b4bb8:	3901      	subs	r1, #1
   b4bba:	4638      	mov	r0, r7
   b4bbc:	f008 fcc4 	bl	bd548 <_ZNK6String6charAtEj>
   b4bc0:	280d      	cmp	r0, #13
   b4bc2:	bf01      	itttt	eq
   b4bc4:	68bb      	ldreq	r3, [r7, #8]
   b4bc6:	4453      	addeq	r3, sl
   b4bc8:	2200      	moveq	r2, #0
   b4bca:	f803 2c01 	strbeq.w	r2, [r3, #-1]
            processRPiCommand(buffer,3);
   b4bce:	2103      	movs	r1, #3
   b4bd0:	4650      	mov	r0, sl
   b4bd2:	f7ff fe7d 	bl	b48d0 <_Z17processRPiCommandPKch>
            if(logMessages){
   b4bd6:	f898 3000 	ldrb.w	r3, [r8]
   b4bda:	b1cb      	cbz	r3, b4c10 <_Z10RPiHandlerv+0xc4>
                if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4bdc:	7c2b      	ldrb	r3, [r5, #16]
   b4bde:	b92b      	cbnz	r3, b4bec <_Z10RPiHandlerv+0xa0>
   b4be0:	4911      	ldr	r1, [pc, #68]	; (b4c28 <_Z10RPiHandlerv+0xdc>)
   b4be2:	4812      	ldr	r0, [pc, #72]	; (b4c2c <_Z10RPiHandlerv+0xe0>)
   b4be4:	f244 2202 	movw	r2, #16898	; 0x4202
   b4be8:	f7ff fd48 	bl	b467c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[INFO] Received Raspberry Pi Message: %s",data);
   b4bec:	4639      	mov	r1, r7
   b4bee:	f107 0010 	add.w	r0, r7, #16
   b4bf2:	f008 fc3d 	bl	bd470 <_ZN6StringC1ERKS_>
   b4bf6:	f107 0210 	add.w	r2, r7, #16
   b4bfa:	4649      	mov	r1, r9
   b4bfc:	4628      	mov	r0, r5
   b4bfe:	f7ff fba9 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b4c02:	f107 0010 	add.w	r0, r7, #16
   b4c06:	f008 fb9d 	bl	bd344 <_ZN6StringD1Ev>
                logFile.close();
   b4c0a:	4808      	ldr	r0, [pc, #32]	; (b4c2c <_Z10RPiHandlerv+0xe0>)
   b4c0c:	f002 fc2c 	bl	b7468 <_ZN7FatFile5closeEv>
            String data = Serial.readStringUntil('\n');
   b4c10:	4638      	mov	r0, r7
   b4c12:	f008 fb97 	bl	bd344 <_ZN6StringD1Ev>
   b4c16:	46b5      	mov	sp, r6
    while(Serial.available()){
   b4c18:	e7a1      	b.n	b4b5e <_Z10RPiHandlerv+0x12>
}
   b4c1a:	3724      	adds	r7, #36	; 0x24
   b4c1c:	46bd      	mov	sp, r7
   b4c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4c22:	bf00      	nop
   b4c24:	2003dddc 	.word	0x2003dddc
   b4c28:	2003dd84 	.word	0x2003dd84
   b4c2c:	2003ddec 	.word	0x2003ddec
   b4c30:	2003de10 	.word	0x2003de10
   b4c34:	000c0d2c 	.word	0x000c0d2c

000b4c38 <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b4c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4c3c:	b084      	sub	sp, #16
   b4c3e:	af02      	add	r7, sp, #8
   b4c40:	4680      	mov	r8, r0
   b4c42:	4691      	mov	r9, r2
   b4c44:	461e      	mov	r6, r3
   b4c46:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b4c48:	f009 ff7b 	bl	beb42 <strlen>
   b4c4c:	3009      	adds	r0, #9
   b4c4e:	f020 0107 	bic.w	r1, r0, #7
   b4c52:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4c56:	4640      	mov	r0, r8
   b4c58:	f009 ff73 	bl	beb42 <strlen>
    char outStr[strlen(dataOut)+2];
   b4c5c:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4c5e:	4929      	ldr	r1, [pc, #164]	; (b4d04 <_Z8sendDataPKchbbb+0xcc>)
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b4c60:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4c64:	4603      	mov	r3, r0
   b4c66:	4642      	mov	r2, r8
   b4c68:	4620      	mov	r0, r4
   b4c6a:	f005 f96d 	bl	b9f48 <sprintf>
    if(VERBOSE) Serial.println(outStr);
   b4c6e:	f008 fe01 	bl	bd874 <_Z16_fetch_usbserialv>
   b4c72:	4621      	mov	r1, r4
   b4c74:	f008 fa09 	bl	bd08a <_ZN5Print7printlnEPKc>
    if(sendLTE || sendMode == 4){
   b4c78:	f1ba 0f00 	cmp.w	sl, #0
   b4c7c:	d101      	bne.n	b4c82 <_Z8sendDataPKchbbb+0x4a>
   b4c7e:	2d04      	cmp	r5, #4
   b4c80:	d10d      	bne.n	b4c9e <_Z8sendDataPKchbbb+0x66>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4c82:	4b21      	ldr	r3, [pc, #132]	; (b4d08 <_Z8sendDataPKchbbb+0xd0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4c84:	4921      	ldr	r1, [pc, #132]	; (b4d0c <_Z8sendDataPKchbbb+0xd4>)
   b4c86:	781b      	ldrb	r3, [r3, #0]
   b4c88:	f88d 3000 	strb.w	r3, [sp]
   b4c8c:	4638      	mov	r0, r7
   b4c8e:	233c      	movs	r3, #60	; 0x3c
   b4c90:	4622      	mov	r2, r4
   b4c92:	f007 fe77 	bl	bc984 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4c96:	6878      	ldr	r0, [r7, #4]
   b4c98:	b108      	cbz	r0, b4c9e <_Z8sendDataPKchbbb+0x66>
	  _M_pi->_M_release();
   b4c9a:	f7ff fcab 	bl	b45f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b4c9e:	f1b9 0f00 	cmp.w	r9, #0
   b4ca2:	d101      	bne.n	b4ca8 <_Z8sendDataPKchbbb+0x70>
   b4ca4:	2d01      	cmp	r5, #1
   b4ca6:	d121      	bne.n	b4cec <_Z8sendDataPKchbbb+0xb4>
   b4ca8:	f005 feb8 	bl	baa1c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4cac:	f005 ff63 	bl	bab76 <_ZNK8particle14BleLocalDevice9connectedEv>
   b4cb0:	b1e0      	cbz	r0, b4cec <_Z8sendDataPKchbbb+0xb4>
        uint8_t txBuf_tmp[strlen(outStr)];
   b4cb2:	4620      	mov	r0, r4
   b4cb4:	f009 ff45 	bl	beb42 <strlen>
   b4cb8:	3007      	adds	r0, #7
   b4cba:	f020 0007 	bic.w	r0, r0, #7
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b4cbe:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b4cc0:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b4cc4:	4620      	mov	r0, r4
   b4cc6:	f009 ff3c 	bl	beb42 <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b4cca:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b4cce:	4602      	mov	r2, r0
   b4cd0:	4621      	mov	r1, r4
   b4cd2:	4648      	mov	r0, r9
   b4cd4:	f009 fe59 	bl	be98a <memcpy>
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b4cd8:	4620      	mov	r0, r4
   b4cda:	f009 ff32 	bl	beb42 <strlen>
   b4cde:	2300      	movs	r3, #0
   b4ce0:	4602      	mov	r2, r0
   b4ce2:	4649      	mov	r1, r9
   b4ce4:	480a      	ldr	r0, [pc, #40]	; (b4d10 <_Z8sendDataPKchbbb+0xd8>)
   b4ce6:	f005 fd33 	bl	ba750 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b4cea:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b4cec:	b90e      	cbnz	r6, b4cf2 <_Z8sendDataPKchbbb+0xba>
   b4cee:	2d02      	cmp	r5, #2
   b4cf0:	d104      	bne.n	b4cfc <_Z8sendDataPKchbbb+0xc4>
        Serial1.println(outStr);
   b4cf2:	f008 ff57 	bl	bdba4 <_Z22__fetch_global_Serial1v>
   b4cf6:	4621      	mov	r1, r4
   b4cf8:	f008 f9c7 	bl	bd08a <_ZN5Print7printlnEPKc>
}
   b4cfc:	3708      	adds	r7, #8
   b4cfe:	46bd      	mov	sp, r7
   b4d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4d04:	000c0d55 	.word	0x000c0d55
   b4d08:	2003dd10 	.word	0x2003dd10
   b4d0c:	000c0d5c 	.word	0x000c0d5c
   b4d10:	2003ded0 	.word	0x2003ded0

000b4d14 <_Z18manualMotorControlh>:
void manualMotorControl(uint8_t commandedBot){
   b4d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4d18:	4604      	mov	r4, r0
   b4d1a:	b087      	sub	sp, #28
    VRead = 4095-analogRead(JOYV_ADC);
   b4d1c:	2010      	movs	r0, #16
   b4d1e:	f008 fed3 	bl	bdac8 <analogRead>
   b4d22:	f5c0 677f 	rsb	r7, r0, #4080	; 0xff0
   b4d26:	4606      	mov	r6, r0
    HRead = analogRead(JOYH_ADC);
   b4d28:	2011      	movs	r0, #17
   b4d2a:	f008 fecd 	bl	bdac8 <analogRead>
    VRead = 4095-analogRead(JOYV_ADC);
   b4d2e:	370f      	adds	r7, #15
    if(VRead < JOY_MID - JOY_DEADZONE){
   b4d30:	f240 73dc 	movw	r3, #2012	; 0x7dc
   b4d34:	429f      	cmp	r7, r3
   b4d36:	dc40      	bgt.n	b4dba <_Z18manualMotorControlh+0xa6>
        VSet = -90 * (VRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4d38:	f5c6 6302 	rsb	r3, r6, #2080	; 0x820
        if(VSet < -90) VSet = -90;
   b4d3c:	4a6b      	ldr	r2, [pc, #428]	; (b4eec <_Z18manualMotorControlh+0x1d8>)
        VSet = -90 * (VRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4d3e:	3302      	adds	r3, #2
   b4d40:	f06f 0159 	mvn.w	r1, #89	; 0x59
   b4d44:	434b      	muls	r3, r1
        if(VSet < -90) VSet = -90;
   b4d46:	4293      	cmp	r3, r2
   b4d48:	dc48      	bgt.n	b4ddc <_Z18manualMotorControlh+0xc8>
        VSet = -90 * (VRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4d4a:	4e69      	ldr	r6, [pc, #420]	; (b4ef0 <_Z18manualMotorControlh+0x1dc>)
   b4d4c:	fb93 f6f6 	sdiv	r6, r3, r6
    if(HRead < JOY_MID - JOY_DEADZONE){
   b4d50:	f240 73dc 	movw	r3, #2012	; 0x7dc
   b4d54:	4298      	cmp	r0, r3
   b4d56:	dc43      	bgt.n	b4de0 <_Z18manualMotorControlh+0xcc>
        if(HSet < -90) HSet = -90;
   b4d58:	4b64      	ldr	r3, [pc, #400]	; (b4eec <_Z18manualMotorControlh+0x1d8>)
        HSet = -90 * (HRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4d5a:	f2a0 70dd 	subw	r0, r0, #2013	; 0x7dd
   b4d5e:	f06f 0159 	mvn.w	r1, #89	; 0x59
   b4d62:	4348      	muls	r0, r1
        if(HSet < -90) HSet = -90;
   b4d64:	4298      	cmp	r0, r3
   b4d66:	f300 80bf 	bgt.w	b4ee8 <_Z18manualMotorControlh+0x1d4>
        HSet = -90 * (HRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4d6a:	4d61      	ldr	r5, [pc, #388]	; (b4ef0 <_Z18manualMotorControlh+0x1dc>)
   b4d6c:	fb90 f5f5 	sdiv	r5, r0, r5
    if(VSet > 0){
   b4d70:	2e00      	cmp	r6, #0
   b4d72:	dc46      	bgt.n	b4e02 <_Z18manualMotorControlh+0xee>
                RSpeed = 90 - HSet/2 + VSet;
   b4d74:	eb05 72d5 	add.w	r2, r5, r5, lsr #31
   b4d78:	1053      	asrs	r3, r2, #1
            if((0-HSet) > (0-VSet)){    //H = -90, V = 0 -> LS = 45, RS = 135, H = -90, V = -90 -> LS = 45, RS = 0
   b4d7a:	42b5      	cmp	r5, r6
                RSpeed = 90 - HSet/2 + VSet;
   b4d7c:	f1c3 0300 	rsb	r3, r3, #0
   b4d80:	ea4f 0562 	mov.w	r5, r2, asr #1
            if((0-HSet) > (0-VSet)){    //H = -90, V = 0 -> LS = 45, RS = 135, H = -90, V = -90 -> LS = 45, RS = 0
   b4d84:	f280 80a7 	bge.w	b4ed6 <_Z18manualMotorControlh+0x1c2>
                RSpeed = 90 - HSet/2 + (VSet*1.5);
   b4d88:	f103 005a 	add.w	r0, r3, #90	; 0x5a
   b4d8c:	f009 fa4e 	bl	be22c <__aeabi_i2d>
   b4d90:	4680      	mov	r8, r0
   b4d92:	4630      	mov	r0, r6
   b4d94:	4689      	mov	r9, r1
   b4d96:	f009 fa49 	bl	be22c <__aeabi_i2d>
   b4d9a:	4b56      	ldr	r3, [pc, #344]	; (b4ef4 <_Z18manualMotorControlh+0x1e0>)
   b4d9c:	2200      	movs	r2, #0
   b4d9e:	f009 faaf 	bl	be300 <__aeabi_dmul>
   b4da2:	460b      	mov	r3, r1
   b4da4:	4602      	mov	r2, r0
   b4da6:	4649      	mov	r1, r9
   b4da8:	4640      	mov	r0, r8
   b4daa:	f009 f8f3 	bl	bdf94 <__adddf3>
   b4dae:	f009 fd41 	bl	be834 <__aeabi_d2uiz>
                LSpeed = 90 + HSet/2;
   b4db2:	f105 035a 	add.w	r3, r5, #90	; 0x5a
                RSpeed = 90 - HSet/2 + (VSet*1.5);
   b4db6:	b2c1      	uxtb	r1, r0
                LSpeed = 90 + HSet/2;
   b4db8:	e035      	b.n	b4e26 <_Z18manualMotorControlh+0x112>
    else if(VRead > JOY_MID + JOY_DEADZONE){
   b4dba:	f640 0223 	movw	r2, #2083	; 0x823
   b4dbe:	4297      	cmp	r7, r2
   b4dc0:	dd0a      	ble.n	b4dd8 <_Z18manualMotorControlh+0xc4>
        if(VSet > 90) VSet = 90;
   b4dc2:	4a4d      	ldr	r2, [pc, #308]	; (b4ef8 <_Z18manualMotorControlh+0x1e4>)
        VSet = 90 * (VRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4dc4:	1b9b      	subs	r3, r3, r6
   b4dc6:	215a      	movs	r1, #90	; 0x5a
   b4dc8:	434b      	muls	r3, r1
        if(VSet > 90) VSet = 90;
   b4dca:	4293      	cmp	r3, r2
   b4dcc:	dc06      	bgt.n	b4ddc <_Z18manualMotorControlh+0xc8>
        VSet = 90 * (VRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4dce:	f240 71db 	movw	r1, #2011	; 0x7db
   b4dd2:	fb93 f6f1 	sdiv	r6, r3, r1
   b4dd6:	e7bb      	b.n	b4d50 <_Z18manualMotorControlh+0x3c>
        VSet = 0;
   b4dd8:	2600      	movs	r6, #0
   b4dda:	e7b9      	b.n	b4d50 <_Z18manualMotorControlh+0x3c>
        if(VSet > 90) VSet = 90;
   b4ddc:	460e      	mov	r6, r1
   b4dde:	e7b7      	b.n	b4d50 <_Z18manualMotorControlh+0x3c>
    else if(HRead > JOY_MID + JOY_DEADZONE){
   b4de0:	f640 0323 	movw	r3, #2083	; 0x823
   b4de4:	4298      	cmp	r0, r3
   b4de6:	dd20      	ble.n	b4e2a <_Z18manualMotorControlh+0x116>
        if(HSet > 90) HSet = 90;
   b4de8:	4b43      	ldr	r3, [pc, #268]	; (b4ef8 <_Z18manualMotorControlh+0x1e4>)
        HSet = 90 * (HRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4dea:	f6a0 0023 	subw	r0, r0, #2083	; 0x823
   b4dee:	215a      	movs	r1, #90	; 0x5a
   b4df0:	4348      	muls	r0, r1
        if(HSet > 90) HSet = 90;
   b4df2:	4298      	cmp	r0, r3
   b4df4:	dc1b      	bgt.n	b4e2e <_Z18manualMotorControlh+0x11a>
        HSet = 90 * (HRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4df6:	f240 71db 	movw	r1, #2011	; 0x7db
   b4dfa:	fbb0 f5f1 	udiv	r5, r0, r1
    if(VSet > 0){
   b4dfe:	2e00      	cmp	r6, #0
   b4e00:	dd3a      	ble.n	b4e78 <_Z18manualMotorControlh+0x164>
   b4e02:	f106 025a 	add.w	r2, r6, #90	; 0x5a
   b4e06:	0feb      	lsrs	r3, r5, #31
        if(HSet > 0){
   b4e08:	2d00      	cmp	r5, #0
    LSpeed = 90 + VSet/2;
   b4e0a:	f3c6 0747 	ubfx	r7, r6, #1, #8
        if(HSet > 0){
   b4e0e:	b2d2      	uxtb	r2, r2
                RSpeed = 90 - HSet/2 + VSet;
   b4e10:	442b      	add	r3, r5
        if(HSet > 0){
   b4e12:	dd0e      	ble.n	b4e32 <_Z18manualMotorControlh+0x11e>
                RSpeed = 90 - HSet/2 + VSet;
   b4e14:	eba2 0363 	sub.w	r3, r2, r3, asr #1
            if(HSet > VSet){        //H = 90, V = 0 -> LS = 135, RS = 45, H = 90, V = 90 -> LS = 180, RS = 135
   b4e18:	42b5      	cmp	r5, r6
                RSpeed = 90 - HSet/2 + VSet;
   b4e1a:	b2d9      	uxtb	r1, r3
            if(HSet > VSet){        //H = 90, V = 0 -> LS = 135, RS = 45, H = 90, V = 90 -> LS = 180, RS = 135
   b4e1c:	dd60      	ble.n	b4ee0 <_Z18manualMotorControlh+0x1cc>
                LSpeed = 90 + HSet/2 + VSet/2;
   b4e1e:	f107 035a 	add.w	r3, r7, #90	; 0x5a
   b4e22:	eb03 0365 	add.w	r3, r3, r5, asr #1
                LSpeed = 90 - HSet/2 + VSet;
   b4e26:	b2db      	uxtb	r3, r3
   b4e28:	e00e      	b.n	b4e48 <_Z18manualMotorControlh+0x134>
        HSet = 0;
   b4e2a:	2500      	movs	r5, #0
   b4e2c:	e7e7      	b.n	b4dfe <_Z18manualMotorControlh+0xea>
        if(HSet > 90) HSet = 90;
   b4e2e:	460d      	mov	r5, r1
   b4e30:	e7e5      	b.n	b4dfe <_Z18manualMotorControlh+0xea>
            if((0-HSet) > VSet){
   b4e32:	4269      	negs	r1, r5
                LSpeed = 90 + HSet/2 + VSet;
   b4e34:	1058      	asrs	r0, r3, #1
            if((0-HSet) > VSet){
   b4e36:	42b1      	cmp	r1, r6
                LSpeed = 90 + HSet/2 + VSet;
   b4e38:	eb02 0363 	add.w	r3, r2, r3, asr #1
   b4e3c:	b2db      	uxtb	r3, r3
            if((0-HSet) > VSet){
   b4e3e:	dd51      	ble.n	b4ee4 <_Z18manualMotorControlh+0x1d0>
                RSpeed = 90 - HSet/2 + VSet/2;
   b4e40:	f107 015a 	add.w	r1, r7, #90	; 0x5a
   b4e44:	1a09      	subs	r1, r1, r0
                RSpeed = 90 + HSet/2 + VSet;
   b4e46:	b2c9      	uxtb	r1, r1
    sprintf(mtrStr,"CCB%dmtr%03d%03d",commandedBot, LSpeed, RSpeed);
   b4e48:	4622      	mov	r2, r4
   b4e4a:	9100      	str	r1, [sp, #0]
   b4e4c:	a802      	add	r0, sp, #8
   b4e4e:	492b      	ldr	r1, [pc, #172]	; (b4efc <_Z18manualMotorControlh+0x1e8>)
   b4e50:	f005 f87a 	bl	b9f48 <sprintf>
    Serial.println(mtrStr);
   b4e54:	f008 fd0e 	bl	bd874 <_Z16_fetch_usbserialv>
   b4e58:	a902      	add	r1, sp, #8
   b4e5a:	f008 f916 	bl	bd08a <_ZN5Print7printlnEPKc>
    sendData(mtrStr,0,true,false, false);
   b4e5e:	2300      	movs	r3, #0
   b4e60:	9300      	str	r3, [sp, #0]
   b4e62:	2201      	movs	r2, #1
   b4e64:	4619      	mov	r1, r3
   b4e66:	a802      	add	r0, sp, #8
   b4e68:	f7ff fee6 	bl	b4c38 <_Z8sendDataPKchbbb>
    delay(100);
   b4e6c:	2064      	movs	r0, #100	; 0x64
   b4e6e:	f005 f8bb 	bl	b9fe8 <delay>
}
   b4e72:	b007      	add	sp, #28
   b4e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(HSet > 0){
   b4e78:	2d00      	cmp	r5, #0
   b4e7a:	f43f af7b 	beq.w	b4d74 <_Z18manualMotorControlh+0x60>
            if(HSet > (0-VSet)){        // H = 90, V = 0 -> LS = 135, RS = 45, H = 90, V = -90 -> LS = 0; RS = 45
   b4e7e:	4273      	negs	r3, r6
   b4e80:	42ab      	cmp	r3, r5
                LSpeed = 90 + HSet/2 + VSet/2;
   b4e82:	ea4f 0765 	mov.w	r7, r5, asr #1
            if(HSet > (0-VSet)){        // H = 90, V = 0 -> LS = 135, RS = 45, H = 90, V = -90 -> LS = 0; RS = 45
   b4e86:	da20      	bge.n	b4eca <_Z18manualMotorControlh+0x1b6>
                Serial.println("Hello World!!!!!!!");
   b4e88:	f008 fcf4 	bl	bd874 <_Z16_fetch_usbserialv>
   b4e8c:	491c      	ldr	r1, [pc, #112]	; (b4f00 <_Z18manualMotorControlh+0x1ec>)
   b4e8e:	f008 f8fc 	bl	bd08a <_ZN5Print7printlnEPKc>
                LSpeed = (90 + HSet/2 + VSet*1.5 );
   b4e92:	f107 005a 	add.w	r0, r7, #90	; 0x5a
   b4e96:	f009 f9c9 	bl	be22c <__aeabi_i2d>
   b4e9a:	4680      	mov	r8, r0
   b4e9c:	4630      	mov	r0, r6
   b4e9e:	4689      	mov	r9, r1
   b4ea0:	f009 f9c4 	bl	be22c <__aeabi_i2d>
   b4ea4:	4b13      	ldr	r3, [pc, #76]	; (b4ef4 <_Z18manualMotorControlh+0x1e0>)
   b4ea6:	2200      	movs	r2, #0
   b4ea8:	f009 fa2a 	bl	be300 <__aeabi_dmul>
   b4eac:	460b      	mov	r3, r1
   b4eae:	4602      	mov	r2, r0
   b4eb0:	4649      	mov	r1, r9
   b4eb2:	4640      	mov	r0, r8
   b4eb4:	f009 f86e 	bl	bdf94 <__adddf3>
   b4eb8:	f009 fcbc 	bl	be834 <__aeabi_d2uiz>
                RSpeed = (90 - HSet/2);      
   b4ebc:	eb05 71d5 	add.w	r1, r5, r5, lsr #31
   b4ec0:	1049      	asrs	r1, r1, #1
                LSpeed = (90 + HSet/2 + VSet*1.5 );
   b4ec2:	b2c3      	uxtb	r3, r0
                RSpeed = (90 - HSet/2);      
   b4ec4:	f1c1 015a 	rsb	r1, r1, #90	; 0x5a
   b4ec8:	e7bd      	b.n	b4e46 <_Z18manualMotorControlh+0x132>
                LSpeed = 90 + VSet;
   b4eca:	f106 015a 	add.w	r1, r6, #90	; 0x5a
   b4ece:	b2cb      	uxtb	r3, r1
                RSpeed = 90 + HSet/2 + VSet;
   b4ed0:	fa57 f181 	uxtab	r1, r7, r1
   b4ed4:	e7b7      	b.n	b4e46 <_Z18manualMotorControlh+0x132>
                RSpeed = 90 + VSet;
   b4ed6:	365a      	adds	r6, #90	; 0x5a
   b4ed8:	b2f1      	uxtb	r1, r6
                LSpeed = 90 - HSet/2 + VSet;
   b4eda:	fa53 f386 	uxtab	r3, r3, r6
   b4ede:	e7a2      	b.n	b4e26 <_Z18manualMotorControlh+0x112>
                LSpeed = 90 + VSet;
   b4ee0:	4613      	mov	r3, r2
   b4ee2:	e7b1      	b.n	b4e48 <_Z18manualMotorControlh+0x134>
                RSpeed = 90 + VSet;
   b4ee4:	4611      	mov	r1, r2
   b4ee6:	e7af      	b.n	b4e48 <_Z18manualMotorControlh+0x134>
        if(HSet < -90) HSet = -90;
   b4ee8:	460d      	mov	r5, r1
   b4eea:	e741      	b.n	b4d70 <_Z18manualMotorControlh+0x5c>
   b4eec:	0002cb33 	.word	0x0002cb33
   b4ef0:	fffff824 	.word	0xfffff824
   b4ef4:	3ff80000 	.word	0x3ff80000
   b4ef8:	0002cad8 	.word	0x0002cad8
   b4efc:	000c0d77 	.word	0x000c0d77
   b4f00:	000c0d64 	.word	0x000c0d64

000b4f04 <_Z14XBeeLTEPairSetv>:
void XBeeLTEPairSet(){
   b4f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4f08:	4d0e      	ldr	r5, [pc, #56]	; (b4f44 <_Z14XBeeLTEPairSetv+0x40>)
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b4f0a:	4f0f      	ldr	r7, [pc, #60]	; (b4f48 <_Z14XBeeLTEPairSetv+0x44>)
   b4f0c:	e9d5 4800 	ldrd	r4, r8, [r5]
void XBeeLTEPairSet(){
   b4f10:	b088      	sub	sp, #32
    for(WaterBot p: PairBots){
   b4f12:	45a0      	cmp	r8, r4
   b4f14:	d013      	beq.n	b4f3e <_Z14XBeeLTEPairSetv+0x3a>
   b4f16:	79a3      	ldrb	r3, [r4, #6]
   b4f18:	7966      	ldrb	r6, [r4, #5]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b4f1a:	78a2      	ldrb	r2, [r4, #2]
    for(WaterBot p: PairBots){
   b4f1c:	9303      	str	r3, [sp, #12]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b4f1e:	4639      	mov	r1, r7
   b4f20:	a805      	add	r0, sp, #20
   b4f22:	f005 f811 	bl	b9f48 <sprintf>
        sendData(replyStr,0,true,p.XBeeAvail,p.LTEAvail);
   b4f26:	9b03      	ldr	r3, [sp, #12]
   b4f28:	9600      	str	r6, [sp, #0]
   b4f2a:	2201      	movs	r2, #1
   b4f2c:	2100      	movs	r1, #0
   b4f2e:	a805      	add	r0, sp, #20
   b4f30:	f7ff fe82 	bl	b4c38 <_Z8sendDataPKchbbb>
   b4f34:	686b      	ldr	r3, [r5, #4]
   b4f36:	3b3c      	subs	r3, #60	; 0x3c
   b4f38:	606b      	str	r3, [r5, #4]
      operator++() _GLIBCXX_NOEXCEPT
   b4f3a:	343c      	adds	r4, #60	; 0x3c
	return *this;
   b4f3c:	e7e9      	b.n	b4f12 <_Z14XBeeLTEPairSetv+0xe>
}
   b4f3e:	b008      	add	sp, #32
   b4f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4f44:	2003dca0 	.word	0x2003dca0
   b4f48:	000c0d88 	.word	0x000c0d88

000b4f4c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>:
      at(size_type __n)
   b4f4c:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f4e:	e9d0 4200 	ldrd	r4, r2, [r0]
   b4f52:	4806      	ldr	r0, [pc, #24]	; (b4f6c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x20>)
   b4f54:	1b12      	subs	r2, r2, r4
   b4f56:	1092      	asrs	r2, r2, #2
   b4f58:	4342      	muls	r2, r0
	if (__n >= this->size())
   b4f5a:	4291      	cmp	r1, r2
   b4f5c:	d302      	bcc.n	b4f64 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b4f5e:	4804      	ldr	r0, [pc, #16]	; (b4f70 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x24>)
   b4f60:	f008 fe4f 	bl	bdc02 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4f64:	2024      	movs	r0, #36	; 0x24
   b4f66:	fb00 4001 	mla	r0, r0, r1, r4
   b4f6a:	bd10      	pop	{r4, pc}
   b4f6c:	38e38e39 	.word	0x38e38e39
   b4f70:	000c0d91 	.word	0x000c0d91

000b4f74 <_Z8uHandlerv>:
    redrawMenu = true;  
   b4f74:	4b10      	ldr	r3, [pc, #64]	; (b4fb8 <_Z8uHandlerv+0x44>)
void uHandler(){
   b4f76:	b510      	push	{r4, lr}
    redrawMenu = true;  
   b4f78:	2201      	movs	r2, #1
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4f7a:	4c10      	ldr	r4, [pc, #64]	; (b4fbc <_Z8uHandlerv+0x48>)
    redrawMenu = true;  
   b4f7c:	701a      	strb	r2, [r3, #0]
   b4f7e:	f004 fd57 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4f82:	6823      	ldr	r3, [r4, #0]
   b4f84:	1ac0      	subs	r0, r0, r3
   b4f86:	2895      	cmp	r0, #149	; 0x95
   b4f88:	d914      	bls.n	b4fb4 <_Z8uHandlerv+0x40>
   b4f8a:	f004 fd51 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
    if(menuItem) menuItem--;
   b4f8e:	4a0c      	ldr	r2, [pc, #48]	; (b4fc0 <_Z8uHandlerv+0x4c>)
    debounceTime = millis();
   b4f90:	6020      	str	r0, [r4, #0]
    if(menuItem) menuItem--;
   b4f92:	7813      	ldrb	r3, [r2, #0]
   b4f94:	b10b      	cbz	r3, b4f9a <_Z8uHandlerv+0x26>
   b4f96:	3b01      	subs	r3, #1
   b4f98:	7013      	strb	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);
   b4f9a:	7811      	ldrb	r1, [r2, #0]
   b4f9c:	4809      	ldr	r0, [pc, #36]	; (b4fc4 <_Z8uHandlerv+0x50>)
   b4f9e:	f7ff ffd5 	bl	b4f4c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b4fa2:	4b09      	ldr	r3, [pc, #36]	; (b4fc8 <_Z8uHandlerv+0x54>)
   b4fa4:	6018      	str	r0, [r3, #0]
    Serial.println("Up trigger");
   b4fa6:	f008 fc65 	bl	bd874 <_Z16_fetch_usbserialv>
}
   b4faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("Up trigger");
   b4fae:	4907      	ldr	r1, [pc, #28]	; (b4fcc <_Z8uHandlerv+0x58>)
   b4fb0:	f008 b86b 	b.w	bd08a <_ZN5Print7printlnEPKc>
}
   b4fb4:	bd10      	pop	{r4, pc}
   b4fb6:	bf00      	nop
   b4fb8:	2003da90 	.word	0x2003da90
   b4fbc:	2003dd6c 	.word	0x2003dd6c
   b4fc0:	2003de11 	.word	0x2003de11
   b4fc4:	2003dc94 	.word	0x2003dc94
   b4fc8:	2003dcb8 	.word	0x2003dcb8
   b4fcc:	000c0ddb 	.word	0x000c0ddb

000b4fd0 <_Z8dHandlerv>:
    redrawMenu = true;  
   b4fd0:	4b10      	ldr	r3, [pc, #64]	; (b5014 <_Z8dHandlerv+0x44>)
void dHandler(){
   b4fd2:	b510      	push	{r4, lr}
    redrawMenu = true;  
   b4fd4:	2201      	movs	r2, #1
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4fd6:	4c10      	ldr	r4, [pc, #64]	; (b5018 <_Z8dHandlerv+0x48>)
    redrawMenu = true;  
   b4fd8:	701a      	strb	r2, [r3, #0]
   b4fda:	f004 fd29 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4fde:	6823      	ldr	r3, [r4, #0]
   b4fe0:	1ac0      	subs	r0, r0, r3
   b4fe2:	2895      	cmp	r0, #149	; 0x95
   b4fe4:	d915      	bls.n	b5012 <_Z8dHandlerv+0x42>
   b4fe6:	f004 fd23 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
   b4fea:	4a0c      	ldr	r2, [pc, #48]	; (b501c <_Z8dHandlerv+0x4c>)
    debounceTime = millis();
   b4fec:	6020      	str	r0, [r4, #0]
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
   b4fee:	7813      	ldrb	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);
   b4ff0:	480b      	ldr	r0, [pc, #44]	; (b5020 <_Z8dHandlerv+0x50>)
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
   b4ff2:	2b03      	cmp	r3, #3
   b4ff4:	bf9c      	itt	ls
   b4ff6:	3301      	addls	r3, #1
   b4ff8:	7013      	strbls	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);
   b4ffa:	7811      	ldrb	r1, [r2, #0]
   b4ffc:	f7ff ffa6 	bl	b4f4c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b5000:	4b08      	ldr	r3, [pc, #32]	; (b5024 <_Z8dHandlerv+0x54>)
   b5002:	6018      	str	r0, [r3, #0]
    Serial.println("Down trigger");
   b5004:	f008 fc36 	bl	bd874 <_Z16_fetch_usbserialv>
}
   b5008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("Down trigger");
   b500c:	4906      	ldr	r1, [pc, #24]	; (b5028 <_Z8dHandlerv+0x58>)
   b500e:	f008 b83c 	b.w	bd08a <_ZN5Print7printlnEPKc>
}
   b5012:	bd10      	pop	{r4, pc}
   b5014:	2003da90 	.word	0x2003da90
   b5018:	2003dd6c 	.word	0x2003dd6c
   b501c:	2003de11 	.word	0x2003de11
   b5020:	2003dc94 	.word	0x2003dc94
   b5024:	2003dcb8 	.word	0x2003dcb8
   b5028:	000c0de6 	.word	0x000c0de6

000b502c <_ZNSt6vectorI6StringSaIS0_EE2atEj>:
      at(size_type __n)
   b502c:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b502e:	e9d0 5400 	ldrd	r5, r4, [r0]
   b5032:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
   b5034:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5038:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
   b503c:	d302      	bcc.n	b5044 <_ZNSt6vectorI6StringSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b503e:	4803      	ldr	r0, [pc, #12]	; (b504c <_ZNSt6vectorI6StringSaIS0_EE2atEj+0x20>)
   b5040:	f008 fddf 	bl	bdc02 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b5044:	eb05 1001 	add.w	r0, r5, r1, lsl #4
   b5048:	bd38      	pop	{r3, r4, r5, pc}
   b504a:	bf00      	nop
   b504c:	000c0d91 	.word	0x000c0d91

000b5050 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>:
      at(size_type __n)
   b5050:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5052:	e9d0 4200 	ldrd	r4, r2, [r0]
   b5056:	4806      	ldr	r0, [pc, #24]	; (b5070 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x20>)
   b5058:	1b12      	subs	r2, r2, r4
   b505a:	1092      	asrs	r2, r2, #2
   b505c:	4342      	muls	r2, r0
	if (__n >= this->size())
   b505e:	4291      	cmp	r1, r2
   b5060:	d302      	bcc.n	b5068 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b5062:	4804      	ldr	r0, [pc, #16]	; (b5074 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x24>)
   b5064:	f008 fdcd 	bl	bdc02 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b5068:	203c      	movs	r0, #60	; 0x3c
   b506a:	fb00 4001 	mla	r0, r0, r1, r4
   b506e:	bd10      	pop	{r4, pc}
   b5070:	eeeeeeef 	.word	0xeeeeeeef
   b5074:	000c0d91 	.word	0x000c0d91

000b5078 <_Z16updateBotControlv>:
void updateBotControl(){
   b5078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(updateControl){
   b507c:	4b4a      	ldr	r3, [pc, #296]	; (b51a8 <_Z16updateBotControlv+0x130>)
   b507e:	781a      	ldrb	r2, [r3, #0]
void updateBotControl(){
   b5080:	b097      	sub	sp, #92	; 0x5c
    if(updateControl){
   b5082:	2a00      	cmp	r2, #0
   b5084:	d03a      	beq.n	b50fc <_Z16updateBotControlv+0x84>
        updateControl = false;
   b5086:	2200      	movs	r2, #0
   b5088:	701a      	strb	r2, [r3, #0]
      : _M_current(__i) { }
   b508a:	4b48      	ldr	r3, [pc, #288]	; (b51ac <_Z16updateBotControlv+0x134>)
                sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum, wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b508c:	4f48      	ldr	r7, [pc, #288]	; (b51b0 <_Z16updateBotControlv+0x138>)
                Serial.printlnf("Control Packet: %s",statusStr);
   b508e:	f8df 8134 	ldr.w	r8, [pc, #308]	; b51c4 <_Z16updateBotControlv+0x14c>
                sendData(statusStr,0,true,true,statusTimeout);
   b5092:	f8df 9128 	ldr.w	r9, [pc, #296]	; b51bc <_Z16updateBotControlv+0x144>
   b5096:	e9d3 4600 	ldrd	r4, r6, [r3]
        for(WaterBot &wb: WaterBots){
   b509a:	42a6      	cmp	r6, r4
   b509c:	d02e      	beq.n	b50fc <_Z16updateBotControlv+0x84>
            if(wb.updatedControl){
   b509e:	7863      	ldrb	r3, [r4, #1]
   b50a0:	b353      	cbz	r3, b50f8 <_Z16updateBotControlv+0x80>
                wb.updatedControl = false;
   b50a2:	2500      	movs	r5, #0
   b50a4:	7065      	strb	r5, [r4, #1]
   b50a6:	f004 fcc3 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
                sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum, wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b50aa:	7a23      	ldrb	r3, [r4, #8]
   b50ac:	78a2      	ldrb	r2, [r4, #2]
                wb.publishTime = millis();
   b50ae:	6360      	str	r0, [r4, #52]	; 0x34
                sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum, wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b50b0:	9306      	str	r3, [sp, #24]
   b50b2:	7ae3      	ldrb	r3, [r4, #11]
   b50b4:	9305      	str	r3, [sp, #20]
   b50b6:	79e3      	ldrb	r3, [r4, #7]
   b50b8:	9304      	str	r3, [sp, #16]
   b50ba:	6960      	ldr	r0, [r4, #20]
   b50bc:	9209      	str	r2, [sp, #36]	; 0x24
   b50be:	f009 f8c7 	bl	be250 <__aeabi_f2d>
   b50c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b50c6:	6920      	ldr	r0, [r4, #16]
   b50c8:	f009 f8c2 	bl	be250 <__aeabi_f2d>
   b50cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b50ce:	e9cd 0100 	strd	r0, r1, [sp]
   b50d2:	4639      	mov	r1, r7
   b50d4:	a80b      	add	r0, sp, #44	; 0x2c
   b50d6:	f004 ff37 	bl	b9f48 <sprintf>
                Serial.printlnf("Control Packet: %s",statusStr);
   b50da:	f008 fbcb 	bl	bd874 <_Z16_fetch_usbserialv>
   b50de:	aa0b      	add	r2, sp, #44	; 0x2c
   b50e0:	4641      	mov	r1, r8
   b50e2:	f7ff f937 	bl	b4354 <_ZN5Print8printlnfEPKcz>
                sendData(statusStr,0,true,true,statusTimeout);
   b50e6:	f899 3000 	ldrb.w	r3, [r9]
   b50ea:	9300      	str	r3, [sp, #0]
   b50ec:	2301      	movs	r3, #1
   b50ee:	461a      	mov	r2, r3
   b50f0:	4629      	mov	r1, r5
   b50f2:	a80b      	add	r0, sp, #44	; 0x2c
   b50f4:	f7ff fda0 	bl	b4c38 <_Z8sendDataPKchbbb>
      operator++() _GLIBCXX_NOEXCEPT
   b50f8:	343c      	adds	r4, #60	; 0x3c
	return *this;
   b50fa:	e7ce      	b.n	b509a <_Z16updateBotControlv+0x22>
    if(millis() - controlUpdateTime > CONTROL_PUB_TIME){
   b50fc:	4c2d      	ldr	r4, [pc, #180]	; (b51b4 <_Z16updateBotControlv+0x13c>)
   b50fe:	f004 fc97 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
   b5102:	6823      	ldr	r3, [r4, #0]
   b5104:	1ac0      	subs	r0, r0, r3
   b5106:	f241 3388 	movw	r3, #5000	; 0x1388
   b510a:	4298      	cmp	r0, r3
   b510c:	d93f      	bls.n	b518e <_Z16updateBotControlv+0x116>
   b510e:	f004 fc8f 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
        controlUpdateTime = millis();
   b5112:	6020      	str	r0, [r4, #0]
        if(controlUpdateID == -1){
   b5114:	4c28      	ldr	r4, [pc, #160]	; (b51b8 <_Z16updateBotControlv+0x140>)
   b5116:	4d25      	ldr	r5, [pc, #148]	; (b51ac <_Z16updateBotControlv+0x134>)
   b5118:	6822      	ldr	r2, [r4, #0]
   b511a:	1c53      	adds	r3, r2, #1
   b511c:	d13a      	bne.n	b5194 <_Z16updateBotControlv+0x11c>
            if(WaterBots.size() != 0) controlUpdateID = 0;
   b511e:	e9d5 3200 	ldrd	r3, r2, [r5]
   b5122:	429a      	cmp	r2, r3
   b5124:	d033      	beq.n	b518e <_Z16updateBotControlv+0x116>
   b5126:	2300      	movs	r3, #0
   b5128:	6023      	str	r3, [r4, #0]
        WaterBot wb = WaterBots.at(controlUpdateID);
   b512a:	6821      	ldr	r1, [r4, #0]
   b512c:	481f      	ldr	r0, [pc, #124]	; (b51ac <_Z16updateBotControlv+0x134>)
   b512e:	f7ff ff8f 	bl	b5050 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
        sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum,wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b5132:	7a03      	ldrb	r3, [r0, #8]
   b5134:	7882      	ldrb	r2, [r0, #2]
   b5136:	9306      	str	r3, [sp, #24]
   b5138:	7ac3      	ldrb	r3, [r0, #11]
   b513a:	9305      	str	r3, [sp, #20]
   b513c:	79c3      	ldrb	r3, [r0, #7]
   b513e:	9304      	str	r3, [sp, #16]
        WaterBot wb = WaterBots.at(controlUpdateID);
   b5140:	4606      	mov	r6, r0
        sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum,wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b5142:	6940      	ldr	r0, [r0, #20]
   b5144:	9209      	str	r2, [sp, #36]	; 0x24
   b5146:	f009 f883 	bl	be250 <__aeabi_f2d>
   b514a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b514e:	6930      	ldr	r0, [r6, #16]
   b5150:	f009 f87e 	bl	be250 <__aeabi_f2d>
   b5154:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b5156:	e9cd 0100 	strd	r0, r1, [sp]
   b515a:	4915      	ldr	r1, [pc, #84]	; (b51b0 <_Z16updateBotControlv+0x138>)
   b515c:	a80b      	add	r0, sp, #44	; 0x2c
   b515e:	f004 fef3 	bl	b9f48 <sprintf>
        sendData(statusStr,0,true,true,statusTimeout);
   b5162:	4b16      	ldr	r3, [pc, #88]	; (b51bc <_Z16updateBotControlv+0x144>)
   b5164:	781b      	ldrb	r3, [r3, #0]
   b5166:	9300      	str	r3, [sp, #0]
   b5168:	2301      	movs	r3, #1
   b516a:	461a      	mov	r2, r3
   b516c:	2100      	movs	r1, #0
   b516e:	a80b      	add	r0, sp, #44	; 0x2c
   b5170:	f7ff fd62 	bl	b4c38 <_Z8sendDataPKchbbb>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5174:	e9d5 1300 	ldrd	r1, r3, [r5]
   b5178:	1a5b      	subs	r3, r3, r1
   b517a:	4911      	ldr	r1, [pc, #68]	; (b51c0 <_Z16updateBotControlv+0x148>)
        if(controlUpdateID < WaterBots.size()-1) controlUpdateID++;
   b517c:	6822      	ldr	r2, [r4, #0]
   b517e:	109b      	asrs	r3, r3, #2
   b5180:	434b      	muls	r3, r1
   b5182:	3b01      	subs	r3, #1
   b5184:	4293      	cmp	r3, r2
   b5186:	bf8c      	ite	hi
   b5188:	3201      	addhi	r2, #1
        else controlUpdateID = 0;
   b518a:	2200      	movls	r2, #0
   b518c:	6022      	str	r2, [r4, #0]
}
   b518e:	b017      	add	sp, #92	; 0x5c
   b5190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5194:	e9d5 1300 	ldrd	r1, r3, [r5]
   b5198:	1a5b      	subs	r3, r3, r1
   b519a:	4909      	ldr	r1, [pc, #36]	; (b51c0 <_Z16updateBotControlv+0x148>)
   b519c:	109b      	asrs	r3, r3, #2
   b519e:	434b      	muls	r3, r1
        if(controlUpdateID > WaterBots.size()-1) controlUpdateID = 0;
   b51a0:	3b01      	subs	r3, #1
   b51a2:	4293      	cmp	r3, r2
   b51a4:	d3bf      	bcc.n	b5126 <_Z16updateBotControlv+0xae>
   b51a6:	e7c0      	b.n	b512a <_Z16updateBotControlv+0xb2>
   b51a8:	2003e63a 	.word	0x2003e63a
   b51ac:	2003dcc8 	.word	0x2003dcc8
   b51b0:	000c0df3 	.word	0x000c0df3
   b51b4:	2003dd68 	.word	0x2003dd68
   b51b8:	2003dd64 	.word	0x2003dd64
   b51bc:	2003e639 	.word	0x2003e639
   b51c0:	eeeeeeef 	.word	0xeeeeeeef
   b51c4:	000c0e10 	.word	0x000c0e10

000b51c8 <_ZNSt6vectorI6StringSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b51c8:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b51ca:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b51ce:	4604      	mov	r4, r0
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b51d0:	42ae      	cmp	r6, r5
   b51d2:	d004      	beq.n	b51de <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x16>
      __pointer->~_Tp();
   b51d4:	4628      	mov	r0, r5
   b51d6:	f008 f8b5 	bl	bd344 <_ZN6StringD1Ev>
	  for (; __first != __last; ++__first)
   b51da:	3510      	adds	r5, #16
   b51dc:	e7f8      	b.n	b51d0 <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b51de:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b51e0:	b118      	cbz	r0, b51ea <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b51e2:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b51e4:	1a09      	subs	r1, r1, r0
   b51e6:	f7fe ff5a 	bl	b409e <_ZdlPvj>
      }
   b51ea:	4620      	mov	r0, r4
   b51ec:	bd70      	pop	{r4, r5, r6, pc}

000b51ee <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b51ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b51f0:	4604      	mov	r4, r0
   b51f2:	460e      	mov	r6, r1
   b51f4:	4615      	mov	r5, r2
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
   b51f6:	2700      	movs	r7, #0
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
   b51f8:	42b4      	cmp	r4, r6
   b51fa:	d029      	beq.n	b5250 <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x62>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b51fc:	b315      	cbz	r5, b5244 <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x56>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
   b51fe:	6823      	ldr	r3, [r4, #0]
	  _M_end_of_storage(__x._M_end_of_storage)
   b5200:	602b      	str	r3, [r5, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
   b5202:	6863      	ldr	r3, [r4, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
   b5204:	606b      	str	r3, [r5, #4]
   b5206:	68a3      	ldr	r3, [r4, #8]
   b5208:	60ab      	str	r3, [r5, #8]
class MenuItem{
   b520a:	68e3      	ldr	r3, [r4, #12]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
   b520c:	6027      	str	r7, [r4, #0]
   b520e:	e9c4 7701 	strd	r7, r7, [r4, #4]
   b5212:	60eb      	str	r3, [r5, #12]
   b5214:	6923      	ldr	r3, [r4, #16]
   b5216:	612b      	str	r3, [r5, #16]
   b5218:	7d23      	ldrb	r3, [r4, #20]
   b521a:	752b      	strb	r3, [r5, #20]
   b521c:	7d63      	ldrb	r3, [r4, #21]
   b521e:	756b      	strb	r3, [r5, #21]
   b5220:	7da3      	ldrb	r3, [r4, #22]
   b5222:	75ab      	strb	r3, [r5, #22]
   b5224:	7de3      	ldrb	r3, [r4, #23]
   b5226:	75eb      	strb	r3, [r5, #23]
   b5228:	7e23      	ldrb	r3, [r4, #24]
   b522a:	762b      	strb	r3, [r5, #24]
   b522c:	7e63      	ldrb	r3, [r4, #25]
   b522e:	766b      	strb	r3, [r5, #25]
   b5230:	f8d4 301a 	ldr.w	r3, [r4, #26]
   b5234:	f8c5 301a 	str.w	r3, [r5, #26]
   b5238:	f8d4 301e 	ldr.w	r3, [r4, #30]
   b523c:	f8c5 301e 	str.w	r3, [r5, #30]
   b5240:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b5242:	846b      	strh	r3, [r5, #34]	; 0x22
   b5244:	4620      	mov	r0, r4
   b5246:	f7ff ffbf 	bl	b51c8 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b524a:	3424      	adds	r4, #36	; 0x24
   b524c:	3524      	adds	r5, #36	; 0x24
   b524e:	e7d3      	b.n	b51f8 <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0xa>
	std::__relocate_object_a(std::__addressof(*__cur),
				 std::__addressof(*__first), __alloc);
      return __cur;
    }
   b5250:	4628      	mov	r0, r5
   b5252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5254 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b5254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5258:	e9d0 8a00 	ldrd	r8, sl, [r0]
   b525c:	4b2f      	ldr	r3, [pc, #188]	; (b531c <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc8>)
   b525e:	ebaa 0408 	sub.w	r4, sl, r8
   b5262:	435c      	muls	r4, r3

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b5264:	4b2e      	ldr	r3, [pc, #184]	; (b5320 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>)
   b5266:	429c      	cmp	r4, r3
   b5268:	4689      	mov	r9, r1
   b526a:	4607      	mov	r7, r0
   b526c:	4611      	mov	r1, r2
   b526e:	d102      	bne.n	b5276 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x22>
	  __throw_length_error(__N(__s));
   b5270:	482c      	ldr	r0, [pc, #176]	; (b5324 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd0>)
   b5272:	f008 fcc3 	bl	bdbfc <_ZSt20__throw_length_errorPKc>
   b5276:	2c01      	cmp	r4, #1
   b5278:	4622      	mov	r2, r4
   b527a:	bf38      	it	cc
   b527c:	2201      	movcc	r2, #1
   b527e:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b5280:	eba9 0508 	sub.w	r5, r9, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5284:	d21d      	bcs.n	b52c2 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5286:	b1f4      	cbz	r4, b52c6 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
   b5288:	429c      	cmp	r4, r3
   b528a:	bf28      	it	cs
   b528c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b528e:	2049      	movs	r0, #73	; 0x49
   b5290:	4360      	muls	r0, r4
   b5292:	9101      	str	r1, [sp, #4]
   b5294:	f7fe feff 	bl	b4096 <_Znwj>
   b5298:	9901      	ldr	r1, [sp, #4]
   b529a:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b529c:	1970      	adds	r0, r6, r5
   b529e:	d002      	beq.n	b52a6 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x52>
   b52a0:	2249      	movs	r2, #73	; 0x49
   b52a2:	f009 fb72 	bl	be98a <memcpy>
   b52a6:	4633      	mov	r3, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b52a8:	4645      	mov	r5, r8
      for (; __first != __last; ++__first, (void)++__cur)
   b52aa:	45a9      	cmp	r9, r5
   b52ac:	d00d      	beq.n	b52ca <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x76>
   b52ae:	b12b      	cbz	r3, b52bc <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x68>
   b52b0:	4618      	mov	r0, r3
   b52b2:	2249      	movs	r2, #73	; 0x49
   b52b4:	4629      	mov	r1, r5
   b52b6:	f009 fb68 	bl	be98a <memcpy>
   b52ba:	4603      	mov	r3, r0
   b52bc:	3549      	adds	r5, #73	; 0x49
   b52be:	3349      	adds	r3, #73	; 0x49
   b52c0:	e7f3      	b.n	b52aa <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x56>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b52c2:	461c      	mov	r4, r3
   b52c4:	e7e3      	b.n	b528e <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b52c6:	4626      	mov	r6, r4
   b52c8:	e7e8      	b.n	b529c <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x48>
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   b52ca:	eba5 0908 	sub.w	r9, r5, r8
   b52ce:	f109 0949 	add.w	r9, r9, #73	; 0x49
   b52d2:	44b1      	add	r9, r6
   b52d4:	462b      	mov	r3, r5
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b52d6:	46cb      	mov	fp, r9
      for (; __first != __last; ++__first, (void)++__cur)
   b52d8:	4555      	cmp	r5, sl
   b52da:	f10b 0b49 	add.w	fp, fp, #73	; 0x49
   b52de:	d009      	beq.n	b52f4 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa0>
   b52e0:	4629      	mov	r1, r5
   b52e2:	2249      	movs	r2, #73	; 0x49
   b52e4:	f1ab 0049 	sub.w	r0, fp, #73	; 0x49
   b52e8:	9301      	str	r3, [sp, #4]
   b52ea:	3549      	adds	r5, #73	; 0x49
   b52ec:	f009 fb4d 	bl	be98a <memcpy>
   b52f0:	9b01      	ldr	r3, [sp, #4]
   b52f2:	e7f1      	b.n	b52d8 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x84>
   b52f4:	1aed      	subs	r5, r5, r3
   b52f6:	444d      	add	r5, r9
	if (__p)
   b52f8:	f1b8 0f00 	cmp.w	r8, #0
   b52fc:	d005      	beq.n	b530a <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb6>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b52fe:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b5300:	4640      	mov	r0, r8
   b5302:	eba1 0108 	sub.w	r1, r1, r8
   b5306:	f7fe feca 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b530a:	2049      	movs	r0, #73	; 0x49
   b530c:	fb00 6404 	mla	r4, r0, r4, r6
      this->_M_impl._M_finish = __new_finish;
   b5310:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5314:	60bc      	str	r4, [r7, #8]
    }
   b5316:	b003      	add	sp, #12
   b5318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b531c:	c7e3f1f9 	.word	0xc7e3f1f9
   b5320:	01c0e070 	.word	0x01c0e070
   b5324:	000c0e23 	.word	0x000c0e23

000b5328 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b5328:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b532a:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   b532e:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   b5330:	4604      	mov	r4, r0
   b5332:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5334:	d008      	beq.n	b5348 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_+0x20>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5336:	b11b      	cbz	r3, b5340 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_+0x18>
   b5338:	2249      	movs	r2, #73	; 0x49
   b533a:	4618      	mov	r0, r3
   b533c:	f009 fb25 	bl	be98a <memcpy>
	    ++this->_M_impl._M_finish;
   b5340:	6863      	ldr	r3, [r4, #4]
   b5342:	3349      	adds	r3, #73	; 0x49
   b5344:	6063      	str	r3, [r4, #4]
      }
   b5346:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   b5348:	4619      	mov	r1, r3
   b534a:	f7ff ff83 	bl	b5254 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b534e:	e7fa      	b.n	b5346 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_+0x1e>

000b5350 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b5350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5354:	6843      	ldr	r3, [r0, #4]
   b5356:	f8d0 a000 	ldr.w	sl, [r0]
   b535a:	9301      	str	r3, [sp, #4]
   b535c:	eba3 060a 	sub.w	r6, r3, sl
   b5360:	4b44      	ldr	r3, [pc, #272]	; (b5474 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x124>)
   b5362:	10b6      	asrs	r6, r6, #2
   b5364:	435e      	muls	r6, r3
	if (max_size() - size() < __n)
   b5366:	4b44      	ldr	r3, [pc, #272]	; (b5478 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x128>)
   b5368:	429e      	cmp	r6, r3
   b536a:	4681      	mov	r9, r0
   b536c:	468b      	mov	fp, r1
   b536e:	4615      	mov	r5, r2
   b5370:	d102      	bne.n	b5378 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x28>
	  __throw_length_error(__N(__s));
   b5372:	4842      	ldr	r0, [pc, #264]	; (b547c <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x12c>)
   b5374:	f008 fc42 	bl	bdbfc <_ZSt20__throw_length_errorPKc>
   b5378:	2e01      	cmp	r6, #1
   b537a:	4632      	mov	r2, r6
   b537c:	bf38      	it	cc
   b537e:	2201      	movcc	r2, #1
   b5380:	18b6      	adds	r6, r6, r2
   b5382:	eba1 070a 	sub.w	r7, r1, sl
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5386:	d22d      	bcs.n	b53e4 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5388:	b376      	cbz	r6, b53e8 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
   b538a:	429e      	cmp	r6, r3
   b538c:	bf28      	it	cs
   b538e:	461e      	movcs	r6, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5390:	203c      	movs	r0, #60	; 0x3c
   b5392:	4370      	muls	r0, r6
   b5394:	f7fe fe7f 	bl	b4096 <_Znwj>
   b5398:	4680      	mov	r8, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b539a:	eb18 0407 	adds.w	r4, r8, r7
   b539e:	d009      	beq.n	b53b4 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x64>
   b53a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b53a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b53a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b53a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b53a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b53aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b53ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b53b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b53b4:	46c4      	mov	ip, r8
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b53b6:	46d6      	mov	lr, sl
   b53b8:	45f3      	cmp	fp, lr
   b53ba:	d017      	beq.n	b53ec <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>
   b53bc:	f1bc 0f00 	cmp.w	ip, #0
   b53c0:	d00b      	beq.n	b53da <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8a>
   b53c2:	4675      	mov	r5, lr
   b53c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b53c6:	4664      	mov	r4, ip
   b53c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b53ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b53cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b53ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b53d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b53d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b53d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b53da:	f10e 0e3c 	add.w	lr, lr, #60	; 0x3c
   b53de:	f10c 0c3c 	add.w	ip, ip, #60	; 0x3c
   b53e2:	e7e9      	b.n	b53b8 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x68>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b53e4:	461e      	mov	r6, r3
   b53e6:	e7d3      	b.n	b5390 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x40>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b53e8:	46b0      	mov	r8, r6
   b53ea:	e7d6      	b.n	b539a <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   b53ec:	f8df e090 	ldr.w	lr, [pc, #144]	; b5480 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x130>
   b53f0:	08bf      	lsrs	r7, r7, #2
   b53f2:	fb0e f707 	mul.w	r7, lr, r7
   b53f6:	233c      	movs	r3, #60	; 0x3c
   b53f8:	f027 4740 	bic.w	r7, r7, #3221225472	; 0xc0000000
   b53fc:	435f      	muls	r7, r3
   b53fe:	eb0a 0b07 	add.w	fp, sl, r7
	      ++__new_finish;
   b5402:	441f      	add	r7, r3
   b5404:	eb08 0307 	add.w	r3, r8, r7
   b5408:	9300      	str	r3, [sp, #0]
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b540a:	469c      	mov	ip, r3
   b540c:	465f      	mov	r7, fp
      for (; __first != __last; ++__first, (void)++__cur)
   b540e:	9b01      	ldr	r3, [sp, #4]
   b5410:	429f      	cmp	r7, r3
   b5412:	f10c 0c3c 	add.w	ip, ip, #60	; 0x3c
   b5416:	d00e      	beq.n	b5436 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe6>
   b5418:	463d      	mov	r5, r7
   b541a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b541c:	f1ac 043c 	sub.w	r4, ip, #60	; 0x3c
   b5420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5426:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b542a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b542e:	373c      	adds	r7, #60	; 0x3c
   b5430:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b5434:	e7eb      	b.n	b540e <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbe>
   b5436:	eba7 070b 	sub.w	r7, r7, fp
   b543a:	08bf      	lsrs	r7, r7, #2
   b543c:	fb0e fe07 	mul.w	lr, lr, r7
   b5440:	9b00      	ldr	r3, [sp, #0]
   b5442:	f02e 4e40 	bic.w	lr, lr, #3221225472	; 0xc0000000
   b5446:	273c      	movs	r7, #60	; 0x3c
   b5448:	fb07 370e 	mla	r7, r7, lr, r3
	if (__p)
   b544c:	f1ba 0f00 	cmp.w	sl, #0
   b5450:	d006      	beq.n	b5460 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x110>
		    this->_M_impl._M_end_of_storage - __old_start);
   b5452:	f8d9 1008 	ldr.w	r1, [r9, #8]
	::operator delete(__p
   b5456:	4650      	mov	r0, sl
   b5458:	eba1 010a 	sub.w	r1, r1, sl
   b545c:	f7fe fe1f 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5460:	203c      	movs	r0, #60	; 0x3c
   b5462:	fb00 8606 	mla	r6, r0, r6, r8
      this->_M_impl._M_finish = __new_finish;
   b5466:	e9c9 8700 	strd	r8, r7, [r9]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b546a:	f8c9 6008 	str.w	r6, [r9, #8]
    }
   b546e:	b003      	add	sp, #12
   b5470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5474:	eeeeeeef 	.word	0xeeeeeeef
   b5478:	02222222 	.word	0x02222222
   b547c:	000c0e23 	.word	0x000c0e23
   b5480:	2eeeeeef 	.word	0x2eeeeeef

000b5484 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b5484:	b570      	push	{r4, r5, r6, lr}
   b5486:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5488:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b548c:	4299      	cmp	r1, r3
      push_back(const value_type& __x)
   b548e:	4606      	mov	r6, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5490:	d010      	beq.n	b54b4 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x30>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5492:	b159      	cbz	r1, b54ac <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x28>
   b5494:	4615      	mov	r5, r2
   b5496:	460c      	mov	r4, r1
   b5498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b549a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b549c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b549e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b54a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b54a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b54a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b54a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	    ++this->_M_impl._M_finish;
   b54ac:	6873      	ldr	r3, [r6, #4]
   b54ae:	333c      	adds	r3, #60	; 0x3c
   b54b0:	6073      	str	r3, [r6, #4]
      }
   b54b2:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
   b54b4:	f7ff ff4c 	bl	b5350 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b54b8:	e7fb      	b.n	b54b2 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x2e>
	...

000b54bc <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b54bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b54c0:	ed2d 8b02 	vpush	{d8}
   b54c4:	b0ab      	sub	sp, #172	; 0xac
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b54c6:	7883      	ldrb	r3, [r0, #2]
   b54c8:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b54ca:	af06      	add	r7, sp, #24
   b54cc:	4604      	mov	r4, r0
   b54ce:	460e      	mov	r6, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b54d0:	d127      	bne.n	b5522 <_Z14processCommandPKchb+0x66>
   b54d2:	78c3      	ldrb	r3, [r0, #3]
   b54d4:	2b42      	cmp	r3, #66	; 0x42
   b54d6:	f040 81ba 	bne.w	b584e <_Z14processCommandPKchb+0x392>
        }
   b54da:	466b      	mov	r3, sp
   b54dc:	ee08 3a10 	vmov	s16, r3
        uint8_t rxBotID = atoi(rxIDBuf);
   b54e0:	f107 0010 	add.w	r0, r7, #16
        rxIDBuf[0] = command[1];
   b54e4:	7863      	ldrb	r3, [r4, #1]
   b54e6:	743b      	strb	r3, [r7, #16]
      : _M_current(__i) { }
   b54e8:	f8df 8388 	ldr.w	r8, [pc, #904]	; b5874 <_Z14processCommandPKchb+0x3b8>
        uint8_t rxBotID = atoi(rxIDBuf);
   b54ec:	f009 fa39 	bl	be962 <atoi>
   b54f0:	e9d8 9b00 	ldrd	r9, fp, [r8]
   b54f4:	b2c3      	uxtb	r3, r0
   b54f6:	60fb      	str	r3, [r7, #12]
        int index = 0;
   b54f8:	f04f 0a00 	mov.w	sl, #0
        bool newBot = true;
   b54fc:	2301      	movs	r3, #1
        for(WaterBot w: WaterBots){
   b54fe:	45d9      	cmp	r9, fp
   b5500:	d015      	beq.n	b552e <_Z14processCommandPKchb+0x72>
            if(rxBotID == w.botNum){
   b5502:	f899 2002 	ldrb.w	r2, [r9, #2]
   b5506:	68f9      	ldr	r1, [r7, #12]
   b5508:	428a      	cmp	r2, r1
   b550a:	d105      	bne.n	b5518 <_Z14processCommandPKchb+0x5c>
                TargetWB = &WaterBots.at(index);
   b550c:	4651      	mov	r1, sl
   b550e:	4640      	mov	r0, r8
   b5510:	f7ff fd9e 	bl	b5050 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
                newBot = false;
   b5514:	2300      	movs	r3, #0
                TargetWB = &WaterBots.at(index);
   b5516:	4605      	mov	r5, r0
            index++;
   b5518:	f10a 0a01 	add.w	sl, sl, #1
	++_M_current;
   b551c:	f109 093c 	add.w	r9, r9, #60	; 0x3c
	return *this;
   b5520:	e7ed      	b.n	b54fe <_Z14processCommandPKchb+0x42>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b5522:	2b43      	cmp	r3, #67	; 0x43
   b5524:	f040 8193 	bne.w	b584e <_Z14processCommandPKchb+0x392>
   b5528:	78c3      	ldrb	r3, [r0, #3]
   b552a:	2b43      	cmp	r3, #67	; 0x43
   b552c:	e7d3      	b.n	b54d6 <_Z14processCommandPKchb+0x1a>
        if(newBot){
   b552e:	b18b      	cbz	r3, b5554 <_Z14processCommandPKchb+0x98>
            WaterBot newWaterbot;
   b5530:	f107 0044 	add.w	r0, r7, #68	; 0x44
   b5534:	f7ff f9b2 	bl	b489c <_ZN8WaterBotC1Ev>
            newWaterbot.botNum = rxBotID;
   b5538:	68fb      	ldr	r3, [r7, #12]
            WaterBots.push_back(newWaterbot);
   b553a:	48ce      	ldr	r0, [pc, #824]	; (b5874 <_Z14processCommandPKchb+0x3b8>)
            newWaterbot.botNum = rxBotID;
   b553c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            WaterBots.push_back(newWaterbot);
   b5540:	f107 0144 	add.w	r1, r7, #68	; 0x44
   b5544:	f7ff ff9e 	bl	b5484 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      { return __normal_iterator(_M_current - __n); }
   b5548:	f8d8 5004 	ldr.w	r5, [r8, #4]
            redrawMenu = true;
   b554c:	4bca      	ldr	r3, [pc, #808]	; (b5878 <_Z14processCommandPKchb+0x3bc>)
   b554e:	2201      	movs	r2, #1
   b5550:	3d3c      	subs	r5, #60	; 0x3c
   b5552:	701a      	strb	r2, [r3, #0]
        char dataStr[strlen(command)-8];
   b5554:	4620      	mov	r0, r4
   b5556:	f009 faf4 	bl	beb42 <strlen>
   b555a:	3801      	subs	r0, #1
   b555c:	f020 0007 	bic.w	r0, r0, #7
   b5560:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b5564:	4620      	mov	r0, r4
   b5566:	f009 faec 	bl	beb42 <strlen>
        char dataStr[strlen(command)-8];
   b556a:	f10d 0918 	add.w	r9, sp, #24
        dataStr[strlen(command)-9] = '\0';
   b556e:	4448      	add	r0, r9
   b5570:	f04f 0a00 	mov.w	sl, #0
   b5574:	f800 ac09 	strb.w	sl, [r0, #-9]
        checkStr[0] = command[strlen(command)-2];
   b5578:	4620      	mov	r0, r4
        cmdStr[3] = '\0';
   b557a:	f887 a01b 	strb.w	sl, [r7, #27]
        checkStr[0] = command[strlen(command)-2];
   b557e:	f009 fae0 	bl	beb42 <strlen>
   b5582:	4420      	add	r0, r4
   b5584:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b5588:	753b      	strb	r3, [r7, #20]
        checkStr[1] = command[strlen(command)-1];
   b558a:	4620      	mov	r0, r4
   b558c:	f009 fad9 	bl	beb42 <strlen>
   b5590:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b5592:	4651      	mov	r1, sl
        checkStr[1] = command[strlen(command)-1];
   b5594:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b5598:	757b      	strb	r3, [r7, #21]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b559a:	2210      	movs	r2, #16
   b559c:	f107 0014 	add.w	r0, r7, #20
        checkStr[2] = '\0';
   b55a0:	f887 a016 	strb.w	sl, [r7, #22]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b55a4:	f00a f9b8 	bl	bf918 <strtol>
   b55a8:	4683      	mov	fp, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b55aa:	fa5f fb8b 	uxtb.w	fp, fp
   b55ae:	f008 f961 	bl	bd874 <_Z16_fetch_usbserialv>
   b55b2:	49b2      	ldr	r1, [pc, #712]	; (b587c <_Z14processCommandPKchb+0x3c0>)
   b55b4:	465b      	mov	r3, fp
   b55b6:	465a      	mov	r2, fp
   b55b8:	f7fe fecc 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b55bc:	f04f 0a04 	mov.w	sl, #4
   b55c0:	4620      	mov	r0, r4
   b55c2:	f009 fabe 	bl	beb42 <strlen>
   b55c6:	3802      	subs	r0, #2
   b55c8:	4582      	cmp	sl, r0
   b55ca:	d216      	bcs.n	b55fa <_Z14processCommandPKchb+0x13e>
            if(i < 7) cmdStr[i-4] = command[i];
   b55cc:	f1ba 0f06 	cmp.w	sl, #6
   b55d0:	bf9b      	ittet	ls
   b55d2:	f107 0390 	addls.w	r3, r7, #144	; 0x90
   b55d6:	4453      	addls	r3, sl
            else dataStr[i-7] = command[i];
   b55d8:	eb09 030a 	addhi.w	r3, r9, sl
            if(i < 7) cmdStr[i-4] = command[i];
   b55dc:	f814 200a 	ldrbls.w	r2, [r4, sl]
            else dataStr[i-7] = command[i];
   b55e0:	bf8c      	ite	hi
   b55e2:	f814 200a 	ldrbhi.w	r2, [r4, sl]
            if(i < 7) cmdStr[i-4] = command[i];
   b55e6:	f803 2c7c 	strbls.w	r2, [r3, #-124]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b55ea:	f10a 0a01 	add.w	sl, sl, #1
            else dataStr[i-7] = command[i];
   b55ee:	bf88      	it	hi
   b55f0:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b55f4:	fa5f fa8a 	uxtb.w	sl, sl
   b55f8:	e7e2      	b.n	b55c0 <_Z14processCommandPKchb+0x104>
        if(checksum != strlen(command)-2){
   b55fa:	4558      	cmp	r0, fp
   b55fc:	d02b      	beq.n	b5656 <_Z14processCommandPKchb+0x19a>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b55fe:	f008 f939 	bl	bd874 <_Z16_fetch_usbserialv>
   b5602:	4605      	mov	r5, r0
   b5604:	4620      	mov	r0, r4
   b5606:	f009 fa9c 	bl	beb42 <strlen>
   b560a:	465b      	mov	r3, fp
   b560c:	1e82      	subs	r2, r0, #2
   b560e:	499c      	ldr	r1, [pc, #624]	; (b5880 <_Z14processCommandPKchb+0x3c4>)
   b5610:	4628      	mov	r0, r5
   b5612:	f7fe fe9f 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            logMessage("[WARN] Warning, checksum does not match!");
   b5616:	489b      	ldr	r0, [pc, #620]	; (b5884 <_Z14processCommandPKchb+0x3c8>)
   b5618:	f7ff f920 	bl	b485c <_Z10logMessagePKc>
            Serial.println("Warning, checksum does not match");
   b561c:	f008 f92a 	bl	bd874 <_Z16_fetch_usbserialv>
   b5620:	4999      	ldr	r1, [pc, #612]	; (b5888 <_Z14processCommandPKchb+0x3cc>)
   b5622:	f007 fd32 	bl	bd08a <_ZN5Print7printlnEPKc>
            if((command[1] >= '0' && command[1] <= '9') || command[1] == 'C'){
   b5626:	7863      	ldrb	r3, [r4, #1]
   b5628:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b562c:	2a09      	cmp	r2, #9
   b562e:	d902      	bls.n	b5636 <_Z14processCommandPKchb+0x17a>
   b5630:	2b43      	cmp	r3, #67	; 0x43
   b5632:	f040 8109 	bne.w	b5848 <_Z14processCommandPKchb+0x38c>
                rxBotNum[0] = command[0];
   b5636:	7822      	ldrb	r2, [r4, #0]
   b5638:	f887 2044 	strb.w	r2, [r7, #68]	; 0x44
                rxBotNum[1] = command[1];
   b563c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                sprintf(errBuf,"CC%2snak%3s",rxBotNum,cmdStr);
   b5640:	4992      	ldr	r1, [pc, #584]	; (b588c <_Z14processCommandPKchb+0x3d0>)
   b5642:	4893      	ldr	r0, [pc, #588]	; (b5890 <_Z14processCommandPKchb+0x3d4>)
   b5644:	f107 0318 	add.w	r3, r7, #24
   b5648:	f107 0244 	add.w	r2, r7, #68	; 0x44
   b564c:	f004 fc7c 	bl	b9f48 <sprintf>
                errModeReply = mode;
   b5650:	4b90      	ldr	r3, [pc, #576]	; (b5894 <_Z14processCommandPKchb+0x3d8>)
            errCmdMode = mode;
   b5652:	701e      	strb	r6, [r3, #0]
   b5654:	e0f8      	b.n	b5848 <_Z14processCommandPKchb+0x38c>
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   b5656:	4990      	ldr	r1, [pc, #576]	; (b5898 <_Z14processCommandPKchb+0x3dc>)
   b5658:	f107 0018 	add.w	r0, r7, #24
   b565c:	f009 fa41 	bl	beae2 <strcmp>
   b5660:	2800      	cmp	r0, #0
   b5662:	f000 80f1 	beq.w	b5848 <_Z14processCommandPKchb+0x38c>
        else if(!strcmp(cmdStr,"sup")){
   b5666:	498d      	ldr	r1, [pc, #564]	; (b589c <_Z14processCommandPKchb+0x3e0>)
   b5668:	f107 0018 	add.w	r0, r7, #24
   b566c:	f009 fa39 	bl	beae2 <strcmp>
   b5670:	2800      	cmp	r0, #0
   b5672:	f040 8092 	bne.w	b579a <_Z14processCommandPKchb+0x2de>
      : _M_current(__i) { }
   b5676:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b567a:	f8d8 4000 	ldr.w	r4, [r8]
   b567e:	60bb      	str	r3, [r7, #8]
            for(WaterBot &w: WaterBots){
   b5680:	68bb      	ldr	r3, [r7, #8]
   b5682:	42a3      	cmp	r3, r4
   b5684:	f000 8089 	beq.w	b579a <_Z14processCommandPKchb+0x2de>
                if(rxBotID == w.botNum){
   b5688:	78a3      	ldrb	r3, [r4, #2]
   b568a:	68fa      	ldr	r2, [r7, #12]
   b568c:	4293      	cmp	r3, r2
   b568e:	f040 8082 	bne.w	b5796 <_Z14processCommandPKchb+0x2da>
                    sscanf(dataStr,"%u %u %s %s",&battpct,&statflags,testLat,testLon);
   b5692:	f107 0a38 	add.w	sl, r7, #56	; 0x38
   b5696:	f107 0b2c 	add.w	fp, r7, #44	; 0x2c
   b569a:	4981      	ldr	r1, [pc, #516]	; (b58a0 <_Z14processCommandPKchb+0x3e4>)
   b569c:	f8cd a004 	str.w	sl, [sp, #4]
   b56a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b56a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
   b56a8:	f8cd b000 	str.w	fp, [sp]
   b56ac:	4648      	mov	r0, r9
   b56ae:	f004 fc53 	bl	b9f58 <sscanf>
                    latRX = atof(testLat);
   b56b2:	4658      	mov	r0, fp
   b56b4:	f009 f952 	bl	be95c <atof>
                    lonRX = atof(testLon);
   b56b8:	4650      	mov	r0, sl
                    latRX = atof(testLat);
   b56ba:	ed87 0b00 	vstr	d0, [r7]
                    lonRX = atof(testLon);
   b56be:	f009 f94d 	bl	be95c <atof>
                    w.battPercent = battpct;
   b56c2:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
   b56c6:	70e1      	strb	r1, [r4, #3]
                    w.LTEAvail = statflags & 1;
   b56c8:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
                    latRX = atof(testLat);
   b56cc:	e9d7 2300 	ldrd	r2, r3, [r7]
                    w.LTEAvail = statflags & 1;
   b56d0:	f001 0001 	and.w	r0, r1, #1
   b56d4:	7160      	strb	r0, [r4, #5]
                    w.XBeeAvail = (statflags >> 1) & 1;
   b56d6:	f3c1 0040 	ubfx	r0, r1, #1, #1
   b56da:	71a0      	strb	r0, [r4, #6]
                    w.BLEAvail = (statflags >> 2) & 1;
   b56dc:	f3c1 0080 	ubfx	r0, r1, #2, #1
                    w.lowBatt = (statflags >> 6) & 1;
   b56e0:	f3c1 1180 	ubfx	r1, r1, #6, #1
                    w.BLEAvail = (statflags >> 2) & 1;
   b56e4:	7120      	strb	r0, [r4, #4]
                    w.lowBatt = (statflags >> 6) & 1;
   b56e6:	7261      	strb	r1, [r4, #9]
                    latRX = atof(testLat);
   b56e8:	4610      	mov	r0, r2
   b56ea:	4619      	mov	r1, r3
                    lonRX = atof(testLon);
   b56ec:	ec5b ab10 	vmov	sl, fp, d0
                    latRX = atof(testLat);
   b56f0:	f009 f8c0 	bl	be874 <__aeabi_d2f>
                    lonRX = atof(testLon);
   b56f4:	4659      	mov	r1, fp
                    latRX = atof(testLat);
   b56f6:	61a0      	str	r0, [r4, #24]
                    lonRX = atof(testLon);
   b56f8:	4650      	mov	r0, sl
   b56fa:	f009 f8bb 	bl	be874 <__aeabi_d2f>
   b56fe:	61e0      	str	r0, [r4, #28]
   b5700:	f004 f996 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
                    if(millis() - w.publishTime > WB_MOD_UPDATE_TIME){
   b5704:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b5706:	1ac0      	subs	r0, r0, r3
   b5708:	f64e 2360 	movw	r3, #60000	; 0xea60
   b570c:	4298      	cmp	r0, r3
   b570e:	d909      	bls.n	b5724 <_Z14processCommandPKchb+0x268>
                        w.offloading = (statflags >> 3) & 1;
   b5710:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   b5714:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   b5718:	7322      	strb	r2, [r4, #12]
                        w.driveMode = (statflags >> 4) & 3;
   b571a:	f3c3 1201 	ubfx	r2, r3, #4, #2
                        w.dataRecording = (statflags >> 7) & 1;
   b571e:	09db      	lsrs	r3, r3, #7
                        w.driveMode = (statflags >> 4) & 3;
   b5720:	71e2      	strb	r2, [r4, #7]
                        w.dataRecording = (statflags >> 7) & 1;
   b5722:	72e3      	strb	r3, [r4, #11]
                    if(w.lowBatt && !w.warnedLowBatt){
   b5724:	7a63      	ldrb	r3, [r4, #9]
   b5726:	b363      	cbz	r3, b5782 <_Z14processCommandPKchb+0x2c6>
   b5728:	7aa3      	ldrb	r3, [r4, #10]
   b572a:	bb53      	cbnz	r3, b5782 <_Z14processCommandPKchb+0x2c6>
                        w.warnedLowBatt = true;
   b572c:	f04f 0a01 	mov.w	sl, #1
   b5730:	f884 a00a 	strb.w	sl, [r4, #10]
                        sprintf(m.primaryLine,"Warning\0");
   b5734:	495b      	ldr	r1, [pc, #364]	; (b58a4 <_Z14processCommandPKchb+0x3e8>)
class MenuPopUp{
   b5736:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
                        sprintf(m.primaryLine,"Warning\0");
   b573a:	f107 0044 	add.w	r0, r7, #68	; 0x44
class MenuPopUp{
   b573e:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
   b5742:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
                        sprintf(m.primaryLine,"Warning\0");
   b5746:	f009 f9d6 	bl	beaf6 <strcpy>
                        sprintf(m.secondaryLine,"Bot %d\0", w.botNum);
   b574a:	78a2      	ldrb	r2, [r4, #2]
   b574c:	4956      	ldr	r1, [pc, #344]	; (b58a8 <_Z14processCommandPKchb+0x3ec>)
   b574e:	f107 004e 	add.w	r0, r7, #78	; 0x4e
   b5752:	f004 fbf9 	bl	b9f48 <sprintf>
                        sprintf(m.tertiaryLine, "Low Battery: %d\0",w.battPercent);
   b5756:	78e2      	ldrb	r2, [r4, #3]
   b5758:	4954      	ldr	r1, [pc, #336]	; (b58ac <_Z14processCommandPKchb+0x3f0>)
   b575a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
   b575e:	f004 fbf3 	bl	b9f48 <sprintf>
                        m.primaryStart = 20;
   b5762:	2314      	movs	r3, #20
                        m.secondaryStart = 40;
   b5764:	2228      	movs	r2, #40	; 0x28
                        PopUps.push_back(m);
   b5766:	4852      	ldr	r0, [pc, #328]	; (b58b0 <_Z14processCommandPKchb+0x3f4>)
                        m.primaryStart = 20;
   b5768:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
                        PopUps.push_back(m);
   b576c:	f107 0144 	add.w	r1, r7, #68	; 0x44
                        m.tertiaryStart = 20;
   b5770:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
                        m.secondaryStart = 40;
   b5774:	f887 208b 	strb.w	r2, [r7, #139]	; 0x8b
                        PopUps.push_back(m);
   b5778:	f7ff fdd6 	bl	b5328 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>
                        redrawMenu = true;
   b577c:	4b3e      	ldr	r3, [pc, #248]	; (b5878 <_Z14processCommandPKchb+0x3bc>)
   b577e:	f883 a000 	strb.w	sl, [r3]
                    if(botSelect = w.botNum) redrawMenu = true;
   b5782:	78a3      	ldrb	r3, [r4, #2]
   b5784:	4a4b      	ldr	r2, [pc, #300]	; (b58b4 <_Z14processCommandPKchb+0x3f8>)
   b5786:	7013      	strb	r3, [r2, #0]
   b5788:	b113      	cbz	r3, b5790 <_Z14processCommandPKchb+0x2d4>
   b578a:	4b3b      	ldr	r3, [pc, #236]	; (b5878 <_Z14processCommandPKchb+0x3bc>)
   b578c:	2201      	movs	r2, #1
   b578e:	701a      	strb	r2, [r3, #0]
                    logMessage("Status Update!");
   b5790:	4849      	ldr	r0, [pc, #292]	; (b58b8 <_Z14processCommandPKchb+0x3fc>)
   b5792:	f7ff f863 	bl	b485c <_Z10logMessagePKc>
      operator++() _GLIBCXX_NOEXCEPT
   b5796:	343c      	adds	r4, #60	; 0x3c
	return *this;
   b5798:	e772      	b.n	b5680 <_Z14processCommandPKchb+0x1c4>
        if(!strcmp(cmdStr,"sns")){
   b579a:	4948      	ldr	r1, [pc, #288]	; (b58bc <_Z14processCommandPKchb+0x400>)
   b579c:	f107 0018 	add.w	r0, r7, #24
   b57a0:	f009 f99f 	bl	beae2 <strcmp>
   b57a4:	2800      	cmp	r0, #0
   b57a6:	d158      	bne.n	b585a <_Z14processCommandPKchb+0x39e>
            sscanf(dataStr,"%s %s %d %d %d %d %d",GPSLatstr,GPSLonstr,&do_in,&pH_in,&cond_in,&mcond_in,&temp_in);
   b57a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   b57ac:	9304      	str	r3, [sp, #16]
   b57ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b57b2:	9303      	str	r3, [sp, #12]
   b57b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
   b57b8:	9302      	str	r3, [sp, #8]
   b57ba:	f107 0320 	add.w	r3, r7, #32
   b57be:	9301      	str	r3, [sp, #4]
   b57c0:	f107 031c 	add.w	r3, r7, #28
   b57c4:	493e      	ldr	r1, [pc, #248]	; (b58c0 <_Z14processCommandPKchb+0x404>)
   b57c6:	9300      	str	r3, [sp, #0]
   b57c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
   b57cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
   b57d0:	4648      	mov	r0, r9
   b57d2:	f004 fbc1 	bl	b9f58 <sscanf>
            TargetWB->DO = ((float)do_in)/1000.0;
   b57d6:	edd7 7a07 	vldr	s15, [r7, #28]
   b57da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   b57de:	eddf 7a39 	vldr	s15, [pc, #228]	; b58c4 <_Z14processCommandPKchb+0x408>
   b57e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
            TargetWB->pH = ((float)pH_in)/1000.0;
   b57e6:	ed97 7a08 	vldr	s14, [r7, #32]
            TargetWB->DO = ((float)do_in)/1000.0;
   b57ea:	edc5 6a0a 	vstr	s13, [r5, #40]	; 0x28
            TargetWB->pH = ((float)pH_in)/1000.0;
   b57ee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b57f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b57f6:	edc5 6a08 	vstr	s13, [r5, #32]
            TargetWB->Cond = ((float)cond_in)/1000.0;
   b57fa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
   b57fe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b5802:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b5806:	edc5 6a0b 	vstr	s13, [r5, #44]	; 0x2c
            TargetWB->MCond = ((float)mcond_in)/1000.0;
   b580a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
   b580e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b5812:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b5816:	edc5 6a0c 	vstr	s13, [r5, #48]	; 0x30
            TargetWB->temp = ((float)temp_in)/1000.0;
   b581a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
   b581e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b5822:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b5826:	edc5 6a09 	vstr	s13, [r5, #36]	; 0x24
            Serial.printlnf("Bot #: %d Temp: %f", TargetWB->botNum,TargetWB->temp);
   b582a:	f008 f823 	bl	bd874 <_Z16_fetch_usbserialv>
   b582e:	78aa      	ldrb	r2, [r5, #2]
   b5830:	60fa      	str	r2, [r7, #12]
   b5832:	4604      	mov	r4, r0
   b5834:	6a68      	ldr	r0, [r5, #36]	; 0x24
   b5836:	f008 fd0b 	bl	be250 <__aeabi_f2d>
   b583a:	e9cd 0100 	strd	r0, r1, [sp]
   b583e:	68fa      	ldr	r2, [r7, #12]
   b5840:	4921      	ldr	r1, [pc, #132]	; (b58c8 <_Z14processCommandPKchb+0x40c>)
   b5842:	4620      	mov	r0, r4
   b5844:	f7fe fd86 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b5848:	ee18 3a10 	vmov	r3, s16
   b584c:	469d      	mov	sp, r3
}
   b584e:	3794      	adds	r7, #148	; 0x94
   b5850:	46bd      	mov	sp, r7
   b5852:	ecbd 8b02 	vpop	{d8}
   b5856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(!strcmp(cmdStr,"nak")){  //Acknowledgement for XBee and BLE
   b585a:	491c      	ldr	r1, [pc, #112]	; (b58cc <_Z14processCommandPKchb+0x410>)
   b585c:	f107 0018 	add.w	r0, r7, #24
   b5860:	f009 f93f 	bl	beae2 <strcmp>
   b5864:	bbc0      	cbnz	r0, b58d8 <_Z14processCommandPKchb+0x41c>
            strncpy(errCmdStr,dataStr,3);
   b5866:	481a      	ldr	r0, [pc, #104]	; (b58d0 <_Z14processCommandPKchb+0x414>)
   b5868:	2203      	movs	r2, #3
   b586a:	4649      	mov	r1, r9
   b586c:	f009 f985 	bl	beb7a <strncpy>
            errCmdMode = mode;
   b5870:	4b18      	ldr	r3, [pc, #96]	; (b58d4 <_Z14processCommandPKchb+0x418>)
   b5872:	e6ee      	b.n	b5652 <_Z14processCommandPKchb+0x196>
   b5874:	2003dcc8 	.word	0x2003dcc8
   b5878:	2003da90 	.word	0x2003da90
   b587c:	000c0e3d 	.word	0x000c0e3d
   b5880:	000c0c71 	.word	0x000c0c71
   b5884:	000c0e52 	.word	0x000c0e52
   b5888:	000c0cbe 	.word	0x000c0cbe
   b588c:	000c0cdf 	.word	0x000c0cdf
   b5890:	2003dd70 	.word	0x2003dd70
   b5894:	2003dd83 	.word	0x2003dd83
   b5898:	000c0e7b 	.word	0x000c0e7b
   b589c:	000c0e7f 	.word	0x000c0e7f
   b58a0:	000c0e83 	.word	0x000c0e83
   b58a4:	000c12f0 	.word	0x000c12f0
   b58a8:	000c12f9 	.word	0x000c12f9
   b58ac:	000c1301 	.word	0x000c1301
   b58b0:	2003dcac 	.word	0x2003dcac
   b58b4:	2003dd61 	.word	0x2003dd61
   b58b8:	000c0e8f 	.word	0x000c0e8f
   b58bc:	000c0e9e 	.word	0x000c0e9e
   b58c0:	000c0ea2 	.word	0x000c0ea2
   b58c4:	447a0000 	.word	0x447a0000
   b58c8:	000c0eb7 	.word	0x000c0eb7
   b58cc:	000c0eca 	.word	0x000c0eca
   b58d0:	2003dd80 	.word	0x2003dd80
   b58d4:	2003dd7f 	.word	0x2003dd7f
        else if(!strcmp(cmdStr,"hwd")){  //Hello World! - Received startup pairing message
   b58d8:	4931      	ldr	r1, [pc, #196]	; (b59a0 <_Z14processCommandPKchb+0x4e4>)
   b58da:	f107 0018 	add.w	r0, r7, #24
   b58de:	f009 f900 	bl	beae2 <strcmp>
   b58e2:	2800      	cmp	r0, #0
   b58e4:	d139      	bne.n	b595a <_Z14processCommandPKchb+0x49e>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b58e6:	e9d8 3000 	ldrd	r3, r0, [r8]
            bool newBot = true;
   b58ea:	2201      	movs	r2, #1
            for(WaterBot w: WaterBots){
   b58ec:	4283      	cmp	r3, r0
   b58ee:	d006      	beq.n	b58fe <_Z14processCommandPKchb+0x442>
                if(rxBotID == w.botNum) newBot = false;
   b58f0:	7899      	ldrb	r1, [r3, #2]
   b58f2:	68fc      	ldr	r4, [r7, #12]
   b58f4:	333c      	adds	r3, #60	; 0x3c
   b58f6:	42a1      	cmp	r1, r4
   b58f8:	bf08      	it	eq
   b58fa:	2200      	moveq	r2, #0
	return *this;
   b58fc:	e7f6      	b.n	b58ec <_Z14processCommandPKchb+0x430>
            if(newBot){
   b58fe:	b1e2      	cbz	r2, b593a <_Z14processCommandPKchb+0x47e>
                Serial.println("Found a new water bot ID");
   b5900:	f007 ffb8 	bl	bd874 <_Z16_fetch_usbserialv>
   b5904:	4927      	ldr	r1, [pc, #156]	; (b59a4 <_Z14processCommandPKchb+0x4e8>)
   b5906:	f007 fbc0 	bl	bd08a <_ZN5Print7printlnEPKc>
                WaterBot newWaterbot;
   b590a:	f107 0044 	add.w	r0, r7, #68	; 0x44
   b590e:	f7fe ffc5 	bl	b489c <_ZN8WaterBotC1Ev>
                if(mode == 1) newWaterbot.BLEAvail = true;
   b5912:	2e01      	cmp	r6, #1
   b5914:	d115      	bne.n	b5942 <_Z14processCommandPKchb+0x486>
   b5916:	f887 6048 	strb.w	r6, [r7, #72]	; 0x48
                newWaterbot.botNum = rxBotID;
   b591a:	68fb      	ldr	r3, [r7, #12]
                WaterBots.push_back(newWaterbot);
   b591c:	4822      	ldr	r0, [pc, #136]	; (b59a8 <_Z14processCommandPKchb+0x4ec>)
                newWaterbot.botNum = rxBotID;
   b591e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
                WaterBots.push_back(newWaterbot);
   b5922:	f107 0144 	add.w	r1, r7, #68	; 0x44
   b5926:	f7ff fdad 	bl	b5484 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
                PairBots.push_back(newWaterbot);
   b592a:	4820      	ldr	r0, [pc, #128]	; (b59ac <_Z14processCommandPKchb+0x4f0>)
   b592c:	f107 0144 	add.w	r1, r7, #68	; 0x44
   b5930:	f7ff fda8 	bl	b5484 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
                redrawMenu = true;
   b5934:	4b1e      	ldr	r3, [pc, #120]	; (b59b0 <_Z14processCommandPKchb+0x4f4>)
   b5936:	2201      	movs	r2, #1
   b5938:	701a      	strb	r2, [r3, #0]
            botPairRx = true;
   b593a:	4b1e      	ldr	r3, [pc, #120]	; (b59b4 <_Z14processCommandPKchb+0x4f8>)
   b593c:	2201      	movs	r2, #1
   b593e:	701a      	strb	r2, [r3, #0]
   b5940:	e782      	b.n	b5848 <_Z14processCommandPKchb+0x38c>
                else if(mode == 2) newWaterbot.XBeeAvail = true;
   b5942:	2e02      	cmp	r6, #2
   b5944:	f04f 0301 	mov.w	r3, #1
   b5948:	d102      	bne.n	b5950 <_Z14processCommandPKchb+0x494>
   b594a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
   b594e:	e7e4      	b.n	b591a <_Z14processCommandPKchb+0x45e>
                else if(mode == 3) newWaterbot.LTEAvail = true;
   b5950:	2e03      	cmp	r6, #3
   b5952:	bf08      	it	eq
   b5954:	f887 3049 	strbeq.w	r3, [r7, #73]	; 0x49
   b5958:	e7df      	b.n	b591a <_Z14processCommandPKchb+0x45e>
        else if(!strcmp(cmdStr,"pts")){
   b595a:	4917      	ldr	r1, [pc, #92]	; (b59b8 <_Z14processCommandPKchb+0x4fc>)
   b595c:	f107 0018 	add.w	r0, r7, #24
   b5960:	f009 f8bf 	bl	beae2 <strcmp>
   b5964:	2800      	cmp	r0, #0
   b5966:	f47f af6f 	bne.w	b5848 <_Z14processCommandPKchb+0x38c>
   b596a:	4c14      	ldr	r4, [pc, #80]	; (b59bc <_Z14processCommandPKchb+0x500>)
            if(!logFile.isOpen()){
   b596c:	7c23      	ldrb	r3, [r4, #16]
   b596e:	b983      	cbnz	r3, b5992 <_Z14processCommandPKchb+0x4d6>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5970:	4913      	ldr	r1, [pc, #76]	; (b59c0 <_Z14processCommandPKchb+0x504>)
   b5972:	f244 2202 	movw	r2, #16898	; 0x4202
   b5976:	f104 0010 	add.w	r0, r4, #16
   b597a:	f7fe fe7f 	bl	b467c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b597e:	4911      	ldr	r1, [pc, #68]	; (b59c4 <_Z14processCommandPKchb+0x508>)
   b5980:	464a      	mov	r2, r9
   b5982:	4620      	mov	r0, r4
   b5984:	f7fe fce6 	bl	b4354 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b5988:	f104 0010 	add.w	r0, r4, #16
   b598c:	f001 fd6c 	bl	b7468 <_ZN7FatFile5closeEv>
   b5990:	e75a      	b.n	b5848 <_Z14processCommandPKchb+0x38c>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b5992:	490c      	ldr	r1, [pc, #48]	; (b59c4 <_Z14processCommandPKchb+0x508>)
   b5994:	464a      	mov	r2, r9
   b5996:	4620      	mov	r0, r4
   b5998:	f7fe fcdc 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        if(sendAck){    //Transmit out acknowledgement if needed
   b599c:	e754      	b.n	b5848 <_Z14processCommandPKchb+0x38c>
   b599e:	bf00      	nop
   b59a0:	000c0ece 	.word	0x000c0ece
   b59a4:	000c0ed2 	.word	0x000c0ed2
   b59a8:	2003dcc8 	.word	0x2003dcc8
   b59ac:	2003dca0 	.word	0x2003dca0
   b59b0:	2003da90 	.word	0x2003da90
   b59b4:	2003dd60 	.word	0x2003dd60
   b59b8:	000c0eeb 	.word	0x000c0eeb
   b59bc:	2003dddc 	.word	0x2003dddc
   b59c0:	2003dd84 	.word	0x2003dd84
   b59c4:	000c0eef 	.word	0x000c0eef

000b59c8 <_Z14dataLTEHandlerPKcS0_>:
void dataLTEHandler(const char *event, const char *data){
   b59c8:	b510      	push	{r4, lr}
   b59ca:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b59cc:	2200      	movs	r2, #0
   b59ce:	2104      	movs	r1, #4
   b59d0:	4620      	mov	r0, r4
   b59d2:	f7ff fd73 	bl	b54bc <_Z14processCommandPKchb>
    if(logMessages){
   b59d6:	4b0b      	ldr	r3, [pc, #44]	; (b5a04 <_Z14dataLTEHandlerPKcS0_+0x3c>)
   b59d8:	781b      	ldrb	r3, [r3, #0]
   b59da:	b193      	cbz	r3, b5a02 <_Z14dataLTEHandlerPKcS0_+0x3a>
   b59dc:	480a      	ldr	r0, [pc, #40]	; (b5a08 <_Z14dataLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b59de:	7c03      	ldrb	r3, [r0, #16]
   b59e0:	b92b      	cbnz	r3, b59ee <_Z14dataLTEHandlerPKcS0_+0x26>
   b59e2:	490a      	ldr	r1, [pc, #40]	; (b5a0c <_Z14dataLTEHandlerPKcS0_+0x44>)
   b59e4:	f244 2202 	movw	r2, #16898	; 0x4202
   b59e8:	3010      	adds	r0, #16
   b59ea:	f7fe fe47 	bl	b467c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b59ee:	4622      	mov	r2, r4
   b59f0:	4907      	ldr	r1, [pc, #28]	; (b5a10 <_Z14dataLTEHandlerPKcS0_+0x48>)
   b59f2:	4805      	ldr	r0, [pc, #20]	; (b5a08 <_Z14dataLTEHandlerPKcS0_+0x40>)
   b59f4:	f7fe fcae 	bl	b4354 <_ZN5Print8printlnfEPKcz>
}
   b59f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b59fc:	4805      	ldr	r0, [pc, #20]	; (b5a14 <_Z14dataLTEHandlerPKcS0_+0x4c>)
   b59fe:	f001 bd33 	b.w	b7468 <_ZN7FatFile5closeEv>
}
   b5a02:	bd10      	pop	{r4, pc}
   b5a04:	2003de10 	.word	0x2003de10
   b5a08:	2003dddc 	.word	0x2003dddc
   b5a0c:	2003dd84 	.word	0x2003dd84
   b5a10:	000c0f12 	.word	0x000c0f12
   b5a14:	2003ddec 	.word	0x2003ddec

000b5a18 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b5a18:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b5a1a:	f101 0308 	add.w	r3, r1, #8
   b5a1e:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b5a22:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b5a24:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b5a28:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b5a2a:	460a      	mov	r2, r1
   b5a2c:	4601      	mov	r1, r0
   b5a2e:	4668      	mov	r0, sp
   b5a30:	f008 ffab 	bl	be98a <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b5a34:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b5a38:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b5a3a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b5a3e:	b113      	cbz	r3, b5a46 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b5a40:	2300      	movs	r3, #0
   b5a42:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.print("New BT Command: ");
   b5a46:	f007 ff15 	bl	bd874 <_Z16_fetch_usbserialv>
   b5a4a:	4911      	ldr	r1, [pc, #68]	; (b5a90 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>)
   b5a4c:	f007 fb0a 	bl	bd064 <_ZN5Print5printEPKc>
    Serial.println(btBuf);
   b5a50:	f007 ff10 	bl	bd874 <_Z16_fetch_usbserialv>
   b5a54:	4629      	mov	r1, r5
   b5a56:	f007 fb18 	bl	bd08a <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b5a5a:	2201      	movs	r2, #1
   b5a5c:	4611      	mov	r1, r2
   b5a5e:	4628      	mov	r0, r5
   b5a60:	f7ff fd2c 	bl	b54bc <_Z14processCommandPKchb>
    if(logMessages){
   b5a64:	4b0b      	ldr	r3, [pc, #44]	; (b5a94 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   b5a66:	781b      	ldrb	r3, [r3, #0]
   b5a68:	b183      	cbz	r3, b5a8c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>
   b5a6a:	480b      	ldr	r0, [pc, #44]	; (b5a98 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5a6c:	7c03      	ldrb	r3, [r0, #16]
   b5a6e:	b92b      	cbnz	r3, b5a7c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>
   b5a70:	490a      	ldr	r1, [pc, #40]	; (b5a9c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84>)
   b5a72:	f244 2202 	movw	r2, #16898	; 0x4202
   b5a76:	3010      	adds	r0, #16
   b5a78:	f7fe fe00 	bl	b467c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b5a7c:	4908      	ldr	r1, [pc, #32]	; (b5aa0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   b5a7e:	4806      	ldr	r0, [pc, #24]	; (b5a98 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
   b5a80:	462a      	mov	r2, r5
   b5a82:	f7fe fc67 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b5a86:	4807      	ldr	r0, [pc, #28]	; (b5aa4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b5a88:	f001 fcee 	bl	b7468 <_ZN7FatFile5closeEv>
}
   b5a8c:	46bd      	mov	sp, r7
   b5a8e:	bdb0      	pop	{r4, r5, r7, pc}
   b5a90:	000c0f32 	.word	0x000c0f32
   b5a94:	2003de10 	.word	0x2003de10
   b5a98:	2003dddc 	.word	0x2003dddc
   b5a9c:	2003dd84 	.word	0x2003dd84
   b5aa0:	000c0f43 	.word	0x000c0f43
   b5aa4:	2003ddec 	.word	0x2003ddec

000b5aa8 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b5aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b5aac:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b5b9c <_Z11XBeeHandlerv+0xf4>
        if(logMessages){
   b5ab0:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b5ba0 <_Z11XBeeHandlerv+0xf8>
   b5ab4:	4d35      	ldr	r5, [pc, #212]	; (b5b8c <_Z11XBeeHandlerv+0xe4>)
void XBeeHandler(){  
   b5ab6:	b089      	sub	sp, #36	; 0x24
   b5ab8:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b5aba:	f008 f873 	bl	bdba4 <_Z22__fetch_global_Serial1v>
   b5abe:	6803      	ldr	r3, [r0, #0]
   b5ac0:	691b      	ldr	r3, [r3, #16]
   b5ac2:	4798      	blx	r3
   b5ac4:	2800      	cmp	r0, #0
   b5ac6:	d05c      	beq.n	b5b82 <_Z11XBeeHandlerv+0xda>
        String data = Serial1.readStringUntil('\n');
   b5ac8:	f008 f86c 	bl	bdba4 <_Z22__fetch_global_Serial1v>
   b5acc:	220a      	movs	r2, #10
   b5ace:	4601      	mov	r1, r0
   b5ad0:	4638      	mov	r0, r7
   b5ad2:	f007 fc1f 	bl	bd314 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b5ad6:	68bb      	ldr	r3, [r7, #8]
   b5ad8:	3307      	adds	r3, #7
   b5ada:	f023 0307 	bic.w	r3, r3, #7
    }
   b5ade:	466e      	mov	r6, sp
        char buffer[data.length()];
   b5ae0:	ebad 0d03 	sub.w	sp, sp, r3
   b5ae4:	46ea      	mov	sl, sp
   b5ae6:	2300      	movs	r3, #0
   b5ae8:	68b9      	ldr	r1, [r7, #8]
   b5aea:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b5aee:	458b      	cmp	fp, r1
   b5af0:	f103 0401 	add.w	r4, r3, #1
   b5af4:	d207      	bcs.n	b5b06 <_Z11XBeeHandlerv+0x5e>
   b5af6:	4659      	mov	r1, fp
   b5af8:	4638      	mov	r0, r7
   b5afa:	f007 fd25 	bl	bd548 <_ZNK6String6charAtEj>
   b5afe:	4623      	mov	r3, r4
   b5b00:	f80a 000b 	strb.w	r0, [sl, fp]
   b5b04:	e7f0      	b.n	b5ae8 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b5b06:	2901      	cmp	r1, #1
   b5b08:	d90a      	bls.n	b5b20 <_Z11XBeeHandlerv+0x78>
   b5b0a:	3901      	subs	r1, #1
   b5b0c:	4638      	mov	r0, r7
   b5b0e:	f007 fd1b 	bl	bd548 <_ZNK6String6charAtEj>
   b5b12:	280d      	cmp	r0, #13
   b5b14:	bf01      	itttt	eq
   b5b16:	68bb      	ldreq	r3, [r7, #8]
   b5b18:	4453      	addeq	r3, sl
   b5b1a:	2200      	moveq	r2, #0
   b5b1c:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        processCommand(buffer,2,true);
   b5b20:	2201      	movs	r2, #1
   b5b22:	2102      	movs	r1, #2
   b5b24:	4650      	mov	r0, sl
   b5b26:	f7ff fcc9 	bl	b54bc <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   b5b2a:	f007 fea3 	bl	bd874 <_Z16_fetch_usbserialv>
   b5b2e:	4641      	mov	r1, r8
   b5b30:	f007 faab 	bl	bd08a <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b5b34:	f007 fe9e 	bl	bd874 <_Z16_fetch_usbserialv>
   b5b38:	6839      	ldr	r1, [r7, #0]
   b5b3a:	f007 faa6 	bl	bd08a <_ZN5Print7printlnEPKc>
        if(logMessages){
   b5b3e:	f899 3000 	ldrb.w	r3, [r9]
   b5b42:	b1cb      	cbz	r3, b5b78 <_Z11XBeeHandlerv+0xd0>
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5b44:	7c2b      	ldrb	r3, [r5, #16]
   b5b46:	b92b      	cbnz	r3, b5b54 <_Z11XBeeHandlerv+0xac>
   b5b48:	4911      	ldr	r1, [pc, #68]	; (b5b90 <_Z11XBeeHandlerv+0xe8>)
   b5b4a:	4812      	ldr	r0, [pc, #72]	; (b5b94 <_Z11XBeeHandlerv+0xec>)
   b5b4c:	f244 2202 	movw	r2, #16898	; 0x4202
   b5b50:	f7fe fd94 	bl	b467c <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b5b54:	4639      	mov	r1, r7
   b5b56:	f107 0010 	add.w	r0, r7, #16
   b5b5a:	f007 fc89 	bl	bd470 <_ZN6StringC1ERKS_>
   b5b5e:	490e      	ldr	r1, [pc, #56]	; (b5b98 <_Z11XBeeHandlerv+0xf0>)
   b5b60:	f107 0210 	add.w	r2, r7, #16
   b5b64:	4628      	mov	r0, r5
   b5b66:	f7fe fbf5 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b5b6a:	f107 0010 	add.w	r0, r7, #16
   b5b6e:	f007 fbe9 	bl	bd344 <_ZN6StringD1Ev>
            logFile.close();
   b5b72:	4808      	ldr	r0, [pc, #32]	; (b5b94 <_Z11XBeeHandlerv+0xec>)
   b5b74:	f001 fc78 	bl	b7468 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b5b78:	4638      	mov	r0, r7
   b5b7a:	f007 fbe3 	bl	bd344 <_ZN6StringD1Ev>
   b5b7e:	46b5      	mov	sp, r6
    while(Serial1.available()){
   b5b80:	e79b      	b.n	b5aba <_Z11XBeeHandlerv+0x12>
}
   b5b82:	3724      	adds	r7, #36	; 0x24
   b5b84:	46bd      	mov	sp, r7
   b5b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5b8a:	bf00      	nop
   b5b8c:	2003dddc 	.word	0x2003dddc
   b5b90:	2003dd84 	.word	0x2003dd84
   b5b94:	2003ddec 	.word	0x2003ddec
   b5b98:	000c0f75 	.word	0x000c0f75
   b5b9c:	000c0f63 	.word	0x000c0f63
   b5ba0:	2003de10 	.word	0x2003de10

000b5ba4 <_Z11WaterBotSimh>:
void WaterBotSim(uint8_t count){
   b5ba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5ba8:	4d1c      	ldr	r5, [pc, #112]	; (b5c1c <_Z11WaterBotSimh+0x78>)
        WaterBots.push_back(simBot);
   b5baa:	f8df 9070 	ldr.w	r9, [pc, #112]	; b5c1c <_Z11WaterBotSimh+0x78>
   b5bae:	e9d5 2300 	ldrd	r2, r3, [r5]
   b5bb2:	1a9b      	subs	r3, r3, r2
   b5bb4:	4a1a      	ldr	r2, [pc, #104]	; (b5c20 <_Z11WaterBotSimh+0x7c>)
   b5bb6:	109b      	asrs	r3, r3, #2
   b5bb8:	4353      	muls	r3, r2
    if(count + WaterBots.size() > 10) count = 10-WaterBots.size();
   b5bba:	b2dc      	uxtb	r4, r3
   b5bbc:	4403      	add	r3, r0
   b5bbe:	2b0a      	cmp	r3, #10
   b5bc0:	bf84      	itt	hi
   b5bc2:	f1c4 000a 	rsbhi	r0, r4, #10
   b5bc6:	b2c0      	uxtbhi	r0, r0
    uint8_t botloop = count+WaterBots.size();
   b5bc8:	4420      	add	r0, r4
void WaterBotSim(uint8_t count){
   b5bca:	b091      	sub	sp, #68	; 0x44
    uint8_t botloop = count+WaterBots.size();
   b5bcc:	b2c4      	uxtb	r4, r0
   b5bce:	2600      	movs	r6, #0
        simBot.BLEAvail = false;
   b5bd0:	f44f 3880 	mov.w	r8, #65536	; 0x10000
   b5bd4:	b2f7      	uxtb	r7, r6
    for(uint8_t temp = 0; temp < botloop; temp++){
   b5bd6:	42bc      	cmp	r4, r7
   b5bd8:	d91d      	bls.n	b5c16 <_Z11WaterBotSimh+0x72>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b5bda:	e9d5 3000 	ldrd	r3, r0, [r5]
        int dupeBot = false;
   b5bde:	2200      	movs	r2, #0
        for(WaterBot wb: WaterBots){
   b5be0:	4298      	cmp	r0, r3
   b5be2:	d005      	beq.n	b5bf0 <_Z11WaterBotSimh+0x4c>
            if(wb.botNum == temp) dupeBot = true;
   b5be4:	7899      	ldrb	r1, [r3, #2]
   b5be6:	333c      	adds	r3, #60	; 0x3c
   b5be8:	42b9      	cmp	r1, r7
   b5bea:	bf08      	it	eq
   b5bec:	2201      	moveq	r2, #1
	return *this;
   b5bee:	e7f7      	b.n	b5be0 <_Z11WaterBotSimh+0x3c>
        if(dupeBot) continue;
   b5bf0:	b97a      	cbnz	r2, b5c12 <_Z11WaterBotSimh+0x6e>
        WaterBot simBot;
   b5bf2:	a801      	add	r0, sp, #4
   b5bf4:	f7fe fe52 	bl	b489c <_ZN8WaterBotC1Ev>
        simBot.battPercent = random(100);
   b5bf8:	2064      	movs	r0, #100	; 0x64
        simBot.botNum = temp;
   b5bfa:	f88d 7006 	strb.w	r7, [sp, #6]
        simBot.BLEAvail = false;
   b5bfe:	f8cd 8008 	str.w	r8, [sp, #8]
        simBot.battPercent = random(100);
   b5c02:	f007 fa9b 	bl	bd13c <_Z6randomi>
        WaterBots.push_back(simBot);
   b5c06:	a901      	add	r1, sp, #4
        simBot.battPercent = random(100);
   b5c08:	f88d 0007 	strb.w	r0, [sp, #7]
        WaterBots.push_back(simBot);
   b5c0c:	4648      	mov	r0, r9
   b5c0e:	f7ff fc39 	bl	b5484 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
    for(uint8_t temp = 0; temp < botloop; temp++){
   b5c12:	3601      	adds	r6, #1
   b5c14:	e7de      	b.n	b5bd4 <_Z11WaterBotSimh+0x30>
}
   b5c16:	b011      	add	sp, #68	; 0x44
   b5c18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5c1c:	2003dcc8 	.word	0x2003dcc8
   b5c20:	eeeeeeef 	.word	0xeeeeeeef

000b5c24 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b5c24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c28:	e9d0 8900 	ldrd	r8, r9, [r0]
   b5c2c:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
   b5c2e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c32:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
   b5c36:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   b5c3a:	4607      	mov	r7, r0
   b5c3c:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c3e:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   b5c42:	d102      	bne.n	b5c4a <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b5c44:	4820      	ldr	r0, [pc, #128]	; (b5cc8 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
   b5c46:	f007 ffd9 	bl	bdbfc <_ZSt20__throw_length_errorPKc>
   b5c4a:	2c01      	cmp	r4, #1
   b5c4c:	4622      	mov	r2, r4
   b5c4e:	bf38      	it	cc
   b5c50:	2201      	movcc	r2, #1
   b5c52:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b5c54:	eba1 0508 	sub.w	r5, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5c58:	d231      	bcs.n	b5cbe <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5c5a:	b394      	cbz	r4, b5cc2 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
   b5c5c:	429c      	cmp	r4, r3
   b5c5e:	bf28      	it	cs
   b5c60:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5c62:	00e0      	lsls	r0, r4, #3
   b5c64:	f7fe fa17 	bl	b4096 <_Znwj>
   b5c68:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5c6a:	1973      	adds	r3, r6, r5
   b5c6c:	bf1c      	itt	ne
   b5c6e:	e9db 0100 	ldrdne	r0, r1, [fp]
   b5c72:	e9c3 0100 	strdne	r0, r1, [r3]
      if (__count > 0)
   b5c76:	2d00      	cmp	r5, #0
   b5c78:	dd04      	ble.n	b5c84 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x60>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b5c7a:	462a      	mov	r2, r5
   b5c7c:	4641      	mov	r1, r8
   b5c7e:	4630      	mov	r0, r6
   b5c80:	f008 fe91 	bl	be9a6 <memmove>
      ptrdiff_t __count = __last - __first;
   b5c84:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
   b5c88:	3508      	adds	r5, #8
      if (__count > 0)
   b5c8a:	f1b9 0f00 	cmp.w	r9, #0
   b5c8e:	4435      	add	r5, r6
   b5c90:	dd04      	ble.n	b5c9c <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b5c92:	464a      	mov	r2, r9
   b5c94:	4651      	mov	r1, sl
   b5c96:	4628      	mov	r0, r5
   b5c98:	f008 fe77 	bl	be98a <memcpy>
      return __result + __count;
   b5c9c:	444d      	add	r5, r9
	if (__p)
   b5c9e:	f1b8 0f00 	cmp.w	r8, #0
   b5ca2:	d005      	beq.n	b5cb0 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
   b5ca4:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b5ca6:	4640      	mov	r0, r8
   b5ca8:	eba1 0108 	sub.w	r1, r1, r8
   b5cac:	f7fe f9f7 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5cb0:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   b5cb4:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5cb8:	60bc      	str	r4, [r7, #8]
    }
   b5cba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5cbe:	461c      	mov	r4, r3
   b5cc0:	e7cf      	b.n	b5c62 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5cc2:	4626      	mov	r6, r4
   b5cc4:	e7d1      	b.n	b5c6a <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
   b5cc6:	bf00      	nop
   b5cc8:	000c0e23 	.word	0x000c0e23

000b5ccc <_Z7BLEScani>:
void BLEScan(int BotNumber){
   b5ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5cd0:	b0a7      	sub	sp, #156	; 0x9c
   b5cd2:	4606      	mov	r6, r0
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   b5cd4:	f004 fea2 	bl	baa1c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5cd8:	497c      	ldr	r1, [pc, #496]	; (b5ecc <_Z7BLEScani+0x200>)
   b5cda:	2214      	movs	r2, #20
   b5cdc:	f004 ff96 	bl	bac0c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
	if (count > 0) {
   b5ce0:	4680      	mov	r8, r0
   b5ce2:	2800      	cmp	r0, #0
   b5ce4:	f000 80ee 	beq.w	b5ec4 <_Z7BLEScani+0x1f8>
    const BleAddress& address() const {
        return address_;
    }

    const BleAdvertisingData& advertisingData() const {
        return advertisingData_;
   b5ce8:	f8df b1e0 	ldr.w	fp, [pc, #480]	; b5ecc <_Z7BLEScani+0x200>
		for (uint8_t ii = 0; ii < count; ii++) {
   b5cec:	2400      	movs	r4, #0
			BleUuid foundServiceUuid;
   b5cee:	eb04 09c4 	add.w	r9, r4, r4, lsl #3
   b5cf2:	ea4f 0989 	mov.w	r9, r9, lsl #2
   b5cf6:	f109 0708 	add.w	r7, r9, #8
   b5cfa:	a80a      	add	r0, sp, #40	; 0x28
   b5cfc:	445f      	add	r7, fp
   b5cfe:	f004 faf1 	bl	ba2e4 <_ZN8particle7BleUuidC1Ev>
			size_t svcCount = scanResults[ii].advertisingData().serviceUUID(&foundServiceUuid, 1);
   b5d02:	2201      	movs	r2, #1
   b5d04:	a90a      	add	r1, sp, #40	; 0x28
   b5d06:	4638      	mov	r0, r7
   b5d08:	f005 fe48 	bl	bb99c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
            if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   b5d0c:	4682      	mov	sl, r0
   b5d0e:	2800      	cmp	r0, #0
   b5d10:	d056      	beq.n	b5dc0 <_Z7BLEScani+0xf4>
   b5d12:	496f      	ldr	r1, [pc, #444]	; (b5ed0 <_Z7BLEScani+0x204>)
   b5d14:	a80a      	add	r0, sp, #40	; 0x28
   b5d16:	f004 fb40 	bl	ba39a <_ZNK8particle7BleUuideqERKS0_>
   b5d1a:	4605      	mov	r5, r0
   b5d1c:	2800      	cmp	r0, #0
   b5d1e:	d04f      	beq.n	b5dc0 <_Z7BLEScani+0xf4>
                scanResults[ii].advertisingData().customData(BLECustomData,CUSTOM_DATA_LEN);
   b5d20:	2208      	movs	r2, #8
   b5d22:	a908      	add	r1, sp, #32
   b5d24:	4638      	mov	r0, r7
   b5d26:	f004 fc95 	bl	ba654 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
                if(BotNumber == -2){
   b5d2a:	1cb2      	adds	r2, r6, #2
   b5d2c:	d153      	bne.n	b5dd6 <_Z7BLEScani+0x10a>
                    Serial.printlnf("Found Bot #: %d %d %d %d %d %d %d %d, services: %d",BLECustomData[0],BLECustomData[1],BLECustomData[2],BLECustomData[3],BLECustomData[4],BLECustomData[5],BLECustomData[6],BLECustomData[7], svcCount);
   b5d2e:	f007 fda1 	bl	bd874 <_Z16_fetch_usbserialv>
   b5d32:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   b5d36:	9305      	str	r3, [sp, #20]
   b5d38:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   b5d3c:	9304      	str	r3, [sp, #16]
   b5d3e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   b5d42:	9303      	str	r3, [sp, #12]
   b5d44:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b5d48:	9302      	str	r3, [sp, #8]
   b5d4a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
      : _M_current(__i) { }
   b5d4e:	4f61      	ldr	r7, [pc, #388]	; (b5ed4 <_Z7BLEScani+0x208>)
   b5d50:	9301      	str	r3, [sp, #4]
   b5d52:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   b5d56:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b5d5a:	495f      	ldr	r1, [pc, #380]	; (b5ed8 <_Z7BLEScani+0x20c>)
   b5d5c:	9300      	str	r3, [sp, #0]
   b5d5e:	f8cd a018 	str.w	sl, [sp, #24]
   b5d62:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   b5d66:	f7fe faf5 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b5d6a:	687b      	ldr	r3, [r7, #4]
                        if(BLECustomData[0] == p.botNum){
   b5d6c:	f89d 1020 	ldrb.w	r1, [sp, #32]
   b5d70:	683a      	ldr	r2, [r7, #0]
                    for(PairBot p: BLEPair){
   b5d72:	4293      	cmp	r3, r2
   b5d74:	d005      	beq.n	b5d82 <_Z7BLEScani+0xb6>
                        if(BLECustomData[0] == p.botNum){
   b5d76:	f812 0b08 	ldrb.w	r0, [r2], #8
                            newBot = false;
   b5d7a:	4288      	cmp	r0, r1
   b5d7c:	bf08      	it	eq
   b5d7e:	2500      	moveq	r5, #0
	return *this;
   b5d80:	e7f7      	b.n	b5d72 <_Z7BLEScani+0xa6>
                    if(newBot){
   b5d82:	b1ed      	cbz	r5, b5dc0 <_Z7BLEScani+0xf4>
    const BleAdvertisingData& scanResponse() const {
        return scanResponse_;
    }

    int8_t rssi() const {
        return rssi_;
   b5d84:	2224      	movs	r2, #36	; 0x24
   b5d86:	fb02 b204 	mla	r2, r2, r4, fp
                        NewBot.botNum = BLECustomData[0];
   b5d8a:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
                        NewBot.rssi = scanResults[ii].rssi();
   b5d8e:	f992 2020 	ldrsb.w	r2, [r2, #32]
   b5d92:	9218      	str	r2, [sp, #96]	; 0x60
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5d94:	68ba      	ldr	r2, [r7, #8]
   b5d96:	4293      	cmp	r3, r2
   b5d98:	d017      	beq.n	b5dca <_Z7BLEScani+0xfe>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5d9a:	b11b      	cbz	r3, b5da4 <_Z7BLEScani+0xd8>
   b5d9c:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
   b5da0:	e883 0003 	stmia.w	r3, {r0, r1}
	    ++this->_M_impl._M_finish;
   b5da4:	687b      	ldr	r3, [r7, #4]
   b5da6:	3308      	adds	r3, #8
   b5da8:	607b      	str	r3, [r7, #4]
                        Serial.printlnf("Found new bot: %d", BLECustomData[0],BLEPair.size());
   b5daa:	f007 fd63 	bl	bd874 <_Z16_fetch_usbserialv>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5dae:	e9d7 2300 	ldrd	r2, r3, [r7]
   b5db2:	1a9b      	subs	r3, r3, r2
   b5db4:	4949      	ldr	r1, [pc, #292]	; (b5edc <_Z7BLEScani+0x210>)
   b5db6:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b5dba:	10db      	asrs	r3, r3, #3
   b5dbc:	f7fe faca 	bl	b4354 <_ZN5Print8printlnfEPKcz>
		for (uint8_t ii = 0; ii < count; ii++) {
   b5dc0:	3401      	adds	r4, #1
   b5dc2:	b2e4      	uxtb	r4, r4
   b5dc4:	4544      	cmp	r4, r8
   b5dc6:	d392      	bcc.n	b5cee <_Z7BLEScani+0x22>
   b5dc8:	e07c      	b.n	b5ec4 <_Z7BLEScani+0x1f8>
	  _M_realloc_insert(end(), __x);
   b5dca:	4842      	ldr	r0, [pc, #264]	; (b5ed4 <_Z7BLEScani+0x208>)
   b5dcc:	aa17      	add	r2, sp, #92	; 0x5c
   b5dce:	4619      	mov	r1, r3
   b5dd0:	f7ff ff28 	bl	b5c24 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   b5dd4:	e7e9      	b.n	b5daa <_Z7BLEScani+0xde>
                if(BotNumber == -1 || BotNumber == BLECustomData[0]){   //Check if a particular bot number was specified
   b5dd6:	1c73      	adds	r3, r6, #1
   b5dd8:	d003      	beq.n	b5de2 <_Z7BLEScani+0x116>
   b5dda:	f89d 3020 	ldrb.w	r3, [sp, #32]
   b5dde:	42b3      	cmp	r3, r6
   b5de0:	d1ee      	bne.n	b5dc0 <_Z7BLEScani+0xf4>
                    peer = BLE.connect(scanResults[ii].address());
   b5de2:	f004 fe1b 	bl	baa1c <_ZN8particle14BleLocalDevice11getInstanceEv>
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5de6:	4d3e      	ldr	r5, [pc, #248]	; (b5ee0 <_Z7BLEScani+0x214>)
   b5de8:	4601      	mov	r1, r0
   b5dea:	2301      	movs	r3, #1
   b5dec:	eb0b 0209 	add.w	r2, fp, r9
   b5df0:	a817      	add	r0, sp, #92	; 0x5c
   b5df2:	f006 fa0b 	bl	bc20c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   b5df6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b5df8:	9c18      	ldr	r4, [sp, #96]	; 0x60
   b5dfa:	602b      	str	r3, [r5, #0]
	if (__tmp != _M_pi)
   b5dfc:	686b      	ldr	r3, [r5, #4]
   b5dfe:	429c      	cmp	r4, r3
   b5e00:	d008      	beq.n	b5e14 <_Z7BLEScani+0x148>
	    if (__tmp != 0)
   b5e02:	b114      	cbz	r4, b5e0a <_Z7BLEScani+0x13e>
    { ++_M_use_count; }
   b5e04:	6863      	ldr	r3, [r4, #4]
   b5e06:	3301      	adds	r3, #1
   b5e08:	6063      	str	r3, [r4, #4]
	    if (_M_pi != 0)
   b5e0a:	6868      	ldr	r0, [r5, #4]
   b5e0c:	b108      	cbz	r0, b5e12 <_Z7BLEScani+0x146>
	      _M_pi->_M_release();
   b5e0e:	f7fe fbf1 	bl	b45f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b5e12:	606c      	str	r4, [r5, #4]
   b5e14:	a817      	add	r0, sp, #92	; 0x5c
   b5e16:	f004 ff70 	bl	bacfa <_ZN8particle13BlePeerDeviceD1Ev>
				    if (peer.connected()) {
   b5e1a:	4831      	ldr	r0, [pc, #196]	; (b5ee0 <_Z7BLEScani+0x214>)
   b5e1c:	f004 fd70 	bl	ba900 <_ZNK8particle13BlePeerDevice9connectedEv>
   b5e20:	4604      	mov	r4, r0
   b5e22:	2800      	cmp	r0, #0
   b5e24:	d04e      	beq.n	b5ec4 <_Z7BLEScani+0x1f8>
                        meshPair = false;
   b5e26:	4b2f      	ldr	r3, [pc, #188]	; (b5ee4 <_Z7BLEScani+0x218>)
      : _M_current(__i) { }
   b5e28:	4d2f      	ldr	r5, [pc, #188]	; (b5ee8 <_Z7BLEScani+0x21c>)
   b5e2a:	2200      	movs	r2, #0
   b5e2c:	701a      	strb	r2, [r3, #0]
                        startConnect = true;
   b5e2e:	4b2f      	ldr	r3, [pc, #188]	; (b5eec <_Z7BLEScani+0x220>)
   b5e30:	2601      	movs	r6, #1
                        scanResults[ii].advertisingData().customData(bufName, BLE_MAX_ADV_DATA_LEN);
   b5e32:	221f      	movs	r2, #31
   b5e34:	a90f      	add	r1, sp, #60	; 0x3c
   b5e36:	4638      	mov	r0, r7
                        startConnect = true;
   b5e38:	701e      	strb	r6, [r3, #0]
                        scanResults[ii].advertisingData().customData(bufName, BLE_MAX_ADV_DATA_LEN);
   b5e3a:	f004 fc0b 	bl	ba654 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
					    peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   b5e3e:	4a2c      	ldr	r2, [pc, #176]	; (b5ef0 <_Z7BLEScani+0x224>)
   b5e40:	492c      	ldr	r1, [pc, #176]	; (b5ef4 <_Z7BLEScani+0x228>)
   b5e42:	4827      	ldr	r0, [pc, #156]	; (b5ee0 <_Z7BLEScani+0x214>)
   b5e44:	f005 fe76 	bl	bbb34 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
					    peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
   b5e48:	4a2b      	ldr	r2, [pc, #172]	; (b5ef8 <_Z7BLEScani+0x22c>)
   b5e4a:	492c      	ldr	r1, [pc, #176]	; (b5efc <_Z7BLEScani+0x230>)
   b5e4c:	4824      	ldr	r0, [pc, #144]	; (b5ee0 <_Z7BLEScani+0x214>)
   b5e4e:	f005 fe71 	bl	bbb34 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        peer.getCharacteristicByUUID(peerOffloadCharacteristic, offldUuid);
   b5e52:	4a2b      	ldr	r2, [pc, #172]	; (b5f00 <_Z7BLEScani+0x234>)
   b5e54:	492b      	ldr	r1, [pc, #172]	; (b5f04 <_Z7BLEScani+0x238>)
   b5e56:	4822      	ldr	r0, [pc, #136]	; (b5ee0 <_Z7BLEScani+0x214>)
   b5e58:	f005 fe6c 	bl	bbb34 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
						Serial.printlnf("Connected to Bot %d",bufName[0]);
   b5e5c:	f007 fd0a 	bl	bd874 <_Z16_fetch_usbserialv>
   b5e60:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
   b5e64:	4928      	ldr	r1, [pc, #160]	; (b5f08 <_Z7BLEScani+0x23c>)
   b5e66:	f7fe fa75 	bl	b4354 <_ZN5Print8printlnfEPKcz>
                        WaterBot newWaterbot;
   b5e6a:	a817      	add	r0, sp, #92	; 0x5c
   b5e6c:	f7fe fd16 	bl	b489c <_ZN8WaterBotC1Ev>
                        newWaterbot.botNum = bufName[0];
   b5e70:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
                        PairBots.push_back(newWaterbot);
   b5e74:	4825      	ldr	r0, [pc, #148]	; (b5f0c <_Z7BLEScani+0x240>)
                        newWaterbot.botNum = bufName[0];
   b5e76:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
                        PairBots.push_back(newWaterbot);
   b5e7a:	a917      	add	r1, sp, #92	; 0x5c
                        newWaterbot.BLEAvail = true;
   b5e7c:	f88d 6060 	strb.w	r6, [sp, #96]	; 0x60
                        PairBots.push_back(newWaterbot);
   b5e80:	f7ff fb00 	bl	b5484 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
   b5e84:	6869      	ldr	r1, [r5, #4]
                            if(bufName[0] == w.botNum){
   b5e86:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
   b5e8a:	682b      	ldr	r3, [r5, #0]
                                BLEBot = &w;
   b5e8c:	4820      	ldr	r0, [pc, #128]	; (b5f10 <_Z7BLEScani+0x244>)
                        for(WaterBot &w: WaterBots){
   b5e8e:	428b      	cmp	r3, r1
   b5e90:	d007      	beq.n	b5ea2 <_Z7BLEScani+0x1d6>
                            if(bufName[0] == w.botNum){
   b5e92:	789f      	ldrb	r7, [r3, #2]
   b5e94:	4297      	cmp	r7, r2
                                w.BLEAvail = true;
   b5e96:	bf02      	ittt	eq
   b5e98:	711e      	strbeq	r6, [r3, #4]
                                newBot = false;
   b5e9a:	2400      	moveq	r4, #0
                                BLEBot = &w;
   b5e9c:	6003      	streq	r3, [r0, #0]
   b5e9e:	333c      	adds	r3, #60	; 0x3c
	return *this;
   b5ea0:	e7f5      	b.n	b5e8e <_Z7BLEScani+0x1c2>
                        if(newBot){
   b5ea2:	b17c      	cbz	r4, b5ec4 <_Z7BLEScani+0x1f8>
                            Serial.println("Found a new water bot ID");
   b5ea4:	f007 fce6 	bl	bd874 <_Z16_fetch_usbserialv>
   b5ea8:	491a      	ldr	r1, [pc, #104]	; (b5f14 <_Z7BLEScani+0x248>)
   b5eaa:	f007 f8ee 	bl	bd08a <_ZN5Print7printlnEPKc>
                            WaterBots.push_back(newWaterbot);
   b5eae:	480e      	ldr	r0, [pc, #56]	; (b5ee8 <_Z7BLEScani+0x21c>)
   b5eb0:	a917      	add	r1, sp, #92	; 0x5c
   b5eb2:	f7ff fae7 	bl	b5484 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      { return __normal_iterator(_M_current - __n); }
   b5eb6:	686b      	ldr	r3, [r5, #4]
                            BLEBot = &WaterBots.back();
   b5eb8:	4a15      	ldr	r2, [pc, #84]	; (b5f10 <_Z7BLEScani+0x244>)
   b5eba:	3b3c      	subs	r3, #60	; 0x3c
   b5ebc:	6013      	str	r3, [r2, #0]
                            redrawMenu = true;
   b5ebe:	4b16      	ldr	r3, [pc, #88]	; (b5f18 <_Z7BLEScani+0x24c>)
   b5ec0:	2201      	movs	r2, #1
   b5ec2:	701a      	strb	r2, [r3, #0]
}
   b5ec4:	b027      	add	sp, #156	; 0x9c
   b5ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5eca:	bf00      	nop
   b5ecc:	2003dee4 	.word	0x2003dee4
   b5ed0:	2003dcd4 	.word	0x2003dcd4
   b5ed4:	2003dc80 	.word	0x2003dc80
   b5ed8:	000c0f96 	.word	0x000c0f96
   b5edc:	000c0fc9 	.word	0x000c0fc9
   b5ee0:	2003dec0 	.word	0x2003dec0
   b5ee4:	2003de12 	.word	0x2003de12
   b5ee8:	2003dcc8 	.word	0x2003dcc8
   b5eec:	2003e638 	.word	0x2003e638
   b5ef0:	2003dcfc 	.word	0x2003dcfc
   b5ef4:	2003ded8 	.word	0x2003ded8
   b5ef8:	2003dce8 	.word	0x2003dce8
   b5efc:	2003ded0 	.word	0x2003ded0
   b5f00:	2003dd14 	.word	0x2003dd14
   b5f04:	2003dec8 	.word	0x2003dec8
   b5f08:	000c0fdb 	.word	0x000c0fdb
   b5f0c:	2003dca0 	.word	0x2003dca0
   b5f10:	2003dc7c 	.word	0x2003dc7c
   b5f14:	000c0ed2 	.word	0x000c0ed2
   b5f18:	2003da90 	.word	0x2003da90

000b5f1c <_Z13DataOffloaderh>:
void DataOffloader(uint8_t bot_id){
   b5f1c:	b530      	push	{r4, r5, lr}
    if (!logDir.open("/")) {
   b5f1e:	4938      	ldr	r1, [pc, #224]	; (b6000 <_Z13DataOffloaderh+0xe4>)
void DataOffloader(uint8_t bot_id){
   b5f20:	b087      	sub	sp, #28
   b5f22:	4605      	mov	r5, r0
    if (!logDir.open("/")) {
   b5f24:	2200      	movs	r2, #0
   b5f26:	4837      	ldr	r0, [pc, #220]	; (b6004 <_Z13DataOffloaderh+0xe8>)
   b5f28:	f7fe fba8 	bl	b467c <_ZN7FatFile4openEPKci>
   b5f2c:	b950      	cbnz	r0, b5f44 <_Z13DataOffloaderh+0x28>
        offloadingDone = true;
   b5f2e:	4b36      	ldr	r3, [pc, #216]	; (b6008 <_Z13DataOffloaderh+0xec>)
   b5f30:	2201      	movs	r2, #1
   b5f32:	701a      	strb	r2, [r3, #0]
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   b5f34:	f007 fc9e 	bl	bd874 <_Z16_fetch_usbserialv>
   b5f38:	4934      	ldr	r1, [pc, #208]	; (b600c <_Z13DataOffloaderh+0xf0>)
}
   b5f3a:	b007      	add	sp, #28
   b5f3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   b5f40:	f007 b8a3 	b.w	bd08a <_ZN5Print7printlnEPKc>
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   b5f44:	4a32      	ldr	r2, [pc, #200]	; (b6010 <_Z13DataOffloaderh+0xf4>)
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   b5f46:	4c33      	ldr	r4, [pc, #204]	; (b6014 <_Z13DataOffloaderh+0xf8>)
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   b5f48:	462b      	mov	r3, r5
   b5f4a:	210a      	movs	r1, #10
   b5f4c:	a803      	add	r0, sp, #12
   b5f4e:	f004 f80b 	bl	b9f68 <snprintf>
        sendData(OffloadCommand,0,true,false,false);
   b5f52:	2300      	movs	r3, #0
   b5f54:	4619      	mov	r1, r3
   b5f56:	9300      	str	r3, [sp, #0]
   b5f58:	2201      	movs	r2, #1
   b5f5a:	a803      	add	r0, sp, #12
   b5f5c:	f7fe fe6c 	bl	b4c38 <_Z8sendDataPKchbbb>
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   b5f60:	f007 fc88 	bl	bd874 <_Z16_fetch_usbserialv>
   b5f64:	6823      	ldr	r3, [r4, #0]
   b5f66:	492c      	ldr	r1, [pc, #176]	; (b6018 <_Z13DataOffloaderh+0xfc>)
   b5f68:	789a      	ldrb	r2, [r3, #2]
   b5f6a:	f7fe f9f3 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        delay(1000);
   b5f6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5f72:	f004 f839 	bl	b9fe8 <delay>
        if(BLEBot->botNum != OffloadingBot){
   b5f76:	6823      	ldr	r3, [r4, #0]
   b5f78:	789b      	ldrb	r3, [r3, #2]
   b5f7a:	42ab      	cmp	r3, r5
   b5f7c:	d01e      	beq.n	b5fbc <_Z13DataOffloaderh+0xa0>
            Serial.printlnf("Currently connected to Bot %f, need to connect to Bot %d",BLEBot->botNum,OffloadingBot);
   b5f7e:	f007 fc79 	bl	bd874 <_Z16_fetch_usbserialv>
   b5f82:	6822      	ldr	r2, [r4, #0]
   b5f84:	4925      	ldr	r1, [pc, #148]	; (b601c <_Z13DataOffloaderh+0x100>)
   b5f86:	7892      	ldrb	r2, [r2, #2]
   b5f88:	462b      	mov	r3, r5
   b5f8a:	f7fe f9e3 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            BLE.disconnect();
   b5f8e:	f004 fd45 	bl	baa1c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5f92:	f005 fb61 	bl	bb658 <_ZNK8particle14BleLocalDevice10disconnectEv>
            while(!BLE.connected()){
   b5f96:	f004 fd41 	bl	baa1c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5f9a:	f004 fdec 	bl	bab76 <_ZNK8particle14BleLocalDevice9connectedEv>
   b5f9e:	b930      	cbnz	r0, b5fae <_Z13DataOffloaderh+0x92>
                BLEScan(OffloadingBot);
   b5fa0:	4628      	mov	r0, r5
   b5fa2:	f7ff fe93 	bl	b5ccc <_Z7BLEScani>
                delay(50);
   b5fa6:	2032      	movs	r0, #50	; 0x32
   b5fa8:	f004 f81e 	bl	b9fe8 <delay>
            while(!BLE.connected()){
   b5fac:	e7f3      	b.n	b5f96 <_Z13DataOffloaderh+0x7a>
            Serial.printlnf("Successfully connected to Bot %d", BLEBot->botNum);
   b5fae:	f007 fc61 	bl	bd874 <_Z16_fetch_usbserialv>
   b5fb2:	6823      	ldr	r3, [r4, #0]
   b5fb4:	491a      	ldr	r1, [pc, #104]	; (b6020 <_Z13DataOffloaderh+0x104>)
   b5fb6:	789a      	ldrb	r2, [r3, #2]
   b5fb8:	f7fe f9cc 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   b5fbc:	f007 fc5a 	bl	bd874 <_Z16_fetch_usbserialv>
   b5fc0:	6823      	ldr	r3, [r4, #0]
   b5fc2:	4918      	ldr	r1, [pc, #96]	; (b6024 <_Z13DataOffloaderh+0x108>)
   b5fc4:	789a      	ldrb	r2, [r3, #2]
        offloadingDone = false;
   b5fc6:	4d10      	ldr	r5, [pc, #64]	; (b6008 <_Z13DataOffloaderh+0xec>)
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   b5fc8:	f7fe f9c4 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        offloadingDone = false;
   b5fcc:	2300      	movs	r3, #0
   b5fce:	702b      	strb	r3, [r5, #0]
        while(!offloadingDone) delay(100);
   b5fd0:	2064      	movs	r0, #100	; 0x64
   b5fd2:	f004 f809 	bl	b9fe8 <delay>
   b5fd6:	782b      	ldrb	r3, [r5, #0]
   b5fd8:	2b00      	cmp	r3, #0
   b5fda:	d0f9      	beq.n	b5fd0 <_Z13DataOffloaderh+0xb4>
        Serial.printlnf("Finished transferring file from Bot %d",BLEBot->botNum);
   b5fdc:	f007 fc4a 	bl	bd874 <_Z16_fetch_usbserialv>
   b5fe0:	6823      	ldr	r3, [r4, #0]
   b5fe2:	4911      	ldr	r1, [pc, #68]	; (b6028 <_Z13DataOffloaderh+0x10c>)
   b5fe4:	789a      	ldrb	r2, [r3, #2]
   b5fe6:	f7fe f9b5 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b5fea:	4810      	ldr	r0, [pc, #64]	; (b602c <_Z13DataOffloaderh+0x110>)
    if(logDir.isOpen()) logDir.close();
   b5fec:	7c03      	ldrb	r3, [r0, #16]
   b5fee:	b113      	cbz	r3, b5ff6 <_Z13DataOffloaderh+0xda>
   b5ff0:	3010      	adds	r0, #16
   b5ff2:	f001 fa39 	bl	b7468 <_ZN7FatFile5closeEv>
    offloadingMode = false;
   b5ff6:	4b0e      	ldr	r3, [pc, #56]	; (b6030 <_Z13DataOffloaderh+0x114>)
   b5ff8:	2200      	movs	r2, #0
   b5ffa:	701a      	strb	r2, [r3, #0]
}
   b5ffc:	b007      	add	sp, #28
   b5ffe:	bd30      	pop	{r4, r5, pc}
   b6000:	000c0fef 	.word	0x000c0fef
   b6004:	2003ddb8 	.word	0x2003ddb8
   b6008:	2003de66 	.word	0x2003de66
   b600c:	000c0ff1 	.word	0x000c0ff1
   b6010:	000c1032 	.word	0x000c1032
   b6014:	2003dc7c 	.word	0x2003dc7c
   b6018:	000c103b 	.word	0x000c103b
   b601c:	000c1068 	.word	0x000c1068
   b6020:	000c10a1 	.word	0x000c10a1
   b6024:	000c10c2 	.word	0x000c10c2
   b6028:	000c10e5 	.word	0x000c10e5
   b602c:	2003dda8 	.word	0x2003dda8
   b6030:	2003de67 	.word	0x2003de67

000b6034 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b6034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6038:	e9d0 9a00 	ldrd	r9, sl, [r0]
   b603c:	468b      	mov	fp, r1
	if (max_size() - size() < __n)
   b603e:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   b6042:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6044:	ebaa 0209 	sub.w	r2, sl, r9
	if (max_size() - size() < __n)
   b6048:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   b604c:	4680      	mov	r8, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b604e:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   b6052:	d102      	bne.n	b605a <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b6054:	4826      	ldr	r0, [pc, #152]	; (b60f0 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>)
   b6056:	f007 fdd1 	bl	bdbfc <_ZSt20__throw_length_errorPKc>
   b605a:	2c01      	cmp	r4, #1
   b605c:	4622      	mov	r2, r4
   b605e:	bf38      	it	cc
   b6060:	2201      	movcc	r2, #1
   b6062:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b6064:	ebab 0609 	sub.w	r6, fp, r9
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b6068:	d21a      	bcs.n	b60a0 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b606a:	b1dc      	cbz	r4, b60a4 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x70>
   b606c:	429c      	cmp	r4, r3
   b606e:	bf28      	it	cs
   b6070:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6072:	0120      	lsls	r0, r4, #4
   b6074:	9101      	str	r1, [sp, #4]
   b6076:	f7fe f80e 	bl	b4096 <_Znwj>
   b607a:	9901      	ldr	r1, [sp, #4]
   b607c:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b607e:	19a8      	adds	r0, r5, r6
   b6080:	d001      	beq.n	b6086 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x52>
   b6082:	f007 f9db 	bl	bd43c <_ZN6StringC1EOS_>
   b6086:	4628      	mov	r0, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6088:	464e      	mov	r6, r9
	      for (; __first != __last; ++__first, (void)++__cur)
   b608a:	45b3      	cmp	fp, r6
   b608c:	f100 0710 	add.w	r7, r0, #16
   b6090:	d00a      	beq.n	b60a8 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6092:	b110      	cbz	r0, b609a <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x66>
   b6094:	4631      	mov	r1, r6
   b6096:	f007 f9eb 	bl	bd470 <_ZN6StringC1ERKS_>
   b609a:	3610      	adds	r6, #16
   b609c:	4638      	mov	r0, r7
   b609e:	e7f4      	b.n	b608a <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x56>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b60a0:	461c      	mov	r4, r3
   b60a2:	e7e6      	b.n	b6072 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b60a4:	4625      	mov	r5, r4
   b60a6:	e7ea      	b.n	b607e <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   b60a8:	4556      	cmp	r6, sl
   b60aa:	d006      	beq.n	b60ba <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
   b60ac:	4631      	mov	r1, r6
   b60ae:	4638      	mov	r0, r7
   b60b0:	f007 f9de 	bl	bd470 <_ZN6StringC1ERKS_>
   b60b4:	3610      	adds	r6, #16
   b60b6:	3710      	adds	r7, #16
   b60b8:	e7f6      	b.n	b60a8 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b60ba:	464e      	mov	r6, r9
	  for (; __first != __last; ++__first)
   b60bc:	4556      	cmp	r6, sl
   b60be:	d004      	beq.n	b60ca <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x96>
      __pointer->~_Tp();
   b60c0:	4630      	mov	r0, r6
   b60c2:	f007 f93f 	bl	bd344 <_ZN6StringD1Ev>
	  for (; __first != __last; ++__first)
   b60c6:	3610      	adds	r6, #16
   b60c8:	e7f8      	b.n	b60bc <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x88>
	if (__p)
   b60ca:	f1b9 0f00 	cmp.w	r9, #0
   b60ce:	d006      	beq.n	b60de <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
		    this->_M_impl._M_end_of_storage - __old_start);
   b60d0:	f8d8 1008 	ldr.w	r1, [r8, #8]
	::operator delete(__p
   b60d4:	4648      	mov	r0, r9
   b60d6:	eba1 0109 	sub.w	r1, r1, r9
   b60da:	f7fd ffe0 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b60de:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   b60e2:	e9c8 5700 	strd	r5, r7, [r8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b60e6:	f8c8 4008 	str.w	r4, [r8, #8]
    }
   b60ea:	b003      	add	sp, #12
   b60ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b60f0:	000c0e23 	.word	0x000c0e23

000b60f4 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0>:
      vector<_Tp, _Alloc>::
   b60f4:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b60f6:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   b60fa:	42ab      	cmp	r3, r5
      vector<_Tp, _Alloc>::
   b60fc:	4604      	mov	r4, r0
   b60fe:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b6100:	d007      	beq.n	b6112 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b6102:	b113      	cbz	r3, b610a <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0+0x16>
   b6104:	4618      	mov	r0, r3
   b6106:	f007 f999 	bl	bd43c <_ZN6StringC1EOS_>
	    ++this->_M_impl._M_finish;
   b610a:	6863      	ldr	r3, [r4, #4]
   b610c:	3310      	adds	r3, #16
   b610e:	6063      	str	r3, [r4, #4]
      }
   b6110:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   b6112:	4619      	mov	r1, r3
   b6114:	f7ff ff8e 	bl	b6034 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
	return back();
   b6118:	e7fa      	b.n	b6110 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0+0x1c>
	...

000b611c <_ZN8MenuItemC1ERKS_>:
class MenuItem{
   b611c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6120:	e9d1 2700 	ldrd	r2, r7, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6124:	2300      	movs	r3, #0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6126:	1abf      	subs	r7, r7, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6128:	e9c0 3300 	strd	r3, r3, [r0]
   b612c:	4604      	mov	r4, r0
   b612e:	460d      	mov	r5, r1
   b6130:	6083      	str	r3, [r0, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6132:	d018      	beq.n	b6166 <_ZN8MenuItemC1ERKS_+0x4a>
	if (__n > this->_M_max_size())
   b6134:	4b18      	ldr	r3, [pc, #96]	; (b6198 <_ZN8MenuItemC1ERKS_+0x7c>)
   b6136:	429f      	cmp	r7, r3
   b6138:	d901      	bls.n	b613e <_ZN8MenuItemC1ERKS_+0x22>
	  std::__throw_bad_alloc();
   b613a:	f007 fd59 	bl	bdbf0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b613e:	4638      	mov	r0, r7
   b6140:	f7fd ffa9 	bl	b4096 <_Znwj>
   b6144:	4606      	mov	r6, r0
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b6146:	e9c4 6600 	strd	r6, r6, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b614a:	4437      	add	r7, r6
   b614c:	60a7      	str	r7, [r4, #8]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b614e:	e9d5 7800 	ldrd	r7, r8, [r5]
   b6152:	45b8      	cmp	r8, r7
   b6154:	d009      	beq.n	b616a <_ZN8MenuItemC1ERKS_+0x4e>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6156:	b11e      	cbz	r6, b6160 <_ZN8MenuItemC1ERKS_+0x44>
   b6158:	4639      	mov	r1, r7
   b615a:	4630      	mov	r0, r6
   b615c:	f007 f988 	bl	bd470 <_ZN6StringC1ERKS_>
   b6160:	3610      	adds	r6, #16
   b6162:	3710      	adds	r7, #16
   b6164:	e7f5      	b.n	b6152 <_ZN8MenuItemC1ERKS_+0x36>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6166:	463e      	mov	r6, r7
   b6168:	e7ed      	b.n	b6146 <_ZN8MenuItemC1ERKS_+0x2a>
	this->_M_impl._M_finish =
   b616a:	6066      	str	r6, [r4, #4]
   b616c:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   b6170:	e9c4 2303 	strd	r2, r3, [r4, #12]
   b6174:	696b      	ldr	r3, [r5, #20]
   b6176:	6163      	str	r3, [r4, #20]
   b6178:	8b2b      	ldrh	r3, [r5, #24]
   b617a:	8323      	strh	r3, [r4, #24]
   b617c:	f8d5 301a 	ldr.w	r3, [r5, #26]
   b6180:	f8c4 301a 	str.w	r3, [r4, #26]
   b6184:	f8d5 301e 	ldr.w	r3, [r5, #30]
   b6188:	f8c4 301e 	str.w	r3, [r4, #30]
   b618c:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   b618e:	8463      	strh	r3, [r4, #34]	; 0x22
   b6190:	4620      	mov	r0, r4
   b6192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6196:	bf00      	nop
   b6198:	7ffffff0 	.word	0x7ffffff0

000b619c <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b619c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b61a0:	e9d0 8700 	ldrd	r8, r7, [r0]
   b61a4:	4b23      	ldr	r3, [pc, #140]	; (b6234 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>)
   b61a6:	eba7 0408 	sub.w	r4, r7, r8
   b61aa:	10a4      	asrs	r4, r4, #2
   b61ac:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
   b61ae:	4b22      	ldr	r3, [pc, #136]	; (b6238 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>)
   b61b0:	429c      	cmp	r4, r3
   b61b2:	460e      	mov	r6, r1
   b61b4:	4605      	mov	r5, r0
   b61b6:	4611      	mov	r1, r2
   b61b8:	d102      	bne.n	b61c0 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
   b61ba:	4820      	ldr	r0, [pc, #128]	; (b623c <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa0>)
   b61bc:	f007 fd1e 	bl	bdbfc <_ZSt20__throw_length_errorPKc>
   b61c0:	2c01      	cmp	r4, #1
   b61c2:	4622      	mov	r2, r4
   b61c4:	bf38      	it	cc
   b61c6:	2201      	movcc	r2, #1
   b61c8:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b61ca:	eba6 0a08 	sub.w	sl, r6, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b61ce:	d22d      	bcs.n	b622c <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b61d0:	b374      	cbz	r4, b6230 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
   b61d2:	429c      	cmp	r4, r3
   b61d4:	bf28      	it	cs
   b61d6:	461c      	movcs	r4, r3
   b61d8:	2024      	movs	r0, #36	; 0x24
   b61da:	4360      	muls	r0, r4
   b61dc:	9101      	str	r1, [sp, #4]
   b61de:	f7fd ff5a 	bl	b4096 <_Znwj>
   b61e2:	9901      	ldr	r1, [sp, #4]
   b61e4:	4681      	mov	r9, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b61e6:	eb19 000a 	adds.w	r0, r9, sl
   b61ea:	d001      	beq.n	b61f0 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x54>
   b61ec:	f7ff ff96 	bl	b611c <_ZN8MenuItemC1ERKS_>
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
   b61f0:	4631      	mov	r1, r6
   b61f2:	464a      	mov	r2, r9
   b61f4:	4640      	mov	r0, r8
   b61f6:	f7fe fffa 	bl	b51ee <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
   b61fa:	4639      	mov	r1, r7
   b61fc:	f100 0224 	add.w	r2, r0, #36	; 0x24
   b6200:	4630      	mov	r0, r6
   b6202:	f7fe fff4 	bl	b51ee <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
   b6206:	4606      	mov	r6, r0
	if (__p)
   b6208:	f1b8 0f00 	cmp.w	r8, #0
   b620c:	d005      	beq.n	b621a <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7e>
		    this->_M_impl._M_end_of_storage - __old_start);
   b620e:	68a9      	ldr	r1, [r5, #8]
	::operator delete(__p
   b6210:	4640      	mov	r0, r8
   b6212:	eba1 0108 	sub.w	r1, r1, r8
   b6216:	f7fd ff42 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b621a:	2024      	movs	r0, #36	; 0x24
   b621c:	fb00 9404 	mla	r4, r0, r4, r9
      this->_M_impl._M_finish = __new_finish;
   b6220:	e9c5 9600 	strd	r9, r6, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b6224:	60ac      	str	r4, [r5, #8]
    }
   b6226:	b002      	add	sp, #8
   b6228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b622c:	461c      	mov	r4, r3
   b622e:	e7d3      	b.n	b61d8 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6230:	46a1      	mov	r9, r4
   b6232:	e7d8      	b.n	b61e6 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   b6234:	38e38e39 	.word	0x38e38e39
   b6238:	038e38e3 	.word	0x038e38e3
   b623c:	000c0e23 	.word	0x000c0e23

000b6240 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b6240:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b6242:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   b6246:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   b6248:	4604      	mov	r4, r0
   b624a:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b624c:	d007      	beq.n	b625e <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b624e:	b113      	cbz	r3, b6256 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x16>
   b6250:	4618      	mov	r0, r3
   b6252:	f7ff ff63 	bl	b611c <_ZN8MenuItemC1ERKS_>
	    ++this->_M_impl._M_finish;
   b6256:	6863      	ldr	r3, [r4, #4]
   b6258:	3324      	adds	r3, #36	; 0x24
   b625a:	6063      	str	r3, [r4, #4]
      }
   b625c:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   b625e:	4619      	mov	r1, r3
   b6260:	f7ff ff9c 	bl	b619c <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b6264:	e7fa      	b.n	b625c <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x1c>
	...

000b6268 <_Z10createMenuv>:
void createMenu(){
   b6268:	b570      	push	{r4, r5, r6, lr}
   b626a:	b0ae      	sub	sp, #184	; 0xb8
	: _M_start(), _M_finish(), _M_end_of_storage()
   b626c:	2400      	movs	r4, #0
            strcpy(itemName,itemString);
   b626e:	494c      	ldr	r1, [pc, #304]	; (b63a0 <_Z10createMenuv+0x138>)
   b6270:	9403      	str	r4, [sp, #12]
   b6272:	f10d 001e 	add.w	r0, sp, #30
            stepSize = inStep;
   b6276:	f240 1601 	movw	r6, #257	; 0x101
            minVal = minV;
   b627a:	f44f 7580 	mov.w	r5, #256	; 0x100
   b627e:	e9cd 4401 	strd	r4, r4, [sp, #4]
            strcpy(itemName,itemString);
   b6282:	f008 fc38 	bl	beaf6 <strcpy>
            stepSize = inStep;
   b6286:	230b      	movs	r3, #11
            strcpy(itemName,itemString);
   b6288:	4946      	ldr	r1, [pc, #280]	; (b63a4 <_Z10createMenuv+0x13c>)
            minVal = minV;
   b628a:	f8ad 501c 	strh.w	r5, [sp, #28]
            strcpy(itemName,itemString);
   b628e:	f10d 0042 	add.w	r0, sp, #66	; 0x42
            stepSize = inStep;
   b6292:	e9cd 3605 	strd	r3, r6, [sp, #20]
   b6296:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   b629a:	940c      	str	r4, [sp, #48]	; 0x30
            strcpy(itemName,itemString);
   b629c:	f008 fc2b 	bl	beaf6 <strcpy>
            stepSize = inStep;
   b62a0:	4b41      	ldr	r3, [pc, #260]	; (b63a8 <_Z10createMenuv+0x140>)
   b62a2:	930f      	str	r3, [sp, #60]	; 0x3c
            minVal = minV;
   b62a4:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
   b62a8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            strcpy(itemName,itemString);
   b62ac:	493f      	ldr	r1, [pc, #252]	; (b63ac <_Z10createMenuv+0x144>)
   b62ae:	9415      	str	r4, [sp, #84]	; 0x54
    battStat.MethodPointer = &WaterBot::battPercent;
   b62b0:	2303      	movs	r3, #3
            strcpy(itemName,itemString);
   b62b2:	f10d 0066 	add.w	r0, sp, #102	; 0x66
    battStat.MethodPointer = &WaterBot::battPercent;
   b62b6:	930d      	str	r3, [sp, #52]	; 0x34
   b62b8:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
            strcpy(itemName,itemString);
   b62bc:	f008 fc1b 	bl	beaf6 <strcpy>
    offloadItem.MethodPointerBool = &WaterBot::offloading;
   b62c0:	230c      	movs	r3, #12
            strcpy(itemName,itemString);
   b62c2:	493b      	ldr	r1, [pc, #236]	; (b63b0 <_Z10createMenuv+0x148>)
            minVal = minV;
   b62c4:	f8ad 5064 	strh.w	r5, [sp, #100]	; 0x64
            strcpy(itemName,itemString);
   b62c8:	f10d 008a 	add.w	r0, sp, #138	; 0x8a
            stepSize = inStep;
   b62cc:	e9cd 3617 	strd	r3, r6, [sp, #92]	; 0x5c
   b62d0:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
   b62d4:	941e      	str	r4, [sp, #120]	; 0x78
            strcpy(itemName,itemString);
   b62d6:	f008 fc0e 	bl	beaf6 <strcpy>
            stepSize = inStep;
   b62da:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b62de:	9321      	str	r3, [sp, #132]	; 0x84
    sentryToggle.labels.push_back("Rem");
   b62e0:	4934      	ldr	r1, [pc, #208]	; (b63b4 <_Z10createMenuv+0x14c>)
            minVal = minV;
   b62e2:	f44f 7300 	mov.w	r3, #512	; 0x200
    sentryToggle.labels.push_back("Rem");
   b62e6:	a825      	add	r0, sp, #148	; 0x94
            minVal = minV;
   b62e8:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    sentryToggle.labels.push_back("Rem");
   b62ec:	f007 f875 	bl	bd3da <_ZN6StringC1EPK19__FlashStringHelper>
      { emplace_back(std::move(__x)); }
   b62f0:	a925      	add	r1, sp, #148	; 0x94
   b62f2:	a81c      	add	r0, sp, #112	; 0x70
   b62f4:	f7ff fefe 	bl	b60f4 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0>
   b62f8:	a825      	add	r0, sp, #148	; 0x94
   b62fa:	f007 f823 	bl	bd344 <_ZN6StringD1Ev>
    sentryToggle.labels.push_back("Sen");
   b62fe:	492e      	ldr	r1, [pc, #184]	; (b63b8 <_Z10createMenuv+0x150>)
   b6300:	a825      	add	r0, sp, #148	; 0x94
   b6302:	f007 f86a 	bl	bd3da <_ZN6StringC1EPK19__FlashStringHelper>
   b6306:	a925      	add	r1, sp, #148	; 0x94
   b6308:	a81c      	add	r0, sp, #112	; 0x70
   b630a:	f7ff fef3 	bl	b60f4 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0>
   b630e:	a825      	add	r0, sp, #148	; 0x94
   b6310:	f007 f818 	bl	bd344 <_ZN6StringD1Ev>
    sentryToggle.labels.push_back("Aut");
   b6314:	4929      	ldr	r1, [pc, #164]	; (b63bc <_Z10createMenuv+0x154>)
   b6316:	a825      	add	r0, sp, #148	; 0x94
   b6318:	f007 f85f 	bl	bd3da <_ZN6StringC1EPK19__FlashStringHelper>
   b631c:	a925      	add	r1, sp, #148	; 0x94
   b631e:	a81c      	add	r0, sp, #112	; 0x70
   b6320:	f7ff fee8 	bl	b60f4 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0>
   b6324:	a825      	add	r0, sp, #148	; 0x94
   b6326:	f007 f80d 	bl	bd344 <_ZN6StringD1Ev>
    sentryToggle.MethodPointer = &WaterBot::driveMode;
   b632a:	2307      	movs	r3, #7
            strcpy(itemName,itemString);
   b632c:	4924      	ldr	r1, [pc, #144]	; (b63c0 <_Z10createMenuv+0x158>)
    sentryToggle.MethodPointer = &WaterBot::driveMode;
   b632e:	931f      	str	r3, [sp, #124]	; 0x7c
            strcpy(itemName,itemString);
   b6330:	f10d 00ae 	add.w	r0, sp, #174	; 0xae
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6334:	e9cd 4425 	strd	r4, r4, [sp, #148]	; 0x94
   b6338:	9427      	str	r4, [sp, #156]	; 0x9c
   b633a:	f008 fbdc 	bl	beaf6 <strcpy>
    signalToggle.MethodPointerBool = &WaterBot::signal;
   b633e:	2308      	movs	r3, #8
    MenuItems.push_back(dataRecord);
   b6340:	a901      	add	r1, sp, #4
   b6342:	4820      	ldr	r0, [pc, #128]	; (b63c4 <_Z10createMenuv+0x15c>)
            minVal = minV;
   b6344:	f8ad 50ac 	strh.w	r5, [sp, #172]	; 0xac
            stepSize = inStep;
   b6348:	e9cd 3629 	strd	r3, r6, [sp, #164]	; 0xa4
    MenuItems.push_back(dataRecord);
   b634c:	f7ff ff78 	bl	b6240 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(battStat);
   b6350:	a90a      	add	r1, sp, #40	; 0x28
   b6352:	481c      	ldr	r0, [pc, #112]	; (b63c4 <_Z10createMenuv+0x15c>)
   b6354:	f7ff ff74 	bl	b6240 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(sentryToggle);
   b6358:	a91c      	add	r1, sp, #112	; 0x70
   b635a:	481a      	ldr	r0, [pc, #104]	; (b63c4 <_Z10createMenuv+0x15c>)
   b635c:	f7ff ff70 	bl	b6240 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(offloadItem);
   b6360:	a913      	add	r1, sp, #76	; 0x4c
   b6362:	4818      	ldr	r0, [pc, #96]	; (b63c4 <_Z10createMenuv+0x15c>)
   b6364:	f7ff ff6c 	bl	b6240 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(signalToggle);
   b6368:	a925      	add	r1, sp, #148	; 0x94
   b636a:	4816      	ldr	r0, [pc, #88]	; (b63c4 <_Z10createMenuv+0x15c>)
   b636c:	f7ff ff68 	bl	b6240 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    SelectedItem = &MenuItems.at(menuItem);
   b6370:	4b15      	ldr	r3, [pc, #84]	; (b63c8 <_Z10createMenuv+0x160>)
   b6372:	4814      	ldr	r0, [pc, #80]	; (b63c4 <_Z10createMenuv+0x15c>)
   b6374:	7819      	ldrb	r1, [r3, #0]
   b6376:	f7fe fde9 	bl	b4f4c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b637a:	4b14      	ldr	r3, [pc, #80]	; (b63cc <_Z10createMenuv+0x164>)
   b637c:	6018      	str	r0, [r3, #0]
class MenuItem{
   b637e:	a825      	add	r0, sp, #148	; 0x94
   b6380:	f7fe ff22 	bl	b51c8 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b6384:	a81c      	add	r0, sp, #112	; 0x70
   b6386:	f7fe ff1f 	bl	b51c8 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b638a:	a813      	add	r0, sp, #76	; 0x4c
   b638c:	f7fe ff1c 	bl	b51c8 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b6390:	a80a      	add	r0, sp, #40	; 0x28
   b6392:	f7fe ff19 	bl	b51c8 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b6396:	a801      	add	r0, sp, #4
   b6398:	f7fe ff16 	bl	b51c8 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
}
   b639c:	b02e      	add	sp, #184	; 0xb8
   b639e:	bd70      	pop	{r4, r5, r6, pc}
   b63a0:	000c110c 	.word	0x000c110c
   b63a4:	000c1113 	.word	0x000c1113
   b63a8:	01000001 	.word	0x01000001
   b63ac:	000c111b 	.word	0x000c111b
   b63b0:	000c1123 	.word	0x000c1123
   b63b4:	000c112a 	.word	0x000c112a
   b63b8:	000c112e 	.word	0x000c112e
   b63bc:	000c1132 	.word	0x000c1132
   b63c0:	000c1136 	.word	0x000c1136
   b63c4:	2003dc94 	.word	0x2003dc94
   b63c8:	2003de11 	.word	0x2003de11
   b63cc:	2003dcb8 	.word	0x2003dcb8

000b63d0 <_GLOBAL__sub_I_SystemMode>:
   b63d0:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b63d2:	4b5d      	ldr	r3, [pc, #372]	; (b6548 <_GLOBAL__sub_I_SystemMode+0x178>)
   b63d4:	4c5d      	ldr	r4, [pc, #372]	; (b654c <_GLOBAL__sub_I_SystemMode+0x17c>)
   b63d6:	2201      	movs	r2, #1
   b63d8:	701a      	strb	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b63da:	4b5d      	ldr	r3, [pc, #372]	; (b6550 <_GLOBAL__sub_I_SystemMode+0x180>)
   b63dc:	2200      	movs	r2, #0
   b63de:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b63e2:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b63e6:	b088      	sub	sp, #32
   b63e8:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b63ea:	2003      	movs	r0, #3
   b63ec:	f003 fcc8 	bl	b9d80 <set_system_mode>
const BleUuid serviceUuid("b4206910-dc4b-5743-c8b1-92d0e75182b0");
   b63f0:	4958      	ldr	r1, [pc, #352]	; (b6554 <_GLOBAL__sub_I_SystemMode+0x184>)
   b63f2:	4859      	ldr	r0, [pc, #356]	; (b6558 <_GLOBAL__sub_I_SystemMode+0x188>)
   b63f4:	f004 f850 	bl	ba498 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("b4206912-dc4b-5743-c8b1-92d0e75182b0");
   b63f8:	4958      	ldr	r1, [pc, #352]	; (b655c <_GLOBAL__sub_I_SystemMode+0x18c>)
   b63fa:	4859      	ldr	r0, [pc, #356]	; (b6560 <_GLOBAL__sub_I_SystemMode+0x190>)
   b63fc:	f004 f84c 	bl	ba498 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("b4206913-dc4b-5743-c8b1-92d0e75182b0");
   b6400:	4958      	ldr	r1, [pc, #352]	; (b6564 <_GLOBAL__sub_I_SystemMode+0x194>)
   b6402:	4859      	ldr	r0, [pc, #356]	; (b6568 <_GLOBAL__sub_I_SystemMode+0x198>)
   b6404:	f004 f848 	bl	ba498 <_ZN8particle7BleUuidC1EPKc>
const BleUuid offldUuid("b4206914-dc4b-5743-c8b1-92d0e75182b0");
   b6408:	4958      	ldr	r1, [pc, #352]	; (b656c <_GLOBAL__sub_I_SystemMode+0x19c>)
   b640a:	4859      	ldr	r0, [pc, #356]	; (b6570 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b640c:	f004 f844 	bl	ba498 <_ZN8particle7BleUuidC1EPKc>
   b6410:	2514      	movs	r5, #20
            : rssi_(BLE_RSSI_INVALID) {
   b6412:	267f      	movs	r6, #127	; 0x7f
   b6414:	4620      	mov	r0, r4
   b6416:	f003 ff5a 	bl	ba2ce <_ZN8particle10BleAddressC1Ev>
   b641a:	f104 0008 	add.w	r0, r4, #8
   b641e:	f004 ff86 	bl	bb32e <_ZN8particle18BleAdvertisingDataC1Ev>
   b6422:	f104 0014 	add.w	r0, r4, #20
   b6426:	f004 ff82 	bl	bb32e <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_COUNT];
   b642a:	3d01      	subs	r5, #1
   b642c:	f884 6020 	strb.w	r6, [r4, #32]
   b6430:	f104 0424 	add.w	r4, r4, #36	; 0x24
   b6434:	d1ee      	bne.n	b6414 <_GLOBAL__sub_I_SystemMode+0x44>
BleCharacteristic peerTxCharacteristic;
   b6436:	484f      	ldr	r0, [pc, #316]	; (b6574 <_GLOBAL__sub_I_SystemMode+0x1a4>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6438:	4c4f      	ldr	r4, [pc, #316]	; (b6578 <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b643a:	f004 f963 	bl	ba704 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerRxCharacteristic;
   b643e:	484f      	ldr	r0, [pc, #316]	; (b657c <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b6440:	f004 f960 	bl	ba704 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerOffloadCharacteristic;
   b6444:	484e      	ldr	r0, [pc, #312]	; (b6580 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b6446:	f004 f95d 	bl	ba704 <_ZN8particle17BleCharacteristicC1Ev>
BlePeerDevice peer;
   b644a:	484e      	ldr	r0, [pc, #312]	; (b6584 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b644c:	f004 fa36 	bl	ba8bc <_ZN8particle13BlePeerDeviceC1Ev>
Adafruit_SH1107 oled = Adafruit_SH1107(64, 128, &Wire, OLED_RESET);
   b6450:	f007 fb68 	bl	bdb24 <_Z19__fetch_global_Wirev>
   b6454:	4a4c      	ldr	r2, [pc, #304]	; (b6588 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   b6456:	494d      	ldr	r1, [pc, #308]	; (b658c <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b6458:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b645c:	2213      	movs	r2, #19
   b645e:	4603      	mov	r3, r0
   b6460:	9200      	str	r2, [sp, #0]
   b6462:	484b      	ldr	r0, [pc, #300]	; (b6590 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   b6464:	2280      	movs	r2, #128	; 0x80
   b6466:	2140      	movs	r1, #64	; 0x40
   b6468:	f003 f872 	bl	b9550 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>
   b646c:	7823      	ldrb	r3, [r4, #0]
   b646e:	f3bf 8f5b 	dmb	ish
   b6472:	07d8      	lsls	r0, r3, #31
   b6474:	d40a      	bmi.n	b648c <_GLOBAL__sub_I_SystemMode+0xbc>
   b6476:	4620      	mov	r0, r4
   b6478:	f7fd fe20 	bl	b40bc <__cxa_guard_acquire>
   b647c:	b130      	cbz	r0, b648c <_GLOBAL__sub_I_SystemMode+0xbc>
   b647e:	4845      	ldr	r0, [pc, #276]	; (b6594 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b6480:	2101      	movs	r1, #1
   b6482:	f006 fe73 	bl	bd16c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6486:	4620      	mov	r0, r4
   b6488:	f7fd fe1d 	bl	b40c6 <__cxa_guard_release>
  explicit SdFat(SPIClass* spiPort) {
   b648c:	4b42      	ldr	r3, [pc, #264]	; (b6598 <_GLOBAL__sub_I_SystemMode+0x1c8>)
	    _M_invoker = &_My_handler::_M_invoke;
   b648e:	4e43      	ldr	r6, [pc, #268]	; (b659c <_GLOBAL__sub_I_SystemMode+0x1cc>)
	    _M_manager = &_My_handler::_M_manager;
   b6490:	4d43      	ldr	r5, [pc, #268]	; (b65a0 <_GLOBAL__sub_I_SystemMode+0x1d0>)
Timer at1(5000,actionTimer5);
   b6492:	4844      	ldr	r0, [pc, #272]	; (b65a4 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b6494:	2264      	movs	r2, #100	; 0x64
   b6496:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
  {
   b649a:	4a43      	ldr	r2, [pc, #268]	; (b65a8 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b649c:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   b64a0:	2201      	movs	r2, #1
   b64a2:	2400      	movs	r4, #0
   b64a4:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b64a8:	4a3a      	ldr	r2, [pc, #232]	; (b6594 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b64aa:	605c      	str	r4, [r3, #4]
   b64ac:	f8c3 443c 	str.w	r4, [r3, #1084]	; 0x43c
   b64b0:	f8c3 4468 	str.w	r4, [r3, #1128]	; 0x468
   b64b4:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   b64b8:	f8a3 447c 	strh.w	r4, [r3, #1148]	; 0x47c
   b64bc:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
    Print() : write_error(0) {}
   b64c0:	4b3a      	ldr	r3, [pc, #232]	; (b65ac <_GLOBAL__sub_I_SystemMode+0x1dc>)
  File() {}
   b64c2:	4a3b      	ldr	r2, [pc, #236]	; (b65b0 <_GLOBAL__sub_I_SystemMode+0x1e0>)
   b64c4:	605c      	str	r4, [r3, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b64c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b64ca:	601a      	str	r2, [r3, #0]
   b64cc:	6099      	str	r1, [r3, #8]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b64ce:	611c      	str	r4, [r3, #16]
   b64d0:	4b38      	ldr	r3, [pc, #224]	; (b65b4 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   b64d2:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b64d6:	601a      	str	r2, [r3, #0]
   b64d8:	611c      	str	r4, [r3, #16]
   b64da:	4b37      	ldr	r3, [pc, #220]	; (b65b8 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   b64dc:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b64e0:	601a      	str	r2, [r3, #0]
   b64e2:	611c      	str	r4, [r3, #16]
   b64e4:	4b35      	ldr	r3, [pc, #212]	; (b65bc <_GLOBAL__sub_I_SystemMode+0x1ec>)
   b64e6:	e9c3 4400 	strd	r4, r4, [r3]
   b64ea:	609c      	str	r4, [r3, #8]
   b64ec:	4b34      	ldr	r3, [pc, #208]	; (b65c0 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   b64ee:	e9c3 4400 	strd	r4, r4, [r3]
   b64f2:	609c      	str	r4, [r3, #8]
   b64f4:	4b33      	ldr	r3, [pc, #204]	; (b65c4 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   b64f6:	e9c3 4400 	strd	r4, r4, [r3]
   b64fa:	609c      	str	r4, [r3, #8]
   b64fc:	4b32      	ldr	r3, [pc, #200]	; (b65c8 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   b64fe:	e9c3 4400 	strd	r4, r4, [r3]
   b6502:	609c      	str	r4, [r3, #8]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6504:	4b31      	ldr	r3, [pc, #196]	; (b65cc <_GLOBAL__sub_I_SystemMode+0x1fc>)
   b6506:	9304      	str	r3, [sp, #16]
   b6508:	aa04      	add	r2, sp, #16
   b650a:	4623      	mov	r3, r4
   b650c:	f241 3188 	movw	r1, #5000	; 0x1388
	    _M_invoker = &_My_handler::_M_invoke;
   b6510:	9607      	str	r6, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
   b6512:	9506      	str	r5, [sp, #24]
   b6514:	f7fe f882 	bl	b461c <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b6518:	a804      	add	r0, sp, #16
   b651a:	f7fe f82d 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b651e:	4b2c      	ldr	r3, [pc, #176]	; (b65d0 <_GLOBAL__sub_I_SystemMode+0x200>)
   b6520:	9304      	str	r3, [sp, #16]
Timer at2(60000,actionTimer60);
   b6522:	aa04      	add	r2, sp, #16
   b6524:	4623      	mov	r3, r4
   b6526:	f64e 2160 	movw	r1, #60000	; 0xea60
   b652a:	482a      	ldr	r0, [pc, #168]	; (b65d4 <_GLOBAL__sub_I_SystemMode+0x204>)
	    _M_manager = &_My_handler::_M_manager;
   b652c:	e9cd 5606 	strd	r5, r6, [sp, #24]
   b6530:	f7fe f874 	bl	b461c <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b6534:	a804      	add	r0, sp, #16
   b6536:	f7fe f81f 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
   b653a:	4b27      	ldr	r3, [pc, #156]	; (b65d8 <_GLOBAL__sub_I_SystemMode+0x208>)
   b653c:	e9c3 4400 	strd	r4, r4, [r3]
   b6540:	609c      	str	r4, [r3, #8]
   b6542:	b008      	add	sp, #32
   b6544:	bd70      	pop	{r4, r5, r6, pc}
   b6546:	bf00      	nop
   b6548:	2003dd10 	.word	0x2003dd10
   b654c:	2003dee4 	.word	0x2003dee4
   b6550:	2003dcbc 	.word	0x2003dcbc
   b6554:	000c113d 	.word	0x000c113d
   b6558:	2003dcd4 	.word	0x2003dcd4
   b655c:	000c1162 	.word	0x000c1162
   b6560:	2003dce8 	.word	0x2003dce8
   b6564:	000c1187 	.word	0x000c1187
   b6568:	2003dcfc 	.word	0x2003dcfc
   b656c:	000c11ac 	.word	0x000c11ac
   b6570:	2003dd14 	.word	0x2003dd14
   b6574:	2003ded8 	.word	0x2003ded8
   b6578:	2003dc70 	.word	0x2003dc70
   b657c:	2003ded0 	.word	0x2003ded0
   b6580:	2003dec8 	.word	0x2003dec8
   b6584:	2003dec0 	.word	0x2003dec0
   b6588:	00061a80 	.word	0x00061a80
   b658c:	000186a0 	.word	0x000186a0
   b6590:	2003de68 	.word	0x2003de68
   b6594:	2003dc74 	.word	0x2003dc74
   b6598:	2003e1b4 	.word	0x2003e1b4
   b659c:	000b42b1 	.word	0x000b42b1
   b65a0:	000b429d 	.word	0x000b429d
   b65a4:	2003dd28 	.word	0x2003dd28
   b65a8:	000c12a8 	.word	0x000c12a8
   b65ac:	2003de14 	.word	0x2003de14
   b65b0:	000c12d0 	.word	0x000c12d0
   b65b4:	2003dddc 	.word	0x2003dddc
   b65b8:	2003dda8 	.word	0x2003dda8
   b65bc:	2003dcc8 	.word	0x2003dcc8
   b65c0:	2003dca0 	.word	0x2003dca0
   b65c4:	2003dc80 	.word	0x2003dc80
   b65c8:	2003dcac 	.word	0x2003dcac
   b65cc:	000b40e9 	.word	0x000b40e9
   b65d0:	000b41ed 	.word	0x000b41ed
   b65d4:	2003dd44 	.word	0x2003dd44
   b65d8:	2003dc94 	.word	0x2003dc94

000b65dc <_Z13printMenuItemhbbtt8WaterBot>:
void printMenuItem(uint8_t id, bool highlighted, bool selected, uint16_t x, uint16_t y, WaterBot wb){
   b65dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b65e0:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   b65e4:	4c64      	ldr	r4, [pc, #400]	; (b6778 <_Z13printMenuItemhbbtt8WaterBot+0x19c>)
   b65e6:	460f      	mov	r7, r1
        oled.setCursor(x+1,y+1);
   b65e8:	3601      	adds	r6, #1
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b65ea:	b219      	sxth	r1, r3
        oled.setCursor(x+1,y+1);
   b65ec:	3301      	adds	r3, #1
void printMenuItem(uint8_t id, bool highlighted, bool selected, uint16_t x, uint16_t y, WaterBot wb){
   b65ee:	4690      	mov	r8, r2
   b65f0:	4605      	mov	r5, r0
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b65f2:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
        oled.setCursor(x+1,y+1);
   b65f6:	fa0f f983 	sxth.w	r9, r3
   b65fa:	b236      	sxth	r6, r6
   b65fc:	f04f 0a10 	mov.w	sl, #16
    if(highlighted){
   b6600:	2f00      	cmp	r7, #0
   b6602:	d06f      	beq.n	b66e4 <_Z13printMenuItemhbbtt8WaterBot+0x108>
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b6604:	2701      	movs	r7, #1
   b6606:	2358      	movs	r3, #88	; 0x58
   b6608:	4620      	mov	r0, r4
   b660a:	e9cd a700 	strd	sl, r7, [sp]
   b660e:	9203      	str	r2, [sp, #12]
   b6610:	f002 f923 	bl	b885a <_ZN12Adafruit_GFX8fillRectEsssst>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6614:	f8a4 9010 	strh.w	r9, [r4, #16]
        oled.setTextSize(2);
   b6618:	2102      	movs	r1, #2
   b661a:	4620      	mov	r0, r4
   b661c:	8266      	strh	r6, [r4, #18]
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b661e:	f04f 0900 	mov.w	r9, #0
   b6622:	f002 fc36 	bl	b8e92 <_ZN12Adafruit_GFX11setTextSizeEh>
        oled.print(MenuItems.at(id).itemName);
   b6626:	4629      	mov	r1, r5
   b6628:	4854      	ldr	r0, [pc, #336]	; (b677c <_Z13printMenuItemhbbtt8WaterBot+0x1a0>)
   b662a:	f8c4 9014 	str.w	r9, [r4, #20]
   b662e:	f7fe fc8d 	bl	b4f4c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b6632:	f100 011a 	add.w	r1, r0, #26
   b6636:	4620      	mov	r0, r4
   b6638:	f006 fd14 	bl	bd064 <_ZN5Print5printEPKc>
        if(selected){
   b663c:	9a03      	ldr	r2, [sp, #12]
   b663e:	f1b8 0f00 	cmp.w	r8, #0
   b6642:	d03c      	beq.n	b66be <_Z13printMenuItemhbbtt8WaterBot+0xe2>
            oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,1);
   b6644:	237f      	movs	r3, #127	; 0x7f
   b6646:	e9cd a700 	strd	sl, r7, [sp]
   b664a:	2158      	movs	r1, #88	; 0x58
   b664c:	4620      	mov	r0, r4
   b664e:	f002 f904 	bl	b885a <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6652:	2359      	movs	r3, #89	; 0x59
   b6654:	8223      	strh	r3, [r4, #16]
   b6656:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6658:	f8c4 9014 	str.w	r9, [r4, #20]
            if(MenuItems.at(id).onOffSetting){
   b665c:	4847      	ldr	r0, [pc, #284]	; (b677c <_Z13printMenuItemhbbtt8WaterBot+0x1a0>)
   b665e:	4629      	mov	r1, r5
   b6660:	f7fe fc74 	bl	b4f4c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b6664:	7d42      	ldrb	r2, [r0, #21]
   b6666:	b1f2      	cbz	r2, b66a6 <_Z13printMenuItemhbbtt8WaterBot+0xca>
                if(wb.*(MenuItems.at(id).MethodPointerBool))  oled.printf("On");
   b6668:	6903      	ldr	r3, [r0, #16]
   b666a:	aa0c      	add	r2, sp, #48	; 0x30
   b666c:	4413      	add	r3, r2
   b666e:	791b      	ldrb	r3, [r3, #4]
   b6670:	b1bb      	cbz	r3, b66a2 <_Z13printMenuItemhbbtt8WaterBot+0xc6>
   b6672:	4943      	ldr	r1, [pc, #268]	; (b6780 <_Z13printMenuItemhbbtt8WaterBot+0x1a4>)
                else oled.printf("Off");
   b6674:	4840      	ldr	r0, [pc, #256]	; (b6778 <_Z13printMenuItemhbbtt8WaterBot+0x19c>)
                oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b6676:	f7fd fe34 	bl	b42e2 <_ZN5Print6printfEPKcz>
        Serial.printlnf("Printed Highlighted Menu item with name: %s",MenuItems.at(id).itemName);
   b667a:	f007 f8fb 	bl	bd874 <_Z16_fetch_usbserialv>
   b667e:	4629      	mov	r1, r5
   b6680:	4604      	mov	r4, r0
   b6682:	483e      	ldr	r0, [pc, #248]	; (b677c <_Z13printMenuItemhbbtt8WaterBot+0x1a0>)
   b6684:	f7fe fc62 	bl	b4f4c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b6688:	493e      	ldr	r1, [pc, #248]	; (b6784 <_Z13printMenuItemhbbtt8WaterBot+0x1a8>)
   b668a:	f100 021a 	add.w	r2, r0, #26
   b668e:	4620      	mov	r0, r4
   b6690:	f7fd fe60 	bl	b4354 <_ZN5Print8printlnfEPKcz>
    MenuItems.at(id);
   b6694:	4629      	mov	r1, r5
   b6696:	4839      	ldr	r0, [pc, #228]	; (b677c <_Z13printMenuItemhbbtt8WaterBot+0x1a0>)
   b6698:	f7fe fc58 	bl	b4f4c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
}
   b669c:	b004      	add	sp, #16
   b669e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                else oled.printf("Off");
   b66a2:	4939      	ldr	r1, [pc, #228]	; (b6788 <_Z13printMenuItemhbbtt8WaterBot+0x1ac>)
   b66a4:	e7e6      	b.n	b6674 <_Z13printMenuItemhbbtt8WaterBot+0x98>
                oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b66a6:	68c2      	ldr	r2, [r0, #12]
            else if(MenuItems.at(id).customLabel){
   b66a8:	7d83      	ldrb	r3, [r0, #22]
                oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b66aa:	a90c      	add	r1, sp, #48	; 0x30
   b66ac:	440a      	add	r2, r1
   b66ae:	7912      	ldrb	r2, [r2, #4]
            else if(MenuItems.at(id).customLabel){
   b66b0:	b19b      	cbz	r3, b66da <_Z13printMenuItemhbbtt8WaterBot+0xfe>
                oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b66b2:	4611      	mov	r1, r2
   b66b4:	f7fe fcba 	bl	b502c <_ZNSt6vectorI6StringSaIS0_EE2atEj>
   b66b8:	6801      	ldr	r1, [r0, #0]
   b66ba:	4620      	mov	r0, r4
   b66bc:	e7db      	b.n	b6676 <_Z13printMenuItemhbbtt8WaterBot+0x9a>
            oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,0);
   b66be:	237f      	movs	r3, #127	; 0x7f
   b66c0:	e9cd a800 	strd	sl, r8, [sp]
   b66c4:	2158      	movs	r1, #88	; 0x58
   b66c6:	4620      	mov	r0, r4
   b66c8:	f002 f8c7 	bl	b885a <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b66cc:	2359      	movs	r3, #89	; 0x59
   b66ce:	8223      	strh	r3, [r4, #16]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b66d0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b66d4:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b66d6:	6163      	str	r3, [r4, #20]
            if(MenuItems.at(id).onOffSetting){
   b66d8:	e7c0      	b.n	b665c <_Z13printMenuItemhbbtt8WaterBot+0x80>
            else oled.printf("%d",wb.*(MenuItems.at(id).MethodPointer));
   b66da:	492c      	ldr	r1, [pc, #176]	; (b678c <_Z13printMenuItemhbbtt8WaterBot+0x1b0>)
   b66dc:	4620      	mov	r0, r4
   b66de:	f7fd fe00 	bl	b42e2 <_ZN5Print6printfEPKcz>
   b66e2:	e7ca      	b.n	b667a <_Z13printMenuItemhbbtt8WaterBot+0x9e>
        oled.fillRect(x,y,OLED_MAX_X - 40,16,0);
   b66e4:	2358      	movs	r3, #88	; 0x58
   b66e6:	4620      	mov	r0, r4
   b66e8:	e9cd a700 	strd	sl, r7, [sp]
   b66ec:	9203      	str	r2, [sp, #12]
   b66ee:	f04f 1801 	mov.w	r8, #65537	; 0x10001
   b66f2:	f002 f8b2 	bl	b885a <_ZN12Adafruit_GFX8fillRectEsssst>
        oled.setTextSize(2);
   b66f6:	2102      	movs	r1, #2
   b66f8:	4620      	mov	r0, r4
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b66fa:	f8a4 9010 	strh.w	r9, [r4, #16]
   b66fe:	8266      	strh	r6, [r4, #18]
   b6700:	f002 fbc7 	bl	b8e92 <_ZN12Adafruit_GFX11setTextSizeEh>
        oled.print(MenuItems.at(id).itemName);
   b6704:	4629      	mov	r1, r5
   b6706:	481d      	ldr	r0, [pc, #116]	; (b677c <_Z13printMenuItemhbbtt8WaterBot+0x1a0>)
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6708:	f8c4 8014 	str.w	r8, [r4, #20]
   b670c:	f7fe fc1e 	bl	b4f4c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b6710:	f100 011a 	add.w	r1, r0, #26
   b6714:	4620      	mov	r0, r4
   b6716:	f006 fca5 	bl	bd064 <_ZN5Print5printEPKc>
        oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,0);
   b671a:	9a03      	ldr	r2, [sp, #12]
   b671c:	237f      	movs	r3, #127	; 0x7f
   b671e:	2158      	movs	r1, #88	; 0x58
   b6720:	4620      	mov	r0, r4
   b6722:	e9cd a700 	strd	sl, r7, [sp]
   b6726:	f002 f898 	bl	b885a <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b672a:	2359      	movs	r3, #89	; 0x59
        if(MenuItems.at(id).onOffSetting){
   b672c:	4813      	ldr	r0, [pc, #76]	; (b677c <_Z13printMenuItemhbbtt8WaterBot+0x1a0>)
   b672e:	8223      	strh	r3, [r4, #16]
   b6730:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6732:	f8c4 8014 	str.w	r8, [r4, #20]
   b6736:	4629      	mov	r1, r5
   b6738:	f7fe fc08 	bl	b4f4c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b673c:	7d42      	ldrb	r2, [r0, #21]
   b673e:	b15a      	cbz	r2, b6758 <_Z13printMenuItemhbbtt8WaterBot+0x17c>
            if(wb.*(MenuItems.at(id).MethodPointerBool))  oled.printf("On");
   b6740:	6903      	ldr	r3, [r0, #16]
   b6742:	aa0c      	add	r2, sp, #48	; 0x30
   b6744:	4413      	add	r3, r2
   b6746:	791b      	ldrb	r3, [r3, #4]
   b6748:	b123      	cbz	r3, b6754 <_Z13printMenuItemhbbtt8WaterBot+0x178>
   b674a:	490d      	ldr	r1, [pc, #52]	; (b6780 <_Z13printMenuItemhbbtt8WaterBot+0x1a4>)
            else oled.printf("Off");
   b674c:	4620      	mov	r0, r4
   b674e:	f7fd fdc8 	bl	b42e2 <_ZN5Print6printfEPKcz>
   b6752:	e79f      	b.n	b6694 <_Z13printMenuItemhbbtt8WaterBot+0xb8>
   b6754:	490c      	ldr	r1, [pc, #48]	; (b6788 <_Z13printMenuItemhbbtt8WaterBot+0x1ac>)
   b6756:	e7f9      	b.n	b674c <_Z13printMenuItemhbbtt8WaterBot+0x170>
            oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b6758:	68c2      	ldr	r2, [r0, #12]
        else if(MenuItems.at(id).customLabel){
   b675a:	7d83      	ldrb	r3, [r0, #22]
            oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b675c:	a90c      	add	r1, sp, #48	; 0x30
   b675e:	440a      	add	r2, r1
   b6760:	7912      	ldrb	r2, [r2, #4]
        else if(MenuItems.at(id).customLabel){
   b6762:	b123      	cbz	r3, b676e <_Z13printMenuItemhbbtt8WaterBot+0x192>
            oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b6764:	4611      	mov	r1, r2
   b6766:	f7fe fc61 	bl	b502c <_ZNSt6vectorI6StringSaIS0_EE2atEj>
   b676a:	6801      	ldr	r1, [r0, #0]
   b676c:	e7ee      	b.n	b674c <_Z13printMenuItemhbbtt8WaterBot+0x170>
        else oled.printf("%d",wb.*(MenuItems.at(id).MethodPointer));
   b676e:	4907      	ldr	r1, [pc, #28]	; (b678c <_Z13printMenuItemhbbtt8WaterBot+0x1b0>)
   b6770:	4620      	mov	r0, r4
   b6772:	f7fd fdb6 	bl	b42e2 <_ZN5Print6printfEPKcz>
   b6776:	e78d      	b.n	b6694 <_Z13printMenuItemhbbtt8WaterBot+0xb8>
   b6778:	2003de68 	.word	0x2003de68
   b677c:	2003dc94 	.word	0x2003dc94
   b6780:	000c11d1 	.word	0x000c11d1
   b6784:	000c11d8 	.word	0x000c11d8
   b6788:	000c11d4 	.word	0x000c11d4
   b678c:	000c0c8b 	.word	0x000c0c8b

000b6790 <setup>:
void setup() {
   b6790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pinMode(E_DPAD,INPUT_PULLDOWN);
   b6794:	2103      	movs	r1, #3
void setup() {
   b6796:	b0a0      	sub	sp, #128	; 0x80
    pinMode(E_DPAD,INPUT_PULLDOWN);
   b6798:	201c      	movs	r0, #28
   b679a:	f007 f96b 	bl	bda74 <pinMode>
    pinMode(U_DPAD,INPUT_PULLDOWN);
   b679e:	2103      	movs	r1, #3
   b67a0:	200e      	movs	r0, #14
   b67a2:	f007 f967 	bl	bda74 <pinMode>
    pinMode(D_DPAD,INPUT_PULLDOWN);
   b67a6:	2103      	movs	r1, #3
   b67a8:	2007      	movs	r0, #7
   b67aa:	f007 f963 	bl	bda74 <pinMode>
    pinMode(L_DPAD,INPUT_PULLDOWN);
   b67ae:	2103      	movs	r1, #3
   b67b0:	200f      	movs	r0, #15
   b67b2:	f007 f95f 	bl	bda74 <pinMode>
    pinMode(R_DPAD,INPUT_PULLDOWN);
   b67b6:	2103      	movs	r1, #3
   b67b8:	2012      	movs	r0, #18
    attachInterrupt(E_DPAD,entHandler,RISING);
   b67ba:	2400      	movs	r4, #0
    pinMode(R_DPAD,INPUT_PULLDOWN);
   b67bc:	f007 f95a 	bl	bda74 <pinMode>
    pinMode(JOY_BTN,INPUT_PULLDOWN);
   b67c0:	2103      	movs	r1, #3
   b67c2:	201d      	movs	r0, #29
   b67c4:	f007 f956 	bl	bda74 <pinMode>
    attachInterrupt(E_DPAD,entHandler,RISING);
   b67c8:	4985      	ldr	r1, [pc, #532]	; (b69e0 <setup+0x250>)
   b67ca:	9400      	str	r4, [sp, #0]
   b67cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b67d0:	2201      	movs	r2, #1
   b67d2:	201c      	movs	r0, #28
   b67d4:	f006 fad4 	bl	bcd80 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(U_DPAD,uHandler,RISING);
   b67d8:	4982      	ldr	r1, [pc, #520]	; (b69e4 <setup+0x254>)
   b67da:	9400      	str	r4, [sp, #0]
   b67dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b67e0:	2201      	movs	r2, #1
   b67e2:	200e      	movs	r0, #14
   b67e4:	f006 facc 	bl	bcd80 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(D_DPAD,dHandler,RISING);
   b67e8:	497f      	ldr	r1, [pc, #508]	; (b69e8 <setup+0x258>)
   b67ea:	9400      	str	r4, [sp, #0]
   b67ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b67f0:	2201      	movs	r2, #1
   b67f2:	2007      	movs	r0, #7
   b67f4:	f006 fac4 	bl	bcd80 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(L_DPAD,lHandler,RISING);
   b67f8:	497c      	ldr	r1, [pc, #496]	; (b69ec <setup+0x25c>)
   b67fa:	9400      	str	r4, [sp, #0]
   b67fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6800:	2201      	movs	r2, #1
   b6802:	200f      	movs	r0, #15
   b6804:	f006 fabc 	bl	bcd80 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(R_DPAD,rHandler,RISING);
   b6808:	4979      	ldr	r1, [pc, #484]	; (b69f0 <setup+0x260>)
   b680a:	9400      	str	r4, [sp, #0]
   b680c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6810:	2201      	movs	r2, #1
   b6812:	2012      	movs	r0, #18
   b6814:	f006 fab4 	bl	bcd80 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(JOY_BTN,jHandler,RISING);
   b6818:	4976      	ldr	r1, [pc, #472]	; (b69f4 <setup+0x264>)
   b681a:	9400      	str	r4, [sp, #0]
   b681c:	2201      	movs	r2, #1
   b681e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6822:	201d      	movs	r0, #29
   b6824:	f006 faac 	bl	bcd80 <_Z15attachInterrupttPFvvE13InterruptModeah>
   b6828:	f003 f902 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b682c:	4b72      	ldr	r3, [pc, #456]	; (b69f8 <setup+0x268>)
    logMessages = true;
   b682e:	f8df 823c 	ldr.w	r8, [pc, #572]	; b6a6c <setup+0x2dc>
    debounceTime = millis();
   b6832:	6018      	str	r0, [r3, #0]
   b6834:	f003 f8fc 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
    controlUpdateTime = millis();
   b6838:	4b70      	ldr	r3, [pc, #448]	; (b69fc <setup+0x26c>)
   b683a:	6018      	str	r0, [r3, #0]
    controlUpdateID = -1;
   b683c:	4b70      	ldr	r3, [pc, #448]	; (b6a00 <setup+0x270>)
   b683e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6842:	601a      	str	r2, [r3, #0]
    Serial.begin(115200);
   b6844:	f007 f816 	bl	bd874 <_Z16_fetch_usbserialv>
   b6848:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b684c:	f007 f806 	bl	bd85c <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b6850:	f007 f9a8 	bl	bdba4 <_Z22__fetch_global_Serial1v>
   b6854:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6858:	f006 ffaa 	bl	bd7b0 <_ZN11USARTSerial5beginEm>
    setupXBee();
   b685c:	f7fe f95e 	bl	b4b1c <_Z9setupXBeev>
	BLE.on();
   b6860:	f004 f8dc 	bl	baa1c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6864:	f004 f924 	bl	baab0 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setScanTimeout(50);  //100ms scan
   b6868:	f004 f8d8 	bl	baa1c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b686c:	2132      	movs	r1, #50	; 0x32
   b686e:	f004 f969 	bl	bab44 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>
    BLE.setTxPower(8);
   b6872:	f004 f8d3 	bl	baa1c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6876:	2108      	movs	r1, #8
   b6878:	f004 f921 	bl	baabe <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   b687c:	4a61      	ldr	r2, [pc, #388]	; (b6a04 <setup+0x274>)
   b687e:	4962      	ldr	r1, [pc, #392]	; (b6a08 <setup+0x278>)
   b6880:	4610      	mov	r0, r2
   b6882:	f005 f981 	bl	bbb88 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    peerOffloadCharacteristic.onDataReceived(offloadDataReceived, &peerOffloadCharacteristic);
   b6886:	4a61      	ldr	r2, [pc, #388]	; (b6a0c <setup+0x27c>)
   b6888:	4961      	ldr	r1, [pc, #388]	; (b6a10 <setup+0x280>)
   b688a:	4610      	mov	r0, r2
   b688c:	f005 f97c 	bl	bbb88 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b6890:	4622      	mov	r2, r4
   b6892:	4960      	ldr	r1, [pc, #384]	; (b6a14 <setup+0x284>)
   b6894:	4860      	ldr	r0, [pc, #384]	; (b6a18 <setup+0x288>)
   b6896:	e9cd 4400 	strd	r4, r4, [sp]
   b689a:	2301      	movs	r3, #1
   b689c:	f003 fac4 	bl	b9e28 <spark_subscribe>
    offloadingMode = false;
   b68a0:	4b5e      	ldr	r3, [pc, #376]	; (b6a1c <setup+0x28c>)
   b68a2:	701c      	strb	r4, [r3, #0]
    offloadingDone = false;
   b68a4:	4b5e      	ldr	r3, [pc, #376]	; (b6a20 <setup+0x290>)
   b68a6:	701c      	strb	r4, [r3, #0]
    postStatus = false;
   b68a8:	4b5e      	ldr	r3, [pc, #376]	; (b6a24 <setup+0x294>)
   b68aa:	701c      	strb	r4, [r3, #0]
    statusTimeout = false;
   b68ac:	4b5e      	ldr	r3, [pc, #376]	; (b6a28 <setup+0x298>)
    logMessages = true;
   b68ae:	2501      	movs	r5, #1
    statusTimeout = false;
   b68b0:	701c      	strb	r4, [r3, #0]
    logMessages = true;
   b68b2:	f888 5000 	strb.w	r5, [r8]
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b68b6:	f006 ff07 	bl	bd6c8 <_ZN9TimeClass5monthEv>
   b68ba:	9007      	str	r0, [sp, #28]
   b68bc:	f006 fef8 	bl	bd6b0 <_ZN9TimeClass3dayEv>
   b68c0:	4606      	mov	r6, r0
   b68c2:	f006 ff09 	bl	bd6d8 <_ZN9TimeClass4yearEv>
   b68c6:	4607      	mov	r7, r0
   b68c8:	f006 fece 	bl	bd668 <_ZN9TimeClass4hourEv>
   b68cc:	4681      	mov	r9, r0
   b68ce:	f006 fed7 	bl	bd680 <_ZN9TimeClass6minuteEv>
   b68d2:	4682      	mov	sl, r0
   b68d4:	f006 fee0 	bl	bd698 <_ZN9TimeClass6secondEv>
   b68d8:	9b07      	ldr	r3, [sp, #28]
   b68da:	4a54      	ldr	r2, [pc, #336]	; (b6a2c <setup+0x29c>)
   b68dc:	9600      	str	r6, [sp, #0]
   b68de:	e9cd a003 	strd	sl, r0, [sp, #12]
   b68e2:	2110      	movs	r1, #16
   b68e4:	e9cd 7901 	strd	r7, r9, [sp, #4]
   b68e8:	a809      	add	r0, sp, #36	; 0x24
   b68ea:	f003 fb3d 	bl	b9f68 <snprintf>
    strcpy(filenameMessages,DEF_FILENAME);
   b68ee:	4950      	ldr	r1, [pc, #320]	; (b6a30 <setup+0x2a0>)
   b68f0:	4850      	ldr	r0, [pc, #320]	; (b6a34 <setup+0x2a4>)
   b68f2:	f008 f900 	bl	beaf6 <strcpy>
    strcat(filenameMessages,timestamp);
   b68f6:	a909      	add	r1, sp, #36	; 0x24
   b68f8:	484e      	ldr	r0, [pc, #312]	; (b6a34 <setup+0x2a4>)
   b68fa:	f008 f8e3 	bl	beac4 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b68fe:	494e      	ldr	r1, [pc, #312]	; (b6a38 <setup+0x2a8>)
   b6900:	484c      	ldr	r0, [pc, #304]	; (b6a34 <setup+0x2a4>)
   b6902:	f008 f8df 	bl	beac4 <strcat>
    createMenu();
   b6906:	f7ff fcaf 	bl	b6268 <_Z10createMenuv>
    delay(250);
   b690a:	20fa      	movs	r0, #250	; 0xfa
   b690c:	f003 fb6c 	bl	b9fe8 <delay>
    oled.begin(i2c_Address, true); // Address 0x3C default
   b6910:	462a      	mov	r2, r5
   b6912:	213c      	movs	r1, #60	; 0x3c
   b6914:	4849      	ldr	r0, [pc, #292]	; (b6a3c <setup+0x2ac>)
   b6916:	f002 fe2f 	bl	b9578 <_ZN15Adafruit_SH11075beginEhb>
    oled.clearDisplay();
   b691a:	4848      	ldr	r0, [pc, #288]	; (b6a3c <setup+0x2ac>)
   b691c:	f002 fd72 	bl	b9404 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
    oled.display();
   b6920:	4846      	ldr	r0, [pc, #280]	; (b6a3c <setup+0x2ac>)
   b6922:	f002 fe9b 	bl	b965c <_ZN15Adafruit_SH110X7displayEv>
    oled.setRotation(1);
   b6926:	4845      	ldr	r0, [pc, #276]	; (b6a3c <setup+0x2ac>)
   b6928:	4629      	mov	r1, r5
   b692a:	f002 f84a 	bl	b89c2 <_ZN12Adafruit_GFX11setRotationEh>
      dataMode_{dataMode}
   b692e:	4b44      	ldr	r3, [pc, #272]	; (b6a40 <setup+0x2b0>)
   b6930:	930d      	str	r3, [sp, #52]	; 0x34
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {
   b6932:	4844      	ldr	r0, [pc, #272]	; (b6a44 <setup+0x2b4>)
   b6934:	4b44      	ldr	r3, [pc, #272]	; (b6a48 <setup+0x2b8>)
   b6936:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
   b693a:	aa0d      	add	r2, sp, #52	; 0x34
   b693c:	2108      	movs	r1, #8
   b693e:	930f      	str	r3, [sp, #60]	; 0x3c
   b6940:	f8ad 5040 	strh.w	r5, [sp, #64]	; 0x40
   b6944:	f7fd ff4c 	bl	b47e0 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b6948:	4604      	mov	r4, r0
   b694a:	b930      	cbnz	r0, b695a <setup+0x1ca>
        Serial.println("Error: could not connect to SD card!");
   b694c:	f006 ff92 	bl	bd874 <_Z16_fetch_usbserialv>
   b6950:	493e      	ldr	r1, [pc, #248]	; (b6a4c <setup+0x2bc>)
   b6952:	f006 fb9a 	bl	bd08a <_ZN5Print7printlnEPKc>
        logMessages = false;
   b6956:	f888 4000 	strb.w	r4, [r8]
    oled.setTextSize(2);
   b695a:	4c38      	ldr	r4, [pc, #224]	; (b6a3c <setup+0x2ac>)
   b695c:	2102      	movs	r1, #2
   b695e:	4620      	mov	r0, r4
   b6960:	f002 fa97 	bl	b8e92 <_ZN12Adafruit_GFX11setTextSizeEh>
   b6964:	2500      	movs	r5, #0
   b6966:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b696a:	e9c4 5304 	strd	r5, r3, [r4, #16]
    oled.print(" Starting ");
   b696e:	4938      	ldr	r1, [pc, #224]	; (b6a50 <setup+0x2c0>)
   b6970:	4620      	mov	r0, r4
   b6972:	f006 fb77 	bl	bd064 <_ZN5Print5printEPKc>
    oled.display();
   b6976:	4620      	mov	r0, r4
   b6978:	f002 fe70 	bl	b965c <_ZN15Adafruit_SH110X7displayEv>
    sprintf(m.primaryLine,"Hello!\0");
   b697c:	4935      	ldr	r1, [pc, #212]	; (b6a54 <setup+0x2c4>)
class MenuPopUp{
   b697e:	f88d 507a 	strb.w	r5, [sp, #122]	; 0x7a
    sprintf(m.primaryLine,"Hello!\0");
   b6982:	a80d      	add	r0, sp, #52	; 0x34
class MenuPopUp{
   b6984:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
   b6988:	f88d 507c 	strb.w	r5, [sp, #124]	; 0x7c
    sprintf(m.primaryLine,"Hello!\0");
   b698c:	f008 f8b3 	bl	beaf6 <strcpy>
    sprintf(m.secondaryLine,"Scanning for Bots\0", 1);
   b6990:	4931      	ldr	r1, [pc, #196]	; (b6a58 <setup+0x2c8>)
   b6992:	2201      	movs	r2, #1
   b6994:	f10d 003e 	add.w	r0, sp, #62	; 0x3e
   b6998:	f003 fad6 	bl	b9f48 <sprintf>
    sprintf(m.tertiaryLine, "OK when bots ready\0",15);
   b699c:	220f      	movs	r2, #15
   b699e:	492f      	ldr	r1, [pc, #188]	; (b6a5c <setup+0x2cc>)
   b69a0:	a817      	add	r0, sp, #92	; 0x5c
   b69a2:	f003 fad1 	bl	b9f48 <sprintf>
    m.primaryStart = 32;
   b69a6:	2320      	movs	r3, #32
   b69a8:	f88d 307a 	strb.w	r3, [sp, #122]	; 0x7a
    m.secondaryStart = 12;
   b69ac:	230c      	movs	r3, #12
   b69ae:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
    PopUps.push_back(m);
   b69b2:	a90d      	add	r1, sp, #52	; 0x34
    m.tertiaryStart = 10;
   b69b4:	230a      	movs	r3, #10
    PopUps.push_back(m);
   b69b6:	482a      	ldr	r0, [pc, #168]	; (b6a60 <setup+0x2d0>)
    m.tertiaryStart = 10;
   b69b8:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    PopUps.push_back(m);
   b69bc:	f7fe fcb4 	bl	b5328 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>
    at1.start();
   b69c0:	4828      	ldr	r0, [pc, #160]	; (b6a64 <setup+0x2d4>)
   b69c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b69c6:	f7fd fc75 	bl	b42b4 <_ZN5Timer5startEj.isra.0>
    at2.start();
   b69ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b69ce:	4826      	ldr	r0, [pc, #152]	; (b6a68 <setup+0x2d8>)
   b69d0:	f7fd fc70 	bl	b42b4 <_ZN5Timer5startEj.isra.0>
    WaterBotSim(1);
   b69d4:	2001      	movs	r0, #1
   b69d6:	f7ff f8e5 	bl	b5ba4 <_Z11WaterBotSimh>
}
   b69da:	b020      	add	sp, #128	; 0x80
   b69dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b69e0:	000b422d 	.word	0x000b422d
   b69e4:	000b4f75 	.word	0x000b4f75
   b69e8:	000b4fd1 	.word	0x000b4fd1
   b69ec:	000b4371 	.word	0x000b4371
   b69f0:	000b4479 	.word	0x000b4479
   b69f4:	000b41bd 	.word	0x000b41bd
   b69f8:	2003dd6c 	.word	0x2003dd6c
   b69fc:	2003dd68 	.word	0x2003dd68
   b6a00:	2003dd64 	.word	0x2003dd64
   b6a04:	2003ded8 	.word	0x2003ded8
   b6a08:	000b5a19 	.word	0x000b5a19
   b6a0c:	2003dec8 	.word	0x2003dec8
   b6a10:	000b468d 	.word	0x000b468d
   b6a14:	000b59c9 	.word	0x000b59c9
   b6a18:	000c0d5c 	.word	0x000c0d5c
   b6a1c:	2003de67 	.word	0x2003de67
   b6a20:	2003de66 	.word	0x2003de66
   b6a24:	2003dee0 	.word	0x2003dee0
   b6a28:	2003e639 	.word	0x2003e639
   b6a2c:	000c1204 	.word	0x000c1204
   b6a30:	000c121d 	.word	0x000c121d
   b6a34:	2003dd84 	.word	0x2003dd84
   b6a38:	000c1226 	.word	0x000c1226
   b6a3c:	2003de68 	.word	0x2003de68
   b6a40:	000c12a8 	.word	0x000c12a8
   b6a44:	2003e1b4 	.word	0x2003e1b4
   b6a48:	007a1200 	.word	0x007a1200
   b6a4c:	000c122f 	.word	0x000c122f
   b6a50:	000c1254 	.word	0x000c1254
   b6a54:	000c1312 	.word	0x000c1312
   b6a58:	000c131a 	.word	0x000c131a
   b6a5c:	000c132d 	.word	0x000c132d
   b6a60:	2003dcac 	.word	0x2003dcac
   b6a64:	2003dd28 	.word	0x2003dd28
   b6a68:	2003dd44 	.word	0x2003dd44
   b6a6c:	2003de10 	.word	0x2003de10

000b6a70 <_Z10updateMenuv>:
void updateMenu(){
   b6a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(redrawMenu){
   b6a74:	f8df b2a0 	ldr.w	fp, [pc, #672]	; b6d18 <_Z10updateMenuv+0x2a8>
   b6a78:	f89b 3000 	ldrb.w	r3, [fp]
void updateMenu(){
   b6a7c:	b091      	sub	sp, #68	; 0x44
    if(redrawMenu){
   b6a7e:	2b00      	cmp	r3, #0
   b6a80:	d06d      	beq.n	b6b5e <_Z10updateMenuv+0xee>
        oled.fillRect(0,0,OLED_MAX_X,OLED_MAX_Y,0);
   b6a82:	4c98      	ldr	r4, [pc, #608]	; (b6ce4 <_Z10updateMenuv+0x274>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6a84:	4e98      	ldr	r6, [pc, #608]	; (b6ce8 <_Z10updateMenuv+0x278>)
   b6a86:	2500      	movs	r5, #0
   b6a88:	2340      	movs	r3, #64	; 0x40
   b6a8a:	e9cd 3500 	strd	r3, r5, [sp]
   b6a8e:	462a      	mov	r2, r5
   b6a90:	2380      	movs	r3, #128	; 0x80
   b6a92:	4629      	mov	r1, r5
   b6a94:	4620      	mov	r0, r4
   b6a96:	f001 fee0 	bl	b885a <_ZN12Adafruit_GFX8fillRectEsssst>
        if(PopUps.size() != 0){  //If there is a queue of pop-ups to be displayed
   b6a9a:	e9d6 3200 	ldrd	r3, r2, [r6]
   b6a9e:	429a      	cmp	r2, r3
   b6aa0:	d060      	beq.n	b6b64 <_Z10updateMenuv+0xf4>
            oled.drawRect(1,1,126,62,1);
   b6aa2:	2701      	movs	r7, #1
   b6aa4:	233e      	movs	r3, #62	; 0x3e
   b6aa6:	e9cd 3700 	strd	r3, r7, [sp]
   b6aaa:	463a      	mov	r2, r7
   b6aac:	237e      	movs	r3, #126	; 0x7e
   b6aae:	4639      	mov	r1, r7
   b6ab0:	4620      	mov	r0, r4
   b6ab2:	f001 ff45 	bl	b8940 <_ZN12Adafruit_GFX8drawRectEsssst>
            oled.drawRect(2,2,124,60,1);
   b6ab6:	2202      	movs	r2, #2
   b6ab8:	233c      	movs	r3, #60	; 0x3c
   b6aba:	4611      	mov	r1, r2
   b6abc:	9300      	str	r3, [sp, #0]
   b6abe:	4620      	mov	r0, r4
   b6ac0:	237c      	movs	r3, #124	; 0x7c
   b6ac2:	9701      	str	r7, [sp, #4]
   b6ac4:	f001 ff3c 	bl	b8940 <_ZN12Adafruit_GFX8drawRectEsssst>
   b6ac8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b6acc:	6163      	str	r3, [r4, #20]
            oled.setCursor(PopUps.back().primaryStart,4);
   b6ace:	6873      	ldr	r3, [r6, #4]
   b6ad0:	f813 3c03 	ldrb.w	r3, [r3, #-3]
   b6ad4:	8223      	strh	r3, [r4, #16]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6ad6:	2304      	movs	r3, #4
   b6ad8:	8263      	strh	r3, [r4, #18]
            oled.setTextSize(2);
   b6ada:	2102      	movs	r1, #2
   b6adc:	4620      	mov	r0, r4
   b6ade:	f002 f9d8 	bl	b8e92 <_ZN12Adafruit_GFX11setTextSizeEh>
            oled.printf(PopUps.back().primaryLine);
   b6ae2:	6871      	ldr	r1, [r6, #4]
   b6ae4:	4620      	mov	r0, r4
   b6ae6:	3949      	subs	r1, #73	; 0x49
   b6ae8:	f7fd fbfb 	bl	b42e2 <_ZN5Print6printfEPKcz>
            oled.setCursor(PopUps.back().secondaryStart,22);
   b6aec:	6873      	ldr	r3, [r6, #4]
   b6aee:	f813 3c02 	ldrb.w	r3, [r3, #-2]
   b6af2:	8223      	strh	r3, [r4, #16]
   b6af4:	2316      	movs	r3, #22
   b6af6:	8263      	strh	r3, [r4, #18]
            oled.setTextSize(1);
   b6af8:	4639      	mov	r1, r7
   b6afa:	4620      	mov	r0, r4
   b6afc:	f002 f9c9 	bl	b8e92 <_ZN12Adafruit_GFX11setTextSizeEh>
            oled.printf(PopUps.back().secondaryLine);
   b6b00:	6871      	ldr	r1, [r6, #4]
   b6b02:	4620      	mov	r0, r4
   b6b04:	393f      	subs	r1, #63	; 0x3f
   b6b06:	f7fd fbec 	bl	b42e2 <_ZN5Print6printfEPKcz>
            oled.setCursor(PopUps.back().tertiaryStart,32);
   b6b0a:	6873      	ldr	r3, [r6, #4]
   b6b0c:	f04f 0820 	mov.w	r8, #32
   b6b10:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b6b14:	8223      	strh	r3, [r4, #16]
            oled.setTextSize(1);
   b6b16:	4639      	mov	r1, r7
   b6b18:	4620      	mov	r0, r4
   b6b1a:	f8a4 8012 	strh.w	r8, [r4, #18]
   b6b1e:	f002 f9b8 	bl	b8e92 <_ZN12Adafruit_GFX11setTextSizeEh>
            oled.printf(PopUps.back().tertiaryLine);
   b6b22:	6871      	ldr	r1, [r6, #4]
   b6b24:	4620      	mov	r0, r4
   b6b26:	3921      	subs	r1, #33	; 0x21
   b6b28:	f7fd fbdb 	bl	b42e2 <_ZN5Print6printfEPKcz>
   b6b2c:	4b6f      	ldr	r3, [pc, #444]	; (b6cec <_Z10updateMenuv+0x27c>)
   b6b2e:	6123      	str	r3, [r4, #16]
            oled.setTextSize(2);
   b6b30:	2102      	movs	r1, #2
   b6b32:	4620      	mov	r0, r4
   b6b34:	f002 f9ad 	bl	b8e92 <_ZN12Adafruit_GFX11setTextSizeEh>
            oled.fillRect(45,44,32,16,1);
   b6b38:	2310      	movs	r3, #16
   b6b3a:	222c      	movs	r2, #44	; 0x2c
   b6b3c:	9300      	str	r3, [sp, #0]
   b6b3e:	212d      	movs	r1, #45	; 0x2d
   b6b40:	4643      	mov	r3, r8
   b6b42:	4620      	mov	r0, r4
   b6b44:	9701      	str	r7, [sp, #4]
   b6b46:	f001 fe88 	bl	b885a <_ZN12Adafruit_GFX8fillRectEsssst>
            oled.printf("OK");
   b6b4a:	4969      	ldr	r1, [pc, #420]	; (b6cf0 <_Z10updateMenuv+0x280>)
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6b4c:	6165      	str	r5, [r4, #20]
   b6b4e:	4620      	mov	r0, r4
   b6b50:	f7fd fbc7 	bl	b42e2 <_ZN5Print6printfEPKcz>
            oled.display();
   b6b54:	4620      	mov	r0, r4
   b6b56:	f002 fd81 	bl	b965c <_ZN15Adafruit_SH110X7displayEv>
            redrawMenu = false;
   b6b5a:	f88b 5000 	strb.w	r5, [fp]
}
   b6b5e:	b011      	add	sp, #68	; 0x44
   b6b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6b64:	f8df 91a0 	ldr.w	r9, [pc, #416]	; b6d08 <_Z10updateMenuv+0x298>
   b6b68:	f8df a1b0 	ldr.w	sl, [pc, #432]	; b6d1c <_Z10updateMenuv+0x2ac>
        uint8_t menuSelect = 0;
   b6b6c:	462e      	mov	r6, r5
   b6b6e:	e9d9 2300 	ldrd	r2, r3, [r9]
   b6b72:	1a9b      	subs	r3, r3, r2
   b6b74:	109b      	asrs	r3, r3, #2
   b6b76:	b2ef      	uxtb	r7, r5
   b6b78:	fb0a f303 	mul.w	r3, sl, r3
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b6b7c:	429f      	cmp	r7, r3
   b6b7e:	d247      	bcs.n	b6c10 <_Z10updateMenuv+0x1a0>
            if(WaterBots.at(i).botNum == botSelect){
   b6b80:	4639      	mov	r1, r7
   b6b82:	4648      	mov	r0, r9
   b6b84:	f7fe fa64 	bl	b5050 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6b88:	4b5a      	ldr	r3, [pc, #360]	; (b6cf4 <_Z10updateMenuv+0x284>)
   b6b8a:	7881      	ldrb	r1, [r0, #2]
   b6b8c:	781b      	ldrb	r3, [r3, #0]
                oled.setTextSize(1);
   b6b8e:	4855      	ldr	r0, [pc, #340]	; (b6ce4 <_Z10updateMenuv+0x274>)
                oled.setCursor(5+18*i,4);
   b6b90:	eb07 08c7 	add.w	r8, r7, r7, lsl #3
   b6b94:	ea4f 0848 	mov.w	r8, r8, lsl #1
   b6b98:	f108 0205 	add.w	r2, r8, #5
            if(WaterBots.at(i).botNum == botSelect){
   b6b9c:	4299      	cmp	r1, r3
   b6b9e:	f04f 0304 	mov.w	r3, #4
                oled.fillRect(1+i*18,1,14,14,1);
   b6ba2:	f108 0801 	add.w	r8, r8, #1
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6ba6:	8222      	strh	r2, [r4, #16]
   b6ba8:	8263      	strh	r3, [r4, #18]
                oled.setTextSize(1);
   b6baa:	f04f 0101 	mov.w	r1, #1
            if(WaterBots.at(i).botNum == botSelect){
   b6bae:	d117      	bne.n	b6be0 <_Z10updateMenuv+0x170>
                oled.setTextSize(1);
   b6bb0:	f002 f96f 	bl	b8e92 <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6bb4:	2300      	movs	r3, #0
                oled.fillRect(1+i*18,1,14,14,1);
   b6bb6:	2201      	movs	r2, #1
   b6bb8:	6163      	str	r3, [r4, #20]
   b6bba:	230e      	movs	r3, #14
   b6bbc:	e9cd 3200 	strd	r3, r2, [sp]
   b6bc0:	4848      	ldr	r0, [pc, #288]	; (b6ce4 <_Z10updateMenuv+0x274>)
   b6bc2:	4641      	mov	r1, r8
   b6bc4:	f001 fe49 	bl	b885a <_ZN12Adafruit_GFX8fillRectEsssst>
                oled.printf("%d",WaterBots.at(i).botNum);
   b6bc8:	4639      	mov	r1, r7
   b6bca:	4648      	mov	r0, r9
   b6bcc:	f7fe fa40 	bl	b5050 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6bd0:	4949      	ldr	r1, [pc, #292]	; (b6cf8 <_Z10updateMenuv+0x288>)
   b6bd2:	7882      	ldrb	r2, [r0, #2]
   b6bd4:	4843      	ldr	r0, [pc, #268]	; (b6ce4 <_Z10updateMenuv+0x274>)
   b6bd6:	f7fd fb84 	bl	b42e2 <_ZN5Print6printfEPKcz>
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b6bda:	3501      	adds	r5, #1
   b6bdc:	463e      	mov	r6, r7
   b6bde:	e7c6      	b.n	b6b6e <_Z10updateMenuv+0xfe>
                oled.setTextSize(1);
   b6be0:	f002 f957 	bl	b8e92 <_ZN12Adafruit_GFX11setTextSizeEh>
   b6be4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
                oled.drawRect(1+i*18,1,14,14,1);
   b6be8:	2201      	movs	r2, #1
   b6bea:	6163      	str	r3, [r4, #20]
   b6bec:	230e      	movs	r3, #14
   b6bee:	e9cd 3200 	strd	r3, r2, [sp]
   b6bf2:	483c      	ldr	r0, [pc, #240]	; (b6ce4 <_Z10updateMenuv+0x274>)
   b6bf4:	4641      	mov	r1, r8
   b6bf6:	f001 fea3 	bl	b8940 <_ZN12Adafruit_GFX8drawRectEsssst>
                oled.printf("%d",WaterBots.at(i).botNum);
   b6bfa:	4639      	mov	r1, r7
   b6bfc:	4648      	mov	r0, r9
   b6bfe:	f7fe fa27 	bl	b5050 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6c02:	493d      	ldr	r1, [pc, #244]	; (b6cf8 <_Z10updateMenuv+0x288>)
   b6c04:	7882      	ldrb	r2, [r0, #2]
   b6c06:	4837      	ldr	r0, [pc, #220]	; (b6ce4 <_Z10updateMenuv+0x274>)
   b6c08:	f7fd fb6b 	bl	b42e2 <_ZN5Print6printfEPKcz>
   b6c0c:	4637      	mov	r7, r6
   b6c0e:	e7e4      	b.n	b6bda <_Z10updateMenuv+0x16a>
        if(menuItem == 0){
   b6c10:	4f3a      	ldr	r7, [pc, #232]	; (b6cfc <_Z10updateMenuv+0x28c>)
   b6c12:	f897 8000 	ldrb.w	r8, [r7]
   b6c16:	f1b8 0f00 	cmp.w	r8, #0
   b6c1a:	f040 8081 	bne.w	b6d20 <_Z10updateMenuv+0x2b0>
   b6c1e:	4f38      	ldr	r7, [pc, #224]	; (b6d00 <_Z10updateMenuv+0x290>)
            Serial.println("Menu item 0");
   b6c20:	f006 fe28 	bl	bd874 <_Z16_fetch_usbserialv>
   b6c24:	4937      	ldr	r1, [pc, #220]	; (b6d04 <_Z10updateMenuv+0x294>)
   b6c26:	f006 fa30 	bl	bd08a <_ZN5Print7printlnEPKc>
            if(MenuItems.size() != 0) printMenuItem(0,true,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6c2a:	e9d7 3200 	ldrd	r3, r2, [r7]
   b6c2e:	429a      	cmp	r2, r3
   b6c30:	d01b      	beq.n	b6c6a <_Z10updateMenuv+0x1fa>
   b6c32:	4631      	mov	r1, r6
   b6c34:	4834      	ldr	r0, [pc, #208]	; (b6d08 <_Z10updateMenuv+0x298>)
   b6c36:	f7fe fa0b 	bl	b5050 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6c3a:	4b34      	ldr	r3, [pc, #208]	; (b6d0c <_Z10updateMenuv+0x29c>)
   b6c3c:	4604      	mov	r4, r0
   b6c3e:	f893 c000 	ldrb.w	ip, [r3]
   b6c42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6c44:	ad01      	add	r5, sp, #4
   b6c46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6c4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6c4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6c50:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   b6c54:	2310      	movs	r3, #16
   b6c56:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   b6c5a:	9300      	str	r3, [sp, #0]
   b6c5c:	f08c 0201 	eor.w	r2, ip, #1
   b6c60:	4643      	mov	r3, r8
   b6c62:	2101      	movs	r1, #1
   b6c64:	4640      	mov	r0, r8
   b6c66:	f7ff fcb9 	bl	b65dc <_Z13printMenuItemhbbtt8WaterBot>
   b6c6a:	e9d7 3500 	ldrd	r3, r5, [r7]
   b6c6e:	1aed      	subs	r5, r5, r3
   b6c70:	4b27      	ldr	r3, [pc, #156]	; (b6d10 <_Z10updateMenuv+0x2a0>)
                Serial.printlnf("Menu item %d", mi);
   b6c72:	f8df a0a0 	ldr.w	sl, [pc, #160]	; b6d14 <_Z10updateMenuv+0x2a4>
                printMenuItem(mi,false,!selectingBots,0,16+(16*mi),WaterBots.at(menuSelect));
   b6c76:	f8df 9090 	ldr.w	r9, [pc, #144]	; b6d08 <_Z10updateMenuv+0x298>
   b6c7a:	10ad      	asrs	r5, r5, #2
   b6c7c:	435d      	muls	r5, r3
            uint8_t loopIter = MenuItems.size();
   b6c7e:	b2ed      	uxtb	r5, r5
            if(loopIter > 2) loopIter = 2;
   b6c80:	2d02      	cmp	r5, #2
   b6c82:	bf28      	it	cs
   b6c84:	2502      	movcs	r5, #2
            for(int mi = 1; mi <= loopIter; mi++){
   b6c86:	2701      	movs	r7, #1
   b6c88:	42bd      	cmp	r5, r7
   b6c8a:	f2c0 80c0 	blt.w	b6e0e <_Z10updateMenuv+0x39e>
                Serial.printlnf("Menu item %d", mi);
   b6c8e:	f006 fdf1 	bl	bd874 <_Z16_fetch_usbserialv>
   b6c92:	463a      	mov	r2, r7
   b6c94:	4651      	mov	r1, sl
   b6c96:	f7fd fb5d 	bl	b4354 <_ZN5Print8printlnfEPKcz>
                printMenuItem(mi,false,!selectingBots,0,16+(16*mi),WaterBots.at(menuSelect));
   b6c9a:	4631      	mov	r1, r6
   b6c9c:	4648      	mov	r0, r9
   b6c9e:	f7fe f9d7 	bl	b5050 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6ca2:	4b1a      	ldr	r3, [pc, #104]	; (b6d0c <_Z10updateMenuv+0x29c>)
   b6ca4:	4604      	mov	r4, r0
   b6ca6:	f893 e000 	ldrb.w	lr, [r3]
   b6caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6cac:	f10d 0c04 	add.w	ip, sp, #4
   b6cb0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6cb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6cb6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6cbc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6cc0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   b6cc4:	fa5f f887 	uxtb.w	r8, r7
   b6cc8:	3701      	adds	r7, #1
   b6cca:	013b      	lsls	r3, r7, #4
   b6ccc:	b29b      	uxth	r3, r3
   b6cce:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
   b6cd2:	9300      	str	r3, [sp, #0]
   b6cd4:	2300      	movs	r3, #0
   b6cd6:	f08e 0201 	eor.w	r2, lr, #1
   b6cda:	4619      	mov	r1, r3
   b6cdc:	4640      	mov	r0, r8
   b6cde:	f7ff fc7d 	bl	b65dc <_Z13printMenuItemhbbtt8WaterBot>
            for(int mi = 1; mi <= loopIter; mi++){
   b6ce2:	e7d1      	b.n	b6c88 <_Z10updateMenuv+0x218>
   b6ce4:	2003de68 	.word	0x2003de68
   b6ce8:	2003dcac 	.word	0x2003dcac
   b6cec:	002d0030 	.word	0x002d0030
   b6cf0:	000c125f 	.word	0x000c125f
   b6cf4:	2003dd61 	.word	0x2003dd61
   b6cf8:	000c0c8b 	.word	0x000c0c8b
   b6cfc:	2003de11 	.word	0x2003de11
   b6d00:	2003dc94 	.word	0x2003dc94
   b6d04:	000c1262 	.word	0x000c1262
   b6d08:	2003dcc8 	.word	0x2003dcc8
   b6d0c:	2003da91 	.word	0x2003da91
   b6d10:	38e38e39 	.word	0x38e38e39
   b6d14:	000c126e 	.word	0x000c126e
   b6d18:	2003da90 	.word	0x2003da90
   b6d1c:	eeeeeeef 	.word	0xeeeeeeef
        else if(menuItem == MAX_MENU_ITEMS-1){
   b6d20:	f1b8 0f04 	cmp.w	r8, #4
   b6d24:	f8df 81bc 	ldr.w	r8, [pc, #444]	; b6ee4 <_Z10updateMenuv+0x474>
   b6d28:	d178      	bne.n	b6e1c <_Z10updateMenuv+0x3ac>
            Serial.printlnf("Menu item %d", menuItem);
   b6d2a:	f006 fda3 	bl	bd874 <_Z16_fetch_usbserialv>
   b6d2e:	783a      	ldrb	r2, [r7, #0]
   b6d30:	4969      	ldr	r1, [pc, #420]	; (b6ed8 <_Z10updateMenuv+0x468>)
   b6d32:	f7fd fb0f 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem,true,!selectingBots,0,48,WaterBots.at(menuSelect));
   b6d36:	4631      	mov	r1, r6
   b6d38:	4868      	ldr	r0, [pc, #416]	; (b6edc <_Z10updateMenuv+0x46c>)
   b6d3a:	f897 9000 	ldrb.w	r9, [r7]
   b6d3e:	f7fe f987 	bl	b5050 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6d42:	4605      	mov	r5, r0
   b6d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d46:	ac01      	add	r4, sp, #4
   b6d48:	f898 c000 	ldrb.w	ip, [r8]
   b6d4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6d4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6d52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6d56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b6d5a:	2330      	movs	r3, #48	; 0x30
   b6d5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b6d60:	f08c 0201 	eor.w	r2, ip, #1
   b6d64:	2101      	movs	r1, #1
   b6d66:	4648      	mov	r0, r9
   b6d68:	9300      	str	r3, [sp, #0]
   b6d6a:	2300      	movs	r3, #0
   b6d6c:	f7ff fc36 	bl	b65dc <_Z13printMenuItemhbbtt8WaterBot>
            Serial.printlnf("Menu item %d", menuItem-1);
   b6d70:	f006 fd80 	bl	bd874 <_Z16_fetch_usbserialv>
   b6d74:	783a      	ldrb	r2, [r7, #0]
   b6d76:	4958      	ldr	r1, [pc, #352]	; (b6ed8 <_Z10updateMenuv+0x468>)
   b6d78:	3a01      	subs	r2, #1
   b6d7a:	f7fd faeb 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem-1,false,!selectingBots,0,32,WaterBots.at(menuSelect));
   b6d7e:	4631      	mov	r1, r6
   b6d80:	4856      	ldr	r0, [pc, #344]	; (b6edc <_Z10updateMenuv+0x46c>)
   b6d82:	f7fe f965 	bl	b5050 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6d86:	4605      	mov	r5, r0
   b6d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d8a:	f10d 0c04 	add.w	ip, sp, #4
   b6d8e:	f897 e000 	ldrb.w	lr, [r7]
   b6d92:	f898 9000 	ldrb.w	r9, [r8]
   b6d96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6d9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6da2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6da6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b6daa:	2320      	movs	r3, #32
   b6dac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b6db0:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   b6db4:	9300      	str	r3, [sp, #0]
   b6db6:	2300      	movs	r3, #0
   b6db8:	4619      	mov	r1, r3
   b6dba:	fa5f f08e 	uxtb.w	r0, lr
   b6dbe:	f089 0201 	eor.w	r2, r9, #1
   b6dc2:	f7ff fc0b 	bl	b65dc <_Z13printMenuItemhbbtt8WaterBot>
            Serial.printlnf("Menu item %d", menuItem-2);
   b6dc6:	f006 fd55 	bl	bd874 <_Z16_fetch_usbserialv>
   b6dca:	783a      	ldrb	r2, [r7, #0]
   b6dcc:	4942      	ldr	r1, [pc, #264]	; (b6ed8 <_Z10updateMenuv+0x468>)
   b6dce:	3a02      	subs	r2, #2
   b6dd0:	f7fd fac0 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem-2,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6dd4:	4841      	ldr	r0, [pc, #260]	; (b6edc <_Z10updateMenuv+0x46c>)
   b6dd6:	4631      	mov	r1, r6
   b6dd8:	f7fe f93a 	bl	b5050 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6ddc:	783f      	ldrb	r7, [r7, #0]
   b6dde:	f898 c000 	ldrb.w	ip, [r8]
   b6de2:	3f02      	subs	r7, #2
            printMenuItem(menuItem-1,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6de4:	4605      	mov	r5, r0
   b6de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6de8:	ae01      	add	r6, sp, #4
   b6dea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6dee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6df2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6df4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b6df8:	2310      	movs	r3, #16
   b6dfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b6dfe:	9300      	str	r3, [sp, #0]
   b6e00:	2300      	movs	r3, #0
   b6e02:	f08c 0201 	eor.w	r2, ip, #1
   b6e06:	4619      	mov	r1, r3
   b6e08:	b2f8      	uxtb	r0, r7
   b6e0a:	f7ff fbe7 	bl	b65dc <_Z13printMenuItemhbbtt8WaterBot>
        oled.display();
   b6e0e:	4834      	ldr	r0, [pc, #208]	; (b6ee0 <_Z10updateMenuv+0x470>)
   b6e10:	f002 fc24 	bl	b965c <_ZN15Adafruit_SH110X7displayEv>
        redrawMenu = false;
   b6e14:	2300      	movs	r3, #0
   b6e16:	f88b 3000 	strb.w	r3, [fp]
   b6e1a:	e6a0      	b.n	b6b5e <_Z10updateMenuv+0xee>
            Serial.printlnf("Menu item %d", menuItem+1);
   b6e1c:	f006 fd2a 	bl	bd874 <_Z16_fetch_usbserialv>
   b6e20:	783a      	ldrb	r2, [r7, #0]
   b6e22:	492d      	ldr	r1, [pc, #180]	; (b6ed8 <_Z10updateMenuv+0x468>)
   b6e24:	3201      	adds	r2, #1
   b6e26:	f7fd fa95 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem+1,false,!selectingBots,0,48,WaterBots.at(menuSelect));
   b6e2a:	4631      	mov	r1, r6
   b6e2c:	482b      	ldr	r0, [pc, #172]	; (b6edc <_Z10updateMenuv+0x46c>)
   b6e2e:	f7fe f90f 	bl	b5050 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6e32:	4605      	mov	r5, r0
   b6e34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6e36:	ac01      	add	r4, sp, #4
   b6e38:	f898 e000 	ldrb.w	lr, [r8]
   b6e3c:	f897 c000 	ldrb.w	ip, [r7]
   b6e40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6e48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6e4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b6e4e:	2330      	movs	r3, #48	; 0x30
   b6e50:	f10c 0c01 	add.w	ip, ip, #1
   b6e54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b6e58:	9300      	str	r3, [sp, #0]
   b6e5a:	2300      	movs	r3, #0
   b6e5c:	f08e 0201 	eor.w	r2, lr, #1
   b6e60:	4619      	mov	r1, r3
   b6e62:	fa5f f08c 	uxtb.w	r0, ip
   b6e66:	f7ff fbb9 	bl	b65dc <_Z13printMenuItemhbbtt8WaterBot>
            Serial.printlnf("Menu item %d", menuItem);
   b6e6a:	f006 fd03 	bl	bd874 <_Z16_fetch_usbserialv>
   b6e6e:	783a      	ldrb	r2, [r7, #0]
   b6e70:	4919      	ldr	r1, [pc, #100]	; (b6ed8 <_Z10updateMenuv+0x468>)
   b6e72:	f7fd fa6f 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem,true,!selectingBots,0,32,WaterBots.at(menuSelect));
   b6e76:	4631      	mov	r1, r6
   b6e78:	4818      	ldr	r0, [pc, #96]	; (b6edc <_Z10updateMenuv+0x46c>)
   b6e7a:	f897 9000 	ldrb.w	r9, [r7]
   b6e7e:	f7fe f8e7 	bl	b5050 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6e82:	4605      	mov	r5, r0
   b6e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6e86:	f10d 0c04 	add.w	ip, sp, #4
   b6e8a:	f898 e000 	ldrb.w	lr, [r8]
   b6e8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6e92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6e94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6e9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6e9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b6ea2:	2320      	movs	r3, #32
   b6ea4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b6ea8:	f08e 0201 	eor.w	r2, lr, #1
   b6eac:	2101      	movs	r1, #1
   b6eae:	9300      	str	r3, [sp, #0]
   b6eb0:	4648      	mov	r0, r9
   b6eb2:	2300      	movs	r3, #0
   b6eb4:	f7ff fb92 	bl	b65dc <_Z13printMenuItemhbbtt8WaterBot>
            Serial.printlnf("Menu item %d", menuItem-1);
   b6eb8:	f006 fcdc 	bl	bd874 <_Z16_fetch_usbserialv>
   b6ebc:	783a      	ldrb	r2, [r7, #0]
   b6ebe:	4906      	ldr	r1, [pc, #24]	; (b6ed8 <_Z10updateMenuv+0x468>)
   b6ec0:	3a01      	subs	r2, #1
   b6ec2:	f7fd fa47 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem-1,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6ec6:	4805      	ldr	r0, [pc, #20]	; (b6edc <_Z10updateMenuv+0x46c>)
   b6ec8:	4631      	mov	r1, r6
   b6eca:	f7fe f8c1 	bl	b5050 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6ece:	783f      	ldrb	r7, [r7, #0]
   b6ed0:	f898 c000 	ldrb.w	ip, [r8]
   b6ed4:	3f01      	subs	r7, #1
   b6ed6:	e785      	b.n	b6de4 <_Z10updateMenuv+0x374>
   b6ed8:	000c126e 	.word	0x000c126e
   b6edc:	2003dcc8 	.word	0x2003dcc8
   b6ee0:	2003de68 	.word	0x2003de68
   b6ee4:	2003da91 	.word	0x2003da91

000b6ee8 <loop>:
void loop() {
   b6ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(postStatus){
   b6eec:	4e33      	ldr	r6, [pc, #204]	; (b6fbc <loop+0xd4>)
   b6eee:	4c34      	ldr	r4, [pc, #208]	; (b6fc0 <loop+0xd8>)
   b6ef0:	7833      	ldrb	r3, [r6, #0]
void loop() {
   b6ef2:	b08b      	sub	sp, #44	; 0x2c
    if(postStatus){
   b6ef4:	b19b      	cbz	r3, b6f1e <loop+0x36>
        if(ControlledBot != NULL) sprintf(statusStr,"CCABspcB%1d",ControlledBot->botNum);
   b6ef6:	6823      	ldr	r3, [r4, #0]
   b6ef8:	2b00      	cmp	r3, #0
   b6efa:	d034      	beq.n	b6f66 <loop+0x7e>
   b6efc:	789a      	ldrb	r2, [r3, #2]
   b6efe:	4931      	ldr	r1, [pc, #196]	; (b6fc4 <loop+0xdc>)
   b6f00:	a802      	add	r0, sp, #8
   b6f02:	f003 f821 	bl	b9f48 <sprintf>
        sendData(statusStr,0,true,true,statusTimeout);                                  
   b6f06:	4d30      	ldr	r5, [pc, #192]	; (b6fc8 <loop+0xe0>)
   b6f08:	782b      	ldrb	r3, [r5, #0]
   b6f0a:	9300      	str	r3, [sp, #0]
   b6f0c:	2301      	movs	r3, #1
   b6f0e:	461a      	mov	r2, r3
   b6f10:	2100      	movs	r1, #0
   b6f12:	a802      	add	r0, sp, #8
   b6f14:	f7fd fe90 	bl	b4c38 <_Z8sendDataPKchbbb>
        postStatus = false;
   b6f18:	2300      	movs	r3, #0
   b6f1a:	7033      	strb	r3, [r6, #0]
        statusTimeout = false;
   b6f1c:	702b      	strb	r3, [r5, #0]
    updateMenu();
   b6f1e:	f7ff fda7 	bl	b6a70 <_Z10updateMenuv>
    updateBotControl();
   b6f22:	f7fe f8a9 	bl	b5078 <_Z16updateBotControlv>
    if(ControlledBot != nullptr) manualMotorControl(ControlledBot->botNum);
   b6f26:	6823      	ldr	r3, [r4, #0]
   b6f28:	b113      	cbz	r3, b6f30 <loop+0x48>
   b6f2a:	7898      	ldrb	r0, [r3, #2]
   b6f2c:	f7fd fef2 	bl	b4d14 <_Z18manualMotorControlh>
    if (BLE.connected()) {
   b6f30:	f003 fd74 	bl	baa1c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6f34:	f003 fe1f 	bl	bab76 <_ZNK8particle14BleLocalDevice9connectedEv>
   b6f38:	b380      	cbz	r0, b6f9c <loop+0xb4>
      : _M_current(__i) { }
   b6f3a:	4b24      	ldr	r3, [pc, #144]	; (b6fcc <loop+0xe4>)
        for(WaterBot ws: WaterBots) Serial.printlnf("Temp: %0.6f",ws.temp);
   b6f3c:	4f24      	ldr	r7, [pc, #144]	; (b6fd0 <loop+0xe8>)
   b6f3e:	e9d3 5800 	ldrd	r5, r8, [r3]
   b6f42:	45a8      	cmp	r8, r5
   b6f44:	d014      	beq.n	b6f70 <loop+0x88>
   b6f46:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
   b6f4a:	f006 fc93 	bl	bd874 <_Z16_fetch_usbserialv>
   b6f4e:	4606      	mov	r6, r0
   b6f50:	4648      	mov	r0, r9
   b6f52:	f007 f97d 	bl	be250 <__aeabi_f2d>
   b6f56:	4602      	mov	r2, r0
   b6f58:	460b      	mov	r3, r1
   b6f5a:	4630      	mov	r0, r6
   b6f5c:	4639      	mov	r1, r7
   b6f5e:	f7fd f9f9 	bl	b4354 <_ZN5Print8printlnfEPKcz>
      operator++() _GLIBCXX_NOEXCEPT
   b6f62:	353c      	adds	r5, #60	; 0x3c
	return *this;
   b6f64:	e7ed      	b.n	b6f42 <loop+0x5a>
        else sprintf(statusStr,"CCABspcNB");
   b6f66:	491b      	ldr	r1, [pc, #108]	; (b6fd4 <loop+0xec>)
   b6f68:	a802      	add	r0, sp, #8
   b6f6a:	f007 fdc4 	bl	beaf6 <strcpy>
   b6f6e:	e7ca      	b.n	b6f06 <loop+0x1e>
        delay(250);
   b6f70:	20fa      	movs	r0, #250	; 0xfa
   b6f72:	f003 f839 	bl	b9fe8 <delay>
    if(offloadingMode){
   b6f76:	4b18      	ldr	r3, [pc, #96]	; (b6fd8 <loop+0xf0>)
   b6f78:	781b      	ldrb	r3, [r3, #0]
   b6f7a:	b133      	cbz	r3, b6f8a <loop+0xa2>
        DataOffloader(ControlledBot->botNum);
   b6f7c:	6823      	ldr	r3, [r4, #0]
   b6f7e:	7898      	ldrb	r0, [r3, #2]
   b6f80:	f7fe ffcc 	bl	b5f1c <_Z13DataOffloaderh>
        ControlledBot->offloading = false;
   b6f84:	6823      	ldr	r3, [r4, #0]
   b6f86:	2200      	movs	r2, #0
   b6f88:	731a      	strb	r2, [r3, #12]
    XBeeHandler();
   b6f8a:	f7fe fd8d 	bl	b5aa8 <_Z11XBeeHandlerv>
    RPiHandler();
   b6f8e:	f7fd fddd 	bl	b4b4c <_Z10RPiHandlerv>
}
   b6f92:	b00b      	add	sp, #44	; 0x2c
   b6f94:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    XBeeLTEPairSet();
   b6f98:	f7fd bfb4 	b.w	b4f04 <_Z14XBeeLTEPairSetv>
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   b6f9c:	4d0f      	ldr	r5, [pc, #60]	; (b6fdc <loop+0xf4>)
   b6f9e:	f002 fd47 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
   b6fa2:	682b      	ldr	r3, [r5, #0]
   b6fa4:	1ac0      	subs	r0, r0, r3
   b6fa6:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b6faa:	d3e4      	bcc.n	b6f76 <loop+0x8e>
   b6fac:	f002 fd40 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
    		lastScan = millis();
   b6fb0:	6028      	str	r0, [r5, #0]
    		BLEScan(-1);
   b6fb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6fb6:	f7fe fe89 	bl	b5ccc <_Z7BLEScani>
   b6fba:	e7dc      	b.n	b6f76 <loop+0x8e>
   b6fbc:	2003dee0 	.word	0x2003dee0
   b6fc0:	2003dc8c 	.word	0x2003dc8c
   b6fc4:	000c127b 	.word	0x000c127b
   b6fc8:	2003e639 	.word	0x2003e639
   b6fcc:	2003dcc8 	.word	0x2003dcc8
   b6fd0:	000c1291 	.word	0x000c1291
   b6fd4:	000c1287 	.word	0x000c1287
   b6fd8:	2003de67 	.word	0x2003de67
   b6fdc:	2003dda4 	.word	0x2003dda4

000b6fe0 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b6fe0:	b538      	push	{r3, r4, r5, lr}
   b6fe2:	4604      	mov	r4, r0
   b6fe4:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b6fe6:	2224      	movs	r2, #36	; 0x24
   b6fe8:	2100      	movs	r1, #0
   b6fea:	f007 fcf6 	bl	be9da <memset>

  m_vol = vol;
   b6fee:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b6ff0:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b6ff2:	2b10      	cmp	r3, #16
   b6ff4:	d003      	beq.n	b6ffe <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b6ff6:	2b20      	cmp	r3, #32
   b6ff8:	d006      	beq.n	b7008 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b6ffa:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b6ffc:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b6ffe:	2320      	movs	r3, #32
  m_flags = F_READ;
   b7000:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b7002:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b7004:	70a0      	strb	r0, [r4, #2]
  return true;
   b7006:	e7f9      	b.n	b6ffc <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b7008:	2340      	movs	r3, #64	; 0x40
   b700a:	e7f9      	b.n	b7000 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b700c <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b700c:	b510      	push	{r4, lr}
   b700e:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b7010:	3024      	adds	r0, #36	; 0x24
   b7012:	f000 feeb 	bl	b7dec <_ZN8FatCache4syncEv>
   b7016:	b128      	cbz	r0, b7024 <_ZN9FatVolume9cacheSyncEv+0x18>
   b7018:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b701c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b7020:	f000 bee4 	b.w	b7dec <_ZN8FatCache4syncEv>
  }
   b7024:	bd10      	pop	{r4, pc}

000b7026 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b7026:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b7028:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b702a:	f043 0304 	orr.w	r3, r3, #4
   b702e:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b7030:	f100 0210 	add.w	r2, r0, #16
   b7034:	6880      	ldr	r0, [r0, #8]
   b7036:	f000 bf8f 	b.w	b7f58 <_ZN9FatVolume15allocateClusterEmPm>
	...

000b703c <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b703c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b7040:	7801      	ldrb	r1, [r0, #0]
   b7042:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b7046:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b7048:	d003      	beq.n	b7052 <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b704a:	2600      	movs	r6, #0
}
   b704c:	4630      	mov	r0, r6
   b704e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b7052:	6942      	ldr	r2, [r0, #20]
   b7054:	4b17      	ldr	r3, [pc, #92]	; (b70b4 <_ZN7FatFile13addDirClusterEv+0x78>)
   b7056:	429a      	cmp	r2, r3
   b7058:	d2f7      	bcs.n	b704a <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b705a:	f7ff ffe4 	bl	b7026 <_ZN7FatFile10addClusterEv>
   b705e:	4606      	mov	r6, r0
   b7060:	2800      	cmp	r0, #0
   b7062:	d0f2      	beq.n	b704a <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b7064:	6921      	ldr	r1, [r4, #16]
   b7066:	68a0      	ldr	r0, [r4, #8]
   b7068:	f000 ff0b 	bl	b7e82 <_ZNK9FatVolume17clusterFirstBlockEm>
   b706c:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b706e:	68a0      	ldr	r0, [r4, #8]
   b7070:	2205      	movs	r2, #5
   b7072:	4639      	mov	r1, r7
   b7074:	3024      	adds	r0, #36	; 0x24
   b7076:	f000 fee1 	bl	b7e3c <_ZN8FatCache4readEmh>
  if (!pc) {
   b707a:	4680      	mov	r8, r0
   b707c:	2800      	cmp	r0, #0
   b707e:	d0e4      	beq.n	b704a <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b7080:	4629      	mov	r1, r5
   b7082:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7086:	f007 fca8 	bl	be9da <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b708a:	2501      	movs	r5, #1
   b708c:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b708e:	791a      	ldrb	r2, [r3, #4]
   b7090:	42aa      	cmp	r2, r5
   b7092:	d909      	bls.n	b70a8 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b7094:	6818      	ldr	r0, [r3, #0]
   b7096:	4642      	mov	r2, r8
   b7098:	19e9      	adds	r1, r5, r7
   b709a:	f001 fa3c 	bl	b8516 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b709e:	2800      	cmp	r0, #0
   b70a0:	d0d3      	beq.n	b704a <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b70a2:	3501      	adds	r5, #1
   b70a4:	b2ed      	uxtb	r5, r5
   b70a6:	e7f1      	b.n	b708c <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b70a8:	6963      	ldr	r3, [r4, #20]
   b70aa:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b70ae:	6163      	str	r3, [r4, #20]
  return true;
   b70b0:	e7cc      	b.n	b704c <_ZN7FatFile13addDirClusterEv+0x10>
   b70b2:	bf00      	nop
   b70b4:	001ffe00 	.word	0x001ffe00

000b70b8 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b70b8:	b510      	push	{r4, lr}
   b70ba:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b70bc:	6880      	ldr	r0, [r0, #8]
   b70be:	460a      	mov	r2, r1
   b70c0:	3024      	adds	r0, #36	; 0x24
   b70c2:	69a1      	ldr	r1, [r4, #24]
   b70c4:	f000 feba 	bl	b7e3c <_ZN8FatCache4readEmh>
  if (!pc) {
   b70c8:	b120      	cbz	r0, b70d4 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b70ca:	88a3      	ldrh	r3, [r4, #4]
   b70cc:	f003 030f 	and.w	r3, r3, #15
   b70d0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b70d4:	bd10      	pop	{r4, pc}

000b70d6 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b70d6:	7803      	ldrb	r3, [r0, #0]
   b70d8:	b90b      	cbnz	r3, b70de <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b70da:	f7ff bf81 	b.w	b6fe0 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b70de:	2000      	movs	r0, #0
   b70e0:	4770      	bx	lr

000b70e2 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b70e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b70e6:	7803      	ldrb	r3, [r0, #0]
   b70e8:	4604      	mov	r4, r0
   b70ea:	4688      	mov	r8, r1
   b70ec:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b70ee:	2b00      	cmp	r3, #0
   b70f0:	d05d      	beq.n	b71ae <_ZN7FatFile4readEPvj+0xcc>
   b70f2:	7882      	ldrb	r2, [r0, #2]
   b70f4:	07d1      	lsls	r1, r2, #31
   b70f6:	d55a      	bpl.n	b71ae <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b70f8:	071a      	lsls	r2, r3, #28
   b70fa:	d52d      	bpl.n	b7158 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b70fc:	69c3      	ldr	r3, [r0, #28]
   b70fe:	6942      	ldr	r2, [r0, #20]
   b7100:	1a9b      	subs	r3, r3, r2
   b7102:	429d      	cmp	r5, r3
   b7104:	bf28      	it	cs
   b7106:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b7108:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b710a:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b710e:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b7112:	2e00      	cmp	r6, #0
   b7114:	f000 808f 	beq.w	b7236 <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b7118:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b711a:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b711c:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b711e:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b7120:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b7124:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b7128:	d51f      	bpl.n	b716a <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b712a:	6a00      	ldr	r0, [r0, #32]
   b712c:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b712e:	68a0      	ldr	r0, [r4, #8]
   b7130:	f1ba 0f00 	cmp.w	sl, #0
   b7134:	d142      	bne.n	b71bc <_ZN7FatFile4readEPvj+0xda>
   b7136:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b713a:	d33f      	bcc.n	b71bc <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b713c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b713e:	4299      	cmp	r1, r3
   b7140:	d03c      	beq.n	b71bc <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b7142:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b7146:	d252      	bcs.n	b71ee <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b7148:	6800      	ldr	r0, [r0, #0]
   b714a:	4642      	mov	r2, r8
   b714c:	f001 f95a 	bl	b8404 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b7150:	b368      	cbz	r0, b71ae <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b7152:	f44f 7700 	mov.w	r7, #512	; 0x200
   b7156:	e044      	b.n	b71e2 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b7158:	069b      	lsls	r3, r3, #26
   b715a:	d5d5      	bpl.n	b7108 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b715c:	6883      	ldr	r3, [r0, #8]
   b715e:	891a      	ldrh	r2, [r3, #8]
   b7160:	6943      	ldr	r3, [r0, #20]
   b7162:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b7166:	b29b      	uxth	r3, r3
   b7168:	e7cb      	b.n	b7102 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b716a:	f890 9005 	ldrb.w	r9, [r0, #5]
   b716e:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b7172:	f1ba 0f00 	cmp.w	sl, #0
   b7176:	d108      	bne.n	b718a <_ZN7FatFile4readEPvj+0xa8>
   b7178:	f1b9 0f00 	cmp.w	r9, #0
   b717c:	d105      	bne.n	b718a <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b717e:	b95b      	cbnz	r3, b7198 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b7180:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b7182:	bf4c      	ite	mi
   b7184:	6a03      	ldrmi	r3, [r0, #32]
   b7186:	6a23      	ldrpl	r3, [r4, #32]
   b7188:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b718a:	6921      	ldr	r1, [r4, #16]
   b718c:	68a0      	ldr	r0, [r4, #8]
   b718e:	f000 fe78 	bl	b7e82 <_ZNK9FatVolume17clusterFirstBlockEm>
   b7192:	eb09 0100 	add.w	r1, r9, r0
   b7196:	e7ca      	b.n	b712e <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b7198:	6921      	ldr	r1, [r4, #16]
   b719a:	465a      	mov	r2, fp
   b719c:	f000 fe77 	bl	b7e8e <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b71a0:	2800      	cmp	r0, #0
   b71a2:	db04      	blt.n	b71ae <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b71a4:	d1f1      	bne.n	b718a <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b71a6:	7823      	ldrb	r3, [r4, #0]
   b71a8:	f013 0f70 	tst.w	r3, #112	; 0x70
   b71ac:	d143      	bne.n	b7236 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b71ae:	7863      	ldrb	r3, [r4, #1]
   b71b0:	f043 0302 	orr.w	r3, r3, #2
   b71b4:	7063      	strb	r3, [r4, #1]
  return -1;
   b71b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b71ba:	e03d      	b.n	b7238 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b71bc:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b71c0:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b71c2:	f04f 0200 	mov.w	r2, #0
   b71c6:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b71ca:	bf28      	it	cs
   b71cc:	4637      	movcs	r7, r6
   b71ce:	f000 fe35 	bl	b7e3c <_ZN8FatCache4readEmh>
      if (!pc) {
   b71d2:	2800      	cmp	r0, #0
   b71d4:	d0eb      	beq.n	b71ae <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b71d6:	eb00 010a 	add.w	r1, r0, sl
   b71da:	463a      	mov	r2, r7
   b71dc:	4640      	mov	r0, r8
   b71de:	f007 fbd4 	bl	be98a <memcpy>
    m_curPosition += n;
   b71e2:	6963      	ldr	r3, [r4, #20]
   b71e4:	443b      	add	r3, r7
    dst += n;
   b71e6:	44b8      	add	r8, r7
    m_curPosition += n;
   b71e8:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b71ea:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b71ec:	e791      	b.n	b7112 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b71ee:	7822      	ldrb	r2, [r4, #0]
   b71f0:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b71f2:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b71f6:	d406      	bmi.n	b7206 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b71f8:	7902      	ldrb	r2, [r0, #4]
   b71fa:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b71fe:	b2d2      	uxtb	r2, r2
   b7200:	4592      	cmp	sl, r2
   b7202:	bf28      	it	cs
   b7204:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7206:	4299      	cmp	r1, r3
      n = 512*nb;
   b7208:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b720c:	d208      	bcs.n	b7220 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b720e:	68a0      	ldr	r0, [r4, #8]
   b7210:	4653      	mov	r3, sl
   b7212:	6800      	ldr	r0, [r0, #0]
   b7214:	4642      	mov	r2, r8
   b7216:	f001 f93d 	bl	b8494 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b721a:	2800      	cmp	r0, #0
   b721c:	d1e1      	bne.n	b71e2 <_ZN7FatFile4readEPvj+0x100>
   b721e:	e7c6      	b.n	b71ae <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7220:	4453      	add	r3, sl
   b7222:	428b      	cmp	r3, r1
   b7224:	d9f3      	bls.n	b720e <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b7226:	3024      	adds	r0, #36	; 0x24
   b7228:	9101      	str	r1, [sp, #4]
   b722a:	f000 fddf 	bl	b7dec <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b722e:	9901      	ldr	r1, [sp, #4]
   b7230:	2800      	cmp	r0, #0
   b7232:	d1ec      	bne.n	b720e <_ZN7FatFile4readEPvj+0x12c>
   b7234:	e7bb      	b.n	b71ae <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b7236:	1ba8      	subs	r0, r5, r6
}
   b7238:	b003      	add	sp, #12
   b723a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b723e <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b723e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b7240:	2201      	movs	r2, #1
   b7242:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b7246:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b724a:	4604      	mov	r4, r0
   b724c:	f7ff ff49 	bl	b70e2 <_ZN7FatFile4readEPvj>
   b7250:	2801      	cmp	r0, #1
   b7252:	bf0a      	itet	eq
   b7254:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b7258:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b725c:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b7260:	b002      	add	sp, #8
   b7262:	bd70      	pop	{r4, r5, r6, pc}

000b7264 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b7264:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b7266:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b7268:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b726c:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b726e:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b7272:	d000      	beq.n	b7276 <_ZN7FatFile12readDirCacheEb+0x12>
   b7274:	b999      	cbnz	r1, b729e <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b7276:	2201      	movs	r2, #1
   b7278:	f10d 0107 	add.w	r1, sp, #7
   b727c:	4620      	mov	r0, r4
   b727e:	f7ff ff30 	bl	b70e2 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b7282:	b240      	sxtb	r0, r0
   b7284:	2801      	cmp	r0, #1
   b7286:	d002      	beq.n	b728e <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b7288:	2000      	movs	r0, #0
}
   b728a:	b003      	add	sp, #12
   b728c:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b728e:	6963      	ldr	r3, [r4, #20]
   b7290:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b7292:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b7294:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b7296:	3030      	adds	r0, #48	; 0x30
   b7298:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b729c:	e7f5      	b.n	b728a <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b729e:	3320      	adds	r3, #32
   b72a0:	e7f7      	b.n	b7292 <_ZN7FatFile12readDirCacheEb+0x2e>

000b72a2 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b72a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b72a6:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b72a8:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b72aa:	4604      	mov	r4, r0
   b72ac:	460d      	mov	r5, r1
  if (!isOpen()) {
   b72ae:	b162      	cbz	r2, b72ca <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b72b0:	6940      	ldr	r0, [r0, #20]
   b72b2:	4288      	cmp	r0, r1
   b72b4:	d002      	beq.n	b72bc <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b72b6:	b919      	cbnz	r1, b72c0 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b72b8:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b72ba:	6165      	str	r5, [r4, #20]
    return true;
   b72bc:	2001      	movs	r0, #1
   b72be:	e006      	b.n	b72ce <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b72c0:	0716      	lsls	r6, r2, #28
   b72c2:	d506      	bpl.n	b72d2 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b72c4:	69e3      	ldr	r3, [r4, #28]
   b72c6:	428b      	cmp	r3, r1
   b72c8:	d20b      	bcs.n	b72e2 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b72ca:	6127      	str	r7, [r4, #16]
  return false;
   b72cc:	2000      	movs	r0, #0
}
   b72ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b72d2:	0691      	lsls	r1, r2, #26
   b72d4:	d505      	bpl.n	b72e2 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b72d6:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b72d8:	891b      	ldrh	r3, [r3, #8]
   b72da:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b72de:	d9ec      	bls.n	b72ba <_ZN7FatFile7seekSetEm+0x18>
   b72e0:	e7f3      	b.n	b72ca <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b72e2:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b72e6:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b72ea:	1e43      	subs	r3, r0, #1
   b72ec:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b72f0:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b72f2:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b72f4:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b72f6:	42b3      	cmp	r3, r6
   b72f8:	d800      	bhi.n	b72fc <_ZN7FatFile7seekSetEm+0x5a>
   b72fa:	b998      	cbnz	r0, b7324 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b72fc:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b72fe:	bf4c      	ite	mi
   b7300:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b7304:	6a23      	ldrpl	r3, [r4, #32]
   b7306:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b7308:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b730c:	2e00      	cmp	r6, #0
   b730e:	d0d4      	beq.n	b72ba <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b7310:	6921      	ldr	r1, [r4, #16]
   b7312:	68a0      	ldr	r0, [r4, #8]
   b7314:	4642      	mov	r2, r8
   b7316:	f000 fdba 	bl	b7e8e <_ZN9FatVolume6fatGetEmPm>
   b731a:	2800      	cmp	r0, #0
   b731c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b7320:	dcf4      	bgt.n	b730c <_ZN7FatFile7seekSetEm+0x6a>
   b7322:	e7d2      	b.n	b72ca <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b7324:	1af6      	subs	r6, r6, r3
   b7326:	e7ef      	b.n	b7308 <_ZN7FatFile7seekSetEm+0x66>

000b7328 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b7328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b732a:	460f      	mov	r7, r1
   b732c:	4604      	mov	r4, r0
   b732e:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b7330:	2100      	movs	r1, #0
   b7332:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b7334:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b7336:	f007 fb50 	bl	be9da <memset>
  m_vol = dirFile->m_vol;
   b733a:	68b8      	ldr	r0, [r7, #8]
   b733c:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b733e:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b7340:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b7344:	6a3b      	ldr	r3, [r7, #32]
   b7346:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b7348:	016a      	lsls	r2, r5, #5
   b734a:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b734e:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b7352:	071f      	lsls	r7, r3, #28
   b7354:	d444      	bmi.n	b73e0 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b7356:	f003 0317 	and.w	r3, r3, #23
   b735a:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b735c:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b7360:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b7364:	bf04      	itt	eq
   b7366:	f043 0308 	orreq.w	r3, r3, #8
   b736a:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b736c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b7370:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b7372:	f006 0303 	and.w	r3, r6, #3
   b7376:	2b01      	cmp	r3, #1
   b7378:	d02c      	beq.n	b73d4 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b737a:	2b02      	cmp	r3, #2
   b737c:	d028      	beq.n	b73d0 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b737e:	bb7b      	cbnz	r3, b73e0 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b7380:	0571      	lsls	r1, r6, #21
   b7382:	d42d      	bmi.n	b73e0 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b7384:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b7386:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b7388:	78a1      	ldrb	r1, [r4, #2]
   b738a:	078b      	lsls	r3, r1, #30
   b738c:	d504      	bpl.n	b7398 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b738e:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b7390:	06df      	lsls	r7, r3, #27
   b7392:	d425      	bmi.n	b73e0 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b7394:	07dd      	lsls	r5, r3, #31
   b7396:	d423      	bmi.n	b73e0 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b7398:	11b3      	asrs	r3, r6, #6
   b739a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b739e:	f006 0508 	and.w	r5, r6, #8
   b73a2:	432b      	orrs	r3, r5
   b73a4:	430b      	orrs	r3, r1
   b73a6:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b73a8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b73aa:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b73ac:	1883      	adds	r3, r0, r2
   b73ae:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b73b2:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b73b6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b73ba:	0572      	lsls	r2, r6, #21
   b73bc:	d513      	bpl.n	b73e6 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b73be:	b959      	cbnz	r1, b73d8 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b73c0:	78a3      	ldrb	r3, [r4, #2]
   b73c2:	f043 0304 	orr.w	r3, r3, #4
   b73c6:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b73c8:	0473      	lsls	r3, r6, #17
   b73ca:	d410      	bmi.n	b73ee <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b73cc:	2001      	movs	r0, #1
}
   b73ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b73d0:	2303      	movs	r3, #3
   b73d2:	e7d8      	b.n	b7386 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b73d4:	2302      	movs	r3, #2
   b73d6:	e7d6      	b.n	b7386 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b73d8:	f000 fdf9 	bl	b7fce <_ZN9FatVolume9freeChainEm>
   b73dc:	2800      	cmp	r0, #0
   b73de:	d1ef      	bne.n	b73c0 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b73e0:	2000      	movs	r0, #0
   b73e2:	7020      	strb	r0, [r4, #0]
  return false;
   b73e4:	e7f3      	b.n	b73ce <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b73e6:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b73e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b73ea:	61e3      	str	r3, [r4, #28]
   b73ec:	e7ec      	b.n	b73c8 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b73ee:	69e1      	ldr	r1, [r4, #28]
   b73f0:	4620      	mov	r0, r4
   b73f2:	f7ff ff56 	bl	b72a2 <_ZN7FatFile7seekSetEm>
   b73f6:	2800      	cmp	r0, #0
   b73f8:	d1e8      	bne.n	b73cc <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b73fa:	e7f1      	b.n	b73e0 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b73fc <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b73fc:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b73fe:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b7400:	4604      	mov	r4, r0
  if (!isOpen()) {
   b7402:	b90b      	cbnz	r3, b7408 <_ZN7FatFile4syncEv+0xc>
    return true;
   b7404:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b7406:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b7408:	7883      	ldrb	r3, [r0, #2]
   b740a:	075a      	lsls	r2, r3, #29
   b740c:	d523      	bpl.n	b7456 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b740e:	2101      	movs	r1, #1
   b7410:	f7ff fe52 	bl	b70b8 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b7414:	4605      	mov	r5, r0
   b7416:	b928      	cbnz	r0, b7424 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b7418:	7863      	ldrb	r3, [r4, #1]
   b741a:	f043 0301 	orr.w	r3, r3, #1
   b741e:	7063      	strb	r3, [r4, #1]
  return false;
   b7420:	2000      	movs	r0, #0
   b7422:	e7f0      	b.n	b7406 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b7424:	7803      	ldrb	r3, [r0, #0]
   b7426:	2be5      	cmp	r3, #229	; 0xe5
   b7428:	d0f6      	beq.n	b7418 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b742a:	7823      	ldrb	r3, [r4, #0]
   b742c:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b742e:	bf44      	itt	mi
   b7430:	69e3      	ldrmi	r3, [r4, #28]
   b7432:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b7434:	6a23      	ldr	r3, [r4, #32]
   b7436:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b7438:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b743a:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b743c:	4b09      	ldr	r3, [pc, #36]	; (b7464 <_ZN7FatFile4syncEv+0x68>)
   b743e:	681b      	ldr	r3, [r3, #0]
   b7440:	b12b      	cbz	r3, b744e <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b7442:	f100 0116 	add.w	r1, r0, #22
   b7446:	3018      	adds	r0, #24
   b7448:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b744a:	8b2b      	ldrh	r3, [r5, #24]
   b744c:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b744e:	78a3      	ldrb	r3, [r4, #2]
   b7450:	f023 0304 	bic.w	r3, r3, #4
   b7454:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b7456:	68a0      	ldr	r0, [r4, #8]
   b7458:	f7ff fdd8 	bl	b700c <_ZN9FatVolume9cacheSyncEv>
   b745c:	2800      	cmp	r0, #0
   b745e:	d0db      	beq.n	b7418 <_ZN7FatFile4syncEv+0x1c>
   b7460:	e7d0      	b.n	b7404 <_ZN7FatFile4syncEv+0x8>
   b7462:	bf00      	nop
   b7464:	2003e63c 	.word	0x2003e63c

000b7468 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b7468:	b510      	push	{r4, lr}
   b746a:	4604      	mov	r4, r0
  bool rtn = sync();
   b746c:	f7ff ffc6 	bl	b73fc <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b7470:	2300      	movs	r3, #0
   b7472:	7023      	strb	r3, [r4, #0]
}
   b7474:	bd10      	pop	{r4, pc}

000b7476 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b7476:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7478:	b093      	sub	sp, #76	; 0x4c
   b747a:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b747c:	2300      	movs	r3, #0
   b747e:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b7480:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b7482:	9201      	str	r2, [sp, #4]
   b7484:	4606      	mov	r6, r0
   b7486:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b7488:	b113      	cbz	r3, b7490 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b748a:	2000      	movs	r0, #0
}
   b748c:	b013      	add	sp, #76	; 0x4c
   b748e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b7490:	780b      	ldrb	r3, [r1, #0]
   b7492:	f013 0f70 	tst.w	r3, #112	; 0x70
   b7496:	d0f8      	beq.n	b748a <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b7498:	7813      	ldrb	r3, [r2, #0]
   b749a:	2b2f      	cmp	r3, #47	; 0x2f
   b749c:	d112      	bne.n	b74c4 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b749e:	9a01      	ldr	r2, [sp, #4]
   b74a0:	7813      	ldrb	r3, [r2, #0]
   b74a2:	2b2f      	cmp	r3, #47	; 0x2f
   b74a4:	d102      	bne.n	b74ac <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b74a6:	3201      	adds	r2, #1
   b74a8:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b74aa:	e7f8      	b.n	b749e <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b74ac:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b74ae:	b91b      	cbnz	r3, b74b8 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b74b0:	4630      	mov	r0, r6
   b74b2:	f7ff fe10 	bl	b70d6 <_ZN7FatFile8openRootEP9FatVolume>
   b74b6:	e7e9      	b.n	b748c <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b74b8:	a809      	add	r0, sp, #36	; 0x24
   b74ba:	f7ff fd91 	bl	b6fe0 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b74be:	2800      	cmp	r0, #0
   b74c0:	d0e3      	beq.n	b748a <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b74c2:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b74c4:	9801      	ldr	r0, [sp, #4]
   b74c6:	aa01      	add	r2, sp, #4
   b74c8:	a903      	add	r1, sp, #12
   b74ca:	f000 f931 	bl	b7730 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b74ce:	2800      	cmp	r0, #0
   b74d0:	d0db      	beq.n	b748a <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b74d2:	9b01      	ldr	r3, [sp, #4]
   b74d4:	781b      	ldrb	r3, [r3, #0]
   b74d6:	b19b      	cbz	r3, b7500 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b74d8:	2300      	movs	r3, #0
   b74da:	aa03      	add	r2, sp, #12
   b74dc:	4621      	mov	r1, r4
   b74de:	4630      	mov	r0, r6
   b74e0:	f000 faba 	bl	b7a58 <_ZN7FatFile4openEPS_P7fname_ti>
   b74e4:	2800      	cmp	r0, #0
   b74e6:	d0d0      	beq.n	b748a <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b74e8:	4635      	mov	r5, r6
   b74ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b74ec:	ac09      	add	r4, sp, #36	; 0x24
   b74ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b74f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b74f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b74f4:	682b      	ldr	r3, [r5, #0]
   b74f6:	6023      	str	r3, [r4, #0]
    close();
   b74f8:	4630      	mov	r0, r6
   b74fa:	f7ff ffb5 	bl	b7468 <_ZN7FatFile5closeEv>
  while (1) {
   b74fe:	e7e0      	b.n	b74c2 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b7500:	463b      	mov	r3, r7
   b7502:	aa03      	add	r2, sp, #12
   b7504:	4621      	mov	r1, r4
   b7506:	4630      	mov	r0, r6
   b7508:	f000 faa6 	bl	b7a58 <_ZN7FatFile4openEPS_P7fname_ti>
   b750c:	e7be      	b.n	b748c <_ZN7FatFile4openEPS_PKci+0x16>

000b750e <_ZN7FatFile6removeEPS_PKc>:
bool FatFile::remove(FatFile* dirFile, const char* path) {
   b750e:	b500      	push	{lr}
   b7510:	b08b      	sub	sp, #44	; 0x2c
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b7512:	2300      	movs	r3, #0
   b7514:	460a      	mov	r2, r1
   b7516:	9301      	str	r3, [sp, #4]
  if (!file.open(dirFile, path, O_WRONLY)) {
   b7518:	4601      	mov	r1, r0
   b751a:	2301      	movs	r3, #1
   b751c:	a801      	add	r0, sp, #4
   b751e:	f7ff ffaa 	bl	b7476 <_ZN7FatFile4openEPS_PKci>
   b7522:	b110      	cbz	r0, b752a <_ZN7FatFile6removeEPS_PKc+0x1c>
  return file.remove();
   b7524:	a801      	add	r0, sp, #4
   b7526:	f000 f9e1 	bl	b78ec <_ZN7FatFile6removeEv>
}
   b752a:	b00b      	add	sp, #44	; 0x2c
   b752c:	f85d fb04 	ldr.w	pc, [sp], #4

000b7530 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b7530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7534:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b7536:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7538:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b753a:	4604      	mov	r4, r0
   b753c:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b753e:	d55b      	bpl.n	b75f8 <_ZN7FatFile5writeEPKvj+0xc8>
   b7540:	7883      	ldrb	r3, [r0, #2]
   b7542:	079a      	lsls	r2, r3, #30
   b7544:	d558      	bpl.n	b75f8 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b7546:	071b      	lsls	r3, r3, #28
   b7548:	d451      	bmi.n	b75ee <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b754a:	6963      	ldr	r3, [r4, #20]
   b754c:	43db      	mvns	r3, r3
   b754e:	42bb      	cmp	r3, r7
   b7550:	d352      	bcc.n	b75f8 <_ZN7FatFile5writeEPKvj+0xc8>
   b7552:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b7554:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b7558:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b755a:	f1b8 0f00 	cmp.w	r8, #0
   b755e:	f000 8091 	beq.w	b7684 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b7562:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b7564:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b7566:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b756a:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b756e:	d10e      	bne.n	b758e <_ZN7FatFile5writeEPKvj+0x5e>
   b7570:	b96d      	cbnz	r5, b758e <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b7572:	6921      	ldr	r1, [r4, #16]
   b7574:	2900      	cmp	r1, #0
   b7576:	d046      	beq.n	b7606 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b7578:	4652      	mov	r2, sl
   b757a:	f000 fc88 	bl	b7e8e <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b757e:	2800      	cmp	r0, #0
   b7580:	db3a      	blt.n	b75f8 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b7582:	d104      	bne.n	b758e <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b7584:	4620      	mov	r0, r4
   b7586:	f7ff fd4e 	bl	b7026 <_ZN7FatFile10addClusterEv>
   b758a:	2800      	cmp	r0, #0
   b758c:	d034      	beq.n	b75f8 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b758e:	6921      	ldr	r1, [r4, #16]
   b7590:	68a0      	ldr	r0, [r4, #8]
   b7592:	f000 fc76 	bl	b7e82 <_ZNK9FatVolume17clusterFirstBlockEm>
   b7596:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b7598:	68a0      	ldr	r0, [r4, #8]
   b759a:	b915      	cbnz	r5, b75a2 <_ZN7FatFile5writeEPKvj+0x72>
   b759c:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b75a0:	d23f      	bcs.n	b7622 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b75a2:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b75a6:	4546      	cmp	r6, r8
   b75a8:	bf28      	it	cs
   b75aa:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b75ac:	2d00      	cmp	r5, #0
   b75ae:	d136      	bne.n	b761e <_ZN7FatFile5writeEPKvj+0xee>
   b75b0:	6962      	ldr	r2, [r4, #20]
   b75b2:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b75b4:	429a      	cmp	r2, r3
   b75b6:	bf34      	ite	cc
   b75b8:	2201      	movcc	r2, #1
   b75ba:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b75bc:	3024      	adds	r0, #36	; 0x24
   b75be:	f000 fc3d 	bl	b7e3c <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b75c2:	b1c8      	cbz	r0, b75f8 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b75c4:	4428      	add	r0, r5
   b75c6:	4632      	mov	r2, r6
   b75c8:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b75ca:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b75cc:	f007 f9dd 	bl	be98a <memcpy>
      if (512 == (n + blockOffset)) {
   b75d0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b75d4:	d104      	bne.n	b75e0 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b75d6:	68a0      	ldr	r0, [r4, #8]
   b75d8:	3024      	adds	r0, #36	; 0x24
   b75da:	f000 fc07 	bl	b7dec <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b75de:	b158      	cbz	r0, b75f8 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b75e0:	6963      	ldr	r3, [r4, #20]
   b75e2:	4433      	add	r3, r6
   b75e4:	6163      	str	r3, [r4, #20]
    src += n;
   b75e6:	44b1      	add	r9, r6
    nToWrite -= n;
   b75e8:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b75ec:	e7b4      	b.n	b7558 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b75ee:	69c1      	ldr	r1, [r0, #28]
   b75f0:	f7ff fe57 	bl	b72a2 <_ZN7FatFile7seekSetEm>
   b75f4:	2800      	cmp	r0, #0
   b75f6:	d1a8      	bne.n	b754a <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b75f8:	7863      	ldrb	r3, [r4, #1]
   b75fa:	f043 0301 	orr.w	r3, r3, #1
   b75fe:	7063      	strb	r3, [r4, #1]
  return -1;
   b7600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7604:	e050      	b.n	b76a8 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b7606:	6a23      	ldr	r3, [r4, #32]
   b7608:	b93b      	cbnz	r3, b761a <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b760a:	4620      	mov	r0, r4
   b760c:	f7ff fd0b 	bl	b7026 <_ZN7FatFile10addClusterEv>
   b7610:	2800      	cmp	r0, #0
   b7612:	d0f1      	beq.n	b75f8 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b7614:	6923      	ldr	r3, [r4, #16]
   b7616:	6223      	str	r3, [r4, #32]
   b7618:	e7b9      	b.n	b758e <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b761a:	6123      	str	r3, [r4, #16]
   b761c:	e7b7      	b.n	b758e <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b761e:	2201      	movs	r2, #1
   b7620:	e7cc      	b.n	b75bc <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b7622:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b7626:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b7628:	d31b      	bcc.n	b7662 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b762a:	f890 c004 	ldrb.w	ip, [r0, #4]
   b762e:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b7632:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b7634:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b7638:	4573      	cmp	r3, lr
   b763a:	bf28      	it	cs
   b763c:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b763e:	4291      	cmp	r1, r2
      n = 512*nb;
   b7640:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7644:	d307      	bcc.n	b7656 <_ZN7FatFile5writeEPKvj+0x126>
   b7646:	441a      	add	r2, r3
   b7648:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b764a:	bf82      	ittt	hi
   b764c:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b7650:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7654:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b7656:	68a5      	ldr	r5, [r4, #8]
   b7658:	464a      	mov	r2, r9
   b765a:	6828      	ldr	r0, [r5, #0]
   b765c:	f000 ffd1 	bl	b8602 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b7660:	e7bd      	b.n	b75de <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b7662:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b7664:	bf02      	ittt	eq
   b7666:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b766a:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b766e:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b7670:	68a3      	ldr	r3, [r4, #8]
   b7672:	464a      	mov	r2, r9
   b7674:	6818      	ldr	r0, [r3, #0]
   b7676:	f000 ff4e 	bl	b8516 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b767a:	2800      	cmp	r0, #0
   b767c:	d0bc      	beq.n	b75f8 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b767e:	f44f 7600 	mov.w	r6, #512	; 0x200
   b7682:	e7ad      	b.n	b75e0 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b7684:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b7686:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b7688:	42b2      	cmp	r2, r6
   b768a:	d204      	bcs.n	b7696 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b768c:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b768e:	f043 0304 	orr.w	r3, r3, #4
   b7692:	70a3      	strb	r3, [r4, #2]
   b7694:	e003      	b.n	b769e <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b7696:	4a08      	ldr	r2, [pc, #32]	; (b76b8 <_ZN7FatFile5writeEPKvj+0x188>)
   b7698:	6812      	ldr	r2, [r2, #0]
   b769a:	2a00      	cmp	r2, #0
   b769c:	d1f7      	bne.n	b768e <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b769e:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b76a2:	2b00      	cmp	r3, #0
   b76a4:	db02      	blt.n	b76ac <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b76a6:	4638      	mov	r0, r7
}
   b76a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b76ac:	4620      	mov	r0, r4
   b76ae:	f7ff fea5 	bl	b73fc <_ZN7FatFile4syncEv>
   b76b2:	2800      	cmp	r0, #0
   b76b4:	d1f7      	bne.n	b76a6 <_ZN7FatFile5writeEPKvj+0x176>
   b76b6:	e79f      	b.n	b75f8 <_ZN7FatFile5writeEPKvj+0xc8>
   b76b8:	2003e63c 	.word	0x2003e63c

000b76bc <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b76bc:	2904      	cmp	r1, #4
   b76be:	d804      	bhi.n	b76ca <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b76c0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b76c4:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b76c8:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b76ca:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b76cc:	bf9b      	ittet	ls
   b76ce:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b76d2:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b76d6:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b76d8:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b76da:	bf84      	itt	hi
   b76dc:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b76e0:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b76e2:	4770      	bx	lr

000b76e4 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b76e4:	1e41      	subs	r1, r0, #1
   b76e6:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b76ea:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b76ec:	0842      	lsrs	r2, r0, #1
   b76ee:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b76f2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b76f6:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b76fa:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b76fc:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b76fe:	d1f5      	bne.n	b76ec <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b7700:	4770      	bx	lr

000b7702 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b7702:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b7704:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b7706:	4604      	mov	r4, r0
   b7708:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b770a:	b923      	cbnz	r3, b7716 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b770c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b7710:	6889      	ldr	r1, [r1, #8]
   b7712:	f7ff bce0 	b.w	b70d6 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b7716:	2224      	movs	r2, #36	; 0x24
   b7718:	2100      	movs	r1, #0
   b771a:	f007 f95e 	bl	be9da <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b771e:	2310      	movs	r3, #16
  m_flags = F_READ;
   b7720:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b7722:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b7724:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b7726:	68ab      	ldr	r3, [r5, #8]
   b7728:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b772a:	68eb      	ldr	r3, [r5, #12]
   b772c:	6223      	str	r3, [r4, #32]
}
   b772e:	bd38      	pop	{r3, r4, r5, pc}

000b7730 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b7730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7734:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b7736:	f810 3b01 	ldrb.w	r3, [r0], #1
   b773a:	2b20      	cmp	r3, #32
   b773c:	d0fa      	beq.n	b7734 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b773e:	4d6a      	ldr	r5, [pc, #424]	; (b78e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b7740:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b7742:	2400      	movs	r4, #0
    c = path[len];
   b7744:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b7746:	b1c3      	cbz	r3, b777a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b7748:	2b2f      	cmp	r3, #47	; 0x2f
   b774a:	d016      	beq.n	b777a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b774c:	2b5c      	cmp	r3, #92	; 0x5c
   b774e:	d102      	bne.n	b7756 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b7750:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b7752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b7756:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b775a:	b2c0      	uxtb	r0, r0
   b775c:	281d      	cmp	r0, #29
   b775e:	d803      	bhi.n	b7768 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b7760:	fa25 f000 	lsr.w	r0, r5, r0
   b7764:	07c0      	lsls	r0, r0, #31
   b7766:	d4f3      	bmi.n	b7750 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b7768:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b776c:	283c      	cmp	r0, #60	; 0x3c
   b776e:	d0ef      	beq.n	b7750 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b7770:	3b20      	subs	r3, #32
   b7772:	2b5e      	cmp	r3, #94	; 0x5e
   b7774:	d8ec      	bhi.n	b7750 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b7776:	3401      	adds	r4, #1
    c = path[len];
   b7778:	e7e4      	b.n	b7744 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b777a:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b777c:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b777e:	4607      	mov	r7, r0
   b7780:	f810 5b01 	ldrb.w	r5, [r0], #1
   b7784:	2d20      	cmp	r5, #32
   b7786:	d0fa      	beq.n	b777e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b7788:	2d2f      	cmp	r5, #47	; 0x2f
   b778a:	d0f8      	beq.n	b777e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b778c:	6017      	str	r7, [r2, #0]
  while (len) {
   b778e:	b14c      	cbz	r4, b77a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b7790:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b7794:	2a2e      	cmp	r2, #46	; 0x2e
   b7796:	d001      	beq.n	b779c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b7798:	2a20      	cmp	r2, #32
   b779a:	d101      	bne.n	b77a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b779c:	3c01      	subs	r4, #1
  while (len) {
   b779e:	e7f6      	b.n	b778e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b77a0:	2cff      	cmp	r4, #255	; 0xff
   b77a2:	dcd5      	bgt.n	b7750 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b77a4:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b77a8:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b77ac:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b77ae:	f8c1 300d 	str.w	r3, [r1, #13]
   b77b2:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b77b4:	f04f 0800 	mov.w	r8, #0
   b77b8:	f816 3008 	ldrb.w	r3, [r6, r8]
   b77bc:	2b2e      	cmp	r3, #46	; 0x2e
   b77be:	d001      	beq.n	b77c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b77c0:	2b20      	cmp	r3, #32
   b77c2:	d102      	bne.n	b77ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b77c4:	f108 0801 	add.w	r8, r8, #1
   b77c8:	e7f6      	b.n	b77b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b77ca:	fab8 f088 	clz	r0, r8
   b77ce:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b77d0:	1e65      	subs	r5, r4, #1
   b77d2:	1c6b      	adds	r3, r5, #1
   b77d4:	d002      	beq.n	b77dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b77d6:	5d73      	ldrb	r3, [r6, r5]
   b77d8:	2b2e      	cmp	r3, #46	; 0x2e
   b77da:	d114      	bne.n	b7806 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b77dc:	f04f 0900 	mov.w	r9, #0
   b77e0:	2707      	movs	r7, #7
   b77e2:	464a      	mov	r2, r9
   b77e4:	46ca      	mov	sl, r9
   b77e6:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b77ea:	45a0      	cmp	r8, r4
   b77ec:	da68      	bge.n	b78c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b77ee:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b77f2:	2b20      	cmp	r3, #32
   b77f4:	d003      	beq.n	b77fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b77f6:	2b2e      	cmp	r3, #46	; 0x2e
   b77f8:	d107      	bne.n	b780a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b77fa:	45a8      	cmp	r8, r5
   b77fc:	d012      	beq.n	b7824 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b77fe:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b7800:	f108 0801 	add.w	r8, r8, #1
   b7804:	e7f1      	b.n	b77ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b7806:	3d01      	subs	r5, #1
   b7808:	e7e3      	b.n	b77d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b780a:	2b22      	cmp	r3, #34	; 0x22
   b780c:	d008      	beq.n	b7820 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b780e:	2b7c      	cmp	r3, #124	; 0x7c
   b7810:	d006      	beq.n	b7820 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b7812:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b7816:	f1bc 0f05 	cmp.w	ip, #5
   b781a:	d80a      	bhi.n	b7832 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b781c:	2b2d      	cmp	r3, #45	; 0x2d
   b781e:	d012      	beq.n	b7846 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b7820:	45a8      	cmp	r8, r5
   b7822:	d15b      	bne.n	b78dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b7824:	2f0a      	cmp	r7, #10
   b7826:	d04a      	beq.n	b78be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b7828:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b782a:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b782c:	f04f 0e10 	mov.w	lr, #16
   b7830:	e7e6      	b.n	b7800 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b7832:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b7836:	f1bc 0f05 	cmp.w	ip, #5
   b783a:	d9f1      	bls.n	b7820 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b783c:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b7840:	f1bc 0f02 	cmp.w	ip, #2
   b7844:	d9ec      	bls.n	b7820 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b7846:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b784a:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b784e:	d8e7      	bhi.n	b7820 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b7850:	45a8      	cmp	r8, r5
   b7852:	d0e7      	beq.n	b7824 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b7854:	42ba      	cmp	r2, r7
   b7856:	d830      	bhi.n	b78ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b7858:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b785c:	f1bc 0f19 	cmp.w	ip, #25
   b7860:	d81a      	bhi.n	b7898 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b7862:	3b20      	subs	r3, #32
        lc |= bit;
   b7864:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b7868:	b2db      	uxtb	r3, r3
        lc |= bit;
   b786a:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b786e:	f102 0c01 	add.w	ip, r2, #1
   b7872:	fa5f fc8c 	uxtb.w	ip, ip
   b7876:	440a      	add	r2, r1
      if (i < 7) {
   b7878:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b787c:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b787e:	d801      	bhi.n	b7884 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b7880:	f881 c00c 	strb.w	ip, [r1, #12]
   b7884:	4662      	mov	r2, ip
   b7886:	e7bb      	b.n	b7800 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b7888:	45a8      	cmp	r8, r5
   b788a:	dc18      	bgt.n	b78be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b788c:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b788e:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b7890:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b7892:	f04f 0e10 	mov.w	lr, #16
   b7896:	e7b2      	b.n	b77fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b7898:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b789c:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b78a0:	bf98      	it	ls
   b78a2:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b78a6:	e7e2      	b.n	b786e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b78a8:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b78aa:	2001      	movs	r0, #1
   b78ac:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b78ae:	4419      	add	r1, r3
   b78b0:	237e      	movs	r3, #126	; 0x7e
   b78b2:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b78b4:	2331      	movs	r3, #49	; 0x31
   b78b6:	738b      	strb	r3, [r1, #14]
   b78b8:	e74b      	b.n	b7752 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b78ba:	2f0a      	cmp	r7, #10
   b78bc:	d1e4      	bne.n	b7888 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b78be:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b78c0:	7b4b      	ldrb	r3, [r1, #13]
   b78c2:	2b20      	cmp	r3, #32
   b78c4:	f43f af44 	beq.w	b7750 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b78c8:	2800      	cmp	r0, #0
   b78ca:	d0ed      	beq.n	b78a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b78cc:	ea1a 0f09 	tst.w	sl, r9
   b78d0:	bf18      	it	ne
   b78d2:	f04f 0902 	movne.w	r9, #2
   b78d6:	f881 9000 	strb.w	r9, [r1]
   b78da:	e73a      	b.n	b7752 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b78dc:	42ba      	cmp	r2, r7
   b78de:	d8ec      	bhi.n	b78ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b78e0:	2000      	movs	r0, #0
      c = '_';
   b78e2:	235f      	movs	r3, #95	; 0x5f
   b78e4:	e7c3      	b.n	b786e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b78e6:	bf00      	nop
   b78e8:	31000101 	.word	0x31000101

000b78ec <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   b78ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b78f0:	b08a      	sub	sp, #40	; 0x28
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b78f2:	2300      	movs	r3, #0
   b78f4:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   b78f6:	7803      	ldrb	r3, [r0, #0]
   b78f8:	0719      	lsls	r1, r3, #28
bool FatFile::remove() {
   b78fa:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & F_WRITE)) {
   b78fc:	d50a      	bpl.n	b7914 <_ZN7FatFile6removeEv+0x28>
   b78fe:	7883      	ldrb	r3, [r0, #2]
   b7900:	079a      	lsls	r2, r3, #30
   b7902:	d507      	bpl.n	b7914 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b7904:	6a01      	ldr	r1, [r0, #32]
   b7906:	b939      	cbnz	r1, b7918 <_ZN7FatFile6removeEv+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b7908:	2101      	movs	r1, #1
   b790a:	4620      	mov	r0, r4
   b790c:	f7ff fbd4 	bl	b70b8 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b7910:	4605      	mov	r5, r0
   b7912:	b938      	cbnz	r0, b7924 <_ZN7FatFile6removeEv+0x38>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   b7914:	2000      	movs	r0, #0
   b7916:	e048      	b.n	b79aa <_ZN7FatFile6removeEv+0xbe>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b7918:	6880      	ldr	r0, [r0, #8]
   b791a:	f000 fb58 	bl	b7fce <_ZN9FatVolume9freeChainEm>
   b791e:	2800      	cmp	r0, #0
   b7920:	d1f2      	bne.n	b7908 <_ZN7FatFile6removeEv+0x1c>
   b7922:	e7f7      	b.n	b7914 <_ZN7FatFile6removeEv+0x28>
  chksum = lfnChecksum(dir->name);
   b7924:	f7ff fede 	bl	b76e4 <_ZN7FatFile11lfnChecksumEPh>
  dir->name[0] = DIR_NAME_DELETED;
   b7928:	27e5      	movs	r7, #229	; 0xe5
   b792a:	702f      	strb	r7, [r5, #0]
  m_attr = FILE_ATTR_CLOSED;
   b792c:	2300      	movs	r3, #0
  chksum = lfnChecksum(dir->name);
   b792e:	4606      	mov	r6, r0
  m_attr = FILE_ATTR_CLOSED;
   b7930:	7023      	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
   b7932:	68a0      	ldr	r0, [r4, #8]
   b7934:	f7ff fb6a 	bl	b700c <_ZN9FatVolume9cacheSyncEv>
   b7938:	2800      	cmp	r0, #0
   b793a:	d0eb      	beq.n	b7914 <_ZN7FatFile6removeEv+0x28>
  if (!isLFN()) {
   b793c:	78e3      	ldrb	r3, [r4, #3]
   b793e:	2b00      	cmp	r3, #0
   b7940:	d033      	beq.n	b79aa <_ZN7FatFile6removeEv+0xbe>
  if (!dirFile.openCluster(this)) {
   b7942:	4621      	mov	r1, r4
   b7944:	a801      	add	r0, sp, #4
   b7946:	f7ff fedc 	bl	b7702 <_ZN7FatFile11openClusterEPS_>
   b794a:	2800      	cmp	r0, #0
   b794c:	d0e2      	beq.n	b7914 <_ZN7FatFile6removeEv+0x28>
   b794e:	2501      	movs	r5, #1
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   b7950:	78e3      	ldrb	r3, [r4, #3]
   b7952:	fa5f f885 	uxtb.w	r8, r5
   b7956:	4543      	cmp	r3, r8
   b7958:	d3dc      	bcc.n	b7914 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b795a:	88a1      	ldrh	r1, [r4, #4]
   b795c:	1b49      	subs	r1, r1, r5
   b795e:	0149      	lsls	r1, r1, #5
   b7960:	a801      	add	r0, sp, #4
   b7962:	f7ff fc9e 	bl	b72a2 <_ZN7FatFile7seekSetEm>
   b7966:	2800      	cmp	r0, #0
   b7968:	d0d4      	beq.n	b7914 <_ZN7FatFile6removeEv+0x28>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b796a:	2100      	movs	r1, #0
   b796c:	a801      	add	r0, sp, #4
   b796e:	f7ff fc79 	bl	b7264 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b7972:	2800      	cmp	r0, #0
   b7974:	d0ce      	beq.n	b7914 <_ZN7FatFile6removeEv+0x28>
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b7976:	7ac3      	ldrb	r3, [r0, #11]
   b7978:	2b0f      	cmp	r3, #15
   b797a:	d1cb      	bne.n	b7914 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b797c:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b797e:	f002 031f 	and.w	r3, r2, #31
   b7982:	4543      	cmp	r3, r8
   b7984:	d1c6      	bne.n	b7914 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b7986:	7b43      	ldrb	r3, [r0, #13]
   b7988:	42b3      	cmp	r3, r6
   b798a:	d1c3      	bne.n	b7914 <_ZN7FatFile6removeEv+0x28>
    ldir->ord = DIR_NAME_DELETED;
   b798c:	7007      	strb	r7, [r0, #0]
    m_vol->cacheDirty();
   b798e:	68a1      	ldr	r1, [r4, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b7990:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   b7994:	f043 0301 	orr.w	r3, r3, #1
   b7998:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   b799c:	0653      	lsls	r3, r2, #25
   b799e:	f105 0501 	add.w	r5, r5, #1
   b79a2:	d5d5      	bpl.n	b7950 <_ZN7FatFile6removeEv+0x64>
      if (!m_vol->cacheSync()) {
   b79a4:	68a0      	ldr	r0, [r4, #8]
   b79a6:	f7ff fb31 	bl	b700c <_ZN9FatVolume9cacheSyncEv>
}
   b79aa:	b00a      	add	sp, #40	; 0x28
   b79ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b79b0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b79b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b79b4:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b79b8:	4606      	mov	r6, r0
   b79ba:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b79bc:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b79be:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b79c0:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b79c4:	6861      	ldr	r1, [r4, #4]
   b79c6:	68a2      	ldr	r2, [r4, #8]
   b79c8:	186b      	adds	r3, r5, r1
   b79ca:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b79cc:	4411      	add	r1, r2
   b79ce:	4291      	cmp	r1, r2
   b79d0:	d006      	beq.n	b79e0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b79d2:	f812 0b01 	ldrb.w	r0, [r2], #1
   b79d6:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b79da:	4043      	eors	r3, r0
   b79dc:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b79de:	e7f6      	b.n	b79ce <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b79e0:	f1b9 0f03 	cmp.w	r9, #3
   b79e4:	bf28      	it	cs
   b79e6:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b79ea:	f109 0204 	add.w	r2, r9, #4
   b79ee:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b79f0:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b79f4:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b79f6:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b79f8:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b79fa:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b79fc:	bf94      	ite	ls
   b79fe:	3130      	addls	r1, #48	; 0x30
   b7a00:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7a02:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7a04:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b7a06:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7a0a:	d1f1      	bne.n	b79f0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b7a0c:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b7a10:	2100      	movs	r1, #0
   b7a12:	735f      	strb	r7, [r3, #13]
   b7a14:	4630      	mov	r0, r6
   b7a16:	f7ff fc44 	bl	b72a2 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b7a1a:	2101      	movs	r1, #1
   b7a1c:	4630      	mov	r0, r6
   b7a1e:	f7ff fc21 	bl	b7264 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b7a22:	4601      	mov	r1, r0
   b7a24:	b928      	cbnz	r0, b7a32 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b7a26:	7870      	ldrb	r0, [r6, #1]
   b7a28:	fab0 f080 	clz	r0, r0
   b7a2c:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b7a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b7a32:	7803      	ldrb	r3, [r0, #0]
   b7a34:	b16b      	cbz	r3, b7a52 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b7a36:	7ac3      	ldrb	r3, [r0, #11]
   b7a38:	071b      	lsls	r3, r3, #28
   b7a3a:	d4ee      	bmi.n	b7a1a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b7a3c:	220b      	movs	r2, #11
   b7a3e:	4640      	mov	r0, r8
   b7a40:	f006 ff93 	bl	be96a <memcmp>
   b7a44:	2800      	cmp	r0, #0
   b7a46:	d1e8      	bne.n	b7a1a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b7a48:	3501      	adds	r5, #1
   b7a4a:	b2ad      	uxth	r5, r5
   b7a4c:	2d64      	cmp	r5, #100	; 0x64
   b7a4e:	d1b9      	bne.n	b79c4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b7a50:	e7ed      	b.n	b7a2e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b7a52:	2001      	movs	r0, #1
   b7a54:	e7eb      	b.n	b7a2e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b7a58 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b7a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7a5c:	ed2d 8b02 	vpush	{d8}
   b7a60:	b08b      	sub	sp, #44	; 0x2c
   b7a62:	460d      	mov	r5, r1
   b7a64:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b7a66:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b7a68:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b7a6a:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b7a6e:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b7a70:	d105      	bne.n	b7a7e <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b7a72:	2000      	movs	r0, #0
}
   b7a74:	b00b      	add	sp, #44	; 0x2c
   b7a76:	ecbd 8b02 	vpop	{d8}
   b7a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b7a7e:	9b07      	ldr	r3, [sp, #28]
   b7a80:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b7a82:	2b00      	cmp	r3, #0
   b7a84:	d1f5      	bne.n	b7a72 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b7a86:	6853      	ldr	r3, [r2, #4]
   b7a88:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b7a8a:	7813      	ldrb	r3, [r2, #0]
   b7a8c:	079c      	lsls	r4, r3, #30
   b7a8e:	bf1f      	itttt	ne
   b7a90:	9b05      	ldrne	r3, [sp, #20]
   b7a92:	330c      	addne	r3, #12
   b7a94:	220d      	movne	r2, #13
   b7a96:	fbb3 f3f2 	udivne	r3, r3, r2
   b7a9a:	bf1a      	itte	ne
   b7a9c:	3301      	addne	r3, #1
   b7a9e:	b2db      	uxtbne	r3, r3
   b7aa0:	2301      	moveq	r3, #1
    seekSet(0);
   b7aa2:	2100      	movs	r1, #0
   b7aa4:	4628      	mov	r0, r5
   b7aa6:	9303      	str	r3, [sp, #12]
   b7aa8:	f7ff fbfb 	bl	b72a2 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b7aac:	f107 030d 	add.w	r3, r7, #13
  }
   b7ab0:	f04f 0b00 	mov.w	fp, #0
   b7ab4:	ee08 3a10 	vmov	s16, r3
   b7ab8:	46da      	mov	sl, fp
   b7aba:	465c      	mov	r4, fp
   b7abc:	465e      	mov	r6, fp
   b7abe:	f8cd b010 	str.w	fp, [sp, #16]
   b7ac2:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b7ac4:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b7ac6:	2101      	movs	r1, #1
   b7ac8:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b7aca:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b7ace:	f7ff fbc9 	bl	b7264 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b7ad2:	4603      	mov	r3, r0
   b7ad4:	2800      	cmp	r0, #0
   b7ad6:	d171      	bne.n	b7bbc <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b7ad8:	786b      	ldrb	r3, [r5, #1]
   b7ada:	2b00      	cmp	r3, #0
   b7adc:	d1c9      	bne.n	b7a72 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b7ade:	9b06      	ldr	r3, [sp, #24]
   b7ae0:	059a      	lsls	r2, r3, #22
   b7ae2:	d5c6      	bpl.n	b7a72 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b7ae4:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b7ae8:	3b01      	subs	r3, #1
   b7aea:	2b01      	cmp	r3, #1
   b7aec:	d8c1      	bhi.n	b7a72 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b7aee:	9b04      	ldr	r3, [sp, #16]
   b7af0:	2c00      	cmp	r4, #0
   b7af2:	bf08      	it	eq
   b7af4:	4643      	moveq	r3, r8
   b7af6:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b7af8:	9b03      	ldr	r3, [sp, #12]
   b7afa:	429c      	cmp	r4, r3
   b7afc:	f0c0 80f1 	bcc.w	b7ce2 <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b7b00:	f1b9 0f00 	cmp.w	r9, #0
   b7b04:	f040 810a 	bne.w	b7d1c <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b7b08:	9b04      	ldr	r3, [sp, #16]
   b7b0a:	4628      	mov	r0, r5
   b7b0c:	0159      	lsls	r1, r3, #5
   b7b0e:	f7ff fbc8 	bl	b72a2 <_ZN7FatFile7seekSetEm>
   b7b12:	2800      	cmp	r0, #0
   b7b14:	d0ad      	beq.n	b7a72 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b7b16:	9b03      	ldr	r3, [sp, #12]
   b7b18:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b7b1c:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b7b20:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b7b22:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b7b26:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b7b2a:	2e00      	cmp	r6, #0
   b7b2c:	f000 810d 	beq.w	b7d4a <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b7b30:	2100      	movs	r1, #0
   b7b32:	4628      	mov	r0, r5
   b7b34:	f7ff fb96 	bl	b7264 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b7b38:	4604      	mov	r4, r0
   b7b3a:	2800      	cmp	r0, #0
   b7b3c:	d099      	beq.n	b7a72 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b7b3e:	68aa      	ldr	r2, [r5, #8]
   b7b40:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b7b44:	454e      	cmp	r6, r9
   b7b46:	f043 0301 	orr.w	r3, r3, #1
   b7b4a:	bf0c      	ite	eq
   b7b4c:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b7b50:	46b3      	movne	fp, r6
   b7b52:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b7b56:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b7b5a:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b7b5e:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b7b62:	f107 000d 	add.w	r0, r7, #13
   b7b66:	f7ff fdbd 	bl	b76e4 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b7b6a:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b7b6e:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b7b70:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b7b74:	f00b 031f 	and.w	r3, fp, #31
   b7b78:	220d      	movs	r2, #13
   b7b7a:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b7b7c:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b7b80:	4353      	muls	r3, r2
   b7b82:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b7b84:	9905      	ldr	r1, [sp, #20]
   b7b86:	4299      	cmp	r1, r3
   b7b88:	f240 80d0 	bls.w	b7d2c <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b7b8c:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b7b90:	2a04      	cmp	r2, #4
   b7b92:	fa5f fe82 	uxtb.w	lr, r2
   b7b96:	f102 0001 	add.w	r0, r2, #1
   b7b9a:	f200 80cd 	bhi.w	b7d38 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b7b9e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b7ba2:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b7ba6:	280d      	cmp	r0, #13
   b7ba8:	f103 0301 	add.w	r3, r3, #1
   b7bac:	4602      	mov	r2, r0
   b7bae:	d1e9      	bne.n	b7b84 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b7bb0:	3e01      	subs	r6, #1
   b7bb2:	b2f6      	uxtb	r6, r6
   b7bb4:	e7b9      	b.n	b7b2a <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b7bb6:	f04f 0901 	mov.w	r9, #1
   b7bba:	e783      	b.n	b7ac4 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b7bbc:	7802      	ldrb	r2, [r0, #0]
   b7bbe:	2ae5      	cmp	r2, #229	; 0xe5
   b7bc0:	d000      	beq.n	b7bc4 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b7bc2:	b97a      	cbnz	r2, b7be4 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b7bc4:	9904      	ldr	r1, [sp, #16]
   b7bc6:	2c00      	cmp	r4, #0
   b7bc8:	bf08      	it	eq
   b7bca:	4641      	moveq	r1, r8
   b7bcc:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b7bce:	9903      	ldr	r1, [sp, #12]
   b7bd0:	428c      	cmp	r4, r1
        freeFound++;
   b7bd2:	bf3c      	itt	cc
   b7bd4:	3401      	addcc	r4, #1
   b7bd6:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b7bd8:	2a00      	cmp	r2, #0
   b7bda:	d080      	beq.n	b7ade <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b7bdc:	2ae5      	cmp	r2, #229	; 0xe5
   b7bde:	d105      	bne.n	b7bec <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b7be0:	2600      	movs	r6, #0
   b7be2:	e76f      	b.n	b7ac4 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b7be4:	9903      	ldr	r1, [sp, #12]
   b7be6:	428c      	cmp	r4, r1
   b7be8:	bf38      	it	cc
   b7bea:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b7bec:	2a2e      	cmp	r2, #46	; 0x2e
   b7bee:	d0f7      	beq.n	b7be0 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b7bf0:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b7bf2:	290f      	cmp	r1, #15
   b7bf4:	d14a      	bne.n	b7c8c <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b7bf6:	bb16      	cbnz	r6, b7c3e <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b7bf8:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b7bfc:	f43f af62 	beq.w	b7ac4 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b7c00:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b7c04:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b7c08:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b7c0a:	220d      	movs	r2, #13
   b7c0c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b7c10:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b7c14:	9a05      	ldr	r2, [sp, #20]
   b7c16:	4542      	cmp	r2, r8
   b7c18:	d9e2      	bls.n	b7be0 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b7c1a:	eba2 0208 	sub.w	r2, r2, r8
   b7c1e:	9208      	str	r2, [sp, #32]
   b7c20:	2200      	movs	r2, #0
   b7c22:	eb02 0108 	add.w	r1, r2, r8
   b7c26:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b7c28:	4618      	mov	r0, r3
   b7c2a:	b2d1      	uxtb	r1, r2
   b7c2c:	f7ff fd46 	bl	b76bc <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b7c30:	9908      	ldr	r1, [sp, #32]
   b7c32:	428a      	cmp	r2, r1
   b7c34:	d10d      	bne.n	b7c52 <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b7c36:	2800      	cmp	r0, #0
   b7c38:	bf18      	it	ne
   b7c3a:	2600      	movne	r6, #0
   b7c3c:	e742      	b.n	b7ac4 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b7c3e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b7c42:	fa5f fa8a 	uxtb.w	sl, sl
   b7c46:	4552      	cmp	r2, sl
   b7c48:	d1ca      	bne.n	b7be0 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b7c4a:	7b5a      	ldrb	r2, [r3, #13]
   b7c4c:	455a      	cmp	r2, fp
   b7c4e:	d0dc      	beq.n	b7c0a <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b7c50:	e7c6      	b.n	b7be0 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7c52:	28ff      	cmp	r0, #255	; 0xff
   b7c54:	d8c4      	bhi.n	b7be0 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b7c56:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b7c5a:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b7c5e:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7c60:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b7c62:	bf9c      	itt	ls
   b7c64:	f10e 0020 	addls.w	r0, lr, #32
   b7c68:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7c6c:	4608      	mov	r0, r1
   b7c6e:	9909      	ldr	r1, [sp, #36]	; 0x24
   b7c70:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b7c72:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b7c76:	f1bc 0f19 	cmp.w	ip, #25
   b7c7a:	bf9c      	itt	ls
   b7c7c:	3120      	addls	r1, #32
   b7c7e:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7c80:	4571      	cmp	r1, lr
   b7c82:	d1ad      	bne.n	b7be0 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b7c84:	3201      	adds	r2, #1
   b7c86:	2a0d      	cmp	r2, #13
   b7c88:	d1cb      	bne.n	b7c22 <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b7c8a:	e71b      	b.n	b7ac4 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b7c8c:	0708      	lsls	r0, r1, #28
   b7c8e:	d4a7      	bmi.n	b7be0 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b7c90:	b15e      	cbz	r6, b7caa <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b7c92:	f1ba 0f01 	cmp.w	sl, #1
   b7c96:	f47f aeec 	bne.w	b7a72 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b7c9a:	4618      	mov	r0, r3
   b7c9c:	f7ff fd22 	bl	b76e4 <_ZN7FatFile11lfnChecksumEPh>
   b7ca0:	4558      	cmp	r0, fp
   b7ca2:	f47f aee6 	bne.w	b7a72 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b7ca6:	46b1      	mov	r9, r6
   b7ca8:	e00e      	b.n	b7cc8 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b7caa:	ee18 1a10 	vmov	r1, s16
   b7cae:	220b      	movs	r2, #11
   b7cb0:	4618      	mov	r0, r3
   b7cb2:	f006 fe5a 	bl	be96a <memcmp>
   b7cb6:	2800      	cmp	r0, #0
   b7cb8:	f47f af04 	bne.w	b7ac4 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b7cbc:	f897 9000 	ldrb.w	r9, [r7]
   b7cc0:	f019 0901 	ands.w	r9, r9, #1
   b7cc4:	f47f af77 	bne.w	b7bb6 <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b7cc8:	9b06      	ldr	r3, [sp, #24]
   b7cca:	0519      	lsls	r1, r3, #20
   b7ccc:	f53f aed1 	bmi.w	b7a72 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b7cd0:	9b06      	ldr	r3, [sp, #24]
   b7cd2:	9807      	ldr	r0, [sp, #28]
   b7cd4:	f8cd 9000 	str.w	r9, [sp]
   b7cd8:	4642      	mov	r2, r8
   b7cda:	4629      	mov	r1, r5
   b7cdc:	f7ff fb24 	bl	b7328 <_ZN7FatFile15openCachedEntryEPS_tih>
   b7ce0:	e6c8      	b.n	b7a74 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b7ce2:	2100      	movs	r1, #0
   b7ce4:	4628      	mov	r0, r5
   b7ce6:	f7ff fabd 	bl	b7264 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b7cea:	b9a0      	cbnz	r0, b7d16 <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b7cec:	786b      	ldrb	r3, [r5, #1]
   b7cee:	2b00      	cmp	r3, #0
   b7cf0:	f47f aebf 	bne.w	b7a72 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b7cf4:	4628      	mov	r0, r5
   b7cf6:	f7ff f9a1 	bl	b703c <_ZN7FatFile13addDirClusterEv>
   b7cfa:	2800      	cmp	r0, #0
   b7cfc:	f43f aeb9 	beq.w	b7a72 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b7d00:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b7d02:	791b      	ldrb	r3, [r3, #4]
   b7d04:	2b01      	cmp	r3, #1
   b7d06:	f63f aefb 	bhi.w	b7b00 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b7d0a:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b7d0c:	3410      	adds	r4, #16
   b7d0e:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b7d10:	42a3      	cmp	r3, r4
   b7d12:	d8ef      	bhi.n	b7cf4 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b7d14:	e6f4      	b.n	b7b00 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b7d16:	3401      	adds	r4, #1
   b7d18:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b7d1a:	e6ed      	b.n	b7af8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b7d1c:	4639      	mov	r1, r7
   b7d1e:	4628      	mov	r0, r5
   b7d20:	f7ff fe46 	bl	b79b0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b7d24:	2800      	cmp	r0, #0
   b7d26:	f47f aeef 	bne.w	b7b08 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b7d2a:	e6a2      	b.n	b7a72 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b7d2c:	bf14      	ite	ne
   b7d2e:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b7d32:	2100      	moveq	r1, #0
   b7d34:	b289      	uxth	r1, r1
   b7d36:	e72b      	b.n	b7b90 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b7d38:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b7d3c:	bf94      	ite	ls
   b7d3e:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b7d42:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b7d46:	8091      	strh	r1, [r2, #4]
   b7d48:	e72d      	b.n	b7ba6 <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b7d4a:	4631      	mov	r1, r6
   b7d4c:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b7d4e:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b7d52:	f7ff fa87 	bl	b7264 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b7d56:	4604      	mov	r4, r0
   b7d58:	2800      	cmp	r0, #0
   b7d5a:	f43f ae8a 	beq.w	b7a72 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b7d5e:	2220      	movs	r2, #32
   b7d60:	4631      	mov	r1, r6
   b7d62:	f006 fe3a 	bl	be9da <memset>
  memcpy(dir->name, fname->sfn, 11);
   b7d66:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b7d6a:	6023      	str	r3, [r4, #0]
   b7d6c:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b7d70:	6063      	str	r3, [r4, #4]
   b7d72:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b7d76:	8123      	strh	r3, [r4, #8]
   b7d78:	7dfb      	ldrb	r3, [r7, #23]
   b7d7a:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b7d7c:	783b      	ldrb	r3, [r7, #0]
   b7d7e:	f003 0318 	and.w	r3, r3, #24
   b7d82:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b7d84:	4b0f      	ldr	r3, [pc, #60]	; (b7dc4 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b7d86:	681b      	ldr	r3, [r3, #0]
   b7d88:	b19b      	cbz	r3, b7db2 <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b7d8a:	f104 010e 	add.w	r1, r4, #14
   b7d8e:	f104 0010 	add.w	r0, r4, #16
   b7d92:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b7d94:	8a23      	ldrh	r3, [r4, #16]
   b7d96:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b7d98:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b7d9a:	89e3      	ldrh	r3, [r4, #14]
   b7d9c:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b7d9e:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b7da0:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b7da4:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b7da8:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b7dac:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b7db0:	e78e      	b.n	b7cd0 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b7db2:	2321      	movs	r3, #33	; 0x21
   b7db4:	7423      	strb	r3, [r4, #16]
   b7db6:	2328      	movs	r3, #40	; 0x28
   b7db8:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b7dba:	2308      	movs	r3, #8
   b7dbc:	73a6      	strb	r6, [r4, #14]
   b7dbe:	73e3      	strb	r3, [r4, #15]
   b7dc0:	e7e8      	b.n	b7d94 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b7dc2:	bf00      	nop
   b7dc4:	2003e63c 	.word	0x2003e63c

000b7dc8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7dc8:	b513      	push	{r0, r1, r4, lr}
   b7dca:	4604      	mov	r4, r0
    }
   b7dcc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7dce:	b159      	cbz	r1, b7de8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7dd0:	9101      	str	r1, [sp, #4]
   b7dd2:	f006 feb6 	bl	beb42 <strlen>
   b7dd6:	6823      	ldr	r3, [r4, #0]
   b7dd8:	9901      	ldr	r1, [sp, #4]
   b7dda:	68db      	ldr	r3, [r3, #12]
   b7ddc:	4602      	mov	r2, r0
   b7dde:	4620      	mov	r0, r4
    }
   b7de0:	b002      	add	sp, #8
   b7de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7de6:	4718      	bx	r3
    }
   b7de8:	b002      	add	sp, #8
   b7dea:	bd10      	pop	{r4, pc}

000b7dec <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b7dec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b7dee:	7803      	ldrb	r3, [r0, #0]
   b7df0:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b7df2:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b7df4:	d520      	bpl.n	b7e38 <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b7df6:	6843      	ldr	r3, [r0, #4]
   b7df8:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b7dfa:	f100 020c 	add.w	r2, r0, #12
   b7dfe:	6818      	ldr	r0, [r3, #0]
   b7e00:	9201      	str	r2, [sp, #4]
   b7e02:	f000 fb88 	bl	b8516 <_ZN9SdSpiCard10writeBlockEmPKh>
   b7e06:	9a01      	ldr	r2, [sp, #4]
   b7e08:	4605      	mov	r5, r0
   b7e0a:	b918      	cbnz	r0, b7e14 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b7e0c:	2500      	movs	r5, #0
}
   b7e0e:	4628      	mov	r0, r5
   b7e10:	b003      	add	sp, #12
   b7e12:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b7e14:	7823      	ldrb	r3, [r4, #0]
   b7e16:	079b      	lsls	r3, r3, #30
   b7e18:	d404      	bmi.n	b7e24 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b7e1a:	7823      	ldrb	r3, [r4, #0]
   b7e1c:	f023 0301 	bic.w	r3, r3, #1
   b7e20:	7023      	strb	r3, [r4, #0]
   b7e22:	e7f4      	b.n	b7e0e <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b7e24:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b7e28:	6919      	ldr	r1, [r3, #16]
   b7e2a:	4401      	add	r1, r0
   b7e2c:	6818      	ldr	r0, [r3, #0]
   b7e2e:	f000 fb72 	bl	b8516 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b7e32:	2800      	cmp	r0, #0
   b7e34:	d1f1      	bne.n	b7e1a <_ZN8FatCache4syncEv+0x2e>
   b7e36:	e7e9      	b.n	b7e0c <_ZN8FatCache4syncEv+0x20>
  return true;
   b7e38:	2501      	movs	r5, #1
   b7e3a:	e7e8      	b.n	b7e0e <_ZN8FatCache4syncEv+0x22>

000b7e3c <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b7e3c:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b7e3e:	6883      	ldr	r3, [r0, #8]
   b7e40:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b7e42:	4604      	mov	r4, r0
   b7e44:	460e      	mov	r6, r1
   b7e46:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b7e48:	d009      	beq.n	b7e5e <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b7e4a:	f7ff ffcf 	bl	b7dec <_ZN8FatCache4syncEv>
   b7e4e:	b908      	cbnz	r0, b7e54 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b7e50:	2000      	movs	r0, #0
}
   b7e52:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b7e54:	076b      	lsls	r3, r5, #29
   b7e56:	d50a      	bpl.n	b7e6e <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b7e58:	2300      	movs	r3, #0
   b7e5a:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b7e5c:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b7e5e:	7822      	ldrb	r2, [r4, #0]
   b7e60:	f005 0503 	and.w	r5, r5, #3
   b7e64:	4620      	mov	r0, r4
   b7e66:	4315      	orrs	r5, r2
   b7e68:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b7e6c:	e7f1      	b.n	b7e52 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b7e6e:	6863      	ldr	r3, [r4, #4]
   b7e70:	f104 020c 	add.w	r2, r4, #12
   b7e74:	6818      	ldr	r0, [r3, #0]
   b7e76:	4631      	mov	r1, r6
   b7e78:	f000 fac4 	bl	b8404 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b7e7c:	2800      	cmp	r0, #0
   b7e7e:	d1eb      	bne.n	b7e58 <_ZN8FatCache4readEmh+0x1c>
   b7e80:	e7e6      	b.n	b7e50 <_ZN8FatCache4readEmh+0x14>

000b7e82 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b7e82:	7983      	ldrb	r3, [r0, #6]
   b7e84:	6940      	ldr	r0, [r0, #20]
   b7e86:	3902      	subs	r1, #2
   b7e88:	4099      	lsls	r1, r3
}
   b7e8a:	4408      	add	r0, r1
   b7e8c:	4770      	bx	lr

000b7e8e <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7e8e:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b7e90:	b570      	push	{r4, r5, r6, lr}
   b7e92:	4605      	mov	r5, r0
   b7e94:	460c      	mov	r4, r1
   b7e96:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7e98:	d802      	bhi.n	b7ea0 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b7e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b7e9e:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7ea0:	69c3      	ldr	r3, [r0, #28]
   b7ea2:	428b      	cmp	r3, r1
   b7ea4:	d3f9      	bcc.n	b7e9a <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b7ea6:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7ea8:	2b20      	cmp	r3, #32
   b7eaa:	d116      	bne.n	b7eda <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b7eac:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7eae:	2202      	movs	r2, #2
   b7eb0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7eb4:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7eb8:	f7ff ffc0 	bl	b7e3c <_ZN8FatCache4readEmh>
    if (!pc) {
   b7ebc:	2800      	cmp	r0, #0
   b7ebe:	d0ec      	beq.n	b7e9a <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b7ec0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7ec4:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b7ec8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b7ecc:	69ea      	ldr	r2, [r5, #28]
   b7ece:	429a      	cmp	r2, r3
  *value = next;
   b7ed0:	bf26      	itte	cs
   b7ed2:	6033      	strcs	r3, [r6, #0]
  return 1;
   b7ed4:	2001      	movcs	r0, #1
    return 0;
   b7ed6:	2000      	movcc	r0, #0
   b7ed8:	e7e1      	b.n	b7e9e <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b7eda:	2b10      	cmp	r3, #16
   b7edc:	d1dd      	bne.n	b7e9a <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7ede:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7ee2:	6981      	ldr	r1, [r0, #24]
   b7ee4:	2202      	movs	r2, #2
   b7ee6:	4419      	add	r1, r3
   b7ee8:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7eec:	f7ff ffa6 	bl	b7e3c <_ZN8FatCache4readEmh>
    if (!pc) {
   b7ef0:	2800      	cmp	r0, #0
   b7ef2:	d0d2      	beq.n	b7e9a <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b7ef4:	b2e4      	uxtb	r4, r4
   b7ef6:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b7efa:	e7e7      	b.n	b7ecc <_ZN9FatVolume6fatGetEmPm+0x3e>

000b7efc <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7efc:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b7efe:	b538      	push	{r3, r4, r5, lr}
   b7f00:	460c      	mov	r4, r1
   b7f02:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7f04:	d801      	bhi.n	b7f0a <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b7f06:	2000      	movs	r0, #0
}
   b7f08:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7f0a:	69c3      	ldr	r3, [r0, #28]
   b7f0c:	428b      	cmp	r3, r1
   b7f0e:	d3fa      	bcc.n	b7f06 <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b7f10:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7f12:	2b20      	cmp	r3, #32
   b7f14:	d10f      	bne.n	b7f36 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b7f16:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7f18:	2203      	movs	r2, #3
   b7f1a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7f1e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7f22:	f7ff ff8b 	bl	b7e3c <_ZN8FatCache4readEmh>
    if (!pc) {
   b7f26:	2800      	cmp	r0, #0
   b7f28:	d0ed      	beq.n	b7f06 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b7f2a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7f2e:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b7f32:	2001      	movs	r0, #1
   b7f34:	e7e8      	b.n	b7f08 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b7f36:	2b10      	cmp	r3, #16
   b7f38:	d1e5      	bne.n	b7f06 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7f3a:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7f3e:	6981      	ldr	r1, [r0, #24]
   b7f40:	2203      	movs	r2, #3
   b7f42:	4419      	add	r1, r3
   b7f44:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7f48:	f7ff ff78 	bl	b7e3c <_ZN8FatCache4readEmh>
    if (!pc) {
   b7f4c:	2800      	cmp	r0, #0
   b7f4e:	d0da      	beq.n	b7f06 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b7f50:	b2e4      	uxtb	r4, r4
   b7f52:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b7f56:	e7ec      	b.n	b7f32 <_ZN9FatVolume6fatPutEmm+0x36>

000b7f58 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b7f58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b7f5c:	68c4      	ldr	r4, [r0, #12]
   b7f5e:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b7f60:	4605      	mov	r5, r0
   b7f62:	460e      	mov	r6, r1
   b7f64:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b7f66:	d301      	bcc.n	b7f6c <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b7f68:	2701      	movs	r7, #1
   b7f6a:	e001      	b.n	b7f70 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7f6c:	460c      	mov	r4, r1
    setStart = false;
   b7f6e:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b7f70:	69eb      	ldr	r3, [r5, #28]
    find++;
   b7f72:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b7f74:	42a3      	cmp	r3, r4
   b7f76:	d202      	bcs.n	b7f7e <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b7f78:	b9c7      	cbnz	r7, b7fac <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b7f7a:	68ec      	ldr	r4, [r5, #12]
   b7f7c:	e7f4      	b.n	b7f68 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b7f7e:	42a6      	cmp	r6, r4
   b7f80:	d014      	beq.n	b7fac <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b7f82:	aa01      	add	r2, sp, #4
   b7f84:	4621      	mov	r1, r4
   b7f86:	4628      	mov	r0, r5
   b7f88:	f7ff ff81 	bl	b7e8e <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7f8c:	2800      	cmp	r0, #0
   b7f8e:	db0d      	blt.n	b7fac <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b7f90:	d0ee      	beq.n	b7f70 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7f92:	9b01      	ldr	r3, [sp, #4]
   b7f94:	2b00      	cmp	r3, #0
   b7f96:	d1eb      	bne.n	b7f70 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b7f98:	b107      	cbz	r7, b7f9c <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b7f9a:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b7f9c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b7fa0:	4621      	mov	r1, r4
   b7fa2:	4628      	mov	r0, r5
   b7fa4:	f7ff ffaa 	bl	b7efc <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b7fa8:	4607      	mov	r7, r0
   b7faa:	b920      	cbnz	r0, b7fb6 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b7fac:	2700      	movs	r7, #0
}
   b7fae:	4638      	mov	r0, r7
   b7fb0:	b002      	add	sp, #8
   b7fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b7fb6:	b916      	cbnz	r6, b7fbe <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b7fb8:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b7fbc:	e7f7      	b.n	b7fae <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b7fbe:	4622      	mov	r2, r4
   b7fc0:	4631      	mov	r1, r6
   b7fc2:	4628      	mov	r0, r5
   b7fc4:	f7ff ff9a 	bl	b7efc <_ZN9FatVolume6fatPutEmm>
   b7fc8:	2800      	cmp	r0, #0
   b7fca:	d1f5      	bne.n	b7fb8 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b7fcc:	e7ee      	b.n	b7fac <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b7fce <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b7fce:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7fd0:	4605      	mov	r5, r0
   b7fd2:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b7fd4:	aa01      	add	r2, sp, #4
   b7fd6:	4621      	mov	r1, r4
   b7fd8:	4628      	mov	r0, r5
   b7fda:	f7ff ff58 	bl	b7e8e <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7fde:	1e06      	subs	r6, r0, #0
   b7fe0:	db10      	blt.n	b8004 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b7fe2:	2200      	movs	r2, #0
   b7fe4:	4621      	mov	r1, r4
   b7fe6:	4628      	mov	r0, r5
   b7fe8:	f7ff ff88 	bl	b7efc <_ZN9FatVolume6fatPutEmm>
   b7fec:	b150      	cbz	r0, b8004 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b7fee:	68eb      	ldr	r3, [r5, #12]
   b7ff0:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b7ff2:	bf24      	itt	cs
   b7ff4:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b7ff8:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b7ffa:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b7ffc:	2e00      	cmp	r6, #0
   b7ffe:	d1e9      	bne.n	b7fd4 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b8000:	b002      	add	sp, #8
   b8002:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b8004:	2000      	movs	r0, #0
   b8006:	e7fb      	b.n	b8000 <_ZN9FatVolume9freeChainEm+0x32>

000b8008 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b8008:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b800a:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b800c:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b800e:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b8010:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b8014:	4604      	mov	r4, r0
  m_fatType = 0;
   b8016:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b8018:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b801c:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b801e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b8022:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b8024:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b8028:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b802c:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b8030:	460d      	mov	r5, r1
   b8032:	b1b9      	cbz	r1, b8064 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b8034:	2904      	cmp	r1, #4
   b8036:	d901      	bls.n	b803c <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b8038:	2000      	movs	r0, #0
}
   b803a:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b803c:	4611      	mov	r1, r2
   b803e:	4630      	mov	r0, r6
   b8040:	f7ff fefc 	bl	b7e3c <_ZN8FatCache4readEmh>
    if (!pc) {
   b8044:	2800      	cmp	r0, #0
   b8046:	d0f7      	beq.n	b8038 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b8048:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b804c:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b8050:	065b      	lsls	r3, r3, #25
   b8052:	d1f1      	bne.n	b8038 <_ZN9FatVolume4initEh+0x30>
   b8054:	f105 011b 	add.w	r1, r5, #27
   b8058:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b805c:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b8060:	2d00      	cmp	r5, #0
   b8062:	d0e9      	beq.n	b8038 <_ZN9FatVolume4initEh+0x30>
   b8064:	2200      	movs	r2, #0
   b8066:	4629      	mov	r1, r5
   b8068:	4630      	mov	r0, r6
   b806a:	f7ff fee7 	bl	b7e3c <_ZN8FatCache4readEmh>
  if (!pc) {
   b806e:	2800      	cmp	r0, #0
   b8070:	d0e2      	beq.n	b8038 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b8072:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b8076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b807a:	d1dd      	bne.n	b8038 <_ZN9FatVolume4initEh+0x30>
   b807c:	7c03      	ldrb	r3, [r0, #16]
   b807e:	2b02      	cmp	r3, #2
   b8080:	d1da      	bne.n	b8038 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b8082:	89c3      	ldrh	r3, [r0, #14]
   b8084:	2b00      	cmp	r3, #0
   b8086:	d0d7      	beq.n	b8038 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b8088:	7b41      	ldrb	r1, [r0, #13]
   b808a:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b808c:	1e4b      	subs	r3, r1, #1
   b808e:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b8090:	2300      	movs	r3, #0
   b8092:	71a3      	strb	r3, [r4, #6]
   b8094:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b8096:	2301      	movs	r3, #1
   b8098:	4299      	cmp	r1, r3
   b809a:	d007      	beq.n	b80ac <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b809c:	3e01      	subs	r6, #1
   b809e:	d0cb      	beq.n	b8038 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b80a0:	79a2      	ldrb	r2, [r4, #6]
   b80a2:	005b      	lsls	r3, r3, #1
   b80a4:	3201      	adds	r2, #1
   b80a6:	b2db      	uxtb	r3, r3
   b80a8:	71a2      	strb	r2, [r4, #6]
   b80aa:	e7f5      	b.n	b8098 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b80ac:	8ac1      	ldrh	r1, [r0, #22]
   b80ae:	b901      	cbnz	r1, b80b2 <_ZN9FatVolume4initEh+0xaa>
   b80b0:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b80b2:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b80b4:	89c3      	ldrh	r3, [r0, #14]
   b80b6:	442b      	add	r3, r5
   b80b8:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b80ba:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b80be:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b80c0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b80c4:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b80c6:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b80ca:	0149      	lsls	r1, r1, #5
   b80cc:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b80d0:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b80d4:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b80d6:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b80da:	b902      	cbnz	r2, b80de <_ZN9FatVolume4initEh+0xd6>
   b80dc:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b80de:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b80e0:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b80e2:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b80e4:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b80e6:	1c4b      	adds	r3, r1, #1
   b80e8:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b80ea:	f640 73f4 	movw	r3, #4084	; 0xff4
   b80ee:	4299      	cmp	r1, r3
   b80f0:	d802      	bhi.n	b80f8 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b80f2:	230c      	movs	r3, #12
   b80f4:	71e3      	strb	r3, [r4, #7]
   b80f6:	e79f      	b.n	b8038 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b80f8:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b80fc:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b80fe:	bf85      	ittet	hi
   b8100:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b8102:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b8104:	2310      	movls	r3, #16
    m_fatType = 32;
   b8106:	2320      	movhi	r3, #32
   b8108:	71e3      	strb	r3, [r4, #7]
  return true;
   b810a:	2001      	movs	r0, #1
   b810c:	e795      	b.n	b803a <_ZN9FatVolume4initEh+0x32>

000b810e <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b810e:	f000 bacb 	b.w	b86a8 <_ZN14SdSpiAltDriver4sendEh>

000b8112 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b8112:	f000 baae 	b.w	b8672 <_ZN14SdSpiAltDriver7receiveEv>
	...

000b8118 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b8118:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b811a:	4e0e      	ldr	r6, [pc, #56]	; (b8154 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b811c:	460d      	mov	r5, r1
   b811e:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b8120:	f001 fc7e 	bl	b9a20 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b8124:	6833      	ldr	r3, [r6, #0]
   b8126:	1ac0      	subs	r0, r0, r3
   b8128:	4b0b      	ldr	r3, [pc, #44]	; (b8158 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b812a:	4298      	cmp	r0, r3
   b812c:	d908      	bls.n	b8140 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b812e:	f001 fc7f 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8132:	4b0a      	ldr	r3, [pc, #40]	; (b815c <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b8134:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b8136:	f001 fe5f 	bl	b9df8 <spark_process>
   b813a:	f001 fc71 	bl	b9a20 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b813e:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b8140:	f001 fc76 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b8144:	b280      	uxth	r0, r0
   b8146:	1b40      	subs	r0, r0, r5
}
   b8148:	42a0      	cmp	r0, r4
   b814a:	bfd4      	ite	le
   b814c:	2000      	movle	r0, #0
   b814e:	2001      	movgt	r0, #1
   b8150:	bd70      	pop	{r4, r5, r6, pc}
   b8152:	bf00      	nop
   b8154:	2003e644 	.word	0x2003e644
   b8158:	000186a0 	.word	0x000186a0
   b815c:	2003e728 	.word	0x2003e728

000b8160 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b8160:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b8162:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b8164:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b8166:	b94d      	cbnz	r5, b817c <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b8168:	6840      	ldr	r0, [r0, #4]
   b816a:	f000 fa6b 	bl	b8644 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b816e:	6863      	ldr	r3, [r4, #4]
   b8170:	4629      	mov	r1, r5
   b8172:	7d18      	ldrb	r0, [r3, #20]
   b8174:	f005 fc8f 	bl	bda96 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b8178:	2301      	movs	r3, #1
   b817a:	7223      	strb	r3, [r4, #8]
  }
}
   b817c:	bd38      	pop	{r3, r4, r5, pc}

000b817e <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b817e:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b8180:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b8182:	4604      	mov	r4, r0
  if (m_spiActive) {
   b8184:	b16b      	cbz	r3, b81a2 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b8186:	6843      	ldr	r3, [r0, #4]
   b8188:	2101      	movs	r1, #1
   b818a:	7d18      	ldrb	r0, [r3, #20]
   b818c:	f005 fc83 	bl	bda96 <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b8190:	6860      	ldr	r0, [r4, #4]
   b8192:	21ff      	movs	r1, #255	; 0xff
   b8194:	f7ff ffbb 	bl	b810e <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b8198:	6860      	ldr	r0, [r4, #4]
   b819a:	f000 fa67 	bl	b866c <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b819e:	2300      	movs	r3, #0
   b81a0:	7223      	strb	r3, [r4, #8]
  }
}
   b81a2:	bd10      	pop	{r4, pc}

000b81a4 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b81a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b81a6:	4604      	mov	r4, r0
   b81a8:	460d      	mov	r5, r1
   b81aa:	4616      	mov	r6, r2
   b81ac:	f001 fc40 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b81b0:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b81b2:	6860      	ldr	r0, [r4, #4]
   b81b4:	f7ff ffad 	bl	b8112 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b81b8:	28ff      	cmp	r0, #255	; 0xff
   b81ba:	7260      	strb	r0, [r4, #9]
   b81bc:	d10e      	bne.n	b81dc <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b81be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b81c2:	4639      	mov	r1, r7
   b81c4:	4620      	mov	r0, r4
   b81c6:	f7ff ffa7 	bl	b8118 <_ZN9SdSpiCard10isTimedOutEtt>
   b81ca:	2800      	cmp	r0, #0
   b81cc:	d0f1      	beq.n	b81b2 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b81ce:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b81d0:	4620      	mov	r0, r4
   b81d2:	7023      	strb	r3, [r4, #0]
   b81d4:	f7ff ffd3 	bl	b817e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b81d8:	2000      	movs	r0, #0
}
   b81da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b81dc:	28fe      	cmp	r0, #254	; 0xfe
   b81de:	d001      	beq.n	b81e4 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b81e0:	2350      	movs	r3, #80	; 0x50
   b81e2:	e7f5      	b.n	b81d0 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b81e4:	6860      	ldr	r0, [r4, #4]
   b81e6:	4632      	mov	r2, r6
   b81e8:	4629      	mov	r1, r5
   b81ea:	f000 fa47 	bl	b867c <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b81ee:	7260      	strb	r0, [r4, #9]
   b81f0:	b108      	cbz	r0, b81f6 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b81f2:	2360      	movs	r3, #96	; 0x60
   b81f4:	e7ec      	b.n	b81d0 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b81f6:	6860      	ldr	r0, [r4, #4]
   b81f8:	f7ff ff8b 	bl	b8112 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b81fc:	6860      	ldr	r0, [r4, #4]
   b81fe:	f7ff ff88 	bl	b8112 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b8202:	2001      	movs	r0, #1
   b8204:	e7e9      	b.n	b81da <_ZN9SdSpiCard8readDataEPhj+0x36>

000b8206 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b8206:	b570      	push	{r4, r5, r6, lr}
   b8208:	4604      	mov	r4, r0
   b820a:	460e      	mov	r6, r1
   b820c:	f001 fc10 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
   b8210:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b8212:	4632      	mov	r2, r6
   b8214:	4629      	mov	r1, r5
   b8216:	4620      	mov	r0, r4
   b8218:	f7ff ff7e 	bl	b8118 <_ZN9SdSpiCard10isTimedOutEtt>
   b821c:	b930      	cbnz	r0, b822c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b821e:	6860      	ldr	r0, [r4, #4]
   b8220:	f7ff ff77 	bl	b8112 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b8224:	28ff      	cmp	r0, #255	; 0xff
   b8226:	d1f4      	bne.n	b8212 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b8228:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b822a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b822c:	2000      	movs	r0, #0
   b822e:	e7fc      	b.n	b822a <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b8230 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b8230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b8232:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b8234:	9201      	str	r2, [sp, #4]
   b8236:	4604      	mov	r4, r0
   b8238:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b823a:	b90b      	cbnz	r3, b8240 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b823c:	f7ff ff90 	bl	b8160 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b8240:	b125      	cbz	r5, b824c <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b8242:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b8246:	4620      	mov	r0, r4
   b8248:	f7ff ffdd 	bl	b8206 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b824c:	6860      	ldr	r0, [r4, #4]
   b824e:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b8252:	f7ff ff5c 	bl	b810e <_ZN9SdSpiCard7spiSendEh.isra.0>
   b8256:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b8258:	af01      	add	r7, sp, #4
   b825a:	5db9      	ldrb	r1, [r7, r6]
   b825c:	6860      	ldr	r0, [r4, #4]
   b825e:	f7ff ff56 	bl	b810e <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b8262:	3e01      	subs	r6, #1
   b8264:	d2f9      	bcs.n	b825a <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b8266:	2d00      	cmp	r5, #0
   b8268:	6860      	ldr	r0, [r4, #4]
   b826a:	bf0c      	ite	eq
   b826c:	2195      	moveq	r1, #149	; 0x95
   b826e:	2187      	movne	r1, #135	; 0x87
   b8270:	f7ff ff4d 	bl	b810e <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b8274:	6860      	ldr	r0, [r4, #4]
   b8276:	f7ff ff4c 	bl	b8112 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b827a:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b827c:	6860      	ldr	r0, [r4, #4]
   b827e:	f7ff ff48 	bl	b8112 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b8282:	0603      	lsls	r3, r0, #24
   b8284:	7260      	strb	r0, [r4, #9]
   b8286:	d503      	bpl.n	b8290 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b8288:	3d01      	subs	r5, #1
   b828a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b828e:	d1f5      	bne.n	b827c <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b8290:	b003      	add	sp, #12
   b8292:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8294 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b8294:	b570      	push	{r4, r5, r6, lr}
   b8296:	4604      	mov	r4, r0
   b8298:	460d      	mov	r5, r1
   b829a:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b829c:	2137      	movs	r1, #55	; 0x37
   b829e:	2200      	movs	r2, #0
   b82a0:	f7ff ffc6 	bl	b8230 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b82a4:	4632      	mov	r2, r6
   b82a6:	4629      	mov	r1, r5
   b82a8:	4620      	mov	r0, r4
  }
   b82aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b82ae:	f7ff bfbf 	b.w	b8230 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b82b4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b82b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b82b8:	2500      	movs	r5, #0
   b82ba:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b82bc:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b82be:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b82c0:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b82c2:	4604      	mov	r4, r0
   b82c4:	4690      	mov	r8, r2
   b82c6:	461e      	mov	r6, r3
   b82c8:	f001 fbb2 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b82cc:	4641      	mov	r1, r8
   b82ce:	4607      	mov	r7, r0
   b82d0:	6860      	ldr	r0, [r4, #4]
   b82d2:	f000 f9bb 	bl	b864c <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b82d6:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b82d8:	4a49      	ldr	r2, [pc, #292]	; (b8400 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b82da:	721d      	strb	r5, [r3, #8]
   b82dc:	2501      	movs	r5, #1
   b82de:	60da      	str	r2, [r3, #12]
   b82e0:	821d      	strh	r5, [r3, #16]
  spiStart();
   b82e2:	4620      	mov	r0, r4
   b82e4:	f7ff ff3c 	bl	b8160 <_ZN9SdSpiCard8spiStartEv>
   b82e8:	6863      	ldr	r3, [r4, #4]
   b82ea:	4629      	mov	r1, r5
   b82ec:	7d18      	ldrb	r0, [r3, #20]
   b82ee:	f005 fbd2 	bl	bda96 <digitalWrite>
   b82f2:	250a      	movs	r5, #10
    spiSend(0XFF);
   b82f4:	6860      	ldr	r0, [r4, #4]
   b82f6:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b82f8:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b82fa:	f7ff ff08 	bl	b810e <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b82fe:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b8302:	d1f7      	bne.n	b82f4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b8304:	6863      	ldr	r3, [r4, #4]
   b8306:	4629      	mov	r1, r5
   b8308:	7d18      	ldrb	r0, [r3, #20]
   b830a:	f005 fbc4 	bl	bda96 <digitalWrite>
  }
   b830e:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b8310:	2200      	movs	r2, #0
   b8312:	4611      	mov	r1, r2
   b8314:	4620      	mov	r0, r4
   b8316:	f7ff ff8b 	bl	b8230 <_ZN9SdSpiCard11cardCommandEhm>
   b831a:	2801      	cmp	r0, #1
   b831c:	4680      	mov	r8, r0
   b831e:	d018      	beq.n	b8352 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b8320:	3d01      	subs	r5, #1
   b8322:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b8326:	d107      	bne.n	b8338 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b8328:	2320      	movs	r3, #32
  spiStop();
   b832a:	4620      	mov	r0, r4
   b832c:	7023      	strb	r3, [r4, #0]
   b832e:	f7ff ff26 	bl	b817e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8332:	2000      	movs	r0, #0
}
   b8334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b8338:	6860      	ldr	r0, [r4, #4]
   b833a:	21fd      	movs	r1, #253	; 0xfd
   b833c:	f7ff fee7 	bl	b810e <_ZN9SdSpiCard7spiSendEh.isra.0>
   b8340:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b8344:	6860      	ldr	r0, [r4, #4]
   b8346:	f7ff fee4 	bl	b8112 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b834a:	f1b8 0801 	subs.w	r8, r8, #1
   b834e:	d1f9      	bne.n	b8344 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b8350:	e7de      	b.n	b8310 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b8352:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b8356:	2108      	movs	r1, #8
   b8358:	4620      	mov	r0, r4
   b835a:	f7ff ff69 	bl	b8230 <_ZN9SdSpiCard11cardCommandEhm>
   b835e:	2805      	cmp	r0, #5
   b8360:	d114      	bne.n	b838c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b8362:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b8366:	2500      	movs	r5, #0
   b8368:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b836a:	462a      	mov	r2, r5
   b836c:	2129      	movs	r1, #41	; 0x29
   b836e:	4620      	mov	r0, r4
   b8370:	f7ff ff90 	bl	b8294 <_ZN9SdSpiCard8cardAcmdEhm>
   b8374:	4602      	mov	r2, r0
   b8376:	b1d8      	cbz	r0, b83b0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b8378:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b837c:	4639      	mov	r1, r7
   b837e:	4620      	mov	r0, r4
   b8380:	f7ff feca 	bl	b8118 <_ZN9SdSpiCard10isTimedOutEtt>
   b8384:	2800      	cmp	r0, #0
   b8386:	d0f0      	beq.n	b836a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b8388:	2343      	movs	r3, #67	; 0x43
   b838a:	e7ce      	b.n	b832a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b838c:	2504      	movs	r5, #4
      m_status = spiReceive();
   b838e:	6860      	ldr	r0, [r4, #4]
   b8390:	f7ff febf 	bl	b8112 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b8394:	3d01      	subs	r5, #1
   b8396:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b839a:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b839c:	d1f7      	bne.n	b838e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b839e:	28aa      	cmp	r0, #170	; 0xaa
   b83a0:	d104      	bne.n	b83ac <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b83a2:	2302      	movs	r3, #2
   b83a4:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b83a6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b83aa:	e7dd      	b.n	b8368 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b83ac:	2325      	movs	r3, #37	; 0x25
   b83ae:	e7bc      	b.n	b832a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b83b0:	7aa3      	ldrb	r3, [r4, #10]
   b83b2:	2b02      	cmp	r3, #2
   b83b4:	d118      	bne.n	b83e8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b83b6:	213a      	movs	r1, #58	; 0x3a
   b83b8:	4620      	mov	r0, r4
   b83ba:	f7ff ff39 	bl	b8230 <_ZN9SdSpiCard11cardCommandEhm>
   b83be:	b108      	cbz	r0, b83c4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b83c0:	2337      	movs	r3, #55	; 0x37
   b83c2:	e7b2      	b.n	b832a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b83c4:	6860      	ldr	r0, [r4, #4]
   b83c6:	f7ff fea4 	bl	b8112 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b83ca:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b83ce:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b83d0:	bf04      	itt	eq
   b83d2:	2303      	moveq	r3, #3
   b83d4:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b83d6:	6860      	ldr	r0, [r4, #4]
   b83d8:	f7ff fe9b 	bl	b8112 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b83dc:	6860      	ldr	r0, [r4, #4]
   b83de:	f7ff fe98 	bl	b8112 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b83e2:	6860      	ldr	r0, [r4, #4]
   b83e4:	f7ff fe95 	bl	b8112 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b83e8:	4620      	mov	r0, r4
   b83ea:	f7ff fec8 	bl	b817e <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b83ee:	6863      	ldr	r3, [r4, #4]
   b83f0:	7930      	ldrb	r0, [r6, #4]
   b83f2:	68b1      	ldr	r1, [r6, #8]
   b83f4:	89b2      	ldrh	r2, [r6, #12]
   b83f6:	821a      	strh	r2, [r3, #16]
   b83f8:	7218      	strb	r0, [r3, #8]
   b83fa:	60d9      	str	r1, [r3, #12]
  return true;
   b83fc:	2001      	movs	r0, #1
   b83fe:	e799      	b.n	b8334 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b8400:	0003d090 	.word	0x0003d090

000b8404 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b8404:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b8406:	7a83      	ldrb	r3, [r0, #10]
   b8408:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b840a:	bf18      	it	ne
   b840c:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b840e:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b8410:	460a      	mov	r2, r1
   b8412:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b8414:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b8416:	f7ff ff0b 	bl	b8230 <_ZN9SdSpiCard11cardCommandEhm>
   b841a:	b130      	cbz	r0, b842a <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b841c:	2330      	movs	r3, #48	; 0x30
   b841e:	7023      	strb	r3, [r4, #0]
  spiStop();
   b8420:	4620      	mov	r0, r4
   b8422:	f7ff feac 	bl	b817e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8426:	2500      	movs	r5, #0
   b8428:	e00b      	b.n	b8442 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b842a:	4629      	mov	r1, r5
   b842c:	f44f 7200 	mov.w	r2, #512	; 0x200
   b8430:	4620      	mov	r0, r4
   b8432:	f7ff feb7 	bl	b81a4 <_ZN9SdSpiCard8readDataEPhj>
   b8436:	4605      	mov	r5, r0
   b8438:	2800      	cmp	r0, #0
   b843a:	d0f1      	beq.n	b8420 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b843c:	4620      	mov	r0, r4
   b843e:	f7ff fe9e 	bl	b817e <_ZN9SdSpiCard7spiStopEv>
}
   b8442:	4628      	mov	r0, r5
   b8444:	bd38      	pop	{r3, r4, r5, pc}

000b8446 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b8446:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b8448:	7a83      	ldrb	r3, [r0, #10]
   b844a:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b844c:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b844e:	bf18      	it	ne
   b8450:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b8452:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b8454:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b8456:	f7ff feeb 	bl	b8230 <_ZN9SdSpiCard11cardCommandEhm>
   b845a:	b130      	cbz	r0, b846a <_ZN9SdSpiCard9readStartEm+0x24>
   b845c:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b845e:	4620      	mov	r0, r4
   b8460:	7023      	strb	r3, [r4, #0]
   b8462:	f7ff fe8c 	bl	b817e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8466:	2000      	movs	r0, #0
}
   b8468:	bd10      	pop	{r4, pc}
  return true;
   b846a:	2001      	movs	r0, #1
   b846c:	e7fc      	b.n	b8468 <_ZN9SdSpiCard9readStartEm+0x22>

000b846e <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b846e:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b8470:	2200      	movs	r2, #0
   b8472:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b8474:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b8476:	f7ff fedb 	bl	b8230 <_ZN9SdSpiCard11cardCommandEhm>
   b847a:	b130      	cbz	r0, b848a <_ZN9SdSpiCard8readStopEv+0x1c>
   b847c:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b847e:	4620      	mov	r0, r4
   b8480:	7023      	strb	r3, [r4, #0]
   b8482:	f7ff fe7c 	bl	b817e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8486:	2000      	movs	r0, #0
}
   b8488:	bd10      	pop	{r4, pc}
  spiStop();
   b848a:	4620      	mov	r0, r4
   b848c:	f7ff fe77 	bl	b817e <_ZN9SdSpiCard7spiStopEv>
  return true;
   b8490:	2001      	movs	r0, #1
   b8492:	e7f9      	b.n	b8488 <_ZN9SdSpiCard8readStopEv+0x1a>

000b8494 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b8494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8496:	4604      	mov	r4, r0
   b8498:	4616      	mov	r6, r2
   b849a:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b849c:	f7ff ffd3 	bl	b8446 <_ZN9SdSpiCard9readStartEm>
   b84a0:	b168      	cbz	r0, b84be <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b84a2:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b84a4:	b2ab      	uxth	r3, r5
   b84a6:	429f      	cmp	r7, r3
   b84a8:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b84ac:	d909      	bls.n	b84c2 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b84ae:	f44f 7200 	mov.w	r2, #512	; 0x200
   b84b2:	4620      	mov	r0, r4
   b84b4:	f7ff fe76 	bl	b81a4 <_ZN9SdSpiCard8readDataEPhj>
   b84b8:	3501      	adds	r5, #1
   b84ba:	2800      	cmp	r0, #0
   b84bc:	d1f2      	bne.n	b84a4 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b84be:	2000      	movs	r0, #0
   b84c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b84c2:	4620      	mov	r0, r4
}
   b84c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b84c8:	f7ff bfd1 	b.w	b846e <_ZN9SdSpiCard8readStopEv>

000b84cc <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b84cc:	b538      	push	{r3, r4, r5, lr}
   b84ce:	4604      	mov	r4, r0
   b84d0:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b84d2:	6840      	ldr	r0, [r0, #4]
   b84d4:	f7ff fe1b 	bl	b810e <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b84d8:	f44f 7200 	mov.w	r2, #512	; 0x200
   b84dc:	6860      	ldr	r0, [r4, #4]
   b84de:	4629      	mov	r1, r5
   b84e0:	f000 f8e6 	bl	b86b0 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b84e4:	6860      	ldr	r0, [r4, #4]
   b84e6:	21ff      	movs	r1, #255	; 0xff
   b84e8:	f7ff fe11 	bl	b810e <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b84ec:	6860      	ldr	r0, [r4, #4]
   b84ee:	21ff      	movs	r1, #255	; 0xff
   b84f0:	f7ff fe0d 	bl	b810e <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b84f4:	6860      	ldr	r0, [r4, #4]
   b84f6:	f7ff fe0c 	bl	b8112 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b84fa:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b84fc:	f000 001f 	and.w	r0, r0, #31
   b8500:	2805      	cmp	r0, #5
   b8502:	d006      	beq.n	b8512 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b8504:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b8506:	4620      	mov	r0, r4
   b8508:	7023      	strb	r3, [r4, #0]
   b850a:	f7ff fe38 	bl	b817e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b850e:	2000      	movs	r0, #0
}
   b8510:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b8512:	2001      	movs	r0, #1
   b8514:	e7fc      	b.n	b8510 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b8516 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b8516:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b8518:	7a83      	ldrb	r3, [r0, #10]
   b851a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b851c:	bf18      	it	ne
   b851e:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b8520:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b8522:	460a      	mov	r2, r1
   b8524:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b8526:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b8528:	f7ff fe82 	bl	b8230 <_ZN9SdSpiCard11cardCommandEhm>
   b852c:	4606      	mov	r6, r0
   b852e:	b130      	cbz	r0, b853e <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b8530:	2332      	movs	r3, #50	; 0x32
   b8532:	7023      	strb	r3, [r4, #0]
  spiStop();
   b8534:	4620      	mov	r0, r4
   b8536:	f7ff fe22 	bl	b817e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b853a:	2500      	movs	r5, #0
   b853c:	e01f      	b.n	b857e <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b853e:	462a      	mov	r2, r5
   b8540:	21fe      	movs	r1, #254	; 0xfe
   b8542:	4620      	mov	r0, r4
   b8544:	f7ff ffc2 	bl	b84cc <_ZN9SdSpiCard9writeDataEhPKh>
   b8548:	2800      	cmp	r0, #0
   b854a:	d0f3      	beq.n	b8534 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b854c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b8550:	4620      	mov	r0, r4
   b8552:	f7ff fe58 	bl	b8206 <_ZN9SdSpiCard11waitNotBusyEt>
   b8556:	4605      	mov	r5, r0
   b8558:	b908      	cbnz	r0, b855e <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b855a:	235a      	movs	r3, #90	; 0x5a
   b855c:	e7e9      	b.n	b8532 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b855e:	4632      	mov	r2, r6
   b8560:	210d      	movs	r1, #13
   b8562:	4620      	mov	r0, r4
   b8564:	f7ff fe64 	bl	b8230 <_ZN9SdSpiCard11cardCommandEhm>
   b8568:	b108      	cbz	r0, b856e <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b856a:	2329      	movs	r3, #41	; 0x29
   b856c:	e7e1      	b.n	b8532 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b856e:	6860      	ldr	r0, [r4, #4]
   b8570:	f7ff fdcf 	bl	b8112 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b8574:	2800      	cmp	r0, #0
   b8576:	d1f8      	bne.n	b856a <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b8578:	4620      	mov	r0, r4
   b857a:	f7ff fe00 	bl	b817e <_ZN9SdSpiCard7spiStopEv>
}
   b857e:	4628      	mov	r0, r5
   b8580:	bd70      	pop	{r4, r5, r6, pc}

000b8582 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b8582:	b513      	push	{r0, r1, r4, lr}
   b8584:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b8586:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b858a:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b858c:	f7ff fe3b 	bl	b8206 <_ZN9SdSpiCard11waitNotBusyEt>
   b8590:	9a01      	ldr	r2, [sp, #4]
   b8592:	b930      	cbnz	r0, b85a2 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b8594:	235b      	movs	r3, #91	; 0x5b
   b8596:	7023      	strb	r3, [r4, #0]
  spiStop();
   b8598:	4620      	mov	r0, r4
   b859a:	f7ff fdf0 	bl	b817e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b859e:	2000      	movs	r0, #0
   b85a0:	e005      	b.n	b85ae <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b85a2:	21fc      	movs	r1, #252	; 0xfc
   b85a4:	4620      	mov	r0, r4
   b85a6:	f7ff ff91 	bl	b84cc <_ZN9SdSpiCard9writeDataEhPKh>
   b85aa:	2800      	cmp	r0, #0
   b85ac:	d0f4      	beq.n	b8598 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b85ae:	b002      	add	sp, #8
   b85b0:	bd10      	pop	{r4, pc}

000b85b2 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b85b2:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b85b4:	7a83      	ldrb	r3, [r0, #10]
   b85b6:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b85b8:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b85ba:	bf18      	it	ne
   b85bc:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b85be:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b85c0:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b85c2:	f7ff fe35 	bl	b8230 <_ZN9SdSpiCard11cardCommandEhm>
   b85c6:	b130      	cbz	r0, b85d6 <_ZN9SdSpiCard10writeStartEm+0x24>
   b85c8:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b85ca:	4620      	mov	r0, r4
   b85cc:	7023      	strb	r3, [r4, #0]
   b85ce:	f7ff fdd6 	bl	b817e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b85d2:	2000      	movs	r0, #0
}
   b85d4:	bd10      	pop	{r4, pc}
  return true;
   b85d6:	2001      	movs	r0, #1
   b85d8:	e7fc      	b.n	b85d4 <_ZN9SdSpiCard10writeStartEm+0x22>

000b85da <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b85da:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b85dc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b85e0:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b85e2:	f7ff fe10 	bl	b8206 <_ZN9SdSpiCard11waitNotBusyEt>
   b85e6:	4605      	mov	r5, r0
   b85e8:	b930      	cbnz	r0, b85f8 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b85ea:	2356      	movs	r3, #86	; 0x56
   b85ec:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b85ee:	4620      	mov	r0, r4
   b85f0:	f7ff fdc5 	bl	b817e <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b85f4:	4628      	mov	r0, r5
   b85f6:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b85f8:	6860      	ldr	r0, [r4, #4]
   b85fa:	21fd      	movs	r1, #253	; 0xfd
   b85fc:	f7ff fd87 	bl	b810e <_ZN9SdSpiCard7spiSendEh.isra.0>
   b8600:	e7f5      	b.n	b85ee <_ZN9SdSpiCard9writeStopEv+0x14>

000b8602 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b8602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8604:	4604      	mov	r4, r0
   b8606:	4616      	mov	r6, r2
   b8608:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b860a:	f7ff ffd2 	bl	b85b2 <_ZN9SdSpiCard10writeStartEm>
   b860e:	b170      	cbz	r0, b862e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b8610:	2500      	movs	r5, #0
   b8612:	42bd      	cmp	r5, r7
   b8614:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b8618:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b861a:	d004      	beq.n	b8626 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b861c:	f7ff ffb1 	bl	b8582 <_ZN9SdSpiCard9writeDataEPKh>
   b8620:	b128      	cbz	r0, b862e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b8622:	3501      	adds	r5, #1
   b8624:	e7f5      	b.n	b8612 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b8626:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b862a:	f7ff bfd6 	b.w	b85da <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b862e:	4620      	mov	r0, r4
   b8630:	f7ff fda5 	bl	b817e <_ZN9SdSpiCard7spiStopEv>
}
   b8634:	2000      	movs	r0, #0
   b8636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8638 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b8638:	4b01      	ldr	r3, [pc, #4]	; (b8640 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b863a:	2201      	movs	r2, #1
   b863c:	701a      	strb	r2, [r3, #0]
}
   b863e:	4770      	bx	lr
   b8640:	2003e648 	.word	0x2003e648

000b8644 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b8644:	1d01      	adds	r1, r0, #4
   b8646:	6800      	ldr	r0, [r0, #0]
   b8648:	f004 bdc8 	b.w	bd1dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b864c <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b864c:	b510      	push	{r4, lr}
   b864e:	4604      	mov	r4, r0
  m_csPin = csPin;
   b8650:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b8652:	6800      	ldr	r0, [r0, #0]
   b8654:	f004 fd94 	bl	bd180 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b8658:	7d20      	ldrb	r0, [r4, #20]
   b865a:	2101      	movs	r1, #1
   b865c:	f005 fa0a 	bl	bda74 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b8660:	7d20      	ldrb	r0, [r4, #20]
   b8662:	2101      	movs	r1, #1
}
   b8664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b8668:	f005 ba15 	b.w	bda96 <digitalWrite>

000b866c <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b866c:	6800      	ldr	r0, [r0, #0]
   b866e:	f004 bd9b 	b.w	bd1a8 <_ZN8SPIClass14endTransactionEv>

000b8672 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b8672:	6800      	ldr	r0, [r0, #0]
   b8674:	21ff      	movs	r1, #255	; 0xff
   b8676:	f004 be1f 	b.w	bd2b8 <_ZN8SPIClass8transferEh>
	...

000b867c <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b867c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b867e:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b8680:	4a07      	ldr	r2, [pc, #28]	; (b86a0 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b8682:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b8684:	2500      	movs	r5, #0
   b8686:	4c07      	ldr	r4, [pc, #28]	; (b86a4 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b8688:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b868a:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b868c:	460a      	mov	r2, r1
   b868e:	4629      	mov	r1, r5
   b8690:	f004 fe18 	bl	bd2c4 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b8694:	7823      	ldrb	r3, [r4, #0]
   b8696:	2b00      	cmp	r3, #0
   b8698:	d0fc      	beq.n	b8694 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b869a:	2000      	movs	r0, #0
   b869c:	b003      	add	sp, #12
   b869e:	bd30      	pop	{r4, r5, pc}
   b86a0:	000b8639 	.word	0x000b8639
   b86a4:	2003e648 	.word	0x2003e648

000b86a8 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b86a8:	6800      	ldr	r0, [r0, #0]
   b86aa:	f004 be05 	b.w	bd2b8 <_ZN8SPIClass8transferEh>
	...

000b86b0 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b86b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b86b2:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b86b4:	4a06      	ldr	r2, [pc, #24]	; (b86d0 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b86b6:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b86b8:	2500      	movs	r5, #0
   b86ba:	4c06      	ldr	r4, [pc, #24]	; (b86d4 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b86bc:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b86be:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b86c0:	462a      	mov	r2, r5
   b86c2:	f004 fdff 	bl	bd2c4 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b86c6:	7823      	ldrb	r3, [r4, #0]
   b86c8:	2b00      	cmp	r3, #0
   b86ca:	d0fc      	beq.n	b86c6 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b86cc:	b003      	add	sp, #12
   b86ce:	bd30      	pop	{r4, r5, pc}
   b86d0:	000b8639 	.word	0x000b8639
   b86d4:	2003e648 	.word	0x2003e648

000b86d8 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b86d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b86dc:	b085      	sub	sp, #20
   b86de:	461f      	mov	r7, r3
   b86e0:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b86e4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b86e8:	eba8 0902 	sub.w	r9, r8, r2
   b86ec:	eba7 0a01 	sub.w	sl, r7, r1
   b86f0:	f1b9 0f00 	cmp.w	r9, #0
   b86f4:	bfb8      	it	lt
   b86f6:	f1c9 0900 	rsblt	r9, r9, #0
   b86fa:	f1ba 0f00 	cmp.w	sl, #0
   b86fe:	bfb8      	it	lt
   b8700:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b8704:	45d1      	cmp	r9, sl
        uint16_t color) {
   b8706:	4683      	mov	fp, r0
   b8708:	460c      	mov	r4, r1
   b870a:	4615      	mov	r5, r2
    if (steep) {
   b870c:	dd04      	ble.n	b8718 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b870e:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b8710:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b8712:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b8714:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b8716:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b8718:	42bc      	cmp	r4, r7
   b871a:	dd05      	ble.n	b8728 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b871c:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b871e:	4645      	mov	r5, r8
   b8720:	4690      	mov	r8, r2
    if (x0 > x1) {
   b8722:	4622      	mov	r2, r4
   b8724:	463c      	mov	r4, r7
   b8726:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b8728:	1b3e      	subs	r6, r7, r4
   b872a:	b2b2      	uxth	r2, r6
   b872c:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b872e:	eba8 0205 	sub.w	r2, r8, r5
   b8732:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b8736:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b873a:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b873e:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b8742:	4545      	cmp	r5, r8
   b8744:	bfb4      	ite	lt
   b8746:	2201      	movlt	r2, #1
   b8748:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b874c:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b874e:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b8750:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b8752:	42bc      	cmp	r4, r7
   b8754:	dc1c      	bgt.n	b8790 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b8756:	f8db 2000 	ldr.w	r2, [fp]
   b875a:	9303      	str	r3, [sp, #12]
        if (steep) {
   b875c:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b875e:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b8762:	bfc7      	ittee	gt
   b8764:	4629      	movgt	r1, r5
   b8766:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b8768:	462a      	movle	r2, r5
   b876a:	4621      	movle	r1, r4
   b876c:	4658      	mov	r0, fp
   b876e:	47c0      	blx	r8
        }
        err -= dy;
   b8770:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b8772:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b8774:	1ab6      	subs	r6, r6, r2
   b8776:	b2b1      	uxth	r1, r6
   b8778:	b236      	sxth	r6, r6
        if (err < 0) {
   b877a:	2e00      	cmp	r6, #0
   b877c:	da05      	bge.n	b878a <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b877e:	9a02      	ldr	r2, [sp, #8]
   b8780:	4415      	add	r5, r2
            err += dx;
   b8782:	9a00      	ldr	r2, [sp, #0]
   b8784:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b8786:	b22d      	sxth	r5, r5
            err += dx;
   b8788:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b878a:	3401      	adds	r4, #1
   b878c:	b224      	sxth	r4, r4
   b878e:	e7e0      	b.n	b8752 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b8790:	b005      	add	sp, #20
   b8792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b8796 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b8796:	4770      	bx	lr

000b8798 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b8798:	b410      	push	{r4}
    drawPixel(x, y, color);
   b879a:	6804      	ldr	r4, [r0, #0]
   b879c:	6924      	ldr	r4, [r4, #16]
   b879e:	46a4      	mov	ip, r4
}
   b87a0:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b87a4:	4760      	bx	ip

000b87a6 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b87a6:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b87a8:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b87aa:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b87ae:	9502      	str	r5, [sp, #8]
   b87b0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b87b2:	46a4      	mov	ip, r4
}
   b87b4:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b87b6:	4760      	bx	ip

000b87b8 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b87b8:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b87ba:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b87bc:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b87c0:	9502      	str	r5, [sp, #8]
   b87c2:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b87c4:	46a4      	mov	ip, r4
}
   b87c6:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b87c8:	4760      	bx	ip

000b87ca <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b87ca:	b470      	push	{r4, r5, r6}
   b87cc:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b87d0:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b87d4:	6804      	ldr	r4, [r0, #0]
   b87d6:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b87da:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b87dc:	46a4      	mov	ip, r4
}
   b87de:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b87e0:	4760      	bx	ip

000b87e2 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b87e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b87e6:	461c      	mov	r4, r3
    startWrite();
   b87e8:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b87ea:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b87ee:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b87f0:	4605      	mov	r5, r0
   b87f2:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b87f4:	3c01      	subs	r4, #1
   b87f6:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b87f8:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b87fa:	b224      	sxth	r4, r4
    startWrite();
   b87fc:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b87fe:	682b      	ldr	r3, [r5, #0]
   b8800:	f8cd 8004 	str.w	r8, [sp, #4]
   b8804:	9400      	str	r4, [sp, #0]
   b8806:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b8808:	4628      	mov	r0, r5
   b880a:	463b      	mov	r3, r7
   b880c:	4632      	mov	r2, r6
   b880e:	4639      	mov	r1, r7
   b8810:	47a0      	blx	r4
    endWrite();
   b8812:	682b      	ldr	r3, [r5, #0]
   b8814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8816:	4628      	mov	r0, r5
}
   b8818:	b002      	add	sp, #8
   b881a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b881e:	4718      	bx	r3

000b8820 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b8820:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b8824:	461d      	mov	r5, r3
    startWrite();
   b8826:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b8828:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b882c:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b882e:	4604      	mov	r4, r0
   b8830:	4617      	mov	r7, r2
   b8832:	460e      	mov	r6, r1
    startWrite();
   b8834:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b8836:	e9cd 7800 	strd	r7, r8, [sp]
   b883a:	6822      	ldr	r2, [r4, #0]
   b883c:	1e6b      	subs	r3, r5, #1
   b883e:	4433      	add	r3, r6
   b8840:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b8842:	4620      	mov	r0, r4
   b8844:	b21b      	sxth	r3, r3
   b8846:	463a      	mov	r2, r7
   b8848:	4631      	mov	r1, r6
   b884a:	47a8      	blx	r5
    endWrite();
   b884c:	6823      	ldr	r3, [r4, #0]
   b884e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8850:	4620      	mov	r0, r4
}
   b8852:	b002      	add	sp, #8
   b8854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b8858:	4718      	bx	r3

000b885a <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b885a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b885e:	461e      	mov	r6, r3
    startWrite();
   b8860:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b8862:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b8866:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b8868:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b886c:	460c      	mov	r4, r1
   b886e:	4605      	mov	r5, r0
   b8870:	4617      	mov	r7, r2
    startWrite();
   b8872:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b8874:	4426      	add	r6, r4
   b8876:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b8878:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b887a:	da0b      	bge.n	b8894 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b887c:	f8cd 8000 	str.w	r8, [sp]
   b8880:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b8884:	4621      	mov	r1, r4
   b8886:	464b      	mov	r3, r9
   b8888:	463a      	mov	r2, r7
   b888a:	4628      	mov	r0, r5
   b888c:	3401      	adds	r4, #1
   b888e:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b8890:	b224      	sxth	r4, r4
   b8892:	e7f0      	b.n	b8876 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b8894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8896:	4628      	mov	r0, r5
}
   b8898:	b002      	add	sp, #8
   b889a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b889e:	4718      	bx	r3

000b88a0 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b88a0:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b88a2:	6802      	ldr	r2, [r0, #0]
   b88a4:	9101      	str	r1, [sp, #4]
   b88a6:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b88aa:	9100      	str	r1, [sp, #0]
   b88ac:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b88ae:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b88b2:	2200      	movs	r2, #0
   b88b4:	4611      	mov	r1, r2
   b88b6:	47a0      	blx	r4
}
   b88b8:	b002      	add	sp, #8
   b88ba:	bd10      	pop	{r4, pc}

000b88bc <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b88bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b88c0:	4299      	cmp	r1, r3
        uint16_t color) {
   b88c2:	4616      	mov	r6, r2
   b88c4:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b88c8:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b88cc:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b88ce:	4680      	mov	r8, r0
   b88d0:	460d      	mov	r5, r1
   b88d2:	461c      	mov	r4, r3
    if(x0 == x1){
   b88d4:	d113      	bne.n	b88fe <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b88d6:	42be      	cmp	r6, r7
   b88d8:	bfc8      	it	gt
   b88da:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b88dc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b88e0:	bfc4      	itt	gt
   b88e2:	463e      	movgt	r6, r7
   b88e4:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b88e6:	1c7b      	adds	r3, r7, #1
   b88e8:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b88ea:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b88ec:	b21b      	sxth	r3, r3
   b88ee:	4632      	mov	r2, r6
   b88f0:	4629      	mov	r1, r5
   b88f2:	4640      	mov	r0, r8
   b88f4:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b88f6:	b003      	add	sp, #12
   b88f8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b88fc:	4760      	bx	ip
    } else if(y0 == y1){
   b88fe:	42be      	cmp	r6, r7
   b8900:	d10a      	bne.n	b8918 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b8902:	4299      	cmp	r1, r3
   b8904:	bfc2      	ittt	gt
   b8906:	460b      	movgt	r3, r1
   b8908:	4625      	movgt	r5, r4
   b890a:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b890c:	1c63      	adds	r3, r4, #1
   b890e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b8912:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b8914:	1b5b      	subs	r3, r3, r5
   b8916:	e7e9      	b.n	b88ec <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b8918:	6953      	ldr	r3, [r2, #20]
   b891a:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b891c:	e9cd 7900 	strd	r7, r9, [sp]
   b8920:	f8d8 3000 	ldr.w	r3, [r8]
   b8924:	4640      	mov	r0, r8
   b8926:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b8928:	4632      	mov	r2, r6
   b892a:	4623      	mov	r3, r4
   b892c:	4629      	mov	r1, r5
   b892e:	47b8      	blx	r7
        endWrite();
   b8930:	f8d8 3000 	ldr.w	r3, [r8]
   b8934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8936:	4640      	mov	r0, r8
}
   b8938:	b003      	add	sp, #12
   b893a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b893e:	4718      	bx	r3

000b8940 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b8940:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b8944:	461d      	mov	r5, r3
    startWrite();
   b8946:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b8948:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b894c:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b894e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b8952:	4604      	mov	r4, r0
   b8954:	460f      	mov	r7, r1
   b8956:	4616      	mov	r6, r2
    startWrite();
   b8958:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b895a:	6823      	ldr	r3, [r4, #0]
   b895c:	f8cd 8000 	str.w	r8, [sp]
   b8960:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b8964:	4632      	mov	r2, r6
   b8966:	462b      	mov	r3, r5
   b8968:	4639      	mov	r1, r7
   b896a:	4620      	mov	r0, r4
   b896c:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b896e:	6823      	ldr	r3, [r4, #0]
   b8970:	f8cd 8000 	str.w	r8, [sp]
   b8974:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b8978:	4432      	add	r2, r6
   b897a:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b897e:	4639      	mov	r1, r7
   b8980:	462b      	mov	r3, r5
   b8982:	4620      	mov	r0, r4
   b8984:	b212      	sxth	r2, r2
   b8986:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b8988:	6823      	ldr	r3, [r4, #0]
   b898a:	f8cd 8000 	str.w	r8, [sp]
   b898e:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b8992:	4632      	mov	r2, r6
   b8994:	464b      	mov	r3, r9
   b8996:	4639      	mov	r1, r7
   b8998:	4620      	mov	r0, r4
   b899a:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b899c:	1e6b      	subs	r3, r5, #1
   b899e:	19d9      	adds	r1, r3, r7
   b89a0:	6823      	ldr	r3, [r4, #0]
   b89a2:	f8cd 8000 	str.w	r8, [sp]
   b89a6:	6a1d      	ldr	r5, [r3, #32]
   b89a8:	4620      	mov	r0, r4
   b89aa:	464b      	mov	r3, r9
   b89ac:	4632      	mov	r2, r6
   b89ae:	b209      	sxth	r1, r1
   b89b0:	47a8      	blx	r5
    endWrite();
   b89b2:	6823      	ldr	r3, [r4, #0]
   b89b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b89b6:	4620      	mov	r0, r4
}
   b89b8:	b002      	add	sp, #8
   b89ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b89be:	4718      	bx	r3

000b89c0 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b89c0:	4770      	bx	lr

000b89c2 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b89c2:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b89c6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b89ca:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b89cc:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b89ce:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b89d2:	bf59      	ittee	pl
   b89d4:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b89d6:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b89d8:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b89da:	81c3      	strhmi	r3, [r0, #14]
}
   b89dc:	4770      	bx	lr
	...

000b89e0 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b89e0:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b89e2:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b89e4:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b89e6:	4a07      	ldr	r2, [pc, #28]	; (b8a04 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b89e8:	4d07      	ldr	r5, [pc, #28]	; (b8a08 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b89ea:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b89ec:	2400      	movs	r4, #0
    _width    = WIDTH;
   b89ee:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b89f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b89f4:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b89f8:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b89fa:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b89fc:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b89fe:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b8a00:	6204      	str	r4, [r0, #32]
}
   b8a02:	bd30      	pop	{r4, r5, pc}
   b8a04:	01000101 	.word	0x01000101
   b8a08:	000c184c 	.word	0x000c184c

000b8a0c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8a10:	b089      	sub	sp, #36	; 0x24
   b8a12:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b8a16:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8a18:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b8a1c:	9304      	str	r3, [sp, #16]
   b8a1e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b8a22:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8a24:	9305      	str	r3, [sp, #20]
   b8a26:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b8a2a:	4604      	mov	r4, r0
    startWrite();
   b8a2c:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b8a2e:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b8a32:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b8a36:	bf48      	it	mi
   b8a38:	f108 020e 	addmi.w	r2, r8, #14
   b8a3c:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b8a40:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b8a42:	4635      	mov	r5, r6
   b8a44:	9b03      	ldr	r3, [sp, #12]
   b8a46:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b8a48:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b8a4c:	189a      	adds	r2, r3, r2
   b8a4e:	9b05      	ldr	r3, [sp, #20]
   b8a50:	428b      	cmp	r3, r1
   b8a52:	b212      	sxth	r2, r2
   b8a54:	dd27      	ble.n	b8aa6 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8a56:	9b04      	ldr	r3, [sp, #16]
   b8a58:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b8a5a:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8a5e:	9306      	str	r3, [sp, #24]
   b8a60:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b8a64:	4580      	cmp	r8, r0
   b8a66:	fa1f f189 	uxth.w	r1, r9
   b8a6a:	dd17      	ble.n	b8a9c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b8a6c:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8a6e:	bf05      	ittet	eq
   b8a70:	9b06      	ldreq	r3, [sp, #24]
   b8a72:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b8a74:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8a76:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b8a78:	bf18      	it	ne
   b8a7a:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b8a7c:	062b      	lsls	r3, r5, #24
   b8a7e:	d50a      	bpl.n	b8a96 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b8a80:	9b02      	ldr	r3, [sp, #8]
   b8a82:	6820      	ldr	r0, [r4, #0]
   b8a84:	9207      	str	r2, [sp, #28]
   b8a86:	4419      	add	r1, r3
   b8a88:	6983      	ldr	r3, [r0, #24]
   b8a8a:	b209      	sxth	r1, r1
   b8a8c:	461f      	mov	r7, r3
   b8a8e:	4620      	mov	r0, r4
   b8a90:	4653      	mov	r3, sl
   b8a92:	47b8      	blx	r7
   b8a94:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b8a96:	f109 0901 	add.w	r9, r9, #1
   b8a9a:	e7e1      	b.n	b8a60 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b8a9c:	9b01      	ldr	r3, [sp, #4]
   b8a9e:	3301      	adds	r3, #1
   b8aa0:	9301      	str	r3, [sp, #4]
   b8aa2:	445e      	add	r6, fp
   b8aa4:	e7ce      	b.n	b8a44 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b8aa6:	6823      	ldr	r3, [r4, #0]
   b8aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8aaa:	4620      	mov	r0, r4
}
   b8aac:	b009      	add	sp, #36	; 0x24
   b8aae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b8ab2:	4718      	bx	r3

000b8ab4 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b8ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8ab8:	ed2d 8b02 	vpush	{d8}
   b8abc:	b091      	sub	sp, #68	; 0x44
   b8abe:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b8ac0:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b8ac2:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b8ac6:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b8aca:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b8ace:	9103      	str	r1, [sp, #12]
   b8ad0:	461f      	mov	r7, r3
   b8ad2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b8ad6:	9304      	str	r3, [sp, #16]
   b8ad8:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b8ada:	2a00      	cmp	r2, #0
   b8adc:	f040 80c5 	bne.w	b8c6a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b8ae0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b8ae4:	428b      	cmp	r3, r1
   b8ae6:	f340 814c 	ble.w	b8d82 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b8aea:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b8aee:	42b3      	cmp	r3, r6
   b8af0:	f340 8147 	ble.w	b8d82 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b8af4:	2306      	movs	r3, #6
   b8af6:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b8afa:	2b00      	cmp	r3, #0
   b8afc:	f340 8141 	ble.w	b8d82 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b8b00:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b8b04:	2b00      	cmp	r3, #0
   b8b06:	f340 813c 	ble.w	b8d82 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b8b0a:	7f03      	ldrb	r3, [r0, #28]
   b8b0c:	b91b      	cbnz	r3, b8b16 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b8b0e:	2faf      	cmp	r7, #175	; 0xaf
   b8b10:	bf84      	itt	hi
   b8b12:	3701      	addhi	r7, #1
   b8b14:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b8b16:	f8db 3000 	ldr.w	r3, [fp]
   b8b1a:	4658      	mov	r0, fp
   b8b1c:	695b      	ldr	r3, [r3, #20]
   b8b1e:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b8b20:	2205      	movs	r2, #5
   b8b22:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b8b24:	2200      	movs	r2, #0
   b8b26:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b8b28:	4a98      	ldr	r2, [pc, #608]	; (b8d8c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b8b2a:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b8b2e:	18d3      	adds	r3, r2, r3
   b8b30:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b8b32:	b2b3      	uxth	r3, r6
   b8b34:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b8b36:	9a05      	ldr	r2, [sp, #20]
   b8b38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8b3a:	5c9b      	ldrb	r3, [r3, r2]
   b8b3c:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8b3e:	b2ab      	uxth	r3, r5
   b8b40:	930b      	str	r3, [sp, #44]	; 0x2c
   b8b42:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b8b46:	9308      	str	r3, [sp, #32]
   b8b48:	9b03      	ldr	r3, [sp, #12]
   b8b4a:	fb02 f905 	mul.w	r9, r2, r5
   b8b4e:	fa19 f983 	uxtah	r9, r9, r3
   b8b52:	fa0f f389 	sxth.w	r3, r9
   b8b56:	ee08 3a10 	vmov	s16, r3
   b8b5a:	2308      	movs	r3, #8
   b8b5c:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b8b5e:	9b03      	ldr	r3, [sp, #12]
   b8b60:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b8b64:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b8b68:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b8b6c:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b8b6e:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b8b72:	07d2      	lsls	r2, r2, #31
   b8b74:	d552      	bpl.n	b8c1c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b8b76:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b8b78:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b8b7c:	d13e      	bne.n	b8bfc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b8b7e:	2c01      	cmp	r4, #1
   b8b80:	d13c      	bne.n	b8bfc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b8b82:	699b      	ldr	r3, [r3, #24]
   b8b84:	9906      	ldr	r1, [sp, #24]
   b8b86:	461f      	mov	r7, r3
   b8b88:	9b04      	ldr	r3, [sp, #16]
   b8b8a:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b8b8c:	b212      	sxth	r2, r2
   b8b8e:	4651      	mov	r1, sl
   b8b90:	4658      	mov	r0, fp
   b8b92:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b8b94:	f109 0301 	add.w	r3, r9, #1
   b8b98:	fa4f f983 	sxtb.w	r9, r3
   b8b9c:	9b07      	ldr	r3, [sp, #28]
   b8b9e:	085b      	lsrs	r3, r3, #1
   b8ba0:	9307      	str	r3, [sp, #28]
   b8ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8ba4:	3b01      	subs	r3, #1
   b8ba6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b8baa:	930a      	str	r3, [sp, #40]	; 0x28
   b8bac:	d1de      	bne.n	b8b6c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b8bae:	9f05      	ldr	r7, [sp, #20]
   b8bb0:	3701      	adds	r7, #1
   b8bb2:	b27b      	sxtb	r3, r7
   b8bb4:	9305      	str	r3, [sp, #20]
   b8bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8bb8:	3b01      	subs	r3, #1
   b8bba:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b8bbe:	9309      	str	r3, [sp, #36]	; 0x24
   b8bc0:	d1b9      	bne.n	b8b36 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b8bc2:	9b04      	ldr	r3, [sp, #16]
   b8bc4:	4543      	cmp	r3, r8
   b8bc6:	d00f      	beq.n	b8be8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b8bc8:	2d01      	cmp	r5, #1
   b8bca:	f8db 3000 	ldr.w	r3, [fp]
   b8bce:	d13b      	bne.n	b8c48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b8bd0:	2c01      	cmp	r4, #1
   b8bd2:	d139      	bne.n	b8c48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b8bd4:	9908      	ldr	r1, [sp, #32]
   b8bd6:	f8cd 8000 	str.w	r8, [sp]
   b8bda:	3105      	adds	r1, #5
   b8bdc:	6a1c      	ldr	r4, [r3, #32]
   b8bde:	4632      	mov	r2, r6
   b8be0:	2308      	movs	r3, #8
   b8be2:	b209      	sxth	r1, r1
   b8be4:	4658      	mov	r0, fp
   b8be6:	47a0      	blx	r4
        endWrite();
   b8be8:	f8db 3000 	ldr.w	r3, [fp]
   b8bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8bee:	4658      	mov	r0, fp
}
   b8bf0:	b011      	add	sp, #68	; 0x44
   b8bf2:	ecbd 8b02 	vpop	{d8}
   b8bf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b8bfa:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b8bfc:	9906      	ldr	r1, [sp, #24]
   b8bfe:	fb14 f202 	smulbb	r2, r4, r2
   b8c02:	440a      	add	r2, r1
   b8c04:	9904      	ldr	r1, [sp, #16]
   b8c06:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8c08:	9400      	str	r4, [sp, #0]
   b8c0a:	69db      	ldr	r3, [r3, #28]
   b8c0c:	ee18 1a10 	vmov	r1, s16
   b8c10:	461f      	mov	r7, r3
   b8c12:	b212      	sxth	r2, r2
   b8c14:	462b      	mov	r3, r5
   b8c16:	4658      	mov	r0, fp
   b8c18:	47b8      	blx	r7
   b8c1a:	e7bb      	b.n	b8b94 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b8c1c:	9a04      	ldr	r2, [sp, #16]
   b8c1e:	4542      	cmp	r2, r8
   b8c20:	d0b8      	beq.n	b8b94 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b8c22:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b8c24:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b8c28:	d107      	bne.n	b8c3a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b8c2a:	2c01      	cmp	r4, #1
   b8c2c:	d105      	bne.n	b8c3a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b8c2e:	699b      	ldr	r3, [r3, #24]
   b8c30:	9906      	ldr	r1, [sp, #24]
   b8c32:	461f      	mov	r7, r3
   b8c34:	440a      	add	r2, r1
   b8c36:	4643      	mov	r3, r8
   b8c38:	e7a8      	b.n	b8b8c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8c3a:	9906      	ldr	r1, [sp, #24]
   b8c3c:	f8cd 8004 	str.w	r8, [sp, #4]
   b8c40:	fb14 f202 	smulbb	r2, r4, r2
   b8c44:	440a      	add	r2, r1
   b8c46:	e7df      	b.n	b8c08 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b8c48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8c4a:	f8cd 8004 	str.w	r8, [sp, #4]
   b8c4e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b8c52:	9a08      	ldr	r2, [sp, #32]
   b8c54:	00e4      	lsls	r4, r4, #3
   b8c56:	440a      	add	r2, r1
   b8c58:	4611      	mov	r1, r2
   b8c5a:	9400      	str	r4, [sp, #0]
   b8c5c:	69dc      	ldr	r4, [r3, #28]
   b8c5e:	4632      	mov	r2, r6
   b8c60:	462b      	mov	r3, r5
   b8c62:	b209      	sxth	r1, r1
   b8c64:	4658      	mov	r0, fp
   b8c66:	47a0      	blx	r4
        endWrite();
   b8c68:	e7be      	b.n	b8be8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b8c6a:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b8c6c:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b8c6e:	6812      	ldr	r2, [r2, #0]
   b8c70:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b8c72:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b8c74:	b2ff      	uxtb	r7, r7
   b8c76:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b8c7a:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b8c7e:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b8c80:	789a      	ldrb	r2, [r3, #2]
   b8c82:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b8c84:	78da      	ldrb	r2, [r3, #3]
   b8c86:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b8c88:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b8c8a:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b8c8e:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b8c92:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b8c94:	d801      	bhi.n	b8c9a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b8c96:	2c01      	cmp	r4, #1
   b8c98:	d957      	bls.n	b8d4a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b8c9a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b8c9e:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b8ca0:	fa0f f38a 	sxth.w	r3, sl
   b8ca4:	9307      	str	r3, [sp, #28]
        startWrite();
   b8ca6:	f8db 3000 	ldr.w	r3, [fp]
   b8caa:	4658      	mov	r0, fp
   b8cac:	695b      	ldr	r3, [r3, #20]
   b8cae:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8cb0:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b8cb2:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8cb6:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8cb8:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b8cbc:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b8cbe:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8cc0:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b8cc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8cc4:	429f      	cmp	r7, r3
   b8cc6:	d28f      	bcs.n	b8be8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8cc8:	9b07      	ldr	r3, [sp, #28]
   b8cca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b8ccc:	443b      	add	r3, r7
   b8cce:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b8cd2:	2200      	movs	r2, #0
   b8cd4:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8cd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8cd8:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8cda:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8cde:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8ce2:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8ce6:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b8ce8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b8cea:	9905      	ldr	r1, [sp, #20]
   b8cec:	4291      	cmp	r1, r2
   b8cee:	d241      	bcs.n	b8d74 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b8cf0:	1c5a      	adds	r2, r3, #1
   b8cf2:	b2d2      	uxtb	r2, r2
   b8cf4:	075b      	lsls	r3, r3, #29
   b8cf6:	920d      	str	r2, [sp, #52]	; 0x34
   b8cf8:	d107      	bne.n	b8d0a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b8cfa:	9b06      	ldr	r3, [sp, #24]
   b8cfc:	9906      	ldr	r1, [sp, #24]
   b8cfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8d00:	3301      	adds	r3, #1
   b8d02:	b29b      	uxth	r3, r3
   b8d04:	f812 9001 	ldrb.w	r9, [r2, r1]
   b8d08:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b8d0a:	f019 0f80 	tst.w	r9, #128	; 0x80
   b8d0e:	d012      	beq.n	b8d36 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b8d10:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8d12:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8d16:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b8d1a:	d11a      	bne.n	b8d52 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b8d1c:	2c01      	cmp	r4, #1
   b8d1e:	d118      	bne.n	b8d52 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8d20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b8d22:	699b      	ldr	r3, [r3, #24]
   b8d24:	4411      	add	r1, r2
   b8d26:	9a05      	ldr	r2, [sp, #20]
   b8d28:	4411      	add	r1, r2
   b8d2a:	461e      	mov	r6, r3
   b8d2c:	4652      	mov	r2, sl
   b8d2e:	9b04      	ldr	r3, [sp, #16]
   b8d30:	b209      	sxth	r1, r1
   b8d32:	4658      	mov	r0, fp
   b8d34:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b8d36:	9e05      	ldr	r6, [sp, #20]
   b8d38:	3601      	adds	r6, #1
   b8d3a:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b8d3c:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b8d40:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b8d42:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b8d46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b8d48:	e7ce      	b.n	b8ce8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b8d4a:	2300      	movs	r3, #0
   b8d4c:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b8d50:	e7a9      	b.n	b8ca6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8d52:	9805      	ldr	r0, [sp, #20]
   b8d54:	9a08      	ldr	r2, [sp, #32]
   b8d56:	4402      	add	r2, r0
   b8d58:	fb02 1105 	mla	r1, r2, r5, r1
   b8d5c:	9a04      	ldr	r2, [sp, #16]
   b8d5e:	e9cd 4200 	strd	r4, r2, [sp]
   b8d62:	69db      	ldr	r3, [r3, #28]
   b8d64:	ee18 2a10 	vmov	r2, s16
   b8d68:	461e      	mov	r6, r3
   b8d6a:	b209      	sxth	r1, r1
   b8d6c:	462b      	mov	r3, r5
   b8d6e:	4658      	mov	r0, fp
   b8d70:	47b0      	blx	r6
   b8d72:	e7e0      	b.n	b8d36 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b8d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b8d76:	3701      	adds	r7, #1
   b8d78:	4498      	add	r8, r3
   b8d7a:	fa5f f888 	uxtb.w	r8, r8
   b8d7e:	b2ff      	uxtb	r7, r7
   b8d80:	e79f      	b.n	b8cc2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b8d82:	b011      	add	sp, #68	; 0x44
   b8d84:	ecbd 8b02 	vpop	{d8}
   b8d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8d8c:	000c1341 	.word	0x000c1341

000b8d90 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b8d90:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b8d92:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b8d94:	b085      	sub	sp, #20
   b8d96:	4604      	mov	r4, r0
   b8d98:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b8d9a:	2a00      	cmp	r2, #0
   b8d9c:	d134      	bne.n	b8e08 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b8d9e:	290a      	cmp	r1, #10
   b8da0:	d108      	bne.n	b8db4 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b8da2:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b8da4:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b8da6:	7e42      	ldrb	r2, [r0, #25]
   b8da8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b8dac:	8263      	strh	r3, [r4, #18]
}
   b8dae:	2001      	movs	r0, #1
   b8db0:	b005      	add	sp, #20
   b8db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b8db4:	290d      	cmp	r1, #13
   b8db6:	d0fa      	beq.n	b8dae <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b8db8:	7ee1      	ldrb	r1, [r4, #27]
   b8dba:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b8dbc:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b8dbe:	b171      	cbz	r1, b8dde <_ZN12Adafruit_GFX5writeEh+0x4e>
   b8dc0:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b8dc4:	2106      	movs	r1, #6
   b8dc6:	fb11 6100 	smlabb	r1, r1, r0, r6
   b8dca:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b8dce:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b8dd0:	bfc1      	itttt	gt
   b8dd2:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b8dd6:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b8dd8:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b8ddc:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b8dde:	8ae2      	ldrh	r2, [r4, #22]
   b8de0:	9201      	str	r2, [sp, #4]
   b8de2:	8aa2      	ldrh	r2, [r4, #20]
   b8de4:	9200      	str	r2, [sp, #0]
   b8de6:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b8dea:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b8dee:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b8df2:	4620      	mov	r0, r4
   b8df4:	f7ff fe5e 	bl	b8ab4 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b8df8:	7e23      	ldrb	r3, [r4, #24]
   b8dfa:	8a22      	ldrh	r2, [r4, #16]
   b8dfc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b8e00:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b8e04:	8223      	strh	r3, [r4, #16]
   b8e06:	e7d2      	b.n	b8dae <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b8e08:	290a      	cmp	r1, #10
   b8e0a:	d107      	bne.n	b8e1c <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b8e0c:	2300      	movs	r3, #0
   b8e0e:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b8e10:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b8e12:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b8e14:	8a43      	ldrh	r3, [r0, #18]
   b8e16:	fb01 3302 	mla	r3, r1, r2, r3
   b8e1a:	e7c7      	b.n	b8dac <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b8e1c:	290d      	cmp	r1, #13
   b8e1e:	d0c6      	beq.n	b8dae <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b8e20:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b8e22:	42a9      	cmp	r1, r5
   b8e24:	d3c3      	bcc.n	b8dae <_ZN12Adafruit_GFX5writeEh+0x1e>
   b8e26:	7a51      	ldrb	r1, [r2, #9]
   b8e28:	4299      	cmp	r1, r3
   b8e2a:	d3c0      	bcc.n	b8dae <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b8e2c:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b8e2e:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b8e30:	b2ed      	uxtb	r5, r5
   b8e32:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b8e36:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b8e38:	b328      	cbz	r0, b8e86 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b8e3a:	78e9      	ldrb	r1, [r5, #3]
   b8e3c:	b319      	cbz	r1, b8e86 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b8e3e:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b8e40:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b8e42:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b8e44:	b191      	cbz	r1, b8e6c <_ZN12Adafruit_GFX5writeEh+0xdc>
   b8e46:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b8e4a:	4408      	add	r0, r1
   b8e4c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b8e50:	fb06 1100 	mla	r1, r6, r0, r1
   b8e54:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b8e58:	4281      	cmp	r1, r0
   b8e5a:	dd07      	ble.n	b8e6c <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b8e5c:	2000      	movs	r0, #0
   b8e5e:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b8e60:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b8e64:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b8e66:	fb02 1207 	mla	r2, r2, r7, r1
   b8e6a:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b8e6c:	8ae2      	ldrh	r2, [r4, #22]
   b8e6e:	9201      	str	r2, [sp, #4]
   b8e70:	8aa2      	ldrh	r2, [r4, #20]
   b8e72:	9200      	str	r2, [sp, #0]
   b8e74:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b8e78:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b8e7c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b8e80:	4620      	mov	r0, r4
   b8e82:	f7ff fe17 	bl	b8ab4 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b8e86:	7929      	ldrb	r1, [r5, #4]
   b8e88:	7e22      	ldrb	r2, [r4, #24]
   b8e8a:	8a23      	ldrh	r3, [r4, #16]
   b8e8c:	fb01 3302 	mla	r3, r1, r2, r3
   b8e90:	e7b8      	b.n	b8e04 <_ZN12Adafruit_GFX5writeEh+0x74>

000b8e92 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b8e92:	2901      	cmp	r1, #1
   b8e94:	bf38      	it	cc
   b8e96:	2101      	movcc	r1, #1
   b8e98:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b8e9a:	7641      	strb	r1, [r0, #25]
}
   b8e9c:	4770      	bx	lr

000b8e9e <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   b8e9e:	6042      	str	r2, [r0, #4]
  _begun = false;
   b8ea0:	2200      	movs	r2, #0
   b8ea2:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   b8ea4:	2220      	movs	r2, #32
  _addr = addr;
   b8ea6:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   b8ea8:	60c2      	str	r2, [r0, #12]
#endif
}
   b8eaa:	4770      	bx	lr

000b8eac <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   b8eac:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   b8eae:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   b8eb0:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   b8eb2:	b153      	cbz	r3, b8eca <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   b8eb4:	7821      	ldrb	r1, [r4, #0]
   b8eb6:	6860      	ldr	r0, [r4, #4]
   b8eb8:	f003 ff56 	bl	bcd68 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   b8ebc:	6860      	ldr	r0, [r4, #4]
   b8ebe:	f003 ff5b 	bl	bcd78 <_ZN7TwoWire15endTransmissionEv>
   b8ec2:	fab0 f080 	clz	r0, r0
   b8ec6:	0940      	lsrs	r0, r0, #5
    return true;
  }
  return false;
}
   b8ec8:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   b8eca:	2101      	movs	r1, #1
   b8ecc:	f000 f803 	bl	b8ed6 <_ZN18Adafruit_I2CDevice5beginEb>
   b8ed0:	2800      	cmp	r0, #0
   b8ed2:	d1ef      	bne.n	b8eb4 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   b8ed4:	e7f8      	b.n	b8ec8 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000b8ed6 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b8ed6:	b538      	push	{r3, r4, r5, lr}
   b8ed8:	4604      	mov	r4, r0
  _wire->begin();
   b8eda:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b8edc:	460d      	mov	r5, r1
  _wire->begin();
   b8ede:	f003 ff3d 	bl	bcd5c <_ZN7TwoWire5beginEv>
  _begun = true;
   b8ee2:	2001      	movs	r0, #1
   b8ee4:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   b8ee6:	b125      	cbz	r5, b8ef2 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   b8ee8:	4620      	mov	r0, r4
}
   b8eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   b8eee:	f7ff bfdd 	b.w	b8eac <_ZN18Adafruit_I2CDevice8detectedEv>
}
   b8ef2:	bd38      	pop	{r3, r4, r5, pc}

000b8ef4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   b8ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8ef8:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   b8efc:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   b8efe:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   b8f00:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   b8f02:	4432      	add	r2, r6
   b8f04:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   b8f06:	4604      	mov	r4, r0
   b8f08:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   b8f0a:	d902      	bls.n	b8f12 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   b8f0c:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
   b8f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   b8f12:	7801      	ldrb	r1, [r0, #0]
   b8f14:	6840      	ldr	r0, [r0, #4]
   b8f16:	f003 ff27 	bl	bcd68 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b8f1a:	b97e      	cbnz	r6, b8f3c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   b8f1c:	6860      	ldr	r0, [r4, #4]
   b8f1e:	6803      	ldr	r3, [r0, #0]
   b8f20:	462a      	mov	r2, r5
   b8f22:	68db      	ldr	r3, [r3, #12]
   b8f24:	4641      	mov	r1, r8
   b8f26:	4798      	blx	r3
   b8f28:	4285      	cmp	r5, r0
   b8f2a:	d1ef      	bne.n	b8f0c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   b8f2c:	6860      	ldr	r0, [r4, #4]
   b8f2e:	4639      	mov	r1, r7
   b8f30:	f003 ff1e 	bl	bcd70 <_ZN7TwoWire15endTransmissionEh>
   b8f34:	fab0 f080 	clz	r0, r0
   b8f38:	0940      	lsrs	r0, r0, #5
   b8f3a:	e7e8      	b.n	b8f0e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b8f3c:	f1b9 0f00 	cmp.w	r9, #0
   b8f40:	d0ec      	beq.n	b8f1c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   b8f42:	6860      	ldr	r0, [r4, #4]
   b8f44:	6803      	ldr	r3, [r0, #0]
   b8f46:	4632      	mov	r2, r6
   b8f48:	68db      	ldr	r3, [r3, #12]
   b8f4a:	4649      	mov	r1, r9
   b8f4c:	4798      	blx	r3
   b8f4e:	4286      	cmp	r6, r0
   b8f50:	d1dc      	bne.n	b8f0c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   b8f52:	e7e3      	b.n	b8f1c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000b8f54 <_ZN18Adafruit_I2CDevice8setSpeedEm>:
 *    underlying Wire support!
 *    @param desiredclk The desired I2C SCL frequency
 *    @return True if this platform supports changing I2C speed.
 *    Not necessarily that the speed was achieved!
 */
bool Adafruit_I2CDevice::setSpeed(uint32_t desiredclk) {
   b8f54:	b508      	push	{r3, lr}

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b8f56:	6840      	ldr	r0, [r0, #4]
   b8f58:	f003 fefc 	bl	bcd54 <_ZN7TwoWire8setSpeedEm>
  _wire->setClock(desiredclk);
  return true;
#else
  return false;
#endif
}
   b8f5c:	2001      	movs	r0, #1
   b8f5e:	bd08      	pop	{r3, pc}

000b8f60 <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
   b8f60:	b510      	push	{r4, lr}
   b8f62:	4604      	mov	r4, r0
  if (_spiSetting) {
   b8f64:	6840      	ldr	r0, [r0, #4]
   b8f66:	b110      	cbz	r0, b8f6e <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
   b8f68:	6803      	ldr	r3, [r0, #0]
   b8f6a:	689b      	ldr	r3, [r3, #8]
   b8f6c:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
   b8f6e:	4620      	mov	r0, r4
   b8f70:	bd10      	pop	{r4, pc}

000b8f72 <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
   b8f72:	b538      	push	{r3, r4, r5, lr}
   b8f74:	4604      	mov	r4, r0
  pinMode(_cs, OUTPUT);
   b8f76:	f990 000e 	ldrsb.w	r0, [r0, #14]
   b8f7a:	2101      	movs	r1, #1
   b8f7c:	b280      	uxth	r0, r0
   b8f7e:	f004 fd79 	bl	bda74 <pinMode>
  digitalWrite(_cs, HIGH);
   b8f82:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b8f86:	2101      	movs	r1, #1
   b8f88:	b280      	uxth	r0, r0
   b8f8a:	f004 fd84 	bl	bda96 <digitalWrite>

  if (_spi) { // hardware SPI
   b8f8e:	6825      	ldr	r5, [r4, #0]
   b8f90:	b135      	cbz	r5, b8fa0 <_ZN18Adafruit_SPIDevice5beginEv+0x2e>
    _spi->begin();
   b8f92:	4628      	mov	r0, r5
   b8f94:	f004 f8f4 	bl	bd180 <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
   b8f98:	2001      	movs	r0, #1
   b8f9a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
   b8f9e:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
   b8fa0:	f994 000f 	ldrsb.w	r0, [r4, #15]
   b8fa4:	2101      	movs	r1, #1
   b8fa6:	b280      	uxth	r0, r0
   b8fa8:	f004 fd64 	bl	bda74 <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
   b8fac:	7b63      	ldrb	r3, [r4, #13]
   b8fae:	f994 000f 	ldrsb.w	r0, [r4, #15]
   b8fb2:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
   b8fb4:	bf94      	ite	ls
   b8fb6:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
   b8fb8:	2101      	movhi	r1, #1
   b8fba:	b280      	uxth	r0, r0
   b8fbc:	f004 fd6b 	bl	bda96 <digitalWrite>
    if (_mosi != -1) {
   b8fc0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b8fc4:	1c42      	adds	r2, r0, #1
   b8fc6:	d009      	beq.n	b8fdc <_ZN18Adafruit_SPIDevice5beginEv+0x6a>
      pinMode(_mosi, OUTPUT);
   b8fc8:	2101      	movs	r1, #1
   b8fca:	b280      	uxth	r0, r0
   b8fcc:	f004 fd52 	bl	bda74 <pinMode>
      digitalWrite(_mosi, HIGH);
   b8fd0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b8fd4:	2101      	movs	r1, #1
   b8fd6:	b280      	uxth	r0, r0
   b8fd8:	f004 fd5d 	bl	bda96 <digitalWrite>
    if (_miso != -1) {
   b8fdc:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b8fe0:	1c43      	adds	r3, r0, #1
   b8fe2:	d0d9      	beq.n	b8f98 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
      pinMode(_miso, INPUT);
   b8fe4:	2100      	movs	r1, #0
   b8fe6:	b280      	uxth	r0, r0
   b8fe8:	f004 fd44 	bl	bda74 <pinMode>
   b8fec:	e7d4      	b.n	b8f98 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
	...

000b8ff0 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b8ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8ff4:	4604      	mov	r4, r0
  if (_spi) {
   b8ff6:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b8ff8:	b085      	sub	sp, #20
   b8ffa:	460d      	mov	r5, r1
  if (_spi) {
   b8ffc:	b140      	cbz	r0, b9010 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   b8ffe:	2300      	movs	r3, #0
   b9000:	9300      	str	r3, [sp, #0]
   b9002:	4613      	mov	r3, r2
   b9004:	460a      	mov	r2, r1
   b9006:	f004 f95d 	bl	bd2c4 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   b900a:	b005      	add	sp, #20
   b900c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   b9010:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b9012:	68a0      	ldr	r0, [r4, #8]
   b9014:	4f48      	ldr	r7, [pc, #288]	; (b9138 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   b9016:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   b901a:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b901c:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   b901e:	bf0c      	ite	eq
   b9020:	f04f 0b01 	moveq.w	fp, #1
   b9024:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b9028:	ea1b 0f03 	tst.w	fp, r3
   b902c:	eb01 0302 	add.w	r3, r1, r2
   b9030:	bf0c      	ite	eq
   b9032:	f04f 0901 	moveq.w	r9, #1
   b9036:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b903a:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   b903c:	9303      	str	r3, [sp, #12]
   b903e:	9b03      	ldr	r3, [sp, #12]
   b9040:	42ab      	cmp	r3, r5
   b9042:	d0e2      	beq.n	b900a <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   b9044:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   b9048:	465e      	mov	r6, fp
    uint8_t reply = 0;
   b904a:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   b904e:	b117      	cbz	r7, b9056 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b9050:	4638      	mov	r0, r7
   b9052:	f000 fcdd 	bl	b9a10 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   b9056:	7b63      	ldrb	r3, [r4, #13]
   b9058:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   b905c:	d141      	bne.n	b90e2 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b905e:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b9062:	1c5a      	adds	r2, r3, #1
   b9064:	d00f      	beq.n	b9086 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   b9066:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b906a:	bf14      	ite	ne
   b906c:	2301      	movne	r3, #1
   b906e:	2300      	moveq	r3, #0
   b9070:	454b      	cmp	r3, r9
   b9072:	d008      	beq.n	b9086 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   b9074:	6963      	ldr	r3, [r4, #20]
   b9076:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9078:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   b907a:	2900      	cmp	r1, #0
   b907c:	d02c      	beq.n	b90d8 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   b907e:	4302      	orrs	r2, r0
   b9080:	601a      	str	r2, [r3, #0]
   b9082:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   b9086:	69a1      	ldr	r1, [r4, #24]
   b9088:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b908a:	680a      	ldr	r2, [r1, #0]
   b908c:	4313      	orrs	r3, r2
   b908e:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b9090:	b117      	cbz	r7, b9098 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   b9092:	4638      	mov	r0, r7
   b9094:	f000 fcbc 	bl	b9a10 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   b9098:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b909c:	3301      	adds	r3, #1
   b909e:	d006      	beq.n	b90ae <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   b90a0:	69e3      	ldr	r3, [r4, #28]
   b90a2:	681a      	ldr	r2, [r3, #0]
   b90a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b90a6:	421a      	tst	r2, r3
            reply |= b;
   b90a8:	bf18      	it	ne
   b90aa:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   b90ae:	69a1      	ldr	r1, [r4, #24]
   b90b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b90b2:	680a      	ldr	r2, [r1, #0]
   b90b4:	ea22 0303 	bic.w	r3, r2, r3
   b90b8:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   b90ba:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b90be:	3301      	adds	r3, #1
        buffer[i] = reply;
   b90c0:	bf18      	it	ne
   b90c2:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   b90c6:	7b23      	ldrb	r3, [r4, #12]
   b90c8:	2b00      	cmp	r3, #0
   b90ca:	d132      	bne.n	b9132 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   b90cc:	0076      	lsls	r6, r6, #1
   b90ce:	b2f6      	uxtb	r6, r6
   b90d0:	2e00      	cmp	r6, #0
   b90d2:	d1bc      	bne.n	b904e <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   b90d4:	3501      	adds	r5, #1
   b90d6:	e7b2      	b.n	b903e <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   b90d8:	ea22 0200 	bic.w	r2, r2, r0
   b90dc:	601a      	str	r2, [r3, #0]
   b90de:	4689      	mov	r9, r1
   b90e0:	e7d1      	b.n	b9086 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   b90e2:	69a1      	ldr	r1, [r4, #24]
   b90e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b90e6:	680a      	ldr	r2, [r1, #0]
   b90e8:	4313      	orrs	r3, r2
   b90ea:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b90ec:	b117      	cbz	r7, b90f4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   b90ee:	4638      	mov	r0, r7
   b90f0:	f000 fc8e 	bl	b9a10 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   b90f4:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b90f8:	3301      	adds	r3, #1
   b90fa:	d008      	beq.n	b910e <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   b90fc:	6963      	ldr	r3, [r4, #20]
   b90fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b9100:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   b9102:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   b9106:	bf14      	ite	ne
   b9108:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   b910a:	438a      	biceq	r2, r1
   b910c:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   b910e:	69a1      	ldr	r1, [r4, #24]
   b9110:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b9112:	680a      	ldr	r2, [r1, #0]
   b9114:	ea22 0303 	bic.w	r3, r2, r3
   b9118:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   b911a:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b911e:	3301      	adds	r3, #1
   b9120:	d0cb      	beq.n	b90ba <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   b9122:	69e3      	ldr	r3, [r4, #28]
   b9124:	681a      	ldr	r2, [r3, #0]
   b9126:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b9128:	421a      	tst	r2, r3
            reply |= b;
   b912a:	bf18      	it	ne
   b912c:	ea46 0808 	orrne.w	r8, r6, r8
   b9130:	e7c3      	b.n	b90ba <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   b9132:	0876      	lsrs	r6, r6, #1
   b9134:	e7cc      	b.n	b90d0 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   b9136:	bf00      	nop
   b9138:	0007a120 	.word	0x0007a120

000b913c <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   b913c:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   b913e:	2201      	movs	r2, #1
  uint8_t data = send;
   b9140:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   b9144:	f10d 0107 	add.w	r1, sp, #7
   b9148:	f7ff ff52 	bl	b8ff0 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   b914c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b9150:	b003      	add	sp, #12
   b9152:	f85d fb04 	ldr.w	pc, [sp], #4

000b9156 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   b9156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b915a:	4604      	mov	r4, r0
  if (_spi) {
   b915c:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   b915e:	460e      	mov	r6, r1
   b9160:	4617      	mov	r7, r2
   b9162:	461d      	mov	r5, r3
  if (_spi) {
   b9164:	b110      	cbz	r0, b916c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   b9166:	6861      	ldr	r1, [r4, #4]
   b9168:	f004 f838 	bl	bd1dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   b916c:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b9170:	2100      	movs	r1, #0
   b9172:	b280      	uxth	r0, r0
   b9174:	f004 fc8f 	bl	bda96 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   b9178:	9b06      	ldr	r3, [sp, #24]
   b917a:	eb05 0803 	add.w	r8, r5, r3
   b917e:	4545      	cmp	r5, r8
   b9180:	d108      	bne.n	b9194 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   b9182:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   b9184:	42b7      	cmp	r7, r6
   b9186:	d00b      	beq.n	b91a0 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   b9188:	f816 1b01 	ldrb.w	r1, [r6], #1
   b918c:	4620      	mov	r0, r4
   b918e:	f7ff ffd5 	bl	b913c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   b9192:	e7f7      	b.n	b9184 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   b9194:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9198:	4620      	mov	r0, r4
   b919a:	f7ff ffcf 	bl	b913c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   b919e:	e7ee      	b.n	b917e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   b91a0:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b91a4:	2101      	movs	r1, #1
   b91a6:	b280      	uxth	r0, r0
   b91a8:	f004 fc75 	bl	bda96 <digitalWrite>

  if (_spi) {
   b91ac:	6820      	ldr	r0, [r4, #0]
   b91ae:	b108      	cbz	r0, b91b4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   b91b0:	f003 fffa 	bl	bd1a8 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b91b4:	2001      	movs	r0, #1
   b91b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b91ba <_ZN17Adafruit_GrayOLED9drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b91ba:	2900      	cmp	r1, #0
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b91bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b91be:	db66      	blt.n	b928e <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   b91c0:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b91c4:	428c      	cmp	r4, r1
   b91c6:	dd62      	ble.n	b928e <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   b91c8:	2a00      	cmp	r2, #0
   b91ca:	db60      	blt.n	b928e <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   b91cc:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b91d0:	4294      	cmp	r4, r2
   b91d2:	dd5c      	ble.n	b928e <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b91d4:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
   b91d6:	2c02      	cmp	r4, #2
   b91d8:	d05a      	beq.n	b9290 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd6>
   b91da:	2c03      	cmp	r4, #3
   b91dc:	d061      	beq.n	b92a2 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xe8>
   b91de:	2c01      	cmp	r4, #1
   b91e0:	d104      	bne.n	b91ec <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
    case 1:
      grayoled_swap(x, y);
      x = WIDTH - x - 1;
   b91e2:	8904      	ldrh	r4, [r0, #8]
   b91e4:	43d2      	mvns	r2, r2
   b91e6:	4414      	add	r4, r2
      break;
   b91e8:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b91ea:	b221      	sxth	r1, r4
      y = HEIGHT - y - 1;
      break;
    }

    // adjust dirty window
    window_x1 = min(window_x1, x);
   b91ec:	f9b0 4038 	ldrsh.w	r4, [r0, #56]	; 0x38
   b91f0:	428c      	cmp	r4, r1
   b91f2:	bfa8      	it	ge
   b91f4:	460c      	movge	r4, r1
   b91f6:	8704      	strh	r4, [r0, #56]	; 0x38
    window_y1 = min(window_y1, y);
   b91f8:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
   b91fc:	4294      	cmp	r4, r2
   b91fe:	bfa8      	it	ge
   b9200:	4614      	movge	r4, r2
   b9202:	8744      	strh	r4, [r0, #58]	; 0x3a
    window_x2 = max(window_x2, x);
   b9204:	f9b0 403c 	ldrsh.w	r4, [r0, #60]	; 0x3c
   b9208:	428c      	cmp	r4, r1
   b920a:	bfb8      	it	lt
   b920c:	460c      	movlt	r4, r1
   b920e:	8784      	strh	r4, [r0, #60]	; 0x3c
    window_y2 = max(window_y2, y);
   b9210:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
   b9214:	4294      	cmp	r4, r2
   b9216:	bfb8      	it	lt
   b9218:	4614      	movlt	r4, r2
   b921a:	87c4      	strh	r4, [r0, #62]	; 0x3e

    if (_bpp == 1) {
   b921c:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   b9220:	2c01      	cmp	r4, #1
   b9222:	d116      	bne.n	b9252 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      switch (color) {
   b9224:	2b01      	cmp	r3, #1
   b9226:	d042      	beq.n	b92ae <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xf4>
   b9228:	2b02      	cmp	r3, #2
   b922a:	d051      	beq.n	b92d0 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x116>
   b922c:	b98b      	cbnz	r3, b9252 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      case MONOOLED_WHITE:
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
        break;
      case MONOOLED_BLACK:
        buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
   b922e:	2a00      	cmp	r2, #0
   b9230:	8905      	ldrh	r5, [r0, #8]
   b9232:	6b47      	ldr	r7, [r0, #52]	; 0x34
   b9234:	4614      	mov	r4, r2
   b9236:	bfb8      	it	lt
   b9238:	1dd4      	addlt	r4, r2, #7
   b923a:	10e4      	asrs	r4, r4, #3
   b923c:	fb14 1405 	smlabb	r4, r4, r5, r1
   b9240:	f002 0607 	and.w	r6, r2, #7
   b9244:	2501      	movs	r5, #1
   b9246:	fa05 f606 	lsl.w	r6, r5, r6
   b924a:	5d3d      	ldrb	r5, [r7, r4]
   b924c:	ea25 0506 	bic.w	r5, r5, r6
   b9250:	553d      	strb	r5, [r7, r4]
      case MONOOLED_INVERSE:
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
        break;
      }
    }
    if (_bpp == 4) {
   b9252:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   b9256:	2c04      	cmp	r4, #4
   b9258:	d119      	bne.n	b928e <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
      uint8_t *pixelptr = &buffer[x / 2 + (y * WIDTH / 2)];
   b925a:	8904      	ldrh	r4, [r0, #8]
   b925c:	fb14 f202 	smulbb	r2, r4, r2
   b9260:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   b9264:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
   b9268:	f342 024f 	sbfx	r2, r2, #1, #16
   b926c:	eb02 0264 	add.w	r2, r2, r4, asr #1
   b9270:	6b44      	ldr	r4, [r0, #52]	; 0x34
      // Serial.printf("(%d, %d) -> offset %d\n", x, y, x/2 + (y * WIDTH / 2));
      if (x % 2 == 0) { // even, left nibble
        uint8_t t = pixelptr[0] & 0x0F;
   b9272:	5ca0      	ldrb	r0, [r4, r2]
      if (x % 2 == 0) { // even, left nibble
   b9274:	07c9      	lsls	r1, r1, #31
        t |= (color & 0xF) << 4;
        pixelptr[0] = t;
      } else { // odd, right lower nibble
        uint8_t t = pixelptr[0] & 0xF0;
        t |= color & 0xF;
   b9276:	bf4b      	itete	mi
   b9278:	f003 030f 	andmi.w	r3, r3, #15
        uint8_t t = pixelptr[0] & 0x0F;
   b927c:	f000 000f 	andpl.w	r0, r0, #15
        uint8_t t = pixelptr[0] & 0xF0;
   b9280:	f020 000f 	bicmi.w	r0, r0, #15
        t |= (color & 0xF) << 4;
   b9284:	ea40 1303 	orrpl.w	r3, r0, r3, lsl #4
        t |= color & 0xF;
   b9288:	bf48      	it	mi
   b928a:	4303      	orrmi	r3, r0
        pixelptr[0] = t;
   b928c:	54a3      	strb	r3, [r4, r2]
      }
    }
  }
}
   b928e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      x = WIDTH - x - 1;
   b9290:	8904      	ldrh	r4, [r0, #8]
   b9292:	3c01      	subs	r4, #1
   b9294:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b9296:	8944      	ldrh	r4, [r0, #10]
   b9298:	43d2      	mvns	r2, r2
   b929a:	4422      	add	r2, r4
      x = WIDTH - x - 1;
   b929c:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b929e:	b212      	sxth	r2, r2
      break;
   b92a0:	e7a4      	b.n	b91ec <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b92a2:	8944      	ldrh	r4, [r0, #10]
   b92a4:	3c01      	subs	r4, #1
   b92a6:	1a64      	subs	r4, r4, r1
      break;
   b92a8:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b92aa:	b222      	sxth	r2, r4
      break;
   b92ac:	e79e      	b.n	b91ec <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
   b92ae:	2a00      	cmp	r2, #0
   b92b0:	8905      	ldrh	r5, [r0, #8]
   b92b2:	6b46      	ldr	r6, [r0, #52]	; 0x34
   b92b4:	4614      	mov	r4, r2
   b92b6:	bfb8      	it	lt
   b92b8:	1dd4      	addlt	r4, r2, #7
   b92ba:	10e4      	asrs	r4, r4, #3
   b92bc:	fb14 1405 	smlabb	r4, r4, r5, r1
   b92c0:	f002 0707 	and.w	r7, r2, #7
   b92c4:	2501      	movs	r5, #1
   b92c6:	40bd      	lsls	r5, r7
   b92c8:	5d37      	ldrb	r7, [r6, r4]
   b92ca:	433d      	orrs	r5, r7
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   b92cc:	5535      	strb	r5, [r6, r4]
        break;
   b92ce:	e7c0      	b.n	b9252 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   b92d0:	2a00      	cmp	r2, #0
   b92d2:	8905      	ldrh	r5, [r0, #8]
   b92d4:	6b46      	ldr	r6, [r0, #52]	; 0x34
   b92d6:	4614      	mov	r4, r2
   b92d8:	bfb8      	it	lt
   b92da:	1dd4      	addlt	r4, r2, #7
   b92dc:	10e4      	asrs	r4, r4, #3
   b92de:	fb14 1405 	smlabb	r4, r4, r5, r1
   b92e2:	f002 0707 	and.w	r7, r2, #7
   b92e6:	2501      	movs	r5, #1
   b92e8:	40bd      	lsls	r5, r7
   b92ea:	5d37      	ldrb	r7, [r6, r4]
   b92ec:	407d      	eors	r5, r7
   b92ee:	e7ed      	b.n	b92cc <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x112>

000b92f0 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>:
Adafruit_GrayOLED::Adafruit_GrayOLED(uint8_t bpp, uint16_t w, uint16_t h,
   b92f0:	b538      	push	{r3, r4, r5, lr}
   b92f2:	460d      	mov	r5, r1
   b92f4:	4611      	mov	r1, r2
   b92f6:	4604      	mov	r4, r0
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   b92f8:	b21a      	sxth	r2, r3
   b92fa:	b209      	sxth	r1, r1
   b92fc:	f7ff fb70 	bl	b89e0 <_ZN12Adafruit_GFXC1Ess>
   b9300:	9a06      	ldr	r2, [sp, #24]
   b9302:	4b0b      	ldr	r3, [pc, #44]	; (b9330 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm+0x40>)
   b9304:	62e2      	str	r2, [r4, #44]	; 0x2c
   b9306:	9a07      	ldr	r2, [sp, #28]
   b9308:	6023      	str	r3, [r4, #0]
   b930a:	2300      	movs	r3, #0
   b930c:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
   b9310:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   b9314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9318:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
   b931c:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   b9320:	64a3      	str	r3, [r4, #72]	; 0x48
  _theWire = twi;
   b9322:	9b04      	ldr	r3, [sp, #16]
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   b9324:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  _theWire = twi;
   b9328:	6523      	str	r3, [r4, #80]	; 0x50
}
   b932a:	4620      	mov	r0, r4
   b932c:	bd38      	pop	{r3, r4, r5, pc}
   b932e:	bf00      	nop
   b9330:	000c18a4 	.word	0x000c18a4

000b9334 <_ZN17Adafruit_GrayOLEDD1Ev>:
Adafruit_GrayOLED::~Adafruit_GrayOLED(void) {
   b9334:	b538      	push	{r3, r4, r5, lr}
   b9336:	4b0c      	ldr	r3, [pc, #48]	; (b9368 <_ZN17Adafruit_GrayOLEDD1Ev+0x34>)
   b9338:	6003      	str	r3, [r0, #0]
   b933a:	4604      	mov	r4, r0
  if (buffer) {
   b933c:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b933e:	b118      	cbz	r0, b9348 <_ZN17Adafruit_GrayOLEDD1Ev+0x14>
    free(buffer);
   b9340:	f000 fdf2 	bl	b9f28 <free>
    buffer = NULL;
   b9344:	2300      	movs	r3, #0
   b9346:	6363      	str	r3, [r4, #52]	; 0x34
  if (spi_dev)
   b9348:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b934a:	b135      	cbz	r5, b935a <_ZN17Adafruit_GrayOLEDD1Ev+0x26>
    delete spi_dev;
   b934c:	4628      	mov	r0, r5
   b934e:	f7ff fe07 	bl	b8f60 <_ZN18Adafruit_SPIDeviceD1Ev>
   b9352:	2138      	movs	r1, #56	; 0x38
   b9354:	4628      	mov	r0, r5
   b9356:	f7fa fea2 	bl	b409e <_ZdlPvj>
  if (i2c_dev)
   b935a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b935c:	b110      	cbz	r0, b9364 <_ZN17Adafruit_GrayOLEDD1Ev+0x30>
    delete i2c_dev;
   b935e:	2110      	movs	r1, #16
   b9360:	f7fa fe9d 	bl	b409e <_ZdlPvj>
}
   b9364:	4620      	mov	r0, r4
   b9366:	bd38      	pop	{r3, r4, r5, pc}
   b9368:	000c18a4 	.word	0x000c18a4

000b936c <_ZN17Adafruit_GrayOLED12oled_commandEh>:
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   b936c:	b530      	push	{r4, r5, lr}
   b936e:	b087      	sub	sp, #28
  if (i2c_dev) {                // I2C
   b9370:	6a85      	ldr	r5, [r0, #40]	; 0x28
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   b9372:	f88d 100f 	strb.w	r1, [sp, #15]
   b9376:	4604      	mov	r4, r0
  if (i2c_dev) {                // I2C
   b9378:	b17d      	cbz	r5, b939a <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2e>
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   b937a:	2300      	movs	r3, #0
   b937c:	b2ca      	uxtb	r2, r1
    i2c_dev->write(buf, 2);
   b937e:	e9cd 3300 	strd	r3, r3, [sp]
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   b9382:	f88d 3014 	strb.w	r3, [sp, #20]
   b9386:	f88d 2015 	strb.w	r2, [sp, #21]
    i2c_dev->write(buf, 2);
   b938a:	2301      	movs	r3, #1
   b938c:	2202      	movs	r2, #2
   b938e:	a905      	add	r1, sp, #20
   b9390:	4628      	mov	r0, r5
   b9392:	f7ff fdaf 	bl	b8ef4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   b9396:	b007      	add	sp, #28
   b9398:	bd30      	pop	{r4, r5, pc}
    digitalWrite(dcPin, LOW);
   b939a:	4629      	mov	r1, r5
   b939c:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   b93a0:	f004 fb79 	bl	bda96 <digitalWrite>
    spi_dev->write(&c, 1);
   b93a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b93a6:	9500      	str	r5, [sp, #0]
   b93a8:	462b      	mov	r3, r5
   b93aa:	2201      	movs	r2, #1
   b93ac:	f10d 010f 	add.w	r1, sp, #15
   b93b0:	f7ff fed1 	bl	b9156 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
}
   b93b4:	e7ef      	b.n	b9396 <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2a>

000b93b6 <_ZN17Adafruit_GrayOLED13invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing MONOOLED_BLACK (value 0) pixels will actually draw
   white, MONOOLED_WHITE (value 1) will draw black.
*/
void Adafruit_GrayOLED::invertDisplay(bool i) {
  oled_command(i ? GRAYOLED_INVERTDISPLAY : GRAYOLED_NORMALDISPLAY);
   b93b6:	2900      	cmp	r1, #0
   b93b8:	bf14      	ite	ne
   b93ba:	21a7      	movne	r1, #167	; 0xa7
   b93bc:	21a6      	moveq	r1, #166	; 0xa6
   b93be:	f7ff bfd5 	b.w	b936c <_ZN17Adafruit_GrayOLED12oled_commandEh>

000b93c2 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>:
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   b93c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (i2c_dev) {            // I2C
   b93c4:	6a85      	ldr	r5, [r0, #40]	; 0x28
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   b93c6:	b085      	sub	sp, #20
   b93c8:	4604      	mov	r4, r0
   b93ca:	460e      	mov	r6, r1
   b93cc:	4617      	mov	r7, r2
  if (i2c_dev) {            // I2C
   b93ce:	b165      	cbz	r5, b93ea <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x28>
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   b93d0:	2300      	movs	r3, #0
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   b93d2:	f10d 000f 	add.w	r0, sp, #15
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   b93d6:	f88d 300f 	strb.w	r3, [sp, #15]
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   b93da:	2301      	movs	r3, #1
   b93dc:	9000      	str	r0, [sp, #0]
   b93de:	9301      	str	r3, [sp, #4]
   b93e0:	4628      	mov	r0, r5
   b93e2:	f7ff fd87 	bl	b8ef4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   b93e6:	b005      	add	sp, #20
   b93e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    digitalWrite(dcPin, LOW);
   b93ea:	4629      	mov	r1, r5
   b93ec:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   b93f0:	f004 fb51 	bl	bda96 <digitalWrite>
    if (!spi_dev->write((uint8_t *)c, n)) {
   b93f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b93f6:	9500      	str	r5, [sp, #0]
   b93f8:	462b      	mov	r3, r5
   b93fa:	463a      	mov	r2, r7
   b93fc:	4631      	mov	r1, r6
   b93fe:	f7ff feaa 	bl	b9156 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   b9402:	e7f0      	b.n	b93e6 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x24>

000b9404 <_ZN17Adafruit_GrayOLED12clearDisplayEv>:
void Adafruit_GrayOLED::clearDisplay(void) {
   b9404:	b510      	push	{r4, lr}
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   b9406:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
   b940a:	8903      	ldrh	r3, [r0, #8]
   b940c:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   b9410:	fb12 f203 	smulbb	r2, r2, r3
   b9414:	1dcb      	adds	r3, r1, #7
   b9416:	bf48      	it	mi
   b9418:	f101 030e 	addmi.w	r3, r1, #14
   b941c:	10db      	asrs	r3, r3, #3
void Adafruit_GrayOLED::clearDisplay(void) {
   b941e:	4604      	mov	r4, r0
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   b9420:	435a      	muls	r2, r3
   b9422:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b9424:	2100      	movs	r1, #0
   b9426:	f005 fad8 	bl	be9da <memset>
  window_x1 = 0;
   b942a:	2300      	movs	r3, #0
   b942c:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   b942e:	8923      	ldrh	r3, [r4, #8]
   b9430:	3b01      	subs	r3, #1
   b9432:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   b9434:	8963      	ldrh	r3, [r4, #10]
   b9436:	3b01      	subs	r3, #1
   b9438:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
   b943a:	bd10      	pop	{r4, pc}

000b943c <_ZN17Adafruit_GrayOLED5_initEhb>:
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   b943c:	b570      	push	{r4, r5, r6, lr}
  if ((!buffer) &&
   b943e:	6b43      	ldr	r3, [r0, #52]	; 0x34
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   b9440:	4604      	mov	r4, r0
   b9442:	460e      	mov	r6, r1
   b9444:	4615      	mov	r5, r2
  if ((!buffer) &&
   b9446:	b30b      	cbz	r3, b948c <_ZN17Adafruit_GrayOLED5_initEhb+0x50>
  if (reset && (rstPin >= 0)) {
   b9448:	2d00      	cmp	r5, #0
   b944a:	d133      	bne.n	b94b4 <_ZN17Adafruit_GrayOLED5_initEhb+0x78>
  if (_theWire) { // using I2C
   b944c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b944e:	2b00      	cmp	r3, #0
   b9450:	d050      	beq.n	b94f4 <_ZN17Adafruit_GrayOLED5_initEhb+0xb8>
    i2c_dev = new Adafruit_I2CDevice(addr, _theWire);
   b9452:	2010      	movs	r0, #16
   b9454:	f7fa fe1f 	bl	b4096 <_Znwj>
   b9458:	4605      	mov	r5, r0
   b945a:	b118      	cbz	r0, b9464 <_ZN17Adafruit_GrayOLED5_initEhb+0x28>
   b945c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b945e:	4631      	mov	r1, r6
   b9460:	f7ff fd1d 	bl	b8e9e <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b9464:	62a5      	str	r5, [r4, #40]	; 0x28
    if (!i2c_dev || !i2c_dev->begin()) {
   b9466:	b31d      	cbz	r5, b94b0 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   b9468:	2101      	movs	r1, #1
   b946a:	4628      	mov	r0, r5
   b946c:	f7ff fd33 	bl	b8ed6 <_ZN18Adafruit_I2CDevice5beginEb>
   b9470:	b1f0      	cbz	r0, b94b0 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
  clearDisplay();
   b9472:	4620      	mov	r0, r4
   b9474:	f7ff ffc6 	bl	b9404 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  window_x1 = 0;
   b9478:	2300      	movs	r3, #0
   b947a:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   b947c:	8923      	ldrh	r3, [r4, #8]
   b947e:	3b01      	subs	r3, #1
   b9480:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   b9482:	8963      	ldrh	r3, [r4, #10]
   b9484:	3b01      	subs	r3, #1
   b9486:	87e3      	strh	r3, [r4, #62]	; 0x3e
  return true; // Success
   b9488:	2001      	movs	r0, #1
   b948a:	e012      	b.n	b94b2 <_ZN17Adafruit_GrayOLED5_initEhb+0x76>
      !(buffer = (uint8_t *)malloc(_bpp * WIDTH * ((HEIGHT + 7) / 8)))) {
   b948c:	8923      	ldrh	r3, [r4, #8]
   b948e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b9492:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
   b9496:	fb10 f003 	smulbb	r0, r0, r3
   b949a:	1dd3      	adds	r3, r2, #7
   b949c:	bf48      	it	mi
   b949e:	f102 030e 	addmi.w	r3, r2, #14
   b94a2:	10db      	asrs	r3, r3, #3
   b94a4:	4358      	muls	r0, r3
   b94a6:	f000 fd37 	bl	b9f18 <malloc>
   b94aa:	6360      	str	r0, [r4, #52]	; 0x34
  if ((!buffer) &&
   b94ac:	2800      	cmp	r0, #0
   b94ae:	d1cb      	bne.n	b9448 <_ZN17Adafruit_GrayOLED5_initEhb+0xc>
    return false;
   b94b0:	2000      	movs	r0, #0
}
   b94b2:	bd70      	pop	{r4, r5, r6, pc}
  if (reset && (rstPin >= 0)) {
   b94b4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   b94b6:	2800      	cmp	r0, #0
   b94b8:	dbc8      	blt.n	b944c <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    pinMode(rstPin, OUTPUT);
   b94ba:	2101      	movs	r1, #1
   b94bc:	b280      	uxth	r0, r0
   b94be:	f004 fad9 	bl	bda74 <pinMode>
    digitalWrite(rstPin, HIGH);
   b94c2:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   b94c6:	2101      	movs	r1, #1
   b94c8:	f004 fae5 	bl	bda96 <digitalWrite>
    delay(10);                  // VDD goes high at start, pause
   b94cc:	200a      	movs	r0, #10
   b94ce:	f000 fd8b 	bl	b9fe8 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b94d2:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   b94d6:	2100      	movs	r1, #0
   b94d8:	f004 fadd 	bl	bda96 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b94dc:	200a      	movs	r0, #10
   b94de:	f000 fd83 	bl	b9fe8 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b94e2:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   b94e6:	2101      	movs	r1, #1
   b94e8:	f004 fad5 	bl	bda96 <digitalWrite>
    delay(10);
   b94ec:	200a      	movs	r0, #10
   b94ee:	f000 fd7b 	bl	b9fe8 <delay>
   b94f2:	e7ab      	b.n	b944c <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    if (!spi_dev || !spi_dev->begin()) {
   b94f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b94f6:	2800      	cmp	r0, #0
   b94f8:	d0da      	beq.n	b94b0 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   b94fa:	f7ff fd3a 	bl	b8f72 <_ZN18Adafruit_SPIDevice5beginEv>
   b94fe:	2800      	cmp	r0, #0
   b9500:	d0d6      	beq.n	b94b0 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b9502:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   b9506:	2101      	movs	r1, #1
   b9508:	f004 fab4 	bl	bda74 <pinMode>
   b950c:	e7b1      	b.n	b9472 <_ZN17Adafruit_GrayOLED5_initEhb+0x36>

000b950e <_ZN17Adafruit_GrayOLED11setContrastEh>:
    @brief  Adjust the display contrast.
    @param  level The contrast level from 0 to 0x7F
    @note   This has an immediate effect on the display, no need to call the
            display() function -- buffer contents are not changed.
*/
void Adafruit_GrayOLED::setContrast(uint8_t level) {
   b950e:	b507      	push	{r0, r1, r2, lr}
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   b9510:	2381      	movs	r3, #129	; 0x81
   b9512:	f88d 1005 	strb.w	r1, [sp, #5]
  oled_commandList(cmd, 2);
   b9516:	2202      	movs	r2, #2
   b9518:	a901      	add	r1, sp, #4
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   b951a:	f88d 3004 	strb.w	r3, [sp, #4]
  oled_commandList(cmd, 2);
   b951e:	f7ff ff50 	bl	b93c2 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
}
   b9522:	b003      	add	sp, #12
   b9524:	f85d fb04 	ldr.w	pc, [sp], #4

000b9528 <_ZN15Adafruit_SH1107D1Ev>:
    : Adafruit_SH110X(w, h, spi, dc_pin, rst_pin, cs_pin, bitrate) {}

/*!
    @brief  Destructor for Adafruit_SH1107 object.
*/
Adafruit_SH1107::~Adafruit_SH1107(void) {}
   b9528:	b510      	push	{r4, lr}
   b952a:	4b03      	ldr	r3, [pc, #12]	; (b9538 <_ZN15Adafruit_SH1107D1Ev+0x10>)
   b952c:	6003      	str	r3, [r0, #0]
   b952e:	4604      	mov	r4, r0
   b9530:	f000 f958 	bl	b97e4 <_ZN15Adafruit_SH110XD1Ev>
   b9534:	4620      	mov	r0, r4
   b9536:	bd10      	pop	{r4, pc}
   b9538:	000c1ae0 	.word	0x000c1ae0

000b953c <_ZN15Adafruit_SH1107D0Ev>:
   b953c:	b510      	push	{r4, lr}
   b953e:	4604      	mov	r4, r0
   b9540:	f7ff fff2 	bl	b9528 <_ZN15Adafruit_SH1107D1Ev>
   b9544:	4620      	mov	r0, r4
   b9546:	2158      	movs	r1, #88	; 0x58
   b9548:	f7fa fda9 	bl	b409e <_ZdlPvj>
   b954c:	4620      	mov	r0, r4
   b954e:	bd10      	pop	{r4, pc}

000b9550 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>:
Adafruit_SH1107::Adafruit_SH1107(uint16_t w, uint16_t h, TwoWire *twi,
   b9550:	b530      	push	{r4, r5, lr}
   b9552:	b085      	sub	sp, #20
   b9554:	4604      	mov	r4, r0
    : Adafruit_SH110X(w, h, twi, rst_pin, clkDuring, clkAfter) {}
   b9556:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   b9558:	9502      	str	r5, [sp, #8]
   b955a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   b955c:	9501      	str	r5, [sp, #4]
   b955e:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   b9562:	9500      	str	r5, [sp, #0]
   b9564:	f000 f924 	bl	b97b0 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>
   b9568:	4b02      	ldr	r3, [pc, #8]	; (b9574 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm+0x24>)
   b956a:	6023      	str	r3, [r4, #0]
   b956c:	4620      	mov	r0, r4
   b956e:	b005      	add	sp, #20
   b9570:	bd30      	pop	{r4, r5, pc}
   b9572:	bf00      	nop
   b9574:	000c1ae0 	.word	0x000c1ae0

000b9578 <_ZN15Adafruit_SH11075beginEhb>:
    @return true on successful allocation/init, false otherwise.
            Well-behaved code should check the return value before
            proceeding.
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SH1107::begin(uint8_t addr, bool reset) {
   b9578:	b530      	push	{r4, r5, lr}
   b957a:	4604      	mov	r4, r0
   b957c:	b085      	sub	sp, #20

  Adafruit_GrayOLED::_init(addr, reset);
   b957e:	f7ff ff5d 	bl	b943c <_ZN17Adafruit_GrayOLED5_initEhb>

  setContrast(0x2F);
   b9582:	212f      	movs	r1, #47	; 0x2f
   b9584:	4620      	mov	r0, r4
   b9586:	f7ff ffc2 	bl	b950e <_ZN17Adafruit_GrayOLED11setContrastEh>

  // the featherwing with 128x64 oled is 'rotated' so to make the splash right,
  // rotate!
  if (WIDTH == 64 && HEIGHT == 128) {
   b958a:	68a2      	ldr	r2, [r4, #8]
   b958c:	4b2f      	ldr	r3, [pc, #188]	; (b964c <_ZN15Adafruit_SH11075beginEhb+0xd4>)
   b958e:	429a      	cmp	r2, r3
   b9590:	d121      	bne.n	b95d6 <_ZN15Adafruit_SH11075beginEhb+0x5e>
    setRotation(1);
   b9592:	6823      	ldr	r3, [r4, #0]
   b9594:	2101      	movs	r1, #1
   b9596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9598:	4620      	mov	r0, r4
   b959a:	4798      	blx	r3
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   b959c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   b95a0:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   b95a4:	2320      	movs	r3, #32
   b95a6:	3a20      	subs	r2, #32
   b95a8:	3973      	subs	r1, #115	; 0x73
   b95aa:	2501      	movs	r5, #1
   b95ac:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b95b0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b95b4:	2373      	movs	r3, #115	; 0x73
   b95b6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b95ba:	9300      	str	r3, [sp, #0]
   b95bc:	f341 014f 	sbfx	r1, r1, #1, #16
   b95c0:	4b23      	ldr	r3, [pc, #140]	; (b9650 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   b95c2:	4620      	mov	r0, r4
   b95c4:	f342 024f 	sbfx	r2, r2, #1, #16
   b95c8:	f7ff fa20 	bl	b8a0c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
               splash2_data, splash2_width, splash2_height, 1);
    setRotation(0);
   b95cc:	6823      	ldr	r3, [r4, #0]
   b95ce:	2100      	movs	r1, #0
   b95d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b95d2:	4620      	mov	r0, r4
   b95d4:	4798      	blx	r3
  }
  if (WIDTH == 128 && HEIGHT == 128) {
   b95d6:	68a3      	ldr	r3, [r4, #8]
   b95d8:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   b95dc:	d117      	bne.n	b960e <_ZN15Adafruit_SH11075beginEhb+0x96>
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   b95de:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   b95e2:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   b95e6:	2320      	movs	r3, #32
   b95e8:	2001      	movs	r0, #1
   b95ea:	3a20      	subs	r2, #32
   b95ec:	3973      	subs	r1, #115	; 0x73
   b95ee:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b95f2:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b95f6:	2373      	movs	r3, #115	; 0x73
   b95f8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b95fc:	9300      	str	r3, [sp, #0]
   b95fe:	f342 024f 	sbfx	r2, r2, #1, #16
   b9602:	4b13      	ldr	r3, [pc, #76]	; (b9650 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   b9604:	f341 014f 	sbfx	r1, r1, #1, #16
   b9608:	4620      	mov	r0, r4
   b960a:	f7ff f9ff 	bl	b8a0c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
      SH110X_DISPLAYALLON_RESUME, // 0xa4
      SH110X_NORMALDISPLAY,       // 0xa6
  };
  // clang-format on

  if (!oled_commandList(init, sizeof(init))) {
   b960e:	4911      	ldr	r1, [pc, #68]	; (b9654 <_ZN15Adafruit_SH11075beginEhb+0xdc>)
   b9610:	2216      	movs	r2, #22
   b9612:	4620      	mov	r0, r4
   b9614:	f7ff fed5 	bl	b93c2 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   b9618:	4605      	mov	r5, r0
   b961a:	b918      	cbnz	r0, b9624 <_ZN15Adafruit_SH11075beginEhb+0xac>
    return false;
   b961c:	2500      	movs	r5, #0

  delay(100);                     // 100ms delay recommended
  oled_command(SH110X_DISPLAYON); // 0xaf

  return true; // Success
}
   b961e:	4628      	mov	r0, r5
   b9620:	b005      	add	sp, #20
   b9622:	bd30      	pop	{r4, r5, pc}
  if (WIDTH == 128 && HEIGHT == 128) {
   b9624:	68a3      	ldr	r3, [r4, #8]
   b9626:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   b962a:	d007      	beq.n	b963c <_ZN15Adafruit_SH11075beginEhb+0xc4>
  delay(100);                     // 100ms delay recommended
   b962c:	2064      	movs	r0, #100	; 0x64
   b962e:	f000 fcdb 	bl	b9fe8 <delay>
  oled_command(SH110X_DISPLAYON); // 0xaf
   b9632:	21af      	movs	r1, #175	; 0xaf
   b9634:	4620      	mov	r0, r4
   b9636:	f7ff fe99 	bl	b936c <_ZN17Adafruit_GrayOLED12oled_commandEh>
  return true; // Success
   b963a:	e7f0      	b.n	b961e <_ZN15Adafruit_SH11075beginEhb+0xa6>
    if (!oled_commandList(init_128x128, sizeof(init_128x128))) {
   b963c:	4906      	ldr	r1, [pc, #24]	; (b9658 <_ZN15Adafruit_SH11075beginEhb+0xe0>)
   b963e:	2204      	movs	r2, #4
   b9640:	4620      	mov	r0, r4
   b9642:	f7ff febe 	bl	b93c2 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   b9646:	2800      	cmp	r0, #0
   b9648:	d1f0      	bne.n	b962c <_ZN15Adafruit_SH11075beginEhb+0xb4>
   b964a:	e7e7      	b.n	b961c <_ZN15Adafruit_SH11075beginEhb+0xa4>
   b964c:	00800040 	.word	0x00800040
   b9650:	000c18f8 	.word	0x000c18f8
   b9654:	000c1b38 	.word	0x000c1b38
   b9658:	000c1b34 	.word	0x000c1b34

000b965c <_ZN15Adafruit_SH110X7displayEv>:
    @brief  Push data currently in RAM to SH110X display.
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SH110X::display(void) {
   b965c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9660:	4604      	mov	r4, r0
   b9662:	b08b      	sub	sp, #44	; 0x2c
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   b9664:	f000 f97c 	bl	b9960 <os_thread_yield>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();

  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b9668:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
  Serial.print(", ");
  Serial.print(window_y2);
  Serial.println(")");
  */

  uint8_t first_page = window_y1 / 8;
   b966c:	f9b4 603a 	ldrsh.w	r6, [r4, #58]	; 0x3a
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b9670:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
   b9674:	f894 9038 	ldrb.w	r9, [r4, #56]	; 0x38
   b9678:	1dda      	adds	r2, r3, #7
   b967a:	bf48      	it	mi
   b967c:	f103 020e 	addmi.w	r2, r3, #14
  uint8_t dc_byte = 0x40;
   b9680:	2340      	movs	r3, #64	; 0x40
   b9682:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  uint8_t pages = ((HEIGHT + 7) / 8);
   b9686:	f3c2 03c7 	ubfx	r3, r2, #3, #8
   b968a:	9303      	str	r3, [sp, #12]
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   b968c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  uint8_t last_page = (window_y2 + 7) / 8;
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   b968e:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   b9692:	68db      	ldr	r3, [r3, #12]
  uint8_t bytes_per_page = WIDTH;
   b9694:	b2ff      	uxtb	r7, r7
  uint8_t first_page = window_y1 / 8;
   b9696:	2e00      	cmp	r6, #0
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   b9698:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   b969c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  uint8_t first_page = window_y1 / 8;
   b96a0:	bfb8      	it	lt
   b96a2:	3607      	addlt	r6, #7
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   b96a4:	b2d2      	uxtb	r2, r2
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   b96a6:	b29b      	uxth	r3, r3
  uint8_t first_page = window_y1 / 8;
   b96a8:	45b9      	cmp	r9, r7
   b96aa:	f3c6 06c7 	ubfx	r6, r6, #3, #8
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   b96ae:	bf28      	it	cs
   b96b0:	46b9      	movcs	r9, r7
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   b96b2:	9204      	str	r2, [sp, #16]
  Serial.print(page_start);
  Serial.print(" -> ");
  Serial.println(page_end);
  */

  for (uint8_t p = first_page; p < pages; p++) {
   b96b4:	b2db      	uxtb	r3, r3
    ptr = buffer + (uint16_t)p * (uint16_t)bytes_per_page;
    // fast forward to dirty rectangle beginning
    ptr += page_start;
    bytes_remaining -= page_start;
    // cut off end of dirty rectangle
    bytes_remaining -= (WIDTH - 1) - page_end;
   b96b6:	1c7a      	adds	r2, r7, #1
   b96b8:	fb06 9b07 	mla	fp, r6, r7, r9
   b96bc:	9205      	str	r2, [sp, #20]
   b96be:	9306      	str	r3, [sp, #24]
  for (uint8_t p = first_page; p < pages; p++) {
   b96c0:	9b03      	ldr	r3, [sp, #12]
   b96c2:	429e      	cmp	r6, r3
   b96c4:	d26a      	bcs.n	b979c <_ZN15Adafruit_SH110X7displayEv+0x140>
    ptr += page_start;
   b96c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bytes_remaining -= (WIDTH - 1) - page_end;
   b96c8:	8925      	ldrh	r5, [r4, #8]

    if (i2c_dev) { // I2C
      uint8_t cmd[] = {
          0x00, (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   b96ca:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
    ptr += page_start;
   b96ce:	eb03 080b 	add.w	r8, r3, fp
    bytes_remaining -= (WIDTH - 1) - page_end;
   b96d2:	9b05      	ldr	r3, [sp, #20]
   b96d4:	1b5d      	subs	r5, r3, r5
   b96d6:	9b04      	ldr	r3, [sp, #16]
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   b96d8:	444a      	add	r2, r9
    bytes_remaining -= (WIDTH - 1) - page_end;
   b96da:	441d      	add	r5, r3
    if (i2c_dev) { // I2C
   b96dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   b96de:	1110      	asrs	r0, r2, #4
    bytes_remaining -= (WIDTH - 1) - page_end;
   b96e0:	eba5 0509 	sub.w	r5, r5, r9
   b96e4:	f1a6 0150 	sub.w	r1, r6, #80	; 0x50
   b96e8:	b2ed      	uxtb	r5, r5
    if (i2c_dev) { // I2C
   b96ea:	b2c9      	uxtb	r1, r1
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   b96ec:	3010      	adds	r0, #16
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b96ee:	f002 020f 	and.w	r2, r2, #15
    if (i2c_dev) { // I2C
   b96f2:	b39b      	cbz	r3, b975c <_ZN15Adafruit_SH110X7displayEv+0x100>
      uint8_t cmd[] = {
   b96f4:	f04f 0a00 	mov.w	sl, #0
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b96f8:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
   b96fc:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26

      // Set high speed clk
      i2c_dev->setSpeed(i2c_preclk);
   b9700:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      uint8_t cmd[] = {
   b9702:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
      i2c_dev->setSpeed(i2c_preclk);
   b9706:	4618      	mov	r0, r3
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b9708:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
      i2c_dev->setSpeed(i2c_preclk);
   b970c:	f7ff fc22 	bl	b8f54 <_ZN18Adafruit_I2CDevice8setSpeedEm>

      i2c_dev->write(cmd, 4);
   b9710:	e9cd aa00 	strd	sl, sl, [sp]
   b9714:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9716:	2301      	movs	r3, #1
   b9718:	2204      	movs	r2, #4
   b971a:	a909      	add	r1, sp, #36	; 0x24
   b971c:	f7ff fbea 	bl	b8ef4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>

      while (bytes_remaining) {
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
   b9720:	f10d 0a23 	add.w	sl, sp, #35	; 0x23
   b9724:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      while (bytes_remaining) {
   b9726:	b195      	cbz	r5, b974e <_ZN15Adafruit_SH110X7displayEv+0xf2>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
   b9728:	9b06      	ldr	r3, [sp, #24]
   b972a:	42ab      	cmp	r3, r5
   b972c:	bf28      	it	cs
   b972e:	462b      	movcs	r3, r5
   b9730:	461a      	mov	r2, r3
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
   b9732:	2301      	movs	r3, #1
   b9734:	4641      	mov	r1, r8
   b9736:	e9cd a300 	strd	sl, r3, [sp]
   b973a:	9207      	str	r2, [sp, #28]
   b973c:	f7ff fbda 	bl	b8ef4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        ptr += to_write;
   b9740:	9a07      	ldr	r2, [sp, #28]
        bytes_remaining -= to_write;
   b9742:	1aad      	subs	r5, r5, r2
        ptr += to_write;
   b9744:	4490      	add	r8, r2
        bytes_remaining -= to_write;
   b9746:	b2ed      	uxtb	r5, r5
   b9748:	f000 f90a 	bl	b9960 <os_thread_yield>
#endif // PLATFORM_THREADING
}
   b974c:	e7ea      	b.n	b9724 <_ZN15Adafruit_SH110X7displayEv+0xc8>
        yield();
      }

      // Set low speed clk
      i2c_dev->setSpeed(i2c_postclk);
   b974e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   b9750:	f7ff fc00 	bl	b8f54 <_ZN18Adafruit_I2CDevice8setSpeedEm>
  for (uint8_t p = first_page; p < pages; p++) {
   b9754:	3601      	adds	r6, #1
   b9756:	b2f6      	uxtb	r6, r6
   b9758:	44bb      	add	fp, r7
   b975a:	e7b1      	b.n	b96c0 <_ZN15Adafruit_SH110X7displayEv+0x64>

    } else { // SPI
      uint8_t cmd[] = {
          (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b975c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   b9760:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25

      digitalWrite(dcPin, LOW);
   b9764:	4619      	mov	r1, r3
   b9766:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b976a:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
      digitalWrite(dcPin, LOW);
   b976e:	9307      	str	r3, [sp, #28]
   b9770:	f004 f991 	bl	bda96 <digitalWrite>
      spi_dev->write(cmd, 3);
   b9774:	9b07      	ldr	r3, [sp, #28]
   b9776:	9300      	str	r3, [sp, #0]
   b9778:	2203      	movs	r2, #3
   b977a:	a909      	add	r1, sp, #36	; 0x24
   b977c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b977e:	f7ff fcea 	bl	b9156 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
      digitalWrite(dcPin, HIGH);
   b9782:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   b9786:	2101      	movs	r1, #1
   b9788:	f004 f985 	bl	bda96 <digitalWrite>
      spi_dev->write(ptr, bytes_remaining);
   b978c:	9b07      	ldr	r3, [sp, #28]
   b978e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9790:	9300      	str	r3, [sp, #0]
   b9792:	462a      	mov	r2, r5
   b9794:	4641      	mov	r1, r8
   b9796:	f7ff fcde 	bl	b9156 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   b979a:	e7db      	b.n	b9754 <_ZN15Adafruit_SH110X7displayEv+0xf8>
    }
  }
  // reset dirty window
  window_x1 = 1024;
  window_y1 = 1024;
  window_x2 = -1;
   b979c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
   b97a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b97a4:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  window_y2 = -1;
}
   b97a8:	b00b      	add	sp, #44	; 0x2c
   b97aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000b97b0 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>:
Adafruit_SH110X::Adafruit_SH110X(uint16_t w, uint16_t h, TwoWire *twi,
   b97b0:	b530      	push	{r4, r5, lr}
   b97b2:	b085      	sub	sp, #20
   b97b4:	4604      	mov	r4, r0
    : Adafruit_GrayOLED(1, w, h, twi, rst_pin, clkDuring, clkAfter) {}
   b97b6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   b97b8:	9503      	str	r5, [sp, #12]
   b97ba:	9d09      	ldr	r5, [sp, #36]	; 0x24
   b97bc:	9502      	str	r5, [sp, #8]
   b97be:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   b97c2:	e9cd 3500 	strd	r3, r5, [sp]
   b97c6:	4613      	mov	r3, r2
   b97c8:	460a      	mov	r2, r1
   b97ca:	2101      	movs	r1, #1
   b97cc:	f7ff fd90 	bl	b92f0 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>
   b97d0:	4b03      	ldr	r3, [pc, #12]	; (b97e0 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm+0x30>)
   b97d2:	6023      	str	r3, [r4, #0]
   b97d4:	4620      	mov	r0, r4
   b97d6:	2300      	movs	r3, #0
   b97d8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b97dc:	b005      	add	sp, #20
   b97de:	bd30      	pop	{r4, r5, pc}
   b97e0:	000c1b58 	.word	0x000c1b58

000b97e4 <_ZN15Adafruit_SH110XD1Ev>:
Adafruit_SH110X::~Adafruit_SH110X(void) {}
   b97e4:	b510      	push	{r4, lr}
   b97e6:	4b03      	ldr	r3, [pc, #12]	; (b97f4 <_ZN15Adafruit_SH110XD1Ev+0x10>)
   b97e8:	6003      	str	r3, [r0, #0]
   b97ea:	4604      	mov	r4, r0
   b97ec:	f7ff fda2 	bl	b9334 <_ZN17Adafruit_GrayOLEDD1Ev>
   b97f0:	4620      	mov	r0, r4
   b97f2:	bd10      	pop	{r4, pc}
   b97f4:	000c1b58 	.word	0x000c1b58

000b97f8 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b97f8:	b508      	push	{r3, lr}
   b97fa:	4b02      	ldr	r3, [pc, #8]	; (b9804 <hal_ble_stack_init+0xc>)
   b97fc:	681b      	ldr	r3, [r3, #0]
   b97fe:	689b      	ldr	r3, [r3, #8]
   b9800:	9301      	str	r3, [sp, #4]
   b9802:	bd08      	pop	{r3, pc}
   b9804:	00030278 	.word	0x00030278

000b9808 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   b9808:	b508      	push	{r3, lr}
   b980a:	4b02      	ldr	r3, [pc, #8]	; (b9814 <hal_ble_gap_set_tx_power+0xc>)
   b980c:	681b      	ldr	r3, [r3, #0]
   b980e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9810:	9301      	str	r3, [sp, #4]
   b9812:	bd08      	pop	{r3, pc}
   b9814:	00030278 	.word	0x00030278

000b9818 <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   b9818:	b508      	push	{r3, lr}
   b981a:	4b02      	ldr	r3, [pc, #8]	; (b9824 <hal_ble_gap_set_scan_parameters+0xc>)
   b981c:	681b      	ldr	r3, [r3, #0]
   b981e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b9820:	9301      	str	r3, [sp, #4]
   b9822:	bd08      	pop	{r3, pc}
   b9824:	00030278 	.word	0x00030278

000b9828 <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   b9828:	b508      	push	{r3, lr}
   b982a:	4b02      	ldr	r3, [pc, #8]	; (b9834 <hal_ble_gap_get_scan_parameters+0xc>)
   b982c:	681b      	ldr	r3, [r3, #0]
   b982e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b9830:	9301      	str	r3, [sp, #4]
   b9832:	bd08      	pop	{r3, pc}
   b9834:	00030278 	.word	0x00030278

000b9838 <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b9838:	b508      	push	{r3, lr}
   b983a:	4b02      	ldr	r3, [pc, #8]	; (b9844 <hal_ble_gap_start_scan+0xc>)
   b983c:	681b      	ldr	r3, [r3, #0]
   b983e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9840:	9301      	str	r3, [sp, #4]
   b9842:	bd08      	pop	{r3, pc}
   b9844:	00030278 	.word	0x00030278

000b9848 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b9848:	b508      	push	{r3, lr}
   b984a:	4b03      	ldr	r3, [pc, #12]	; (b9858 <hal_ble_gap_stop_scan+0x10>)
   b984c:	681b      	ldr	r3, [r3, #0]
   b984e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b9852:	9301      	str	r3, [sp, #4]
   b9854:	bd08      	pop	{r3, pc}
   b9856:	0000      	.short	0x0000
   b9858:	00030278 	.word	0x00030278

000b985c <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b985c:	b508      	push	{r3, lr}
   b985e:	4b03      	ldr	r3, [pc, #12]	; (b986c <hal_ble_gap_disconnect+0x10>)
   b9860:	681b      	ldr	r3, [r3, #0]
   b9862:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b9866:	9301      	str	r3, [sp, #4]
   b9868:	bd08      	pop	{r3, pc}
   b986a:	0000      	.short	0x0000
   b986c:	00030278 	.word	0x00030278

000b9870 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9870:	b508      	push	{r3, lr}
   b9872:	4b03      	ldr	r3, [pc, #12]	; (b9880 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b9874:	681b      	ldr	r3, [r3, #0]
   b9876:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b987a:	9301      	str	r3, [sp, #4]
   b987c:	bd08      	pop	{r3, pc}
   b987e:	0000      	.short	0x0000
   b9880:	00030278 	.word	0x00030278

000b9884 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b9884:	b508      	push	{r3, lr}
   b9886:	4b03      	ldr	r3, [pc, #12]	; (b9894 <hal_ble_gatt_client_discover_all_services+0x10>)
   b9888:	681b      	ldr	r3, [r3, #0]
   b988a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b988e:	9301      	str	r3, [sp, #4]
   b9890:	bd08      	pop	{r3, pc}
   b9892:	0000      	.short	0x0000
   b9894:	00030278 	.word	0x00030278

000b9898 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b9898:	b508      	push	{r3, lr}
   b989a:	4b03      	ldr	r3, [pc, #12]	; (b98a8 <hal_ble_gatt_client_discover_characteristics+0x10>)
   b989c:	681b      	ldr	r3, [r3, #0]
   b989e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b98a2:	9301      	str	r3, [sp, #4]
   b98a4:	bd08      	pop	{r3, pc}
   b98a6:	0000      	.short	0x0000
   b98a8:	00030278 	.word	0x00030278

000b98ac <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b98ac:	b508      	push	{r3, lr}
   b98ae:	4b03      	ldr	r3, [pc, #12]	; (b98bc <hal_ble_gatt_client_write_with_response+0x10>)
   b98b0:	681b      	ldr	r3, [r3, #0]
   b98b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b98b6:	9301      	str	r3, [sp, #4]
   b98b8:	bd08      	pop	{r3, pc}
   b98ba:	0000      	.short	0x0000
   b98bc:	00030278 	.word	0x00030278

000b98c0 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b98c0:	b508      	push	{r3, lr}
   b98c2:	4b03      	ldr	r3, [pc, #12]	; (b98d0 <hal_ble_gatt_client_write_without_response+0x10>)
   b98c4:	681b      	ldr	r3, [r3, #0]
   b98c6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b98ca:	9301      	str	r3, [sp, #4]
   b98cc:	bd08      	pop	{r3, pc}
   b98ce:	0000      	.short	0x0000
   b98d0:	00030278 	.word	0x00030278

000b98d4 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b98d4:	b508      	push	{r3, lr}
   b98d6:	4b03      	ldr	r3, [pc, #12]	; (b98e4 <hal_ble_gatt_client_read+0x10>)
   b98d8:	681b      	ldr	r3, [r3, #0]
   b98da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b98de:	9301      	str	r3, [sp, #4]
   b98e0:	bd08      	pop	{r3, pc}
   b98e2:	0000      	.short	0x0000
   b98e4:	00030278 	.word	0x00030278

000b98e8 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b98e8:	b508      	push	{r3, lr}
   b98ea:	4b03      	ldr	r3, [pc, #12]	; (b98f8 <hal_ble_gap_connect+0x10>)
   b98ec:	681b      	ldr	r3, [r3, #0]
   b98ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b98f2:	9301      	str	r3, [sp, #4]
   b98f4:	bd08      	pop	{r3, pc}
   b98f6:	0000      	.short	0x0000
   b98f8:	00030278 	.word	0x00030278

000b98fc <hal_ble_gap_get_connection_info>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   b98fc:	b508      	push	{r3, lr}
   b98fe:	4b03      	ldr	r3, [pc, #12]	; (b990c <hal_ble_gap_get_connection_info+0x10>)
   b9900:	681b      	ldr	r3, [r3, #0]
   b9902:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   b9906:	9301      	str	r3, [sp, #4]
   b9908:	bd08      	pop	{r3, pc}
   b990a:	0000      	.short	0x0000
   b990c:	00030278 	.word	0x00030278

000b9910 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b9910:	b508      	push	{r3, lr}
   b9912:	4b03      	ldr	r3, [pc, #12]	; (b9920 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b9914:	681b      	ldr	r3, [r3, #0]
   b9916:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b991a:	9301      	str	r3, [sp, #4]
   b991c:	bd08      	pop	{r3, pc}
   b991e:	0000      	.short	0x0000
   b9920:	00030278 	.word	0x00030278

000b9924 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b9924:	b508      	push	{r3, lr}
   b9926:	4b03      	ldr	r3, [pc, #12]	; (b9934 <hal_ble_gatt_client_configure_cccd+0x10>)
   b9928:	681b      	ldr	r3, [r3, #0]
   b992a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b992e:	9301      	str	r3, [sp, #4]
   b9930:	bd08      	pop	{r3, pc}
   b9932:	0000      	.short	0x0000
   b9934:	00030278 	.word	0x00030278

000b9938 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9938:	b508      	push	{r3, lr}
   b993a:	4b03      	ldr	r3, [pc, #12]	; (b9948 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b993c:	681b      	ldr	r3, [r3, #0]
   b993e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b9942:	9301      	str	r3, [sp, #4]
   b9944:	bd08      	pop	{r3, pc}
   b9946:	0000      	.short	0x0000
   b9948:	00030278 	.word	0x00030278

000b994c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b994c:	b508      	push	{r3, lr}
   b994e:	4b03      	ldr	r3, [pc, #12]	; (b995c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b9950:	681b      	ldr	r3, [r3, #0]
   b9952:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b9956:	9301      	str	r3, [sp, #4]
   b9958:	bd08      	pop	{r3, pc}
   b995a:	0000      	.short	0x0000
   b995c:	00030278 	.word	0x00030278

000b9960 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b9960:	b508      	push	{r3, lr}
   b9962:	4b02      	ldr	r3, [pc, #8]	; (b996c <os_thread_yield+0xc>)
   b9964:	681b      	ldr	r3, [r3, #0]
   b9966:	68db      	ldr	r3, [r3, #12]
   b9968:	9301      	str	r3, [sp, #4]
   b996a:	bd08      	pop	{r3, pc}
   b996c:	00030248 	.word	0x00030248

000b9970 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b9970:	b508      	push	{r3, lr}
   b9972:	4b02      	ldr	r3, [pc, #8]	; (b997c <os_thread_scheduling+0xc>)
   b9974:	681b      	ldr	r3, [r3, #0]
   b9976:	69db      	ldr	r3, [r3, #28]
   b9978:	9301      	str	r3, [sp, #4]
   b997a:	bd08      	pop	{r3, pc}
   b997c:	00030248 	.word	0x00030248

000b9980 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b9980:	b508      	push	{r3, lr}
   b9982:	4b02      	ldr	r3, [pc, #8]	; (b998c <os_timer_create+0xc>)
   b9984:	681b      	ldr	r3, [r3, #0]
   b9986:	6a1b      	ldr	r3, [r3, #32]
   b9988:	9301      	str	r3, [sp, #4]
   b998a:	bd08      	pop	{r3, pc}
   b998c:	00030248 	.word	0x00030248

000b9990 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b9990:	b508      	push	{r3, lr}
   b9992:	4b02      	ldr	r3, [pc, #8]	; (b999c <os_timer_destroy+0xc>)
   b9994:	681b      	ldr	r3, [r3, #0]
   b9996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9998:	9301      	str	r3, [sp, #4]
   b999a:	bd08      	pop	{r3, pc}
   b999c:	00030248 	.word	0x00030248

000b99a0 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b99a0:	b508      	push	{r3, lr}
   b99a2:	4b02      	ldr	r3, [pc, #8]	; (b99ac <os_timer_get_id+0xc>)
   b99a4:	681b      	ldr	r3, [r3, #0]
   b99a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b99a8:	9301      	str	r3, [sp, #4]
   b99aa:	bd08      	pop	{r3, pc}
   b99ac:	00030248 	.word	0x00030248

000b99b0 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b99b0:	b508      	push	{r3, lr}
   b99b2:	4b02      	ldr	r3, [pc, #8]	; (b99bc <os_timer_change+0xc>)
   b99b4:	681b      	ldr	r3, [r3, #0]
   b99b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b99b8:	9301      	str	r3, [sp, #4]
   b99ba:	bd08      	pop	{r3, pc}
   b99bc:	00030248 	.word	0x00030248

000b99c0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b99c0:	b508      	push	{r3, lr}
   b99c2:	4b02      	ldr	r3, [pc, #8]	; (b99cc <os_mutex_recursive_create+0xc>)
   b99c4:	681b      	ldr	r3, [r3, #0]
   b99c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b99c8:	9301      	str	r3, [sp, #4]
   b99ca:	bd08      	pop	{r3, pc}
   b99cc:	00030248 	.word	0x00030248

000b99d0 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b99d0:	b508      	push	{r3, lr}
   b99d2:	4b02      	ldr	r3, [pc, #8]	; (b99dc <os_mutex_recursive_lock+0xc>)
   b99d4:	681b      	ldr	r3, [r3, #0]
   b99d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b99d8:	9301      	str	r3, [sp, #4]
   b99da:	bd08      	pop	{r3, pc}
   b99dc:	00030248 	.word	0x00030248

000b99e0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b99e0:	b508      	push	{r3, lr}
   b99e2:	4b02      	ldr	r3, [pc, #8]	; (b99ec <os_mutex_recursive_unlock+0xc>)
   b99e4:	681b      	ldr	r3, [r3, #0]
   b99e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b99e8:	9301      	str	r3, [sp, #4]
   b99ea:	bd08      	pop	{r3, pc}
   b99ec:	00030248 	.word	0x00030248

000b99f0 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b99f0:	b508      	push	{r3, lr}
   b99f2:	4b02      	ldr	r3, [pc, #8]	; (b99fc <os_timer_set_id+0xc>)
   b99f4:	681b      	ldr	r3, [r3, #0]
   b99f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b99f8:	9301      	str	r3, [sp, #4]
   b99fa:	bd08      	pop	{r3, pc}
   b99fc:	00030248 	.word	0x00030248

000b9a00 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b9a00:	b508      	push	{r3, lr}
   b9a02:	4b02      	ldr	r3, [pc, #8]	; (b9a0c <HAL_RNG_GetRandomNumber+0xc>)
   b9a04:	681b      	ldr	r3, [r3, #0]
   b9a06:	685b      	ldr	r3, [r3, #4]
   b9a08:	9301      	str	r3, [sp, #4]
   b9a0a:	bd08      	pop	{r3, pc}
   b9a0c:	00030218 	.word	0x00030218

000b9a10 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b9a10:	b508      	push	{r3, lr}
   b9a12:	4b02      	ldr	r3, [pc, #8]	; (b9a1c <HAL_Delay_Microseconds+0xc>)
   b9a14:	681b      	ldr	r3, [r3, #0]
   b9a16:	68db      	ldr	r3, [r3, #12]
   b9a18:	9301      	str	r3, [sp, #4]
   b9a1a:	bd08      	pop	{r3, pc}
   b9a1c:	00030218 	.word	0x00030218

000b9a20 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b9a20:	b508      	push	{r3, lr}
   b9a22:	4b02      	ldr	r3, [pc, #8]	; (b9a2c <HAL_Timer_Get_Micro_Seconds+0xc>)
   b9a24:	681b      	ldr	r3, [r3, #0]
   b9a26:	691b      	ldr	r3, [r3, #16]
   b9a28:	9301      	str	r3, [sp, #4]
   b9a2a:	bd08      	pop	{r3, pc}
   b9a2c:	00030218 	.word	0x00030218

000b9a30 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b9a30:	b508      	push	{r3, lr}
   b9a32:	4b02      	ldr	r3, [pc, #8]	; (b9a3c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b9a34:	681b      	ldr	r3, [r3, #0]
   b9a36:	695b      	ldr	r3, [r3, #20]
   b9a38:	9301      	str	r3, [sp, #4]
   b9a3a:	bd08      	pop	{r3, pc}
   b9a3c:	00030218 	.word	0x00030218

000b9a40 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b9a40:	b508      	push	{r3, lr}
   b9a42:	4b02      	ldr	r3, [pc, #8]	; (b9a4c <hal_rtc_time_is_valid+0xc>)
   b9a44:	681b      	ldr	r3, [r3, #0]
   b9a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b9a48:	9301      	str	r3, [sp, #4]
   b9a4a:	bd08      	pop	{r3, pc}
   b9a4c:	00030218 	.word	0x00030218

000b9a50 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b9a50:	b508      	push	{r3, lr}
   b9a52:	4b02      	ldr	r3, [pc, #8]	; (b9a5c <hal_rtc_get_time+0xc>)
   b9a54:	681b      	ldr	r3, [r3, #0]
   b9a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b9a58:	9301      	str	r3, [sp, #4]
   b9a5a:	bd08      	pop	{r3, pc}
   b9a5c:	00030218 	.word	0x00030218

000b9a60 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b9a60:	b508      	push	{r3, lr}
   b9a62:	4b02      	ldr	r3, [pc, #8]	; (b9a6c <HAL_Validate_Pin_Function+0xc>)
   b9a64:	681b      	ldr	r3, [r3, #0]
   b9a66:	685b      	ldr	r3, [r3, #4]
   b9a68:	9301      	str	r3, [sp, #4]
   b9a6a:	bd08      	pop	{r3, pc}
   b9a6c:	0003022c 	.word	0x0003022c

000b9a70 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b9a70:	b508      	push	{r3, lr}
   b9a72:	4b02      	ldr	r3, [pc, #8]	; (b9a7c <HAL_Pin_Mode+0xc>)
   b9a74:	681b      	ldr	r3, [r3, #0]
   b9a76:	689b      	ldr	r3, [r3, #8]
   b9a78:	9301      	str	r3, [sp, #4]
   b9a7a:	bd08      	pop	{r3, pc}
   b9a7c:	0003022c 	.word	0x0003022c

000b9a80 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b9a80:	b508      	push	{r3, lr}
   b9a82:	4b02      	ldr	r3, [pc, #8]	; (b9a8c <HAL_Get_Pin_Mode+0xc>)
   b9a84:	681b      	ldr	r3, [r3, #0]
   b9a86:	68db      	ldr	r3, [r3, #12]
   b9a88:	9301      	str	r3, [sp, #4]
   b9a8a:	bd08      	pop	{r3, pc}
   b9a8c:	0003022c 	.word	0x0003022c

000b9a90 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b9a90:	b508      	push	{r3, lr}
   b9a92:	4b02      	ldr	r3, [pc, #8]	; (b9a9c <HAL_GPIO_Write+0xc>)
   b9a94:	681b      	ldr	r3, [r3, #0]
   b9a96:	691b      	ldr	r3, [r3, #16]
   b9a98:	9301      	str	r3, [sp, #4]
   b9a9a:	bd08      	pop	{r3, pc}
   b9a9c:	0003022c 	.word	0x0003022c

000b9aa0 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b9aa0:	b508      	push	{r3, lr}
   b9aa2:	4b02      	ldr	r3, [pc, #8]	; (b9aac <HAL_Interrupts_Attach+0xc>)
   b9aa4:	681b      	ldr	r3, [r3, #0]
   b9aa6:	699b      	ldr	r3, [r3, #24]
   b9aa8:	9301      	str	r3, [sp, #4]
   b9aaa:	bd08      	pop	{r3, pc}
   b9aac:	0003022c 	.word	0x0003022c

000b9ab0 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b9ab0:	b508      	push	{r3, lr}
   b9ab2:	4b02      	ldr	r3, [pc, #8]	; (b9abc <HAL_Interrupts_Detach+0xc>)
   b9ab4:	681b      	ldr	r3, [r3, #0]
   b9ab6:	69db      	ldr	r3, [r3, #28]
   b9ab8:	9301      	str	r3, [sp, #4]
   b9aba:	bd08      	pop	{r3, pc}
   b9abc:	0003022c 	.word	0x0003022c

000b9ac0 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b9ac0:	b508      	push	{r3, lr}
   b9ac2:	4b02      	ldr	r3, [pc, #8]	; (b9acc <hal_adc_read+0xc>)
   b9ac4:	681b      	ldr	r3, [r3, #0]
   b9ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9ac8:	9301      	str	r3, [sp, #4]
   b9aca:	bd08      	pop	{r3, pc}
   b9acc:	0003022c 	.word	0x0003022c

000b9ad0 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b9ad0:	b508      	push	{r3, lr}
   b9ad2:	4b02      	ldr	r3, [pc, #8]	; (b9adc <hal_i2c_set_speed+0xc>)
   b9ad4:	681b      	ldr	r3, [r3, #0]
   b9ad6:	681b      	ldr	r3, [r3, #0]
   b9ad8:	9301      	str	r3, [sp, #4]
   b9ada:	bd08      	pop	{r3, pc}
   b9adc:	00030228 	.word	0x00030228

000b9ae0 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b9ae0:	b508      	push	{r3, lr}
   b9ae2:	4b02      	ldr	r3, [pc, #8]	; (b9aec <hal_i2c_begin+0xc>)
   b9ae4:	681b      	ldr	r3, [r3, #0]
   b9ae6:	68db      	ldr	r3, [r3, #12]
   b9ae8:	9301      	str	r3, [sp, #4]
   b9aea:	bd08      	pop	{r3, pc}
   b9aec:	00030228 	.word	0x00030228

000b9af0 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b9af0:	b508      	push	{r3, lr}
   b9af2:	4b02      	ldr	r3, [pc, #8]	; (b9afc <hal_i2c_begin_transmission+0xc>)
   b9af4:	681b      	ldr	r3, [r3, #0]
   b9af6:	699b      	ldr	r3, [r3, #24]
   b9af8:	9301      	str	r3, [sp, #4]
   b9afa:	bd08      	pop	{r3, pc}
   b9afc:	00030228 	.word	0x00030228

000b9b00 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b9b00:	b508      	push	{r3, lr}
   b9b02:	4b02      	ldr	r3, [pc, #8]	; (b9b0c <hal_i2c_end_transmission+0xc>)
   b9b04:	681b      	ldr	r3, [r3, #0]
   b9b06:	69db      	ldr	r3, [r3, #28]
   b9b08:	9301      	str	r3, [sp, #4]
   b9b0a:	bd08      	pop	{r3, pc}
   b9b0c:	00030228 	.word	0x00030228

000b9b10 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b9b10:	b508      	push	{r3, lr}
   b9b12:	4b02      	ldr	r3, [pc, #8]	; (b9b1c <hal_i2c_write+0xc>)
   b9b14:	681b      	ldr	r3, [r3, #0]
   b9b16:	6a1b      	ldr	r3, [r3, #32]
   b9b18:	9301      	str	r3, [sp, #4]
   b9b1a:	bd08      	pop	{r3, pc}
   b9b1c:	00030228 	.word	0x00030228

000b9b20 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b9b20:	b508      	push	{r3, lr}
   b9b22:	4b02      	ldr	r3, [pc, #8]	; (b9b2c <hal_i2c_available+0xc>)
   b9b24:	681b      	ldr	r3, [r3, #0]
   b9b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9b28:	9301      	str	r3, [sp, #4]
   b9b2a:	bd08      	pop	{r3, pc}
   b9b2c:	00030228 	.word	0x00030228

000b9b30 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b9b30:	b508      	push	{r3, lr}
   b9b32:	4b02      	ldr	r3, [pc, #8]	; (b9b3c <hal_i2c_read+0xc>)
   b9b34:	681b      	ldr	r3, [r3, #0]
   b9b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9b38:	9301      	str	r3, [sp, #4]
   b9b3a:	bd08      	pop	{r3, pc}
   b9b3c:	00030228 	.word	0x00030228

000b9b40 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b9b40:	b508      	push	{r3, lr}
   b9b42:	4b02      	ldr	r3, [pc, #8]	; (b9b4c <hal_i2c_peek+0xc>)
   b9b44:	681b      	ldr	r3, [r3, #0]
   b9b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9b48:	9301      	str	r3, [sp, #4]
   b9b4a:	bd08      	pop	{r3, pc}
   b9b4c:	00030228 	.word	0x00030228

000b9b50 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b9b50:	b508      	push	{r3, lr}
   b9b52:	4b02      	ldr	r3, [pc, #8]	; (b9b5c <hal_i2c_flush+0xc>)
   b9b54:	681b      	ldr	r3, [r3, #0]
   b9b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9b58:	9301      	str	r3, [sp, #4]
   b9b5a:	bd08      	pop	{r3, pc}
   b9b5c:	00030228 	.word	0x00030228

000b9b60 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b9b60:	b508      	push	{r3, lr}
   b9b62:	4b02      	ldr	r3, [pc, #8]	; (b9b6c <hal_i2c_is_enabled+0xc>)
   b9b64:	681b      	ldr	r3, [r3, #0]
   b9b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9b68:	9301      	str	r3, [sp, #4]
   b9b6a:	bd08      	pop	{r3, pc}
   b9b6c:	00030228 	.word	0x00030228

000b9b70 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b9b70:	b508      	push	{r3, lr}
   b9b72:	4b02      	ldr	r3, [pc, #8]	; (b9b7c <hal_i2c_init+0xc>)
   b9b74:	681b      	ldr	r3, [r3, #0]
   b9b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9b78:	9301      	str	r3, [sp, #4]
   b9b7a:	bd08      	pop	{r3, pc}
   b9b7c:	00030228 	.word	0x00030228

000b9b80 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b9b80:	b508      	push	{r3, lr}
   b9b82:	4b02      	ldr	r3, [pc, #8]	; (b9b8c <inet_inet_ntop+0xc>)
   b9b84:	681b      	ldr	r3, [r3, #0]
   b9b86:	695b      	ldr	r3, [r3, #20]
   b9b88:	9301      	str	r3, [sp, #4]
   b9b8a:	bd08      	pop	{r3, pc}
   b9b8c:	00030264 	.word	0x00030264

000b9b90 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b9b90:	b508      	push	{r3, lr}
   b9b92:	4b02      	ldr	r3, [pc, #8]	; (b9b9c <netdb_freeaddrinfo+0xc>)
   b9b94:	681b      	ldr	r3, [r3, #0]
   b9b96:	689b      	ldr	r3, [r3, #8]
   b9b98:	9301      	str	r3, [sp, #4]
   b9b9a:	bd08      	pop	{r3, pc}
   b9b9c:	00030268 	.word	0x00030268

000b9ba0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b9ba0:	b508      	push	{r3, lr}
   b9ba2:	4b02      	ldr	r3, [pc, #8]	; (b9bac <netdb_getaddrinfo+0xc>)
   b9ba4:	681b      	ldr	r3, [r3, #0]
   b9ba6:	68db      	ldr	r3, [r3, #12]
   b9ba8:	9301      	str	r3, [sp, #4]
   b9baa:	bd08      	pop	{r3, pc}
   b9bac:	00030268 	.word	0x00030268

000b9bb0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b9bb0:	b508      	push	{r3, lr}
   b9bb2:	4b02      	ldr	r3, [pc, #8]	; (b9bbc <hal_spi_begin+0xc>)
   b9bb4:	681b      	ldr	r3, [r3, #0]
   b9bb6:	681b      	ldr	r3, [r3, #0]
   b9bb8:	9301      	str	r3, [sp, #4]
   b9bba:	bd08      	pop	{r3, pc}
   b9bbc:	00030230 	.word	0x00030230

000b9bc0 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b9bc0:	b508      	push	{r3, lr}
   b9bc2:	4b02      	ldr	r3, [pc, #8]	; (b9bcc <hal_spi_transfer+0xc>)
   b9bc4:	681b      	ldr	r3, [r3, #0]
   b9bc6:	695b      	ldr	r3, [r3, #20]
   b9bc8:	9301      	str	r3, [sp, #4]
   b9bca:	bd08      	pop	{r3, pc}
   b9bcc:	00030230 	.word	0x00030230

000b9bd0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b9bd0:	b508      	push	{r3, lr}
   b9bd2:	4b02      	ldr	r3, [pc, #8]	; (b9bdc <hal_spi_init+0xc>)
   b9bd4:	681b      	ldr	r3, [r3, #0]
   b9bd6:	69db      	ldr	r3, [r3, #28]
   b9bd8:	9301      	str	r3, [sp, #4]
   b9bda:	bd08      	pop	{r3, pc}
   b9bdc:	00030230 	.word	0x00030230

000b9be0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b9be0:	b508      	push	{r3, lr}
   b9be2:	4b02      	ldr	r3, [pc, #8]	; (b9bec <hal_spi_is_enabled+0xc>)
   b9be4:	681b      	ldr	r3, [r3, #0]
   b9be6:	6a1b      	ldr	r3, [r3, #32]
   b9be8:	9301      	str	r3, [sp, #4]
   b9bea:	bd08      	pop	{r3, pc}
   b9bec:	00030230 	.word	0x00030230

000b9bf0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b9bf0:	b508      	push	{r3, lr}
   b9bf2:	4b02      	ldr	r3, [pc, #8]	; (b9bfc <hal_spi_info+0xc>)
   b9bf4:	681b      	ldr	r3, [r3, #0]
   b9bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9bf8:	9301      	str	r3, [sp, #4]
   b9bfa:	bd08      	pop	{r3, pc}
   b9bfc:	00030230 	.word	0x00030230

000b9c00 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b9c00:	b508      	push	{r3, lr}
   b9c02:	4b02      	ldr	r3, [pc, #8]	; (b9c0c <hal_spi_transfer_dma+0xc>)
   b9c04:	681b      	ldr	r3, [r3, #0]
   b9c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9c08:	9301      	str	r3, [sp, #4]
   b9c0a:	bd08      	pop	{r3, pc}
   b9c0c:	00030230 	.word	0x00030230

000b9c10 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b9c10:	b508      	push	{r3, lr}
   b9c12:	4b02      	ldr	r3, [pc, #8]	; (b9c1c <hal_spi_transfer_dma_status+0xc>)
   b9c14:	681b      	ldr	r3, [r3, #0]
   b9c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b9c18:	9301      	str	r3, [sp, #4]
   b9c1a:	bd08      	pop	{r3, pc}
   b9c1c:	00030230 	.word	0x00030230

000b9c20 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b9c20:	b508      	push	{r3, lr}
   b9c22:	4b02      	ldr	r3, [pc, #8]	; (b9c2c <hal_spi_set_settings+0xc>)
   b9c24:	681b      	ldr	r3, [r3, #0]
   b9c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9c28:	9301      	str	r3, [sp, #4]
   b9c2a:	bd08      	pop	{r3, pc}
   b9c2c:	00030230 	.word	0x00030230

000b9c30 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b9c30:	b508      	push	{r3, lr}
   b9c32:	4b02      	ldr	r3, [pc, #8]	; (b9c3c <hal_spi_acquire+0xc>)
   b9c34:	681b      	ldr	r3, [r3, #0]
   b9c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9c38:	9301      	str	r3, [sp, #4]
   b9c3a:	bd08      	pop	{r3, pc}
   b9c3c:	00030230 	.word	0x00030230

000b9c40 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b9c40:	b508      	push	{r3, lr}
   b9c42:	4b02      	ldr	r3, [pc, #8]	; (b9c4c <hal_spi_release+0xc>)
   b9c44:	681b      	ldr	r3, [r3, #0]
   b9c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9c48:	9301      	str	r3, [sp, #4]
   b9c4a:	bd08      	pop	{r3, pc}
   b9c4c:	00030230 	.word	0x00030230

000b9c50 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b9c50:	b508      	push	{r3, lr}
   b9c52:	4b02      	ldr	r3, [pc, #8]	; (b9c5c <hal_usart_write+0xc>)
   b9c54:	681b      	ldr	r3, [r3, #0]
   b9c56:	68db      	ldr	r3, [r3, #12]
   b9c58:	9301      	str	r3, [sp, #4]
   b9c5a:	bd08      	pop	{r3, pc}
   b9c5c:	0003023c 	.word	0x0003023c

000b9c60 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b9c60:	b508      	push	{r3, lr}
   b9c62:	4b02      	ldr	r3, [pc, #8]	; (b9c6c <hal_usart_available+0xc>)
   b9c64:	681b      	ldr	r3, [r3, #0]
   b9c66:	691b      	ldr	r3, [r3, #16]
   b9c68:	9301      	str	r3, [sp, #4]
   b9c6a:	bd08      	pop	{r3, pc}
   b9c6c:	0003023c 	.word	0x0003023c

000b9c70 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b9c70:	b508      	push	{r3, lr}
   b9c72:	4b02      	ldr	r3, [pc, #8]	; (b9c7c <hal_usart_read+0xc>)
   b9c74:	681b      	ldr	r3, [r3, #0]
   b9c76:	695b      	ldr	r3, [r3, #20]
   b9c78:	9301      	str	r3, [sp, #4]
   b9c7a:	bd08      	pop	{r3, pc}
   b9c7c:	0003023c 	.word	0x0003023c

000b9c80 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b9c80:	b508      	push	{r3, lr}
   b9c82:	4b02      	ldr	r3, [pc, #8]	; (b9c8c <hal_usart_peek+0xc>)
   b9c84:	681b      	ldr	r3, [r3, #0]
   b9c86:	699b      	ldr	r3, [r3, #24]
   b9c88:	9301      	str	r3, [sp, #4]
   b9c8a:	bd08      	pop	{r3, pc}
   b9c8c:	0003023c 	.word	0x0003023c

000b9c90 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b9c90:	b508      	push	{r3, lr}
   b9c92:	4b02      	ldr	r3, [pc, #8]	; (b9c9c <hal_usart_flush+0xc>)
   b9c94:	681b      	ldr	r3, [r3, #0]
   b9c96:	69db      	ldr	r3, [r3, #28]
   b9c98:	9301      	str	r3, [sp, #4]
   b9c9a:	bd08      	pop	{r3, pc}
   b9c9c:	0003023c 	.word	0x0003023c

000b9ca0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b9ca0:	b508      	push	{r3, lr}
   b9ca2:	4b02      	ldr	r3, [pc, #8]	; (b9cac <hal_usart_is_enabled+0xc>)
   b9ca4:	681b      	ldr	r3, [r3, #0]
   b9ca6:	6a1b      	ldr	r3, [r3, #32]
   b9ca8:	9301      	str	r3, [sp, #4]
   b9caa:	bd08      	pop	{r3, pc}
   b9cac:	0003023c 	.word	0x0003023c

000b9cb0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b9cb0:	b508      	push	{r3, lr}
   b9cb2:	4b02      	ldr	r3, [pc, #8]	; (b9cbc <hal_usart_available_data_for_write+0xc>)
   b9cb4:	681b      	ldr	r3, [r3, #0]
   b9cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9cb8:	9301      	str	r3, [sp, #4]
   b9cba:	bd08      	pop	{r3, pc}
   b9cbc:	0003023c 	.word	0x0003023c

000b9cc0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b9cc0:	b508      	push	{r3, lr}
   b9cc2:	4b02      	ldr	r3, [pc, #8]	; (b9ccc <hal_usart_begin_config+0xc>)
   b9cc4:	681b      	ldr	r3, [r3, #0]
   b9cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9cc8:	9301      	str	r3, [sp, #4]
   b9cca:	bd08      	pop	{r3, pc}
   b9ccc:	0003023c 	.word	0x0003023c

000b9cd0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b9cd0:	b508      	push	{r3, lr}
   b9cd2:	4b02      	ldr	r3, [pc, #8]	; (b9cdc <hal_usart_init_ex+0xc>)
   b9cd4:	681b      	ldr	r3, [r3, #0]
   b9cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9cd8:	9301      	str	r3, [sp, #4]
   b9cda:	bd08      	pop	{r3, pc}
   b9cdc:	0003023c 	.word	0x0003023c

000b9ce0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b9ce0:	b508      	push	{r3, lr}
   b9ce2:	4b02      	ldr	r3, [pc, #8]	; (b9cec <HAL_USB_USART_Init+0xc>)
   b9ce4:	681b      	ldr	r3, [r3, #0]
   b9ce6:	681b      	ldr	r3, [r3, #0]
   b9ce8:	9301      	str	r3, [sp, #4]
   b9cea:	bd08      	pop	{r3, pc}
   b9cec:	0003024c 	.word	0x0003024c

000b9cf0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b9cf0:	b508      	push	{r3, lr}
   b9cf2:	4b02      	ldr	r3, [pc, #8]	; (b9cfc <HAL_USB_USART_Begin+0xc>)
   b9cf4:	681b      	ldr	r3, [r3, #0]
   b9cf6:	685b      	ldr	r3, [r3, #4]
   b9cf8:	9301      	str	r3, [sp, #4]
   b9cfa:	bd08      	pop	{r3, pc}
   b9cfc:	0003024c 	.word	0x0003024c

000b9d00 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b9d00:	b508      	push	{r3, lr}
   b9d02:	4b02      	ldr	r3, [pc, #8]	; (b9d0c <HAL_USB_USART_Available_Data+0xc>)
   b9d04:	681b      	ldr	r3, [r3, #0]
   b9d06:	691b      	ldr	r3, [r3, #16]
   b9d08:	9301      	str	r3, [sp, #4]
   b9d0a:	bd08      	pop	{r3, pc}
   b9d0c:	0003024c 	.word	0x0003024c

000b9d10 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b9d10:	b508      	push	{r3, lr}
   b9d12:	4b02      	ldr	r3, [pc, #8]	; (b9d1c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b9d14:	681b      	ldr	r3, [r3, #0]
   b9d16:	695b      	ldr	r3, [r3, #20]
   b9d18:	9301      	str	r3, [sp, #4]
   b9d1a:	bd08      	pop	{r3, pc}
   b9d1c:	0003024c 	.word	0x0003024c

000b9d20 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9d20:	b508      	push	{r3, lr}
   b9d22:	4b02      	ldr	r3, [pc, #8]	; (b9d2c <HAL_USB_USART_Receive_Data+0xc>)
   b9d24:	681b      	ldr	r3, [r3, #0]
   b9d26:	699b      	ldr	r3, [r3, #24]
   b9d28:	9301      	str	r3, [sp, #4]
   b9d2a:	bd08      	pop	{r3, pc}
   b9d2c:	0003024c 	.word	0x0003024c

000b9d30 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9d30:	b508      	push	{r3, lr}
   b9d32:	4b02      	ldr	r3, [pc, #8]	; (b9d3c <HAL_USB_USART_Send_Data+0xc>)
   b9d34:	681b      	ldr	r3, [r3, #0]
   b9d36:	69db      	ldr	r3, [r3, #28]
   b9d38:	9301      	str	r3, [sp, #4]
   b9d3a:	bd08      	pop	{r3, pc}
   b9d3c:	0003024c 	.word	0x0003024c

000b9d40 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b9d40:	b508      	push	{r3, lr}
   b9d42:	4b02      	ldr	r3, [pc, #8]	; (b9d4c <HAL_USB_USART_Flush_Data+0xc>)
   b9d44:	681b      	ldr	r3, [r3, #0]
   b9d46:	6a1b      	ldr	r3, [r3, #32]
   b9d48:	9301      	str	r3, [sp, #4]
   b9d4a:	bd08      	pop	{r3, pc}
   b9d4c:	0003024c 	.word	0x0003024c

000b9d50 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b9d50:	b508      	push	{r3, lr}
   b9d52:	4b02      	ldr	r3, [pc, #8]	; (b9d5c <panic_+0xc>)
   b9d54:	681b      	ldr	r3, [r3, #0]
   b9d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9d58:	9301      	str	r3, [sp, #4]
   b9d5a:	bd08      	pop	{r3, pc}
   b9d5c:	00030260 	.word	0x00030260

000b9d60 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b9d60:	b508      	push	{r3, lr}
   b9d62:	4b02      	ldr	r3, [pc, #8]	; (b9d6c <log_message+0xc>)
   b9d64:	681b      	ldr	r3, [r3, #0]
   b9d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b9d68:	9301      	str	r3, [sp, #4]
   b9d6a:	bd08      	pop	{r3, pc}
   b9d6c:	00030260 	.word	0x00030260

000b9d70 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b9d70:	b508      	push	{r3, lr}
   b9d72:	4b02      	ldr	r3, [pc, #8]	; (b9d7c <system_mode+0xc>)
   b9d74:	681b      	ldr	r3, [r3, #0]
   b9d76:	681b      	ldr	r3, [r3, #0]
   b9d78:	9301      	str	r3, [sp, #4]
   b9d7a:	bd08      	pop	{r3, pc}
   b9d7c:	00030220 	.word	0x00030220

000b9d80 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b9d80:	b508      	push	{r3, lr}
   b9d82:	4b02      	ldr	r3, [pc, #8]	; (b9d8c <set_system_mode+0xc>)
   b9d84:	681b      	ldr	r3, [r3, #0]
   b9d86:	685b      	ldr	r3, [r3, #4]
   b9d88:	9301      	str	r3, [sp, #4]
   b9d8a:	bd08      	pop	{r3, pc}
   b9d8c:	00030220 	.word	0x00030220

000b9d90 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b9d90:	b508      	push	{r3, lr}
   b9d92:	4b02      	ldr	r3, [pc, #8]	; (b9d9c <system_delay_ms+0xc>)
   b9d94:	681b      	ldr	r3, [r3, #0]
   b9d96:	695b      	ldr	r3, [r3, #20]
   b9d98:	9301      	str	r3, [sp, #4]
   b9d9a:	bd08      	pop	{r3, pc}
   b9d9c:	00030220 	.word	0x00030220

000b9da0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b9da0:	b508      	push	{r3, lr}
   b9da2:	4b02      	ldr	r3, [pc, #8]	; (b9dac <application_thread_current+0xc>)
   b9da4:	681b      	ldr	r3, [r3, #0]
   b9da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9da8:	9301      	str	r3, [sp, #4]
   b9daa:	bd08      	pop	{r3, pc}
   b9dac:	00030220 	.word	0x00030220

000b9db0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b9db0:	b508      	push	{r3, lr}
   b9db2:	4b02      	ldr	r3, [pc, #8]	; (b9dbc <application_thread_invoke+0xc>)
   b9db4:	681b      	ldr	r3, [r3, #0]
   b9db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b9db8:	9301      	str	r3, [sp, #4]
   b9dba:	bd08      	pop	{r3, pc}
   b9dbc:	00030220 	.word	0x00030220

000b9dc0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b9dc0:	b508      	push	{r3, lr}
   b9dc2:	4b02      	ldr	r3, [pc, #8]	; (b9dcc <system_thread_get_state+0xc>)
   b9dc4:	681b      	ldr	r3, [r3, #0]
   b9dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b9dc8:	9301      	str	r3, [sp, #4]
   b9dca:	bd08      	pop	{r3, pc}
   b9dcc:	00030220 	.word	0x00030220

000b9dd0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b9dd0:	b508      	push	{r3, lr}
   b9dd2:	4b03      	ldr	r3, [pc, #12]	; (b9de0 <system_ctrl_set_app_request_handler+0x10>)
   b9dd4:	681b      	ldr	r3, [r3, #0]
   b9dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b9dda:	9301      	str	r3, [sp, #4]
   b9ddc:	bd08      	pop	{r3, pc}
   b9dde:	0000      	.short	0x0000
   b9de0:	00030220 	.word	0x00030220

000b9de4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b9de4:	b508      	push	{r3, lr}
   b9de6:	4b03      	ldr	r3, [pc, #12]	; (b9df4 <system_ctrl_set_result+0x10>)
   b9de8:	681b      	ldr	r3, [r3, #0]
   b9dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b9dee:	9301      	str	r3, [sp, #4]
   b9df0:	bd08      	pop	{r3, pc}
   b9df2:	0000      	.short	0x0000
   b9df4:	00030220 	.word	0x00030220

000b9df8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b9df8:	b508      	push	{r3, lr}
   b9dfa:	4b02      	ldr	r3, [pc, #8]	; (b9e04 <spark_process+0xc>)
   b9dfc:	681b      	ldr	r3, [r3, #0]
   b9dfe:	689b      	ldr	r3, [r3, #8]
   b9e00:	9301      	str	r3, [sp, #4]
   b9e02:	bd08      	pop	{r3, pc}
   b9e04:	00030244 	.word	0x00030244

000b9e08 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b9e08:	b508      	push	{r3, lr}
   b9e0a:	4b02      	ldr	r3, [pc, #8]	; (b9e14 <spark_cloud_flag_connected+0xc>)
   b9e0c:	681b      	ldr	r3, [r3, #0]
   b9e0e:	695b      	ldr	r3, [r3, #20]
   b9e10:	9301      	str	r3, [sp, #4]
   b9e12:	bd08      	pop	{r3, pc}
   b9e14:	00030244 	.word	0x00030244

000b9e18 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b9e18:	b508      	push	{r3, lr}
   b9e1a:	4b02      	ldr	r3, [pc, #8]	; (b9e24 <spark_send_event+0xc>)
   b9e1c:	681b      	ldr	r3, [r3, #0]
   b9e1e:	6a1b      	ldr	r3, [r3, #32]
   b9e20:	9301      	str	r3, [sp, #4]
   b9e22:	bd08      	pop	{r3, pc}
   b9e24:	00030244 	.word	0x00030244

000b9e28 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b9e28:	b508      	push	{r3, lr}
   b9e2a:	4b02      	ldr	r3, [pc, #8]	; (b9e34 <spark_subscribe+0xc>)
   b9e2c:	681b      	ldr	r3, [r3, #0]
   b9e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9e30:	9301      	str	r3, [sp, #4]
   b9e32:	bd08      	pop	{r3, pc}
   b9e34:	00030244 	.word	0x00030244

000b9e38 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b9e38:	b508      	push	{r3, lr}
   b9e3a:	4b02      	ldr	r3, [pc, #8]	; (b9e44 <spark_sync_time_pending+0xc>)
   b9e3c:	681b      	ldr	r3, [r3, #0]
   b9e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9e40:	9301      	str	r3, [sp, #4]
   b9e42:	bd08      	pop	{r3, pc}
   b9e44:	00030244 	.word	0x00030244

000b9e48 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b9e48:	b508      	push	{r3, lr}
   b9e4a:	4b02      	ldr	r3, [pc, #8]	; (b9e54 <spark_set_random_seed_from_cloud_handler+0xc>)
   b9e4c:	681b      	ldr	r3, [r3, #0]
   b9e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9e50:	9301      	str	r3, [sp, #4]
   b9e52:	bd08      	pop	{r3, pc}
   b9e54:	00030244 	.word	0x00030244

000b9e58 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b9e58:	b508      	push	{r3, lr}
   b9e5a:	4b02      	ldr	r3, [pc, #8]	; (b9e64 <network_connect+0xc>)
   b9e5c:	681b      	ldr	r3, [r3, #0]
   b9e5e:	685b      	ldr	r3, [r3, #4]
   b9e60:	9301      	str	r3, [sp, #4]
   b9e62:	bd08      	pop	{r3, pc}
   b9e64:	00030240 	.word	0x00030240

000b9e68 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b9e68:	b508      	push	{r3, lr}
   b9e6a:	4b02      	ldr	r3, [pc, #8]	; (b9e74 <network_connecting+0xc>)
   b9e6c:	681b      	ldr	r3, [r3, #0]
   b9e6e:	689b      	ldr	r3, [r3, #8]
   b9e70:	9301      	str	r3, [sp, #4]
   b9e72:	bd08      	pop	{r3, pc}
   b9e74:	00030240 	.word	0x00030240

000b9e78 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b9e78:	b508      	push	{r3, lr}
   b9e7a:	4b02      	ldr	r3, [pc, #8]	; (b9e84 <network_disconnect+0xc>)
   b9e7c:	681b      	ldr	r3, [r3, #0]
   b9e7e:	68db      	ldr	r3, [r3, #12]
   b9e80:	9301      	str	r3, [sp, #4]
   b9e82:	bd08      	pop	{r3, pc}
   b9e84:	00030240 	.word	0x00030240

000b9e88 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b9e88:	b508      	push	{r3, lr}
   b9e8a:	4b02      	ldr	r3, [pc, #8]	; (b9e94 <network_ready+0xc>)
   b9e8c:	681b      	ldr	r3, [r3, #0]
   b9e8e:	691b      	ldr	r3, [r3, #16]
   b9e90:	9301      	str	r3, [sp, #4]
   b9e92:	bd08      	pop	{r3, pc}
   b9e94:	00030240 	.word	0x00030240

000b9e98 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b9e98:	b508      	push	{r3, lr}
   b9e9a:	4b02      	ldr	r3, [pc, #8]	; (b9ea4 <network_on+0xc>)
   b9e9c:	681b      	ldr	r3, [r3, #0]
   b9e9e:	695b      	ldr	r3, [r3, #20]
   b9ea0:	9301      	str	r3, [sp, #4]
   b9ea2:	bd08      	pop	{r3, pc}
   b9ea4:	00030240 	.word	0x00030240

000b9ea8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b9ea8:	b508      	push	{r3, lr}
   b9eaa:	4b02      	ldr	r3, [pc, #8]	; (b9eb4 <network_off+0xc>)
   b9eac:	681b      	ldr	r3, [r3, #0]
   b9eae:	699b      	ldr	r3, [r3, #24]
   b9eb0:	9301      	str	r3, [sp, #4]
   b9eb2:	bd08      	pop	{r3, pc}
   b9eb4:	00030240 	.word	0x00030240

000b9eb8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b9eb8:	b508      	push	{r3, lr}
   b9eba:	4b02      	ldr	r3, [pc, #8]	; (b9ec4 <network_listen+0xc>)
   b9ebc:	681b      	ldr	r3, [r3, #0]
   b9ebe:	69db      	ldr	r3, [r3, #28]
   b9ec0:	9301      	str	r3, [sp, #4]
   b9ec2:	bd08      	pop	{r3, pc}
   b9ec4:	00030240 	.word	0x00030240

000b9ec8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b9ec8:	b508      	push	{r3, lr}
   b9eca:	4b02      	ldr	r3, [pc, #8]	; (b9ed4 <network_listening+0xc>)
   b9ecc:	681b      	ldr	r3, [r3, #0]
   b9ece:	6a1b      	ldr	r3, [r3, #32]
   b9ed0:	9301      	str	r3, [sp, #4]
   b9ed2:	bd08      	pop	{r3, pc}
   b9ed4:	00030240 	.word	0x00030240

000b9ed8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b9ed8:	b508      	push	{r3, lr}
   b9eda:	4b02      	ldr	r3, [pc, #8]	; (b9ee4 <network_set_listen_timeout+0xc>)
   b9edc:	681b      	ldr	r3, [r3, #0]
   b9ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9ee0:	9301      	str	r3, [sp, #4]
   b9ee2:	bd08      	pop	{r3, pc}
   b9ee4:	00030240 	.word	0x00030240

000b9ee8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b9ee8:	b508      	push	{r3, lr}
   b9eea:	4b02      	ldr	r3, [pc, #8]	; (b9ef4 <network_get_listen_timeout+0xc>)
   b9eec:	681b      	ldr	r3, [r3, #0]
   b9eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9ef0:	9301      	str	r3, [sp, #4]
   b9ef2:	bd08      	pop	{r3, pc}
   b9ef4:	00030240 	.word	0x00030240

000b9ef8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b9ef8:	b508      	push	{r3, lr}
   b9efa:	4b02      	ldr	r3, [pc, #8]	; (b9f04 <network_is_on+0xc>)
   b9efc:	681b      	ldr	r3, [r3, #0]
   b9efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9f00:	9301      	str	r3, [sp, #4]
   b9f02:	bd08      	pop	{r3, pc}
   b9f04:	00030240 	.word	0x00030240

000b9f08 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b9f08:	b508      	push	{r3, lr}
   b9f0a:	4b02      	ldr	r3, [pc, #8]	; (b9f14 <network_is_off+0xc>)
   b9f0c:	681b      	ldr	r3, [r3, #0]
   b9f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9f10:	9301      	str	r3, [sp, #4]
   b9f12:	bd08      	pop	{r3, pc}
   b9f14:	00030240 	.word	0x00030240

000b9f18 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b9f18:	b508      	push	{r3, lr}
   b9f1a:	4b02      	ldr	r3, [pc, #8]	; (b9f24 <malloc+0xc>)
   b9f1c:	681b      	ldr	r3, [r3, #0]
   b9f1e:	681b      	ldr	r3, [r3, #0]
   b9f20:	9301      	str	r3, [sp, #4]
   b9f22:	bd08      	pop	{r3, pc}
   b9f24:	0003021c 	.word	0x0003021c

000b9f28 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b9f28:	b508      	push	{r3, lr}
   b9f2a:	4b02      	ldr	r3, [pc, #8]	; (b9f34 <free+0xc>)
   b9f2c:	681b      	ldr	r3, [r3, #0]
   b9f2e:	685b      	ldr	r3, [r3, #4]
   b9f30:	9301      	str	r3, [sp, #4]
   b9f32:	bd08      	pop	{r3, pc}
   b9f34:	0003021c 	.word	0x0003021c

000b9f38 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b9f38:	b508      	push	{r3, lr}
   b9f3a:	4b02      	ldr	r3, [pc, #8]	; (b9f44 <realloc+0xc>)
   b9f3c:	681b      	ldr	r3, [r3, #0]
   b9f3e:	689b      	ldr	r3, [r3, #8]
   b9f40:	9301      	str	r3, [sp, #4]
   b9f42:	bd08      	pop	{r3, pc}
   b9f44:	0003021c 	.word	0x0003021c

000b9f48 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b9f48:	b508      	push	{r3, lr}
   b9f4a:	4b02      	ldr	r3, [pc, #8]	; (b9f54 <sprintf+0xc>)
   b9f4c:	681b      	ldr	r3, [r3, #0]
   b9f4e:	68db      	ldr	r3, [r3, #12]
   b9f50:	9301      	str	r3, [sp, #4]
   b9f52:	bd08      	pop	{r3, pc}
   b9f54:	0003021c 	.word	0x0003021c

000b9f58 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b9f58:	b508      	push	{r3, lr}
   b9f5a:	4b02      	ldr	r3, [pc, #8]	; (b9f64 <sscanf+0xc>)
   b9f5c:	681b      	ldr	r3, [r3, #0]
   b9f5e:	695b      	ldr	r3, [r3, #20]
   b9f60:	9301      	str	r3, [sp, #4]
   b9f62:	bd08      	pop	{r3, pc}
   b9f64:	0003021c 	.word	0x0003021c

000b9f68 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b9f68:	b508      	push	{r3, lr}
   b9f6a:	4b02      	ldr	r3, [pc, #8]	; (b9f74 <snprintf+0xc>)
   b9f6c:	681b      	ldr	r3, [r3, #0]
   b9f6e:	69db      	ldr	r3, [r3, #28]
   b9f70:	9301      	str	r3, [sp, #4]
   b9f72:	bd08      	pop	{r3, pc}
   b9f74:	0003021c 	.word	0x0003021c

000b9f78 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b9f78:	b508      	push	{r3, lr}
   b9f7a:	4b02      	ldr	r3, [pc, #8]	; (b9f84 <vsnprintf+0xc>)
   b9f7c:	681b      	ldr	r3, [r3, #0]
   b9f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9f80:	9301      	str	r3, [sp, #4]
   b9f82:	bd08      	pop	{r3, pc}
   b9f84:	0003021c 	.word	0x0003021c

000b9f88 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b9f88:	b508      	push	{r3, lr}
   b9f8a:	4b02      	ldr	r3, [pc, #8]	; (b9f94 <abort+0xc>)
   b9f8c:	681b      	ldr	r3, [r3, #0]
   b9f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9f90:	9301      	str	r3, [sp, #4]
   b9f92:	bd08      	pop	{r3, pc}
   b9f94:	0003021c 	.word	0x0003021c

000b9f98 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b9f98:	b508      	push	{r3, lr}
   b9f9a:	4b02      	ldr	r3, [pc, #8]	; (b9fa4 <_malloc_r+0xc>)
   b9f9c:	681b      	ldr	r3, [r3, #0]
   b9f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9fa0:	9301      	str	r3, [sp, #4]
   b9fa2:	bd08      	pop	{r3, pc}
   b9fa4:	0003021c 	.word	0x0003021c

000b9fa8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b9fa8:	b508      	push	{r3, lr}
   b9faa:	4b02      	ldr	r3, [pc, #8]	; (b9fb4 <__errno+0xc>)
   b9fac:	681b      	ldr	r3, [r3, #0]
   b9fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9fb0:	9301      	str	r3, [sp, #4]
   b9fb2:	bd08      	pop	{r3, pc}
   b9fb4:	0003021c 	.word	0x0003021c

000b9fb8 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b9fb8:	b508      	push	{r3, lr}
   b9fba:	4b02      	ldr	r3, [pc, #8]	; (b9fc4 <__assert_func+0xc>)
   b9fbc:	681b      	ldr	r3, [r3, #0]
   b9fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9fc0:	9301      	str	r3, [sp, #4]
   b9fc2:	bd08      	pop	{r3, pc}
   b9fc4:	0003021c 	.word	0x0003021c

000b9fc8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b9fc8:	b508      	push	{r3, lr}
   b9fca:	4b02      	ldr	r3, [pc, #8]	; (b9fd4 <newlib_impure_ptr_callback+0xc>)
   b9fcc:	681b      	ldr	r3, [r3, #0]
   b9fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9fd0:	9301      	str	r3, [sp, #4]
   b9fd2:	bd08      	pop	{r3, pc}
   b9fd4:	0003021c 	.word	0x0003021c

000b9fd8 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b9fd8:	b508      	push	{r3, lr}
   b9fda:	4b02      	ldr	r3, [pc, #8]	; (b9fe4 <localtime_r+0xc>)
   b9fdc:	681b      	ldr	r3, [r3, #0]
   b9fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9fe0:	9301      	str	r3, [sp, #4]
   b9fe2:	bd08      	pop	{r3, pc}
   b9fe4:	0003021c 	.word	0x0003021c

000b9fe8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b9fe8:	2100      	movs	r1, #0
   b9fea:	f7ff bed1 	b.w	b9d90 <system_delay_ms>

000b9fee <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b9fee:	b510      	push	{r4, lr}
      if (_M_empty())
   b9ff0:	6883      	ldr	r3, [r0, #8]
   b9ff2:	4604      	mov	r4, r0
   b9ff4:	b90b      	cbnz	r3, b9ffa <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b9ff6:	f003 fe20 	bl	bdc3a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9ffa:	68c3      	ldr	r3, [r0, #12]
   b9ffc:	4798      	blx	r3
      if (_M_manager)
   b9ffe:	68a3      	ldr	r3, [r4, #8]
   ba000:	b11b      	cbz	r3, ba00a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   ba002:	2203      	movs	r2, #3
   ba004:	4621      	mov	r1, r4
   ba006:	4620      	mov	r0, r4
   ba008:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   ba00a:	4620      	mov	r0, r4
   ba00c:	2110      	movs	r1, #16
}
   ba00e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   ba012:	f7fa b844 	b.w	b409e <_ZdlPvj>

000ba016 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba016:	4770      	bx	lr

000ba018 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   ba018:	4770      	bx	lr

000ba01a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   ba01a:	4770      	bx	lr

000ba01c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba01c:	4770      	bx	lr
	...

000ba020 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   ba020:	4b06      	ldr	r3, [pc, #24]	; (ba03c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   ba022:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   ba024:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   ba026:	f100 040c 	add.w	r4, r0, #12
	    ||
   ba02a:	d005      	beq.n	ba038 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   ba02c:	4608      	mov	r0, r1
   ba02e:	f003 fe07 	bl	bdc40 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   ba032:	2800      	cmp	r0, #0
   ba034:	bf08      	it	eq
   ba036:	2400      	moveq	r4, #0
      }
   ba038:	4620      	mov	r0, r4
   ba03a:	bd10      	pop	{r4, pc}
   ba03c:	000c1e1c 	.word	0x000c1e1c

000ba040 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   ba040:	4b06      	ldr	r3, [pc, #24]	; (ba05c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   ba042:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   ba044:	b510      	push	{r4, lr}
   ba046:	f100 040c 	add.w	r4, r0, #12
	    ||
   ba04a:	d005      	beq.n	ba058 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   ba04c:	4608      	mov	r0, r1
   ba04e:	f003 fdf7 	bl	bdc40 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   ba052:	2800      	cmp	r0, #0
   ba054:	bf08      	it	eq
   ba056:	2400      	moveq	r4, #0
      }
   ba058:	4620      	mov	r0, r4
   ba05a:	bd10      	pop	{r4, pc}
   ba05c:	000c1e1c 	.word	0x000c1e1c

000ba060 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   ba060:	4b06      	ldr	r3, [pc, #24]	; (ba07c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   ba062:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   ba064:	b510      	push	{r4, lr}
   ba066:	f100 040c 	add.w	r4, r0, #12
	    ||
   ba06a:	d005      	beq.n	ba078 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   ba06c:	4608      	mov	r0, r1
   ba06e:	f003 fde7 	bl	bdc40 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   ba072:	2800      	cmp	r0, #0
   ba074:	bf08      	it	eq
   ba076:	2400      	moveq	r4, #0
      }
   ba078:	4620      	mov	r0, r4
   ba07a:	bd10      	pop	{r4, pc}
   ba07c:	000c1e1c 	.word	0x000c1e1c

000ba080 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba080:	b510      	push	{r4, lr}
   ba082:	2168      	movs	r1, #104	; 0x68
   ba084:	4604      	mov	r4, r0
   ba086:	f7fa f80a 	bl	b409e <_ZdlPvj>
   ba08a:	4620      	mov	r0, r4
   ba08c:	bd10      	pop	{r4, pc}

000ba08e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   ba08e:	b510      	push	{r4, lr}
   ba090:	2128      	movs	r1, #40	; 0x28
   ba092:	4604      	mov	r4, r0
   ba094:	f7fa f803 	bl	b409e <_ZdlPvj>
   ba098:	4620      	mov	r0, r4
   ba09a:	bd10      	pop	{r4, pc}

000ba09c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   ba09c:	b510      	push	{r4, lr}
   ba09e:	2130      	movs	r1, #48	; 0x30
   ba0a0:	4604      	mov	r4, r0
   ba0a2:	f7f9 fffc 	bl	b409e <_ZdlPvj>
   ba0a6:	4620      	mov	r0, r4
   ba0a8:	bd10      	pop	{r4, pc}

000ba0aa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   ba0aa:	2168      	movs	r1, #104	; 0x68
   ba0ac:	f7f9 bff7 	b.w	b409e <_ZdlPvj>

000ba0b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   ba0b0:	2128      	movs	r1, #40	; 0x28
   ba0b2:	f7f9 bff4 	b.w	b409e <_ZdlPvj>

000ba0b6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   ba0b6:	2130      	movs	r1, #48	; 0x30
   ba0b8:	f7f9 bff1 	b.w	b409e <_ZdlPvj>

000ba0bc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   ba0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   ba0be:	2500      	movs	r5, #0
   ba0c0:	1cec      	adds	r4, r5, #3
   ba0c2:	428c      	cmp	r4, r1
   ba0c4:	d80d      	bhi.n	ba0e2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   ba0c6:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   ba0c8:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   ba0ca:	5d87      	ldrb	r7, [r0, r6]
   ba0cc:	4297      	cmp	r7, r2
   ba0ce:	d105      	bne.n	ba0dc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   ba0d0:	4426      	add	r6, r4
   ba0d2:	42b1      	cmp	r1, r6
   ba0d4:	d305      	bcc.n	ba0e2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   ba0d6:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   ba0d8:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   ba0da:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   ba0dc:	3401      	adds	r4, #1
   ba0de:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   ba0e0:	e7ee      	b.n	ba0c0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   ba0e2:	2000      	movs	r0, #0
   ba0e4:	e7f9      	b.n	ba0da <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000ba0e8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   ba0e8:	4a02      	ldr	r2, [pc, #8]	; (ba0f4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   ba0ea:	4903      	ldr	r1, [pc, #12]	; (ba0f8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   ba0ec:	200a      	movs	r0, #10
   ba0ee:	f7ff be2f 	b.w	b9d50 <panic_>
   ba0f2:	bf00      	nop
   ba0f4:	000b9a11 	.word	0x000b9a11
   ba0f8:	000c1bac 	.word	0x000c1bac

000ba0fc <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   ba0fc:	b430      	push	{r4, r5}
   ba0fe:	460d      	mov	r5, r1
   ba100:	4611      	mov	r1, r2
   ba102:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   ba104:	6803      	ldr	r3, [r0, #0]
   ba106:	6809      	ldr	r1, [r1, #0]
   ba108:	6828      	ldr	r0, [r5, #0]
   ba10a:	e9d3 4300 	ldrd	r4, r3, [r3]
   ba10e:	46a4      	mov	ip, r4
      }
   ba110:	bc30      	pop	{r4, r5}
   ba112:	4760      	bx	ip

000ba114 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   ba114:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   ba116:	b538      	push	{r3, r4, r5, lr}
   ba118:	4604      	mov	r4, r0
	switch (__op)
   ba11a:	d102      	bne.n	ba122 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   ba11c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   ba11e:	6023      	str	r3, [r4, #0]
	}
   ba120:	e003      	b.n	ba12a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   ba122:	2a02      	cmp	r2, #2
   ba124:	d003      	beq.n	ba12e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   ba126:	2a03      	cmp	r2, #3
   ba128:	d00d      	beq.n	ba146 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   ba12a:	2000      	movs	r0, #0
   ba12c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   ba12e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   ba130:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   ba132:	f7f9 ffb0 	bl	b4096 <_Znwj>
   ba136:	4603      	mov	r3, r0
   ba138:	2800      	cmp	r0, #0
   ba13a:	d0f0      	beq.n	ba11e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   ba13c:	e895 0003 	ldmia.w	r5, {r0, r1}
   ba140:	e883 0003 	stmia.w	r3, {r0, r1}
   ba144:	e7eb      	b.n	ba11e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   ba146:	6800      	ldr	r0, [r0, #0]
   ba148:	2800      	cmp	r0, #0
   ba14a:	d0ee      	beq.n	ba12a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   ba14c:	2108      	movs	r1, #8
   ba14e:	f7f9 ffa6 	bl	b409e <_ZdlPvj>
   ba152:	e7ea      	b.n	ba12a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000ba154 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   ba154:	b510      	push	{r4, lr}
	if (_M_manager)
   ba156:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   ba158:	4604      	mov	r4, r0
	if (_M_manager)
   ba15a:	b12b      	cbz	r3, ba168 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   ba15c:	2203      	movs	r2, #3
   ba15e:	4601      	mov	r1, r0
   ba160:	4798      	blx	r3
	    _M_manager = nullptr;
   ba162:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   ba164:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   ba168:	bd10      	pop	{r4, pc}

000ba16a <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   ba16a:	b510      	push	{r4, lr}
	if (_M_manager)
   ba16c:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   ba16e:	4604      	mov	r4, r0
	if (_M_manager)
   ba170:	b12b      	cbz	r3, ba17e <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   ba172:	2203      	movs	r2, #3
   ba174:	4601      	mov	r1, r0
   ba176:	4798      	blx	r3
	    _M_manager = nullptr;
   ba178:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   ba17a:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   ba17e:	bd10      	pop	{r4, pc}

000ba180 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   ba180:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   ba182:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   ba184:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   ba186:	2220      	movs	r2, #32
   ba188:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   ba18c:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   ba18e:	4a08      	ldr	r2, [pc, #32]	; (ba1b0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   ba190:	9200      	str	r2, [sp, #0]
   ba192:	4908      	ldr	r1, [pc, #32]	; (ba1b4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   ba194:	aa02      	add	r2, sp, #8
   ba196:	2001      	movs	r0, #1
   ba198:	f7ff fde2 	bl	b9d60 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   ba19c:	6820      	ldr	r0, [r4, #0]
   ba19e:	4906      	ldr	r1, [pc, #24]	; (ba1b8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   ba1a0:	8800      	ldrh	r0, [r0, #0]
   ba1a2:	2300      	movs	r3, #0
   ba1a4:	4622      	mov	r2, r4
    }
   ba1a6:	b00a      	add	sp, #40	; 0x28
   ba1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   ba1ac:	f7ff bb6a 	b.w	b9884 <hal_ble_gatt_client_discover_all_services>
   ba1b0:	000c1bce 	.word	0x000c1bce
   ba1b4:	000c1bc3 	.word	0x000c1bc3
   ba1b8:	000bbd31 	.word	0x000bbd31

000ba1bc <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   ba1bc:	b510      	push	{r4, lr}
   ba1be:	3801      	subs	r0, #1
   ba1c0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   ba1c4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   ba1c8:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   ba1ca:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   ba1ce:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   ba1d0:	bf88      	it	hi
   ba1d2:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   ba1d6:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   ba1da:	7803      	ldrb	r3, [r0, #0]
   ba1dc:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   ba1e0:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   ba1e4:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   ba1e6:	bf88      	it	hi
   ba1e8:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   ba1ec:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   ba1ee:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   ba1f2:	d1e7      	bne.n	ba1c4 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   ba1f4:	bd10      	pop	{r4, pc}

000ba1f6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   ba1f6:	b510      	push	{r4, lr}
   ba1f8:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   ba1fa:	3058      	adds	r0, #88	; 0x58
   ba1fc:	f7fa f9bc 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   ba200:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   ba204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba208:	f003 b89c 	b.w	bd344 <_ZN6StringD1Ev>

000ba20c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   ba20c:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   ba20e:	6803      	ldr	r3, [r0, #0]
   ba210:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   ba212:	4605      	mov	r5, r0
   ba214:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   ba216:	d008      	beq.n	ba22a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   ba218:	b111      	cbz	r1, ba220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   ba21a:	684b      	ldr	r3, [r1, #4]
   ba21c:	3301      	adds	r3, #1
   ba21e:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   ba220:	6828      	ldr	r0, [r5, #0]
   ba222:	b108      	cbz	r0, ba228 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   ba224:	f7fa f9e6 	bl	b45f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   ba228:	602c      	str	r4, [r5, #0]
      }
   ba22a:	bd38      	pop	{r3, r4, r5, pc}

000ba22c <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   ba22c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   ba230:	b2da      	uxtb	r2, r3
   ba232:	2a09      	cmp	r2, #9
   ba234:	d801      	bhi.n	ba23a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   ba236:	4618      	mov	r0, r3
   ba238:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   ba23a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   ba23e:	2b05      	cmp	r3, #5
   ba240:	d801      	bhi.n	ba246 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   ba242:	3857      	subs	r0, #87	; 0x57
   ba244:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   ba246:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   ba24a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   ba24c:	bf94      	ite	ls
   ba24e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   ba250:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   ba254:	4770      	bx	lr
	...

000ba258 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   ba258:	b510      	push	{r4, lr}
            locked_(false) {
   ba25a:	2300      	movs	r3, #0
   ba25c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   ba25e:	4b04      	ldr	r3, [pc, #16]	; (ba270 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   ba260:	4604      	mov	r4, r0
   ba262:	6818      	ldr	r0, [r3, #0]
   ba264:	f7ff fbb4 	bl	b99d0 <os_mutex_recursive_lock>
        locked_ = true;
   ba268:	2301      	movs	r3, #1
   ba26a:	7023      	strb	r3, [r4, #0]
    }
   ba26c:	4620      	mov	r0, r4
   ba26e:	bd10      	pop	{r4, pc}
   ba270:	2003e65c 	.word	0x2003e65c

000ba274 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   ba274:	b510      	push	{r4, lr}
        if (locked_) {
   ba276:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   ba278:	4604      	mov	r4, r0
        if (locked_) {
   ba27a:	b11b      	cbz	r3, ba284 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   ba27c:	4b02      	ldr	r3, [pc, #8]	; (ba288 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   ba27e:	6818      	ldr	r0, [r3, #0]
   ba280:	f7ff fbae 	bl	b99e0 <os_mutex_recursive_unlock>
    }
   ba284:	4620      	mov	r0, r4
   ba286:	bd10      	pop	{r4, pc}
   ba288:	2003e65c 	.word	0x2003e65c

000ba28c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   ba28c:	b082      	sub	sp, #8
   ba28e:	4603      	mov	r3, r0
    address_ = addr;
   ba290:	6808      	ldr	r0, [r1, #0]
   ba292:	6849      	ldr	r1, [r1, #4]
   ba294:	466a      	mov	r2, sp
   ba296:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   ba298:	466a      	mov	r2, sp
   ba29a:	ca03      	ldmia	r2!, {r0, r1}
   ba29c:	6018      	str	r0, [r3, #0]
}
   ba29e:	4618      	mov	r0, r3
    address_ = addr.address_;
   ba2a0:	6059      	str	r1, [r3, #4]
}
   ba2a2:	b002      	add	sp, #8
   ba2a4:	4770      	bx	lr

000ba2a6 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   ba2a6:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   ba2a8:	7982      	ldrb	r2, [r0, #6]
   ba2aa:	798b      	ldrb	r3, [r1, #6]
   ba2ac:	429a      	cmp	r2, r3
   ba2ae:	d106      	bne.n	ba2be <_ZNK8particle10BleAddresseqERKS0_+0x18>
   ba2b0:	2206      	movs	r2, #6
   ba2b2:	f004 fb5a 	bl	be96a <memcmp>
   ba2b6:	fab0 f080 	clz	r0, r0
   ba2ba:	0940      	lsrs	r0, r0, #5
}
   ba2bc:	bd08      	pop	{r3, pc}
    return false;
   ba2be:	2000      	movs	r0, #0
   ba2c0:	e7fc      	b.n	ba2bc <_ZNK8particle10BleAddresseqERKS0_+0x16>

000ba2c2 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   ba2c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba2c6:	6003      	str	r3, [r0, #0]
   ba2c8:	8083      	strh	r3, [r0, #4]
}
   ba2ca:	2000      	movs	r0, #0
   ba2cc:	4770      	bx	lr

000ba2ce <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   ba2ce:	b508      	push	{r3, lr}
   ba2d0:	4602      	mov	r2, r0
        : address_{} {
   ba2d2:	2100      	movs	r1, #0
   ba2d4:	6001      	str	r1, [r0, #0]
   ba2d6:	6041      	str	r1, [r0, #4]
    clear();
   ba2d8:	f7ff fff3 	bl	ba2c2 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   ba2dc:	7191      	strb	r1, [r2, #6]
}
   ba2de:	4610      	mov	r0, r2
   ba2e0:	bd08      	pop	{r3, pc}
	...

000ba2e4 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   ba2e4:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   ba2e6:	2301      	movs	r3, #1
   ba2e8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba2ea:	4b05      	ldr	r3, [pc, #20]	; (ba300 <_ZN8particle7BleUuidC1Ev+0x1c>)
   ba2ec:	4602      	mov	r2, r0
   ba2ee:	f103 0110 	add.w	r1, r3, #16
   ba2f2:	f853 4b04 	ldr.w	r4, [r3], #4
   ba2f6:	f842 4b04 	str.w	r4, [r2], #4
   ba2fa:	428b      	cmp	r3, r1
   ba2fc:	d1f9      	bne.n	ba2f2 <_ZN8particle7BleUuidC1Ev+0xe>
}
   ba2fe:	bd10      	pop	{r4, pc}
   ba300:	000c1e2a 	.word	0x000c1e2a

000ba304 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   ba304:	7c0b      	ldrb	r3, [r1, #16]
   ba306:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   ba30a:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   ba30c:	d10d      	bne.n	ba32a <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   ba30e:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba310:	4b0c      	ldr	r3, [pc, #48]	; (ba344 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   ba312:	4602      	mov	r2, r0
   ba314:	f103 0410 	add.w	r4, r3, #16
   ba318:	f853 5b04 	ldr.w	r5, [r3], #4
   ba31c:	f842 5b04 	str.w	r5, [r2], #4
   ba320:	42a3      	cmp	r3, r4
   ba322:	d1f9      	bne.n	ba318 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   ba324:	880b      	ldrh	r3, [r1, #0]
   ba326:	8183      	strh	r3, [r0, #12]
}
   ba328:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   ba32a:	2301      	movs	r3, #1
   ba32c:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   ba32e:	f101 0210 	add.w	r2, r1, #16
   ba332:	4603      	mov	r3, r0
   ba334:	f851 4b04 	ldr.w	r4, [r1], #4
   ba338:	f843 4b04 	str.w	r4, [r3], #4
   ba33c:	4291      	cmp	r1, r2
   ba33e:	d1f9      	bne.n	ba334 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   ba340:	e7f2      	b.n	ba328 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   ba342:	bf00      	nop
   ba344:	000c1e2a 	.word	0x000c1e2a

000ba348 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   ba348:	b510      	push	{r4, lr}
    if (uuid128) {
   ba34a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   ba34c:	4604      	mov	r4, r0
    if (uuid128) {
   ba34e:	b1b1      	cbz	r1, ba37e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   ba350:	2a01      	cmp	r2, #1
   ba352:	f101 0210 	add.w	r2, r1, #16
   ba356:	d10a      	bne.n	ba36e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   ba358:	4601      	mov	r1, r0
   ba35a:	f853 0b04 	ldr.w	r0, [r3], #4
   ba35e:	f841 0b04 	str.w	r0, [r1], #4
   ba362:	4293      	cmp	r3, r2
   ba364:	d1f9      	bne.n	ba35a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   ba366:	2301      	movs	r3, #1
   ba368:	6123      	str	r3, [r4, #16]
}
   ba36a:	4620      	mov	r0, r4
   ba36c:	bd10      	pop	{r4, pc}
   ba36e:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   ba370:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   ba374:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   ba378:	429a      	cmp	r2, r3
   ba37a:	d1f9      	bne.n	ba370 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   ba37c:	e7f3      	b.n	ba366 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   ba37e:	2210      	movs	r2, #16
   ba380:	f004 fb2b 	bl	be9da <memset>
   ba384:	e7f1      	b.n	ba36a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000ba386 <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   ba386:	b538      	push	{r3, r4, r5, lr}
   ba388:	4604      	mov	r4, r0
   ba38a:	460d      	mov	r5, r1
        : BleUuid() {
   ba38c:	f7ff ffaa 	bl	ba2e4 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   ba390:	2300      	movs	r3, #0
   ba392:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   ba394:	81a5      	strh	r5, [r4, #12]
}
   ba396:	4620      	mov	r0, r4
   ba398:	bd38      	pop	{r3, r4, r5, pc}

000ba39a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   ba39a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   ba39c:	6902      	ldr	r2, [r0, #16]
   ba39e:	690b      	ldr	r3, [r1, #16]
   ba3a0:	429a      	cmp	r2, r3
   ba3a2:	d106      	bne.n	ba3b2 <_ZNK8particle7BleUuideqERKS0_+0x18>
   ba3a4:	2210      	movs	r2, #16
   ba3a6:	f004 fae0 	bl	be96a <memcmp>
   ba3aa:	fab0 f080 	clz	r0, r0
   ba3ae:	0940      	lsrs	r0, r0, #5
}
   ba3b0:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   ba3b2:	2000      	movs	r0, #0
   ba3b4:	e7fc      	b.n	ba3b0 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000ba3b8 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   ba3b8:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   ba3ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   ba3be:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba3c0:	4b34      	ldr	r3, [pc, #208]	; (ba494 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   ba3c2:	460c      	mov	r4, r1
   ba3c4:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba3c6:	4602      	mov	r2, r0
   ba3c8:	f103 0110 	add.w	r1, r3, #16
   ba3cc:	f853 0b04 	ldr.w	r0, [r3], #4
   ba3d0:	f842 0b04 	str.w	r0, [r2], #4
   ba3d4:	428b      	cmp	r3, r1
   ba3d6:	d1f9      	bne.n	ba3cc <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   ba3d8:	b344      	cbz	r4, ba42c <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   ba3da:	2124      	movs	r1, #36	; 0x24
   ba3dc:	4620      	mov	r0, r4
   ba3de:	f004 fbdf 	bl	beba0 <strnlen>
   ba3e2:	2804      	cmp	r0, #4
   ba3e4:	f04f 0500 	mov.w	r5, #0
   ba3e8:	d123      	bne.n	ba432 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   ba3ea:	f8ad 5004 	strh.w	r5, [sp, #4]
   ba3ee:	af01      	add	r7, sp, #4
   ba3f0:	1ca5      	adds	r5, r4, #2
   ba3f2:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   ba3f4:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   ba3f8:	f7ff ff18 	bl	ba22c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   ba3fc:	f1b0 0800 	subs.w	r8, r0, #0
   ba400:	db12      	blt.n	ba428 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   ba402:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   ba406:	f7ff ff11 	bl	ba22c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   ba40a:	2800      	cmp	r0, #0
   ba40c:	db0c      	blt.n	ba428 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   ba40e:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   ba410:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   ba414:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   ba416:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   ba41a:	d1eb      	bne.n	ba3f4 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   ba41c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   ba420:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   ba422:	f89d 3004 	ldrb.w	r3, [sp, #4]
   ba426:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   ba428:	2300      	movs	r3, #0
   ba42a:	6133      	str	r3, [r6, #16]
}
   ba42c:	b002      	add	sp, #8
   ba42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   ba432:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   ba436:	2124      	movs	r1, #36	; 0x24
   ba438:	4620      	mov	r0, r4
   ba43a:	f004 fbb1 	bl	beba0 <strnlen>
   ba43e:	42a8      	cmp	r0, r5
   ba440:	d807      	bhi.n	ba452 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   ba442:	4642      	mov	r2, r8
   ba444:	2100      	movs	r1, #0
   ba446:	4630      	mov	r0, r6
}
   ba448:	b002      	add	sp, #8
   ba44a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   ba44e:	f004 bac4 	b.w	be9da <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   ba452:	f1b8 0f00 	cmp.w	r8, #0
   ba456:	d0e9      	beq.n	ba42c <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   ba458:	5d60      	ldrb	r0, [r4, r5]
   ba45a:	f7ff fee7 	bl	ba22c <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   ba45e:	0603      	lsls	r3, r0, #24
   ba460:	d415      	bmi.n	ba48e <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   ba462:	0100      	lsls	r0, r0, #4
   ba464:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   ba468:	b2c7      	uxtb	r7, r0
   ba46a:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   ba46e:	2124      	movs	r1, #36	; 0x24
   ba470:	4620      	mov	r0, r4
   ba472:	f004 fb95 	bl	beba0 <strnlen>
   ba476:	3501      	adds	r5, #1
   ba478:	42a8      	cmp	r0, r5
   ba47a:	d908      	bls.n	ba48e <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   ba47c:	5d60      	ldrb	r0, [r4, r5]
   ba47e:	f7ff fed5 	bl	ba22c <_ZN8particle11hexToNibbleEc>
   ba482:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   ba484:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   ba486:	bfa4      	itt	ge
   ba488:	4338      	orrge	r0, r7
   ba48a:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   ba48e:	3501      	adds	r5, #1
   ba490:	e7d1      	b.n	ba436 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   ba492:	bf00      	nop
   ba494:	000c1e2a 	.word	0x000c1e2a

000ba498 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   ba498:	b513      	push	{r0, r1, r4, lr}
   ba49a:	4604      	mov	r4, r0
   ba49c:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   ba49e:	f7ff ff21 	bl	ba2e4 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   ba4a2:	4620      	mov	r0, r4
   ba4a4:	9901      	ldr	r1, [sp, #4]
   ba4a6:	f7ff ff87 	bl	ba3b8 <_ZN8particle7BleUuid9constructEPKc>
}
   ba4aa:	4620      	mov	r0, r4
   ba4ac:	b002      	add	sp, #8
   ba4ae:	bd10      	pop	{r4, pc}

000ba4b0 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   ba4b0:	b510      	push	{r4, lr}
   ba4b2:	f100 030f 	add.w	r3, r0, #15
   ba4b6:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   ba4b8:	781c      	ldrb	r4, [r3, #0]
   ba4ba:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   ba4be:	4283      	cmp	r3, r0
   ba4c0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   ba4c4:	d1f8      	bne.n	ba4b8 <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   ba4c6:	bd10      	pop	{r4, pc}

000ba4c8 <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   ba4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba4cc:	461f      	mov	r7, r3
   ba4ce:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   ba4d0:	460d      	mov	r5, r1
   ba4d2:	2900      	cmp	r1, #0
   ba4d4:	d05b      	beq.n	ba58e <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   ba4d6:	b1da      	cbz	r2, ba510 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   ba4d8:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   ba4dc:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   ba4de:	f1b8 0f00 	cmp.w	r8, #0
   ba4e2:	d119      	bne.n	ba518 <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   ba4e4:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   ba4e6:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   ba4ea:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   ba4ec:	aa05      	add	r2, sp, #20
   ba4ee:	2102      	movs	r1, #2
   ba4f0:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   ba4f2:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   ba4f6:	f7ff fe61 	bl	ba1bc <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   ba4fa:	2c04      	cmp	r4, #4
   ba4fc:	bf28      	it	cs
   ba4fe:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   ba500:	4622      	mov	r2, r4
   ba502:	a905      	add	r1, sp, #20
   ba504:	4628      	mov	r0, r5
   ba506:	f004 fa40 	bl	be98a <memcpy>
        buf[len++] = '\0';
   ba50a:	f805 8004 	strb.w	r8, [r5, r4]
   ba50e:	1c62      	adds	r2, r4, #1
}
   ba510:	4610      	mov	r0, r2
   ba512:	b00e      	add	sp, #56	; 0x38
   ba514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   ba518:	a901      	add	r1, sp, #4
   ba51a:	f7ff ffc9 	bl	ba4b0 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   ba51e:	aa05      	add	r2, sp, #20
    if (stripped) {
   ba520:	b17f      	cbz	r7, ba542 <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   ba522:	2110      	movs	r1, #16
   ba524:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   ba526:	f7ff fe49 	bl	ba1bc <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   ba52a:	2c24      	cmp	r4, #36	; 0x24
   ba52c:	bf28      	it	cs
   ba52e:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   ba530:	4622      	mov	r2, r4
   ba532:	a905      	add	r1, sp, #20
   ba534:	4628      	mov	r0, r5
   ba536:	f004 fa28 	bl	be98a <memcpy>
    buf[len++] = '\0';
   ba53a:	2300      	movs	r3, #0
   ba53c:	552b      	strb	r3, [r5, r4]
   ba53e:	1c62      	adds	r2, r4, #1
    return len;
   ba540:	e7e6      	b.n	ba510 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   ba542:	2104      	movs	r1, #4
   ba544:	eb0d 0001 	add.w	r0, sp, r1
   ba548:	f7ff fe38 	bl	ba1bc <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   ba54c:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   ba54e:	f10d 021d 	add.w	r2, sp, #29
   ba552:	2102      	movs	r1, #2
   ba554:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   ba556:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   ba55a:	f7ff fe2f 	bl	ba1bc <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   ba55e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   ba562:	2102      	movs	r1, #2
   ba564:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   ba568:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   ba56c:	f7ff fe26 	bl	ba1bc <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   ba570:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   ba574:	2102      	movs	r1, #2
   ba576:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   ba578:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   ba57c:	f7ff fe1e 	bl	ba1bc <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   ba580:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   ba584:	aa0b      	add	r2, sp, #44	; 0x2c
   ba586:	2106      	movs	r1, #6
   ba588:	f10d 000e 	add.w	r0, sp, #14
   ba58c:	e7cb      	b.n	ba526 <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   ba58e:	460a      	mov	r2, r1
   ba590:	e7be      	b.n	ba510 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000ba592 <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   ba592:	b510      	push	{r4, lr}
   ba594:	b08a      	sub	sp, #40	; 0x28
   ba596:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   ba598:	2300      	movs	r3, #0
   ba59a:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   ba59c:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   ba59e:	4669      	mov	r1, sp
   ba5a0:	f7ff ff92 	bl	ba4c8 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   ba5a4:	4669      	mov	r1, sp
   ba5a6:	4620      	mov	r0, r4
   ba5a8:	f002 ff17 	bl	bd3da <_ZN6StringC1EPK19__FlashStringHelper>
}
   ba5ac:	4620      	mov	r0, r4
   ba5ae:	b00a      	add	sp, #40	; 0x28
   ba5b0:	bd10      	pop	{r4, pc}

000ba5b2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   ba5b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba5b4:	4605      	mov	r5, r0
   ba5b6:	4616      	mov	r6, r2
   ba5b8:	461f      	mov	r7, r3
   ba5ba:	460a      	mov	r2, r1
   ba5bc:	ab01      	add	r3, sp, #4
   ba5be:	e9d0 0100 	ldrd	r0, r1, [r0]
   ba5c2:	f7ff fd7b 	bl	ba0bc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   ba5c6:	f030 0402 	bics.w	r4, r0, #2
   ba5ca:	d00c      	beq.n	ba5e6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   ba5cc:	1e84      	subs	r4, r0, #2
   ba5ce:	42bc      	cmp	r4, r7
   ba5d0:	bf28      	it	cs
   ba5d2:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   ba5d4:	b13e      	cbz	r6, ba5e6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   ba5d6:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   ba5d8:	682b      	ldr	r3, [r5, #0]
   ba5da:	3102      	adds	r1, #2
   ba5dc:	4622      	mov	r2, r4
   ba5de:	4419      	add	r1, r3
   ba5e0:	4630      	mov	r0, r6
   ba5e2:	f004 f9d2 	bl	be98a <memcpy>
}
   ba5e6:	4620      	mov	r0, r4
   ba5e8:	b003      	add	sp, #12
   ba5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba5ec <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   ba5ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba5ee:	4613      	mov	r3, r2
   ba5f0:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   ba5f2:	9201      	str	r2, [sp, #4]
   ba5f4:	460a      	mov	r2, r1
   ba5f6:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   ba5f8:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   ba5fa:	f7ff ffda 	bl	ba5b2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   ba5fe:	b940      	cbnz	r0, ba612 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   ba600:	9b01      	ldr	r3, [sp, #4]
   ba602:	4622      	mov	r2, r4
   ba604:	2109      	movs	r1, #9
   ba606:	4628      	mov	r0, r5
}
   ba608:	b003      	add	sp, #12
   ba60a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   ba60e:	f7ff bfd0 	b.w	ba5b2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   ba612:	b003      	add	sp, #12
   ba614:	bd30      	pop	{r4, r5, pc}
	...

000ba618 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   ba618:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba61a:	460c      	mov	r4, r1
   ba61c:	b089      	sub	sp, #36	; 0x24
    String name;
   ba61e:	490c      	ldr	r1, [pc, #48]	; (ba650 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   ba620:	4605      	mov	r5, r0
    String name;
   ba622:	f002 feda 	bl	bd3da <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   ba626:	221f      	movs	r2, #31
   ba628:	4669      	mov	r1, sp
   ba62a:	4620      	mov	r0, r4
   ba62c:	f7ff ffde 	bl	ba5ec <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   ba630:	4606      	mov	r6, r0
   ba632:	b150      	cbz	r0, ba64a <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   ba634:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   ba636:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   ba638:	f814 1b01 	ldrb.w	r1, [r4], #1
   ba63c:	4628      	mov	r0, r5
   ba63e:	f002 ff4b 	bl	bd4d8 <_ZN6String6concatEc>
   ba642:	b110      	cbz	r0, ba64a <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   ba644:	3701      	adds	r7, #1
   ba646:	42be      	cmp	r6, r7
   ba648:	d1f6      	bne.n	ba638 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   ba64a:	4628      	mov	r0, r5
   ba64c:	b009      	add	sp, #36	; 0x24
   ba64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba650:	000c1067 	.word	0x000c1067

000ba654 <_ZNK8particle18BleAdvertisingData10customDataEPhj>:
size_t BleAdvertisingData::customData(uint8_t* buf, size_t len) const {
   ba654:	4613      	mov	r3, r2
    return get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len);
   ba656:	460a      	mov	r2, r1
   ba658:	21ff      	movs	r1, #255	; 0xff
   ba65a:	f7ff bfaa 	b.w	ba5b2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>

000ba65e <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   ba65e:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   ba660:	2302      	movs	r3, #2
   ba662:	aa01      	add	r2, sp, #4
   ba664:	2119      	movs	r1, #25
   ba666:	f7ff ffa4 	bl	ba5b2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   ba66a:	b108      	cbz	r0, ba670 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   ba66c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   ba670:	b003      	add	sp, #12
   ba672:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba678 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   ba678:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   ba67a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba67e:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   ba680:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   ba682:	8043      	strh	r3, [r0, #2]
   ba684:	220e      	movs	r2, #14
   ba686:	4629      	mov	r1, r5
   ba688:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   ba68a:	7105      	strb	r5, [r0, #4]
   ba68c:	3006      	adds	r0, #6
   ba68e:	f004 f9a4 	bl	be9da <memset>
   ba692:	f104 0014 	add.w	r0, r4, #20
   ba696:	f7ff fe25 	bl	ba2e4 <_ZN8particle7BleUuidC1Ev>
   ba69a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   ba69e:	f7ff fe21 	bl	ba2e4 <_ZN8particle7BleUuidC1Ev>
   ba6a2:	4904      	ldr	r1, [pc, #16]	; (ba6b4 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   ba6a4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   ba6a8:	f002 fe97 	bl	bd3da <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   ba6ac:	6565      	str	r5, [r4, #84]	; 0x54
    }
   ba6ae:	4620      	mov	r0, r4
   ba6b0:	bd38      	pop	{r3, r4, r5, pc}
   ba6b2:	bf00      	nop
   ba6b4:	000c1067 	.word	0x000c1067

000ba6b8 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   ba6b8:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   ba6ba:	680d      	ldr	r5, [r1, #0]
   ba6bc:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   ba6be:	4601      	mov	r1, r0
   ba6c0:	f105 0028 	add.w	r0, r5, #40	; 0x28
   ba6c4:	f7ff fe69 	bl	ba39a <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   ba6c8:	b140      	cbz	r0, ba6dc <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   ba6ca:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   ba6cc:	8aa2      	ldrh	r2, [r4, #20]
   ba6ce:	429a      	cmp	r2, r3
   ba6d0:	d805      	bhi.n	ba6de <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   ba6d2:	8ae0      	ldrh	r0, [r4, #22]
   ba6d4:	4298      	cmp	r0, r3
   ba6d6:	bf34      	ite	cc
   ba6d8:	2000      	movcc	r0, #0
   ba6da:	2001      	movcs	r0, #1
    }
   ba6dc:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   ba6de:	2000      	movs	r0, #0
   ba6e0:	e7fc      	b.n	ba6dc <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000ba6e2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   ba6e2:	b510      	push	{r4, lr}
    return data_ + size_;
   ba6e4:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   ba6e8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   ba6ec:	4293      	cmp	r3, r2
   ba6ee:	4618      	mov	r0, r3
   ba6f0:	d006      	beq.n	ba700 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   ba6f2:	6804      	ldr	r4, [r0, #0]
   ba6f4:	8824      	ldrh	r4, [r4, #0]
   ba6f6:	428c      	cmp	r4, r1
   ba6f8:	f103 0308 	add.w	r3, r3, #8
   ba6fc:	d1f6      	bne.n	ba6ec <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   ba6fe:	bd10      	pop	{r4, pc}
        return nullptr;
   ba700:	2000      	movs	r0, #0
   ba702:	e7fc      	b.n	ba6fe <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000ba704 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba704:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   ba706:	b570      	push	{r4, r5, r6, lr}
   ba708:	6003      	str	r3, [r0, #0]
   ba70a:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba70c:	2068      	movs	r0, #104	; 0x68
   ba70e:	f7f9 fcc2 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba712:	1e04      	subs	r4, r0, #0
   ba714:	f104 060c 	add.w	r6, r4, #12
   ba718:	d007      	beq.n	ba72a <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   ba71a:	2301      	movs	r3, #1
   ba71c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   ba720:	4b04      	ldr	r3, [pc, #16]	; (ba734 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   ba722:	6023      	str	r3, [r4, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba724:	4630      	mov	r0, r6
   ba726:	f7ff ffa7 	bl	ba678 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   ba72a:	e9c5 6400 	strd	r6, r4, [r5]
}
   ba72e:	4628      	mov	r0, r5
   ba730:	bd70      	pop	{r4, r5, r6, pc}
   ba732:	bf00      	nop
   ba734:	000c1dd0 	.word	0x000c1dd0

000ba738 <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   ba738:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   ba73a:	680c      	ldr	r4, [r1, #0]
   ba73c:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   ba73e:	4606      	mov	r6, r0
    return impl()->charUUID();
   ba740:	4605      	mov	r5, r0
   ba742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   ba746:	6823      	ldr	r3, [r4, #0]
   ba748:	602b      	str	r3, [r5, #0]
}
   ba74a:	4630      	mov	r0, r6
   ba74c:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba750 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   ba750:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba752:	4606      	mov	r6, r0
   ba754:	b085      	sub	sp, #20
   ba756:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   ba758:	460d      	mov	r5, r1
   ba75a:	2900      	cmp	r1, #0
   ba75c:	d050      	beq.n	ba800 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   ba75e:	2a00      	cmp	r2, #0
   ba760:	d04e      	beq.n	ba800 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
   ba762:	6804      	ldr	r4, [r0, #0]
    if (impl()->isLocal()) {
   ba764:	7823      	ldrb	r3, [r4, #0]
   ba766:	2af4      	cmp	r2, #244	; 0xf4
   ba768:	bf28      	it	cs
   ba76a:	22f4      	movcs	r2, #244	; 0xf4
   ba76c:	b343      	cbz	r3, ba7c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   ba76e:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   ba770:	0798      	lsls	r0, r3, #30
   ba772:	d509      	bpl.n	ba788 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   ba774:	89a0      	ldrh	r0, [r4, #12]
   ba776:	9203      	str	r2, [sp, #12]
   ba778:	2300      	movs	r3, #0
   ba77a:	f7ff f879 	bl	b9870 <hal_ble_gatt_server_set_characteristic_value>
   ba77e:	2800      	cmp	r0, #0
   ba780:	9a03      	ldr	r2, [sp, #12]
   ba782:	da03      	bge.n	ba78c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   ba784:	b005      	add	sp, #20
   ba786:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   ba788:	f06f 0077 	mvn.w	r0, #119	; 0x77
   ba78c:	6834      	ldr	r4, [r6, #0]
   ba78e:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   ba790:	06d9      	lsls	r1, r3, #27
   ba792:	d509      	bpl.n	ba7a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   ba794:	2f01      	cmp	r7, #1
   ba796:	d007      	beq.n	ba7a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba798:	89a0      	ldrh	r0, [r4, #12]
   ba79a:	2300      	movs	r3, #0
   ba79c:	4629      	mov	r1, r5
}
   ba79e:	b005      	add	sp, #20
   ba7a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba7a4:	f7ff b8c8 	b.w	b9938 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   ba7a8:	069b      	lsls	r3, r3, #26
   ba7aa:	d5eb      	bpl.n	ba784 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   ba7ac:	2f02      	cmp	r7, #2
   ba7ae:	d0e9      	beq.n	ba784 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba7b0:	89a0      	ldrh	r0, [r4, #12]
   ba7b2:	2300      	movs	r3, #0
   ba7b4:	4629      	mov	r1, r5
}
   ba7b6:	b005      	add	sp, #20
   ba7b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba7bc:	f7ff b8c6 	b.w	b994c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   ba7c0:	8860      	ldrh	r0, [r4, #2]
   ba7c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   ba7c6:	4288      	cmp	r0, r1
   ba7c8:	d01c      	beq.n	ba804 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   ba7ca:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   ba7cc:	074e      	lsls	r6, r1, #29
   ba7ce:	d501      	bpl.n	ba7d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   ba7d0:	2f01      	cmp	r7, #1
   ba7d2:	d104      	bne.n	ba7de <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   ba7d4:	070b      	lsls	r3, r1, #28
   ba7d6:	d409      	bmi.n	ba7ec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   ba7d8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   ba7dc:	e7d2      	b.n	ba784 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   ba7de:	89a1      	ldrh	r1, [r4, #12]
   ba7e0:	9300      	str	r3, [sp, #0]
   ba7e2:	4613      	mov	r3, r2
   ba7e4:	462a      	mov	r2, r5
   ba7e6:	f7ff f86b 	bl	b98c0 <hal_ble_gatt_client_write_without_response>
   ba7ea:	e7cb      	b.n	ba784 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   ba7ec:	2f02      	cmp	r7, #2
   ba7ee:	d0f3      	beq.n	ba7d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   ba7f0:	2300      	movs	r3, #0
   ba7f2:	89a1      	ldrh	r1, [r4, #12]
   ba7f4:	9300      	str	r3, [sp, #0]
   ba7f6:	4613      	mov	r3, r2
   ba7f8:	462a      	mov	r2, r5
   ba7fa:	f7ff f857 	bl	b98ac <hal_ble_gatt_client_write_with_response>
   ba7fe:	e7c1      	b.n	ba784 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   ba800:	4802      	ldr	r0, [pc, #8]	; (ba80c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   ba802:	e7bf      	b.n	ba784 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   ba804:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   ba808:	e7bc      	b.n	ba784 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   ba80a:	bf00      	nop
   ba80c:	fffffef2 	.word	0xfffffef2

000ba810 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   ba810:	b510      	push	{r4, lr}
   ba812:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   ba814:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   ba816:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   ba818:	bb52      	cbnz	r2, ba870 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   ba81a:	885c      	ldrh	r4, [r3, #2]
   ba81c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   ba820:	4284      	cmp	r4, r0
   ba822:	d025      	beq.n	ba870 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   ba824:	8a18      	ldrh	r0, [r3, #16]
   ba826:	b330      	cbz	r0, ba876 <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   ba828:	e9cd 2203 	strd	r2, r2, [sp, #12]
   ba82c:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   ba82e:	4a13      	ldr	r2, [pc, #76]	; (ba87c <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   ba830:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   ba832:	4a13      	ldr	r2, [pc, #76]	; (ba880 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   ba834:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   ba838:	885a      	ldrh	r2, [r3, #2]
   ba83a:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   ba83e:	8a1a      	ldrh	r2, [r3, #16]
   ba840:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   ba844:	899a      	ldrh	r2, [r3, #12]
   ba846:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   ba84a:	b159      	cbz	r1, ba864 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   ba84c:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   ba84e:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   ba850:	bf44      	itt	mi
   ba852:	2202      	movmi	r2, #2
   ba854:	9205      	strmi	r2, [sp, #20]
   ba856:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   ba858:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   ba85a:	bf42      	ittt	mi
   ba85c:	9b05      	ldrmi	r3, [sp, #20]
   ba85e:	f043 0301 	orrmi.w	r3, r3, #1
   ba862:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   ba864:	2100      	movs	r1, #0
   ba866:	4668      	mov	r0, sp
   ba868:	f7ff f85c 	bl	b9924 <hal_ble_gatt_client_configure_cccd>
}
   ba86c:	b006      	add	sp, #24
   ba86e:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   ba870:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   ba874:	e7fa      	b.n	ba86c <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   ba876:	f06f 0077 	mvn.w	r0, #119	; 0x77
   ba87a:	e7f7      	b.n	ba86c <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   ba87c:	00180003 	.word	0x00180003
   ba880:	000baa55 	.word	0x000baa55

000ba884 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   ba884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba886:	2600      	movs	r6, #0
   ba888:	6006      	str	r6, [r0, #0]
   ba88a:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba88c:	2028      	movs	r0, #40	; 0x28
   ba88e:	f7f9 fc02 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba892:	1e04      	subs	r4, r0, #0
   ba894:	f104 070c 	add.w	r7, r4, #12
   ba898:	d00a      	beq.n	ba8b0 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   ba89a:	2301      	movs	r3, #1
   ba89c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   ba8a0:	4b05      	ldr	r3, [pc, #20]	; (ba8b8 <_ZN8particle10BleServiceC1Ev+0x34>)
   ba8a2:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   ba8a4:	4638      	mov	r0, r7
   ba8a6:	f7ff fd1d 	bl	ba2e4 <_ZN8particle7BleUuidC1Ev>
   ba8aa:	6226      	str	r6, [r4, #32]
   ba8ac:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   ba8b0:	e9c5 7400 	strd	r7, r4, [r5]
}
   ba8b4:	4628      	mov	r0, r5
   ba8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba8b8:	000c1dec 	.word	0x000c1dec

000ba8bc <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   ba8bc:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba8be:	2500      	movs	r5, #0
   ba8c0:	6005      	str	r5, [r0, #0]
   ba8c2:	4606      	mov	r6, r0
   ba8c4:	2030      	movs	r0, #48	; 0x30
   ba8c6:	f7f9 fbe6 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba8ca:	4604      	mov	r4, r0
   ba8cc:	b188      	cbz	r0, ba8f2 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   ba8ce:	2301      	movs	r3, #1
   ba8d0:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   ba8d4:	4b09      	ldr	r3, [pc, #36]	; (ba8fc <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   ba8d6:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   ba8d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba8dc:	8183      	strh	r3, [r0, #12]
   ba8de:	300e      	adds	r0, #14
   ba8e0:	f7ff fcf5 	bl	ba2ce <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   ba8e4:	e9c4 5506 	strd	r5, r5, [r4, #24]
   ba8e8:	e9c4 5508 	strd	r5, r5, [r4, #32]
   ba8ec:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   ba8f0:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   ba8f2:	6074      	str	r4, [r6, #4]
   ba8f4:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   ba8f6:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   ba8f8:	4630      	mov	r0, r6
   ba8fa:	bd70      	pop	{r4, r5, r6, pc}
   ba8fc:	000c1e08 	.word	0x000c1e08

000ba900 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   ba900:	b513      	push	{r0, r1, r4, lr}
   ba902:	4604      	mov	r4, r0
    WiringBleLock lk;
   ba904:	a801      	add	r0, sp, #4
   ba906:	f7ff fca7 	bl	ba258 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   ba90a:	6823      	ldr	r3, [r4, #0]
   ba90c:	881c      	ldrh	r4, [r3, #0]
   ba90e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba912:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   ba914:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   ba916:	bf18      	it	ne
   ba918:	2401      	movne	r4, #1
    WiringBleLock lk;
   ba91a:	f7ff fcab 	bl	ba274 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   ba91e:	4620      	mov	r0, r4
   ba920:	b002      	add	sp, #8
   ba922:	bd10      	pop	{r4, pc}

000ba924 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   ba924:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba926:	4605      	mov	r5, r0
   ba928:	460c      	mov	r4, r1
    WiringBleLock lk;
   ba92a:	a801      	add	r0, sp, #4
   ba92c:	f7ff fc94 	bl	ba258 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   ba930:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   ba932:	6823      	ldr	r3, [r4, #0]
   ba934:	f8c2 3002 	str.w	r3, [r2, #2]
   ba938:	6863      	ldr	r3, [r4, #4]
   ba93a:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   ba93e:	a801      	add	r0, sp, #4
   ba940:	f7ff fc98 	bl	ba274 <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   ba944:	b003      	add	sp, #12
   ba946:	bd30      	pop	{r4, r5, pc}

000ba948 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   ba948:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba94a:	460d      	mov	r5, r1
   ba94c:	4604      	mov	r4, r0
    WiringBleLock lk;
   ba94e:	a801      	add	r0, sp, #4
   ba950:	f7ff fc82 	bl	ba258 <_ZN8particle3ble13WiringBleLockC1Ev>
   ba954:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   ba956:	f8d2 3002 	ldr.w	r3, [r2, #2]
   ba95a:	6023      	str	r3, [r4, #0]
   ba95c:	f8d2 3006 	ldr.w	r3, [r2, #6]
   ba960:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   ba962:	a801      	add	r0, sp, #4
   ba964:	f7ff fc86 	bl	ba274 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   ba968:	4620      	mov	r0, r4
   ba96a:	b003      	add	sp, #12
   ba96c:	bd30      	pop	{r4, r5, pc}

000ba96e <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   ba96e:	b530      	push	{r4, r5, lr}
   ba970:	4605      	mov	r5, r0
   ba972:	b087      	sub	sp, #28
   ba974:	460c      	mov	r4, r1
    WiringBleLock lk;
   ba976:	a801      	add	r0, sp, #4
   ba978:	f7ff fc6e 	bl	ba258 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   ba97c:	682a      	ldr	r2, [r5, #0]
   ba97e:	6823      	ldr	r3, [r4, #0]
   ba980:	8812      	ldrh	r2, [r2, #0]
   ba982:	881b      	ldrh	r3, [r3, #0]
   ba984:	429a      	cmp	r2, r3
   ba986:	d10d      	bne.n	ba9a4 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   ba988:	4629      	mov	r1, r5
   ba98a:	a802      	add	r0, sp, #8
   ba98c:	f7ff ffdc 	bl	ba948 <_ZNK8particle13BlePeerDevice7addressEv>
   ba990:	4621      	mov	r1, r4
   ba992:	a804      	add	r0, sp, #16
   ba994:	f7ff ffd8 	bl	ba948 <_ZNK8particle13BlePeerDevice7addressEv>
   ba998:	a904      	add	r1, sp, #16
   ba99a:	a802      	add	r0, sp, #8
   ba99c:	f7ff fc83 	bl	ba2a6 <_ZNK8particle10BleAddresseqERKS0_>
   ba9a0:	4604      	mov	r4, r0
   ba9a2:	b900      	cbnz	r0, ba9a6 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   ba9a4:	2400      	movs	r4, #0
    WiringBleLock lk;
   ba9a6:	a801      	add	r0, sp, #4
   ba9a8:	f7ff fc64 	bl	ba274 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   ba9ac:	4620      	mov	r0, r4
   ba9ae:	b007      	add	sp, #28
   ba9b0:	bd30      	pop	{r4, r5, pc}
	...

000ba9b4 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   ba9b4:	b510      	push	{r4, lr}
   ba9b6:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   ba9b8:	2064      	movs	r0, #100	; 0x64
   ba9ba:	f7f9 fb6c 	bl	b4096 <_Znwj>
   ba9be:	b168      	cbz	r0, ba9dc <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   ba9c0:	2300      	movs	r3, #0
   ba9c2:	e9c0 3300 	strd	r3, r3, [r0]
   ba9c6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   ba9ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
   ba9ce:	e9c0 3306 	strd	r3, r3, [r0, #24]
   ba9d2:	6203      	str	r3, [r0, #32]
   ba9d4:	62c3      	str	r3, [r0, #44]	; 0x2c
   ba9d6:	63c3      	str	r3, [r0, #60]	; 0x3c
   ba9d8:	64c3      	str	r3, [r0, #76]	; 0x4c
   ba9da:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   ba9dc:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   ba9de:	b920      	cbnz	r0, ba9ea <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   ba9e0:	4a0a      	ldr	r2, [pc, #40]	; (baa0c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   ba9e2:	490b      	ldr	r1, [pc, #44]	; (baa10 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   ba9e4:	200a      	movs	r0, #10
   ba9e6:	f7ff f9b3 	bl	b9d50 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   ba9ea:	2000      	movs	r0, #0
   ba9ec:	f7fe ff04 	bl	b97f8 <hal_ble_stack_init>
   ba9f0:	b120      	cbz	r0, ba9fc <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   ba9f2:	4a06      	ldr	r2, [pc, #24]	; (baa0c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   ba9f4:	4907      	ldr	r1, [pc, #28]	; (baa14 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   ba9f6:	200a      	movs	r0, #10
   ba9f8:	f7ff f9aa 	bl	b9d50 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   ba9fc:	6821      	ldr	r1, [r4, #0]
   ba9fe:	4806      	ldr	r0, [pc, #24]	; (baa18 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   baa00:	2200      	movs	r2, #0
   baa02:	f7fe ff85 	bl	b9910 <hal_ble_set_callback_on_periph_link_events>
}
   baa06:	4620      	mov	r0, r4
   baa08:	bd10      	pop	{r4, pc}
   baa0a:	bf00      	nop
   baa0c:	000b9a11 	.word	0x000b9a11
   baa10:	000c1bac 	.word	0x000c1bac
   baa14:	000c1bea 	.word	0x000c1bea
   baa18:	000bb461 	.word	0x000bb461

000baa1c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   baa1c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   baa1e:	4c0a      	ldr	r4, [pc, #40]	; (baa48 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   baa20:	7823      	ldrb	r3, [r4, #0]
   baa22:	f3bf 8f5b 	dmb	ish
   baa26:	07db      	lsls	r3, r3, #31
   baa28:	d40c      	bmi.n	baa44 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   baa2a:	4620      	mov	r0, r4
   baa2c:	f7f9 fb46 	bl	b40bc <__cxa_guard_acquire>
   baa30:	b140      	cbz	r0, baa44 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   baa32:	4806      	ldr	r0, [pc, #24]	; (baa4c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   baa34:	f7ff ffbe 	bl	ba9b4 <_ZN8particle14BleLocalDeviceC1Ev>
   baa38:	4620      	mov	r0, r4
   baa3a:	f7f9 fb44 	bl	b40c6 <__cxa_guard_release>
   baa3e:	4804      	ldr	r0, [pc, #16]	; (baa50 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   baa40:	f003 ff86 	bl	be950 <atexit>
    return instance;
}
   baa44:	4801      	ldr	r0, [pc, #4]	; (baa4c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   baa46:	bd10      	pop	{r4, pc}
   baa48:	2003e658 	.word	0x2003e658
   baa4c:	2003e660 	.word	0x2003e660
   baa50:	000bad65 	.word	0x000bad65

000baa54 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   baa54:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   baa56:	6803      	ldr	r3, [r0, #0]
   baa58:	3b09      	subs	r3, #9
   baa5a:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   baa5c:	b08d      	sub	sp, #52	; 0x34
   baa5e:	4604      	mov	r4, r0
   baa60:	460d      	mov	r5, r1
    switch (event->type) {
   baa62:	d811      	bhi.n	baa88 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   baa64:	f7ff ffda 	bl	baa1c <_ZN8particle14BleLocalDevice11getInstanceEv>
   baa68:	88a1      	ldrh	r1, [r4, #4]
   baa6a:	6800      	ldr	r0, [r0, #0]
   baa6c:	f7ff fe39 	bl	ba6e2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   baa70:	4603      	mov	r3, r0
   baa72:	b958      	cbnz	r0, baa8c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   baa74:	2220      	movs	r2, #32
   baa76:	e9cd 2004 	strd	r2, r0, [sp, #16]
   baa7a:	4a0b      	ldr	r2, [pc, #44]	; (baaa8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   baa7c:	9200      	str	r2, [sp, #0]
   baa7e:	490b      	ldr	r1, [pc, #44]	; (baaac <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   baa80:	aa04      	add	r2, sp, #16
   baa82:	2032      	movs	r0, #50	; 0x32
   baa84:	f7ff f96c 	bl	b9d60 <log_message>
}
   baa88:	b00d      	add	sp, #52	; 0x34
   baa8a:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   baa8c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   baa8e:	2a00      	cmp	r2, #0
   baa90:	d0fa      	beq.n	baa88 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   baa92:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   baa96:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   baa9a:	e9cd 1203 	strd	r1, r2, [sp, #12]
   baa9e:	6dac      	ldr	r4, [r5, #88]	; 0x58
   baaa0:	aa04      	add	r2, sp, #16
   baaa2:	a903      	add	r1, sp, #12
   baaa4:	47a0      	blx	r4
}
   baaa6:	e7ef      	b.n	baa88 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   baaa8:	000c1c2c 	.word	0x000c1c2c
   baaac:	000c1bc3 	.word	0x000c1bc3

000baab0 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   baab0:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   baab2:	2000      	movs	r0, #0
   baab4:	f7fe fea0 	bl	b97f8 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   baab8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   baabc:	bd08      	pop	{r3, pc}

000baabe <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   baabe:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   baac0:	2100      	movs	r1, #0
   baac2:	f7fe bea1 	b.w	b9808 <hal_ble_gap_set_tx_power>
	...

000baac8 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   baac8:	b570      	push	{r4, r5, r6, lr}
   baaca:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   baacc:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   baace:	460e      	mov	r6, r1
   baad0:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   baad2:	f7ff fb3f 	bl	ba154 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   baad6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   baada:	f7ff fb46 	bl	ba16a <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   baade:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   baae2:	2200      	movs	r2, #0
   baae4:	4621      	mov	r1, r4
   baae6:	4803      	ldr	r0, [pc, #12]	; (baaf4 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   baae8:	f7fe fea6 	bl	b9838 <hal_ble_gap_start_scan>
   baaec:	2800      	cmp	r0, #0
        return foundCount_;
   baaee:	bfa8      	it	ge
   baaf0:	6960      	ldrge	r0, [r4, #20]
    }
   baaf2:	bd70      	pop	{r4, r5, r6, pc}
   baaf4:	000bc46d 	.word	0x000bc46d

000baaf8 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   baaf8:	b510      	push	{r4, lr}
   baafa:	4604      	mov	r4, r0
    ::free(ptr);
   baafc:	6940      	ldr	r0, [r0, #20]
   baafe:	f7ff fa13 	bl	b9f28 <free>
   bab02:	68a0      	ldr	r0, [r4, #8]
   bab04:	f7ff fa10 	bl	b9f28 <free>
   bab08:	4620      	mov	r0, r4
   bab0a:	bd10      	pop	{r4, pc}

000bab0c <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   bab0c:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   bab0e:	f647 717f 	movw	r1, #32639	; 0x7f7f
   bab12:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
   bab16:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bab1a:	e9c0 2204 	strd	r2, r2, [r0, #16]
   bab1e:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   bab22:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   bab26:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   bab2a:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   bab2e:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   bab32:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   bab36:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   bab3a:	6202      	str	r2, [r0, #32]
   bab3c:	6302      	str	r2, [r0, #48]	; 0x30
   bab3e:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
   bab42:	4770      	bx	lr

000bab44 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>:
    std::function<void(const BleScanResult*)> scanResultCallback_;
    BleOnScanResultStdFunction scanResultCallbackRef_;
    BleScanFilter filter_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   bab44:	b530      	push	{r4, r5, lr}
   bab46:	b085      	sub	sp, #20
    hal_ble_scan_params_t scanParams = {};
   bab48:	2400      	movs	r4, #0
    scanParams.size = sizeof(hal_ble_scan_params_t);
   bab4a:	2310      	movs	r3, #16
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   bab4c:	460d      	mov	r5, r1
    scanParams.size = sizeof(hal_ble_scan_params_t);
   bab4e:	f8ad 3002 	strh.w	r3, [sp, #2]
    scanParams.version = BLE_API_VERSION;
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   bab52:	4621      	mov	r1, r4
    scanParams.version = BLE_API_VERSION;
   bab54:	2303      	movs	r3, #3
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   bab56:	4668      	mov	r0, sp
    scanParams.version = BLE_API_VERSION;
   bab58:	f8ad 3000 	strh.w	r3, [sp]
    hal_ble_scan_params_t scanParams = {};
   bab5c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   bab60:	9403      	str	r4, [sp, #12]
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   bab62:	f7fe fe61 	bl	b9828 <hal_ble_gap_get_scan_parameters>
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   bab66:	4621      	mov	r1, r4
   bab68:	4668      	mov	r0, sp
    scanParams.timeout = timeout;
   bab6a:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   bab6e:	f7fe fe53 	bl	b9818 <hal_ble_gap_set_scan_parameters>
}
   bab72:	b005      	add	sp, #20
   bab74:	bd30      	pop	{r4, r5, pc}

000bab76 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   bab76:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   bab78:	69d8      	ldr	r0, [r3, #28]
}
   bab7a:	2800      	cmp	r0, #0
   bab7c:	bfd4      	ite	le
   bab7e:	2000      	movle	r0, #0
   bab80:	2001      	movgt	r0, #1
   bab82:	4770      	bx	lr

000bab84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bab84:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bab86:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bab8a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bab8c:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bab90:	42ae      	cmp	r6, r5
   bab92:	d004      	beq.n	bab9e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bab94:	4628      	mov	r0, r5
   bab96:	f002 fbd5 	bl	bd344 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bab9a:	3510      	adds	r5, #16
   bab9c:	e7f8      	b.n	bab90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bab9e:	6820      	ldr	r0, [r4, #0]
   baba0:	f7ff f9c2 	bl	b9f28 <free>
}
   baba4:	4620      	mov	r0, r4
   baba6:	bd70      	pop	{r4, r5, r6, pc}

000baba8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   baba8:	b510      	push	{r4, lr}
   babaa:	4604      	mov	r4, r0
    ::free(ptr);
   babac:	6800      	ldr	r0, [r0, #0]
   babae:	f7ff f9bb 	bl	b9f28 <free>
}
   babb2:	4620      	mov	r0, r4
   babb4:	bd10      	pop	{r4, pc}

000babb6 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   babb6:	b570      	push	{r4, r5, r6, lr}
   babb8:	4604      	mov	r4, r0
    ::free(ptr);
   babba:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   babbc:	f7ff f9b4 	bl	b9f28 <free>
   babc0:	6d20      	ldr	r0, [r4, #80]	; 0x50
   babc2:	f7ff f9b1 	bl	b9f28 <free>
    }
    ~BleScanFilter() = default;
   babc6:	f104 0538 	add.w	r5, r4, #56	; 0x38
   babca:	f104 0044 	add.w	r0, r4, #68	; 0x44
   babce:	f7ff ffeb 	bl	baba8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   babd2:	4628      	mov	r0, r5
   babd4:	f7ff ffd6 	bl	bab84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   babd8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   babdc:	f7f9 fccc 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
   babe0:	f104 0018 	add.w	r0, r4, #24
   babe4:	f7f9 fcc8 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   babe8:	e9d4 5300 	ldrd	r5, r3, [r4]
   babec:	2624      	movs	r6, #36	; 0x24
   babee:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   babf2:	42ae      	cmp	r6, r5
   babf4:	d004      	beq.n	bac00 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   babf6:	4628      	mov	r0, r5
   babf8:	f7ff ff7e 	bl	baaf8 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   babfc:	3524      	adds	r5, #36	; 0x24
   babfe:	e7f8      	b.n	babf2 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   bac00:	6820      	ldr	r0, [r4, #0]
   bac02:	f7ff f991 	bl	b9f28 <free>
   bac06:	4620      	mov	r0, r4
   bac08:	bd70      	pop	{r4, r5, r6, pc}
	...

000bac0c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   bac0c:	b530      	push	{r4, r5, lr}
   bac0e:	4615      	mov	r5, r2
   bac10:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   bac12:	460c      	mov	r4, r1
   bac14:	b179      	cbz	r1, bac36 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   bac16:	b172      	cbz	r2, bac36 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
    BleScanDelegator scanner;
   bac18:	a801      	add	r0, sp, #4
   bac1a:	f7ff ff77 	bl	bab0c <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   bac1e:	4621      	mov	r1, r4
   bac20:	462a      	mov	r2, r5
   bac22:	a801      	add	r0, sp, #4
   bac24:	f7ff ff50 	bl	baac8 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   bac28:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   bac2a:	a801      	add	r0, sp, #4
   bac2c:	f7ff ffc3 	bl	babb6 <_ZN8particle16BleScanDelegatorD1Ev>
}
   bac30:	4620      	mov	r0, r4
   bac32:	b01f      	add	sp, #124	; 0x7c
   bac34:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   bac36:	4c01      	ldr	r4, [pc, #4]	; (bac3c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   bac38:	e7fa      	b.n	bac30 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   bac3a:	bf00      	nop
   bac3c:	fffffef2 	.word	0xfffffef2

000bac40 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   bac40:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   bac42:	1e14      	subs	r4, r2, #0
   bac44:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   bac46:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   bac48:	db02      	blt.n	bac50 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   bac4a:	1862      	adds	r2, r4, r1
   bac4c:	429a      	cmp	r2, r3
   bac4e:	dd00      	ble.n	bac52 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   bac50:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   bac52:	682a      	ldr	r2, [r5, #0]
   bac54:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   bac56:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   bac58:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   bac5a:	1a52      	subs	r2, r2, r1
   bac5c:	f003 fea3 	bl	be9a6 <memmove>
    size_ -= n;
   bac60:	686a      	ldr	r2, [r5, #4]
   bac62:	1b12      	subs	r2, r2, r4
   bac64:	606a      	str	r2, [r5, #4]
}
   bac66:	bd38      	pop	{r3, r4, r5, pc}

000bac68 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   bac68:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bac6a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   bac6c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   bac6e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bac70:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   bac72:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bac74:	f7f9 fa0f 	bl	b4096 <_Znwj>
   bac78:	b118      	cbz	r0, bac82 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   bac7a:	682b      	ldr	r3, [r5, #0]
   bac7c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bac7e:	686b      	ldr	r3, [r5, #4]
   bac80:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   bac82:	4b03      	ldr	r3, [pc, #12]	; (bac90 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   bac84:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   bac86:	4b03      	ldr	r3, [pc, #12]	; (bac94 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bac88:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   bac8a:	60a3      	str	r3, [r4, #8]
      }
   bac8c:	4620      	mov	r0, r4
   bac8e:	bd38      	pop	{r3, r4, r5, pc}
   bac90:	000ba0fd 	.word	0x000ba0fd
   bac94:	000ba115 	.word	0x000ba115

000bac98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   bac98:	680b      	ldr	r3, [r1, #0]
   bac9a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   bac9c:	b113      	cbz	r3, baca4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   bac9e:	685a      	ldr	r2, [r3, #4]
   baca0:	3201      	adds	r2, #1
   baca2:	605a      	str	r2, [r3, #4]
      }
   baca4:	4770      	bx	lr

000baca6 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   baca6:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   baca8:	f851 3b04 	ldr.w	r3, [r1], #4
   bacac:	4604      	mov	r4, r0
   bacae:	f840 3b04 	str.w	r3, [r0], #4
   bacb2:	f7ff fff1 	bl	bac98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   bacb6:	6823      	ldr	r3, [r4, #0]
   bacb8:	b90b      	cbnz	r3, bacbe <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   bacba:	f7ff fa15 	bl	ba0e8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   bacbe:	4620      	mov	r0, r4
   bacc0:	bd10      	pop	{r4, pc}

000bacc2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bacc2:	b510      	push	{r4, lr}
   bacc4:	f851 3b04 	ldr.w	r3, [r1], #4
   bacc8:	4604      	mov	r4, r0
   bacca:	f840 3b04 	str.w	r3, [r0], #4
   bacce:	f7ff ffe3 	bl	bac98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bacd2:	4620      	mov	r0, r4
   bacd4:	bd10      	pop	{r4, pc}

000bacd6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bacd6:	b510      	push	{r4, lr}
   bacd8:	f851 3b04 	ldr.w	r3, [r1], #4
   bacdc:	4604      	mov	r4, r0
   bacde:	f840 3b04 	str.w	r3, [r0], #4
   bace2:	f7ff ffd9 	bl	bac98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bace6:	4620      	mov	r0, r4
   bace8:	bd10      	pop	{r4, pc}

000bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   bacea:	b510      	push	{r4, lr}
   bacec:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   bacee:	6800      	ldr	r0, [r0, #0]
   bacf0:	b108      	cbz	r0, bacf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   bacf2:	f7f9 fc7f 	bl	b45f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   bacf6:	4620      	mov	r0, r4
   bacf8:	bd10      	pop	{r4, pc}

000bacfa <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   bacfa:	b510      	push	{r4, lr}
   bacfc:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bacfe:	3004      	adds	r0, #4
   bad00:	f7ff fff3 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bad04:	4620      	mov	r0, r4
   bad06:	bd10      	pop	{r4, pc}

000bad08 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bad08:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bad0a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bad0e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bad10:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bad14:	42ae      	cmp	r6, r5
   bad16:	d004      	beq.n	bad22 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   bad18:	1d28      	adds	r0, r5, #4
   bad1a:	f7ff ffe6 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bad1e:	3508      	adds	r5, #8
   bad20:	e7f8      	b.n	bad14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bad22:	6820      	ldr	r0, [r4, #0]
   bad24:	f7ff f900 	bl	b9f28 <free>
}
   bad28:	4620      	mov	r0, r4
   bad2a:	bd70      	pop	{r4, r5, r6, pc}

000bad2c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bad2c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bad2e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bad32:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bad34:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bad38:	42ae      	cmp	r6, r5
   bad3a:	d004      	beq.n	bad46 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   bad3c:	1d28      	adds	r0, r5, #4
   bad3e:	f7ff ffd4 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bad42:	3508      	adds	r5, #8
   bad44:	e7f8      	b.n	bad38 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bad46:	6820      	ldr	r0, [r4, #0]
   bad48:	f7ff f8ee 	bl	b9f28 <free>
}
   bad4c:	4620      	mov	r0, r4
   bad4e:	bd70      	pop	{r4, r5, r6, pc}

000bad50 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bad50:	b510      	push	{r4, lr}
   bad52:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   bad54:	3024      	adds	r0, #36	; 0x24
   bad56:	f7ff ffe9 	bl	bad2c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bad5a:	f104 0018 	add.w	r0, r4, #24
   bad5e:	f7ff ffd3 	bl	bad08 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   bad62:	bd10      	pop	{r4, pc}

000bad64 <__tcf_0>:
    static BleLocalDevice instance;
   bad64:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   bad66:	4b17      	ldr	r3, [pc, #92]	; (badc4 <__tcf_0+0x60>)
   bad68:	681c      	ldr	r4, [r3, #0]
   bad6a:	b354      	cbz	r4, badc2 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   bad6c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bad70:	f7f9 fc02 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
   bad74:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bad78:	f7f9 fbfe 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
   bad7c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bad80:	f7f9 fbfa 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
   bad84:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bad88:	f7f9 fbf6 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   bad8c:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   bad90:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bad94:	42ae      	cmp	r6, r5
   bad96:	d004      	beq.n	bada2 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   bad98:	1d28      	adds	r0, r5, #4
   bad9a:	f7ff ffa6 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bad9e:	3508      	adds	r5, #8
   bada0:	e7f8      	b.n	bad94 <__tcf_0+0x30>
    ::free(ptr);
   bada2:	69a0      	ldr	r0, [r4, #24]
   bada4:	f7ff f8c0 	bl	b9f28 <free>
    ~BleLocalDeviceImpl() = default;
   bada8:	f104 000c 	add.w	r0, r4, #12
   badac:	f7ff ffbe 	bl	bad2c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   badb0:	4620      	mov	r0, r4
   badb2:	f7ff ffa9 	bl	bad08 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   badb6:	4620      	mov	r0, r4
   badb8:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   badba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   badbe:	f7f9 b96e 	b.w	b409e <_ZdlPvj>
   badc2:	bd70      	pop	{r4, r5, r6, pc}
   badc4:	2003e660 	.word	0x2003e660

000badc8 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   badc8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   badca:	b510      	push	{r4, lr}
      if (_M_empty())
   badcc:	b90a      	cbnz	r2, badd2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   badce:	f002 ff34 	bl	bdc3a <_ZSt25__throw_bad_function_callv>
    }
   badd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   badd6:	68c3      	ldr	r3, [r0, #12]
   badd8:	4718      	bx	r3

000badda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   badda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   badde:	2300      	movs	r3, #0
   bade0:	e9c0 3300 	strd	r3, r3, [r0]
   bade4:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bade6:	f8d1 8004 	ldr.w	r8, [r1, #4]
   badea:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   badec:	4605      	mov	r5, r0
   badee:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   badf0:	dd4a      	ble.n	bae88 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   badf2:	ea4f 1008 	mov.w	r0, r8, lsl #4
   badf6:	f7ff f88f 	bl	b9f18 <malloc>
            if (!d) {
   badfa:	4606      	mov	r6, r0
   badfc:	2800      	cmp	r0, #0
   badfe:	d043      	beq.n	bae88 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   bae00:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   bae04:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   bae06:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   bae0a:	d916      	bls.n	bae3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   bae0c:	4550      	cmp	r0, sl
   bae0e:	d215      	bcs.n	bae3c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   bae10:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   bae14:	f1a4 0910 	sub.w	r9, r4, #16
   bae18:	ebaa 0404 	sub.w	r4, sl, r4
   bae1c:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   bae1e:	45d1      	cmp	r9, sl
   bae20:	d01d      	beq.n	bae5e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   bae22:	b11c      	cbz	r4, bae2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   bae24:	4651      	mov	r1, sl
   bae26:	4620      	mov	r0, r4
   bae28:	f002 fb08 	bl	bd43c <_ZN6StringC1EOS_>
                end->~T();
   bae2c:	4650      	mov	r0, sl
   bae2e:	f002 fa89 	bl	bd344 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bae32:	f1aa 0a10 	sub.w	sl, sl, #16
   bae36:	3c10      	subs	r4, #16
   bae38:	e7f1      	b.n	bae1e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   bae3a:	d010      	beq.n	bae5e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   bae3c:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   bae3e:	45a2      	cmp	sl, r4
   bae40:	d00d      	beq.n	bae5e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   bae42:	f1b9 0f00 	cmp.w	r9, #0
   bae46:	d003      	beq.n	bae50 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   bae48:	4621      	mov	r1, r4
   bae4a:	4648      	mov	r0, r9
   bae4c:	f002 faf6 	bl	bd43c <_ZN6StringC1EOS_>
                p->~T();
   bae50:	4620      	mov	r0, r4
   bae52:	f002 fa77 	bl	bd344 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   bae56:	3410      	adds	r4, #16
   bae58:	f109 0910 	add.w	r9, r9, #16
   bae5c:	e7ef      	b.n	bae3e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   bae5e:	6828      	ldr	r0, [r5, #0]
   bae60:	f7ff f862 	bl	b9f28 <free>
        capacity_ = n;
   bae64:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   bae68:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bae6a:	e9d7 4300 	ldrd	r4, r3, [r7]
   bae6e:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   bae72:	45a0      	cmp	r8, r4
   bae74:	d006      	beq.n	bae84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   bae76:	4621      	mov	r1, r4
   bae78:	4630      	mov	r0, r6
   bae7a:	f002 faf9 	bl	bd470 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   bae7e:	3410      	adds	r4, #16
   bae80:	3610      	adds	r6, #16
   bae82:	e7f6      	b.n	bae72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   bae84:	687b      	ldr	r3, [r7, #4]
   bae86:	606b      	str	r3, [r5, #4]
}
   bae88:	4628      	mov	r0, r5
   bae8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000bae8e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   bae8e:	b530      	push	{r4, r5, lr}
   bae90:	b08d      	sub	sp, #52	; 0x34
   bae92:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   bae94:	f100 0138 	add.w	r1, r0, #56	; 0x38
   bae98:	a801      	add	r0, sp, #4
   bae9a:	f7ff ff9e 	bl	badda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   bae9e:	9b02      	ldr	r3, [sp, #8]
   baea0:	2b00      	cmp	r3, #0
   baea2:	dd2f      	ble.n	baf04 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   baea4:	f104 0114 	add.w	r1, r4, #20
   baea8:	a804      	add	r0, sp, #16
   baeaa:	f7ff fbb5 	bl	ba618 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   baeae:	f104 0108 	add.w	r1, r4, #8
   baeb2:	a808      	add	r0, sp, #32
   baeb4:	f7ff fbb0 	bl	ba618 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   baeb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   baeba:	9b06      	ldr	r3, [sp, #24]
   baebc:	4313      	orrs	r3, r2
   baebe:	d01f      	beq.n	baf00 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   baec0:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   baec4:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   baec8:	42ac      	cmp	r4, r5
   baeca:	d019      	beq.n	baf00 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   baecc:	a904      	add	r1, sp, #16
   baece:	4620      	mov	r0, r4
   baed0:	f002 fb24 	bl	bd51c <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   baed4:	b160      	cbz	r0, baef0 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   baed6:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   baed8:	a808      	add	r0, sp, #32
   baeda:	f002 fa33 	bl	bd344 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   baede:	a804      	add	r0, sp, #16
   baee0:	f002 fa30 	bl	bd344 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   baee4:	a801      	add	r0, sp, #4
   baee6:	f7ff fe4d 	bl	bab84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   baeea:	4620      	mov	r0, r4
   baeec:	b00d      	add	sp, #52	; 0x34
   baeee:	bd30      	pop	{r4, r5, pc}
   baef0:	4620      	mov	r0, r4
   baef2:	a908      	add	r1, sp, #32
   baef4:	f002 fb12 	bl	bd51c <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   baef8:	3410      	adds	r4, #16
   baefa:	2800      	cmp	r0, #0
   baefc:	d0e4      	beq.n	baec8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   baefe:	e7ea      	b.n	baed6 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   baf00:	2400      	movs	r4, #0
   baf02:	e7e9      	b.n	baed8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   baf04:	2401      	movs	r4, #1
   baf06:	e7ed      	b.n	baee4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000baf08 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   baf08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   baf0a:	2300      	movs	r3, #0
   baf0c:	e9c0 3300 	strd	r3, r3, [r0]
   baf10:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   baf12:	684f      	ldr	r7, [r1, #4]
   baf14:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   baf16:	4605      	mov	r5, r0
   baf18:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   baf1a:	dd3e      	ble.n	baf9a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   baf1c:	00f8      	lsls	r0, r7, #3
   baf1e:	f7fe fffb 	bl	b9f18 <malloc>
            if (!d) {
   baf22:	4604      	mov	r4, r0
   baf24:	b3c8      	cbz	r0, baf9a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   baf26:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   baf2a:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   baf2c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   baf30:	d910      	bls.n	baf54 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   baf32:	429c      	cmp	r4, r3
   baf34:	d20f      	bcs.n	baf56 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   baf36:	3b08      	subs	r3, #8
            dest += end - p - 1;
   baf38:	1a1a      	subs	r2, r3, r0
   baf3a:	f1a0 0c08 	sub.w	ip, r0, #8
   baf3e:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   baf40:	459c      	cmp	ip, r3
   baf42:	d018      	beq.n	baf76 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   baf44:	b11a      	cbz	r2, baf4e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   baf46:	6819      	ldr	r1, [r3, #0]
   baf48:	6011      	str	r1, [r2, #0]
   baf4a:	6859      	ldr	r1, [r3, #4]
   baf4c:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   baf4e:	3b08      	subs	r3, #8
   baf50:	3a08      	subs	r2, #8
   baf52:	e7f5      	b.n	baf40 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   baf54:	d00f      	beq.n	baf76 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   baf56:	4601      	mov	r1, r0
   baf58:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   baf5a:	428b      	cmp	r3, r1
   baf5c:	d00b      	beq.n	baf76 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   baf5e:	b13a      	cbz	r2, baf70 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   baf60:	f8d1 c000 	ldr.w	ip, [r1]
   baf64:	f8c2 c000 	str.w	ip, [r2]
   baf68:	f8d1 c004 	ldr.w	ip, [r1, #4]
   baf6c:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   baf70:	3108      	adds	r1, #8
   baf72:	3208      	adds	r2, #8
   baf74:	e7f1      	b.n	baf5a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   baf76:	f7fe ffd7 	bl	b9f28 <free>
        data_ = d;
   baf7a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   baf7c:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   baf7e:	e9d6 3100 	ldrd	r3, r1, [r6]
   baf82:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   baf86:	4298      	cmp	r0, r3
   baf88:	d006      	beq.n	baf98 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   baf8a:	681a      	ldr	r2, [r3, #0]
   baf8c:	6022      	str	r2, [r4, #0]
   baf8e:	685a      	ldr	r2, [r3, #4]
   baf90:	6062      	str	r2, [r4, #4]
   baf92:	3308      	adds	r3, #8
   baf94:	3408      	adds	r4, #8
   baf96:	e7f6      	b.n	baf86 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   baf98:	6069      	str	r1, [r5, #4]
}
   baf9a:	4628      	mov	r0, r5
   baf9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000baf9e <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   baf9e:	b570      	push	{r4, r5, r6, lr}
   bafa0:	4604      	mov	r4, r0
        capacity_(0) {
   bafa2:	2000      	movs	r0, #0
   bafa4:	e9c4 0000 	strd	r0, r0, [r4]
   bafa8:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bafaa:	684e      	ldr	r6, [r1, #4]
   bafac:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bafae:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bafb0:	dd12      	ble.n	bafd8 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   bafb2:	0071      	lsls	r1, r6, #1
   bafb4:	f7fe ffc0 	bl	b9f38 <realloc>
            if (!d) {
   bafb8:	b170      	cbz	r0, bafd8 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   bafba:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bafbc:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bafbe:	e9d5 3200 	ldrd	r3, r2, [r5]
   bafc2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   bafc6:	429a      	cmp	r2, r3
   bafc8:	d004      	beq.n	bafd4 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   bafca:	f833 1b02 	ldrh.w	r1, [r3], #2
   bafce:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   bafd2:	e7f8      	b.n	bafc6 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   bafd4:	686b      	ldr	r3, [r5, #4]
   bafd6:	6063      	str	r3, [r4, #4]
}
   bafd8:	4620      	mov	r0, r4
   bafda:	bd70      	pop	{r4, r5, r6, pc}

000bafdc <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   bafdc:	b510      	push	{r4, lr}
        if (!dismissed_) {
   bafde:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   bafe0:	4604      	mov	r4, r0
        if (!dismissed_) {
   bafe2:	b923      	cbnz	r3, bafee <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   bafe4:	6803      	ldr	r3, [r0, #0]
   bafe6:	6818      	ldr	r0, [r3, #0]
   bafe8:	b108      	cbz	r0, bafee <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   bafea:	f7fe ff9d 	bl	b9f28 <free>
            func_();
        }
    }
   bafee:	4620      	mov	r0, r4
   baff0:	bd10      	pop	{r4, pc}

000baff2 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   baff2:	b510      	push	{r4, lr}
        if (!dismissed_) {
   baff4:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   baff6:	4604      	mov	r4, r0
        if (!dismissed_) {
   baff8:	b923      	cbnz	r3, bb004 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   baffa:	6803      	ldr	r3, [r0, #0]
   baffc:	6818      	ldr	r0, [r3, #0]
   baffe:	b108      	cbz	r0, bb004 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   bb000:	f7fe ff92 	bl	b9f28 <free>
    }
   bb004:	4620      	mov	r0, r4
   bb006:	bd10      	pop	{r4, pc}

000bb008 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   bb008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   bb00c:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   bb010:	b08f      	sub	sp, #60	; 0x3c
   bb012:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   bb014:	f1b8 0f00 	cmp.w	r8, #0
   bb018:	d072      	beq.n	bb100 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   bb01a:	6f05      	ldr	r5, [r0, #112]	; 0x70
   bb01c:	2d00      	cmp	r5, #0
   bb01e:	d06f      	beq.n	bb100 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   bb020:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   bb024:	231f      	movs	r3, #31
   bb026:	2200      	movs	r2, #0
   bb028:	21ff      	movs	r1, #255	; 0xff
   bb02a:	4648      	mov	r0, r9
   bb02c:	f7ff fac1 	bl	ba5b2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   bb030:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   bb032:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   bb034:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   bb036:	2200      	movs	r2, #0
   bb038:	4619      	mov	r1, r3
   bb03a:	4638      	mov	r0, r7
   bb03c:	f7ff fab9 	bl	ba5b2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   bb040:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   bb042:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   bb044:	d006      	beq.n	bb054 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   bb046:	42ae      	cmp	r6, r5
   bb048:	d030      	beq.n	bb0ac <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   bb04a:	2400      	movs	r4, #0
    }
   bb04c:	4620      	mov	r0, r4
   bb04e:	b00f      	add	sp, #60	; 0x3c
   bb050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   bb054:	4620      	mov	r0, r4
   bb056:	f7fe ff5f 	bl	b9f18 <malloc>
            dismissed_(false) {
   bb05a:	ab03      	add	r3, sp, #12
   bb05c:	9304      	str	r3, [sp, #16]
   bb05e:	2300      	movs	r3, #0
   bb060:	4604      	mov	r4, r0
   bb062:	9003      	str	r0, [sp, #12]
   bb064:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   bb068:	b970      	cbnz	r0, bb088 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   bb06a:	2320      	movs	r3, #32
   bb06c:	e9cd 3006 	strd	r3, r0, [sp, #24]
   bb070:	4b24      	ldr	r3, [pc, #144]	; (bb104 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   bb072:	9300      	str	r3, [sp, #0]
   bb074:	4924      	ldr	r1, [pc, #144]	; (bb108 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   bb076:	4603      	mov	r3, r0
   bb078:	aa06      	add	r2, sp, #24
   bb07a:	2032      	movs	r0, #50	; 0x32
   bb07c:	f7fe fe70 	bl	b9d60 <log_message>
                    return false;
   bb080:	a804      	add	r0, sp, #16
   bb082:	f7ff ffab 	bl	bafdc <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   bb086:	e7e1      	b.n	bb04c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   bb088:	4602      	mov	r2, r0
   bb08a:	21ff      	movs	r1, #255	; 0xff
   bb08c:	462b      	mov	r3, r5
   bb08e:	4648      	mov	r0, r9
   bb090:	f7ff fa8f 	bl	ba5b2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   bb094:	9803      	ldr	r0, [sp, #12]
   bb096:	462a      	mov	r2, r5
   bb098:	4641      	mov	r1, r8
   bb09a:	f003 fc66 	bl	be96a <memcmp>
   bb09e:	b118      	cbz	r0, bb0a8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   bb0a0:	a804      	add	r0, sp, #16
   bb0a2:	f7ff ff9b 	bl	bafdc <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   bb0a6:	e7ce      	b.n	bb046 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   bb0a8:	2401      	movs	r4, #1
   bb0aa:	e7e9      	b.n	bb080 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   bb0ac:	4628      	mov	r0, r5
   bb0ae:	f7fe ff33 	bl	b9f18 <malloc>
   bb0b2:	2400      	movs	r4, #0
   bb0b4:	ab03      	add	r3, sp, #12
   bb0b6:	4606      	mov	r6, r0
   bb0b8:	9003      	str	r0, [sp, #12]
   bb0ba:	9304      	str	r3, [sp, #16]
   bb0bc:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   bb0c0:	b978      	cbnz	r0, bb0e2 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   bb0c2:	2320      	movs	r3, #32
   bb0c4:	e9cd 3006 	strd	r3, r0, [sp, #24]
   bb0c8:	4b0e      	ldr	r3, [pc, #56]	; (bb104 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   bb0ca:	9300      	str	r3, [sp, #0]
   bb0cc:	490e      	ldr	r1, [pc, #56]	; (bb108 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   bb0ce:	4603      	mov	r3, r0
   bb0d0:	aa06      	add	r2, sp, #24
   bb0d2:	2032      	movs	r0, #50	; 0x32
   bb0d4:	f7fe fe44 	bl	b9d60 <log_message>
                    return false;
   bb0d8:	4634      	mov	r4, r6
   bb0da:	a804      	add	r0, sp, #16
   bb0dc:	f7ff ff89 	bl	baff2 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   bb0e0:	e7b4      	b.n	bb04c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   bb0e2:	4602      	mov	r2, r0
   bb0e4:	21ff      	movs	r1, #255	; 0xff
   bb0e6:	462b      	mov	r3, r5
   bb0e8:	4638      	mov	r0, r7
   bb0ea:	f7ff fa62 	bl	ba5b2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   bb0ee:	9803      	ldr	r0, [sp, #12]
   bb0f0:	462a      	mov	r2, r5
   bb0f2:	4641      	mov	r1, r8
   bb0f4:	f003 fc39 	bl	be96a <memcmp>
   bb0f8:	2800      	cmp	r0, #0
   bb0fa:	d1ee      	bne.n	bb0da <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   bb0fc:	2401      	movs	r4, #1
   bb0fe:	e7ec      	b.n	bb0da <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   bb100:	2401      	movs	r4, #1
   bb102:	e7a3      	b.n	bb04c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   bb104:	000c1c44 	.word	0x000c1c44
   bb108:	000c1bc3 	.word	0x000c1bc3

000bb10c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   bb10c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   bb10e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   bb110:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bb112:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bb114:	dd03      	ble.n	bb11e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   bb116:	f7fe ff0f 	bl	b9f38 <realloc>
            if (!d) {
   bb11a:	b918      	cbnz	r0, bb124 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   bb11c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   bb11e:	f7fe ff03 	bl	b9f28 <free>
        T* d = nullptr;
   bb122:	2000      	movs	r0, #0
        data_ = d;
   bb124:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bb126:	60a5      	str	r5, [r4, #8]
        return true;
   bb128:	2001      	movs	r0, #1
   bb12a:	e7f7      	b.n	bb11c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000bb12c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   bb12c:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   bb12e:	6883      	ldr	r3, [r0, #8]
   bb130:	428b      	cmp	r3, r1
   bb132:	da02      	bge.n	bb13a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   bb134:	f7ff ffea 	bl	bb10c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   bb138:	bd08      	pop	{r3, pc}
    return true;
   bb13a:	2001      	movs	r0, #1
   bb13c:	e7fc      	b.n	bb138 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000bb13e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb13e:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bb140:	2300      	movs	r3, #0
   bb142:	e9c0 3300 	strd	r3, r3, [r0]
   bb146:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb148:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb14a:	6849      	ldr	r1, [r1, #4]
   bb14c:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb14e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb150:	dd10      	ble.n	bb174 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   bb152:	f7ff ffdb 	bl	bb10c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bb156:	b168      	cbz	r0, bb174 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb158:	e9d5 3100 	ldrd	r3, r1, [r5]
   bb15c:	6822      	ldr	r2, [r4, #0]
   bb15e:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   bb160:	4299      	cmp	r1, r3
   bb162:	d005      	beq.n	bb170 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   bb164:	b10a      	cbz	r2, bb16a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   bb166:	7818      	ldrb	r0, [r3, #0]
   bb168:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   bb16a:	3301      	adds	r3, #1
   bb16c:	3201      	adds	r2, #1
   bb16e:	e7f7      	b.n	bb160 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   bb170:	686b      	ldr	r3, [r5, #4]
   bb172:	6063      	str	r3, [r4, #4]
}
   bb174:	4620      	mov	r0, r4
   bb176:	bd38      	pop	{r3, r4, r5, pc}

000bb178 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   bb178:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   bb17a:	680b      	ldr	r3, [r1, #0]
   bb17c:	6003      	str	r3, [r0, #0]
   bb17e:	684b      	ldr	r3, [r1, #4]
   bb180:	6043      	str	r3, [r0, #4]
   bb182:	4604      	mov	r4, r0
   bb184:	460d      	mov	r5, r1
class BleAdvertisingData {
   bb186:	3008      	adds	r0, #8
   bb188:	3108      	adds	r1, #8
   bb18a:	f7ff ffd8 	bl	bb13e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   bb18e:	f105 0114 	add.w	r1, r5, #20
   bb192:	f104 0014 	add.w	r0, r4, #20
   bb196:	f7ff ffd2 	bl	bb13e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   bb19a:	f895 3020 	ldrb.w	r3, [r5, #32]
   bb19e:	f884 3020 	strb.w	r3, [r4, #32]
   bb1a2:	4620      	mov	r0, r4
   bb1a4:	bd38      	pop	{r3, r4, r5, pc}

000bb1a6 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   bb1a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bb1a8:	4604      	mov	r4, r0
   bb1aa:	a801      	add	r0, sp, #4
   bb1ac:	f7ff ffc7 	bl	bb13e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
      __a = _GLIBCXX_MOVE(__b);
   bb1b0:	9b01      	ldr	r3, [sp, #4]
   bb1b2:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb1b4:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   bb1b6:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb1b8:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   bb1ba:	6062      	str	r2, [r4, #4]
   bb1bc:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bb1be:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb1c0:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   bb1c2:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bb1c4:	9001      	str	r0, [sp, #4]
   bb1c6:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   bb1c8:	f7fe feae 	bl	b9f28 <free>
   bb1cc:	b004      	add	sp, #16
   bb1ce:	bd10      	pop	{r4, pc}

000bb1d0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bb1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb1d4:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb1d6:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bb1d8:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb1da:	4419      	add	r1, r3
   bb1dc:	6883      	ldr	r3, [r0, #8]
   bb1de:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bb1e0:	4604      	mov	r4, r0
   bb1e2:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb1e4:	dc12      	bgt.n	bb20c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   bb1e6:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb1e8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb1ea:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb1ec:	1bd2      	subs	r2, r2, r7
   bb1ee:	4631      	mov	r1, r6
   bb1f0:	1970      	adds	r0, r6, r5
   bb1f2:	f003 fbd8 	bl	be9a6 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   bb1f6:	462a      	mov	r2, r5
   bb1f8:	4641      	mov	r1, r8
   bb1fa:	4630      	mov	r0, r6
   bb1fc:	f003 fbc5 	bl	be98a <memcpy>
    size_ += n;
   bb200:	6863      	ldr	r3, [r4, #4]
   bb202:	442b      	add	r3, r5
   bb204:	6063      	str	r3, [r4, #4]
    return true;
   bb206:	2001      	movs	r0, #1
}
   bb208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb20c:	f7ff ff7e 	bl	bb10c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bb210:	2800      	cmp	r0, #0
   bb212:	d1e8      	bne.n	bb1e6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   bb214:	e7f8      	b.n	bb208 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000bb216 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   bb216:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   bb218:	460a      	mov	r2, r1
   bb21a:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   bb21c:	b510      	push	{r4, lr}
   bb21e:	4604      	mov	r4, r0
    size_ = 0;
   bb220:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   bb222:	b102      	cbz	r2, bb226 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   bb224:	b90b      	cbnz	r3, bb22a <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   bb226:	2000      	movs	r0, #0
}
   bb228:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   bb22a:	2bff      	cmp	r3, #255	; 0xff
   bb22c:	bf28      	it	cs
   bb22e:	23ff      	movcs	r3, #255	; 0xff
   bb230:	f7ff ffce 	bl	bb1d0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   bb234:	2800      	cmp	r0, #0
   bb236:	d0f7      	beq.n	bb228 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   bb238:	6860      	ldr	r0, [r4, #4]
   bb23a:	e7f5      	b.n	bb228 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000bb23c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bb23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb23e:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb240:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   bb244:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bb246:	4604      	mov	r4, r0
   bb248:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb24a:	da0b      	bge.n	bb264 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   bb24c:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb24e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb250:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb252:	1b52      	subs	r2, r2, r5
   bb254:	1c48      	adds	r0, r1, #1
   bb256:	f003 fba6 	bl	be9a6 <memmove>
    new(p) T(std::move(value));
   bb25a:	557e      	strb	r6, [r7, r5]
    ++size_;
   bb25c:	6863      	ldr	r3, [r4, #4]
   bb25e:	3301      	adds	r3, #1
   bb260:	6063      	str	r3, [r4, #4]
}
   bb262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb264:	3101      	adds	r1, #1
   bb266:	f7ff ff51 	bl	bb10c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bb26a:	2800      	cmp	r0, #0
   bb26c:	d1ee      	bne.n	bb24c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   bb26e:	e7f8      	b.n	bb262 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000bb270 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb270:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   bb272:	6841      	ldr	r1, [r0, #4]
   bb274:	f7ff bfe2 	b.w	bb23c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000bb278 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bb278:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bb27c:	4604      	mov	r4, r0
   bb27e:	461d      	mov	r5, r3
   bb280:	460f      	mov	r7, r1
   bb282:	ab01      	add	r3, sp, #4
   bb284:	4690      	mov	r8, r2
   bb286:	460a      	mov	r2, r1
   bb288:	e9d0 0100 	ldrd	r0, r1, [r0]
   bb28c:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   bb290:	f7fe ff14 	bl	ba0bc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   bb294:	1cae      	adds	r6, r5, #2
   bb296:	6863      	ldr	r3, [r4, #4]
   bb298:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   bb29a:	f1b9 0f00 	cmp.w	r9, #0
   bb29e:	d126      	bne.n	bb2ee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   bb2a0:	b328      	cbz	r0, bb2ee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bb2a2:	4433      	add	r3, r6
   bb2a4:	1a1b      	subs	r3, r3, r0
   bb2a6:	2bff      	cmp	r3, #255	; 0xff
   bb2a8:	d809      	bhi.n	bb2be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   bb2aa:	9901      	ldr	r1, [sp, #4]
   bb2ac:	4620      	mov	r0, r4
   bb2ae:	f7ff fcc7 	bl	bac40 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bb2b2:	6861      	ldr	r1, [r4, #4]
   bb2b4:	4620      	mov	r0, r4
   bb2b6:	4431      	add	r1, r6
   bb2b8:	f7ff ff38 	bl	bb12c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bb2bc:	b918      	cbnz	r0, bb2c6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   bb2be:	6860      	ldr	r0, [r4, #4]
}
   bb2c0:	b003      	add	sp, #12
   bb2c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   bb2c6:	1c6a      	adds	r2, r5, #1
   bb2c8:	9901      	ldr	r1, [sp, #4]
   bb2ca:	b2d2      	uxtb	r2, r2
   bb2cc:	4620      	mov	r0, r4
   bb2ce:	f7ff ffb5 	bl	bb23c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   bb2d2:	9901      	ldr	r1, [sp, #4]
   bb2d4:	463a      	mov	r2, r7
   bb2d6:	3101      	adds	r1, #1
   bb2d8:	4620      	mov	r0, r4
   bb2da:	f7ff ffaf 	bl	bb23c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   bb2de:	9901      	ldr	r1, [sp, #4]
   bb2e0:	462b      	mov	r3, r5
   bb2e2:	4642      	mov	r2, r8
   bb2e4:	3102      	adds	r1, #2
    return insert(size_, values, n);
   bb2e6:	4620      	mov	r0, r4
   bb2e8:	f7ff ff72 	bl	bb1d0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   bb2ec:	e7e7      	b.n	bb2be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bb2ee:	18f1      	adds	r1, r6, r3
   bb2f0:	29ff      	cmp	r1, #255	; 0xff
   bb2f2:	d8e4      	bhi.n	bb2be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bb2f4:	4620      	mov	r0, r4
   bb2f6:	f7ff ff19 	bl	bb12c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bb2fa:	2800      	cmp	r0, #0
   bb2fc:	d0df      	beq.n	bb2be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   bb2fe:	1c69      	adds	r1, r5, #1
   bb300:	b2c9      	uxtb	r1, r1
   bb302:	4620      	mov	r0, r4
   bb304:	f7ff ffb4 	bl	bb270 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   bb308:	4639      	mov	r1, r7
   bb30a:	4620      	mov	r0, r4
   bb30c:	f7ff ffb0 	bl	bb270 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   bb310:	6861      	ldr	r1, [r4, #4]
   bb312:	462b      	mov	r3, r5
   bb314:	4642      	mov	r2, r8
   bb316:	e7e6      	b.n	bb2e6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000bb318 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bb318:	b430      	push	{r4, r5}
   bb31a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   bb31e:	b11a      	cbz	r2, bb328 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   bb320:	9502      	str	r5, [sp, #8]
}
   bb322:	bc30      	pop	{r4, r5}
   bb324:	f7ff bfa8 	b.w	bb278 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   bb328:	6840      	ldr	r0, [r0, #4]
}
   bb32a:	bc30      	pop	{r4, r5}
   bb32c:	4770      	bx	lr

000bb32e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   bb32e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   bb330:	2300      	movs	r3, #0
   bb332:	e9c0 3300 	strd	r3, r3, [r0]
   bb336:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bb338:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bb33a:	9300      	str	r3, [sp, #0]
   bb33c:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bb33e:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bb342:	4619      	mov	r1, r3
   bb344:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   bb348:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bb34a:	f7ff ffe5 	bl	bb318 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   bb34e:	4620      	mov	r0, r4
   bb350:	b004      	add	sp, #16
   bb352:	bd10      	pop	{r4, pc}

000bb354 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bb354:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bb356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb358:	4604      	mov	r4, r0
   bb35a:	460d      	mov	r5, r1
   bb35c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bb35e:	d914      	bls.n	bb38a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bb360:	4290      	cmp	r0, r2
   bb362:	d213      	bcs.n	bb38c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bb364:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bb368:	1a75      	subs	r5, r6, r1
   bb36a:	f1a1 0708 	sub.w	r7, r1, #8
   bb36e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bb370:	42b7      	cmp	r7, r6
   bb372:	d018      	beq.n	bb3a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bb374:	b11c      	cbz	r4, bb37e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bb376:	4631      	mov	r1, r6
   bb378:	4620      	mov	r0, r4
   bb37a:	f7ff fcac 	bl	bacd6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bb37e:	1d30      	adds	r0, r6, #4
   bb380:	f7ff fcb3 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bb384:	3e08      	subs	r6, #8
   bb386:	3c08      	subs	r4, #8
   bb388:	e7f2      	b.n	bb370 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bb38a:	d00c      	beq.n	bb3a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bb38c:	42b5      	cmp	r5, r6
   bb38e:	d00a      	beq.n	bb3a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bb390:	b11c      	cbz	r4, bb39a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bb392:	4629      	mov	r1, r5
   bb394:	4620      	mov	r0, r4
   bb396:	f7ff fc9e 	bl	bacd6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bb39a:	1d28      	adds	r0, r5, #4
   bb39c:	f7ff fca5 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bb3a0:	3508      	adds	r5, #8
   bb3a2:	3408      	adds	r4, #8
   bb3a4:	e7f2      	b.n	bb38c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bb3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb3a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb3a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bb3aa:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bb3ac:	6846      	ldr	r6, [r0, #4]
   bb3ae:	4668      	mov	r0, sp
   bb3b0:	f7ff fc91 	bl	bacd6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb3b4:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   bb3b8:	429f      	cmp	r7, r3
   bb3ba:	db12      	blt.n	bb3e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   bb3bc:	3701      	adds	r7, #1
        if (n > 0) {
   bb3be:	2f00      	cmp	r7, #0
   bb3c0:	dd29      	ble.n	bb416 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   bb3c2:	00f8      	lsls	r0, r7, #3
   bb3c4:	f7fe fda8 	bl	b9f18 <malloc>
            if (!d) {
   bb3c8:	4605      	mov	r5, r0
   bb3ca:	b1f0      	cbz	r0, bb40a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   bb3cc:	e9d4 1200 	ldrd	r1, r2, [r4]
   bb3d0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bb3d4:	f7ff ffbe 	bl	bb354 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bb3d8:	6820      	ldr	r0, [r4, #0]
   bb3da:	f7fe fda5 	bl	b9f28 <free>
        data_ = d;
   bb3de:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   bb3e0:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bb3e2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bb3e4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb3e6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   bb3ea:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bb3ee:	4631      	mov	r1, r6
   bb3f0:	f106 0008 	add.w	r0, r6, #8
   bb3f4:	f7ff ffae 	bl	bb354 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bb3f8:	b11e      	cbz	r6, bb402 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   bb3fa:	4669      	mov	r1, sp
   bb3fc:	4630      	mov	r0, r6
   bb3fe:	f7ff fc6a 	bl	bacd6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   bb402:	6863      	ldr	r3, [r4, #4]
   bb404:	3301      	adds	r3, #1
   bb406:	6063      	str	r3, [r4, #4]
    return true;
   bb408:	2501      	movs	r5, #1
   bb40a:	a801      	add	r0, sp, #4
   bb40c:	f7ff fc6d 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb410:	4628      	mov	r0, r5
   bb412:	b003      	add	sp, #12
   bb414:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   bb416:	2500      	movs	r5, #0
   bb418:	e7de      	b.n	bb3d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000bb41a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bb41a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   bb41c:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bb420:	4605      	mov	r5, r0
   bb422:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   bb424:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   bb428:	42a6      	cmp	r6, r4
   bb42a:	d005      	beq.n	bb438 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   bb42c:	4639      	mov	r1, r7
   bb42e:	4620      	mov	r0, r4
   bb430:	f7ff fa9d 	bl	ba96e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   bb434:	b108      	cbz	r0, bb43a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   bb436:	b914      	cbnz	r4, bb43e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   bb438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   bb43a:	3408      	adds	r4, #8
   bb43c:	e7f4      	b.n	bb428 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   bb43e:	1d20      	adds	r0, r4, #4
   bb440:	f7ff fc53 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   bb444:	e9d5 3200 	ldrd	r3, r2, [r5]
   bb448:	f104 0108 	add.w	r1, r4, #8
   bb44c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bb450:	4620      	mov	r0, r4
   bb452:	f7ff ff7f 	bl	bb354 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   bb456:	686b      	ldr	r3, [r5, #4]
   bb458:	3b01      	subs	r3, #1
   bb45a:	606b      	str	r3, [r5, #4]
    return true;
   bb45c:	e7ec      	b.n	bb438 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000bb460 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bb460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb464:	4605      	mov	r5, r0
   bb466:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   bb468:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bb46a:	460c      	mov	r4, r1
        WiringBleLock lk;
   bb46c:	f7fe fef4 	bl	ba258 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   bb470:	682e      	ldr	r6, [r5, #0]
   bb472:	1ef3      	subs	r3, r6, #3
   bb474:	2b0d      	cmp	r3, #13
   bb476:	d83c      	bhi.n	bb4f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bb478:	e8df f013 	tbh	[pc, r3, lsl #1]
   bb47c:	0053000e 	.word	0x0053000e
   bb480:	00d1003b 	.word	0x00d1003b
   bb484:	003b003b 	.word	0x003b003b
   bb488:	003b003b 	.word	0x003b003b
   bb48c:	009b003b 	.word	0x009b003b
   bb490:	009b009b 	.word	0x009b009b
   bb494:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   bb498:	a804      	add	r0, sp, #16
   bb49a:	f7ff fa0f 	bl	ba8bc <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   bb49e:	9b04      	ldr	r3, [sp, #16]
   bb4a0:	89aa      	ldrh	r2, [r5, #12]
   bb4a2:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   bb4a4:	6869      	ldr	r1, [r5, #4]
   bb4a6:	9804      	ldr	r0, [sp, #16]
   bb4a8:	3108      	adds	r1, #8
   bb4aa:	3002      	adds	r0, #2
   bb4ac:	f7fe feee 	bl	ba28c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   bb4b0:	a904      	add	r1, sp, #16
   bb4b2:	a806      	add	r0, sp, #24
   bb4b4:	f7ff fc0f 	bl	bacd6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   bb4b8:	a906      	add	r1, sp, #24
   bb4ba:	f104 0018 	add.w	r0, r4, #24
   bb4be:	f7ff ff73 	bl	bb3a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bb4c2:	4605      	mov	r5, r0
   bb4c4:	a807      	add	r0, sp, #28
   bb4c6:	f7ff fc10 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb4ca:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   bb4cc:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   bb4ce:	b9b5      	cbnz	r5, bb4fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   bb4d0:	4b5d      	ldr	r3, [pc, #372]	; (bb648 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   bb4d2:	495e      	ldr	r1, [pc, #376]	; (bb64c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bb4d4:	9300      	str	r3, [sp, #0]
   bb4d6:	2032      	movs	r0, #50	; 0x32
   bb4d8:	462b      	mov	r3, r5
   bb4da:	aa06      	add	r2, sp, #24
   bb4dc:	9507      	str	r5, [sp, #28]
   bb4de:	f7fe fc3f 	bl	b9d60 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   bb4e2:	9b04      	ldr	r3, [sp, #16]
   bb4e4:	4629      	mov	r1, r5
   bb4e6:	8818      	ldrh	r0, [r3, #0]
   bb4e8:	f7fe f9b8 	bl	b985c <hal_ble_gap_disconnect>
   bb4ec:	a805      	add	r0, sp, #20
   bb4ee:	f7ff fbfc 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   bb4f2:	a803      	add	r0, sp, #12
   bb4f4:	f7fe febe 	bl	ba274 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   bb4f8:	b00e      	add	sp, #56	; 0x38
   bb4fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   bb4fe:	4a54      	ldr	r2, [pc, #336]	; (bb650 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   bb500:	9200      	str	r2, [sp, #0]
   bb502:	2300      	movs	r3, #0
   bb504:	4951      	ldr	r1, [pc, #324]	; (bb64c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bb506:	9307      	str	r3, [sp, #28]
   bb508:	aa06      	add	r2, sp, #24
   bb50a:	2001      	movs	r0, #1
   bb50c:	f7fe fc28 	bl	b9d60 <log_message>
                if (impl->connectedCallback_) {
   bb510:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bb512:	2b00      	cmp	r3, #0
   bb514:	d0ea      	beq.n	bb4ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   bb516:	a904      	add	r1, sp, #16
   bb518:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bb51c:	f7ff fc54 	bl	badc8 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   bb520:	e7e4      	b.n	bb4ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bb522:	89a9      	ldrh	r1, [r5, #12]
   bb524:	4620      	mov	r0, r4
   bb526:	f7ff f8dc 	bl	ba6e2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bb52a:	4606      	mov	r6, r0
   bb52c:	2800      	cmp	r0, #0
   bb52e:	d0e0      	beq.n	bb4f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   bb530:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   bb532:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   bb536:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bb53a:	8029      	strh	r1, [r5, #0]
   bb53c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   bb540:	429a      	cmp	r2, r3
   bb542:	d003      	beq.n	bb54c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   bb544:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bb548:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   bb54a:	e7f9      	b.n	bb540 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   bb54c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   bb550:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bb554:	45b8      	cmp	r8, r7
   bb556:	d004      	beq.n	bb562 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   bb558:	1d38      	adds	r0, r7, #4
   bb55a:	f7ff fbc6 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb55e:	3708      	adds	r7, #8
   bb560:	e7f8      	b.n	bb554 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   bb562:	2300      	movs	r3, #0
   bb564:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   bb566:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   bb56a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bb56e:	45b8      	cmp	r8, r7
   bb570:	d004      	beq.n	bb57c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   bb572:	1d38      	adds	r0, r7, #4
   bb574:	f7ff fbb9 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb578:	3708      	adds	r7, #8
   bb57a:	e7f8      	b.n	bb56e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   bb57c:	2300      	movs	r3, #0
   bb57e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   bb580:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   bb582:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bb584:	b123      	cbz	r3, bb590 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   bb586:	4631      	mov	r1, r6
   bb588:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bb58c:	f7ff fc1c 	bl	badc8 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   bb590:	2300      	movs	r3, #0
   bb592:	2220      	movs	r2, #32
   bb594:	e9cd 2306 	strd	r2, r3, [sp, #24]
   bb598:	4a2e      	ldr	r2, [pc, #184]	; (bb654 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   bb59a:	9200      	str	r2, [sp, #0]
   bb59c:	492b      	ldr	r1, [pc, #172]	; (bb64c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bb59e:	aa06      	add	r2, sp, #24
   bb5a0:	2001      	movs	r0, #1
   bb5a2:	f7fe fbdd 	bl	b9d60 <log_message>
                    impl->peers_.removeOne(*peer);
   bb5a6:	4631      	mov	r1, r6
   bb5a8:	f104 0018 	add.w	r0, r4, #24
   bb5ac:	f7ff ff35 	bl	bb41a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   bb5b0:	e79f      	b.n	bb4f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bb5b2:	89a9      	ldrh	r1, [r5, #12]
   bb5b4:	4620      	mov	r0, r4
   bb5b6:	f7ff f894 	bl	ba6e2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bb5ba:	2800      	cmp	r0, #0
   bb5bc:	d099      	beq.n	bb4f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   bb5be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bb5c0:	2b00      	cmp	r3, #0
   bb5c2:	d096      	beq.n	bb4f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   bb5c4:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bb5c6:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   bb5c8:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bb5cc:	d001      	beq.n	bb5d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   bb5ce:	2e10      	cmp	r6, #16
   bb5d0:	d117      	bne.n	bb602 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   bb5d2:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   bb5d4:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   bb5d6:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   bb5d8:	2506      	movs	r5, #6
                        };
   bb5da:	f88d 3015 	strb.w	r3, [sp, #21]
   bb5de:	9104      	str	r1, [sp, #16]
   bb5e0:	f88d 2014 	strb.w	r2, [sp, #20]
   bb5e4:	9006      	str	r0, [sp, #24]
   bb5e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   bb5ea:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   bb5ec:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   bb5f0:	9508      	str	r5, [sp, #32]
   bb5f2:	e883 0003 	stmia.w	r3, {r0, r1}
   bb5f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb5f8:	a906      	add	r1, sp, #24
   bb5fa:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bb5fe:	4798      	blx	r3
   bb600:	e777      	b.n	bb4f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   bb602:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   bb604:	bf01      	itttt	eq
   bb606:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   bb608:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   bb60a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   bb60e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   bb610:	bf0f      	iteee	eq
   bb612:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   bb616:	461a      	movne	r2, r3
   bb618:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   bb61a:	461d      	movne	r5, r3
   bb61c:	e7dd      	b.n	bb5da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bb61e:	89a9      	ldrh	r1, [r5, #12]
   bb620:	4620      	mov	r0, r4
   bb622:	f7ff f85e 	bl	ba6e2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   bb626:	4601      	mov	r1, r0
   bb628:	2800      	cmp	r0, #0
   bb62a:	f43f af62 	beq.w	bb4f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bb62e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb630:	2b00      	cmp	r3, #0
   bb632:	f43f af5e 	beq.w	bb4f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   bb636:	686b      	ldr	r3, [r5, #4]
   bb638:	9306      	str	r3, [sp, #24]
   bb63a:	aa06      	add	r2, sp, #24
   bb63c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb63e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bb642:	4798      	blx	r3
   bb644:	e755      	b.n	bb4f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bb646:	bf00      	nop
   bb648:	000c1c5f 	.word	0x000c1c5f
   bb64c:	000c1bc3 	.word	0x000c1bc3
   bb650:	000c1c85 	.word	0x000c1c85
   bb654:	000c1ca2 	.word	0x000c1ca2

000bb658 <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   bb658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb65c:	4607      	mov	r7, r0
   bb65e:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   bb660:	4668      	mov	r0, sp
   bb662:	f7fe fdf9 	bl	ba258 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   bb666:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   bb668:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   bb66c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (auto& p : impl()->peers()) {
   bb670:	42ac      	cmp	r4, r5
   bb672:	d035      	beq.n	bb6e0 <_ZNK8particle14BleLocalDevice10disconnectEv+0x88>
        hal_ble_conn_info_t connInfo = {};
   bb674:	2224      	movs	r2, #36	; 0x24
   bb676:	2100      	movs	r1, #0
   bb678:	a801      	add	r0, sp, #4
   bb67a:	f003 f9ae 	bl	be9da <memset>
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   bb67e:	6823      	ldr	r3, [r4, #0]
   bb680:	2200      	movs	r2, #0
   bb682:	8818      	ldrh	r0, [r3, #0]
   bb684:	a901      	add	r1, sp, #4
   bb686:	f7fe f939 	bl	b98fc <hal_ble_gap_get_connection_info>
   bb68a:	4606      	mov	r6, r0
   bb68c:	b108      	cbz	r0, bb692 <_ZNK8particle14BleLocalDevice10disconnectEv+0x3a>
    for (auto& p : impl()->peers()) {
   bb68e:	3408      	adds	r4, #8
   bb690:	e7ee      	b.n	bb670 <_ZNK8particle14BleLocalDevice10disconnectEv+0x18>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   bb692:	f89d 8008 	ldrb.w	r8, [sp, #8]
   bb696:	f1b8 0f01 	cmp.w	r8, #1
   bb69a:	d1f8      	bne.n	bb68e <_ZNK8particle14BleLocalDevice10disconnectEv+0x36>
   bb69c:	f8df 9048 	ldr.w	r9, [pc, #72]	; bb6e8 <_ZNK8particle14BleLocalDevice10disconnectEv+0x90>
   bb6a0:	f8d9 0000 	ldr.w	r0, [r9]
   bb6a4:	f7fe f99c 	bl	b99e0 <os_mutex_recursive_unlock>
        locked_ = false;
   bb6a8:	f88d 6000 	strb.w	r6, [sp]
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   bb6ac:	6823      	ldr	r3, [r4, #0]
   bb6ae:	4631      	mov	r1, r6
   bb6b0:	8818      	ldrh	r0, [r3, #0]
   bb6b2:	f7fe f8d3 	bl	b985c <hal_ble_gap_disconnect>
   bb6b6:	1e05      	subs	r5, r0, #0
   bb6b8:	db0b      	blt.n	bb6d2 <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
    void lock() { os_mutex_recursive_lock(handle_); }
   bb6ba:	f8d9 0000 	ldr.w	r0, [r9]
   bb6be:	f7fe f987 	bl	b99d0 <os_mutex_recursive_lock>
        return peers_;
   bb6c2:	6838      	ldr	r0, [r7, #0]
        locked_ = true;
   bb6c4:	f88d 8000 	strb.w	r8, [sp]
            lk.lock();
            impl()->peers().removeOne(p);
   bb6c8:	4621      	mov	r1, r4
   bb6ca:	3018      	adds	r0, #24
   bb6cc:	f7ff fea5 	bl	bb41a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
            return SYSTEM_ERROR_NONE;
   bb6d0:	4635      	mov	r5, r6
    WiringBleLock lk;
   bb6d2:	4668      	mov	r0, sp
   bb6d4:	f7fe fdce 	bl	ba274 <_ZN8particle3ble13WiringBleLockD1Ev>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   bb6d8:	4628      	mov	r0, r5
   bb6da:	b00b      	add	sp, #44	; 0x2c
   bb6dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   bb6e0:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
   bb6e4:	e7f5      	b.n	bb6d2 <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
   bb6e6:	bf00      	nop
   bb6e8:	2003e65c 	.word	0x2003e65c

000bb6ec <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bb6ec:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   bb6ee:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   bb6f0:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bb6f2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bb6f4:	dd05      	ble.n	bb702 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   bb6f6:	2114      	movs	r1, #20
   bb6f8:	4369      	muls	r1, r5
   bb6fa:	f7fe fc1d 	bl	b9f38 <realloc>
            if (!d) {
   bb6fe:	b918      	cbnz	r0, bb708 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   bb700:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   bb702:	f7fe fc11 	bl	b9f28 <free>
        T* d = nullptr;
   bb706:	2000      	movs	r0, #0
        data_ = d;
   bb708:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bb70a:	60a5      	str	r5, [r4, #8]
        return true;
   bb70c:	2001      	movs	r0, #1
   bb70e:	e7f7      	b.n	bb700 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000bb710 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   bb714:	2400      	movs	r4, #0
   bb716:	e9c0 4400 	strd	r4, r4, [r0]
   bb71a:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb71c:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb71e:	6849      	ldr	r1, [r1, #4]
   bb720:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb722:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb724:	dd1a      	ble.n	bb75c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   bb726:	f7ff ffe1 	bl	bb6ec <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb72a:	b1b8      	cbz	r0, bb75c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb72c:	e9d8 9300 	ldrd	r9, r3, [r8]
   bb730:	f04f 0c14 	mov.w	ip, #20
   bb734:	f8d7 e000 	ldr.w	lr, [r7]
   bb738:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   bb73c:	eb09 0504 	add.w	r5, r9, r4
   bb740:	45ac      	cmp	ip, r5
   bb742:	d008      	beq.n	bb756 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   bb744:	eb1e 0604 	adds.w	r6, lr, r4
   bb748:	bf1f      	itttt	ne
   bb74a:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   bb74c:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   bb74e:	682b      	ldrne	r3, [r5, #0]
   bb750:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   bb752:	3414      	adds	r4, #20
   bb754:	e7f2      	b.n	bb73c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   bb756:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bb75a:	607b      	str	r3, [r7, #4]
}
   bb75c:	4638      	mov	r0, r7
   bb75e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bb762 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   bb762:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   bb766:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   bb76a:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb76c:	6883      	ldr	r3, [r0, #8]
   bb76e:	19e9      	adds	r1, r5, r7
   bb770:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   bb772:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb774:	dc17      	bgt.n	bb7a6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   bb776:	2314      	movs	r3, #20
   bb778:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   bb77a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb77c:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   bb77e:	fb03 f907 	mul.w	r9, r3, r7
   bb782:	435a      	muls	r2, r3
    T* const p = data_ + i;
   bb784:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb786:	1b52      	subs	r2, r2, r5
   bb788:	4631      	mov	r1, r6
   bb78a:	eb06 0009 	add.w	r0, r6, r9
   bb78e:	f003 f90a 	bl	be9a6 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   bb792:	464a      	mov	r2, r9
   bb794:	4641      	mov	r1, r8
   bb796:	4630      	mov	r0, r6
   bb798:	f003 f8f7 	bl	be98a <memcpy>
    size_ += n;
   bb79c:	6863      	ldr	r3, [r4, #4]
   bb79e:	443b      	add	r3, r7
   bb7a0:	6063      	str	r3, [r4, #4]
}
   bb7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb7a6:	f7ff ffa1 	bl	bb6ec <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb7aa:	2800      	cmp	r0, #0
   bb7ac:	d1e3      	bne.n	bb776 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   bb7ae:	e7f8      	b.n	bb7a2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000bb7b0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bb7b0:	b082      	sub	sp, #8
   bb7b2:	b570      	push	{r4, r5, r6, lr}
   bb7b4:	460c      	mov	r4, r1
   bb7b6:	a904      	add	r1, sp, #16
   bb7b8:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb7bc:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   bb7c0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bb7c2:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb7c4:	da17      	bge.n	bb7f6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   bb7c6:	2314      	movs	r3, #20
   bb7c8:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   bb7cc:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   bb7ce:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   bb7d0:	435a      	muls	r2, r3
    T* const p = data_ + i;
   bb7d2:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb7d4:	1a52      	subs	r2, r2, r1
   bb7d6:	18e0      	adds	r0, r4, r3
   bb7d8:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   bb7da:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb7dc:	f003 f8e3 	bl	be9a6 <memmove>
    new(p) T(std::move(value));
   bb7e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   bb7e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb7e4:	6833      	ldr	r3, [r6, #0]
   bb7e6:	6023      	str	r3, [r4, #0]
    ++size_;
   bb7e8:	686b      	ldr	r3, [r5, #4]
   bb7ea:	3301      	adds	r3, #1
   bb7ec:	606b      	str	r3, [r5, #4]
}
   bb7ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb7f2:	b002      	add	sp, #8
   bb7f4:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb7f6:	3101      	adds	r1, #1
   bb7f8:	f7ff ff78 	bl	bb6ec <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb7fc:	2800      	cmp	r0, #0
   bb7fe:	d1e2      	bne.n	bb7c6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   bb800:	e7f5      	b.n	bb7ee <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000bb802 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   bb802:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   bb806:	2400      	movs	r4, #0
   bb808:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bb80a:	1e93      	subs	r3, r2, #2
   bb80c:	e9c0 4400 	strd	r4, r4, [r0]
   bb810:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   bb812:	4605      	mov	r5, r0
   bb814:	460f      	mov	r7, r1
   bb816:	4690      	mov	r8, r2
   bb818:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bb81a:	9305      	str	r3, [sp, #20]
    return size_;
   bb81c:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   bb81e:	428c      	cmp	r4, r1
   bb820:	da72      	bge.n	bb908 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   bb822:	6838      	ldr	r0, [r7, #0]
   bb824:	ab07      	add	r3, sp, #28
   bb826:	4642      	mov	r2, r8
   bb828:	1b09      	subs	r1, r1, r4
   bb82a:	4420      	add	r0, r4
   bb82c:	f7fe fc46 	bl	ba0bc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   bb830:	4606      	mov	r6, r0
   bb832:	2800      	cmp	r0, #0
   bb834:	d068      	beq.n	bb908 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bb836:	9b05      	ldr	r3, [sp, #20]
   bb838:	2b01      	cmp	r3, #1
   bb83a:	d82f      	bhi.n	bb89c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bb83c:	f1a0 0b02 	sub.w	fp, r0, #2
   bb840:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   bb844:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   bb848:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bb84c:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bb84e:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bb850:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bb852:	d055      	beq.n	bb900 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   bb854:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bb856:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   bb85a:	4413      	add	r3, r2
   bb85c:	a808      	add	r0, sp, #32
   bb85e:	78d9      	ldrb	r1, [r3, #3]
   bb860:	789b      	ldrb	r3, [r3, #2]
   bb862:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   bb866:	f7fe fd8e 	bl	ba386 <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   bb86a:	f10d 0e20 	add.w	lr, sp, #32
   bb86e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   bb872:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   bb876:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bb87a:	f8de 3000 	ldr.w	r3, [lr]
   bb87e:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   bb882:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   bb886:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   bb88a:	ab0d      	add	r3, sp, #52	; 0x34
   bb88c:	cb0c      	ldmia	r3, {r2, r3}
   bb88e:	6869      	ldr	r1, [r5, #4]
   bb890:	4628      	mov	r0, r5
   bb892:	f7ff ff8d 	bl	bb7b0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bb896:	f109 0901 	add.w	r9, r9, #1
   bb89a:	e7d7      	b.n	bb84c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   bb89c:	f1a8 0306 	sub.w	r3, r8, #6
   bb8a0:	2b01      	cmp	r3, #1
   bb8a2:	d82d      	bhi.n	bb900 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bb8a4:	f1a0 0b02 	sub.w	fp, r0, #2
   bb8a8:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   bb8ac:	f04f 0900 	mov.w	r9, #0
   bb8b0:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   bb8b4:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   bb8b6:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bb8b8:	d022      	beq.n	bb900 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   bb8ba:	3302      	adds	r3, #2
    return data_[i];
   bb8bc:	6839      	ldr	r1, [r7, #0]
   bb8be:	4423      	add	r3, r4
   bb8c0:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   bb8c4:	2201      	movs	r2, #1
   bb8c6:	4419      	add	r1, r3
   bb8c8:	a808      	add	r0, sp, #32
   bb8ca:	f7fe fd3d 	bl	ba348 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   bb8ce:	f10d 0e20 	add.w	lr, sp, #32
   bb8d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   bb8d6:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   bb8da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bb8de:	f8de 3000 	ldr.w	r3, [lr]
   bb8e2:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   bb8e6:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   bb8ea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   bb8ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   bb8f2:	6869      	ldr	r1, [r5, #4]
   bb8f4:	4628      	mov	r0, r5
   bb8f6:	f7ff ff5b 	bl	bb7b0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bb8fa:	f109 0901 	add.w	r9, r9, #1
   bb8fe:	e7d9      	b.n	bb8b4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   bb900:	9b07      	ldr	r3, [sp, #28]
   bb902:	441c      	add	r4, r3
   bb904:	4434      	add	r4, r6
   bb906:	e789      	b.n	bb81c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   bb908:	4628      	mov	r0, r5
   bb90a:	b013      	add	sp, #76	; 0x4c
   bb90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb910 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   bb910:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   bb912:	2300      	movs	r3, #0
   bb914:	b085      	sub	sp, #20
   bb916:	e9c0 3300 	strd	r3, r3, [r0]
   bb91a:	6083      	str	r3, [r0, #8]
   bb91c:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bb91e:	2202      	movs	r2, #2
   bb920:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   bb922:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bb924:	f7ff ff6d 	bl	bb802 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb928:	a901      	add	r1, sp, #4
   bb92a:	4620      	mov	r0, r4
   bb92c:	f7ff ff19 	bl	bb762 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb930:	a801      	add	r0, sp, #4
   bb932:	f7ff f939 	bl	baba8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bb936:	2202      	movs	r2, #2
   bb938:	4629      	mov	r1, r5
   bb93a:	a801      	add	r0, sp, #4
   bb93c:	f7ff ff61 	bl	bb802 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb940:	a901      	add	r1, sp, #4
   bb942:	4620      	mov	r0, r4
   bb944:	f7ff ff0d 	bl	bb762 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb948:	a801      	add	r0, sp, #4
   bb94a:	f7ff f92d 	bl	baba8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   bb94e:	2203      	movs	r2, #3
   bb950:	4629      	mov	r1, r5
   bb952:	a801      	add	r0, sp, #4
   bb954:	f7ff ff55 	bl	bb802 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb958:	a901      	add	r1, sp, #4
   bb95a:	4620      	mov	r0, r4
   bb95c:	f7ff ff01 	bl	bb762 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb960:	a801      	add	r0, sp, #4
   bb962:	f7ff f921 	bl	baba8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   bb966:	2206      	movs	r2, #6
   bb968:	4629      	mov	r1, r5
   bb96a:	a801      	add	r0, sp, #4
   bb96c:	f7ff ff49 	bl	bb802 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb970:	a901      	add	r1, sp, #4
   bb972:	4620      	mov	r0, r4
   bb974:	f7ff fef5 	bl	bb762 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb978:	a801      	add	r0, sp, #4
   bb97a:	f7ff f915 	bl	baba8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   bb97e:	2207      	movs	r2, #7
   bb980:	4629      	mov	r1, r5
   bb982:	a801      	add	r0, sp, #4
   bb984:	f7ff ff3d 	bl	bb802 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb988:	a901      	add	r1, sp, #4
   bb98a:	4620      	mov	r0, r4
   bb98c:	f7ff fee9 	bl	bb762 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb990:	a801      	add	r0, sp, #4
   bb992:	f7ff f909 	bl	baba8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   bb996:	4620      	mov	r0, r4
   bb998:	b005      	add	sp, #20
   bb99a:	bd30      	pop	{r4, r5, pc}

000bb99c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   bb99c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb9a0:	b085      	sub	sp, #20
   bb9a2:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bb9a4:	4601      	mov	r1, r0
   bb9a6:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   bb9a8:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bb9aa:	f7ff ffb1 	bl	bb910 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_;
   bb9ae:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
   bb9b0:	9b02      	ldr	r3, [sp, #8]
   bb9b2:	f04f 0e14 	mov.w	lr, #20
   bb9b6:	fb0e 6c03 	mla	ip, lr, r3, r6
   bb9ba:	2700      	movs	r7, #0
    for (const auto& uuid : foundUuids) {
   bb9bc:	45b4      	cmp	ip, r6
   bb9be:	d00d      	beq.n	bb9dc <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
   bb9c0:	45b9      	cmp	r9, r7
   bb9c2:	f106 0614 	add.w	r6, r6, #20
   bb9c6:	d009      	beq.n	bb9dc <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
   bb9c8:	f1a6 0514 	sub.w	r5, r6, #20
   bb9cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb9ce:	fb0e 8407 	mla	r4, lr, r7, r8
   bb9d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb9d4:	682b      	ldr	r3, [r5, #0]
   bb9d6:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
   bb9d8:	3701      	adds	r7, #1
   bb9da:	e7ef      	b.n	bb9bc <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bb9dc:	a801      	add	r0, sp, #4
   bb9de:	f7ff f8e3 	bl	baba8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   bb9e2:	4638      	mov	r0, r7
   bb9e4:	b005      	add	sp, #20
   bb9e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bb9ea <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   bb9ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb9ee:	b08b      	sub	sp, #44	; 0x2c
   bb9f0:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   bb9f2:	f100 0144 	add.w	r1, r0, #68	; 0x44
   bb9f6:	a801      	add	r0, sp, #4
   bb9f8:	f7ff fe8a 	bl	bb710 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   bb9fc:	9b02      	ldr	r3, [sp, #8]
   bb9fe:	2b00      	cmp	r3, #0
   bba00:	dd4a      	ble.n	bba98 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   bba02:	f104 0114 	add.w	r1, r4, #20
   bba06:	a804      	add	r0, sp, #16
   bba08:	f7ff ff82 	bl	bb910 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   bba0c:	f104 0108 	add.w	r1, r4, #8
   bba10:	a807      	add	r0, sp, #28
   bba12:	f7ff ff7d 	bl	bb910 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   bba16:	9d05      	ldr	r5, [sp, #20]
   bba18:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   bba1a:	2d00      	cmp	r5, #0
   bba1c:	dc01      	bgt.n	bba22 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   bba1e:	2e00      	cmp	r6, #0
   bba20:	dd38      	ble.n	bba94 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   bba22:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   bba24:	9f02      	ldr	r7, [sp, #8]
    return data_;
   bba26:	f8dd 8010 	ldr.w	r8, [sp, #16]
   bba2a:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   bba2e:	2314      	movs	r3, #20
   bba30:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   bba34:	fb03 8505 	mla	r5, r3, r5, r8
   bba38:	fb03 9606 	mla	r6, r3, r6, r9
   bba3c:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   bba3e:	45ba      	cmp	sl, r7
   bba40:	d028      	beq.n	bba94 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   bba42:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   bba44:	45ab      	cmp	fp, r5
   bba46:	d015      	beq.n	bba74 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   bba48:	4659      	mov	r1, fp
   bba4a:	4650      	mov	r0, sl
   bba4c:	f7fe fca5 	bl	ba39a <_ZNK8particle7BleUuideqERKS0_>
   bba50:	f10b 0b14 	add.w	fp, fp, #20
   bba54:	4604      	mov	r4, r0
   bba56:	2800      	cmp	r0, #0
   bba58:	d0f4      	beq.n	bba44 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   bba5a:	a807      	add	r0, sp, #28
   bba5c:	f7ff f8a4 	bl	baba8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   bba60:	a804      	add	r0, sp, #16
   bba62:	f7ff f8a1 	bl	baba8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   bba66:	a801      	add	r0, sp, #4
   bba68:	f7ff f89e 	bl	baba8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   bba6c:	4620      	mov	r0, r4
   bba6e:	b00b      	add	sp, #44	; 0x2c
   bba70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bba74:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   bba76:	45b3      	cmp	fp, r6
   bba78:	d009      	beq.n	bba8e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   bba7a:	4659      	mov	r1, fp
   bba7c:	4650      	mov	r0, sl
   bba7e:	f7fe fc8c 	bl	ba39a <_ZNK8particle7BleUuideqERKS0_>
   bba82:	f10b 0b14 	add.w	fp, fp, #20
   bba86:	4604      	mov	r4, r0
   bba88:	2800      	cmp	r0, #0
   bba8a:	d0f4      	beq.n	bba76 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   bba8c:	e7e5      	b.n	bba5a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   bba8e:	f10a 0a14 	add.w	sl, sl, #20
   bba92:	e7d4      	b.n	bba3e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   bba94:	2400      	movs	r4, #0
   bba96:	e7e0      	b.n	bba5a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   bba98:	2401      	movs	r4, #1
   bba9a:	e7e4      	b.n	bba66 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000bba9c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   bba9c:	b513      	push	{r0, r1, r4, lr}
   bba9e:	460b      	mov	r3, r1
   bbaa0:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbaa2:	e9d0 0100 	ldrd	r0, r1, [r0]
   bbaa6:	466c      	mov	r4, sp
   bbaa8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   bbaac:	e893 0003 	ldmia.w	r3, {r0, r1}
   bbab0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   bbab4:	e894 0003 	ldmia.w	r4, {r0, r1}
   bbab8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   bbabc:	b002      	add	sp, #8
   bbabe:	bd10      	pop	{r4, pc}

000bbac0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   bbac0:	b538      	push	{r3, r4, r5, lr}
   bbac2:	4605      	mov	r5, r0
   bbac4:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   bbac6:	f7ff ffe9 	bl	bba9c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbaca:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   bbacc:	68a2      	ldr	r2, [r4, #8]
   bbace:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bbad0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbad2:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   bbad4:	68e2      	ldr	r2, [r4, #12]
   bbad6:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bbad8:	60e3      	str	r3, [r4, #12]
      }
   bbada:	bd38      	pop	{r3, r4, r5, pc}

000bbadc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   bbadc:	b530      	push	{r4, r5, lr}
   bbade:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   bbae0:	2300      	movs	r3, #0
   bbae2:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   bbae4:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   bbae6:	4605      	mov	r5, r0
   bbae8:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   bbaea:	b133      	cbz	r3, bbafa <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bbaec:	2202      	movs	r2, #2
   bbaee:	4668      	mov	r0, sp
   bbaf0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bbaf2:	68e3      	ldr	r3, [r4, #12]
   bbaf4:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   bbaf6:	68a3      	ldr	r3, [r4, #8]
   bbaf8:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   bbafa:	4629      	mov	r1, r5
   bbafc:	4668      	mov	r0, sp
   bbafe:	f7ff ffdf 	bl	bbac0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bbb02:	4668      	mov	r0, sp
   bbb04:	f7f8 fd38 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
      }
   bbb08:	b005      	add	sp, #20
   bbb0a:	bd30      	pop	{r4, r5, pc}

000bbb0c <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   bbb0c:	b538      	push	{r3, r4, r5, lr}
   bbb0e:	460d      	mov	r5, r1
      { return _M_ptr; }
   bbb10:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   bbb12:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   bbb14:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   bbb16:	b123      	cbz	r3, bbb22 <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   bbb18:	6828      	ldr	r0, [r5, #0]
   bbb1a:	314c      	adds	r1, #76	; 0x4c
   bbb1c:	304c      	adds	r0, #76	; 0x4c
   bbb1e:	f7ff ffdd 	bl	bbadc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bbb22:	4620      	mov	r0, r4
   bbb24:	682b      	ldr	r3, [r5, #0]
   bbb26:	f840 3b04 	str.w	r3, [r0], #4
   bbb2a:	6869      	ldr	r1, [r5, #4]
   bbb2c:	f7fe fb6e 	bl	ba20c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   bbb30:	4620      	mov	r0, r4
   bbb32:	bd38      	pop	{r3, r4, r5, pc}

000bbb34 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   bbb34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bbb38:	4604      	mov	r4, r0
   bbb3a:	b087      	sub	sp, #28
    WiringBleLock lk;
   bbb3c:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   bbb3e:	460e      	mov	r6, r1
   bbb40:	4617      	mov	r7, r2
    WiringBleLock lk;
   bbb42:	f7fe fb89 	bl	ba258 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bbb46:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   bbb48:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   bbb4c:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   bbb50:	4544      	cmp	r4, r8
   bbb52:	46a1      	mov	r9, r4
   bbb54:	d016      	beq.n	bbb84 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   bbb56:	4621      	mov	r1, r4
   bbb58:	a801      	add	r0, sp, #4
   bbb5a:	f7fe fded 	bl	ba738 <_ZNK8particle17BleCharacteristic4UUIDEv>
   bbb5e:	4639      	mov	r1, r7
   bbb60:	a801      	add	r0, sp, #4
   bbb62:	f7fe fc1a 	bl	ba39a <_ZNK8particle7BleUuideqERKS0_>
   bbb66:	3408      	adds	r4, #8
   bbb68:	4605      	mov	r5, r0
   bbb6a:	2800      	cmp	r0, #0
   bbb6c:	d0f0      	beq.n	bbb50 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   bbb6e:	4649      	mov	r1, r9
   bbb70:	4630      	mov	r0, r6
   bbb72:	f7ff ffcb 	bl	bbb0c <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   bbb76:	4668      	mov	r0, sp
   bbb78:	f7fe fb7c 	bl	ba274 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bbb7c:	4628      	mov	r0, r5
   bbb7e:	b007      	add	sp, #28
   bbb80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   bbb84:	2500      	movs	r5, #0
   bbb86:	e7f6      	b.n	bbb76 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000bbb88 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   bbb88:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bbb8a:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   bbb8c:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bbb8e:	344c      	adds	r4, #76	; 0x4c
   bbb90:	b1b9      	cbz	r1, bbbc2 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   bbb92:	e9cd 1200 	strd	r1, r2, [sp]
   bbb96:	a802      	add	r0, sp, #8
   bbb98:	4669      	mov	r1, sp
   bbb9a:	f7ff f865 	bl	bac68 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   bbb9e:	2300      	movs	r3, #0
	__x.swap(*this);
   bbba0:	a906      	add	r1, sp, #24
   bbba2:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   bbba4:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   bbba6:	f7ff ff8b 	bl	bbac0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   bbbaa:	4621      	mov	r1, r4
   bbbac:	a806      	add	r0, sp, #24
   bbbae:	f7ff ff87 	bl	bbac0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bbbb2:	a806      	add	r0, sp, #24
   bbbb4:	f7f8 fce0 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
   bbbb8:	a802      	add	r0, sp, #8
   bbbba:	f7f8 fcdd 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
}
   bbbbe:	b00a      	add	sp, #40	; 0x28
   bbbc0:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   bbbc2:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   bbbc4:	e7eb      	b.n	bbb9e <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000bbbc6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bbbc6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bbbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbbca:	4604      	mov	r4, r0
   bbbcc:	460d      	mov	r5, r1
   bbbce:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bbbd0:	d914      	bls.n	bbbfc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bbbd2:	4290      	cmp	r0, r2
   bbbd4:	d213      	bcs.n	bbbfe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bbbd6:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bbbda:	1a75      	subs	r5, r6, r1
   bbbdc:	f1a1 0708 	sub.w	r7, r1, #8
   bbbe0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bbbe2:	42b7      	cmp	r7, r6
   bbbe4:	d018      	beq.n	bbc18 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bbbe6:	b11c      	cbz	r4, bbbf0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bbbe8:	4631      	mov	r1, r6
   bbbea:	4620      	mov	r0, r4
   bbbec:	f7ff f869 	bl	bacc2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   bbbf0:	1d30      	adds	r0, r6, #4
   bbbf2:	f7ff f87a 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bbbf6:	3e08      	subs	r6, #8
   bbbf8:	3c08      	subs	r4, #8
   bbbfa:	e7f2      	b.n	bbbe2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bbbfc:	d00c      	beq.n	bbc18 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bbbfe:	42b5      	cmp	r5, r6
   bbc00:	d00a      	beq.n	bbc18 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bbc02:	b11c      	cbz	r4, bbc0c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bbc04:	4629      	mov	r1, r5
   bbc06:	4620      	mov	r0, r4
   bbc08:	f7ff f85b 	bl	bacc2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bbc0c:	1d28      	adds	r0, r5, #4
   bbc0e:	f7ff f86c 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bbc12:	3508      	adds	r5, #8
   bbc14:	3408      	adds	r4, #8
   bbc16:	e7f2      	b.n	bbbfe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bbc18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bbc1a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bbc1a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bbc1c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bbc1e:	4605      	mov	r5, r0
        if (n > 0) {
   bbc20:	dd11      	ble.n	bbc46 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bbc22:	00f0      	lsls	r0, r6, #3
   bbc24:	f7fe f978 	bl	b9f18 <malloc>
            if (!d) {
   bbc28:	4604      	mov	r4, r0
   bbc2a:	b158      	cbz	r0, bbc44 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bbc2c:	e9d5 1200 	ldrd	r1, r2, [r5]
   bbc30:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bbc34:	f7ff ffc7 	bl	bbbc6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bbc38:	6828      	ldr	r0, [r5, #0]
   bbc3a:	f7fe f975 	bl	b9f28 <free>
        data_ = d;
   bbc3e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bbc40:	60ae      	str	r6, [r5, #8]
        return true;
   bbc42:	2001      	movs	r0, #1
    }
   bbc44:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bbc46:	2400      	movs	r4, #0
   bbc48:	e7f6      	b.n	bbc38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bbc4a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bbc4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   bbc4e:	2300      	movs	r3, #0
   bbc50:	e9c0 3300 	strd	r3, r3, [r0]
   bbc54:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bbc56:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bbc58:	6849      	ldr	r1, [r1, #4]
   bbc5a:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bbc5c:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bbc5e:	dd13      	ble.n	bbc88 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   bbc60:	f7ff ffdb 	bl	bbc1a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bbc64:	b180      	cbz	r0, bbc88 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bbc66:	e9d5 6300 	ldrd	r6, r3, [r5]
   bbc6a:	6827      	ldr	r7, [r4, #0]
   bbc6c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   bbc70:	45b0      	cmp	r8, r6
   bbc72:	d007      	beq.n	bbc84 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   bbc74:	b11f      	cbz	r7, bbc7e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   bbc76:	4631      	mov	r1, r6
   bbc78:	4638      	mov	r0, r7
   bbc7a:	f7ff f822 	bl	bacc2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   bbc7e:	3608      	adds	r6, #8
   bbc80:	3708      	adds	r7, #8
   bbc82:	e7f5      	b.n	bbc70 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   bbc84:	686b      	ldr	r3, [r5, #4]
   bbc86:	6063      	str	r3, [r4, #4]
}
   bbc88:	4620      	mov	r0, r4
   bbc8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bbc8e <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   bbc8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bbc90:	460d      	mov	r5, r1
   bbc92:	4604      	mov	r4, r0
    WiringBleLock lk;
   bbc94:	a801      	add	r0, sp, #4
   bbc96:	f7fe fadf 	bl	ba258 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   bbc9a:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   bbc9c:	4620      	mov	r0, r4
   bbc9e:	310c      	adds	r1, #12
   bbca0:	f7ff ffd3 	bl	bbc4a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   bbca4:	a801      	add	r0, sp, #4
   bbca6:	f7fe fae5 	bl	ba274 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bbcaa:	4620      	mov	r0, r4
   bbcac:	b003      	add	sp, #12
   bbcae:	bd30      	pop	{r4, r5, pc}

000bbcb0 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   bbcb0:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   bbcb2:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bbcb4:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   bbcb6:	4605      	mov	r5, r0
   bbcb8:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   bbcba:	b933      	cbnz	r3, bbcca <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   bbcbc:	4608      	mov	r0, r1
   bbcbe:	f7fe fa5f 	bl	ba180 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   bbcc2:	b910      	cbnz	r0, bbcca <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   bbcc4:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   bbcc6:	2201      	movs	r2, #1
   bbcc8:	729a      	strb	r2, [r3, #10]
    return services();
   bbcca:	4628      	mov	r0, r5
   bbccc:	4621      	mov	r1, r4
   bbcce:	f7ff ffde 	bl	bbc8e <_ZNK8particle13BlePeerDevice8servicesEv>
}
   bbcd2:	4628      	mov	r0, r5
   bbcd4:	bd38      	pop	{r3, r4, r5, pc}

000bbcd6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bbcd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bbcd8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bbcda:	6845      	ldr	r5, [r0, #4]
   bbcdc:	4668      	mov	r0, sp
   bbcde:	f7fe fff0 	bl	bacc2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bbce2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bbce6:	4299      	cmp	r1, r3
   bbce8:	da10      	bge.n	bbd0c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bbcea:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bbcec:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bbcee:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bbcf2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bbcf6:	4629      	mov	r1, r5
   bbcf8:	f105 0008 	add.w	r0, r5, #8
   bbcfc:	f7ff ff63 	bl	bbbc6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bbd00:	b98d      	cbnz	r5, bbd26 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bbd02:	6863      	ldr	r3, [r4, #4]
   bbd04:	3301      	adds	r3, #1
   bbd06:	6063      	str	r3, [r4, #4]
    return true;
   bbd08:	2601      	movs	r6, #1
   bbd0a:	e006      	b.n	bbd1a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bbd0c:	3101      	adds	r1, #1
   bbd0e:	4620      	mov	r0, r4
   bbd10:	f7ff ff83 	bl	bbc1a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bbd14:	4606      	mov	r6, r0
   bbd16:	2800      	cmp	r0, #0
   bbd18:	d1e7      	bne.n	bbcea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   bbd1a:	a801      	add	r0, sp, #4
   bbd1c:	f7fe ffe5 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bbd20:	4630      	mov	r0, r6
   bbd22:	b002      	add	sp, #8
   bbd24:	bd70      	pop	{r4, r5, r6, pc}
   bbd26:	4669      	mov	r1, sp
   bbd28:	4628      	mov	r0, r5
   bbd2a:	f7fe ffca 	bl	bacc2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bbd2e:	e7e8      	b.n	bbd02 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bbd30 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   bbd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   bbd34:	f8df 90b8 	ldr.w	r9, [pc, #184]	; bbdf0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   bbd38:	f8df a0b8 	ldr.w	sl, [pc, #184]	; bbdf4 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   bbd3c:	b093      	sub	sp, #76	; 0x4c
   bbd3e:	4605      	mov	r5, r0
   bbd40:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   bbd42:	2700      	movs	r7, #0
   bbd44:	682b      	ldr	r3, [r5, #0]
   bbd46:	42bb      	cmp	r3, r7
   bbd48:	d94e      	bls.n	bbde8 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   bbd4a:	a803      	add	r0, sp, #12
   bbd4c:	f7fe fd9a 	bl	ba884 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   bbd50:	261c      	movs	r6, #28
   bbd52:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   bbd54:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   bbd56:	437e      	muls	r6, r7
   bbd58:	4432      	add	r2, r6
   bbd5a:	f10d 0c14 	add.w	ip, sp, #20
   bbd5e:	1d13      	adds	r3, r2, #4
   bbd60:	46e3      	mov	fp, ip
   bbd62:	3214      	adds	r2, #20
   bbd64:	6818      	ldr	r0, [r3, #0]
   bbd66:	6859      	ldr	r1, [r3, #4]
   bbd68:	46e6      	mov	lr, ip
   bbd6a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   bbd6e:	3308      	adds	r3, #8
   bbd70:	4293      	cmp	r3, r2
   bbd72:	46f4      	mov	ip, lr
   bbd74:	d1f6      	bne.n	bbd64 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   bbd76:	6818      	ldr	r0, [r3, #0]
   bbd78:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   bbd7c:	4659      	mov	r1, fp
   bbd7e:	a80a      	add	r0, sp, #40	; 0x28
   bbd80:	f7fe fac0 	bl	ba304 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   bbd84:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   bbd88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bbd8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bbd8e:	f8dc 3000 	ldr.w	r3, [ip]
   bbd92:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   bbd94:	686b      	ldr	r3, [r5, #4]
   bbd96:	9a03      	ldr	r2, [sp, #12]
   bbd98:	4433      	add	r3, r6
   bbd9a:	a903      	add	r1, sp, #12
   bbd9c:	8b1b      	ldrh	r3, [r3, #24]
   bbd9e:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   bbda0:	686b      	ldr	r3, [r5, #4]
   bbda2:	4433      	add	r3, r6
   bbda4:	8b5b      	ldrh	r3, [r3, #26]
   bbda6:	82d3      	strh	r3, [r2, #22]
        return services_;
   bbda8:	f8d8 0000 	ldr.w	r0, [r8]
   bbdac:	f100 040c 	add.w	r4, r0, #12
   bbdb0:	a80a      	add	r0, sp, #40	; 0x28
   bbdb2:	f7fe ff86 	bl	bacc2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   bbdb6:	4620      	mov	r0, r4
   bbdb8:	a90a      	add	r1, sp, #40	; 0x28
   bbdba:	f7ff ff8c 	bl	bbcd6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   bbdbe:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bbdc0:	a80b      	add	r0, sp, #44	; 0x2c
   bbdc2:	f7fe ff92 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbdc6:	b954      	cbnz	r4, bbdde <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   bbdc8:	2320      	movs	r3, #32
   bbdca:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   bbdce:	f8cd 9000 	str.w	r9, [sp]
   bbdd2:	4623      	mov	r3, r4
   bbdd4:	aa0a      	add	r2, sp, #40	; 0x28
   bbdd6:	4651      	mov	r1, sl
   bbdd8:	2032      	movs	r0, #50	; 0x32
   bbdda:	f7fd ffc1 	bl	b9d60 <log_message>
   bbdde:	a804      	add	r0, sp, #16
   bbde0:	f7fe ff83 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   bbde4:	3701      	adds	r7, #1
   bbde6:	e7ad      	b.n	bbd44 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   bbde8:	b013      	add	sp, #76	; 0x4c
   bbdea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbdee:	bf00      	nop
   bbdf0:	000c1cc1 	.word	0x000c1cc1
   bbdf4:	000c1bc3 	.word	0x000c1bc3

000bbdf8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bbdf8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bbdfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbdfc:	4604      	mov	r4, r0
   bbdfe:	460d      	mov	r5, r1
   bbe00:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bbe02:	d914      	bls.n	bbe2e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bbe04:	4290      	cmp	r0, r2
   bbe06:	d213      	bcs.n	bbe30 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bbe08:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bbe0c:	1a75      	subs	r5, r6, r1
   bbe0e:	f1a1 0708 	sub.w	r7, r1, #8
   bbe12:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bbe14:	42b7      	cmp	r7, r6
   bbe16:	d018      	beq.n	bbe4a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bbe18:	b11c      	cbz	r4, bbe22 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bbe1a:	4631      	mov	r1, r6
   bbe1c:	4620      	mov	r0, r4
   bbe1e:	f7fe ff42 	bl	baca6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bbe22:	1d30      	adds	r0, r6, #4
   bbe24:	f7fe ff61 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bbe28:	3e08      	subs	r6, #8
   bbe2a:	3c08      	subs	r4, #8
   bbe2c:	e7f2      	b.n	bbe14 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bbe2e:	d00c      	beq.n	bbe4a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bbe30:	42b5      	cmp	r5, r6
   bbe32:	d00a      	beq.n	bbe4a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bbe34:	b11c      	cbz	r4, bbe3e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bbe36:	4629      	mov	r1, r5
   bbe38:	4620      	mov	r0, r4
   bbe3a:	f7fe ff34 	bl	baca6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bbe3e:	1d28      	adds	r0, r5, #4
   bbe40:	f7fe ff53 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bbe44:	3508      	adds	r5, #8
   bbe46:	3408      	adds	r4, #8
   bbe48:	e7f2      	b.n	bbe30 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bbe4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bbe4c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bbe4c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bbe4e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bbe50:	4605      	mov	r5, r0
        if (n > 0) {
   bbe52:	dd11      	ble.n	bbe78 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bbe54:	00f0      	lsls	r0, r6, #3
   bbe56:	f7fe f85f 	bl	b9f18 <malloc>
            if (!d) {
   bbe5a:	4604      	mov	r4, r0
   bbe5c:	b158      	cbz	r0, bbe76 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bbe5e:	e9d5 1200 	ldrd	r1, r2, [r5]
   bbe62:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bbe66:	f7ff ffc7 	bl	bbdf8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bbe6a:	6828      	ldr	r0, [r5, #0]
   bbe6c:	f7fe f85c 	bl	b9f28 <free>
        data_ = d;
   bbe70:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bbe72:	60ae      	str	r6, [r5, #8]
        return true;
   bbe74:	2001      	movs	r0, #1
    }
   bbe76:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bbe78:	2400      	movs	r4, #0
   bbe7a:	e7f6      	b.n	bbe6a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bbe7c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bbe7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   bbe80:	2300      	movs	r3, #0
   bbe82:	e9c0 3300 	strd	r3, r3, [r0]
   bbe86:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bbe88:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bbe8a:	6849      	ldr	r1, [r1, #4]
   bbe8c:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bbe8e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bbe90:	dd13      	ble.n	bbeba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   bbe92:	f7ff ffdb 	bl	bbe4c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bbe96:	b180      	cbz	r0, bbeba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bbe98:	e9d5 6300 	ldrd	r6, r3, [r5]
   bbe9c:	6827      	ldr	r7, [r4, #0]
   bbe9e:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   bbea2:	45b0      	cmp	r8, r6
   bbea4:	d007      	beq.n	bbeb6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   bbea6:	b11f      	cbz	r7, bbeb0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   bbea8:	4631      	mov	r1, r6
   bbeaa:	4638      	mov	r0, r7
   bbeac:	f7fe fefb 	bl	baca6 <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   bbeb0:	3608      	adds	r6, #8
   bbeb2:	3708      	adds	r7, #8
   bbeb4:	e7f5      	b.n	bbea2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   bbeb6:	686b      	ldr	r3, [r5, #4]
   bbeb8:	6063      	str	r3, [r4, #4]
}
   bbeba:	4620      	mov	r0, r4
   bbebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bbec0 <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   bbec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bbec2:	460d      	mov	r5, r1
   bbec4:	4604      	mov	r4, r0
    WiringBleLock lk;
   bbec6:	a801      	add	r0, sp, #4
   bbec8:	f7fe f9c6 	bl	ba258 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   bbecc:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   bbece:	4620      	mov	r0, r4
   bbed0:	3118      	adds	r1, #24
   bbed2:	f7ff ffd3 	bl	bbe7c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   bbed6:	a801      	add	r0, sp, #4
   bbed8:	f7fe f9cc 	bl	ba274 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bbedc:	4620      	mov	r0, r4
   bbede:	b003      	add	sp, #12
   bbee0:	bd30      	pop	{r4, r5, pc}

000bbee2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bbee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bbee4:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bbee6:	6845      	ldr	r5, [r0, #4]
   bbee8:	4668      	mov	r0, sp
   bbeea:	f7fe fedc 	bl	baca6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bbeee:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bbef2:	4299      	cmp	r1, r3
   bbef4:	da10      	bge.n	bbf18 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bbef6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bbef8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bbefa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bbefe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bbf02:	4629      	mov	r1, r5
   bbf04:	f105 0008 	add.w	r0, r5, #8
   bbf08:	f7ff ff76 	bl	bbdf8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bbf0c:	b98d      	cbnz	r5, bbf32 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bbf0e:	6863      	ldr	r3, [r4, #4]
   bbf10:	3301      	adds	r3, #1
   bbf12:	6063      	str	r3, [r4, #4]
    return true;
   bbf14:	2601      	movs	r6, #1
   bbf16:	e006      	b.n	bbf26 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bbf18:	3101      	adds	r1, #1
   bbf1a:	4620      	mov	r0, r4
   bbf1c:	f7ff ff96 	bl	bbe4c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bbf20:	4606      	mov	r6, r0
   bbf22:	2800      	cmp	r0, #0
   bbf24:	d1e7      	bne.n	bbef6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bbf26:	a801      	add	r0, sp, #4
   bbf28:	f7fe fedf 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bbf2c:	4630      	mov	r0, r6
   bbf2e:	b002      	add	sp, #8
   bbf30:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bbf32:	4669      	mov	r1, sp
   bbf34:	4628      	mov	r0, r5
   bbf36:	f7fe feb6 	bl	baca6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bbf3a:	e7e8      	b.n	bbf0e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bbf3c <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   bbf3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bbf3e:	b085      	sub	sp, #20
   bbf40:	4605      	mov	r5, r0
    WiringBleLock lk;
   bbf42:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   bbf44:	460c      	mov	r4, r1
   bbf46:	4617      	mov	r7, r2
    WiringBleLock lk;
   bbf48:	f7fe f986 	bl	ba258 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   bbf4c:	2300      	movs	r3, #0
   bbf4e:	e9c5 3300 	strd	r3, r3, [r5]
   bbf52:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   bbf54:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   bbf56:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   bbf5a:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   bbf5e:	42b4      	cmp	r4, r6
   bbf60:	d011      	beq.n	bbf86 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   bbf62:	6838      	ldr	r0, [r7, #0]
   bbf64:	4621      	mov	r1, r4
   bbf66:	f7fe fba7 	bl	ba6b8 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   bbf6a:	b150      	cbz	r0, bbf82 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   bbf6c:	4621      	mov	r1, r4
   bbf6e:	a802      	add	r0, sp, #8
   bbf70:	f7fe fe99 	bl	baca6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bbf74:	a902      	add	r1, sp, #8
   bbf76:	4628      	mov	r0, r5
   bbf78:	f7ff ffb3 	bl	bbee2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   bbf7c:	a803      	add	r0, sp, #12
   bbf7e:	f7fe feb4 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   bbf82:	3408      	adds	r4, #8
   bbf84:	e7eb      	b.n	bbf5e <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   bbf86:	a801      	add	r0, sp, #4
   bbf88:	f7fe f974 	bl	ba274 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bbf8c:	4628      	mov	r0, r5
   bbf8e:	b005      	add	sp, #20
   bbf90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bbf94 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   bbf94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   bbf98:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bbf9a:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   bbf9c:	b091      	sub	sp, #68	; 0x44
   bbf9e:	4606      	mov	r6, r0
   bbfa0:	460f      	mov	r7, r1
   bbfa2:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   bbfa4:	b933      	cbnz	r3, bbfb4 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   bbfa6:	e9c0 3300 	strd	r3, r3, [r0]
   bbfaa:	6083      	str	r3, [r0, #8]
}
   bbfac:	4630      	mov	r0, r6
   bbfae:	b011      	add	sp, #68	; 0x44
   bbfb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   bbfb4:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   bbfb6:	7e0d      	ldrb	r5, [r1, #24]
   bbfb8:	2d00      	cmp	r5, #0
   bbfba:	d158      	bne.n	bc06e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   bbfbc:	2320      	movs	r3, #32
   bbfbe:	462a      	mov	r2, r5
   bbfc0:	a803      	add	r0, sp, #12
   bbfc2:	e9cd 3508 	strd	r3, r5, [sp, #32]
   bbfc6:	f7fe fae4 	bl	ba592 <_ZNK8particle7BleUuid8toStringEb>
   bbfca:	9b03      	ldr	r3, [sp, #12]
   bbfcc:	9301      	str	r3, [sp, #4]
   bbfce:	4b2b      	ldr	r3, [pc, #172]	; (bc07c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   bbfd0:	492b      	ldr	r1, [pc, #172]	; (bc080 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   bbfd2:	9300      	str	r3, [sp, #0]
   bbfd4:	aa08      	add	r2, sp, #32
   bbfd6:	462b      	mov	r3, r5
   bbfd8:	2001      	movs	r0, #1
   bbfda:	f7fd fec1 	bl	b9d60 <log_message>
   bbfde:	a803      	add	r0, sp, #12
   bbfe0:	f001 f9b0 	bl	bd344 <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   bbfe4:	231c      	movs	r3, #28
   bbfe6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   bbfea:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   bbfee:	8a9a      	ldrh	r2, [r3, #20]
   bbff0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   bbff4:	8adb      	ldrh	r3, [r3, #22]
   bbff6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   bbffa:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   bbffc:	4a21      	ldr	r2, [pc, #132]	; (bc084 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   bbffe:	8818      	ldrh	r0, [r3, #0]
   bc000:	9500      	str	r5, [sp, #0]
   bc002:	a908      	add	r1, sp, #32
   bc004:	f7fd fc48 	bl	b9898 <hal_ble_gatt_client_discover_characteristics>
   bc008:	2800      	cmp	r0, #0
   bc00a:	db30      	blt.n	bc06e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   bc00c:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   bc00e:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   bc012:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   bc016:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   bc018:	f1a4 0308 	sub.w	r3, r4, #8
   bc01c:	4599      	cmp	r9, r3
   bc01e:	d022      	beq.n	bc066 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   bc020:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bc024:	89db      	ldrh	r3, [r3, #14]
   bc026:	2b00      	cmp	r3, #0
   bc028:	d0f5      	beq.n	bc016 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   bc02a:	2210      	movs	r2, #16
   bc02c:	2100      	movs	r1, #0
   bc02e:	eb0d 0002 	add.w	r0, sp, r2
   bc032:	9503      	str	r5, [sp, #12]
   bc034:	f002 fcd1 	bl	be9da <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   bc038:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bc03c:	89d9      	ldrh	r1, [r3, #14]
   bc03e:	683b      	ldr	r3, [r7, #0]
   bc040:	aa03      	add	r2, sp, #12
   bc042:	8818      	ldrh	r0, [r3, #0]
   bc044:	9500      	str	r5, [sp, #0]
   bc046:	2313      	movs	r3, #19
   bc048:	f7fd fc44 	bl	b98d4 <hal_ble_gatt_client_read>
                if (len > 0) {
   bc04c:	2800      	cmp	r0, #0
   bc04e:	d0e2      	beq.n	bc016 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   bc050:	ab10      	add	r3, sp, #64	; 0x40
   bc052:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   bc054:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   bc056:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   bc05a:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   bc05e:	303c      	adds	r0, #60	; 0x3c
   bc060:	f001 fa11 	bl	bd486 <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   bc064:	e7d7      	b.n	bc016 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   bc066:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   bc06a:	2201      	movs	r2, #1
   bc06c:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   bc06e:	4642      	mov	r2, r8
   bc070:	4639      	mov	r1, r7
   bc072:	4630      	mov	r0, r6
   bc074:	f7ff ff62 	bl	bbf3c <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   bc078:	e798      	b.n	bbfac <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   bc07a:	bf00      	nop
   bc07c:	000c1ce6 	.word	0x000c1ce6
   bc080:	000c1bc3 	.word	0x000c1bc3
   bc084:	000bc22d 	.word	0x000bc22d

000bc088 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   bc088:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   bc08a:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bc08c:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   bc08e:	b085      	sub	sp, #20
   bc090:	4606      	mov	r6, r0
   bc092:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   bc094:	b92b      	cbnz	r3, bc0a2 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   bc096:	a801      	add	r0, sp, #4
   bc098:	f7ff fe0a 	bl	bbcb0 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   bc09c:	a801      	add	r0, sp, #4
   bc09e:	f7fe fe33 	bl	bad08 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   bc0a2:	682b      	ldr	r3, [r5, #0]
   bc0a4:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   bc0a8:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   bc0ac:	42bc      	cmp	r4, r7
   bc0ae:	d009      	beq.n	bc0c4 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   bc0b0:	4622      	mov	r2, r4
   bc0b2:	4629      	mov	r1, r5
   bc0b4:	a801      	add	r0, sp, #4
   bc0b6:	f7ff ff6d 	bl	bbf94 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   bc0ba:	a801      	add	r0, sp, #4
   bc0bc:	f7fe fe36 	bl	bad2c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   bc0c0:	3408      	adds	r4, #8
   bc0c2:	e7f3      	b.n	bc0ac <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   bc0c4:	4630      	mov	r0, r6
   bc0c6:	4629      	mov	r1, r5
   bc0c8:	f7ff fefa 	bl	bbec0 <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   bc0cc:	4630      	mov	r0, r6
   bc0ce:	b005      	add	sp, #20
   bc0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bc0d4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bc0d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc0d8:	4605      	mov	r5, r0
   bc0da:	b093      	sub	sp, #76	; 0x4c
    return address_;
   bc0dc:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   bc0de:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bc0e0:	460f      	mov	r7, r1
    return address_;
   bc0e2:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bc0e4:	4698      	mov	r8, r3
    return address_;
   bc0e6:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   bc0e8:	4b41      	ldr	r3, [pc, #260]	; (bc1f0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   bc0ea:	9304      	str	r3, [sp, #16]
    return address_;
   bc0ec:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   bc0ee:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   bc0f0:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   bc0f4:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   bc0f8:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   bc0fc:	f7fe fc8e 	bl	baa1c <_ZN8particle14BleLocalDevice11getInstanceEv>
   bc100:	4b3c      	ldr	r3, [pc, #240]	; (bc1f4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   bc102:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   bc104:	f7fe fc8a 	bl	baa1c <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   bc108:	6829      	ldr	r1, [r5, #0]
   bc10a:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   bc10c:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   bc10e:	464a      	mov	r2, r9
   bc110:	a804      	add	r0, sp, #16
   bc112:	f7fd fbe9 	bl	b98e8 <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   bc116:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   bc118:	4604      	mov	r4, r0
   bc11a:	b138      	cbz	r0, bc12c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   bc11c:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bc11e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bc122:	801a      	strh	r2, [r3, #0]
}
   bc124:	4620      	mov	r0, r4
   bc126:	b013      	add	sp, #76	; 0x4c
   bc128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   bc12c:	4639      	mov	r1, r7
   bc12e:	4628      	mov	r0, r5
   bc130:	f7fe fbf8 	bl	ba924 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
   bc134:	a803      	add	r0, sp, #12
   bc136:	f7fe f88f 	bl	ba258 <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   bc13a:	f7fe fc6f 	bl	baa1c <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   bc13e:	6807      	ldr	r7, [r0, #0]
   bc140:	4629      	mov	r1, r5
   bc142:	3718      	adds	r7, #24
   bc144:	4630      	mov	r0, r6
   bc146:	f7fe fdc6 	bl	bacd6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   bc14a:	4631      	mov	r1, r6
   bc14c:	4638      	mov	r0, r7
   bc14e:	f7ff f92b 	bl	bb3a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bc152:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   bc154:	a80b      	add	r0, sp, #44	; 0x2c
   bc156:	f7fe fdc8 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc15a:	f04f 0920 	mov.w	r9, #32
   bc15e:	bb1f      	cbnz	r7, bc1a8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   bc160:	4632      	mov	r2, r6
   bc162:	4b25      	ldr	r3, [pc, #148]	; (bc1f8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bc164:	4e25      	ldr	r6, [pc, #148]	; (bc1fc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   bc166:	4926      	ldr	r1, [pc, #152]	; (bc200 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   bc168:	9300      	str	r3, [sp, #0]
   bc16a:	2032      	movs	r0, #50	; 0x32
   bc16c:	4623      	mov	r3, r4
   bc16e:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   bc172:	f7fd fdf5 	bl	b9d60 <log_message>
   bc176:	6830      	ldr	r0, [r6, #0]
   bc178:	f7fd fc32 	bl	b99e0 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bc17c:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   bc17e:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bc182:	4621      	mov	r1, r4
   bc184:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   bc186:	4c1f      	ldr	r4, [pc, #124]	; (bc204 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bc188:	f7fd fb68 	bl	b985c <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   bc18c:	6830      	ldr	r0, [r6, #0]
   bc18e:	f7fd fc1f 	bl	b99d0 <os_mutex_recursive_lock>
        locked_ = true;
   bc192:	2301      	movs	r3, #1
   bc194:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   bc198:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bc19a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bc19e:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   bc1a0:	a803      	add	r0, sp, #12
   bc1a2:	f7fe f867 	bl	ba274 <_ZN8particle3ble13WiringBleLockD1Ev>
   bc1a6:	e7bd      	b.n	bc124 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   bc1a8:	a803      	add	r0, sp, #12
   bc1aa:	f7fe f863 	bl	ba274 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   bc1ae:	4b16      	ldr	r3, [pc, #88]	; (bc208 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   bc1b0:	9300      	str	r3, [sp, #0]
   bc1b2:	4913      	ldr	r1, [pc, #76]	; (bc200 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   bc1b4:	4623      	mov	r3, r4
   bc1b6:	4632      	mov	r2, r6
   bc1b8:	2001      	movs	r0, #1
   bc1ba:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   bc1be:	f7fd fdcf 	bl	b9d60 <log_message>
    if (automatic) {
   bc1c2:	f1b8 0f00 	cmp.w	r8, #0
   bc1c6:	d0ad      	beq.n	bc124 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   bc1c8:	4629      	mov	r1, r5
   bc1ca:	4630      	mov	r0, r6
   bc1cc:	f7ff ff5c 	bl	bc088 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   bc1d0:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   bc1d4:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   bc1d8:	42bd      	cmp	r5, r7
   bc1da:	d005      	beq.n	bc1e8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   bc1dc:	4628      	mov	r0, r5
   bc1de:	2101      	movs	r1, #1
   bc1e0:	f7fe fb16 	bl	ba810 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   bc1e4:	3508      	adds	r5, #8
   bc1e6:	e7f7      	b.n	bc1d8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   bc1e8:	4630      	mov	r0, r6
   bc1ea:	f7fe fd9f 	bl	bad2c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bc1ee:	e799      	b.n	bc124 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   bc1f0:	00180003 	.word	0x00180003
   bc1f4:	000bb461 	.word	0x000bb461
   bc1f8:	000c1d18 	.word	0x000c1d18
   bc1fc:	2003e65c 	.word	0x2003e65c
   bc200:	000c1bc3 	.word	0x000c1bc3
   bc204:	fffffefc 	.word	0xfffffefc
   bc208:	000c1d34 	.word	0x000c1d34

000bc20c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   bc20c:	b513      	push	{r0, r1, r4, lr}
   bc20e:	4604      	mov	r4, r0
   bc210:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   bc214:	f7fe fb52 	bl	ba8bc <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   bc218:	9b00      	ldr	r3, [sp, #0]
   bc21a:	9901      	ldr	r1, [sp, #4]
   bc21c:	2200      	movs	r2, #0
   bc21e:	4620      	mov	r0, r4
   bc220:	f7ff ff58 	bl	bc0d4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}
   bc224:	4620      	mov	r0, r4
   bc226:	b002      	add	sp, #8
   bc228:	bd10      	pop	{r4, pc}
	...

000bc22c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bc22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   bc230:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bc232:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   bc234:	2600      	movs	r6, #0
   bc236:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   bc23a:	4b66      	ldr	r3, [pc, #408]	; (bc3d4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   bc23c:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bc23e:	4605      	mov	r5, r0
   bc240:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   bc242:	4633      	mov	r3, r6
   bc244:	4964      	ldr	r1, [pc, #400]	; (bc3d8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   bc246:	f8df 9194 	ldr.w	r9, [pc, #404]	; bc3dc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   bc24a:	f8df 818c 	ldr.w	r8, [pc, #396]	; bc3d8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bc24e:	f8df a190 	ldr.w	sl, [pc, #400]	; bc3e0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   bc252:	aa0c      	add	r2, sp, #48	; 0x30
   bc254:	2001      	movs	r0, #1
   bc256:	f7fd fd83 	bl	b9d60 <log_message>
        for (size_t i = 0; i < event->count; i++) {
   bc25a:	682b      	ldr	r3, [r5, #0]
   bc25c:	42b3      	cmp	r3, r6
   bc25e:	f240 80b5 	bls.w	bc3cc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   bc262:	a803      	add	r0, sp, #12
   bc264:	f7fe fa4e 	bl	ba704 <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   bc268:	a805      	add	r0, sp, #20
   bc26a:	f7fe fb0b 	bl	ba884 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   bc26e:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   bc272:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   bc274:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   bc276:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   bc27a:	445b      	add	r3, fp
        this->size = halHandles.size;
   bc27c:	8bd9      	ldrh	r1, [r3, #30]
   bc27e:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   bc280:	8c19      	ldrh	r1, [r3, #32]
   bc282:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   bc284:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   bc286:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   bc288:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   bc28a:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   bc28c:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   bc28e:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   bc290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   bc292:	8253      	strh	r3, [r2, #18]
   bc294:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   bc298:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   bc29c:	429a      	cmp	r2, r3
   bc29e:	d07d      	beq.n	bc39c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   bc2a0:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   bc2a2:	8ac4      	ldrh	r4, [r0, #22]
   bc2a4:	428c      	cmp	r4, r1
   bc2a6:	d377      	bcc.n	bc398 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   bc2a8:	8a84      	ldrh	r4, [r0, #20]
   bc2aa:	428c      	cmp	r4, r1
   bc2ac:	d874      	bhi.n	bc398 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bc2ae:	6859      	ldr	r1, [r3, #4]
   bc2b0:	9005      	str	r0, [sp, #20]
   bc2b2:	a806      	add	r0, sp, #24
   bc2b4:	f7fd ffaa 	bl	ba20c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   bc2b8:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   bc2bc:	f8dd e00c 	ldr.w	lr, [sp, #12]
   bc2c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bc2c4:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   bc2c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc2ca:	f8dc 3000 	ldr.w	r3, [ip]
   bc2ce:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   bc2d0:	892b      	ldrh	r3, [r5, #8]
   bc2d2:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   bc2d6:	686b      	ldr	r3, [r5, #4]
   bc2d8:	9c03      	ldr	r4, [sp, #12]
   bc2da:	445b      	add	r3, fp
   bc2dc:	7e5b      	ldrb	r3, [r3, #25]
   bc2de:	f013 0f02 	tst.w	r3, #2
   bc2e2:	d16e      	bne.n	bc3c2 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   bc2e4:	686b      	ldr	r3, [r5, #4]
   bc2e6:	445b      	add	r3, fp
   bc2e8:	7e5b      	ldrb	r3, [r3, #25]
   bc2ea:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   bc2ec:	bf42      	ittt	mi
   bc2ee:	7923      	ldrbmi	r3, [r4, #4]
   bc2f0:	f043 0304 	orrmi.w	r3, r3, #4
   bc2f4:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   bc2f6:	686b      	ldr	r3, [r5, #4]
   bc2f8:	445b      	add	r3, fp
   bc2fa:	7e5b      	ldrb	r3, [r3, #25]
   bc2fc:	0719      	lsls	r1, r3, #28
   bc2fe:	bf42      	ittt	mi
   bc300:	7923      	ldrbmi	r3, [r4, #4]
   bc302:	f043 0308 	orrmi.w	r3, r3, #8
   bc306:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   bc308:	686b      	ldr	r3, [r5, #4]
   bc30a:	445b      	add	r3, fp
   bc30c:	7e5b      	ldrb	r3, [r3, #25]
   bc30e:	06da      	lsls	r2, r3, #27
   bc310:	bf42      	ittt	mi
   bc312:	7923      	ldrbmi	r3, [r4, #4]
   bc314:	f043 0310 	orrmi.w	r3, r3, #16
   bc318:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   bc31a:	686b      	ldr	r3, [r5, #4]
   bc31c:	445b      	add	r3, fp
   bc31e:	aa07      	add	r2, sp, #28
   bc320:	7e5b      	ldrb	r3, [r3, #25]
   bc322:	069b      	lsls	r3, r3, #26
   bc324:	bf42      	ittt	mi
   bc326:	7923      	ldrbmi	r3, [r4, #4]
   bc328:	f043 0320 	orrmi.w	r3, r3, #32
   bc32c:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   bc32e:	686b      	ldr	r3, [r5, #4]
   bc330:	449b      	add	fp, r3
   bc332:	f10b 0304 	add.w	r3, fp, #4
   bc336:	4696      	mov	lr, r2
   bc338:	f10b 0b14 	add.w	fp, fp, #20
   bc33c:	6818      	ldr	r0, [r3, #0]
   bc33e:	6859      	ldr	r1, [r3, #4]
   bc340:	4694      	mov	ip, r2
   bc342:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   bc346:	3308      	adds	r3, #8
   bc348:	455b      	cmp	r3, fp
   bc34a:	4662      	mov	r2, ip
   bc34c:	d1f6      	bne.n	bc33c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   bc34e:	6818      	ldr	r0, [r3, #0]
   bc350:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   bc354:	4671      	mov	r1, lr
   bc356:	a80c      	add	r0, sp, #48	; 0x30
   bc358:	f7fd ffd4 	bl	ba304 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   bc35c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   bc360:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bc364:	3414      	adds	r4, #20
   bc366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc368:	f8dc 3000 	ldr.w	r3, [ip]
   bc36c:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   bc36e:	a903      	add	r1, sp, #12
   bc370:	a80c      	add	r0, sp, #48	; 0x30
   bc372:	f7fe fc98 	bl	baca6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bc376:	a90c      	add	r1, sp, #48	; 0x30
   bc378:	f107 0018 	add.w	r0, r7, #24
   bc37c:	f7ff fdb1 	bl	bbee2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bc380:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bc382:	a80d      	add	r0, sp, #52	; 0x34
   bc384:	f7fe fcb1 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc388:	b99c      	cbnz	r4, bc3b2 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bc38a:	2320      	movs	r3, #32
   bc38c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   bc390:	f8cd a000 	str.w	sl, [sp]
   bc394:	4623      	mov	r3, r4
   bc396:	e007      	b.n	bc3a8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   bc398:	3308      	adds	r3, #8
   bc39a:	e77f      	b.n	bc29c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   bc39c:	2420      	movs	r4, #32
   bc39e:	2300      	movs	r3, #0
   bc3a0:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   bc3a4:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bc3a8:	aa0c      	add	r2, sp, #48	; 0x30
   bc3aa:	4641      	mov	r1, r8
   bc3ac:	2032      	movs	r0, #50	; 0x32
   bc3ae:	f7fd fcd7 	bl	b9d60 <log_message>
   bc3b2:	a806      	add	r0, sp, #24
   bc3b4:	f7fe fc99 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc3b8:	a804      	add	r0, sp, #16
   bc3ba:	f7fe fc96 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   bc3be:	3601      	adds	r6, #1
   bc3c0:	e74b      	b.n	bc25a <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   bc3c2:	7923      	ldrb	r3, [r4, #4]
   bc3c4:	f043 0302 	orr.w	r3, r3, #2
   bc3c8:	7123      	strb	r3, [r4, #4]
   bc3ca:	e78b      	b.n	bc2e4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   bc3cc:	b015      	add	sp, #84	; 0x54
   bc3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc3d2:	bf00      	nop
   bc3d4:	000c1d51 	.word	0x000c1d51
   bc3d8:	000c1bc3 	.word	0x000c1bc3
   bc3dc:	000c1d6c 	.word	0x000c1d6c
   bc3e0:	000c1d9b 	.word	0x000c1d9b

000bc3e4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bc3e4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bc3e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc3e8:	4604      	mov	r4, r0
   bc3ea:	460d      	mov	r5, r1
   bc3ec:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bc3ee:	d914      	bls.n	bc41a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bc3f0:	4290      	cmp	r0, r2
   bc3f2:	d213      	bcs.n	bc41c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bc3f4:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   bc3f8:	1a75      	subs	r5, r6, r1
   bc3fa:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   bc3fe:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bc400:	42b7      	cmp	r7, r6
   bc402:	d018      	beq.n	bc436 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bc404:	b11c      	cbz	r4, bc40e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bc406:	4631      	mov	r1, r6
   bc408:	4620      	mov	r0, r4
   bc40a:	f7fe feb5 	bl	bb178 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   bc40e:	4630      	mov	r0, r6
   bc410:	f7fe fb72 	bl	baaf8 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   bc414:	3e24      	subs	r6, #36	; 0x24
   bc416:	3c24      	subs	r4, #36	; 0x24
   bc418:	e7f2      	b.n	bc400 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bc41a:	d00c      	beq.n	bc436 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bc41c:	42b5      	cmp	r5, r6
   bc41e:	d00a      	beq.n	bc436 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bc420:	b11c      	cbz	r4, bc42a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bc422:	4629      	mov	r1, r5
   bc424:	4620      	mov	r0, r4
   bc426:	f7fe fea7 	bl	bb178 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   bc42a:	4628      	mov	r0, r5
   bc42c:	f7fe fb64 	bl	baaf8 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   bc430:	3524      	adds	r5, #36	; 0x24
   bc432:	3424      	adds	r4, #36	; 0x24
   bc434:	e7f2      	b.n	bc41c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bc436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc438 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bc438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   bc43a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bc43c:	4605      	mov	r5, r0
        if (n > 0) {
   bc43e:	dd13      	ble.n	bc468 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   bc440:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   bc442:	fb07 f006 	mul.w	r0, r7, r6
   bc446:	f7fd fd67 	bl	b9f18 <malloc>
            if (!d) {
   bc44a:	4604      	mov	r4, r0
   bc44c:	b158      	cbz	r0, bc466 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   bc44e:	e9d5 1200 	ldrd	r1, r2, [r5]
   bc452:	fb07 1202 	mla	r2, r7, r2, r1
   bc456:	f7ff ffc5 	bl	bc3e4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bc45a:	6828      	ldr	r0, [r5, #0]
   bc45c:	f7fd fd64 	bl	b9f28 <free>
        data_ = d;
   bc460:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bc462:	60ae      	str	r6, [r5, #8]
        return true;
   bc464:	2001      	movs	r0, #1
    }
   bc466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   bc468:	2400      	movs	r4, #0
   bc46a:	e7f6      	b.n	bc45a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000bc46c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   bc46c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc470:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   bc472:	ad01      	add	r5, sp, #4
   bc474:	4606      	mov	r6, r0
   bc476:	4628      	mov	r0, r5
   bc478:	460c      	mov	r4, r1
   bc47a:	f7fd ff28 	bl	ba2ce <_ZN8particle10BleAddressC1Ev>
   bc47e:	a803      	add	r0, sp, #12
   bc480:	f7fe ff55 	bl	bb32e <_ZN8particle18BleAdvertisingDataC1Ev>
   bc484:	a806      	add	r0, sp, #24
   bc486:	f7fe ff52 	bl	bb32e <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   bc48a:	6930      	ldr	r0, [r6, #16]
   bc48c:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   bc48e:	89f2      	ldrh	r2, [r6, #14]
   bc490:	ab13      	add	r3, sp, #76	; 0x4c
   bc492:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   bc494:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   bc498:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   bc49a:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   bc49c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   bc4a0:	a806      	add	r0, sp, #24
   bc4a2:	f7fe feb8 	bl	bb216 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   bc4a6:	89b2      	ldrh	r2, [r6, #12]
   bc4a8:	6871      	ldr	r1, [r6, #4]
   bc4aa:	a803      	add	r0, sp, #12
   bc4ac:	f7fe feb3 	bl	bb216 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   bc4b0:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   bc4b4:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   bc4b6:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   bc4b8:	d003      	beq.n	bc4c2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   bc4ba:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   bc4be:	429a      	cmp	r2, r3
   bc4c0:	db5c      	blt.n	bc57c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   bc4c2:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   bc4c6:	2b7f      	cmp	r3, #127	; 0x7f
   bc4c8:	d003      	beq.n	bc4d2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   bc4ca:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   bc4ce:	429a      	cmp	r2, r3
   bc4d0:	dc54      	bgt.n	bc57c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   bc4d2:	f104 0150 	add.w	r1, r4, #80	; 0x50
   bc4d6:	4638      	mov	r0, r7
   bc4d8:	f7fe fd16 	bl	baf08 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   bc4dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   bc4de:	2b00      	cmp	r3, #0
   bc4e0:	dd52      	ble.n	bc588 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   bc4e2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   bc4e4:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   bc4e8:	45b1      	cmp	r9, r6
   bc4ea:	d050      	beq.n	bc58e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   bc4ec:	4630      	mov	r0, r6
   bc4ee:	4629      	mov	r1, r5
   bc4f0:	f7fd fed9 	bl	ba2a6 <_ZNK8particle10BleAddresseqERKS0_>
   bc4f4:	3608      	adds	r6, #8
   bc4f6:	4680      	mov	r8, r0
   bc4f8:	2800      	cmp	r0, #0
   bc4fa:	d0f5      	beq.n	bc4e8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   bc4fc:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bc4fe:	f7fd fd13 	bl	b9f28 <free>
        if (!delegator->filterByRssi(result) ||
   bc502:	f1b8 0f00 	cmp.w	r8, #0
   bc506:	d039      	beq.n	bc57c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   bc508:	4629      	mov	r1, r5
   bc50a:	4620      	mov	r0, r4
   bc50c:	f7fe fcbf 	bl	bae8e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   bc510:	b3a0      	cbz	r0, bc57c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   bc512:	4629      	mov	r1, r5
   bc514:	4620      	mov	r0, r4
   bc516:	f7ff fa68 	bl	bb9ea <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   bc51a:	4606      	mov	r6, r0
   bc51c:	b370      	cbz	r0, bc57c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   bc51e:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   bc522:	4638      	mov	r0, r7
   bc524:	f7fe fd3b 	bl	baf9e <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   bc528:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc52a:	2b00      	cmp	r3, #0
   bc52c:	dd12      	ble.n	bc554 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   bc52e:	a806      	add	r0, sp, #24
   bc530:	f7fe f895 	bl	ba65e <_ZNK8particle18BleAdvertisingData10appearanceEv>
   bc534:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   bc536:	a803      	add	r0, sp, #12
   bc538:	f7fe f891 	bl	ba65e <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   bc53c:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   bc540:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   bc544:	429a      	cmp	r2, r3
   bc546:	d025      	beq.n	bc594 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   bc548:	f833 1b02 	ldrh.w	r1, [r3], #2
   bc54c:	4588      	cmp	r8, r1
   bc54e:	d001      	beq.n	bc554 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   bc550:	4288      	cmp	r0, r1
   bc552:	d1f7      	bne.n	bc544 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   bc554:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bc556:	f7fd fce7 	bl	b9f28 <free>
              !delegator->filterByServiceUUID(result) ||
   bc55a:	b17e      	cbz	r6, bc57c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   bc55c:	4629      	mov	r1, r5
   bc55e:	4620      	mov	r0, r4
   bc560:	f7fe fd52 	bl	bb008 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   bc564:	b150      	cbz	r0, bc57c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   bc566:	6a23      	ldr	r3, [r4, #32]
   bc568:	b1b3      	cbz	r3, bc598 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   bc56a:	6963      	ldr	r3, [r4, #20]
   bc56c:	9513      	str	r5, [sp, #76]	; 0x4c
   bc56e:	3301      	adds	r3, #1
   bc570:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc572:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc574:	4639      	mov	r1, r7
   bc576:	f104 0018 	add.w	r0, r4, #24
   bc57a:	4798      	blx	r3
            return;
   bc57c:	4628      	mov	r0, r5
   bc57e:	f7fe fabb 	bl	baaf8 <_ZN8particle13BleScanResultD1Ev>
    }
   bc582:	b01d      	add	sp, #116	; 0x74
   bc584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   bc588:	f04f 0801 	mov.w	r8, #1
   bc58c:	e7b6      	b.n	bc4fc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   bc58e:	f04f 0800 	mov.w	r8, #0
   bc592:	e7b3      	b.n	bc4fc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   bc594:	2600      	movs	r6, #0
   bc596:	e7dd      	b.n	bc554 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   bc598:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   bc59c:	f1b8 0f00 	cmp.w	r8, #0
   bc5a0:	d007      	beq.n	bc5b2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   bc5a2:	6963      	ldr	r3, [r4, #20]
   bc5a4:	3301      	adds	r3, #1
   bc5a6:	6163      	str	r3, [r4, #20]
   bc5a8:	4629      	mov	r1, r5
   bc5aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   bc5ac:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bc5b0:	e7e3      	b.n	bc57a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   bc5b2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   bc5b6:	f1bc 0f00 	cmp.w	ip, #0
   bc5ba:	d025      	beq.n	bc608 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   bc5bc:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bc5be:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   bc5c0:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bc5c2:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   bc5c4:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bc5c6:	d8d9      	bhi.n	bc57c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   bc5c8:	2224      	movs	r2, #36	; 0x24
   bc5ca:	4353      	muls	r3, r2
    address_ = addr.address_;
   bc5cc:	462a      	mov	r2, r5
   bc5ce:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   bc5d0:	3b24      	subs	r3, #36	; 0x24
   bc5d2:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   bc5d6:	f84c 0003 	str.w	r0, [ip, r3]
   bc5da:	6071      	str	r1, [r6, #4]
class BleScanResult {
   bc5dc:	f106 0008 	add.w	r0, r6, #8
   bc5e0:	a903      	add	r1, sp, #12
   bc5e2:	f7fe fde0 	bl	bb1a6 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   bc5e6:	a906      	add	r1, sp, #24
   bc5e8:	f106 0014 	add.w	r0, r6, #20
   bc5ec:	f7fe fddb 	bl	bb1a6 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   bc5f0:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   bc5f4:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   bc5f8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   bc5fc:	429a      	cmp	r2, r3
   bc5fe:	d3bd      	bcc.n	bc57c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   bc600:	4640      	mov	r0, r8
   bc602:	f7fd f921 	bl	b9848 <hal_ble_gap_stop_scan>
   bc606:	e7b9      	b.n	bc57c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   bc608:	e895 0003 	ldmia.w	r5, {r0, r1}
   bc60c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   bc610:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   bc614:	a903      	add	r1, sp, #12
   bc616:	a80c      	add	r0, sp, #48	; 0x30
   bc618:	f7fe fd91 	bl	bb13e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   bc61c:	a906      	add	r1, sp, #24
   bc61e:	a80f      	add	r0, sp, #60	; 0x3c
   bc620:	f7fe fd8d 	bl	bb13e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   bc624:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   bc628:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   bc62c:	4641      	mov	r1, r8
   bc62e:	4638      	mov	r0, r7
   bc630:	6866      	ldr	r6, [r4, #4]
   bc632:	f7fe fda1 	bl	bb178 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc636:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bc63a:	4299      	cmp	r1, r3
   bc63c:	da10      	bge.n	bc660 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   bc63e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bc640:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   bc642:	2224      	movs	r2, #36	; 0x24
   bc644:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   bc648:	f106 0024 	add.w	r0, r6, #36	; 0x24
   bc64c:	fb02 3201 	mla	r2, r2, r1, r3
   bc650:	4631      	mov	r1, r6
   bc652:	f7ff fec7 	bl	bc3e4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bc656:	b986      	cbnz	r6, bc67a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   bc658:	6863      	ldr	r3, [r4, #4]
   bc65a:	3301      	adds	r3, #1
   bc65c:	6063      	str	r3, [r4, #4]
    return true;
   bc65e:	e005      	b.n	bc66c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc660:	3101      	adds	r1, #1
   bc662:	4620      	mov	r0, r4
   bc664:	f7ff fee8 	bl	bc438 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bc668:	2800      	cmp	r0, #0
   bc66a:	d1e8      	bne.n	bc63e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   bc66c:	4638      	mov	r0, r7
   bc66e:	f7fe fa43 	bl	baaf8 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   bc672:	4640      	mov	r0, r8
   bc674:	f7fe fa40 	bl	baaf8 <_ZN8particle13BleScanResultD1Ev>
   bc678:	e780      	b.n	bc57c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   bc67a:	4639      	mov	r1, r7
   bc67c:	4630      	mov	r0, r6
   bc67e:	f7fe fd7b 	bl	bb178 <_ZN8particle13BleScanResultC1EOS0_>
   bc682:	e7e9      	b.n	bc658 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000bc684 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   bc684:	4802      	ldr	r0, [pc, #8]	; (bc690 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bc686:	2300      	movs	r3, #0
   bc688:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   bc68a:	f7fd b999 	b.w	b99c0 <os_mutex_recursive_create>
   bc68e:	bf00      	nop
   bc690:	2003e65c 	.word	0x2003e65c

000bc694 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bc694:	2200      	movs	r2, #0
   bc696:	6840      	ldr	r0, [r0, #4]
   bc698:	4611      	mov	r1, r2
   bc69a:	f7fd bbf5 	b.w	b9e88 <network_ready>

000bc69e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bc69e:	2200      	movs	r2, #0
   bc6a0:	6840      	ldr	r0, [r0, #4]
   bc6a2:	4611      	mov	r1, r2
   bc6a4:	f7fd bc10 	b.w	b9ec8 <network_listening>

000bc6a8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bc6a8:	2200      	movs	r2, #0
   bc6aa:	6840      	ldr	r0, [r0, #4]
   bc6ac:	4611      	mov	r1, r2
   bc6ae:	f7fd bc1b 	b.w	b9ee8 <network_get_listen_timeout>

000bc6b2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bc6b2:	6840      	ldr	r0, [r0, #4]
   bc6b4:	2200      	movs	r2, #0
   bc6b6:	f7fd bc0f 	b.w	b9ed8 <network_set_listen_timeout>

000bc6ba <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bc6ba:	6840      	ldr	r0, [r0, #4]
   bc6bc:	2200      	movs	r2, #0
   bc6be:	f081 0101 	eor.w	r1, r1, #1
   bc6c2:	f7fd bbf9 	b.w	b9eb8 <network_listen>

000bc6c6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bc6c6:	2300      	movs	r3, #0
   bc6c8:	6840      	ldr	r0, [r0, #4]
   bc6ca:	461a      	mov	r2, r3
   bc6cc:	4619      	mov	r1, r3
   bc6ce:	f7fd bbeb 	b.w	b9ea8 <network_off>

000bc6d2 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bc6d2:	2300      	movs	r3, #0
   bc6d4:	6840      	ldr	r0, [r0, #4]
   bc6d6:	461a      	mov	r2, r3
   bc6d8:	4619      	mov	r1, r3
   bc6da:	f7fd bbdd 	b.w	b9e98 <network_on>

000bc6de <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bc6de:	2200      	movs	r2, #0
   bc6e0:	6840      	ldr	r0, [r0, #4]
   bc6e2:	4611      	mov	r1, r2
   bc6e4:	f7fd bbc0 	b.w	b9e68 <network_connecting>

000bc6e8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bc6e8:	6840      	ldr	r0, [r0, #4]
   bc6ea:	2200      	movs	r2, #0
   bc6ec:	2102      	movs	r1, #2
   bc6ee:	f7fd bbc3 	b.w	b9e78 <network_disconnect>

000bc6f2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bc6f2:	2300      	movs	r3, #0
   bc6f4:	6840      	ldr	r0, [r0, #4]
   bc6f6:	461a      	mov	r2, r3
   bc6f8:	f7fd bbae 	b.w	b9e58 <network_connect>

000bc6fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bc6fc:	4b08      	ldr	r3, [pc, #32]	; (bc720 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bc6fe:	b510      	push	{r4, lr}
   bc700:	2428      	movs	r4, #40	; 0x28
   bc702:	4622      	mov	r2, r4
   bc704:	4618      	mov	r0, r3
   bc706:	2100      	movs	r1, #0
   bc708:	f002 f967 	bl	be9da <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bc70c:	4b05      	ldr	r3, [pc, #20]	; (bc724 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bc70e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bc710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc714:	6042      	str	r2, [r0, #4]
   bc716:	2204      	movs	r2, #4
   bc718:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bc71a:	4a03      	ldr	r2, [pc, #12]	; (bc728 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bc71c:	601a      	str	r2, [r3, #0]
   bc71e:	bd10      	pop	{r4, pc}
   bc720:	2003e66c 	.word	0x2003e66c
   bc724:	2003e664 	.word	0x2003e664
   bc728:	000c1e44 	.word	0x000c1e44

000bc72c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bc72c:	4770      	bx	lr

000bc72e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bc72e:	2000      	movs	r0, #0
   bc730:	4770      	bx	lr

000bc732 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bc732:	b510      	push	{r4, lr}
   bc734:	2110      	movs	r1, #16
   bc736:	4604      	mov	r4, r0
   bc738:	f7f7 fcb1 	bl	b409e <_ZdlPvj>
   bc73c:	4620      	mov	r0, r4
   bc73e:	bd10      	pop	{r4, pc}

000bc740 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bc740:	b508      	push	{r3, lr}
      { delete this; }
   bc742:	f7ff fff6 	bl	bc732 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bc746:	bd08      	pop	{r3, pc}

000bc748 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bc748:	b530      	push	{r4, r5, lr}
        type_(type) {
   bc74a:	2200      	movs	r2, #0
   bc74c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bc750:	6002      	str	r2, [r0, #0]
   bc752:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   bc754:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bc756:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bc758:	680c      	ldr	r4, [r1, #0]
   bc75a:	8085      	strh	r5, [r0, #4]
   bc75c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bc75e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bc760:	bd30      	pop	{r4, r5, pc}

000bc762 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bc762:	b510      	push	{r4, lr}
   bc764:	4604      	mov	r4, r0
    free((void*)msg_);
   bc766:	6800      	ldr	r0, [r0, #0]
   bc768:	f7fd fbde 	bl	b9f28 <free>
}
   bc76c:	4620      	mov	r0, r4
   bc76e:	bd10      	pop	{r4, pc}

000bc770 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bc770:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bc772:	68c4      	ldr	r4, [r0, #12]
   bc774:	b1f4      	cbz	r4, bc7b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bc776:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bc778:	2b02      	cmp	r3, #2
   bc77a:	d103      	bne.n	bc784 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bc77c:	f104 000c 	add.w	r0, r4, #12
   bc780:	f7ff ffef 	bl	bc762 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bc784:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bc786:	b135      	cbz	r5, bc796 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bc788:	4628      	mov	r0, r5
   bc78a:	f7f7 fef5 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
   bc78e:	2110      	movs	r1, #16
   bc790:	4628      	mov	r0, r5
   bc792:	f7f7 fc84 	bl	b409e <_ZdlPvj>
   bc796:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bc798:	b135      	cbz	r5, bc7a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bc79a:	4628      	mov	r0, r5
   bc79c:	f7f7 feec 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
   bc7a0:	2110      	movs	r1, #16
   bc7a2:	4628      	mov	r0, r5
   bc7a4:	f7f7 fc7b 	bl	b409e <_ZdlPvj>
   bc7a8:	4620      	mov	r0, r4
   bc7aa:	2114      	movs	r1, #20
   bc7ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc7b0:	f7f7 bc75 	b.w	b409e <_ZdlPvj>
   bc7b4:	bd38      	pop	{r3, r4, r5, pc}

000bc7b6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bc7b6:	680b      	ldr	r3, [r1, #0]
   bc7b8:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bc7ba:	684b      	ldr	r3, [r1, #4]
   bc7bc:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bc7be:	b113      	cbz	r3, bc7c6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bc7c0:	685a      	ldr	r2, [r3, #4]
   bc7c2:	3201      	adds	r2, #1
   bc7c4:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bc7c6:	4770      	bx	lr

000bc7c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bc7c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc7ca:	4604      	mov	r4, r0
   bc7cc:	4668      	mov	r0, sp
   bc7ce:	460d      	mov	r5, r1
   bc7d0:	f7ff fff1 	bl	bc7b6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc7d4:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bc7d6:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc7d8:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bc7da:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bc7dc:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bc7de:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bc7e0:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   bc7e2:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bc7e4:	f7fe fa81 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bc7e8:	b135      	cbz	r5, bc7f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bc7ea:	1d28      	adds	r0, r5, #4
   bc7ec:	f7fe fa7d 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc7f0:	2108      	movs	r1, #8
   bc7f2:	4628      	mov	r0, r5
   bc7f4:	f7f7 fc53 	bl	b409e <_ZdlPvj>
        return p;
    }
   bc7f8:	4620      	mov	r0, r4
   bc7fa:	b003      	add	sp, #12
   bc7fc:	bd30      	pop	{r4, r5, pc}

000bc7fe <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bc7fe:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bc800:	b510      	push	{r4, lr}
      if (_M_empty())
   bc802:	b90a      	cbnz	r2, bc808 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bc804:	f001 fa19 	bl	bdc3a <_ZSt25__throw_bad_function_callv>
    }
   bc808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc80c:	68c3      	ldr	r3, [r0, #12]
   bc80e:	4718      	bx	r3

000bc810 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bc810:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bc812:	6800      	ldr	r0, [r0, #0]
   bc814:	f100 0110 	add.w	r1, r0, #16
   bc818:	f7ff fff1 	bl	bc7fe <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bc81c:	bd08      	pop	{r3, pc}

000bc81e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bc81e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bc820:	b510      	push	{r4, lr}
      if (_M_empty())
   bc822:	b90a      	cbnz	r2, bc828 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bc824:	f001 fa09 	bl	bdc3a <_ZSt25__throw_bad_function_callv>
    }
   bc828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc82c:	68c3      	ldr	r3, [r0, #12]
   bc82e:	4718      	bx	r3

000bc830 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bc830:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bc832:	6800      	ldr	r0, [r0, #0]
   bc834:	f100 0110 	add.w	r1, r0, #16
   bc838:	f7ff fff1 	bl	bc81e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bc83c:	bd08      	pop	{r3, pc}
	...

000bc840 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bc840:	b538      	push	{r3, r4, r5, lr}
   bc842:	2300      	movs	r3, #0
   bc844:	4604      	mov	r4, r0
   bc846:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc848:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bc84a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc84c:	f7f7 fc23 	bl	b4096 <_Znwj>
   bc850:	b128      	cbz	r0, bc85e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bc852:	2301      	movs	r3, #1
   bc854:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bc858:	4b02      	ldr	r3, [pc, #8]	; (bc864 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bc85a:	6003      	str	r3, [r0, #0]
   bc85c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc85e:	6020      	str	r0, [r4, #0]
	}
   bc860:	4620      	mov	r0, r4
   bc862:	bd38      	pop	{r3, r4, r5, pc}
   bc864:	000c1e80 	.word	0x000c1e80

000bc868 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bc868:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bc86a:	2300      	movs	r3, #0
   bc86c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bc86e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bc870:	4604      	mov	r4, r0
   bc872:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bc874:	b12b      	cbz	r3, bc882 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bc876:	2202      	movs	r2, #2
   bc878:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bc87a:	68eb      	ldr	r3, [r5, #12]
   bc87c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bc87e:	68ab      	ldr	r3, [r5, #8]
   bc880:	60a3      	str	r3, [r4, #8]
    }
   bc882:	4620      	mov	r0, r4
   bc884:	bd38      	pop	{r3, r4, r5, pc}
	...

000bc888 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bc888:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc88a:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   bc88c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bc88e:	4668      	mov	r0, sp
   bc890:	f7ff ff5a 	bl	bc748 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bc894:	f04f 0302 	mov.w	r3, #2
   bc898:	e8d4 2f4f 	ldrexb	r2, [r4]
   bc89c:	2a00      	cmp	r2, #0
   bc89e:	d103      	bne.n	bc8a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bc8a0:	e8c4 3f41 	strexb	r1, r3, [r4]
   bc8a4:	2900      	cmp	r1, #0
   bc8a6:	d1f7      	bne.n	bc898 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bc8a8:	d125      	bne.n	bc8f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bc8aa:	f104 050c 	add.w	r5, r4, #12
   bc8ae:	4669      	mov	r1, sp
   bc8b0:	4628      	mov	r0, r5
   bc8b2:	f7ff ff49 	bl	bc748 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bc8b6:	f3bf 8f5b 	dmb	ish
   bc8ba:	2301      	movs	r3, #1
   bc8bc:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bc8be:	2000      	movs	r0, #0
   bc8c0:	f104 0308 	add.w	r3, r4, #8
   bc8c4:	f3bf 8f5b 	dmb	ish
   bc8c8:	e853 6f00 	ldrex	r6, [r3]
   bc8cc:	e843 0200 	strex	r2, r0, [r3]
   bc8d0:	2a00      	cmp	r2, #0
   bc8d2:	d1f9      	bne.n	bc8c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bc8d4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bc8d8:	b16e      	cbz	r6, bc8f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bc8da:	f7fd fa61 	bl	b9da0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bc8de:	b178      	cbz	r0, bc900 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bc8e0:	4629      	mov	r1, r5
   bc8e2:	4630      	mov	r0, r6
   bc8e4:	f7ff ff8b 	bl	bc7fe <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bc8e8:	4630      	mov	r0, r6
   bc8ea:	f7f7 fe45 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bc8ee:	2110      	movs	r1, #16
   bc8f0:	4630      	mov	r0, r6
   bc8f2:	f7f7 fbd4 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bc8f6:	4668      	mov	r0, sp
   bc8f8:	f7ff ff33 	bl	bc762 <_ZN8particle5ErrorD1Ev>
    }
   bc8fc:	b009      	add	sp, #36	; 0x24
   bc8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bc900:	4631      	mov	r1, r6
   bc902:	a802      	add	r0, sp, #8
   bc904:	f7ff ffb0 	bl	bc868 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bc908:	68e0      	ldr	r0, [r4, #12]
   bc90a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bc90e:	b108      	cbz	r0, bc914 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bc910:	f002 f8fa 	bl	beb08 <strdup>
        type_(type) {
   bc914:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bc916:	2010      	movs	r0, #16
   bc918:	f8ad 501c 	strh.w	r5, [sp, #28]
   bc91c:	f7f7 fbbb 	bl	b4096 <_Znwj>
   bc920:	4605      	mov	r5, r0
   bc922:	b1e8      	cbz	r0, bc960 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bc924:	2700      	movs	r7, #0
   bc926:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc928:	2018      	movs	r0, #24
   bc92a:	f7f7 fbb4 	bl	b4096 <_Znwj>
   bc92e:	4604      	mov	r4, r0
   bc930:	b188      	cbz	r0, bc956 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bc932:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bc934:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bc936:	a802      	add	r0, sp, #8
   bc938:	f7ff f8b0 	bl	bba9c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc93c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bc93e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc940:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc942:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bc944:	9204      	str	r2, [sp, #16]
   bc946:	a906      	add	r1, sp, #24
   bc948:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bc94a:	60e3      	str	r3, [r4, #12]
   bc94c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bc950:	9205      	str	r2, [sp, #20]
   bc952:	f7ff fef9 	bl	bc748 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bc956:	4b08      	ldr	r3, [pc, #32]	; (bc978 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bc958:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bc95a:	4b08      	ldr	r3, [pc, #32]	; (bc97c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc95c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bc95e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bc960:	a806      	add	r0, sp, #24
   bc962:	f7ff fefe 	bl	bc762 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bc966:	a802      	add	r0, sp, #8
   bc968:	f7f7 fe06 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bc96c:	2200      	movs	r2, #0
   bc96e:	4629      	mov	r1, r5
   bc970:	4803      	ldr	r0, [pc, #12]	; (bc980 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bc972:	f7fd fa1d 	bl	b9db0 <application_thread_invoke>
   bc976:	e7b7      	b.n	bc8e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bc978:	000bc811 	.word	0x000bc811
   bc97c:	000bca95 	.word	0x000bca95
   bc980:	000b9fef 	.word	0x000b9fef

000bc984 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bc984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc988:	b08b      	sub	sp, #44	; 0x2c
   bc98a:	4605      	mov	r5, r0
   bc98c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bc990:	460f      	mov	r7, r1
   bc992:	4690      	mov	r8, r2
   bc994:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bc996:	f7fd fa37 	bl	b9e08 <spark_cloud_flag_connected>
   bc99a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bc99c:	4683      	mov	fp, r0
   bc99e:	bb38      	cbnz	r0, bc9f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bc9a0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bc9a4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bc9a6:	a905      	add	r1, sp, #20
   bc9a8:	4630      	mov	r0, r6
   bc9aa:	f8ad 3018 	strh.w	r3, [sp, #24]
   bc9ae:	f7ff fecb 	bl	bc748 <_ZN8particle5ErrorC1EOS0_>
   bc9b2:	2014      	movs	r0, #20
   bc9b4:	f7f7 fb6f 	bl	b4096 <_Znwj>
   bc9b8:	4604      	mov	r4, r0
   bc9ba:	b148      	cbz	r0, bc9d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bc9bc:	2302      	movs	r3, #2
   bc9be:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bc9c0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bc9c2:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bc9c6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bc9c8:	4631      	mov	r1, r6
   bc9ca:	300c      	adds	r0, #12
   bc9cc:	f7ff febc 	bl	bc748 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc9d0:	4628      	mov	r0, r5
	: __shared_count(__p)
   bc9d2:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc9d4:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bc9d8:	f7ff ff32 	bl	bc840 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bc9dc:	4630      	mov	r0, r6
   bc9de:	f7ff fec0 	bl	bc762 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bc9e2:	a805      	add	r0, sp, #20
   bc9e4:	f7ff febd 	bl	bc762 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   bc9e8:	4628      	mov	r0, r5
   bc9ea:	b00b      	add	sp, #44	; 0x2c
   bc9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bc9f0:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bc9f2:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bc9f4:	2014      	movs	r0, #20
   bc9f6:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bc9fa:	9307      	str	r3, [sp, #28]
   bc9fc:	f7f7 fb4b 	bl	b4096 <_Znwj>
   bca00:	4601      	mov	r1, r0
   bca02:	b118      	cbz	r0, bca0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bca04:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bca08:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bca0a:	7044      	strb	r4, [r0, #1]
   bca0c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bca0e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bca10:	f7ff ff16 	bl	bc840 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bca14:	4b1e      	ldr	r3, [pc, #120]	; (bca90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bca16:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bca18:	2008      	movs	r0, #8
   bca1a:	f7f7 fb3c 	bl	b4096 <_Znwj>
   bca1e:	4604      	mov	r4, r0
   bca20:	b110      	cbz	r0, bca28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bca22:	a903      	add	r1, sp, #12
   bca24:	f7ff fec7 	bl	bc7b6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bca28:	9600      	str	r6, [sp, #0]
   bca2a:	fa5f f38a 	uxtb.w	r3, sl
   bca2e:	464a      	mov	r2, r9
   bca30:	4641      	mov	r1, r8
   bca32:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bca34:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bca36:	f7fd f9ef 	bl	b9e18 <spark_send_event>
   bca3a:	b9b8      	cbnz	r0, bca6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bca3c:	9b03      	ldr	r3, [sp, #12]
   bca3e:	785b      	ldrb	r3, [r3, #1]
   bca40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bca44:	b993      	cbnz	r3, bca6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bca46:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bca4a:	a905      	add	r1, sp, #20
   bca4c:	a803      	add	r0, sp, #12
   bca4e:	9205      	str	r2, [sp, #20]
   bca50:	f8ad 3018 	strh.w	r3, [sp, #24]
   bca54:	f7ff ff18 	bl	bc888 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bca58:	a805      	add	r0, sp, #20
   bca5a:	f7ff fe82 	bl	bc762 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bca5e:	a805      	add	r0, sp, #20
   bca60:	9909      	ldr	r1, [sp, #36]	; 0x24
   bca62:	f7ff feb1 	bl	bc7c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bca66:	a806      	add	r0, sp, #24
   bca68:	f7fe f93f 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bca6c:	a903      	add	r1, sp, #12
   bca6e:	a805      	add	r0, sp, #20
   bca70:	f7ff fea1 	bl	bc7b6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bca74:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bca76:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bca78:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bca7a:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bca7c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bca7e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bca80:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bca82:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bca84:	f7fe f931 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bca88:	a804      	add	r0, sp, #16
   bca8a:	f7fe f92e 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bca8e:	e7ab      	b.n	bc9e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bca90:	000bcb11 	.word	0x000bcb11

000bca94 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bca94:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bca96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bca98:	4605      	mov	r5, r0
	switch (__op)
   bca9a:	d103      	bne.n	bcaa4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bca9c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bca9e:	6003      	str	r3, [r0, #0]
      }
   bcaa0:	2000      	movs	r0, #0
   bcaa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bcaa4:	2a02      	cmp	r2, #2
   bcaa6:	d010      	beq.n	bcaca <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bcaa8:	2a03      	cmp	r2, #3
   bcaaa:	d1f9      	bne.n	bcaa0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bcaac:	6804      	ldr	r4, [r0, #0]
   bcaae:	2c00      	cmp	r4, #0
   bcab0:	d0f6      	beq.n	bcaa0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bcab2:	f104 0010 	add.w	r0, r4, #16
   bcab6:	f7ff fe54 	bl	bc762 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bcaba:	4620      	mov	r0, r4
   bcabc:	f7f7 fd5c 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bcac0:	2118      	movs	r1, #24
   bcac2:	4620      	mov	r0, r4
   bcac4:	f7f7 faeb 	bl	b409e <_ZdlPvj>
   bcac8:	e7ea      	b.n	bcaa0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bcaca:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bcacc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bcace:	f7f7 fae2 	bl	b4096 <_Znwj>
   bcad2:	4604      	mov	r4, r0
   bcad4:	b150      	cbz	r0, bcaec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bcad6:	4631      	mov	r1, r6
   bcad8:	f7ff fec6 	bl	bc868 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bcadc:	6930      	ldr	r0, [r6, #16]
   bcade:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bcae2:	b108      	cbz	r0, bcae8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bcae4:	f002 f810 	bl	beb08 <strdup>
        type_(type) {
   bcae8:	6120      	str	r0, [r4, #16]
   bcaea:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bcaec:	602c      	str	r4, [r5, #0]
	}
   bcaee:	e7d7      	b.n	bcaa0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bcaf0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bcaf0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bcaf2:	2300      	movs	r3, #0
   bcaf4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bcaf6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bcaf8:	4604      	mov	r4, r0
   bcafa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bcafc:	b12b      	cbz	r3, bcb0a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bcafe:	2202      	movs	r2, #2
   bcb00:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bcb02:	68eb      	ldr	r3, [r5, #12]
   bcb04:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bcb06:	68ab      	ldr	r3, [r5, #8]
   bcb08:	60a3      	str	r3, [r4, #8]
    }
   bcb0a:	4620      	mov	r0, r4
   bcb0c:	bd38      	pop	{r3, r4, r5, pc}
	...

000bcb10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bcb10:	b5f0      	push	{r4, r5, r6, r7, lr}
   bcb12:	b089      	sub	sp, #36	; 0x24
   bcb14:	4604      	mov	r4, r0
   bcb16:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bcb18:	a801      	add	r0, sp, #4
   bcb1a:	4611      	mov	r1, r2
   bcb1c:	f7ff fe54 	bl	bc7c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bcb20:	b1a4      	cbz	r4, bcb4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bcb22:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bcb24:	b11d      	cbz	r5, bcb2e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bcb26:	4628      	mov	r0, r5
   bcb28:	f001 ffee 	bl	beb08 <strdup>
   bcb2c:	4605      	mov	r5, r0
   bcb2e:	a801      	add	r0, sp, #4
   bcb30:	a903      	add	r1, sp, #12
        type_(type) {
   bcb32:	9503      	str	r5, [sp, #12]
   bcb34:	f8ad 4010 	strh.w	r4, [sp, #16]
   bcb38:	f7ff fea6 	bl	bc888 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bcb3c:	a803      	add	r0, sp, #12
   bcb3e:	f7ff fe10 	bl	bc762 <_ZN8particle5ErrorD1Ev>
   bcb42:	a802      	add	r0, sp, #8
   bcb44:	f7fe f8d1 	bl	bacea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bcb48:	b009      	add	sp, #36	; 0x24
   bcb4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bcb4c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bcb4e:	2301      	movs	r3, #1
   bcb50:	e8d5 2f4f 	ldrexb	r2, [r5]
   bcb54:	2a00      	cmp	r2, #0
   bcb56:	d103      	bne.n	bcb60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bcb58:	e8c5 3f41 	strexb	r1, r3, [r5]
   bcb5c:	2900      	cmp	r1, #0
   bcb5e:	d1f7      	bne.n	bcb50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bcb60:	d1ef      	bne.n	bcb42 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bcb62:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bcb64:	f3bf 8f5b 	dmb	ish
   bcb68:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bcb6a:	1d2b      	adds	r3, r5, #4
   bcb6c:	f3bf 8f5b 	dmb	ish
   bcb70:	e853 6f00 	ldrex	r6, [r3]
   bcb74:	e843 4200 	strex	r2, r4, [r3]
   bcb78:	2a00      	cmp	r2, #0
   bcb7a:	d1f9      	bne.n	bcb70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bcb7c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bcb80:	2e00      	cmp	r6, #0
   bcb82:	d0de      	beq.n	bcb42 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bcb84:	4620      	mov	r0, r4
   bcb86:	f7fd f90b 	bl	b9da0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bcb8a:	4607      	mov	r7, r0
   bcb8c:	b160      	cbz	r0, bcba8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bcb8e:	f105 010c 	add.w	r1, r5, #12
   bcb92:	4630      	mov	r0, r6
   bcb94:	f7ff fe43 	bl	bc81e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bcb98:	4630      	mov	r0, r6
   bcb9a:	f7f7 fced 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bcb9e:	2110      	movs	r1, #16
   bcba0:	4630      	mov	r0, r6
   bcba2:	f7f7 fa7c 	bl	b409e <_ZdlPvj>
   bcba6:	e7cc      	b.n	bcb42 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bcba8:	4631      	mov	r1, r6
   bcbaa:	a803      	add	r0, sp, #12
   bcbac:	f7ff ffa0 	bl	bcaf0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bcbb0:	7b2b      	ldrb	r3, [r5, #12]
   bcbb2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bcbb6:	2010      	movs	r0, #16
   bcbb8:	f7f7 fa6d 	bl	b4096 <_Znwj>
   bcbbc:	4605      	mov	r5, r0
   bcbbe:	b1d0      	cbz	r0, bcbf6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bcbc0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bcbc2:	2014      	movs	r0, #20
   bcbc4:	f7f7 fa67 	bl	b4096 <_Znwj>
   bcbc8:	4604      	mov	r4, r0
   bcbca:	b178      	cbz	r0, bcbec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bcbcc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bcbce:	4601      	mov	r1, r0
   bcbd0:	a803      	add	r0, sp, #12
   bcbd2:	f7fe ff63 	bl	bba9c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcbd6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bcbd8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bcbda:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bcbdc:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bcbde:	9205      	str	r2, [sp, #20]
   bcbe0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bcbe2:	60e3      	str	r3, [r4, #12]
   bcbe4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bcbe8:	9206      	str	r2, [sp, #24]
   bcbea:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bcbec:	4b06      	ldr	r3, [pc, #24]	; (bcc08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bcbee:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bcbf0:	4b06      	ldr	r3, [pc, #24]	; (bcc0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bcbf2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bcbf4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bcbf6:	a803      	add	r0, sp, #12
   bcbf8:	f7f7 fcbe 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bcbfc:	2200      	movs	r2, #0
   bcbfe:	4629      	mov	r1, r5
   bcc00:	4803      	ldr	r0, [pc, #12]	; (bcc10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bcc02:	f7fd f8d5 	bl	b9db0 <application_thread_invoke>
   bcc06:	e7c7      	b.n	bcb98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bcc08:	000bc831 	.word	0x000bc831
   bcc0c:	000bcc15 	.word	0x000bcc15
   bcc10:	000b9fef 	.word	0x000b9fef

000bcc14 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bcc14:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bcc16:	b570      	push	{r4, r5, r6, lr}
   bcc18:	4604      	mov	r4, r0
	switch (__op)
   bcc1a:	d103      	bne.n	bcc24 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bcc1c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bcc1e:	6003      	str	r3, [r0, #0]
      }
   bcc20:	2000      	movs	r0, #0
   bcc22:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bcc24:	2a02      	cmp	r2, #2
   bcc26:	d00c      	beq.n	bcc42 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bcc28:	2a03      	cmp	r2, #3
   bcc2a:	d1f9      	bne.n	bcc20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bcc2c:	6804      	ldr	r4, [r0, #0]
   bcc2e:	2c00      	cmp	r4, #0
   bcc30:	d0f6      	beq.n	bcc20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bcc32:	4620      	mov	r0, r4
   bcc34:	f7f7 fca0 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bcc38:	2114      	movs	r1, #20
   bcc3a:	4620      	mov	r0, r4
   bcc3c:	f7f7 fa2f 	bl	b409e <_ZdlPvj>
   bcc40:	e7ee      	b.n	bcc20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bcc42:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bcc44:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bcc46:	f7f7 fa26 	bl	b4096 <_Znwj>
   bcc4a:	4605      	mov	r5, r0
   bcc4c:	b120      	cbz	r0, bcc58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bcc4e:	4631      	mov	r1, r6
   bcc50:	f7ff ff4e 	bl	bcaf0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bcc54:	7c33      	ldrb	r3, [r6, #16]
   bcc56:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bcc58:	6025      	str	r5, [r4, #0]
	}
   bcc5a:	e7e1      	b.n	bcc20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bcc5c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bcc5c:	2200      	movs	r2, #0
   bcc5e:	6840      	ldr	r0, [r0, #4]
   bcc60:	4611      	mov	r1, r2
   bcc62:	f7fd b931 	b.w	b9ec8 <network_listening>

000bcc66 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bcc66:	2200      	movs	r2, #0
   bcc68:	6840      	ldr	r0, [r0, #4]
   bcc6a:	4611      	mov	r1, r2
   bcc6c:	f7fd b93c 	b.w	b9ee8 <network_get_listen_timeout>

000bcc70 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bcc70:	6840      	ldr	r0, [r0, #4]
   bcc72:	2200      	movs	r2, #0
   bcc74:	f7fd b930 	b.w	b9ed8 <network_set_listen_timeout>

000bcc78 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bcc78:	6840      	ldr	r0, [r0, #4]
   bcc7a:	2200      	movs	r2, #0
   bcc7c:	f081 0101 	eor.w	r1, r1, #1
   bcc80:	f7fd b91a 	b.w	b9eb8 <network_listen>

000bcc84 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bcc84:	2300      	movs	r3, #0
   bcc86:	6840      	ldr	r0, [r0, #4]
   bcc88:	461a      	mov	r2, r3
   bcc8a:	4619      	mov	r1, r3
   bcc8c:	f7fd b90c 	b.w	b9ea8 <network_off>

000bcc90 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bcc90:	2300      	movs	r3, #0
   bcc92:	6840      	ldr	r0, [r0, #4]
   bcc94:	461a      	mov	r2, r3
   bcc96:	4619      	mov	r1, r3
   bcc98:	f7fd b8fe 	b.w	b9e98 <network_on>

000bcc9c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bcc9c:	2200      	movs	r2, #0
   bcc9e:	6840      	ldr	r0, [r0, #4]
   bcca0:	4611      	mov	r1, r2
   bcca2:	f7fd b8f1 	b.w	b9e88 <network_ready>

000bcca6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bcca6:	2200      	movs	r2, #0
   bcca8:	6840      	ldr	r0, [r0, #4]
   bccaa:	4611      	mov	r1, r2
   bccac:	f7fd b8dc 	b.w	b9e68 <network_connecting>

000bccb0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bccb0:	6840      	ldr	r0, [r0, #4]
   bccb2:	2200      	movs	r2, #0
   bccb4:	2102      	movs	r1, #2
   bccb6:	f7fd b8df 	b.w	b9e78 <network_disconnect>

000bccba <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bccba:	2300      	movs	r3, #0
   bccbc:	6840      	ldr	r0, [r0, #4]
   bccbe:	461a      	mov	r2, r3
   bccc0:	f7fd b8ca 	b.w	b9e58 <network_connect>

000bccc4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bccc4:	4b02      	ldr	r3, [pc, #8]	; (bccd0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bccc6:	2203      	movs	r2, #3
   bccc8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bccca:	4a02      	ldr	r2, [pc, #8]	; (bccd4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bcccc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bccce:	4770      	bx	lr
   bccd0:	2003e694 	.word	0x2003e694
   bccd4:	000c1e9c 	.word	0x000c1e9c

000bccd8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bccd8:	4770      	bx	lr

000bccda <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bccda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bccdc:	4606      	mov	r6, r0
   bccde:	4615      	mov	r5, r2
   bcce0:	460c      	mov	r4, r1
   bcce2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bcce4:	42bc      	cmp	r4, r7
   bcce6:	d006      	beq.n	bccf6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bcce8:	6833      	ldr	r3, [r6, #0]
   bccea:	f814 1b01 	ldrb.w	r1, [r4], #1
   bccee:	689b      	ldr	r3, [r3, #8]
   bccf0:	4630      	mov	r0, r6
   bccf2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bccf4:	e7f6      	b.n	bcce4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bccf6:	4628      	mov	r0, r5
   bccf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bccfa <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bccfa:	7c00      	ldrb	r0, [r0, #16]
   bccfc:	2200      	movs	r2, #0
   bccfe:	f7fc bf07 	b.w	b9b10 <hal_i2c_write>

000bcd02 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bcd02:	7c00      	ldrb	r0, [r0, #16]
   bcd04:	2100      	movs	r1, #0
   bcd06:	f7fc bf0b 	b.w	b9b20 <hal_i2c_available>

000bcd0a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bcd0a:	7c00      	ldrb	r0, [r0, #16]
   bcd0c:	2100      	movs	r1, #0
   bcd0e:	f7fc bf0f 	b.w	b9b30 <hal_i2c_read>

000bcd12 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bcd12:	7c00      	ldrb	r0, [r0, #16]
   bcd14:	2100      	movs	r1, #0
   bcd16:	f7fc bf13 	b.w	b9b40 <hal_i2c_peek>

000bcd1a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bcd1a:	7c00      	ldrb	r0, [r0, #16]
   bcd1c:	2100      	movs	r1, #0
   bcd1e:	f7fc bf17 	b.w	b9b50 <hal_i2c_flush>

000bcd22 <_ZN7TwoWireD0Ev>:
   bcd22:	b510      	push	{r4, lr}
   bcd24:	2114      	movs	r1, #20
   bcd26:	4604      	mov	r4, r0
   bcd28:	f7f7 f9b9 	bl	b409e <_ZdlPvj>
   bcd2c:	4620      	mov	r0, r4
   bcd2e:	bd10      	pop	{r4, pc}

000bcd30 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bcd30:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bcd32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bcd36:	4604      	mov	r4, r0
   bcd38:	4608      	mov	r0, r1
   bcd3a:	2100      	movs	r1, #0
   bcd3c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bcd40:	4b03      	ldr	r3, [pc, #12]	; (bcd50 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bcd42:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bcd44:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bcd46:	4611      	mov	r1, r2
   bcd48:	f7fc ff12 	bl	b9b70 <hal_i2c_init>
}
   bcd4c:	4620      	mov	r0, r4
   bcd4e:	bd10      	pop	{r4, pc}
   bcd50:	000c1ed8 	.word	0x000c1ed8

000bcd54 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bcd54:	7c00      	ldrb	r0, [r0, #16]
   bcd56:	2200      	movs	r2, #0
   bcd58:	f7fc beba 	b.w	b9ad0 <hal_i2c_set_speed>

000bcd5c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bcd5c:	2300      	movs	r3, #0
   bcd5e:	7c00      	ldrb	r0, [r0, #16]
   bcd60:	461a      	mov	r2, r3
   bcd62:	4619      	mov	r1, r3
   bcd64:	f7fc bebc 	b.w	b9ae0 <hal_i2c_begin>

000bcd68 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bcd68:	7c00      	ldrb	r0, [r0, #16]
   bcd6a:	2200      	movs	r2, #0
   bcd6c:	f7fc bec0 	b.w	b9af0 <hal_i2c_begin_transmission>

000bcd70 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bcd70:	7c00      	ldrb	r0, [r0, #16]
   bcd72:	2200      	movs	r2, #0
   bcd74:	f7fc bec4 	b.w	b9b00 <hal_i2c_end_transmission>

000bcd78 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bcd78:	2101      	movs	r1, #1
   bcd7a:	f7ff bff9 	b.w	bcd70 <_ZN7TwoWire15endTransmissionEh>

000bcd7e <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bcd7e:	4700      	bx	r0

000bcd80 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bcd80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bcd84:	2400      	movs	r4, #0
{
   bcd86:	461d      	mov	r5, r3
   bcd88:	460f      	mov	r7, r1
   bcd8a:	4690      	mov	r8, r2
   bcd8c:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bcd8e:	f7fc fe8f 	bl	b9ab0 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bcd92:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bcd94:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bcd98:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bcd9c:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bcda0:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bcda4:	bfa2      	ittt	ge
   bcda6:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bcdaa:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bcdae:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bcdb0:	4907      	ldr	r1, [pc, #28]	; (bcdd0 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bcdb2:	9400      	str	r4, [sp, #0]
   bcdb4:	4643      	mov	r3, r8
   bcdb6:	463a      	mov	r2, r7
   bcdb8:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bcdba:	bfa8      	it	ge
   bcdbc:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bcdc0:	f7fc fe6e 	bl	b9aa0 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bcdc4:	fab0 f080 	clz	r0, r0
   bcdc8:	0940      	lsrs	r0, r0, #5
   bcdca:	b004      	add	sp, #16
   bcdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcdd0:	000bcd7f 	.word	0x000bcd7f

000bcdd4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bcdd4:	4770      	bx	lr

000bcdd6 <_ZN9IPAddressD0Ev>:
   bcdd6:	b510      	push	{r4, lr}
   bcdd8:	2118      	movs	r1, #24
   bcdda:	4604      	mov	r4, r0
   bcddc:	f7f7 f95f 	bl	b409e <_ZdlPvj>
   bcde0:	4620      	mov	r0, r4
   bcde2:	bd10      	pop	{r4, pc}

000bcde4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bcde4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bcde6:	7d03      	ldrb	r3, [r0, #20]
   bcde8:	2b06      	cmp	r3, #6
{
   bcdea:	b08d      	sub	sp, #52	; 0x34
   bcdec:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bcdee:	f100 0704 	add.w	r7, r0, #4
   bcdf2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bcdf6:	d012      	beq.n	bce1e <_ZNK9IPAddress7printToER5Print+0x3a>
   bcdf8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bcdfc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bce00:	220a      	movs	r2, #10
   bce02:	4630      	mov	r0, r6
   bce04:	f000 f94b 	bl	bd09e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bce08:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bce0a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bce0c:	d019      	beq.n	bce42 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bce0e:	2c00      	cmp	r4, #0
   bce10:	d0f4      	beq.n	bcdfc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bce12:	212e      	movs	r1, #46	; 0x2e
   bce14:	4630      	mov	r0, r6
   bce16:	f000 f929 	bl	bd06c <_ZN5Print5printEc>
   bce1a:	4404      	add	r4, r0
   bce1c:	e7ee      	b.n	bcdfc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bce1e:	232f      	movs	r3, #47	; 0x2f
   bce20:	466a      	mov	r2, sp
   bce22:	4639      	mov	r1, r7
   bce24:	200a      	movs	r0, #10
		buf[0] = 0;
   bce26:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bce2a:	f7fc fea9 	bl	b9b80 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bce2e:	4668      	mov	r0, sp
   bce30:	f001 fe87 	bl	beb42 <strlen>
   bce34:	6833      	ldr	r3, [r6, #0]
   bce36:	4602      	mov	r2, r0
   bce38:	68db      	ldr	r3, [r3, #12]
   bce3a:	4669      	mov	r1, sp
   bce3c:	4630      	mov	r0, r6
   bce3e:	4798      	blx	r3
   bce40:	4604      	mov	r4, r0
    }
    return n;
}
   bce42:	4620      	mov	r0, r4
   bce44:	b00d      	add	sp, #52	; 0x34
   bce46:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bce48 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bce48:	b510      	push	{r4, lr}
   bce4a:	4b05      	ldr	r3, [pc, #20]	; (bce60 <_ZN9IPAddressC1Ev+0x18>)
   bce4c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bce4e:	2211      	movs	r2, #17
   bce50:	f840 3b04 	str.w	r3, [r0], #4
   bce54:	2100      	movs	r1, #0
   bce56:	f001 fdc0 	bl	be9da <memset>
}
   bce5a:	4620      	mov	r0, r4
   bce5c:	bd10      	pop	{r4, pc}
   bce5e:	bf00      	nop
   bce60:	000c1f00 	.word	0x000c1f00

000bce64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bce64:	4603      	mov	r3, r0
   bce66:	4a07      	ldr	r2, [pc, #28]	; (bce84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bce68:	b510      	push	{r4, lr}
   bce6a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bce6e:	f101 0210 	add.w	r2, r1, #16
   bce72:	f851 4b04 	ldr.w	r4, [r1], #4
   bce76:	f843 4b04 	str.w	r4, [r3], #4
   bce7a:	4291      	cmp	r1, r2
   bce7c:	d1f9      	bne.n	bce72 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bce7e:	780a      	ldrb	r2, [r1, #0]
   bce80:	701a      	strb	r2, [r3, #0]
}
   bce82:	bd10      	pop	{r4, pc}
   bce84:	000c1f00 	.word	0x000c1f00

000bce88 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bce88:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bce8a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bce8e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bce92:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bce96:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bce9a:	2304      	movs	r3, #4
   bce9c:	6041      	str	r1, [r0, #4]
   bce9e:	7503      	strb	r3, [r0, #20]
}
   bcea0:	bd10      	pop	{r4, pc}
	...

000bcea4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bcea4:	b507      	push	{r0, r1, r2, lr}
   bcea6:	4b06      	ldr	r3, [pc, #24]	; (bcec0 <_ZN9IPAddressC1EPKh+0x1c>)
   bcea8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bceaa:	78cb      	ldrb	r3, [r1, #3]
   bceac:	9300      	str	r3, [sp, #0]
   bceae:	788b      	ldrb	r3, [r1, #2]
   bceb0:	784a      	ldrb	r2, [r1, #1]
   bceb2:	7809      	ldrb	r1, [r1, #0]
   bceb4:	f7ff ffe8 	bl	bce88 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bceb8:	b003      	add	sp, #12
   bceba:	f85d fb04 	ldr.w	pc, [sp], #4
   bcebe:	bf00      	nop
   bcec0:	000c1f00 	.word	0x000c1f00

000bcec4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   bcec4:	4b01      	ldr	r3, [pc, #4]	; (bcecc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bcec6:	4a02      	ldr	r2, [pc, #8]	; (bced0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bcec8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bceca:	4770      	bx	lr
   bcecc:	2003e69c 	.word	0x2003e69c
   bced0:	000c1f0c 	.word	0x000c1f0c

000bced4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bced4:	2300      	movs	r3, #0
   bced6:	6840      	ldr	r0, [r0, #4]
   bced8:	461a      	mov	r2, r3
   bceda:	f7fc bfbd 	b.w	b9e58 <network_connect>

000bcede <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bcede:	6840      	ldr	r0, [r0, #4]
   bcee0:	2200      	movs	r2, #0
   bcee2:	2102      	movs	r1, #2
   bcee4:	f7fc bfc8 	b.w	b9e78 <network_disconnect>

000bcee8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bcee8:	2200      	movs	r2, #0
   bceea:	6840      	ldr	r0, [r0, #4]
   bceec:	4611      	mov	r1, r2
   bceee:	f7fc bfbb 	b.w	b9e68 <network_connecting>

000bcef2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bcef2:	2200      	movs	r2, #0
   bcef4:	6840      	ldr	r0, [r0, #4]
   bcef6:	4611      	mov	r1, r2
   bcef8:	f7fc bfc6 	b.w	b9e88 <network_ready>

000bcefc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bcefc:	2300      	movs	r3, #0
   bcefe:	6840      	ldr	r0, [r0, #4]
   bcf00:	461a      	mov	r2, r3
   bcf02:	4619      	mov	r1, r3
   bcf04:	f7fc bfc8 	b.w	b9e98 <network_on>

000bcf08 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bcf08:	2300      	movs	r3, #0
   bcf0a:	6840      	ldr	r0, [r0, #4]
   bcf0c:	461a      	mov	r2, r3
   bcf0e:	4619      	mov	r1, r3
   bcf10:	f7fc bfca 	b.w	b9ea8 <network_off>

000bcf14 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bcf14:	6840      	ldr	r0, [r0, #4]
   bcf16:	2100      	movs	r1, #0
   bcf18:	f7fc bfee 	b.w	b9ef8 <network_is_on>

000bcf1c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bcf1c:	6840      	ldr	r0, [r0, #4]
   bcf1e:	2100      	movs	r1, #0
   bcf20:	f7fc bff2 	b.w	b9f08 <network_is_off>

000bcf24 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bcf24:	6840      	ldr	r0, [r0, #4]
   bcf26:	2200      	movs	r2, #0
   bcf28:	f081 0101 	eor.w	r1, r1, #1
   bcf2c:	f7fc bfc4 	b.w	b9eb8 <network_listen>

000bcf30 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bcf30:	6840      	ldr	r0, [r0, #4]
   bcf32:	2200      	movs	r2, #0
   bcf34:	f7fc bfd0 	b.w	b9ed8 <network_set_listen_timeout>

000bcf38 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bcf38:	2200      	movs	r2, #0
   bcf3a:	6840      	ldr	r0, [r0, #4]
   bcf3c:	4611      	mov	r1, r2
   bcf3e:	f7fc bfd3 	b.w	b9ee8 <network_get_listen_timeout>

000bcf42 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bcf42:	2200      	movs	r2, #0
   bcf44:	6840      	ldr	r0, [r0, #4]
   bcf46:	4611      	mov	r1, r2
   bcf48:	f7fc bfbe 	b.w	b9ec8 <network_listening>

000bcf4c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bcf4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bcf50:	b095      	sub	sp, #84	; 0x54
   bcf52:	4614      	mov	r4, r2
   bcf54:	460d      	mov	r5, r1
   bcf56:	4607      	mov	r7, r0
    IPAddress addr;
   bcf58:	f7ff ff76 	bl	bce48 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bcf5c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bcf5e:	221c      	movs	r2, #28
   bcf60:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bcf62:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bcf64:	f001 fd39 	bl	be9da <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bcf68:	2340      	movs	r3, #64	; 0x40
   bcf6a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bcf6c:	4620      	mov	r0, r4
   bcf6e:	466b      	mov	r3, sp
   bcf70:	aa0c      	add	r2, sp, #48	; 0x30
   bcf72:	2100      	movs	r1, #0
   bcf74:	f7fc fe14 	bl	b9ba0 <netdb_getaddrinfo>
    if (!r) {
   bcf78:	4604      	mov	r4, r0
   bcf7a:	2800      	cmp	r0, #0
   bcf7c:	d14b      	bne.n	bd016 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bcf7e:	4602      	mov	r2, r0
   bcf80:	2101      	movs	r1, #1
   bcf82:	6868      	ldr	r0, [r5, #4]
   bcf84:	f7fc ff80 	bl	b9e88 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bcf88:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bcf8a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bcf8c:	4622      	mov	r2, r4
   bcf8e:	6868      	ldr	r0, [r5, #4]
   bcf90:	f7fc ff7a 	bl	b9e88 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bcf94:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bcf96:	4681      	mov	r9, r0
        bool ok = false;
   bcf98:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bcf9a:	2e00      	cmp	r6, #0
   bcf9c:	d03b      	beq.n	bd016 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bcf9e:	2900      	cmp	r1, #0
   bcfa0:	d139      	bne.n	bd016 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bcfa2:	6873      	ldr	r3, [r6, #4]
   bcfa4:	2b02      	cmp	r3, #2
   bcfa6:	d003      	beq.n	bcfb0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bcfa8:	2b0a      	cmp	r3, #10
   bcfaa:	d011      	beq.n	bcfd0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bcfac:	69f6      	ldr	r6, [r6, #28]
   bcfae:	e7f4      	b.n	bcf9a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bcfb0:	f1b8 0f00 	cmp.w	r8, #0
   bcfb4:	d0fa      	beq.n	bcfac <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bcfb6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bcfb8:	a806      	add	r0, sp, #24
   bcfba:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bcfbc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bcfbe:	f7ff ff71 	bl	bcea4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bcfc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bcfc4:	1d3c      	adds	r4, r7, #4
   bcfc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bcfc8:	682b      	ldr	r3, [r5, #0]
   bcfca:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bcfcc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bcfce:	e7ed      	b.n	bcfac <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bcfd0:	f1b9 0f00 	cmp.w	r9, #0
   bcfd4:	d0ea      	beq.n	bcfac <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bcfd6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bcfd8:	2210      	movs	r2, #16
   bcfda:	a801      	add	r0, sp, #4
   bcfdc:	f001 fcfd 	bl	be9da <memset>
                    a.v = 6;
   bcfe0:	2306      	movs	r3, #6
   bcfe2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bcfe6:	ad01      	add	r5, sp, #4
   bcfe8:	f104 0308 	add.w	r3, r4, #8
   bcfec:	3418      	adds	r4, #24
   bcfee:	6818      	ldr	r0, [r3, #0]
   bcff0:	6859      	ldr	r1, [r3, #4]
   bcff2:	462a      	mov	r2, r5
   bcff4:	c203      	stmia	r2!, {r0, r1}
   bcff6:	3308      	adds	r3, #8
   bcff8:	42a3      	cmp	r3, r4
   bcffa:	4615      	mov	r5, r2
   bcffc:	d1f7      	bne.n	bcfee <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bcffe:	a901      	add	r1, sp, #4
   bd000:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bd002:	ad07      	add	r5, sp, #28
   bd004:	f7ff ff2e 	bl	bce64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bd008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd00a:	1d3c      	adds	r4, r7, #4
   bd00c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd00e:	682b      	ldr	r3, [r5, #0]
   bd010:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bd012:	4649      	mov	r1, r9
   bd014:	e7ca      	b.n	bcfac <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bd016:	9800      	ldr	r0, [sp, #0]
   bd018:	f7fc fdba 	bl	b9b90 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bd01c:	4638      	mov	r0, r7
   bd01e:	b015      	add	sp, #84	; 0x54
   bd020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bd024 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bd024:	4b02      	ldr	r3, [pc, #8]	; (bd030 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bd026:	4a03      	ldr	r2, [pc, #12]	; (bd034 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bd028:	601a      	str	r2, [r3, #0]
   bd02a:	2200      	movs	r2, #0
   bd02c:	605a      	str	r2, [r3, #4]

} // spark
   bd02e:	4770      	bx	lr
   bd030:	2003e6a0 	.word	0x2003e6a0
   bd034:	000c1f18 	.word	0x000c1f18

000bd038 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bd038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd03a:	4606      	mov	r6, r0
   bd03c:	460d      	mov	r5, r1
  size_t n = 0;
   bd03e:	188f      	adds	r7, r1, r2
   bd040:	2400      	movs	r4, #0
  while (size--) {
   bd042:	42bd      	cmp	r5, r7
   bd044:	d00c      	beq.n	bd060 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bd046:	6833      	ldr	r3, [r6, #0]
   bd048:	f815 1b01 	ldrb.w	r1, [r5], #1
   bd04c:	689b      	ldr	r3, [r3, #8]
   bd04e:	4630      	mov	r0, r6
   bd050:	4798      	blx	r3
     if (chunk>=0)
   bd052:	1e03      	subs	r3, r0, #0
   bd054:	db01      	blt.n	bd05a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bd056:	441c      	add	r4, r3
  while (size--) {
   bd058:	e7f3      	b.n	bd042 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bd05a:	2c00      	cmp	r4, #0
   bd05c:	bf08      	it	eq
   bd05e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bd060:	4620      	mov	r0, r4
   bd062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bd064 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bd064:	b508      	push	{r3, lr}
  return write(str);
   bd066:	f7fa feaf 	bl	b7dc8 <_ZN5Print5writeEPKc>
}
   bd06a:	bd08      	pop	{r3, pc}

000bd06c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bd06c:	6803      	ldr	r3, [r0, #0]
   bd06e:	689b      	ldr	r3, [r3, #8]
   bd070:	4718      	bx	r3

000bd072 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bd072:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bd074:	210d      	movs	r1, #13
{
   bd076:	4605      	mov	r5, r0
  size_t n = print('\r');
   bd078:	f7ff fff8 	bl	bd06c <_ZN5Print5printEc>
  n += print('\n');
   bd07c:	210a      	movs	r1, #10
  size_t n = print('\r');
   bd07e:	4604      	mov	r4, r0
  n += print('\n');
   bd080:	4628      	mov	r0, r5
   bd082:	f7ff fff3 	bl	bd06c <_ZN5Print5printEc>
  return n;
}
   bd086:	4420      	add	r0, r4
   bd088:	bd38      	pop	{r3, r4, r5, pc}

000bd08a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   bd08a:	b538      	push	{r3, r4, r5, lr}
   bd08c:	4605      	mov	r5, r0
  return write(str);
   bd08e:	f7fa fe9b 	bl	b7dc8 <_ZN5Print5writeEPKc>
   bd092:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   bd094:	4628      	mov	r0, r5
   bd096:	f7ff ffec 	bl	bd072 <_ZN5Print7printlnEv>
  return n;
}
   bd09a:	4420      	add	r0, r4
   bd09c:	bd38      	pop	{r3, r4, r5, pc}

000bd09e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bd09e:	b530      	push	{r4, r5, lr}
   bd0a0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bd0a2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bd0a4:	2a01      	cmp	r2, #1
  *str = '\0';
   bd0a6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bd0aa:	bf98      	it	ls
   bd0ac:	220a      	movls	r2, #10
   bd0ae:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bd0b0:	460d      	mov	r5, r1
   bd0b2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bd0b6:	fb01 5312 	mls	r3, r1, r2, r5
   bd0ba:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bd0be:	2b09      	cmp	r3, #9
   bd0c0:	bf94      	ite	ls
   bd0c2:	3330      	addls	r3, #48	; 0x30
   bd0c4:	3337      	addhi	r3, #55	; 0x37
   bd0c6:	b2db      	uxtb	r3, r3
  } while(n);
   bd0c8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bd0ca:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bd0ce:	d9ef      	bls.n	bd0b0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bd0d0:	4621      	mov	r1, r4
   bd0d2:	f7fa fe79 	bl	b7dc8 <_ZN5Print5writeEPKc>
}
   bd0d6:	b00b      	add	sp, #44	; 0x2c
   bd0d8:	bd30      	pop	{r4, r5, pc}

000bd0da <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bd0da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd0de:	b086      	sub	sp, #24
   bd0e0:	af00      	add	r7, sp, #0
   bd0e2:	4605      	mov	r5, r0
   bd0e4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bd0e6:	1d38      	adds	r0, r7, #4
   bd0e8:	2114      	movs	r1, #20
{
   bd0ea:	4614      	mov	r4, r2
    va_copy(args2, args);
   bd0ec:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bd0ee:	f7fc ff43 	bl	b9f78 <vsnprintf>

    if (n<bufsize)
   bd0f2:	2813      	cmp	r0, #19
   bd0f4:	d80e      	bhi.n	bd114 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bd0f6:	1d39      	adds	r1, r7, #4
   bd0f8:	4628      	mov	r0, r5
   bd0fa:	f7fa fe65 	bl	b7dc8 <_ZN5Print5writeEPKc>
   bd0fe:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bd100:	b11e      	cbz	r6, bd10a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bd102:	4628      	mov	r0, r5
   bd104:	f7ff ffb5 	bl	bd072 <_ZN5Print7printlnEv>
   bd108:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bd10a:	4620      	mov	r0, r4
   bd10c:	3718      	adds	r7, #24
   bd10e:	46bd      	mov	sp, r7
   bd110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bd114:	f100 0308 	add.w	r3, r0, #8
   bd118:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bd11c:	46e8      	mov	r8, sp
        char bigger[n+1];
   bd11e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bd122:	4622      	mov	r2, r4
   bd124:	1c41      	adds	r1, r0, #1
   bd126:	683b      	ldr	r3, [r7, #0]
   bd128:	4668      	mov	r0, sp
   bd12a:	f7fc ff25 	bl	b9f78 <vsnprintf>
  return write(str);
   bd12e:	4669      	mov	r1, sp
   bd130:	4628      	mov	r0, r5
   bd132:	f7fa fe49 	bl	b7dc8 <_ZN5Print5writeEPKc>
   bd136:	4604      	mov	r4, r0
   bd138:	46c5      	mov	sp, r8
   bd13a:	e7e1      	b.n	bd100 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bd13c <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bd13c:	b510      	push	{r4, lr}
  if (0 == max) {
   bd13e:	4604      	mov	r4, r0
   bd140:	b128      	cbz	r0, bd14e <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bd142:	f001 fc81 	bl	bea48 <rand>
   bd146:	fb90 f3f4 	sdiv	r3, r0, r4
   bd14a:	fb03 0414 	mls	r4, r3, r4, r0
}
   bd14e:	4620      	mov	r0, r4
   bd150:	bd10      	pop	{r4, pc}
	...

000bd154 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bd154:	4b01      	ldr	r3, [pc, #4]	; (bd15c <_GLOBAL__sub_I_RGB+0x8>)
   bd156:	2200      	movs	r2, #0
   bd158:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bd15a:	4770      	bx	lr
   bd15c:	2003e6a8 	.word	0x2003e6a8

000bd160 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bd160:	2100      	movs	r1, #0
   bd162:	f7fc bd6d 	b.w	b9c40 <hal_spi_release>

000bd166 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bd166:	2100      	movs	r1, #0
   bd168:	f7fc bd62 	b.w	b9c30 <hal_spi_acquire>

000bd16c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bd16c:	b510      	push	{r4, lr}
   bd16e:	4604      	mov	r4, r0
   bd170:	4608      	mov	r0, r1
{
    _spi = spi;
   bd172:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bd174:	f7fc fd2c 	bl	b9bd0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bd178:	2300      	movs	r3, #0
   bd17a:	6063      	str	r3, [r4, #4]
}
   bd17c:	4620      	mov	r0, r4
   bd17e:	bd10      	pop	{r4, pc}

000bd180 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bd180:	b513      	push	{r0, r1, r4, lr}
   bd182:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bd184:	7800      	ldrb	r0, [r0, #0]
   bd186:	f7ff ffee 	bl	bd166 <_ZN8SPIClass4lockEv.isra.0>
   bd18a:	b958      	cbnz	r0, bd1a4 <_ZN8SPIClass5beginEv+0x24>
   bd18c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bd18e:	9001      	str	r0, [sp, #4]
   bd190:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bd194:	f7fc fd0c 	bl	b9bb0 <hal_spi_begin>
        unlock();
   bd198:	9801      	ldr	r0, [sp, #4]
    }
}
   bd19a:	b002      	add	sp, #8
   bd19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bd1a0:	f7ff bfde 	b.w	bd160 <_ZN8SPIClass6unlockEv.isra.0>
   bd1a4:	b002      	add	sp, #8
   bd1a6:	bd10      	pop	{r4, pc}

000bd1a8 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bd1a8:	7800      	ldrb	r0, [r0, #0]
   bd1aa:	f7ff bfd9 	b.w	bd160 <_ZN8SPIClass6unlockEv.isra.0>
	...

000bd1b0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bd1b0:	0840      	lsrs	r0, r0, #1
{
   bd1b2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bd1b4:	6018      	str	r0, [r3, #0]
   bd1b6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bd1b8:	6818      	ldr	r0, [r3, #0]
   bd1ba:	4288      	cmp	r0, r1
   bd1bc:	b2e5      	uxtb	r5, r4
   bd1be:	d906      	bls.n	bd1ce <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bd1c0:	3401      	adds	r4, #1
   bd1c2:	2c08      	cmp	r4, #8
   bd1c4:	d002      	beq.n	bd1cc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bd1c6:	0840      	lsrs	r0, r0, #1
   bd1c8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bd1ca:	e7f5      	b.n	bd1b8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bd1cc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bd1ce:	4b02      	ldr	r3, [pc, #8]	; (bd1d8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bd1d0:	5d5b      	ldrb	r3, [r3, r5]
   bd1d2:	7013      	strb	r3, [r2, #0]
}
   bd1d4:	bd30      	pop	{r4, r5, pc}
   bd1d6:	bf00      	nop
   bd1d8:	000c1f4c 	.word	0x000c1f4c

000bd1dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bd1dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd1e0:	4606      	mov	r6, r0
   bd1e2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bd1e4:	7800      	ldrb	r0, [r0, #0]
{
   bd1e6:	460c      	mov	r4, r1
    CHECK(lock());
   bd1e8:	f7ff ffbd 	bl	bd166 <_ZN8SPIClass4lockEv.isra.0>
   bd1ec:	2800      	cmp	r0, #0
   bd1ee:	db1b      	blt.n	bd228 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bd1f0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bd1f2:	2214      	movs	r2, #20
   bd1f4:	2100      	movs	r1, #0
   bd1f6:	a809      	add	r0, sp, #36	; 0x24
   bd1f8:	f001 fbef 	bl	be9da <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bd1fc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bd1fe:	2200      	movs	r2, #0
   bd200:	a909      	add	r1, sp, #36	; 0x24
   bd202:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bd204:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bd208:	f7fc fcf2 	bl	b9bf0 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bd20c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bd210:	b113      	cbz	r3, bd218 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bd212:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bd216:	b155      	cbz	r5, bd22e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bd218:	2700      	movs	r7, #0
   bd21a:	46b9      	mov	r9, r7
   bd21c:	46b8      	mov	r8, r7
   bd21e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bd220:	7923      	ldrb	r3, [r4, #4]
   bd222:	b15d      	cbz	r5, bd23c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bd224:	b1c3      	cbz	r3, bd258 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bd226:	2000      	movs	r0, #0
}
   bd228:	b00f      	add	sp, #60	; 0x3c
   bd22a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bd22e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bd232:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bd236:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bd23a:	e7f1      	b.n	bd220 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bd23c:	2b00      	cmp	r3, #0
   bd23e:	d135      	bne.n	bd2ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bd240:	68a3      	ldr	r3, [r4, #8]
   bd242:	4543      	cmp	r3, r8
   bd244:	d108      	bne.n	bd258 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bd246:	f88d 9020 	strb.w	r9, [sp, #32]
   bd24a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bd24e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bd252:	89a3      	ldrh	r3, [r4, #12]
   bd254:	429a      	cmp	r2, r3
   bd256:	d0e6      	beq.n	bd226 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bd258:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bd25a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bd25c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bd260:	980a      	ldr	r0, [sp, #40]	; 0x28
   bd262:	ab04      	add	r3, sp, #16
   bd264:	f10d 020f 	add.w	r2, sp, #15
   bd268:	f7ff ffa2 	bl	bd1b0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bd26c:	7921      	ldrb	r1, [r4, #4]
   bd26e:	b985      	cbnz	r5, bd292 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bd270:	b989      	cbnz	r1, bd296 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bd272:	68a3      	ldr	r3, [r4, #8]
   bd274:	4543      	cmp	r3, r8
   bd276:	d30e      	bcc.n	bd296 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bd278:	f88d 9020 	strb.w	r9, [sp, #32]
   bd27c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bd280:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bd284:	89a3      	ldrh	r3, [r4, #12]
   bd286:	429a      	cmp	r2, r3
   bd288:	d105      	bne.n	bd296 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bd28a:	9b04      	ldr	r3, [sp, #16]
   bd28c:	4543      	cmp	r3, r8
   bd28e:	d102      	bne.n	bd296 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bd290:	e7c9      	b.n	bd226 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bd292:	2900      	cmp	r1, #0
   bd294:	d1f9      	bne.n	bd28a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bd296:	2300      	movs	r3, #0
   bd298:	9301      	str	r3, [sp, #4]
   bd29a:	7b63      	ldrb	r3, [r4, #13]
   bd29c:	9300      	str	r3, [sp, #0]
   bd29e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bd2a2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bd2a4:	7830      	ldrb	r0, [r6, #0]
   bd2a6:	f7fc fcbb 	bl	b9c20 <hal_spi_set_settings>
   bd2aa:	e7bc      	b.n	bd226 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bd2ac:	e9cd 5500 	strd	r5, r5, [sp]
   bd2b0:	462b      	mov	r3, r5
   bd2b2:	462a      	mov	r2, r5
   bd2b4:	2101      	movs	r1, #1
   bd2b6:	e7f5      	b.n	bd2a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bd2b8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bd2b8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bd2ba:	7800      	ldrb	r0, [r0, #0]
   bd2bc:	f7fc fc80 	bl	b9bc0 <hal_spi_transfer>
}
   bd2c0:	b2c0      	uxtb	r0, r0
   bd2c2:	bd08      	pop	{r3, pc}

000bd2c4 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   bd2c4:	b530      	push	{r4, r5, lr}
   bd2c6:	b087      	sub	sp, #28
   bd2c8:	4604      	mov	r4, r0
   bd2ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   bd2cc:	9500      	str	r5, [sp, #0]
   bd2ce:	7800      	ldrb	r0, [r0, #0]
   bd2d0:	f7fc fc96 	bl	b9c00 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   bd2d4:	b93d      	cbnz	r5, bd2e6 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   bd2d6:	7820      	ldrb	r0, [r4, #0]
   bd2d8:	a902      	add	r1, sp, #8
   bd2da:	f7fc fc99 	bl	b9c10 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   bd2de:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bd2e2:	07db      	lsls	r3, r3, #31
   bd2e4:	d4f7      	bmi.n	bd2d6 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   bd2e6:	b007      	add	sp, #28
   bd2e8:	bd30      	pop	{r4, r5, pc}

000bd2ea <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   bd2ea:	b510      	push	{r4, lr}
   bd2ec:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bd2ee:	f7fc fb9f 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   bd2f2:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   bd2f4:	6823      	ldr	r3, [r4, #0]
   bd2f6:	4620      	mov	r0, r4
   bd2f8:	695b      	ldr	r3, [r3, #20]
   bd2fa:	4798      	blx	r3
    if (c >= 0) return c;
   bd2fc:	2800      	cmp	r0, #0
   bd2fe:	da08      	bge.n	bd312 <_ZN6Stream9timedReadEv+0x28>
   bd300:	f7fc fb96 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   bd304:	68e3      	ldr	r3, [r4, #12]
   bd306:	1ac0      	subs	r0, r0, r3
   bd308:	68a3      	ldr	r3, [r4, #8]
   bd30a:	4298      	cmp	r0, r3
   bd30c:	d3f2      	bcc.n	bd2f4 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   bd30e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   bd312:	bd10      	pop	{r4, pc}

000bd314 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   bd314:	b570      	push	{r4, r5, r6, lr}
   bd316:	460d      	mov	r5, r1
  String ret;
   bd318:	4909      	ldr	r1, [pc, #36]	; (bd340 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   bd31a:	4604      	mov	r4, r0
   bd31c:	4616      	mov	r6, r2
  String ret;
   bd31e:	f000 f85c 	bl	bd3da <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   bd322:	4628      	mov	r0, r5
   bd324:	f7ff ffe1 	bl	bd2ea <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   bd328:	2800      	cmp	r0, #0
   bd32a:	db06      	blt.n	bd33a <_ZN6Stream15readStringUntilEc+0x26>
   bd32c:	4286      	cmp	r6, r0
   bd32e:	d004      	beq.n	bd33a <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   bd330:	b2c1      	uxtb	r1, r0
   bd332:	4620      	mov	r0, r4
   bd334:	f000 f8d0 	bl	bd4d8 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   bd338:	e7f3      	b.n	bd322 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   bd33a:	4620      	mov	r0, r4
   bd33c:	bd70      	pop	{r4, r5, r6, pc}
   bd33e:	bf00      	nop
   bd340:	000c1067 	.word	0x000c1067

000bd344 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bd344:	b510      	push	{r4, lr}
   bd346:	4604      	mov	r4, r0
{
	free(buffer);
   bd348:	6800      	ldr	r0, [r0, #0]
   bd34a:	f7fc fded 	bl	b9f28 <free>
}
   bd34e:	4620      	mov	r0, r4
   bd350:	bd10      	pop	{r4, pc}

000bd352 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bd352:	b510      	push	{r4, lr}
   bd354:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bd356:	6800      	ldr	r0, [r0, #0]
   bd358:	b108      	cbz	r0, bd35e <_ZN6String10invalidateEv+0xc>
   bd35a:	f7fc fde5 	bl	b9f28 <free>
	buffer = NULL;
   bd35e:	2300      	movs	r3, #0
	capacity = len = 0;
   bd360:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bd364:	6023      	str	r3, [r4, #0]
}
   bd366:	bd10      	pop	{r4, pc}

000bd368 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bd368:	b538      	push	{r3, r4, r5, lr}
   bd36a:	4604      	mov	r4, r0
   bd36c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bd36e:	6800      	ldr	r0, [r0, #0]
   bd370:	3101      	adds	r1, #1
   bd372:	f7fc fde1 	bl	b9f38 <realloc>
	if (newbuffer) {
   bd376:	b110      	cbz	r0, bd37e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bd378:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bd37c:	2001      	movs	r0, #1
	}
	return 0;
}
   bd37e:	bd38      	pop	{r3, r4, r5, pc}

000bd380 <_ZN6String7reserveEj>:
{
   bd380:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bd382:	6803      	ldr	r3, [r0, #0]
{
   bd384:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bd386:	b123      	cbz	r3, bd392 <_ZN6String7reserveEj+0x12>
   bd388:	6843      	ldr	r3, [r0, #4]
   bd38a:	428b      	cmp	r3, r1
   bd38c:	d301      	bcc.n	bd392 <_ZN6String7reserveEj+0x12>
   bd38e:	2001      	movs	r0, #1
}
   bd390:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bd392:	4620      	mov	r0, r4
   bd394:	f7ff ffe8 	bl	bd368 <_ZN6String12changeBufferEj>
   bd398:	2800      	cmp	r0, #0
   bd39a:	d0f9      	beq.n	bd390 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bd39c:	68a3      	ldr	r3, [r4, #8]
   bd39e:	2b00      	cmp	r3, #0
   bd3a0:	d1f5      	bne.n	bd38e <_ZN6String7reserveEj+0xe>
   bd3a2:	6822      	ldr	r2, [r4, #0]
   bd3a4:	7013      	strb	r3, [r2, #0]
   bd3a6:	e7f2      	b.n	bd38e <_ZN6String7reserveEj+0xe>

000bd3a8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bd3a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd3aa:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bd3ac:	4611      	mov	r1, r2
   bd3ae:	9201      	str	r2, [sp, #4]
{
   bd3b0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bd3b2:	f7ff ffe5 	bl	bd380 <_ZN6String7reserveEj>
   bd3b6:	9a01      	ldr	r2, [sp, #4]
   bd3b8:	b928      	cbnz	r0, bd3c6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bd3ba:	4620      	mov	r0, r4
   bd3bc:	f7ff ffc9 	bl	bd352 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bd3c0:	4620      	mov	r0, r4
   bd3c2:	b003      	add	sp, #12
   bd3c4:	bd30      	pop	{r4, r5, pc}
	len = length;
   bd3c6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bd3c8:	4629      	mov	r1, r5
   bd3ca:	6820      	ldr	r0, [r4, #0]
   bd3cc:	f001 fadd 	bl	be98a <memcpy>
	buffer[len] = 0;
   bd3d0:	6822      	ldr	r2, [r4, #0]
   bd3d2:	68a3      	ldr	r3, [r4, #8]
   bd3d4:	2100      	movs	r1, #0
   bd3d6:	54d1      	strb	r1, [r2, r3]
	return *this;
   bd3d8:	e7f2      	b.n	bd3c0 <_ZN6String4copyEPKcj+0x18>

000bd3da <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bd3da:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bd3dc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bd3de:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bd3e2:	4604      	mov	r4, r0
	len = 0;
   bd3e4:	6083      	str	r3, [r0, #8]
	flags = 0;
   bd3e6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bd3e8:	b141      	cbz	r1, bd3fc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bd3ea:	4608      	mov	r0, r1
   bd3ec:	9101      	str	r1, [sp, #4]
   bd3ee:	f001 fba8 	bl	beb42 <strlen>
   bd3f2:	9901      	ldr	r1, [sp, #4]
   bd3f4:	4602      	mov	r2, r0
   bd3f6:	4620      	mov	r0, r4
   bd3f8:	f7ff ffd6 	bl	bd3a8 <_ZN6String4copyEPKcj>
}
   bd3fc:	4620      	mov	r0, r4
   bd3fe:	b002      	add	sp, #8
   bd400:	bd10      	pop	{r4, pc}

000bd402 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bd402:	b538      	push	{r3, r4, r5, lr}
   bd404:	4605      	mov	r5, r0
	if (buffer) {
   bd406:	6800      	ldr	r0, [r0, #0]
{
   bd408:	460c      	mov	r4, r1
	if (buffer) {
   bd40a:	b168      	cbz	r0, bd428 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bd40c:	686a      	ldr	r2, [r5, #4]
   bd40e:	688b      	ldr	r3, [r1, #8]
   bd410:	429a      	cmp	r2, r3
   bd412:	d307      	bcc.n	bd424 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bd414:	6809      	ldr	r1, [r1, #0]
   bd416:	f001 fb6e 	bl	beaf6 <strcpy>
			len = rhs.len;
   bd41a:	68a3      	ldr	r3, [r4, #8]
   bd41c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bd41e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bd420:	60a3      	str	r3, [r4, #8]
}
   bd422:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bd424:	f7fc fd80 	bl	b9f28 <free>
	buffer = rhs.buffer;
   bd428:	6823      	ldr	r3, [r4, #0]
   bd42a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bd42c:	6863      	ldr	r3, [r4, #4]
   bd42e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bd430:	68a3      	ldr	r3, [r4, #8]
   bd432:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bd434:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bd436:	e9c4 3300 	strd	r3, r3, [r4]
   bd43a:	e7f1      	b.n	bd420 <_ZN6String4moveERS_+0x1e>

000bd43c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bd43c:	b510      	push	{r4, lr}
	buffer = NULL;
   bd43e:	2300      	movs	r3, #0
	capacity = 0;
   bd440:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bd444:	4604      	mov	r4, r0
	len = 0;
   bd446:	6083      	str	r3, [r0, #8]
	flags = 0;
   bd448:	7303      	strb	r3, [r0, #12]
	move(rval);
   bd44a:	f7ff ffda 	bl	bd402 <_ZN6String4moveERS_>
}
   bd44e:	4620      	mov	r0, r4
   bd450:	bd10      	pop	{r4, pc}

000bd452 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bd452:	4288      	cmp	r0, r1
{
   bd454:	b510      	push	{r4, lr}
   bd456:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bd458:	d005      	beq.n	bd466 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bd45a:	680b      	ldr	r3, [r1, #0]
   bd45c:	b12b      	cbz	r3, bd46a <_ZN6StringaSERKS_+0x18>
   bd45e:	688a      	ldr	r2, [r1, #8]
   bd460:	4619      	mov	r1, r3
   bd462:	f7ff ffa1 	bl	bd3a8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bd466:	4620      	mov	r0, r4
   bd468:	bd10      	pop	{r4, pc}
	else invalidate();
   bd46a:	f7ff ff72 	bl	bd352 <_ZN6String10invalidateEv>
   bd46e:	e7fa      	b.n	bd466 <_ZN6StringaSERKS_+0x14>

000bd470 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bd470:	b510      	push	{r4, lr}
	buffer = NULL;
   bd472:	2300      	movs	r3, #0
String::String(const String &value)
   bd474:	4604      	mov	r4, r0
	capacity = 0;
   bd476:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bd47a:	6083      	str	r3, [r0, #8]
	flags = 0;
   bd47c:	7303      	strb	r3, [r0, #12]
	*this = value;
   bd47e:	f7ff ffe8 	bl	bd452 <_ZN6StringaSERKS_>
}
   bd482:	4620      	mov	r0, r4
   bd484:	bd10      	pop	{r4, pc}

000bd486 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bd486:	b513      	push	{r0, r1, r4, lr}
   bd488:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bd48a:	b159      	cbz	r1, bd4a4 <_ZN6StringaSEPKc+0x1e>
   bd48c:	4608      	mov	r0, r1
   bd48e:	9101      	str	r1, [sp, #4]
   bd490:	f001 fb57 	bl	beb42 <strlen>
   bd494:	9901      	ldr	r1, [sp, #4]
   bd496:	4602      	mov	r2, r0
   bd498:	4620      	mov	r0, r4
   bd49a:	f7ff ff85 	bl	bd3a8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bd49e:	4620      	mov	r0, r4
   bd4a0:	b002      	add	sp, #8
   bd4a2:	bd10      	pop	{r4, pc}
	else invalidate();
   bd4a4:	f7ff ff55 	bl	bd352 <_ZN6String10invalidateEv>
   bd4a8:	e7f9      	b.n	bd49e <_ZN6StringaSEPKc+0x18>

000bd4aa <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bd4aa:	b570      	push	{r4, r5, r6, lr}
   bd4ac:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bd4ae:	460e      	mov	r6, r1
   bd4b0:	b909      	cbnz	r1, bd4b6 <_ZN6String6concatEPKcj+0xc>
   bd4b2:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bd4b4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bd4b6:	b16a      	cbz	r2, bd4d4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bd4b8:	6884      	ldr	r4, [r0, #8]
   bd4ba:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bd4bc:	4621      	mov	r1, r4
   bd4be:	f7ff ff5f 	bl	bd380 <_ZN6String7reserveEj>
   bd4c2:	2800      	cmp	r0, #0
   bd4c4:	d0f5      	beq.n	bd4b2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bd4c6:	6828      	ldr	r0, [r5, #0]
   bd4c8:	68ab      	ldr	r3, [r5, #8]
   bd4ca:	4631      	mov	r1, r6
   bd4cc:	4418      	add	r0, r3
   bd4ce:	f001 fb12 	bl	beaf6 <strcpy>
	len = newlen;
   bd4d2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bd4d4:	2001      	movs	r0, #1
   bd4d6:	e7ed      	b.n	bd4b4 <_ZN6String6concatEPKcj+0xa>

000bd4d8 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   bd4d8:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   bd4da:	2300      	movs	r3, #0
	buf[0] = c;
   bd4dc:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   bd4e0:	2201      	movs	r2, #1
   bd4e2:	a901      	add	r1, sp, #4
	buf[1] = 0;
   bd4e4:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   bd4e8:	f7ff ffdf 	bl	bd4aa <_ZN6String6concatEPKcj>
}
   bd4ec:	b003      	add	sp, #12
   bd4ee:	f85d fb04 	ldr.w	pc, [sp], #4

000bd4f2 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   bd4f2:	6802      	ldr	r2, [r0, #0]
{
   bd4f4:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   bd4f6:	6809      	ldr	r1, [r1, #0]
   bd4f8:	b162      	cbz	r2, bd514 <_ZNK6String9compareToERKS_+0x22>
   bd4fa:	b941      	cbnz	r1, bd50e <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   bd4fc:	6880      	ldr	r0, [r0, #8]
   bd4fe:	b160      	cbz	r0, bd51a <_ZNK6String9compareToERKS_+0x28>
   bd500:	7810      	ldrb	r0, [r2, #0]
   bd502:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   bd504:	6898      	ldr	r0, [r3, #8]
   bd506:	b140      	cbz	r0, bd51a <_ZNK6String9compareToERKS_+0x28>
   bd508:	7809      	ldrb	r1, [r1, #0]
   bd50a:	4248      	negs	r0, r1
   bd50c:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   bd50e:	4610      	mov	r0, r2
   bd510:	f001 bae7 	b.w	beae2 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   bd514:	2900      	cmp	r1, #0
   bd516:	d1f5      	bne.n	bd504 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   bd518:	4608      	mov	r0, r1
}
   bd51a:	4770      	bx	lr

000bd51c <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   bd51c:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   bd51e:	6882      	ldr	r2, [r0, #8]
   bd520:	688b      	ldr	r3, [r1, #8]
   bd522:	429a      	cmp	r2, r3
   bd524:	d105      	bne.n	bd532 <_ZNK6String6equalsERKS_+0x16>
   bd526:	f7ff ffe4 	bl	bd4f2 <_ZNK6String9compareToERKS_>
   bd52a:	fab0 f080 	clz	r0, r0
   bd52e:	0940      	lsrs	r0, r0, #5
}
   bd530:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   bd532:	2000      	movs	r0, #0
   bd534:	e7fc      	b.n	bd530 <_ZNK6String6equalsERKS_+0x14>

000bd536 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   bd536:	6883      	ldr	r3, [r0, #8]
   bd538:	428b      	cmp	r3, r1
   bd53a:	d903      	bls.n	bd544 <_ZNK6StringixEj+0xe>
   bd53c:	6800      	ldr	r0, [r0, #0]
   bd53e:	b110      	cbz	r0, bd546 <_ZNK6StringixEj+0x10>
	return buffer[index];
   bd540:	5c40      	ldrb	r0, [r0, r1]
   bd542:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   bd544:	2000      	movs	r0, #0
}
   bd546:	4770      	bx	lr

000bd548 <_ZNK6String6charAtEj>:
	return operator[](loc);
   bd548:	f7ff bff5 	b.w	bd536 <_ZNK6StringixEj>

000bd54c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bd54c:	4b05      	ldr	r3, [pc, #20]	; (bd564 <_GLOBAL__sub_I_System+0x18>)
   bd54e:	2202      	movs	r2, #2
   bd550:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   bd552:	4b05      	ldr	r3, [pc, #20]	; (bd568 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bd554:	4a05      	ldr	r2, [pc, #20]	; (bd56c <_GLOBAL__sub_I_System+0x20>)
   bd556:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bd558:	2000      	movs	r0, #0
   bd55a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bd55e:	f7fc bc0f 	b.w	b9d80 <set_system_mode>
   bd562:	bf00      	nop
   bd564:	2003e6c4 	.word	0x2003e6c4
   bd568:	2003e6b8 	.word	0x2003e6b8
   bd56c:	ffff0000 	.word	0xffff0000

000bd570 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bd570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bd574:	4a15      	ldr	r2, [pc, #84]	; (bd5cc <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bd576:	f8df 8060 	ldr.w	r8, [pc, #96]	; bd5d8 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bd57a:	e9d2 6300 	ldrd	r6, r3, [r2]
   bd57e:	1980      	adds	r0, r0, r6
   bd580:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bd584:	4b12      	ldr	r3, [pc, #72]	; (bd5d0 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bd586:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bd58a:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bd58e:	1986      	adds	r6, r0, r6
   bd590:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bd594:	42bb      	cmp	r3, r7
   bd596:	bf08      	it	eq
   bd598:	42b2      	cmpeq	r2, r6
{
   bd59a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bd59c:	d013      	beq.n	bd5c6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bd59e:	a903      	add	r1, sp, #12
   bd5a0:	4668      	mov	r0, sp
   bd5a2:	e9cd 6700 	strd	r6, r7, [sp]
   bd5a6:	f7fc fd17 	bl	b9fd8 <localtime_r>
	calendar_time.tm_year += 1900;
   bd5aa:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd5ac:	4d09      	ldr	r5, [pc, #36]	; (bd5d4 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bd5ae:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd5b2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bd5b4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd5b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bd5b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bd5ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bd5bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bd5be:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd5c2:	6823      	ldr	r3, [r4, #0]
   bd5c4:	602b      	str	r3, [r5, #0]
    }
}
   bd5c6:	b00c      	add	sp, #48	; 0x30
   bd5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd5cc:	2003e6f8 	.word	0x2003e6f8
   bd5d0:	2003e6f0 	.word	0x2003e6f0
   bd5d4:	2003e6cc 	.word	0x2003e6cc
   bd5d8:	2003e700 	.word	0x2003e700

000bd5dc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   bd5dc:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bd5de:	2000      	movs	r0, #0
   bd5e0:	f7fc fc2a 	bl	b9e38 <spark_sync_time_pending>
   bd5e4:	b128      	cbz	r0, bd5f2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bd5e6:	f7fc fc0f 	bl	b9e08 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bd5ea:	f080 0001 	eor.w	r0, r0, #1
   bd5ee:	b2c0      	uxtb	r0, r0
    }
   bd5f0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bd5f2:	2001      	movs	r0, #1
   bd5f4:	e7fc      	b.n	bd5f0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bd5f8 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   bd5f8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bd5fa:	f7ff ffb9 	bl	bd570 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   bd5fe:	4b02      	ldr	r3, [pc, #8]	; (bd608 <_ZN9TimeClass5monthEx+0x10>)
   bd600:	6918      	ldr	r0, [r3, #16]
}
   bd602:	3001      	adds	r0, #1
   bd604:	bd08      	pop	{r3, pc}
   bd606:	bf00      	nop
   bd608:	2003e6cc 	.word	0x2003e6cc

000bd60c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   bd60c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bd60e:	2000      	movs	r0, #0
   bd610:	f7fc fa16 	bl	b9a40 <hal_rtc_time_is_valid>
    if (rtcstate)
   bd614:	4604      	mov	r4, r0
   bd616:	b9a0      	cbnz	r0, bd642 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bd618:	f7fc fbaa 	bl	b9d70 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bd61c:	2801      	cmp	r0, #1
   bd61e:	d110      	bne.n	bd642 <_ZN9TimeClass7isValidEv+0x36>
   bd620:	4620      	mov	r0, r4
   bd622:	f7fc fbcd 	bl	b9dc0 <system_thread_get_state>
   bd626:	b960      	cbnz	r0, bd642 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bd628:	f7ff ffd8 	bl	bd5dc <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bd62c:	b910      	cbnz	r0, bd634 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bd62e:	f7fc fbe3 	bl	b9df8 <spark_process>
        while (_while() && !_condition()) {
   bd632:	e7f9      	b.n	bd628 <_ZN9TimeClass7isValidEv+0x1c>
   bd634:	f7ff ffd2 	bl	bd5dc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bd638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bd63c:	2000      	movs	r0, #0
   bd63e:	f7fc b9ff 	b.w	b9a40 <hal_rtc_time_is_valid>
}
   bd642:	4620      	mov	r0, r4
   bd644:	bd10      	pop	{r4, pc}

000bd646 <_ZN9TimeClass3nowEv>:
{
   bd646:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bd648:	f7ff ffe0 	bl	bd60c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bd64c:	2210      	movs	r2, #16
   bd64e:	2100      	movs	r1, #0
   bd650:	4668      	mov	r0, sp
   bd652:	f001 f9c2 	bl	be9da <memset>
    hal_rtc_get_time(&tv, nullptr);
   bd656:	2100      	movs	r1, #0
   bd658:	4668      	mov	r0, sp
   bd65a:	f7fc f9f9 	bl	b9a50 <hal_rtc_get_time>
}
   bd65e:	9800      	ldr	r0, [sp, #0]
   bd660:	b005      	add	sp, #20
   bd662:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bd668 <_ZN9TimeClass4hourEv>:
{
   bd668:	b508      	push	{r3, lr}
	return hour(now());
   bd66a:	f7ff ffec 	bl	bd646 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bd66e:	17c1      	asrs	r1, r0, #31
   bd670:	f7ff ff7e 	bl	bd570 <_ZL22Refresh_UnixTime_Cachex>
}
   bd674:	4b01      	ldr	r3, [pc, #4]	; (bd67c <_ZN9TimeClass4hourEv+0x14>)
   bd676:	6898      	ldr	r0, [r3, #8]
   bd678:	bd08      	pop	{r3, pc}
   bd67a:	bf00      	nop
   bd67c:	2003e6cc 	.word	0x2003e6cc

000bd680 <_ZN9TimeClass6minuteEv>:
{
   bd680:	b508      	push	{r3, lr}
	return minute(now());
   bd682:	f7ff ffe0 	bl	bd646 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bd686:	17c1      	asrs	r1, r0, #31
   bd688:	f7ff ff72 	bl	bd570 <_ZL22Refresh_UnixTime_Cachex>
}
   bd68c:	4b01      	ldr	r3, [pc, #4]	; (bd694 <_ZN9TimeClass6minuteEv+0x14>)
   bd68e:	6858      	ldr	r0, [r3, #4]
   bd690:	bd08      	pop	{r3, pc}
   bd692:	bf00      	nop
   bd694:	2003e6cc 	.word	0x2003e6cc

000bd698 <_ZN9TimeClass6secondEv>:
{
   bd698:	b508      	push	{r3, lr}
	return second(now());
   bd69a:	f7ff ffd4 	bl	bd646 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bd69e:	17c1      	asrs	r1, r0, #31
   bd6a0:	f7ff ff66 	bl	bd570 <_ZL22Refresh_UnixTime_Cachex>
}
   bd6a4:	4b01      	ldr	r3, [pc, #4]	; (bd6ac <_ZN9TimeClass6secondEv+0x14>)
   bd6a6:	6818      	ldr	r0, [r3, #0]
   bd6a8:	bd08      	pop	{r3, pc}
   bd6aa:	bf00      	nop
   bd6ac:	2003e6cc 	.word	0x2003e6cc

000bd6b0 <_ZN9TimeClass3dayEv>:
{
   bd6b0:	b508      	push	{r3, lr}
	return day(now());
   bd6b2:	f7ff ffc8 	bl	bd646 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bd6b6:	17c1      	asrs	r1, r0, #31
   bd6b8:	f7ff ff5a 	bl	bd570 <_ZL22Refresh_UnixTime_Cachex>
}
   bd6bc:	4b01      	ldr	r3, [pc, #4]	; (bd6c4 <_ZN9TimeClass3dayEv+0x14>)
   bd6be:	68d8      	ldr	r0, [r3, #12]
   bd6c0:	bd08      	pop	{r3, pc}
   bd6c2:	bf00      	nop
   bd6c4:	2003e6cc 	.word	0x2003e6cc

000bd6c8 <_ZN9TimeClass5monthEv>:
{
   bd6c8:	b508      	push	{r3, lr}
	return month(now());
   bd6ca:	f7ff ffbc 	bl	bd646 <_ZN9TimeClass3nowEv>
}
   bd6ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   bd6d2:	17c1      	asrs	r1, r0, #31
   bd6d4:	f7ff bf90 	b.w	bd5f8 <_ZN9TimeClass5monthEx>

000bd6d8 <_ZN9TimeClass4yearEv>:
{
   bd6d8:	b508      	push	{r3, lr}
	return year(now());
   bd6da:	f7ff ffb4 	bl	bd646 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bd6de:	17c1      	asrs	r1, r0, #31
   bd6e0:	f7ff ff46 	bl	bd570 <_ZL22Refresh_UnixTime_Cachex>
}
   bd6e4:	4b01      	ldr	r3, [pc, #4]	; (bd6ec <_ZN9TimeClass4yearEv+0x14>)
   bd6e6:	6958      	ldr	r0, [r3, #20]
   bd6e8:	bd08      	pop	{r3, pc}
   bd6ea:	bf00      	nop
   bd6ec:	2003e6cc 	.word	0x2003e6cc

000bd6f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bd6f0:	4b02      	ldr	r3, [pc, #8]	; (bd6fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bd6f2:	681a      	ldr	r2, [r3, #0]
   bd6f4:	4b02      	ldr	r3, [pc, #8]	; (bd700 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bd6f6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bd6f8:	4770      	bx	lr
   bd6fa:	bf00      	nop
   bd6fc:	2003da94 	.word	0x2003da94
   bd700:	2003e6c8 	.word	0x2003e6c8

000bd704 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bd704:	4770      	bx	lr

000bd706 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bd706:	7441      	strb	r1, [r0, #17]
}
   bd708:	4770      	bx	lr

000bd70a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bd70a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bd70c:	7c00      	ldrb	r0, [r0, #16]
   bd70e:	f7fc facf 	bl	b9cb0 <hal_usart_available_data_for_write>
}
   bd712:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bd716:	bd08      	pop	{r3, pc}

000bd718 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bd718:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bd71a:	7c00      	ldrb	r0, [r0, #16]
   bd71c:	f7fc faa0 	bl	b9c60 <hal_usart_available>
}
   bd720:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bd724:	bd08      	pop	{r3, pc}

000bd726 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bd726:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bd728:	7c00      	ldrb	r0, [r0, #16]
   bd72a:	f7fc faa9 	bl	b9c80 <hal_usart_peek>
}
   bd72e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bd732:	bd08      	pop	{r3, pc}

000bd734 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bd734:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bd736:	7c00      	ldrb	r0, [r0, #16]
   bd738:	f7fc fa9a 	bl	b9c70 <hal_usart_read>
}
   bd73c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bd740:	bd08      	pop	{r3, pc}

000bd742 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bd742:	7c00      	ldrb	r0, [r0, #16]
   bd744:	f7fc baa4 	b.w	b9c90 <hal_usart_flush>

000bd748 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bd748:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bd74a:	7c45      	ldrb	r5, [r0, #17]
{
   bd74c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bd74e:	b12d      	cbz	r5, bd75c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bd750:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bd752:	b003      	add	sp, #12
   bd754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bd758:	f7fc ba7a 	b.w	b9c50 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bd75c:	7c00      	ldrb	r0, [r0, #16]
   bd75e:	9101      	str	r1, [sp, #4]
   bd760:	f7fc faa6 	bl	b9cb0 <hal_usart_available_data_for_write>
   bd764:	2800      	cmp	r0, #0
   bd766:	9901      	ldr	r1, [sp, #4]
   bd768:	dcf2      	bgt.n	bd750 <_ZN11USARTSerial5writeEh+0x8>
}
   bd76a:	4628      	mov	r0, r5
   bd76c:	b003      	add	sp, #12
   bd76e:	bd30      	pop	{r4, r5, pc}

000bd770 <_ZN11USARTSerialD0Ev>:
   bd770:	b510      	push	{r4, lr}
   bd772:	2114      	movs	r1, #20
   bd774:	4604      	mov	r4, r0
   bd776:	f7f6 fc92 	bl	b409e <_ZdlPvj>
   bd77a:	4620      	mov	r0, r4
   bd77c:	bd10      	pop	{r4, pc}
	...

000bd780 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bd780:	b510      	push	{r4, lr}
   bd782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bd786:	4604      	mov	r4, r0
   bd788:	4608      	mov	r0, r1
   bd78a:	4611      	mov	r1, r2
   bd78c:	2200      	movs	r2, #0
   bd78e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bd792:	4b04      	ldr	r3, [pc, #16]	; (bd7a4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bd794:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bd796:	2301      	movs	r3, #1
  _serial = serial;
   bd798:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bd79a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bd79c:	f7fc fa98 	bl	b9cd0 <hal_usart_init_ex>
}
   bd7a0:	4620      	mov	r0, r4
   bd7a2:	bd10      	pop	{r4, pc}
   bd7a4:	000c1f78 	.word	0x000c1f78

000bd7a8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bd7a8:	7c00      	ldrb	r0, [r0, #16]
   bd7aa:	2300      	movs	r3, #0
   bd7ac:	f7fc ba88 	b.w	b9cc0 <hal_usart_begin_config>

000bd7b0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bd7b0:	2200      	movs	r2, #0
   bd7b2:	f7ff bff9 	b.w	bd7a8 <_ZN11USARTSerial5beginEmm>

000bd7b6 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bd7b6:	7441      	strb	r1, [r0, #17]
}
   bd7b8:	4770      	bx	lr

000bd7ba <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bd7ba:	4770      	bx	lr

000bd7bc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bd7bc:	4770      	bx	lr

000bd7be <_ZN9USBSerial4readEv>:
{
   bd7be:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bd7c0:	2100      	movs	r1, #0
   bd7c2:	7c00      	ldrb	r0, [r0, #16]
   bd7c4:	f7fc faac 	bl	b9d20 <HAL_USB_USART_Receive_Data>
}
   bd7c8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bd7cc:	bd08      	pop	{r3, pc}

000bd7ce <_ZN9USBSerial4peekEv>:
{
   bd7ce:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bd7d0:	2101      	movs	r1, #1
   bd7d2:	7c00      	ldrb	r0, [r0, #16]
   bd7d4:	f7fc faa4 	bl	b9d20 <HAL_USB_USART_Receive_Data>
}
   bd7d8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bd7dc:	bd08      	pop	{r3, pc}

000bd7de <_ZN9USBSerial17availableForWriteEv>:
{
   bd7de:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bd7e0:	7c00      	ldrb	r0, [r0, #16]
   bd7e2:	f7fc fa95 	bl	b9d10 <HAL_USB_USART_Available_Data_For_Write>
}
   bd7e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bd7ea:	bd08      	pop	{r3, pc}

000bd7ec <_ZN9USBSerial9availableEv>:
{
   bd7ec:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bd7ee:	7c00      	ldrb	r0, [r0, #16]
   bd7f0:	f7fc fa86 	bl	b9d00 <HAL_USB_USART_Available_Data>
}
   bd7f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bd7f8:	bd08      	pop	{r3, pc}

000bd7fa <_ZN9USBSerial5writeEh>:
{
   bd7fa:	b513      	push	{r0, r1, r4, lr}
   bd7fc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bd7fe:	7c00      	ldrb	r0, [r0, #16]
{
   bd800:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bd802:	f7fc fa85 	bl	b9d10 <HAL_USB_USART_Available_Data_For_Write>
   bd806:	2800      	cmp	r0, #0
   bd808:	9901      	ldr	r1, [sp, #4]
   bd80a:	dc01      	bgt.n	bd810 <_ZN9USBSerial5writeEh+0x16>
   bd80c:	7c60      	ldrb	r0, [r4, #17]
   bd80e:	b120      	cbz	r0, bd81a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bd810:	7c20      	ldrb	r0, [r4, #16]
   bd812:	f7fc fa8d 	bl	b9d30 <HAL_USB_USART_Send_Data>
   bd816:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bd81a:	b002      	add	sp, #8
   bd81c:	bd10      	pop	{r4, pc}

000bd81e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bd81e:	7c00      	ldrb	r0, [r0, #16]
   bd820:	f7fc ba8e 	b.w	b9d40 <HAL_USB_USART_Flush_Data>

000bd824 <_ZN9USBSerialD0Ev>:
   bd824:	b510      	push	{r4, lr}
   bd826:	2114      	movs	r1, #20
   bd828:	4604      	mov	r4, r0
   bd82a:	f7f6 fc38 	bl	b409e <_ZdlPvj>
   bd82e:	4620      	mov	r0, r4
   bd830:	bd10      	pop	{r4, pc}
	...

000bd834 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bd834:	b510      	push	{r4, lr}
   bd836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bd83a:	4604      	mov	r4, r0
   bd83c:	4608      	mov	r0, r1
   bd83e:	2100      	movs	r1, #0
   bd840:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bd844:	4b04      	ldr	r3, [pc, #16]	; (bd858 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bd846:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bd848:	2301      	movs	r3, #1
  _serial = serial;
   bd84a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bd84c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bd84e:	4611      	mov	r1, r2
   bd850:	f7fc fa46 	bl	b9ce0 <HAL_USB_USART_Init>
}
   bd854:	4620      	mov	r0, r4
   bd856:	bd10      	pop	{r4, pc}
   bd858:	000c1fa8 	.word	0x000c1fa8

000bd85c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bd85c:	7c00      	ldrb	r0, [r0, #16]
   bd85e:	2200      	movs	r2, #0
   bd860:	f7fc ba46 	b.w	b9cf0 <HAL_USB_USART_Begin>

000bd864 <_Z19acquireSerialBufferv>:
{
   bd864:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bd866:	2214      	movs	r2, #20
{
   bd868:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bd86a:	2100      	movs	r1, #0
   bd86c:	f001 f8b5 	bl	be9da <memset>
}
   bd870:	4620      	mov	r0, r4
   bd872:	bd10      	pop	{r4, pc}

000bd874 <_Z16_fetch_usbserialv>:
{
   bd874:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bd876:	4c0f      	ldr	r4, [pc, #60]	; (bd8b4 <_Z16_fetch_usbserialv+0x40>)
{
   bd878:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bd87a:	a803      	add	r0, sp, #12
   bd87c:	f7ff fff2 	bl	bd864 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bd880:	7821      	ldrb	r1, [r4, #0]
   bd882:	f3bf 8f5b 	dmb	ish
   bd886:	f011 0101 	ands.w	r1, r1, #1
   bd88a:	d10f      	bne.n	bd8ac <_Z16_fetch_usbserialv+0x38>
   bd88c:	4620      	mov	r0, r4
   bd88e:	9101      	str	r1, [sp, #4]
   bd890:	f7f6 fc14 	bl	b40bc <__cxa_guard_acquire>
   bd894:	9901      	ldr	r1, [sp, #4]
   bd896:	b148      	cbz	r0, bd8ac <_Z16_fetch_usbserialv+0x38>
   bd898:	aa03      	add	r2, sp, #12
   bd89a:	4807      	ldr	r0, [pc, #28]	; (bd8b8 <_Z16_fetch_usbserialv+0x44>)
   bd89c:	f7ff ffca 	bl	bd834 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bd8a0:	4620      	mov	r0, r4
   bd8a2:	f7f6 fc10 	bl	b40c6 <__cxa_guard_release>
   bd8a6:	4805      	ldr	r0, [pc, #20]	; (bd8bc <_Z16_fetch_usbserialv+0x48>)
   bd8a8:	f001 f852 	bl	be950 <atexit>
	return _usbserial;
}
   bd8ac:	4802      	ldr	r0, [pc, #8]	; (bd8b8 <_Z16_fetch_usbserialv+0x44>)
   bd8ae:	b008      	add	sp, #32
   bd8b0:	bd10      	pop	{r4, pc}
   bd8b2:	bf00      	nop
   bd8b4:	2003e708 	.word	0x2003e708
   bd8b8:	2003e70c 	.word	0x2003e70c
   bd8bc:	000bd7bb 	.word	0x000bd7bb

000bd8c0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bd8c0:	4b01      	ldr	r3, [pc, #4]	; (bd8c8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bd8c2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bd8c4:	4770      	bx	lr
   bd8c6:	bf00      	nop
   bd8c8:	2003da98 	.word	0x2003da98

000bd8cc <serialEventRun>:
{
   bd8cc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bd8ce:	4b0b      	ldr	r3, [pc, #44]	; (bd8fc <serialEventRun+0x30>)
   bd8d0:	b143      	cbz	r3, bd8e4 <serialEventRun+0x18>
   bd8d2:	f7ff ffcf 	bl	bd874 <_Z16_fetch_usbserialv>
   bd8d6:	6803      	ldr	r3, [r0, #0]
   bd8d8:	691b      	ldr	r3, [r3, #16]
   bd8da:	4798      	blx	r3
   bd8dc:	2800      	cmp	r0, #0
   bd8de:	dd01      	ble.n	bd8e4 <serialEventRun+0x18>
        serialEvent();
   bd8e0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bd8e4:	4b06      	ldr	r3, [pc, #24]	; (bd900 <serialEventRun+0x34>)
   bd8e6:	b143      	cbz	r3, bd8fa <serialEventRun+0x2e>
   bd8e8:	f000 f95c 	bl	bdba4 <_Z22__fetch_global_Serial1v>
   bd8ec:	6803      	ldr	r3, [r0, #0]
   bd8ee:	691b      	ldr	r3, [r3, #16]
   bd8f0:	4798      	blx	r3
   bd8f2:	2800      	cmp	r0, #0
   bd8f4:	dd01      	ble.n	bd8fa <serialEventRun+0x2e>
        serialEvent1();
   bd8f6:	f3af 8000 	nop.w
}
   bd8fa:	bd08      	pop	{r3, pc}
	...

000bd904 <_post_loop>:
{
   bd904:	b508      	push	{r3, lr}
	serialEventRun();
   bd906:	f7ff ffe1 	bl	bd8cc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bd90a:	f7fc f891 	bl	b9a30 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bd90e:	4b01      	ldr	r3, [pc, #4]	; (bd914 <_post_loop+0x10>)
   bd910:	6018      	str	r0, [r3, #0]
}
   bd912:	bd08      	pop	{r3, pc}
   bd914:	2003e728 	.word	0x2003e728

000bd918 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bd918:	4805      	ldr	r0, [pc, #20]	; (bd930 <_Z33system_initialize_user_backup_ramv+0x18>)
   bd91a:	4a06      	ldr	r2, [pc, #24]	; (bd934 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bd91c:	4906      	ldr	r1, [pc, #24]	; (bd938 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bd91e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bd920:	1a12      	subs	r2, r2, r0
   bd922:	f001 f832 	bl	be98a <memcpy>
    __backup_sram_signature = signature;
   bd926:	4b05      	ldr	r3, [pc, #20]	; (bd93c <_Z33system_initialize_user_backup_ramv+0x24>)
   bd928:	4a05      	ldr	r2, [pc, #20]	; (bd940 <_Z33system_initialize_user_backup_ramv+0x28>)
   bd92a:	601a      	str	r2, [r3, #0]
}
   bd92c:	bd08      	pop	{r3, pc}
   bd92e:	bf00      	nop
   bd930:	2003f400 	.word	0x2003f400
   bd934:	2003f404 	.word	0x2003f404
   bd938:	000c2534 	.word	0x000c2534
   bd93c:	2003f400 	.word	0x2003f400
   bd940:	9a271c1e 	.word	0x9a271c1e

000bd944 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bd944:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bd946:	2300      	movs	r3, #0
   bd948:	9300      	str	r3, [sp, #0]
   bd94a:	461a      	mov	r2, r3
   bd94c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bd950:	f7fc fa48 	bl	b9de4 <system_ctrl_set_result>
}
   bd954:	b003      	add	sp, #12
   bd956:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bd95c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bd95c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bd95e:	8843      	ldrh	r3, [r0, #2]
   bd960:	2b0a      	cmp	r3, #10
   bd962:	d008      	beq.n	bd976 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bd964:	2b50      	cmp	r3, #80	; 0x50
   bd966:	d10b      	bne.n	bd980 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bd968:	4b09      	ldr	r3, [pc, #36]	; (bd990 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bd96a:	681b      	ldr	r3, [r3, #0]
   bd96c:	b14b      	cbz	r3, bd982 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bd96e:	b003      	add	sp, #12
   bd970:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bd974:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bd976:	f7ff ffe5 	bl	bd944 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bd97a:	b003      	add	sp, #12
   bd97c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bd980:	2300      	movs	r3, #0
   bd982:	9300      	str	r3, [sp, #0]
   bd984:	461a      	mov	r2, r3
   bd986:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bd98a:	f7fc fa2b 	bl	b9de4 <system_ctrl_set_result>
}
   bd98e:	e7f4      	b.n	bd97a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bd990:	2003e724 	.word	0x2003e724

000bd994 <module_user_init_hook>:
{
   bd994:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bd996:	4812      	ldr	r0, [pc, #72]	; (bd9e0 <module_user_init_hook+0x4c>)
   bd998:	2100      	movs	r1, #0
   bd99a:	f7fc fb15 	bl	b9fc8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bd99e:	4b11      	ldr	r3, [pc, #68]	; (bd9e4 <module_user_init_hook+0x50>)
   bd9a0:	681a      	ldr	r2, [r3, #0]
   bd9a2:	4b11      	ldr	r3, [pc, #68]	; (bd9e8 <module_user_init_hook+0x54>)
   bd9a4:	429a      	cmp	r2, r3
   bd9a6:	4b11      	ldr	r3, [pc, #68]	; (bd9ec <module_user_init_hook+0x58>)
   bd9a8:	bf0c      	ite	eq
   bd9aa:	2201      	moveq	r2, #1
   bd9ac:	2200      	movne	r2, #0
   bd9ae:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bd9b0:	d001      	beq.n	bd9b6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bd9b2:	f7ff ffb1 	bl	bd918 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bd9b6:	f7fc f823 	bl	b9a00 <HAL_RNG_GetRandomNumber>
   bd9ba:	4604      	mov	r4, r0
    srand(seed);
   bd9bc:	f001 f816 	bl	be9ec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bd9c0:	4b0b      	ldr	r3, [pc, #44]	; (bd9f0 <module_user_init_hook+0x5c>)
   bd9c2:	b113      	cbz	r3, bd9ca <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bd9c4:	4620      	mov	r0, r4
   bd9c6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bd9ca:	2100      	movs	r1, #0
   bd9cc:	4808      	ldr	r0, [pc, #32]	; (bd9f0 <module_user_init_hook+0x5c>)
   bd9ce:	f7fc fa3b 	bl	b9e48 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bd9d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bd9d6:	4807      	ldr	r0, [pc, #28]	; (bd9f4 <module_user_init_hook+0x60>)
   bd9d8:	2100      	movs	r1, #0
   bd9da:	f7fc b9f9 	b.w	b9dd0 <system_ctrl_set_app_request_handler>
   bd9de:	bf00      	nop
   bd9e0:	000bd8c1 	.word	0x000bd8c1
   bd9e4:	2003f400 	.word	0x2003f400
   bd9e8:	9a271c1e 	.word	0x9a271c1e
   bd9ec:	2003e720 	.word	0x2003e720
   bd9f0:	00000000 	.word	0x00000000
   bd9f4:	000bd95d 	.word	0x000bd95d

000bd9f8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bd9f8:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   bd9fa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bd9fc:	d902      	bls.n	bda04 <pinAvailable+0xc>
    return false;
   bd9fe:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bda00:	b002      	add	sp, #8
   bda02:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bda04:	f1a0 030b 	sub.w	r3, r0, #11
   bda08:	2b02      	cmp	r3, #2
   bda0a:	d81a      	bhi.n	bda42 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bda0c:	4c17      	ldr	r4, [pc, #92]	; (bda6c <pinAvailable+0x74>)
   bda0e:	7821      	ldrb	r1, [r4, #0]
   bda10:	f3bf 8f5b 	dmb	ish
   bda14:	f011 0101 	ands.w	r1, r1, #1
   bda18:	d10b      	bne.n	bda32 <pinAvailable+0x3a>
   bda1a:	4620      	mov	r0, r4
   bda1c:	9101      	str	r1, [sp, #4]
   bda1e:	f7f6 fb4d 	bl	b40bc <__cxa_guard_acquire>
   bda22:	9901      	ldr	r1, [sp, #4]
   bda24:	b128      	cbz	r0, bda32 <pinAvailable+0x3a>
   bda26:	4812      	ldr	r0, [pc, #72]	; (bda70 <pinAvailable+0x78>)
   bda28:	f7ff fba0 	bl	bd16c <_ZN8SPIClassC1E19hal_spi_interface_t>
   bda2c:	4620      	mov	r0, r4
   bda2e:	f7f6 fb4a 	bl	b40c6 <__cxa_guard_release>
   bda32:	4b0f      	ldr	r3, [pc, #60]	; (bda70 <pinAvailable+0x78>)
   bda34:	7818      	ldrb	r0, [r3, #0]
   bda36:	f7fc f8d3 	bl	b9be0 <hal_spi_is_enabled>
   bda3a:	2800      	cmp	r0, #0
   bda3c:	d1df      	bne.n	bd9fe <pinAvailable+0x6>
  return true; // 'pin' is available
   bda3e:	2001      	movs	r0, #1
   bda40:	e7de      	b.n	bda00 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bda42:	2801      	cmp	r0, #1
   bda44:	d809      	bhi.n	bda5a <pinAvailable+0x62>
   bda46:	f000 f86d 	bl	bdb24 <_Z19__fetch_global_Wirev>
   bda4a:	2100      	movs	r1, #0
   bda4c:	7c00      	ldrb	r0, [r0, #16]
   bda4e:	f7fc f887 	bl	b9b60 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bda52:	f080 0001 	eor.w	r0, r0, #1
   bda56:	b2c0      	uxtb	r0, r0
   bda58:	e7d2      	b.n	bda00 <pinAvailable+0x8>
   bda5a:	3809      	subs	r0, #9
   bda5c:	2801      	cmp	r0, #1
   bda5e:	d8ee      	bhi.n	bda3e <pinAvailable+0x46>
   bda60:	f000 f8a0 	bl	bdba4 <_Z22__fetch_global_Serial1v>
   bda64:	7c00      	ldrb	r0, [r0, #16]
   bda66:	f7fc f91b 	bl	b9ca0 <hal_usart_is_enabled>
   bda6a:	e7f2      	b.n	bda52 <pinAvailable+0x5a>
   bda6c:	2003e64c 	.word	0x2003e64c
   bda70:	2003e650 	.word	0x2003e650

000bda74 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bda74:	2825      	cmp	r0, #37	; 0x25
{
   bda76:	b538      	push	{r3, r4, r5, lr}
   bda78:	4604      	mov	r4, r0
   bda7a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bda7c:	d80a      	bhi.n	bda94 <pinMode+0x20>
   bda7e:	29ff      	cmp	r1, #255	; 0xff
   bda80:	d008      	beq.n	bda94 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bda82:	f7ff ffb9 	bl	bd9f8 <pinAvailable>
   bda86:	b128      	cbz	r0, bda94 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bda88:	4629      	mov	r1, r5
   bda8a:	4620      	mov	r0, r4
}
   bda8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bda90:	f7fb bfee 	b.w	b9a70 <HAL_Pin_Mode>
}
   bda94:	bd38      	pop	{r3, r4, r5, pc}

000bda96 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bda96:	b538      	push	{r3, r4, r5, lr}
   bda98:	4604      	mov	r4, r0
   bda9a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bda9c:	f7fb fff0 	bl	b9a80 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bdaa0:	28ff      	cmp	r0, #255	; 0xff
   bdaa2:	d010      	beq.n	bdac6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bdaa4:	2806      	cmp	r0, #6
   bdaa6:	d804      	bhi.n	bdab2 <digitalWrite+0x1c>
   bdaa8:	234d      	movs	r3, #77	; 0x4d
   bdaaa:	fa23 f000 	lsr.w	r0, r3, r0
   bdaae:	07c3      	lsls	r3, r0, #31
   bdab0:	d409      	bmi.n	bdac6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bdab2:	4620      	mov	r0, r4
   bdab4:	f7ff ffa0 	bl	bd9f8 <pinAvailable>
   bdab8:	b128      	cbz	r0, bdac6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bdaba:	4629      	mov	r1, r5
   bdabc:	4620      	mov	r0, r4
}
   bdabe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bdac2:	f7fb bfe5 	b.w	b9a90 <HAL_GPIO_Write>
}
   bdac6:	bd38      	pop	{r3, r4, r5, pc}

000bdac8 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bdac8:	280d      	cmp	r0, #13
{
   bdaca:	b510      	push	{r4, lr}
   bdacc:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bdace:	bf9c      	itt	ls
   bdad0:	340e      	addls	r4, #14
   bdad2:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bdad4:	4620      	mov	r0, r4
   bdad6:	f7ff ff8f 	bl	bd9f8 <pinAvailable>
   bdada:	b150      	cbz	r0, bdaf2 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bdadc:	2103      	movs	r1, #3
   bdade:	4620      	mov	r0, r4
   bdae0:	f7fb ffbe 	bl	b9a60 <HAL_Validate_Pin_Function>
   bdae4:	2803      	cmp	r0, #3
   bdae6:	d104      	bne.n	bdaf2 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bdae8:	4620      	mov	r0, r4
}
   bdaea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bdaee:	f7fb bfe7 	b.w	b9ac0 <hal_adc_read>
}
   bdaf2:	2000      	movs	r0, #0
   bdaf4:	bd10      	pop	{r4, pc}

000bdaf6 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bdaf6:	4770      	bx	lr

000bdaf8 <_Z17acquireWireBufferv>:
{
   bdaf8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bdafa:	2520      	movs	r5, #32
   bdafc:	2314      	movs	r3, #20
{
   bdafe:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bdb00:	6003      	str	r3, [r0, #0]
   bdb02:	6085      	str	r5, [r0, #8]
   bdb04:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bdb06:	4906      	ldr	r1, [pc, #24]	; (bdb20 <_Z17acquireWireBufferv+0x28>)
   bdb08:	4628      	mov	r0, r5
   bdb0a:	f000 f86f 	bl	bdbec <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bdb0e:	4904      	ldr	r1, [pc, #16]	; (bdb20 <_Z17acquireWireBufferv+0x28>)
	};
   bdb10:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bdb12:	4628      	mov	r0, r5
   bdb14:	f000 f86a 	bl	bdbec <_ZnajRKSt9nothrow_t>
	};
   bdb18:	60e0      	str	r0, [r4, #12]
}
   bdb1a:	4620      	mov	r0, r4
   bdb1c:	bd38      	pop	{r3, r4, r5, pc}
   bdb1e:	bf00      	nop
   bdb20:	000c1fd0 	.word	0x000c1fd0

000bdb24 <_Z19__fetch_global_Wirev>:
{
   bdb24:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bdb26:	4d0e      	ldr	r5, [pc, #56]	; (bdb60 <_Z19__fetch_global_Wirev+0x3c>)
   bdb28:	7829      	ldrb	r1, [r5, #0]
   bdb2a:	f3bf 8f5b 	dmb	ish
   bdb2e:	f011 0401 	ands.w	r4, r1, #1
{
   bdb32:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bdb34:	d111      	bne.n	bdb5a <_Z19__fetch_global_Wirev+0x36>
   bdb36:	4628      	mov	r0, r5
   bdb38:	f7f6 fac0 	bl	b40bc <__cxa_guard_acquire>
   bdb3c:	b168      	cbz	r0, bdb5a <_Z19__fetch_global_Wirev+0x36>
   bdb3e:	a801      	add	r0, sp, #4
   bdb40:	f7ff ffda 	bl	bdaf8 <_Z17acquireWireBufferv>
   bdb44:	aa01      	add	r2, sp, #4
   bdb46:	4621      	mov	r1, r4
   bdb48:	4806      	ldr	r0, [pc, #24]	; (bdb64 <_Z19__fetch_global_Wirev+0x40>)
   bdb4a:	f7ff f8f1 	bl	bcd30 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bdb4e:	4628      	mov	r0, r5
   bdb50:	f7f6 fab9 	bl	b40c6 <__cxa_guard_release>
   bdb54:	4804      	ldr	r0, [pc, #16]	; (bdb68 <_Z19__fetch_global_Wirev+0x44>)
   bdb56:	f000 fefb 	bl	be950 <atexit>
	return wire;
}
   bdb5a:	4802      	ldr	r0, [pc, #8]	; (bdb64 <_Z19__fetch_global_Wirev+0x40>)
   bdb5c:	b007      	add	sp, #28
   bdb5e:	bd30      	pop	{r4, r5, pc}
   bdb60:	2003e72c 	.word	0x2003e72c
   bdb64:	2003e730 	.word	0x2003e730
   bdb68:	000bdaf7 	.word	0x000bdaf7

000bdb6c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bdb6c:	4770      	bx	lr
	...

000bdb70 <_Z20acquireSerial1Bufferv>:
{
   bdb70:	b538      	push	{r3, r4, r5, lr}
   bdb72:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bdb74:	2514      	movs	r5, #20
   bdb76:	462a      	mov	r2, r5
   bdb78:	2100      	movs	r1, #0
   bdb7a:	f000 ff2e 	bl	be9da <memset>
   bdb7e:	8025      	strh	r5, [r4, #0]
   bdb80:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bdb82:	4907      	ldr	r1, [pc, #28]	; (bdba0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bdb84:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bdb86:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bdb88:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bdb8a:	f000 f82f 	bl	bdbec <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bdb8e:	4904      	ldr	r1, [pc, #16]	; (bdba0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bdb90:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bdb92:	4628      	mov	r0, r5
   bdb94:	f000 f82a 	bl	bdbec <_ZnajRKSt9nothrow_t>
    };
   bdb98:	60e0      	str	r0, [r4, #12]
}
   bdb9a:	4620      	mov	r0, r4
   bdb9c:	bd38      	pop	{r3, r4, r5, pc}
   bdb9e:	bf00      	nop
   bdba0:	000c1fd0 	.word	0x000c1fd0

000bdba4 <_Z22__fetch_global_Serial1v>:
{
   bdba4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bdba6:	4d0e      	ldr	r5, [pc, #56]	; (bdbe0 <_Z22__fetch_global_Serial1v+0x3c>)
   bdba8:	7829      	ldrb	r1, [r5, #0]
   bdbaa:	f3bf 8f5b 	dmb	ish
   bdbae:	f011 0401 	ands.w	r4, r1, #1
{
   bdbb2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bdbb4:	d111      	bne.n	bdbda <_Z22__fetch_global_Serial1v+0x36>
   bdbb6:	4628      	mov	r0, r5
   bdbb8:	f7f6 fa80 	bl	b40bc <__cxa_guard_acquire>
   bdbbc:	b168      	cbz	r0, bdbda <_Z22__fetch_global_Serial1v+0x36>
   bdbbe:	a801      	add	r0, sp, #4
   bdbc0:	f7ff ffd6 	bl	bdb70 <_Z20acquireSerial1Bufferv>
   bdbc4:	aa01      	add	r2, sp, #4
   bdbc6:	4621      	mov	r1, r4
   bdbc8:	4806      	ldr	r0, [pc, #24]	; (bdbe4 <_Z22__fetch_global_Serial1v+0x40>)
   bdbca:	f7ff fdd9 	bl	bd780 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bdbce:	4628      	mov	r0, r5
   bdbd0:	f7f6 fa79 	bl	b40c6 <__cxa_guard_release>
   bdbd4:	4804      	ldr	r0, [pc, #16]	; (bdbe8 <_Z22__fetch_global_Serial1v+0x44>)
   bdbd6:	f000 febb 	bl	be950 <atexit>
    return serial1;
}
   bdbda:	4802      	ldr	r0, [pc, #8]	; (bdbe4 <_Z22__fetch_global_Serial1v+0x40>)
   bdbdc:	b007      	add	sp, #28
   bdbde:	bd30      	pop	{r4, r5, pc}
   bdbe0:	2003e744 	.word	0x2003e744
   bdbe4:	2003e748 	.word	0x2003e748
   bdbe8:	000bdb6d 	.word	0x000bdb6d

000bdbec <_ZnajRKSt9nothrow_t>:
   bdbec:	f7f6 ba55 	b.w	b409a <_Znaj>

000bdbf0 <_ZSt17__throw_bad_allocv>:
   bdbf0:	b508      	push	{r3, lr}
   bdbf2:	f7fc f9c9 	bl	b9f88 <abort>

000bdbf6 <_ZSt19__throw_logic_errorPKc>:
   bdbf6:	b508      	push	{r3, lr}
   bdbf8:	f7fc f9c6 	bl	b9f88 <abort>

000bdbfc <_ZSt20__throw_length_errorPKc>:
   bdbfc:	b508      	push	{r3, lr}
   bdbfe:	f7fc f9c3 	bl	b9f88 <abort>

000bdc02 <_ZSt24__throw_out_of_range_fmtPKcz>:
   bdc02:	b40f      	push	{r0, r1, r2, r3}
   bdc04:	b580      	push	{r7, lr}
   bdc06:	b084      	sub	sp, #16
   bdc08:	af00      	add	r7, sp, #0
   bdc0a:	f107 0418 	add.w	r4, r7, #24
   bdc0e:	f854 2b04 	ldr.w	r2, [r4], #4
   bdc12:	607a      	str	r2, [r7, #4]
   bdc14:	4610      	mov	r0, r2
   bdc16:	f000 ff94 	bl	beb42 <strlen>
   bdc1a:	f200 2307 	addw	r3, r0, #519	; 0x207
   bdc1e:	f023 0307 	bic.w	r3, r3, #7
   bdc22:	ebad 0d03 	sub.w	sp, sp, r3
   bdc26:	f500 7100 	add.w	r1, r0, #512	; 0x200
   bdc2a:	687a      	ldr	r2, [r7, #4]
   bdc2c:	60fc      	str	r4, [r7, #12]
   bdc2e:	4623      	mov	r3, r4
   bdc30:	4668      	mov	r0, sp
   bdc32:	f000 f85d 	bl	bdcf0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   bdc36:	f7fc f9a7 	bl	b9f88 <abort>

000bdc3a <_ZSt25__throw_bad_function_callv>:
   bdc3a:	b508      	push	{r3, lr}
   bdc3c:	f7fc f9a4 	bl	b9f88 <abort>

000bdc40 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bdc40:	4901      	ldr	r1, [pc, #4]	; (bdc48 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bdc42:	f000 b98b 	b.w	bdf5c <_ZNKSt9type_infoeqERKS_>
   bdc46:	bf00      	nop
   bdc48:	000c1fec 	.word	0x000c1fec

000bdc4c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   bdc4c:	b580      	push	{r7, lr}
   bdc4e:	b09c      	sub	sp, #112	; 0x70
   bdc50:	4606      	mov	r6, r0
   bdc52:	af00      	add	r7, sp, #0
   bdc54:	460c      	mov	r4, r1
   bdc56:	1ba4      	subs	r4, r4, r6
   bdc58:	490e      	ldr	r1, [pc, #56]	; (bdc94 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   bdc5a:	2269      	movs	r2, #105	; 0x69
   bdc5c:	1d38      	adds	r0, r7, #4
   bdc5e:	f000 fe94 	bl	be98a <memcpy>
   bdc62:	f104 0370 	add.w	r3, r4, #112	; 0x70
   bdc66:	f023 0307 	bic.w	r3, r3, #7
   bdc6a:	ebad 0d03 	sub.w	sp, sp, r3
   bdc6e:	466d      	mov	r5, sp
   bdc70:	2268      	movs	r2, #104	; 0x68
   bdc72:	1d39      	adds	r1, r7, #4
   bdc74:	4628      	mov	r0, r5
   bdc76:	f000 fe88 	bl	be98a <memcpy>
   bdc7a:	4622      	mov	r2, r4
   bdc7c:	4631      	mov	r1, r6
   bdc7e:	f105 0068 	add.w	r0, r5, #104	; 0x68
   bdc82:	442c      	add	r4, r5
   bdc84:	f000 fe81 	bl	be98a <memcpy>
   bdc88:	2300      	movs	r3, #0
   bdc8a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   bdc8e:	4628      	mov	r0, r5
   bdc90:	f7ff ffb1 	bl	bdbf6 <_ZSt19__throw_logic_errorPKc>
   bdc94:	000c1ff4 	.word	0x000c1ff4

000bdc98 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   bdc98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bdc9c:	af00      	add	r7, sp, #0
   bdc9e:	b084      	sub	sp, #16
   bdca0:	466d      	mov	r5, sp
   bdca2:	f105 040c 	add.w	r4, r5, #12
   bdca6:	f8df 8044 	ldr.w	r8, [pc, #68]	; bdcec <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   bdcaa:	4623      	mov	r3, r4
   bdcac:	f04f 0c0a 	mov.w	ip, #10
   bdcb0:	fbb2 f6fc 	udiv	r6, r2, ip
   bdcb4:	fb0c 2e16 	mls	lr, ip, r6, r2
   bdcb8:	f818 e00e 	ldrb.w	lr, [r8, lr]
   bdcbc:	f803 ed01 	strb.w	lr, [r3, #-1]!
   bdcc0:	4696      	mov	lr, r2
   bdcc2:	f1be 0f09 	cmp.w	lr, #9
   bdcc6:	4632      	mov	r2, r6
   bdcc8:	d8f2      	bhi.n	bdcb0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   bdcca:	1ae4      	subs	r4, r4, r3
   bdccc:	428c      	cmp	r4, r1
   bdcce:	d809      	bhi.n	bdce4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   bdcd0:	f1c4 030c 	rsb	r3, r4, #12
   bdcd4:	4622      	mov	r2, r4
   bdcd6:	18e9      	adds	r1, r5, r3
   bdcd8:	f000 fe57 	bl	be98a <memcpy>
   bdcdc:	4620      	mov	r0, r4
   bdcde:	46bd      	mov	sp, r7
   bdce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bdce4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bdce8:	e7f8      	b.n	bdcdc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   bdcea:	bf00      	nop
   bdcec:	000c205d 	.word	0x000c205d

000bdcf0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   bdcf0:	3901      	subs	r1, #1
   bdcf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bdcf6:	4607      	mov	r7, r0
   bdcf8:	4615      	mov	r5, r2
   bdcfa:	eb00 0801 	add.w	r8, r0, r1
   bdcfe:	4604      	mov	r4, r0
   bdd00:	782a      	ldrb	r2, [r5, #0]
   bdd02:	b392      	cbz	r2, bdd6a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   bdd04:	4544      	cmp	r4, r8
   bdd06:	d22a      	bcs.n	bdd5e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bdd08:	2a25      	cmp	r2, #37	; 0x25
   bdd0a:	d107      	bne.n	bdd1c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bdd0c:	786a      	ldrb	r2, [r5, #1]
   bdd0e:	2a73      	cmp	r2, #115	; 0x73
   bdd10:	d009      	beq.n	bdd26 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   bdd12:	2a7a      	cmp	r2, #122	; 0x7a
   bdd14:	d012      	beq.n	bdd3c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   bdd16:	2a25      	cmp	r2, #37	; 0x25
   bdd18:	d100      	bne.n	bdd1c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bdd1a:	3501      	adds	r5, #1
   bdd1c:	f815 2b01 	ldrb.w	r2, [r5], #1
   bdd20:	f804 2b01 	strb.w	r2, [r4], #1
   bdd24:	e7ec      	b.n	bdd00 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bdd26:	f853 2b04 	ldr.w	r2, [r3], #4
   bdd2a:	3a01      	subs	r2, #1
   bdd2c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   bdd30:	b1c9      	cbz	r1, bdd66 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   bdd32:	4544      	cmp	r4, r8
   bdd34:	d013      	beq.n	bdd5e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bdd36:	f804 1b01 	strb.w	r1, [r4], #1
   bdd3a:	e7f7      	b.n	bdd2c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   bdd3c:	78aa      	ldrb	r2, [r5, #2]
   bdd3e:	2a75      	cmp	r2, #117	; 0x75
   bdd40:	d1ec      	bne.n	bdd1c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bdd42:	461e      	mov	r6, r3
   bdd44:	eba8 0104 	sub.w	r1, r8, r4
   bdd48:	f856 2b04 	ldr.w	r2, [r6], #4
   bdd4c:	4620      	mov	r0, r4
   bdd4e:	f7ff ffa3 	bl	bdc98 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   bdd52:	2800      	cmp	r0, #0
   bdd54:	dd03      	ble.n	bdd5e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bdd56:	4404      	add	r4, r0
   bdd58:	3503      	adds	r5, #3
   bdd5a:	4633      	mov	r3, r6
   bdd5c:	e7d0      	b.n	bdd00 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bdd5e:	4621      	mov	r1, r4
   bdd60:	4638      	mov	r0, r7
   bdd62:	f7ff ff73 	bl	bdc4c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   bdd66:	3502      	adds	r5, #2
   bdd68:	e7ca      	b.n	bdd00 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bdd6a:	7022      	strb	r2, [r4, #0]
   bdd6c:	1be0      	subs	r0, r4, r7
   bdd6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bdd72 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bdd72:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bdd74:	2400      	movs	r4, #0
   bdd76:	2310      	movs	r3, #16
   bdd78:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bdd7c:	6803      	ldr	r3, [r0, #0]
   bdd7e:	4615      	mov	r5, r2
   bdd80:	699e      	ldr	r6, [r3, #24]
   bdd82:	6812      	ldr	r2, [r2, #0]
   bdd84:	466b      	mov	r3, sp
   bdd86:	e9cd 4400 	strd	r4, r4, [sp]
   bdd8a:	47b0      	blx	r6
   bdd8c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bdd90:	f003 0306 	and.w	r3, r3, #6
   bdd94:	2b06      	cmp	r3, #6
   bdd96:	bf03      	ittte	eq
   bdd98:	9b00      	ldreq	r3, [sp, #0]
   bdd9a:	602b      	streq	r3, [r5, #0]
   bdd9c:	2001      	moveq	r0, #1
   bdd9e:	4620      	movne	r0, r4
   bdda0:	b004      	add	sp, #16
   bdda2:	bd70      	pop	{r4, r5, r6, pc}

000bdda4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bdda4:	9800      	ldr	r0, [sp, #0]
   bdda6:	4290      	cmp	r0, r2
   bdda8:	bf14      	ite	ne
   bddaa:	2001      	movne	r0, #1
   bddac:	2006      	moveq	r0, #6
   bddae:	4770      	bx	lr

000bddb0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bddb0:	b510      	push	{r4, lr}
   bddb2:	4b03      	ldr	r3, [pc, #12]	; (bddc0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bddb4:	6003      	str	r3, [r0, #0]
   bddb6:	4604      	mov	r4, r0
   bddb8:	f000 f8cd 	bl	bdf56 <_ZNSt9type_infoD1Ev>
   bddbc:	4620      	mov	r0, r4
   bddbe:	bd10      	pop	{r4, pc}
   bddc0:	000c20a0 	.word	0x000c20a0

000bddc4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bddc4:	b510      	push	{r4, lr}
   bddc6:	4604      	mov	r4, r0
   bddc8:	f7ff fff2 	bl	bddb0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bddcc:	4620      	mov	r0, r4
   bddce:	2108      	movs	r1, #8
   bddd0:	f7f6 f965 	bl	b409e <_ZdlPvj>
   bddd4:	4620      	mov	r0, r4
   bddd6:	bd10      	pop	{r4, pc}

000bddd8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bddd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bdddc:	461f      	mov	r7, r3
   bddde:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bdde2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bdde6:	4598      	cmp	r8, r3
   bdde8:	4606      	mov	r6, r0
   bddea:	4615      	mov	r5, r2
   bddec:	d107      	bne.n	bddfe <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bddee:	9907      	ldr	r1, [sp, #28]
   bddf0:	f000 f8b4 	bl	bdf5c <_ZNKSt9type_infoeqERKS_>
   bddf4:	b118      	cbz	r0, bddfe <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bddf6:	7165      	strb	r5, [r4, #5]
   bddf8:	2000      	movs	r0, #0
   bddfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bddfe:	4639      	mov	r1, r7
   bde00:	4630      	mov	r0, r6
   bde02:	f000 f8ab 	bl	bdf5c <_ZNKSt9type_infoeqERKS_>
   bde06:	2800      	cmp	r0, #0
   bde08:	d0f6      	beq.n	bddf8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bde0a:	2301      	movs	r3, #1
   bde0c:	f8c4 8000 	str.w	r8, [r4]
   bde10:	7125      	strb	r5, [r4, #4]
   bde12:	71a3      	strb	r3, [r4, #6]
   bde14:	e7f0      	b.n	bddf8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bde16 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bde16:	b538      	push	{r3, r4, r5, lr}
   bde18:	4615      	mov	r5, r2
   bde1a:	461c      	mov	r4, r3
   bde1c:	f000 f89e 	bl	bdf5c <_ZNKSt9type_infoeqERKS_>
   bde20:	b120      	cbz	r0, bde2c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bde22:	2308      	movs	r3, #8
   bde24:	60e3      	str	r3, [r4, #12]
   bde26:	2306      	movs	r3, #6
   bde28:	6025      	str	r5, [r4, #0]
   bde2a:	7123      	strb	r3, [r4, #4]
   bde2c:	bd38      	pop	{r3, r4, r5, pc}

000bde2e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bde2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bde30:	4605      	mov	r5, r0
   bde32:	460c      	mov	r4, r1
   bde34:	9201      	str	r2, [sp, #4]
   bde36:	461e      	mov	r6, r3
   bde38:	f000 f890 	bl	bdf5c <_ZNKSt9type_infoeqERKS_>
   bde3c:	b950      	cbnz	r0, bde54 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bde3e:	2e03      	cmp	r6, #3
   bde40:	d808      	bhi.n	bde54 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bde42:	6823      	ldr	r3, [r4, #0]
   bde44:	9a01      	ldr	r2, [sp, #4]
   bde46:	695b      	ldr	r3, [r3, #20]
   bde48:	4629      	mov	r1, r5
   bde4a:	4620      	mov	r0, r4
   bde4c:	b002      	add	sp, #8
   bde4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bde52:	4718      	bx	r3
   bde54:	b002      	add	sp, #8
   bde56:	bd70      	pop	{r4, r5, r6, pc}

000bde58 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bde58:	b510      	push	{r4, lr}
   bde5a:	4b03      	ldr	r3, [pc, #12]	; (bde68 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bde5c:	6003      	str	r3, [r0, #0]
   bde5e:	4604      	mov	r4, r0
   bde60:	f7ff ffa6 	bl	bddb0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bde64:	4620      	mov	r0, r4
   bde66:	bd10      	pop	{r4, pc}
   bde68:	000c2100 	.word	0x000c2100

000bde6c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bde6c:	b510      	push	{r4, lr}
   bde6e:	4604      	mov	r4, r0
   bde70:	f7ff fff2 	bl	bde58 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bde74:	4620      	mov	r0, r4
   bde76:	210c      	movs	r1, #12
   bde78:	f7f6 f911 	bl	b409e <_ZdlPvj>
   bde7c:	4620      	mov	r0, r4
   bde7e:	bd10      	pop	{r4, pc}

000bde80 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bde80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bde82:	9f08      	ldr	r7, [sp, #32]
   bde84:	4297      	cmp	r7, r2
   bde86:	4605      	mov	r5, r0
   bde88:	460e      	mov	r6, r1
   bde8a:	4614      	mov	r4, r2
   bde8c:	d00a      	beq.n	bdea4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bde8e:	68a8      	ldr	r0, [r5, #8]
   bde90:	6802      	ldr	r2, [r0, #0]
   bde92:	9708      	str	r7, [sp, #32]
   bde94:	6a15      	ldr	r5, [r2, #32]
   bde96:	4631      	mov	r1, r6
   bde98:	4622      	mov	r2, r4
   bde9a:	46ac      	mov	ip, r5
   bde9c:	b003      	add	sp, #12
   bde9e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bdea2:	4760      	bx	ip
   bdea4:	4619      	mov	r1, r3
   bdea6:	9301      	str	r3, [sp, #4]
   bdea8:	f000 f858 	bl	bdf5c <_ZNKSt9type_infoeqERKS_>
   bdeac:	9b01      	ldr	r3, [sp, #4]
   bdeae:	2800      	cmp	r0, #0
   bdeb0:	d0ed      	beq.n	bde8e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bdeb2:	2006      	movs	r0, #6
   bdeb4:	b003      	add	sp, #12
   bdeb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bdeb8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bdeb8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdebc:	460d      	mov	r5, r1
   bdebe:	4619      	mov	r1, r3
   bdec0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bdec4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bdec8:	4681      	mov	r9, r0
   bdeca:	4617      	mov	r7, r2
   bdecc:	4698      	mov	r8, r3
   bdece:	f000 f845 	bl	bdf5c <_ZNKSt9type_infoeqERKS_>
   bded2:	b190      	cbz	r0, bdefa <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bded4:	2d00      	cmp	r5, #0
   bded6:	6034      	str	r4, [r6, #0]
   bded8:	7137      	strb	r7, [r6, #4]
   bdeda:	db09      	blt.n	bdef0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bdedc:	1961      	adds	r1, r4, r5
   bdede:	458a      	cmp	sl, r1
   bdee0:	bf0c      	ite	eq
   bdee2:	2106      	moveq	r1, #6
   bdee4:	2101      	movne	r1, #1
   bdee6:	71b1      	strb	r1, [r6, #6]
   bdee8:	2000      	movs	r0, #0
   bdeea:	b001      	add	sp, #4
   bdeec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bdef0:	3502      	adds	r5, #2
   bdef2:	d1f9      	bne.n	bdee8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bdef4:	2301      	movs	r3, #1
   bdef6:	71b3      	strb	r3, [r6, #6]
   bdef8:	e7f6      	b.n	bdee8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bdefa:	4554      	cmp	r4, sl
   bdefc:	d106      	bne.n	bdf0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bdefe:	4659      	mov	r1, fp
   bdf00:	4648      	mov	r0, r9
   bdf02:	f000 f82b 	bl	bdf5c <_ZNKSt9type_infoeqERKS_>
   bdf06:	b108      	cbz	r0, bdf0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bdf08:	7177      	strb	r7, [r6, #5]
   bdf0a:	e7ed      	b.n	bdee8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bdf0c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bdf10:	6803      	ldr	r3, [r0, #0]
   bdf12:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bdf16:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bdf1a:	69dc      	ldr	r4, [r3, #28]
   bdf1c:	463a      	mov	r2, r7
   bdf1e:	4643      	mov	r3, r8
   bdf20:	4629      	mov	r1, r5
   bdf22:	46a4      	mov	ip, r4
   bdf24:	b001      	add	sp, #4
   bdf26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdf2a:	4760      	bx	ip

000bdf2c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bdf2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bdf30:	4607      	mov	r7, r0
   bdf32:	460c      	mov	r4, r1
   bdf34:	4615      	mov	r5, r2
   bdf36:	461e      	mov	r6, r3
   bdf38:	f7ff ff6d 	bl	bde16 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bdf3c:	b948      	cbnz	r0, bdf52 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bdf3e:	68b8      	ldr	r0, [r7, #8]
   bdf40:	6803      	ldr	r3, [r0, #0]
   bdf42:	699f      	ldr	r7, [r3, #24]
   bdf44:	462a      	mov	r2, r5
   bdf46:	4633      	mov	r3, r6
   bdf48:	4621      	mov	r1, r4
   bdf4a:	46bc      	mov	ip, r7
   bdf4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bdf50:	4760      	bx	ip
   bdf52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bdf56 <_ZNSt9type_infoD1Ev>:
   bdf56:	4770      	bx	lr

000bdf58 <_ZNKSt9type_info14__is_pointer_pEv>:
   bdf58:	2000      	movs	r0, #0
   bdf5a:	4770      	bx	lr

000bdf5c <_ZNKSt9type_infoeqERKS_>:
   bdf5c:	4281      	cmp	r1, r0
   bdf5e:	b508      	push	{r3, lr}
   bdf60:	d00e      	beq.n	bdf80 <_ZNKSt9type_infoeqERKS_+0x24>
   bdf62:	6840      	ldr	r0, [r0, #4]
   bdf64:	7803      	ldrb	r3, [r0, #0]
   bdf66:	2b2a      	cmp	r3, #42	; 0x2a
   bdf68:	d00c      	beq.n	bdf84 <_ZNKSt9type_infoeqERKS_+0x28>
   bdf6a:	6849      	ldr	r1, [r1, #4]
   bdf6c:	780b      	ldrb	r3, [r1, #0]
   bdf6e:	2b2a      	cmp	r3, #42	; 0x2a
   bdf70:	bf08      	it	eq
   bdf72:	3101      	addeq	r1, #1
   bdf74:	f000 fdb5 	bl	beae2 <strcmp>
   bdf78:	fab0 f080 	clz	r0, r0
   bdf7c:	0940      	lsrs	r0, r0, #5
   bdf7e:	bd08      	pop	{r3, pc}
   bdf80:	2001      	movs	r0, #1
   bdf82:	e7fc      	b.n	bdf7e <_ZNKSt9type_infoeqERKS_+0x22>
   bdf84:	2000      	movs	r0, #0
   bdf86:	e7fa      	b.n	bdf7e <_ZNKSt9type_infoeqERKS_+0x22>

000bdf88 <__aeabi_drsub>:
   bdf88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bdf8c:	e002      	b.n	bdf94 <__adddf3>
   bdf8e:	bf00      	nop

000bdf90 <__aeabi_dsub>:
   bdf90:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bdf94 <__adddf3>:
   bdf94:	b530      	push	{r4, r5, lr}
   bdf96:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bdf9a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bdf9e:	ea94 0f05 	teq	r4, r5
   bdfa2:	bf08      	it	eq
   bdfa4:	ea90 0f02 	teqeq	r0, r2
   bdfa8:	bf1f      	itttt	ne
   bdfaa:	ea54 0c00 	orrsne.w	ip, r4, r0
   bdfae:	ea55 0c02 	orrsne.w	ip, r5, r2
   bdfb2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bdfb6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bdfba:	f000 80e2 	beq.w	be182 <__adddf3+0x1ee>
   bdfbe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bdfc2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bdfc6:	bfb8      	it	lt
   bdfc8:	426d      	neglt	r5, r5
   bdfca:	dd0c      	ble.n	bdfe6 <__adddf3+0x52>
   bdfcc:	442c      	add	r4, r5
   bdfce:	ea80 0202 	eor.w	r2, r0, r2
   bdfd2:	ea81 0303 	eor.w	r3, r1, r3
   bdfd6:	ea82 0000 	eor.w	r0, r2, r0
   bdfda:	ea83 0101 	eor.w	r1, r3, r1
   bdfde:	ea80 0202 	eor.w	r2, r0, r2
   bdfe2:	ea81 0303 	eor.w	r3, r1, r3
   bdfe6:	2d36      	cmp	r5, #54	; 0x36
   bdfe8:	bf88      	it	hi
   bdfea:	bd30      	pophi	{r4, r5, pc}
   bdfec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bdff0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bdff4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bdff8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bdffc:	d002      	beq.n	be004 <__adddf3+0x70>
   bdffe:	4240      	negs	r0, r0
   be000:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be004:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   be008:	ea4f 3303 	mov.w	r3, r3, lsl #12
   be00c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   be010:	d002      	beq.n	be018 <__adddf3+0x84>
   be012:	4252      	negs	r2, r2
   be014:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   be018:	ea94 0f05 	teq	r4, r5
   be01c:	f000 80a7 	beq.w	be16e <__adddf3+0x1da>
   be020:	f1a4 0401 	sub.w	r4, r4, #1
   be024:	f1d5 0e20 	rsbs	lr, r5, #32
   be028:	db0d      	blt.n	be046 <__adddf3+0xb2>
   be02a:	fa02 fc0e 	lsl.w	ip, r2, lr
   be02e:	fa22 f205 	lsr.w	r2, r2, r5
   be032:	1880      	adds	r0, r0, r2
   be034:	f141 0100 	adc.w	r1, r1, #0
   be038:	fa03 f20e 	lsl.w	r2, r3, lr
   be03c:	1880      	adds	r0, r0, r2
   be03e:	fa43 f305 	asr.w	r3, r3, r5
   be042:	4159      	adcs	r1, r3
   be044:	e00e      	b.n	be064 <__adddf3+0xd0>
   be046:	f1a5 0520 	sub.w	r5, r5, #32
   be04a:	f10e 0e20 	add.w	lr, lr, #32
   be04e:	2a01      	cmp	r2, #1
   be050:	fa03 fc0e 	lsl.w	ip, r3, lr
   be054:	bf28      	it	cs
   be056:	f04c 0c02 	orrcs.w	ip, ip, #2
   be05a:	fa43 f305 	asr.w	r3, r3, r5
   be05e:	18c0      	adds	r0, r0, r3
   be060:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   be064:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   be068:	d507      	bpl.n	be07a <__adddf3+0xe6>
   be06a:	f04f 0e00 	mov.w	lr, #0
   be06e:	f1dc 0c00 	rsbs	ip, ip, #0
   be072:	eb7e 0000 	sbcs.w	r0, lr, r0
   be076:	eb6e 0101 	sbc.w	r1, lr, r1
   be07a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   be07e:	d31b      	bcc.n	be0b8 <__adddf3+0x124>
   be080:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   be084:	d30c      	bcc.n	be0a0 <__adddf3+0x10c>
   be086:	0849      	lsrs	r1, r1, #1
   be088:	ea5f 0030 	movs.w	r0, r0, rrx
   be08c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   be090:	f104 0401 	add.w	r4, r4, #1
   be094:	ea4f 5244 	mov.w	r2, r4, lsl #21
   be098:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   be09c:	f080 809a 	bcs.w	be1d4 <__adddf3+0x240>
   be0a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   be0a4:	bf08      	it	eq
   be0a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   be0aa:	f150 0000 	adcs.w	r0, r0, #0
   be0ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be0b2:	ea41 0105 	orr.w	r1, r1, r5
   be0b6:	bd30      	pop	{r4, r5, pc}
   be0b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   be0bc:	4140      	adcs	r0, r0
   be0be:	eb41 0101 	adc.w	r1, r1, r1
   be0c2:	3c01      	subs	r4, #1
   be0c4:	bf28      	it	cs
   be0c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   be0ca:	d2e9      	bcs.n	be0a0 <__adddf3+0x10c>
   be0cc:	f091 0f00 	teq	r1, #0
   be0d0:	bf04      	itt	eq
   be0d2:	4601      	moveq	r1, r0
   be0d4:	2000      	moveq	r0, #0
   be0d6:	fab1 f381 	clz	r3, r1
   be0da:	bf08      	it	eq
   be0dc:	3320      	addeq	r3, #32
   be0de:	f1a3 030b 	sub.w	r3, r3, #11
   be0e2:	f1b3 0220 	subs.w	r2, r3, #32
   be0e6:	da0c      	bge.n	be102 <__adddf3+0x16e>
   be0e8:	320c      	adds	r2, #12
   be0ea:	dd08      	ble.n	be0fe <__adddf3+0x16a>
   be0ec:	f102 0c14 	add.w	ip, r2, #20
   be0f0:	f1c2 020c 	rsb	r2, r2, #12
   be0f4:	fa01 f00c 	lsl.w	r0, r1, ip
   be0f8:	fa21 f102 	lsr.w	r1, r1, r2
   be0fc:	e00c      	b.n	be118 <__adddf3+0x184>
   be0fe:	f102 0214 	add.w	r2, r2, #20
   be102:	bfd8      	it	le
   be104:	f1c2 0c20 	rsble	ip, r2, #32
   be108:	fa01 f102 	lsl.w	r1, r1, r2
   be10c:	fa20 fc0c 	lsr.w	ip, r0, ip
   be110:	bfdc      	itt	le
   be112:	ea41 010c 	orrle.w	r1, r1, ip
   be116:	4090      	lslle	r0, r2
   be118:	1ae4      	subs	r4, r4, r3
   be11a:	bfa2      	ittt	ge
   be11c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   be120:	4329      	orrge	r1, r5
   be122:	bd30      	popge	{r4, r5, pc}
   be124:	ea6f 0404 	mvn.w	r4, r4
   be128:	3c1f      	subs	r4, #31
   be12a:	da1c      	bge.n	be166 <__adddf3+0x1d2>
   be12c:	340c      	adds	r4, #12
   be12e:	dc0e      	bgt.n	be14e <__adddf3+0x1ba>
   be130:	f104 0414 	add.w	r4, r4, #20
   be134:	f1c4 0220 	rsb	r2, r4, #32
   be138:	fa20 f004 	lsr.w	r0, r0, r4
   be13c:	fa01 f302 	lsl.w	r3, r1, r2
   be140:	ea40 0003 	orr.w	r0, r0, r3
   be144:	fa21 f304 	lsr.w	r3, r1, r4
   be148:	ea45 0103 	orr.w	r1, r5, r3
   be14c:	bd30      	pop	{r4, r5, pc}
   be14e:	f1c4 040c 	rsb	r4, r4, #12
   be152:	f1c4 0220 	rsb	r2, r4, #32
   be156:	fa20 f002 	lsr.w	r0, r0, r2
   be15a:	fa01 f304 	lsl.w	r3, r1, r4
   be15e:	ea40 0003 	orr.w	r0, r0, r3
   be162:	4629      	mov	r1, r5
   be164:	bd30      	pop	{r4, r5, pc}
   be166:	fa21 f004 	lsr.w	r0, r1, r4
   be16a:	4629      	mov	r1, r5
   be16c:	bd30      	pop	{r4, r5, pc}
   be16e:	f094 0f00 	teq	r4, #0
   be172:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   be176:	bf06      	itte	eq
   be178:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   be17c:	3401      	addeq	r4, #1
   be17e:	3d01      	subne	r5, #1
   be180:	e74e      	b.n	be020 <__adddf3+0x8c>
   be182:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   be186:	bf18      	it	ne
   be188:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   be18c:	d029      	beq.n	be1e2 <__adddf3+0x24e>
   be18e:	ea94 0f05 	teq	r4, r5
   be192:	bf08      	it	eq
   be194:	ea90 0f02 	teqeq	r0, r2
   be198:	d005      	beq.n	be1a6 <__adddf3+0x212>
   be19a:	ea54 0c00 	orrs.w	ip, r4, r0
   be19e:	bf04      	itt	eq
   be1a0:	4619      	moveq	r1, r3
   be1a2:	4610      	moveq	r0, r2
   be1a4:	bd30      	pop	{r4, r5, pc}
   be1a6:	ea91 0f03 	teq	r1, r3
   be1aa:	bf1e      	ittt	ne
   be1ac:	2100      	movne	r1, #0
   be1ae:	2000      	movne	r0, #0
   be1b0:	bd30      	popne	{r4, r5, pc}
   be1b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   be1b6:	d105      	bne.n	be1c4 <__adddf3+0x230>
   be1b8:	0040      	lsls	r0, r0, #1
   be1ba:	4149      	adcs	r1, r1
   be1bc:	bf28      	it	cs
   be1be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   be1c2:	bd30      	pop	{r4, r5, pc}
   be1c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   be1c8:	bf3c      	itt	cc
   be1ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   be1ce:	bd30      	popcc	{r4, r5, pc}
   be1d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   be1d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   be1d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   be1dc:	f04f 0000 	mov.w	r0, #0
   be1e0:	bd30      	pop	{r4, r5, pc}
   be1e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   be1e6:	bf1a      	itte	ne
   be1e8:	4619      	movne	r1, r3
   be1ea:	4610      	movne	r0, r2
   be1ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   be1f0:	bf1c      	itt	ne
   be1f2:	460b      	movne	r3, r1
   be1f4:	4602      	movne	r2, r0
   be1f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   be1fa:	bf06      	itte	eq
   be1fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   be200:	ea91 0f03 	teqeq	r1, r3
   be204:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   be208:	bd30      	pop	{r4, r5, pc}
   be20a:	bf00      	nop

000be20c <__aeabi_ui2d>:
   be20c:	f090 0f00 	teq	r0, #0
   be210:	bf04      	itt	eq
   be212:	2100      	moveq	r1, #0
   be214:	4770      	bxeq	lr
   be216:	b530      	push	{r4, r5, lr}
   be218:	f44f 6480 	mov.w	r4, #1024	; 0x400
   be21c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   be220:	f04f 0500 	mov.w	r5, #0
   be224:	f04f 0100 	mov.w	r1, #0
   be228:	e750      	b.n	be0cc <__adddf3+0x138>
   be22a:	bf00      	nop

000be22c <__aeabi_i2d>:
   be22c:	f090 0f00 	teq	r0, #0
   be230:	bf04      	itt	eq
   be232:	2100      	moveq	r1, #0
   be234:	4770      	bxeq	lr
   be236:	b530      	push	{r4, r5, lr}
   be238:	f44f 6480 	mov.w	r4, #1024	; 0x400
   be23c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   be240:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   be244:	bf48      	it	mi
   be246:	4240      	negmi	r0, r0
   be248:	f04f 0100 	mov.w	r1, #0
   be24c:	e73e      	b.n	be0cc <__adddf3+0x138>
   be24e:	bf00      	nop

000be250 <__aeabi_f2d>:
   be250:	0042      	lsls	r2, r0, #1
   be252:	ea4f 01e2 	mov.w	r1, r2, asr #3
   be256:	ea4f 0131 	mov.w	r1, r1, rrx
   be25a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   be25e:	bf1f      	itttt	ne
   be260:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   be264:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   be268:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   be26c:	4770      	bxne	lr
   be26e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   be272:	bf08      	it	eq
   be274:	4770      	bxeq	lr
   be276:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   be27a:	bf04      	itt	eq
   be27c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   be280:	4770      	bxeq	lr
   be282:	b530      	push	{r4, r5, lr}
   be284:	f44f 7460 	mov.w	r4, #896	; 0x380
   be288:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   be28c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   be290:	e71c      	b.n	be0cc <__adddf3+0x138>
   be292:	bf00      	nop

000be294 <__aeabi_ul2d>:
   be294:	ea50 0201 	orrs.w	r2, r0, r1
   be298:	bf08      	it	eq
   be29a:	4770      	bxeq	lr
   be29c:	b530      	push	{r4, r5, lr}
   be29e:	f04f 0500 	mov.w	r5, #0
   be2a2:	e00a      	b.n	be2ba <__aeabi_l2d+0x16>

000be2a4 <__aeabi_l2d>:
   be2a4:	ea50 0201 	orrs.w	r2, r0, r1
   be2a8:	bf08      	it	eq
   be2aa:	4770      	bxeq	lr
   be2ac:	b530      	push	{r4, r5, lr}
   be2ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   be2b2:	d502      	bpl.n	be2ba <__aeabi_l2d+0x16>
   be2b4:	4240      	negs	r0, r0
   be2b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be2ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
   be2be:	f104 0432 	add.w	r4, r4, #50	; 0x32
   be2c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   be2c6:	f43f aed8 	beq.w	be07a <__adddf3+0xe6>
   be2ca:	f04f 0203 	mov.w	r2, #3
   be2ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   be2d2:	bf18      	it	ne
   be2d4:	3203      	addne	r2, #3
   be2d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   be2da:	bf18      	it	ne
   be2dc:	3203      	addne	r2, #3
   be2de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   be2e2:	f1c2 0320 	rsb	r3, r2, #32
   be2e6:	fa00 fc03 	lsl.w	ip, r0, r3
   be2ea:	fa20 f002 	lsr.w	r0, r0, r2
   be2ee:	fa01 fe03 	lsl.w	lr, r1, r3
   be2f2:	ea40 000e 	orr.w	r0, r0, lr
   be2f6:	fa21 f102 	lsr.w	r1, r1, r2
   be2fa:	4414      	add	r4, r2
   be2fc:	e6bd      	b.n	be07a <__adddf3+0xe6>
   be2fe:	bf00      	nop

000be300 <__aeabi_dmul>:
   be300:	b570      	push	{r4, r5, r6, lr}
   be302:	f04f 0cff 	mov.w	ip, #255	; 0xff
   be306:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   be30a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   be30e:	bf1d      	ittte	ne
   be310:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   be314:	ea94 0f0c 	teqne	r4, ip
   be318:	ea95 0f0c 	teqne	r5, ip
   be31c:	f000 f8de 	bleq	be4dc <__aeabi_dmul+0x1dc>
   be320:	442c      	add	r4, r5
   be322:	ea81 0603 	eor.w	r6, r1, r3
   be326:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   be32a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   be32e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   be332:	bf18      	it	ne
   be334:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   be338:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be33c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   be340:	d038      	beq.n	be3b4 <__aeabi_dmul+0xb4>
   be342:	fba0 ce02 	umull	ip, lr, r0, r2
   be346:	f04f 0500 	mov.w	r5, #0
   be34a:	fbe1 e502 	umlal	lr, r5, r1, r2
   be34e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   be352:	fbe0 e503 	umlal	lr, r5, r0, r3
   be356:	f04f 0600 	mov.w	r6, #0
   be35a:	fbe1 5603 	umlal	r5, r6, r1, r3
   be35e:	f09c 0f00 	teq	ip, #0
   be362:	bf18      	it	ne
   be364:	f04e 0e01 	orrne.w	lr, lr, #1
   be368:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   be36c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   be370:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   be374:	d204      	bcs.n	be380 <__aeabi_dmul+0x80>
   be376:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   be37a:	416d      	adcs	r5, r5
   be37c:	eb46 0606 	adc.w	r6, r6, r6
   be380:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   be384:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   be388:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   be38c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   be390:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   be394:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   be398:	bf88      	it	hi
   be39a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   be39e:	d81e      	bhi.n	be3de <__aeabi_dmul+0xde>
   be3a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   be3a4:	bf08      	it	eq
   be3a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   be3aa:	f150 0000 	adcs.w	r0, r0, #0
   be3ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be3b2:	bd70      	pop	{r4, r5, r6, pc}
   be3b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   be3b8:	ea46 0101 	orr.w	r1, r6, r1
   be3bc:	ea40 0002 	orr.w	r0, r0, r2
   be3c0:	ea81 0103 	eor.w	r1, r1, r3
   be3c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   be3c8:	bfc2      	ittt	gt
   be3ca:	ebd4 050c 	rsbsgt	r5, r4, ip
   be3ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   be3d2:	bd70      	popgt	{r4, r5, r6, pc}
   be3d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be3d8:	f04f 0e00 	mov.w	lr, #0
   be3dc:	3c01      	subs	r4, #1
   be3de:	f300 80ab 	bgt.w	be538 <__aeabi_dmul+0x238>
   be3e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   be3e6:	bfde      	ittt	le
   be3e8:	2000      	movle	r0, #0
   be3ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   be3ee:	bd70      	pople	{r4, r5, r6, pc}
   be3f0:	f1c4 0400 	rsb	r4, r4, #0
   be3f4:	3c20      	subs	r4, #32
   be3f6:	da35      	bge.n	be464 <__aeabi_dmul+0x164>
   be3f8:	340c      	adds	r4, #12
   be3fa:	dc1b      	bgt.n	be434 <__aeabi_dmul+0x134>
   be3fc:	f104 0414 	add.w	r4, r4, #20
   be400:	f1c4 0520 	rsb	r5, r4, #32
   be404:	fa00 f305 	lsl.w	r3, r0, r5
   be408:	fa20 f004 	lsr.w	r0, r0, r4
   be40c:	fa01 f205 	lsl.w	r2, r1, r5
   be410:	ea40 0002 	orr.w	r0, r0, r2
   be414:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   be418:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   be41c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   be420:	fa21 f604 	lsr.w	r6, r1, r4
   be424:	eb42 0106 	adc.w	r1, r2, r6
   be428:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   be42c:	bf08      	it	eq
   be42e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   be432:	bd70      	pop	{r4, r5, r6, pc}
   be434:	f1c4 040c 	rsb	r4, r4, #12
   be438:	f1c4 0520 	rsb	r5, r4, #32
   be43c:	fa00 f304 	lsl.w	r3, r0, r4
   be440:	fa20 f005 	lsr.w	r0, r0, r5
   be444:	fa01 f204 	lsl.w	r2, r1, r4
   be448:	ea40 0002 	orr.w	r0, r0, r2
   be44c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be450:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   be454:	f141 0100 	adc.w	r1, r1, #0
   be458:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   be45c:	bf08      	it	eq
   be45e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   be462:	bd70      	pop	{r4, r5, r6, pc}
   be464:	f1c4 0520 	rsb	r5, r4, #32
   be468:	fa00 f205 	lsl.w	r2, r0, r5
   be46c:	ea4e 0e02 	orr.w	lr, lr, r2
   be470:	fa20 f304 	lsr.w	r3, r0, r4
   be474:	fa01 f205 	lsl.w	r2, r1, r5
   be478:	ea43 0302 	orr.w	r3, r3, r2
   be47c:	fa21 f004 	lsr.w	r0, r1, r4
   be480:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be484:	fa21 f204 	lsr.w	r2, r1, r4
   be488:	ea20 0002 	bic.w	r0, r0, r2
   be48c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   be490:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   be494:	bf08      	it	eq
   be496:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   be49a:	bd70      	pop	{r4, r5, r6, pc}
   be49c:	f094 0f00 	teq	r4, #0
   be4a0:	d10f      	bne.n	be4c2 <__aeabi_dmul+0x1c2>
   be4a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   be4a6:	0040      	lsls	r0, r0, #1
   be4a8:	eb41 0101 	adc.w	r1, r1, r1
   be4ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   be4b0:	bf08      	it	eq
   be4b2:	3c01      	subeq	r4, #1
   be4b4:	d0f7      	beq.n	be4a6 <__aeabi_dmul+0x1a6>
   be4b6:	ea41 0106 	orr.w	r1, r1, r6
   be4ba:	f095 0f00 	teq	r5, #0
   be4be:	bf18      	it	ne
   be4c0:	4770      	bxne	lr
   be4c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   be4c6:	0052      	lsls	r2, r2, #1
   be4c8:	eb43 0303 	adc.w	r3, r3, r3
   be4cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   be4d0:	bf08      	it	eq
   be4d2:	3d01      	subeq	r5, #1
   be4d4:	d0f7      	beq.n	be4c6 <__aeabi_dmul+0x1c6>
   be4d6:	ea43 0306 	orr.w	r3, r3, r6
   be4da:	4770      	bx	lr
   be4dc:	ea94 0f0c 	teq	r4, ip
   be4e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   be4e4:	bf18      	it	ne
   be4e6:	ea95 0f0c 	teqne	r5, ip
   be4ea:	d00c      	beq.n	be506 <__aeabi_dmul+0x206>
   be4ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   be4f0:	bf18      	it	ne
   be4f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   be4f6:	d1d1      	bne.n	be49c <__aeabi_dmul+0x19c>
   be4f8:	ea81 0103 	eor.w	r1, r1, r3
   be4fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be500:	f04f 0000 	mov.w	r0, #0
   be504:	bd70      	pop	{r4, r5, r6, pc}
   be506:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   be50a:	bf06      	itte	eq
   be50c:	4610      	moveq	r0, r2
   be50e:	4619      	moveq	r1, r3
   be510:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   be514:	d019      	beq.n	be54a <__aeabi_dmul+0x24a>
   be516:	ea94 0f0c 	teq	r4, ip
   be51a:	d102      	bne.n	be522 <__aeabi_dmul+0x222>
   be51c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   be520:	d113      	bne.n	be54a <__aeabi_dmul+0x24a>
   be522:	ea95 0f0c 	teq	r5, ip
   be526:	d105      	bne.n	be534 <__aeabi_dmul+0x234>
   be528:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   be52c:	bf1c      	itt	ne
   be52e:	4610      	movne	r0, r2
   be530:	4619      	movne	r1, r3
   be532:	d10a      	bne.n	be54a <__aeabi_dmul+0x24a>
   be534:	ea81 0103 	eor.w	r1, r1, r3
   be538:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be53c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   be540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   be544:	f04f 0000 	mov.w	r0, #0
   be548:	bd70      	pop	{r4, r5, r6, pc}
   be54a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   be54e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   be552:	bd70      	pop	{r4, r5, r6, pc}

000be554 <__aeabi_ddiv>:
   be554:	b570      	push	{r4, r5, r6, lr}
   be556:	f04f 0cff 	mov.w	ip, #255	; 0xff
   be55a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   be55e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   be562:	bf1d      	ittte	ne
   be564:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   be568:	ea94 0f0c 	teqne	r4, ip
   be56c:	ea95 0f0c 	teqne	r5, ip
   be570:	f000 f8a7 	bleq	be6c2 <__aeabi_ddiv+0x16e>
   be574:	eba4 0405 	sub.w	r4, r4, r5
   be578:	ea81 0e03 	eor.w	lr, r1, r3
   be57c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   be580:	ea4f 3101 	mov.w	r1, r1, lsl #12
   be584:	f000 8088 	beq.w	be698 <__aeabi_ddiv+0x144>
   be588:	ea4f 3303 	mov.w	r3, r3, lsl #12
   be58c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   be590:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   be594:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   be598:	ea4f 2202 	mov.w	r2, r2, lsl #8
   be59c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   be5a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   be5a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   be5a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   be5ac:	429d      	cmp	r5, r3
   be5ae:	bf08      	it	eq
   be5b0:	4296      	cmpeq	r6, r2
   be5b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   be5b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   be5ba:	d202      	bcs.n	be5c2 <__aeabi_ddiv+0x6e>
   be5bc:	085b      	lsrs	r3, r3, #1
   be5be:	ea4f 0232 	mov.w	r2, r2, rrx
   be5c2:	1ab6      	subs	r6, r6, r2
   be5c4:	eb65 0503 	sbc.w	r5, r5, r3
   be5c8:	085b      	lsrs	r3, r3, #1
   be5ca:	ea4f 0232 	mov.w	r2, r2, rrx
   be5ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   be5d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   be5d6:	ebb6 0e02 	subs.w	lr, r6, r2
   be5da:	eb75 0e03 	sbcs.w	lr, r5, r3
   be5de:	bf22      	ittt	cs
   be5e0:	1ab6      	subcs	r6, r6, r2
   be5e2:	4675      	movcs	r5, lr
   be5e4:	ea40 000c 	orrcs.w	r0, r0, ip
   be5e8:	085b      	lsrs	r3, r3, #1
   be5ea:	ea4f 0232 	mov.w	r2, r2, rrx
   be5ee:	ebb6 0e02 	subs.w	lr, r6, r2
   be5f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   be5f6:	bf22      	ittt	cs
   be5f8:	1ab6      	subcs	r6, r6, r2
   be5fa:	4675      	movcs	r5, lr
   be5fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   be600:	085b      	lsrs	r3, r3, #1
   be602:	ea4f 0232 	mov.w	r2, r2, rrx
   be606:	ebb6 0e02 	subs.w	lr, r6, r2
   be60a:	eb75 0e03 	sbcs.w	lr, r5, r3
   be60e:	bf22      	ittt	cs
   be610:	1ab6      	subcs	r6, r6, r2
   be612:	4675      	movcs	r5, lr
   be614:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   be618:	085b      	lsrs	r3, r3, #1
   be61a:	ea4f 0232 	mov.w	r2, r2, rrx
   be61e:	ebb6 0e02 	subs.w	lr, r6, r2
   be622:	eb75 0e03 	sbcs.w	lr, r5, r3
   be626:	bf22      	ittt	cs
   be628:	1ab6      	subcs	r6, r6, r2
   be62a:	4675      	movcs	r5, lr
   be62c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   be630:	ea55 0e06 	orrs.w	lr, r5, r6
   be634:	d018      	beq.n	be668 <__aeabi_ddiv+0x114>
   be636:	ea4f 1505 	mov.w	r5, r5, lsl #4
   be63a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   be63e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   be642:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   be646:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   be64a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   be64e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   be652:	d1c0      	bne.n	be5d6 <__aeabi_ddiv+0x82>
   be654:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   be658:	d10b      	bne.n	be672 <__aeabi_ddiv+0x11e>
   be65a:	ea41 0100 	orr.w	r1, r1, r0
   be65e:	f04f 0000 	mov.w	r0, #0
   be662:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   be666:	e7b6      	b.n	be5d6 <__aeabi_ddiv+0x82>
   be668:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   be66c:	bf04      	itt	eq
   be66e:	4301      	orreq	r1, r0
   be670:	2000      	moveq	r0, #0
   be672:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   be676:	bf88      	it	hi
   be678:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   be67c:	f63f aeaf 	bhi.w	be3de <__aeabi_dmul+0xde>
   be680:	ebb5 0c03 	subs.w	ip, r5, r3
   be684:	bf04      	itt	eq
   be686:	ebb6 0c02 	subseq.w	ip, r6, r2
   be68a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   be68e:	f150 0000 	adcs.w	r0, r0, #0
   be692:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be696:	bd70      	pop	{r4, r5, r6, pc}
   be698:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   be69c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   be6a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   be6a4:	bfc2      	ittt	gt
   be6a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   be6aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   be6ae:	bd70      	popgt	{r4, r5, r6, pc}
   be6b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be6b4:	f04f 0e00 	mov.w	lr, #0
   be6b8:	3c01      	subs	r4, #1
   be6ba:	e690      	b.n	be3de <__aeabi_dmul+0xde>
   be6bc:	ea45 0e06 	orr.w	lr, r5, r6
   be6c0:	e68d      	b.n	be3de <__aeabi_dmul+0xde>
   be6c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   be6c6:	ea94 0f0c 	teq	r4, ip
   be6ca:	bf08      	it	eq
   be6cc:	ea95 0f0c 	teqeq	r5, ip
   be6d0:	f43f af3b 	beq.w	be54a <__aeabi_dmul+0x24a>
   be6d4:	ea94 0f0c 	teq	r4, ip
   be6d8:	d10a      	bne.n	be6f0 <__aeabi_ddiv+0x19c>
   be6da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   be6de:	f47f af34 	bne.w	be54a <__aeabi_dmul+0x24a>
   be6e2:	ea95 0f0c 	teq	r5, ip
   be6e6:	f47f af25 	bne.w	be534 <__aeabi_dmul+0x234>
   be6ea:	4610      	mov	r0, r2
   be6ec:	4619      	mov	r1, r3
   be6ee:	e72c      	b.n	be54a <__aeabi_dmul+0x24a>
   be6f0:	ea95 0f0c 	teq	r5, ip
   be6f4:	d106      	bne.n	be704 <__aeabi_ddiv+0x1b0>
   be6f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   be6fa:	f43f aefd 	beq.w	be4f8 <__aeabi_dmul+0x1f8>
   be6fe:	4610      	mov	r0, r2
   be700:	4619      	mov	r1, r3
   be702:	e722      	b.n	be54a <__aeabi_dmul+0x24a>
   be704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   be708:	bf18      	it	ne
   be70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   be70e:	f47f aec5 	bne.w	be49c <__aeabi_dmul+0x19c>
   be712:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   be716:	f47f af0d 	bne.w	be534 <__aeabi_dmul+0x234>
   be71a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   be71e:	f47f aeeb 	bne.w	be4f8 <__aeabi_dmul+0x1f8>
   be722:	e712      	b.n	be54a <__aeabi_dmul+0x24a>

000be724 <__gedf2>:
   be724:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   be728:	e006      	b.n	be738 <__cmpdf2+0x4>
   be72a:	bf00      	nop

000be72c <__ledf2>:
   be72c:	f04f 0c01 	mov.w	ip, #1
   be730:	e002      	b.n	be738 <__cmpdf2+0x4>
   be732:	bf00      	nop

000be734 <__cmpdf2>:
   be734:	f04f 0c01 	mov.w	ip, #1
   be738:	f84d cd04 	str.w	ip, [sp, #-4]!
   be73c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   be740:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be744:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   be748:	bf18      	it	ne
   be74a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   be74e:	d01b      	beq.n	be788 <__cmpdf2+0x54>
   be750:	b001      	add	sp, #4
   be752:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   be756:	bf0c      	ite	eq
   be758:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   be75c:	ea91 0f03 	teqne	r1, r3
   be760:	bf02      	ittt	eq
   be762:	ea90 0f02 	teqeq	r0, r2
   be766:	2000      	moveq	r0, #0
   be768:	4770      	bxeq	lr
   be76a:	f110 0f00 	cmn.w	r0, #0
   be76e:	ea91 0f03 	teq	r1, r3
   be772:	bf58      	it	pl
   be774:	4299      	cmppl	r1, r3
   be776:	bf08      	it	eq
   be778:	4290      	cmpeq	r0, r2
   be77a:	bf2c      	ite	cs
   be77c:	17d8      	asrcs	r0, r3, #31
   be77e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   be782:	f040 0001 	orr.w	r0, r0, #1
   be786:	4770      	bx	lr
   be788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   be78c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be790:	d102      	bne.n	be798 <__cmpdf2+0x64>
   be792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   be796:	d107      	bne.n	be7a8 <__cmpdf2+0x74>
   be798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   be79c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be7a0:	d1d6      	bne.n	be750 <__cmpdf2+0x1c>
   be7a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   be7a6:	d0d3      	beq.n	be750 <__cmpdf2+0x1c>
   be7a8:	f85d 0b04 	ldr.w	r0, [sp], #4
   be7ac:	4770      	bx	lr
   be7ae:	bf00      	nop

000be7b0 <__aeabi_cdrcmple>:
   be7b0:	4684      	mov	ip, r0
   be7b2:	4610      	mov	r0, r2
   be7b4:	4662      	mov	r2, ip
   be7b6:	468c      	mov	ip, r1
   be7b8:	4619      	mov	r1, r3
   be7ba:	4663      	mov	r3, ip
   be7bc:	e000      	b.n	be7c0 <__aeabi_cdcmpeq>
   be7be:	bf00      	nop

000be7c0 <__aeabi_cdcmpeq>:
   be7c0:	b501      	push	{r0, lr}
   be7c2:	f7ff ffb7 	bl	be734 <__cmpdf2>
   be7c6:	2800      	cmp	r0, #0
   be7c8:	bf48      	it	mi
   be7ca:	f110 0f00 	cmnmi.w	r0, #0
   be7ce:	bd01      	pop	{r0, pc}

000be7d0 <__aeabi_dcmpeq>:
   be7d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   be7d4:	f7ff fff4 	bl	be7c0 <__aeabi_cdcmpeq>
   be7d8:	bf0c      	ite	eq
   be7da:	2001      	moveq	r0, #1
   be7dc:	2000      	movne	r0, #0
   be7de:	f85d fb08 	ldr.w	pc, [sp], #8
   be7e2:	bf00      	nop

000be7e4 <__aeabi_dcmplt>:
   be7e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   be7e8:	f7ff ffea 	bl	be7c0 <__aeabi_cdcmpeq>
   be7ec:	bf34      	ite	cc
   be7ee:	2001      	movcc	r0, #1
   be7f0:	2000      	movcs	r0, #0
   be7f2:	f85d fb08 	ldr.w	pc, [sp], #8
   be7f6:	bf00      	nop

000be7f8 <__aeabi_dcmple>:
   be7f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   be7fc:	f7ff ffe0 	bl	be7c0 <__aeabi_cdcmpeq>
   be800:	bf94      	ite	ls
   be802:	2001      	movls	r0, #1
   be804:	2000      	movhi	r0, #0
   be806:	f85d fb08 	ldr.w	pc, [sp], #8
   be80a:	bf00      	nop

000be80c <__aeabi_dcmpge>:
   be80c:	f84d ed08 	str.w	lr, [sp, #-8]!
   be810:	f7ff ffce 	bl	be7b0 <__aeabi_cdrcmple>
   be814:	bf94      	ite	ls
   be816:	2001      	movls	r0, #1
   be818:	2000      	movhi	r0, #0
   be81a:	f85d fb08 	ldr.w	pc, [sp], #8
   be81e:	bf00      	nop

000be820 <__aeabi_dcmpgt>:
   be820:	f84d ed08 	str.w	lr, [sp, #-8]!
   be824:	f7ff ffc4 	bl	be7b0 <__aeabi_cdrcmple>
   be828:	bf34      	ite	cc
   be82a:	2001      	movcc	r0, #1
   be82c:	2000      	movcs	r0, #0
   be82e:	f85d fb08 	ldr.w	pc, [sp], #8
   be832:	bf00      	nop

000be834 <__aeabi_d2uiz>:
   be834:	004a      	lsls	r2, r1, #1
   be836:	d211      	bcs.n	be85c <__aeabi_d2uiz+0x28>
   be838:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   be83c:	d211      	bcs.n	be862 <__aeabi_d2uiz+0x2e>
   be83e:	d50d      	bpl.n	be85c <__aeabi_d2uiz+0x28>
   be840:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   be844:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   be848:	d40e      	bmi.n	be868 <__aeabi_d2uiz+0x34>
   be84a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   be84e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   be852:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   be856:	fa23 f002 	lsr.w	r0, r3, r2
   be85a:	4770      	bx	lr
   be85c:	f04f 0000 	mov.w	r0, #0
   be860:	4770      	bx	lr
   be862:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   be866:	d102      	bne.n	be86e <__aeabi_d2uiz+0x3a>
   be868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   be86c:	4770      	bx	lr
   be86e:	f04f 0000 	mov.w	r0, #0
   be872:	4770      	bx	lr

000be874 <__aeabi_d2f>:
   be874:	ea4f 0241 	mov.w	r2, r1, lsl #1
   be878:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   be87c:	bf24      	itt	cs
   be87e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   be882:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   be886:	d90d      	bls.n	be8a4 <__aeabi_d2f+0x30>
   be888:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   be88c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   be890:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   be894:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   be898:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   be89c:	bf08      	it	eq
   be89e:	f020 0001 	biceq.w	r0, r0, #1
   be8a2:	4770      	bx	lr
   be8a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   be8a8:	d121      	bne.n	be8ee <__aeabi_d2f+0x7a>
   be8aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   be8ae:	bfbc      	itt	lt
   be8b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   be8b4:	4770      	bxlt	lr
   be8b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be8ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
   be8be:	f1c2 0218 	rsb	r2, r2, #24
   be8c2:	f1c2 0c20 	rsb	ip, r2, #32
   be8c6:	fa10 f30c 	lsls.w	r3, r0, ip
   be8ca:	fa20 f002 	lsr.w	r0, r0, r2
   be8ce:	bf18      	it	ne
   be8d0:	f040 0001 	orrne.w	r0, r0, #1
   be8d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   be8d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   be8dc:	fa03 fc0c 	lsl.w	ip, r3, ip
   be8e0:	ea40 000c 	orr.w	r0, r0, ip
   be8e4:	fa23 f302 	lsr.w	r3, r3, r2
   be8e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   be8ec:	e7cc      	b.n	be888 <__aeabi_d2f+0x14>
   be8ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
   be8f2:	d107      	bne.n	be904 <__aeabi_d2f+0x90>
   be8f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   be8f8:	bf1e      	ittt	ne
   be8fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   be8fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   be902:	4770      	bxne	lr
   be904:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   be908:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   be90c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   be910:	4770      	bx	lr
   be912:	bf00      	nop

000be914 <__aeabi_d2ulz>:
   be914:	b5d0      	push	{r4, r6, r7, lr}
   be916:	4b0c      	ldr	r3, [pc, #48]	; (be948 <__aeabi_d2ulz+0x34>)
   be918:	2200      	movs	r2, #0
   be91a:	4606      	mov	r6, r0
   be91c:	460f      	mov	r7, r1
   be91e:	f7ff fcef 	bl	be300 <__aeabi_dmul>
   be922:	f7ff ff87 	bl	be834 <__aeabi_d2uiz>
   be926:	4604      	mov	r4, r0
   be928:	f7ff fc70 	bl	be20c <__aeabi_ui2d>
   be92c:	4b07      	ldr	r3, [pc, #28]	; (be94c <__aeabi_d2ulz+0x38>)
   be92e:	2200      	movs	r2, #0
   be930:	f7ff fce6 	bl	be300 <__aeabi_dmul>
   be934:	4602      	mov	r2, r0
   be936:	460b      	mov	r3, r1
   be938:	4630      	mov	r0, r6
   be93a:	4639      	mov	r1, r7
   be93c:	f7ff fb28 	bl	bdf90 <__aeabi_dsub>
   be940:	f7ff ff78 	bl	be834 <__aeabi_d2uiz>
   be944:	4621      	mov	r1, r4
   be946:	bdd0      	pop	{r4, r6, r7, pc}
   be948:	3df00000 	.word	0x3df00000
   be94c:	41f00000 	.word	0x41f00000

000be950 <atexit>:
   be950:	2300      	movs	r3, #0
   be952:	4601      	mov	r1, r0
   be954:	461a      	mov	r2, r3
   be956:	4618      	mov	r0, r3
   be958:	f000 bfe8 	b.w	bf92c <__register_exitproc>

000be95c <atof>:
   be95c:	2100      	movs	r1, #0
   be95e:	f000 bf4d 	b.w	bf7fc <strtod>

000be962 <atoi>:
   be962:	220a      	movs	r2, #10
   be964:	2100      	movs	r1, #0
   be966:	f000 bfd7 	b.w	bf918 <strtol>

000be96a <memcmp>:
   be96a:	b510      	push	{r4, lr}
   be96c:	3901      	subs	r1, #1
   be96e:	4402      	add	r2, r0
   be970:	4290      	cmp	r0, r2
   be972:	d101      	bne.n	be978 <memcmp+0xe>
   be974:	2000      	movs	r0, #0
   be976:	e005      	b.n	be984 <memcmp+0x1a>
   be978:	7803      	ldrb	r3, [r0, #0]
   be97a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   be97e:	42a3      	cmp	r3, r4
   be980:	d001      	beq.n	be986 <memcmp+0x1c>
   be982:	1b18      	subs	r0, r3, r4
   be984:	bd10      	pop	{r4, pc}
   be986:	3001      	adds	r0, #1
   be988:	e7f2      	b.n	be970 <memcmp+0x6>

000be98a <memcpy>:
   be98a:	440a      	add	r2, r1
   be98c:	4291      	cmp	r1, r2
   be98e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   be992:	d100      	bne.n	be996 <memcpy+0xc>
   be994:	4770      	bx	lr
   be996:	b510      	push	{r4, lr}
   be998:	f811 4b01 	ldrb.w	r4, [r1], #1
   be99c:	f803 4f01 	strb.w	r4, [r3, #1]!
   be9a0:	4291      	cmp	r1, r2
   be9a2:	d1f9      	bne.n	be998 <memcpy+0xe>
   be9a4:	bd10      	pop	{r4, pc}

000be9a6 <memmove>:
   be9a6:	4288      	cmp	r0, r1
   be9a8:	b510      	push	{r4, lr}
   be9aa:	eb01 0402 	add.w	r4, r1, r2
   be9ae:	d902      	bls.n	be9b6 <memmove+0x10>
   be9b0:	4284      	cmp	r4, r0
   be9b2:	4623      	mov	r3, r4
   be9b4:	d807      	bhi.n	be9c6 <memmove+0x20>
   be9b6:	1e43      	subs	r3, r0, #1
   be9b8:	42a1      	cmp	r1, r4
   be9ba:	d008      	beq.n	be9ce <memmove+0x28>
   be9bc:	f811 2b01 	ldrb.w	r2, [r1], #1
   be9c0:	f803 2f01 	strb.w	r2, [r3, #1]!
   be9c4:	e7f8      	b.n	be9b8 <memmove+0x12>
   be9c6:	4402      	add	r2, r0
   be9c8:	4601      	mov	r1, r0
   be9ca:	428a      	cmp	r2, r1
   be9cc:	d100      	bne.n	be9d0 <memmove+0x2a>
   be9ce:	bd10      	pop	{r4, pc}
   be9d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   be9d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
   be9d8:	e7f7      	b.n	be9ca <memmove+0x24>

000be9da <memset>:
   be9da:	4402      	add	r2, r0
   be9dc:	4603      	mov	r3, r0
   be9de:	4293      	cmp	r3, r2
   be9e0:	d100      	bne.n	be9e4 <memset+0xa>
   be9e2:	4770      	bx	lr
   be9e4:	f803 1b01 	strb.w	r1, [r3], #1
   be9e8:	e7f9      	b.n	be9de <memset+0x4>
	...

000be9ec <srand>:
   be9ec:	b538      	push	{r3, r4, r5, lr}
   be9ee:	4b10      	ldr	r3, [pc, #64]	; (bea30 <srand+0x44>)
   be9f0:	681d      	ldr	r5, [r3, #0]
   be9f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   be9f4:	4604      	mov	r4, r0
   be9f6:	b9b3      	cbnz	r3, bea26 <srand+0x3a>
   be9f8:	2018      	movs	r0, #24
   be9fa:	f7fb fa8d 	bl	b9f18 <malloc>
   be9fe:	4602      	mov	r2, r0
   bea00:	63a8      	str	r0, [r5, #56]	; 0x38
   bea02:	b920      	cbnz	r0, bea0e <srand+0x22>
   bea04:	4b0b      	ldr	r3, [pc, #44]	; (bea34 <srand+0x48>)
   bea06:	480c      	ldr	r0, [pc, #48]	; (bea38 <srand+0x4c>)
   bea08:	2142      	movs	r1, #66	; 0x42
   bea0a:	f7fb fad5 	bl	b9fb8 <__assert_func>
   bea0e:	490b      	ldr	r1, [pc, #44]	; (bea3c <srand+0x50>)
   bea10:	4b0b      	ldr	r3, [pc, #44]	; (bea40 <srand+0x54>)
   bea12:	e9c0 1300 	strd	r1, r3, [r0]
   bea16:	4b0b      	ldr	r3, [pc, #44]	; (bea44 <srand+0x58>)
   bea18:	6083      	str	r3, [r0, #8]
   bea1a:	230b      	movs	r3, #11
   bea1c:	8183      	strh	r3, [r0, #12]
   bea1e:	2100      	movs	r1, #0
   bea20:	2001      	movs	r0, #1
   bea22:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bea26:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bea28:	2200      	movs	r2, #0
   bea2a:	611c      	str	r4, [r3, #16]
   bea2c:	615a      	str	r2, [r3, #20]
   bea2e:	bd38      	pop	{r3, r4, r5, pc}
   bea30:	2003da98 	.word	0x2003da98
   bea34:	000c2139 	.word	0x000c2139
   bea38:	000c2150 	.word	0x000c2150
   bea3c:	abcd330e 	.word	0xabcd330e
   bea40:	e66d1234 	.word	0xe66d1234
   bea44:	0005deec 	.word	0x0005deec

000bea48 <rand>:
   bea48:	4b16      	ldr	r3, [pc, #88]	; (beaa4 <rand+0x5c>)
   bea4a:	b510      	push	{r4, lr}
   bea4c:	681c      	ldr	r4, [r3, #0]
   bea4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bea50:	b9b3      	cbnz	r3, bea80 <rand+0x38>
   bea52:	2018      	movs	r0, #24
   bea54:	f7fb fa60 	bl	b9f18 <malloc>
   bea58:	63a0      	str	r0, [r4, #56]	; 0x38
   bea5a:	b928      	cbnz	r0, bea68 <rand+0x20>
   bea5c:	4602      	mov	r2, r0
   bea5e:	4b12      	ldr	r3, [pc, #72]	; (beaa8 <rand+0x60>)
   bea60:	4812      	ldr	r0, [pc, #72]	; (beaac <rand+0x64>)
   bea62:	214e      	movs	r1, #78	; 0x4e
   bea64:	f7fb faa8 	bl	b9fb8 <__assert_func>
   bea68:	4a11      	ldr	r2, [pc, #68]	; (beab0 <rand+0x68>)
   bea6a:	4b12      	ldr	r3, [pc, #72]	; (beab4 <rand+0x6c>)
   bea6c:	e9c0 2300 	strd	r2, r3, [r0]
   bea70:	4b11      	ldr	r3, [pc, #68]	; (beab8 <rand+0x70>)
   bea72:	6083      	str	r3, [r0, #8]
   bea74:	230b      	movs	r3, #11
   bea76:	8183      	strh	r3, [r0, #12]
   bea78:	2201      	movs	r2, #1
   bea7a:	2300      	movs	r3, #0
   bea7c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   bea80:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   bea82:	4a0e      	ldr	r2, [pc, #56]	; (beabc <rand+0x74>)
   bea84:	6920      	ldr	r0, [r4, #16]
   bea86:	6963      	ldr	r3, [r4, #20]
   bea88:	490d      	ldr	r1, [pc, #52]	; (beac0 <rand+0x78>)
   bea8a:	4342      	muls	r2, r0
   bea8c:	fb01 2203 	mla	r2, r1, r3, r2
   bea90:	fba0 0101 	umull	r0, r1, r0, r1
   bea94:	1c43      	adds	r3, r0, #1
   bea96:	eb42 0001 	adc.w	r0, r2, r1
   bea9a:	e9c4 3004 	strd	r3, r0, [r4, #16]
   bea9e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   beaa2:	bd10      	pop	{r4, pc}
   beaa4:	2003da98 	.word	0x2003da98
   beaa8:	000c2139 	.word	0x000c2139
   beaac:	000c2150 	.word	0x000c2150
   beab0:	abcd330e 	.word	0xabcd330e
   beab4:	e66d1234 	.word	0xe66d1234
   beab8:	0005deec 	.word	0x0005deec
   beabc:	5851f42d 	.word	0x5851f42d
   beac0:	4c957f2d 	.word	0x4c957f2d

000beac4 <strcat>:
   beac4:	b510      	push	{r4, lr}
   beac6:	4602      	mov	r2, r0
   beac8:	7814      	ldrb	r4, [r2, #0]
   beaca:	4613      	mov	r3, r2
   beacc:	3201      	adds	r2, #1
   beace:	2c00      	cmp	r4, #0
   bead0:	d1fa      	bne.n	beac8 <strcat+0x4>
   bead2:	3b01      	subs	r3, #1
   bead4:	f811 2b01 	ldrb.w	r2, [r1], #1
   bead8:	f803 2f01 	strb.w	r2, [r3, #1]!
   beadc:	2a00      	cmp	r2, #0
   beade:	d1f9      	bne.n	bead4 <strcat+0x10>
   beae0:	bd10      	pop	{r4, pc}

000beae2 <strcmp>:
   beae2:	f810 2b01 	ldrb.w	r2, [r0], #1
   beae6:	f811 3b01 	ldrb.w	r3, [r1], #1
   beaea:	2a01      	cmp	r2, #1
   beaec:	bf28      	it	cs
   beaee:	429a      	cmpcs	r2, r3
   beaf0:	d0f7      	beq.n	beae2 <strcmp>
   beaf2:	1ad0      	subs	r0, r2, r3
   beaf4:	4770      	bx	lr

000beaf6 <strcpy>:
   beaf6:	4603      	mov	r3, r0
   beaf8:	f811 2b01 	ldrb.w	r2, [r1], #1
   beafc:	f803 2b01 	strb.w	r2, [r3], #1
   beb00:	2a00      	cmp	r2, #0
   beb02:	d1f9      	bne.n	beaf8 <strcpy+0x2>
   beb04:	4770      	bx	lr
	...

000beb08 <strdup>:
   beb08:	4b02      	ldr	r3, [pc, #8]	; (beb14 <strdup+0xc>)
   beb0a:	4601      	mov	r1, r0
   beb0c:	6818      	ldr	r0, [r3, #0]
   beb0e:	f000 b803 	b.w	beb18 <_strdup_r>
   beb12:	bf00      	nop
   beb14:	2003da98 	.word	0x2003da98

000beb18 <_strdup_r>:
   beb18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   beb1a:	4604      	mov	r4, r0
   beb1c:	4608      	mov	r0, r1
   beb1e:	460d      	mov	r5, r1
   beb20:	f000 f80f 	bl	beb42 <strlen>
   beb24:	1c42      	adds	r2, r0, #1
   beb26:	4611      	mov	r1, r2
   beb28:	4620      	mov	r0, r4
   beb2a:	9201      	str	r2, [sp, #4]
   beb2c:	f7fb fa34 	bl	b9f98 <_malloc_r>
   beb30:	4604      	mov	r4, r0
   beb32:	b118      	cbz	r0, beb3c <_strdup_r+0x24>
   beb34:	9a01      	ldr	r2, [sp, #4]
   beb36:	4629      	mov	r1, r5
   beb38:	f7ff ff27 	bl	be98a <memcpy>
   beb3c:	4620      	mov	r0, r4
   beb3e:	b003      	add	sp, #12
   beb40:	bd30      	pop	{r4, r5, pc}

000beb42 <strlen>:
   beb42:	4603      	mov	r3, r0
   beb44:	f813 2b01 	ldrb.w	r2, [r3], #1
   beb48:	2a00      	cmp	r2, #0
   beb4a:	d1fb      	bne.n	beb44 <strlen+0x2>
   beb4c:	1a18      	subs	r0, r3, r0
   beb4e:	3801      	subs	r0, #1
   beb50:	4770      	bx	lr

000beb52 <strncmp>:
   beb52:	b510      	push	{r4, lr}
   beb54:	b17a      	cbz	r2, beb76 <strncmp+0x24>
   beb56:	4603      	mov	r3, r0
   beb58:	3901      	subs	r1, #1
   beb5a:	1884      	adds	r4, r0, r2
   beb5c:	f813 0b01 	ldrb.w	r0, [r3], #1
   beb60:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   beb64:	4290      	cmp	r0, r2
   beb66:	d101      	bne.n	beb6c <strncmp+0x1a>
   beb68:	42a3      	cmp	r3, r4
   beb6a:	d101      	bne.n	beb70 <strncmp+0x1e>
   beb6c:	1a80      	subs	r0, r0, r2
   beb6e:	bd10      	pop	{r4, pc}
   beb70:	2800      	cmp	r0, #0
   beb72:	d1f3      	bne.n	beb5c <strncmp+0xa>
   beb74:	e7fa      	b.n	beb6c <strncmp+0x1a>
   beb76:	4610      	mov	r0, r2
   beb78:	e7f9      	b.n	beb6e <strncmp+0x1c>

000beb7a <strncpy>:
   beb7a:	b510      	push	{r4, lr}
   beb7c:	3901      	subs	r1, #1
   beb7e:	4603      	mov	r3, r0
   beb80:	b132      	cbz	r2, beb90 <strncpy+0x16>
   beb82:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   beb86:	f803 4b01 	strb.w	r4, [r3], #1
   beb8a:	3a01      	subs	r2, #1
   beb8c:	2c00      	cmp	r4, #0
   beb8e:	d1f7      	bne.n	beb80 <strncpy+0x6>
   beb90:	441a      	add	r2, r3
   beb92:	2100      	movs	r1, #0
   beb94:	4293      	cmp	r3, r2
   beb96:	d100      	bne.n	beb9a <strncpy+0x20>
   beb98:	bd10      	pop	{r4, pc}
   beb9a:	f803 1b01 	strb.w	r1, [r3], #1
   beb9e:	e7f9      	b.n	beb94 <strncpy+0x1a>

000beba0 <strnlen>:
   beba0:	b510      	push	{r4, lr}
   beba2:	4602      	mov	r2, r0
   beba4:	4401      	add	r1, r0
   beba6:	428a      	cmp	r2, r1
   beba8:	4613      	mov	r3, r2
   bebaa:	d003      	beq.n	bebb4 <strnlen+0x14>
   bebac:	781c      	ldrb	r4, [r3, #0]
   bebae:	3201      	adds	r2, #1
   bebb0:	2c00      	cmp	r4, #0
   bebb2:	d1f8      	bne.n	beba6 <strnlen+0x6>
   bebb4:	1a18      	subs	r0, r3, r0
   bebb6:	bd10      	pop	{r4, pc}

000bebb8 <sulp>:
   bebb8:	b570      	push	{r4, r5, r6, lr}
   bebba:	4604      	mov	r4, r0
   bebbc:	460d      	mov	r5, r1
   bebbe:	ec45 4b10 	vmov	d0, r4, r5
   bebc2:	4616      	mov	r6, r2
   bebc4:	f001 fe0c 	bl	c07e0 <__ulp>
   bebc8:	ec51 0b10 	vmov	r0, r1, d0
   bebcc:	b17e      	cbz	r6, bebee <sulp+0x36>
   bebce:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bebd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bebd6:	2b00      	cmp	r3, #0
   bebd8:	dd09      	ble.n	bebee <sulp+0x36>
   bebda:	051b      	lsls	r3, r3, #20
   bebdc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bebe0:	2400      	movs	r4, #0
   bebe2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bebe6:	4622      	mov	r2, r4
   bebe8:	462b      	mov	r3, r5
   bebea:	f7ff fb89 	bl	be300 <__aeabi_dmul>
   bebee:	bd70      	pop	{r4, r5, r6, pc}

000bebf0 <_strtod_l>:
   bebf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bebf4:	ed2d 8b02 	vpush	{d8}
   bebf8:	b09d      	sub	sp, #116	; 0x74
   bebfa:	461f      	mov	r7, r3
   bebfc:	2300      	movs	r3, #0
   bebfe:	9318      	str	r3, [sp, #96]	; 0x60
   bec00:	4ba2      	ldr	r3, [pc, #648]	; (bee8c <_strtod_l+0x29c>)
   bec02:	9213      	str	r2, [sp, #76]	; 0x4c
   bec04:	681b      	ldr	r3, [r3, #0]
   bec06:	9305      	str	r3, [sp, #20]
   bec08:	4604      	mov	r4, r0
   bec0a:	4618      	mov	r0, r3
   bec0c:	4688      	mov	r8, r1
   bec0e:	f7ff ff98 	bl	beb42 <strlen>
   bec12:	f04f 0a00 	mov.w	sl, #0
   bec16:	4605      	mov	r5, r0
   bec18:	f04f 0b00 	mov.w	fp, #0
   bec1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bec20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bec22:	781a      	ldrb	r2, [r3, #0]
   bec24:	2a2b      	cmp	r2, #43	; 0x2b
   bec26:	d04e      	beq.n	becc6 <_strtod_l+0xd6>
   bec28:	d83b      	bhi.n	beca2 <_strtod_l+0xb2>
   bec2a:	2a0d      	cmp	r2, #13
   bec2c:	d834      	bhi.n	bec98 <_strtod_l+0xa8>
   bec2e:	2a08      	cmp	r2, #8
   bec30:	d834      	bhi.n	bec9c <_strtod_l+0xac>
   bec32:	2a00      	cmp	r2, #0
   bec34:	d03e      	beq.n	becb4 <_strtod_l+0xc4>
   bec36:	2300      	movs	r3, #0
   bec38:	930a      	str	r3, [sp, #40]	; 0x28
   bec3a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bec3c:	7833      	ldrb	r3, [r6, #0]
   bec3e:	2b30      	cmp	r3, #48	; 0x30
   bec40:	f040 80b0 	bne.w	beda4 <_strtod_l+0x1b4>
   bec44:	7873      	ldrb	r3, [r6, #1]
   bec46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bec4a:	2b58      	cmp	r3, #88	; 0x58
   bec4c:	d168      	bne.n	bed20 <_strtod_l+0x130>
   bec4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bec50:	9301      	str	r3, [sp, #4]
   bec52:	ab18      	add	r3, sp, #96	; 0x60
   bec54:	9702      	str	r7, [sp, #8]
   bec56:	9300      	str	r3, [sp, #0]
   bec58:	4a8d      	ldr	r2, [pc, #564]	; (bee90 <_strtod_l+0x2a0>)
   bec5a:	ab19      	add	r3, sp, #100	; 0x64
   bec5c:	a917      	add	r1, sp, #92	; 0x5c
   bec5e:	4620      	mov	r0, r4
   bec60:	f000 ff2e 	bl	bfac0 <__gethex>
   bec64:	f010 0707 	ands.w	r7, r0, #7
   bec68:	4605      	mov	r5, r0
   bec6a:	d005      	beq.n	bec78 <_strtod_l+0x88>
   bec6c:	2f06      	cmp	r7, #6
   bec6e:	d12c      	bne.n	becca <_strtod_l+0xda>
   bec70:	3601      	adds	r6, #1
   bec72:	2300      	movs	r3, #0
   bec74:	9617      	str	r6, [sp, #92]	; 0x5c
   bec76:	930a      	str	r3, [sp, #40]	; 0x28
   bec78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bec7a:	2b00      	cmp	r3, #0
   bec7c:	f040 8590 	bne.w	bf7a0 <_strtod_l+0xbb0>
   bec80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bec82:	b1eb      	cbz	r3, becc0 <_strtod_l+0xd0>
   bec84:	4652      	mov	r2, sl
   bec86:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bec8a:	ec43 2b10 	vmov	d0, r2, r3
   bec8e:	b01d      	add	sp, #116	; 0x74
   bec90:	ecbd 8b02 	vpop	{d8}
   bec94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bec98:	2a20      	cmp	r2, #32
   bec9a:	d1cc      	bne.n	bec36 <_strtod_l+0x46>
   bec9c:	3301      	adds	r3, #1
   bec9e:	9317      	str	r3, [sp, #92]	; 0x5c
   beca0:	e7be      	b.n	bec20 <_strtod_l+0x30>
   beca2:	2a2d      	cmp	r2, #45	; 0x2d
   beca4:	d1c7      	bne.n	bec36 <_strtod_l+0x46>
   beca6:	2201      	movs	r2, #1
   beca8:	920a      	str	r2, [sp, #40]	; 0x28
   becaa:	1c5a      	adds	r2, r3, #1
   becac:	9217      	str	r2, [sp, #92]	; 0x5c
   becae:	785b      	ldrb	r3, [r3, #1]
   becb0:	2b00      	cmp	r3, #0
   becb2:	d1c2      	bne.n	bec3a <_strtod_l+0x4a>
   becb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   becb6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   becba:	2b00      	cmp	r3, #0
   becbc:	f040 856e 	bne.w	bf79c <_strtod_l+0xbac>
   becc0:	4652      	mov	r2, sl
   becc2:	465b      	mov	r3, fp
   becc4:	e7e1      	b.n	bec8a <_strtod_l+0x9a>
   becc6:	2200      	movs	r2, #0
   becc8:	e7ee      	b.n	beca8 <_strtod_l+0xb8>
   becca:	9a18      	ldr	r2, [sp, #96]	; 0x60
   beccc:	b13a      	cbz	r2, becde <_strtod_l+0xee>
   becce:	2135      	movs	r1, #53	; 0x35
   becd0:	a81a      	add	r0, sp, #104	; 0x68
   becd2:	f001 fe90 	bl	c09f6 <__copybits>
   becd6:	9918      	ldr	r1, [sp, #96]	; 0x60
   becd8:	4620      	mov	r0, r4
   becda:	f001 fa4f 	bl	c017c <_Bfree>
   becde:	3f01      	subs	r7, #1
   bece0:	2f04      	cmp	r7, #4
   bece2:	d806      	bhi.n	becf2 <_strtod_l+0x102>
   bece4:	e8df f007 	tbb	[pc, r7]
   bece8:	1714030a 	.word	0x1714030a
   becec:	0a          	.byte	0x0a
   beced:	00          	.byte	0x00
   becee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   becf2:	0728      	lsls	r0, r5, #28
   becf4:	d5c0      	bpl.n	bec78 <_strtod_l+0x88>
   becf6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   becfa:	e7bd      	b.n	bec78 <_strtod_l+0x88>
   becfc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bed00:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bed02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bed06:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bed0a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bed0e:	e7f0      	b.n	becf2 <_strtod_l+0x102>
   bed10:	f8df b180 	ldr.w	fp, [pc, #384]	; bee94 <_strtod_l+0x2a4>
   bed14:	e7ed      	b.n	becf2 <_strtod_l+0x102>
   bed16:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bed1a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bed1e:	e7e8      	b.n	becf2 <_strtod_l+0x102>
   bed20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bed22:	1c5a      	adds	r2, r3, #1
   bed24:	9217      	str	r2, [sp, #92]	; 0x5c
   bed26:	785b      	ldrb	r3, [r3, #1]
   bed28:	2b30      	cmp	r3, #48	; 0x30
   bed2a:	d0f9      	beq.n	bed20 <_strtod_l+0x130>
   bed2c:	2b00      	cmp	r3, #0
   bed2e:	d0a3      	beq.n	bec78 <_strtod_l+0x88>
   bed30:	2301      	movs	r3, #1
   bed32:	f04f 0900 	mov.w	r9, #0
   bed36:	9304      	str	r3, [sp, #16]
   bed38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bed3a:	9308      	str	r3, [sp, #32]
   bed3c:	f8cd 901c 	str.w	r9, [sp, #28]
   bed40:	464f      	mov	r7, r9
   bed42:	220a      	movs	r2, #10
   bed44:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bed46:	7806      	ldrb	r6, [r0, #0]
   bed48:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bed4c:	b2d9      	uxtb	r1, r3
   bed4e:	2909      	cmp	r1, #9
   bed50:	d92a      	bls.n	beda8 <_strtod_l+0x1b8>
   bed52:	9905      	ldr	r1, [sp, #20]
   bed54:	462a      	mov	r2, r5
   bed56:	f7ff fefc 	bl	beb52 <strncmp>
   bed5a:	b398      	cbz	r0, bedc4 <_strtod_l+0x1d4>
   bed5c:	2000      	movs	r0, #0
   bed5e:	4632      	mov	r2, r6
   bed60:	463d      	mov	r5, r7
   bed62:	9005      	str	r0, [sp, #20]
   bed64:	4603      	mov	r3, r0
   bed66:	2a65      	cmp	r2, #101	; 0x65
   bed68:	d001      	beq.n	bed6e <_strtod_l+0x17e>
   bed6a:	2a45      	cmp	r2, #69	; 0x45
   bed6c:	d118      	bne.n	beda0 <_strtod_l+0x1b0>
   bed6e:	b91d      	cbnz	r5, bed78 <_strtod_l+0x188>
   bed70:	9a04      	ldr	r2, [sp, #16]
   bed72:	4302      	orrs	r2, r0
   bed74:	d09e      	beq.n	becb4 <_strtod_l+0xc4>
   bed76:	2500      	movs	r5, #0
   bed78:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bed7c:	f108 0201 	add.w	r2, r8, #1
   bed80:	9217      	str	r2, [sp, #92]	; 0x5c
   bed82:	f898 2001 	ldrb.w	r2, [r8, #1]
   bed86:	2a2b      	cmp	r2, #43	; 0x2b
   bed88:	d075      	beq.n	bee76 <_strtod_l+0x286>
   bed8a:	2a2d      	cmp	r2, #45	; 0x2d
   bed8c:	d07b      	beq.n	bee86 <_strtod_l+0x296>
   bed8e:	f04f 0c00 	mov.w	ip, #0
   bed92:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bed96:	2909      	cmp	r1, #9
   bed98:	f240 8082 	bls.w	beea0 <_strtod_l+0x2b0>
   bed9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   beda0:	2600      	movs	r6, #0
   beda2:	e09d      	b.n	beee0 <_strtod_l+0x2f0>
   beda4:	2300      	movs	r3, #0
   beda6:	e7c4      	b.n	bed32 <_strtod_l+0x142>
   beda8:	2f08      	cmp	r7, #8
   bedaa:	bfd8      	it	le
   bedac:	9907      	ldrle	r1, [sp, #28]
   bedae:	f100 0001 	add.w	r0, r0, #1
   bedb2:	bfda      	itte	le
   bedb4:	fb02 3301 	mlale	r3, r2, r1, r3
   bedb8:	9307      	strle	r3, [sp, #28]
   bedba:	fb02 3909 	mlagt	r9, r2, r9, r3
   bedbe:	3701      	adds	r7, #1
   bedc0:	9017      	str	r0, [sp, #92]	; 0x5c
   bedc2:	e7bf      	b.n	bed44 <_strtod_l+0x154>
   bedc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bedc6:	195a      	adds	r2, r3, r5
   bedc8:	9217      	str	r2, [sp, #92]	; 0x5c
   bedca:	5d5a      	ldrb	r2, [r3, r5]
   bedcc:	2f00      	cmp	r7, #0
   bedce:	d037      	beq.n	bee40 <_strtod_l+0x250>
   bedd0:	9005      	str	r0, [sp, #20]
   bedd2:	463d      	mov	r5, r7
   bedd4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bedd8:	2b09      	cmp	r3, #9
   bedda:	d912      	bls.n	bee02 <_strtod_l+0x212>
   beddc:	2301      	movs	r3, #1
   bedde:	e7c2      	b.n	bed66 <_strtod_l+0x176>
   bede0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bede2:	1c5a      	adds	r2, r3, #1
   bede4:	9217      	str	r2, [sp, #92]	; 0x5c
   bede6:	785a      	ldrb	r2, [r3, #1]
   bede8:	3001      	adds	r0, #1
   bedea:	2a30      	cmp	r2, #48	; 0x30
   bedec:	d0f8      	beq.n	bede0 <_strtod_l+0x1f0>
   bedee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bedf2:	2b08      	cmp	r3, #8
   bedf4:	f200 84d9 	bhi.w	bf7aa <_strtod_l+0xbba>
   bedf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bedfa:	9005      	str	r0, [sp, #20]
   bedfc:	2000      	movs	r0, #0
   bedfe:	9308      	str	r3, [sp, #32]
   bee00:	4605      	mov	r5, r0
   bee02:	3a30      	subs	r2, #48	; 0x30
   bee04:	f100 0301 	add.w	r3, r0, #1
   bee08:	d014      	beq.n	bee34 <_strtod_l+0x244>
   bee0a:	9905      	ldr	r1, [sp, #20]
   bee0c:	4419      	add	r1, r3
   bee0e:	9105      	str	r1, [sp, #20]
   bee10:	462b      	mov	r3, r5
   bee12:	eb00 0e05 	add.w	lr, r0, r5
   bee16:	210a      	movs	r1, #10
   bee18:	4573      	cmp	r3, lr
   bee1a:	d113      	bne.n	bee44 <_strtod_l+0x254>
   bee1c:	182b      	adds	r3, r5, r0
   bee1e:	2b08      	cmp	r3, #8
   bee20:	f105 0501 	add.w	r5, r5, #1
   bee24:	4405      	add	r5, r0
   bee26:	dc1c      	bgt.n	bee62 <_strtod_l+0x272>
   bee28:	9907      	ldr	r1, [sp, #28]
   bee2a:	230a      	movs	r3, #10
   bee2c:	fb03 2301 	mla	r3, r3, r1, r2
   bee30:	9307      	str	r3, [sp, #28]
   bee32:	2300      	movs	r3, #0
   bee34:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bee36:	1c51      	adds	r1, r2, #1
   bee38:	9117      	str	r1, [sp, #92]	; 0x5c
   bee3a:	7852      	ldrb	r2, [r2, #1]
   bee3c:	4618      	mov	r0, r3
   bee3e:	e7c9      	b.n	bedd4 <_strtod_l+0x1e4>
   bee40:	4638      	mov	r0, r7
   bee42:	e7d2      	b.n	bedea <_strtod_l+0x1fa>
   bee44:	2b08      	cmp	r3, #8
   bee46:	dc04      	bgt.n	bee52 <_strtod_l+0x262>
   bee48:	9e07      	ldr	r6, [sp, #28]
   bee4a:	434e      	muls	r6, r1
   bee4c:	9607      	str	r6, [sp, #28]
   bee4e:	3301      	adds	r3, #1
   bee50:	e7e2      	b.n	bee18 <_strtod_l+0x228>
   bee52:	f103 0c01 	add.w	ip, r3, #1
   bee56:	f1bc 0f10 	cmp.w	ip, #16
   bee5a:	bfd8      	it	le
   bee5c:	fb01 f909 	mulle.w	r9, r1, r9
   bee60:	e7f5      	b.n	bee4e <_strtod_l+0x25e>
   bee62:	2d10      	cmp	r5, #16
   bee64:	bfdc      	itt	le
   bee66:	230a      	movle	r3, #10
   bee68:	fb03 2909 	mlale	r9, r3, r9, r2
   bee6c:	e7e1      	b.n	bee32 <_strtod_l+0x242>
   bee6e:	2300      	movs	r3, #0
   bee70:	9305      	str	r3, [sp, #20]
   bee72:	2301      	movs	r3, #1
   bee74:	e77c      	b.n	bed70 <_strtod_l+0x180>
   bee76:	f04f 0c00 	mov.w	ip, #0
   bee7a:	f108 0202 	add.w	r2, r8, #2
   bee7e:	9217      	str	r2, [sp, #92]	; 0x5c
   bee80:	f898 2002 	ldrb.w	r2, [r8, #2]
   bee84:	e785      	b.n	bed92 <_strtod_l+0x1a2>
   bee86:	f04f 0c01 	mov.w	ip, #1
   bee8a:	e7f6      	b.n	bee7a <_strtod_l+0x28a>
   bee8c:	000c237c 	.word	0x000c237c
   bee90:	000c21b8 	.word	0x000c21b8
   bee94:	7ff00000 	.word	0x7ff00000
   bee98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bee9a:	1c51      	adds	r1, r2, #1
   bee9c:	9117      	str	r1, [sp, #92]	; 0x5c
   bee9e:	7852      	ldrb	r2, [r2, #1]
   beea0:	2a30      	cmp	r2, #48	; 0x30
   beea2:	d0f9      	beq.n	bee98 <_strtod_l+0x2a8>
   beea4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   beea8:	2908      	cmp	r1, #8
   beeaa:	f63f af79 	bhi.w	beda0 <_strtod_l+0x1b0>
   beeae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   beeb2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   beeb4:	9206      	str	r2, [sp, #24]
   beeb6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   beeb8:	1c51      	adds	r1, r2, #1
   beeba:	9117      	str	r1, [sp, #92]	; 0x5c
   beebc:	7852      	ldrb	r2, [r2, #1]
   beebe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   beec2:	2e09      	cmp	r6, #9
   beec4:	d937      	bls.n	bef36 <_strtod_l+0x346>
   beec6:	9e06      	ldr	r6, [sp, #24]
   beec8:	1b89      	subs	r1, r1, r6
   beeca:	2908      	cmp	r1, #8
   beecc:	f644 661f 	movw	r6, #19999	; 0x4e1f
   beed0:	dc02      	bgt.n	beed8 <_strtod_l+0x2e8>
   beed2:	4576      	cmp	r6, lr
   beed4:	bfa8      	it	ge
   beed6:	4676      	movge	r6, lr
   beed8:	f1bc 0f00 	cmp.w	ip, #0
   beedc:	d000      	beq.n	beee0 <_strtod_l+0x2f0>
   beede:	4276      	negs	r6, r6
   beee0:	2d00      	cmp	r5, #0
   beee2:	d14d      	bne.n	bef80 <_strtod_l+0x390>
   beee4:	9904      	ldr	r1, [sp, #16]
   beee6:	4301      	orrs	r1, r0
   beee8:	f47f aec6 	bne.w	bec78 <_strtod_l+0x88>
   beeec:	2b00      	cmp	r3, #0
   beeee:	f47f aee1 	bne.w	becb4 <_strtod_l+0xc4>
   beef2:	2a69      	cmp	r2, #105	; 0x69
   beef4:	d027      	beq.n	bef46 <_strtod_l+0x356>
   beef6:	dc24      	bgt.n	bef42 <_strtod_l+0x352>
   beef8:	2a49      	cmp	r2, #73	; 0x49
   beefa:	d024      	beq.n	bef46 <_strtod_l+0x356>
   beefc:	2a4e      	cmp	r2, #78	; 0x4e
   beefe:	f47f aed9 	bne.w	becb4 <_strtod_l+0xc4>
   bef02:	499f      	ldr	r1, [pc, #636]	; (bf180 <_strtod_l+0x590>)
   bef04:	a817      	add	r0, sp, #92	; 0x5c
   bef06:	f001 f833 	bl	bff70 <__match>
   bef0a:	2800      	cmp	r0, #0
   bef0c:	f43f aed2 	beq.w	becb4 <_strtod_l+0xc4>
   bef10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bef12:	781b      	ldrb	r3, [r3, #0]
   bef14:	2b28      	cmp	r3, #40	; 0x28
   bef16:	d12d      	bne.n	bef74 <_strtod_l+0x384>
   bef18:	499a      	ldr	r1, [pc, #616]	; (bf184 <_strtod_l+0x594>)
   bef1a:	aa1a      	add	r2, sp, #104	; 0x68
   bef1c:	a817      	add	r0, sp, #92	; 0x5c
   bef1e:	f001 f83b 	bl	bff98 <__hexnan>
   bef22:	2805      	cmp	r0, #5
   bef24:	d126      	bne.n	bef74 <_strtod_l+0x384>
   bef26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bef28:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bef2c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bef30:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bef34:	e6a0      	b.n	bec78 <_strtod_l+0x88>
   bef36:	210a      	movs	r1, #10
   bef38:	fb01 2e0e 	mla	lr, r1, lr, r2
   bef3c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bef40:	e7b9      	b.n	beeb6 <_strtod_l+0x2c6>
   bef42:	2a6e      	cmp	r2, #110	; 0x6e
   bef44:	e7db      	b.n	beefe <_strtod_l+0x30e>
   bef46:	4990      	ldr	r1, [pc, #576]	; (bf188 <_strtod_l+0x598>)
   bef48:	a817      	add	r0, sp, #92	; 0x5c
   bef4a:	f001 f811 	bl	bff70 <__match>
   bef4e:	2800      	cmp	r0, #0
   bef50:	f43f aeb0 	beq.w	becb4 <_strtod_l+0xc4>
   bef54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bef56:	498d      	ldr	r1, [pc, #564]	; (bf18c <_strtod_l+0x59c>)
   bef58:	3b01      	subs	r3, #1
   bef5a:	a817      	add	r0, sp, #92	; 0x5c
   bef5c:	9317      	str	r3, [sp, #92]	; 0x5c
   bef5e:	f001 f807 	bl	bff70 <__match>
   bef62:	b910      	cbnz	r0, bef6a <_strtod_l+0x37a>
   bef64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bef66:	3301      	adds	r3, #1
   bef68:	9317      	str	r3, [sp, #92]	; 0x5c
   bef6a:	f8df b230 	ldr.w	fp, [pc, #560]	; bf19c <_strtod_l+0x5ac>
   bef6e:	f04f 0a00 	mov.w	sl, #0
   bef72:	e681      	b.n	bec78 <_strtod_l+0x88>
   bef74:	4886      	ldr	r0, [pc, #536]	; (bf190 <_strtod_l+0x5a0>)
   bef76:	f001 fd93 	bl	c0aa0 <nan>
   bef7a:	ec5b ab10 	vmov	sl, fp, d0
   bef7e:	e67b      	b.n	bec78 <_strtod_l+0x88>
   bef80:	9b05      	ldr	r3, [sp, #20]
   bef82:	9807      	ldr	r0, [sp, #28]
   bef84:	1af3      	subs	r3, r6, r3
   bef86:	2f00      	cmp	r7, #0
   bef88:	bf08      	it	eq
   bef8a:	462f      	moveq	r7, r5
   bef8c:	2d10      	cmp	r5, #16
   bef8e:	9306      	str	r3, [sp, #24]
   bef90:	46a8      	mov	r8, r5
   bef92:	bfa8      	it	ge
   bef94:	f04f 0810 	movge.w	r8, #16
   bef98:	f7ff f938 	bl	be20c <__aeabi_ui2d>
   bef9c:	2d09      	cmp	r5, #9
   bef9e:	4682      	mov	sl, r0
   befa0:	468b      	mov	fp, r1
   befa2:	dd13      	ble.n	befcc <_strtod_l+0x3dc>
   befa4:	4b7b      	ldr	r3, [pc, #492]	; (bf194 <_strtod_l+0x5a4>)
   befa6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   befaa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   befae:	f7ff f9a7 	bl	be300 <__aeabi_dmul>
   befb2:	4682      	mov	sl, r0
   befb4:	4648      	mov	r0, r9
   befb6:	468b      	mov	fp, r1
   befb8:	f7ff f928 	bl	be20c <__aeabi_ui2d>
   befbc:	4602      	mov	r2, r0
   befbe:	460b      	mov	r3, r1
   befc0:	4650      	mov	r0, sl
   befc2:	4659      	mov	r1, fp
   befc4:	f7fe ffe6 	bl	bdf94 <__adddf3>
   befc8:	4682      	mov	sl, r0
   befca:	468b      	mov	fp, r1
   befcc:	2d0f      	cmp	r5, #15
   befce:	dc38      	bgt.n	bf042 <_strtod_l+0x452>
   befd0:	9b06      	ldr	r3, [sp, #24]
   befd2:	2b00      	cmp	r3, #0
   befd4:	f43f ae50 	beq.w	bec78 <_strtod_l+0x88>
   befd8:	dd24      	ble.n	bf024 <_strtod_l+0x434>
   befda:	2b16      	cmp	r3, #22
   befdc:	dc0b      	bgt.n	beff6 <_strtod_l+0x406>
   befde:	496d      	ldr	r1, [pc, #436]	; (bf194 <_strtod_l+0x5a4>)
   befe0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   befe4:	e9d1 0100 	ldrd	r0, r1, [r1]
   befe8:	4652      	mov	r2, sl
   befea:	465b      	mov	r3, fp
   befec:	f7ff f988 	bl	be300 <__aeabi_dmul>
   beff0:	4682      	mov	sl, r0
   beff2:	468b      	mov	fp, r1
   beff4:	e640      	b.n	bec78 <_strtod_l+0x88>
   beff6:	9a06      	ldr	r2, [sp, #24]
   beff8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   beffc:	4293      	cmp	r3, r2
   beffe:	db20      	blt.n	bf042 <_strtod_l+0x452>
   bf000:	4c64      	ldr	r4, [pc, #400]	; (bf194 <_strtod_l+0x5a4>)
   bf002:	f1c5 050f 	rsb	r5, r5, #15
   bf006:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bf00a:	4652      	mov	r2, sl
   bf00c:	465b      	mov	r3, fp
   bf00e:	e9d1 0100 	ldrd	r0, r1, [r1]
   bf012:	f7ff f975 	bl	be300 <__aeabi_dmul>
   bf016:	9b06      	ldr	r3, [sp, #24]
   bf018:	1b5d      	subs	r5, r3, r5
   bf01a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bf01e:	e9d4 2300 	ldrd	r2, r3, [r4]
   bf022:	e7e3      	b.n	befec <_strtod_l+0x3fc>
   bf024:	9b06      	ldr	r3, [sp, #24]
   bf026:	3316      	adds	r3, #22
   bf028:	db0b      	blt.n	bf042 <_strtod_l+0x452>
   bf02a:	9b05      	ldr	r3, [sp, #20]
   bf02c:	1b9e      	subs	r6, r3, r6
   bf02e:	4b59      	ldr	r3, [pc, #356]	; (bf194 <_strtod_l+0x5a4>)
   bf030:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bf034:	e9d6 2300 	ldrd	r2, r3, [r6]
   bf038:	4650      	mov	r0, sl
   bf03a:	4659      	mov	r1, fp
   bf03c:	f7ff fa8a 	bl	be554 <__aeabi_ddiv>
   bf040:	e7d6      	b.n	beff0 <_strtod_l+0x400>
   bf042:	9b06      	ldr	r3, [sp, #24]
   bf044:	eba5 0808 	sub.w	r8, r5, r8
   bf048:	4498      	add	r8, r3
   bf04a:	f1b8 0f00 	cmp.w	r8, #0
   bf04e:	dd74      	ble.n	bf13a <_strtod_l+0x54a>
   bf050:	f018 030f 	ands.w	r3, r8, #15
   bf054:	d00a      	beq.n	bf06c <_strtod_l+0x47c>
   bf056:	494f      	ldr	r1, [pc, #316]	; (bf194 <_strtod_l+0x5a4>)
   bf058:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bf05c:	4652      	mov	r2, sl
   bf05e:	465b      	mov	r3, fp
   bf060:	e9d1 0100 	ldrd	r0, r1, [r1]
   bf064:	f7ff f94c 	bl	be300 <__aeabi_dmul>
   bf068:	4682      	mov	sl, r0
   bf06a:	468b      	mov	fp, r1
   bf06c:	f038 080f 	bics.w	r8, r8, #15
   bf070:	d04f      	beq.n	bf112 <_strtod_l+0x522>
   bf072:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bf076:	dd22      	ble.n	bf0be <_strtod_l+0x4ce>
   bf078:	2500      	movs	r5, #0
   bf07a:	462e      	mov	r6, r5
   bf07c:	9507      	str	r5, [sp, #28]
   bf07e:	9505      	str	r5, [sp, #20]
   bf080:	2322      	movs	r3, #34	; 0x22
   bf082:	f8df b118 	ldr.w	fp, [pc, #280]	; bf19c <_strtod_l+0x5ac>
   bf086:	6023      	str	r3, [r4, #0]
   bf088:	f04f 0a00 	mov.w	sl, #0
   bf08c:	9b07      	ldr	r3, [sp, #28]
   bf08e:	2b00      	cmp	r3, #0
   bf090:	f43f adf2 	beq.w	bec78 <_strtod_l+0x88>
   bf094:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf096:	4620      	mov	r0, r4
   bf098:	f001 f870 	bl	c017c <_Bfree>
   bf09c:	9905      	ldr	r1, [sp, #20]
   bf09e:	4620      	mov	r0, r4
   bf0a0:	f001 f86c 	bl	c017c <_Bfree>
   bf0a4:	4631      	mov	r1, r6
   bf0a6:	4620      	mov	r0, r4
   bf0a8:	f001 f868 	bl	c017c <_Bfree>
   bf0ac:	9907      	ldr	r1, [sp, #28]
   bf0ae:	4620      	mov	r0, r4
   bf0b0:	f001 f864 	bl	c017c <_Bfree>
   bf0b4:	4629      	mov	r1, r5
   bf0b6:	4620      	mov	r0, r4
   bf0b8:	f001 f860 	bl	c017c <_Bfree>
   bf0bc:	e5dc      	b.n	bec78 <_strtod_l+0x88>
   bf0be:	4b36      	ldr	r3, [pc, #216]	; (bf198 <_strtod_l+0x5a8>)
   bf0c0:	9304      	str	r3, [sp, #16]
   bf0c2:	2300      	movs	r3, #0
   bf0c4:	ea4f 1828 	mov.w	r8, r8, asr #4
   bf0c8:	4650      	mov	r0, sl
   bf0ca:	4659      	mov	r1, fp
   bf0cc:	4699      	mov	r9, r3
   bf0ce:	f1b8 0f01 	cmp.w	r8, #1
   bf0d2:	dc21      	bgt.n	bf118 <_strtod_l+0x528>
   bf0d4:	b10b      	cbz	r3, bf0da <_strtod_l+0x4ea>
   bf0d6:	4682      	mov	sl, r0
   bf0d8:	468b      	mov	fp, r1
   bf0da:	4b2f      	ldr	r3, [pc, #188]	; (bf198 <_strtod_l+0x5a8>)
   bf0dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bf0e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bf0e4:	4652      	mov	r2, sl
   bf0e6:	465b      	mov	r3, fp
   bf0e8:	e9d9 0100 	ldrd	r0, r1, [r9]
   bf0ec:	f7ff f908 	bl	be300 <__aeabi_dmul>
   bf0f0:	4b2a      	ldr	r3, [pc, #168]	; (bf19c <_strtod_l+0x5ac>)
   bf0f2:	460a      	mov	r2, r1
   bf0f4:	400b      	ands	r3, r1
   bf0f6:	492a      	ldr	r1, [pc, #168]	; (bf1a0 <_strtod_l+0x5b0>)
   bf0f8:	428b      	cmp	r3, r1
   bf0fa:	4682      	mov	sl, r0
   bf0fc:	d8bc      	bhi.n	bf078 <_strtod_l+0x488>
   bf0fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bf102:	428b      	cmp	r3, r1
   bf104:	bf86      	itte	hi
   bf106:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bf1a4 <_strtod_l+0x5b4>
   bf10a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bf10e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bf112:	2300      	movs	r3, #0
   bf114:	9304      	str	r3, [sp, #16]
   bf116:	e084      	b.n	bf222 <_strtod_l+0x632>
   bf118:	f018 0f01 	tst.w	r8, #1
   bf11c:	d005      	beq.n	bf12a <_strtod_l+0x53a>
   bf11e:	9b04      	ldr	r3, [sp, #16]
   bf120:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf124:	f7ff f8ec 	bl	be300 <__aeabi_dmul>
   bf128:	2301      	movs	r3, #1
   bf12a:	9a04      	ldr	r2, [sp, #16]
   bf12c:	3208      	adds	r2, #8
   bf12e:	f109 0901 	add.w	r9, r9, #1
   bf132:	ea4f 0868 	mov.w	r8, r8, asr #1
   bf136:	9204      	str	r2, [sp, #16]
   bf138:	e7c9      	b.n	bf0ce <_strtod_l+0x4de>
   bf13a:	d0ea      	beq.n	bf112 <_strtod_l+0x522>
   bf13c:	f1c8 0800 	rsb	r8, r8, #0
   bf140:	f018 020f 	ands.w	r2, r8, #15
   bf144:	d00a      	beq.n	bf15c <_strtod_l+0x56c>
   bf146:	4b13      	ldr	r3, [pc, #76]	; (bf194 <_strtod_l+0x5a4>)
   bf148:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bf14c:	4650      	mov	r0, sl
   bf14e:	4659      	mov	r1, fp
   bf150:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf154:	f7ff f9fe 	bl	be554 <__aeabi_ddiv>
   bf158:	4682      	mov	sl, r0
   bf15a:	468b      	mov	fp, r1
   bf15c:	ea5f 1828 	movs.w	r8, r8, asr #4
   bf160:	d0d7      	beq.n	bf112 <_strtod_l+0x522>
   bf162:	f1b8 0f1f 	cmp.w	r8, #31
   bf166:	dd1f      	ble.n	bf1a8 <_strtod_l+0x5b8>
   bf168:	2500      	movs	r5, #0
   bf16a:	462e      	mov	r6, r5
   bf16c:	9507      	str	r5, [sp, #28]
   bf16e:	9505      	str	r5, [sp, #20]
   bf170:	2322      	movs	r3, #34	; 0x22
   bf172:	f04f 0a00 	mov.w	sl, #0
   bf176:	f04f 0b00 	mov.w	fp, #0
   bf17a:	6023      	str	r3, [r4, #0]
   bf17c:	e786      	b.n	bf08c <_strtod_l+0x49c>
   bf17e:	bf00      	nop
   bf180:	000c21b2 	.word	0x000c21b2
   bf184:	000c21cc 	.word	0x000c21cc
   bf188:	000c21a9 	.word	0x000c21a9
   bf18c:	000c21ac 	.word	0x000c21ac
   bf190:	000c1067 	.word	0x000c1067
   bf194:	000c2418 	.word	0x000c2418
   bf198:	000c23f0 	.word	0x000c23f0
   bf19c:	7ff00000 	.word	0x7ff00000
   bf1a0:	7ca00000 	.word	0x7ca00000
   bf1a4:	7fefffff 	.word	0x7fefffff
   bf1a8:	f018 0310 	ands.w	r3, r8, #16
   bf1ac:	bf18      	it	ne
   bf1ae:	236a      	movne	r3, #106	; 0x6a
   bf1b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bf560 <_strtod_l+0x970>
   bf1b4:	9304      	str	r3, [sp, #16]
   bf1b6:	4650      	mov	r0, sl
   bf1b8:	4659      	mov	r1, fp
   bf1ba:	2300      	movs	r3, #0
   bf1bc:	f018 0f01 	tst.w	r8, #1
   bf1c0:	d004      	beq.n	bf1cc <_strtod_l+0x5dc>
   bf1c2:	e9d9 2300 	ldrd	r2, r3, [r9]
   bf1c6:	f7ff f89b 	bl	be300 <__aeabi_dmul>
   bf1ca:	2301      	movs	r3, #1
   bf1cc:	ea5f 0868 	movs.w	r8, r8, asr #1
   bf1d0:	f109 0908 	add.w	r9, r9, #8
   bf1d4:	d1f2      	bne.n	bf1bc <_strtod_l+0x5cc>
   bf1d6:	b10b      	cbz	r3, bf1dc <_strtod_l+0x5ec>
   bf1d8:	4682      	mov	sl, r0
   bf1da:	468b      	mov	fp, r1
   bf1dc:	9b04      	ldr	r3, [sp, #16]
   bf1de:	b1c3      	cbz	r3, bf212 <_strtod_l+0x622>
   bf1e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bf1e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bf1e8:	2b00      	cmp	r3, #0
   bf1ea:	4659      	mov	r1, fp
   bf1ec:	dd11      	ble.n	bf212 <_strtod_l+0x622>
   bf1ee:	2b1f      	cmp	r3, #31
   bf1f0:	f340 8124 	ble.w	bf43c <_strtod_l+0x84c>
   bf1f4:	2b34      	cmp	r3, #52	; 0x34
   bf1f6:	bfde      	ittt	le
   bf1f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bf1fc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bf200:	fa03 f202 	lslle.w	r2, r3, r2
   bf204:	f04f 0a00 	mov.w	sl, #0
   bf208:	bfcc      	ite	gt
   bf20a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bf20e:	ea02 0b01 	andle.w	fp, r2, r1
   bf212:	2200      	movs	r2, #0
   bf214:	2300      	movs	r3, #0
   bf216:	4650      	mov	r0, sl
   bf218:	4659      	mov	r1, fp
   bf21a:	f7ff fad9 	bl	be7d0 <__aeabi_dcmpeq>
   bf21e:	2800      	cmp	r0, #0
   bf220:	d1a2      	bne.n	bf168 <_strtod_l+0x578>
   bf222:	9b07      	ldr	r3, [sp, #28]
   bf224:	9300      	str	r3, [sp, #0]
   bf226:	9908      	ldr	r1, [sp, #32]
   bf228:	462b      	mov	r3, r5
   bf22a:	463a      	mov	r2, r7
   bf22c:	4620      	mov	r0, r4
   bf22e:	f001 f80d 	bl	c024c <__s2b>
   bf232:	9007      	str	r0, [sp, #28]
   bf234:	2800      	cmp	r0, #0
   bf236:	f43f af1f 	beq.w	bf078 <_strtod_l+0x488>
   bf23a:	9b05      	ldr	r3, [sp, #20]
   bf23c:	1b9e      	subs	r6, r3, r6
   bf23e:	9b06      	ldr	r3, [sp, #24]
   bf240:	2b00      	cmp	r3, #0
   bf242:	bfb4      	ite	lt
   bf244:	4633      	movlt	r3, r6
   bf246:	2300      	movge	r3, #0
   bf248:	930c      	str	r3, [sp, #48]	; 0x30
   bf24a:	9b06      	ldr	r3, [sp, #24]
   bf24c:	2500      	movs	r5, #0
   bf24e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bf252:	9312      	str	r3, [sp, #72]	; 0x48
   bf254:	462e      	mov	r6, r5
   bf256:	9b07      	ldr	r3, [sp, #28]
   bf258:	4620      	mov	r0, r4
   bf25a:	6859      	ldr	r1, [r3, #4]
   bf25c:	f000 ff4e 	bl	c00fc <_Balloc>
   bf260:	9005      	str	r0, [sp, #20]
   bf262:	2800      	cmp	r0, #0
   bf264:	f43f af0c 	beq.w	bf080 <_strtod_l+0x490>
   bf268:	9b07      	ldr	r3, [sp, #28]
   bf26a:	691a      	ldr	r2, [r3, #16]
   bf26c:	3202      	adds	r2, #2
   bf26e:	f103 010c 	add.w	r1, r3, #12
   bf272:	0092      	lsls	r2, r2, #2
   bf274:	300c      	adds	r0, #12
   bf276:	f7ff fb88 	bl	be98a <memcpy>
   bf27a:	ec4b ab10 	vmov	d0, sl, fp
   bf27e:	aa1a      	add	r2, sp, #104	; 0x68
   bf280:	a919      	add	r1, sp, #100	; 0x64
   bf282:	4620      	mov	r0, r4
   bf284:	f001 fb28 	bl	c08d8 <__d2b>
   bf288:	ec4b ab18 	vmov	d8, sl, fp
   bf28c:	9018      	str	r0, [sp, #96]	; 0x60
   bf28e:	2800      	cmp	r0, #0
   bf290:	f43f aef6 	beq.w	bf080 <_strtod_l+0x490>
   bf294:	2101      	movs	r1, #1
   bf296:	4620      	mov	r0, r4
   bf298:	f001 f872 	bl	c0380 <__i2b>
   bf29c:	4606      	mov	r6, r0
   bf29e:	2800      	cmp	r0, #0
   bf2a0:	f43f aeee 	beq.w	bf080 <_strtod_l+0x490>
   bf2a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bf2a6:	9904      	ldr	r1, [sp, #16]
   bf2a8:	2b00      	cmp	r3, #0
   bf2aa:	bfab      	itete	ge
   bf2ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bf2ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bf2b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bf2b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bf2b6:	bfac      	ite	ge
   bf2b8:	eb03 0902 	addge.w	r9, r3, r2
   bf2bc:	1ad7      	sublt	r7, r2, r3
   bf2be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bf2c0:	eba3 0801 	sub.w	r8, r3, r1
   bf2c4:	4490      	add	r8, r2
   bf2c6:	4ba1      	ldr	r3, [pc, #644]	; (bf54c <_strtod_l+0x95c>)
   bf2c8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bf2cc:	4598      	cmp	r8, r3
   bf2ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bf2d2:	f280 80c7 	bge.w	bf464 <_strtod_l+0x874>
   bf2d6:	eba3 0308 	sub.w	r3, r3, r8
   bf2da:	2b1f      	cmp	r3, #31
   bf2dc:	eba2 0203 	sub.w	r2, r2, r3
   bf2e0:	f04f 0101 	mov.w	r1, #1
   bf2e4:	f300 80b1 	bgt.w	bf44a <_strtod_l+0x85a>
   bf2e8:	fa01 f303 	lsl.w	r3, r1, r3
   bf2ec:	930d      	str	r3, [sp, #52]	; 0x34
   bf2ee:	2300      	movs	r3, #0
   bf2f0:	9308      	str	r3, [sp, #32]
   bf2f2:	eb09 0802 	add.w	r8, r9, r2
   bf2f6:	9b04      	ldr	r3, [sp, #16]
   bf2f8:	45c1      	cmp	r9, r8
   bf2fa:	4417      	add	r7, r2
   bf2fc:	441f      	add	r7, r3
   bf2fe:	464b      	mov	r3, r9
   bf300:	bfa8      	it	ge
   bf302:	4643      	movge	r3, r8
   bf304:	42bb      	cmp	r3, r7
   bf306:	bfa8      	it	ge
   bf308:	463b      	movge	r3, r7
   bf30a:	2b00      	cmp	r3, #0
   bf30c:	bfc2      	ittt	gt
   bf30e:	eba8 0803 	subgt.w	r8, r8, r3
   bf312:	1aff      	subgt	r7, r7, r3
   bf314:	eba9 0903 	subgt.w	r9, r9, r3
   bf318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bf31a:	2b00      	cmp	r3, #0
   bf31c:	dd17      	ble.n	bf34e <_strtod_l+0x75e>
   bf31e:	4631      	mov	r1, r6
   bf320:	461a      	mov	r2, r3
   bf322:	4620      	mov	r0, r4
   bf324:	f001 f8ec 	bl	c0500 <__pow5mult>
   bf328:	4606      	mov	r6, r0
   bf32a:	2800      	cmp	r0, #0
   bf32c:	f43f aea8 	beq.w	bf080 <_strtod_l+0x490>
   bf330:	4601      	mov	r1, r0
   bf332:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bf334:	4620      	mov	r0, r4
   bf336:	f001 f839 	bl	c03ac <__multiply>
   bf33a:	900b      	str	r0, [sp, #44]	; 0x2c
   bf33c:	2800      	cmp	r0, #0
   bf33e:	f43f ae9f 	beq.w	bf080 <_strtod_l+0x490>
   bf342:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf344:	4620      	mov	r0, r4
   bf346:	f000 ff19 	bl	c017c <_Bfree>
   bf34a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf34c:	9318      	str	r3, [sp, #96]	; 0x60
   bf34e:	f1b8 0f00 	cmp.w	r8, #0
   bf352:	f300 808c 	bgt.w	bf46e <_strtod_l+0x87e>
   bf356:	9b06      	ldr	r3, [sp, #24]
   bf358:	2b00      	cmp	r3, #0
   bf35a:	dd08      	ble.n	bf36e <_strtod_l+0x77e>
   bf35c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bf35e:	9905      	ldr	r1, [sp, #20]
   bf360:	4620      	mov	r0, r4
   bf362:	f001 f8cd 	bl	c0500 <__pow5mult>
   bf366:	9005      	str	r0, [sp, #20]
   bf368:	2800      	cmp	r0, #0
   bf36a:	f43f ae89 	beq.w	bf080 <_strtod_l+0x490>
   bf36e:	2f00      	cmp	r7, #0
   bf370:	dd08      	ble.n	bf384 <_strtod_l+0x794>
   bf372:	9905      	ldr	r1, [sp, #20]
   bf374:	463a      	mov	r2, r7
   bf376:	4620      	mov	r0, r4
   bf378:	f001 f91c 	bl	c05b4 <__lshift>
   bf37c:	9005      	str	r0, [sp, #20]
   bf37e:	2800      	cmp	r0, #0
   bf380:	f43f ae7e 	beq.w	bf080 <_strtod_l+0x490>
   bf384:	f1b9 0f00 	cmp.w	r9, #0
   bf388:	dd08      	ble.n	bf39c <_strtod_l+0x7ac>
   bf38a:	4631      	mov	r1, r6
   bf38c:	464a      	mov	r2, r9
   bf38e:	4620      	mov	r0, r4
   bf390:	f001 f910 	bl	c05b4 <__lshift>
   bf394:	4606      	mov	r6, r0
   bf396:	2800      	cmp	r0, #0
   bf398:	f43f ae72 	beq.w	bf080 <_strtod_l+0x490>
   bf39c:	9a05      	ldr	r2, [sp, #20]
   bf39e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf3a0:	4620      	mov	r0, r4
   bf3a2:	f001 f993 	bl	c06cc <__mdiff>
   bf3a6:	4605      	mov	r5, r0
   bf3a8:	2800      	cmp	r0, #0
   bf3aa:	f43f ae69 	beq.w	bf080 <_strtod_l+0x490>
   bf3ae:	68c3      	ldr	r3, [r0, #12]
   bf3b0:	930b      	str	r3, [sp, #44]	; 0x2c
   bf3b2:	2300      	movs	r3, #0
   bf3b4:	60c3      	str	r3, [r0, #12]
   bf3b6:	4631      	mov	r1, r6
   bf3b8:	f001 f96c 	bl	c0694 <__mcmp>
   bf3bc:	2800      	cmp	r0, #0
   bf3be:	da60      	bge.n	bf482 <_strtod_l+0x892>
   bf3c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf3c2:	ea53 030a 	orrs.w	r3, r3, sl
   bf3c6:	f040 8082 	bne.w	bf4ce <_strtod_l+0x8de>
   bf3ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bf3ce:	2b00      	cmp	r3, #0
   bf3d0:	d17d      	bne.n	bf4ce <_strtod_l+0x8de>
   bf3d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bf3d6:	0d1b      	lsrs	r3, r3, #20
   bf3d8:	051b      	lsls	r3, r3, #20
   bf3da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bf3de:	d976      	bls.n	bf4ce <_strtod_l+0x8de>
   bf3e0:	696b      	ldr	r3, [r5, #20]
   bf3e2:	b913      	cbnz	r3, bf3ea <_strtod_l+0x7fa>
   bf3e4:	692b      	ldr	r3, [r5, #16]
   bf3e6:	2b01      	cmp	r3, #1
   bf3e8:	dd71      	ble.n	bf4ce <_strtod_l+0x8de>
   bf3ea:	4629      	mov	r1, r5
   bf3ec:	2201      	movs	r2, #1
   bf3ee:	4620      	mov	r0, r4
   bf3f0:	f001 f8e0 	bl	c05b4 <__lshift>
   bf3f4:	4631      	mov	r1, r6
   bf3f6:	4605      	mov	r5, r0
   bf3f8:	f001 f94c 	bl	c0694 <__mcmp>
   bf3fc:	2800      	cmp	r0, #0
   bf3fe:	dd66      	ble.n	bf4ce <_strtod_l+0x8de>
   bf400:	9904      	ldr	r1, [sp, #16]
   bf402:	4a53      	ldr	r2, [pc, #332]	; (bf550 <_strtod_l+0x960>)
   bf404:	465b      	mov	r3, fp
   bf406:	2900      	cmp	r1, #0
   bf408:	f000 8081 	beq.w	bf50e <_strtod_l+0x91e>
   bf40c:	ea02 010b 	and.w	r1, r2, fp
   bf410:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bf414:	dc7b      	bgt.n	bf50e <_strtod_l+0x91e>
   bf416:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bf41a:	f77f aea9 	ble.w	bf170 <_strtod_l+0x580>
   bf41e:	4b4d      	ldr	r3, [pc, #308]	; (bf554 <_strtod_l+0x964>)
   bf420:	4650      	mov	r0, sl
   bf422:	4659      	mov	r1, fp
   bf424:	2200      	movs	r2, #0
   bf426:	f7fe ff6b 	bl	be300 <__aeabi_dmul>
   bf42a:	460b      	mov	r3, r1
   bf42c:	4303      	orrs	r3, r0
   bf42e:	bf08      	it	eq
   bf430:	2322      	moveq	r3, #34	; 0x22
   bf432:	4682      	mov	sl, r0
   bf434:	468b      	mov	fp, r1
   bf436:	bf08      	it	eq
   bf438:	6023      	streq	r3, [r4, #0]
   bf43a:	e62b      	b.n	bf094 <_strtod_l+0x4a4>
   bf43c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf440:	fa02 f303 	lsl.w	r3, r2, r3
   bf444:	ea03 0a0a 	and.w	sl, r3, sl
   bf448:	e6e3      	b.n	bf212 <_strtod_l+0x622>
   bf44a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bf44e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bf452:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bf456:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bf45a:	fa01 f308 	lsl.w	r3, r1, r8
   bf45e:	9308      	str	r3, [sp, #32]
   bf460:	910d      	str	r1, [sp, #52]	; 0x34
   bf462:	e746      	b.n	bf2f2 <_strtod_l+0x702>
   bf464:	2300      	movs	r3, #0
   bf466:	9308      	str	r3, [sp, #32]
   bf468:	2301      	movs	r3, #1
   bf46a:	930d      	str	r3, [sp, #52]	; 0x34
   bf46c:	e741      	b.n	bf2f2 <_strtod_l+0x702>
   bf46e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf470:	4642      	mov	r2, r8
   bf472:	4620      	mov	r0, r4
   bf474:	f001 f89e 	bl	c05b4 <__lshift>
   bf478:	9018      	str	r0, [sp, #96]	; 0x60
   bf47a:	2800      	cmp	r0, #0
   bf47c:	f47f af6b 	bne.w	bf356 <_strtod_l+0x766>
   bf480:	e5fe      	b.n	bf080 <_strtod_l+0x490>
   bf482:	465f      	mov	r7, fp
   bf484:	d16e      	bne.n	bf564 <_strtod_l+0x974>
   bf486:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bf488:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bf48c:	b342      	cbz	r2, bf4e0 <_strtod_l+0x8f0>
   bf48e:	4a32      	ldr	r2, [pc, #200]	; (bf558 <_strtod_l+0x968>)
   bf490:	4293      	cmp	r3, r2
   bf492:	d128      	bne.n	bf4e6 <_strtod_l+0x8f6>
   bf494:	9b04      	ldr	r3, [sp, #16]
   bf496:	4651      	mov	r1, sl
   bf498:	b1eb      	cbz	r3, bf4d6 <_strtod_l+0x8e6>
   bf49a:	4b2d      	ldr	r3, [pc, #180]	; (bf550 <_strtod_l+0x960>)
   bf49c:	403b      	ands	r3, r7
   bf49e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bf4a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf4a6:	d819      	bhi.n	bf4dc <_strtod_l+0x8ec>
   bf4a8:	0d1b      	lsrs	r3, r3, #20
   bf4aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bf4ae:	fa02 f303 	lsl.w	r3, r2, r3
   bf4b2:	4299      	cmp	r1, r3
   bf4b4:	d117      	bne.n	bf4e6 <_strtod_l+0x8f6>
   bf4b6:	4b29      	ldr	r3, [pc, #164]	; (bf55c <_strtod_l+0x96c>)
   bf4b8:	429f      	cmp	r7, r3
   bf4ba:	d102      	bne.n	bf4c2 <_strtod_l+0x8d2>
   bf4bc:	3101      	adds	r1, #1
   bf4be:	f43f addf 	beq.w	bf080 <_strtod_l+0x490>
   bf4c2:	4b23      	ldr	r3, [pc, #140]	; (bf550 <_strtod_l+0x960>)
   bf4c4:	403b      	ands	r3, r7
   bf4c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bf4ca:	f04f 0a00 	mov.w	sl, #0
   bf4ce:	9b04      	ldr	r3, [sp, #16]
   bf4d0:	2b00      	cmp	r3, #0
   bf4d2:	d1a4      	bne.n	bf41e <_strtod_l+0x82e>
   bf4d4:	e5de      	b.n	bf094 <_strtod_l+0x4a4>
   bf4d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bf4da:	e7ea      	b.n	bf4b2 <_strtod_l+0x8c2>
   bf4dc:	4613      	mov	r3, r2
   bf4de:	e7e8      	b.n	bf4b2 <_strtod_l+0x8c2>
   bf4e0:	ea53 030a 	orrs.w	r3, r3, sl
   bf4e4:	d08c      	beq.n	bf400 <_strtod_l+0x810>
   bf4e6:	9b08      	ldr	r3, [sp, #32]
   bf4e8:	b1db      	cbz	r3, bf522 <_strtod_l+0x932>
   bf4ea:	423b      	tst	r3, r7
   bf4ec:	d0ef      	beq.n	bf4ce <_strtod_l+0x8de>
   bf4ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf4f0:	9a04      	ldr	r2, [sp, #16]
   bf4f2:	4650      	mov	r0, sl
   bf4f4:	4659      	mov	r1, fp
   bf4f6:	b1c3      	cbz	r3, bf52a <_strtod_l+0x93a>
   bf4f8:	f7ff fb5e 	bl	bebb8 <sulp>
   bf4fc:	4602      	mov	r2, r0
   bf4fe:	460b      	mov	r3, r1
   bf500:	ec51 0b18 	vmov	r0, r1, d8
   bf504:	f7fe fd46 	bl	bdf94 <__adddf3>
   bf508:	4682      	mov	sl, r0
   bf50a:	468b      	mov	fp, r1
   bf50c:	e7df      	b.n	bf4ce <_strtod_l+0x8de>
   bf50e:	4013      	ands	r3, r2
   bf510:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bf514:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bf518:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bf51c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bf520:	e7d5      	b.n	bf4ce <_strtod_l+0x8de>
   bf522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bf524:	ea13 0f0a 	tst.w	r3, sl
   bf528:	e7e0      	b.n	bf4ec <_strtod_l+0x8fc>
   bf52a:	f7ff fb45 	bl	bebb8 <sulp>
   bf52e:	4602      	mov	r2, r0
   bf530:	460b      	mov	r3, r1
   bf532:	ec51 0b18 	vmov	r0, r1, d8
   bf536:	f7fe fd2b 	bl	bdf90 <__aeabi_dsub>
   bf53a:	2200      	movs	r2, #0
   bf53c:	2300      	movs	r3, #0
   bf53e:	4682      	mov	sl, r0
   bf540:	468b      	mov	fp, r1
   bf542:	f7ff f945 	bl	be7d0 <__aeabi_dcmpeq>
   bf546:	2800      	cmp	r0, #0
   bf548:	d0c1      	beq.n	bf4ce <_strtod_l+0x8de>
   bf54a:	e611      	b.n	bf170 <_strtod_l+0x580>
   bf54c:	fffffc02 	.word	0xfffffc02
   bf550:	7ff00000 	.word	0x7ff00000
   bf554:	39500000 	.word	0x39500000
   bf558:	000fffff 	.word	0x000fffff
   bf55c:	7fefffff 	.word	0x7fefffff
   bf560:	000c21e0 	.word	0x000c21e0
   bf564:	4631      	mov	r1, r6
   bf566:	4628      	mov	r0, r5
   bf568:	f001 fa12 	bl	c0990 <__ratio>
   bf56c:	ec59 8b10 	vmov	r8, r9, d0
   bf570:	ee10 0a10 	vmov	r0, s0
   bf574:	2200      	movs	r2, #0
   bf576:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bf57a:	4649      	mov	r1, r9
   bf57c:	f7ff f93c 	bl	be7f8 <__aeabi_dcmple>
   bf580:	2800      	cmp	r0, #0
   bf582:	d07a      	beq.n	bf67a <_strtod_l+0xa8a>
   bf584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf586:	2b00      	cmp	r3, #0
   bf588:	d04a      	beq.n	bf620 <_strtod_l+0xa30>
   bf58a:	4b95      	ldr	r3, [pc, #596]	; (bf7e0 <_strtod_l+0xbf0>)
   bf58c:	2200      	movs	r2, #0
   bf58e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bf592:	f8df 924c 	ldr.w	r9, [pc, #588]	; bf7e0 <_strtod_l+0xbf0>
   bf596:	f04f 0800 	mov.w	r8, #0
   bf59a:	4b92      	ldr	r3, [pc, #584]	; (bf7e4 <_strtod_l+0xbf4>)
   bf59c:	403b      	ands	r3, r7
   bf59e:	930d      	str	r3, [sp, #52]	; 0x34
   bf5a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bf5a2:	4b91      	ldr	r3, [pc, #580]	; (bf7e8 <_strtod_l+0xbf8>)
   bf5a4:	429a      	cmp	r2, r3
   bf5a6:	f040 80b0 	bne.w	bf70a <_strtod_l+0xb1a>
   bf5aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bf5ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bf5b2:	ec4b ab10 	vmov	d0, sl, fp
   bf5b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bf5ba:	f001 f911 	bl	c07e0 <__ulp>
   bf5be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bf5c2:	ec53 2b10 	vmov	r2, r3, d0
   bf5c6:	f7fe fe9b 	bl	be300 <__aeabi_dmul>
   bf5ca:	4652      	mov	r2, sl
   bf5cc:	465b      	mov	r3, fp
   bf5ce:	f7fe fce1 	bl	bdf94 <__adddf3>
   bf5d2:	460b      	mov	r3, r1
   bf5d4:	4983      	ldr	r1, [pc, #524]	; (bf7e4 <_strtod_l+0xbf4>)
   bf5d6:	4a85      	ldr	r2, [pc, #532]	; (bf7ec <_strtod_l+0xbfc>)
   bf5d8:	4019      	ands	r1, r3
   bf5da:	4291      	cmp	r1, r2
   bf5dc:	4682      	mov	sl, r0
   bf5de:	d960      	bls.n	bf6a2 <_strtod_l+0xab2>
   bf5e0:	ee18 3a90 	vmov	r3, s17
   bf5e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bf5e8:	4293      	cmp	r3, r2
   bf5ea:	d104      	bne.n	bf5f6 <_strtod_l+0xa06>
   bf5ec:	ee18 3a10 	vmov	r3, s16
   bf5f0:	3301      	adds	r3, #1
   bf5f2:	f43f ad45 	beq.w	bf080 <_strtod_l+0x490>
   bf5f6:	f8df b200 	ldr.w	fp, [pc, #512]	; bf7f8 <_strtod_l+0xc08>
   bf5fa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bf5fe:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf600:	4620      	mov	r0, r4
   bf602:	f000 fdbb 	bl	c017c <_Bfree>
   bf606:	9905      	ldr	r1, [sp, #20]
   bf608:	4620      	mov	r0, r4
   bf60a:	f000 fdb7 	bl	c017c <_Bfree>
   bf60e:	4631      	mov	r1, r6
   bf610:	4620      	mov	r0, r4
   bf612:	f000 fdb3 	bl	c017c <_Bfree>
   bf616:	4629      	mov	r1, r5
   bf618:	4620      	mov	r0, r4
   bf61a:	f000 fdaf 	bl	c017c <_Bfree>
   bf61e:	e61a      	b.n	bf256 <_strtod_l+0x666>
   bf620:	f1ba 0f00 	cmp.w	sl, #0
   bf624:	d11b      	bne.n	bf65e <_strtod_l+0xa6e>
   bf626:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bf62a:	b9f3      	cbnz	r3, bf66a <_strtod_l+0xa7a>
   bf62c:	4b6c      	ldr	r3, [pc, #432]	; (bf7e0 <_strtod_l+0xbf0>)
   bf62e:	2200      	movs	r2, #0
   bf630:	4640      	mov	r0, r8
   bf632:	4649      	mov	r1, r9
   bf634:	f7ff f8d6 	bl	be7e4 <__aeabi_dcmplt>
   bf638:	b9d0      	cbnz	r0, bf670 <_strtod_l+0xa80>
   bf63a:	4640      	mov	r0, r8
   bf63c:	4649      	mov	r1, r9
   bf63e:	4b6c      	ldr	r3, [pc, #432]	; (bf7f0 <_strtod_l+0xc00>)
   bf640:	2200      	movs	r2, #0
   bf642:	f7fe fe5d 	bl	be300 <__aeabi_dmul>
   bf646:	4680      	mov	r8, r0
   bf648:	4689      	mov	r9, r1
   bf64a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bf64e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bf652:	9315      	str	r3, [sp, #84]	; 0x54
   bf654:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bf658:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bf65c:	e79d      	b.n	bf59a <_strtod_l+0x9aa>
   bf65e:	f1ba 0f01 	cmp.w	sl, #1
   bf662:	d102      	bne.n	bf66a <_strtod_l+0xa7a>
   bf664:	2f00      	cmp	r7, #0
   bf666:	f43f ad83 	beq.w	bf170 <_strtod_l+0x580>
   bf66a:	4b62      	ldr	r3, [pc, #392]	; (bf7f4 <_strtod_l+0xc04>)
   bf66c:	2200      	movs	r2, #0
   bf66e:	e78e      	b.n	bf58e <_strtod_l+0x99e>
   bf670:	f8df 917c 	ldr.w	r9, [pc, #380]	; bf7f0 <_strtod_l+0xc00>
   bf674:	f04f 0800 	mov.w	r8, #0
   bf678:	e7e7      	b.n	bf64a <_strtod_l+0xa5a>
   bf67a:	4b5d      	ldr	r3, [pc, #372]	; (bf7f0 <_strtod_l+0xc00>)
   bf67c:	4640      	mov	r0, r8
   bf67e:	4649      	mov	r1, r9
   bf680:	2200      	movs	r2, #0
   bf682:	f7fe fe3d 	bl	be300 <__aeabi_dmul>
   bf686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf688:	4680      	mov	r8, r0
   bf68a:	4689      	mov	r9, r1
   bf68c:	b933      	cbnz	r3, bf69c <_strtod_l+0xaac>
   bf68e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bf692:	900e      	str	r0, [sp, #56]	; 0x38
   bf694:	930f      	str	r3, [sp, #60]	; 0x3c
   bf696:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bf69a:	e7dd      	b.n	bf658 <_strtod_l+0xa68>
   bf69c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bf6a0:	e7f9      	b.n	bf696 <_strtod_l+0xaa6>
   bf6a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bf6a6:	9b04      	ldr	r3, [sp, #16]
   bf6a8:	2b00      	cmp	r3, #0
   bf6aa:	d1a8      	bne.n	bf5fe <_strtod_l+0xa0e>
   bf6ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bf6b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bf6b2:	0d1b      	lsrs	r3, r3, #20
   bf6b4:	051b      	lsls	r3, r3, #20
   bf6b6:	429a      	cmp	r2, r3
   bf6b8:	d1a1      	bne.n	bf5fe <_strtod_l+0xa0e>
   bf6ba:	4640      	mov	r0, r8
   bf6bc:	4649      	mov	r1, r9
   bf6be:	f001 fa05 	bl	c0acc <__aeabi_d2lz>
   bf6c2:	f7fe fdef 	bl	be2a4 <__aeabi_l2d>
   bf6c6:	4602      	mov	r2, r0
   bf6c8:	460b      	mov	r3, r1
   bf6ca:	4640      	mov	r0, r8
   bf6cc:	4649      	mov	r1, r9
   bf6ce:	f7fe fc5f 	bl	bdf90 <__aeabi_dsub>
   bf6d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bf6d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bf6d8:	ea43 030a 	orr.w	r3, r3, sl
   bf6dc:	4313      	orrs	r3, r2
   bf6de:	4680      	mov	r8, r0
   bf6e0:	4689      	mov	r9, r1
   bf6e2:	d055      	beq.n	bf790 <_strtod_l+0xba0>
   bf6e4:	a336      	add	r3, pc, #216	; (adr r3, bf7c0 <_strtod_l+0xbd0>)
   bf6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf6ea:	f7ff f87b 	bl	be7e4 <__aeabi_dcmplt>
   bf6ee:	2800      	cmp	r0, #0
   bf6f0:	f47f acd0 	bne.w	bf094 <_strtod_l+0x4a4>
   bf6f4:	a334      	add	r3, pc, #208	; (adr r3, bf7c8 <_strtod_l+0xbd8>)
   bf6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf6fa:	4640      	mov	r0, r8
   bf6fc:	4649      	mov	r1, r9
   bf6fe:	f7ff f88f 	bl	be820 <__aeabi_dcmpgt>
   bf702:	2800      	cmp	r0, #0
   bf704:	f43f af7b 	beq.w	bf5fe <_strtod_l+0xa0e>
   bf708:	e4c4      	b.n	bf094 <_strtod_l+0x4a4>
   bf70a:	9b04      	ldr	r3, [sp, #16]
   bf70c:	b333      	cbz	r3, bf75c <_strtod_l+0xb6c>
   bf70e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bf710:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bf714:	d822      	bhi.n	bf75c <_strtod_l+0xb6c>
   bf716:	a32e      	add	r3, pc, #184	; (adr r3, bf7d0 <_strtod_l+0xbe0>)
   bf718:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf71c:	4640      	mov	r0, r8
   bf71e:	4649      	mov	r1, r9
   bf720:	f7ff f86a 	bl	be7f8 <__aeabi_dcmple>
   bf724:	b1a0      	cbz	r0, bf750 <_strtod_l+0xb60>
   bf726:	4649      	mov	r1, r9
   bf728:	4640      	mov	r0, r8
   bf72a:	f7ff f883 	bl	be834 <__aeabi_d2uiz>
   bf72e:	2801      	cmp	r0, #1
   bf730:	bf38      	it	cc
   bf732:	2001      	movcc	r0, #1
   bf734:	f7fe fd6a 	bl	be20c <__aeabi_ui2d>
   bf738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf73a:	4680      	mov	r8, r0
   bf73c:	4689      	mov	r9, r1
   bf73e:	bb23      	cbnz	r3, bf78a <_strtod_l+0xb9a>
   bf740:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bf744:	9010      	str	r0, [sp, #64]	; 0x40
   bf746:	9311      	str	r3, [sp, #68]	; 0x44
   bf748:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bf74c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bf750:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bf752:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bf754:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bf758:	1a9b      	subs	r3, r3, r2
   bf75a:	9309      	str	r3, [sp, #36]	; 0x24
   bf75c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bf760:	eeb0 0a48 	vmov.f32	s0, s16
   bf764:	eef0 0a68 	vmov.f32	s1, s17
   bf768:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bf76c:	f001 f838 	bl	c07e0 <__ulp>
   bf770:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bf774:	ec53 2b10 	vmov	r2, r3, d0
   bf778:	f7fe fdc2 	bl	be300 <__aeabi_dmul>
   bf77c:	ec53 2b18 	vmov	r2, r3, d8
   bf780:	f7fe fc08 	bl	bdf94 <__adddf3>
   bf784:	4682      	mov	sl, r0
   bf786:	468b      	mov	fp, r1
   bf788:	e78d      	b.n	bf6a6 <_strtod_l+0xab6>
   bf78a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bf78e:	e7db      	b.n	bf748 <_strtod_l+0xb58>
   bf790:	a311      	add	r3, pc, #68	; (adr r3, bf7d8 <_strtod_l+0xbe8>)
   bf792:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf796:	f7ff f825 	bl	be7e4 <__aeabi_dcmplt>
   bf79a:	e7b2      	b.n	bf702 <_strtod_l+0xb12>
   bf79c:	2300      	movs	r3, #0
   bf79e:	930a      	str	r3, [sp, #40]	; 0x28
   bf7a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bf7a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bf7a4:	6013      	str	r3, [r2, #0]
   bf7a6:	f7ff ba6b 	b.w	bec80 <_strtod_l+0x90>
   bf7aa:	2a65      	cmp	r2, #101	; 0x65
   bf7ac:	f43f ab5f 	beq.w	bee6e <_strtod_l+0x27e>
   bf7b0:	2a45      	cmp	r2, #69	; 0x45
   bf7b2:	f43f ab5c 	beq.w	bee6e <_strtod_l+0x27e>
   bf7b6:	2301      	movs	r3, #1
   bf7b8:	f7ff bb94 	b.w	beee4 <_strtod_l+0x2f4>
   bf7bc:	f3af 8000 	nop.w
   bf7c0:	94a03595 	.word	0x94a03595
   bf7c4:	3fdfffff 	.word	0x3fdfffff
   bf7c8:	35afe535 	.word	0x35afe535
   bf7cc:	3fe00000 	.word	0x3fe00000
   bf7d0:	ffc00000 	.word	0xffc00000
   bf7d4:	41dfffff 	.word	0x41dfffff
   bf7d8:	94a03595 	.word	0x94a03595
   bf7dc:	3fcfffff 	.word	0x3fcfffff
   bf7e0:	3ff00000 	.word	0x3ff00000
   bf7e4:	7ff00000 	.word	0x7ff00000
   bf7e8:	7fe00000 	.word	0x7fe00000
   bf7ec:	7c9fffff 	.word	0x7c9fffff
   bf7f0:	3fe00000 	.word	0x3fe00000
   bf7f4:	bff00000 	.word	0xbff00000
   bf7f8:	7fefffff 	.word	0x7fefffff

000bf7fc <strtod>:
   bf7fc:	460a      	mov	r2, r1
   bf7fe:	4601      	mov	r1, r0
   bf800:	4802      	ldr	r0, [pc, #8]	; (bf80c <strtod+0x10>)
   bf802:	4b03      	ldr	r3, [pc, #12]	; (bf810 <strtod+0x14>)
   bf804:	6800      	ldr	r0, [r0, #0]
   bf806:	f7ff b9f3 	b.w	bebf0 <_strtod_l>
   bf80a:	bf00      	nop
   bf80c:	2003da98 	.word	0x2003da98
   bf810:	2003db04 	.word	0x2003db04

000bf814 <_strtol_l.constprop.0>:
   bf814:	2b01      	cmp	r3, #1
   bf816:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bf81a:	d001      	beq.n	bf820 <_strtol_l.constprop.0+0xc>
   bf81c:	2b24      	cmp	r3, #36	; 0x24
   bf81e:	d906      	bls.n	bf82e <_strtol_l.constprop.0+0x1a>
   bf820:	f7fa fbc2 	bl	b9fa8 <__errno>
   bf824:	2316      	movs	r3, #22
   bf826:	6003      	str	r3, [r0, #0]
   bf828:	2000      	movs	r0, #0
   bf82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bf82e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bf914 <_strtol_l.constprop.0+0x100>
   bf832:	460d      	mov	r5, r1
   bf834:	462e      	mov	r6, r5
   bf836:	f815 4b01 	ldrb.w	r4, [r5], #1
   bf83a:	f814 700c 	ldrb.w	r7, [r4, ip]
   bf83e:	f017 0708 	ands.w	r7, r7, #8
   bf842:	d1f7      	bne.n	bf834 <_strtol_l.constprop.0+0x20>
   bf844:	2c2d      	cmp	r4, #45	; 0x2d
   bf846:	d132      	bne.n	bf8ae <_strtol_l.constprop.0+0x9a>
   bf848:	782c      	ldrb	r4, [r5, #0]
   bf84a:	2701      	movs	r7, #1
   bf84c:	1cb5      	adds	r5, r6, #2
   bf84e:	2b00      	cmp	r3, #0
   bf850:	d05b      	beq.n	bf90a <_strtol_l.constprop.0+0xf6>
   bf852:	2b10      	cmp	r3, #16
   bf854:	d109      	bne.n	bf86a <_strtol_l.constprop.0+0x56>
   bf856:	2c30      	cmp	r4, #48	; 0x30
   bf858:	d107      	bne.n	bf86a <_strtol_l.constprop.0+0x56>
   bf85a:	782c      	ldrb	r4, [r5, #0]
   bf85c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bf860:	2c58      	cmp	r4, #88	; 0x58
   bf862:	d14d      	bne.n	bf900 <_strtol_l.constprop.0+0xec>
   bf864:	786c      	ldrb	r4, [r5, #1]
   bf866:	2310      	movs	r3, #16
   bf868:	3502      	adds	r5, #2
   bf86a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bf86e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bf872:	f04f 0c00 	mov.w	ip, #0
   bf876:	fbb8 f9f3 	udiv	r9, r8, r3
   bf87a:	4666      	mov	r6, ip
   bf87c:	fb03 8a19 	mls	sl, r3, r9, r8
   bf880:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bf884:	f1be 0f09 	cmp.w	lr, #9
   bf888:	d816      	bhi.n	bf8b8 <_strtol_l.constprop.0+0xa4>
   bf88a:	4674      	mov	r4, lr
   bf88c:	42a3      	cmp	r3, r4
   bf88e:	dd24      	ble.n	bf8da <_strtol_l.constprop.0+0xc6>
   bf890:	f1bc 0f00 	cmp.w	ip, #0
   bf894:	db1e      	blt.n	bf8d4 <_strtol_l.constprop.0+0xc0>
   bf896:	45b1      	cmp	r9, r6
   bf898:	d31c      	bcc.n	bf8d4 <_strtol_l.constprop.0+0xc0>
   bf89a:	d101      	bne.n	bf8a0 <_strtol_l.constprop.0+0x8c>
   bf89c:	45a2      	cmp	sl, r4
   bf89e:	db19      	blt.n	bf8d4 <_strtol_l.constprop.0+0xc0>
   bf8a0:	fb06 4603 	mla	r6, r6, r3, r4
   bf8a4:	f04f 0c01 	mov.w	ip, #1
   bf8a8:	f815 4b01 	ldrb.w	r4, [r5], #1
   bf8ac:	e7e8      	b.n	bf880 <_strtol_l.constprop.0+0x6c>
   bf8ae:	2c2b      	cmp	r4, #43	; 0x2b
   bf8b0:	bf04      	itt	eq
   bf8b2:	782c      	ldrbeq	r4, [r5, #0]
   bf8b4:	1cb5      	addeq	r5, r6, #2
   bf8b6:	e7ca      	b.n	bf84e <_strtol_l.constprop.0+0x3a>
   bf8b8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bf8bc:	f1be 0f19 	cmp.w	lr, #25
   bf8c0:	d801      	bhi.n	bf8c6 <_strtol_l.constprop.0+0xb2>
   bf8c2:	3c37      	subs	r4, #55	; 0x37
   bf8c4:	e7e2      	b.n	bf88c <_strtol_l.constprop.0+0x78>
   bf8c6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bf8ca:	f1be 0f19 	cmp.w	lr, #25
   bf8ce:	d804      	bhi.n	bf8da <_strtol_l.constprop.0+0xc6>
   bf8d0:	3c57      	subs	r4, #87	; 0x57
   bf8d2:	e7db      	b.n	bf88c <_strtol_l.constprop.0+0x78>
   bf8d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bf8d8:	e7e6      	b.n	bf8a8 <_strtol_l.constprop.0+0x94>
   bf8da:	f1bc 0f00 	cmp.w	ip, #0
   bf8de:	da05      	bge.n	bf8ec <_strtol_l.constprop.0+0xd8>
   bf8e0:	2322      	movs	r3, #34	; 0x22
   bf8e2:	6003      	str	r3, [r0, #0]
   bf8e4:	4646      	mov	r6, r8
   bf8e6:	b942      	cbnz	r2, bf8fa <_strtol_l.constprop.0+0xe6>
   bf8e8:	4630      	mov	r0, r6
   bf8ea:	e79e      	b.n	bf82a <_strtol_l.constprop.0+0x16>
   bf8ec:	b107      	cbz	r7, bf8f0 <_strtol_l.constprop.0+0xdc>
   bf8ee:	4276      	negs	r6, r6
   bf8f0:	2a00      	cmp	r2, #0
   bf8f2:	d0f9      	beq.n	bf8e8 <_strtol_l.constprop.0+0xd4>
   bf8f4:	f1bc 0f00 	cmp.w	ip, #0
   bf8f8:	d000      	beq.n	bf8fc <_strtol_l.constprop.0+0xe8>
   bf8fa:	1e69      	subs	r1, r5, #1
   bf8fc:	6011      	str	r1, [r2, #0]
   bf8fe:	e7f3      	b.n	bf8e8 <_strtol_l.constprop.0+0xd4>
   bf900:	2430      	movs	r4, #48	; 0x30
   bf902:	2b00      	cmp	r3, #0
   bf904:	d1b1      	bne.n	bf86a <_strtol_l.constprop.0+0x56>
   bf906:	2308      	movs	r3, #8
   bf908:	e7af      	b.n	bf86a <_strtol_l.constprop.0+0x56>
   bf90a:	2c30      	cmp	r4, #48	; 0x30
   bf90c:	d0a5      	beq.n	bf85a <_strtol_l.constprop.0+0x46>
   bf90e:	230a      	movs	r3, #10
   bf910:	e7ab      	b.n	bf86a <_strtol_l.constprop.0+0x56>
   bf912:	bf00      	nop
   bf914:	000c2209 	.word	0x000c2209

000bf918 <strtol>:
   bf918:	4613      	mov	r3, r2
   bf91a:	460a      	mov	r2, r1
   bf91c:	4601      	mov	r1, r0
   bf91e:	4802      	ldr	r0, [pc, #8]	; (bf928 <strtol+0x10>)
   bf920:	6800      	ldr	r0, [r0, #0]
   bf922:	f7ff bf77 	b.w	bf814 <_strtol_l.constprop.0>
   bf926:	bf00      	nop
   bf928:	2003da98 	.word	0x2003da98

000bf92c <__register_exitproc>:
   bf92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bf930:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bf9ec <__register_exitproc+0xc0>
   bf934:	4606      	mov	r6, r0
   bf936:	f8d8 0000 	ldr.w	r0, [r8]
   bf93a:	461f      	mov	r7, r3
   bf93c:	460d      	mov	r5, r1
   bf93e:	4691      	mov	r9, r2
   bf940:	f000 fbc6 	bl	c00d0 <__retarget_lock_acquire_recursive>
   bf944:	4b25      	ldr	r3, [pc, #148]	; (bf9dc <__register_exitproc+0xb0>)
   bf946:	681c      	ldr	r4, [r3, #0]
   bf948:	b934      	cbnz	r4, bf958 <__register_exitproc+0x2c>
   bf94a:	4c25      	ldr	r4, [pc, #148]	; (bf9e0 <__register_exitproc+0xb4>)
   bf94c:	601c      	str	r4, [r3, #0]
   bf94e:	4b25      	ldr	r3, [pc, #148]	; (bf9e4 <__register_exitproc+0xb8>)
   bf950:	b113      	cbz	r3, bf958 <__register_exitproc+0x2c>
   bf952:	681b      	ldr	r3, [r3, #0]
   bf954:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bf958:	6863      	ldr	r3, [r4, #4]
   bf95a:	2b1f      	cmp	r3, #31
   bf95c:	dd07      	ble.n	bf96e <__register_exitproc+0x42>
   bf95e:	f8d8 0000 	ldr.w	r0, [r8]
   bf962:	f000 fbb7 	bl	c00d4 <__retarget_lock_release_recursive>
   bf966:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bf96a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bf96e:	b34e      	cbz	r6, bf9c4 <__register_exitproc+0x98>
   bf970:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bf974:	b988      	cbnz	r0, bf99a <__register_exitproc+0x6e>
   bf976:	4b1c      	ldr	r3, [pc, #112]	; (bf9e8 <__register_exitproc+0xbc>)
   bf978:	b923      	cbnz	r3, bf984 <__register_exitproc+0x58>
   bf97a:	f8d8 0000 	ldr.w	r0, [r8]
   bf97e:	f000 fba8 	bl	c00d2 <__retarget_lock_release>
   bf982:	e7f0      	b.n	bf966 <__register_exitproc+0x3a>
   bf984:	f44f 7084 	mov.w	r0, #264	; 0x108
   bf988:	f7fa fac6 	bl	b9f18 <malloc>
   bf98c:	2800      	cmp	r0, #0
   bf98e:	d0f4      	beq.n	bf97a <__register_exitproc+0x4e>
   bf990:	2300      	movs	r3, #0
   bf992:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bf996:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bf99a:	6863      	ldr	r3, [r4, #4]
   bf99c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bf9a0:	2201      	movs	r2, #1
   bf9a2:	409a      	lsls	r2, r3
   bf9a4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bf9a8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bf9ac:	4313      	orrs	r3, r2
   bf9ae:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bf9b2:	2e02      	cmp	r6, #2
   bf9b4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bf9b8:	bf02      	ittt	eq
   bf9ba:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bf9be:	4313      	orreq	r3, r2
   bf9c0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bf9c4:	6863      	ldr	r3, [r4, #4]
   bf9c6:	f8d8 0000 	ldr.w	r0, [r8]
   bf9ca:	1c5a      	adds	r2, r3, #1
   bf9cc:	3302      	adds	r3, #2
   bf9ce:	6062      	str	r2, [r4, #4]
   bf9d0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bf9d4:	f000 fb7e 	bl	c00d4 <__retarget_lock_release_recursive>
   bf9d8:	2000      	movs	r0, #0
   bf9da:	e7c6      	b.n	bf96a <__register_exitproc+0x3e>
   bf9dc:	2003e7e8 	.word	0x2003e7e8
   bf9e0:	2003e75c 	.word	0x2003e75c
   bf9e4:	00000000 	.word	0x00000000
   bf9e8:	000b9f19 	.word	0x000b9f19
   bf9ec:	2003dafc 	.word	0x2003dafc

000bf9f0 <rshift>:
   bf9f0:	6903      	ldr	r3, [r0, #16]
   bf9f2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bf9f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bf9fa:	ea4f 1261 	mov.w	r2, r1, asr #5
   bf9fe:	f100 0414 	add.w	r4, r0, #20
   bfa02:	dd45      	ble.n	bfa90 <rshift+0xa0>
   bfa04:	f011 011f 	ands.w	r1, r1, #31
   bfa08:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bfa0c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bfa10:	d10c      	bne.n	bfa2c <rshift+0x3c>
   bfa12:	f100 0710 	add.w	r7, r0, #16
   bfa16:	4629      	mov	r1, r5
   bfa18:	42b1      	cmp	r1, r6
   bfa1a:	d334      	bcc.n	bfa86 <rshift+0x96>
   bfa1c:	1a9b      	subs	r3, r3, r2
   bfa1e:	009b      	lsls	r3, r3, #2
   bfa20:	1eea      	subs	r2, r5, #3
   bfa22:	4296      	cmp	r6, r2
   bfa24:	bf38      	it	cc
   bfa26:	2300      	movcc	r3, #0
   bfa28:	4423      	add	r3, r4
   bfa2a:	e015      	b.n	bfa58 <rshift+0x68>
   bfa2c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bfa30:	f1c1 0820 	rsb	r8, r1, #32
   bfa34:	40cf      	lsrs	r7, r1
   bfa36:	f105 0e04 	add.w	lr, r5, #4
   bfa3a:	46a1      	mov	r9, r4
   bfa3c:	4576      	cmp	r6, lr
   bfa3e:	46f4      	mov	ip, lr
   bfa40:	d815      	bhi.n	bfa6e <rshift+0x7e>
   bfa42:	1a9a      	subs	r2, r3, r2
   bfa44:	0092      	lsls	r2, r2, #2
   bfa46:	3a04      	subs	r2, #4
   bfa48:	3501      	adds	r5, #1
   bfa4a:	42ae      	cmp	r6, r5
   bfa4c:	bf38      	it	cc
   bfa4e:	2200      	movcc	r2, #0
   bfa50:	18a3      	adds	r3, r4, r2
   bfa52:	50a7      	str	r7, [r4, r2]
   bfa54:	b107      	cbz	r7, bfa58 <rshift+0x68>
   bfa56:	3304      	adds	r3, #4
   bfa58:	1b1a      	subs	r2, r3, r4
   bfa5a:	42a3      	cmp	r3, r4
   bfa5c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bfa60:	bf08      	it	eq
   bfa62:	2300      	moveq	r3, #0
   bfa64:	6102      	str	r2, [r0, #16]
   bfa66:	bf08      	it	eq
   bfa68:	6143      	streq	r3, [r0, #20]
   bfa6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bfa6e:	f8dc c000 	ldr.w	ip, [ip]
   bfa72:	fa0c fc08 	lsl.w	ip, ip, r8
   bfa76:	ea4c 0707 	orr.w	r7, ip, r7
   bfa7a:	f849 7b04 	str.w	r7, [r9], #4
   bfa7e:	f85e 7b04 	ldr.w	r7, [lr], #4
   bfa82:	40cf      	lsrs	r7, r1
   bfa84:	e7da      	b.n	bfa3c <rshift+0x4c>
   bfa86:	f851 cb04 	ldr.w	ip, [r1], #4
   bfa8a:	f847 cf04 	str.w	ip, [r7, #4]!
   bfa8e:	e7c3      	b.n	bfa18 <rshift+0x28>
   bfa90:	4623      	mov	r3, r4
   bfa92:	e7e1      	b.n	bfa58 <rshift+0x68>

000bfa94 <__hexdig_fun>:
   bfa94:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bfa98:	2b09      	cmp	r3, #9
   bfa9a:	d802      	bhi.n	bfaa2 <__hexdig_fun+0xe>
   bfa9c:	3820      	subs	r0, #32
   bfa9e:	b2c0      	uxtb	r0, r0
   bfaa0:	4770      	bx	lr
   bfaa2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bfaa6:	2b05      	cmp	r3, #5
   bfaa8:	d801      	bhi.n	bfaae <__hexdig_fun+0x1a>
   bfaaa:	3847      	subs	r0, #71	; 0x47
   bfaac:	e7f7      	b.n	bfa9e <__hexdig_fun+0xa>
   bfaae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bfab2:	2b05      	cmp	r3, #5
   bfab4:	d801      	bhi.n	bfaba <__hexdig_fun+0x26>
   bfab6:	3827      	subs	r0, #39	; 0x27
   bfab8:	e7f1      	b.n	bfa9e <__hexdig_fun+0xa>
   bfaba:	2000      	movs	r0, #0
   bfabc:	4770      	bx	lr
	...

000bfac0 <__gethex>:
   bfac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfac4:	ed2d 8b02 	vpush	{d8}
   bfac8:	b089      	sub	sp, #36	; 0x24
   bfaca:	ee08 0a10 	vmov	s16, r0
   bface:	9304      	str	r3, [sp, #16]
   bfad0:	4bb4      	ldr	r3, [pc, #720]	; (bfda4 <__gethex+0x2e4>)
   bfad2:	681b      	ldr	r3, [r3, #0]
   bfad4:	9301      	str	r3, [sp, #4]
   bfad6:	4618      	mov	r0, r3
   bfad8:	468b      	mov	fp, r1
   bfada:	4690      	mov	r8, r2
   bfadc:	f7ff f831 	bl	beb42 <strlen>
   bfae0:	9b01      	ldr	r3, [sp, #4]
   bfae2:	f8db 2000 	ldr.w	r2, [fp]
   bfae6:	4403      	add	r3, r0
   bfae8:	4682      	mov	sl, r0
   bfaea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bfaee:	9305      	str	r3, [sp, #20]
   bfaf0:	1c93      	adds	r3, r2, #2
   bfaf2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bfaf6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bfafa:	32fe      	adds	r2, #254	; 0xfe
   bfafc:	18d1      	adds	r1, r2, r3
   bfafe:	461f      	mov	r7, r3
   bfb00:	f813 0b01 	ldrb.w	r0, [r3], #1
   bfb04:	9100      	str	r1, [sp, #0]
   bfb06:	2830      	cmp	r0, #48	; 0x30
   bfb08:	d0f8      	beq.n	bfafc <__gethex+0x3c>
   bfb0a:	f7ff ffc3 	bl	bfa94 <__hexdig_fun>
   bfb0e:	4604      	mov	r4, r0
   bfb10:	2800      	cmp	r0, #0
   bfb12:	d13a      	bne.n	bfb8a <__gethex+0xca>
   bfb14:	9901      	ldr	r1, [sp, #4]
   bfb16:	4652      	mov	r2, sl
   bfb18:	4638      	mov	r0, r7
   bfb1a:	f7ff f81a 	bl	beb52 <strncmp>
   bfb1e:	4605      	mov	r5, r0
   bfb20:	2800      	cmp	r0, #0
   bfb22:	d168      	bne.n	bfbf6 <__gethex+0x136>
   bfb24:	f817 000a 	ldrb.w	r0, [r7, sl]
   bfb28:	eb07 060a 	add.w	r6, r7, sl
   bfb2c:	f7ff ffb2 	bl	bfa94 <__hexdig_fun>
   bfb30:	2800      	cmp	r0, #0
   bfb32:	d062      	beq.n	bfbfa <__gethex+0x13a>
   bfb34:	4633      	mov	r3, r6
   bfb36:	7818      	ldrb	r0, [r3, #0]
   bfb38:	2830      	cmp	r0, #48	; 0x30
   bfb3a:	461f      	mov	r7, r3
   bfb3c:	f103 0301 	add.w	r3, r3, #1
   bfb40:	d0f9      	beq.n	bfb36 <__gethex+0x76>
   bfb42:	f7ff ffa7 	bl	bfa94 <__hexdig_fun>
   bfb46:	2301      	movs	r3, #1
   bfb48:	fab0 f480 	clz	r4, r0
   bfb4c:	0964      	lsrs	r4, r4, #5
   bfb4e:	4635      	mov	r5, r6
   bfb50:	9300      	str	r3, [sp, #0]
   bfb52:	463a      	mov	r2, r7
   bfb54:	4616      	mov	r6, r2
   bfb56:	3201      	adds	r2, #1
   bfb58:	7830      	ldrb	r0, [r6, #0]
   bfb5a:	f7ff ff9b 	bl	bfa94 <__hexdig_fun>
   bfb5e:	2800      	cmp	r0, #0
   bfb60:	d1f8      	bne.n	bfb54 <__gethex+0x94>
   bfb62:	9901      	ldr	r1, [sp, #4]
   bfb64:	4652      	mov	r2, sl
   bfb66:	4630      	mov	r0, r6
   bfb68:	f7fe fff3 	bl	beb52 <strncmp>
   bfb6c:	b980      	cbnz	r0, bfb90 <__gethex+0xd0>
   bfb6e:	b94d      	cbnz	r5, bfb84 <__gethex+0xc4>
   bfb70:	eb06 050a 	add.w	r5, r6, sl
   bfb74:	462a      	mov	r2, r5
   bfb76:	4616      	mov	r6, r2
   bfb78:	3201      	adds	r2, #1
   bfb7a:	7830      	ldrb	r0, [r6, #0]
   bfb7c:	f7ff ff8a 	bl	bfa94 <__hexdig_fun>
   bfb80:	2800      	cmp	r0, #0
   bfb82:	d1f8      	bne.n	bfb76 <__gethex+0xb6>
   bfb84:	1bad      	subs	r5, r5, r6
   bfb86:	00ad      	lsls	r5, r5, #2
   bfb88:	e004      	b.n	bfb94 <__gethex+0xd4>
   bfb8a:	2400      	movs	r4, #0
   bfb8c:	4625      	mov	r5, r4
   bfb8e:	e7e0      	b.n	bfb52 <__gethex+0x92>
   bfb90:	2d00      	cmp	r5, #0
   bfb92:	d1f7      	bne.n	bfb84 <__gethex+0xc4>
   bfb94:	7833      	ldrb	r3, [r6, #0]
   bfb96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bfb9a:	2b50      	cmp	r3, #80	; 0x50
   bfb9c:	d13b      	bne.n	bfc16 <__gethex+0x156>
   bfb9e:	7873      	ldrb	r3, [r6, #1]
   bfba0:	2b2b      	cmp	r3, #43	; 0x2b
   bfba2:	d02c      	beq.n	bfbfe <__gethex+0x13e>
   bfba4:	2b2d      	cmp	r3, #45	; 0x2d
   bfba6:	d02e      	beq.n	bfc06 <__gethex+0x146>
   bfba8:	1c71      	adds	r1, r6, #1
   bfbaa:	f04f 0900 	mov.w	r9, #0
   bfbae:	7808      	ldrb	r0, [r1, #0]
   bfbb0:	f7ff ff70 	bl	bfa94 <__hexdig_fun>
   bfbb4:	1e43      	subs	r3, r0, #1
   bfbb6:	b2db      	uxtb	r3, r3
   bfbb8:	2b18      	cmp	r3, #24
   bfbba:	d82c      	bhi.n	bfc16 <__gethex+0x156>
   bfbbc:	f1a0 0210 	sub.w	r2, r0, #16
   bfbc0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bfbc4:	f7ff ff66 	bl	bfa94 <__hexdig_fun>
   bfbc8:	1e43      	subs	r3, r0, #1
   bfbca:	b2db      	uxtb	r3, r3
   bfbcc:	2b18      	cmp	r3, #24
   bfbce:	d91d      	bls.n	bfc0c <__gethex+0x14c>
   bfbd0:	f1b9 0f00 	cmp.w	r9, #0
   bfbd4:	d000      	beq.n	bfbd8 <__gethex+0x118>
   bfbd6:	4252      	negs	r2, r2
   bfbd8:	4415      	add	r5, r2
   bfbda:	f8cb 1000 	str.w	r1, [fp]
   bfbde:	b1e4      	cbz	r4, bfc1a <__gethex+0x15a>
   bfbe0:	9b00      	ldr	r3, [sp, #0]
   bfbe2:	2b00      	cmp	r3, #0
   bfbe4:	bf14      	ite	ne
   bfbe6:	2700      	movne	r7, #0
   bfbe8:	2706      	moveq	r7, #6
   bfbea:	4638      	mov	r0, r7
   bfbec:	b009      	add	sp, #36	; 0x24
   bfbee:	ecbd 8b02 	vpop	{d8}
   bfbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bfbf6:	463e      	mov	r6, r7
   bfbf8:	4625      	mov	r5, r4
   bfbfa:	2401      	movs	r4, #1
   bfbfc:	e7ca      	b.n	bfb94 <__gethex+0xd4>
   bfbfe:	f04f 0900 	mov.w	r9, #0
   bfc02:	1cb1      	adds	r1, r6, #2
   bfc04:	e7d3      	b.n	bfbae <__gethex+0xee>
   bfc06:	f04f 0901 	mov.w	r9, #1
   bfc0a:	e7fa      	b.n	bfc02 <__gethex+0x142>
   bfc0c:	230a      	movs	r3, #10
   bfc0e:	fb03 0202 	mla	r2, r3, r2, r0
   bfc12:	3a10      	subs	r2, #16
   bfc14:	e7d4      	b.n	bfbc0 <__gethex+0x100>
   bfc16:	4631      	mov	r1, r6
   bfc18:	e7df      	b.n	bfbda <__gethex+0x11a>
   bfc1a:	1bf3      	subs	r3, r6, r7
   bfc1c:	3b01      	subs	r3, #1
   bfc1e:	4621      	mov	r1, r4
   bfc20:	2b07      	cmp	r3, #7
   bfc22:	dc0b      	bgt.n	bfc3c <__gethex+0x17c>
   bfc24:	ee18 0a10 	vmov	r0, s16
   bfc28:	f000 fa68 	bl	c00fc <_Balloc>
   bfc2c:	4604      	mov	r4, r0
   bfc2e:	b940      	cbnz	r0, bfc42 <__gethex+0x182>
   bfc30:	4b5d      	ldr	r3, [pc, #372]	; (bfda8 <__gethex+0x2e8>)
   bfc32:	4602      	mov	r2, r0
   bfc34:	21de      	movs	r1, #222	; 0xde
   bfc36:	485d      	ldr	r0, [pc, #372]	; (bfdac <__gethex+0x2ec>)
   bfc38:	f7fa f9be 	bl	b9fb8 <__assert_func>
   bfc3c:	3101      	adds	r1, #1
   bfc3e:	105b      	asrs	r3, r3, #1
   bfc40:	e7ee      	b.n	bfc20 <__gethex+0x160>
   bfc42:	f100 0914 	add.w	r9, r0, #20
   bfc46:	f04f 0b00 	mov.w	fp, #0
   bfc4a:	f1ca 0301 	rsb	r3, sl, #1
   bfc4e:	f8cd 9008 	str.w	r9, [sp, #8]
   bfc52:	f8cd b000 	str.w	fp, [sp]
   bfc56:	9306      	str	r3, [sp, #24]
   bfc58:	42b7      	cmp	r7, r6
   bfc5a:	d340      	bcc.n	bfcde <__gethex+0x21e>
   bfc5c:	9802      	ldr	r0, [sp, #8]
   bfc5e:	9b00      	ldr	r3, [sp, #0]
   bfc60:	f840 3b04 	str.w	r3, [r0], #4
   bfc64:	eba0 0009 	sub.w	r0, r0, r9
   bfc68:	1080      	asrs	r0, r0, #2
   bfc6a:	0146      	lsls	r6, r0, #5
   bfc6c:	6120      	str	r0, [r4, #16]
   bfc6e:	4618      	mov	r0, r3
   bfc70:	f000 fb36 	bl	c02e0 <__hi0bits>
   bfc74:	1a30      	subs	r0, r6, r0
   bfc76:	f8d8 6000 	ldr.w	r6, [r8]
   bfc7a:	42b0      	cmp	r0, r6
   bfc7c:	dd63      	ble.n	bfd46 <__gethex+0x286>
   bfc7e:	1b87      	subs	r7, r0, r6
   bfc80:	4639      	mov	r1, r7
   bfc82:	4620      	mov	r0, r4
   bfc84:	f000 feda 	bl	c0a3c <__any_on>
   bfc88:	4682      	mov	sl, r0
   bfc8a:	b1a8      	cbz	r0, bfcb8 <__gethex+0x1f8>
   bfc8c:	1e7b      	subs	r3, r7, #1
   bfc8e:	1159      	asrs	r1, r3, #5
   bfc90:	f003 021f 	and.w	r2, r3, #31
   bfc94:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bfc98:	f04f 0a01 	mov.w	sl, #1
   bfc9c:	fa0a f202 	lsl.w	r2, sl, r2
   bfca0:	420a      	tst	r2, r1
   bfca2:	d009      	beq.n	bfcb8 <__gethex+0x1f8>
   bfca4:	4553      	cmp	r3, sl
   bfca6:	dd05      	ble.n	bfcb4 <__gethex+0x1f4>
   bfca8:	1eb9      	subs	r1, r7, #2
   bfcaa:	4620      	mov	r0, r4
   bfcac:	f000 fec6 	bl	c0a3c <__any_on>
   bfcb0:	2800      	cmp	r0, #0
   bfcb2:	d145      	bne.n	bfd40 <__gethex+0x280>
   bfcb4:	f04f 0a02 	mov.w	sl, #2
   bfcb8:	4639      	mov	r1, r7
   bfcba:	4620      	mov	r0, r4
   bfcbc:	f7ff fe98 	bl	bf9f0 <rshift>
   bfcc0:	443d      	add	r5, r7
   bfcc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bfcc6:	42ab      	cmp	r3, r5
   bfcc8:	da4c      	bge.n	bfd64 <__gethex+0x2a4>
   bfcca:	ee18 0a10 	vmov	r0, s16
   bfcce:	4621      	mov	r1, r4
   bfcd0:	f000 fa54 	bl	c017c <_Bfree>
   bfcd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bfcd6:	2300      	movs	r3, #0
   bfcd8:	6013      	str	r3, [r2, #0]
   bfcda:	27a3      	movs	r7, #163	; 0xa3
   bfcdc:	e785      	b.n	bfbea <__gethex+0x12a>
   bfcde:	1e73      	subs	r3, r6, #1
   bfce0:	9a05      	ldr	r2, [sp, #20]
   bfce2:	9303      	str	r3, [sp, #12]
   bfce4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bfce8:	4293      	cmp	r3, r2
   bfcea:	d019      	beq.n	bfd20 <__gethex+0x260>
   bfcec:	f1bb 0f20 	cmp.w	fp, #32
   bfcf0:	d107      	bne.n	bfd02 <__gethex+0x242>
   bfcf2:	9b02      	ldr	r3, [sp, #8]
   bfcf4:	9a00      	ldr	r2, [sp, #0]
   bfcf6:	f843 2b04 	str.w	r2, [r3], #4
   bfcfa:	9302      	str	r3, [sp, #8]
   bfcfc:	2300      	movs	r3, #0
   bfcfe:	9300      	str	r3, [sp, #0]
   bfd00:	469b      	mov	fp, r3
   bfd02:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bfd06:	f7ff fec5 	bl	bfa94 <__hexdig_fun>
   bfd0a:	9b00      	ldr	r3, [sp, #0]
   bfd0c:	f000 000f 	and.w	r0, r0, #15
   bfd10:	fa00 f00b 	lsl.w	r0, r0, fp
   bfd14:	4303      	orrs	r3, r0
   bfd16:	9300      	str	r3, [sp, #0]
   bfd18:	f10b 0b04 	add.w	fp, fp, #4
   bfd1c:	9b03      	ldr	r3, [sp, #12]
   bfd1e:	e00d      	b.n	bfd3c <__gethex+0x27c>
   bfd20:	9b03      	ldr	r3, [sp, #12]
   bfd22:	9a06      	ldr	r2, [sp, #24]
   bfd24:	4413      	add	r3, r2
   bfd26:	42bb      	cmp	r3, r7
   bfd28:	d3e0      	bcc.n	bfcec <__gethex+0x22c>
   bfd2a:	4618      	mov	r0, r3
   bfd2c:	9901      	ldr	r1, [sp, #4]
   bfd2e:	9307      	str	r3, [sp, #28]
   bfd30:	4652      	mov	r2, sl
   bfd32:	f7fe ff0e 	bl	beb52 <strncmp>
   bfd36:	9b07      	ldr	r3, [sp, #28]
   bfd38:	2800      	cmp	r0, #0
   bfd3a:	d1d7      	bne.n	bfcec <__gethex+0x22c>
   bfd3c:	461e      	mov	r6, r3
   bfd3e:	e78b      	b.n	bfc58 <__gethex+0x198>
   bfd40:	f04f 0a03 	mov.w	sl, #3
   bfd44:	e7b8      	b.n	bfcb8 <__gethex+0x1f8>
   bfd46:	da0a      	bge.n	bfd5e <__gethex+0x29e>
   bfd48:	1a37      	subs	r7, r6, r0
   bfd4a:	4621      	mov	r1, r4
   bfd4c:	ee18 0a10 	vmov	r0, s16
   bfd50:	463a      	mov	r2, r7
   bfd52:	f000 fc2f 	bl	c05b4 <__lshift>
   bfd56:	1bed      	subs	r5, r5, r7
   bfd58:	4604      	mov	r4, r0
   bfd5a:	f100 0914 	add.w	r9, r0, #20
   bfd5e:	f04f 0a00 	mov.w	sl, #0
   bfd62:	e7ae      	b.n	bfcc2 <__gethex+0x202>
   bfd64:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bfd68:	42a8      	cmp	r0, r5
   bfd6a:	dd72      	ble.n	bfe52 <__gethex+0x392>
   bfd6c:	1b45      	subs	r5, r0, r5
   bfd6e:	42ae      	cmp	r6, r5
   bfd70:	dc36      	bgt.n	bfde0 <__gethex+0x320>
   bfd72:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bfd76:	2b02      	cmp	r3, #2
   bfd78:	d02a      	beq.n	bfdd0 <__gethex+0x310>
   bfd7a:	2b03      	cmp	r3, #3
   bfd7c:	d02c      	beq.n	bfdd8 <__gethex+0x318>
   bfd7e:	2b01      	cmp	r3, #1
   bfd80:	d11c      	bne.n	bfdbc <__gethex+0x2fc>
   bfd82:	42ae      	cmp	r6, r5
   bfd84:	d11a      	bne.n	bfdbc <__gethex+0x2fc>
   bfd86:	2e01      	cmp	r6, #1
   bfd88:	d112      	bne.n	bfdb0 <__gethex+0x2f0>
   bfd8a:	9a04      	ldr	r2, [sp, #16]
   bfd8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bfd90:	6013      	str	r3, [r2, #0]
   bfd92:	2301      	movs	r3, #1
   bfd94:	6123      	str	r3, [r4, #16]
   bfd96:	f8c9 3000 	str.w	r3, [r9]
   bfd9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bfd9c:	2762      	movs	r7, #98	; 0x62
   bfd9e:	601c      	str	r4, [r3, #0]
   bfda0:	e723      	b.n	bfbea <__gethex+0x12a>
   bfda2:	bf00      	nop
   bfda4:	000c237c 	.word	0x000c237c
   bfda8:	000c2309 	.word	0x000c2309
   bfdac:	000c231a 	.word	0x000c231a
   bfdb0:	1e71      	subs	r1, r6, #1
   bfdb2:	4620      	mov	r0, r4
   bfdb4:	f000 fe42 	bl	c0a3c <__any_on>
   bfdb8:	2800      	cmp	r0, #0
   bfdba:	d1e6      	bne.n	bfd8a <__gethex+0x2ca>
   bfdbc:	ee18 0a10 	vmov	r0, s16
   bfdc0:	4621      	mov	r1, r4
   bfdc2:	f000 f9db 	bl	c017c <_Bfree>
   bfdc6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bfdc8:	2300      	movs	r3, #0
   bfdca:	6013      	str	r3, [r2, #0]
   bfdcc:	2750      	movs	r7, #80	; 0x50
   bfdce:	e70c      	b.n	bfbea <__gethex+0x12a>
   bfdd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bfdd2:	2b00      	cmp	r3, #0
   bfdd4:	d1f2      	bne.n	bfdbc <__gethex+0x2fc>
   bfdd6:	e7d8      	b.n	bfd8a <__gethex+0x2ca>
   bfdd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bfdda:	2b00      	cmp	r3, #0
   bfddc:	d1d5      	bne.n	bfd8a <__gethex+0x2ca>
   bfdde:	e7ed      	b.n	bfdbc <__gethex+0x2fc>
   bfde0:	1e6f      	subs	r7, r5, #1
   bfde2:	f1ba 0f00 	cmp.w	sl, #0
   bfde6:	d131      	bne.n	bfe4c <__gethex+0x38c>
   bfde8:	b127      	cbz	r7, bfdf4 <__gethex+0x334>
   bfdea:	4639      	mov	r1, r7
   bfdec:	4620      	mov	r0, r4
   bfdee:	f000 fe25 	bl	c0a3c <__any_on>
   bfdf2:	4682      	mov	sl, r0
   bfdf4:	117b      	asrs	r3, r7, #5
   bfdf6:	2101      	movs	r1, #1
   bfdf8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bfdfc:	f007 071f 	and.w	r7, r7, #31
   bfe00:	fa01 f707 	lsl.w	r7, r1, r7
   bfe04:	421f      	tst	r7, r3
   bfe06:	4629      	mov	r1, r5
   bfe08:	4620      	mov	r0, r4
   bfe0a:	bf18      	it	ne
   bfe0c:	f04a 0a02 	orrne.w	sl, sl, #2
   bfe10:	1b76      	subs	r6, r6, r5
   bfe12:	f7ff fded 	bl	bf9f0 <rshift>
   bfe16:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bfe1a:	2702      	movs	r7, #2
   bfe1c:	f1ba 0f00 	cmp.w	sl, #0
   bfe20:	d048      	beq.n	bfeb4 <__gethex+0x3f4>
   bfe22:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bfe26:	2b02      	cmp	r3, #2
   bfe28:	d015      	beq.n	bfe56 <__gethex+0x396>
   bfe2a:	2b03      	cmp	r3, #3
   bfe2c:	d017      	beq.n	bfe5e <__gethex+0x39e>
   bfe2e:	2b01      	cmp	r3, #1
   bfe30:	d109      	bne.n	bfe46 <__gethex+0x386>
   bfe32:	f01a 0f02 	tst.w	sl, #2
   bfe36:	d006      	beq.n	bfe46 <__gethex+0x386>
   bfe38:	f8d9 0000 	ldr.w	r0, [r9]
   bfe3c:	ea4a 0a00 	orr.w	sl, sl, r0
   bfe40:	f01a 0f01 	tst.w	sl, #1
   bfe44:	d10e      	bne.n	bfe64 <__gethex+0x3a4>
   bfe46:	f047 0710 	orr.w	r7, r7, #16
   bfe4a:	e033      	b.n	bfeb4 <__gethex+0x3f4>
   bfe4c:	f04f 0a01 	mov.w	sl, #1
   bfe50:	e7d0      	b.n	bfdf4 <__gethex+0x334>
   bfe52:	2701      	movs	r7, #1
   bfe54:	e7e2      	b.n	bfe1c <__gethex+0x35c>
   bfe56:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bfe58:	f1c3 0301 	rsb	r3, r3, #1
   bfe5c:	9315      	str	r3, [sp, #84]	; 0x54
   bfe5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bfe60:	2b00      	cmp	r3, #0
   bfe62:	d0f0      	beq.n	bfe46 <__gethex+0x386>
   bfe64:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bfe68:	f104 0314 	add.w	r3, r4, #20
   bfe6c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bfe70:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bfe74:	f04f 0c00 	mov.w	ip, #0
   bfe78:	4618      	mov	r0, r3
   bfe7a:	f853 2b04 	ldr.w	r2, [r3], #4
   bfe7e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bfe82:	d01c      	beq.n	bfebe <__gethex+0x3fe>
   bfe84:	3201      	adds	r2, #1
   bfe86:	6002      	str	r2, [r0, #0]
   bfe88:	2f02      	cmp	r7, #2
   bfe8a:	f104 0314 	add.w	r3, r4, #20
   bfe8e:	d13f      	bne.n	bff10 <__gethex+0x450>
   bfe90:	f8d8 2000 	ldr.w	r2, [r8]
   bfe94:	3a01      	subs	r2, #1
   bfe96:	42b2      	cmp	r2, r6
   bfe98:	d10a      	bne.n	bfeb0 <__gethex+0x3f0>
   bfe9a:	1171      	asrs	r1, r6, #5
   bfe9c:	2201      	movs	r2, #1
   bfe9e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bfea2:	f006 061f 	and.w	r6, r6, #31
   bfea6:	fa02 f606 	lsl.w	r6, r2, r6
   bfeaa:	421e      	tst	r6, r3
   bfeac:	bf18      	it	ne
   bfeae:	4617      	movne	r7, r2
   bfeb0:	f047 0720 	orr.w	r7, r7, #32
   bfeb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bfeb6:	601c      	str	r4, [r3, #0]
   bfeb8:	9b04      	ldr	r3, [sp, #16]
   bfeba:	601d      	str	r5, [r3, #0]
   bfebc:	e695      	b.n	bfbea <__gethex+0x12a>
   bfebe:	4299      	cmp	r1, r3
   bfec0:	f843 cc04 	str.w	ip, [r3, #-4]
   bfec4:	d8d8      	bhi.n	bfe78 <__gethex+0x3b8>
   bfec6:	68a3      	ldr	r3, [r4, #8]
   bfec8:	459b      	cmp	fp, r3
   bfeca:	db19      	blt.n	bff00 <__gethex+0x440>
   bfecc:	6861      	ldr	r1, [r4, #4]
   bfece:	ee18 0a10 	vmov	r0, s16
   bfed2:	3101      	adds	r1, #1
   bfed4:	f000 f912 	bl	c00fc <_Balloc>
   bfed8:	4681      	mov	r9, r0
   bfeda:	b918      	cbnz	r0, bfee4 <__gethex+0x424>
   bfedc:	4b1a      	ldr	r3, [pc, #104]	; (bff48 <__gethex+0x488>)
   bfede:	4602      	mov	r2, r0
   bfee0:	2184      	movs	r1, #132	; 0x84
   bfee2:	e6a8      	b.n	bfc36 <__gethex+0x176>
   bfee4:	6922      	ldr	r2, [r4, #16]
   bfee6:	3202      	adds	r2, #2
   bfee8:	f104 010c 	add.w	r1, r4, #12
   bfeec:	0092      	lsls	r2, r2, #2
   bfeee:	300c      	adds	r0, #12
   bfef0:	f7fe fd4b 	bl	be98a <memcpy>
   bfef4:	4621      	mov	r1, r4
   bfef6:	ee18 0a10 	vmov	r0, s16
   bfefa:	f000 f93f 	bl	c017c <_Bfree>
   bfefe:	464c      	mov	r4, r9
   bff00:	6923      	ldr	r3, [r4, #16]
   bff02:	1c5a      	adds	r2, r3, #1
   bff04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bff08:	6122      	str	r2, [r4, #16]
   bff0a:	2201      	movs	r2, #1
   bff0c:	615a      	str	r2, [r3, #20]
   bff0e:	e7bb      	b.n	bfe88 <__gethex+0x3c8>
   bff10:	6922      	ldr	r2, [r4, #16]
   bff12:	455a      	cmp	r2, fp
   bff14:	dd0b      	ble.n	bff2e <__gethex+0x46e>
   bff16:	2101      	movs	r1, #1
   bff18:	4620      	mov	r0, r4
   bff1a:	f7ff fd69 	bl	bf9f0 <rshift>
   bff1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bff22:	3501      	adds	r5, #1
   bff24:	42ab      	cmp	r3, r5
   bff26:	f6ff aed0 	blt.w	bfcca <__gethex+0x20a>
   bff2a:	2701      	movs	r7, #1
   bff2c:	e7c0      	b.n	bfeb0 <__gethex+0x3f0>
   bff2e:	f016 061f 	ands.w	r6, r6, #31
   bff32:	d0fa      	beq.n	bff2a <__gethex+0x46a>
   bff34:	4453      	add	r3, sl
   bff36:	f1c6 0620 	rsb	r6, r6, #32
   bff3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bff3e:	f000 f9cf 	bl	c02e0 <__hi0bits>
   bff42:	42b0      	cmp	r0, r6
   bff44:	dbe7      	blt.n	bff16 <__gethex+0x456>
   bff46:	e7f0      	b.n	bff2a <__gethex+0x46a>
   bff48:	000c2309 	.word	0x000c2309

000bff4c <L_shift>:
   bff4c:	f1c2 0208 	rsb	r2, r2, #8
   bff50:	0092      	lsls	r2, r2, #2
   bff52:	b570      	push	{r4, r5, r6, lr}
   bff54:	f1c2 0620 	rsb	r6, r2, #32
   bff58:	6843      	ldr	r3, [r0, #4]
   bff5a:	6804      	ldr	r4, [r0, #0]
   bff5c:	fa03 f506 	lsl.w	r5, r3, r6
   bff60:	432c      	orrs	r4, r5
   bff62:	40d3      	lsrs	r3, r2
   bff64:	6004      	str	r4, [r0, #0]
   bff66:	f840 3f04 	str.w	r3, [r0, #4]!
   bff6a:	4288      	cmp	r0, r1
   bff6c:	d3f4      	bcc.n	bff58 <L_shift+0xc>
   bff6e:	bd70      	pop	{r4, r5, r6, pc}

000bff70 <__match>:
   bff70:	b530      	push	{r4, r5, lr}
   bff72:	6803      	ldr	r3, [r0, #0]
   bff74:	3301      	adds	r3, #1
   bff76:	f811 4b01 	ldrb.w	r4, [r1], #1
   bff7a:	b914      	cbnz	r4, bff82 <__match+0x12>
   bff7c:	6003      	str	r3, [r0, #0]
   bff7e:	2001      	movs	r0, #1
   bff80:	bd30      	pop	{r4, r5, pc}
   bff82:	f813 2b01 	ldrb.w	r2, [r3], #1
   bff86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bff8a:	2d19      	cmp	r5, #25
   bff8c:	bf98      	it	ls
   bff8e:	3220      	addls	r2, #32
   bff90:	42a2      	cmp	r2, r4
   bff92:	d0f0      	beq.n	bff76 <__match+0x6>
   bff94:	2000      	movs	r0, #0
   bff96:	e7f3      	b.n	bff80 <__match+0x10>

000bff98 <__hexnan>:
   bff98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bff9c:	680b      	ldr	r3, [r1, #0]
   bff9e:	115e      	asrs	r6, r3, #5
   bffa0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bffa4:	f013 031f 	ands.w	r3, r3, #31
   bffa8:	b087      	sub	sp, #28
   bffaa:	bf18      	it	ne
   bffac:	3604      	addne	r6, #4
   bffae:	2500      	movs	r5, #0
   bffb0:	1f37      	subs	r7, r6, #4
   bffb2:	4690      	mov	r8, r2
   bffb4:	6802      	ldr	r2, [r0, #0]
   bffb6:	9301      	str	r3, [sp, #4]
   bffb8:	4682      	mov	sl, r0
   bffba:	f846 5c04 	str.w	r5, [r6, #-4]
   bffbe:	46b9      	mov	r9, r7
   bffc0:	463c      	mov	r4, r7
   bffc2:	9502      	str	r5, [sp, #8]
   bffc4:	46ab      	mov	fp, r5
   bffc6:	7851      	ldrb	r1, [r2, #1]
   bffc8:	1c53      	adds	r3, r2, #1
   bffca:	9303      	str	r3, [sp, #12]
   bffcc:	b341      	cbz	r1, c0020 <__hexnan+0x88>
   bffce:	4608      	mov	r0, r1
   bffd0:	9205      	str	r2, [sp, #20]
   bffd2:	9104      	str	r1, [sp, #16]
   bffd4:	f7ff fd5e 	bl	bfa94 <__hexdig_fun>
   bffd8:	2800      	cmp	r0, #0
   bffda:	d14f      	bne.n	c007c <__hexnan+0xe4>
   bffdc:	9904      	ldr	r1, [sp, #16]
   bffde:	9a05      	ldr	r2, [sp, #20]
   bffe0:	2920      	cmp	r1, #32
   bffe2:	d818      	bhi.n	c0016 <__hexnan+0x7e>
   bffe4:	9b02      	ldr	r3, [sp, #8]
   bffe6:	459b      	cmp	fp, r3
   bffe8:	dd13      	ble.n	c0012 <__hexnan+0x7a>
   bffea:	454c      	cmp	r4, r9
   bffec:	d206      	bcs.n	bfffc <__hexnan+0x64>
   bffee:	2d07      	cmp	r5, #7
   bfff0:	dc04      	bgt.n	bfffc <__hexnan+0x64>
   bfff2:	462a      	mov	r2, r5
   bfff4:	4649      	mov	r1, r9
   bfff6:	4620      	mov	r0, r4
   bfff8:	f7ff ffa8 	bl	bff4c <L_shift>
   bfffc:	4544      	cmp	r4, r8
   bfffe:	d950      	bls.n	c00a2 <__hexnan+0x10a>
   c0000:	2300      	movs	r3, #0
   c0002:	f1a4 0904 	sub.w	r9, r4, #4
   c0006:	f844 3c04 	str.w	r3, [r4, #-4]
   c000a:	f8cd b008 	str.w	fp, [sp, #8]
   c000e:	464c      	mov	r4, r9
   c0010:	461d      	mov	r5, r3
   c0012:	9a03      	ldr	r2, [sp, #12]
   c0014:	e7d7      	b.n	bffc6 <__hexnan+0x2e>
   c0016:	2929      	cmp	r1, #41	; 0x29
   c0018:	d156      	bne.n	c00c8 <__hexnan+0x130>
   c001a:	3202      	adds	r2, #2
   c001c:	f8ca 2000 	str.w	r2, [sl]
   c0020:	f1bb 0f00 	cmp.w	fp, #0
   c0024:	d050      	beq.n	c00c8 <__hexnan+0x130>
   c0026:	454c      	cmp	r4, r9
   c0028:	d206      	bcs.n	c0038 <__hexnan+0xa0>
   c002a:	2d07      	cmp	r5, #7
   c002c:	dc04      	bgt.n	c0038 <__hexnan+0xa0>
   c002e:	462a      	mov	r2, r5
   c0030:	4649      	mov	r1, r9
   c0032:	4620      	mov	r0, r4
   c0034:	f7ff ff8a 	bl	bff4c <L_shift>
   c0038:	4544      	cmp	r4, r8
   c003a:	d934      	bls.n	c00a6 <__hexnan+0x10e>
   c003c:	f1a8 0204 	sub.w	r2, r8, #4
   c0040:	4623      	mov	r3, r4
   c0042:	f853 1b04 	ldr.w	r1, [r3], #4
   c0046:	f842 1f04 	str.w	r1, [r2, #4]!
   c004a:	429f      	cmp	r7, r3
   c004c:	d2f9      	bcs.n	c0042 <__hexnan+0xaa>
   c004e:	1b3b      	subs	r3, r7, r4
   c0050:	f023 0303 	bic.w	r3, r3, #3
   c0054:	3304      	adds	r3, #4
   c0056:	3401      	adds	r4, #1
   c0058:	3e03      	subs	r6, #3
   c005a:	42b4      	cmp	r4, r6
   c005c:	bf88      	it	hi
   c005e:	2304      	movhi	r3, #4
   c0060:	4443      	add	r3, r8
   c0062:	2200      	movs	r2, #0
   c0064:	f843 2b04 	str.w	r2, [r3], #4
   c0068:	429f      	cmp	r7, r3
   c006a:	d2fb      	bcs.n	c0064 <__hexnan+0xcc>
   c006c:	683b      	ldr	r3, [r7, #0]
   c006e:	b91b      	cbnz	r3, c0078 <__hexnan+0xe0>
   c0070:	4547      	cmp	r7, r8
   c0072:	d127      	bne.n	c00c4 <__hexnan+0x12c>
   c0074:	2301      	movs	r3, #1
   c0076:	603b      	str	r3, [r7, #0]
   c0078:	2005      	movs	r0, #5
   c007a:	e026      	b.n	c00ca <__hexnan+0x132>
   c007c:	3501      	adds	r5, #1
   c007e:	2d08      	cmp	r5, #8
   c0080:	f10b 0b01 	add.w	fp, fp, #1
   c0084:	dd06      	ble.n	c0094 <__hexnan+0xfc>
   c0086:	4544      	cmp	r4, r8
   c0088:	d9c3      	bls.n	c0012 <__hexnan+0x7a>
   c008a:	2300      	movs	r3, #0
   c008c:	f844 3c04 	str.w	r3, [r4, #-4]
   c0090:	2501      	movs	r5, #1
   c0092:	3c04      	subs	r4, #4
   c0094:	6822      	ldr	r2, [r4, #0]
   c0096:	f000 000f 	and.w	r0, r0, #15
   c009a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c009e:	6022      	str	r2, [r4, #0]
   c00a0:	e7b7      	b.n	c0012 <__hexnan+0x7a>
   c00a2:	2508      	movs	r5, #8
   c00a4:	e7b5      	b.n	c0012 <__hexnan+0x7a>
   c00a6:	9b01      	ldr	r3, [sp, #4]
   c00a8:	2b00      	cmp	r3, #0
   c00aa:	d0df      	beq.n	c006c <__hexnan+0xd4>
   c00ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c00b0:	f1c3 0320 	rsb	r3, r3, #32
   c00b4:	fa22 f303 	lsr.w	r3, r2, r3
   c00b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c00bc:	401a      	ands	r2, r3
   c00be:	f846 2c04 	str.w	r2, [r6, #-4]
   c00c2:	e7d3      	b.n	c006c <__hexnan+0xd4>
   c00c4:	3f04      	subs	r7, #4
   c00c6:	e7d1      	b.n	c006c <__hexnan+0xd4>
   c00c8:	2004      	movs	r0, #4
   c00ca:	b007      	add	sp, #28
   c00cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c00d0 <__retarget_lock_acquire_recursive>:
   c00d0:	4770      	bx	lr

000c00d2 <__retarget_lock_release>:
   c00d2:	4770      	bx	lr

000c00d4 <__retarget_lock_release_recursive>:
   c00d4:	4770      	bx	lr

000c00d6 <__ascii_mbtowc>:
   c00d6:	b082      	sub	sp, #8
   c00d8:	b901      	cbnz	r1, c00dc <__ascii_mbtowc+0x6>
   c00da:	a901      	add	r1, sp, #4
   c00dc:	b142      	cbz	r2, c00f0 <__ascii_mbtowc+0x1a>
   c00de:	b14b      	cbz	r3, c00f4 <__ascii_mbtowc+0x1e>
   c00e0:	7813      	ldrb	r3, [r2, #0]
   c00e2:	600b      	str	r3, [r1, #0]
   c00e4:	7812      	ldrb	r2, [r2, #0]
   c00e6:	1e10      	subs	r0, r2, #0
   c00e8:	bf18      	it	ne
   c00ea:	2001      	movne	r0, #1
   c00ec:	b002      	add	sp, #8
   c00ee:	4770      	bx	lr
   c00f0:	4610      	mov	r0, r2
   c00f2:	e7fb      	b.n	c00ec <__ascii_mbtowc+0x16>
   c00f4:	f06f 0001 	mvn.w	r0, #1
   c00f8:	e7f8      	b.n	c00ec <__ascii_mbtowc+0x16>
	...

000c00fc <_Balloc>:
   c00fc:	b570      	push	{r4, r5, r6, lr}
   c00fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c0100:	4604      	mov	r4, r0
   c0102:	460d      	mov	r5, r1
   c0104:	b976      	cbnz	r6, c0124 <_Balloc+0x28>
   c0106:	2010      	movs	r0, #16
   c0108:	f7f9 ff06 	bl	b9f18 <malloc>
   c010c:	4602      	mov	r2, r0
   c010e:	6260      	str	r0, [r4, #36]	; 0x24
   c0110:	b920      	cbnz	r0, c011c <_Balloc+0x20>
   c0112:	4b18      	ldr	r3, [pc, #96]	; (c0174 <_Balloc+0x78>)
   c0114:	4818      	ldr	r0, [pc, #96]	; (c0178 <_Balloc+0x7c>)
   c0116:	2166      	movs	r1, #102	; 0x66
   c0118:	f7f9 ff4e 	bl	b9fb8 <__assert_func>
   c011c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c0120:	6006      	str	r6, [r0, #0]
   c0122:	60c6      	str	r6, [r0, #12]
   c0124:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c0126:	68f3      	ldr	r3, [r6, #12]
   c0128:	b183      	cbz	r3, c014c <_Balloc+0x50>
   c012a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c012c:	68db      	ldr	r3, [r3, #12]
   c012e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c0132:	b9b8      	cbnz	r0, c0164 <_Balloc+0x68>
   c0134:	2101      	movs	r1, #1
   c0136:	fa01 f605 	lsl.w	r6, r1, r5
   c013a:	1d72      	adds	r2, r6, #5
   c013c:	0092      	lsls	r2, r2, #2
   c013e:	4620      	mov	r0, r4
   c0140:	f000 fc9d 	bl	c0a7e <_calloc_r>
   c0144:	b160      	cbz	r0, c0160 <_Balloc+0x64>
   c0146:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c014a:	e00e      	b.n	c016a <_Balloc+0x6e>
   c014c:	2221      	movs	r2, #33	; 0x21
   c014e:	2104      	movs	r1, #4
   c0150:	4620      	mov	r0, r4
   c0152:	f000 fc94 	bl	c0a7e <_calloc_r>
   c0156:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c0158:	60f0      	str	r0, [r6, #12]
   c015a:	68db      	ldr	r3, [r3, #12]
   c015c:	2b00      	cmp	r3, #0
   c015e:	d1e4      	bne.n	c012a <_Balloc+0x2e>
   c0160:	2000      	movs	r0, #0
   c0162:	bd70      	pop	{r4, r5, r6, pc}
   c0164:	6802      	ldr	r2, [r0, #0]
   c0166:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c016a:	2300      	movs	r3, #0
   c016c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c0170:	e7f7      	b.n	c0162 <_Balloc+0x66>
   c0172:	bf00      	nop
   c0174:	000c2139 	.word	0x000c2139
   c0178:	000c2390 	.word	0x000c2390

000c017c <_Bfree>:
   c017c:	b570      	push	{r4, r5, r6, lr}
   c017e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c0180:	4605      	mov	r5, r0
   c0182:	460c      	mov	r4, r1
   c0184:	b976      	cbnz	r6, c01a4 <_Bfree+0x28>
   c0186:	2010      	movs	r0, #16
   c0188:	f7f9 fec6 	bl	b9f18 <malloc>
   c018c:	4602      	mov	r2, r0
   c018e:	6268      	str	r0, [r5, #36]	; 0x24
   c0190:	b920      	cbnz	r0, c019c <_Bfree+0x20>
   c0192:	4b09      	ldr	r3, [pc, #36]	; (c01b8 <_Bfree+0x3c>)
   c0194:	4809      	ldr	r0, [pc, #36]	; (c01bc <_Bfree+0x40>)
   c0196:	218a      	movs	r1, #138	; 0x8a
   c0198:	f7f9 ff0e 	bl	b9fb8 <__assert_func>
   c019c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c01a0:	6006      	str	r6, [r0, #0]
   c01a2:	60c6      	str	r6, [r0, #12]
   c01a4:	b13c      	cbz	r4, c01b6 <_Bfree+0x3a>
   c01a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c01a8:	6862      	ldr	r2, [r4, #4]
   c01aa:	68db      	ldr	r3, [r3, #12]
   c01ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c01b0:	6021      	str	r1, [r4, #0]
   c01b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c01b6:	bd70      	pop	{r4, r5, r6, pc}
   c01b8:	000c2139 	.word	0x000c2139
   c01bc:	000c2390 	.word	0x000c2390

000c01c0 <__multadd>:
   c01c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c01c4:	690d      	ldr	r5, [r1, #16]
   c01c6:	4607      	mov	r7, r0
   c01c8:	460c      	mov	r4, r1
   c01ca:	461e      	mov	r6, r3
   c01cc:	f101 0c14 	add.w	ip, r1, #20
   c01d0:	2000      	movs	r0, #0
   c01d2:	f8dc 3000 	ldr.w	r3, [ip]
   c01d6:	b299      	uxth	r1, r3
   c01d8:	fb02 6101 	mla	r1, r2, r1, r6
   c01dc:	0c1e      	lsrs	r6, r3, #16
   c01de:	0c0b      	lsrs	r3, r1, #16
   c01e0:	fb02 3306 	mla	r3, r2, r6, r3
   c01e4:	b289      	uxth	r1, r1
   c01e6:	3001      	adds	r0, #1
   c01e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c01ec:	4285      	cmp	r5, r0
   c01ee:	f84c 1b04 	str.w	r1, [ip], #4
   c01f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c01f6:	dcec      	bgt.n	c01d2 <__multadd+0x12>
   c01f8:	b30e      	cbz	r6, c023e <__multadd+0x7e>
   c01fa:	68a3      	ldr	r3, [r4, #8]
   c01fc:	42ab      	cmp	r3, r5
   c01fe:	dc19      	bgt.n	c0234 <__multadd+0x74>
   c0200:	6861      	ldr	r1, [r4, #4]
   c0202:	4638      	mov	r0, r7
   c0204:	3101      	adds	r1, #1
   c0206:	f7ff ff79 	bl	c00fc <_Balloc>
   c020a:	4680      	mov	r8, r0
   c020c:	b928      	cbnz	r0, c021a <__multadd+0x5a>
   c020e:	4602      	mov	r2, r0
   c0210:	4b0c      	ldr	r3, [pc, #48]	; (c0244 <__multadd+0x84>)
   c0212:	480d      	ldr	r0, [pc, #52]	; (c0248 <__multadd+0x88>)
   c0214:	21b5      	movs	r1, #181	; 0xb5
   c0216:	f7f9 fecf 	bl	b9fb8 <__assert_func>
   c021a:	6922      	ldr	r2, [r4, #16]
   c021c:	3202      	adds	r2, #2
   c021e:	f104 010c 	add.w	r1, r4, #12
   c0222:	0092      	lsls	r2, r2, #2
   c0224:	300c      	adds	r0, #12
   c0226:	f7fe fbb0 	bl	be98a <memcpy>
   c022a:	4621      	mov	r1, r4
   c022c:	4638      	mov	r0, r7
   c022e:	f7ff ffa5 	bl	c017c <_Bfree>
   c0232:	4644      	mov	r4, r8
   c0234:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c0238:	3501      	adds	r5, #1
   c023a:	615e      	str	r6, [r3, #20]
   c023c:	6125      	str	r5, [r4, #16]
   c023e:	4620      	mov	r0, r4
   c0240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c0244:	000c2309 	.word	0x000c2309
   c0248:	000c2390 	.word	0x000c2390

000c024c <__s2b>:
   c024c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c0250:	460c      	mov	r4, r1
   c0252:	4615      	mov	r5, r2
   c0254:	461f      	mov	r7, r3
   c0256:	2209      	movs	r2, #9
   c0258:	3308      	adds	r3, #8
   c025a:	4606      	mov	r6, r0
   c025c:	fb93 f3f2 	sdiv	r3, r3, r2
   c0260:	2100      	movs	r1, #0
   c0262:	2201      	movs	r2, #1
   c0264:	429a      	cmp	r2, r3
   c0266:	db09      	blt.n	c027c <__s2b+0x30>
   c0268:	4630      	mov	r0, r6
   c026a:	f7ff ff47 	bl	c00fc <_Balloc>
   c026e:	b940      	cbnz	r0, c0282 <__s2b+0x36>
   c0270:	4602      	mov	r2, r0
   c0272:	4b19      	ldr	r3, [pc, #100]	; (c02d8 <__s2b+0x8c>)
   c0274:	4819      	ldr	r0, [pc, #100]	; (c02dc <__s2b+0x90>)
   c0276:	21ce      	movs	r1, #206	; 0xce
   c0278:	f7f9 fe9e 	bl	b9fb8 <__assert_func>
   c027c:	0052      	lsls	r2, r2, #1
   c027e:	3101      	adds	r1, #1
   c0280:	e7f0      	b.n	c0264 <__s2b+0x18>
   c0282:	9b08      	ldr	r3, [sp, #32]
   c0284:	6143      	str	r3, [r0, #20]
   c0286:	2d09      	cmp	r5, #9
   c0288:	f04f 0301 	mov.w	r3, #1
   c028c:	6103      	str	r3, [r0, #16]
   c028e:	dd16      	ble.n	c02be <__s2b+0x72>
   c0290:	f104 0909 	add.w	r9, r4, #9
   c0294:	46c8      	mov	r8, r9
   c0296:	442c      	add	r4, r5
   c0298:	f818 3b01 	ldrb.w	r3, [r8], #1
   c029c:	4601      	mov	r1, r0
   c029e:	3b30      	subs	r3, #48	; 0x30
   c02a0:	220a      	movs	r2, #10
   c02a2:	4630      	mov	r0, r6
   c02a4:	f7ff ff8c 	bl	c01c0 <__multadd>
   c02a8:	45a0      	cmp	r8, r4
   c02aa:	d1f5      	bne.n	c0298 <__s2b+0x4c>
   c02ac:	f1a5 0408 	sub.w	r4, r5, #8
   c02b0:	444c      	add	r4, r9
   c02b2:	1b2d      	subs	r5, r5, r4
   c02b4:	1963      	adds	r3, r4, r5
   c02b6:	42bb      	cmp	r3, r7
   c02b8:	db04      	blt.n	c02c4 <__s2b+0x78>
   c02ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c02be:	340a      	adds	r4, #10
   c02c0:	2509      	movs	r5, #9
   c02c2:	e7f6      	b.n	c02b2 <__s2b+0x66>
   c02c4:	f814 3b01 	ldrb.w	r3, [r4], #1
   c02c8:	4601      	mov	r1, r0
   c02ca:	3b30      	subs	r3, #48	; 0x30
   c02cc:	220a      	movs	r2, #10
   c02ce:	4630      	mov	r0, r6
   c02d0:	f7ff ff76 	bl	c01c0 <__multadd>
   c02d4:	e7ee      	b.n	c02b4 <__s2b+0x68>
   c02d6:	bf00      	nop
   c02d8:	000c2309 	.word	0x000c2309
   c02dc:	000c2390 	.word	0x000c2390

000c02e0 <__hi0bits>:
   c02e0:	0c03      	lsrs	r3, r0, #16
   c02e2:	041b      	lsls	r3, r3, #16
   c02e4:	b9d3      	cbnz	r3, c031c <__hi0bits+0x3c>
   c02e6:	0400      	lsls	r0, r0, #16
   c02e8:	2310      	movs	r3, #16
   c02ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c02ee:	bf04      	itt	eq
   c02f0:	0200      	lsleq	r0, r0, #8
   c02f2:	3308      	addeq	r3, #8
   c02f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c02f8:	bf04      	itt	eq
   c02fa:	0100      	lsleq	r0, r0, #4
   c02fc:	3304      	addeq	r3, #4
   c02fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c0302:	bf04      	itt	eq
   c0304:	0080      	lsleq	r0, r0, #2
   c0306:	3302      	addeq	r3, #2
   c0308:	2800      	cmp	r0, #0
   c030a:	db05      	blt.n	c0318 <__hi0bits+0x38>
   c030c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c0310:	f103 0301 	add.w	r3, r3, #1
   c0314:	bf08      	it	eq
   c0316:	2320      	moveq	r3, #32
   c0318:	4618      	mov	r0, r3
   c031a:	4770      	bx	lr
   c031c:	2300      	movs	r3, #0
   c031e:	e7e4      	b.n	c02ea <__hi0bits+0xa>

000c0320 <__lo0bits>:
   c0320:	6803      	ldr	r3, [r0, #0]
   c0322:	f013 0207 	ands.w	r2, r3, #7
   c0326:	4601      	mov	r1, r0
   c0328:	d00b      	beq.n	c0342 <__lo0bits+0x22>
   c032a:	07da      	lsls	r2, r3, #31
   c032c:	d423      	bmi.n	c0376 <__lo0bits+0x56>
   c032e:	0798      	lsls	r0, r3, #30
   c0330:	bf49      	itett	mi
   c0332:	085b      	lsrmi	r3, r3, #1
   c0334:	089b      	lsrpl	r3, r3, #2
   c0336:	2001      	movmi	r0, #1
   c0338:	600b      	strmi	r3, [r1, #0]
   c033a:	bf5c      	itt	pl
   c033c:	600b      	strpl	r3, [r1, #0]
   c033e:	2002      	movpl	r0, #2
   c0340:	4770      	bx	lr
   c0342:	b298      	uxth	r0, r3
   c0344:	b9a8      	cbnz	r0, c0372 <__lo0bits+0x52>
   c0346:	0c1b      	lsrs	r3, r3, #16
   c0348:	2010      	movs	r0, #16
   c034a:	b2da      	uxtb	r2, r3
   c034c:	b90a      	cbnz	r2, c0352 <__lo0bits+0x32>
   c034e:	3008      	adds	r0, #8
   c0350:	0a1b      	lsrs	r3, r3, #8
   c0352:	071a      	lsls	r2, r3, #28
   c0354:	bf04      	itt	eq
   c0356:	091b      	lsreq	r3, r3, #4
   c0358:	3004      	addeq	r0, #4
   c035a:	079a      	lsls	r2, r3, #30
   c035c:	bf04      	itt	eq
   c035e:	089b      	lsreq	r3, r3, #2
   c0360:	3002      	addeq	r0, #2
   c0362:	07da      	lsls	r2, r3, #31
   c0364:	d403      	bmi.n	c036e <__lo0bits+0x4e>
   c0366:	085b      	lsrs	r3, r3, #1
   c0368:	f100 0001 	add.w	r0, r0, #1
   c036c:	d005      	beq.n	c037a <__lo0bits+0x5a>
   c036e:	600b      	str	r3, [r1, #0]
   c0370:	4770      	bx	lr
   c0372:	4610      	mov	r0, r2
   c0374:	e7e9      	b.n	c034a <__lo0bits+0x2a>
   c0376:	2000      	movs	r0, #0
   c0378:	4770      	bx	lr
   c037a:	2020      	movs	r0, #32
   c037c:	4770      	bx	lr
	...

000c0380 <__i2b>:
   c0380:	b510      	push	{r4, lr}
   c0382:	460c      	mov	r4, r1
   c0384:	2101      	movs	r1, #1
   c0386:	f7ff feb9 	bl	c00fc <_Balloc>
   c038a:	4602      	mov	r2, r0
   c038c:	b928      	cbnz	r0, c039a <__i2b+0x1a>
   c038e:	4b05      	ldr	r3, [pc, #20]	; (c03a4 <__i2b+0x24>)
   c0390:	4805      	ldr	r0, [pc, #20]	; (c03a8 <__i2b+0x28>)
   c0392:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c0396:	f7f9 fe0f 	bl	b9fb8 <__assert_func>
   c039a:	2301      	movs	r3, #1
   c039c:	6144      	str	r4, [r0, #20]
   c039e:	6103      	str	r3, [r0, #16]
   c03a0:	bd10      	pop	{r4, pc}
   c03a2:	bf00      	nop
   c03a4:	000c2309 	.word	0x000c2309
   c03a8:	000c2390 	.word	0x000c2390

000c03ac <__multiply>:
   c03ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c03b0:	4691      	mov	r9, r2
   c03b2:	690a      	ldr	r2, [r1, #16]
   c03b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c03b8:	429a      	cmp	r2, r3
   c03ba:	bfb8      	it	lt
   c03bc:	460b      	movlt	r3, r1
   c03be:	460c      	mov	r4, r1
   c03c0:	bfbc      	itt	lt
   c03c2:	464c      	movlt	r4, r9
   c03c4:	4699      	movlt	r9, r3
   c03c6:	6927      	ldr	r7, [r4, #16]
   c03c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c03cc:	68a3      	ldr	r3, [r4, #8]
   c03ce:	6861      	ldr	r1, [r4, #4]
   c03d0:	eb07 060a 	add.w	r6, r7, sl
   c03d4:	42b3      	cmp	r3, r6
   c03d6:	b085      	sub	sp, #20
   c03d8:	bfb8      	it	lt
   c03da:	3101      	addlt	r1, #1
   c03dc:	f7ff fe8e 	bl	c00fc <_Balloc>
   c03e0:	b930      	cbnz	r0, c03f0 <__multiply+0x44>
   c03e2:	4602      	mov	r2, r0
   c03e4:	4b44      	ldr	r3, [pc, #272]	; (c04f8 <__multiply+0x14c>)
   c03e6:	4845      	ldr	r0, [pc, #276]	; (c04fc <__multiply+0x150>)
   c03e8:	f240 115d 	movw	r1, #349	; 0x15d
   c03ec:	f7f9 fde4 	bl	b9fb8 <__assert_func>
   c03f0:	f100 0514 	add.w	r5, r0, #20
   c03f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c03f8:	462b      	mov	r3, r5
   c03fa:	2200      	movs	r2, #0
   c03fc:	4543      	cmp	r3, r8
   c03fe:	d321      	bcc.n	c0444 <__multiply+0x98>
   c0400:	f104 0314 	add.w	r3, r4, #20
   c0404:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c0408:	f109 0314 	add.w	r3, r9, #20
   c040c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c0410:	9202      	str	r2, [sp, #8]
   c0412:	1b3a      	subs	r2, r7, r4
   c0414:	3a15      	subs	r2, #21
   c0416:	f022 0203 	bic.w	r2, r2, #3
   c041a:	3204      	adds	r2, #4
   c041c:	f104 0115 	add.w	r1, r4, #21
   c0420:	428f      	cmp	r7, r1
   c0422:	bf38      	it	cc
   c0424:	2204      	movcc	r2, #4
   c0426:	9201      	str	r2, [sp, #4]
   c0428:	9a02      	ldr	r2, [sp, #8]
   c042a:	9303      	str	r3, [sp, #12]
   c042c:	429a      	cmp	r2, r3
   c042e:	d80c      	bhi.n	c044a <__multiply+0x9e>
   c0430:	2e00      	cmp	r6, #0
   c0432:	dd03      	ble.n	c043c <__multiply+0x90>
   c0434:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c0438:	2b00      	cmp	r3, #0
   c043a:	d05a      	beq.n	c04f2 <__multiply+0x146>
   c043c:	6106      	str	r6, [r0, #16]
   c043e:	b005      	add	sp, #20
   c0440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c0444:	f843 2b04 	str.w	r2, [r3], #4
   c0448:	e7d8      	b.n	c03fc <__multiply+0x50>
   c044a:	f8b3 a000 	ldrh.w	sl, [r3]
   c044e:	f1ba 0f00 	cmp.w	sl, #0
   c0452:	d024      	beq.n	c049e <__multiply+0xf2>
   c0454:	f104 0e14 	add.w	lr, r4, #20
   c0458:	46a9      	mov	r9, r5
   c045a:	f04f 0c00 	mov.w	ip, #0
   c045e:	f85e 2b04 	ldr.w	r2, [lr], #4
   c0462:	f8d9 1000 	ldr.w	r1, [r9]
   c0466:	fa1f fb82 	uxth.w	fp, r2
   c046a:	b289      	uxth	r1, r1
   c046c:	fb0a 110b 	mla	r1, sl, fp, r1
   c0470:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c0474:	f8d9 2000 	ldr.w	r2, [r9]
   c0478:	4461      	add	r1, ip
   c047a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c047e:	fb0a c20b 	mla	r2, sl, fp, ip
   c0482:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c0486:	b289      	uxth	r1, r1
   c0488:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c048c:	4577      	cmp	r7, lr
   c048e:	f849 1b04 	str.w	r1, [r9], #4
   c0492:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c0496:	d8e2      	bhi.n	c045e <__multiply+0xb2>
   c0498:	9a01      	ldr	r2, [sp, #4]
   c049a:	f845 c002 	str.w	ip, [r5, r2]
   c049e:	9a03      	ldr	r2, [sp, #12]
   c04a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c04a4:	3304      	adds	r3, #4
   c04a6:	f1b9 0f00 	cmp.w	r9, #0
   c04aa:	d020      	beq.n	c04ee <__multiply+0x142>
   c04ac:	6829      	ldr	r1, [r5, #0]
   c04ae:	f104 0c14 	add.w	ip, r4, #20
   c04b2:	46ae      	mov	lr, r5
   c04b4:	f04f 0a00 	mov.w	sl, #0
   c04b8:	f8bc b000 	ldrh.w	fp, [ip]
   c04bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c04c0:	fb09 220b 	mla	r2, r9, fp, r2
   c04c4:	4492      	add	sl, r2
   c04c6:	b289      	uxth	r1, r1
   c04c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c04cc:	f84e 1b04 	str.w	r1, [lr], #4
   c04d0:	f85c 2b04 	ldr.w	r2, [ip], #4
   c04d4:	f8be 1000 	ldrh.w	r1, [lr]
   c04d8:	0c12      	lsrs	r2, r2, #16
   c04da:	fb09 1102 	mla	r1, r9, r2, r1
   c04de:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c04e2:	4567      	cmp	r7, ip
   c04e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c04e8:	d8e6      	bhi.n	c04b8 <__multiply+0x10c>
   c04ea:	9a01      	ldr	r2, [sp, #4]
   c04ec:	50a9      	str	r1, [r5, r2]
   c04ee:	3504      	adds	r5, #4
   c04f0:	e79a      	b.n	c0428 <__multiply+0x7c>
   c04f2:	3e01      	subs	r6, #1
   c04f4:	e79c      	b.n	c0430 <__multiply+0x84>
   c04f6:	bf00      	nop
   c04f8:	000c2309 	.word	0x000c2309
   c04fc:	000c2390 	.word	0x000c2390

000c0500 <__pow5mult>:
   c0500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c0504:	4615      	mov	r5, r2
   c0506:	f012 0203 	ands.w	r2, r2, #3
   c050a:	4606      	mov	r6, r0
   c050c:	460f      	mov	r7, r1
   c050e:	d007      	beq.n	c0520 <__pow5mult+0x20>
   c0510:	4c25      	ldr	r4, [pc, #148]	; (c05a8 <__pow5mult+0xa8>)
   c0512:	3a01      	subs	r2, #1
   c0514:	2300      	movs	r3, #0
   c0516:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c051a:	f7ff fe51 	bl	c01c0 <__multadd>
   c051e:	4607      	mov	r7, r0
   c0520:	10ad      	asrs	r5, r5, #2
   c0522:	d03d      	beq.n	c05a0 <__pow5mult+0xa0>
   c0524:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c0526:	b97c      	cbnz	r4, c0548 <__pow5mult+0x48>
   c0528:	2010      	movs	r0, #16
   c052a:	f7f9 fcf5 	bl	b9f18 <malloc>
   c052e:	4602      	mov	r2, r0
   c0530:	6270      	str	r0, [r6, #36]	; 0x24
   c0532:	b928      	cbnz	r0, c0540 <__pow5mult+0x40>
   c0534:	4b1d      	ldr	r3, [pc, #116]	; (c05ac <__pow5mult+0xac>)
   c0536:	481e      	ldr	r0, [pc, #120]	; (c05b0 <__pow5mult+0xb0>)
   c0538:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c053c:	f7f9 fd3c 	bl	b9fb8 <__assert_func>
   c0540:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c0544:	6004      	str	r4, [r0, #0]
   c0546:	60c4      	str	r4, [r0, #12]
   c0548:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c054c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c0550:	b94c      	cbnz	r4, c0566 <__pow5mult+0x66>
   c0552:	f240 2171 	movw	r1, #625	; 0x271
   c0556:	4630      	mov	r0, r6
   c0558:	f7ff ff12 	bl	c0380 <__i2b>
   c055c:	2300      	movs	r3, #0
   c055e:	f8c8 0008 	str.w	r0, [r8, #8]
   c0562:	4604      	mov	r4, r0
   c0564:	6003      	str	r3, [r0, #0]
   c0566:	f04f 0900 	mov.w	r9, #0
   c056a:	07eb      	lsls	r3, r5, #31
   c056c:	d50a      	bpl.n	c0584 <__pow5mult+0x84>
   c056e:	4639      	mov	r1, r7
   c0570:	4622      	mov	r2, r4
   c0572:	4630      	mov	r0, r6
   c0574:	f7ff ff1a 	bl	c03ac <__multiply>
   c0578:	4639      	mov	r1, r7
   c057a:	4680      	mov	r8, r0
   c057c:	4630      	mov	r0, r6
   c057e:	f7ff fdfd 	bl	c017c <_Bfree>
   c0582:	4647      	mov	r7, r8
   c0584:	106d      	asrs	r5, r5, #1
   c0586:	d00b      	beq.n	c05a0 <__pow5mult+0xa0>
   c0588:	6820      	ldr	r0, [r4, #0]
   c058a:	b938      	cbnz	r0, c059c <__pow5mult+0x9c>
   c058c:	4622      	mov	r2, r4
   c058e:	4621      	mov	r1, r4
   c0590:	4630      	mov	r0, r6
   c0592:	f7ff ff0b 	bl	c03ac <__multiply>
   c0596:	6020      	str	r0, [r4, #0]
   c0598:	f8c0 9000 	str.w	r9, [r0]
   c059c:	4604      	mov	r4, r0
   c059e:	e7e4      	b.n	c056a <__pow5mult+0x6a>
   c05a0:	4638      	mov	r0, r7
   c05a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c05a6:	bf00      	nop
   c05a8:	000c24e0 	.word	0x000c24e0
   c05ac:	000c2139 	.word	0x000c2139
   c05b0:	000c2390 	.word	0x000c2390

000c05b4 <__lshift>:
   c05b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c05b8:	460c      	mov	r4, r1
   c05ba:	6849      	ldr	r1, [r1, #4]
   c05bc:	6923      	ldr	r3, [r4, #16]
   c05be:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c05c2:	68a3      	ldr	r3, [r4, #8]
   c05c4:	4607      	mov	r7, r0
   c05c6:	4691      	mov	r9, r2
   c05c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c05cc:	f108 0601 	add.w	r6, r8, #1
   c05d0:	42b3      	cmp	r3, r6
   c05d2:	db0b      	blt.n	c05ec <__lshift+0x38>
   c05d4:	4638      	mov	r0, r7
   c05d6:	f7ff fd91 	bl	c00fc <_Balloc>
   c05da:	4605      	mov	r5, r0
   c05dc:	b948      	cbnz	r0, c05f2 <__lshift+0x3e>
   c05de:	4602      	mov	r2, r0
   c05e0:	4b2a      	ldr	r3, [pc, #168]	; (c068c <__lshift+0xd8>)
   c05e2:	482b      	ldr	r0, [pc, #172]	; (c0690 <__lshift+0xdc>)
   c05e4:	f240 11d9 	movw	r1, #473	; 0x1d9
   c05e8:	f7f9 fce6 	bl	b9fb8 <__assert_func>
   c05ec:	3101      	adds	r1, #1
   c05ee:	005b      	lsls	r3, r3, #1
   c05f0:	e7ee      	b.n	c05d0 <__lshift+0x1c>
   c05f2:	2300      	movs	r3, #0
   c05f4:	f100 0114 	add.w	r1, r0, #20
   c05f8:	f100 0210 	add.w	r2, r0, #16
   c05fc:	4618      	mov	r0, r3
   c05fe:	4553      	cmp	r3, sl
   c0600:	db37      	blt.n	c0672 <__lshift+0xbe>
   c0602:	6920      	ldr	r0, [r4, #16]
   c0604:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c0608:	f104 0314 	add.w	r3, r4, #20
   c060c:	f019 091f 	ands.w	r9, r9, #31
   c0610:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c0614:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c0618:	d02f      	beq.n	c067a <__lshift+0xc6>
   c061a:	f1c9 0e20 	rsb	lr, r9, #32
   c061e:	468a      	mov	sl, r1
   c0620:	f04f 0c00 	mov.w	ip, #0
   c0624:	681a      	ldr	r2, [r3, #0]
   c0626:	fa02 f209 	lsl.w	r2, r2, r9
   c062a:	ea42 020c 	orr.w	r2, r2, ip
   c062e:	f84a 2b04 	str.w	r2, [sl], #4
   c0632:	f853 2b04 	ldr.w	r2, [r3], #4
   c0636:	4298      	cmp	r0, r3
   c0638:	fa22 fc0e 	lsr.w	ip, r2, lr
   c063c:	d8f2      	bhi.n	c0624 <__lshift+0x70>
   c063e:	1b03      	subs	r3, r0, r4
   c0640:	3b15      	subs	r3, #21
   c0642:	f023 0303 	bic.w	r3, r3, #3
   c0646:	3304      	adds	r3, #4
   c0648:	f104 0215 	add.w	r2, r4, #21
   c064c:	4290      	cmp	r0, r2
   c064e:	bf38      	it	cc
   c0650:	2304      	movcc	r3, #4
   c0652:	f841 c003 	str.w	ip, [r1, r3]
   c0656:	f1bc 0f00 	cmp.w	ip, #0
   c065a:	d001      	beq.n	c0660 <__lshift+0xac>
   c065c:	f108 0602 	add.w	r6, r8, #2
   c0660:	3e01      	subs	r6, #1
   c0662:	4638      	mov	r0, r7
   c0664:	612e      	str	r6, [r5, #16]
   c0666:	4621      	mov	r1, r4
   c0668:	f7ff fd88 	bl	c017c <_Bfree>
   c066c:	4628      	mov	r0, r5
   c066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c0672:	f842 0f04 	str.w	r0, [r2, #4]!
   c0676:	3301      	adds	r3, #1
   c0678:	e7c1      	b.n	c05fe <__lshift+0x4a>
   c067a:	3904      	subs	r1, #4
   c067c:	f853 2b04 	ldr.w	r2, [r3], #4
   c0680:	f841 2f04 	str.w	r2, [r1, #4]!
   c0684:	4298      	cmp	r0, r3
   c0686:	d8f9      	bhi.n	c067c <__lshift+0xc8>
   c0688:	e7ea      	b.n	c0660 <__lshift+0xac>
   c068a:	bf00      	nop
   c068c:	000c2309 	.word	0x000c2309
   c0690:	000c2390 	.word	0x000c2390

000c0694 <__mcmp>:
   c0694:	b530      	push	{r4, r5, lr}
   c0696:	6902      	ldr	r2, [r0, #16]
   c0698:	690c      	ldr	r4, [r1, #16]
   c069a:	1b12      	subs	r2, r2, r4
   c069c:	d10e      	bne.n	c06bc <__mcmp+0x28>
   c069e:	f100 0314 	add.w	r3, r0, #20
   c06a2:	3114      	adds	r1, #20
   c06a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c06a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c06ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c06b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c06b4:	42a5      	cmp	r5, r4
   c06b6:	d003      	beq.n	c06c0 <__mcmp+0x2c>
   c06b8:	d305      	bcc.n	c06c6 <__mcmp+0x32>
   c06ba:	2201      	movs	r2, #1
   c06bc:	4610      	mov	r0, r2
   c06be:	bd30      	pop	{r4, r5, pc}
   c06c0:	4283      	cmp	r3, r0
   c06c2:	d3f3      	bcc.n	c06ac <__mcmp+0x18>
   c06c4:	e7fa      	b.n	c06bc <__mcmp+0x28>
   c06c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c06ca:	e7f7      	b.n	c06bc <__mcmp+0x28>

000c06cc <__mdiff>:
   c06cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c06d0:	460c      	mov	r4, r1
   c06d2:	4606      	mov	r6, r0
   c06d4:	4611      	mov	r1, r2
   c06d6:	4620      	mov	r0, r4
   c06d8:	4690      	mov	r8, r2
   c06da:	f7ff ffdb 	bl	c0694 <__mcmp>
   c06de:	1e05      	subs	r5, r0, #0
   c06e0:	d110      	bne.n	c0704 <__mdiff+0x38>
   c06e2:	4629      	mov	r1, r5
   c06e4:	4630      	mov	r0, r6
   c06e6:	f7ff fd09 	bl	c00fc <_Balloc>
   c06ea:	b930      	cbnz	r0, c06fa <__mdiff+0x2e>
   c06ec:	4b3a      	ldr	r3, [pc, #232]	; (c07d8 <__mdiff+0x10c>)
   c06ee:	4602      	mov	r2, r0
   c06f0:	f240 2132 	movw	r1, #562	; 0x232
   c06f4:	4839      	ldr	r0, [pc, #228]	; (c07dc <__mdiff+0x110>)
   c06f6:	f7f9 fc5f 	bl	b9fb8 <__assert_func>
   c06fa:	2301      	movs	r3, #1
   c06fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c0700:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c0704:	bfa4      	itt	ge
   c0706:	4643      	movge	r3, r8
   c0708:	46a0      	movge	r8, r4
   c070a:	4630      	mov	r0, r6
   c070c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c0710:	bfa6      	itte	ge
   c0712:	461c      	movge	r4, r3
   c0714:	2500      	movge	r5, #0
   c0716:	2501      	movlt	r5, #1
   c0718:	f7ff fcf0 	bl	c00fc <_Balloc>
   c071c:	b920      	cbnz	r0, c0728 <__mdiff+0x5c>
   c071e:	4b2e      	ldr	r3, [pc, #184]	; (c07d8 <__mdiff+0x10c>)
   c0720:	4602      	mov	r2, r0
   c0722:	f44f 7110 	mov.w	r1, #576	; 0x240
   c0726:	e7e5      	b.n	c06f4 <__mdiff+0x28>
   c0728:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c072c:	6926      	ldr	r6, [r4, #16]
   c072e:	60c5      	str	r5, [r0, #12]
   c0730:	f104 0914 	add.w	r9, r4, #20
   c0734:	f108 0514 	add.w	r5, r8, #20
   c0738:	f100 0e14 	add.w	lr, r0, #20
   c073c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c0740:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c0744:	f108 0210 	add.w	r2, r8, #16
   c0748:	46f2      	mov	sl, lr
   c074a:	2100      	movs	r1, #0
   c074c:	f859 3b04 	ldr.w	r3, [r9], #4
   c0750:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c0754:	fa1f f883 	uxth.w	r8, r3
   c0758:	fa11 f18b 	uxtah	r1, r1, fp
   c075c:	0c1b      	lsrs	r3, r3, #16
   c075e:	eba1 0808 	sub.w	r8, r1, r8
   c0762:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c0766:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c076a:	fa1f f888 	uxth.w	r8, r8
   c076e:	1419      	asrs	r1, r3, #16
   c0770:	454e      	cmp	r6, r9
   c0772:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c0776:	f84a 3b04 	str.w	r3, [sl], #4
   c077a:	d8e7      	bhi.n	c074c <__mdiff+0x80>
   c077c:	1b33      	subs	r3, r6, r4
   c077e:	3b15      	subs	r3, #21
   c0780:	f023 0303 	bic.w	r3, r3, #3
   c0784:	3304      	adds	r3, #4
   c0786:	3415      	adds	r4, #21
   c0788:	42a6      	cmp	r6, r4
   c078a:	bf38      	it	cc
   c078c:	2304      	movcc	r3, #4
   c078e:	441d      	add	r5, r3
   c0790:	4473      	add	r3, lr
   c0792:	469e      	mov	lr, r3
   c0794:	462e      	mov	r6, r5
   c0796:	4566      	cmp	r6, ip
   c0798:	d30e      	bcc.n	c07b8 <__mdiff+0xec>
   c079a:	f10c 0203 	add.w	r2, ip, #3
   c079e:	1b52      	subs	r2, r2, r5
   c07a0:	f022 0203 	bic.w	r2, r2, #3
   c07a4:	3d03      	subs	r5, #3
   c07a6:	45ac      	cmp	ip, r5
   c07a8:	bf38      	it	cc
   c07aa:	2200      	movcc	r2, #0
   c07ac:	441a      	add	r2, r3
   c07ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c07b2:	b17b      	cbz	r3, c07d4 <__mdiff+0x108>
   c07b4:	6107      	str	r7, [r0, #16]
   c07b6:	e7a3      	b.n	c0700 <__mdiff+0x34>
   c07b8:	f856 8b04 	ldr.w	r8, [r6], #4
   c07bc:	fa11 f288 	uxtah	r2, r1, r8
   c07c0:	1414      	asrs	r4, r2, #16
   c07c2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c07c6:	b292      	uxth	r2, r2
   c07c8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c07cc:	f84e 2b04 	str.w	r2, [lr], #4
   c07d0:	1421      	asrs	r1, r4, #16
   c07d2:	e7e0      	b.n	c0796 <__mdiff+0xca>
   c07d4:	3f01      	subs	r7, #1
   c07d6:	e7ea      	b.n	c07ae <__mdiff+0xe2>
   c07d8:	000c2309 	.word	0x000c2309
   c07dc:	000c2390 	.word	0x000c2390

000c07e0 <__ulp>:
   c07e0:	b082      	sub	sp, #8
   c07e2:	ed8d 0b00 	vstr	d0, [sp]
   c07e6:	9b01      	ldr	r3, [sp, #4]
   c07e8:	4912      	ldr	r1, [pc, #72]	; (c0834 <__ulp+0x54>)
   c07ea:	4019      	ands	r1, r3
   c07ec:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c07f0:	2900      	cmp	r1, #0
   c07f2:	dd05      	ble.n	c0800 <__ulp+0x20>
   c07f4:	2200      	movs	r2, #0
   c07f6:	460b      	mov	r3, r1
   c07f8:	ec43 2b10 	vmov	d0, r2, r3
   c07fc:	b002      	add	sp, #8
   c07fe:	4770      	bx	lr
   c0800:	4249      	negs	r1, r1
   c0802:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c0806:	ea4f 5021 	mov.w	r0, r1, asr #20
   c080a:	f04f 0200 	mov.w	r2, #0
   c080e:	f04f 0300 	mov.w	r3, #0
   c0812:	da04      	bge.n	c081e <__ulp+0x3e>
   c0814:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c0818:	fa41 f300 	asr.w	r3, r1, r0
   c081c:	e7ec      	b.n	c07f8 <__ulp+0x18>
   c081e:	f1a0 0114 	sub.w	r1, r0, #20
   c0822:	291e      	cmp	r1, #30
   c0824:	bfda      	itte	le
   c0826:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c082a:	fa20 f101 	lsrle.w	r1, r0, r1
   c082e:	2101      	movgt	r1, #1
   c0830:	460a      	mov	r2, r1
   c0832:	e7e1      	b.n	c07f8 <__ulp+0x18>
   c0834:	7ff00000 	.word	0x7ff00000

000c0838 <__b2d>:
   c0838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c083a:	6905      	ldr	r5, [r0, #16]
   c083c:	f100 0714 	add.w	r7, r0, #20
   c0840:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c0844:	1f2e      	subs	r6, r5, #4
   c0846:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c084a:	4620      	mov	r0, r4
   c084c:	f7ff fd48 	bl	c02e0 <__hi0bits>
   c0850:	f1c0 0320 	rsb	r3, r0, #32
   c0854:	280a      	cmp	r0, #10
   c0856:	f8df c07c 	ldr.w	ip, [pc, #124]	; c08d4 <__b2d+0x9c>
   c085a:	600b      	str	r3, [r1, #0]
   c085c:	dc14      	bgt.n	c0888 <__b2d+0x50>
   c085e:	f1c0 0e0b 	rsb	lr, r0, #11
   c0862:	fa24 f10e 	lsr.w	r1, r4, lr
   c0866:	42b7      	cmp	r7, r6
   c0868:	ea41 030c 	orr.w	r3, r1, ip
   c086c:	bf34      	ite	cc
   c086e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c0872:	2100      	movcs	r1, #0
   c0874:	3015      	adds	r0, #21
   c0876:	fa04 f000 	lsl.w	r0, r4, r0
   c087a:	fa21 f10e 	lsr.w	r1, r1, lr
   c087e:	ea40 0201 	orr.w	r2, r0, r1
   c0882:	ec43 2b10 	vmov	d0, r2, r3
   c0886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c0888:	42b7      	cmp	r7, r6
   c088a:	bf3a      	itte	cc
   c088c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c0890:	f1a5 0608 	subcc.w	r6, r5, #8
   c0894:	2100      	movcs	r1, #0
   c0896:	380b      	subs	r0, #11
   c0898:	d017      	beq.n	c08ca <__b2d+0x92>
   c089a:	f1c0 0c20 	rsb	ip, r0, #32
   c089e:	fa04 f500 	lsl.w	r5, r4, r0
   c08a2:	42be      	cmp	r6, r7
   c08a4:	fa21 f40c 	lsr.w	r4, r1, ip
   c08a8:	ea45 0504 	orr.w	r5, r5, r4
   c08ac:	bf8c      	ite	hi
   c08ae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c08b2:	2400      	movls	r4, #0
   c08b4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c08b8:	fa01 f000 	lsl.w	r0, r1, r0
   c08bc:	fa24 f40c 	lsr.w	r4, r4, ip
   c08c0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c08c4:	ea40 0204 	orr.w	r2, r0, r4
   c08c8:	e7db      	b.n	c0882 <__b2d+0x4a>
   c08ca:	ea44 030c 	orr.w	r3, r4, ip
   c08ce:	460a      	mov	r2, r1
   c08d0:	e7d7      	b.n	c0882 <__b2d+0x4a>
   c08d2:	bf00      	nop
   c08d4:	3ff00000 	.word	0x3ff00000

000c08d8 <__d2b>:
   c08d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c08dc:	4689      	mov	r9, r1
   c08de:	2101      	movs	r1, #1
   c08e0:	ec57 6b10 	vmov	r6, r7, d0
   c08e4:	4690      	mov	r8, r2
   c08e6:	f7ff fc09 	bl	c00fc <_Balloc>
   c08ea:	4604      	mov	r4, r0
   c08ec:	b930      	cbnz	r0, c08fc <__d2b+0x24>
   c08ee:	4602      	mov	r2, r0
   c08f0:	4b25      	ldr	r3, [pc, #148]	; (c0988 <__d2b+0xb0>)
   c08f2:	4826      	ldr	r0, [pc, #152]	; (c098c <__d2b+0xb4>)
   c08f4:	f240 310a 	movw	r1, #778	; 0x30a
   c08f8:	f7f9 fb5e 	bl	b9fb8 <__assert_func>
   c08fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c0900:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c0904:	bb35      	cbnz	r5, c0954 <__d2b+0x7c>
   c0906:	2e00      	cmp	r6, #0
   c0908:	9301      	str	r3, [sp, #4]
   c090a:	d028      	beq.n	c095e <__d2b+0x86>
   c090c:	4668      	mov	r0, sp
   c090e:	9600      	str	r6, [sp, #0]
   c0910:	f7ff fd06 	bl	c0320 <__lo0bits>
   c0914:	9900      	ldr	r1, [sp, #0]
   c0916:	b300      	cbz	r0, c095a <__d2b+0x82>
   c0918:	9a01      	ldr	r2, [sp, #4]
   c091a:	f1c0 0320 	rsb	r3, r0, #32
   c091e:	fa02 f303 	lsl.w	r3, r2, r3
   c0922:	430b      	orrs	r3, r1
   c0924:	40c2      	lsrs	r2, r0
   c0926:	6163      	str	r3, [r4, #20]
   c0928:	9201      	str	r2, [sp, #4]
   c092a:	9b01      	ldr	r3, [sp, #4]
   c092c:	61a3      	str	r3, [r4, #24]
   c092e:	2b00      	cmp	r3, #0
   c0930:	bf14      	ite	ne
   c0932:	2202      	movne	r2, #2
   c0934:	2201      	moveq	r2, #1
   c0936:	6122      	str	r2, [r4, #16]
   c0938:	b1d5      	cbz	r5, c0970 <__d2b+0x98>
   c093a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c093e:	4405      	add	r5, r0
   c0940:	f8c9 5000 	str.w	r5, [r9]
   c0944:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c0948:	f8c8 0000 	str.w	r0, [r8]
   c094c:	4620      	mov	r0, r4
   c094e:	b003      	add	sp, #12
   c0950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c0954:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c0958:	e7d5      	b.n	c0906 <__d2b+0x2e>
   c095a:	6161      	str	r1, [r4, #20]
   c095c:	e7e5      	b.n	c092a <__d2b+0x52>
   c095e:	a801      	add	r0, sp, #4
   c0960:	f7ff fcde 	bl	c0320 <__lo0bits>
   c0964:	9b01      	ldr	r3, [sp, #4]
   c0966:	6163      	str	r3, [r4, #20]
   c0968:	2201      	movs	r2, #1
   c096a:	6122      	str	r2, [r4, #16]
   c096c:	3020      	adds	r0, #32
   c096e:	e7e3      	b.n	c0938 <__d2b+0x60>
   c0970:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c0974:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c0978:	f8c9 0000 	str.w	r0, [r9]
   c097c:	6918      	ldr	r0, [r3, #16]
   c097e:	f7ff fcaf 	bl	c02e0 <__hi0bits>
   c0982:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c0986:	e7df      	b.n	c0948 <__d2b+0x70>
   c0988:	000c2309 	.word	0x000c2309
   c098c:	000c2390 	.word	0x000c2390

000c0990 <__ratio>:
   c0990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0994:	4688      	mov	r8, r1
   c0996:	4669      	mov	r1, sp
   c0998:	4681      	mov	r9, r0
   c099a:	f7ff ff4d 	bl	c0838 <__b2d>
   c099e:	a901      	add	r1, sp, #4
   c09a0:	4640      	mov	r0, r8
   c09a2:	ec55 4b10 	vmov	r4, r5, d0
   c09a6:	f7ff ff47 	bl	c0838 <__b2d>
   c09aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c09ae:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c09b2:	eba3 0c02 	sub.w	ip, r3, r2
   c09b6:	e9dd 3200 	ldrd	r3, r2, [sp]
   c09ba:	1a9b      	subs	r3, r3, r2
   c09bc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c09c0:	ec51 0b10 	vmov	r0, r1, d0
   c09c4:	2b00      	cmp	r3, #0
   c09c6:	bfd6      	itet	le
   c09c8:	460a      	movle	r2, r1
   c09ca:	462a      	movgt	r2, r5
   c09cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c09d0:	468b      	mov	fp, r1
   c09d2:	462f      	mov	r7, r5
   c09d4:	bfd4      	ite	le
   c09d6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c09da:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c09de:	4620      	mov	r0, r4
   c09e0:	ee10 2a10 	vmov	r2, s0
   c09e4:	465b      	mov	r3, fp
   c09e6:	4639      	mov	r1, r7
   c09e8:	f7fd fdb4 	bl	be554 <__aeabi_ddiv>
   c09ec:	ec41 0b10 	vmov	d0, r0, r1
   c09f0:	b003      	add	sp, #12
   c09f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c09f6 <__copybits>:
   c09f6:	3901      	subs	r1, #1
   c09f8:	b570      	push	{r4, r5, r6, lr}
   c09fa:	1149      	asrs	r1, r1, #5
   c09fc:	6914      	ldr	r4, [r2, #16]
   c09fe:	3101      	adds	r1, #1
   c0a00:	f102 0314 	add.w	r3, r2, #20
   c0a04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c0a08:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c0a0c:	1f05      	subs	r5, r0, #4
   c0a0e:	42a3      	cmp	r3, r4
   c0a10:	d30c      	bcc.n	c0a2c <__copybits+0x36>
   c0a12:	1aa3      	subs	r3, r4, r2
   c0a14:	3b11      	subs	r3, #17
   c0a16:	f023 0303 	bic.w	r3, r3, #3
   c0a1a:	3211      	adds	r2, #17
   c0a1c:	42a2      	cmp	r2, r4
   c0a1e:	bf88      	it	hi
   c0a20:	2300      	movhi	r3, #0
   c0a22:	4418      	add	r0, r3
   c0a24:	2300      	movs	r3, #0
   c0a26:	4288      	cmp	r0, r1
   c0a28:	d305      	bcc.n	c0a36 <__copybits+0x40>
   c0a2a:	bd70      	pop	{r4, r5, r6, pc}
   c0a2c:	f853 6b04 	ldr.w	r6, [r3], #4
   c0a30:	f845 6f04 	str.w	r6, [r5, #4]!
   c0a34:	e7eb      	b.n	c0a0e <__copybits+0x18>
   c0a36:	f840 3b04 	str.w	r3, [r0], #4
   c0a3a:	e7f4      	b.n	c0a26 <__copybits+0x30>

000c0a3c <__any_on>:
   c0a3c:	f100 0214 	add.w	r2, r0, #20
   c0a40:	6900      	ldr	r0, [r0, #16]
   c0a42:	114b      	asrs	r3, r1, #5
   c0a44:	4298      	cmp	r0, r3
   c0a46:	b510      	push	{r4, lr}
   c0a48:	db11      	blt.n	c0a6e <__any_on+0x32>
   c0a4a:	dd0a      	ble.n	c0a62 <__any_on+0x26>
   c0a4c:	f011 011f 	ands.w	r1, r1, #31
   c0a50:	d007      	beq.n	c0a62 <__any_on+0x26>
   c0a52:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c0a56:	fa24 f001 	lsr.w	r0, r4, r1
   c0a5a:	fa00 f101 	lsl.w	r1, r0, r1
   c0a5e:	428c      	cmp	r4, r1
   c0a60:	d10b      	bne.n	c0a7a <__any_on+0x3e>
   c0a62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c0a66:	4293      	cmp	r3, r2
   c0a68:	d803      	bhi.n	c0a72 <__any_on+0x36>
   c0a6a:	2000      	movs	r0, #0
   c0a6c:	bd10      	pop	{r4, pc}
   c0a6e:	4603      	mov	r3, r0
   c0a70:	e7f7      	b.n	c0a62 <__any_on+0x26>
   c0a72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c0a76:	2900      	cmp	r1, #0
   c0a78:	d0f5      	beq.n	c0a66 <__any_on+0x2a>
   c0a7a:	2001      	movs	r0, #1
   c0a7c:	e7f6      	b.n	c0a6c <__any_on+0x30>

000c0a7e <_calloc_r>:
   c0a7e:	b513      	push	{r0, r1, r4, lr}
   c0a80:	434a      	muls	r2, r1
   c0a82:	4611      	mov	r1, r2
   c0a84:	9201      	str	r2, [sp, #4]
   c0a86:	f7f9 fa87 	bl	b9f98 <_malloc_r>
   c0a8a:	4604      	mov	r4, r0
   c0a8c:	b118      	cbz	r0, c0a96 <_calloc_r+0x18>
   c0a8e:	9a01      	ldr	r2, [sp, #4]
   c0a90:	2100      	movs	r1, #0
   c0a92:	f7fd ffa2 	bl	be9da <memset>
   c0a96:	4620      	mov	r0, r4
   c0a98:	b002      	add	sp, #8
   c0a9a:	bd10      	pop	{r4, pc}
   c0a9c:	0000      	movs	r0, r0
	...

000c0aa0 <nan>:
   c0aa0:	ed9f 0b01 	vldr	d0, [pc, #4]	; c0aa8 <nan+0x8>
   c0aa4:	4770      	bx	lr
   c0aa6:	bf00      	nop
   c0aa8:	00000000 	.word	0x00000000
   c0aac:	7ff80000 	.word	0x7ff80000

000c0ab0 <__ascii_wctomb>:
   c0ab0:	b149      	cbz	r1, c0ac6 <__ascii_wctomb+0x16>
   c0ab2:	2aff      	cmp	r2, #255	; 0xff
   c0ab4:	bf85      	ittet	hi
   c0ab6:	238a      	movhi	r3, #138	; 0x8a
   c0ab8:	6003      	strhi	r3, [r0, #0]
   c0aba:	700a      	strbls	r2, [r1, #0]
   c0abc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c0ac0:	bf98      	it	ls
   c0ac2:	2001      	movls	r0, #1
   c0ac4:	4770      	bx	lr
   c0ac6:	4608      	mov	r0, r1
   c0ac8:	4770      	bx	lr
	...

000c0acc <__aeabi_d2lz>:
   c0acc:	b538      	push	{r3, r4, r5, lr}
   c0ace:	2200      	movs	r2, #0
   c0ad0:	2300      	movs	r3, #0
   c0ad2:	4604      	mov	r4, r0
   c0ad4:	460d      	mov	r5, r1
   c0ad6:	f7fd fe85 	bl	be7e4 <__aeabi_dcmplt>
   c0ada:	b928      	cbnz	r0, c0ae8 <__aeabi_d2lz+0x1c>
   c0adc:	4620      	mov	r0, r4
   c0ade:	4629      	mov	r1, r5
   c0ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c0ae4:	f7fd bf16 	b.w	be914 <__aeabi_d2ulz>
   c0ae8:	4620      	mov	r0, r4
   c0aea:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c0aee:	f7fd ff11 	bl	be914 <__aeabi_d2ulz>
   c0af2:	4240      	negs	r0, r0
   c0af4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c0af8:	bd38      	pop	{r3, r4, r5, pc}
   c0afa:	bf00      	nop

000c0afc <dynalib_user>:
   c0afc:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c0b0c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c0b1c:	7620 7269 7574 6c61 4a00 796f 7473 6369      virtual.Joystic
   c0b2c:	206b 7274 6769 6567 0072 6e45 6574 2072     k trigger.Enter 
   c0b3c:	7274 6769 6567 0072 6564 6166 6c75 2074     trigger.default 
   c0b4c:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   c0b5c:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   c0b6c:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   c0b7c:	2520 2073 4f4d 4544 7525 003e 6952 6867      %s MODE%u>.Righ
   c0b8c:	2074 7274 6769 6567 0072 6f4d 6964 6966     t trigger.Modifi
   c0b9c:	6465 6120 206e 6e4f 4f2f 6666 4320 6e6f     ed an On/Off Con
   c0bac:	7274 6c6f 4200 746f 203a 6425 202c 6f4d     trol.Bot: %d, Mo
   c0bbc:	6964 6966 6465 0020 6966 656c 616e 656d     dified .filename
   c0bcc:	4600 6c69 2065 2527 2773 6120 726c 6165     .File '%s' alrea
   c0bdc:	7964 6520 6978 7473 2c73 6420 6c65 7465     dy exists, delet
   c0bec:	6e69 2067 6e61 2064 766f 7265 7277 7469     ing and overwrit
   c0bfc:	6e69 0067 7453 7261 6974 676e 6f20 6666     ing.Starting off
   c0c0c:	6f6c 6461 6f20 2066 6966 656c 203a 7325     load of file: %s
   c0c1c:	6600 6c69 6365 6d6f 0070 6552 6361 6568     .filecomp.Reache
   c0c2c:	2064 6e65 2064 666f 6620 6c69 3a65 2520     d end of file: %
   c0c3c:	0073 6966 656c 6f64 656e 5200 6365 6965     s.filedone.Recei
   c0c4c:	6576 2064 6f64 656e 6320 6d6f 616d 646e     ved done command
   c0c5c:	5200 6365 6965 6576 2064 6950 6320 6d6f     .Received Pi com
   c0c6c:	616d 646e 5300 7274 6e69 2067 654c 3a6e     mand.String Len:
   c0c7c:	2520 2c64 4320 6568 6b63 7573 3a6d 2520      %d, Checksum: %
   c0c8c:	0064 575b 5241 5d4e 5220 6950 4d20 7365     d.[WARN] RPi Mes
   c0c9c:	6173 6567 4320 6568 6b63 7573 206d 6f44     sage Checksum Do
   c0cac:	7365 4e20 746f 4d20 7461 6863 3a21 2520     es Not Match!: %
   c0cbc:	0073 6157 6e72 6e69 2c67 6320 6568 6b63     s.Warning, check
   c0ccc:	7573 206d 6f64 7365 6e20 746f 6d20 7461     sum does not mat
   c0cdc:	6863 4300 2543 7332 616e 256b 7333 6300     ch.CC%2snak%3s.c
   c0cec:	6c74 2500 2073 7325 2520 2073 6425 2520     tl.%s %s %s %d %
   c0cfc:	2064 6425 2520 0064 6f47 2074 2061 6f63     d %d %d.Got a co
   c0d0c:	6d6d 6e61 2064 6170 6b63 7465 6620 6f72     mmand packet fro
   c0d1c:	206d 6950 6620 726f 4220 746f 2520 0064     m Pi for Bot %d.
   c0d2c:	495b 464e 5d4f 5220 6365 6965 6576 2064     [INFO] Received 
   c0d3c:	6152 7073 6562 7272 2079 6950 4d20 7365     Raspberry Pi Mes
   c0d4c:	6173 6567 203a 7325 2500 2573 3230 0078     sage: %s.%s%02x.
   c0d5c:	6f42 3174 6164 0074 6548 6c6c 206f 6f57     Bot1dat.Hello Wo
   c0d6c:	6c72 2164 2121 2121 2121 4300 4243 6425     rld!!!!!!!.CCB%d
   c0d7c:	746d 2572 3330 2564 3330 0064 4343 2542     mtr%03d%03d.CCB%
   c0d8c:	6864 6177 7600 6365 6f74 3a72 5f3a 5f4d     dhwa.vector::_M_
   c0d9c:	6172 676e 5f65 6863 6365 3a6b 5f20 6e5f     range_check: __n
   c0dac:	2820 6877 6369 2068 7369 2520 757a 2029      (which is %zu) 
   c0dbc:	3d3e 7420 6968 2d73 733e 7a69 2865 2029     >= this->size() 
   c0dcc:	7728 6968 6863 6920 2073 7a25 2975 5500     (which is %zu).U
   c0ddc:	2070 7274 6769 6567 0072 6f44 6e77 7420     p trigger.Down t
   c0dec:	6972 6767 7265 4300 4243 6425 7463 256c     rigger.CCB%dctl%
   c0dfc:	2e30 6636 2520 2e30 6636 2520 2064 6425     0.6f %0.6f %d %d
   c0e0c:	2520 0064 6f43 746e 6f72 206c 6150 6b63      %d.Control Pack
   c0e1c:	7465 203a 7325 7600 6365 6f74 3a72 5f3a     et: %s.vector::_
   c0e2c:	5f4d 6572 6c61 6f6c 5f63 6e69 6573 7472     M_realloc_insert
   c0e3c:	4300 6568 6b63 7573 3a6d 2520 3230 2c78     .Checksum: %02x,
   c0e4c:	2520 3330 0064 575b 5241 5d4e 5720 7261      %03d.[WARN] War
   c0e5c:	696e 676e 202c 6863 6365 736b 6d75 6420     ning, checksum d
   c0e6c:	656f 2073 6f6e 2074 616d 6374 2168 6100     oes not match!.a
   c0e7c:	6b63 7300 7075 2500 2075 7525 2520 2073     ck.sup.%u %u %s 
   c0e8c:	7325 5300 6174 7574 2073 7055 6164 6574     %s.Status Update
   c0e9c:	0021 6e73 0073 7325 2520 2073 6425 2520     !.sns.%s %s %d %
   c0eac:	2064 6425 2520 2064 6425 4200 746f 2320     d %d %d %d.Bot #
   c0ebc:	203a 6425 5420 6d65 3a70 2520 0066 616e     : %d Temp: %f.na
   c0ecc:	006b 7768 0064 6f46 6e75 2064 2061 656e     k.hwd.Found a ne
   c0edc:	2077 6177 6574 2072 6f62 2074 4449 7000     w water bot ID.p
   c0eec:	7374 5b00 5550 5354 205d 6552 6563 7669     ts.[PUTS] Receiv
   c0efc:	6465 5320 7274 6e69 2067 6f43 6d6d 6e61     ed String Comman
   c0f0c:	3a64 2520 0073 495b 464e 5d4f 5220 6365     d: %s.[INFO] Rec
   c0f1c:	6965 6576 2064 544c 2045 654d 7373 6761     eived LTE Messag
   c0f2c:	3a65 2520 0073 654e 2077 5442 4320 6d6f     e: %s.New BT Com
   c0f3c:	616d 646e 203a 5b00 4e49 4f46 205d 6552     mand: .[INFO] Re
   c0f4c:	6563 7669 6465 4220 454c 4d20 7365 6173     ceived BLE Messa
   c0f5c:	6567 203a 7325 4e00 7765 5820 6542 2065     ge: %s.New XBee 
   c0f6c:	6f43 6d6d 6e61 3a64 5b00 4e49 4f46 205d     Command:.[INFO] 
   c0f7c:	6552 6563 7669 6465 5820 6542 2065 654d     Received XBee Me
   c0f8c:	7373 6761 3a65 2520 0073 6f46 6e75 2064     ssage: %s.Found 
   c0f9c:	6f42 2074 3a23 2520 2064 6425 2520 2064     Bot #: %d %d %d 
   c0fac:	6425 2520 2064 6425 2520 2064 6425 202c     %d %d %d %d %d, 
   c0fbc:	6573 7672 6369 7365 203a 6425 4600 756f     services: %d.Fou
   c0fcc:	646e 6e20 7765 6220 746f 203a 6425 4300     nd new bot: %d.C
   c0fdc:	6e6f 656e 7463 6465 7420 206f 6f42 2074     onnected to Bot 
   c0fec:	6425 2f00 4500 7272 726f 202c 6f63 6c75     %d./.Error, coul
   c0ffc:	2064 6f6e 2074 706f 6e65 7220 6f6f 2074     d not open root 
   c100c:	6964 6572 7463 726f 2079 6e6f 5320 2044     directory on SD 
   c101c:	6143 6472 202e 7349 6920 2074 6e69 6573     Card. Is it inse
   c102c:	7472 6465 003f 4343 2542 6464 706d 5200     rted?.CCB%ddmp.R
   c103c:	7165 6575 7473 6465 5320 2044 6143 6472     equested SD Card
   c104c:	4420 7461 2061 7266 6d6f 4220 746f 2520      Data from Bot %
   c105c:	2064 764f 7265 4220 454c 000a 7543 7272     d Over BLE..Curr
   c106c:	6e65 6c74 2079 6f63 6e6e 6365 6574 2064     ently connected 
   c107c:	6f74 4220 746f 2520 2c66 6e20 6565 2064     to Bot %f, need 
   c108c:	6f74 6320 6e6f 656e 7463 7420 206f 6f42     to connect to Bo
   c109c:	2074 6425 5300 6375 6563 7373 7566 6c6c     t %d.Successfull
   c10ac:	2079 6f63 6e6e 6365 6574 2064 6f74 4220     y connected to B
   c10bc:	746f 2520 0064 7453 7261 6974 676e 6620     ot %d.Starting f
   c10cc:	6c69 2065 7274 6e61 6673 7265 6620 6f72     ile transfer fro
   c10dc:	206d 6f42 2074 6425 4600 6e69 7369 6568     m Bot %d.Finishe
   c10ec:	2064 7274 6e61 6673 7265 6972 676e 6620     d transferring f
   c10fc:	6c69 2065 7266 6d6f 4220 746f 2520 0064     ile from Bot %d.
   c110c:	6552 6f63 6472 4200 7461 6574 7972 4f00     Record.Battery.O
   c111c:	6666 6f6c 6461 5300 6e65 7274 0079 6552     ffload.Sentry.Re
   c112c:	006d 6553 006e 7541 0074 6953 6e67 6c61     m.Sen.Aut.Signal
   c113c:	6200 3234 3630 3139 2d30 6364 6234 352d     .b4206910-dc4b-5
   c114c:	3437 2d33 3863 3162 392d 6432 6530 3537     743-c8b1-92d0e75
   c115c:	3831 6232 0030 3462 3032 3936 3231 642d     182b0.b4206912-d
   c116c:	3463 2d62 3735 3334 632d 6238 2d31 3239     c4b-5743-c8b1-92
   c117c:	3064 3765 3135 3238 3062 6200 3234 3630     d0e75182b0.b4206
   c118c:	3139 2d33 6364 6234 352d 3437 2d33 3863     913-dc4b-5743-c8
   c119c:	3162 392d 6432 6530 3537 3831 6232 0030     b1-92d0e75182b0.
   c11ac:	3462 3032 3936 3431 642d 3463 2d62 3735     b4206914-dc4b-57
   c11bc:	3334 632d 6238 2d31 3239 3064 3765 3135     43-c8b1-92d0e751
   c11cc:	3238 3062 4f00 006e 664f 0066 7250 6e69     82b0.On.Off.Prin
   c11dc:	6574 2064 6948 6867 696c 6867 6574 2064     ted Highlighted 
   c11ec:	654d 756e 6920 6574 206d 6977 6874 6e20     Menu item with n
   c11fc:	6d61 3a65 2520 0073 3025 6432 3025 6432     ame: %s.%02d%02d
   c120c:	3025 6434 3025 6432 3025 6432 3025 6432     %04d%02d%02d%02d
   c121c:	5700 7461 7265 6f42 0074 4c5f 474f 742e     .WaterBot._LOG.t
   c122c:	7478 4500 7272 726f 203a 6f63 6c75 2064     xt.Error: could 
   c123c:	6f6e 2074 6f63 6e6e 6365 2074 6f74 5320     not connect to S
   c124c:	2044 6163 6472 0021 5320 6174 7472 6e69     D card!. Startin
   c125c:	2067 4f00 004b 654d 756e 6920 6574 206d     g .OK.Menu item 
   c126c:	0030 654d 756e 6920 6574 206d 6425 4300     0.Menu item %d.C
   c127c:	4143 7342 6370 2542 6431 4300 4143 7342     CABspcB%1d.CCABs
   c128c:	6370 424e 5400 6d65 3a70 2520 2e30 6636     pcNB.Temp: %0.6f
   c129c:	0000 0000                                   ....

000c12a0 <_ZTVN8particle11SPISettingsE>:
	...
   c12a8:	4301 000b 40cd 000b 410f 000b               .C...@...A..

000c12b4 <_ZTV5Timer>:
	...
   c12bc:	458d 000b 45e1 000b 4175 000b               .E...E..uA..

000c12c8 <_ZTV4File>:
	...
   c12d0:	410d 000b 411d 000b 415d 000b 4157 000b     .A...A..]A..WA..
   c12e0:	40cf 000b 4137 000b 4131 000b 412b 000b     .@..7A..1A..+A..
   c12f0:	6157 6e72 6e69 0067 4200 746f 2520 0064     Warning..Bot %d.
   c1300:	4c00 776f 4220 7461 6574 7972 203a 6425     .Low Battery: %d
   c1310:	0000 6548 6c6c 216f 0000 6353 6e61 696e     ..Hello!..Scanni
   c1320:	676e 6620 726f 4220 746f 0073 4f00 204b     ng for Bots..OK 
   c1330:	6877 6e65 6220 746f 2073 6572 6461 0079     when bots ready.
	...

000c1341 <_ZL4font>:
   c1341:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   c1351:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   c1361:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   c1371:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   c1381:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   c1391:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   c13a1:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   c13b1:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   c13c1:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   c13d1:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   c13e1:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   c13f1:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   c1401:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   c1411:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   c1421:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   c1431:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   c1441:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   c1451:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   c1461:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   c1471:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   c1481:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   c1491:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   c14a1:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   c14b1:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   c14c1:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   c14d1:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   c14e1:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   c14f1:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   c1501:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   c1511:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   c1521:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   c1531:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   c1541:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   c1551:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   c1561:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   c1571:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   c1581:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   c1591:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   c15a1:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   c15b1:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   c15c1:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   c15d1:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   c15e1:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   c15f1:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   c1601:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   c1611:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   c1621:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   c1631:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   c1641:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   c1651:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   c1661:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   c1671:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   c1681:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   c1691:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   c16a1:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   c16b1:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   c16c1:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   c16d1:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   c16e1:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   c16f1:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   c1701:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   c1711:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   c1721:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   c1731:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   c1741:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   c1751:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   c1761:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   c1771:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   c1781:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   c1791:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   c17a1:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   c17b1:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   c17c1:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   c17d1:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   c17e1:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   c17f1:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   c1801:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   c1811:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   c1821:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   c1831:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
   c1841:	0000                                         ...

000c1844 <_ZTV12Adafruit_GFX>:
	...
   c1854:	8d91 000b d039 000b 40a5 000b 8797 000b     ....9....@......
   c1864:	8799 000b 87cb 000b 87a7 000b 87b9 000b     ................
   c1874:	86d9 000b 8797 000b 89c3 000b 89c1 000b     ................
   c1884:	87e3 000b 8821 000b 885b 000b 88a1 000b     ....!...[.......
   c1894:	88bd 000b 8941 000b                         ....A...

000c189c <_ZTV17Adafruit_GrayOLED>:
	...
   c18ac:	8d91 000b d039 000b 91bb 000b 8797 000b     ....9...........
   c18bc:	8799 000b 87cb 000b 87a7 000b 87b9 000b     ................
   c18cc:	86d9 000b 8797 000b 89c3 000b 93b7 000b     ................
   c18dc:	87e3 000b 8821 000b 885b 000b 88a1 000b     ....!...[.......
   c18ec:	88bd 000b 8941 000b 40a5 000b               ....A....@..

000c18f8 <_ZL12splash2_data>:
   c18f8:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   c1908:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   c1918:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   c1934:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   c1944:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   c1954:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   c1964:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   c1974:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   c1984:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   c1994:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   c19a4:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   c19b4:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   c19c4:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   c19d4:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   c19e4:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   c19f4:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   c1a04:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   c1a14:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   c1a24:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   c1a34:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   c1a44:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   c1a54:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   c1a64:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   c1a74:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   c1a8c:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   c1a9c:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   c1aac:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   c1abc:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   c1acc:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000c1ad8 <_ZTV15Adafruit_SH1107>:
	...
   c1ae0:	9529 000b 953d 000b 8d91 000b d039 000b     )...=.......9...
   c1af0:	91bb 000b 8797 000b 8799 000b 87cb 000b     ................
   c1b00:	87a7 000b 87b9 000b 86d9 000b 8797 000b     ................
   c1b10:	89c3 000b 93b7 000b 87e3 000b 8821 000b     ............!...
   c1b20:	885b 000b 88a1 000b 88bd 000b 8941 000b     [...........A...
   c1b30:	965d 000b                                   ]...

000c1b34 <_ZZN15Adafruit_SH11075beginEhbE12init_128x128>:
   c1b34:	00d3 7fa8                                   ....

000c1b38 <_ZZN15Adafruit_SH11075beginEhbE4init>:
   c1b38:	d5ae 2051 4f81 8aad c0a0 00dc 60d3 22d9     ..Q .O.......`."
   c1b48:	35db 3fa8 a6a4 0000                         .5.?....

000c1b50 <_ZTV15Adafruit_SH110X>:
	...
   c1b58:	40a5 000b 40a5 000b 8d91 000b d039 000b     .@...@......9...
   c1b68:	91bb 000b 8797 000b 8799 000b 87cb 000b     ................
   c1b78:	87a7 000b 87b9 000b 86d9 000b 8797 000b     ................
   c1b88:	89c3 000b 93b7 000b 87e3 000b 8821 000b     ............!...
   c1b98:	885b 000b 88a1 000b 88bd 000b 8941 000b     [...........A...
   c1ba8:	965d 000b 7341 6573 7472 6f69 466e 6961     ]...AssertionFai
   c1bb8:	756c 6572 6620 6c61 6573 7700 7269 6e69     lure false.wirin
   c1bc8:	2e67 6c62 0065 7453 7261 2074 6964 6373     g.ble.Start disc
   c1bd8:	766f 7265 6e69 2067 6573 7672 6369 7365     overing services
   c1be8:	002e 7341 6573 7472 6f69 466e 6961 756c     ..AssertionFailu
   c1bf8:	6572 6820 6c61 625f 656c 735f 6174 6b63     re hal_ble_stack
   c1c08:	695f 696e 2874 756e 6c6c 7470 2972 3d20     _init(nullptr) =
   c1c18:	203d 5953 5453 4d45 455f 5252 524f 4e5f     = SYSTEM_ERROR_N
   c1c28:	4e4f 0045 6550 7265 6420 7665 6369 2065     ONE.Peer device 
   c1c38:	7369 6d20 7369 6973 676e 0021 6146 6c69     is missing!.Fail
   c1c48:	6465 7420 206f 6c61 6f6c 6163 6574 6d20     ed to allocate m
   c1c58:	6d65 726f 2179 4600 6961 656c 2064 6f74     emory!.Failed to
   c1c68:	6120 7070 6e65 2064 6570 7265 4320 6e65      append peer Cen
   c1c78:	7274 6c61 6420 7665 6369 2e65 4300 6e6f     tral device..Con
   c1c88:	656e 7463 6465 6220 2079 6543 746e 6172     nected by Centra
   c1c98:	206c 6564 6976 6563 002e 6944 6373 6e6f     l device..Discon
   c1ca8:	656e 7463 6465 6220 2079 6572 6f6d 6574     nected by remote
   c1cb8:	6420 7665 6369 2e65 4600 6961 656c 2064      device..Failed 
   c1cc8:	6f74 6120 7070 6e65 2064 6964 6373 766f     to append discov
   c1cd8:	7265 6465 7320 7265 6976 6563 002e 7453     ered service..St
   c1ce8:	7261 2074 6964 6373 766f 7265 6e69 2067     art discovering 
   c1cf8:	6863 7261 6361 6574 6972 7473 6369 2073     characteristics 
   c1d08:	666f 7320 7265 6976 6563 203a 7325 002e     of service: %s..
   c1d18:	6143 6e6e 746f 6120 6464 6e20 7765 7020     Cannot add new p
   c1d28:	6565 2072 6564 6976 6563 002e 654e 2077     eer device..New 
   c1d38:	6570 6972 6870 7265 6c61 6920 2073 6f63     peripheral is co
   c1d48:	6e6e 6365 6574 2e64 4300 6168 6172 7463     nnected..Charact
   c1d58:	7265 7369 6974 2063 6964 6373 766f 7265     eristic discover
   c1d68:	6465 002e 6944 6373 766f 7265 6465 6320     ed..Discovered c
   c1d78:	6168 6172 7463 7265 7369 6974 2763 2073     haracteristic's 
   c1d88:	6168 646e 656c 6920 2073 6e69 6176 696c     handle is invali
   c1d98:	2e64 4600 6961 656c 2064 6f74 6120 7070     d..Failed to app
   c1da8:	6e65 2064 6964 6373 766f 7265 6465 6320     end discovered c
   c1db8:	6168 6172 7463 7265 7369 6974 2e63 0000     haracteristic...

000c1dc8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c1dd0:	a01d 000b a081 000b a1f7 000b a0ab 000b     ................
   c1de0:	a021 000b                                   !...

000c1de4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c1dec:	a019 000b a08f 000b a01b 000b a0b1 000b     ................
   c1dfc:	a041 000b                                   A...

000c1e00 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c1e08:	a017 000b a09d 000b ad51 000b a0b7 000b     ........Q.......
   c1e18:	a061 000b                                   a...

000c1e1c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c1e28:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
   c1e38:	0000 0000                                   ....

000c1e3c <_ZTVN5spark13CellularClassE>:
	...
   c1e44:	c6f3 000b c6e9 000b c6df 000b c695 000b     ................
   c1e54:	c6d3 000b c6c7 000b cf15 000b cf1d 000b     ................
   c1e64:	c6bb 000b c6b3 000b c6a9 000b c69f 000b     ................
   c1e74:	cf4d 000b                                   M...

000c1e78 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c1e80:	c72d 000b c733 000b c771 000b c741 000b     -...3...q...A...
   c1e90:	c72f 000b                                   /...

000c1e94 <_ZTVN5spark13EthernetClassE>:
	...
   c1e9c:	ccbb 000b ccb1 000b cca7 000b cc9d 000b     ................
   c1eac:	cc91 000b cc85 000b cf15 000b cf1d 000b     ................
   c1ebc:	cc79 000b cc71 000b cc67 000b cc5d 000b     y...q...g...]...
   c1ecc:	cf4d 000b                                   M...

000c1ed0 <_ZTV7TwoWire>:
	...
   c1ed8:	ccd9 000b cd23 000b ccfb 000b ccdb 000b     ....#...........
   c1ee8:	cd03 000b cd0b 000b cd13 000b cd1b 000b     ................

000c1ef8 <_ZTV9IPAddress>:
	...
   c1f00:	cde5 000b cdd5 000b cdd7 000b 7061 0070     ............app.

000c1f10 <_ZTVN5spark12NetworkClassE>:
	...
   c1f18:	ced5 000b cedf 000b cee9 000b cef3 000b     ................
   c1f28:	cefd 000b cf09 000b cf15 000b cf1d 000b     ................
   c1f38:	cf25 000b cf31 000b cf39 000b cf43 000b     %...1...9...C...
   c1f48:	cf4d 000b                                   M...

000c1f4c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c1f4c:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   c1f5c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   c1f6c:	6d69 0065                                   ime.

000c1f70 <_ZTV11USARTSerial>:
	...
   c1f78:	d705 000b d771 000b d749 000b d039 000b     ....q...I...9...
   c1f88:	d719 000b d735 000b d727 000b d743 000b     ....5...'...C...
   c1f98:	d707 000b d70b 000b                         ........

000c1fa0 <_ZTV9USBSerial>:
	...
   c1fa8:	d7bd 000b d825 000b d7fb 000b d039 000b     ....%.......9...
   c1fb8:	d7ed 000b d7bf 000b d7cf 000b d81f 000b     ................
   c1fc8:	d7df 000b d7b7 000b                         ........

000c1fd0 <_ZSt7nothrow>:
	...

000c1fd1 <_ZTSSt19_Sp_make_shared_tag>:
   c1fd1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c1fe1:	6572 5f64 6174 0067 0000                     red_tag....

000c1fec <_ZTISt19_Sp_make_shared_tag>:
   c1fec:	20a0 000c 1fd1 000c 6f6e 2074 6e65 756f     . ......not enou
   c1ffc:	6867 7320 6170 6563 6620 726f 6620 726f     gh space for for
   c200c:	616d 2074 7865 6170 736e 6f69 206e 5028     mat expansion (P
   c201c:	656c 7361 2065 7573 6d62 7469 6620 6c75     lease submit ful
   c202c:	206c 7562 2067 6572 6f70 7472 6120 2074     l bug report at 
   c203c:	7468 7074 3a73 2f2f 6367 2e63 6e67 2e75     https://gcc.gnu.
   c204c:	726f 2f67 7562 7367 292f 0a3a 2020 2020     org/bugs/):.    
   c205c:	3000 3231 3433 3635 3837 0039               .0123456789.

000c2068 <_ZTIN10__cxxabiv117__class_type_infoE>:
   c2068:	2100 000c 2074 000c 2124 000c               .!..t ..$!..

000c2074 <_ZTSN10__cxxabiv117__class_type_infoE>:
   c2074:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c2084:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c2094:	0045 0000                                   E...

000c2098 <_ZTVN10__cxxabiv117__class_type_infoE>:
   c2098:	0000 0000 2068 000c ddb1 000b ddc5 000b     ....h ..........
   c20a8:	df59 000b df59 000b de2f 000b dd73 000b     Y...Y.../...s...
   c20b8:	de17 000b ddd9 000b dda5 000b               ............

000c20c4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c20c4:	2100 000c 20d0 000c 2068 000c               .!... ..h ..

000c20d0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c20d0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c20e0:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c20f0:	666e 456f 0000 0000                         nfoE....

000c20f8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c20f8:	0000 0000 20c4 000c de59 000b de6d 000b     ..... ..Y...m...
   c2108:	df59 000b df59 000b de2f 000b dd73 000b     Y...Y.../...s...
   c2118:	df2d 000b deb9 000b de81 000b               -...........

000c2124 <_ZTISt9type_info>:
   c2124:	20a0 000c 212c 000c                         . ..,!..

000c212c <_ZTSSt9type_info>:
   c212c:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   c213c:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   c214c:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   c215c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c216c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c217c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c218c:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c219c:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   c21ac:	6e69 7469 0079 6e61 0000 0000               inity.an....

000c21b8 <fpi.1>:
   c21b8:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c21c8:	0000 0000                                   ....

000c21cc <fpinan.0>:
   c21cc:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   c21dc:	0000 0000                                   ....

000c21e0 <tinytens>:
   c21e0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c21f0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c2200:	6f43 64ac 0628 1168                         Co.d(.h.

000c2208 <_ctype_>:
   c2208:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c2218:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c2228:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c2238:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c2248:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c2258:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c2268:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c2278:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c2288:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c2308:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c2318:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   c2328:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c2338:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c2348:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c2358:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c2368:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   c2378:	632e 0000                                   .c..

000c237c <_C_numeric_locale>:
   c237c:	1dc5 000c 1067 000c db00 2003 0043 4f50     ....g...... C.PO
   c238c:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   c239c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c23ac:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c23bc:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c23cc:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c23dc:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   c23ec:	0000 0000                                   ....

000c23f0 <__mprec_bigtens>:
   c23f0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c2400:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c2410:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c2418 <__mprec_tens>:
   c2418:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c2428:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c2438:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c2448:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c2458:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c2468:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c2478:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c2488:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c2498:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c24a8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c24b8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c24c8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c24d8:	9db4 79d9 7843 44ea                         ...yCx.D

000c24e0 <p05.0>:
   c24e0:	0005 0000 0019 0000 007d 0000               ........}...

000c24ec <link_const_variable_data_end>:
   c24ec:	000b63d1 	.word	0x000b63d1
   c24f0:	000bc685 	.word	0x000bc685
   c24f4:	000bc6fd 	.word	0x000bc6fd
   c24f8:	000bccc5 	.word	0x000bccc5
   c24fc:	000bcec5 	.word	0x000bcec5
   c2500:	000bd025 	.word	0x000bd025
   c2504:	000bd155 	.word	0x000bd155
   c2508:	000bd54d 	.word	0x000bd54d
   c250c:	000bd6f1 	.word	0x000bd6f1
