
/Users/matthewpanizza/Downloads/WaterNet23/WaterNet23CCHub/target/4.0.0/bsom/WaterNet23CCHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000ac70  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bec90  000bec90  0000ec90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000becb4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  2003db18  000becb8  0001db18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000afc  2003dcf8  2003dcf8  0002dcf8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bee94  000bee94  0001ee94  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000beebc  000beebc  0001eebc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00189441  00000000  00000000  0001eec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001910e  00000000  00000000  001a8301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00047425  00000000  00000000  001c140f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003428  00000000  00000000  00208834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000c800  00000000  00000000  0020bc5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044339  00000000  00000000  0021845c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000562f1  00000000  00000000  0025c795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00144ca5  00000000  00000000  002b2a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a164  00000000  00000000  003f772c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 fe20 	bl	bbc76 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f007 fe42 	bl	bbcc6 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003db18 	.word	0x2003db18
   b404c:	000becb8 	.word	0x000becb8
   b4050:	2003dcf4 	.word	0x2003dcf4
   b4054:	2003dcf8 	.word	0x2003dcf8
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f006 fe99 	bl	bad98 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bec64 	.word	0x000bec64
   b4080:	000bec88 	.word	0x000bec88

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 ba56 	b.w	b4534 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 f963 	bl	b5354 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f006 be39 	b.w	bad08 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 b9ab 	b.w	b73f0 <malloc>

000b409a <_Znaj>:
   b409a:	f003 b9a9 	b.w	b73f0 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f003 b9af 	b.w	b7400 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40b2:	4770      	bx	lr

000b40b4 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40b4:	7c03      	ldrb	r3, [r0, #16]
   b40b6:	f013 0308 	ands.w	r3, r3, #8
   b40ba:	bf1e      	ittt	ne
   b40bc:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40be:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40c0:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40c2:	2b00      	cmp	r3, #0
  }
   b40c4:	bfac      	ite	ge
   b40c6:	4618      	movge	r0, r3
   b40c8:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40cc:	4770      	bx	lr
	...

000b40d0 <_Z12actionTimer5v>:
        Serial1.println(outStr);
    }
}

void actionTimer5(){
    postStatus = true;
   b40d0:	4b01      	ldr	r3, [pc, #4]	; (b40d8 <_Z12actionTimer5v+0x8>)
   b40d2:	2201      	movs	r2, #1
   b40d4:	701a      	strb	r2, [r3, #0]
    for(WaterBot w: WaterBots){
        w.timeoutCount++;
    }
    //if(!BLE.connected)
}
   b40d6:	4770      	bx	lr
   b40d8:	2003dee4 	.word	0x2003dee4

000b40dc <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40dc:	4770      	bx	lr

000b40de <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b40de:	b510      	push	{r4, lr}
  }
   b40e0:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b40e2:	4604      	mov	r4, r0
  }
   b40e4:	f7ff ffdb 	bl	b409e <_ZdlPvj>
   b40e8:	4620      	mov	r0, r4
   b40ea:	bd10      	pop	{r4, pc}

000b40ec <_ZN4FileD0Ev>:
   b40ec:	b510      	push	{r4, lr}
   b40ee:	2134      	movs	r1, #52	; 0x34
   b40f0:	4604      	mov	r4, r0
   b40f2:	f7ff ffd4 	bl	b409e <_ZdlPvj>
   b40f6:	4620      	mov	r0, r4
   b40f8:	bd10      	pop	{r4, pc}

000b40fa <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b40fa:	3010      	adds	r0, #16
   b40fc:	f001 bcc2 	b.w	b5a84 <_ZN7FatFile4syncEv>

000b4100 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b4100:	3010      	adds	r0, #16
   b4102:	f001 bbe0 	b.w	b58c6 <_ZN7FatFile4peekEv>

000b4106 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b4106:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b4108:	2201      	movs	r2, #1
   b410a:	f10d 0107 	add.w	r1, sp, #7
   b410e:	3010      	adds	r0, #16
   b4110:	f001 fb2b 	bl	b576a <_ZN7FatFile4readEPvj>
   b4114:	2801      	cmp	r0, #1
   b4116:	bf0c      	ite	eq
   b4118:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b411c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   b4120:	b003      	add	sp, #12
   b4122:	f85d fb04 	ldr.w	pc, [sp], #4

000b4126 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4126:	3010      	adds	r0, #16
   b4128:	f001 bd46 	b.w	b5bb8 <_ZN7FatFile5writeEPKvj>

000b412c <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b412c:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b412e:	2201      	movs	r2, #1
   b4130:	f88d 1007 	strb.w	r1, [sp, #7]
   b4134:	3010      	adds	r0, #16
   b4136:	f10d 0107 	add.w	r1, sp, #7
   b413a:	f001 fd3d 	bl	b5bb8 <_ZN7FatFile5writeEPKvj>
  }
   b413e:	b003      	add	sp, #12
   b4140:	f85d fb04 	ldr.w	pc, [sp], #4

000b4144 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4144:	6943      	ldr	r3, [r0, #20]
   b4146:	b113      	cbz	r3, b414e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4148:	6983      	ldr	r3, [r0, #24]
   b414a:	300c      	adds	r0, #12
   b414c:	4718      	bx	r3
            callback();
        }
    }
   b414e:	4770      	bx	lr

000b4150 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4150:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4152:	2100      	movs	r1, #0
   b4154:	4604      	mov	r4, r0
   b4156:	4608      	mov	r0, r1
   b4158:	f002 fea6 	bl	b6ea8 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b415c:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b415e:	4620      	mov	r0, r4
   b4160:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4162:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4164:	f002 feb8 	bl	b6ed8 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4168:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b416a:	b10c      	cbz	r4, b4170 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b416c:	2301      	movs	r3, #1
   b416e:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4170:	2100      	movs	r1, #0
   b4172:	2001      	movs	r0, #1
   b4174:	f002 fe98 	bl	b6ea8 <os_thread_scheduling>
            }
        }
        if (t) {
   b4178:	b12c      	cbz	r4, b4186 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b417a:	6823      	ldr	r3, [r4, #0]
   b417c:	4620      	mov	r0, r4
   b417e:	689b      	ldr	r3, [r3, #8]
   b4180:	4798      	blx	r3
            t->running = false;
   b4182:	2300      	movs	r3, #0
   b4184:	7123      	strb	r3, [r4, #4]
        }
    }
   b4186:	b002      	add	sp, #8
   b4188:	bd10      	pop	{r4, pc}
	...

000b418c <_Z13actionTimer60v>:
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
   b418c:	4b0b      	ldr	r3, [pc, #44]	; (b41bc <_Z13actionTimer60v+0x30>)
   b418e:	e9d3 3000 	ldrd	r3, r0, [r3]

void actionTimer60(){
    bool reqLTEStatus = false;
   b4192:	2200      	movs	r2, #0
    for(WaterBot w: WaterBots){
   b4194:	4283      	cmp	r3, r0
   b4196:	d005      	beq.n	b41a4 <_Z13actionTimer60v+0x18>
        if(w.timeoutCount > XBEE_BLE_MAX_TIMEOUT){
   b4198:	6959      	ldr	r1, [r3, #20]
            reqLTEStatus = true;
   b419a:	2925      	cmp	r1, #37	; 0x25
   b419c:	bf28      	it	cs
   b419e:	2201      	movcs	r2, #1
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b41a0:	3318      	adds	r3, #24
      {
	++_M_current;
	return *this;
   b41a2:	e7f7      	b.n	b4194 <_Z13actionTimer60v+0x8>
            w.timeoutCount = 0;            
        }
    }
    if(reqLTEStatus && LTEStatuses < MAX_LTE_STATUSES){
   b41a4:	b142      	cbz	r2, b41b8 <_Z13actionTimer60v+0x2c>
   b41a6:	4a06      	ldr	r2, [pc, #24]	; (b41c0 <_Z13actionTimer60v+0x34>)
   b41a8:	7813      	ldrb	r3, [r2, #0]
   b41aa:	2b18      	cmp	r3, #24
   b41ac:	d804      	bhi.n	b41b8 <_Z13actionTimer60v+0x2c>
        LTEStatuses++;
   b41ae:	3301      	adds	r3, #1
   b41b0:	7013      	strb	r3, [r2, #0]
        statusTimeout = true;
   b41b2:	4b04      	ldr	r3, [pc, #16]	; (b41c4 <_Z13actionTimer60v+0x38>)
   b41b4:	2201      	movs	r2, #1
   b41b6:	701a      	strb	r2, [r3, #0]
    }
   b41b8:	4770      	bx	lr
   b41ba:	bf00      	nop
   b41bc:	2003dd34 	.word	0x2003dd34
   b41c0:	2003dd18 	.word	0x2003dd18
   b41c4:	2003e63c 	.word	0x2003e63c

000b41c8 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b41c8:	2a01      	cmp	r2, #1
   b41ca:	d102      	bne.n	b41d2 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b41cc:	6001      	str	r1, [r0, #0]
      }
   b41ce:	2000      	movs	r0, #0
   b41d0:	4770      	bx	lr
	  switch (__op)
   b41d2:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b41d4:	bf04      	itt	eq
   b41d6:	680b      	ldreq	r3, [r1, #0]
   b41d8:	6003      	streq	r3, [r0, #0]
	      break;
   b41da:	e7f8      	b.n	b41ce <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b41dc <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b41dc:	6803      	ldr	r3, [r0, #0]
   b41de:	4718      	bx	r3

000b41e0 <_ZN5Timer6_startEjb.isra.0>:
    bool _start(unsigned block, bool fromISR=false)
   b41e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b41e2:	4605      	mov	r5, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b41e4:	6880      	ldr	r0, [r0, #8]
    bool _start(unsigned block, bool fromISR=false)
   b41e6:	460e      	mov	r6, r1
   b41e8:	4614      	mov	r4, r2
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b41ea:	b130      	cbz	r0, b41fa <_ZN5Timer6_startEjb.isra.0+0x1a>
   b41ec:	2300      	movs	r3, #0
        stop(fromISR);
   b41ee:	e9cd 2300 	strd	r2, r3, [sp]
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b41f2:	2102      	movs	r1, #2
   b41f4:	461a      	mov	r2, r3
   b41f6:	f002 fe77 	bl	b6ee8 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b41fa:	68a8      	ldr	r0, [r5, #8]
   b41fc:	b130      	cbz	r0, b420c <_ZN5Timer6_startEjb.isra.0+0x2c>
   b41fe:	2300      	movs	r3, #0
   b4200:	e9cd 6300 	strd	r6, r3, [sp]
   b4204:	4622      	mov	r2, r4
   b4206:	4619      	mov	r1, r3
   b4208:	f002 fe6e 	bl	b6ee8 <os_timer_change>
    }
   b420c:	b002      	add	sp, #8
   b420e:	bd70      	pop	{r4, r5, r6, pc}

000b4210 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4210:	b40e      	push	{r1, r2, r3}
   b4212:	b503      	push	{r0, r1, lr}
   b4214:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4216:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4218:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b421c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b421e:	f006 f96a 	bl	ba4f6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4222:	b002      	add	sp, #8
   b4224:	f85d eb04 	ldr.w	lr, [sp], #4
   b4228:	b003      	add	sp, #12
   b422a:	4770      	bx	lr

000b422c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b422c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b422e:	4604      	mov	r4, r0
   b4230:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4232:	7922      	ldrb	r2, [r4, #4]
   b4234:	68a3      	ldr	r3, [r4, #8]
   b4236:	b132      	cbz	r2, b4246 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4238:	b9a3      	cbnz	r3, b4264 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b423a:	490b      	ldr	r1, [pc, #44]	; (b4268 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b423c:	b002      	add	sp, #8
   b423e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4242:	f006 b91d 	b.w	ba480 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4246:	4a09      	ldr	r2, [pc, #36]	; (b426c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4248:	7b26      	ldrb	r6, [r4, #12]
   b424a:	4d09      	ldr	r5, [pc, #36]	; (b4270 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b424c:	4909      	ldr	r1, [pc, #36]	; (b4274 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b424e:	7b64      	ldrb	r4, [r4, #13]
   b4250:	2e01      	cmp	r6, #1
   b4252:	bf18      	it	ne
   b4254:	4629      	movne	r1, r5
   b4256:	e9cd 1400 	strd	r1, r4, [sp]
   b425a:	4907      	ldr	r1, [pc, #28]	; (b4278 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b425c:	f7ff ffd8 	bl	b4210 <_ZN5Print6printfEPKcz>
  }
   b4260:	b002      	add	sp, #8
   b4262:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4264:	4a05      	ldr	r2, [pc, #20]	; (b427c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4266:	e7ef      	b.n	b4248 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4268:	000bdd91 	.word	0x000bdd91
   b426c:	000be1d5 	.word	0x000be1d5
   b4270:	000bdd8d 	.word	0x000bdd8d
   b4274:	000bdd89 	.word	0x000bdd89
   b4278:	000bdda7 	.word	0x000bdda7
   b427c:	000bdd80 	.word	0x000bdd80

000b4280 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4280:	b40e      	push	{r1, r2, r3}
   b4282:	b503      	push	{r0, r1, lr}
   b4284:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4286:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4288:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b428c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b428e:	f006 f932 	bl	ba4f6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4292:	b002      	add	sp, #8
   b4294:	f85d eb04 	ldr.w	lr, [sp], #4
   b4298:	b003      	add	sp, #12
   b429a:	4770      	bx	lr

000b429c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b429c:	b510      	push	{r4, lr}
      if (_M_manager)
   b429e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b42a0:	4604      	mov	r4, r0
      if (_M_manager)
   b42a2:	b113      	cbz	r3, b42aa <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b42a4:	2203      	movs	r2, #3
   b42a6:	4601      	mov	r1, r0
   b42a8:	4798      	blx	r3
    }
   b42aa:	4620      	mov	r0, r4
   b42ac:	bd10      	pop	{r4, pc}
	...

000b42b0 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b42b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b42b2:	4b13      	ldr	r3, [pc, #76]	; (b4300 <_ZN5TimerD1Ev+0x50>)
   b42b4:	6003      	str	r3, [r0, #0]
   b42b6:	4604      	mov	r4, r0
        if (handle) {
   b42b8:	6880      	ldr	r0, [r0, #8]
   b42ba:	b1c8      	cbz	r0, b42f0 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42bc:	2500      	movs	r5, #0
   b42be:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b42c2:	e9cd 3500 	strd	r3, r5, [sp]
   b42c6:	2102      	movs	r1, #2
   b42c8:	462b      	mov	r3, r5
   b42ca:	462a      	mov	r2, r5
   b42cc:	f002 fe0c 	bl	b6ee8 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b42d0:	68a0      	ldr	r0, [r4, #8]
   b42d2:	4629      	mov	r1, r5
   b42d4:	f002 fe28 	bl	b6f28 <os_timer_set_id>
            while (running) {
   b42d8:	7923      	ldrb	r3, [r4, #4]
   b42da:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b42de:	b113      	cbz	r3, b42e6 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b42e0:	f002 fdda 	bl	b6e98 <os_thread_yield>
            while (running) {
   b42e4:	e7f8      	b.n	b42d8 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b42e6:	68a0      	ldr	r0, [r4, #8]
   b42e8:	4629      	mov	r1, r5
   b42ea:	f002 fded 	bl	b6ec8 <os_timer_destroy>
            handle = nullptr;
   b42ee:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b42f0:	f104 000c 	add.w	r0, r4, #12
   b42f4:	f7ff ffd2 	bl	b429c <_ZNSt14_Function_baseD1Ev>
    }
   b42f8:	4620      	mov	r0, r4
   b42fa:	b003      	add	sp, #12
   b42fc:	bd30      	pop	{r4, r5, pc}
   b42fe:	bf00      	nop
   b4300:	000be364 	.word	0x000be364

000b4304 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4304:	b510      	push	{r4, lr}
   b4306:	4604      	mov	r4, r0
    }
   b4308:	f7ff ffd2 	bl	b42b0 <_ZN5TimerD1Ev>
   b430c:	4620      	mov	r0, r4
   b430e:	211c      	movs	r1, #28
   b4310:	f7ff fec5 	bl	b409e <_ZdlPvj>
   b4314:	4620      	mov	r0, r4
   b4316:	bd10      	pop	{r4, pc}

000b4318 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b4318:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b431a:	6843      	ldr	r3, [r0, #4]
   b431c:	3b01      	subs	r3, #1
    {
   b431e:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4320:	6043      	str	r3, [r0, #4]
   b4322:	b963      	cbnz	r3, b433e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b4324:	6803      	ldr	r3, [r0, #0]
   b4326:	689b      	ldr	r3, [r3, #8]
   b4328:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b432a:	68a3      	ldr	r3, [r4, #8]
   b432c:	3b01      	subs	r3, #1
   b432e:	60a3      	str	r3, [r4, #8]
   b4330:	b92b      	cbnz	r3, b433e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4332:	6823      	ldr	r3, [r4, #0]
   b4334:	4620      	mov	r0, r4
   b4336:	68db      	ldr	r3, [r3, #12]
        }
    }
   b4338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b433c:	4718      	bx	r3
    }
   b433e:	bd10      	pop	{r4, pc}

000b4340 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b4340:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4342:	468c      	mov	ip, r1
   b4344:	2500      	movs	r5, #0
   b4346:	4914      	ldr	r1, [pc, #80]	; (b4398 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b4348:	7105      	strb	r5, [r0, #4]
   b434a:	4604      	mov	r4, r0
   b434c:	6085      	str	r5, [r0, #8]
   b434e:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4350:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4354:	b085      	sub	sp, #20
   b4356:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4358:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b435c:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4360:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4364:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4368:	e897 0003 	ldmia.w	r7, {r0, r1}
   b436c:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4370:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b4372:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b4374:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4376:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4378:	6095      	str	r5, [r2, #8]
   b437a:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b437c:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b437e:	e9cd 3500 	strd	r3, r5, [sp]
   b4382:	4a06      	ldr	r2, [pc, #24]	; (b439c <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b4384:	4623      	mov	r3, r4
   b4386:	4661      	mov	r1, ip
   b4388:	f104 0008 	add.w	r0, r4, #8
   b438c:	f002 fd94 	bl	b6eb8 <os_timer_create>
    }
   b4390:	4620      	mov	r0, r4
   b4392:	b005      	add	sp, #20
   b4394:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4396:	bf00      	nop
   b4398:	000be364 	.word	0x000be364
   b439c:	000b4151 	.word	0x000b4151

000b43a0 <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b43a0:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b43a2:	460a      	mov	r2, r1
   b43a4:	4901      	ldr	r1, [pc, #4]	; (b43ac <_ZN7FatFile4openEPKci+0xc>)
   b43a6:	6809      	ldr	r1, [r1, #0]
   b43a8:	f001 bba9 	b.w	b5afe <_ZN7FatFile4openEPS_PKci>
   b43ac:	2003e644 	.word	0x2003e644

000b43b0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void offloadDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b43b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b43b2:	b095      	sub	sp, #84	; 0x54
   b43b4:	4604      	mov	r4, r0
   b43b6:	af00      	add	r7, sp, #0
   b43b8:	460d      	mov	r5, r1
    memset(fileCommand,0,8 + MAX_FILENAME_LEN);
   b43ba:	221e      	movs	r2, #30
   b43bc:	2100      	movs	r1, #0
   b43be:	f107 0030 	add.w	r0, r7, #48	; 0x30
   b43c2:	f007 fc80 	bl	bbcc6 <memset>
    memcpy(fileCommand,data,8);
   b43c6:	6820      	ldr	r0, [r4, #0]
   b43c8:	6861      	ldr	r1, [r4, #4]
   b43ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b43ce:	c303      	stmia	r3!, {r0, r1}
    if(fileCommand[0] == 'f'){
   b43d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   b43d4:	2b66      	cmp	r3, #102	; 0x66
    Serial.println(dataStr);
   b43d6:	466e      	mov	r6, sp
    if(fileCommand[0] == 'f'){
   b43d8:	d168      	bne.n	b44ac <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
        if(!strcmp(fileCommand,"filename")){
   b43da:	493e      	ldr	r1, [pc, #248]	; (b44d4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x124>)
   b43dc:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b43e0:	f007 fcb7 	bl	bbd52 <strcmp>
   b43e4:	2800      	cmp	r0, #0
   b43e6:	d13e      	bne.n	b4466 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb6>
    return m_attr;
   b43e8:	483b      	ldr	r0, [pc, #236]	; (b44d8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b43ea:	7c03      	ldrb	r3, [r0, #16]
   b43ec:	b113      	cbz	r3, b43f4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>
   b43ee:	3010      	adds	r0, #16
   b43f0:	f001 fb7e 	bl	b5af0 <_ZN7FatFile5closeEv>
            memcpy(fileCommand,data,8 + MAX_FILENAME_LEN);
   b43f4:	4623      	mov	r3, r4
   b43f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
   b43fa:	f104 0520 	add.w	r5, r4, #32
   b43fe:	6818      	ldr	r0, [r3, #0]
   b4400:	6859      	ldr	r1, [r3, #4]
   b4402:	4614      	mov	r4, r2
   b4404:	c403      	stmia	r4!, {r0, r1}
   b4406:	3308      	adds	r3, #8
   b4408:	42ab      	cmp	r3, r5
   b440a:	4622      	mov	r2, r4
   b440c:	d1f7      	bne.n	b43fe <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>
   b440e:	6818      	ldr	r0, [r3, #0]
   b4410:	6020      	str	r0, [r4, #0]
   b4412:	889b      	ldrh	r3, [r3, #4]
   b4414:	80a3      	strh	r3, [r4, #4]
            strncpy(offloadFilename,fileCommand+8,MAX_FILENAME_LEN);
   b4416:	221e      	movs	r2, #30
   b4418:	f107 0130 	add.w	r1, r7, #48	; 0x30
   b441c:	482f      	ldr	r0, [pc, #188]	; (b44dc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b441e:	f007 fce4 	bl	bbdea <strncpy>
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4422:	2300      	movs	r3, #0
    return file.open(this, path, O_RDONLY);
   b4424:	4a2d      	ldr	r2, [pc, #180]	; (b44dc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4426:	492e      	ldr	r1, [pc, #184]	; (b44e0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4428:	607b      	str	r3, [r7, #4]
    return file.open(this, path, O_RDONLY);
   b442a:	1d38      	adds	r0, r7, #4
   b442c:	f001 fb67 	bl	b5afe <_ZN7FatFile4openEPS_PKci>
            if(sd.exists(offloadFilename)){
   b4430:	b148      	cbz	r0, b4446 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x96>
                Serial.printlnf("File '%s' already exists, deleting and overwriting",offloadFilename);
   b4432:	f006 fc21 	bl	bac78 <_Z16_fetch_usbserialv>
   b4436:	492b      	ldr	r1, [pc, #172]	; (b44e4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
   b4438:	4a28      	ldr	r2, [pc, #160]	; (b44dc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b443a:	f7ff ff21 	bl	b4280 <_ZN5Print8printlnfEPKcz>
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   b443e:	4927      	ldr	r1, [pc, #156]	; (b44dc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4440:	4827      	ldr	r0, [pc, #156]	; (b44e0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
   b4442:	f001 fba8 	bl	b5b96 <_ZN7FatFile6removeEPS_PKc>
            Serial.printlnf("Starting offload of file: %s",offloadFilename);
   b4446:	f006 fc17 	bl	bac78 <_Z16_fetch_usbserialv>
   b444a:	4a24      	ldr	r2, [pc, #144]	; (b44dc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b444c:	4926      	ldr	r1, [pc, #152]	; (b44e8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   b444e:	f7ff ff17 	bl	b4280 <_ZN5Print8printlnfEPKcz>
            myFile.open(offloadFilename, O_RDWR | O_CREAT | O_AT_END);
   b4452:	4922      	ldr	r1, [pc, #136]	; (b44dc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4454:	4825      	ldr	r0, [pc, #148]	; (b44ec <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b4456:	f244 2202 	movw	r2, #16898	; 0x4202
   b445a:	f7ff ffa1 	bl	b43a0 <_ZN7FatFile4openEPKci>
}
   b445e:	3754      	adds	r7, #84	; 0x54
   b4460:	46b5      	mov	sp, r6
   b4462:	46bd      	mov	sp, r7
   b4464:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(!strcmp(fileCommand,"filecomp")){
   b4466:	4922      	ldr	r1, [pc, #136]	; (b44f0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>)
   b4468:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b446c:	f007 fc71 	bl	bbd52 <strcmp>
   b4470:	b968      	cbnz	r0, b448e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xde>
            Serial.printlnf("Reached end of file: %s",offloadFilename);
   b4472:	f006 fc01 	bl	bac78 <_Z16_fetch_usbserialv>
   b4476:	4a19      	ldr	r2, [pc, #100]	; (b44dc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4478:	491e      	ldr	r1, [pc, #120]	; (b44f4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>)
   b447a:	f7ff ff01 	bl	b4280 <_ZN5Print8printlnfEPKcz>
    return m_attr;
   b447e:	4b16      	ldr	r3, [pc, #88]	; (b44d8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b4480:	7c1b      	ldrb	r3, [r3, #16]
   b4482:	2b00      	cmp	r3, #0
   b4484:	d0eb      	beq.n	b445e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b4486:	4819      	ldr	r0, [pc, #100]	; (b44ec <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b4488:	f001 fb32 	bl	b5af0 <_ZN7FatFile5closeEv>
   b448c:	e7e7      	b.n	b445e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
        else if(!strcmp(fileCommand,"filedone")){
   b448e:	491a      	ldr	r1, [pc, #104]	; (b44f8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
   b4490:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4494:	f007 fc5d 	bl	bbd52 <strcmp>
   b4498:	b940      	cbnz	r0, b44ac <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
            Serial.println("Received done command");
   b449a:	f006 fbed 	bl	bac78 <_Z16_fetch_usbserialv>
   b449e:	4917      	ldr	r1, [pc, #92]	; (b44fc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>)
   b44a0:	f006 f801 	bl	ba4a6 <_ZN5Print7printlnEPKc>
            offloadingDone = true;
   b44a4:	4b16      	ldr	r3, [pc, #88]	; (b4500 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x150>)
   b44a6:	2201      	movs	r2, #1
   b44a8:	701a      	strb	r2, [r3, #0]
   b44aa:	e7e8      	b.n	b447e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xce>
    char dataStr[len];
   b44ac:	1deb      	adds	r3, r5, #7
   b44ae:	f023 0307 	bic.w	r3, r3, #7
   b44b2:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(dataStr,data,len);
   b44b6:	462a      	mov	r2, r5
   b44b8:	4621      	mov	r1, r4
   b44ba:	4668      	mov	r0, sp
   b44bc:	f007 fbdb 	bl	bbc76 <memcpy>
    myFile.print(dataStr);
   b44c0:	4669      	mov	r1, sp
   b44c2:	4805      	ldr	r0, [pc, #20]	; (b44d8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
   b44c4:	f005 ffdc 	bl	ba480 <_ZN5Print5printEPKc>
    Serial.println(dataStr);
   b44c8:	f006 fbd6 	bl	bac78 <_Z16_fetch_usbserialv>
   b44cc:	4669      	mov	r1, sp
   b44ce:	f005 ffea 	bl	ba4a6 <_ZN5Print7printlnEPKc>
   b44d2:	e7c4      	b.n	b445e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b44d4:	000bddc4 	.word	0x000bddc4
   b44d8:	2003de70 	.word	0x2003de70
   b44dc:	2003dea4 	.word	0x2003dea4
   b44e0:	2003e5f4 	.word	0x2003e5f4
   b44e4:	000bddcd 	.word	0x000bddcd
   b44e8:	000bde00 	.word	0x000bde00
   b44ec:	2003de80 	.word	0x2003de80
   b44f0:	000bde1d 	.word	0x000bde1d
   b44f4:	000bde26 	.word	0x000bde26
   b44f8:	000bde3e 	.word	0x000bde3e
   b44fc:	000bde47 	.word	0x000bde47
   b4500:	2003dec2 	.word	0x2003dec2

000b4504 <_Z9setupXBeev>:
void setupXBee(){
   b4504:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b4506:	f006 fd4f 	bl	bafa8 <_Z22__fetch_global_Serial1v>
   b450a:	4908      	ldr	r1, [pc, #32]	; (b452c <_Z9setupXBeev+0x28>)
   b450c:	f7ff fe80 	bl	b4210 <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4510:	2014      	movs	r0, #20
   b4512:	f002 ffd5 	bl	b74c0 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b4516:	f006 fd47 	bl	bafa8 <_Z22__fetch_global_Serial1v>
   b451a:	4905      	ldr	r1, [pc, #20]	; (b4530 <_Z9setupXBeev+0x2c>)
   b451c:	f7ff fe78 	bl	b4210 <_ZN5Print6printfEPKcz>
}
   b4520:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b4524:	2014      	movs	r0, #20
   b4526:	f002 bfcb 	b.w	b74c0 <delay>
   b452a:	bf00      	nop
   b452c:	000be1d4 	.word	0x000be1d4
   b4530:	000be28d 	.word	0x000be28d

000b4534 <setup>:
void setup() {
   b4534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pinMode(PAIR_BUTTON,INPUT_PULLDOWN);
   b4538:	2103      	movs	r1, #3
void setup() {
   b453a:	b090      	sub	sp, #64	; 0x40
    pinMode(PAIR_BUTTON,INPUT_PULLDOWN);
   b453c:	4608      	mov	r0, r1
   b453e:	f006 fc9b 	bl	bae78 <pinMode>
    pinMode(D7, OUTPUT);
   b4542:	2101      	movs	r1, #1
   b4544:	2007      	movs	r0, #7
   b4546:	f006 fc97 	bl	bae78 <pinMode>
    Serial.begin(115200);
   b454a:	f006 fb95 	bl	bac78 <_Z16_fetch_usbserialv>
   b454e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b4552:	f006 fb85 	bl	bac60 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b4556:	f006 fd27 	bl	bafa8 <_Z22__fetch_global_Serial1v>
   b455a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b455e:	f006 fb29 	bl	babb4 <_ZN11USARTSerial5beginEm>
    setupXBee();
   b4562:	f7ff ffcf 	bl	b4504 <_Z9setupXBeev>
	BLE.on();
   b4566:	f003 fcc5 	bl	b7ef4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b456a:	f003 fd0d 	bl	b7f88 <_ZNK8particle14BleLocalDevice2onEv>
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   b456e:	4a47      	ldr	r2, [pc, #284]	; (b468c <setup+0x158>)
   b4570:	4947      	ldr	r1, [pc, #284]	; (b4690 <setup+0x15c>)
    logMessages = true;
   b4572:	4f48      	ldr	r7, [pc, #288]	; (b4694 <setup+0x160>)
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   b4574:	4610      	mov	r0, r2
   b4576:	f004 fd55 	bl	b9024 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    peerOffloadCharacteristic.onDataReceived(offloadDataReceived, &peerOffloadCharacteristic);
   b457a:	4a47      	ldr	r2, [pc, #284]	; (b4698 <setup+0x164>)
   b457c:	4947      	ldr	r1, [pc, #284]	; (b469c <setup+0x168>)
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b457e:	2400      	movs	r4, #0
   b4580:	4610      	mov	r0, r2
   b4582:	f004 fd4f 	bl	b9024 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
   b4586:	4622      	mov	r2, r4
   b4588:	4945      	ldr	r1, [pc, #276]	; (b46a0 <setup+0x16c>)
   b458a:	4846      	ldr	r0, [pc, #280]	; (b46a4 <setup+0x170>)
   b458c:	e9cd 4400 	strd	r4, r4, [sp]
   b4590:	2301      	movs	r3, #1
   b4592:	f002 feb5 	bl	b7300 <spark_subscribe>
    offloadingMode = false;
   b4596:	4b44      	ldr	r3, [pc, #272]	; (b46a8 <setup+0x174>)
   b4598:	701c      	strb	r4, [r3, #0]
    offloadingDone = false;
   b459a:	4b44      	ldr	r3, [pc, #272]	; (b46ac <setup+0x178>)
   b459c:	701c      	strb	r4, [r3, #0]
    postStatus = false;
   b459e:	4b44      	ldr	r3, [pc, #272]	; (b46b0 <setup+0x17c>)
   b45a0:	701c      	strb	r4, [r3, #0]
    statusTimeout = false;
   b45a2:	4b44      	ldr	r3, [pc, #272]	; (b46b4 <setup+0x180>)
    logMessages = true;
   b45a4:	2501      	movs	r5, #1
    statusTimeout = false;
   b45a6:	701c      	strb	r4, [r3, #0]
    logMessages = true;
   b45a8:	703d      	strb	r5, [r7, #0]
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b45aa:	f006 fa8f 	bl	baacc <_ZN9TimeClass5monthEv>
   b45ae:	9007      	str	r0, [sp, #28]
   b45b0:	f006 fa80 	bl	baab4 <_ZN9TimeClass3dayEv>
   b45b4:	4606      	mov	r6, r0
   b45b6:	f006 fa91 	bl	baadc <_ZN9TimeClass4yearEv>
   b45ba:	4680      	mov	r8, r0
   b45bc:	f006 fa56 	bl	baa6c <_ZN9TimeClass4hourEv>
   b45c0:	4681      	mov	r9, r0
   b45c2:	f006 fa5f 	bl	baa84 <_ZN9TimeClass6minuteEv>
   b45c6:	4682      	mov	sl, r0
   b45c8:	f006 fa68 	bl	baa9c <_ZN9TimeClass6secondEv>
   b45cc:	9b07      	ldr	r3, [sp, #28]
   b45ce:	4a3a      	ldr	r2, [pc, #232]	; (b46b8 <setup+0x184>)
   b45d0:	9600      	str	r6, [sp, #0]
   b45d2:	e9cd a003 	strd	sl, r0, [sp, #12]
   b45d6:	2110      	movs	r1, #16
   b45d8:	e9cd 8901 	strd	r8, r9, [sp, #4]
   b45dc:	a808      	add	r0, sp, #32
   b45de:	f002 ff2f 	bl	b7440 <snprintf>
    strcpy(filenameMessages,DEF_FILENAME);
   b45e2:	4936      	ldr	r1, [pc, #216]	; (b46bc <setup+0x188>)
   b45e4:	4836      	ldr	r0, [pc, #216]	; (b46c0 <setup+0x18c>)
   b45e6:	f007 fbbe 	bl	bbd66 <strcpy>
    strcat(filenameMessages,timestamp);
   b45ea:	a908      	add	r1, sp, #32
   b45ec:	4834      	ldr	r0, [pc, #208]	; (b46c0 <setup+0x18c>)
   b45ee:	f007 fba1 	bl	bbd34 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b45f2:	4934      	ldr	r1, [pc, #208]	; (b46c4 <setup+0x190>)
   b45f4:	4832      	ldr	r0, [pc, #200]	; (b46c0 <setup+0x18c>)
   b45f6:	f007 fb9d 	bl	bbd34 <strcat>
class SPISettings : public Printable {
   b45fa:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b45fe:	4c32      	ldr	r4, [pc, #200]	; (b46c8 <setup+0x194>)
   b4600:	4b32      	ldr	r3, [pc, #200]	; (b46cc <setup+0x198>)
   b4602:	930c      	str	r3, [sp, #48]	; 0x30
   b4604:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   b4608:	4b31      	ldr	r3, [pc, #196]	; (b46d0 <setup+0x19c>)
   b460a:	930e      	str	r3, [sp, #56]	; 0x38
   b460c:	2208      	movs	r2, #8
   b460e:	ab0c      	add	r3, sp, #48	; 0x30
   b4610:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   b4614:	4630      	mov	r0, r6
   b4616:	f8ad 503c 	strh.w	r5, [sp, #60]	; 0x3c
   b461a:	f002 f98f 	bl	b693c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b461e:	b368      	cbz	r0, b467c <setup+0x148>
    m_blockDev = blockDev;
   b4620:	6026      	str	r6, [r4, #0]
    vwd()->close();
   b4622:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   b4626:	f001 fa63 	bl	b5af0 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b462a:	4629      	mov	r1, r5
   b462c:	4620      	mov	r0, r4
   b462e:	f002 f82f 	bl	b6690 <_ZN9FatVolume4initEh>
   b4632:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   b4636:	4601      	mov	r1, r0
   b4638:	b1d8      	cbz	r0, b4672 <setup+0x13e>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b463a:	4923      	ldr	r1, [pc, #140]	; (b46c8 <setup+0x194>)
   b463c:	f201 403c 	addw	r0, r1, #1084	; 0x43c
   b4640:	f001 f88d 	bl	b575e <_ZN7FatFile8openRootEP9FatVolume>
   b4644:	b1d0      	cbz	r0, b467c <setup+0x148>
    if (!dir->isDir()) {
   b4646:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b464a:	f013 0f70 	tst.w	r3, #112	; 0x70
   b464e:	d015      	beq.n	b467c <setup+0x148>
    m_cwd = dir;
   b4650:	4b20      	ldr	r3, [pc, #128]	; (b46d4 <setup+0x1a0>)
   b4652:	601d      	str	r5, [r3, #0]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4654:	4820      	ldr	r0, [pc, #128]	; (b46d8 <setup+0x1a4>)
   b4656:	2200      	movs	r2, #0
   b4658:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b465c:	f7ff fdc0 	bl	b41e0 <_ZN5Timer6_startEjb.isra.0>
   b4660:	481e      	ldr	r0, [pc, #120]	; (b46dc <setup+0x1a8>)
   b4662:	2200      	movs	r2, #0
   b4664:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b4668:	f7ff fdba 	bl	b41e0 <_ZN5Timer6_startEjb.isra.0>
}
   b466c:	b010      	add	sp, #64	; 0x40
   b466e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return (part ? init(part) : init(1) || init(0))
   b4672:	4620      	mov	r0, r4
   b4674:	f002 f80c 	bl	b6690 <_ZN9FatVolume4initEh>
   b4678:	2800      	cmp	r0, #0
   b467a:	d1de      	bne.n	b463a <setup+0x106>
        Serial.println("Error: could not connect to SD card!");
   b467c:	f006 fafc 	bl	bac78 <_Z16_fetch_usbserialv>
   b4680:	4917      	ldr	r1, [pc, #92]	; (b46e0 <setup+0x1ac>)
   b4682:	f005 ff10 	bl	ba4a6 <_ZN5Print7printlnEPKc>
        logMessages = false;
   b4686:	2300      	movs	r3, #0
   b4688:	703b      	strb	r3, [r7, #0]
   b468a:	e7e3      	b.n	b4654 <setup+0x120>
   b468c:	2003dedc 	.word	0x2003dedc
   b4690:	000b4e15 	.word	0x000b4e15
   b4694:	2003de6c 	.word	0x2003de6c
   b4698:	2003decc 	.word	0x2003decc
   b469c:	000b43b1 	.word	0x000b43b1
   b46a0:	000b4dc5 	.word	0x000b4dc5
   b46a4:	000bde5d 	.word	0x000bde5d
   b46a8:	2003dec3 	.word	0x2003dec3
   b46ac:	2003dec2 	.word	0x2003dec2
   b46b0:	2003dee4 	.word	0x2003dee4
   b46b4:	2003e63c 	.word	0x2003e63c
   b46b8:	000bde65 	.word	0x000bde65
   b46bc:	000bde7e 	.word	0x000bde7e
   b46c0:	2003dde1 	.word	0x2003dde1
   b46c4:	000bde87 	.word	0x000bde87
   b46c8:	2003e1b8 	.word	0x2003e1b8
   b46cc:	000be350 	.word	0x000be350
   b46d0:	003d0900 	.word	0x003d0900
   b46d4:	2003e644 	.word	0x2003e644
   b46d8:	2003dd94 	.word	0x2003dd94
   b46dc:	2003ddb0 	.word	0x2003ddb0
   b46e0:	000bde90 	.word	0x000bde90

000b46e4 <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b46e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b46e8:	b084      	sub	sp, #16
   b46ea:	af02      	add	r7, sp, #8
   b46ec:	4680      	mov	r8, r0
   b46ee:	4691      	mov	r9, r2
   b46f0:	461e      	mov	r6, r3
   b46f2:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b46f4:	f007 fb5d 	bl	bbdb2 <strlen>
   b46f8:	3009      	adds	r0, #9
   b46fa:	f020 0107 	bic.w	r1, r0, #7
   b46fe:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4702:	4640      	mov	r0, r8
   b4704:	f007 fb55 	bl	bbdb2 <strlen>
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b4708:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b470c:	4926      	ldr	r1, [pc, #152]	; (b47a8 <_Z8sendDataPKchbbb+0xc4>)
    char outStr[strlen(dataOut)+2];
   b470e:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4710:	4603      	mov	r3, r0
   b4712:	4642      	mov	r2, r8
   b4714:	4620      	mov	r0, r4
   b4716:	f002 fe83 	bl	b7420 <sprintf>
    if(sendLTE || sendMode == 4){
   b471a:	f1ba 0f00 	cmp.w	sl, #0
   b471e:	d101      	bne.n	b4724 <_Z8sendDataPKchbbb+0x40>
   b4720:	2d04      	cmp	r5, #4
   b4722:	d10d      	bne.n	b4740 <_Z8sendDataPKchbbb+0x5c>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4724:	4b21      	ldr	r3, [pc, #132]	; (b47ac <_Z8sendDataPKchbbb+0xc8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4726:	4922      	ldr	r1, [pc, #136]	; (b47b0 <_Z8sendDataPKchbbb+0xcc>)
   b4728:	781b      	ldrb	r3, [r3, #0]
   b472a:	f88d 3000 	strb.w	r3, [sp]
   b472e:	4638      	mov	r0, r7
   b4730:	233c      	movs	r3, #60	; 0x3c
   b4732:	4622      	mov	r2, r4
   b4734:	f005 fb74 	bl	b9e20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4738:	6878      	ldr	r0, [r7, #4]
   b473a:	b108      	cbz	r0, b4740 <_Z8sendDataPKchbbb+0x5c>
	  _M_pi->_M_release();
   b473c:	f7ff fdec 	bl	b4318 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b4740:	f1b9 0f00 	cmp.w	r9, #0
   b4744:	d101      	bne.n	b474a <_Z8sendDataPKchbbb+0x66>
   b4746:	2d01      	cmp	r5, #1
   b4748:	d121      	bne.n	b478e <_Z8sendDataPKchbbb+0xaa>
   b474a:	f003 fbd3 	bl	b7ef4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b474e:	f003 fc61 	bl	b8014 <_ZNK8particle14BleLocalDevice9connectedEv>
   b4752:	b1e0      	cbz	r0, b478e <_Z8sendDataPKchbbb+0xaa>
        uint8_t txBuf_tmp[strlen(outStr)];
   b4754:	4620      	mov	r0, r4
   b4756:	f007 fb2c 	bl	bbdb2 <strlen>
   b475a:	3007      	adds	r0, #7
   b475c:	f020 0007 	bic.w	r0, r0, #7
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b4760:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b4762:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b4766:	4620      	mov	r0, r4
   b4768:	f007 fb23 	bl	bbdb2 <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b476c:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b4770:	4602      	mov	r2, r0
   b4772:	4621      	mov	r1, r4
   b4774:	4648      	mov	r0, r9
   b4776:	f007 fa7e 	bl	bbc76 <memcpy>
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b477a:	4620      	mov	r0, r4
   b477c:	f007 fb19 	bl	bbdb2 <strlen>
   b4780:	2300      	movs	r3, #0
   b4782:	4602      	mov	r2, r0
   b4784:	4649      	mov	r1, r9
   b4786:	480b      	ldr	r0, [pc, #44]	; (b47b4 <_Z8sendDataPKchbbb+0xd0>)
   b4788:	f003 fa4e 	bl	b7c28 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b478c:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b478e:	b90e      	cbnz	r6, b4794 <_Z8sendDataPKchbbb+0xb0>
   b4790:	2d02      	cmp	r5, #2
   b4792:	d104      	bne.n	b479e <_Z8sendDataPKchbbb+0xba>
        Serial1.println(outStr);
   b4794:	f006 fc08 	bl	bafa8 <_Z22__fetch_global_Serial1v>
   b4798:	4621      	mov	r1, r4
   b479a:	f005 fe84 	bl	ba4a6 <_ZN5Print7printlnEPKc>
}
   b479e:	3708      	adds	r7, #8
   b47a0:	46bd      	mov	sp, r7
   b47a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b47a6:	bf00      	nop
   b47a8:	000bdeb5 	.word	0x000bdeb5
   b47ac:	2003dd7c 	.word	0x2003dd7c
   b47b0:	000bde5d 	.word	0x000bde5d
   b47b4:	2003ded4 	.word	0x2003ded4

000b47b8 <_Z14XBeeLTEPairSetv>:
void XBeeLTEPairSet(){
   b47b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      : _M_current(__i) { }
   b47bc:	4d0e      	ldr	r5, [pc, #56]	; (b47f8 <_Z14XBeeLTEPairSetv+0x40>)
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b47be:	4f0f      	ldr	r7, [pc, #60]	; (b47fc <_Z14XBeeLTEPairSetv+0x44>)
   b47c0:	e9d5 4800 	ldrd	r4, r8, [r5]
void XBeeLTEPairSet(){
   b47c4:	b088      	sub	sp, #32
    for(WaterBot p: PairBots){
   b47c6:	45a0      	cmp	r8, r4
   b47c8:	d013      	beq.n	b47f2 <_Z14XBeeLTEPairSetv+0x3a>
   b47ca:	7923      	ldrb	r3, [r4, #4]
   b47cc:	78e6      	ldrb	r6, [r4, #3]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b47ce:	f814 2b18 	ldrb.w	r2, [r4], #24
    for(WaterBot p: PairBots){
   b47d2:	9303      	str	r3, [sp, #12]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b47d4:	4639      	mov	r1, r7
   b47d6:	a805      	add	r0, sp, #20
   b47d8:	f002 fe22 	bl	b7420 <sprintf>
        sendData(replyStr,0,false,p.XBeeAvail,p.LTEAvail);
   b47dc:	2200      	movs	r2, #0
   b47de:	9b03      	ldr	r3, [sp, #12]
   b47e0:	9600      	str	r6, [sp, #0]
   b47e2:	4611      	mov	r1, r2
   b47e4:	a805      	add	r0, sp, #20
   b47e6:	f7ff ff7d 	bl	b46e4 <_Z8sendDataPKchbbb>
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_nonempty();
	--this->_M_impl._M_finish;
   b47ea:	686b      	ldr	r3, [r5, #4]
   b47ec:	3b18      	subs	r3, #24
   b47ee:	606b      	str	r3, [r5, #4]
	return *this;
   b47f0:	e7e9      	b.n	b47c6 <_Z14XBeeLTEPairSetv+0xe>
}
   b47f2:	b008      	add	sp, #32
   b47f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b47f8:	2003dd1c 	.word	0x2003dd1c
   b47fc:	000bdebc 	.word	0x000bdebc

000b4800 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b4800:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4804:	e9d0 8900 	ldrd	r8, r9, [r0]
   b4808:	4b29      	ldr	r3, [pc, #164]	; (b48b0 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb0>)
   b480a:	eba9 0408 	sub.w	r4, r9, r8
   b480e:	10e4      	asrs	r4, r4, #3
   b4810:	435c      	muls	r4, r3

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b4812:	4b28      	ldr	r3, [pc, #160]	; (b48b4 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>)
   b4814:	429c      	cmp	r4, r3
   b4816:	4607      	mov	r7, r0
   b4818:	468a      	mov	sl, r1
   b481a:	4693      	mov	fp, r2
   b481c:	d102      	bne.n	b4824 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
   b481e:	4826      	ldr	r0, [pc, #152]	; (b48b8 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb8>)
   b4820:	f006 fbe8 	bl	baff4 <_ZSt20__throw_length_errorPKc>
   b4824:	2c01      	cmp	r4, #1
   b4826:	4622      	mov	r2, r4
   b4828:	bf38      	it	cc
   b482a:	2201      	movcc	r2, #1
   b482c:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b482e:	eba1 0508 	sub.w	r5, r1, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4832:	d238      	bcs.n	b48a6 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa6>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4834:	b3cc      	cbz	r4, b48aa <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
   b4836:	429c      	cmp	r4, r3
   b4838:	bf28      	it	cs
   b483a:	461c      	movcs	r4, r3
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b483c:	2018      	movs	r0, #24
   b483e:	4360      	muls	r0, r4
   b4840:	f7ff fc29 	bl	b4096 <_Znwj>
   b4844:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4846:	eb16 0c05 	adds.w	ip, r6, r5
   b484a:	bf1f      	itttt	ne
   b484c:	e8bb 000f 	ldmiane.w	fp!, {r0, r1, r2, r3}
   b4850:	e8ac 000f 	stmiane.w	ip!, {r0, r1, r2, r3}
   b4854:	e9db 0100 	ldrdne	r0, r1, [fp]
   b4858:	e9cc 0100 	strdne	r0, r1, [ip]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
   b485c:	2d00      	cmp	r5, #0
   b485e:	dd04      	ble.n	b486a <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6a>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b4860:	462a      	mov	r2, r5
   b4862:	4641      	mov	r1, r8
   b4864:	4630      	mov	r0, r6
   b4866:	f007 fa14 	bl	bbc92 <memmove>
      ptrdiff_t __count = __last - __first;
   b486a:	eba9 090a 	sub.w	r9, r9, sl
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   b486e:	3518      	adds	r5, #24
      if (__count > 0)
   b4870:	f1b9 0f00 	cmp.w	r9, #0
   b4874:	4435      	add	r5, r6
   b4876:	dd04      	ble.n	b4882 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b4878:	464a      	mov	r2, r9
   b487a:	4651      	mov	r1, sl
   b487c:	4628      	mov	r0, r5
   b487e:	f007 f9fa 	bl	bbc76 <memcpy>
      return __result + __count;
   b4882:	444d      	add	r5, r9
	if (__p)
   b4884:	f1b8 0f00 	cmp.w	r8, #0
   b4888:	d005      	beq.n	b4896 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x96>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b488a:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b488c:	4640      	mov	r0, r8
   b488e:	eba1 0108 	sub.w	r1, r1, r8
   b4892:	f7ff fc04 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b4896:	2018      	movs	r0, #24
   b4898:	fb00 6404 	mla	r4, r0, r4, r6
      this->_M_impl._M_finish = __new_finish;
   b489c:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b48a0:	60bc      	str	r4, [r7, #8]
    }
   b48a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b48a6:	461c      	mov	r4, r3
   b48a8:	e7c8      	b.n	b483c <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b48aa:	4626      	mov	r6, r4
   b48ac:	e7cb      	b.n	b4846 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
   b48ae:	bf00      	nop
   b48b0:	aaaaaaab 	.word	0xaaaaaaab
   b48b4:	05555555 	.word	0x05555555
   b48b8:	000bdec5 	.word	0x000bdec5

000b48bc <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b48bc:	b570      	push	{r4, r5, r6, lr}
   b48be:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b48c0:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b48c4:	4299      	cmp	r1, r3
      push_back(const value_type& __x)
   b48c6:	4606      	mov	r6, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b48c8:	d00c      	beq.n	b48e4 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x28>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b48ca:	b139      	cbz	r1, b48dc <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x20>
   b48cc:	4615      	mov	r5, r2
   b48ce:	460c      	mov	r4, r1
   b48d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b48d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b48d4:	e895 0003 	ldmia.w	r5, {r0, r1}
   b48d8:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
   b48dc:	6873      	ldr	r3, [r6, #4]
   b48de:	3318      	adds	r3, #24
   b48e0:	6073      	str	r3, [r6, #4]
      }
   b48e2:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
   b48e4:	f7ff ff8c 	bl	b4800 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b48e8:	e7fb      	b.n	b48e2 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x26>
	...

000b48ec <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b48ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b48f0:	b09d      	sub	sp, #116	; 0x74
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b48f2:	7883      	ldrb	r3, [r0, #2]
   b48f4:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b48f6:	af02      	add	r7, sp, #8
   b48f8:	4606      	mov	r6, r0
   b48fa:	468a      	mov	sl, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b48fc:	d15d      	bne.n	b49ba <_Z14processCommandPKchb+0xce>
   b48fe:	78c3      	ldrb	r3, [r0, #3]
   b4900:	2b42      	cmp	r3, #66	; 0x42
   b4902:	f040 8179 	bne.w	b4bf8 <_Z14processCommandPKchb+0x30c>
        char dataStr[strlen(command)-8];
   b4906:	4630      	mov	r0, r6
   b4908:	f007 fa53 	bl	bbdb2 <strlen>
   b490c:	3801      	subs	r0, #1
   b490e:	f020 0007 	bic.w	r0, r0, #7
        }
   b4912:	46e8      	mov	r8, sp
        char dataStr[strlen(command)-8];
   b4914:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b4918:	4630      	mov	r0, r6
   b491a:	f007 fa4a 	bl	bbdb2 <strlen>
        char dataStr[strlen(command)-8];
   b491e:	ad02      	add	r5, sp, #8
        dataStr[strlen(command)-9] = '\0';
   b4920:	4428      	add	r0, r5
   b4922:	f04f 0900 	mov.w	r9, #0
        rxIDBuf[0] = command[1];
   b4926:	7873      	ldrb	r3, [r6, #1]
        dataStr[strlen(command)-9] = '\0';
   b4928:	f800 9c09 	strb.w	r9, [r0, #-9]
        uint8_t rxBotID = atoi(rxIDBuf);
   b492c:	f107 0018 	add.w	r0, r7, #24
        rxIDBuf[0] = command[1];
   b4930:	763b      	strb	r3, [r7, #24]
        uint8_t rxBotID = atoi(rxIDBuf);
   b4932:	f007 f98c 	bl	bbc4e <atoi>
   b4936:	4604      	mov	r4, r0
        checkStr[0] = command[strlen(command)-2];
   b4938:	4630      	mov	r0, r6
        cmdStr[3] = '\0';
   b493a:	f887 9023 	strb.w	r9, [r7, #35]	; 0x23
        checkStr[0] = command[strlen(command)-2];
   b493e:	f007 fa38 	bl	bbdb2 <strlen>
   b4942:	4430      	add	r0, r6
   b4944:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b4948:	773b      	strb	r3, [r7, #28]
        checkStr[1] = command[strlen(command)-1];
   b494a:	4630      	mov	r0, r6
   b494c:	f007 fa31 	bl	bbdb2 <strlen>
   b4950:	4430      	add	r0, r6
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4952:	4649      	mov	r1, r9
        checkStr[1] = command[strlen(command)-1];
   b4954:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b4958:	777b      	strb	r3, [r7, #29]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b495a:	2210      	movs	r2, #16
   b495c:	f107 001c 	add.w	r0, r7, #28
        checkStr[2] = '\0';
   b4960:	f887 901e 	strb.w	r9, [r7, #30]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4964:	f008 f910 	bl	bcb88 <strtol>
   b4968:	4683      	mov	fp, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b496a:	fa5f fb8b 	uxtb.w	fp, fp
   b496e:	f006 f983 	bl	bac78 <_Z16_fetch_usbserialv>
   b4972:	49c8      	ldr	r1, [pc, #800]	; (b4c94 <_Z14processCommandPKchb+0x3a8>)
   b4974:	465b      	mov	r3, fp
   b4976:	465a      	mov	r2, fp
   b4978:	f7ff fc82 	bl	b4280 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b497c:	f04f 0904 	mov.w	r9, #4
   b4980:	4630      	mov	r0, r6
   b4982:	f007 fa16 	bl	bbdb2 <strlen>
   b4986:	3802      	subs	r0, #2
   b4988:	4581      	cmp	r9, r0
   b498a:	d21c      	bcs.n	b49c6 <_Z14processCommandPKchb+0xda>
            if(i < 7) cmdStr[i-4] = command[i];
   b498c:	f1b9 0f06 	cmp.w	r9, #6
   b4990:	bf9b      	ittet	ls
   b4992:	f107 0368 	addls.w	r3, r7, #104	; 0x68
   b4996:	444b      	addls	r3, r9
            else dataStr[i-7] = command[i];
   b4998:	eb05 0309 	addhi.w	r3, r5, r9
            if(i < 7) cmdStr[i-4] = command[i];
   b499c:	f816 2009 	ldrbls.w	r2, [r6, r9]
            else dataStr[i-7] = command[i];
   b49a0:	bf8c      	ite	hi
   b49a2:	f816 2009 	ldrbhi.w	r2, [r6, r9]
            if(i < 7) cmdStr[i-4] = command[i];
   b49a6:	f803 2c4c 	strbls.w	r2, [r3, #-76]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b49aa:	f109 0901 	add.w	r9, r9, #1
            else dataStr[i-7] = command[i];
   b49ae:	bf88      	it	hi
   b49b0:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b49b4:	fa5f f989 	uxtb.w	r9, r9
   b49b8:	e7e2      	b.n	b4980 <_Z14processCommandPKchb+0x94>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b49ba:	2b43      	cmp	r3, #67	; 0x43
   b49bc:	f040 811c 	bne.w	b4bf8 <_Z14processCommandPKchb+0x30c>
   b49c0:	78c3      	ldrb	r3, [r0, #3]
   b49c2:	2b43      	cmp	r3, #67	; 0x43
   b49c4:	e79d      	b.n	b4902 <_Z14processCommandPKchb+0x16>
        if(checksum != strlen(command)-2){
   b49c6:	4558      	cmp	r0, fp
   b49c8:	d042      	beq.n	b4a50 <_Z14processCommandPKchb+0x164>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b49ca:	f006 f955 	bl	bac78 <_Z16_fetch_usbserialv>
   b49ce:	4604      	mov	r4, r0
   b49d0:	4630      	mov	r0, r6
   b49d2:	f007 f9ee 	bl	bbdb2 <strlen>
   b49d6:	1e82      	subs	r2, r0, #2
   b49d8:	4620      	mov	r0, r4
    return m_attr;
   b49da:	4caf      	ldr	r4, [pc, #700]	; (b4c98 <_Z14processCommandPKchb+0x3ac>)
   b49dc:	49af      	ldr	r1, [pc, #700]	; (b4c9c <_Z14processCommandPKchb+0x3b0>)
   b49de:	465b      	mov	r3, fp
   b49e0:	f7ff fc4e 	bl	b4280 <_ZN5Print8printlnfEPKcz>
            if(!logFile.isOpen()){
   b49e4:	7c23      	ldrb	r3, [r4, #16]
   b49e6:	bb6b      	cbnz	r3, b4a44 <_Z14processCommandPKchb+0x158>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b49e8:	49ad      	ldr	r1, [pc, #692]	; (b4ca0 <_Z14processCommandPKchb+0x3b4>)
   b49ea:	f244 2202 	movw	r2, #16898	; 0x4202
   b49ee:	f104 0010 	add.w	r0, r4, #16
   b49f2:	f7ff fcd5 	bl	b43a0 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b49f6:	49ab      	ldr	r1, [pc, #684]	; (b4ca4 <_Z14processCommandPKchb+0x3b8>)
   b49f8:	4632      	mov	r2, r6
   b49fa:	4620      	mov	r0, r4
   b49fc:	f7ff fc40 	bl	b4280 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4a00:	f104 0010 	add.w	r0, r4, #16
   b4a04:	f001 f874 	bl	b5af0 <_ZN7FatFile5closeEv>
            Serial.println("Warning, checksum does not match");
   b4a08:	f006 f936 	bl	bac78 <_Z16_fetch_usbserialv>
   b4a0c:	49a6      	ldr	r1, [pc, #664]	; (b4ca8 <_Z14processCommandPKchb+0x3bc>)
   b4a0e:	f005 fd4a 	bl	ba4a6 <_ZN5Print7printlnEPKc>
            if((command[1] >= '0' && command[1] <= '9') || command[1] == 'C'){
   b4a12:	7873      	ldrb	r3, [r6, #1]
   b4a14:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b4a18:	2a09      	cmp	r2, #9
   b4a1a:	d902      	bls.n	b4a22 <_Z14processCommandPKchb+0x136>
   b4a1c:	2b43      	cmp	r3, #67	; 0x43
   b4a1e:	f040 80ea 	bne.w	b4bf6 <_Z14processCommandPKchb+0x30a>
                rxBotNum[0] = command[0];
   b4a22:	7832      	ldrb	r2, [r6, #0]
   b4a24:	f887 2038 	strb.w	r2, [r7, #56]	; 0x38
                rxBotNum[1] = command[1];
   b4a28:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
                sprintf(errBuf,"CC%2snak%3s",rxBotNum,cmdStr);
   b4a2c:	499f      	ldr	r1, [pc, #636]	; (b4cac <_Z14processCommandPKchb+0x3c0>)
   b4a2e:	48a0      	ldr	r0, [pc, #640]	; (b4cb0 <_Z14processCommandPKchb+0x3c4>)
   b4a30:	f107 0320 	add.w	r3, r7, #32
   b4a34:	f107 0238 	add.w	r2, r7, #56	; 0x38
   b4a38:	f002 fcf2 	bl	b7420 <sprintf>
                errModeReply = mode;
   b4a3c:	4b9d      	ldr	r3, [pc, #628]	; (b4cb4 <_Z14processCommandPKchb+0x3c8>)
            errCmdMode = mode;
   b4a3e:	f883 a000 	strb.w	sl, [r3]
   b4a42:	e0d8      	b.n	b4bf6 <_Z14processCommandPKchb+0x30a>
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4a44:	4997      	ldr	r1, [pc, #604]	; (b4ca4 <_Z14processCommandPKchb+0x3b8>)
   b4a46:	4632      	mov	r2, r6
   b4a48:	4620      	mov	r0, r4
   b4a4a:	f7ff fc19 	bl	b4280 <_ZN5Print8printlnfEPKcz>
   b4a4e:	e7db      	b.n	b4a08 <_Z14processCommandPKchb+0x11c>
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   b4a50:	4999      	ldr	r1, [pc, #612]	; (b4cb8 <_Z14processCommandPKchb+0x3cc>)
   b4a52:	f107 0020 	add.w	r0, r7, #32
   b4a56:	f007 f97c 	bl	bbd52 <strcmp>
   b4a5a:	2800      	cmp	r0, #0
   b4a5c:	f000 80cb 	beq.w	b4bf6 <_Z14processCommandPKchb+0x30a>
        else if(!strcmp(cmdStr,"sup")){
   b4a60:	4996      	ldr	r1, [pc, #600]	; (b4cbc <_Z14processCommandPKchb+0x3d0>)
   b4a62:	f107 0020 	add.w	r0, r7, #32
        uint8_t rxBotID = atoi(rxIDBuf);
   b4a66:	b2e4      	uxtb	r4, r4
        else if(!strcmp(cmdStr,"sup")){
   b4a68:	f007 f973 	bl	bbd52 <strcmp>
   b4a6c:	2800      	cmp	r0, #0
   b4a6e:	f040 80c7 	bne.w	b4c00 <_Z14processCommandPKchb+0x314>
      : _M_current(__i) { }
   b4a72:	4b93      	ldr	r3, [pc, #588]	; (b4cc0 <_Z14processCommandPKchb+0x3d4>)
                    Serial.println("##########################");
   b4a74:	f8df 9290 	ldr.w	r9, [pc, #656]	; b4d08 <_Z14processCommandPKchb+0x41c>
   b4a78:	685a      	ldr	r2, [r3, #4]
   b4a7a:	681e      	ldr	r6, [r3, #0]
   b4a7c:	617a      	str	r2, [r7, #20]
            bool newBot = true;
   b4a7e:	2301      	movs	r3, #1
            for(WaterBot w: WaterBots){
   b4a80:	697a      	ldr	r2, [r7, #20]
   b4a82:	42b2      	cmp	r2, r6
   b4a84:	d074      	beq.n	b4b70 <_Z14processCommandPKchb+0x284>
   b4a86:	7832      	ldrb	r2, [r6, #0]
                if(rxBotID == w.botNum){
   b4a88:	4294      	cmp	r4, r2
   b4a8a:	d16f      	bne.n	b4b6c <_Z14processCommandPKchb+0x280>
                    sscanf(dataStr,"%u %u %s %s",&battpct,&statflags,testLat,testLon);
   b4a8c:	f107 0a38 	add.w	sl, r7, #56	; 0x38
   b4a90:	f107 0b28 	add.w	fp, r7, #40	; 0x28
   b4a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
   b4a98:	f107 021b 	add.w	r2, r7, #27
   b4a9c:	4989      	ldr	r1, [pc, #548]	; (b4cc4 <_Z14processCommandPKchb+0x3d8>)
   b4a9e:	f8cd a004 	str.w	sl, [sp, #4]
   b4aa2:	f8cd b000 	str.w	fp, [sp]
   b4aa6:	4628      	mov	r0, r5
   b4aa8:	f002 fcc2 	bl	b7430 <sscanf>
                    latRX = atof(testLat);
   b4aac:	4658      	mov	r0, fp
   b4aae:	f007 f8cb 	bl	bbc48 <atof>
                    lonRX = atof(testLon);
   b4ab2:	4650      	mov	r0, sl
                    latRX = atof(testLat);
   b4ab4:	ed87 0b02 	vstr	d0, [r7, #8]
                    lonRX = atof(testLon);
   b4ab8:	f007 f8c6 	bl	bbc48 <atof>
                    w.LTEAvail = statflags & 1;
   b4abc:	f897 a024 	ldrb.w	sl, [r7, #36]	; 0x24
                    w.battPercent = battpct;
   b4ac0:	f897 b01b 	ldrb.w	fp, [r7, #27]
                    lonRX = atof(testLon);
   b4ac4:	ed87 0b00 	vstr	d0, [r7]
                    Serial.println("Status Update!");
   b4ac8:	f006 f8d6 	bl	bac78 <_Z16_fetch_usbserialv>
   b4acc:	497e      	ldr	r1, [pc, #504]	; (b4cc8 <_Z14processCommandPKchb+0x3dc>)
   b4ace:	f005 fcea 	bl	ba4a6 <_ZN5Print7printlnEPKc>
                    Serial.println("##########################");
   b4ad2:	f006 f8d1 	bl	bac78 <_Z16_fetch_usbserialv>
   b4ad6:	4649      	mov	r1, r9
   b4ad8:	f005 fce5 	bl	ba4a6 <_ZN5Print7printlnEPKc>
                    Serial.println("##     STATUS UPDATE    ##");
   b4adc:	f006 f8cc 	bl	bac78 <_Z16_fetch_usbserialv>
   b4ae0:	497a      	ldr	r1, [pc, #488]	; (b4ccc <_Z14processCommandPKchb+0x3e0>)
   b4ae2:	f005 fce0 	bl	ba4a6 <_ZN5Print7printlnEPKc>
                    Serial.printlnf("##       Bot #: %1d      ##",w.botNum);
   b4ae6:	f006 f8c7 	bl	bac78 <_Z16_fetch_usbserialv>
   b4aea:	4979      	ldr	r1, [pc, #484]	; (b4cd0 <_Z14processCommandPKchb+0x3e4>)
   b4aec:	4622      	mov	r2, r4
   b4aee:	f7ff fbc7 	bl	b4280 <_ZN5Print8printlnfEPKcz>
                    Serial.printlnf("##      Batt %: %03d     ##",w.battPercent);
   b4af2:	f006 f8c1 	bl	bac78 <_Z16_fetch_usbserialv>
   b4af6:	465a      	mov	r2, fp
   b4af8:	4976      	ldr	r1, [pc, #472]	; (b4cd4 <_Z14processCommandPKchb+0x3e8>)
   b4afa:	f7ff fbc1 	bl	b4280 <_ZN5Print8printlnfEPKcz>
                    Serial.println("##    LTE  BLE  XBee    ##");
   b4afe:	f006 f8bb 	bl	bac78 <_Z16_fetch_usbserialv>
   b4b02:	4975      	ldr	r1, [pc, #468]	; (b4cd8 <_Z14processCommandPKchb+0x3ec>)
   b4b04:	f005 fccf 	bl	ba4a6 <_ZN5Print7printlnEPKc>
                    Serial.printlnf("##     %d    %d     %d     ##",w.LTEAvail,w.BLEAvail,w.XBeeAvail);
   b4b08:	f006 f8b6 	bl	bac78 <_Z16_fetch_usbserialv>
   b4b0c:	f3ca 0340 	ubfx	r3, sl, #1, #1
   b4b10:	f00a 0201 	and.w	r2, sl, #1
   b4b14:	4971      	ldr	r1, [pc, #452]	; (b4cdc <_Z14processCommandPKchb+0x3f0>)
   b4b16:	9300      	str	r3, [sp, #0]
   b4b18:	f3ca 0380 	ubfx	r3, sl, #2, #1
   b4b1c:	f7ff fbb0 	bl	b4280 <_ZN5Print8printlnfEPKcz>
                    Serial.println("##  Latitude Longitude  ##");
   b4b20:	f006 f8aa 	bl	bac78 <_Z16_fetch_usbserialv>
   b4b24:	496e      	ldr	r1, [pc, #440]	; (b4ce0 <_Z14processCommandPKchb+0x3f4>)
   b4b26:	f005 fcbe 	bl	ba4a6 <_ZN5Print7printlnEPKc>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4b2a:	f006 f8a5 	bl	bac78 <_Z16_fetch_usbserialv>
   b4b2e:	4682      	mov	sl, r0
                    latRX = atof(testLat);
   b4b30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   b4b34:	f007 f814 	bl	bbb60 <__aeabi_d2f>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4b38:	f006 fcd8 	bl	bb4ec <__aeabi_f2d>
   b4b3c:	4602      	mov	r2, r0
   b4b3e:	460b      	mov	r3, r1
                    lonRX = atof(testLon);
   b4b40:	e9d7 0100 	ldrd	r0, r1, [r7]
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4b44:	e9c7 2302 	strd	r2, r3, [r7, #8]
                    lonRX = atof(testLon);
   b4b48:	f007 f80a 	bl	bbb60 <__aeabi_d2f>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4b4c:	f006 fcce 	bl	bb4ec <__aeabi_f2d>
   b4b50:	e9cd 0100 	strd	r0, r1, [sp]
   b4b54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   b4b58:	4962      	ldr	r1, [pc, #392]	; (b4ce4 <_Z14processCommandPKchb+0x3f8>)
   b4b5a:	4650      	mov	r0, sl
   b4b5c:	f7ff fb90 	bl	b4280 <_ZN5Print8printlnfEPKcz>
                    Serial.println("##########################");
   b4b60:	f006 f88a 	bl	bac78 <_Z16_fetch_usbserialv>
   b4b64:	4649      	mov	r1, r9
   b4b66:	f005 fc9e 	bl	ba4a6 <_ZN5Print7printlnEPKc>
                    newBot = false;
   b4b6a:	2300      	movs	r3, #0
      operator++() _GLIBCXX_NOEXCEPT
   b4b6c:	3618      	adds	r6, #24
	return *this;
   b4b6e:	e787      	b.n	b4a80 <_Z14processCommandPKchb+0x194>
            if(newBot){
   b4b70:	2b00      	cmp	r3, #0
   b4b72:	d040      	beq.n	b4bf6 <_Z14processCommandPKchb+0x30a>
                Serial.println("Found a new water bot ID");
   b4b74:	f006 f880 	bl	bac78 <_Z16_fetch_usbserialv>
   b4b78:	495b      	ldr	r1, [pc, #364]	; (b4ce8 <_Z14processCommandPKchb+0x3fc>)
   b4b7a:	f005 fc94 	bl	ba4a6 <_ZN5Print7printlnEPKc>
                newWaterbot.BLEAvail = true;
   b4b7e:	2301      	movs	r3, #1
   b4b80:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
                sscanf(dataStr,"%u %u %f %f",&battpct,&statflags,&latRX,&lonRX);
   b4b84:	f107 0328 	add.w	r3, r7, #40	; 0x28
                newWaterbot.botNum = rxBotID;
   b4b88:	f887 4038 	strb.w	r4, [r7, #56]	; 0x38
                sscanf(dataStr,"%u %u %f %f",&battpct,&statflags,&latRX,&lonRX);
   b4b8c:	9301      	str	r3, [sp, #4]
   b4b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
   b4b92:	4956      	ldr	r1, [pc, #344]	; (b4cec <_Z14processCommandPKchb+0x400>)
   b4b94:	9300      	str	r3, [sp, #0]
   b4b96:	f107 021a 	add.w	r2, r7, #26
   b4b9a:	f107 031b 	add.w	r3, r7, #27
   b4b9e:	4628      	mov	r0, r5
   b4ba0:	f002 fc46 	bl	b7430 <sscanf>
                newWaterbot.battPercent = battpct;
   b4ba4:	7ebb      	ldrb	r3, [r7, #26]
   b4ba6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
                newWaterbot.LTEAvail = statflags & 1;
   b4baa:	7efb      	ldrb	r3, [r7, #27]
                WaterBots.push_back(newWaterbot);
   b4bac:	4844      	ldr	r0, [pc, #272]	; (b4cc0 <_Z14processCommandPKchb+0x3d4>)
                newWaterbot.LTEAvail = statflags & 1;
   b4bae:	f003 0201 	and.w	r2, r3, #1
   b4bb2:	f887 203b 	strb.w	r2, [r7, #59]	; 0x3b
                newWaterbot.XBeeAvail = (statflags >> 1) & 1;
   b4bb6:	f3c3 0240 	ubfx	r2, r3, #1, #1
   b4bba:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
                newWaterbot.BLEAvail = (statflags >> 2) & 1;
   b4bbe:	f3c3 0280 	ubfx	r2, r3, #2, #1
   b4bc2:	f887 203a 	strb.w	r2, [r7, #58]	; 0x3a
                newWaterbot.offloading = (statflags >> 3) & 1;
   b4bc6:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   b4bca:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
                newWaterbot.manualRC = (statflags >> 4) & 1;
   b4bce:	f3c3 1200 	ubfx	r2, r3, #4, #1
   b4bd2:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
                newWaterbot.lowBatt = (statflags >> 5) & 1;
   b4bd6:	f3c3 1240 	ubfx	r2, r3, #5, #1
                newWaterbot.dataRecording = (statflags >> 6) & 1;
   b4bda:	f3c3 1380 	ubfx	r3, r3, #6, #1
   b4bde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                newWaterbot.GPSLat = latRX;
   b4be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   b4be4:	647b      	str	r3, [r7, #68]	; 0x44
                WaterBots.push_back(newWaterbot);
   b4be6:	f107 0138 	add.w	r1, r7, #56	; 0x38
                newWaterbot.GPSLon = lonRX;
   b4bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
                newWaterbot.lowBatt = (statflags >> 5) & 1;
   b4bec:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
                newWaterbot.GPSLon = lonRX;
   b4bf0:	64bb      	str	r3, [r7, #72]	; 0x48
                WaterBots.push_back(newWaterbot);
   b4bf2:	f7ff fe63 	bl	b48bc <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
   b4bf6:	46c5      	mov	sp, r8
}
   b4bf8:	376c      	adds	r7, #108	; 0x6c
   b4bfa:	46bd      	mov	sp, r7
   b4bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(!strcmp(cmdStr,"nak")){  //Acknowledgement for XBee and BLE
   b4c00:	493b      	ldr	r1, [pc, #236]	; (b4cf0 <_Z14processCommandPKchb+0x404>)
   b4c02:	f107 0020 	add.w	r0, r7, #32
   b4c06:	f007 f8a4 	bl	bbd52 <strcmp>
   b4c0a:	b930      	cbnz	r0, b4c1a <_Z14processCommandPKchb+0x32e>
            strncpy(errCmdStr,dataStr,3);
   b4c0c:	4839      	ldr	r0, [pc, #228]	; (b4cf4 <_Z14processCommandPKchb+0x408>)
   b4c0e:	2203      	movs	r2, #3
   b4c10:	4629      	mov	r1, r5
   b4c12:	f007 f8ea 	bl	bbdea <strncpy>
            errCmdMode = mode;
   b4c16:	4b38      	ldr	r3, [pc, #224]	; (b4cf8 <_Z14processCommandPKchb+0x40c>)
   b4c18:	e711      	b.n	b4a3e <_Z14processCommandPKchb+0x152>
        else if(!strcmp(cmdStr,"hwd")){  //Hello World! - Received startup pairing message
   b4c1a:	4938      	ldr	r1, [pc, #224]	; (b4cfc <_Z14processCommandPKchb+0x410>)
   b4c1c:	f107 0020 	add.w	r0, r7, #32
   b4c20:	f007 f897 	bl	bbd52 <strcmp>
   b4c24:	2800      	cmp	r0, #0
   b4c26:	d171      	bne.n	b4d0c <_Z14processCommandPKchb+0x420>
      : _M_current(__i) { }
   b4c28:	4b25      	ldr	r3, [pc, #148]	; (b4cc0 <_Z14processCommandPKchb+0x3d4>)
   b4c2a:	e9d3 2000 	ldrd	r2, r0, [r3]
            bool newBot = true;
   b4c2e:	2301      	movs	r3, #1
            for(WaterBot w: WaterBots){
   b4c30:	4282      	cmp	r2, r0
   b4c32:	d005      	beq.n	b4c40 <_Z14processCommandPKchb+0x354>
                if(rxBotID == w.botNum) newBot = false;
   b4c34:	f812 1b18 	ldrb.w	r1, [r2], #24
   b4c38:	42a1      	cmp	r1, r4
   b4c3a:	bf08      	it	eq
   b4c3c:	2300      	moveq	r3, #0
	return *this;
   b4c3e:	e7f7      	b.n	b4c30 <_Z14processCommandPKchb+0x344>
            if(newBot){
   b4c40:	b1ab      	cbz	r3, b4c6e <_Z14processCommandPKchb+0x382>
                Serial.println("Found a new water bot ID");
   b4c42:	f006 f819 	bl	bac78 <_Z16_fetch_usbserialv>
   b4c46:	4928      	ldr	r1, [pc, #160]	; (b4ce8 <_Z14processCommandPKchb+0x3fc>)
   b4c48:	f005 fc2d 	bl	ba4a6 <_ZN5Print7printlnEPKc>
                if(mode == 1) newWaterbot.BLEAvail = true;
   b4c4c:	f1ba 0f01 	cmp.w	sl, #1
   b4c50:	d111      	bne.n	b4c76 <_Z14processCommandPKchb+0x38a>
   b4c52:	f887 a03a 	strb.w	sl, [r7, #58]	; 0x3a
                WaterBots.push_back(newWaterbot);
   b4c56:	481a      	ldr	r0, [pc, #104]	; (b4cc0 <_Z14processCommandPKchb+0x3d4>)
                newWaterbot.botNum = rxBotID;
   b4c58:	f887 4038 	strb.w	r4, [r7, #56]	; 0x38
                WaterBots.push_back(newWaterbot);
   b4c5c:	f107 0138 	add.w	r1, r7, #56	; 0x38
   b4c60:	f7ff fe2c 	bl	b48bc <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
                PairBots.push_back(newWaterbot);
   b4c64:	4826      	ldr	r0, [pc, #152]	; (b4d00 <_Z14processCommandPKchb+0x414>)
   b4c66:	f107 0138 	add.w	r1, r7, #56	; 0x38
   b4c6a:	f7ff fe27 	bl	b48bc <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
            botPairRx = true;
   b4c6e:	4b25      	ldr	r3, [pc, #148]	; (b4d04 <_Z14processCommandPKchb+0x418>)
   b4c70:	2201      	movs	r2, #1
   b4c72:	701a      	strb	r2, [r3, #0]
   b4c74:	e7bf      	b.n	b4bf6 <_Z14processCommandPKchb+0x30a>
                else if(mode == 2) newWaterbot.XBeeAvail = true;
   b4c76:	f1ba 0f02 	cmp.w	sl, #2
   b4c7a:	f04f 0301 	mov.w	r3, #1
   b4c7e:	d102      	bne.n	b4c86 <_Z14processCommandPKchb+0x39a>
   b4c80:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
   b4c84:	e7e7      	b.n	b4c56 <_Z14processCommandPKchb+0x36a>
                else if(mode == 3) newWaterbot.LTEAvail = true;
   b4c86:	f1ba 0f03 	cmp.w	sl, #3
   b4c8a:	bf08      	it	eq
   b4c8c:	f887 303b 	strbeq.w	r3, [r7, #59]	; 0x3b
   b4c90:	e7e1      	b.n	b4c56 <_Z14processCommandPKchb+0x36a>
   b4c92:	bf00      	nop
   b4c94:	000bdedf 	.word	0x000bdedf
   b4c98:	2003de38 	.word	0x2003de38
   b4c9c:	000bdef4 	.word	0x000bdef4
   b4ca0:	2003dde1 	.word	0x2003dde1
   b4ca4:	000bdf11 	.word	0x000bdf11
   b4ca8:	000bdf3d 	.word	0x000bdf3d
   b4cac:	000bdf5e 	.word	0x000bdf5e
   b4cb0:	2003ddcd 	.word	0x2003ddcd
   b4cb4:	2003dde0 	.word	0x2003dde0
   b4cb8:	000bdf6a 	.word	0x000bdf6a
   b4cbc:	000bdf6e 	.word	0x000bdf6e
   b4cc0:	2003dd34 	.word	0x2003dd34
   b4cc4:	000bdf72 	.word	0x000bdf72
   b4cc8:	000bdf7e 	.word	0x000bdf7e
   b4ccc:	000bdfa8 	.word	0x000bdfa8
   b4cd0:	000bdfc3 	.word	0x000bdfc3
   b4cd4:	000bdfdf 	.word	0x000bdfdf
   b4cd8:	000bdffb 	.word	0x000bdffb
   b4cdc:	000be016 	.word	0x000be016
   b4ce0:	000be034 	.word	0x000be034
   b4ce4:	000be04f 	.word	0x000be04f
   b4ce8:	000be05f 	.word	0x000be05f
   b4cec:	000be078 	.word	0x000be078
   b4cf0:	000be084 	.word	0x000be084
   b4cf4:	2003dddd 	.word	0x2003dddd
   b4cf8:	2003dddc 	.word	0x2003dddc
   b4cfc:	000be088 	.word	0x000be088
   b4d00:	2003dd1c 	.word	0x2003dd1c
   b4d04:	2003ddcc 	.word	0x2003ddcc
   b4d08:	000bdf8d 	.word	0x000bdf8d
        else if(!strcmp(cmdStr,"pts")){
   b4d0c:	4925      	ldr	r1, [pc, #148]	; (b4da4 <_Z14processCommandPKchb+0x4b8>)
   b4d0e:	f107 0020 	add.w	r0, r7, #32
   b4d12:	f007 f81e 	bl	bbd52 <strcmp>
   b4d16:	2800      	cmp	r0, #0
   b4d18:	f47f af6d 	bne.w	b4bf6 <_Z14processCommandPKchb+0x30a>
            Serial.println(dataStr);
   b4d1c:	f005 ffac 	bl	bac78 <_Z16_fetch_usbserialv>
   b4d20:	4629      	mov	r1, r5
   b4d22:	f005 fbc0 	bl	ba4a6 <_ZN5Print7printlnEPKc>
            myFile.open("RawWrite.txt", O_RDWR | O_CREAT | O_AT_END);
   b4d26:	f244 2202 	movw	r2, #16898	; 0x4202
   b4d2a:	491f      	ldr	r1, [pc, #124]	; (b4da8 <_Z14processCommandPKchb+0x4bc>)
   b4d2c:	481f      	ldr	r0, [pc, #124]	; (b4dac <_Z14processCommandPKchb+0x4c0>)
   b4d2e:	f7ff fb37 	bl	b43a0 <_ZN7FatFile4openEPKci>
            String modeStr[3] = {"LTE", "XBee", "Bluetooth"};
   b4d32:	491f      	ldr	r1, [pc, #124]	; (b4db0 <_Z14processCommandPKchb+0x4c4>)
   b4d34:	f107 0038 	add.w	r0, r7, #56	; 0x38
   b4d38:	f005 fd51 	bl	ba7de <_ZN6StringC1EPK19__FlashStringHelper>
   b4d3c:	491d      	ldr	r1, [pc, #116]	; (b4db4 <_Z14processCommandPKchb+0x4c8>)
   b4d3e:	f107 0048 	add.w	r0, r7, #72	; 0x48
   b4d42:	f005 fd4c 	bl	ba7de <_ZN6StringC1EPK19__FlashStringHelper>
   b4d46:	491c      	ldr	r1, [pc, #112]	; (b4db8 <_Z14processCommandPKchb+0x4cc>)
   b4d48:	f107 0058 	add.w	r0, r7, #88	; 0x58
   b4d4c:	f005 fd47 	bl	ba7de <_ZN6StringC1EPK19__FlashStringHelper>
            myFile.printf("New string from %s: ", modeStr[mode]);
   b4d50:	f107 0338 	add.w	r3, r7, #56	; 0x38
   b4d54:	eb03 110a 	add.w	r1, r3, sl, lsl #4
   b4d58:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4d5c:	f005 fd8a 	bl	ba874 <_ZN6StringC1ERKS_>
   b4d60:	f107 0228 	add.w	r2, r7, #40	; 0x28
   b4d64:	4915      	ldr	r1, [pc, #84]	; (b4dbc <_Z14processCommandPKchb+0x4d0>)
   b4d66:	4816      	ldr	r0, [pc, #88]	; (b4dc0 <_Z14processCommandPKchb+0x4d4>)
   b4d68:	f7ff fa52 	bl	b4210 <_ZN5Print6printfEPKcz>
   b4d6c:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4d70:	f005 fcea 	bl	ba748 <_ZN6StringD1Ev>
            myFile.println(dataStr);
   b4d74:	4629      	mov	r1, r5
   b4d76:	4812      	ldr	r0, [pc, #72]	; (b4dc0 <_Z14processCommandPKchb+0x4d4>)
   b4d78:	f005 fb95 	bl	ba4a6 <_ZN5Print7printlnEPKc>
            delay(5);
   b4d7c:	2005      	movs	r0, #5
   b4d7e:	f002 fb9f 	bl	b74c0 <delay>
            myFile.close();
   b4d82:	480a      	ldr	r0, [pc, #40]	; (b4dac <_Z14processCommandPKchb+0x4c0>)
   b4d84:	f000 feb4 	bl	b5af0 <_ZN7FatFile5closeEv>
            String modeStr[3] = {"LTE", "XBee", "Bluetooth"};
   b4d88:	f107 0058 	add.w	r0, r7, #88	; 0x58
   b4d8c:	f005 fcdc 	bl	ba748 <_ZN6StringD1Ev>
   b4d90:	f107 0048 	add.w	r0, r7, #72	; 0x48
   b4d94:	f005 fcd8 	bl	ba748 <_ZN6StringD1Ev>
   b4d98:	f107 0038 	add.w	r0, r7, #56	; 0x38
   b4d9c:	f005 fcd4 	bl	ba748 <_ZN6StringD1Ev>
        if(sendAck){    //Transmit out acknowledgement if needed
   b4da0:	e729      	b.n	b4bf6 <_Z14processCommandPKchb+0x30a>
   b4da2:	bf00      	nop
   b4da4:	000be08c 	.word	0x000be08c
   b4da8:	000be090 	.word	0x000be090
   b4dac:	2003de80 	.word	0x2003de80
   b4db0:	000be09d 	.word	0x000be09d
   b4db4:	000be0a1 	.word	0x000be0a1
   b4db8:	000be0a6 	.word	0x000be0a6
   b4dbc:	000be0b0 	.word	0x000be0b0
   b4dc0:	2003de70 	.word	0x2003de70

000b4dc4 <_Z14dataLTEHandlerPKcS0_>:
void dataLTEHandler(const char *event, const char *data){
   b4dc4:	b510      	push	{r4, lr}
   b4dc6:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b4dc8:	2200      	movs	r2, #0
   b4dca:	2104      	movs	r1, #4
   b4dcc:	4620      	mov	r0, r4
   b4dce:	f7ff fd8d 	bl	b48ec <_Z14processCommandPKchb>
    if(logMessages){
   b4dd2:	4b0b      	ldr	r3, [pc, #44]	; (b4e00 <_Z14dataLTEHandlerPKcS0_+0x3c>)
   b4dd4:	781b      	ldrb	r3, [r3, #0]
   b4dd6:	b193      	cbz	r3, b4dfe <_Z14dataLTEHandlerPKcS0_+0x3a>
   b4dd8:	480a      	ldr	r0, [pc, #40]	; (b4e04 <_Z14dataLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4dda:	7c03      	ldrb	r3, [r0, #16]
   b4ddc:	b92b      	cbnz	r3, b4dea <_Z14dataLTEHandlerPKcS0_+0x26>
   b4dde:	490a      	ldr	r1, [pc, #40]	; (b4e08 <_Z14dataLTEHandlerPKcS0_+0x44>)
   b4de0:	f244 2202 	movw	r2, #16898	; 0x4202
   b4de4:	3010      	adds	r0, #16
   b4de6:	f7ff fadb 	bl	b43a0 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b4dea:	4622      	mov	r2, r4
   b4dec:	4907      	ldr	r1, [pc, #28]	; (b4e0c <_Z14dataLTEHandlerPKcS0_+0x48>)
   b4dee:	4805      	ldr	r0, [pc, #20]	; (b4e04 <_Z14dataLTEHandlerPKcS0_+0x40>)
   b4df0:	f7ff fa46 	bl	b4280 <_ZN5Print8printlnfEPKcz>
}
   b4df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b4df8:	4805      	ldr	r0, [pc, #20]	; (b4e10 <_Z14dataLTEHandlerPKcS0_+0x4c>)
   b4dfa:	f000 be79 	b.w	b5af0 <_ZN7FatFile5closeEv>
}
   b4dfe:	bd10      	pop	{r4, pc}
   b4e00:	2003de6c 	.word	0x2003de6c
   b4e04:	2003de38 	.word	0x2003de38
   b4e08:	2003dde1 	.word	0x2003dde1
   b4e0c:	000be0c5 	.word	0x000be0c5
   b4e10:	2003de48 	.word	0x2003de48

000b4e14 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4e14:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b4e16:	f101 0308 	add.w	r3, r1, #8
   b4e1a:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4e1e:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b4e20:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4e24:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b4e26:	460a      	mov	r2, r1
   b4e28:	4601      	mov	r1, r0
   b4e2a:	4668      	mov	r0, sp
   b4e2c:	f006 ff23 	bl	bbc76 <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4e30:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b4e34:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4e36:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b4e3a:	b113      	cbz	r3, b4e42 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b4e3c:	2300      	movs	r3, #0
   b4e3e:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.print("New BT Command: ");
   b4e42:	f005 ff19 	bl	bac78 <_Z16_fetch_usbserialv>
   b4e46:	4911      	ldr	r1, [pc, #68]	; (b4e8c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>)
   b4e48:	f005 fb1a 	bl	ba480 <_ZN5Print5printEPKc>
    Serial.println(btBuf);
   b4e4c:	f005 ff14 	bl	bac78 <_Z16_fetch_usbserialv>
   b4e50:	4629      	mov	r1, r5
   b4e52:	f005 fb28 	bl	ba4a6 <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b4e56:	2201      	movs	r2, #1
   b4e58:	4611      	mov	r1, r2
   b4e5a:	4628      	mov	r0, r5
   b4e5c:	f7ff fd46 	bl	b48ec <_Z14processCommandPKchb>
    if(logMessages){
   b4e60:	4b0b      	ldr	r3, [pc, #44]	; (b4e90 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   b4e62:	781b      	ldrb	r3, [r3, #0]
   b4e64:	b183      	cbz	r3, b4e88 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>
   b4e66:	480b      	ldr	r0, [pc, #44]	; (b4e94 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4e68:	7c03      	ldrb	r3, [r0, #16]
   b4e6a:	b92b      	cbnz	r3, b4e78 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>
   b4e6c:	490a      	ldr	r1, [pc, #40]	; (b4e98 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84>)
   b4e6e:	f244 2202 	movw	r2, #16898	; 0x4202
   b4e72:	3010      	adds	r0, #16
   b4e74:	f7ff fa94 	bl	b43a0 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b4e78:	4908      	ldr	r1, [pc, #32]	; (b4e9c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   b4e7a:	4806      	ldr	r0, [pc, #24]	; (b4e94 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
   b4e7c:	462a      	mov	r2, r5
   b4e7e:	f7ff f9ff 	bl	b4280 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4e82:	4807      	ldr	r0, [pc, #28]	; (b4ea0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b4e84:	f000 fe34 	bl	b5af0 <_ZN7FatFile5closeEv>
}
   b4e88:	46bd      	mov	sp, r7
   b4e8a:	bdb0      	pop	{r4, r5, r7, pc}
   b4e8c:	000be0e5 	.word	0x000be0e5
   b4e90:	2003de6c 	.word	0x2003de6c
   b4e94:	2003de38 	.word	0x2003de38
   b4e98:	2003dde1 	.word	0x2003dde1
   b4e9c:	000be0f6 	.word	0x000be0f6
   b4ea0:	2003de48 	.word	0x2003de48

000b4ea4 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b4ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b4ea8:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b4f98 <_Z11XBeeHandlerv+0xf4>
        if(logMessages){
   b4eac:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b4f9c <_Z11XBeeHandlerv+0xf8>
   b4eb0:	4d35      	ldr	r5, [pc, #212]	; (b4f88 <_Z11XBeeHandlerv+0xe4>)
void XBeeHandler(){  
   b4eb2:	b089      	sub	sp, #36	; 0x24
   b4eb4:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b4eb6:	f006 f877 	bl	bafa8 <_Z22__fetch_global_Serial1v>
   b4eba:	6803      	ldr	r3, [r0, #0]
   b4ebc:	691b      	ldr	r3, [r3, #16]
   b4ebe:	4798      	blx	r3
   b4ec0:	2800      	cmp	r0, #0
   b4ec2:	d05c      	beq.n	b4f7e <_Z11XBeeHandlerv+0xda>
        String data = Serial1.readStringUntil('\n');
   b4ec4:	f006 f870 	bl	bafa8 <_Z22__fetch_global_Serial1v>
   b4ec8:	220a      	movs	r2, #10
   b4eca:	4601      	mov	r1, r0
   b4ecc:	4638      	mov	r0, r7
   b4ece:	f005 fc23 	bl	ba718 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b4ed2:	68bb      	ldr	r3, [r7, #8]
   b4ed4:	3307      	adds	r3, #7
   b4ed6:	f023 0307 	bic.w	r3, r3, #7
    }
   b4eda:	466e      	mov	r6, sp
        char buffer[data.length()];
   b4edc:	ebad 0d03 	sub.w	sp, sp, r3
   b4ee0:	46ea      	mov	sl, sp
   b4ee2:	2300      	movs	r3, #0
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b4ee4:	68b9      	ldr	r1, [r7, #8]
   b4ee6:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b4eea:	458b      	cmp	fp, r1
   b4eec:	f103 0401 	add.w	r4, r3, #1
   b4ef0:	d207      	bcs.n	b4f02 <_Z11XBeeHandlerv+0x5e>
   b4ef2:	4659      	mov	r1, fp
   b4ef4:	4638      	mov	r0, r7
   b4ef6:	f005 fd29 	bl	ba94c <_ZNK6String6charAtEj>
   b4efa:	4623      	mov	r3, r4
   b4efc:	f80a 000b 	strb.w	r0, [sl, fp]
   b4f00:	e7f0      	b.n	b4ee4 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b4f02:	2901      	cmp	r1, #1
   b4f04:	d90a      	bls.n	b4f1c <_Z11XBeeHandlerv+0x78>
   b4f06:	3901      	subs	r1, #1
   b4f08:	4638      	mov	r0, r7
   b4f0a:	f005 fd1f 	bl	ba94c <_ZNK6String6charAtEj>
   b4f0e:	280d      	cmp	r0, #13
   b4f10:	bf01      	itttt	eq
   b4f12:	68bb      	ldreq	r3, [r7, #8]
   b4f14:	4453      	addeq	r3, sl
   b4f16:	2200      	moveq	r2, #0
   b4f18:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        processCommand(buffer,2,true);
   b4f1c:	2201      	movs	r2, #1
   b4f1e:	2102      	movs	r1, #2
   b4f20:	4650      	mov	r0, sl
   b4f22:	f7ff fce3 	bl	b48ec <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   b4f26:	f005 fea7 	bl	bac78 <_Z16_fetch_usbserialv>
   b4f2a:	4641      	mov	r1, r8
   b4f2c:	f005 fabb 	bl	ba4a6 <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b4f30:	f005 fea2 	bl	bac78 <_Z16_fetch_usbserialv>
   b4f34:	6839      	ldr	r1, [r7, #0]
   b4f36:	f005 fab6 	bl	ba4a6 <_ZN5Print7printlnEPKc>
        if(logMessages){
   b4f3a:	f899 3000 	ldrb.w	r3, [r9]
   b4f3e:	b1cb      	cbz	r3, b4f74 <_Z11XBeeHandlerv+0xd0>
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4f40:	7c2b      	ldrb	r3, [r5, #16]
   b4f42:	b92b      	cbnz	r3, b4f50 <_Z11XBeeHandlerv+0xac>
   b4f44:	4911      	ldr	r1, [pc, #68]	; (b4f8c <_Z11XBeeHandlerv+0xe8>)
   b4f46:	4812      	ldr	r0, [pc, #72]	; (b4f90 <_Z11XBeeHandlerv+0xec>)
   b4f48:	f244 2202 	movw	r2, #16898	; 0x4202
   b4f4c:	f7ff fa28 	bl	b43a0 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b4f50:	4639      	mov	r1, r7
   b4f52:	f107 0010 	add.w	r0, r7, #16
   b4f56:	f005 fc8d 	bl	ba874 <_ZN6StringC1ERKS_>
   b4f5a:	490e      	ldr	r1, [pc, #56]	; (b4f94 <_Z11XBeeHandlerv+0xf0>)
   b4f5c:	f107 0210 	add.w	r2, r7, #16
   b4f60:	4628      	mov	r0, r5
   b4f62:	f7ff f98d 	bl	b4280 <_ZN5Print8printlnfEPKcz>
   b4f66:	f107 0010 	add.w	r0, r7, #16
   b4f6a:	f005 fbed 	bl	ba748 <_ZN6StringD1Ev>
            logFile.close();
   b4f6e:	4808      	ldr	r0, [pc, #32]	; (b4f90 <_Z11XBeeHandlerv+0xec>)
   b4f70:	f000 fdbe 	bl	b5af0 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b4f74:	4638      	mov	r0, r7
   b4f76:	f005 fbe7 	bl	ba748 <_ZN6StringD1Ev>
   b4f7a:	46b5      	mov	sp, r6
    while(Serial1.available()){
   b4f7c:	e79b      	b.n	b4eb6 <_Z11XBeeHandlerv+0x12>
}
   b4f7e:	3724      	adds	r7, #36	; 0x24
   b4f80:	46bd      	mov	sp, r7
   b4f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4f86:	bf00      	nop
   b4f88:	2003de38 	.word	0x2003de38
   b4f8c:	2003dde1 	.word	0x2003dde1
   b4f90:	2003de48 	.word	0x2003de48
   b4f94:	000be128 	.word	0x000be128
   b4f98:	000be116 	.word	0x000be116
   b4f9c:	2003de6c 	.word	0x2003de6c

000b4fa0 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b4fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4fa4:	e9d0 8900 	ldrd	r8, r9, [r0]
   b4fa8:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
   b4faa:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4fae:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
   b4fb2:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   b4fb6:	4607      	mov	r7, r0
   b4fb8:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4fba:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   b4fbe:	d102      	bne.n	b4fc6 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b4fc0:	4820      	ldr	r0, [pc, #128]	; (b5044 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
   b4fc2:	f006 f817 	bl	baff4 <_ZSt20__throw_length_errorPKc>
   b4fc6:	2c01      	cmp	r4, #1
   b4fc8:	4622      	mov	r2, r4
   b4fca:	bf38      	it	cc
   b4fcc:	2201      	movcc	r2, #1
   b4fce:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b4fd0:	eba1 0508 	sub.w	r5, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4fd4:	d231      	bcs.n	b503a <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4fd6:	b394      	cbz	r4, b503e <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
   b4fd8:	429c      	cmp	r4, r3
   b4fda:	bf28      	it	cs
   b4fdc:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4fde:	00e0      	lsls	r0, r4, #3
   b4fe0:	f7ff f859 	bl	b4096 <_Znwj>
   b4fe4:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4fe6:	1973      	adds	r3, r6, r5
   b4fe8:	bf1c      	itt	ne
   b4fea:	e9db 0100 	ldrdne	r0, r1, [fp]
   b4fee:	e9c3 0100 	strdne	r0, r1, [r3]
      if (__count > 0)
   b4ff2:	2d00      	cmp	r5, #0
   b4ff4:	dd04      	ble.n	b5000 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x60>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b4ff6:	462a      	mov	r2, r5
   b4ff8:	4641      	mov	r1, r8
   b4ffa:	4630      	mov	r0, r6
   b4ffc:	f006 fe49 	bl	bbc92 <memmove>
      ptrdiff_t __count = __last - __first;
   b5000:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
   b5004:	3508      	adds	r5, #8
      if (__count > 0)
   b5006:	f1b9 0f00 	cmp.w	r9, #0
   b500a:	4435      	add	r5, r6
   b500c:	dd04      	ble.n	b5018 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b500e:	464a      	mov	r2, r9
   b5010:	4651      	mov	r1, sl
   b5012:	4628      	mov	r0, r5
   b5014:	f006 fe2f 	bl	bbc76 <memcpy>
      return __result + __count;
   b5018:	444d      	add	r5, r9
	if (__p)
   b501a:	f1b8 0f00 	cmp.w	r8, #0
   b501e:	d005      	beq.n	b502c <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
   b5020:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b5022:	4640      	mov	r0, r8
   b5024:	eba1 0108 	sub.w	r1, r1, r8
   b5028:	f7ff f839 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b502c:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   b5030:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5034:	60bc      	str	r4, [r7, #8]
    }
   b5036:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b503a:	461c      	mov	r4, r3
   b503c:	e7cf      	b.n	b4fde <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b503e:	4626      	mov	r6, r4
   b5040:	e7d1      	b.n	b4fe6 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
   b5042:	bf00      	nop
   b5044:	000bdec5 	.word	0x000bdec5

000b5048 <_Z7BLEScani>:
void BLEScan(int BotNumber){
   b5048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b504c:	b099      	sub	sp, #100	; 0x64
   b504e:	4605      	mov	r5, r0
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   b5050:	f002 ff50 	bl	b7ef4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5054:	4960      	ldr	r1, [pc, #384]	; (b51d8 <_Z7BLEScani+0x190>)
   b5056:	2214      	movs	r2, #20
   b5058:	f003 f826 	bl	b80a8 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
	if (count > 0) {
   b505c:	4606      	mov	r6, r0
   b505e:	2800      	cmp	r0, #0
   b5060:	f000 80b6 	beq.w	b51d0 <_Z7BLEScani+0x188>
    const BleAddress& address() const {
        return address_;
    }

    const BleAdvertisingData& advertisingData() const {
        return advertisingData_;
   b5064:	4f5c      	ldr	r7, [pc, #368]	; (b51d8 <_Z7BLEScani+0x190>)
            if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   b5066:	f8df a1a8 	ldr.w	sl, [pc, #424]	; b5210 <_Z7BLEScani+0x1c8>
		for (uint8_t ii = 0; ii < count; ii++) {
   b506a:	2400      	movs	r4, #0
            scanResults->advertisingData().customData(BLECustomData,CUSTOM_DATA_LEN);
   b506c:	f107 0908 	add.w	r9, r7, #8
			BleUuid foundServiceUuid;
   b5070:	eb04 0bc4 	add.w	fp, r4, r4, lsl #3
   b5074:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   b5078:	f10b 0808 	add.w	r8, fp, #8
   b507c:	a805      	add	r0, sp, #20
   b507e:	44b8      	add	r8, r7
   b5080:	f002 fb9c 	bl	b77bc <_ZN8particle7BleUuidC1Ev>
			size_t svcCount = scanResults[ii].advertisingData().serviceUUID(&foundServiceUuid, 1);
   b5084:	2201      	movs	r2, #1
   b5086:	a905      	add	r1, sp, #20
   b5088:	4640      	mov	r0, r8
   b508a:	f003 fed5 	bl	b8e38 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
            scanResults->advertisingData().customData(BLECustomData,CUSTOM_DATA_LEN);
   b508e:	2208      	movs	r2, #8
			size_t svcCount = scanResults[ii].advertisingData().serviceUUID(&foundServiceUuid, 1);
   b5090:	9001      	str	r0, [sp, #4]
            scanResults->advertisingData().customData(BLECustomData,CUSTOM_DATA_LEN);
   b5092:	a903      	add	r1, sp, #12
   b5094:	4648      	mov	r0, r9
   b5096:	f002 fd49 	bl	b7b2c <_ZNK8particle18BleAdvertisingData10customDataEPhj>
            if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   b509a:	9b01      	ldr	r3, [sp, #4]
   b509c:	b32b      	cbz	r3, b50ea <_Z7BLEScani+0xa2>
   b509e:	4651      	mov	r1, sl
   b50a0:	a805      	add	r0, sp, #20
   b50a2:	f002 fbe6 	bl	b7872 <_ZNK8particle7BleUuideqERKS0_>
   b50a6:	b300      	cbz	r0, b50ea <_Z7BLEScani+0xa2>
                if(BotNumber == -2){
   b50a8:	1caa      	adds	r2, r5, #2
   b50aa:	d129      	bne.n	b5100 <_Z7BLEScani+0xb8>
      : _M_current(__i) { }
   b50ac:	4a4b      	ldr	r2, [pc, #300]	; (b51dc <_Z7BLEScani+0x194>)
                        if(BLECustomData[0] == p.botNum){
   b50ae:	f89d 100c 	ldrb.w	r1, [sp, #12]
   b50b2:	f8d2 e004 	ldr.w	lr, [r2, #4]
   b50b6:	6813      	ldr	r3, [r2, #0]
                    for(PairBot p: BLEPair){
   b50b8:	4573      	cmp	r3, lr
   b50ba:	d005      	beq.n	b50c8 <_Z7BLEScani+0x80>
                        if(BLECustomData[0] == p.botNum){
   b50bc:	f813 cb08 	ldrb.w	ip, [r3], #8
                            newBot = false;
   b50c0:	458c      	cmp	ip, r1
   b50c2:	bf08      	it	eq
   b50c4:	2000      	moveq	r0, #0
	return *this;
   b50c6:	e7f7      	b.n	b50b8 <_Z7BLEScani+0x70>
                    if(newBot){
   b50c8:	b178      	cbz	r0, b50ea <_Z7BLEScani+0xa2>
                        NewBot.botNum = BLECustomData[0];
   b50ca:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b50ce:	6891      	ldr	r1, [r2, #8]
                        NewBot.rssi = scanResults->rssi();
   b50d0:	f997 0020 	ldrsb.w	r0, [r7, #32]
   b50d4:	9011      	str	r0, [sp, #68]	; 0x44
   b50d6:	428b      	cmp	r3, r1
   b50d8:	d00c      	beq.n	b50f4 <_Z7BLEScani+0xac>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b50da:	b11b      	cbz	r3, b50e4 <_Z7BLEScani+0x9c>
   b50dc:	4601      	mov	r1, r0
   b50de:	9810      	ldr	r0, [sp, #64]	; 0x40
   b50e0:	e883 0003 	stmia.w	r3, {r0, r1}
	    ++this->_M_impl._M_finish;
   b50e4:	6853      	ldr	r3, [r2, #4]
   b50e6:	3308      	adds	r3, #8
   b50e8:	6053      	str	r3, [r2, #4]
		for (uint8_t ii = 0; ii < count; ii++) {
   b50ea:	3401      	adds	r4, #1
   b50ec:	b2e4      	uxtb	r4, r4
   b50ee:	42b4      	cmp	r4, r6
   b50f0:	d3be      	bcc.n	b5070 <_Z7BLEScani+0x28>
   b50f2:	e06d      	b.n	b51d0 <_Z7BLEScani+0x188>
	  _M_realloc_insert(end(), __x);
   b50f4:	4839      	ldr	r0, [pc, #228]	; (b51dc <_Z7BLEScani+0x194>)
   b50f6:	aa10      	add	r2, sp, #64	; 0x40
   b50f8:	4619      	mov	r1, r3
   b50fa:	f7ff ff51 	bl	b4fa0 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   b50fe:	e7f4      	b.n	b50ea <_Z7BLEScani+0xa2>
                if(BotNumber == -1 || BotNumber == BLECustomData[0]){   //Check if a particular bot number was specified
   b5100:	1c6b      	adds	r3, r5, #1
   b5102:	d003      	beq.n	b510c <_Z7BLEScani+0xc4>
   b5104:	f89d 300c 	ldrb.w	r3, [sp, #12]
   b5108:	42ab      	cmp	r3, r5
   b510a:	d1ee      	bne.n	b50ea <_Z7BLEScani+0xa2>
                    peer = BLE.connect(scanResults[ii].address());
   b510c:	f002 fef2 	bl	b7ef4 <_ZN8particle14BleLocalDevice11getInstanceEv>
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5110:	4d33      	ldr	r5, [pc, #204]	; (b51e0 <_Z7BLEScani+0x198>)
   b5112:	4601      	mov	r1, r0
   b5114:	2301      	movs	r3, #1
   b5116:	eb07 020b 	add.w	r2, r7, fp
   b511a:	a810      	add	r0, sp, #64	; 0x40
   b511c:	f004 fac4 	bl	b96a8 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   b5120:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b5122:	9c11      	ldr	r4, [sp, #68]	; 0x44
   b5124:	602b      	str	r3, [r5, #0]
	if (__tmp != _M_pi)
   b5126:	686b      	ldr	r3, [r5, #4]
   b5128:	429c      	cmp	r4, r3
   b512a:	d008      	beq.n	b513e <_Z7BLEScani+0xf6>
	    if (__tmp != 0)
   b512c:	b114      	cbz	r4, b5134 <_Z7BLEScani+0xec>
    { ++_M_use_count; }
   b512e:	6863      	ldr	r3, [r4, #4]
   b5130:	3301      	adds	r3, #1
   b5132:	6063      	str	r3, [r4, #4]
	    if (_M_pi != 0)
   b5134:	6868      	ldr	r0, [r5, #4]
   b5136:	b108      	cbz	r0, b513c <_Z7BLEScani+0xf4>
	      _M_pi->_M_release();
   b5138:	f7ff f8ee 	bl	b4318 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b513c:	606c      	str	r4, [r5, #4]
   b513e:	a810      	add	r0, sp, #64	; 0x40
   b5140:	f003 f829 	bl	b8196 <_ZN8particle13BlePeerDeviceD1Ev>
				    if (peer.connected()) {
   b5144:	4826      	ldr	r0, [pc, #152]	; (b51e0 <_Z7BLEScani+0x198>)
   b5146:	f002 fe47 	bl	b7dd8 <_ZNK8particle13BlePeerDevice9connectedEv>
   b514a:	4604      	mov	r4, r0
   b514c:	2800      	cmp	r0, #0
   b514e:	d03f      	beq.n	b51d0 <_Z7BLEScani+0x188>
                        meshPair = false;
   b5150:	4b24      	ldr	r3, [pc, #144]	; (b51e4 <_Z7BLEScani+0x19c>)
      : _M_current(__i) { }
   b5152:	4d25      	ldr	r5, [pc, #148]	; (b51e8 <_Z7BLEScani+0x1a0>)
   b5154:	2200      	movs	r2, #0
   b5156:	701a      	strb	r2, [r3, #0]
                        scanResults[ii].advertisingData().customData(bufName, BLE_MAX_ADV_DATA_LEN);
   b5158:	a910      	add	r1, sp, #64	; 0x40
   b515a:	221f      	movs	r2, #31
   b515c:	4640      	mov	r0, r8
   b515e:	f002 fce5 	bl	b7b2c <_ZNK8particle18BleAdvertisingData10customDataEPhj>
					    peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   b5162:	4a22      	ldr	r2, [pc, #136]	; (b51ec <_Z7BLEScani+0x1a4>)
   b5164:	4922      	ldr	r1, [pc, #136]	; (b51f0 <_Z7BLEScani+0x1a8>)
   b5166:	481e      	ldr	r0, [pc, #120]	; (b51e0 <_Z7BLEScani+0x198>)
   b5168:	f003 ff32 	bl	b8fd0 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
					    peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
   b516c:	4a21      	ldr	r2, [pc, #132]	; (b51f4 <_Z7BLEScani+0x1ac>)
   b516e:	4922      	ldr	r1, [pc, #136]	; (b51f8 <_Z7BLEScani+0x1b0>)
   b5170:	481b      	ldr	r0, [pc, #108]	; (b51e0 <_Z7BLEScani+0x198>)
   b5172:	f003 ff2d 	bl	b8fd0 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        peer.getCharacteristicByUUID(peerOffloadCharacteristic, offldUuid);
   b5176:	4a21      	ldr	r2, [pc, #132]	; (b51fc <_Z7BLEScani+0x1b4>)
   b5178:	4921      	ldr	r1, [pc, #132]	; (b5200 <_Z7BLEScani+0x1b8>)
   b517a:	4819      	ldr	r0, [pc, #100]	; (b51e0 <_Z7BLEScani+0x198>)
   b517c:	f003 ff28 	bl	b8fd0 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
						Serial.printlnf("Connected to Bot %d",bufName[0]);
   b5180:	f005 fd7a 	bl	bac78 <_Z16_fetch_usbserialv>
   b5184:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   b5188:	491e      	ldr	r1, [pc, #120]	; (b5204 <_Z7BLEScani+0x1bc>)
   b518a:	f7ff f879 	bl	b4280 <_ZN5Print8printlnfEPKcz>
   b518e:	6868      	ldr	r0, [r5, #4]
                            if(bufName[0] == w.botNum){
   b5190:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   b5194:	682b      	ldr	r3, [r5, #0]
                        for(WaterBot w: WaterBots){
   b5196:	4298      	cmp	r0, r3
   b5198:	d005      	beq.n	b51a6 <_Z7BLEScani+0x15e>
                            if(bufName[0] == w.botNum){
   b519a:	f813 1b18 	ldrb.w	r1, [r3], #24
                                newBot = false;
   b519e:	4291      	cmp	r1, r2
   b51a0:	bf08      	it	eq
   b51a2:	2400      	moveq	r4, #0
	return *this;
   b51a4:	e7f7      	b.n	b5196 <_Z7BLEScani+0x14e>
                        if(newBot){
   b51a6:	b19c      	cbz	r4, b51d0 <_Z7BLEScani+0x188>
                            Serial.println("Found a new water bot ID");
   b51a8:	f005 fd66 	bl	bac78 <_Z16_fetch_usbserialv>
   b51ac:	4916      	ldr	r1, [pc, #88]	; (b5208 <_Z7BLEScani+0x1c0>)
   b51ae:	f005 f97a 	bl	ba4a6 <_ZN5Print7printlnEPKc>
                            newWaterbot.BLEAvail = true;
   b51b2:	2301      	movs	r3, #1
   b51b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
                            WaterBots.push_back(newWaterbot);
   b51b8:	480b      	ldr	r0, [pc, #44]	; (b51e8 <_Z7BLEScani+0x1a0>)
                            newWaterbot.botNum = bufName[0];
   b51ba:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   b51be:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                            WaterBots.push_back(newWaterbot);
   b51c2:	a90a      	add	r1, sp, #40	; 0x28
   b51c4:	f7ff fb7a 	bl	b48bc <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      { return __normal_iterator(_M_current - __n); }
   b51c8:	686b      	ldr	r3, [r5, #4]
                            BLEBot = &WaterBots.back();
   b51ca:	4a10      	ldr	r2, [pc, #64]	; (b520c <_Z7BLEScani+0x1c4>)
   b51cc:	3b18      	subs	r3, #24
   b51ce:	6013      	str	r3, [r2, #0]
}
   b51d0:	b019      	add	sp, #100	; 0x64
   b51d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b51d6:	bf00      	nop
   b51d8:	2003dee8 	.word	0x2003dee8
   b51dc:	2003dd08 	.word	0x2003dd08
   b51e0:	2003dec4 	.word	0x2003dec4
   b51e4:	2003de6d 	.word	0x2003de6d
   b51e8:	2003dd34 	.word	0x2003dd34
   b51ec:	2003dd68 	.word	0x2003dd68
   b51f0:	2003dedc 	.word	0x2003dedc
   b51f4:	2003dd54 	.word	0x2003dd54
   b51f8:	2003ded4 	.word	0x2003ded4
   b51fc:	2003dd80 	.word	0x2003dd80
   b5200:	2003decc 	.word	0x2003decc
   b5204:	000be149 	.word	0x000be149
   b5208:	000be05f 	.word	0x000be05f
   b520c:	2003dd04 	.word	0x2003dd04
   b5210:	2003dd40 	.word	0x2003dd40

000b5214 <_Z13DataOffloaderv>:
void DataOffloader(){
   b5214:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!logDir.open("/")) {
   b5216:	4940      	ldr	r1, [pc, #256]	; (b5318 <_Z13DataOffloaderv+0x104>)
   b5218:	4840      	ldr	r0, [pc, #256]	; (b531c <_Z13DataOffloaderv+0x108>)
void DataOffloader(){
   b521a:	b087      	sub	sp, #28
    if (!logDir.open("/")) {
   b521c:	2200      	movs	r2, #0
   b521e:	f7ff f8bf 	bl	b43a0 <_ZN7FatFile4openEPKci>
   b5222:	2401      	movs	r4, #1
   b5224:	b948      	cbnz	r0, b523a <_Z13DataOffloaderv+0x26>
        offloadingDone = true;
   b5226:	4b3e      	ldr	r3, [pc, #248]	; (b5320 <_Z13DataOffloaderv+0x10c>)
   b5228:	701c      	strb	r4, [r3, #0]
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   b522a:	f005 fd25 	bl	bac78 <_Z16_fetch_usbserialv>
   b522e:	493d      	ldr	r1, [pc, #244]	; (b5324 <_Z13DataOffloaderv+0x110>)
}
   b5230:	b007      	add	sp, #28
   b5232:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   b5236:	f005 b936 	b.w	ba4a6 <_ZN5Print7printlnEPKc>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b523a:	4e3b      	ldr	r6, [pc, #236]	; (b5328 <_Z13DataOffloaderv+0x114>)
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   b523c:	4d3b      	ldr	r5, [pc, #236]	; (b532c <_Z13DataOffloaderv+0x118>)
   b523e:	e9d6 2300 	ldrd	r2, r3, [r6]
   b5242:	1a9b      	subs	r3, r3, r2
   b5244:	4a3a      	ldr	r2, [pc, #232]	; (b5330 <_Z13DataOffloaderv+0x11c>)
   b5246:	10db      	asrs	r3, r3, #3
   b5248:	4353      	muls	r3, r2
    while(OffloadingBot <= WaterBots.size()){
   b524a:	429c      	cmp	r4, r3
   b524c:	d859      	bhi.n	b5302 <_Z13DataOffloaderv+0xee>
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   b524e:	466f      	mov	r7, sp
   b5250:	4a38      	ldr	r2, [pc, #224]	; (b5334 <_Z13DataOffloaderv+0x120>)
   b5252:	4623      	mov	r3, r4
   b5254:	210a      	movs	r1, #10
   b5256:	4638      	mov	r0, r7
   b5258:	f002 f8f2 	bl	b7440 <snprintf>
        memcpy(OffloadBuf,OffloadCommand,10);
   b525c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   b5260:	ab03      	add	r3, sp, #12
   b5262:	c303      	stmia	r3!, {r0, r1}
        peerRxCharacteristic.setValue(OffloadBuf,10);
   b5264:	a903      	add	r1, sp, #12
        memcpy(OffloadBuf,OffloadCommand,10);
   b5266:	801a      	strh	r2, [r3, #0]
        peerRxCharacteristic.setValue(OffloadBuf,10);
   b5268:	4833      	ldr	r0, [pc, #204]	; (b5338 <_Z13DataOffloaderv+0x124>)
   b526a:	2300      	movs	r3, #0
   b526c:	220a      	movs	r2, #10
   b526e:	f002 fcdb 	bl	b7c28 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   b5272:	f005 fd01 	bl	bac78 <_Z16_fetch_usbserialv>
   b5276:	682b      	ldr	r3, [r5, #0]
   b5278:	4930      	ldr	r1, [pc, #192]	; (b533c <_Z13DataOffloaderv+0x128>)
   b527a:	781a      	ldrb	r2, [r3, #0]
   b527c:	f7ff f800 	bl	b4280 <_ZN5Print8printlnfEPKcz>
        delay(1000);
   b5280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5284:	f002 f91c 	bl	b74c0 <delay>
        if(BLEBot->botNum != OffloadingBot){
   b5288:	682b      	ldr	r3, [r5, #0]
   b528a:	781b      	ldrb	r3, [r3, #0]
   b528c:	42a3      	cmp	r3, r4
   b528e:	d01e      	beq.n	b52ce <_Z13DataOffloaderv+0xba>
            Serial.printlnf("Currently connected to Bot %f, need to connect to Bot %d",BLEBot->botNum,OffloadingBot);
   b5290:	f005 fcf2 	bl	bac78 <_Z16_fetch_usbserialv>
   b5294:	682a      	ldr	r2, [r5, #0]
   b5296:	492a      	ldr	r1, [pc, #168]	; (b5340 <_Z13DataOffloaderv+0x12c>)
   b5298:	7812      	ldrb	r2, [r2, #0]
   b529a:	4623      	mov	r3, r4
   b529c:	f7fe fff0 	bl	b4280 <_ZN5Print8printlnfEPKcz>
            BLE.disconnect();
   b52a0:	f002 fe28 	bl	b7ef4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b52a4:	f003 fc26 	bl	b8af4 <_ZNK8particle14BleLocalDevice10disconnectEv>
            while(!BLE.connected()){
   b52a8:	f002 fe24 	bl	b7ef4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b52ac:	f002 feb2 	bl	b8014 <_ZNK8particle14BleLocalDevice9connectedEv>
   b52b0:	b930      	cbnz	r0, b52c0 <_Z13DataOffloaderv+0xac>
                BLEScan(OffloadingBot);
   b52b2:	4620      	mov	r0, r4
   b52b4:	f7ff fec8 	bl	b5048 <_Z7BLEScani>
                delay(50);
   b52b8:	2032      	movs	r0, #50	; 0x32
   b52ba:	f002 f901 	bl	b74c0 <delay>
            while(!BLE.connected()){
   b52be:	e7f3      	b.n	b52a8 <_Z13DataOffloaderv+0x94>
            Serial.printlnf("Successfully connected to Bot %d", BLEBot->botNum);
   b52c0:	f005 fcda 	bl	bac78 <_Z16_fetch_usbserialv>
   b52c4:	682b      	ldr	r3, [r5, #0]
   b52c6:	491f      	ldr	r1, [pc, #124]	; (b5344 <_Z13DataOffloaderv+0x130>)
   b52c8:	781a      	ldrb	r2, [r3, #0]
   b52ca:	f7fe ffd9 	bl	b4280 <_ZN5Print8printlnfEPKcz>
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   b52ce:	f005 fcd3 	bl	bac78 <_Z16_fetch_usbserialv>
   b52d2:	682b      	ldr	r3, [r5, #0]
   b52d4:	491c      	ldr	r1, [pc, #112]	; (b5348 <_Z13DataOffloaderv+0x134>)
   b52d6:	781a      	ldrb	r2, [r3, #0]
        offloadingDone = false;
   b52d8:	4f11      	ldr	r7, [pc, #68]	; (b5320 <_Z13DataOffloaderv+0x10c>)
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   b52da:	f7fe ffd1 	bl	b4280 <_ZN5Print8printlnfEPKcz>
        offloadingDone = false;
   b52de:	2300      	movs	r3, #0
   b52e0:	703b      	strb	r3, [r7, #0]
        while(!offloadingDone) delay(100);
   b52e2:	2064      	movs	r0, #100	; 0x64
   b52e4:	f002 f8ec 	bl	b74c0 <delay>
   b52e8:	783b      	ldrb	r3, [r7, #0]
   b52ea:	2b00      	cmp	r3, #0
   b52ec:	d0f9      	beq.n	b52e2 <_Z13DataOffloaderv+0xce>
        Serial.printlnf("Finished transferring file from Bot %d",BLEBot->botNum);
   b52ee:	f005 fcc3 	bl	bac78 <_Z16_fetch_usbserialv>
   b52f2:	682b      	ldr	r3, [r5, #0]
   b52f4:	4915      	ldr	r1, [pc, #84]	; (b534c <_Z13DataOffloaderv+0x138>)
   b52f6:	781a      	ldrb	r2, [r3, #0]
        OffloadingBot++;
   b52f8:	3401      	adds	r4, #1
        Serial.printlnf("Finished transferring file from Bot %d",BLEBot->botNum);
   b52fa:	f7fe ffc1 	bl	b4280 <_ZN5Print8printlnfEPKcz>
        OffloadingBot++;
   b52fe:	b2e4      	uxtb	r4, r4
    while(OffloadingBot <= WaterBots.size()){
   b5300:	e79d      	b.n	b523e <_Z13DataOffloaderv+0x2a>
   b5302:	4813      	ldr	r0, [pc, #76]	; (b5350 <_Z13DataOffloaderv+0x13c>)
    if(logDir.isOpen()) logDir.close();
   b5304:	7c03      	ldrb	r3, [r0, #16]
   b5306:	b12b      	cbz	r3, b5314 <_Z13DataOffloaderv+0x100>
   b5308:	3010      	adds	r0, #16
}
   b530a:	b007      	add	sp, #28
   b530c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    if(logDir.isOpen()) logDir.close();
   b5310:	f000 bbee 	b.w	b5af0 <_ZN7FatFile5closeEv>
}
   b5314:	b007      	add	sp, #28
   b5316:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5318:	000be15d 	.word	0x000be15d
   b531c:	2003de14 	.word	0x2003de14
   b5320:	2003dec2 	.word	0x2003dec2
   b5324:	000be15f 	.word	0x000be15f
   b5328:	2003dd34 	.word	0x2003dd34
   b532c:	2003dd04 	.word	0x2003dd04
   b5330:	aaaaaaab 	.word	0xaaaaaaab
   b5334:	000be1a0 	.word	0x000be1a0
   b5338:	2003ded4 	.word	0x2003ded4
   b533c:	000be1a9 	.word	0x000be1a9
   b5340:	000be1d6 	.word	0x000be1d6
   b5344:	000be20f 	.word	0x000be20f
   b5348:	000be230 	.word	0x000be230
   b534c:	000be253 	.word	0x000be253
   b5350:	2003de04 	.word	0x2003de04

000b5354 <loop>:
void loop() {
   b5354:	b570      	push	{r4, r5, r6, lr}
    if(postStatus){
   b5356:	4d48      	ldr	r5, [pc, #288]	; (b5478 <loop+0x124>)
   b5358:	782b      	ldrb	r3, [r5, #0]
void loop() {
   b535a:	b08a      	sub	sp, #40	; 0x28
    if(postStatus){
   b535c:	b1a3      	cbz	r3, b5388 <loop+0x34>
        if(ControlledBot != NULL) sprintf(statusStr,"CCABspcB%d",ControlledBot->botNum);
   b535e:	4b47      	ldr	r3, [pc, #284]	; (b547c <loop+0x128>)
   b5360:	681b      	ldr	r3, [r3, #0]
   b5362:	2b00      	cmp	r3, #0
   b5364:	d070      	beq.n	b5448 <loop+0xf4>
   b5366:	781a      	ldrb	r2, [r3, #0]
   b5368:	4945      	ldr	r1, [pc, #276]	; (b5480 <loop+0x12c>)
   b536a:	a802      	add	r0, sp, #8
   b536c:	f002 f858 	bl	b7420 <sprintf>
        sendData(statusStr,0,true,true,statusTimeout);                                  
   b5370:	4c44      	ldr	r4, [pc, #272]	; (b5484 <loop+0x130>)
   b5372:	7823      	ldrb	r3, [r4, #0]
   b5374:	9300      	str	r3, [sp, #0]
   b5376:	2301      	movs	r3, #1
   b5378:	461a      	mov	r2, r3
   b537a:	2100      	movs	r1, #0
   b537c:	a802      	add	r0, sp, #8
   b537e:	f7ff f9b1 	bl	b46e4 <_Z8sendDataPKchbbb>
        postStatus = false;
   b5382:	2300      	movs	r3, #0
   b5384:	702b      	strb	r3, [r5, #0]
        statusTimeout = false;
   b5386:	7023      	strb	r3, [r4, #0]
    if (BLE.connected()) {
   b5388:	f002 fdb4 	bl	b7ef4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b538c:	f002 fe42 	bl	b8014 <_ZNK8particle14BleLocalDevice9connectedEv>
   b5390:	4601      	mov	r1, r0
   b5392:	2800      	cmp	r0, #0
   b5394:	d05d      	beq.n	b5452 <loop+0xfe>
        sprintf(sendStr,"CCB1mtr%03d%03d",(int)(analogRead(JOYV_ADC)/22.75)%1000,(int)(analogRead(JOYV_ADC)/22.75)%1000);
   b5396:	2012      	movs	r0, #18
   b5398:	f005 fd98 	bl	baecc <analogRead>
   b539c:	4606      	mov	r6, r0
   b539e:	2012      	movs	r0, #18
   b53a0:	f005 fd94 	bl	baecc <analogRead>
   b53a4:	f006 f890 	bl	bb4c8 <__aeabi_i2d>
   b53a8:	4b37      	ldr	r3, [pc, #220]	; (b5488 <loop+0x134>)
   b53aa:	2200      	movs	r2, #0
   b53ac:	f006 fa20 	bl	bb7f0 <__aeabi_ddiv>
   b53b0:	f006 fb8e 	bl	bbad0 <__aeabi_d2iz>
   b53b4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   b53b8:	fb90 f5f4 	sdiv	r5, r0, r4
   b53bc:	fb05 0514 	mls	r5, r5, r4, r0
   b53c0:	4630      	mov	r0, r6
   b53c2:	f006 f881 	bl	bb4c8 <__aeabi_i2d>
   b53c6:	4b30      	ldr	r3, [pc, #192]	; (b5488 <loop+0x134>)
   b53c8:	2200      	movs	r2, #0
   b53ca:	f006 fa11 	bl	bb7f0 <__aeabi_ddiv>
   b53ce:	f006 fb7f 	bl	bbad0 <__aeabi_d2iz>
   b53d2:	462b      	mov	r3, r5
   b53d4:	492d      	ldr	r1, [pc, #180]	; (b548c <loop+0x138>)
   b53d6:	fb90 f2f4 	sdiv	r2, r0, r4
   b53da:	fb02 0214 	mls	r2, r2, r4, r0
   b53de:	a802      	add	r0, sp, #8
   b53e0:	f002 f81e 	bl	b7420 <sprintf>
        Serial.printlnf("Motor Speed: %03d",(int)(analogRead(JOYV_ADC)/22.75));
   b53e4:	f005 fc48 	bl	bac78 <_Z16_fetch_usbserialv>
   b53e8:	4604      	mov	r4, r0
   b53ea:	2012      	movs	r0, #18
   b53ec:	f005 fd6e 	bl	baecc <analogRead>
   b53f0:	f006 f86a 	bl	bb4c8 <__aeabi_i2d>
   b53f4:	4b24      	ldr	r3, [pc, #144]	; (b5488 <loop+0x134>)
   b53f6:	2200      	movs	r2, #0
   b53f8:	f006 f9fa 	bl	bb7f0 <__aeabi_ddiv>
   b53fc:	f006 fb68 	bl	bbad0 <__aeabi_d2iz>
   b5400:	4923      	ldr	r1, [pc, #140]	; (b5490 <loop+0x13c>)
   b5402:	4602      	mov	r2, r0
   b5404:	4620      	mov	r0, r4
   b5406:	f7fe ff3b 	bl	b4280 <_ZN5Print8printlnfEPKcz>
        Serial.println(sendStr);
   b540a:	f005 fc35 	bl	bac78 <_Z16_fetch_usbserialv>
   b540e:	a902      	add	r1, sp, #8
   b5410:	f005 f849 	bl	ba4a6 <_ZN5Print7printlnEPKc>
        sendData(sendStr,0,false,true,false);
   b5414:	2200      	movs	r2, #0
   b5416:	4611      	mov	r1, r2
   b5418:	9200      	str	r2, [sp, #0]
   b541a:	2301      	movs	r3, #1
   b541c:	a802      	add	r0, sp, #8
   b541e:	f7ff f961 	bl	b46e4 <_Z8sendDataPKchbbb>
        digitalWrite(D7,HIGH);
   b5422:	2007      	movs	r0, #7
   b5424:	2101      	movs	r1, #1
   b5426:	f005 fd38 	bl	bae9a <digitalWrite>
        delay(250);
   b542a:	20fa      	movs	r0, #250	; 0xfa
   b542c:	f002 f848 	bl	b74c0 <delay>
    if(offloadingMode) DataOffloader();
   b5430:	4b18      	ldr	r3, [pc, #96]	; (b5494 <loop+0x140>)
   b5432:	781b      	ldrb	r3, [r3, #0]
   b5434:	b10b      	cbz	r3, b543a <loop+0xe6>
   b5436:	f7ff feed 	bl	b5214 <_Z13DataOffloaderv>
    XBeeHandler();
   b543a:	f7ff fd33 	bl	b4ea4 <_Z11XBeeHandlerv>
}
   b543e:	b00a      	add	sp, #40	; 0x28
   b5440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    XBeeLTEPairSet();
   b5444:	f7ff b9b8 	b.w	b47b8 <_Z14XBeeLTEPairSetv>
        else sprintf(statusStr,"CCABspcNB");
   b5448:	4913      	ldr	r1, [pc, #76]	; (b5498 <loop+0x144>)
   b544a:	a802      	add	r0, sp, #8
   b544c:	f006 fc8b 	bl	bbd66 <strcpy>
   b5450:	e78e      	b.n	b5370 <loop+0x1c>
        digitalWrite(D7,LOW);
   b5452:	2007      	movs	r0, #7
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   b5454:	4c11      	ldr	r4, [pc, #68]	; (b549c <loop+0x148>)
        digitalWrite(D7,LOW);
   b5456:	f005 fd20 	bl	bae9a <digitalWrite>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b545a:	f001 fd85 	bl	b6f68 <HAL_Timer_Get_Milli_Seconds>
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   b545e:	6823      	ldr	r3, [r4, #0]
   b5460:	1ac0      	subs	r0, r0, r3
   b5462:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b5466:	d3e3      	bcc.n	b5430 <loop+0xdc>
   b5468:	f001 fd7e 	bl	b6f68 <HAL_Timer_Get_Milli_Seconds>
    		lastScan = millis();
   b546c:	6020      	str	r0, [r4, #0]
    		BLEScan(-1);
   b546e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5472:	f7ff fde9 	bl	b5048 <_Z7BLEScani>
   b5476:	e7db      	b.n	b5430 <loop+0xdc>
   b5478:	2003dee4 	.word	0x2003dee4
   b547c:	2003dd14 	.word	0x2003dd14
   b5480:	000be27a 	.word	0x000be27a
   b5484:	2003e63c 	.word	0x2003e63c
   b5488:	4036c000 	.word	0x4036c000
   b548c:	000be28f 	.word	0x000be28f
   b5490:	000be29f 	.word	0x000be29f
   b5494:	2003dec3 	.word	0x2003dec3
   b5498:	000be285 	.word	0x000be285
   b549c:	2003de00 	.word	0x2003de00

000b54a0 <_GLOBAL__sub_I_SystemMode>:
   b54a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        val_(val) {
   b54a2:	4b51      	ldr	r3, [pc, #324]	; (b55e8 <_GLOBAL__sub_I_SystemMode+0x148>)
   b54a4:	4c51      	ldr	r4, [pc, #324]	; (b55ec <_GLOBAL__sub_I_SystemMode+0x14c>)
   b54a6:	2201      	movs	r2, #1
   b54a8:	701a      	strb	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b54aa:	4b51      	ldr	r3, [pc, #324]	; (b55f0 <_GLOBAL__sub_I_SystemMode+0x150>)
   b54ac:	2200      	movs	r2, #0
   b54ae:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b54b2:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b54b6:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b54b8:	2003      	movs	r0, #3
   b54ba:	f001 fecd 	bl	b7258 <set_system_mode>
const BleUuid serviceUuid("b4206910-dc4b-5743-c8b1-92d0e75182b0");
   b54be:	494d      	ldr	r1, [pc, #308]	; (b55f4 <_GLOBAL__sub_I_SystemMode+0x154>)
   b54c0:	484d      	ldr	r0, [pc, #308]	; (b55f8 <_GLOBAL__sub_I_SystemMode+0x158>)
   b54c2:	f002 fa55 	bl	b7970 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("b4206912-dc4b-5743-c8b1-92d0e75182b0");
   b54c6:	494d      	ldr	r1, [pc, #308]	; (b55fc <_GLOBAL__sub_I_SystemMode+0x15c>)
   b54c8:	484d      	ldr	r0, [pc, #308]	; (b5600 <_GLOBAL__sub_I_SystemMode+0x160>)
   b54ca:	f002 fa51 	bl	b7970 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("b4206913-dc4b-5743-c8b1-92d0e75182b0");
   b54ce:	494d      	ldr	r1, [pc, #308]	; (b5604 <_GLOBAL__sub_I_SystemMode+0x164>)
   b54d0:	484d      	ldr	r0, [pc, #308]	; (b5608 <_GLOBAL__sub_I_SystemMode+0x168>)
   b54d2:	f002 fa4d 	bl	b7970 <_ZN8particle7BleUuidC1EPKc>
const BleUuid offldUuid("b4206914-dc4b-5743-c8b1-92d0e75182b0");
   b54d6:	494d      	ldr	r1, [pc, #308]	; (b560c <_GLOBAL__sub_I_SystemMode+0x16c>)
   b54d8:	484d      	ldr	r0, [pc, #308]	; (b5610 <_GLOBAL__sub_I_SystemMode+0x170>)
   b54da:	f002 fa49 	bl	b7970 <_ZN8particle7BleUuidC1EPKc>
   b54de:	2514      	movs	r5, #20
            : rssi_(BLE_RSSI_INVALID) {
   b54e0:	267f      	movs	r6, #127	; 0x7f
   b54e2:	4620      	mov	r0, r4
   b54e4:	f002 f95f 	bl	b77a6 <_ZN8particle10BleAddressC1Ev>
   b54e8:	f104 0008 	add.w	r0, r4, #8
   b54ec:	f003 f96d 	bl	b87ca <_ZN8particle18BleAdvertisingDataC1Ev>
   b54f0:	f104 0014 	add.w	r0, r4, #20
   b54f4:	f003 f969 	bl	b87ca <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_COUNT];
   b54f8:	3d01      	subs	r5, #1
   b54fa:	f884 6020 	strb.w	r6, [r4, #32]
   b54fe:	f104 0424 	add.w	r4, r4, #36	; 0x24
   b5502:	d1ee      	bne.n	b54e2 <_GLOBAL__sub_I_SystemMode+0x42>
BleCharacteristic peerTxCharacteristic;
   b5504:	4843      	ldr	r0, [pc, #268]	; (b5614 <_GLOBAL__sub_I_SystemMode+0x174>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5506:	4c44      	ldr	r4, [pc, #272]	; (b5618 <_GLOBAL__sub_I_SystemMode+0x178>)
   b5508:	f002 fb68 	bl	b7bdc <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerRxCharacteristic;
   b550c:	4843      	ldr	r0, [pc, #268]	; (b561c <_GLOBAL__sub_I_SystemMode+0x17c>)
   b550e:	f002 fb65 	bl	b7bdc <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerOffloadCharacteristic;
   b5512:	4843      	ldr	r0, [pc, #268]	; (b5620 <_GLOBAL__sub_I_SystemMode+0x180>)
   b5514:	f002 fb62 	bl	b7bdc <_ZN8particle17BleCharacteristicC1Ev>
BlePeerDevice peer;
   b5518:	4842      	ldr	r0, [pc, #264]	; (b5624 <_GLOBAL__sub_I_SystemMode+0x184>)
   b551a:	f002 fc3b 	bl	b7d94 <_ZN8particle13BlePeerDeviceC1Ev>
   b551e:	7823      	ldrb	r3, [r4, #0]
   b5520:	f3bf 8f5b 	dmb	ish
   b5524:	07db      	lsls	r3, r3, #31
   b5526:	d40a      	bmi.n	b553e <_GLOBAL__sub_I_SystemMode+0x9e>
   b5528:	4620      	mov	r0, r4
   b552a:	f7fe fdba 	bl	b40a2 <__cxa_guard_acquire>
   b552e:	b130      	cbz	r0, b553e <_GLOBAL__sub_I_SystemMode+0x9e>
   b5530:	483d      	ldr	r0, [pc, #244]	; (b5628 <_GLOBAL__sub_I_SystemMode+0x188>)
   b5532:	2101      	movs	r1, #1
   b5534:	f005 f81c 	bl	ba570 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5538:	4620      	mov	r0, r4
   b553a:	f7fe fdb7 	bl	b40ac <__cxa_guard_release>
  explicit SdFat(SPIClass* spiPort) {
   b553e:	4b3b      	ldr	r3, [pc, #236]	; (b562c <_GLOBAL__sub_I_SystemMode+0x18c>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5540:	4e3b      	ldr	r6, [pc, #236]	; (b5630 <_GLOBAL__sub_I_SystemMode+0x190>)
	    _M_manager = &_My_handler::_M_manager;
   b5542:	4d3c      	ldr	r5, [pc, #240]	; (b5634 <_GLOBAL__sub_I_SystemMode+0x194>)
Timer at1(5000,actionTimer5);
   b5544:	483c      	ldr	r0, [pc, #240]	; (b5638 <_GLOBAL__sub_I_SystemMode+0x198>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5546:	9603      	str	r6, [sp, #12]
   b5548:	2264      	movs	r2, #100	; 0x64
   b554a:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
  {
   b554e:	4a3b      	ldr	r2, [pc, #236]	; (b563c <_GLOBAL__sub_I_SystemMode+0x19c>)
   b5550:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   b5554:	2201      	movs	r2, #1
   b5556:	2400      	movs	r4, #0
   b5558:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b555c:	4a32      	ldr	r2, [pc, #200]	; (b5628 <_GLOBAL__sub_I_SystemMode+0x188>)
   b555e:	605c      	str	r4, [r3, #4]
   b5560:	f8c3 443c 	str.w	r4, [r3, #1084]	; 0x43c
   b5564:	f8c3 4468 	str.w	r4, [r3, #1128]	; 0x468
   b5568:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   b556c:	f8a3 447c 	strh.w	r4, [r3, #1148]	; 0x47c
   b5570:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
    Print() : write_error(0) {}
   b5574:	4b32      	ldr	r3, [pc, #200]	; (b5640 <_GLOBAL__sub_I_SystemMode+0x1a0>)
  File() {}
   b5576:	4a33      	ldr	r2, [pc, #204]	; (b5644 <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b5578:	605c      	str	r4, [r3, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b557a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b557e:	6099      	str	r1, [r3, #8]
   b5580:	601a      	str	r2, [r3, #0]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5582:	611c      	str	r4, [r3, #16]
   b5584:	4b30      	ldr	r3, [pc, #192]	; (b5648 <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b5586:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b558a:	601a      	str	r2, [r3, #0]
   b558c:	611c      	str	r4, [r3, #16]
   b558e:	4b2f      	ldr	r3, [pc, #188]	; (b564c <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b5590:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b5594:	601a      	str	r2, [r3, #0]
   b5596:	611c      	str	r4, [r3, #16]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5598:	4b2d      	ldr	r3, [pc, #180]	; (b5650 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b559a:	e9c3 4400 	strd	r4, r4, [r3]
   b559e:	609c      	str	r4, [r3, #8]
   b55a0:	4b2c      	ldr	r3, [pc, #176]	; (b5654 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b55a2:	e9c3 4400 	strd	r4, r4, [r3]
   b55a6:	609c      	str	r4, [r3, #8]
   b55a8:	4b2b      	ldr	r3, [pc, #172]	; (b5658 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   b55aa:	e9c3 4400 	strd	r4, r4, [r3]
   b55ae:	609c      	str	r4, [r3, #8]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b55b0:	4b2a      	ldr	r3, [pc, #168]	; (b565c <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b55b2:	9300      	str	r3, [sp, #0]
   b55b4:	466a      	mov	r2, sp
   b55b6:	4623      	mov	r3, r4
   b55b8:	f241 3188 	movw	r1, #5000	; 0x1388
	    _M_manager = &_My_handler::_M_manager;
   b55bc:	9502      	str	r5, [sp, #8]
   b55be:	f7fe febf 	bl	b4340 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b55c2:	4668      	mov	r0, sp
   b55c4:	f7fe fe6a 	bl	b429c <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b55c8:	4b25      	ldr	r3, [pc, #148]	; (b5660 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   b55ca:	9300      	str	r3, [sp, #0]
Timer at2(60000,actionTimer60);
   b55cc:	466a      	mov	r2, sp
   b55ce:	4623      	mov	r3, r4
   b55d0:	f64e 2160 	movw	r1, #60000	; 0xea60
   b55d4:	4823      	ldr	r0, [pc, #140]	; (b5664 <_GLOBAL__sub_I_SystemMode+0x1c4>)
	    _M_manager = &_My_handler::_M_manager;
   b55d6:	e9cd 5602 	strd	r5, r6, [sp, #8]
   b55da:	f7fe feb1 	bl	b4340 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b55de:	4668      	mov	r0, sp
   b55e0:	f7fe fe5c 	bl	b429c <_ZNSt14_Function_baseD1Ev>
   b55e4:	b004      	add	sp, #16
   b55e6:	bd70      	pop	{r4, r5, r6, pc}
   b55e8:	2003dd7c 	.word	0x2003dd7c
   b55ec:	2003dee8 	.word	0x2003dee8
   b55f0:	2003dd28 	.word	0x2003dd28
   b55f4:	000be2b1 	.word	0x000be2b1
   b55f8:	2003dd40 	.word	0x2003dd40
   b55fc:	000be2d6 	.word	0x000be2d6
   b5600:	2003dd54 	.word	0x2003dd54
   b5604:	000be2fb 	.word	0x000be2fb
   b5608:	2003dd68 	.word	0x2003dd68
   b560c:	000be320 	.word	0x000be320
   b5610:	2003dd80 	.word	0x2003dd80
   b5614:	2003dedc 	.word	0x2003dedc
   b5618:	2003dcf8 	.word	0x2003dcf8
   b561c:	2003ded4 	.word	0x2003ded4
   b5620:	2003decc 	.word	0x2003decc
   b5624:	2003dec4 	.word	0x2003dec4
   b5628:	2003dcfc 	.word	0x2003dcfc
   b562c:	2003e1b8 	.word	0x2003e1b8
   b5630:	000b41dd 	.word	0x000b41dd
   b5634:	000b41c9 	.word	0x000b41c9
   b5638:	2003dd94 	.word	0x2003dd94
   b563c:	000be350 	.word	0x000be350
   b5640:	2003de70 	.word	0x2003de70
   b5644:	000be378 	.word	0x000be378
   b5648:	2003de38 	.word	0x2003de38
   b564c:	2003de04 	.word	0x2003de04
   b5650:	2003dd34 	.word	0x2003dd34
   b5654:	2003dd1c 	.word	0x2003dd1c
   b5658:	2003dd08 	.word	0x2003dd08
   b565c:	000b40d1 	.word	0x000b40d1
   b5660:	000b418d 	.word	0x000b418d
   b5664:	2003ddb0 	.word	0x2003ddb0

000b5668 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b5668:	b538      	push	{r3, r4, r5, lr}
   b566a:	4604      	mov	r4, r0
   b566c:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b566e:	2224      	movs	r2, #36	; 0x24
   b5670:	2100      	movs	r1, #0
   b5672:	f006 fb28 	bl	bbcc6 <memset>

  m_vol = vol;
   b5676:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b5678:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b567a:	2b10      	cmp	r3, #16
   b567c:	d003      	beq.n	b5686 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b567e:	2b20      	cmp	r3, #32
   b5680:	d006      	beq.n	b5690 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b5682:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b5684:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b5686:	2320      	movs	r3, #32
  m_flags = F_READ;
   b5688:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b568a:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b568c:	70a0      	strb	r0, [r4, #2]
  return true;
   b568e:	e7f9      	b.n	b5684 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b5690:	2340      	movs	r3, #64	; 0x40
   b5692:	e7f9      	b.n	b5688 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b5694 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b5694:	b510      	push	{r4, lr}
   b5696:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b5698:	3024      	adds	r0, #36	; 0x24
   b569a:	f000 feeb 	bl	b6474 <_ZN8FatCache4syncEv>
   b569e:	b128      	cbz	r0, b56ac <_ZN9FatVolume9cacheSyncEv+0x18>
   b56a0:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b56a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b56a8:	f000 bee4 	b.w	b6474 <_ZN8FatCache4syncEv>
  }
   b56ac:	bd10      	pop	{r4, pc}

000b56ae <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b56ae:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b56b0:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b56b2:	f043 0304 	orr.w	r3, r3, #4
   b56b6:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b56b8:	f100 0210 	add.w	r2, r0, #16
   b56bc:	6880      	ldr	r0, [r0, #8]
   b56be:	f000 bf8f 	b.w	b65e0 <_ZN9FatVolume15allocateClusterEmPm>
	...

000b56c4 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b56c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b56c8:	7801      	ldrb	r1, [r0, #0]
   b56ca:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b56ce:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b56d0:	d003      	beq.n	b56da <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b56d2:	2600      	movs	r6, #0
}
   b56d4:	4630      	mov	r0, r6
   b56d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b56da:	6942      	ldr	r2, [r0, #20]
   b56dc:	4b17      	ldr	r3, [pc, #92]	; (b573c <_ZN7FatFile13addDirClusterEv+0x78>)
   b56de:	429a      	cmp	r2, r3
   b56e0:	d2f7      	bcs.n	b56d2 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b56e2:	f7ff ffe4 	bl	b56ae <_ZN7FatFile10addClusterEv>
   b56e6:	4606      	mov	r6, r0
   b56e8:	2800      	cmp	r0, #0
   b56ea:	d0f2      	beq.n	b56d2 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b56ec:	6921      	ldr	r1, [r4, #16]
   b56ee:	68a0      	ldr	r0, [r4, #8]
   b56f0:	f000 ff0b 	bl	b650a <_ZNK9FatVolume17clusterFirstBlockEm>
   b56f4:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b56f6:	68a0      	ldr	r0, [r4, #8]
   b56f8:	2205      	movs	r2, #5
   b56fa:	4639      	mov	r1, r7
   b56fc:	3024      	adds	r0, #36	; 0x24
   b56fe:	f000 fee1 	bl	b64c4 <_ZN8FatCache4readEmh>
  if (!pc) {
   b5702:	4680      	mov	r8, r0
   b5704:	2800      	cmp	r0, #0
   b5706:	d0e4      	beq.n	b56d2 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b5708:	4629      	mov	r1, r5
   b570a:	f44f 7200 	mov.w	r2, #512	; 0x200
   b570e:	f006 fada 	bl	bbcc6 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b5712:	2501      	movs	r5, #1
   b5714:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b5716:	791a      	ldrb	r2, [r3, #4]
   b5718:	42aa      	cmp	r2, r5
   b571a:	d909      	bls.n	b5730 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b571c:	6818      	ldr	r0, [r3, #0]
   b571e:	4642      	mov	r2, r8
   b5720:	19e9      	adds	r1, r5, r7
   b5722:	f001 fa3c 	bl	b6b9e <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b5726:	2800      	cmp	r0, #0
   b5728:	d0d3      	beq.n	b56d2 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b572a:	3501      	adds	r5, #1
   b572c:	b2ed      	uxtb	r5, r5
   b572e:	e7f1      	b.n	b5714 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b5730:	6963      	ldr	r3, [r4, #20]
   b5732:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b5736:	6163      	str	r3, [r4, #20]
  return true;
   b5738:	e7cc      	b.n	b56d4 <_ZN7FatFile13addDirClusterEv+0x10>
   b573a:	bf00      	nop
   b573c:	001ffe00 	.word	0x001ffe00

000b5740 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b5740:	b510      	push	{r4, lr}
   b5742:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b5744:	6880      	ldr	r0, [r0, #8]
   b5746:	460a      	mov	r2, r1
   b5748:	3024      	adds	r0, #36	; 0x24
   b574a:	69a1      	ldr	r1, [r4, #24]
   b574c:	f000 feba 	bl	b64c4 <_ZN8FatCache4readEmh>
  if (!pc) {
   b5750:	b120      	cbz	r0, b575c <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b5752:	88a3      	ldrh	r3, [r4, #4]
   b5754:	f003 030f 	and.w	r3, r3, #15
   b5758:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b575c:	bd10      	pop	{r4, pc}

000b575e <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b575e:	7803      	ldrb	r3, [r0, #0]
   b5760:	b90b      	cbnz	r3, b5766 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b5762:	f7ff bf81 	b.w	b5668 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b5766:	2000      	movs	r0, #0
   b5768:	4770      	bx	lr

000b576a <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b576a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b576e:	7803      	ldrb	r3, [r0, #0]
   b5770:	4604      	mov	r4, r0
   b5772:	4688      	mov	r8, r1
   b5774:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b5776:	2b00      	cmp	r3, #0
   b5778:	d05d      	beq.n	b5836 <_ZN7FatFile4readEPvj+0xcc>
   b577a:	7882      	ldrb	r2, [r0, #2]
   b577c:	07d1      	lsls	r1, r2, #31
   b577e:	d55a      	bpl.n	b5836 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b5780:	071a      	lsls	r2, r3, #28
   b5782:	d52d      	bpl.n	b57e0 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b5784:	69c3      	ldr	r3, [r0, #28]
   b5786:	6942      	ldr	r2, [r0, #20]
   b5788:	1a9b      	subs	r3, r3, r2
   b578a:	429d      	cmp	r5, r3
   b578c:	bf28      	it	cs
   b578e:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b5790:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b5792:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5796:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b579a:	2e00      	cmp	r6, #0
   b579c:	f000 808f 	beq.w	b58be <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b57a0:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b57a2:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b57a4:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b57a6:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b57a8:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b57ac:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b57b0:	d51f      	bpl.n	b57f2 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b57b2:	6a00      	ldr	r0, [r0, #32]
   b57b4:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b57b6:	68a0      	ldr	r0, [r4, #8]
   b57b8:	f1ba 0f00 	cmp.w	sl, #0
   b57bc:	d142      	bne.n	b5844 <_ZN7FatFile4readEPvj+0xda>
   b57be:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b57c2:	d33f      	bcc.n	b5844 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b57c4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b57c6:	4299      	cmp	r1, r3
   b57c8:	d03c      	beq.n	b5844 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b57ca:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b57ce:	d252      	bcs.n	b5876 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b57d0:	6800      	ldr	r0, [r0, #0]
   b57d2:	4642      	mov	r2, r8
   b57d4:	f001 f95a 	bl	b6a8c <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b57d8:	b368      	cbz	r0, b5836 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b57da:	f44f 7700 	mov.w	r7, #512	; 0x200
   b57de:	e044      	b.n	b586a <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b57e0:	069b      	lsls	r3, r3, #26
   b57e2:	d5d5      	bpl.n	b5790 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b57e4:	6883      	ldr	r3, [r0, #8]
   b57e6:	891a      	ldrh	r2, [r3, #8]
   b57e8:	6943      	ldr	r3, [r0, #20]
   b57ea:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b57ee:	b29b      	uxth	r3, r3
   b57f0:	e7cb      	b.n	b578a <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b57f2:	f890 9005 	ldrb.w	r9, [r0, #5]
   b57f6:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b57fa:	f1ba 0f00 	cmp.w	sl, #0
   b57fe:	d108      	bne.n	b5812 <_ZN7FatFile4readEPvj+0xa8>
   b5800:	f1b9 0f00 	cmp.w	r9, #0
   b5804:	d105      	bne.n	b5812 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b5806:	b95b      	cbnz	r3, b5820 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b5808:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b580a:	bf4c      	ite	mi
   b580c:	6a03      	ldrmi	r3, [r0, #32]
   b580e:	6a23      	ldrpl	r3, [r4, #32]
   b5810:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b5812:	6921      	ldr	r1, [r4, #16]
   b5814:	68a0      	ldr	r0, [r4, #8]
   b5816:	f000 fe78 	bl	b650a <_ZNK9FatVolume17clusterFirstBlockEm>
   b581a:	eb09 0100 	add.w	r1, r9, r0
   b581e:	e7ca      	b.n	b57b6 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5820:	6921      	ldr	r1, [r4, #16]
   b5822:	465a      	mov	r2, fp
   b5824:	f000 fe77 	bl	b6516 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b5828:	2800      	cmp	r0, #0
   b582a:	db04      	blt.n	b5836 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b582c:	d1f1      	bne.n	b5812 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b582e:	7823      	ldrb	r3, [r4, #0]
   b5830:	f013 0f70 	tst.w	r3, #112	; 0x70
   b5834:	d143      	bne.n	b58be <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b5836:	7863      	ldrb	r3, [r4, #1]
   b5838:	f043 0302 	orr.w	r3, r3, #2
   b583c:	7063      	strb	r3, [r4, #1]
  return -1;
   b583e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5842:	e03d      	b.n	b58c0 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b5844:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b5848:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b584a:	f04f 0200 	mov.w	r2, #0
   b584e:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b5852:	bf28      	it	cs
   b5854:	4637      	movcs	r7, r6
   b5856:	f000 fe35 	bl	b64c4 <_ZN8FatCache4readEmh>
      if (!pc) {
   b585a:	2800      	cmp	r0, #0
   b585c:	d0eb      	beq.n	b5836 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b585e:	eb00 010a 	add.w	r1, r0, sl
   b5862:	463a      	mov	r2, r7
   b5864:	4640      	mov	r0, r8
   b5866:	f006 fa06 	bl	bbc76 <memcpy>
    m_curPosition += n;
   b586a:	6963      	ldr	r3, [r4, #20]
   b586c:	443b      	add	r3, r7
    dst += n;
   b586e:	44b8      	add	r8, r7
    m_curPosition += n;
   b5870:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b5872:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b5874:	e791      	b.n	b579a <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b5876:	7822      	ldrb	r2, [r4, #0]
   b5878:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b587a:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b587e:	d406      	bmi.n	b588e <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b5880:	7902      	ldrb	r2, [r0, #4]
   b5882:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b5886:	b2d2      	uxtb	r2, r2
   b5888:	4592      	cmp	sl, r2
   b588a:	bf28      	it	cs
   b588c:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b588e:	4299      	cmp	r1, r3
      n = 512*nb;
   b5890:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5894:	d208      	bcs.n	b58a8 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b5896:	68a0      	ldr	r0, [r4, #8]
   b5898:	4653      	mov	r3, sl
   b589a:	6800      	ldr	r0, [r0, #0]
   b589c:	4642      	mov	r2, r8
   b589e:	f001 f93d 	bl	b6b1c <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b58a2:	2800      	cmp	r0, #0
   b58a4:	d1e1      	bne.n	b586a <_ZN7FatFile4readEPvj+0x100>
   b58a6:	e7c6      	b.n	b5836 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b58a8:	4453      	add	r3, sl
   b58aa:	428b      	cmp	r3, r1
   b58ac:	d9f3      	bls.n	b5896 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b58ae:	3024      	adds	r0, #36	; 0x24
   b58b0:	9101      	str	r1, [sp, #4]
   b58b2:	f000 fddf 	bl	b6474 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b58b6:	9901      	ldr	r1, [sp, #4]
   b58b8:	2800      	cmp	r0, #0
   b58ba:	d1ec      	bne.n	b5896 <_ZN7FatFile4readEPvj+0x12c>
   b58bc:	e7bb      	b.n	b5836 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b58be:	1ba8      	subs	r0, r5, r6
}
   b58c0:	b003      	add	sp, #12
   b58c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b58c6 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b58c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b58c8:	2201      	movs	r2, #1
   b58ca:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b58ce:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b58d2:	4604      	mov	r4, r0
   b58d4:	f7ff ff49 	bl	b576a <_ZN7FatFile4readEPvj>
   b58d8:	2801      	cmp	r0, #1
   b58da:	bf0a      	itet	eq
   b58dc:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b58e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b58e4:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b58e8:	b002      	add	sp, #8
   b58ea:	bd70      	pop	{r4, r5, r6, pc}

000b58ec <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b58ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b58ee:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b58f0:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b58f4:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b58f6:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b58fa:	d000      	beq.n	b58fe <_ZN7FatFile12readDirCacheEb+0x12>
   b58fc:	b999      	cbnz	r1, b5926 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b58fe:	2201      	movs	r2, #1
   b5900:	f10d 0107 	add.w	r1, sp, #7
   b5904:	4620      	mov	r0, r4
   b5906:	f7ff ff30 	bl	b576a <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b590a:	b240      	sxtb	r0, r0
   b590c:	2801      	cmp	r0, #1
   b590e:	d002      	beq.n	b5916 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b5910:	2000      	movs	r0, #0
}
   b5912:	b003      	add	sp, #12
   b5914:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b5916:	6963      	ldr	r3, [r4, #20]
   b5918:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b591a:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b591c:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b591e:	3030      	adds	r0, #48	; 0x30
   b5920:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b5924:	e7f5      	b.n	b5912 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b5926:	3320      	adds	r3, #32
   b5928:	e7f7      	b.n	b591a <_ZN7FatFile12readDirCacheEb+0x2e>

000b592a <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b592a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b592e:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b5930:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b5932:	4604      	mov	r4, r0
   b5934:	460d      	mov	r5, r1
  if (!isOpen()) {
   b5936:	b162      	cbz	r2, b5952 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b5938:	6940      	ldr	r0, [r0, #20]
   b593a:	4288      	cmp	r0, r1
   b593c:	d002      	beq.n	b5944 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b593e:	b919      	cbnz	r1, b5948 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b5940:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b5942:	6165      	str	r5, [r4, #20]
    return true;
   b5944:	2001      	movs	r0, #1
   b5946:	e006      	b.n	b5956 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b5948:	0716      	lsls	r6, r2, #28
   b594a:	d506      	bpl.n	b595a <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b594c:	69e3      	ldr	r3, [r4, #28]
   b594e:	428b      	cmp	r3, r1
   b5950:	d20b      	bcs.n	b596a <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b5952:	6127      	str	r7, [r4, #16]
  return false;
   b5954:	2000      	movs	r0, #0
}
   b5956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b595a:	0691      	lsls	r1, r2, #26
   b595c:	d505      	bpl.n	b596a <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b595e:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b5960:	891b      	ldrh	r3, [r3, #8]
   b5962:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b5966:	d9ec      	bls.n	b5942 <_ZN7FatFile7seekSetEm+0x18>
   b5968:	e7f3      	b.n	b5952 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b596a:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b596e:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b5972:	1e43      	subs	r3, r0, #1
   b5974:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b5978:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b597a:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b597c:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b597e:	42b3      	cmp	r3, r6
   b5980:	d800      	bhi.n	b5984 <_ZN7FatFile7seekSetEm+0x5a>
   b5982:	b998      	cbnz	r0, b59ac <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b5984:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b5986:	bf4c      	ite	mi
   b5988:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b598c:	6a23      	ldrpl	r3, [r4, #32]
   b598e:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b5990:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b5994:	2e00      	cmp	r6, #0
   b5996:	d0d4      	beq.n	b5942 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b5998:	6921      	ldr	r1, [r4, #16]
   b599a:	68a0      	ldr	r0, [r4, #8]
   b599c:	4642      	mov	r2, r8
   b599e:	f000 fdba 	bl	b6516 <_ZN9FatVolume6fatGetEmPm>
   b59a2:	2800      	cmp	r0, #0
   b59a4:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b59a8:	dcf4      	bgt.n	b5994 <_ZN7FatFile7seekSetEm+0x6a>
   b59aa:	e7d2      	b.n	b5952 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b59ac:	1af6      	subs	r6, r6, r3
   b59ae:	e7ef      	b.n	b5990 <_ZN7FatFile7seekSetEm+0x66>

000b59b0 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b59b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b59b2:	460f      	mov	r7, r1
   b59b4:	4604      	mov	r4, r0
   b59b6:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b59b8:	2100      	movs	r1, #0
   b59ba:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b59bc:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b59be:	f006 f982 	bl	bbcc6 <memset>
  m_vol = dirFile->m_vol;
   b59c2:	68b8      	ldr	r0, [r7, #8]
   b59c4:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b59c6:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b59c8:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b59cc:	6a3b      	ldr	r3, [r7, #32]
   b59ce:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b59d0:	016a      	lsls	r2, r5, #5
   b59d2:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b59d6:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b59da:	071f      	lsls	r7, r3, #28
   b59dc:	d444      	bmi.n	b5a68 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b59de:	f003 0317 	and.w	r3, r3, #23
   b59e2:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b59e4:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b59e8:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b59ec:	bf04      	itt	eq
   b59ee:	f043 0308 	orreq.w	r3, r3, #8
   b59f2:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b59f4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b59f8:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b59fa:	f006 0303 	and.w	r3, r6, #3
   b59fe:	2b01      	cmp	r3, #1
   b5a00:	d02c      	beq.n	b5a5c <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b5a02:	2b02      	cmp	r3, #2
   b5a04:	d028      	beq.n	b5a58 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b5a06:	bb7b      	cbnz	r3, b5a68 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b5a08:	0571      	lsls	r1, r6, #21
   b5a0a:	d42d      	bmi.n	b5a68 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b5a0c:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b5a0e:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b5a10:	78a1      	ldrb	r1, [r4, #2]
   b5a12:	078b      	lsls	r3, r1, #30
   b5a14:	d504      	bpl.n	b5a20 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b5a16:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b5a18:	06df      	lsls	r7, r3, #27
   b5a1a:	d425      	bmi.n	b5a68 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b5a1c:	07dd      	lsls	r5, r3, #31
   b5a1e:	d423      	bmi.n	b5a68 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b5a20:	11b3      	asrs	r3, r6, #6
   b5a22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b5a26:	f006 0508 	and.w	r5, r6, #8
   b5a2a:	432b      	orrs	r3, r5
   b5a2c:	430b      	orrs	r3, r1
   b5a2e:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b5a30:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b5a32:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b5a34:	1883      	adds	r3, r0, r2
   b5a36:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b5a3a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b5a3e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b5a42:	0572      	lsls	r2, r6, #21
   b5a44:	d513      	bpl.n	b5a6e <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b5a46:	b959      	cbnz	r1, b5a60 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b5a48:	78a3      	ldrb	r3, [r4, #2]
   b5a4a:	f043 0304 	orr.w	r3, r3, #4
   b5a4e:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b5a50:	0473      	lsls	r3, r6, #17
   b5a52:	d410      	bmi.n	b5a76 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b5a54:	2001      	movs	r0, #1
}
   b5a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b5a58:	2303      	movs	r3, #3
   b5a5a:	e7d8      	b.n	b5a0e <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b5a5c:	2302      	movs	r3, #2
   b5a5e:	e7d6      	b.n	b5a0e <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b5a60:	f000 fdf9 	bl	b6656 <_ZN9FatVolume9freeChainEm>
   b5a64:	2800      	cmp	r0, #0
   b5a66:	d1ef      	bne.n	b5a48 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b5a68:	2000      	movs	r0, #0
   b5a6a:	7020      	strb	r0, [r4, #0]
  return false;
   b5a6c:	e7f3      	b.n	b5a56 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b5a6e:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b5a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5a72:	61e3      	str	r3, [r4, #28]
   b5a74:	e7ec      	b.n	b5a50 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b5a76:	69e1      	ldr	r1, [r4, #28]
   b5a78:	4620      	mov	r0, r4
   b5a7a:	f7ff ff56 	bl	b592a <_ZN7FatFile7seekSetEm>
   b5a7e:	2800      	cmp	r0, #0
   b5a80:	d1e8      	bne.n	b5a54 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b5a82:	e7f1      	b.n	b5a68 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b5a84 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b5a84:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b5a86:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b5a88:	4604      	mov	r4, r0
  if (!isOpen()) {
   b5a8a:	b90b      	cbnz	r3, b5a90 <_ZN7FatFile4syncEv+0xc>
    return true;
   b5a8c:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b5a8e:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b5a90:	7883      	ldrb	r3, [r0, #2]
   b5a92:	075a      	lsls	r2, r3, #29
   b5a94:	d523      	bpl.n	b5ade <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b5a96:	2101      	movs	r1, #1
   b5a98:	f7ff fe52 	bl	b5740 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b5a9c:	4605      	mov	r5, r0
   b5a9e:	b928      	cbnz	r0, b5aac <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b5aa0:	7863      	ldrb	r3, [r4, #1]
   b5aa2:	f043 0301 	orr.w	r3, r3, #1
   b5aa6:	7063      	strb	r3, [r4, #1]
  return false;
   b5aa8:	2000      	movs	r0, #0
   b5aaa:	e7f0      	b.n	b5a8e <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b5aac:	7803      	ldrb	r3, [r0, #0]
   b5aae:	2be5      	cmp	r3, #229	; 0xe5
   b5ab0:	d0f6      	beq.n	b5aa0 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b5ab2:	7823      	ldrb	r3, [r4, #0]
   b5ab4:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b5ab6:	bf44      	itt	mi
   b5ab8:	69e3      	ldrmi	r3, [r4, #28]
   b5aba:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b5abc:	6a23      	ldr	r3, [r4, #32]
   b5abe:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b5ac0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b5ac2:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b5ac4:	4b09      	ldr	r3, [pc, #36]	; (b5aec <_ZN7FatFile4syncEv+0x68>)
   b5ac6:	681b      	ldr	r3, [r3, #0]
   b5ac8:	b12b      	cbz	r3, b5ad6 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b5aca:	f100 0116 	add.w	r1, r0, #22
   b5ace:	3018      	adds	r0, #24
   b5ad0:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b5ad2:	8b2b      	ldrh	r3, [r5, #24]
   b5ad4:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b5ad6:	78a3      	ldrb	r3, [r4, #2]
   b5ad8:	f023 0304 	bic.w	r3, r3, #4
   b5adc:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b5ade:	68a0      	ldr	r0, [r4, #8]
   b5ae0:	f7ff fdd8 	bl	b5694 <_ZN9FatVolume9cacheSyncEv>
   b5ae4:	2800      	cmp	r0, #0
   b5ae6:	d0db      	beq.n	b5aa0 <_ZN7FatFile4syncEv+0x1c>
   b5ae8:	e7d0      	b.n	b5a8c <_ZN7FatFile4syncEv+0x8>
   b5aea:	bf00      	nop
   b5aec:	2003e640 	.word	0x2003e640

000b5af0 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b5af0:	b510      	push	{r4, lr}
   b5af2:	4604      	mov	r4, r0
  bool rtn = sync();
   b5af4:	f7ff ffc6 	bl	b5a84 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b5af8:	2300      	movs	r3, #0
   b5afa:	7023      	strb	r3, [r4, #0]
}
   b5afc:	bd10      	pop	{r4, pc}

000b5afe <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b5afe:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5b00:	b093      	sub	sp, #76	; 0x4c
   b5b02:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5b04:	2300      	movs	r3, #0
   b5b06:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b5b08:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b5b0a:	9201      	str	r2, [sp, #4]
   b5b0c:	4606      	mov	r6, r0
   b5b0e:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b5b10:	b113      	cbz	r3, b5b18 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b5b12:	2000      	movs	r0, #0
}
   b5b14:	b013      	add	sp, #76	; 0x4c
   b5b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b5b18:	780b      	ldrb	r3, [r1, #0]
   b5b1a:	f013 0f70 	tst.w	r3, #112	; 0x70
   b5b1e:	d0f8      	beq.n	b5b12 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b5b20:	7813      	ldrb	r3, [r2, #0]
   b5b22:	2b2f      	cmp	r3, #47	; 0x2f
   b5b24:	d112      	bne.n	b5b4c <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b5b26:	9a01      	ldr	r2, [sp, #4]
   b5b28:	7813      	ldrb	r3, [r2, #0]
   b5b2a:	2b2f      	cmp	r3, #47	; 0x2f
   b5b2c:	d102      	bne.n	b5b34 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b5b2e:	3201      	adds	r2, #1
   b5b30:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b5b32:	e7f8      	b.n	b5b26 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b5b34:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b5b36:	b91b      	cbnz	r3, b5b40 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b5b38:	4630      	mov	r0, r6
   b5b3a:	f7ff fe10 	bl	b575e <_ZN7FatFile8openRootEP9FatVolume>
   b5b3e:	e7e9      	b.n	b5b14 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b5b40:	a809      	add	r0, sp, #36	; 0x24
   b5b42:	f7ff fd91 	bl	b5668 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b5b46:	2800      	cmp	r0, #0
   b5b48:	d0e3      	beq.n	b5b12 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b5b4a:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b5b4c:	9801      	ldr	r0, [sp, #4]
   b5b4e:	aa01      	add	r2, sp, #4
   b5b50:	a903      	add	r1, sp, #12
   b5b52:	f000 f931 	bl	b5db8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b5b56:	2800      	cmp	r0, #0
   b5b58:	d0db      	beq.n	b5b12 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b5b5a:	9b01      	ldr	r3, [sp, #4]
   b5b5c:	781b      	ldrb	r3, [r3, #0]
   b5b5e:	b19b      	cbz	r3, b5b88 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b5b60:	2300      	movs	r3, #0
   b5b62:	aa03      	add	r2, sp, #12
   b5b64:	4621      	mov	r1, r4
   b5b66:	4630      	mov	r0, r6
   b5b68:	f000 faba 	bl	b60e0 <_ZN7FatFile4openEPS_P7fname_ti>
   b5b6c:	2800      	cmp	r0, #0
   b5b6e:	d0d0      	beq.n	b5b12 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b5b70:	4635      	mov	r5, r6
   b5b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b74:	ac09      	add	r4, sp, #36	; 0x24
   b5b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b7c:	682b      	ldr	r3, [r5, #0]
   b5b7e:	6023      	str	r3, [r4, #0]
    close();
   b5b80:	4630      	mov	r0, r6
   b5b82:	f7ff ffb5 	bl	b5af0 <_ZN7FatFile5closeEv>
  while (1) {
   b5b86:	e7e0      	b.n	b5b4a <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b5b88:	463b      	mov	r3, r7
   b5b8a:	aa03      	add	r2, sp, #12
   b5b8c:	4621      	mov	r1, r4
   b5b8e:	4630      	mov	r0, r6
   b5b90:	f000 faa6 	bl	b60e0 <_ZN7FatFile4openEPS_P7fname_ti>
   b5b94:	e7be      	b.n	b5b14 <_ZN7FatFile4openEPS_PKci+0x16>

000b5b96 <_ZN7FatFile6removeEPS_PKc>:
bool FatFile::remove(FatFile* dirFile, const char* path) {
   b5b96:	b500      	push	{lr}
   b5b98:	b08b      	sub	sp, #44	; 0x2c
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5b9a:	2300      	movs	r3, #0
   b5b9c:	460a      	mov	r2, r1
   b5b9e:	9301      	str	r3, [sp, #4]
  if (!file.open(dirFile, path, O_WRONLY)) {
   b5ba0:	4601      	mov	r1, r0
   b5ba2:	2301      	movs	r3, #1
   b5ba4:	a801      	add	r0, sp, #4
   b5ba6:	f7ff ffaa 	bl	b5afe <_ZN7FatFile4openEPS_PKci>
   b5baa:	b110      	cbz	r0, b5bb2 <_ZN7FatFile6removeEPS_PKc+0x1c>
  return file.remove();
   b5bac:	a801      	add	r0, sp, #4
   b5bae:	f000 f9e1 	bl	b5f74 <_ZN7FatFile6removeEv>
}
   b5bb2:	b00b      	add	sp, #44	; 0x2c
   b5bb4:	f85d fb04 	ldr.w	pc, [sp], #4

000b5bb8 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b5bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b5bbc:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b5bbe:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b5bc0:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b5bc2:	4604      	mov	r4, r0
   b5bc4:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b5bc6:	d55b      	bpl.n	b5c80 <_ZN7FatFile5writeEPKvj+0xc8>
   b5bc8:	7883      	ldrb	r3, [r0, #2]
   b5bca:	079a      	lsls	r2, r3, #30
   b5bcc:	d558      	bpl.n	b5c80 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b5bce:	071b      	lsls	r3, r3, #28
   b5bd0:	d451      	bmi.n	b5c76 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b5bd2:	6963      	ldr	r3, [r4, #20]
   b5bd4:	43db      	mvns	r3, r3
   b5bd6:	42bb      	cmp	r3, r7
   b5bd8:	d352      	bcc.n	b5c80 <_ZN7FatFile5writeEPKvj+0xc8>
   b5bda:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5bdc:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b5be0:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b5be2:	f1b8 0f00 	cmp.w	r8, #0
   b5be6:	f000 8091 	beq.w	b5d0c <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b5bea:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b5bec:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b5bee:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b5bf2:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b5bf6:	d10e      	bne.n	b5c16 <_ZN7FatFile5writeEPKvj+0x5e>
   b5bf8:	b96d      	cbnz	r5, b5c16 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b5bfa:	6921      	ldr	r1, [r4, #16]
   b5bfc:	2900      	cmp	r1, #0
   b5bfe:	d046      	beq.n	b5c8e <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5c00:	4652      	mov	r2, sl
   b5c02:	f000 fc88 	bl	b6516 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b5c06:	2800      	cmp	r0, #0
   b5c08:	db3a      	blt.n	b5c80 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b5c0a:	d104      	bne.n	b5c16 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b5c0c:	4620      	mov	r0, r4
   b5c0e:	f7ff fd4e 	bl	b56ae <_ZN7FatFile10addClusterEv>
   b5c12:	2800      	cmp	r0, #0
   b5c14:	d034      	beq.n	b5c80 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b5c16:	6921      	ldr	r1, [r4, #16]
   b5c18:	68a0      	ldr	r0, [r4, #8]
   b5c1a:	f000 fc76 	bl	b650a <_ZNK9FatVolume17clusterFirstBlockEm>
   b5c1e:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b5c20:	68a0      	ldr	r0, [r4, #8]
   b5c22:	b915      	cbnz	r5, b5c2a <_ZN7FatFile5writeEPKvj+0x72>
   b5c24:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b5c28:	d23f      	bcs.n	b5caa <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b5c2a:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b5c2e:	4546      	cmp	r6, r8
   b5c30:	bf28      	it	cs
   b5c32:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b5c34:	2d00      	cmp	r5, #0
   b5c36:	d136      	bne.n	b5ca6 <_ZN7FatFile5writeEPKvj+0xee>
   b5c38:	6962      	ldr	r2, [r4, #20]
   b5c3a:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b5c3c:	429a      	cmp	r2, r3
   b5c3e:	bf34      	ite	cc
   b5c40:	2201      	movcc	r2, #1
   b5c42:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b5c44:	3024      	adds	r0, #36	; 0x24
   b5c46:	f000 fc3d 	bl	b64c4 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b5c4a:	b1c8      	cbz	r0, b5c80 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b5c4c:	4428      	add	r0, r5
   b5c4e:	4632      	mov	r2, r6
   b5c50:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b5c52:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b5c54:	f006 f80f 	bl	bbc76 <memcpy>
      if (512 == (n + blockOffset)) {
   b5c58:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b5c5c:	d104      	bne.n	b5c68 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b5c5e:	68a0      	ldr	r0, [r4, #8]
   b5c60:	3024      	adds	r0, #36	; 0x24
   b5c62:	f000 fc07 	bl	b6474 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b5c66:	b158      	cbz	r0, b5c80 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b5c68:	6963      	ldr	r3, [r4, #20]
   b5c6a:	4433      	add	r3, r6
   b5c6c:	6163      	str	r3, [r4, #20]
    src += n;
   b5c6e:	44b1      	add	r9, r6
    nToWrite -= n;
   b5c70:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b5c74:	e7b4      	b.n	b5be0 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b5c76:	69c1      	ldr	r1, [r0, #28]
   b5c78:	f7ff fe57 	bl	b592a <_ZN7FatFile7seekSetEm>
   b5c7c:	2800      	cmp	r0, #0
   b5c7e:	d1a8      	bne.n	b5bd2 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b5c80:	7863      	ldrb	r3, [r4, #1]
   b5c82:	f043 0301 	orr.w	r3, r3, #1
   b5c86:	7063      	strb	r3, [r4, #1]
  return -1;
   b5c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5c8c:	e050      	b.n	b5d30 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b5c8e:	6a23      	ldr	r3, [r4, #32]
   b5c90:	b93b      	cbnz	r3, b5ca2 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b5c92:	4620      	mov	r0, r4
   b5c94:	f7ff fd0b 	bl	b56ae <_ZN7FatFile10addClusterEv>
   b5c98:	2800      	cmp	r0, #0
   b5c9a:	d0f1      	beq.n	b5c80 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b5c9c:	6923      	ldr	r3, [r4, #16]
   b5c9e:	6223      	str	r3, [r4, #32]
   b5ca0:	e7b9      	b.n	b5c16 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b5ca2:	6123      	str	r3, [r4, #16]
   b5ca4:	e7b7      	b.n	b5c16 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b5ca6:	2201      	movs	r2, #1
   b5ca8:	e7cc      	b.n	b5c44 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b5caa:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b5cae:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b5cb0:	d31b      	bcc.n	b5cea <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b5cb2:	f890 c004 	ldrb.w	ip, [r0, #4]
   b5cb6:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b5cba:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b5cbc:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b5cc0:	4573      	cmp	r3, lr
   b5cc2:	bf28      	it	cs
   b5cc4:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5cc6:	4291      	cmp	r1, r2
      n = 512*nb;
   b5cc8:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5ccc:	d307      	bcc.n	b5cde <_ZN7FatFile5writeEPKvj+0x126>
   b5cce:	441a      	add	r2, r3
   b5cd0:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b5cd2:	bf82      	ittt	hi
   b5cd4:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b5cd8:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b5cdc:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b5cde:	68a5      	ldr	r5, [r4, #8]
   b5ce0:	464a      	mov	r2, r9
   b5ce2:	6828      	ldr	r0, [r5, #0]
   b5ce4:	f000 ffd1 	bl	b6c8a <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b5ce8:	e7bd      	b.n	b5c66 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b5cea:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b5cec:	bf02      	ittt	eq
   b5cee:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b5cf2:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b5cf6:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b5cf8:	68a3      	ldr	r3, [r4, #8]
   b5cfa:	464a      	mov	r2, r9
   b5cfc:	6818      	ldr	r0, [r3, #0]
   b5cfe:	f000 ff4e 	bl	b6b9e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b5d02:	2800      	cmp	r0, #0
   b5d04:	d0bc      	beq.n	b5c80 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b5d06:	f44f 7600 	mov.w	r6, #512	; 0x200
   b5d0a:	e7ad      	b.n	b5c68 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b5d0c:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b5d0e:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b5d10:	42b2      	cmp	r2, r6
   b5d12:	d204      	bcs.n	b5d1e <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b5d14:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b5d16:	f043 0304 	orr.w	r3, r3, #4
   b5d1a:	70a3      	strb	r3, [r4, #2]
   b5d1c:	e003      	b.n	b5d26 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b5d1e:	4a08      	ldr	r2, [pc, #32]	; (b5d40 <_ZN7FatFile5writeEPKvj+0x188>)
   b5d20:	6812      	ldr	r2, [r2, #0]
   b5d22:	2a00      	cmp	r2, #0
   b5d24:	d1f7      	bne.n	b5d16 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b5d26:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b5d2a:	2b00      	cmp	r3, #0
   b5d2c:	db02      	blt.n	b5d34 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b5d2e:	4638      	mov	r0, r7
}
   b5d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b5d34:	4620      	mov	r0, r4
   b5d36:	f7ff fea5 	bl	b5a84 <_ZN7FatFile4syncEv>
   b5d3a:	2800      	cmp	r0, #0
   b5d3c:	d1f7      	bne.n	b5d2e <_ZN7FatFile5writeEPKvj+0x176>
   b5d3e:	e79f      	b.n	b5c80 <_ZN7FatFile5writeEPKvj+0xc8>
   b5d40:	2003e640 	.word	0x2003e640

000b5d44 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b5d44:	2904      	cmp	r1, #4
   b5d46:	d804      	bhi.n	b5d52 <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b5d48:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b5d4c:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b5d50:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b5d52:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b5d54:	bf9b      	ittet	ls
   b5d56:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b5d5a:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b5d5e:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b5d60:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b5d62:	bf84      	itt	hi
   b5d64:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b5d68:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b5d6a:	4770      	bx	lr

000b5d6c <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b5d6c:	1e41      	subs	r1, r0, #1
   b5d6e:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b5d72:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b5d74:	0842      	lsrs	r2, r0, #1
   b5d76:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b5d7a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b5d7e:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b5d82:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b5d84:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b5d86:	d1f5      	bne.n	b5d74 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b5d88:	4770      	bx	lr

000b5d8a <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b5d8a:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b5d8c:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b5d8e:	4604      	mov	r4, r0
   b5d90:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b5d92:	b923      	cbnz	r3, b5d9e <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b5d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b5d98:	6889      	ldr	r1, [r1, #8]
   b5d9a:	f7ff bce0 	b.w	b575e <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b5d9e:	2224      	movs	r2, #36	; 0x24
   b5da0:	2100      	movs	r1, #0
   b5da2:	f005 ff90 	bl	bbcc6 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b5da6:	2310      	movs	r3, #16
  m_flags = F_READ;
   b5da8:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b5daa:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b5dac:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b5dae:	68ab      	ldr	r3, [r5, #8]
   b5db0:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b5db2:	68eb      	ldr	r3, [r5, #12]
   b5db4:	6223      	str	r3, [r4, #32]
}
   b5db6:	bd38      	pop	{r3, r4, r5, pc}

000b5db8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b5db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5dbc:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b5dbe:	f810 3b01 	ldrb.w	r3, [r0], #1
   b5dc2:	2b20      	cmp	r3, #32
   b5dc4:	d0fa      	beq.n	b5dbc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5dc6:	4d6a      	ldr	r5, [pc, #424]	; (b5f70 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b5dc8:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b5dca:	2400      	movs	r4, #0
    c = path[len];
   b5dcc:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b5dce:	b1c3      	cbz	r3, b5e02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b5dd0:	2b2f      	cmp	r3, #47	; 0x2f
   b5dd2:	d016      	beq.n	b5e02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5dd4:	2b5c      	cmp	r3, #92	; 0x5c
   b5dd6:	d102      	bne.n	b5dde <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b5dd8:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b5dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5dde:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b5de2:	b2c0      	uxtb	r0, r0
   b5de4:	281d      	cmp	r0, #29
   b5de6:	d803      	bhi.n	b5df0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b5de8:	fa25 f000 	lsr.w	r0, r5, r0
   b5dec:	07c0      	lsls	r0, r0, #31
   b5dee:	d4f3      	bmi.n	b5dd8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b5df0:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b5df4:	283c      	cmp	r0, #60	; 0x3c
   b5df6:	d0ef      	beq.n	b5dd8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b5df8:	3b20      	subs	r3, #32
   b5dfa:	2b5e      	cmp	r3, #94	; 0x5e
   b5dfc:	d8ec      	bhi.n	b5dd8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b5dfe:	3401      	adds	r4, #1
    c = path[len];
   b5e00:	e7e4      	b.n	b5dcc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b5e02:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b5e04:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b5e06:	4607      	mov	r7, r0
   b5e08:	f810 5b01 	ldrb.w	r5, [r0], #1
   b5e0c:	2d20      	cmp	r5, #32
   b5e0e:	d0fa      	beq.n	b5e06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b5e10:	2d2f      	cmp	r5, #47	; 0x2f
   b5e12:	d0f8      	beq.n	b5e06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b5e14:	6017      	str	r7, [r2, #0]
  while (len) {
   b5e16:	b14c      	cbz	r4, b5e2c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b5e18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b5e1c:	2a2e      	cmp	r2, #46	; 0x2e
   b5e1e:	d001      	beq.n	b5e24 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b5e20:	2a20      	cmp	r2, #32
   b5e22:	d101      	bne.n	b5e28 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b5e24:	3c01      	subs	r4, #1
  while (len) {
   b5e26:	e7f6      	b.n	b5e16 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b5e28:	2cff      	cmp	r4, #255	; 0xff
   b5e2a:	dcd5      	bgt.n	b5dd8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b5e2c:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b5e30:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b5e34:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b5e36:	f8c1 300d 	str.w	r3, [r1, #13]
   b5e3a:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b5e3c:	f04f 0800 	mov.w	r8, #0
   b5e40:	f816 3008 	ldrb.w	r3, [r6, r8]
   b5e44:	2b2e      	cmp	r3, #46	; 0x2e
   b5e46:	d001      	beq.n	b5e4c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b5e48:	2b20      	cmp	r3, #32
   b5e4a:	d102      	bne.n	b5e52 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b5e4c:	f108 0801 	add.w	r8, r8, #1
   b5e50:	e7f6      	b.n	b5e40 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b5e52:	fab8 f088 	clz	r0, r8
   b5e56:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b5e58:	1e65      	subs	r5, r4, #1
   b5e5a:	1c6b      	adds	r3, r5, #1
   b5e5c:	d002      	beq.n	b5e64 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b5e5e:	5d73      	ldrb	r3, [r6, r5]
   b5e60:	2b2e      	cmp	r3, #46	; 0x2e
   b5e62:	d114      	bne.n	b5e8e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b5e64:	f04f 0900 	mov.w	r9, #0
   b5e68:	2707      	movs	r7, #7
   b5e6a:	464a      	mov	r2, r9
   b5e6c:	46ca      	mov	sl, r9
   b5e6e:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b5e72:	45a0      	cmp	r8, r4
   b5e74:	da68      	bge.n	b5f48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b5e76:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b5e7a:	2b20      	cmp	r3, #32
   b5e7c:	d003      	beq.n	b5e86 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b5e7e:	2b2e      	cmp	r3, #46	; 0x2e
   b5e80:	d107      	bne.n	b5e92 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b5e82:	45a8      	cmp	r8, r5
   b5e84:	d012      	beq.n	b5eac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b5e86:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b5e88:	f108 0801 	add.w	r8, r8, #1
   b5e8c:	e7f1      	b.n	b5e72 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b5e8e:	3d01      	subs	r5, #1
   b5e90:	e7e3      	b.n	b5e5a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b5e92:	2b22      	cmp	r3, #34	; 0x22
   b5e94:	d008      	beq.n	b5ea8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b5e96:	2b7c      	cmp	r3, #124	; 0x7c
   b5e98:	d006      	beq.n	b5ea8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b5e9a:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b5e9e:	f1bc 0f05 	cmp.w	ip, #5
   b5ea2:	d80a      	bhi.n	b5eba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b5ea4:	2b2d      	cmp	r3, #45	; 0x2d
   b5ea6:	d012      	beq.n	b5ece <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b5ea8:	45a8      	cmp	r8, r5
   b5eaa:	d15b      	bne.n	b5f64 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b5eac:	2f0a      	cmp	r7, #10
   b5eae:	d04a      	beq.n	b5f46 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b5eb0:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b5eb2:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b5eb4:	f04f 0e10 	mov.w	lr, #16
   b5eb8:	e7e6      	b.n	b5e88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b5eba:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b5ebe:	f1bc 0f05 	cmp.w	ip, #5
   b5ec2:	d9f1      	bls.n	b5ea8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b5ec4:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b5ec8:	f1bc 0f02 	cmp.w	ip, #2
   b5ecc:	d9ec      	bls.n	b5ea8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b5ece:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b5ed2:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b5ed6:	d8e7      	bhi.n	b5ea8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b5ed8:	45a8      	cmp	r8, r5
   b5eda:	d0e7      	beq.n	b5eac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b5edc:	42ba      	cmp	r2, r7
   b5ede:	d830      	bhi.n	b5f42 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b5ee0:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b5ee4:	f1bc 0f19 	cmp.w	ip, #25
   b5ee8:	d81a      	bhi.n	b5f20 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b5eea:	3b20      	subs	r3, #32
        lc |= bit;
   b5eec:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b5ef0:	b2db      	uxtb	r3, r3
        lc |= bit;
   b5ef2:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b5ef6:	f102 0c01 	add.w	ip, r2, #1
   b5efa:	fa5f fc8c 	uxtb.w	ip, ip
   b5efe:	440a      	add	r2, r1
      if (i < 7) {
   b5f00:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b5f04:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b5f06:	d801      	bhi.n	b5f0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b5f08:	f881 c00c 	strb.w	ip, [r1, #12]
   b5f0c:	4662      	mov	r2, ip
   b5f0e:	e7bb      	b.n	b5e88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b5f10:	45a8      	cmp	r8, r5
   b5f12:	dc18      	bgt.n	b5f46 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b5f14:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b5f16:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b5f18:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b5f1a:	f04f 0e10 	mov.w	lr, #16
   b5f1e:	e7b2      	b.n	b5e86 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b5f20:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b5f24:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b5f28:	bf98      	it	ls
   b5f2a:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b5f2e:	e7e2      	b.n	b5ef6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b5f30:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b5f32:	2001      	movs	r0, #1
   b5f34:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b5f36:	4419      	add	r1, r3
   b5f38:	237e      	movs	r3, #126	; 0x7e
   b5f3a:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b5f3c:	2331      	movs	r3, #49	; 0x31
   b5f3e:	738b      	strb	r3, [r1, #14]
   b5f40:	e74b      	b.n	b5dda <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b5f42:	2f0a      	cmp	r7, #10
   b5f44:	d1e4      	bne.n	b5f10 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b5f46:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b5f48:	7b4b      	ldrb	r3, [r1, #13]
   b5f4a:	2b20      	cmp	r3, #32
   b5f4c:	f43f af44 	beq.w	b5dd8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b5f50:	2800      	cmp	r0, #0
   b5f52:	d0ed      	beq.n	b5f30 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b5f54:	ea1a 0f09 	tst.w	sl, r9
   b5f58:	bf18      	it	ne
   b5f5a:	f04f 0902 	movne.w	r9, #2
   b5f5e:	f881 9000 	strb.w	r9, [r1]
   b5f62:	e73a      	b.n	b5dda <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b5f64:	42ba      	cmp	r2, r7
   b5f66:	d8ec      	bhi.n	b5f42 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b5f68:	2000      	movs	r0, #0
      c = '_';
   b5f6a:	235f      	movs	r3, #95	; 0x5f
   b5f6c:	e7c3      	b.n	b5ef6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b5f6e:	bf00      	nop
   b5f70:	31000101 	.word	0x31000101

000b5f74 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   b5f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5f78:	b08a      	sub	sp, #40	; 0x28
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5f7a:	2300      	movs	r3, #0
   b5f7c:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   b5f7e:	7803      	ldrb	r3, [r0, #0]
   b5f80:	0719      	lsls	r1, r3, #28
bool FatFile::remove() {
   b5f82:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & F_WRITE)) {
   b5f84:	d50a      	bpl.n	b5f9c <_ZN7FatFile6removeEv+0x28>
   b5f86:	7883      	ldrb	r3, [r0, #2]
   b5f88:	079a      	lsls	r2, r3, #30
   b5f8a:	d507      	bpl.n	b5f9c <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b5f8c:	6a01      	ldr	r1, [r0, #32]
   b5f8e:	b939      	cbnz	r1, b5fa0 <_ZN7FatFile6removeEv+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b5f90:	2101      	movs	r1, #1
   b5f92:	4620      	mov	r0, r4
   b5f94:	f7ff fbd4 	bl	b5740 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b5f98:	4605      	mov	r5, r0
   b5f9a:	b938      	cbnz	r0, b5fac <_ZN7FatFile6removeEv+0x38>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   b5f9c:	2000      	movs	r0, #0
   b5f9e:	e048      	b.n	b6032 <_ZN7FatFile6removeEv+0xbe>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b5fa0:	6880      	ldr	r0, [r0, #8]
   b5fa2:	f000 fb58 	bl	b6656 <_ZN9FatVolume9freeChainEm>
   b5fa6:	2800      	cmp	r0, #0
   b5fa8:	d1f2      	bne.n	b5f90 <_ZN7FatFile6removeEv+0x1c>
   b5faa:	e7f7      	b.n	b5f9c <_ZN7FatFile6removeEv+0x28>
  chksum = lfnChecksum(dir->name);
   b5fac:	f7ff fede 	bl	b5d6c <_ZN7FatFile11lfnChecksumEPh>
  dir->name[0] = DIR_NAME_DELETED;
   b5fb0:	27e5      	movs	r7, #229	; 0xe5
   b5fb2:	702f      	strb	r7, [r5, #0]
  m_attr = FILE_ATTR_CLOSED;
   b5fb4:	2300      	movs	r3, #0
  chksum = lfnChecksum(dir->name);
   b5fb6:	4606      	mov	r6, r0
  m_attr = FILE_ATTR_CLOSED;
   b5fb8:	7023      	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
   b5fba:	68a0      	ldr	r0, [r4, #8]
   b5fbc:	f7ff fb6a 	bl	b5694 <_ZN9FatVolume9cacheSyncEv>
   b5fc0:	2800      	cmp	r0, #0
   b5fc2:	d0eb      	beq.n	b5f9c <_ZN7FatFile6removeEv+0x28>
  if (!isLFN()) {
   b5fc4:	78e3      	ldrb	r3, [r4, #3]
   b5fc6:	2b00      	cmp	r3, #0
   b5fc8:	d033      	beq.n	b6032 <_ZN7FatFile6removeEv+0xbe>
  if (!dirFile.openCluster(this)) {
   b5fca:	4621      	mov	r1, r4
   b5fcc:	a801      	add	r0, sp, #4
   b5fce:	f7ff fedc 	bl	b5d8a <_ZN7FatFile11openClusterEPS_>
   b5fd2:	2800      	cmp	r0, #0
   b5fd4:	d0e2      	beq.n	b5f9c <_ZN7FatFile6removeEv+0x28>
   b5fd6:	2501      	movs	r5, #1
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   b5fd8:	78e3      	ldrb	r3, [r4, #3]
   b5fda:	fa5f f885 	uxtb.w	r8, r5
   b5fde:	4543      	cmp	r3, r8
   b5fe0:	d3dc      	bcc.n	b5f9c <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b5fe2:	88a1      	ldrh	r1, [r4, #4]
   b5fe4:	1b49      	subs	r1, r1, r5
   b5fe6:	0149      	lsls	r1, r1, #5
   b5fe8:	a801      	add	r0, sp, #4
   b5fea:	f7ff fc9e 	bl	b592a <_ZN7FatFile7seekSetEm>
   b5fee:	2800      	cmp	r0, #0
   b5ff0:	d0d4      	beq.n	b5f9c <_ZN7FatFile6removeEv+0x28>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b5ff2:	2100      	movs	r1, #0
   b5ff4:	a801      	add	r0, sp, #4
   b5ff6:	f7ff fc79 	bl	b58ec <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b5ffa:	2800      	cmp	r0, #0
   b5ffc:	d0ce      	beq.n	b5f9c <_ZN7FatFile6removeEv+0x28>
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b5ffe:	7ac3      	ldrb	r3, [r0, #11]
   b6000:	2b0f      	cmp	r3, #15
   b6002:	d1cb      	bne.n	b5f9c <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b6004:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b6006:	f002 031f 	and.w	r3, r2, #31
   b600a:	4543      	cmp	r3, r8
   b600c:	d1c6      	bne.n	b5f9c <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b600e:	7b43      	ldrb	r3, [r0, #13]
   b6010:	42b3      	cmp	r3, r6
   b6012:	d1c3      	bne.n	b5f9c <_ZN7FatFile6removeEv+0x28>
    ldir->ord = DIR_NAME_DELETED;
   b6014:	7007      	strb	r7, [r0, #0]
    m_vol->cacheDirty();
   b6016:	68a1      	ldr	r1, [r4, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6018:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   b601c:	f043 0301 	orr.w	r3, r3, #1
   b6020:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   b6024:	0653      	lsls	r3, r2, #25
   b6026:	f105 0501 	add.w	r5, r5, #1
   b602a:	d5d5      	bpl.n	b5fd8 <_ZN7FatFile6removeEv+0x64>
      if (!m_vol->cacheSync()) {
   b602c:	68a0      	ldr	r0, [r4, #8]
   b602e:	f7ff fb31 	bl	b5694 <_ZN9FatVolume9cacheSyncEv>
}
   b6032:	b00a      	add	sp, #40	; 0x28
   b6034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6038 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b603c:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6040:	4606      	mov	r6, r0
   b6042:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b6044:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b6046:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b6048:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b604c:	6861      	ldr	r1, [r4, #4]
   b604e:	68a2      	ldr	r2, [r4, #8]
   b6050:	186b      	adds	r3, r5, r1
   b6052:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6054:	4411      	add	r1, r2
   b6056:	4291      	cmp	r1, r2
   b6058:	d006      	beq.n	b6068 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b605a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b605e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b6062:	4043      	eors	r3, r0
   b6064:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6066:	e7f6      	b.n	b6056 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b6068:	f1b9 0f03 	cmp.w	r9, #3
   b606c:	bf28      	it	cs
   b606e:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6072:	f109 0204 	add.w	r2, r9, #4
   b6076:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b6078:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b607c:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b607e:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6080:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6082:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6084:	bf94      	ite	ls
   b6086:	3130      	addls	r1, #48	; 0x30
   b6088:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b608a:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b608c:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b608e:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6092:	d1f1      	bne.n	b6078 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b6094:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b6098:	2100      	movs	r1, #0
   b609a:	735f      	strb	r7, [r3, #13]
   b609c:	4630      	mov	r0, r6
   b609e:	f7ff fc44 	bl	b592a <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b60a2:	2101      	movs	r1, #1
   b60a4:	4630      	mov	r0, r6
   b60a6:	f7ff fc21 	bl	b58ec <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b60aa:	4601      	mov	r1, r0
   b60ac:	b928      	cbnz	r0, b60ba <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b60ae:	7870      	ldrb	r0, [r6, #1]
   b60b0:	fab0 f080 	clz	r0, r0
   b60b4:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b60b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b60ba:	7803      	ldrb	r3, [r0, #0]
   b60bc:	b16b      	cbz	r3, b60da <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b60be:	7ac3      	ldrb	r3, [r0, #11]
   b60c0:	071b      	lsls	r3, r3, #28
   b60c2:	d4ee      	bmi.n	b60a2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b60c4:	220b      	movs	r2, #11
   b60c6:	4640      	mov	r0, r8
   b60c8:	f005 fdc5 	bl	bbc56 <memcmp>
   b60cc:	2800      	cmp	r0, #0
   b60ce:	d1e8      	bne.n	b60a2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b60d0:	3501      	adds	r5, #1
   b60d2:	b2ad      	uxth	r5, r5
   b60d4:	2d64      	cmp	r5, #100	; 0x64
   b60d6:	d1b9      	bne.n	b604c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b60d8:	e7ed      	b.n	b60b6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b60da:	2001      	movs	r0, #1
   b60dc:	e7eb      	b.n	b60b6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b60e0 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b60e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b60e4:	ed2d 8b02 	vpush	{d8}
   b60e8:	b08b      	sub	sp, #44	; 0x2c
   b60ea:	460d      	mov	r5, r1
   b60ec:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b60ee:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b60f0:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b60f2:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b60f6:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b60f8:	d105      	bne.n	b6106 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b60fa:	2000      	movs	r0, #0
}
   b60fc:	b00b      	add	sp, #44	; 0x2c
   b60fe:	ecbd 8b02 	vpop	{d8}
   b6102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b6106:	9b07      	ldr	r3, [sp, #28]
   b6108:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b610a:	2b00      	cmp	r3, #0
   b610c:	d1f5      	bne.n	b60fa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b610e:	6853      	ldr	r3, [r2, #4]
   b6110:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b6112:	7813      	ldrb	r3, [r2, #0]
   b6114:	079c      	lsls	r4, r3, #30
   b6116:	bf1f      	itttt	ne
   b6118:	9b05      	ldrne	r3, [sp, #20]
   b611a:	330c      	addne	r3, #12
   b611c:	220d      	movne	r2, #13
   b611e:	fbb3 f3f2 	udivne	r3, r3, r2
   b6122:	bf1a      	itte	ne
   b6124:	3301      	addne	r3, #1
   b6126:	b2db      	uxtbne	r3, r3
   b6128:	2301      	moveq	r3, #1
    seekSet(0);
   b612a:	2100      	movs	r1, #0
   b612c:	4628      	mov	r0, r5
   b612e:	9303      	str	r3, [sp, #12]
   b6130:	f7ff fbfb 	bl	b592a <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6134:	f107 030d 	add.w	r3, r7, #13
  }
   b6138:	f04f 0b00 	mov.w	fp, #0
   b613c:	ee08 3a10 	vmov	s16, r3
   b6140:	46da      	mov	sl, fp
   b6142:	465c      	mov	r4, fp
   b6144:	465e      	mov	r6, fp
   b6146:	f8cd b010 	str.w	fp, [sp, #16]
   b614a:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b614c:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b614e:	2101      	movs	r1, #1
   b6150:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b6152:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b6156:	f7ff fbc9 	bl	b58ec <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b615a:	4603      	mov	r3, r0
   b615c:	2800      	cmp	r0, #0
   b615e:	d171      	bne.n	b6244 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b6160:	786b      	ldrb	r3, [r5, #1]
   b6162:	2b00      	cmp	r3, #0
   b6164:	d1c9      	bne.n	b60fa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b6166:	9b06      	ldr	r3, [sp, #24]
   b6168:	059a      	lsls	r2, r3, #22
   b616a:	d5c6      	bpl.n	b60fa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b616c:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b6170:	3b01      	subs	r3, #1
   b6172:	2b01      	cmp	r3, #1
   b6174:	d8c1      	bhi.n	b60fa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b6176:	9b04      	ldr	r3, [sp, #16]
   b6178:	2c00      	cmp	r4, #0
   b617a:	bf08      	it	eq
   b617c:	4643      	moveq	r3, r8
   b617e:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b6180:	9b03      	ldr	r3, [sp, #12]
   b6182:	429c      	cmp	r4, r3
   b6184:	f0c0 80f1 	bcc.w	b636a <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b6188:	f1b9 0f00 	cmp.w	r9, #0
   b618c:	f040 810a 	bne.w	b63a4 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b6190:	9b04      	ldr	r3, [sp, #16]
   b6192:	4628      	mov	r0, r5
   b6194:	0159      	lsls	r1, r3, #5
   b6196:	f7ff fbc8 	bl	b592a <_ZN7FatFile7seekSetEm>
   b619a:	2800      	cmp	r0, #0
   b619c:	d0ad      	beq.n	b60fa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b619e:	9b03      	ldr	r3, [sp, #12]
   b61a0:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b61a4:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b61a8:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b61aa:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b61ae:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b61b2:	2e00      	cmp	r6, #0
   b61b4:	f000 810d 	beq.w	b63d2 <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b61b8:	2100      	movs	r1, #0
   b61ba:	4628      	mov	r0, r5
   b61bc:	f7ff fb96 	bl	b58ec <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b61c0:	4604      	mov	r4, r0
   b61c2:	2800      	cmp	r0, #0
   b61c4:	d099      	beq.n	b60fa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b61c6:	68aa      	ldr	r2, [r5, #8]
   b61c8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b61cc:	454e      	cmp	r6, r9
   b61ce:	f043 0301 	orr.w	r3, r3, #1
   b61d2:	bf0c      	ite	eq
   b61d4:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b61d8:	46b3      	movne	fp, r6
   b61da:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b61de:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b61e2:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b61e6:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b61ea:	f107 000d 	add.w	r0, r7, #13
   b61ee:	f7ff fdbd 	bl	b5d6c <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b61f2:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b61f6:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b61f8:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b61fc:	f00b 031f 	and.w	r3, fp, #31
   b6200:	220d      	movs	r2, #13
   b6202:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b6204:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6208:	4353      	muls	r3, r2
   b620a:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b620c:	9905      	ldr	r1, [sp, #20]
   b620e:	4299      	cmp	r1, r3
   b6210:	f240 80d0 	bls.w	b63b4 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b6214:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b6218:	2a04      	cmp	r2, #4
   b621a:	fa5f fe82 	uxtb.w	lr, r2
   b621e:	f102 0001 	add.w	r0, r2, #1
   b6222:	f200 80cd 	bhi.w	b63c0 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b6226:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b622a:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b622e:	280d      	cmp	r0, #13
   b6230:	f103 0301 	add.w	r3, r3, #1
   b6234:	4602      	mov	r2, r0
   b6236:	d1e9      	bne.n	b620c <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6238:	3e01      	subs	r6, #1
   b623a:	b2f6      	uxtb	r6, r6
   b623c:	e7b9      	b.n	b61b2 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b623e:	f04f 0901 	mov.w	r9, #1
   b6242:	e783      	b.n	b614c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b6244:	7802      	ldrb	r2, [r0, #0]
   b6246:	2ae5      	cmp	r2, #229	; 0xe5
   b6248:	d000      	beq.n	b624c <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b624a:	b97a      	cbnz	r2, b626c <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b624c:	9904      	ldr	r1, [sp, #16]
   b624e:	2c00      	cmp	r4, #0
   b6250:	bf08      	it	eq
   b6252:	4641      	moveq	r1, r8
   b6254:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b6256:	9903      	ldr	r1, [sp, #12]
   b6258:	428c      	cmp	r4, r1
        freeFound++;
   b625a:	bf3c      	itt	cc
   b625c:	3401      	addcc	r4, #1
   b625e:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b6260:	2a00      	cmp	r2, #0
   b6262:	d080      	beq.n	b6166 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6264:	2ae5      	cmp	r2, #229	; 0xe5
   b6266:	d105      	bne.n	b6274 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b6268:	2600      	movs	r6, #0
   b626a:	e76f      	b.n	b614c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b626c:	9903      	ldr	r1, [sp, #12]
   b626e:	428c      	cmp	r4, r1
   b6270:	bf38      	it	cc
   b6272:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6274:	2a2e      	cmp	r2, #46	; 0x2e
   b6276:	d0f7      	beq.n	b6268 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b6278:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b627a:	290f      	cmp	r1, #15
   b627c:	d14a      	bne.n	b6314 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b627e:	bb16      	cbnz	r6, b62c6 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b6280:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b6284:	f43f af62 	beq.w	b614c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b6288:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b628c:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b6290:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b6292:	220d      	movs	r2, #13
   b6294:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b6298:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b629c:	9a05      	ldr	r2, [sp, #20]
   b629e:	4542      	cmp	r2, r8
   b62a0:	d9e2      	bls.n	b6268 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b62a2:	eba2 0208 	sub.w	r2, r2, r8
   b62a6:	9208      	str	r2, [sp, #32]
   b62a8:	2200      	movs	r2, #0
   b62aa:	eb02 0108 	add.w	r1, r2, r8
   b62ae:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b62b0:	4618      	mov	r0, r3
   b62b2:	b2d1      	uxtb	r1, r2
   b62b4:	f7ff fd46 	bl	b5d44 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b62b8:	9908      	ldr	r1, [sp, #32]
   b62ba:	428a      	cmp	r2, r1
   b62bc:	d10d      	bne.n	b62da <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b62be:	2800      	cmp	r0, #0
   b62c0:	bf18      	it	ne
   b62c2:	2600      	movne	r6, #0
   b62c4:	e742      	b.n	b614c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b62c6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b62ca:	fa5f fa8a 	uxtb.w	sl, sl
   b62ce:	4552      	cmp	r2, sl
   b62d0:	d1ca      	bne.n	b6268 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b62d2:	7b5a      	ldrb	r2, [r3, #13]
   b62d4:	455a      	cmp	r2, fp
   b62d6:	d0dc      	beq.n	b6292 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b62d8:	e7c6      	b.n	b6268 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b62da:	28ff      	cmp	r0, #255	; 0xff
   b62dc:	d8c4      	bhi.n	b6268 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b62de:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b62e2:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b62e6:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b62e8:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b62ea:	bf9c      	itt	ls
   b62ec:	f10e 0020 	addls.w	r0, lr, #32
   b62f0:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b62f4:	4608      	mov	r0, r1
   b62f6:	9909      	ldr	r1, [sp, #36]	; 0x24
   b62f8:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b62fa:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b62fe:	f1bc 0f19 	cmp.w	ip, #25
   b6302:	bf9c      	itt	ls
   b6304:	3120      	addls	r1, #32
   b6306:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6308:	4571      	cmp	r1, lr
   b630a:	d1ad      	bne.n	b6268 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b630c:	3201      	adds	r2, #1
   b630e:	2a0d      	cmp	r2, #13
   b6310:	d1cb      	bne.n	b62aa <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b6312:	e71b      	b.n	b614c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6314:	0708      	lsls	r0, r1, #28
   b6316:	d4a7      	bmi.n	b6268 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b6318:	b15e      	cbz	r6, b6332 <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b631a:	f1ba 0f01 	cmp.w	sl, #1
   b631e:	f47f aeec 	bne.w	b60fa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b6322:	4618      	mov	r0, r3
   b6324:	f7ff fd22 	bl	b5d6c <_ZN7FatFile11lfnChecksumEPh>
   b6328:	4558      	cmp	r0, fp
   b632a:	f47f aee6 	bne.w	b60fa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b632e:	46b1      	mov	r9, r6
   b6330:	e00e      	b.n	b6350 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6332:	ee18 1a10 	vmov	r1, s16
   b6336:	220b      	movs	r2, #11
   b6338:	4618      	mov	r0, r3
   b633a:	f005 fc8c 	bl	bbc56 <memcmp>
   b633e:	2800      	cmp	r0, #0
   b6340:	f47f af04 	bne.w	b614c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b6344:	f897 9000 	ldrb.w	r9, [r7]
   b6348:	f019 0901 	ands.w	r9, r9, #1
   b634c:	f47f af77 	bne.w	b623e <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b6350:	9b06      	ldr	r3, [sp, #24]
   b6352:	0519      	lsls	r1, r3, #20
   b6354:	f53f aed1 	bmi.w	b60fa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b6358:	9b06      	ldr	r3, [sp, #24]
   b635a:	9807      	ldr	r0, [sp, #28]
   b635c:	f8cd 9000 	str.w	r9, [sp]
   b6360:	4642      	mov	r2, r8
   b6362:	4629      	mov	r1, r5
   b6364:	f7ff fb24 	bl	b59b0 <_ZN7FatFile15openCachedEntryEPS_tih>
   b6368:	e6c8      	b.n	b60fc <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b636a:	2100      	movs	r1, #0
   b636c:	4628      	mov	r0, r5
   b636e:	f7ff fabd 	bl	b58ec <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6372:	b9a0      	cbnz	r0, b639e <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b6374:	786b      	ldrb	r3, [r5, #1]
   b6376:	2b00      	cmp	r3, #0
   b6378:	f47f aebf 	bne.w	b60fa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b637c:	4628      	mov	r0, r5
   b637e:	f7ff f9a1 	bl	b56c4 <_ZN7FatFile13addDirClusterEv>
   b6382:	2800      	cmp	r0, #0
   b6384:	f43f aeb9 	beq.w	b60fa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b6388:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b638a:	791b      	ldrb	r3, [r3, #4]
   b638c:	2b01      	cmp	r3, #1
   b638e:	f63f aefb 	bhi.w	b6188 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b6392:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b6394:	3410      	adds	r4, #16
   b6396:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6398:	42a3      	cmp	r3, r4
   b639a:	d8ef      	bhi.n	b637c <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b639c:	e6f4      	b.n	b6188 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b639e:	3401      	adds	r4, #1
   b63a0:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b63a2:	e6ed      	b.n	b6180 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b63a4:	4639      	mov	r1, r7
   b63a6:	4628      	mov	r0, r5
   b63a8:	f7ff fe46 	bl	b6038 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b63ac:	2800      	cmp	r0, #0
   b63ae:	f47f aeef 	bne.w	b6190 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b63b2:	e6a2      	b.n	b60fa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b63b4:	bf14      	ite	ne
   b63b6:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b63ba:	2100      	moveq	r1, #0
   b63bc:	b289      	uxth	r1, r1
   b63be:	e72b      	b.n	b6218 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b63c0:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b63c4:	bf94      	ite	ls
   b63c6:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b63ca:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b63ce:	8091      	strh	r1, [r2, #4]
   b63d0:	e72d      	b.n	b622e <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b63d2:	4631      	mov	r1, r6
   b63d4:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b63d6:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b63da:	f7ff fa87 	bl	b58ec <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b63de:	4604      	mov	r4, r0
   b63e0:	2800      	cmp	r0, #0
   b63e2:	f43f ae8a 	beq.w	b60fa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b63e6:	2220      	movs	r2, #32
   b63e8:	4631      	mov	r1, r6
   b63ea:	f005 fc6c 	bl	bbcc6 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b63ee:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b63f2:	6023      	str	r3, [r4, #0]
   b63f4:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b63f8:	6063      	str	r3, [r4, #4]
   b63fa:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b63fe:	8123      	strh	r3, [r4, #8]
   b6400:	7dfb      	ldrb	r3, [r7, #23]
   b6402:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b6404:	783b      	ldrb	r3, [r7, #0]
   b6406:	f003 0318 	and.w	r3, r3, #24
   b640a:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b640c:	4b0f      	ldr	r3, [pc, #60]	; (b644c <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b640e:	681b      	ldr	r3, [r3, #0]
   b6410:	b19b      	cbz	r3, b643a <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b6412:	f104 010e 	add.w	r1, r4, #14
   b6416:	f104 0010 	add.w	r0, r4, #16
   b641a:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b641c:	8a23      	ldrh	r3, [r4, #16]
   b641e:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b6420:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b6422:	89e3      	ldrh	r3, [r4, #14]
   b6424:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b6426:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6428:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b642c:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b6430:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b6434:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b6438:	e78e      	b.n	b6358 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b643a:	2321      	movs	r3, #33	; 0x21
   b643c:	7423      	strb	r3, [r4, #16]
   b643e:	2328      	movs	r3, #40	; 0x28
   b6440:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b6442:	2308      	movs	r3, #8
   b6444:	73a6      	strb	r6, [r4, #14]
   b6446:	73e3      	strb	r3, [r4, #15]
   b6448:	e7e8      	b.n	b641c <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b644a:	bf00      	nop
   b644c:	2003e640 	.word	0x2003e640

000b6450 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6450:	b513      	push	{r0, r1, r4, lr}
   b6452:	4604      	mov	r4, r0
    }
   b6454:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6456:	b159      	cbz	r1, b6470 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6458:	9101      	str	r1, [sp, #4]
   b645a:	f005 fcaa 	bl	bbdb2 <strlen>
   b645e:	6823      	ldr	r3, [r4, #0]
   b6460:	9901      	ldr	r1, [sp, #4]
   b6462:	68db      	ldr	r3, [r3, #12]
   b6464:	4602      	mov	r2, r0
   b6466:	4620      	mov	r0, r4
    }
   b6468:	b002      	add	sp, #8
   b646a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b646e:	4718      	bx	r3
    }
   b6470:	b002      	add	sp, #8
   b6472:	bd10      	pop	{r4, pc}

000b6474 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b6474:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b6476:	7803      	ldrb	r3, [r0, #0]
   b6478:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b647a:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b647c:	d520      	bpl.n	b64c0 <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b647e:	6843      	ldr	r3, [r0, #4]
   b6480:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b6482:	f100 020c 	add.w	r2, r0, #12
   b6486:	6818      	ldr	r0, [r3, #0]
   b6488:	9201      	str	r2, [sp, #4]
   b648a:	f000 fb88 	bl	b6b9e <_ZN9SdSpiCard10writeBlockEmPKh>
   b648e:	9a01      	ldr	r2, [sp, #4]
   b6490:	4605      	mov	r5, r0
   b6492:	b918      	cbnz	r0, b649c <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b6494:	2500      	movs	r5, #0
}
   b6496:	4628      	mov	r0, r5
   b6498:	b003      	add	sp, #12
   b649a:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b649c:	7823      	ldrb	r3, [r4, #0]
   b649e:	079b      	lsls	r3, r3, #30
   b64a0:	d404      	bmi.n	b64ac <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b64a2:	7823      	ldrb	r3, [r4, #0]
   b64a4:	f023 0301 	bic.w	r3, r3, #1
   b64a8:	7023      	strb	r3, [r4, #0]
   b64aa:	e7f4      	b.n	b6496 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b64ac:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b64b0:	6919      	ldr	r1, [r3, #16]
   b64b2:	4401      	add	r1, r0
   b64b4:	6818      	ldr	r0, [r3, #0]
   b64b6:	f000 fb72 	bl	b6b9e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b64ba:	2800      	cmp	r0, #0
   b64bc:	d1f1      	bne.n	b64a2 <_ZN8FatCache4syncEv+0x2e>
   b64be:	e7e9      	b.n	b6494 <_ZN8FatCache4syncEv+0x20>
  return true;
   b64c0:	2501      	movs	r5, #1
   b64c2:	e7e8      	b.n	b6496 <_ZN8FatCache4syncEv+0x22>

000b64c4 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b64c4:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b64c6:	6883      	ldr	r3, [r0, #8]
   b64c8:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b64ca:	4604      	mov	r4, r0
   b64cc:	460e      	mov	r6, r1
   b64ce:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b64d0:	d009      	beq.n	b64e6 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b64d2:	f7ff ffcf 	bl	b6474 <_ZN8FatCache4syncEv>
   b64d6:	b908      	cbnz	r0, b64dc <_ZN8FatCache4readEmh+0x18>
  return 0;
   b64d8:	2000      	movs	r0, #0
}
   b64da:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b64dc:	076b      	lsls	r3, r5, #29
   b64de:	d50a      	bpl.n	b64f6 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b64e0:	2300      	movs	r3, #0
   b64e2:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b64e4:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b64e6:	7822      	ldrb	r2, [r4, #0]
   b64e8:	f005 0503 	and.w	r5, r5, #3
   b64ec:	4620      	mov	r0, r4
   b64ee:	4315      	orrs	r5, r2
   b64f0:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b64f4:	e7f1      	b.n	b64da <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b64f6:	6863      	ldr	r3, [r4, #4]
   b64f8:	f104 020c 	add.w	r2, r4, #12
   b64fc:	6818      	ldr	r0, [r3, #0]
   b64fe:	4631      	mov	r1, r6
   b6500:	f000 fac4 	bl	b6a8c <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b6504:	2800      	cmp	r0, #0
   b6506:	d1eb      	bne.n	b64e0 <_ZN8FatCache4readEmh+0x1c>
   b6508:	e7e6      	b.n	b64d8 <_ZN8FatCache4readEmh+0x14>

000b650a <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b650a:	7983      	ldrb	r3, [r0, #6]
   b650c:	6940      	ldr	r0, [r0, #20]
   b650e:	3902      	subs	r1, #2
   b6510:	4099      	lsls	r1, r3
}
   b6512:	4408      	add	r0, r1
   b6514:	4770      	bx	lr

000b6516 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b6516:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b6518:	b570      	push	{r4, r5, r6, lr}
   b651a:	4605      	mov	r5, r0
   b651c:	460c      	mov	r4, r1
   b651e:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b6520:	d802      	bhi.n	b6528 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b6522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b6526:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b6528:	69c3      	ldr	r3, [r0, #28]
   b652a:	428b      	cmp	r3, r1
   b652c:	d3f9      	bcc.n	b6522 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b652e:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b6530:	2b20      	cmp	r3, #32
   b6532:	d116      	bne.n	b6562 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b6534:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b6536:	2202      	movs	r2, #2
   b6538:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b653c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6540:	f7ff ffc0 	bl	b64c4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6544:	2800      	cmp	r0, #0
   b6546:	d0ec      	beq.n	b6522 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b6548:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b654c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b6550:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b6554:	69ea      	ldr	r2, [r5, #28]
   b6556:	429a      	cmp	r2, r3
  *value = next;
   b6558:	bf26      	itte	cs
   b655a:	6033      	strcs	r3, [r6, #0]
  return 1;
   b655c:	2001      	movcs	r0, #1
    return 0;
   b655e:	2000      	movcc	r0, #0
   b6560:	e7e1      	b.n	b6526 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b6562:	2b10      	cmp	r3, #16
   b6564:	d1dd      	bne.n	b6522 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b6566:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b656a:	6981      	ldr	r1, [r0, #24]
   b656c:	2202      	movs	r2, #2
   b656e:	4419      	add	r1, r3
   b6570:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6574:	f7ff ffa6 	bl	b64c4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6578:	2800      	cmp	r0, #0
   b657a:	d0d2      	beq.n	b6522 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b657c:	b2e4      	uxtb	r4, r4
   b657e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b6582:	e7e7      	b.n	b6554 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b6584 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b6584:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b6586:	b538      	push	{r3, r4, r5, lr}
   b6588:	460c      	mov	r4, r1
   b658a:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b658c:	d801      	bhi.n	b6592 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b658e:	2000      	movs	r0, #0
}
   b6590:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b6592:	69c3      	ldr	r3, [r0, #28]
   b6594:	428b      	cmp	r3, r1
   b6596:	d3fa      	bcc.n	b658e <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b6598:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b659a:	2b20      	cmp	r3, #32
   b659c:	d10f      	bne.n	b65be <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b659e:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b65a0:	2203      	movs	r2, #3
   b65a2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b65a6:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b65aa:	f7ff ff8b 	bl	b64c4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b65ae:	2800      	cmp	r0, #0
   b65b0:	d0ed      	beq.n	b658e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b65b2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b65b6:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b65ba:	2001      	movs	r0, #1
   b65bc:	e7e8      	b.n	b6590 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b65be:	2b10      	cmp	r3, #16
   b65c0:	d1e5      	bne.n	b658e <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b65c2:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b65c6:	6981      	ldr	r1, [r0, #24]
   b65c8:	2203      	movs	r2, #3
   b65ca:	4419      	add	r1, r3
   b65cc:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b65d0:	f7ff ff78 	bl	b64c4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b65d4:	2800      	cmp	r0, #0
   b65d6:	d0da      	beq.n	b658e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b65d8:	b2e4      	uxtb	r4, r4
   b65da:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b65de:	e7ec      	b.n	b65ba <_ZN9FatVolume6fatPutEmm+0x36>

000b65e0 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b65e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b65e4:	68c4      	ldr	r4, [r0, #12]
   b65e6:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b65e8:	4605      	mov	r5, r0
   b65ea:	460e      	mov	r6, r1
   b65ec:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b65ee:	d301      	bcc.n	b65f4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b65f0:	2701      	movs	r7, #1
   b65f2:	e001      	b.n	b65f8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b65f4:	460c      	mov	r4, r1
    setStart = false;
   b65f6:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b65f8:	69eb      	ldr	r3, [r5, #28]
    find++;
   b65fa:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b65fc:	42a3      	cmp	r3, r4
   b65fe:	d202      	bcs.n	b6606 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b6600:	b9c7      	cbnz	r7, b6634 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b6602:	68ec      	ldr	r4, [r5, #12]
   b6604:	e7f4      	b.n	b65f0 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b6606:	42a6      	cmp	r6, r4
   b6608:	d014      	beq.n	b6634 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b660a:	aa01      	add	r2, sp, #4
   b660c:	4621      	mov	r1, r4
   b660e:	4628      	mov	r0, r5
   b6610:	f7ff ff81 	bl	b6516 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b6614:	2800      	cmp	r0, #0
   b6616:	db0d      	blt.n	b6634 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b6618:	d0ee      	beq.n	b65f8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b661a:	9b01      	ldr	r3, [sp, #4]
   b661c:	2b00      	cmp	r3, #0
   b661e:	d1eb      	bne.n	b65f8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b6620:	b107      	cbz	r7, b6624 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b6622:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b6624:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b6628:	4621      	mov	r1, r4
   b662a:	4628      	mov	r0, r5
   b662c:	f7ff ffaa 	bl	b6584 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b6630:	4607      	mov	r7, r0
   b6632:	b920      	cbnz	r0, b663e <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b6634:	2700      	movs	r7, #0
}
   b6636:	4638      	mov	r0, r7
   b6638:	b002      	add	sp, #8
   b663a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b663e:	b916      	cbnz	r6, b6646 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b6640:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b6644:	e7f7      	b.n	b6636 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b6646:	4622      	mov	r2, r4
   b6648:	4631      	mov	r1, r6
   b664a:	4628      	mov	r0, r5
   b664c:	f7ff ff9a 	bl	b6584 <_ZN9FatVolume6fatPutEmm>
   b6650:	2800      	cmp	r0, #0
   b6652:	d1f5      	bne.n	b6640 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b6654:	e7ee      	b.n	b6634 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b6656 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b6656:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6658:	4605      	mov	r5, r0
   b665a:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b665c:	aa01      	add	r2, sp, #4
   b665e:	4621      	mov	r1, r4
   b6660:	4628      	mov	r0, r5
   b6662:	f7ff ff58 	bl	b6516 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b6666:	1e06      	subs	r6, r0, #0
   b6668:	db10      	blt.n	b668c <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b666a:	2200      	movs	r2, #0
   b666c:	4621      	mov	r1, r4
   b666e:	4628      	mov	r0, r5
   b6670:	f7ff ff88 	bl	b6584 <_ZN9FatVolume6fatPutEmm>
   b6674:	b150      	cbz	r0, b668c <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b6676:	68eb      	ldr	r3, [r5, #12]
   b6678:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b667a:	bf24      	itt	cs
   b667c:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b6680:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b6682:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b6684:	2e00      	cmp	r6, #0
   b6686:	d1e9      	bne.n	b665c <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b6688:	b002      	add	sp, #8
   b668a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b668c:	2000      	movs	r0, #0
   b668e:	e7fb      	b.n	b6688 <_ZN9FatVolume9freeChainEm+0x32>

000b6690 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b6690:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b6692:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b6694:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b6696:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b6698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b669c:	4604      	mov	r4, r0
  m_fatType = 0;
   b669e:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b66a0:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b66a4:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b66a6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b66aa:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b66ac:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b66b0:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b66b4:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b66b8:	460d      	mov	r5, r1
   b66ba:	b1b9      	cbz	r1, b66ec <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b66bc:	2904      	cmp	r1, #4
   b66be:	d901      	bls.n	b66c4 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b66c0:	2000      	movs	r0, #0
}
   b66c2:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b66c4:	4611      	mov	r1, r2
   b66c6:	4630      	mov	r0, r6
   b66c8:	f7ff fefc 	bl	b64c4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b66cc:	2800      	cmp	r0, #0
   b66ce:	d0f7      	beq.n	b66c0 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b66d0:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b66d4:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b66d8:	065b      	lsls	r3, r3, #25
   b66da:	d1f1      	bne.n	b66c0 <_ZN9FatVolume4initEh+0x30>
   b66dc:	f105 011b 	add.w	r1, r5, #27
   b66e0:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b66e4:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b66e8:	2d00      	cmp	r5, #0
   b66ea:	d0e9      	beq.n	b66c0 <_ZN9FatVolume4initEh+0x30>
   b66ec:	2200      	movs	r2, #0
   b66ee:	4629      	mov	r1, r5
   b66f0:	4630      	mov	r0, r6
   b66f2:	f7ff fee7 	bl	b64c4 <_ZN8FatCache4readEmh>
  if (!pc) {
   b66f6:	2800      	cmp	r0, #0
   b66f8:	d0e2      	beq.n	b66c0 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b66fa:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b66fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b6702:	d1dd      	bne.n	b66c0 <_ZN9FatVolume4initEh+0x30>
   b6704:	7c03      	ldrb	r3, [r0, #16]
   b6706:	2b02      	cmp	r3, #2
   b6708:	d1da      	bne.n	b66c0 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b670a:	89c3      	ldrh	r3, [r0, #14]
   b670c:	2b00      	cmp	r3, #0
   b670e:	d0d7      	beq.n	b66c0 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b6710:	7b41      	ldrb	r1, [r0, #13]
   b6712:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b6714:	1e4b      	subs	r3, r1, #1
   b6716:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b6718:	2300      	movs	r3, #0
   b671a:	71a3      	strb	r3, [r4, #6]
   b671c:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b671e:	2301      	movs	r3, #1
   b6720:	4299      	cmp	r1, r3
   b6722:	d007      	beq.n	b6734 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b6724:	3e01      	subs	r6, #1
   b6726:	d0cb      	beq.n	b66c0 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b6728:	79a2      	ldrb	r2, [r4, #6]
   b672a:	005b      	lsls	r3, r3, #1
   b672c:	3201      	adds	r2, #1
   b672e:	b2db      	uxtb	r3, r3
   b6730:	71a2      	strb	r2, [r4, #6]
   b6732:	e7f5      	b.n	b6720 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b6734:	8ac1      	ldrh	r1, [r0, #22]
   b6736:	b901      	cbnz	r1, b673a <_ZN9FatVolume4initEh+0xaa>
   b6738:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b673a:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b673c:	89c3      	ldrh	r3, [r0, #14]
   b673e:	442b      	add	r3, r5
   b6740:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b6742:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b6746:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b6748:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b674c:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b674e:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b6752:	0149      	lsls	r1, r1, #5
   b6754:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b6758:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b675c:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b675e:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b6762:	b902      	cbnz	r2, b6766 <_ZN9FatVolume4initEh+0xd6>
   b6764:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b6766:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b6768:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b676a:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b676c:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b676e:	1c4b      	adds	r3, r1, #1
   b6770:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b6772:	f640 73f4 	movw	r3, #4084	; 0xff4
   b6776:	4299      	cmp	r1, r3
   b6778:	d802      	bhi.n	b6780 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b677a:	230c      	movs	r3, #12
   b677c:	71e3      	strb	r3, [r4, #7]
   b677e:	e79f      	b.n	b66c0 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b6780:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b6784:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b6786:	bf85      	ittet	hi
   b6788:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b678a:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b678c:	2310      	movls	r3, #16
    m_fatType = 32;
   b678e:	2320      	movhi	r3, #32
   b6790:	71e3      	strb	r3, [r4, #7]
  return true;
   b6792:	2001      	movs	r0, #1
   b6794:	e795      	b.n	b66c2 <_ZN9FatVolume4initEh+0x32>

000b6796 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b6796:	f000 bacb 	b.w	b6d30 <_ZN14SdSpiAltDriver4sendEh>

000b679a <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b679a:	f000 baae 	b.w	b6cfa <_ZN14SdSpiAltDriver7receiveEv>
	...

000b67a0 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b67a0:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b67a2:	4e0e      	ldr	r6, [pc, #56]	; (b67dc <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b67a4:	460d      	mov	r5, r1
   b67a6:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b67a8:	f000 fbd6 	bl	b6f58 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b67ac:	6833      	ldr	r3, [r6, #0]
   b67ae:	1ac0      	subs	r0, r0, r3
   b67b0:	4b0b      	ldr	r3, [pc, #44]	; (b67e0 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b67b2:	4298      	cmp	r0, r3
   b67b4:	d908      	bls.n	b67c8 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b67b6:	f000 fbd7 	bl	b6f68 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b67ba:	4b0a      	ldr	r3, [pc, #40]	; (b67e4 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b67bc:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b67be:	f000 fd87 	bl	b72d0 <spark_process>
   b67c2:	f000 fbc9 	bl	b6f58 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b67c6:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b67c8:	f000 fbce 	bl	b6f68 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b67cc:	b280      	uxth	r0, r0
   b67ce:	1b40      	subs	r0, r0, r5
}
   b67d0:	42a0      	cmp	r0, r4
   b67d2:	bfd4      	ite	le
   b67d4:	2000      	movle	r0, #0
   b67d6:	2001      	movgt	r0, #1
   b67d8:	bd70      	pop	{r4, r5, r6, pc}
   b67da:	bf00      	nop
   b67dc:	2003e648 	.word	0x2003e648
   b67e0:	000186a0 	.word	0x000186a0
   b67e4:	2003e72c 	.word	0x2003e72c

000b67e8 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b67e8:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b67ea:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b67ec:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b67ee:	b94d      	cbnz	r5, b6804 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b67f0:	6840      	ldr	r0, [r0, #4]
   b67f2:	f000 fa6b 	bl	b6ccc <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b67f6:	6863      	ldr	r3, [r4, #4]
   b67f8:	4629      	mov	r1, r5
   b67fa:	7d18      	ldrb	r0, [r3, #20]
   b67fc:	f004 fb4d 	bl	bae9a <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b6800:	2301      	movs	r3, #1
   b6802:	7223      	strb	r3, [r4, #8]
  }
}
   b6804:	bd38      	pop	{r3, r4, r5, pc}

000b6806 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b6806:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b6808:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b680a:	4604      	mov	r4, r0
  if (m_spiActive) {
   b680c:	b16b      	cbz	r3, b682a <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b680e:	6843      	ldr	r3, [r0, #4]
   b6810:	2101      	movs	r1, #1
   b6812:	7d18      	ldrb	r0, [r3, #20]
   b6814:	f004 fb41 	bl	bae9a <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b6818:	6860      	ldr	r0, [r4, #4]
   b681a:	21ff      	movs	r1, #255	; 0xff
   b681c:	f7ff ffbb 	bl	b6796 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b6820:	6860      	ldr	r0, [r4, #4]
   b6822:	f000 fa67 	bl	b6cf4 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b6826:	2300      	movs	r3, #0
   b6828:	7223      	strb	r3, [r4, #8]
  }
}
   b682a:	bd10      	pop	{r4, pc}

000b682c <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b682c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b682e:	4604      	mov	r4, r0
   b6830:	460d      	mov	r5, r1
   b6832:	4616      	mov	r6, r2
   b6834:	f000 fb98 	bl	b6f68 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b6838:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b683a:	6860      	ldr	r0, [r4, #4]
   b683c:	f7ff ffad 	bl	b679a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6840:	28ff      	cmp	r0, #255	; 0xff
   b6842:	7260      	strb	r0, [r4, #9]
   b6844:	d10e      	bne.n	b6864 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b6846:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b684a:	4639      	mov	r1, r7
   b684c:	4620      	mov	r0, r4
   b684e:	f7ff ffa7 	bl	b67a0 <_ZN9SdSpiCard10isTimedOutEtt>
   b6852:	2800      	cmp	r0, #0
   b6854:	d0f1      	beq.n	b683a <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b6856:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b6858:	4620      	mov	r0, r4
   b685a:	7023      	strb	r3, [r4, #0]
   b685c:	f7ff ffd3 	bl	b6806 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6860:	2000      	movs	r0, #0
}
   b6862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b6864:	28fe      	cmp	r0, #254	; 0xfe
   b6866:	d001      	beq.n	b686c <_ZN9SdSpiCard8readDataEPhj+0x40>
   b6868:	2350      	movs	r3, #80	; 0x50
   b686a:	e7f5      	b.n	b6858 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b686c:	6860      	ldr	r0, [r4, #4]
   b686e:	4632      	mov	r2, r6
   b6870:	4629      	mov	r1, r5
   b6872:	f000 fa47 	bl	b6d04 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b6876:	7260      	strb	r0, [r4, #9]
   b6878:	b108      	cbz	r0, b687e <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b687a:	2360      	movs	r3, #96	; 0x60
   b687c:	e7ec      	b.n	b6858 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b687e:	6860      	ldr	r0, [r4, #4]
   b6880:	f7ff ff8b 	bl	b679a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b6884:	6860      	ldr	r0, [r4, #4]
   b6886:	f7ff ff88 	bl	b679a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b688a:	2001      	movs	r0, #1
   b688c:	e7e9      	b.n	b6862 <_ZN9SdSpiCard8readDataEPhj+0x36>

000b688e <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b688e:	b570      	push	{r4, r5, r6, lr}
   b6890:	4604      	mov	r4, r0
   b6892:	460e      	mov	r6, r1
   b6894:	f000 fb68 	bl	b6f68 <HAL_Timer_Get_Milli_Seconds>
   b6898:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b689a:	4632      	mov	r2, r6
   b689c:	4629      	mov	r1, r5
   b689e:	4620      	mov	r0, r4
   b68a0:	f7ff ff7e 	bl	b67a0 <_ZN9SdSpiCard10isTimedOutEtt>
   b68a4:	b930      	cbnz	r0, b68b4 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b68a6:	6860      	ldr	r0, [r4, #4]
   b68a8:	f7ff ff77 	bl	b679a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b68ac:	28ff      	cmp	r0, #255	; 0xff
   b68ae:	d1f4      	bne.n	b689a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b68b0:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b68b2:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b68b4:	2000      	movs	r0, #0
   b68b6:	e7fc      	b.n	b68b2 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b68b8 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b68b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b68ba:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b68bc:	9201      	str	r2, [sp, #4]
   b68be:	4604      	mov	r4, r0
   b68c0:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b68c2:	b90b      	cbnz	r3, b68c8 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b68c4:	f7ff ff90 	bl	b67e8 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b68c8:	b125      	cbz	r5, b68d4 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b68ca:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b68ce:	4620      	mov	r0, r4
   b68d0:	f7ff ffdd 	bl	b688e <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b68d4:	6860      	ldr	r0, [r4, #4]
   b68d6:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b68da:	f7ff ff5c 	bl	b6796 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b68de:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b68e0:	af01      	add	r7, sp, #4
   b68e2:	5db9      	ldrb	r1, [r7, r6]
   b68e4:	6860      	ldr	r0, [r4, #4]
   b68e6:	f7ff ff56 	bl	b6796 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b68ea:	3e01      	subs	r6, #1
   b68ec:	d2f9      	bcs.n	b68e2 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b68ee:	2d00      	cmp	r5, #0
   b68f0:	6860      	ldr	r0, [r4, #4]
   b68f2:	bf0c      	ite	eq
   b68f4:	2195      	moveq	r1, #149	; 0x95
   b68f6:	2187      	movne	r1, #135	; 0x87
   b68f8:	f7ff ff4d 	bl	b6796 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b68fc:	6860      	ldr	r0, [r4, #4]
   b68fe:	f7ff ff4c 	bl	b679a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6902:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b6904:	6860      	ldr	r0, [r4, #4]
   b6906:	f7ff ff48 	bl	b679a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b690a:	0603      	lsls	r3, r0, #24
   b690c:	7260      	strb	r0, [r4, #9]
   b690e:	d503      	bpl.n	b6918 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b6910:	3d01      	subs	r5, #1
   b6912:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b6916:	d1f5      	bne.n	b6904 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b6918:	b003      	add	sp, #12
   b691a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b691c <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b691c:	b570      	push	{r4, r5, r6, lr}
   b691e:	4604      	mov	r4, r0
   b6920:	460d      	mov	r5, r1
   b6922:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b6924:	2137      	movs	r1, #55	; 0x37
   b6926:	2200      	movs	r2, #0
   b6928:	f7ff ffc6 	bl	b68b8 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b692c:	4632      	mov	r2, r6
   b692e:	4629      	mov	r1, r5
   b6930:	4620      	mov	r0, r4
  }
   b6932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b6936:	f7ff bfbf 	b.w	b68b8 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b693c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b693c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b6940:	2500      	movs	r5, #0
   b6942:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b6944:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b6946:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b6948:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b694a:	4604      	mov	r4, r0
   b694c:	4690      	mov	r8, r2
   b694e:	461e      	mov	r6, r3
   b6950:	f000 fb0a 	bl	b6f68 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b6954:	4641      	mov	r1, r8
   b6956:	4607      	mov	r7, r0
   b6958:	6860      	ldr	r0, [r4, #4]
   b695a:	f000 f9bb 	bl	b6cd4 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b695e:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b6960:	4a49      	ldr	r2, [pc, #292]	; (b6a88 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b6962:	721d      	strb	r5, [r3, #8]
   b6964:	2501      	movs	r5, #1
   b6966:	60da      	str	r2, [r3, #12]
   b6968:	821d      	strh	r5, [r3, #16]
  spiStart();
   b696a:	4620      	mov	r0, r4
   b696c:	f7ff ff3c 	bl	b67e8 <_ZN9SdSpiCard8spiStartEv>
   b6970:	6863      	ldr	r3, [r4, #4]
   b6972:	4629      	mov	r1, r5
   b6974:	7d18      	ldrb	r0, [r3, #20]
   b6976:	f004 fa90 	bl	bae9a <digitalWrite>
   b697a:	250a      	movs	r5, #10
    spiSend(0XFF);
   b697c:	6860      	ldr	r0, [r4, #4]
   b697e:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b6980:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b6982:	f7ff ff08 	bl	b6796 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b6986:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b698a:	d1f7      	bne.n	b697c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b698c:	6863      	ldr	r3, [r4, #4]
   b698e:	4629      	mov	r1, r5
   b6990:	7d18      	ldrb	r0, [r3, #20]
   b6992:	f004 fa82 	bl	bae9a <digitalWrite>
  }
   b6996:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b6998:	2200      	movs	r2, #0
   b699a:	4611      	mov	r1, r2
   b699c:	4620      	mov	r0, r4
   b699e:	f7ff ff8b 	bl	b68b8 <_ZN9SdSpiCard11cardCommandEhm>
   b69a2:	2801      	cmp	r0, #1
   b69a4:	4680      	mov	r8, r0
   b69a6:	d018      	beq.n	b69da <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b69a8:	3d01      	subs	r5, #1
   b69aa:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b69ae:	d107      	bne.n	b69c0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b69b0:	2320      	movs	r3, #32
  spiStop();
   b69b2:	4620      	mov	r0, r4
   b69b4:	7023      	strb	r3, [r4, #0]
   b69b6:	f7ff ff26 	bl	b6806 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b69ba:	2000      	movs	r0, #0
}
   b69bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b69c0:	6860      	ldr	r0, [r4, #4]
   b69c2:	21fd      	movs	r1, #253	; 0xfd
   b69c4:	f7ff fee7 	bl	b6796 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b69c8:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b69cc:	6860      	ldr	r0, [r4, #4]
   b69ce:	f7ff fee4 	bl	b679a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b69d2:	f1b8 0801 	subs.w	r8, r8, #1
   b69d6:	d1f9      	bne.n	b69cc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b69d8:	e7de      	b.n	b6998 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b69da:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b69de:	2108      	movs	r1, #8
   b69e0:	4620      	mov	r0, r4
   b69e2:	f7ff ff69 	bl	b68b8 <_ZN9SdSpiCard11cardCommandEhm>
   b69e6:	2805      	cmp	r0, #5
   b69e8:	d114      	bne.n	b6a14 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b69ea:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b69ee:	2500      	movs	r5, #0
   b69f0:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b69f2:	462a      	mov	r2, r5
   b69f4:	2129      	movs	r1, #41	; 0x29
   b69f6:	4620      	mov	r0, r4
   b69f8:	f7ff ff90 	bl	b691c <_ZN9SdSpiCard8cardAcmdEhm>
   b69fc:	4602      	mov	r2, r0
   b69fe:	b1d8      	cbz	r0, b6a38 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b6a00:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b6a04:	4639      	mov	r1, r7
   b6a06:	4620      	mov	r0, r4
   b6a08:	f7ff feca 	bl	b67a0 <_ZN9SdSpiCard10isTimedOutEtt>
   b6a0c:	2800      	cmp	r0, #0
   b6a0e:	d0f0      	beq.n	b69f2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b6a10:	2343      	movs	r3, #67	; 0x43
   b6a12:	e7ce      	b.n	b69b2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b6a14:	2504      	movs	r5, #4
      m_status = spiReceive();
   b6a16:	6860      	ldr	r0, [r4, #4]
   b6a18:	f7ff febf 	bl	b679a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b6a1c:	3d01      	subs	r5, #1
   b6a1e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b6a22:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b6a24:	d1f7      	bne.n	b6a16 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b6a26:	28aa      	cmp	r0, #170	; 0xaa
   b6a28:	d104      	bne.n	b6a34 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b6a2a:	2302      	movs	r3, #2
   b6a2c:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b6a2e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b6a32:	e7dd      	b.n	b69f0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b6a34:	2325      	movs	r3, #37	; 0x25
   b6a36:	e7bc      	b.n	b69b2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b6a38:	7aa3      	ldrb	r3, [r4, #10]
   b6a3a:	2b02      	cmp	r3, #2
   b6a3c:	d118      	bne.n	b6a70 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b6a3e:	213a      	movs	r1, #58	; 0x3a
   b6a40:	4620      	mov	r0, r4
   b6a42:	f7ff ff39 	bl	b68b8 <_ZN9SdSpiCard11cardCommandEhm>
   b6a46:	b108      	cbz	r0, b6a4c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b6a48:	2337      	movs	r3, #55	; 0x37
   b6a4a:	e7b2      	b.n	b69b2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b6a4c:	6860      	ldr	r0, [r4, #4]
   b6a4e:	f7ff fea4 	bl	b679a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6a52:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b6a56:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b6a58:	bf04      	itt	eq
   b6a5a:	2303      	moveq	r3, #3
   b6a5c:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b6a5e:	6860      	ldr	r0, [r4, #4]
   b6a60:	f7ff fe9b 	bl	b679a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6a64:	6860      	ldr	r0, [r4, #4]
   b6a66:	f7ff fe98 	bl	b679a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6a6a:	6860      	ldr	r0, [r4, #4]
   b6a6c:	f7ff fe95 	bl	b679a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b6a70:	4620      	mov	r0, r4
   b6a72:	f7ff fec8 	bl	b6806 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b6a76:	6863      	ldr	r3, [r4, #4]
   b6a78:	7930      	ldrb	r0, [r6, #4]
   b6a7a:	68b1      	ldr	r1, [r6, #8]
   b6a7c:	89b2      	ldrh	r2, [r6, #12]
   b6a7e:	821a      	strh	r2, [r3, #16]
   b6a80:	7218      	strb	r0, [r3, #8]
   b6a82:	60d9      	str	r1, [r3, #12]
  return true;
   b6a84:	2001      	movs	r0, #1
   b6a86:	e799      	b.n	b69bc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b6a88:	0003d090 	.word	0x0003d090

000b6a8c <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b6a8c:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b6a8e:	7a83      	ldrb	r3, [r0, #10]
   b6a90:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b6a92:	bf18      	it	ne
   b6a94:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b6a96:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b6a98:	460a      	mov	r2, r1
   b6a9a:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b6a9c:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b6a9e:	f7ff ff0b 	bl	b68b8 <_ZN9SdSpiCard11cardCommandEhm>
   b6aa2:	b130      	cbz	r0, b6ab2 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b6aa4:	2330      	movs	r3, #48	; 0x30
   b6aa6:	7023      	strb	r3, [r4, #0]
  spiStop();
   b6aa8:	4620      	mov	r0, r4
   b6aaa:	f7ff feac 	bl	b6806 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6aae:	2500      	movs	r5, #0
   b6ab0:	e00b      	b.n	b6aca <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b6ab2:	4629      	mov	r1, r5
   b6ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6ab8:	4620      	mov	r0, r4
   b6aba:	f7ff feb7 	bl	b682c <_ZN9SdSpiCard8readDataEPhj>
   b6abe:	4605      	mov	r5, r0
   b6ac0:	2800      	cmp	r0, #0
   b6ac2:	d0f1      	beq.n	b6aa8 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b6ac4:	4620      	mov	r0, r4
   b6ac6:	f7ff fe9e 	bl	b6806 <_ZN9SdSpiCard7spiStopEv>
}
   b6aca:	4628      	mov	r0, r5
   b6acc:	bd38      	pop	{r3, r4, r5, pc}

000b6ace <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b6ace:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b6ad0:	7a83      	ldrb	r3, [r0, #10]
   b6ad2:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b6ad4:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b6ad6:	bf18      	it	ne
   b6ad8:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b6ada:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b6adc:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b6ade:	f7ff feeb 	bl	b68b8 <_ZN9SdSpiCard11cardCommandEhm>
   b6ae2:	b130      	cbz	r0, b6af2 <_ZN9SdSpiCard9readStartEm+0x24>
   b6ae4:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b6ae6:	4620      	mov	r0, r4
   b6ae8:	7023      	strb	r3, [r4, #0]
   b6aea:	f7ff fe8c 	bl	b6806 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6aee:	2000      	movs	r0, #0
}
   b6af0:	bd10      	pop	{r4, pc}
  return true;
   b6af2:	2001      	movs	r0, #1
   b6af4:	e7fc      	b.n	b6af0 <_ZN9SdSpiCard9readStartEm+0x22>

000b6af6 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b6af6:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b6af8:	2200      	movs	r2, #0
   b6afa:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b6afc:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b6afe:	f7ff fedb 	bl	b68b8 <_ZN9SdSpiCard11cardCommandEhm>
   b6b02:	b130      	cbz	r0, b6b12 <_ZN9SdSpiCard8readStopEv+0x1c>
   b6b04:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b6b06:	4620      	mov	r0, r4
   b6b08:	7023      	strb	r3, [r4, #0]
   b6b0a:	f7ff fe7c 	bl	b6806 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6b0e:	2000      	movs	r0, #0
}
   b6b10:	bd10      	pop	{r4, pc}
  spiStop();
   b6b12:	4620      	mov	r0, r4
   b6b14:	f7ff fe77 	bl	b6806 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b6b18:	2001      	movs	r0, #1
   b6b1a:	e7f9      	b.n	b6b10 <_ZN9SdSpiCard8readStopEv+0x1a>

000b6b1c <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b6b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6b1e:	4604      	mov	r4, r0
   b6b20:	4616      	mov	r6, r2
   b6b22:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b6b24:	f7ff ffd3 	bl	b6ace <_ZN9SdSpiCard9readStartEm>
   b6b28:	b168      	cbz	r0, b6b46 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b6b2a:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b6b2c:	b2ab      	uxth	r3, r5
   b6b2e:	429f      	cmp	r7, r3
   b6b30:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b6b34:	d909      	bls.n	b6b4a <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b6b36:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6b3a:	4620      	mov	r0, r4
   b6b3c:	f7ff fe76 	bl	b682c <_ZN9SdSpiCard8readDataEPhj>
   b6b40:	3501      	adds	r5, #1
   b6b42:	2800      	cmp	r0, #0
   b6b44:	d1f2      	bne.n	b6b2c <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b6b46:	2000      	movs	r0, #0
   b6b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b6b4a:	4620      	mov	r0, r4
}
   b6b4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b6b50:	f7ff bfd1 	b.w	b6af6 <_ZN9SdSpiCard8readStopEv>

000b6b54 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b6b54:	b538      	push	{r3, r4, r5, lr}
   b6b56:	4604      	mov	r4, r0
   b6b58:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b6b5a:	6840      	ldr	r0, [r0, #4]
   b6b5c:	f7ff fe1b 	bl	b6796 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b6b60:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6b64:	6860      	ldr	r0, [r4, #4]
   b6b66:	4629      	mov	r1, r5
   b6b68:	f000 f8e6 	bl	b6d38 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b6b6c:	6860      	ldr	r0, [r4, #4]
   b6b6e:	21ff      	movs	r1, #255	; 0xff
   b6b70:	f7ff fe11 	bl	b6796 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b6b74:	6860      	ldr	r0, [r4, #4]
   b6b76:	21ff      	movs	r1, #255	; 0xff
   b6b78:	f7ff fe0d 	bl	b6796 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b6b7c:	6860      	ldr	r0, [r4, #4]
   b6b7e:	f7ff fe0c 	bl	b679a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6b82:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b6b84:	f000 001f 	and.w	r0, r0, #31
   b6b88:	2805      	cmp	r0, #5
   b6b8a:	d006      	beq.n	b6b9a <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b6b8c:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b6b8e:	4620      	mov	r0, r4
   b6b90:	7023      	strb	r3, [r4, #0]
   b6b92:	f7ff fe38 	bl	b6806 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6b96:	2000      	movs	r0, #0
}
   b6b98:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b6b9a:	2001      	movs	r0, #1
   b6b9c:	e7fc      	b.n	b6b98 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b6b9e <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b6b9e:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b6ba0:	7a83      	ldrb	r3, [r0, #10]
   b6ba2:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b6ba4:	bf18      	it	ne
   b6ba6:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b6ba8:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b6baa:	460a      	mov	r2, r1
   b6bac:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b6bae:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b6bb0:	f7ff fe82 	bl	b68b8 <_ZN9SdSpiCard11cardCommandEhm>
   b6bb4:	4606      	mov	r6, r0
   b6bb6:	b130      	cbz	r0, b6bc6 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b6bb8:	2332      	movs	r3, #50	; 0x32
   b6bba:	7023      	strb	r3, [r4, #0]
  spiStop();
   b6bbc:	4620      	mov	r0, r4
   b6bbe:	f7ff fe22 	bl	b6806 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6bc2:	2500      	movs	r5, #0
   b6bc4:	e01f      	b.n	b6c06 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b6bc6:	462a      	mov	r2, r5
   b6bc8:	21fe      	movs	r1, #254	; 0xfe
   b6bca:	4620      	mov	r0, r4
   b6bcc:	f7ff ffc2 	bl	b6b54 <_ZN9SdSpiCard9writeDataEhPKh>
   b6bd0:	2800      	cmp	r0, #0
   b6bd2:	d0f3      	beq.n	b6bbc <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6bd4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b6bd8:	4620      	mov	r0, r4
   b6bda:	f7ff fe58 	bl	b688e <_ZN9SdSpiCard11waitNotBusyEt>
   b6bde:	4605      	mov	r5, r0
   b6be0:	b908      	cbnz	r0, b6be6 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b6be2:	235a      	movs	r3, #90	; 0x5a
   b6be4:	e7e9      	b.n	b6bba <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b6be6:	4632      	mov	r2, r6
   b6be8:	210d      	movs	r1, #13
   b6bea:	4620      	mov	r0, r4
   b6bec:	f7ff fe64 	bl	b68b8 <_ZN9SdSpiCard11cardCommandEhm>
   b6bf0:	b108      	cbz	r0, b6bf6 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b6bf2:	2329      	movs	r3, #41	; 0x29
   b6bf4:	e7e1      	b.n	b6bba <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b6bf6:	6860      	ldr	r0, [r4, #4]
   b6bf8:	f7ff fdcf 	bl	b679a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6bfc:	2800      	cmp	r0, #0
   b6bfe:	d1f8      	bne.n	b6bf2 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b6c00:	4620      	mov	r0, r4
   b6c02:	f7ff fe00 	bl	b6806 <_ZN9SdSpiCard7spiStopEv>
}
   b6c06:	4628      	mov	r0, r5
   b6c08:	bd70      	pop	{r4, r5, r6, pc}

000b6c0a <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b6c0a:	b513      	push	{r0, r1, r4, lr}
   b6c0c:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6c0e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b6c12:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6c14:	f7ff fe3b 	bl	b688e <_ZN9SdSpiCard11waitNotBusyEt>
   b6c18:	9a01      	ldr	r2, [sp, #4]
   b6c1a:	b930      	cbnz	r0, b6c2a <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b6c1c:	235b      	movs	r3, #91	; 0x5b
   b6c1e:	7023      	strb	r3, [r4, #0]
  spiStop();
   b6c20:	4620      	mov	r0, r4
   b6c22:	f7ff fdf0 	bl	b6806 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6c26:	2000      	movs	r0, #0
   b6c28:	e005      	b.n	b6c36 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b6c2a:	21fc      	movs	r1, #252	; 0xfc
   b6c2c:	4620      	mov	r0, r4
   b6c2e:	f7ff ff91 	bl	b6b54 <_ZN9SdSpiCard9writeDataEhPKh>
   b6c32:	2800      	cmp	r0, #0
   b6c34:	d0f4      	beq.n	b6c20 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b6c36:	b002      	add	sp, #8
   b6c38:	bd10      	pop	{r4, pc}

000b6c3a <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b6c3a:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b6c3c:	7a83      	ldrb	r3, [r0, #10]
   b6c3e:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b6c40:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b6c42:	bf18      	it	ne
   b6c44:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b6c46:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b6c48:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b6c4a:	f7ff fe35 	bl	b68b8 <_ZN9SdSpiCard11cardCommandEhm>
   b6c4e:	b130      	cbz	r0, b6c5e <_ZN9SdSpiCard10writeStartEm+0x24>
   b6c50:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b6c52:	4620      	mov	r0, r4
   b6c54:	7023      	strb	r3, [r4, #0]
   b6c56:	f7ff fdd6 	bl	b6806 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6c5a:	2000      	movs	r0, #0
}
   b6c5c:	bd10      	pop	{r4, pc}
  return true;
   b6c5e:	2001      	movs	r0, #1
   b6c60:	e7fc      	b.n	b6c5c <_ZN9SdSpiCard10writeStartEm+0x22>

000b6c62 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b6c62:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6c64:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b6c68:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6c6a:	f7ff fe10 	bl	b688e <_ZN9SdSpiCard11waitNotBusyEt>
   b6c6e:	4605      	mov	r5, r0
   b6c70:	b930      	cbnz	r0, b6c80 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b6c72:	2356      	movs	r3, #86	; 0x56
   b6c74:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b6c76:	4620      	mov	r0, r4
   b6c78:	f7ff fdc5 	bl	b6806 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b6c7c:	4628      	mov	r0, r5
   b6c7e:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b6c80:	6860      	ldr	r0, [r4, #4]
   b6c82:	21fd      	movs	r1, #253	; 0xfd
   b6c84:	f7ff fd87 	bl	b6796 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b6c88:	e7f5      	b.n	b6c76 <_ZN9SdSpiCard9writeStopEv+0x14>

000b6c8a <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b6c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6c8c:	4604      	mov	r4, r0
   b6c8e:	4616      	mov	r6, r2
   b6c90:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b6c92:	f7ff ffd2 	bl	b6c3a <_ZN9SdSpiCard10writeStartEm>
   b6c96:	b170      	cbz	r0, b6cb6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b6c98:	2500      	movs	r5, #0
   b6c9a:	42bd      	cmp	r5, r7
   b6c9c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b6ca0:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b6ca2:	d004      	beq.n	b6cae <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b6ca4:	f7ff ffb1 	bl	b6c0a <_ZN9SdSpiCard9writeDataEPKh>
   b6ca8:	b128      	cbz	r0, b6cb6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b6caa:	3501      	adds	r5, #1
   b6cac:	e7f5      	b.n	b6c9a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b6cae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b6cb2:	f7ff bfd6 	b.w	b6c62 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b6cb6:	4620      	mov	r0, r4
   b6cb8:	f7ff fda5 	bl	b6806 <_ZN9SdSpiCard7spiStopEv>
}
   b6cbc:	2000      	movs	r0, #0
   b6cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6cc0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b6cc0:	4b01      	ldr	r3, [pc, #4]	; (b6cc8 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b6cc2:	2201      	movs	r2, #1
   b6cc4:	701a      	strb	r2, [r3, #0]
}
   b6cc6:	4770      	bx	lr
   b6cc8:	2003e64c 	.word	0x2003e64c

000b6ccc <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b6ccc:	1d01      	adds	r1, r0, #4
   b6cce:	6800      	ldr	r0, [r0, #0]
   b6cd0:	f003 bc86 	b.w	ba5e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b6cd4 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b6cd4:	b510      	push	{r4, lr}
   b6cd6:	4604      	mov	r4, r0
  m_csPin = csPin;
   b6cd8:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b6cda:	6800      	ldr	r0, [r0, #0]
   b6cdc:	f003 fc52 	bl	ba584 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b6ce0:	7d20      	ldrb	r0, [r4, #20]
   b6ce2:	2101      	movs	r1, #1
   b6ce4:	f004 f8c8 	bl	bae78 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b6ce8:	7d20      	ldrb	r0, [r4, #20]
   b6cea:	2101      	movs	r1, #1
}
   b6cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b6cf0:	f004 b8d3 	b.w	bae9a <digitalWrite>

000b6cf4 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b6cf4:	6800      	ldr	r0, [r0, #0]
   b6cf6:	f003 bc59 	b.w	ba5ac <_ZN8SPIClass14endTransactionEv>

000b6cfa <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b6cfa:	6800      	ldr	r0, [r0, #0]
   b6cfc:	21ff      	movs	r1, #255	; 0xff
   b6cfe:	f003 bcdd 	b.w	ba6bc <_ZN8SPIClass8transferEh>
	...

000b6d04 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b6d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6d06:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b6d08:	4a07      	ldr	r2, [pc, #28]	; (b6d28 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b6d0a:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b6d0c:	2500      	movs	r5, #0
   b6d0e:	4c07      	ldr	r4, [pc, #28]	; (b6d2c <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b6d10:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b6d12:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b6d14:	460a      	mov	r2, r1
   b6d16:	4629      	mov	r1, r5
   b6d18:	f003 fcd6 	bl	ba6c8 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b6d1c:	7823      	ldrb	r3, [r4, #0]
   b6d1e:	2b00      	cmp	r3, #0
   b6d20:	d0fc      	beq.n	b6d1c <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b6d22:	2000      	movs	r0, #0
   b6d24:	b003      	add	sp, #12
   b6d26:	bd30      	pop	{r4, r5, pc}
   b6d28:	000b6cc1 	.word	0x000b6cc1
   b6d2c:	2003e64c 	.word	0x2003e64c

000b6d30 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b6d30:	6800      	ldr	r0, [r0, #0]
   b6d32:	f003 bcc3 	b.w	ba6bc <_ZN8SPIClass8transferEh>
	...

000b6d38 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b6d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6d3a:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b6d3c:	4a06      	ldr	r2, [pc, #24]	; (b6d58 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b6d3e:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b6d40:	2500      	movs	r5, #0
   b6d42:	4c06      	ldr	r4, [pc, #24]	; (b6d5c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b6d44:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b6d46:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b6d48:	462a      	mov	r2, r5
   b6d4a:	f003 fcbd 	bl	ba6c8 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b6d4e:	7823      	ldrb	r3, [r4, #0]
   b6d50:	2b00      	cmp	r3, #0
   b6d52:	d0fc      	beq.n	b6d4e <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b6d54:	b003      	add	sp, #12
   b6d56:	bd30      	pop	{r4, r5, pc}
   b6d58:	000b6cc1 	.word	0x000b6cc1
   b6d5c:	2003e64c 	.word	0x2003e64c

000b6d60 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b6d60:	b508      	push	{r3, lr}
   b6d62:	4b02      	ldr	r3, [pc, #8]	; (b6d6c <hal_ble_stack_init+0xc>)
   b6d64:	681b      	ldr	r3, [r3, #0]
   b6d66:	689b      	ldr	r3, [r3, #8]
   b6d68:	9301      	str	r3, [sp, #4]
   b6d6a:	bd08      	pop	{r3, pc}
   b6d6c:	00030278 	.word	0x00030278

000b6d70 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b6d70:	b508      	push	{r3, lr}
   b6d72:	4b02      	ldr	r3, [pc, #8]	; (b6d7c <hal_ble_gap_start_scan+0xc>)
   b6d74:	681b      	ldr	r3, [r3, #0]
   b6d76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b6d78:	9301      	str	r3, [sp, #4]
   b6d7a:	bd08      	pop	{r3, pc}
   b6d7c:	00030278 	.word	0x00030278

000b6d80 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b6d80:	b508      	push	{r3, lr}
   b6d82:	4b03      	ldr	r3, [pc, #12]	; (b6d90 <hal_ble_gap_stop_scan+0x10>)
   b6d84:	681b      	ldr	r3, [r3, #0]
   b6d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b6d8a:	9301      	str	r3, [sp, #4]
   b6d8c:	bd08      	pop	{r3, pc}
   b6d8e:	0000      	.short	0x0000
   b6d90:	00030278 	.word	0x00030278

000b6d94 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b6d94:	b508      	push	{r3, lr}
   b6d96:	4b03      	ldr	r3, [pc, #12]	; (b6da4 <hal_ble_gap_disconnect+0x10>)
   b6d98:	681b      	ldr	r3, [r3, #0]
   b6d9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b6d9e:	9301      	str	r3, [sp, #4]
   b6da0:	bd08      	pop	{r3, pc}
   b6da2:	0000      	.short	0x0000
   b6da4:	00030278 	.word	0x00030278

000b6da8 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6da8:	b508      	push	{r3, lr}
   b6daa:	4b03      	ldr	r3, [pc, #12]	; (b6db8 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b6dac:	681b      	ldr	r3, [r3, #0]
   b6dae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b6db2:	9301      	str	r3, [sp, #4]
   b6db4:	bd08      	pop	{r3, pc}
   b6db6:	0000      	.short	0x0000
   b6db8:	00030278 	.word	0x00030278

000b6dbc <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b6dbc:	b508      	push	{r3, lr}
   b6dbe:	4b03      	ldr	r3, [pc, #12]	; (b6dcc <hal_ble_gatt_client_discover_all_services+0x10>)
   b6dc0:	681b      	ldr	r3, [r3, #0]
   b6dc2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b6dc6:	9301      	str	r3, [sp, #4]
   b6dc8:	bd08      	pop	{r3, pc}
   b6dca:	0000      	.short	0x0000
   b6dcc:	00030278 	.word	0x00030278

000b6dd0 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b6dd0:	b508      	push	{r3, lr}
   b6dd2:	4b03      	ldr	r3, [pc, #12]	; (b6de0 <hal_ble_gatt_client_discover_characteristics+0x10>)
   b6dd4:	681b      	ldr	r3, [r3, #0]
   b6dd6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b6dda:	9301      	str	r3, [sp, #4]
   b6ddc:	bd08      	pop	{r3, pc}
   b6dde:	0000      	.short	0x0000
   b6de0:	00030278 	.word	0x00030278

000b6de4 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6de4:	b508      	push	{r3, lr}
   b6de6:	4b03      	ldr	r3, [pc, #12]	; (b6df4 <hal_ble_gatt_client_write_with_response+0x10>)
   b6de8:	681b      	ldr	r3, [r3, #0]
   b6dea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b6dee:	9301      	str	r3, [sp, #4]
   b6df0:	bd08      	pop	{r3, pc}
   b6df2:	0000      	.short	0x0000
   b6df4:	00030278 	.word	0x00030278

000b6df8 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6df8:	b508      	push	{r3, lr}
   b6dfa:	4b03      	ldr	r3, [pc, #12]	; (b6e08 <hal_ble_gatt_client_write_without_response+0x10>)
   b6dfc:	681b      	ldr	r3, [r3, #0]
   b6dfe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b6e02:	9301      	str	r3, [sp, #4]
   b6e04:	bd08      	pop	{r3, pc}
   b6e06:	0000      	.short	0x0000
   b6e08:	00030278 	.word	0x00030278

000b6e0c <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b6e0c:	b508      	push	{r3, lr}
   b6e0e:	4b03      	ldr	r3, [pc, #12]	; (b6e1c <hal_ble_gatt_client_read+0x10>)
   b6e10:	681b      	ldr	r3, [r3, #0]
   b6e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b6e16:	9301      	str	r3, [sp, #4]
   b6e18:	bd08      	pop	{r3, pc}
   b6e1a:	0000      	.short	0x0000
   b6e1c:	00030278 	.word	0x00030278

000b6e20 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b6e20:	b508      	push	{r3, lr}
   b6e22:	4b03      	ldr	r3, [pc, #12]	; (b6e30 <hal_ble_gap_connect+0x10>)
   b6e24:	681b      	ldr	r3, [r3, #0]
   b6e26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b6e2a:	9301      	str	r3, [sp, #4]
   b6e2c:	bd08      	pop	{r3, pc}
   b6e2e:	0000      	.short	0x0000
   b6e30:	00030278 	.word	0x00030278

000b6e34 <hal_ble_gap_get_connection_info>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   b6e34:	b508      	push	{r3, lr}
   b6e36:	4b03      	ldr	r3, [pc, #12]	; (b6e44 <hal_ble_gap_get_connection_info+0x10>)
   b6e38:	681b      	ldr	r3, [r3, #0]
   b6e3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   b6e3e:	9301      	str	r3, [sp, #4]
   b6e40:	bd08      	pop	{r3, pc}
   b6e42:	0000      	.short	0x0000
   b6e44:	00030278 	.word	0x00030278

000b6e48 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b6e48:	b508      	push	{r3, lr}
   b6e4a:	4b03      	ldr	r3, [pc, #12]	; (b6e58 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b6e4c:	681b      	ldr	r3, [r3, #0]
   b6e4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b6e52:	9301      	str	r3, [sp, #4]
   b6e54:	bd08      	pop	{r3, pc}
   b6e56:	0000      	.short	0x0000
   b6e58:	00030278 	.word	0x00030278

000b6e5c <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b6e5c:	b508      	push	{r3, lr}
   b6e5e:	4b03      	ldr	r3, [pc, #12]	; (b6e6c <hal_ble_gatt_client_configure_cccd+0x10>)
   b6e60:	681b      	ldr	r3, [r3, #0]
   b6e62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b6e66:	9301      	str	r3, [sp, #4]
   b6e68:	bd08      	pop	{r3, pc}
   b6e6a:	0000      	.short	0x0000
   b6e6c:	00030278 	.word	0x00030278

000b6e70 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6e70:	b508      	push	{r3, lr}
   b6e72:	4b03      	ldr	r3, [pc, #12]	; (b6e80 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b6e74:	681b      	ldr	r3, [r3, #0]
   b6e76:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b6e7a:	9301      	str	r3, [sp, #4]
   b6e7c:	bd08      	pop	{r3, pc}
   b6e7e:	0000      	.short	0x0000
   b6e80:	00030278 	.word	0x00030278

000b6e84 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6e84:	b508      	push	{r3, lr}
   b6e86:	4b03      	ldr	r3, [pc, #12]	; (b6e94 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b6e88:	681b      	ldr	r3, [r3, #0]
   b6e8a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b6e8e:	9301      	str	r3, [sp, #4]
   b6e90:	bd08      	pop	{r3, pc}
   b6e92:	0000      	.short	0x0000
   b6e94:	00030278 	.word	0x00030278

000b6e98 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b6e98:	b508      	push	{r3, lr}
   b6e9a:	4b02      	ldr	r3, [pc, #8]	; (b6ea4 <os_thread_yield+0xc>)
   b6e9c:	681b      	ldr	r3, [r3, #0]
   b6e9e:	68db      	ldr	r3, [r3, #12]
   b6ea0:	9301      	str	r3, [sp, #4]
   b6ea2:	bd08      	pop	{r3, pc}
   b6ea4:	00030248 	.word	0x00030248

000b6ea8 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b6ea8:	b508      	push	{r3, lr}
   b6eaa:	4b02      	ldr	r3, [pc, #8]	; (b6eb4 <os_thread_scheduling+0xc>)
   b6eac:	681b      	ldr	r3, [r3, #0]
   b6eae:	69db      	ldr	r3, [r3, #28]
   b6eb0:	9301      	str	r3, [sp, #4]
   b6eb2:	bd08      	pop	{r3, pc}
   b6eb4:	00030248 	.word	0x00030248

000b6eb8 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b6eb8:	b508      	push	{r3, lr}
   b6eba:	4b02      	ldr	r3, [pc, #8]	; (b6ec4 <os_timer_create+0xc>)
   b6ebc:	681b      	ldr	r3, [r3, #0]
   b6ebe:	6a1b      	ldr	r3, [r3, #32]
   b6ec0:	9301      	str	r3, [sp, #4]
   b6ec2:	bd08      	pop	{r3, pc}
   b6ec4:	00030248 	.word	0x00030248

000b6ec8 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b6ec8:	b508      	push	{r3, lr}
   b6eca:	4b02      	ldr	r3, [pc, #8]	; (b6ed4 <os_timer_destroy+0xc>)
   b6ecc:	681b      	ldr	r3, [r3, #0]
   b6ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6ed0:	9301      	str	r3, [sp, #4]
   b6ed2:	bd08      	pop	{r3, pc}
   b6ed4:	00030248 	.word	0x00030248

000b6ed8 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b6ed8:	b508      	push	{r3, lr}
   b6eda:	4b02      	ldr	r3, [pc, #8]	; (b6ee4 <os_timer_get_id+0xc>)
   b6edc:	681b      	ldr	r3, [r3, #0]
   b6ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6ee0:	9301      	str	r3, [sp, #4]
   b6ee2:	bd08      	pop	{r3, pc}
   b6ee4:	00030248 	.word	0x00030248

000b6ee8 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b6ee8:	b508      	push	{r3, lr}
   b6eea:	4b02      	ldr	r3, [pc, #8]	; (b6ef4 <os_timer_change+0xc>)
   b6eec:	681b      	ldr	r3, [r3, #0]
   b6eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6ef0:	9301      	str	r3, [sp, #4]
   b6ef2:	bd08      	pop	{r3, pc}
   b6ef4:	00030248 	.word	0x00030248

000b6ef8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6ef8:	b508      	push	{r3, lr}
   b6efa:	4b02      	ldr	r3, [pc, #8]	; (b6f04 <os_mutex_recursive_create+0xc>)
   b6efc:	681b      	ldr	r3, [r3, #0]
   b6efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6f00:	9301      	str	r3, [sp, #4]
   b6f02:	bd08      	pop	{r3, pc}
   b6f04:	00030248 	.word	0x00030248

000b6f08 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b6f08:	b508      	push	{r3, lr}
   b6f0a:	4b02      	ldr	r3, [pc, #8]	; (b6f14 <os_mutex_recursive_lock+0xc>)
   b6f0c:	681b      	ldr	r3, [r3, #0]
   b6f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6f10:	9301      	str	r3, [sp, #4]
   b6f12:	bd08      	pop	{r3, pc}
   b6f14:	00030248 	.word	0x00030248

000b6f18 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b6f18:	b508      	push	{r3, lr}
   b6f1a:	4b02      	ldr	r3, [pc, #8]	; (b6f24 <os_mutex_recursive_unlock+0xc>)
   b6f1c:	681b      	ldr	r3, [r3, #0]
   b6f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6f20:	9301      	str	r3, [sp, #4]
   b6f22:	bd08      	pop	{r3, pc}
   b6f24:	00030248 	.word	0x00030248

000b6f28 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b6f28:	b508      	push	{r3, lr}
   b6f2a:	4b02      	ldr	r3, [pc, #8]	; (b6f34 <os_timer_set_id+0xc>)
   b6f2c:	681b      	ldr	r3, [r3, #0]
   b6f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b6f30:	9301      	str	r3, [sp, #4]
   b6f32:	bd08      	pop	{r3, pc}
   b6f34:	00030248 	.word	0x00030248

000b6f38 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6f38:	b508      	push	{r3, lr}
   b6f3a:	4b02      	ldr	r3, [pc, #8]	; (b6f44 <HAL_RNG_GetRandomNumber+0xc>)
   b6f3c:	681b      	ldr	r3, [r3, #0]
   b6f3e:	685b      	ldr	r3, [r3, #4]
   b6f40:	9301      	str	r3, [sp, #4]
   b6f42:	bd08      	pop	{r3, pc}
   b6f44:	00030218 	.word	0x00030218

000b6f48 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6f48:	b508      	push	{r3, lr}
   b6f4a:	4b02      	ldr	r3, [pc, #8]	; (b6f54 <HAL_Delay_Microseconds+0xc>)
   b6f4c:	681b      	ldr	r3, [r3, #0]
   b6f4e:	68db      	ldr	r3, [r3, #12]
   b6f50:	9301      	str	r3, [sp, #4]
   b6f52:	bd08      	pop	{r3, pc}
   b6f54:	00030218 	.word	0x00030218

000b6f58 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b6f58:	b508      	push	{r3, lr}
   b6f5a:	4b02      	ldr	r3, [pc, #8]	; (b6f64 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b6f5c:	681b      	ldr	r3, [r3, #0]
   b6f5e:	691b      	ldr	r3, [r3, #16]
   b6f60:	9301      	str	r3, [sp, #4]
   b6f62:	bd08      	pop	{r3, pc}
   b6f64:	00030218 	.word	0x00030218

000b6f68 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6f68:	b508      	push	{r3, lr}
   b6f6a:	4b02      	ldr	r3, [pc, #8]	; (b6f74 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6f6c:	681b      	ldr	r3, [r3, #0]
   b6f6e:	695b      	ldr	r3, [r3, #20]
   b6f70:	9301      	str	r3, [sp, #4]
   b6f72:	bd08      	pop	{r3, pc}
   b6f74:	00030218 	.word	0x00030218

000b6f78 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b6f78:	b508      	push	{r3, lr}
   b6f7a:	4b02      	ldr	r3, [pc, #8]	; (b6f84 <hal_rtc_time_is_valid+0xc>)
   b6f7c:	681b      	ldr	r3, [r3, #0]
   b6f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6f80:	9301      	str	r3, [sp, #4]
   b6f82:	bd08      	pop	{r3, pc}
   b6f84:	00030218 	.word	0x00030218

000b6f88 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b6f88:	b508      	push	{r3, lr}
   b6f8a:	4b02      	ldr	r3, [pc, #8]	; (b6f94 <hal_rtc_get_time+0xc>)
   b6f8c:	681b      	ldr	r3, [r3, #0]
   b6f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b6f90:	9301      	str	r3, [sp, #4]
   b6f92:	bd08      	pop	{r3, pc}
   b6f94:	00030218 	.word	0x00030218

000b6f98 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b6f98:	b508      	push	{r3, lr}
   b6f9a:	4b02      	ldr	r3, [pc, #8]	; (b6fa4 <HAL_Validate_Pin_Function+0xc>)
   b6f9c:	681b      	ldr	r3, [r3, #0]
   b6f9e:	685b      	ldr	r3, [r3, #4]
   b6fa0:	9301      	str	r3, [sp, #4]
   b6fa2:	bd08      	pop	{r3, pc}
   b6fa4:	0003022c 	.word	0x0003022c

000b6fa8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6fa8:	b508      	push	{r3, lr}
   b6faa:	4b02      	ldr	r3, [pc, #8]	; (b6fb4 <HAL_Pin_Mode+0xc>)
   b6fac:	681b      	ldr	r3, [r3, #0]
   b6fae:	689b      	ldr	r3, [r3, #8]
   b6fb0:	9301      	str	r3, [sp, #4]
   b6fb2:	bd08      	pop	{r3, pc}
   b6fb4:	0003022c 	.word	0x0003022c

000b6fb8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6fb8:	b508      	push	{r3, lr}
   b6fba:	4b02      	ldr	r3, [pc, #8]	; (b6fc4 <HAL_Get_Pin_Mode+0xc>)
   b6fbc:	681b      	ldr	r3, [r3, #0]
   b6fbe:	68db      	ldr	r3, [r3, #12]
   b6fc0:	9301      	str	r3, [sp, #4]
   b6fc2:	bd08      	pop	{r3, pc}
   b6fc4:	0003022c 	.word	0x0003022c

000b6fc8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6fc8:	b508      	push	{r3, lr}
   b6fca:	4b02      	ldr	r3, [pc, #8]	; (b6fd4 <HAL_GPIO_Write+0xc>)
   b6fcc:	681b      	ldr	r3, [r3, #0]
   b6fce:	691b      	ldr	r3, [r3, #16]
   b6fd0:	9301      	str	r3, [sp, #4]
   b6fd2:	bd08      	pop	{r3, pc}
   b6fd4:	0003022c 	.word	0x0003022c

000b6fd8 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6fd8:	b508      	push	{r3, lr}
   b6fda:	4b02      	ldr	r3, [pc, #8]	; (b6fe4 <hal_adc_read+0xc>)
   b6fdc:	681b      	ldr	r3, [r3, #0]
   b6fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6fe0:	9301      	str	r3, [sp, #4]
   b6fe2:	bd08      	pop	{r3, pc}
   b6fe4:	0003022c 	.word	0x0003022c

000b6fe8 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6fe8:	b508      	push	{r3, lr}
   b6fea:	4b02      	ldr	r3, [pc, #8]	; (b6ff4 <hal_i2c_write+0xc>)
   b6fec:	681b      	ldr	r3, [r3, #0]
   b6fee:	6a1b      	ldr	r3, [r3, #32]
   b6ff0:	9301      	str	r3, [sp, #4]
   b6ff2:	bd08      	pop	{r3, pc}
   b6ff4:	00030228 	.word	0x00030228

000b6ff8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6ff8:	b508      	push	{r3, lr}
   b6ffa:	4b02      	ldr	r3, [pc, #8]	; (b7004 <hal_i2c_available+0xc>)
   b6ffc:	681b      	ldr	r3, [r3, #0]
   b6ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7000:	9301      	str	r3, [sp, #4]
   b7002:	bd08      	pop	{r3, pc}
   b7004:	00030228 	.word	0x00030228

000b7008 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7008:	b508      	push	{r3, lr}
   b700a:	4b02      	ldr	r3, [pc, #8]	; (b7014 <hal_i2c_read+0xc>)
   b700c:	681b      	ldr	r3, [r3, #0]
   b700e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7010:	9301      	str	r3, [sp, #4]
   b7012:	bd08      	pop	{r3, pc}
   b7014:	00030228 	.word	0x00030228

000b7018 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b7018:	b508      	push	{r3, lr}
   b701a:	4b02      	ldr	r3, [pc, #8]	; (b7024 <hal_i2c_peek+0xc>)
   b701c:	681b      	ldr	r3, [r3, #0]
   b701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7020:	9301      	str	r3, [sp, #4]
   b7022:	bd08      	pop	{r3, pc}
   b7024:	00030228 	.word	0x00030228

000b7028 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7028:	b508      	push	{r3, lr}
   b702a:	4b02      	ldr	r3, [pc, #8]	; (b7034 <hal_i2c_flush+0xc>)
   b702c:	681b      	ldr	r3, [r3, #0]
   b702e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7030:	9301      	str	r3, [sp, #4]
   b7032:	bd08      	pop	{r3, pc}
   b7034:	00030228 	.word	0x00030228

000b7038 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b7038:	b508      	push	{r3, lr}
   b703a:	4b02      	ldr	r3, [pc, #8]	; (b7044 <hal_i2c_is_enabled+0xc>)
   b703c:	681b      	ldr	r3, [r3, #0]
   b703e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7040:	9301      	str	r3, [sp, #4]
   b7042:	bd08      	pop	{r3, pc}
   b7044:	00030228 	.word	0x00030228

000b7048 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7048:	b508      	push	{r3, lr}
   b704a:	4b02      	ldr	r3, [pc, #8]	; (b7054 <hal_i2c_init+0xc>)
   b704c:	681b      	ldr	r3, [r3, #0]
   b704e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7050:	9301      	str	r3, [sp, #4]
   b7052:	bd08      	pop	{r3, pc}
   b7054:	00030228 	.word	0x00030228

000b7058 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7058:	b508      	push	{r3, lr}
   b705a:	4b02      	ldr	r3, [pc, #8]	; (b7064 <inet_inet_ntop+0xc>)
   b705c:	681b      	ldr	r3, [r3, #0]
   b705e:	695b      	ldr	r3, [r3, #20]
   b7060:	9301      	str	r3, [sp, #4]
   b7062:	bd08      	pop	{r3, pc}
   b7064:	00030264 	.word	0x00030264

000b7068 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b7068:	b508      	push	{r3, lr}
   b706a:	4b02      	ldr	r3, [pc, #8]	; (b7074 <netdb_freeaddrinfo+0xc>)
   b706c:	681b      	ldr	r3, [r3, #0]
   b706e:	689b      	ldr	r3, [r3, #8]
   b7070:	9301      	str	r3, [sp, #4]
   b7072:	bd08      	pop	{r3, pc}
   b7074:	00030268 	.word	0x00030268

000b7078 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b7078:	b508      	push	{r3, lr}
   b707a:	4b02      	ldr	r3, [pc, #8]	; (b7084 <netdb_getaddrinfo+0xc>)
   b707c:	681b      	ldr	r3, [r3, #0]
   b707e:	68db      	ldr	r3, [r3, #12]
   b7080:	9301      	str	r3, [sp, #4]
   b7082:	bd08      	pop	{r3, pc}
   b7084:	00030268 	.word	0x00030268

000b7088 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b7088:	b508      	push	{r3, lr}
   b708a:	4b02      	ldr	r3, [pc, #8]	; (b7094 <hal_spi_begin+0xc>)
   b708c:	681b      	ldr	r3, [r3, #0]
   b708e:	681b      	ldr	r3, [r3, #0]
   b7090:	9301      	str	r3, [sp, #4]
   b7092:	bd08      	pop	{r3, pc}
   b7094:	00030230 	.word	0x00030230

000b7098 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b7098:	b508      	push	{r3, lr}
   b709a:	4b02      	ldr	r3, [pc, #8]	; (b70a4 <hal_spi_transfer+0xc>)
   b709c:	681b      	ldr	r3, [r3, #0]
   b709e:	695b      	ldr	r3, [r3, #20]
   b70a0:	9301      	str	r3, [sp, #4]
   b70a2:	bd08      	pop	{r3, pc}
   b70a4:	00030230 	.word	0x00030230

000b70a8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b70a8:	b508      	push	{r3, lr}
   b70aa:	4b02      	ldr	r3, [pc, #8]	; (b70b4 <hal_spi_init+0xc>)
   b70ac:	681b      	ldr	r3, [r3, #0]
   b70ae:	69db      	ldr	r3, [r3, #28]
   b70b0:	9301      	str	r3, [sp, #4]
   b70b2:	bd08      	pop	{r3, pc}
   b70b4:	00030230 	.word	0x00030230

000b70b8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b70b8:	b508      	push	{r3, lr}
   b70ba:	4b02      	ldr	r3, [pc, #8]	; (b70c4 <hal_spi_is_enabled+0xc>)
   b70bc:	681b      	ldr	r3, [r3, #0]
   b70be:	6a1b      	ldr	r3, [r3, #32]
   b70c0:	9301      	str	r3, [sp, #4]
   b70c2:	bd08      	pop	{r3, pc}
   b70c4:	00030230 	.word	0x00030230

000b70c8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b70c8:	b508      	push	{r3, lr}
   b70ca:	4b02      	ldr	r3, [pc, #8]	; (b70d4 <hal_spi_info+0xc>)
   b70cc:	681b      	ldr	r3, [r3, #0]
   b70ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b70d0:	9301      	str	r3, [sp, #4]
   b70d2:	bd08      	pop	{r3, pc}
   b70d4:	00030230 	.word	0x00030230

000b70d8 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b70d8:	b508      	push	{r3, lr}
   b70da:	4b02      	ldr	r3, [pc, #8]	; (b70e4 <hal_spi_transfer_dma+0xc>)
   b70dc:	681b      	ldr	r3, [r3, #0]
   b70de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b70e0:	9301      	str	r3, [sp, #4]
   b70e2:	bd08      	pop	{r3, pc}
   b70e4:	00030230 	.word	0x00030230

000b70e8 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b70e8:	b508      	push	{r3, lr}
   b70ea:	4b02      	ldr	r3, [pc, #8]	; (b70f4 <hal_spi_transfer_dma_status+0xc>)
   b70ec:	681b      	ldr	r3, [r3, #0]
   b70ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b70f0:	9301      	str	r3, [sp, #4]
   b70f2:	bd08      	pop	{r3, pc}
   b70f4:	00030230 	.word	0x00030230

000b70f8 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b70f8:	b508      	push	{r3, lr}
   b70fa:	4b02      	ldr	r3, [pc, #8]	; (b7104 <hal_spi_set_settings+0xc>)
   b70fc:	681b      	ldr	r3, [r3, #0]
   b70fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7100:	9301      	str	r3, [sp, #4]
   b7102:	bd08      	pop	{r3, pc}
   b7104:	00030230 	.word	0x00030230

000b7108 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b7108:	b508      	push	{r3, lr}
   b710a:	4b02      	ldr	r3, [pc, #8]	; (b7114 <hal_spi_acquire+0xc>)
   b710c:	681b      	ldr	r3, [r3, #0]
   b710e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7110:	9301      	str	r3, [sp, #4]
   b7112:	bd08      	pop	{r3, pc}
   b7114:	00030230 	.word	0x00030230

000b7118 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b7118:	b508      	push	{r3, lr}
   b711a:	4b02      	ldr	r3, [pc, #8]	; (b7124 <hal_spi_release+0xc>)
   b711c:	681b      	ldr	r3, [r3, #0]
   b711e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7120:	9301      	str	r3, [sp, #4]
   b7122:	bd08      	pop	{r3, pc}
   b7124:	00030230 	.word	0x00030230

000b7128 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7128:	b508      	push	{r3, lr}
   b712a:	4b02      	ldr	r3, [pc, #8]	; (b7134 <hal_usart_write+0xc>)
   b712c:	681b      	ldr	r3, [r3, #0]
   b712e:	68db      	ldr	r3, [r3, #12]
   b7130:	9301      	str	r3, [sp, #4]
   b7132:	bd08      	pop	{r3, pc}
   b7134:	0003023c 	.word	0x0003023c

000b7138 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7138:	b508      	push	{r3, lr}
   b713a:	4b02      	ldr	r3, [pc, #8]	; (b7144 <hal_usart_available+0xc>)
   b713c:	681b      	ldr	r3, [r3, #0]
   b713e:	691b      	ldr	r3, [r3, #16]
   b7140:	9301      	str	r3, [sp, #4]
   b7142:	bd08      	pop	{r3, pc}
   b7144:	0003023c 	.word	0x0003023c

000b7148 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7148:	b508      	push	{r3, lr}
   b714a:	4b02      	ldr	r3, [pc, #8]	; (b7154 <hal_usart_read+0xc>)
   b714c:	681b      	ldr	r3, [r3, #0]
   b714e:	695b      	ldr	r3, [r3, #20]
   b7150:	9301      	str	r3, [sp, #4]
   b7152:	bd08      	pop	{r3, pc}
   b7154:	0003023c 	.word	0x0003023c

000b7158 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7158:	b508      	push	{r3, lr}
   b715a:	4b02      	ldr	r3, [pc, #8]	; (b7164 <hal_usart_peek+0xc>)
   b715c:	681b      	ldr	r3, [r3, #0]
   b715e:	699b      	ldr	r3, [r3, #24]
   b7160:	9301      	str	r3, [sp, #4]
   b7162:	bd08      	pop	{r3, pc}
   b7164:	0003023c 	.word	0x0003023c

000b7168 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7168:	b508      	push	{r3, lr}
   b716a:	4b02      	ldr	r3, [pc, #8]	; (b7174 <hal_usart_flush+0xc>)
   b716c:	681b      	ldr	r3, [r3, #0]
   b716e:	69db      	ldr	r3, [r3, #28]
   b7170:	9301      	str	r3, [sp, #4]
   b7172:	bd08      	pop	{r3, pc}
   b7174:	0003023c 	.word	0x0003023c

000b7178 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b7178:	b508      	push	{r3, lr}
   b717a:	4b02      	ldr	r3, [pc, #8]	; (b7184 <hal_usart_is_enabled+0xc>)
   b717c:	681b      	ldr	r3, [r3, #0]
   b717e:	6a1b      	ldr	r3, [r3, #32]
   b7180:	9301      	str	r3, [sp, #4]
   b7182:	bd08      	pop	{r3, pc}
   b7184:	0003023c 	.word	0x0003023c

000b7188 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7188:	b508      	push	{r3, lr}
   b718a:	4b02      	ldr	r3, [pc, #8]	; (b7194 <hal_usart_available_data_for_write+0xc>)
   b718c:	681b      	ldr	r3, [r3, #0]
   b718e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7190:	9301      	str	r3, [sp, #4]
   b7192:	bd08      	pop	{r3, pc}
   b7194:	0003023c 	.word	0x0003023c

000b7198 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b7198:	b508      	push	{r3, lr}
   b719a:	4b02      	ldr	r3, [pc, #8]	; (b71a4 <hal_usart_begin_config+0xc>)
   b719c:	681b      	ldr	r3, [r3, #0]
   b719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b71a0:	9301      	str	r3, [sp, #4]
   b71a2:	bd08      	pop	{r3, pc}
   b71a4:	0003023c 	.word	0x0003023c

000b71a8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b71a8:	b508      	push	{r3, lr}
   b71aa:	4b02      	ldr	r3, [pc, #8]	; (b71b4 <hal_usart_init_ex+0xc>)
   b71ac:	681b      	ldr	r3, [r3, #0]
   b71ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b71b0:	9301      	str	r3, [sp, #4]
   b71b2:	bd08      	pop	{r3, pc}
   b71b4:	0003023c 	.word	0x0003023c

000b71b8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b71b8:	b508      	push	{r3, lr}
   b71ba:	4b02      	ldr	r3, [pc, #8]	; (b71c4 <HAL_USB_USART_Init+0xc>)
   b71bc:	681b      	ldr	r3, [r3, #0]
   b71be:	681b      	ldr	r3, [r3, #0]
   b71c0:	9301      	str	r3, [sp, #4]
   b71c2:	bd08      	pop	{r3, pc}
   b71c4:	0003024c 	.word	0x0003024c

000b71c8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b71c8:	b508      	push	{r3, lr}
   b71ca:	4b02      	ldr	r3, [pc, #8]	; (b71d4 <HAL_USB_USART_Begin+0xc>)
   b71cc:	681b      	ldr	r3, [r3, #0]
   b71ce:	685b      	ldr	r3, [r3, #4]
   b71d0:	9301      	str	r3, [sp, #4]
   b71d2:	bd08      	pop	{r3, pc}
   b71d4:	0003024c 	.word	0x0003024c

000b71d8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b71d8:	b508      	push	{r3, lr}
   b71da:	4b02      	ldr	r3, [pc, #8]	; (b71e4 <HAL_USB_USART_Available_Data+0xc>)
   b71dc:	681b      	ldr	r3, [r3, #0]
   b71de:	691b      	ldr	r3, [r3, #16]
   b71e0:	9301      	str	r3, [sp, #4]
   b71e2:	bd08      	pop	{r3, pc}
   b71e4:	0003024c 	.word	0x0003024c

000b71e8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b71e8:	b508      	push	{r3, lr}
   b71ea:	4b02      	ldr	r3, [pc, #8]	; (b71f4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b71ec:	681b      	ldr	r3, [r3, #0]
   b71ee:	695b      	ldr	r3, [r3, #20]
   b71f0:	9301      	str	r3, [sp, #4]
   b71f2:	bd08      	pop	{r3, pc}
   b71f4:	0003024c 	.word	0x0003024c

000b71f8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b71f8:	b508      	push	{r3, lr}
   b71fa:	4b02      	ldr	r3, [pc, #8]	; (b7204 <HAL_USB_USART_Receive_Data+0xc>)
   b71fc:	681b      	ldr	r3, [r3, #0]
   b71fe:	699b      	ldr	r3, [r3, #24]
   b7200:	9301      	str	r3, [sp, #4]
   b7202:	bd08      	pop	{r3, pc}
   b7204:	0003024c 	.word	0x0003024c

000b7208 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7208:	b508      	push	{r3, lr}
   b720a:	4b02      	ldr	r3, [pc, #8]	; (b7214 <HAL_USB_USART_Send_Data+0xc>)
   b720c:	681b      	ldr	r3, [r3, #0]
   b720e:	69db      	ldr	r3, [r3, #28]
   b7210:	9301      	str	r3, [sp, #4]
   b7212:	bd08      	pop	{r3, pc}
   b7214:	0003024c 	.word	0x0003024c

000b7218 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7218:	b508      	push	{r3, lr}
   b721a:	4b02      	ldr	r3, [pc, #8]	; (b7224 <HAL_USB_USART_Flush_Data+0xc>)
   b721c:	681b      	ldr	r3, [r3, #0]
   b721e:	6a1b      	ldr	r3, [r3, #32]
   b7220:	9301      	str	r3, [sp, #4]
   b7222:	bd08      	pop	{r3, pc}
   b7224:	0003024c 	.word	0x0003024c

000b7228 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7228:	b508      	push	{r3, lr}
   b722a:	4b02      	ldr	r3, [pc, #8]	; (b7234 <panic_+0xc>)
   b722c:	681b      	ldr	r3, [r3, #0]
   b722e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7230:	9301      	str	r3, [sp, #4]
   b7232:	bd08      	pop	{r3, pc}
   b7234:	00030260 	.word	0x00030260

000b7238 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7238:	b508      	push	{r3, lr}
   b723a:	4b02      	ldr	r3, [pc, #8]	; (b7244 <log_message+0xc>)
   b723c:	681b      	ldr	r3, [r3, #0]
   b723e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7240:	9301      	str	r3, [sp, #4]
   b7242:	bd08      	pop	{r3, pc}
   b7244:	00030260 	.word	0x00030260

000b7248 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b7248:	b508      	push	{r3, lr}
   b724a:	4b02      	ldr	r3, [pc, #8]	; (b7254 <system_mode+0xc>)
   b724c:	681b      	ldr	r3, [r3, #0]
   b724e:	681b      	ldr	r3, [r3, #0]
   b7250:	9301      	str	r3, [sp, #4]
   b7252:	bd08      	pop	{r3, pc}
   b7254:	00030220 	.word	0x00030220

000b7258 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7258:	b508      	push	{r3, lr}
   b725a:	4b02      	ldr	r3, [pc, #8]	; (b7264 <set_system_mode+0xc>)
   b725c:	681b      	ldr	r3, [r3, #0]
   b725e:	685b      	ldr	r3, [r3, #4]
   b7260:	9301      	str	r3, [sp, #4]
   b7262:	bd08      	pop	{r3, pc}
   b7264:	00030220 	.word	0x00030220

000b7268 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7268:	b508      	push	{r3, lr}
   b726a:	4b02      	ldr	r3, [pc, #8]	; (b7274 <system_delay_ms+0xc>)
   b726c:	681b      	ldr	r3, [r3, #0]
   b726e:	695b      	ldr	r3, [r3, #20]
   b7270:	9301      	str	r3, [sp, #4]
   b7272:	bd08      	pop	{r3, pc}
   b7274:	00030220 	.word	0x00030220

000b7278 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b7278:	b508      	push	{r3, lr}
   b727a:	4b02      	ldr	r3, [pc, #8]	; (b7284 <application_thread_current+0xc>)
   b727c:	681b      	ldr	r3, [r3, #0]
   b727e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7280:	9301      	str	r3, [sp, #4]
   b7282:	bd08      	pop	{r3, pc}
   b7284:	00030220 	.word	0x00030220

000b7288 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b7288:	b508      	push	{r3, lr}
   b728a:	4b02      	ldr	r3, [pc, #8]	; (b7294 <application_thread_invoke+0xc>)
   b728c:	681b      	ldr	r3, [r3, #0]
   b728e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7290:	9301      	str	r3, [sp, #4]
   b7292:	bd08      	pop	{r3, pc}
   b7294:	00030220 	.word	0x00030220

000b7298 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b7298:	b508      	push	{r3, lr}
   b729a:	4b02      	ldr	r3, [pc, #8]	; (b72a4 <system_thread_get_state+0xc>)
   b729c:	681b      	ldr	r3, [r3, #0]
   b729e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b72a0:	9301      	str	r3, [sp, #4]
   b72a2:	bd08      	pop	{r3, pc}
   b72a4:	00030220 	.word	0x00030220

000b72a8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b72a8:	b508      	push	{r3, lr}
   b72aa:	4b03      	ldr	r3, [pc, #12]	; (b72b8 <system_ctrl_set_app_request_handler+0x10>)
   b72ac:	681b      	ldr	r3, [r3, #0]
   b72ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b72b2:	9301      	str	r3, [sp, #4]
   b72b4:	bd08      	pop	{r3, pc}
   b72b6:	0000      	.short	0x0000
   b72b8:	00030220 	.word	0x00030220

000b72bc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b72bc:	b508      	push	{r3, lr}
   b72be:	4b03      	ldr	r3, [pc, #12]	; (b72cc <system_ctrl_set_result+0x10>)
   b72c0:	681b      	ldr	r3, [r3, #0]
   b72c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b72c6:	9301      	str	r3, [sp, #4]
   b72c8:	bd08      	pop	{r3, pc}
   b72ca:	0000      	.short	0x0000
   b72cc:	00030220 	.word	0x00030220

000b72d0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b72d0:	b508      	push	{r3, lr}
   b72d2:	4b02      	ldr	r3, [pc, #8]	; (b72dc <spark_process+0xc>)
   b72d4:	681b      	ldr	r3, [r3, #0]
   b72d6:	689b      	ldr	r3, [r3, #8]
   b72d8:	9301      	str	r3, [sp, #4]
   b72da:	bd08      	pop	{r3, pc}
   b72dc:	00030244 	.word	0x00030244

000b72e0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b72e0:	b508      	push	{r3, lr}
   b72e2:	4b02      	ldr	r3, [pc, #8]	; (b72ec <spark_cloud_flag_connected+0xc>)
   b72e4:	681b      	ldr	r3, [r3, #0]
   b72e6:	695b      	ldr	r3, [r3, #20]
   b72e8:	9301      	str	r3, [sp, #4]
   b72ea:	bd08      	pop	{r3, pc}
   b72ec:	00030244 	.word	0x00030244

000b72f0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b72f0:	b508      	push	{r3, lr}
   b72f2:	4b02      	ldr	r3, [pc, #8]	; (b72fc <spark_send_event+0xc>)
   b72f4:	681b      	ldr	r3, [r3, #0]
   b72f6:	6a1b      	ldr	r3, [r3, #32]
   b72f8:	9301      	str	r3, [sp, #4]
   b72fa:	bd08      	pop	{r3, pc}
   b72fc:	00030244 	.word	0x00030244

000b7300 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b7300:	b508      	push	{r3, lr}
   b7302:	4b02      	ldr	r3, [pc, #8]	; (b730c <spark_subscribe+0xc>)
   b7304:	681b      	ldr	r3, [r3, #0]
   b7306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7308:	9301      	str	r3, [sp, #4]
   b730a:	bd08      	pop	{r3, pc}
   b730c:	00030244 	.word	0x00030244

000b7310 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b7310:	b508      	push	{r3, lr}
   b7312:	4b02      	ldr	r3, [pc, #8]	; (b731c <spark_sync_time_pending+0xc>)
   b7314:	681b      	ldr	r3, [r3, #0]
   b7316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7318:	9301      	str	r3, [sp, #4]
   b731a:	bd08      	pop	{r3, pc}
   b731c:	00030244 	.word	0x00030244

000b7320 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7320:	b508      	push	{r3, lr}
   b7322:	4b02      	ldr	r3, [pc, #8]	; (b732c <spark_set_random_seed_from_cloud_handler+0xc>)
   b7324:	681b      	ldr	r3, [r3, #0]
   b7326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7328:	9301      	str	r3, [sp, #4]
   b732a:	bd08      	pop	{r3, pc}
   b732c:	00030244 	.word	0x00030244

000b7330 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7330:	b508      	push	{r3, lr}
   b7332:	4b02      	ldr	r3, [pc, #8]	; (b733c <network_connect+0xc>)
   b7334:	681b      	ldr	r3, [r3, #0]
   b7336:	685b      	ldr	r3, [r3, #4]
   b7338:	9301      	str	r3, [sp, #4]
   b733a:	bd08      	pop	{r3, pc}
   b733c:	00030240 	.word	0x00030240

000b7340 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7340:	b508      	push	{r3, lr}
   b7342:	4b02      	ldr	r3, [pc, #8]	; (b734c <network_connecting+0xc>)
   b7344:	681b      	ldr	r3, [r3, #0]
   b7346:	689b      	ldr	r3, [r3, #8]
   b7348:	9301      	str	r3, [sp, #4]
   b734a:	bd08      	pop	{r3, pc}
   b734c:	00030240 	.word	0x00030240

000b7350 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7350:	b508      	push	{r3, lr}
   b7352:	4b02      	ldr	r3, [pc, #8]	; (b735c <network_disconnect+0xc>)
   b7354:	681b      	ldr	r3, [r3, #0]
   b7356:	68db      	ldr	r3, [r3, #12]
   b7358:	9301      	str	r3, [sp, #4]
   b735a:	bd08      	pop	{r3, pc}
   b735c:	00030240 	.word	0x00030240

000b7360 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7360:	b508      	push	{r3, lr}
   b7362:	4b02      	ldr	r3, [pc, #8]	; (b736c <network_ready+0xc>)
   b7364:	681b      	ldr	r3, [r3, #0]
   b7366:	691b      	ldr	r3, [r3, #16]
   b7368:	9301      	str	r3, [sp, #4]
   b736a:	bd08      	pop	{r3, pc}
   b736c:	00030240 	.word	0x00030240

000b7370 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7370:	b508      	push	{r3, lr}
   b7372:	4b02      	ldr	r3, [pc, #8]	; (b737c <network_on+0xc>)
   b7374:	681b      	ldr	r3, [r3, #0]
   b7376:	695b      	ldr	r3, [r3, #20]
   b7378:	9301      	str	r3, [sp, #4]
   b737a:	bd08      	pop	{r3, pc}
   b737c:	00030240 	.word	0x00030240

000b7380 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7380:	b508      	push	{r3, lr}
   b7382:	4b02      	ldr	r3, [pc, #8]	; (b738c <network_off+0xc>)
   b7384:	681b      	ldr	r3, [r3, #0]
   b7386:	699b      	ldr	r3, [r3, #24]
   b7388:	9301      	str	r3, [sp, #4]
   b738a:	bd08      	pop	{r3, pc}
   b738c:	00030240 	.word	0x00030240

000b7390 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7390:	b508      	push	{r3, lr}
   b7392:	4b02      	ldr	r3, [pc, #8]	; (b739c <network_listen+0xc>)
   b7394:	681b      	ldr	r3, [r3, #0]
   b7396:	69db      	ldr	r3, [r3, #28]
   b7398:	9301      	str	r3, [sp, #4]
   b739a:	bd08      	pop	{r3, pc}
   b739c:	00030240 	.word	0x00030240

000b73a0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b73a0:	b508      	push	{r3, lr}
   b73a2:	4b02      	ldr	r3, [pc, #8]	; (b73ac <network_listening+0xc>)
   b73a4:	681b      	ldr	r3, [r3, #0]
   b73a6:	6a1b      	ldr	r3, [r3, #32]
   b73a8:	9301      	str	r3, [sp, #4]
   b73aa:	bd08      	pop	{r3, pc}
   b73ac:	00030240 	.word	0x00030240

000b73b0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b73b0:	b508      	push	{r3, lr}
   b73b2:	4b02      	ldr	r3, [pc, #8]	; (b73bc <network_set_listen_timeout+0xc>)
   b73b4:	681b      	ldr	r3, [r3, #0]
   b73b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b73b8:	9301      	str	r3, [sp, #4]
   b73ba:	bd08      	pop	{r3, pc}
   b73bc:	00030240 	.word	0x00030240

000b73c0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b73c0:	b508      	push	{r3, lr}
   b73c2:	4b02      	ldr	r3, [pc, #8]	; (b73cc <network_get_listen_timeout+0xc>)
   b73c4:	681b      	ldr	r3, [r3, #0]
   b73c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b73c8:	9301      	str	r3, [sp, #4]
   b73ca:	bd08      	pop	{r3, pc}
   b73cc:	00030240 	.word	0x00030240

000b73d0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b73d0:	b508      	push	{r3, lr}
   b73d2:	4b02      	ldr	r3, [pc, #8]	; (b73dc <network_is_on+0xc>)
   b73d4:	681b      	ldr	r3, [r3, #0]
   b73d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b73d8:	9301      	str	r3, [sp, #4]
   b73da:	bd08      	pop	{r3, pc}
   b73dc:	00030240 	.word	0x00030240

000b73e0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b73e0:	b508      	push	{r3, lr}
   b73e2:	4b02      	ldr	r3, [pc, #8]	; (b73ec <network_is_off+0xc>)
   b73e4:	681b      	ldr	r3, [r3, #0]
   b73e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b73e8:	9301      	str	r3, [sp, #4]
   b73ea:	bd08      	pop	{r3, pc}
   b73ec:	00030240 	.word	0x00030240

000b73f0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b73f0:	b508      	push	{r3, lr}
   b73f2:	4b02      	ldr	r3, [pc, #8]	; (b73fc <malloc+0xc>)
   b73f4:	681b      	ldr	r3, [r3, #0]
   b73f6:	681b      	ldr	r3, [r3, #0]
   b73f8:	9301      	str	r3, [sp, #4]
   b73fa:	bd08      	pop	{r3, pc}
   b73fc:	0003021c 	.word	0x0003021c

000b7400 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7400:	b508      	push	{r3, lr}
   b7402:	4b02      	ldr	r3, [pc, #8]	; (b740c <free+0xc>)
   b7404:	681b      	ldr	r3, [r3, #0]
   b7406:	685b      	ldr	r3, [r3, #4]
   b7408:	9301      	str	r3, [sp, #4]
   b740a:	bd08      	pop	{r3, pc}
   b740c:	0003021c 	.word	0x0003021c

000b7410 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7410:	b508      	push	{r3, lr}
   b7412:	4b02      	ldr	r3, [pc, #8]	; (b741c <realloc+0xc>)
   b7414:	681b      	ldr	r3, [r3, #0]
   b7416:	689b      	ldr	r3, [r3, #8]
   b7418:	9301      	str	r3, [sp, #4]
   b741a:	bd08      	pop	{r3, pc}
   b741c:	0003021c 	.word	0x0003021c

000b7420 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b7420:	b508      	push	{r3, lr}
   b7422:	4b02      	ldr	r3, [pc, #8]	; (b742c <sprintf+0xc>)
   b7424:	681b      	ldr	r3, [r3, #0]
   b7426:	68db      	ldr	r3, [r3, #12]
   b7428:	9301      	str	r3, [sp, #4]
   b742a:	bd08      	pop	{r3, pc}
   b742c:	0003021c 	.word	0x0003021c

000b7430 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b7430:	b508      	push	{r3, lr}
   b7432:	4b02      	ldr	r3, [pc, #8]	; (b743c <sscanf+0xc>)
   b7434:	681b      	ldr	r3, [r3, #0]
   b7436:	695b      	ldr	r3, [r3, #20]
   b7438:	9301      	str	r3, [sp, #4]
   b743a:	bd08      	pop	{r3, pc}
   b743c:	0003021c 	.word	0x0003021c

000b7440 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7440:	b508      	push	{r3, lr}
   b7442:	4b02      	ldr	r3, [pc, #8]	; (b744c <snprintf+0xc>)
   b7444:	681b      	ldr	r3, [r3, #0]
   b7446:	69db      	ldr	r3, [r3, #28]
   b7448:	9301      	str	r3, [sp, #4]
   b744a:	bd08      	pop	{r3, pc}
   b744c:	0003021c 	.word	0x0003021c

000b7450 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7450:	b508      	push	{r3, lr}
   b7452:	4b02      	ldr	r3, [pc, #8]	; (b745c <vsnprintf+0xc>)
   b7454:	681b      	ldr	r3, [r3, #0]
   b7456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7458:	9301      	str	r3, [sp, #4]
   b745a:	bd08      	pop	{r3, pc}
   b745c:	0003021c 	.word	0x0003021c

000b7460 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7460:	b508      	push	{r3, lr}
   b7462:	4b02      	ldr	r3, [pc, #8]	; (b746c <abort+0xc>)
   b7464:	681b      	ldr	r3, [r3, #0]
   b7466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7468:	9301      	str	r3, [sp, #4]
   b746a:	bd08      	pop	{r3, pc}
   b746c:	0003021c 	.word	0x0003021c

000b7470 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7470:	b508      	push	{r3, lr}
   b7472:	4b02      	ldr	r3, [pc, #8]	; (b747c <_malloc_r+0xc>)
   b7474:	681b      	ldr	r3, [r3, #0]
   b7476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7478:	9301      	str	r3, [sp, #4]
   b747a:	bd08      	pop	{r3, pc}
   b747c:	0003021c 	.word	0x0003021c

000b7480 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b7480:	b508      	push	{r3, lr}
   b7482:	4b02      	ldr	r3, [pc, #8]	; (b748c <__errno+0xc>)
   b7484:	681b      	ldr	r3, [r3, #0]
   b7486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7488:	9301      	str	r3, [sp, #4]
   b748a:	bd08      	pop	{r3, pc}
   b748c:	0003021c 	.word	0x0003021c

000b7490 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7490:	b508      	push	{r3, lr}
   b7492:	4b02      	ldr	r3, [pc, #8]	; (b749c <__assert_func+0xc>)
   b7494:	681b      	ldr	r3, [r3, #0]
   b7496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7498:	9301      	str	r3, [sp, #4]
   b749a:	bd08      	pop	{r3, pc}
   b749c:	0003021c 	.word	0x0003021c

000b74a0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b74a0:	b508      	push	{r3, lr}
   b74a2:	4b02      	ldr	r3, [pc, #8]	; (b74ac <newlib_impure_ptr_callback+0xc>)
   b74a4:	681b      	ldr	r3, [r3, #0]
   b74a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b74a8:	9301      	str	r3, [sp, #4]
   b74aa:	bd08      	pop	{r3, pc}
   b74ac:	0003021c 	.word	0x0003021c

000b74b0 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b74b0:	b508      	push	{r3, lr}
   b74b2:	4b02      	ldr	r3, [pc, #8]	; (b74bc <localtime_r+0xc>)
   b74b4:	681b      	ldr	r3, [r3, #0]
   b74b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b74b8:	9301      	str	r3, [sp, #4]
   b74ba:	bd08      	pop	{r3, pc}
   b74bc:	0003021c 	.word	0x0003021c

000b74c0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b74c0:	2100      	movs	r1, #0
   b74c2:	f7ff bed1 	b.w	b7268 <system_delay_ms>

000b74c6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b74c6:	b510      	push	{r4, lr}
      if (_M_empty())
   b74c8:	6883      	ldr	r3, [r0, #8]
   b74ca:	4604      	mov	r4, r0
   b74cc:	b90b      	cbnz	r3, b74d2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b74ce:	f003 fd94 	bl	baffa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b74d2:	68c3      	ldr	r3, [r0, #12]
   b74d4:	4798      	blx	r3
      if (_M_manager)
   b74d6:	68a3      	ldr	r3, [r4, #8]
   b74d8:	b11b      	cbz	r3, b74e2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b74da:	2203      	movs	r2, #3
   b74dc:	4621      	mov	r1, r4
   b74de:	4620      	mov	r0, r4
   b74e0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b74e2:	4620      	mov	r0, r4
   b74e4:	2110      	movs	r1, #16
}
   b74e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b74ea:	f7fc bdd8 	b.w	b409e <_ZdlPvj>

000b74ee <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b74ee:	4770      	bx	lr

000b74f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b74f0:	4770      	bx	lr

000b74f2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b74f2:	4770      	bx	lr

000b74f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b74f4:	4770      	bx	lr
	...

000b74f8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b74f8:	4b06      	ldr	r3, [pc, #24]	; (b7514 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b74fa:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b74fc:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b74fe:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7502:	d005      	beq.n	b7510 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7504:	4608      	mov	r0, r1
   b7506:	f003 fd7b 	bl	bb000 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b750a:	2800      	cmp	r0, #0
   b750c:	bf08      	it	eq
   b750e:	2400      	moveq	r4, #0
      }
   b7510:	4620      	mov	r0, r4
   b7512:	bd10      	pop	{r4, pc}
   b7514:	000be608 	.word	0x000be608

000b7518 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7518:	4b06      	ldr	r3, [pc, #24]	; (b7534 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b751a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b751c:	b510      	push	{r4, lr}
   b751e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7522:	d005      	beq.n	b7530 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7524:	4608      	mov	r0, r1
   b7526:	f003 fd6b 	bl	bb000 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b752a:	2800      	cmp	r0, #0
   b752c:	bf08      	it	eq
   b752e:	2400      	moveq	r4, #0
      }
   b7530:	4620      	mov	r0, r4
   b7532:	bd10      	pop	{r4, pc}
   b7534:	000be608 	.word	0x000be608

000b7538 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7538:	4b06      	ldr	r3, [pc, #24]	; (b7554 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b753a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b753c:	b510      	push	{r4, lr}
   b753e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7542:	d005      	beq.n	b7550 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7544:	4608      	mov	r0, r1
   b7546:	f003 fd5b 	bl	bb000 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b754a:	2800      	cmp	r0, #0
   b754c:	bf08      	it	eq
   b754e:	2400      	moveq	r4, #0
      }
   b7550:	4620      	mov	r0, r4
   b7552:	bd10      	pop	{r4, pc}
   b7554:	000be608 	.word	0x000be608

000b7558 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7558:	b510      	push	{r4, lr}
   b755a:	2168      	movs	r1, #104	; 0x68
   b755c:	4604      	mov	r4, r0
   b755e:	f7fc fd9e 	bl	b409e <_ZdlPvj>
   b7562:	4620      	mov	r0, r4
   b7564:	bd10      	pop	{r4, pc}

000b7566 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7566:	b510      	push	{r4, lr}
   b7568:	2128      	movs	r1, #40	; 0x28
   b756a:	4604      	mov	r4, r0
   b756c:	f7fc fd97 	bl	b409e <_ZdlPvj>
   b7570:	4620      	mov	r0, r4
   b7572:	bd10      	pop	{r4, pc}

000b7574 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7574:	b510      	push	{r4, lr}
   b7576:	2130      	movs	r1, #48	; 0x30
   b7578:	4604      	mov	r4, r0
   b757a:	f7fc fd90 	bl	b409e <_ZdlPvj>
   b757e:	4620      	mov	r0, r4
   b7580:	bd10      	pop	{r4, pc}

000b7582 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b7582:	2168      	movs	r1, #104	; 0x68
   b7584:	f7fc bd8b 	b.w	b409e <_ZdlPvj>

000b7588 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7588:	2128      	movs	r1, #40	; 0x28
   b758a:	f7fc bd88 	b.w	b409e <_ZdlPvj>

000b758e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b758e:	2130      	movs	r1, #48	; 0x30
   b7590:	f7fc bd85 	b.w	b409e <_ZdlPvj>

000b7594 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b7594:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7596:	2500      	movs	r5, #0
   b7598:	1cec      	adds	r4, r5, #3
   b759a:	428c      	cmp	r4, r1
   b759c:	d80d      	bhi.n	b75ba <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b759e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b75a0:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b75a2:	5d87      	ldrb	r7, [r0, r6]
   b75a4:	4297      	cmp	r7, r2
   b75a6:	d105      	bne.n	b75b4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b75a8:	4426      	add	r6, r4
   b75aa:	42b1      	cmp	r1, r6
   b75ac:	d305      	bcc.n	b75ba <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b75ae:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b75b0:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b75b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b75b4:	3401      	adds	r4, #1
   b75b6:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b75b8:	e7ee      	b.n	b7598 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b75ba:	2000      	movs	r0, #0
   b75bc:	e7f9      	b.n	b75b2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b75c0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b75c0:	4a02      	ldr	r2, [pc, #8]	; (b75cc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b75c2:	4903      	ldr	r1, [pc, #12]	; (b75d0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b75c4:	200a      	movs	r0, #10
   b75c6:	f7ff be2f 	b.w	b7228 <panic_>
   b75ca:	bf00      	nop
   b75cc:	000b6f49 	.word	0x000b6f49
   b75d0:	000be398 	.word	0x000be398

000b75d4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b75d4:	b430      	push	{r4, r5}
   b75d6:	460d      	mov	r5, r1
   b75d8:	4611      	mov	r1, r2
   b75da:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b75dc:	6803      	ldr	r3, [r0, #0]
   b75de:	6809      	ldr	r1, [r1, #0]
   b75e0:	6828      	ldr	r0, [r5, #0]
   b75e2:	e9d3 4300 	ldrd	r4, r3, [r3]
   b75e6:	46a4      	mov	ip, r4
      }
   b75e8:	bc30      	pop	{r4, r5}
   b75ea:	4760      	bx	ip

000b75ec <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b75ec:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b75ee:	b538      	push	{r3, r4, r5, lr}
   b75f0:	4604      	mov	r4, r0
	switch (__op)
   b75f2:	d102      	bne.n	b75fa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b75f4:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b75f6:	6023      	str	r3, [r4, #0]
	}
   b75f8:	e003      	b.n	b7602 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b75fa:	2a02      	cmp	r2, #2
   b75fc:	d003      	beq.n	b7606 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b75fe:	2a03      	cmp	r2, #3
   b7600:	d00d      	beq.n	b761e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b7602:	2000      	movs	r0, #0
   b7604:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b7606:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b7608:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b760a:	f7fc fd44 	bl	b4096 <_Znwj>
   b760e:	4603      	mov	r3, r0
   b7610:	2800      	cmp	r0, #0
   b7612:	d0f0      	beq.n	b75f6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b7614:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7618:	e883 0003 	stmia.w	r3, {r0, r1}
   b761c:	e7eb      	b.n	b75f6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b761e:	6800      	ldr	r0, [r0, #0]
   b7620:	2800      	cmp	r0, #0
   b7622:	d0ee      	beq.n	b7602 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b7624:	2108      	movs	r1, #8
   b7626:	f7fc fd3a 	bl	b409e <_ZdlPvj>
   b762a:	e7ea      	b.n	b7602 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b762c <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b762c:	b510      	push	{r4, lr}
	if (_M_manager)
   b762e:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b7630:	4604      	mov	r4, r0
	if (_M_manager)
   b7632:	b12b      	cbz	r3, b7640 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b7634:	2203      	movs	r2, #3
   b7636:	4601      	mov	r1, r0
   b7638:	4798      	blx	r3
	    _M_manager = nullptr;
   b763a:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b763c:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b7640:	bd10      	pop	{r4, pc}

000b7642 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b7642:	b510      	push	{r4, lr}
	if (_M_manager)
   b7644:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b7646:	4604      	mov	r4, r0
	if (_M_manager)
   b7648:	b12b      	cbz	r3, b7656 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b764a:	2203      	movs	r2, #3
   b764c:	4601      	mov	r1, r0
   b764e:	4798      	blx	r3
	    _M_manager = nullptr;
   b7650:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b7652:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b7656:	bd10      	pop	{r4, pc}

000b7658 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   b7658:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   b765a:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   b765c:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   b765e:	2220      	movs	r2, #32
   b7660:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   b7664:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   b7666:	4a08      	ldr	r2, [pc, #32]	; (b7688 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   b7668:	9200      	str	r2, [sp, #0]
   b766a:	4908      	ldr	r1, [pc, #32]	; (b768c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   b766c:	aa02      	add	r2, sp, #8
   b766e:	2001      	movs	r0, #1
   b7670:	f7ff fde2 	bl	b7238 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b7674:	6820      	ldr	r0, [r4, #0]
   b7676:	4906      	ldr	r1, [pc, #24]	; (b7690 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   b7678:	8800      	ldrh	r0, [r0, #0]
   b767a:	2300      	movs	r3, #0
   b767c:	4622      	mov	r2, r4
    }
   b767e:	b00a      	add	sp, #40	; 0x28
   b7680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b7684:	f7ff bb9a 	b.w	b6dbc <hal_ble_gatt_client_discover_all_services>
   b7688:	000be3ba 	.word	0x000be3ba
   b768c:	000be3af 	.word	0x000be3af
   b7690:	000b91cd 	.word	0x000b91cd

000b7694 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b7694:	b510      	push	{r4, lr}
   b7696:	3801      	subs	r0, #1
   b7698:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b769c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b76a0:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b76a2:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b76a6:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b76a8:	bf88      	it	hi
   b76aa:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b76ae:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b76b2:	7803      	ldrb	r3, [r0, #0]
   b76b4:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b76b8:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b76bc:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b76be:	bf88      	it	hi
   b76c0:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b76c4:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b76c6:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b76ca:	d1e7      	bne.n	b769c <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b76cc:	bd10      	pop	{r4, pc}

000b76ce <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b76ce:	b510      	push	{r4, lr}
   b76d0:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b76d2:	3058      	adds	r0, #88	; 0x58
   b76d4:	f7fc fde2 	bl	b429c <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b76d8:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b76dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b76e0:	f003 b832 	b.w	ba748 <_ZN6StringD1Ev>

000b76e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   b76e4:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   b76e6:	6803      	ldr	r3, [r0, #0]
   b76e8:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   b76ea:	4605      	mov	r5, r0
   b76ec:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   b76ee:	d008      	beq.n	b7702 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   b76f0:	b111      	cbz	r1, b76f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   b76f2:	684b      	ldr	r3, [r1, #4]
   b76f4:	3301      	adds	r3, #1
   b76f6:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   b76f8:	6828      	ldr	r0, [r5, #0]
   b76fa:	b108      	cbz	r0, b7700 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   b76fc:	f7fc fe0c 	bl	b4318 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b7700:	602c      	str	r4, [r5, #0]
      }
   b7702:	bd38      	pop	{r3, r4, r5, pc}

000b7704 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b7704:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7708:	b2da      	uxtb	r2, r3
   b770a:	2a09      	cmp	r2, #9
   b770c:	d801      	bhi.n	b7712 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b770e:	4618      	mov	r0, r3
   b7710:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b7712:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b7716:	2b05      	cmp	r3, #5
   b7718:	d801      	bhi.n	b771e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b771a:	3857      	subs	r0, #87	; 0x57
   b771c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b771e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b7722:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b7724:	bf94      	ite	ls
   b7726:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b7728:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b772c:	4770      	bx	lr
	...

000b7730 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b7730:	b510      	push	{r4, lr}
            locked_(false) {
   b7732:	2300      	movs	r3, #0
   b7734:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b7736:	4b04      	ldr	r3, [pc, #16]	; (b7748 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b7738:	4604      	mov	r4, r0
   b773a:	6818      	ldr	r0, [r3, #0]
   b773c:	f7ff fbe4 	bl	b6f08 <os_mutex_recursive_lock>
        locked_ = true;
   b7740:	2301      	movs	r3, #1
   b7742:	7023      	strb	r3, [r4, #0]
    }
   b7744:	4620      	mov	r0, r4
   b7746:	bd10      	pop	{r4, pc}
   b7748:	2003e654 	.word	0x2003e654

000b774c <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b774c:	b510      	push	{r4, lr}
        if (locked_) {
   b774e:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b7750:	4604      	mov	r4, r0
        if (locked_) {
   b7752:	b11b      	cbz	r3, b775c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b7754:	4b02      	ldr	r3, [pc, #8]	; (b7760 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b7756:	6818      	ldr	r0, [r3, #0]
   b7758:	f7ff fbde 	bl	b6f18 <os_mutex_recursive_unlock>
    }
   b775c:	4620      	mov	r0, r4
   b775e:	bd10      	pop	{r4, pc}
   b7760:	2003e654 	.word	0x2003e654

000b7764 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b7764:	b082      	sub	sp, #8
   b7766:	4603      	mov	r3, r0
    address_ = addr;
   b7768:	6808      	ldr	r0, [r1, #0]
   b776a:	6849      	ldr	r1, [r1, #4]
   b776c:	466a      	mov	r2, sp
   b776e:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b7770:	466a      	mov	r2, sp
   b7772:	ca03      	ldmia	r2!, {r0, r1}
   b7774:	6018      	str	r0, [r3, #0]
}
   b7776:	4618      	mov	r0, r3
    address_ = addr.address_;
   b7778:	6059      	str	r1, [r3, #4]
}
   b777a:	b002      	add	sp, #8
   b777c:	4770      	bx	lr

000b777e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b777e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b7780:	7982      	ldrb	r2, [r0, #6]
   b7782:	798b      	ldrb	r3, [r1, #6]
   b7784:	429a      	cmp	r2, r3
   b7786:	d106      	bne.n	b7796 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b7788:	2206      	movs	r2, #6
   b778a:	f004 fa64 	bl	bbc56 <memcmp>
   b778e:	fab0 f080 	clz	r0, r0
   b7792:	0940      	lsrs	r0, r0, #5
}
   b7794:	bd08      	pop	{r3, pc}
    return false;
   b7796:	2000      	movs	r0, #0
   b7798:	e7fc      	b.n	b7794 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b779a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b779a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b779e:	6003      	str	r3, [r0, #0]
   b77a0:	8083      	strh	r3, [r0, #4]
}
   b77a2:	2000      	movs	r0, #0
   b77a4:	4770      	bx	lr

000b77a6 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b77a6:	b508      	push	{r3, lr}
   b77a8:	4602      	mov	r2, r0
        : address_{} {
   b77aa:	2100      	movs	r1, #0
   b77ac:	6001      	str	r1, [r0, #0]
   b77ae:	6041      	str	r1, [r0, #4]
    clear();
   b77b0:	f7ff fff3 	bl	b779a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b77b4:	7191      	strb	r1, [r2, #6]
}
   b77b6:	4610      	mov	r0, r2
   b77b8:	bd08      	pop	{r3, pc}
	...

000b77bc <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b77bc:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b77be:	2301      	movs	r3, #1
   b77c0:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b77c2:	4b05      	ldr	r3, [pc, #20]	; (b77d8 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b77c4:	4602      	mov	r2, r0
   b77c6:	f103 0110 	add.w	r1, r3, #16
   b77ca:	f853 4b04 	ldr.w	r4, [r3], #4
   b77ce:	f842 4b04 	str.w	r4, [r2], #4
   b77d2:	428b      	cmp	r3, r1
   b77d4:	d1f9      	bne.n	b77ca <_ZN8particle7BleUuidC1Ev+0xe>
}
   b77d6:	bd10      	pop	{r4, pc}
   b77d8:	000be616 	.word	0x000be616

000b77dc <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b77dc:	7c0b      	ldrb	r3, [r1, #16]
   b77de:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   b77e2:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b77e4:	d10d      	bne.n	b7802 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   b77e6:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b77e8:	4b0c      	ldr	r3, [pc, #48]	; (b781c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   b77ea:	4602      	mov	r2, r0
   b77ec:	f103 0410 	add.w	r4, r3, #16
   b77f0:	f853 5b04 	ldr.w	r5, [r3], #4
   b77f4:	f842 5b04 	str.w	r5, [r2], #4
   b77f8:	42a3      	cmp	r3, r4
   b77fa:	d1f9      	bne.n	b77f0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   b77fc:	880b      	ldrh	r3, [r1, #0]
   b77fe:	8183      	strh	r3, [r0, #12]
}
   b7800:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   b7802:	2301      	movs	r3, #1
   b7804:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   b7806:	f101 0210 	add.w	r2, r1, #16
   b780a:	4603      	mov	r3, r0
   b780c:	f851 4b04 	ldr.w	r4, [r1], #4
   b7810:	f843 4b04 	str.w	r4, [r3], #4
   b7814:	4291      	cmp	r1, r2
   b7816:	d1f9      	bne.n	b780c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   b7818:	e7f2      	b.n	b7800 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   b781a:	bf00      	nop
   b781c:	000be616 	.word	0x000be616

000b7820 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7820:	b510      	push	{r4, lr}
    if (uuid128) {
   b7822:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7824:	4604      	mov	r4, r0
    if (uuid128) {
   b7826:	b1b1      	cbz	r1, b7856 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b7828:	2a01      	cmp	r2, #1
   b782a:	f101 0210 	add.w	r2, r1, #16
   b782e:	d10a      	bne.n	b7846 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b7830:	4601      	mov	r1, r0
   b7832:	f853 0b04 	ldr.w	r0, [r3], #4
   b7836:	f841 0b04 	str.w	r0, [r1], #4
   b783a:	4293      	cmp	r3, r2
   b783c:	d1f9      	bne.n	b7832 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b783e:	2301      	movs	r3, #1
   b7840:	6123      	str	r3, [r4, #16]
}
   b7842:	4620      	mov	r0, r4
   b7844:	bd10      	pop	{r4, pc}
   b7846:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b7848:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b784c:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b7850:	429a      	cmp	r2, r3
   b7852:	d1f9      	bne.n	b7848 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b7854:	e7f3      	b.n	b783e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b7856:	2210      	movs	r2, #16
   b7858:	f004 fa35 	bl	bbcc6 <memset>
   b785c:	e7f1      	b.n	b7842 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b785e <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b785e:	b538      	push	{r3, r4, r5, lr}
   b7860:	4604      	mov	r4, r0
   b7862:	460d      	mov	r5, r1
        : BleUuid() {
   b7864:	f7ff ffaa 	bl	b77bc <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b7868:	2300      	movs	r3, #0
   b786a:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b786c:	81a5      	strh	r5, [r4, #12]
}
   b786e:	4620      	mov	r0, r4
   b7870:	bd38      	pop	{r3, r4, r5, pc}

000b7872 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b7872:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7874:	6902      	ldr	r2, [r0, #16]
   b7876:	690b      	ldr	r3, [r1, #16]
   b7878:	429a      	cmp	r2, r3
   b787a:	d106      	bne.n	b788a <_ZNK8particle7BleUuideqERKS0_+0x18>
   b787c:	2210      	movs	r2, #16
   b787e:	f004 f9ea 	bl	bbc56 <memcmp>
   b7882:	fab0 f080 	clz	r0, r0
   b7886:	0940      	lsrs	r0, r0, #5
}
   b7888:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b788a:	2000      	movs	r0, #0
   b788c:	e7fc      	b.n	b7888 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b7890 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b7890:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b7892:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b7896:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7898:	4b34      	ldr	r3, [pc, #208]	; (b796c <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b789a:	460c      	mov	r4, r1
   b789c:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b789e:	4602      	mov	r2, r0
   b78a0:	f103 0110 	add.w	r1, r3, #16
   b78a4:	f853 0b04 	ldr.w	r0, [r3], #4
   b78a8:	f842 0b04 	str.w	r0, [r2], #4
   b78ac:	428b      	cmp	r3, r1
   b78ae:	d1f9      	bne.n	b78a4 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b78b0:	b344      	cbz	r4, b7904 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b78b2:	2124      	movs	r1, #36	; 0x24
   b78b4:	4620      	mov	r0, r4
   b78b6:	f004 faab 	bl	bbe10 <strnlen>
   b78ba:	2804      	cmp	r0, #4
   b78bc:	f04f 0500 	mov.w	r5, #0
   b78c0:	d123      	bne.n	b790a <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b78c2:	f8ad 5004 	strh.w	r5, [sp, #4]
   b78c6:	af01      	add	r7, sp, #4
   b78c8:	1ca5      	adds	r5, r4, #2
   b78ca:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b78cc:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b78d0:	f7ff ff18 	bl	b7704 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b78d4:	f1b0 0800 	subs.w	r8, r0, #0
   b78d8:	db12      	blt.n	b7900 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b78da:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b78de:	f7ff ff11 	bl	b7704 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b78e2:	2800      	cmp	r0, #0
   b78e4:	db0c      	blt.n	b7900 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b78e6:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b78e8:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b78ec:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b78ee:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b78f2:	d1eb      	bne.n	b78cc <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b78f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b78f8:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b78fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b78fe:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b7900:	2300      	movs	r3, #0
   b7902:	6133      	str	r3, [r6, #16]
}
   b7904:	b002      	add	sp, #8
   b7906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b790a:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b790e:	2124      	movs	r1, #36	; 0x24
   b7910:	4620      	mov	r0, r4
   b7912:	f004 fa7d 	bl	bbe10 <strnlen>
   b7916:	42a8      	cmp	r0, r5
   b7918:	d807      	bhi.n	b792a <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b791a:	4642      	mov	r2, r8
   b791c:	2100      	movs	r1, #0
   b791e:	4630      	mov	r0, r6
}
   b7920:	b002      	add	sp, #8
   b7922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b7926:	f004 b9ce 	b.w	bbcc6 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b792a:	f1b8 0f00 	cmp.w	r8, #0
   b792e:	d0e9      	beq.n	b7904 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b7930:	5d60      	ldrb	r0, [r4, r5]
   b7932:	f7ff fee7 	bl	b7704 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b7936:	0603      	lsls	r3, r0, #24
   b7938:	d415      	bmi.n	b7966 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b793a:	0100      	lsls	r0, r0, #4
   b793c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7940:	b2c7      	uxtb	r7, r0
   b7942:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b7946:	2124      	movs	r1, #36	; 0x24
   b7948:	4620      	mov	r0, r4
   b794a:	f004 fa61 	bl	bbe10 <strnlen>
   b794e:	3501      	adds	r5, #1
   b7950:	42a8      	cmp	r0, r5
   b7952:	d908      	bls.n	b7966 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b7954:	5d60      	ldrb	r0, [r4, r5]
   b7956:	f7ff fed5 	bl	b7704 <_ZN8particle11hexToNibbleEc>
   b795a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b795c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b795e:	bfa4      	itt	ge
   b7960:	4338      	orrge	r0, r7
   b7962:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7966:	3501      	adds	r5, #1
   b7968:	e7d1      	b.n	b790e <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b796a:	bf00      	nop
   b796c:	000be616 	.word	0x000be616

000b7970 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b7970:	b513      	push	{r0, r1, r4, lr}
   b7972:	4604      	mov	r4, r0
   b7974:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b7976:	f7ff ff21 	bl	b77bc <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b797a:	4620      	mov	r0, r4
   b797c:	9901      	ldr	r1, [sp, #4]
   b797e:	f7ff ff87 	bl	b7890 <_ZN8particle7BleUuid9constructEPKc>
}
   b7982:	4620      	mov	r0, r4
   b7984:	b002      	add	sp, #8
   b7986:	bd10      	pop	{r4, pc}

000b7988 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   b7988:	b510      	push	{r4, lr}
   b798a:	f100 030f 	add.w	r3, r0, #15
   b798e:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   b7990:	781c      	ldrb	r4, [r3, #0]
   b7992:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b7996:	4283      	cmp	r3, r0
   b7998:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   b799c:	d1f8      	bne.n	b7990 <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   b799e:	bd10      	pop	{r4, pc}

000b79a0 <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   b79a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b79a4:	461f      	mov	r7, r3
   b79a6:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   b79a8:	460d      	mov	r5, r1
   b79aa:	2900      	cmp	r1, #0
   b79ac:	d05b      	beq.n	b7a66 <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   b79ae:	b1da      	cbz	r2, b79e8 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   b79b0:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   b79b4:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   b79b6:	f1b8 0f00 	cmp.w	r8, #0
   b79ba:	d119      	bne.n	b79f0 <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b79bc:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   b79be:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b79c2:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b79c4:	aa05      	add	r2, sp, #20
   b79c6:	2102      	movs	r1, #2
   b79c8:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b79ca:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b79ce:	f7ff fe61 	bl	b7694 <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   b79d2:	2c04      	cmp	r4, #4
   b79d4:	bf28      	it	cs
   b79d6:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   b79d8:	4622      	mov	r2, r4
   b79da:	a905      	add	r1, sp, #20
   b79dc:	4628      	mov	r0, r5
   b79de:	f004 f94a 	bl	bbc76 <memcpy>
        buf[len++] = '\0';
   b79e2:	f805 8004 	strb.w	r8, [r5, r4]
   b79e6:	1c62      	adds	r2, r4, #1
}
   b79e8:	4610      	mov	r0, r2
   b79ea:	b00e      	add	sp, #56	; 0x38
   b79ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   b79f0:	a901      	add	r1, sp, #4
   b79f2:	f7ff ffc9 	bl	b7988 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b79f6:	aa05      	add	r2, sp, #20
    if (stripped) {
   b79f8:	b17f      	cbz	r7, b7a1a <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b79fa:	2110      	movs	r1, #16
   b79fc:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b79fe:	f7ff fe49 	bl	b7694 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b7a02:	2c24      	cmp	r4, #36	; 0x24
   b7a04:	bf28      	it	cs
   b7a06:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   b7a08:	4622      	mov	r2, r4
   b7a0a:	a905      	add	r1, sp, #20
   b7a0c:	4628      	mov	r0, r5
   b7a0e:	f004 f932 	bl	bbc76 <memcpy>
    buf[len++] = '\0';
   b7a12:	2300      	movs	r3, #0
   b7a14:	552b      	strb	r3, [r5, r4]
   b7a16:	1c62      	adds	r2, r4, #1
    return len;
   b7a18:	e7e6      	b.n	b79e8 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   b7a1a:	2104      	movs	r1, #4
   b7a1c:	eb0d 0001 	add.w	r0, sp, r1
   b7a20:	f7ff fe38 	bl	b7694 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   b7a24:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b7a26:	f10d 021d 	add.w	r2, sp, #29
   b7a2a:	2102      	movs	r1, #2
   b7a2c:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   b7a2e:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b7a32:	f7ff fe2f 	bl	b7694 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b7a36:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   b7a3a:	2102      	movs	r1, #2
   b7a3c:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   b7a40:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b7a44:	f7ff fe26 	bl	b7694 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b7a48:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   b7a4c:	2102      	movs	r1, #2
   b7a4e:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   b7a50:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b7a54:	f7ff fe1e 	bl	b7694 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   b7a58:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b7a5c:	aa0b      	add	r2, sp, #44	; 0x2c
   b7a5e:	2106      	movs	r1, #6
   b7a60:	f10d 000e 	add.w	r0, sp, #14
   b7a64:	e7cb      	b.n	b79fe <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   b7a66:	460a      	mov	r2, r1
   b7a68:	e7be      	b.n	b79e8 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000b7a6a <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   b7a6a:	b510      	push	{r4, lr}
   b7a6c:	b08a      	sub	sp, #40	; 0x28
   b7a6e:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   b7a70:	2300      	movs	r3, #0
   b7a72:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   b7a74:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   b7a76:	4669      	mov	r1, sp
   b7a78:	f7ff ff92 	bl	b79a0 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   b7a7c:	4669      	mov	r1, sp
   b7a7e:	4620      	mov	r0, r4
   b7a80:	f002 fead 	bl	ba7de <_ZN6StringC1EPK19__FlashStringHelper>
}
   b7a84:	4620      	mov	r0, r4
   b7a86:	b00a      	add	sp, #40	; 0x28
   b7a88:	bd10      	pop	{r4, pc}

000b7a8a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b7a8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7a8c:	4605      	mov	r5, r0
   b7a8e:	4616      	mov	r6, r2
   b7a90:	461f      	mov	r7, r3
   b7a92:	460a      	mov	r2, r1
   b7a94:	ab01      	add	r3, sp, #4
   b7a96:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7a9a:	f7ff fd7b 	bl	b7594 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b7a9e:	f030 0402 	bics.w	r4, r0, #2
   b7aa2:	d00c      	beq.n	b7abe <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b7aa4:	1e84      	subs	r4, r0, #2
   b7aa6:	42bc      	cmp	r4, r7
   b7aa8:	bf28      	it	cs
   b7aaa:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b7aac:	b13e      	cbz	r6, b7abe <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b7aae:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b7ab0:	682b      	ldr	r3, [r5, #0]
   b7ab2:	3102      	adds	r1, #2
   b7ab4:	4622      	mov	r2, r4
   b7ab6:	4419      	add	r1, r3
   b7ab8:	4630      	mov	r0, r6
   b7aba:	f004 f8dc 	bl	bbc76 <memcpy>
}
   b7abe:	4620      	mov	r0, r4
   b7ac0:	b003      	add	sp, #12
   b7ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7ac4 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b7ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7ac6:	4613      	mov	r3, r2
   b7ac8:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b7aca:	9201      	str	r2, [sp, #4]
   b7acc:	460a      	mov	r2, r1
   b7ace:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b7ad0:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b7ad2:	f7ff ffda 	bl	b7a8a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b7ad6:	b940      	cbnz	r0, b7aea <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b7ad8:	9b01      	ldr	r3, [sp, #4]
   b7ada:	4622      	mov	r2, r4
   b7adc:	2109      	movs	r1, #9
   b7ade:	4628      	mov	r0, r5
}
   b7ae0:	b003      	add	sp, #12
   b7ae2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b7ae6:	f7ff bfd0 	b.w	b7a8a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b7aea:	b003      	add	sp, #12
   b7aec:	bd30      	pop	{r4, r5, pc}
	...

000b7af0 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b7af0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7af2:	460c      	mov	r4, r1
   b7af4:	b089      	sub	sp, #36	; 0x24
    String name;
   b7af6:	490c      	ldr	r1, [pc, #48]	; (b7b28 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b7af8:	4605      	mov	r5, r0
    String name;
   b7afa:	f002 fe70 	bl	ba7de <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b7afe:	221f      	movs	r2, #31
   b7b00:	4669      	mov	r1, sp
   b7b02:	4620      	mov	r0, r4
   b7b04:	f7ff ffde 	bl	b7ac4 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b7b08:	4606      	mov	r6, r0
   b7b0a:	b150      	cbz	r0, b7b22 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b7b0c:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b7b0e:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b7b10:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7b14:	4628      	mov	r0, r5
   b7b16:	f002 fee1 	bl	ba8dc <_ZN6String6concatEc>
   b7b1a:	b110      	cbz	r0, b7b22 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b7b1c:	3701      	adds	r7, #1
   b7b1e:	42be      	cmp	r6, r7
   b7b20:	d1f6      	bne.n	b7b10 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b7b22:	4628      	mov	r0, r5
   b7b24:	b009      	add	sp, #36	; 0x24
   b7b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7b28:	000be1d5 	.word	0x000be1d5

000b7b2c <_ZNK8particle18BleAdvertisingData10customDataEPhj>:
size_t BleAdvertisingData::customData(uint8_t* buf, size_t len) const {
   b7b2c:	4613      	mov	r3, r2
    return get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len);
   b7b2e:	460a      	mov	r2, r1
   b7b30:	21ff      	movs	r1, #255	; 0xff
   b7b32:	f7ff bfaa 	b.w	b7a8a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>

000b7b36 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b7b36:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b7b38:	2302      	movs	r3, #2
   b7b3a:	aa01      	add	r2, sp, #4
   b7b3c:	2119      	movs	r1, #25
   b7b3e:	f7ff ffa4 	bl	b7a8a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b7b42:	b108      	cbz	r0, b7b48 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b7b44:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b7b48:	b003      	add	sp, #12
   b7b4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7b50 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b7b50:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b7b52:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7b56:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b7b58:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b7b5a:	8043      	strh	r3, [r0, #2]
   b7b5c:	220e      	movs	r2, #14
   b7b5e:	4629      	mov	r1, r5
   b7b60:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b7b62:	7105      	strb	r5, [r0, #4]
   b7b64:	3006      	adds	r0, #6
   b7b66:	f004 f8ae 	bl	bbcc6 <memset>
   b7b6a:	f104 0014 	add.w	r0, r4, #20
   b7b6e:	f7ff fe25 	bl	b77bc <_ZN8particle7BleUuidC1Ev>
   b7b72:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b7b76:	f7ff fe21 	bl	b77bc <_ZN8particle7BleUuidC1Ev>
   b7b7a:	4904      	ldr	r1, [pc, #16]	; (b7b8c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b7b7c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7b80:	f002 fe2d 	bl	ba7de <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b7b84:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b7b86:	4620      	mov	r0, r4
   b7b88:	bd38      	pop	{r3, r4, r5, pc}
   b7b8a:	bf00      	nop
   b7b8c:	000be1d5 	.word	0x000be1d5

000b7b90 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   b7b90:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b7b92:	680d      	ldr	r5, [r1, #0]
   b7b94:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b7b96:	4601      	mov	r1, r0
   b7b98:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b7b9c:	f7ff fe69 	bl	b7872 <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b7ba0:	b140      	cbz	r0, b7bb4 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   b7ba2:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b7ba4:	8aa2      	ldrh	r2, [r4, #20]
   b7ba6:	429a      	cmp	r2, r3
   b7ba8:	d805      	bhi.n	b7bb6 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b7baa:	8ae0      	ldrh	r0, [r4, #22]
   b7bac:	4298      	cmp	r0, r3
   b7bae:	bf34      	ite	cc
   b7bb0:	2000      	movcc	r0, #0
   b7bb2:	2001      	movcs	r0, #1
    }
   b7bb4:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b7bb6:	2000      	movs	r0, #0
   b7bb8:	e7fc      	b.n	b7bb4 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000b7bba <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b7bba:	b510      	push	{r4, lr}
    return data_ + size_;
   b7bbc:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b7bc0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b7bc4:	4293      	cmp	r3, r2
   b7bc6:	4618      	mov	r0, r3
   b7bc8:	d006      	beq.n	b7bd8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b7bca:	6804      	ldr	r4, [r0, #0]
   b7bcc:	8824      	ldrh	r4, [r4, #0]
   b7bce:	428c      	cmp	r4, r1
   b7bd0:	f103 0308 	add.w	r3, r3, #8
   b7bd4:	d1f6      	bne.n	b7bc4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b7bd6:	bd10      	pop	{r4, pc}
        return nullptr;
   b7bd8:	2000      	movs	r0, #0
   b7bda:	e7fc      	b.n	b7bd6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000b7bdc <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7bdc:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   b7bde:	b570      	push	{r4, r5, r6, lr}
   b7be0:	6003      	str	r3, [r0, #0]
   b7be2:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7be4:	2068      	movs	r0, #104	; 0x68
   b7be6:	f7fc fa56 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7bea:	1e04      	subs	r4, r0, #0
   b7bec:	f104 060c 	add.w	r6, r4, #12
   b7bf0:	d007      	beq.n	b7c02 <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   b7bf2:	2301      	movs	r3, #1
   b7bf4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b7bf8:	4b04      	ldr	r3, [pc, #16]	; (b7c0c <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   b7bfa:	6023      	str	r3, [r4, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7bfc:	4630      	mov	r0, r6
   b7bfe:	f7ff ffa7 	bl	b7b50 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   b7c02:	e9c5 6400 	strd	r6, r4, [r5]
}
   b7c06:	4628      	mov	r0, r5
   b7c08:	bd70      	pop	{r4, r5, r6, pc}
   b7c0a:	bf00      	nop
   b7c0c:	000be5bc 	.word	0x000be5bc

000b7c10 <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   b7c10:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   b7c12:	680c      	ldr	r4, [r1, #0]
   b7c14:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   b7c16:	4606      	mov	r6, r0
    return impl()->charUUID();
   b7c18:	4605      	mov	r5, r0
   b7c1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7c1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7c1e:	6823      	ldr	r3, [r4, #0]
   b7c20:	602b      	str	r3, [r5, #0]
}
   b7c22:	4630      	mov	r0, r6
   b7c24:	bd70      	pop	{r4, r5, r6, pc}
	...

000b7c28 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b7c28:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7c2a:	4606      	mov	r6, r0
   b7c2c:	b085      	sub	sp, #20
   b7c2e:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b7c30:	460d      	mov	r5, r1
   b7c32:	2900      	cmp	r1, #0
   b7c34:	d050      	beq.n	b7cd8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b7c36:	2a00      	cmp	r2, #0
   b7c38:	d04e      	beq.n	b7cd8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
   b7c3a:	6804      	ldr	r4, [r0, #0]
    if (impl()->isLocal()) {
   b7c3c:	7823      	ldrb	r3, [r4, #0]
   b7c3e:	2af4      	cmp	r2, #244	; 0xf4
   b7c40:	bf28      	it	cs
   b7c42:	22f4      	movcs	r2, #244	; 0xf4
   b7c44:	b343      	cbz	r3, b7c98 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b7c46:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b7c48:	0798      	lsls	r0, r3, #30
   b7c4a:	d509      	bpl.n	b7c60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b7c4c:	89a0      	ldrh	r0, [r4, #12]
   b7c4e:	9203      	str	r2, [sp, #12]
   b7c50:	2300      	movs	r3, #0
   b7c52:	f7ff f8a9 	bl	b6da8 <hal_ble_gatt_server_set_characteristic_value>
   b7c56:	2800      	cmp	r0, #0
   b7c58:	9a03      	ldr	r2, [sp, #12]
   b7c5a:	da03      	bge.n	b7c64 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   b7c5c:	b005      	add	sp, #20
   b7c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b7c60:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7c64:	6834      	ldr	r4, [r6, #0]
   b7c66:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b7c68:	06d9      	lsls	r1, r3, #27
   b7c6a:	d509      	bpl.n	b7c80 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b7c6c:	2f01      	cmp	r7, #1
   b7c6e:	d007      	beq.n	b7c80 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7c70:	89a0      	ldrh	r0, [r4, #12]
   b7c72:	2300      	movs	r3, #0
   b7c74:	4629      	mov	r1, r5
}
   b7c76:	b005      	add	sp, #20
   b7c78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7c7c:	f7ff b8f8 	b.w	b6e70 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b7c80:	069b      	lsls	r3, r3, #26
   b7c82:	d5eb      	bpl.n	b7c5c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7c84:	2f02      	cmp	r7, #2
   b7c86:	d0e9      	beq.n	b7c5c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7c88:	89a0      	ldrh	r0, [r4, #12]
   b7c8a:	2300      	movs	r3, #0
   b7c8c:	4629      	mov	r1, r5
}
   b7c8e:	b005      	add	sp, #20
   b7c90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7c94:	f7ff b8f6 	b.w	b6e84 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b7c98:	8860      	ldrh	r0, [r4, #2]
   b7c9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7c9e:	4288      	cmp	r0, r1
   b7ca0:	d01c      	beq.n	b7cdc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b7ca2:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b7ca4:	074e      	lsls	r6, r1, #29
   b7ca6:	d501      	bpl.n	b7cac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b7ca8:	2f01      	cmp	r7, #1
   b7caa:	d104      	bne.n	b7cb6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7cac:	070b      	lsls	r3, r1, #28
   b7cae:	d409      	bmi.n	b7cc4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b7cb0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7cb4:	e7d2      	b.n	b7c5c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7cb6:	89a1      	ldrh	r1, [r4, #12]
   b7cb8:	9300      	str	r3, [sp, #0]
   b7cba:	4613      	mov	r3, r2
   b7cbc:	462a      	mov	r2, r5
   b7cbe:	f7ff f89b 	bl	b6df8 <hal_ble_gatt_client_write_without_response>
   b7cc2:	e7cb      	b.n	b7c5c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7cc4:	2f02      	cmp	r7, #2
   b7cc6:	d0f3      	beq.n	b7cb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7cc8:	2300      	movs	r3, #0
   b7cca:	89a1      	ldrh	r1, [r4, #12]
   b7ccc:	9300      	str	r3, [sp, #0]
   b7cce:	4613      	mov	r3, r2
   b7cd0:	462a      	mov	r2, r5
   b7cd2:	f7ff f887 	bl	b6de4 <hal_ble_gatt_client_write_with_response>
   b7cd6:	e7c1      	b.n	b7c5c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b7cd8:	4802      	ldr	r0, [pc, #8]	; (b7ce4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b7cda:	e7bf      	b.n	b7c5c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b7cdc:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b7ce0:	e7bc      	b.n	b7c5c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7ce2:	bf00      	nop
   b7ce4:	fffffef2 	.word	0xfffffef2

000b7ce8 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   b7ce8:	b510      	push	{r4, lr}
   b7cea:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b7cec:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   b7cee:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b7cf0:	bb52      	cbnz	r2, b7d48 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   b7cf2:	885c      	ldrh	r4, [r3, #2]
   b7cf4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7cf8:	4284      	cmp	r4, r0
   b7cfa:	d025      	beq.n	b7d48 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b7cfc:	8a18      	ldrh	r0, [r3, #16]
   b7cfe:	b330      	cbz	r0, b7d4e <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   b7d00:	e9cd 2203 	strd	r2, r2, [sp, #12]
   b7d04:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   b7d06:	4a13      	ldr	r2, [pc, #76]	; (b7d54 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   b7d08:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   b7d0a:	4a13      	ldr	r2, [pc, #76]	; (b7d58 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   b7d0c:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   b7d10:	885a      	ldrh	r2, [r3, #2]
   b7d12:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   b7d16:	8a1a      	ldrh	r2, [r3, #16]
   b7d18:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   b7d1c:	899a      	ldrh	r2, [r3, #12]
   b7d1e:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   b7d22:	b159      	cbz	r1, b7d3c <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   b7d24:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   b7d26:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   b7d28:	bf44      	itt	mi
   b7d2a:	2202      	movmi	r2, #2
   b7d2c:	9205      	strmi	r2, [sp, #20]
   b7d2e:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   b7d30:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   b7d32:	bf42      	ittt	mi
   b7d34:	9b05      	ldrmi	r3, [sp, #20]
   b7d36:	f043 0301 	orrmi.w	r3, r3, #1
   b7d3a:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   b7d3c:	2100      	movs	r1, #0
   b7d3e:	4668      	mov	r0, sp
   b7d40:	f7ff f88c 	bl	b6e5c <hal_ble_gatt_client_configure_cccd>
}
   b7d44:	b006      	add	sp, #24
   b7d46:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b7d48:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b7d4c:	e7fa      	b.n	b7d44 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b7d4e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7d52:	e7f7      	b.n	b7d44 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   b7d54:	00180003 	.word	0x00180003
   b7d58:	000b7f2d 	.word	0x000b7f2d

000b7d5c <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   b7d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7d5e:	2600      	movs	r6, #0
   b7d60:	6006      	str	r6, [r0, #0]
   b7d62:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7d64:	2028      	movs	r0, #40	; 0x28
   b7d66:	f7fc f996 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7d6a:	1e04      	subs	r4, r0, #0
   b7d6c:	f104 070c 	add.w	r7, r4, #12
   b7d70:	d00a      	beq.n	b7d88 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   b7d72:	2301      	movs	r3, #1
   b7d74:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b7d78:	4b05      	ldr	r3, [pc, #20]	; (b7d90 <_ZN8particle10BleServiceC1Ev+0x34>)
   b7d7a:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   b7d7c:	4638      	mov	r0, r7
   b7d7e:	f7ff fd1d 	bl	b77bc <_ZN8particle7BleUuidC1Ev>
   b7d82:	6226      	str	r6, [r4, #32]
   b7d84:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   b7d88:	e9c5 7400 	strd	r7, r4, [r5]
}
   b7d8c:	4628      	mov	r0, r5
   b7d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7d90:	000be5d8 	.word	0x000be5d8

000b7d94 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b7d94:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7d96:	2500      	movs	r5, #0
   b7d98:	6005      	str	r5, [r0, #0]
   b7d9a:	4606      	mov	r6, r0
   b7d9c:	2030      	movs	r0, #48	; 0x30
   b7d9e:	f7fc f97a 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7da2:	4604      	mov	r4, r0
   b7da4:	b188      	cbz	r0, b7dca <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b7da6:	2301      	movs	r3, #1
   b7da8:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b7dac:	4b09      	ldr	r3, [pc, #36]	; (b7dd4 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b7dae:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b7db0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7db4:	8183      	strh	r3, [r0, #12]
   b7db6:	300e      	adds	r0, #14
   b7db8:	f7ff fcf5 	bl	b77a6 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b7dbc:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b7dc0:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b7dc4:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b7dc8:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b7dca:	6074      	str	r4, [r6, #4]
   b7dcc:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b7dce:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b7dd0:	4630      	mov	r0, r6
   b7dd2:	bd70      	pop	{r4, r5, r6, pc}
   b7dd4:	000be5f4 	.word	0x000be5f4

000b7dd8 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b7dd8:	b513      	push	{r0, r1, r4, lr}
   b7dda:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7ddc:	a801      	add	r0, sp, #4
   b7dde:	f7ff fca7 	bl	b7730 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b7de2:	6823      	ldr	r3, [r4, #0]
   b7de4:	881c      	ldrh	r4, [r3, #0]
   b7de6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7dea:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b7dec:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b7dee:	bf18      	it	ne
   b7df0:	2401      	movne	r4, #1
    WiringBleLock lk;
   b7df2:	f7ff fcab 	bl	b774c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7df6:	4620      	mov	r0, r4
   b7df8:	b002      	add	sp, #8
   b7dfa:	bd10      	pop	{r4, pc}

000b7dfc <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   b7dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7dfe:	4605      	mov	r5, r0
   b7e00:	460c      	mov	r4, r1
    WiringBleLock lk;
   b7e02:	a801      	add	r0, sp, #4
   b7e04:	f7ff fc94 	bl	b7730 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7e08:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b7e0a:	6823      	ldr	r3, [r4, #0]
   b7e0c:	f8c2 3002 	str.w	r3, [r2, #2]
   b7e10:	6863      	ldr	r3, [r4, #4]
   b7e12:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   b7e16:	a801      	add	r0, sp, #4
   b7e18:	f7ff fc98 	bl	b774c <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   b7e1c:	b003      	add	sp, #12
   b7e1e:	bd30      	pop	{r4, r5, pc}

000b7e20 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   b7e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7e22:	460d      	mov	r5, r1
   b7e24:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7e26:	a801      	add	r0, sp, #4
   b7e28:	f7ff fc82 	bl	b7730 <_ZN8particle3ble13WiringBleLockC1Ev>
   b7e2c:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b7e2e:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b7e32:	6023      	str	r3, [r4, #0]
   b7e34:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b7e38:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b7e3a:	a801      	add	r0, sp, #4
   b7e3c:	f7ff fc86 	bl	b774c <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b7e40:	4620      	mov	r0, r4
   b7e42:	b003      	add	sp, #12
   b7e44:	bd30      	pop	{r4, r5, pc}

000b7e46 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b7e46:	b530      	push	{r4, r5, lr}
   b7e48:	4605      	mov	r5, r0
   b7e4a:	b087      	sub	sp, #28
   b7e4c:	460c      	mov	r4, r1
    WiringBleLock lk;
   b7e4e:	a801      	add	r0, sp, #4
   b7e50:	f7ff fc6e 	bl	b7730 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b7e54:	682a      	ldr	r2, [r5, #0]
   b7e56:	6823      	ldr	r3, [r4, #0]
   b7e58:	8812      	ldrh	r2, [r2, #0]
   b7e5a:	881b      	ldrh	r3, [r3, #0]
   b7e5c:	429a      	cmp	r2, r3
   b7e5e:	d10d      	bne.n	b7e7c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b7e60:	4629      	mov	r1, r5
   b7e62:	a802      	add	r0, sp, #8
   b7e64:	f7ff ffdc 	bl	b7e20 <_ZNK8particle13BlePeerDevice7addressEv>
   b7e68:	4621      	mov	r1, r4
   b7e6a:	a804      	add	r0, sp, #16
   b7e6c:	f7ff ffd8 	bl	b7e20 <_ZNK8particle13BlePeerDevice7addressEv>
   b7e70:	a904      	add	r1, sp, #16
   b7e72:	a802      	add	r0, sp, #8
   b7e74:	f7ff fc83 	bl	b777e <_ZNK8particle10BleAddresseqERKS0_>
   b7e78:	4604      	mov	r4, r0
   b7e7a:	b900      	cbnz	r0, b7e7e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b7e7c:	2400      	movs	r4, #0
    WiringBleLock lk;
   b7e7e:	a801      	add	r0, sp, #4
   b7e80:	f7ff fc64 	bl	b774c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7e84:	4620      	mov	r0, r4
   b7e86:	b007      	add	sp, #28
   b7e88:	bd30      	pop	{r4, r5, pc}
	...

000b7e8c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b7e8c:	b510      	push	{r4, lr}
   b7e8e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b7e90:	2064      	movs	r0, #100	; 0x64
   b7e92:	f7fc f900 	bl	b4096 <_Znwj>
   b7e96:	b168      	cbz	r0, b7eb4 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b7e98:	2300      	movs	r3, #0
   b7e9a:	e9c0 3300 	strd	r3, r3, [r0]
   b7e9e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b7ea2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b7ea6:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b7eaa:	6203      	str	r3, [r0, #32]
   b7eac:	62c3      	str	r3, [r0, #44]	; 0x2c
   b7eae:	63c3      	str	r3, [r0, #60]	; 0x3c
   b7eb0:	64c3      	str	r3, [r0, #76]	; 0x4c
   b7eb2:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b7eb4:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b7eb6:	b920      	cbnz	r0, b7ec2 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b7eb8:	4a0a      	ldr	r2, [pc, #40]	; (b7ee4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b7eba:	490b      	ldr	r1, [pc, #44]	; (b7ee8 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b7ebc:	200a      	movs	r0, #10
   b7ebe:	f7ff f9b3 	bl	b7228 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b7ec2:	2000      	movs	r0, #0
   b7ec4:	f7fe ff4c 	bl	b6d60 <hal_ble_stack_init>
   b7ec8:	b120      	cbz	r0, b7ed4 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b7eca:	4a06      	ldr	r2, [pc, #24]	; (b7ee4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b7ecc:	4907      	ldr	r1, [pc, #28]	; (b7eec <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b7ece:	200a      	movs	r0, #10
   b7ed0:	f7ff f9aa 	bl	b7228 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b7ed4:	6821      	ldr	r1, [r4, #0]
   b7ed6:	4806      	ldr	r0, [pc, #24]	; (b7ef0 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b7ed8:	2200      	movs	r2, #0
   b7eda:	f7fe ffb5 	bl	b6e48 <hal_ble_set_callback_on_periph_link_events>
}
   b7ede:	4620      	mov	r0, r4
   b7ee0:	bd10      	pop	{r4, pc}
   b7ee2:	bf00      	nop
   b7ee4:	000b6f49 	.word	0x000b6f49
   b7ee8:	000be398 	.word	0x000be398
   b7eec:	000be3d6 	.word	0x000be3d6
   b7ef0:	000b88fd 	.word	0x000b88fd

000b7ef4 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b7ef4:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b7ef6:	4c0a      	ldr	r4, [pc, #40]	; (b7f20 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b7ef8:	7823      	ldrb	r3, [r4, #0]
   b7efa:	f3bf 8f5b 	dmb	ish
   b7efe:	07db      	lsls	r3, r3, #31
   b7f00:	d40c      	bmi.n	b7f1c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7f02:	4620      	mov	r0, r4
   b7f04:	f7fc f8cd 	bl	b40a2 <__cxa_guard_acquire>
   b7f08:	b140      	cbz	r0, b7f1c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7f0a:	4806      	ldr	r0, [pc, #24]	; (b7f24 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7f0c:	f7ff ffbe 	bl	b7e8c <_ZN8particle14BleLocalDeviceC1Ev>
   b7f10:	4620      	mov	r0, r4
   b7f12:	f7fc f8cb 	bl	b40ac <__cxa_guard_release>
   b7f16:	4804      	ldr	r0, [pc, #16]	; (b7f28 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b7f18:	f003 fe90 	bl	bbc3c <atexit>
    return instance;
}
   b7f1c:	4801      	ldr	r0, [pc, #4]	; (b7f24 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7f1e:	bd10      	pop	{r4, pc}
   b7f20:	2003e650 	.word	0x2003e650
   b7f24:	2003e658 	.word	0x2003e658
   b7f28:	000b8201 	.word	0x000b8201

000b7f2c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7f2c:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b7f2e:	6803      	ldr	r3, [r0, #0]
   b7f30:	3b09      	subs	r3, #9
   b7f32:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7f34:	b08d      	sub	sp, #52	; 0x34
   b7f36:	4604      	mov	r4, r0
   b7f38:	460d      	mov	r5, r1
    switch (event->type) {
   b7f3a:	d811      	bhi.n	b7f60 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b7f3c:	f7ff ffda 	bl	b7ef4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b7f40:	88a1      	ldrh	r1, [r4, #4]
   b7f42:	6800      	ldr	r0, [r0, #0]
   b7f44:	f7ff fe39 	bl	b7bba <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b7f48:	4603      	mov	r3, r0
   b7f4a:	b958      	cbnz	r0, b7f64 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b7f4c:	2220      	movs	r2, #32
   b7f4e:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b7f52:	4a0b      	ldr	r2, [pc, #44]	; (b7f80 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b7f54:	9200      	str	r2, [sp, #0]
   b7f56:	490b      	ldr	r1, [pc, #44]	; (b7f84 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b7f58:	aa04      	add	r2, sp, #16
   b7f5a:	2032      	movs	r0, #50	; 0x32
   b7f5c:	f7ff f96c 	bl	b7238 <log_message>
}
   b7f60:	b00d      	add	sp, #52	; 0x34
   b7f62:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b7f64:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b7f66:	2a00      	cmp	r2, #0
   b7f68:	d0fa      	beq.n	b7f60 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b7f6a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7f6e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b7f72:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b7f76:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b7f78:	aa04      	add	r2, sp, #16
   b7f7a:	a903      	add	r1, sp, #12
   b7f7c:	47a0      	blx	r4
}
   b7f7e:	e7ef      	b.n	b7f60 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b7f80:	000be418 	.word	0x000be418
   b7f84:	000be3af 	.word	0x000be3af

000b7f88 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b7f88:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b7f8a:	2000      	movs	r0, #0
   b7f8c:	f7fe fee8 	bl	b6d60 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b7f90:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b7f94:	bd08      	pop	{r3, pc}
	...

000b7f98 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   b7f98:	b570      	push	{r4, r5, r6, lr}
   b7f9a:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   b7f9c:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   b7f9e:	460e      	mov	r6, r1
   b7fa0:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   b7fa2:	f7ff fb43 	bl	b762c <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   b7fa6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b7faa:	f7ff fb4a 	bl	b7642 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   b7fae:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   b7fb2:	2200      	movs	r2, #0
   b7fb4:	4621      	mov	r1, r4
   b7fb6:	4803      	ldr	r0, [pc, #12]	; (b7fc4 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   b7fb8:	f7fe feda 	bl	b6d70 <hal_ble_gap_start_scan>
   b7fbc:	2800      	cmp	r0, #0
        return foundCount_;
   b7fbe:	bfa8      	it	ge
   b7fc0:	6960      	ldrge	r0, [r4, #20]
    }
   b7fc2:	bd70      	pop	{r4, r5, r6, pc}
   b7fc4:	000b9909 	.word	0x000b9909

000b7fc8 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   b7fc8:	b510      	push	{r4, lr}
   b7fca:	4604      	mov	r4, r0
    ::free(ptr);
   b7fcc:	6940      	ldr	r0, [r0, #20]
   b7fce:	f7ff fa17 	bl	b7400 <free>
   b7fd2:	68a0      	ldr	r0, [r4, #8]
   b7fd4:	f7ff fa14 	bl	b7400 <free>
   b7fd8:	4620      	mov	r0, r4
   b7fda:	bd10      	pop	{r4, pc}

000b7fdc <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   b7fdc:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b7fde:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b7fe2:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
   b7fe6:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b7fea:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b7fee:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b7ff2:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b7ff6:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b7ffa:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b7ffe:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b8002:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b8006:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   b800a:	6202      	str	r2, [r0, #32]
   b800c:	6302      	str	r2, [r0, #48]	; 0x30
   b800e:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
   b8012:	4770      	bx	lr

000b8014 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b8014:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b8016:	69d8      	ldr	r0, [r3, #28]
}
   b8018:	2800      	cmp	r0, #0
   b801a:	bfd4      	ite	le
   b801c:	2000      	movle	r0, #0
   b801e:	2001      	movgt	r0, #1
   b8020:	4770      	bx	lr

000b8022 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8022:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8024:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8028:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b802a:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b802e:	42ae      	cmp	r6, r5
   b8030:	d004      	beq.n	b803c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b8032:	4628      	mov	r0, r5
   b8034:	f002 fb88 	bl	ba748 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b8038:	3510      	adds	r5, #16
   b803a:	e7f8      	b.n	b802e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b803c:	6820      	ldr	r0, [r4, #0]
   b803e:	f7ff f9df 	bl	b7400 <free>
}
   b8042:	4620      	mov	r0, r4
   b8044:	bd70      	pop	{r4, r5, r6, pc}

000b8046 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8046:	b510      	push	{r4, lr}
   b8048:	4604      	mov	r4, r0
    ::free(ptr);
   b804a:	6800      	ldr	r0, [r0, #0]
   b804c:	f7ff f9d8 	bl	b7400 <free>
}
   b8050:	4620      	mov	r0, r4
   b8052:	bd10      	pop	{r4, pc}

000b8054 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   b8054:	b570      	push	{r4, r5, r6, lr}
   b8056:	4604      	mov	r4, r0
    ::free(ptr);
   b8058:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b805a:	f7ff f9d1 	bl	b7400 <free>
   b805e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b8060:	f7ff f9ce 	bl	b7400 <free>
    }
    ~BleScanFilter() = default;
   b8064:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b8068:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b806c:	f7ff ffeb 	bl	b8046 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b8070:	4628      	mov	r0, r5
   b8072:	f7ff ffd6 	bl	b8022 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b8076:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b807a:	f7fc f90f 	bl	b429c <_ZNSt14_Function_baseD1Ev>
   b807e:	f104 0018 	add.w	r0, r4, #24
   b8082:	f7fc f90b 	bl	b429c <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b8086:	e9d4 5300 	ldrd	r5, r3, [r4]
   b808a:	2624      	movs	r6, #36	; 0x24
   b808c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b8090:	42ae      	cmp	r6, r5
   b8092:	d004      	beq.n	b809e <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b8094:	4628      	mov	r0, r5
   b8096:	f7ff ff97 	bl	b7fc8 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b809a:	3524      	adds	r5, #36	; 0x24
   b809c:	e7f8      	b.n	b8090 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b809e:	6820      	ldr	r0, [r4, #0]
   b80a0:	f7ff f9ae 	bl	b7400 <free>
   b80a4:	4620      	mov	r0, r4
   b80a6:	bd70      	pop	{r4, r5, r6, pc}

000b80a8 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   b80a8:	b530      	push	{r4, r5, lr}
   b80aa:	4615      	mov	r5, r2
   b80ac:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   b80ae:	460c      	mov	r4, r1
   b80b0:	b179      	cbz	r1, b80d2 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   b80b2:	b172      	cbz	r2, b80d2 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
    BleScanDelegator scanner;
   b80b4:	a801      	add	r0, sp, #4
   b80b6:	f7ff ff91 	bl	b7fdc <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   b80ba:	4621      	mov	r1, r4
   b80bc:	462a      	mov	r2, r5
   b80be:	a801      	add	r0, sp, #4
   b80c0:	f7ff ff6a 	bl	b7f98 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   b80c4:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   b80c6:	a801      	add	r0, sp, #4
   b80c8:	f7ff ffc4 	bl	b8054 <_ZN8particle16BleScanDelegatorD1Ev>
}
   b80cc:	4620      	mov	r0, r4
   b80ce:	b01f      	add	sp, #124	; 0x7c
   b80d0:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b80d2:	4c01      	ldr	r4, [pc, #4]	; (b80d8 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   b80d4:	e7fa      	b.n	b80cc <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   b80d6:	bf00      	nop
   b80d8:	fffffef2 	.word	0xfffffef2

000b80dc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b80dc:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b80de:	1e14      	subs	r4, r2, #0
   b80e0:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b80e2:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b80e4:	db02      	blt.n	b80ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b80e6:	1862      	adds	r2, r4, r1
   b80e8:	429a      	cmp	r2, r3
   b80ea:	dd00      	ble.n	b80ee <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b80ec:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b80ee:	682a      	ldr	r2, [r5, #0]
   b80f0:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b80f2:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b80f4:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b80f6:	1a52      	subs	r2, r2, r1
   b80f8:	f003 fdcb 	bl	bbc92 <memmove>
    size_ -= n;
   b80fc:	686a      	ldr	r2, [r5, #4]
   b80fe:	1b12      	subs	r2, r2, r4
   b8100:	606a      	str	r2, [r5, #4]
}
   b8102:	bd38      	pop	{r3, r4, r5, pc}

000b8104 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b8104:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8106:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b8108:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b810a:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b810c:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b810e:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8110:	f7fb ffc1 	bl	b4096 <_Znwj>
   b8114:	b118      	cbz	r0, b811e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b8116:	682b      	ldr	r3, [r5, #0]
   b8118:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b811a:	686b      	ldr	r3, [r5, #4]
   b811c:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b811e:	4b03      	ldr	r3, [pc, #12]	; (b812c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b8120:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8122:	4b03      	ldr	r3, [pc, #12]	; (b8130 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8124:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8126:	60a3      	str	r3, [r4, #8]
      }
   b8128:	4620      	mov	r0, r4
   b812a:	bd38      	pop	{r3, r4, r5, pc}
   b812c:	000b75d5 	.word	0x000b75d5
   b8130:	000b75ed 	.word	0x000b75ed

000b8134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b8134:	680b      	ldr	r3, [r1, #0]
   b8136:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b8138:	b113      	cbz	r3, b8140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b813a:	685a      	ldr	r2, [r3, #4]
   b813c:	3201      	adds	r2, #1
   b813e:	605a      	str	r2, [r3, #4]
      }
   b8140:	4770      	bx	lr

000b8142 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b8142:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8144:	f851 3b04 	ldr.w	r3, [r1], #4
   b8148:	4604      	mov	r4, r0
   b814a:	f840 3b04 	str.w	r3, [r0], #4
   b814e:	f7ff fff1 	bl	b8134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b8152:	6823      	ldr	r3, [r4, #0]
   b8154:	b90b      	cbnz	r3, b815a <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b8156:	f7ff fa33 	bl	b75c0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b815a:	4620      	mov	r0, r4
   b815c:	bd10      	pop	{r4, pc}

000b815e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b815e:	b510      	push	{r4, lr}
   b8160:	f851 3b04 	ldr.w	r3, [r1], #4
   b8164:	4604      	mov	r4, r0
   b8166:	f840 3b04 	str.w	r3, [r0], #4
   b816a:	f7ff ffe3 	bl	b8134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b816e:	4620      	mov	r0, r4
   b8170:	bd10      	pop	{r4, pc}

000b8172 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b8172:	b510      	push	{r4, lr}
   b8174:	f851 3b04 	ldr.w	r3, [r1], #4
   b8178:	4604      	mov	r4, r0
   b817a:	f840 3b04 	str.w	r3, [r0], #4
   b817e:	f7ff ffd9 	bl	b8134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b8182:	4620      	mov	r0, r4
   b8184:	bd10      	pop	{r4, pc}

000b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b8186:	b510      	push	{r4, lr}
   b8188:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b818a:	6800      	ldr	r0, [r0, #0]
   b818c:	b108      	cbz	r0, b8192 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b818e:	f7fc f8c3 	bl	b4318 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b8192:	4620      	mov	r0, r4
   b8194:	bd10      	pop	{r4, pc}

000b8196 <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   b8196:	b510      	push	{r4, lr}
   b8198:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b819a:	3004      	adds	r0, #4
   b819c:	f7ff fff3 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b81a0:	4620      	mov	r0, r4
   b81a2:	bd10      	pop	{r4, pc}

000b81a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b81a4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b81a6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b81aa:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b81ac:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b81b0:	42ae      	cmp	r6, r5
   b81b2:	d004      	beq.n	b81be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b81b4:	1d28      	adds	r0, r5, #4
   b81b6:	f7ff ffe6 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b81ba:	3508      	adds	r5, #8
   b81bc:	e7f8      	b.n	b81b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b81be:	6820      	ldr	r0, [r4, #0]
   b81c0:	f7ff f91e 	bl	b7400 <free>
}
   b81c4:	4620      	mov	r0, r4
   b81c6:	bd70      	pop	{r4, r5, r6, pc}

000b81c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b81c8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b81ca:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b81ce:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b81d0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b81d4:	42ae      	cmp	r6, r5
   b81d6:	d004      	beq.n	b81e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b81d8:	1d28      	adds	r0, r5, #4
   b81da:	f7ff ffd4 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b81de:	3508      	adds	r5, #8
   b81e0:	e7f8      	b.n	b81d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b81e2:	6820      	ldr	r0, [r4, #0]
   b81e4:	f7ff f90c 	bl	b7400 <free>
}
   b81e8:	4620      	mov	r0, r4
   b81ea:	bd70      	pop	{r4, r5, r6, pc}

000b81ec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b81ec:	b510      	push	{r4, lr}
   b81ee:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b81f0:	3024      	adds	r0, #36	; 0x24
   b81f2:	f7ff ffe9 	bl	b81c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b81f6:	f104 0018 	add.w	r0, r4, #24
   b81fa:	f7ff ffd3 	bl	b81a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b81fe:	bd10      	pop	{r4, pc}

000b8200 <__tcf_0>:
    static BleLocalDevice instance;
   b8200:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b8202:	4b17      	ldr	r3, [pc, #92]	; (b8260 <__tcf_0+0x60>)
   b8204:	681c      	ldr	r4, [r3, #0]
   b8206:	b354      	cbz	r4, b825e <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b8208:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b820c:	f7fc f846 	bl	b429c <_ZNSt14_Function_baseD1Ev>
   b8210:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8214:	f7fc f842 	bl	b429c <_ZNSt14_Function_baseD1Ev>
   b8218:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b821c:	f7fc f83e 	bl	b429c <_ZNSt14_Function_baseD1Ev>
   b8220:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8224:	f7fc f83a 	bl	b429c <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b8228:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b822c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8230:	42ae      	cmp	r6, r5
   b8232:	d004      	beq.n	b823e <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b8234:	1d28      	adds	r0, r5, #4
   b8236:	f7ff ffa6 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b823a:	3508      	adds	r5, #8
   b823c:	e7f8      	b.n	b8230 <__tcf_0+0x30>
    ::free(ptr);
   b823e:	69a0      	ldr	r0, [r4, #24]
   b8240:	f7ff f8de 	bl	b7400 <free>
    ~BleLocalDeviceImpl() = default;
   b8244:	f104 000c 	add.w	r0, r4, #12
   b8248:	f7ff ffbe 	bl	b81c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b824c:	4620      	mov	r0, r4
   b824e:	f7ff ffa9 	bl	b81a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b8252:	4620      	mov	r0, r4
   b8254:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b8256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b825a:	f7fb bf20 	b.w	b409e <_ZdlPvj>
   b825e:	bd70      	pop	{r4, r5, r6, pc}
   b8260:	2003e658 	.word	0x2003e658

000b8264 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b8264:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8266:	b510      	push	{r4, lr}
      if (_M_empty())
   b8268:	b90a      	cbnz	r2, b826e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b826a:	f002 fec6 	bl	baffa <_ZSt25__throw_bad_function_callv>
    }
   b826e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8272:	68c3      	ldr	r3, [r0, #12]
   b8274:	4718      	bx	r3

000b8276 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8276:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b827a:	2300      	movs	r3, #0
   b827c:	e9c0 3300 	strd	r3, r3, [r0]
   b8280:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8282:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b8286:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8288:	4605      	mov	r5, r0
   b828a:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b828c:	dd4a      	ble.n	b8324 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   b828e:	ea4f 1008 	mov.w	r0, r8, lsl #4
   b8292:	f7ff f8ad 	bl	b73f0 <malloc>
            if (!d) {
   b8296:	4606      	mov	r6, r0
   b8298:	2800      	cmp	r0, #0
   b829a:	d043      	beq.n	b8324 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   b829c:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   b82a0:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b82a2:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   b82a6:	d916      	bls.n	b82d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   b82a8:	4550      	cmp	r0, sl
   b82aa:	d215      	bcs.n	b82d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   b82ac:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   b82b0:	f1a4 0910 	sub.w	r9, r4, #16
   b82b4:	ebaa 0404 	sub.w	r4, sl, r4
   b82b8:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b82ba:	45d1      	cmp	r9, sl
   b82bc:	d01d      	beq.n	b82fa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   b82be:	b11c      	cbz	r4, b82c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   b82c0:	4651      	mov	r1, sl
   b82c2:	4620      	mov	r0, r4
   b82c4:	f002 fabc 	bl	ba840 <_ZN6StringC1EOS_>
                end->~T();
   b82c8:	4650      	mov	r0, sl
   b82ca:	f002 fa3d 	bl	ba748 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b82ce:	f1aa 0a10 	sub.w	sl, sl, #16
   b82d2:	3c10      	subs	r4, #16
   b82d4:	e7f1      	b.n	b82ba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   b82d6:	d010      	beq.n	b82fa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   b82d8:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   b82da:	45a2      	cmp	sl, r4
   b82dc:	d00d      	beq.n	b82fa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   b82de:	f1b9 0f00 	cmp.w	r9, #0
   b82e2:	d003      	beq.n	b82ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   b82e4:	4621      	mov	r1, r4
   b82e6:	4648      	mov	r0, r9
   b82e8:	f002 faaa 	bl	ba840 <_ZN6StringC1EOS_>
                p->~T();
   b82ec:	4620      	mov	r0, r4
   b82ee:	f002 fa2b 	bl	ba748 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b82f2:	3410      	adds	r4, #16
   b82f4:	f109 0910 	add.w	r9, r9, #16
   b82f8:	e7ef      	b.n	b82da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   b82fa:	6828      	ldr	r0, [r5, #0]
   b82fc:	f7ff f880 	bl	b7400 <free>
        capacity_ = n;
   b8300:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   b8304:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8306:	e9d7 4300 	ldrd	r4, r3, [r7]
   b830a:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   b830e:	45a0      	cmp	r8, r4
   b8310:	d006      	beq.n	b8320 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   b8312:	4621      	mov	r1, r4
   b8314:	4630      	mov	r0, r6
   b8316:	f002 faad 	bl	ba874 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   b831a:	3410      	adds	r4, #16
   b831c:	3610      	adds	r6, #16
   b831e:	e7f6      	b.n	b830e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   b8320:	687b      	ldr	r3, [r7, #4]
   b8322:	606b      	str	r3, [r5, #4]
}
   b8324:	4628      	mov	r0, r5
   b8326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b832a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   b832a:	b530      	push	{r4, r5, lr}
   b832c:	b08d      	sub	sp, #52	; 0x34
   b832e:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   b8330:	f100 0138 	add.w	r1, r0, #56	; 0x38
   b8334:	a801      	add	r0, sp, #4
   b8336:	f7ff ff9e 	bl	b8276 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   b833a:	9b02      	ldr	r3, [sp, #8]
   b833c:	2b00      	cmp	r3, #0
   b833e:	dd2f      	ble.n	b83a0 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   b8340:	f104 0114 	add.w	r1, r4, #20
   b8344:	a804      	add	r0, sp, #16
   b8346:	f7ff fbd3 	bl	b7af0 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   b834a:	f104 0108 	add.w	r1, r4, #8
   b834e:	a808      	add	r0, sp, #32
   b8350:	f7ff fbce 	bl	b7af0 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   b8354:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b8356:	9b06      	ldr	r3, [sp, #24]
   b8358:	4313      	orrs	r3, r2
   b835a:	d01f      	beq.n	b839c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   b835c:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   b8360:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   b8364:	42ac      	cmp	r4, r5
   b8366:	d019      	beq.n	b839c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b8368:	a904      	add	r1, sp, #16
   b836a:	4620      	mov	r0, r4
   b836c:	f002 fad8 	bl	ba920 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b8370:	b160      	cbz	r0, b838c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   b8372:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   b8374:	a808      	add	r0, sp, #32
   b8376:	f002 f9e7 	bl	ba748 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   b837a:	a804      	add	r0, sp, #16
   b837c:	f002 f9e4 	bl	ba748 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   b8380:	a801      	add	r0, sp, #4
   b8382:	f7ff fe4e 	bl	b8022 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   b8386:	4620      	mov	r0, r4
   b8388:	b00d      	add	sp, #52	; 0x34
   b838a:	bd30      	pop	{r4, r5, pc}
   b838c:	4620      	mov	r0, r4
   b838e:	a908      	add	r1, sp, #32
   b8390:	f002 fac6 	bl	ba920 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b8394:	3410      	adds	r4, #16
   b8396:	2800      	cmp	r0, #0
   b8398:	d0e4      	beq.n	b8364 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   b839a:	e7ea      	b.n	b8372 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   b839c:	2400      	movs	r4, #0
   b839e:	e7e9      	b.n	b8374 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   b83a0:	2401      	movs	r4, #1
   b83a2:	e7ed      	b.n	b8380 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000b83a4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b83a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   b83a6:	2300      	movs	r3, #0
   b83a8:	e9c0 3300 	strd	r3, r3, [r0]
   b83ac:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b83ae:	684f      	ldr	r7, [r1, #4]
   b83b0:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b83b2:	4605      	mov	r5, r0
   b83b4:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b83b6:	dd3e      	ble.n	b8436 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   b83b8:	00f8      	lsls	r0, r7, #3
   b83ba:	f7ff f819 	bl	b73f0 <malloc>
            if (!d) {
   b83be:	4604      	mov	r4, r0
   b83c0:	b3c8      	cbz	r0, b8436 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   b83c2:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   b83c6:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b83c8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   b83cc:	d910      	bls.n	b83f0 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b83ce:	429c      	cmp	r4, r3
   b83d0:	d20f      	bcs.n	b83f2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   b83d2:	3b08      	subs	r3, #8
            dest += end - p - 1;
   b83d4:	1a1a      	subs	r2, r3, r0
   b83d6:	f1a0 0c08 	sub.w	ip, r0, #8
   b83da:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   b83dc:	459c      	cmp	ip, r3
   b83de:	d018      	beq.n	b8412 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   b83e0:	b11a      	cbz	r2, b83ea <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   b83e2:	6819      	ldr	r1, [r3, #0]
   b83e4:	6011      	str	r1, [r2, #0]
   b83e6:	6859      	ldr	r1, [r3, #4]
   b83e8:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   b83ea:	3b08      	subs	r3, #8
   b83ec:	3a08      	subs	r2, #8
   b83ee:	e7f5      	b.n	b83dc <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   b83f0:	d00f      	beq.n	b8412 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   b83f2:	4601      	mov	r1, r0
   b83f4:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   b83f6:	428b      	cmp	r3, r1
   b83f8:	d00b      	beq.n	b8412 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   b83fa:	b13a      	cbz	r2, b840c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   b83fc:	f8d1 c000 	ldr.w	ip, [r1]
   b8400:	f8c2 c000 	str.w	ip, [r2]
   b8404:	f8d1 c004 	ldr.w	ip, [r1, #4]
   b8408:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   b840c:	3108      	adds	r1, #8
   b840e:	3208      	adds	r2, #8
   b8410:	e7f1      	b.n	b83f6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   b8412:	f7fe fff5 	bl	b7400 <free>
        data_ = d;
   b8416:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8418:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b841a:	e9d6 3100 	ldrd	r3, r1, [r6]
   b841e:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   b8422:	4298      	cmp	r0, r3
   b8424:	d006      	beq.n	b8434 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   b8426:	681a      	ldr	r2, [r3, #0]
   b8428:	6022      	str	r2, [r4, #0]
   b842a:	685a      	ldr	r2, [r3, #4]
   b842c:	6062      	str	r2, [r4, #4]
   b842e:	3308      	adds	r3, #8
   b8430:	3408      	adds	r4, #8
   b8432:	e7f6      	b.n	b8422 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   b8434:	6069      	str	r1, [r5, #4]
}
   b8436:	4628      	mov	r0, r5
   b8438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b843a <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b843a:	b570      	push	{r4, r5, r6, lr}
   b843c:	4604      	mov	r4, r0
        capacity_(0) {
   b843e:	2000      	movs	r0, #0
   b8440:	e9c4 0000 	strd	r0, r0, [r4]
   b8444:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8446:	684e      	ldr	r6, [r1, #4]
   b8448:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b844a:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b844c:	dd12      	ble.n	b8474 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   b844e:	0071      	lsls	r1, r6, #1
   b8450:	f7fe ffde 	bl	b7410 <realloc>
            if (!d) {
   b8454:	b170      	cbz	r0, b8474 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   b8456:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8458:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b845a:	e9d5 3200 	ldrd	r3, r2, [r5]
   b845e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   b8462:	429a      	cmp	r2, r3
   b8464:	d004      	beq.n	b8470 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   b8466:	f833 1b02 	ldrh.w	r1, [r3], #2
   b846a:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   b846e:	e7f8      	b.n	b8462 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   b8470:	686b      	ldr	r3, [r5, #4]
   b8472:	6063      	str	r3, [r4, #4]
}
   b8474:	4620      	mov	r0, r4
   b8476:	bd70      	pop	{r4, r5, r6, pc}

000b8478 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   b8478:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b847a:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b847c:	4604      	mov	r4, r0
        if (!dismissed_) {
   b847e:	b923      	cbnz	r3, b848a <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   b8480:	6803      	ldr	r3, [r0, #0]
   b8482:	6818      	ldr	r0, [r3, #0]
   b8484:	b108      	cbz	r0, b848a <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   b8486:	f7fe ffbb 	bl	b7400 <free>
            func_();
        }
    }
   b848a:	4620      	mov	r0, r4
   b848c:	bd10      	pop	{r4, pc}

000b848e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   b848e:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b8490:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b8492:	4604      	mov	r4, r0
        if (!dismissed_) {
   b8494:	b923      	cbnz	r3, b84a0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   b8496:	6803      	ldr	r3, [r0, #0]
   b8498:	6818      	ldr	r0, [r3, #0]
   b849a:	b108      	cbz	r0, b84a0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   b849c:	f7fe ffb0 	bl	b7400 <free>
    }
   b84a0:	4620      	mov	r0, r4
   b84a2:	bd10      	pop	{r4, pc}

000b84a4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   b84a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   b84a8:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   b84ac:	b08f      	sub	sp, #60	; 0x3c
   b84ae:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   b84b0:	f1b8 0f00 	cmp.w	r8, #0
   b84b4:	d072      	beq.n	b859c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   b84b6:	6f05      	ldr	r5, [r0, #112]	; 0x70
   b84b8:	2d00      	cmp	r5, #0
   b84ba:	d06f      	beq.n	b859c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   b84bc:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b84c0:	231f      	movs	r3, #31
   b84c2:	2200      	movs	r2, #0
   b84c4:	21ff      	movs	r1, #255	; 0xff
   b84c6:	4648      	mov	r0, r9
   b84c8:	f7ff fadf 	bl	b7a8a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   b84cc:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b84ce:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b84d0:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b84d2:	2200      	movs	r2, #0
   b84d4:	4619      	mov	r1, r3
   b84d6:	4638      	mov	r0, r7
   b84d8:	f7ff fad7 	bl	b7a8a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b84dc:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b84de:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b84e0:	d006      	beq.n	b84f0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   b84e2:	42ae      	cmp	r6, r5
   b84e4:	d030      	beq.n	b8548 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   b84e6:	2400      	movs	r4, #0
    }
   b84e8:	4620      	mov	r0, r4
   b84ea:	b00f      	add	sp, #60	; 0x3c
   b84ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   b84f0:	4620      	mov	r0, r4
   b84f2:	f7fe ff7d 	bl	b73f0 <malloc>
            dismissed_(false) {
   b84f6:	ab03      	add	r3, sp, #12
   b84f8:	9304      	str	r3, [sp, #16]
   b84fa:	2300      	movs	r3, #0
   b84fc:	4604      	mov	r4, r0
   b84fe:	9003      	str	r0, [sp, #12]
   b8500:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   b8504:	b970      	cbnz	r0, b8524 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   b8506:	2320      	movs	r3, #32
   b8508:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b850c:	4b24      	ldr	r3, [pc, #144]	; (b85a0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b850e:	9300      	str	r3, [sp, #0]
   b8510:	4924      	ldr	r1, [pc, #144]	; (b85a4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b8512:	4603      	mov	r3, r0
   b8514:	aa06      	add	r2, sp, #24
   b8516:	2032      	movs	r0, #50	; 0x32
   b8518:	f7fe fe8e 	bl	b7238 <log_message>
                    return false;
   b851c:	a804      	add	r0, sp, #16
   b851e:	f7ff ffab 	bl	b8478 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   b8522:	e7e1      	b.n	b84e8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   b8524:	4602      	mov	r2, r0
   b8526:	21ff      	movs	r1, #255	; 0xff
   b8528:	462b      	mov	r3, r5
   b852a:	4648      	mov	r0, r9
   b852c:	f7ff faad 	bl	b7a8a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   b8530:	9803      	ldr	r0, [sp, #12]
   b8532:	462a      	mov	r2, r5
   b8534:	4641      	mov	r1, r8
   b8536:	f003 fb8e 	bl	bbc56 <memcmp>
   b853a:	b118      	cbz	r0, b8544 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   b853c:	a804      	add	r0, sp, #16
   b853e:	f7ff ff9b 	bl	b8478 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   b8542:	e7ce      	b.n	b84e2 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   b8544:	2401      	movs	r4, #1
   b8546:	e7e9      	b.n	b851c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   b8548:	4628      	mov	r0, r5
   b854a:	f7fe ff51 	bl	b73f0 <malloc>
   b854e:	2400      	movs	r4, #0
   b8550:	ab03      	add	r3, sp, #12
   b8552:	4606      	mov	r6, r0
   b8554:	9003      	str	r0, [sp, #12]
   b8556:	9304      	str	r3, [sp, #16]
   b8558:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   b855c:	b978      	cbnz	r0, b857e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   b855e:	2320      	movs	r3, #32
   b8560:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b8564:	4b0e      	ldr	r3, [pc, #56]	; (b85a0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b8566:	9300      	str	r3, [sp, #0]
   b8568:	490e      	ldr	r1, [pc, #56]	; (b85a4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b856a:	4603      	mov	r3, r0
   b856c:	aa06      	add	r2, sp, #24
   b856e:	2032      	movs	r0, #50	; 0x32
   b8570:	f7fe fe62 	bl	b7238 <log_message>
                    return false;
   b8574:	4634      	mov	r4, r6
   b8576:	a804      	add	r0, sp, #16
   b8578:	f7ff ff89 	bl	b848e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   b857c:	e7b4      	b.n	b84e8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   b857e:	4602      	mov	r2, r0
   b8580:	21ff      	movs	r1, #255	; 0xff
   b8582:	462b      	mov	r3, r5
   b8584:	4638      	mov	r0, r7
   b8586:	f7ff fa80 	bl	b7a8a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   b858a:	9803      	ldr	r0, [sp, #12]
   b858c:	462a      	mov	r2, r5
   b858e:	4641      	mov	r1, r8
   b8590:	f003 fb61 	bl	bbc56 <memcmp>
   b8594:	2800      	cmp	r0, #0
   b8596:	d1ee      	bne.n	b8576 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   b8598:	2401      	movs	r4, #1
   b859a:	e7ec      	b.n	b8576 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   b859c:	2401      	movs	r4, #1
   b859e:	e7a3      	b.n	b84e8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   b85a0:	000be430 	.word	0x000be430
   b85a4:	000be3af 	.word	0x000be3af

000b85a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b85a8:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b85aa:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b85ac:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b85ae:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b85b0:	dd03      	ble.n	b85ba <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b85b2:	f7fe ff2d 	bl	b7410 <realloc>
            if (!d) {
   b85b6:	b918      	cbnz	r0, b85c0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b85b8:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b85ba:	f7fe ff21 	bl	b7400 <free>
        T* d = nullptr;
   b85be:	2000      	movs	r0, #0
        data_ = d;
   b85c0:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b85c2:	60a5      	str	r5, [r4, #8]
        return true;
   b85c4:	2001      	movs	r0, #1
   b85c6:	e7f7      	b.n	b85b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b85c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b85c8:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b85ca:	6883      	ldr	r3, [r0, #8]
   b85cc:	428b      	cmp	r3, r1
   b85ce:	da02      	bge.n	b85d6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b85d0:	f7ff ffea 	bl	b85a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b85d4:	bd08      	pop	{r3, pc}
    return true;
   b85d6:	2001      	movs	r0, #1
   b85d8:	e7fc      	b.n	b85d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b85da <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b85da:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b85dc:	2300      	movs	r3, #0
   b85de:	e9c0 3300 	strd	r3, r3, [r0]
   b85e2:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b85e4:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b85e6:	6849      	ldr	r1, [r1, #4]
   b85e8:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b85ea:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b85ec:	dd10      	ble.n	b8610 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   b85ee:	f7ff ffdb 	bl	b85a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b85f2:	b168      	cbz	r0, b8610 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b85f4:	e9d5 3100 	ldrd	r3, r1, [r5]
   b85f8:	6822      	ldr	r2, [r4, #0]
   b85fa:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   b85fc:	4299      	cmp	r1, r3
   b85fe:	d005      	beq.n	b860c <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   b8600:	b10a      	cbz	r2, b8606 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   b8602:	7818      	ldrb	r0, [r3, #0]
   b8604:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   b8606:	3301      	adds	r3, #1
   b8608:	3201      	adds	r2, #1
   b860a:	e7f7      	b.n	b85fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   b860c:	686b      	ldr	r3, [r5, #4]
   b860e:	6063      	str	r3, [r4, #4]
}
   b8610:	4620      	mov	r0, r4
   b8612:	bd38      	pop	{r3, r4, r5, pc}

000b8614 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   b8614:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   b8616:	680b      	ldr	r3, [r1, #0]
   b8618:	6003      	str	r3, [r0, #0]
   b861a:	684b      	ldr	r3, [r1, #4]
   b861c:	6043      	str	r3, [r0, #4]
   b861e:	4604      	mov	r4, r0
   b8620:	460d      	mov	r5, r1
class BleAdvertisingData {
   b8622:	3008      	adds	r0, #8
   b8624:	3108      	adds	r1, #8
   b8626:	f7ff ffd8 	bl	b85da <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b862a:	f105 0114 	add.w	r1, r5, #20
   b862e:	f104 0014 	add.w	r0, r4, #20
   b8632:	f7ff ffd2 	bl	b85da <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b8636:	f895 3020 	ldrb.w	r3, [r5, #32]
   b863a:	f884 3020 	strb.w	r3, [r4, #32]
   b863e:	4620      	mov	r0, r4
   b8640:	bd38      	pop	{r3, r4, r5, pc}

000b8642 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   b8642:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8644:	4604      	mov	r4, r0
   b8646:	a801      	add	r0, sp, #4
   b8648:	f7ff ffc7 	bl	b85da <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
      __a = _GLIBCXX_MOVE(__b);
   b864c:	9b01      	ldr	r3, [sp, #4]
   b864e:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8650:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b8652:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8654:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8656:	6062      	str	r2, [r4, #4]
   b8658:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b865a:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b865c:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b865e:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8660:	9001      	str	r0, [sp, #4]
   b8662:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   b8664:	f7fe fecc 	bl	b7400 <free>
   b8668:	b004      	add	sp, #16
   b866a:	bd10      	pop	{r4, pc}

000b866c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b866c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8670:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8672:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8674:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8676:	4419      	add	r1, r3
   b8678:	6883      	ldr	r3, [r0, #8]
   b867a:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b867c:	4604      	mov	r4, r0
   b867e:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8680:	dc12      	bgt.n	b86a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b8682:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8684:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8686:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8688:	1bd2      	subs	r2, r2, r7
   b868a:	4631      	mov	r1, r6
   b868c:	1970      	adds	r0, r6, r5
   b868e:	f003 fb00 	bl	bbc92 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b8692:	462a      	mov	r2, r5
   b8694:	4641      	mov	r1, r8
   b8696:	4630      	mov	r0, r6
   b8698:	f003 faed 	bl	bbc76 <memcpy>
    size_ += n;
   b869c:	6863      	ldr	r3, [r4, #4]
   b869e:	442b      	add	r3, r5
   b86a0:	6063      	str	r3, [r4, #4]
    return true;
   b86a2:	2001      	movs	r0, #1
}
   b86a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b86a8:	f7ff ff7e 	bl	b85a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b86ac:	2800      	cmp	r0, #0
   b86ae:	d1e8      	bne.n	b8682 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b86b0:	e7f8      	b.n	b86a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b86b2 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b86b2:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   b86b4:	460a      	mov	r2, r1
   b86b6:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b86b8:	b510      	push	{r4, lr}
   b86ba:	4604      	mov	r4, r0
    size_ = 0;
   b86bc:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   b86be:	b102      	cbz	r2, b86c2 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   b86c0:	b90b      	cbnz	r3, b86c6 <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   b86c2:	2000      	movs	r0, #0
}
   b86c4:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   b86c6:	2bff      	cmp	r3, #255	; 0xff
   b86c8:	bf28      	it	cs
   b86ca:	23ff      	movcs	r3, #255	; 0xff
   b86cc:	f7ff ffce 	bl	b866c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   b86d0:	2800      	cmp	r0, #0
   b86d2:	d0f7      	beq.n	b86c4 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   b86d4:	6860      	ldr	r0, [r4, #4]
   b86d6:	e7f5      	b.n	b86c4 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000b86d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b86d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b86da:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b86dc:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b86e0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b86e2:	4604      	mov	r4, r0
   b86e4:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b86e6:	da0b      	bge.n	b8700 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b86e8:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b86ea:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b86ec:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b86ee:	1b52      	subs	r2, r2, r5
   b86f0:	1c48      	adds	r0, r1, #1
   b86f2:	f003 face 	bl	bbc92 <memmove>
    new(p) T(std::move(value));
   b86f6:	557e      	strb	r6, [r7, r5]
    ++size_;
   b86f8:	6863      	ldr	r3, [r4, #4]
   b86fa:	3301      	adds	r3, #1
   b86fc:	6063      	str	r3, [r4, #4]
}
   b86fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8700:	3101      	adds	r1, #1
   b8702:	f7ff ff51 	bl	b85a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8706:	2800      	cmp	r0, #0
   b8708:	d1ee      	bne.n	b86e8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b870a:	e7f8      	b.n	b86fe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b870c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b870c:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b870e:	6841      	ldr	r1, [r0, #4]
   b8710:	f7ff bfe2 	b.w	b86d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b8714 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8714:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8718:	4604      	mov	r4, r0
   b871a:	461d      	mov	r5, r3
   b871c:	460f      	mov	r7, r1
   b871e:	ab01      	add	r3, sp, #4
   b8720:	4690      	mov	r8, r2
   b8722:	460a      	mov	r2, r1
   b8724:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8728:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b872c:	f7fe ff32 	bl	b7594 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b8730:	1cae      	adds	r6, r5, #2
   b8732:	6863      	ldr	r3, [r4, #4]
   b8734:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b8736:	f1b9 0f00 	cmp.w	r9, #0
   b873a:	d126      	bne.n	b878a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b873c:	b328      	cbz	r0, b878a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b873e:	4433      	add	r3, r6
   b8740:	1a1b      	subs	r3, r3, r0
   b8742:	2bff      	cmp	r3, #255	; 0xff
   b8744:	d809      	bhi.n	b875a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b8746:	9901      	ldr	r1, [sp, #4]
   b8748:	4620      	mov	r0, r4
   b874a:	f7ff fcc7 	bl	b80dc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b874e:	6861      	ldr	r1, [r4, #4]
   b8750:	4620      	mov	r0, r4
   b8752:	4431      	add	r1, r6
   b8754:	f7ff ff38 	bl	b85c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8758:	b918      	cbnz	r0, b8762 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b875a:	6860      	ldr	r0, [r4, #4]
}
   b875c:	b003      	add	sp, #12
   b875e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b8762:	1c6a      	adds	r2, r5, #1
   b8764:	9901      	ldr	r1, [sp, #4]
   b8766:	b2d2      	uxtb	r2, r2
   b8768:	4620      	mov	r0, r4
   b876a:	f7ff ffb5 	bl	b86d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b876e:	9901      	ldr	r1, [sp, #4]
   b8770:	463a      	mov	r2, r7
   b8772:	3101      	adds	r1, #1
   b8774:	4620      	mov	r0, r4
   b8776:	f7ff ffaf 	bl	b86d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b877a:	9901      	ldr	r1, [sp, #4]
   b877c:	462b      	mov	r3, r5
   b877e:	4642      	mov	r2, r8
   b8780:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b8782:	4620      	mov	r0, r4
   b8784:	f7ff ff72 	bl	b866c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b8788:	e7e7      	b.n	b875a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b878a:	18f1      	adds	r1, r6, r3
   b878c:	29ff      	cmp	r1, #255	; 0xff
   b878e:	d8e4      	bhi.n	b875a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8790:	4620      	mov	r0, r4
   b8792:	f7ff ff19 	bl	b85c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8796:	2800      	cmp	r0, #0
   b8798:	d0df      	beq.n	b875a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b879a:	1c69      	adds	r1, r5, #1
   b879c:	b2c9      	uxtb	r1, r1
   b879e:	4620      	mov	r0, r4
   b87a0:	f7ff ffb4 	bl	b870c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b87a4:	4639      	mov	r1, r7
   b87a6:	4620      	mov	r0, r4
   b87a8:	f7ff ffb0 	bl	b870c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b87ac:	6861      	ldr	r1, [r4, #4]
   b87ae:	462b      	mov	r3, r5
   b87b0:	4642      	mov	r2, r8
   b87b2:	e7e6      	b.n	b8782 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b87b4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b87b4:	b430      	push	{r4, r5}
   b87b6:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b87ba:	b11a      	cbz	r2, b87c4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b87bc:	9502      	str	r5, [sp, #8]
}
   b87be:	bc30      	pop	{r4, r5}
   b87c0:	f7ff bfa8 	b.w	b8714 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b87c4:	6840      	ldr	r0, [r0, #4]
}
   b87c6:	bc30      	pop	{r4, r5}
   b87c8:	4770      	bx	lr

000b87ca <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b87ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b87cc:	2300      	movs	r3, #0
   b87ce:	e9c0 3300 	strd	r3, r3, [r0]
   b87d2:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b87d4:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b87d6:	9300      	str	r3, [sp, #0]
   b87d8:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b87da:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b87de:	4619      	mov	r1, r3
   b87e0:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b87e4:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b87e6:	f7ff ffe5 	bl	b87b4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b87ea:	4620      	mov	r0, r4
   b87ec:	b004      	add	sp, #16
   b87ee:	bd10      	pop	{r4, pc}

000b87f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b87f0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b87f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b87f4:	4604      	mov	r4, r0
   b87f6:	460d      	mov	r5, r1
   b87f8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b87fa:	d914      	bls.n	b8826 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b87fc:	4290      	cmp	r0, r2
   b87fe:	d213      	bcs.n	b8828 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8800:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8804:	1a75      	subs	r5, r6, r1
   b8806:	f1a1 0708 	sub.w	r7, r1, #8
   b880a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b880c:	42b7      	cmp	r7, r6
   b880e:	d018      	beq.n	b8842 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8810:	b11c      	cbz	r4, b881a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8812:	4631      	mov	r1, r6
   b8814:	4620      	mov	r0, r4
   b8816:	f7ff fcac 	bl	b8172 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b881a:	1d30      	adds	r0, r6, #4
   b881c:	f7ff fcb3 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8820:	3e08      	subs	r6, #8
   b8822:	3c08      	subs	r4, #8
   b8824:	e7f2      	b.n	b880c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8826:	d00c      	beq.n	b8842 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8828:	42b5      	cmp	r5, r6
   b882a:	d00a      	beq.n	b8842 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b882c:	b11c      	cbz	r4, b8836 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b882e:	4629      	mov	r1, r5
   b8830:	4620      	mov	r0, r4
   b8832:	f7ff fc9e 	bl	b8172 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8836:	1d28      	adds	r0, r5, #4
   b8838:	f7ff fca5 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b883c:	3508      	adds	r5, #8
   b883e:	3408      	adds	r4, #8
   b8840:	e7f2      	b.n	b8828 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8844 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8846:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8848:	6846      	ldr	r6, [r0, #4]
   b884a:	4668      	mov	r0, sp
   b884c:	f7ff fc91 	bl	b8172 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8850:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b8854:	429f      	cmp	r7, r3
   b8856:	db12      	blt.n	b887e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b8858:	3701      	adds	r7, #1
        if (n > 0) {
   b885a:	2f00      	cmp	r7, #0
   b885c:	dd29      	ble.n	b88b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b885e:	00f8      	lsls	r0, r7, #3
   b8860:	f7fe fdc6 	bl	b73f0 <malloc>
            if (!d) {
   b8864:	4605      	mov	r5, r0
   b8866:	b1f0      	cbz	r0, b88a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b8868:	e9d4 1200 	ldrd	r1, r2, [r4]
   b886c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8870:	f7ff ffbe 	bl	b87f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8874:	6820      	ldr	r0, [r4, #0]
   b8876:	f7fe fdc3 	bl	b7400 <free>
        data_ = d;
   b887a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b887c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b887e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8880:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8882:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b8886:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b888a:	4631      	mov	r1, r6
   b888c:	f106 0008 	add.w	r0, r6, #8
   b8890:	f7ff ffae 	bl	b87f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8894:	b11e      	cbz	r6, b889e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b8896:	4669      	mov	r1, sp
   b8898:	4630      	mov	r0, r6
   b889a:	f7ff fc6a 	bl	b8172 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b889e:	6863      	ldr	r3, [r4, #4]
   b88a0:	3301      	adds	r3, #1
   b88a2:	6063      	str	r3, [r4, #4]
    return true;
   b88a4:	2501      	movs	r5, #1
   b88a6:	a801      	add	r0, sp, #4
   b88a8:	f7ff fc6d 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b88ac:	4628      	mov	r0, r5
   b88ae:	b003      	add	sp, #12
   b88b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b88b2:	2500      	movs	r5, #0
   b88b4:	e7de      	b.n	b8874 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b88b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b88b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b88b8:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b88bc:	4605      	mov	r5, r0
   b88be:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b88c0:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b88c4:	42a6      	cmp	r6, r4
   b88c6:	d005      	beq.n	b88d4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b88c8:	4639      	mov	r1, r7
   b88ca:	4620      	mov	r0, r4
   b88cc:	f7ff fabb 	bl	b7e46 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b88d0:	b108      	cbz	r0, b88d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b88d2:	b914      	cbnz	r4, b88da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b88d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b88d6:	3408      	adds	r4, #8
   b88d8:	e7f4      	b.n	b88c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b88da:	1d20      	adds	r0, r4, #4
   b88dc:	f7ff fc53 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b88e0:	e9d5 3200 	ldrd	r3, r2, [r5]
   b88e4:	f104 0108 	add.w	r1, r4, #8
   b88e8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b88ec:	4620      	mov	r0, r4
   b88ee:	f7ff ff7f 	bl	b87f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b88f2:	686b      	ldr	r3, [r5, #4]
   b88f4:	3b01      	subs	r3, #1
   b88f6:	606b      	str	r3, [r5, #4]
    return true;
   b88f8:	e7ec      	b.n	b88d4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b88fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b88fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8900:	4605      	mov	r5, r0
   b8902:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b8904:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8906:	460c      	mov	r4, r1
        WiringBleLock lk;
   b8908:	f7fe ff12 	bl	b7730 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b890c:	682e      	ldr	r6, [r5, #0]
   b890e:	1ef3      	subs	r3, r6, #3
   b8910:	2b0d      	cmp	r3, #13
   b8912:	d83c      	bhi.n	b898e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8914:	e8df f013 	tbh	[pc, r3, lsl #1]
   b8918:	0053000e 	.word	0x0053000e
   b891c:	00d1003b 	.word	0x00d1003b
   b8920:	003b003b 	.word	0x003b003b
   b8924:	003b003b 	.word	0x003b003b
   b8928:	009b003b 	.word	0x009b003b
   b892c:	009b009b 	.word	0x009b009b
   b8930:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b8934:	a804      	add	r0, sp, #16
   b8936:	f7ff fa2d 	bl	b7d94 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b893a:	9b04      	ldr	r3, [sp, #16]
   b893c:	89aa      	ldrh	r2, [r5, #12]
   b893e:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b8940:	6869      	ldr	r1, [r5, #4]
   b8942:	9804      	ldr	r0, [sp, #16]
   b8944:	3108      	adds	r1, #8
   b8946:	3002      	adds	r0, #2
   b8948:	f7fe ff0c 	bl	b7764 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b894c:	a904      	add	r1, sp, #16
   b894e:	a806      	add	r0, sp, #24
   b8950:	f7ff fc0f 	bl	b8172 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b8954:	a906      	add	r1, sp, #24
   b8956:	f104 0018 	add.w	r0, r4, #24
   b895a:	f7ff ff73 	bl	b8844 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b895e:	4605      	mov	r5, r0
   b8960:	a807      	add	r0, sp, #28
   b8962:	f7ff fc10 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8966:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b8968:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b896a:	b9b5      	cbnz	r5, b899a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b896c:	4b5d      	ldr	r3, [pc, #372]	; (b8ae4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b896e:	495e      	ldr	r1, [pc, #376]	; (b8ae8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8970:	9300      	str	r3, [sp, #0]
   b8972:	2032      	movs	r0, #50	; 0x32
   b8974:	462b      	mov	r3, r5
   b8976:	aa06      	add	r2, sp, #24
   b8978:	9507      	str	r5, [sp, #28]
   b897a:	f7fe fc5d 	bl	b7238 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b897e:	9b04      	ldr	r3, [sp, #16]
   b8980:	4629      	mov	r1, r5
   b8982:	8818      	ldrh	r0, [r3, #0]
   b8984:	f7fe fa06 	bl	b6d94 <hal_ble_gap_disconnect>
   b8988:	a805      	add	r0, sp, #20
   b898a:	f7ff fbfc 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b898e:	a803      	add	r0, sp, #12
   b8990:	f7fe fedc 	bl	b774c <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b8994:	b00e      	add	sp, #56	; 0x38
   b8996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b899a:	4a54      	ldr	r2, [pc, #336]	; (b8aec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b899c:	9200      	str	r2, [sp, #0]
   b899e:	2300      	movs	r3, #0
   b89a0:	4951      	ldr	r1, [pc, #324]	; (b8ae8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b89a2:	9307      	str	r3, [sp, #28]
   b89a4:	aa06      	add	r2, sp, #24
   b89a6:	2001      	movs	r0, #1
   b89a8:	f7fe fc46 	bl	b7238 <log_message>
                if (impl->connectedCallback_) {
   b89ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b89ae:	2b00      	cmp	r3, #0
   b89b0:	d0ea      	beq.n	b8988 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b89b2:	a904      	add	r1, sp, #16
   b89b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b89b8:	f7ff fc54 	bl	b8264 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b89bc:	e7e4      	b.n	b8988 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b89be:	89a9      	ldrh	r1, [r5, #12]
   b89c0:	4620      	mov	r0, r4
   b89c2:	f7ff f8fa 	bl	b7bba <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b89c6:	4606      	mov	r6, r0
   b89c8:	2800      	cmp	r0, #0
   b89ca:	d0e0      	beq.n	b898e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b89cc:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b89ce:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b89d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b89d6:	8029      	strh	r1, [r5, #0]
   b89d8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b89dc:	429a      	cmp	r2, r3
   b89de:	d003      	beq.n	b89e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b89e0:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b89e4:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b89e6:	e7f9      	b.n	b89dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b89e8:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b89ec:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b89f0:	45b8      	cmp	r8, r7
   b89f2:	d004      	beq.n	b89fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b89f4:	1d38      	adds	r0, r7, #4
   b89f6:	f7ff fbc6 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b89fa:	3708      	adds	r7, #8
   b89fc:	e7f8      	b.n	b89f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b89fe:	2300      	movs	r3, #0
   b8a00:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b8a02:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b8a06:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b8a0a:	45b8      	cmp	r8, r7
   b8a0c:	d004      	beq.n	b8a18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b8a0e:	1d38      	adds	r0, r7, #4
   b8a10:	f7ff fbb9 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8a14:	3708      	adds	r7, #8
   b8a16:	e7f8      	b.n	b8a0a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b8a18:	2300      	movs	r3, #0
   b8a1a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b8a1c:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b8a1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8a20:	b123      	cbz	r3, b8a2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b8a22:	4631      	mov	r1, r6
   b8a24:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8a28:	f7ff fc1c 	bl	b8264 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b8a2c:	2300      	movs	r3, #0
   b8a2e:	2220      	movs	r2, #32
   b8a30:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b8a34:	4a2e      	ldr	r2, [pc, #184]	; (b8af0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b8a36:	9200      	str	r2, [sp, #0]
   b8a38:	492b      	ldr	r1, [pc, #172]	; (b8ae8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8a3a:	aa06      	add	r2, sp, #24
   b8a3c:	2001      	movs	r0, #1
   b8a3e:	f7fe fbfb 	bl	b7238 <log_message>
                    impl->peers_.removeOne(*peer);
   b8a42:	4631      	mov	r1, r6
   b8a44:	f104 0018 	add.w	r0, r4, #24
   b8a48:	f7ff ff35 	bl	b88b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b8a4c:	e79f      	b.n	b898e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8a4e:	89a9      	ldrh	r1, [r5, #12]
   b8a50:	4620      	mov	r0, r4
   b8a52:	f7ff f8b2 	bl	b7bba <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8a56:	2800      	cmp	r0, #0
   b8a58:	d099      	beq.n	b898e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b8a5a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b8a5c:	2b00      	cmp	r3, #0
   b8a5e:	d096      	beq.n	b898e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b8a60:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8a62:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b8a64:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8a68:	d001      	beq.n	b8a6e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b8a6a:	2e10      	cmp	r6, #16
   b8a6c:	d117      	bne.n	b8a9e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b8a6e:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b8a70:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b8a72:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b8a74:	2506      	movs	r5, #6
                        };
   b8a76:	f88d 3015 	strb.w	r3, [sp, #21]
   b8a7a:	9104      	str	r1, [sp, #16]
   b8a7c:	f88d 2014 	strb.w	r2, [sp, #20]
   b8a80:	9006      	str	r0, [sp, #24]
   b8a82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b8a86:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b8a88:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b8a8c:	9508      	str	r5, [sp, #32]
   b8a8e:	e883 0003 	stmia.w	r3, {r0, r1}
   b8a92:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b8a94:	a906      	add	r1, sp, #24
   b8a96:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8a9a:	4798      	blx	r3
   b8a9c:	e777      	b.n	b898e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b8a9e:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b8aa0:	bf01      	itttt	eq
   b8aa2:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b8aa4:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b8aa6:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b8aaa:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b8aac:	bf0f      	iteee	eq
   b8aae:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b8ab2:	461a      	movne	r2, r3
   b8ab4:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b8ab6:	461d      	movne	r5, r3
   b8ab8:	e7dd      	b.n	b8a76 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8aba:	89a9      	ldrh	r1, [r5, #12]
   b8abc:	4620      	mov	r0, r4
   b8abe:	f7ff f87c 	bl	b7bba <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b8ac2:	4601      	mov	r1, r0
   b8ac4:	2800      	cmp	r0, #0
   b8ac6:	f43f af62 	beq.w	b898e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8aca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b8acc:	2b00      	cmp	r3, #0
   b8ace:	f43f af5e 	beq.w	b898e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b8ad2:	686b      	ldr	r3, [r5, #4]
   b8ad4:	9306      	str	r3, [sp, #24]
   b8ad6:	aa06      	add	r2, sp, #24
   b8ad8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b8ada:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8ade:	4798      	blx	r3
   b8ae0:	e755      	b.n	b898e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8ae2:	bf00      	nop
   b8ae4:	000be44b 	.word	0x000be44b
   b8ae8:	000be3af 	.word	0x000be3af
   b8aec:	000be471 	.word	0x000be471
   b8af0:	000be48e 	.word	0x000be48e

000b8af4 <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   b8af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8af8:	4607      	mov	r7, r0
   b8afa:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   b8afc:	4668      	mov	r0, sp
   b8afe:	f7fe fe17 	bl	b7730 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b8b02:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   b8b04:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   b8b08:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (auto& p : impl()->peers()) {
   b8b0c:	42ac      	cmp	r4, r5
   b8b0e:	d035      	beq.n	b8b7c <_ZNK8particle14BleLocalDevice10disconnectEv+0x88>
        hal_ble_conn_info_t connInfo = {};
   b8b10:	2224      	movs	r2, #36	; 0x24
   b8b12:	2100      	movs	r1, #0
   b8b14:	a801      	add	r0, sp, #4
   b8b16:	f003 f8d6 	bl	bbcc6 <memset>
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   b8b1a:	6823      	ldr	r3, [r4, #0]
   b8b1c:	2200      	movs	r2, #0
   b8b1e:	8818      	ldrh	r0, [r3, #0]
   b8b20:	a901      	add	r1, sp, #4
   b8b22:	f7fe f987 	bl	b6e34 <hal_ble_gap_get_connection_info>
   b8b26:	4606      	mov	r6, r0
   b8b28:	b108      	cbz	r0, b8b2e <_ZNK8particle14BleLocalDevice10disconnectEv+0x3a>
    for (auto& p : impl()->peers()) {
   b8b2a:	3408      	adds	r4, #8
   b8b2c:	e7ee      	b.n	b8b0c <_ZNK8particle14BleLocalDevice10disconnectEv+0x18>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   b8b2e:	f89d 8008 	ldrb.w	r8, [sp, #8]
   b8b32:	f1b8 0f01 	cmp.w	r8, #1
   b8b36:	d1f8      	bne.n	b8b2a <_ZNK8particle14BleLocalDevice10disconnectEv+0x36>
   b8b38:	f8df 9048 	ldr.w	r9, [pc, #72]	; b8b84 <_ZNK8particle14BleLocalDevice10disconnectEv+0x90>
   b8b3c:	f8d9 0000 	ldr.w	r0, [r9]
   b8b40:	f7fe f9ea 	bl	b6f18 <os_mutex_recursive_unlock>
        locked_ = false;
   b8b44:	f88d 6000 	strb.w	r6, [sp]
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   b8b48:	6823      	ldr	r3, [r4, #0]
   b8b4a:	4631      	mov	r1, r6
   b8b4c:	8818      	ldrh	r0, [r3, #0]
   b8b4e:	f7fe f921 	bl	b6d94 <hal_ble_gap_disconnect>
   b8b52:	1e05      	subs	r5, r0, #0
   b8b54:	db0b      	blt.n	b8b6e <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
    void lock() { os_mutex_recursive_lock(handle_); }
   b8b56:	f8d9 0000 	ldr.w	r0, [r9]
   b8b5a:	f7fe f9d5 	bl	b6f08 <os_mutex_recursive_lock>
        return peers_;
   b8b5e:	6838      	ldr	r0, [r7, #0]
        locked_ = true;
   b8b60:	f88d 8000 	strb.w	r8, [sp]
            lk.lock();
            impl()->peers().removeOne(p);
   b8b64:	4621      	mov	r1, r4
   b8b66:	3018      	adds	r0, #24
   b8b68:	f7ff fea5 	bl	b88b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
            return SYSTEM_ERROR_NONE;
   b8b6c:	4635      	mov	r5, r6
    WiringBleLock lk;
   b8b6e:	4668      	mov	r0, sp
   b8b70:	f7fe fdec 	bl	b774c <_ZN8particle3ble13WiringBleLockD1Ev>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   b8b74:	4628      	mov	r0, r5
   b8b76:	b00b      	add	sp, #44	; 0x2c
   b8b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   b8b7c:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
   b8b80:	e7f5      	b.n	b8b6e <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
   b8b82:	bf00      	nop
   b8b84:	2003e654 	.word	0x2003e654

000b8b88 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8b88:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b8b8a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b8b8c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b8b8e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b8b90:	dd05      	ble.n	b8b9e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   b8b92:	2114      	movs	r1, #20
   b8b94:	4369      	muls	r1, r5
   b8b96:	f7fe fc3b 	bl	b7410 <realloc>
            if (!d) {
   b8b9a:	b918      	cbnz	r0, b8ba4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   b8b9c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b8b9e:	f7fe fc2f 	bl	b7400 <free>
        T* d = nullptr;
   b8ba2:	2000      	movs	r0, #0
        data_ = d;
   b8ba4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8ba6:	60a5      	str	r5, [r4, #8]
        return true;
   b8ba8:	2001      	movs	r0, #1
   b8baa:	e7f7      	b.n	b8b9c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000b8bac <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   b8bb0:	2400      	movs	r4, #0
   b8bb2:	e9c0 4400 	strd	r4, r4, [r0]
   b8bb6:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8bb8:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8bba:	6849      	ldr	r1, [r1, #4]
   b8bbc:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8bbe:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8bc0:	dd1a      	ble.n	b8bf8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b8bc2:	f7ff ffe1 	bl	b8b88 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8bc6:	b1b8      	cbz	r0, b8bf8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8bc8:	e9d8 9300 	ldrd	r9, r3, [r8]
   b8bcc:	f04f 0c14 	mov.w	ip, #20
   b8bd0:	f8d7 e000 	ldr.w	lr, [r7]
   b8bd4:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   b8bd8:	eb09 0504 	add.w	r5, r9, r4
   b8bdc:	45ac      	cmp	ip, r5
   b8bde:	d008      	beq.n	b8bf2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   b8be0:	eb1e 0604 	adds.w	r6, lr, r4
   b8be4:	bf1f      	itttt	ne
   b8be6:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b8be8:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b8bea:	682b      	ldrne	r3, [r5, #0]
   b8bec:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   b8bee:	3414      	adds	r4, #20
   b8bf0:	e7f2      	b.n	b8bd8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b8bf2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b8bf6:	607b      	str	r3, [r7, #4]
}
   b8bf8:	4638      	mov	r0, r7
   b8bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b8bfe <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b8bfe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   b8c02:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   b8c06:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8c08:	6883      	ldr	r3, [r0, #8]
   b8c0a:	19e9      	adds	r1, r5, r7
   b8c0c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b8c0e:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8c10:	dc17      	bgt.n	b8c42 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   b8c12:	2314      	movs	r3, #20
   b8c14:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   b8c16:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8c18:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   b8c1a:	fb03 f907 	mul.w	r9, r3, r7
   b8c1e:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b8c20:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8c22:	1b52      	subs	r2, r2, r5
   b8c24:	4631      	mov	r1, r6
   b8c26:	eb06 0009 	add.w	r0, r6, r9
   b8c2a:	f003 f832 	bl	bbc92 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b8c2e:	464a      	mov	r2, r9
   b8c30:	4641      	mov	r1, r8
   b8c32:	4630      	mov	r0, r6
   b8c34:	f003 f81f 	bl	bbc76 <memcpy>
    size_ += n;
   b8c38:	6863      	ldr	r3, [r4, #4]
   b8c3a:	443b      	add	r3, r7
   b8c3c:	6063      	str	r3, [r4, #4]
}
   b8c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8c42:	f7ff ffa1 	bl	b8b88 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8c46:	2800      	cmp	r0, #0
   b8c48:	d1e3      	bne.n	b8c12 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   b8c4a:	e7f8      	b.n	b8c3e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000b8c4c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8c4c:	b082      	sub	sp, #8
   b8c4e:	b570      	push	{r4, r5, r6, lr}
   b8c50:	460c      	mov	r4, r1
   b8c52:	a904      	add	r1, sp, #16
   b8c54:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8c58:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b8c5c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8c5e:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8c60:	da17      	bge.n	b8c92 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   b8c62:	2314      	movs	r3, #20
   b8c64:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   b8c68:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   b8c6a:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   b8c6c:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b8c6e:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8c70:	1a52      	subs	r2, r2, r1
   b8c72:	18e0      	adds	r0, r4, r3
   b8c74:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   b8c76:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8c78:	f003 f80b 	bl	bbc92 <memmove>
    new(p) T(std::move(value));
   b8c7c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b8c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8c80:	6833      	ldr	r3, [r6, #0]
   b8c82:	6023      	str	r3, [r4, #0]
    ++size_;
   b8c84:	686b      	ldr	r3, [r5, #4]
   b8c86:	3301      	adds	r3, #1
   b8c88:	606b      	str	r3, [r5, #4]
}
   b8c8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8c8e:	b002      	add	sp, #8
   b8c90:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8c92:	3101      	adds	r1, #1
   b8c94:	f7ff ff78 	bl	b8b88 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8c98:	2800      	cmp	r0, #0
   b8c9a:	d1e2      	bne.n	b8c62 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   b8c9c:	e7f5      	b.n	b8c8a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000b8c9e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b8c9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   b8ca2:	2400      	movs	r4, #0
   b8ca4:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b8ca6:	1e93      	subs	r3, r2, #2
   b8ca8:	e9c0 4400 	strd	r4, r4, [r0]
   b8cac:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b8cae:	4605      	mov	r5, r0
   b8cb0:	460f      	mov	r7, r1
   b8cb2:	4690      	mov	r8, r2
   b8cb4:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b8cb6:	9305      	str	r3, [sp, #20]
    return size_;
   b8cb8:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b8cba:	428c      	cmp	r4, r1
   b8cbc:	da72      	bge.n	b8da4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   b8cbe:	6838      	ldr	r0, [r7, #0]
   b8cc0:	ab07      	add	r3, sp, #28
   b8cc2:	4642      	mov	r2, r8
   b8cc4:	1b09      	subs	r1, r1, r4
   b8cc6:	4420      	add	r0, r4
   b8cc8:	f7fe fc64 	bl	b7594 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   b8ccc:	4606      	mov	r6, r0
   b8cce:	2800      	cmp	r0, #0
   b8cd0:	d068      	beq.n	b8da4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b8cd2:	9b05      	ldr	r3, [sp, #20]
   b8cd4:	2b01      	cmp	r3, #1
   b8cd6:	d82f      	bhi.n	b8d38 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b8cd8:	f1a0 0b02 	sub.w	fp, r0, #2
   b8cdc:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   b8ce0:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   b8ce4:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b8ce8:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b8cea:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b8cec:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b8cee:	d055      	beq.n	b8d9c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   b8cf0:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b8cf2:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   b8cf6:	4413      	add	r3, r2
   b8cf8:	a808      	add	r0, sp, #32
   b8cfa:	78d9      	ldrb	r1, [r3, #3]
   b8cfc:	789b      	ldrb	r3, [r3, #2]
   b8cfe:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   b8d02:	f7fe fdac 	bl	b785e <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   b8d06:	f10d 0e20 	add.w	lr, sp, #32
   b8d0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b8d0e:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b8d12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8d16:	f8de 3000 	ldr.w	r3, [lr]
   b8d1a:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b8d1e:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b8d22:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b8d26:	ab0d      	add	r3, sp, #52	; 0x34
   b8d28:	cb0c      	ldmia	r3, {r2, r3}
   b8d2a:	6869      	ldr	r1, [r5, #4]
   b8d2c:	4628      	mov	r0, r5
   b8d2e:	f7ff ff8d 	bl	b8c4c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b8d32:	f109 0901 	add.w	r9, r9, #1
   b8d36:	e7d7      	b.n	b8ce8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   b8d38:	f1a8 0306 	sub.w	r3, r8, #6
   b8d3c:	2b01      	cmp	r3, #1
   b8d3e:	d82d      	bhi.n	b8d9c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b8d40:	f1a0 0b02 	sub.w	fp, r0, #2
   b8d44:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   b8d48:	f04f 0900 	mov.w	r9, #0
   b8d4c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   b8d50:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b8d52:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b8d54:	d022      	beq.n	b8d9c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b8d56:	3302      	adds	r3, #2
    return data_[i];
   b8d58:	6839      	ldr	r1, [r7, #0]
   b8d5a:	4423      	add	r3, r4
   b8d5c:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   b8d60:	2201      	movs	r2, #1
   b8d62:	4419      	add	r1, r3
   b8d64:	a808      	add	r0, sp, #32
   b8d66:	f7fe fd5b 	bl	b7820 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   b8d6a:	f10d 0e20 	add.w	lr, sp, #32
   b8d6e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b8d72:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b8d76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8d7a:	f8de 3000 	ldr.w	r3, [lr]
   b8d7e:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b8d82:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b8d86:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b8d8a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   b8d8e:	6869      	ldr	r1, [r5, #4]
   b8d90:	4628      	mov	r0, r5
   b8d92:	f7ff ff5b 	bl	b8c4c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b8d96:	f109 0901 	add.w	r9, r9, #1
   b8d9a:	e7d9      	b.n	b8d50 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b8d9c:	9b07      	ldr	r3, [sp, #28]
   b8d9e:	441c      	add	r4, r3
   b8da0:	4434      	add	r4, r6
   b8da2:	e789      	b.n	b8cb8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   b8da4:	4628      	mov	r0, r5
   b8da6:	b013      	add	sp, #76	; 0x4c
   b8da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b8dac <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b8dac:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   b8dae:	2300      	movs	r3, #0
   b8db0:	b085      	sub	sp, #20
   b8db2:	e9c0 3300 	strd	r3, r3, [r0]
   b8db6:	6083      	str	r3, [r0, #8]
   b8db8:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b8dba:	2202      	movs	r2, #2
   b8dbc:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b8dbe:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b8dc0:	f7ff ff6d 	bl	b8c9e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b8dc4:	a901      	add	r1, sp, #4
   b8dc6:	4620      	mov	r0, r4
   b8dc8:	f7ff ff19 	bl	b8bfe <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b8dcc:	a801      	add	r0, sp, #4
   b8dce:	f7ff f93a 	bl	b8046 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b8dd2:	2202      	movs	r2, #2
   b8dd4:	4629      	mov	r1, r5
   b8dd6:	a801      	add	r0, sp, #4
   b8dd8:	f7ff ff61 	bl	b8c9e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b8ddc:	a901      	add	r1, sp, #4
   b8dde:	4620      	mov	r0, r4
   b8de0:	f7ff ff0d 	bl	b8bfe <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b8de4:	a801      	add	r0, sp, #4
   b8de6:	f7ff f92e 	bl	b8046 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   b8dea:	2203      	movs	r2, #3
   b8dec:	4629      	mov	r1, r5
   b8dee:	a801      	add	r0, sp, #4
   b8df0:	f7ff ff55 	bl	b8c9e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b8df4:	a901      	add	r1, sp, #4
   b8df6:	4620      	mov	r0, r4
   b8df8:	f7ff ff01 	bl	b8bfe <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b8dfc:	a801      	add	r0, sp, #4
   b8dfe:	f7ff f922 	bl	b8046 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   b8e02:	2206      	movs	r2, #6
   b8e04:	4629      	mov	r1, r5
   b8e06:	a801      	add	r0, sp, #4
   b8e08:	f7ff ff49 	bl	b8c9e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b8e0c:	a901      	add	r1, sp, #4
   b8e0e:	4620      	mov	r0, r4
   b8e10:	f7ff fef5 	bl	b8bfe <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b8e14:	a801      	add	r0, sp, #4
   b8e16:	f7ff f916 	bl	b8046 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   b8e1a:	2207      	movs	r2, #7
   b8e1c:	4629      	mov	r1, r5
   b8e1e:	a801      	add	r0, sp, #4
   b8e20:	f7ff ff3d 	bl	b8c9e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b8e24:	a901      	add	r1, sp, #4
   b8e26:	4620      	mov	r0, r4
   b8e28:	f7ff fee9 	bl	b8bfe <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b8e2c:	a801      	add	r0, sp, #4
   b8e2e:	f7ff f90a 	bl	b8046 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b8e32:	4620      	mov	r0, r4
   b8e34:	b005      	add	sp, #20
   b8e36:	bd30      	pop	{r4, r5, pc}

000b8e38 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   b8e38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8e3c:	b085      	sub	sp, #20
   b8e3e:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b8e40:	4601      	mov	r1, r0
   b8e42:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   b8e44:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b8e46:	f7ff ffb1 	bl	b8dac <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_;
   b8e4a:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
   b8e4c:	9b02      	ldr	r3, [sp, #8]
   b8e4e:	f04f 0e14 	mov.w	lr, #20
   b8e52:	fb0e 6c03 	mla	ip, lr, r3, r6
   b8e56:	2700      	movs	r7, #0
    for (const auto& uuid : foundUuids) {
   b8e58:	45b4      	cmp	ip, r6
   b8e5a:	d00d      	beq.n	b8e78 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
   b8e5c:	45b9      	cmp	r9, r7
   b8e5e:	f106 0614 	add.w	r6, r6, #20
   b8e62:	d009      	beq.n	b8e78 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
   b8e64:	f1a6 0514 	sub.w	r5, r6, #20
   b8e68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8e6a:	fb0e 8407 	mla	r4, lr, r7, r8
   b8e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8e70:	682b      	ldr	r3, [r5, #0]
   b8e72:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
   b8e74:	3701      	adds	r7, #1
   b8e76:	e7ef      	b.n	b8e58 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b8e78:	a801      	add	r0, sp, #4
   b8e7a:	f7ff f8e4 	bl	b8046 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b8e7e:	4638      	mov	r0, r7
   b8e80:	b005      	add	sp, #20
   b8e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8e86 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   b8e86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8e8a:	b08b      	sub	sp, #44	; 0x2c
   b8e8c:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   b8e8e:	f100 0144 	add.w	r1, r0, #68	; 0x44
   b8e92:	a801      	add	r0, sp, #4
   b8e94:	f7ff fe8a 	bl	b8bac <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   b8e98:	9b02      	ldr	r3, [sp, #8]
   b8e9a:	2b00      	cmp	r3, #0
   b8e9c:	dd4a      	ble.n	b8f34 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b8e9e:	f104 0114 	add.w	r1, r4, #20
   b8ea2:	a804      	add	r0, sp, #16
   b8ea4:	f7ff ff82 	bl	b8dac <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b8ea8:	f104 0108 	add.w	r1, r4, #8
   b8eac:	a807      	add	r0, sp, #28
   b8eae:	f7ff ff7d 	bl	b8dac <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   b8eb2:	9d05      	ldr	r5, [sp, #20]
   b8eb4:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   b8eb6:	2d00      	cmp	r5, #0
   b8eb8:	dc01      	bgt.n	b8ebe <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   b8eba:	2e00      	cmp	r6, #0
   b8ebc:	dd38      	ble.n	b8f30 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   b8ebe:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   b8ec0:	9f02      	ldr	r7, [sp, #8]
    return data_;
   b8ec2:	f8dd 8010 	ldr.w	r8, [sp, #16]
   b8ec6:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   b8eca:	2314      	movs	r3, #20
   b8ecc:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   b8ed0:	fb03 8505 	mla	r5, r3, r5, r8
   b8ed4:	fb03 9606 	mla	r6, r3, r6, r9
   b8ed8:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   b8eda:	45ba      	cmp	sl, r7
   b8edc:	d028      	beq.n	b8f30 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   b8ede:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   b8ee0:	45ab      	cmp	fp, r5
   b8ee2:	d015      	beq.n	b8f10 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   b8ee4:	4659      	mov	r1, fp
   b8ee6:	4650      	mov	r0, sl
   b8ee8:	f7fe fcc3 	bl	b7872 <_ZNK8particle7BleUuideqERKS0_>
   b8eec:	f10b 0b14 	add.w	fp, fp, #20
   b8ef0:	4604      	mov	r4, r0
   b8ef2:	2800      	cmp	r0, #0
   b8ef4:	d0f4      	beq.n	b8ee0 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b8ef6:	a807      	add	r0, sp, #28
   b8ef8:	f7ff f8a5 	bl	b8046 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b8efc:	a804      	add	r0, sp, #16
   b8efe:	f7ff f8a2 	bl	b8046 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   b8f02:	a801      	add	r0, sp, #4
   b8f04:	f7ff f89f 	bl	b8046 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   b8f08:	4620      	mov	r0, r4
   b8f0a:	b00b      	add	sp, #44	; 0x2c
   b8f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8f10:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   b8f12:	45b3      	cmp	fp, r6
   b8f14:	d009      	beq.n	b8f2a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   b8f16:	4659      	mov	r1, fp
   b8f18:	4650      	mov	r0, sl
   b8f1a:	f7fe fcaa 	bl	b7872 <_ZNK8particle7BleUuideqERKS0_>
   b8f1e:	f10b 0b14 	add.w	fp, fp, #20
   b8f22:	4604      	mov	r4, r0
   b8f24:	2800      	cmp	r0, #0
   b8f26:	d0f4      	beq.n	b8f12 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   b8f28:	e7e5      	b.n	b8ef6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   b8f2a:	f10a 0a14 	add.w	sl, sl, #20
   b8f2e:	e7d4      	b.n	b8eda <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   b8f30:	2400      	movs	r4, #0
   b8f32:	e7e0      	b.n	b8ef6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   b8f34:	2401      	movs	r4, #1
   b8f36:	e7e4      	b.n	b8f02 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000b8f38 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b8f38:	b513      	push	{r0, r1, r4, lr}
   b8f3a:	460b      	mov	r3, r1
   b8f3c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8f3e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8f42:	466c      	mov	r4, sp
   b8f44:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b8f48:	e893 0003 	ldmia.w	r3, {r0, r1}
   b8f4c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b8f50:	e894 0003 	ldmia.w	r4, {r0, r1}
   b8f54:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b8f58:	b002      	add	sp, #8
   b8f5a:	bd10      	pop	{r4, pc}

000b8f5c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b8f5c:	b538      	push	{r3, r4, r5, lr}
   b8f5e:	4605      	mov	r5, r0
   b8f60:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b8f62:	f7ff ffe9 	bl	b8f38 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8f66:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8f68:	68a2      	ldr	r2, [r4, #8]
   b8f6a:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8f6c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8f6e:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8f70:	68e2      	ldr	r2, [r4, #12]
   b8f72:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8f74:	60e3      	str	r3, [r4, #12]
      }
   b8f76:	bd38      	pop	{r3, r4, r5, pc}

000b8f78 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   b8f78:	b530      	push	{r4, r5, lr}
   b8f7a:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   b8f7c:	2300      	movs	r3, #0
   b8f7e:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b8f80:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   b8f82:	4605      	mov	r5, r0
   b8f84:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   b8f86:	b133      	cbz	r3, b8f96 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8f88:	2202      	movs	r2, #2
   b8f8a:	4668      	mov	r0, sp
   b8f8c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8f8e:	68e3      	ldr	r3, [r4, #12]
   b8f90:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b8f92:	68a3      	ldr	r3, [r4, #8]
   b8f94:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   b8f96:	4629      	mov	r1, r5
   b8f98:	4668      	mov	r0, sp
   b8f9a:	f7ff ffdf 	bl	b8f5c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b8f9e:	4668      	mov	r0, sp
   b8fa0:	f7fb f97c 	bl	b429c <_ZNSt14_Function_baseD1Ev>
      }
   b8fa4:	b005      	add	sp, #20
   b8fa6:	bd30      	pop	{r4, r5, pc}

000b8fa8 <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b8fa8:	b538      	push	{r3, r4, r5, lr}
   b8faa:	460d      	mov	r5, r1
      { return _M_ptr; }
   b8fac:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   b8fae:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b8fb0:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   b8fb2:	b123      	cbz	r3, b8fbe <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   b8fb4:	6828      	ldr	r0, [r5, #0]
   b8fb6:	314c      	adds	r1, #76	; 0x4c
   b8fb8:	304c      	adds	r0, #76	; 0x4c
   b8fba:	f7ff ffdd 	bl	b8f78 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b8fbe:	4620      	mov	r0, r4
   b8fc0:	682b      	ldr	r3, [r5, #0]
   b8fc2:	f840 3b04 	str.w	r3, [r0], #4
   b8fc6:	6869      	ldr	r1, [r5, #4]
   b8fc8:	f7fe fb8c 	bl	b76e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   b8fcc:	4620      	mov	r0, r4
   b8fce:	bd38      	pop	{r3, r4, r5, pc}

000b8fd0 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b8fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8fd4:	4604      	mov	r4, r0
   b8fd6:	b087      	sub	sp, #28
    WiringBleLock lk;
   b8fd8:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b8fda:	460e      	mov	r6, r1
   b8fdc:	4617      	mov	r7, r2
    WiringBleLock lk;
   b8fde:	f7fe fba7 	bl	b7730 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b8fe2:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b8fe4:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b8fe8:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   b8fec:	4544      	cmp	r4, r8
   b8fee:	46a1      	mov	r9, r4
   b8ff0:	d016      	beq.n	b9020 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   b8ff2:	4621      	mov	r1, r4
   b8ff4:	a801      	add	r0, sp, #4
   b8ff6:	f7fe fe0b 	bl	b7c10 <_ZNK8particle17BleCharacteristic4UUIDEv>
   b8ffa:	4639      	mov	r1, r7
   b8ffc:	a801      	add	r0, sp, #4
   b8ffe:	f7fe fc38 	bl	b7872 <_ZNK8particle7BleUuideqERKS0_>
   b9002:	3408      	adds	r4, #8
   b9004:	4605      	mov	r5, r0
   b9006:	2800      	cmp	r0, #0
   b9008:	d0f0      	beq.n	b8fec <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   b900a:	4649      	mov	r1, r9
   b900c:	4630      	mov	r0, r6
   b900e:	f7ff ffcb 	bl	b8fa8 <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   b9012:	4668      	mov	r0, sp
   b9014:	f7fe fb9a 	bl	b774c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b9018:	4628      	mov	r0, r5
   b901a:	b007      	add	sp, #28
   b901c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   b9020:	2500      	movs	r5, #0
   b9022:	e7f6      	b.n	b9012 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000b9024 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b9024:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b9026:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b9028:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b902a:	344c      	adds	r4, #76	; 0x4c
   b902c:	b1b9      	cbz	r1, b905e <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   b902e:	e9cd 1200 	strd	r1, r2, [sp]
   b9032:	a802      	add	r0, sp, #8
   b9034:	4669      	mov	r1, sp
   b9036:	f7ff f865 	bl	b8104 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b903a:	2300      	movs	r3, #0
	__x.swap(*this);
   b903c:	a906      	add	r1, sp, #24
   b903e:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b9040:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b9042:	f7ff ff8b 	bl	b8f5c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b9046:	4621      	mov	r1, r4
   b9048:	a806      	add	r0, sp, #24
   b904a:	f7ff ff87 	bl	b8f5c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b904e:	a806      	add	r0, sp, #24
   b9050:	f7fb f924 	bl	b429c <_ZNSt14_Function_baseD1Ev>
   b9054:	a802      	add	r0, sp, #8
   b9056:	f7fb f921 	bl	b429c <_ZNSt14_Function_baseD1Ev>
}
   b905a:	b00a      	add	sp, #40	; 0x28
   b905c:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b905e:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b9060:	e7eb      	b.n	b903a <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000b9062 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9062:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9066:	4604      	mov	r4, r0
   b9068:	460d      	mov	r5, r1
   b906a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b906c:	d914      	bls.n	b9098 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b906e:	4290      	cmp	r0, r2
   b9070:	d213      	bcs.n	b909a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b9072:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b9076:	1a75      	subs	r5, r6, r1
   b9078:	f1a1 0708 	sub.w	r7, r1, #8
   b907c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b907e:	42b7      	cmp	r7, r6
   b9080:	d018      	beq.n	b90b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b9082:	b11c      	cbz	r4, b908c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b9084:	4631      	mov	r1, r6
   b9086:	4620      	mov	r0, r4
   b9088:	f7ff f869 	bl	b815e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b908c:	1d30      	adds	r0, r6, #4
   b908e:	f7ff f87a 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b9092:	3e08      	subs	r6, #8
   b9094:	3c08      	subs	r4, #8
   b9096:	e7f2      	b.n	b907e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b9098:	d00c      	beq.n	b90b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b909a:	42b5      	cmp	r5, r6
   b909c:	d00a      	beq.n	b90b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b909e:	b11c      	cbz	r4, b90a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b90a0:	4629      	mov	r1, r5
   b90a2:	4620      	mov	r0, r4
   b90a4:	f7ff f85b 	bl	b815e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b90a8:	1d28      	adds	r0, r5, #4
   b90aa:	f7ff f86c 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b90ae:	3508      	adds	r5, #8
   b90b0:	3408      	adds	r4, #8
   b90b2:	e7f2      	b.n	b909a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b90b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b90b6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b90b6:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b90b8:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b90ba:	4605      	mov	r5, r0
        if (n > 0) {
   b90bc:	dd11      	ble.n	b90e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b90be:	00f0      	lsls	r0, r6, #3
   b90c0:	f7fe f996 	bl	b73f0 <malloc>
            if (!d) {
   b90c4:	4604      	mov	r4, r0
   b90c6:	b158      	cbz	r0, b90e0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b90c8:	e9d5 1200 	ldrd	r1, r2, [r5]
   b90cc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b90d0:	f7ff ffc7 	bl	b9062 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b90d4:	6828      	ldr	r0, [r5, #0]
   b90d6:	f7fe f993 	bl	b7400 <free>
        data_ = d;
   b90da:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b90dc:	60ae      	str	r6, [r5, #8]
        return true;
   b90de:	2001      	movs	r0, #1
    }
   b90e0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b90e2:	2400      	movs	r4, #0
   b90e4:	e7f6      	b.n	b90d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b90e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b90e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b90ea:	2300      	movs	r3, #0
   b90ec:	e9c0 3300 	strd	r3, r3, [r0]
   b90f0:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b90f2:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b90f4:	6849      	ldr	r1, [r1, #4]
   b90f6:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b90f8:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b90fa:	dd13      	ble.n	b9124 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b90fc:	f7ff ffdb 	bl	b90b6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9100:	b180      	cbz	r0, b9124 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b9102:	e9d5 6300 	ldrd	r6, r3, [r5]
   b9106:	6827      	ldr	r7, [r4, #0]
   b9108:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b910c:	45b0      	cmp	r8, r6
   b910e:	d007      	beq.n	b9120 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b9110:	b11f      	cbz	r7, b911a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b9112:	4631      	mov	r1, r6
   b9114:	4638      	mov	r0, r7
   b9116:	f7ff f822 	bl	b815e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   b911a:	3608      	adds	r6, #8
   b911c:	3708      	adds	r7, #8
   b911e:	e7f5      	b.n	b910c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b9120:	686b      	ldr	r3, [r5, #4]
   b9122:	6063      	str	r3, [r4, #4]
}
   b9124:	4620      	mov	r0, r4
   b9126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b912a <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   b912a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b912c:	460d      	mov	r5, r1
   b912e:	4604      	mov	r4, r0
    WiringBleLock lk;
   b9130:	a801      	add	r0, sp, #4
   b9132:	f7fe fafd 	bl	b7730 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   b9136:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   b9138:	4620      	mov	r0, r4
   b913a:	310c      	adds	r1, #12
   b913c:	f7ff ffd3 	bl	b90e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b9140:	a801      	add	r0, sp, #4
   b9142:	f7fe fb03 	bl	b774c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b9146:	4620      	mov	r0, r4
   b9148:	b003      	add	sp, #12
   b914a:	bd30      	pop	{r4, r5, pc}

000b914c <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b914c:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   b914e:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b9150:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b9152:	4605      	mov	r5, r0
   b9154:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   b9156:	b933      	cbnz	r3, b9166 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   b9158:	4608      	mov	r0, r1
   b915a:	f7fe fa7d 	bl	b7658 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   b915e:	b910      	cbnz	r0, b9166 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   b9160:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   b9162:	2201      	movs	r2, #1
   b9164:	729a      	strb	r2, [r3, #10]
    return services();
   b9166:	4628      	mov	r0, r5
   b9168:	4621      	mov	r1, r4
   b916a:	f7ff ffde 	bl	b912a <_ZNK8particle13BlePeerDevice8servicesEv>
}
   b916e:	4628      	mov	r0, r5
   b9170:	bd38      	pop	{r3, r4, r5, pc}

000b9172 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9172:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9174:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b9176:	6845      	ldr	r5, [r0, #4]
   b9178:	4668      	mov	r0, sp
   b917a:	f7fe fff0 	bl	b815e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b917e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b9182:	4299      	cmp	r1, r3
   b9184:	da10      	bge.n	b91a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b9186:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9188:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b918a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b918e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b9192:	4629      	mov	r1, r5
   b9194:	f105 0008 	add.w	r0, r5, #8
   b9198:	f7ff ff63 	bl	b9062 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b919c:	b98d      	cbnz	r5, b91c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b919e:	6863      	ldr	r3, [r4, #4]
   b91a0:	3301      	adds	r3, #1
   b91a2:	6063      	str	r3, [r4, #4]
    return true;
   b91a4:	2601      	movs	r6, #1
   b91a6:	e006      	b.n	b91b6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b91a8:	3101      	adds	r1, #1
   b91aa:	4620      	mov	r0, r4
   b91ac:	f7ff ff83 	bl	b90b6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b91b0:	4606      	mov	r6, r0
   b91b2:	2800      	cmp	r0, #0
   b91b4:	d1e7      	bne.n	b9186 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   b91b6:	a801      	add	r0, sp, #4
   b91b8:	f7fe ffe5 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b91bc:	4630      	mov	r0, r6
   b91be:	b002      	add	sp, #8
   b91c0:	bd70      	pop	{r4, r5, r6, pc}
   b91c2:	4669      	mov	r1, sp
   b91c4:	4628      	mov	r0, r5
   b91c6:	f7fe ffca 	bl	b815e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b91ca:	e7e8      	b.n	b919e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b91cc <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b91cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   b91d0:	f8df 90b8 	ldr.w	r9, [pc, #184]	; b928c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   b91d4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; b9290 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b91d8:	b093      	sub	sp, #76	; 0x4c
   b91da:	4605      	mov	r5, r0
   b91dc:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   b91de:	2700      	movs	r7, #0
   b91e0:	682b      	ldr	r3, [r5, #0]
   b91e2:	42bb      	cmp	r3, r7
   b91e4:	d94e      	bls.n	b9284 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   b91e6:	a803      	add	r0, sp, #12
   b91e8:	f7fe fdb8 	bl	b7d5c <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b91ec:	261c      	movs	r6, #28
   b91ee:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   b91f0:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   b91f2:	437e      	muls	r6, r7
   b91f4:	4432      	add	r2, r6
   b91f6:	f10d 0c14 	add.w	ip, sp, #20
   b91fa:	1d13      	adds	r3, r2, #4
   b91fc:	46e3      	mov	fp, ip
   b91fe:	3214      	adds	r2, #20
   b9200:	6818      	ldr	r0, [r3, #0]
   b9202:	6859      	ldr	r1, [r3, #4]
   b9204:	46e6      	mov	lr, ip
   b9206:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   b920a:	3308      	adds	r3, #8
   b920c:	4293      	cmp	r3, r2
   b920e:	46f4      	mov	ip, lr
   b9210:	d1f6      	bne.n	b9200 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   b9212:	6818      	ldr	r0, [r3, #0]
   b9214:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   b9218:	4659      	mov	r1, fp
   b921a:	a80a      	add	r0, sp, #40	; 0x28
   b921c:	f7fe fade 	bl	b77dc <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b9220:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   b9224:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b922a:	f8dc 3000 	ldr.w	r3, [ip]
   b922e:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   b9230:	686b      	ldr	r3, [r5, #4]
   b9232:	9a03      	ldr	r2, [sp, #12]
   b9234:	4433      	add	r3, r6
   b9236:	a903      	add	r1, sp, #12
   b9238:	8b1b      	ldrh	r3, [r3, #24]
   b923a:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   b923c:	686b      	ldr	r3, [r5, #4]
   b923e:	4433      	add	r3, r6
   b9240:	8b5b      	ldrh	r3, [r3, #26]
   b9242:	82d3      	strh	r3, [r2, #22]
        return services_;
   b9244:	f8d8 0000 	ldr.w	r0, [r8]
   b9248:	f100 040c 	add.w	r4, r0, #12
   b924c:	a80a      	add	r0, sp, #40	; 0x28
   b924e:	f7fe ff86 	bl	b815e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   b9252:	4620      	mov	r0, r4
   b9254:	a90a      	add	r1, sp, #40	; 0x28
   b9256:	f7ff ff8c 	bl	b9172 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b925a:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b925c:	a80b      	add	r0, sp, #44	; 0x2c
   b925e:	f7fe ff92 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9262:	b954      	cbnz	r4, b927a <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   b9264:	2320      	movs	r3, #32
   b9266:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   b926a:	f8cd 9000 	str.w	r9, [sp]
   b926e:	4623      	mov	r3, r4
   b9270:	aa0a      	add	r2, sp, #40	; 0x28
   b9272:	4651      	mov	r1, sl
   b9274:	2032      	movs	r0, #50	; 0x32
   b9276:	f7fd ffdf 	bl	b7238 <log_message>
   b927a:	a804      	add	r0, sp, #16
   b927c:	f7fe ff83 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b9280:	3701      	adds	r7, #1
   b9282:	e7ad      	b.n	b91e0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   b9284:	b013      	add	sp, #76	; 0x4c
   b9286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b928a:	bf00      	nop
   b928c:	000be4ad 	.word	0x000be4ad
   b9290:	000be3af 	.word	0x000be3af

000b9294 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9294:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9298:	4604      	mov	r4, r0
   b929a:	460d      	mov	r5, r1
   b929c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b929e:	d914      	bls.n	b92ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b92a0:	4290      	cmp	r0, r2
   b92a2:	d213      	bcs.n	b92cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b92a4:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b92a8:	1a75      	subs	r5, r6, r1
   b92aa:	f1a1 0708 	sub.w	r7, r1, #8
   b92ae:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b92b0:	42b7      	cmp	r7, r6
   b92b2:	d018      	beq.n	b92e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b92b4:	b11c      	cbz	r4, b92be <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b92b6:	4631      	mov	r1, r6
   b92b8:	4620      	mov	r0, r4
   b92ba:	f7fe ff42 	bl	b8142 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b92be:	1d30      	adds	r0, r6, #4
   b92c0:	f7fe ff61 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b92c4:	3e08      	subs	r6, #8
   b92c6:	3c08      	subs	r4, #8
   b92c8:	e7f2      	b.n	b92b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b92ca:	d00c      	beq.n	b92e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b92cc:	42b5      	cmp	r5, r6
   b92ce:	d00a      	beq.n	b92e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b92d0:	b11c      	cbz	r4, b92da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b92d2:	4629      	mov	r1, r5
   b92d4:	4620      	mov	r0, r4
   b92d6:	f7fe ff34 	bl	b8142 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b92da:	1d28      	adds	r0, r5, #4
   b92dc:	f7fe ff53 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b92e0:	3508      	adds	r5, #8
   b92e2:	3408      	adds	r4, #8
   b92e4:	e7f2      	b.n	b92cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b92e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b92e8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b92e8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b92ea:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b92ec:	4605      	mov	r5, r0
        if (n > 0) {
   b92ee:	dd11      	ble.n	b9314 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b92f0:	00f0      	lsls	r0, r6, #3
   b92f2:	f7fe f87d 	bl	b73f0 <malloc>
            if (!d) {
   b92f6:	4604      	mov	r4, r0
   b92f8:	b158      	cbz	r0, b9312 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b92fa:	e9d5 1200 	ldrd	r1, r2, [r5]
   b92fe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b9302:	f7ff ffc7 	bl	b9294 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b9306:	6828      	ldr	r0, [r5, #0]
   b9308:	f7fe f87a 	bl	b7400 <free>
        data_ = d;
   b930c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b930e:	60ae      	str	r6, [r5, #8]
        return true;
   b9310:	2001      	movs	r0, #1
    }
   b9312:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9314:	2400      	movs	r4, #0
   b9316:	e7f6      	b.n	b9306 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b9318 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b931c:	2300      	movs	r3, #0
   b931e:	e9c0 3300 	strd	r3, r3, [r0]
   b9322:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9324:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b9326:	6849      	ldr	r1, [r1, #4]
   b9328:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b932a:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b932c:	dd13      	ble.n	b9356 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b932e:	f7ff ffdb 	bl	b92e8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9332:	b180      	cbz	r0, b9356 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b9334:	e9d5 6300 	ldrd	r6, r3, [r5]
   b9338:	6827      	ldr	r7, [r4, #0]
   b933a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b933e:	45b0      	cmp	r8, r6
   b9340:	d007      	beq.n	b9352 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b9342:	b11f      	cbz	r7, b934c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b9344:	4631      	mov	r1, r6
   b9346:	4638      	mov	r0, r7
   b9348:	f7fe fefb 	bl	b8142 <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   b934c:	3608      	adds	r6, #8
   b934e:	3708      	adds	r7, #8
   b9350:	e7f5      	b.n	b933e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b9352:	686b      	ldr	r3, [r5, #4]
   b9354:	6063      	str	r3, [r4, #4]
}
   b9356:	4620      	mov	r0, r4
   b9358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b935c <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   b935c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b935e:	460d      	mov	r5, r1
   b9360:	4604      	mov	r4, r0
    WiringBleLock lk;
   b9362:	a801      	add	r0, sp, #4
   b9364:	f7fe f9e4 	bl	b7730 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   b9368:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   b936a:	4620      	mov	r0, r4
   b936c:	3118      	adds	r1, #24
   b936e:	f7ff ffd3 	bl	b9318 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b9372:	a801      	add	r0, sp, #4
   b9374:	f7fe f9ea 	bl	b774c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b9378:	4620      	mov	r0, r4
   b937a:	b003      	add	sp, #12
   b937c:	bd30      	pop	{r4, r5, pc}

000b937e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b937e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9380:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b9382:	6845      	ldr	r5, [r0, #4]
   b9384:	4668      	mov	r0, sp
   b9386:	f7fe fedc 	bl	b8142 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b938a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b938e:	4299      	cmp	r1, r3
   b9390:	da10      	bge.n	b93b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b9392:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9394:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9396:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b939a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b939e:	4629      	mov	r1, r5
   b93a0:	f105 0008 	add.w	r0, r5, #8
   b93a4:	f7ff ff76 	bl	b9294 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b93a8:	b98d      	cbnz	r5, b93ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b93aa:	6863      	ldr	r3, [r4, #4]
   b93ac:	3301      	adds	r3, #1
   b93ae:	6063      	str	r3, [r4, #4]
    return true;
   b93b0:	2601      	movs	r6, #1
   b93b2:	e006      	b.n	b93c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b93b4:	3101      	adds	r1, #1
   b93b6:	4620      	mov	r0, r4
   b93b8:	f7ff ff96 	bl	b92e8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b93bc:	4606      	mov	r6, r0
   b93be:	2800      	cmp	r0, #0
   b93c0:	d1e7      	bne.n	b9392 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b93c2:	a801      	add	r0, sp, #4
   b93c4:	f7fe fedf 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b93c8:	4630      	mov	r0, r6
   b93ca:	b002      	add	sp, #8
   b93cc:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b93ce:	4669      	mov	r1, sp
   b93d0:	4628      	mov	r0, r5
   b93d2:	f7fe feb6 	bl	b8142 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b93d6:	e7e8      	b.n	b93aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b93d8 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b93d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b93da:	b085      	sub	sp, #20
   b93dc:	4605      	mov	r5, r0
    WiringBleLock lk;
   b93de:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b93e0:	460c      	mov	r4, r1
   b93e2:	4617      	mov	r7, r2
    WiringBleLock lk;
   b93e4:	f7fe f9a4 	bl	b7730 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   b93e8:	2300      	movs	r3, #0
   b93ea:	e9c5 3300 	strd	r3, r3, [r5]
   b93ee:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   b93f0:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b93f2:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   b93f6:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   b93fa:	42b4      	cmp	r4, r6
   b93fc:	d011      	beq.n	b9422 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   b93fe:	6838      	ldr	r0, [r7, #0]
   b9400:	4621      	mov	r1, r4
   b9402:	f7fe fbc5 	bl	b7b90 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   b9406:	b150      	cbz	r0, b941e <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   b9408:	4621      	mov	r1, r4
   b940a:	a802      	add	r0, sp, #8
   b940c:	f7fe fe99 	bl	b8142 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9410:	a902      	add	r1, sp, #8
   b9412:	4628      	mov	r0, r5
   b9414:	f7ff ffb3 	bl	b937e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   b9418:	a803      	add	r0, sp, #12
   b941a:	f7fe feb4 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   b941e:	3408      	adds	r4, #8
   b9420:	e7eb      	b.n	b93fa <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   b9422:	a801      	add	r0, sp, #4
   b9424:	f7fe f992 	bl	b774c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b9428:	4628      	mov	r0, r5
   b942a:	b005      	add	sp, #20
   b942c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b9430 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b9430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   b9434:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b9436:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b9438:	b091      	sub	sp, #68	; 0x44
   b943a:	4606      	mov	r6, r0
   b943c:	460f      	mov	r7, r1
   b943e:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   b9440:	b933      	cbnz	r3, b9450 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   b9442:	e9c0 3300 	strd	r3, r3, [r0]
   b9446:	6083      	str	r3, [r0, #8]
}
   b9448:	4630      	mov	r0, r6
   b944a:	b011      	add	sp, #68	; 0x44
   b944c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   b9450:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   b9452:	7e0d      	ldrb	r5, [r1, #24]
   b9454:	2d00      	cmp	r5, #0
   b9456:	d158      	bne.n	b950a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   b9458:	2320      	movs	r3, #32
   b945a:	462a      	mov	r2, r5
   b945c:	a803      	add	r0, sp, #12
   b945e:	e9cd 3508 	strd	r3, r5, [sp, #32]
   b9462:	f7fe fb02 	bl	b7a6a <_ZNK8particle7BleUuid8toStringEb>
   b9466:	9b03      	ldr	r3, [sp, #12]
   b9468:	9301      	str	r3, [sp, #4]
   b946a:	4b2b      	ldr	r3, [pc, #172]	; (b9518 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   b946c:	492b      	ldr	r1, [pc, #172]	; (b951c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   b946e:	9300      	str	r3, [sp, #0]
   b9470:	aa08      	add	r2, sp, #32
   b9472:	462b      	mov	r3, r5
   b9474:	2001      	movs	r0, #1
   b9476:	f7fd fedf 	bl	b7238 <log_message>
   b947a:	a803      	add	r0, sp, #12
   b947c:	f001 f964 	bl	ba748 <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   b9480:	231c      	movs	r3, #28
   b9482:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   b9486:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   b948a:	8a9a      	ldrh	r2, [r3, #20]
   b948c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   b9490:	8adb      	ldrh	r3, [r3, #22]
   b9492:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   b9496:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   b9498:	4a21      	ldr	r2, [pc, #132]	; (b9520 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   b949a:	8818      	ldrh	r0, [r3, #0]
   b949c:	9500      	str	r5, [sp, #0]
   b949e:	a908      	add	r1, sp, #32
   b94a0:	f7fd fc96 	bl	b6dd0 <hal_ble_gatt_client_discover_characteristics>
   b94a4:	2800      	cmp	r0, #0
   b94a6:	db30      	blt.n	b950a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   b94a8:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   b94aa:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b94ae:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   b94b2:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   b94b4:	f1a4 0308 	sub.w	r3, r4, #8
   b94b8:	4599      	cmp	r9, r3
   b94ba:	d022      	beq.n	b9502 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   b94bc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b94c0:	89db      	ldrh	r3, [r3, #14]
   b94c2:	2b00      	cmp	r3, #0
   b94c4:	d0f5      	beq.n	b94b2 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   b94c6:	2210      	movs	r2, #16
   b94c8:	2100      	movs	r1, #0
   b94ca:	eb0d 0002 	add.w	r0, sp, r2
   b94ce:	9503      	str	r5, [sp, #12]
   b94d0:	f002 fbf9 	bl	bbcc6 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   b94d4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b94d8:	89d9      	ldrh	r1, [r3, #14]
   b94da:	683b      	ldr	r3, [r7, #0]
   b94dc:	aa03      	add	r2, sp, #12
   b94de:	8818      	ldrh	r0, [r3, #0]
   b94e0:	9500      	str	r5, [sp, #0]
   b94e2:	2313      	movs	r3, #19
   b94e4:	f7fd fc92 	bl	b6e0c <hal_ble_gatt_client_read>
                if (len > 0) {
   b94e8:	2800      	cmp	r0, #0
   b94ea:	d0e2      	beq.n	b94b2 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   b94ec:	ab10      	add	r3, sp, #64	; 0x40
   b94ee:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   b94f0:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   b94f2:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   b94f6:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   b94fa:	303c      	adds	r0, #60	; 0x3c
   b94fc:	f001 f9c5 	bl	ba88a <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   b9500:	e7d7      	b.n	b94b2 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   b9502:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   b9506:	2201      	movs	r2, #1
   b9508:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   b950a:	4642      	mov	r2, r8
   b950c:	4639      	mov	r1, r7
   b950e:	4630      	mov	r0, r6
   b9510:	f7ff ff62 	bl	b93d8 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   b9514:	e798      	b.n	b9448 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   b9516:	bf00      	nop
   b9518:	000be4d2 	.word	0x000be4d2
   b951c:	000be3af 	.word	0x000be3af
   b9520:	000b96c9 	.word	0x000b96c9

000b9524 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b9524:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   b9526:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b9528:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b952a:	b085      	sub	sp, #20
   b952c:	4606      	mov	r6, r0
   b952e:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   b9530:	b92b      	cbnz	r3, b953e <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   b9532:	a801      	add	r0, sp, #4
   b9534:	f7ff fe0a 	bl	b914c <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   b9538:	a801      	add	r0, sp, #4
   b953a:	f7fe fe33 	bl	b81a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   b953e:	682b      	ldr	r3, [r5, #0]
   b9540:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   b9544:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   b9548:	42bc      	cmp	r4, r7
   b954a:	d009      	beq.n	b9560 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   b954c:	4622      	mov	r2, r4
   b954e:	4629      	mov	r1, r5
   b9550:	a801      	add	r0, sp, #4
   b9552:	f7ff ff6d 	bl	b9430 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   b9556:	a801      	add	r0, sp, #4
   b9558:	f7fe fe36 	bl	b81c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   b955c:	3408      	adds	r4, #8
   b955e:	e7f3      	b.n	b9548 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   b9560:	4630      	mov	r0, r6
   b9562:	4629      	mov	r1, r5
   b9564:	f7ff fefa 	bl	b935c <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   b9568:	4630      	mov	r0, r6
   b956a:	b005      	add	sp, #20
   b956c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b9570 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b9570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9574:	4605      	mov	r5, r0
   b9576:	b093      	sub	sp, #76	; 0x4c
    return address_;
   b9578:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   b957a:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b957c:	460f      	mov	r7, r1
    return address_;
   b957e:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b9580:	4698      	mov	r8, r3
    return address_;
   b9582:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   b9584:	4b41      	ldr	r3, [pc, #260]	; (b968c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   b9586:	9304      	str	r3, [sp, #16]
    return address_;
   b9588:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   b958a:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   b958c:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   b9590:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   b9594:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   b9598:	f7fe fcac 	bl	b7ef4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b959c:	4b3c      	ldr	r3, [pc, #240]	; (b9690 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   b959e:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b95a0:	f7fe fca8 	bl	b7ef4 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b95a4:	6829      	ldr	r1, [r5, #0]
   b95a6:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b95a8:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b95aa:	464a      	mov	r2, r9
   b95ac:	a804      	add	r0, sp, #16
   b95ae:	f7fd fc37 	bl	b6e20 <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   b95b2:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   b95b4:	4604      	mov	r4, r0
   b95b6:	b138      	cbz	r0, b95c8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   b95b8:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b95ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b95be:	801a      	strh	r2, [r3, #0]
}
   b95c0:	4620      	mov	r0, r4
   b95c2:	b013      	add	sp, #76	; 0x4c
   b95c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   b95c8:	4639      	mov	r1, r7
   b95ca:	4628      	mov	r0, r5
   b95cc:	f7fe fc16 	bl	b7dfc <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
   b95d0:	a803      	add	r0, sp, #12
   b95d2:	f7fe f8ad 	bl	b7730 <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b95d6:	f7fe fc8d 	bl	b7ef4 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b95da:	6807      	ldr	r7, [r0, #0]
   b95dc:	4629      	mov	r1, r5
   b95de:	3718      	adds	r7, #24
   b95e0:	4630      	mov	r0, r6
   b95e2:	f7fe fdc6 	bl	b8172 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b95e6:	4631      	mov	r1, r6
   b95e8:	4638      	mov	r0, r7
   b95ea:	f7ff f92b 	bl	b8844 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b95ee:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   b95f0:	a80b      	add	r0, sp, #44	; 0x2c
   b95f2:	f7fe fdc8 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b95f6:	f04f 0920 	mov.w	r9, #32
   b95fa:	bb1f      	cbnz	r7, b9644 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   b95fc:	4632      	mov	r2, r6
   b95fe:	4b25      	ldr	r3, [pc, #148]	; (b9694 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b9600:	4e25      	ldr	r6, [pc, #148]	; (b9698 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   b9602:	4926      	ldr	r1, [pc, #152]	; (b969c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b9604:	9300      	str	r3, [sp, #0]
   b9606:	2032      	movs	r0, #50	; 0x32
   b9608:	4623      	mov	r3, r4
   b960a:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b960e:	f7fd fe13 	bl	b7238 <log_message>
   b9612:	6830      	ldr	r0, [r6, #0]
   b9614:	f7fd fc80 	bl	b6f18 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b9618:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   b961a:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b961e:	4621      	mov	r1, r4
   b9620:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b9622:	4c1f      	ldr	r4, [pc, #124]	; (b96a0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b9624:	f7fd fbb6 	bl	b6d94 <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   b9628:	6830      	ldr	r0, [r6, #0]
   b962a:	f7fd fc6d 	bl	b6f08 <os_mutex_recursive_lock>
        locked_ = true;
   b962e:	2301      	movs	r3, #1
   b9630:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   b9634:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b9636:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b963a:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b963c:	a803      	add	r0, sp, #12
   b963e:	f7fe f885 	bl	b774c <_ZN8particle3ble13WiringBleLockD1Ev>
   b9642:	e7bd      	b.n	b95c0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   b9644:	a803      	add	r0, sp, #12
   b9646:	f7fe f881 	bl	b774c <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   b964a:	4b16      	ldr	r3, [pc, #88]	; (b96a4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   b964c:	9300      	str	r3, [sp, #0]
   b964e:	4913      	ldr	r1, [pc, #76]	; (b969c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b9650:	4623      	mov	r3, r4
   b9652:	4632      	mov	r2, r6
   b9654:	2001      	movs	r0, #1
   b9656:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b965a:	f7fd fded 	bl	b7238 <log_message>
    if (automatic) {
   b965e:	f1b8 0f00 	cmp.w	r8, #0
   b9662:	d0ad      	beq.n	b95c0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b9664:	4629      	mov	r1, r5
   b9666:	4630      	mov	r0, r6
   b9668:	f7ff ff5c 	bl	b9524 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   b966c:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   b9670:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   b9674:	42bd      	cmp	r5, r7
   b9676:	d005      	beq.n	b9684 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   b9678:	4628      	mov	r0, r5
   b967a:	2101      	movs	r1, #1
   b967c:	f7fe fb34 	bl	b7ce8 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   b9680:	3508      	adds	r5, #8
   b9682:	e7f7      	b.n	b9674 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b9684:	4630      	mov	r0, r6
   b9686:	f7fe fd9f 	bl	b81c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b968a:	e799      	b.n	b95c0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   b968c:	00180003 	.word	0x00180003
   b9690:	000b88fd 	.word	0x000b88fd
   b9694:	000be504 	.word	0x000be504
   b9698:	2003e654 	.word	0x2003e654
   b969c:	000be3af 	.word	0x000be3af
   b96a0:	fffffefc 	.word	0xfffffefc
   b96a4:	000be520 	.word	0x000be520

000b96a8 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   b96a8:	b513      	push	{r0, r1, r4, lr}
   b96aa:	4604      	mov	r4, r0
   b96ac:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   b96b0:	f7fe fb70 	bl	b7d94 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   b96b4:	9b00      	ldr	r3, [sp, #0]
   b96b6:	9901      	ldr	r1, [sp, #4]
   b96b8:	2200      	movs	r2, #0
   b96ba:	4620      	mov	r0, r4
   b96bc:	f7ff ff58 	bl	b9570 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}
   b96c0:	4620      	mov	r0, r4
   b96c2:	b002      	add	sp, #8
   b96c4:	bd10      	pop	{r4, pc}
	...

000b96c8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b96c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   b96cc:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b96ce:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   b96d0:	2600      	movs	r6, #0
   b96d2:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   b96d6:	4b66      	ldr	r3, [pc, #408]	; (b9870 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   b96d8:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b96da:	4605      	mov	r5, r0
   b96dc:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   b96de:	4633      	mov	r3, r6
   b96e0:	4964      	ldr	r1, [pc, #400]	; (b9874 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b96e2:	f8df 9194 	ldr.w	r9, [pc, #404]	; b9878 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   b96e6:	f8df 818c 	ldr.w	r8, [pc, #396]	; b9874 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b96ea:	f8df a190 	ldr.w	sl, [pc, #400]	; b987c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   b96ee:	aa0c      	add	r2, sp, #48	; 0x30
   b96f0:	2001      	movs	r0, #1
   b96f2:	f7fd fda1 	bl	b7238 <log_message>
        for (size_t i = 0; i < event->count; i++) {
   b96f6:	682b      	ldr	r3, [r5, #0]
   b96f8:	42b3      	cmp	r3, r6
   b96fa:	f240 80b5 	bls.w	b9868 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   b96fe:	a803      	add	r0, sp, #12
   b9700:	f7fe fa6c 	bl	b7bdc <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   b9704:	a805      	add	r0, sp, #20
   b9706:	f7fe fb29 	bl	b7d5c <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b970a:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b970e:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   b9710:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   b9712:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b9716:	445b      	add	r3, fp
        this->size = halHandles.size;
   b9718:	8bd9      	ldrh	r1, [r3, #30]
   b971a:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   b971c:	8c19      	ldrh	r1, [r3, #32]
   b971e:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   b9720:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   b9722:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   b9724:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   b9726:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   b9728:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   b972a:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   b972c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   b972e:	8253      	strh	r3, [r2, #18]
   b9730:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   b9734:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   b9738:	429a      	cmp	r2, r3
   b973a:	d07d      	beq.n	b9838 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   b973c:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   b973e:	8ac4      	ldrh	r4, [r0, #22]
   b9740:	428c      	cmp	r4, r1
   b9742:	d377      	bcc.n	b9834 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   b9744:	8a84      	ldrh	r4, [r0, #20]
   b9746:	428c      	cmp	r4, r1
   b9748:	d874      	bhi.n	b9834 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b974a:	6859      	ldr	r1, [r3, #4]
   b974c:	9005      	str	r0, [sp, #20]
   b974e:	a806      	add	r0, sp, #24
   b9750:	f7fd ffc8 	bl	b76e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   b9754:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   b9758:	f8dd e00c 	ldr.w	lr, [sp, #12]
   b975c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9760:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   b9764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9766:	f8dc 3000 	ldr.w	r3, [ip]
   b976a:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   b976c:	892b      	ldrh	r3, [r5, #8]
   b976e:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   b9772:	686b      	ldr	r3, [r5, #4]
   b9774:	9c03      	ldr	r4, [sp, #12]
   b9776:	445b      	add	r3, fp
   b9778:	7e5b      	ldrb	r3, [r3, #25]
   b977a:	f013 0f02 	tst.w	r3, #2
   b977e:	d16e      	bne.n	b985e <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   b9780:	686b      	ldr	r3, [r5, #4]
   b9782:	445b      	add	r3, fp
   b9784:	7e5b      	ldrb	r3, [r3, #25]
   b9786:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   b9788:	bf42      	ittt	mi
   b978a:	7923      	ldrbmi	r3, [r4, #4]
   b978c:	f043 0304 	orrmi.w	r3, r3, #4
   b9790:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   b9792:	686b      	ldr	r3, [r5, #4]
   b9794:	445b      	add	r3, fp
   b9796:	7e5b      	ldrb	r3, [r3, #25]
   b9798:	0719      	lsls	r1, r3, #28
   b979a:	bf42      	ittt	mi
   b979c:	7923      	ldrbmi	r3, [r4, #4]
   b979e:	f043 0308 	orrmi.w	r3, r3, #8
   b97a2:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   b97a4:	686b      	ldr	r3, [r5, #4]
   b97a6:	445b      	add	r3, fp
   b97a8:	7e5b      	ldrb	r3, [r3, #25]
   b97aa:	06da      	lsls	r2, r3, #27
   b97ac:	bf42      	ittt	mi
   b97ae:	7923      	ldrbmi	r3, [r4, #4]
   b97b0:	f043 0310 	orrmi.w	r3, r3, #16
   b97b4:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   b97b6:	686b      	ldr	r3, [r5, #4]
   b97b8:	445b      	add	r3, fp
   b97ba:	aa07      	add	r2, sp, #28
   b97bc:	7e5b      	ldrb	r3, [r3, #25]
   b97be:	069b      	lsls	r3, r3, #26
   b97c0:	bf42      	ittt	mi
   b97c2:	7923      	ldrbmi	r3, [r4, #4]
   b97c4:	f043 0320 	orrmi.w	r3, r3, #32
   b97c8:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   b97ca:	686b      	ldr	r3, [r5, #4]
   b97cc:	449b      	add	fp, r3
   b97ce:	f10b 0304 	add.w	r3, fp, #4
   b97d2:	4696      	mov	lr, r2
   b97d4:	f10b 0b14 	add.w	fp, fp, #20
   b97d8:	6818      	ldr	r0, [r3, #0]
   b97da:	6859      	ldr	r1, [r3, #4]
   b97dc:	4694      	mov	ip, r2
   b97de:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b97e2:	3308      	adds	r3, #8
   b97e4:	455b      	cmp	r3, fp
   b97e6:	4662      	mov	r2, ip
   b97e8:	d1f6      	bne.n	b97d8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   b97ea:	6818      	ldr	r0, [r3, #0]
   b97ec:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   b97f0:	4671      	mov	r1, lr
   b97f2:	a80c      	add	r0, sp, #48	; 0x30
   b97f4:	f7fd fff2 	bl	b77dc <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b97f8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   b97fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9800:	3414      	adds	r4, #20
   b9802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9804:	f8dc 3000 	ldr.w	r3, [ip]
   b9808:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   b980a:	a903      	add	r1, sp, #12
   b980c:	a80c      	add	r0, sp, #48	; 0x30
   b980e:	f7fe fc98 	bl	b8142 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9812:	a90c      	add	r1, sp, #48	; 0x30
   b9814:	f107 0018 	add.w	r0, r7, #24
   b9818:	f7ff fdb1 	bl	b937e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b981c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b981e:	a80d      	add	r0, sp, #52	; 0x34
   b9820:	f7fe fcb1 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9824:	b99c      	cbnz	r4, b984e <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b9826:	2320      	movs	r3, #32
   b9828:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   b982c:	f8cd a000 	str.w	sl, [sp]
   b9830:	4623      	mov	r3, r4
   b9832:	e007      	b.n	b9844 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   b9834:	3308      	adds	r3, #8
   b9836:	e77f      	b.n	b9738 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b9838:	2420      	movs	r4, #32
   b983a:	2300      	movs	r3, #0
   b983c:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   b9840:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b9844:	aa0c      	add	r2, sp, #48	; 0x30
   b9846:	4641      	mov	r1, r8
   b9848:	2032      	movs	r0, #50	; 0x32
   b984a:	f7fd fcf5 	bl	b7238 <log_message>
   b984e:	a806      	add	r0, sp, #24
   b9850:	f7fe fc99 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9854:	a804      	add	r0, sp, #16
   b9856:	f7fe fc96 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b985a:	3601      	adds	r6, #1
   b985c:	e74b      	b.n	b96f6 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   b985e:	7923      	ldrb	r3, [r4, #4]
   b9860:	f043 0302 	orr.w	r3, r3, #2
   b9864:	7123      	strb	r3, [r4, #4]
   b9866:	e78b      	b.n	b9780 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   b9868:	b015      	add	sp, #84	; 0x54
   b986a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b986e:	bf00      	nop
   b9870:	000be53d 	.word	0x000be53d
   b9874:	000be3af 	.word	0x000be3af
   b9878:	000be558 	.word	0x000be558
   b987c:	000be587 	.word	0x000be587

000b9880 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9880:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9884:	4604      	mov	r4, r0
   b9886:	460d      	mov	r5, r1
   b9888:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b988a:	d914      	bls.n	b98b6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b988c:	4290      	cmp	r0, r2
   b988e:	d213      	bcs.n	b98b8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b9890:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b9894:	1a75      	subs	r5, r6, r1
   b9896:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b989a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b989c:	42b7      	cmp	r7, r6
   b989e:	d018      	beq.n	b98d2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b98a0:	b11c      	cbz	r4, b98aa <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b98a2:	4631      	mov	r1, r6
   b98a4:	4620      	mov	r0, r4
   b98a6:	f7fe feb5 	bl	b8614 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   b98aa:	4630      	mov	r0, r6
   b98ac:	f7fe fb8c 	bl	b7fc8 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   b98b0:	3e24      	subs	r6, #36	; 0x24
   b98b2:	3c24      	subs	r4, #36	; 0x24
   b98b4:	e7f2      	b.n	b989c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b98b6:	d00c      	beq.n	b98d2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b98b8:	42b5      	cmp	r5, r6
   b98ba:	d00a      	beq.n	b98d2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b98bc:	b11c      	cbz	r4, b98c6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b98be:	4629      	mov	r1, r5
   b98c0:	4620      	mov	r0, r4
   b98c2:	f7fe fea7 	bl	b8614 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   b98c6:	4628      	mov	r0, r5
   b98c8:	f7fe fb7e 	bl	b7fc8 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   b98cc:	3524      	adds	r5, #36	; 0x24
   b98ce:	3424      	adds	r4, #36	; 0x24
   b98d0:	e7f2      	b.n	b98b8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b98d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b98d4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b98d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b98d6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b98d8:	4605      	mov	r5, r0
        if (n > 0) {
   b98da:	dd13      	ble.n	b9904 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b98dc:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   b98de:	fb07 f006 	mul.w	r0, r7, r6
   b98e2:	f7fd fd85 	bl	b73f0 <malloc>
            if (!d) {
   b98e6:	4604      	mov	r4, r0
   b98e8:	b158      	cbz	r0, b9902 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b98ea:	e9d5 1200 	ldrd	r1, r2, [r5]
   b98ee:	fb07 1202 	mla	r2, r7, r2, r1
   b98f2:	f7ff ffc5 	bl	b9880 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b98f6:	6828      	ldr	r0, [r5, #0]
   b98f8:	f7fd fd82 	bl	b7400 <free>
        data_ = d;
   b98fc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b98fe:	60ae      	str	r6, [r5, #8]
        return true;
   b9900:	2001      	movs	r0, #1
    }
   b9902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b9904:	2400      	movs	r4, #0
   b9906:	e7f6      	b.n	b98f6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000b9908 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   b9908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b990c:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   b990e:	ad01      	add	r5, sp, #4
   b9910:	4606      	mov	r6, r0
   b9912:	4628      	mov	r0, r5
   b9914:	460c      	mov	r4, r1
   b9916:	f7fd ff46 	bl	b77a6 <_ZN8particle10BleAddressC1Ev>
   b991a:	a803      	add	r0, sp, #12
   b991c:	f7fe ff55 	bl	b87ca <_ZN8particle18BleAdvertisingDataC1Ev>
   b9920:	a806      	add	r0, sp, #24
   b9922:	f7fe ff52 	bl	b87ca <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   b9926:	6930      	ldr	r0, [r6, #16]
   b9928:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   b992a:	89f2      	ldrh	r2, [r6, #14]
   b992c:	ab13      	add	r3, sp, #76	; 0x4c
   b992e:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   b9930:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   b9934:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   b9936:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   b9938:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   b993c:	a806      	add	r0, sp, #24
   b993e:	f7fe feb8 	bl	b86b2 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   b9942:	89b2      	ldrh	r2, [r6, #12]
   b9944:	6871      	ldr	r1, [r6, #4]
   b9946:	a803      	add	r0, sp, #12
   b9948:	f7fe feb3 	bl	b86b2 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   b994c:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b9950:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   b9952:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b9954:	d003      	beq.n	b995e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   b9956:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b995a:	429a      	cmp	r2, r3
   b995c:	db5c      	blt.n	b9a18 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   b995e:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   b9962:	2b7f      	cmp	r3, #127	; 0x7f
   b9964:	d003      	beq.n	b996e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   b9966:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b996a:	429a      	cmp	r2, r3
   b996c:	dc54      	bgt.n	b9a18 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   b996e:	f104 0150 	add.w	r1, r4, #80	; 0x50
   b9972:	4638      	mov	r0, r7
   b9974:	f7fe fd16 	bl	b83a4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   b9978:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   b997a:	2b00      	cmp	r3, #0
   b997c:	dd52      	ble.n	b9a24 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   b997e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   b9980:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   b9984:	45b1      	cmp	r9, r6
   b9986:	d050      	beq.n	b9a2a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   b9988:	4630      	mov	r0, r6
   b998a:	4629      	mov	r1, r5
   b998c:	f7fd fef7 	bl	b777e <_ZNK8particle10BleAddresseqERKS0_>
   b9990:	3608      	adds	r6, #8
   b9992:	4680      	mov	r8, r0
   b9994:	2800      	cmp	r0, #0
   b9996:	d0f5      	beq.n	b9984 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   b9998:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b999a:	f7fd fd31 	bl	b7400 <free>
        if (!delegator->filterByRssi(result) ||
   b999e:	f1b8 0f00 	cmp.w	r8, #0
   b99a2:	d039      	beq.n	b9a18 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   b99a4:	4629      	mov	r1, r5
   b99a6:	4620      	mov	r0, r4
   b99a8:	f7fe fcbf 	bl	b832a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   b99ac:	b3a0      	cbz	r0, b9a18 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   b99ae:	4629      	mov	r1, r5
   b99b0:	4620      	mov	r0, r4
   b99b2:	f7ff fa68 	bl	b8e86 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   b99b6:	4606      	mov	r6, r0
   b99b8:	b370      	cbz	r0, b9a18 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   b99ba:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   b99be:	4638      	mov	r0, r7
   b99c0:	f7fe fd3b 	bl	b843a <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   b99c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b99c6:	2b00      	cmp	r3, #0
   b99c8:	dd12      	ble.n	b99f0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   b99ca:	a806      	add	r0, sp, #24
   b99cc:	f7fe f8b3 	bl	b7b36 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   b99d0:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   b99d2:	a803      	add	r0, sp, #12
   b99d4:	f7fe f8af 	bl	b7b36 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   b99d8:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   b99dc:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   b99e0:	429a      	cmp	r2, r3
   b99e2:	d025      	beq.n	b9a30 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   b99e4:	f833 1b02 	ldrh.w	r1, [r3], #2
   b99e8:	4588      	cmp	r8, r1
   b99ea:	d001      	beq.n	b99f0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   b99ec:	4288      	cmp	r0, r1
   b99ee:	d1f7      	bne.n	b99e0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   b99f0:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b99f2:	f7fd fd05 	bl	b7400 <free>
              !delegator->filterByServiceUUID(result) ||
   b99f6:	b17e      	cbz	r6, b9a18 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   b99f8:	4629      	mov	r1, r5
   b99fa:	4620      	mov	r0, r4
   b99fc:	f7fe fd52 	bl	b84a4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   b9a00:	b150      	cbz	r0, b9a18 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   b9a02:	6a23      	ldr	r3, [r4, #32]
   b9a04:	b1b3      	cbz	r3, b9a34 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   b9a06:	6963      	ldr	r3, [r4, #20]
   b9a08:	9513      	str	r5, [sp, #76]	; 0x4c
   b9a0a:	3301      	adds	r3, #1
   b9a0c:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9a0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9a10:	4639      	mov	r1, r7
   b9a12:	f104 0018 	add.w	r0, r4, #24
   b9a16:	4798      	blx	r3
            return;
   b9a18:	4628      	mov	r0, r5
   b9a1a:	f7fe fad5 	bl	b7fc8 <_ZN8particle13BleScanResultD1Ev>
    }
   b9a1e:	b01d      	add	sp, #116	; 0x74
   b9a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   b9a24:	f04f 0801 	mov.w	r8, #1
   b9a28:	e7b6      	b.n	b9998 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b9a2a:	f04f 0800 	mov.w	r8, #0
   b9a2e:	e7b3      	b.n	b9998 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b9a30:	2600      	movs	r6, #0
   b9a32:	e7dd      	b.n	b99f0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   b9a34:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   b9a38:	f1b8 0f00 	cmp.w	r8, #0
   b9a3c:	d007      	beq.n	b9a4e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   b9a3e:	6963      	ldr	r3, [r4, #20]
   b9a40:	3301      	adds	r3, #1
   b9a42:	6163      	str	r3, [r4, #20]
   b9a44:	4629      	mov	r1, r5
   b9a46:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9a48:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b9a4c:	e7e3      	b.n	b9a16 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   b9a4e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   b9a52:	f1bc 0f00 	cmp.w	ip, #0
   b9a56:	d025      	beq.n	b9aa4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   b9a58:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b9a5a:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   b9a5c:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b9a5e:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   b9a60:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b9a62:	d8d9      	bhi.n	b9a18 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b9a64:	2224      	movs	r2, #36	; 0x24
   b9a66:	4353      	muls	r3, r2
    address_ = addr.address_;
   b9a68:	462a      	mov	r2, r5
   b9a6a:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b9a6c:	3b24      	subs	r3, #36	; 0x24
   b9a6e:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   b9a72:	f84c 0003 	str.w	r0, [ip, r3]
   b9a76:	6071      	str	r1, [r6, #4]
class BleScanResult {
   b9a78:	f106 0008 	add.w	r0, r6, #8
   b9a7c:	a903      	add	r1, sp, #12
   b9a7e:	f7fe fde0 	bl	b8642 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b9a82:	a906      	add	r1, sp, #24
   b9a84:	f106 0014 	add.w	r0, r6, #20
   b9a88:	f7fe fddb 	bl	b8642 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b9a8c:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b9a90:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b9a94:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b9a98:	429a      	cmp	r2, r3
   b9a9a:	d3bd      	bcc.n	b9a18 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   b9a9c:	4640      	mov	r0, r8
   b9a9e:	f7fd f96f 	bl	b6d80 <hal_ble_gap_stop_scan>
   b9aa2:	e7b9      	b.n	b9a18 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   b9aa4:	e895 0003 	ldmia.w	r5, {r0, r1}
   b9aa8:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   b9aac:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   b9ab0:	a903      	add	r1, sp, #12
   b9ab2:	a80c      	add	r0, sp, #48	; 0x30
   b9ab4:	f7fe fd91 	bl	b85da <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b9ab8:	a906      	add	r1, sp, #24
   b9aba:	a80f      	add	r0, sp, #60	; 0x3c
   b9abc:	f7fe fd8d 	bl	b85da <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b9ac0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b9ac4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   b9ac8:	4641      	mov	r1, r8
   b9aca:	4638      	mov	r0, r7
   b9acc:	6866      	ldr	r6, [r4, #4]
   b9ace:	f7fe fda1 	bl	b8614 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9ad2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b9ad6:	4299      	cmp	r1, r3
   b9ad8:	da10      	bge.n	b9afc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   b9ada:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9adc:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b9ade:	2224      	movs	r2, #36	; 0x24
   b9ae0:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b9ae4:	f106 0024 	add.w	r0, r6, #36	; 0x24
   b9ae8:	fb02 3201 	mla	r2, r2, r1, r3
   b9aec:	4631      	mov	r1, r6
   b9aee:	f7ff fec7 	bl	b9880 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9af2:	b986      	cbnz	r6, b9b16 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   b9af4:	6863      	ldr	r3, [r4, #4]
   b9af6:	3301      	adds	r3, #1
   b9af8:	6063      	str	r3, [r4, #4]
    return true;
   b9afa:	e005      	b.n	b9b08 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9afc:	3101      	adds	r1, #1
   b9afe:	4620      	mov	r0, r4
   b9b00:	f7ff fee8 	bl	b98d4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9b04:	2800      	cmp	r0, #0
   b9b06:	d1e8      	bne.n	b9ada <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   b9b08:	4638      	mov	r0, r7
   b9b0a:	f7fe fa5d 	bl	b7fc8 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   b9b0e:	4640      	mov	r0, r8
   b9b10:	f7fe fa5a 	bl	b7fc8 <_ZN8particle13BleScanResultD1Ev>
   b9b14:	e780      	b.n	b9a18 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   b9b16:	4639      	mov	r1, r7
   b9b18:	4630      	mov	r0, r6
   b9b1a:	f7fe fd7b 	bl	b8614 <_ZN8particle13BleScanResultC1EOS0_>
   b9b1e:	e7e9      	b.n	b9af4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000b9b20 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b9b20:	4802      	ldr	r0, [pc, #8]	; (b9b2c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b9b22:	2300      	movs	r3, #0
   b9b24:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b9b26:	f7fd b9e7 	b.w	b6ef8 <os_mutex_recursive_create>
   b9b2a:	bf00      	nop
   b9b2c:	2003e654 	.word	0x2003e654

000b9b30 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b9b30:	2200      	movs	r2, #0
   b9b32:	6840      	ldr	r0, [r0, #4]
   b9b34:	4611      	mov	r1, r2
   b9b36:	f7fd bc13 	b.w	b7360 <network_ready>

000b9b3a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b9b3a:	2200      	movs	r2, #0
   b9b3c:	6840      	ldr	r0, [r0, #4]
   b9b3e:	4611      	mov	r1, r2
   b9b40:	f7fd bc2e 	b.w	b73a0 <network_listening>

000b9b44 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9b44:	2200      	movs	r2, #0
   b9b46:	6840      	ldr	r0, [r0, #4]
   b9b48:	4611      	mov	r1, r2
   b9b4a:	f7fd bc39 	b.w	b73c0 <network_get_listen_timeout>

000b9b4e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9b4e:	6840      	ldr	r0, [r0, #4]
   b9b50:	2200      	movs	r2, #0
   b9b52:	f7fd bc2d 	b.w	b73b0 <network_set_listen_timeout>

000b9b56 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9b56:	6840      	ldr	r0, [r0, #4]
   b9b58:	2200      	movs	r2, #0
   b9b5a:	f081 0101 	eor.w	r1, r1, #1
   b9b5e:	f7fd bc17 	b.w	b7390 <network_listen>

000b9b62 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9b62:	2300      	movs	r3, #0
   b9b64:	6840      	ldr	r0, [r0, #4]
   b9b66:	461a      	mov	r2, r3
   b9b68:	4619      	mov	r1, r3
   b9b6a:	f7fd bc09 	b.w	b7380 <network_off>

000b9b6e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9b6e:	2300      	movs	r3, #0
   b9b70:	6840      	ldr	r0, [r0, #4]
   b9b72:	461a      	mov	r2, r3
   b9b74:	4619      	mov	r1, r3
   b9b76:	f7fd bbfb 	b.w	b7370 <network_on>

000b9b7a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9b7a:	2200      	movs	r2, #0
   b9b7c:	6840      	ldr	r0, [r0, #4]
   b9b7e:	4611      	mov	r1, r2
   b9b80:	f7fd bbde 	b.w	b7340 <network_connecting>

000b9b84 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9b84:	6840      	ldr	r0, [r0, #4]
   b9b86:	2200      	movs	r2, #0
   b9b88:	2102      	movs	r1, #2
   b9b8a:	f7fd bbe1 	b.w	b7350 <network_disconnect>

000b9b8e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9b8e:	2300      	movs	r3, #0
   b9b90:	6840      	ldr	r0, [r0, #4]
   b9b92:	461a      	mov	r2, r3
   b9b94:	f7fd bbcc 	b.w	b7330 <network_connect>

000b9b98 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b9b98:	4b08      	ldr	r3, [pc, #32]	; (b9bbc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b9b9a:	b510      	push	{r4, lr}
   b9b9c:	2428      	movs	r4, #40	; 0x28
   b9b9e:	4622      	mov	r2, r4
   b9ba0:	4618      	mov	r0, r3
   b9ba2:	2100      	movs	r1, #0
   b9ba4:	f002 f88f 	bl	bbcc6 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b9ba8:	4b05      	ldr	r3, [pc, #20]	; (b9bc0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b9baa:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b9bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9bb0:	6042      	str	r2, [r0, #4]
   b9bb2:	2204      	movs	r2, #4
   b9bb4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b9bb6:	4a03      	ldr	r2, [pc, #12]	; (b9bc4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b9bb8:	601a      	str	r2, [r3, #0]
   b9bba:	bd10      	pop	{r4, pc}
   b9bbc:	2003e664 	.word	0x2003e664
   b9bc0:	2003e65c 	.word	0x2003e65c
   b9bc4:	000be630 	.word	0x000be630

000b9bc8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b9bc8:	4770      	bx	lr

000b9bca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b9bca:	2000      	movs	r0, #0
   b9bcc:	4770      	bx	lr

000b9bce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b9bce:	b510      	push	{r4, lr}
   b9bd0:	2110      	movs	r1, #16
   b9bd2:	4604      	mov	r4, r0
   b9bd4:	f7fa fa63 	bl	b409e <_ZdlPvj>
   b9bd8:	4620      	mov	r0, r4
   b9bda:	bd10      	pop	{r4, pc}

000b9bdc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b9bdc:	b508      	push	{r3, lr}
      { delete this; }
   b9bde:	f7ff fff6 	bl	b9bce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b9be2:	bd08      	pop	{r3, pc}

000b9be4 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b9be4:	b530      	push	{r4, r5, lr}
        type_(type) {
   b9be6:	2200      	movs	r2, #0
   b9be8:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b9bec:	6002      	str	r2, [r0, #0]
   b9bee:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9bf0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b9bf2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9bf4:	680c      	ldr	r4, [r1, #0]
   b9bf6:	8085      	strh	r5, [r0, #4]
   b9bf8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b9bfa:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b9bfc:	bd30      	pop	{r4, r5, pc}

000b9bfe <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b9bfe:	b510      	push	{r4, lr}
   b9c00:	4604      	mov	r4, r0
    free((void*)msg_);
   b9c02:	6800      	ldr	r0, [r0, #0]
   b9c04:	f7fd fbfc 	bl	b7400 <free>
}
   b9c08:	4620      	mov	r0, r4
   b9c0a:	bd10      	pop	{r4, pc}

000b9c0c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b9c0c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b9c0e:	68c4      	ldr	r4, [r0, #12]
   b9c10:	b1f4      	cbz	r4, b9c50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b9c12:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b9c14:	2b02      	cmp	r3, #2
   b9c16:	d103      	bne.n	b9c20 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b9c18:	f104 000c 	add.w	r0, r4, #12
   b9c1c:	f7ff ffef 	bl	b9bfe <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b9c20:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b9c22:	b135      	cbz	r5, b9c32 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b9c24:	4628      	mov	r0, r5
   b9c26:	f7fa fb39 	bl	b429c <_ZNSt14_Function_baseD1Ev>
   b9c2a:	2110      	movs	r1, #16
   b9c2c:	4628      	mov	r0, r5
   b9c2e:	f7fa fa36 	bl	b409e <_ZdlPvj>
   b9c32:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b9c34:	b135      	cbz	r5, b9c44 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b9c36:	4628      	mov	r0, r5
   b9c38:	f7fa fb30 	bl	b429c <_ZNSt14_Function_baseD1Ev>
   b9c3c:	2110      	movs	r1, #16
   b9c3e:	4628      	mov	r0, r5
   b9c40:	f7fa fa2d 	bl	b409e <_ZdlPvj>
   b9c44:	4620      	mov	r0, r4
   b9c46:	2114      	movs	r1, #20
   b9c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9c4c:	f7fa ba27 	b.w	b409e <_ZdlPvj>
   b9c50:	bd38      	pop	{r3, r4, r5, pc}

000b9c52 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9c52:	680b      	ldr	r3, [r1, #0]
   b9c54:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b9c56:	684b      	ldr	r3, [r1, #4]
   b9c58:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b9c5a:	b113      	cbz	r3, b9c62 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b9c5c:	685a      	ldr	r2, [r3, #4]
   b9c5e:	3201      	adds	r2, #1
   b9c60:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9c62:	4770      	bx	lr

000b9c64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b9c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9c66:	4604      	mov	r4, r0
   b9c68:	4668      	mov	r0, sp
   b9c6a:	460d      	mov	r5, r1
   b9c6c:	f7ff fff1 	bl	b9c52 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b9c70:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b9c72:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b9c74:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b9c76:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b9c78:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b9c7a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b9c7c:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b9c7e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b9c80:	f7fe fa81 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b9c84:	b135      	cbz	r5, b9c94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b9c86:	1d28      	adds	r0, r5, #4
   b9c88:	f7fe fa7d 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9c8c:	2108      	movs	r1, #8
   b9c8e:	4628      	mov	r0, r5
   b9c90:	f7fa fa05 	bl	b409e <_ZdlPvj>
        return p;
    }
   b9c94:	4620      	mov	r0, r4
   b9c96:	b003      	add	sp, #12
   b9c98:	bd30      	pop	{r4, r5, pc}

000b9c9a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b9c9a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b9c9c:	b510      	push	{r4, lr}
      if (_M_empty())
   b9c9e:	b90a      	cbnz	r2, b9ca4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b9ca0:	f001 f9ab 	bl	baffa <_ZSt25__throw_bad_function_callv>
    }
   b9ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9ca8:	68c3      	ldr	r3, [r0, #12]
   b9caa:	4718      	bx	r3

000b9cac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b9cac:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b9cae:	6800      	ldr	r0, [r0, #0]
   b9cb0:	f100 0110 	add.w	r1, r0, #16
   b9cb4:	f7ff fff1 	bl	b9c9a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b9cb8:	bd08      	pop	{r3, pc}

000b9cba <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b9cba:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b9cbc:	b510      	push	{r4, lr}
      if (_M_empty())
   b9cbe:	b90a      	cbnz	r2, b9cc4 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b9cc0:	f001 f99b 	bl	baffa <_ZSt25__throw_bad_function_callv>
    }
   b9cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9cc8:	68c3      	ldr	r3, [r0, #12]
   b9cca:	4718      	bx	r3

000b9ccc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b9ccc:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b9cce:	6800      	ldr	r0, [r0, #0]
   b9cd0:	f100 0110 	add.w	r1, r0, #16
   b9cd4:	f7ff fff1 	bl	b9cba <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b9cd8:	bd08      	pop	{r3, pc}
	...

000b9cdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b9cdc:	b538      	push	{r3, r4, r5, lr}
   b9cde:	2300      	movs	r3, #0
   b9ce0:	4604      	mov	r4, r0
   b9ce2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b9ce4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b9ce6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b9ce8:	f7fa f9d5 	bl	b4096 <_Znwj>
   b9cec:	b128      	cbz	r0, b9cfa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b9cee:	2301      	movs	r3, #1
   b9cf0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b9cf4:	4b02      	ldr	r3, [pc, #8]	; (b9d00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b9cf6:	6003      	str	r3, [r0, #0]
   b9cf8:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b9cfa:	6020      	str	r0, [r4, #0]
	}
   b9cfc:	4620      	mov	r0, r4
   b9cfe:	bd38      	pop	{r3, r4, r5, pc}
   b9d00:	000be66c 	.word	0x000be66c

000b9d04 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b9d04:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b9d06:	2300      	movs	r3, #0
   b9d08:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b9d0a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b9d0c:	4604      	mov	r4, r0
   b9d0e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b9d10:	b12b      	cbz	r3, b9d1e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b9d12:	2202      	movs	r2, #2
   b9d14:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b9d16:	68eb      	ldr	r3, [r5, #12]
   b9d18:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b9d1a:	68ab      	ldr	r3, [r5, #8]
   b9d1c:	60a3      	str	r3, [r4, #8]
    }
   b9d1e:	4620      	mov	r0, r4
   b9d20:	bd38      	pop	{r3, r4, r5, pc}
	...

000b9d24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b9d24:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9d26:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b9d28:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b9d2a:	4668      	mov	r0, sp
   b9d2c:	f7ff ff5a 	bl	b9be4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b9d30:	f04f 0302 	mov.w	r3, #2
   b9d34:	e8d4 2f4f 	ldrexb	r2, [r4]
   b9d38:	2a00      	cmp	r2, #0
   b9d3a:	d103      	bne.n	b9d44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b9d3c:	e8c4 3f41 	strexb	r1, r3, [r4]
   b9d40:	2900      	cmp	r1, #0
   b9d42:	d1f7      	bne.n	b9d34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b9d44:	d125      	bne.n	b9d92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b9d46:	f104 050c 	add.w	r5, r4, #12
   b9d4a:	4669      	mov	r1, sp
   b9d4c:	4628      	mov	r0, r5
   b9d4e:	f7ff ff49 	bl	b9be4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b9d52:	f3bf 8f5b 	dmb	ish
   b9d56:	2301      	movs	r3, #1
   b9d58:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b9d5a:	2000      	movs	r0, #0
   b9d5c:	f104 0308 	add.w	r3, r4, #8
   b9d60:	f3bf 8f5b 	dmb	ish
   b9d64:	e853 6f00 	ldrex	r6, [r3]
   b9d68:	e843 0200 	strex	r2, r0, [r3]
   b9d6c:	2a00      	cmp	r2, #0
   b9d6e:	d1f9      	bne.n	b9d64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b9d70:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b9d74:	b16e      	cbz	r6, b9d92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b9d76:	f7fd fa7f 	bl	b7278 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b9d7a:	b178      	cbz	r0, b9d9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b9d7c:	4629      	mov	r1, r5
   b9d7e:	4630      	mov	r0, r6
   b9d80:	f7ff ff8b 	bl	b9c9a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b9d84:	4630      	mov	r0, r6
   b9d86:	f7fa fa89 	bl	b429c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b9d8a:	2110      	movs	r1, #16
   b9d8c:	4630      	mov	r0, r6
   b9d8e:	f7fa f986 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b9d92:	4668      	mov	r0, sp
   b9d94:	f7ff ff33 	bl	b9bfe <_ZN8particle5ErrorD1Ev>
    }
   b9d98:	b009      	add	sp, #36	; 0x24
   b9d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b9d9c:	4631      	mov	r1, r6
   b9d9e:	a802      	add	r0, sp, #8
   b9da0:	f7ff ffb0 	bl	b9d04 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b9da4:	68e0      	ldr	r0, [r4, #12]
   b9da6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b9daa:	b108      	cbz	r0, b9db0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b9dac:	f001 ffe4 	bl	bbd78 <strdup>
        type_(type) {
   b9db0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b9db2:	2010      	movs	r0, #16
   b9db4:	f8ad 501c 	strh.w	r5, [sp, #28]
   b9db8:	f7fa f96d 	bl	b4096 <_Znwj>
   b9dbc:	4605      	mov	r5, r0
   b9dbe:	b1e8      	cbz	r0, b9dfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b9dc0:	2700      	movs	r7, #0
   b9dc2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9dc4:	2018      	movs	r0, #24
   b9dc6:	f7fa f966 	bl	b4096 <_Znwj>
   b9dca:	4604      	mov	r4, r0
   b9dcc:	b188      	cbz	r0, b9df2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b9dce:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b9dd0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b9dd2:	a802      	add	r0, sp, #8
   b9dd4:	f7ff f8b0 	bl	b8f38 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9dd8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b9dda:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9ddc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9dde:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b9de0:	9204      	str	r2, [sp, #16]
   b9de2:	a906      	add	r1, sp, #24
   b9de4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b9de6:	60e3      	str	r3, [r4, #12]
   b9de8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b9dec:	9205      	str	r2, [sp, #20]
   b9dee:	f7ff fef9 	bl	b9be4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b9df2:	4b08      	ldr	r3, [pc, #32]	; (b9e14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b9df4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b9df6:	4b08      	ldr	r3, [pc, #32]	; (b9e18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9df8:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b9dfa:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b9dfc:	a806      	add	r0, sp, #24
   b9dfe:	f7ff fefe 	bl	b9bfe <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b9e02:	a802      	add	r0, sp, #8
   b9e04:	f7fa fa4a 	bl	b429c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b9e08:	2200      	movs	r2, #0
   b9e0a:	4629      	mov	r1, r5
   b9e0c:	4803      	ldr	r0, [pc, #12]	; (b9e1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b9e0e:	f7fd fa3b 	bl	b7288 <application_thread_invoke>
   b9e12:	e7b7      	b.n	b9d84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b9e14:	000b9cad 	.word	0x000b9cad
   b9e18:	000b9f31 	.word	0x000b9f31
   b9e1c:	000b74c7 	.word	0x000b74c7

000b9e20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b9e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9e24:	b08b      	sub	sp, #44	; 0x2c
   b9e26:	4605      	mov	r5, r0
   b9e28:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b9e2c:	460f      	mov	r7, r1
   b9e2e:	4690      	mov	r8, r2
   b9e30:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b9e32:	f7fd fa55 	bl	b72e0 <spark_cloud_flag_connected>
   b9e36:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b9e38:	4683      	mov	fp, r0
   b9e3a:	bb38      	cbnz	r0, b9e8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b9e3c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b9e40:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b9e42:	a905      	add	r1, sp, #20
   b9e44:	4630      	mov	r0, r6
   b9e46:	f8ad 3018 	strh.w	r3, [sp, #24]
   b9e4a:	f7ff fecb 	bl	b9be4 <_ZN8particle5ErrorC1EOS0_>
   b9e4e:	2014      	movs	r0, #20
   b9e50:	f7fa f921 	bl	b4096 <_Znwj>
   b9e54:	4604      	mov	r4, r0
   b9e56:	b148      	cbz	r0, b9e6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b9e58:	2302      	movs	r3, #2
   b9e5a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b9e5c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b9e5e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b9e62:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b9e64:	4631      	mov	r1, r6
   b9e66:	300c      	adds	r0, #12
   b9e68:	f7ff febc 	bl	b9be4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b9e6c:	4628      	mov	r0, r5
	: __shared_count(__p)
   b9e6e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b9e70:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b9e74:	f7ff ff32 	bl	b9cdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b9e78:	4630      	mov	r0, r6
   b9e7a:	f7ff fec0 	bl	b9bfe <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b9e7e:	a805      	add	r0, sp, #20
   b9e80:	f7ff febd 	bl	b9bfe <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b9e84:	4628      	mov	r0, r5
   b9e86:	b00b      	add	sp, #44	; 0x2c
   b9e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b9e8c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b9e8e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b9e90:	2014      	movs	r0, #20
   b9e92:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b9e96:	9307      	str	r3, [sp, #28]
   b9e98:	f7fa f8fd 	bl	b4096 <_Znwj>
   b9e9c:	4601      	mov	r1, r0
   b9e9e:	b118      	cbz	r0, b9ea8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b9ea0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b9ea4:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b9ea6:	7044      	strb	r4, [r0, #1]
   b9ea8:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b9eaa:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b9eac:	f7ff ff16 	bl	b9cdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b9eb0:	4b1e      	ldr	r3, [pc, #120]	; (b9f2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b9eb2:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b9eb4:	2008      	movs	r0, #8
   b9eb6:	f7fa f8ee 	bl	b4096 <_Znwj>
   b9eba:	4604      	mov	r4, r0
   b9ebc:	b110      	cbz	r0, b9ec4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b9ebe:	a903      	add	r1, sp, #12
   b9ec0:	f7ff fec7 	bl	b9c52 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b9ec4:	9600      	str	r6, [sp, #0]
   b9ec6:	fa5f f38a 	uxtb.w	r3, sl
   b9eca:	464a      	mov	r2, r9
   b9ecc:	4641      	mov	r1, r8
   b9ece:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b9ed0:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b9ed2:	f7fd fa0d 	bl	b72f0 <spark_send_event>
   b9ed6:	b9b8      	cbnz	r0, b9f08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b9ed8:	9b03      	ldr	r3, [sp, #12]
   b9eda:	785b      	ldrb	r3, [r3, #1]
   b9edc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b9ee0:	b993      	cbnz	r3, b9f08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b9ee2:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b9ee6:	a905      	add	r1, sp, #20
   b9ee8:	a803      	add	r0, sp, #12
   b9eea:	9205      	str	r2, [sp, #20]
   b9eec:	f8ad 3018 	strh.w	r3, [sp, #24]
   b9ef0:	f7ff ff18 	bl	b9d24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b9ef4:	a805      	add	r0, sp, #20
   b9ef6:	f7ff fe82 	bl	b9bfe <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b9efa:	a805      	add	r0, sp, #20
   b9efc:	9909      	ldr	r1, [sp, #36]	; 0x24
   b9efe:	f7ff feb1 	bl	b9c64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b9f02:	a806      	add	r0, sp, #24
   b9f04:	f7fe f93f 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9f08:	a903      	add	r1, sp, #12
   b9f0a:	a805      	add	r0, sp, #20
   b9f0c:	f7ff fea1 	bl	b9c52 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b9f10:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b9f12:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b9f14:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b9f16:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b9f18:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b9f1a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b9f1c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b9f1e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b9f20:	f7fe f931 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9f24:	a804      	add	r0, sp, #16
   b9f26:	f7fe f92e 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b9f2a:	e7ab      	b.n	b9e84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b9f2c:	000b9fad 	.word	0x000b9fad

000b9f30 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b9f30:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b9f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9f34:	4605      	mov	r5, r0
	switch (__op)
   b9f36:	d103      	bne.n	b9f40 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b9f38:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b9f3a:	6003      	str	r3, [r0, #0]
      }
   b9f3c:	2000      	movs	r0, #0
   b9f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b9f40:	2a02      	cmp	r2, #2
   b9f42:	d010      	beq.n	b9f66 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b9f44:	2a03      	cmp	r2, #3
   b9f46:	d1f9      	bne.n	b9f3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b9f48:	6804      	ldr	r4, [r0, #0]
   b9f4a:	2c00      	cmp	r4, #0
   b9f4c:	d0f6      	beq.n	b9f3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b9f4e:	f104 0010 	add.w	r0, r4, #16
   b9f52:	f7ff fe54 	bl	b9bfe <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b9f56:	4620      	mov	r0, r4
   b9f58:	f7fa f9a0 	bl	b429c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b9f5c:	2118      	movs	r1, #24
   b9f5e:	4620      	mov	r0, r4
   b9f60:	f7fa f89d 	bl	b409e <_ZdlPvj>
   b9f64:	e7ea      	b.n	b9f3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b9f66:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b9f68:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b9f6a:	f7fa f894 	bl	b4096 <_Znwj>
   b9f6e:	4604      	mov	r4, r0
   b9f70:	b150      	cbz	r0, b9f88 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   b9f72:	4631      	mov	r1, r6
   b9f74:	f7ff fec6 	bl	b9d04 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b9f78:	6930      	ldr	r0, [r6, #16]
   b9f7a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b9f7e:	b108      	cbz	r0, b9f84 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b9f80:	f001 fefa 	bl	bbd78 <strdup>
        type_(type) {
   b9f84:	6120      	str	r0, [r4, #16]
   b9f86:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b9f88:	602c      	str	r4, [r5, #0]
	}
   b9f8a:	e7d7      	b.n	b9f3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b9f8c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b9f8c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b9f8e:	2300      	movs	r3, #0
   b9f90:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b9f92:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b9f94:	4604      	mov	r4, r0
   b9f96:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b9f98:	b12b      	cbz	r3, b9fa6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b9f9a:	2202      	movs	r2, #2
   b9f9c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b9f9e:	68eb      	ldr	r3, [r5, #12]
   b9fa0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b9fa2:	68ab      	ldr	r3, [r5, #8]
   b9fa4:	60a3      	str	r3, [r4, #8]
    }
   b9fa6:	4620      	mov	r0, r4
   b9fa8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b9fac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b9fac:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9fae:	b089      	sub	sp, #36	; 0x24
   b9fb0:	4604      	mov	r4, r0
   b9fb2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b9fb4:	a801      	add	r0, sp, #4
   b9fb6:	4611      	mov	r1, r2
   b9fb8:	f7ff fe54 	bl	b9c64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b9fbc:	b1a4      	cbz	r4, b9fe8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b9fbe:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b9fc0:	b11d      	cbz	r5, b9fca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b9fc2:	4628      	mov	r0, r5
   b9fc4:	f001 fed8 	bl	bbd78 <strdup>
   b9fc8:	4605      	mov	r5, r0
   b9fca:	a801      	add	r0, sp, #4
   b9fcc:	a903      	add	r1, sp, #12
        type_(type) {
   b9fce:	9503      	str	r5, [sp, #12]
   b9fd0:	f8ad 4010 	strh.w	r4, [sp, #16]
   b9fd4:	f7ff fea6 	bl	b9d24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b9fd8:	a803      	add	r0, sp, #12
   b9fda:	f7ff fe10 	bl	b9bfe <_ZN8particle5ErrorD1Ev>
   b9fde:	a802      	add	r0, sp, #8
   b9fe0:	f7fe f8d1 	bl	b8186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9fe4:	b009      	add	sp, #36	; 0x24
   b9fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b9fe8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b9fea:	2301      	movs	r3, #1
   b9fec:	e8d5 2f4f 	ldrexb	r2, [r5]
   b9ff0:	2a00      	cmp	r2, #0
   b9ff2:	d103      	bne.n	b9ffc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b9ff4:	e8c5 3f41 	strexb	r1, r3, [r5]
   b9ff8:	2900      	cmp	r1, #0
   b9ffa:	d1f7      	bne.n	b9fec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b9ffc:	d1ef      	bne.n	b9fde <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b9ffe:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   ba000:	f3bf 8f5b 	dmb	ish
   ba004:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   ba006:	1d2b      	adds	r3, r5, #4
   ba008:	f3bf 8f5b 	dmb	ish
   ba00c:	e853 6f00 	ldrex	r6, [r3]
   ba010:	e843 4200 	strex	r2, r4, [r3]
   ba014:	2a00      	cmp	r2, #0
   ba016:	d1f9      	bne.n	ba00c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   ba018:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   ba01c:	2e00      	cmp	r6, #0
   ba01e:	d0de      	beq.n	b9fde <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   ba020:	4620      	mov	r0, r4
   ba022:	f7fd f929 	bl	b7278 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   ba026:	4607      	mov	r7, r0
   ba028:	b160      	cbz	r0, ba044 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   ba02a:	f105 010c 	add.w	r1, r5, #12
   ba02e:	4630      	mov	r0, r6
   ba030:	f7ff fe43 	bl	b9cba <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   ba034:	4630      	mov	r0, r6
   ba036:	f7fa f931 	bl	b429c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   ba03a:	2110      	movs	r1, #16
   ba03c:	4630      	mov	r0, r6
   ba03e:	f7fa f82e 	bl	b409e <_ZdlPvj>
   ba042:	e7cc      	b.n	b9fde <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   ba044:	4631      	mov	r1, r6
   ba046:	a803      	add	r0, sp, #12
   ba048:	f7ff ffa0 	bl	b9f8c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   ba04c:	7b2b      	ldrb	r3, [r5, #12]
   ba04e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   ba052:	2010      	movs	r0, #16
   ba054:	f7fa f81f 	bl	b4096 <_Znwj>
   ba058:	4605      	mov	r5, r0
   ba05a:	b1d0      	cbz	r0, ba092 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   ba05c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba05e:	2014      	movs	r0, #20
   ba060:	f7fa f819 	bl	b4096 <_Znwj>
   ba064:	4604      	mov	r4, r0
   ba066:	b178      	cbz	r0, ba088 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   ba068:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   ba06a:	4601      	mov	r1, r0
   ba06c:	a803      	add	r0, sp, #12
   ba06e:	f7fe ff63 	bl	b8f38 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba072:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   ba074:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba076:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba078:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   ba07a:	9205      	str	r2, [sp, #20]
   ba07c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba07e:	60e3      	str	r3, [r4, #12]
   ba080:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   ba084:	9206      	str	r2, [sp, #24]
   ba086:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   ba088:	4b06      	ldr	r3, [pc, #24]	; (ba0a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   ba08a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   ba08c:	4b06      	ldr	r3, [pc, #24]	; (ba0a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba08e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   ba090:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   ba092:	a803      	add	r0, sp, #12
   ba094:	f7fa f902 	bl	b429c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   ba098:	2200      	movs	r2, #0
   ba09a:	4629      	mov	r1, r5
   ba09c:	4803      	ldr	r0, [pc, #12]	; (ba0ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   ba09e:	f7fd f8f3 	bl	b7288 <application_thread_invoke>
   ba0a2:	e7c7      	b.n	ba034 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   ba0a4:	000b9ccd 	.word	0x000b9ccd
   ba0a8:	000ba0b1 	.word	0x000ba0b1
   ba0ac:	000b74c7 	.word	0x000b74c7

000ba0b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   ba0b0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   ba0b2:	b570      	push	{r4, r5, r6, lr}
   ba0b4:	4604      	mov	r4, r0
	switch (__op)
   ba0b6:	d103      	bne.n	ba0c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   ba0b8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   ba0ba:	6003      	str	r3, [r0, #0]
      }
   ba0bc:	2000      	movs	r0, #0
   ba0be:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   ba0c0:	2a02      	cmp	r2, #2
   ba0c2:	d00c      	beq.n	ba0de <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   ba0c4:	2a03      	cmp	r2, #3
   ba0c6:	d1f9      	bne.n	ba0bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   ba0c8:	6804      	ldr	r4, [r0, #0]
   ba0ca:	2c00      	cmp	r4, #0
   ba0cc:	d0f6      	beq.n	ba0bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   ba0ce:	4620      	mov	r0, r4
   ba0d0:	f7fa f8e4 	bl	b429c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   ba0d4:	2114      	movs	r1, #20
   ba0d6:	4620      	mov	r0, r4
   ba0d8:	f7f9 ffe1 	bl	b409e <_ZdlPvj>
   ba0dc:	e7ee      	b.n	ba0bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   ba0de:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   ba0e0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   ba0e2:	f7f9 ffd8 	bl	b4096 <_Znwj>
   ba0e6:	4605      	mov	r5, r0
   ba0e8:	b120      	cbz	r0, ba0f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   ba0ea:	4631      	mov	r1, r6
   ba0ec:	f7ff ff4e 	bl	b9f8c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   ba0f0:	7c33      	ldrb	r3, [r6, #16]
   ba0f2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   ba0f4:	6025      	str	r5, [r4, #0]
	}
   ba0f6:	e7e1      	b.n	ba0bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000ba0f8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   ba0f8:	2200      	movs	r2, #0
   ba0fa:	6840      	ldr	r0, [r0, #4]
   ba0fc:	4611      	mov	r1, r2
   ba0fe:	f7fd b94f 	b.w	b73a0 <network_listening>

000ba102 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   ba102:	2200      	movs	r2, #0
   ba104:	6840      	ldr	r0, [r0, #4]
   ba106:	4611      	mov	r1, r2
   ba108:	f7fd b95a 	b.w	b73c0 <network_get_listen_timeout>

000ba10c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   ba10c:	6840      	ldr	r0, [r0, #4]
   ba10e:	2200      	movs	r2, #0
   ba110:	f7fd b94e 	b.w	b73b0 <network_set_listen_timeout>

000ba114 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   ba114:	6840      	ldr	r0, [r0, #4]
   ba116:	2200      	movs	r2, #0
   ba118:	f081 0101 	eor.w	r1, r1, #1
   ba11c:	f7fd b938 	b.w	b7390 <network_listen>

000ba120 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   ba120:	2300      	movs	r3, #0
   ba122:	6840      	ldr	r0, [r0, #4]
   ba124:	461a      	mov	r2, r3
   ba126:	4619      	mov	r1, r3
   ba128:	f7fd b92a 	b.w	b7380 <network_off>

000ba12c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   ba12c:	2300      	movs	r3, #0
   ba12e:	6840      	ldr	r0, [r0, #4]
   ba130:	461a      	mov	r2, r3
   ba132:	4619      	mov	r1, r3
   ba134:	f7fd b91c 	b.w	b7370 <network_on>

000ba138 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   ba138:	2200      	movs	r2, #0
   ba13a:	6840      	ldr	r0, [r0, #4]
   ba13c:	4611      	mov	r1, r2
   ba13e:	f7fd b90f 	b.w	b7360 <network_ready>

000ba142 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   ba142:	2200      	movs	r2, #0
   ba144:	6840      	ldr	r0, [r0, #4]
   ba146:	4611      	mov	r1, r2
   ba148:	f7fd b8fa 	b.w	b7340 <network_connecting>

000ba14c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   ba14c:	6840      	ldr	r0, [r0, #4]
   ba14e:	2200      	movs	r2, #0
   ba150:	2102      	movs	r1, #2
   ba152:	f7fd b8fd 	b.w	b7350 <network_disconnect>

000ba156 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   ba156:	2300      	movs	r3, #0
   ba158:	6840      	ldr	r0, [r0, #4]
   ba15a:	461a      	mov	r2, r3
   ba15c:	f7fd b8e8 	b.w	b7330 <network_connect>

000ba160 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   ba160:	4b02      	ldr	r3, [pc, #8]	; (ba16c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   ba162:	2203      	movs	r2, #3
   ba164:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   ba166:	4a02      	ldr	r2, [pc, #8]	; (ba170 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   ba168:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   ba16a:	4770      	bx	lr
   ba16c:	2003e68c 	.word	0x2003e68c
   ba170:	000be688 	.word	0x000be688

000ba174 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   ba174:	4770      	bx	lr

000ba176 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   ba176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba178:	4606      	mov	r6, r0
   ba17a:	4615      	mov	r5, r2
   ba17c:	460c      	mov	r4, r1
   ba17e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   ba180:	42bc      	cmp	r4, r7
   ba182:	d006      	beq.n	ba192 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   ba184:	6833      	ldr	r3, [r6, #0]
   ba186:	f814 1b01 	ldrb.w	r1, [r4], #1
   ba18a:	689b      	ldr	r3, [r3, #8]
   ba18c:	4630      	mov	r0, r6
   ba18e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   ba190:	e7f6      	b.n	ba180 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   ba192:	4628      	mov	r0, r5
   ba194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba196 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   ba196:	7c00      	ldrb	r0, [r0, #16]
   ba198:	2200      	movs	r2, #0
   ba19a:	f7fc bf25 	b.w	b6fe8 <hal_i2c_write>

000ba19e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   ba19e:	7c00      	ldrb	r0, [r0, #16]
   ba1a0:	2100      	movs	r1, #0
   ba1a2:	f7fc bf29 	b.w	b6ff8 <hal_i2c_available>

000ba1a6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   ba1a6:	7c00      	ldrb	r0, [r0, #16]
   ba1a8:	2100      	movs	r1, #0
   ba1aa:	f7fc bf2d 	b.w	b7008 <hal_i2c_read>

000ba1ae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   ba1ae:	7c00      	ldrb	r0, [r0, #16]
   ba1b0:	2100      	movs	r1, #0
   ba1b2:	f7fc bf31 	b.w	b7018 <hal_i2c_peek>

000ba1b6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   ba1b6:	7c00      	ldrb	r0, [r0, #16]
   ba1b8:	2100      	movs	r1, #0
   ba1ba:	f7fc bf35 	b.w	b7028 <hal_i2c_flush>

000ba1be <_ZN7TwoWireD0Ev>:
   ba1be:	b510      	push	{r4, lr}
   ba1c0:	2114      	movs	r1, #20
   ba1c2:	4604      	mov	r4, r0
   ba1c4:	f7f9 ff6b 	bl	b409e <_ZdlPvj>
   ba1c8:	4620      	mov	r0, r4
   ba1ca:	bd10      	pop	{r4, pc}

000ba1cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   ba1cc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   ba1ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba1d2:	4604      	mov	r4, r0
   ba1d4:	4608      	mov	r0, r1
   ba1d6:	2100      	movs	r1, #0
   ba1d8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ba1dc:	4b03      	ldr	r3, [pc, #12]	; (ba1ec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   ba1de:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   ba1e0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   ba1e2:	4611      	mov	r1, r2
   ba1e4:	f7fc ff30 	bl	b7048 <hal_i2c_init>
}
   ba1e8:	4620      	mov	r0, r4
   ba1ea:	bd10      	pop	{r4, pc}
   ba1ec:	000be6c4 	.word	0x000be6c4

000ba1f0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   ba1f0:	4770      	bx	lr

000ba1f2 <_ZN9IPAddressD0Ev>:
   ba1f2:	b510      	push	{r4, lr}
   ba1f4:	2118      	movs	r1, #24
   ba1f6:	4604      	mov	r4, r0
   ba1f8:	f7f9 ff51 	bl	b409e <_ZdlPvj>
   ba1fc:	4620      	mov	r0, r4
   ba1fe:	bd10      	pop	{r4, pc}

000ba200 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   ba200:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   ba202:	7d03      	ldrb	r3, [r0, #20]
   ba204:	2b06      	cmp	r3, #6
{
   ba206:	b08d      	sub	sp, #52	; 0x34
   ba208:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba20a:	f100 0704 	add.w	r7, r0, #4
   ba20e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   ba212:	d012      	beq.n	ba23a <_ZNK9IPAddress7printToER5Print+0x3a>
   ba214:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   ba218:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   ba21c:	220a      	movs	r2, #10
   ba21e:	4630      	mov	r0, r6
   ba220:	f000 f94b 	bl	ba4ba <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   ba224:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   ba226:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   ba228:	d019      	beq.n	ba25e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   ba22a:	2c00      	cmp	r4, #0
   ba22c:	d0f4      	beq.n	ba218 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   ba22e:	212e      	movs	r1, #46	; 0x2e
   ba230:	4630      	mov	r0, r6
   ba232:	f000 f929 	bl	ba488 <_ZN5Print5printEc>
   ba236:	4404      	add	r4, r0
   ba238:	e7ee      	b.n	ba218 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba23a:	232f      	movs	r3, #47	; 0x2f
   ba23c:	466a      	mov	r2, sp
   ba23e:	4639      	mov	r1, r7
   ba240:	200a      	movs	r0, #10
		buf[0] = 0;
   ba242:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba246:	f7fc ff07 	bl	b7058 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   ba24a:	4668      	mov	r0, sp
   ba24c:	f001 fdb1 	bl	bbdb2 <strlen>
   ba250:	6833      	ldr	r3, [r6, #0]
   ba252:	4602      	mov	r2, r0
   ba254:	68db      	ldr	r3, [r3, #12]
   ba256:	4669      	mov	r1, sp
   ba258:	4630      	mov	r0, r6
   ba25a:	4798      	blx	r3
   ba25c:	4604      	mov	r4, r0
    }
    return n;
}
   ba25e:	4620      	mov	r0, r4
   ba260:	b00d      	add	sp, #52	; 0x34
   ba262:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba264 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   ba264:	b510      	push	{r4, lr}
   ba266:	4b05      	ldr	r3, [pc, #20]	; (ba27c <_ZN9IPAddressC1Ev+0x18>)
   ba268:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   ba26a:	2211      	movs	r2, #17
   ba26c:	f840 3b04 	str.w	r3, [r0], #4
   ba270:	2100      	movs	r1, #0
   ba272:	f001 fd28 	bl	bbcc6 <memset>
}
   ba276:	4620      	mov	r0, r4
   ba278:	bd10      	pop	{r4, pc}
   ba27a:	bf00      	nop
   ba27c:	000be6ec 	.word	0x000be6ec

000ba280 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   ba280:	4603      	mov	r3, r0
   ba282:	4a07      	ldr	r2, [pc, #28]	; (ba2a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   ba284:	b510      	push	{r4, lr}
   ba286:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   ba28a:	f101 0210 	add.w	r2, r1, #16
   ba28e:	f851 4b04 	ldr.w	r4, [r1], #4
   ba292:	f843 4b04 	str.w	r4, [r3], #4
   ba296:	4291      	cmp	r1, r2
   ba298:	d1f9      	bne.n	ba28e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   ba29a:	780a      	ldrb	r2, [r1, #0]
   ba29c:	701a      	strb	r2, [r3, #0]
}
   ba29e:	bd10      	pop	{r4, pc}
   ba2a0:	000be6ec 	.word	0x000be6ec

000ba2a4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   ba2a4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   ba2a6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   ba2aa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   ba2ae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   ba2b2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   ba2b6:	2304      	movs	r3, #4
   ba2b8:	6041      	str	r1, [r0, #4]
   ba2ba:	7503      	strb	r3, [r0, #20]
}
   ba2bc:	bd10      	pop	{r4, pc}
	...

000ba2c0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   ba2c0:	b507      	push	{r0, r1, r2, lr}
   ba2c2:	4b06      	ldr	r3, [pc, #24]	; (ba2dc <_ZN9IPAddressC1EPKh+0x1c>)
   ba2c4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   ba2c6:	78cb      	ldrb	r3, [r1, #3]
   ba2c8:	9300      	str	r3, [sp, #0]
   ba2ca:	788b      	ldrb	r3, [r1, #2]
   ba2cc:	784a      	ldrb	r2, [r1, #1]
   ba2ce:	7809      	ldrb	r1, [r1, #0]
   ba2d0:	f7ff ffe8 	bl	ba2a4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   ba2d4:	b003      	add	sp, #12
   ba2d6:	f85d fb04 	ldr.w	pc, [sp], #4
   ba2da:	bf00      	nop
   ba2dc:	000be6ec 	.word	0x000be6ec

000ba2e0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   ba2e0:	4b01      	ldr	r3, [pc, #4]	; (ba2e8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   ba2e2:	4a02      	ldr	r2, [pc, #8]	; (ba2ec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   ba2e4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   ba2e6:	4770      	bx	lr
   ba2e8:	2003e694 	.word	0x2003e694
   ba2ec:	000be6f8 	.word	0x000be6f8

000ba2f0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   ba2f0:	2300      	movs	r3, #0
   ba2f2:	6840      	ldr	r0, [r0, #4]
   ba2f4:	461a      	mov	r2, r3
   ba2f6:	f7fd b81b 	b.w	b7330 <network_connect>

000ba2fa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   ba2fa:	6840      	ldr	r0, [r0, #4]
   ba2fc:	2200      	movs	r2, #0
   ba2fe:	2102      	movs	r1, #2
   ba300:	f7fd b826 	b.w	b7350 <network_disconnect>

000ba304 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   ba304:	2200      	movs	r2, #0
   ba306:	6840      	ldr	r0, [r0, #4]
   ba308:	4611      	mov	r1, r2
   ba30a:	f7fd b819 	b.w	b7340 <network_connecting>

000ba30e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   ba30e:	2200      	movs	r2, #0
   ba310:	6840      	ldr	r0, [r0, #4]
   ba312:	4611      	mov	r1, r2
   ba314:	f7fd b824 	b.w	b7360 <network_ready>

000ba318 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   ba318:	2300      	movs	r3, #0
   ba31a:	6840      	ldr	r0, [r0, #4]
   ba31c:	461a      	mov	r2, r3
   ba31e:	4619      	mov	r1, r3
   ba320:	f7fd b826 	b.w	b7370 <network_on>

000ba324 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   ba324:	2300      	movs	r3, #0
   ba326:	6840      	ldr	r0, [r0, #4]
   ba328:	461a      	mov	r2, r3
   ba32a:	4619      	mov	r1, r3
   ba32c:	f7fd b828 	b.w	b7380 <network_off>

000ba330 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   ba330:	6840      	ldr	r0, [r0, #4]
   ba332:	2100      	movs	r1, #0
   ba334:	f7fd b84c 	b.w	b73d0 <network_is_on>

000ba338 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   ba338:	6840      	ldr	r0, [r0, #4]
   ba33a:	2100      	movs	r1, #0
   ba33c:	f7fd b850 	b.w	b73e0 <network_is_off>

000ba340 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   ba340:	6840      	ldr	r0, [r0, #4]
   ba342:	2200      	movs	r2, #0
   ba344:	f081 0101 	eor.w	r1, r1, #1
   ba348:	f7fd b822 	b.w	b7390 <network_listen>

000ba34c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   ba34c:	6840      	ldr	r0, [r0, #4]
   ba34e:	2200      	movs	r2, #0
   ba350:	f7fd b82e 	b.w	b73b0 <network_set_listen_timeout>

000ba354 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   ba354:	2200      	movs	r2, #0
   ba356:	6840      	ldr	r0, [r0, #4]
   ba358:	4611      	mov	r1, r2
   ba35a:	f7fd b831 	b.w	b73c0 <network_get_listen_timeout>

000ba35e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   ba35e:	2200      	movs	r2, #0
   ba360:	6840      	ldr	r0, [r0, #4]
   ba362:	4611      	mov	r1, r2
   ba364:	f7fd b81c 	b.w	b73a0 <network_listening>

000ba368 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   ba368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba36c:	b095      	sub	sp, #84	; 0x54
   ba36e:	4614      	mov	r4, r2
   ba370:	460d      	mov	r5, r1
   ba372:	4607      	mov	r7, r0
    IPAddress addr;
   ba374:	f7ff ff76 	bl	ba264 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   ba378:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   ba37a:	221c      	movs	r2, #28
   ba37c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   ba37e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   ba380:	f001 fca1 	bl	bbcc6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   ba384:	2340      	movs	r3, #64	; 0x40
   ba386:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   ba388:	4620      	mov	r0, r4
   ba38a:	466b      	mov	r3, sp
   ba38c:	aa0c      	add	r2, sp, #48	; 0x30
   ba38e:	2100      	movs	r1, #0
   ba390:	f7fc fe72 	bl	b7078 <netdb_getaddrinfo>
    if (!r) {
   ba394:	4604      	mov	r4, r0
   ba396:	2800      	cmp	r0, #0
   ba398:	d14b      	bne.n	ba432 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba39a:	4602      	mov	r2, r0
   ba39c:	2101      	movs	r1, #1
   ba39e:	6868      	ldr	r0, [r5, #4]
   ba3a0:	f7fc ffde 	bl	b7360 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba3a4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba3a6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba3a8:	4622      	mov	r2, r4
   ba3aa:	6868      	ldr	r0, [r5, #4]
   ba3ac:	f7fc ffd8 	bl	b7360 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba3b0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba3b2:	4681      	mov	r9, r0
        bool ok = false;
   ba3b4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba3b6:	2e00      	cmp	r6, #0
   ba3b8:	d03b      	beq.n	ba432 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   ba3ba:	2900      	cmp	r1, #0
   ba3bc:	d139      	bne.n	ba432 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   ba3be:	6873      	ldr	r3, [r6, #4]
   ba3c0:	2b02      	cmp	r3, #2
   ba3c2:	d003      	beq.n	ba3cc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   ba3c4:	2b0a      	cmp	r3, #10
   ba3c6:	d011      	beq.n	ba3ec <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba3c8:	69f6      	ldr	r6, [r6, #28]
   ba3ca:	e7f4      	b.n	ba3b6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   ba3cc:	f1b8 0f00 	cmp.w	r8, #0
   ba3d0:	d0fa      	beq.n	ba3c8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   ba3d2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   ba3d4:	a806      	add	r0, sp, #24
   ba3d6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   ba3d8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   ba3da:	f7ff ff71 	bl	ba2c0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba3de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba3e0:	1d3c      	adds	r4, r7, #4
   ba3e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba3e4:	682b      	ldr	r3, [r5, #0]
   ba3e6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba3e8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   ba3ea:	e7ed      	b.n	ba3c8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   ba3ec:	f1b9 0f00 	cmp.w	r9, #0
   ba3f0:	d0ea      	beq.n	ba3c8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   ba3f2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   ba3f4:	2210      	movs	r2, #16
   ba3f6:	a801      	add	r0, sp, #4
   ba3f8:	f001 fc65 	bl	bbcc6 <memset>
                    a.v = 6;
   ba3fc:	2306      	movs	r3, #6
   ba3fe:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba402:	ad01      	add	r5, sp, #4
   ba404:	f104 0308 	add.w	r3, r4, #8
   ba408:	3418      	adds	r4, #24
   ba40a:	6818      	ldr	r0, [r3, #0]
   ba40c:	6859      	ldr	r1, [r3, #4]
   ba40e:	462a      	mov	r2, r5
   ba410:	c203      	stmia	r2!, {r0, r1}
   ba412:	3308      	adds	r3, #8
   ba414:	42a3      	cmp	r3, r4
   ba416:	4615      	mov	r5, r2
   ba418:	d1f7      	bne.n	ba40a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   ba41a:	a901      	add	r1, sp, #4
   ba41c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   ba41e:	ad07      	add	r5, sp, #28
   ba420:	f7ff ff2e 	bl	ba280 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba426:	1d3c      	adds	r4, r7, #4
   ba428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba42a:	682b      	ldr	r3, [r5, #0]
   ba42c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba42e:	4649      	mov	r1, r9
   ba430:	e7ca      	b.n	ba3c8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   ba432:	9800      	ldr	r0, [sp, #0]
   ba434:	f7fc fe18 	bl	b7068 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   ba438:	4638      	mov	r0, r7
   ba43a:	b015      	add	sp, #84	; 0x54
   ba43c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000ba440 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   ba440:	4b02      	ldr	r3, [pc, #8]	; (ba44c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   ba442:	4a03      	ldr	r2, [pc, #12]	; (ba450 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   ba444:	601a      	str	r2, [r3, #0]
   ba446:	2200      	movs	r2, #0
   ba448:	605a      	str	r2, [r3, #4]

} // spark
   ba44a:	4770      	bx	lr
   ba44c:	2003e698 	.word	0x2003e698
   ba450:	000be704 	.word	0x000be704

000ba454 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   ba454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba456:	4606      	mov	r6, r0
   ba458:	460d      	mov	r5, r1
  size_t n = 0;
   ba45a:	188f      	adds	r7, r1, r2
   ba45c:	2400      	movs	r4, #0
  while (size--) {
   ba45e:	42bd      	cmp	r5, r7
   ba460:	d00c      	beq.n	ba47c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   ba462:	6833      	ldr	r3, [r6, #0]
   ba464:	f815 1b01 	ldrb.w	r1, [r5], #1
   ba468:	689b      	ldr	r3, [r3, #8]
   ba46a:	4630      	mov	r0, r6
   ba46c:	4798      	blx	r3
     if (chunk>=0)
   ba46e:	1e03      	subs	r3, r0, #0
   ba470:	db01      	blt.n	ba476 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   ba472:	441c      	add	r4, r3
  while (size--) {
   ba474:	e7f3      	b.n	ba45e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   ba476:	2c00      	cmp	r4, #0
   ba478:	bf08      	it	eq
   ba47a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   ba47c:	4620      	mov	r0, r4
   ba47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba480 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   ba480:	b508      	push	{r3, lr}
  return write(str);
   ba482:	f7fb ffe5 	bl	b6450 <_ZN5Print5writeEPKc>
}
   ba486:	bd08      	pop	{r3, pc}

000ba488 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   ba488:	6803      	ldr	r3, [r0, #0]
   ba48a:	689b      	ldr	r3, [r3, #8]
   ba48c:	4718      	bx	r3

000ba48e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   ba48e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   ba490:	210d      	movs	r1, #13
{
   ba492:	4605      	mov	r5, r0
  size_t n = print('\r');
   ba494:	f7ff fff8 	bl	ba488 <_ZN5Print5printEc>
  n += print('\n');
   ba498:	210a      	movs	r1, #10
  size_t n = print('\r');
   ba49a:	4604      	mov	r4, r0
  n += print('\n');
   ba49c:	4628      	mov	r0, r5
   ba49e:	f7ff fff3 	bl	ba488 <_ZN5Print5printEc>
  return n;
}
   ba4a2:	4420      	add	r0, r4
   ba4a4:	bd38      	pop	{r3, r4, r5, pc}

000ba4a6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   ba4a6:	b538      	push	{r3, r4, r5, lr}
   ba4a8:	4605      	mov	r5, r0
  return write(str);
   ba4aa:	f7fb ffd1 	bl	b6450 <_ZN5Print5writeEPKc>
   ba4ae:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   ba4b0:	4628      	mov	r0, r5
   ba4b2:	f7ff ffec 	bl	ba48e <_ZN5Print7printlnEv>
  return n;
}
   ba4b6:	4420      	add	r0, r4
   ba4b8:	bd38      	pop	{r3, r4, r5, pc}

000ba4ba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   ba4ba:	b530      	push	{r4, r5, lr}
   ba4bc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   ba4be:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   ba4c0:	2a01      	cmp	r2, #1
  *str = '\0';
   ba4c2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   ba4c6:	bf98      	it	ls
   ba4c8:	220a      	movls	r2, #10
   ba4ca:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   ba4cc:	460d      	mov	r5, r1
   ba4ce:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   ba4d2:	fb01 5312 	mls	r3, r1, r2, r5
   ba4d6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba4da:	2b09      	cmp	r3, #9
   ba4dc:	bf94      	ite	ls
   ba4de:	3330      	addls	r3, #48	; 0x30
   ba4e0:	3337      	addhi	r3, #55	; 0x37
   ba4e2:	b2db      	uxtb	r3, r3
  } while(n);
   ba4e4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba4e6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   ba4ea:	d9ef      	bls.n	ba4cc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   ba4ec:	4621      	mov	r1, r4
   ba4ee:	f7fb ffaf 	bl	b6450 <_ZN5Print5writeEPKc>
}
   ba4f2:	b00b      	add	sp, #44	; 0x2c
   ba4f4:	bd30      	pop	{r4, r5, pc}

000ba4f6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   ba4f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba4fa:	b086      	sub	sp, #24
   ba4fc:	af00      	add	r7, sp, #0
   ba4fe:	4605      	mov	r5, r0
   ba500:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   ba502:	1d38      	adds	r0, r7, #4
   ba504:	2114      	movs	r1, #20
{
   ba506:	4614      	mov	r4, r2
    va_copy(args2, args);
   ba508:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   ba50a:	f7fc ffa1 	bl	b7450 <vsnprintf>

    if (n<bufsize)
   ba50e:	2813      	cmp	r0, #19
   ba510:	d80e      	bhi.n	ba530 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   ba512:	1d39      	adds	r1, r7, #4
   ba514:	4628      	mov	r0, r5
   ba516:	f7fb ff9b 	bl	b6450 <_ZN5Print5writeEPKc>
   ba51a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   ba51c:	b11e      	cbz	r6, ba526 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   ba51e:	4628      	mov	r0, r5
   ba520:	f7ff ffb5 	bl	ba48e <_ZN5Print7printlnEv>
   ba524:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   ba526:	4620      	mov	r0, r4
   ba528:	3718      	adds	r7, #24
   ba52a:	46bd      	mov	sp, r7
   ba52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   ba530:	f100 0308 	add.w	r3, r0, #8
   ba534:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   ba538:	46e8      	mov	r8, sp
        char bigger[n+1];
   ba53a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   ba53e:	4622      	mov	r2, r4
   ba540:	1c41      	adds	r1, r0, #1
   ba542:	683b      	ldr	r3, [r7, #0]
   ba544:	4668      	mov	r0, sp
   ba546:	f7fc ff83 	bl	b7450 <vsnprintf>
  return write(str);
   ba54a:	4669      	mov	r1, sp
   ba54c:	4628      	mov	r0, r5
   ba54e:	f7fb ff7f 	bl	b6450 <_ZN5Print5writeEPKc>
   ba552:	4604      	mov	r4, r0
   ba554:	46c5      	mov	sp, r8
   ba556:	e7e1      	b.n	ba51c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000ba558 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   ba558:	4b01      	ldr	r3, [pc, #4]	; (ba560 <_GLOBAL__sub_I_RGB+0x8>)
   ba55a:	2200      	movs	r2, #0
   ba55c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   ba55e:	4770      	bx	lr
   ba560:	2003e6a0 	.word	0x2003e6a0

000ba564 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   ba564:	2100      	movs	r1, #0
   ba566:	f7fc bdd7 	b.w	b7118 <hal_spi_release>

000ba56a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   ba56a:	2100      	movs	r1, #0
   ba56c:	f7fc bdcc 	b.w	b7108 <hal_spi_acquire>

000ba570 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   ba570:	b510      	push	{r4, lr}
   ba572:	4604      	mov	r4, r0
   ba574:	4608      	mov	r0, r1
{
    _spi = spi;
   ba576:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   ba578:	f7fc fd96 	bl	b70a8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   ba57c:	2300      	movs	r3, #0
   ba57e:	6063      	str	r3, [r4, #4]
}
   ba580:	4620      	mov	r0, r4
   ba582:	bd10      	pop	{r4, pc}

000ba584 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   ba584:	b513      	push	{r0, r1, r4, lr}
   ba586:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   ba588:	7800      	ldrb	r0, [r0, #0]
   ba58a:	f7ff ffee 	bl	ba56a <_ZN8SPIClass4lockEv.isra.0>
   ba58e:	b958      	cbnz	r0, ba5a8 <_ZN8SPIClass5beginEv+0x24>
   ba590:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   ba592:	9001      	str	r0, [sp, #4]
   ba594:	f64f 71ff 	movw	r1, #65535	; 0xffff
   ba598:	f7fc fd76 	bl	b7088 <hal_spi_begin>
        unlock();
   ba59c:	9801      	ldr	r0, [sp, #4]
    }
}
   ba59e:	b002      	add	sp, #8
   ba5a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba5a4:	f7ff bfde 	b.w	ba564 <_ZN8SPIClass6unlockEv.isra.0>
   ba5a8:	b002      	add	sp, #8
   ba5aa:	bd10      	pop	{r4, pc}

000ba5ac <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   ba5ac:	7800      	ldrb	r0, [r0, #0]
   ba5ae:	f7ff bfd9 	b.w	ba564 <_ZN8SPIClass6unlockEv.isra.0>
	...

000ba5b4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   ba5b4:	0840      	lsrs	r0, r0, #1
{
   ba5b6:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   ba5b8:	6018      	str	r0, [r3, #0]
   ba5ba:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   ba5bc:	6818      	ldr	r0, [r3, #0]
   ba5be:	4288      	cmp	r0, r1
   ba5c0:	b2e5      	uxtb	r5, r4
   ba5c2:	d906      	bls.n	ba5d2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   ba5c4:	3401      	adds	r4, #1
   ba5c6:	2c08      	cmp	r4, #8
   ba5c8:	d002      	beq.n	ba5d0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   ba5ca:	0840      	lsrs	r0, r0, #1
   ba5cc:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   ba5ce:	e7f5      	b.n	ba5bc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   ba5d0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   ba5d2:	4b02      	ldr	r3, [pc, #8]	; (ba5dc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   ba5d4:	5d5b      	ldrb	r3, [r3, r5]
   ba5d6:	7013      	strb	r3, [r2, #0]
}
   ba5d8:	bd30      	pop	{r4, r5, pc}
   ba5da:	bf00      	nop
   ba5dc:	000be738 	.word	0x000be738

000ba5e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   ba5e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba5e4:	4606      	mov	r6, r0
   ba5e6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   ba5e8:	7800      	ldrb	r0, [r0, #0]
{
   ba5ea:	460c      	mov	r4, r1
    CHECK(lock());
   ba5ec:	f7ff ffbd 	bl	ba56a <_ZN8SPIClass4lockEv.isra.0>
   ba5f0:	2800      	cmp	r0, #0
   ba5f2:	db1b      	blt.n	ba62c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   ba5f4:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   ba5f6:	2214      	movs	r2, #20
   ba5f8:	2100      	movs	r1, #0
   ba5fa:	a809      	add	r0, sp, #36	; 0x24
   ba5fc:	f001 fb63 	bl	bbcc6 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   ba600:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   ba602:	2200      	movs	r2, #0
   ba604:	a909      	add	r1, sp, #36	; 0x24
   ba606:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   ba608:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   ba60c:	f7fc fd5c 	bl	b70c8 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   ba610:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   ba614:	b113      	cbz	r3, ba61c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   ba616:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   ba61a:	b155      	cbz	r5, ba632 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   ba61c:	2700      	movs	r7, #0
   ba61e:	46b9      	mov	r9, r7
   ba620:	46b8      	mov	r8, r7
   ba622:	2501      	movs	r5, #1
    if (default_ && other.default_)
   ba624:	7923      	ldrb	r3, [r4, #4]
   ba626:	b15d      	cbz	r5, ba640 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   ba628:	b1c3      	cbz	r3, ba65c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   ba62a:	2000      	movs	r0, #0
}
   ba62c:	b00f      	add	sp, #60	; 0x3c
   ba62e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   ba632:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   ba636:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   ba63a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   ba63e:	e7f1      	b.n	ba624 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   ba640:	2b00      	cmp	r3, #0
   ba642:	d135      	bne.n	ba6b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   ba644:	68a3      	ldr	r3, [r4, #8]
   ba646:	4543      	cmp	r3, r8
   ba648:	d108      	bne.n	ba65c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   ba64a:	f88d 9020 	strb.w	r9, [sp, #32]
   ba64e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   ba652:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   ba656:	89a3      	ldrh	r3, [r4, #12]
   ba658:	429a      	cmp	r2, r3
   ba65a:	d0e6      	beq.n	ba62a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   ba65c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   ba65e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   ba660:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   ba664:	980a      	ldr	r0, [sp, #40]	; 0x28
   ba666:	ab04      	add	r3, sp, #16
   ba668:	f10d 020f 	add.w	r2, sp, #15
   ba66c:	f7ff ffa2 	bl	ba5b4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   ba670:	7921      	ldrb	r1, [r4, #4]
   ba672:	b985      	cbnz	r5, ba696 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   ba674:	b989      	cbnz	r1, ba69a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   ba676:	68a3      	ldr	r3, [r4, #8]
   ba678:	4543      	cmp	r3, r8
   ba67a:	d30e      	bcc.n	ba69a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   ba67c:	f88d 9020 	strb.w	r9, [sp, #32]
   ba680:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   ba684:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   ba688:	89a3      	ldrh	r3, [r4, #12]
   ba68a:	429a      	cmp	r2, r3
   ba68c:	d105      	bne.n	ba69a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   ba68e:	9b04      	ldr	r3, [sp, #16]
   ba690:	4543      	cmp	r3, r8
   ba692:	d102      	bne.n	ba69a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   ba694:	e7c9      	b.n	ba62a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   ba696:	2900      	cmp	r1, #0
   ba698:	d1f9      	bne.n	ba68e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   ba69a:	2300      	movs	r3, #0
   ba69c:	9301      	str	r3, [sp, #4]
   ba69e:	7b63      	ldrb	r3, [r4, #13]
   ba6a0:	9300      	str	r3, [sp, #0]
   ba6a2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   ba6a6:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   ba6a8:	7830      	ldrb	r0, [r6, #0]
   ba6aa:	f7fc fd25 	bl	b70f8 <hal_spi_set_settings>
   ba6ae:	e7bc      	b.n	ba62a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   ba6b0:	e9cd 5500 	strd	r5, r5, [sp]
   ba6b4:	462b      	mov	r3, r5
   ba6b6:	462a      	mov	r2, r5
   ba6b8:	2101      	movs	r1, #1
   ba6ba:	e7f5      	b.n	ba6a8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000ba6bc <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   ba6bc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   ba6be:	7800      	ldrb	r0, [r0, #0]
   ba6c0:	f7fc fcea 	bl	b7098 <hal_spi_transfer>
}
   ba6c4:	b2c0      	uxtb	r0, r0
   ba6c6:	bd08      	pop	{r3, pc}

000ba6c8 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   ba6c8:	b530      	push	{r4, r5, lr}
   ba6ca:	b087      	sub	sp, #28
   ba6cc:	4604      	mov	r4, r0
   ba6ce:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   ba6d0:	9500      	str	r5, [sp, #0]
   ba6d2:	7800      	ldrb	r0, [r0, #0]
   ba6d4:	f7fc fd00 	bl	b70d8 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   ba6d8:	b93d      	cbnz	r5, ba6ea <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   ba6da:	7820      	ldrb	r0, [r4, #0]
   ba6dc:	a902      	add	r1, sp, #8
   ba6de:	f7fc fd03 	bl	b70e8 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   ba6e2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   ba6e6:	07db      	lsls	r3, r3, #31
   ba6e8:	d4f7      	bmi.n	ba6da <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   ba6ea:	b007      	add	sp, #28
   ba6ec:	bd30      	pop	{r4, r5, pc}

000ba6ee <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   ba6ee:	b510      	push	{r4, lr}
   ba6f0:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   ba6f2:	f7fc fc39 	bl	b6f68 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   ba6f6:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   ba6f8:	6823      	ldr	r3, [r4, #0]
   ba6fa:	4620      	mov	r0, r4
   ba6fc:	695b      	ldr	r3, [r3, #20]
   ba6fe:	4798      	blx	r3
    if (c >= 0) return c;
   ba700:	2800      	cmp	r0, #0
   ba702:	da08      	bge.n	ba716 <_ZN6Stream9timedReadEv+0x28>
   ba704:	f7fc fc30 	bl	b6f68 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   ba708:	68e3      	ldr	r3, [r4, #12]
   ba70a:	1ac0      	subs	r0, r0, r3
   ba70c:	68a3      	ldr	r3, [r4, #8]
   ba70e:	4298      	cmp	r0, r3
   ba710:	d3f2      	bcc.n	ba6f8 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   ba712:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   ba716:	bd10      	pop	{r4, pc}

000ba718 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   ba718:	b570      	push	{r4, r5, r6, lr}
   ba71a:	460d      	mov	r5, r1
  String ret;
   ba71c:	4909      	ldr	r1, [pc, #36]	; (ba744 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   ba71e:	4604      	mov	r4, r0
   ba720:	4616      	mov	r6, r2
  String ret;
   ba722:	f000 f85c 	bl	ba7de <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   ba726:	4628      	mov	r0, r5
   ba728:	f7ff ffe1 	bl	ba6ee <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   ba72c:	2800      	cmp	r0, #0
   ba72e:	db06      	blt.n	ba73e <_ZN6Stream15readStringUntilEc+0x26>
   ba730:	4286      	cmp	r6, r0
   ba732:	d004      	beq.n	ba73e <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   ba734:	b2c1      	uxtb	r1, r0
   ba736:	4620      	mov	r0, r4
   ba738:	f000 f8d0 	bl	ba8dc <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   ba73c:	e7f3      	b.n	ba726 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   ba73e:	4620      	mov	r0, r4
   ba740:	bd70      	pop	{r4, r5, r6, pc}
   ba742:	bf00      	nop
   ba744:	000be1d5 	.word	0x000be1d5

000ba748 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   ba748:	b510      	push	{r4, lr}
   ba74a:	4604      	mov	r4, r0
{
	free(buffer);
   ba74c:	6800      	ldr	r0, [r0, #0]
   ba74e:	f7fc fe57 	bl	b7400 <free>
}
   ba752:	4620      	mov	r0, r4
   ba754:	bd10      	pop	{r4, pc}

000ba756 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   ba756:	b510      	push	{r4, lr}
   ba758:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   ba75a:	6800      	ldr	r0, [r0, #0]
   ba75c:	b108      	cbz	r0, ba762 <_ZN6String10invalidateEv+0xc>
   ba75e:	f7fc fe4f 	bl	b7400 <free>
	buffer = NULL;
   ba762:	2300      	movs	r3, #0
	capacity = len = 0;
   ba764:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   ba768:	6023      	str	r3, [r4, #0]
}
   ba76a:	bd10      	pop	{r4, pc}

000ba76c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   ba76c:	b538      	push	{r3, r4, r5, lr}
   ba76e:	4604      	mov	r4, r0
   ba770:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   ba772:	6800      	ldr	r0, [r0, #0]
   ba774:	3101      	adds	r1, #1
   ba776:	f7fc fe4b 	bl	b7410 <realloc>
	if (newbuffer) {
   ba77a:	b110      	cbz	r0, ba782 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   ba77c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   ba780:	2001      	movs	r0, #1
	}
	return 0;
}
   ba782:	bd38      	pop	{r3, r4, r5, pc}

000ba784 <_ZN6String7reserveEj>:
{
   ba784:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   ba786:	6803      	ldr	r3, [r0, #0]
{
   ba788:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   ba78a:	b123      	cbz	r3, ba796 <_ZN6String7reserveEj+0x12>
   ba78c:	6843      	ldr	r3, [r0, #4]
   ba78e:	428b      	cmp	r3, r1
   ba790:	d301      	bcc.n	ba796 <_ZN6String7reserveEj+0x12>
   ba792:	2001      	movs	r0, #1
}
   ba794:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   ba796:	4620      	mov	r0, r4
   ba798:	f7ff ffe8 	bl	ba76c <_ZN6String12changeBufferEj>
   ba79c:	2800      	cmp	r0, #0
   ba79e:	d0f9      	beq.n	ba794 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   ba7a0:	68a3      	ldr	r3, [r4, #8]
   ba7a2:	2b00      	cmp	r3, #0
   ba7a4:	d1f5      	bne.n	ba792 <_ZN6String7reserveEj+0xe>
   ba7a6:	6822      	ldr	r2, [r4, #0]
   ba7a8:	7013      	strb	r3, [r2, #0]
   ba7aa:	e7f2      	b.n	ba792 <_ZN6String7reserveEj+0xe>

000ba7ac <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   ba7ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba7ae:	460d      	mov	r5, r1
	if (!reserve(length)) {
   ba7b0:	4611      	mov	r1, r2
   ba7b2:	9201      	str	r2, [sp, #4]
{
   ba7b4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   ba7b6:	f7ff ffe5 	bl	ba784 <_ZN6String7reserveEj>
   ba7ba:	9a01      	ldr	r2, [sp, #4]
   ba7bc:	b928      	cbnz	r0, ba7ca <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   ba7be:	4620      	mov	r0, r4
   ba7c0:	f7ff ffc9 	bl	ba756 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   ba7c4:	4620      	mov	r0, r4
   ba7c6:	b003      	add	sp, #12
   ba7c8:	bd30      	pop	{r4, r5, pc}
	len = length;
   ba7ca:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   ba7cc:	4629      	mov	r1, r5
   ba7ce:	6820      	ldr	r0, [r4, #0]
   ba7d0:	f001 fa51 	bl	bbc76 <memcpy>
	buffer[len] = 0;
   ba7d4:	6822      	ldr	r2, [r4, #0]
   ba7d6:	68a3      	ldr	r3, [r4, #8]
   ba7d8:	2100      	movs	r1, #0
   ba7da:	54d1      	strb	r1, [r2, r3]
	return *this;
   ba7dc:	e7f2      	b.n	ba7c4 <_ZN6String4copyEPKcj+0x18>

000ba7de <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   ba7de:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   ba7e0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   ba7e2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   ba7e6:	4604      	mov	r4, r0
	len = 0;
   ba7e8:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba7ea:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   ba7ec:	b141      	cbz	r1, ba800 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   ba7ee:	4608      	mov	r0, r1
   ba7f0:	9101      	str	r1, [sp, #4]
   ba7f2:	f001 fade 	bl	bbdb2 <strlen>
   ba7f6:	9901      	ldr	r1, [sp, #4]
   ba7f8:	4602      	mov	r2, r0
   ba7fa:	4620      	mov	r0, r4
   ba7fc:	f7ff ffd6 	bl	ba7ac <_ZN6String4copyEPKcj>
}
   ba800:	4620      	mov	r0, r4
   ba802:	b002      	add	sp, #8
   ba804:	bd10      	pop	{r4, pc}

000ba806 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   ba806:	b538      	push	{r3, r4, r5, lr}
   ba808:	4605      	mov	r5, r0
	if (buffer) {
   ba80a:	6800      	ldr	r0, [r0, #0]
{
   ba80c:	460c      	mov	r4, r1
	if (buffer) {
   ba80e:	b168      	cbz	r0, ba82c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   ba810:	686a      	ldr	r2, [r5, #4]
   ba812:	688b      	ldr	r3, [r1, #8]
   ba814:	429a      	cmp	r2, r3
   ba816:	d307      	bcc.n	ba828 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   ba818:	6809      	ldr	r1, [r1, #0]
   ba81a:	f001 faa4 	bl	bbd66 <strcpy>
			len = rhs.len;
   ba81e:	68a3      	ldr	r3, [r4, #8]
   ba820:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   ba822:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   ba824:	60a3      	str	r3, [r4, #8]
}
   ba826:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   ba828:	f7fc fdea 	bl	b7400 <free>
	buffer = rhs.buffer;
   ba82c:	6823      	ldr	r3, [r4, #0]
   ba82e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   ba830:	6863      	ldr	r3, [r4, #4]
   ba832:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   ba834:	68a3      	ldr	r3, [r4, #8]
   ba836:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   ba838:	2300      	movs	r3, #0
	rhs.capacity = 0;
   ba83a:	e9c4 3300 	strd	r3, r3, [r4]
   ba83e:	e7f1      	b.n	ba824 <_ZN6String4moveERS_+0x1e>

000ba840 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   ba840:	b510      	push	{r4, lr}
	buffer = NULL;
   ba842:	2300      	movs	r3, #0
	capacity = 0;
   ba844:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   ba848:	4604      	mov	r4, r0
	len = 0;
   ba84a:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba84c:	7303      	strb	r3, [r0, #12]
	move(rval);
   ba84e:	f7ff ffda 	bl	ba806 <_ZN6String4moveERS_>
}
   ba852:	4620      	mov	r0, r4
   ba854:	bd10      	pop	{r4, pc}

000ba856 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   ba856:	4288      	cmp	r0, r1
{
   ba858:	b510      	push	{r4, lr}
   ba85a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   ba85c:	d005      	beq.n	ba86a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   ba85e:	680b      	ldr	r3, [r1, #0]
   ba860:	b12b      	cbz	r3, ba86e <_ZN6StringaSERKS_+0x18>
   ba862:	688a      	ldr	r2, [r1, #8]
   ba864:	4619      	mov	r1, r3
   ba866:	f7ff ffa1 	bl	ba7ac <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba86a:	4620      	mov	r0, r4
   ba86c:	bd10      	pop	{r4, pc}
	else invalidate();
   ba86e:	f7ff ff72 	bl	ba756 <_ZN6String10invalidateEv>
   ba872:	e7fa      	b.n	ba86a <_ZN6StringaSERKS_+0x14>

000ba874 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   ba874:	b510      	push	{r4, lr}
	buffer = NULL;
   ba876:	2300      	movs	r3, #0
String::String(const String &value)
   ba878:	4604      	mov	r4, r0
	capacity = 0;
   ba87a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   ba87e:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba880:	7303      	strb	r3, [r0, #12]
	*this = value;
   ba882:	f7ff ffe8 	bl	ba856 <_ZN6StringaSERKS_>
}
   ba886:	4620      	mov	r0, r4
   ba888:	bd10      	pop	{r4, pc}

000ba88a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   ba88a:	b513      	push	{r0, r1, r4, lr}
   ba88c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   ba88e:	b159      	cbz	r1, ba8a8 <_ZN6StringaSEPKc+0x1e>
   ba890:	4608      	mov	r0, r1
   ba892:	9101      	str	r1, [sp, #4]
   ba894:	f001 fa8d 	bl	bbdb2 <strlen>
   ba898:	9901      	ldr	r1, [sp, #4]
   ba89a:	4602      	mov	r2, r0
   ba89c:	4620      	mov	r0, r4
   ba89e:	f7ff ff85 	bl	ba7ac <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba8a2:	4620      	mov	r0, r4
   ba8a4:	b002      	add	sp, #8
   ba8a6:	bd10      	pop	{r4, pc}
	else invalidate();
   ba8a8:	f7ff ff55 	bl	ba756 <_ZN6String10invalidateEv>
   ba8ac:	e7f9      	b.n	ba8a2 <_ZN6StringaSEPKc+0x18>

000ba8ae <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   ba8ae:	b570      	push	{r4, r5, r6, lr}
   ba8b0:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   ba8b2:	460e      	mov	r6, r1
   ba8b4:	b909      	cbnz	r1, ba8ba <_ZN6String6concatEPKcj+0xc>
   ba8b6:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   ba8b8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   ba8ba:	b16a      	cbz	r2, ba8d8 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   ba8bc:	6884      	ldr	r4, [r0, #8]
   ba8be:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   ba8c0:	4621      	mov	r1, r4
   ba8c2:	f7ff ff5f 	bl	ba784 <_ZN6String7reserveEj>
   ba8c6:	2800      	cmp	r0, #0
   ba8c8:	d0f5      	beq.n	ba8b6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   ba8ca:	6828      	ldr	r0, [r5, #0]
   ba8cc:	68ab      	ldr	r3, [r5, #8]
   ba8ce:	4631      	mov	r1, r6
   ba8d0:	4418      	add	r0, r3
   ba8d2:	f001 fa48 	bl	bbd66 <strcpy>
	len = newlen;
   ba8d6:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   ba8d8:	2001      	movs	r0, #1
   ba8da:	e7ed      	b.n	ba8b8 <_ZN6String6concatEPKcj+0xa>

000ba8dc <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   ba8dc:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   ba8de:	2300      	movs	r3, #0
	buf[0] = c;
   ba8e0:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   ba8e4:	2201      	movs	r2, #1
   ba8e6:	a901      	add	r1, sp, #4
	buf[1] = 0;
   ba8e8:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   ba8ec:	f7ff ffdf 	bl	ba8ae <_ZN6String6concatEPKcj>
}
   ba8f0:	b003      	add	sp, #12
   ba8f2:	f85d fb04 	ldr.w	pc, [sp], #4

000ba8f6 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   ba8f6:	6802      	ldr	r2, [r0, #0]
{
   ba8f8:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   ba8fa:	6809      	ldr	r1, [r1, #0]
   ba8fc:	b162      	cbz	r2, ba918 <_ZNK6String9compareToERKS_+0x22>
   ba8fe:	b941      	cbnz	r1, ba912 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   ba900:	6880      	ldr	r0, [r0, #8]
   ba902:	b160      	cbz	r0, ba91e <_ZNK6String9compareToERKS_+0x28>
   ba904:	7810      	ldrb	r0, [r2, #0]
   ba906:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   ba908:	6898      	ldr	r0, [r3, #8]
   ba90a:	b140      	cbz	r0, ba91e <_ZNK6String9compareToERKS_+0x28>
   ba90c:	7809      	ldrb	r1, [r1, #0]
   ba90e:	4248      	negs	r0, r1
   ba910:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   ba912:	4610      	mov	r0, r2
   ba914:	f001 ba1d 	b.w	bbd52 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   ba918:	2900      	cmp	r1, #0
   ba91a:	d1f5      	bne.n	ba908 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   ba91c:	4608      	mov	r0, r1
}
   ba91e:	4770      	bx	lr

000ba920 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   ba920:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   ba922:	6882      	ldr	r2, [r0, #8]
   ba924:	688b      	ldr	r3, [r1, #8]
   ba926:	429a      	cmp	r2, r3
   ba928:	d105      	bne.n	ba936 <_ZNK6String6equalsERKS_+0x16>
   ba92a:	f7ff ffe4 	bl	ba8f6 <_ZNK6String9compareToERKS_>
   ba92e:	fab0 f080 	clz	r0, r0
   ba932:	0940      	lsrs	r0, r0, #5
}
   ba934:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   ba936:	2000      	movs	r0, #0
   ba938:	e7fc      	b.n	ba934 <_ZNK6String6equalsERKS_+0x14>

000ba93a <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   ba93a:	6883      	ldr	r3, [r0, #8]
   ba93c:	428b      	cmp	r3, r1
   ba93e:	d903      	bls.n	ba948 <_ZNK6StringixEj+0xe>
   ba940:	6800      	ldr	r0, [r0, #0]
   ba942:	b110      	cbz	r0, ba94a <_ZNK6StringixEj+0x10>
	return buffer[index];
   ba944:	5c40      	ldrb	r0, [r0, r1]
   ba946:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   ba948:	2000      	movs	r0, #0
}
   ba94a:	4770      	bx	lr

000ba94c <_ZNK6String6charAtEj>:
	return operator[](loc);
   ba94c:	f7ff bff5 	b.w	ba93a <_ZNK6StringixEj>

000ba950 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   ba950:	4b05      	ldr	r3, [pc, #20]	; (ba968 <_GLOBAL__sub_I_System+0x18>)
   ba952:	2202      	movs	r2, #2
   ba954:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   ba956:	4b05      	ldr	r3, [pc, #20]	; (ba96c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   ba958:	4a05      	ldr	r2, [pc, #20]	; (ba970 <_GLOBAL__sub_I_System+0x20>)
   ba95a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   ba95c:	2000      	movs	r0, #0
   ba95e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   ba962:	f7fc bc79 	b.w	b7258 <set_system_mode>
   ba966:	bf00      	nop
   ba968:	2003e6bc 	.word	0x2003e6bc
   ba96c:	2003e6b0 	.word	0x2003e6b0
   ba970:	ffff0000 	.word	0xffff0000

000ba974 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   ba974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   ba978:	4a15      	ldr	r2, [pc, #84]	; (ba9d0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   ba97a:	f8df 8060 	ldr.w	r8, [pc, #96]	; ba9dc <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   ba97e:	e9d2 6300 	ldrd	r6, r3, [r2]
   ba982:	1980      	adds	r0, r0, r6
   ba984:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   ba988:	4b12      	ldr	r3, [pc, #72]	; (ba9d4 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   ba98a:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   ba98e:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   ba992:	1986      	adds	r6, r0, r6
   ba994:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   ba998:	42bb      	cmp	r3, r7
   ba99a:	bf08      	it	eq
   ba99c:	42b2      	cmpeq	r2, r6
{
   ba99e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   ba9a0:	d013      	beq.n	ba9ca <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   ba9a2:	a903      	add	r1, sp, #12
   ba9a4:	4668      	mov	r0, sp
   ba9a6:	e9cd 6700 	strd	r6, r7, [sp]
   ba9aa:	f7fc fd81 	bl	b74b0 <localtime_r>
	calendar_time.tm_year += 1900;
   ba9ae:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba9b0:	4d09      	ldr	r5, [pc, #36]	; (ba9d8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   ba9b2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba9b6:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   ba9b8:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba9ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba9bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   ba9be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba9c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   ba9c2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba9c6:	6823      	ldr	r3, [r4, #0]
   ba9c8:	602b      	str	r3, [r5, #0]
    }
}
   ba9ca:	b00c      	add	sp, #48	; 0x30
   ba9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba9d0:	2003e6f0 	.word	0x2003e6f0
   ba9d4:	2003e6e8 	.word	0x2003e6e8
   ba9d8:	2003e6c4 	.word	0x2003e6c4
   ba9dc:	2003e6f8 	.word	0x2003e6f8

000ba9e0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   ba9e0:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   ba9e2:	2000      	movs	r0, #0
   ba9e4:	f7fc fc94 	bl	b7310 <spark_sync_time_pending>
   ba9e8:	b128      	cbz	r0, ba9f6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   ba9ea:	f7fc fc79 	bl	b72e0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   ba9ee:	f080 0001 	eor.w	r0, r0, #1
   ba9f2:	b2c0      	uxtb	r0, r0
    }
   ba9f4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   ba9f6:	2001      	movs	r0, #1
   ba9f8:	e7fc      	b.n	ba9f4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000ba9fc <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   ba9fc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   ba9fe:	f7ff ffb9 	bl	ba974 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   baa02:	4b02      	ldr	r3, [pc, #8]	; (baa0c <_ZN9TimeClass5monthEx+0x10>)
   baa04:	6918      	ldr	r0, [r3, #16]
}
   baa06:	3001      	adds	r0, #1
   baa08:	bd08      	pop	{r3, pc}
   baa0a:	bf00      	nop
   baa0c:	2003e6c4 	.word	0x2003e6c4

000baa10 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   baa10:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   baa12:	2000      	movs	r0, #0
   baa14:	f7fc fab0 	bl	b6f78 <hal_rtc_time_is_valid>
    if (rtcstate)
   baa18:	4604      	mov	r4, r0
   baa1a:	b9a0      	cbnz	r0, baa46 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   baa1c:	f7fc fc14 	bl	b7248 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   baa20:	2801      	cmp	r0, #1
   baa22:	d110      	bne.n	baa46 <_ZN9TimeClass7isValidEv+0x36>
   baa24:	4620      	mov	r0, r4
   baa26:	f7fc fc37 	bl	b7298 <system_thread_get_state>
   baa2a:	b960      	cbnz	r0, baa46 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   baa2c:	f7ff ffd8 	bl	ba9e0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   baa30:	b910      	cbnz	r0, baa38 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   baa32:	f7fc fc4d 	bl	b72d0 <spark_process>
        while (_while() && !_condition()) {
   baa36:	e7f9      	b.n	baa2c <_ZN9TimeClass7isValidEv+0x1c>
   baa38:	f7ff ffd2 	bl	ba9e0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   baa3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   baa40:	2000      	movs	r0, #0
   baa42:	f7fc ba99 	b.w	b6f78 <hal_rtc_time_is_valid>
}
   baa46:	4620      	mov	r0, r4
   baa48:	bd10      	pop	{r4, pc}

000baa4a <_ZN9TimeClass3nowEv>:
{
   baa4a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   baa4c:	f7ff ffe0 	bl	baa10 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   baa50:	2210      	movs	r2, #16
   baa52:	2100      	movs	r1, #0
   baa54:	4668      	mov	r0, sp
   baa56:	f001 f936 	bl	bbcc6 <memset>
    hal_rtc_get_time(&tv, nullptr);
   baa5a:	2100      	movs	r1, #0
   baa5c:	4668      	mov	r0, sp
   baa5e:	f7fc fa93 	bl	b6f88 <hal_rtc_get_time>
}
   baa62:	9800      	ldr	r0, [sp, #0]
   baa64:	b005      	add	sp, #20
   baa66:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000baa6c <_ZN9TimeClass4hourEv>:
{
   baa6c:	b508      	push	{r3, lr}
	return hour(now());
   baa6e:	f7ff ffec 	bl	baa4a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   baa72:	17c1      	asrs	r1, r0, #31
   baa74:	f7ff ff7e 	bl	ba974 <_ZL22Refresh_UnixTime_Cachex>
}
   baa78:	4b01      	ldr	r3, [pc, #4]	; (baa80 <_ZN9TimeClass4hourEv+0x14>)
   baa7a:	6898      	ldr	r0, [r3, #8]
   baa7c:	bd08      	pop	{r3, pc}
   baa7e:	bf00      	nop
   baa80:	2003e6c4 	.word	0x2003e6c4

000baa84 <_ZN9TimeClass6minuteEv>:
{
   baa84:	b508      	push	{r3, lr}
	return minute(now());
   baa86:	f7ff ffe0 	bl	baa4a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   baa8a:	17c1      	asrs	r1, r0, #31
   baa8c:	f7ff ff72 	bl	ba974 <_ZL22Refresh_UnixTime_Cachex>
}
   baa90:	4b01      	ldr	r3, [pc, #4]	; (baa98 <_ZN9TimeClass6minuteEv+0x14>)
   baa92:	6858      	ldr	r0, [r3, #4]
   baa94:	bd08      	pop	{r3, pc}
   baa96:	bf00      	nop
   baa98:	2003e6c4 	.word	0x2003e6c4

000baa9c <_ZN9TimeClass6secondEv>:
{
   baa9c:	b508      	push	{r3, lr}
	return second(now());
   baa9e:	f7ff ffd4 	bl	baa4a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   baaa2:	17c1      	asrs	r1, r0, #31
   baaa4:	f7ff ff66 	bl	ba974 <_ZL22Refresh_UnixTime_Cachex>
}
   baaa8:	4b01      	ldr	r3, [pc, #4]	; (baab0 <_ZN9TimeClass6secondEv+0x14>)
   baaaa:	6818      	ldr	r0, [r3, #0]
   baaac:	bd08      	pop	{r3, pc}
   baaae:	bf00      	nop
   baab0:	2003e6c4 	.word	0x2003e6c4

000baab4 <_ZN9TimeClass3dayEv>:
{
   baab4:	b508      	push	{r3, lr}
	return day(now());
   baab6:	f7ff ffc8 	bl	baa4a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   baaba:	17c1      	asrs	r1, r0, #31
   baabc:	f7ff ff5a 	bl	ba974 <_ZL22Refresh_UnixTime_Cachex>
}
   baac0:	4b01      	ldr	r3, [pc, #4]	; (baac8 <_ZN9TimeClass3dayEv+0x14>)
   baac2:	68d8      	ldr	r0, [r3, #12]
   baac4:	bd08      	pop	{r3, pc}
   baac6:	bf00      	nop
   baac8:	2003e6c4 	.word	0x2003e6c4

000baacc <_ZN9TimeClass5monthEv>:
{
   baacc:	b508      	push	{r3, lr}
	return month(now());
   baace:	f7ff ffbc 	bl	baa4a <_ZN9TimeClass3nowEv>
}
   baad2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   baad6:	17c1      	asrs	r1, r0, #31
   baad8:	f7ff bf90 	b.w	ba9fc <_ZN9TimeClass5monthEx>

000baadc <_ZN9TimeClass4yearEv>:
{
   baadc:	b508      	push	{r3, lr}
	return year(now());
   baade:	f7ff ffb4 	bl	baa4a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   baae2:	17c1      	asrs	r1, r0, #31
   baae4:	f7ff ff46 	bl	ba974 <_ZL22Refresh_UnixTime_Cachex>
}
   baae8:	4b01      	ldr	r3, [pc, #4]	; (baaf0 <_ZN9TimeClass4yearEv+0x14>)
   baaea:	6958      	ldr	r0, [r3, #20]
   baaec:	bd08      	pop	{r3, pc}
   baaee:	bf00      	nop
   baaf0:	2003e6c4 	.word	0x2003e6c4

000baaf4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   baaf4:	4b02      	ldr	r3, [pc, #8]	; (bab00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   baaf6:	681a      	ldr	r2, [r3, #0]
   baaf8:	4b02      	ldr	r3, [pc, #8]	; (bab04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   baafa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   baafc:	4770      	bx	lr
   baafe:	bf00      	nop
   bab00:	2003db18 	.word	0x2003db18
   bab04:	2003e6c0 	.word	0x2003e6c0

000bab08 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bab08:	4770      	bx	lr

000bab0a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bab0a:	7441      	strb	r1, [r0, #17]
}
   bab0c:	4770      	bx	lr

000bab0e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bab0e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bab10:	7c00      	ldrb	r0, [r0, #16]
   bab12:	f7fc fb39 	bl	b7188 <hal_usart_available_data_for_write>
}
   bab16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bab1a:	bd08      	pop	{r3, pc}

000bab1c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bab1c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bab1e:	7c00      	ldrb	r0, [r0, #16]
   bab20:	f7fc fb0a 	bl	b7138 <hal_usart_available>
}
   bab24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bab28:	bd08      	pop	{r3, pc}

000bab2a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bab2a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bab2c:	7c00      	ldrb	r0, [r0, #16]
   bab2e:	f7fc fb13 	bl	b7158 <hal_usart_peek>
}
   bab32:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bab36:	bd08      	pop	{r3, pc}

000bab38 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bab38:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bab3a:	7c00      	ldrb	r0, [r0, #16]
   bab3c:	f7fc fb04 	bl	b7148 <hal_usart_read>
}
   bab40:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bab44:	bd08      	pop	{r3, pc}

000bab46 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bab46:	7c00      	ldrb	r0, [r0, #16]
   bab48:	f7fc bb0e 	b.w	b7168 <hal_usart_flush>

000bab4c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bab4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bab4e:	7c45      	ldrb	r5, [r0, #17]
{
   bab50:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bab52:	b12d      	cbz	r5, bab60 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bab54:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bab56:	b003      	add	sp, #12
   bab58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bab5c:	f7fc bae4 	b.w	b7128 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bab60:	7c00      	ldrb	r0, [r0, #16]
   bab62:	9101      	str	r1, [sp, #4]
   bab64:	f7fc fb10 	bl	b7188 <hal_usart_available_data_for_write>
   bab68:	2800      	cmp	r0, #0
   bab6a:	9901      	ldr	r1, [sp, #4]
   bab6c:	dcf2      	bgt.n	bab54 <_ZN11USARTSerial5writeEh+0x8>
}
   bab6e:	4628      	mov	r0, r5
   bab70:	b003      	add	sp, #12
   bab72:	bd30      	pop	{r4, r5, pc}

000bab74 <_ZN11USARTSerialD0Ev>:
   bab74:	b510      	push	{r4, lr}
   bab76:	2114      	movs	r1, #20
   bab78:	4604      	mov	r4, r0
   bab7a:	f7f9 fa90 	bl	b409e <_ZdlPvj>
   bab7e:	4620      	mov	r0, r4
   bab80:	bd10      	pop	{r4, pc}
	...

000bab84 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bab84:	b510      	push	{r4, lr}
   bab86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bab8a:	4604      	mov	r4, r0
   bab8c:	4608      	mov	r0, r1
   bab8e:	4611      	mov	r1, r2
   bab90:	2200      	movs	r2, #0
   bab92:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bab96:	4b04      	ldr	r3, [pc, #16]	; (baba8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bab98:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bab9a:	2301      	movs	r3, #1
  _serial = serial;
   bab9c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bab9e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   baba0:	f7fc fb02 	bl	b71a8 <hal_usart_init_ex>
}
   baba4:	4620      	mov	r0, r4
   baba6:	bd10      	pop	{r4, pc}
   baba8:	000be764 	.word	0x000be764

000babac <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   babac:	7c00      	ldrb	r0, [r0, #16]
   babae:	2300      	movs	r3, #0
   babb0:	f7fc baf2 	b.w	b7198 <hal_usart_begin_config>

000babb4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   babb4:	2200      	movs	r2, #0
   babb6:	f7ff bff9 	b.w	babac <_ZN11USARTSerial5beginEmm>

000babba <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   babba:	7441      	strb	r1, [r0, #17]
}
   babbc:	4770      	bx	lr

000babbe <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   babbe:	4770      	bx	lr

000babc0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   babc0:	4770      	bx	lr

000babc2 <_ZN9USBSerial4readEv>:
{
   babc2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   babc4:	2100      	movs	r1, #0
   babc6:	7c00      	ldrb	r0, [r0, #16]
   babc8:	f7fc fb16 	bl	b71f8 <HAL_USB_USART_Receive_Data>
}
   babcc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   babd0:	bd08      	pop	{r3, pc}

000babd2 <_ZN9USBSerial4peekEv>:
{
   babd2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   babd4:	2101      	movs	r1, #1
   babd6:	7c00      	ldrb	r0, [r0, #16]
   babd8:	f7fc fb0e 	bl	b71f8 <HAL_USB_USART_Receive_Data>
}
   babdc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   babe0:	bd08      	pop	{r3, pc}

000babe2 <_ZN9USBSerial17availableForWriteEv>:
{
   babe2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   babe4:	7c00      	ldrb	r0, [r0, #16]
   babe6:	f7fc faff 	bl	b71e8 <HAL_USB_USART_Available_Data_For_Write>
}
   babea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   babee:	bd08      	pop	{r3, pc}

000babf0 <_ZN9USBSerial9availableEv>:
{
   babf0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   babf2:	7c00      	ldrb	r0, [r0, #16]
   babf4:	f7fc faf0 	bl	b71d8 <HAL_USB_USART_Available_Data>
}
   babf8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   babfc:	bd08      	pop	{r3, pc}

000babfe <_ZN9USBSerial5writeEh>:
{
   babfe:	b513      	push	{r0, r1, r4, lr}
   bac00:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bac02:	7c00      	ldrb	r0, [r0, #16]
{
   bac04:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bac06:	f7fc faef 	bl	b71e8 <HAL_USB_USART_Available_Data_For_Write>
   bac0a:	2800      	cmp	r0, #0
   bac0c:	9901      	ldr	r1, [sp, #4]
   bac0e:	dc01      	bgt.n	bac14 <_ZN9USBSerial5writeEh+0x16>
   bac10:	7c60      	ldrb	r0, [r4, #17]
   bac12:	b120      	cbz	r0, bac1e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bac14:	7c20      	ldrb	r0, [r4, #16]
   bac16:	f7fc faf7 	bl	b7208 <HAL_USB_USART_Send_Data>
   bac1a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bac1e:	b002      	add	sp, #8
   bac20:	bd10      	pop	{r4, pc}

000bac22 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bac22:	7c00      	ldrb	r0, [r0, #16]
   bac24:	f7fc baf8 	b.w	b7218 <HAL_USB_USART_Flush_Data>

000bac28 <_ZN9USBSerialD0Ev>:
   bac28:	b510      	push	{r4, lr}
   bac2a:	2114      	movs	r1, #20
   bac2c:	4604      	mov	r4, r0
   bac2e:	f7f9 fa36 	bl	b409e <_ZdlPvj>
   bac32:	4620      	mov	r0, r4
   bac34:	bd10      	pop	{r4, pc}
	...

000bac38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bac38:	b510      	push	{r4, lr}
   bac3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bac3e:	4604      	mov	r4, r0
   bac40:	4608      	mov	r0, r1
   bac42:	2100      	movs	r1, #0
   bac44:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bac48:	4b04      	ldr	r3, [pc, #16]	; (bac5c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bac4a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bac4c:	2301      	movs	r3, #1
  _serial = serial;
   bac4e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bac50:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bac52:	4611      	mov	r1, r2
   bac54:	f7fc fab0 	bl	b71b8 <HAL_USB_USART_Init>
}
   bac58:	4620      	mov	r0, r4
   bac5a:	bd10      	pop	{r4, pc}
   bac5c:	000be794 	.word	0x000be794

000bac60 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bac60:	7c00      	ldrb	r0, [r0, #16]
   bac62:	2200      	movs	r2, #0
   bac64:	f7fc bab0 	b.w	b71c8 <HAL_USB_USART_Begin>

000bac68 <_Z19acquireSerialBufferv>:
{
   bac68:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bac6a:	2214      	movs	r2, #20
{
   bac6c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bac6e:	2100      	movs	r1, #0
   bac70:	f001 f829 	bl	bbcc6 <memset>
}
   bac74:	4620      	mov	r0, r4
   bac76:	bd10      	pop	{r4, pc}

000bac78 <_Z16_fetch_usbserialv>:
{
   bac78:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bac7a:	4c0f      	ldr	r4, [pc, #60]	; (bacb8 <_Z16_fetch_usbserialv+0x40>)
{
   bac7c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bac7e:	a803      	add	r0, sp, #12
   bac80:	f7ff fff2 	bl	bac68 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bac84:	7821      	ldrb	r1, [r4, #0]
   bac86:	f3bf 8f5b 	dmb	ish
   bac8a:	f011 0101 	ands.w	r1, r1, #1
   bac8e:	d10f      	bne.n	bacb0 <_Z16_fetch_usbserialv+0x38>
   bac90:	4620      	mov	r0, r4
   bac92:	9101      	str	r1, [sp, #4]
   bac94:	f7f9 fa05 	bl	b40a2 <__cxa_guard_acquire>
   bac98:	9901      	ldr	r1, [sp, #4]
   bac9a:	b148      	cbz	r0, bacb0 <_Z16_fetch_usbserialv+0x38>
   bac9c:	aa03      	add	r2, sp, #12
   bac9e:	4807      	ldr	r0, [pc, #28]	; (bacbc <_Z16_fetch_usbserialv+0x44>)
   baca0:	f7ff ffca 	bl	bac38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   baca4:	4620      	mov	r0, r4
   baca6:	f7f9 fa01 	bl	b40ac <__cxa_guard_release>
   bacaa:	4805      	ldr	r0, [pc, #20]	; (bacc0 <_Z16_fetch_usbserialv+0x48>)
   bacac:	f000 ffc6 	bl	bbc3c <atexit>
	return _usbserial;
}
   bacb0:	4802      	ldr	r0, [pc, #8]	; (bacbc <_Z16_fetch_usbserialv+0x44>)
   bacb2:	b008      	add	sp, #32
   bacb4:	bd10      	pop	{r4, pc}
   bacb6:	bf00      	nop
   bacb8:	2003e700 	.word	0x2003e700
   bacbc:	2003e704 	.word	0x2003e704
   bacc0:	000babbf 	.word	0x000babbf

000bacc4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bacc4:	4b01      	ldr	r3, [pc, #4]	; (baccc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bacc6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bacc8:	4770      	bx	lr
   bacca:	bf00      	nop
   baccc:	2003db1c 	.word	0x2003db1c

000bacd0 <serialEventRun>:
{
   bacd0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bacd2:	4b0b      	ldr	r3, [pc, #44]	; (bad00 <serialEventRun+0x30>)
   bacd4:	b143      	cbz	r3, bace8 <serialEventRun+0x18>
   bacd6:	f7ff ffcf 	bl	bac78 <_Z16_fetch_usbserialv>
   bacda:	6803      	ldr	r3, [r0, #0]
   bacdc:	691b      	ldr	r3, [r3, #16]
   bacde:	4798      	blx	r3
   bace0:	2800      	cmp	r0, #0
   bace2:	dd01      	ble.n	bace8 <serialEventRun+0x18>
        serialEvent();
   bace4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bace8:	4b06      	ldr	r3, [pc, #24]	; (bad04 <serialEventRun+0x34>)
   bacea:	b143      	cbz	r3, bacfe <serialEventRun+0x2e>
   bacec:	f000 f95c 	bl	bafa8 <_Z22__fetch_global_Serial1v>
   bacf0:	6803      	ldr	r3, [r0, #0]
   bacf2:	691b      	ldr	r3, [r3, #16]
   bacf4:	4798      	blx	r3
   bacf6:	2800      	cmp	r0, #0
   bacf8:	dd01      	ble.n	bacfe <serialEventRun+0x2e>
        serialEvent1();
   bacfa:	f3af 8000 	nop.w
}
   bacfe:	bd08      	pop	{r3, pc}
	...

000bad08 <_post_loop>:
{
   bad08:	b508      	push	{r3, lr}
	serialEventRun();
   bad0a:	f7ff ffe1 	bl	bacd0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bad0e:	f7fc f92b 	bl	b6f68 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bad12:	4b01      	ldr	r3, [pc, #4]	; (bad18 <_post_loop+0x10>)
   bad14:	6018      	str	r0, [r3, #0]
}
   bad16:	bd08      	pop	{r3, pc}
   bad18:	2003e72c 	.word	0x2003e72c

000bad1c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bad1c:	4805      	ldr	r0, [pc, #20]	; (bad34 <_Z33system_initialize_user_backup_ramv+0x18>)
   bad1e:	4a06      	ldr	r2, [pc, #24]	; (bad38 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bad20:	4906      	ldr	r1, [pc, #24]	; (bad3c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bad22:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bad24:	1a12      	subs	r2, r2, r0
   bad26:	f000 ffa6 	bl	bbc76 <memcpy>
    __backup_sram_signature = signature;
   bad2a:	4b05      	ldr	r3, [pc, #20]	; (bad40 <_Z33system_initialize_user_backup_ramv+0x24>)
   bad2c:	4a05      	ldr	r2, [pc, #20]	; (bad44 <_Z33system_initialize_user_backup_ramv+0x28>)
   bad2e:	601a      	str	r2, [r3, #0]
}
   bad30:	bd08      	pop	{r3, pc}
   bad32:	bf00      	nop
   bad34:	2003f400 	.word	0x2003f400
   bad38:	2003f404 	.word	0x2003f404
   bad3c:	000becb4 	.word	0x000becb4
   bad40:	2003f400 	.word	0x2003f400
   bad44:	9a271c1e 	.word	0x9a271c1e

000bad48 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bad48:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bad4a:	2300      	movs	r3, #0
   bad4c:	9300      	str	r3, [sp, #0]
   bad4e:	461a      	mov	r2, r3
   bad50:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bad54:	f7fc fab2 	bl	b72bc <system_ctrl_set_result>
}
   bad58:	b003      	add	sp, #12
   bad5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bad60 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bad60:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bad62:	8843      	ldrh	r3, [r0, #2]
   bad64:	2b0a      	cmp	r3, #10
   bad66:	d008      	beq.n	bad7a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bad68:	2b50      	cmp	r3, #80	; 0x50
   bad6a:	d10b      	bne.n	bad84 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bad6c:	4b09      	ldr	r3, [pc, #36]	; (bad94 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bad6e:	681b      	ldr	r3, [r3, #0]
   bad70:	b14b      	cbz	r3, bad86 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bad72:	b003      	add	sp, #12
   bad74:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bad78:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bad7a:	f7ff ffe5 	bl	bad48 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bad7e:	b003      	add	sp, #12
   bad80:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bad84:	2300      	movs	r3, #0
   bad86:	9300      	str	r3, [sp, #0]
   bad88:	461a      	mov	r2, r3
   bad8a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bad8e:	f7fc fa95 	bl	b72bc <system_ctrl_set_result>
}
   bad92:	e7f4      	b.n	bad7e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bad94:	2003e71c 	.word	0x2003e71c

000bad98 <module_user_init_hook>:
{
   bad98:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bad9a:	4812      	ldr	r0, [pc, #72]	; (bade4 <module_user_init_hook+0x4c>)
   bad9c:	2100      	movs	r1, #0
   bad9e:	f7fc fb7f 	bl	b74a0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bada2:	4b11      	ldr	r3, [pc, #68]	; (bade8 <module_user_init_hook+0x50>)
   bada4:	681a      	ldr	r2, [r3, #0]
   bada6:	4b11      	ldr	r3, [pc, #68]	; (badec <module_user_init_hook+0x54>)
   bada8:	429a      	cmp	r2, r3
   badaa:	4b11      	ldr	r3, [pc, #68]	; (badf0 <module_user_init_hook+0x58>)
   badac:	bf0c      	ite	eq
   badae:	2201      	moveq	r2, #1
   badb0:	2200      	movne	r2, #0
   badb2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   badb4:	d001      	beq.n	badba <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   badb6:	f7ff ffb1 	bl	bad1c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   badba:	f7fc f8bd 	bl	b6f38 <HAL_RNG_GetRandomNumber>
   badbe:	4604      	mov	r4, r0
    srand(seed);
   badc0:	f000 ff8a 	bl	bbcd8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   badc4:	4b0b      	ldr	r3, [pc, #44]	; (badf4 <module_user_init_hook+0x5c>)
   badc6:	b113      	cbz	r3, badce <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   badc8:	4620      	mov	r0, r4
   badca:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   badce:	2100      	movs	r1, #0
   badd0:	4808      	ldr	r0, [pc, #32]	; (badf4 <module_user_init_hook+0x5c>)
   badd2:	f7fc faa5 	bl	b7320 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   badd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   badda:	4807      	ldr	r0, [pc, #28]	; (badf8 <module_user_init_hook+0x60>)
   baddc:	2100      	movs	r1, #0
   badde:	f7fc ba63 	b.w	b72a8 <system_ctrl_set_app_request_handler>
   bade2:	bf00      	nop
   bade4:	000bacc5 	.word	0x000bacc5
   bade8:	2003f400 	.word	0x2003f400
   badec:	9a271c1e 	.word	0x9a271c1e
   badf0:	2003e718 	.word	0x2003e718
   badf4:	00000000 	.word	0x00000000
   badf8:	000bad61 	.word	0x000bad61

000badfc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   badfc:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   badfe:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bae00:	d902      	bls.n	bae08 <pinAvailable+0xc>
    return false;
   bae02:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bae04:	b002      	add	sp, #8
   bae06:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bae08:	f1a0 030b 	sub.w	r3, r0, #11
   bae0c:	2b02      	cmp	r3, #2
   bae0e:	d81a      	bhi.n	bae46 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bae10:	4c17      	ldr	r4, [pc, #92]	; (bae70 <pinAvailable+0x74>)
   bae12:	7821      	ldrb	r1, [r4, #0]
   bae14:	f3bf 8f5b 	dmb	ish
   bae18:	f011 0101 	ands.w	r1, r1, #1
   bae1c:	d10b      	bne.n	bae36 <pinAvailable+0x3a>
   bae1e:	4620      	mov	r0, r4
   bae20:	9101      	str	r1, [sp, #4]
   bae22:	f7f9 f93e 	bl	b40a2 <__cxa_guard_acquire>
   bae26:	9901      	ldr	r1, [sp, #4]
   bae28:	b128      	cbz	r0, bae36 <pinAvailable+0x3a>
   bae2a:	4812      	ldr	r0, [pc, #72]	; (bae74 <pinAvailable+0x78>)
   bae2c:	f7ff fba0 	bl	ba570 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bae30:	4620      	mov	r0, r4
   bae32:	f7f9 f93b 	bl	b40ac <__cxa_guard_release>
   bae36:	4b0f      	ldr	r3, [pc, #60]	; (bae74 <pinAvailable+0x78>)
   bae38:	7818      	ldrb	r0, [r3, #0]
   bae3a:	f7fc f93d 	bl	b70b8 <hal_spi_is_enabled>
   bae3e:	2800      	cmp	r0, #0
   bae40:	d1df      	bne.n	bae02 <pinAvailable+0x6>
  return true; // 'pin' is available
   bae42:	2001      	movs	r0, #1
   bae44:	e7de      	b.n	bae04 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bae46:	2801      	cmp	r0, #1
   bae48:	d809      	bhi.n	bae5e <pinAvailable+0x62>
   bae4a:	f000 f86d 	bl	baf28 <_Z19__fetch_global_Wirev>
   bae4e:	2100      	movs	r1, #0
   bae50:	7c00      	ldrb	r0, [r0, #16]
   bae52:	f7fc f8f1 	bl	b7038 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bae56:	f080 0001 	eor.w	r0, r0, #1
   bae5a:	b2c0      	uxtb	r0, r0
   bae5c:	e7d2      	b.n	bae04 <pinAvailable+0x8>
   bae5e:	3809      	subs	r0, #9
   bae60:	2801      	cmp	r0, #1
   bae62:	d8ee      	bhi.n	bae42 <pinAvailable+0x46>
   bae64:	f000 f8a0 	bl	bafa8 <_Z22__fetch_global_Serial1v>
   bae68:	7c00      	ldrb	r0, [r0, #16]
   bae6a:	f7fc f985 	bl	b7178 <hal_usart_is_enabled>
   bae6e:	e7f2      	b.n	bae56 <pinAvailable+0x5a>
   bae70:	2003e720 	.word	0x2003e720
   bae74:	2003e724 	.word	0x2003e724

000bae78 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bae78:	2825      	cmp	r0, #37	; 0x25
{
   bae7a:	b538      	push	{r3, r4, r5, lr}
   bae7c:	4604      	mov	r4, r0
   bae7e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bae80:	d80a      	bhi.n	bae98 <pinMode+0x20>
   bae82:	29ff      	cmp	r1, #255	; 0xff
   bae84:	d008      	beq.n	bae98 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bae86:	f7ff ffb9 	bl	badfc <pinAvailable>
   bae8a:	b128      	cbz	r0, bae98 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bae8c:	4629      	mov	r1, r5
   bae8e:	4620      	mov	r0, r4
}
   bae90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bae94:	f7fc b888 	b.w	b6fa8 <HAL_Pin_Mode>
}
   bae98:	bd38      	pop	{r3, r4, r5, pc}

000bae9a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bae9a:	b538      	push	{r3, r4, r5, lr}
   bae9c:	4604      	mov	r4, r0
   bae9e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   baea0:	f7fc f88a 	bl	b6fb8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   baea4:	28ff      	cmp	r0, #255	; 0xff
   baea6:	d010      	beq.n	baeca <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   baea8:	2806      	cmp	r0, #6
   baeaa:	d804      	bhi.n	baeb6 <digitalWrite+0x1c>
   baeac:	234d      	movs	r3, #77	; 0x4d
   baeae:	fa23 f000 	lsr.w	r0, r3, r0
   baeb2:	07c3      	lsls	r3, r0, #31
   baeb4:	d409      	bmi.n	baeca <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   baeb6:	4620      	mov	r0, r4
   baeb8:	f7ff ffa0 	bl	badfc <pinAvailable>
   baebc:	b128      	cbz	r0, baeca <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   baebe:	4629      	mov	r1, r5
   baec0:	4620      	mov	r0, r4
}
   baec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   baec6:	f7fc b87f 	b.w	b6fc8 <HAL_GPIO_Write>
}
   baeca:	bd38      	pop	{r3, r4, r5, pc}

000baecc <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   baecc:	280d      	cmp	r0, #13
{
   baece:	b510      	push	{r4, lr}
   baed0:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   baed2:	bf9c      	itt	ls
   baed4:	340e      	addls	r4, #14
   baed6:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   baed8:	4620      	mov	r0, r4
   baeda:	f7ff ff8f 	bl	badfc <pinAvailable>
   baede:	b150      	cbz	r0, baef6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   baee0:	2103      	movs	r1, #3
   baee2:	4620      	mov	r0, r4
   baee4:	f7fc f858 	bl	b6f98 <HAL_Validate_Pin_Function>
   baee8:	2803      	cmp	r0, #3
   baeea:	d104      	bne.n	baef6 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   baeec:	4620      	mov	r0, r4
}
   baeee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   baef2:	f7fc b871 	b.w	b6fd8 <hal_adc_read>
}
   baef6:	2000      	movs	r0, #0
   baef8:	bd10      	pop	{r4, pc}

000baefa <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   baefa:	4770      	bx	lr

000baefc <_Z17acquireWireBufferv>:
{
   baefc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   baefe:	2520      	movs	r5, #32
   baf00:	2314      	movs	r3, #20
{
   baf02:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   baf04:	6003      	str	r3, [r0, #0]
   baf06:	6085      	str	r5, [r0, #8]
   baf08:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   baf0a:	4906      	ldr	r1, [pc, #24]	; (baf24 <_Z17acquireWireBufferv+0x28>)
   baf0c:	4628      	mov	r0, r5
   baf0e:	f000 f86f 	bl	baff0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   baf12:	4904      	ldr	r1, [pc, #16]	; (baf24 <_Z17acquireWireBufferv+0x28>)
	};
   baf14:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   baf16:	4628      	mov	r0, r5
   baf18:	f000 f86a 	bl	baff0 <_ZnajRKSt9nothrow_t>
	};
   baf1c:	60e0      	str	r0, [r4, #12]
}
   baf1e:	4620      	mov	r0, r4
   baf20:	bd38      	pop	{r3, r4, r5, pc}
   baf22:	bf00      	nop
   baf24:	000be7bc 	.word	0x000be7bc

000baf28 <_Z19__fetch_global_Wirev>:
{
   baf28:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   baf2a:	4d0e      	ldr	r5, [pc, #56]	; (baf64 <_Z19__fetch_global_Wirev+0x3c>)
   baf2c:	7829      	ldrb	r1, [r5, #0]
   baf2e:	f3bf 8f5b 	dmb	ish
   baf32:	f011 0401 	ands.w	r4, r1, #1
{
   baf36:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   baf38:	d111      	bne.n	baf5e <_Z19__fetch_global_Wirev+0x36>
   baf3a:	4628      	mov	r0, r5
   baf3c:	f7f9 f8b1 	bl	b40a2 <__cxa_guard_acquire>
   baf40:	b168      	cbz	r0, baf5e <_Z19__fetch_global_Wirev+0x36>
   baf42:	a801      	add	r0, sp, #4
   baf44:	f7ff ffda 	bl	baefc <_Z17acquireWireBufferv>
   baf48:	aa01      	add	r2, sp, #4
   baf4a:	4621      	mov	r1, r4
   baf4c:	4806      	ldr	r0, [pc, #24]	; (baf68 <_Z19__fetch_global_Wirev+0x40>)
   baf4e:	f7ff f93d 	bl	ba1cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   baf52:	4628      	mov	r0, r5
   baf54:	f7f9 f8aa 	bl	b40ac <__cxa_guard_release>
   baf58:	4804      	ldr	r0, [pc, #16]	; (baf6c <_Z19__fetch_global_Wirev+0x44>)
   baf5a:	f000 fe6f 	bl	bbc3c <atexit>
	return wire;
}
   baf5e:	4802      	ldr	r0, [pc, #8]	; (baf68 <_Z19__fetch_global_Wirev+0x40>)
   baf60:	b007      	add	sp, #28
   baf62:	bd30      	pop	{r4, r5, pc}
   baf64:	2003e730 	.word	0x2003e730
   baf68:	2003e734 	.word	0x2003e734
   baf6c:	000baefb 	.word	0x000baefb

000baf70 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   baf70:	4770      	bx	lr
	...

000baf74 <_Z20acquireSerial1Bufferv>:
{
   baf74:	b538      	push	{r3, r4, r5, lr}
   baf76:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   baf78:	2514      	movs	r5, #20
   baf7a:	462a      	mov	r2, r5
   baf7c:	2100      	movs	r1, #0
   baf7e:	f000 fea2 	bl	bbcc6 <memset>
   baf82:	8025      	strh	r5, [r4, #0]
   baf84:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   baf86:	4907      	ldr	r1, [pc, #28]	; (bafa4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   baf88:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   baf8a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   baf8c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   baf8e:	f000 f82f 	bl	baff0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   baf92:	4904      	ldr	r1, [pc, #16]	; (bafa4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   baf94:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   baf96:	4628      	mov	r0, r5
   baf98:	f000 f82a 	bl	baff0 <_ZnajRKSt9nothrow_t>
    };
   baf9c:	60e0      	str	r0, [r4, #12]
}
   baf9e:	4620      	mov	r0, r4
   bafa0:	bd38      	pop	{r3, r4, r5, pc}
   bafa2:	bf00      	nop
   bafa4:	000be7bc 	.word	0x000be7bc

000bafa8 <_Z22__fetch_global_Serial1v>:
{
   bafa8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bafaa:	4d0e      	ldr	r5, [pc, #56]	; (bafe4 <_Z22__fetch_global_Serial1v+0x3c>)
   bafac:	7829      	ldrb	r1, [r5, #0]
   bafae:	f3bf 8f5b 	dmb	ish
   bafb2:	f011 0401 	ands.w	r4, r1, #1
{
   bafb6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bafb8:	d111      	bne.n	bafde <_Z22__fetch_global_Serial1v+0x36>
   bafba:	4628      	mov	r0, r5
   bafbc:	f7f9 f871 	bl	b40a2 <__cxa_guard_acquire>
   bafc0:	b168      	cbz	r0, bafde <_Z22__fetch_global_Serial1v+0x36>
   bafc2:	a801      	add	r0, sp, #4
   bafc4:	f7ff ffd6 	bl	baf74 <_Z20acquireSerial1Bufferv>
   bafc8:	aa01      	add	r2, sp, #4
   bafca:	4621      	mov	r1, r4
   bafcc:	4806      	ldr	r0, [pc, #24]	; (bafe8 <_Z22__fetch_global_Serial1v+0x40>)
   bafce:	f7ff fdd9 	bl	bab84 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bafd2:	4628      	mov	r0, r5
   bafd4:	f7f9 f86a 	bl	b40ac <__cxa_guard_release>
   bafd8:	4804      	ldr	r0, [pc, #16]	; (bafec <_Z22__fetch_global_Serial1v+0x44>)
   bafda:	f000 fe2f 	bl	bbc3c <atexit>
    return serial1;
}
   bafde:	4802      	ldr	r0, [pc, #8]	; (bafe8 <_Z22__fetch_global_Serial1v+0x40>)
   bafe0:	b007      	add	sp, #28
   bafe2:	bd30      	pop	{r4, r5, pc}
   bafe4:	2003e748 	.word	0x2003e748
   bafe8:	2003e74c 	.word	0x2003e74c
   bafec:	000baf71 	.word	0x000baf71

000baff0 <_ZnajRKSt9nothrow_t>:
   baff0:	f7f9 b853 	b.w	b409a <_Znaj>

000baff4 <_ZSt20__throw_length_errorPKc>:
   baff4:	b508      	push	{r3, lr}
   baff6:	f7fc fa33 	bl	b7460 <abort>

000baffa <_ZSt25__throw_bad_function_callv>:
   baffa:	b508      	push	{r3, lr}
   baffc:	f7fc fa30 	bl	b7460 <abort>

000bb000 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bb000:	4901      	ldr	r1, [pc, #4]	; (bb008 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bb002:	f000 b8f9 	b.w	bb1f8 <_ZNKSt9type_infoeqERKS_>
   bb006:	bf00      	nop
   bb008:	000be7d8 	.word	0x000be7d8

000bb00c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bb00c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bb00e:	2400      	movs	r4, #0
   bb010:	2310      	movs	r3, #16
   bb012:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bb016:	6803      	ldr	r3, [r0, #0]
   bb018:	4615      	mov	r5, r2
   bb01a:	699e      	ldr	r6, [r3, #24]
   bb01c:	6812      	ldr	r2, [r2, #0]
   bb01e:	466b      	mov	r3, sp
   bb020:	e9cd 4400 	strd	r4, r4, [sp]
   bb024:	47b0      	blx	r6
   bb026:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bb02a:	f003 0306 	and.w	r3, r3, #6
   bb02e:	2b06      	cmp	r3, #6
   bb030:	bf03      	ittte	eq
   bb032:	9b00      	ldreq	r3, [sp, #0]
   bb034:	602b      	streq	r3, [r5, #0]
   bb036:	2001      	moveq	r0, #1
   bb038:	4620      	movne	r0, r4
   bb03a:	b004      	add	sp, #16
   bb03c:	bd70      	pop	{r4, r5, r6, pc}

000bb03e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bb03e:	9800      	ldr	r0, [sp, #0]
   bb040:	4290      	cmp	r0, r2
   bb042:	bf14      	ite	ne
   bb044:	2001      	movne	r0, #1
   bb046:	2006      	moveq	r0, #6
   bb048:	4770      	bx	lr
	...

000bb04c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bb04c:	b510      	push	{r4, lr}
   bb04e:	4b03      	ldr	r3, [pc, #12]	; (bb05c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bb050:	6003      	str	r3, [r0, #0]
   bb052:	4604      	mov	r4, r0
   bb054:	f000 f8cd 	bl	bb1f2 <_ZNSt9type_infoD1Ev>
   bb058:	4620      	mov	r0, r4
   bb05a:	bd10      	pop	{r4, pc}
   bb05c:	000be818 	.word	0x000be818

000bb060 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bb060:	b510      	push	{r4, lr}
   bb062:	4604      	mov	r4, r0
   bb064:	f7ff fff2 	bl	bb04c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb068:	4620      	mov	r0, r4
   bb06a:	2108      	movs	r1, #8
   bb06c:	f7f9 f817 	bl	b409e <_ZdlPvj>
   bb070:	4620      	mov	r0, r4
   bb072:	bd10      	pop	{r4, pc}

000bb074 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bb074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb078:	461f      	mov	r7, r3
   bb07a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bb07e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bb082:	4598      	cmp	r8, r3
   bb084:	4606      	mov	r6, r0
   bb086:	4615      	mov	r5, r2
   bb088:	d107      	bne.n	bb09a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb08a:	9907      	ldr	r1, [sp, #28]
   bb08c:	f000 f8b4 	bl	bb1f8 <_ZNKSt9type_infoeqERKS_>
   bb090:	b118      	cbz	r0, bb09a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb092:	7165      	strb	r5, [r4, #5]
   bb094:	2000      	movs	r0, #0
   bb096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb09a:	4639      	mov	r1, r7
   bb09c:	4630      	mov	r0, r6
   bb09e:	f000 f8ab 	bl	bb1f8 <_ZNKSt9type_infoeqERKS_>
   bb0a2:	2800      	cmp	r0, #0
   bb0a4:	d0f6      	beq.n	bb094 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bb0a6:	2301      	movs	r3, #1
   bb0a8:	f8c4 8000 	str.w	r8, [r4]
   bb0ac:	7125      	strb	r5, [r4, #4]
   bb0ae:	71a3      	strb	r3, [r4, #6]
   bb0b0:	e7f0      	b.n	bb094 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bb0b2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bb0b2:	b538      	push	{r3, r4, r5, lr}
   bb0b4:	4615      	mov	r5, r2
   bb0b6:	461c      	mov	r4, r3
   bb0b8:	f000 f89e 	bl	bb1f8 <_ZNKSt9type_infoeqERKS_>
   bb0bc:	b120      	cbz	r0, bb0c8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bb0be:	2308      	movs	r3, #8
   bb0c0:	60e3      	str	r3, [r4, #12]
   bb0c2:	2306      	movs	r3, #6
   bb0c4:	6025      	str	r5, [r4, #0]
   bb0c6:	7123      	strb	r3, [r4, #4]
   bb0c8:	bd38      	pop	{r3, r4, r5, pc}

000bb0ca <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bb0ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb0cc:	4605      	mov	r5, r0
   bb0ce:	460c      	mov	r4, r1
   bb0d0:	9201      	str	r2, [sp, #4]
   bb0d2:	461e      	mov	r6, r3
   bb0d4:	f000 f890 	bl	bb1f8 <_ZNKSt9type_infoeqERKS_>
   bb0d8:	b950      	cbnz	r0, bb0f0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bb0da:	2e03      	cmp	r6, #3
   bb0dc:	d808      	bhi.n	bb0f0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bb0de:	6823      	ldr	r3, [r4, #0]
   bb0e0:	9a01      	ldr	r2, [sp, #4]
   bb0e2:	695b      	ldr	r3, [r3, #20]
   bb0e4:	4629      	mov	r1, r5
   bb0e6:	4620      	mov	r0, r4
   bb0e8:	b002      	add	sp, #8
   bb0ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb0ee:	4718      	bx	r3
   bb0f0:	b002      	add	sp, #8
   bb0f2:	bd70      	pop	{r4, r5, r6, pc}

000bb0f4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bb0f4:	b510      	push	{r4, lr}
   bb0f6:	4b03      	ldr	r3, [pc, #12]	; (bb104 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bb0f8:	6003      	str	r3, [r0, #0]
   bb0fa:	4604      	mov	r4, r0
   bb0fc:	f7ff ffa6 	bl	bb04c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb100:	4620      	mov	r0, r4
   bb102:	bd10      	pop	{r4, pc}
   bb104:	000be878 	.word	0x000be878

000bb108 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bb108:	b510      	push	{r4, lr}
   bb10a:	4604      	mov	r4, r0
   bb10c:	f7ff fff2 	bl	bb0f4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bb110:	4620      	mov	r0, r4
   bb112:	210c      	movs	r1, #12
   bb114:	f7f8 ffc3 	bl	b409e <_ZdlPvj>
   bb118:	4620      	mov	r0, r4
   bb11a:	bd10      	pop	{r4, pc}

000bb11c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bb11c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bb11e:	9f08      	ldr	r7, [sp, #32]
   bb120:	4297      	cmp	r7, r2
   bb122:	4605      	mov	r5, r0
   bb124:	460e      	mov	r6, r1
   bb126:	4614      	mov	r4, r2
   bb128:	d00a      	beq.n	bb140 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bb12a:	68a8      	ldr	r0, [r5, #8]
   bb12c:	6802      	ldr	r2, [r0, #0]
   bb12e:	9708      	str	r7, [sp, #32]
   bb130:	6a15      	ldr	r5, [r2, #32]
   bb132:	4631      	mov	r1, r6
   bb134:	4622      	mov	r2, r4
   bb136:	46ac      	mov	ip, r5
   bb138:	b003      	add	sp, #12
   bb13a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bb13e:	4760      	bx	ip
   bb140:	4619      	mov	r1, r3
   bb142:	9301      	str	r3, [sp, #4]
   bb144:	f000 f858 	bl	bb1f8 <_ZNKSt9type_infoeqERKS_>
   bb148:	9b01      	ldr	r3, [sp, #4]
   bb14a:	2800      	cmp	r0, #0
   bb14c:	d0ed      	beq.n	bb12a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bb14e:	2006      	movs	r0, #6
   bb150:	b003      	add	sp, #12
   bb152:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bb154 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bb154:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb158:	460d      	mov	r5, r1
   bb15a:	4619      	mov	r1, r3
   bb15c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bb160:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bb164:	4681      	mov	r9, r0
   bb166:	4617      	mov	r7, r2
   bb168:	4698      	mov	r8, r3
   bb16a:	f000 f845 	bl	bb1f8 <_ZNKSt9type_infoeqERKS_>
   bb16e:	b190      	cbz	r0, bb196 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bb170:	2d00      	cmp	r5, #0
   bb172:	6034      	str	r4, [r6, #0]
   bb174:	7137      	strb	r7, [r6, #4]
   bb176:	db09      	blt.n	bb18c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bb178:	1961      	adds	r1, r4, r5
   bb17a:	458a      	cmp	sl, r1
   bb17c:	bf0c      	ite	eq
   bb17e:	2106      	moveq	r1, #6
   bb180:	2101      	movne	r1, #1
   bb182:	71b1      	strb	r1, [r6, #6]
   bb184:	2000      	movs	r0, #0
   bb186:	b001      	add	sp, #4
   bb188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb18c:	3502      	adds	r5, #2
   bb18e:	d1f9      	bne.n	bb184 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb190:	2301      	movs	r3, #1
   bb192:	71b3      	strb	r3, [r6, #6]
   bb194:	e7f6      	b.n	bb184 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb196:	4554      	cmp	r4, sl
   bb198:	d106      	bne.n	bb1a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb19a:	4659      	mov	r1, fp
   bb19c:	4648      	mov	r0, r9
   bb19e:	f000 f82b 	bl	bb1f8 <_ZNKSt9type_infoeqERKS_>
   bb1a2:	b108      	cbz	r0, bb1a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb1a4:	7177      	strb	r7, [r6, #5]
   bb1a6:	e7ed      	b.n	bb184 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb1a8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bb1ac:	6803      	ldr	r3, [r0, #0]
   bb1ae:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bb1b2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bb1b6:	69dc      	ldr	r4, [r3, #28]
   bb1b8:	463a      	mov	r2, r7
   bb1ba:	4643      	mov	r3, r8
   bb1bc:	4629      	mov	r1, r5
   bb1be:	46a4      	mov	ip, r4
   bb1c0:	b001      	add	sp, #4
   bb1c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb1c6:	4760      	bx	ip

000bb1c8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bb1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb1cc:	4607      	mov	r7, r0
   bb1ce:	460c      	mov	r4, r1
   bb1d0:	4615      	mov	r5, r2
   bb1d2:	461e      	mov	r6, r3
   bb1d4:	f7ff ff6d 	bl	bb0b2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bb1d8:	b948      	cbnz	r0, bb1ee <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bb1da:	68b8      	ldr	r0, [r7, #8]
   bb1dc:	6803      	ldr	r3, [r0, #0]
   bb1de:	699f      	ldr	r7, [r3, #24]
   bb1e0:	462a      	mov	r2, r5
   bb1e2:	4633      	mov	r3, r6
   bb1e4:	4621      	mov	r1, r4
   bb1e6:	46bc      	mov	ip, r7
   bb1e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bb1ec:	4760      	bx	ip
   bb1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb1f2 <_ZNSt9type_infoD1Ev>:
   bb1f2:	4770      	bx	lr

000bb1f4 <_ZNKSt9type_info14__is_pointer_pEv>:
   bb1f4:	2000      	movs	r0, #0
   bb1f6:	4770      	bx	lr

000bb1f8 <_ZNKSt9type_infoeqERKS_>:
   bb1f8:	4281      	cmp	r1, r0
   bb1fa:	b508      	push	{r3, lr}
   bb1fc:	d00e      	beq.n	bb21c <_ZNKSt9type_infoeqERKS_+0x24>
   bb1fe:	6840      	ldr	r0, [r0, #4]
   bb200:	7803      	ldrb	r3, [r0, #0]
   bb202:	2b2a      	cmp	r3, #42	; 0x2a
   bb204:	d00c      	beq.n	bb220 <_ZNKSt9type_infoeqERKS_+0x28>
   bb206:	6849      	ldr	r1, [r1, #4]
   bb208:	780b      	ldrb	r3, [r1, #0]
   bb20a:	2b2a      	cmp	r3, #42	; 0x2a
   bb20c:	bf08      	it	eq
   bb20e:	3101      	addeq	r1, #1
   bb210:	f000 fd9f 	bl	bbd52 <strcmp>
   bb214:	fab0 f080 	clz	r0, r0
   bb218:	0940      	lsrs	r0, r0, #5
   bb21a:	bd08      	pop	{r3, pc}
   bb21c:	2001      	movs	r0, #1
   bb21e:	e7fc      	b.n	bb21a <_ZNKSt9type_infoeqERKS_+0x22>
   bb220:	2000      	movs	r0, #0
   bb222:	e7fa      	b.n	bb21a <_ZNKSt9type_infoeqERKS_+0x22>

000bb224 <__aeabi_drsub>:
   bb224:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bb228:	e002      	b.n	bb230 <__adddf3>
   bb22a:	bf00      	nop

000bb22c <__aeabi_dsub>:
   bb22c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bb230 <__adddf3>:
   bb230:	b530      	push	{r4, r5, lr}
   bb232:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bb236:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bb23a:	ea94 0f05 	teq	r4, r5
   bb23e:	bf08      	it	eq
   bb240:	ea90 0f02 	teqeq	r0, r2
   bb244:	bf1f      	itttt	ne
   bb246:	ea54 0c00 	orrsne.w	ip, r4, r0
   bb24a:	ea55 0c02 	orrsne.w	ip, r5, r2
   bb24e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bb252:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb256:	f000 80e2 	beq.w	bb41e <__adddf3+0x1ee>
   bb25a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bb25e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bb262:	bfb8      	it	lt
   bb264:	426d      	neglt	r5, r5
   bb266:	dd0c      	ble.n	bb282 <__adddf3+0x52>
   bb268:	442c      	add	r4, r5
   bb26a:	ea80 0202 	eor.w	r2, r0, r2
   bb26e:	ea81 0303 	eor.w	r3, r1, r3
   bb272:	ea82 0000 	eor.w	r0, r2, r0
   bb276:	ea83 0101 	eor.w	r1, r3, r1
   bb27a:	ea80 0202 	eor.w	r2, r0, r2
   bb27e:	ea81 0303 	eor.w	r3, r1, r3
   bb282:	2d36      	cmp	r5, #54	; 0x36
   bb284:	bf88      	it	hi
   bb286:	bd30      	pophi	{r4, r5, pc}
   bb288:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bb28c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb290:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bb294:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bb298:	d002      	beq.n	bb2a0 <__adddf3+0x70>
   bb29a:	4240      	negs	r0, r0
   bb29c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb2a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bb2a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb2a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bb2ac:	d002      	beq.n	bb2b4 <__adddf3+0x84>
   bb2ae:	4252      	negs	r2, r2
   bb2b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bb2b4:	ea94 0f05 	teq	r4, r5
   bb2b8:	f000 80a7 	beq.w	bb40a <__adddf3+0x1da>
   bb2bc:	f1a4 0401 	sub.w	r4, r4, #1
   bb2c0:	f1d5 0e20 	rsbs	lr, r5, #32
   bb2c4:	db0d      	blt.n	bb2e2 <__adddf3+0xb2>
   bb2c6:	fa02 fc0e 	lsl.w	ip, r2, lr
   bb2ca:	fa22 f205 	lsr.w	r2, r2, r5
   bb2ce:	1880      	adds	r0, r0, r2
   bb2d0:	f141 0100 	adc.w	r1, r1, #0
   bb2d4:	fa03 f20e 	lsl.w	r2, r3, lr
   bb2d8:	1880      	adds	r0, r0, r2
   bb2da:	fa43 f305 	asr.w	r3, r3, r5
   bb2de:	4159      	adcs	r1, r3
   bb2e0:	e00e      	b.n	bb300 <__adddf3+0xd0>
   bb2e2:	f1a5 0520 	sub.w	r5, r5, #32
   bb2e6:	f10e 0e20 	add.w	lr, lr, #32
   bb2ea:	2a01      	cmp	r2, #1
   bb2ec:	fa03 fc0e 	lsl.w	ip, r3, lr
   bb2f0:	bf28      	it	cs
   bb2f2:	f04c 0c02 	orrcs.w	ip, ip, #2
   bb2f6:	fa43 f305 	asr.w	r3, r3, r5
   bb2fa:	18c0      	adds	r0, r0, r3
   bb2fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bb300:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb304:	d507      	bpl.n	bb316 <__adddf3+0xe6>
   bb306:	f04f 0e00 	mov.w	lr, #0
   bb30a:	f1dc 0c00 	rsbs	ip, ip, #0
   bb30e:	eb7e 0000 	sbcs.w	r0, lr, r0
   bb312:	eb6e 0101 	sbc.w	r1, lr, r1
   bb316:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bb31a:	d31b      	bcc.n	bb354 <__adddf3+0x124>
   bb31c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bb320:	d30c      	bcc.n	bb33c <__adddf3+0x10c>
   bb322:	0849      	lsrs	r1, r1, #1
   bb324:	ea5f 0030 	movs.w	r0, r0, rrx
   bb328:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bb32c:	f104 0401 	add.w	r4, r4, #1
   bb330:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bb334:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bb338:	f080 809a 	bcs.w	bb470 <__adddf3+0x240>
   bb33c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bb340:	bf08      	it	eq
   bb342:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb346:	f150 0000 	adcs.w	r0, r0, #0
   bb34a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb34e:	ea41 0105 	orr.w	r1, r1, r5
   bb352:	bd30      	pop	{r4, r5, pc}
   bb354:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bb358:	4140      	adcs	r0, r0
   bb35a:	eb41 0101 	adc.w	r1, r1, r1
   bb35e:	3c01      	subs	r4, #1
   bb360:	bf28      	it	cs
   bb362:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bb366:	d2e9      	bcs.n	bb33c <__adddf3+0x10c>
   bb368:	f091 0f00 	teq	r1, #0
   bb36c:	bf04      	itt	eq
   bb36e:	4601      	moveq	r1, r0
   bb370:	2000      	moveq	r0, #0
   bb372:	fab1 f381 	clz	r3, r1
   bb376:	bf08      	it	eq
   bb378:	3320      	addeq	r3, #32
   bb37a:	f1a3 030b 	sub.w	r3, r3, #11
   bb37e:	f1b3 0220 	subs.w	r2, r3, #32
   bb382:	da0c      	bge.n	bb39e <__adddf3+0x16e>
   bb384:	320c      	adds	r2, #12
   bb386:	dd08      	ble.n	bb39a <__adddf3+0x16a>
   bb388:	f102 0c14 	add.w	ip, r2, #20
   bb38c:	f1c2 020c 	rsb	r2, r2, #12
   bb390:	fa01 f00c 	lsl.w	r0, r1, ip
   bb394:	fa21 f102 	lsr.w	r1, r1, r2
   bb398:	e00c      	b.n	bb3b4 <__adddf3+0x184>
   bb39a:	f102 0214 	add.w	r2, r2, #20
   bb39e:	bfd8      	it	le
   bb3a0:	f1c2 0c20 	rsble	ip, r2, #32
   bb3a4:	fa01 f102 	lsl.w	r1, r1, r2
   bb3a8:	fa20 fc0c 	lsr.w	ip, r0, ip
   bb3ac:	bfdc      	itt	le
   bb3ae:	ea41 010c 	orrle.w	r1, r1, ip
   bb3b2:	4090      	lslle	r0, r2
   bb3b4:	1ae4      	subs	r4, r4, r3
   bb3b6:	bfa2      	ittt	ge
   bb3b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bb3bc:	4329      	orrge	r1, r5
   bb3be:	bd30      	popge	{r4, r5, pc}
   bb3c0:	ea6f 0404 	mvn.w	r4, r4
   bb3c4:	3c1f      	subs	r4, #31
   bb3c6:	da1c      	bge.n	bb402 <__adddf3+0x1d2>
   bb3c8:	340c      	adds	r4, #12
   bb3ca:	dc0e      	bgt.n	bb3ea <__adddf3+0x1ba>
   bb3cc:	f104 0414 	add.w	r4, r4, #20
   bb3d0:	f1c4 0220 	rsb	r2, r4, #32
   bb3d4:	fa20 f004 	lsr.w	r0, r0, r4
   bb3d8:	fa01 f302 	lsl.w	r3, r1, r2
   bb3dc:	ea40 0003 	orr.w	r0, r0, r3
   bb3e0:	fa21 f304 	lsr.w	r3, r1, r4
   bb3e4:	ea45 0103 	orr.w	r1, r5, r3
   bb3e8:	bd30      	pop	{r4, r5, pc}
   bb3ea:	f1c4 040c 	rsb	r4, r4, #12
   bb3ee:	f1c4 0220 	rsb	r2, r4, #32
   bb3f2:	fa20 f002 	lsr.w	r0, r0, r2
   bb3f6:	fa01 f304 	lsl.w	r3, r1, r4
   bb3fa:	ea40 0003 	orr.w	r0, r0, r3
   bb3fe:	4629      	mov	r1, r5
   bb400:	bd30      	pop	{r4, r5, pc}
   bb402:	fa21 f004 	lsr.w	r0, r1, r4
   bb406:	4629      	mov	r1, r5
   bb408:	bd30      	pop	{r4, r5, pc}
   bb40a:	f094 0f00 	teq	r4, #0
   bb40e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bb412:	bf06      	itte	eq
   bb414:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bb418:	3401      	addeq	r4, #1
   bb41a:	3d01      	subne	r5, #1
   bb41c:	e74e      	b.n	bb2bc <__adddf3+0x8c>
   bb41e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb422:	bf18      	it	ne
   bb424:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb428:	d029      	beq.n	bb47e <__adddf3+0x24e>
   bb42a:	ea94 0f05 	teq	r4, r5
   bb42e:	bf08      	it	eq
   bb430:	ea90 0f02 	teqeq	r0, r2
   bb434:	d005      	beq.n	bb442 <__adddf3+0x212>
   bb436:	ea54 0c00 	orrs.w	ip, r4, r0
   bb43a:	bf04      	itt	eq
   bb43c:	4619      	moveq	r1, r3
   bb43e:	4610      	moveq	r0, r2
   bb440:	bd30      	pop	{r4, r5, pc}
   bb442:	ea91 0f03 	teq	r1, r3
   bb446:	bf1e      	ittt	ne
   bb448:	2100      	movne	r1, #0
   bb44a:	2000      	movne	r0, #0
   bb44c:	bd30      	popne	{r4, r5, pc}
   bb44e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bb452:	d105      	bne.n	bb460 <__adddf3+0x230>
   bb454:	0040      	lsls	r0, r0, #1
   bb456:	4149      	adcs	r1, r1
   bb458:	bf28      	it	cs
   bb45a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bb45e:	bd30      	pop	{r4, r5, pc}
   bb460:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bb464:	bf3c      	itt	cc
   bb466:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bb46a:	bd30      	popcc	{r4, r5, pc}
   bb46c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb470:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bb474:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb478:	f04f 0000 	mov.w	r0, #0
   bb47c:	bd30      	pop	{r4, r5, pc}
   bb47e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb482:	bf1a      	itte	ne
   bb484:	4619      	movne	r1, r3
   bb486:	4610      	movne	r0, r2
   bb488:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bb48c:	bf1c      	itt	ne
   bb48e:	460b      	movne	r3, r1
   bb490:	4602      	movne	r2, r0
   bb492:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb496:	bf06      	itte	eq
   bb498:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bb49c:	ea91 0f03 	teqeq	r1, r3
   bb4a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bb4a4:	bd30      	pop	{r4, r5, pc}
   bb4a6:	bf00      	nop

000bb4a8 <__aeabi_ui2d>:
   bb4a8:	f090 0f00 	teq	r0, #0
   bb4ac:	bf04      	itt	eq
   bb4ae:	2100      	moveq	r1, #0
   bb4b0:	4770      	bxeq	lr
   bb4b2:	b530      	push	{r4, r5, lr}
   bb4b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb4b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb4bc:	f04f 0500 	mov.w	r5, #0
   bb4c0:	f04f 0100 	mov.w	r1, #0
   bb4c4:	e750      	b.n	bb368 <__adddf3+0x138>
   bb4c6:	bf00      	nop

000bb4c8 <__aeabi_i2d>:
   bb4c8:	f090 0f00 	teq	r0, #0
   bb4cc:	bf04      	itt	eq
   bb4ce:	2100      	moveq	r1, #0
   bb4d0:	4770      	bxeq	lr
   bb4d2:	b530      	push	{r4, r5, lr}
   bb4d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb4d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb4dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bb4e0:	bf48      	it	mi
   bb4e2:	4240      	negmi	r0, r0
   bb4e4:	f04f 0100 	mov.w	r1, #0
   bb4e8:	e73e      	b.n	bb368 <__adddf3+0x138>
   bb4ea:	bf00      	nop

000bb4ec <__aeabi_f2d>:
   bb4ec:	0042      	lsls	r2, r0, #1
   bb4ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bb4f2:	ea4f 0131 	mov.w	r1, r1, rrx
   bb4f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bb4fa:	bf1f      	itttt	ne
   bb4fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bb500:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bb504:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bb508:	4770      	bxne	lr
   bb50a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bb50e:	bf08      	it	eq
   bb510:	4770      	bxeq	lr
   bb512:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bb516:	bf04      	itt	eq
   bb518:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bb51c:	4770      	bxeq	lr
   bb51e:	b530      	push	{r4, r5, lr}
   bb520:	f44f 7460 	mov.w	r4, #896	; 0x380
   bb524:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb528:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb52c:	e71c      	b.n	bb368 <__adddf3+0x138>
   bb52e:	bf00      	nop

000bb530 <__aeabi_ul2d>:
   bb530:	ea50 0201 	orrs.w	r2, r0, r1
   bb534:	bf08      	it	eq
   bb536:	4770      	bxeq	lr
   bb538:	b530      	push	{r4, r5, lr}
   bb53a:	f04f 0500 	mov.w	r5, #0
   bb53e:	e00a      	b.n	bb556 <__aeabi_l2d+0x16>

000bb540 <__aeabi_l2d>:
   bb540:	ea50 0201 	orrs.w	r2, r0, r1
   bb544:	bf08      	it	eq
   bb546:	4770      	bxeq	lr
   bb548:	b530      	push	{r4, r5, lr}
   bb54a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bb54e:	d502      	bpl.n	bb556 <__aeabi_l2d+0x16>
   bb550:	4240      	negs	r0, r0
   bb552:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb556:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb55a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb55e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bb562:	f43f aed8 	beq.w	bb316 <__adddf3+0xe6>
   bb566:	f04f 0203 	mov.w	r2, #3
   bb56a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb56e:	bf18      	it	ne
   bb570:	3203      	addne	r2, #3
   bb572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb576:	bf18      	it	ne
   bb578:	3203      	addne	r2, #3
   bb57a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bb57e:	f1c2 0320 	rsb	r3, r2, #32
   bb582:	fa00 fc03 	lsl.w	ip, r0, r3
   bb586:	fa20 f002 	lsr.w	r0, r0, r2
   bb58a:	fa01 fe03 	lsl.w	lr, r1, r3
   bb58e:	ea40 000e 	orr.w	r0, r0, lr
   bb592:	fa21 f102 	lsr.w	r1, r1, r2
   bb596:	4414      	add	r4, r2
   bb598:	e6bd      	b.n	bb316 <__adddf3+0xe6>
   bb59a:	bf00      	nop

000bb59c <__aeabi_dmul>:
   bb59c:	b570      	push	{r4, r5, r6, lr}
   bb59e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb5a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb5a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb5aa:	bf1d      	ittte	ne
   bb5ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb5b0:	ea94 0f0c 	teqne	r4, ip
   bb5b4:	ea95 0f0c 	teqne	r5, ip
   bb5b8:	f000 f8de 	bleq	bb778 <__aeabi_dmul+0x1dc>
   bb5bc:	442c      	add	r4, r5
   bb5be:	ea81 0603 	eor.w	r6, r1, r3
   bb5c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bb5c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bb5ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bb5ce:	bf18      	it	ne
   bb5d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bb5d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb5d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb5dc:	d038      	beq.n	bb650 <__aeabi_dmul+0xb4>
   bb5de:	fba0 ce02 	umull	ip, lr, r0, r2
   bb5e2:	f04f 0500 	mov.w	r5, #0
   bb5e6:	fbe1 e502 	umlal	lr, r5, r1, r2
   bb5ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bb5ee:	fbe0 e503 	umlal	lr, r5, r0, r3
   bb5f2:	f04f 0600 	mov.w	r6, #0
   bb5f6:	fbe1 5603 	umlal	r5, r6, r1, r3
   bb5fa:	f09c 0f00 	teq	ip, #0
   bb5fe:	bf18      	it	ne
   bb600:	f04e 0e01 	orrne.w	lr, lr, #1
   bb604:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bb608:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bb60c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bb610:	d204      	bcs.n	bb61c <__aeabi_dmul+0x80>
   bb612:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bb616:	416d      	adcs	r5, r5
   bb618:	eb46 0606 	adc.w	r6, r6, r6
   bb61c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bb620:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bb624:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bb628:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bb62c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bb630:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb634:	bf88      	it	hi
   bb636:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb63a:	d81e      	bhi.n	bb67a <__aeabi_dmul+0xde>
   bb63c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bb640:	bf08      	it	eq
   bb642:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bb646:	f150 0000 	adcs.w	r0, r0, #0
   bb64a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb64e:	bd70      	pop	{r4, r5, r6, pc}
   bb650:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bb654:	ea46 0101 	orr.w	r1, r6, r1
   bb658:	ea40 0002 	orr.w	r0, r0, r2
   bb65c:	ea81 0103 	eor.w	r1, r1, r3
   bb660:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bb664:	bfc2      	ittt	gt
   bb666:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb66a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb66e:	bd70      	popgt	{r4, r5, r6, pc}
   bb670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb674:	f04f 0e00 	mov.w	lr, #0
   bb678:	3c01      	subs	r4, #1
   bb67a:	f300 80ab 	bgt.w	bb7d4 <__aeabi_dmul+0x238>
   bb67e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bb682:	bfde      	ittt	le
   bb684:	2000      	movle	r0, #0
   bb686:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bb68a:	bd70      	pople	{r4, r5, r6, pc}
   bb68c:	f1c4 0400 	rsb	r4, r4, #0
   bb690:	3c20      	subs	r4, #32
   bb692:	da35      	bge.n	bb700 <__aeabi_dmul+0x164>
   bb694:	340c      	adds	r4, #12
   bb696:	dc1b      	bgt.n	bb6d0 <__aeabi_dmul+0x134>
   bb698:	f104 0414 	add.w	r4, r4, #20
   bb69c:	f1c4 0520 	rsb	r5, r4, #32
   bb6a0:	fa00 f305 	lsl.w	r3, r0, r5
   bb6a4:	fa20 f004 	lsr.w	r0, r0, r4
   bb6a8:	fa01 f205 	lsl.w	r2, r1, r5
   bb6ac:	ea40 0002 	orr.w	r0, r0, r2
   bb6b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bb6b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb6b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb6bc:	fa21 f604 	lsr.w	r6, r1, r4
   bb6c0:	eb42 0106 	adc.w	r1, r2, r6
   bb6c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb6c8:	bf08      	it	eq
   bb6ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb6ce:	bd70      	pop	{r4, r5, r6, pc}
   bb6d0:	f1c4 040c 	rsb	r4, r4, #12
   bb6d4:	f1c4 0520 	rsb	r5, r4, #32
   bb6d8:	fa00 f304 	lsl.w	r3, r0, r4
   bb6dc:	fa20 f005 	lsr.w	r0, r0, r5
   bb6e0:	fa01 f204 	lsl.w	r2, r1, r4
   bb6e4:	ea40 0002 	orr.w	r0, r0, r2
   bb6e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb6ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb6f0:	f141 0100 	adc.w	r1, r1, #0
   bb6f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb6f8:	bf08      	it	eq
   bb6fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb6fe:	bd70      	pop	{r4, r5, r6, pc}
   bb700:	f1c4 0520 	rsb	r5, r4, #32
   bb704:	fa00 f205 	lsl.w	r2, r0, r5
   bb708:	ea4e 0e02 	orr.w	lr, lr, r2
   bb70c:	fa20 f304 	lsr.w	r3, r0, r4
   bb710:	fa01 f205 	lsl.w	r2, r1, r5
   bb714:	ea43 0302 	orr.w	r3, r3, r2
   bb718:	fa21 f004 	lsr.w	r0, r1, r4
   bb71c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb720:	fa21 f204 	lsr.w	r2, r1, r4
   bb724:	ea20 0002 	bic.w	r0, r0, r2
   bb728:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bb72c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb730:	bf08      	it	eq
   bb732:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb736:	bd70      	pop	{r4, r5, r6, pc}
   bb738:	f094 0f00 	teq	r4, #0
   bb73c:	d10f      	bne.n	bb75e <__aeabi_dmul+0x1c2>
   bb73e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bb742:	0040      	lsls	r0, r0, #1
   bb744:	eb41 0101 	adc.w	r1, r1, r1
   bb748:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb74c:	bf08      	it	eq
   bb74e:	3c01      	subeq	r4, #1
   bb750:	d0f7      	beq.n	bb742 <__aeabi_dmul+0x1a6>
   bb752:	ea41 0106 	orr.w	r1, r1, r6
   bb756:	f095 0f00 	teq	r5, #0
   bb75a:	bf18      	it	ne
   bb75c:	4770      	bxne	lr
   bb75e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bb762:	0052      	lsls	r2, r2, #1
   bb764:	eb43 0303 	adc.w	r3, r3, r3
   bb768:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bb76c:	bf08      	it	eq
   bb76e:	3d01      	subeq	r5, #1
   bb770:	d0f7      	beq.n	bb762 <__aeabi_dmul+0x1c6>
   bb772:	ea43 0306 	orr.w	r3, r3, r6
   bb776:	4770      	bx	lr
   bb778:	ea94 0f0c 	teq	r4, ip
   bb77c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb780:	bf18      	it	ne
   bb782:	ea95 0f0c 	teqne	r5, ip
   bb786:	d00c      	beq.n	bb7a2 <__aeabi_dmul+0x206>
   bb788:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb78c:	bf18      	it	ne
   bb78e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb792:	d1d1      	bne.n	bb738 <__aeabi_dmul+0x19c>
   bb794:	ea81 0103 	eor.w	r1, r1, r3
   bb798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb79c:	f04f 0000 	mov.w	r0, #0
   bb7a0:	bd70      	pop	{r4, r5, r6, pc}
   bb7a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb7a6:	bf06      	itte	eq
   bb7a8:	4610      	moveq	r0, r2
   bb7aa:	4619      	moveq	r1, r3
   bb7ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb7b0:	d019      	beq.n	bb7e6 <__aeabi_dmul+0x24a>
   bb7b2:	ea94 0f0c 	teq	r4, ip
   bb7b6:	d102      	bne.n	bb7be <__aeabi_dmul+0x222>
   bb7b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bb7bc:	d113      	bne.n	bb7e6 <__aeabi_dmul+0x24a>
   bb7be:	ea95 0f0c 	teq	r5, ip
   bb7c2:	d105      	bne.n	bb7d0 <__aeabi_dmul+0x234>
   bb7c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bb7c8:	bf1c      	itt	ne
   bb7ca:	4610      	movne	r0, r2
   bb7cc:	4619      	movne	r1, r3
   bb7ce:	d10a      	bne.n	bb7e6 <__aeabi_dmul+0x24a>
   bb7d0:	ea81 0103 	eor.w	r1, r1, r3
   bb7d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb7d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb7dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb7e0:	f04f 0000 	mov.w	r0, #0
   bb7e4:	bd70      	pop	{r4, r5, r6, pc}
   bb7e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb7ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bb7ee:	bd70      	pop	{r4, r5, r6, pc}

000bb7f0 <__aeabi_ddiv>:
   bb7f0:	b570      	push	{r4, r5, r6, lr}
   bb7f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb7f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb7fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb7fe:	bf1d      	ittte	ne
   bb800:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb804:	ea94 0f0c 	teqne	r4, ip
   bb808:	ea95 0f0c 	teqne	r5, ip
   bb80c:	f000 f8a7 	bleq	bb95e <__aeabi_ddiv+0x16e>
   bb810:	eba4 0405 	sub.w	r4, r4, r5
   bb814:	ea81 0e03 	eor.w	lr, r1, r3
   bb818:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb81c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb820:	f000 8088 	beq.w	bb934 <__aeabi_ddiv+0x144>
   bb824:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb828:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bb82c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bb830:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bb834:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bb838:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bb83c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bb840:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bb844:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bb848:	429d      	cmp	r5, r3
   bb84a:	bf08      	it	eq
   bb84c:	4296      	cmpeq	r6, r2
   bb84e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bb852:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bb856:	d202      	bcs.n	bb85e <__aeabi_ddiv+0x6e>
   bb858:	085b      	lsrs	r3, r3, #1
   bb85a:	ea4f 0232 	mov.w	r2, r2, rrx
   bb85e:	1ab6      	subs	r6, r6, r2
   bb860:	eb65 0503 	sbc.w	r5, r5, r3
   bb864:	085b      	lsrs	r3, r3, #1
   bb866:	ea4f 0232 	mov.w	r2, r2, rrx
   bb86a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bb86e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bb872:	ebb6 0e02 	subs.w	lr, r6, r2
   bb876:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb87a:	bf22      	ittt	cs
   bb87c:	1ab6      	subcs	r6, r6, r2
   bb87e:	4675      	movcs	r5, lr
   bb880:	ea40 000c 	orrcs.w	r0, r0, ip
   bb884:	085b      	lsrs	r3, r3, #1
   bb886:	ea4f 0232 	mov.w	r2, r2, rrx
   bb88a:	ebb6 0e02 	subs.w	lr, r6, r2
   bb88e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb892:	bf22      	ittt	cs
   bb894:	1ab6      	subcs	r6, r6, r2
   bb896:	4675      	movcs	r5, lr
   bb898:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bb89c:	085b      	lsrs	r3, r3, #1
   bb89e:	ea4f 0232 	mov.w	r2, r2, rrx
   bb8a2:	ebb6 0e02 	subs.w	lr, r6, r2
   bb8a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb8aa:	bf22      	ittt	cs
   bb8ac:	1ab6      	subcs	r6, r6, r2
   bb8ae:	4675      	movcs	r5, lr
   bb8b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bb8b4:	085b      	lsrs	r3, r3, #1
   bb8b6:	ea4f 0232 	mov.w	r2, r2, rrx
   bb8ba:	ebb6 0e02 	subs.w	lr, r6, r2
   bb8be:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb8c2:	bf22      	ittt	cs
   bb8c4:	1ab6      	subcs	r6, r6, r2
   bb8c6:	4675      	movcs	r5, lr
   bb8c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bb8cc:	ea55 0e06 	orrs.w	lr, r5, r6
   bb8d0:	d018      	beq.n	bb904 <__aeabi_ddiv+0x114>
   bb8d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bb8d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bb8da:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bb8de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bb8e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bb8e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bb8ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bb8ee:	d1c0      	bne.n	bb872 <__aeabi_ddiv+0x82>
   bb8f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb8f4:	d10b      	bne.n	bb90e <__aeabi_ddiv+0x11e>
   bb8f6:	ea41 0100 	orr.w	r1, r1, r0
   bb8fa:	f04f 0000 	mov.w	r0, #0
   bb8fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bb902:	e7b6      	b.n	bb872 <__aeabi_ddiv+0x82>
   bb904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb908:	bf04      	itt	eq
   bb90a:	4301      	orreq	r1, r0
   bb90c:	2000      	moveq	r0, #0
   bb90e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb912:	bf88      	it	hi
   bb914:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb918:	f63f aeaf 	bhi.w	bb67a <__aeabi_dmul+0xde>
   bb91c:	ebb5 0c03 	subs.w	ip, r5, r3
   bb920:	bf04      	itt	eq
   bb922:	ebb6 0c02 	subseq.w	ip, r6, r2
   bb926:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb92a:	f150 0000 	adcs.w	r0, r0, #0
   bb92e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb932:	bd70      	pop	{r4, r5, r6, pc}
   bb934:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bb938:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bb93c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bb940:	bfc2      	ittt	gt
   bb942:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb946:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb94a:	bd70      	popgt	{r4, r5, r6, pc}
   bb94c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb950:	f04f 0e00 	mov.w	lr, #0
   bb954:	3c01      	subs	r4, #1
   bb956:	e690      	b.n	bb67a <__aeabi_dmul+0xde>
   bb958:	ea45 0e06 	orr.w	lr, r5, r6
   bb95c:	e68d      	b.n	bb67a <__aeabi_dmul+0xde>
   bb95e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb962:	ea94 0f0c 	teq	r4, ip
   bb966:	bf08      	it	eq
   bb968:	ea95 0f0c 	teqeq	r5, ip
   bb96c:	f43f af3b 	beq.w	bb7e6 <__aeabi_dmul+0x24a>
   bb970:	ea94 0f0c 	teq	r4, ip
   bb974:	d10a      	bne.n	bb98c <__aeabi_ddiv+0x19c>
   bb976:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb97a:	f47f af34 	bne.w	bb7e6 <__aeabi_dmul+0x24a>
   bb97e:	ea95 0f0c 	teq	r5, ip
   bb982:	f47f af25 	bne.w	bb7d0 <__aeabi_dmul+0x234>
   bb986:	4610      	mov	r0, r2
   bb988:	4619      	mov	r1, r3
   bb98a:	e72c      	b.n	bb7e6 <__aeabi_dmul+0x24a>
   bb98c:	ea95 0f0c 	teq	r5, ip
   bb990:	d106      	bne.n	bb9a0 <__aeabi_ddiv+0x1b0>
   bb992:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb996:	f43f aefd 	beq.w	bb794 <__aeabi_dmul+0x1f8>
   bb99a:	4610      	mov	r0, r2
   bb99c:	4619      	mov	r1, r3
   bb99e:	e722      	b.n	bb7e6 <__aeabi_dmul+0x24a>
   bb9a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb9a4:	bf18      	it	ne
   bb9a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb9aa:	f47f aec5 	bne.w	bb738 <__aeabi_dmul+0x19c>
   bb9ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bb9b2:	f47f af0d 	bne.w	bb7d0 <__aeabi_dmul+0x234>
   bb9b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bb9ba:	f47f aeeb 	bne.w	bb794 <__aeabi_dmul+0x1f8>
   bb9be:	e712      	b.n	bb7e6 <__aeabi_dmul+0x24a>

000bb9c0 <__gedf2>:
   bb9c0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bb9c4:	e006      	b.n	bb9d4 <__cmpdf2+0x4>
   bb9c6:	bf00      	nop

000bb9c8 <__ledf2>:
   bb9c8:	f04f 0c01 	mov.w	ip, #1
   bb9cc:	e002      	b.n	bb9d4 <__cmpdf2+0x4>
   bb9ce:	bf00      	nop

000bb9d0 <__cmpdf2>:
   bb9d0:	f04f 0c01 	mov.w	ip, #1
   bb9d4:	f84d cd04 	str.w	ip, [sp, #-4]!
   bb9d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb9dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb9e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb9e4:	bf18      	it	ne
   bb9e6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bb9ea:	d01b      	beq.n	bba24 <__cmpdf2+0x54>
   bb9ec:	b001      	add	sp, #4
   bb9ee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bb9f2:	bf0c      	ite	eq
   bb9f4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bb9f8:	ea91 0f03 	teqne	r1, r3
   bb9fc:	bf02      	ittt	eq
   bb9fe:	ea90 0f02 	teqeq	r0, r2
   bba02:	2000      	moveq	r0, #0
   bba04:	4770      	bxeq	lr
   bba06:	f110 0f00 	cmn.w	r0, #0
   bba0a:	ea91 0f03 	teq	r1, r3
   bba0e:	bf58      	it	pl
   bba10:	4299      	cmppl	r1, r3
   bba12:	bf08      	it	eq
   bba14:	4290      	cmpeq	r0, r2
   bba16:	bf2c      	ite	cs
   bba18:	17d8      	asrcs	r0, r3, #31
   bba1a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bba1e:	f040 0001 	orr.w	r0, r0, #1
   bba22:	4770      	bx	lr
   bba24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bba28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bba2c:	d102      	bne.n	bba34 <__cmpdf2+0x64>
   bba2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bba32:	d107      	bne.n	bba44 <__cmpdf2+0x74>
   bba34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bba38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bba3c:	d1d6      	bne.n	bb9ec <__cmpdf2+0x1c>
   bba3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bba42:	d0d3      	beq.n	bb9ec <__cmpdf2+0x1c>
   bba44:	f85d 0b04 	ldr.w	r0, [sp], #4
   bba48:	4770      	bx	lr
   bba4a:	bf00      	nop

000bba4c <__aeabi_cdrcmple>:
   bba4c:	4684      	mov	ip, r0
   bba4e:	4610      	mov	r0, r2
   bba50:	4662      	mov	r2, ip
   bba52:	468c      	mov	ip, r1
   bba54:	4619      	mov	r1, r3
   bba56:	4663      	mov	r3, ip
   bba58:	e000      	b.n	bba5c <__aeabi_cdcmpeq>
   bba5a:	bf00      	nop

000bba5c <__aeabi_cdcmpeq>:
   bba5c:	b501      	push	{r0, lr}
   bba5e:	f7ff ffb7 	bl	bb9d0 <__cmpdf2>
   bba62:	2800      	cmp	r0, #0
   bba64:	bf48      	it	mi
   bba66:	f110 0f00 	cmnmi.w	r0, #0
   bba6a:	bd01      	pop	{r0, pc}

000bba6c <__aeabi_dcmpeq>:
   bba6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bba70:	f7ff fff4 	bl	bba5c <__aeabi_cdcmpeq>
   bba74:	bf0c      	ite	eq
   bba76:	2001      	moveq	r0, #1
   bba78:	2000      	movne	r0, #0
   bba7a:	f85d fb08 	ldr.w	pc, [sp], #8
   bba7e:	bf00      	nop

000bba80 <__aeabi_dcmplt>:
   bba80:	f84d ed08 	str.w	lr, [sp, #-8]!
   bba84:	f7ff ffea 	bl	bba5c <__aeabi_cdcmpeq>
   bba88:	bf34      	ite	cc
   bba8a:	2001      	movcc	r0, #1
   bba8c:	2000      	movcs	r0, #0
   bba8e:	f85d fb08 	ldr.w	pc, [sp], #8
   bba92:	bf00      	nop

000bba94 <__aeabi_dcmple>:
   bba94:	f84d ed08 	str.w	lr, [sp, #-8]!
   bba98:	f7ff ffe0 	bl	bba5c <__aeabi_cdcmpeq>
   bba9c:	bf94      	ite	ls
   bba9e:	2001      	movls	r0, #1
   bbaa0:	2000      	movhi	r0, #0
   bbaa2:	f85d fb08 	ldr.w	pc, [sp], #8
   bbaa6:	bf00      	nop

000bbaa8 <__aeabi_dcmpge>:
   bbaa8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbaac:	f7ff ffce 	bl	bba4c <__aeabi_cdrcmple>
   bbab0:	bf94      	ite	ls
   bbab2:	2001      	movls	r0, #1
   bbab4:	2000      	movhi	r0, #0
   bbab6:	f85d fb08 	ldr.w	pc, [sp], #8
   bbaba:	bf00      	nop

000bbabc <__aeabi_dcmpgt>:
   bbabc:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbac0:	f7ff ffc4 	bl	bba4c <__aeabi_cdrcmple>
   bbac4:	bf34      	ite	cc
   bbac6:	2001      	movcc	r0, #1
   bbac8:	2000      	movcs	r0, #0
   bbaca:	f85d fb08 	ldr.w	pc, [sp], #8
   bbace:	bf00      	nop

000bbad0 <__aeabi_d2iz>:
   bbad0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bbad4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bbad8:	d215      	bcs.n	bbb06 <__aeabi_d2iz+0x36>
   bbada:	d511      	bpl.n	bbb00 <__aeabi_d2iz+0x30>
   bbadc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bbae0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bbae4:	d912      	bls.n	bbb0c <__aeabi_d2iz+0x3c>
   bbae6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bbaea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bbaee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bbaf2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bbaf6:	fa23 f002 	lsr.w	r0, r3, r2
   bbafa:	bf18      	it	ne
   bbafc:	4240      	negne	r0, r0
   bbafe:	4770      	bx	lr
   bbb00:	f04f 0000 	mov.w	r0, #0
   bbb04:	4770      	bx	lr
   bbb06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bbb0a:	d105      	bne.n	bbb18 <__aeabi_d2iz+0x48>
   bbb0c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bbb10:	bf08      	it	eq
   bbb12:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bbb16:	4770      	bx	lr
   bbb18:	f04f 0000 	mov.w	r0, #0
   bbb1c:	4770      	bx	lr
   bbb1e:	bf00      	nop

000bbb20 <__aeabi_d2uiz>:
   bbb20:	004a      	lsls	r2, r1, #1
   bbb22:	d211      	bcs.n	bbb48 <__aeabi_d2uiz+0x28>
   bbb24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bbb28:	d211      	bcs.n	bbb4e <__aeabi_d2uiz+0x2e>
   bbb2a:	d50d      	bpl.n	bbb48 <__aeabi_d2uiz+0x28>
   bbb2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bbb30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bbb34:	d40e      	bmi.n	bbb54 <__aeabi_d2uiz+0x34>
   bbb36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bbb3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bbb3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bbb42:	fa23 f002 	lsr.w	r0, r3, r2
   bbb46:	4770      	bx	lr
   bbb48:	f04f 0000 	mov.w	r0, #0
   bbb4c:	4770      	bx	lr
   bbb4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bbb52:	d102      	bne.n	bbb5a <__aeabi_d2uiz+0x3a>
   bbb54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bbb58:	4770      	bx	lr
   bbb5a:	f04f 0000 	mov.w	r0, #0
   bbb5e:	4770      	bx	lr

000bbb60 <__aeabi_d2f>:
   bbb60:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bbb64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bbb68:	bf24      	itt	cs
   bbb6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bbb6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bbb72:	d90d      	bls.n	bbb90 <__aeabi_d2f+0x30>
   bbb74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bbb78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bbb7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bbb80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bbb84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bbb88:	bf08      	it	eq
   bbb8a:	f020 0001 	biceq.w	r0, r0, #1
   bbb8e:	4770      	bx	lr
   bbb90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bbb94:	d121      	bne.n	bbbda <__aeabi_d2f+0x7a>
   bbb96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bbb9a:	bfbc      	itt	lt
   bbb9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bbba0:	4770      	bxlt	lr
   bbba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bbbaa:	f1c2 0218 	rsb	r2, r2, #24
   bbbae:	f1c2 0c20 	rsb	ip, r2, #32
   bbbb2:	fa10 f30c 	lsls.w	r3, r0, ip
   bbbb6:	fa20 f002 	lsr.w	r0, r0, r2
   bbbba:	bf18      	it	ne
   bbbbc:	f040 0001 	orrne.w	r0, r0, #1
   bbbc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bbbc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bbbc8:	fa03 fc0c 	lsl.w	ip, r3, ip
   bbbcc:	ea40 000c 	orr.w	r0, r0, ip
   bbbd0:	fa23 f302 	lsr.w	r3, r3, r2
   bbbd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bbbd8:	e7cc      	b.n	bbb74 <__aeabi_d2f+0x14>
   bbbda:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bbbde:	d107      	bne.n	bbbf0 <__aeabi_d2f+0x90>
   bbbe0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bbbe4:	bf1e      	ittt	ne
   bbbe6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bbbea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bbbee:	4770      	bxne	lr
   bbbf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bbbf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bbbf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bbbfc:	4770      	bx	lr
   bbbfe:	bf00      	nop

000bbc00 <__aeabi_d2ulz>:
   bbc00:	b5d0      	push	{r4, r6, r7, lr}
   bbc02:	4b0c      	ldr	r3, [pc, #48]	; (bbc34 <__aeabi_d2ulz+0x34>)
   bbc04:	2200      	movs	r2, #0
   bbc06:	4606      	mov	r6, r0
   bbc08:	460f      	mov	r7, r1
   bbc0a:	f7ff fcc7 	bl	bb59c <__aeabi_dmul>
   bbc0e:	f7ff ff87 	bl	bbb20 <__aeabi_d2uiz>
   bbc12:	4604      	mov	r4, r0
   bbc14:	f7ff fc48 	bl	bb4a8 <__aeabi_ui2d>
   bbc18:	4b07      	ldr	r3, [pc, #28]	; (bbc38 <__aeabi_d2ulz+0x38>)
   bbc1a:	2200      	movs	r2, #0
   bbc1c:	f7ff fcbe 	bl	bb59c <__aeabi_dmul>
   bbc20:	4602      	mov	r2, r0
   bbc22:	460b      	mov	r3, r1
   bbc24:	4630      	mov	r0, r6
   bbc26:	4639      	mov	r1, r7
   bbc28:	f7ff fb00 	bl	bb22c <__aeabi_dsub>
   bbc2c:	f7ff ff78 	bl	bbb20 <__aeabi_d2uiz>
   bbc30:	4621      	mov	r1, r4
   bbc32:	bdd0      	pop	{r4, r6, r7, pc}
   bbc34:	3df00000 	.word	0x3df00000
   bbc38:	41f00000 	.word	0x41f00000

000bbc3c <atexit>:
   bbc3c:	2300      	movs	r3, #0
   bbc3e:	4601      	mov	r1, r0
   bbc40:	461a      	mov	r2, r3
   bbc42:	4618      	mov	r0, r3
   bbc44:	f000 bfaa 	b.w	bcb9c <__register_exitproc>

000bbc48 <atof>:
   bbc48:	2100      	movs	r1, #0
   bbc4a:	f000 bf0f 	b.w	bca6c <strtod>

000bbc4e <atoi>:
   bbc4e:	220a      	movs	r2, #10
   bbc50:	2100      	movs	r1, #0
   bbc52:	f000 bf99 	b.w	bcb88 <strtol>

000bbc56 <memcmp>:
   bbc56:	b510      	push	{r4, lr}
   bbc58:	3901      	subs	r1, #1
   bbc5a:	4402      	add	r2, r0
   bbc5c:	4290      	cmp	r0, r2
   bbc5e:	d101      	bne.n	bbc64 <memcmp+0xe>
   bbc60:	2000      	movs	r0, #0
   bbc62:	e005      	b.n	bbc70 <memcmp+0x1a>
   bbc64:	7803      	ldrb	r3, [r0, #0]
   bbc66:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bbc6a:	42a3      	cmp	r3, r4
   bbc6c:	d001      	beq.n	bbc72 <memcmp+0x1c>
   bbc6e:	1b18      	subs	r0, r3, r4
   bbc70:	bd10      	pop	{r4, pc}
   bbc72:	3001      	adds	r0, #1
   bbc74:	e7f2      	b.n	bbc5c <memcmp+0x6>

000bbc76 <memcpy>:
   bbc76:	440a      	add	r2, r1
   bbc78:	4291      	cmp	r1, r2
   bbc7a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bbc7e:	d100      	bne.n	bbc82 <memcpy+0xc>
   bbc80:	4770      	bx	lr
   bbc82:	b510      	push	{r4, lr}
   bbc84:	f811 4b01 	ldrb.w	r4, [r1], #1
   bbc88:	f803 4f01 	strb.w	r4, [r3, #1]!
   bbc8c:	4291      	cmp	r1, r2
   bbc8e:	d1f9      	bne.n	bbc84 <memcpy+0xe>
   bbc90:	bd10      	pop	{r4, pc}

000bbc92 <memmove>:
   bbc92:	4288      	cmp	r0, r1
   bbc94:	b510      	push	{r4, lr}
   bbc96:	eb01 0402 	add.w	r4, r1, r2
   bbc9a:	d902      	bls.n	bbca2 <memmove+0x10>
   bbc9c:	4284      	cmp	r4, r0
   bbc9e:	4623      	mov	r3, r4
   bbca0:	d807      	bhi.n	bbcb2 <memmove+0x20>
   bbca2:	1e43      	subs	r3, r0, #1
   bbca4:	42a1      	cmp	r1, r4
   bbca6:	d008      	beq.n	bbcba <memmove+0x28>
   bbca8:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbcac:	f803 2f01 	strb.w	r2, [r3, #1]!
   bbcb0:	e7f8      	b.n	bbca4 <memmove+0x12>
   bbcb2:	4402      	add	r2, r0
   bbcb4:	4601      	mov	r1, r0
   bbcb6:	428a      	cmp	r2, r1
   bbcb8:	d100      	bne.n	bbcbc <memmove+0x2a>
   bbcba:	bd10      	pop	{r4, pc}
   bbcbc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bbcc0:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bbcc4:	e7f7      	b.n	bbcb6 <memmove+0x24>

000bbcc6 <memset>:
   bbcc6:	4402      	add	r2, r0
   bbcc8:	4603      	mov	r3, r0
   bbcca:	4293      	cmp	r3, r2
   bbccc:	d100      	bne.n	bbcd0 <memset+0xa>
   bbcce:	4770      	bx	lr
   bbcd0:	f803 1b01 	strb.w	r1, [r3], #1
   bbcd4:	e7f9      	b.n	bbcca <memset+0x4>
	...

000bbcd8 <srand>:
   bbcd8:	b538      	push	{r3, r4, r5, lr}
   bbcda:	4b10      	ldr	r3, [pc, #64]	; (bbd1c <srand+0x44>)
   bbcdc:	681d      	ldr	r5, [r3, #0]
   bbcde:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbce0:	4604      	mov	r4, r0
   bbce2:	b9b3      	cbnz	r3, bbd12 <srand+0x3a>
   bbce4:	2018      	movs	r0, #24
   bbce6:	f7fb fb83 	bl	b73f0 <malloc>
   bbcea:	4602      	mov	r2, r0
   bbcec:	63a8      	str	r0, [r5, #56]	; 0x38
   bbcee:	b920      	cbnz	r0, bbcfa <srand+0x22>
   bbcf0:	4b0b      	ldr	r3, [pc, #44]	; (bbd20 <srand+0x48>)
   bbcf2:	480c      	ldr	r0, [pc, #48]	; (bbd24 <srand+0x4c>)
   bbcf4:	2142      	movs	r1, #66	; 0x42
   bbcf6:	f7fb fbcb 	bl	b7490 <__assert_func>
   bbcfa:	490b      	ldr	r1, [pc, #44]	; (bbd28 <srand+0x50>)
   bbcfc:	4b0b      	ldr	r3, [pc, #44]	; (bbd2c <srand+0x54>)
   bbcfe:	e9c0 1300 	strd	r1, r3, [r0]
   bbd02:	4b0b      	ldr	r3, [pc, #44]	; (bbd30 <srand+0x58>)
   bbd04:	6083      	str	r3, [r0, #8]
   bbd06:	230b      	movs	r3, #11
   bbd08:	8183      	strh	r3, [r0, #12]
   bbd0a:	2100      	movs	r1, #0
   bbd0c:	2001      	movs	r0, #1
   bbd0e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bbd12:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbd14:	2200      	movs	r2, #0
   bbd16:	611c      	str	r4, [r3, #16]
   bbd18:	615a      	str	r2, [r3, #20]
   bbd1a:	bd38      	pop	{r3, r4, r5, pc}
   bbd1c:	2003db1c 	.word	0x2003db1c
   bbd20:	000be8b1 	.word	0x000be8b1
   bbd24:	000be8c8 	.word	0x000be8c8
   bbd28:	abcd330e 	.word	0xabcd330e
   bbd2c:	e66d1234 	.word	0xe66d1234
   bbd30:	0005deec 	.word	0x0005deec

000bbd34 <strcat>:
   bbd34:	b510      	push	{r4, lr}
   bbd36:	4602      	mov	r2, r0
   bbd38:	7814      	ldrb	r4, [r2, #0]
   bbd3a:	4613      	mov	r3, r2
   bbd3c:	3201      	adds	r2, #1
   bbd3e:	2c00      	cmp	r4, #0
   bbd40:	d1fa      	bne.n	bbd38 <strcat+0x4>
   bbd42:	3b01      	subs	r3, #1
   bbd44:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbd48:	f803 2f01 	strb.w	r2, [r3, #1]!
   bbd4c:	2a00      	cmp	r2, #0
   bbd4e:	d1f9      	bne.n	bbd44 <strcat+0x10>
   bbd50:	bd10      	pop	{r4, pc}

000bbd52 <strcmp>:
   bbd52:	f810 2b01 	ldrb.w	r2, [r0], #1
   bbd56:	f811 3b01 	ldrb.w	r3, [r1], #1
   bbd5a:	2a01      	cmp	r2, #1
   bbd5c:	bf28      	it	cs
   bbd5e:	429a      	cmpcs	r2, r3
   bbd60:	d0f7      	beq.n	bbd52 <strcmp>
   bbd62:	1ad0      	subs	r0, r2, r3
   bbd64:	4770      	bx	lr

000bbd66 <strcpy>:
   bbd66:	4603      	mov	r3, r0
   bbd68:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbd6c:	f803 2b01 	strb.w	r2, [r3], #1
   bbd70:	2a00      	cmp	r2, #0
   bbd72:	d1f9      	bne.n	bbd68 <strcpy+0x2>
   bbd74:	4770      	bx	lr
	...

000bbd78 <strdup>:
   bbd78:	4b02      	ldr	r3, [pc, #8]	; (bbd84 <strdup+0xc>)
   bbd7a:	4601      	mov	r1, r0
   bbd7c:	6818      	ldr	r0, [r3, #0]
   bbd7e:	f000 b803 	b.w	bbd88 <_strdup_r>
   bbd82:	bf00      	nop
   bbd84:	2003db1c 	.word	0x2003db1c

000bbd88 <_strdup_r>:
   bbd88:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bbd8a:	4604      	mov	r4, r0
   bbd8c:	4608      	mov	r0, r1
   bbd8e:	460d      	mov	r5, r1
   bbd90:	f000 f80f 	bl	bbdb2 <strlen>
   bbd94:	1c42      	adds	r2, r0, #1
   bbd96:	4611      	mov	r1, r2
   bbd98:	4620      	mov	r0, r4
   bbd9a:	9201      	str	r2, [sp, #4]
   bbd9c:	f7fb fb68 	bl	b7470 <_malloc_r>
   bbda0:	4604      	mov	r4, r0
   bbda2:	b118      	cbz	r0, bbdac <_strdup_r+0x24>
   bbda4:	9a01      	ldr	r2, [sp, #4]
   bbda6:	4629      	mov	r1, r5
   bbda8:	f7ff ff65 	bl	bbc76 <memcpy>
   bbdac:	4620      	mov	r0, r4
   bbdae:	b003      	add	sp, #12
   bbdb0:	bd30      	pop	{r4, r5, pc}

000bbdb2 <strlen>:
   bbdb2:	4603      	mov	r3, r0
   bbdb4:	f813 2b01 	ldrb.w	r2, [r3], #1
   bbdb8:	2a00      	cmp	r2, #0
   bbdba:	d1fb      	bne.n	bbdb4 <strlen+0x2>
   bbdbc:	1a18      	subs	r0, r3, r0
   bbdbe:	3801      	subs	r0, #1
   bbdc0:	4770      	bx	lr

000bbdc2 <strncmp>:
   bbdc2:	b510      	push	{r4, lr}
   bbdc4:	b17a      	cbz	r2, bbde6 <strncmp+0x24>
   bbdc6:	4603      	mov	r3, r0
   bbdc8:	3901      	subs	r1, #1
   bbdca:	1884      	adds	r4, r0, r2
   bbdcc:	f813 0b01 	ldrb.w	r0, [r3], #1
   bbdd0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bbdd4:	4290      	cmp	r0, r2
   bbdd6:	d101      	bne.n	bbddc <strncmp+0x1a>
   bbdd8:	42a3      	cmp	r3, r4
   bbdda:	d101      	bne.n	bbde0 <strncmp+0x1e>
   bbddc:	1a80      	subs	r0, r0, r2
   bbdde:	bd10      	pop	{r4, pc}
   bbde0:	2800      	cmp	r0, #0
   bbde2:	d1f3      	bne.n	bbdcc <strncmp+0xa>
   bbde4:	e7fa      	b.n	bbddc <strncmp+0x1a>
   bbde6:	4610      	mov	r0, r2
   bbde8:	e7f9      	b.n	bbdde <strncmp+0x1c>

000bbdea <strncpy>:
   bbdea:	b510      	push	{r4, lr}
   bbdec:	3901      	subs	r1, #1
   bbdee:	4603      	mov	r3, r0
   bbdf0:	b132      	cbz	r2, bbe00 <strncpy+0x16>
   bbdf2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bbdf6:	f803 4b01 	strb.w	r4, [r3], #1
   bbdfa:	3a01      	subs	r2, #1
   bbdfc:	2c00      	cmp	r4, #0
   bbdfe:	d1f7      	bne.n	bbdf0 <strncpy+0x6>
   bbe00:	441a      	add	r2, r3
   bbe02:	2100      	movs	r1, #0
   bbe04:	4293      	cmp	r3, r2
   bbe06:	d100      	bne.n	bbe0a <strncpy+0x20>
   bbe08:	bd10      	pop	{r4, pc}
   bbe0a:	f803 1b01 	strb.w	r1, [r3], #1
   bbe0e:	e7f9      	b.n	bbe04 <strncpy+0x1a>

000bbe10 <strnlen>:
   bbe10:	b510      	push	{r4, lr}
   bbe12:	4602      	mov	r2, r0
   bbe14:	4401      	add	r1, r0
   bbe16:	428a      	cmp	r2, r1
   bbe18:	4613      	mov	r3, r2
   bbe1a:	d003      	beq.n	bbe24 <strnlen+0x14>
   bbe1c:	781c      	ldrb	r4, [r3, #0]
   bbe1e:	3201      	adds	r2, #1
   bbe20:	2c00      	cmp	r4, #0
   bbe22:	d1f8      	bne.n	bbe16 <strnlen+0x6>
   bbe24:	1a18      	subs	r0, r3, r0
   bbe26:	bd10      	pop	{r4, pc}

000bbe28 <sulp>:
   bbe28:	b570      	push	{r4, r5, r6, lr}
   bbe2a:	4604      	mov	r4, r0
   bbe2c:	460d      	mov	r5, r1
   bbe2e:	ec45 4b10 	vmov	d0, r4, r5
   bbe32:	4616      	mov	r6, r2
   bbe34:	f001 fe0c 	bl	bda50 <__ulp>
   bbe38:	ec51 0b10 	vmov	r0, r1, d0
   bbe3c:	b17e      	cbz	r6, bbe5e <sulp+0x36>
   bbe3e:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bbe42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bbe46:	2b00      	cmp	r3, #0
   bbe48:	dd09      	ble.n	bbe5e <sulp+0x36>
   bbe4a:	051b      	lsls	r3, r3, #20
   bbe4c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bbe50:	2400      	movs	r4, #0
   bbe52:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bbe56:	4622      	mov	r2, r4
   bbe58:	462b      	mov	r3, r5
   bbe5a:	f7ff fb9f 	bl	bb59c <__aeabi_dmul>
   bbe5e:	bd70      	pop	{r4, r5, r6, pc}

000bbe60 <_strtod_l>:
   bbe60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbe64:	ed2d 8b02 	vpush	{d8}
   bbe68:	b09d      	sub	sp, #116	; 0x74
   bbe6a:	461f      	mov	r7, r3
   bbe6c:	2300      	movs	r3, #0
   bbe6e:	9318      	str	r3, [sp, #96]	; 0x60
   bbe70:	4ba2      	ldr	r3, [pc, #648]	; (bc0fc <_strtod_l+0x29c>)
   bbe72:	9213      	str	r2, [sp, #76]	; 0x4c
   bbe74:	681b      	ldr	r3, [r3, #0]
   bbe76:	9305      	str	r3, [sp, #20]
   bbe78:	4604      	mov	r4, r0
   bbe7a:	4618      	mov	r0, r3
   bbe7c:	4688      	mov	r8, r1
   bbe7e:	f7ff ff98 	bl	bbdb2 <strlen>
   bbe82:	f04f 0a00 	mov.w	sl, #0
   bbe86:	4605      	mov	r5, r0
   bbe88:	f04f 0b00 	mov.w	fp, #0
   bbe8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bbe90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbe92:	781a      	ldrb	r2, [r3, #0]
   bbe94:	2a2b      	cmp	r2, #43	; 0x2b
   bbe96:	d04e      	beq.n	bbf36 <_strtod_l+0xd6>
   bbe98:	d83b      	bhi.n	bbf12 <_strtod_l+0xb2>
   bbe9a:	2a0d      	cmp	r2, #13
   bbe9c:	d834      	bhi.n	bbf08 <_strtod_l+0xa8>
   bbe9e:	2a08      	cmp	r2, #8
   bbea0:	d834      	bhi.n	bbf0c <_strtod_l+0xac>
   bbea2:	2a00      	cmp	r2, #0
   bbea4:	d03e      	beq.n	bbf24 <_strtod_l+0xc4>
   bbea6:	2300      	movs	r3, #0
   bbea8:	930a      	str	r3, [sp, #40]	; 0x28
   bbeaa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bbeac:	7833      	ldrb	r3, [r6, #0]
   bbeae:	2b30      	cmp	r3, #48	; 0x30
   bbeb0:	f040 80b0 	bne.w	bc014 <_strtod_l+0x1b4>
   bbeb4:	7873      	ldrb	r3, [r6, #1]
   bbeb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bbeba:	2b58      	cmp	r3, #88	; 0x58
   bbebc:	d168      	bne.n	bbf90 <_strtod_l+0x130>
   bbebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bbec0:	9301      	str	r3, [sp, #4]
   bbec2:	ab18      	add	r3, sp, #96	; 0x60
   bbec4:	9702      	str	r7, [sp, #8]
   bbec6:	9300      	str	r3, [sp, #0]
   bbec8:	4a8d      	ldr	r2, [pc, #564]	; (bc100 <_strtod_l+0x2a0>)
   bbeca:	ab19      	add	r3, sp, #100	; 0x64
   bbecc:	a917      	add	r1, sp, #92	; 0x5c
   bbece:	4620      	mov	r0, r4
   bbed0:	f000 ff2e 	bl	bcd30 <__gethex>
   bbed4:	f010 0707 	ands.w	r7, r0, #7
   bbed8:	4605      	mov	r5, r0
   bbeda:	d005      	beq.n	bbee8 <_strtod_l+0x88>
   bbedc:	2f06      	cmp	r7, #6
   bbede:	d12c      	bne.n	bbf3a <_strtod_l+0xda>
   bbee0:	3601      	adds	r6, #1
   bbee2:	2300      	movs	r3, #0
   bbee4:	9617      	str	r6, [sp, #92]	; 0x5c
   bbee6:	930a      	str	r3, [sp, #40]	; 0x28
   bbee8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bbeea:	2b00      	cmp	r3, #0
   bbeec:	f040 8590 	bne.w	bca10 <_strtod_l+0xbb0>
   bbef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bbef2:	b1eb      	cbz	r3, bbf30 <_strtod_l+0xd0>
   bbef4:	4652      	mov	r2, sl
   bbef6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bbefa:	ec43 2b10 	vmov	d0, r2, r3
   bbefe:	b01d      	add	sp, #116	; 0x74
   bbf00:	ecbd 8b02 	vpop	{d8}
   bbf04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbf08:	2a20      	cmp	r2, #32
   bbf0a:	d1cc      	bne.n	bbea6 <_strtod_l+0x46>
   bbf0c:	3301      	adds	r3, #1
   bbf0e:	9317      	str	r3, [sp, #92]	; 0x5c
   bbf10:	e7be      	b.n	bbe90 <_strtod_l+0x30>
   bbf12:	2a2d      	cmp	r2, #45	; 0x2d
   bbf14:	d1c7      	bne.n	bbea6 <_strtod_l+0x46>
   bbf16:	2201      	movs	r2, #1
   bbf18:	920a      	str	r2, [sp, #40]	; 0x28
   bbf1a:	1c5a      	adds	r2, r3, #1
   bbf1c:	9217      	str	r2, [sp, #92]	; 0x5c
   bbf1e:	785b      	ldrb	r3, [r3, #1]
   bbf20:	2b00      	cmp	r3, #0
   bbf22:	d1c2      	bne.n	bbeaa <_strtod_l+0x4a>
   bbf24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bbf26:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bbf2a:	2b00      	cmp	r3, #0
   bbf2c:	f040 856e 	bne.w	bca0c <_strtod_l+0xbac>
   bbf30:	4652      	mov	r2, sl
   bbf32:	465b      	mov	r3, fp
   bbf34:	e7e1      	b.n	bbefa <_strtod_l+0x9a>
   bbf36:	2200      	movs	r2, #0
   bbf38:	e7ee      	b.n	bbf18 <_strtod_l+0xb8>
   bbf3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bbf3c:	b13a      	cbz	r2, bbf4e <_strtod_l+0xee>
   bbf3e:	2135      	movs	r1, #53	; 0x35
   bbf40:	a81a      	add	r0, sp, #104	; 0x68
   bbf42:	f001 fe90 	bl	bdc66 <__copybits>
   bbf46:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbf48:	4620      	mov	r0, r4
   bbf4a:	f001 fa4f 	bl	bd3ec <_Bfree>
   bbf4e:	3f01      	subs	r7, #1
   bbf50:	2f04      	cmp	r7, #4
   bbf52:	d806      	bhi.n	bbf62 <_strtod_l+0x102>
   bbf54:	e8df f007 	tbb	[pc, r7]
   bbf58:	1714030a 	.word	0x1714030a
   bbf5c:	0a          	.byte	0x0a
   bbf5d:	00          	.byte	0x00
   bbf5e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bbf62:	0728      	lsls	r0, r5, #28
   bbf64:	d5c0      	bpl.n	bbee8 <_strtod_l+0x88>
   bbf66:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bbf6a:	e7bd      	b.n	bbee8 <_strtod_l+0x88>
   bbf6c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bbf70:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bbf72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bbf76:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bbf7a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bbf7e:	e7f0      	b.n	bbf62 <_strtod_l+0x102>
   bbf80:	f8df b180 	ldr.w	fp, [pc, #384]	; bc104 <_strtod_l+0x2a4>
   bbf84:	e7ed      	b.n	bbf62 <_strtod_l+0x102>
   bbf86:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bbf8a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bbf8e:	e7e8      	b.n	bbf62 <_strtod_l+0x102>
   bbf90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbf92:	1c5a      	adds	r2, r3, #1
   bbf94:	9217      	str	r2, [sp, #92]	; 0x5c
   bbf96:	785b      	ldrb	r3, [r3, #1]
   bbf98:	2b30      	cmp	r3, #48	; 0x30
   bbf9a:	d0f9      	beq.n	bbf90 <_strtod_l+0x130>
   bbf9c:	2b00      	cmp	r3, #0
   bbf9e:	d0a3      	beq.n	bbee8 <_strtod_l+0x88>
   bbfa0:	2301      	movs	r3, #1
   bbfa2:	f04f 0900 	mov.w	r9, #0
   bbfa6:	9304      	str	r3, [sp, #16]
   bbfa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbfaa:	9308      	str	r3, [sp, #32]
   bbfac:	f8cd 901c 	str.w	r9, [sp, #28]
   bbfb0:	464f      	mov	r7, r9
   bbfb2:	220a      	movs	r2, #10
   bbfb4:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bbfb6:	7806      	ldrb	r6, [r0, #0]
   bbfb8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bbfbc:	b2d9      	uxtb	r1, r3
   bbfbe:	2909      	cmp	r1, #9
   bbfc0:	d92a      	bls.n	bc018 <_strtod_l+0x1b8>
   bbfc2:	9905      	ldr	r1, [sp, #20]
   bbfc4:	462a      	mov	r2, r5
   bbfc6:	f7ff fefc 	bl	bbdc2 <strncmp>
   bbfca:	b398      	cbz	r0, bc034 <_strtod_l+0x1d4>
   bbfcc:	2000      	movs	r0, #0
   bbfce:	4632      	mov	r2, r6
   bbfd0:	463d      	mov	r5, r7
   bbfd2:	9005      	str	r0, [sp, #20]
   bbfd4:	4603      	mov	r3, r0
   bbfd6:	2a65      	cmp	r2, #101	; 0x65
   bbfd8:	d001      	beq.n	bbfde <_strtod_l+0x17e>
   bbfda:	2a45      	cmp	r2, #69	; 0x45
   bbfdc:	d118      	bne.n	bc010 <_strtod_l+0x1b0>
   bbfde:	b91d      	cbnz	r5, bbfe8 <_strtod_l+0x188>
   bbfe0:	9a04      	ldr	r2, [sp, #16]
   bbfe2:	4302      	orrs	r2, r0
   bbfe4:	d09e      	beq.n	bbf24 <_strtod_l+0xc4>
   bbfe6:	2500      	movs	r5, #0
   bbfe8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bbfec:	f108 0201 	add.w	r2, r8, #1
   bbff0:	9217      	str	r2, [sp, #92]	; 0x5c
   bbff2:	f898 2001 	ldrb.w	r2, [r8, #1]
   bbff6:	2a2b      	cmp	r2, #43	; 0x2b
   bbff8:	d075      	beq.n	bc0e6 <_strtod_l+0x286>
   bbffa:	2a2d      	cmp	r2, #45	; 0x2d
   bbffc:	d07b      	beq.n	bc0f6 <_strtod_l+0x296>
   bbffe:	f04f 0c00 	mov.w	ip, #0
   bc002:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bc006:	2909      	cmp	r1, #9
   bc008:	f240 8082 	bls.w	bc110 <_strtod_l+0x2b0>
   bc00c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc010:	2600      	movs	r6, #0
   bc012:	e09d      	b.n	bc150 <_strtod_l+0x2f0>
   bc014:	2300      	movs	r3, #0
   bc016:	e7c4      	b.n	bbfa2 <_strtod_l+0x142>
   bc018:	2f08      	cmp	r7, #8
   bc01a:	bfd8      	it	le
   bc01c:	9907      	ldrle	r1, [sp, #28]
   bc01e:	f100 0001 	add.w	r0, r0, #1
   bc022:	bfda      	itte	le
   bc024:	fb02 3301 	mlale	r3, r2, r1, r3
   bc028:	9307      	strle	r3, [sp, #28]
   bc02a:	fb02 3909 	mlagt	r9, r2, r9, r3
   bc02e:	3701      	adds	r7, #1
   bc030:	9017      	str	r0, [sp, #92]	; 0x5c
   bc032:	e7bf      	b.n	bbfb4 <_strtod_l+0x154>
   bc034:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc036:	195a      	adds	r2, r3, r5
   bc038:	9217      	str	r2, [sp, #92]	; 0x5c
   bc03a:	5d5a      	ldrb	r2, [r3, r5]
   bc03c:	2f00      	cmp	r7, #0
   bc03e:	d037      	beq.n	bc0b0 <_strtod_l+0x250>
   bc040:	9005      	str	r0, [sp, #20]
   bc042:	463d      	mov	r5, r7
   bc044:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bc048:	2b09      	cmp	r3, #9
   bc04a:	d912      	bls.n	bc072 <_strtod_l+0x212>
   bc04c:	2301      	movs	r3, #1
   bc04e:	e7c2      	b.n	bbfd6 <_strtod_l+0x176>
   bc050:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc052:	1c5a      	adds	r2, r3, #1
   bc054:	9217      	str	r2, [sp, #92]	; 0x5c
   bc056:	785a      	ldrb	r2, [r3, #1]
   bc058:	3001      	adds	r0, #1
   bc05a:	2a30      	cmp	r2, #48	; 0x30
   bc05c:	d0f8      	beq.n	bc050 <_strtod_l+0x1f0>
   bc05e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bc062:	2b08      	cmp	r3, #8
   bc064:	f200 84d9 	bhi.w	bca1a <_strtod_l+0xbba>
   bc068:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc06a:	9005      	str	r0, [sp, #20]
   bc06c:	2000      	movs	r0, #0
   bc06e:	9308      	str	r3, [sp, #32]
   bc070:	4605      	mov	r5, r0
   bc072:	3a30      	subs	r2, #48	; 0x30
   bc074:	f100 0301 	add.w	r3, r0, #1
   bc078:	d014      	beq.n	bc0a4 <_strtod_l+0x244>
   bc07a:	9905      	ldr	r1, [sp, #20]
   bc07c:	4419      	add	r1, r3
   bc07e:	9105      	str	r1, [sp, #20]
   bc080:	462b      	mov	r3, r5
   bc082:	eb00 0e05 	add.w	lr, r0, r5
   bc086:	210a      	movs	r1, #10
   bc088:	4573      	cmp	r3, lr
   bc08a:	d113      	bne.n	bc0b4 <_strtod_l+0x254>
   bc08c:	182b      	adds	r3, r5, r0
   bc08e:	2b08      	cmp	r3, #8
   bc090:	f105 0501 	add.w	r5, r5, #1
   bc094:	4405      	add	r5, r0
   bc096:	dc1c      	bgt.n	bc0d2 <_strtod_l+0x272>
   bc098:	9907      	ldr	r1, [sp, #28]
   bc09a:	230a      	movs	r3, #10
   bc09c:	fb03 2301 	mla	r3, r3, r1, r2
   bc0a0:	9307      	str	r3, [sp, #28]
   bc0a2:	2300      	movs	r3, #0
   bc0a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc0a6:	1c51      	adds	r1, r2, #1
   bc0a8:	9117      	str	r1, [sp, #92]	; 0x5c
   bc0aa:	7852      	ldrb	r2, [r2, #1]
   bc0ac:	4618      	mov	r0, r3
   bc0ae:	e7c9      	b.n	bc044 <_strtod_l+0x1e4>
   bc0b0:	4638      	mov	r0, r7
   bc0b2:	e7d2      	b.n	bc05a <_strtod_l+0x1fa>
   bc0b4:	2b08      	cmp	r3, #8
   bc0b6:	dc04      	bgt.n	bc0c2 <_strtod_l+0x262>
   bc0b8:	9e07      	ldr	r6, [sp, #28]
   bc0ba:	434e      	muls	r6, r1
   bc0bc:	9607      	str	r6, [sp, #28]
   bc0be:	3301      	adds	r3, #1
   bc0c0:	e7e2      	b.n	bc088 <_strtod_l+0x228>
   bc0c2:	f103 0c01 	add.w	ip, r3, #1
   bc0c6:	f1bc 0f10 	cmp.w	ip, #16
   bc0ca:	bfd8      	it	le
   bc0cc:	fb01 f909 	mulle.w	r9, r1, r9
   bc0d0:	e7f5      	b.n	bc0be <_strtod_l+0x25e>
   bc0d2:	2d10      	cmp	r5, #16
   bc0d4:	bfdc      	itt	le
   bc0d6:	230a      	movle	r3, #10
   bc0d8:	fb03 2909 	mlale	r9, r3, r9, r2
   bc0dc:	e7e1      	b.n	bc0a2 <_strtod_l+0x242>
   bc0de:	2300      	movs	r3, #0
   bc0e0:	9305      	str	r3, [sp, #20]
   bc0e2:	2301      	movs	r3, #1
   bc0e4:	e77c      	b.n	bbfe0 <_strtod_l+0x180>
   bc0e6:	f04f 0c00 	mov.w	ip, #0
   bc0ea:	f108 0202 	add.w	r2, r8, #2
   bc0ee:	9217      	str	r2, [sp, #92]	; 0x5c
   bc0f0:	f898 2002 	ldrb.w	r2, [r8, #2]
   bc0f4:	e785      	b.n	bc002 <_strtod_l+0x1a2>
   bc0f6:	f04f 0c01 	mov.w	ip, #1
   bc0fa:	e7f6      	b.n	bc0ea <_strtod_l+0x28a>
   bc0fc:	000beaf4 	.word	0x000beaf4
   bc100:	000be930 	.word	0x000be930
   bc104:	7ff00000 	.word	0x7ff00000
   bc108:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc10a:	1c51      	adds	r1, r2, #1
   bc10c:	9117      	str	r1, [sp, #92]	; 0x5c
   bc10e:	7852      	ldrb	r2, [r2, #1]
   bc110:	2a30      	cmp	r2, #48	; 0x30
   bc112:	d0f9      	beq.n	bc108 <_strtod_l+0x2a8>
   bc114:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bc118:	2908      	cmp	r1, #8
   bc11a:	f63f af79 	bhi.w	bc010 <_strtod_l+0x1b0>
   bc11e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bc122:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc124:	9206      	str	r2, [sp, #24]
   bc126:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc128:	1c51      	adds	r1, r2, #1
   bc12a:	9117      	str	r1, [sp, #92]	; 0x5c
   bc12c:	7852      	ldrb	r2, [r2, #1]
   bc12e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bc132:	2e09      	cmp	r6, #9
   bc134:	d937      	bls.n	bc1a6 <_strtod_l+0x346>
   bc136:	9e06      	ldr	r6, [sp, #24]
   bc138:	1b89      	subs	r1, r1, r6
   bc13a:	2908      	cmp	r1, #8
   bc13c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bc140:	dc02      	bgt.n	bc148 <_strtod_l+0x2e8>
   bc142:	4576      	cmp	r6, lr
   bc144:	bfa8      	it	ge
   bc146:	4676      	movge	r6, lr
   bc148:	f1bc 0f00 	cmp.w	ip, #0
   bc14c:	d000      	beq.n	bc150 <_strtod_l+0x2f0>
   bc14e:	4276      	negs	r6, r6
   bc150:	2d00      	cmp	r5, #0
   bc152:	d14d      	bne.n	bc1f0 <_strtod_l+0x390>
   bc154:	9904      	ldr	r1, [sp, #16]
   bc156:	4301      	orrs	r1, r0
   bc158:	f47f aec6 	bne.w	bbee8 <_strtod_l+0x88>
   bc15c:	2b00      	cmp	r3, #0
   bc15e:	f47f aee1 	bne.w	bbf24 <_strtod_l+0xc4>
   bc162:	2a69      	cmp	r2, #105	; 0x69
   bc164:	d027      	beq.n	bc1b6 <_strtod_l+0x356>
   bc166:	dc24      	bgt.n	bc1b2 <_strtod_l+0x352>
   bc168:	2a49      	cmp	r2, #73	; 0x49
   bc16a:	d024      	beq.n	bc1b6 <_strtod_l+0x356>
   bc16c:	2a4e      	cmp	r2, #78	; 0x4e
   bc16e:	f47f aed9 	bne.w	bbf24 <_strtod_l+0xc4>
   bc172:	499f      	ldr	r1, [pc, #636]	; (bc3f0 <_strtod_l+0x590>)
   bc174:	a817      	add	r0, sp, #92	; 0x5c
   bc176:	f001 f833 	bl	bd1e0 <__match>
   bc17a:	2800      	cmp	r0, #0
   bc17c:	f43f aed2 	beq.w	bbf24 <_strtod_l+0xc4>
   bc180:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc182:	781b      	ldrb	r3, [r3, #0]
   bc184:	2b28      	cmp	r3, #40	; 0x28
   bc186:	d12d      	bne.n	bc1e4 <_strtod_l+0x384>
   bc188:	499a      	ldr	r1, [pc, #616]	; (bc3f4 <_strtod_l+0x594>)
   bc18a:	aa1a      	add	r2, sp, #104	; 0x68
   bc18c:	a817      	add	r0, sp, #92	; 0x5c
   bc18e:	f001 f83b 	bl	bd208 <__hexnan>
   bc192:	2805      	cmp	r0, #5
   bc194:	d126      	bne.n	bc1e4 <_strtod_l+0x384>
   bc196:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bc198:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bc19c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bc1a0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bc1a4:	e6a0      	b.n	bbee8 <_strtod_l+0x88>
   bc1a6:	210a      	movs	r1, #10
   bc1a8:	fb01 2e0e 	mla	lr, r1, lr, r2
   bc1ac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bc1b0:	e7b9      	b.n	bc126 <_strtod_l+0x2c6>
   bc1b2:	2a6e      	cmp	r2, #110	; 0x6e
   bc1b4:	e7db      	b.n	bc16e <_strtod_l+0x30e>
   bc1b6:	4990      	ldr	r1, [pc, #576]	; (bc3f8 <_strtod_l+0x598>)
   bc1b8:	a817      	add	r0, sp, #92	; 0x5c
   bc1ba:	f001 f811 	bl	bd1e0 <__match>
   bc1be:	2800      	cmp	r0, #0
   bc1c0:	f43f aeb0 	beq.w	bbf24 <_strtod_l+0xc4>
   bc1c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc1c6:	498d      	ldr	r1, [pc, #564]	; (bc3fc <_strtod_l+0x59c>)
   bc1c8:	3b01      	subs	r3, #1
   bc1ca:	a817      	add	r0, sp, #92	; 0x5c
   bc1cc:	9317      	str	r3, [sp, #92]	; 0x5c
   bc1ce:	f001 f807 	bl	bd1e0 <__match>
   bc1d2:	b910      	cbnz	r0, bc1da <_strtod_l+0x37a>
   bc1d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc1d6:	3301      	adds	r3, #1
   bc1d8:	9317      	str	r3, [sp, #92]	; 0x5c
   bc1da:	f8df b230 	ldr.w	fp, [pc, #560]	; bc40c <_strtod_l+0x5ac>
   bc1de:	f04f 0a00 	mov.w	sl, #0
   bc1e2:	e681      	b.n	bbee8 <_strtod_l+0x88>
   bc1e4:	4886      	ldr	r0, [pc, #536]	; (bc400 <_strtod_l+0x5a0>)
   bc1e6:	f001 fd93 	bl	bdd10 <nan>
   bc1ea:	ec5b ab10 	vmov	sl, fp, d0
   bc1ee:	e67b      	b.n	bbee8 <_strtod_l+0x88>
   bc1f0:	9b05      	ldr	r3, [sp, #20]
   bc1f2:	9807      	ldr	r0, [sp, #28]
   bc1f4:	1af3      	subs	r3, r6, r3
   bc1f6:	2f00      	cmp	r7, #0
   bc1f8:	bf08      	it	eq
   bc1fa:	462f      	moveq	r7, r5
   bc1fc:	2d10      	cmp	r5, #16
   bc1fe:	9306      	str	r3, [sp, #24]
   bc200:	46a8      	mov	r8, r5
   bc202:	bfa8      	it	ge
   bc204:	f04f 0810 	movge.w	r8, #16
   bc208:	f7ff f94e 	bl	bb4a8 <__aeabi_ui2d>
   bc20c:	2d09      	cmp	r5, #9
   bc20e:	4682      	mov	sl, r0
   bc210:	468b      	mov	fp, r1
   bc212:	dd13      	ble.n	bc23c <_strtod_l+0x3dc>
   bc214:	4b7b      	ldr	r3, [pc, #492]	; (bc404 <_strtod_l+0x5a4>)
   bc216:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bc21a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bc21e:	f7ff f9bd 	bl	bb59c <__aeabi_dmul>
   bc222:	4682      	mov	sl, r0
   bc224:	4648      	mov	r0, r9
   bc226:	468b      	mov	fp, r1
   bc228:	f7ff f93e 	bl	bb4a8 <__aeabi_ui2d>
   bc22c:	4602      	mov	r2, r0
   bc22e:	460b      	mov	r3, r1
   bc230:	4650      	mov	r0, sl
   bc232:	4659      	mov	r1, fp
   bc234:	f7fe fffc 	bl	bb230 <__adddf3>
   bc238:	4682      	mov	sl, r0
   bc23a:	468b      	mov	fp, r1
   bc23c:	2d0f      	cmp	r5, #15
   bc23e:	dc38      	bgt.n	bc2b2 <_strtod_l+0x452>
   bc240:	9b06      	ldr	r3, [sp, #24]
   bc242:	2b00      	cmp	r3, #0
   bc244:	f43f ae50 	beq.w	bbee8 <_strtod_l+0x88>
   bc248:	dd24      	ble.n	bc294 <_strtod_l+0x434>
   bc24a:	2b16      	cmp	r3, #22
   bc24c:	dc0b      	bgt.n	bc266 <_strtod_l+0x406>
   bc24e:	496d      	ldr	r1, [pc, #436]	; (bc404 <_strtod_l+0x5a4>)
   bc250:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bc254:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc258:	4652      	mov	r2, sl
   bc25a:	465b      	mov	r3, fp
   bc25c:	f7ff f99e 	bl	bb59c <__aeabi_dmul>
   bc260:	4682      	mov	sl, r0
   bc262:	468b      	mov	fp, r1
   bc264:	e640      	b.n	bbee8 <_strtod_l+0x88>
   bc266:	9a06      	ldr	r2, [sp, #24]
   bc268:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bc26c:	4293      	cmp	r3, r2
   bc26e:	db20      	blt.n	bc2b2 <_strtod_l+0x452>
   bc270:	4c64      	ldr	r4, [pc, #400]	; (bc404 <_strtod_l+0x5a4>)
   bc272:	f1c5 050f 	rsb	r5, r5, #15
   bc276:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bc27a:	4652      	mov	r2, sl
   bc27c:	465b      	mov	r3, fp
   bc27e:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc282:	f7ff f98b 	bl	bb59c <__aeabi_dmul>
   bc286:	9b06      	ldr	r3, [sp, #24]
   bc288:	1b5d      	subs	r5, r3, r5
   bc28a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bc28e:	e9d4 2300 	ldrd	r2, r3, [r4]
   bc292:	e7e3      	b.n	bc25c <_strtod_l+0x3fc>
   bc294:	9b06      	ldr	r3, [sp, #24]
   bc296:	3316      	adds	r3, #22
   bc298:	db0b      	blt.n	bc2b2 <_strtod_l+0x452>
   bc29a:	9b05      	ldr	r3, [sp, #20]
   bc29c:	1b9e      	subs	r6, r3, r6
   bc29e:	4b59      	ldr	r3, [pc, #356]	; (bc404 <_strtod_l+0x5a4>)
   bc2a0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bc2a4:	e9d6 2300 	ldrd	r2, r3, [r6]
   bc2a8:	4650      	mov	r0, sl
   bc2aa:	4659      	mov	r1, fp
   bc2ac:	f7ff faa0 	bl	bb7f0 <__aeabi_ddiv>
   bc2b0:	e7d6      	b.n	bc260 <_strtod_l+0x400>
   bc2b2:	9b06      	ldr	r3, [sp, #24]
   bc2b4:	eba5 0808 	sub.w	r8, r5, r8
   bc2b8:	4498      	add	r8, r3
   bc2ba:	f1b8 0f00 	cmp.w	r8, #0
   bc2be:	dd74      	ble.n	bc3aa <_strtod_l+0x54a>
   bc2c0:	f018 030f 	ands.w	r3, r8, #15
   bc2c4:	d00a      	beq.n	bc2dc <_strtod_l+0x47c>
   bc2c6:	494f      	ldr	r1, [pc, #316]	; (bc404 <_strtod_l+0x5a4>)
   bc2c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bc2cc:	4652      	mov	r2, sl
   bc2ce:	465b      	mov	r3, fp
   bc2d0:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc2d4:	f7ff f962 	bl	bb59c <__aeabi_dmul>
   bc2d8:	4682      	mov	sl, r0
   bc2da:	468b      	mov	fp, r1
   bc2dc:	f038 080f 	bics.w	r8, r8, #15
   bc2e0:	d04f      	beq.n	bc382 <_strtod_l+0x522>
   bc2e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bc2e6:	dd22      	ble.n	bc32e <_strtod_l+0x4ce>
   bc2e8:	2500      	movs	r5, #0
   bc2ea:	462e      	mov	r6, r5
   bc2ec:	9507      	str	r5, [sp, #28]
   bc2ee:	9505      	str	r5, [sp, #20]
   bc2f0:	2322      	movs	r3, #34	; 0x22
   bc2f2:	f8df b118 	ldr.w	fp, [pc, #280]	; bc40c <_strtod_l+0x5ac>
   bc2f6:	6023      	str	r3, [r4, #0]
   bc2f8:	f04f 0a00 	mov.w	sl, #0
   bc2fc:	9b07      	ldr	r3, [sp, #28]
   bc2fe:	2b00      	cmp	r3, #0
   bc300:	f43f adf2 	beq.w	bbee8 <_strtod_l+0x88>
   bc304:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc306:	4620      	mov	r0, r4
   bc308:	f001 f870 	bl	bd3ec <_Bfree>
   bc30c:	9905      	ldr	r1, [sp, #20]
   bc30e:	4620      	mov	r0, r4
   bc310:	f001 f86c 	bl	bd3ec <_Bfree>
   bc314:	4631      	mov	r1, r6
   bc316:	4620      	mov	r0, r4
   bc318:	f001 f868 	bl	bd3ec <_Bfree>
   bc31c:	9907      	ldr	r1, [sp, #28]
   bc31e:	4620      	mov	r0, r4
   bc320:	f001 f864 	bl	bd3ec <_Bfree>
   bc324:	4629      	mov	r1, r5
   bc326:	4620      	mov	r0, r4
   bc328:	f001 f860 	bl	bd3ec <_Bfree>
   bc32c:	e5dc      	b.n	bbee8 <_strtod_l+0x88>
   bc32e:	4b36      	ldr	r3, [pc, #216]	; (bc408 <_strtod_l+0x5a8>)
   bc330:	9304      	str	r3, [sp, #16]
   bc332:	2300      	movs	r3, #0
   bc334:	ea4f 1828 	mov.w	r8, r8, asr #4
   bc338:	4650      	mov	r0, sl
   bc33a:	4659      	mov	r1, fp
   bc33c:	4699      	mov	r9, r3
   bc33e:	f1b8 0f01 	cmp.w	r8, #1
   bc342:	dc21      	bgt.n	bc388 <_strtod_l+0x528>
   bc344:	b10b      	cbz	r3, bc34a <_strtod_l+0x4ea>
   bc346:	4682      	mov	sl, r0
   bc348:	468b      	mov	fp, r1
   bc34a:	4b2f      	ldr	r3, [pc, #188]	; (bc408 <_strtod_l+0x5a8>)
   bc34c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bc350:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bc354:	4652      	mov	r2, sl
   bc356:	465b      	mov	r3, fp
   bc358:	e9d9 0100 	ldrd	r0, r1, [r9]
   bc35c:	f7ff f91e 	bl	bb59c <__aeabi_dmul>
   bc360:	4b2a      	ldr	r3, [pc, #168]	; (bc40c <_strtod_l+0x5ac>)
   bc362:	460a      	mov	r2, r1
   bc364:	400b      	ands	r3, r1
   bc366:	492a      	ldr	r1, [pc, #168]	; (bc410 <_strtod_l+0x5b0>)
   bc368:	428b      	cmp	r3, r1
   bc36a:	4682      	mov	sl, r0
   bc36c:	d8bc      	bhi.n	bc2e8 <_strtod_l+0x488>
   bc36e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bc372:	428b      	cmp	r3, r1
   bc374:	bf86      	itte	hi
   bc376:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bc414 <_strtod_l+0x5b4>
   bc37a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bc37e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bc382:	2300      	movs	r3, #0
   bc384:	9304      	str	r3, [sp, #16]
   bc386:	e084      	b.n	bc492 <_strtod_l+0x632>
   bc388:	f018 0f01 	tst.w	r8, #1
   bc38c:	d005      	beq.n	bc39a <_strtod_l+0x53a>
   bc38e:	9b04      	ldr	r3, [sp, #16]
   bc390:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc394:	f7ff f902 	bl	bb59c <__aeabi_dmul>
   bc398:	2301      	movs	r3, #1
   bc39a:	9a04      	ldr	r2, [sp, #16]
   bc39c:	3208      	adds	r2, #8
   bc39e:	f109 0901 	add.w	r9, r9, #1
   bc3a2:	ea4f 0868 	mov.w	r8, r8, asr #1
   bc3a6:	9204      	str	r2, [sp, #16]
   bc3a8:	e7c9      	b.n	bc33e <_strtod_l+0x4de>
   bc3aa:	d0ea      	beq.n	bc382 <_strtod_l+0x522>
   bc3ac:	f1c8 0800 	rsb	r8, r8, #0
   bc3b0:	f018 020f 	ands.w	r2, r8, #15
   bc3b4:	d00a      	beq.n	bc3cc <_strtod_l+0x56c>
   bc3b6:	4b13      	ldr	r3, [pc, #76]	; (bc404 <_strtod_l+0x5a4>)
   bc3b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bc3bc:	4650      	mov	r0, sl
   bc3be:	4659      	mov	r1, fp
   bc3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc3c4:	f7ff fa14 	bl	bb7f0 <__aeabi_ddiv>
   bc3c8:	4682      	mov	sl, r0
   bc3ca:	468b      	mov	fp, r1
   bc3cc:	ea5f 1828 	movs.w	r8, r8, asr #4
   bc3d0:	d0d7      	beq.n	bc382 <_strtod_l+0x522>
   bc3d2:	f1b8 0f1f 	cmp.w	r8, #31
   bc3d6:	dd1f      	ble.n	bc418 <_strtod_l+0x5b8>
   bc3d8:	2500      	movs	r5, #0
   bc3da:	462e      	mov	r6, r5
   bc3dc:	9507      	str	r5, [sp, #28]
   bc3de:	9505      	str	r5, [sp, #20]
   bc3e0:	2322      	movs	r3, #34	; 0x22
   bc3e2:	f04f 0a00 	mov.w	sl, #0
   bc3e6:	f04f 0b00 	mov.w	fp, #0
   bc3ea:	6023      	str	r3, [r4, #0]
   bc3ec:	e786      	b.n	bc2fc <_strtod_l+0x49c>
   bc3ee:	bf00      	nop
   bc3f0:	000be92a 	.word	0x000be92a
   bc3f4:	000be944 	.word	0x000be944
   bc3f8:	000be921 	.word	0x000be921
   bc3fc:	000be924 	.word	0x000be924
   bc400:	000be1d5 	.word	0x000be1d5
   bc404:	000beb90 	.word	0x000beb90
   bc408:	000beb68 	.word	0x000beb68
   bc40c:	7ff00000 	.word	0x7ff00000
   bc410:	7ca00000 	.word	0x7ca00000
   bc414:	7fefffff 	.word	0x7fefffff
   bc418:	f018 0310 	ands.w	r3, r8, #16
   bc41c:	bf18      	it	ne
   bc41e:	236a      	movne	r3, #106	; 0x6a
   bc420:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bc7d0 <_strtod_l+0x970>
   bc424:	9304      	str	r3, [sp, #16]
   bc426:	4650      	mov	r0, sl
   bc428:	4659      	mov	r1, fp
   bc42a:	2300      	movs	r3, #0
   bc42c:	f018 0f01 	tst.w	r8, #1
   bc430:	d004      	beq.n	bc43c <_strtod_l+0x5dc>
   bc432:	e9d9 2300 	ldrd	r2, r3, [r9]
   bc436:	f7ff f8b1 	bl	bb59c <__aeabi_dmul>
   bc43a:	2301      	movs	r3, #1
   bc43c:	ea5f 0868 	movs.w	r8, r8, asr #1
   bc440:	f109 0908 	add.w	r9, r9, #8
   bc444:	d1f2      	bne.n	bc42c <_strtod_l+0x5cc>
   bc446:	b10b      	cbz	r3, bc44c <_strtod_l+0x5ec>
   bc448:	4682      	mov	sl, r0
   bc44a:	468b      	mov	fp, r1
   bc44c:	9b04      	ldr	r3, [sp, #16]
   bc44e:	b1c3      	cbz	r3, bc482 <_strtod_l+0x622>
   bc450:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bc454:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bc458:	2b00      	cmp	r3, #0
   bc45a:	4659      	mov	r1, fp
   bc45c:	dd11      	ble.n	bc482 <_strtod_l+0x622>
   bc45e:	2b1f      	cmp	r3, #31
   bc460:	f340 8124 	ble.w	bc6ac <_strtod_l+0x84c>
   bc464:	2b34      	cmp	r3, #52	; 0x34
   bc466:	bfde      	ittt	le
   bc468:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bc46c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bc470:	fa03 f202 	lslle.w	r2, r3, r2
   bc474:	f04f 0a00 	mov.w	sl, #0
   bc478:	bfcc      	ite	gt
   bc47a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bc47e:	ea02 0b01 	andle.w	fp, r2, r1
   bc482:	2200      	movs	r2, #0
   bc484:	2300      	movs	r3, #0
   bc486:	4650      	mov	r0, sl
   bc488:	4659      	mov	r1, fp
   bc48a:	f7ff faef 	bl	bba6c <__aeabi_dcmpeq>
   bc48e:	2800      	cmp	r0, #0
   bc490:	d1a2      	bne.n	bc3d8 <_strtod_l+0x578>
   bc492:	9b07      	ldr	r3, [sp, #28]
   bc494:	9300      	str	r3, [sp, #0]
   bc496:	9908      	ldr	r1, [sp, #32]
   bc498:	462b      	mov	r3, r5
   bc49a:	463a      	mov	r2, r7
   bc49c:	4620      	mov	r0, r4
   bc49e:	f001 f80d 	bl	bd4bc <__s2b>
   bc4a2:	9007      	str	r0, [sp, #28]
   bc4a4:	2800      	cmp	r0, #0
   bc4a6:	f43f af1f 	beq.w	bc2e8 <_strtod_l+0x488>
   bc4aa:	9b05      	ldr	r3, [sp, #20]
   bc4ac:	1b9e      	subs	r6, r3, r6
   bc4ae:	9b06      	ldr	r3, [sp, #24]
   bc4b0:	2b00      	cmp	r3, #0
   bc4b2:	bfb4      	ite	lt
   bc4b4:	4633      	movlt	r3, r6
   bc4b6:	2300      	movge	r3, #0
   bc4b8:	930c      	str	r3, [sp, #48]	; 0x30
   bc4ba:	9b06      	ldr	r3, [sp, #24]
   bc4bc:	2500      	movs	r5, #0
   bc4be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bc4c2:	9312      	str	r3, [sp, #72]	; 0x48
   bc4c4:	462e      	mov	r6, r5
   bc4c6:	9b07      	ldr	r3, [sp, #28]
   bc4c8:	4620      	mov	r0, r4
   bc4ca:	6859      	ldr	r1, [r3, #4]
   bc4cc:	f000 ff4e 	bl	bd36c <_Balloc>
   bc4d0:	9005      	str	r0, [sp, #20]
   bc4d2:	2800      	cmp	r0, #0
   bc4d4:	f43f af0c 	beq.w	bc2f0 <_strtod_l+0x490>
   bc4d8:	9b07      	ldr	r3, [sp, #28]
   bc4da:	691a      	ldr	r2, [r3, #16]
   bc4dc:	3202      	adds	r2, #2
   bc4de:	f103 010c 	add.w	r1, r3, #12
   bc4e2:	0092      	lsls	r2, r2, #2
   bc4e4:	300c      	adds	r0, #12
   bc4e6:	f7ff fbc6 	bl	bbc76 <memcpy>
   bc4ea:	ec4b ab10 	vmov	d0, sl, fp
   bc4ee:	aa1a      	add	r2, sp, #104	; 0x68
   bc4f0:	a919      	add	r1, sp, #100	; 0x64
   bc4f2:	4620      	mov	r0, r4
   bc4f4:	f001 fb28 	bl	bdb48 <__d2b>
   bc4f8:	ec4b ab18 	vmov	d8, sl, fp
   bc4fc:	9018      	str	r0, [sp, #96]	; 0x60
   bc4fe:	2800      	cmp	r0, #0
   bc500:	f43f aef6 	beq.w	bc2f0 <_strtod_l+0x490>
   bc504:	2101      	movs	r1, #1
   bc506:	4620      	mov	r0, r4
   bc508:	f001 f872 	bl	bd5f0 <__i2b>
   bc50c:	4606      	mov	r6, r0
   bc50e:	2800      	cmp	r0, #0
   bc510:	f43f aeee 	beq.w	bc2f0 <_strtod_l+0x490>
   bc514:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bc516:	9904      	ldr	r1, [sp, #16]
   bc518:	2b00      	cmp	r3, #0
   bc51a:	bfab      	itete	ge
   bc51c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bc51e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bc520:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bc522:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bc526:	bfac      	ite	ge
   bc528:	eb03 0902 	addge.w	r9, r3, r2
   bc52c:	1ad7      	sublt	r7, r2, r3
   bc52e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bc530:	eba3 0801 	sub.w	r8, r3, r1
   bc534:	4490      	add	r8, r2
   bc536:	4ba1      	ldr	r3, [pc, #644]	; (bc7bc <_strtod_l+0x95c>)
   bc538:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bc53c:	4598      	cmp	r8, r3
   bc53e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bc542:	f280 80c7 	bge.w	bc6d4 <_strtod_l+0x874>
   bc546:	eba3 0308 	sub.w	r3, r3, r8
   bc54a:	2b1f      	cmp	r3, #31
   bc54c:	eba2 0203 	sub.w	r2, r2, r3
   bc550:	f04f 0101 	mov.w	r1, #1
   bc554:	f300 80b1 	bgt.w	bc6ba <_strtod_l+0x85a>
   bc558:	fa01 f303 	lsl.w	r3, r1, r3
   bc55c:	930d      	str	r3, [sp, #52]	; 0x34
   bc55e:	2300      	movs	r3, #0
   bc560:	9308      	str	r3, [sp, #32]
   bc562:	eb09 0802 	add.w	r8, r9, r2
   bc566:	9b04      	ldr	r3, [sp, #16]
   bc568:	45c1      	cmp	r9, r8
   bc56a:	4417      	add	r7, r2
   bc56c:	441f      	add	r7, r3
   bc56e:	464b      	mov	r3, r9
   bc570:	bfa8      	it	ge
   bc572:	4643      	movge	r3, r8
   bc574:	42bb      	cmp	r3, r7
   bc576:	bfa8      	it	ge
   bc578:	463b      	movge	r3, r7
   bc57a:	2b00      	cmp	r3, #0
   bc57c:	bfc2      	ittt	gt
   bc57e:	eba8 0803 	subgt.w	r8, r8, r3
   bc582:	1aff      	subgt	r7, r7, r3
   bc584:	eba9 0903 	subgt.w	r9, r9, r3
   bc588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bc58a:	2b00      	cmp	r3, #0
   bc58c:	dd17      	ble.n	bc5be <_strtod_l+0x75e>
   bc58e:	4631      	mov	r1, r6
   bc590:	461a      	mov	r2, r3
   bc592:	4620      	mov	r0, r4
   bc594:	f001 f8ec 	bl	bd770 <__pow5mult>
   bc598:	4606      	mov	r6, r0
   bc59a:	2800      	cmp	r0, #0
   bc59c:	f43f aea8 	beq.w	bc2f0 <_strtod_l+0x490>
   bc5a0:	4601      	mov	r1, r0
   bc5a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bc5a4:	4620      	mov	r0, r4
   bc5a6:	f001 f839 	bl	bd61c <__multiply>
   bc5aa:	900b      	str	r0, [sp, #44]	; 0x2c
   bc5ac:	2800      	cmp	r0, #0
   bc5ae:	f43f ae9f 	beq.w	bc2f0 <_strtod_l+0x490>
   bc5b2:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc5b4:	4620      	mov	r0, r4
   bc5b6:	f000 ff19 	bl	bd3ec <_Bfree>
   bc5ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc5bc:	9318      	str	r3, [sp, #96]	; 0x60
   bc5be:	f1b8 0f00 	cmp.w	r8, #0
   bc5c2:	f300 808c 	bgt.w	bc6de <_strtod_l+0x87e>
   bc5c6:	9b06      	ldr	r3, [sp, #24]
   bc5c8:	2b00      	cmp	r3, #0
   bc5ca:	dd08      	ble.n	bc5de <_strtod_l+0x77e>
   bc5cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bc5ce:	9905      	ldr	r1, [sp, #20]
   bc5d0:	4620      	mov	r0, r4
   bc5d2:	f001 f8cd 	bl	bd770 <__pow5mult>
   bc5d6:	9005      	str	r0, [sp, #20]
   bc5d8:	2800      	cmp	r0, #0
   bc5da:	f43f ae89 	beq.w	bc2f0 <_strtod_l+0x490>
   bc5de:	2f00      	cmp	r7, #0
   bc5e0:	dd08      	ble.n	bc5f4 <_strtod_l+0x794>
   bc5e2:	9905      	ldr	r1, [sp, #20]
   bc5e4:	463a      	mov	r2, r7
   bc5e6:	4620      	mov	r0, r4
   bc5e8:	f001 f91c 	bl	bd824 <__lshift>
   bc5ec:	9005      	str	r0, [sp, #20]
   bc5ee:	2800      	cmp	r0, #0
   bc5f0:	f43f ae7e 	beq.w	bc2f0 <_strtod_l+0x490>
   bc5f4:	f1b9 0f00 	cmp.w	r9, #0
   bc5f8:	dd08      	ble.n	bc60c <_strtod_l+0x7ac>
   bc5fa:	4631      	mov	r1, r6
   bc5fc:	464a      	mov	r2, r9
   bc5fe:	4620      	mov	r0, r4
   bc600:	f001 f910 	bl	bd824 <__lshift>
   bc604:	4606      	mov	r6, r0
   bc606:	2800      	cmp	r0, #0
   bc608:	f43f ae72 	beq.w	bc2f0 <_strtod_l+0x490>
   bc60c:	9a05      	ldr	r2, [sp, #20]
   bc60e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc610:	4620      	mov	r0, r4
   bc612:	f001 f993 	bl	bd93c <__mdiff>
   bc616:	4605      	mov	r5, r0
   bc618:	2800      	cmp	r0, #0
   bc61a:	f43f ae69 	beq.w	bc2f0 <_strtod_l+0x490>
   bc61e:	68c3      	ldr	r3, [r0, #12]
   bc620:	930b      	str	r3, [sp, #44]	; 0x2c
   bc622:	2300      	movs	r3, #0
   bc624:	60c3      	str	r3, [r0, #12]
   bc626:	4631      	mov	r1, r6
   bc628:	f001 f96c 	bl	bd904 <__mcmp>
   bc62c:	2800      	cmp	r0, #0
   bc62e:	da60      	bge.n	bc6f2 <_strtod_l+0x892>
   bc630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc632:	ea53 030a 	orrs.w	r3, r3, sl
   bc636:	f040 8082 	bne.w	bc73e <_strtod_l+0x8de>
   bc63a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc63e:	2b00      	cmp	r3, #0
   bc640:	d17d      	bne.n	bc73e <_strtod_l+0x8de>
   bc642:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bc646:	0d1b      	lsrs	r3, r3, #20
   bc648:	051b      	lsls	r3, r3, #20
   bc64a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bc64e:	d976      	bls.n	bc73e <_strtod_l+0x8de>
   bc650:	696b      	ldr	r3, [r5, #20]
   bc652:	b913      	cbnz	r3, bc65a <_strtod_l+0x7fa>
   bc654:	692b      	ldr	r3, [r5, #16]
   bc656:	2b01      	cmp	r3, #1
   bc658:	dd71      	ble.n	bc73e <_strtod_l+0x8de>
   bc65a:	4629      	mov	r1, r5
   bc65c:	2201      	movs	r2, #1
   bc65e:	4620      	mov	r0, r4
   bc660:	f001 f8e0 	bl	bd824 <__lshift>
   bc664:	4631      	mov	r1, r6
   bc666:	4605      	mov	r5, r0
   bc668:	f001 f94c 	bl	bd904 <__mcmp>
   bc66c:	2800      	cmp	r0, #0
   bc66e:	dd66      	ble.n	bc73e <_strtod_l+0x8de>
   bc670:	9904      	ldr	r1, [sp, #16]
   bc672:	4a53      	ldr	r2, [pc, #332]	; (bc7c0 <_strtod_l+0x960>)
   bc674:	465b      	mov	r3, fp
   bc676:	2900      	cmp	r1, #0
   bc678:	f000 8081 	beq.w	bc77e <_strtod_l+0x91e>
   bc67c:	ea02 010b 	and.w	r1, r2, fp
   bc680:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bc684:	dc7b      	bgt.n	bc77e <_strtod_l+0x91e>
   bc686:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bc68a:	f77f aea9 	ble.w	bc3e0 <_strtod_l+0x580>
   bc68e:	4b4d      	ldr	r3, [pc, #308]	; (bc7c4 <_strtod_l+0x964>)
   bc690:	4650      	mov	r0, sl
   bc692:	4659      	mov	r1, fp
   bc694:	2200      	movs	r2, #0
   bc696:	f7fe ff81 	bl	bb59c <__aeabi_dmul>
   bc69a:	460b      	mov	r3, r1
   bc69c:	4303      	orrs	r3, r0
   bc69e:	bf08      	it	eq
   bc6a0:	2322      	moveq	r3, #34	; 0x22
   bc6a2:	4682      	mov	sl, r0
   bc6a4:	468b      	mov	fp, r1
   bc6a6:	bf08      	it	eq
   bc6a8:	6023      	streq	r3, [r4, #0]
   bc6aa:	e62b      	b.n	bc304 <_strtod_l+0x4a4>
   bc6ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc6b0:	fa02 f303 	lsl.w	r3, r2, r3
   bc6b4:	ea03 0a0a 	and.w	sl, r3, sl
   bc6b8:	e6e3      	b.n	bc482 <_strtod_l+0x622>
   bc6ba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bc6be:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bc6c2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bc6c6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bc6ca:	fa01 f308 	lsl.w	r3, r1, r8
   bc6ce:	9308      	str	r3, [sp, #32]
   bc6d0:	910d      	str	r1, [sp, #52]	; 0x34
   bc6d2:	e746      	b.n	bc562 <_strtod_l+0x702>
   bc6d4:	2300      	movs	r3, #0
   bc6d6:	9308      	str	r3, [sp, #32]
   bc6d8:	2301      	movs	r3, #1
   bc6da:	930d      	str	r3, [sp, #52]	; 0x34
   bc6dc:	e741      	b.n	bc562 <_strtod_l+0x702>
   bc6de:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc6e0:	4642      	mov	r2, r8
   bc6e2:	4620      	mov	r0, r4
   bc6e4:	f001 f89e 	bl	bd824 <__lshift>
   bc6e8:	9018      	str	r0, [sp, #96]	; 0x60
   bc6ea:	2800      	cmp	r0, #0
   bc6ec:	f47f af6b 	bne.w	bc5c6 <_strtod_l+0x766>
   bc6f0:	e5fe      	b.n	bc2f0 <_strtod_l+0x490>
   bc6f2:	465f      	mov	r7, fp
   bc6f4:	d16e      	bne.n	bc7d4 <_strtod_l+0x974>
   bc6f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bc6f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc6fc:	b342      	cbz	r2, bc750 <_strtod_l+0x8f0>
   bc6fe:	4a32      	ldr	r2, [pc, #200]	; (bc7c8 <_strtod_l+0x968>)
   bc700:	4293      	cmp	r3, r2
   bc702:	d128      	bne.n	bc756 <_strtod_l+0x8f6>
   bc704:	9b04      	ldr	r3, [sp, #16]
   bc706:	4651      	mov	r1, sl
   bc708:	b1eb      	cbz	r3, bc746 <_strtod_l+0x8e6>
   bc70a:	4b2d      	ldr	r3, [pc, #180]	; (bc7c0 <_strtod_l+0x960>)
   bc70c:	403b      	ands	r3, r7
   bc70e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bc712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc716:	d819      	bhi.n	bc74c <_strtod_l+0x8ec>
   bc718:	0d1b      	lsrs	r3, r3, #20
   bc71a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bc71e:	fa02 f303 	lsl.w	r3, r2, r3
   bc722:	4299      	cmp	r1, r3
   bc724:	d117      	bne.n	bc756 <_strtod_l+0x8f6>
   bc726:	4b29      	ldr	r3, [pc, #164]	; (bc7cc <_strtod_l+0x96c>)
   bc728:	429f      	cmp	r7, r3
   bc72a:	d102      	bne.n	bc732 <_strtod_l+0x8d2>
   bc72c:	3101      	adds	r1, #1
   bc72e:	f43f addf 	beq.w	bc2f0 <_strtod_l+0x490>
   bc732:	4b23      	ldr	r3, [pc, #140]	; (bc7c0 <_strtod_l+0x960>)
   bc734:	403b      	ands	r3, r7
   bc736:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bc73a:	f04f 0a00 	mov.w	sl, #0
   bc73e:	9b04      	ldr	r3, [sp, #16]
   bc740:	2b00      	cmp	r3, #0
   bc742:	d1a4      	bne.n	bc68e <_strtod_l+0x82e>
   bc744:	e5de      	b.n	bc304 <_strtod_l+0x4a4>
   bc746:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bc74a:	e7ea      	b.n	bc722 <_strtod_l+0x8c2>
   bc74c:	4613      	mov	r3, r2
   bc74e:	e7e8      	b.n	bc722 <_strtod_l+0x8c2>
   bc750:	ea53 030a 	orrs.w	r3, r3, sl
   bc754:	d08c      	beq.n	bc670 <_strtod_l+0x810>
   bc756:	9b08      	ldr	r3, [sp, #32]
   bc758:	b1db      	cbz	r3, bc792 <_strtod_l+0x932>
   bc75a:	423b      	tst	r3, r7
   bc75c:	d0ef      	beq.n	bc73e <_strtod_l+0x8de>
   bc75e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc760:	9a04      	ldr	r2, [sp, #16]
   bc762:	4650      	mov	r0, sl
   bc764:	4659      	mov	r1, fp
   bc766:	b1c3      	cbz	r3, bc79a <_strtod_l+0x93a>
   bc768:	f7ff fb5e 	bl	bbe28 <sulp>
   bc76c:	4602      	mov	r2, r0
   bc76e:	460b      	mov	r3, r1
   bc770:	ec51 0b18 	vmov	r0, r1, d8
   bc774:	f7fe fd5c 	bl	bb230 <__adddf3>
   bc778:	4682      	mov	sl, r0
   bc77a:	468b      	mov	fp, r1
   bc77c:	e7df      	b.n	bc73e <_strtod_l+0x8de>
   bc77e:	4013      	ands	r3, r2
   bc780:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bc784:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bc788:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bc78c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bc790:	e7d5      	b.n	bc73e <_strtod_l+0x8de>
   bc792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bc794:	ea13 0f0a 	tst.w	r3, sl
   bc798:	e7e0      	b.n	bc75c <_strtod_l+0x8fc>
   bc79a:	f7ff fb45 	bl	bbe28 <sulp>
   bc79e:	4602      	mov	r2, r0
   bc7a0:	460b      	mov	r3, r1
   bc7a2:	ec51 0b18 	vmov	r0, r1, d8
   bc7a6:	f7fe fd41 	bl	bb22c <__aeabi_dsub>
   bc7aa:	2200      	movs	r2, #0
   bc7ac:	2300      	movs	r3, #0
   bc7ae:	4682      	mov	sl, r0
   bc7b0:	468b      	mov	fp, r1
   bc7b2:	f7ff f95b 	bl	bba6c <__aeabi_dcmpeq>
   bc7b6:	2800      	cmp	r0, #0
   bc7b8:	d0c1      	beq.n	bc73e <_strtod_l+0x8de>
   bc7ba:	e611      	b.n	bc3e0 <_strtod_l+0x580>
   bc7bc:	fffffc02 	.word	0xfffffc02
   bc7c0:	7ff00000 	.word	0x7ff00000
   bc7c4:	39500000 	.word	0x39500000
   bc7c8:	000fffff 	.word	0x000fffff
   bc7cc:	7fefffff 	.word	0x7fefffff
   bc7d0:	000be958 	.word	0x000be958
   bc7d4:	4631      	mov	r1, r6
   bc7d6:	4628      	mov	r0, r5
   bc7d8:	f001 fa12 	bl	bdc00 <__ratio>
   bc7dc:	ec59 8b10 	vmov	r8, r9, d0
   bc7e0:	ee10 0a10 	vmov	r0, s0
   bc7e4:	2200      	movs	r2, #0
   bc7e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bc7ea:	4649      	mov	r1, r9
   bc7ec:	f7ff f952 	bl	bba94 <__aeabi_dcmple>
   bc7f0:	2800      	cmp	r0, #0
   bc7f2:	d07a      	beq.n	bc8ea <_strtod_l+0xa8a>
   bc7f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc7f6:	2b00      	cmp	r3, #0
   bc7f8:	d04a      	beq.n	bc890 <_strtod_l+0xa30>
   bc7fa:	4b95      	ldr	r3, [pc, #596]	; (bca50 <_strtod_l+0xbf0>)
   bc7fc:	2200      	movs	r2, #0
   bc7fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc802:	f8df 924c 	ldr.w	r9, [pc, #588]	; bca50 <_strtod_l+0xbf0>
   bc806:	f04f 0800 	mov.w	r8, #0
   bc80a:	4b92      	ldr	r3, [pc, #584]	; (bca54 <_strtod_l+0xbf4>)
   bc80c:	403b      	ands	r3, r7
   bc80e:	930d      	str	r3, [sp, #52]	; 0x34
   bc810:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc812:	4b91      	ldr	r3, [pc, #580]	; (bca58 <_strtod_l+0xbf8>)
   bc814:	429a      	cmp	r2, r3
   bc816:	f040 80b0 	bne.w	bc97a <_strtod_l+0xb1a>
   bc81a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc81e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bc822:	ec4b ab10 	vmov	d0, sl, fp
   bc826:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bc82a:	f001 f911 	bl	bda50 <__ulp>
   bc82e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc832:	ec53 2b10 	vmov	r2, r3, d0
   bc836:	f7fe feb1 	bl	bb59c <__aeabi_dmul>
   bc83a:	4652      	mov	r2, sl
   bc83c:	465b      	mov	r3, fp
   bc83e:	f7fe fcf7 	bl	bb230 <__adddf3>
   bc842:	460b      	mov	r3, r1
   bc844:	4983      	ldr	r1, [pc, #524]	; (bca54 <_strtod_l+0xbf4>)
   bc846:	4a85      	ldr	r2, [pc, #532]	; (bca5c <_strtod_l+0xbfc>)
   bc848:	4019      	ands	r1, r3
   bc84a:	4291      	cmp	r1, r2
   bc84c:	4682      	mov	sl, r0
   bc84e:	d960      	bls.n	bc912 <_strtod_l+0xab2>
   bc850:	ee18 3a90 	vmov	r3, s17
   bc854:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bc858:	4293      	cmp	r3, r2
   bc85a:	d104      	bne.n	bc866 <_strtod_l+0xa06>
   bc85c:	ee18 3a10 	vmov	r3, s16
   bc860:	3301      	adds	r3, #1
   bc862:	f43f ad45 	beq.w	bc2f0 <_strtod_l+0x490>
   bc866:	f8df b200 	ldr.w	fp, [pc, #512]	; bca68 <_strtod_l+0xc08>
   bc86a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bc86e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc870:	4620      	mov	r0, r4
   bc872:	f000 fdbb 	bl	bd3ec <_Bfree>
   bc876:	9905      	ldr	r1, [sp, #20]
   bc878:	4620      	mov	r0, r4
   bc87a:	f000 fdb7 	bl	bd3ec <_Bfree>
   bc87e:	4631      	mov	r1, r6
   bc880:	4620      	mov	r0, r4
   bc882:	f000 fdb3 	bl	bd3ec <_Bfree>
   bc886:	4629      	mov	r1, r5
   bc888:	4620      	mov	r0, r4
   bc88a:	f000 fdaf 	bl	bd3ec <_Bfree>
   bc88e:	e61a      	b.n	bc4c6 <_strtod_l+0x666>
   bc890:	f1ba 0f00 	cmp.w	sl, #0
   bc894:	d11b      	bne.n	bc8ce <_strtod_l+0xa6e>
   bc896:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc89a:	b9f3      	cbnz	r3, bc8da <_strtod_l+0xa7a>
   bc89c:	4b6c      	ldr	r3, [pc, #432]	; (bca50 <_strtod_l+0xbf0>)
   bc89e:	2200      	movs	r2, #0
   bc8a0:	4640      	mov	r0, r8
   bc8a2:	4649      	mov	r1, r9
   bc8a4:	f7ff f8ec 	bl	bba80 <__aeabi_dcmplt>
   bc8a8:	b9d0      	cbnz	r0, bc8e0 <_strtod_l+0xa80>
   bc8aa:	4640      	mov	r0, r8
   bc8ac:	4649      	mov	r1, r9
   bc8ae:	4b6c      	ldr	r3, [pc, #432]	; (bca60 <_strtod_l+0xc00>)
   bc8b0:	2200      	movs	r2, #0
   bc8b2:	f7fe fe73 	bl	bb59c <__aeabi_dmul>
   bc8b6:	4680      	mov	r8, r0
   bc8b8:	4689      	mov	r9, r1
   bc8ba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bc8be:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bc8c2:	9315      	str	r3, [sp, #84]	; 0x54
   bc8c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bc8c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc8cc:	e79d      	b.n	bc80a <_strtod_l+0x9aa>
   bc8ce:	f1ba 0f01 	cmp.w	sl, #1
   bc8d2:	d102      	bne.n	bc8da <_strtod_l+0xa7a>
   bc8d4:	2f00      	cmp	r7, #0
   bc8d6:	f43f ad83 	beq.w	bc3e0 <_strtod_l+0x580>
   bc8da:	4b62      	ldr	r3, [pc, #392]	; (bca64 <_strtod_l+0xc04>)
   bc8dc:	2200      	movs	r2, #0
   bc8de:	e78e      	b.n	bc7fe <_strtod_l+0x99e>
   bc8e0:	f8df 917c 	ldr.w	r9, [pc, #380]	; bca60 <_strtod_l+0xc00>
   bc8e4:	f04f 0800 	mov.w	r8, #0
   bc8e8:	e7e7      	b.n	bc8ba <_strtod_l+0xa5a>
   bc8ea:	4b5d      	ldr	r3, [pc, #372]	; (bca60 <_strtod_l+0xc00>)
   bc8ec:	4640      	mov	r0, r8
   bc8ee:	4649      	mov	r1, r9
   bc8f0:	2200      	movs	r2, #0
   bc8f2:	f7fe fe53 	bl	bb59c <__aeabi_dmul>
   bc8f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc8f8:	4680      	mov	r8, r0
   bc8fa:	4689      	mov	r9, r1
   bc8fc:	b933      	cbnz	r3, bc90c <_strtod_l+0xaac>
   bc8fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc902:	900e      	str	r0, [sp, #56]	; 0x38
   bc904:	930f      	str	r3, [sp, #60]	; 0x3c
   bc906:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bc90a:	e7dd      	b.n	bc8c8 <_strtod_l+0xa68>
   bc90c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bc910:	e7f9      	b.n	bc906 <_strtod_l+0xaa6>
   bc912:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bc916:	9b04      	ldr	r3, [sp, #16]
   bc918:	2b00      	cmp	r3, #0
   bc91a:	d1a8      	bne.n	bc86e <_strtod_l+0xa0e>
   bc91c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bc920:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc922:	0d1b      	lsrs	r3, r3, #20
   bc924:	051b      	lsls	r3, r3, #20
   bc926:	429a      	cmp	r2, r3
   bc928:	d1a1      	bne.n	bc86e <_strtod_l+0xa0e>
   bc92a:	4640      	mov	r0, r8
   bc92c:	4649      	mov	r1, r9
   bc92e:	f001 fa05 	bl	bdd3c <__aeabi_d2lz>
   bc932:	f7fe fe05 	bl	bb540 <__aeabi_l2d>
   bc936:	4602      	mov	r2, r0
   bc938:	460b      	mov	r3, r1
   bc93a:	4640      	mov	r0, r8
   bc93c:	4649      	mov	r1, r9
   bc93e:	f7fe fc75 	bl	bb22c <__aeabi_dsub>
   bc942:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bc944:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc948:	ea43 030a 	orr.w	r3, r3, sl
   bc94c:	4313      	orrs	r3, r2
   bc94e:	4680      	mov	r8, r0
   bc950:	4689      	mov	r9, r1
   bc952:	d055      	beq.n	bca00 <_strtod_l+0xba0>
   bc954:	a336      	add	r3, pc, #216	; (adr r3, bca30 <_strtod_l+0xbd0>)
   bc956:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc95a:	f7ff f891 	bl	bba80 <__aeabi_dcmplt>
   bc95e:	2800      	cmp	r0, #0
   bc960:	f47f acd0 	bne.w	bc304 <_strtod_l+0x4a4>
   bc964:	a334      	add	r3, pc, #208	; (adr r3, bca38 <_strtod_l+0xbd8>)
   bc966:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc96a:	4640      	mov	r0, r8
   bc96c:	4649      	mov	r1, r9
   bc96e:	f7ff f8a5 	bl	bbabc <__aeabi_dcmpgt>
   bc972:	2800      	cmp	r0, #0
   bc974:	f43f af7b 	beq.w	bc86e <_strtod_l+0xa0e>
   bc978:	e4c4      	b.n	bc304 <_strtod_l+0x4a4>
   bc97a:	9b04      	ldr	r3, [sp, #16]
   bc97c:	b333      	cbz	r3, bc9cc <_strtod_l+0xb6c>
   bc97e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bc980:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bc984:	d822      	bhi.n	bc9cc <_strtod_l+0xb6c>
   bc986:	a32e      	add	r3, pc, #184	; (adr r3, bca40 <_strtod_l+0xbe0>)
   bc988:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc98c:	4640      	mov	r0, r8
   bc98e:	4649      	mov	r1, r9
   bc990:	f7ff f880 	bl	bba94 <__aeabi_dcmple>
   bc994:	b1a0      	cbz	r0, bc9c0 <_strtod_l+0xb60>
   bc996:	4649      	mov	r1, r9
   bc998:	4640      	mov	r0, r8
   bc99a:	f7ff f8c1 	bl	bbb20 <__aeabi_d2uiz>
   bc99e:	2801      	cmp	r0, #1
   bc9a0:	bf38      	it	cc
   bc9a2:	2001      	movcc	r0, #1
   bc9a4:	f7fe fd80 	bl	bb4a8 <__aeabi_ui2d>
   bc9a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc9aa:	4680      	mov	r8, r0
   bc9ac:	4689      	mov	r9, r1
   bc9ae:	bb23      	cbnz	r3, bc9fa <_strtod_l+0xb9a>
   bc9b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc9b4:	9010      	str	r0, [sp, #64]	; 0x40
   bc9b6:	9311      	str	r3, [sp, #68]	; 0x44
   bc9b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bc9bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc9c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bc9c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc9c4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bc9c8:	1a9b      	subs	r3, r3, r2
   bc9ca:	9309      	str	r3, [sp, #36]	; 0x24
   bc9cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc9d0:	eeb0 0a48 	vmov.f32	s0, s16
   bc9d4:	eef0 0a68 	vmov.f32	s1, s17
   bc9d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bc9dc:	f001 f838 	bl	bda50 <__ulp>
   bc9e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc9e4:	ec53 2b10 	vmov	r2, r3, d0
   bc9e8:	f7fe fdd8 	bl	bb59c <__aeabi_dmul>
   bc9ec:	ec53 2b18 	vmov	r2, r3, d8
   bc9f0:	f7fe fc1e 	bl	bb230 <__adddf3>
   bc9f4:	4682      	mov	sl, r0
   bc9f6:	468b      	mov	fp, r1
   bc9f8:	e78d      	b.n	bc916 <_strtod_l+0xab6>
   bc9fa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bc9fe:	e7db      	b.n	bc9b8 <_strtod_l+0xb58>
   bca00:	a311      	add	r3, pc, #68	; (adr r3, bca48 <_strtod_l+0xbe8>)
   bca02:	e9d3 2300 	ldrd	r2, r3, [r3]
   bca06:	f7ff f83b 	bl	bba80 <__aeabi_dcmplt>
   bca0a:	e7b2      	b.n	bc972 <_strtod_l+0xb12>
   bca0c:	2300      	movs	r3, #0
   bca0e:	930a      	str	r3, [sp, #40]	; 0x28
   bca10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bca12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bca14:	6013      	str	r3, [r2, #0]
   bca16:	f7ff ba6b 	b.w	bbef0 <_strtod_l+0x90>
   bca1a:	2a65      	cmp	r2, #101	; 0x65
   bca1c:	f43f ab5f 	beq.w	bc0de <_strtod_l+0x27e>
   bca20:	2a45      	cmp	r2, #69	; 0x45
   bca22:	f43f ab5c 	beq.w	bc0de <_strtod_l+0x27e>
   bca26:	2301      	movs	r3, #1
   bca28:	f7ff bb94 	b.w	bc154 <_strtod_l+0x2f4>
   bca2c:	f3af 8000 	nop.w
   bca30:	94a03595 	.word	0x94a03595
   bca34:	3fdfffff 	.word	0x3fdfffff
   bca38:	35afe535 	.word	0x35afe535
   bca3c:	3fe00000 	.word	0x3fe00000
   bca40:	ffc00000 	.word	0xffc00000
   bca44:	41dfffff 	.word	0x41dfffff
   bca48:	94a03595 	.word	0x94a03595
   bca4c:	3fcfffff 	.word	0x3fcfffff
   bca50:	3ff00000 	.word	0x3ff00000
   bca54:	7ff00000 	.word	0x7ff00000
   bca58:	7fe00000 	.word	0x7fe00000
   bca5c:	7c9fffff 	.word	0x7c9fffff
   bca60:	3fe00000 	.word	0x3fe00000
   bca64:	bff00000 	.word	0xbff00000
   bca68:	7fefffff 	.word	0x7fefffff

000bca6c <strtod>:
   bca6c:	460a      	mov	r2, r1
   bca6e:	4601      	mov	r1, r0
   bca70:	4802      	ldr	r0, [pc, #8]	; (bca7c <strtod+0x10>)
   bca72:	4b03      	ldr	r3, [pc, #12]	; (bca80 <strtod+0x14>)
   bca74:	6800      	ldr	r0, [r0, #0]
   bca76:	f7ff b9f3 	b.w	bbe60 <_strtod_l>
   bca7a:	bf00      	nop
   bca7c:	2003db1c 	.word	0x2003db1c
   bca80:	2003db88 	.word	0x2003db88

000bca84 <_strtol_l.constprop.0>:
   bca84:	2b01      	cmp	r3, #1
   bca86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bca8a:	d001      	beq.n	bca90 <_strtol_l.constprop.0+0xc>
   bca8c:	2b24      	cmp	r3, #36	; 0x24
   bca8e:	d906      	bls.n	bca9e <_strtol_l.constprop.0+0x1a>
   bca90:	f7fa fcf6 	bl	b7480 <__errno>
   bca94:	2316      	movs	r3, #22
   bca96:	6003      	str	r3, [r0, #0]
   bca98:	2000      	movs	r0, #0
   bca9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bca9e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bcb84 <_strtol_l.constprop.0+0x100>
   bcaa2:	460d      	mov	r5, r1
   bcaa4:	462e      	mov	r6, r5
   bcaa6:	f815 4b01 	ldrb.w	r4, [r5], #1
   bcaaa:	f814 700c 	ldrb.w	r7, [r4, ip]
   bcaae:	f017 0708 	ands.w	r7, r7, #8
   bcab2:	d1f7      	bne.n	bcaa4 <_strtol_l.constprop.0+0x20>
   bcab4:	2c2d      	cmp	r4, #45	; 0x2d
   bcab6:	d132      	bne.n	bcb1e <_strtol_l.constprop.0+0x9a>
   bcab8:	782c      	ldrb	r4, [r5, #0]
   bcaba:	2701      	movs	r7, #1
   bcabc:	1cb5      	adds	r5, r6, #2
   bcabe:	2b00      	cmp	r3, #0
   bcac0:	d05b      	beq.n	bcb7a <_strtol_l.constprop.0+0xf6>
   bcac2:	2b10      	cmp	r3, #16
   bcac4:	d109      	bne.n	bcada <_strtol_l.constprop.0+0x56>
   bcac6:	2c30      	cmp	r4, #48	; 0x30
   bcac8:	d107      	bne.n	bcada <_strtol_l.constprop.0+0x56>
   bcaca:	782c      	ldrb	r4, [r5, #0]
   bcacc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bcad0:	2c58      	cmp	r4, #88	; 0x58
   bcad2:	d14d      	bne.n	bcb70 <_strtol_l.constprop.0+0xec>
   bcad4:	786c      	ldrb	r4, [r5, #1]
   bcad6:	2310      	movs	r3, #16
   bcad8:	3502      	adds	r5, #2
   bcada:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bcade:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bcae2:	f04f 0c00 	mov.w	ip, #0
   bcae6:	fbb8 f9f3 	udiv	r9, r8, r3
   bcaea:	4666      	mov	r6, ip
   bcaec:	fb03 8a19 	mls	sl, r3, r9, r8
   bcaf0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bcaf4:	f1be 0f09 	cmp.w	lr, #9
   bcaf8:	d816      	bhi.n	bcb28 <_strtol_l.constprop.0+0xa4>
   bcafa:	4674      	mov	r4, lr
   bcafc:	42a3      	cmp	r3, r4
   bcafe:	dd24      	ble.n	bcb4a <_strtol_l.constprop.0+0xc6>
   bcb00:	f1bc 0f00 	cmp.w	ip, #0
   bcb04:	db1e      	blt.n	bcb44 <_strtol_l.constprop.0+0xc0>
   bcb06:	45b1      	cmp	r9, r6
   bcb08:	d31c      	bcc.n	bcb44 <_strtol_l.constprop.0+0xc0>
   bcb0a:	d101      	bne.n	bcb10 <_strtol_l.constprop.0+0x8c>
   bcb0c:	45a2      	cmp	sl, r4
   bcb0e:	db19      	blt.n	bcb44 <_strtol_l.constprop.0+0xc0>
   bcb10:	fb06 4603 	mla	r6, r6, r3, r4
   bcb14:	f04f 0c01 	mov.w	ip, #1
   bcb18:	f815 4b01 	ldrb.w	r4, [r5], #1
   bcb1c:	e7e8      	b.n	bcaf0 <_strtol_l.constprop.0+0x6c>
   bcb1e:	2c2b      	cmp	r4, #43	; 0x2b
   bcb20:	bf04      	itt	eq
   bcb22:	782c      	ldrbeq	r4, [r5, #0]
   bcb24:	1cb5      	addeq	r5, r6, #2
   bcb26:	e7ca      	b.n	bcabe <_strtol_l.constprop.0+0x3a>
   bcb28:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bcb2c:	f1be 0f19 	cmp.w	lr, #25
   bcb30:	d801      	bhi.n	bcb36 <_strtol_l.constprop.0+0xb2>
   bcb32:	3c37      	subs	r4, #55	; 0x37
   bcb34:	e7e2      	b.n	bcafc <_strtol_l.constprop.0+0x78>
   bcb36:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bcb3a:	f1be 0f19 	cmp.w	lr, #25
   bcb3e:	d804      	bhi.n	bcb4a <_strtol_l.constprop.0+0xc6>
   bcb40:	3c57      	subs	r4, #87	; 0x57
   bcb42:	e7db      	b.n	bcafc <_strtol_l.constprop.0+0x78>
   bcb44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bcb48:	e7e6      	b.n	bcb18 <_strtol_l.constprop.0+0x94>
   bcb4a:	f1bc 0f00 	cmp.w	ip, #0
   bcb4e:	da05      	bge.n	bcb5c <_strtol_l.constprop.0+0xd8>
   bcb50:	2322      	movs	r3, #34	; 0x22
   bcb52:	6003      	str	r3, [r0, #0]
   bcb54:	4646      	mov	r6, r8
   bcb56:	b942      	cbnz	r2, bcb6a <_strtol_l.constprop.0+0xe6>
   bcb58:	4630      	mov	r0, r6
   bcb5a:	e79e      	b.n	bca9a <_strtol_l.constprop.0+0x16>
   bcb5c:	b107      	cbz	r7, bcb60 <_strtol_l.constprop.0+0xdc>
   bcb5e:	4276      	negs	r6, r6
   bcb60:	2a00      	cmp	r2, #0
   bcb62:	d0f9      	beq.n	bcb58 <_strtol_l.constprop.0+0xd4>
   bcb64:	f1bc 0f00 	cmp.w	ip, #0
   bcb68:	d000      	beq.n	bcb6c <_strtol_l.constprop.0+0xe8>
   bcb6a:	1e69      	subs	r1, r5, #1
   bcb6c:	6011      	str	r1, [r2, #0]
   bcb6e:	e7f3      	b.n	bcb58 <_strtol_l.constprop.0+0xd4>
   bcb70:	2430      	movs	r4, #48	; 0x30
   bcb72:	2b00      	cmp	r3, #0
   bcb74:	d1b1      	bne.n	bcada <_strtol_l.constprop.0+0x56>
   bcb76:	2308      	movs	r3, #8
   bcb78:	e7af      	b.n	bcada <_strtol_l.constprop.0+0x56>
   bcb7a:	2c30      	cmp	r4, #48	; 0x30
   bcb7c:	d0a5      	beq.n	bcaca <_strtol_l.constprop.0+0x46>
   bcb7e:	230a      	movs	r3, #10
   bcb80:	e7ab      	b.n	bcada <_strtol_l.constprop.0+0x56>
   bcb82:	bf00      	nop
   bcb84:	000be981 	.word	0x000be981

000bcb88 <strtol>:
   bcb88:	4613      	mov	r3, r2
   bcb8a:	460a      	mov	r2, r1
   bcb8c:	4601      	mov	r1, r0
   bcb8e:	4802      	ldr	r0, [pc, #8]	; (bcb98 <strtol+0x10>)
   bcb90:	6800      	ldr	r0, [r0, #0]
   bcb92:	f7ff bf77 	b.w	bca84 <_strtol_l.constprop.0>
   bcb96:	bf00      	nop
   bcb98:	2003db1c 	.word	0x2003db1c

000bcb9c <__register_exitproc>:
   bcb9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcba0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bcc5c <__register_exitproc+0xc0>
   bcba4:	4606      	mov	r6, r0
   bcba6:	f8d8 0000 	ldr.w	r0, [r8]
   bcbaa:	461f      	mov	r7, r3
   bcbac:	460d      	mov	r5, r1
   bcbae:	4691      	mov	r9, r2
   bcbb0:	f000 fbc6 	bl	bd340 <__retarget_lock_acquire_recursive>
   bcbb4:	4b25      	ldr	r3, [pc, #148]	; (bcc4c <__register_exitproc+0xb0>)
   bcbb6:	681c      	ldr	r4, [r3, #0]
   bcbb8:	b934      	cbnz	r4, bcbc8 <__register_exitproc+0x2c>
   bcbba:	4c25      	ldr	r4, [pc, #148]	; (bcc50 <__register_exitproc+0xb4>)
   bcbbc:	601c      	str	r4, [r3, #0]
   bcbbe:	4b25      	ldr	r3, [pc, #148]	; (bcc54 <__register_exitproc+0xb8>)
   bcbc0:	b113      	cbz	r3, bcbc8 <__register_exitproc+0x2c>
   bcbc2:	681b      	ldr	r3, [r3, #0]
   bcbc4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bcbc8:	6863      	ldr	r3, [r4, #4]
   bcbca:	2b1f      	cmp	r3, #31
   bcbcc:	dd07      	ble.n	bcbde <__register_exitproc+0x42>
   bcbce:	f8d8 0000 	ldr.w	r0, [r8]
   bcbd2:	f000 fbb7 	bl	bd344 <__retarget_lock_release_recursive>
   bcbd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bcbda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bcbde:	b34e      	cbz	r6, bcc34 <__register_exitproc+0x98>
   bcbe0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bcbe4:	b988      	cbnz	r0, bcc0a <__register_exitproc+0x6e>
   bcbe6:	4b1c      	ldr	r3, [pc, #112]	; (bcc58 <__register_exitproc+0xbc>)
   bcbe8:	b923      	cbnz	r3, bcbf4 <__register_exitproc+0x58>
   bcbea:	f8d8 0000 	ldr.w	r0, [r8]
   bcbee:	f000 fba8 	bl	bd342 <__retarget_lock_release>
   bcbf2:	e7f0      	b.n	bcbd6 <__register_exitproc+0x3a>
   bcbf4:	f44f 7084 	mov.w	r0, #264	; 0x108
   bcbf8:	f7fa fbfa 	bl	b73f0 <malloc>
   bcbfc:	2800      	cmp	r0, #0
   bcbfe:	d0f4      	beq.n	bcbea <__register_exitproc+0x4e>
   bcc00:	2300      	movs	r3, #0
   bcc02:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bcc06:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bcc0a:	6863      	ldr	r3, [r4, #4]
   bcc0c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bcc10:	2201      	movs	r2, #1
   bcc12:	409a      	lsls	r2, r3
   bcc14:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bcc18:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bcc1c:	4313      	orrs	r3, r2
   bcc1e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bcc22:	2e02      	cmp	r6, #2
   bcc24:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bcc28:	bf02      	ittt	eq
   bcc2a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bcc2e:	4313      	orreq	r3, r2
   bcc30:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bcc34:	6863      	ldr	r3, [r4, #4]
   bcc36:	f8d8 0000 	ldr.w	r0, [r8]
   bcc3a:	1c5a      	adds	r2, r3, #1
   bcc3c:	3302      	adds	r3, #2
   bcc3e:	6062      	str	r2, [r4, #4]
   bcc40:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bcc44:	f000 fb7e 	bl	bd344 <__retarget_lock_release_recursive>
   bcc48:	2000      	movs	r0, #0
   bcc4a:	e7c6      	b.n	bcbda <__register_exitproc+0x3e>
   bcc4c:	2003e7ec 	.word	0x2003e7ec
   bcc50:	2003e760 	.word	0x2003e760
   bcc54:	00000000 	.word	0x00000000
   bcc58:	000b73f1 	.word	0x000b73f1
   bcc5c:	2003db80 	.word	0x2003db80

000bcc60 <rshift>:
   bcc60:	6903      	ldr	r3, [r0, #16]
   bcc62:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bcc66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bcc6a:	ea4f 1261 	mov.w	r2, r1, asr #5
   bcc6e:	f100 0414 	add.w	r4, r0, #20
   bcc72:	dd45      	ble.n	bcd00 <rshift+0xa0>
   bcc74:	f011 011f 	ands.w	r1, r1, #31
   bcc78:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bcc7c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bcc80:	d10c      	bne.n	bcc9c <rshift+0x3c>
   bcc82:	f100 0710 	add.w	r7, r0, #16
   bcc86:	4629      	mov	r1, r5
   bcc88:	42b1      	cmp	r1, r6
   bcc8a:	d334      	bcc.n	bccf6 <rshift+0x96>
   bcc8c:	1a9b      	subs	r3, r3, r2
   bcc8e:	009b      	lsls	r3, r3, #2
   bcc90:	1eea      	subs	r2, r5, #3
   bcc92:	4296      	cmp	r6, r2
   bcc94:	bf38      	it	cc
   bcc96:	2300      	movcc	r3, #0
   bcc98:	4423      	add	r3, r4
   bcc9a:	e015      	b.n	bccc8 <rshift+0x68>
   bcc9c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bcca0:	f1c1 0820 	rsb	r8, r1, #32
   bcca4:	40cf      	lsrs	r7, r1
   bcca6:	f105 0e04 	add.w	lr, r5, #4
   bccaa:	46a1      	mov	r9, r4
   bccac:	4576      	cmp	r6, lr
   bccae:	46f4      	mov	ip, lr
   bccb0:	d815      	bhi.n	bccde <rshift+0x7e>
   bccb2:	1a9a      	subs	r2, r3, r2
   bccb4:	0092      	lsls	r2, r2, #2
   bccb6:	3a04      	subs	r2, #4
   bccb8:	3501      	adds	r5, #1
   bccba:	42ae      	cmp	r6, r5
   bccbc:	bf38      	it	cc
   bccbe:	2200      	movcc	r2, #0
   bccc0:	18a3      	adds	r3, r4, r2
   bccc2:	50a7      	str	r7, [r4, r2]
   bccc4:	b107      	cbz	r7, bccc8 <rshift+0x68>
   bccc6:	3304      	adds	r3, #4
   bccc8:	1b1a      	subs	r2, r3, r4
   bccca:	42a3      	cmp	r3, r4
   bcccc:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bccd0:	bf08      	it	eq
   bccd2:	2300      	moveq	r3, #0
   bccd4:	6102      	str	r2, [r0, #16]
   bccd6:	bf08      	it	eq
   bccd8:	6143      	streq	r3, [r0, #20]
   bccda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bccde:	f8dc c000 	ldr.w	ip, [ip]
   bcce2:	fa0c fc08 	lsl.w	ip, ip, r8
   bcce6:	ea4c 0707 	orr.w	r7, ip, r7
   bccea:	f849 7b04 	str.w	r7, [r9], #4
   bccee:	f85e 7b04 	ldr.w	r7, [lr], #4
   bccf2:	40cf      	lsrs	r7, r1
   bccf4:	e7da      	b.n	bccac <rshift+0x4c>
   bccf6:	f851 cb04 	ldr.w	ip, [r1], #4
   bccfa:	f847 cf04 	str.w	ip, [r7, #4]!
   bccfe:	e7c3      	b.n	bcc88 <rshift+0x28>
   bcd00:	4623      	mov	r3, r4
   bcd02:	e7e1      	b.n	bccc8 <rshift+0x68>

000bcd04 <__hexdig_fun>:
   bcd04:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bcd08:	2b09      	cmp	r3, #9
   bcd0a:	d802      	bhi.n	bcd12 <__hexdig_fun+0xe>
   bcd0c:	3820      	subs	r0, #32
   bcd0e:	b2c0      	uxtb	r0, r0
   bcd10:	4770      	bx	lr
   bcd12:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bcd16:	2b05      	cmp	r3, #5
   bcd18:	d801      	bhi.n	bcd1e <__hexdig_fun+0x1a>
   bcd1a:	3847      	subs	r0, #71	; 0x47
   bcd1c:	e7f7      	b.n	bcd0e <__hexdig_fun+0xa>
   bcd1e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bcd22:	2b05      	cmp	r3, #5
   bcd24:	d801      	bhi.n	bcd2a <__hexdig_fun+0x26>
   bcd26:	3827      	subs	r0, #39	; 0x27
   bcd28:	e7f1      	b.n	bcd0e <__hexdig_fun+0xa>
   bcd2a:	2000      	movs	r0, #0
   bcd2c:	4770      	bx	lr
	...

000bcd30 <__gethex>:
   bcd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcd34:	ed2d 8b02 	vpush	{d8}
   bcd38:	b089      	sub	sp, #36	; 0x24
   bcd3a:	ee08 0a10 	vmov	s16, r0
   bcd3e:	9304      	str	r3, [sp, #16]
   bcd40:	4bb4      	ldr	r3, [pc, #720]	; (bd014 <__gethex+0x2e4>)
   bcd42:	681b      	ldr	r3, [r3, #0]
   bcd44:	9301      	str	r3, [sp, #4]
   bcd46:	4618      	mov	r0, r3
   bcd48:	468b      	mov	fp, r1
   bcd4a:	4690      	mov	r8, r2
   bcd4c:	f7ff f831 	bl	bbdb2 <strlen>
   bcd50:	9b01      	ldr	r3, [sp, #4]
   bcd52:	f8db 2000 	ldr.w	r2, [fp]
   bcd56:	4403      	add	r3, r0
   bcd58:	4682      	mov	sl, r0
   bcd5a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bcd5e:	9305      	str	r3, [sp, #20]
   bcd60:	1c93      	adds	r3, r2, #2
   bcd62:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bcd66:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bcd6a:	32fe      	adds	r2, #254	; 0xfe
   bcd6c:	18d1      	adds	r1, r2, r3
   bcd6e:	461f      	mov	r7, r3
   bcd70:	f813 0b01 	ldrb.w	r0, [r3], #1
   bcd74:	9100      	str	r1, [sp, #0]
   bcd76:	2830      	cmp	r0, #48	; 0x30
   bcd78:	d0f8      	beq.n	bcd6c <__gethex+0x3c>
   bcd7a:	f7ff ffc3 	bl	bcd04 <__hexdig_fun>
   bcd7e:	4604      	mov	r4, r0
   bcd80:	2800      	cmp	r0, #0
   bcd82:	d13a      	bne.n	bcdfa <__gethex+0xca>
   bcd84:	9901      	ldr	r1, [sp, #4]
   bcd86:	4652      	mov	r2, sl
   bcd88:	4638      	mov	r0, r7
   bcd8a:	f7ff f81a 	bl	bbdc2 <strncmp>
   bcd8e:	4605      	mov	r5, r0
   bcd90:	2800      	cmp	r0, #0
   bcd92:	d168      	bne.n	bce66 <__gethex+0x136>
   bcd94:	f817 000a 	ldrb.w	r0, [r7, sl]
   bcd98:	eb07 060a 	add.w	r6, r7, sl
   bcd9c:	f7ff ffb2 	bl	bcd04 <__hexdig_fun>
   bcda0:	2800      	cmp	r0, #0
   bcda2:	d062      	beq.n	bce6a <__gethex+0x13a>
   bcda4:	4633      	mov	r3, r6
   bcda6:	7818      	ldrb	r0, [r3, #0]
   bcda8:	2830      	cmp	r0, #48	; 0x30
   bcdaa:	461f      	mov	r7, r3
   bcdac:	f103 0301 	add.w	r3, r3, #1
   bcdb0:	d0f9      	beq.n	bcda6 <__gethex+0x76>
   bcdb2:	f7ff ffa7 	bl	bcd04 <__hexdig_fun>
   bcdb6:	2301      	movs	r3, #1
   bcdb8:	fab0 f480 	clz	r4, r0
   bcdbc:	0964      	lsrs	r4, r4, #5
   bcdbe:	4635      	mov	r5, r6
   bcdc0:	9300      	str	r3, [sp, #0]
   bcdc2:	463a      	mov	r2, r7
   bcdc4:	4616      	mov	r6, r2
   bcdc6:	3201      	adds	r2, #1
   bcdc8:	7830      	ldrb	r0, [r6, #0]
   bcdca:	f7ff ff9b 	bl	bcd04 <__hexdig_fun>
   bcdce:	2800      	cmp	r0, #0
   bcdd0:	d1f8      	bne.n	bcdc4 <__gethex+0x94>
   bcdd2:	9901      	ldr	r1, [sp, #4]
   bcdd4:	4652      	mov	r2, sl
   bcdd6:	4630      	mov	r0, r6
   bcdd8:	f7fe fff3 	bl	bbdc2 <strncmp>
   bcddc:	b980      	cbnz	r0, bce00 <__gethex+0xd0>
   bcdde:	b94d      	cbnz	r5, bcdf4 <__gethex+0xc4>
   bcde0:	eb06 050a 	add.w	r5, r6, sl
   bcde4:	462a      	mov	r2, r5
   bcde6:	4616      	mov	r6, r2
   bcde8:	3201      	adds	r2, #1
   bcdea:	7830      	ldrb	r0, [r6, #0]
   bcdec:	f7ff ff8a 	bl	bcd04 <__hexdig_fun>
   bcdf0:	2800      	cmp	r0, #0
   bcdf2:	d1f8      	bne.n	bcde6 <__gethex+0xb6>
   bcdf4:	1bad      	subs	r5, r5, r6
   bcdf6:	00ad      	lsls	r5, r5, #2
   bcdf8:	e004      	b.n	bce04 <__gethex+0xd4>
   bcdfa:	2400      	movs	r4, #0
   bcdfc:	4625      	mov	r5, r4
   bcdfe:	e7e0      	b.n	bcdc2 <__gethex+0x92>
   bce00:	2d00      	cmp	r5, #0
   bce02:	d1f7      	bne.n	bcdf4 <__gethex+0xc4>
   bce04:	7833      	ldrb	r3, [r6, #0]
   bce06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bce0a:	2b50      	cmp	r3, #80	; 0x50
   bce0c:	d13b      	bne.n	bce86 <__gethex+0x156>
   bce0e:	7873      	ldrb	r3, [r6, #1]
   bce10:	2b2b      	cmp	r3, #43	; 0x2b
   bce12:	d02c      	beq.n	bce6e <__gethex+0x13e>
   bce14:	2b2d      	cmp	r3, #45	; 0x2d
   bce16:	d02e      	beq.n	bce76 <__gethex+0x146>
   bce18:	1c71      	adds	r1, r6, #1
   bce1a:	f04f 0900 	mov.w	r9, #0
   bce1e:	7808      	ldrb	r0, [r1, #0]
   bce20:	f7ff ff70 	bl	bcd04 <__hexdig_fun>
   bce24:	1e43      	subs	r3, r0, #1
   bce26:	b2db      	uxtb	r3, r3
   bce28:	2b18      	cmp	r3, #24
   bce2a:	d82c      	bhi.n	bce86 <__gethex+0x156>
   bce2c:	f1a0 0210 	sub.w	r2, r0, #16
   bce30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bce34:	f7ff ff66 	bl	bcd04 <__hexdig_fun>
   bce38:	1e43      	subs	r3, r0, #1
   bce3a:	b2db      	uxtb	r3, r3
   bce3c:	2b18      	cmp	r3, #24
   bce3e:	d91d      	bls.n	bce7c <__gethex+0x14c>
   bce40:	f1b9 0f00 	cmp.w	r9, #0
   bce44:	d000      	beq.n	bce48 <__gethex+0x118>
   bce46:	4252      	negs	r2, r2
   bce48:	4415      	add	r5, r2
   bce4a:	f8cb 1000 	str.w	r1, [fp]
   bce4e:	b1e4      	cbz	r4, bce8a <__gethex+0x15a>
   bce50:	9b00      	ldr	r3, [sp, #0]
   bce52:	2b00      	cmp	r3, #0
   bce54:	bf14      	ite	ne
   bce56:	2700      	movne	r7, #0
   bce58:	2706      	moveq	r7, #6
   bce5a:	4638      	mov	r0, r7
   bce5c:	b009      	add	sp, #36	; 0x24
   bce5e:	ecbd 8b02 	vpop	{d8}
   bce62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bce66:	463e      	mov	r6, r7
   bce68:	4625      	mov	r5, r4
   bce6a:	2401      	movs	r4, #1
   bce6c:	e7ca      	b.n	bce04 <__gethex+0xd4>
   bce6e:	f04f 0900 	mov.w	r9, #0
   bce72:	1cb1      	adds	r1, r6, #2
   bce74:	e7d3      	b.n	bce1e <__gethex+0xee>
   bce76:	f04f 0901 	mov.w	r9, #1
   bce7a:	e7fa      	b.n	bce72 <__gethex+0x142>
   bce7c:	230a      	movs	r3, #10
   bce7e:	fb03 0202 	mla	r2, r3, r2, r0
   bce82:	3a10      	subs	r2, #16
   bce84:	e7d4      	b.n	bce30 <__gethex+0x100>
   bce86:	4631      	mov	r1, r6
   bce88:	e7df      	b.n	bce4a <__gethex+0x11a>
   bce8a:	1bf3      	subs	r3, r6, r7
   bce8c:	3b01      	subs	r3, #1
   bce8e:	4621      	mov	r1, r4
   bce90:	2b07      	cmp	r3, #7
   bce92:	dc0b      	bgt.n	bceac <__gethex+0x17c>
   bce94:	ee18 0a10 	vmov	r0, s16
   bce98:	f000 fa68 	bl	bd36c <_Balloc>
   bce9c:	4604      	mov	r4, r0
   bce9e:	b940      	cbnz	r0, bceb2 <__gethex+0x182>
   bcea0:	4b5d      	ldr	r3, [pc, #372]	; (bd018 <__gethex+0x2e8>)
   bcea2:	4602      	mov	r2, r0
   bcea4:	21de      	movs	r1, #222	; 0xde
   bcea6:	485d      	ldr	r0, [pc, #372]	; (bd01c <__gethex+0x2ec>)
   bcea8:	f7fa faf2 	bl	b7490 <__assert_func>
   bceac:	3101      	adds	r1, #1
   bceae:	105b      	asrs	r3, r3, #1
   bceb0:	e7ee      	b.n	bce90 <__gethex+0x160>
   bceb2:	f100 0914 	add.w	r9, r0, #20
   bceb6:	f04f 0b00 	mov.w	fp, #0
   bceba:	f1ca 0301 	rsb	r3, sl, #1
   bcebe:	f8cd 9008 	str.w	r9, [sp, #8]
   bcec2:	f8cd b000 	str.w	fp, [sp]
   bcec6:	9306      	str	r3, [sp, #24]
   bcec8:	42b7      	cmp	r7, r6
   bceca:	d340      	bcc.n	bcf4e <__gethex+0x21e>
   bcecc:	9802      	ldr	r0, [sp, #8]
   bcece:	9b00      	ldr	r3, [sp, #0]
   bced0:	f840 3b04 	str.w	r3, [r0], #4
   bced4:	eba0 0009 	sub.w	r0, r0, r9
   bced8:	1080      	asrs	r0, r0, #2
   bceda:	0146      	lsls	r6, r0, #5
   bcedc:	6120      	str	r0, [r4, #16]
   bcede:	4618      	mov	r0, r3
   bcee0:	f000 fb36 	bl	bd550 <__hi0bits>
   bcee4:	1a30      	subs	r0, r6, r0
   bcee6:	f8d8 6000 	ldr.w	r6, [r8]
   bceea:	42b0      	cmp	r0, r6
   bceec:	dd63      	ble.n	bcfb6 <__gethex+0x286>
   bceee:	1b87      	subs	r7, r0, r6
   bcef0:	4639      	mov	r1, r7
   bcef2:	4620      	mov	r0, r4
   bcef4:	f000 feda 	bl	bdcac <__any_on>
   bcef8:	4682      	mov	sl, r0
   bcefa:	b1a8      	cbz	r0, bcf28 <__gethex+0x1f8>
   bcefc:	1e7b      	subs	r3, r7, #1
   bcefe:	1159      	asrs	r1, r3, #5
   bcf00:	f003 021f 	and.w	r2, r3, #31
   bcf04:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bcf08:	f04f 0a01 	mov.w	sl, #1
   bcf0c:	fa0a f202 	lsl.w	r2, sl, r2
   bcf10:	420a      	tst	r2, r1
   bcf12:	d009      	beq.n	bcf28 <__gethex+0x1f8>
   bcf14:	4553      	cmp	r3, sl
   bcf16:	dd05      	ble.n	bcf24 <__gethex+0x1f4>
   bcf18:	1eb9      	subs	r1, r7, #2
   bcf1a:	4620      	mov	r0, r4
   bcf1c:	f000 fec6 	bl	bdcac <__any_on>
   bcf20:	2800      	cmp	r0, #0
   bcf22:	d145      	bne.n	bcfb0 <__gethex+0x280>
   bcf24:	f04f 0a02 	mov.w	sl, #2
   bcf28:	4639      	mov	r1, r7
   bcf2a:	4620      	mov	r0, r4
   bcf2c:	f7ff fe98 	bl	bcc60 <rshift>
   bcf30:	443d      	add	r5, r7
   bcf32:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bcf36:	42ab      	cmp	r3, r5
   bcf38:	da4c      	bge.n	bcfd4 <__gethex+0x2a4>
   bcf3a:	ee18 0a10 	vmov	r0, s16
   bcf3e:	4621      	mov	r1, r4
   bcf40:	f000 fa54 	bl	bd3ec <_Bfree>
   bcf44:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bcf46:	2300      	movs	r3, #0
   bcf48:	6013      	str	r3, [r2, #0]
   bcf4a:	27a3      	movs	r7, #163	; 0xa3
   bcf4c:	e785      	b.n	bce5a <__gethex+0x12a>
   bcf4e:	1e73      	subs	r3, r6, #1
   bcf50:	9a05      	ldr	r2, [sp, #20]
   bcf52:	9303      	str	r3, [sp, #12]
   bcf54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bcf58:	4293      	cmp	r3, r2
   bcf5a:	d019      	beq.n	bcf90 <__gethex+0x260>
   bcf5c:	f1bb 0f20 	cmp.w	fp, #32
   bcf60:	d107      	bne.n	bcf72 <__gethex+0x242>
   bcf62:	9b02      	ldr	r3, [sp, #8]
   bcf64:	9a00      	ldr	r2, [sp, #0]
   bcf66:	f843 2b04 	str.w	r2, [r3], #4
   bcf6a:	9302      	str	r3, [sp, #8]
   bcf6c:	2300      	movs	r3, #0
   bcf6e:	9300      	str	r3, [sp, #0]
   bcf70:	469b      	mov	fp, r3
   bcf72:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bcf76:	f7ff fec5 	bl	bcd04 <__hexdig_fun>
   bcf7a:	9b00      	ldr	r3, [sp, #0]
   bcf7c:	f000 000f 	and.w	r0, r0, #15
   bcf80:	fa00 f00b 	lsl.w	r0, r0, fp
   bcf84:	4303      	orrs	r3, r0
   bcf86:	9300      	str	r3, [sp, #0]
   bcf88:	f10b 0b04 	add.w	fp, fp, #4
   bcf8c:	9b03      	ldr	r3, [sp, #12]
   bcf8e:	e00d      	b.n	bcfac <__gethex+0x27c>
   bcf90:	9b03      	ldr	r3, [sp, #12]
   bcf92:	9a06      	ldr	r2, [sp, #24]
   bcf94:	4413      	add	r3, r2
   bcf96:	42bb      	cmp	r3, r7
   bcf98:	d3e0      	bcc.n	bcf5c <__gethex+0x22c>
   bcf9a:	4618      	mov	r0, r3
   bcf9c:	9901      	ldr	r1, [sp, #4]
   bcf9e:	9307      	str	r3, [sp, #28]
   bcfa0:	4652      	mov	r2, sl
   bcfa2:	f7fe ff0e 	bl	bbdc2 <strncmp>
   bcfa6:	9b07      	ldr	r3, [sp, #28]
   bcfa8:	2800      	cmp	r0, #0
   bcfaa:	d1d7      	bne.n	bcf5c <__gethex+0x22c>
   bcfac:	461e      	mov	r6, r3
   bcfae:	e78b      	b.n	bcec8 <__gethex+0x198>
   bcfb0:	f04f 0a03 	mov.w	sl, #3
   bcfb4:	e7b8      	b.n	bcf28 <__gethex+0x1f8>
   bcfb6:	da0a      	bge.n	bcfce <__gethex+0x29e>
   bcfb8:	1a37      	subs	r7, r6, r0
   bcfba:	4621      	mov	r1, r4
   bcfbc:	ee18 0a10 	vmov	r0, s16
   bcfc0:	463a      	mov	r2, r7
   bcfc2:	f000 fc2f 	bl	bd824 <__lshift>
   bcfc6:	1bed      	subs	r5, r5, r7
   bcfc8:	4604      	mov	r4, r0
   bcfca:	f100 0914 	add.w	r9, r0, #20
   bcfce:	f04f 0a00 	mov.w	sl, #0
   bcfd2:	e7ae      	b.n	bcf32 <__gethex+0x202>
   bcfd4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bcfd8:	42a8      	cmp	r0, r5
   bcfda:	dd72      	ble.n	bd0c2 <__gethex+0x392>
   bcfdc:	1b45      	subs	r5, r0, r5
   bcfde:	42ae      	cmp	r6, r5
   bcfe0:	dc36      	bgt.n	bd050 <__gethex+0x320>
   bcfe2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bcfe6:	2b02      	cmp	r3, #2
   bcfe8:	d02a      	beq.n	bd040 <__gethex+0x310>
   bcfea:	2b03      	cmp	r3, #3
   bcfec:	d02c      	beq.n	bd048 <__gethex+0x318>
   bcfee:	2b01      	cmp	r3, #1
   bcff0:	d11c      	bne.n	bd02c <__gethex+0x2fc>
   bcff2:	42ae      	cmp	r6, r5
   bcff4:	d11a      	bne.n	bd02c <__gethex+0x2fc>
   bcff6:	2e01      	cmp	r6, #1
   bcff8:	d112      	bne.n	bd020 <__gethex+0x2f0>
   bcffa:	9a04      	ldr	r2, [sp, #16]
   bcffc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bd000:	6013      	str	r3, [r2, #0]
   bd002:	2301      	movs	r3, #1
   bd004:	6123      	str	r3, [r4, #16]
   bd006:	f8c9 3000 	str.w	r3, [r9]
   bd00a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bd00c:	2762      	movs	r7, #98	; 0x62
   bd00e:	601c      	str	r4, [r3, #0]
   bd010:	e723      	b.n	bce5a <__gethex+0x12a>
   bd012:	bf00      	nop
   bd014:	000beaf4 	.word	0x000beaf4
   bd018:	000bea81 	.word	0x000bea81
   bd01c:	000bea92 	.word	0x000bea92
   bd020:	1e71      	subs	r1, r6, #1
   bd022:	4620      	mov	r0, r4
   bd024:	f000 fe42 	bl	bdcac <__any_on>
   bd028:	2800      	cmp	r0, #0
   bd02a:	d1e6      	bne.n	bcffa <__gethex+0x2ca>
   bd02c:	ee18 0a10 	vmov	r0, s16
   bd030:	4621      	mov	r1, r4
   bd032:	f000 f9db 	bl	bd3ec <_Bfree>
   bd036:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bd038:	2300      	movs	r3, #0
   bd03a:	6013      	str	r3, [r2, #0]
   bd03c:	2750      	movs	r7, #80	; 0x50
   bd03e:	e70c      	b.n	bce5a <__gethex+0x12a>
   bd040:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd042:	2b00      	cmp	r3, #0
   bd044:	d1f2      	bne.n	bd02c <__gethex+0x2fc>
   bd046:	e7d8      	b.n	bcffa <__gethex+0x2ca>
   bd048:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd04a:	2b00      	cmp	r3, #0
   bd04c:	d1d5      	bne.n	bcffa <__gethex+0x2ca>
   bd04e:	e7ed      	b.n	bd02c <__gethex+0x2fc>
   bd050:	1e6f      	subs	r7, r5, #1
   bd052:	f1ba 0f00 	cmp.w	sl, #0
   bd056:	d131      	bne.n	bd0bc <__gethex+0x38c>
   bd058:	b127      	cbz	r7, bd064 <__gethex+0x334>
   bd05a:	4639      	mov	r1, r7
   bd05c:	4620      	mov	r0, r4
   bd05e:	f000 fe25 	bl	bdcac <__any_on>
   bd062:	4682      	mov	sl, r0
   bd064:	117b      	asrs	r3, r7, #5
   bd066:	2101      	movs	r1, #1
   bd068:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bd06c:	f007 071f 	and.w	r7, r7, #31
   bd070:	fa01 f707 	lsl.w	r7, r1, r7
   bd074:	421f      	tst	r7, r3
   bd076:	4629      	mov	r1, r5
   bd078:	4620      	mov	r0, r4
   bd07a:	bf18      	it	ne
   bd07c:	f04a 0a02 	orrne.w	sl, sl, #2
   bd080:	1b76      	subs	r6, r6, r5
   bd082:	f7ff fded 	bl	bcc60 <rshift>
   bd086:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bd08a:	2702      	movs	r7, #2
   bd08c:	f1ba 0f00 	cmp.w	sl, #0
   bd090:	d048      	beq.n	bd124 <__gethex+0x3f4>
   bd092:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bd096:	2b02      	cmp	r3, #2
   bd098:	d015      	beq.n	bd0c6 <__gethex+0x396>
   bd09a:	2b03      	cmp	r3, #3
   bd09c:	d017      	beq.n	bd0ce <__gethex+0x39e>
   bd09e:	2b01      	cmp	r3, #1
   bd0a0:	d109      	bne.n	bd0b6 <__gethex+0x386>
   bd0a2:	f01a 0f02 	tst.w	sl, #2
   bd0a6:	d006      	beq.n	bd0b6 <__gethex+0x386>
   bd0a8:	f8d9 0000 	ldr.w	r0, [r9]
   bd0ac:	ea4a 0a00 	orr.w	sl, sl, r0
   bd0b0:	f01a 0f01 	tst.w	sl, #1
   bd0b4:	d10e      	bne.n	bd0d4 <__gethex+0x3a4>
   bd0b6:	f047 0710 	orr.w	r7, r7, #16
   bd0ba:	e033      	b.n	bd124 <__gethex+0x3f4>
   bd0bc:	f04f 0a01 	mov.w	sl, #1
   bd0c0:	e7d0      	b.n	bd064 <__gethex+0x334>
   bd0c2:	2701      	movs	r7, #1
   bd0c4:	e7e2      	b.n	bd08c <__gethex+0x35c>
   bd0c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd0c8:	f1c3 0301 	rsb	r3, r3, #1
   bd0cc:	9315      	str	r3, [sp, #84]	; 0x54
   bd0ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd0d0:	2b00      	cmp	r3, #0
   bd0d2:	d0f0      	beq.n	bd0b6 <__gethex+0x386>
   bd0d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bd0d8:	f104 0314 	add.w	r3, r4, #20
   bd0dc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bd0e0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bd0e4:	f04f 0c00 	mov.w	ip, #0
   bd0e8:	4618      	mov	r0, r3
   bd0ea:	f853 2b04 	ldr.w	r2, [r3], #4
   bd0ee:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bd0f2:	d01c      	beq.n	bd12e <__gethex+0x3fe>
   bd0f4:	3201      	adds	r2, #1
   bd0f6:	6002      	str	r2, [r0, #0]
   bd0f8:	2f02      	cmp	r7, #2
   bd0fa:	f104 0314 	add.w	r3, r4, #20
   bd0fe:	d13f      	bne.n	bd180 <__gethex+0x450>
   bd100:	f8d8 2000 	ldr.w	r2, [r8]
   bd104:	3a01      	subs	r2, #1
   bd106:	42b2      	cmp	r2, r6
   bd108:	d10a      	bne.n	bd120 <__gethex+0x3f0>
   bd10a:	1171      	asrs	r1, r6, #5
   bd10c:	2201      	movs	r2, #1
   bd10e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bd112:	f006 061f 	and.w	r6, r6, #31
   bd116:	fa02 f606 	lsl.w	r6, r2, r6
   bd11a:	421e      	tst	r6, r3
   bd11c:	bf18      	it	ne
   bd11e:	4617      	movne	r7, r2
   bd120:	f047 0720 	orr.w	r7, r7, #32
   bd124:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bd126:	601c      	str	r4, [r3, #0]
   bd128:	9b04      	ldr	r3, [sp, #16]
   bd12a:	601d      	str	r5, [r3, #0]
   bd12c:	e695      	b.n	bce5a <__gethex+0x12a>
   bd12e:	4299      	cmp	r1, r3
   bd130:	f843 cc04 	str.w	ip, [r3, #-4]
   bd134:	d8d8      	bhi.n	bd0e8 <__gethex+0x3b8>
   bd136:	68a3      	ldr	r3, [r4, #8]
   bd138:	459b      	cmp	fp, r3
   bd13a:	db19      	blt.n	bd170 <__gethex+0x440>
   bd13c:	6861      	ldr	r1, [r4, #4]
   bd13e:	ee18 0a10 	vmov	r0, s16
   bd142:	3101      	adds	r1, #1
   bd144:	f000 f912 	bl	bd36c <_Balloc>
   bd148:	4681      	mov	r9, r0
   bd14a:	b918      	cbnz	r0, bd154 <__gethex+0x424>
   bd14c:	4b1a      	ldr	r3, [pc, #104]	; (bd1b8 <__gethex+0x488>)
   bd14e:	4602      	mov	r2, r0
   bd150:	2184      	movs	r1, #132	; 0x84
   bd152:	e6a8      	b.n	bcea6 <__gethex+0x176>
   bd154:	6922      	ldr	r2, [r4, #16]
   bd156:	3202      	adds	r2, #2
   bd158:	f104 010c 	add.w	r1, r4, #12
   bd15c:	0092      	lsls	r2, r2, #2
   bd15e:	300c      	adds	r0, #12
   bd160:	f7fe fd89 	bl	bbc76 <memcpy>
   bd164:	4621      	mov	r1, r4
   bd166:	ee18 0a10 	vmov	r0, s16
   bd16a:	f000 f93f 	bl	bd3ec <_Bfree>
   bd16e:	464c      	mov	r4, r9
   bd170:	6923      	ldr	r3, [r4, #16]
   bd172:	1c5a      	adds	r2, r3, #1
   bd174:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bd178:	6122      	str	r2, [r4, #16]
   bd17a:	2201      	movs	r2, #1
   bd17c:	615a      	str	r2, [r3, #20]
   bd17e:	e7bb      	b.n	bd0f8 <__gethex+0x3c8>
   bd180:	6922      	ldr	r2, [r4, #16]
   bd182:	455a      	cmp	r2, fp
   bd184:	dd0b      	ble.n	bd19e <__gethex+0x46e>
   bd186:	2101      	movs	r1, #1
   bd188:	4620      	mov	r0, r4
   bd18a:	f7ff fd69 	bl	bcc60 <rshift>
   bd18e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bd192:	3501      	adds	r5, #1
   bd194:	42ab      	cmp	r3, r5
   bd196:	f6ff aed0 	blt.w	bcf3a <__gethex+0x20a>
   bd19a:	2701      	movs	r7, #1
   bd19c:	e7c0      	b.n	bd120 <__gethex+0x3f0>
   bd19e:	f016 061f 	ands.w	r6, r6, #31
   bd1a2:	d0fa      	beq.n	bd19a <__gethex+0x46a>
   bd1a4:	4453      	add	r3, sl
   bd1a6:	f1c6 0620 	rsb	r6, r6, #32
   bd1aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bd1ae:	f000 f9cf 	bl	bd550 <__hi0bits>
   bd1b2:	42b0      	cmp	r0, r6
   bd1b4:	dbe7      	blt.n	bd186 <__gethex+0x456>
   bd1b6:	e7f0      	b.n	bd19a <__gethex+0x46a>
   bd1b8:	000bea81 	.word	0x000bea81

000bd1bc <L_shift>:
   bd1bc:	f1c2 0208 	rsb	r2, r2, #8
   bd1c0:	0092      	lsls	r2, r2, #2
   bd1c2:	b570      	push	{r4, r5, r6, lr}
   bd1c4:	f1c2 0620 	rsb	r6, r2, #32
   bd1c8:	6843      	ldr	r3, [r0, #4]
   bd1ca:	6804      	ldr	r4, [r0, #0]
   bd1cc:	fa03 f506 	lsl.w	r5, r3, r6
   bd1d0:	432c      	orrs	r4, r5
   bd1d2:	40d3      	lsrs	r3, r2
   bd1d4:	6004      	str	r4, [r0, #0]
   bd1d6:	f840 3f04 	str.w	r3, [r0, #4]!
   bd1da:	4288      	cmp	r0, r1
   bd1dc:	d3f4      	bcc.n	bd1c8 <L_shift+0xc>
   bd1de:	bd70      	pop	{r4, r5, r6, pc}

000bd1e0 <__match>:
   bd1e0:	b530      	push	{r4, r5, lr}
   bd1e2:	6803      	ldr	r3, [r0, #0]
   bd1e4:	3301      	adds	r3, #1
   bd1e6:	f811 4b01 	ldrb.w	r4, [r1], #1
   bd1ea:	b914      	cbnz	r4, bd1f2 <__match+0x12>
   bd1ec:	6003      	str	r3, [r0, #0]
   bd1ee:	2001      	movs	r0, #1
   bd1f0:	bd30      	pop	{r4, r5, pc}
   bd1f2:	f813 2b01 	ldrb.w	r2, [r3], #1
   bd1f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bd1fa:	2d19      	cmp	r5, #25
   bd1fc:	bf98      	it	ls
   bd1fe:	3220      	addls	r2, #32
   bd200:	42a2      	cmp	r2, r4
   bd202:	d0f0      	beq.n	bd1e6 <__match+0x6>
   bd204:	2000      	movs	r0, #0
   bd206:	e7f3      	b.n	bd1f0 <__match+0x10>

000bd208 <__hexnan>:
   bd208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd20c:	680b      	ldr	r3, [r1, #0]
   bd20e:	115e      	asrs	r6, r3, #5
   bd210:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bd214:	f013 031f 	ands.w	r3, r3, #31
   bd218:	b087      	sub	sp, #28
   bd21a:	bf18      	it	ne
   bd21c:	3604      	addne	r6, #4
   bd21e:	2500      	movs	r5, #0
   bd220:	1f37      	subs	r7, r6, #4
   bd222:	4690      	mov	r8, r2
   bd224:	6802      	ldr	r2, [r0, #0]
   bd226:	9301      	str	r3, [sp, #4]
   bd228:	4682      	mov	sl, r0
   bd22a:	f846 5c04 	str.w	r5, [r6, #-4]
   bd22e:	46b9      	mov	r9, r7
   bd230:	463c      	mov	r4, r7
   bd232:	9502      	str	r5, [sp, #8]
   bd234:	46ab      	mov	fp, r5
   bd236:	7851      	ldrb	r1, [r2, #1]
   bd238:	1c53      	adds	r3, r2, #1
   bd23a:	9303      	str	r3, [sp, #12]
   bd23c:	b341      	cbz	r1, bd290 <__hexnan+0x88>
   bd23e:	4608      	mov	r0, r1
   bd240:	9205      	str	r2, [sp, #20]
   bd242:	9104      	str	r1, [sp, #16]
   bd244:	f7ff fd5e 	bl	bcd04 <__hexdig_fun>
   bd248:	2800      	cmp	r0, #0
   bd24a:	d14f      	bne.n	bd2ec <__hexnan+0xe4>
   bd24c:	9904      	ldr	r1, [sp, #16]
   bd24e:	9a05      	ldr	r2, [sp, #20]
   bd250:	2920      	cmp	r1, #32
   bd252:	d818      	bhi.n	bd286 <__hexnan+0x7e>
   bd254:	9b02      	ldr	r3, [sp, #8]
   bd256:	459b      	cmp	fp, r3
   bd258:	dd13      	ble.n	bd282 <__hexnan+0x7a>
   bd25a:	454c      	cmp	r4, r9
   bd25c:	d206      	bcs.n	bd26c <__hexnan+0x64>
   bd25e:	2d07      	cmp	r5, #7
   bd260:	dc04      	bgt.n	bd26c <__hexnan+0x64>
   bd262:	462a      	mov	r2, r5
   bd264:	4649      	mov	r1, r9
   bd266:	4620      	mov	r0, r4
   bd268:	f7ff ffa8 	bl	bd1bc <L_shift>
   bd26c:	4544      	cmp	r4, r8
   bd26e:	d950      	bls.n	bd312 <__hexnan+0x10a>
   bd270:	2300      	movs	r3, #0
   bd272:	f1a4 0904 	sub.w	r9, r4, #4
   bd276:	f844 3c04 	str.w	r3, [r4, #-4]
   bd27a:	f8cd b008 	str.w	fp, [sp, #8]
   bd27e:	464c      	mov	r4, r9
   bd280:	461d      	mov	r5, r3
   bd282:	9a03      	ldr	r2, [sp, #12]
   bd284:	e7d7      	b.n	bd236 <__hexnan+0x2e>
   bd286:	2929      	cmp	r1, #41	; 0x29
   bd288:	d156      	bne.n	bd338 <__hexnan+0x130>
   bd28a:	3202      	adds	r2, #2
   bd28c:	f8ca 2000 	str.w	r2, [sl]
   bd290:	f1bb 0f00 	cmp.w	fp, #0
   bd294:	d050      	beq.n	bd338 <__hexnan+0x130>
   bd296:	454c      	cmp	r4, r9
   bd298:	d206      	bcs.n	bd2a8 <__hexnan+0xa0>
   bd29a:	2d07      	cmp	r5, #7
   bd29c:	dc04      	bgt.n	bd2a8 <__hexnan+0xa0>
   bd29e:	462a      	mov	r2, r5
   bd2a0:	4649      	mov	r1, r9
   bd2a2:	4620      	mov	r0, r4
   bd2a4:	f7ff ff8a 	bl	bd1bc <L_shift>
   bd2a8:	4544      	cmp	r4, r8
   bd2aa:	d934      	bls.n	bd316 <__hexnan+0x10e>
   bd2ac:	f1a8 0204 	sub.w	r2, r8, #4
   bd2b0:	4623      	mov	r3, r4
   bd2b2:	f853 1b04 	ldr.w	r1, [r3], #4
   bd2b6:	f842 1f04 	str.w	r1, [r2, #4]!
   bd2ba:	429f      	cmp	r7, r3
   bd2bc:	d2f9      	bcs.n	bd2b2 <__hexnan+0xaa>
   bd2be:	1b3b      	subs	r3, r7, r4
   bd2c0:	f023 0303 	bic.w	r3, r3, #3
   bd2c4:	3304      	adds	r3, #4
   bd2c6:	3401      	adds	r4, #1
   bd2c8:	3e03      	subs	r6, #3
   bd2ca:	42b4      	cmp	r4, r6
   bd2cc:	bf88      	it	hi
   bd2ce:	2304      	movhi	r3, #4
   bd2d0:	4443      	add	r3, r8
   bd2d2:	2200      	movs	r2, #0
   bd2d4:	f843 2b04 	str.w	r2, [r3], #4
   bd2d8:	429f      	cmp	r7, r3
   bd2da:	d2fb      	bcs.n	bd2d4 <__hexnan+0xcc>
   bd2dc:	683b      	ldr	r3, [r7, #0]
   bd2de:	b91b      	cbnz	r3, bd2e8 <__hexnan+0xe0>
   bd2e0:	4547      	cmp	r7, r8
   bd2e2:	d127      	bne.n	bd334 <__hexnan+0x12c>
   bd2e4:	2301      	movs	r3, #1
   bd2e6:	603b      	str	r3, [r7, #0]
   bd2e8:	2005      	movs	r0, #5
   bd2ea:	e026      	b.n	bd33a <__hexnan+0x132>
   bd2ec:	3501      	adds	r5, #1
   bd2ee:	2d08      	cmp	r5, #8
   bd2f0:	f10b 0b01 	add.w	fp, fp, #1
   bd2f4:	dd06      	ble.n	bd304 <__hexnan+0xfc>
   bd2f6:	4544      	cmp	r4, r8
   bd2f8:	d9c3      	bls.n	bd282 <__hexnan+0x7a>
   bd2fa:	2300      	movs	r3, #0
   bd2fc:	f844 3c04 	str.w	r3, [r4, #-4]
   bd300:	2501      	movs	r5, #1
   bd302:	3c04      	subs	r4, #4
   bd304:	6822      	ldr	r2, [r4, #0]
   bd306:	f000 000f 	and.w	r0, r0, #15
   bd30a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bd30e:	6022      	str	r2, [r4, #0]
   bd310:	e7b7      	b.n	bd282 <__hexnan+0x7a>
   bd312:	2508      	movs	r5, #8
   bd314:	e7b5      	b.n	bd282 <__hexnan+0x7a>
   bd316:	9b01      	ldr	r3, [sp, #4]
   bd318:	2b00      	cmp	r3, #0
   bd31a:	d0df      	beq.n	bd2dc <__hexnan+0xd4>
   bd31c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd320:	f1c3 0320 	rsb	r3, r3, #32
   bd324:	fa22 f303 	lsr.w	r3, r2, r3
   bd328:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bd32c:	401a      	ands	r2, r3
   bd32e:	f846 2c04 	str.w	r2, [r6, #-4]
   bd332:	e7d3      	b.n	bd2dc <__hexnan+0xd4>
   bd334:	3f04      	subs	r7, #4
   bd336:	e7d1      	b.n	bd2dc <__hexnan+0xd4>
   bd338:	2004      	movs	r0, #4
   bd33a:	b007      	add	sp, #28
   bd33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd340 <__retarget_lock_acquire_recursive>:
   bd340:	4770      	bx	lr

000bd342 <__retarget_lock_release>:
   bd342:	4770      	bx	lr

000bd344 <__retarget_lock_release_recursive>:
   bd344:	4770      	bx	lr

000bd346 <__ascii_mbtowc>:
   bd346:	b082      	sub	sp, #8
   bd348:	b901      	cbnz	r1, bd34c <__ascii_mbtowc+0x6>
   bd34a:	a901      	add	r1, sp, #4
   bd34c:	b142      	cbz	r2, bd360 <__ascii_mbtowc+0x1a>
   bd34e:	b14b      	cbz	r3, bd364 <__ascii_mbtowc+0x1e>
   bd350:	7813      	ldrb	r3, [r2, #0]
   bd352:	600b      	str	r3, [r1, #0]
   bd354:	7812      	ldrb	r2, [r2, #0]
   bd356:	1e10      	subs	r0, r2, #0
   bd358:	bf18      	it	ne
   bd35a:	2001      	movne	r0, #1
   bd35c:	b002      	add	sp, #8
   bd35e:	4770      	bx	lr
   bd360:	4610      	mov	r0, r2
   bd362:	e7fb      	b.n	bd35c <__ascii_mbtowc+0x16>
   bd364:	f06f 0001 	mvn.w	r0, #1
   bd368:	e7f8      	b.n	bd35c <__ascii_mbtowc+0x16>
	...

000bd36c <_Balloc>:
   bd36c:	b570      	push	{r4, r5, r6, lr}
   bd36e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bd370:	4604      	mov	r4, r0
   bd372:	460d      	mov	r5, r1
   bd374:	b976      	cbnz	r6, bd394 <_Balloc+0x28>
   bd376:	2010      	movs	r0, #16
   bd378:	f7fa f83a 	bl	b73f0 <malloc>
   bd37c:	4602      	mov	r2, r0
   bd37e:	6260      	str	r0, [r4, #36]	; 0x24
   bd380:	b920      	cbnz	r0, bd38c <_Balloc+0x20>
   bd382:	4b18      	ldr	r3, [pc, #96]	; (bd3e4 <_Balloc+0x78>)
   bd384:	4818      	ldr	r0, [pc, #96]	; (bd3e8 <_Balloc+0x7c>)
   bd386:	2166      	movs	r1, #102	; 0x66
   bd388:	f7fa f882 	bl	b7490 <__assert_func>
   bd38c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bd390:	6006      	str	r6, [r0, #0]
   bd392:	60c6      	str	r6, [r0, #12]
   bd394:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bd396:	68f3      	ldr	r3, [r6, #12]
   bd398:	b183      	cbz	r3, bd3bc <_Balloc+0x50>
   bd39a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bd39c:	68db      	ldr	r3, [r3, #12]
   bd39e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bd3a2:	b9b8      	cbnz	r0, bd3d4 <_Balloc+0x68>
   bd3a4:	2101      	movs	r1, #1
   bd3a6:	fa01 f605 	lsl.w	r6, r1, r5
   bd3aa:	1d72      	adds	r2, r6, #5
   bd3ac:	0092      	lsls	r2, r2, #2
   bd3ae:	4620      	mov	r0, r4
   bd3b0:	f000 fc9d 	bl	bdcee <_calloc_r>
   bd3b4:	b160      	cbz	r0, bd3d0 <_Balloc+0x64>
   bd3b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bd3ba:	e00e      	b.n	bd3da <_Balloc+0x6e>
   bd3bc:	2221      	movs	r2, #33	; 0x21
   bd3be:	2104      	movs	r1, #4
   bd3c0:	4620      	mov	r0, r4
   bd3c2:	f000 fc94 	bl	bdcee <_calloc_r>
   bd3c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bd3c8:	60f0      	str	r0, [r6, #12]
   bd3ca:	68db      	ldr	r3, [r3, #12]
   bd3cc:	2b00      	cmp	r3, #0
   bd3ce:	d1e4      	bne.n	bd39a <_Balloc+0x2e>
   bd3d0:	2000      	movs	r0, #0
   bd3d2:	bd70      	pop	{r4, r5, r6, pc}
   bd3d4:	6802      	ldr	r2, [r0, #0]
   bd3d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bd3da:	2300      	movs	r3, #0
   bd3dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bd3e0:	e7f7      	b.n	bd3d2 <_Balloc+0x66>
   bd3e2:	bf00      	nop
   bd3e4:	000be8b1 	.word	0x000be8b1
   bd3e8:	000beb08 	.word	0x000beb08

000bd3ec <_Bfree>:
   bd3ec:	b570      	push	{r4, r5, r6, lr}
   bd3ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bd3f0:	4605      	mov	r5, r0
   bd3f2:	460c      	mov	r4, r1
   bd3f4:	b976      	cbnz	r6, bd414 <_Bfree+0x28>
   bd3f6:	2010      	movs	r0, #16
   bd3f8:	f7f9 fffa 	bl	b73f0 <malloc>
   bd3fc:	4602      	mov	r2, r0
   bd3fe:	6268      	str	r0, [r5, #36]	; 0x24
   bd400:	b920      	cbnz	r0, bd40c <_Bfree+0x20>
   bd402:	4b09      	ldr	r3, [pc, #36]	; (bd428 <_Bfree+0x3c>)
   bd404:	4809      	ldr	r0, [pc, #36]	; (bd42c <_Bfree+0x40>)
   bd406:	218a      	movs	r1, #138	; 0x8a
   bd408:	f7fa f842 	bl	b7490 <__assert_func>
   bd40c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bd410:	6006      	str	r6, [r0, #0]
   bd412:	60c6      	str	r6, [r0, #12]
   bd414:	b13c      	cbz	r4, bd426 <_Bfree+0x3a>
   bd416:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bd418:	6862      	ldr	r2, [r4, #4]
   bd41a:	68db      	ldr	r3, [r3, #12]
   bd41c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bd420:	6021      	str	r1, [r4, #0]
   bd422:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bd426:	bd70      	pop	{r4, r5, r6, pc}
   bd428:	000be8b1 	.word	0x000be8b1
   bd42c:	000beb08 	.word	0x000beb08

000bd430 <__multadd>:
   bd430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd434:	690d      	ldr	r5, [r1, #16]
   bd436:	4607      	mov	r7, r0
   bd438:	460c      	mov	r4, r1
   bd43a:	461e      	mov	r6, r3
   bd43c:	f101 0c14 	add.w	ip, r1, #20
   bd440:	2000      	movs	r0, #0
   bd442:	f8dc 3000 	ldr.w	r3, [ip]
   bd446:	b299      	uxth	r1, r3
   bd448:	fb02 6101 	mla	r1, r2, r1, r6
   bd44c:	0c1e      	lsrs	r6, r3, #16
   bd44e:	0c0b      	lsrs	r3, r1, #16
   bd450:	fb02 3306 	mla	r3, r2, r6, r3
   bd454:	b289      	uxth	r1, r1
   bd456:	3001      	adds	r0, #1
   bd458:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bd45c:	4285      	cmp	r5, r0
   bd45e:	f84c 1b04 	str.w	r1, [ip], #4
   bd462:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bd466:	dcec      	bgt.n	bd442 <__multadd+0x12>
   bd468:	b30e      	cbz	r6, bd4ae <__multadd+0x7e>
   bd46a:	68a3      	ldr	r3, [r4, #8]
   bd46c:	42ab      	cmp	r3, r5
   bd46e:	dc19      	bgt.n	bd4a4 <__multadd+0x74>
   bd470:	6861      	ldr	r1, [r4, #4]
   bd472:	4638      	mov	r0, r7
   bd474:	3101      	adds	r1, #1
   bd476:	f7ff ff79 	bl	bd36c <_Balloc>
   bd47a:	4680      	mov	r8, r0
   bd47c:	b928      	cbnz	r0, bd48a <__multadd+0x5a>
   bd47e:	4602      	mov	r2, r0
   bd480:	4b0c      	ldr	r3, [pc, #48]	; (bd4b4 <__multadd+0x84>)
   bd482:	480d      	ldr	r0, [pc, #52]	; (bd4b8 <__multadd+0x88>)
   bd484:	21b5      	movs	r1, #181	; 0xb5
   bd486:	f7fa f803 	bl	b7490 <__assert_func>
   bd48a:	6922      	ldr	r2, [r4, #16]
   bd48c:	3202      	adds	r2, #2
   bd48e:	f104 010c 	add.w	r1, r4, #12
   bd492:	0092      	lsls	r2, r2, #2
   bd494:	300c      	adds	r0, #12
   bd496:	f7fe fbee 	bl	bbc76 <memcpy>
   bd49a:	4621      	mov	r1, r4
   bd49c:	4638      	mov	r0, r7
   bd49e:	f7ff ffa5 	bl	bd3ec <_Bfree>
   bd4a2:	4644      	mov	r4, r8
   bd4a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bd4a8:	3501      	adds	r5, #1
   bd4aa:	615e      	str	r6, [r3, #20]
   bd4ac:	6125      	str	r5, [r4, #16]
   bd4ae:	4620      	mov	r0, r4
   bd4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd4b4:	000bea81 	.word	0x000bea81
   bd4b8:	000beb08 	.word	0x000beb08

000bd4bc <__s2b>:
   bd4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd4c0:	460c      	mov	r4, r1
   bd4c2:	4615      	mov	r5, r2
   bd4c4:	461f      	mov	r7, r3
   bd4c6:	2209      	movs	r2, #9
   bd4c8:	3308      	adds	r3, #8
   bd4ca:	4606      	mov	r6, r0
   bd4cc:	fb93 f3f2 	sdiv	r3, r3, r2
   bd4d0:	2100      	movs	r1, #0
   bd4d2:	2201      	movs	r2, #1
   bd4d4:	429a      	cmp	r2, r3
   bd4d6:	db09      	blt.n	bd4ec <__s2b+0x30>
   bd4d8:	4630      	mov	r0, r6
   bd4da:	f7ff ff47 	bl	bd36c <_Balloc>
   bd4de:	b940      	cbnz	r0, bd4f2 <__s2b+0x36>
   bd4e0:	4602      	mov	r2, r0
   bd4e2:	4b19      	ldr	r3, [pc, #100]	; (bd548 <__s2b+0x8c>)
   bd4e4:	4819      	ldr	r0, [pc, #100]	; (bd54c <__s2b+0x90>)
   bd4e6:	21ce      	movs	r1, #206	; 0xce
   bd4e8:	f7f9 ffd2 	bl	b7490 <__assert_func>
   bd4ec:	0052      	lsls	r2, r2, #1
   bd4ee:	3101      	adds	r1, #1
   bd4f0:	e7f0      	b.n	bd4d4 <__s2b+0x18>
   bd4f2:	9b08      	ldr	r3, [sp, #32]
   bd4f4:	6143      	str	r3, [r0, #20]
   bd4f6:	2d09      	cmp	r5, #9
   bd4f8:	f04f 0301 	mov.w	r3, #1
   bd4fc:	6103      	str	r3, [r0, #16]
   bd4fe:	dd16      	ble.n	bd52e <__s2b+0x72>
   bd500:	f104 0909 	add.w	r9, r4, #9
   bd504:	46c8      	mov	r8, r9
   bd506:	442c      	add	r4, r5
   bd508:	f818 3b01 	ldrb.w	r3, [r8], #1
   bd50c:	4601      	mov	r1, r0
   bd50e:	3b30      	subs	r3, #48	; 0x30
   bd510:	220a      	movs	r2, #10
   bd512:	4630      	mov	r0, r6
   bd514:	f7ff ff8c 	bl	bd430 <__multadd>
   bd518:	45a0      	cmp	r8, r4
   bd51a:	d1f5      	bne.n	bd508 <__s2b+0x4c>
   bd51c:	f1a5 0408 	sub.w	r4, r5, #8
   bd520:	444c      	add	r4, r9
   bd522:	1b2d      	subs	r5, r5, r4
   bd524:	1963      	adds	r3, r4, r5
   bd526:	42bb      	cmp	r3, r7
   bd528:	db04      	blt.n	bd534 <__s2b+0x78>
   bd52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd52e:	340a      	adds	r4, #10
   bd530:	2509      	movs	r5, #9
   bd532:	e7f6      	b.n	bd522 <__s2b+0x66>
   bd534:	f814 3b01 	ldrb.w	r3, [r4], #1
   bd538:	4601      	mov	r1, r0
   bd53a:	3b30      	subs	r3, #48	; 0x30
   bd53c:	220a      	movs	r2, #10
   bd53e:	4630      	mov	r0, r6
   bd540:	f7ff ff76 	bl	bd430 <__multadd>
   bd544:	e7ee      	b.n	bd524 <__s2b+0x68>
   bd546:	bf00      	nop
   bd548:	000bea81 	.word	0x000bea81
   bd54c:	000beb08 	.word	0x000beb08

000bd550 <__hi0bits>:
   bd550:	0c03      	lsrs	r3, r0, #16
   bd552:	041b      	lsls	r3, r3, #16
   bd554:	b9d3      	cbnz	r3, bd58c <__hi0bits+0x3c>
   bd556:	0400      	lsls	r0, r0, #16
   bd558:	2310      	movs	r3, #16
   bd55a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bd55e:	bf04      	itt	eq
   bd560:	0200      	lsleq	r0, r0, #8
   bd562:	3308      	addeq	r3, #8
   bd564:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bd568:	bf04      	itt	eq
   bd56a:	0100      	lsleq	r0, r0, #4
   bd56c:	3304      	addeq	r3, #4
   bd56e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bd572:	bf04      	itt	eq
   bd574:	0080      	lsleq	r0, r0, #2
   bd576:	3302      	addeq	r3, #2
   bd578:	2800      	cmp	r0, #0
   bd57a:	db05      	blt.n	bd588 <__hi0bits+0x38>
   bd57c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bd580:	f103 0301 	add.w	r3, r3, #1
   bd584:	bf08      	it	eq
   bd586:	2320      	moveq	r3, #32
   bd588:	4618      	mov	r0, r3
   bd58a:	4770      	bx	lr
   bd58c:	2300      	movs	r3, #0
   bd58e:	e7e4      	b.n	bd55a <__hi0bits+0xa>

000bd590 <__lo0bits>:
   bd590:	6803      	ldr	r3, [r0, #0]
   bd592:	f013 0207 	ands.w	r2, r3, #7
   bd596:	4601      	mov	r1, r0
   bd598:	d00b      	beq.n	bd5b2 <__lo0bits+0x22>
   bd59a:	07da      	lsls	r2, r3, #31
   bd59c:	d423      	bmi.n	bd5e6 <__lo0bits+0x56>
   bd59e:	0798      	lsls	r0, r3, #30
   bd5a0:	bf49      	itett	mi
   bd5a2:	085b      	lsrmi	r3, r3, #1
   bd5a4:	089b      	lsrpl	r3, r3, #2
   bd5a6:	2001      	movmi	r0, #1
   bd5a8:	600b      	strmi	r3, [r1, #0]
   bd5aa:	bf5c      	itt	pl
   bd5ac:	600b      	strpl	r3, [r1, #0]
   bd5ae:	2002      	movpl	r0, #2
   bd5b0:	4770      	bx	lr
   bd5b2:	b298      	uxth	r0, r3
   bd5b4:	b9a8      	cbnz	r0, bd5e2 <__lo0bits+0x52>
   bd5b6:	0c1b      	lsrs	r3, r3, #16
   bd5b8:	2010      	movs	r0, #16
   bd5ba:	b2da      	uxtb	r2, r3
   bd5bc:	b90a      	cbnz	r2, bd5c2 <__lo0bits+0x32>
   bd5be:	3008      	adds	r0, #8
   bd5c0:	0a1b      	lsrs	r3, r3, #8
   bd5c2:	071a      	lsls	r2, r3, #28
   bd5c4:	bf04      	itt	eq
   bd5c6:	091b      	lsreq	r3, r3, #4
   bd5c8:	3004      	addeq	r0, #4
   bd5ca:	079a      	lsls	r2, r3, #30
   bd5cc:	bf04      	itt	eq
   bd5ce:	089b      	lsreq	r3, r3, #2
   bd5d0:	3002      	addeq	r0, #2
   bd5d2:	07da      	lsls	r2, r3, #31
   bd5d4:	d403      	bmi.n	bd5de <__lo0bits+0x4e>
   bd5d6:	085b      	lsrs	r3, r3, #1
   bd5d8:	f100 0001 	add.w	r0, r0, #1
   bd5dc:	d005      	beq.n	bd5ea <__lo0bits+0x5a>
   bd5de:	600b      	str	r3, [r1, #0]
   bd5e0:	4770      	bx	lr
   bd5e2:	4610      	mov	r0, r2
   bd5e4:	e7e9      	b.n	bd5ba <__lo0bits+0x2a>
   bd5e6:	2000      	movs	r0, #0
   bd5e8:	4770      	bx	lr
   bd5ea:	2020      	movs	r0, #32
   bd5ec:	4770      	bx	lr
	...

000bd5f0 <__i2b>:
   bd5f0:	b510      	push	{r4, lr}
   bd5f2:	460c      	mov	r4, r1
   bd5f4:	2101      	movs	r1, #1
   bd5f6:	f7ff feb9 	bl	bd36c <_Balloc>
   bd5fa:	4602      	mov	r2, r0
   bd5fc:	b928      	cbnz	r0, bd60a <__i2b+0x1a>
   bd5fe:	4b05      	ldr	r3, [pc, #20]	; (bd614 <__i2b+0x24>)
   bd600:	4805      	ldr	r0, [pc, #20]	; (bd618 <__i2b+0x28>)
   bd602:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bd606:	f7f9 ff43 	bl	b7490 <__assert_func>
   bd60a:	2301      	movs	r3, #1
   bd60c:	6144      	str	r4, [r0, #20]
   bd60e:	6103      	str	r3, [r0, #16]
   bd610:	bd10      	pop	{r4, pc}
   bd612:	bf00      	nop
   bd614:	000bea81 	.word	0x000bea81
   bd618:	000beb08 	.word	0x000beb08

000bd61c <__multiply>:
   bd61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd620:	4691      	mov	r9, r2
   bd622:	690a      	ldr	r2, [r1, #16]
   bd624:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bd628:	429a      	cmp	r2, r3
   bd62a:	bfb8      	it	lt
   bd62c:	460b      	movlt	r3, r1
   bd62e:	460c      	mov	r4, r1
   bd630:	bfbc      	itt	lt
   bd632:	464c      	movlt	r4, r9
   bd634:	4699      	movlt	r9, r3
   bd636:	6927      	ldr	r7, [r4, #16]
   bd638:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bd63c:	68a3      	ldr	r3, [r4, #8]
   bd63e:	6861      	ldr	r1, [r4, #4]
   bd640:	eb07 060a 	add.w	r6, r7, sl
   bd644:	42b3      	cmp	r3, r6
   bd646:	b085      	sub	sp, #20
   bd648:	bfb8      	it	lt
   bd64a:	3101      	addlt	r1, #1
   bd64c:	f7ff fe8e 	bl	bd36c <_Balloc>
   bd650:	b930      	cbnz	r0, bd660 <__multiply+0x44>
   bd652:	4602      	mov	r2, r0
   bd654:	4b44      	ldr	r3, [pc, #272]	; (bd768 <__multiply+0x14c>)
   bd656:	4845      	ldr	r0, [pc, #276]	; (bd76c <__multiply+0x150>)
   bd658:	f240 115d 	movw	r1, #349	; 0x15d
   bd65c:	f7f9 ff18 	bl	b7490 <__assert_func>
   bd660:	f100 0514 	add.w	r5, r0, #20
   bd664:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bd668:	462b      	mov	r3, r5
   bd66a:	2200      	movs	r2, #0
   bd66c:	4543      	cmp	r3, r8
   bd66e:	d321      	bcc.n	bd6b4 <__multiply+0x98>
   bd670:	f104 0314 	add.w	r3, r4, #20
   bd674:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bd678:	f109 0314 	add.w	r3, r9, #20
   bd67c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bd680:	9202      	str	r2, [sp, #8]
   bd682:	1b3a      	subs	r2, r7, r4
   bd684:	3a15      	subs	r2, #21
   bd686:	f022 0203 	bic.w	r2, r2, #3
   bd68a:	3204      	adds	r2, #4
   bd68c:	f104 0115 	add.w	r1, r4, #21
   bd690:	428f      	cmp	r7, r1
   bd692:	bf38      	it	cc
   bd694:	2204      	movcc	r2, #4
   bd696:	9201      	str	r2, [sp, #4]
   bd698:	9a02      	ldr	r2, [sp, #8]
   bd69a:	9303      	str	r3, [sp, #12]
   bd69c:	429a      	cmp	r2, r3
   bd69e:	d80c      	bhi.n	bd6ba <__multiply+0x9e>
   bd6a0:	2e00      	cmp	r6, #0
   bd6a2:	dd03      	ble.n	bd6ac <__multiply+0x90>
   bd6a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bd6a8:	2b00      	cmp	r3, #0
   bd6aa:	d05a      	beq.n	bd762 <__multiply+0x146>
   bd6ac:	6106      	str	r6, [r0, #16]
   bd6ae:	b005      	add	sp, #20
   bd6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd6b4:	f843 2b04 	str.w	r2, [r3], #4
   bd6b8:	e7d8      	b.n	bd66c <__multiply+0x50>
   bd6ba:	f8b3 a000 	ldrh.w	sl, [r3]
   bd6be:	f1ba 0f00 	cmp.w	sl, #0
   bd6c2:	d024      	beq.n	bd70e <__multiply+0xf2>
   bd6c4:	f104 0e14 	add.w	lr, r4, #20
   bd6c8:	46a9      	mov	r9, r5
   bd6ca:	f04f 0c00 	mov.w	ip, #0
   bd6ce:	f85e 2b04 	ldr.w	r2, [lr], #4
   bd6d2:	f8d9 1000 	ldr.w	r1, [r9]
   bd6d6:	fa1f fb82 	uxth.w	fp, r2
   bd6da:	b289      	uxth	r1, r1
   bd6dc:	fb0a 110b 	mla	r1, sl, fp, r1
   bd6e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bd6e4:	f8d9 2000 	ldr.w	r2, [r9]
   bd6e8:	4461      	add	r1, ip
   bd6ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bd6ee:	fb0a c20b 	mla	r2, sl, fp, ip
   bd6f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bd6f6:	b289      	uxth	r1, r1
   bd6f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bd6fc:	4577      	cmp	r7, lr
   bd6fe:	f849 1b04 	str.w	r1, [r9], #4
   bd702:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bd706:	d8e2      	bhi.n	bd6ce <__multiply+0xb2>
   bd708:	9a01      	ldr	r2, [sp, #4]
   bd70a:	f845 c002 	str.w	ip, [r5, r2]
   bd70e:	9a03      	ldr	r2, [sp, #12]
   bd710:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bd714:	3304      	adds	r3, #4
   bd716:	f1b9 0f00 	cmp.w	r9, #0
   bd71a:	d020      	beq.n	bd75e <__multiply+0x142>
   bd71c:	6829      	ldr	r1, [r5, #0]
   bd71e:	f104 0c14 	add.w	ip, r4, #20
   bd722:	46ae      	mov	lr, r5
   bd724:	f04f 0a00 	mov.w	sl, #0
   bd728:	f8bc b000 	ldrh.w	fp, [ip]
   bd72c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bd730:	fb09 220b 	mla	r2, r9, fp, r2
   bd734:	4492      	add	sl, r2
   bd736:	b289      	uxth	r1, r1
   bd738:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bd73c:	f84e 1b04 	str.w	r1, [lr], #4
   bd740:	f85c 2b04 	ldr.w	r2, [ip], #4
   bd744:	f8be 1000 	ldrh.w	r1, [lr]
   bd748:	0c12      	lsrs	r2, r2, #16
   bd74a:	fb09 1102 	mla	r1, r9, r2, r1
   bd74e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bd752:	4567      	cmp	r7, ip
   bd754:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bd758:	d8e6      	bhi.n	bd728 <__multiply+0x10c>
   bd75a:	9a01      	ldr	r2, [sp, #4]
   bd75c:	50a9      	str	r1, [r5, r2]
   bd75e:	3504      	adds	r5, #4
   bd760:	e79a      	b.n	bd698 <__multiply+0x7c>
   bd762:	3e01      	subs	r6, #1
   bd764:	e79c      	b.n	bd6a0 <__multiply+0x84>
   bd766:	bf00      	nop
   bd768:	000bea81 	.word	0x000bea81
   bd76c:	000beb08 	.word	0x000beb08

000bd770 <__pow5mult>:
   bd770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd774:	4615      	mov	r5, r2
   bd776:	f012 0203 	ands.w	r2, r2, #3
   bd77a:	4606      	mov	r6, r0
   bd77c:	460f      	mov	r7, r1
   bd77e:	d007      	beq.n	bd790 <__pow5mult+0x20>
   bd780:	4c25      	ldr	r4, [pc, #148]	; (bd818 <__pow5mult+0xa8>)
   bd782:	3a01      	subs	r2, #1
   bd784:	2300      	movs	r3, #0
   bd786:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bd78a:	f7ff fe51 	bl	bd430 <__multadd>
   bd78e:	4607      	mov	r7, r0
   bd790:	10ad      	asrs	r5, r5, #2
   bd792:	d03d      	beq.n	bd810 <__pow5mult+0xa0>
   bd794:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bd796:	b97c      	cbnz	r4, bd7b8 <__pow5mult+0x48>
   bd798:	2010      	movs	r0, #16
   bd79a:	f7f9 fe29 	bl	b73f0 <malloc>
   bd79e:	4602      	mov	r2, r0
   bd7a0:	6270      	str	r0, [r6, #36]	; 0x24
   bd7a2:	b928      	cbnz	r0, bd7b0 <__pow5mult+0x40>
   bd7a4:	4b1d      	ldr	r3, [pc, #116]	; (bd81c <__pow5mult+0xac>)
   bd7a6:	481e      	ldr	r0, [pc, #120]	; (bd820 <__pow5mult+0xb0>)
   bd7a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bd7ac:	f7f9 fe70 	bl	b7490 <__assert_func>
   bd7b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bd7b4:	6004      	str	r4, [r0, #0]
   bd7b6:	60c4      	str	r4, [r0, #12]
   bd7b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bd7bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bd7c0:	b94c      	cbnz	r4, bd7d6 <__pow5mult+0x66>
   bd7c2:	f240 2171 	movw	r1, #625	; 0x271
   bd7c6:	4630      	mov	r0, r6
   bd7c8:	f7ff ff12 	bl	bd5f0 <__i2b>
   bd7cc:	2300      	movs	r3, #0
   bd7ce:	f8c8 0008 	str.w	r0, [r8, #8]
   bd7d2:	4604      	mov	r4, r0
   bd7d4:	6003      	str	r3, [r0, #0]
   bd7d6:	f04f 0900 	mov.w	r9, #0
   bd7da:	07eb      	lsls	r3, r5, #31
   bd7dc:	d50a      	bpl.n	bd7f4 <__pow5mult+0x84>
   bd7de:	4639      	mov	r1, r7
   bd7e0:	4622      	mov	r2, r4
   bd7e2:	4630      	mov	r0, r6
   bd7e4:	f7ff ff1a 	bl	bd61c <__multiply>
   bd7e8:	4639      	mov	r1, r7
   bd7ea:	4680      	mov	r8, r0
   bd7ec:	4630      	mov	r0, r6
   bd7ee:	f7ff fdfd 	bl	bd3ec <_Bfree>
   bd7f2:	4647      	mov	r7, r8
   bd7f4:	106d      	asrs	r5, r5, #1
   bd7f6:	d00b      	beq.n	bd810 <__pow5mult+0xa0>
   bd7f8:	6820      	ldr	r0, [r4, #0]
   bd7fa:	b938      	cbnz	r0, bd80c <__pow5mult+0x9c>
   bd7fc:	4622      	mov	r2, r4
   bd7fe:	4621      	mov	r1, r4
   bd800:	4630      	mov	r0, r6
   bd802:	f7ff ff0b 	bl	bd61c <__multiply>
   bd806:	6020      	str	r0, [r4, #0]
   bd808:	f8c0 9000 	str.w	r9, [r0]
   bd80c:	4604      	mov	r4, r0
   bd80e:	e7e4      	b.n	bd7da <__pow5mult+0x6a>
   bd810:	4638      	mov	r0, r7
   bd812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd816:	bf00      	nop
   bd818:	000bec58 	.word	0x000bec58
   bd81c:	000be8b1 	.word	0x000be8b1
   bd820:	000beb08 	.word	0x000beb08

000bd824 <__lshift>:
   bd824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd828:	460c      	mov	r4, r1
   bd82a:	6849      	ldr	r1, [r1, #4]
   bd82c:	6923      	ldr	r3, [r4, #16]
   bd82e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bd832:	68a3      	ldr	r3, [r4, #8]
   bd834:	4607      	mov	r7, r0
   bd836:	4691      	mov	r9, r2
   bd838:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bd83c:	f108 0601 	add.w	r6, r8, #1
   bd840:	42b3      	cmp	r3, r6
   bd842:	db0b      	blt.n	bd85c <__lshift+0x38>
   bd844:	4638      	mov	r0, r7
   bd846:	f7ff fd91 	bl	bd36c <_Balloc>
   bd84a:	4605      	mov	r5, r0
   bd84c:	b948      	cbnz	r0, bd862 <__lshift+0x3e>
   bd84e:	4602      	mov	r2, r0
   bd850:	4b2a      	ldr	r3, [pc, #168]	; (bd8fc <__lshift+0xd8>)
   bd852:	482b      	ldr	r0, [pc, #172]	; (bd900 <__lshift+0xdc>)
   bd854:	f240 11d9 	movw	r1, #473	; 0x1d9
   bd858:	f7f9 fe1a 	bl	b7490 <__assert_func>
   bd85c:	3101      	adds	r1, #1
   bd85e:	005b      	lsls	r3, r3, #1
   bd860:	e7ee      	b.n	bd840 <__lshift+0x1c>
   bd862:	2300      	movs	r3, #0
   bd864:	f100 0114 	add.w	r1, r0, #20
   bd868:	f100 0210 	add.w	r2, r0, #16
   bd86c:	4618      	mov	r0, r3
   bd86e:	4553      	cmp	r3, sl
   bd870:	db37      	blt.n	bd8e2 <__lshift+0xbe>
   bd872:	6920      	ldr	r0, [r4, #16]
   bd874:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bd878:	f104 0314 	add.w	r3, r4, #20
   bd87c:	f019 091f 	ands.w	r9, r9, #31
   bd880:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bd884:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bd888:	d02f      	beq.n	bd8ea <__lshift+0xc6>
   bd88a:	f1c9 0e20 	rsb	lr, r9, #32
   bd88e:	468a      	mov	sl, r1
   bd890:	f04f 0c00 	mov.w	ip, #0
   bd894:	681a      	ldr	r2, [r3, #0]
   bd896:	fa02 f209 	lsl.w	r2, r2, r9
   bd89a:	ea42 020c 	orr.w	r2, r2, ip
   bd89e:	f84a 2b04 	str.w	r2, [sl], #4
   bd8a2:	f853 2b04 	ldr.w	r2, [r3], #4
   bd8a6:	4298      	cmp	r0, r3
   bd8a8:	fa22 fc0e 	lsr.w	ip, r2, lr
   bd8ac:	d8f2      	bhi.n	bd894 <__lshift+0x70>
   bd8ae:	1b03      	subs	r3, r0, r4
   bd8b0:	3b15      	subs	r3, #21
   bd8b2:	f023 0303 	bic.w	r3, r3, #3
   bd8b6:	3304      	adds	r3, #4
   bd8b8:	f104 0215 	add.w	r2, r4, #21
   bd8bc:	4290      	cmp	r0, r2
   bd8be:	bf38      	it	cc
   bd8c0:	2304      	movcc	r3, #4
   bd8c2:	f841 c003 	str.w	ip, [r1, r3]
   bd8c6:	f1bc 0f00 	cmp.w	ip, #0
   bd8ca:	d001      	beq.n	bd8d0 <__lshift+0xac>
   bd8cc:	f108 0602 	add.w	r6, r8, #2
   bd8d0:	3e01      	subs	r6, #1
   bd8d2:	4638      	mov	r0, r7
   bd8d4:	612e      	str	r6, [r5, #16]
   bd8d6:	4621      	mov	r1, r4
   bd8d8:	f7ff fd88 	bl	bd3ec <_Bfree>
   bd8dc:	4628      	mov	r0, r5
   bd8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bd8e2:	f842 0f04 	str.w	r0, [r2, #4]!
   bd8e6:	3301      	adds	r3, #1
   bd8e8:	e7c1      	b.n	bd86e <__lshift+0x4a>
   bd8ea:	3904      	subs	r1, #4
   bd8ec:	f853 2b04 	ldr.w	r2, [r3], #4
   bd8f0:	f841 2f04 	str.w	r2, [r1, #4]!
   bd8f4:	4298      	cmp	r0, r3
   bd8f6:	d8f9      	bhi.n	bd8ec <__lshift+0xc8>
   bd8f8:	e7ea      	b.n	bd8d0 <__lshift+0xac>
   bd8fa:	bf00      	nop
   bd8fc:	000bea81 	.word	0x000bea81
   bd900:	000beb08 	.word	0x000beb08

000bd904 <__mcmp>:
   bd904:	b530      	push	{r4, r5, lr}
   bd906:	6902      	ldr	r2, [r0, #16]
   bd908:	690c      	ldr	r4, [r1, #16]
   bd90a:	1b12      	subs	r2, r2, r4
   bd90c:	d10e      	bne.n	bd92c <__mcmp+0x28>
   bd90e:	f100 0314 	add.w	r3, r0, #20
   bd912:	3114      	adds	r1, #20
   bd914:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bd918:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bd91c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bd920:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bd924:	42a5      	cmp	r5, r4
   bd926:	d003      	beq.n	bd930 <__mcmp+0x2c>
   bd928:	d305      	bcc.n	bd936 <__mcmp+0x32>
   bd92a:	2201      	movs	r2, #1
   bd92c:	4610      	mov	r0, r2
   bd92e:	bd30      	pop	{r4, r5, pc}
   bd930:	4283      	cmp	r3, r0
   bd932:	d3f3      	bcc.n	bd91c <__mcmp+0x18>
   bd934:	e7fa      	b.n	bd92c <__mcmp+0x28>
   bd936:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd93a:	e7f7      	b.n	bd92c <__mcmp+0x28>

000bd93c <__mdiff>:
   bd93c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd940:	460c      	mov	r4, r1
   bd942:	4606      	mov	r6, r0
   bd944:	4611      	mov	r1, r2
   bd946:	4620      	mov	r0, r4
   bd948:	4690      	mov	r8, r2
   bd94a:	f7ff ffdb 	bl	bd904 <__mcmp>
   bd94e:	1e05      	subs	r5, r0, #0
   bd950:	d110      	bne.n	bd974 <__mdiff+0x38>
   bd952:	4629      	mov	r1, r5
   bd954:	4630      	mov	r0, r6
   bd956:	f7ff fd09 	bl	bd36c <_Balloc>
   bd95a:	b930      	cbnz	r0, bd96a <__mdiff+0x2e>
   bd95c:	4b3a      	ldr	r3, [pc, #232]	; (bda48 <__mdiff+0x10c>)
   bd95e:	4602      	mov	r2, r0
   bd960:	f240 2132 	movw	r1, #562	; 0x232
   bd964:	4839      	ldr	r0, [pc, #228]	; (bda4c <__mdiff+0x110>)
   bd966:	f7f9 fd93 	bl	b7490 <__assert_func>
   bd96a:	2301      	movs	r3, #1
   bd96c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bd970:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd974:	bfa4      	itt	ge
   bd976:	4643      	movge	r3, r8
   bd978:	46a0      	movge	r8, r4
   bd97a:	4630      	mov	r0, r6
   bd97c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bd980:	bfa6      	itte	ge
   bd982:	461c      	movge	r4, r3
   bd984:	2500      	movge	r5, #0
   bd986:	2501      	movlt	r5, #1
   bd988:	f7ff fcf0 	bl	bd36c <_Balloc>
   bd98c:	b920      	cbnz	r0, bd998 <__mdiff+0x5c>
   bd98e:	4b2e      	ldr	r3, [pc, #184]	; (bda48 <__mdiff+0x10c>)
   bd990:	4602      	mov	r2, r0
   bd992:	f44f 7110 	mov.w	r1, #576	; 0x240
   bd996:	e7e5      	b.n	bd964 <__mdiff+0x28>
   bd998:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bd99c:	6926      	ldr	r6, [r4, #16]
   bd99e:	60c5      	str	r5, [r0, #12]
   bd9a0:	f104 0914 	add.w	r9, r4, #20
   bd9a4:	f108 0514 	add.w	r5, r8, #20
   bd9a8:	f100 0e14 	add.w	lr, r0, #20
   bd9ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bd9b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bd9b4:	f108 0210 	add.w	r2, r8, #16
   bd9b8:	46f2      	mov	sl, lr
   bd9ba:	2100      	movs	r1, #0
   bd9bc:	f859 3b04 	ldr.w	r3, [r9], #4
   bd9c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bd9c4:	fa1f f883 	uxth.w	r8, r3
   bd9c8:	fa11 f18b 	uxtah	r1, r1, fp
   bd9cc:	0c1b      	lsrs	r3, r3, #16
   bd9ce:	eba1 0808 	sub.w	r8, r1, r8
   bd9d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bd9d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bd9da:	fa1f f888 	uxth.w	r8, r8
   bd9de:	1419      	asrs	r1, r3, #16
   bd9e0:	454e      	cmp	r6, r9
   bd9e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bd9e6:	f84a 3b04 	str.w	r3, [sl], #4
   bd9ea:	d8e7      	bhi.n	bd9bc <__mdiff+0x80>
   bd9ec:	1b33      	subs	r3, r6, r4
   bd9ee:	3b15      	subs	r3, #21
   bd9f0:	f023 0303 	bic.w	r3, r3, #3
   bd9f4:	3304      	adds	r3, #4
   bd9f6:	3415      	adds	r4, #21
   bd9f8:	42a6      	cmp	r6, r4
   bd9fa:	bf38      	it	cc
   bd9fc:	2304      	movcc	r3, #4
   bd9fe:	441d      	add	r5, r3
   bda00:	4473      	add	r3, lr
   bda02:	469e      	mov	lr, r3
   bda04:	462e      	mov	r6, r5
   bda06:	4566      	cmp	r6, ip
   bda08:	d30e      	bcc.n	bda28 <__mdiff+0xec>
   bda0a:	f10c 0203 	add.w	r2, ip, #3
   bda0e:	1b52      	subs	r2, r2, r5
   bda10:	f022 0203 	bic.w	r2, r2, #3
   bda14:	3d03      	subs	r5, #3
   bda16:	45ac      	cmp	ip, r5
   bda18:	bf38      	it	cc
   bda1a:	2200      	movcc	r2, #0
   bda1c:	441a      	add	r2, r3
   bda1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bda22:	b17b      	cbz	r3, bda44 <__mdiff+0x108>
   bda24:	6107      	str	r7, [r0, #16]
   bda26:	e7a3      	b.n	bd970 <__mdiff+0x34>
   bda28:	f856 8b04 	ldr.w	r8, [r6], #4
   bda2c:	fa11 f288 	uxtah	r2, r1, r8
   bda30:	1414      	asrs	r4, r2, #16
   bda32:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bda36:	b292      	uxth	r2, r2
   bda38:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bda3c:	f84e 2b04 	str.w	r2, [lr], #4
   bda40:	1421      	asrs	r1, r4, #16
   bda42:	e7e0      	b.n	bda06 <__mdiff+0xca>
   bda44:	3f01      	subs	r7, #1
   bda46:	e7ea      	b.n	bda1e <__mdiff+0xe2>
   bda48:	000bea81 	.word	0x000bea81
   bda4c:	000beb08 	.word	0x000beb08

000bda50 <__ulp>:
   bda50:	b082      	sub	sp, #8
   bda52:	ed8d 0b00 	vstr	d0, [sp]
   bda56:	9b01      	ldr	r3, [sp, #4]
   bda58:	4912      	ldr	r1, [pc, #72]	; (bdaa4 <__ulp+0x54>)
   bda5a:	4019      	ands	r1, r3
   bda5c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bda60:	2900      	cmp	r1, #0
   bda62:	dd05      	ble.n	bda70 <__ulp+0x20>
   bda64:	2200      	movs	r2, #0
   bda66:	460b      	mov	r3, r1
   bda68:	ec43 2b10 	vmov	d0, r2, r3
   bda6c:	b002      	add	sp, #8
   bda6e:	4770      	bx	lr
   bda70:	4249      	negs	r1, r1
   bda72:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bda76:	ea4f 5021 	mov.w	r0, r1, asr #20
   bda7a:	f04f 0200 	mov.w	r2, #0
   bda7e:	f04f 0300 	mov.w	r3, #0
   bda82:	da04      	bge.n	bda8e <__ulp+0x3e>
   bda84:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bda88:	fa41 f300 	asr.w	r3, r1, r0
   bda8c:	e7ec      	b.n	bda68 <__ulp+0x18>
   bda8e:	f1a0 0114 	sub.w	r1, r0, #20
   bda92:	291e      	cmp	r1, #30
   bda94:	bfda      	itte	le
   bda96:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bda9a:	fa20 f101 	lsrle.w	r1, r0, r1
   bda9e:	2101      	movgt	r1, #1
   bdaa0:	460a      	mov	r2, r1
   bdaa2:	e7e1      	b.n	bda68 <__ulp+0x18>
   bdaa4:	7ff00000 	.word	0x7ff00000

000bdaa8 <__b2d>:
   bdaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bdaaa:	6905      	ldr	r5, [r0, #16]
   bdaac:	f100 0714 	add.w	r7, r0, #20
   bdab0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bdab4:	1f2e      	subs	r6, r5, #4
   bdab6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bdaba:	4620      	mov	r0, r4
   bdabc:	f7ff fd48 	bl	bd550 <__hi0bits>
   bdac0:	f1c0 0320 	rsb	r3, r0, #32
   bdac4:	280a      	cmp	r0, #10
   bdac6:	f8df c07c 	ldr.w	ip, [pc, #124]	; bdb44 <__b2d+0x9c>
   bdaca:	600b      	str	r3, [r1, #0]
   bdacc:	dc14      	bgt.n	bdaf8 <__b2d+0x50>
   bdace:	f1c0 0e0b 	rsb	lr, r0, #11
   bdad2:	fa24 f10e 	lsr.w	r1, r4, lr
   bdad6:	42b7      	cmp	r7, r6
   bdad8:	ea41 030c 	orr.w	r3, r1, ip
   bdadc:	bf34      	ite	cc
   bdade:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bdae2:	2100      	movcs	r1, #0
   bdae4:	3015      	adds	r0, #21
   bdae6:	fa04 f000 	lsl.w	r0, r4, r0
   bdaea:	fa21 f10e 	lsr.w	r1, r1, lr
   bdaee:	ea40 0201 	orr.w	r2, r0, r1
   bdaf2:	ec43 2b10 	vmov	d0, r2, r3
   bdaf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bdaf8:	42b7      	cmp	r7, r6
   bdafa:	bf3a      	itte	cc
   bdafc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bdb00:	f1a5 0608 	subcc.w	r6, r5, #8
   bdb04:	2100      	movcs	r1, #0
   bdb06:	380b      	subs	r0, #11
   bdb08:	d017      	beq.n	bdb3a <__b2d+0x92>
   bdb0a:	f1c0 0c20 	rsb	ip, r0, #32
   bdb0e:	fa04 f500 	lsl.w	r5, r4, r0
   bdb12:	42be      	cmp	r6, r7
   bdb14:	fa21 f40c 	lsr.w	r4, r1, ip
   bdb18:	ea45 0504 	orr.w	r5, r5, r4
   bdb1c:	bf8c      	ite	hi
   bdb1e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bdb22:	2400      	movls	r4, #0
   bdb24:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bdb28:	fa01 f000 	lsl.w	r0, r1, r0
   bdb2c:	fa24 f40c 	lsr.w	r4, r4, ip
   bdb30:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bdb34:	ea40 0204 	orr.w	r2, r0, r4
   bdb38:	e7db      	b.n	bdaf2 <__b2d+0x4a>
   bdb3a:	ea44 030c 	orr.w	r3, r4, ip
   bdb3e:	460a      	mov	r2, r1
   bdb40:	e7d7      	b.n	bdaf2 <__b2d+0x4a>
   bdb42:	bf00      	nop
   bdb44:	3ff00000 	.word	0x3ff00000

000bdb48 <__d2b>:
   bdb48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bdb4c:	4689      	mov	r9, r1
   bdb4e:	2101      	movs	r1, #1
   bdb50:	ec57 6b10 	vmov	r6, r7, d0
   bdb54:	4690      	mov	r8, r2
   bdb56:	f7ff fc09 	bl	bd36c <_Balloc>
   bdb5a:	4604      	mov	r4, r0
   bdb5c:	b930      	cbnz	r0, bdb6c <__d2b+0x24>
   bdb5e:	4602      	mov	r2, r0
   bdb60:	4b25      	ldr	r3, [pc, #148]	; (bdbf8 <__d2b+0xb0>)
   bdb62:	4826      	ldr	r0, [pc, #152]	; (bdbfc <__d2b+0xb4>)
   bdb64:	f240 310a 	movw	r1, #778	; 0x30a
   bdb68:	f7f9 fc92 	bl	b7490 <__assert_func>
   bdb6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bdb70:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bdb74:	bb35      	cbnz	r5, bdbc4 <__d2b+0x7c>
   bdb76:	2e00      	cmp	r6, #0
   bdb78:	9301      	str	r3, [sp, #4]
   bdb7a:	d028      	beq.n	bdbce <__d2b+0x86>
   bdb7c:	4668      	mov	r0, sp
   bdb7e:	9600      	str	r6, [sp, #0]
   bdb80:	f7ff fd06 	bl	bd590 <__lo0bits>
   bdb84:	9900      	ldr	r1, [sp, #0]
   bdb86:	b300      	cbz	r0, bdbca <__d2b+0x82>
   bdb88:	9a01      	ldr	r2, [sp, #4]
   bdb8a:	f1c0 0320 	rsb	r3, r0, #32
   bdb8e:	fa02 f303 	lsl.w	r3, r2, r3
   bdb92:	430b      	orrs	r3, r1
   bdb94:	40c2      	lsrs	r2, r0
   bdb96:	6163      	str	r3, [r4, #20]
   bdb98:	9201      	str	r2, [sp, #4]
   bdb9a:	9b01      	ldr	r3, [sp, #4]
   bdb9c:	61a3      	str	r3, [r4, #24]
   bdb9e:	2b00      	cmp	r3, #0
   bdba0:	bf14      	ite	ne
   bdba2:	2202      	movne	r2, #2
   bdba4:	2201      	moveq	r2, #1
   bdba6:	6122      	str	r2, [r4, #16]
   bdba8:	b1d5      	cbz	r5, bdbe0 <__d2b+0x98>
   bdbaa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bdbae:	4405      	add	r5, r0
   bdbb0:	f8c9 5000 	str.w	r5, [r9]
   bdbb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bdbb8:	f8c8 0000 	str.w	r0, [r8]
   bdbbc:	4620      	mov	r0, r4
   bdbbe:	b003      	add	sp, #12
   bdbc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bdbc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bdbc8:	e7d5      	b.n	bdb76 <__d2b+0x2e>
   bdbca:	6161      	str	r1, [r4, #20]
   bdbcc:	e7e5      	b.n	bdb9a <__d2b+0x52>
   bdbce:	a801      	add	r0, sp, #4
   bdbd0:	f7ff fcde 	bl	bd590 <__lo0bits>
   bdbd4:	9b01      	ldr	r3, [sp, #4]
   bdbd6:	6163      	str	r3, [r4, #20]
   bdbd8:	2201      	movs	r2, #1
   bdbda:	6122      	str	r2, [r4, #16]
   bdbdc:	3020      	adds	r0, #32
   bdbde:	e7e3      	b.n	bdba8 <__d2b+0x60>
   bdbe0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bdbe4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bdbe8:	f8c9 0000 	str.w	r0, [r9]
   bdbec:	6918      	ldr	r0, [r3, #16]
   bdbee:	f7ff fcaf 	bl	bd550 <__hi0bits>
   bdbf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bdbf6:	e7df      	b.n	bdbb8 <__d2b+0x70>
   bdbf8:	000bea81 	.word	0x000bea81
   bdbfc:	000beb08 	.word	0x000beb08

000bdc00 <__ratio>:
   bdc00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdc04:	4688      	mov	r8, r1
   bdc06:	4669      	mov	r1, sp
   bdc08:	4681      	mov	r9, r0
   bdc0a:	f7ff ff4d 	bl	bdaa8 <__b2d>
   bdc0e:	a901      	add	r1, sp, #4
   bdc10:	4640      	mov	r0, r8
   bdc12:	ec55 4b10 	vmov	r4, r5, d0
   bdc16:	f7ff ff47 	bl	bdaa8 <__b2d>
   bdc1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bdc1e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bdc22:	eba3 0c02 	sub.w	ip, r3, r2
   bdc26:	e9dd 3200 	ldrd	r3, r2, [sp]
   bdc2a:	1a9b      	subs	r3, r3, r2
   bdc2c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bdc30:	ec51 0b10 	vmov	r0, r1, d0
   bdc34:	2b00      	cmp	r3, #0
   bdc36:	bfd6      	itet	le
   bdc38:	460a      	movle	r2, r1
   bdc3a:	462a      	movgt	r2, r5
   bdc3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bdc40:	468b      	mov	fp, r1
   bdc42:	462f      	mov	r7, r5
   bdc44:	bfd4      	ite	le
   bdc46:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bdc4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bdc4e:	4620      	mov	r0, r4
   bdc50:	ee10 2a10 	vmov	r2, s0
   bdc54:	465b      	mov	r3, fp
   bdc56:	4639      	mov	r1, r7
   bdc58:	f7fd fdca 	bl	bb7f0 <__aeabi_ddiv>
   bdc5c:	ec41 0b10 	vmov	d0, r0, r1
   bdc60:	b003      	add	sp, #12
   bdc62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bdc66 <__copybits>:
   bdc66:	3901      	subs	r1, #1
   bdc68:	b570      	push	{r4, r5, r6, lr}
   bdc6a:	1149      	asrs	r1, r1, #5
   bdc6c:	6914      	ldr	r4, [r2, #16]
   bdc6e:	3101      	adds	r1, #1
   bdc70:	f102 0314 	add.w	r3, r2, #20
   bdc74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bdc78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bdc7c:	1f05      	subs	r5, r0, #4
   bdc7e:	42a3      	cmp	r3, r4
   bdc80:	d30c      	bcc.n	bdc9c <__copybits+0x36>
   bdc82:	1aa3      	subs	r3, r4, r2
   bdc84:	3b11      	subs	r3, #17
   bdc86:	f023 0303 	bic.w	r3, r3, #3
   bdc8a:	3211      	adds	r2, #17
   bdc8c:	42a2      	cmp	r2, r4
   bdc8e:	bf88      	it	hi
   bdc90:	2300      	movhi	r3, #0
   bdc92:	4418      	add	r0, r3
   bdc94:	2300      	movs	r3, #0
   bdc96:	4288      	cmp	r0, r1
   bdc98:	d305      	bcc.n	bdca6 <__copybits+0x40>
   bdc9a:	bd70      	pop	{r4, r5, r6, pc}
   bdc9c:	f853 6b04 	ldr.w	r6, [r3], #4
   bdca0:	f845 6f04 	str.w	r6, [r5, #4]!
   bdca4:	e7eb      	b.n	bdc7e <__copybits+0x18>
   bdca6:	f840 3b04 	str.w	r3, [r0], #4
   bdcaa:	e7f4      	b.n	bdc96 <__copybits+0x30>

000bdcac <__any_on>:
   bdcac:	f100 0214 	add.w	r2, r0, #20
   bdcb0:	6900      	ldr	r0, [r0, #16]
   bdcb2:	114b      	asrs	r3, r1, #5
   bdcb4:	4298      	cmp	r0, r3
   bdcb6:	b510      	push	{r4, lr}
   bdcb8:	db11      	blt.n	bdcde <__any_on+0x32>
   bdcba:	dd0a      	ble.n	bdcd2 <__any_on+0x26>
   bdcbc:	f011 011f 	ands.w	r1, r1, #31
   bdcc0:	d007      	beq.n	bdcd2 <__any_on+0x26>
   bdcc2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bdcc6:	fa24 f001 	lsr.w	r0, r4, r1
   bdcca:	fa00 f101 	lsl.w	r1, r0, r1
   bdcce:	428c      	cmp	r4, r1
   bdcd0:	d10b      	bne.n	bdcea <__any_on+0x3e>
   bdcd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bdcd6:	4293      	cmp	r3, r2
   bdcd8:	d803      	bhi.n	bdce2 <__any_on+0x36>
   bdcda:	2000      	movs	r0, #0
   bdcdc:	bd10      	pop	{r4, pc}
   bdcde:	4603      	mov	r3, r0
   bdce0:	e7f7      	b.n	bdcd2 <__any_on+0x26>
   bdce2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bdce6:	2900      	cmp	r1, #0
   bdce8:	d0f5      	beq.n	bdcd6 <__any_on+0x2a>
   bdcea:	2001      	movs	r0, #1
   bdcec:	e7f6      	b.n	bdcdc <__any_on+0x30>

000bdcee <_calloc_r>:
   bdcee:	b513      	push	{r0, r1, r4, lr}
   bdcf0:	434a      	muls	r2, r1
   bdcf2:	4611      	mov	r1, r2
   bdcf4:	9201      	str	r2, [sp, #4]
   bdcf6:	f7f9 fbbb 	bl	b7470 <_malloc_r>
   bdcfa:	4604      	mov	r4, r0
   bdcfc:	b118      	cbz	r0, bdd06 <_calloc_r+0x18>
   bdcfe:	9a01      	ldr	r2, [sp, #4]
   bdd00:	2100      	movs	r1, #0
   bdd02:	f7fd ffe0 	bl	bbcc6 <memset>
   bdd06:	4620      	mov	r0, r4
   bdd08:	b002      	add	sp, #8
   bdd0a:	bd10      	pop	{r4, pc}
   bdd0c:	0000      	movs	r0, r0
	...

000bdd10 <nan>:
   bdd10:	ed9f 0b01 	vldr	d0, [pc, #4]	; bdd18 <nan+0x8>
   bdd14:	4770      	bx	lr
   bdd16:	bf00      	nop
   bdd18:	00000000 	.word	0x00000000
   bdd1c:	7ff80000 	.word	0x7ff80000

000bdd20 <__ascii_wctomb>:
   bdd20:	b149      	cbz	r1, bdd36 <__ascii_wctomb+0x16>
   bdd22:	2aff      	cmp	r2, #255	; 0xff
   bdd24:	bf85      	ittet	hi
   bdd26:	238a      	movhi	r3, #138	; 0x8a
   bdd28:	6003      	strhi	r3, [r0, #0]
   bdd2a:	700a      	strbls	r2, [r1, #0]
   bdd2c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bdd30:	bf98      	it	ls
   bdd32:	2001      	movls	r0, #1
   bdd34:	4770      	bx	lr
   bdd36:	4608      	mov	r0, r1
   bdd38:	4770      	bx	lr
	...

000bdd3c <__aeabi_d2lz>:
   bdd3c:	b538      	push	{r3, r4, r5, lr}
   bdd3e:	2200      	movs	r2, #0
   bdd40:	2300      	movs	r3, #0
   bdd42:	4604      	mov	r4, r0
   bdd44:	460d      	mov	r5, r1
   bdd46:	f7fd fe9b 	bl	bba80 <__aeabi_dcmplt>
   bdd4a:	b928      	cbnz	r0, bdd58 <__aeabi_d2lz+0x1c>
   bdd4c:	4620      	mov	r0, r4
   bdd4e:	4629      	mov	r1, r5
   bdd50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bdd54:	f7fd bf54 	b.w	bbc00 <__aeabi_d2ulz>
   bdd58:	4620      	mov	r0, r4
   bdd5a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bdd5e:	f7fd ff4f 	bl	bbc00 <__aeabi_d2ulz>
   bdd62:	4240      	negs	r0, r0
   bdd64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bdd68:	bd38      	pop	{r3, r4, r5, pc}
   bdd6a:	bf00      	nop

000bdd6c <dynalib_user>:
   bdd6c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bdd7c:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   bdd8c:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   bdd9c:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   bddac:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   bddbc:	4f4d 4544 7525 003e 6966 656c 616e 656d     MODE%u>.filename
   bddcc:	4600 6c69 2065 2527 2773 6120 726c 6165     .File '%s' alrea
   bdddc:	7964 6520 6978 7473 2c73 6420 6c65 7465     dy exists, delet
   bddec:	6e69 2067 6e61 2064 766f 7265 7277 7469     ing and overwrit
   bddfc:	6e69 0067 7453 7261 6974 676e 6f20 6666     ing.Starting off
   bde0c:	6f6c 6461 6f20 2066 6966 656c 203a 7325     load of file: %s
   bde1c:	6600 6c69 6365 6d6f 0070 6552 6361 6568     .filecomp.Reache
   bde2c:	2064 6e65 2064 666f 6620 6c69 3a65 2520     d end of file: %
   bde3c:	0073 6966 656c 6f64 656e 5200 6365 6965     s.filedone.Recei
   bde4c:	6576 2064 6f64 656e 6320 6d6f 616d 646e     ved done command
   bde5c:	4200 746f 6431 7461 2500 3230 2564 3230     .Bot1dat.%02d%02
   bde6c:	2564 3430 2564 3230 2564 3230 2564 3230     d%04d%02d%02d%02
   bde7c:	0064 6157 6574 4272 746f 5f00 4f4c 2e47     d.WaterBot._LOG.
   bde8c:	7874 0074 7245 6f72 3a72 6320 756f 646c     txt.Error: could
   bde9c:	6e20 746f 6320 6e6f 656e 7463 7420 206f      not connect to 
   bdeac:	4453 6320 7261 2164 2500 2573 3230 0078     SD card!.%s%02x.
   bdebc:	4343 2542 6864 6177 7600 6365 6f74 3a72     CCB%dhwa.vector:
   bdecc:	5f3a 5f4d 6572 6c61 6f6c 5f63 6e69 6573     :_M_realloc_inse
   bdedc:	7472 4300 6568 6b63 7573 3a6d 2520 3230     rt.Checksum: %02
   bdeec:	2c78 2520 3330 0064 7453 6972 676e 4c20     x, %03d.String L
   bdefc:	6e65 203a 6425 202c 6843 6365 736b 6d75     en: %d, Checksum
   bdf0c:	203a 6425 5b00 4157 4e52 205d 654d 7373     : %d.[WARN] Mess
   bdf1c:	6761 2065 6843 6365 736b 6d75 4420 656f     age Checksum Doe
   bdf2c:	2073 6f4e 2074 614d 6374 2168 203a 7325     s Not Match!: %s
   bdf3c:	5700 7261 696e 676e 202c 6863 6365 736b     .Warning, checks
   bdf4c:	6d75 6420 656f 2073 6f6e 2074 616d 6374     um does not matc
   bdf5c:	0068 4343 3225 6e73 6b61 3325 0073 6361     h.CC%2snak%3s.ac
   bdf6c:	006b 7573 0070 7525 2520 2075 7325 2520     k.sup.%u %u %s %
   bdf7c:	0073 7453 7461 7375 5520 6470 7461 2165     s.Status Update!
   bdf8c:	2300 2323 2323 2323 2323 2323 2323 2323     .###############
   bdf9c:	2323 2323 2323 2323 2323 0023 2323 2020     ###########.##  
   bdfac:	2020 5320 4154 5554 2053 5055 4144 4554        STATUS UPDATE
   bdfbc:	2020 2020 2323 2300 2023 2020 2020 2020         ##.##       
   bdfcc:	6f42 2074 3a23 2520 6431 2020 2020 2020     Bot #: %1d      
   bdfdc:	2323 2300 2023 2020 2020 4220 7461 2074     ##.##      Batt 
   bdfec:	3a25 2520 3330 2064 2020 2020 2323 2300     %: %03d     ##.#
   bdffc:	2023 2020 4c20 4554 2020 4c42 2045 5820     #    LTE  BLE  X
   be00c:	6542 2065 2020 2320 0023 2323 2020 2020     Bee    ##.##    
   be01c:	2520 2064 2020 2520 2064 2020 2020 6425      %d    %d     %d
   be02c:	2020 2020 2320 0023 2323 2020 614c 6974          ##.##  Lati
   be03c:	7574 6564 4c20 6e6f 6967 7574 6564 2020     tude Longitude  
   be04c:	2323 2300 2023 2e25 6636 2520 362e 2066     ##.## %.6f %.6f 
   be05c:	2323 4600 756f 646e 6120 6e20 7765 7720     ##.Found a new w
   be06c:	7461 7265 6220 746f 4920 0044 7525 2520     ater bot ID.%u %
   be07c:	2075 6625 2520 0066 616e 006b 7768 0064     u %f %f.nak.hwd.
   be08c:	7470 0073 6152 5777 6972 6574 742e 7478     pts.RawWrite.txt
   be09c:	4c00 4554 5800 6542 0065 6c42 6575 6f74     .LTE.XBee.Blueto
   be0ac:	746f 0068 654e 2077 7473 6972 676e 6620     oth.New string f
   be0bc:	6f72 206d 7325 203a 5b00 4e49 4f46 205d     rom %s: .[INFO] 
   be0cc:	6552 6563 7669 6465 4c20 4554 4d20 7365     Received LTE Mes
   be0dc:	6173 6567 203a 7325 4e00 7765 4220 2054     sage: %s.New BT 
   be0ec:	6f43 6d6d 6e61 3a64 0020 495b 464e 5d4f     Command: .[INFO]
   be0fc:	5220 6365 6965 6576 2064 4c42 2045 654d      Received BLE Me
   be10c:	7373 6761 3a65 2520 0073 654e 2077 4258     ssage: %s.New XB
   be11c:	6565 4320 6d6f 616d 646e 003a 495b 464e     ee Command:.[INF
   be12c:	5d4f 5220 6365 6965 6576 2064 4258 6565     O] Received XBee
   be13c:	4d20 7365 6173 6567 203a 7325 4300 6e6f      Message: %s.Con
   be14c:	656e 7463 6465 7420 206f 6f42 2074 6425     nected to Bot %d
   be15c:	2f00 4500 7272 726f 202c 6f63 6c75 2064     ./.Error, could 
   be16c:	6f6e 2074 706f 6e65 7220 6f6f 2074 6964     not open root di
   be17c:	6572 7463 726f 2079 6e6f 5320 2044 6143     rectory on SD Ca
   be18c:	6472 202e 7349 6920 2074 6e69 6573 7472     rd. Is it insert
   be19c:	6465 003f 4343 2542 6464 706d 5200 7165     ed?.CCB%ddmp.Req
   be1ac:	6575 7473 6465 5320 2044 6143 6472 4420     uested SD Card D
   be1bc:	7461 2061 7266 6d6f 4220 746f 2520 2064     ata from Bot %d 
   be1cc:	764f 7265 4220 454c 000a 7543 7272 6e65     Over BLE..Curren
   be1dc:	6c74 2079 6f63 6e6e 6365 6574 2064 6f74     tly connected to
   be1ec:	4220 746f 2520 2c66 6e20 6565 2064 6f74      Bot %f, need to
   be1fc:	6320 6e6f 656e 7463 7420 206f 6f42 2074      connect to Bot 
   be20c:	6425 5300 6375 6563 7373 7566 6c6c 2079     %d.Successfully 
   be21c:	6f63 6e6e 6365 6574 2064 6f74 4220 746f     connected to Bot
   be22c:	2520 0064 7453 7261 6974 676e 6620 6c69      %d.Starting fil
   be23c:	2065 7274 6e61 6673 7265 6620 6f72 206d     e transfer from 
   be24c:	6f42 2074 6425 4600 6e69 7369 6568 2064     Bot %d.Finished 
   be25c:	7274 6e61 6673 7265 6972 676e 6620 6c69     transferring fil
   be26c:	2065 7266 6d6f 4220 746f 2520 0064 4343     e from Bot %d.CC
   be27c:	4241 7073 4263 6425 4300 4143 7342 6370     ABspcB%d.CCABspc
   be28c:	424e 4300 4243 6d31 7274 3025 6433 3025     NB.CCB1mtr%03d%0
   be29c:	6433 4d00 746f 726f 5320 6570 6465 203a     3d.Motor Speed: 
   be2ac:	3025 6433 6200 3234 3630 3139 2d30 6364     %03d.b4206910-dc
   be2bc:	6234 352d 3437 2d33 3863 3162 392d 6432     4b-5743-c8b1-92d
   be2cc:	6530 3537 3831 6232 0030 3462 3032 3936     0e75182b0.b42069
   be2dc:	3231 642d 3463 2d62 3735 3334 632d 6238     12-dc4b-5743-c8b
   be2ec:	2d31 3239 3064 3765 3135 3238 3062 6200     1-92d0e75182b0.b
   be2fc:	3234 3630 3139 2d33 6364 6234 352d 3437     4206913-dc4b-574
   be30c:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   be31c:	6232 0030 3462 3032 3936 3431 642d 3463     2b0.b4206914-dc4
   be32c:	2d62 3735 3334 632d 6238 2d31 3239 3064     b-5743-c8b1-92d0
   be33c:	3765 3135 3238 3062 0000 0000               e75182b0....

000be348 <_ZTVN8particle11SPISettingsE>:
	...
   be350:	422d 000b 40b3 000b 40df 000b               -B...@...@..

000be35c <_ZTV5Timer>:
	...
   be364:	42b1 000b 4305 000b 4145 000b               .B...C..EA..

000be370 <_ZTV4File>:
	...
   be378:	40dd 000b 40ed 000b 412d 000b 4127 000b     .@...@..-A..'A..
   be388:	40b5 000b 4107 000b 4101 000b 40fb 000b     .@...A...A...@..
   be398:	7341 6573 7472 6f69 466e 6961 756c 6572     AssertionFailure
   be3a8:	6620 6c61 6573 7700 7269 6e69 2e67 6c62      false.wiring.bl
   be3b8:	0065 7453 7261 2074 6964 6373 766f 7265     e.Start discover
   be3c8:	6e69 2067 6573 7672 6369 7365 002e 7341     ing services..As
   be3d8:	6573 7472 6f69 466e 6961 756c 6572 6820     sertionFailure h
   be3e8:	6c61 625f 656c 735f 6174 6b63 695f 696e     al_ble_stack_ini
   be3f8:	2874 756e 6c6c 7470 2972 3d20 203d 5953     t(nullptr) == SY
   be408:	5453 4d45 455f 5252 524f 4e5f 4e4f 0045     STEM_ERROR_NONE.
   be418:	6550 7265 6420 7665 6369 2065 7369 6d20     Peer device is m
   be428:	7369 6973 676e 0021 6146 6c69 6465 7420     issing!.Failed t
   be438:	206f 6c61 6f6c 6163 6574 6d20 6d65 726f     o allocate memor
   be448:	2179 4600 6961 656c 2064 6f74 6120 7070     y!.Failed to app
   be458:	6e65 2064 6570 7265 4320 6e65 7274 6c61     end peer Central
   be468:	6420 7665 6369 2e65 4300 6e6f 656e 7463      device..Connect
   be478:	6465 6220 2079 6543 746e 6172 206c 6564     ed by Central de
   be488:	6976 6563 002e 6944 6373 6e6f 656e 7463     vice..Disconnect
   be498:	6465 6220 2079 6572 6f6d 6574 6420 7665     ed by remote dev
   be4a8:	6369 2e65 4600 6961 656c 2064 6f74 6120     ice..Failed to a
   be4b8:	7070 6e65 2064 6964 6373 766f 7265 6465     ppend discovered
   be4c8:	7320 7265 6976 6563 002e 7453 7261 2074      service..Start 
   be4d8:	6964 6373 766f 7265 6e69 2067 6863 7261     discovering char
   be4e8:	6361 6574 6972 7473 6369 2073 666f 7320     acteristics of s
   be4f8:	7265 6976 6563 203a 7325 002e 6143 6e6e     ervice: %s..Cann
   be508:	746f 6120 6464 6e20 7765 7020 6565 2072     ot add new peer 
   be518:	6564 6976 6563 002e 654e 2077 6570 6972     device..New peri
   be528:	6870 7265 6c61 6920 2073 6f63 6e6e 6365     pheral is connec
   be538:	6574 2e64 4300 6168 6172 7463 7265 7369     ted..Characteris
   be548:	6974 2063 6964 6373 766f 7265 6465 002e     tic discovered..
   be558:	6944 6373 766f 7265 6465 6320 6168 6172     Discovered chara
   be568:	7463 7265 7369 6974 2763 2073 6168 646e     cteristic's hand
   be578:	656c 6920 2073 6e69 6176 696c 2e64 4600     le is invalid..F
   be588:	6961 656c 2064 6f74 6120 7070 6e65 2064     ailed to append 
   be598:	6964 6373 766f 7265 6465 6320 6168 6172     discovered chara
   be5a8:	7463 7265 7369 6974 2e63 0000               cteristic...

000be5b4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be5bc:	74f5 000b 7559 000b 76cf 000b 7583 000b     .t..Yu...v...u..
   be5cc:	74f9 000b                                   .t..

000be5d0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be5d8:	74f1 000b 7567 000b 74f3 000b 7589 000b     .t..gu...t...u..
   be5e8:	7519 000b                                   .u..

000be5ec <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be5f4:	74ef 000b 7575 000b 81ed 000b 758f 000b     .t..uu.......u..
   be604:	7539 000b                                   9u..

000be608 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   be614:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
   be624:	0000 0000                                   ....

000be628 <_ZTVN5spark13CellularClassE>:
	...
   be630:	9b8f 000b 9b85 000b 9b7b 000b 9b31 000b     ........{...1...
   be640:	9b6f 000b 9b63 000b a331 000b a339 000b     o...c...1...9...
   be650:	9b57 000b 9b4f 000b 9b45 000b 9b3b 000b     W...O...E...;...
   be660:	a369 000b                                   i...

000be664 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be66c:	9bc9 000b 9bcf 000b 9c0d 000b 9bdd 000b     ................
   be67c:	9bcb 000b                                   ....

000be680 <_ZTVN5spark13EthernetClassE>:
	...
   be688:	a157 000b a14d 000b a143 000b a139 000b     W...M...C...9...
   be698:	a12d 000b a121 000b a331 000b a339 000b     -...!...1...9...
   be6a8:	a115 000b a10d 000b a103 000b a0f9 000b     ................
   be6b8:	a369 000b                                   i...

000be6bc <_ZTV7TwoWire>:
	...
   be6c4:	a175 000b a1bf 000b a197 000b a177 000b     u...........w...
   be6d4:	a19f 000b a1a7 000b a1af 000b a1b7 000b     ................

000be6e4 <_ZTV9IPAddress>:
	...
   be6ec:	a201 000b a1f1 000b a1f3 000b 7061 0070     ............app.

000be6fc <_ZTVN5spark12NetworkClassE>:
	...
   be704:	a2f1 000b a2fb 000b a305 000b a30f 000b     ................
   be714:	a319 000b a325 000b a331 000b a339 000b     ....%...1...9...
   be724:	a341 000b a34d 000b a355 000b a35f 000b     A...M...U..._...
   be734:	a369 000b                                   i...

000be738 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   be738:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   be748:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   be758:	6d69 0065                                   ime.

000be75c <_ZTV11USARTSerial>:
	...
   be764:	ab09 000b ab75 000b ab4d 000b a455 000b     ....u...M...U...
   be774:	ab1d 000b ab39 000b ab2b 000b ab47 000b     ....9...+...G...
   be784:	ab0b 000b ab0f 000b                         ........

000be78c <_ZTV9USBSerial>:
	...
   be794:	abc1 000b ac29 000b abff 000b a455 000b     ....).......U...
   be7a4:	abf1 000b abc3 000b abd3 000b ac23 000b     ............#...
   be7b4:	abe3 000b abbb 000b                         ........

000be7bc <_ZSt7nothrow>:
	...

000be7bd <_ZTSSt19_Sp_make_shared_tag>:
   be7bd:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   be7cd:	6572 5f64 6174 0067 0000                     red_tag....

000be7d8 <_ZTISt19_Sp_make_shared_tag>:
   be7d8:	e818 000b e7bd 000b                         ........

000be7e0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   be7e0:	e878 000b e7ec 000b e89c 000b               x...........

000be7ec <_ZTSN10__cxxabiv117__class_type_infoE>:
   be7ec:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   be7fc:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   be80c:	0045 0000                                   E...

000be810 <_ZTVN10__cxxabiv117__class_type_infoE>:
   be810:	0000 0000 e7e0 000b b04d 000b b061 000b     ........M...a...
   be820:	b1f5 000b b1f5 000b b0cb 000b b00d 000b     ................
   be830:	b0b3 000b b075 000b b03f 000b               ....u...?...

000be83c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   be83c:	e878 000b e848 000b e7e0 000b               x...H.......

000be848 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   be848:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   be858:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   be868:	666e 456f 0000 0000                         nfoE....

000be870 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   be870:	0000 0000 e83c 000b b0f5 000b b109 000b     ....<...........
   be880:	b1f5 000b b1f5 000b b0cb 000b b00d 000b     ................
   be890:	b1c9 000b b155 000b b11d 000b               ....U.......

000be89c <_ZTISt9type_info>:
   be89c:	e818 000b e8a4 000b                         ........

000be8a4 <_ZTSSt9type_info>:
   be8a4:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   be8b4:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   be8c4:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   be8d4:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   be8e4:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   be8f4:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   be904:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   be914:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   be924:	6e69 7469 0079 6e61 0000 0000               inity.an....

000be930 <fpi.1>:
   be930:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   be940:	0000 0000                                   ....

000be944 <fpinan.0>:
   be944:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   be954:	0000 0000                                   ....

000be958 <tinytens>:
   be958:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   be968:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   be978:	6f43 64ac 0628 1168                         Co.d(.h.

000be980 <_ctype_>:
   be980:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   be990:	2020 2020 2020 2020 2020 2020 2020 2020                     
   be9a0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   be9b0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   be9c0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   be9d0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   be9e0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   be9f0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bea00:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bea80:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bea90:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   beaa0:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   beab0:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   beac0:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bead0:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   beae0:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   beaf0:	632e 0000                                   .c..

000beaf4 <_C_numeric_locale>:
   beaf4:	e5b1 000b e1d5 000b db84 2003 0043 4f50     ........... C.PO
   beb04:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   beb14:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   beb24:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   beb34:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   beb44:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   beb54:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   beb64:	0000 0000                                   ....

000beb68 <__mprec_bigtens>:
   beb68:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   beb78:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   beb88:	bf3c 7f73 4fdd 7515                         <.s..O.u

000beb90 <__mprec_tens>:
   beb90:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   beba0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bebb0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bebc0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bebd0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bebe0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bebf0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bec00:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bec10:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bec20:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bec30:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bec40:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bec50:	9db4 79d9 7843 44ea                         ...yCx.D

000bec58 <p05.0>:
   bec58:	0005 0000 0019 0000 007d 0000               ........}...

000bec64 <link_const_variable_data_end>:
   bec64:	000b54a1 	.word	0x000b54a1
   bec68:	000b9b21 	.word	0x000b9b21
   bec6c:	000b9b99 	.word	0x000b9b99
   bec70:	000ba161 	.word	0x000ba161
   bec74:	000ba2e1 	.word	0x000ba2e1
   bec78:	000ba441 	.word	0x000ba441
   bec7c:	000ba559 	.word	0x000ba559
   bec80:	000ba951 	.word	0x000ba951
   bec84:	000baaf5 	.word	0x000baaf5

000bec88 <link_constructors_end>:
	...
