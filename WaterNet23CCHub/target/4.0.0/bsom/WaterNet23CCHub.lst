
/Users/matthewpanizza/Downloads/WaterNet23/WaterNet23CCHub/target/4.0.0/bsom/WaterNet23CCHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000eb20  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c2b40  000c2b40  00012b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c2b64  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  2003daa8  000c2b68  0002daa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000b68  2003dc88  2003dc88  0003dc88  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c2d48  000c2d48  00032d48  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c2d70  000c2d70  00032d70  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001e2889  00000000  00000000  00032d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001fadf  00000000  00000000  002155fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0005ad0a  00000000  00000000  002350dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003bc8  00000000  00000000  0028fde6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000ece0  00000000  00000000  002939ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004fcae  00000000  00000000  002a268e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0007336e  00000000  00000000  002f233c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00151e6b  00000000  00000000  003656aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000be80  00000000  00000000  004b7518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
   b4026:	b508      	push	{r3, lr}
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00a ff40 	bl	beeb6 <memcpy>
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00a ff62 	bl	bef06 <memset>
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003daa8 	.word	0x2003daa8
   b404c:	000c2b68 	.word	0x000c2b68
   b4050:	2003dc88 	.word	0x2003dc88
   b4054:	2003dc88 	.word	0x2003dc88
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
   b405c:	b570      	push	{r4, r5, r6, lr}
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
   b4062:	f009 ff19 	bl	bde98 <module_user_init_hook>
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
   b4070:	bd70      	pop	{r4, r5, r6, pc}
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c2b14 	.word	0x000c2b14
   b4080:	000c2b38 	.word	0x000c2b38

000b4084 <module_user_setup>:
   b4084:	f002 be0a 	b.w	b6c9c <setup>

000b4088 <module_user_loop>:
   b4088:	b508      	push	{r3, lr}
   b408a:	f003 f975 	bl	b7378 <loop>
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4092:	f009 beb9 	b.w	bde08 <_post_loop>

000b4096 <_Znwj>:
   b4096:	f006 b9a7 	b.w	ba3e8 <malloc>

000b409a <_Znaj>:
   b409a:	f006 b9a5 	b.w	ba3e8 <malloc>

000b409e <_ZdlPvj>:
   b409e:	f006 b9ab 	b.w	ba3f8 <free>
	...

000b40a4 <__cxa_pure_virtual>:
   b40a4:	b508      	push	{r3, lr}
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f006 f8a8 	bl	ba200 <panic_>
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b9eb1 	.word	0x000b9eb1
   b40b8:	000c1040 	.word	0x000c1040

000b40bc <__cxa_guard_acquire>:
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40cc:	4770      	bx	lr

000b40ce <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40ce:	7c03      	ldrb	r3, [r0, #16]
   b40d0:	f013 0308 	ands.w	r3, r3, #8
   b40d4:	bf1e      	ittt	ne
   b40d6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40d8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40da:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40dc:	2b00      	cmp	r3, #0
  }
   b40de:	bfac      	ite	ge
   b40e0:	4618      	movge	r0, r3
   b40e2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40e6:	4770      	bx	lr

000b40e8 <_Z12actionTimer5v>:
        Serial1.println(outStr);
    }
}

void actionTimer5(){
    postStatus = true;
   b40e8:	4b07      	ldr	r3, [pc, #28]	; (b4108 <_Z12actionTimer5v+0x20>)
   b40ea:	2201      	movs	r2, #1
   b40ec:	701a      	strb	r2, [r3, #0]
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
   b40ee:	4b07      	ldr	r3, [pc, #28]	; (b410c <_Z12actionTimer5v+0x24>)
   b40f0:	e9d3 3100 	ldrd	r3, r1, [r3]
    for(WaterBot &w: WaterBots){
   b40f4:	4299      	cmp	r1, r3
   b40f6:	d006      	beq.n	b4106 <_Z12actionTimer5v+0x1e>
        w.reqActive++;
   b40f8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   b40fc:	3201      	adds	r2, #1
   b40fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b4102:	3350      	adds	r3, #80	; 0x50
      {
	++_M_current;
	return *this;
   b4104:	e7f6      	b.n	b40f4 <_Z12actionTimer5v+0xc>
    }
    //if(!BLE.connected)
}
   b4106:	4770      	bx	lr
   b4108:	2003ded4 	.word	0x2003ded4
   b410c:	2003dce4 	.word	0x2003dce4

000b4110 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b4110:	4770      	bx	lr

000b4112 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4112:	b510      	push	{r4, lr}
  }
   b4114:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4116:	4604      	mov	r4, r0
  }
   b4118:	f7ff ffc1 	bl	b409e <_ZdlPvj>
   b411c:	4620      	mov	r0, r4
   b411e:	bd10      	pop	{r4, pc}

000b4120 <_ZN4FileD0Ev>:
   b4120:	b510      	push	{r4, lr}
   b4122:	2134      	movs	r1, #52	; 0x34
   b4124:	4604      	mov	r4, r0
   b4126:	f7ff ffba 	bl	b409e <_ZdlPvj>
   b412a:	4620      	mov	r0, r4
   b412c:	bd10      	pop	{r4, pc}

000b412e <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b412e:	3010      	adds	r0, #16
   b4130:	f003 bbbe 	b.w	b78b0 <_ZN7FatFile4syncEv>

000b4134 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b4134:	3010      	adds	r0, #16
   b4136:	f003 badc 	b.w	b76f2 <_ZN7FatFile4peekEv>

000b413a <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b413a:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b413c:	2201      	movs	r2, #1
   b413e:	f10d 0107 	add.w	r1, sp, #7
   b4142:	3010      	adds	r0, #16
   b4144:	f003 fa27 	bl	b7596 <_ZN7FatFile4readEPvj>
   b4148:	2801      	cmp	r0, #1
   b414a:	bf0c      	ite	eq
   b414c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b4150:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   b4154:	b003      	add	sp, #12
   b4156:	f85d fb04 	ldr.w	pc, [sp], #4

000b415a <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b415a:	3010      	adds	r0, #16
   b415c:	f003 bc42 	b.w	b79e4 <_ZN7FatFile5writeEPKvj>

000b4160 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b4160:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4162:	2201      	movs	r2, #1
   b4164:	f88d 1007 	strb.w	r1, [sp, #7]
   b4168:	3010      	adds	r0, #16
   b416a:	f10d 0107 	add.w	r1, sp, #7
   b416e:	f003 fc39 	bl	b79e4 <_ZN7FatFile5writeEPKvj>
  }
   b4172:	b003      	add	sp, #12
   b4174:	f85d fb04 	ldr.w	pc, [sp], #4

000b4178 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4178:	6943      	ldr	r3, [r0, #20]
   b417a:	b113      	cbz	r3, b4182 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b417c:	6983      	ldr	r3, [r0, #24]
   b417e:	300c      	adds	r0, #12
   b4180:	4718      	bx	r3
            callback();
        }
    }
   b4182:	4770      	bx	lr

000b4184 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4184:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4186:	2100      	movs	r1, #0
   b4188:	4604      	mov	r4, r0
   b418a:	4608      	mov	r0, r1
   b418c:	f005 fe40 	bl	b9e10 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4190:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4192:	4620      	mov	r0, r4
   b4194:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4196:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4198:	f005 fe52 	bl	b9e40 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b419c:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b419e:	b10c      	cbz	r4, b41a4 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b41a0:	2301      	movs	r3, #1
   b41a2:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b41a4:	2100      	movs	r1, #0
   b41a6:	2001      	movs	r0, #1
   b41a8:	f005 fe32 	bl	b9e10 <os_thread_scheduling>
            }
        }
        if (t) {
   b41ac:	b12c      	cbz	r4, b41ba <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b41ae:	6823      	ldr	r3, [r4, #0]
   b41b0:	4620      	mov	r0, r4
   b41b2:	689b      	ldr	r3, [r3, #8]
   b41b4:	4798      	blx	r3
            t->running = false;
   b41b6:	2300      	movs	r3, #0
   b41b8:	7123      	strb	r3, [r4, #4]
        }
    }
   b41ba:	b002      	add	sp, #8
   b41bc:	bd10      	pop	{r4, pc}
	...

000b41c0 <_Z8jHandlerv>:
    Serial.println("Down trigger");
    #endif
}

//Joystick click handler, used to capture current latitude and longitude and enter sentry mode with those captured points
void jHandler(){
   b41c0:	b510      	push	{r4, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b41c2:	4c09      	ldr	r4, [pc, #36]	; (b41e8 <_Z8jHandlerv+0x28>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41c4:	f005 fe84 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
   b41c8:	6823      	ldr	r3, [r4, #0]
   b41ca:	1ac0      	subs	r0, r0, r3
   b41cc:	2895      	cmp	r0, #149	; 0x95
   b41ce:	d909      	bls.n	b41e4 <_Z8jHandlerv+0x24>
   b41d0:	f005 fe7e 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b41d4:	6020      	str	r0, [r4, #0]
    #ifdef VERBOSE
    Serial.println("Joystick trigger");
   b41d6:	f009 fdcf 	bl	bdd78 <_Z16_fetch_usbserialv>
    #endif
}
   b41da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("Joystick trigger");
   b41de:	4903      	ldr	r1, [pc, #12]	; (b41ec <_Z8jHandlerv+0x2c>)
   b41e0:	f009 b9bd 	b.w	bd55e <_ZN5Print7printlnEPKc>
}
   b41e4:	bd10      	pop	{r4, pc}
   b41e6:	bf00      	nop
   b41e8:	2003dd74 	.word	0x2003dd74
   b41ec:	000c1055 	.word	0x000c1055

000b41f0 <_Z10entHandlerv>:
void entHandler(){
   b41f0:	b538      	push	{r3, r4, r5, lr}
    redrawMenu = true;  
   b41f2:	4b14      	ldr	r3, [pc, #80]	; (b4244 <_Z10entHandlerv+0x54>)
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b41f4:	4d14      	ldr	r5, [pc, #80]	; (b4248 <_Z10entHandlerv+0x58>)
    redrawMenu = true;  
   b41f6:	2401      	movs	r4, #1
   b41f8:	701c      	strb	r4, [r3, #0]
   b41fa:	f005 fe69 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b41fe:	682b      	ldr	r3, [r5, #0]
   b4200:	1ac0      	subs	r0, r0, r3
   b4202:	2895      	cmp	r0, #149	; 0x95
   b4204:	d90e      	bls.n	b4224 <_Z10entHandlerv+0x34>
    Serial.println("Enter trigger");
   b4206:	f009 fdb7 	bl	bdd78 <_Z16_fetch_usbserialv>
   b420a:	4910      	ldr	r1, [pc, #64]	; (b424c <_Z10entHandlerv+0x5c>)
   b420c:	f009 f9a7 	bl	bd55e <_ZN5Print7printlnEPKc>
   b4210:	f005 fe5e 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4214:	4a0e      	ldr	r2, [pc, #56]	; (b4250 <_Z10entHandlerv+0x60>)
    debounceTime = millis();
   b4216:	6028      	str	r0, [r5, #0]
    if(PopUps.size() != 0){
   b4218:	e9d2 1300 	ldrd	r1, r3, [r2]
   b421c:	428b      	cmp	r3, r1
   b421e:	d002      	beq.n	b4226 <_Z10entHandlerv+0x36>
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_nonempty();
	--this->_M_impl._M_finish;
   b4220:	3b49      	subs	r3, #73	; 0x49
   b4222:	6053      	str	r3, [r2, #4]
}
   b4224:	bd38      	pop	{r3, r4, r5, pc}
    selectingBots = !selectingBots;
   b4226:	4a0b      	ldr	r2, [pc, #44]	; (b4254 <_Z10entHandlerv+0x64>)
   b4228:	7813      	ldrb	r3, [r2, #0]
   b422a:	f083 0301 	eor.w	r3, r3, #1
   b422e:	7013      	strb	r3, [r2, #0]
    if(modifiedValue){
   b4230:	4b09      	ldr	r3, [pc, #36]	; (b4258 <_Z10entHandlerv+0x68>)
   b4232:	781a      	ldrb	r2, [r3, #0]
   b4234:	2a00      	cmp	r2, #0
   b4236:	d0f5      	beq.n	b4224 <_Z10entHandlerv+0x34>
        updateControl = true;
   b4238:	4a08      	ldr	r2, [pc, #32]	; (b425c <_Z10entHandlerv+0x6c>)
   b423a:	7014      	strb	r4, [r2, #0]
        modifiedValue = false;
   b423c:	2200      	movs	r2, #0
   b423e:	701a      	strb	r2, [r3, #0]
   b4240:	e7f0      	b.n	b4224 <_Z10entHandlerv+0x34>
   b4242:	bf00      	nop
   b4244:	2003daaa 	.word	0x2003daaa
   b4248:	2003dd74 	.word	0x2003dd74
   b424c:	000c1066 	.word	0x000c1066
   b4250:	2003dcc4 	.word	0x2003dcc4
   b4254:	2003daab 	.word	0x2003daab
   b4258:	2003de07 	.word	0x2003de07
   b425c:	2003e638 	.word	0x2003e638

000b4260 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4260:	2a01      	cmp	r2, #1
   b4262:	d102      	bne.n	b426a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4264:	6001      	str	r1, [r0, #0]
      }
   b4266:	2000      	movs	r0, #0
   b4268:	4770      	bx	lr
	  switch (__op)
   b426a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b426c:	bf04      	itt	eq
   b426e:	680b      	ldreq	r3, [r1, #0]
   b4270:	6003      	streq	r3, [r0, #0]
	      break;
   b4272:	e7f8      	b.n	b4266 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4274 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4274:	6803      	ldr	r3, [r0, #0]
   b4276:	4718      	bx	r3

000b4278 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4278:	b40e      	push	{r1, r2, r3}
   b427a:	b503      	push	{r0, r1, lr}
   b427c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b427e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4280:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4284:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4286:	f009 f992 	bl	bd5ae <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b428a:	b002      	add	sp, #8
   b428c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4290:	b003      	add	sp, #12
   b4292:	4770      	bx	lr

000b4294 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4294:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4296:	4604      	mov	r4, r0
   b4298:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b429a:	7922      	ldrb	r2, [r4, #4]
   b429c:	68a3      	ldr	r3, [r4, #8]
   b429e:	b132      	cbz	r2, b42ae <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b42a0:	b9a3      	cbnz	r3, b42cc <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b42a2:	490b      	ldr	r1, [pc, #44]	; (b42d0 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b42a4:	b002      	add	sp, #8
   b42a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b42aa:	f009 b945 	b.w	bd538 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b42ae:	4a09      	ldr	r2, [pc, #36]	; (b42d4 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b42b0:	7b26      	ldrb	r6, [r4, #12]
   b42b2:	4d09      	ldr	r5, [pc, #36]	; (b42d8 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b42b4:	4909      	ldr	r1, [pc, #36]	; (b42dc <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b42b6:	7b64      	ldrb	r4, [r4, #13]
   b42b8:	2e01      	cmp	r6, #1
   b42ba:	bf18      	it	ne
   b42bc:	4629      	movne	r1, r5
   b42be:	e9cd 1400 	strd	r1, r4, [sp]
   b42c2:	4907      	ldr	r1, [pc, #28]	; (b42e0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b42c4:	f7ff ffd8 	bl	b4278 <_ZN5Print6printfEPKcz>
  }
   b42c8:	b002      	add	sp, #8
   b42ca:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b42cc:	4a05      	ldr	r2, [pc, #20]	; (b42e4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b42ce:	e7ef      	b.n	b42b0 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b42d0:	000c1085 	.word	0x000c1085
   b42d4:	000c1606 	.word	0x000c1606
   b42d8:	000c1081 	.word	0x000c1081
   b42dc:	000c107d 	.word	0x000c107d
   b42e0:	000c109b 	.word	0x000c109b
   b42e4:	000c1074 	.word	0x000c1074

000b42e8 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42e8:	b40e      	push	{r1, r2, r3}
   b42ea:	b503      	push	{r0, r1, lr}
   b42ec:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b42ee:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42f0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b42f4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b42f6:	f009 f95a 	bl	bd5ae <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b42fa:	b002      	add	sp, #8
   b42fc:	f85d eb04 	ldr.w	lr, [sp], #4
   b4300:	b003      	add	sp, #12
   b4302:	4770      	bx	lr

000b4304 <_Z8lHandlerv>:
    redrawMenu = true;                                      //Set redraw flag always so the display is updated with new highlighted item
   b4304:	4b36      	ldr	r3, [pc, #216]	; (b43e0 <_Z8lHandlerv+0xdc>)
void lHandler(){
   b4306:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    redrawMenu = true;                                      //Set redraw flag always so the display is updated with new highlighted item
   b430a:	2201      	movs	r2, #1
    if(millis()-debounceTime < DEBOUNCE_MS) return;         //debounce this button, to make sure only one trigger is registered per press
   b430c:	4c35      	ldr	r4, [pc, #212]	; (b43e4 <_Z8lHandlerv+0xe0>)
    redrawMenu = true;                                      //Set redraw flag always so the display is updated with new highlighted item
   b430e:	701a      	strb	r2, [r3, #0]
   b4310:	f005 fdde 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;         //debounce this button, to make sure only one trigger is registered per press
   b4314:	6823      	ldr	r3, [r4, #0]
   b4316:	1ac0      	subs	r0, r0, r3
   b4318:	2895      	cmp	r0, #149	; 0x95
   b431a:	d95e      	bls.n	b43da <_Z8lHandlerv+0xd6>
    Serial.println("Right trigger");
   b431c:	f009 fd2c 	bl	bdd78 <_Z16_fetch_usbserialv>
   b4320:	4931      	ldr	r1, [pc, #196]	; (b43e8 <_Z8lHandlerv+0xe4>)
   b4322:	f009 f91c 	bl	bd55e <_ZN5Print7printlnEPKc>
   b4326:	f005 fdd3 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
    if(selectingBots){                                      //If enter was hit over a menu item, the item will be open for modification, and this flag indicates true when not modifying items (i.e. selecting which bot to access)
   b432a:	4b30      	ldr	r3, [pc, #192]	; (b43ec <_Z8lHandlerv+0xe8>)
   b432c:	4930      	ldr	r1, [pc, #192]	; (b43f0 <_Z8lHandlerv+0xec>)
   b432e:	781e      	ldrb	r6, [r3, #0]
    debounceTime = millis();
   b4330:	6020      	str	r0, [r4, #0]
    if(selectingBots){                                      //If enter was hit over a menu item, the item will be open for modification, and this flag indicates true when not modifying items (i.e. selecting which bot to access)
   b4332:	b1b6      	cbz	r6, b4362 <_Z8lHandlerv+0x5e>
      : _M_current(__i) { }
   b4334:	680b      	ldr	r3, [r1, #0]
        if(botSelect != WaterBots.front().botNum){          //Check if we are not at the leftmost bot in the list, otherwise we shouldn't try selecting a bot that doesn't exist
   b4336:	4c2f      	ldr	r4, [pc, #188]	; (b43f4 <_Z8lHandlerv+0xf0>)
   b4338:	7898      	ldrb	r0, [r3, #2]
   b433a:	7822      	ldrb	r2, [r4, #0]
   b433c:	4290      	cmp	r0, r2
   b433e:	d04c      	beq.n	b43da <_Z8lHandlerv+0xd6>
   b4340:	684f      	ldr	r7, [r1, #4]
                    ControlledBot = &ws;
   b4342:	f8df c0bc 	ldr.w	ip, [pc, #188]	; b4400 <_Z8lHandlerv+0xfc>
   b4346:	2500      	movs	r5, #0
            for(WaterBot &ws: WaterBots){                   //Loop over the list of bots discovered
   b4348:	429f      	cmp	r7, r3
   b434a:	d044      	beq.n	b43d6 <_Z8lHandlerv+0xd2>
                if(ws.botNum == botSelect){                 //Funky algorithm to find the bot next to the current bot in the list
   b434c:	7899      	ldrb	r1, [r3, #2]
   b434e:	4291      	cmp	r1, r2
                    botSelect = newBotNum;
   b4350:	bf01      	itttt	eq
   b4352:	4602      	moveq	r2, r0
   b4354:	4611      	moveq	r1, r2
                    ControlledBot = &ws;
   b4356:	f8cc 3000 	streq.w	r3, [ip]
   b435a:	4635      	moveq	r5, r6
   b435c:	3350      	adds	r3, #80	; 0x50
	return *this;
   b435e:	4608      	mov	r0, r1
   b4360:	e7f2      	b.n	b4348 <_Z8lHandlerv+0x44>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b4362:	e9d1 4600 	ldrd	r4, r6, [r1]
            if(ws.botNum == botSelect){                     //If we find the one we're looking for in the list
   b4366:	4f23      	ldr	r7, [pc, #140]	; (b43f4 <_Z8lHandlerv+0xf0>)
                MenuItem *curItem = SelectedItem;           //Take the current selected menu item
   b4368:	f8df 8098 	ldr.w	r8, [pc, #152]	; b4404 <_Z8lHandlerv+0x100>
                modifiedValue = true;                       //Indicate to the main loop that some bot has a modified a value, so send out a new control packet
   b436c:	f8df 9098 	ldr.w	r9, [pc, #152]	; b4408 <_Z8lHandlerv+0x104>
        for(WaterBot &ws: WaterBots){                       //Loop over all bots in the list of discovered bots
   b4370:	42a6      	cmp	r6, r4
   b4372:	d032      	beq.n	b43da <_Z8lHandlerv+0xd6>
            if(ws.botNum == botSelect){                     //If we find the one we're looking for in the list
   b4374:	78a2      	ldrb	r2, [r4, #2]
   b4376:	783b      	ldrb	r3, [r7, #0]
   b4378:	429a      	cmp	r2, r3
   b437a:	d121      	bne.n	b43c0 <_Z8lHandlerv+0xbc>
                MenuItem *curItem = SelectedItem;           //Take the current selected menu item
   b437c:	f8d8 5000 	ldr.w	r5, [r8]
                Serial.println(curItem->itemName);
   b4380:	f009 fcfa 	bl	bdd78 <_Z16_fetch_usbserialv>
   b4384:	f105 011e 	add.w	r1, r5, #30
   b4388:	f009 f8e9 	bl	bd55e <_ZN5Print7printlnEPKc>
                if(curItem == nullptr) return;              //Make sure that there is a menu item currently selected
   b438c:	b32d      	cbz	r5, b43da <_Z8lHandlerv+0xd6>
                if(curItem->statOnly) return;               //Some menu items are a status-only display and can't be modified, so do nothing
   b438e:	f895 a018 	ldrb.w	sl, [r5, #24]
   b4392:	f1ba 0f00 	cmp.w	sl, #0
   b4396:	d120      	bne.n	b43da <_Z8lHandlerv+0xd6>
                if(curItem->onOffSetting){                  //If this is an on/off setting, then it must be a boolean, so set it false
   b4398:	7dab      	ldrb	r3, [r5, #22]
   b439a:	b19b      	cbz	r3, b43c4 <_Z8lHandlerv+0xc0>
                    Serial.println("Modified an On/Off Control");
   b439c:	f009 fcec 	bl	bdd78 <_Z16_fetch_usbserialv>
   b43a0:	4915      	ldr	r1, [pc, #84]	; (b43f8 <_Z8lHandlerv+0xf4>)
   b43a2:	f009 f8dc 	bl	bd55e <_ZN5Print7printlnEPKc>
                    Serial.printlnf("Bot: %d, Modified ",ws.botNum);
   b43a6:	f009 fce7 	bl	bdd78 <_Z16_fetch_usbserialv>
   b43aa:	78a2      	ldrb	r2, [r4, #2]
   b43ac:	4913      	ldr	r1, [pc, #76]	; (b43fc <_Z8lHandlerv+0xf8>)
   b43ae:	f7ff ff9b 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
                    ws.*(curItem->MethodPointerBool) = false;   //Modify the boolean in the waterbot class that this menu item modifies, using the pointer to a element of the waterbot class (see the menuitem class for details)
   b43b2:	692b      	ldr	r3, [r5, #16]
   b43b4:	f804 a003 	strb.w	sl, [r4, r3]
                modifiedValue = true;                       //Indicate to the main loop that some bot has a modified a value, so send out a new control packet
   b43b8:	2301      	movs	r3, #1
   b43ba:	f889 3000 	strb.w	r3, [r9]
                ws.updatedControl = true;                   //Indicate that this bot has a modified value
   b43be:	7063      	strb	r3, [r4, #1]
      operator++() _GLIBCXX_NOEXCEPT
   b43c0:	3450      	adds	r4, #80	; 0x50
	return *this;
   b43c2:	e7d5      	b.n	b4370 <_Z8lHandlerv+0x6c>
                    if(ws.*(curItem->MethodPointer) > curItem->minVal) ws.*(curItem->MethodPointer) -= curItem->stepSize;   //Decrement the counter in the waterbot class that this menu item modifies, using the pointer to a element of the waterbot class (see the menuitem class for details)
   b43c4:	68ea      	ldr	r2, [r5, #12]
   b43c6:	8b69      	ldrh	r1, [r5, #26]
   b43c8:	5aa3      	ldrh	r3, [r4, r2]
   b43ca:	4299      	cmp	r1, r3
   b43cc:	bf3e      	ittt	cc
   b43ce:	8aa9      	ldrhcc	r1, [r5, #20]
   b43d0:	1a5b      	subcc	r3, r3, r1
   b43d2:	52a3      	strhcc	r3, [r4, r2]
   b43d4:	e7f0      	b.n	b43b8 <_Z8lHandlerv+0xb4>
   b43d6:	b105      	cbz	r5, b43da <_Z8lHandlerv+0xd6>
   b43d8:	7022      	strb	r2, [r4, #0]
}
   b43da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b43de:	bf00      	nop
   b43e0:	2003daaa 	.word	0x2003daaa
   b43e4:	2003dd74 	.word	0x2003dd74
   b43e8:	000c10b8 	.word	0x000c10b8
   b43ec:	2003daab 	.word	0x2003daab
   b43f0:	2003dce4 	.word	0x2003dce4
   b43f4:	2003dd64 	.word	0x2003dd64
   b43f8:	000c10c6 	.word	0x000c10c6
   b43fc:	000c10e1 	.word	0x000c10e1
   b4400:	2003dca4 	.word	0x2003dca4
   b4404:	2003dcd4 	.word	0x2003dcd4
   b4408:	2003de07 	.word	0x2003de07

000b440c <_Z8rHandlerv>:
void rHandler(){
   b440c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    redrawMenu = true;  
   b4410:	4b33      	ldr	r3, [pc, #204]	; (b44e0 <_Z8rHandlerv+0xd4>)
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4412:	4c34      	ldr	r4, [pc, #208]	; (b44e4 <_Z8rHandlerv+0xd8>)
    redrawMenu = true;  
   b4414:	2201      	movs	r2, #1
   b4416:	701a      	strb	r2, [r3, #0]
   b4418:	f005 fd5a 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b441c:	6823      	ldr	r3, [r4, #0]
   b441e:	1ac0      	subs	r0, r0, r3
   b4420:	2895      	cmp	r0, #149	; 0x95
   b4422:	d91e      	bls.n	b4462 <_Z8rHandlerv+0x56>
   b4424:	f005 fd54 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b4428:	6020      	str	r0, [r4, #0]
    Serial.println("Right trigger");
   b442a:	f009 fca5 	bl	bdd78 <_Z16_fetch_usbserialv>
   b442e:	492e      	ldr	r1, [pc, #184]	; (b44e8 <_Z8rHandlerv+0xdc>)
   b4430:	f009 f895 	bl	bd55e <_ZN5Print7printlnEPKc>
    if(selectingBots){
   b4434:	4b2d      	ldr	r3, [pc, #180]	; (b44ec <_Z8rHandlerv+0xe0>)
   b4436:	781a      	ldrb	r2, [r3, #0]
   b4438:	4b2d      	ldr	r3, [pc, #180]	; (b44f0 <_Z8rHandlerv+0xe4>)
   b443a:	b1c2      	cbz	r2, b446e <_Z8rHandlerv+0x62>
      : _M_current(__i) { }
   b443c:	685c      	ldr	r4, [r3, #4]
        if(botSelect != WaterBots.back().botNum){
   b443e:	4d2d      	ldr	r5, [pc, #180]	; (b44f4 <_Z8rHandlerv+0xe8>)
   b4440:	f814 2c4e 	ldrb.w	r2, [r4, #-78]
   b4444:	7828      	ldrb	r0, [r5, #0]
   b4446:	4282      	cmp	r2, r0
   b4448:	d00b      	beq.n	b4462 <_Z8rHandlerv+0x56>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b444a:	681b      	ldr	r3, [r3, #0]
            bool findCurrent = false;
   b444c:	2200      	movs	r2, #0
            for(WaterBot &ws: WaterBots){
   b444e:	429c      	cmp	r4, r3
   b4450:	461e      	mov	r6, r3
   b4452:	d006      	beq.n	b4462 <_Z8rHandlerv+0x56>
                if(findCurrent){
   b4454:	3350      	adds	r3, #80	; 0x50
                    botSelect = ws.botNum;
   b4456:	f813 1c4e 	ldrb.w	r1, [r3, #-78]
                if(findCurrent){
   b445a:	b122      	cbz	r2, b4466 <_Z8rHandlerv+0x5a>
                    ControlledBot = &ws;
   b445c:	4b26      	ldr	r3, [pc, #152]	; (b44f8 <_Z8rHandlerv+0xec>)
                    botSelect = ws.botNum;
   b445e:	7029      	strb	r1, [r5, #0]
                    ControlledBot = &ws;
   b4460:	601e      	str	r6, [r3, #0]
}
   b4462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if(ws.botNum == botSelect) findCurrent = true;
   b4466:	1a41      	subs	r1, r0, r1
   b4468:	424a      	negs	r2, r1
   b446a:	414a      	adcs	r2, r1
	return *this;
   b446c:	e7ef      	b.n	b444e <_Z8rHandlerv+0x42>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b446e:	e9d3 4600 	ldrd	r4, r6, [r3]
            if(ws.botNum == botSelect){
   b4472:	4f20      	ldr	r7, [pc, #128]	; (b44f4 <_Z8rHandlerv+0xe8>)
                MenuItem *curItem = SelectedItem;
   b4474:	f8df 808c 	ldr.w	r8, [pc, #140]	; b4504 <_Z8rHandlerv+0xf8>
                modifiedValue = true;
   b4478:	f8df 908c 	ldr.w	r9, [pc, #140]	; b4508 <_Z8rHandlerv+0xfc>
        for(WaterBot &ws: WaterBots){
   b447c:	42a6      	cmp	r6, r4
   b447e:	d0f0      	beq.n	b4462 <_Z8rHandlerv+0x56>
            if(ws.botNum == botSelect){
   b4480:	78a2      	ldrb	r2, [r4, #2]
   b4482:	783b      	ldrb	r3, [r7, #0]
   b4484:	429a      	cmp	r2, r3
   b4486:	d120      	bne.n	b44ca <_Z8rHandlerv+0xbe>
                MenuItem *curItem = SelectedItem;
   b4488:	f8d8 5000 	ldr.w	r5, [r8]
                Serial.println(curItem->itemName);
   b448c:	f009 fc74 	bl	bdd78 <_Z16_fetch_usbserialv>
   b4490:	f105 011e 	add.w	r1, r5, #30
   b4494:	f009 f863 	bl	bd55e <_ZN5Print7printlnEPKc>
                if(curItem == nullptr) return;
   b4498:	2d00      	cmp	r5, #0
   b449a:	d0e2      	beq.n	b4462 <_Z8rHandlerv+0x56>
                if(curItem->statOnly) return;
   b449c:	7e2b      	ldrb	r3, [r5, #24]
   b449e:	2b00      	cmp	r3, #0
   b44a0:	d1df      	bne.n	b4462 <_Z8rHandlerv+0x56>
                if(curItem->onOffSetting){
   b44a2:	7dab      	ldrb	r3, [r5, #22]
   b44a4:	b19b      	cbz	r3, b44ce <_Z8rHandlerv+0xc2>
                    Serial.println("Modified an On/Off Control");
   b44a6:	f009 fc67 	bl	bdd78 <_Z16_fetch_usbserialv>
   b44aa:	4914      	ldr	r1, [pc, #80]	; (b44fc <_Z8rHandlerv+0xf0>)
   b44ac:	f009 f857 	bl	bd55e <_ZN5Print7printlnEPKc>
                    Serial.printlnf("Bot: %d, Modified ",ws.botNum);
   b44b0:	f009 fc62 	bl	bdd78 <_Z16_fetch_usbserialv>
   b44b4:	78a2      	ldrb	r2, [r4, #2]
   b44b6:	4912      	ldr	r1, [pc, #72]	; (b4500 <_Z8rHandlerv+0xf4>)
   b44b8:	f7ff ff16 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
                    ws.*(curItem->MethodPointerBool) = true;
   b44bc:	692b      	ldr	r3, [r5, #16]
   b44be:	2201      	movs	r2, #1
   b44c0:	54e2      	strb	r2, [r4, r3]
                modifiedValue = true;
   b44c2:	2301      	movs	r3, #1
   b44c4:	f889 3000 	strb.w	r3, [r9]
                ws.updatedControl = true;
   b44c8:	7063      	strb	r3, [r4, #1]
      operator++() _GLIBCXX_NOEXCEPT
   b44ca:	3450      	adds	r4, #80	; 0x50
	return *this;
   b44cc:	e7d6      	b.n	b447c <_Z8rHandlerv+0x70>
                    if(ws.*(curItem->MethodPointer) < curItem->maxVal) ws.*(curItem->MethodPointer) += curItem->stepSize;
   b44ce:	68ea      	ldr	r2, [r5, #12]
   b44d0:	8ba9      	ldrh	r1, [r5, #28]
   b44d2:	5aa3      	ldrh	r3, [r4, r2]
   b44d4:	4299      	cmp	r1, r3
   b44d6:	bf82      	ittt	hi
   b44d8:	8aa9      	ldrhhi	r1, [r5, #20]
   b44da:	185b      	addhi	r3, r3, r1
   b44dc:	52a3      	strhhi	r3, [r4, r2]
   b44de:	e7f0      	b.n	b44c2 <_Z8rHandlerv+0xb6>
   b44e0:	2003daaa 	.word	0x2003daaa
   b44e4:	2003dd74 	.word	0x2003dd74
   b44e8:	000c10b8 	.word	0x000c10b8
   b44ec:	2003daab 	.word	0x2003daab
   b44f0:	2003dce4 	.word	0x2003dce4
   b44f4:	2003dd64 	.word	0x2003dd64
   b44f8:	2003dca4 	.word	0x2003dca4
   b44fc:	000c10c6 	.word	0x000c10c6
   b4500:	000c10e1 	.word	0x000c10e1
   b4504:	2003dcd4 	.word	0x2003dcd4
   b4508:	2003de07 	.word	0x2003de07

000b450c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b450c:	b510      	push	{r4, lr}
      if (_M_manager)
   b450e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4510:	4604      	mov	r4, r0
      if (_M_manager)
   b4512:	b113      	cbz	r3, b451a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4514:	2203      	movs	r2, #3
   b4516:	4601      	mov	r1, r0
   b4518:	4798      	blx	r3
    }
   b451a:	4620      	mov	r0, r4
   b451c:	bd10      	pop	{r4, pc}
	...

000b4520 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4520:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4522:	4b13      	ldr	r3, [pc, #76]	; (b4570 <_ZN5TimerD1Ev+0x50>)
   b4524:	6003      	str	r3, [r0, #0]
   b4526:	4604      	mov	r4, r0
        if (handle) {
   b4528:	6880      	ldr	r0, [r0, #8]
   b452a:	b1c8      	cbz	r0, b4560 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b452c:	2500      	movs	r5, #0
   b452e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b4532:	e9cd 3500 	strd	r3, r5, [sp]
   b4536:	2102      	movs	r1, #2
   b4538:	462b      	mov	r3, r5
   b453a:	462a      	mov	r2, r5
   b453c:	f005 fc88 	bl	b9e50 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b4540:	68a0      	ldr	r0, [r4, #8]
   b4542:	4629      	mov	r1, r5
   b4544:	f005 fca4 	bl	b9e90 <os_timer_set_id>
            while (running) {
   b4548:	7923      	ldrb	r3, [r4, #4]
   b454a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b454e:	b113      	cbz	r3, b4556 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b4550:	f005 fc56 	bl	b9e00 <os_thread_yield>
            while (running) {
   b4554:	e7f8      	b.n	b4548 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b4556:	68a0      	ldr	r0, [r4, #8]
   b4558:	4629      	mov	r1, r5
   b455a:	f005 fc69 	bl	b9e30 <os_timer_destroy>
            handle = nullptr;
   b455e:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4560:	f104 000c 	add.w	r0, r4, #12
   b4564:	f7ff ffd2 	bl	b450c <_ZNSt14_Function_baseD1Ev>
    }
   b4568:	4620      	mov	r0, r4
   b456a:	b003      	add	sp, #12
   b456c:	bd30      	pop	{r4, r5, pc}
   b456e:	bf00      	nop
   b4570:	000c1860 	.word	0x000c1860

000b4574 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4574:	b510      	push	{r4, lr}
   b4576:	4604      	mov	r4, r0
    }
   b4578:	f7ff ffd2 	bl	b4520 <_ZN5TimerD1Ev>
   b457c:	4620      	mov	r0, r4
   b457e:	211c      	movs	r1, #28
   b4580:	f7ff fd8d 	bl	b409e <_ZdlPvj>
   b4584:	4620      	mov	r0, r4
   b4586:	bd10      	pop	{r4, pc}

000b4588 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b4588:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b458a:	6843      	ldr	r3, [r0, #4]
   b458c:	3b01      	subs	r3, #1
    {
   b458e:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4590:	6043      	str	r3, [r0, #4]
   b4592:	b963      	cbnz	r3, b45ae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b4594:	6803      	ldr	r3, [r0, #0]
   b4596:	689b      	ldr	r3, [r3, #8]
   b4598:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b459a:	68a3      	ldr	r3, [r4, #8]
   b459c:	3b01      	subs	r3, #1
   b459e:	60a3      	str	r3, [r4, #8]
   b45a0:	b92b      	cbnz	r3, b45ae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b45a2:	6823      	ldr	r3, [r4, #0]
   b45a4:	4620      	mov	r0, r4
   b45a6:	68db      	ldr	r3, [r3, #12]
        }
    }
   b45a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b45ac:	4718      	bx	r3
    }
   b45ae:	bd10      	pop	{r4, pc}

000b45b0 <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b45b0:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b45b2:	460a      	mov	r2, r1
   b45b4:	4901      	ldr	r1, [pc, #4]	; (b45bc <_ZN7FatFile4openEPKci+0xc>)
   b45b6:	6809      	ldr	r1, [r1, #0]
   b45b8:	f003 b9b7 	b.w	b792a <_ZN7FatFile4openEPS_PKci>
   b45bc:	2003e640 	.word	0x2003e640

000b45c0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void offloadDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b45c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b45c2:	b095      	sub	sp, #84	; 0x54
   b45c4:	4604      	mov	r4, r0
   b45c6:	af00      	add	r7, sp, #0
   b45c8:	460d      	mov	r5, r1
    memset(fileCommand,0,8 + MAX_FILENAME_LEN);
   b45ca:	221e      	movs	r2, #30
   b45cc:	2100      	movs	r1, #0
   b45ce:	f107 0030 	add.w	r0, r7, #48	; 0x30
   b45d2:	f00a fc98 	bl	bef06 <memset>
    memcpy(fileCommand,data,8);
   b45d6:	6820      	ldr	r0, [r4, #0]
   b45d8:	6861      	ldr	r1, [r4, #4]
   b45da:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b45de:	c303      	stmia	r3!, {r0, r1}
    if(fileCommand[0] == 'f'){
   b45e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   b45e4:	2b66      	cmp	r3, #102	; 0x66
    Serial.println(dataStr);
   b45e6:	466e      	mov	r6, sp
    if(fileCommand[0] == 'f'){
   b45e8:	d168      	bne.n	b46bc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
        if(!strcmp(fileCommand,"filename")){
   b45ea:	493e      	ldr	r1, [pc, #248]	; (b46e4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x124>)
   b45ec:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b45f0:	f00a fd0d 	bl	bf00e <strcmp>
   b45f4:	2800      	cmp	r0, #0
   b45f6:	d13e      	bne.n	b4676 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb6>
    return m_attr;
   b45f8:	483b      	ldr	r0, [pc, #236]	; (b46e8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b45fa:	7c03      	ldrb	r3, [r0, #16]
   b45fc:	b113      	cbz	r3, b4604 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>
   b45fe:	3010      	adds	r0, #16
   b4600:	f003 f98c 	bl	b791c <_ZN7FatFile5closeEv>
            memcpy(fileCommand,data,8 + MAX_FILENAME_LEN);
   b4604:	4623      	mov	r3, r4
   b4606:	f107 0228 	add.w	r2, r7, #40	; 0x28
   b460a:	f104 0520 	add.w	r5, r4, #32
   b460e:	6818      	ldr	r0, [r3, #0]
   b4610:	6859      	ldr	r1, [r3, #4]
   b4612:	4614      	mov	r4, r2
   b4614:	c403      	stmia	r4!, {r0, r1}
   b4616:	3308      	adds	r3, #8
   b4618:	42ab      	cmp	r3, r5
   b461a:	4622      	mov	r2, r4
   b461c:	d1f7      	bne.n	b460e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>
   b461e:	6818      	ldr	r0, [r3, #0]
   b4620:	6020      	str	r0, [r4, #0]
   b4622:	889b      	ldrh	r3, [r3, #4]
   b4624:	80a3      	strh	r3, [r4, #4]
            strncpy(offloadFilename,fileCommand+8,MAX_FILENAME_LEN);
   b4626:	221e      	movs	r2, #30
   b4628:	f107 0130 	add.w	r1, r7, #48	; 0x30
   b462c:	482f      	ldr	r0, [pc, #188]	; (b46ec <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b462e:	f00a fd3a 	bl	bf0a6 <strncpy>
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4632:	2300      	movs	r3, #0
    return file.open(this, path, O_RDONLY);
   b4634:	4a2d      	ldr	r2, [pc, #180]	; (b46ec <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4636:	492e      	ldr	r1, [pc, #184]	; (b46f0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4638:	607b      	str	r3, [r7, #4]
    return file.open(this, path, O_RDONLY);
   b463a:	1d38      	adds	r0, r7, #4
   b463c:	f003 f975 	bl	b792a <_ZN7FatFile4openEPS_PKci>
            if(sd.exists(offloadFilename)){
   b4640:	b148      	cbz	r0, b4656 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x96>
                Serial.printlnf("File '%s' already exists, deleting and overwriting",offloadFilename);
   b4642:	f009 fb99 	bl	bdd78 <_Z16_fetch_usbserialv>
   b4646:	492b      	ldr	r1, [pc, #172]	; (b46f4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
   b4648:	4a28      	ldr	r2, [pc, #160]	; (b46ec <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b464a:	f7ff fe4d 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   b464e:	4927      	ldr	r1, [pc, #156]	; (b46ec <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4650:	4827      	ldr	r0, [pc, #156]	; (b46f0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
   b4652:	f003 f9b6 	bl	b79c2 <_ZN7FatFile6removeEPS_PKc>
            Serial.printlnf("Starting offload of file: %s",offloadFilename);
   b4656:	f009 fb8f 	bl	bdd78 <_Z16_fetch_usbserialv>
   b465a:	4a24      	ldr	r2, [pc, #144]	; (b46ec <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b465c:	4926      	ldr	r1, [pc, #152]	; (b46f8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   b465e:	f7ff fe43 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
            myFile.open(offloadFilename, O_RDWR | O_CREAT | O_AT_END);
   b4662:	4922      	ldr	r1, [pc, #136]	; (b46ec <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4664:	4825      	ldr	r0, [pc, #148]	; (b46fc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b4666:	f244 2202 	movw	r2, #16898	; 0x4202
   b466a:	f7ff ffa1 	bl	b45b0 <_ZN7FatFile4openEPKci>
}
   b466e:	3754      	adds	r7, #84	; 0x54
   b4670:	46b5      	mov	sp, r6
   b4672:	46bd      	mov	sp, r7
   b4674:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(!strcmp(fileCommand,"filecomp")){
   b4676:	4922      	ldr	r1, [pc, #136]	; (b4700 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>)
   b4678:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b467c:	f00a fcc7 	bl	bf00e <strcmp>
   b4680:	b968      	cbnz	r0, b469e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xde>
            Serial.printlnf("Reached end of file: %s",offloadFilename);
   b4682:	f009 fb79 	bl	bdd78 <_Z16_fetch_usbserialv>
   b4686:	4a19      	ldr	r2, [pc, #100]	; (b46ec <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4688:	491e      	ldr	r1, [pc, #120]	; (b4704 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>)
   b468a:	f7ff fe2d 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
    return m_attr;
   b468e:	4b16      	ldr	r3, [pc, #88]	; (b46e8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b4690:	7c1b      	ldrb	r3, [r3, #16]
   b4692:	2b00      	cmp	r3, #0
   b4694:	d0eb      	beq.n	b466e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b4696:	4819      	ldr	r0, [pc, #100]	; (b46fc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b4698:	f003 f940 	bl	b791c <_ZN7FatFile5closeEv>
   b469c:	e7e7      	b.n	b466e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
        else if(!strcmp(fileCommand,"filedone")){
   b469e:	491a      	ldr	r1, [pc, #104]	; (b4708 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
   b46a0:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b46a4:	f00a fcb3 	bl	bf00e <strcmp>
   b46a8:	b940      	cbnz	r0, b46bc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
            Serial.println("Received done command");
   b46aa:	f009 fb65 	bl	bdd78 <_Z16_fetch_usbserialv>
   b46ae:	4917      	ldr	r1, [pc, #92]	; (b470c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>)
   b46b0:	f008 ff55 	bl	bd55e <_ZN5Print7printlnEPKc>
            offloadingDone = true;
   b46b4:	4b16      	ldr	r3, [pc, #88]	; (b4710 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x150>)
   b46b6:	2201      	movs	r2, #1
   b46b8:	701a      	strb	r2, [r3, #0]
   b46ba:	e7e8      	b.n	b468e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xce>
    char dataStr[len];
   b46bc:	1deb      	adds	r3, r5, #7
   b46be:	f023 0307 	bic.w	r3, r3, #7
   b46c2:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(dataStr,data,len);
   b46c6:	462a      	mov	r2, r5
   b46c8:	4621      	mov	r1, r4
   b46ca:	4668      	mov	r0, sp
   b46cc:	f00a fbf3 	bl	beeb6 <memcpy>
    myFile.print(dataStr);
   b46d0:	4669      	mov	r1, sp
   b46d2:	4805      	ldr	r0, [pc, #20]	; (b46e8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
   b46d4:	f008 ff30 	bl	bd538 <_ZN5Print5printEPKc>
    Serial.println(dataStr);
   b46d8:	f009 fb4e 	bl	bdd78 <_Z16_fetch_usbserialv>
   b46dc:	4669      	mov	r1, sp
   b46de:	f008 ff3e 	bl	bd55e <_ZN5Print7printlnEPKc>
   b46e2:	e7c4      	b.n	b466e <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b46e4:	000c10f4 	.word	0x000c10f4
   b46e8:	2003de08 	.word	0x2003de08
   b46ec:	2003de3c 	.word	0x2003de3c
   b46f0:	2003e5e8 	.word	0x2003e5e8
   b46f4:	000c10fd 	.word	0x000c10fd
   b46f8:	000c1130 	.word	0x000c1130
   b46fc:	2003de18 	.word	0x2003de18
   b4700:	000c114d 	.word	0x000c114d
   b4704:	000c1156 	.word	0x000c1156
   b4708:	000c116e 	.word	0x000c116e
   b470c:	000c1177 	.word	0x000c1177
   b4710:	2003de5a 	.word	0x2003de5a

000b4714 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4714:	b530      	push	{r4, r5, lr}
   b4716:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b4718:	4b1b      	ldr	r3, [pc, #108]	; (b4788 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b471a:	9300      	str	r3, [sp, #0]
   b471c:	7913      	ldrb	r3, [r2, #4]
   b471e:	f88d 3004 	strb.w	r3, [sp, #4]
   b4722:	6893      	ldr	r3, [r2, #8]
   b4724:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b4726:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b472a:	8993      	ldrh	r3, [r2, #12]
   b472c:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4730:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b4732:	460a      	mov	r2, r1
   b4734:	466b      	mov	r3, sp
   b4736:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b473a:	4628      	mov	r0, r5
   b473c:	f004 f814 	bl	b8768 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b4740:	b910      	cbnz	r0, b4748 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b4742:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b4744:	b005      	add	sp, #20
   b4746:	bd30      	pop	{r4, r5, pc}
    m_blockDev = blockDev;
   b4748:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b474a:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b474e:	4628      	mov	r0, r5
   b4750:	f003 f8e4 	bl	b791c <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b4754:	2101      	movs	r1, #1
   b4756:	4620      	mov	r0, r4
   b4758:	f003 feb0 	bl	b84bc <_ZN9FatVolume4initEh>
   b475c:	4601      	mov	r1, r0
   b475e:	b168      	cbz	r0, b477c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b4760:	4621      	mov	r1, r4
   b4762:	4628      	mov	r0, r5
   b4764:	f002 ff11 	bl	b758a <_ZN7FatFile8openRootEP9FatVolume>
   b4768:	2800      	cmp	r0, #0
   b476a:	d0ea      	beq.n	b4742 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b476c:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b4770:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4774:	d0e5      	beq.n	b4742 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b4776:	4b05      	ldr	r3, [pc, #20]	; (b478c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b4778:	601d      	str	r5, [r3, #0]
    return true;
   b477a:	e7e3      	b.n	b4744 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b477c:	4620      	mov	r0, r4
   b477e:	f003 fe9d 	bl	b84bc <_ZN9FatVolume4initEh>
   b4782:	2800      	cmp	r0, #0
   b4784:	d1ec      	bne.n	b4760 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b4786:	e7dc      	b.n	b4742 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b4788:	000c184c 	.word	0x000c184c
   b478c:	2003e640 	.word	0x2003e640

000b4790 <_Z10logMessagePKc>:
void logMessage(const char *message){
   b4790:	b538      	push	{r3, r4, r5, lr}
    return m_attr;
   b4792:	4c0d      	ldr	r4, [pc, #52]	; (b47c8 <_Z10logMessagePKc+0x38>)
    if(!logFile.isOpen()){
   b4794:	7c23      	ldrb	r3, [r4, #16]
void logMessage(const char *message){
   b4796:	4605      	mov	r5, r0
    if(!logFile.isOpen()){
   b4798:	b983      	cbnz	r3, b47bc <_Z10logMessagePKc+0x2c>
        logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b479a:	490c      	ldr	r1, [pc, #48]	; (b47cc <_Z10logMessagePKc+0x3c>)
   b479c:	f244 2202 	movw	r2, #16898	; 0x4202
   b47a0:	f104 0010 	add.w	r0, r4, #16
   b47a4:	f7ff ff04 	bl	b45b0 <_ZN7FatFile4openEPKci>
        logFile.println(message);
   b47a8:	4629      	mov	r1, r5
   b47aa:	4620      	mov	r0, r4
   b47ac:	f008 fed7 	bl	bd55e <_ZN5Print7printlnEPKc>
        logFile.close();
   b47b0:	f104 0010 	add.w	r0, r4, #16
}
   b47b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        logFile.close();
   b47b8:	f003 b8b0 	b.w	b791c <_ZN7FatFile5closeEv>
    else logFile.println(message);
   b47bc:	4601      	mov	r1, r0
   b47be:	4620      	mov	r0, r4
}
   b47c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    else logFile.println(message);
   b47c4:	f008 becb 	b.w	bd55e <_ZN5Print7printlnEPKc>
   b47c8:	2003ddd0 	.word	0x2003ddd0
   b47cc:	2003dd78 	.word	0x2003dd78

000b47d0 <_ZN8WaterBotC1Ev>:
class WaterBot{
   b47d0:	b510      	push	{r4, lr}
   b47d2:	f44f 7180 	mov.w	r1, #256	; 0x100
   b47d6:	4c0e      	ldr	r4, [pc, #56]	; (b4810 <_ZN8WaterBotC1Ev+0x40>)
   b47d8:	8001      	strh	r1, [r0, #0]
   b47da:	2200      	movs	r2, #0
   b47dc:	8281      	strh	r1, [r0, #20]
   b47de:	490d      	ldr	r1, [pc, #52]	; (b4814 <_ZN8WaterBotC1Ev+0x44>)
   b47e0:	6181      	str	r1, [r0, #24]
   b47e2:	e9c0 2401 	strd	r2, r4, [r0, #4]
   b47e6:	61c1      	str	r1, [r0, #28]
   b47e8:	2401      	movs	r4, #1
   b47ea:	2100      	movs	r1, #0
   b47ec:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b47f0:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b47f4:	7304      	strb	r4, [r0, #12]
   b47f6:	81c2      	strh	r2, [r0, #14]
   b47f8:	6102      	str	r2, [r0, #16]
   b47fa:	7582      	strb	r2, [r0, #22]
   b47fc:	6201      	str	r1, [r0, #32]
   b47fe:	6241      	str	r1, [r0, #36]	; 0x24
   b4800:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
   b4804:	62c1      	str	r1, [r0, #44]	; 0x2c
   b4806:	6301      	str	r1, [r0, #48]	; 0x30
   b4808:	6341      	str	r1, [r0, #52]	; 0x34
   b480a:	6381      	str	r1, [r0, #56]	; 0x38
   b480c:	63c1      	str	r1, [r0, #60]	; 0x3c
   b480e:	bd10      	pop	{r4, pc}
   b4810:	01010000 	.word	0x01010000
   b4814:	c479c000 	.word	0xc479c000

000b4818 <_Z17processRPiCommandPKch>:
void processRPiCommand(const char *command, uint8_t mode){
   b4818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b481c:	b095      	sub	sp, #84	; 0x54
    if(command[0] == 'R' && command[1] == 'P'){  
   b481e:	7803      	ldrb	r3, [r0, #0]
   b4820:	2b52      	cmp	r3, #82	; 0x52
void processRPiCommand(const char *command, uint8_t mode){
   b4822:	af06      	add	r7, sp, #24
   b4824:	4604      	mov	r4, r0
    if(command[0] == 'R' && command[1] == 'P'){  
   b4826:	d17a      	bne.n	b491e <_Z17processRPiCommandPKch+0x106>
   b4828:	7843      	ldrb	r3, [r0, #1]
   b482a:	2b50      	cmp	r3, #80	; 0x50
   b482c:	d177      	bne.n	b491e <_Z17processRPiCommandPKch+0x106>
        Serial.println("Received Pi command");
   b482e:	f009 faa3 	bl	bdd78 <_Z16_fetch_usbserialv>
   b4832:	4972      	ldr	r1, [pc, #456]	; (b49fc <_Z17processRPiCommandPKch+0x1e4>)
   b4834:	f008 fe93 	bl	bd55e <_ZN5Print7printlnEPKc>
        char dataStr[strlen(command)-8];
   b4838:	4620      	mov	r0, r4
   b483a:	f00a fc18 	bl	bf06e <strlen>
   b483e:	3801      	subs	r0, #1
   b4840:	f020 0007 	bic.w	r0, r0, #7
        }
   b4844:	46e8      	mov	r8, sp
        char dataStr[strlen(command)-8];
   b4846:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b484a:	4620      	mov	r0, r4
   b484c:	f00a fc0f 	bl	bf06e <strlen>
        char dataStr[strlen(command)-8];
   b4850:	f10d 0918 	add.w	r9, sp, #24
        dataStr[strlen(command)-9] = '\0';
   b4854:	4448      	add	r0, r9
   b4856:	2500      	movs	r5, #0
   b4858:	f800 5c09 	strb.w	r5, [r0, #-9]
        checkStr[0] = command[strlen(command)-2];
   b485c:	4620      	mov	r0, r4
        cmdStr[3] = '\0';
   b485e:	74fd      	strb	r5, [r7, #19]
        checkStr[0] = command[strlen(command)-2];
   b4860:	f00a fc05 	bl	bf06e <strlen>
   b4864:	4420      	add	r0, r4
   b4866:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b486a:	733b      	strb	r3, [r7, #12]
        checkStr[1] = command[strlen(command)-1];
   b486c:	4620      	mov	r0, r4
   b486e:	f00a fbfe 	bl	bf06e <strlen>
   b4872:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4874:	4629      	mov	r1, r5
        checkStr[1] = command[strlen(command)-1];
   b4876:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b487a:	737b      	strb	r3, [r7, #13]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b487c:	2210      	movs	r2, #16
   b487e:	f107 000c 	add.w	r0, r7, #12
        checkStr[2] = '\0';
   b4882:	73bd      	strb	r5, [r7, #14]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4884:	f00b fae0 	bl	bfe48 <strtol>
   b4888:	4606      	mov	r6, r0
        Serial.printlnf("Checksum: %02x, %03d, Checkstr: %s",checksum,checksum,command);
   b488a:	b2f6      	uxtb	r6, r6
   b488c:	f009 fa74 	bl	bdd78 <_Z16_fetch_usbserialv>
   b4890:	495b      	ldr	r1, [pc, #364]	; (b4a00 <_Z17processRPiCommandPKch+0x1e8>)
   b4892:	9400      	str	r4, [sp, #0]
   b4894:	4633      	mov	r3, r6
   b4896:	4632      	mov	r2, r6
   b4898:	f7ff fd26 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b489c:	2504      	movs	r5, #4
   b489e:	4620      	mov	r0, r4
   b48a0:	f00a fbe5 	bl	bf06e <strlen>
   b48a4:	3802      	subs	r0, #2
   b48a6:	4285      	cmp	r5, r0
   b48a8:	d212      	bcs.n	b48d0 <_Z17processRPiCommandPKch+0xb8>
            if(i < 7) cmdStr[i-4] = command[i];
   b48aa:	2d06      	cmp	r5, #6
   b48ac:	bf9b      	ittet	ls
   b48ae:	f107 0338 	addls.w	r3, r7, #56	; 0x38
   b48b2:	195b      	addls	r3, r3, r5
            else dataStr[i-7] = command[i];
   b48b4:	eb09 0305 	addhi.w	r3, r9, r5
            if(i < 7) cmdStr[i-4] = command[i];
   b48b8:	5d62      	ldrbls	r2, [r4, r5]
            else dataStr[i-7] = command[i];
   b48ba:	bf8c      	ite	hi
   b48bc:	5d62      	ldrbhi	r2, [r4, r5]
            if(i < 7) cmdStr[i-4] = command[i];
   b48be:	f803 2c2c 	strbls.w	r2, [r3, #-44]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b48c2:	f105 0501 	add.w	r5, r5, #1
            else dataStr[i-7] = command[i];
   b48c6:	bf88      	it	hi
   b48c8:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b48cc:	b2ed      	uxtb	r5, r5
   b48ce:	e7e6      	b.n	b489e <_Z17processRPiCommandPKch+0x86>
        if(checksum != strlen(command)-2){
   b48d0:	42b0      	cmp	r0, r6
   b48d2:	d02e      	beq.n	b4932 <_Z17processRPiCommandPKch+0x11a>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b48d4:	f009 fa50 	bl	bdd78 <_Z16_fetch_usbserialv>
   b48d8:	4605      	mov	r5, r0
   b48da:	4620      	mov	r0, r4
   b48dc:	f00a fbc7 	bl	bf06e <strlen>
   b48e0:	1e82      	subs	r2, r0, #2
   b48e2:	4628      	mov	r0, r5
   b48e4:	4d47      	ldr	r5, [pc, #284]	; (b4a04 <_Z17processRPiCommandPKch+0x1ec>)
   b48e6:	4948      	ldr	r1, [pc, #288]	; (b4a08 <_Z17processRPiCommandPKch+0x1f0>)
   b48e8:	4633      	mov	r3, r6
   b48ea:	f7ff fcfd 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
            if(!logFile.isOpen()){
   b48ee:	7c2b      	ldrb	r3, [r5, #16]
   b48f0:	b9cb      	cbnz	r3, b4926 <_Z17processRPiCommandPKch+0x10e>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b48f2:	4946      	ldr	r1, [pc, #280]	; (b4a0c <_Z17processRPiCommandPKch+0x1f4>)
   b48f4:	f244 2202 	movw	r2, #16898	; 0x4202
   b48f8:	f105 0010 	add.w	r0, r5, #16
   b48fc:	f7ff fe58 	bl	b45b0 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] RPi Message Checksum Does Not Match!: %s",command);
   b4900:	4943      	ldr	r1, [pc, #268]	; (b4a10 <_Z17processRPiCommandPKch+0x1f8>)
   b4902:	4622      	mov	r2, r4
   b4904:	4628      	mov	r0, r5
   b4906:	f7ff fcef 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b490a:	f105 0010 	add.w	r0, r5, #16
   b490e:	f003 f805 	bl	b791c <_ZN7FatFile5closeEv>
            Serial.println("Warning, checksum does not match");
   b4912:	f009 fa31 	bl	bdd78 <_Z16_fetch_usbserialv>
   b4916:	493f      	ldr	r1, [pc, #252]	; (b4a14 <_Z17processRPiCommandPKch+0x1fc>)
   b4918:	f008 fe21 	bl	bd55e <_ZN5Print7printlnEPKc>
            return;
   b491c:	46c5      	mov	sp, r8
}
   b491e:	373c      	adds	r7, #60	; 0x3c
   b4920:	46bd      	mov	sp, r7
   b4922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            else logFile.printlnf("[WARN] RPi Message Checksum Does Not Match!: %s",command);
   b4926:	493a      	ldr	r1, [pc, #232]	; (b4a10 <_Z17processRPiCommandPKch+0x1f8>)
   b4928:	4622      	mov	r2, r4
   b492a:	4628      	mov	r0, r5
   b492c:	f7ff fcdc 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
   b4930:	e7ef      	b.n	b4912 <_Z17processRPiCommandPKch+0xfa>
        if(!strcmp(cmdStr,"ctl")){
   b4932:	4939      	ldr	r1, [pc, #228]	; (b4a18 <_Z17processRPiCommandPKch+0x200>)
   b4934:	f107 0010 	add.w	r0, r7, #16
   b4938:	f00a fb69 	bl	bf00e <strcmp>
   b493c:	4605      	mov	r5, r0
   b493e:	2800      	cmp	r0, #0
   b4940:	d1ec      	bne.n	b491c <_Z17processRPiCommandPKch+0x104>
            sscanf(dataStr,"%s %s %s %d %d %d %d",idStr,GPSLatstr,GPSLonstr,&drivemode,&offloading,&recording,&signal);
   b4942:	1dfb      	adds	r3, r7, #7
   b4944:	9304      	str	r3, [sp, #16]
   b4946:	1dbb      	adds	r3, r7, #6
   b4948:	9303      	str	r3, [sp, #12]
   b494a:	1d3b      	adds	r3, r7, #4
   b494c:	9302      	str	r3, [sp, #8]
   b494e:	f107 062c 	add.w	r6, r7, #44	; 0x2c
   b4952:	1d7b      	adds	r3, r7, #5
   b4954:	4931      	ldr	r1, [pc, #196]	; (b4a1c <_Z17processRPiCommandPKch+0x204>)
   b4956:	9301      	str	r3, [sp, #4]
   b4958:	f107 0214 	add.w	r2, r7, #20
   b495c:	f107 0320 	add.w	r3, r7, #32
   b4960:	9600      	str	r6, [sp, #0]
   b4962:	4648      	mov	r0, r9
   b4964:	f005 fd60 	bl	ba428 <sscanf>
            char botChar[2] = {command[8], '\0'};
   b4968:	7a23      	ldrb	r3, [r4, #8]
   b496a:	723b      	strb	r3, [r7, #8]
            uint8_t targetBot = atoi(botChar);
   b496c:	f107 0008 	add.w	r0, r7, #8
            char botChar[2] = {command[8], '\0'};
   b4970:	727d      	strb	r5, [r7, #9]
            uint8_t targetBot = atoi(botChar);
   b4972:	f00a fa8c 	bl	bee8e <atoi>
   b4976:	b2c5      	uxtb	r5, r0
            Serial.printlnf("Got a command packet from Pi for Bot %d",targetBot);
   b4978:	f009 f9fe 	bl	bdd78 <_Z16_fetch_usbserialv>
   b497c:	4928      	ldr	r1, [pc, #160]	; (b4a20 <_Z17processRPiCommandPKch+0x208>)
   b497e:	462a      	mov	r2, r5
   b4980:	f7ff fcb2 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
      : _M_current(__i) { }
   b4984:	4b27      	ldr	r3, [pc, #156]	; (b4a24 <_Z17processRPiCommandPKch+0x20c>)
   b4986:	e9d3 3100 	ldrd	r3, r1, [r3]
            for(WaterBot &wb: WaterBots){
   b498a:	4299      	cmp	r1, r3
   b498c:	461c      	mov	r4, r3
   b498e:	d0c5      	beq.n	b491c <_Z17processRPiCommandPKch+0x104>
                if(wb.botNum == targetBot){
   b4990:	78a2      	ldrb	r2, [r4, #2]
   b4992:	42aa      	cmp	r2, r5
   b4994:	f103 0350 	add.w	r3, r3, #80	; 0x50
   b4998:	d1f7      	bne.n	b498a <_Z17processRPiCommandPKch+0x172>
                    wb.TargetLat = atof(GPSLatstr);
   b499a:	f107 0020 	add.w	r0, r7, #32
   b499e:	f00a fa73 	bl	bee88 <atof>
   b49a2:	ec51 0b10 	vmov	r0, r1, d0
   b49a6:	f00a f9fb 	bl	beda0 <__aeabi_d2f>
   b49aa:	61a0      	str	r0, [r4, #24]
                    wb.TargetLon = atof(GPSLonstr);
   b49ac:	4630      	mov	r0, r6
   b49ae:	f00a fa6b 	bl	bee88 <atof>
   b49b2:	ec51 0b10 	vmov	r0, r1, d0
   b49b6:	f00a f9f3 	bl	beda0 <__aeabi_d2f>
                    wb.driveMode = drivemode;
   b49ba:	797b      	ldrb	r3, [r7, #5]
   b49bc:	81e3      	strh	r3, [r4, #14]
                    wb.offloading = offloading;
   b49be:	793b      	ldrb	r3, [r7, #4]
                    if(botSelect == wb.botNum) redrawMenu = true;
   b49c0:	4a19      	ldr	r2, [pc, #100]	; (b4a28 <_Z17processRPiCommandPKch+0x210>)
   b49c2:	78a1      	ldrb	r1, [r4, #2]
   b49c4:	7812      	ldrb	r2, [r2, #0]
                    wb.TargetLon = atof(GPSLonstr);
   b49c6:	61e0      	str	r0, [r4, #28]
                    wb.offloading = offloading;
   b49c8:	3b00      	subs	r3, #0
   b49ca:	bf18      	it	ne
   b49cc:	2301      	movne	r3, #1
   b49ce:	75a3      	strb	r3, [r4, #22]
                    wb.dataRecording = recording;
   b49d0:	79bb      	ldrb	r3, [r7, #6]
   b49d2:	3b00      	subs	r3, #0
   b49d4:	bf18      	it	ne
   b49d6:	2301      	movne	r3, #1
   b49d8:	7563      	strb	r3, [r4, #21]
                    wb.signal = signal;
   b49da:	79fb      	ldrb	r3, [r7, #7]
   b49dc:	3b00      	subs	r3, #0
   b49de:	bf18      	it	ne
   b49e0:	2301      	movne	r3, #1
                    if(botSelect == wb.botNum) redrawMenu = true;
   b49e2:	4291      	cmp	r1, r2
   b49e4:	bf08      	it	eq
   b49e6:	4a11      	ldreq	r2, [pc, #68]	; (b4a2c <_Z17processRPiCommandPKch+0x214>)
                    wb.signal = signal;
   b49e8:	7423      	strb	r3, [r4, #16]
                    wb.LTEInitialStatus = true;
   b49ea:	f04f 0301 	mov.w	r3, #1
                    if(botSelect == wb.botNum) redrawMenu = true;
   b49ee:	bf08      	it	eq
   b49f0:	7013      	strbeq	r3, [r2, #0]
                    updateControl = true;
   b49f2:	4a0f      	ldr	r2, [pc, #60]	; (b4a30 <_Z17processRPiCommandPKch+0x218>)
                    wb.LTEInitialStatus = true;
   b49f4:	71a3      	strb	r3, [r4, #6]
                    wb.updatedControl = true;
   b49f6:	7063      	strb	r3, [r4, #1]
                    updateControl = true;
   b49f8:	7013      	strb	r3, [r2, #0]
                    return;
   b49fa:	e78f      	b.n	b491c <_Z17processRPiCommandPKch+0x104>
   b49fc:	000c118d 	.word	0x000c118d
   b4a00:	000c11a1 	.word	0x000c11a1
   b4a04:	2003ddd0 	.word	0x2003ddd0
   b4a08:	000c11c4 	.word	0x000c11c4
   b4a0c:	2003dd78 	.word	0x2003dd78
   b4a10:	000c11e1 	.word	0x000c11e1
   b4a14:	000c1211 	.word	0x000c1211
   b4a18:	000c1232 	.word	0x000c1232
   b4a1c:	000c1236 	.word	0x000c1236
   b4a20:	000c124b 	.word	0x000c124b
   b4a24:	2003dce4 	.word	0x2003dce4
   b4a28:	2003dd64 	.word	0x2003dd64
   b4a2c:	2003daaa 	.word	0x2003daaa
   b4a30:	2003e638 	.word	0x2003e638

000b4a34 <_Z9setupXBeev>:
void setupXBee(){
   b4a34:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b4a36:	f009 fb4b 	bl	be0d0 <_Z22__fetch_global_Serial1v>
   b4a3a:	4908      	ldr	r1, [pc, #32]	; (b4a5c <_Z9setupXBeev+0x28>)
   b4a3c:	f7ff fc1c 	bl	b4278 <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4a40:	2014      	movs	r0, #20
   b4a42:	f005 fd39 	bl	ba4b8 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b4a46:	f009 fb43 	bl	be0d0 <_Z22__fetch_global_Serial1v>
   b4a4a:	4905      	ldr	r1, [pc, #20]	; (b4a60 <_Z9setupXBeev+0x2c>)
   b4a4c:	f7ff fc14 	bl	b4278 <_ZN5Print6printfEPKcz>
}
   b4a50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b4a54:	2014      	movs	r0, #20
   b4a56:	f005 bd2f 	b.w	ba4b8 <delay>
   b4a5a:	bf00      	nop
   b4a5c:	000c1605 	.word	0x000c1605
   b4a60:	000c1083 	.word	0x000c1083

000b4a64 <_Z15RPiStatusUpdatev>:
void RPiStatusUpdate(){
   b4a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4a68:	4b2f      	ldr	r3, [pc, #188]	; (b4b28 <_Z15RPiStatusUpdatev+0xc4>)
            Serial.printlnf("CCRPsupB%d %d %0.6f %0.6f %d %d %d",wb.botNum, wb.battPercent, wb.GPSLat, wb.GPSLon, statusFlags,wb.battPower, wb.panelPower);
   b4a6a:	4f30      	ldr	r7, [pc, #192]	; (b4b2c <_Z15RPiStatusUpdatev+0xc8>)
   b4a6c:	e9d3 4600 	ldrd	r4, r6, [r3]
void RPiStatusUpdate(){
   b4a70:	b08b      	sub	sp, #44	; 0x2c
   b4a72:	3450      	adds	r4, #80	; 0x50
            wb.updatedStatus = false;
   b4a74:	f04f 0800 	mov.w	r8, #0
    for(WaterBot &wb: WaterBots){
   b4a78:	f1a4 0350 	sub.w	r3, r4, #80	; 0x50
   b4a7c:	429e      	cmp	r6, r3
   b4a7e:	d050      	beq.n	b4b22 <_Z15RPiStatusUpdatev+0xbe>
        if(wb.updatedStatus){
   b4a80:	f814 3c50 	ldrb.w	r3, [r4, #-80]
   b4a84:	2b00      	cmp	r3, #0
   b4a86:	d04a      	beq.n	b4b1e <_Z15RPiStatusUpdatev+0xba>
            statusFlags |= wb.BLEAvail << 2;
   b4a88:	f814 5c49 	ldrb.w	r5, [r4, #-73]
            statusFlags |= wb.XBeeAvail << 1;
   b4a8c:	f814 3c47 	ldrb.w	r3, [r4, #-71]
            statusFlags |= wb.BLEAvail << 2;
   b4a90:	00ad      	lsls	r5, r5, #2
   b4a92:	ea45 0343 	orr.w	r3, r5, r3, lsl #1
            statusFlags |= wb.XBeeAvail << 1;
   b4a96:	f814 5c48 	ldrb.w	r5, [r4, #-72]
            statusFlags |= wb.BLEAvail << 2;
   b4a9a:	431d      	orrs	r5, r3
            statusFlags |= wb.offloading << 3;
   b4a9c:	f814 3c3a 	ldrb.w	r3, [r4, #-58]
   b4aa0:	ea45 05c3 	orr.w	r5, r5, r3, lsl #3
            statusFlags |= wb.driveMode << 4;
   b4aa4:	f834 3c42 	ldrh.w	r3, [r4, #-66]
   b4aa8:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
            statusFlags |= wb.lowBatt << 6;
   b4aac:	f814 3c3f 	ldrb.w	r3, [r4, #-63]
   b4ab0:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
            statusFlags |= wb.dataRecording << 7;
   b4ab4:	f814 3c3b 	ldrb.w	r3, [r4, #-59]
   b4ab8:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
            statusFlags |= wb.GPSAvail << 8;
   b4abc:	f814 3c46 	ldrb.w	r3, [r4, #-70]
   b4ac0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
            statusFlags |= wb.CompassAvail << 9;
   b4ac4:	f814 3c45 	ldrb.w	r3, [r4, #-69]
   b4ac8:	ea45 2543 	orr.w	r5, r5, r3, lsl #9
            statusFlags |= wb.SDAvail << 10;
   b4acc:	f814 3c44 	ldrb.w	r3, [r4, #-68]
   b4ad0:	ea45 2583 	orr.w	r5, r5, r3, lsl #10
            Serial.printlnf("CCRPsupB%d %d %0.6f %0.6f %d %d %d",wb.botNum, wb.battPercent, wb.GPSLat, wb.GPSLon, statusFlags,wb.battPower, wb.panelPower);
   b4ad4:	f009 f950 	bl	bdd78 <_Z16_fetch_usbserialv>
   b4ad8:	f834 1c10 	ldrh.w	r1, [r4, #-16]
   b4adc:	f834 3c4c 	ldrh.w	r3, [r4, #-76]
   b4ae0:	f814 2c4e 	ldrb.w	r2, [r4, #-78]
   b4ae4:	9106      	str	r1, [sp, #24]
   b4ae6:	f834 1c0e 	ldrh.w	r1, [r4, #-14]
   b4aea:	9309      	str	r3, [sp, #36]	; 0x24
            statusFlags |= wb.SDAvail << 10;
   b4aec:	b2ad      	uxth	r5, r5
            Serial.printlnf("CCRPsupB%d %d %0.6f %0.6f %d %d %d",wb.botNum, wb.battPercent, wb.GPSLat, wb.GPSLon, statusFlags,wb.battPower, wb.panelPower);
   b4aee:	e9cd 5104 	strd	r5, r1, [sp, #16]
   b4af2:	4681      	mov	r9, r0
   b4af4:	f854 0c2c 	ldr.w	r0, [r4, #-44]
   b4af8:	9208      	str	r2, [sp, #32]
   b4afa:	f009 fe3f 	bl	be77c <__aeabi_f2d>
   b4afe:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4b02:	f854 0c30 	ldr.w	r0, [r4, #-48]
   b4b06:	f009 fe39 	bl	be77c <__aeabi_f2d>
   b4b0a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b4b0e:	e9cd 0100 	strd	r0, r1, [sp]
   b4b12:	4639      	mov	r1, r7
   b4b14:	4648      	mov	r0, r9
   b4b16:	f7ff fbe7 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
            wb.updatedStatus = false;
   b4b1a:	f804 8c50 	strb.w	r8, [r4, #-80]
      operator++() _GLIBCXX_NOEXCEPT
   b4b1e:	3450      	adds	r4, #80	; 0x50
	return *this;
   b4b20:	e7aa      	b.n	b4a78 <_Z15RPiStatusUpdatev+0x14>
}
   b4b22:	b00b      	add	sp, #44	; 0x2c
   b4b24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4b28:	2003dce4 	.word	0x2003dce4
   b4b2c:	000c1273 	.word	0x000c1273

000b4b30 <_Z10RPiHandlerv>:
void RPiHandler(){
   b4b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            if(logMessages){
   b4b34:	4e29      	ldr	r6, [pc, #164]	; (b4bdc <_Z10RPiHandlerv+0xac>)
   b4b36:	4c2a      	ldr	r4, [pc, #168]	; (b4be0 <_Z10RPiHandlerv+0xb0>)
                logFile.printlnf("[INFO] Received Raspberry Pi Message: %s",data);
   b4b38:	f8df 80b0 	ldr.w	r8, [pc, #176]	; b4bec <_Z10RPiHandlerv+0xbc>
void RPiHandler(){
   b4b3c:	b088      	sub	sp, #32
   b4b3e:	af00      	add	r7, sp, #0
    while(Serial.available()){
   b4b40:	f009 f91a 	bl	bdd78 <_Z16_fetch_usbserialv>
   b4b44:	6803      	ldr	r3, [r0, #0]
   b4b46:	691b      	ldr	r3, [r3, #16]
   b4b48:	4798      	blx	r3
   b4b4a:	2800      	cmp	r0, #0
   b4b4c:	d042      	beq.n	b4bd4 <_Z10RPiHandlerv+0xa4>
            String data = Serial.readStringUntil('\n');
   b4b4e:	f009 f913 	bl	bdd78 <_Z16_fetch_usbserialv>
   b4b52:	220a      	movs	r2, #10
   b4b54:	4601      	mov	r1, r0
   b4b56:	4638      	mov	r0, r7
   b4b58:	f008 fe46 	bl	bd7e8 <_ZN6Stream15readStringUntilEc>
            Serial.println(data);
   b4b5c:	f009 f90c 	bl	bdd78 <_Z16_fetch_usbserialv>
   b4b60:	6839      	ldr	r1, [r7, #0]
   b4b62:	f008 fcfc 	bl	bd55e <_ZN5Print7printlnEPKc>
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b4b66:	68ba      	ldr	r2, [r7, #8]
            char buffer[data.length() + 2];
   b4b68:	f102 0309 	add.w	r3, r2, #9
   b4b6c:	f023 0307 	bic.w	r3, r3, #7
    }
   b4b70:	466d      	mov	r5, sp
            char buffer[data.length() + 2];
   b4b72:	ebad 0d03 	sub.w	sp, sp, r3
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   b4b76:	3201      	adds	r2, #1
   b4b78:	2300      	movs	r3, #0
   b4b7a:	4669      	mov	r1, sp
   b4b7c:	4638      	mov	r0, r7
   b4b7e:	f008 ff4f 	bl	bda20 <_ZNK6String8getBytesEPhjj>
            buffer[data.length() + 1] = 0;
   b4b82:	68bb      	ldr	r3, [r7, #8]
   b4b84:	446b      	add	r3, sp
   b4b86:	2200      	movs	r2, #0
   b4b88:	705a      	strb	r2, [r3, #1]
            processRPiCommand(buffer,3);
   b4b8a:	2103      	movs	r1, #3
   b4b8c:	4668      	mov	r0, sp
   b4b8e:	f7ff fe43 	bl	b4818 <_Z17processRPiCommandPKch>
            if(logMessages){
   b4b92:	7833      	ldrb	r3, [r6, #0]
   b4b94:	b1cb      	cbz	r3, b4bca <_Z10RPiHandlerv+0x9a>
                if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4b96:	7c23      	ldrb	r3, [r4, #16]
   b4b98:	b92b      	cbnz	r3, b4ba6 <_Z10RPiHandlerv+0x76>
   b4b9a:	4912      	ldr	r1, [pc, #72]	; (b4be4 <_Z10RPiHandlerv+0xb4>)
   b4b9c:	4812      	ldr	r0, [pc, #72]	; (b4be8 <_Z10RPiHandlerv+0xb8>)
   b4b9e:	f244 2202 	movw	r2, #16898	; 0x4202
   b4ba2:	f7ff fd05 	bl	b45b0 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[INFO] Received Raspberry Pi Message: %s",data);
   b4ba6:	4639      	mov	r1, r7
   b4ba8:	f107 0010 	add.w	r0, r7, #16
   b4bac:	f008 feca 	bl	bd944 <_ZN6StringC1ERKS_>
   b4bb0:	f107 0210 	add.w	r2, r7, #16
   b4bb4:	4641      	mov	r1, r8
   b4bb6:	4620      	mov	r0, r4
   b4bb8:	f7ff fb96 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
   b4bbc:	f107 0010 	add.w	r0, r7, #16
   b4bc0:	f008 fe2a 	bl	bd818 <_ZN6StringD1Ev>
                logFile.close();
   b4bc4:	4808      	ldr	r0, [pc, #32]	; (b4be8 <_Z10RPiHandlerv+0xb8>)
   b4bc6:	f002 fea9 	bl	b791c <_ZN7FatFile5closeEv>
            String data = Serial.readStringUntil('\n');
   b4bca:	4638      	mov	r0, r7
   b4bcc:	f008 fe24 	bl	bd818 <_ZN6StringD1Ev>
   b4bd0:	46ad      	mov	sp, r5
    while(Serial.available()){
   b4bd2:	e7b5      	b.n	b4b40 <_Z10RPiHandlerv+0x10>
}
   b4bd4:	3720      	adds	r7, #32
   b4bd6:	46bd      	mov	sp, r7
   b4bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4bdc:	2003de04 	.word	0x2003de04
   b4be0:	2003ddd0 	.word	0x2003ddd0
   b4be4:	2003dd78 	.word	0x2003dd78
   b4be8:	2003dde0 	.word	0x2003dde0
   b4bec:	000c1296 	.word	0x000c1296

000b4bf0 <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b4bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4bf4:	b084      	sub	sp, #16
   b4bf6:	af02      	add	r7, sp, #8
   b4bf8:	4680      	mov	r8, r0
   b4bfa:	4691      	mov	r9, r2
   b4bfc:	461e      	mov	r6, r3
   b4bfe:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b4c00:	f00a fa35 	bl	bf06e <strlen>
   b4c04:	3009      	adds	r0, #9
   b4c06:	f020 0107 	bic.w	r1, r0, #7
   b4c0a:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4c0e:	4640      	mov	r0, r8
   b4c10:	f00a fa2d 	bl	bf06e <strlen>
    char outStr[strlen(dataOut)+2];
   b4c14:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4c16:	4929      	ldr	r1, [pc, #164]	; (b4cbc <_Z8sendDataPKchbbb+0xcc>)
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b4c18:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4c1c:	4603      	mov	r3, r0
   b4c1e:	4642      	mov	r2, r8
   b4c20:	4620      	mov	r0, r4
   b4c22:	f005 fbf9 	bl	ba418 <sprintf>
    Serial.println(outStr);
   b4c26:	f009 f8a7 	bl	bdd78 <_Z16_fetch_usbserialv>
   b4c2a:	4621      	mov	r1, r4
   b4c2c:	f008 fc97 	bl	bd55e <_ZN5Print7printlnEPKc>
    if(sendLTE || sendMode == 4){
   b4c30:	f1ba 0f00 	cmp.w	sl, #0
   b4c34:	d101      	bne.n	b4c3a <_Z8sendDataPKchbbb+0x4a>
   b4c36:	2d04      	cmp	r5, #4
   b4c38:	d10d      	bne.n	b4c56 <_Z8sendDataPKchbbb+0x66>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4c3a:	4b21      	ldr	r3, [pc, #132]	; (b4cc0 <_Z8sendDataPKchbbb+0xd0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4c3c:	4921      	ldr	r1, [pc, #132]	; (b4cc4 <_Z8sendDataPKchbbb+0xd4>)
   b4c3e:	781b      	ldrb	r3, [r3, #0]
   b4c40:	f88d 3000 	strb.w	r3, [sp]
   b4c44:	4638      	mov	r0, r7
   b4c46:	233c      	movs	r3, #60	; 0x3c
   b4c48:	4622      	mov	r2, r4
   b4c4a:	f008 f905 	bl	bce58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4c4e:	6878      	ldr	r0, [r7, #4]
   b4c50:	b108      	cbz	r0, b4c56 <_Z8sendDataPKchbbb+0x66>
	  _M_pi->_M_release();
   b4c52:	f7ff fc99 	bl	b4588 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b4c56:	f1b9 0f00 	cmp.w	r9, #0
   b4c5a:	d101      	bne.n	b4c60 <_Z8sendDataPKchbbb+0x70>
   b4c5c:	2d01      	cmp	r5, #1
   b4c5e:	d121      	bne.n	b4ca4 <_Z8sendDataPKchbbb+0xb4>
   b4c60:	f006 f944 	bl	baeec <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c64:	f006 f9ef 	bl	bb046 <_ZNK8particle14BleLocalDevice9connectedEv>
   b4c68:	b1e0      	cbz	r0, b4ca4 <_Z8sendDataPKchbbb+0xb4>
        uint8_t txBuf_tmp[strlen(outStr)];
   b4c6a:	4620      	mov	r0, r4
   b4c6c:	f00a f9ff 	bl	bf06e <strlen>
   b4c70:	3007      	adds	r0, #7
   b4c72:	f020 0007 	bic.w	r0, r0, #7
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b4c76:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b4c78:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b4c7c:	4620      	mov	r0, r4
   b4c7e:	f00a f9f6 	bl	bf06e <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b4c82:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b4c86:	4602      	mov	r2, r0
   b4c88:	4621      	mov	r1, r4
   b4c8a:	4648      	mov	r0, r9
   b4c8c:	f00a f913 	bl	beeb6 <memcpy>
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b4c90:	4620      	mov	r0, r4
   b4c92:	f00a f9ec 	bl	bf06e <strlen>
   b4c96:	2300      	movs	r3, #0
   b4c98:	4602      	mov	r2, r0
   b4c9a:	4649      	mov	r1, r9
   b4c9c:	480a      	ldr	r0, [pc, #40]	; (b4cc8 <_Z8sendDataPKchbbb+0xd8>)
   b4c9e:	f005 ffbf 	bl	bac20 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b4ca2:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b4ca4:	b90e      	cbnz	r6, b4caa <_Z8sendDataPKchbbb+0xba>
   b4ca6:	2d02      	cmp	r5, #2
   b4ca8:	d104      	bne.n	b4cb4 <_Z8sendDataPKchbbb+0xc4>
        Serial1.println(outStr);
   b4caa:	f009 fa11 	bl	be0d0 <_Z22__fetch_global_Serial1v>
   b4cae:	4621      	mov	r1, r4
   b4cb0:	f008 fc55 	bl	bd55e <_ZN5Print7printlnEPKc>
}
   b4cb4:	3708      	adds	r7, #8
   b4cb6:	46bd      	mov	sp, r7
   b4cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4cbc:	000c12bf 	.word	0x000c12bf
   b4cc0:	2003dd2c 	.word	0x2003dd2c
   b4cc4:	000c12c6 	.word	0x000c12c6
   b4cc8:	2003dec4 	.word	0x2003dec4

000b4ccc <_Z18manualMotorControlh>:
void manualMotorControl(uint8_t commandedBot){
   b4ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4cd0:	4607      	mov	r7, r0
   b4cd2:	b08b      	sub	sp, #44	; 0x2c
    VRead = 4095-analogRead(JOYV_ADC);
   b4cd4:	2010      	movs	r0, #16
   b4cd6:	f009 f98c 	bl	bdff2 <analogRead>
   b4cda:	f5c0 647f 	rsb	r4, r0, #4080	; 0xff0
   b4cde:	4606      	mov	r6, r0
    HRead = analogRead(JOYH_ADC);
   b4ce0:	2011      	movs	r0, #17
   b4ce2:	f009 f986 	bl	bdff2 <analogRead>
    VRead = 4095-analogRead(JOYV_ADC);
   b4ce6:	340f      	adds	r4, #15
    if(VRead < JOY_MID - JOY_DEADZONE){
   b4ce8:	f240 73dc 	movw	r3, #2012	; 0x7dc
   b4cec:	429c      	cmp	r4, r3
   b4cee:	f300 80b3 	bgt.w	b4e58 <_Z18manualMotorControlh+0x18c>
        VSet = -90 * (VRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4cf2:	f5c6 6302 	rsb	r3, r6, #2080	; 0x820
        if(VSet < -90) VSet = -90;
   b4cf6:	4ab0      	ldr	r2, [pc, #704]	; (b4fb8 <_Z18manualMotorControlh+0x2ec>)
        VSet = -90 * (VRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4cf8:	3302      	adds	r3, #2
   b4cfa:	f06f 0659 	mvn.w	r6, #89	; 0x59
   b4cfe:	4373      	muls	r3, r6
        if(VSet < -90) VSet = -90;
   b4d00:	4293      	cmp	r3, r2
   b4d02:	dc03      	bgt.n	b4d0c <_Z18manualMotorControlh+0x40>
        VSet = -90 * (VRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4d04:	f2a6 7682 	subw	r6, r6, #1922	; 0x782
        VSet = 90 * (VRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4d08:	fb93 f6f6 	sdiv	r6, r3, r6
    if(HRead < JOY_MID - JOY_DEADZONE){
   b4d0c:	f240 73dc 	movw	r3, #2012	; 0x7dc
   b4d10:	4298      	cmp	r0, r3
   b4d12:	f300 80b1 	bgt.w	b4e78 <_Z18manualMotorControlh+0x1ac>
        if(HSet < -90) HSet = -90;
   b4d16:	4ba8      	ldr	r3, [pc, #672]	; (b4fb8 <_Z18manualMotorControlh+0x2ec>)
        HSet = -90 * (HRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4d18:	f2a0 70dd 	subw	r0, r0, #2013	; 0x7dd
   b4d1c:	f06f 0a59 	mvn.w	sl, #89	; 0x59
   b4d20:	fb0a f000 	mul.w	r0, sl, r0
        if(HSet < -90) HSet = -90;
   b4d24:	4298      	cmp	r0, r3
   b4d26:	dc02      	bgt.n	b4d2e <_Z18manualMotorControlh+0x62>
        HSet = -90 * (HRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4d28:	4ba4      	ldr	r3, [pc, #656]	; (b4fbc <_Z18manualMotorControlh+0x2f0>)
   b4d2a:	fb90 faf3 	sdiv	sl, r0, r3
    LSpeed = 90 + VSet/2;
   b4d2e:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
   b4d32:	105b      	asrs	r3, r3, #1
   b4d34:	335a      	adds	r3, #90	; 0x5a
    if(VSet > 0){
   b4d36:	2e00      	cmp	r6, #0
    LSpeed = 90 + VSet/2;
   b4d38:	4ca1      	ldr	r4, [pc, #644]	; (b4fc0 <_Z18manualMotorControlh+0x2f4>)
    if(VSet > 0){
   b4d3a:	4da2      	ldr	r5, [pc, #648]	; (b4fc4 <_Z18manualMotorControlh+0x2f8>)
    LSpeed = 90 + VSet/2;
   b4d3c:	b2da      	uxtb	r2, r3
    if(VSet > 0){
   b4d3e:	f340 80c0 	ble.w	b4ec2 <_Z18manualMotorControlh+0x1f6>
        if(HSet > 0){
   b4d42:	f106 015a 	add.w	r1, r6, #90	; 0x5a
   b4d46:	ea4f 73da 	mov.w	r3, sl, lsr #31
   b4d4a:	f1ba 0f00 	cmp.w	sl, #0
   b4d4e:	b2c9      	uxtb	r1, r1
                RSpeed = 90 - HSet/2 + VSet;
   b4d50:	4453      	add	r3, sl
        if(HSet > 0){
   b4d52:	f340 80a7 	ble.w	b4ea4 <_Z18manualMotorControlh+0x1d8>
            if(HSet > VSet){        //H = 90, V = 0 -> LS = 135, RS = 45, H = 90, V = 90 -> LS = 180, RS = 135
   b4d56:	4556      	cmp	r6, sl
                RSpeed = 90 - HSet/2 + VSet;
   b4d58:	eba1 0363 	sub.w	r3, r1, r3, asr #1
   b4d5c:	b2db      	uxtb	r3, r3
                LSpeed = 90 + HSet/2 + VSet/2;
   b4d5e:	bfba      	itte	lt
   b4d60:	eb02 026a 	addlt.w	r2, r2, sl, asr #1
   b4d64:	7022      	strblt	r2, [r4, #0]
                LSpeed = 90 + VSet;
   b4d66:	7021      	strbge	r1, [r4, #0]
                RSpeed = 90 - HSet/2 + VSet;
   b4d68:	702b      	strb	r3, [r5, #0]
    if(lastLSpeed - LSpeed > LTE_MIN_DIFF || LSpeed - lastLSpeed > LTE_MIN_DIFF){
   b4d6a:	4e97      	ldr	r6, [pc, #604]	; (b4fc8 <_Z18manualMotorControlh+0x2fc>)
   b4d6c:	7821      	ldrb	r1, [r4, #0]
   b4d6e:	7833      	ldrb	r3, [r6, #0]
   b4d70:	1a5a      	subs	r2, r3, r1
   b4d72:	2a03      	cmp	r2, #3
   b4d74:	dc02      	bgt.n	b4d7c <_Z18manualMotorControlh+0xb0>
   b4d76:	1acb      	subs	r3, r1, r3
   b4d78:	2b03      	cmp	r3, #3
   b4d7a:	dd03      	ble.n	b4d84 <_Z18manualMotorControlh+0xb8>
        ctlSpeedDiff = true;
   b4d7c:	4b93      	ldr	r3, [pc, #588]	; (b4fcc <_Z18manualMotorControlh+0x300>)
        lastLSpeed = LSpeed;
   b4d7e:	7031      	strb	r1, [r6, #0]
        ctlSpeedDiff = true;
   b4d80:	2201      	movs	r2, #1
   b4d82:	701a      	strb	r2, [r3, #0]
    if(lastRSpeed - RSpeed > LTE_MIN_DIFF || RSpeed - lastRSpeed > LTE_MIN_DIFF){
   b4d84:	4892      	ldr	r0, [pc, #584]	; (b4fd0 <_Z18manualMotorControlh+0x304>)
   b4d86:	782a      	ldrb	r2, [r5, #0]
   b4d88:	7803      	ldrb	r3, [r0, #0]
   b4d8a:	eba3 0c02 	sub.w	ip, r3, r2
   b4d8e:	f1bc 0f03 	cmp.w	ip, #3
   b4d92:	dc02      	bgt.n	b4d9a <_Z18manualMotorControlh+0xce>
   b4d94:	1ad3      	subs	r3, r2, r3
   b4d96:	2b03      	cmp	r3, #3
   b4d98:	dd05      	ble.n	b4da6 <_Z18manualMotorControlh+0xda>
        ctlSpeedDiff = true;
   b4d9a:	4b8c      	ldr	r3, [pc, #560]	; (b4fcc <_Z18manualMotorControlh+0x300>)
        lastRSpeed = RSpeed;
   b4d9c:	7002      	strb	r2, [r0, #0]
        ctlSpeedDiff = true;
   b4d9e:	f04f 0c01 	mov.w	ip, #1
   b4da2:	f883 c000 	strb.w	ip, [r3]
    if(lastLSpeed != LSpeed && LSpeed == 90){
   b4da6:	7833      	ldrb	r3, [r6, #0]
   b4da8:	428b      	cmp	r3, r1
   b4daa:	d005      	beq.n	b4db8 <_Z18manualMotorControlh+0xec>
   b4dac:	295a      	cmp	r1, #90	; 0x5a
        ctlSpeedDiff = true;
   b4dae:	bf01      	itttt	eq
   b4db0:	4b86      	ldreq	r3, [pc, #536]	; (b4fcc <_Z18manualMotorControlh+0x300>)
        lastLSpeed = LSpeed;
   b4db2:	7031      	strbeq	r1, [r6, #0]
        ctlSpeedDiff = true;
   b4db4:	2101      	moveq	r1, #1
   b4db6:	7019      	strbeq	r1, [r3, #0]
    if(lastRSpeed != RSpeed && RSpeed == 90){
   b4db8:	7803      	ldrb	r3, [r0, #0]
   b4dba:	4293      	cmp	r3, r2
   b4dbc:	d005      	beq.n	b4dca <_Z18manualMotorControlh+0xfe>
   b4dbe:	2a5a      	cmp	r2, #90	; 0x5a
        ctlSpeedDiff = true;
   b4dc0:	bf01      	itttt	eq
   b4dc2:	4b82      	ldreq	r3, [pc, #520]	; (b4fcc <_Z18manualMotorControlh+0x300>)
        lastRSpeed = RSpeed;
   b4dc4:	7002      	strbeq	r2, [r0, #0]
        ctlSpeedDiff = true;
   b4dc6:	2201      	moveq	r2, #1
   b4dc8:	701a      	strbeq	r2, [r3, #0]
    if(!stopActive && ((millis() - rcTime > MTR_UPDATE_TIME) || (ctlSpeedDiff && millis() - rcTime > 75))){
   b4dca:	4b82      	ldr	r3, [pc, #520]	; (b4fd4 <_Z18manualMotorControlh+0x308>)
   b4dcc:	781b      	ldrb	r3, [r3, #0]
   b4dce:	2b00      	cmp	r3, #0
   b4dd0:	f040 80d4 	bne.w	b4f7c <_Z18manualMotorControlh+0x2b0>
   b4dd4:	4e80      	ldr	r6, [pc, #512]	; (b4fd8 <_Z18manualMotorControlh+0x30c>)
   b4dd6:	f8df 81f4 	ldr.w	r8, [pc, #500]	; b4fcc <_Z18manualMotorControlh+0x300>
   b4dda:	f005 f879 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
   b4dde:	6833      	ldr	r3, [r6, #0]
   b4de0:	1ac0      	subs	r0, r0, r3
   b4de2:	f240 23ee 	movw	r3, #750	; 0x2ee
   b4de6:	4298      	cmp	r0, r3
   b4de8:	f240 80be 	bls.w	b4f68 <_Z18manualMotorControlh+0x29c>
        ctlSpeedDiff = false;
   b4dec:	2300      	movs	r3, #0
   b4dee:	f888 3000 	strb.w	r3, [r8]
   b4df2:	f005 f86d 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
      : _M_current(__i) { }
   b4df6:	4b79      	ldr	r3, [pc, #484]	; (b4fdc <_Z18manualMotorControlh+0x310>)
        rcTime = millis();
   b4df8:	6030      	str	r0, [r6, #0]
   b4dfa:	685a      	ldr	r2, [r3, #4]
   b4dfc:	681e      	ldr	r6, [r3, #0]
                sprintf(mtrStr,"CCB%dmtr%03d%03d",commandedBot, LSpeed, RSpeed);
   b4dfe:	f8df a1ec 	ldr.w	sl, [pc, #492]	; b4fec <_Z18manualMotorControlh+0x320>
   b4e02:	9204      	str	r2, [sp, #16]
        for(WaterBot wb: WaterBots){
   b4e04:	9b04      	ldr	r3, [sp, #16]
   b4e06:	42b3      	cmp	r3, r6
   b4e08:	f000 80b8 	beq.w	b4f7c <_Z18manualMotorControlh+0x2b0>
            if(wb.driveMode == 0 && wb.botNum == botSelect){
   b4e0c:	89f3      	ldrh	r3, [r6, #14]
   b4e0e:	bb0b      	cbnz	r3, b4e54 <_Z18manualMotorControlh+0x188>
   b4e10:	4b73      	ldr	r3, [pc, #460]	; (b4fe0 <_Z18manualMotorControlh+0x314>)
   b4e12:	781a      	ldrb	r2, [r3, #0]
   b4e14:	78b3      	ldrb	r3, [r6, #2]
   b4e16:	429a      	cmp	r2, r3
   b4e18:	d11c      	bne.n	b4e54 <_Z18manualMotorControlh+0x188>
        for(WaterBot wb: WaterBots){
   b4e1a:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   b4e1c:	9303      	str	r3, [sp, #12]
                sprintf(mtrStr,"CCB%dmtr%03d%03d",commandedBot, LSpeed, RSpeed);
   b4e1e:	782b      	ldrb	r3, [r5, #0]
        for(WaterBot wb: WaterBots){
   b4e20:	f896 9009 	ldrb.w	r9, [r6, #9]
   b4e24:	f896 b007 	ldrb.w	fp, [r6, #7]
                sprintf(mtrStr,"CCB%dmtr%03d%03d",commandedBot, LSpeed, RSpeed);
   b4e28:	9300      	str	r3, [sp, #0]
   b4e2a:	463a      	mov	r2, r7
   b4e2c:	7823      	ldrb	r3, [r4, #0]
   b4e2e:	4651      	mov	r1, sl
   b4e30:	a806      	add	r0, sp, #24
   b4e32:	f005 faf1 	bl	ba418 <sprintf>
                if(!wb.XBeeAvail && !wb.BLEAvail && ctlSpeedDiff && (millis() - wb.LastMtrTime > MTR_LTE_PERIOD)){
   b4e36:	f089 0201 	eor.w	r2, r9, #1
   b4e3a:	f1b9 0f00 	cmp.w	r9, #0
   b4e3e:	f000 80a0 	beq.w	b4f82 <_Z18manualMotorControlh+0x2b6>
                bool sendMTRLTE = false;
   b4e42:	f04f 0900 	mov.w	r9, #0
                sendData(mtrStr,0,!(wb.XBeeAvail), true, sendMTRLTE);
   b4e46:	f8cd 9000 	str.w	r9, [sp]
   b4e4a:	2301      	movs	r3, #1
   b4e4c:	2100      	movs	r1, #0
   b4e4e:	a806      	add	r0, sp, #24
   b4e50:	f7ff fece 	bl	b4bf0 <_Z8sendDataPKchbbb>
      operator++() _GLIBCXX_NOEXCEPT
   b4e54:	3650      	adds	r6, #80	; 0x50
	return *this;
   b4e56:	e7d5      	b.n	b4e04 <_Z18manualMotorControlh+0x138>
    else if(VRead > JOY_MID + JOY_DEADZONE){
   b4e58:	f640 0223 	movw	r2, #2083	; 0x823
   b4e5c:	4294      	cmp	r4, r2
   b4e5e:	dd09      	ble.n	b4e74 <_Z18manualMotorControlh+0x1a8>
        VSet = 90 * (VRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4e60:	1b9b      	subs	r3, r3, r6
        if(VSet > 90) VSet = 90;
   b4e62:	4a60      	ldr	r2, [pc, #384]	; (b4fe4 <_Z18manualMotorControlh+0x318>)
        VSet = 90 * (VRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4e64:	265a      	movs	r6, #90	; 0x5a
   b4e66:	4373      	muls	r3, r6
        if(VSet > 90) VSet = 90;
   b4e68:	4293      	cmp	r3, r2
   b4e6a:	f73f af4f 	bgt.w	b4d0c <_Z18manualMotorControlh+0x40>
        VSet = 90 * (VRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4e6e:	f240 76db 	movw	r6, #2011	; 0x7db
   b4e72:	e749      	b.n	b4d08 <_Z18manualMotorControlh+0x3c>
        VSet = 0;
   b4e74:	2600      	movs	r6, #0
   b4e76:	e749      	b.n	b4d0c <_Z18manualMotorControlh+0x40>
    else if(HRead > JOY_MID + JOY_DEADZONE){
   b4e78:	f640 0323 	movw	r3, #2083	; 0x823
   b4e7c:	4298      	cmp	r0, r3
   b4e7e:	dd0e      	ble.n	b4e9e <_Z18manualMotorControlh+0x1d2>
        if(HSet > 90) HSet = 90;
   b4e80:	4b58      	ldr	r3, [pc, #352]	; (b4fe4 <_Z18manualMotorControlh+0x318>)
        HSet = 90 * (HRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4e82:	f6a0 0023 	subw	r0, r0, #2083	; 0x823
   b4e86:	f04f 0a5a 	mov.w	sl, #90	; 0x5a
   b4e8a:	fb0a f000 	mul.w	r0, sl, r0
        if(HSet > 90) HSet = 90;
   b4e8e:	4298      	cmp	r0, r3
   b4e90:	f73f af4d 	bgt.w	b4d2e <_Z18manualMotorControlh+0x62>
        HSet = 90 * (HRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4e94:	f240 7adb 	movw	sl, #2011	; 0x7db
   b4e98:	fbb0 fafa 	udiv	sl, r0, sl
   b4e9c:	e747      	b.n	b4d2e <_Z18manualMotorControlh+0x62>
        HSet = 0;
   b4e9e:	f04f 0a00 	mov.w	sl, #0
   b4ea2:	e744      	b.n	b4d2e <_Z18manualMotorControlh+0x62>
            if((0-HSet) > VSet){
   b4ea4:	f1ca 0a00 	rsb	sl, sl, #0
   b4ea8:	45b2      	cmp	sl, r6
                LSpeed = 90 + HSet/2 + VSet;
   b4eaa:	ea4f 0063 	mov.w	r0, r3, asr #1
                RSpeed = 90 - HSet/2 + VSet/2;
   b4eae:	bfc8      	it	gt
   b4eb0:	1a12      	subgt	r2, r2, r0
                LSpeed = 90 + HSet/2 + VSet;
   b4eb2:	eb01 0363 	add.w	r3, r1, r3, asr #1
   b4eb6:	b2db      	uxtb	r3, r3
                RSpeed = 90 - HSet/2 + VSet/2;
   b4eb8:	bfcc      	ite	gt
   b4eba:	702a      	strbgt	r2, [r5, #0]
                RSpeed = 90 + VSet;
   b4ebc:	7029      	strble	r1, [r5, #0]
                LSpeed = 90 + HSet/2;
   b4ebe:	7023      	strb	r3, [r4, #0]
   b4ec0:	e753      	b.n	b4d6a <_Z18manualMotorControlh+0x9e>
        if(HSet > 0){
   b4ec2:	f1ba 0f00 	cmp.w	sl, #0
   b4ec6:	dd28      	ble.n	b4f1a <_Z18manualMotorControlh+0x24e>
            if(HSet > (0-VSet)){        // H = 90, V = 0 -> LS = 135, RS = 45, H = 90, V = -90 -> LS = 0; RS = 45
   b4ec8:	4273      	negs	r3, r6
   b4eca:	4553      	cmp	r3, sl
                LSpeed = 90 + HSet/2 + VSet/2;
   b4ecc:	ea4f 006a 	mov.w	r0, sl, asr #1
            if(HSet > (0-VSet)){        // H = 90, V = 0 -> LS = 135, RS = 45, H = 90, V = -90 -> LS = 0; RS = 45
   b4ed0:	da1d      	bge.n	b4f0e <_Z18manualMotorControlh+0x242>
                LSpeed = (90 + HSet/2 + VSet*1.5 );
   b4ed2:	305a      	adds	r0, #90	; 0x5a
   b4ed4:	f009 fc40 	bl	be758 <__aeabi_i2d>
   b4ed8:	4680      	mov	r8, r0
   b4eda:	4630      	mov	r0, r6
   b4edc:	4689      	mov	r9, r1
   b4ede:	f009 fc3b 	bl	be758 <__aeabi_i2d>
   b4ee2:	4b41      	ldr	r3, [pc, #260]	; (b4fe8 <_Z18manualMotorControlh+0x31c>)
   b4ee4:	2200      	movs	r2, #0
   b4ee6:	f009 fca1 	bl	be82c <__aeabi_dmul>
   b4eea:	4602      	mov	r2, r0
   b4eec:	460b      	mov	r3, r1
   b4eee:	4640      	mov	r0, r8
   b4ef0:	4649      	mov	r1, r9
   b4ef2:	f009 fae5 	bl	be4c0 <__adddf3>
   b4ef6:	f009 ff33 	bl	bed60 <__aeabi_d2uiz>
                RSpeed = (90 - HSet/2);      
   b4efa:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   b4efe:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   b4f02:	f1ca 0a5a 	rsb	sl, sl, #90	; 0x5a
                LSpeed = (90 + HSet/2 + VSet*1.5 );
   b4f06:	7020      	strb	r0, [r4, #0]
                RSpeed = (90 - HSet/2);      
   b4f08:	f885 a000 	strb.w	sl, [r5]
   b4f0c:	e72d      	b.n	b4d6a <_Z18manualMotorControlh+0x9e>
                LSpeed = 90 + VSet;
   b4f0e:	365a      	adds	r6, #90	; 0x5a
   b4f10:	b2f6      	uxtb	r6, r6
   b4f12:	7026      	strb	r6, [r4, #0]
                RSpeed = 90 + HSet/2 + VSet;
   b4f14:	4406      	add	r6, r0
   b4f16:	702e      	strb	r6, [r5, #0]
   b4f18:	e727      	b.n	b4d6a <_Z18manualMotorControlh+0x9e>
                RSpeed = 90 - HSet/2 + VSet;
   b4f1a:	eb0a 73da 	add.w	r3, sl, sl, lsr #31
   b4f1e:	1058      	asrs	r0, r3, #1
            if((0-HSet) > (0-VSet)){    //H = -90, V = 0 -> LS = 45, RS = 135, H = -90, V = -90 -> LS = 45, RS = 0
   b4f20:	4556      	cmp	r6, sl
                RSpeed = 90 - HSet/2 + VSet;
   b4f22:	f1c0 0000 	rsb	r0, r0, #0
   b4f26:	ea4f 0a63 	mov.w	sl, r3, asr #1
            if((0-HSet) > (0-VSet)){    //H = -90, V = 0 -> LS = 45, RS = 135, H = -90, V = -90 -> LS = 45, RS = 0
   b4f2a:	dd17      	ble.n	b4f5c <_Z18manualMotorControlh+0x290>
                RSpeed = 90 - HSet/2 + (VSet*1.5);
   b4f2c:	305a      	adds	r0, #90	; 0x5a
   b4f2e:	f009 fc13 	bl	be758 <__aeabi_i2d>
   b4f32:	4680      	mov	r8, r0
   b4f34:	4630      	mov	r0, r6
   b4f36:	4689      	mov	r9, r1
   b4f38:	f009 fc0e 	bl	be758 <__aeabi_i2d>
   b4f3c:	4b2a      	ldr	r3, [pc, #168]	; (b4fe8 <_Z18manualMotorControlh+0x31c>)
   b4f3e:	2200      	movs	r2, #0
   b4f40:	f009 fc74 	bl	be82c <__aeabi_dmul>
   b4f44:	460b      	mov	r3, r1
   b4f46:	4602      	mov	r2, r0
   b4f48:	4649      	mov	r1, r9
   b4f4a:	4640      	mov	r0, r8
   b4f4c:	f009 fab8 	bl	be4c0 <__adddf3>
   b4f50:	f009 ff06 	bl	bed60 <__aeabi_d2uiz>
                LSpeed = 90 + HSet/2;
   b4f54:	f10a 035a 	add.w	r3, sl, #90	; 0x5a
                RSpeed = 90 - HSet/2 + (VSet*1.5);
   b4f58:	7028      	strb	r0, [r5, #0]
                LSpeed = 90 + HSet/2;
   b4f5a:	e7b0      	b.n	b4ebe <_Z18manualMotorControlh+0x1f2>
                RSpeed = 90 + VSet;
   b4f5c:	365a      	adds	r6, #90	; 0x5a
   b4f5e:	b2f6      	uxtb	r6, r6
   b4f60:	702e      	strb	r6, [r5, #0]
                LSpeed = 90 - HSet/2 + VSet;
   b4f62:	4406      	add	r6, r0
   b4f64:	7026      	strb	r6, [r4, #0]
   b4f66:	e700      	b.n	b4d6a <_Z18manualMotorControlh+0x9e>
    if(!stopActive && ((millis() - rcTime > MTR_UPDATE_TIME) || (ctlSpeedDiff && millis() - rcTime > 75))){
   b4f68:	f898 3000 	ldrb.w	r3, [r8]
   b4f6c:	b133      	cbz	r3, b4f7c <_Z18manualMotorControlh+0x2b0>
   b4f6e:	f004 ffaf 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
   b4f72:	6833      	ldr	r3, [r6, #0]
   b4f74:	1ac0      	subs	r0, r0, r3
   b4f76:	284b      	cmp	r0, #75	; 0x4b
   b4f78:	f63f af38 	bhi.w	b4dec <_Z18manualMotorControlh+0x120>
}
   b4f7c:	b00b      	add	sp, #44	; 0x2c
   b4f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(!wb.XBeeAvail && !wb.BLEAvail && ctlSpeedDiff && (millis() - wb.LastMtrTime > MTR_LTE_PERIOD)){
   b4f82:	f1bb 0f00 	cmp.w	fp, #0
   b4f86:	f47f af5c 	bne.w	b4e42 <_Z18manualMotorControlh+0x176>
   b4f8a:	f898 9000 	ldrb.w	r9, [r8]
   b4f8e:	f1b9 0f00 	cmp.w	r9, #0
   b4f92:	f43f af56 	beq.w	b4e42 <_Z18manualMotorControlh+0x176>
   b4f96:	9205      	str	r2, [sp, #20]
   b4f98:	f004 ff9a 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
   b4f9c:	9b03      	ldr	r3, [sp, #12]
   b4f9e:	9a05      	ldr	r2, [sp, #20]
   b4fa0:	1ac0      	subs	r0, r0, r3
   b4fa2:	f640 33b8 	movw	r3, #3000	; 0xbb8
   b4fa6:	4298      	cmp	r0, r3
   b4fa8:	f67f af4b 	bls.w	b4e42 <_Z18manualMotorControlh+0x176>
   b4fac:	9203      	str	r2, [sp, #12]
   b4fae:	f004 ff8f 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
   b4fb2:	9a03      	ldr	r2, [sp, #12]
                    sendMTRLTE = true;
   b4fb4:	e747      	b.n	b4e46 <_Z18manualMotorControlh+0x17a>
   b4fb6:	bf00      	nop
   b4fb8:	0002cb33 	.word	0x0002cb33
   b4fbc:	fffff824 	.word	0xfffff824
   b4fc0:	2003dca8 	.word	0x2003dca8
   b4fc4:	2003dcd0 	.word	0x2003dcd0
   b4fc8:	2003dd44 	.word	0x2003dd44
   b4fcc:	2003dd70 	.word	0x2003dd70
   b4fd0:	2003dd45 	.word	0x2003dd45
   b4fd4:	2003e632 	.word	0x2003e632
   b4fd8:	2003ded8 	.word	0x2003ded8
   b4fdc:	2003dce4 	.word	0x2003dce4
   b4fe0:	2003dd64 	.word	0x2003dd64
   b4fe4:	0002cad8 	.word	0x0002cad8
   b4fe8:	3ff80000 	.word	0x3ff80000
   b4fec:	000c12cc 	.word	0x000c12cc

000b4ff0 <_Z14XBeeLTEPairSetv>:
void XBeeLTEPairSet(){
   b4ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      : _M_current(__i) { }
   b4ff4:	4d0e      	ldr	r5, [pc, #56]	; (b5030 <_Z14XBeeLTEPairSetv+0x40>)
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b4ff6:	4f0f      	ldr	r7, [pc, #60]	; (b5034 <_Z14XBeeLTEPairSetv+0x44>)
   b4ff8:	e9d5 4800 	ldrd	r4, r8, [r5]
void XBeeLTEPairSet(){
   b4ffc:	b088      	sub	sp, #32
    for(WaterBot p: PairBots){
   b4ffe:	45a0      	cmp	r8, r4
   b5000:	d013      	beq.n	b502a <_Z14XBeeLTEPairSetv+0x3a>
   b5002:	7a63      	ldrb	r3, [r4, #9]
   b5004:	7a26      	ldrb	r6, [r4, #8]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b5006:	78a2      	ldrb	r2, [r4, #2]
    for(WaterBot p: PairBots){
   b5008:	9303      	str	r3, [sp, #12]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b500a:	4639      	mov	r1, r7
   b500c:	a805      	add	r0, sp, #20
   b500e:	f005 fa03 	bl	ba418 <sprintf>
        sendData(replyStr,0,true,p.XBeeAvail,p.LTEAvail);
   b5012:	9b03      	ldr	r3, [sp, #12]
   b5014:	9600      	str	r6, [sp, #0]
   b5016:	2201      	movs	r2, #1
   b5018:	2100      	movs	r1, #0
   b501a:	a805      	add	r0, sp, #20
   b501c:	f7ff fde8 	bl	b4bf0 <_Z8sendDataPKchbbb>
   b5020:	686b      	ldr	r3, [r5, #4]
   b5022:	3b50      	subs	r3, #80	; 0x50
   b5024:	606b      	str	r3, [r5, #4]
      operator++() _GLIBCXX_NOEXCEPT
   b5026:	3450      	adds	r4, #80	; 0x50
	return *this;
   b5028:	e7e9      	b.n	b4ffe <_Z14XBeeLTEPairSetv+0xe>
}
   b502a:	b008      	add	sp, #32
   b502c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5030:	2003dcb8 	.word	0x2003dcb8
   b5034:	000c12dd 	.word	0x000c12dd

000b5038 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>:
      at(size_type __n)
   b5038:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b503a:	e9d0 4200 	ldrd	r4, r2, [r0]
   b503e:	4806      	ldr	r0, [pc, #24]	; (b5058 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x20>)
   b5040:	1b12      	subs	r2, r2, r4
   b5042:	10d2      	asrs	r2, r2, #3
   b5044:	4342      	muls	r2, r0
	if (__n >= this->size())
   b5046:	4291      	cmp	r1, r2
   b5048:	d302      	bcc.n	b5050 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b504a:	4804      	ldr	r0, [pc, #16]	; (b505c <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x24>)
   b504c:	f009 f86f 	bl	be12e <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b5050:	2028      	movs	r0, #40	; 0x28
   b5052:	fb00 4001 	mla	r0, r0, r1, r4
   b5056:	bd10      	pop	{r4, pc}
   b5058:	cccccccd 	.word	0xcccccccd
   b505c:	000c12e6 	.word	0x000c12e6

000b5060 <_Z8uHandlerv>:
    redrawMenu = true;                                      //Set redraw flag always so the display is updated with new highlighted item
   b5060:	4b10      	ldr	r3, [pc, #64]	; (b50a4 <_Z8uHandlerv+0x44>)
void uHandler(){
   b5062:	b510      	push	{r4, lr}
    redrawMenu = true;                                      //Set redraw flag always so the display is updated with new highlighted item
   b5064:	2201      	movs	r2, #1
    if(millis()-debounceTime < DEBOUNCE_MS) return;         //debounce this button, to make sure only one trigger is registered per press
   b5066:	4c10      	ldr	r4, [pc, #64]	; (b50a8 <_Z8uHandlerv+0x48>)
    redrawMenu = true;                                      //Set redraw flag always so the display is updated with new highlighted item
   b5068:	701a      	strb	r2, [r3, #0]
   b506a:	f004 ff31 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;         //debounce this button, to make sure only one trigger is registered per press
   b506e:	6823      	ldr	r3, [r4, #0]
   b5070:	1ac0      	subs	r0, r0, r3
   b5072:	2895      	cmp	r0, #149	; 0x95
   b5074:	d914      	bls.n	b50a0 <_Z8uHandlerv+0x40>
   b5076:	f004 ff2b 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
    if(menuItem) menuItem--;                                //Go up by one menu item by decrementing the counter by one, as long as we are not at the top already
   b507a:	4a0c      	ldr	r2, [pc, #48]	; (b50ac <_Z8uHandlerv+0x4c>)
    debounceTime = millis();
   b507c:	6020      	str	r0, [r4, #0]
    if(menuItem) menuItem--;                                //Go up by one menu item by decrementing the counter by one, as long as we are not at the top already
   b507e:	7813      	ldrb	r3, [r2, #0]
   b5080:	b10b      	cbz	r3, b5086 <_Z8uHandlerv+0x26>
   b5082:	3b01      	subs	r3, #1
   b5084:	7013      	strb	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);                 //Update which item is selected so the redraw function can use it
   b5086:	7811      	ldrb	r1, [r2, #0]
   b5088:	4809      	ldr	r0, [pc, #36]	; (b50b0 <_Z8uHandlerv+0x50>)
   b508a:	f7ff ffd5 	bl	b5038 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b508e:	4b09      	ldr	r3, [pc, #36]	; (b50b4 <_Z8uHandlerv+0x54>)
   b5090:	6018      	str	r0, [r3, #0]
    Serial.println("Up trigger");
   b5092:	f008 fe71 	bl	bdd78 <_Z16_fetch_usbserialv>
}
   b5096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("Up trigger");
   b509a:	4907      	ldr	r1, [pc, #28]	; (b50b8 <_Z8uHandlerv+0x58>)
   b509c:	f008 ba5f 	b.w	bd55e <_ZN5Print7printlnEPKc>
}
   b50a0:	bd10      	pop	{r4, pc}
   b50a2:	bf00      	nop
   b50a4:	2003daaa 	.word	0x2003daaa
   b50a8:	2003dd74 	.word	0x2003dd74
   b50ac:	2003de05 	.word	0x2003de05
   b50b0:	2003dcac 	.word	0x2003dcac
   b50b4:	2003dcd4 	.word	0x2003dcd4
   b50b8:	000c1330 	.word	0x000c1330

000b50bc <_Z8dHandlerv>:
    redrawMenu = true;                                      //Set redraw flag always so the display is updated with new highlighted item
   b50bc:	4b10      	ldr	r3, [pc, #64]	; (b5100 <_Z8dHandlerv+0x44>)
void dHandler(){
   b50be:	b510      	push	{r4, lr}
    redrawMenu = true;                                      //Set redraw flag always so the display is updated with new highlighted item
   b50c0:	2201      	movs	r2, #1
    if(millis()-debounceTime < DEBOUNCE_MS) return;         //debounce this button, to make sure only one trigger is registered per press
   b50c2:	4c10      	ldr	r4, [pc, #64]	; (b5104 <_Z8dHandlerv+0x48>)
    redrawMenu = true;                                      //Set redraw flag always so the display is updated with new highlighted item
   b50c4:	701a      	strb	r2, [r3, #0]
   b50c6:	f004 ff03 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;         //debounce this button, to make sure only one trigger is registered per press
   b50ca:	6823      	ldr	r3, [r4, #0]
   b50cc:	1ac0      	subs	r0, r0, r3
   b50ce:	2895      	cmp	r0, #149	; 0x95
   b50d0:	d915      	bls.n	b50fe <_Z8dHandlerv+0x42>
   b50d2:	f004 fefd 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;             //Go down by one menu item by incrementing the counter by one, as long as we are not at the bottom already
   b50d6:	4a0c      	ldr	r2, [pc, #48]	; (b5108 <_Z8dHandlerv+0x4c>)
    debounceTime = millis();
   b50d8:	6020      	str	r0, [r4, #0]
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;             //Go down by one menu item by incrementing the counter by one, as long as we are not at the bottom already
   b50da:	7813      	ldrb	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);                 //Update which item is selected so the redraw function can use it
   b50dc:	480b      	ldr	r0, [pc, #44]	; (b510c <_Z8dHandlerv+0x50>)
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;             //Go down by one menu item by incrementing the counter by one, as long as we are not at the bottom already
   b50de:	2b05      	cmp	r3, #5
   b50e0:	bf9c      	itt	ls
   b50e2:	3301      	addls	r3, #1
   b50e4:	7013      	strbls	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);                 //Update which item is selected so the redraw function can use it
   b50e6:	7811      	ldrb	r1, [r2, #0]
   b50e8:	f7ff ffa6 	bl	b5038 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b50ec:	4b08      	ldr	r3, [pc, #32]	; (b5110 <_Z8dHandlerv+0x54>)
   b50ee:	6018      	str	r0, [r3, #0]
    Serial.println("Down trigger");
   b50f0:	f008 fe42 	bl	bdd78 <_Z16_fetch_usbserialv>
}
   b50f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("Down trigger");
   b50f8:	4906      	ldr	r1, [pc, #24]	; (b5114 <_Z8dHandlerv+0x58>)
   b50fa:	f008 ba30 	b.w	bd55e <_ZN5Print7printlnEPKc>
}
   b50fe:	bd10      	pop	{r4, pc}
   b5100:	2003daaa 	.word	0x2003daaa
   b5104:	2003dd74 	.word	0x2003dd74
   b5108:	2003de05 	.word	0x2003de05
   b510c:	2003dcac 	.word	0x2003dcac
   b5110:	2003dcd4 	.word	0x2003dcd4
   b5114:	000c133b 	.word	0x000c133b

000b5118 <_ZNSt6vectorI6StringSaIS0_EE2atEj>:
      at(size_type __n)
   b5118:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b511a:	e9d0 5400 	ldrd	r5, r4, [r0]
   b511e:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
   b5120:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5124:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
   b5128:	d302      	bcc.n	b5130 <_ZNSt6vectorI6StringSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b512a:	4803      	ldr	r0, [pc, #12]	; (b5138 <_ZNSt6vectorI6StringSaIS0_EE2atEj+0x20>)
   b512c:	f008 ffff 	bl	be12e <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b5130:	eb05 1001 	add.w	r0, r5, r1, lsl #4
   b5134:	bd38      	pop	{r3, r4, r5, pc}
   b5136:	bf00      	nop
   b5138:	000c12e6 	.word	0x000c12e6

000b513c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>:
      at(size_type __n)
   b513c:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b513e:	e9d0 4200 	ldrd	r4, r2, [r0]
   b5142:	4806      	ldr	r0, [pc, #24]	; (b515c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x20>)
   b5144:	1b12      	subs	r2, r2, r4
   b5146:	1112      	asrs	r2, r2, #4
   b5148:	4342      	muls	r2, r0
	if (__n >= this->size())
   b514a:	4291      	cmp	r1, r2
   b514c:	d302      	bcc.n	b5154 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b514e:	4804      	ldr	r0, [pc, #16]	; (b5160 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x24>)
   b5150:	f008 ffed 	bl	be12e <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b5154:	2050      	movs	r0, #80	; 0x50
   b5156:	fb00 4001 	mla	r0, r0, r1, r4
   b515a:	bd10      	pop	{r4, pc}
   b515c:	cccccccd 	.word	0xcccccccd
   b5160:	000c12e6 	.word	0x000c12e6

000b5164 <_Z16updateBotControlv>:
void updateBotControl(){
   b5164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(updateControl){
   b5168:	4b5f      	ldr	r3, [pc, #380]	; (b52e8 <_Z16updateBotControlv+0x184>)
   b516a:	781a      	ldrb	r2, [r3, #0]
void updateBotControl(){
   b516c:	b097      	sub	sp, #92	; 0x5c
    if(updateControl){
   b516e:	2a00      	cmp	r2, #0
   b5170:	d048      	beq.n	b5204 <_Z16updateBotControlv+0xa0>
        updateControl = false;
   b5172:	2200      	movs	r2, #0
   b5174:	701a      	strb	r2, [r3, #0]
      : _M_current(__i) { }
   b5176:	4b5d      	ldr	r3, [pc, #372]	; (b52ec <_Z16updateBotControlv+0x188>)
                sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum, wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b5178:	f8df 8180 	ldr.w	r8, [pc, #384]	; b52fc <_Z16updateBotControlv+0x198>
                Serial.printlnf("Control Packet: %s",statusStr);
   b517c:	f8df 9184 	ldr.w	r9, [pc, #388]	; b5304 <_Z16updateBotControlv+0x1a0>
                if(!wb.XBeeAvail && !wb.BLEAvail && LTEStatuses && wb.LTEInitialStatus){
   b5180:	4e5b      	ldr	r6, [pc, #364]	; (b52f0 <_Z16updateBotControlv+0x18c>)
   b5182:	e9d3 4700 	ldrd	r4, r7, [r3]
        for(WaterBot &wb: WaterBots){
   b5186:	42a7      	cmp	r7, r4
   b5188:	d03c      	beq.n	b5204 <_Z16updateBotControlv+0xa0>
            if(wb.updatedControl){
   b518a:	7863      	ldrb	r3, [r4, #1]
   b518c:	2b00      	cmp	r3, #0
   b518e:	d035      	beq.n	b51fc <_Z16updateBotControlv+0x98>
                wb.updatedControl = false;
   b5190:	2500      	movs	r5, #0
   b5192:	7065      	strb	r5, [r4, #1]
   b5194:	f004 fe9c 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
                sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum, wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b5198:	7c23      	ldrb	r3, [r4, #16]
   b519a:	78a2      	ldrb	r2, [r4, #2]
                wb.publishTime = millis();
   b519c:	6460      	str	r0, [r4, #68]	; 0x44
                sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum, wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b519e:	9306      	str	r3, [sp, #24]
   b51a0:	7d63      	ldrb	r3, [r4, #21]
   b51a2:	9305      	str	r3, [sp, #20]
   b51a4:	89e3      	ldrh	r3, [r4, #14]
   b51a6:	9304      	str	r3, [sp, #16]
   b51a8:	69e0      	ldr	r0, [r4, #28]
   b51aa:	9209      	str	r2, [sp, #36]	; 0x24
   b51ac:	f009 fae6 	bl	be77c <__aeabi_f2d>
   b51b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b51b4:	69a0      	ldr	r0, [r4, #24]
   b51b6:	f009 fae1 	bl	be77c <__aeabi_f2d>
   b51ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b51bc:	e9cd 0100 	strd	r0, r1, [sp]
   b51c0:	4641      	mov	r1, r8
   b51c2:	a80b      	add	r0, sp, #44	; 0x2c
   b51c4:	f005 f928 	bl	ba418 <sprintf>
                Serial.printlnf("Control Packet: %s",statusStr);
   b51c8:	f008 fdd6 	bl	bdd78 <_Z16_fetch_usbserialv>
   b51cc:	aa0b      	add	r2, sp, #44	; 0x2c
   b51ce:	4649      	mov	r1, r9
   b51d0:	f7ff f88a 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
                if(!wb.XBeeAvail && !wb.BLEAvail && LTEStatuses && wb.LTEInitialStatus){
   b51d4:	7a61      	ldrb	r1, [r4, #9]
   b51d6:	f081 0201 	eor.w	r2, r1, #1
   b51da:	b939      	cbnz	r1, b51ec <_Z16updateBotControlv+0x88>
   b51dc:	79e5      	ldrb	r5, [r4, #7]
   b51de:	b97d      	cbnz	r5, b5200 <_Z16updateBotControlv+0x9c>
   b51e0:	8831      	ldrh	r1, [r6, #0]
   b51e2:	b119      	cbz	r1, b51ec <_Z16updateBotControlv+0x88>
   b51e4:	79a5      	ldrb	r5, [r4, #6]
   b51e6:	b10d      	cbz	r5, b51ec <_Z16updateBotControlv+0x88>
                    LTEStatuses--;
   b51e8:	3901      	subs	r1, #1
   b51ea:	8031      	strh	r1, [r6, #0]
                sendData(statusStr,0,!(wb.XBeeAvail),true,rpiLTEStatus);
   b51ec:	2301      	movs	r3, #1
   b51ee:	9500      	str	r5, [sp, #0]
   b51f0:	2100      	movs	r1, #0
   b51f2:	a80b      	add	r0, sp, #44	; 0x2c
   b51f4:	f7ff fcfc 	bl	b4bf0 <_Z8sendDataPKchbbb>
                wb.LTEInitialStatus = false;
   b51f8:	2300      	movs	r3, #0
   b51fa:	71a3      	strb	r3, [r4, #6]
      operator++() _GLIBCXX_NOEXCEPT
   b51fc:	3450      	adds	r4, #80	; 0x50
	return *this;
   b51fe:	e7c2      	b.n	b5186 <_Z16updateBotControlv+0x22>
                bool rpiLTEStatus = false;
   b5200:	460d      	mov	r5, r1
   b5202:	e7f3      	b.n	b51ec <_Z16updateBotControlv+0x88>
    if(millis() - controlUpdateTime > CONTROL_PUB_TIME){
   b5204:	4c3b      	ldr	r4, [pc, #236]	; (b52f4 <_Z16updateBotControlv+0x190>)
   b5206:	f004 fe63 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
   b520a:	6823      	ldr	r3, [r4, #0]
   b520c:	1ac0      	subs	r0, r0, r3
   b520e:	f241 3388 	movw	r3, #5000	; 0x1388
   b5212:	4298      	cmp	r0, r3
   b5214:	d946      	bls.n	b52a4 <_Z16updateBotControlv+0x140>
        if(controlUpdateID == -1){
   b5216:	4d38      	ldr	r5, [pc, #224]	; (b52f8 <_Z16updateBotControlv+0x194>)
   b5218:	4e34      	ldr	r6, [pc, #208]	; (b52ec <_Z16updateBotControlv+0x188>)
   b521a:	f004 fe59 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
   b521e:	682a      	ldr	r2, [r5, #0]
        controlUpdateTime = millis();
   b5220:	6020      	str	r0, [r4, #0]
        if(controlUpdateID == -1){
   b5222:	1c53      	adds	r3, r2, #1
   b5224:	d141      	bne.n	b52aa <_Z16updateBotControlv+0x146>
            if(WaterBots.size() != 0) controlUpdateID = 0;
   b5226:	e9d6 3200 	ldrd	r3, r2, [r6]
   b522a:	429a      	cmp	r2, r3
   b522c:	d03a      	beq.n	b52a4 <_Z16updateBotControlv+0x140>
   b522e:	2300      	movs	r3, #0
   b5230:	602b      	str	r3, [r5, #0]
        WaterBot wb = WaterBots.at(controlUpdateID);
   b5232:	6829      	ldr	r1, [r5, #0]
   b5234:	482d      	ldr	r0, [pc, #180]	; (b52ec <_Z16updateBotControlv+0x188>)
   b5236:	f7ff ff81 	bl	b513c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
        sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum,wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b523a:	7c03      	ldrb	r3, [r0, #16]
   b523c:	7882      	ldrb	r2, [r0, #2]
        WaterBot wb = WaterBots.at(controlUpdateID);
   b523e:	f890 9009 	ldrb.w	r9, [r0, #9]
   b5242:	f890 8007 	ldrb.w	r8, [r0, #7]
   b5246:	6c87      	ldr	r7, [r0, #72]	; 0x48
        sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum,wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b5248:	9306      	str	r3, [sp, #24]
   b524a:	7d43      	ldrb	r3, [r0, #21]
   b524c:	9305      	str	r3, [sp, #20]
   b524e:	89c3      	ldrh	r3, [r0, #14]
   b5250:	9304      	str	r3, [sp, #16]
        WaterBot wb = WaterBots.at(controlUpdateID);
   b5252:	4604      	mov	r4, r0
        sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum,wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b5254:	69c0      	ldr	r0, [r0, #28]
   b5256:	9209      	str	r2, [sp, #36]	; 0x24
   b5258:	f009 fa90 	bl	be77c <__aeabi_f2d>
   b525c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5260:	69a0      	ldr	r0, [r4, #24]
   b5262:	f009 fa8b 	bl	be77c <__aeabi_f2d>
   b5266:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b5268:	e9cd 0100 	strd	r0, r1, [sp]
   b526c:	4923      	ldr	r1, [pc, #140]	; (b52fc <_Z16updateBotControlv+0x198>)
   b526e:	a80b      	add	r0, sp, #44	; 0x2c
   b5270:	f005 f8d2 	bl	ba418 <sprintf>
        if(!wb.XBeeAvail && !wb.BLEAvail && (millis() - wb.LTELastStatTime > LTE_CTL_PERIOD)){
   b5274:	f1b9 0f00 	cmp.w	r9, #0
   b5278:	d021      	beq.n	b52be <_Z16updateBotControlv+0x15a>
        bool sendLTEStat = false;
   b527a:	2300      	movs	r3, #0
        sendData(statusStr,0,false,true,sendLTEStat);
   b527c:	2200      	movs	r2, #0
   b527e:	4611      	mov	r1, r2
   b5280:	9300      	str	r3, [sp, #0]
   b5282:	a80b      	add	r0, sp, #44	; 0x2c
   b5284:	2301      	movs	r3, #1
   b5286:	f7ff fcb3 	bl	b4bf0 <_Z8sendDataPKchbbb>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b528a:	e9d6 1300 	ldrd	r1, r3, [r6]
   b528e:	1a5b      	subs	r3, r3, r1
   b5290:	491b      	ldr	r1, [pc, #108]	; (b5300 <_Z16updateBotControlv+0x19c>)
        if(controlUpdateID < WaterBots.size()-1) controlUpdateID++;
   b5292:	682a      	ldr	r2, [r5, #0]
   b5294:	111b      	asrs	r3, r3, #4
   b5296:	434b      	muls	r3, r1
   b5298:	3b01      	subs	r3, #1
   b529a:	4293      	cmp	r3, r2
   b529c:	bf8c      	ite	hi
   b529e:	3201      	addhi	r2, #1
        else controlUpdateID = 0;
   b52a0:	2200      	movls	r2, #0
   b52a2:	602a      	str	r2, [r5, #0]
}
   b52a4:	b017      	add	sp, #92	; 0x5c
   b52a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b52aa:	e9d6 1300 	ldrd	r1, r3, [r6]
   b52ae:	1a5b      	subs	r3, r3, r1
   b52b0:	4913      	ldr	r1, [pc, #76]	; (b5300 <_Z16updateBotControlv+0x19c>)
   b52b2:	111b      	asrs	r3, r3, #4
   b52b4:	434b      	muls	r3, r1
        if(controlUpdateID > WaterBots.size()-1) controlUpdateID = 0;
   b52b6:	3b01      	subs	r3, #1
   b52b8:	4293      	cmp	r3, r2
   b52ba:	d3b8      	bcc.n	b522e <_Z16updateBotControlv+0xca>
   b52bc:	e7b9      	b.n	b5232 <_Z16updateBotControlv+0xce>
        if(!wb.XBeeAvail && !wb.BLEAvail && (millis() - wb.LTELastStatTime > LTE_CTL_PERIOD)){
   b52be:	f1b8 0f00 	cmp.w	r8, #0
   b52c2:	d1da      	bne.n	b527a <_Z16updateBotControlv+0x116>
   b52c4:	f004 fe04 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
   b52c8:	f247 1348 	movw	r3, #29000	; 0x7148
   b52cc:	1bc0      	subs	r0, r0, r7
   b52ce:	4298      	cmp	r0, r3
   b52d0:	d9d3      	bls.n	b527a <_Z16updateBotControlv+0x116>
   b52d2:	f004 fdfd 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
            WaterBots.at(controlUpdateID).LTELastStatTime = millis();
   b52d6:	6829      	ldr	r1, [r5, #0]
   b52d8:	4604      	mov	r4, r0
   b52da:	4804      	ldr	r0, [pc, #16]	; (b52ec <_Z16updateBotControlv+0x188>)
   b52dc:	f7ff ff2e 	bl	b513c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
            sendLTEStat = true;
   b52e0:	2301      	movs	r3, #1
            WaterBots.at(controlUpdateID).LTELastStatTime = millis();
   b52e2:	6484      	str	r4, [r0, #72]	; 0x48
   b52e4:	e7ca      	b.n	b527c <_Z16updateBotControlv+0x118>
   b52e6:	bf00      	nop
   b52e8:	2003e638 	.word	0x2003e638
   b52ec:	2003dce4 	.word	0x2003dce4
   b52f0:	2003daa8 	.word	0x2003daa8
   b52f4:	2003dd6c 	.word	0x2003dd6c
   b52f8:	2003dd68 	.word	0x2003dd68
   b52fc:	000c1348 	.word	0x000c1348
   b5300:	cccccccd 	.word	0xcccccccd
   b5304:	000c1365 	.word	0x000c1365

000b5308 <_ZNSt6vectorI6StringSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b5308:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b530a:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b530e:	4604      	mov	r4, r0
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b5310:	42ae      	cmp	r6, r5
   b5312:	d004      	beq.n	b531e <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x16>
      __pointer->~_Tp();
   b5314:	4628      	mov	r0, r5
   b5316:	f008 fa7f 	bl	bd818 <_ZN6StringD1Ev>
	  for (; __first != __last; ++__first)
   b531a:	3510      	adds	r5, #16
   b531c:	e7f8      	b.n	b5310 <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b531e:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b5320:	b118      	cbz	r0, b532a <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b5322:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5324:	1a09      	subs	r1, r1, r0
   b5326:	f7fe feba 	bl	b409e <_ZdlPvj>
      }
   b532a:	4620      	mov	r0, r4
   b532c:	bd70      	pop	{r4, r5, r6, pc}

000b532e <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b532e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5330:	4604      	mov	r4, r0
   b5332:	460e      	mov	r6, r1
   b5334:	4615      	mov	r5, r2
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
   b5336:	2700      	movs	r7, #0
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
   b5338:	42b4      	cmp	r4, r6
   b533a:	d029      	beq.n	b5390 <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x62>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b533c:	b315      	cbz	r5, b5384 <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x56>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
   b533e:	6823      	ldr	r3, [r4, #0]
	  _M_end_of_storage(__x._M_end_of_storage)
   b5340:	602b      	str	r3, [r5, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
   b5342:	6863      	ldr	r3, [r4, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
   b5344:	606b      	str	r3, [r5, #4]
   b5346:	68a3      	ldr	r3, [r4, #8]
   b5348:	60ab      	str	r3, [r5, #8]
class MenuItem{
   b534a:	68e3      	ldr	r3, [r4, #12]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
   b534c:	6027      	str	r7, [r4, #0]
   b534e:	e9c4 7701 	strd	r7, r7, [r4, #4]
   b5352:	60eb      	str	r3, [r5, #12]
   b5354:	6923      	ldr	r3, [r4, #16]
   b5356:	612b      	str	r3, [r5, #16]
   b5358:	8aa3      	ldrh	r3, [r4, #20]
   b535a:	82ab      	strh	r3, [r5, #20]
   b535c:	7da3      	ldrb	r3, [r4, #22]
   b535e:	75ab      	strb	r3, [r5, #22]
   b5360:	7de3      	ldrb	r3, [r4, #23]
   b5362:	75eb      	strb	r3, [r5, #23]
   b5364:	7e23      	ldrb	r3, [r4, #24]
   b5366:	762b      	strb	r3, [r5, #24]
   b5368:	8b63      	ldrh	r3, [r4, #26]
   b536a:	836b      	strh	r3, [r5, #26]
   b536c:	8ba3      	ldrh	r3, [r4, #28]
   b536e:	83ab      	strh	r3, [r5, #28]
   b5370:	f8d4 301e 	ldr.w	r3, [r4, #30]
   b5374:	f8c5 301e 	str.w	r3, [r5, #30]
   b5378:	f8d4 3022 	ldr.w	r3, [r4, #34]	; 0x22
   b537c:	f8c5 3022 	str.w	r3, [r5, #34]	; 0x22
   b5380:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   b5382:	84eb      	strh	r3, [r5, #38]	; 0x26
   b5384:	4620      	mov	r0, r4
   b5386:	f7ff ffbf 	bl	b5308 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b538a:	3428      	adds	r4, #40	; 0x28
   b538c:	3528      	adds	r5, #40	; 0x28
   b538e:	e7d3      	b.n	b5338 <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0xa>
	std::__relocate_object_a(std::__addressof(*__cur),
				 std::__addressof(*__first), __alloc);
      return __cur;
    }
   b5390:	4628      	mov	r0, r5
   b5392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5394 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b5394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5398:	e9d0 8a00 	ldrd	r8, sl, [r0]
   b539c:	4b2f      	ldr	r3, [pc, #188]	; (b545c <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc8>)
   b539e:	ebaa 0408 	sub.w	r4, sl, r8
   b53a2:	435c      	muls	r4, r3

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b53a4:	4b2e      	ldr	r3, [pc, #184]	; (b5460 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>)
   b53a6:	429c      	cmp	r4, r3
   b53a8:	4689      	mov	r9, r1
   b53aa:	4607      	mov	r7, r0
   b53ac:	4611      	mov	r1, r2
   b53ae:	d102      	bne.n	b53b6 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x22>
	  __throw_length_error(__N(__s));
   b53b0:	482c      	ldr	r0, [pc, #176]	; (b5464 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd0>)
   b53b2:	f008 feb9 	bl	be128 <_ZSt20__throw_length_errorPKc>
   b53b6:	2c01      	cmp	r4, #1
   b53b8:	4622      	mov	r2, r4
   b53ba:	bf38      	it	cc
   b53bc:	2201      	movcc	r2, #1
   b53be:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b53c0:	eba9 0508 	sub.w	r5, r9, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b53c4:	d21d      	bcs.n	b5402 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b53c6:	b1f4      	cbz	r4, b5406 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
   b53c8:	429c      	cmp	r4, r3
   b53ca:	bf28      	it	cs
   b53cc:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b53ce:	2049      	movs	r0, #73	; 0x49
   b53d0:	4360      	muls	r0, r4
   b53d2:	9101      	str	r1, [sp, #4]
   b53d4:	f7fe fe5f 	bl	b4096 <_Znwj>
   b53d8:	9901      	ldr	r1, [sp, #4]
   b53da:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b53dc:	1970      	adds	r0, r6, r5
   b53de:	d002      	beq.n	b53e6 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x52>
   b53e0:	2249      	movs	r2, #73	; 0x49
   b53e2:	f009 fd68 	bl	beeb6 <memcpy>
   b53e6:	4633      	mov	r3, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b53e8:	4645      	mov	r5, r8
      for (; __first != __last; ++__first, (void)++__cur)
   b53ea:	45a9      	cmp	r9, r5
   b53ec:	d00d      	beq.n	b540a <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x76>
   b53ee:	b12b      	cbz	r3, b53fc <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x68>
   b53f0:	4618      	mov	r0, r3
   b53f2:	2249      	movs	r2, #73	; 0x49
   b53f4:	4629      	mov	r1, r5
   b53f6:	f009 fd5e 	bl	beeb6 <memcpy>
   b53fa:	4603      	mov	r3, r0
   b53fc:	3549      	adds	r5, #73	; 0x49
   b53fe:	3349      	adds	r3, #73	; 0x49
   b5400:	e7f3      	b.n	b53ea <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x56>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5402:	461c      	mov	r4, r3
   b5404:	e7e3      	b.n	b53ce <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5406:	4626      	mov	r6, r4
   b5408:	e7e8      	b.n	b53dc <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x48>
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   b540a:	eba5 0908 	sub.w	r9, r5, r8
   b540e:	f109 0949 	add.w	r9, r9, #73	; 0x49
   b5412:	44b1      	add	r9, r6
   b5414:	462b      	mov	r3, r5
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b5416:	46cb      	mov	fp, r9
      for (; __first != __last; ++__first, (void)++__cur)
   b5418:	4555      	cmp	r5, sl
   b541a:	f10b 0b49 	add.w	fp, fp, #73	; 0x49
   b541e:	d009      	beq.n	b5434 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa0>
   b5420:	4629      	mov	r1, r5
   b5422:	2249      	movs	r2, #73	; 0x49
   b5424:	f1ab 0049 	sub.w	r0, fp, #73	; 0x49
   b5428:	9301      	str	r3, [sp, #4]
   b542a:	3549      	adds	r5, #73	; 0x49
   b542c:	f009 fd43 	bl	beeb6 <memcpy>
   b5430:	9b01      	ldr	r3, [sp, #4]
   b5432:	e7f1      	b.n	b5418 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x84>
   b5434:	1aed      	subs	r5, r5, r3
   b5436:	444d      	add	r5, r9
	if (__p)
   b5438:	f1b8 0f00 	cmp.w	r8, #0
   b543c:	d005      	beq.n	b544a <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb6>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b543e:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b5440:	4640      	mov	r0, r8
   b5442:	eba1 0108 	sub.w	r1, r1, r8
   b5446:	f7fe fe2a 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b544a:	2049      	movs	r0, #73	; 0x49
   b544c:	fb00 6404 	mla	r4, r0, r4, r6
      this->_M_impl._M_finish = __new_finish;
   b5450:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5454:	60bc      	str	r4, [r7, #8]
    }
   b5456:	b003      	add	sp, #12
   b5458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b545c:	c7e3f1f9 	.word	0xc7e3f1f9
   b5460:	01c0e070 	.word	0x01c0e070
   b5464:	000c1378 	.word	0x000c1378

000b5468 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b5468:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b546a:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   b546e:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   b5470:	4604      	mov	r4, r0
   b5472:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5474:	d008      	beq.n	b5488 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_+0x20>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5476:	b11b      	cbz	r3, b5480 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_+0x18>
   b5478:	2249      	movs	r2, #73	; 0x49
   b547a:	4618      	mov	r0, r3
   b547c:	f009 fd1b 	bl	beeb6 <memcpy>
	    ++this->_M_impl._M_finish;
   b5480:	6863      	ldr	r3, [r4, #4]
   b5482:	3349      	adds	r3, #73	; 0x49
   b5484:	6063      	str	r3, [r4, #4]
      }
   b5486:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   b5488:	4619      	mov	r1, r3
   b548a:	f7ff ff83 	bl	b5394 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b548e:	e7fa      	b.n	b5486 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_+0x1e>

000b5490 <_Z8sHandlerv>:

//Stop button interrupt handler - sets stop flag for all bots and creates a pop-up showing that a stop was set or cleared
void sHandler(){    
   b5490:	b530      	push	{r4, r5, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;         //debounce this button, to make sure only one trigger is registered per press
   b5492:	4c26      	ldr	r4, [pc, #152]	; (b552c <_Z8sHandlerv+0x9c>)
void sHandler(){    
   b5494:	b095      	sub	sp, #84	; 0x54
   b5496:	f004 fd1b 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;         //debounce this button, to make sure only one trigger is registered per press
   b549a:	6823      	ldr	r3, [r4, #0]
   b549c:	1ac0      	subs	r0, r0, r3
   b549e:	2895      	cmp	r0, #149	; 0x95
   b54a0:	d925      	bls.n	b54ee <_Z8sHandlerv+0x5e>
   b54a2:	f004 fd15 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b54a6:	6020      	str	r0, [r4, #0]
    if(stopActive){                                         //Check if the user has initiated a stop, if so, then exit stop mode
   b54a8:	4c21      	ldr	r4, [pc, #132]	; (b5530 <_Z8sHandlerv+0xa0>)
   b54aa:	4d22      	ldr	r5, [pc, #136]	; (b5534 <_Z8sHandlerv+0xa4>)
   b54ac:	7823      	ldrb	r3, [r4, #0]
   b54ae:	b303      	cbz	r3, b54f2 <_Z8sHandlerv+0x62>
        MenuPopUp m;                                        //Create pop-up to indicate to user that we are exiting stop mode
        sprintf(m.primaryLine,"CLEARED\0");                 //Main display line
   b54b0:	4921      	ldr	r1, [pc, #132]	; (b5538 <_Z8sHandlerv+0xa8>)
   b54b2:	a801      	add	r0, sp, #4
   b54b4:	f009 fdb5 	bl	bf022 <strcpy>
        sprintf(m.secondaryLine,"Motors Resuming");         //Secondary display line
   b54b8:	4920      	ldr	r1, [pc, #128]	; (b553c <_Z8sHandlerv+0xac>)
   b54ba:	f10d 000e 	add.w	r0, sp, #14
   b54be:	f009 fdb0 	bl	bf022 <strcpy>
        sprintf(m.tertiaryLine, "Press again to stop");     //Tertiary display line
   b54c2:	491f      	ldr	r1, [pc, #124]	; (b5540 <_Z8sHandlerv+0xb0>)
   b54c4:	a80b      	add	r0, sp, #44	; 0x2c
   b54c6:	f009 fdac 	bl	bf022 <strcpy>
        m.primaryStart = 20;                                //Horizontal pixel that the main line starts at
   b54ca:	2314      	movs	r3, #20
   b54cc:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
        m.secondaryStart = 20;                              //Horizontal pixel that the secondary line starts at
   b54d0:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
        m.tertiaryStart = 7;                                //Horizontal pixel that the tertiary line starts at
        PopUps.push_back(m);                                //Push the warning item onto the stack of pop-ups
   b54d4:	481b      	ldr	r0, [pc, #108]	; (b5544 <_Z8sHandlerv+0xb4>)
        m.tertiaryStart = 7;                                //Horizontal pixel that the tertiary line starts at
   b54d6:	2307      	movs	r3, #7
        PopUps.push_back(m);                                //Push the warning item onto the stack of pop-ups
   b54d8:	a901      	add	r1, sp, #4
        m.tertiaryStart = 7;                                //Horizontal pixel that the tertiary line starts at
   b54da:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
        PopUps.push_back(m);                                //Push the warning item onto the stack of pop-ups
   b54de:	f7ff ffc3 	bl	b5468 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>
        redrawMenu = true;                                  //Set flag for redraw so main loop will display pop-up
   b54e2:	2301      	movs	r3, #1
        stopActive = false;                                 //Clear global flag so main loop will stop sending the stop command (can't do that here because it's an ISR)
        LTEStopSent = false;                                //Every time there is a stop, use LTE one time
   b54e4:	4a18      	ldr	r2, [pc, #96]	; (b5548 <_Z8sHandlerv+0xb8>)
        redrawMenu = true;                                  //Set flag for redraw so main loop will display pop-up
   b54e6:	702b      	strb	r3, [r5, #0]
        stopActive = false;                                 //Clear global flag so main loop will stop sending the stop command (can't do that here because it's an ISR)
   b54e8:	2300      	movs	r3, #0
   b54ea:	7023      	strb	r3, [r4, #0]
        LTEStopSent = false;                                //Every time there is a stop, use LTE one time
   b54ec:	7013      	strb	r3, [r2, #0]
        m.tertiaryStart = 5;                                //Horizontal pixel that the tertiary line starts at
        PopUps.push_back(m);                                //Set flag for redraw so main loop will display pop-up
        redrawMenu = true;                                  //Set global flag so main loop will send the stop command (can't do that here because it's an ISR)
        stopActive = true;                                  //Set global flag so main loop will send the stop command (can't do that here because it's an ISR)
    }
}
   b54ee:	b015      	add	sp, #84	; 0x54
   b54f0:	bd30      	pop	{r4, r5, pc}
        sprintf(m.primaryLine,"STOPPED\0");                 //Main display line
   b54f2:	4916      	ldr	r1, [pc, #88]	; (b554c <_Z8sHandlerv+0xbc>)
   b54f4:	a801      	add	r0, sp, #4
   b54f6:	f009 fd94 	bl	bf022 <strcpy>
        sprintf(m.secondaryLine,"Motors Stopped!");         //Secondary display line
   b54fa:	4915      	ldr	r1, [pc, #84]	; (b5550 <_Z8sHandlerv+0xc0>)
   b54fc:	f10d 000e 	add.w	r0, sp, #14
   b5500:	f009 fd8f 	bl	bf022 <strcpy>
        sprintf(m.tertiaryLine, "Press again to start");    //Tertiary display line
   b5504:	4913      	ldr	r1, [pc, #76]	; (b5554 <_Z8sHandlerv+0xc4>)
   b5506:	a80b      	add	r0, sp, #44	; 0x2c
   b5508:	f009 fd8b 	bl	bf022 <strcpy>
        m.primaryStart = 20;                                //Horizontal pixel that the main line starts at
   b550c:	2314      	movs	r3, #20
   b550e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
        m.secondaryStart = 20;                              //Horizontal pixel that the secondary line starts at
   b5512:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
        PopUps.push_back(m);                                //Set flag for redraw so main loop will display pop-up
   b5516:	480b      	ldr	r0, [pc, #44]	; (b5544 <_Z8sHandlerv+0xb4>)
        m.tertiaryStart = 5;                                //Horizontal pixel that the tertiary line starts at
   b5518:	2305      	movs	r3, #5
        PopUps.push_back(m);                                //Set flag for redraw so main loop will display pop-up
   b551a:	a901      	add	r1, sp, #4
        m.tertiaryStart = 5;                                //Horizontal pixel that the tertiary line starts at
   b551c:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
        PopUps.push_back(m);                                //Set flag for redraw so main loop will display pop-up
   b5520:	f7ff ffa2 	bl	b5468 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>
        redrawMenu = true;                                  //Set global flag so main loop will send the stop command (can't do that here because it's an ISR)
   b5524:	2301      	movs	r3, #1
   b5526:	702b      	strb	r3, [r5, #0]
        stopActive = true;                                  //Set global flag so main loop will send the stop command (can't do that here because it's an ISR)
   b5528:	7023      	strb	r3, [r4, #0]
   b552a:	e7e0      	b.n	b54ee <_Z8sHandlerv+0x5e>
   b552c:	2003dd74 	.word	0x2003dd74
   b5530:	2003e632 	.word	0x2003e632
   b5534:	2003daaa 	.word	0x2003daaa
   b5538:	000c1894 	.word	0x000c1894
   b553c:	000c1392 	.word	0x000c1392
   b5540:	000c13a2 	.word	0x000c13a2
   b5544:	2003dcc4 	.word	0x2003dcc4
   b5548:	2003dca9 	.word	0x2003dca9
   b554c:	000c189d 	.word	0x000c189d
   b5550:	000c13b6 	.word	0x000c13b6
   b5554:	000c13c6 	.word	0x000c13c6

000b5558 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b5558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b555c:	e9d0 8900 	ldrd	r8, r9, [r0]
   b5560:	4b39      	ldr	r3, [pc, #228]	; (b5648 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf0>)
   b5562:	eba9 0408 	sub.w	r4, r9, r8
   b5566:	1124      	asrs	r4, r4, #4
   b5568:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
   b556a:	4b38      	ldr	r3, [pc, #224]	; (b564c <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf4>)
   b556c:	429c      	cmp	r4, r3
   b556e:	468a      	mov	sl, r1
   b5570:	4607      	mov	r7, r0
   b5572:	4611      	mov	r1, r2
   b5574:	d102      	bne.n	b557c <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
   b5576:	4836      	ldr	r0, [pc, #216]	; (b5650 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf8>)
   b5578:	f008 fdd6 	bl	be128 <_ZSt20__throw_length_errorPKc>
   b557c:	2c01      	cmp	r4, #1
   b557e:	4622      	mov	r2, r4
   b5580:	bf38      	it	cc
   b5582:	2201      	movcc	r2, #1
   b5584:	18a4      	adds	r4, r4, r2
   b5586:	ebaa 0508 	sub.w	r5, sl, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b558a:	d21e      	bcs.n	b55ca <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b558c:	b1fc      	cbz	r4, b55ce <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x76>
   b558e:	429c      	cmp	r4, r3
   b5590:	bf28      	it	cs
   b5592:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5594:	2050      	movs	r0, #80	; 0x50
   b5596:	4360      	muls	r0, r4
   b5598:	9100      	str	r1, [sp, #0]
   b559a:	f7fe fd7c 	bl	b4096 <_Znwj>
   b559e:	9900      	ldr	r1, [sp, #0]
   b55a0:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b55a2:	1970      	adds	r0, r6, r5
   b55a4:	d002      	beq.n	b55ac <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x54>
   b55a6:	2250      	movs	r2, #80	; 0x50
   b55a8:	f009 fc85 	bl	beeb6 <memcpy>
   b55ac:	4633      	mov	r3, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b55ae:	46c3      	mov	fp, r8
   b55b0:	45da      	cmp	sl, fp
   b55b2:	d00e      	beq.n	b55d2 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7a>
   b55b4:	b12b      	cbz	r3, b55c2 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6a>
   b55b6:	4618      	mov	r0, r3
   b55b8:	2250      	movs	r2, #80	; 0x50
   b55ba:	4659      	mov	r1, fp
   b55bc:	f009 fc7b 	bl	beeb6 <memcpy>
   b55c0:	4603      	mov	r3, r0
   b55c2:	f10b 0b50 	add.w	fp, fp, #80	; 0x50
   b55c6:	3350      	adds	r3, #80	; 0x50
   b55c8:	e7f2      	b.n	b55b0 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x58>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b55ca:	461c      	mov	r4, r3
   b55cc:	e7e2      	b.n	b5594 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b55ce:	4626      	mov	r6, r4
   b55d0:	e7e7      	b.n	b55a2 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   b55d2:	f8df a080 	ldr.w	sl, [pc, #128]	; b5654 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfc>
   b55d6:	092d      	lsrs	r5, r5, #4
   b55d8:	fb0a f505 	mul.w	r5, sl, r5
   b55dc:	2350      	movs	r3, #80	; 0x50
   b55de:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
   b55e2:	435d      	muls	r5, r3
   b55e4:	eb08 0b05 	add.w	fp, r8, r5
	      ++__new_finish;
   b55e8:	441d      	add	r5, r3
   b55ea:	4435      	add	r5, r6
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b55ec:	462b      	mov	r3, r5
   b55ee:	4659      	mov	r1, fp
      for (; __first != __last; ++__first, (void)++__cur)
   b55f0:	4549      	cmp	r1, r9
   b55f2:	f103 0350 	add.w	r3, r3, #80	; 0x50
   b55f6:	d00a      	beq.n	b560e <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb6>
   b55f8:	f1a3 0050 	sub.w	r0, r3, #80	; 0x50
   b55fc:	2250      	movs	r2, #80	; 0x50
   b55fe:	9101      	str	r1, [sp, #4]
   b5600:	9300      	str	r3, [sp, #0]
   b5602:	f009 fc58 	bl	beeb6 <memcpy>
   b5606:	9901      	ldr	r1, [sp, #4]
   b5608:	9b00      	ldr	r3, [sp, #0]
   b560a:	3150      	adds	r1, #80	; 0x50
   b560c:	e7f0      	b.n	b55f0 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
   b560e:	eba1 010b 	sub.w	r1, r1, fp
   b5612:	0909      	lsrs	r1, r1, #4
   b5614:	fb0a fa01 	mul.w	sl, sl, r1
   b5618:	f02a 4a70 	bic.w	sl, sl, #4026531840	; 0xf0000000
   b561c:	2350      	movs	r3, #80	; 0x50
   b561e:	fb03 550a 	mla	r5, r3, sl, r5
	if (__p)
   b5622:	f1b8 0f00 	cmp.w	r8, #0
   b5626:	d005      	beq.n	b5634 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xdc>
		    this->_M_impl._M_end_of_storage - __old_start);
   b5628:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b562a:	4640      	mov	r0, r8
   b562c:	eba1 0108 	sub.w	r1, r1, r8
   b5630:	f7fe fd35 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5634:	2050      	movs	r0, #80	; 0x50
   b5636:	fb00 6404 	mla	r4, r0, r4, r6
      this->_M_impl._M_finish = __new_finish;
   b563a:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b563e:	60bc      	str	r4, [r7, #8]
    }
   b5640:	b003      	add	sp, #12
   b5642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5646:	bf00      	nop
   b5648:	cccccccd 	.word	0xcccccccd
   b564c:	01999999 	.word	0x01999999
   b5650:	000c1378 	.word	0x000c1378
   b5654:	0ccccccd 	.word	0x0ccccccd

000b5658 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b5658:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b565a:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   b565e:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   b5660:	4604      	mov	r4, r0
   b5662:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5664:	d008      	beq.n	b5678 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x20>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5666:	b11b      	cbz	r3, b5670 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x18>
   b5668:	2250      	movs	r2, #80	; 0x50
   b566a:	4618      	mov	r0, r3
   b566c:	f009 fc23 	bl	beeb6 <memcpy>
	    ++this->_M_impl._M_finish;
   b5670:	6863      	ldr	r3, [r4, #4]
   b5672:	3350      	adds	r3, #80	; 0x50
   b5674:	6063      	str	r3, [r4, #4]
      }
   b5676:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   b5678:	4619      	mov	r1, r3
   b567a:	f7ff ff6d 	bl	b5558 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b567e:	e7fa      	b.n	b5676 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x1e>

000b5680 <_Z14processCommandPKchb.part.0>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b5680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5684:	b0ad      	sub	sp, #180	; 0xb4
   b5686:	af06      	add	r7, sp, #24
        rxIDBuf[0] = command[1];
   b5688:	7843      	ldrb	r3, [r0, #1]
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b568a:	60f9      	str	r1, [r7, #12]
   b568c:	4604      	mov	r4, r0
        uint8_t rxBotID = atoi(rxIDBuf);
   b568e:	f107 0014 	add.w	r0, r7, #20
        rxIDBuf[0] = command[1];
   b5692:	753b      	strb	r3, [r7, #20]
        uint8_t rxBotID = atoi(rxIDBuf);
   b5694:	f009 fbfb 	bl	bee8e <atoi>
   b5698:	60b8      	str	r0, [r7, #8]
   b569a:	f897 8008 	ldrb.w	r8, [r7, #8]
        if(rxBotID > 9) return;
   b569e:	f1b8 0f09 	cmp.w	r8, #9
        }
   b56a2:	46eb      	mov	fp, sp
        if(rxBotID > 9) return;
   b56a4:	d85e      	bhi.n	b5764 <_Z14processCommandPKchb.part.0+0xe4>
        char dataStr[strlen(command)-8];
   b56a6:	4620      	mov	r0, r4
   b56a8:	f009 fce1 	bl	bf06e <strlen>
   b56ac:	3801      	subs	r0, #1
   b56ae:	f020 0007 	bic.w	r0, r0, #7
   b56b2:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b56b6:	4620      	mov	r0, r4
   b56b8:	f009 fcd9 	bl	bf06e <strlen>
        char dataStr[strlen(command)-8];
   b56bc:	ae06      	add	r6, sp, #24
        dataStr[strlen(command)-9] = '\0';
   b56be:	4430      	add	r0, r6
   b56c0:	2500      	movs	r5, #0
   b56c2:	f800 5c09 	strb.w	r5, [r0, #-9]
        checkStr[0] = command[strlen(command)-2];
   b56c6:	4620      	mov	r0, r4
        cmdStr[3] = '\0';
   b56c8:	77fd      	strb	r5, [r7, #31]
        checkStr[0] = command[strlen(command)-2];
   b56ca:	f009 fcd0 	bl	bf06e <strlen>
   b56ce:	4420      	add	r0, r4
   b56d0:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b56d4:	763b      	strb	r3, [r7, #24]
        checkStr[1] = command[strlen(command)-1];
   b56d6:	4620      	mov	r0, r4
   b56d8:	f009 fcc9 	bl	bf06e <strlen>
   b56dc:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b56de:	4629      	mov	r1, r5
        checkStr[1] = command[strlen(command)-1];
   b56e0:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b56e4:	767b      	strb	r3, [r7, #25]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b56e6:	2210      	movs	r2, #16
   b56e8:	f107 0018 	add.w	r0, r7, #24
        checkStr[2] = '\0';
   b56ec:	76bd      	strb	r5, [r7, #26]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b56ee:	f00a fbab 	bl	bfe48 <strtol>
   b56f2:	4681      	mov	r9, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b56f4:	fa5f f989 	uxtb.w	r9, r9
   b56f8:	f008 fb3e 	bl	bdd78 <_Z16_fetch_usbserialv>
   b56fc:	4960      	ldr	r1, [pc, #384]	; (b5880 <_Z14processCommandPKchb.part.0+0x200>)
   b56fe:	464b      	mov	r3, r9
   b5700:	464a      	mov	r2, r9
   b5702:	f7fe fdf1 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b5706:	2504      	movs	r5, #4
   b5708:	4620      	mov	r0, r4
   b570a:	f009 fcb0 	bl	bf06e <strlen>
   b570e:	3802      	subs	r0, #2
   b5710:	4285      	cmp	r5, r0
   b5712:	d211      	bcs.n	b5738 <_Z14processCommandPKchb.part.0+0xb8>
            if(i < 7) cmdStr[i-4] = command[i];
   b5714:	2d06      	cmp	r5, #6
   b5716:	bf9b      	ittet	ls
   b5718:	f107 0398 	addls.w	r3, r7, #152	; 0x98
   b571c:	195b      	addls	r3, r3, r5
            else dataStr[i-7] = command[i];
   b571e:	1973      	addhi	r3, r6, r5
            if(i < 7) cmdStr[i-4] = command[i];
   b5720:	5d62      	ldrbls	r2, [r4, r5]
            else dataStr[i-7] = command[i];
   b5722:	bf8c      	ite	hi
   b5724:	5d62      	ldrbhi	r2, [r4, r5]
            if(i < 7) cmdStr[i-4] = command[i];
   b5726:	f803 2c80 	strbls.w	r2, [r3, #-128]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b572a:	f105 0501 	add.w	r5, r5, #1
            else dataStr[i-7] = command[i];
   b572e:	bf88      	it	hi
   b5730:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b5734:	b2ed      	uxtb	r5, r5
   b5736:	e7e7      	b.n	b5708 <_Z14processCommandPKchb.part.0+0x88>
        if(checksum != strlen(command)-2){
   b5738:	4548      	cmp	r0, r9
   b573a:	d018      	beq.n	b576e <_Z14processCommandPKchb.part.0+0xee>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b573c:	f008 fb1c 	bl	bdd78 <_Z16_fetch_usbserialv>
   b5740:	4605      	mov	r5, r0
   b5742:	4620      	mov	r0, r4
   b5744:	f009 fc93 	bl	bf06e <strlen>
   b5748:	494e      	ldr	r1, [pc, #312]	; (b5884 <_Z14processCommandPKchb.part.0+0x204>)
   b574a:	1e82      	subs	r2, r0, #2
   b574c:	464b      	mov	r3, r9
   b574e:	4628      	mov	r0, r5
   b5750:	f7fe fdca 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
            Serial.println("Warning, checksum does not match");
   b5754:	f008 fb10 	bl	bdd78 <_Z16_fetch_usbserialv>
   b5758:	494b      	ldr	r1, [pc, #300]	; (b5888 <_Z14processCommandPKchb.part.0+0x208>)
   b575a:	f007 ff00 	bl	bd55e <_ZN5Print7printlnEPKc>
            logMessage("[WARN] Warning, checksum does not match!");
   b575e:	484b      	ldr	r0, [pc, #300]	; (b588c <_Z14processCommandPKchb.part.0+0x20c>)
   b5760:	f7ff f816 	bl	b4790 <_Z10logMessagePKc>
}
   b5764:	379c      	adds	r7, #156	; 0x9c
   b5766:	46dd      	mov	sp, fp
   b5768:	46bd      	mov	sp, r7
   b576a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      : _M_current(__i) { }
   b576e:	f8df a120 	ldr.w	sl, [pc, #288]	; b5890 <_Z14processCommandPKchb.part.0+0x210>
   b5772:	f8da 4000 	ldr.w	r4, [sl]
   b5776:	f8da 3004 	ldr.w	r3, [sl, #4]
   b577a:	607b      	str	r3, [r7, #4]
        int index = 0;
   b577c:	2100      	movs	r1, #0
   b577e:	46a1      	mov	r9, r4
        WaterBot *TargetWB = nullptr;
   b5780:	460d      	mov	r5, r1
        bool newBot = true;
   b5782:	2301      	movs	r3, #1
        for(WaterBot w: WaterBots){
   b5784:	687a      	ldr	r2, [r7, #4]
   b5786:	454a      	cmp	r2, r9
   b5788:	d00e      	beq.n	b57a8 <_Z14processCommandPKchb.part.0+0x128>
            if(rxBotID == w.botNum){
   b578a:	f899 2002 	ldrb.w	r2, [r9, #2]
   b578e:	4542      	cmp	r2, r8
   b5790:	d106      	bne.n	b57a0 <_Z14processCommandPKchb.part.0+0x120>
                TargetWB = &WaterBots.at(index);
   b5792:	4650      	mov	r0, sl
   b5794:	6039      	str	r1, [r7, #0]
   b5796:	f7ff fcd1 	bl	b513c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
                newBot = false;
   b579a:	6839      	ldr	r1, [r7, #0]
                TargetWB = &WaterBots.at(index);
   b579c:	4605      	mov	r5, r0
                newBot = false;
   b579e:	2300      	movs	r3, #0
            index++;
   b57a0:	3101      	adds	r1, #1
      operator++() _GLIBCXX_NOEXCEPT
   b57a2:	f109 0950 	add.w	r9, r9, #80	; 0x50
	return *this;
   b57a6:	e7ed      	b.n	b5784 <_Z14processCommandPKchb.part.0+0x104>
        if(newBot){
   b57a8:	2b00      	cmp	r3, #0
   b57aa:	d07d      	beq.n	b58a8 <_Z14processCommandPKchb.part.0+0x228>
            WaterBot newWaterbot;
   b57ac:	f107 0048 	add.w	r0, r7, #72	; 0x48
   b57b0:	f7ff f80e 	bl	b47d0 <_ZN8WaterBotC1Ev>
            WaterBots.push_back(newWaterbot);
   b57b4:	4836      	ldr	r0, [pc, #216]	; (b5890 <_Z14processCommandPKchb.part.0+0x210>)
            newWaterbot.botNum = rxBotID;
   b57b6:	f887 804a 	strb.w	r8, [r7, #74]	; 0x4a
            WaterBots.push_back(newWaterbot);
   b57ba:	f107 0148 	add.w	r1, r7, #72	; 0x48
   b57be:	f7ff ff4b 	bl	b5658 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      { return __normal_iterator(_M_current - __n); }
   b57c2:	f8da 5004 	ldr.w	r5, [sl, #4]
            redrawMenu = true;
   b57c6:	4b33      	ldr	r3, [pc, #204]	; (b5894 <_Z14processCommandPKchb.part.0+0x214>)
   b57c8:	2201      	movs	r2, #1
   b57ca:	3d50      	subs	r5, #80	; 0x50
   b57cc:	701a      	strb	r2, [r3, #0]
        if(!strcmp(cmdStr,"sns")){
   b57ce:	4932      	ldr	r1, [pc, #200]	; (b5898 <_Z14processCommandPKchb.part.0+0x218>)
   b57d0:	f107 001c 	add.w	r0, r7, #28
   b57d4:	f009 fc1b 	bl	bf00e <strcmp>
   b57d8:	2800      	cmp	r0, #0
   b57da:	f040 8168 	bne.w	b5aae <_Z14processCommandPKchb.part.0+0x42e>
            sscanf(dataStr,"%s %s %d %d %d %d %d",GPSLatstr,GPSLonstr,&do_in,&pH_in,&cond_in,&mcond_in,&temp_in);
   b57de:	f107 0330 	add.w	r3, r7, #48	; 0x30
   b57e2:	9304      	str	r3, [sp, #16]
   b57e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   b57e8:	9303      	str	r3, [sp, #12]
   b57ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b57ee:	9302      	str	r3, [sp, #8]
   b57f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
   b57f4:	9301      	str	r3, [sp, #4]
   b57f6:	f107 0320 	add.w	r3, r7, #32
   b57fa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   b57fe:	4927      	ldr	r1, [pc, #156]	; (b589c <_Z14processCommandPKchb.part.0+0x21c>)
   b5800:	9300      	str	r3, [sp, #0]
   b5802:	4630      	mov	r0, r6
   b5804:	f107 0348 	add.w	r3, r7, #72	; 0x48
   b5808:	f004 fe0e 	bl	ba428 <sscanf>
            TargetWB->DO = ((float)do_in)/1000.0;
   b580c:	edd7 7a08 	vldr	s15, [r7, #32]
   b5810:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   b5814:	eddf 7a22 	vldr	s15, [pc, #136]	; b58a0 <_Z14processCommandPKchb.part.0+0x220>
   b5818:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b581c:	edc5 6a0d 	vstr	s13, [r5, #52]	; 0x34
            TargetWB->pH = ((float)pH_in)/1000.0;
   b5820:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
   b5824:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b5828:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b582c:	edc5 6a0b 	vstr	s13, [r5, #44]	; 0x2c
            TargetWB->Cond = ((float)cond_in)/1000.0;
   b5830:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
   b5834:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b5838:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b583c:	edc5 6a0e 	vstr	s13, [r5, #56]	; 0x38
            TargetWB->MCond = ((float)mcond_in)/1000.0;
   b5840:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
   b5844:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b5848:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b584c:	edc5 6a0f 	vstr	s13, [r5, #60]	; 0x3c
            TargetWB->temp = ((float)temp_in)/1000.0;
   b5850:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
   b5854:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b5858:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b585c:	edc5 6a0c 	vstr	s13, [r5, #48]	; 0x30
            Serial.printlnf("Bot #: %d Temp: %f", TargetWB->botNum,TargetWB->temp);
   b5860:	f008 fa8a 	bl	bdd78 <_Z16_fetch_usbserialv>
   b5864:	78aa      	ldrb	r2, [r5, #2]
   b5866:	60fa      	str	r2, [r7, #12]
   b5868:	4604      	mov	r4, r0
   b586a:	6b28      	ldr	r0, [r5, #48]	; 0x30
   b586c:	f008 ff86 	bl	be77c <__aeabi_f2d>
   b5870:	e9cd 0100 	strd	r0, r1, [sp]
   b5874:	68fa      	ldr	r2, [r7, #12]
   b5876:	490b      	ldr	r1, [pc, #44]	; (b58a4 <_Z14processCommandPKchb.part.0+0x224>)
   b5878:	4620      	mov	r0, r4
   b587a:	f7fe fd35 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
   b587e:	e771      	b.n	b5764 <_Z14processCommandPKchb.part.0+0xe4>
   b5880:	000c13db 	.word	0x000c13db
   b5884:	000c11c4 	.word	0x000c11c4
   b5888:	000c1211 	.word	0x000c1211
   b588c:	000c13f0 	.word	0x000c13f0
   b5890:	2003dce4 	.word	0x2003dce4
   b5894:	2003daaa 	.word	0x2003daaa
   b5898:	000c1838 	.word	0x000c1838
   b589c:	000c143e 	.word	0x000c143e
   b58a0:	447a0000 	.word	0x447a0000
   b58a4:	000c1453 	.word	0x000c1453
        else if(!strcmp(cmdStr,"sup")){
   b58a8:	49b2      	ldr	r1, [pc, #712]	; (b5b74 <_Z14processCommandPKchb.part.0+0x4f4>)
   b58aa:	f107 001c 	add.w	r0, r7, #28
   b58ae:	f009 fbae 	bl	bf00e <strcmp>
   b58b2:	2800      	cmp	r0, #0
   b58b4:	d18b      	bne.n	b57ce <_Z14processCommandPKchb.part.0+0x14e>
            for(WaterBot &w: WaterBots){
   b58b6:	45a1      	cmp	r9, r4
   b58b8:	d089      	beq.n	b57ce <_Z14processCommandPKchb.part.0+0x14e>
                if(rxBotID == w.botNum){
   b58ba:	78a3      	ldrb	r3, [r4, #2]
   b58bc:	4543      	cmp	r3, r8
   b58be:	f040 80f4 	bne.w	b5aaa <_Z14processCommandPKchb.part.0+0x42a>
                    sscanf(dataStr,"%u %u %s %s %d %d",&battpct,&statflags,testLat,testLon, &battPwr, &panelPwr);
   b58c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b58c6:	9303      	str	r3, [sp, #12]
   b58c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   b58cc:	9302      	str	r3, [sp, #8]
   b58ce:	f107 0a3c 	add.w	sl, r7, #60	; 0x3c
   b58d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
   b58d6:	49a8      	ldr	r1, [pc, #672]	; (b5b78 <_Z14processCommandPKchb.part.0+0x4f8>)
   b58d8:	9300      	str	r3, [sp, #0]
   b58da:	f107 0220 	add.w	r2, r7, #32
   b58de:	f107 0324 	add.w	r3, r7, #36	; 0x24
   b58e2:	f8cd a004 	str.w	sl, [sp, #4]
   b58e6:	4630      	mov	r0, r6
   b58e8:	f004 fd9e 	bl	ba428 <sscanf>
                    w.battPercent = battpct;
   b58ec:	f897 3020 	ldrb.w	r3, [r7, #32]
   b58f0:	80a3      	strh	r3, [r4, #4]
                    w.LTEAvail = statflags & 1;
   b58f2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
   b58f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   b58f8:	f002 0201 	and.w	r2, r2, #1
   b58fc:	7222      	strb	r2, [r4, #8]
                    w.XBeeAvail = (statflags >> 1) & 1;
   b58fe:	f3c3 0240 	ubfx	r2, r3, #1, #1
   b5902:	7262      	strb	r2, [r4, #9]
                    w.BLEAvail = (statflags >> 2) & 1;
   b5904:	f3c3 0280 	ubfx	r2, r3, #2, #1
   b5908:	71e2      	strb	r2, [r4, #7]
                    w.lowBatt = (statflags >> 6) & 1;
   b590a:	f3c3 1280 	ubfx	r2, r3, #6, #1
   b590e:	7462      	strb	r2, [r4, #17]
                    w.GPSAvail = (statflags >> 8) & 1;
   b5910:	f3c3 2200 	ubfx	r2, r3, #8, #1
   b5914:	72a2      	strb	r2, [r4, #10]
                    w.CompassAvail = (statflags >> 9) & 1;
   b5916:	f3c3 2240 	ubfx	r2, r3, #9, #1
                    w.SDAvail = (statflags >> 10) & 1;
   b591a:	f3c3 2380 	ubfx	r3, r3, #10, #1
                    w.CompassAvail = (statflags >> 9) & 1;
   b591e:	72e2      	strb	r2, [r4, #11]
                    w.SDAvail = (statflags >> 10) & 1;
   b5920:	7323      	strb	r3, [r4, #12]
                    w.GPSLat = atof(testLat);
   b5922:	f107 0030 	add.w	r0, r7, #48	; 0x30
   b5926:	f009 faaf 	bl	bee88 <atof>
   b592a:	ec51 0b10 	vmov	r0, r1, d0
   b592e:	f009 fa37 	bl	beda0 <__aeabi_d2f>
   b5932:	6220      	str	r0, [r4, #32]
                    w.GPSLon = atof(testLon);
   b5934:	4650      	mov	r0, sl
   b5936:	f009 faa7 	bl	bee88 <atof>
   b593a:	ec51 0b10 	vmov	r0, r1, d0
   b593e:	f009 fa2f 	bl	beda0 <__aeabi_d2f>
   b5942:	6260      	str	r0, [r4, #36]	; 0x24
                    w.panelPower = panelPwr;
   b5944:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   b5946:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
                    w.battPower = battPwr;
   b594a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   b594c:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
                    w.updatedStatus = true;
   b5950:	2301      	movs	r3, #1
   b5952:	7023      	strb	r3, [r4, #0]
   b5954:	f004 fabc 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
                    if(millis() - w.publishTime > WB_MOD_UPDATE_TIME){
   b5958:	6c63      	ldr	r3, [r4, #68]	; 0x44
   b595a:	1ac0      	subs	r0, r0, r3
   b595c:	f64e 2360 	movw	r3, #60000	; 0xea60
   b5960:	4298      	cmp	r0, r3
   b5962:	d909      	bls.n	b5978 <_Z14processCommandPKchb.part.0+0x2f8>
                        w.offloading = (statflags >> 3) & 1;
   b5964:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   b5966:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   b596a:	75a2      	strb	r2, [r4, #22]
                        w.driveMode = (statflags >> 4) & 3;
   b596c:	f3c3 1201 	ubfx	r2, r3, #4, #2
                        w.dataRecording = (statflags >> 7) & 1;
   b5970:	f3c3 13c0 	ubfx	r3, r3, #7, #1
                        w.driveMode = (statflags >> 4) & 3;
   b5974:	81e2      	strh	r2, [r4, #14]
                        w.dataRecording = (statflags >> 7) & 1;
   b5976:	7563      	strb	r3, [r4, #21]
                    if(w.lowBatt && !w.warnedLowBatt){
   b5978:	7c63      	ldrb	r3, [r4, #17]
   b597a:	b363      	cbz	r3, b59d6 <_Z14processCommandPKchb.part.0+0x356>
   b597c:	7ca3      	ldrb	r3, [r4, #18]
   b597e:	bb53      	cbnz	r3, b59d6 <_Z14processCommandPKchb.part.0+0x356>
                        w.warnedLowBatt = true;
   b5980:	f04f 0a01 	mov.w	sl, #1
   b5984:	f884 a012 	strb.w	sl, [r4, #18]
                        sprintf(m.primaryLine,"Warning\0");
   b5988:	497c      	ldr	r1, [pc, #496]	; (b5b7c <_Z14processCommandPKchb.part.0+0x4fc>)
class MenuPopUp{
   b598a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                        sprintf(m.primaryLine,"Warning\0");
   b598e:	f107 0048 	add.w	r0, r7, #72	; 0x48
class MenuPopUp{
   b5992:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
   b5996:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
                        sprintf(m.primaryLine,"Warning\0");
   b599a:	f009 fb42 	bl	bf022 <strcpy>
                        sprintf(m.secondaryLine,"Bot %d\0", w.botNum);
   b599e:	78a2      	ldrb	r2, [r4, #2]
   b59a0:	4977      	ldr	r1, [pc, #476]	; (b5b80 <_Z14processCommandPKchb.part.0+0x500>)
   b59a2:	f107 0052 	add.w	r0, r7, #82	; 0x52
   b59a6:	f004 fd37 	bl	ba418 <sprintf>
                        sprintf(m.tertiaryLine, "Low Battery: %d\0",w.battPercent);
   b59aa:	88a2      	ldrh	r2, [r4, #4]
   b59ac:	4975      	ldr	r1, [pc, #468]	; (b5b84 <_Z14processCommandPKchb.part.0+0x504>)
   b59ae:	f107 0070 	add.w	r0, r7, #112	; 0x70
   b59b2:	f004 fd31 	bl	ba418 <sprintf>
                        m.primaryStart = 20;
   b59b6:	2314      	movs	r3, #20
                        m.secondaryStart = 40;
   b59b8:	2228      	movs	r2, #40	; 0x28
                        PopUps.push_back(m);
   b59ba:	4873      	ldr	r0, [pc, #460]	; (b5b88 <_Z14processCommandPKchb.part.0+0x508>)
                        m.primaryStart = 20;
   b59bc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                        PopUps.push_back(m);
   b59c0:	f107 0148 	add.w	r1, r7, #72	; 0x48
                        m.tertiaryStart = 20;
   b59c4:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
                        m.secondaryStart = 40;
   b59c8:	f887 208f 	strb.w	r2, [r7, #143]	; 0x8f
                        PopUps.push_back(m);
   b59cc:	f7ff fd4c 	bl	b5468 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>
                        redrawMenu = true;
   b59d0:	4b6e      	ldr	r3, [pc, #440]	; (b5b8c <_Z14processCommandPKchb.part.0+0x50c>)
   b59d2:	f883 a000 	strb.w	sl, [r3]
                    if(!w.SDAvail && !w.warnedSDCard){
   b59d6:	7b23      	ldrb	r3, [r4, #12]
   b59d8:	bb5b      	cbnz	r3, b5a32 <_Z14processCommandPKchb.part.0+0x3b2>
   b59da:	7ce3      	ldrb	r3, [r4, #19]
   b59dc:	bb4b      	cbnz	r3, b5a32 <_Z14processCommandPKchb.part.0+0x3b2>
                        w.warnedSDCard = true;
   b59de:	f04f 0a01 	mov.w	sl, #1
   b59e2:	f884 a013 	strb.w	sl, [r4, #19]
                        sprintf(m.primaryLine,"Warning\0");
   b59e6:	4965      	ldr	r1, [pc, #404]	; (b5b7c <_Z14processCommandPKchb.part.0+0x4fc>)
class MenuPopUp{
   b59e8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                        sprintf(m.primaryLine,"Warning\0");
   b59ec:	f107 0048 	add.w	r0, r7, #72	; 0x48
class MenuPopUp{
   b59f0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
   b59f4:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
                        sprintf(m.primaryLine,"Warning\0");
   b59f8:	f009 fb13 	bl	bf022 <strcpy>
                        sprintf(m.secondaryLine,"Bot %d\0", w.botNum);
   b59fc:	78a2      	ldrb	r2, [r4, #2]
   b59fe:	4960      	ldr	r1, [pc, #384]	; (b5b80 <_Z14processCommandPKchb.part.0+0x500>)
   b5a00:	f107 0052 	add.w	r0, r7, #82	; 0x52
   b5a04:	f004 fd08 	bl	ba418 <sprintf>
                        sprintf(m.tertiaryLine, "SD Card Failed\0");
   b5a08:	4961      	ldr	r1, [pc, #388]	; (b5b90 <_Z14processCommandPKchb.part.0+0x510>)
   b5a0a:	f107 0070 	add.w	r0, r7, #112	; 0x70
   b5a0e:	f009 fb08 	bl	bf022 <strcpy>
                        m.primaryStart = 20;
   b5a12:	2314      	movs	r3, #20
                        m.secondaryStart = 40;
   b5a14:	2228      	movs	r2, #40	; 0x28
                        PopUps.push_back(m);
   b5a16:	485c      	ldr	r0, [pc, #368]	; (b5b88 <_Z14processCommandPKchb.part.0+0x508>)
                        m.primaryStart = 20;
   b5a18:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                        PopUps.push_back(m);
   b5a1c:	f107 0148 	add.w	r1, r7, #72	; 0x48
                        m.tertiaryStart = 20;
   b5a20:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
                        m.secondaryStart = 40;
   b5a24:	f887 208f 	strb.w	r2, [r7, #143]	; 0x8f
                        PopUps.push_back(m);
   b5a28:	f7ff fd1e 	bl	b5468 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>
                        redrawMenu = true;
   b5a2c:	4b57      	ldr	r3, [pc, #348]	; (b5b8c <_Z14processCommandPKchb.part.0+0x50c>)
   b5a2e:	f883 a000 	strb.w	sl, [r3]
                    if((!w.CompassAvail || !w.GPSAvail) && !w.warnedTelem){
   b5a32:	7ae3      	ldrb	r3, [r4, #11]
   b5a34:	b10b      	cbz	r3, b5a3a <_Z14processCommandPKchb.part.0+0x3ba>
   b5a36:	7aa3      	ldrb	r3, [r4, #10]
   b5a38:	bb63      	cbnz	r3, b5a94 <_Z14processCommandPKchb.part.0+0x414>
   b5a3a:	7d23      	ldrb	r3, [r4, #20]
   b5a3c:	bb53      	cbnz	r3, b5a94 <_Z14processCommandPKchb.part.0+0x414>
                        w.warnedTelem = true;
   b5a3e:	f04f 0a01 	mov.w	sl, #1
class MenuPopUp{
   b5a42:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
   b5a46:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
   b5a4a:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
                        sprintf(m.primaryLine,"Warning\0");
   b5a4e:	494b      	ldr	r1, [pc, #300]	; (b5b7c <_Z14processCommandPKchb.part.0+0x4fc>)
                        w.warnedTelem = true;
   b5a50:	f884 a014 	strb.w	sl, [r4, #20]
                        sprintf(m.primaryLine,"Warning\0");
   b5a54:	f107 0048 	add.w	r0, r7, #72	; 0x48
   b5a58:	f009 fae3 	bl	bf022 <strcpy>
                        sprintf(m.secondaryLine,"Bot %d\0", w.botNum);
   b5a5c:	78a2      	ldrb	r2, [r4, #2]
   b5a5e:	4948      	ldr	r1, [pc, #288]	; (b5b80 <_Z14processCommandPKchb.part.0+0x500>)
   b5a60:	f107 0052 	add.w	r0, r7, #82	; 0x52
   b5a64:	f004 fcd8 	bl	ba418 <sprintf>
                        sprintf(m.tertiaryLine, "GPS/Compass Error\0");
   b5a68:	494a      	ldr	r1, [pc, #296]	; (b5b94 <_Z14processCommandPKchb.part.0+0x514>)
   b5a6a:	f107 0070 	add.w	r0, r7, #112	; 0x70
   b5a6e:	f009 fad8 	bl	bf022 <strcpy>
                        m.primaryStart = 20;
   b5a72:	2314      	movs	r3, #20
   b5a74:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                        m.secondaryStart = 40;
   b5a78:	2328      	movs	r3, #40	; 0x28
   b5a7a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                        PopUps.push_back(m);
   b5a7e:	4842      	ldr	r0, [pc, #264]	; (b5b88 <_Z14processCommandPKchb.part.0+0x508>)
                        m.tertiaryStart = 10;
   b5a80:	230a      	movs	r3, #10
                        PopUps.push_back(m);
   b5a82:	f107 0148 	add.w	r1, r7, #72	; 0x48
                        m.tertiaryStart = 10;
   b5a86:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
                        PopUps.push_back(m);
   b5a8a:	f7ff fced 	bl	b5468 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>
                        redrawMenu = true;
   b5a8e:	4b3f      	ldr	r3, [pc, #252]	; (b5b8c <_Z14processCommandPKchb.part.0+0x50c>)
   b5a90:	f883 a000 	strb.w	sl, [r3]
                    if(botSelect == w.botNum) redrawMenu = true;
   b5a94:	4b40      	ldr	r3, [pc, #256]	; (b5b98 <_Z14processCommandPKchb.part.0+0x518>)
   b5a96:	78a2      	ldrb	r2, [r4, #2]
   b5a98:	781b      	ldrb	r3, [r3, #0]
                    logMessage("Status Update!");
   b5a9a:	4840      	ldr	r0, [pc, #256]	; (b5b9c <_Z14processCommandPKchb.part.0+0x51c>)
                    if(botSelect == w.botNum) redrawMenu = true;
   b5a9c:	429a      	cmp	r2, r3
   b5a9e:	bf02      	ittt	eq
   b5aa0:	4b3a      	ldreq	r3, [pc, #232]	; (b5b8c <_Z14processCommandPKchb.part.0+0x50c>)
   b5aa2:	2201      	moveq	r2, #1
   b5aa4:	701a      	strbeq	r2, [r3, #0]
                    logMessage("Status Update!");
   b5aa6:	f7fe fe73 	bl	b4790 <_Z10logMessagePKc>
      operator++() _GLIBCXX_NOEXCEPT
   b5aaa:	3450      	adds	r4, #80	; 0x50
	return *this;
   b5aac:	e703      	b.n	b58b6 <_Z14processCommandPKchb.part.0+0x236>
        else if(!strcmp(cmdStr,"hwd")){  //Hello World! - Received startup pairing message
   b5aae:	493c      	ldr	r1, [pc, #240]	; (b5ba0 <_Z14processCommandPKchb.part.0+0x520>)
   b5ab0:	f107 001c 	add.w	r0, r7, #28
   b5ab4:	f009 faab 	bl	bf00e <strcmp>
   b5ab8:	2800      	cmp	r0, #0
   b5aba:	d13a      	bne.n	b5b32 <_Z14processCommandPKchb.part.0+0x4b2>
      : _M_current(__i) { }
   b5abc:	4b39      	ldr	r3, [pc, #228]	; (b5ba4 <_Z14processCommandPKchb.part.0+0x524>)
   b5abe:	e9d3 3000 	ldrd	r3, r0, [r3]
            bool newBot = true;
   b5ac2:	2201      	movs	r2, #1
            for(WaterBot w: WaterBots){
   b5ac4:	4283      	cmp	r3, r0
   b5ac6:	d005      	beq.n	b5ad4 <_Z14processCommandPKchb.part.0+0x454>
                if(rxBotID == w.botNum) newBot = false;
   b5ac8:	7899      	ldrb	r1, [r3, #2]
   b5aca:	3350      	adds	r3, #80	; 0x50
   b5acc:	4541      	cmp	r1, r8
   b5ace:	bf08      	it	eq
   b5ad0:	2200      	moveq	r2, #0
	return *this;
   b5ad2:	e7f7      	b.n	b5ac4 <_Z14processCommandPKchb.part.0+0x444>
            if(newBot){
   b5ad4:	2a00      	cmp	r2, #0
   b5ad6:	f43f ae45 	beq.w	b5764 <_Z14processCommandPKchb.part.0+0xe4>
                Serial.println("Found a new water bot ID");
   b5ada:	f008 f94d 	bl	bdd78 <_Z16_fetch_usbserialv>
   b5ade:	4932      	ldr	r1, [pc, #200]	; (b5ba8 <_Z14processCommandPKchb.part.0+0x528>)
   b5ae0:	f007 fd3d 	bl	bd55e <_ZN5Print7printlnEPKc>
                WaterBot newWaterbot;
   b5ae4:	f107 0048 	add.w	r0, r7, #72	; 0x48
   b5ae8:	f7fe fe72 	bl	b47d0 <_ZN8WaterBotC1Ev>
                if(mode == 1) newWaterbot.BLEAvail = true;
   b5aec:	68fb      	ldr	r3, [r7, #12]
   b5aee:	2b01      	cmp	r3, #1
   b5af0:	d111      	bne.n	b5b16 <_Z14processCommandPKchb.part.0+0x496>
   b5af2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                WaterBots.push_back(newWaterbot);
   b5af6:	482b      	ldr	r0, [pc, #172]	; (b5ba4 <_Z14processCommandPKchb.part.0+0x524>)
                newWaterbot.botNum = rxBotID;
   b5af8:	f887 804a 	strb.w	r8, [r7, #74]	; 0x4a
                WaterBots.push_back(newWaterbot);
   b5afc:	f107 0148 	add.w	r1, r7, #72	; 0x48
   b5b00:	f7ff fdaa 	bl	b5658 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
                PairBots.push_back(newWaterbot);
   b5b04:	4829      	ldr	r0, [pc, #164]	; (b5bac <_Z14processCommandPKchb.part.0+0x52c>)
   b5b06:	f107 0148 	add.w	r1, r7, #72	; 0x48
   b5b0a:	f7ff fda5 	bl	b5658 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
            redrawMenu = true;
   b5b0e:	4b1f      	ldr	r3, [pc, #124]	; (b5b8c <_Z14processCommandPKchb.part.0+0x50c>)
   b5b10:	2201      	movs	r2, #1
   b5b12:	701a      	strb	r2, [r3, #0]
   b5b14:	e626      	b.n	b5764 <_Z14processCommandPKchb.part.0+0xe4>
                else if(mode == 2) newWaterbot.XBeeAvail = true;
   b5b16:	68fb      	ldr	r3, [r7, #12]
   b5b18:	2b02      	cmp	r3, #2
   b5b1a:	f04f 0301 	mov.w	r3, #1
   b5b1e:	d102      	bne.n	b5b26 <_Z14processCommandPKchb.part.0+0x4a6>
   b5b20:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
   b5b24:	e7e7      	b.n	b5af6 <_Z14processCommandPKchb.part.0+0x476>
                else if(mode == 3) newWaterbot.LTEAvail = true;
   b5b26:	68fa      	ldr	r2, [r7, #12]
   b5b28:	2a03      	cmp	r2, #3
   b5b2a:	bf08      	it	eq
   b5b2c:	f887 3050 	strbeq.w	r3, [r7, #80]	; 0x50
   b5b30:	e7e1      	b.n	b5af6 <_Z14processCommandPKchb.part.0+0x476>
        else if(!strcmp(cmdStr,"pts")){
   b5b32:	491f      	ldr	r1, [pc, #124]	; (b5bb0 <_Z14processCommandPKchb.part.0+0x530>)
   b5b34:	f107 001c 	add.w	r0, r7, #28
   b5b38:	f009 fa69 	bl	bf00e <strcmp>
   b5b3c:	2800      	cmp	r0, #0
   b5b3e:	d13f      	bne.n	b5bc0 <_Z14processCommandPKchb.part.0+0x540>
   b5b40:	4c1c      	ldr	r4, [pc, #112]	; (b5bb4 <_Z14processCommandPKchb.part.0+0x534>)
            if(!logFile.isOpen()){
   b5b42:	7c23      	ldrb	r3, [r4, #16]
   b5b44:	b983      	cbnz	r3, b5b68 <_Z14processCommandPKchb.part.0+0x4e8>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5b46:	491c      	ldr	r1, [pc, #112]	; (b5bb8 <_Z14processCommandPKchb.part.0+0x538>)
   b5b48:	f244 2202 	movw	r2, #16898	; 0x4202
   b5b4c:	f104 0010 	add.w	r0, r4, #16
   b5b50:	f7fe fd2e 	bl	b45b0 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b5b54:	4919      	ldr	r1, [pc, #100]	; (b5bbc <_Z14processCommandPKchb.part.0+0x53c>)
   b5b56:	4632      	mov	r2, r6
   b5b58:	4620      	mov	r0, r4
   b5b5a:	f7fe fbc5 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b5b5e:	f104 0010 	add.w	r0, r4, #16
   b5b62:	f001 fedb 	bl	b791c <_ZN7FatFile5closeEv>
   b5b66:	e5fd      	b.n	b5764 <_Z14processCommandPKchb.part.0+0xe4>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b5b68:	4914      	ldr	r1, [pc, #80]	; (b5bbc <_Z14processCommandPKchb.part.0+0x53c>)
   b5b6a:	4632      	mov	r2, r6
   b5b6c:	4620      	mov	r0, r4
   b5b6e:	f7fe fbbb 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
   b5b72:	e5f7      	b.n	b5764 <_Z14processCommandPKchb.part.0+0xe4>
   b5b74:	000c1419 	.word	0x000c1419
   b5b78:	000c141d 	.word	0x000c141d
   b5b7c:	000c18a6 	.word	0x000c18a6
   b5b80:	000c18af 	.word	0x000c18af
   b5b84:	000c18b7 	.word	0x000c18b7
   b5b88:	2003dcc4 	.word	0x2003dcc4
   b5b8c:	2003daaa 	.word	0x2003daaa
   b5b90:	000c18c8 	.word	0x000c18c8
   b5b94:	000c18d8 	.word	0x000c18d8
   b5b98:	2003dd64 	.word	0x2003dd64
   b5b9c:	000c142f 	.word	0x000c142f
   b5ba0:	000c1466 	.word	0x000c1466
   b5ba4:	2003dce4 	.word	0x2003dce4
   b5ba8:	000c146a 	.word	0x000c146a
   b5bac:	2003dcb8 	.word	0x2003dcb8
   b5bb0:	000c1483 	.word	0x000c1483
   b5bb4:	2003ddd0 	.word	0x2003ddd0
   b5bb8:	2003dd78 	.word	0x2003dd78
   b5bbc:	000c1487 	.word	0x000c1487
        else if(!strcmp(cmdStr,"ldt") || !strcmp(cmdStr,"ldb")){
   b5bc0:	492f      	ldr	r1, [pc, #188]	; (b5c80 <_Z14processCommandPKchb.part.0+0x600>)
   b5bc2:	f107 001c 	add.w	r0, r7, #28
   b5bc6:	f009 fa22 	bl	bf00e <strcmp>
   b5bca:	b128      	cbz	r0, b5bd8 <_Z14processCommandPKchb.part.0+0x558>
   b5bcc:	492d      	ldr	r1, [pc, #180]	; (b5c84 <_Z14processCommandPKchb.part.0+0x604>)
   b5bce:	f107 001c 	add.w	r0, r7, #28
   b5bd2:	f009 fa1c 	bl	bf00e <strcmp>
   b5bd6:	bb28      	cbnz	r0, b5c24 <_Z14processCommandPKchb.part.0+0x5a4>
class MenuPopUp{
   b5bd8:	2300      	movs	r3, #0
            sprintf(m.primaryLine,"Warning\0");
   b5bda:	492b      	ldr	r1, [pc, #172]	; (b5c88 <_Z14processCommandPKchb.part.0+0x608>)
class MenuPopUp{
   b5bdc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
            sprintf(m.primaryLine,"Warning\0");
   b5be0:	f107 0048 	add.w	r0, r7, #72	; 0x48
class MenuPopUp{
   b5be4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
   b5be8:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            sprintf(m.primaryLine,"Warning\0");
   b5bec:	f009 fa19 	bl	bf022 <strcpy>
            sprintf(m.secondaryLine,"Bot %d\0", rxBotID);
   b5bf0:	7a3a      	ldrb	r2, [r7, #8]
   b5bf2:	4926      	ldr	r1, [pc, #152]	; (b5c8c <_Z14processCommandPKchb.part.0+0x60c>)
   b5bf4:	f107 0052 	add.w	r0, r7, #82	; 0x52
   b5bf8:	f004 fc0e 	bl	ba418 <sprintf>
            sprintf(m.tertiaryLine, "Leak shutoff\0");
   b5bfc:	4924      	ldr	r1, [pc, #144]	; (b5c90 <_Z14processCommandPKchb.part.0+0x610>)
   b5bfe:	f107 0070 	add.w	r0, r7, #112	; 0x70
   b5c02:	f009 fa0e 	bl	bf022 <strcpy>
            m.primaryStart = 20;
   b5c06:	2314      	movs	r3, #20
   b5c08:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
            m.secondaryStart = 40;
   b5c0c:	2328      	movs	r3, #40	; 0x28
   b5c0e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            m.tertiaryStart = 30;
   b5c12:	231e      	movs	r3, #30
            PopUps.push_back(m);
   b5c14:	481f      	ldr	r0, [pc, #124]	; (b5c94 <_Z14processCommandPKchb.part.0+0x614>)
            m.tertiaryStart = 25;
   b5c16:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            PopUps.push_back(m);
   b5c1a:	f107 0148 	add.w	r1, r7, #72	; 0x48
   b5c1e:	f7ff fc23 	bl	b5468 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>
   b5c22:	e774      	b.n	b5b0e <_Z14processCommandPKchb.part.0+0x48e>
        else if(!strcmp(cmdStr,"wld") || !strcmp(cmdStr,"wlb")){
   b5c24:	491c      	ldr	r1, [pc, #112]	; (b5c98 <_Z14processCommandPKchb.part.0+0x618>)
   b5c26:	f107 001c 	add.w	r0, r7, #28
   b5c2a:	f009 f9f0 	bl	bf00e <strcmp>
   b5c2e:	b138      	cbz	r0, b5c40 <_Z14processCommandPKchb.part.0+0x5c0>
   b5c30:	491a      	ldr	r1, [pc, #104]	; (b5c9c <_Z14processCommandPKchb.part.0+0x61c>)
   b5c32:	f107 001c 	add.w	r0, r7, #28
   b5c36:	f009 f9ea 	bl	bf00e <strcmp>
   b5c3a:	2800      	cmp	r0, #0
   b5c3c:	f47f ad92 	bne.w	b5764 <_Z14processCommandPKchb.part.0+0xe4>
class MenuPopUp{
   b5c40:	2300      	movs	r3, #0
            sprintf(m.primaryLine,"Warning\0");
   b5c42:	4911      	ldr	r1, [pc, #68]	; (b5c88 <_Z14processCommandPKchb.part.0+0x608>)
class MenuPopUp{
   b5c44:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
            sprintf(m.primaryLine,"Warning\0");
   b5c48:	f107 0048 	add.w	r0, r7, #72	; 0x48
class MenuPopUp{
   b5c4c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
   b5c50:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            sprintf(m.primaryLine,"Warning\0");
   b5c54:	f009 f9e5 	bl	bf022 <strcpy>
            sprintf(m.secondaryLine,"Bot %d\0", rxBotID);
   b5c58:	7a3a      	ldrb	r2, [r7, #8]
   b5c5a:	490c      	ldr	r1, [pc, #48]	; (b5c8c <_Z14processCommandPKchb.part.0+0x60c>)
   b5c5c:	f107 0052 	add.w	r0, r7, #82	; 0x52
   b5c60:	f004 fbda 	bl	ba418 <sprintf>
            sprintf(m.tertiaryLine, "Leak detected\0");
   b5c64:	490e      	ldr	r1, [pc, #56]	; (b5ca0 <_Z14processCommandPKchb.part.0+0x620>)
   b5c66:	f107 0070 	add.w	r0, r7, #112	; 0x70
   b5c6a:	f009 f9da 	bl	bf022 <strcpy>
            m.primaryStart = 20;
   b5c6e:	2314      	movs	r3, #20
   b5c70:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
            m.secondaryStart = 40;
   b5c74:	2328      	movs	r3, #40	; 0x28
   b5c76:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            m.tertiaryStart = 25;
   b5c7a:	2319      	movs	r3, #25
   b5c7c:	e7ca      	b.n	b5c14 <_Z14processCommandPKchb.part.0+0x594>
   b5c7e:	bf00      	nop
   b5c80:	000c14aa 	.word	0x000c14aa
   b5c84:	000c14ae 	.word	0x000c14ae
   b5c88:	000c18a6 	.word	0x000c18a6
   b5c8c:	000c18af 	.word	0x000c18af
   b5c90:	000c18eb 	.word	0x000c18eb
   b5c94:	2003dcc4 	.word	0x2003dcc4
   b5c98:	000c14b2 	.word	0x000c14b2
   b5c9c:	000c14b6 	.word	0x000c14b6
   b5ca0:	000c18f9 	.word	0x000c18f9

000b5ca4 <_Z14processCommandPKchb>:
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b5ca4:	7883      	ldrb	r3, [r0, #2]
   b5ca6:	2b41      	cmp	r3, #65	; 0x41
   b5ca8:	d104      	bne.n	b5cb4 <_Z14processCommandPKchb+0x10>
   b5caa:	78c3      	ldrb	r3, [r0, #3]
   b5cac:	2b42      	cmp	r3, #66	; 0x42
   b5cae:	d106      	bne.n	b5cbe <_Z14processCommandPKchb+0x1a>
   b5cb0:	f7ff bce6 	b.w	b5680 <_Z14processCommandPKchb.part.0>
   b5cb4:	2b43      	cmp	r3, #67	; 0x43
   b5cb6:	d102      	bne.n	b5cbe <_Z14processCommandPKchb+0x1a>
   b5cb8:	78c3      	ldrb	r3, [r0, #3]
   b5cba:	2b43      	cmp	r3, #67	; 0x43
   b5cbc:	e7f7      	b.n	b5cae <_Z14processCommandPKchb+0xa>
}
   b5cbe:	4770      	bx	lr

000b5cc0 <_Z14dataLTEHandlerPKcS0_>:
void dataLTEHandler(const char *event, const char *data){
   b5cc0:	b510      	push	{r4, lr}
   b5cc2:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b5cc4:	2200      	movs	r2, #0
   b5cc6:	2104      	movs	r1, #4
   b5cc8:	4620      	mov	r0, r4
   b5cca:	f7ff ffeb 	bl	b5ca4 <_Z14processCommandPKchb>
    if(logMessages){
   b5cce:	4b0b      	ldr	r3, [pc, #44]	; (b5cfc <_Z14dataLTEHandlerPKcS0_+0x3c>)
   b5cd0:	781b      	ldrb	r3, [r3, #0]
   b5cd2:	b193      	cbz	r3, b5cfa <_Z14dataLTEHandlerPKcS0_+0x3a>
   b5cd4:	480a      	ldr	r0, [pc, #40]	; (b5d00 <_Z14dataLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5cd6:	7c03      	ldrb	r3, [r0, #16]
   b5cd8:	b92b      	cbnz	r3, b5ce6 <_Z14dataLTEHandlerPKcS0_+0x26>
   b5cda:	490a      	ldr	r1, [pc, #40]	; (b5d04 <_Z14dataLTEHandlerPKcS0_+0x44>)
   b5cdc:	f244 2202 	movw	r2, #16898	; 0x4202
   b5ce0:	3010      	adds	r0, #16
   b5ce2:	f7fe fc65 	bl	b45b0 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b5ce6:	4622      	mov	r2, r4
   b5ce8:	4907      	ldr	r1, [pc, #28]	; (b5d08 <_Z14dataLTEHandlerPKcS0_+0x48>)
   b5cea:	4805      	ldr	r0, [pc, #20]	; (b5d00 <_Z14dataLTEHandlerPKcS0_+0x40>)
   b5cec:	f7fe fafc 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
}
   b5cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b5cf4:	4805      	ldr	r0, [pc, #20]	; (b5d0c <_Z14dataLTEHandlerPKcS0_+0x4c>)
   b5cf6:	f001 be11 	b.w	b791c <_ZN7FatFile5closeEv>
}
   b5cfa:	bd10      	pop	{r4, pc}
   b5cfc:	2003de04 	.word	0x2003de04
   b5d00:	2003ddd0 	.word	0x2003ddd0
   b5d04:	2003dd78 	.word	0x2003dd78
   b5d08:	000c14ba 	.word	0x000c14ba
   b5d0c:	2003dde0 	.word	0x2003dde0

000b5d10 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b5d10:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b5d12:	f101 0308 	add.w	r3, r1, #8
   b5d16:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b5d1a:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b5d1c:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b5d20:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b5d22:	460a      	mov	r2, r1
   b5d24:	4601      	mov	r1, r0
   b5d26:	4668      	mov	r0, sp
   b5d28:	f009 f8c5 	bl	beeb6 <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b5d2c:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b5d30:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b5d32:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b5d36:	b113      	cbz	r3, b5d3e <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b5d38:	2300      	movs	r3, #0
   b5d3a:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.print("New BT Command: ");
   b5d3e:	f008 f81b 	bl	bdd78 <_Z16_fetch_usbserialv>
   b5d42:	4911      	ldr	r1, [pc, #68]	; (b5d88 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>)
   b5d44:	f007 fbf8 	bl	bd538 <_ZN5Print5printEPKc>
    Serial.println(btBuf);
   b5d48:	f008 f816 	bl	bdd78 <_Z16_fetch_usbserialv>
   b5d4c:	4629      	mov	r1, r5
   b5d4e:	f007 fc06 	bl	bd55e <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b5d52:	2201      	movs	r2, #1
   b5d54:	4611      	mov	r1, r2
   b5d56:	4628      	mov	r0, r5
   b5d58:	f7ff ffa4 	bl	b5ca4 <_Z14processCommandPKchb>
    if(logMessages){
   b5d5c:	4b0b      	ldr	r3, [pc, #44]	; (b5d8c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   b5d5e:	781b      	ldrb	r3, [r3, #0]
   b5d60:	b183      	cbz	r3, b5d84 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>
   b5d62:	480b      	ldr	r0, [pc, #44]	; (b5d90 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5d64:	7c03      	ldrb	r3, [r0, #16]
   b5d66:	b92b      	cbnz	r3, b5d74 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>
   b5d68:	490a      	ldr	r1, [pc, #40]	; (b5d94 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84>)
   b5d6a:	f244 2202 	movw	r2, #16898	; 0x4202
   b5d6e:	3010      	adds	r0, #16
   b5d70:	f7fe fc1e 	bl	b45b0 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b5d74:	4908      	ldr	r1, [pc, #32]	; (b5d98 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   b5d76:	4806      	ldr	r0, [pc, #24]	; (b5d90 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
   b5d78:	462a      	mov	r2, r5
   b5d7a:	f7fe fab5 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b5d7e:	4807      	ldr	r0, [pc, #28]	; (b5d9c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b5d80:	f001 fdcc 	bl	b791c <_ZN7FatFile5closeEv>
}
   b5d84:	46bd      	mov	sp, r7
   b5d86:	bdb0      	pop	{r4, r5, r7, pc}
   b5d88:	000c14da 	.word	0x000c14da
   b5d8c:	2003de04 	.word	0x2003de04
   b5d90:	2003ddd0 	.word	0x2003ddd0
   b5d94:	2003dd78 	.word	0x2003dd78
   b5d98:	000c14eb 	.word	0x000c14eb
   b5d9c:	2003dde0 	.word	0x2003dde0

000b5da0 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b5da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b5da4:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b5e94 <_Z11XBeeHandlerv+0xf4>
        if(logMessages){
   b5da8:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b5e98 <_Z11XBeeHandlerv+0xf8>
   b5dac:	4d35      	ldr	r5, [pc, #212]	; (b5e84 <_Z11XBeeHandlerv+0xe4>)
void XBeeHandler(){  
   b5dae:	b089      	sub	sp, #36	; 0x24
   b5db0:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b5db2:	f008 f98d 	bl	be0d0 <_Z22__fetch_global_Serial1v>
   b5db6:	6803      	ldr	r3, [r0, #0]
   b5db8:	691b      	ldr	r3, [r3, #16]
   b5dba:	4798      	blx	r3
   b5dbc:	2800      	cmp	r0, #0
   b5dbe:	d05c      	beq.n	b5e7a <_Z11XBeeHandlerv+0xda>
        String data = Serial1.readStringUntil('\n');
   b5dc0:	f008 f986 	bl	be0d0 <_Z22__fetch_global_Serial1v>
   b5dc4:	220a      	movs	r2, #10
   b5dc6:	4601      	mov	r1, r0
   b5dc8:	4638      	mov	r0, r7
   b5dca:	f007 fd0d 	bl	bd7e8 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b5dce:	68bb      	ldr	r3, [r7, #8]
   b5dd0:	3307      	adds	r3, #7
   b5dd2:	f023 0307 	bic.w	r3, r3, #7
    }
   b5dd6:	466e      	mov	r6, sp
        char buffer[data.length()];
   b5dd8:	ebad 0d03 	sub.w	sp, sp, r3
   b5ddc:	46ea      	mov	sl, sp
   b5dde:	2300      	movs	r3, #0
	inline unsigned int length(void) const {return len;}
   b5de0:	68b9      	ldr	r1, [r7, #8]
   b5de2:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b5de6:	458b      	cmp	fp, r1
   b5de8:	f103 0401 	add.w	r4, r3, #1
   b5dec:	d207      	bcs.n	b5dfe <_Z11XBeeHandlerv+0x5e>
   b5dee:	4659      	mov	r1, fp
   b5df0:	4638      	mov	r0, r7
   b5df2:	f007 fe13 	bl	bda1c <_ZNK6String6charAtEj>
   b5df6:	4623      	mov	r3, r4
   b5df8:	f80a 000b 	strb.w	r0, [sl, fp]
   b5dfc:	e7f0      	b.n	b5de0 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b5dfe:	2901      	cmp	r1, #1
   b5e00:	d90a      	bls.n	b5e18 <_Z11XBeeHandlerv+0x78>
   b5e02:	3901      	subs	r1, #1
   b5e04:	4638      	mov	r0, r7
   b5e06:	f007 fe09 	bl	bda1c <_ZNK6String6charAtEj>
   b5e0a:	280d      	cmp	r0, #13
   b5e0c:	bf01      	itttt	eq
   b5e0e:	68bb      	ldreq	r3, [r7, #8]
   b5e10:	4453      	addeq	r3, sl
   b5e12:	2200      	moveq	r2, #0
   b5e14:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        Serial.println("New XBee Command:");
   b5e18:	f007 ffae 	bl	bdd78 <_Z16_fetch_usbserialv>
   b5e1c:	4641      	mov	r1, r8
   b5e1e:	f007 fb9e 	bl	bd55e <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b5e22:	f007 ffa9 	bl	bdd78 <_Z16_fetch_usbserialv>
   b5e26:	6839      	ldr	r1, [r7, #0]
   b5e28:	f007 fb99 	bl	bd55e <_ZN5Print7printlnEPKc>
        processCommand(buffer,2,true);
   b5e2c:	2201      	movs	r2, #1
   b5e2e:	2102      	movs	r1, #2
   b5e30:	4650      	mov	r0, sl
   b5e32:	f7ff ff37 	bl	b5ca4 <_Z14processCommandPKchb>
        if(logMessages){
   b5e36:	f899 3000 	ldrb.w	r3, [r9]
   b5e3a:	b1cb      	cbz	r3, b5e70 <_Z11XBeeHandlerv+0xd0>
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5e3c:	7c2b      	ldrb	r3, [r5, #16]
   b5e3e:	b92b      	cbnz	r3, b5e4c <_Z11XBeeHandlerv+0xac>
   b5e40:	4911      	ldr	r1, [pc, #68]	; (b5e88 <_Z11XBeeHandlerv+0xe8>)
   b5e42:	4812      	ldr	r0, [pc, #72]	; (b5e8c <_Z11XBeeHandlerv+0xec>)
   b5e44:	f244 2202 	movw	r2, #16898	; 0x4202
   b5e48:	f7fe fbb2 	bl	b45b0 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b5e4c:	4639      	mov	r1, r7
   b5e4e:	f107 0010 	add.w	r0, r7, #16
   b5e52:	f007 fd77 	bl	bd944 <_ZN6StringC1ERKS_>
   b5e56:	490e      	ldr	r1, [pc, #56]	; (b5e90 <_Z11XBeeHandlerv+0xf0>)
   b5e58:	f107 0210 	add.w	r2, r7, #16
   b5e5c:	4628      	mov	r0, r5
   b5e5e:	f7fe fa43 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
   b5e62:	f107 0010 	add.w	r0, r7, #16
   b5e66:	f007 fcd7 	bl	bd818 <_ZN6StringD1Ev>
            logFile.close();
   b5e6a:	4808      	ldr	r0, [pc, #32]	; (b5e8c <_Z11XBeeHandlerv+0xec>)
   b5e6c:	f001 fd56 	bl	b791c <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b5e70:	4638      	mov	r0, r7
   b5e72:	f007 fcd1 	bl	bd818 <_ZN6StringD1Ev>
   b5e76:	46b5      	mov	sp, r6
    while(Serial1.available()){
   b5e78:	e79b      	b.n	b5db2 <_Z11XBeeHandlerv+0x12>
}
   b5e7a:	3724      	adds	r7, #36	; 0x24
   b5e7c:	46bd      	mov	sp, r7
   b5e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5e82:	bf00      	nop
   b5e84:	2003ddd0 	.word	0x2003ddd0
   b5e88:	2003dd78 	.word	0x2003dd78
   b5e8c:	2003dde0 	.word	0x2003dde0
   b5e90:	000c151d 	.word	0x000c151d
   b5e94:	000c150b 	.word	0x000c150b
   b5e98:	2003de04 	.word	0x2003de04

000b5e9c <_Z15LTEInputCommand6String>:

int LTEInputCommand(String cmd){
   b5e9c:	b500      	push	{lr}
   b5e9e:	b09b      	sub	sp, #108	; 0x6c
		{getBytes((unsigned char *)buf, bufsize, index);}
   b5ea0:	2300      	movs	r3, #0
   b5ea2:	2264      	movs	r2, #100	; 0x64
   b5ea4:	a901      	add	r1, sp, #4
   b5ea6:	f007 fdbb 	bl	bda20 <_ZNK6String8getBytesEPhjj>
    char cmdBuf[100];
    cmd.toCharArray(cmdBuf, 100);
    processCommand(cmdBuf, 4,false);
   b5eaa:	2104      	movs	r1, #4
   b5eac:	2200      	movs	r2, #0
   b5eae:	eb0d 0001 	add.w	r0, sp, r1
   b5eb2:	f7ff fef7 	bl	b5ca4 <_Z14processCommandPKchb>
    if(logMessages){
   b5eb6:	4b0c      	ldr	r3, [pc, #48]	; (b5ee8 <_Z15LTEInputCommand6String+0x4c>)
   b5eb8:	781b      	ldrb	r3, [r3, #0]
   b5eba:	b183      	cbz	r3, b5ede <_Z15LTEInputCommand6String+0x42>
   b5ebc:	480b      	ldr	r0, [pc, #44]	; (b5eec <_Z15LTEInputCommand6String+0x50>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5ebe:	7c03      	ldrb	r3, [r0, #16]
   b5ec0:	b92b      	cbnz	r3, b5ece <_Z15LTEInputCommand6String+0x32>
   b5ec2:	490b      	ldr	r1, [pc, #44]	; (b5ef0 <_Z15LTEInputCommand6String+0x54>)
   b5ec4:	f244 2202 	movw	r2, #16898	; 0x4202
   b5ec8:	3010      	adds	r0, #16
   b5eca:	f7fe fb71 	bl	b45b0 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",cmdBuf);
   b5ece:	4909      	ldr	r1, [pc, #36]	; (b5ef4 <_Z15LTEInputCommand6String+0x58>)
   b5ed0:	4806      	ldr	r0, [pc, #24]	; (b5eec <_Z15LTEInputCommand6String+0x50>)
   b5ed2:	aa01      	add	r2, sp, #4
   b5ed4:	f7fe fa08 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b5ed8:	4807      	ldr	r0, [pc, #28]	; (b5ef8 <_Z15LTEInputCommand6String+0x5c>)
   b5eda:	f001 fd1f 	bl	b791c <_ZN7FatFile5closeEv>
    }
    return 1;
   b5ede:	2001      	movs	r0, #1
   b5ee0:	b01b      	add	sp, #108	; 0x6c
   b5ee2:	f85d fb04 	ldr.w	pc, [sp], #4
   b5ee6:	bf00      	nop
   b5ee8:	2003de04 	.word	0x2003de04
   b5eec:	2003ddd0 	.word	0x2003ddd0
   b5ef0:	2003dd78 	.word	0x2003dd78
   b5ef4:	000c14ba 	.word	0x000c14ba
   b5ef8:	2003dde0 	.word	0x2003dde0

000b5efc <_Z11WaterBotSimh>:
void WaterBotSim(uint8_t count){
   b5efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5f00:	4d20      	ldr	r5, [pc, #128]	; (b5f84 <_Z11WaterBotSimh+0x88>)
        WaterBots.push_back(simBot);
   b5f02:	f8df a080 	ldr.w	sl, [pc, #128]	; b5f84 <_Z11WaterBotSimh+0x88>
   b5f06:	e9d5 2300 	ldrd	r2, r3, [r5]
   b5f0a:	1a9b      	subs	r3, r3, r2
   b5f0c:	4a1e      	ldr	r2, [pc, #120]	; (b5f88 <_Z11WaterBotSimh+0x8c>)
   b5f0e:	111b      	asrs	r3, r3, #4
   b5f10:	4353      	muls	r3, r2
    if(count + WaterBots.size() > 10) count = 10-WaterBots.size();
   b5f12:	b2dc      	uxtb	r4, r3
   b5f14:	4403      	add	r3, r0
   b5f16:	2b0a      	cmp	r3, #10
   b5f18:	bf84      	itt	hi
   b5f1a:	f1c4 000a 	rsbhi	r0, r4, #10
   b5f1e:	b2c0      	uxtbhi	r0, r0
    uint8_t botloop = count+WaterBots.size();
   b5f20:	4420      	add	r0, r4
void WaterBotSim(uint8_t count){
   b5f22:	b094      	sub	sp, #80	; 0x50
    uint8_t botloop = count+WaterBots.size();
   b5f24:	b2c4      	uxtb	r4, r0
   b5f26:	2700      	movs	r7, #0
        simBot.LTEAvail = false;
   b5f28:	f44f 7980 	mov.w	r9, #256	; 0x100
   b5f2c:	fa5f f887 	uxtb.w	r8, r7
    for(uint8_t temp = 0; temp < botloop; temp++){
   b5f30:	4544      	cmp	r4, r8
   b5f32:	d924      	bls.n	b5f7e <_Z11WaterBotSimh+0x82>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b5f34:	e9d5 3100 	ldrd	r3, r1, [r5]
        int dupeBot = false;
   b5f38:	2600      	movs	r6, #0
        for(WaterBot wb: WaterBots){
   b5f3a:	4299      	cmp	r1, r3
   b5f3c:	d005      	beq.n	b5f4a <_Z11WaterBotSimh+0x4e>
            if(wb.botNum == temp) dupeBot = true;
   b5f3e:	789a      	ldrb	r2, [r3, #2]
   b5f40:	3350      	adds	r3, #80	; 0x50
   b5f42:	4542      	cmp	r2, r8
   b5f44:	bf08      	it	eq
   b5f46:	2601      	moveq	r6, #1
	return *this;
   b5f48:	e7f7      	b.n	b5f3a <_Z11WaterBotSimh+0x3e>
        if(dupeBot) continue;
   b5f4a:	b9b6      	cbnz	r6, b5f7a <_Z11WaterBotSimh+0x7e>
        WaterBot simBot;
   b5f4c:	4668      	mov	r0, sp
   b5f4e:	f7fe fc3f 	bl	b47d0 <_ZN8WaterBotC1Ev>
        simBot.SDAvail = true;
   b5f52:	2301      	movs	r3, #1
        simBot.battPercent = random(100);
   b5f54:	2064      	movs	r0, #100	; 0x64
        simBot.driveMode = 0;
   b5f56:	f8ad 600e 	strh.w	r6, [sp, #14]
        simBot.botNum = temp;
   b5f5a:	f88d 8002 	strb.w	r8, [sp, #2]
        simBot.BLEAvail = false;
   b5f5e:	f88d 6007 	strb.w	r6, [sp, #7]
        simBot.LTEAvail = false;
   b5f62:	f8ad 9008 	strh.w	r9, [sp, #8]
        simBot.SDAvail = true;
   b5f66:	f88d 300c 	strb.w	r3, [sp, #12]
        simBot.battPercent = random(100);
   b5f6a:	f007 fb51 	bl	bd610 <_Z6randomi>
        WaterBots.push_back(simBot);
   b5f6e:	4669      	mov	r1, sp
        simBot.battPercent = random(100);
   b5f70:	f8ad 0004 	strh.w	r0, [sp, #4]
        WaterBots.push_back(simBot);
   b5f74:	4650      	mov	r0, sl
   b5f76:	f7ff fb6f 	bl	b5658 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
    for(uint8_t temp = 0; temp < botloop; temp++){
   b5f7a:	3701      	adds	r7, #1
   b5f7c:	e7d6      	b.n	b5f2c <_Z11WaterBotSimh+0x30>
}
   b5f7e:	b014      	add	sp, #80	; 0x50
   b5f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5f84:	2003dce4 	.word	0x2003dce4
   b5f88:	cccccccd 	.word	0xcccccccd

000b5f8c <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b5f8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5f90:	e9d0 8900 	ldrd	r8, r9, [r0]
   b5f94:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
   b5f96:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5f9a:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
   b5f9e:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   b5fa2:	4607      	mov	r7, r0
   b5fa4:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5fa6:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   b5faa:	d102      	bne.n	b5fb2 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b5fac:	4820      	ldr	r0, [pc, #128]	; (b6030 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
   b5fae:	f008 f8bb 	bl	be128 <_ZSt20__throw_length_errorPKc>
   b5fb2:	2c01      	cmp	r4, #1
   b5fb4:	4622      	mov	r2, r4
   b5fb6:	bf38      	it	cc
   b5fb8:	2201      	movcc	r2, #1
   b5fba:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b5fbc:	eba1 0508 	sub.w	r5, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5fc0:	d231      	bcs.n	b6026 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5fc2:	b394      	cbz	r4, b602a <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
   b5fc4:	429c      	cmp	r4, r3
   b5fc6:	bf28      	it	cs
   b5fc8:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5fca:	00e0      	lsls	r0, r4, #3
   b5fcc:	f7fe f863 	bl	b4096 <_Znwj>
   b5fd0:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5fd2:	1973      	adds	r3, r6, r5
   b5fd4:	bf1c      	itt	ne
   b5fd6:	e9db 0100 	ldrdne	r0, r1, [fp]
   b5fda:	e9c3 0100 	strdne	r0, r1, [r3]
      if (__count > 0)
   b5fde:	2d00      	cmp	r5, #0
   b5fe0:	dd04      	ble.n	b5fec <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x60>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b5fe2:	462a      	mov	r2, r5
   b5fe4:	4641      	mov	r1, r8
   b5fe6:	4630      	mov	r0, r6
   b5fe8:	f008 ff73 	bl	beed2 <memmove>
      ptrdiff_t __count = __last - __first;
   b5fec:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
   b5ff0:	3508      	adds	r5, #8
      if (__count > 0)
   b5ff2:	f1b9 0f00 	cmp.w	r9, #0
   b5ff6:	4435      	add	r5, r6
   b5ff8:	dd04      	ble.n	b6004 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b5ffa:	464a      	mov	r2, r9
   b5ffc:	4651      	mov	r1, sl
   b5ffe:	4628      	mov	r0, r5
   b6000:	f008 ff59 	bl	beeb6 <memcpy>
      return __result + __count;
   b6004:	444d      	add	r5, r9
	if (__p)
   b6006:	f1b8 0f00 	cmp.w	r8, #0
   b600a:	d005      	beq.n	b6018 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
   b600c:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b600e:	4640      	mov	r0, r8
   b6010:	eba1 0108 	sub.w	r1, r1, r8
   b6014:	f7fe f843 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b6018:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   b601c:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b6020:	60bc      	str	r4, [r7, #8]
    }
   b6022:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b6026:	461c      	mov	r4, r3
   b6028:	e7cf      	b.n	b5fca <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b602a:	4626      	mov	r6, r4
   b602c:	e7d1      	b.n	b5fd2 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
   b602e:	bf00      	nop
   b6030:	000c1378 	.word	0x000c1378

000b6034 <_Z7BLEScani>:
void BLEScan(int BotNumber){
   b6034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6038:	b0ad      	sub	sp, #180	; 0xb4
   b603a:	4606      	mov	r6, r0
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   b603c:	f004 ff56 	bl	baeec <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6040:	4980      	ldr	r1, [pc, #512]	; (b6244 <_Z7BLEScani+0x210>)
   b6042:	2214      	movs	r2, #20
   b6044:	f005 f84a 	bl	bb0dc <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
	if (count > 0) {
   b6048:	4680      	mov	r8, r0
   b604a:	2800      	cmp	r0, #0
   b604c:	f000 80f6 	beq.w	b623c <_Z7BLEScani+0x208>
    const BleAddress& address() const {
        return address_;
    }

    const BleAdvertisingData& advertisingData() const {
        return advertisingData_;
   b6050:	f8df b1f0 	ldr.w	fp, [pc, #496]	; b6244 <_Z7BLEScani+0x210>
		for (uint8_t ii = 0; ii < count; ii++) {
   b6054:	2400      	movs	r4, #0
			BleUuid foundServiceUuid;
   b6056:	eb04 09c4 	add.w	r9, r4, r4, lsl #3
   b605a:	ea4f 0989 	mov.w	r9, r9, lsl #2
   b605e:	f109 0708 	add.w	r7, r9, #8
   b6062:	a80b      	add	r0, sp, #44	; 0x2c
   b6064:	445f      	add	r7, fp
   b6066:	f004 fba5 	bl	ba7b4 <_ZN8particle7BleUuidC1Ev>
			size_t svcCount = scanResults[ii].advertisingData().serviceUUID(&foundServiceUuid, 1);
   b606a:	2201      	movs	r2, #1
   b606c:	a90b      	add	r1, sp, #44	; 0x2c
   b606e:	4638      	mov	r0, r7
   b6070:	f005 fed8 	bl	bbe24 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
            if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   b6074:	4682      	mov	sl, r0
   b6076:	2800      	cmp	r0, #0
   b6078:	d056      	beq.n	b6128 <_Z7BLEScani+0xf4>
   b607a:	4973      	ldr	r1, [pc, #460]	; (b6248 <_Z7BLEScani+0x214>)
   b607c:	a80b      	add	r0, sp, #44	; 0x2c
   b607e:	f004 fbf4 	bl	ba86a <_ZNK8particle7BleUuideqERKS0_>
   b6082:	4605      	mov	r5, r0
   b6084:	2800      	cmp	r0, #0
   b6086:	d04f      	beq.n	b6128 <_Z7BLEScani+0xf4>
                scanResults[ii].advertisingData().customData(BLECustomData,CUSTOM_DATA_LEN);
   b6088:	2208      	movs	r2, #8
   b608a:	a909      	add	r1, sp, #36	; 0x24
   b608c:	4638      	mov	r0, r7
   b608e:	f004 fd49 	bl	bab24 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
                if(BotNumber == -2){
   b6092:	1cb2      	adds	r2, r6, #2
   b6094:	d153      	bne.n	b613e <_Z7BLEScani+0x10a>
                    Serial.printlnf("Found Bot #: %d %d %d %d %d %d %d %d, services: %d",BLECustomData[0],BLECustomData[1],BLECustomData[2],BLECustomData[3],BLECustomData[4],BLECustomData[5],BLECustomData[6],BLECustomData[7], svcCount);
   b6096:	f007 fe6f 	bl	bdd78 <_Z16_fetch_usbserialv>
   b609a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   b609e:	9305      	str	r3, [sp, #20]
   b60a0:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   b60a4:	9304      	str	r3, [sp, #16]
   b60a6:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   b60aa:	9303      	str	r3, [sp, #12]
   b60ac:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   b60b0:	9302      	str	r3, [sp, #8]
   b60b2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
      : _M_current(__i) { }
   b60b6:	4f65      	ldr	r7, [pc, #404]	; (b624c <_Z7BLEScani+0x218>)
   b60b8:	9301      	str	r3, [sp, #4]
   b60ba:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   b60be:	4964      	ldr	r1, [pc, #400]	; (b6250 <_Z7BLEScani+0x21c>)
   b60c0:	9300      	str	r3, [sp, #0]
   b60c2:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   b60c6:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   b60ca:	f8cd a018 	str.w	sl, [sp, #24]
   b60ce:	f7fe f90b 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
   b60d2:	6878      	ldr	r0, [r7, #4]
                        if(BLECustomData[0] == p.botNum){
   b60d4:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
   b60d8:	683b      	ldr	r3, [r7, #0]
                    for(PairBot p: BLEPair){
   b60da:	4283      	cmp	r3, r0
   b60dc:	d005      	beq.n	b60ea <_Z7BLEScani+0xb6>
                        if(BLECustomData[0] == p.botNum){
   b60de:	f813 2b08 	ldrb.w	r2, [r3], #8
                            newBot = false;
   b60e2:	428a      	cmp	r2, r1
   b60e4:	bf08      	it	eq
   b60e6:	2500      	moveq	r5, #0
	return *this;
   b60e8:	e7f7      	b.n	b60da <_Z7BLEScani+0xa6>
                    if(newBot){
   b60ea:	b1ed      	cbz	r5, b6128 <_Z7BLEScani+0xf4>
    const BleAdvertisingData& scanResponse() const {
        return scanResponse_;
    }

    int8_t rssi() const {
        return rssi_;
   b60ec:	2224      	movs	r2, #36	; 0x24
   b60ee:	fb02 b204 	mla	r2, r2, r4, fp
                        NewBot.botNum = BLECustomData[0];
   b60f2:	f88d 1060 	strb.w	r1, [sp, #96]	; 0x60
                        NewBot.rssi = scanResults[ii].rssi();
   b60f6:	f992 2020 	ldrsb.w	r2, [r2, #32]
   b60fa:	9219      	str	r2, [sp, #100]	; 0x64
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b60fc:	68ba      	ldr	r2, [r7, #8]
   b60fe:	4293      	cmp	r3, r2
   b6100:	d017      	beq.n	b6132 <_Z7BLEScani+0xfe>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b6102:	b11b      	cbz	r3, b610c <_Z7BLEScani+0xd8>
   b6104:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   b6108:	e883 0003 	stmia.w	r3, {r0, r1}
	    ++this->_M_impl._M_finish;
   b610c:	687b      	ldr	r3, [r7, #4]
   b610e:	3308      	adds	r3, #8
   b6110:	607b      	str	r3, [r7, #4]
                        Serial.printlnf("Found new bot: %d", BLECustomData[0],BLEPair.size());
   b6112:	f007 fe31 	bl	bdd78 <_Z16_fetch_usbserialv>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6116:	e9d7 2300 	ldrd	r2, r3, [r7]
   b611a:	1a9b      	subs	r3, r3, r2
   b611c:	494d      	ldr	r1, [pc, #308]	; (b6254 <_Z7BLEScani+0x220>)
   b611e:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   b6122:	10db      	asrs	r3, r3, #3
   b6124:	f7fe f8e0 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
		for (uint8_t ii = 0; ii < count; ii++) {
   b6128:	3401      	adds	r4, #1
   b612a:	b2e4      	uxtb	r4, r4
   b612c:	4544      	cmp	r4, r8
   b612e:	d392      	bcc.n	b6056 <_Z7BLEScani+0x22>
   b6130:	e084      	b.n	b623c <_Z7BLEScani+0x208>
	  _M_realloc_insert(end(), __x);
   b6132:	4846      	ldr	r0, [pc, #280]	; (b624c <_Z7BLEScani+0x218>)
   b6134:	aa18      	add	r2, sp, #96	; 0x60
   b6136:	4619      	mov	r1, r3
   b6138:	f7ff ff28 	bl	b5f8c <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   b613c:	e7e9      	b.n	b6112 <_Z7BLEScani+0xde>
                if(BotNumber == -1 || BotNumber == BLECustomData[0]){   //Check if a particular bot number was specified
   b613e:	1c73      	adds	r3, r6, #1
   b6140:	d003      	beq.n	b614a <_Z7BLEScani+0x116>
   b6142:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b6146:	42b3      	cmp	r3, r6
   b6148:	d1ee      	bne.n	b6128 <_Z7BLEScani+0xf4>
                    peer = BLE.connect(scanResults[ii].address());
   b614a:	f004 fecf 	bl	baeec <_ZN8particle14BleLocalDevice11getInstanceEv>
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b614e:	4d42      	ldr	r5, [pc, #264]	; (b6258 <_Z7BLEScani+0x224>)
   b6150:	4601      	mov	r1, r0
   b6152:	2301      	movs	r3, #1
   b6154:	eb0b 0209 	add.w	r2, fp, r9
   b6158:	a818      	add	r0, sp, #96	; 0x60
   b615a:	f006 fa9b 	bl	bc694 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   b615e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b6160:	9c19      	ldr	r4, [sp, #100]	; 0x64
   b6162:	602b      	str	r3, [r5, #0]
	if (__tmp != _M_pi)
   b6164:	686b      	ldr	r3, [r5, #4]
   b6166:	429c      	cmp	r4, r3
   b6168:	d008      	beq.n	b617c <_Z7BLEScani+0x148>
	    if (__tmp != 0)
   b616a:	b114      	cbz	r4, b6172 <_Z7BLEScani+0x13e>
    { ++_M_use_count; }
   b616c:	6863      	ldr	r3, [r4, #4]
   b616e:	3301      	adds	r3, #1
   b6170:	6063      	str	r3, [r4, #4]
	    if (_M_pi != 0)
   b6172:	6868      	ldr	r0, [r5, #4]
   b6174:	b108      	cbz	r0, b617a <_Z7BLEScani+0x146>
	      _M_pi->_M_release();
   b6176:	f7fe fa07 	bl	b4588 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b617a:	606c      	str	r4, [r5, #4]
   b617c:	a818      	add	r0, sp, #96	; 0x60
   b617e:	f005 f824 	bl	bb1ca <_ZN8particle13BlePeerDeviceD1Ev>
				    if (peer.connected()) {
   b6182:	4835      	ldr	r0, [pc, #212]	; (b6258 <_Z7BLEScani+0x224>)
   b6184:	f004 fe24 	bl	badd0 <_ZNK8particle13BlePeerDevice9connectedEv>
   b6188:	4605      	mov	r5, r0
   b618a:	2800      	cmp	r0, #0
   b618c:	d056      	beq.n	b623c <_Z7BLEScani+0x208>
                        meshPair = false;
   b618e:	4b33      	ldr	r3, [pc, #204]	; (b625c <_Z7BLEScani+0x228>)
   b6190:	4e33      	ldr	r6, [pc, #204]	; (b6260 <_Z7BLEScani+0x22c>)
   b6192:	2400      	movs	r4, #0
   b6194:	701c      	strb	r4, [r3, #0]
                        startConnect = true;
   b6196:	4b33      	ldr	r3, [pc, #204]	; (b6264 <_Z7BLEScani+0x230>)
   b6198:	f04f 0801 	mov.w	r8, #1
                        scanResults[ii].advertisingData().customData(bufName, BLE_MAX_ADV_DATA_LEN);
   b619c:	221f      	movs	r2, #31
   b619e:	a910      	add	r1, sp, #64	; 0x40
   b61a0:	4638      	mov	r0, r7
                        startConnect = true;
   b61a2:	f883 8000 	strb.w	r8, [r3]
                        scanResults[ii].advertisingData().customData(bufName, BLE_MAX_ADV_DATA_LEN);
   b61a6:	f004 fcbd 	bl	bab24 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
					    peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   b61aa:	4a2f      	ldr	r2, [pc, #188]	; (b6268 <_Z7BLEScani+0x234>)
   b61ac:	492f      	ldr	r1, [pc, #188]	; (b626c <_Z7BLEScani+0x238>)
   b61ae:	482a      	ldr	r0, [pc, #168]	; (b6258 <_Z7BLEScani+0x224>)
   b61b0:	f005 ff04 	bl	bbfbc <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
					    peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
   b61b4:	4a2e      	ldr	r2, [pc, #184]	; (b6270 <_Z7BLEScani+0x23c>)
   b61b6:	492f      	ldr	r1, [pc, #188]	; (b6274 <_Z7BLEScani+0x240>)
   b61b8:	4827      	ldr	r0, [pc, #156]	; (b6258 <_Z7BLEScani+0x224>)
   b61ba:	f005 feff 	bl	bbfbc <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        peer.getCharacteristicByUUID(peerOffloadCharacteristic, offldUuid);
   b61be:	4a2e      	ldr	r2, [pc, #184]	; (b6278 <_Z7BLEScani+0x244>)
   b61c0:	492e      	ldr	r1, [pc, #184]	; (b627c <_Z7BLEScani+0x248>)
   b61c2:	4825      	ldr	r0, [pc, #148]	; (b6258 <_Z7BLEScani+0x224>)
   b61c4:	f005 fefa 	bl	bbfbc <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
						Serial.printlnf("Connected to Bot %d",bufName[0]);
   b61c8:	f007 fdd6 	bl	bdd78 <_Z16_fetch_usbserialv>
   b61cc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   b61d0:	492b      	ldr	r1, [pc, #172]	; (b6280 <_Z7BLEScani+0x24c>)
   b61d2:	f7fe f889 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
                        WaterBot newWaterbot;
   b61d6:	a818      	add	r0, sp, #96	; 0x60
   b61d8:	f7fe fafa 	bl	b47d0 <_ZN8WaterBotC1Ev>
                        newWaterbot.botNum = bufName[0];
   b61dc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
                        PairBots.push_back(newWaterbot);
   b61e0:	4828      	ldr	r0, [pc, #160]	; (b6284 <_Z7BLEScani+0x250>)
                        newWaterbot.botNum = bufName[0];
   b61e2:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
                        PairBots.push_back(newWaterbot);
   b61e6:	a918      	add	r1, sp, #96	; 0x60
                        newWaterbot.BLEAvail = true;
   b61e8:	f88d 8067 	strb.w	r8, [sp, #103]	; 0x67
                        PairBots.push_back(newWaterbot);
   b61ec:	f7ff fa34 	bl	b5658 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      : _M_current(__i) { }
   b61f0:	4b25      	ldr	r3, [pc, #148]	; (b6288 <_Z7BLEScani+0x254>)
                            if(bufName[0] == w.botNum){
   b61f2:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   b61f6:	685f      	ldr	r7, [r3, #4]
   b61f8:	7831      	ldrb	r1, [r6, #0]
   b61fa:	681b      	ldr	r3, [r3, #0]
                        bool newBot = true;
   b61fc:	462a      	mov	r2, r5
                        for(WaterBot &w: WaterBots){
   b61fe:	429f      	cmp	r7, r3
   b6200:	d00a      	beq.n	b6218 <_Z7BLEScani+0x1e4>
                            if(bufName[0] == w.botNum){
   b6202:	f893 c002 	ldrb.w	ip, [r3, #2]
   b6206:	4560      	cmp	r0, ip
                                w.BLEAvail = true;
   b6208:	bf01      	itttt	eq
   b620a:	f883 8007 	strbeq.w	r8, [r3, #7]
                                BLEBotNum = w.botNum;
   b620e:	462c      	moveq	r4, r5
   b6210:	4601      	moveq	r1, r0
                                newBot = false;
   b6212:	2200      	moveq	r2, #0
      operator++() _GLIBCXX_NOEXCEPT
   b6214:	3350      	adds	r3, #80	; 0x50
	return *this;
   b6216:	e7f2      	b.n	b61fe <_Z7BLEScani+0x1ca>
   b6218:	b104      	cbz	r4, b621c <_Z7BLEScani+0x1e8>
   b621a:	7031      	strb	r1, [r6, #0]
                        if(newBot){
   b621c:	b172      	cbz	r2, b623c <_Z7BLEScani+0x208>
                            Serial.println("Found a new water bot ID");
   b621e:	f007 fdab 	bl	bdd78 <_Z16_fetch_usbserialv>
   b6222:	491a      	ldr	r1, [pc, #104]	; (b628c <_Z7BLEScani+0x258>)
   b6224:	f007 f99b 	bl	bd55e <_ZN5Print7printlnEPKc>
                            WaterBots.push_back(newWaterbot);
   b6228:	4817      	ldr	r0, [pc, #92]	; (b6288 <_Z7BLEScani+0x254>)
   b622a:	a918      	add	r1, sp, #96	; 0x60
   b622c:	f7ff fa14 	bl	b5658 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
                            BLEBotNum = newWaterbot.botNum;
   b6230:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
   b6234:	7033      	strb	r3, [r6, #0]
                            redrawMenu = true;
   b6236:	4b16      	ldr	r3, [pc, #88]	; (b6290 <_Z7BLEScani+0x25c>)
   b6238:	2201      	movs	r2, #1
   b623a:	701a      	strb	r2, [r3, #0]
}
   b623c:	b02d      	add	sp, #180	; 0xb4
   b623e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6242:	bf00      	nop
   b6244:	2003dedc 	.word	0x2003dedc
   b6248:	2003dcf0 	.word	0x2003dcf0
   b624c:	2003dc98 	.word	0x2003dc98
   b6250:	000c153e 	.word	0x000c153e
   b6254:	000c1571 	.word	0x000c1571
   b6258:	2003deb4 	.word	0x2003deb4
   b625c:	2003de06 	.word	0x2003de06
   b6260:	2003dc94 	.word	0x2003dc94
   b6264:	2003e630 	.word	0x2003e630
   b6268:	2003dd18 	.word	0x2003dd18
   b626c:	2003decc 	.word	0x2003decc
   b6270:	2003dd04 	.word	0x2003dd04
   b6274:	2003dec4 	.word	0x2003dec4
   b6278:	2003dd30 	.word	0x2003dd30
   b627c:	2003debc 	.word	0x2003debc
   b6280:	000c1583 	.word	0x000c1583
   b6284:	2003dcb8 	.word	0x2003dcb8
   b6288:	2003dce4 	.word	0x2003dce4
   b628c:	000c146a 	.word	0x000c146a
   b6290:	2003daaa 	.word	0x2003daaa

000b6294 <_Z13DataOffloaderh>:
void DataOffloader(uint8_t bot_id){
   b6294:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!logDir.open("/")) {
   b6296:	4969      	ldr	r1, [pc, #420]	; (b643c <_Z13DataOffloaderh+0x1a8>)
void DataOffloader(uint8_t bot_id){
   b6298:	b099      	sub	sp, #100	; 0x64
   b629a:	4605      	mov	r5, r0
    if (!logDir.open("/")) {
   b629c:	2200      	movs	r2, #0
   b629e:	4868      	ldr	r0, [pc, #416]	; (b6440 <_Z13DataOffloaderh+0x1ac>)
   b62a0:	f7fe f986 	bl	b45b0 <_ZN7FatFile4openEPKci>
   b62a4:	bb28      	cbnz	r0, b62f2 <_Z13DataOffloaderh+0x5e>
        offloadingDone = true;
   b62a6:	4b67      	ldr	r3, [pc, #412]	; (b6444 <_Z13DataOffloaderh+0x1b0>)
        sprintf(m.primaryLine,"Warning\0");
   b62a8:	4967      	ldr	r1, [pc, #412]	; (b6448 <_Z13DataOffloaderh+0x1b4>)
        offloadingDone = true;
   b62aa:	2401      	movs	r4, #1
        sprintf(m.primaryLine,"Warning\0");
   b62ac:	a805      	add	r0, sp, #20
        offloadingDone = true;
   b62ae:	701c      	strb	r4, [r3, #0]
        sprintf(m.primaryLine,"Warning\0");
   b62b0:	f008 feb7 	bl	bf022 <strcpy>
        sprintf(m.secondaryLine,"CCHub");
   b62b4:	4965      	ldr	r1, [pc, #404]	; (b644c <_Z13DataOffloaderh+0x1b8>)
   b62b6:	f10d 001e 	add.w	r0, sp, #30
   b62ba:	f008 feb2 	bl	bf022 <strcpy>
        sprintf(m.tertiaryLine, "SD Card Failed\0");
   b62be:	4964      	ldr	r1, [pc, #400]	; (b6450 <_Z13DataOffloaderh+0x1bc>)
   b62c0:	a80f      	add	r0, sp, #60	; 0x3c
   b62c2:	f008 feae 	bl	bf022 <strcpy>
        m.primaryStart = 20;
   b62c6:	2314      	movs	r3, #20
        PopUps.push_back(m);
   b62c8:	eb0d 0103 	add.w	r1, sp, r3
        m.secondaryStart = 60;
   b62cc:	223c      	movs	r2, #60	; 0x3c
        PopUps.push_back(m);
   b62ce:	4861      	ldr	r0, [pc, #388]	; (b6454 <_Z13DataOffloaderh+0x1c0>)
        m.primaryStart = 20;
   b62d0:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
        m.secondaryStart = 60;
   b62d4:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
        m.tertiaryStart = 20;
   b62d8:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
        PopUps.push_back(m);
   b62dc:	f7ff f8c4 	bl	b5468 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>
        redrawMenu = true;
   b62e0:	4b5d      	ldr	r3, [pc, #372]	; (b6458 <_Z13DataOffloaderh+0x1c4>)
   b62e2:	701c      	strb	r4, [r3, #0]
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   b62e4:	f007 fd48 	bl	bdd78 <_Z16_fetch_usbserialv>
   b62e8:	495c      	ldr	r1, [pc, #368]	; (b645c <_Z13DataOffloaderh+0x1c8>)
   b62ea:	f007 f938 	bl	bd55e <_ZN5Print7printlnEPKc>
}
   b62ee:	b019      	add	sp, #100	; 0x64
   b62f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b62f2:	f003 fded 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
    Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBotNum);
   b62f6:	4c5a      	ldr	r4, [pc, #360]	; (b6460 <_Z13DataOffloaderh+0x1cc>)
   b62f8:	4606      	mov	r6, r0
   b62fa:	f007 fd3d 	bl	bdd78 <_Z16_fetch_usbserialv>
   b62fe:	7822      	ldrb	r2, [r4, #0]
   b6300:	4958      	ldr	r1, [pc, #352]	; (b6464 <_Z13DataOffloaderh+0x1d0>)
   b6302:	f7fd fff1 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
    if(BLEBotNum != bot_id){
   b6306:	7823      	ldrb	r3, [r4, #0]
   b6308:	42ab      	cmp	r3, r5
   b630a:	d06c      	beq.n	b63e6 <_Z13DataOffloaderh+0x152>
        Serial.printlnf("Currently connected to Bot %s, need to connect to Bot %d",BLEBotNum,OffloadingBot);
   b630c:	f007 fd34 	bl	bdd78 <_Z16_fetch_usbserialv>
   b6310:	7822      	ldrb	r2, [r4, #0]
   b6312:	4955      	ldr	r1, [pc, #340]	; (b6468 <_Z13DataOffloaderh+0x1d4>)
   b6314:	462b      	mov	r3, r5
   b6316:	f7fd ffe7 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
        offloadingDone = true;
   b631a:	4b4a      	ldr	r3, [pc, #296]	; (b6444 <_Z13DataOffloaderh+0x1b0>)
        sprintf(m.primaryLine,"Info\0");
   b631c:	4953      	ldr	r1, [pc, #332]	; (b646c <_Z13DataOffloaderh+0x1d8>)
        offloadingDone = true;
   b631e:	2701      	movs	r7, #1
        sprintf(m.primaryLine,"Info\0");
   b6320:	a805      	add	r0, sp, #20
        offloadingDone = true;
   b6322:	701f      	strb	r7, [r3, #0]
        sprintf(m.primaryLine,"Info\0");
   b6324:	f008 fe7d 	bl	bf022 <strcpy>
        sprintf(m.secondaryLine,"Not connected to BLE\0");
   b6328:	4951      	ldr	r1, [pc, #324]	; (b6470 <_Z13DataOffloaderh+0x1dc>)
   b632a:	f10d 001e 	add.w	r0, sp, #30
   b632e:	f008 fe78 	bl	bf022 <strcpy>
        sprintf(m.tertiaryLine, "Switching BLE conn\0");
   b6332:	4950      	ldr	r1, [pc, #320]	; (b6474 <_Z13DataOffloaderh+0x1e0>)
   b6334:	a80f      	add	r0, sp, #60	; 0x3c
   b6336:	f008 fe74 	bl	bf022 <strcpy>
        m.primaryStart = 30;
   b633a:	231e      	movs	r3, #30
   b633c:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
        m.secondaryStart = 5;
   b6340:	2305      	movs	r3, #5
        PopUps.push_back(m);
   b6342:	a905      	add	r1, sp, #20
   b6344:	4843      	ldr	r0, [pc, #268]	; (b6454 <_Z13DataOffloaderh+0x1c0>)
        m.secondaryStart = 5;
   b6346:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
        m.tertiaryStart = 10;
   b634a:	230a      	movs	r3, #10
   b634c:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
        PopUps.push_back(m);
   b6350:	f7ff f88a 	bl	b5468 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>
        redrawMenu = true;
   b6354:	4b40      	ldr	r3, [pc, #256]	; (b6458 <_Z13DataOffloaderh+0x1c4>)
   b6356:	701f      	strb	r7, [r3, #0]
        BLE.disconnect(peer);
   b6358:	f004 fdc8 	bl	baeec <_ZN8particle14BleLocalDevice11getInstanceEv>
   b635c:	4946      	ldr	r1, [pc, #280]	; (b6478 <_Z13DataOffloaderh+0x1e4>)
   b635e:	f005 fc06 	bl	bbb6e <_ZNK8particle14BleLocalDevice10disconnectERKNS_13BlePeerDeviceE>
        while(!BLE.connected() && millis() - startScanTime < 15000){
   b6362:	f643 2797 	movw	r7, #14999	; 0x3a97
   b6366:	f004 fdc1 	bl	baeec <_ZN8particle14BleLocalDevice11getInstanceEv>
   b636a:	f004 fe6c 	bl	bb046 <_ZNK8particle14BleLocalDevice9connectedEv>
   b636e:	b958      	cbnz	r0, b6388 <_Z13DataOffloaderh+0xf4>
   b6370:	f003 fdae 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
   b6374:	1b80      	subs	r0, r0, r6
   b6376:	42b8      	cmp	r0, r7
   b6378:	d806      	bhi.n	b6388 <_Z13DataOffloaderh+0xf4>
            BLEScan(bot_id);
   b637a:	4628      	mov	r0, r5
   b637c:	f7ff fe5a 	bl	b6034 <_Z7BLEScani>
            delay(50);
   b6380:	2032      	movs	r0, #50	; 0x32
   b6382:	f004 f899 	bl	ba4b8 <delay>
        while(!BLE.connected() && millis() - startScanTime < 15000){
   b6386:	e7ee      	b.n	b6366 <_Z13DataOffloaderh+0xd2>
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   b6388:	4a3c      	ldr	r2, [pc, #240]	; (b647c <_Z13DataOffloaderh+0x1e8>)
   b638a:	462b      	mov	r3, r5
   b638c:	210a      	movs	r1, #10
   b638e:	a802      	add	r0, sp, #8
   b6390:	f004 f852 	bl	ba438 <snprintf>
        sendData(OffloadCommand,0,true,false,false);
   b6394:	2300      	movs	r3, #0
   b6396:	9300      	str	r3, [sp, #0]
   b6398:	2201      	movs	r2, #1
   b639a:	4619      	mov	r1, r3
   b639c:	a802      	add	r0, sp, #8
   b639e:	f7fe fc27 	bl	b4bf0 <_Z8sendDataPKchbbb>
        if(BLE.connected()) Serial.printlnf("Successfully connected to Bot %d", BLEBotNum);
   b63a2:	f004 fda3 	bl	baeec <_ZN8particle14BleLocalDevice11getInstanceEv>
   b63a6:	f004 fe4e 	bl	bb046 <_ZNK8particle14BleLocalDevice9connectedEv>
   b63aa:	b128      	cbz	r0, b63b8 <_Z13DataOffloaderh+0x124>
   b63ac:	f007 fce4 	bl	bdd78 <_Z16_fetch_usbserialv>
   b63b0:	7822      	ldrb	r2, [r4, #0]
   b63b2:	4933      	ldr	r1, [pc, #204]	; (b6480 <_Z13DataOffloaderh+0x1ec>)
   b63b4:	f7fd ff98 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
    Serial.printlnf("Starting file transfer from Bot %d",BLEBotNum);
   b63b8:	f007 fcde 	bl	bdd78 <_Z16_fetch_usbserialv>
   b63bc:	7822      	ldrb	r2, [r4, #0]
   b63be:	4931      	ldr	r1, [pc, #196]	; (b6484 <_Z13DataOffloaderh+0x1f0>)
   b63c0:	f7fd ff92 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
   b63c4:	f003 fd84 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
    if(millis() - startScanTime > 15000){
   b63c8:	f643 2398 	movw	r3, #15000	; 0x3a98
   b63cc:	1b80      	subs	r0, r0, r6
   b63ce:	4298      	cmp	r0, r3
   b63d0:	d916      	bls.n	b6400 <_Z13DataOffloaderh+0x16c>
   b63d2:	482d      	ldr	r0, [pc, #180]	; (b6488 <_Z13DataOffloaderh+0x1f4>)
        if(logDir.isOpen()) logDir.close();
   b63d4:	7c03      	ldrb	r3, [r0, #16]
   b63d6:	2b00      	cmp	r3, #0
   b63d8:	d089      	beq.n	b62ee <_Z13DataOffloaderh+0x5a>
   b63da:	3010      	adds	r0, #16
}
   b63dc:	b019      	add	sp, #100	; 0x64
   b63de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        if(logDir.isOpen()) logDir.close();
   b63e2:	f001 ba9b 	b.w	b791c <_ZN7FatFile5closeEv>
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   b63e6:	4a25      	ldr	r2, [pc, #148]	; (b647c <_Z13DataOffloaderh+0x1e8>)
   b63e8:	210a      	movs	r1, #10
   b63ea:	a805      	add	r0, sp, #20
   b63ec:	f004 f824 	bl	ba438 <snprintf>
        sendData(OffloadCommand,0,true,false,false);
   b63f0:	2300      	movs	r3, #0
   b63f2:	9300      	str	r3, [sp, #0]
   b63f4:	2201      	movs	r2, #1
   b63f6:	4619      	mov	r1, r3
   b63f8:	a805      	add	r0, sp, #20
   b63fa:	f7fe fbf9 	bl	b4bf0 <_Z8sendDataPKchbbb>
   b63fe:	e7db      	b.n	b63b8 <_Z13DataOffloaderh+0x124>
    if(BLE.connected()) offloadingDone = false;
   b6400:	f004 fd74 	bl	baeec <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6404:	f004 fe1f 	bl	bb046 <_ZNK8particle14BleLocalDevice9connectedEv>
   b6408:	4d0e      	ldr	r5, [pc, #56]	; (b6444 <_Z13DataOffloaderh+0x1b0>)
   b640a:	b108      	cbz	r0, b6410 <_Z13DataOffloaderh+0x17c>
   b640c:	2300      	movs	r3, #0
   b640e:	702b      	strb	r3, [r5, #0]
    while(!offloadingDone) delay(100);
   b6410:	782b      	ldrb	r3, [r5, #0]
   b6412:	b91b      	cbnz	r3, b641c <_Z13DataOffloaderh+0x188>
   b6414:	2064      	movs	r0, #100	; 0x64
   b6416:	f004 f84f 	bl	ba4b8 <delay>
   b641a:	e7f9      	b.n	b6410 <_Z13DataOffloaderh+0x17c>
    Serial.printlnf("Finished transferring file from Bot %d",BLEBotNum);
   b641c:	f007 fcac 	bl	bdd78 <_Z16_fetch_usbserialv>
   b6420:	7822      	ldrb	r2, [r4, #0]
   b6422:	491a      	ldr	r1, [pc, #104]	; (b648c <_Z13DataOffloaderh+0x1f8>)
   b6424:	f7fd ff60 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
   b6428:	4817      	ldr	r0, [pc, #92]	; (b6488 <_Z13DataOffloaderh+0x1f4>)
    if(logDir.isOpen()) logDir.close();
   b642a:	7c03      	ldrb	r3, [r0, #16]
   b642c:	b113      	cbz	r3, b6434 <_Z13DataOffloaderh+0x1a0>
   b642e:	3010      	adds	r0, #16
   b6430:	f001 fa74 	bl	b791c <_ZN7FatFile5closeEv>
    offloadingMode = false;
   b6434:	4b16      	ldr	r3, [pc, #88]	; (b6490 <_Z13DataOffloaderh+0x1fc>)
   b6436:	2200      	movs	r2, #0
   b6438:	701a      	strb	r2, [r3, #0]
   b643a:	e758      	b.n	b62ee <_Z13DataOffloaderh+0x5a>
   b643c:	000c1597 	.word	0x000c1597
   b6440:	2003ddac 	.word	0x2003ddac
   b6444:	2003de5a 	.word	0x2003de5a
   b6448:	000c18a6 	.word	0x000c18a6
   b644c:	000c12c6 	.word	0x000c12c6
   b6450:	000c18c8 	.word	0x000c18c8
   b6454:	2003dcc4 	.word	0x2003dcc4
   b6458:	2003daaa 	.word	0x2003daaa
   b645c:	000c1599 	.word	0x000c1599
   b6460:	2003dc94 	.word	0x2003dc94
   b6464:	000c15da 	.word	0x000c15da
   b6468:	000c1607 	.word	0x000c1607
   b646c:	000c1908 	.word	0x000c1908
   b6470:	000c190e 	.word	0x000c190e
   b6474:	000c1924 	.word	0x000c1924
   b6478:	2003deb4 	.word	0x2003deb4
   b647c:	000c1640 	.word	0x000c1640
   b6480:	000c1649 	.word	0x000c1649
   b6484:	000c166a 	.word	0x000c166a
   b6488:	2003dd9c 	.word	0x2003dd9c
   b648c:	000c168d 	.word	0x000c168d
   b6490:	2003de5b 	.word	0x2003de5b

000b6494 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b6494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6498:	e9d0 9a00 	ldrd	r9, sl, [r0]
   b649c:	468b      	mov	fp, r1
	if (max_size() - size() < __n)
   b649e:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   b64a2:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b64a4:	ebaa 0209 	sub.w	r2, sl, r9
	if (max_size() - size() < __n)
   b64a8:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   b64ac:	4680      	mov	r8, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b64ae:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   b64b2:	d102      	bne.n	b64ba <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b64b4:	4826      	ldr	r0, [pc, #152]	; (b6550 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>)
   b64b6:	f007 fe37 	bl	be128 <_ZSt20__throw_length_errorPKc>
   b64ba:	2c01      	cmp	r4, #1
   b64bc:	4622      	mov	r2, r4
   b64be:	bf38      	it	cc
   b64c0:	2201      	movcc	r2, #1
   b64c2:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b64c4:	ebab 0609 	sub.w	r6, fp, r9
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b64c8:	d21a      	bcs.n	b6500 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b64ca:	b1dc      	cbz	r4, b6504 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x70>
   b64cc:	429c      	cmp	r4, r3
   b64ce:	bf28      	it	cs
   b64d0:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b64d2:	0120      	lsls	r0, r4, #4
   b64d4:	9101      	str	r1, [sp, #4]
   b64d6:	f7fd fdde 	bl	b4096 <_Znwj>
   b64da:	9901      	ldr	r1, [sp, #4]
   b64dc:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b64de:	19a8      	adds	r0, r5, r6
   b64e0:	d001      	beq.n	b64e6 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x52>
   b64e2:	f007 fa15 	bl	bd910 <_ZN6StringC1EOS_>
   b64e6:	4628      	mov	r0, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b64e8:	464e      	mov	r6, r9
	      for (; __first != __last; ++__first, (void)++__cur)
   b64ea:	45b3      	cmp	fp, r6
   b64ec:	f100 0710 	add.w	r7, r0, #16
   b64f0:	d00a      	beq.n	b6508 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b64f2:	b110      	cbz	r0, b64fa <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x66>
   b64f4:	4631      	mov	r1, r6
   b64f6:	f007 fa25 	bl	bd944 <_ZN6StringC1ERKS_>
   b64fa:	3610      	adds	r6, #16
   b64fc:	4638      	mov	r0, r7
   b64fe:	e7f4      	b.n	b64ea <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x56>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b6500:	461c      	mov	r4, r3
   b6502:	e7e6      	b.n	b64d2 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6504:	4625      	mov	r5, r4
   b6506:	e7ea      	b.n	b64de <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   b6508:	4556      	cmp	r6, sl
   b650a:	d006      	beq.n	b651a <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
   b650c:	4631      	mov	r1, r6
   b650e:	4638      	mov	r0, r7
   b6510:	f007 fa18 	bl	bd944 <_ZN6StringC1ERKS_>
   b6514:	3610      	adds	r6, #16
   b6516:	3710      	adds	r7, #16
   b6518:	e7f6      	b.n	b6508 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b651a:	464e      	mov	r6, r9
	  for (; __first != __last; ++__first)
   b651c:	4556      	cmp	r6, sl
   b651e:	d004      	beq.n	b652a <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x96>
      __pointer->~_Tp();
   b6520:	4630      	mov	r0, r6
   b6522:	f007 f979 	bl	bd818 <_ZN6StringD1Ev>
	  for (; __first != __last; ++__first)
   b6526:	3610      	adds	r6, #16
   b6528:	e7f8      	b.n	b651c <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x88>
	if (__p)
   b652a:	f1b9 0f00 	cmp.w	r9, #0
   b652e:	d006      	beq.n	b653e <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
		    this->_M_impl._M_end_of_storage - __old_start);
   b6530:	f8d8 1008 	ldr.w	r1, [r8, #8]
	::operator delete(__p
   b6534:	4648      	mov	r0, r9
   b6536:	eba1 0109 	sub.w	r1, r1, r9
   b653a:	f7fd fdb0 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b653e:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   b6542:	e9c8 5700 	strd	r5, r7, [r8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b6546:	f8c8 4008 	str.w	r4, [r8, #8]
    }
   b654a:	b003      	add	sp, #12
   b654c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6550:	000c1378 	.word	0x000c1378

000b6554 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0>:
      vector<_Tp, _Alloc>::
   b6554:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b6556:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   b655a:	42ab      	cmp	r3, r5
      vector<_Tp, _Alloc>::
   b655c:	4604      	mov	r4, r0
   b655e:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b6560:	d007      	beq.n	b6572 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b6562:	b113      	cbz	r3, b656a <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0+0x16>
   b6564:	4618      	mov	r0, r3
   b6566:	f007 f9d3 	bl	bd910 <_ZN6StringC1EOS_>
	    ++this->_M_impl._M_finish;
   b656a:	6863      	ldr	r3, [r4, #4]
   b656c:	3310      	adds	r3, #16
   b656e:	6063      	str	r3, [r4, #4]
      }
   b6570:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   b6572:	4619      	mov	r1, r3
   b6574:	f7ff ff8e 	bl	b6494 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
	return back();
   b6578:	e7fa      	b.n	b6570 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0+0x1c>
	...

000b657c <_ZN8MenuItemC1ERKS_>:
class MenuItem{
   b657c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6580:	e9d1 2700 	ldrd	r2, r7, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6584:	2300      	movs	r3, #0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6586:	1abf      	subs	r7, r7, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6588:	e9c0 3300 	strd	r3, r3, [r0]
   b658c:	4604      	mov	r4, r0
   b658e:	460d      	mov	r5, r1
   b6590:	6083      	str	r3, [r0, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6592:	d018      	beq.n	b65c6 <_ZN8MenuItemC1ERKS_+0x4a>
	if (__n > this->_M_max_size())
   b6594:	4b1a      	ldr	r3, [pc, #104]	; (b6600 <_ZN8MenuItemC1ERKS_+0x84>)
   b6596:	429f      	cmp	r7, r3
   b6598:	d901      	bls.n	b659e <_ZN8MenuItemC1ERKS_+0x22>
	  std::__throw_bad_alloc();
   b659a:	f007 fdbf 	bl	be11c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b659e:	4638      	mov	r0, r7
   b65a0:	f7fd fd79 	bl	b4096 <_Znwj>
   b65a4:	4606      	mov	r6, r0
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b65a6:	e9c4 6600 	strd	r6, r6, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b65aa:	4437      	add	r7, r6
   b65ac:	60a7      	str	r7, [r4, #8]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b65ae:	e9d5 7800 	ldrd	r7, r8, [r5]
   b65b2:	45b8      	cmp	r8, r7
   b65b4:	d009      	beq.n	b65ca <_ZN8MenuItemC1ERKS_+0x4e>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b65b6:	b11e      	cbz	r6, b65c0 <_ZN8MenuItemC1ERKS_+0x44>
   b65b8:	4639      	mov	r1, r7
   b65ba:	4630      	mov	r0, r6
   b65bc:	f007 f9c2 	bl	bd944 <_ZN6StringC1ERKS_>
   b65c0:	3610      	adds	r6, #16
   b65c2:	3710      	adds	r7, #16
   b65c4:	e7f5      	b.n	b65b2 <_ZN8MenuItemC1ERKS_+0x36>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b65c6:	463e      	mov	r6, r7
   b65c8:	e7ed      	b.n	b65a6 <_ZN8MenuItemC1ERKS_+0x2a>
	this->_M_impl._M_finish =
   b65ca:	6066      	str	r6, [r4, #4]
   b65cc:	7e2b      	ldrb	r3, [r5, #24]
   b65ce:	7623      	strb	r3, [r4, #24]
   b65d0:	8b6b      	ldrh	r3, [r5, #26]
   b65d2:	8363      	strh	r3, [r4, #26]
   b65d4:	8bab      	ldrh	r3, [r5, #28]
   b65d6:	692a      	ldr	r2, [r5, #16]
   b65d8:	68e9      	ldr	r1, [r5, #12]
   b65da:	83a3      	strh	r3, [r4, #28]
   b65dc:	f8d5 301e 	ldr.w	r3, [r5, #30]
   b65e0:	f8c4 301e 	str.w	r3, [r4, #30]
   b65e4:	f8d5 3022 	ldr.w	r3, [r5, #34]	; 0x22
   b65e8:	f8c4 3022 	str.w	r3, [r4, #34]	; 0x22
   b65ec:	e9c4 1203 	strd	r1, r2, [r4, #12]
   b65f0:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
   b65f2:	696a      	ldr	r2, [r5, #20]
   b65f4:	6162      	str	r2, [r4, #20]
   b65f6:	84e3      	strh	r3, [r4, #38]	; 0x26
   b65f8:	4620      	mov	r0, r4
   b65fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b65fe:	bf00      	nop
   b6600:	7ffffff0 	.word	0x7ffffff0

000b6604 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b6604:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6608:	e9d0 8700 	ldrd	r8, r7, [r0]
   b660c:	4b23      	ldr	r3, [pc, #140]	; (b669c <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>)
   b660e:	eba7 0408 	sub.w	r4, r7, r8
   b6612:	10e4      	asrs	r4, r4, #3
   b6614:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
   b6616:	4b22      	ldr	r3, [pc, #136]	; (b66a0 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>)
   b6618:	429c      	cmp	r4, r3
   b661a:	460e      	mov	r6, r1
   b661c:	4605      	mov	r5, r0
   b661e:	4611      	mov	r1, r2
   b6620:	d102      	bne.n	b6628 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
   b6622:	4820      	ldr	r0, [pc, #128]	; (b66a4 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa0>)
   b6624:	f007 fd80 	bl	be128 <_ZSt20__throw_length_errorPKc>
   b6628:	2c01      	cmp	r4, #1
   b662a:	4622      	mov	r2, r4
   b662c:	bf38      	it	cc
   b662e:	2201      	movcc	r2, #1
   b6630:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b6632:	eba6 0a08 	sub.w	sl, r6, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b6636:	d22d      	bcs.n	b6694 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6638:	b374      	cbz	r4, b6698 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
   b663a:	429c      	cmp	r4, r3
   b663c:	bf28      	it	cs
   b663e:	461c      	movcs	r4, r3
   b6640:	2028      	movs	r0, #40	; 0x28
   b6642:	4360      	muls	r0, r4
   b6644:	9101      	str	r1, [sp, #4]
   b6646:	f7fd fd26 	bl	b4096 <_Znwj>
   b664a:	9901      	ldr	r1, [sp, #4]
   b664c:	4681      	mov	r9, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b664e:	eb19 000a 	adds.w	r0, r9, sl
   b6652:	d001      	beq.n	b6658 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x54>
   b6654:	f7ff ff92 	bl	b657c <_ZN8MenuItemC1ERKS_>
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
   b6658:	4631      	mov	r1, r6
   b665a:	464a      	mov	r2, r9
   b665c:	4640      	mov	r0, r8
   b665e:	f7fe fe66 	bl	b532e <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
   b6662:	4639      	mov	r1, r7
   b6664:	f100 0228 	add.w	r2, r0, #40	; 0x28
   b6668:	4630      	mov	r0, r6
   b666a:	f7fe fe60 	bl	b532e <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
   b666e:	4606      	mov	r6, r0
	if (__p)
   b6670:	f1b8 0f00 	cmp.w	r8, #0
   b6674:	d005      	beq.n	b6682 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7e>
		    this->_M_impl._M_end_of_storage - __old_start);
   b6676:	68a9      	ldr	r1, [r5, #8]
	::operator delete(__p
   b6678:	4640      	mov	r0, r8
   b667a:	eba1 0108 	sub.w	r1, r1, r8
   b667e:	f7fd fd0e 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b6682:	2028      	movs	r0, #40	; 0x28
   b6684:	fb00 9404 	mla	r4, r0, r4, r9
      this->_M_impl._M_finish = __new_finish;
   b6688:	e9c5 9600 	strd	r9, r6, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b668c:	60ac      	str	r4, [r5, #8]
    }
   b668e:	b002      	add	sp, #8
   b6690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b6694:	461c      	mov	r4, r3
   b6696:	e7d3      	b.n	b6640 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6698:	46a1      	mov	r9, r4
   b669a:	e7d8      	b.n	b664e <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   b669c:	cccccccd 	.word	0xcccccccd
   b66a0:	03333333 	.word	0x03333333
   b66a4:	000c1378 	.word	0x000c1378

000b66a8 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b66a8:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b66aa:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   b66ae:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   b66b0:	4604      	mov	r4, r0
   b66b2:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b66b4:	d007      	beq.n	b66c6 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b66b6:	b113      	cbz	r3, b66be <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x16>
   b66b8:	4618      	mov	r0, r3
   b66ba:	f7ff ff5f 	bl	b657c <_ZN8MenuItemC1ERKS_>
	    ++this->_M_impl._M_finish;
   b66be:	6863      	ldr	r3, [r4, #4]
   b66c0:	3328      	adds	r3, #40	; 0x28
   b66c2:	6063      	str	r3, [r4, #4]
      }
   b66c4:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   b66c6:	4619      	mov	r1, r3
   b66c8:	f7ff ff9c 	bl	b6604 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b66cc:	e7fa      	b.n	b66c4 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x1c>
	...

000b66d0 <_Z10createMenuv>:
void createMenu(){
   b66d0:	b570      	push	{r4, r5, r6, lr}
   b66d2:	b0c6      	sub	sp, #280	; 0x118
	: _M_start(), _M_finish(), _M_end_of_storage()
   b66d4:	2400      	movs	r4, #0
            maxVal = maxV;
   b66d6:	2501      	movs	r5, #1
            strcpy(itemName,itemString);
   b66d8:	496c      	ldr	r1, [pc, #432]	; (b688c <_Z10createMenuv+0x1bc>)
   b66da:	9402      	str	r4, [sp, #8]
   b66dc:	f10d 001e 	add.w	r0, sp, #30
            stepSize = inStep;
   b66e0:	f04f 1601 	mov.w	r6, #65537	; 0x10001
   b66e4:	e9cd 4400 	strd	r4, r4, [sp]
            minVal = minV;
   b66e8:	f8ad 401a 	strh.w	r4, [sp, #26]
            maxVal = maxV;
   b66ec:	f8ad 501c 	strh.w	r5, [sp, #28]
            strcpy(itemName,itemString);
   b66f0:	f008 fc97 	bl	bf022 <strcpy>
            stepSize = inStep;
   b66f4:	2315      	movs	r3, #21
   b66f6:	e9cd 3604 	strd	r3, r6, [sp, #16]
            strcpy(itemName,itemString);
   b66fa:	4965      	ldr	r1, [pc, #404]	; (b6890 <_Z10createMenuv+0x1c0>)
class MenuItem{
   b66fc:	f88d 4018 	strb.w	r4, [sp, #24]
            maxVal = maxV;
   b6700:	2364      	movs	r3, #100	; 0x64
            strcpy(itemName,itemString);
   b6702:	f10d 0046 	add.w	r0, sp, #70	; 0x46
   b6706:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   b670a:	940c      	str	r4, [sp, #48]	; 0x30
            minVal = minV;
   b670c:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
            maxVal = maxV;
   b6710:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            strcpy(itemName,itemString);
   b6714:	f008 fc85 	bl	bf022 <strcpy>
    battStat.MethodPointer = &WaterBot::battPercent;
   b6718:	2304      	movs	r3, #4
            strcpy(itemName,itemString);
   b671a:	495e      	ldr	r1, [pc, #376]	; (b6894 <_Z10createMenuv+0x1c4>)
    battStat.MethodPointer = &WaterBot::battPercent;
   b671c:	930d      	str	r3, [sp, #52]	; 0x34
            strcpy(itemName,itemString);
   b671e:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
   b6722:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
   b6726:	9416      	str	r4, [sp, #88]	; 0x58
            minVal = minV;
   b6728:	f8ad 406a 	strh.w	r4, [sp, #106]	; 0x6a
            stepSize = inStep;
   b672c:	950f      	str	r5, [sp, #60]	; 0x3c
    battStat.statOnly = true;
   b672e:	f88d 5040 	strb.w	r5, [sp, #64]	; 0x40
            maxVal = maxV;
   b6732:	f8ad 506c 	strh.w	r5, [sp, #108]	; 0x6c
            strcpy(itemName,itemString);
   b6736:	f008 fc74 	bl	bf022 <strcpy>
    offloadItem.MethodPointerBool = &WaterBot::offloading;
   b673a:	2316      	movs	r3, #22
            stepSize = inStep;
   b673c:	e9cd 3618 	strd	r3, r6, [sp, #96]	; 0x60
            strcpy(itemName,itemString);
   b6740:	4955      	ldr	r1, [pc, #340]	; (b6898 <_Z10createMenuv+0x1c8>)
class MenuItem{
   b6742:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
            maxVal = maxV;
   b6746:	2302      	movs	r3, #2
            strcpy(itemName,itemString);
   b6748:	f10d 0096 	add.w	r0, sp, #150	; 0x96
   b674c:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
   b6750:	9420      	str	r4, [sp, #128]	; 0x80
            minVal = minV;
   b6752:	f8ad 4092 	strh.w	r4, [sp, #146]	; 0x92
            maxVal = maxV;
   b6756:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
            strcpy(itemName,itemString);
   b675a:	f008 fc62 	bl	bf022 <strcpy>
            stepSize = inStep;
   b675e:	4b4f      	ldr	r3, [pc, #316]	; (b689c <_Z10createMenuv+0x1cc>)
    sentryToggle.labels.push_back("Rem");
   b6760:	494f      	ldr	r1, [pc, #316]	; (b68a0 <_Z10createMenuv+0x1d0>)
            stepSize = inStep;
   b6762:	9323      	str	r3, [sp, #140]	; 0x8c
    sentryToggle.labels.push_back("Rem");
   b6764:	a83c      	add	r0, sp, #240	; 0xf0
class MenuItem{
   b6766:	f88d 4090 	strb.w	r4, [sp, #144]	; 0x90
    sentryToggle.labels.push_back("Rem");
   b676a:	f007 f8a0 	bl	bd8ae <_ZN6StringC1EPK19__FlashStringHelper>
      { emplace_back(std::move(__x)); }
   b676e:	a93c      	add	r1, sp, #240	; 0xf0
   b6770:	a81e      	add	r0, sp, #120	; 0x78
   b6772:	f7ff feef 	bl	b6554 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0>
   b6776:	a83c      	add	r0, sp, #240	; 0xf0
   b6778:	f007 f84e 	bl	bd818 <_ZN6StringD1Ev>
    sentryToggle.labels.push_back("Sen");
   b677c:	4949      	ldr	r1, [pc, #292]	; (b68a4 <_Z10createMenuv+0x1d4>)
   b677e:	a83c      	add	r0, sp, #240	; 0xf0
   b6780:	f007 f895 	bl	bd8ae <_ZN6StringC1EPK19__FlashStringHelper>
   b6784:	a93c      	add	r1, sp, #240	; 0xf0
   b6786:	a81e      	add	r0, sp, #120	; 0x78
   b6788:	f7ff fee4 	bl	b6554 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0>
   b678c:	a83c      	add	r0, sp, #240	; 0xf0
   b678e:	f007 f843 	bl	bd818 <_ZN6StringD1Ev>
    sentryToggle.labels.push_back("Aut");
   b6792:	4945      	ldr	r1, [pc, #276]	; (b68a8 <_Z10createMenuv+0x1d8>)
   b6794:	a83c      	add	r0, sp, #240	; 0xf0
   b6796:	f007 f88a 	bl	bd8ae <_ZN6StringC1EPK19__FlashStringHelper>
   b679a:	a93c      	add	r1, sp, #240	; 0xf0
   b679c:	a81e      	add	r0, sp, #120	; 0x78
   b679e:	f7ff fed9 	bl	b6554 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0>
   b67a2:	a83c      	add	r0, sp, #240	; 0xf0
   b67a4:	f007 f838 	bl	bd818 <_ZN6StringD1Ev>
    sentryToggle.MethodPointer = &WaterBot::driveMode;
   b67a8:	230e      	movs	r3, #14
            strcpy(itemName,itemString);
   b67aa:	4940      	ldr	r1, [pc, #256]	; (b68ac <_Z10createMenuv+0x1dc>)
    sentryToggle.MethodPointer = &WaterBot::driveMode;
   b67ac:	9321      	str	r3, [sp, #132]	; 0x84
            strcpy(itemName,itemString);
   b67ae:	f10d 00be 	add.w	r0, sp, #190	; 0xbe
	: _M_start(), _M_finish(), _M_end_of_storage()
   b67b2:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
   b67b6:	942a      	str	r4, [sp, #168]	; 0xa8
            minVal = minV;
   b67b8:	f8ad 40ba 	strh.w	r4, [sp, #186]	; 0xba
            maxVal = maxV;
   b67bc:	f8ad 50bc 	strh.w	r5, [sp, #188]	; 0xbc
            strcpy(itemName,itemString);
   b67c0:	f008 fc2f 	bl	bf022 <strcpy>
    signalToggle.MethodPointerBool = &WaterBot::signal;
   b67c4:	2310      	movs	r3, #16
            stepSize = inStep;
   b67c6:	e9cd 362c 	strd	r3, r6, [sp, #176]	; 0xb0
            strcpy(itemName,itemString);
   b67ca:	4939      	ldr	r1, [pc, #228]	; (b68b0 <_Z10createMenuv+0x1e0>)
class MenuItem{
   b67cc:	f88d 40b8 	strb.w	r4, [sp, #184]	; 0xb8
            maxVal = maxV;
   b67d0:	f240 36e7 	movw	r6, #999	; 0x3e7
            strcpy(itemName,itemString);
   b67d4:	f10d 00e6 	add.w	r0, sp, #230	; 0xe6
   b67d8:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
   b67dc:	9434      	str	r4, [sp, #208]	; 0xd0
            minVal = minV;
   b67de:	f8ad 40e2 	strh.w	r4, [sp, #226]	; 0xe2
            maxVal = maxV;
   b67e2:	f8ad 60e4 	strh.w	r6, [sp, #228]	; 0xe4
            strcpy(itemName,itemString);
   b67e6:	f008 fc1c 	bl	bf022 <strcpy>
   b67ea:	e9cd 443c 	strd	r4, r4, [sp, #240]	; 0xf0
   b67ee:	943e      	str	r4, [sp, #248]	; 0xf8
            minVal = minV;
   b67f0:	f8ad 410a 	strh.w	r4, [sp, #266]	; 0x10a
    MenuItems.push_back(dataRecord);
   b67f4:	4c2f      	ldr	r4, [pc, #188]	; (b68b4 <_Z10createMenuv+0x1e4>)
            strcpy(itemName,itemString);
   b67f6:	4930      	ldr	r1, [pc, #192]	; (b68b8 <_Z10createMenuv+0x1e8>)
            stepSize = inStep;
   b67f8:	9537      	str	r5, [sp, #220]	; 0xdc
    solStat.MethodPointer = &WaterBot::panelPower;
   b67fa:	2340      	movs	r3, #64	; 0x40
            strcpy(itemName,itemString);
   b67fc:	f50d 7087 	add.w	r0, sp, #270	; 0x10e
    solStat.MethodPointer = &WaterBot::panelPower;
   b6800:	9335      	str	r3, [sp, #212]	; 0xd4
    solStat.statOnly = true;
   b6802:	f88d 50e0 	strb.w	r5, [sp, #224]	; 0xe0
            maxVal = maxV;
   b6806:	f8ad 610c 	strh.w	r6, [sp, #268]	; 0x10c
            strcpy(itemName,itemString);
   b680a:	f008 fc0a 	bl	bf022 <strcpy>
    battPwr.MethodPointer = &WaterBot::battPower;
   b680e:	2342      	movs	r3, #66	; 0x42
    MenuItems.push_back(dataRecord);
   b6810:	4669      	mov	r1, sp
   b6812:	4620      	mov	r0, r4
    battPwr.MethodPointer = &WaterBot::battPower;
   b6814:	933f      	str	r3, [sp, #252]	; 0xfc
            stepSize = inStep;
   b6816:	9541      	str	r5, [sp, #260]	; 0x104
    battPwr.statOnly = true;
   b6818:	f88d 5108 	strb.w	r5, [sp, #264]	; 0x108
    MenuItems.push_back(dataRecord);
   b681c:	f7ff ff44 	bl	b66a8 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(battStat);
   b6820:	a90a      	add	r1, sp, #40	; 0x28
   b6822:	4620      	mov	r0, r4
   b6824:	f7ff ff40 	bl	b66a8 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(sentryToggle);
   b6828:	a91e      	add	r1, sp, #120	; 0x78
   b682a:	4620      	mov	r0, r4
   b682c:	f7ff ff3c 	bl	b66a8 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(offloadItem);
   b6830:	a914      	add	r1, sp, #80	; 0x50
   b6832:	4620      	mov	r0, r4
   b6834:	f7ff ff38 	bl	b66a8 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(signalToggle);
   b6838:	a928      	add	r1, sp, #160	; 0xa0
   b683a:	4620      	mov	r0, r4
   b683c:	f7ff ff34 	bl	b66a8 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(solStat);
   b6840:	a932      	add	r1, sp, #200	; 0xc8
   b6842:	4620      	mov	r0, r4
   b6844:	f7ff ff30 	bl	b66a8 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(battPwr);
   b6848:	a93c      	add	r1, sp, #240	; 0xf0
   b684a:	4620      	mov	r0, r4
   b684c:	f7ff ff2c 	bl	b66a8 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    SelectedItem = &MenuItems.at(menuItem);
   b6850:	4b1a      	ldr	r3, [pc, #104]	; (b68bc <_Z10createMenuv+0x1ec>)
   b6852:	4620      	mov	r0, r4
   b6854:	7819      	ldrb	r1, [r3, #0]
   b6856:	f7fe fbef 	bl	b5038 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b685a:	4b19      	ldr	r3, [pc, #100]	; (b68c0 <_Z10createMenuv+0x1f0>)
   b685c:	6018      	str	r0, [r3, #0]
class MenuItem{
   b685e:	a83c      	add	r0, sp, #240	; 0xf0
   b6860:	f7fe fd52 	bl	b5308 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b6864:	a832      	add	r0, sp, #200	; 0xc8
   b6866:	f7fe fd4f 	bl	b5308 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b686a:	a828      	add	r0, sp, #160	; 0xa0
   b686c:	f7fe fd4c 	bl	b5308 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b6870:	a81e      	add	r0, sp, #120	; 0x78
   b6872:	f7fe fd49 	bl	b5308 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b6876:	a814      	add	r0, sp, #80	; 0x50
   b6878:	f7fe fd46 	bl	b5308 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b687c:	a80a      	add	r0, sp, #40	; 0x28
   b687e:	f7fe fd43 	bl	b5308 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b6882:	4668      	mov	r0, sp
   b6884:	f7fe fd40 	bl	b5308 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
}
   b6888:	b046      	add	sp, #280	; 0x118
   b688a:	bd70      	pop	{r4, r5, r6, pc}
   b688c:	000c16b4 	.word	0x000c16b4
   b6890:	000c16bb 	.word	0x000c16bb
   b6894:	000c16c3 	.word	0x000c16c3
   b6898:	000c16cb 	.word	0x000c16cb
   b689c:	01000001 	.word	0x01000001
   b68a0:	000c16d2 	.word	0x000c16d2
   b68a4:	000c16d6 	.word	0x000c16d6
   b68a8:	000c16da 	.word	0x000c16da
   b68ac:	000c16de 	.word	0x000c16de
   b68b0:	000c16e5 	.word	0x000c16e5
   b68b4:	2003dcac 	.word	0x2003dcac
   b68b8:	000c16ec 	.word	0x000c16ec
   b68bc:	2003de05 	.word	0x2003de05
   b68c0:	2003dcd4 	.word	0x2003dcd4

000b68c4 <_GLOBAL__sub_I_SystemMode>:
   b68c4:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b68c6:	4b63      	ldr	r3, [pc, #396]	; (b6a54 <_GLOBAL__sub_I_SystemMode+0x190>)
   b68c8:	4c63      	ldr	r4, [pc, #396]	; (b6a58 <_GLOBAL__sub_I_SystemMode+0x194>)
   b68ca:	2201      	movs	r2, #1
   b68cc:	701a      	strb	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b68ce:	4b63      	ldr	r3, [pc, #396]	; (b6a5c <_GLOBAL__sub_I_SystemMode+0x198>)
   b68d0:	2200      	movs	r2, #0
   b68d2:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b68d6:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b68da:	b08a      	sub	sp, #40	; 0x28
   b68dc:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b68de:	2002      	movs	r0, #2
   b68e0:	f003 fca6 	bl	ba230 <set_system_mode>
const BleUuid serviceUuid("b4206910-dc4b-5743-c8b1-92d0e75182b0");
   b68e4:	495e      	ldr	r1, [pc, #376]	; (b6a60 <_GLOBAL__sub_I_SystemMode+0x19c>)
   b68e6:	485f      	ldr	r0, [pc, #380]	; (b6a64 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b68e8:	f004 f83e 	bl	ba968 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("b4206912-dc4b-5743-c8b1-92d0e75182b0");
   b68ec:	495e      	ldr	r1, [pc, #376]	; (b6a68 <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b68ee:	485f      	ldr	r0, [pc, #380]	; (b6a6c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b68f0:	f004 f83a 	bl	ba968 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("b4206913-dc4b-5743-c8b1-92d0e75182b0");
   b68f4:	495e      	ldr	r1, [pc, #376]	; (b6a70 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b68f6:	485f      	ldr	r0, [pc, #380]	; (b6a74 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b68f8:	f004 f836 	bl	ba968 <_ZN8particle7BleUuidC1EPKc>
const BleUuid offldUuid("b4206914-dc4b-5743-c8b1-92d0e75182b0");
   b68fc:	495e      	ldr	r1, [pc, #376]	; (b6a78 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b68fe:	485f      	ldr	r0, [pc, #380]	; (b6a7c <_GLOBAL__sub_I_SystemMode+0x1b8>)
   b6900:	f004 f832 	bl	ba968 <_ZN8particle7BleUuidC1EPKc>
   b6904:	2514      	movs	r5, #20
            : rssi_(BLE_RSSI_INVALID) {
   b6906:	267f      	movs	r6, #127	; 0x7f
   b6908:	4620      	mov	r0, r4
   b690a:	f003 ff48 	bl	ba79e <_ZN8particle10BleAddressC1Ev>
   b690e:	f104 0008 	add.w	r0, r4, #8
   b6912:	f004 ff74 	bl	bb7fe <_ZN8particle18BleAdvertisingDataC1Ev>
   b6916:	f104 0014 	add.w	r0, r4, #20
   b691a:	f004 ff70 	bl	bb7fe <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_COUNT];
   b691e:	3d01      	subs	r5, #1
   b6920:	f884 6020 	strb.w	r6, [r4, #32]
   b6924:	f104 0424 	add.w	r4, r4, #36	; 0x24
   b6928:	d1ee      	bne.n	b6908 <_GLOBAL__sub_I_SystemMode+0x44>
BleCharacteristic peerTxCharacteristic;         //Characteristic to receive data from the bot
   b692a:	4855      	ldr	r0, [pc, #340]	; (b6a80 <_GLOBAL__sub_I_SystemMode+0x1bc>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b692c:	4c55      	ldr	r4, [pc, #340]	; (b6a84 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   b692e:	f004 f951 	bl	babd4 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerRxCharacteristic;         //Characteristic to send data too the bot
   b6932:	4855      	ldr	r0, [pc, #340]	; (b6a88 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b6934:	f004 f94e 	bl	babd4 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerOffloadCharacteristic;    //Characteristic to receive SD card data from bot
   b6938:	4854      	ldr	r0, [pc, #336]	; (b6a8c <_GLOBAL__sub_I_SystemMode+0x1c8>)
   b693a:	f004 f94b 	bl	babd4 <_ZN8particle17BleCharacteristicC1Ev>
BlePeerDevice peer;                             //Bluetooth peer device that is currently connected
   b693e:	4854      	ldr	r0, [pc, #336]	; (b6a90 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b6940:	f004 fa24 	bl	bad8c <_ZN8particle13BlePeerDeviceC1Ev>
Adafruit_SH1107 oled = Adafruit_SH1107(64, 128, &Wire, OLED_RESET);
   b6944:	f007 fb84 	bl	be050 <_Z19__fetch_global_Wirev>
   b6948:	4a52      	ldr	r2, [pc, #328]	; (b6a94 <_GLOBAL__sub_I_SystemMode+0x1d0>)
   b694a:	4953      	ldr	r1, [pc, #332]	; (b6a98 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b694c:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b6950:	2213      	movs	r2, #19
   b6952:	4603      	mov	r3, r0
   b6954:	9200      	str	r2, [sp, #0]
   b6956:	4851      	ldr	r0, [pc, #324]	; (b6a9c <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b6958:	2280      	movs	r2, #128	; 0x80
   b695a:	2140      	movs	r1, #64	; 0x40
   b695c:	f003 f852 	bl	b9a04 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>
   b6960:	7823      	ldrb	r3, [r4, #0]
   b6962:	f3bf 8f5b 	dmb	ish
   b6966:	07d8      	lsls	r0, r3, #31
   b6968:	d40a      	bmi.n	b6980 <_GLOBAL__sub_I_SystemMode+0xbc>
   b696a:	4620      	mov	r0, r4
   b696c:	f7fd fba6 	bl	b40bc <__cxa_guard_acquire>
   b6970:	b130      	cbz	r0, b6980 <_GLOBAL__sub_I_SystemMode+0xbc>
   b6972:	484b      	ldr	r0, [pc, #300]	; (b6aa0 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b6974:	2101      	movs	r1, #1
   b6976:	f006 fe63 	bl	bd640 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b697a:	4620      	mov	r0, r4
   b697c:	f7fd fba3 	bl	b40c6 <__cxa_guard_release>
  explicit SdFat(SPIClass* spiPort) {
   b6980:	4b48      	ldr	r3, [pc, #288]	; (b6aa4 <_GLOBAL__sub_I_SystemMode+0x1e0>)
   b6982:	2264      	movs	r2, #100	; 0x64
   b6984:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
  {
   b6988:	4a47      	ldr	r2, [pc, #284]	; (b6aa8 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   b698a:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   b698e:	2201      	movs	r2, #1
   b6990:	2400      	movs	r4, #0
   b6992:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b6996:	4a42      	ldr	r2, [pc, #264]	; (b6aa0 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b6998:	605c      	str	r4, [r3, #4]
   b699a:	f8c3 443c 	str.w	r4, [r3, #1084]	; 0x43c
   b699e:	f8c3 4468 	str.w	r4, [r3, #1128]	; 0x468
   b69a2:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   b69a6:	f8a3 447c 	strh.w	r4, [r3, #1148]	; 0x47c
   b69aa:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
    Print() : write_error(0) {}
   b69ae:	4b3f      	ldr	r3, [pc, #252]	; (b6aac <_GLOBAL__sub_I_SystemMode+0x1e8>)
  File() {}
   b69b0:	4a3f      	ldr	r2, [pc, #252]	; (b6ab0 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   b69b2:	605c      	str	r4, [r3, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b69b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b69b8:	601a      	str	r2, [r3, #0]
   b69ba:	6099      	str	r1, [r3, #8]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b69bc:	611c      	str	r4, [r3, #16]
   b69be:	4b3d      	ldr	r3, [pc, #244]	; (b6ab4 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   b69c0:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b69c4:	601a      	str	r2, [r3, #0]
   b69c6:	611c      	str	r4, [r3, #16]
   b69c8:	4b3b      	ldr	r3, [pc, #236]	; (b6ab8 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   b69ca:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b69ce:	601a      	str	r2, [r3, #0]
   b69d0:	611c      	str	r4, [r3, #16]
   b69d2:	4b3a      	ldr	r3, [pc, #232]	; (b6abc <_GLOBAL__sub_I_SystemMode+0x1f8>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b69d4:	4a3a      	ldr	r2, [pc, #232]	; (b6ac0 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   b69d6:	609c      	str	r4, [r3, #8]
   b69d8:	e9c3 4400 	strd	r4, r4, [r3]
   b69dc:	4b39      	ldr	r3, [pc, #228]	; (b6ac4 <_GLOBAL__sub_I_SystemMode+0x200>)
   b69de:	e9c3 4400 	strd	r4, r4, [r3]
   b69e2:	609c      	str	r4, [r3, #8]
   b69e4:	4b38      	ldr	r3, [pc, #224]	; (b6ac8 <_GLOBAL__sub_I_SystemMode+0x204>)
   b69e6:	e9c3 4400 	strd	r4, r4, [r3]
   b69ea:	609c      	str	r4, [r3, #8]
   b69ec:	4b37      	ldr	r3, [pc, #220]	; (b6acc <_GLOBAL__sub_I_SystemMode+0x208>)
   b69ee:	e9c3 4400 	strd	r4, r4, [r3]
   b69f2:	609c      	str	r4, [r3, #8]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b69f4:	4b36      	ldr	r3, [pc, #216]	; (b6ad0 <_GLOBAL__sub_I_SystemMode+0x20c>)
   b69f6:	9306      	str	r3, [sp, #24]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b69f8:	ad06      	add	r5, sp, #24
   b69fa:	4b36      	ldr	r3, [pc, #216]	; (b6ad4 <_GLOBAL__sub_I_SystemMode+0x210>)
   b69fc:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6a00:	601a      	str	r2, [r3, #0]
   b6a02:	ae04      	add	r6, sp, #16
      __a = _GLIBCXX_MOVE(__b);
   b6a04:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6a08:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6a0c:	e892 0003 	ldmia.w	r2, {r0, r1}
   b6a10:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6a14:	e896 0003 	ldmia.w	r6, {r0, r1}
   b6a18:	e882 0003 	stmia.w	r2, {r0, r1}
   b6a1c:	4a2e      	ldr	r2, [pc, #184]	; (b6ad8 <_GLOBAL__sub_I_SystemMode+0x214>)
   b6a1e:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6a20:	699a      	ldr	r2, [r3, #24]
   b6a22:	9209      	str	r2, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
   b6a24:	4a2d      	ldr	r2, [pc, #180]	; (b6adc <_GLOBAL__sub_I_SystemMode+0x218>)
   b6a26:	711c      	strb	r4, [r3, #4]
   b6a28:	609c      	str	r4, [r3, #8]
   b6a2a:	619a      	str	r2, [r3, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b6a2c:	f241 3188 	movw	r1, #5000	; 0x1388
   b6a30:	4a2b      	ldr	r2, [pc, #172]	; (b6ae0 <_GLOBAL__sub_I_SystemMode+0x21c>)
      __a = _GLIBCXX_MOVE(__b);
   b6a32:	9408      	str	r4, [sp, #32]
   b6a34:	f103 0008 	add.w	r0, r3, #8
   b6a38:	e9cd 4400 	strd	r4, r4, [sp]
   b6a3c:	f003 f9f0 	bl	b9e20 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b6a40:	4628      	mov	r0, r5
   b6a42:	f7fd fd63 	bl	b450c <_ZNSt14_Function_baseD1Ev>
   b6a46:	4b27      	ldr	r3, [pc, #156]	; (b6ae4 <_GLOBAL__sub_I_SystemMode+0x220>)
   b6a48:	e9c3 4400 	strd	r4, r4, [r3]
   b6a4c:	609c      	str	r4, [r3, #8]
   b6a4e:	b00a      	add	sp, #40	; 0x28
   b6a50:	bd70      	pop	{r4, r5, r6, pc}
   b6a52:	bf00      	nop
   b6a54:	2003dd2c 	.word	0x2003dd2c
   b6a58:	2003dedc 	.word	0x2003dedc
   b6a5c:	2003dcd8 	.word	0x2003dcd8
   b6a60:	000c16f3 	.word	0x000c16f3
   b6a64:	2003dcf0 	.word	0x2003dcf0
   b6a68:	000c1718 	.word	0x000c1718
   b6a6c:	2003dd04 	.word	0x2003dd04
   b6a70:	000c173d 	.word	0x000c173d
   b6a74:	2003dd18 	.word	0x2003dd18
   b6a78:	000c1762 	.word	0x000c1762
   b6a7c:	2003dd30 	.word	0x2003dd30
   b6a80:	2003decc 	.word	0x2003decc
   b6a84:	2003dc88 	.word	0x2003dc88
   b6a88:	2003dec4 	.word	0x2003dec4
   b6a8c:	2003debc 	.word	0x2003debc
   b6a90:	2003deb4 	.word	0x2003deb4
   b6a94:	00061a80 	.word	0x00061a80
   b6a98:	000186a0 	.word	0x000186a0
   b6a9c:	2003de5c 	.word	0x2003de5c
   b6aa0:	2003dc8c 	.word	0x2003dc8c
   b6aa4:	2003e1ac 	.word	0x2003e1ac
   b6aa8:	000c184c 	.word	0x000c184c
   b6aac:	2003de08 	.word	0x2003de08
   b6ab0:	000c1874 	.word	0x000c1874
   b6ab4:	2003ddd0 	.word	0x2003ddd0
   b6ab8:	2003dd9c 	.word	0x2003dd9c
   b6abc:	2003dce4 	.word	0x2003dce4
   b6ac0:	000c1860 	.word	0x000c1860
   b6ac4:	2003dcb8 	.word	0x2003dcb8
   b6ac8:	2003dc98 	.word	0x2003dc98
   b6acc:	2003dcc4 	.word	0x2003dcc4
   b6ad0:	000b40e9 	.word	0x000b40e9
   b6ad4:	2003dd48 	.word	0x2003dd48
   b6ad8:	000b4261 	.word	0x000b4261
   b6adc:	000b4275 	.word	0x000b4275
   b6ae0:	000b4185 	.word	0x000b4185
   b6ae4:	2003dcac 	.word	0x2003dcac

000b6ae8 <_Z13printMenuItemhbbtt8WaterBot>:
void printMenuItem(uint8_t id, bool highlighted, bool selected, uint16_t x, uint16_t y, WaterBot wb){
   b6ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b6aec:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   b6af0:	4c64      	ldr	r4, [pc, #400]	; (b6c84 <_Z13printMenuItemhbbtt8WaterBot+0x19c>)
   b6af2:	460f      	mov	r7, r1
        oled.setCursor(x+1,y+1);
   b6af4:	3601      	adds	r6, #1
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b6af6:	b219      	sxth	r1, r3
        oled.setCursor(x+1,y+1);
   b6af8:	3301      	adds	r3, #1
void printMenuItem(uint8_t id, bool highlighted, bool selected, uint16_t x, uint16_t y, WaterBot wb){
   b6afa:	4690      	mov	r8, r2
   b6afc:	4605      	mov	r5, r0
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b6afe:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
        oled.setCursor(x+1,y+1);
   b6b02:	fa0f f983 	sxth.w	r9, r3
   b6b06:	b236      	sxth	r6, r6
   b6b08:	f04f 0a10 	mov.w	sl, #16
    if(highlighted){
   b6b0c:	2f00      	cmp	r7, #0
   b6b0e:	d06f      	beq.n	b6bf0 <_Z13printMenuItemhbbtt8WaterBot+0x108>
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b6b10:	2701      	movs	r7, #1
   b6b12:	2358      	movs	r3, #88	; 0x58
   b6b14:	4620      	mov	r0, r4
   b6b16:	e9cd a700 	strd	sl, r7, [sp]
   b6b1a:	9203      	str	r2, [sp, #12]
   b6b1c:	f002 f8f7 	bl	b8d0e <_ZN12Adafruit_GFX8fillRectEsssst>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6b20:	f8a4 9010 	strh.w	r9, [r4, #16]
        oled.setTextSize(2);
   b6b24:	2102      	movs	r1, #2
   b6b26:	4620      	mov	r0, r4
   b6b28:	8266      	strh	r6, [r4, #18]
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6b2a:	f04f 0900 	mov.w	r9, #0
   b6b2e:	f002 fc0a 	bl	b9346 <_ZN12Adafruit_GFX11setTextSizeEh>
        oled.print(MenuItems.at(id).itemName);
   b6b32:	4629      	mov	r1, r5
   b6b34:	4854      	ldr	r0, [pc, #336]	; (b6c88 <_Z13printMenuItemhbbtt8WaterBot+0x1a0>)
   b6b36:	f8c4 9014 	str.w	r9, [r4, #20]
   b6b3a:	f7fe fa7d 	bl	b5038 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b6b3e:	f100 011e 	add.w	r1, r0, #30
   b6b42:	4620      	mov	r0, r4
   b6b44:	f006 fcf8 	bl	bd538 <_ZN5Print5printEPKc>
        if(selected){
   b6b48:	9a03      	ldr	r2, [sp, #12]
   b6b4a:	f1b8 0f00 	cmp.w	r8, #0
   b6b4e:	d03c      	beq.n	b6bca <_Z13printMenuItemhbbtt8WaterBot+0xe2>
            oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,1);
   b6b50:	237f      	movs	r3, #127	; 0x7f
   b6b52:	e9cd a700 	strd	sl, r7, [sp]
   b6b56:	2158      	movs	r1, #88	; 0x58
   b6b58:	4620      	mov	r0, r4
   b6b5a:	f002 f8d8 	bl	b8d0e <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6b5e:	2359      	movs	r3, #89	; 0x59
   b6b60:	8223      	strh	r3, [r4, #16]
   b6b62:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6b64:	f8c4 9014 	str.w	r9, [r4, #20]
            if(MenuItems.at(id).onOffSetting){
   b6b68:	4847      	ldr	r0, [pc, #284]	; (b6c88 <_Z13printMenuItemhbbtt8WaterBot+0x1a0>)
   b6b6a:	4629      	mov	r1, r5
   b6b6c:	f7fe fa64 	bl	b5038 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b6b70:	7d82      	ldrb	r2, [r0, #22]
   b6b72:	b1f2      	cbz	r2, b6bb2 <_Z13printMenuItemhbbtt8WaterBot+0xca>
                if(wb.*(MenuItems.at(id).MethodPointerBool))  oled.printf("On");
   b6b74:	6903      	ldr	r3, [r0, #16]
   b6b76:	aa0c      	add	r2, sp, #48	; 0x30
   b6b78:	4413      	add	r3, r2
   b6b7a:	791b      	ldrb	r3, [r3, #4]
   b6b7c:	b1bb      	cbz	r3, b6bae <_Z13printMenuItemhbbtt8WaterBot+0xc6>
   b6b7e:	4943      	ldr	r1, [pc, #268]	; (b6c8c <_Z13printMenuItemhbbtt8WaterBot+0x1a4>)
                else oled.printf("Off");
   b6b80:	4840      	ldr	r0, [pc, #256]	; (b6c84 <_Z13printMenuItemhbbtt8WaterBot+0x19c>)
                oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b6b82:	f7fd fb79 	bl	b4278 <_ZN5Print6printfEPKcz>
        Serial.printlnf("Printed Highlighted Menu item with name: %s",MenuItems.at(id).itemName);
   b6b86:	f007 f8f7 	bl	bdd78 <_Z16_fetch_usbserialv>
   b6b8a:	4629      	mov	r1, r5
   b6b8c:	4604      	mov	r4, r0
   b6b8e:	483e      	ldr	r0, [pc, #248]	; (b6c88 <_Z13printMenuItemhbbtt8WaterBot+0x1a0>)
   b6b90:	f7fe fa52 	bl	b5038 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b6b94:	493e      	ldr	r1, [pc, #248]	; (b6c90 <_Z13printMenuItemhbbtt8WaterBot+0x1a8>)
   b6b96:	f100 021e 	add.w	r2, r0, #30
   b6b9a:	4620      	mov	r0, r4
   b6b9c:	f7fd fba4 	bl	b42e8 <_ZN5Print8printlnfEPKcz>
    MenuItems.at(id);
   b6ba0:	4629      	mov	r1, r5
   b6ba2:	4839      	ldr	r0, [pc, #228]	; (b6c88 <_Z13printMenuItemhbbtt8WaterBot+0x1a0>)
   b6ba4:	f7fe fa48 	bl	b5038 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
}
   b6ba8:	b004      	add	sp, #16
   b6baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                else oled.printf("Off");
   b6bae:	4939      	ldr	r1, [pc, #228]	; (b6c94 <_Z13printMenuItemhbbtt8WaterBot+0x1ac>)
   b6bb0:	e7e6      	b.n	b6b80 <_Z13printMenuItemhbbtt8WaterBot+0x98>
                oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b6bb2:	68c2      	ldr	r2, [r0, #12]
            else if(MenuItems.at(id).customLabel){
   b6bb4:	7dc3      	ldrb	r3, [r0, #23]
                oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b6bb6:	a90c      	add	r1, sp, #48	; 0x30
   b6bb8:	440a      	add	r2, r1
   b6bba:	8892      	ldrh	r2, [r2, #4]
            else if(MenuItems.at(id).customLabel){
   b6bbc:	b19b      	cbz	r3, b6be6 <_Z13printMenuItemhbbtt8WaterBot+0xfe>
                oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b6bbe:	4611      	mov	r1, r2
   b6bc0:	f7fe faaa 	bl	b5118 <_ZNSt6vectorI6StringSaIS0_EE2atEj>
   b6bc4:	6801      	ldr	r1, [r0, #0]
   b6bc6:	4620      	mov	r0, r4
   b6bc8:	e7db      	b.n	b6b82 <_Z13printMenuItemhbbtt8WaterBot+0x9a>
            oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,0);
   b6bca:	237f      	movs	r3, #127	; 0x7f
   b6bcc:	e9cd a800 	strd	sl, r8, [sp]
   b6bd0:	2158      	movs	r1, #88	; 0x58
   b6bd2:	4620      	mov	r0, r4
   b6bd4:	f002 f89b 	bl	b8d0e <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6bd8:	2359      	movs	r3, #89	; 0x59
   b6bda:	8223      	strh	r3, [r4, #16]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6bdc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6be0:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6be2:	6163      	str	r3, [r4, #20]
            if(MenuItems.at(id).onOffSetting){
   b6be4:	e7c0      	b.n	b6b68 <_Z13printMenuItemhbbtt8WaterBot+0x80>
            else oled.printf("%d",wb.*(MenuItems.at(id).MethodPointer));
   b6be6:	492c      	ldr	r1, [pc, #176]	; (b6c98 <_Z13printMenuItemhbbtt8WaterBot+0x1b0>)
   b6be8:	4620      	mov	r0, r4
   b6bea:	f7fd fb45 	bl	b4278 <_ZN5Print6printfEPKcz>
   b6bee:	e7ca      	b.n	b6b86 <_Z13printMenuItemhbbtt8WaterBot+0x9e>
        oled.fillRect(x,y,OLED_MAX_X - 40,16,0);
   b6bf0:	2358      	movs	r3, #88	; 0x58
   b6bf2:	4620      	mov	r0, r4
   b6bf4:	e9cd a700 	strd	sl, r7, [sp]
   b6bf8:	9203      	str	r2, [sp, #12]
   b6bfa:	f04f 1801 	mov.w	r8, #65537	; 0x10001
   b6bfe:	f002 f886 	bl	b8d0e <_ZN12Adafruit_GFX8fillRectEsssst>
        oled.setTextSize(2);
   b6c02:	2102      	movs	r1, #2
   b6c04:	4620      	mov	r0, r4
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6c06:	f8a4 9010 	strh.w	r9, [r4, #16]
   b6c0a:	8266      	strh	r6, [r4, #18]
   b6c0c:	f002 fb9b 	bl	b9346 <_ZN12Adafruit_GFX11setTextSizeEh>
        oled.print(MenuItems.at(id).itemName);
   b6c10:	4629      	mov	r1, r5
   b6c12:	481d      	ldr	r0, [pc, #116]	; (b6c88 <_Z13printMenuItemhbbtt8WaterBot+0x1a0>)
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6c14:	f8c4 8014 	str.w	r8, [r4, #20]
   b6c18:	f7fe fa0e 	bl	b5038 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b6c1c:	f100 011e 	add.w	r1, r0, #30
   b6c20:	4620      	mov	r0, r4
   b6c22:	f006 fc89 	bl	bd538 <_ZN5Print5printEPKc>
        oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,0);
   b6c26:	9a03      	ldr	r2, [sp, #12]
   b6c28:	237f      	movs	r3, #127	; 0x7f
   b6c2a:	2158      	movs	r1, #88	; 0x58
   b6c2c:	4620      	mov	r0, r4
   b6c2e:	e9cd a700 	strd	sl, r7, [sp]
   b6c32:	f002 f86c 	bl	b8d0e <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6c36:	2359      	movs	r3, #89	; 0x59
        if(MenuItems.at(id).onOffSetting){
   b6c38:	4813      	ldr	r0, [pc, #76]	; (b6c88 <_Z13printMenuItemhbbtt8WaterBot+0x1a0>)
   b6c3a:	8223      	strh	r3, [r4, #16]
   b6c3c:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6c3e:	f8c4 8014 	str.w	r8, [r4, #20]
   b6c42:	4629      	mov	r1, r5
   b6c44:	f7fe f9f8 	bl	b5038 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b6c48:	7d82      	ldrb	r2, [r0, #22]
   b6c4a:	b15a      	cbz	r2, b6c64 <_Z13printMenuItemhbbtt8WaterBot+0x17c>
            if(wb.*(MenuItems.at(id).MethodPointerBool))  oled.printf("On");
   b6c4c:	6903      	ldr	r3, [r0, #16]
   b6c4e:	aa0c      	add	r2, sp, #48	; 0x30
   b6c50:	4413      	add	r3, r2
   b6c52:	791b      	ldrb	r3, [r3, #4]
   b6c54:	b123      	cbz	r3, b6c60 <_Z13printMenuItemhbbtt8WaterBot+0x178>
   b6c56:	490d      	ldr	r1, [pc, #52]	; (b6c8c <_Z13printMenuItemhbbtt8WaterBot+0x1a4>)
            else oled.printf("Off");
   b6c58:	4620      	mov	r0, r4
   b6c5a:	f7fd fb0d 	bl	b4278 <_ZN5Print6printfEPKcz>
   b6c5e:	e79f      	b.n	b6ba0 <_Z13printMenuItemhbbtt8WaterBot+0xb8>
   b6c60:	490c      	ldr	r1, [pc, #48]	; (b6c94 <_Z13printMenuItemhbbtt8WaterBot+0x1ac>)
   b6c62:	e7f9      	b.n	b6c58 <_Z13printMenuItemhbbtt8WaterBot+0x170>
            oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b6c64:	68c2      	ldr	r2, [r0, #12]
        else if(MenuItems.at(id).customLabel){
   b6c66:	7dc3      	ldrb	r3, [r0, #23]
            oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b6c68:	a90c      	add	r1, sp, #48	; 0x30
   b6c6a:	440a      	add	r2, r1
   b6c6c:	8892      	ldrh	r2, [r2, #4]
        else if(MenuItems.at(id).customLabel){
   b6c6e:	b123      	cbz	r3, b6c7a <_Z13printMenuItemhbbtt8WaterBot+0x192>
            oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b6c70:	4611      	mov	r1, r2
   b6c72:	f7fe fa51 	bl	b5118 <_ZNSt6vectorI6StringSaIS0_EE2atEj>
   b6c76:	6801      	ldr	r1, [r0, #0]
   b6c78:	e7ee      	b.n	b6c58 <_Z13printMenuItemhbbtt8WaterBot+0x170>
        else oled.printf("%d",wb.*(MenuItems.at(id).MethodPointer));
   b6c7a:	4907      	ldr	r1, [pc, #28]	; (b6c98 <_Z13printMenuItemhbbtt8WaterBot+0x1b0>)
   b6c7c:	4620      	mov	r0, r4
   b6c7e:	f7fd fafb 	bl	b4278 <_ZN5Print6printfEPKcz>
   b6c82:	e78d      	b.n	b6ba0 <_Z13printMenuItemhbbtt8WaterBot+0xb8>
   b6c84:	2003de5c 	.word	0x2003de5c
   b6c88:	2003dcac 	.word	0x2003dcac
   b6c8c:	000c1787 	.word	0x000c1787
   b6c90:	000c178e 	.word	0x000c178e
   b6c94:	000c178a 	.word	0x000c178a
   b6c98:	000c11de 	.word	0x000c11de

000b6c9c <setup>:
void setup() {
   b6c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pinMode(E_DPAD,INPUT_PULLDOWN);
   b6ca0:	2103      	movs	r1, #3
void setup() {
   b6ca2:	b0a0      	sub	sp, #128	; 0x80
    pinMode(E_DPAD,INPUT_PULLDOWN);
   b6ca4:	201c      	movs	r0, #28
   b6ca6:	f007 f967 	bl	bdf78 <pinMode>
    pinMode(U_DPAD,INPUT_PULLDOWN);
   b6caa:	2103      	movs	r1, #3
   b6cac:	200e      	movs	r0, #14
   b6cae:	f007 f963 	bl	bdf78 <pinMode>
    pinMode(D_DPAD,INPUT_PULLDOWN);
   b6cb2:	2103      	movs	r1, #3
   b6cb4:	2007      	movs	r0, #7
   b6cb6:	f007 f95f 	bl	bdf78 <pinMode>
    pinMode(L_DPAD,INPUT_PULLDOWN);
   b6cba:	2103      	movs	r1, #3
   b6cbc:	200f      	movs	r0, #15
   b6cbe:	f007 f95b 	bl	bdf78 <pinMode>
    pinMode(R_DPAD,INPUT_PULLDOWN);
   b6cc2:	2103      	movs	r1, #3
   b6cc4:	2012      	movs	r0, #18
   b6cc6:	f007 f957 	bl	bdf78 <pinMode>
    pinMode(JOY_BTN,INPUT_PULLDOWN);
   b6cca:	2103      	movs	r1, #3
   b6ccc:	201d      	movs	r0, #29
    attachInterrupt(E_DPAD,entHandler,RISING);
   b6cce:	2400      	movs	r4, #0
    pinMode(JOY_BTN,INPUT_PULLDOWN);
   b6cd0:	f007 f952 	bl	bdf78 <pinMode>
    pinMode(STOP_BTN, INPUT_PULLDOWN);
   b6cd4:	2103      	movs	r1, #3
   b6cd6:	2014      	movs	r0, #20
   b6cd8:	f007 f94e 	bl	bdf78 <pinMode>
    attachInterrupt(E_DPAD,entHandler,RISING);
   b6cdc:	49a0      	ldr	r1, [pc, #640]	; (b6f60 <setup+0x2c4>)
   b6cde:	9400      	str	r4, [sp, #0]
   b6ce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6ce4:	2201      	movs	r2, #1
   b6ce6:	201c      	movs	r0, #28
   b6ce8:	f006 fab4 	bl	bd254 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(U_DPAD,uHandler,RISING);
   b6cec:	499d      	ldr	r1, [pc, #628]	; (b6f64 <setup+0x2c8>)
   b6cee:	9400      	str	r4, [sp, #0]
   b6cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6cf4:	2201      	movs	r2, #1
   b6cf6:	200e      	movs	r0, #14
   b6cf8:	f006 faac 	bl	bd254 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(D_DPAD,dHandler,RISING);
   b6cfc:	499a      	ldr	r1, [pc, #616]	; (b6f68 <setup+0x2cc>)
   b6cfe:	9400      	str	r4, [sp, #0]
   b6d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6d04:	2201      	movs	r2, #1
   b6d06:	2007      	movs	r0, #7
   b6d08:	f006 faa4 	bl	bd254 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(L_DPAD,lHandler,RISING);
   b6d0c:	4997      	ldr	r1, [pc, #604]	; (b6f6c <setup+0x2d0>)
   b6d0e:	9400      	str	r4, [sp, #0]
   b6d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6d14:	2201      	movs	r2, #1
   b6d16:	200f      	movs	r0, #15
   b6d18:	f006 fa9c 	bl	bd254 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(R_DPAD,rHandler,RISING);
   b6d1c:	4994      	ldr	r1, [pc, #592]	; (b6f70 <setup+0x2d4>)
   b6d1e:	9400      	str	r4, [sp, #0]
   b6d20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6d24:	2201      	movs	r2, #1
   b6d26:	2012      	movs	r0, #18
   b6d28:	f006 fa94 	bl	bd254 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(JOY_BTN,jHandler,RISING);
   b6d2c:	4991      	ldr	r1, [pc, #580]	; (b6f74 <setup+0x2d8>)
   b6d2e:	9400      	str	r4, [sp, #0]
   b6d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6d34:	2201      	movs	r2, #1
   b6d36:	201d      	movs	r0, #29
   b6d38:	f006 fa8c 	bl	bd254 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(STOP_BTN,sHandler,RISING);
   b6d3c:	498e      	ldr	r1, [pc, #568]	; (b6f78 <setup+0x2dc>)
   b6d3e:	9400      	str	r4, [sp, #0]
   b6d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6d44:	2201      	movs	r2, #1
   b6d46:	2014      	movs	r0, #20
   b6d48:	f006 fa84 	bl	bd254 <_Z15attachInterrupttPFvvE13InterruptModeah>
    delay(5);
   b6d4c:	2005      	movs	r0, #5
   b6d4e:	f003 fbb3 	bl	ba4b8 <delay>
    if(digitalRead(U_DPAD) == LOW || digitalRead(D_DPAD) == LOW) Particle.connect();
   b6d52:	200e      	movs	r0, #14
   b6d54:	f007 f93a 	bl	bdfcc <digitalRead>
   b6d58:	2800      	cmp	r0, #0
   b6d5a:	f040 80fa 	bne.w	b6f52 <setup+0x2b6>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b6d5e:	f003 fab3 	bl	ba2c8 <spark_cloud_flag_connect>
   b6d62:	f003 f8b5 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b6d66:	4b85      	ldr	r3, [pc, #532]	; (b6f7c <setup+0x2e0>)
    logMessages = true;
   b6d68:	4f85      	ldr	r7, [pc, #532]	; (b6f80 <setup+0x2e4>)
    debounceTime = millis();
   b6d6a:	6018      	str	r0, [r3, #0]
   b6d6c:	f003 f8b0 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
    controlUpdateTime = millis();
   b6d70:	4b84      	ldr	r3, [pc, #528]	; (b6f84 <setup+0x2e8>)
   b6d72:	6018      	str	r0, [r3, #0]
   b6d74:	f003 f8ac 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
    rcTime = millis();
   b6d78:	4b83      	ldr	r3, [pc, #524]	; (b6f88 <setup+0x2ec>)
   b6d7a:	6018      	str	r0, [r3, #0]
    controlUpdateID = -1;
   b6d7c:	4b83      	ldr	r3, [pc, #524]	; (b6f8c <setup+0x2f0>)
   b6d7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6d82:	601a      	str	r2, [r3, #0]
    Serial.begin(115200);
   b6d84:	f006 fff8 	bl	bdd78 <_Z16_fetch_usbserialv>
   b6d88:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b6d8c:	f006 ffe8 	bl	bdd60 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b6d90:	f007 f99e 	bl	be0d0 <_Z22__fetch_global_Serial1v>
   b6d94:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6d98:	f006 ff8c 	bl	bdcb4 <_ZN11USARTSerial5beginEm>
    setupXBee();
   b6d9c:	f7fd fe4a 	bl	b4a34 <_Z9setupXBeev>
	BLE.on();
   b6da0:	f004 f8a4 	bl	baeec <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6da4:	f004 f8ec 	bl	baf80 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setScanTimeout(50);  //100ms scan
   b6da8:	f004 f8a0 	bl	baeec <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6dac:	2132      	movs	r1, #50	; 0x32
   b6dae:	f004 f931 	bl	bb014 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>
    BLE.setTxPower(8);
   b6db2:	f004 f89b 	bl	baeec <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6db6:	2108      	movs	r1, #8
   b6db8:	f004 f8e9 	bl	baf8e <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   b6dbc:	4a74      	ldr	r2, [pc, #464]	; (b6f90 <setup+0x2f4>)
   b6dbe:	4975      	ldr	r1, [pc, #468]	; (b6f94 <setup+0x2f8>)
   b6dc0:	4610      	mov	r0, r2
   b6dc2:	f005 f925 	bl	bc010 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    peerOffloadCharacteristic.onDataReceived(offloadDataReceived, &peerOffloadCharacteristic);
   b6dc6:	4a74      	ldr	r2, [pc, #464]	; (b6f98 <setup+0x2fc>)
   b6dc8:	4974      	ldr	r1, [pc, #464]	; (b6f9c <setup+0x300>)
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b6dca:	2400      	movs	r4, #0
   b6dcc:	4610      	mov	r0, r2
   b6dce:	f005 f91f 	bl	bc010 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
   b6dd2:	2301      	movs	r3, #1
   b6dd4:	4622      	mov	r2, r4
   b6dd6:	e9cd 4400 	strd	r4, r4, [sp]
   b6dda:	4971      	ldr	r1, [pc, #452]	; (b6fa0 <setup+0x304>)
   b6ddc:	4871      	ldr	r0, [pc, #452]	; (b6fa4 <setup+0x308>)
   b6dde:	f003 fa8b 	bl	ba2f8 <spark_subscribe>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b6de2:	4a71      	ldr	r2, [pc, #452]	; (b6fa8 <setup+0x30c>)
   b6de4:	4971      	ldr	r1, [pc, #452]	; (b6fac <setup+0x310>)
   b6de6:	4872      	ldr	r0, [pc, #456]	; (b6fb0 <setup+0x314>)
   b6de8:	f005 ff3f 	bl	bcc6a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    offloadingMode = false;
   b6dec:	4b71      	ldr	r3, [pc, #452]	; (b6fb4 <setup+0x318>)
   b6dee:	701c      	strb	r4, [r3, #0]
    offloadingDone = false;
   b6df0:	4b71      	ldr	r3, [pc, #452]	; (b6fb8 <setup+0x31c>)
   b6df2:	701c      	strb	r4, [r3, #0]
    postStatus = false;
   b6df4:	4b71      	ldr	r3, [pc, #452]	; (b6fbc <setup+0x320>)
   b6df6:	701c      	strb	r4, [r3, #0]
    statusTimeout = false;
   b6df8:	4b71      	ldr	r3, [pc, #452]	; (b6fc0 <setup+0x324>)
   b6dfa:	701c      	strb	r4, [r3, #0]
    stopActive = false;
   b6dfc:	4b71      	ldr	r3, [pc, #452]	; (b6fc4 <setup+0x328>)
   b6dfe:	701c      	strb	r4, [r3, #0]
    LTEStopSent = false;
   b6e00:	4b71      	ldr	r3, [pc, #452]	; (b6fc8 <setup+0x32c>)
   b6e02:	701c      	strb	r4, [r3, #0]
    stopTime = 0;
   b6e04:	4b71      	ldr	r3, [pc, #452]	; (b6fcc <setup+0x330>)
    logMessages = true;
   b6e06:	2601      	movs	r6, #1
    stopTime = 0;
   b6e08:	601c      	str	r4, [r3, #0]
    logMessages = true;
   b6e0a:	703e      	strb	r6, [r7, #0]
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b6e0c:	f006 fede 	bl	bdbcc <_ZN9TimeClass5monthEv>
   b6e10:	9007      	str	r0, [sp, #28]
   b6e12:	f006 fecf 	bl	bdbb4 <_ZN9TimeClass3dayEv>
   b6e16:	4605      	mov	r5, r0
   b6e18:	f006 fee0 	bl	bdbdc <_ZN9TimeClass4yearEv>
   b6e1c:	4680      	mov	r8, r0
   b6e1e:	f006 fea5 	bl	bdb6c <_ZN9TimeClass4hourEv>
   b6e22:	4681      	mov	r9, r0
   b6e24:	f006 feae 	bl	bdb84 <_ZN9TimeClass6minuteEv>
   b6e28:	4682      	mov	sl, r0
   b6e2a:	f006 feb7 	bl	bdb9c <_ZN9TimeClass6secondEv>
   b6e2e:	9b07      	ldr	r3, [sp, #28]
   b6e30:	4a67      	ldr	r2, [pc, #412]	; (b6fd0 <setup+0x334>)
   b6e32:	9500      	str	r5, [sp, #0]
   b6e34:	e9cd a003 	strd	sl, r0, [sp, #12]
   b6e38:	2110      	movs	r1, #16
   b6e3a:	e9cd 8901 	strd	r8, r9, [sp, #4]
   b6e3e:	a809      	add	r0, sp, #36	; 0x24
   b6e40:	f003 fafa 	bl	ba438 <snprintf>
    strcpy(filenameMessages,DEF_FILENAME);
   b6e44:	4963      	ldr	r1, [pc, #396]	; (b6fd4 <setup+0x338>)
   b6e46:	4864      	ldr	r0, [pc, #400]	; (b6fd8 <setup+0x33c>)
    oled.begin(i2c_Address, true); // Address 0x3C default
   b6e48:	4d64      	ldr	r5, [pc, #400]	; (b6fdc <setup+0x340>)
    strcpy(filenameMessages,DEF_FILENAME);
   b6e4a:	f008 f8ea 	bl	bf022 <strcpy>
    strcat(filenameMessages,timestamp);
   b6e4e:	a909      	add	r1, sp, #36	; 0x24
   b6e50:	4861      	ldr	r0, [pc, #388]	; (b6fd8 <setup+0x33c>)
   b6e52:	f008 f8cd 	bl	beff0 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b6e56:	4962      	ldr	r1, [pc, #392]	; (b6fe0 <setup+0x344>)
   b6e58:	485f      	ldr	r0, [pc, #380]	; (b6fd8 <setup+0x33c>)
   b6e5a:	f008 f8c9 	bl	beff0 <strcat>
    createMenu();
   b6e5e:	f7ff fc37 	bl	b66d0 <_Z10createMenuv>
    delay(250);
   b6e62:	20fa      	movs	r0, #250	; 0xfa
   b6e64:	f003 fb28 	bl	ba4b8 <delay>
    oled.begin(i2c_Address, true); // Address 0x3C default
   b6e68:	4632      	mov	r2, r6
   b6e6a:	213c      	movs	r1, #60	; 0x3c
   b6e6c:	4628      	mov	r0, r5
   b6e6e:	f002 fddd 	bl	b9a2c <_ZN15Adafruit_SH11075beginEhb>
    oled.clearDisplay();
   b6e72:	4628      	mov	r0, r5
   b6e74:	f002 fd20 	bl	b98b8 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
    oled.display();
   b6e78:	4628      	mov	r0, r5
   b6e7a:	f002 fe49 	bl	b9b10 <_ZN15Adafruit_SH110X7displayEv>
    oled.setRotation(1);
   b6e7e:	4631      	mov	r1, r6
   b6e80:	4628      	mov	r0, r5
   b6e82:	f001 fff8 	bl	b8e76 <_ZN12Adafruit_GFX11setRotationEh>
    oled.setTextSize(2);
   b6e86:	2102      	movs	r1, #2
   b6e88:	4628      	mov	r0, r5
   b6e8a:	f002 fa5c 	bl	b9346 <_ZN12Adafruit_GFX11setTextSizeEh>
   b6e8e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    oled.print(" Starting ");
   b6e92:	4954      	ldr	r1, [pc, #336]	; (b6fe4 <setup+0x348>)
   b6e94:	616b      	str	r3, [r5, #20]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6e96:	612c      	str	r4, [r5, #16]
   b6e98:	4628      	mov	r0, r5
   b6e9a:	f006 fb4d 	bl	bd538 <_ZN5Print5printEPKc>
    oled.display();
   b6e9e:	4628      	mov	r0, r5
   b6ea0:	f002 fe36 	bl	b9b10 <_ZN15Adafruit_SH110X7displayEv>
    delay(1000);
   b6ea4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b6ea8:	f003 fb06 	bl	ba4b8 <delay>
      dataMode_{dataMode}
   b6eac:	4b4e      	ldr	r3, [pc, #312]	; (b6fe8 <setup+0x34c>)
   b6eae:	930d      	str	r3, [sp, #52]	; 0x34
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {
   b6eb0:	484e      	ldr	r0, [pc, #312]	; (b6fec <setup+0x350>)
   b6eb2:	4b4f      	ldr	r3, [pc, #316]	; (b6ff0 <setup+0x354>)
   b6eb4:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
   b6eb8:	aa0d      	add	r2, sp, #52	; 0x34
   b6eba:	2108      	movs	r1, #8
   b6ebc:	930f      	str	r3, [sp, #60]	; 0x3c
   b6ebe:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
   b6ec2:	f7fd fc27 	bl	b4714 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b6ec6:	4604      	mov	r4, r0
   b6ec8:	b928      	cbnz	r0, b6ed6 <setup+0x23a>
        Serial.println("Error: could not connect to SD card!");
   b6eca:	f006 ff55 	bl	bdd78 <_Z16_fetch_usbserialv>
   b6ece:	4949      	ldr	r1, [pc, #292]	; (b6ff4 <setup+0x358>)
   b6ed0:	f006 fb45 	bl	bd55e <_ZN5Print7printlnEPKc>
        logMessages = false;
   b6ed4:	703c      	strb	r4, [r7, #0]
class MenuPopUp{
   b6ed6:	2400      	movs	r4, #0
    sprintf(m.primaryLine,"Hello!\0");
   b6ed8:	4947      	ldr	r1, [pc, #284]	; (b6ff8 <setup+0x35c>)
class MenuPopUp{
   b6eda:	f88d 407a 	strb.w	r4, [sp, #122]	; 0x7a
    sprintf(m.primaryLine,"Hello!\0");
   b6ede:	a80d      	add	r0, sp, #52	; 0x34
class MenuPopUp{
   b6ee0:	f88d 407b 	strb.w	r4, [sp, #123]	; 0x7b
   b6ee4:	f88d 407c 	strb.w	r4, [sp, #124]	; 0x7c
    sprintf(m.primaryLine,"Hello!\0");
   b6ee8:	f008 f89b 	bl	bf022 <strcpy>
    sprintf(m.secondaryLine,"Scanning for Bots\0", 1);
   b6eec:	4943      	ldr	r1, [pc, #268]	; (b6ffc <setup+0x360>)
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b6eee:	4d44      	ldr	r5, [pc, #272]	; (b7000 <setup+0x364>)
   b6ef0:	2201      	movs	r2, #1
   b6ef2:	f10d 003e 	add.w	r0, sp, #62	; 0x3e
   b6ef6:	f003 fa8f 	bl	ba418 <sprintf>
    sprintf(m.tertiaryLine, "OK when bots ready\0",15);
   b6efa:	4942      	ldr	r1, [pc, #264]	; (b7004 <setup+0x368>)
   b6efc:	220f      	movs	r2, #15
   b6efe:	a817      	add	r0, sp, #92	; 0x5c
   b6f00:	f003 fa8a 	bl	ba418 <sprintf>
    m.primaryStart = 32;
   b6f04:	2320      	movs	r3, #32
   b6f06:	f88d 307a 	strb.w	r3, [sp, #122]	; 0x7a
    m.secondaryStart = 12;
   b6f0a:	230c      	movs	r3, #12
    PopUps.push_back(m);
   b6f0c:	483e      	ldr	r0, [pc, #248]	; (b7008 <setup+0x36c>)
    m.secondaryStart = 12;
   b6f0e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
    PopUps.push_back(m);
   b6f12:	a90d      	add	r1, sp, #52	; 0x34
    m.tertiaryStart = 10;
   b6f14:	230a      	movs	r3, #10
   b6f16:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    PopUps.push_back(m);
   b6f1a:	f7fe faa5 	bl	b5468 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>
   b6f1e:	68a8      	ldr	r0, [r5, #8]
   b6f20:	b130      	cbz	r0, b6f30 <setup+0x294>
   b6f22:	e9cd 4400 	strd	r4, r4, [sp]
   b6f26:	4623      	mov	r3, r4
   b6f28:	4622      	mov	r2, r4
   b6f2a:	2102      	movs	r1, #2
   b6f2c:	f002 ff90 	bl	b9e50 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b6f30:	68a8      	ldr	r0, [r5, #8]
   b6f32:	b140      	cbz	r0, b6f46 <setup+0x2aa>
   b6f34:	2300      	movs	r3, #0
   b6f36:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b6f3a:	e9cd 2300 	strd	r2, r3, [sp]
   b6f3e:	4619      	mov	r1, r3
   b6f40:	461a      	mov	r2, r3
   b6f42:	f002 ff85 	bl	b9e50 <os_timer_change>
    WaterBotSim(1);
   b6f46:	2001      	movs	r0, #1
   b6f48:	f7fe ffd8 	bl	b5efc <_Z11WaterBotSimh>
}
   b6f4c:	b020      	add	sp, #128	; 0x80
   b6f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(digitalRead(U_DPAD) == LOW || digitalRead(D_DPAD) == LOW) Particle.connect();
   b6f52:	2007      	movs	r0, #7
   b6f54:	f007 f83a 	bl	bdfcc <digitalRead>
   b6f58:	2800      	cmp	r0, #0
   b6f5a:	f43f af00 	beq.w	b6d5e <setup+0xc2>
   b6f5e:	e700      	b.n	b6d62 <setup+0xc6>
   b6f60:	000b41f1 	.word	0x000b41f1
   b6f64:	000b5061 	.word	0x000b5061
   b6f68:	000b50bd 	.word	0x000b50bd
   b6f6c:	000b4305 	.word	0x000b4305
   b6f70:	000b440d 	.word	0x000b440d
   b6f74:	000b41c1 	.word	0x000b41c1
   b6f78:	000b5491 	.word	0x000b5491
   b6f7c:	2003dd74 	.word	0x2003dd74
   b6f80:	2003de04 	.word	0x2003de04
   b6f84:	2003dd6c 	.word	0x2003dd6c
   b6f88:	2003ded8 	.word	0x2003ded8
   b6f8c:	2003dd68 	.word	0x2003dd68
   b6f90:	2003decc 	.word	0x2003decc
   b6f94:	000b5d11 	.word	0x000b5d11
   b6f98:	2003debc 	.word	0x2003debc
   b6f9c:	000b45c1 	.word	0x000b45c1
   b6fa0:	000b5cc1 	.word	0x000b5cc1
   b6fa4:	000c17ba 	.word	0x000c17ba
   b6fa8:	000c17c2 	.word	0x000c17c2
   b6fac:	000b5e9d 	.word	0x000b5e9d
   b6fb0:	000bcc3f 	.word	0x000bcc3f
   b6fb4:	2003de5b 	.word	0x2003de5b
   b6fb8:	2003de5a 	.word	0x2003de5a
   b6fbc:	2003ded4 	.word	0x2003ded4
   b6fc0:	2003e631 	.word	0x2003e631
   b6fc4:	2003e632 	.word	0x2003e632
   b6fc8:	2003dca9 	.word	0x2003dca9
   b6fcc:	2003e634 	.word	0x2003e634
   b6fd0:	000c17d0 	.word	0x000c17d0
   b6fd4:	000c17e9 	.word	0x000c17e9
   b6fd8:	2003dd78 	.word	0x2003dd78
   b6fdc:	2003de5c 	.word	0x2003de5c
   b6fe0:	000c17ef 	.word	0x000c17ef
   b6fe4:	000c17f8 	.word	0x000c17f8
   b6fe8:	000c184c 	.word	0x000c184c
   b6fec:	2003e1ac 	.word	0x2003e1ac
   b6ff0:	007a1200 	.word	0x007a1200
   b6ff4:	000c1803 	.word	0x000c1803
   b6ff8:	000c1938 	.word	0x000c1938
   b6ffc:	000c1940 	.word	0x000c1940
   b7000:	2003dd48 	.word	0x2003dd48
   b7004:	000c1953 	.word	0x000c1953
   b7008:	2003dcc4 	.word	0x2003dcc4

000b700c <_Z10updateMenuv>:
void updateMenu(){
   b700c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(redrawMenu){
   b7010:	f8df a35c 	ldr.w	sl, [pc, #860]	; b7370 <_Z10updateMenuv+0x364>
   b7014:	f89a 3000 	ldrb.w	r3, [sl]
void updateMenu(){
   b7018:	b097      	sub	sp, #92	; 0x5c
    if(redrawMenu){
   b701a:	2b00      	cmp	r3, #0
   b701c:	d06d      	beq.n	b70fa <_Z10updateMenuv+0xee>
        oled.fillRect(0,0,OLED_MAX_X,OLED_MAX_Y,0);
   b701e:	4cca      	ldr	r4, [pc, #808]	; (b7348 <_Z10updateMenuv+0x33c>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7020:	4eca      	ldr	r6, [pc, #808]	; (b734c <_Z10updateMenuv+0x340>)
   b7022:	2500      	movs	r5, #0
   b7024:	2340      	movs	r3, #64	; 0x40
   b7026:	e9cd 3500 	strd	r3, r5, [sp]
   b702a:	462a      	mov	r2, r5
   b702c:	2380      	movs	r3, #128	; 0x80
   b702e:	4629      	mov	r1, r5
   b7030:	4620      	mov	r0, r4
   b7032:	f001 fe6c 	bl	b8d0e <_ZN12Adafruit_GFX8fillRectEsssst>
        if(PopUps.size() != 0){  //If there is a queue of pop-ups to be displayed
   b7036:	e9d6 3200 	ldrd	r3, r2, [r6]
   b703a:	429a      	cmp	r2, r3
   b703c:	d060      	beq.n	b7100 <_Z10updateMenuv+0xf4>
            oled.drawRect(1,1,126,62,1);
   b703e:	2701      	movs	r7, #1
   b7040:	233e      	movs	r3, #62	; 0x3e
   b7042:	e9cd 3700 	strd	r3, r7, [sp]
   b7046:	463a      	mov	r2, r7
   b7048:	237e      	movs	r3, #126	; 0x7e
   b704a:	4639      	mov	r1, r7
   b704c:	4620      	mov	r0, r4
   b704e:	f001 fed1 	bl	b8df4 <_ZN12Adafruit_GFX8drawRectEsssst>
            oled.drawRect(2,2,124,60,1);
   b7052:	2202      	movs	r2, #2
   b7054:	233c      	movs	r3, #60	; 0x3c
   b7056:	4611      	mov	r1, r2
   b7058:	9300      	str	r3, [sp, #0]
   b705a:	4620      	mov	r0, r4
   b705c:	237c      	movs	r3, #124	; 0x7c
   b705e:	9701      	str	r7, [sp, #4]
   b7060:	f001 fec8 	bl	b8df4 <_ZN12Adafruit_GFX8drawRectEsssst>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b7064:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b7068:	6163      	str	r3, [r4, #20]
            oled.setCursor(PopUps.back().primaryStart,4);
   b706a:	6873      	ldr	r3, [r6, #4]
   b706c:	f813 3c03 	ldrb.w	r3, [r3, #-3]
   b7070:	8223      	strh	r3, [r4, #16]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b7072:	2304      	movs	r3, #4
   b7074:	8263      	strh	r3, [r4, #18]
            oled.setTextSize(2);
   b7076:	2102      	movs	r1, #2
   b7078:	4620      	mov	r0, r4
   b707a:	f002 f964 	bl	b9346 <_ZN12Adafruit_GFX11setTextSizeEh>
            oled.printf(PopUps.back().primaryLine);
   b707e:	6871      	ldr	r1, [r6, #4]
   b7080:	4620      	mov	r0, r4
   b7082:	3949      	subs	r1, #73	; 0x49
   b7084:	f7fd f8f8 	bl	b4278 <_ZN5Print6printfEPKcz>
            oled.setCursor(PopUps.back().secondaryStart,22);
   b7088:	6873      	ldr	r3, [r6, #4]
   b708a:	f813 3c02 	ldrb.w	r3, [r3, #-2]
   b708e:	8223      	strh	r3, [r4, #16]
   b7090:	2316      	movs	r3, #22
   b7092:	8263      	strh	r3, [r4, #18]
            oled.setTextSize(1);
   b7094:	4639      	mov	r1, r7
   b7096:	4620      	mov	r0, r4
   b7098:	f002 f955 	bl	b9346 <_ZN12Adafruit_GFX11setTextSizeEh>
            oled.printf(PopUps.back().secondaryLine);
   b709c:	6871      	ldr	r1, [r6, #4]
   b709e:	4620      	mov	r0, r4
   b70a0:	393f      	subs	r1, #63	; 0x3f
   b70a2:	f7fd f8e9 	bl	b4278 <_ZN5Print6printfEPKcz>
            oled.setCursor(PopUps.back().tertiaryStart,32);
   b70a6:	6873      	ldr	r3, [r6, #4]
   b70a8:	f04f 0820 	mov.w	r8, #32
   b70ac:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b70b0:	8223      	strh	r3, [r4, #16]
            oled.setTextSize(1);
   b70b2:	4639      	mov	r1, r7
   b70b4:	4620      	mov	r0, r4
   b70b6:	f8a4 8012 	strh.w	r8, [r4, #18]
   b70ba:	f002 f944 	bl	b9346 <_ZN12Adafruit_GFX11setTextSizeEh>
            oled.printf(PopUps.back().tertiaryLine);
   b70be:	6871      	ldr	r1, [r6, #4]
   b70c0:	4620      	mov	r0, r4
   b70c2:	3921      	subs	r1, #33	; 0x21
   b70c4:	f7fd f8d8 	bl	b4278 <_ZN5Print6printfEPKcz>
   b70c8:	4ba1      	ldr	r3, [pc, #644]	; (b7350 <_Z10updateMenuv+0x344>)
   b70ca:	6123      	str	r3, [r4, #16]
            oled.setTextSize(2);
   b70cc:	2102      	movs	r1, #2
   b70ce:	4620      	mov	r0, r4
   b70d0:	f002 f939 	bl	b9346 <_ZN12Adafruit_GFX11setTextSizeEh>
            oled.fillRect(45,44,32,16,1);
   b70d4:	2310      	movs	r3, #16
   b70d6:	222c      	movs	r2, #44	; 0x2c
   b70d8:	9300      	str	r3, [sp, #0]
   b70da:	212d      	movs	r1, #45	; 0x2d
   b70dc:	4643      	mov	r3, r8
   b70de:	4620      	mov	r0, r4
   b70e0:	9701      	str	r7, [sp, #4]
   b70e2:	f001 fe14 	bl	b8d0e <_ZN12Adafruit_GFX8fillRectEsssst>
            oled.printf("OK");
   b70e6:	499b      	ldr	r1, [pc, #620]	; (b7354 <_Z10updateMenuv+0x348>)
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b70e8:	6165      	str	r5, [r4, #20]
   b70ea:	4620      	mov	r0, r4
   b70ec:	f7fd f8c4 	bl	b4278 <_ZN5Print6printfEPKcz>
            oled.display();
   b70f0:	4620      	mov	r0, r4
   b70f2:	f002 fd0d 	bl	b9b10 <_ZN15Adafruit_SH110X7displayEv>
            redrawMenu = false;
   b70f6:	f88a 5000 	strb.w	r5, [sl]
}
   b70fa:	b017      	add	sp, #92	; 0x5c
   b70fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7100:	f8df 9264 	ldr.w	r9, [pc, #612]	; b7368 <_Z10updateMenuv+0x35c>
            if(WaterBots.at(i).botNum == botSelect){
   b7104:	f8df b26c 	ldr.w	fp, [pc, #620]	; b7374 <_Z10updateMenuv+0x368>
        uint8_t menuSelect = 0;
   b7108:	462e      	mov	r6, r5
   b710a:	e9d9 2300 	ldrd	r2, r3, [r9]
   b710e:	1a9b      	subs	r3, r3, r2
   b7110:	4a91      	ldr	r2, [pc, #580]	; (b7358 <_Z10updateMenuv+0x34c>)
   b7112:	111b      	asrs	r3, r3, #4
   b7114:	b2ef      	uxtb	r7, r5
   b7116:	4353      	muls	r3, r2
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b7118:	429f      	cmp	r7, r3
   b711a:	d247      	bcs.n	b71ac <_Z10updateMenuv+0x1a0>
            if(WaterBots.at(i).botNum == botSelect){
   b711c:	4639      	mov	r1, r7
   b711e:	4648      	mov	r0, r9
   b7120:	f7fe f80c 	bl	b513c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
                oled.setCursor(5+18*i,4);
   b7124:	eb07 08c7 	add.w	r8, r7, r7, lsl #3
            if(WaterBots.at(i).botNum == botSelect){
   b7128:	7881      	ldrb	r1, [r0, #2]
   b712a:	f89b 3000 	ldrb.w	r3, [fp]
                oled.setTextSize(1);
   b712e:	4886      	ldr	r0, [pc, #536]	; (b7348 <_Z10updateMenuv+0x33c>)
                oled.setCursor(5+18*i,4);
   b7130:	ea4f 0848 	mov.w	r8, r8, lsl #1
   b7134:	f108 0205 	add.w	r2, r8, #5
            if(WaterBots.at(i).botNum == botSelect){
   b7138:	4299      	cmp	r1, r3
   b713a:	f04f 0304 	mov.w	r3, #4
                oled.fillRect(1+i*18,1,14,14,1);
   b713e:	f108 0801 	add.w	r8, r8, #1
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b7142:	8222      	strh	r2, [r4, #16]
   b7144:	8263      	strh	r3, [r4, #18]
                oled.setTextSize(1);
   b7146:	f04f 0101 	mov.w	r1, #1
            if(WaterBots.at(i).botNum == botSelect){
   b714a:	d117      	bne.n	b717c <_Z10updateMenuv+0x170>
                oled.setTextSize(1);
   b714c:	f002 f8fb 	bl	b9346 <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b7150:	2300      	movs	r3, #0
                oled.fillRect(1+i*18,1,14,14,1);
   b7152:	2201      	movs	r2, #1
   b7154:	6163      	str	r3, [r4, #20]
   b7156:	230e      	movs	r3, #14
   b7158:	e9cd 3200 	strd	r3, r2, [sp]
   b715c:	487a      	ldr	r0, [pc, #488]	; (b7348 <_Z10updateMenuv+0x33c>)
   b715e:	4641      	mov	r1, r8
   b7160:	f001 fdd5 	bl	b8d0e <_ZN12Adafruit_GFX8fillRectEsssst>
                oled.printf("%d",WaterBots.at(i).botNum);
   b7164:	4639      	mov	r1, r7
   b7166:	4648      	mov	r0, r9
   b7168:	f7fd ffe8 	bl	b513c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b716c:	497b      	ldr	r1, [pc, #492]	; (b735c <_Z10updateMenuv+0x350>)
   b716e:	7882      	ldrb	r2, [r0, #2]
   b7170:	4875      	ldr	r0, [pc, #468]	; (b7348 <_Z10updateMenuv+0x33c>)
   b7172:	f7fd f881 	bl	b4278 <_ZN5Print6printfEPKcz>
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b7176:	3501      	adds	r5, #1
   b7178:	463e      	mov	r6, r7
   b717a:	e7c6      	b.n	b710a <_Z10updateMenuv+0xfe>
                oled.setTextSize(1);
   b717c:	f002 f8e3 	bl	b9346 <_ZN12Adafruit_GFX11setTextSizeEh>
   b7180:	f04f 1301 	mov.w	r3, #65537	; 0x10001
                oled.drawRect(1+i*18,1,14,14,1);
   b7184:	2201      	movs	r2, #1
   b7186:	6163      	str	r3, [r4, #20]
   b7188:	230e      	movs	r3, #14
   b718a:	e9cd 3200 	strd	r3, r2, [sp]
   b718e:	486e      	ldr	r0, [pc, #440]	; (b7348 <_Z10updateMenuv+0x33c>)
   b7190:	4641      	mov	r1, r8
   b7192:	f001 fe2f 	bl	b8df4 <_ZN12Adafruit_GFX8drawRectEsssst>
                oled.printf("%d",WaterBots.at(i).botNum);
   b7196:	4639      	mov	r1, r7
   b7198:	4648      	mov	r0, r9
   b719a:	f7fd ffcf 	bl	b513c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b719e:	496f      	ldr	r1, [pc, #444]	; (b735c <_Z10updateMenuv+0x350>)
   b71a0:	7882      	ldrb	r2, [r0, #2]
   b71a2:	4869      	ldr	r0, [pc, #420]	; (b7348 <_Z10updateMenuv+0x33c>)
   b71a4:	f7fd f868 	bl	b4278 <_ZN5Print6printfEPKcz>
   b71a8:	4637      	mov	r7, r6
   b71aa:	e7e4      	b.n	b7176 <_Z10updateMenuv+0x16a>
        if(menuItem == 0){
   b71ac:	4f6c      	ldr	r7, [pc, #432]	; (b7360 <_Z10updateMenuv+0x354>)
   b71ae:	783c      	ldrb	r4, [r7, #0]
   b71b0:	2c00      	cmp	r4, #0
   b71b2:	d144      	bne.n	b723e <_Z10updateMenuv+0x232>
   b71b4:	4d6b      	ldr	r5, [pc, #428]	; (b7364 <_Z10updateMenuv+0x358>)
            if(MenuItems.size() != 0) printMenuItem(0,true,!selectingBots,0,16,WaterBots.at(menuSelect));
   b71b6:	e9d5 3200 	ldrd	r3, r2, [r5]
   b71ba:	429a      	cmp	r2, r3
   b71bc:	d014      	beq.n	b71e8 <_Z10updateMenuv+0x1dc>
   b71be:	4631      	mov	r1, r6
   b71c0:	4869      	ldr	r0, [pc, #420]	; (b7368 <_Z10updateMenuv+0x35c>)
   b71c2:	f7fd ffbb 	bl	b513c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b71c6:	4b69      	ldr	r3, [pc, #420]	; (b736c <_Z10updateMenuv+0x360>)
   b71c8:	781f      	ldrb	r7, [r3, #0]
   b71ca:	4601      	mov	r1, r0
   b71cc:	2250      	movs	r2, #80	; 0x50
   b71ce:	a801      	add	r0, sp, #4
   b71d0:	f007 fe71 	bl	beeb6 <memcpy>
   b71d4:	f087 0701 	eor.w	r7, r7, #1
   b71d8:	2310      	movs	r3, #16
   b71da:	9300      	str	r3, [sp, #0]
   b71dc:	463a      	mov	r2, r7
   b71de:	4623      	mov	r3, r4
   b71e0:	2101      	movs	r1, #1
   b71e2:	4620      	mov	r0, r4
   b71e4:	f7ff fc80 	bl	b6ae8 <_Z13printMenuItemhbbtt8WaterBot>
   b71e8:	e9d5 3400 	ldrd	r3, r4, [r5]
   b71ec:	1ae4      	subs	r4, r4, r3
   b71ee:	4b5a      	ldr	r3, [pc, #360]	; (b7358 <_Z10updateMenuv+0x34c>)
                printMenuItem(mi,false,!selectingBots,0,16+(16*mi),WaterBots.at(menuSelect));
   b71f0:	f8df b174 	ldr.w	fp, [pc, #372]	; b7368 <_Z10updateMenuv+0x35c>
   b71f4:	10e4      	asrs	r4, r4, #3
   b71f6:	435c      	muls	r4, r3
            uint8_t loopIter = MenuItems.size();
   b71f8:	b2e4      	uxtb	r4, r4
            if(loopIter > 2) loopIter = 2;
   b71fa:	2c02      	cmp	r4, #2
   b71fc:	bf28      	it	cs
   b71fe:	2402      	movcs	r4, #2
            for(int mi = 1; mi <= loopIter; mi++){
   b7200:	2501      	movs	r5, #1
                printMenuItem(mi,false,!selectingBots,0,16+(16*mi),WaterBots.at(menuSelect));
   b7202:	f10d 0904 	add.w	r9, sp, #4
            for(int mi = 1; mi <= loopIter; mi++){
   b7206:	42ac      	cmp	r4, r5
   b7208:	db63      	blt.n	b72d2 <_Z10updateMenuv+0x2c6>
                printMenuItem(mi,false,!selectingBots,0,16+(16*mi),WaterBots.at(menuSelect));
   b720a:	4631      	mov	r1, r6
   b720c:	4658      	mov	r0, fp
   b720e:	f7fd ff95 	bl	b513c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b7212:	4b56      	ldr	r3, [pc, #344]	; (b736c <_Z10updateMenuv+0x360>)
   b7214:	fa5f f885 	uxtb.w	r8, r5
   b7218:	4601      	mov	r1, r0
   b721a:	3501      	adds	r5, #1
   b721c:	2250      	movs	r2, #80	; 0x50
   b721e:	4648      	mov	r0, r9
   b7220:	781f      	ldrb	r7, [r3, #0]
   b7222:	f007 fe48 	bl	beeb6 <memcpy>
   b7226:	012b      	lsls	r3, r5, #4
   b7228:	b29b      	uxth	r3, r3
   b722a:	f087 0701 	eor.w	r7, r7, #1
   b722e:	9300      	str	r3, [sp, #0]
   b7230:	2300      	movs	r3, #0
   b7232:	463a      	mov	r2, r7
   b7234:	4619      	mov	r1, r3
   b7236:	4640      	mov	r0, r8
   b7238:	f7ff fc56 	bl	b6ae8 <_Z13printMenuItemhbbtt8WaterBot>
            for(int mi = 1; mi <= loopIter; mi++){
   b723c:	e7e3      	b.n	b7206 <_Z10updateMenuv+0x1fa>
            if(MenuItems.size() != 0) printMenuItem(0,true,!selectingBots,0,16,WaterBots.at(menuSelect));
   b723e:	f8df 812c 	ldr.w	r8, [pc, #300]	; b736c <_Z10updateMenuv+0x360>
            printMenuItem(menuItem,true,!selectingBots,0,48,WaterBots.at(menuSelect));
   b7242:	4849      	ldr	r0, [pc, #292]	; (b7368 <_Z10updateMenuv+0x35c>)
            if(MenuItems.size() != 0) printMenuItem(0,true,!selectingBots,0,16,WaterBots.at(menuSelect));
   b7244:	f898 9000 	ldrb.w	r9, [r8]
        else if(menuItem == MAX_MENU_ITEMS-1){
   b7248:	2c06      	cmp	r4, #6
            if(MenuItems.size() != 0) printMenuItem(0,true,!selectingBots,0,16,WaterBots.at(menuSelect));
   b724a:	f089 0901 	eor.w	r9, r9, #1
            printMenuItem(menuItem,true,!selectingBots,0,48,WaterBots.at(menuSelect));
   b724e:	4631      	mov	r1, r6
   b7250:	ad01      	add	r5, sp, #4
        else if(menuItem == MAX_MENU_ITEMS-1){
   b7252:	d145      	bne.n	b72e0 <_Z10updateMenuv+0x2d4>
            printMenuItem(menuItem,true,!selectingBots,0,48,WaterBots.at(menuSelect));
   b7254:	f7fd ff72 	bl	b513c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b7258:	2250      	movs	r2, #80	; 0x50
   b725a:	4601      	mov	r1, r0
   b725c:	4628      	mov	r0, r5
   b725e:	f007 fe2a 	bl	beeb6 <memcpy>
   b7262:	2330      	movs	r3, #48	; 0x30
   b7264:	464a      	mov	r2, r9
   b7266:	4620      	mov	r0, r4
   b7268:	9300      	str	r3, [sp, #0]
   b726a:	2101      	movs	r1, #1
   b726c:	2300      	movs	r3, #0
   b726e:	f7ff fc3b 	bl	b6ae8 <_Z13printMenuItemhbbtt8WaterBot>
            printMenuItem(menuItem-1,false,!selectingBots,0,32,WaterBots.at(menuSelect));
   b7272:	4631      	mov	r1, r6
   b7274:	483c      	ldr	r0, [pc, #240]	; (b7368 <_Z10updateMenuv+0x35c>)
   b7276:	f7fd ff61 	bl	b513c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b727a:	783c      	ldrb	r4, [r7, #0]
   b727c:	f898 9000 	ldrb.w	r9, [r8]
   b7280:	4601      	mov	r1, r0
   b7282:	2250      	movs	r2, #80	; 0x50
   b7284:	4628      	mov	r0, r5
   b7286:	f007 fe16 	bl	beeb6 <memcpy>
   b728a:	3c01      	subs	r4, #1
   b728c:	2320      	movs	r3, #32
   b728e:	b2e4      	uxtb	r4, r4
   b7290:	9300      	str	r3, [sp, #0]
   b7292:	f089 0901 	eor.w	r9, r9, #1
   b7296:	2300      	movs	r3, #0
   b7298:	4619      	mov	r1, r3
   b729a:	4620      	mov	r0, r4
   b729c:	464a      	mov	r2, r9
   b729e:	f7ff fc23 	bl	b6ae8 <_Z13printMenuItemhbbtt8WaterBot>
            printMenuItem(menuItem-2,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b72a2:	4631      	mov	r1, r6
   b72a4:	4830      	ldr	r0, [pc, #192]	; (b7368 <_Z10updateMenuv+0x35c>)
   b72a6:	f7fd ff49 	bl	b513c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b72aa:	f898 6000 	ldrb.w	r6, [r8]
   b72ae:	783c      	ldrb	r4, [r7, #0]
   b72b0:	4601      	mov	r1, r0
   b72b2:	f086 0601 	eor.w	r6, r6, #1
   b72b6:	3c02      	subs	r4, #2
            printMenuItem(menuItem-1,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b72b8:	2250      	movs	r2, #80	; 0x50
   b72ba:	4628      	mov	r0, r5
   b72bc:	f007 fdfb 	bl	beeb6 <memcpy>
   b72c0:	2310      	movs	r3, #16
   b72c2:	b2e4      	uxtb	r4, r4
   b72c4:	9300      	str	r3, [sp, #0]
   b72c6:	2300      	movs	r3, #0
   b72c8:	4632      	mov	r2, r6
   b72ca:	4619      	mov	r1, r3
   b72cc:	4620      	mov	r0, r4
   b72ce:	f7ff fc0b 	bl	b6ae8 <_Z13printMenuItemhbbtt8WaterBot>
        oled.display();
   b72d2:	481d      	ldr	r0, [pc, #116]	; (b7348 <_Z10updateMenuv+0x33c>)
   b72d4:	f002 fc1c 	bl	b9b10 <_ZN15Adafruit_SH110X7displayEv>
        redrawMenu = false;
   b72d8:	2300      	movs	r3, #0
   b72da:	f88a 3000 	strb.w	r3, [sl]
   b72de:	e70c      	b.n	b70fa <_Z10updateMenuv+0xee>
            printMenuItem(menuItem+1,false,!selectingBots,0,48,WaterBots.at(menuSelect));
   b72e0:	f7fd ff2c 	bl	b513c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b72e4:	2250      	movs	r2, #80	; 0x50
   b72e6:	4601      	mov	r1, r0
   b72e8:	4628      	mov	r0, r5
   b72ea:	f007 fde4 	bl	beeb6 <memcpy>
   b72ee:	3401      	adds	r4, #1
   b72f0:	2330      	movs	r3, #48	; 0x30
   b72f2:	b2e4      	uxtb	r4, r4
   b72f4:	9300      	str	r3, [sp, #0]
   b72f6:	2300      	movs	r3, #0
   b72f8:	4619      	mov	r1, r3
   b72fa:	464a      	mov	r2, r9
   b72fc:	4620      	mov	r0, r4
   b72fe:	f7ff fbf3 	bl	b6ae8 <_Z13printMenuItemhbbtt8WaterBot>
            printMenuItem(menuItem,true,!selectingBots,0,32,WaterBots.at(menuSelect));
   b7302:	4631      	mov	r1, r6
   b7304:	4818      	ldr	r0, [pc, #96]	; (b7368 <_Z10updateMenuv+0x35c>)
   b7306:	f897 9000 	ldrb.w	r9, [r7]
   b730a:	f7fd ff17 	bl	b513c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b730e:	f898 4000 	ldrb.w	r4, [r8]
   b7312:	4601      	mov	r1, r0
   b7314:	2250      	movs	r2, #80	; 0x50
   b7316:	4628      	mov	r0, r5
   b7318:	f007 fdcd 	bl	beeb6 <memcpy>
   b731c:	f084 0401 	eor.w	r4, r4, #1
   b7320:	2320      	movs	r3, #32
   b7322:	4622      	mov	r2, r4
   b7324:	9300      	str	r3, [sp, #0]
   b7326:	2101      	movs	r1, #1
   b7328:	2300      	movs	r3, #0
   b732a:	4648      	mov	r0, r9
   b732c:	f7ff fbdc 	bl	b6ae8 <_Z13printMenuItemhbbtt8WaterBot>
            printMenuItem(menuItem-1,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b7330:	4631      	mov	r1, r6
   b7332:	480d      	ldr	r0, [pc, #52]	; (b7368 <_Z10updateMenuv+0x35c>)
   b7334:	f7fd ff02 	bl	b513c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b7338:	f898 6000 	ldrb.w	r6, [r8]
   b733c:	783c      	ldrb	r4, [r7, #0]
   b733e:	4601      	mov	r1, r0
   b7340:	f086 0601 	eor.w	r6, r6, #1
   b7344:	3c01      	subs	r4, #1
   b7346:	e7b7      	b.n	b72b8 <_Z10updateMenuv+0x2ac>
   b7348:	2003de5c 	.word	0x2003de5c
   b734c:	2003dcc4 	.word	0x2003dcc4
   b7350:	002d0030 	.word	0x002d0030
   b7354:	000c1828 	.word	0x000c1828
   b7358:	cccccccd 	.word	0xcccccccd
   b735c:	000c11de 	.word	0x000c11de
   b7360:	2003de05 	.word	0x2003de05
   b7364:	2003dcac 	.word	0x2003dcac
   b7368:	2003dce4 	.word	0x2003dce4
   b736c:	2003daab 	.word	0x2003daab
   b7370:	2003daaa 	.word	0x2003daaa
   b7374:	2003dd64 	.word	0x2003dd64

000b7378 <loop>:
void loop() {
   b7378:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(postStatus){
   b737a:	4d3b      	ldr	r5, [pc, #236]	; (b7468 <loop+0xf0>)
   b737c:	782b      	ldrb	r3, [r5, #0]
void loop() {
   b737e:	b087      	sub	sp, #28
    if(postStatus){
   b7380:	b153      	cbz	r3, b7398 <loop+0x20>
        sendData("CCABspc",0,false,true,false);                                  
   b7382:	2400      	movs	r4, #0
   b7384:	2301      	movs	r3, #1
   b7386:	4839      	ldr	r0, [pc, #228]	; (b746c <loop+0xf4>)
   b7388:	9400      	str	r4, [sp, #0]
   b738a:	4622      	mov	r2, r4
   b738c:	4621      	mov	r1, r4
   b738e:	f7fd fc2f 	bl	b4bf0 <_Z8sendDataPKchbbb>
        statusTimeout = false;
   b7392:	4b37      	ldr	r3, [pc, #220]	; (b7470 <loop+0xf8>)
        postStatus = false;
   b7394:	702c      	strb	r4, [r5, #0]
        statusTimeout = false;
   b7396:	701c      	strb	r4, [r3, #0]
    updateMenu();
   b7398:	f7ff fe38 	bl	b700c <_Z10updateMenuv>
    updateBotControl();
   b739c:	f7fd fee2 	bl	b5164 <_Z16updateBotControlv>
    manualMotorControl(botSelect);
   b73a0:	4b34      	ldr	r3, [pc, #208]	; (b7474 <loop+0xfc>)
   b73a2:	7818      	ldrb	r0, [r3, #0]
   b73a4:	f7fd fc92 	bl	b4ccc <_Z18manualMotorControlh>
    if (BLE.connected()) {
   b73a8:	f003 fda0 	bl	baeec <_ZN8particle14BleLocalDevice11getInstanceEv>
   b73ac:	f003 fe4b 	bl	bb046 <_ZNK8particle14BleLocalDevice9connectedEv>
   b73b0:	b970      	cbnz	r0, b73d0 <loop+0x58>
    	if (millis() - lastScan >= BLE_SCAN_PERIOD) {
   b73b2:	4c31      	ldr	r4, [pc, #196]	; (b7478 <loop+0x100>)
   b73b4:	f002 fd8c 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
   b73b8:	6823      	ldr	r3, [r4, #0]
   b73ba:	1ac0      	subs	r0, r0, r3
   b73bc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b73c0:	d306      	bcc.n	b73d0 <loop+0x58>
   b73c2:	f002 fd85 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
    		lastScan = millis();
   b73c6:	6020      	str	r0, [r4, #0]
    		BLEScan(-1);
   b73c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b73cc:	f7fe fe32 	bl	b6034 <_Z7BLEScani>
      : _M_current(__i) { }
   b73d0:	4b2a      	ldr	r3, [pc, #168]	; (b747c <loop+0x104>)
            sprintf(tempBuf,"CCB%dsns",wb.reqActive);
   b73d2:	4f2b      	ldr	r7, [pc, #172]	; (b7480 <loop+0x108>)
   b73d4:	e9d3 4600 	ldrd	r4, r6, [r3]
            wb.offloading = false;
   b73d8:	2500      	movs	r5, #0
    for(WaterBot &wb: WaterBots){
   b73da:	42a6      	cmp	r6, r4
   b73dc:	d019      	beq.n	b7412 <loop+0x9a>
        if(wb.offloading){
   b73de:	7da3      	ldrb	r3, [r4, #22]
   b73e0:	b11b      	cbz	r3, b73ea <loop+0x72>
            DataOffloader(wb.botNum);
   b73e2:	78a0      	ldrb	r0, [r4, #2]
   b73e4:	f7fe ff56 	bl	b6294 <_Z13DataOffloaderh>
            wb.offloading = false;
   b73e8:	75a5      	strb	r5, [r4, #22]
        if(wb.reqActive > 3){
   b73ea:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   b73ee:	2a03      	cmp	r2, #3
   b73f0:	d90d      	bls.n	b740e <loop+0x96>
            sprintf(tempBuf,"CCB%dsns",wb.reqActive);
   b73f2:	4639      	mov	r1, r7
   b73f4:	a803      	add	r0, sp, #12
   b73f6:	f003 f80f 	bl	ba418 <sprintf>
            sendData(tempBuf,0,!(wb.XBeeAvail), true, false);
   b73fa:	7a62      	ldrb	r2, [r4, #9]
   b73fc:	9500      	str	r5, [sp, #0]
   b73fe:	2301      	movs	r3, #1
   b7400:	405a      	eors	r2, r3
   b7402:	2100      	movs	r1, #0
   b7404:	a803      	add	r0, sp, #12
   b7406:	f7fd fbf3 	bl	b4bf0 <_Z8sendDataPKchbbb>
            wb.reqActive = 0;
   b740a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
      operator++() _GLIBCXX_NOEXCEPT
   b740e:	3450      	adds	r4, #80	; 0x50
	return *this;
   b7410:	e7e3      	b.n	b73da <loop+0x62>
    XBeeHandler();
   b7412:	f7fe fcc5 	bl	b5da0 <_Z11XBeeHandlerv>
    RPiHandler();
   b7416:	f7fd fb8b 	bl	b4b30 <_Z10RPiHandlerv>
    XBeeLTEPairSet();
   b741a:	f7fd fde9 	bl	b4ff0 <_Z14XBeeLTEPairSetv>
    RPiStatusUpdate();
   b741e:	f7fd fb21 	bl	b4a64 <_Z15RPiStatusUpdatev>
    if(stopActive){
   b7422:	4b18      	ldr	r3, [pc, #96]	; (b7484 <loop+0x10c>)
   b7424:	781b      	ldrb	r3, [r3, #0]
   b7426:	b1c3      	cbz	r3, b745a <loop+0xe2>
        if(millis() - stopTime > STOP_PUB_TIME){
   b7428:	4c17      	ldr	r4, [pc, #92]	; (b7488 <loop+0x110>)
   b742a:	f002 fd51 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
   b742e:	6823      	ldr	r3, [r4, #0]
   b7430:	1ac0      	subs	r0, r0, r3
   b7432:	f241 3388 	movw	r3, #5000	; 0x1388
   b7436:	4298      	cmp	r0, r3
   b7438:	d90f      	bls.n	b745a <loop+0xe2>
   b743a:	f002 fd49 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
            stopTime = millis();
   b743e:	6020      	str	r0, [r4, #0]
            sendData("CCABstp",0,true,true,!LTEStopSent);
   b7440:	4c12      	ldr	r4, [pc, #72]	; (b748c <loop+0x114>)
   b7442:	4813      	ldr	r0, [pc, #76]	; (b7490 <loop+0x118>)
   b7444:	7823      	ldrb	r3, [r4, #0]
   b7446:	f083 0301 	eor.w	r3, r3, #1
   b744a:	9300      	str	r3, [sp, #0]
   b744c:	2301      	movs	r3, #1
   b744e:	461a      	mov	r2, r3
   b7450:	2100      	movs	r1, #0
   b7452:	f7fd fbcd 	bl	b4bf0 <_Z8sendDataPKchbbb>
            LTEStopSent = true;
   b7456:	2301      	movs	r3, #1
   b7458:	7023      	strb	r3, [r4, #0]
    delay(10);
   b745a:	200a      	movs	r0, #10
}
   b745c:	b007      	add	sp, #28
   b745e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    delay(10);
   b7462:	f003 b829 	b.w	ba4b8 <delay>
   b7466:	bf00      	nop
   b7468:	2003ded4 	.word	0x2003ded4
   b746c:	000c182b 	.word	0x000c182b
   b7470:	2003e631 	.word	0x2003e631
   b7474:	2003dd64 	.word	0x2003dd64
   b7478:	2003dd98 	.word	0x2003dd98
   b747c:	2003dce4 	.word	0x2003dce4
   b7480:	000c1833 	.word	0x000c1833
   b7484:	2003e632 	.word	0x2003e632
   b7488:	2003e634 	.word	0x2003e634
   b748c:	2003dca9 	.word	0x2003dca9
   b7490:	000c183c 	.word	0x000c183c

000b7494 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b7494:	b538      	push	{r3, r4, r5, lr}
   b7496:	4604      	mov	r4, r0
   b7498:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b749a:	2224      	movs	r2, #36	; 0x24
   b749c:	2100      	movs	r1, #0
   b749e:	f007 fd32 	bl	bef06 <memset>

  m_vol = vol;
   b74a2:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b74a4:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b74a6:	2b10      	cmp	r3, #16
   b74a8:	d003      	beq.n	b74b2 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b74aa:	2b20      	cmp	r3, #32
   b74ac:	d006      	beq.n	b74bc <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b74ae:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b74b0:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b74b2:	2320      	movs	r3, #32
  m_flags = F_READ;
   b74b4:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b74b6:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b74b8:	70a0      	strb	r0, [r4, #2]
  return true;
   b74ba:	e7f9      	b.n	b74b0 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b74bc:	2340      	movs	r3, #64	; 0x40
   b74be:	e7f9      	b.n	b74b4 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b74c0 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b74c0:	b510      	push	{r4, lr}
   b74c2:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b74c4:	3024      	adds	r0, #36	; 0x24
   b74c6:	f000 feeb 	bl	b82a0 <_ZN8FatCache4syncEv>
   b74ca:	b128      	cbz	r0, b74d8 <_ZN9FatVolume9cacheSyncEv+0x18>
   b74cc:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b74d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b74d4:	f000 bee4 	b.w	b82a0 <_ZN8FatCache4syncEv>
  }
   b74d8:	bd10      	pop	{r4, pc}

000b74da <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b74da:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b74dc:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b74de:	f043 0304 	orr.w	r3, r3, #4
   b74e2:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b74e4:	f100 0210 	add.w	r2, r0, #16
   b74e8:	6880      	ldr	r0, [r0, #8]
   b74ea:	f000 bf8f 	b.w	b840c <_ZN9FatVolume15allocateClusterEmPm>
	...

000b74f0 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b74f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b74f4:	7801      	ldrb	r1, [r0, #0]
   b74f6:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b74fa:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b74fc:	d003      	beq.n	b7506 <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b74fe:	2600      	movs	r6, #0
}
   b7500:	4630      	mov	r0, r6
   b7502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b7506:	6942      	ldr	r2, [r0, #20]
   b7508:	4b17      	ldr	r3, [pc, #92]	; (b7568 <_ZN7FatFile13addDirClusterEv+0x78>)
   b750a:	429a      	cmp	r2, r3
   b750c:	d2f7      	bcs.n	b74fe <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b750e:	f7ff ffe4 	bl	b74da <_ZN7FatFile10addClusterEv>
   b7512:	4606      	mov	r6, r0
   b7514:	2800      	cmp	r0, #0
   b7516:	d0f2      	beq.n	b74fe <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b7518:	6921      	ldr	r1, [r4, #16]
   b751a:	68a0      	ldr	r0, [r4, #8]
   b751c:	f000 ff0b 	bl	b8336 <_ZNK9FatVolume17clusterFirstBlockEm>
   b7520:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b7522:	68a0      	ldr	r0, [r4, #8]
   b7524:	2205      	movs	r2, #5
   b7526:	4639      	mov	r1, r7
   b7528:	3024      	adds	r0, #36	; 0x24
   b752a:	f000 fee1 	bl	b82f0 <_ZN8FatCache4readEmh>
  if (!pc) {
   b752e:	4680      	mov	r8, r0
   b7530:	2800      	cmp	r0, #0
   b7532:	d0e4      	beq.n	b74fe <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b7534:	4629      	mov	r1, r5
   b7536:	f44f 7200 	mov.w	r2, #512	; 0x200
   b753a:	f007 fce4 	bl	bef06 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b753e:	2501      	movs	r5, #1
   b7540:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b7542:	791a      	ldrb	r2, [r3, #4]
   b7544:	42aa      	cmp	r2, r5
   b7546:	d909      	bls.n	b755c <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b7548:	6818      	ldr	r0, [r3, #0]
   b754a:	4642      	mov	r2, r8
   b754c:	19e9      	adds	r1, r5, r7
   b754e:	f001 fa3c 	bl	b89ca <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b7552:	2800      	cmp	r0, #0
   b7554:	d0d3      	beq.n	b74fe <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b7556:	3501      	adds	r5, #1
   b7558:	b2ed      	uxtb	r5, r5
   b755a:	e7f1      	b.n	b7540 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b755c:	6963      	ldr	r3, [r4, #20]
   b755e:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b7562:	6163      	str	r3, [r4, #20]
  return true;
   b7564:	e7cc      	b.n	b7500 <_ZN7FatFile13addDirClusterEv+0x10>
   b7566:	bf00      	nop
   b7568:	001ffe00 	.word	0x001ffe00

000b756c <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b756c:	b510      	push	{r4, lr}
   b756e:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b7570:	6880      	ldr	r0, [r0, #8]
   b7572:	460a      	mov	r2, r1
   b7574:	3024      	adds	r0, #36	; 0x24
   b7576:	69a1      	ldr	r1, [r4, #24]
   b7578:	f000 feba 	bl	b82f0 <_ZN8FatCache4readEmh>
  if (!pc) {
   b757c:	b120      	cbz	r0, b7588 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b757e:	88a3      	ldrh	r3, [r4, #4]
   b7580:	f003 030f 	and.w	r3, r3, #15
   b7584:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b7588:	bd10      	pop	{r4, pc}

000b758a <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b758a:	7803      	ldrb	r3, [r0, #0]
   b758c:	b90b      	cbnz	r3, b7592 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b758e:	f7ff bf81 	b.w	b7494 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b7592:	2000      	movs	r0, #0
   b7594:	4770      	bx	lr

000b7596 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b7596:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b759a:	7803      	ldrb	r3, [r0, #0]
   b759c:	4604      	mov	r4, r0
   b759e:	4688      	mov	r8, r1
   b75a0:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b75a2:	2b00      	cmp	r3, #0
   b75a4:	d05d      	beq.n	b7662 <_ZN7FatFile4readEPvj+0xcc>
   b75a6:	7882      	ldrb	r2, [r0, #2]
   b75a8:	07d1      	lsls	r1, r2, #31
   b75aa:	d55a      	bpl.n	b7662 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b75ac:	071a      	lsls	r2, r3, #28
   b75ae:	d52d      	bpl.n	b760c <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b75b0:	69c3      	ldr	r3, [r0, #28]
   b75b2:	6942      	ldr	r2, [r0, #20]
   b75b4:	1a9b      	subs	r3, r3, r2
   b75b6:	429d      	cmp	r5, r3
   b75b8:	bf28      	it	cs
   b75ba:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b75bc:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b75be:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b75c2:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b75c6:	2e00      	cmp	r6, #0
   b75c8:	f000 808f 	beq.w	b76ea <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b75cc:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b75ce:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b75d0:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b75d2:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b75d4:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b75d8:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b75dc:	d51f      	bpl.n	b761e <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b75de:	6a00      	ldr	r0, [r0, #32]
   b75e0:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b75e2:	68a0      	ldr	r0, [r4, #8]
   b75e4:	f1ba 0f00 	cmp.w	sl, #0
   b75e8:	d142      	bne.n	b7670 <_ZN7FatFile4readEPvj+0xda>
   b75ea:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b75ee:	d33f      	bcc.n	b7670 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b75f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b75f2:	4299      	cmp	r1, r3
   b75f4:	d03c      	beq.n	b7670 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b75f6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b75fa:	d252      	bcs.n	b76a2 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b75fc:	6800      	ldr	r0, [r0, #0]
   b75fe:	4642      	mov	r2, r8
   b7600:	f001 f95a 	bl	b88b8 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b7604:	b368      	cbz	r0, b7662 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b7606:	f44f 7700 	mov.w	r7, #512	; 0x200
   b760a:	e044      	b.n	b7696 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b760c:	069b      	lsls	r3, r3, #26
   b760e:	d5d5      	bpl.n	b75bc <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b7610:	6883      	ldr	r3, [r0, #8]
   b7612:	891a      	ldrh	r2, [r3, #8]
   b7614:	6943      	ldr	r3, [r0, #20]
   b7616:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b761a:	b29b      	uxth	r3, r3
   b761c:	e7cb      	b.n	b75b6 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b761e:	f890 9005 	ldrb.w	r9, [r0, #5]
   b7622:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b7626:	f1ba 0f00 	cmp.w	sl, #0
   b762a:	d108      	bne.n	b763e <_ZN7FatFile4readEPvj+0xa8>
   b762c:	f1b9 0f00 	cmp.w	r9, #0
   b7630:	d105      	bne.n	b763e <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b7632:	b95b      	cbnz	r3, b764c <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b7634:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b7636:	bf4c      	ite	mi
   b7638:	6a03      	ldrmi	r3, [r0, #32]
   b763a:	6a23      	ldrpl	r3, [r4, #32]
   b763c:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b763e:	6921      	ldr	r1, [r4, #16]
   b7640:	68a0      	ldr	r0, [r4, #8]
   b7642:	f000 fe78 	bl	b8336 <_ZNK9FatVolume17clusterFirstBlockEm>
   b7646:	eb09 0100 	add.w	r1, r9, r0
   b764a:	e7ca      	b.n	b75e2 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b764c:	6921      	ldr	r1, [r4, #16]
   b764e:	465a      	mov	r2, fp
   b7650:	f000 fe77 	bl	b8342 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b7654:	2800      	cmp	r0, #0
   b7656:	db04      	blt.n	b7662 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b7658:	d1f1      	bne.n	b763e <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b765a:	7823      	ldrb	r3, [r4, #0]
   b765c:	f013 0f70 	tst.w	r3, #112	; 0x70
   b7660:	d143      	bne.n	b76ea <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b7662:	7863      	ldrb	r3, [r4, #1]
   b7664:	f043 0302 	orr.w	r3, r3, #2
   b7668:	7063      	strb	r3, [r4, #1]
  return -1;
   b766a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b766e:	e03d      	b.n	b76ec <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b7670:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b7674:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b7676:	f04f 0200 	mov.w	r2, #0
   b767a:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b767e:	bf28      	it	cs
   b7680:	4637      	movcs	r7, r6
   b7682:	f000 fe35 	bl	b82f0 <_ZN8FatCache4readEmh>
      if (!pc) {
   b7686:	2800      	cmp	r0, #0
   b7688:	d0eb      	beq.n	b7662 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b768a:	eb00 010a 	add.w	r1, r0, sl
   b768e:	463a      	mov	r2, r7
   b7690:	4640      	mov	r0, r8
   b7692:	f007 fc10 	bl	beeb6 <memcpy>
    m_curPosition += n;
   b7696:	6963      	ldr	r3, [r4, #20]
   b7698:	443b      	add	r3, r7
    dst += n;
   b769a:	44b8      	add	r8, r7
    m_curPosition += n;
   b769c:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b769e:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b76a0:	e791      	b.n	b75c6 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b76a2:	7822      	ldrb	r2, [r4, #0]
   b76a4:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b76a6:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b76aa:	d406      	bmi.n	b76ba <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b76ac:	7902      	ldrb	r2, [r0, #4]
   b76ae:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b76b2:	b2d2      	uxtb	r2, r2
   b76b4:	4592      	cmp	sl, r2
   b76b6:	bf28      	it	cs
   b76b8:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b76ba:	4299      	cmp	r1, r3
      n = 512*nb;
   b76bc:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b76c0:	d208      	bcs.n	b76d4 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b76c2:	68a0      	ldr	r0, [r4, #8]
   b76c4:	4653      	mov	r3, sl
   b76c6:	6800      	ldr	r0, [r0, #0]
   b76c8:	4642      	mov	r2, r8
   b76ca:	f001 f93d 	bl	b8948 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b76ce:	2800      	cmp	r0, #0
   b76d0:	d1e1      	bne.n	b7696 <_ZN7FatFile4readEPvj+0x100>
   b76d2:	e7c6      	b.n	b7662 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b76d4:	4453      	add	r3, sl
   b76d6:	428b      	cmp	r3, r1
   b76d8:	d9f3      	bls.n	b76c2 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b76da:	3024      	adds	r0, #36	; 0x24
   b76dc:	9101      	str	r1, [sp, #4]
   b76de:	f000 fddf 	bl	b82a0 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b76e2:	9901      	ldr	r1, [sp, #4]
   b76e4:	2800      	cmp	r0, #0
   b76e6:	d1ec      	bne.n	b76c2 <_ZN7FatFile4readEPvj+0x12c>
   b76e8:	e7bb      	b.n	b7662 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b76ea:	1ba8      	subs	r0, r5, r6
}
   b76ec:	b003      	add	sp, #12
   b76ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b76f2 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b76f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b76f4:	2201      	movs	r2, #1
   b76f6:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b76fa:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b76fe:	4604      	mov	r4, r0
   b7700:	f7ff ff49 	bl	b7596 <_ZN7FatFile4readEPvj>
   b7704:	2801      	cmp	r0, #1
   b7706:	bf0a      	itet	eq
   b7708:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b770c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b7710:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b7714:	b002      	add	sp, #8
   b7716:	bd70      	pop	{r4, r5, r6, pc}

000b7718 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b7718:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b771a:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b771c:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b7720:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b7722:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b7726:	d000      	beq.n	b772a <_ZN7FatFile12readDirCacheEb+0x12>
   b7728:	b999      	cbnz	r1, b7752 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b772a:	2201      	movs	r2, #1
   b772c:	f10d 0107 	add.w	r1, sp, #7
   b7730:	4620      	mov	r0, r4
   b7732:	f7ff ff30 	bl	b7596 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b7736:	b240      	sxtb	r0, r0
   b7738:	2801      	cmp	r0, #1
   b773a:	d002      	beq.n	b7742 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b773c:	2000      	movs	r0, #0
}
   b773e:	b003      	add	sp, #12
   b7740:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b7742:	6963      	ldr	r3, [r4, #20]
   b7744:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b7746:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b7748:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b774a:	3030      	adds	r0, #48	; 0x30
   b774c:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b7750:	e7f5      	b.n	b773e <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b7752:	3320      	adds	r3, #32
   b7754:	e7f7      	b.n	b7746 <_ZN7FatFile12readDirCacheEb+0x2e>

000b7756 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b7756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b775a:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b775c:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b775e:	4604      	mov	r4, r0
   b7760:	460d      	mov	r5, r1
  if (!isOpen()) {
   b7762:	b162      	cbz	r2, b777e <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b7764:	6940      	ldr	r0, [r0, #20]
   b7766:	4288      	cmp	r0, r1
   b7768:	d002      	beq.n	b7770 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b776a:	b919      	cbnz	r1, b7774 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b776c:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b776e:	6165      	str	r5, [r4, #20]
    return true;
   b7770:	2001      	movs	r0, #1
   b7772:	e006      	b.n	b7782 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b7774:	0716      	lsls	r6, r2, #28
   b7776:	d506      	bpl.n	b7786 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b7778:	69e3      	ldr	r3, [r4, #28]
   b777a:	428b      	cmp	r3, r1
   b777c:	d20b      	bcs.n	b7796 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b777e:	6127      	str	r7, [r4, #16]
  return false;
   b7780:	2000      	movs	r0, #0
}
   b7782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b7786:	0691      	lsls	r1, r2, #26
   b7788:	d505      	bpl.n	b7796 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b778a:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b778c:	891b      	ldrh	r3, [r3, #8]
   b778e:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b7792:	d9ec      	bls.n	b776e <_ZN7FatFile7seekSetEm+0x18>
   b7794:	e7f3      	b.n	b777e <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b7796:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b779a:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b779e:	1e43      	subs	r3, r0, #1
   b77a0:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b77a4:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b77a6:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b77a8:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b77aa:	42b3      	cmp	r3, r6
   b77ac:	d800      	bhi.n	b77b0 <_ZN7FatFile7seekSetEm+0x5a>
   b77ae:	b998      	cbnz	r0, b77d8 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b77b0:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b77b2:	bf4c      	ite	mi
   b77b4:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b77b8:	6a23      	ldrpl	r3, [r4, #32]
   b77ba:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b77bc:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b77c0:	2e00      	cmp	r6, #0
   b77c2:	d0d4      	beq.n	b776e <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b77c4:	6921      	ldr	r1, [r4, #16]
   b77c6:	68a0      	ldr	r0, [r4, #8]
   b77c8:	4642      	mov	r2, r8
   b77ca:	f000 fdba 	bl	b8342 <_ZN9FatVolume6fatGetEmPm>
   b77ce:	2800      	cmp	r0, #0
   b77d0:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b77d4:	dcf4      	bgt.n	b77c0 <_ZN7FatFile7seekSetEm+0x6a>
   b77d6:	e7d2      	b.n	b777e <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b77d8:	1af6      	subs	r6, r6, r3
   b77da:	e7ef      	b.n	b77bc <_ZN7FatFile7seekSetEm+0x66>

000b77dc <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b77dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b77de:	460f      	mov	r7, r1
   b77e0:	4604      	mov	r4, r0
   b77e2:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b77e4:	2100      	movs	r1, #0
   b77e6:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b77e8:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b77ea:	f007 fb8c 	bl	bef06 <memset>
  m_vol = dirFile->m_vol;
   b77ee:	68b8      	ldr	r0, [r7, #8]
   b77f0:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b77f2:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b77f4:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b77f8:	6a3b      	ldr	r3, [r7, #32]
   b77fa:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b77fc:	016a      	lsls	r2, r5, #5
   b77fe:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b7802:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b7806:	071f      	lsls	r7, r3, #28
   b7808:	d444      	bmi.n	b7894 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b780a:	f003 0317 	and.w	r3, r3, #23
   b780e:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b7810:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b7814:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b7818:	bf04      	itt	eq
   b781a:	f043 0308 	orreq.w	r3, r3, #8
   b781e:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b7820:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b7824:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b7826:	f006 0303 	and.w	r3, r6, #3
   b782a:	2b01      	cmp	r3, #1
   b782c:	d02c      	beq.n	b7888 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b782e:	2b02      	cmp	r3, #2
   b7830:	d028      	beq.n	b7884 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b7832:	bb7b      	cbnz	r3, b7894 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b7834:	0571      	lsls	r1, r6, #21
   b7836:	d42d      	bmi.n	b7894 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b7838:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b783a:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b783c:	78a1      	ldrb	r1, [r4, #2]
   b783e:	078b      	lsls	r3, r1, #30
   b7840:	d504      	bpl.n	b784c <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b7842:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b7844:	06df      	lsls	r7, r3, #27
   b7846:	d425      	bmi.n	b7894 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b7848:	07dd      	lsls	r5, r3, #31
   b784a:	d423      	bmi.n	b7894 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b784c:	11b3      	asrs	r3, r6, #6
   b784e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b7852:	f006 0508 	and.w	r5, r6, #8
   b7856:	432b      	orrs	r3, r5
   b7858:	430b      	orrs	r3, r1
   b785a:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b785c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b785e:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b7860:	1883      	adds	r3, r0, r2
   b7862:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b7866:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b786a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b786e:	0572      	lsls	r2, r6, #21
   b7870:	d513      	bpl.n	b789a <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b7872:	b959      	cbnz	r1, b788c <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b7874:	78a3      	ldrb	r3, [r4, #2]
   b7876:	f043 0304 	orr.w	r3, r3, #4
   b787a:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b787c:	0473      	lsls	r3, r6, #17
   b787e:	d410      	bmi.n	b78a2 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b7880:	2001      	movs	r0, #1
}
   b7882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b7884:	2303      	movs	r3, #3
   b7886:	e7d8      	b.n	b783a <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b7888:	2302      	movs	r3, #2
   b788a:	e7d6      	b.n	b783a <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b788c:	f000 fdf9 	bl	b8482 <_ZN9FatVolume9freeChainEm>
   b7890:	2800      	cmp	r0, #0
   b7892:	d1ef      	bne.n	b7874 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b7894:	2000      	movs	r0, #0
   b7896:	7020      	strb	r0, [r4, #0]
  return false;
   b7898:	e7f3      	b.n	b7882 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b789a:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b789c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b789e:	61e3      	str	r3, [r4, #28]
   b78a0:	e7ec      	b.n	b787c <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b78a2:	69e1      	ldr	r1, [r4, #28]
   b78a4:	4620      	mov	r0, r4
   b78a6:	f7ff ff56 	bl	b7756 <_ZN7FatFile7seekSetEm>
   b78aa:	2800      	cmp	r0, #0
   b78ac:	d1e8      	bne.n	b7880 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b78ae:	e7f1      	b.n	b7894 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b78b0 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b78b0:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b78b2:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b78b4:	4604      	mov	r4, r0
  if (!isOpen()) {
   b78b6:	b90b      	cbnz	r3, b78bc <_ZN7FatFile4syncEv+0xc>
    return true;
   b78b8:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b78ba:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b78bc:	7883      	ldrb	r3, [r0, #2]
   b78be:	075a      	lsls	r2, r3, #29
   b78c0:	d523      	bpl.n	b790a <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b78c2:	2101      	movs	r1, #1
   b78c4:	f7ff fe52 	bl	b756c <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b78c8:	4605      	mov	r5, r0
   b78ca:	b928      	cbnz	r0, b78d8 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b78cc:	7863      	ldrb	r3, [r4, #1]
   b78ce:	f043 0301 	orr.w	r3, r3, #1
   b78d2:	7063      	strb	r3, [r4, #1]
  return false;
   b78d4:	2000      	movs	r0, #0
   b78d6:	e7f0      	b.n	b78ba <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b78d8:	7803      	ldrb	r3, [r0, #0]
   b78da:	2be5      	cmp	r3, #229	; 0xe5
   b78dc:	d0f6      	beq.n	b78cc <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b78de:	7823      	ldrb	r3, [r4, #0]
   b78e0:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b78e2:	bf44      	itt	mi
   b78e4:	69e3      	ldrmi	r3, [r4, #28]
   b78e6:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b78e8:	6a23      	ldr	r3, [r4, #32]
   b78ea:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b78ec:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b78ee:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b78f0:	4b09      	ldr	r3, [pc, #36]	; (b7918 <_ZN7FatFile4syncEv+0x68>)
   b78f2:	681b      	ldr	r3, [r3, #0]
   b78f4:	b12b      	cbz	r3, b7902 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b78f6:	f100 0116 	add.w	r1, r0, #22
   b78fa:	3018      	adds	r0, #24
   b78fc:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b78fe:	8b2b      	ldrh	r3, [r5, #24]
   b7900:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b7902:	78a3      	ldrb	r3, [r4, #2]
   b7904:	f023 0304 	bic.w	r3, r3, #4
   b7908:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b790a:	68a0      	ldr	r0, [r4, #8]
   b790c:	f7ff fdd8 	bl	b74c0 <_ZN9FatVolume9cacheSyncEv>
   b7910:	2800      	cmp	r0, #0
   b7912:	d0db      	beq.n	b78cc <_ZN7FatFile4syncEv+0x1c>
   b7914:	e7d0      	b.n	b78b8 <_ZN7FatFile4syncEv+0x8>
   b7916:	bf00      	nop
   b7918:	2003e63c 	.word	0x2003e63c

000b791c <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b791c:	b510      	push	{r4, lr}
   b791e:	4604      	mov	r4, r0
  bool rtn = sync();
   b7920:	f7ff ffc6 	bl	b78b0 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b7924:	2300      	movs	r3, #0
   b7926:	7023      	strb	r3, [r4, #0]
}
   b7928:	bd10      	pop	{r4, pc}

000b792a <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b792a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b792c:	b093      	sub	sp, #76	; 0x4c
   b792e:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b7930:	2300      	movs	r3, #0
   b7932:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b7934:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b7936:	9201      	str	r2, [sp, #4]
   b7938:	4606      	mov	r6, r0
   b793a:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b793c:	b113      	cbz	r3, b7944 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b793e:	2000      	movs	r0, #0
}
   b7940:	b013      	add	sp, #76	; 0x4c
   b7942:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b7944:	780b      	ldrb	r3, [r1, #0]
   b7946:	f013 0f70 	tst.w	r3, #112	; 0x70
   b794a:	d0f8      	beq.n	b793e <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b794c:	7813      	ldrb	r3, [r2, #0]
   b794e:	2b2f      	cmp	r3, #47	; 0x2f
   b7950:	d112      	bne.n	b7978 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b7952:	9a01      	ldr	r2, [sp, #4]
   b7954:	7813      	ldrb	r3, [r2, #0]
   b7956:	2b2f      	cmp	r3, #47	; 0x2f
   b7958:	d102      	bne.n	b7960 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b795a:	3201      	adds	r2, #1
   b795c:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b795e:	e7f8      	b.n	b7952 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b7960:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b7962:	b91b      	cbnz	r3, b796c <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b7964:	4630      	mov	r0, r6
   b7966:	f7ff fe10 	bl	b758a <_ZN7FatFile8openRootEP9FatVolume>
   b796a:	e7e9      	b.n	b7940 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b796c:	a809      	add	r0, sp, #36	; 0x24
   b796e:	f7ff fd91 	bl	b7494 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b7972:	2800      	cmp	r0, #0
   b7974:	d0e3      	beq.n	b793e <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b7976:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b7978:	9801      	ldr	r0, [sp, #4]
   b797a:	aa01      	add	r2, sp, #4
   b797c:	a903      	add	r1, sp, #12
   b797e:	f000 f931 	bl	b7be4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b7982:	2800      	cmp	r0, #0
   b7984:	d0db      	beq.n	b793e <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b7986:	9b01      	ldr	r3, [sp, #4]
   b7988:	781b      	ldrb	r3, [r3, #0]
   b798a:	b19b      	cbz	r3, b79b4 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b798c:	2300      	movs	r3, #0
   b798e:	aa03      	add	r2, sp, #12
   b7990:	4621      	mov	r1, r4
   b7992:	4630      	mov	r0, r6
   b7994:	f000 faba 	bl	b7f0c <_ZN7FatFile4openEPS_P7fname_ti>
   b7998:	2800      	cmp	r0, #0
   b799a:	d0d0      	beq.n	b793e <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b799c:	4635      	mov	r5, r6
   b799e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b79a0:	ac09      	add	r4, sp, #36	; 0x24
   b79a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b79a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b79a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b79a8:	682b      	ldr	r3, [r5, #0]
   b79aa:	6023      	str	r3, [r4, #0]
    close();
   b79ac:	4630      	mov	r0, r6
   b79ae:	f7ff ffb5 	bl	b791c <_ZN7FatFile5closeEv>
  while (1) {
   b79b2:	e7e0      	b.n	b7976 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b79b4:	463b      	mov	r3, r7
   b79b6:	aa03      	add	r2, sp, #12
   b79b8:	4621      	mov	r1, r4
   b79ba:	4630      	mov	r0, r6
   b79bc:	f000 faa6 	bl	b7f0c <_ZN7FatFile4openEPS_P7fname_ti>
   b79c0:	e7be      	b.n	b7940 <_ZN7FatFile4openEPS_PKci+0x16>

000b79c2 <_ZN7FatFile6removeEPS_PKc>:
bool FatFile::remove(FatFile* dirFile, const char* path) {
   b79c2:	b500      	push	{lr}
   b79c4:	b08b      	sub	sp, #44	; 0x2c
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b79c6:	2300      	movs	r3, #0
   b79c8:	460a      	mov	r2, r1
   b79ca:	9301      	str	r3, [sp, #4]
  if (!file.open(dirFile, path, O_WRONLY)) {
   b79cc:	4601      	mov	r1, r0
   b79ce:	2301      	movs	r3, #1
   b79d0:	a801      	add	r0, sp, #4
   b79d2:	f7ff ffaa 	bl	b792a <_ZN7FatFile4openEPS_PKci>
   b79d6:	b110      	cbz	r0, b79de <_ZN7FatFile6removeEPS_PKc+0x1c>
  return file.remove();
   b79d8:	a801      	add	r0, sp, #4
   b79da:	f000 f9e1 	bl	b7da0 <_ZN7FatFile6removeEv>
}
   b79de:	b00b      	add	sp, #44	; 0x2c
   b79e0:	f85d fb04 	ldr.w	pc, [sp], #4

000b79e4 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b79e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b79e8:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b79ea:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b79ec:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b79ee:	4604      	mov	r4, r0
   b79f0:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b79f2:	d55b      	bpl.n	b7aac <_ZN7FatFile5writeEPKvj+0xc8>
   b79f4:	7883      	ldrb	r3, [r0, #2]
   b79f6:	079a      	lsls	r2, r3, #30
   b79f8:	d558      	bpl.n	b7aac <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b79fa:	071b      	lsls	r3, r3, #28
   b79fc:	d451      	bmi.n	b7aa2 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b79fe:	6963      	ldr	r3, [r4, #20]
   b7a00:	43db      	mvns	r3, r3
   b7a02:	42bb      	cmp	r3, r7
   b7a04:	d352      	bcc.n	b7aac <_ZN7FatFile5writeEPKvj+0xc8>
   b7a06:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b7a08:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b7a0c:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b7a0e:	f1b8 0f00 	cmp.w	r8, #0
   b7a12:	f000 8091 	beq.w	b7b38 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b7a16:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b7a18:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b7a1a:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b7a1e:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b7a22:	d10e      	bne.n	b7a42 <_ZN7FatFile5writeEPKvj+0x5e>
   b7a24:	b96d      	cbnz	r5, b7a42 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b7a26:	6921      	ldr	r1, [r4, #16]
   b7a28:	2900      	cmp	r1, #0
   b7a2a:	d046      	beq.n	b7aba <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b7a2c:	4652      	mov	r2, sl
   b7a2e:	f000 fc88 	bl	b8342 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b7a32:	2800      	cmp	r0, #0
   b7a34:	db3a      	blt.n	b7aac <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b7a36:	d104      	bne.n	b7a42 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b7a38:	4620      	mov	r0, r4
   b7a3a:	f7ff fd4e 	bl	b74da <_ZN7FatFile10addClusterEv>
   b7a3e:	2800      	cmp	r0, #0
   b7a40:	d034      	beq.n	b7aac <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b7a42:	6921      	ldr	r1, [r4, #16]
   b7a44:	68a0      	ldr	r0, [r4, #8]
   b7a46:	f000 fc76 	bl	b8336 <_ZNK9FatVolume17clusterFirstBlockEm>
   b7a4a:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b7a4c:	68a0      	ldr	r0, [r4, #8]
   b7a4e:	b915      	cbnz	r5, b7a56 <_ZN7FatFile5writeEPKvj+0x72>
   b7a50:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b7a54:	d23f      	bcs.n	b7ad6 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b7a56:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b7a5a:	4546      	cmp	r6, r8
   b7a5c:	bf28      	it	cs
   b7a5e:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b7a60:	2d00      	cmp	r5, #0
   b7a62:	d136      	bne.n	b7ad2 <_ZN7FatFile5writeEPKvj+0xee>
   b7a64:	6962      	ldr	r2, [r4, #20]
   b7a66:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b7a68:	429a      	cmp	r2, r3
   b7a6a:	bf34      	ite	cc
   b7a6c:	2201      	movcc	r2, #1
   b7a6e:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b7a70:	3024      	adds	r0, #36	; 0x24
   b7a72:	f000 fc3d 	bl	b82f0 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b7a76:	b1c8      	cbz	r0, b7aac <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b7a78:	4428      	add	r0, r5
   b7a7a:	4632      	mov	r2, r6
   b7a7c:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b7a7e:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b7a80:	f007 fa19 	bl	beeb6 <memcpy>
      if (512 == (n + blockOffset)) {
   b7a84:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b7a88:	d104      	bne.n	b7a94 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b7a8a:	68a0      	ldr	r0, [r4, #8]
   b7a8c:	3024      	adds	r0, #36	; 0x24
   b7a8e:	f000 fc07 	bl	b82a0 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b7a92:	b158      	cbz	r0, b7aac <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b7a94:	6963      	ldr	r3, [r4, #20]
   b7a96:	4433      	add	r3, r6
   b7a98:	6163      	str	r3, [r4, #20]
    src += n;
   b7a9a:	44b1      	add	r9, r6
    nToWrite -= n;
   b7a9c:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b7aa0:	e7b4      	b.n	b7a0c <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b7aa2:	69c1      	ldr	r1, [r0, #28]
   b7aa4:	f7ff fe57 	bl	b7756 <_ZN7FatFile7seekSetEm>
   b7aa8:	2800      	cmp	r0, #0
   b7aaa:	d1a8      	bne.n	b79fe <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b7aac:	7863      	ldrb	r3, [r4, #1]
   b7aae:	f043 0301 	orr.w	r3, r3, #1
   b7ab2:	7063      	strb	r3, [r4, #1]
  return -1;
   b7ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7ab8:	e050      	b.n	b7b5c <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b7aba:	6a23      	ldr	r3, [r4, #32]
   b7abc:	b93b      	cbnz	r3, b7ace <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b7abe:	4620      	mov	r0, r4
   b7ac0:	f7ff fd0b 	bl	b74da <_ZN7FatFile10addClusterEv>
   b7ac4:	2800      	cmp	r0, #0
   b7ac6:	d0f1      	beq.n	b7aac <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b7ac8:	6923      	ldr	r3, [r4, #16]
   b7aca:	6223      	str	r3, [r4, #32]
   b7acc:	e7b9      	b.n	b7a42 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b7ace:	6123      	str	r3, [r4, #16]
   b7ad0:	e7b7      	b.n	b7a42 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b7ad2:	2201      	movs	r2, #1
   b7ad4:	e7cc      	b.n	b7a70 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b7ad6:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b7ada:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b7adc:	d31b      	bcc.n	b7b16 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b7ade:	f890 c004 	ldrb.w	ip, [r0, #4]
   b7ae2:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b7ae6:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b7ae8:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b7aec:	4573      	cmp	r3, lr
   b7aee:	bf28      	it	cs
   b7af0:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7af2:	4291      	cmp	r1, r2
      n = 512*nb;
   b7af4:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7af8:	d307      	bcc.n	b7b0a <_ZN7FatFile5writeEPKvj+0x126>
   b7afa:	441a      	add	r2, r3
   b7afc:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b7afe:	bf82      	ittt	hi
   b7b00:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b7b04:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7b08:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b7b0a:	68a5      	ldr	r5, [r4, #8]
   b7b0c:	464a      	mov	r2, r9
   b7b0e:	6828      	ldr	r0, [r5, #0]
   b7b10:	f000 ffd1 	bl	b8ab6 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b7b14:	e7bd      	b.n	b7a92 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b7b16:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b7b18:	bf02      	ittt	eq
   b7b1a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b7b1e:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7b22:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b7b24:	68a3      	ldr	r3, [r4, #8]
   b7b26:	464a      	mov	r2, r9
   b7b28:	6818      	ldr	r0, [r3, #0]
   b7b2a:	f000 ff4e 	bl	b89ca <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b7b2e:	2800      	cmp	r0, #0
   b7b30:	d0bc      	beq.n	b7aac <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b7b32:	f44f 7600 	mov.w	r6, #512	; 0x200
   b7b36:	e7ad      	b.n	b7a94 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b7b38:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b7b3a:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b7b3c:	42b2      	cmp	r2, r6
   b7b3e:	d204      	bcs.n	b7b4a <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b7b40:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b7b42:	f043 0304 	orr.w	r3, r3, #4
   b7b46:	70a3      	strb	r3, [r4, #2]
   b7b48:	e003      	b.n	b7b52 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b7b4a:	4a08      	ldr	r2, [pc, #32]	; (b7b6c <_ZN7FatFile5writeEPKvj+0x188>)
   b7b4c:	6812      	ldr	r2, [r2, #0]
   b7b4e:	2a00      	cmp	r2, #0
   b7b50:	d1f7      	bne.n	b7b42 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b7b52:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b7b56:	2b00      	cmp	r3, #0
   b7b58:	db02      	blt.n	b7b60 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b7b5a:	4638      	mov	r0, r7
}
   b7b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b7b60:	4620      	mov	r0, r4
   b7b62:	f7ff fea5 	bl	b78b0 <_ZN7FatFile4syncEv>
   b7b66:	2800      	cmp	r0, #0
   b7b68:	d1f7      	bne.n	b7b5a <_ZN7FatFile5writeEPKvj+0x176>
   b7b6a:	e79f      	b.n	b7aac <_ZN7FatFile5writeEPKvj+0xc8>
   b7b6c:	2003e63c 	.word	0x2003e63c

000b7b70 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b7b70:	2904      	cmp	r1, #4
   b7b72:	d804      	bhi.n	b7b7e <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b7b74:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b7b78:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b7b7c:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b7b7e:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b7b80:	bf9b      	ittet	ls
   b7b82:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b7b86:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b7b8a:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b7b8c:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b7b8e:	bf84      	itt	hi
   b7b90:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b7b94:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b7b96:	4770      	bx	lr

000b7b98 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b7b98:	1e41      	subs	r1, r0, #1
   b7b9a:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b7b9e:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b7ba0:	0842      	lsrs	r2, r0, #1
   b7ba2:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b7ba6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7baa:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b7bae:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b7bb0:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b7bb2:	d1f5      	bne.n	b7ba0 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b7bb4:	4770      	bx	lr

000b7bb6 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b7bb6:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b7bb8:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b7bba:	4604      	mov	r4, r0
   b7bbc:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b7bbe:	b923      	cbnz	r3, b7bca <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b7bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b7bc4:	6889      	ldr	r1, [r1, #8]
   b7bc6:	f7ff bce0 	b.w	b758a <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b7bca:	2224      	movs	r2, #36	; 0x24
   b7bcc:	2100      	movs	r1, #0
   b7bce:	f007 f99a 	bl	bef06 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b7bd2:	2310      	movs	r3, #16
  m_flags = F_READ;
   b7bd4:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b7bd6:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b7bd8:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b7bda:	68ab      	ldr	r3, [r5, #8]
   b7bdc:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b7bde:	68eb      	ldr	r3, [r5, #12]
   b7be0:	6223      	str	r3, [r4, #32]
}
   b7be2:	bd38      	pop	{r3, r4, r5, pc}

000b7be4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b7be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7be8:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b7bea:	f810 3b01 	ldrb.w	r3, [r0], #1
   b7bee:	2b20      	cmp	r3, #32
   b7bf0:	d0fa      	beq.n	b7be8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b7bf2:	4d6a      	ldr	r5, [pc, #424]	; (b7d9c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b7bf4:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b7bf6:	2400      	movs	r4, #0
    c = path[len];
   b7bf8:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b7bfa:	b1c3      	cbz	r3, b7c2e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b7bfc:	2b2f      	cmp	r3, #47	; 0x2f
   b7bfe:	d016      	beq.n	b7c2e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b7c00:	2b5c      	cmp	r3, #92	; 0x5c
   b7c02:	d102      	bne.n	b7c0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b7c04:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b7c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b7c0a:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b7c0e:	b2c0      	uxtb	r0, r0
   b7c10:	281d      	cmp	r0, #29
   b7c12:	d803      	bhi.n	b7c1c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b7c14:	fa25 f000 	lsr.w	r0, r5, r0
   b7c18:	07c0      	lsls	r0, r0, #31
   b7c1a:	d4f3      	bmi.n	b7c04 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b7c1c:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b7c20:	283c      	cmp	r0, #60	; 0x3c
   b7c22:	d0ef      	beq.n	b7c04 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b7c24:	3b20      	subs	r3, #32
   b7c26:	2b5e      	cmp	r3, #94	; 0x5e
   b7c28:	d8ec      	bhi.n	b7c04 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b7c2a:	3401      	adds	r4, #1
    c = path[len];
   b7c2c:	e7e4      	b.n	b7bf8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b7c2e:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b7c30:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b7c32:	4607      	mov	r7, r0
   b7c34:	f810 5b01 	ldrb.w	r5, [r0], #1
   b7c38:	2d20      	cmp	r5, #32
   b7c3a:	d0fa      	beq.n	b7c32 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b7c3c:	2d2f      	cmp	r5, #47	; 0x2f
   b7c3e:	d0f8      	beq.n	b7c32 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b7c40:	6017      	str	r7, [r2, #0]
  while (len) {
   b7c42:	b14c      	cbz	r4, b7c58 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b7c44:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b7c48:	2a2e      	cmp	r2, #46	; 0x2e
   b7c4a:	d001      	beq.n	b7c50 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b7c4c:	2a20      	cmp	r2, #32
   b7c4e:	d101      	bne.n	b7c54 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b7c50:	3c01      	subs	r4, #1
  while (len) {
   b7c52:	e7f6      	b.n	b7c42 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b7c54:	2cff      	cmp	r4, #255	; 0xff
   b7c56:	dcd5      	bgt.n	b7c04 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b7c58:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b7c5c:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b7c60:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b7c62:	f8c1 300d 	str.w	r3, [r1, #13]
   b7c66:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b7c68:	f04f 0800 	mov.w	r8, #0
   b7c6c:	f816 3008 	ldrb.w	r3, [r6, r8]
   b7c70:	2b2e      	cmp	r3, #46	; 0x2e
   b7c72:	d001      	beq.n	b7c78 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b7c74:	2b20      	cmp	r3, #32
   b7c76:	d102      	bne.n	b7c7e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b7c78:	f108 0801 	add.w	r8, r8, #1
   b7c7c:	e7f6      	b.n	b7c6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b7c7e:	fab8 f088 	clz	r0, r8
   b7c82:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b7c84:	1e65      	subs	r5, r4, #1
   b7c86:	1c6b      	adds	r3, r5, #1
   b7c88:	d002      	beq.n	b7c90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b7c8a:	5d73      	ldrb	r3, [r6, r5]
   b7c8c:	2b2e      	cmp	r3, #46	; 0x2e
   b7c8e:	d114      	bne.n	b7cba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b7c90:	f04f 0900 	mov.w	r9, #0
   b7c94:	2707      	movs	r7, #7
   b7c96:	464a      	mov	r2, r9
   b7c98:	46ca      	mov	sl, r9
   b7c9a:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b7c9e:	45a0      	cmp	r8, r4
   b7ca0:	da68      	bge.n	b7d74 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b7ca2:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b7ca6:	2b20      	cmp	r3, #32
   b7ca8:	d003      	beq.n	b7cb2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b7caa:	2b2e      	cmp	r3, #46	; 0x2e
   b7cac:	d107      	bne.n	b7cbe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b7cae:	45a8      	cmp	r8, r5
   b7cb0:	d012      	beq.n	b7cd8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b7cb2:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b7cb4:	f108 0801 	add.w	r8, r8, #1
   b7cb8:	e7f1      	b.n	b7c9e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b7cba:	3d01      	subs	r5, #1
   b7cbc:	e7e3      	b.n	b7c86 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b7cbe:	2b22      	cmp	r3, #34	; 0x22
   b7cc0:	d008      	beq.n	b7cd4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b7cc2:	2b7c      	cmp	r3, #124	; 0x7c
   b7cc4:	d006      	beq.n	b7cd4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b7cc6:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b7cca:	f1bc 0f05 	cmp.w	ip, #5
   b7cce:	d80a      	bhi.n	b7ce6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b7cd0:	2b2d      	cmp	r3, #45	; 0x2d
   b7cd2:	d012      	beq.n	b7cfa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b7cd4:	45a8      	cmp	r8, r5
   b7cd6:	d15b      	bne.n	b7d90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b7cd8:	2f0a      	cmp	r7, #10
   b7cda:	d04a      	beq.n	b7d72 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b7cdc:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b7cde:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b7ce0:	f04f 0e10 	mov.w	lr, #16
   b7ce4:	e7e6      	b.n	b7cb4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b7ce6:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b7cea:	f1bc 0f05 	cmp.w	ip, #5
   b7cee:	d9f1      	bls.n	b7cd4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b7cf0:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b7cf4:	f1bc 0f02 	cmp.w	ip, #2
   b7cf8:	d9ec      	bls.n	b7cd4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b7cfa:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b7cfe:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b7d02:	d8e7      	bhi.n	b7cd4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b7d04:	45a8      	cmp	r8, r5
   b7d06:	d0e7      	beq.n	b7cd8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b7d08:	42ba      	cmp	r2, r7
   b7d0a:	d830      	bhi.n	b7d6e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b7d0c:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b7d10:	f1bc 0f19 	cmp.w	ip, #25
   b7d14:	d81a      	bhi.n	b7d4c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b7d16:	3b20      	subs	r3, #32
        lc |= bit;
   b7d18:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b7d1c:	b2db      	uxtb	r3, r3
        lc |= bit;
   b7d1e:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b7d22:	f102 0c01 	add.w	ip, r2, #1
   b7d26:	fa5f fc8c 	uxtb.w	ip, ip
   b7d2a:	440a      	add	r2, r1
      if (i < 7) {
   b7d2c:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b7d30:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b7d32:	d801      	bhi.n	b7d38 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b7d34:	f881 c00c 	strb.w	ip, [r1, #12]
   b7d38:	4662      	mov	r2, ip
   b7d3a:	e7bb      	b.n	b7cb4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b7d3c:	45a8      	cmp	r8, r5
   b7d3e:	dc18      	bgt.n	b7d72 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b7d40:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b7d42:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b7d44:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b7d46:	f04f 0e10 	mov.w	lr, #16
   b7d4a:	e7b2      	b.n	b7cb2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b7d4c:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b7d50:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b7d54:	bf98      	it	ls
   b7d56:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b7d5a:	e7e2      	b.n	b7d22 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b7d5c:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b7d5e:	2001      	movs	r0, #1
   b7d60:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b7d62:	4419      	add	r1, r3
   b7d64:	237e      	movs	r3, #126	; 0x7e
   b7d66:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b7d68:	2331      	movs	r3, #49	; 0x31
   b7d6a:	738b      	strb	r3, [r1, #14]
   b7d6c:	e74b      	b.n	b7c06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b7d6e:	2f0a      	cmp	r7, #10
   b7d70:	d1e4      	bne.n	b7d3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b7d72:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b7d74:	7b4b      	ldrb	r3, [r1, #13]
   b7d76:	2b20      	cmp	r3, #32
   b7d78:	f43f af44 	beq.w	b7c04 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b7d7c:	2800      	cmp	r0, #0
   b7d7e:	d0ed      	beq.n	b7d5c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b7d80:	ea1a 0f09 	tst.w	sl, r9
   b7d84:	bf18      	it	ne
   b7d86:	f04f 0902 	movne.w	r9, #2
   b7d8a:	f881 9000 	strb.w	r9, [r1]
   b7d8e:	e73a      	b.n	b7c06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b7d90:	42ba      	cmp	r2, r7
   b7d92:	d8ec      	bhi.n	b7d6e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b7d94:	2000      	movs	r0, #0
      c = '_';
   b7d96:	235f      	movs	r3, #95	; 0x5f
   b7d98:	e7c3      	b.n	b7d22 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b7d9a:	bf00      	nop
   b7d9c:	31000101 	.word	0x31000101

000b7da0 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   b7da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7da4:	b08a      	sub	sp, #40	; 0x28
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b7da6:	2300      	movs	r3, #0
   b7da8:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7daa:	7803      	ldrb	r3, [r0, #0]
   b7dac:	0719      	lsls	r1, r3, #28
bool FatFile::remove() {
   b7dae:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7db0:	d50a      	bpl.n	b7dc8 <_ZN7FatFile6removeEv+0x28>
   b7db2:	7883      	ldrb	r3, [r0, #2]
   b7db4:	079a      	lsls	r2, r3, #30
   b7db6:	d507      	bpl.n	b7dc8 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b7db8:	6a01      	ldr	r1, [r0, #32]
   b7dba:	b939      	cbnz	r1, b7dcc <_ZN7FatFile6removeEv+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b7dbc:	2101      	movs	r1, #1
   b7dbe:	4620      	mov	r0, r4
   b7dc0:	f7ff fbd4 	bl	b756c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b7dc4:	4605      	mov	r5, r0
   b7dc6:	b938      	cbnz	r0, b7dd8 <_ZN7FatFile6removeEv+0x38>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   b7dc8:	2000      	movs	r0, #0
   b7dca:	e048      	b.n	b7e5e <_ZN7FatFile6removeEv+0xbe>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b7dcc:	6880      	ldr	r0, [r0, #8]
   b7dce:	f000 fb58 	bl	b8482 <_ZN9FatVolume9freeChainEm>
   b7dd2:	2800      	cmp	r0, #0
   b7dd4:	d1f2      	bne.n	b7dbc <_ZN7FatFile6removeEv+0x1c>
   b7dd6:	e7f7      	b.n	b7dc8 <_ZN7FatFile6removeEv+0x28>
  chksum = lfnChecksum(dir->name);
   b7dd8:	f7ff fede 	bl	b7b98 <_ZN7FatFile11lfnChecksumEPh>
  dir->name[0] = DIR_NAME_DELETED;
   b7ddc:	27e5      	movs	r7, #229	; 0xe5
   b7dde:	702f      	strb	r7, [r5, #0]
  m_attr = FILE_ATTR_CLOSED;
   b7de0:	2300      	movs	r3, #0
  chksum = lfnChecksum(dir->name);
   b7de2:	4606      	mov	r6, r0
  m_attr = FILE_ATTR_CLOSED;
   b7de4:	7023      	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
   b7de6:	68a0      	ldr	r0, [r4, #8]
   b7de8:	f7ff fb6a 	bl	b74c0 <_ZN9FatVolume9cacheSyncEv>
   b7dec:	2800      	cmp	r0, #0
   b7dee:	d0eb      	beq.n	b7dc8 <_ZN7FatFile6removeEv+0x28>
  if (!isLFN()) {
   b7df0:	78e3      	ldrb	r3, [r4, #3]
   b7df2:	2b00      	cmp	r3, #0
   b7df4:	d033      	beq.n	b7e5e <_ZN7FatFile6removeEv+0xbe>
  if (!dirFile.openCluster(this)) {
   b7df6:	4621      	mov	r1, r4
   b7df8:	a801      	add	r0, sp, #4
   b7dfa:	f7ff fedc 	bl	b7bb6 <_ZN7FatFile11openClusterEPS_>
   b7dfe:	2800      	cmp	r0, #0
   b7e00:	d0e2      	beq.n	b7dc8 <_ZN7FatFile6removeEv+0x28>
   b7e02:	2501      	movs	r5, #1
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   b7e04:	78e3      	ldrb	r3, [r4, #3]
   b7e06:	fa5f f885 	uxtb.w	r8, r5
   b7e0a:	4543      	cmp	r3, r8
   b7e0c:	d3dc      	bcc.n	b7dc8 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b7e0e:	88a1      	ldrh	r1, [r4, #4]
   b7e10:	1b49      	subs	r1, r1, r5
   b7e12:	0149      	lsls	r1, r1, #5
   b7e14:	a801      	add	r0, sp, #4
   b7e16:	f7ff fc9e 	bl	b7756 <_ZN7FatFile7seekSetEm>
   b7e1a:	2800      	cmp	r0, #0
   b7e1c:	d0d4      	beq.n	b7dc8 <_ZN7FatFile6removeEv+0x28>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b7e1e:	2100      	movs	r1, #0
   b7e20:	a801      	add	r0, sp, #4
   b7e22:	f7ff fc79 	bl	b7718 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b7e26:	2800      	cmp	r0, #0
   b7e28:	d0ce      	beq.n	b7dc8 <_ZN7FatFile6removeEv+0x28>
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b7e2a:	7ac3      	ldrb	r3, [r0, #11]
   b7e2c:	2b0f      	cmp	r3, #15
   b7e2e:	d1cb      	bne.n	b7dc8 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b7e30:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b7e32:	f002 031f 	and.w	r3, r2, #31
   b7e36:	4543      	cmp	r3, r8
   b7e38:	d1c6      	bne.n	b7dc8 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b7e3a:	7b43      	ldrb	r3, [r0, #13]
   b7e3c:	42b3      	cmp	r3, r6
   b7e3e:	d1c3      	bne.n	b7dc8 <_ZN7FatFile6removeEv+0x28>
    ldir->ord = DIR_NAME_DELETED;
   b7e40:	7007      	strb	r7, [r0, #0]
    m_vol->cacheDirty();
   b7e42:	68a1      	ldr	r1, [r4, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b7e44:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   b7e48:	f043 0301 	orr.w	r3, r3, #1
   b7e4c:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   b7e50:	0653      	lsls	r3, r2, #25
   b7e52:	f105 0501 	add.w	r5, r5, #1
   b7e56:	d5d5      	bpl.n	b7e04 <_ZN7FatFile6removeEv+0x64>
      if (!m_vol->cacheSync()) {
   b7e58:	68a0      	ldr	r0, [r4, #8]
   b7e5a:	f7ff fb31 	bl	b74c0 <_ZN9FatVolume9cacheSyncEv>
}
   b7e5e:	b00a      	add	sp, #40	; 0x28
   b7e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7e64 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b7e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b7e68:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b7e6c:	4606      	mov	r6, r0
   b7e6e:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b7e70:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b7e72:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b7e74:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b7e78:	6861      	ldr	r1, [r4, #4]
   b7e7a:	68a2      	ldr	r2, [r4, #8]
   b7e7c:	186b      	adds	r3, r5, r1
   b7e7e:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b7e80:	4411      	add	r1, r2
   b7e82:	4291      	cmp	r1, r2
   b7e84:	d006      	beq.n	b7e94 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b7e86:	f812 0b01 	ldrb.w	r0, [r2], #1
   b7e8a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b7e8e:	4043      	eors	r3, r0
   b7e90:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b7e92:	e7f6      	b.n	b7e82 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b7e94:	f1b9 0f03 	cmp.w	r9, #3
   b7e98:	bf28      	it	cs
   b7e9a:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7e9e:	f109 0204 	add.w	r2, r9, #4
   b7ea2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b7ea4:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7ea8:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7eaa:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7eac:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7eae:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7eb0:	bf94      	ite	ls
   b7eb2:	3130      	addls	r1, #48	; 0x30
   b7eb4:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7eb6:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7eb8:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b7eba:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7ebe:	d1f1      	bne.n	b7ea4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b7ec0:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b7ec4:	2100      	movs	r1, #0
   b7ec6:	735f      	strb	r7, [r3, #13]
   b7ec8:	4630      	mov	r0, r6
   b7eca:	f7ff fc44 	bl	b7756 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b7ece:	2101      	movs	r1, #1
   b7ed0:	4630      	mov	r0, r6
   b7ed2:	f7ff fc21 	bl	b7718 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b7ed6:	4601      	mov	r1, r0
   b7ed8:	b928      	cbnz	r0, b7ee6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b7eda:	7870      	ldrb	r0, [r6, #1]
   b7edc:	fab0 f080 	clz	r0, r0
   b7ee0:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b7ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b7ee6:	7803      	ldrb	r3, [r0, #0]
   b7ee8:	b16b      	cbz	r3, b7f06 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b7eea:	7ac3      	ldrb	r3, [r0, #11]
   b7eec:	071b      	lsls	r3, r3, #28
   b7eee:	d4ee      	bmi.n	b7ece <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b7ef0:	220b      	movs	r2, #11
   b7ef2:	4640      	mov	r0, r8
   b7ef4:	f006 ffcf 	bl	bee96 <memcmp>
   b7ef8:	2800      	cmp	r0, #0
   b7efa:	d1e8      	bne.n	b7ece <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b7efc:	3501      	adds	r5, #1
   b7efe:	b2ad      	uxth	r5, r5
   b7f00:	2d64      	cmp	r5, #100	; 0x64
   b7f02:	d1b9      	bne.n	b7e78 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b7f04:	e7ed      	b.n	b7ee2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b7f06:	2001      	movs	r0, #1
   b7f08:	e7eb      	b.n	b7ee2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b7f0c <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b7f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7f10:	ed2d 8b02 	vpush	{d8}
   b7f14:	b08b      	sub	sp, #44	; 0x2c
   b7f16:	460d      	mov	r5, r1
   b7f18:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b7f1a:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b7f1c:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b7f1e:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b7f22:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b7f24:	d105      	bne.n	b7f32 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b7f26:	2000      	movs	r0, #0
}
   b7f28:	b00b      	add	sp, #44	; 0x2c
   b7f2a:	ecbd 8b02 	vpop	{d8}
   b7f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b7f32:	9b07      	ldr	r3, [sp, #28]
   b7f34:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b7f36:	2b00      	cmp	r3, #0
   b7f38:	d1f5      	bne.n	b7f26 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b7f3a:	6853      	ldr	r3, [r2, #4]
   b7f3c:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b7f3e:	7813      	ldrb	r3, [r2, #0]
   b7f40:	079c      	lsls	r4, r3, #30
   b7f42:	bf1f      	itttt	ne
   b7f44:	9b05      	ldrne	r3, [sp, #20]
   b7f46:	330c      	addne	r3, #12
   b7f48:	220d      	movne	r2, #13
   b7f4a:	fbb3 f3f2 	udivne	r3, r3, r2
   b7f4e:	bf1a      	itte	ne
   b7f50:	3301      	addne	r3, #1
   b7f52:	b2db      	uxtbne	r3, r3
   b7f54:	2301      	moveq	r3, #1
    seekSet(0);
   b7f56:	2100      	movs	r1, #0
   b7f58:	4628      	mov	r0, r5
   b7f5a:	9303      	str	r3, [sp, #12]
   b7f5c:	f7ff fbfb 	bl	b7756 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b7f60:	f107 030d 	add.w	r3, r7, #13
  }
   b7f64:	f04f 0b00 	mov.w	fp, #0
   b7f68:	ee08 3a10 	vmov	s16, r3
   b7f6c:	46da      	mov	sl, fp
   b7f6e:	465c      	mov	r4, fp
   b7f70:	465e      	mov	r6, fp
   b7f72:	f8cd b010 	str.w	fp, [sp, #16]
   b7f76:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b7f78:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b7f7a:	2101      	movs	r1, #1
   b7f7c:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b7f7e:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b7f82:	f7ff fbc9 	bl	b7718 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b7f86:	4603      	mov	r3, r0
   b7f88:	2800      	cmp	r0, #0
   b7f8a:	d171      	bne.n	b8070 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b7f8c:	786b      	ldrb	r3, [r5, #1]
   b7f8e:	2b00      	cmp	r3, #0
   b7f90:	d1c9      	bne.n	b7f26 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b7f92:	9b06      	ldr	r3, [sp, #24]
   b7f94:	059a      	lsls	r2, r3, #22
   b7f96:	d5c6      	bpl.n	b7f26 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b7f98:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b7f9c:	3b01      	subs	r3, #1
   b7f9e:	2b01      	cmp	r3, #1
   b7fa0:	d8c1      	bhi.n	b7f26 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b7fa2:	9b04      	ldr	r3, [sp, #16]
   b7fa4:	2c00      	cmp	r4, #0
   b7fa6:	bf08      	it	eq
   b7fa8:	4643      	moveq	r3, r8
   b7faa:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b7fac:	9b03      	ldr	r3, [sp, #12]
   b7fae:	429c      	cmp	r4, r3
   b7fb0:	f0c0 80f1 	bcc.w	b8196 <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b7fb4:	f1b9 0f00 	cmp.w	r9, #0
   b7fb8:	f040 810a 	bne.w	b81d0 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b7fbc:	9b04      	ldr	r3, [sp, #16]
   b7fbe:	4628      	mov	r0, r5
   b7fc0:	0159      	lsls	r1, r3, #5
   b7fc2:	f7ff fbc8 	bl	b7756 <_ZN7FatFile7seekSetEm>
   b7fc6:	2800      	cmp	r0, #0
   b7fc8:	d0ad      	beq.n	b7f26 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b7fca:	9b03      	ldr	r3, [sp, #12]
   b7fcc:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b7fd0:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b7fd4:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b7fd6:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b7fda:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b7fde:	2e00      	cmp	r6, #0
   b7fe0:	f000 810d 	beq.w	b81fe <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b7fe4:	2100      	movs	r1, #0
   b7fe6:	4628      	mov	r0, r5
   b7fe8:	f7ff fb96 	bl	b7718 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b7fec:	4604      	mov	r4, r0
   b7fee:	2800      	cmp	r0, #0
   b7ff0:	d099      	beq.n	b7f26 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b7ff2:	68aa      	ldr	r2, [r5, #8]
   b7ff4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b7ff8:	454e      	cmp	r6, r9
   b7ffa:	f043 0301 	orr.w	r3, r3, #1
   b7ffe:	bf0c      	ite	eq
   b8000:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b8004:	46b3      	movne	fp, r6
   b8006:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b800a:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b800e:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b8012:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b8016:	f107 000d 	add.w	r0, r7, #13
   b801a:	f7ff fdbd 	bl	b7b98 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b801e:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b8022:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b8024:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b8028:	f00b 031f 	and.w	r3, fp, #31
   b802c:	220d      	movs	r2, #13
   b802e:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b8030:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b8034:	4353      	muls	r3, r2
   b8036:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b8038:	9905      	ldr	r1, [sp, #20]
   b803a:	4299      	cmp	r1, r3
   b803c:	f240 80d0 	bls.w	b81e0 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b8040:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b8044:	2a04      	cmp	r2, #4
   b8046:	fa5f fe82 	uxtb.w	lr, r2
   b804a:	f102 0001 	add.w	r0, r2, #1
   b804e:	f200 80cd 	bhi.w	b81ec <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b8052:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b8056:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b805a:	280d      	cmp	r0, #13
   b805c:	f103 0301 	add.w	r3, r3, #1
   b8060:	4602      	mov	r2, r0
   b8062:	d1e9      	bne.n	b8038 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b8064:	3e01      	subs	r6, #1
   b8066:	b2f6      	uxtb	r6, r6
   b8068:	e7b9      	b.n	b7fde <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b806a:	f04f 0901 	mov.w	r9, #1
   b806e:	e783      	b.n	b7f78 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b8070:	7802      	ldrb	r2, [r0, #0]
   b8072:	2ae5      	cmp	r2, #229	; 0xe5
   b8074:	d000      	beq.n	b8078 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b8076:	b97a      	cbnz	r2, b8098 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b8078:	9904      	ldr	r1, [sp, #16]
   b807a:	2c00      	cmp	r4, #0
   b807c:	bf08      	it	eq
   b807e:	4641      	moveq	r1, r8
   b8080:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b8082:	9903      	ldr	r1, [sp, #12]
   b8084:	428c      	cmp	r4, r1
        freeFound++;
   b8086:	bf3c      	itt	cc
   b8088:	3401      	addcc	r4, #1
   b808a:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b808c:	2a00      	cmp	r2, #0
   b808e:	d080      	beq.n	b7f92 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b8090:	2ae5      	cmp	r2, #229	; 0xe5
   b8092:	d105      	bne.n	b80a0 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b8094:	2600      	movs	r6, #0
   b8096:	e76f      	b.n	b7f78 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b8098:	9903      	ldr	r1, [sp, #12]
   b809a:	428c      	cmp	r4, r1
   b809c:	bf38      	it	cc
   b809e:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b80a0:	2a2e      	cmp	r2, #46	; 0x2e
   b80a2:	d0f7      	beq.n	b8094 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b80a4:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b80a6:	290f      	cmp	r1, #15
   b80a8:	d14a      	bne.n	b8140 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b80aa:	bb16      	cbnz	r6, b80f2 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b80ac:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b80b0:	f43f af62 	beq.w	b7f78 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b80b4:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b80b8:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b80bc:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b80be:	220d      	movs	r2, #13
   b80c0:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b80c4:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b80c8:	9a05      	ldr	r2, [sp, #20]
   b80ca:	4542      	cmp	r2, r8
   b80cc:	d9e2      	bls.n	b8094 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b80ce:	eba2 0208 	sub.w	r2, r2, r8
   b80d2:	9208      	str	r2, [sp, #32]
   b80d4:	2200      	movs	r2, #0
   b80d6:	eb02 0108 	add.w	r1, r2, r8
   b80da:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b80dc:	4618      	mov	r0, r3
   b80de:	b2d1      	uxtb	r1, r2
   b80e0:	f7ff fd46 	bl	b7b70 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b80e4:	9908      	ldr	r1, [sp, #32]
   b80e6:	428a      	cmp	r2, r1
   b80e8:	d10d      	bne.n	b8106 <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b80ea:	2800      	cmp	r0, #0
   b80ec:	bf18      	it	ne
   b80ee:	2600      	movne	r6, #0
   b80f0:	e742      	b.n	b7f78 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b80f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b80f6:	fa5f fa8a 	uxtb.w	sl, sl
   b80fa:	4552      	cmp	r2, sl
   b80fc:	d1ca      	bne.n	b8094 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b80fe:	7b5a      	ldrb	r2, [r3, #13]
   b8100:	455a      	cmp	r2, fp
   b8102:	d0dc      	beq.n	b80be <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b8104:	e7c6      	b.n	b8094 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b8106:	28ff      	cmp	r0, #255	; 0xff
   b8108:	d8c4      	bhi.n	b8094 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b810a:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b810e:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b8112:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b8114:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b8116:	bf9c      	itt	ls
   b8118:	f10e 0020 	addls.w	r0, lr, #32
   b811c:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b8120:	4608      	mov	r0, r1
   b8122:	9909      	ldr	r1, [sp, #36]	; 0x24
   b8124:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b8126:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b812a:	f1bc 0f19 	cmp.w	ip, #25
   b812e:	bf9c      	itt	ls
   b8130:	3120      	addls	r1, #32
   b8132:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b8134:	4571      	cmp	r1, lr
   b8136:	d1ad      	bne.n	b8094 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b8138:	3201      	adds	r2, #1
   b813a:	2a0d      	cmp	r2, #13
   b813c:	d1cb      	bne.n	b80d6 <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b813e:	e71b      	b.n	b7f78 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b8140:	0708      	lsls	r0, r1, #28
   b8142:	d4a7      	bmi.n	b8094 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b8144:	b15e      	cbz	r6, b815e <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b8146:	f1ba 0f01 	cmp.w	sl, #1
   b814a:	f47f aeec 	bne.w	b7f26 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b814e:	4618      	mov	r0, r3
   b8150:	f7ff fd22 	bl	b7b98 <_ZN7FatFile11lfnChecksumEPh>
   b8154:	4558      	cmp	r0, fp
   b8156:	f47f aee6 	bne.w	b7f26 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b815a:	46b1      	mov	r9, r6
   b815c:	e00e      	b.n	b817c <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b815e:	ee18 1a10 	vmov	r1, s16
   b8162:	220b      	movs	r2, #11
   b8164:	4618      	mov	r0, r3
   b8166:	f006 fe96 	bl	bee96 <memcmp>
   b816a:	2800      	cmp	r0, #0
   b816c:	f47f af04 	bne.w	b7f78 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b8170:	f897 9000 	ldrb.w	r9, [r7]
   b8174:	f019 0901 	ands.w	r9, r9, #1
   b8178:	f47f af77 	bne.w	b806a <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b817c:	9b06      	ldr	r3, [sp, #24]
   b817e:	0519      	lsls	r1, r3, #20
   b8180:	f53f aed1 	bmi.w	b7f26 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b8184:	9b06      	ldr	r3, [sp, #24]
   b8186:	9807      	ldr	r0, [sp, #28]
   b8188:	f8cd 9000 	str.w	r9, [sp]
   b818c:	4642      	mov	r2, r8
   b818e:	4629      	mov	r1, r5
   b8190:	f7ff fb24 	bl	b77dc <_ZN7FatFile15openCachedEntryEPS_tih>
   b8194:	e6c8      	b.n	b7f28 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b8196:	2100      	movs	r1, #0
   b8198:	4628      	mov	r0, r5
   b819a:	f7ff fabd 	bl	b7718 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b819e:	b9a0      	cbnz	r0, b81ca <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b81a0:	786b      	ldrb	r3, [r5, #1]
   b81a2:	2b00      	cmp	r3, #0
   b81a4:	f47f aebf 	bne.w	b7f26 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b81a8:	4628      	mov	r0, r5
   b81aa:	f7ff f9a1 	bl	b74f0 <_ZN7FatFile13addDirClusterEv>
   b81ae:	2800      	cmp	r0, #0
   b81b0:	f43f aeb9 	beq.w	b7f26 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b81b4:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b81b6:	791b      	ldrb	r3, [r3, #4]
   b81b8:	2b01      	cmp	r3, #1
   b81ba:	f63f aefb 	bhi.w	b7fb4 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b81be:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b81c0:	3410      	adds	r4, #16
   b81c2:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b81c4:	42a3      	cmp	r3, r4
   b81c6:	d8ef      	bhi.n	b81a8 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b81c8:	e6f4      	b.n	b7fb4 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b81ca:	3401      	adds	r4, #1
   b81cc:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b81ce:	e6ed      	b.n	b7fac <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b81d0:	4639      	mov	r1, r7
   b81d2:	4628      	mov	r0, r5
   b81d4:	f7ff fe46 	bl	b7e64 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b81d8:	2800      	cmp	r0, #0
   b81da:	f47f aeef 	bne.w	b7fbc <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b81de:	e6a2      	b.n	b7f26 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b81e0:	bf14      	ite	ne
   b81e2:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b81e6:	2100      	moveq	r1, #0
   b81e8:	b289      	uxth	r1, r1
   b81ea:	e72b      	b.n	b8044 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b81ec:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b81f0:	bf94      	ite	ls
   b81f2:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b81f6:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b81fa:	8091      	strh	r1, [r2, #4]
   b81fc:	e72d      	b.n	b805a <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b81fe:	4631      	mov	r1, r6
   b8200:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b8202:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b8206:	f7ff fa87 	bl	b7718 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b820a:	4604      	mov	r4, r0
   b820c:	2800      	cmp	r0, #0
   b820e:	f43f ae8a 	beq.w	b7f26 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b8212:	2220      	movs	r2, #32
   b8214:	4631      	mov	r1, r6
   b8216:	f006 fe76 	bl	bef06 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b821a:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b821e:	6023      	str	r3, [r4, #0]
   b8220:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b8224:	6063      	str	r3, [r4, #4]
   b8226:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b822a:	8123      	strh	r3, [r4, #8]
   b822c:	7dfb      	ldrb	r3, [r7, #23]
   b822e:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b8230:	783b      	ldrb	r3, [r7, #0]
   b8232:	f003 0318 	and.w	r3, r3, #24
   b8236:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b8238:	4b0f      	ldr	r3, [pc, #60]	; (b8278 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b823a:	681b      	ldr	r3, [r3, #0]
   b823c:	b19b      	cbz	r3, b8266 <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b823e:	f104 010e 	add.w	r1, r4, #14
   b8242:	f104 0010 	add.w	r0, r4, #16
   b8246:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b8248:	8a23      	ldrh	r3, [r4, #16]
   b824a:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b824c:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b824e:	89e3      	ldrh	r3, [r4, #14]
   b8250:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b8252:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b8254:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b8258:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b825c:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b8260:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b8264:	e78e      	b.n	b8184 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b8266:	2321      	movs	r3, #33	; 0x21
   b8268:	7423      	strb	r3, [r4, #16]
   b826a:	2328      	movs	r3, #40	; 0x28
   b826c:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b826e:	2308      	movs	r3, #8
   b8270:	73a6      	strb	r6, [r4, #14]
   b8272:	73e3      	strb	r3, [r4, #15]
   b8274:	e7e8      	b.n	b8248 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b8276:	bf00      	nop
   b8278:	2003e63c 	.word	0x2003e63c

000b827c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b827c:	b513      	push	{r0, r1, r4, lr}
   b827e:	4604      	mov	r4, r0
    }
   b8280:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b8282:	b159      	cbz	r1, b829c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b8284:	9101      	str	r1, [sp, #4]
   b8286:	f006 fef2 	bl	bf06e <strlen>
   b828a:	6823      	ldr	r3, [r4, #0]
   b828c:	9901      	ldr	r1, [sp, #4]
   b828e:	68db      	ldr	r3, [r3, #12]
   b8290:	4602      	mov	r2, r0
   b8292:	4620      	mov	r0, r4
    }
   b8294:	b002      	add	sp, #8
   b8296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b829a:	4718      	bx	r3
    }
   b829c:	b002      	add	sp, #8
   b829e:	bd10      	pop	{r4, pc}

000b82a0 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b82a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b82a2:	7803      	ldrb	r3, [r0, #0]
   b82a4:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b82a6:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b82a8:	d520      	bpl.n	b82ec <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b82aa:	6843      	ldr	r3, [r0, #4]
   b82ac:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b82ae:	f100 020c 	add.w	r2, r0, #12
   b82b2:	6818      	ldr	r0, [r3, #0]
   b82b4:	9201      	str	r2, [sp, #4]
   b82b6:	f000 fb88 	bl	b89ca <_ZN9SdSpiCard10writeBlockEmPKh>
   b82ba:	9a01      	ldr	r2, [sp, #4]
   b82bc:	4605      	mov	r5, r0
   b82be:	b918      	cbnz	r0, b82c8 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b82c0:	2500      	movs	r5, #0
}
   b82c2:	4628      	mov	r0, r5
   b82c4:	b003      	add	sp, #12
   b82c6:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b82c8:	7823      	ldrb	r3, [r4, #0]
   b82ca:	079b      	lsls	r3, r3, #30
   b82cc:	d404      	bmi.n	b82d8 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b82ce:	7823      	ldrb	r3, [r4, #0]
   b82d0:	f023 0301 	bic.w	r3, r3, #1
   b82d4:	7023      	strb	r3, [r4, #0]
   b82d6:	e7f4      	b.n	b82c2 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b82d8:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b82dc:	6919      	ldr	r1, [r3, #16]
   b82de:	4401      	add	r1, r0
   b82e0:	6818      	ldr	r0, [r3, #0]
   b82e2:	f000 fb72 	bl	b89ca <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b82e6:	2800      	cmp	r0, #0
   b82e8:	d1f1      	bne.n	b82ce <_ZN8FatCache4syncEv+0x2e>
   b82ea:	e7e9      	b.n	b82c0 <_ZN8FatCache4syncEv+0x20>
  return true;
   b82ec:	2501      	movs	r5, #1
   b82ee:	e7e8      	b.n	b82c2 <_ZN8FatCache4syncEv+0x22>

000b82f0 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b82f0:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b82f2:	6883      	ldr	r3, [r0, #8]
   b82f4:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b82f6:	4604      	mov	r4, r0
   b82f8:	460e      	mov	r6, r1
   b82fa:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b82fc:	d009      	beq.n	b8312 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b82fe:	f7ff ffcf 	bl	b82a0 <_ZN8FatCache4syncEv>
   b8302:	b908      	cbnz	r0, b8308 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b8304:	2000      	movs	r0, #0
}
   b8306:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b8308:	076b      	lsls	r3, r5, #29
   b830a:	d50a      	bpl.n	b8322 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b830c:	2300      	movs	r3, #0
   b830e:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b8310:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b8312:	7822      	ldrb	r2, [r4, #0]
   b8314:	f005 0503 	and.w	r5, r5, #3
   b8318:	4620      	mov	r0, r4
   b831a:	4315      	orrs	r5, r2
   b831c:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b8320:	e7f1      	b.n	b8306 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b8322:	6863      	ldr	r3, [r4, #4]
   b8324:	f104 020c 	add.w	r2, r4, #12
   b8328:	6818      	ldr	r0, [r3, #0]
   b832a:	4631      	mov	r1, r6
   b832c:	f000 fac4 	bl	b88b8 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b8330:	2800      	cmp	r0, #0
   b8332:	d1eb      	bne.n	b830c <_ZN8FatCache4readEmh+0x1c>
   b8334:	e7e6      	b.n	b8304 <_ZN8FatCache4readEmh+0x14>

000b8336 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b8336:	7983      	ldrb	r3, [r0, #6]
   b8338:	6940      	ldr	r0, [r0, #20]
   b833a:	3902      	subs	r1, #2
   b833c:	4099      	lsls	r1, r3
}
   b833e:	4408      	add	r0, r1
   b8340:	4770      	bx	lr

000b8342 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b8342:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b8344:	b570      	push	{r4, r5, r6, lr}
   b8346:	4605      	mov	r5, r0
   b8348:	460c      	mov	r4, r1
   b834a:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b834c:	d802      	bhi.n	b8354 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b834e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b8352:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b8354:	69c3      	ldr	r3, [r0, #28]
   b8356:	428b      	cmp	r3, r1
   b8358:	d3f9      	bcc.n	b834e <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b835a:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b835c:	2b20      	cmp	r3, #32
   b835e:	d116      	bne.n	b838e <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b8360:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b8362:	2202      	movs	r2, #2
   b8364:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b8368:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b836c:	f7ff ffc0 	bl	b82f0 <_ZN8FatCache4readEmh>
    if (!pc) {
   b8370:	2800      	cmp	r0, #0
   b8372:	d0ec      	beq.n	b834e <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b8374:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b8378:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b837c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b8380:	69ea      	ldr	r2, [r5, #28]
   b8382:	429a      	cmp	r2, r3
  *value = next;
   b8384:	bf26      	itte	cs
   b8386:	6033      	strcs	r3, [r6, #0]
  return 1;
   b8388:	2001      	movcs	r0, #1
    return 0;
   b838a:	2000      	movcc	r0, #0
   b838c:	e7e1      	b.n	b8352 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b838e:	2b10      	cmp	r3, #16
   b8390:	d1dd      	bne.n	b834e <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b8392:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b8396:	6981      	ldr	r1, [r0, #24]
   b8398:	2202      	movs	r2, #2
   b839a:	4419      	add	r1, r3
   b839c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b83a0:	f7ff ffa6 	bl	b82f0 <_ZN8FatCache4readEmh>
    if (!pc) {
   b83a4:	2800      	cmp	r0, #0
   b83a6:	d0d2      	beq.n	b834e <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b83a8:	b2e4      	uxtb	r4, r4
   b83aa:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b83ae:	e7e7      	b.n	b8380 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b83b0 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b83b0:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b83b2:	b538      	push	{r3, r4, r5, lr}
   b83b4:	460c      	mov	r4, r1
   b83b6:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b83b8:	d801      	bhi.n	b83be <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b83ba:	2000      	movs	r0, #0
}
   b83bc:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b83be:	69c3      	ldr	r3, [r0, #28]
   b83c0:	428b      	cmp	r3, r1
   b83c2:	d3fa      	bcc.n	b83ba <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b83c4:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b83c6:	2b20      	cmp	r3, #32
   b83c8:	d10f      	bne.n	b83ea <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b83ca:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b83cc:	2203      	movs	r2, #3
   b83ce:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b83d2:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b83d6:	f7ff ff8b 	bl	b82f0 <_ZN8FatCache4readEmh>
    if (!pc) {
   b83da:	2800      	cmp	r0, #0
   b83dc:	d0ed      	beq.n	b83ba <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b83de:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b83e2:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b83e6:	2001      	movs	r0, #1
   b83e8:	e7e8      	b.n	b83bc <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b83ea:	2b10      	cmp	r3, #16
   b83ec:	d1e5      	bne.n	b83ba <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b83ee:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b83f2:	6981      	ldr	r1, [r0, #24]
   b83f4:	2203      	movs	r2, #3
   b83f6:	4419      	add	r1, r3
   b83f8:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b83fc:	f7ff ff78 	bl	b82f0 <_ZN8FatCache4readEmh>
    if (!pc) {
   b8400:	2800      	cmp	r0, #0
   b8402:	d0da      	beq.n	b83ba <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b8404:	b2e4      	uxtb	r4, r4
   b8406:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b840a:	e7ec      	b.n	b83e6 <_ZN9FatVolume6fatPutEmm+0x36>

000b840c <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b840c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b8410:	68c4      	ldr	r4, [r0, #12]
   b8412:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b8414:	4605      	mov	r5, r0
   b8416:	460e      	mov	r6, r1
   b8418:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b841a:	d301      	bcc.n	b8420 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b841c:	2701      	movs	r7, #1
   b841e:	e001      	b.n	b8424 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b8420:	460c      	mov	r4, r1
    setStart = false;
   b8422:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b8424:	69eb      	ldr	r3, [r5, #28]
    find++;
   b8426:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b8428:	42a3      	cmp	r3, r4
   b842a:	d202      	bcs.n	b8432 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b842c:	b9c7      	cbnz	r7, b8460 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b842e:	68ec      	ldr	r4, [r5, #12]
   b8430:	e7f4      	b.n	b841c <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b8432:	42a6      	cmp	r6, r4
   b8434:	d014      	beq.n	b8460 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b8436:	aa01      	add	r2, sp, #4
   b8438:	4621      	mov	r1, r4
   b843a:	4628      	mov	r0, r5
   b843c:	f7ff ff81 	bl	b8342 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b8440:	2800      	cmp	r0, #0
   b8442:	db0d      	blt.n	b8460 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b8444:	d0ee      	beq.n	b8424 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b8446:	9b01      	ldr	r3, [sp, #4]
   b8448:	2b00      	cmp	r3, #0
   b844a:	d1eb      	bne.n	b8424 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b844c:	b107      	cbz	r7, b8450 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b844e:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b8450:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b8454:	4621      	mov	r1, r4
   b8456:	4628      	mov	r0, r5
   b8458:	f7ff ffaa 	bl	b83b0 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b845c:	4607      	mov	r7, r0
   b845e:	b920      	cbnz	r0, b846a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b8460:	2700      	movs	r7, #0
}
   b8462:	4638      	mov	r0, r7
   b8464:	b002      	add	sp, #8
   b8466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b846a:	b916      	cbnz	r6, b8472 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b846c:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b8470:	e7f7      	b.n	b8462 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b8472:	4622      	mov	r2, r4
   b8474:	4631      	mov	r1, r6
   b8476:	4628      	mov	r0, r5
   b8478:	f7ff ff9a 	bl	b83b0 <_ZN9FatVolume6fatPutEmm>
   b847c:	2800      	cmp	r0, #0
   b847e:	d1f5      	bne.n	b846c <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b8480:	e7ee      	b.n	b8460 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b8482 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b8482:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8484:	4605      	mov	r5, r0
   b8486:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b8488:	aa01      	add	r2, sp, #4
   b848a:	4621      	mov	r1, r4
   b848c:	4628      	mov	r0, r5
   b848e:	f7ff ff58 	bl	b8342 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b8492:	1e06      	subs	r6, r0, #0
   b8494:	db10      	blt.n	b84b8 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b8496:	2200      	movs	r2, #0
   b8498:	4621      	mov	r1, r4
   b849a:	4628      	mov	r0, r5
   b849c:	f7ff ff88 	bl	b83b0 <_ZN9FatVolume6fatPutEmm>
   b84a0:	b150      	cbz	r0, b84b8 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b84a2:	68eb      	ldr	r3, [r5, #12]
   b84a4:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b84a6:	bf24      	itt	cs
   b84a8:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b84ac:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b84ae:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b84b0:	2e00      	cmp	r6, #0
   b84b2:	d1e9      	bne.n	b8488 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b84b4:	b002      	add	sp, #8
   b84b6:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b84b8:	2000      	movs	r0, #0
   b84ba:	e7fb      	b.n	b84b4 <_ZN9FatVolume9freeChainEm+0x32>

000b84bc <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b84bc:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b84be:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b84c0:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b84c2:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b84c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b84c8:	4604      	mov	r4, r0
  m_fatType = 0;
   b84ca:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b84cc:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b84d0:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b84d2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b84d6:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b84d8:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b84dc:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b84e0:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b84e4:	460d      	mov	r5, r1
   b84e6:	b1b9      	cbz	r1, b8518 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b84e8:	2904      	cmp	r1, #4
   b84ea:	d901      	bls.n	b84f0 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b84ec:	2000      	movs	r0, #0
}
   b84ee:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b84f0:	4611      	mov	r1, r2
   b84f2:	4630      	mov	r0, r6
   b84f4:	f7ff fefc 	bl	b82f0 <_ZN8FatCache4readEmh>
    if (!pc) {
   b84f8:	2800      	cmp	r0, #0
   b84fa:	d0f7      	beq.n	b84ec <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b84fc:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b8500:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b8504:	065b      	lsls	r3, r3, #25
   b8506:	d1f1      	bne.n	b84ec <_ZN9FatVolume4initEh+0x30>
   b8508:	f105 011b 	add.w	r1, r5, #27
   b850c:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b8510:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b8514:	2d00      	cmp	r5, #0
   b8516:	d0e9      	beq.n	b84ec <_ZN9FatVolume4initEh+0x30>
   b8518:	2200      	movs	r2, #0
   b851a:	4629      	mov	r1, r5
   b851c:	4630      	mov	r0, r6
   b851e:	f7ff fee7 	bl	b82f0 <_ZN8FatCache4readEmh>
  if (!pc) {
   b8522:	2800      	cmp	r0, #0
   b8524:	d0e2      	beq.n	b84ec <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b8526:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b852a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b852e:	d1dd      	bne.n	b84ec <_ZN9FatVolume4initEh+0x30>
   b8530:	7c03      	ldrb	r3, [r0, #16]
   b8532:	2b02      	cmp	r3, #2
   b8534:	d1da      	bne.n	b84ec <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b8536:	89c3      	ldrh	r3, [r0, #14]
   b8538:	2b00      	cmp	r3, #0
   b853a:	d0d7      	beq.n	b84ec <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b853c:	7b41      	ldrb	r1, [r0, #13]
   b853e:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b8540:	1e4b      	subs	r3, r1, #1
   b8542:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b8544:	2300      	movs	r3, #0
   b8546:	71a3      	strb	r3, [r4, #6]
   b8548:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b854a:	2301      	movs	r3, #1
   b854c:	4299      	cmp	r1, r3
   b854e:	d007      	beq.n	b8560 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b8550:	3e01      	subs	r6, #1
   b8552:	d0cb      	beq.n	b84ec <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b8554:	79a2      	ldrb	r2, [r4, #6]
   b8556:	005b      	lsls	r3, r3, #1
   b8558:	3201      	adds	r2, #1
   b855a:	b2db      	uxtb	r3, r3
   b855c:	71a2      	strb	r2, [r4, #6]
   b855e:	e7f5      	b.n	b854c <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b8560:	8ac1      	ldrh	r1, [r0, #22]
   b8562:	b901      	cbnz	r1, b8566 <_ZN9FatVolume4initEh+0xaa>
   b8564:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b8566:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b8568:	89c3      	ldrh	r3, [r0, #14]
   b856a:	442b      	add	r3, r5
   b856c:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b856e:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b8572:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b8574:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b8578:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b857a:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b857e:	0149      	lsls	r1, r1, #5
   b8580:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b8584:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b8588:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b858a:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b858e:	b902      	cbnz	r2, b8592 <_ZN9FatVolume4initEh+0xd6>
   b8590:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b8592:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b8594:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b8596:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b8598:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b859a:	1c4b      	adds	r3, r1, #1
   b859c:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b859e:	f640 73f4 	movw	r3, #4084	; 0xff4
   b85a2:	4299      	cmp	r1, r3
   b85a4:	d802      	bhi.n	b85ac <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b85a6:	230c      	movs	r3, #12
   b85a8:	71e3      	strb	r3, [r4, #7]
   b85aa:	e79f      	b.n	b84ec <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b85ac:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b85b0:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b85b2:	bf85      	ittet	hi
   b85b4:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b85b6:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b85b8:	2310      	movls	r3, #16
    m_fatType = 32;
   b85ba:	2320      	movhi	r3, #32
   b85bc:	71e3      	strb	r3, [r4, #7]
  return true;
   b85be:	2001      	movs	r0, #1
   b85c0:	e795      	b.n	b84ee <_ZN9FatVolume4initEh+0x32>

000b85c2 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b85c2:	f000 bacb 	b.w	b8b5c <_ZN14SdSpiAltDriver4sendEh>

000b85c6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b85c6:	f000 baae 	b.w	b8b26 <_ZN14SdSpiAltDriver7receiveEv>
	...

000b85cc <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b85cc:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b85ce:	4e0e      	ldr	r6, [pc, #56]	; (b8608 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b85d0:	460d      	mov	r5, r1
   b85d2:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b85d4:	f001 fc74 	bl	b9ec0 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b85d8:	6833      	ldr	r3, [r6, #0]
   b85da:	1ac0      	subs	r0, r0, r3
   b85dc:	4b0b      	ldr	r3, [pc, #44]	; (b860c <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b85de:	4298      	cmp	r0, r3
   b85e0:	d908      	bls.n	b85f4 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b85e2:	f001 fc75 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b85e6:	4b0a      	ldr	r3, [pc, #40]	; (b8610 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b85e8:	6018      	str	r0, [r3, #0]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b85ea:	f001 fe65 	bl	ba2b8 <spark_process>
   b85ee:	f001 fc67 	bl	b9ec0 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b85f2:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b85f4:	f001 fc6c 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b85f8:	b280      	uxth	r0, r0
   b85fa:	1b40      	subs	r0, r0, r5
}
   b85fc:	42a0      	cmp	r0, r4
   b85fe:	bfd4      	ite	le
   b8600:	2000      	movle	r0, #0
   b8602:	2001      	movgt	r0, #1
   b8604:	bd70      	pop	{r4, r5, r6, pc}
   b8606:	bf00      	nop
   b8608:	2003e644 	.word	0x2003e644
   b860c:	000186a0 	.word	0x000186a0
   b8610:	2003e728 	.word	0x2003e728

000b8614 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b8614:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b8616:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b8618:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b861a:	b94d      	cbnz	r5, b8630 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b861c:	6840      	ldr	r0, [r0, #4]
   b861e:	f000 fa6b 	bl	b8af8 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b8622:	6863      	ldr	r3, [r4, #4]
   b8624:	4629      	mov	r1, r5
   b8626:	7d18      	ldrb	r0, [r3, #20]
   b8628:	f005 fcb7 	bl	bdf9a <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b862c:	2301      	movs	r3, #1
   b862e:	7223      	strb	r3, [r4, #8]
  }
}
   b8630:	bd38      	pop	{r3, r4, r5, pc}

000b8632 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b8632:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b8634:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b8636:	4604      	mov	r4, r0
  if (m_spiActive) {
   b8638:	b16b      	cbz	r3, b8656 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b863a:	6843      	ldr	r3, [r0, #4]
   b863c:	2101      	movs	r1, #1
   b863e:	7d18      	ldrb	r0, [r3, #20]
   b8640:	f005 fcab 	bl	bdf9a <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b8644:	6860      	ldr	r0, [r4, #4]
   b8646:	21ff      	movs	r1, #255	; 0xff
   b8648:	f7ff ffbb 	bl	b85c2 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b864c:	6860      	ldr	r0, [r4, #4]
   b864e:	f000 fa67 	bl	b8b20 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b8652:	2300      	movs	r3, #0
   b8654:	7223      	strb	r3, [r4, #8]
  }
}
   b8656:	bd10      	pop	{r4, pc}

000b8658 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b8658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b865a:	4604      	mov	r4, r0
   b865c:	460d      	mov	r5, r1
   b865e:	4616      	mov	r6, r2
   b8660:	f001 fc36 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b8664:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b8666:	6860      	ldr	r0, [r4, #4]
   b8668:	f7ff ffad 	bl	b85c6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b866c:	28ff      	cmp	r0, #255	; 0xff
   b866e:	7260      	strb	r0, [r4, #9]
   b8670:	d10e      	bne.n	b8690 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b8672:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b8676:	4639      	mov	r1, r7
   b8678:	4620      	mov	r0, r4
   b867a:	f7ff ffa7 	bl	b85cc <_ZN9SdSpiCard10isTimedOutEtt>
   b867e:	2800      	cmp	r0, #0
   b8680:	d0f1      	beq.n	b8666 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b8682:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b8684:	4620      	mov	r0, r4
   b8686:	7023      	strb	r3, [r4, #0]
   b8688:	f7ff ffd3 	bl	b8632 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b868c:	2000      	movs	r0, #0
}
   b868e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b8690:	28fe      	cmp	r0, #254	; 0xfe
   b8692:	d001      	beq.n	b8698 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b8694:	2350      	movs	r3, #80	; 0x50
   b8696:	e7f5      	b.n	b8684 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b8698:	6860      	ldr	r0, [r4, #4]
   b869a:	4632      	mov	r2, r6
   b869c:	4629      	mov	r1, r5
   b869e:	f000 fa47 	bl	b8b30 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b86a2:	7260      	strb	r0, [r4, #9]
   b86a4:	b108      	cbz	r0, b86aa <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b86a6:	2360      	movs	r3, #96	; 0x60
   b86a8:	e7ec      	b.n	b8684 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b86aa:	6860      	ldr	r0, [r4, #4]
   b86ac:	f7ff ff8b 	bl	b85c6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b86b0:	6860      	ldr	r0, [r4, #4]
   b86b2:	f7ff ff88 	bl	b85c6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b86b6:	2001      	movs	r0, #1
   b86b8:	e7e9      	b.n	b868e <_ZN9SdSpiCard8readDataEPhj+0x36>

000b86ba <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b86ba:	b570      	push	{r4, r5, r6, lr}
   b86bc:	4604      	mov	r4, r0
   b86be:	460e      	mov	r6, r1
   b86c0:	f001 fc06 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
   b86c4:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b86c6:	4632      	mov	r2, r6
   b86c8:	4629      	mov	r1, r5
   b86ca:	4620      	mov	r0, r4
   b86cc:	f7ff ff7e 	bl	b85cc <_ZN9SdSpiCard10isTimedOutEtt>
   b86d0:	b930      	cbnz	r0, b86e0 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b86d2:	6860      	ldr	r0, [r4, #4]
   b86d4:	f7ff ff77 	bl	b85c6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b86d8:	28ff      	cmp	r0, #255	; 0xff
   b86da:	d1f4      	bne.n	b86c6 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b86dc:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b86de:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b86e0:	2000      	movs	r0, #0
   b86e2:	e7fc      	b.n	b86de <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b86e4 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b86e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b86e6:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b86e8:	9201      	str	r2, [sp, #4]
   b86ea:	4604      	mov	r4, r0
   b86ec:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b86ee:	b90b      	cbnz	r3, b86f4 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b86f0:	f7ff ff90 	bl	b8614 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b86f4:	b125      	cbz	r5, b8700 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b86f6:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b86fa:	4620      	mov	r0, r4
   b86fc:	f7ff ffdd 	bl	b86ba <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b8700:	6860      	ldr	r0, [r4, #4]
   b8702:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b8706:	f7ff ff5c 	bl	b85c2 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b870a:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b870c:	af01      	add	r7, sp, #4
   b870e:	5db9      	ldrb	r1, [r7, r6]
   b8710:	6860      	ldr	r0, [r4, #4]
   b8712:	f7ff ff56 	bl	b85c2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b8716:	3e01      	subs	r6, #1
   b8718:	d2f9      	bcs.n	b870e <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b871a:	2d00      	cmp	r5, #0
   b871c:	6860      	ldr	r0, [r4, #4]
   b871e:	bf0c      	ite	eq
   b8720:	2195      	moveq	r1, #149	; 0x95
   b8722:	2187      	movne	r1, #135	; 0x87
   b8724:	f7ff ff4d 	bl	b85c2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b8728:	6860      	ldr	r0, [r4, #4]
   b872a:	f7ff ff4c 	bl	b85c6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b872e:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b8730:	6860      	ldr	r0, [r4, #4]
   b8732:	f7ff ff48 	bl	b85c6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b8736:	0603      	lsls	r3, r0, #24
   b8738:	7260      	strb	r0, [r4, #9]
   b873a:	d503      	bpl.n	b8744 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b873c:	3d01      	subs	r5, #1
   b873e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b8742:	d1f5      	bne.n	b8730 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b8744:	b003      	add	sp, #12
   b8746:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8748 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b8748:	b570      	push	{r4, r5, r6, lr}
   b874a:	4604      	mov	r4, r0
   b874c:	460d      	mov	r5, r1
   b874e:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b8750:	2137      	movs	r1, #55	; 0x37
   b8752:	2200      	movs	r2, #0
   b8754:	f7ff ffc6 	bl	b86e4 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b8758:	4632      	mov	r2, r6
   b875a:	4629      	mov	r1, r5
   b875c:	4620      	mov	r0, r4
  }
   b875e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b8762:	f7ff bfbf 	b.w	b86e4 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b8768 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b8768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b876c:	2500      	movs	r5, #0
   b876e:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b8770:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b8772:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b8774:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b8776:	4604      	mov	r4, r0
   b8778:	4690      	mov	r8, r2
   b877a:	461e      	mov	r6, r3
   b877c:	f001 fba8 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b8780:	4641      	mov	r1, r8
   b8782:	4607      	mov	r7, r0
   b8784:	6860      	ldr	r0, [r4, #4]
   b8786:	f000 f9bb 	bl	b8b00 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b878a:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b878c:	4a49      	ldr	r2, [pc, #292]	; (b88b4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b878e:	721d      	strb	r5, [r3, #8]
   b8790:	2501      	movs	r5, #1
   b8792:	60da      	str	r2, [r3, #12]
   b8794:	821d      	strh	r5, [r3, #16]
  spiStart();
   b8796:	4620      	mov	r0, r4
   b8798:	f7ff ff3c 	bl	b8614 <_ZN9SdSpiCard8spiStartEv>
   b879c:	6863      	ldr	r3, [r4, #4]
   b879e:	4629      	mov	r1, r5
   b87a0:	7d18      	ldrb	r0, [r3, #20]
   b87a2:	f005 fbfa 	bl	bdf9a <digitalWrite>
   b87a6:	250a      	movs	r5, #10
    spiSend(0XFF);
   b87a8:	6860      	ldr	r0, [r4, #4]
   b87aa:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b87ac:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b87ae:	f7ff ff08 	bl	b85c2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b87b2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b87b6:	d1f7      	bne.n	b87a8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b87b8:	6863      	ldr	r3, [r4, #4]
   b87ba:	4629      	mov	r1, r5
   b87bc:	7d18      	ldrb	r0, [r3, #20]
   b87be:	f005 fbec 	bl	bdf9a <digitalWrite>
  }
   b87c2:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b87c4:	2200      	movs	r2, #0
   b87c6:	4611      	mov	r1, r2
   b87c8:	4620      	mov	r0, r4
   b87ca:	f7ff ff8b 	bl	b86e4 <_ZN9SdSpiCard11cardCommandEhm>
   b87ce:	2801      	cmp	r0, #1
   b87d0:	4680      	mov	r8, r0
   b87d2:	d018      	beq.n	b8806 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b87d4:	3d01      	subs	r5, #1
   b87d6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b87da:	d107      	bne.n	b87ec <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b87dc:	2320      	movs	r3, #32
  spiStop();
   b87de:	4620      	mov	r0, r4
   b87e0:	7023      	strb	r3, [r4, #0]
   b87e2:	f7ff ff26 	bl	b8632 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b87e6:	2000      	movs	r0, #0
}
   b87e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b87ec:	6860      	ldr	r0, [r4, #4]
   b87ee:	21fd      	movs	r1, #253	; 0xfd
   b87f0:	f7ff fee7 	bl	b85c2 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b87f4:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b87f8:	6860      	ldr	r0, [r4, #4]
   b87fa:	f7ff fee4 	bl	b85c6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b87fe:	f1b8 0801 	subs.w	r8, r8, #1
   b8802:	d1f9      	bne.n	b87f8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b8804:	e7de      	b.n	b87c4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b8806:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b880a:	2108      	movs	r1, #8
   b880c:	4620      	mov	r0, r4
   b880e:	f7ff ff69 	bl	b86e4 <_ZN9SdSpiCard11cardCommandEhm>
   b8812:	2805      	cmp	r0, #5
   b8814:	d114      	bne.n	b8840 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b8816:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b881a:	2500      	movs	r5, #0
   b881c:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b881e:	462a      	mov	r2, r5
   b8820:	2129      	movs	r1, #41	; 0x29
   b8822:	4620      	mov	r0, r4
   b8824:	f7ff ff90 	bl	b8748 <_ZN9SdSpiCard8cardAcmdEhm>
   b8828:	4602      	mov	r2, r0
   b882a:	b1d8      	cbz	r0, b8864 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b882c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b8830:	4639      	mov	r1, r7
   b8832:	4620      	mov	r0, r4
   b8834:	f7ff feca 	bl	b85cc <_ZN9SdSpiCard10isTimedOutEtt>
   b8838:	2800      	cmp	r0, #0
   b883a:	d0f0      	beq.n	b881e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b883c:	2343      	movs	r3, #67	; 0x43
   b883e:	e7ce      	b.n	b87de <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b8840:	2504      	movs	r5, #4
      m_status = spiReceive();
   b8842:	6860      	ldr	r0, [r4, #4]
   b8844:	f7ff febf 	bl	b85c6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b8848:	3d01      	subs	r5, #1
   b884a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b884e:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b8850:	d1f7      	bne.n	b8842 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b8852:	28aa      	cmp	r0, #170	; 0xaa
   b8854:	d104      	bne.n	b8860 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b8856:	2302      	movs	r3, #2
   b8858:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b885a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b885e:	e7dd      	b.n	b881c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b8860:	2325      	movs	r3, #37	; 0x25
   b8862:	e7bc      	b.n	b87de <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b8864:	7aa3      	ldrb	r3, [r4, #10]
   b8866:	2b02      	cmp	r3, #2
   b8868:	d118      	bne.n	b889c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b886a:	213a      	movs	r1, #58	; 0x3a
   b886c:	4620      	mov	r0, r4
   b886e:	f7ff ff39 	bl	b86e4 <_ZN9SdSpiCard11cardCommandEhm>
   b8872:	b108      	cbz	r0, b8878 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b8874:	2337      	movs	r3, #55	; 0x37
   b8876:	e7b2      	b.n	b87de <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b8878:	6860      	ldr	r0, [r4, #4]
   b887a:	f7ff fea4 	bl	b85c6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b887e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b8882:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b8884:	bf04      	itt	eq
   b8886:	2303      	moveq	r3, #3
   b8888:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b888a:	6860      	ldr	r0, [r4, #4]
   b888c:	f7ff fe9b 	bl	b85c6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b8890:	6860      	ldr	r0, [r4, #4]
   b8892:	f7ff fe98 	bl	b85c6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b8896:	6860      	ldr	r0, [r4, #4]
   b8898:	f7ff fe95 	bl	b85c6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b889c:	4620      	mov	r0, r4
   b889e:	f7ff fec8 	bl	b8632 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b88a2:	6863      	ldr	r3, [r4, #4]
   b88a4:	7930      	ldrb	r0, [r6, #4]
   b88a6:	68b1      	ldr	r1, [r6, #8]
   b88a8:	89b2      	ldrh	r2, [r6, #12]
   b88aa:	821a      	strh	r2, [r3, #16]
   b88ac:	7218      	strb	r0, [r3, #8]
   b88ae:	60d9      	str	r1, [r3, #12]
  return true;
   b88b0:	2001      	movs	r0, #1
   b88b2:	e799      	b.n	b87e8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b88b4:	0003d090 	.word	0x0003d090

000b88b8 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b88b8:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b88ba:	7a83      	ldrb	r3, [r0, #10]
   b88bc:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b88be:	bf18      	it	ne
   b88c0:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b88c2:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b88c4:	460a      	mov	r2, r1
   b88c6:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b88c8:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b88ca:	f7ff ff0b 	bl	b86e4 <_ZN9SdSpiCard11cardCommandEhm>
   b88ce:	b130      	cbz	r0, b88de <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b88d0:	2330      	movs	r3, #48	; 0x30
   b88d2:	7023      	strb	r3, [r4, #0]
  spiStop();
   b88d4:	4620      	mov	r0, r4
   b88d6:	f7ff feac 	bl	b8632 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b88da:	2500      	movs	r5, #0
   b88dc:	e00b      	b.n	b88f6 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b88de:	4629      	mov	r1, r5
   b88e0:	f44f 7200 	mov.w	r2, #512	; 0x200
   b88e4:	4620      	mov	r0, r4
   b88e6:	f7ff feb7 	bl	b8658 <_ZN9SdSpiCard8readDataEPhj>
   b88ea:	4605      	mov	r5, r0
   b88ec:	2800      	cmp	r0, #0
   b88ee:	d0f1      	beq.n	b88d4 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b88f0:	4620      	mov	r0, r4
   b88f2:	f7ff fe9e 	bl	b8632 <_ZN9SdSpiCard7spiStopEv>
}
   b88f6:	4628      	mov	r0, r5
   b88f8:	bd38      	pop	{r3, r4, r5, pc}

000b88fa <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b88fa:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b88fc:	7a83      	ldrb	r3, [r0, #10]
   b88fe:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b8900:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b8902:	bf18      	it	ne
   b8904:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b8906:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b8908:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b890a:	f7ff feeb 	bl	b86e4 <_ZN9SdSpiCard11cardCommandEhm>
   b890e:	b130      	cbz	r0, b891e <_ZN9SdSpiCard9readStartEm+0x24>
   b8910:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b8912:	4620      	mov	r0, r4
   b8914:	7023      	strb	r3, [r4, #0]
   b8916:	f7ff fe8c 	bl	b8632 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b891a:	2000      	movs	r0, #0
}
   b891c:	bd10      	pop	{r4, pc}
  return true;
   b891e:	2001      	movs	r0, #1
   b8920:	e7fc      	b.n	b891c <_ZN9SdSpiCard9readStartEm+0x22>

000b8922 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b8922:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b8924:	2200      	movs	r2, #0
   b8926:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b8928:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b892a:	f7ff fedb 	bl	b86e4 <_ZN9SdSpiCard11cardCommandEhm>
   b892e:	b130      	cbz	r0, b893e <_ZN9SdSpiCard8readStopEv+0x1c>
   b8930:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b8932:	4620      	mov	r0, r4
   b8934:	7023      	strb	r3, [r4, #0]
   b8936:	f7ff fe7c 	bl	b8632 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b893a:	2000      	movs	r0, #0
}
   b893c:	bd10      	pop	{r4, pc}
  spiStop();
   b893e:	4620      	mov	r0, r4
   b8940:	f7ff fe77 	bl	b8632 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b8944:	2001      	movs	r0, #1
   b8946:	e7f9      	b.n	b893c <_ZN9SdSpiCard8readStopEv+0x1a>

000b8948 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b8948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b894a:	4604      	mov	r4, r0
   b894c:	4616      	mov	r6, r2
   b894e:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b8950:	f7ff ffd3 	bl	b88fa <_ZN9SdSpiCard9readStartEm>
   b8954:	b168      	cbz	r0, b8972 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b8956:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b8958:	b2ab      	uxth	r3, r5
   b895a:	429f      	cmp	r7, r3
   b895c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b8960:	d909      	bls.n	b8976 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b8962:	f44f 7200 	mov.w	r2, #512	; 0x200
   b8966:	4620      	mov	r0, r4
   b8968:	f7ff fe76 	bl	b8658 <_ZN9SdSpiCard8readDataEPhj>
   b896c:	3501      	adds	r5, #1
   b896e:	2800      	cmp	r0, #0
   b8970:	d1f2      	bne.n	b8958 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b8972:	2000      	movs	r0, #0
   b8974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b8976:	4620      	mov	r0, r4
}
   b8978:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b897c:	f7ff bfd1 	b.w	b8922 <_ZN9SdSpiCard8readStopEv>

000b8980 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b8980:	b538      	push	{r3, r4, r5, lr}
   b8982:	4604      	mov	r4, r0
   b8984:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b8986:	6840      	ldr	r0, [r0, #4]
   b8988:	f7ff fe1b 	bl	b85c2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b898c:	f44f 7200 	mov.w	r2, #512	; 0x200
   b8990:	6860      	ldr	r0, [r4, #4]
   b8992:	4629      	mov	r1, r5
   b8994:	f000 f8e6 	bl	b8b64 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b8998:	6860      	ldr	r0, [r4, #4]
   b899a:	21ff      	movs	r1, #255	; 0xff
   b899c:	f7ff fe11 	bl	b85c2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b89a0:	6860      	ldr	r0, [r4, #4]
   b89a2:	21ff      	movs	r1, #255	; 0xff
   b89a4:	f7ff fe0d 	bl	b85c2 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b89a8:	6860      	ldr	r0, [r4, #4]
   b89aa:	f7ff fe0c 	bl	b85c6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b89ae:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b89b0:	f000 001f 	and.w	r0, r0, #31
   b89b4:	2805      	cmp	r0, #5
   b89b6:	d006      	beq.n	b89c6 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b89b8:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b89ba:	4620      	mov	r0, r4
   b89bc:	7023      	strb	r3, [r4, #0]
   b89be:	f7ff fe38 	bl	b8632 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b89c2:	2000      	movs	r0, #0
}
   b89c4:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b89c6:	2001      	movs	r0, #1
   b89c8:	e7fc      	b.n	b89c4 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b89ca <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b89ca:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b89cc:	7a83      	ldrb	r3, [r0, #10]
   b89ce:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b89d0:	bf18      	it	ne
   b89d2:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b89d4:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b89d6:	460a      	mov	r2, r1
   b89d8:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b89da:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b89dc:	f7ff fe82 	bl	b86e4 <_ZN9SdSpiCard11cardCommandEhm>
   b89e0:	4606      	mov	r6, r0
   b89e2:	b130      	cbz	r0, b89f2 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b89e4:	2332      	movs	r3, #50	; 0x32
   b89e6:	7023      	strb	r3, [r4, #0]
  spiStop();
   b89e8:	4620      	mov	r0, r4
   b89ea:	f7ff fe22 	bl	b8632 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b89ee:	2500      	movs	r5, #0
   b89f0:	e01f      	b.n	b8a32 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b89f2:	462a      	mov	r2, r5
   b89f4:	21fe      	movs	r1, #254	; 0xfe
   b89f6:	4620      	mov	r0, r4
   b89f8:	f7ff ffc2 	bl	b8980 <_ZN9SdSpiCard9writeDataEhPKh>
   b89fc:	2800      	cmp	r0, #0
   b89fe:	d0f3      	beq.n	b89e8 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b8a00:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b8a04:	4620      	mov	r0, r4
   b8a06:	f7ff fe58 	bl	b86ba <_ZN9SdSpiCard11waitNotBusyEt>
   b8a0a:	4605      	mov	r5, r0
   b8a0c:	b908      	cbnz	r0, b8a12 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b8a0e:	235a      	movs	r3, #90	; 0x5a
   b8a10:	e7e9      	b.n	b89e6 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b8a12:	4632      	mov	r2, r6
   b8a14:	210d      	movs	r1, #13
   b8a16:	4620      	mov	r0, r4
   b8a18:	f7ff fe64 	bl	b86e4 <_ZN9SdSpiCard11cardCommandEhm>
   b8a1c:	b108      	cbz	r0, b8a22 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b8a1e:	2329      	movs	r3, #41	; 0x29
   b8a20:	e7e1      	b.n	b89e6 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b8a22:	6860      	ldr	r0, [r4, #4]
   b8a24:	f7ff fdcf 	bl	b85c6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b8a28:	2800      	cmp	r0, #0
   b8a2a:	d1f8      	bne.n	b8a1e <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b8a2c:	4620      	mov	r0, r4
   b8a2e:	f7ff fe00 	bl	b8632 <_ZN9SdSpiCard7spiStopEv>
}
   b8a32:	4628      	mov	r0, r5
   b8a34:	bd70      	pop	{r4, r5, r6, pc}

000b8a36 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b8a36:	b513      	push	{r0, r1, r4, lr}
   b8a38:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b8a3a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b8a3e:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b8a40:	f7ff fe3b 	bl	b86ba <_ZN9SdSpiCard11waitNotBusyEt>
   b8a44:	9a01      	ldr	r2, [sp, #4]
   b8a46:	b930      	cbnz	r0, b8a56 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b8a48:	235b      	movs	r3, #91	; 0x5b
   b8a4a:	7023      	strb	r3, [r4, #0]
  spiStop();
   b8a4c:	4620      	mov	r0, r4
   b8a4e:	f7ff fdf0 	bl	b8632 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8a52:	2000      	movs	r0, #0
   b8a54:	e005      	b.n	b8a62 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b8a56:	21fc      	movs	r1, #252	; 0xfc
   b8a58:	4620      	mov	r0, r4
   b8a5a:	f7ff ff91 	bl	b8980 <_ZN9SdSpiCard9writeDataEhPKh>
   b8a5e:	2800      	cmp	r0, #0
   b8a60:	d0f4      	beq.n	b8a4c <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b8a62:	b002      	add	sp, #8
   b8a64:	bd10      	pop	{r4, pc}

000b8a66 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b8a66:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b8a68:	7a83      	ldrb	r3, [r0, #10]
   b8a6a:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b8a6c:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b8a6e:	bf18      	it	ne
   b8a70:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b8a72:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b8a74:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b8a76:	f7ff fe35 	bl	b86e4 <_ZN9SdSpiCard11cardCommandEhm>
   b8a7a:	b130      	cbz	r0, b8a8a <_ZN9SdSpiCard10writeStartEm+0x24>
   b8a7c:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b8a7e:	4620      	mov	r0, r4
   b8a80:	7023      	strb	r3, [r4, #0]
   b8a82:	f7ff fdd6 	bl	b8632 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8a86:	2000      	movs	r0, #0
}
   b8a88:	bd10      	pop	{r4, pc}
  return true;
   b8a8a:	2001      	movs	r0, #1
   b8a8c:	e7fc      	b.n	b8a88 <_ZN9SdSpiCard10writeStartEm+0x22>

000b8a8e <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b8a8e:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b8a90:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b8a94:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b8a96:	f7ff fe10 	bl	b86ba <_ZN9SdSpiCard11waitNotBusyEt>
   b8a9a:	4605      	mov	r5, r0
   b8a9c:	b930      	cbnz	r0, b8aac <_ZN9SdSpiCard9writeStopEv+0x1e>
   b8a9e:	2356      	movs	r3, #86	; 0x56
   b8aa0:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b8aa2:	4620      	mov	r0, r4
   b8aa4:	f7ff fdc5 	bl	b8632 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b8aa8:	4628      	mov	r0, r5
   b8aaa:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b8aac:	6860      	ldr	r0, [r4, #4]
   b8aae:	21fd      	movs	r1, #253	; 0xfd
   b8ab0:	f7ff fd87 	bl	b85c2 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b8ab4:	e7f5      	b.n	b8aa2 <_ZN9SdSpiCard9writeStopEv+0x14>

000b8ab6 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b8ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8ab8:	4604      	mov	r4, r0
   b8aba:	4616      	mov	r6, r2
   b8abc:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b8abe:	f7ff ffd2 	bl	b8a66 <_ZN9SdSpiCard10writeStartEm>
   b8ac2:	b170      	cbz	r0, b8ae2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b8ac4:	2500      	movs	r5, #0
   b8ac6:	42bd      	cmp	r5, r7
   b8ac8:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b8acc:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b8ace:	d004      	beq.n	b8ada <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b8ad0:	f7ff ffb1 	bl	b8a36 <_ZN9SdSpiCard9writeDataEPKh>
   b8ad4:	b128      	cbz	r0, b8ae2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b8ad6:	3501      	adds	r5, #1
   b8ad8:	e7f5      	b.n	b8ac6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b8ada:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b8ade:	f7ff bfd6 	b.w	b8a8e <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b8ae2:	4620      	mov	r0, r4
   b8ae4:	f7ff fda5 	bl	b8632 <_ZN9SdSpiCard7spiStopEv>
}
   b8ae8:	2000      	movs	r0, #0
   b8aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8aec <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b8aec:	4b01      	ldr	r3, [pc, #4]	; (b8af4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b8aee:	2201      	movs	r2, #1
   b8af0:	701a      	strb	r2, [r3, #0]
}
   b8af2:	4770      	bx	lr
   b8af4:	2003e648 	.word	0x2003e648

000b8af8 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b8af8:	1d01      	adds	r1, r0, #4
   b8afa:	6800      	ldr	r0, [r0, #0]
   b8afc:	f004 bdd8 	b.w	bd6b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b8b00 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b8b00:	b510      	push	{r4, lr}
   b8b02:	4604      	mov	r4, r0
  m_csPin = csPin;
   b8b04:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b8b06:	6800      	ldr	r0, [r0, #0]
   b8b08:	f004 fda4 	bl	bd654 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b8b0c:	7d20      	ldrb	r0, [r4, #20]
   b8b0e:	2101      	movs	r1, #1
   b8b10:	f005 fa32 	bl	bdf78 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b8b14:	7d20      	ldrb	r0, [r4, #20]
   b8b16:	2101      	movs	r1, #1
}
   b8b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b8b1c:	f005 ba3d 	b.w	bdf9a <digitalWrite>

000b8b20 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b8b20:	6800      	ldr	r0, [r0, #0]
   b8b22:	f004 bdab 	b.w	bd67c <_ZN8SPIClass14endTransactionEv>

000b8b26 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b8b26:	6800      	ldr	r0, [r0, #0]
   b8b28:	21ff      	movs	r1, #255	; 0xff
   b8b2a:	f004 be2f 	b.w	bd78c <_ZN8SPIClass8transferEh>
	...

000b8b30 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b8b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8b32:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b8b34:	4a07      	ldr	r2, [pc, #28]	; (b8b54 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b8b36:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b8b38:	2500      	movs	r5, #0
   b8b3a:	4c07      	ldr	r4, [pc, #28]	; (b8b58 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b8b3c:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b8b3e:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b8b40:	460a      	mov	r2, r1
   b8b42:	4629      	mov	r1, r5
   b8b44:	f004 fe28 	bl	bd798 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b8b48:	7823      	ldrb	r3, [r4, #0]
   b8b4a:	2b00      	cmp	r3, #0
   b8b4c:	d0fc      	beq.n	b8b48 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b8b4e:	2000      	movs	r0, #0
   b8b50:	b003      	add	sp, #12
   b8b52:	bd30      	pop	{r4, r5, pc}
   b8b54:	000b8aed 	.word	0x000b8aed
   b8b58:	2003e648 	.word	0x2003e648

000b8b5c <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b8b5c:	6800      	ldr	r0, [r0, #0]
   b8b5e:	f004 be15 	b.w	bd78c <_ZN8SPIClass8transferEh>
	...

000b8b64 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b8b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8b66:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b8b68:	4a06      	ldr	r2, [pc, #24]	; (b8b84 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b8b6a:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b8b6c:	2500      	movs	r5, #0
   b8b6e:	4c06      	ldr	r4, [pc, #24]	; (b8b88 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b8b70:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b8b72:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b8b74:	462a      	mov	r2, r5
   b8b76:	f004 fe0f 	bl	bd798 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b8b7a:	7823      	ldrb	r3, [r4, #0]
   b8b7c:	2b00      	cmp	r3, #0
   b8b7e:	d0fc      	beq.n	b8b7a <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b8b80:	b003      	add	sp, #12
   b8b82:	bd30      	pop	{r4, r5, pc}
   b8b84:	000b8aed 	.word	0x000b8aed
   b8b88:	2003e648 	.word	0x2003e648

000b8b8c <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b8b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8b90:	b085      	sub	sp, #20
   b8b92:	461f      	mov	r7, r3
   b8b94:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b8b98:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b8b9c:	eba8 0902 	sub.w	r9, r8, r2
   b8ba0:	eba7 0a01 	sub.w	sl, r7, r1
   b8ba4:	f1b9 0f00 	cmp.w	r9, #0
   b8ba8:	bfb8      	it	lt
   b8baa:	f1c9 0900 	rsblt	r9, r9, #0
   b8bae:	f1ba 0f00 	cmp.w	sl, #0
   b8bb2:	bfb8      	it	lt
   b8bb4:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b8bb8:	45d1      	cmp	r9, sl
        uint16_t color) {
   b8bba:	4683      	mov	fp, r0
   b8bbc:	460c      	mov	r4, r1
   b8bbe:	4615      	mov	r5, r2
    if (steep) {
   b8bc0:	dd04      	ble.n	b8bcc <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b8bc2:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b8bc4:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b8bc6:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b8bc8:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b8bca:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b8bcc:	42bc      	cmp	r4, r7
   b8bce:	dd05      	ble.n	b8bdc <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b8bd0:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b8bd2:	4645      	mov	r5, r8
   b8bd4:	4690      	mov	r8, r2
    if (x0 > x1) {
   b8bd6:	4622      	mov	r2, r4
   b8bd8:	463c      	mov	r4, r7
   b8bda:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b8bdc:	1b3e      	subs	r6, r7, r4
   b8bde:	b2b2      	uxth	r2, r6
   b8be0:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b8be2:	eba8 0205 	sub.w	r2, r8, r5
   b8be6:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b8bea:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b8bee:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b8bf2:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b8bf6:	4545      	cmp	r5, r8
   b8bf8:	bfb4      	ite	lt
   b8bfa:	2201      	movlt	r2, #1
   b8bfc:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b8c00:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b8c02:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b8c04:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b8c06:	42bc      	cmp	r4, r7
   b8c08:	dc1c      	bgt.n	b8c44 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b8c0a:	f8db 2000 	ldr.w	r2, [fp]
   b8c0e:	9303      	str	r3, [sp, #12]
        if (steep) {
   b8c10:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b8c12:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b8c16:	bfc7      	ittee	gt
   b8c18:	4629      	movgt	r1, r5
   b8c1a:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b8c1c:	462a      	movle	r2, r5
   b8c1e:	4621      	movle	r1, r4
   b8c20:	4658      	mov	r0, fp
   b8c22:	47c0      	blx	r8
        }
        err -= dy;
   b8c24:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b8c26:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b8c28:	1ab6      	subs	r6, r6, r2
   b8c2a:	b2b1      	uxth	r1, r6
   b8c2c:	b236      	sxth	r6, r6
        if (err < 0) {
   b8c2e:	2e00      	cmp	r6, #0
   b8c30:	da05      	bge.n	b8c3e <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b8c32:	9a02      	ldr	r2, [sp, #8]
   b8c34:	4415      	add	r5, r2
            err += dx;
   b8c36:	9a00      	ldr	r2, [sp, #0]
   b8c38:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b8c3a:	b22d      	sxth	r5, r5
            err += dx;
   b8c3c:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b8c3e:	3401      	adds	r4, #1
   b8c40:	b224      	sxth	r4, r4
   b8c42:	e7e0      	b.n	b8c06 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b8c44:	b005      	add	sp, #20
   b8c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b8c4a <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b8c4a:	4770      	bx	lr

000b8c4c <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b8c4c:	b410      	push	{r4}
    drawPixel(x, y, color);
   b8c4e:	6804      	ldr	r4, [r0, #0]
   b8c50:	6924      	ldr	r4, [r4, #16]
   b8c52:	46a4      	mov	ip, r4
}
   b8c54:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b8c58:	4760      	bx	ip

000b8c5a <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b8c5a:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b8c5c:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b8c5e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b8c62:	9502      	str	r5, [sp, #8]
   b8c64:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b8c66:	46a4      	mov	ip, r4
}
   b8c68:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b8c6a:	4760      	bx	ip

000b8c6c <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b8c6c:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b8c6e:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b8c70:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b8c74:	9502      	str	r5, [sp, #8]
   b8c76:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b8c78:	46a4      	mov	ip, r4
}
   b8c7a:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b8c7c:	4760      	bx	ip

000b8c7e <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b8c7e:	b470      	push	{r4, r5, r6}
   b8c80:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b8c84:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b8c88:	6804      	ldr	r4, [r0, #0]
   b8c8a:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b8c8e:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b8c90:	46a4      	mov	ip, r4
}
   b8c92:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b8c94:	4760      	bx	ip

000b8c96 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b8c96:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b8c9a:	461c      	mov	r4, r3
    startWrite();
   b8c9c:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b8c9e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b8ca2:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b8ca4:	4605      	mov	r5, r0
   b8ca6:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b8ca8:	3c01      	subs	r4, #1
   b8caa:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b8cac:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b8cae:	b224      	sxth	r4, r4
    startWrite();
   b8cb0:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b8cb2:	682b      	ldr	r3, [r5, #0]
   b8cb4:	f8cd 8004 	str.w	r8, [sp, #4]
   b8cb8:	9400      	str	r4, [sp, #0]
   b8cba:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b8cbc:	4628      	mov	r0, r5
   b8cbe:	463b      	mov	r3, r7
   b8cc0:	4632      	mov	r2, r6
   b8cc2:	4639      	mov	r1, r7
   b8cc4:	47a0      	blx	r4
    endWrite();
   b8cc6:	682b      	ldr	r3, [r5, #0]
   b8cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8cca:	4628      	mov	r0, r5
}
   b8ccc:	b002      	add	sp, #8
   b8cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b8cd2:	4718      	bx	r3

000b8cd4 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b8cd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b8cd8:	461d      	mov	r5, r3
    startWrite();
   b8cda:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b8cdc:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b8ce0:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b8ce2:	4604      	mov	r4, r0
   b8ce4:	4617      	mov	r7, r2
   b8ce6:	460e      	mov	r6, r1
    startWrite();
   b8ce8:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b8cea:	e9cd 7800 	strd	r7, r8, [sp]
   b8cee:	6822      	ldr	r2, [r4, #0]
   b8cf0:	1e6b      	subs	r3, r5, #1
   b8cf2:	4433      	add	r3, r6
   b8cf4:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b8cf6:	4620      	mov	r0, r4
   b8cf8:	b21b      	sxth	r3, r3
   b8cfa:	463a      	mov	r2, r7
   b8cfc:	4631      	mov	r1, r6
   b8cfe:	47a8      	blx	r5
    endWrite();
   b8d00:	6823      	ldr	r3, [r4, #0]
   b8d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8d04:	4620      	mov	r0, r4
}
   b8d06:	b002      	add	sp, #8
   b8d08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b8d0c:	4718      	bx	r3

000b8d0e <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b8d0e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b8d12:	461e      	mov	r6, r3
    startWrite();
   b8d14:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b8d16:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b8d1a:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b8d1c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b8d20:	460c      	mov	r4, r1
   b8d22:	4605      	mov	r5, r0
   b8d24:	4617      	mov	r7, r2
    startWrite();
   b8d26:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b8d28:	4426      	add	r6, r4
   b8d2a:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b8d2c:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b8d2e:	da0b      	bge.n	b8d48 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b8d30:	f8cd 8000 	str.w	r8, [sp]
   b8d34:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b8d38:	4621      	mov	r1, r4
   b8d3a:	464b      	mov	r3, r9
   b8d3c:	463a      	mov	r2, r7
   b8d3e:	4628      	mov	r0, r5
   b8d40:	3401      	adds	r4, #1
   b8d42:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b8d44:	b224      	sxth	r4, r4
   b8d46:	e7f0      	b.n	b8d2a <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b8d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8d4a:	4628      	mov	r0, r5
}
   b8d4c:	b002      	add	sp, #8
   b8d4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b8d52:	4718      	bx	r3

000b8d54 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b8d54:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b8d56:	6802      	ldr	r2, [r0, #0]
   b8d58:	9101      	str	r1, [sp, #4]
   b8d5a:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b8d5e:	9100      	str	r1, [sp, #0]
   b8d60:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b8d62:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b8d66:	2200      	movs	r2, #0
   b8d68:	4611      	mov	r1, r2
   b8d6a:	47a0      	blx	r4
}
   b8d6c:	b002      	add	sp, #8
   b8d6e:	bd10      	pop	{r4, pc}

000b8d70 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b8d70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b8d74:	4299      	cmp	r1, r3
        uint16_t color) {
   b8d76:	4616      	mov	r6, r2
   b8d78:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b8d7c:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b8d80:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b8d82:	4680      	mov	r8, r0
   b8d84:	460d      	mov	r5, r1
   b8d86:	461c      	mov	r4, r3
    if(x0 == x1){
   b8d88:	d113      	bne.n	b8db2 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b8d8a:	42be      	cmp	r6, r7
   b8d8c:	bfc8      	it	gt
   b8d8e:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b8d90:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b8d94:	bfc4      	itt	gt
   b8d96:	463e      	movgt	r6, r7
   b8d98:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b8d9a:	1c7b      	adds	r3, r7, #1
   b8d9c:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b8d9e:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b8da0:	b21b      	sxth	r3, r3
   b8da2:	4632      	mov	r2, r6
   b8da4:	4629      	mov	r1, r5
   b8da6:	4640      	mov	r0, r8
   b8da8:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b8daa:	b003      	add	sp, #12
   b8dac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b8db0:	4760      	bx	ip
    } else if(y0 == y1){
   b8db2:	42be      	cmp	r6, r7
   b8db4:	d10a      	bne.n	b8dcc <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b8db6:	4299      	cmp	r1, r3
   b8db8:	bfc2      	ittt	gt
   b8dba:	460b      	movgt	r3, r1
   b8dbc:	4625      	movgt	r5, r4
   b8dbe:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b8dc0:	1c63      	adds	r3, r4, #1
   b8dc2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b8dc6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b8dc8:	1b5b      	subs	r3, r3, r5
   b8dca:	e7e9      	b.n	b8da0 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b8dcc:	6953      	ldr	r3, [r2, #20]
   b8dce:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b8dd0:	e9cd 7900 	strd	r7, r9, [sp]
   b8dd4:	f8d8 3000 	ldr.w	r3, [r8]
   b8dd8:	4640      	mov	r0, r8
   b8dda:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b8ddc:	4632      	mov	r2, r6
   b8dde:	4623      	mov	r3, r4
   b8de0:	4629      	mov	r1, r5
   b8de2:	47b8      	blx	r7
        endWrite();
   b8de4:	f8d8 3000 	ldr.w	r3, [r8]
   b8de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8dea:	4640      	mov	r0, r8
}
   b8dec:	b003      	add	sp, #12
   b8dee:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b8df2:	4718      	bx	r3

000b8df4 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b8df4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b8df8:	461d      	mov	r5, r3
    startWrite();
   b8dfa:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b8dfc:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b8e00:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b8e02:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b8e06:	4604      	mov	r4, r0
   b8e08:	460f      	mov	r7, r1
   b8e0a:	4616      	mov	r6, r2
    startWrite();
   b8e0c:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b8e0e:	6823      	ldr	r3, [r4, #0]
   b8e10:	f8cd 8000 	str.w	r8, [sp]
   b8e14:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b8e18:	4632      	mov	r2, r6
   b8e1a:	462b      	mov	r3, r5
   b8e1c:	4639      	mov	r1, r7
   b8e1e:	4620      	mov	r0, r4
   b8e20:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b8e22:	6823      	ldr	r3, [r4, #0]
   b8e24:	f8cd 8000 	str.w	r8, [sp]
   b8e28:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b8e2c:	4432      	add	r2, r6
   b8e2e:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b8e32:	4639      	mov	r1, r7
   b8e34:	462b      	mov	r3, r5
   b8e36:	4620      	mov	r0, r4
   b8e38:	b212      	sxth	r2, r2
   b8e3a:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b8e3c:	6823      	ldr	r3, [r4, #0]
   b8e3e:	f8cd 8000 	str.w	r8, [sp]
   b8e42:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b8e46:	4632      	mov	r2, r6
   b8e48:	464b      	mov	r3, r9
   b8e4a:	4639      	mov	r1, r7
   b8e4c:	4620      	mov	r0, r4
   b8e4e:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b8e50:	1e6b      	subs	r3, r5, #1
   b8e52:	19d9      	adds	r1, r3, r7
   b8e54:	6823      	ldr	r3, [r4, #0]
   b8e56:	f8cd 8000 	str.w	r8, [sp]
   b8e5a:	6a1d      	ldr	r5, [r3, #32]
   b8e5c:	4620      	mov	r0, r4
   b8e5e:	464b      	mov	r3, r9
   b8e60:	4632      	mov	r2, r6
   b8e62:	b209      	sxth	r1, r1
   b8e64:	47a8      	blx	r5
    endWrite();
   b8e66:	6823      	ldr	r3, [r4, #0]
   b8e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8e6a:	4620      	mov	r0, r4
}
   b8e6c:	b002      	add	sp, #8
   b8e6e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b8e72:	4718      	bx	r3

000b8e74 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b8e74:	4770      	bx	lr

000b8e76 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b8e76:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b8e7a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b8e7e:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b8e80:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b8e82:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b8e86:	bf59      	ittee	pl
   b8e88:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b8e8a:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b8e8c:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b8e8e:	81c3      	strhmi	r3, [r0, #14]
}
   b8e90:	4770      	bx	lr
	...

000b8e94 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b8e94:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b8e96:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b8e98:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b8e9a:	4a07      	ldr	r2, [pc, #28]	; (b8eb8 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b8e9c:	4d07      	ldr	r5, [pc, #28]	; (b8ebc <_ZN12Adafruit_GFXC1Ess+0x28>)
   b8e9e:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b8ea0:	2400      	movs	r4, #0
    _width    = WIDTH;
   b8ea2:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b8ea4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b8ea8:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b8eac:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b8eae:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b8eb0:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b8eb2:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b8eb4:	6204      	str	r4, [r0, #32]
}
   b8eb6:	bd30      	pop	{r4, r5, pc}
   b8eb8:	01000101 	.word	0x01000101
   b8ebc:	000c1e70 	.word	0x000c1e70

000b8ec0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8ec4:	b089      	sub	sp, #36	; 0x24
   b8ec6:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b8eca:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8ecc:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b8ed0:	9304      	str	r3, [sp, #16]
   b8ed2:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b8ed6:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8ed8:	9305      	str	r3, [sp, #20]
   b8eda:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b8ede:	4604      	mov	r4, r0
    startWrite();
   b8ee0:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b8ee2:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b8ee6:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b8eea:	bf48      	it	mi
   b8eec:	f108 020e 	addmi.w	r2, r8, #14
   b8ef0:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b8ef4:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b8ef6:	4635      	mov	r5, r6
   b8ef8:	9b03      	ldr	r3, [sp, #12]
   b8efa:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b8efc:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b8f00:	189a      	adds	r2, r3, r2
   b8f02:	9b05      	ldr	r3, [sp, #20]
   b8f04:	428b      	cmp	r3, r1
   b8f06:	b212      	sxth	r2, r2
   b8f08:	dd27      	ble.n	b8f5a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8f0a:	9b04      	ldr	r3, [sp, #16]
   b8f0c:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b8f0e:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8f12:	9306      	str	r3, [sp, #24]
   b8f14:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b8f18:	4580      	cmp	r8, r0
   b8f1a:	fa1f f189 	uxth.w	r1, r9
   b8f1e:	dd17      	ble.n	b8f50 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b8f20:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8f22:	bf05      	ittet	eq
   b8f24:	9b06      	ldreq	r3, [sp, #24]
   b8f26:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b8f28:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8f2a:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b8f2c:	bf18      	it	ne
   b8f2e:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b8f30:	062b      	lsls	r3, r5, #24
   b8f32:	d50a      	bpl.n	b8f4a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b8f34:	9b02      	ldr	r3, [sp, #8]
   b8f36:	6820      	ldr	r0, [r4, #0]
   b8f38:	9207      	str	r2, [sp, #28]
   b8f3a:	4419      	add	r1, r3
   b8f3c:	6983      	ldr	r3, [r0, #24]
   b8f3e:	b209      	sxth	r1, r1
   b8f40:	461f      	mov	r7, r3
   b8f42:	4620      	mov	r0, r4
   b8f44:	4653      	mov	r3, sl
   b8f46:	47b8      	blx	r7
   b8f48:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b8f4a:	f109 0901 	add.w	r9, r9, #1
   b8f4e:	e7e1      	b.n	b8f14 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b8f50:	9b01      	ldr	r3, [sp, #4]
   b8f52:	3301      	adds	r3, #1
   b8f54:	9301      	str	r3, [sp, #4]
   b8f56:	445e      	add	r6, fp
   b8f58:	e7ce      	b.n	b8ef8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b8f5a:	6823      	ldr	r3, [r4, #0]
   b8f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8f5e:	4620      	mov	r0, r4
}
   b8f60:	b009      	add	sp, #36	; 0x24
   b8f62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b8f66:	4718      	bx	r3

000b8f68 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b8f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8f6c:	ed2d 8b02 	vpush	{d8}
   b8f70:	b091      	sub	sp, #68	; 0x44
   b8f72:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b8f74:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b8f76:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b8f7a:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b8f7e:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b8f82:	9103      	str	r1, [sp, #12]
   b8f84:	461f      	mov	r7, r3
   b8f86:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b8f8a:	9304      	str	r3, [sp, #16]
   b8f8c:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b8f8e:	2a00      	cmp	r2, #0
   b8f90:	f040 80c5 	bne.w	b911e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b8f94:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b8f98:	428b      	cmp	r3, r1
   b8f9a:	f340 814c 	ble.w	b9236 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b8f9e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b8fa2:	42b3      	cmp	r3, r6
   b8fa4:	f340 8147 	ble.w	b9236 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b8fa8:	2306      	movs	r3, #6
   b8faa:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b8fae:	2b00      	cmp	r3, #0
   b8fb0:	f340 8141 	ble.w	b9236 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b8fb4:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b8fb8:	2b00      	cmp	r3, #0
   b8fba:	f340 813c 	ble.w	b9236 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b8fbe:	7f03      	ldrb	r3, [r0, #28]
   b8fc0:	b91b      	cbnz	r3, b8fca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b8fc2:	2faf      	cmp	r7, #175	; 0xaf
   b8fc4:	bf84      	itt	hi
   b8fc6:	3701      	addhi	r7, #1
   b8fc8:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b8fca:	f8db 3000 	ldr.w	r3, [fp]
   b8fce:	4658      	mov	r0, fp
   b8fd0:	695b      	ldr	r3, [r3, #20]
   b8fd2:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b8fd4:	2205      	movs	r2, #5
   b8fd6:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b8fd8:	2200      	movs	r2, #0
   b8fda:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b8fdc:	4a98      	ldr	r2, [pc, #608]	; (b9240 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b8fde:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b8fe2:	18d3      	adds	r3, r2, r3
   b8fe4:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b8fe6:	b2b3      	uxth	r3, r6
   b8fe8:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b8fea:	9a05      	ldr	r2, [sp, #20]
   b8fec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8fee:	5c9b      	ldrb	r3, [r3, r2]
   b8ff0:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8ff2:	b2ab      	uxth	r3, r5
   b8ff4:	930b      	str	r3, [sp, #44]	; 0x2c
   b8ff6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b8ffa:	9308      	str	r3, [sp, #32]
   b8ffc:	9b03      	ldr	r3, [sp, #12]
   b8ffe:	fb02 f905 	mul.w	r9, r2, r5
   b9002:	fa19 f983 	uxtah	r9, r9, r3
   b9006:	fa0f f389 	sxth.w	r3, r9
   b900a:	ee08 3a10 	vmov	s16, r3
   b900e:	2308      	movs	r3, #8
   b9010:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b9012:	9b03      	ldr	r3, [sp, #12]
   b9014:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b9018:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b901c:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b9020:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b9022:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b9026:	07d2      	lsls	r2, r2, #31
   b9028:	d552      	bpl.n	b90d0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b902a:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b902c:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b9030:	d13e      	bne.n	b90b0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b9032:	2c01      	cmp	r4, #1
   b9034:	d13c      	bne.n	b90b0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b9036:	699b      	ldr	r3, [r3, #24]
   b9038:	9906      	ldr	r1, [sp, #24]
   b903a:	461f      	mov	r7, r3
   b903c:	9b04      	ldr	r3, [sp, #16]
   b903e:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b9040:	b212      	sxth	r2, r2
   b9042:	4651      	mov	r1, sl
   b9044:	4658      	mov	r0, fp
   b9046:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b9048:	f109 0301 	add.w	r3, r9, #1
   b904c:	fa4f f983 	sxtb.w	r9, r3
   b9050:	9b07      	ldr	r3, [sp, #28]
   b9052:	085b      	lsrs	r3, r3, #1
   b9054:	9307      	str	r3, [sp, #28]
   b9056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b9058:	3b01      	subs	r3, #1
   b905a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b905e:	930a      	str	r3, [sp, #40]	; 0x28
   b9060:	d1de      	bne.n	b9020 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b9062:	9f05      	ldr	r7, [sp, #20]
   b9064:	3701      	adds	r7, #1
   b9066:	b27b      	sxtb	r3, r7
   b9068:	9305      	str	r3, [sp, #20]
   b906a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b906c:	3b01      	subs	r3, #1
   b906e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b9072:	9309      	str	r3, [sp, #36]	; 0x24
   b9074:	d1b9      	bne.n	b8fea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b9076:	9b04      	ldr	r3, [sp, #16]
   b9078:	4543      	cmp	r3, r8
   b907a:	d00f      	beq.n	b909c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b907c:	2d01      	cmp	r5, #1
   b907e:	f8db 3000 	ldr.w	r3, [fp]
   b9082:	d13b      	bne.n	b90fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b9084:	2c01      	cmp	r4, #1
   b9086:	d139      	bne.n	b90fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b9088:	9908      	ldr	r1, [sp, #32]
   b908a:	f8cd 8000 	str.w	r8, [sp]
   b908e:	3105      	adds	r1, #5
   b9090:	6a1c      	ldr	r4, [r3, #32]
   b9092:	4632      	mov	r2, r6
   b9094:	2308      	movs	r3, #8
   b9096:	b209      	sxth	r1, r1
   b9098:	4658      	mov	r0, fp
   b909a:	47a0      	blx	r4
        endWrite();
   b909c:	f8db 3000 	ldr.w	r3, [fp]
   b90a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b90a2:	4658      	mov	r0, fp
}
   b90a4:	b011      	add	sp, #68	; 0x44
   b90a6:	ecbd 8b02 	vpop	{d8}
   b90aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b90ae:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b90b0:	9906      	ldr	r1, [sp, #24]
   b90b2:	fb14 f202 	smulbb	r2, r4, r2
   b90b6:	440a      	add	r2, r1
   b90b8:	9904      	ldr	r1, [sp, #16]
   b90ba:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b90bc:	9400      	str	r4, [sp, #0]
   b90be:	69db      	ldr	r3, [r3, #28]
   b90c0:	ee18 1a10 	vmov	r1, s16
   b90c4:	461f      	mov	r7, r3
   b90c6:	b212      	sxth	r2, r2
   b90c8:	462b      	mov	r3, r5
   b90ca:	4658      	mov	r0, fp
   b90cc:	47b8      	blx	r7
   b90ce:	e7bb      	b.n	b9048 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b90d0:	9a04      	ldr	r2, [sp, #16]
   b90d2:	4542      	cmp	r2, r8
   b90d4:	d0b8      	beq.n	b9048 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b90d6:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b90d8:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b90dc:	d107      	bne.n	b90ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b90de:	2c01      	cmp	r4, #1
   b90e0:	d105      	bne.n	b90ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b90e2:	699b      	ldr	r3, [r3, #24]
   b90e4:	9906      	ldr	r1, [sp, #24]
   b90e6:	461f      	mov	r7, r3
   b90e8:	440a      	add	r2, r1
   b90ea:	4643      	mov	r3, r8
   b90ec:	e7a8      	b.n	b9040 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b90ee:	9906      	ldr	r1, [sp, #24]
   b90f0:	f8cd 8004 	str.w	r8, [sp, #4]
   b90f4:	fb14 f202 	smulbb	r2, r4, r2
   b90f8:	440a      	add	r2, r1
   b90fa:	e7df      	b.n	b90bc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b90fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b90fe:	f8cd 8004 	str.w	r8, [sp, #4]
   b9102:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b9106:	9a08      	ldr	r2, [sp, #32]
   b9108:	00e4      	lsls	r4, r4, #3
   b910a:	440a      	add	r2, r1
   b910c:	4611      	mov	r1, r2
   b910e:	9400      	str	r4, [sp, #0]
   b9110:	69dc      	ldr	r4, [r3, #28]
   b9112:	4632      	mov	r2, r6
   b9114:	462b      	mov	r3, r5
   b9116:	b209      	sxth	r1, r1
   b9118:	4658      	mov	r0, fp
   b911a:	47a0      	blx	r4
        endWrite();
   b911c:	e7be      	b.n	b909c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b911e:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b9120:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b9122:	6812      	ldr	r2, [r2, #0]
   b9124:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b9126:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b9128:	b2ff      	uxtb	r7, r7
   b912a:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b912e:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b9132:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b9134:	789a      	ldrb	r2, [r3, #2]
   b9136:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b9138:	78da      	ldrb	r2, [r3, #3]
   b913a:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b913c:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b913e:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b9142:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b9146:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b9148:	d801      	bhi.n	b914e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b914a:	2c01      	cmp	r4, #1
   b914c:	d957      	bls.n	b91fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b914e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b9152:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b9154:	fa0f f38a 	sxth.w	r3, sl
   b9158:	9307      	str	r3, [sp, #28]
        startWrite();
   b915a:	f8db 3000 	ldr.w	r3, [fp]
   b915e:	4658      	mov	r0, fp
   b9160:	695b      	ldr	r3, [r3, #20]
   b9162:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b9164:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b9166:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b916a:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b916c:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b9170:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b9172:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b9174:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b9176:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b9178:	429f      	cmp	r7, r3
   b917a:	d28f      	bcs.n	b909c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b917c:	9b07      	ldr	r3, [sp, #28]
   b917e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b9180:	443b      	add	r3, r7
   b9182:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b9186:	2200      	movs	r2, #0
   b9188:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b918a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b918c:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b918e:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b9192:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b9196:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b919a:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b919c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b919e:	9905      	ldr	r1, [sp, #20]
   b91a0:	4291      	cmp	r1, r2
   b91a2:	d241      	bcs.n	b9228 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b91a4:	1c5a      	adds	r2, r3, #1
   b91a6:	b2d2      	uxtb	r2, r2
   b91a8:	075b      	lsls	r3, r3, #29
   b91aa:	920d      	str	r2, [sp, #52]	; 0x34
   b91ac:	d107      	bne.n	b91be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b91ae:	9b06      	ldr	r3, [sp, #24]
   b91b0:	9906      	ldr	r1, [sp, #24]
   b91b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b91b4:	3301      	adds	r3, #1
   b91b6:	b29b      	uxth	r3, r3
   b91b8:	f812 9001 	ldrb.w	r9, [r2, r1]
   b91bc:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b91be:	f019 0f80 	tst.w	r9, #128	; 0x80
   b91c2:	d012      	beq.n	b91ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b91c4:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b91c6:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b91ca:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b91ce:	d11a      	bne.n	b9206 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b91d0:	2c01      	cmp	r4, #1
   b91d2:	d118      	bne.n	b9206 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b91d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b91d6:	699b      	ldr	r3, [r3, #24]
   b91d8:	4411      	add	r1, r2
   b91da:	9a05      	ldr	r2, [sp, #20]
   b91dc:	4411      	add	r1, r2
   b91de:	461e      	mov	r6, r3
   b91e0:	4652      	mov	r2, sl
   b91e2:	9b04      	ldr	r3, [sp, #16]
   b91e4:	b209      	sxth	r1, r1
   b91e6:	4658      	mov	r0, fp
   b91e8:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b91ea:	9e05      	ldr	r6, [sp, #20]
   b91ec:	3601      	adds	r6, #1
   b91ee:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b91f0:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b91f4:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b91f6:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b91fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b91fc:	e7ce      	b.n	b919c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b91fe:	2300      	movs	r3, #0
   b9200:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b9204:	e7a9      	b.n	b915a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b9206:	9805      	ldr	r0, [sp, #20]
   b9208:	9a08      	ldr	r2, [sp, #32]
   b920a:	4402      	add	r2, r0
   b920c:	fb02 1105 	mla	r1, r2, r5, r1
   b9210:	9a04      	ldr	r2, [sp, #16]
   b9212:	e9cd 4200 	strd	r4, r2, [sp]
   b9216:	69db      	ldr	r3, [r3, #28]
   b9218:	ee18 2a10 	vmov	r2, s16
   b921c:	461e      	mov	r6, r3
   b921e:	b209      	sxth	r1, r1
   b9220:	462b      	mov	r3, r5
   b9222:	4658      	mov	r0, fp
   b9224:	47b0      	blx	r6
   b9226:	e7e0      	b.n	b91ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b9228:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b922a:	3701      	adds	r7, #1
   b922c:	4498      	add	r8, r3
   b922e:	fa5f f888 	uxtb.w	r8, r8
   b9232:	b2ff      	uxtb	r7, r7
   b9234:	e79f      	b.n	b9176 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b9236:	b011      	add	sp, #68	; 0x44
   b9238:	ecbd 8b02 	vpop	{d8}
   b923c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9240:	000c1967 	.word	0x000c1967

000b9244 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b9244:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b9246:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b9248:	b085      	sub	sp, #20
   b924a:	4604      	mov	r4, r0
   b924c:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b924e:	2a00      	cmp	r2, #0
   b9250:	d134      	bne.n	b92bc <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b9252:	290a      	cmp	r1, #10
   b9254:	d108      	bne.n	b9268 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b9256:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b9258:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b925a:	7e42      	ldrb	r2, [r0, #25]
   b925c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b9260:	8263      	strh	r3, [r4, #18]
}
   b9262:	2001      	movs	r0, #1
   b9264:	b005      	add	sp, #20
   b9266:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b9268:	290d      	cmp	r1, #13
   b926a:	d0fa      	beq.n	b9262 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b926c:	7ee1      	ldrb	r1, [r4, #27]
   b926e:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b9270:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b9272:	b171      	cbz	r1, b9292 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b9274:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b9278:	2106      	movs	r1, #6
   b927a:	fb11 6100 	smlabb	r1, r1, r0, r6
   b927e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b9282:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b9284:	bfc1      	itttt	gt
   b9286:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b928a:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b928c:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b9290:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b9292:	8ae2      	ldrh	r2, [r4, #22]
   b9294:	9201      	str	r2, [sp, #4]
   b9296:	8aa2      	ldrh	r2, [r4, #20]
   b9298:	9200      	str	r2, [sp, #0]
   b929a:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b929e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b92a2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b92a6:	4620      	mov	r0, r4
   b92a8:	f7ff fe5e 	bl	b8f68 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b92ac:	7e23      	ldrb	r3, [r4, #24]
   b92ae:	8a22      	ldrh	r2, [r4, #16]
   b92b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b92b4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b92b8:	8223      	strh	r3, [r4, #16]
   b92ba:	e7d2      	b.n	b9262 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b92bc:	290a      	cmp	r1, #10
   b92be:	d107      	bne.n	b92d0 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b92c0:	2300      	movs	r3, #0
   b92c2:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b92c4:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b92c6:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b92c8:	8a43      	ldrh	r3, [r0, #18]
   b92ca:	fb01 3302 	mla	r3, r1, r2, r3
   b92ce:	e7c7      	b.n	b9260 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b92d0:	290d      	cmp	r1, #13
   b92d2:	d0c6      	beq.n	b9262 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b92d4:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b92d6:	42a9      	cmp	r1, r5
   b92d8:	d3c3      	bcc.n	b9262 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b92da:	7a51      	ldrb	r1, [r2, #9]
   b92dc:	4299      	cmp	r1, r3
   b92de:	d3c0      	bcc.n	b9262 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b92e0:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b92e2:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b92e4:	b2ed      	uxtb	r5, r5
   b92e6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b92ea:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b92ec:	b328      	cbz	r0, b933a <_ZN12Adafruit_GFX5writeEh+0xf6>
   b92ee:	78e9      	ldrb	r1, [r5, #3]
   b92f0:	b319      	cbz	r1, b933a <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b92f2:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b92f4:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b92f6:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b92f8:	b191      	cbz	r1, b9320 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b92fa:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b92fe:	4408      	add	r0, r1
   b9300:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b9304:	fb06 1100 	mla	r1, r6, r0, r1
   b9308:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b930c:	4281      	cmp	r1, r0
   b930e:	dd07      	ble.n	b9320 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b9310:	2000      	movs	r0, #0
   b9312:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b9314:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b9318:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b931a:	fb02 1207 	mla	r2, r2, r7, r1
   b931e:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b9320:	8ae2      	ldrh	r2, [r4, #22]
   b9322:	9201      	str	r2, [sp, #4]
   b9324:	8aa2      	ldrh	r2, [r4, #20]
   b9326:	9200      	str	r2, [sp, #0]
   b9328:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b932c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b9330:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b9334:	4620      	mov	r0, r4
   b9336:	f7ff fe17 	bl	b8f68 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b933a:	7929      	ldrb	r1, [r5, #4]
   b933c:	7e22      	ldrb	r2, [r4, #24]
   b933e:	8a23      	ldrh	r3, [r4, #16]
   b9340:	fb01 3302 	mla	r3, r1, r2, r3
   b9344:	e7b8      	b.n	b92b8 <_ZN12Adafruit_GFX5writeEh+0x74>

000b9346 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b9346:	2901      	cmp	r1, #1
   b9348:	bf38      	it	cc
   b934a:	2101      	movcc	r1, #1
   b934c:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b934e:	7641      	strb	r1, [r0, #25]
}
   b9350:	4770      	bx	lr

000b9352 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   b9352:	6042      	str	r2, [r0, #4]
  _begun = false;
   b9354:	2200      	movs	r2, #0
   b9356:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   b9358:	2220      	movs	r2, #32
  _addr = addr;
   b935a:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   b935c:	60c2      	str	r2, [r0, #12]
#endif
}
   b935e:	4770      	bx	lr

000b9360 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   b9360:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   b9362:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   b9364:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   b9366:	b153      	cbz	r3, b937e <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   b9368:	7821      	ldrb	r1, [r4, #0]
   b936a:	6860      	ldr	r0, [r4, #4]
   b936c:	f003 ff66 	bl	bd23c <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   b9370:	6860      	ldr	r0, [r4, #4]
   b9372:	f003 ff6b 	bl	bd24c <_ZN7TwoWire15endTransmissionEv>
   b9376:	fab0 f080 	clz	r0, r0
   b937a:	0940      	lsrs	r0, r0, #5
    return true;
  }
  return false;
}
   b937c:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   b937e:	2101      	movs	r1, #1
   b9380:	f000 f803 	bl	b938a <_ZN18Adafruit_I2CDevice5beginEb>
   b9384:	2800      	cmp	r0, #0
   b9386:	d1ef      	bne.n	b9368 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   b9388:	e7f8      	b.n	b937c <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000b938a <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b938a:	b538      	push	{r3, r4, r5, lr}
   b938c:	4604      	mov	r4, r0
  _wire->begin();
   b938e:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b9390:	460d      	mov	r5, r1
  _wire->begin();
   b9392:	f003 ff4d 	bl	bd230 <_ZN7TwoWire5beginEv>
  _begun = true;
   b9396:	2001      	movs	r0, #1
   b9398:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   b939a:	b125      	cbz	r5, b93a6 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   b939c:	4620      	mov	r0, r4
}
   b939e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   b93a2:	f7ff bfdd 	b.w	b9360 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   b93a6:	bd38      	pop	{r3, r4, r5, pc}

000b93a8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   b93a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b93ac:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   b93b0:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   b93b2:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   b93b4:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   b93b6:	4432      	add	r2, r6
   b93b8:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   b93ba:	4604      	mov	r4, r0
   b93bc:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   b93be:	d902      	bls.n	b93c6 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   b93c0:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
   b93c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   b93c6:	7801      	ldrb	r1, [r0, #0]
   b93c8:	6840      	ldr	r0, [r0, #4]
   b93ca:	f003 ff37 	bl	bd23c <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b93ce:	b97e      	cbnz	r6, b93f0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   b93d0:	6860      	ldr	r0, [r4, #4]
   b93d2:	6803      	ldr	r3, [r0, #0]
   b93d4:	462a      	mov	r2, r5
   b93d6:	68db      	ldr	r3, [r3, #12]
   b93d8:	4641      	mov	r1, r8
   b93da:	4798      	blx	r3
   b93dc:	4285      	cmp	r5, r0
   b93de:	d1ef      	bne.n	b93c0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   b93e0:	6860      	ldr	r0, [r4, #4]
   b93e2:	4639      	mov	r1, r7
   b93e4:	f003 ff2e 	bl	bd244 <_ZN7TwoWire15endTransmissionEh>
   b93e8:	fab0 f080 	clz	r0, r0
   b93ec:	0940      	lsrs	r0, r0, #5
   b93ee:	e7e8      	b.n	b93c2 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b93f0:	f1b9 0f00 	cmp.w	r9, #0
   b93f4:	d0ec      	beq.n	b93d0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   b93f6:	6860      	ldr	r0, [r4, #4]
   b93f8:	6803      	ldr	r3, [r0, #0]
   b93fa:	4632      	mov	r2, r6
   b93fc:	68db      	ldr	r3, [r3, #12]
   b93fe:	4649      	mov	r1, r9
   b9400:	4798      	blx	r3
   b9402:	4286      	cmp	r6, r0
   b9404:	d1dc      	bne.n	b93c0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   b9406:	e7e3      	b.n	b93d0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000b9408 <_ZN18Adafruit_I2CDevice8setSpeedEm>:
 *    underlying Wire support!
 *    @param desiredclk The desired I2C SCL frequency
 *    @return True if this platform supports changing I2C speed.
 *    Not necessarily that the speed was achieved!
 */
bool Adafruit_I2CDevice::setSpeed(uint32_t desiredclk) {
   b9408:	b508      	push	{r3, lr}

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b940a:	6840      	ldr	r0, [r0, #4]
   b940c:	f003 ff0c 	bl	bd228 <_ZN7TwoWire8setSpeedEm>
  _wire->setClock(desiredclk);
  return true;
#else
  return false;
#endif
}
   b9410:	2001      	movs	r0, #1
   b9412:	bd08      	pop	{r3, pc}

000b9414 <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
   b9414:	b510      	push	{r4, lr}
   b9416:	4604      	mov	r4, r0
  if (_spiSetting) {
   b9418:	6840      	ldr	r0, [r0, #4]
   b941a:	b110      	cbz	r0, b9422 <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
   b941c:	6803      	ldr	r3, [r0, #0]
   b941e:	689b      	ldr	r3, [r3, #8]
   b9420:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
   b9422:	4620      	mov	r0, r4
   b9424:	bd10      	pop	{r4, pc}

000b9426 <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
   b9426:	b538      	push	{r3, r4, r5, lr}
   b9428:	4604      	mov	r4, r0
  pinMode(_cs, OUTPUT);
   b942a:	f990 000e 	ldrsb.w	r0, [r0, #14]
   b942e:	2101      	movs	r1, #1
   b9430:	b280      	uxth	r0, r0
   b9432:	f004 fda1 	bl	bdf78 <pinMode>
  digitalWrite(_cs, HIGH);
   b9436:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b943a:	2101      	movs	r1, #1
   b943c:	b280      	uxth	r0, r0
   b943e:	f004 fdac 	bl	bdf9a <digitalWrite>

  if (_spi) { // hardware SPI
   b9442:	6825      	ldr	r5, [r4, #0]
   b9444:	b135      	cbz	r5, b9454 <_ZN18Adafruit_SPIDevice5beginEv+0x2e>
    _spi->begin();
   b9446:	4628      	mov	r0, r5
   b9448:	f004 f904 	bl	bd654 <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
   b944c:	2001      	movs	r0, #1
   b944e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
   b9452:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
   b9454:	f994 000f 	ldrsb.w	r0, [r4, #15]
   b9458:	2101      	movs	r1, #1
   b945a:	b280      	uxth	r0, r0
   b945c:	f004 fd8c 	bl	bdf78 <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
   b9460:	7b63      	ldrb	r3, [r4, #13]
   b9462:	f994 000f 	ldrsb.w	r0, [r4, #15]
   b9466:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
   b9468:	bf94      	ite	ls
   b946a:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
   b946c:	2101      	movhi	r1, #1
   b946e:	b280      	uxth	r0, r0
   b9470:	f004 fd93 	bl	bdf9a <digitalWrite>
    if (_mosi != -1) {
   b9474:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b9478:	1c42      	adds	r2, r0, #1
   b947a:	d009      	beq.n	b9490 <_ZN18Adafruit_SPIDevice5beginEv+0x6a>
      pinMode(_mosi, OUTPUT);
   b947c:	2101      	movs	r1, #1
   b947e:	b280      	uxth	r0, r0
   b9480:	f004 fd7a 	bl	bdf78 <pinMode>
      digitalWrite(_mosi, HIGH);
   b9484:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b9488:	2101      	movs	r1, #1
   b948a:	b280      	uxth	r0, r0
   b948c:	f004 fd85 	bl	bdf9a <digitalWrite>
    if (_miso != -1) {
   b9490:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b9494:	1c43      	adds	r3, r0, #1
   b9496:	d0d9      	beq.n	b944c <_ZN18Adafruit_SPIDevice5beginEv+0x26>
      pinMode(_miso, INPUT);
   b9498:	2100      	movs	r1, #0
   b949a:	b280      	uxth	r0, r0
   b949c:	f004 fd6c 	bl	bdf78 <pinMode>
   b94a0:	e7d4      	b.n	b944c <_ZN18Adafruit_SPIDevice5beginEv+0x26>
	...

000b94a4 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b94a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b94a8:	4604      	mov	r4, r0
  if (_spi) {
   b94aa:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b94ac:	b085      	sub	sp, #20
   b94ae:	460d      	mov	r5, r1
  if (_spi) {
   b94b0:	b140      	cbz	r0, b94c4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   b94b2:	2300      	movs	r3, #0
   b94b4:	9300      	str	r3, [sp, #0]
   b94b6:	4613      	mov	r3, r2
   b94b8:	460a      	mov	r2, r1
   b94ba:	f004 f96d 	bl	bd798 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   b94be:	b005      	add	sp, #20
   b94c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   b94c4:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b94c6:	68a0      	ldr	r0, [r4, #8]
   b94c8:	4f48      	ldr	r7, [pc, #288]	; (b95ec <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   b94ca:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   b94ce:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b94d0:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   b94d2:	bf0c      	ite	eq
   b94d4:	f04f 0b01 	moveq.w	fp, #1
   b94d8:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b94dc:	ea1b 0f03 	tst.w	fp, r3
   b94e0:	eb01 0302 	add.w	r3, r1, r2
   b94e4:	bf0c      	ite	eq
   b94e6:	f04f 0901 	moveq.w	r9, #1
   b94ea:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b94ee:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   b94f0:	9303      	str	r3, [sp, #12]
   b94f2:	9b03      	ldr	r3, [sp, #12]
   b94f4:	42ab      	cmp	r3, r5
   b94f6:	d0e2      	beq.n	b94be <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   b94f8:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   b94fc:	465e      	mov	r6, fp
    uint8_t reply = 0;
   b94fe:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   b9502:	b117      	cbz	r7, b950a <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b9504:	4638      	mov	r0, r7
   b9506:	f000 fcd3 	bl	b9eb0 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   b950a:	7b63      	ldrb	r3, [r4, #13]
   b950c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   b9510:	d141      	bne.n	b9596 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b9512:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b9516:	1c5a      	adds	r2, r3, #1
   b9518:	d00f      	beq.n	b953a <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   b951a:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b951e:	bf14      	ite	ne
   b9520:	2301      	movne	r3, #1
   b9522:	2300      	moveq	r3, #0
   b9524:	454b      	cmp	r3, r9
   b9526:	d008      	beq.n	b953a <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   b9528:	6963      	ldr	r3, [r4, #20]
   b952a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b952c:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   b952e:	2900      	cmp	r1, #0
   b9530:	d02c      	beq.n	b958c <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   b9532:	4302      	orrs	r2, r0
   b9534:	601a      	str	r2, [r3, #0]
   b9536:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   b953a:	69a1      	ldr	r1, [r4, #24]
   b953c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b953e:	680a      	ldr	r2, [r1, #0]
   b9540:	4313      	orrs	r3, r2
   b9542:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b9544:	b117      	cbz	r7, b954c <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   b9546:	4638      	mov	r0, r7
   b9548:	f000 fcb2 	bl	b9eb0 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   b954c:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b9550:	3301      	adds	r3, #1
   b9552:	d006      	beq.n	b9562 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   b9554:	69e3      	ldr	r3, [r4, #28]
   b9556:	681a      	ldr	r2, [r3, #0]
   b9558:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b955a:	421a      	tst	r2, r3
            reply |= b;
   b955c:	bf18      	it	ne
   b955e:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   b9562:	69a1      	ldr	r1, [r4, #24]
   b9564:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b9566:	680a      	ldr	r2, [r1, #0]
   b9568:	ea22 0303 	bic.w	r3, r2, r3
   b956c:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   b956e:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b9572:	3301      	adds	r3, #1
        buffer[i] = reply;
   b9574:	bf18      	it	ne
   b9576:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   b957a:	7b23      	ldrb	r3, [r4, #12]
   b957c:	2b00      	cmp	r3, #0
   b957e:	d132      	bne.n	b95e6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   b9580:	0076      	lsls	r6, r6, #1
   b9582:	b2f6      	uxtb	r6, r6
   b9584:	2e00      	cmp	r6, #0
   b9586:	d1bc      	bne.n	b9502 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   b9588:	3501      	adds	r5, #1
   b958a:	e7b2      	b.n	b94f2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   b958c:	ea22 0200 	bic.w	r2, r2, r0
   b9590:	601a      	str	r2, [r3, #0]
   b9592:	4689      	mov	r9, r1
   b9594:	e7d1      	b.n	b953a <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   b9596:	69a1      	ldr	r1, [r4, #24]
   b9598:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b959a:	680a      	ldr	r2, [r1, #0]
   b959c:	4313      	orrs	r3, r2
   b959e:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b95a0:	b117      	cbz	r7, b95a8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   b95a2:	4638      	mov	r0, r7
   b95a4:	f000 fc84 	bl	b9eb0 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   b95a8:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b95ac:	3301      	adds	r3, #1
   b95ae:	d008      	beq.n	b95c2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   b95b0:	6963      	ldr	r3, [r4, #20]
   b95b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b95b4:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   b95b6:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   b95ba:	bf14      	ite	ne
   b95bc:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   b95be:	438a      	biceq	r2, r1
   b95c0:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   b95c2:	69a1      	ldr	r1, [r4, #24]
   b95c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b95c6:	680a      	ldr	r2, [r1, #0]
   b95c8:	ea22 0303 	bic.w	r3, r2, r3
   b95cc:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   b95ce:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b95d2:	3301      	adds	r3, #1
   b95d4:	d0cb      	beq.n	b956e <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   b95d6:	69e3      	ldr	r3, [r4, #28]
   b95d8:	681a      	ldr	r2, [r3, #0]
   b95da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b95dc:	421a      	tst	r2, r3
            reply |= b;
   b95de:	bf18      	it	ne
   b95e0:	ea46 0808 	orrne.w	r8, r6, r8
   b95e4:	e7c3      	b.n	b956e <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   b95e6:	0876      	lsrs	r6, r6, #1
   b95e8:	e7cc      	b.n	b9584 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   b95ea:	bf00      	nop
   b95ec:	0007a120 	.word	0x0007a120

000b95f0 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   b95f0:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   b95f2:	2201      	movs	r2, #1
  uint8_t data = send;
   b95f4:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   b95f8:	f10d 0107 	add.w	r1, sp, #7
   b95fc:	f7ff ff52 	bl	b94a4 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   b9600:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b9604:	b003      	add	sp, #12
   b9606:	f85d fb04 	ldr.w	pc, [sp], #4

000b960a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   b960a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b960e:	4604      	mov	r4, r0
  if (_spi) {
   b9610:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   b9612:	460e      	mov	r6, r1
   b9614:	4617      	mov	r7, r2
   b9616:	461d      	mov	r5, r3
  if (_spi) {
   b9618:	b110      	cbz	r0, b9620 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   b961a:	6861      	ldr	r1, [r4, #4]
   b961c:	f004 f848 	bl	bd6b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   b9620:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b9624:	2100      	movs	r1, #0
   b9626:	b280      	uxth	r0, r0
   b9628:	f004 fcb7 	bl	bdf9a <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   b962c:	9b06      	ldr	r3, [sp, #24]
   b962e:	eb05 0803 	add.w	r8, r5, r3
   b9632:	4545      	cmp	r5, r8
   b9634:	d108      	bne.n	b9648 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   b9636:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   b9638:	42b7      	cmp	r7, r6
   b963a:	d00b      	beq.n	b9654 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   b963c:	f816 1b01 	ldrb.w	r1, [r6], #1
   b9640:	4620      	mov	r0, r4
   b9642:	f7ff ffd5 	bl	b95f0 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   b9646:	e7f7      	b.n	b9638 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   b9648:	f815 1b01 	ldrb.w	r1, [r5], #1
   b964c:	4620      	mov	r0, r4
   b964e:	f7ff ffcf 	bl	b95f0 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   b9652:	e7ee      	b.n	b9632 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   b9654:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b9658:	2101      	movs	r1, #1
   b965a:	b280      	uxth	r0, r0
   b965c:	f004 fc9d 	bl	bdf9a <digitalWrite>

  if (_spi) {
   b9660:	6820      	ldr	r0, [r4, #0]
   b9662:	b108      	cbz	r0, b9668 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   b9664:	f004 f80a 	bl	bd67c <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b9668:	2001      	movs	r0, #1
   b966a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b966e <_ZN17Adafruit_GrayOLED9drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b966e:	2900      	cmp	r1, #0
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b9670:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b9672:	db66      	blt.n	b9742 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   b9674:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b9678:	428c      	cmp	r4, r1
   b967a:	dd62      	ble.n	b9742 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   b967c:	2a00      	cmp	r2, #0
   b967e:	db60      	blt.n	b9742 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   b9680:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b9684:	4294      	cmp	r4, r2
   b9686:	dd5c      	ble.n	b9742 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b9688:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
   b968a:	2c02      	cmp	r4, #2
   b968c:	d05a      	beq.n	b9744 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd6>
   b968e:	2c03      	cmp	r4, #3
   b9690:	d061      	beq.n	b9756 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xe8>
   b9692:	2c01      	cmp	r4, #1
   b9694:	d104      	bne.n	b96a0 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
    case 1:
      grayoled_swap(x, y);
      x = WIDTH - x - 1;
   b9696:	8904      	ldrh	r4, [r0, #8]
   b9698:	43d2      	mvns	r2, r2
   b969a:	4414      	add	r4, r2
      break;
   b969c:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b969e:	b221      	sxth	r1, r4
      y = HEIGHT - y - 1;
      break;
    }

    // adjust dirty window
    window_x1 = min(window_x1, x);
   b96a0:	f9b0 4038 	ldrsh.w	r4, [r0, #56]	; 0x38
   b96a4:	428c      	cmp	r4, r1
   b96a6:	bfa8      	it	ge
   b96a8:	460c      	movge	r4, r1
   b96aa:	8704      	strh	r4, [r0, #56]	; 0x38
    window_y1 = min(window_y1, y);
   b96ac:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
   b96b0:	4294      	cmp	r4, r2
   b96b2:	bfa8      	it	ge
   b96b4:	4614      	movge	r4, r2
   b96b6:	8744      	strh	r4, [r0, #58]	; 0x3a
    window_x2 = max(window_x2, x);
   b96b8:	f9b0 403c 	ldrsh.w	r4, [r0, #60]	; 0x3c
   b96bc:	428c      	cmp	r4, r1
   b96be:	bfb8      	it	lt
   b96c0:	460c      	movlt	r4, r1
   b96c2:	8784      	strh	r4, [r0, #60]	; 0x3c
    window_y2 = max(window_y2, y);
   b96c4:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
   b96c8:	4294      	cmp	r4, r2
   b96ca:	bfb8      	it	lt
   b96cc:	4614      	movlt	r4, r2
   b96ce:	87c4      	strh	r4, [r0, #62]	; 0x3e

    if (_bpp == 1) {
   b96d0:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   b96d4:	2c01      	cmp	r4, #1
   b96d6:	d116      	bne.n	b9706 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      switch (color) {
   b96d8:	2b01      	cmp	r3, #1
   b96da:	d042      	beq.n	b9762 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xf4>
   b96dc:	2b02      	cmp	r3, #2
   b96de:	d051      	beq.n	b9784 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x116>
   b96e0:	b98b      	cbnz	r3, b9706 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      case MONOOLED_WHITE:
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
        break;
      case MONOOLED_BLACK:
        buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
   b96e2:	2a00      	cmp	r2, #0
   b96e4:	8905      	ldrh	r5, [r0, #8]
   b96e6:	6b47      	ldr	r7, [r0, #52]	; 0x34
   b96e8:	4614      	mov	r4, r2
   b96ea:	bfb8      	it	lt
   b96ec:	1dd4      	addlt	r4, r2, #7
   b96ee:	10e4      	asrs	r4, r4, #3
   b96f0:	fb14 1405 	smlabb	r4, r4, r5, r1
   b96f4:	f002 0607 	and.w	r6, r2, #7
   b96f8:	2501      	movs	r5, #1
   b96fa:	fa05 f606 	lsl.w	r6, r5, r6
   b96fe:	5d3d      	ldrb	r5, [r7, r4]
   b9700:	ea25 0506 	bic.w	r5, r5, r6
   b9704:	553d      	strb	r5, [r7, r4]
      case MONOOLED_INVERSE:
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
        break;
      }
    }
    if (_bpp == 4) {
   b9706:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   b970a:	2c04      	cmp	r4, #4
   b970c:	d119      	bne.n	b9742 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
      uint8_t *pixelptr = &buffer[x / 2 + (y * WIDTH / 2)];
   b970e:	8904      	ldrh	r4, [r0, #8]
   b9710:	fb14 f202 	smulbb	r2, r4, r2
   b9714:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   b9718:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
   b971c:	f342 024f 	sbfx	r2, r2, #1, #16
   b9720:	eb02 0264 	add.w	r2, r2, r4, asr #1
   b9724:	6b44      	ldr	r4, [r0, #52]	; 0x34
      // Serial.printf("(%d, %d) -> offset %d\n", x, y, x/2 + (y * WIDTH / 2));
      if (x % 2 == 0) { // even, left nibble
        uint8_t t = pixelptr[0] & 0x0F;
   b9726:	5ca0      	ldrb	r0, [r4, r2]
      if (x % 2 == 0) { // even, left nibble
   b9728:	07c9      	lsls	r1, r1, #31
        t |= (color & 0xF) << 4;
        pixelptr[0] = t;
      } else { // odd, right lower nibble
        uint8_t t = pixelptr[0] & 0xF0;
        t |= color & 0xF;
   b972a:	bf4b      	itete	mi
   b972c:	f003 030f 	andmi.w	r3, r3, #15
        uint8_t t = pixelptr[0] & 0x0F;
   b9730:	f000 000f 	andpl.w	r0, r0, #15
        uint8_t t = pixelptr[0] & 0xF0;
   b9734:	f020 000f 	bicmi.w	r0, r0, #15
        t |= (color & 0xF) << 4;
   b9738:	ea40 1303 	orrpl.w	r3, r0, r3, lsl #4
        t |= color & 0xF;
   b973c:	bf48      	it	mi
   b973e:	4303      	orrmi	r3, r0
        pixelptr[0] = t;
   b9740:	54a3      	strb	r3, [r4, r2]
      }
    }
  }
}
   b9742:	bdf0      	pop	{r4, r5, r6, r7, pc}
      x = WIDTH - x - 1;
   b9744:	8904      	ldrh	r4, [r0, #8]
   b9746:	3c01      	subs	r4, #1
   b9748:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b974a:	8944      	ldrh	r4, [r0, #10]
   b974c:	43d2      	mvns	r2, r2
   b974e:	4422      	add	r2, r4
      x = WIDTH - x - 1;
   b9750:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b9752:	b212      	sxth	r2, r2
      break;
   b9754:	e7a4      	b.n	b96a0 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b9756:	8944      	ldrh	r4, [r0, #10]
   b9758:	3c01      	subs	r4, #1
   b975a:	1a64      	subs	r4, r4, r1
      break;
   b975c:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b975e:	b222      	sxth	r2, r4
      break;
   b9760:	e79e      	b.n	b96a0 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
   b9762:	2a00      	cmp	r2, #0
   b9764:	8905      	ldrh	r5, [r0, #8]
   b9766:	6b46      	ldr	r6, [r0, #52]	; 0x34
   b9768:	4614      	mov	r4, r2
   b976a:	bfb8      	it	lt
   b976c:	1dd4      	addlt	r4, r2, #7
   b976e:	10e4      	asrs	r4, r4, #3
   b9770:	fb14 1405 	smlabb	r4, r4, r5, r1
   b9774:	f002 0707 	and.w	r7, r2, #7
   b9778:	2501      	movs	r5, #1
   b977a:	40bd      	lsls	r5, r7
   b977c:	5d37      	ldrb	r7, [r6, r4]
   b977e:	433d      	orrs	r5, r7
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   b9780:	5535      	strb	r5, [r6, r4]
        break;
   b9782:	e7c0      	b.n	b9706 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   b9784:	2a00      	cmp	r2, #0
   b9786:	8905      	ldrh	r5, [r0, #8]
   b9788:	6b46      	ldr	r6, [r0, #52]	; 0x34
   b978a:	4614      	mov	r4, r2
   b978c:	bfb8      	it	lt
   b978e:	1dd4      	addlt	r4, r2, #7
   b9790:	10e4      	asrs	r4, r4, #3
   b9792:	fb14 1405 	smlabb	r4, r4, r5, r1
   b9796:	f002 0707 	and.w	r7, r2, #7
   b979a:	2501      	movs	r5, #1
   b979c:	40bd      	lsls	r5, r7
   b979e:	5d37      	ldrb	r7, [r6, r4]
   b97a0:	407d      	eors	r5, r7
   b97a2:	e7ed      	b.n	b9780 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x112>

000b97a4 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>:
Adafruit_GrayOLED::Adafruit_GrayOLED(uint8_t bpp, uint16_t w, uint16_t h,
   b97a4:	b538      	push	{r3, r4, r5, lr}
   b97a6:	460d      	mov	r5, r1
   b97a8:	4611      	mov	r1, r2
   b97aa:	4604      	mov	r4, r0
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   b97ac:	b21a      	sxth	r2, r3
   b97ae:	b209      	sxth	r1, r1
   b97b0:	f7ff fb70 	bl	b8e94 <_ZN12Adafruit_GFXC1Ess>
   b97b4:	9a06      	ldr	r2, [sp, #24]
   b97b6:	4b0b      	ldr	r3, [pc, #44]	; (b97e4 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm+0x40>)
   b97b8:	62e2      	str	r2, [r4, #44]	; 0x2c
   b97ba:	9a07      	ldr	r2, [sp, #28]
   b97bc:	6023      	str	r3, [r4, #0]
   b97be:	2300      	movs	r3, #0
   b97c0:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
   b97c4:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   b97c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b97cc:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
   b97d0:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   b97d4:	64a3      	str	r3, [r4, #72]	; 0x48
  _theWire = twi;
   b97d6:	9b04      	ldr	r3, [sp, #16]
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   b97d8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  _theWire = twi;
   b97dc:	6523      	str	r3, [r4, #80]	; 0x50
}
   b97de:	4620      	mov	r0, r4
   b97e0:	bd38      	pop	{r3, r4, r5, pc}
   b97e2:	bf00      	nop
   b97e4:	000c1ec8 	.word	0x000c1ec8

000b97e8 <_ZN17Adafruit_GrayOLEDD1Ev>:
Adafruit_GrayOLED::~Adafruit_GrayOLED(void) {
   b97e8:	b538      	push	{r3, r4, r5, lr}
   b97ea:	4b0c      	ldr	r3, [pc, #48]	; (b981c <_ZN17Adafruit_GrayOLEDD1Ev+0x34>)
   b97ec:	6003      	str	r3, [r0, #0]
   b97ee:	4604      	mov	r4, r0
  if (buffer) {
   b97f0:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b97f2:	b118      	cbz	r0, b97fc <_ZN17Adafruit_GrayOLEDD1Ev+0x14>
    free(buffer);
   b97f4:	f000 fe00 	bl	ba3f8 <free>
    buffer = NULL;
   b97f8:	2300      	movs	r3, #0
   b97fa:	6363      	str	r3, [r4, #52]	; 0x34
  if (spi_dev)
   b97fc:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b97fe:	b135      	cbz	r5, b980e <_ZN17Adafruit_GrayOLEDD1Ev+0x26>
    delete spi_dev;
   b9800:	4628      	mov	r0, r5
   b9802:	f7ff fe07 	bl	b9414 <_ZN18Adafruit_SPIDeviceD1Ev>
   b9806:	2138      	movs	r1, #56	; 0x38
   b9808:	4628      	mov	r0, r5
   b980a:	f7fa fc48 	bl	b409e <_ZdlPvj>
  if (i2c_dev)
   b980e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9810:	b110      	cbz	r0, b9818 <_ZN17Adafruit_GrayOLEDD1Ev+0x30>
    delete i2c_dev;
   b9812:	2110      	movs	r1, #16
   b9814:	f7fa fc43 	bl	b409e <_ZdlPvj>
}
   b9818:	4620      	mov	r0, r4
   b981a:	bd38      	pop	{r3, r4, r5, pc}
   b981c:	000c1ec8 	.word	0x000c1ec8

000b9820 <_ZN17Adafruit_GrayOLED12oled_commandEh>:
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   b9820:	b530      	push	{r4, r5, lr}
   b9822:	b087      	sub	sp, #28
  if (i2c_dev) {                // I2C
   b9824:	6a85      	ldr	r5, [r0, #40]	; 0x28
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   b9826:	f88d 100f 	strb.w	r1, [sp, #15]
   b982a:	4604      	mov	r4, r0
  if (i2c_dev) {                // I2C
   b982c:	b17d      	cbz	r5, b984e <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2e>
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   b982e:	2300      	movs	r3, #0
   b9830:	b2ca      	uxtb	r2, r1
    i2c_dev->write(buf, 2);
   b9832:	e9cd 3300 	strd	r3, r3, [sp]
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   b9836:	f88d 3014 	strb.w	r3, [sp, #20]
   b983a:	f88d 2015 	strb.w	r2, [sp, #21]
    i2c_dev->write(buf, 2);
   b983e:	2301      	movs	r3, #1
   b9840:	2202      	movs	r2, #2
   b9842:	a905      	add	r1, sp, #20
   b9844:	4628      	mov	r0, r5
   b9846:	f7ff fdaf 	bl	b93a8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   b984a:	b007      	add	sp, #28
   b984c:	bd30      	pop	{r4, r5, pc}
    digitalWrite(dcPin, LOW);
   b984e:	4629      	mov	r1, r5
   b9850:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   b9854:	f004 fba1 	bl	bdf9a <digitalWrite>
    spi_dev->write(&c, 1);
   b9858:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b985a:	9500      	str	r5, [sp, #0]
   b985c:	462b      	mov	r3, r5
   b985e:	2201      	movs	r2, #1
   b9860:	f10d 010f 	add.w	r1, sp, #15
   b9864:	f7ff fed1 	bl	b960a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
}
   b9868:	e7ef      	b.n	b984a <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2a>

000b986a <_ZN17Adafruit_GrayOLED13invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing MONOOLED_BLACK (value 0) pixels will actually draw
   white, MONOOLED_WHITE (value 1) will draw black.
*/
void Adafruit_GrayOLED::invertDisplay(bool i) {
  oled_command(i ? GRAYOLED_INVERTDISPLAY : GRAYOLED_NORMALDISPLAY);
   b986a:	2900      	cmp	r1, #0
   b986c:	bf14      	ite	ne
   b986e:	21a7      	movne	r1, #167	; 0xa7
   b9870:	21a6      	moveq	r1, #166	; 0xa6
   b9872:	f7ff bfd5 	b.w	b9820 <_ZN17Adafruit_GrayOLED12oled_commandEh>

000b9876 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>:
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   b9876:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (i2c_dev) {            // I2C
   b9878:	6a85      	ldr	r5, [r0, #40]	; 0x28
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   b987a:	b085      	sub	sp, #20
   b987c:	4604      	mov	r4, r0
   b987e:	460e      	mov	r6, r1
   b9880:	4617      	mov	r7, r2
  if (i2c_dev) {            // I2C
   b9882:	b165      	cbz	r5, b989e <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x28>
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   b9884:	2300      	movs	r3, #0
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   b9886:	f10d 000f 	add.w	r0, sp, #15
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   b988a:	f88d 300f 	strb.w	r3, [sp, #15]
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   b988e:	2301      	movs	r3, #1
   b9890:	9000      	str	r0, [sp, #0]
   b9892:	9301      	str	r3, [sp, #4]
   b9894:	4628      	mov	r0, r5
   b9896:	f7ff fd87 	bl	b93a8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   b989a:	b005      	add	sp, #20
   b989c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    digitalWrite(dcPin, LOW);
   b989e:	4629      	mov	r1, r5
   b98a0:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   b98a4:	f004 fb79 	bl	bdf9a <digitalWrite>
    if (!spi_dev->write((uint8_t *)c, n)) {
   b98a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b98aa:	9500      	str	r5, [sp, #0]
   b98ac:	462b      	mov	r3, r5
   b98ae:	463a      	mov	r2, r7
   b98b0:	4631      	mov	r1, r6
   b98b2:	f7ff feaa 	bl	b960a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   b98b6:	e7f0      	b.n	b989a <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x24>

000b98b8 <_ZN17Adafruit_GrayOLED12clearDisplayEv>:
void Adafruit_GrayOLED::clearDisplay(void) {
   b98b8:	b510      	push	{r4, lr}
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   b98ba:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
   b98be:	8903      	ldrh	r3, [r0, #8]
   b98c0:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   b98c4:	fb12 f203 	smulbb	r2, r2, r3
   b98c8:	1dcb      	adds	r3, r1, #7
   b98ca:	bf48      	it	mi
   b98cc:	f101 030e 	addmi.w	r3, r1, #14
   b98d0:	10db      	asrs	r3, r3, #3
void Adafruit_GrayOLED::clearDisplay(void) {
   b98d2:	4604      	mov	r4, r0
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   b98d4:	435a      	muls	r2, r3
   b98d6:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b98d8:	2100      	movs	r1, #0
   b98da:	f005 fb14 	bl	bef06 <memset>
  window_x1 = 0;
   b98de:	2300      	movs	r3, #0
   b98e0:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   b98e2:	8923      	ldrh	r3, [r4, #8]
   b98e4:	3b01      	subs	r3, #1
   b98e6:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   b98e8:	8963      	ldrh	r3, [r4, #10]
   b98ea:	3b01      	subs	r3, #1
   b98ec:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
   b98ee:	bd10      	pop	{r4, pc}

000b98f0 <_ZN17Adafruit_GrayOLED5_initEhb>:
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   b98f0:	b570      	push	{r4, r5, r6, lr}
  if ((!buffer) &&
   b98f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   b98f4:	4604      	mov	r4, r0
   b98f6:	460e      	mov	r6, r1
   b98f8:	4615      	mov	r5, r2
  if ((!buffer) &&
   b98fa:	b30b      	cbz	r3, b9940 <_ZN17Adafruit_GrayOLED5_initEhb+0x50>
  if (reset && (rstPin >= 0)) {
   b98fc:	2d00      	cmp	r5, #0
   b98fe:	d133      	bne.n	b9968 <_ZN17Adafruit_GrayOLED5_initEhb+0x78>
  if (_theWire) { // using I2C
   b9900:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b9902:	2b00      	cmp	r3, #0
   b9904:	d050      	beq.n	b99a8 <_ZN17Adafruit_GrayOLED5_initEhb+0xb8>
    i2c_dev = new Adafruit_I2CDevice(addr, _theWire);
   b9906:	2010      	movs	r0, #16
   b9908:	f7fa fbc5 	bl	b4096 <_Znwj>
   b990c:	4605      	mov	r5, r0
   b990e:	b118      	cbz	r0, b9918 <_ZN17Adafruit_GrayOLED5_initEhb+0x28>
   b9910:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b9912:	4631      	mov	r1, r6
   b9914:	f7ff fd1d 	bl	b9352 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b9918:	62a5      	str	r5, [r4, #40]	; 0x28
    if (!i2c_dev || !i2c_dev->begin()) {
   b991a:	b31d      	cbz	r5, b9964 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   b991c:	2101      	movs	r1, #1
   b991e:	4628      	mov	r0, r5
   b9920:	f7ff fd33 	bl	b938a <_ZN18Adafruit_I2CDevice5beginEb>
   b9924:	b1f0      	cbz	r0, b9964 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
  clearDisplay();
   b9926:	4620      	mov	r0, r4
   b9928:	f7ff ffc6 	bl	b98b8 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  window_x1 = 0;
   b992c:	2300      	movs	r3, #0
   b992e:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   b9930:	8923      	ldrh	r3, [r4, #8]
   b9932:	3b01      	subs	r3, #1
   b9934:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   b9936:	8963      	ldrh	r3, [r4, #10]
   b9938:	3b01      	subs	r3, #1
   b993a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  return true; // Success
   b993c:	2001      	movs	r0, #1
   b993e:	e012      	b.n	b9966 <_ZN17Adafruit_GrayOLED5_initEhb+0x76>
      !(buffer = (uint8_t *)malloc(_bpp * WIDTH * ((HEIGHT + 7) / 8)))) {
   b9940:	8923      	ldrh	r3, [r4, #8]
   b9942:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b9946:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
   b994a:	fb10 f003 	smulbb	r0, r0, r3
   b994e:	1dd3      	adds	r3, r2, #7
   b9950:	bf48      	it	mi
   b9952:	f102 030e 	addmi.w	r3, r2, #14
   b9956:	10db      	asrs	r3, r3, #3
   b9958:	4358      	muls	r0, r3
   b995a:	f000 fd45 	bl	ba3e8 <malloc>
   b995e:	6360      	str	r0, [r4, #52]	; 0x34
  if ((!buffer) &&
   b9960:	2800      	cmp	r0, #0
   b9962:	d1cb      	bne.n	b98fc <_ZN17Adafruit_GrayOLED5_initEhb+0xc>
    return false;
   b9964:	2000      	movs	r0, #0
}
   b9966:	bd70      	pop	{r4, r5, r6, pc}
  if (reset && (rstPin >= 0)) {
   b9968:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   b996a:	2800      	cmp	r0, #0
   b996c:	dbc8      	blt.n	b9900 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    pinMode(rstPin, OUTPUT);
   b996e:	2101      	movs	r1, #1
   b9970:	b280      	uxth	r0, r0
   b9972:	f004 fb01 	bl	bdf78 <pinMode>
    digitalWrite(rstPin, HIGH);
   b9976:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   b997a:	2101      	movs	r1, #1
   b997c:	f004 fb0d 	bl	bdf9a <digitalWrite>
    delay(10);                  // VDD goes high at start, pause
   b9980:	200a      	movs	r0, #10
   b9982:	f000 fd99 	bl	ba4b8 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b9986:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   b998a:	2100      	movs	r1, #0
   b998c:	f004 fb05 	bl	bdf9a <digitalWrite>
    delay(10);                  // Wait 10 ms
   b9990:	200a      	movs	r0, #10
   b9992:	f000 fd91 	bl	ba4b8 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b9996:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   b999a:	2101      	movs	r1, #1
   b999c:	f004 fafd 	bl	bdf9a <digitalWrite>
    delay(10);
   b99a0:	200a      	movs	r0, #10
   b99a2:	f000 fd89 	bl	ba4b8 <delay>
   b99a6:	e7ab      	b.n	b9900 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    if (!spi_dev || !spi_dev->begin()) {
   b99a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b99aa:	2800      	cmp	r0, #0
   b99ac:	d0da      	beq.n	b9964 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   b99ae:	f7ff fd3a 	bl	b9426 <_ZN18Adafruit_SPIDevice5beginEv>
   b99b2:	2800      	cmp	r0, #0
   b99b4:	d0d6      	beq.n	b9964 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b99b6:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   b99ba:	2101      	movs	r1, #1
   b99bc:	f004 fadc 	bl	bdf78 <pinMode>
   b99c0:	e7b1      	b.n	b9926 <_ZN17Adafruit_GrayOLED5_initEhb+0x36>

000b99c2 <_ZN17Adafruit_GrayOLED11setContrastEh>:
    @brief  Adjust the display contrast.
    @param  level The contrast level from 0 to 0x7F
    @note   This has an immediate effect on the display, no need to call the
            display() function -- buffer contents are not changed.
*/
void Adafruit_GrayOLED::setContrast(uint8_t level) {
   b99c2:	b507      	push	{r0, r1, r2, lr}
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   b99c4:	2381      	movs	r3, #129	; 0x81
   b99c6:	f88d 1005 	strb.w	r1, [sp, #5]
  oled_commandList(cmd, 2);
   b99ca:	2202      	movs	r2, #2
   b99cc:	a901      	add	r1, sp, #4
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   b99ce:	f88d 3004 	strb.w	r3, [sp, #4]
  oled_commandList(cmd, 2);
   b99d2:	f7ff ff50 	bl	b9876 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
}
   b99d6:	b003      	add	sp, #12
   b99d8:	f85d fb04 	ldr.w	pc, [sp], #4

000b99dc <_ZN15Adafruit_SH1107D1Ev>:
    : Adafruit_SH110X(w, h, spi, dc_pin, rst_pin, cs_pin, bitrate) {}

/*!
    @brief  Destructor for Adafruit_SH1107 object.
*/
Adafruit_SH1107::~Adafruit_SH1107(void) {}
   b99dc:	b510      	push	{r4, lr}
   b99de:	4b03      	ldr	r3, [pc, #12]	; (b99ec <_ZN15Adafruit_SH1107D1Ev+0x10>)
   b99e0:	6003      	str	r3, [r0, #0]
   b99e2:	4604      	mov	r4, r0
   b99e4:	f000 f958 	bl	b9c98 <_ZN15Adafruit_SH110XD1Ev>
   b99e8:	4620      	mov	r0, r4
   b99ea:	bd10      	pop	{r4, pc}
   b99ec:	000c2104 	.word	0x000c2104

000b99f0 <_ZN15Adafruit_SH1107D0Ev>:
   b99f0:	b510      	push	{r4, lr}
   b99f2:	4604      	mov	r4, r0
   b99f4:	f7ff fff2 	bl	b99dc <_ZN15Adafruit_SH1107D1Ev>
   b99f8:	4620      	mov	r0, r4
   b99fa:	2158      	movs	r1, #88	; 0x58
   b99fc:	f7fa fb4f 	bl	b409e <_ZdlPvj>
   b9a00:	4620      	mov	r0, r4
   b9a02:	bd10      	pop	{r4, pc}

000b9a04 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>:
Adafruit_SH1107::Adafruit_SH1107(uint16_t w, uint16_t h, TwoWire *twi,
   b9a04:	b530      	push	{r4, r5, lr}
   b9a06:	b085      	sub	sp, #20
   b9a08:	4604      	mov	r4, r0
    : Adafruit_SH110X(w, h, twi, rst_pin, clkDuring, clkAfter) {}
   b9a0a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   b9a0c:	9502      	str	r5, [sp, #8]
   b9a0e:	9d09      	ldr	r5, [sp, #36]	; 0x24
   b9a10:	9501      	str	r5, [sp, #4]
   b9a12:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   b9a16:	9500      	str	r5, [sp, #0]
   b9a18:	f000 f924 	bl	b9c64 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>
   b9a1c:	4b02      	ldr	r3, [pc, #8]	; (b9a28 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm+0x24>)
   b9a1e:	6023      	str	r3, [r4, #0]
   b9a20:	4620      	mov	r0, r4
   b9a22:	b005      	add	sp, #20
   b9a24:	bd30      	pop	{r4, r5, pc}
   b9a26:	bf00      	nop
   b9a28:	000c2104 	.word	0x000c2104

000b9a2c <_ZN15Adafruit_SH11075beginEhb>:
    @return true on successful allocation/init, false otherwise.
            Well-behaved code should check the return value before
            proceeding.
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SH1107::begin(uint8_t addr, bool reset) {
   b9a2c:	b530      	push	{r4, r5, lr}
   b9a2e:	4604      	mov	r4, r0
   b9a30:	b085      	sub	sp, #20

  Adafruit_GrayOLED::_init(addr, reset);
   b9a32:	f7ff ff5d 	bl	b98f0 <_ZN17Adafruit_GrayOLED5_initEhb>

  setContrast(0x2F);
   b9a36:	212f      	movs	r1, #47	; 0x2f
   b9a38:	4620      	mov	r0, r4
   b9a3a:	f7ff ffc2 	bl	b99c2 <_ZN17Adafruit_GrayOLED11setContrastEh>

  // the featherwing with 128x64 oled is 'rotated' so to make the splash right,
  // rotate!
  if (WIDTH == 64 && HEIGHT == 128) {
   b9a3e:	68a2      	ldr	r2, [r4, #8]
   b9a40:	4b2f      	ldr	r3, [pc, #188]	; (b9b00 <_ZN15Adafruit_SH11075beginEhb+0xd4>)
   b9a42:	429a      	cmp	r2, r3
   b9a44:	d121      	bne.n	b9a8a <_ZN15Adafruit_SH11075beginEhb+0x5e>
    setRotation(1);
   b9a46:	6823      	ldr	r3, [r4, #0]
   b9a48:	2101      	movs	r1, #1
   b9a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9a4c:	4620      	mov	r0, r4
   b9a4e:	4798      	blx	r3
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   b9a50:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   b9a54:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   b9a58:	2320      	movs	r3, #32
   b9a5a:	3a20      	subs	r2, #32
   b9a5c:	3973      	subs	r1, #115	; 0x73
   b9a5e:	2501      	movs	r5, #1
   b9a60:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b9a64:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b9a68:	2373      	movs	r3, #115	; 0x73
   b9a6a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b9a6e:	9300      	str	r3, [sp, #0]
   b9a70:	f341 014f 	sbfx	r1, r1, #1, #16
   b9a74:	4b23      	ldr	r3, [pc, #140]	; (b9b04 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   b9a76:	4620      	mov	r0, r4
   b9a78:	f342 024f 	sbfx	r2, r2, #1, #16
   b9a7c:	f7ff fa20 	bl	b8ec0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
               splash2_data, splash2_width, splash2_height, 1);
    setRotation(0);
   b9a80:	6823      	ldr	r3, [r4, #0]
   b9a82:	2100      	movs	r1, #0
   b9a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9a86:	4620      	mov	r0, r4
   b9a88:	4798      	blx	r3
  }
  if (WIDTH == 128 && HEIGHT == 128) {
   b9a8a:	68a3      	ldr	r3, [r4, #8]
   b9a8c:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   b9a90:	d117      	bne.n	b9ac2 <_ZN15Adafruit_SH11075beginEhb+0x96>
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   b9a92:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   b9a96:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   b9a9a:	2320      	movs	r3, #32
   b9a9c:	2001      	movs	r0, #1
   b9a9e:	3a20      	subs	r2, #32
   b9aa0:	3973      	subs	r1, #115	; 0x73
   b9aa2:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b9aa6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b9aaa:	2373      	movs	r3, #115	; 0x73
   b9aac:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b9ab0:	9300      	str	r3, [sp, #0]
   b9ab2:	f342 024f 	sbfx	r2, r2, #1, #16
   b9ab6:	4b13      	ldr	r3, [pc, #76]	; (b9b04 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   b9ab8:	f341 014f 	sbfx	r1, r1, #1, #16
   b9abc:	4620      	mov	r0, r4
   b9abe:	f7ff f9ff 	bl	b8ec0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
      SH110X_DISPLAYALLON_RESUME, // 0xa4
      SH110X_NORMALDISPLAY,       // 0xa6
  };
  // clang-format on

  if (!oled_commandList(init, sizeof(init))) {
   b9ac2:	4911      	ldr	r1, [pc, #68]	; (b9b08 <_ZN15Adafruit_SH11075beginEhb+0xdc>)
   b9ac4:	2216      	movs	r2, #22
   b9ac6:	4620      	mov	r0, r4
   b9ac8:	f7ff fed5 	bl	b9876 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   b9acc:	4605      	mov	r5, r0
   b9ace:	b918      	cbnz	r0, b9ad8 <_ZN15Adafruit_SH11075beginEhb+0xac>
    return false;
   b9ad0:	2500      	movs	r5, #0

  delay(100);                     // 100ms delay recommended
  oled_command(SH110X_DISPLAYON); // 0xaf

  return true; // Success
}
   b9ad2:	4628      	mov	r0, r5
   b9ad4:	b005      	add	sp, #20
   b9ad6:	bd30      	pop	{r4, r5, pc}
  if (WIDTH == 128 && HEIGHT == 128) {
   b9ad8:	68a3      	ldr	r3, [r4, #8]
   b9ada:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   b9ade:	d007      	beq.n	b9af0 <_ZN15Adafruit_SH11075beginEhb+0xc4>
  delay(100);                     // 100ms delay recommended
   b9ae0:	2064      	movs	r0, #100	; 0x64
   b9ae2:	f000 fce9 	bl	ba4b8 <delay>
  oled_command(SH110X_DISPLAYON); // 0xaf
   b9ae6:	21af      	movs	r1, #175	; 0xaf
   b9ae8:	4620      	mov	r0, r4
   b9aea:	f7ff fe99 	bl	b9820 <_ZN17Adafruit_GrayOLED12oled_commandEh>
  return true; // Success
   b9aee:	e7f0      	b.n	b9ad2 <_ZN15Adafruit_SH11075beginEhb+0xa6>
    if (!oled_commandList(init_128x128, sizeof(init_128x128))) {
   b9af0:	4906      	ldr	r1, [pc, #24]	; (b9b0c <_ZN15Adafruit_SH11075beginEhb+0xe0>)
   b9af2:	2204      	movs	r2, #4
   b9af4:	4620      	mov	r0, r4
   b9af6:	f7ff febe 	bl	b9876 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   b9afa:	2800      	cmp	r0, #0
   b9afc:	d1f0      	bne.n	b9ae0 <_ZN15Adafruit_SH11075beginEhb+0xb4>
   b9afe:	e7e7      	b.n	b9ad0 <_ZN15Adafruit_SH11075beginEhb+0xa4>
   b9b00:	00800040 	.word	0x00800040
   b9b04:	000c1f1c 	.word	0x000c1f1c
   b9b08:	000c215c 	.word	0x000c215c
   b9b0c:	000c2158 	.word	0x000c2158

000b9b10 <_ZN15Adafruit_SH110X7displayEv>:
    @brief  Push data currently in RAM to SH110X display.
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SH110X::display(void) {
   b9b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9b14:	4604      	mov	r4, r0
   b9b16:	b08b      	sub	sp, #44	; 0x2c
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   b9b18:	f000 f972 	bl	b9e00 <os_thread_yield>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();

  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b9b1c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
  Serial.print(", ");
  Serial.print(window_y2);
  Serial.println(")");
  */

  uint8_t first_page = window_y1 / 8;
   b9b20:	f9b4 603a 	ldrsh.w	r6, [r4, #58]	; 0x3a
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b9b24:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
   b9b28:	f894 9038 	ldrb.w	r9, [r4, #56]	; 0x38
   b9b2c:	1dda      	adds	r2, r3, #7
   b9b2e:	bf48      	it	mi
   b9b30:	f103 020e 	addmi.w	r2, r3, #14
  uint8_t dc_byte = 0x40;
   b9b34:	2340      	movs	r3, #64	; 0x40
   b9b36:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  uint8_t pages = ((HEIGHT + 7) / 8);
   b9b3a:	f3c2 03c7 	ubfx	r3, r2, #3, #8
   b9b3e:	9303      	str	r3, [sp, #12]
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   b9b40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  uint8_t last_page = (window_y2 + 7) / 8;
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   b9b42:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   b9b46:	68db      	ldr	r3, [r3, #12]
  uint8_t bytes_per_page = WIDTH;
   b9b48:	b2ff      	uxtb	r7, r7
  uint8_t first_page = window_y1 / 8;
   b9b4a:	2e00      	cmp	r6, #0
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   b9b4c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   b9b50:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  uint8_t first_page = window_y1 / 8;
   b9b54:	bfb8      	it	lt
   b9b56:	3607      	addlt	r6, #7
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   b9b58:	b2d2      	uxtb	r2, r2
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   b9b5a:	b29b      	uxth	r3, r3
  uint8_t first_page = window_y1 / 8;
   b9b5c:	45b9      	cmp	r9, r7
   b9b5e:	f3c6 06c7 	ubfx	r6, r6, #3, #8
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   b9b62:	bf28      	it	cs
   b9b64:	46b9      	movcs	r9, r7
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   b9b66:	9204      	str	r2, [sp, #16]
  Serial.print(page_start);
  Serial.print(" -> ");
  Serial.println(page_end);
  */

  for (uint8_t p = first_page; p < pages; p++) {
   b9b68:	b2db      	uxtb	r3, r3
    ptr = buffer + (uint16_t)p * (uint16_t)bytes_per_page;
    // fast forward to dirty rectangle beginning
    ptr += page_start;
    bytes_remaining -= page_start;
    // cut off end of dirty rectangle
    bytes_remaining -= (WIDTH - 1) - page_end;
   b9b6a:	1c7a      	adds	r2, r7, #1
   b9b6c:	fb06 9b07 	mla	fp, r6, r7, r9
   b9b70:	9205      	str	r2, [sp, #20]
   b9b72:	9306      	str	r3, [sp, #24]
  for (uint8_t p = first_page; p < pages; p++) {
   b9b74:	9b03      	ldr	r3, [sp, #12]
   b9b76:	429e      	cmp	r6, r3
   b9b78:	d26a      	bcs.n	b9c50 <_ZN15Adafruit_SH110X7displayEv+0x140>
    ptr += page_start;
   b9b7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bytes_remaining -= (WIDTH - 1) - page_end;
   b9b7c:	8925      	ldrh	r5, [r4, #8]

    if (i2c_dev) { // I2C
      uint8_t cmd[] = {
          0x00, (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   b9b7e:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
    ptr += page_start;
   b9b82:	eb03 080b 	add.w	r8, r3, fp
    bytes_remaining -= (WIDTH - 1) - page_end;
   b9b86:	9b05      	ldr	r3, [sp, #20]
   b9b88:	1b5d      	subs	r5, r3, r5
   b9b8a:	9b04      	ldr	r3, [sp, #16]
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   b9b8c:	444a      	add	r2, r9
    bytes_remaining -= (WIDTH - 1) - page_end;
   b9b8e:	441d      	add	r5, r3
    if (i2c_dev) { // I2C
   b9b90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   b9b92:	1110      	asrs	r0, r2, #4
    bytes_remaining -= (WIDTH - 1) - page_end;
   b9b94:	eba5 0509 	sub.w	r5, r5, r9
   b9b98:	f1a6 0150 	sub.w	r1, r6, #80	; 0x50
   b9b9c:	b2ed      	uxtb	r5, r5
    if (i2c_dev) { // I2C
   b9b9e:	b2c9      	uxtb	r1, r1
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   b9ba0:	3010      	adds	r0, #16
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b9ba2:	f002 020f 	and.w	r2, r2, #15
    if (i2c_dev) { // I2C
   b9ba6:	b39b      	cbz	r3, b9c10 <_ZN15Adafruit_SH110X7displayEv+0x100>
      uint8_t cmd[] = {
   b9ba8:	f04f 0a00 	mov.w	sl, #0
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b9bac:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
   b9bb0:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26

      // Set high speed clk
      i2c_dev->setSpeed(i2c_preclk);
   b9bb4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      uint8_t cmd[] = {
   b9bb6:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
      i2c_dev->setSpeed(i2c_preclk);
   b9bba:	4618      	mov	r0, r3
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b9bbc:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
      i2c_dev->setSpeed(i2c_preclk);
   b9bc0:	f7ff fc22 	bl	b9408 <_ZN18Adafruit_I2CDevice8setSpeedEm>

      i2c_dev->write(cmd, 4);
   b9bc4:	e9cd aa00 	strd	sl, sl, [sp]
   b9bc8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9bca:	2301      	movs	r3, #1
   b9bcc:	2204      	movs	r2, #4
   b9bce:	a909      	add	r1, sp, #36	; 0x24
   b9bd0:	f7ff fbea 	bl	b93a8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>

      while (bytes_remaining) {
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
   b9bd4:	f10d 0a23 	add.w	sl, sp, #35	; 0x23
   b9bd8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      while (bytes_remaining) {
   b9bda:	b195      	cbz	r5, b9c02 <_ZN15Adafruit_SH110X7displayEv+0xf2>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
   b9bdc:	9b06      	ldr	r3, [sp, #24]
   b9bde:	42ab      	cmp	r3, r5
   b9be0:	bf28      	it	cs
   b9be2:	462b      	movcs	r3, r5
   b9be4:	461a      	mov	r2, r3
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
   b9be6:	2301      	movs	r3, #1
   b9be8:	4641      	mov	r1, r8
   b9bea:	e9cd a300 	strd	sl, r3, [sp]
   b9bee:	9207      	str	r2, [sp, #28]
   b9bf0:	f7ff fbda 	bl	b93a8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        ptr += to_write;
   b9bf4:	9a07      	ldr	r2, [sp, #28]
        bytes_remaining -= to_write;
   b9bf6:	1aad      	subs	r5, r5, r2
        ptr += to_write;
   b9bf8:	4490      	add	r8, r2
        bytes_remaining -= to_write;
   b9bfa:	b2ed      	uxtb	r5, r5
   b9bfc:	f000 f900 	bl	b9e00 <os_thread_yield>
#endif // PLATFORM_THREADING
}
   b9c00:	e7ea      	b.n	b9bd8 <_ZN15Adafruit_SH110X7displayEv+0xc8>
        yield();
      }

      // Set low speed clk
      i2c_dev->setSpeed(i2c_postclk);
   b9c02:	6b21      	ldr	r1, [r4, #48]	; 0x30
   b9c04:	f7ff fc00 	bl	b9408 <_ZN18Adafruit_I2CDevice8setSpeedEm>
  for (uint8_t p = first_page; p < pages; p++) {
   b9c08:	3601      	adds	r6, #1
   b9c0a:	b2f6      	uxtb	r6, r6
   b9c0c:	44bb      	add	fp, r7
   b9c0e:	e7b1      	b.n	b9b74 <_ZN15Adafruit_SH110X7displayEv+0x64>

    } else { // SPI
      uint8_t cmd[] = {
          (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b9c10:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   b9c14:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25

      digitalWrite(dcPin, LOW);
   b9c18:	4619      	mov	r1, r3
   b9c1a:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b9c1e:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
      digitalWrite(dcPin, LOW);
   b9c22:	9307      	str	r3, [sp, #28]
   b9c24:	f004 f9b9 	bl	bdf9a <digitalWrite>
      spi_dev->write(cmd, 3);
   b9c28:	9b07      	ldr	r3, [sp, #28]
   b9c2a:	9300      	str	r3, [sp, #0]
   b9c2c:	2203      	movs	r2, #3
   b9c2e:	a909      	add	r1, sp, #36	; 0x24
   b9c30:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9c32:	f7ff fcea 	bl	b960a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
      digitalWrite(dcPin, HIGH);
   b9c36:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   b9c3a:	2101      	movs	r1, #1
   b9c3c:	f004 f9ad 	bl	bdf9a <digitalWrite>
      spi_dev->write(ptr, bytes_remaining);
   b9c40:	9b07      	ldr	r3, [sp, #28]
   b9c42:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9c44:	9300      	str	r3, [sp, #0]
   b9c46:	462a      	mov	r2, r5
   b9c48:	4641      	mov	r1, r8
   b9c4a:	f7ff fcde 	bl	b960a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   b9c4e:	e7db      	b.n	b9c08 <_ZN15Adafruit_SH110X7displayEv+0xf8>
    }
  }
  // reset dirty window
  window_x1 = 1024;
  window_y1 = 1024;
  window_x2 = -1;
   b9c50:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
   b9c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9c58:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  window_y2 = -1;
}
   b9c5c:	b00b      	add	sp, #44	; 0x2c
   b9c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000b9c64 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>:
Adafruit_SH110X::Adafruit_SH110X(uint16_t w, uint16_t h, TwoWire *twi,
   b9c64:	b530      	push	{r4, r5, lr}
   b9c66:	b085      	sub	sp, #20
   b9c68:	4604      	mov	r4, r0
    : Adafruit_GrayOLED(1, w, h, twi, rst_pin, clkDuring, clkAfter) {}
   b9c6a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   b9c6c:	9503      	str	r5, [sp, #12]
   b9c6e:	9d09      	ldr	r5, [sp, #36]	; 0x24
   b9c70:	9502      	str	r5, [sp, #8]
   b9c72:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   b9c76:	e9cd 3500 	strd	r3, r5, [sp]
   b9c7a:	4613      	mov	r3, r2
   b9c7c:	460a      	mov	r2, r1
   b9c7e:	2101      	movs	r1, #1
   b9c80:	f7ff fd90 	bl	b97a4 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>
   b9c84:	4b03      	ldr	r3, [pc, #12]	; (b9c94 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm+0x30>)
   b9c86:	6023      	str	r3, [r4, #0]
   b9c88:	4620      	mov	r0, r4
   b9c8a:	2300      	movs	r3, #0
   b9c8c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b9c90:	b005      	add	sp, #20
   b9c92:	bd30      	pop	{r4, r5, pc}
   b9c94:	000c217c 	.word	0x000c217c

000b9c98 <_ZN15Adafruit_SH110XD1Ev>:
Adafruit_SH110X::~Adafruit_SH110X(void) {}
   b9c98:	b510      	push	{r4, lr}
   b9c9a:	4b03      	ldr	r3, [pc, #12]	; (b9ca8 <_ZN15Adafruit_SH110XD1Ev+0x10>)
   b9c9c:	6003      	str	r3, [r0, #0]
   b9c9e:	4604      	mov	r4, r0
   b9ca0:	f7ff fda2 	bl	b97e8 <_ZN17Adafruit_GrayOLEDD1Ev>
   b9ca4:	4620      	mov	r0, r4
   b9ca6:	bd10      	pop	{r4, pc}
   b9ca8:	000c217c 	.word	0x000c217c

000b9cac <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b9cac:	b508      	push	{r3, lr}
   b9cae:	4b02      	ldr	r3, [pc, #8]	; (b9cb8 <hal_ble_stack_init+0xc>)
   b9cb0:	681b      	ldr	r3, [r3, #0]
   b9cb2:	689b      	ldr	r3, [r3, #8]
   b9cb4:	9301      	str	r3, [sp, #4]
   b9cb6:	bd08      	pop	{r3, pc}
   b9cb8:	00030278 	.word	0x00030278

000b9cbc <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   b9cbc:	b508      	push	{r3, lr}
   b9cbe:	4b02      	ldr	r3, [pc, #8]	; (b9cc8 <hal_ble_gap_set_tx_power+0xc>)
   b9cc0:	681b      	ldr	r3, [r3, #0]
   b9cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9cc4:	9301      	str	r3, [sp, #4]
   b9cc6:	bd08      	pop	{r3, pc}
   b9cc8:	00030278 	.word	0x00030278

000b9ccc <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   b9ccc:	b508      	push	{r3, lr}
   b9cce:	4b02      	ldr	r3, [pc, #8]	; (b9cd8 <hal_ble_gap_set_scan_parameters+0xc>)
   b9cd0:	681b      	ldr	r3, [r3, #0]
   b9cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b9cd4:	9301      	str	r3, [sp, #4]
   b9cd6:	bd08      	pop	{r3, pc}
   b9cd8:	00030278 	.word	0x00030278

000b9cdc <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   b9cdc:	b508      	push	{r3, lr}
   b9cde:	4b02      	ldr	r3, [pc, #8]	; (b9ce8 <hal_ble_gap_get_scan_parameters+0xc>)
   b9ce0:	681b      	ldr	r3, [r3, #0]
   b9ce2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b9ce4:	9301      	str	r3, [sp, #4]
   b9ce6:	bd08      	pop	{r3, pc}
   b9ce8:	00030278 	.word	0x00030278

000b9cec <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b9cec:	b508      	push	{r3, lr}
   b9cee:	4b02      	ldr	r3, [pc, #8]	; (b9cf8 <hal_ble_gap_start_scan+0xc>)
   b9cf0:	681b      	ldr	r3, [r3, #0]
   b9cf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9cf4:	9301      	str	r3, [sp, #4]
   b9cf6:	bd08      	pop	{r3, pc}
   b9cf8:	00030278 	.word	0x00030278

000b9cfc <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b9cfc:	b508      	push	{r3, lr}
   b9cfe:	4b03      	ldr	r3, [pc, #12]	; (b9d0c <hal_ble_gap_stop_scan+0x10>)
   b9d00:	681b      	ldr	r3, [r3, #0]
   b9d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b9d06:	9301      	str	r3, [sp, #4]
   b9d08:	bd08      	pop	{r3, pc}
   b9d0a:	0000      	.short	0x0000
   b9d0c:	00030278 	.word	0x00030278

000b9d10 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b9d10:	b508      	push	{r3, lr}
   b9d12:	4b03      	ldr	r3, [pc, #12]	; (b9d20 <hal_ble_gap_disconnect+0x10>)
   b9d14:	681b      	ldr	r3, [r3, #0]
   b9d16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b9d1a:	9301      	str	r3, [sp, #4]
   b9d1c:	bd08      	pop	{r3, pc}
   b9d1e:	0000      	.short	0x0000
   b9d20:	00030278 	.word	0x00030278

000b9d24 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9d24:	b508      	push	{r3, lr}
   b9d26:	4b03      	ldr	r3, [pc, #12]	; (b9d34 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b9d28:	681b      	ldr	r3, [r3, #0]
   b9d2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b9d2e:	9301      	str	r3, [sp, #4]
   b9d30:	bd08      	pop	{r3, pc}
   b9d32:	0000      	.short	0x0000
   b9d34:	00030278 	.word	0x00030278

000b9d38 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b9d38:	b508      	push	{r3, lr}
   b9d3a:	4b03      	ldr	r3, [pc, #12]	; (b9d48 <hal_ble_gatt_client_discover_all_services+0x10>)
   b9d3c:	681b      	ldr	r3, [r3, #0]
   b9d3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b9d42:	9301      	str	r3, [sp, #4]
   b9d44:	bd08      	pop	{r3, pc}
   b9d46:	0000      	.short	0x0000
   b9d48:	00030278 	.word	0x00030278

000b9d4c <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b9d4c:	b508      	push	{r3, lr}
   b9d4e:	4b03      	ldr	r3, [pc, #12]	; (b9d5c <hal_ble_gatt_client_discover_characteristics+0x10>)
   b9d50:	681b      	ldr	r3, [r3, #0]
   b9d52:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b9d56:	9301      	str	r3, [sp, #4]
   b9d58:	bd08      	pop	{r3, pc}
   b9d5a:	0000      	.short	0x0000
   b9d5c:	00030278 	.word	0x00030278

000b9d60 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9d60:	b508      	push	{r3, lr}
   b9d62:	4b03      	ldr	r3, [pc, #12]	; (b9d70 <hal_ble_gatt_client_write_with_response+0x10>)
   b9d64:	681b      	ldr	r3, [r3, #0]
   b9d66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b9d6a:	9301      	str	r3, [sp, #4]
   b9d6c:	bd08      	pop	{r3, pc}
   b9d6e:	0000      	.short	0x0000
   b9d70:	00030278 	.word	0x00030278

000b9d74 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9d74:	b508      	push	{r3, lr}
   b9d76:	4b03      	ldr	r3, [pc, #12]	; (b9d84 <hal_ble_gatt_client_write_without_response+0x10>)
   b9d78:	681b      	ldr	r3, [r3, #0]
   b9d7a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b9d7e:	9301      	str	r3, [sp, #4]
   b9d80:	bd08      	pop	{r3, pc}
   b9d82:	0000      	.short	0x0000
   b9d84:	00030278 	.word	0x00030278

000b9d88 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b9d88:	b508      	push	{r3, lr}
   b9d8a:	4b03      	ldr	r3, [pc, #12]	; (b9d98 <hal_ble_gatt_client_read+0x10>)
   b9d8c:	681b      	ldr	r3, [r3, #0]
   b9d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b9d92:	9301      	str	r3, [sp, #4]
   b9d94:	bd08      	pop	{r3, pc}
   b9d96:	0000      	.short	0x0000
   b9d98:	00030278 	.word	0x00030278

000b9d9c <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b9d9c:	b508      	push	{r3, lr}
   b9d9e:	4b03      	ldr	r3, [pc, #12]	; (b9dac <hal_ble_gap_connect+0x10>)
   b9da0:	681b      	ldr	r3, [r3, #0]
   b9da2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b9da6:	9301      	str	r3, [sp, #4]
   b9da8:	bd08      	pop	{r3, pc}
   b9daa:	0000      	.short	0x0000
   b9dac:	00030278 	.word	0x00030278

000b9db0 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b9db0:	b508      	push	{r3, lr}
   b9db2:	4b03      	ldr	r3, [pc, #12]	; (b9dc0 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b9db4:	681b      	ldr	r3, [r3, #0]
   b9db6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b9dba:	9301      	str	r3, [sp, #4]
   b9dbc:	bd08      	pop	{r3, pc}
   b9dbe:	0000      	.short	0x0000
   b9dc0:	00030278 	.word	0x00030278

000b9dc4 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b9dc4:	b508      	push	{r3, lr}
   b9dc6:	4b03      	ldr	r3, [pc, #12]	; (b9dd4 <hal_ble_gatt_client_configure_cccd+0x10>)
   b9dc8:	681b      	ldr	r3, [r3, #0]
   b9dca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b9dce:	9301      	str	r3, [sp, #4]
   b9dd0:	bd08      	pop	{r3, pc}
   b9dd2:	0000      	.short	0x0000
   b9dd4:	00030278 	.word	0x00030278

000b9dd8 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9dd8:	b508      	push	{r3, lr}
   b9dda:	4b03      	ldr	r3, [pc, #12]	; (b9de8 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b9ddc:	681b      	ldr	r3, [r3, #0]
   b9dde:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b9de2:	9301      	str	r3, [sp, #4]
   b9de4:	bd08      	pop	{r3, pc}
   b9de6:	0000      	.short	0x0000
   b9de8:	00030278 	.word	0x00030278

000b9dec <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9dec:	b508      	push	{r3, lr}
   b9dee:	4b03      	ldr	r3, [pc, #12]	; (b9dfc <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b9df0:	681b      	ldr	r3, [r3, #0]
   b9df2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b9df6:	9301      	str	r3, [sp, #4]
   b9df8:	bd08      	pop	{r3, pc}
   b9dfa:	0000      	.short	0x0000
   b9dfc:	00030278 	.word	0x00030278

000b9e00 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b9e00:	b508      	push	{r3, lr}
   b9e02:	4b02      	ldr	r3, [pc, #8]	; (b9e0c <os_thread_yield+0xc>)
   b9e04:	681b      	ldr	r3, [r3, #0]
   b9e06:	68db      	ldr	r3, [r3, #12]
   b9e08:	9301      	str	r3, [sp, #4]
   b9e0a:	bd08      	pop	{r3, pc}
   b9e0c:	00030248 	.word	0x00030248

000b9e10 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b9e10:	b508      	push	{r3, lr}
   b9e12:	4b02      	ldr	r3, [pc, #8]	; (b9e1c <os_thread_scheduling+0xc>)
   b9e14:	681b      	ldr	r3, [r3, #0]
   b9e16:	69db      	ldr	r3, [r3, #28]
   b9e18:	9301      	str	r3, [sp, #4]
   b9e1a:	bd08      	pop	{r3, pc}
   b9e1c:	00030248 	.word	0x00030248

000b9e20 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b9e20:	b508      	push	{r3, lr}
   b9e22:	4b02      	ldr	r3, [pc, #8]	; (b9e2c <os_timer_create+0xc>)
   b9e24:	681b      	ldr	r3, [r3, #0]
   b9e26:	6a1b      	ldr	r3, [r3, #32]
   b9e28:	9301      	str	r3, [sp, #4]
   b9e2a:	bd08      	pop	{r3, pc}
   b9e2c:	00030248 	.word	0x00030248

000b9e30 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b9e30:	b508      	push	{r3, lr}
   b9e32:	4b02      	ldr	r3, [pc, #8]	; (b9e3c <os_timer_destroy+0xc>)
   b9e34:	681b      	ldr	r3, [r3, #0]
   b9e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9e38:	9301      	str	r3, [sp, #4]
   b9e3a:	bd08      	pop	{r3, pc}
   b9e3c:	00030248 	.word	0x00030248

000b9e40 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b9e40:	b508      	push	{r3, lr}
   b9e42:	4b02      	ldr	r3, [pc, #8]	; (b9e4c <os_timer_get_id+0xc>)
   b9e44:	681b      	ldr	r3, [r3, #0]
   b9e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9e48:	9301      	str	r3, [sp, #4]
   b9e4a:	bd08      	pop	{r3, pc}
   b9e4c:	00030248 	.word	0x00030248

000b9e50 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b9e50:	b508      	push	{r3, lr}
   b9e52:	4b02      	ldr	r3, [pc, #8]	; (b9e5c <os_timer_change+0xc>)
   b9e54:	681b      	ldr	r3, [r3, #0]
   b9e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9e58:	9301      	str	r3, [sp, #4]
   b9e5a:	bd08      	pop	{r3, pc}
   b9e5c:	00030248 	.word	0x00030248

000b9e60 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b9e60:	b508      	push	{r3, lr}
   b9e62:	4b02      	ldr	r3, [pc, #8]	; (b9e6c <os_mutex_recursive_create+0xc>)
   b9e64:	681b      	ldr	r3, [r3, #0]
   b9e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9e68:	9301      	str	r3, [sp, #4]
   b9e6a:	bd08      	pop	{r3, pc}
   b9e6c:	00030248 	.word	0x00030248

000b9e70 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b9e70:	b508      	push	{r3, lr}
   b9e72:	4b02      	ldr	r3, [pc, #8]	; (b9e7c <os_mutex_recursive_lock+0xc>)
   b9e74:	681b      	ldr	r3, [r3, #0]
   b9e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9e78:	9301      	str	r3, [sp, #4]
   b9e7a:	bd08      	pop	{r3, pc}
   b9e7c:	00030248 	.word	0x00030248

000b9e80 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b9e80:	b508      	push	{r3, lr}
   b9e82:	4b02      	ldr	r3, [pc, #8]	; (b9e8c <os_mutex_recursive_unlock+0xc>)
   b9e84:	681b      	ldr	r3, [r3, #0]
   b9e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b9e88:	9301      	str	r3, [sp, #4]
   b9e8a:	bd08      	pop	{r3, pc}
   b9e8c:	00030248 	.word	0x00030248

000b9e90 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b9e90:	b508      	push	{r3, lr}
   b9e92:	4b02      	ldr	r3, [pc, #8]	; (b9e9c <os_timer_set_id+0xc>)
   b9e94:	681b      	ldr	r3, [r3, #0]
   b9e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b9e98:	9301      	str	r3, [sp, #4]
   b9e9a:	bd08      	pop	{r3, pc}
   b9e9c:	00030248 	.word	0x00030248

000b9ea0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b9ea0:	b508      	push	{r3, lr}
   b9ea2:	4b02      	ldr	r3, [pc, #8]	; (b9eac <HAL_RNG_GetRandomNumber+0xc>)
   b9ea4:	681b      	ldr	r3, [r3, #0]
   b9ea6:	685b      	ldr	r3, [r3, #4]
   b9ea8:	9301      	str	r3, [sp, #4]
   b9eaa:	bd08      	pop	{r3, pc}
   b9eac:	00030218 	.word	0x00030218

000b9eb0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b9eb0:	b508      	push	{r3, lr}
   b9eb2:	4b02      	ldr	r3, [pc, #8]	; (b9ebc <HAL_Delay_Microseconds+0xc>)
   b9eb4:	681b      	ldr	r3, [r3, #0]
   b9eb6:	68db      	ldr	r3, [r3, #12]
   b9eb8:	9301      	str	r3, [sp, #4]
   b9eba:	bd08      	pop	{r3, pc}
   b9ebc:	00030218 	.word	0x00030218

000b9ec0 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b9ec0:	b508      	push	{r3, lr}
   b9ec2:	4b02      	ldr	r3, [pc, #8]	; (b9ecc <HAL_Timer_Get_Micro_Seconds+0xc>)
   b9ec4:	681b      	ldr	r3, [r3, #0]
   b9ec6:	691b      	ldr	r3, [r3, #16]
   b9ec8:	9301      	str	r3, [sp, #4]
   b9eca:	bd08      	pop	{r3, pc}
   b9ecc:	00030218 	.word	0x00030218

000b9ed0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b9ed0:	b508      	push	{r3, lr}
   b9ed2:	4b02      	ldr	r3, [pc, #8]	; (b9edc <HAL_Timer_Get_Milli_Seconds+0xc>)
   b9ed4:	681b      	ldr	r3, [r3, #0]
   b9ed6:	695b      	ldr	r3, [r3, #20]
   b9ed8:	9301      	str	r3, [sp, #4]
   b9eda:	bd08      	pop	{r3, pc}
   b9edc:	00030218 	.word	0x00030218

000b9ee0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b9ee0:	b508      	push	{r3, lr}
   b9ee2:	4b02      	ldr	r3, [pc, #8]	; (b9eec <hal_rtc_time_is_valid+0xc>)
   b9ee4:	681b      	ldr	r3, [r3, #0]
   b9ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b9ee8:	9301      	str	r3, [sp, #4]
   b9eea:	bd08      	pop	{r3, pc}
   b9eec:	00030218 	.word	0x00030218

000b9ef0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b9ef0:	b508      	push	{r3, lr}
   b9ef2:	4b02      	ldr	r3, [pc, #8]	; (b9efc <hal_rtc_get_time+0xc>)
   b9ef4:	681b      	ldr	r3, [r3, #0]
   b9ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b9ef8:	9301      	str	r3, [sp, #4]
   b9efa:	bd08      	pop	{r3, pc}
   b9efc:	00030218 	.word	0x00030218

000b9f00 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b9f00:	b508      	push	{r3, lr}
   b9f02:	4b02      	ldr	r3, [pc, #8]	; (b9f0c <HAL_Validate_Pin_Function+0xc>)
   b9f04:	681b      	ldr	r3, [r3, #0]
   b9f06:	685b      	ldr	r3, [r3, #4]
   b9f08:	9301      	str	r3, [sp, #4]
   b9f0a:	bd08      	pop	{r3, pc}
   b9f0c:	0003022c 	.word	0x0003022c

000b9f10 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b9f10:	b508      	push	{r3, lr}
   b9f12:	4b02      	ldr	r3, [pc, #8]	; (b9f1c <HAL_Pin_Mode+0xc>)
   b9f14:	681b      	ldr	r3, [r3, #0]
   b9f16:	689b      	ldr	r3, [r3, #8]
   b9f18:	9301      	str	r3, [sp, #4]
   b9f1a:	bd08      	pop	{r3, pc}
   b9f1c:	0003022c 	.word	0x0003022c

000b9f20 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b9f20:	b508      	push	{r3, lr}
   b9f22:	4b02      	ldr	r3, [pc, #8]	; (b9f2c <HAL_Get_Pin_Mode+0xc>)
   b9f24:	681b      	ldr	r3, [r3, #0]
   b9f26:	68db      	ldr	r3, [r3, #12]
   b9f28:	9301      	str	r3, [sp, #4]
   b9f2a:	bd08      	pop	{r3, pc}
   b9f2c:	0003022c 	.word	0x0003022c

000b9f30 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b9f30:	b508      	push	{r3, lr}
   b9f32:	4b02      	ldr	r3, [pc, #8]	; (b9f3c <HAL_GPIO_Write+0xc>)
   b9f34:	681b      	ldr	r3, [r3, #0]
   b9f36:	691b      	ldr	r3, [r3, #16]
   b9f38:	9301      	str	r3, [sp, #4]
   b9f3a:	bd08      	pop	{r3, pc}
   b9f3c:	0003022c 	.word	0x0003022c

000b9f40 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b9f40:	b508      	push	{r3, lr}
   b9f42:	4b02      	ldr	r3, [pc, #8]	; (b9f4c <HAL_GPIO_Read+0xc>)
   b9f44:	681b      	ldr	r3, [r3, #0]
   b9f46:	695b      	ldr	r3, [r3, #20]
   b9f48:	9301      	str	r3, [sp, #4]
   b9f4a:	bd08      	pop	{r3, pc}
   b9f4c:	0003022c 	.word	0x0003022c

000b9f50 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b9f50:	b508      	push	{r3, lr}
   b9f52:	4b02      	ldr	r3, [pc, #8]	; (b9f5c <HAL_Interrupts_Attach+0xc>)
   b9f54:	681b      	ldr	r3, [r3, #0]
   b9f56:	699b      	ldr	r3, [r3, #24]
   b9f58:	9301      	str	r3, [sp, #4]
   b9f5a:	bd08      	pop	{r3, pc}
   b9f5c:	0003022c 	.word	0x0003022c

000b9f60 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b9f60:	b508      	push	{r3, lr}
   b9f62:	4b02      	ldr	r3, [pc, #8]	; (b9f6c <HAL_Interrupts_Detach+0xc>)
   b9f64:	681b      	ldr	r3, [r3, #0]
   b9f66:	69db      	ldr	r3, [r3, #28]
   b9f68:	9301      	str	r3, [sp, #4]
   b9f6a:	bd08      	pop	{r3, pc}
   b9f6c:	0003022c 	.word	0x0003022c

000b9f70 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b9f70:	b508      	push	{r3, lr}
   b9f72:	4b02      	ldr	r3, [pc, #8]	; (b9f7c <hal_adc_read+0xc>)
   b9f74:	681b      	ldr	r3, [r3, #0]
   b9f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9f78:	9301      	str	r3, [sp, #4]
   b9f7a:	bd08      	pop	{r3, pc}
   b9f7c:	0003022c 	.word	0x0003022c

000b9f80 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b9f80:	b508      	push	{r3, lr}
   b9f82:	4b02      	ldr	r3, [pc, #8]	; (b9f8c <hal_i2c_set_speed+0xc>)
   b9f84:	681b      	ldr	r3, [r3, #0]
   b9f86:	681b      	ldr	r3, [r3, #0]
   b9f88:	9301      	str	r3, [sp, #4]
   b9f8a:	bd08      	pop	{r3, pc}
   b9f8c:	00030228 	.word	0x00030228

000b9f90 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b9f90:	b508      	push	{r3, lr}
   b9f92:	4b02      	ldr	r3, [pc, #8]	; (b9f9c <hal_i2c_begin+0xc>)
   b9f94:	681b      	ldr	r3, [r3, #0]
   b9f96:	68db      	ldr	r3, [r3, #12]
   b9f98:	9301      	str	r3, [sp, #4]
   b9f9a:	bd08      	pop	{r3, pc}
   b9f9c:	00030228 	.word	0x00030228

000b9fa0 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b9fa0:	b508      	push	{r3, lr}
   b9fa2:	4b02      	ldr	r3, [pc, #8]	; (b9fac <hal_i2c_begin_transmission+0xc>)
   b9fa4:	681b      	ldr	r3, [r3, #0]
   b9fa6:	699b      	ldr	r3, [r3, #24]
   b9fa8:	9301      	str	r3, [sp, #4]
   b9faa:	bd08      	pop	{r3, pc}
   b9fac:	00030228 	.word	0x00030228

000b9fb0 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b9fb0:	b508      	push	{r3, lr}
   b9fb2:	4b02      	ldr	r3, [pc, #8]	; (b9fbc <hal_i2c_end_transmission+0xc>)
   b9fb4:	681b      	ldr	r3, [r3, #0]
   b9fb6:	69db      	ldr	r3, [r3, #28]
   b9fb8:	9301      	str	r3, [sp, #4]
   b9fba:	bd08      	pop	{r3, pc}
   b9fbc:	00030228 	.word	0x00030228

000b9fc0 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b9fc0:	b508      	push	{r3, lr}
   b9fc2:	4b02      	ldr	r3, [pc, #8]	; (b9fcc <hal_i2c_write+0xc>)
   b9fc4:	681b      	ldr	r3, [r3, #0]
   b9fc6:	6a1b      	ldr	r3, [r3, #32]
   b9fc8:	9301      	str	r3, [sp, #4]
   b9fca:	bd08      	pop	{r3, pc}
   b9fcc:	00030228 	.word	0x00030228

000b9fd0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b9fd0:	b508      	push	{r3, lr}
   b9fd2:	4b02      	ldr	r3, [pc, #8]	; (b9fdc <hal_i2c_available+0xc>)
   b9fd4:	681b      	ldr	r3, [r3, #0]
   b9fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9fd8:	9301      	str	r3, [sp, #4]
   b9fda:	bd08      	pop	{r3, pc}
   b9fdc:	00030228 	.word	0x00030228

000b9fe0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b9fe0:	b508      	push	{r3, lr}
   b9fe2:	4b02      	ldr	r3, [pc, #8]	; (b9fec <hal_i2c_read+0xc>)
   b9fe4:	681b      	ldr	r3, [r3, #0]
   b9fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9fe8:	9301      	str	r3, [sp, #4]
   b9fea:	bd08      	pop	{r3, pc}
   b9fec:	00030228 	.word	0x00030228

000b9ff0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b9ff0:	b508      	push	{r3, lr}
   b9ff2:	4b02      	ldr	r3, [pc, #8]	; (b9ffc <hal_i2c_peek+0xc>)
   b9ff4:	681b      	ldr	r3, [r3, #0]
   b9ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9ff8:	9301      	str	r3, [sp, #4]
   b9ffa:	bd08      	pop	{r3, pc}
   b9ffc:	00030228 	.word	0x00030228

000ba000 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   ba000:	b508      	push	{r3, lr}
   ba002:	4b02      	ldr	r3, [pc, #8]	; (ba00c <hal_i2c_flush+0xc>)
   ba004:	681b      	ldr	r3, [r3, #0]
   ba006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba008:	9301      	str	r3, [sp, #4]
   ba00a:	bd08      	pop	{r3, pc}
   ba00c:	00030228 	.word	0x00030228

000ba010 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   ba010:	b508      	push	{r3, lr}
   ba012:	4b02      	ldr	r3, [pc, #8]	; (ba01c <hal_i2c_is_enabled+0xc>)
   ba014:	681b      	ldr	r3, [r3, #0]
   ba016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba018:	9301      	str	r3, [sp, #4]
   ba01a:	bd08      	pop	{r3, pc}
   ba01c:	00030228 	.word	0x00030228

000ba020 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   ba020:	b508      	push	{r3, lr}
   ba022:	4b02      	ldr	r3, [pc, #8]	; (ba02c <hal_i2c_init+0xc>)
   ba024:	681b      	ldr	r3, [r3, #0]
   ba026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba028:	9301      	str	r3, [sp, #4]
   ba02a:	bd08      	pop	{r3, pc}
   ba02c:	00030228 	.word	0x00030228

000ba030 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   ba030:	b508      	push	{r3, lr}
   ba032:	4b02      	ldr	r3, [pc, #8]	; (ba03c <inet_inet_ntop+0xc>)
   ba034:	681b      	ldr	r3, [r3, #0]
   ba036:	695b      	ldr	r3, [r3, #20]
   ba038:	9301      	str	r3, [sp, #4]
   ba03a:	bd08      	pop	{r3, pc}
   ba03c:	00030264 	.word	0x00030264

000ba040 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   ba040:	b508      	push	{r3, lr}
   ba042:	4b02      	ldr	r3, [pc, #8]	; (ba04c <netdb_freeaddrinfo+0xc>)
   ba044:	681b      	ldr	r3, [r3, #0]
   ba046:	689b      	ldr	r3, [r3, #8]
   ba048:	9301      	str	r3, [sp, #4]
   ba04a:	bd08      	pop	{r3, pc}
   ba04c:	00030268 	.word	0x00030268

000ba050 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   ba050:	b508      	push	{r3, lr}
   ba052:	4b02      	ldr	r3, [pc, #8]	; (ba05c <netdb_getaddrinfo+0xc>)
   ba054:	681b      	ldr	r3, [r3, #0]
   ba056:	68db      	ldr	r3, [r3, #12]
   ba058:	9301      	str	r3, [sp, #4]
   ba05a:	bd08      	pop	{r3, pc}
   ba05c:	00030268 	.word	0x00030268

000ba060 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   ba060:	b508      	push	{r3, lr}
   ba062:	4b02      	ldr	r3, [pc, #8]	; (ba06c <hal_spi_begin+0xc>)
   ba064:	681b      	ldr	r3, [r3, #0]
   ba066:	681b      	ldr	r3, [r3, #0]
   ba068:	9301      	str	r3, [sp, #4]
   ba06a:	bd08      	pop	{r3, pc}
   ba06c:	00030230 	.word	0x00030230

000ba070 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   ba070:	b508      	push	{r3, lr}
   ba072:	4b02      	ldr	r3, [pc, #8]	; (ba07c <hal_spi_transfer+0xc>)
   ba074:	681b      	ldr	r3, [r3, #0]
   ba076:	695b      	ldr	r3, [r3, #20]
   ba078:	9301      	str	r3, [sp, #4]
   ba07a:	bd08      	pop	{r3, pc}
   ba07c:	00030230 	.word	0x00030230

000ba080 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   ba080:	b508      	push	{r3, lr}
   ba082:	4b02      	ldr	r3, [pc, #8]	; (ba08c <hal_spi_init+0xc>)
   ba084:	681b      	ldr	r3, [r3, #0]
   ba086:	69db      	ldr	r3, [r3, #28]
   ba088:	9301      	str	r3, [sp, #4]
   ba08a:	bd08      	pop	{r3, pc}
   ba08c:	00030230 	.word	0x00030230

000ba090 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   ba090:	b508      	push	{r3, lr}
   ba092:	4b02      	ldr	r3, [pc, #8]	; (ba09c <hal_spi_is_enabled+0xc>)
   ba094:	681b      	ldr	r3, [r3, #0]
   ba096:	6a1b      	ldr	r3, [r3, #32]
   ba098:	9301      	str	r3, [sp, #4]
   ba09a:	bd08      	pop	{r3, pc}
   ba09c:	00030230 	.word	0x00030230

000ba0a0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   ba0a0:	b508      	push	{r3, lr}
   ba0a2:	4b02      	ldr	r3, [pc, #8]	; (ba0ac <hal_spi_info+0xc>)
   ba0a4:	681b      	ldr	r3, [r3, #0]
   ba0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba0a8:	9301      	str	r3, [sp, #4]
   ba0aa:	bd08      	pop	{r3, pc}
   ba0ac:	00030230 	.word	0x00030230

000ba0b0 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   ba0b0:	b508      	push	{r3, lr}
   ba0b2:	4b02      	ldr	r3, [pc, #8]	; (ba0bc <hal_spi_transfer_dma+0xc>)
   ba0b4:	681b      	ldr	r3, [r3, #0]
   ba0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba0b8:	9301      	str	r3, [sp, #4]
   ba0ba:	bd08      	pop	{r3, pc}
   ba0bc:	00030230 	.word	0x00030230

000ba0c0 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   ba0c0:	b508      	push	{r3, lr}
   ba0c2:	4b02      	ldr	r3, [pc, #8]	; (ba0cc <hal_spi_transfer_dma_status+0xc>)
   ba0c4:	681b      	ldr	r3, [r3, #0]
   ba0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   ba0c8:	9301      	str	r3, [sp, #4]
   ba0ca:	bd08      	pop	{r3, pc}
   ba0cc:	00030230 	.word	0x00030230

000ba0d0 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   ba0d0:	b508      	push	{r3, lr}
   ba0d2:	4b02      	ldr	r3, [pc, #8]	; (ba0dc <hal_spi_set_settings+0xc>)
   ba0d4:	681b      	ldr	r3, [r3, #0]
   ba0d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   ba0d8:	9301      	str	r3, [sp, #4]
   ba0da:	bd08      	pop	{r3, pc}
   ba0dc:	00030230 	.word	0x00030230

000ba0e0 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   ba0e0:	b508      	push	{r3, lr}
   ba0e2:	4b02      	ldr	r3, [pc, #8]	; (ba0ec <hal_spi_acquire+0xc>)
   ba0e4:	681b      	ldr	r3, [r3, #0]
   ba0e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba0e8:	9301      	str	r3, [sp, #4]
   ba0ea:	bd08      	pop	{r3, pc}
   ba0ec:	00030230 	.word	0x00030230

000ba0f0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   ba0f0:	b508      	push	{r3, lr}
   ba0f2:	4b02      	ldr	r3, [pc, #8]	; (ba0fc <hal_spi_release+0xc>)
   ba0f4:	681b      	ldr	r3, [r3, #0]
   ba0f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba0f8:	9301      	str	r3, [sp, #4]
   ba0fa:	bd08      	pop	{r3, pc}
   ba0fc:	00030230 	.word	0x00030230

000ba100 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   ba100:	b508      	push	{r3, lr}
   ba102:	4b02      	ldr	r3, [pc, #8]	; (ba10c <hal_usart_write+0xc>)
   ba104:	681b      	ldr	r3, [r3, #0]
   ba106:	68db      	ldr	r3, [r3, #12]
   ba108:	9301      	str	r3, [sp, #4]
   ba10a:	bd08      	pop	{r3, pc}
   ba10c:	0003023c 	.word	0x0003023c

000ba110 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   ba110:	b508      	push	{r3, lr}
   ba112:	4b02      	ldr	r3, [pc, #8]	; (ba11c <hal_usart_available+0xc>)
   ba114:	681b      	ldr	r3, [r3, #0]
   ba116:	691b      	ldr	r3, [r3, #16]
   ba118:	9301      	str	r3, [sp, #4]
   ba11a:	bd08      	pop	{r3, pc}
   ba11c:	0003023c 	.word	0x0003023c

000ba120 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   ba120:	b508      	push	{r3, lr}
   ba122:	4b02      	ldr	r3, [pc, #8]	; (ba12c <hal_usart_read+0xc>)
   ba124:	681b      	ldr	r3, [r3, #0]
   ba126:	695b      	ldr	r3, [r3, #20]
   ba128:	9301      	str	r3, [sp, #4]
   ba12a:	bd08      	pop	{r3, pc}
   ba12c:	0003023c 	.word	0x0003023c

000ba130 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   ba130:	b508      	push	{r3, lr}
   ba132:	4b02      	ldr	r3, [pc, #8]	; (ba13c <hal_usart_peek+0xc>)
   ba134:	681b      	ldr	r3, [r3, #0]
   ba136:	699b      	ldr	r3, [r3, #24]
   ba138:	9301      	str	r3, [sp, #4]
   ba13a:	bd08      	pop	{r3, pc}
   ba13c:	0003023c 	.word	0x0003023c

000ba140 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   ba140:	b508      	push	{r3, lr}
   ba142:	4b02      	ldr	r3, [pc, #8]	; (ba14c <hal_usart_flush+0xc>)
   ba144:	681b      	ldr	r3, [r3, #0]
   ba146:	69db      	ldr	r3, [r3, #28]
   ba148:	9301      	str	r3, [sp, #4]
   ba14a:	bd08      	pop	{r3, pc}
   ba14c:	0003023c 	.word	0x0003023c

000ba150 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   ba150:	b508      	push	{r3, lr}
   ba152:	4b02      	ldr	r3, [pc, #8]	; (ba15c <hal_usart_is_enabled+0xc>)
   ba154:	681b      	ldr	r3, [r3, #0]
   ba156:	6a1b      	ldr	r3, [r3, #32]
   ba158:	9301      	str	r3, [sp, #4]
   ba15a:	bd08      	pop	{r3, pc}
   ba15c:	0003023c 	.word	0x0003023c

000ba160 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   ba160:	b508      	push	{r3, lr}
   ba162:	4b02      	ldr	r3, [pc, #8]	; (ba16c <hal_usart_available_data_for_write+0xc>)
   ba164:	681b      	ldr	r3, [r3, #0]
   ba166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba168:	9301      	str	r3, [sp, #4]
   ba16a:	bd08      	pop	{r3, pc}
   ba16c:	0003023c 	.word	0x0003023c

000ba170 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   ba170:	b508      	push	{r3, lr}
   ba172:	4b02      	ldr	r3, [pc, #8]	; (ba17c <hal_usart_begin_config+0xc>)
   ba174:	681b      	ldr	r3, [r3, #0]
   ba176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba178:	9301      	str	r3, [sp, #4]
   ba17a:	bd08      	pop	{r3, pc}
   ba17c:	0003023c 	.word	0x0003023c

000ba180 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   ba180:	b508      	push	{r3, lr}
   ba182:	4b02      	ldr	r3, [pc, #8]	; (ba18c <hal_usart_init_ex+0xc>)
   ba184:	681b      	ldr	r3, [r3, #0]
   ba186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba188:	9301      	str	r3, [sp, #4]
   ba18a:	bd08      	pop	{r3, pc}
   ba18c:	0003023c 	.word	0x0003023c

000ba190 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   ba190:	b508      	push	{r3, lr}
   ba192:	4b02      	ldr	r3, [pc, #8]	; (ba19c <HAL_USB_USART_Init+0xc>)
   ba194:	681b      	ldr	r3, [r3, #0]
   ba196:	681b      	ldr	r3, [r3, #0]
   ba198:	9301      	str	r3, [sp, #4]
   ba19a:	bd08      	pop	{r3, pc}
   ba19c:	0003024c 	.word	0x0003024c

000ba1a0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   ba1a0:	b508      	push	{r3, lr}
   ba1a2:	4b02      	ldr	r3, [pc, #8]	; (ba1ac <HAL_USB_USART_Begin+0xc>)
   ba1a4:	681b      	ldr	r3, [r3, #0]
   ba1a6:	685b      	ldr	r3, [r3, #4]
   ba1a8:	9301      	str	r3, [sp, #4]
   ba1aa:	bd08      	pop	{r3, pc}
   ba1ac:	0003024c 	.word	0x0003024c

000ba1b0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   ba1b0:	b508      	push	{r3, lr}
   ba1b2:	4b02      	ldr	r3, [pc, #8]	; (ba1bc <HAL_USB_USART_Available_Data+0xc>)
   ba1b4:	681b      	ldr	r3, [r3, #0]
   ba1b6:	691b      	ldr	r3, [r3, #16]
   ba1b8:	9301      	str	r3, [sp, #4]
   ba1ba:	bd08      	pop	{r3, pc}
   ba1bc:	0003024c 	.word	0x0003024c

000ba1c0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   ba1c0:	b508      	push	{r3, lr}
   ba1c2:	4b02      	ldr	r3, [pc, #8]	; (ba1cc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   ba1c4:	681b      	ldr	r3, [r3, #0]
   ba1c6:	695b      	ldr	r3, [r3, #20]
   ba1c8:	9301      	str	r3, [sp, #4]
   ba1ca:	bd08      	pop	{r3, pc}
   ba1cc:	0003024c 	.word	0x0003024c

000ba1d0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   ba1d0:	b508      	push	{r3, lr}
   ba1d2:	4b02      	ldr	r3, [pc, #8]	; (ba1dc <HAL_USB_USART_Receive_Data+0xc>)
   ba1d4:	681b      	ldr	r3, [r3, #0]
   ba1d6:	699b      	ldr	r3, [r3, #24]
   ba1d8:	9301      	str	r3, [sp, #4]
   ba1da:	bd08      	pop	{r3, pc}
   ba1dc:	0003024c 	.word	0x0003024c

000ba1e0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   ba1e0:	b508      	push	{r3, lr}
   ba1e2:	4b02      	ldr	r3, [pc, #8]	; (ba1ec <HAL_USB_USART_Send_Data+0xc>)
   ba1e4:	681b      	ldr	r3, [r3, #0]
   ba1e6:	69db      	ldr	r3, [r3, #28]
   ba1e8:	9301      	str	r3, [sp, #4]
   ba1ea:	bd08      	pop	{r3, pc}
   ba1ec:	0003024c 	.word	0x0003024c

000ba1f0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   ba1f0:	b508      	push	{r3, lr}
   ba1f2:	4b02      	ldr	r3, [pc, #8]	; (ba1fc <HAL_USB_USART_Flush_Data+0xc>)
   ba1f4:	681b      	ldr	r3, [r3, #0]
   ba1f6:	6a1b      	ldr	r3, [r3, #32]
   ba1f8:	9301      	str	r3, [sp, #4]
   ba1fa:	bd08      	pop	{r3, pc}
   ba1fc:	0003024c 	.word	0x0003024c

000ba200 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   ba200:	b508      	push	{r3, lr}
   ba202:	4b02      	ldr	r3, [pc, #8]	; (ba20c <panic_+0xc>)
   ba204:	681b      	ldr	r3, [r3, #0]
   ba206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba208:	9301      	str	r3, [sp, #4]
   ba20a:	bd08      	pop	{r3, pc}
   ba20c:	00030260 	.word	0x00030260

000ba210 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   ba210:	b508      	push	{r3, lr}
   ba212:	4b02      	ldr	r3, [pc, #8]	; (ba21c <log_message+0xc>)
   ba214:	681b      	ldr	r3, [r3, #0]
   ba216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   ba218:	9301      	str	r3, [sp, #4]
   ba21a:	bd08      	pop	{r3, pc}
   ba21c:	00030260 	.word	0x00030260

000ba220 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   ba220:	b508      	push	{r3, lr}
   ba222:	4b02      	ldr	r3, [pc, #8]	; (ba22c <system_mode+0xc>)
   ba224:	681b      	ldr	r3, [r3, #0]
   ba226:	681b      	ldr	r3, [r3, #0]
   ba228:	9301      	str	r3, [sp, #4]
   ba22a:	bd08      	pop	{r3, pc}
   ba22c:	00030220 	.word	0x00030220

000ba230 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   ba230:	b508      	push	{r3, lr}
   ba232:	4b02      	ldr	r3, [pc, #8]	; (ba23c <set_system_mode+0xc>)
   ba234:	681b      	ldr	r3, [r3, #0]
   ba236:	685b      	ldr	r3, [r3, #4]
   ba238:	9301      	str	r3, [sp, #4]
   ba23a:	bd08      	pop	{r3, pc}
   ba23c:	00030220 	.word	0x00030220

000ba240 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   ba240:	b508      	push	{r3, lr}
   ba242:	4b02      	ldr	r3, [pc, #8]	; (ba24c <system_delay_ms+0xc>)
   ba244:	681b      	ldr	r3, [r3, #0]
   ba246:	695b      	ldr	r3, [r3, #20]
   ba248:	9301      	str	r3, [sp, #4]
   ba24a:	bd08      	pop	{r3, pc}
   ba24c:	00030220 	.word	0x00030220

000ba250 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   ba250:	b508      	push	{r3, lr}
   ba252:	4b02      	ldr	r3, [pc, #8]	; (ba25c <application_thread_current+0xc>)
   ba254:	681b      	ldr	r3, [r3, #0]
   ba256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   ba258:	9301      	str	r3, [sp, #4]
   ba25a:	bd08      	pop	{r3, pc}
   ba25c:	00030220 	.word	0x00030220

000ba260 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   ba260:	b508      	push	{r3, lr}
   ba262:	4b02      	ldr	r3, [pc, #8]	; (ba26c <application_thread_invoke+0xc>)
   ba264:	681b      	ldr	r3, [r3, #0]
   ba266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   ba268:	9301      	str	r3, [sp, #4]
   ba26a:	bd08      	pop	{r3, pc}
   ba26c:	00030220 	.word	0x00030220

000ba270 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   ba270:	b508      	push	{r3, lr}
   ba272:	4b02      	ldr	r3, [pc, #8]	; (ba27c <system_thread_get_state+0xc>)
   ba274:	681b      	ldr	r3, [r3, #0]
   ba276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   ba278:	9301      	str	r3, [sp, #4]
   ba27a:	bd08      	pop	{r3, pc}
   ba27c:	00030220 	.word	0x00030220

000ba280 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   ba280:	b508      	push	{r3, lr}
   ba282:	4b03      	ldr	r3, [pc, #12]	; (ba290 <system_ctrl_set_app_request_handler+0x10>)
   ba284:	681b      	ldr	r3, [r3, #0]
   ba286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   ba28a:	9301      	str	r3, [sp, #4]
   ba28c:	bd08      	pop	{r3, pc}
   ba28e:	0000      	.short	0x0000
   ba290:	00030220 	.word	0x00030220

000ba294 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   ba294:	b508      	push	{r3, lr}
   ba296:	4b03      	ldr	r3, [pc, #12]	; (ba2a4 <system_ctrl_set_result+0x10>)
   ba298:	681b      	ldr	r3, [r3, #0]
   ba29a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   ba29e:	9301      	str	r3, [sp, #4]
   ba2a0:	bd08      	pop	{r3, pc}
   ba2a2:	0000      	.short	0x0000
   ba2a4:	00030220 	.word	0x00030220

000ba2a8 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   ba2a8:	b508      	push	{r3, lr}
   ba2aa:	4b02      	ldr	r3, [pc, #8]	; (ba2b4 <spark_function+0xc>)
   ba2ac:	681b      	ldr	r3, [r3, #0]
   ba2ae:	685b      	ldr	r3, [r3, #4]
   ba2b0:	9301      	str	r3, [sp, #4]
   ba2b2:	bd08      	pop	{r3, pc}
   ba2b4:	00030244 	.word	0x00030244

000ba2b8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   ba2b8:	b508      	push	{r3, lr}
   ba2ba:	4b02      	ldr	r3, [pc, #8]	; (ba2c4 <spark_process+0xc>)
   ba2bc:	681b      	ldr	r3, [r3, #0]
   ba2be:	689b      	ldr	r3, [r3, #8]
   ba2c0:	9301      	str	r3, [sp, #4]
   ba2c2:	bd08      	pop	{r3, pc}
   ba2c4:	00030244 	.word	0x00030244

000ba2c8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   ba2c8:	b508      	push	{r3, lr}
   ba2ca:	4b02      	ldr	r3, [pc, #8]	; (ba2d4 <spark_cloud_flag_connect+0xc>)
   ba2cc:	681b      	ldr	r3, [r3, #0]
   ba2ce:	68db      	ldr	r3, [r3, #12]
   ba2d0:	9301      	str	r3, [sp, #4]
   ba2d2:	bd08      	pop	{r3, pc}
   ba2d4:	00030244 	.word	0x00030244

000ba2d8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   ba2d8:	b508      	push	{r3, lr}
   ba2da:	4b02      	ldr	r3, [pc, #8]	; (ba2e4 <spark_cloud_flag_connected+0xc>)
   ba2dc:	681b      	ldr	r3, [r3, #0]
   ba2de:	695b      	ldr	r3, [r3, #20]
   ba2e0:	9301      	str	r3, [sp, #4]
   ba2e2:	bd08      	pop	{r3, pc}
   ba2e4:	00030244 	.word	0x00030244

000ba2e8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   ba2e8:	b508      	push	{r3, lr}
   ba2ea:	4b02      	ldr	r3, [pc, #8]	; (ba2f4 <spark_send_event+0xc>)
   ba2ec:	681b      	ldr	r3, [r3, #0]
   ba2ee:	6a1b      	ldr	r3, [r3, #32]
   ba2f0:	9301      	str	r3, [sp, #4]
   ba2f2:	bd08      	pop	{r3, pc}
   ba2f4:	00030244 	.word	0x00030244

000ba2f8 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   ba2f8:	b508      	push	{r3, lr}
   ba2fa:	4b02      	ldr	r3, [pc, #8]	; (ba304 <spark_subscribe+0xc>)
   ba2fc:	681b      	ldr	r3, [r3, #0]
   ba2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba300:	9301      	str	r3, [sp, #4]
   ba302:	bd08      	pop	{r3, pc}
   ba304:	00030244 	.word	0x00030244

000ba308 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   ba308:	b508      	push	{r3, lr}
   ba30a:	4b02      	ldr	r3, [pc, #8]	; (ba314 <spark_sync_time_pending+0xc>)
   ba30c:	681b      	ldr	r3, [r3, #0]
   ba30e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba310:	9301      	str	r3, [sp, #4]
   ba312:	bd08      	pop	{r3, pc}
   ba314:	00030244 	.word	0x00030244

000ba318 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   ba318:	b508      	push	{r3, lr}
   ba31a:	4b02      	ldr	r3, [pc, #8]	; (ba324 <spark_set_random_seed_from_cloud_handler+0xc>)
   ba31c:	681b      	ldr	r3, [r3, #0]
   ba31e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   ba320:	9301      	str	r3, [sp, #4]
   ba322:	bd08      	pop	{r3, pc}
   ba324:	00030244 	.word	0x00030244

000ba328 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   ba328:	b508      	push	{r3, lr}
   ba32a:	4b02      	ldr	r3, [pc, #8]	; (ba334 <network_connect+0xc>)
   ba32c:	681b      	ldr	r3, [r3, #0]
   ba32e:	685b      	ldr	r3, [r3, #4]
   ba330:	9301      	str	r3, [sp, #4]
   ba332:	bd08      	pop	{r3, pc}
   ba334:	00030240 	.word	0x00030240

000ba338 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   ba338:	b508      	push	{r3, lr}
   ba33a:	4b02      	ldr	r3, [pc, #8]	; (ba344 <network_connecting+0xc>)
   ba33c:	681b      	ldr	r3, [r3, #0]
   ba33e:	689b      	ldr	r3, [r3, #8]
   ba340:	9301      	str	r3, [sp, #4]
   ba342:	bd08      	pop	{r3, pc}
   ba344:	00030240 	.word	0x00030240

000ba348 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   ba348:	b508      	push	{r3, lr}
   ba34a:	4b02      	ldr	r3, [pc, #8]	; (ba354 <network_disconnect+0xc>)
   ba34c:	681b      	ldr	r3, [r3, #0]
   ba34e:	68db      	ldr	r3, [r3, #12]
   ba350:	9301      	str	r3, [sp, #4]
   ba352:	bd08      	pop	{r3, pc}
   ba354:	00030240 	.word	0x00030240

000ba358 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   ba358:	b508      	push	{r3, lr}
   ba35a:	4b02      	ldr	r3, [pc, #8]	; (ba364 <network_ready+0xc>)
   ba35c:	681b      	ldr	r3, [r3, #0]
   ba35e:	691b      	ldr	r3, [r3, #16]
   ba360:	9301      	str	r3, [sp, #4]
   ba362:	bd08      	pop	{r3, pc}
   ba364:	00030240 	.word	0x00030240

000ba368 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   ba368:	b508      	push	{r3, lr}
   ba36a:	4b02      	ldr	r3, [pc, #8]	; (ba374 <network_on+0xc>)
   ba36c:	681b      	ldr	r3, [r3, #0]
   ba36e:	695b      	ldr	r3, [r3, #20]
   ba370:	9301      	str	r3, [sp, #4]
   ba372:	bd08      	pop	{r3, pc}
   ba374:	00030240 	.word	0x00030240

000ba378 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   ba378:	b508      	push	{r3, lr}
   ba37a:	4b02      	ldr	r3, [pc, #8]	; (ba384 <network_off+0xc>)
   ba37c:	681b      	ldr	r3, [r3, #0]
   ba37e:	699b      	ldr	r3, [r3, #24]
   ba380:	9301      	str	r3, [sp, #4]
   ba382:	bd08      	pop	{r3, pc}
   ba384:	00030240 	.word	0x00030240

000ba388 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   ba388:	b508      	push	{r3, lr}
   ba38a:	4b02      	ldr	r3, [pc, #8]	; (ba394 <network_listen+0xc>)
   ba38c:	681b      	ldr	r3, [r3, #0]
   ba38e:	69db      	ldr	r3, [r3, #28]
   ba390:	9301      	str	r3, [sp, #4]
   ba392:	bd08      	pop	{r3, pc}
   ba394:	00030240 	.word	0x00030240

000ba398 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   ba398:	b508      	push	{r3, lr}
   ba39a:	4b02      	ldr	r3, [pc, #8]	; (ba3a4 <network_listening+0xc>)
   ba39c:	681b      	ldr	r3, [r3, #0]
   ba39e:	6a1b      	ldr	r3, [r3, #32]
   ba3a0:	9301      	str	r3, [sp, #4]
   ba3a2:	bd08      	pop	{r3, pc}
   ba3a4:	00030240 	.word	0x00030240

000ba3a8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   ba3a8:	b508      	push	{r3, lr}
   ba3aa:	4b02      	ldr	r3, [pc, #8]	; (ba3b4 <network_set_listen_timeout+0xc>)
   ba3ac:	681b      	ldr	r3, [r3, #0]
   ba3ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba3b0:	9301      	str	r3, [sp, #4]
   ba3b2:	bd08      	pop	{r3, pc}
   ba3b4:	00030240 	.word	0x00030240

000ba3b8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   ba3b8:	b508      	push	{r3, lr}
   ba3ba:	4b02      	ldr	r3, [pc, #8]	; (ba3c4 <network_get_listen_timeout+0xc>)
   ba3bc:	681b      	ldr	r3, [r3, #0]
   ba3be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba3c0:	9301      	str	r3, [sp, #4]
   ba3c2:	bd08      	pop	{r3, pc}
   ba3c4:	00030240 	.word	0x00030240

000ba3c8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   ba3c8:	b508      	push	{r3, lr}
   ba3ca:	4b02      	ldr	r3, [pc, #8]	; (ba3d4 <network_is_on+0xc>)
   ba3cc:	681b      	ldr	r3, [r3, #0]
   ba3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba3d0:	9301      	str	r3, [sp, #4]
   ba3d2:	bd08      	pop	{r3, pc}
   ba3d4:	00030240 	.word	0x00030240

000ba3d8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   ba3d8:	b508      	push	{r3, lr}
   ba3da:	4b02      	ldr	r3, [pc, #8]	; (ba3e4 <network_is_off+0xc>)
   ba3dc:	681b      	ldr	r3, [r3, #0]
   ba3de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba3e0:	9301      	str	r3, [sp, #4]
   ba3e2:	bd08      	pop	{r3, pc}
   ba3e4:	00030240 	.word	0x00030240

000ba3e8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   ba3e8:	b508      	push	{r3, lr}
   ba3ea:	4b02      	ldr	r3, [pc, #8]	; (ba3f4 <malloc+0xc>)
   ba3ec:	681b      	ldr	r3, [r3, #0]
   ba3ee:	681b      	ldr	r3, [r3, #0]
   ba3f0:	9301      	str	r3, [sp, #4]
   ba3f2:	bd08      	pop	{r3, pc}
   ba3f4:	0003021c 	.word	0x0003021c

000ba3f8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   ba3f8:	b508      	push	{r3, lr}
   ba3fa:	4b02      	ldr	r3, [pc, #8]	; (ba404 <free+0xc>)
   ba3fc:	681b      	ldr	r3, [r3, #0]
   ba3fe:	685b      	ldr	r3, [r3, #4]
   ba400:	9301      	str	r3, [sp, #4]
   ba402:	bd08      	pop	{r3, pc}
   ba404:	0003021c 	.word	0x0003021c

000ba408 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   ba408:	b508      	push	{r3, lr}
   ba40a:	4b02      	ldr	r3, [pc, #8]	; (ba414 <realloc+0xc>)
   ba40c:	681b      	ldr	r3, [r3, #0]
   ba40e:	689b      	ldr	r3, [r3, #8]
   ba410:	9301      	str	r3, [sp, #4]
   ba412:	bd08      	pop	{r3, pc}
   ba414:	0003021c 	.word	0x0003021c

000ba418 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   ba418:	b508      	push	{r3, lr}
   ba41a:	4b02      	ldr	r3, [pc, #8]	; (ba424 <sprintf+0xc>)
   ba41c:	681b      	ldr	r3, [r3, #0]
   ba41e:	68db      	ldr	r3, [r3, #12]
   ba420:	9301      	str	r3, [sp, #4]
   ba422:	bd08      	pop	{r3, pc}
   ba424:	0003021c 	.word	0x0003021c

000ba428 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   ba428:	b508      	push	{r3, lr}
   ba42a:	4b02      	ldr	r3, [pc, #8]	; (ba434 <sscanf+0xc>)
   ba42c:	681b      	ldr	r3, [r3, #0]
   ba42e:	695b      	ldr	r3, [r3, #20]
   ba430:	9301      	str	r3, [sp, #4]
   ba432:	bd08      	pop	{r3, pc}
   ba434:	0003021c 	.word	0x0003021c

000ba438 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   ba438:	b508      	push	{r3, lr}
   ba43a:	4b02      	ldr	r3, [pc, #8]	; (ba444 <snprintf+0xc>)
   ba43c:	681b      	ldr	r3, [r3, #0]
   ba43e:	69db      	ldr	r3, [r3, #28]
   ba440:	9301      	str	r3, [sp, #4]
   ba442:	bd08      	pop	{r3, pc}
   ba444:	0003021c 	.word	0x0003021c

000ba448 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   ba448:	b508      	push	{r3, lr}
   ba44a:	4b02      	ldr	r3, [pc, #8]	; (ba454 <vsnprintf+0xc>)
   ba44c:	681b      	ldr	r3, [r3, #0]
   ba44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba450:	9301      	str	r3, [sp, #4]
   ba452:	bd08      	pop	{r3, pc}
   ba454:	0003021c 	.word	0x0003021c

000ba458 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   ba458:	b508      	push	{r3, lr}
   ba45a:	4b02      	ldr	r3, [pc, #8]	; (ba464 <abort+0xc>)
   ba45c:	681b      	ldr	r3, [r3, #0]
   ba45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba460:	9301      	str	r3, [sp, #4]
   ba462:	bd08      	pop	{r3, pc}
   ba464:	0003021c 	.word	0x0003021c

000ba468 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   ba468:	b508      	push	{r3, lr}
   ba46a:	4b02      	ldr	r3, [pc, #8]	; (ba474 <_malloc_r+0xc>)
   ba46c:	681b      	ldr	r3, [r3, #0]
   ba46e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba470:	9301      	str	r3, [sp, #4]
   ba472:	bd08      	pop	{r3, pc}
   ba474:	0003021c 	.word	0x0003021c

000ba478 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   ba478:	b508      	push	{r3, lr}
   ba47a:	4b02      	ldr	r3, [pc, #8]	; (ba484 <__errno+0xc>)
   ba47c:	681b      	ldr	r3, [r3, #0]
   ba47e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   ba480:	9301      	str	r3, [sp, #4]
   ba482:	bd08      	pop	{r3, pc}
   ba484:	0003021c 	.word	0x0003021c

000ba488 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   ba488:	b508      	push	{r3, lr}
   ba48a:	4b02      	ldr	r3, [pc, #8]	; (ba494 <__assert_func+0xc>)
   ba48c:	681b      	ldr	r3, [r3, #0]
   ba48e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba490:	9301      	str	r3, [sp, #4]
   ba492:	bd08      	pop	{r3, pc}
   ba494:	0003021c 	.word	0x0003021c

000ba498 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   ba498:	b508      	push	{r3, lr}
   ba49a:	4b02      	ldr	r3, [pc, #8]	; (ba4a4 <newlib_impure_ptr_callback+0xc>)
   ba49c:	681b      	ldr	r3, [r3, #0]
   ba49e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba4a0:	9301      	str	r3, [sp, #4]
   ba4a2:	bd08      	pop	{r3, pc}
   ba4a4:	0003021c 	.word	0x0003021c

000ba4a8 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   ba4a8:	b508      	push	{r3, lr}
   ba4aa:	4b02      	ldr	r3, [pc, #8]	; (ba4b4 <localtime_r+0xc>)
   ba4ac:	681b      	ldr	r3, [r3, #0]
   ba4ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   ba4b0:	9301      	str	r3, [sp, #4]
   ba4b2:	bd08      	pop	{r3, pc}
   ba4b4:	0003021c 	.word	0x0003021c

000ba4b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   ba4b8:	2100      	movs	r1, #0
   ba4ba:	f7ff bec1 	b.w	ba240 <system_delay_ms>

000ba4be <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   ba4be:	b510      	push	{r4, lr}
      if (_M_empty())
   ba4c0:	6883      	ldr	r3, [r0, #8]
   ba4c2:	4604      	mov	r4, r0
   ba4c4:	b90b      	cbnz	r3, ba4ca <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   ba4c6:	f003 fe4e 	bl	be166 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba4ca:	68c3      	ldr	r3, [r0, #12]
   ba4cc:	4798      	blx	r3
      if (_M_manager)
   ba4ce:	68a3      	ldr	r3, [r4, #8]
   ba4d0:	b11b      	cbz	r3, ba4da <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   ba4d2:	2203      	movs	r2, #3
   ba4d4:	4621      	mov	r1, r4
   ba4d6:	4620      	mov	r0, r4
   ba4d8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   ba4da:	4620      	mov	r0, r4
   ba4dc:	2110      	movs	r1, #16
}
   ba4de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   ba4e2:	f7f9 bddc 	b.w	b409e <_ZdlPvj>

000ba4e6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba4e6:	4770      	bx	lr

000ba4e8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   ba4e8:	4770      	bx	lr

000ba4ea <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   ba4ea:	4770      	bx	lr

000ba4ec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba4ec:	4770      	bx	lr
	...

000ba4f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   ba4f0:	4b06      	ldr	r3, [pc, #24]	; (ba50c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   ba4f2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   ba4f4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   ba4f6:	f100 040c 	add.w	r4, r0, #12
	    ||
   ba4fa:	d005      	beq.n	ba508 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   ba4fc:	4608      	mov	r0, r1
   ba4fe:	f003 fe35 	bl	be16c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   ba502:	2800      	cmp	r0, #0
   ba504:	bf08      	it	eq
   ba506:	2400      	moveq	r4, #0
      }
   ba508:	4620      	mov	r0, r4
   ba50a:	bd10      	pop	{r4, pc}
   ba50c:	000c2440 	.word	0x000c2440

000ba510 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   ba510:	4b06      	ldr	r3, [pc, #24]	; (ba52c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   ba512:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   ba514:	b510      	push	{r4, lr}
   ba516:	f100 040c 	add.w	r4, r0, #12
	    ||
   ba51a:	d005      	beq.n	ba528 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   ba51c:	4608      	mov	r0, r1
   ba51e:	f003 fe25 	bl	be16c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   ba522:	2800      	cmp	r0, #0
   ba524:	bf08      	it	eq
   ba526:	2400      	moveq	r4, #0
      }
   ba528:	4620      	mov	r0, r4
   ba52a:	bd10      	pop	{r4, pc}
   ba52c:	000c2440 	.word	0x000c2440

000ba530 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   ba530:	4b06      	ldr	r3, [pc, #24]	; (ba54c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   ba532:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   ba534:	b510      	push	{r4, lr}
   ba536:	f100 040c 	add.w	r4, r0, #12
	    ||
   ba53a:	d005      	beq.n	ba548 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   ba53c:	4608      	mov	r0, r1
   ba53e:	f003 fe15 	bl	be16c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   ba542:	2800      	cmp	r0, #0
   ba544:	bf08      	it	eq
   ba546:	2400      	moveq	r4, #0
      }
   ba548:	4620      	mov	r0, r4
   ba54a:	bd10      	pop	{r4, pc}
   ba54c:	000c2440 	.word	0x000c2440

000ba550 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba550:	b510      	push	{r4, lr}
   ba552:	2168      	movs	r1, #104	; 0x68
   ba554:	4604      	mov	r4, r0
   ba556:	f7f9 fda2 	bl	b409e <_ZdlPvj>
   ba55a:	4620      	mov	r0, r4
   ba55c:	bd10      	pop	{r4, pc}

000ba55e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   ba55e:	b510      	push	{r4, lr}
   ba560:	2128      	movs	r1, #40	; 0x28
   ba562:	4604      	mov	r4, r0
   ba564:	f7f9 fd9b 	bl	b409e <_ZdlPvj>
   ba568:	4620      	mov	r0, r4
   ba56a:	bd10      	pop	{r4, pc}

000ba56c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   ba56c:	b510      	push	{r4, lr}
   ba56e:	2130      	movs	r1, #48	; 0x30
   ba570:	4604      	mov	r4, r0
   ba572:	f7f9 fd94 	bl	b409e <_ZdlPvj>
   ba576:	4620      	mov	r0, r4
   ba578:	bd10      	pop	{r4, pc}

000ba57a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   ba57a:	2168      	movs	r1, #104	; 0x68
   ba57c:	f7f9 bd8f 	b.w	b409e <_ZdlPvj>

000ba580 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   ba580:	2128      	movs	r1, #40	; 0x28
   ba582:	f7f9 bd8c 	b.w	b409e <_ZdlPvj>

000ba586 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   ba586:	2130      	movs	r1, #48	; 0x30
   ba588:	f7f9 bd89 	b.w	b409e <_ZdlPvj>

000ba58c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   ba58c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   ba58e:	2500      	movs	r5, #0
   ba590:	1cec      	adds	r4, r5, #3
   ba592:	428c      	cmp	r4, r1
   ba594:	d80d      	bhi.n	ba5b2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   ba596:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   ba598:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   ba59a:	5d87      	ldrb	r7, [r0, r6]
   ba59c:	4297      	cmp	r7, r2
   ba59e:	d105      	bne.n	ba5ac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   ba5a0:	4426      	add	r6, r4
   ba5a2:	42b1      	cmp	r1, r6
   ba5a4:	d305      	bcc.n	ba5b2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   ba5a6:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   ba5a8:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   ba5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   ba5ac:	3401      	adds	r4, #1
   ba5ae:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   ba5b0:	e7ee      	b.n	ba590 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   ba5b2:	2000      	movs	r0, #0
   ba5b4:	e7f9      	b.n	ba5aa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000ba5b8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   ba5b8:	4a02      	ldr	r2, [pc, #8]	; (ba5c4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   ba5ba:	4903      	ldr	r1, [pc, #12]	; (ba5c8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   ba5bc:	200a      	movs	r0, #10
   ba5be:	f7ff be1f 	b.w	ba200 <panic_>
   ba5c2:	bf00      	nop
   ba5c4:	000b9eb1 	.word	0x000b9eb1
   ba5c8:	000c21d0 	.word	0x000c21d0

000ba5cc <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   ba5cc:	b430      	push	{r4, r5}
   ba5ce:	460d      	mov	r5, r1
   ba5d0:	4611      	mov	r1, r2
   ba5d2:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   ba5d4:	6803      	ldr	r3, [r0, #0]
   ba5d6:	6809      	ldr	r1, [r1, #0]
   ba5d8:	6828      	ldr	r0, [r5, #0]
   ba5da:	e9d3 4300 	ldrd	r4, r3, [r3]
   ba5de:	46a4      	mov	ip, r4
      }
   ba5e0:	bc30      	pop	{r4, r5}
   ba5e2:	4760      	bx	ip

000ba5e4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   ba5e4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   ba5e6:	b538      	push	{r3, r4, r5, lr}
   ba5e8:	4604      	mov	r4, r0
	switch (__op)
   ba5ea:	d102      	bne.n	ba5f2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   ba5ec:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   ba5ee:	6023      	str	r3, [r4, #0]
	}
   ba5f0:	e003      	b.n	ba5fa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   ba5f2:	2a02      	cmp	r2, #2
   ba5f4:	d003      	beq.n	ba5fe <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   ba5f6:	2a03      	cmp	r2, #3
   ba5f8:	d00d      	beq.n	ba616 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   ba5fa:	2000      	movs	r0, #0
   ba5fc:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   ba5fe:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   ba600:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   ba602:	f7f9 fd48 	bl	b4096 <_Znwj>
   ba606:	4603      	mov	r3, r0
   ba608:	2800      	cmp	r0, #0
   ba60a:	d0f0      	beq.n	ba5ee <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   ba60c:	e895 0003 	ldmia.w	r5, {r0, r1}
   ba610:	e883 0003 	stmia.w	r3, {r0, r1}
   ba614:	e7eb      	b.n	ba5ee <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   ba616:	6800      	ldr	r0, [r0, #0]
   ba618:	2800      	cmp	r0, #0
   ba61a:	d0ee      	beq.n	ba5fa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   ba61c:	2108      	movs	r1, #8
   ba61e:	f7f9 fd3e 	bl	b409e <_ZdlPvj>
   ba622:	e7ea      	b.n	ba5fa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000ba624 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   ba624:	b510      	push	{r4, lr}
	if (_M_manager)
   ba626:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   ba628:	4604      	mov	r4, r0
	if (_M_manager)
   ba62a:	b12b      	cbz	r3, ba638 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   ba62c:	2203      	movs	r2, #3
   ba62e:	4601      	mov	r1, r0
   ba630:	4798      	blx	r3
	    _M_manager = nullptr;
   ba632:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   ba634:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   ba638:	bd10      	pop	{r4, pc}

000ba63a <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   ba63a:	b510      	push	{r4, lr}
	if (_M_manager)
   ba63c:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   ba63e:	4604      	mov	r4, r0
	if (_M_manager)
   ba640:	b12b      	cbz	r3, ba64e <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   ba642:	2203      	movs	r2, #3
   ba644:	4601      	mov	r1, r0
   ba646:	4798      	blx	r3
	    _M_manager = nullptr;
   ba648:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   ba64a:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   ba64e:	bd10      	pop	{r4, pc}

000ba650 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   ba650:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   ba652:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   ba654:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   ba656:	2220      	movs	r2, #32
   ba658:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   ba65c:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   ba65e:	4a08      	ldr	r2, [pc, #32]	; (ba680 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   ba660:	9200      	str	r2, [sp, #0]
   ba662:	4908      	ldr	r1, [pc, #32]	; (ba684 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   ba664:	aa02      	add	r2, sp, #8
   ba666:	2001      	movs	r0, #1
   ba668:	f7ff fdd2 	bl	ba210 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   ba66c:	6820      	ldr	r0, [r4, #0]
   ba66e:	4906      	ldr	r1, [pc, #24]	; (ba688 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   ba670:	8800      	ldrh	r0, [r0, #0]
   ba672:	2300      	movs	r3, #0
   ba674:	4622      	mov	r2, r4
    }
   ba676:	b00a      	add	sp, #40	; 0x28
   ba678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   ba67c:	f7ff bb5c 	b.w	b9d38 <hal_ble_gatt_client_discover_all_services>
   ba680:	000c21f2 	.word	0x000c21f2
   ba684:	000c21e7 	.word	0x000c21e7
   ba688:	000bc1b9 	.word	0x000bc1b9

000ba68c <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   ba68c:	b510      	push	{r4, lr}
   ba68e:	3801      	subs	r0, #1
   ba690:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   ba694:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   ba698:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   ba69a:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   ba69e:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   ba6a0:	bf88      	it	hi
   ba6a2:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   ba6a6:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   ba6aa:	7803      	ldrb	r3, [r0, #0]
   ba6ac:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   ba6b0:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   ba6b4:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   ba6b6:	bf88      	it	hi
   ba6b8:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   ba6bc:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   ba6be:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   ba6c2:	d1e7      	bne.n	ba694 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   ba6c4:	bd10      	pop	{r4, pc}

000ba6c6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   ba6c6:	b510      	push	{r4, lr}
   ba6c8:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   ba6ca:	3058      	adds	r0, #88	; 0x58
   ba6cc:	f7f9 ff1e 	bl	b450c <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   ba6d0:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   ba6d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba6d8:	f003 b89e 	b.w	bd818 <_ZN6StringD1Ev>

000ba6dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   ba6dc:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   ba6de:	6803      	ldr	r3, [r0, #0]
   ba6e0:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   ba6e2:	4605      	mov	r5, r0
   ba6e4:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   ba6e6:	d008      	beq.n	ba6fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   ba6e8:	b111      	cbz	r1, ba6f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   ba6ea:	684b      	ldr	r3, [r1, #4]
   ba6ec:	3301      	adds	r3, #1
   ba6ee:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   ba6f0:	6828      	ldr	r0, [r5, #0]
   ba6f2:	b108      	cbz	r0, ba6f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   ba6f4:	f7f9 ff48 	bl	b4588 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   ba6f8:	602c      	str	r4, [r5, #0]
      }
   ba6fa:	bd38      	pop	{r3, r4, r5, pc}

000ba6fc <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   ba6fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   ba700:	b2da      	uxtb	r2, r3
   ba702:	2a09      	cmp	r2, #9
   ba704:	d801      	bhi.n	ba70a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   ba706:	4618      	mov	r0, r3
   ba708:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   ba70a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   ba70e:	2b05      	cmp	r3, #5
   ba710:	d801      	bhi.n	ba716 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   ba712:	3857      	subs	r0, #87	; 0x57
   ba714:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   ba716:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   ba71a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   ba71c:	bf94      	ite	ls
   ba71e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   ba720:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   ba724:	4770      	bx	lr
	...

000ba728 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   ba728:	b510      	push	{r4, lr}
            locked_(false) {
   ba72a:	2300      	movs	r3, #0
   ba72c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   ba72e:	4b04      	ldr	r3, [pc, #16]	; (ba740 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   ba730:	4604      	mov	r4, r0
   ba732:	6818      	ldr	r0, [r3, #0]
   ba734:	f7ff fb9c 	bl	b9e70 <os_mutex_recursive_lock>
        locked_ = true;
   ba738:	2301      	movs	r3, #1
   ba73a:	7023      	strb	r3, [r4, #0]
    }
   ba73c:	4620      	mov	r0, r4
   ba73e:	bd10      	pop	{r4, pc}
   ba740:	2003e65c 	.word	0x2003e65c

000ba744 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   ba744:	b510      	push	{r4, lr}
        if (locked_) {
   ba746:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   ba748:	4604      	mov	r4, r0
        if (locked_) {
   ba74a:	b11b      	cbz	r3, ba754 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   ba74c:	4b02      	ldr	r3, [pc, #8]	; (ba758 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   ba74e:	6818      	ldr	r0, [r3, #0]
   ba750:	f7ff fb96 	bl	b9e80 <os_mutex_recursive_unlock>
    }
   ba754:	4620      	mov	r0, r4
   ba756:	bd10      	pop	{r4, pc}
   ba758:	2003e65c 	.word	0x2003e65c

000ba75c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   ba75c:	b082      	sub	sp, #8
   ba75e:	4603      	mov	r3, r0
    address_ = addr;
   ba760:	6808      	ldr	r0, [r1, #0]
   ba762:	6849      	ldr	r1, [r1, #4]
   ba764:	466a      	mov	r2, sp
   ba766:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   ba768:	466a      	mov	r2, sp
   ba76a:	ca03      	ldmia	r2!, {r0, r1}
   ba76c:	6018      	str	r0, [r3, #0]
}
   ba76e:	4618      	mov	r0, r3
    address_ = addr.address_;
   ba770:	6059      	str	r1, [r3, #4]
}
   ba772:	b002      	add	sp, #8
   ba774:	4770      	bx	lr

000ba776 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   ba776:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   ba778:	7982      	ldrb	r2, [r0, #6]
   ba77a:	798b      	ldrb	r3, [r1, #6]
   ba77c:	429a      	cmp	r2, r3
   ba77e:	d106      	bne.n	ba78e <_ZNK8particle10BleAddresseqERKS0_+0x18>
   ba780:	2206      	movs	r2, #6
   ba782:	f004 fb88 	bl	bee96 <memcmp>
   ba786:	fab0 f080 	clz	r0, r0
   ba78a:	0940      	lsrs	r0, r0, #5
}
   ba78c:	bd08      	pop	{r3, pc}
    return false;
   ba78e:	2000      	movs	r0, #0
   ba790:	e7fc      	b.n	ba78c <_ZNK8particle10BleAddresseqERKS0_+0x16>

000ba792 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   ba792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba796:	6003      	str	r3, [r0, #0]
   ba798:	8083      	strh	r3, [r0, #4]
}
   ba79a:	2000      	movs	r0, #0
   ba79c:	4770      	bx	lr

000ba79e <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   ba79e:	b508      	push	{r3, lr}
   ba7a0:	4602      	mov	r2, r0
        : address_{} {
   ba7a2:	2100      	movs	r1, #0
   ba7a4:	6001      	str	r1, [r0, #0]
   ba7a6:	6041      	str	r1, [r0, #4]
    clear();
   ba7a8:	f7ff fff3 	bl	ba792 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   ba7ac:	7191      	strb	r1, [r2, #6]
}
   ba7ae:	4610      	mov	r0, r2
   ba7b0:	bd08      	pop	{r3, pc}
	...

000ba7b4 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   ba7b4:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   ba7b6:	2301      	movs	r3, #1
   ba7b8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba7ba:	4b05      	ldr	r3, [pc, #20]	; (ba7d0 <_ZN8particle7BleUuidC1Ev+0x1c>)
   ba7bc:	4602      	mov	r2, r0
   ba7be:	f103 0110 	add.w	r1, r3, #16
   ba7c2:	f853 4b04 	ldr.w	r4, [r3], #4
   ba7c6:	f842 4b04 	str.w	r4, [r2], #4
   ba7ca:	428b      	cmp	r3, r1
   ba7cc:	d1f9      	bne.n	ba7c2 <_ZN8particle7BleUuidC1Ev+0xe>
}
   ba7ce:	bd10      	pop	{r4, pc}
   ba7d0:	000c244e 	.word	0x000c244e

000ba7d4 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   ba7d4:	7c0b      	ldrb	r3, [r1, #16]
   ba7d6:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   ba7da:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   ba7dc:	d10d      	bne.n	ba7fa <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   ba7de:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba7e0:	4b0c      	ldr	r3, [pc, #48]	; (ba814 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   ba7e2:	4602      	mov	r2, r0
   ba7e4:	f103 0410 	add.w	r4, r3, #16
   ba7e8:	f853 5b04 	ldr.w	r5, [r3], #4
   ba7ec:	f842 5b04 	str.w	r5, [r2], #4
   ba7f0:	42a3      	cmp	r3, r4
   ba7f2:	d1f9      	bne.n	ba7e8 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   ba7f4:	880b      	ldrh	r3, [r1, #0]
   ba7f6:	8183      	strh	r3, [r0, #12]
}
   ba7f8:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   ba7fa:	2301      	movs	r3, #1
   ba7fc:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   ba7fe:	f101 0210 	add.w	r2, r1, #16
   ba802:	4603      	mov	r3, r0
   ba804:	f851 4b04 	ldr.w	r4, [r1], #4
   ba808:	f843 4b04 	str.w	r4, [r3], #4
   ba80c:	4291      	cmp	r1, r2
   ba80e:	d1f9      	bne.n	ba804 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   ba810:	e7f2      	b.n	ba7f8 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   ba812:	bf00      	nop
   ba814:	000c244e 	.word	0x000c244e

000ba818 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   ba818:	b510      	push	{r4, lr}
    if (uuid128) {
   ba81a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   ba81c:	4604      	mov	r4, r0
    if (uuid128) {
   ba81e:	b1b1      	cbz	r1, ba84e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   ba820:	2a01      	cmp	r2, #1
   ba822:	f101 0210 	add.w	r2, r1, #16
   ba826:	d10a      	bne.n	ba83e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   ba828:	4601      	mov	r1, r0
   ba82a:	f853 0b04 	ldr.w	r0, [r3], #4
   ba82e:	f841 0b04 	str.w	r0, [r1], #4
   ba832:	4293      	cmp	r3, r2
   ba834:	d1f9      	bne.n	ba82a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   ba836:	2301      	movs	r3, #1
   ba838:	6123      	str	r3, [r4, #16]
}
   ba83a:	4620      	mov	r0, r4
   ba83c:	bd10      	pop	{r4, pc}
   ba83e:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   ba840:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   ba844:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   ba848:	429a      	cmp	r2, r3
   ba84a:	d1f9      	bne.n	ba840 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   ba84c:	e7f3      	b.n	ba836 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   ba84e:	2210      	movs	r2, #16
   ba850:	f004 fb59 	bl	bef06 <memset>
   ba854:	e7f1      	b.n	ba83a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000ba856 <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   ba856:	b538      	push	{r3, r4, r5, lr}
   ba858:	4604      	mov	r4, r0
   ba85a:	460d      	mov	r5, r1
        : BleUuid() {
   ba85c:	f7ff ffaa 	bl	ba7b4 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   ba860:	2300      	movs	r3, #0
   ba862:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   ba864:	81a5      	strh	r5, [r4, #12]
}
   ba866:	4620      	mov	r0, r4
   ba868:	bd38      	pop	{r3, r4, r5, pc}

000ba86a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   ba86a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   ba86c:	6902      	ldr	r2, [r0, #16]
   ba86e:	690b      	ldr	r3, [r1, #16]
   ba870:	429a      	cmp	r2, r3
   ba872:	d106      	bne.n	ba882 <_ZNK8particle7BleUuideqERKS0_+0x18>
   ba874:	2210      	movs	r2, #16
   ba876:	f004 fb0e 	bl	bee96 <memcmp>
   ba87a:	fab0 f080 	clz	r0, r0
   ba87e:	0940      	lsrs	r0, r0, #5
}
   ba880:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   ba882:	2000      	movs	r0, #0
   ba884:	e7fc      	b.n	ba880 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000ba888 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   ba888:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   ba88a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   ba88e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba890:	4b34      	ldr	r3, [pc, #208]	; (ba964 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   ba892:	460c      	mov	r4, r1
   ba894:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba896:	4602      	mov	r2, r0
   ba898:	f103 0110 	add.w	r1, r3, #16
   ba89c:	f853 0b04 	ldr.w	r0, [r3], #4
   ba8a0:	f842 0b04 	str.w	r0, [r2], #4
   ba8a4:	428b      	cmp	r3, r1
   ba8a6:	d1f9      	bne.n	ba89c <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   ba8a8:	b344      	cbz	r4, ba8fc <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   ba8aa:	2124      	movs	r1, #36	; 0x24
   ba8ac:	4620      	mov	r0, r4
   ba8ae:	f004 fc0d 	bl	bf0cc <strnlen>
   ba8b2:	2804      	cmp	r0, #4
   ba8b4:	f04f 0500 	mov.w	r5, #0
   ba8b8:	d123      	bne.n	ba902 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   ba8ba:	f8ad 5004 	strh.w	r5, [sp, #4]
   ba8be:	af01      	add	r7, sp, #4
   ba8c0:	1ca5      	adds	r5, r4, #2
   ba8c2:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   ba8c4:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   ba8c8:	f7ff ff18 	bl	ba6fc <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   ba8cc:	f1b0 0800 	subs.w	r8, r0, #0
   ba8d0:	db12      	blt.n	ba8f8 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   ba8d2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   ba8d6:	f7ff ff11 	bl	ba6fc <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   ba8da:	2800      	cmp	r0, #0
   ba8dc:	db0c      	blt.n	ba8f8 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   ba8de:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   ba8e0:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   ba8e4:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   ba8e6:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   ba8ea:	d1eb      	bne.n	ba8c4 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   ba8ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
   ba8f0:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   ba8f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   ba8f6:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   ba8f8:	2300      	movs	r3, #0
   ba8fa:	6133      	str	r3, [r6, #16]
}
   ba8fc:	b002      	add	sp, #8
   ba8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   ba902:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   ba906:	2124      	movs	r1, #36	; 0x24
   ba908:	4620      	mov	r0, r4
   ba90a:	f004 fbdf 	bl	bf0cc <strnlen>
   ba90e:	42a8      	cmp	r0, r5
   ba910:	d807      	bhi.n	ba922 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   ba912:	4642      	mov	r2, r8
   ba914:	2100      	movs	r1, #0
   ba916:	4630      	mov	r0, r6
}
   ba918:	b002      	add	sp, #8
   ba91a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   ba91e:	f004 baf2 	b.w	bef06 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   ba922:	f1b8 0f00 	cmp.w	r8, #0
   ba926:	d0e9      	beq.n	ba8fc <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   ba928:	5d60      	ldrb	r0, [r4, r5]
   ba92a:	f7ff fee7 	bl	ba6fc <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   ba92e:	0603      	lsls	r3, r0, #24
   ba930:	d415      	bmi.n	ba95e <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   ba932:	0100      	lsls	r0, r0, #4
   ba934:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   ba938:	b2c7      	uxtb	r7, r0
   ba93a:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   ba93e:	2124      	movs	r1, #36	; 0x24
   ba940:	4620      	mov	r0, r4
   ba942:	f004 fbc3 	bl	bf0cc <strnlen>
   ba946:	3501      	adds	r5, #1
   ba948:	42a8      	cmp	r0, r5
   ba94a:	d908      	bls.n	ba95e <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   ba94c:	5d60      	ldrb	r0, [r4, r5]
   ba94e:	f7ff fed5 	bl	ba6fc <_ZN8particle11hexToNibbleEc>
   ba952:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   ba954:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   ba956:	bfa4      	itt	ge
   ba958:	4338      	orrge	r0, r7
   ba95a:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   ba95e:	3501      	adds	r5, #1
   ba960:	e7d1      	b.n	ba906 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   ba962:	bf00      	nop
   ba964:	000c244e 	.word	0x000c244e

000ba968 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   ba968:	b513      	push	{r0, r1, r4, lr}
   ba96a:	4604      	mov	r4, r0
   ba96c:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   ba96e:	f7ff ff21 	bl	ba7b4 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   ba972:	4620      	mov	r0, r4
   ba974:	9901      	ldr	r1, [sp, #4]
   ba976:	f7ff ff87 	bl	ba888 <_ZN8particle7BleUuid9constructEPKc>
}
   ba97a:	4620      	mov	r0, r4
   ba97c:	b002      	add	sp, #8
   ba97e:	bd10      	pop	{r4, pc}

000ba980 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   ba980:	b510      	push	{r4, lr}
   ba982:	f100 030f 	add.w	r3, r0, #15
   ba986:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   ba988:	781c      	ldrb	r4, [r3, #0]
   ba98a:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   ba98e:	4283      	cmp	r3, r0
   ba990:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   ba994:	d1f8      	bne.n	ba988 <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   ba996:	bd10      	pop	{r4, pc}

000ba998 <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   ba998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba99c:	461f      	mov	r7, r3
   ba99e:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   ba9a0:	460d      	mov	r5, r1
   ba9a2:	2900      	cmp	r1, #0
   ba9a4:	d05b      	beq.n	baa5e <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   ba9a6:	b1da      	cbz	r2, ba9e0 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   ba9a8:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   ba9ac:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   ba9ae:	f1b8 0f00 	cmp.w	r8, #0
   ba9b2:	d119      	bne.n	ba9e8 <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   ba9b4:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   ba9b6:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   ba9ba:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   ba9bc:	aa05      	add	r2, sp, #20
   ba9be:	2102      	movs	r1, #2
   ba9c0:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   ba9c2:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   ba9c6:	f7ff fe61 	bl	ba68c <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   ba9ca:	2c04      	cmp	r4, #4
   ba9cc:	bf28      	it	cs
   ba9ce:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   ba9d0:	4622      	mov	r2, r4
   ba9d2:	a905      	add	r1, sp, #20
   ba9d4:	4628      	mov	r0, r5
   ba9d6:	f004 fa6e 	bl	beeb6 <memcpy>
        buf[len++] = '\0';
   ba9da:	f805 8004 	strb.w	r8, [r5, r4]
   ba9de:	1c62      	adds	r2, r4, #1
}
   ba9e0:	4610      	mov	r0, r2
   ba9e2:	b00e      	add	sp, #56	; 0x38
   ba9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   ba9e8:	a901      	add	r1, sp, #4
   ba9ea:	f7ff ffc9 	bl	ba980 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   ba9ee:	aa05      	add	r2, sp, #20
    if (stripped) {
   ba9f0:	b17f      	cbz	r7, baa12 <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   ba9f2:	2110      	movs	r1, #16
   ba9f4:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   ba9f6:	f7ff fe49 	bl	ba68c <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   ba9fa:	2c24      	cmp	r4, #36	; 0x24
   ba9fc:	bf28      	it	cs
   ba9fe:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   baa00:	4622      	mov	r2, r4
   baa02:	a905      	add	r1, sp, #20
   baa04:	4628      	mov	r0, r5
   baa06:	f004 fa56 	bl	beeb6 <memcpy>
    buf[len++] = '\0';
   baa0a:	2300      	movs	r3, #0
   baa0c:	552b      	strb	r3, [r5, r4]
   baa0e:	1c62      	adds	r2, r4, #1
    return len;
   baa10:	e7e6      	b.n	ba9e0 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   baa12:	2104      	movs	r1, #4
   baa14:	eb0d 0001 	add.w	r0, sp, r1
   baa18:	f7ff fe38 	bl	ba68c <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   baa1c:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   baa1e:	f10d 021d 	add.w	r2, sp, #29
   baa22:	2102      	movs	r1, #2
   baa24:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   baa26:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   baa2a:	f7ff fe2f 	bl	ba68c <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   baa2e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   baa32:	2102      	movs	r1, #2
   baa34:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   baa38:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   baa3c:	f7ff fe26 	bl	ba68c <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   baa40:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   baa44:	2102      	movs	r1, #2
   baa46:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   baa48:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   baa4c:	f7ff fe1e 	bl	ba68c <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   baa50:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   baa54:	aa0b      	add	r2, sp, #44	; 0x2c
   baa56:	2106      	movs	r1, #6
   baa58:	f10d 000e 	add.w	r0, sp, #14
   baa5c:	e7cb      	b.n	ba9f6 <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   baa5e:	460a      	mov	r2, r1
   baa60:	e7be      	b.n	ba9e0 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000baa62 <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   baa62:	b510      	push	{r4, lr}
   baa64:	b08a      	sub	sp, #40	; 0x28
   baa66:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   baa68:	2300      	movs	r3, #0
   baa6a:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   baa6c:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   baa6e:	4669      	mov	r1, sp
   baa70:	f7ff ff92 	bl	ba998 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   baa74:	4669      	mov	r1, sp
   baa76:	4620      	mov	r0, r4
   baa78:	f002 ff19 	bl	bd8ae <_ZN6StringC1EPK19__FlashStringHelper>
}
   baa7c:	4620      	mov	r0, r4
   baa7e:	b00a      	add	sp, #40	; 0x28
   baa80:	bd10      	pop	{r4, pc}

000baa82 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   baa82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   baa84:	4605      	mov	r5, r0
   baa86:	4616      	mov	r6, r2
   baa88:	461f      	mov	r7, r3
   baa8a:	460a      	mov	r2, r1
   baa8c:	ab01      	add	r3, sp, #4
   baa8e:	e9d0 0100 	ldrd	r0, r1, [r0]
   baa92:	f7ff fd7b 	bl	ba58c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   baa96:	f030 0402 	bics.w	r4, r0, #2
   baa9a:	d00c      	beq.n	baab6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   baa9c:	1e84      	subs	r4, r0, #2
   baa9e:	42bc      	cmp	r4, r7
   baaa0:	bf28      	it	cs
   baaa2:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   baaa4:	b13e      	cbz	r6, baab6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   baaa6:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   baaa8:	682b      	ldr	r3, [r5, #0]
   baaaa:	3102      	adds	r1, #2
   baaac:	4622      	mov	r2, r4
   baaae:	4419      	add	r1, r3
   baab0:	4630      	mov	r0, r6
   baab2:	f004 fa00 	bl	beeb6 <memcpy>
}
   baab6:	4620      	mov	r0, r4
   baab8:	b003      	add	sp, #12
   baaba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000baabc <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   baabc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   baabe:	4613      	mov	r3, r2
   baac0:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   baac2:	9201      	str	r2, [sp, #4]
   baac4:	460a      	mov	r2, r1
   baac6:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   baac8:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   baaca:	f7ff ffda 	bl	baa82 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   baace:	b940      	cbnz	r0, baae2 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   baad0:	9b01      	ldr	r3, [sp, #4]
   baad2:	4622      	mov	r2, r4
   baad4:	2109      	movs	r1, #9
   baad6:	4628      	mov	r0, r5
}
   baad8:	b003      	add	sp, #12
   baada:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   baade:	f7ff bfd0 	b.w	baa82 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   baae2:	b003      	add	sp, #12
   baae4:	bd30      	pop	{r4, r5, pc}
	...

000baae8 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   baae8:	b5f0      	push	{r4, r5, r6, r7, lr}
   baaea:	460c      	mov	r4, r1
   baaec:	b089      	sub	sp, #36	; 0x24
    String name;
   baaee:	490c      	ldr	r1, [pc, #48]	; (bab20 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   baaf0:	4605      	mov	r5, r0
    String name;
   baaf2:	f002 fedc 	bl	bd8ae <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   baaf6:	221f      	movs	r2, #31
   baaf8:	4669      	mov	r1, sp
   baafa:	4620      	mov	r0, r4
   baafc:	f7ff ffde 	bl	baabc <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   bab00:	4606      	mov	r6, r0
   bab02:	b150      	cbz	r0, bab1a <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   bab04:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   bab06:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   bab08:	f814 1b01 	ldrb.w	r1, [r4], #1
   bab0c:	4628      	mov	r0, r5
   bab0e:	f002 ff4d 	bl	bd9ac <_ZN6String6concatEc>
   bab12:	b110      	cbz	r0, bab1a <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   bab14:	3701      	adds	r7, #1
   bab16:	42be      	cmp	r6, r7
   bab18:	d1f6      	bne.n	bab08 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   bab1a:	4628      	mov	r0, r5
   bab1c:	b009      	add	sp, #36	; 0x24
   bab1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bab20:	000c1606 	.word	0x000c1606

000bab24 <_ZNK8particle18BleAdvertisingData10customDataEPhj>:
size_t BleAdvertisingData::customData(uint8_t* buf, size_t len) const {
   bab24:	4613      	mov	r3, r2
    return get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len);
   bab26:	460a      	mov	r2, r1
   bab28:	21ff      	movs	r1, #255	; 0xff
   bab2a:	f7ff bfaa 	b.w	baa82 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>

000bab2e <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   bab2e:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   bab30:	2302      	movs	r3, #2
   bab32:	aa01      	add	r2, sp, #4
   bab34:	2119      	movs	r1, #25
   bab36:	f7ff ffa4 	bl	baa82 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   bab3a:	b108      	cbz	r0, bab40 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   bab3c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   bab40:	b003      	add	sp, #12
   bab42:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bab48 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   bab48:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   bab4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bab4e:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   bab50:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   bab52:	8043      	strh	r3, [r0, #2]
   bab54:	220e      	movs	r2, #14
   bab56:	4629      	mov	r1, r5
   bab58:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   bab5a:	7105      	strb	r5, [r0, #4]
   bab5c:	3006      	adds	r0, #6
   bab5e:	f004 f9d2 	bl	bef06 <memset>
   bab62:	f104 0014 	add.w	r0, r4, #20
   bab66:	f7ff fe25 	bl	ba7b4 <_ZN8particle7BleUuidC1Ev>
   bab6a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bab6e:	f7ff fe21 	bl	ba7b4 <_ZN8particle7BleUuidC1Ev>
   bab72:	4904      	ldr	r1, [pc, #16]	; (bab84 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   bab74:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   bab78:	f002 fe99 	bl	bd8ae <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   bab7c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   bab7e:	4620      	mov	r0, r4
   bab80:	bd38      	pop	{r3, r4, r5, pc}
   bab82:	bf00      	nop
   bab84:	000c1606 	.word	0x000c1606

000bab88 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   bab88:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bab8a:	680d      	ldr	r5, [r1, #0]
   bab8c:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   bab8e:	4601      	mov	r1, r0
   bab90:	f105 0028 	add.w	r0, r5, #40	; 0x28
   bab94:	f7ff fe69 	bl	ba86a <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   bab98:	b140      	cbz	r0, babac <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   bab9a:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   bab9c:	8aa2      	ldrh	r2, [r4, #20]
   bab9e:	429a      	cmp	r2, r3
   baba0:	d805      	bhi.n	babae <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   baba2:	8ae0      	ldrh	r0, [r4, #22]
   baba4:	4298      	cmp	r0, r3
   baba6:	bf34      	ite	cc
   baba8:	2000      	movcc	r0, #0
   babaa:	2001      	movcs	r0, #1
    }
   babac:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   babae:	2000      	movs	r0, #0
   babb0:	e7fc      	b.n	babac <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000babb2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   babb2:	b510      	push	{r4, lr}
    return data_ + size_;
   babb4:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   babb8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   babbc:	4293      	cmp	r3, r2
   babbe:	4618      	mov	r0, r3
   babc0:	d006      	beq.n	babd0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   babc2:	6804      	ldr	r4, [r0, #0]
   babc4:	8824      	ldrh	r4, [r4, #0]
   babc6:	428c      	cmp	r4, r1
   babc8:	f103 0308 	add.w	r3, r3, #8
   babcc:	d1f6      	bne.n	babbc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   babce:	bd10      	pop	{r4, pc}
        return nullptr;
   babd0:	2000      	movs	r0, #0
   babd2:	e7fc      	b.n	babce <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000babd4 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   babd4:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   babd6:	b570      	push	{r4, r5, r6, lr}
   babd8:	6003      	str	r3, [r0, #0]
   babda:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   babdc:	2068      	movs	r0, #104	; 0x68
   babde:	f7f9 fa5a 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   babe2:	1e04      	subs	r4, r0, #0
   babe4:	f104 060c 	add.w	r6, r4, #12
   babe8:	d007      	beq.n	babfa <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   babea:	2301      	movs	r3, #1
   babec:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   babf0:	4b04      	ldr	r3, [pc, #16]	; (bac04 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   babf2:	6023      	str	r3, [r4, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   babf4:	4630      	mov	r0, r6
   babf6:	f7ff ffa7 	bl	bab48 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   babfa:	e9c5 6400 	strd	r6, r4, [r5]
}
   babfe:	4628      	mov	r0, r5
   bac00:	bd70      	pop	{r4, r5, r6, pc}
   bac02:	bf00      	nop
   bac04:	000c23f4 	.word	0x000c23f4

000bac08 <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   bac08:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   bac0a:	680c      	ldr	r4, [r1, #0]
   bac0c:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   bac0e:	4606      	mov	r6, r0
    return impl()->charUUID();
   bac10:	4605      	mov	r5, r0
   bac12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bac14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bac16:	6823      	ldr	r3, [r4, #0]
   bac18:	602b      	str	r3, [r5, #0]
}
   bac1a:	4630      	mov	r0, r6
   bac1c:	bd70      	pop	{r4, r5, r6, pc}
	...

000bac20 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   bac20:	b5f0      	push	{r4, r5, r6, r7, lr}
   bac22:	4606      	mov	r6, r0
   bac24:	b085      	sub	sp, #20
   bac26:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   bac28:	460d      	mov	r5, r1
   bac2a:	2900      	cmp	r1, #0
   bac2c:	d050      	beq.n	bacd0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   bac2e:	2a00      	cmp	r2, #0
   bac30:	d04e      	beq.n	bacd0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
   bac32:	6804      	ldr	r4, [r0, #0]
    if (impl()->isLocal()) {
   bac34:	7823      	ldrb	r3, [r4, #0]
   bac36:	2af4      	cmp	r2, #244	; 0xf4
   bac38:	bf28      	it	cs
   bac3a:	22f4      	movcs	r2, #244	; 0xf4
   bac3c:	b343      	cbz	r3, bac90 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   bac3e:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   bac40:	0798      	lsls	r0, r3, #30
   bac42:	d509      	bpl.n	bac58 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   bac44:	89a0      	ldrh	r0, [r4, #12]
   bac46:	9203      	str	r2, [sp, #12]
   bac48:	2300      	movs	r3, #0
   bac4a:	f7ff f86b 	bl	b9d24 <hal_ble_gatt_server_set_characteristic_value>
   bac4e:	2800      	cmp	r0, #0
   bac50:	9a03      	ldr	r2, [sp, #12]
   bac52:	da03      	bge.n	bac5c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   bac54:	b005      	add	sp, #20
   bac56:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   bac58:	f06f 0077 	mvn.w	r0, #119	; 0x77
   bac5c:	6834      	ldr	r4, [r6, #0]
   bac5e:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   bac60:	06d9      	lsls	r1, r3, #27
   bac62:	d509      	bpl.n	bac78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   bac64:	2f01      	cmp	r7, #1
   bac66:	d007      	beq.n	bac78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bac68:	89a0      	ldrh	r0, [r4, #12]
   bac6a:	2300      	movs	r3, #0
   bac6c:	4629      	mov	r1, r5
}
   bac6e:	b005      	add	sp, #20
   bac70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bac74:	f7ff b8b0 	b.w	b9dd8 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   bac78:	069b      	lsls	r3, r3, #26
   bac7a:	d5eb      	bpl.n	bac54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   bac7c:	2f02      	cmp	r7, #2
   bac7e:	d0e9      	beq.n	bac54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bac80:	89a0      	ldrh	r0, [r4, #12]
   bac82:	2300      	movs	r3, #0
   bac84:	4629      	mov	r1, r5
}
   bac86:	b005      	add	sp, #20
   bac88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bac8c:	f7ff b8ae 	b.w	b9dec <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   bac90:	8860      	ldrh	r0, [r4, #2]
   bac92:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bac96:	4288      	cmp	r0, r1
   bac98:	d01c      	beq.n	bacd4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   bac9a:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   bac9c:	074e      	lsls	r6, r1, #29
   bac9e:	d501      	bpl.n	baca4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   baca0:	2f01      	cmp	r7, #1
   baca2:	d104      	bne.n	bacae <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   baca4:	070b      	lsls	r3, r1, #28
   baca6:	d409      	bmi.n	bacbc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   baca8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   bacac:	e7d2      	b.n	bac54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   bacae:	89a1      	ldrh	r1, [r4, #12]
   bacb0:	9300      	str	r3, [sp, #0]
   bacb2:	4613      	mov	r3, r2
   bacb4:	462a      	mov	r2, r5
   bacb6:	f7ff f85d 	bl	b9d74 <hal_ble_gatt_client_write_without_response>
   bacba:	e7cb      	b.n	bac54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   bacbc:	2f02      	cmp	r7, #2
   bacbe:	d0f3      	beq.n	baca8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   bacc0:	2300      	movs	r3, #0
   bacc2:	89a1      	ldrh	r1, [r4, #12]
   bacc4:	9300      	str	r3, [sp, #0]
   bacc6:	4613      	mov	r3, r2
   bacc8:	462a      	mov	r2, r5
   bacca:	f7ff f849 	bl	b9d60 <hal_ble_gatt_client_write_with_response>
   bacce:	e7c1      	b.n	bac54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   bacd0:	4802      	ldr	r0, [pc, #8]	; (bacdc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   bacd2:	e7bf      	b.n	bac54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   bacd4:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   bacd8:	e7bc      	b.n	bac54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   bacda:	bf00      	nop
   bacdc:	fffffef2 	.word	0xfffffef2

000bace0 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   bace0:	b510      	push	{r4, lr}
   bace2:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   bace4:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   bace6:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   bace8:	bb52      	cbnz	r2, bad40 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   bacea:	885c      	ldrh	r4, [r3, #2]
   bacec:	f64f 70ff 	movw	r0, #65535	; 0xffff
   bacf0:	4284      	cmp	r4, r0
   bacf2:	d025      	beq.n	bad40 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   bacf4:	8a18      	ldrh	r0, [r3, #16]
   bacf6:	b330      	cbz	r0, bad46 <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   bacf8:	e9cd 2203 	strd	r2, r2, [sp, #12]
   bacfc:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   bacfe:	4a13      	ldr	r2, [pc, #76]	; (bad4c <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   bad00:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   bad02:	4a13      	ldr	r2, [pc, #76]	; (bad50 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   bad04:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   bad08:	885a      	ldrh	r2, [r3, #2]
   bad0a:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   bad0e:	8a1a      	ldrh	r2, [r3, #16]
   bad10:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   bad14:	899a      	ldrh	r2, [r3, #12]
   bad16:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   bad1a:	b159      	cbz	r1, bad34 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   bad1c:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   bad1e:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   bad20:	bf44      	itt	mi
   bad22:	2202      	movmi	r2, #2
   bad24:	9205      	strmi	r2, [sp, #20]
   bad26:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   bad28:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   bad2a:	bf42      	ittt	mi
   bad2c:	9b05      	ldrmi	r3, [sp, #20]
   bad2e:	f043 0301 	orrmi.w	r3, r3, #1
   bad32:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   bad34:	2100      	movs	r1, #0
   bad36:	4668      	mov	r0, sp
   bad38:	f7ff f844 	bl	b9dc4 <hal_ble_gatt_client_configure_cccd>
}
   bad3c:	b006      	add	sp, #24
   bad3e:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   bad40:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   bad44:	e7fa      	b.n	bad3c <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   bad46:	f06f 0077 	mvn.w	r0, #119	; 0x77
   bad4a:	e7f7      	b.n	bad3c <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   bad4c:	00180003 	.word	0x00180003
   bad50:	000baf25 	.word	0x000baf25

000bad54 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   bad54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bad56:	2600      	movs	r6, #0
   bad58:	6006      	str	r6, [r0, #0]
   bad5a:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bad5c:	2028      	movs	r0, #40	; 0x28
   bad5e:	f7f9 f99a 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bad62:	1e04      	subs	r4, r0, #0
   bad64:	f104 070c 	add.w	r7, r4, #12
   bad68:	d00a      	beq.n	bad80 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   bad6a:	2301      	movs	r3, #1
   bad6c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   bad70:	4b05      	ldr	r3, [pc, #20]	; (bad88 <_ZN8particle10BleServiceC1Ev+0x34>)
   bad72:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   bad74:	4638      	mov	r0, r7
   bad76:	f7ff fd1d 	bl	ba7b4 <_ZN8particle7BleUuidC1Ev>
   bad7a:	6226      	str	r6, [r4, #32]
   bad7c:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   bad80:	e9c5 7400 	strd	r7, r4, [r5]
}
   bad84:	4628      	mov	r0, r5
   bad86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bad88:	000c2410 	.word	0x000c2410

000bad8c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   bad8c:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bad8e:	2500      	movs	r5, #0
   bad90:	6005      	str	r5, [r0, #0]
   bad92:	4606      	mov	r6, r0
   bad94:	2030      	movs	r0, #48	; 0x30
   bad96:	f7f9 f97e 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bad9a:	4604      	mov	r4, r0
   bad9c:	b188      	cbz	r0, badc2 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   bad9e:	2301      	movs	r3, #1
   bada0:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   bada4:	4b09      	ldr	r3, [pc, #36]	; (badcc <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   bada6:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   bada8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   badac:	8183      	strh	r3, [r0, #12]
   badae:	300e      	adds	r0, #14
   badb0:	f7ff fcf5 	bl	ba79e <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   badb4:	e9c4 5506 	strd	r5, r5, [r4, #24]
   badb8:	e9c4 5508 	strd	r5, r5, [r4, #32]
   badbc:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   badc0:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   badc2:	6074      	str	r4, [r6, #4]
   badc4:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   badc6:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   badc8:	4630      	mov	r0, r6
   badca:	bd70      	pop	{r4, r5, r6, pc}
   badcc:	000c242c 	.word	0x000c242c

000badd0 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   badd0:	b513      	push	{r0, r1, r4, lr}
   badd2:	4604      	mov	r4, r0
    WiringBleLock lk;
   badd4:	a801      	add	r0, sp, #4
   badd6:	f7ff fca7 	bl	ba728 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   badda:	6823      	ldr	r3, [r4, #0]
   baddc:	881c      	ldrh	r4, [r3, #0]
   badde:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bade2:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   bade4:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   bade6:	bf18      	it	ne
   bade8:	2401      	movne	r4, #1
    WiringBleLock lk;
   badea:	f7ff fcab 	bl	ba744 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   badee:	4620      	mov	r0, r4
   badf0:	b002      	add	sp, #8
   badf2:	bd10      	pop	{r4, pc}

000badf4 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   badf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   badf6:	4605      	mov	r5, r0
   badf8:	460c      	mov	r4, r1
    WiringBleLock lk;
   badfa:	a801      	add	r0, sp, #4
   badfc:	f7ff fc94 	bl	ba728 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bae00:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   bae02:	6823      	ldr	r3, [r4, #0]
   bae04:	f8c2 3002 	str.w	r3, [r2, #2]
   bae08:	6863      	ldr	r3, [r4, #4]
   bae0a:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   bae0e:	a801      	add	r0, sp, #4
   bae10:	f7ff fc98 	bl	ba744 <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   bae14:	b003      	add	sp, #12
   bae16:	bd30      	pop	{r4, r5, pc}

000bae18 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   bae18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bae1a:	460d      	mov	r5, r1
   bae1c:	4604      	mov	r4, r0
    WiringBleLock lk;
   bae1e:	a801      	add	r0, sp, #4
   bae20:	f7ff fc82 	bl	ba728 <_ZN8particle3ble13WiringBleLockC1Ev>
   bae24:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   bae26:	f8d2 3002 	ldr.w	r3, [r2, #2]
   bae2a:	6023      	str	r3, [r4, #0]
   bae2c:	f8d2 3006 	ldr.w	r3, [r2, #6]
   bae30:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   bae32:	a801      	add	r0, sp, #4
   bae34:	f7ff fc86 	bl	ba744 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   bae38:	4620      	mov	r0, r4
   bae3a:	b003      	add	sp, #12
   bae3c:	bd30      	pop	{r4, r5, pc}

000bae3e <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   bae3e:	b530      	push	{r4, r5, lr}
   bae40:	4605      	mov	r5, r0
   bae42:	b087      	sub	sp, #28
   bae44:	460c      	mov	r4, r1
    WiringBleLock lk;
   bae46:	a801      	add	r0, sp, #4
   bae48:	f7ff fc6e 	bl	ba728 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   bae4c:	682a      	ldr	r2, [r5, #0]
   bae4e:	6823      	ldr	r3, [r4, #0]
   bae50:	8812      	ldrh	r2, [r2, #0]
   bae52:	881b      	ldrh	r3, [r3, #0]
   bae54:	429a      	cmp	r2, r3
   bae56:	d10d      	bne.n	bae74 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   bae58:	4629      	mov	r1, r5
   bae5a:	a802      	add	r0, sp, #8
   bae5c:	f7ff ffdc 	bl	bae18 <_ZNK8particle13BlePeerDevice7addressEv>
   bae60:	4621      	mov	r1, r4
   bae62:	a804      	add	r0, sp, #16
   bae64:	f7ff ffd8 	bl	bae18 <_ZNK8particle13BlePeerDevice7addressEv>
   bae68:	a904      	add	r1, sp, #16
   bae6a:	a802      	add	r0, sp, #8
   bae6c:	f7ff fc83 	bl	ba776 <_ZNK8particle10BleAddresseqERKS0_>
   bae70:	4604      	mov	r4, r0
   bae72:	b900      	cbnz	r0, bae76 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   bae74:	2400      	movs	r4, #0
    WiringBleLock lk;
   bae76:	a801      	add	r0, sp, #4
   bae78:	f7ff fc64 	bl	ba744 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bae7c:	4620      	mov	r0, r4
   bae7e:	b007      	add	sp, #28
   bae80:	bd30      	pop	{r4, r5, pc}
	...

000bae84 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   bae84:	b510      	push	{r4, lr}
   bae86:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   bae88:	2064      	movs	r0, #100	; 0x64
   bae8a:	f7f9 f904 	bl	b4096 <_Znwj>
   bae8e:	b168      	cbz	r0, baeac <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   bae90:	2300      	movs	r3, #0
   bae92:	e9c0 3300 	strd	r3, r3, [r0]
   bae96:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bae9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bae9e:	e9c0 3306 	strd	r3, r3, [r0, #24]
   baea2:	6203      	str	r3, [r0, #32]
   baea4:	62c3      	str	r3, [r0, #44]	; 0x2c
   baea6:	63c3      	str	r3, [r0, #60]	; 0x3c
   baea8:	64c3      	str	r3, [r0, #76]	; 0x4c
   baeaa:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   baeac:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   baeae:	b920      	cbnz	r0, baeba <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   baeb0:	4a0a      	ldr	r2, [pc, #40]	; (baedc <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   baeb2:	490b      	ldr	r1, [pc, #44]	; (baee0 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   baeb4:	200a      	movs	r0, #10
   baeb6:	f7ff f9a3 	bl	ba200 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   baeba:	2000      	movs	r0, #0
   baebc:	f7fe fef6 	bl	b9cac <hal_ble_stack_init>
   baec0:	b120      	cbz	r0, baecc <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   baec2:	4a06      	ldr	r2, [pc, #24]	; (baedc <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   baec4:	4907      	ldr	r1, [pc, #28]	; (baee4 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   baec6:	200a      	movs	r0, #10
   baec8:	f7ff f99a 	bl	ba200 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   baecc:	6821      	ldr	r1, [r4, #0]
   baece:	4806      	ldr	r0, [pc, #24]	; (baee8 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   baed0:	2200      	movs	r2, #0
   baed2:	f7fe ff6d 	bl	b9db0 <hal_ble_set_callback_on_periph_link_events>
}
   baed6:	4620      	mov	r0, r4
   baed8:	bd10      	pop	{r4, pc}
   baeda:	bf00      	nop
   baedc:	000b9eb1 	.word	0x000b9eb1
   baee0:	000c21d0 	.word	0x000c21d0
   baee4:	000c220e 	.word	0x000c220e
   baee8:	000bb931 	.word	0x000bb931

000baeec <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   baeec:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   baeee:	4c0a      	ldr	r4, [pc, #40]	; (baf18 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   baef0:	7823      	ldrb	r3, [r4, #0]
   baef2:	f3bf 8f5b 	dmb	ish
   baef6:	07db      	lsls	r3, r3, #31
   baef8:	d40c      	bmi.n	baf14 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   baefa:	4620      	mov	r0, r4
   baefc:	f7f9 f8de 	bl	b40bc <__cxa_guard_acquire>
   baf00:	b140      	cbz	r0, baf14 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   baf02:	4806      	ldr	r0, [pc, #24]	; (baf1c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   baf04:	f7ff ffbe 	bl	bae84 <_ZN8particle14BleLocalDeviceC1Ev>
   baf08:	4620      	mov	r0, r4
   baf0a:	f7f9 f8dc 	bl	b40c6 <__cxa_guard_release>
   baf0e:	4804      	ldr	r0, [pc, #16]	; (baf20 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   baf10:	f003 ffb4 	bl	bee7c <atexit>
    return instance;
}
   baf14:	4801      	ldr	r0, [pc, #4]	; (baf1c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   baf16:	bd10      	pop	{r4, pc}
   baf18:	2003e658 	.word	0x2003e658
   baf1c:	2003e660 	.word	0x2003e660
   baf20:	000bb235 	.word	0x000bb235

000baf24 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   baf24:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   baf26:	6803      	ldr	r3, [r0, #0]
   baf28:	3b09      	subs	r3, #9
   baf2a:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   baf2c:	b08d      	sub	sp, #52	; 0x34
   baf2e:	4604      	mov	r4, r0
   baf30:	460d      	mov	r5, r1
    switch (event->type) {
   baf32:	d811      	bhi.n	baf58 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   baf34:	f7ff ffda 	bl	baeec <_ZN8particle14BleLocalDevice11getInstanceEv>
   baf38:	88a1      	ldrh	r1, [r4, #4]
   baf3a:	6800      	ldr	r0, [r0, #0]
   baf3c:	f7ff fe39 	bl	babb2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   baf40:	4603      	mov	r3, r0
   baf42:	b958      	cbnz	r0, baf5c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   baf44:	2220      	movs	r2, #32
   baf46:	e9cd 2004 	strd	r2, r0, [sp, #16]
   baf4a:	4a0b      	ldr	r2, [pc, #44]	; (baf78 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   baf4c:	9200      	str	r2, [sp, #0]
   baf4e:	490b      	ldr	r1, [pc, #44]	; (baf7c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   baf50:	aa04      	add	r2, sp, #16
   baf52:	2032      	movs	r0, #50	; 0x32
   baf54:	f7ff f95c 	bl	ba210 <log_message>
}
   baf58:	b00d      	add	sp, #52	; 0x34
   baf5a:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   baf5c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   baf5e:	2a00      	cmp	r2, #0
   baf60:	d0fa      	beq.n	baf58 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   baf62:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   baf66:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   baf6a:	e9cd 1203 	strd	r1, r2, [sp, #12]
   baf6e:	6dac      	ldr	r4, [r5, #88]	; 0x58
   baf70:	aa04      	add	r2, sp, #16
   baf72:	a903      	add	r1, sp, #12
   baf74:	47a0      	blx	r4
}
   baf76:	e7ef      	b.n	baf58 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   baf78:	000c2250 	.word	0x000c2250
   baf7c:	000c21e7 	.word	0x000c21e7

000baf80 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   baf80:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   baf82:	2000      	movs	r0, #0
   baf84:	f7fe fe92 	bl	b9cac <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   baf88:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   baf8c:	bd08      	pop	{r3, pc}

000baf8e <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   baf8e:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   baf90:	2100      	movs	r1, #0
   baf92:	f7fe be93 	b.w	b9cbc <hal_ble_gap_set_tx_power>
	...

000baf98 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   baf98:	b570      	push	{r4, r5, r6, lr}
   baf9a:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   baf9c:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   baf9e:	460e      	mov	r6, r1
   bafa0:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   bafa2:	f7ff fb3f 	bl	ba624 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   bafa6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bafaa:	f7ff fb46 	bl	ba63a <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   bafae:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   bafb2:	2200      	movs	r2, #0
   bafb4:	4621      	mov	r1, r4
   bafb6:	4803      	ldr	r0, [pc, #12]	; (bafc4 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   bafb8:	f7fe fe98 	bl	b9cec <hal_ble_gap_start_scan>
   bafbc:	2800      	cmp	r0, #0
        return foundCount_;
   bafbe:	bfa8      	it	ge
   bafc0:	6960      	ldrge	r0, [r4, #20]
    }
   bafc2:	bd70      	pop	{r4, r5, r6, pc}
   bafc4:	000bc8f5 	.word	0x000bc8f5

000bafc8 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   bafc8:	b510      	push	{r4, lr}
   bafca:	4604      	mov	r4, r0
    ::free(ptr);
   bafcc:	6940      	ldr	r0, [r0, #20]
   bafce:	f7ff fa13 	bl	ba3f8 <free>
   bafd2:	68a0      	ldr	r0, [r4, #8]
   bafd4:	f7ff fa10 	bl	ba3f8 <free>
   bafd8:	4620      	mov	r0, r4
   bafda:	bd10      	pop	{r4, pc}

000bafdc <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   bafdc:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   bafde:	f647 717f 	movw	r1, #32639	; 0x7f7f
   bafe2:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
   bafe6:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bafea:	e9c0 2204 	strd	r2, r2, [r0, #16]
   bafee:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   baff2:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   baff6:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   baffa:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   baffe:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   bb002:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   bb006:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   bb00a:	6202      	str	r2, [r0, #32]
   bb00c:	6302      	str	r2, [r0, #48]	; 0x30
   bb00e:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
   bb012:	4770      	bx	lr

000bb014 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>:
    std::function<void(const BleScanResult*)> scanResultCallback_;
    BleOnScanResultStdFunction scanResultCallbackRef_;
    BleScanFilter filter_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   bb014:	b530      	push	{r4, r5, lr}
   bb016:	b085      	sub	sp, #20
    hal_ble_scan_params_t scanParams = {};
   bb018:	2400      	movs	r4, #0
    scanParams.size = sizeof(hal_ble_scan_params_t);
   bb01a:	2310      	movs	r3, #16
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   bb01c:	460d      	mov	r5, r1
    scanParams.size = sizeof(hal_ble_scan_params_t);
   bb01e:	f8ad 3002 	strh.w	r3, [sp, #2]
    scanParams.version = BLE_API_VERSION;
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   bb022:	4621      	mov	r1, r4
    scanParams.version = BLE_API_VERSION;
   bb024:	2303      	movs	r3, #3
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   bb026:	4668      	mov	r0, sp
    scanParams.version = BLE_API_VERSION;
   bb028:	f8ad 3000 	strh.w	r3, [sp]
    hal_ble_scan_params_t scanParams = {};
   bb02c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   bb030:	9403      	str	r4, [sp, #12]
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   bb032:	f7fe fe53 	bl	b9cdc <hal_ble_gap_get_scan_parameters>
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   bb036:	4621      	mov	r1, r4
   bb038:	4668      	mov	r0, sp
    scanParams.timeout = timeout;
   bb03a:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   bb03e:	f7fe fe45 	bl	b9ccc <hal_ble_gap_set_scan_parameters>
}
   bb042:	b005      	add	sp, #20
   bb044:	bd30      	pop	{r4, r5, pc}

000bb046 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   bb046:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   bb048:	69d8      	ldr	r0, [r3, #28]
}
   bb04a:	2800      	cmp	r0, #0
   bb04c:	bfd4      	ite	le
   bb04e:	2000      	movle	r0, #0
   bb050:	2001      	movgt	r0, #1
   bb052:	4770      	bx	lr

000bb054 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bb054:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bb056:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bb05a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bb05c:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bb060:	42ae      	cmp	r6, r5
   bb062:	d004      	beq.n	bb06e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bb064:	4628      	mov	r0, r5
   bb066:	f002 fbd7 	bl	bd818 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bb06a:	3510      	adds	r5, #16
   bb06c:	e7f8      	b.n	bb060 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bb06e:	6820      	ldr	r0, [r4, #0]
   bb070:	f7ff f9c2 	bl	ba3f8 <free>
}
   bb074:	4620      	mov	r0, r4
   bb076:	bd70      	pop	{r4, r5, r6, pc}

000bb078 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bb078:	b510      	push	{r4, lr}
   bb07a:	4604      	mov	r4, r0
    ::free(ptr);
   bb07c:	6800      	ldr	r0, [r0, #0]
   bb07e:	f7ff f9bb 	bl	ba3f8 <free>
}
   bb082:	4620      	mov	r0, r4
   bb084:	bd10      	pop	{r4, pc}

000bb086 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   bb086:	b570      	push	{r4, r5, r6, lr}
   bb088:	4604      	mov	r4, r0
    ::free(ptr);
   bb08a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   bb08c:	f7ff f9b4 	bl	ba3f8 <free>
   bb090:	6d20      	ldr	r0, [r4, #80]	; 0x50
   bb092:	f7ff f9b1 	bl	ba3f8 <free>
    }
    ~BleScanFilter() = default;
   bb096:	f104 0538 	add.w	r5, r4, #56	; 0x38
   bb09a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bb09e:	f7ff ffeb 	bl	bb078 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   bb0a2:	4628      	mov	r0, r5
   bb0a4:	f7ff ffd6 	bl	bb054 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   bb0a8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bb0ac:	f7f9 fa2e 	bl	b450c <_ZNSt14_Function_baseD1Ev>
   bb0b0:	f104 0018 	add.w	r0, r4, #24
   bb0b4:	f7f9 fa2a 	bl	b450c <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   bb0b8:	e9d4 5300 	ldrd	r5, r3, [r4]
   bb0bc:	2624      	movs	r6, #36	; 0x24
   bb0be:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bb0c2:	42ae      	cmp	r6, r5
   bb0c4:	d004      	beq.n	bb0d0 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   bb0c6:	4628      	mov	r0, r5
   bb0c8:	f7ff ff7e 	bl	bafc8 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   bb0cc:	3524      	adds	r5, #36	; 0x24
   bb0ce:	e7f8      	b.n	bb0c2 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   bb0d0:	6820      	ldr	r0, [r4, #0]
   bb0d2:	f7ff f991 	bl	ba3f8 <free>
   bb0d6:	4620      	mov	r0, r4
   bb0d8:	bd70      	pop	{r4, r5, r6, pc}
	...

000bb0dc <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   bb0dc:	b530      	push	{r4, r5, lr}
   bb0de:	4615      	mov	r5, r2
   bb0e0:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   bb0e2:	460c      	mov	r4, r1
   bb0e4:	b179      	cbz	r1, bb106 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   bb0e6:	b172      	cbz	r2, bb106 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
    BleScanDelegator scanner;
   bb0e8:	a801      	add	r0, sp, #4
   bb0ea:	f7ff ff77 	bl	bafdc <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   bb0ee:	4621      	mov	r1, r4
   bb0f0:	462a      	mov	r2, r5
   bb0f2:	a801      	add	r0, sp, #4
   bb0f4:	f7ff ff50 	bl	baf98 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   bb0f8:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   bb0fa:	a801      	add	r0, sp, #4
   bb0fc:	f7ff ffc3 	bl	bb086 <_ZN8particle16BleScanDelegatorD1Ev>
}
   bb100:	4620      	mov	r0, r4
   bb102:	b01f      	add	sp, #124	; 0x7c
   bb104:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   bb106:	4c01      	ldr	r4, [pc, #4]	; (bb10c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   bb108:	e7fa      	b.n	bb100 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   bb10a:	bf00      	nop
   bb10c:	fffffef2 	.word	0xfffffef2

000bb110 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   bb110:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   bb112:	1e14      	subs	r4, r2, #0
   bb114:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   bb116:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   bb118:	db02      	blt.n	bb120 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   bb11a:	1862      	adds	r2, r4, r1
   bb11c:	429a      	cmp	r2, r3
   bb11e:	dd00      	ble.n	bb122 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   bb120:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   bb122:	682a      	ldr	r2, [r5, #0]
   bb124:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   bb126:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   bb128:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb12a:	1a52      	subs	r2, r2, r1
   bb12c:	f003 fed1 	bl	beed2 <memmove>
    size_ -= n;
   bb130:	686a      	ldr	r2, [r5, #4]
   bb132:	1b12      	subs	r2, r2, r4
   bb134:	606a      	str	r2, [r5, #4]
}
   bb136:	bd38      	pop	{r3, r4, r5, pc}

000bb138 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   bb138:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bb13a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   bb13c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   bb13e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bb140:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   bb142:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bb144:	f7f8 ffa7 	bl	b4096 <_Znwj>
   bb148:	b118      	cbz	r0, bb152 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   bb14a:	682b      	ldr	r3, [r5, #0]
   bb14c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bb14e:	686b      	ldr	r3, [r5, #4]
   bb150:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   bb152:	4b03      	ldr	r3, [pc, #12]	; (bb160 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   bb154:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   bb156:	4b03      	ldr	r3, [pc, #12]	; (bb164 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bb158:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   bb15a:	60a3      	str	r3, [r4, #8]
      }
   bb15c:	4620      	mov	r0, r4
   bb15e:	bd38      	pop	{r3, r4, r5, pc}
   bb160:	000ba5cd 	.word	0x000ba5cd
   bb164:	000ba5e5 	.word	0x000ba5e5

000bb168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   bb168:	680b      	ldr	r3, [r1, #0]
   bb16a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   bb16c:	b113      	cbz	r3, bb174 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   bb16e:	685a      	ldr	r2, [r3, #4]
   bb170:	3201      	adds	r2, #1
   bb172:	605a      	str	r2, [r3, #4]
      }
   bb174:	4770      	bx	lr

000bb176 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   bb176:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bb178:	f851 3b04 	ldr.w	r3, [r1], #4
   bb17c:	4604      	mov	r4, r0
   bb17e:	f840 3b04 	str.w	r3, [r0], #4
   bb182:	f7ff fff1 	bl	bb168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   bb186:	6823      	ldr	r3, [r4, #0]
   bb188:	b90b      	cbnz	r3, bb18e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   bb18a:	f7ff fa15 	bl	ba5b8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   bb18e:	4620      	mov	r0, r4
   bb190:	bd10      	pop	{r4, pc}

000bb192 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bb192:	b510      	push	{r4, lr}
   bb194:	f851 3b04 	ldr.w	r3, [r1], #4
   bb198:	4604      	mov	r4, r0
   bb19a:	f840 3b04 	str.w	r3, [r0], #4
   bb19e:	f7ff ffe3 	bl	bb168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bb1a2:	4620      	mov	r0, r4
   bb1a4:	bd10      	pop	{r4, pc}

000bb1a6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bb1a6:	b510      	push	{r4, lr}
   bb1a8:	f851 3b04 	ldr.w	r3, [r1], #4
   bb1ac:	4604      	mov	r4, r0
   bb1ae:	f840 3b04 	str.w	r3, [r0], #4
   bb1b2:	f7ff ffd9 	bl	bb168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bb1b6:	4620      	mov	r0, r4
   bb1b8:	bd10      	pop	{r4, pc}

000bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   bb1ba:	b510      	push	{r4, lr}
   bb1bc:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   bb1be:	6800      	ldr	r0, [r0, #0]
   bb1c0:	b108      	cbz	r0, bb1c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   bb1c2:	f7f9 f9e1 	bl	b4588 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   bb1c6:	4620      	mov	r0, r4
   bb1c8:	bd10      	pop	{r4, pc}

000bb1ca <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   bb1ca:	b510      	push	{r4, lr}
   bb1cc:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bb1ce:	3004      	adds	r0, #4
   bb1d0:	f7ff fff3 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb1d4:	4620      	mov	r0, r4
   bb1d6:	bd10      	pop	{r4, pc}

000bb1d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bb1d8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bb1da:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bb1de:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bb1e0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bb1e4:	42ae      	cmp	r6, r5
   bb1e6:	d004      	beq.n	bb1f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   bb1e8:	1d28      	adds	r0, r5, #4
   bb1ea:	f7ff ffe6 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb1ee:	3508      	adds	r5, #8
   bb1f0:	e7f8      	b.n	bb1e4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bb1f2:	6820      	ldr	r0, [r4, #0]
   bb1f4:	f7ff f900 	bl	ba3f8 <free>
}
   bb1f8:	4620      	mov	r0, r4
   bb1fa:	bd70      	pop	{r4, r5, r6, pc}

000bb1fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bb1fc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bb1fe:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bb202:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bb204:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bb208:	42ae      	cmp	r6, r5
   bb20a:	d004      	beq.n	bb216 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   bb20c:	1d28      	adds	r0, r5, #4
   bb20e:	f7ff ffd4 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb212:	3508      	adds	r5, #8
   bb214:	e7f8      	b.n	bb208 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bb216:	6820      	ldr	r0, [r4, #0]
   bb218:	f7ff f8ee 	bl	ba3f8 <free>
}
   bb21c:	4620      	mov	r0, r4
   bb21e:	bd70      	pop	{r4, r5, r6, pc}

000bb220 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bb220:	b510      	push	{r4, lr}
   bb222:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   bb224:	3024      	adds	r0, #36	; 0x24
   bb226:	f7ff ffe9 	bl	bb1fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bb22a:	f104 0018 	add.w	r0, r4, #24
   bb22e:	f7ff ffd3 	bl	bb1d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   bb232:	bd10      	pop	{r4, pc}

000bb234 <__tcf_0>:
    static BleLocalDevice instance;
   bb234:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   bb236:	4b17      	ldr	r3, [pc, #92]	; (bb294 <__tcf_0+0x60>)
   bb238:	681c      	ldr	r4, [r3, #0]
   bb23a:	b354      	cbz	r4, bb292 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   bb23c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bb240:	f7f9 f964 	bl	b450c <_ZNSt14_Function_baseD1Ev>
   bb244:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bb248:	f7f9 f960 	bl	b450c <_ZNSt14_Function_baseD1Ev>
   bb24c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bb250:	f7f9 f95c 	bl	b450c <_ZNSt14_Function_baseD1Ev>
   bb254:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bb258:	f7f9 f958 	bl	b450c <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   bb25c:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   bb260:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bb264:	42ae      	cmp	r6, r5
   bb266:	d004      	beq.n	bb272 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   bb268:	1d28      	adds	r0, r5, #4
   bb26a:	f7ff ffa6 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb26e:	3508      	adds	r5, #8
   bb270:	e7f8      	b.n	bb264 <__tcf_0+0x30>
    ::free(ptr);
   bb272:	69a0      	ldr	r0, [r4, #24]
   bb274:	f7ff f8c0 	bl	ba3f8 <free>
    ~BleLocalDeviceImpl() = default;
   bb278:	f104 000c 	add.w	r0, r4, #12
   bb27c:	f7ff ffbe 	bl	bb1fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bb280:	4620      	mov	r0, r4
   bb282:	f7ff ffa9 	bl	bb1d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   bb286:	4620      	mov	r0, r4
   bb288:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   bb28a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb28e:	f7f8 bf06 	b.w	b409e <_ZdlPvj>
   bb292:	bd70      	pop	{r4, r5, r6, pc}
   bb294:	2003e660 	.word	0x2003e660

000bb298 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   bb298:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bb29a:	b510      	push	{r4, lr}
      if (_M_empty())
   bb29c:	b90a      	cbnz	r2, bb2a2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   bb29e:	f002 ff62 	bl	be166 <_ZSt25__throw_bad_function_callv>
    }
   bb2a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bb2a6:	68c3      	ldr	r3, [r0, #12]
   bb2a8:	4718      	bx	r3

000bb2aa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb2aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   bb2ae:	2300      	movs	r3, #0
   bb2b0:	e9c0 3300 	strd	r3, r3, [r0]
   bb2b4:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb2b6:	f8d1 8004 	ldr.w	r8, [r1, #4]
   bb2ba:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb2bc:	4605      	mov	r5, r0
   bb2be:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb2c0:	dd4a      	ble.n	bb358 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   bb2c2:	ea4f 1008 	mov.w	r0, r8, lsl #4
   bb2c6:	f7ff f88f 	bl	ba3e8 <malloc>
            if (!d) {
   bb2ca:	4606      	mov	r6, r0
   bb2cc:	2800      	cmp	r0, #0
   bb2ce:	d043      	beq.n	bb358 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   bb2d0:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   bb2d4:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   bb2d6:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   bb2da:	d916      	bls.n	bb30a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   bb2dc:	4550      	cmp	r0, sl
   bb2de:	d215      	bcs.n	bb30c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   bb2e0:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   bb2e4:	f1a4 0910 	sub.w	r9, r4, #16
   bb2e8:	ebaa 0404 	sub.w	r4, sl, r4
   bb2ec:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   bb2ee:	45d1      	cmp	r9, sl
   bb2f0:	d01d      	beq.n	bb32e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   bb2f2:	b11c      	cbz	r4, bb2fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   bb2f4:	4651      	mov	r1, sl
   bb2f6:	4620      	mov	r0, r4
   bb2f8:	f002 fb0a 	bl	bd910 <_ZN6StringC1EOS_>
                end->~T();
   bb2fc:	4650      	mov	r0, sl
   bb2fe:	f002 fa8b 	bl	bd818 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bb302:	f1aa 0a10 	sub.w	sl, sl, #16
   bb306:	3c10      	subs	r4, #16
   bb308:	e7f1      	b.n	bb2ee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   bb30a:	d010      	beq.n	bb32e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   bb30c:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   bb30e:	45a2      	cmp	sl, r4
   bb310:	d00d      	beq.n	bb32e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   bb312:	f1b9 0f00 	cmp.w	r9, #0
   bb316:	d003      	beq.n	bb320 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   bb318:	4621      	mov	r1, r4
   bb31a:	4648      	mov	r0, r9
   bb31c:	f002 faf8 	bl	bd910 <_ZN6StringC1EOS_>
                p->~T();
   bb320:	4620      	mov	r0, r4
   bb322:	f002 fa79 	bl	bd818 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   bb326:	3410      	adds	r4, #16
   bb328:	f109 0910 	add.w	r9, r9, #16
   bb32c:	e7ef      	b.n	bb30e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   bb32e:	6828      	ldr	r0, [r5, #0]
   bb330:	f7ff f862 	bl	ba3f8 <free>
        capacity_ = n;
   bb334:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   bb338:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb33a:	e9d7 4300 	ldrd	r4, r3, [r7]
   bb33e:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   bb342:	45a0      	cmp	r8, r4
   bb344:	d006      	beq.n	bb354 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   bb346:	4621      	mov	r1, r4
   bb348:	4630      	mov	r0, r6
   bb34a:	f002 fafb 	bl	bd944 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   bb34e:	3410      	adds	r4, #16
   bb350:	3610      	adds	r6, #16
   bb352:	e7f6      	b.n	bb342 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   bb354:	687b      	ldr	r3, [r7, #4]
   bb356:	606b      	str	r3, [r5, #4]
}
   bb358:	4628      	mov	r0, r5
   bb35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000bb35e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   bb35e:	b530      	push	{r4, r5, lr}
   bb360:	b08d      	sub	sp, #52	; 0x34
   bb362:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   bb364:	f100 0138 	add.w	r1, r0, #56	; 0x38
   bb368:	a801      	add	r0, sp, #4
   bb36a:	f7ff ff9e 	bl	bb2aa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   bb36e:	9b02      	ldr	r3, [sp, #8]
   bb370:	2b00      	cmp	r3, #0
   bb372:	dd2f      	ble.n	bb3d4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   bb374:	f104 0114 	add.w	r1, r4, #20
   bb378:	a804      	add	r0, sp, #16
   bb37a:	f7ff fbb5 	bl	baae8 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   bb37e:	f104 0108 	add.w	r1, r4, #8
   bb382:	a808      	add	r0, sp, #32
   bb384:	f7ff fbb0 	bl	baae8 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   bb388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bb38a:	9b06      	ldr	r3, [sp, #24]
   bb38c:	4313      	orrs	r3, r2
   bb38e:	d01f      	beq.n	bb3d0 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   bb390:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   bb394:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   bb398:	42ac      	cmp	r4, r5
   bb39a:	d019      	beq.n	bb3d0 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   bb39c:	a904      	add	r1, sp, #16
   bb39e:	4620      	mov	r0, r4
   bb3a0:	f002 fb26 	bl	bd9f0 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   bb3a4:	b160      	cbz	r0, bb3c0 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   bb3a6:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   bb3a8:	a808      	add	r0, sp, #32
   bb3aa:	f002 fa35 	bl	bd818 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   bb3ae:	a804      	add	r0, sp, #16
   bb3b0:	f002 fa32 	bl	bd818 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   bb3b4:	a801      	add	r0, sp, #4
   bb3b6:	f7ff fe4d 	bl	bb054 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   bb3ba:	4620      	mov	r0, r4
   bb3bc:	b00d      	add	sp, #52	; 0x34
   bb3be:	bd30      	pop	{r4, r5, pc}
   bb3c0:	4620      	mov	r0, r4
   bb3c2:	a908      	add	r1, sp, #32
   bb3c4:	f002 fb14 	bl	bd9f0 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   bb3c8:	3410      	adds	r4, #16
   bb3ca:	2800      	cmp	r0, #0
   bb3cc:	d0e4      	beq.n	bb398 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   bb3ce:	e7ea      	b.n	bb3a6 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   bb3d0:	2400      	movs	r4, #0
   bb3d2:	e7e9      	b.n	bb3a8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   bb3d4:	2401      	movs	r4, #1
   bb3d6:	e7ed      	b.n	bb3b4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000bb3d8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   bb3da:	2300      	movs	r3, #0
   bb3dc:	e9c0 3300 	strd	r3, r3, [r0]
   bb3e0:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb3e2:	684f      	ldr	r7, [r1, #4]
   bb3e4:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb3e6:	4605      	mov	r5, r0
   bb3e8:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb3ea:	dd3e      	ble.n	bb46a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   bb3ec:	00f8      	lsls	r0, r7, #3
   bb3ee:	f7fe fffb 	bl	ba3e8 <malloc>
            if (!d) {
   bb3f2:	4604      	mov	r4, r0
   bb3f4:	b3c8      	cbz	r0, bb46a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   bb3f6:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   bb3fa:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   bb3fc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   bb400:	d910      	bls.n	bb424 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   bb402:	429c      	cmp	r4, r3
   bb404:	d20f      	bcs.n	bb426 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   bb406:	3b08      	subs	r3, #8
            dest += end - p - 1;
   bb408:	1a1a      	subs	r2, r3, r0
   bb40a:	f1a0 0c08 	sub.w	ip, r0, #8
   bb40e:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   bb410:	459c      	cmp	ip, r3
   bb412:	d018      	beq.n	bb446 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   bb414:	b11a      	cbz	r2, bb41e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   bb416:	6819      	ldr	r1, [r3, #0]
   bb418:	6011      	str	r1, [r2, #0]
   bb41a:	6859      	ldr	r1, [r3, #4]
   bb41c:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   bb41e:	3b08      	subs	r3, #8
   bb420:	3a08      	subs	r2, #8
   bb422:	e7f5      	b.n	bb410 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   bb424:	d00f      	beq.n	bb446 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   bb426:	4601      	mov	r1, r0
   bb428:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   bb42a:	428b      	cmp	r3, r1
   bb42c:	d00b      	beq.n	bb446 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   bb42e:	b13a      	cbz	r2, bb440 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   bb430:	f8d1 c000 	ldr.w	ip, [r1]
   bb434:	f8c2 c000 	str.w	ip, [r2]
   bb438:	f8d1 c004 	ldr.w	ip, [r1, #4]
   bb43c:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   bb440:	3108      	adds	r1, #8
   bb442:	3208      	adds	r2, #8
   bb444:	e7f1      	b.n	bb42a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   bb446:	f7fe ffd7 	bl	ba3f8 <free>
        data_ = d;
   bb44a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bb44c:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb44e:	e9d6 3100 	ldrd	r3, r1, [r6]
   bb452:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   bb456:	4298      	cmp	r0, r3
   bb458:	d006      	beq.n	bb468 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   bb45a:	681a      	ldr	r2, [r3, #0]
   bb45c:	6022      	str	r2, [r4, #0]
   bb45e:	685a      	ldr	r2, [r3, #4]
   bb460:	6062      	str	r2, [r4, #4]
   bb462:	3308      	adds	r3, #8
   bb464:	3408      	adds	r4, #8
   bb466:	e7f6      	b.n	bb456 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   bb468:	6069      	str	r1, [r5, #4]
}
   bb46a:	4628      	mov	r0, r5
   bb46c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb46e <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb46e:	b570      	push	{r4, r5, r6, lr}
   bb470:	4604      	mov	r4, r0
        capacity_(0) {
   bb472:	2000      	movs	r0, #0
   bb474:	e9c4 0000 	strd	r0, r0, [r4]
   bb478:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb47a:	684e      	ldr	r6, [r1, #4]
   bb47c:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb47e:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb480:	dd12      	ble.n	bb4a8 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   bb482:	0071      	lsls	r1, r6, #1
   bb484:	f7fe ffc0 	bl	ba408 <realloc>
            if (!d) {
   bb488:	b170      	cbz	r0, bb4a8 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   bb48a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bb48c:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb48e:	e9d5 3200 	ldrd	r3, r2, [r5]
   bb492:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   bb496:	429a      	cmp	r2, r3
   bb498:	d004      	beq.n	bb4a4 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   bb49a:	f833 1b02 	ldrh.w	r1, [r3], #2
   bb49e:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   bb4a2:	e7f8      	b.n	bb496 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   bb4a4:	686b      	ldr	r3, [r5, #4]
   bb4a6:	6063      	str	r3, [r4, #4]
}
   bb4a8:	4620      	mov	r0, r4
   bb4aa:	bd70      	pop	{r4, r5, r6, pc}

000bb4ac <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   bb4ac:	b510      	push	{r4, lr}
        if (!dismissed_) {
   bb4ae:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   bb4b0:	4604      	mov	r4, r0
        if (!dismissed_) {
   bb4b2:	b923      	cbnz	r3, bb4be <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   bb4b4:	6803      	ldr	r3, [r0, #0]
   bb4b6:	6818      	ldr	r0, [r3, #0]
   bb4b8:	b108      	cbz	r0, bb4be <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   bb4ba:	f7fe ff9d 	bl	ba3f8 <free>
            func_();
        }
    }
   bb4be:	4620      	mov	r0, r4
   bb4c0:	bd10      	pop	{r4, pc}

000bb4c2 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   bb4c2:	b510      	push	{r4, lr}
        if (!dismissed_) {
   bb4c4:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   bb4c6:	4604      	mov	r4, r0
        if (!dismissed_) {
   bb4c8:	b923      	cbnz	r3, bb4d4 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   bb4ca:	6803      	ldr	r3, [r0, #0]
   bb4cc:	6818      	ldr	r0, [r3, #0]
   bb4ce:	b108      	cbz	r0, bb4d4 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   bb4d0:	f7fe ff92 	bl	ba3f8 <free>
    }
   bb4d4:	4620      	mov	r0, r4
   bb4d6:	bd10      	pop	{r4, pc}

000bb4d8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   bb4d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   bb4dc:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   bb4e0:	b08f      	sub	sp, #60	; 0x3c
   bb4e2:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   bb4e4:	f1b8 0f00 	cmp.w	r8, #0
   bb4e8:	d072      	beq.n	bb5d0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   bb4ea:	6f05      	ldr	r5, [r0, #112]	; 0x70
   bb4ec:	2d00      	cmp	r5, #0
   bb4ee:	d06f      	beq.n	bb5d0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   bb4f0:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   bb4f4:	231f      	movs	r3, #31
   bb4f6:	2200      	movs	r2, #0
   bb4f8:	21ff      	movs	r1, #255	; 0xff
   bb4fa:	4648      	mov	r0, r9
   bb4fc:	f7ff fac1 	bl	baa82 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   bb500:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   bb502:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   bb504:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   bb506:	2200      	movs	r2, #0
   bb508:	4619      	mov	r1, r3
   bb50a:	4638      	mov	r0, r7
   bb50c:	f7ff fab9 	bl	baa82 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   bb510:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   bb512:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   bb514:	d006      	beq.n	bb524 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   bb516:	42ae      	cmp	r6, r5
   bb518:	d030      	beq.n	bb57c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   bb51a:	2400      	movs	r4, #0
    }
   bb51c:	4620      	mov	r0, r4
   bb51e:	b00f      	add	sp, #60	; 0x3c
   bb520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   bb524:	4620      	mov	r0, r4
   bb526:	f7fe ff5f 	bl	ba3e8 <malloc>
            dismissed_(false) {
   bb52a:	ab03      	add	r3, sp, #12
   bb52c:	9304      	str	r3, [sp, #16]
   bb52e:	2300      	movs	r3, #0
   bb530:	4604      	mov	r4, r0
   bb532:	9003      	str	r0, [sp, #12]
   bb534:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   bb538:	b970      	cbnz	r0, bb558 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   bb53a:	2320      	movs	r3, #32
   bb53c:	e9cd 3006 	strd	r3, r0, [sp, #24]
   bb540:	4b24      	ldr	r3, [pc, #144]	; (bb5d4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   bb542:	9300      	str	r3, [sp, #0]
   bb544:	4924      	ldr	r1, [pc, #144]	; (bb5d8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   bb546:	4603      	mov	r3, r0
   bb548:	aa06      	add	r2, sp, #24
   bb54a:	2032      	movs	r0, #50	; 0x32
   bb54c:	f7fe fe60 	bl	ba210 <log_message>
                    return false;
   bb550:	a804      	add	r0, sp, #16
   bb552:	f7ff ffab 	bl	bb4ac <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   bb556:	e7e1      	b.n	bb51c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   bb558:	4602      	mov	r2, r0
   bb55a:	21ff      	movs	r1, #255	; 0xff
   bb55c:	462b      	mov	r3, r5
   bb55e:	4648      	mov	r0, r9
   bb560:	f7ff fa8f 	bl	baa82 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   bb564:	9803      	ldr	r0, [sp, #12]
   bb566:	462a      	mov	r2, r5
   bb568:	4641      	mov	r1, r8
   bb56a:	f003 fc94 	bl	bee96 <memcmp>
   bb56e:	b118      	cbz	r0, bb578 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   bb570:	a804      	add	r0, sp, #16
   bb572:	f7ff ff9b 	bl	bb4ac <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   bb576:	e7ce      	b.n	bb516 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   bb578:	2401      	movs	r4, #1
   bb57a:	e7e9      	b.n	bb550 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   bb57c:	4628      	mov	r0, r5
   bb57e:	f7fe ff33 	bl	ba3e8 <malloc>
   bb582:	2400      	movs	r4, #0
   bb584:	ab03      	add	r3, sp, #12
   bb586:	4606      	mov	r6, r0
   bb588:	9003      	str	r0, [sp, #12]
   bb58a:	9304      	str	r3, [sp, #16]
   bb58c:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   bb590:	b978      	cbnz	r0, bb5b2 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   bb592:	2320      	movs	r3, #32
   bb594:	e9cd 3006 	strd	r3, r0, [sp, #24]
   bb598:	4b0e      	ldr	r3, [pc, #56]	; (bb5d4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   bb59a:	9300      	str	r3, [sp, #0]
   bb59c:	490e      	ldr	r1, [pc, #56]	; (bb5d8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   bb59e:	4603      	mov	r3, r0
   bb5a0:	aa06      	add	r2, sp, #24
   bb5a2:	2032      	movs	r0, #50	; 0x32
   bb5a4:	f7fe fe34 	bl	ba210 <log_message>
                    return false;
   bb5a8:	4634      	mov	r4, r6
   bb5aa:	a804      	add	r0, sp, #16
   bb5ac:	f7ff ff89 	bl	bb4c2 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   bb5b0:	e7b4      	b.n	bb51c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   bb5b2:	4602      	mov	r2, r0
   bb5b4:	21ff      	movs	r1, #255	; 0xff
   bb5b6:	462b      	mov	r3, r5
   bb5b8:	4638      	mov	r0, r7
   bb5ba:	f7ff fa62 	bl	baa82 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   bb5be:	9803      	ldr	r0, [sp, #12]
   bb5c0:	462a      	mov	r2, r5
   bb5c2:	4641      	mov	r1, r8
   bb5c4:	f003 fc67 	bl	bee96 <memcmp>
   bb5c8:	2800      	cmp	r0, #0
   bb5ca:	d1ee      	bne.n	bb5aa <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   bb5cc:	2401      	movs	r4, #1
   bb5ce:	e7ec      	b.n	bb5aa <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   bb5d0:	2401      	movs	r4, #1
   bb5d2:	e7a3      	b.n	bb51c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   bb5d4:	000c2268 	.word	0x000c2268
   bb5d8:	000c21e7 	.word	0x000c21e7

000bb5dc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   bb5dc:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   bb5de:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   bb5e0:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bb5e2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bb5e4:	dd03      	ble.n	bb5ee <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   bb5e6:	f7fe ff0f 	bl	ba408 <realloc>
            if (!d) {
   bb5ea:	b918      	cbnz	r0, bb5f4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   bb5ec:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   bb5ee:	f7fe ff03 	bl	ba3f8 <free>
        T* d = nullptr;
   bb5f2:	2000      	movs	r0, #0
        data_ = d;
   bb5f4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bb5f6:	60a5      	str	r5, [r4, #8]
        return true;
   bb5f8:	2001      	movs	r0, #1
   bb5fa:	e7f7      	b.n	bb5ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000bb5fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   bb5fc:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   bb5fe:	6883      	ldr	r3, [r0, #8]
   bb600:	428b      	cmp	r3, r1
   bb602:	da02      	bge.n	bb60a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   bb604:	f7ff ffea 	bl	bb5dc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   bb608:	bd08      	pop	{r3, pc}
    return true;
   bb60a:	2001      	movs	r0, #1
   bb60c:	e7fc      	b.n	bb608 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000bb60e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb60e:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bb610:	2300      	movs	r3, #0
   bb612:	e9c0 3300 	strd	r3, r3, [r0]
   bb616:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb618:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb61a:	6849      	ldr	r1, [r1, #4]
   bb61c:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb61e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb620:	dd10      	ble.n	bb644 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   bb622:	f7ff ffdb 	bl	bb5dc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bb626:	b168      	cbz	r0, bb644 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb628:	e9d5 3100 	ldrd	r3, r1, [r5]
   bb62c:	6822      	ldr	r2, [r4, #0]
   bb62e:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   bb630:	4299      	cmp	r1, r3
   bb632:	d005      	beq.n	bb640 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   bb634:	b10a      	cbz	r2, bb63a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   bb636:	7818      	ldrb	r0, [r3, #0]
   bb638:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   bb63a:	3301      	adds	r3, #1
   bb63c:	3201      	adds	r2, #1
   bb63e:	e7f7      	b.n	bb630 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   bb640:	686b      	ldr	r3, [r5, #4]
   bb642:	6063      	str	r3, [r4, #4]
}
   bb644:	4620      	mov	r0, r4
   bb646:	bd38      	pop	{r3, r4, r5, pc}

000bb648 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   bb648:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   bb64a:	680b      	ldr	r3, [r1, #0]
   bb64c:	6003      	str	r3, [r0, #0]
   bb64e:	684b      	ldr	r3, [r1, #4]
   bb650:	6043      	str	r3, [r0, #4]
   bb652:	4604      	mov	r4, r0
   bb654:	460d      	mov	r5, r1
class BleAdvertisingData {
   bb656:	3008      	adds	r0, #8
   bb658:	3108      	adds	r1, #8
   bb65a:	f7ff ffd8 	bl	bb60e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   bb65e:	f105 0114 	add.w	r1, r5, #20
   bb662:	f104 0014 	add.w	r0, r4, #20
   bb666:	f7ff ffd2 	bl	bb60e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   bb66a:	f895 3020 	ldrb.w	r3, [r5, #32]
   bb66e:	f884 3020 	strb.w	r3, [r4, #32]
   bb672:	4620      	mov	r0, r4
   bb674:	bd38      	pop	{r3, r4, r5, pc}

000bb676 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   bb676:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bb678:	4604      	mov	r4, r0
   bb67a:	a801      	add	r0, sp, #4
   bb67c:	f7ff ffc7 	bl	bb60e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   bb680:	9b01      	ldr	r3, [sp, #4]
   bb682:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb684:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   bb686:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb688:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   bb68a:	6062      	str	r2, [r4, #4]
   bb68c:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bb68e:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb690:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   bb692:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bb694:	9001      	str	r0, [sp, #4]
   bb696:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   bb698:	f7fe feae 	bl	ba3f8 <free>
   bb69c:	b004      	add	sp, #16
   bb69e:	bd10      	pop	{r4, pc}

000bb6a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bb6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb6a4:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb6a6:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bb6a8:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb6aa:	4419      	add	r1, r3
   bb6ac:	6883      	ldr	r3, [r0, #8]
   bb6ae:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bb6b0:	4604      	mov	r4, r0
   bb6b2:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb6b4:	dc12      	bgt.n	bb6dc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   bb6b6:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb6b8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb6ba:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb6bc:	1bd2      	subs	r2, r2, r7
   bb6be:	4631      	mov	r1, r6
   bb6c0:	1970      	adds	r0, r6, r5
   bb6c2:	f003 fc06 	bl	beed2 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   bb6c6:	462a      	mov	r2, r5
   bb6c8:	4641      	mov	r1, r8
   bb6ca:	4630      	mov	r0, r6
   bb6cc:	f003 fbf3 	bl	beeb6 <memcpy>
    size_ += n;
   bb6d0:	6863      	ldr	r3, [r4, #4]
   bb6d2:	442b      	add	r3, r5
   bb6d4:	6063      	str	r3, [r4, #4]
    return true;
   bb6d6:	2001      	movs	r0, #1
}
   bb6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb6dc:	f7ff ff7e 	bl	bb5dc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bb6e0:	2800      	cmp	r0, #0
   bb6e2:	d1e8      	bne.n	bb6b6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   bb6e4:	e7f8      	b.n	bb6d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000bb6e6 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   bb6e6:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   bb6e8:	460a      	mov	r2, r1
   bb6ea:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   bb6ec:	b510      	push	{r4, lr}
   bb6ee:	4604      	mov	r4, r0
    size_ = 0;
   bb6f0:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   bb6f2:	b102      	cbz	r2, bb6f6 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   bb6f4:	b90b      	cbnz	r3, bb6fa <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   bb6f6:	2000      	movs	r0, #0
}
   bb6f8:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   bb6fa:	2bff      	cmp	r3, #255	; 0xff
   bb6fc:	bf28      	it	cs
   bb6fe:	23ff      	movcs	r3, #255	; 0xff
   bb700:	f7ff ffce 	bl	bb6a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   bb704:	2800      	cmp	r0, #0
   bb706:	d0f7      	beq.n	bb6f8 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   bb708:	6860      	ldr	r0, [r4, #4]
   bb70a:	e7f5      	b.n	bb6f8 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000bb70c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bb70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb70e:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb710:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   bb714:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bb716:	4604      	mov	r4, r0
   bb718:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb71a:	da0b      	bge.n	bb734 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   bb71c:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb71e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb720:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb722:	1b52      	subs	r2, r2, r5
   bb724:	1c48      	adds	r0, r1, #1
   bb726:	f003 fbd4 	bl	beed2 <memmove>
    new(p) T(std::move(value));
   bb72a:	557e      	strb	r6, [r7, r5]
    ++size_;
   bb72c:	6863      	ldr	r3, [r4, #4]
   bb72e:	3301      	adds	r3, #1
   bb730:	6063      	str	r3, [r4, #4]
}
   bb732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb734:	3101      	adds	r1, #1
   bb736:	f7ff ff51 	bl	bb5dc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bb73a:	2800      	cmp	r0, #0
   bb73c:	d1ee      	bne.n	bb71c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   bb73e:	e7f8      	b.n	bb732 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000bb740 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb740:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   bb742:	6841      	ldr	r1, [r0, #4]
   bb744:	f7ff bfe2 	b.w	bb70c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000bb748 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bb748:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bb74c:	4604      	mov	r4, r0
   bb74e:	461d      	mov	r5, r3
   bb750:	460f      	mov	r7, r1
   bb752:	ab01      	add	r3, sp, #4
   bb754:	4690      	mov	r8, r2
   bb756:	460a      	mov	r2, r1
   bb758:	e9d0 0100 	ldrd	r0, r1, [r0]
   bb75c:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   bb760:	f7fe ff14 	bl	ba58c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   bb764:	1cae      	adds	r6, r5, #2
   bb766:	6863      	ldr	r3, [r4, #4]
   bb768:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   bb76a:	f1b9 0f00 	cmp.w	r9, #0
   bb76e:	d126      	bne.n	bb7be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   bb770:	b328      	cbz	r0, bb7be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bb772:	4433      	add	r3, r6
   bb774:	1a1b      	subs	r3, r3, r0
   bb776:	2bff      	cmp	r3, #255	; 0xff
   bb778:	d809      	bhi.n	bb78e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   bb77a:	9901      	ldr	r1, [sp, #4]
   bb77c:	4620      	mov	r0, r4
   bb77e:	f7ff fcc7 	bl	bb110 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bb782:	6861      	ldr	r1, [r4, #4]
   bb784:	4620      	mov	r0, r4
   bb786:	4431      	add	r1, r6
   bb788:	f7ff ff38 	bl	bb5fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bb78c:	b918      	cbnz	r0, bb796 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   bb78e:	6860      	ldr	r0, [r4, #4]
}
   bb790:	b003      	add	sp, #12
   bb792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   bb796:	1c6a      	adds	r2, r5, #1
   bb798:	9901      	ldr	r1, [sp, #4]
   bb79a:	b2d2      	uxtb	r2, r2
   bb79c:	4620      	mov	r0, r4
   bb79e:	f7ff ffb5 	bl	bb70c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   bb7a2:	9901      	ldr	r1, [sp, #4]
   bb7a4:	463a      	mov	r2, r7
   bb7a6:	3101      	adds	r1, #1
   bb7a8:	4620      	mov	r0, r4
   bb7aa:	f7ff ffaf 	bl	bb70c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   bb7ae:	9901      	ldr	r1, [sp, #4]
   bb7b0:	462b      	mov	r3, r5
   bb7b2:	4642      	mov	r2, r8
   bb7b4:	3102      	adds	r1, #2
    return insert(size_, values, n);
   bb7b6:	4620      	mov	r0, r4
   bb7b8:	f7ff ff72 	bl	bb6a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   bb7bc:	e7e7      	b.n	bb78e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bb7be:	18f1      	adds	r1, r6, r3
   bb7c0:	29ff      	cmp	r1, #255	; 0xff
   bb7c2:	d8e4      	bhi.n	bb78e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bb7c4:	4620      	mov	r0, r4
   bb7c6:	f7ff ff19 	bl	bb5fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bb7ca:	2800      	cmp	r0, #0
   bb7cc:	d0df      	beq.n	bb78e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   bb7ce:	1c69      	adds	r1, r5, #1
   bb7d0:	b2c9      	uxtb	r1, r1
   bb7d2:	4620      	mov	r0, r4
   bb7d4:	f7ff ffb4 	bl	bb740 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   bb7d8:	4639      	mov	r1, r7
   bb7da:	4620      	mov	r0, r4
   bb7dc:	f7ff ffb0 	bl	bb740 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   bb7e0:	6861      	ldr	r1, [r4, #4]
   bb7e2:	462b      	mov	r3, r5
   bb7e4:	4642      	mov	r2, r8
   bb7e6:	e7e6      	b.n	bb7b6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000bb7e8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bb7e8:	b430      	push	{r4, r5}
   bb7ea:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   bb7ee:	b11a      	cbz	r2, bb7f8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   bb7f0:	9502      	str	r5, [sp, #8]
}
   bb7f2:	bc30      	pop	{r4, r5}
   bb7f4:	f7ff bfa8 	b.w	bb748 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   bb7f8:	6840      	ldr	r0, [r0, #4]
}
   bb7fa:	bc30      	pop	{r4, r5}
   bb7fc:	4770      	bx	lr

000bb7fe <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   bb7fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   bb800:	2300      	movs	r3, #0
   bb802:	e9c0 3300 	strd	r3, r3, [r0]
   bb806:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bb808:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bb80a:	9300      	str	r3, [sp, #0]
   bb80c:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bb80e:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bb812:	4619      	mov	r1, r3
   bb814:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   bb818:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bb81a:	f7ff ffe5 	bl	bb7e8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   bb81e:	4620      	mov	r0, r4
   bb820:	b004      	add	sp, #16
   bb822:	bd10      	pop	{r4, pc}

000bb824 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bb824:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bb826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb828:	4604      	mov	r4, r0
   bb82a:	460d      	mov	r5, r1
   bb82c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bb82e:	d914      	bls.n	bb85a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bb830:	4290      	cmp	r0, r2
   bb832:	d213      	bcs.n	bb85c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bb834:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bb838:	1a75      	subs	r5, r6, r1
   bb83a:	f1a1 0708 	sub.w	r7, r1, #8
   bb83e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bb840:	42b7      	cmp	r7, r6
   bb842:	d018      	beq.n	bb876 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bb844:	b11c      	cbz	r4, bb84e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bb846:	4631      	mov	r1, r6
   bb848:	4620      	mov	r0, r4
   bb84a:	f7ff fcac 	bl	bb1a6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bb84e:	1d30      	adds	r0, r6, #4
   bb850:	f7ff fcb3 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bb854:	3e08      	subs	r6, #8
   bb856:	3c08      	subs	r4, #8
   bb858:	e7f2      	b.n	bb840 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bb85a:	d00c      	beq.n	bb876 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bb85c:	42b5      	cmp	r5, r6
   bb85e:	d00a      	beq.n	bb876 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bb860:	b11c      	cbz	r4, bb86a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bb862:	4629      	mov	r1, r5
   bb864:	4620      	mov	r0, r4
   bb866:	f7ff fc9e 	bl	bb1a6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bb86a:	1d28      	adds	r0, r5, #4
   bb86c:	f7ff fca5 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bb870:	3508      	adds	r5, #8
   bb872:	3408      	adds	r4, #8
   bb874:	e7f2      	b.n	bb85c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bb876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb878 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bb87a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bb87c:	6846      	ldr	r6, [r0, #4]
   bb87e:	4668      	mov	r0, sp
   bb880:	f7ff fc91 	bl	bb1a6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb884:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   bb888:	429f      	cmp	r7, r3
   bb88a:	db12      	blt.n	bb8b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   bb88c:	3701      	adds	r7, #1
        if (n > 0) {
   bb88e:	2f00      	cmp	r7, #0
   bb890:	dd29      	ble.n	bb8e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   bb892:	00f8      	lsls	r0, r7, #3
   bb894:	f7fe fda8 	bl	ba3e8 <malloc>
            if (!d) {
   bb898:	4605      	mov	r5, r0
   bb89a:	b1f0      	cbz	r0, bb8da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   bb89c:	e9d4 1200 	ldrd	r1, r2, [r4]
   bb8a0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bb8a4:	f7ff ffbe 	bl	bb824 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bb8a8:	6820      	ldr	r0, [r4, #0]
   bb8aa:	f7fe fda5 	bl	ba3f8 <free>
        data_ = d;
   bb8ae:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   bb8b0:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bb8b2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bb8b4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb8b6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   bb8ba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bb8be:	4631      	mov	r1, r6
   bb8c0:	f106 0008 	add.w	r0, r6, #8
   bb8c4:	f7ff ffae 	bl	bb824 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bb8c8:	b11e      	cbz	r6, bb8d2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   bb8ca:	4669      	mov	r1, sp
   bb8cc:	4630      	mov	r0, r6
   bb8ce:	f7ff fc6a 	bl	bb1a6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   bb8d2:	6863      	ldr	r3, [r4, #4]
   bb8d4:	3301      	adds	r3, #1
   bb8d6:	6063      	str	r3, [r4, #4]
    return true;
   bb8d8:	2501      	movs	r5, #1
   bb8da:	a801      	add	r0, sp, #4
   bb8dc:	f7ff fc6d 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb8e0:	4628      	mov	r0, r5
   bb8e2:	b003      	add	sp, #12
   bb8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   bb8e6:	2500      	movs	r5, #0
   bb8e8:	e7de      	b.n	bb8a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000bb8ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bb8ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   bb8ec:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bb8f0:	4605      	mov	r5, r0
   bb8f2:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   bb8f4:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   bb8f8:	42a6      	cmp	r6, r4
   bb8fa:	d005      	beq.n	bb908 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   bb8fc:	4639      	mov	r1, r7
   bb8fe:	4620      	mov	r0, r4
   bb900:	f7ff fa9d 	bl	bae3e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   bb904:	b108      	cbz	r0, bb90a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   bb906:	b914      	cbnz	r4, bb90e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   bb908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   bb90a:	3408      	adds	r4, #8
   bb90c:	e7f4      	b.n	bb8f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   bb90e:	1d20      	adds	r0, r4, #4
   bb910:	f7ff fc53 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   bb914:	e9d5 3200 	ldrd	r3, r2, [r5]
   bb918:	f104 0108 	add.w	r1, r4, #8
   bb91c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bb920:	4620      	mov	r0, r4
   bb922:	f7ff ff7f 	bl	bb824 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   bb926:	686b      	ldr	r3, [r5, #4]
   bb928:	3b01      	subs	r3, #1
   bb92a:	606b      	str	r3, [r5, #4]
    return true;
   bb92c:	e7ec      	b.n	bb908 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000bb930 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bb930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb934:	4605      	mov	r5, r0
   bb936:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   bb938:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bb93a:	460c      	mov	r4, r1
        WiringBleLock lk;
   bb93c:	f7fe fef4 	bl	ba728 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   bb940:	682e      	ldr	r6, [r5, #0]
   bb942:	1ef3      	subs	r3, r6, #3
   bb944:	2b0d      	cmp	r3, #13
   bb946:	d83c      	bhi.n	bb9c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bb948:	e8df f013 	tbh	[pc, r3, lsl #1]
   bb94c:	0053000e 	.word	0x0053000e
   bb950:	00d1003b 	.word	0x00d1003b
   bb954:	003b003b 	.word	0x003b003b
   bb958:	003b003b 	.word	0x003b003b
   bb95c:	009b003b 	.word	0x009b003b
   bb960:	009b009b 	.word	0x009b009b
   bb964:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   bb968:	a804      	add	r0, sp, #16
   bb96a:	f7ff fa0f 	bl	bad8c <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   bb96e:	9b04      	ldr	r3, [sp, #16]
   bb970:	89aa      	ldrh	r2, [r5, #12]
   bb972:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   bb974:	6869      	ldr	r1, [r5, #4]
   bb976:	9804      	ldr	r0, [sp, #16]
   bb978:	3108      	adds	r1, #8
   bb97a:	3002      	adds	r0, #2
   bb97c:	f7fe feee 	bl	ba75c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   bb980:	a904      	add	r1, sp, #16
   bb982:	a806      	add	r0, sp, #24
   bb984:	f7ff fc0f 	bl	bb1a6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   bb988:	a906      	add	r1, sp, #24
   bb98a:	f104 0018 	add.w	r0, r4, #24
   bb98e:	f7ff ff73 	bl	bb878 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bb992:	4605      	mov	r5, r0
   bb994:	a807      	add	r0, sp, #28
   bb996:	f7ff fc10 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb99a:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   bb99c:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   bb99e:	b9b5      	cbnz	r5, bb9ce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   bb9a0:	4b5d      	ldr	r3, [pc, #372]	; (bbb18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   bb9a2:	495e      	ldr	r1, [pc, #376]	; (bbb1c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bb9a4:	9300      	str	r3, [sp, #0]
   bb9a6:	2032      	movs	r0, #50	; 0x32
   bb9a8:	462b      	mov	r3, r5
   bb9aa:	aa06      	add	r2, sp, #24
   bb9ac:	9507      	str	r5, [sp, #28]
   bb9ae:	f7fe fc2f 	bl	ba210 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   bb9b2:	9b04      	ldr	r3, [sp, #16]
   bb9b4:	4629      	mov	r1, r5
   bb9b6:	8818      	ldrh	r0, [r3, #0]
   bb9b8:	f7fe f9aa 	bl	b9d10 <hal_ble_gap_disconnect>
   bb9bc:	a805      	add	r0, sp, #20
   bb9be:	f7ff fbfc 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   bb9c2:	a803      	add	r0, sp, #12
   bb9c4:	f7fe febe 	bl	ba744 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   bb9c8:	b00e      	add	sp, #56	; 0x38
   bb9ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   bb9ce:	4a54      	ldr	r2, [pc, #336]	; (bbb20 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   bb9d0:	9200      	str	r2, [sp, #0]
   bb9d2:	2300      	movs	r3, #0
   bb9d4:	4951      	ldr	r1, [pc, #324]	; (bbb1c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bb9d6:	9307      	str	r3, [sp, #28]
   bb9d8:	aa06      	add	r2, sp, #24
   bb9da:	2001      	movs	r0, #1
   bb9dc:	f7fe fc18 	bl	ba210 <log_message>
                if (impl->connectedCallback_) {
   bb9e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bb9e2:	2b00      	cmp	r3, #0
   bb9e4:	d0ea      	beq.n	bb9bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   bb9e6:	a904      	add	r1, sp, #16
   bb9e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bb9ec:	f7ff fc54 	bl	bb298 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   bb9f0:	e7e4      	b.n	bb9bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bb9f2:	89a9      	ldrh	r1, [r5, #12]
   bb9f4:	4620      	mov	r0, r4
   bb9f6:	f7ff f8dc 	bl	babb2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bb9fa:	4606      	mov	r6, r0
   bb9fc:	2800      	cmp	r0, #0
   bb9fe:	d0e0      	beq.n	bb9c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   bba00:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   bba02:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   bba06:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bba0a:	8029      	strh	r1, [r5, #0]
   bba0c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   bba10:	429a      	cmp	r2, r3
   bba12:	d003      	beq.n	bba1c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   bba14:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bba18:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   bba1a:	e7f9      	b.n	bba10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   bba1c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   bba20:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bba24:	45b8      	cmp	r8, r7
   bba26:	d004      	beq.n	bba32 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   bba28:	1d38      	adds	r0, r7, #4
   bba2a:	f7ff fbc6 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bba2e:	3708      	adds	r7, #8
   bba30:	e7f8      	b.n	bba24 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   bba32:	2300      	movs	r3, #0
   bba34:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   bba36:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   bba3a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bba3e:	45b8      	cmp	r8, r7
   bba40:	d004      	beq.n	bba4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   bba42:	1d38      	adds	r0, r7, #4
   bba44:	f7ff fbb9 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bba48:	3708      	adds	r7, #8
   bba4a:	e7f8      	b.n	bba3e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   bba4c:	2300      	movs	r3, #0
   bba4e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   bba50:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   bba52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bba54:	b123      	cbz	r3, bba60 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   bba56:	4631      	mov	r1, r6
   bba58:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bba5c:	f7ff fc1c 	bl	bb298 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   bba60:	2300      	movs	r3, #0
   bba62:	2220      	movs	r2, #32
   bba64:	e9cd 2306 	strd	r2, r3, [sp, #24]
   bba68:	4a2e      	ldr	r2, [pc, #184]	; (bbb24 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   bba6a:	9200      	str	r2, [sp, #0]
   bba6c:	492b      	ldr	r1, [pc, #172]	; (bbb1c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bba6e:	aa06      	add	r2, sp, #24
   bba70:	2001      	movs	r0, #1
   bba72:	f7fe fbcd 	bl	ba210 <log_message>
                    impl->peers_.removeOne(*peer);
   bba76:	4631      	mov	r1, r6
   bba78:	f104 0018 	add.w	r0, r4, #24
   bba7c:	f7ff ff35 	bl	bb8ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   bba80:	e79f      	b.n	bb9c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bba82:	89a9      	ldrh	r1, [r5, #12]
   bba84:	4620      	mov	r0, r4
   bba86:	f7ff f894 	bl	babb2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bba8a:	2800      	cmp	r0, #0
   bba8c:	d099      	beq.n	bb9c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   bba8e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bba90:	2b00      	cmp	r3, #0
   bba92:	d096      	beq.n	bb9c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   bba94:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bba96:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   bba98:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bba9c:	d001      	beq.n	bbaa2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   bba9e:	2e10      	cmp	r6, #16
   bbaa0:	d117      	bne.n	bbad2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   bbaa2:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   bbaa4:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   bbaa6:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   bbaa8:	2506      	movs	r5, #6
                        };
   bbaaa:	f88d 3015 	strb.w	r3, [sp, #21]
   bbaae:	9104      	str	r1, [sp, #16]
   bbab0:	f88d 2014 	strb.w	r2, [sp, #20]
   bbab4:	9006      	str	r0, [sp, #24]
   bbab6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   bbaba:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   bbabc:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   bbac0:	9508      	str	r5, [sp, #32]
   bbac2:	e883 0003 	stmia.w	r3, {r0, r1}
   bbac6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bbac8:	a906      	add	r1, sp, #24
   bbaca:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bbace:	4798      	blx	r3
   bbad0:	e777      	b.n	bb9c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   bbad2:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   bbad4:	bf01      	itttt	eq
   bbad6:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   bbad8:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   bbada:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   bbade:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   bbae0:	bf0f      	iteee	eq
   bbae2:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   bbae6:	461a      	movne	r2, r3
   bbae8:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   bbaea:	461d      	movne	r5, r3
   bbaec:	e7dd      	b.n	bbaaa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bbaee:	89a9      	ldrh	r1, [r5, #12]
   bbaf0:	4620      	mov	r0, r4
   bbaf2:	f7ff f85e 	bl	babb2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   bbaf6:	4601      	mov	r1, r0
   bbaf8:	2800      	cmp	r0, #0
   bbafa:	f43f af62 	beq.w	bb9c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bbafe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bbb00:	2b00      	cmp	r3, #0
   bbb02:	f43f af5e 	beq.w	bb9c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   bbb06:	686b      	ldr	r3, [r5, #4]
   bbb08:	9306      	str	r3, [sp, #24]
   bbb0a:	aa06      	add	r2, sp, #24
   bbb0c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bbb0e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bbb12:	4798      	blx	r3
   bbb14:	e755      	b.n	bb9c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bbb16:	bf00      	nop
   bbb18:	000c2283 	.word	0x000c2283
   bbb1c:	000c21e7 	.word	0x000c21e7
   bbb20:	000c22a9 	.word	0x000c22a9
   bbb24:	000c22c6 	.word	0x000c22c6

000bbb28 <_ZNK8particle13BlePeerDevice10disconnectEv>:
int BlePeerDevice::disconnect() const {
   bbb28:	b513      	push	{r0, r1, r4, lr}
   bbb2a:	4604      	mov	r4, r0
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   bbb2c:	f7ff f950 	bl	badd0 <_ZNK8particle13BlePeerDevice9connectedEv>
   bbb30:	b1d0      	cbz	r0, bbb68 <_ZNK8particle13BlePeerDevice10disconnectEv+0x40>
    CHECK(hal_ble_gap_disconnect(impl()->connHandle(), nullptr));
   bbb32:	6823      	ldr	r3, [r4, #0]
   bbb34:	2100      	movs	r1, #0
   bbb36:	8818      	ldrh	r0, [r3, #0]
   bbb38:	f7fe f8ea 	bl	b9d10 <hal_ble_gap_disconnect>
   bbb3c:	2800      	cmp	r0, #0
   bbb3e:	db11      	blt.n	bbb64 <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
        WiringBleLock lk;
   bbb40:	a801      	add	r0, sp, #4
   bbb42:	f7fe fdf1 	bl	ba728 <_ZN8particle3ble13WiringBleLockC1Ev>
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   bbb46:	f7ff f9d1 	bl	baeec <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   bbb4a:	6800      	ldr	r0, [r0, #0]
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   bbb4c:	4621      	mov	r1, r4
   bbb4e:	3018      	adds	r0, #24
   bbb50:	f7ff fecb 	bl	bb8ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
      { return _M_ptr; }
   bbb54:	6823      	ldr	r3, [r4, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bbb56:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bbb5a:	801a      	strh	r2, [r3, #0]
        WiringBleLock lk;
   bbb5c:	a801      	add	r0, sp, #4
   bbb5e:	f7fe fdf1 	bl	ba744 <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   bbb62:	2000      	movs	r0, #0
}
   bbb64:	b002      	add	sp, #8
   bbb66:	bd10      	pop	{r4, pc}
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   bbb68:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   bbb6c:	e7fa      	b.n	bbb64 <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>

000bbb6e <_ZNK8particle14BleLocalDevice10disconnectERKNS_13BlePeerDeviceE>:
    }
    return SYSTEM_ERROR_NOT_FOUND;
}

int BleLocalDevice::disconnect(const BlePeerDevice& peer) const {
    return peer.disconnect();
   bbb6e:	4608      	mov	r0, r1
   bbb70:	f7ff bfda 	b.w	bbb28 <_ZNK8particle13BlePeerDevice10disconnectEv>

000bbb74 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bbb74:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   bbb76:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   bbb78:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bbb7a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bbb7c:	dd05      	ble.n	bbb8a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   bbb7e:	2114      	movs	r1, #20
   bbb80:	4369      	muls	r1, r5
   bbb82:	f7fe fc41 	bl	ba408 <realloc>
            if (!d) {
   bbb86:	b918      	cbnz	r0, bbb90 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   bbb88:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   bbb8a:	f7fe fc35 	bl	ba3f8 <free>
        T* d = nullptr;
   bbb8e:	2000      	movs	r0, #0
        data_ = d;
   bbb90:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bbb92:	60a5      	str	r5, [r4, #8]
        return true;
   bbb94:	2001      	movs	r0, #1
   bbb96:	e7f7      	b.n	bbb88 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000bbb98 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bbb98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   bbb9c:	2400      	movs	r4, #0
   bbb9e:	e9c0 4400 	strd	r4, r4, [r0]
   bbba2:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bbba4:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bbba6:	6849      	ldr	r1, [r1, #4]
   bbba8:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bbbaa:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bbbac:	dd1a      	ble.n	bbbe4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   bbbae:	f7ff ffe1 	bl	bbb74 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bbbb2:	b1b8      	cbz	r0, bbbe4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bbbb4:	e9d8 9300 	ldrd	r9, r3, [r8]
   bbbb8:	f04f 0c14 	mov.w	ip, #20
   bbbbc:	f8d7 e000 	ldr.w	lr, [r7]
   bbbc0:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   bbbc4:	eb09 0504 	add.w	r5, r9, r4
   bbbc8:	45ac      	cmp	ip, r5
   bbbca:	d008      	beq.n	bbbde <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   bbbcc:	eb1e 0604 	adds.w	r6, lr, r4
   bbbd0:	bf1f      	itttt	ne
   bbbd2:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   bbbd4:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   bbbd6:	682b      	ldrne	r3, [r5, #0]
   bbbd8:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   bbbda:	3414      	adds	r4, #20
   bbbdc:	e7f2      	b.n	bbbc4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   bbbde:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bbbe2:	607b      	str	r3, [r7, #4]
}
   bbbe4:	4638      	mov	r0, r7
   bbbe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bbbea <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   bbbea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   bbbee:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   bbbf2:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bbbf4:	6883      	ldr	r3, [r0, #8]
   bbbf6:	19e9      	adds	r1, r5, r7
   bbbf8:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   bbbfa:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bbbfc:	dc17      	bgt.n	bbc2e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   bbbfe:	2314      	movs	r3, #20
   bbc00:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   bbc02:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bbc04:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   bbc06:	fb03 f907 	mul.w	r9, r3, r7
   bbc0a:	435a      	muls	r2, r3
    T* const p = data_ + i;
   bbc0c:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bbc0e:	1b52      	subs	r2, r2, r5
   bbc10:	4631      	mov	r1, r6
   bbc12:	eb06 0009 	add.w	r0, r6, r9
   bbc16:	f003 f95c 	bl	beed2 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   bbc1a:	464a      	mov	r2, r9
   bbc1c:	4641      	mov	r1, r8
   bbc1e:	4630      	mov	r0, r6
   bbc20:	f003 f949 	bl	beeb6 <memcpy>
    size_ += n;
   bbc24:	6863      	ldr	r3, [r4, #4]
   bbc26:	443b      	add	r3, r7
   bbc28:	6063      	str	r3, [r4, #4]
}
   bbc2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bbc2e:	f7ff ffa1 	bl	bbb74 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bbc32:	2800      	cmp	r0, #0
   bbc34:	d1e3      	bne.n	bbbfe <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   bbc36:	e7f8      	b.n	bbc2a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000bbc38 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bbc38:	b082      	sub	sp, #8
   bbc3a:	b570      	push	{r4, r5, r6, lr}
   bbc3c:	460c      	mov	r4, r1
   bbc3e:	a904      	add	r1, sp, #16
   bbc40:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bbc44:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   bbc48:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bbc4a:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bbc4c:	da17      	bge.n	bbc7e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   bbc4e:	2314      	movs	r3, #20
   bbc50:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   bbc54:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   bbc56:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   bbc58:	435a      	muls	r2, r3
    T* const p = data_ + i;
   bbc5a:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   bbc5c:	1a52      	subs	r2, r2, r1
   bbc5e:	18e0      	adds	r0, r4, r3
   bbc60:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   bbc62:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   bbc64:	f003 f935 	bl	beed2 <memmove>
    new(p) T(std::move(value));
   bbc68:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   bbc6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bbc6c:	6833      	ldr	r3, [r6, #0]
   bbc6e:	6023      	str	r3, [r4, #0]
    ++size_;
   bbc70:	686b      	ldr	r3, [r5, #4]
   bbc72:	3301      	adds	r3, #1
   bbc74:	606b      	str	r3, [r5, #4]
}
   bbc76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bbc7a:	b002      	add	sp, #8
   bbc7c:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bbc7e:	3101      	adds	r1, #1
   bbc80:	f7ff ff78 	bl	bbb74 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bbc84:	2800      	cmp	r0, #0
   bbc86:	d1e2      	bne.n	bbc4e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   bbc88:	e7f5      	b.n	bbc76 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000bbc8a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   bbc8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   bbc8e:	2400      	movs	r4, #0
   bbc90:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bbc92:	1e93      	subs	r3, r2, #2
   bbc94:	e9c0 4400 	strd	r4, r4, [r0]
   bbc98:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   bbc9a:	4605      	mov	r5, r0
   bbc9c:	460f      	mov	r7, r1
   bbc9e:	4690      	mov	r8, r2
   bbca0:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bbca2:	9305      	str	r3, [sp, #20]
    return size_;
   bbca4:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   bbca6:	428c      	cmp	r4, r1
   bbca8:	da72      	bge.n	bbd90 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   bbcaa:	6838      	ldr	r0, [r7, #0]
   bbcac:	ab07      	add	r3, sp, #28
   bbcae:	4642      	mov	r2, r8
   bbcb0:	1b09      	subs	r1, r1, r4
   bbcb2:	4420      	add	r0, r4
   bbcb4:	f7fe fc6a 	bl	ba58c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   bbcb8:	4606      	mov	r6, r0
   bbcba:	2800      	cmp	r0, #0
   bbcbc:	d068      	beq.n	bbd90 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bbcbe:	9b05      	ldr	r3, [sp, #20]
   bbcc0:	2b01      	cmp	r3, #1
   bbcc2:	d82f      	bhi.n	bbd24 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bbcc4:	f1a0 0b02 	sub.w	fp, r0, #2
   bbcc8:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   bbccc:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   bbcd0:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bbcd4:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bbcd6:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bbcd8:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bbcda:	d055      	beq.n	bbd88 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   bbcdc:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bbcde:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   bbce2:	4413      	add	r3, r2
   bbce4:	a808      	add	r0, sp, #32
   bbce6:	78d9      	ldrb	r1, [r3, #3]
   bbce8:	789b      	ldrb	r3, [r3, #2]
   bbcea:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   bbcee:	f7fe fdb2 	bl	ba856 <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   bbcf2:	f10d 0e20 	add.w	lr, sp, #32
   bbcf6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   bbcfa:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   bbcfe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bbd02:	f8de 3000 	ldr.w	r3, [lr]
   bbd06:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   bbd0a:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   bbd0e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   bbd12:	ab0d      	add	r3, sp, #52	; 0x34
   bbd14:	cb0c      	ldmia	r3, {r2, r3}
   bbd16:	6869      	ldr	r1, [r5, #4]
   bbd18:	4628      	mov	r0, r5
   bbd1a:	f7ff ff8d 	bl	bbc38 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bbd1e:	f109 0901 	add.w	r9, r9, #1
   bbd22:	e7d7      	b.n	bbcd4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   bbd24:	f1a8 0306 	sub.w	r3, r8, #6
   bbd28:	2b01      	cmp	r3, #1
   bbd2a:	d82d      	bhi.n	bbd88 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bbd2c:	f1a0 0b02 	sub.w	fp, r0, #2
   bbd30:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   bbd34:	f04f 0900 	mov.w	r9, #0
   bbd38:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   bbd3c:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   bbd3e:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bbd40:	d022      	beq.n	bbd88 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   bbd42:	3302      	adds	r3, #2
    return data_[i];
   bbd44:	6839      	ldr	r1, [r7, #0]
   bbd46:	4423      	add	r3, r4
   bbd48:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   bbd4c:	2201      	movs	r2, #1
   bbd4e:	4419      	add	r1, r3
   bbd50:	a808      	add	r0, sp, #32
   bbd52:	f7fe fd61 	bl	ba818 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   bbd56:	f10d 0e20 	add.w	lr, sp, #32
   bbd5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   bbd5e:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   bbd62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bbd66:	f8de 3000 	ldr.w	r3, [lr]
   bbd6a:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   bbd6e:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   bbd72:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   bbd76:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   bbd7a:	6869      	ldr	r1, [r5, #4]
   bbd7c:	4628      	mov	r0, r5
   bbd7e:	f7ff ff5b 	bl	bbc38 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bbd82:	f109 0901 	add.w	r9, r9, #1
   bbd86:	e7d9      	b.n	bbd3c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   bbd88:	9b07      	ldr	r3, [sp, #28]
   bbd8a:	441c      	add	r4, r3
   bbd8c:	4434      	add	r4, r6
   bbd8e:	e789      	b.n	bbca4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   bbd90:	4628      	mov	r0, r5
   bbd92:	b013      	add	sp, #76	; 0x4c
   bbd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bbd98 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   bbd98:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   bbd9a:	2300      	movs	r3, #0
   bbd9c:	b085      	sub	sp, #20
   bbd9e:	e9c0 3300 	strd	r3, r3, [r0]
   bbda2:	6083      	str	r3, [r0, #8]
   bbda4:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bbda6:	2202      	movs	r2, #2
   bbda8:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   bbdaa:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bbdac:	f7ff ff6d 	bl	bbc8a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bbdb0:	a901      	add	r1, sp, #4
   bbdb2:	4620      	mov	r0, r4
   bbdb4:	f7ff ff19 	bl	bbbea <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bbdb8:	a801      	add	r0, sp, #4
   bbdba:	f7ff f95d 	bl	bb078 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bbdbe:	2202      	movs	r2, #2
   bbdc0:	4629      	mov	r1, r5
   bbdc2:	a801      	add	r0, sp, #4
   bbdc4:	f7ff ff61 	bl	bbc8a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bbdc8:	a901      	add	r1, sp, #4
   bbdca:	4620      	mov	r0, r4
   bbdcc:	f7ff ff0d 	bl	bbbea <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bbdd0:	a801      	add	r0, sp, #4
   bbdd2:	f7ff f951 	bl	bb078 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   bbdd6:	2203      	movs	r2, #3
   bbdd8:	4629      	mov	r1, r5
   bbdda:	a801      	add	r0, sp, #4
   bbddc:	f7ff ff55 	bl	bbc8a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bbde0:	a901      	add	r1, sp, #4
   bbde2:	4620      	mov	r0, r4
   bbde4:	f7ff ff01 	bl	bbbea <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bbde8:	a801      	add	r0, sp, #4
   bbdea:	f7ff f945 	bl	bb078 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   bbdee:	2206      	movs	r2, #6
   bbdf0:	4629      	mov	r1, r5
   bbdf2:	a801      	add	r0, sp, #4
   bbdf4:	f7ff ff49 	bl	bbc8a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bbdf8:	a901      	add	r1, sp, #4
   bbdfa:	4620      	mov	r0, r4
   bbdfc:	f7ff fef5 	bl	bbbea <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bbe00:	a801      	add	r0, sp, #4
   bbe02:	f7ff f939 	bl	bb078 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   bbe06:	2207      	movs	r2, #7
   bbe08:	4629      	mov	r1, r5
   bbe0a:	a801      	add	r0, sp, #4
   bbe0c:	f7ff ff3d 	bl	bbc8a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bbe10:	a901      	add	r1, sp, #4
   bbe12:	4620      	mov	r0, r4
   bbe14:	f7ff fee9 	bl	bbbea <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bbe18:	a801      	add	r0, sp, #4
   bbe1a:	f7ff f92d 	bl	bb078 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   bbe1e:	4620      	mov	r0, r4
   bbe20:	b005      	add	sp, #20
   bbe22:	bd30      	pop	{r4, r5, pc}

000bbe24 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   bbe24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bbe28:	b085      	sub	sp, #20
   bbe2a:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bbe2c:	4601      	mov	r1, r0
   bbe2e:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   bbe30:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bbe32:	f7ff ffb1 	bl	bbd98 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_;
   bbe36:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
   bbe38:	9b02      	ldr	r3, [sp, #8]
   bbe3a:	f04f 0e14 	mov.w	lr, #20
   bbe3e:	fb0e 6c03 	mla	ip, lr, r3, r6
   bbe42:	2700      	movs	r7, #0
    for (const auto& uuid : foundUuids) {
   bbe44:	45b4      	cmp	ip, r6
   bbe46:	d00d      	beq.n	bbe64 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
   bbe48:	45b9      	cmp	r9, r7
   bbe4a:	f106 0614 	add.w	r6, r6, #20
   bbe4e:	d009      	beq.n	bbe64 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
   bbe50:	f1a6 0514 	sub.w	r5, r6, #20
   bbe54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bbe56:	fb0e 8407 	mla	r4, lr, r7, r8
   bbe5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bbe5c:	682b      	ldr	r3, [r5, #0]
   bbe5e:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
   bbe60:	3701      	adds	r7, #1
   bbe62:	e7ef      	b.n	bbe44 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bbe64:	a801      	add	r0, sp, #4
   bbe66:	f7ff f907 	bl	bb078 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   bbe6a:	4638      	mov	r0, r7
   bbe6c:	b005      	add	sp, #20
   bbe6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bbe72 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   bbe72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbe76:	b08b      	sub	sp, #44	; 0x2c
   bbe78:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   bbe7a:	f100 0144 	add.w	r1, r0, #68	; 0x44
   bbe7e:	a801      	add	r0, sp, #4
   bbe80:	f7ff fe8a 	bl	bbb98 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   bbe84:	9b02      	ldr	r3, [sp, #8]
   bbe86:	2b00      	cmp	r3, #0
   bbe88:	dd4a      	ble.n	bbf20 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   bbe8a:	f104 0114 	add.w	r1, r4, #20
   bbe8e:	a804      	add	r0, sp, #16
   bbe90:	f7ff ff82 	bl	bbd98 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   bbe94:	f104 0108 	add.w	r1, r4, #8
   bbe98:	a807      	add	r0, sp, #28
   bbe9a:	f7ff ff7d 	bl	bbd98 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   bbe9e:	9d05      	ldr	r5, [sp, #20]
   bbea0:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   bbea2:	2d00      	cmp	r5, #0
   bbea4:	dc01      	bgt.n	bbeaa <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   bbea6:	2e00      	cmp	r6, #0
   bbea8:	dd38      	ble.n	bbf1c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   bbeaa:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   bbeac:	9f02      	ldr	r7, [sp, #8]
    return data_;
   bbeae:	f8dd 8010 	ldr.w	r8, [sp, #16]
   bbeb2:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   bbeb6:	2314      	movs	r3, #20
   bbeb8:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   bbebc:	fb03 8505 	mla	r5, r3, r5, r8
   bbec0:	fb03 9606 	mla	r6, r3, r6, r9
   bbec4:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   bbec6:	45ba      	cmp	sl, r7
   bbec8:	d028      	beq.n	bbf1c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   bbeca:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   bbecc:	45ab      	cmp	fp, r5
   bbece:	d015      	beq.n	bbefc <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   bbed0:	4659      	mov	r1, fp
   bbed2:	4650      	mov	r0, sl
   bbed4:	f7fe fcc9 	bl	ba86a <_ZNK8particle7BleUuideqERKS0_>
   bbed8:	f10b 0b14 	add.w	fp, fp, #20
   bbedc:	4604      	mov	r4, r0
   bbede:	2800      	cmp	r0, #0
   bbee0:	d0f4      	beq.n	bbecc <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   bbee2:	a807      	add	r0, sp, #28
   bbee4:	f7ff f8c8 	bl	bb078 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   bbee8:	a804      	add	r0, sp, #16
   bbeea:	f7ff f8c5 	bl	bb078 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   bbeee:	a801      	add	r0, sp, #4
   bbef0:	f7ff f8c2 	bl	bb078 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   bbef4:	4620      	mov	r0, r4
   bbef6:	b00b      	add	sp, #44	; 0x2c
   bbef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbefc:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   bbefe:	45b3      	cmp	fp, r6
   bbf00:	d009      	beq.n	bbf16 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   bbf02:	4659      	mov	r1, fp
   bbf04:	4650      	mov	r0, sl
   bbf06:	f7fe fcb0 	bl	ba86a <_ZNK8particle7BleUuideqERKS0_>
   bbf0a:	f10b 0b14 	add.w	fp, fp, #20
   bbf0e:	4604      	mov	r4, r0
   bbf10:	2800      	cmp	r0, #0
   bbf12:	d0f4      	beq.n	bbefe <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   bbf14:	e7e5      	b.n	bbee2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   bbf16:	f10a 0a14 	add.w	sl, sl, #20
   bbf1a:	e7d4      	b.n	bbec6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   bbf1c:	2400      	movs	r4, #0
   bbf1e:	e7e0      	b.n	bbee2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   bbf20:	2401      	movs	r4, #1
   bbf22:	e7e4      	b.n	bbeee <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000bbf24 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   bbf24:	b513      	push	{r0, r1, r4, lr}
   bbf26:	460b      	mov	r3, r1
   bbf28:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbf2a:	e9d0 0100 	ldrd	r0, r1, [r0]
   bbf2e:	466c      	mov	r4, sp
   bbf30:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   bbf34:	e893 0003 	ldmia.w	r3, {r0, r1}
   bbf38:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   bbf3c:	e894 0003 	ldmia.w	r4, {r0, r1}
   bbf40:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   bbf44:	b002      	add	sp, #8
   bbf46:	bd10      	pop	{r4, pc}

000bbf48 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   bbf48:	b538      	push	{r3, r4, r5, lr}
   bbf4a:	4605      	mov	r5, r0
   bbf4c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   bbf4e:	f7ff ffe9 	bl	bbf24 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbf52:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   bbf54:	68a2      	ldr	r2, [r4, #8]
   bbf56:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bbf58:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bbf5a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   bbf5c:	68e2      	ldr	r2, [r4, #12]
   bbf5e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bbf60:	60e3      	str	r3, [r4, #12]
      }
   bbf62:	bd38      	pop	{r3, r4, r5, pc}

000bbf64 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   bbf64:	b530      	push	{r4, r5, lr}
   bbf66:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   bbf68:	2300      	movs	r3, #0
   bbf6a:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   bbf6c:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   bbf6e:	4605      	mov	r5, r0
   bbf70:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   bbf72:	b133      	cbz	r3, bbf82 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bbf74:	2202      	movs	r2, #2
   bbf76:	4668      	mov	r0, sp
   bbf78:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bbf7a:	68e3      	ldr	r3, [r4, #12]
   bbf7c:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   bbf7e:	68a3      	ldr	r3, [r4, #8]
   bbf80:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   bbf82:	4629      	mov	r1, r5
   bbf84:	4668      	mov	r0, sp
   bbf86:	f7ff ffdf 	bl	bbf48 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bbf8a:	4668      	mov	r0, sp
   bbf8c:	f7f8 fabe 	bl	b450c <_ZNSt14_Function_baseD1Ev>
      }
   bbf90:	b005      	add	sp, #20
   bbf92:	bd30      	pop	{r4, r5, pc}

000bbf94 <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   bbf94:	b538      	push	{r3, r4, r5, lr}
   bbf96:	460d      	mov	r5, r1
   bbf98:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   bbf9a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   bbf9c:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   bbf9e:	b123      	cbz	r3, bbfaa <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   bbfa0:	6828      	ldr	r0, [r5, #0]
   bbfa2:	314c      	adds	r1, #76	; 0x4c
   bbfa4:	304c      	adds	r0, #76	; 0x4c
   bbfa6:	f7ff ffdd 	bl	bbf64 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bbfaa:	4620      	mov	r0, r4
   bbfac:	682b      	ldr	r3, [r5, #0]
   bbfae:	f840 3b04 	str.w	r3, [r0], #4
   bbfb2:	6869      	ldr	r1, [r5, #4]
   bbfb4:	f7fe fb92 	bl	ba6dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   bbfb8:	4620      	mov	r0, r4
   bbfba:	bd38      	pop	{r3, r4, r5, pc}

000bbfbc <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   bbfbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bbfc0:	4604      	mov	r4, r0
   bbfc2:	b087      	sub	sp, #28
    WiringBleLock lk;
   bbfc4:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   bbfc6:	460e      	mov	r6, r1
   bbfc8:	4617      	mov	r7, r2
    WiringBleLock lk;
   bbfca:	f7fe fbad 	bl	ba728 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bbfce:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   bbfd0:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   bbfd4:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   bbfd8:	4544      	cmp	r4, r8
   bbfda:	46a1      	mov	r9, r4
   bbfdc:	d016      	beq.n	bc00c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   bbfde:	4621      	mov	r1, r4
   bbfe0:	a801      	add	r0, sp, #4
   bbfe2:	f7fe fe11 	bl	bac08 <_ZNK8particle17BleCharacteristic4UUIDEv>
   bbfe6:	4639      	mov	r1, r7
   bbfe8:	a801      	add	r0, sp, #4
   bbfea:	f7fe fc3e 	bl	ba86a <_ZNK8particle7BleUuideqERKS0_>
   bbfee:	3408      	adds	r4, #8
   bbff0:	4605      	mov	r5, r0
   bbff2:	2800      	cmp	r0, #0
   bbff4:	d0f0      	beq.n	bbfd8 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   bbff6:	4649      	mov	r1, r9
   bbff8:	4630      	mov	r0, r6
   bbffa:	f7ff ffcb 	bl	bbf94 <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   bbffe:	4668      	mov	r0, sp
   bc000:	f7fe fba0 	bl	ba744 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bc004:	4628      	mov	r0, r5
   bc006:	b007      	add	sp, #28
   bc008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   bc00c:	2500      	movs	r5, #0
   bc00e:	e7f6      	b.n	bbffe <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000bc010 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   bc010:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bc012:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   bc014:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bc016:	344c      	adds	r4, #76	; 0x4c
   bc018:	b1b9      	cbz	r1, bc04a <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   bc01a:	e9cd 1200 	strd	r1, r2, [sp]
   bc01e:	a802      	add	r0, sp, #8
   bc020:	4669      	mov	r1, sp
   bc022:	f7ff f889 	bl	bb138 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   bc026:	2300      	movs	r3, #0
	__x.swap(*this);
   bc028:	a906      	add	r1, sp, #24
   bc02a:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   bc02c:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   bc02e:	f7ff ff8b 	bl	bbf48 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   bc032:	4621      	mov	r1, r4
   bc034:	a806      	add	r0, sp, #24
   bc036:	f7ff ff87 	bl	bbf48 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bc03a:	a806      	add	r0, sp, #24
   bc03c:	f7f8 fa66 	bl	b450c <_ZNSt14_Function_baseD1Ev>
   bc040:	a802      	add	r0, sp, #8
   bc042:	f7f8 fa63 	bl	b450c <_ZNSt14_Function_baseD1Ev>
}
   bc046:	b00a      	add	sp, #40	; 0x28
   bc048:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   bc04a:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   bc04c:	e7eb      	b.n	bc026 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000bc04e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bc04e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bc050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc052:	4604      	mov	r4, r0
   bc054:	460d      	mov	r5, r1
   bc056:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bc058:	d914      	bls.n	bc084 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bc05a:	4290      	cmp	r0, r2
   bc05c:	d213      	bcs.n	bc086 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bc05e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bc062:	1a75      	subs	r5, r6, r1
   bc064:	f1a1 0708 	sub.w	r7, r1, #8
   bc068:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bc06a:	42b7      	cmp	r7, r6
   bc06c:	d018      	beq.n	bc0a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bc06e:	b11c      	cbz	r4, bc078 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bc070:	4631      	mov	r1, r6
   bc072:	4620      	mov	r0, r4
   bc074:	f7ff f88d 	bl	bb192 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   bc078:	1d30      	adds	r0, r6, #4
   bc07a:	f7ff f89e 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bc07e:	3e08      	subs	r6, #8
   bc080:	3c08      	subs	r4, #8
   bc082:	e7f2      	b.n	bc06a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bc084:	d00c      	beq.n	bc0a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bc086:	42b5      	cmp	r5, r6
   bc088:	d00a      	beq.n	bc0a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bc08a:	b11c      	cbz	r4, bc094 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bc08c:	4629      	mov	r1, r5
   bc08e:	4620      	mov	r0, r4
   bc090:	f7ff f87f 	bl	bb192 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bc094:	1d28      	adds	r0, r5, #4
   bc096:	f7ff f890 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bc09a:	3508      	adds	r5, #8
   bc09c:	3408      	adds	r4, #8
   bc09e:	e7f2      	b.n	bc086 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bc0a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc0a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bc0a2:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bc0a4:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bc0a6:	4605      	mov	r5, r0
        if (n > 0) {
   bc0a8:	dd11      	ble.n	bc0ce <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bc0aa:	00f0      	lsls	r0, r6, #3
   bc0ac:	f7fe f99c 	bl	ba3e8 <malloc>
            if (!d) {
   bc0b0:	4604      	mov	r4, r0
   bc0b2:	b158      	cbz	r0, bc0cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bc0b4:	e9d5 1200 	ldrd	r1, r2, [r5]
   bc0b8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bc0bc:	f7ff ffc7 	bl	bc04e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bc0c0:	6828      	ldr	r0, [r5, #0]
   bc0c2:	f7fe f999 	bl	ba3f8 <free>
        data_ = d;
   bc0c6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bc0c8:	60ae      	str	r6, [r5, #8]
        return true;
   bc0ca:	2001      	movs	r0, #1
    }
   bc0cc:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bc0ce:	2400      	movs	r4, #0
   bc0d0:	e7f6      	b.n	bc0c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bc0d2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bc0d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   bc0d6:	2300      	movs	r3, #0
   bc0d8:	e9c0 3300 	strd	r3, r3, [r0]
   bc0dc:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bc0de:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bc0e0:	6849      	ldr	r1, [r1, #4]
   bc0e2:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bc0e4:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bc0e6:	dd13      	ble.n	bc110 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   bc0e8:	f7ff ffdb 	bl	bc0a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bc0ec:	b180      	cbz	r0, bc110 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bc0ee:	e9d5 6300 	ldrd	r6, r3, [r5]
   bc0f2:	6827      	ldr	r7, [r4, #0]
   bc0f4:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   bc0f8:	45b0      	cmp	r8, r6
   bc0fa:	d007      	beq.n	bc10c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   bc0fc:	b11f      	cbz	r7, bc106 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   bc0fe:	4631      	mov	r1, r6
   bc100:	4638      	mov	r0, r7
   bc102:	f7ff f846 	bl	bb192 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   bc106:	3608      	adds	r6, #8
   bc108:	3708      	adds	r7, #8
   bc10a:	e7f5      	b.n	bc0f8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   bc10c:	686b      	ldr	r3, [r5, #4]
   bc10e:	6063      	str	r3, [r4, #4]
}
   bc110:	4620      	mov	r0, r4
   bc112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bc116 <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   bc116:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc118:	460d      	mov	r5, r1
   bc11a:	4604      	mov	r4, r0
    WiringBleLock lk;
   bc11c:	a801      	add	r0, sp, #4
   bc11e:	f7fe fb03 	bl	ba728 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   bc122:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   bc124:	4620      	mov	r0, r4
   bc126:	310c      	adds	r1, #12
   bc128:	f7ff ffd3 	bl	bc0d2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   bc12c:	a801      	add	r0, sp, #4
   bc12e:	f7fe fb09 	bl	ba744 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bc132:	4620      	mov	r0, r4
   bc134:	b003      	add	sp, #12
   bc136:	bd30      	pop	{r4, r5, pc}

000bc138 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   bc138:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   bc13a:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bc13c:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   bc13e:	4605      	mov	r5, r0
   bc140:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   bc142:	b933      	cbnz	r3, bc152 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   bc144:	4608      	mov	r0, r1
   bc146:	f7fe fa83 	bl	ba650 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   bc14a:	b910      	cbnz	r0, bc152 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   bc14c:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   bc14e:	2201      	movs	r2, #1
   bc150:	729a      	strb	r2, [r3, #10]
    return services();
   bc152:	4628      	mov	r0, r5
   bc154:	4621      	mov	r1, r4
   bc156:	f7ff ffde 	bl	bc116 <_ZNK8particle13BlePeerDevice8servicesEv>
}
   bc15a:	4628      	mov	r0, r5
   bc15c:	bd38      	pop	{r3, r4, r5, pc}

000bc15e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bc15e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bc160:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bc162:	6845      	ldr	r5, [r0, #4]
   bc164:	4668      	mov	r0, sp
   bc166:	f7ff f814 	bl	bb192 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc16a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bc16e:	4299      	cmp	r1, r3
   bc170:	da10      	bge.n	bc194 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bc172:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bc174:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bc176:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bc17a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bc17e:	4629      	mov	r1, r5
   bc180:	f105 0008 	add.w	r0, r5, #8
   bc184:	f7ff ff63 	bl	bc04e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bc188:	b98d      	cbnz	r5, bc1ae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bc18a:	6863      	ldr	r3, [r4, #4]
   bc18c:	3301      	adds	r3, #1
   bc18e:	6063      	str	r3, [r4, #4]
    return true;
   bc190:	2601      	movs	r6, #1
   bc192:	e006      	b.n	bc1a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc194:	3101      	adds	r1, #1
   bc196:	4620      	mov	r0, r4
   bc198:	f7ff ff83 	bl	bc0a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bc19c:	4606      	mov	r6, r0
   bc19e:	2800      	cmp	r0, #0
   bc1a0:	d1e7      	bne.n	bc172 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   bc1a2:	a801      	add	r0, sp, #4
   bc1a4:	f7ff f809 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bc1a8:	4630      	mov	r0, r6
   bc1aa:	b002      	add	sp, #8
   bc1ac:	bd70      	pop	{r4, r5, r6, pc}
   bc1ae:	4669      	mov	r1, sp
   bc1b0:	4628      	mov	r0, r5
   bc1b2:	f7fe ffee 	bl	bb192 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bc1b6:	e7e8      	b.n	bc18a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bc1b8 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   bc1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   bc1bc:	f8df 90b8 	ldr.w	r9, [pc, #184]	; bc278 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   bc1c0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; bc27c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   bc1c4:	b093      	sub	sp, #76	; 0x4c
   bc1c6:	4605      	mov	r5, r0
   bc1c8:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   bc1ca:	2700      	movs	r7, #0
   bc1cc:	682b      	ldr	r3, [r5, #0]
   bc1ce:	42bb      	cmp	r3, r7
   bc1d0:	d94e      	bls.n	bc270 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   bc1d2:	a803      	add	r0, sp, #12
   bc1d4:	f7fe fdbe 	bl	bad54 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   bc1d8:	261c      	movs	r6, #28
   bc1da:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   bc1dc:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   bc1de:	437e      	muls	r6, r7
   bc1e0:	4432      	add	r2, r6
   bc1e2:	f10d 0c14 	add.w	ip, sp, #20
   bc1e6:	1d13      	adds	r3, r2, #4
   bc1e8:	46e3      	mov	fp, ip
   bc1ea:	3214      	adds	r2, #20
   bc1ec:	6818      	ldr	r0, [r3, #0]
   bc1ee:	6859      	ldr	r1, [r3, #4]
   bc1f0:	46e6      	mov	lr, ip
   bc1f2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   bc1f6:	3308      	adds	r3, #8
   bc1f8:	4293      	cmp	r3, r2
   bc1fa:	46f4      	mov	ip, lr
   bc1fc:	d1f6      	bne.n	bc1ec <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   bc1fe:	6818      	ldr	r0, [r3, #0]
   bc200:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   bc204:	4659      	mov	r1, fp
   bc206:	a80a      	add	r0, sp, #40	; 0x28
   bc208:	f7fe fae4 	bl	ba7d4 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   bc20c:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   bc210:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bc214:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc216:	f8dc 3000 	ldr.w	r3, [ip]
   bc21a:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   bc21c:	686b      	ldr	r3, [r5, #4]
   bc21e:	9a03      	ldr	r2, [sp, #12]
   bc220:	4433      	add	r3, r6
   bc222:	a903      	add	r1, sp, #12
   bc224:	8b1b      	ldrh	r3, [r3, #24]
   bc226:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   bc228:	686b      	ldr	r3, [r5, #4]
   bc22a:	4433      	add	r3, r6
   bc22c:	8b5b      	ldrh	r3, [r3, #26]
   bc22e:	82d3      	strh	r3, [r2, #22]
        return services_;
   bc230:	f8d8 0000 	ldr.w	r0, [r8]
   bc234:	f100 040c 	add.w	r4, r0, #12
   bc238:	a80a      	add	r0, sp, #40	; 0x28
   bc23a:	f7fe ffaa 	bl	bb192 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   bc23e:	4620      	mov	r0, r4
   bc240:	a90a      	add	r1, sp, #40	; 0x28
   bc242:	f7ff ff8c 	bl	bc15e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   bc246:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bc248:	a80b      	add	r0, sp, #44	; 0x2c
   bc24a:	f7fe ffb6 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc24e:	b954      	cbnz	r4, bc266 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   bc250:	2320      	movs	r3, #32
   bc252:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   bc256:	f8cd 9000 	str.w	r9, [sp]
   bc25a:	4623      	mov	r3, r4
   bc25c:	aa0a      	add	r2, sp, #40	; 0x28
   bc25e:	4651      	mov	r1, sl
   bc260:	2032      	movs	r0, #50	; 0x32
   bc262:	f7fd ffd5 	bl	ba210 <log_message>
   bc266:	a804      	add	r0, sp, #16
   bc268:	f7fe ffa7 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   bc26c:	3701      	adds	r7, #1
   bc26e:	e7ad      	b.n	bc1cc <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   bc270:	b013      	add	sp, #76	; 0x4c
   bc272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc276:	bf00      	nop
   bc278:	000c22e5 	.word	0x000c22e5
   bc27c:	000c21e7 	.word	0x000c21e7

000bc280 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bc280:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bc282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc284:	4604      	mov	r4, r0
   bc286:	460d      	mov	r5, r1
   bc288:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bc28a:	d914      	bls.n	bc2b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bc28c:	4290      	cmp	r0, r2
   bc28e:	d213      	bcs.n	bc2b8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bc290:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bc294:	1a75      	subs	r5, r6, r1
   bc296:	f1a1 0708 	sub.w	r7, r1, #8
   bc29a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bc29c:	42b7      	cmp	r7, r6
   bc29e:	d018      	beq.n	bc2d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bc2a0:	b11c      	cbz	r4, bc2aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bc2a2:	4631      	mov	r1, r6
   bc2a4:	4620      	mov	r0, r4
   bc2a6:	f7fe ff66 	bl	bb176 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bc2aa:	1d30      	adds	r0, r6, #4
   bc2ac:	f7fe ff85 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bc2b0:	3e08      	subs	r6, #8
   bc2b2:	3c08      	subs	r4, #8
   bc2b4:	e7f2      	b.n	bc29c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bc2b6:	d00c      	beq.n	bc2d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bc2b8:	42b5      	cmp	r5, r6
   bc2ba:	d00a      	beq.n	bc2d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bc2bc:	b11c      	cbz	r4, bc2c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bc2be:	4629      	mov	r1, r5
   bc2c0:	4620      	mov	r0, r4
   bc2c2:	f7fe ff58 	bl	bb176 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bc2c6:	1d28      	adds	r0, r5, #4
   bc2c8:	f7fe ff77 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bc2cc:	3508      	adds	r5, #8
   bc2ce:	3408      	adds	r4, #8
   bc2d0:	e7f2      	b.n	bc2b8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bc2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc2d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bc2d4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bc2d6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bc2d8:	4605      	mov	r5, r0
        if (n > 0) {
   bc2da:	dd11      	ble.n	bc300 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bc2dc:	00f0      	lsls	r0, r6, #3
   bc2de:	f7fe f883 	bl	ba3e8 <malloc>
            if (!d) {
   bc2e2:	4604      	mov	r4, r0
   bc2e4:	b158      	cbz	r0, bc2fe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bc2e6:	e9d5 1200 	ldrd	r1, r2, [r5]
   bc2ea:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bc2ee:	f7ff ffc7 	bl	bc280 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bc2f2:	6828      	ldr	r0, [r5, #0]
   bc2f4:	f7fe f880 	bl	ba3f8 <free>
        data_ = d;
   bc2f8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bc2fa:	60ae      	str	r6, [r5, #8]
        return true;
   bc2fc:	2001      	movs	r0, #1
    }
   bc2fe:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bc300:	2400      	movs	r4, #0
   bc302:	e7f6      	b.n	bc2f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bc304 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bc304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   bc308:	2300      	movs	r3, #0
   bc30a:	e9c0 3300 	strd	r3, r3, [r0]
   bc30e:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bc310:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bc312:	6849      	ldr	r1, [r1, #4]
   bc314:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bc316:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bc318:	dd13      	ble.n	bc342 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   bc31a:	f7ff ffdb 	bl	bc2d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bc31e:	b180      	cbz	r0, bc342 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bc320:	e9d5 6300 	ldrd	r6, r3, [r5]
   bc324:	6827      	ldr	r7, [r4, #0]
   bc326:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   bc32a:	45b0      	cmp	r8, r6
   bc32c:	d007      	beq.n	bc33e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   bc32e:	b11f      	cbz	r7, bc338 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   bc330:	4631      	mov	r1, r6
   bc332:	4638      	mov	r0, r7
   bc334:	f7fe ff1f 	bl	bb176 <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   bc338:	3608      	adds	r6, #8
   bc33a:	3708      	adds	r7, #8
   bc33c:	e7f5      	b.n	bc32a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   bc33e:	686b      	ldr	r3, [r5, #4]
   bc340:	6063      	str	r3, [r4, #4]
}
   bc342:	4620      	mov	r0, r4
   bc344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bc348 <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   bc348:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc34a:	460d      	mov	r5, r1
   bc34c:	4604      	mov	r4, r0
    WiringBleLock lk;
   bc34e:	a801      	add	r0, sp, #4
   bc350:	f7fe f9ea 	bl	ba728 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   bc354:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   bc356:	4620      	mov	r0, r4
   bc358:	3118      	adds	r1, #24
   bc35a:	f7ff ffd3 	bl	bc304 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   bc35e:	a801      	add	r0, sp, #4
   bc360:	f7fe f9f0 	bl	ba744 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bc364:	4620      	mov	r0, r4
   bc366:	b003      	add	sp, #12
   bc368:	bd30      	pop	{r4, r5, pc}

000bc36a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bc36a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bc36c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bc36e:	6845      	ldr	r5, [r0, #4]
   bc370:	4668      	mov	r0, sp
   bc372:	f7fe ff00 	bl	bb176 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc376:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bc37a:	4299      	cmp	r1, r3
   bc37c:	da10      	bge.n	bc3a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bc37e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bc380:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bc382:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bc386:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bc38a:	4629      	mov	r1, r5
   bc38c:	f105 0008 	add.w	r0, r5, #8
   bc390:	f7ff ff76 	bl	bc280 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bc394:	b98d      	cbnz	r5, bc3ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bc396:	6863      	ldr	r3, [r4, #4]
   bc398:	3301      	adds	r3, #1
   bc39a:	6063      	str	r3, [r4, #4]
    return true;
   bc39c:	2601      	movs	r6, #1
   bc39e:	e006      	b.n	bc3ae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc3a0:	3101      	adds	r1, #1
   bc3a2:	4620      	mov	r0, r4
   bc3a4:	f7ff ff96 	bl	bc2d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bc3a8:	4606      	mov	r6, r0
   bc3aa:	2800      	cmp	r0, #0
   bc3ac:	d1e7      	bne.n	bc37e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bc3ae:	a801      	add	r0, sp, #4
   bc3b0:	f7fe ff03 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bc3b4:	4630      	mov	r0, r6
   bc3b6:	b002      	add	sp, #8
   bc3b8:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bc3ba:	4669      	mov	r1, sp
   bc3bc:	4628      	mov	r0, r5
   bc3be:	f7fe feda 	bl	bb176 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bc3c2:	e7e8      	b.n	bc396 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bc3c4 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   bc3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc3c6:	b085      	sub	sp, #20
   bc3c8:	4605      	mov	r5, r0
    WiringBleLock lk;
   bc3ca:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   bc3cc:	460c      	mov	r4, r1
   bc3ce:	4617      	mov	r7, r2
    WiringBleLock lk;
   bc3d0:	f7fe f9aa 	bl	ba728 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   bc3d4:	2300      	movs	r3, #0
   bc3d6:	e9c5 3300 	strd	r3, r3, [r5]
   bc3da:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   bc3dc:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   bc3de:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   bc3e2:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   bc3e6:	42b4      	cmp	r4, r6
   bc3e8:	d011      	beq.n	bc40e <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   bc3ea:	6838      	ldr	r0, [r7, #0]
   bc3ec:	4621      	mov	r1, r4
   bc3ee:	f7fe fbcb 	bl	bab88 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   bc3f2:	b150      	cbz	r0, bc40a <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   bc3f4:	4621      	mov	r1, r4
   bc3f6:	a802      	add	r0, sp, #8
   bc3f8:	f7fe febd 	bl	bb176 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bc3fc:	a902      	add	r1, sp, #8
   bc3fe:	4628      	mov	r0, r5
   bc400:	f7ff ffb3 	bl	bc36a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   bc404:	a803      	add	r0, sp, #12
   bc406:	f7fe fed8 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   bc40a:	3408      	adds	r4, #8
   bc40c:	e7eb      	b.n	bc3e6 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   bc40e:	a801      	add	r0, sp, #4
   bc410:	f7fe f998 	bl	ba744 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bc414:	4628      	mov	r0, r5
   bc416:	b005      	add	sp, #20
   bc418:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bc41c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   bc41c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   bc420:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bc422:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   bc424:	b091      	sub	sp, #68	; 0x44
   bc426:	4606      	mov	r6, r0
   bc428:	460f      	mov	r7, r1
   bc42a:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   bc42c:	b933      	cbnz	r3, bc43c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   bc42e:	e9c0 3300 	strd	r3, r3, [r0]
   bc432:	6083      	str	r3, [r0, #8]
}
   bc434:	4630      	mov	r0, r6
   bc436:	b011      	add	sp, #68	; 0x44
   bc438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   bc43c:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   bc43e:	7e0d      	ldrb	r5, [r1, #24]
   bc440:	2d00      	cmp	r5, #0
   bc442:	d158      	bne.n	bc4f6 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   bc444:	2320      	movs	r3, #32
   bc446:	462a      	mov	r2, r5
   bc448:	a803      	add	r0, sp, #12
   bc44a:	e9cd 3508 	strd	r3, r5, [sp, #32]
   bc44e:	f7fe fb08 	bl	baa62 <_ZNK8particle7BleUuid8toStringEb>
   bc452:	9b03      	ldr	r3, [sp, #12]
   bc454:	9301      	str	r3, [sp, #4]
   bc456:	4b2b      	ldr	r3, [pc, #172]	; (bc504 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   bc458:	492b      	ldr	r1, [pc, #172]	; (bc508 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   bc45a:	9300      	str	r3, [sp, #0]
   bc45c:	aa08      	add	r2, sp, #32
   bc45e:	462b      	mov	r3, r5
   bc460:	2001      	movs	r0, #1
   bc462:	f7fd fed5 	bl	ba210 <log_message>
   bc466:	a803      	add	r0, sp, #12
   bc468:	f001 f9d6 	bl	bd818 <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   bc46c:	231c      	movs	r3, #28
   bc46e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   bc472:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   bc476:	8a9a      	ldrh	r2, [r3, #20]
   bc478:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   bc47c:	8adb      	ldrh	r3, [r3, #22]
   bc47e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   bc482:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   bc484:	4a21      	ldr	r2, [pc, #132]	; (bc50c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   bc486:	8818      	ldrh	r0, [r3, #0]
   bc488:	9500      	str	r5, [sp, #0]
   bc48a:	a908      	add	r1, sp, #32
   bc48c:	f7fd fc5e 	bl	b9d4c <hal_ble_gatt_client_discover_characteristics>
   bc490:	2800      	cmp	r0, #0
   bc492:	db30      	blt.n	bc4f6 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   bc494:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   bc496:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   bc49a:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   bc49e:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   bc4a0:	f1a4 0308 	sub.w	r3, r4, #8
   bc4a4:	4599      	cmp	r9, r3
   bc4a6:	d022      	beq.n	bc4ee <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   bc4a8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bc4ac:	89db      	ldrh	r3, [r3, #14]
   bc4ae:	2b00      	cmp	r3, #0
   bc4b0:	d0f5      	beq.n	bc49e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   bc4b2:	2210      	movs	r2, #16
   bc4b4:	2100      	movs	r1, #0
   bc4b6:	eb0d 0002 	add.w	r0, sp, r2
   bc4ba:	9503      	str	r5, [sp, #12]
   bc4bc:	f002 fd23 	bl	bef06 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   bc4c0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bc4c4:	89d9      	ldrh	r1, [r3, #14]
   bc4c6:	683b      	ldr	r3, [r7, #0]
   bc4c8:	aa03      	add	r2, sp, #12
   bc4ca:	8818      	ldrh	r0, [r3, #0]
   bc4cc:	9500      	str	r5, [sp, #0]
   bc4ce:	2313      	movs	r3, #19
   bc4d0:	f7fd fc5a 	bl	b9d88 <hal_ble_gatt_client_read>
                if (len > 0) {
   bc4d4:	2800      	cmp	r0, #0
   bc4d6:	d0e2      	beq.n	bc49e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   bc4d8:	ab10      	add	r3, sp, #64	; 0x40
   bc4da:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   bc4dc:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   bc4de:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   bc4e2:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   bc4e6:	303c      	adds	r0, #60	; 0x3c
   bc4e8:	f001 fa37 	bl	bd95a <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   bc4ec:	e7d7      	b.n	bc49e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   bc4ee:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   bc4f2:	2201      	movs	r2, #1
   bc4f4:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   bc4f6:	4642      	mov	r2, r8
   bc4f8:	4639      	mov	r1, r7
   bc4fa:	4630      	mov	r0, r6
   bc4fc:	f7ff ff62 	bl	bc3c4 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   bc500:	e798      	b.n	bc434 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   bc502:	bf00      	nop
   bc504:	000c230a 	.word	0x000c230a
   bc508:	000c21e7 	.word	0x000c21e7
   bc50c:	000bc6b5 	.word	0x000bc6b5

000bc510 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   bc510:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   bc512:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bc514:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   bc516:	b085      	sub	sp, #20
   bc518:	4606      	mov	r6, r0
   bc51a:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   bc51c:	b92b      	cbnz	r3, bc52a <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   bc51e:	a801      	add	r0, sp, #4
   bc520:	f7ff fe0a 	bl	bc138 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   bc524:	a801      	add	r0, sp, #4
   bc526:	f7fe fe57 	bl	bb1d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   bc52a:	682b      	ldr	r3, [r5, #0]
   bc52c:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   bc530:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   bc534:	42bc      	cmp	r4, r7
   bc536:	d009      	beq.n	bc54c <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   bc538:	4622      	mov	r2, r4
   bc53a:	4629      	mov	r1, r5
   bc53c:	a801      	add	r0, sp, #4
   bc53e:	f7ff ff6d 	bl	bc41c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   bc542:	a801      	add	r0, sp, #4
   bc544:	f7fe fe5a 	bl	bb1fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   bc548:	3408      	adds	r4, #8
   bc54a:	e7f3      	b.n	bc534 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   bc54c:	4630      	mov	r0, r6
   bc54e:	4629      	mov	r1, r5
   bc550:	f7ff fefa 	bl	bc348 <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   bc554:	4630      	mov	r0, r6
   bc556:	b005      	add	sp, #20
   bc558:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bc55c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bc55c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc560:	4605      	mov	r5, r0
   bc562:	b093      	sub	sp, #76	; 0x4c
    return address_;
   bc564:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   bc566:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bc568:	460f      	mov	r7, r1
    return address_;
   bc56a:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bc56c:	4698      	mov	r8, r3
    return address_;
   bc56e:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   bc570:	4b41      	ldr	r3, [pc, #260]	; (bc678 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   bc572:	9304      	str	r3, [sp, #16]
    return address_;
   bc574:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   bc576:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   bc578:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   bc57c:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   bc580:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   bc584:	f7fe fcb2 	bl	baeec <_ZN8particle14BleLocalDevice11getInstanceEv>
   bc588:	4b3c      	ldr	r3, [pc, #240]	; (bc67c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   bc58a:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   bc58c:	f7fe fcae 	bl	baeec <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   bc590:	6829      	ldr	r1, [r5, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   bc592:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   bc594:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   bc596:	464a      	mov	r2, r9
   bc598:	a804      	add	r0, sp, #16
   bc59a:	f7fd fbff 	bl	b9d9c <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   bc59e:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   bc5a0:	4604      	mov	r4, r0
   bc5a2:	b138      	cbz	r0, bc5b4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   bc5a4:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bc5a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bc5aa:	801a      	strh	r2, [r3, #0]
}
   bc5ac:	4620      	mov	r0, r4
   bc5ae:	b013      	add	sp, #76	; 0x4c
   bc5b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   bc5b4:	4639      	mov	r1, r7
   bc5b6:	4628      	mov	r0, r5
   bc5b8:	f7fe fc1c 	bl	badf4 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
   bc5bc:	a803      	add	r0, sp, #12
   bc5be:	f7fe f8b3 	bl	ba728 <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   bc5c2:	f7fe fc93 	bl	baeec <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   bc5c6:	6807      	ldr	r7, [r0, #0]
   bc5c8:	4629      	mov	r1, r5
   bc5ca:	3718      	adds	r7, #24
   bc5cc:	4630      	mov	r0, r6
   bc5ce:	f7fe fdea 	bl	bb1a6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   bc5d2:	4631      	mov	r1, r6
   bc5d4:	4638      	mov	r0, r7
   bc5d6:	f7ff f94f 	bl	bb878 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bc5da:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   bc5dc:	a80b      	add	r0, sp, #44	; 0x2c
   bc5de:	f7fe fdec 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc5e2:	f04f 0920 	mov.w	r9, #32
   bc5e6:	bb1f      	cbnz	r7, bc630 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   bc5e8:	4632      	mov	r2, r6
   bc5ea:	4b25      	ldr	r3, [pc, #148]	; (bc680 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
   bc5ec:	4e25      	ldr	r6, [pc, #148]	; (bc684 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   bc5ee:	4926      	ldr	r1, [pc, #152]	; (bc688 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   bc5f0:	9300      	str	r3, [sp, #0]
   bc5f2:	2032      	movs	r0, #50	; 0x32
   bc5f4:	4623      	mov	r3, r4
   bc5f6:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   bc5fa:	f7fd fe09 	bl	ba210 <log_message>
   bc5fe:	6830      	ldr	r0, [r6, #0]
   bc600:	f7fd fc3e 	bl	b9e80 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bc604:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   bc606:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bc60a:	4621      	mov	r1, r4
   bc60c:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   bc60e:	4c1f      	ldr	r4, [pc, #124]	; (bc68c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bc610:	f7fd fb7e 	bl	b9d10 <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   bc614:	6830      	ldr	r0, [r6, #0]
   bc616:	f7fd fc2b 	bl	b9e70 <os_mutex_recursive_lock>
        locked_ = true;
   bc61a:	2301      	movs	r3, #1
   bc61c:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   bc620:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bc622:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bc626:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   bc628:	a803      	add	r0, sp, #12
   bc62a:	f7fe f88b 	bl	ba744 <_ZN8particle3ble13WiringBleLockD1Ev>
   bc62e:	e7bd      	b.n	bc5ac <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   bc630:	a803      	add	r0, sp, #12
   bc632:	f7fe f887 	bl	ba744 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   bc636:	4b16      	ldr	r3, [pc, #88]	; (bc690 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   bc638:	9300      	str	r3, [sp, #0]
   bc63a:	4913      	ldr	r1, [pc, #76]	; (bc688 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   bc63c:	4623      	mov	r3, r4
   bc63e:	4632      	mov	r2, r6
   bc640:	2001      	movs	r0, #1
   bc642:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   bc646:	f7fd fde3 	bl	ba210 <log_message>
    if (automatic) {
   bc64a:	f1b8 0f00 	cmp.w	r8, #0
   bc64e:	d0ad      	beq.n	bc5ac <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   bc650:	4629      	mov	r1, r5
   bc652:	4630      	mov	r0, r6
   bc654:	f7ff ff5c 	bl	bc510 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   bc658:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   bc65c:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   bc660:	42bd      	cmp	r5, r7
   bc662:	d005      	beq.n	bc670 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   bc664:	4628      	mov	r0, r5
   bc666:	2101      	movs	r1, #1
   bc668:	f7fe fb3a 	bl	bace0 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   bc66c:	3508      	adds	r5, #8
   bc66e:	e7f7      	b.n	bc660 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   bc670:	4630      	mov	r0, r6
   bc672:	f7fe fdc3 	bl	bb1fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bc676:	e799      	b.n	bc5ac <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   bc678:	00180003 	.word	0x00180003
   bc67c:	000bb931 	.word	0x000bb931
   bc680:	000c233c 	.word	0x000c233c
   bc684:	2003e65c 	.word	0x2003e65c
   bc688:	000c21e7 	.word	0x000c21e7
   bc68c:	fffffefc 	.word	0xfffffefc
   bc690:	000c2358 	.word	0x000c2358

000bc694 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   bc694:	b513      	push	{r0, r1, r4, lr}
   bc696:	4604      	mov	r4, r0
   bc698:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   bc69c:	f7fe fb76 	bl	bad8c <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   bc6a0:	9b00      	ldr	r3, [sp, #0]
   bc6a2:	9901      	ldr	r1, [sp, #4]
   bc6a4:	2200      	movs	r2, #0
   bc6a6:	4620      	mov	r0, r4
   bc6a8:	f7ff ff58 	bl	bc55c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}
   bc6ac:	4620      	mov	r0, r4
   bc6ae:	b002      	add	sp, #8
   bc6b0:	bd10      	pop	{r4, pc}
	...

000bc6b4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bc6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   bc6b8:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bc6ba:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   bc6bc:	2600      	movs	r6, #0
   bc6be:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   bc6c2:	4b66      	ldr	r3, [pc, #408]	; (bc85c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   bc6c4:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bc6c6:	4605      	mov	r5, r0
   bc6c8:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   bc6ca:	4633      	mov	r3, r6
   bc6cc:	4964      	ldr	r1, [pc, #400]	; (bc860 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   bc6ce:	f8df 9194 	ldr.w	r9, [pc, #404]	; bc864 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   bc6d2:	f8df 818c 	ldr.w	r8, [pc, #396]	; bc860 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bc6d6:	f8df a190 	ldr.w	sl, [pc, #400]	; bc868 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   bc6da:	aa0c      	add	r2, sp, #48	; 0x30
   bc6dc:	2001      	movs	r0, #1
   bc6de:	f7fd fd97 	bl	ba210 <log_message>
        for (size_t i = 0; i < event->count; i++) {
   bc6e2:	682b      	ldr	r3, [r5, #0]
   bc6e4:	42b3      	cmp	r3, r6
   bc6e6:	f240 80b5 	bls.w	bc854 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   bc6ea:	a803      	add	r0, sp, #12
   bc6ec:	f7fe fa72 	bl	babd4 <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   bc6f0:	a805      	add	r0, sp, #20
   bc6f2:	f7fe fb2f 	bl	bad54 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   bc6f6:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   bc6fa:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   bc6fc:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   bc6fe:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   bc702:	445b      	add	r3, fp
        this->size = halHandles.size;
   bc704:	8bd9      	ldrh	r1, [r3, #30]
   bc706:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   bc708:	8c19      	ldrh	r1, [r3, #32]
   bc70a:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   bc70c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   bc70e:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   bc710:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   bc712:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   bc714:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   bc716:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   bc718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   bc71a:	8253      	strh	r3, [r2, #18]
   bc71c:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   bc720:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   bc724:	429a      	cmp	r2, r3
   bc726:	d07d      	beq.n	bc824 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   bc728:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   bc72a:	8ac4      	ldrh	r4, [r0, #22]
   bc72c:	428c      	cmp	r4, r1
   bc72e:	d377      	bcc.n	bc820 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   bc730:	8a84      	ldrh	r4, [r0, #20]
   bc732:	428c      	cmp	r4, r1
   bc734:	d874      	bhi.n	bc820 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bc736:	6859      	ldr	r1, [r3, #4]
   bc738:	9005      	str	r0, [sp, #20]
   bc73a:	a806      	add	r0, sp, #24
   bc73c:	f7fd ffce 	bl	ba6dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   bc740:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   bc744:	f8dd e00c 	ldr.w	lr, [sp, #12]
   bc748:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bc74c:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   bc750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc752:	f8dc 3000 	ldr.w	r3, [ip]
   bc756:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   bc758:	892b      	ldrh	r3, [r5, #8]
   bc75a:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   bc75e:	686b      	ldr	r3, [r5, #4]
   bc760:	9c03      	ldr	r4, [sp, #12]
   bc762:	445b      	add	r3, fp
   bc764:	7e5b      	ldrb	r3, [r3, #25]
   bc766:	f013 0f02 	tst.w	r3, #2
   bc76a:	d16e      	bne.n	bc84a <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   bc76c:	686b      	ldr	r3, [r5, #4]
   bc76e:	445b      	add	r3, fp
   bc770:	7e5b      	ldrb	r3, [r3, #25]
   bc772:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   bc774:	bf42      	ittt	mi
   bc776:	7923      	ldrbmi	r3, [r4, #4]
   bc778:	f043 0304 	orrmi.w	r3, r3, #4
   bc77c:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   bc77e:	686b      	ldr	r3, [r5, #4]
   bc780:	445b      	add	r3, fp
   bc782:	7e5b      	ldrb	r3, [r3, #25]
   bc784:	0719      	lsls	r1, r3, #28
   bc786:	bf42      	ittt	mi
   bc788:	7923      	ldrbmi	r3, [r4, #4]
   bc78a:	f043 0308 	orrmi.w	r3, r3, #8
   bc78e:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   bc790:	686b      	ldr	r3, [r5, #4]
   bc792:	445b      	add	r3, fp
   bc794:	7e5b      	ldrb	r3, [r3, #25]
   bc796:	06da      	lsls	r2, r3, #27
   bc798:	bf42      	ittt	mi
   bc79a:	7923      	ldrbmi	r3, [r4, #4]
   bc79c:	f043 0310 	orrmi.w	r3, r3, #16
   bc7a0:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   bc7a2:	686b      	ldr	r3, [r5, #4]
   bc7a4:	445b      	add	r3, fp
   bc7a6:	aa07      	add	r2, sp, #28
   bc7a8:	7e5b      	ldrb	r3, [r3, #25]
   bc7aa:	069b      	lsls	r3, r3, #26
   bc7ac:	bf42      	ittt	mi
   bc7ae:	7923      	ldrbmi	r3, [r4, #4]
   bc7b0:	f043 0320 	orrmi.w	r3, r3, #32
   bc7b4:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   bc7b6:	686b      	ldr	r3, [r5, #4]
   bc7b8:	449b      	add	fp, r3
   bc7ba:	f10b 0304 	add.w	r3, fp, #4
   bc7be:	4696      	mov	lr, r2
   bc7c0:	f10b 0b14 	add.w	fp, fp, #20
   bc7c4:	6818      	ldr	r0, [r3, #0]
   bc7c6:	6859      	ldr	r1, [r3, #4]
   bc7c8:	4694      	mov	ip, r2
   bc7ca:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   bc7ce:	3308      	adds	r3, #8
   bc7d0:	455b      	cmp	r3, fp
   bc7d2:	4662      	mov	r2, ip
   bc7d4:	d1f6      	bne.n	bc7c4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   bc7d6:	6818      	ldr	r0, [r3, #0]
   bc7d8:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   bc7dc:	4671      	mov	r1, lr
   bc7de:	a80c      	add	r0, sp, #48	; 0x30
   bc7e0:	f7fd fff8 	bl	ba7d4 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   bc7e4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   bc7e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bc7ec:	3414      	adds	r4, #20
   bc7ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc7f0:	f8dc 3000 	ldr.w	r3, [ip]
   bc7f4:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   bc7f6:	a903      	add	r1, sp, #12
   bc7f8:	a80c      	add	r0, sp, #48	; 0x30
   bc7fa:	f7fe fcbc 	bl	bb176 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bc7fe:	a90c      	add	r1, sp, #48	; 0x30
   bc800:	f107 0018 	add.w	r0, r7, #24
   bc804:	f7ff fdb1 	bl	bc36a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bc808:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bc80a:	a80d      	add	r0, sp, #52	; 0x34
   bc80c:	f7fe fcd5 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc810:	b99c      	cbnz	r4, bc83a <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bc812:	2320      	movs	r3, #32
   bc814:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   bc818:	f8cd a000 	str.w	sl, [sp]
   bc81c:	4623      	mov	r3, r4
   bc81e:	e007      	b.n	bc830 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   bc820:	3308      	adds	r3, #8
   bc822:	e77f      	b.n	bc724 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   bc824:	2420      	movs	r4, #32
   bc826:	2300      	movs	r3, #0
   bc828:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   bc82c:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bc830:	aa0c      	add	r2, sp, #48	; 0x30
   bc832:	4641      	mov	r1, r8
   bc834:	2032      	movs	r0, #50	; 0x32
   bc836:	f7fd fceb 	bl	ba210 <log_message>
   bc83a:	a806      	add	r0, sp, #24
   bc83c:	f7fe fcbd 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc840:	a804      	add	r0, sp, #16
   bc842:	f7fe fcba 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   bc846:	3601      	adds	r6, #1
   bc848:	e74b      	b.n	bc6e2 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   bc84a:	7923      	ldrb	r3, [r4, #4]
   bc84c:	f043 0302 	orr.w	r3, r3, #2
   bc850:	7123      	strb	r3, [r4, #4]
   bc852:	e78b      	b.n	bc76c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   bc854:	b015      	add	sp, #84	; 0x54
   bc856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc85a:	bf00      	nop
   bc85c:	000c2375 	.word	0x000c2375
   bc860:	000c21e7 	.word	0x000c21e7
   bc864:	000c2390 	.word	0x000c2390
   bc868:	000c23bf 	.word	0x000c23bf

000bc86c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bc86c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bc86e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc870:	4604      	mov	r4, r0
   bc872:	460d      	mov	r5, r1
   bc874:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bc876:	d914      	bls.n	bc8a2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bc878:	4290      	cmp	r0, r2
   bc87a:	d213      	bcs.n	bc8a4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bc87c:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   bc880:	1a75      	subs	r5, r6, r1
   bc882:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   bc886:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bc888:	42b7      	cmp	r7, r6
   bc88a:	d018      	beq.n	bc8be <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bc88c:	b11c      	cbz	r4, bc896 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bc88e:	4631      	mov	r1, r6
   bc890:	4620      	mov	r0, r4
   bc892:	f7fe fed9 	bl	bb648 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   bc896:	4630      	mov	r0, r6
   bc898:	f7fe fb96 	bl	bafc8 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   bc89c:	3e24      	subs	r6, #36	; 0x24
   bc89e:	3c24      	subs	r4, #36	; 0x24
   bc8a0:	e7f2      	b.n	bc888 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bc8a2:	d00c      	beq.n	bc8be <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bc8a4:	42b5      	cmp	r5, r6
   bc8a6:	d00a      	beq.n	bc8be <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bc8a8:	b11c      	cbz	r4, bc8b2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bc8aa:	4629      	mov	r1, r5
   bc8ac:	4620      	mov	r0, r4
   bc8ae:	f7fe fecb 	bl	bb648 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   bc8b2:	4628      	mov	r0, r5
   bc8b4:	f7fe fb88 	bl	bafc8 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   bc8b8:	3524      	adds	r5, #36	; 0x24
   bc8ba:	3424      	adds	r4, #36	; 0x24
   bc8bc:	e7f2      	b.n	bc8a4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bc8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc8c0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bc8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   bc8c2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bc8c4:	4605      	mov	r5, r0
        if (n > 0) {
   bc8c6:	dd13      	ble.n	bc8f0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   bc8c8:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   bc8ca:	fb07 f006 	mul.w	r0, r7, r6
   bc8ce:	f7fd fd8b 	bl	ba3e8 <malloc>
            if (!d) {
   bc8d2:	4604      	mov	r4, r0
   bc8d4:	b158      	cbz	r0, bc8ee <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   bc8d6:	e9d5 1200 	ldrd	r1, r2, [r5]
   bc8da:	fb07 1202 	mla	r2, r7, r2, r1
   bc8de:	f7ff ffc5 	bl	bc86c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bc8e2:	6828      	ldr	r0, [r5, #0]
   bc8e4:	f7fd fd88 	bl	ba3f8 <free>
        data_ = d;
   bc8e8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bc8ea:	60ae      	str	r6, [r5, #8]
        return true;
   bc8ec:	2001      	movs	r0, #1
    }
   bc8ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   bc8f0:	2400      	movs	r4, #0
   bc8f2:	e7f6      	b.n	bc8e2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000bc8f4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   bc8f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc8f8:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   bc8fa:	ad01      	add	r5, sp, #4
   bc8fc:	4606      	mov	r6, r0
   bc8fe:	4628      	mov	r0, r5
   bc900:	460c      	mov	r4, r1
   bc902:	f7fd ff4c 	bl	ba79e <_ZN8particle10BleAddressC1Ev>
   bc906:	a803      	add	r0, sp, #12
   bc908:	f7fe ff79 	bl	bb7fe <_ZN8particle18BleAdvertisingDataC1Ev>
   bc90c:	a806      	add	r0, sp, #24
   bc90e:	f7fe ff76 	bl	bb7fe <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   bc912:	6930      	ldr	r0, [r6, #16]
   bc914:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   bc916:	89f2      	ldrh	r2, [r6, #14]
   bc918:	ab13      	add	r3, sp, #76	; 0x4c
   bc91a:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   bc91c:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   bc920:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   bc922:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   bc924:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   bc928:	a806      	add	r0, sp, #24
   bc92a:	f7fe fedc 	bl	bb6e6 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   bc92e:	89b2      	ldrh	r2, [r6, #12]
   bc930:	6871      	ldr	r1, [r6, #4]
   bc932:	a803      	add	r0, sp, #12
   bc934:	f7fe fed7 	bl	bb6e6 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   bc938:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   bc93c:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   bc93e:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   bc940:	d003      	beq.n	bc94a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   bc942:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   bc946:	429a      	cmp	r2, r3
   bc948:	db5c      	blt.n	bca04 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   bc94a:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   bc94e:	2b7f      	cmp	r3, #127	; 0x7f
   bc950:	d003      	beq.n	bc95a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   bc952:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   bc956:	429a      	cmp	r2, r3
   bc958:	dc54      	bgt.n	bca04 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   bc95a:	f104 0150 	add.w	r1, r4, #80	; 0x50
   bc95e:	4638      	mov	r0, r7
   bc960:	f7fe fd3a 	bl	bb3d8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   bc964:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   bc966:	2b00      	cmp	r3, #0
   bc968:	dd52      	ble.n	bca10 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   bc96a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   bc96c:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   bc970:	45b1      	cmp	r9, r6
   bc972:	d050      	beq.n	bca16 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   bc974:	4630      	mov	r0, r6
   bc976:	4629      	mov	r1, r5
   bc978:	f7fd fefd 	bl	ba776 <_ZNK8particle10BleAddresseqERKS0_>
   bc97c:	3608      	adds	r6, #8
   bc97e:	4680      	mov	r8, r0
   bc980:	2800      	cmp	r0, #0
   bc982:	d0f5      	beq.n	bc970 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   bc984:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bc986:	f7fd fd37 	bl	ba3f8 <free>
        if (!delegator->filterByRssi(result) ||
   bc98a:	f1b8 0f00 	cmp.w	r8, #0
   bc98e:	d039      	beq.n	bca04 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   bc990:	4629      	mov	r1, r5
   bc992:	4620      	mov	r0, r4
   bc994:	f7fe fce3 	bl	bb35e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   bc998:	b3a0      	cbz	r0, bca04 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   bc99a:	4629      	mov	r1, r5
   bc99c:	4620      	mov	r0, r4
   bc99e:	f7ff fa68 	bl	bbe72 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   bc9a2:	4606      	mov	r6, r0
   bc9a4:	b370      	cbz	r0, bca04 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   bc9a6:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   bc9aa:	4638      	mov	r0, r7
   bc9ac:	f7fe fd5f 	bl	bb46e <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   bc9b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc9b2:	2b00      	cmp	r3, #0
   bc9b4:	dd12      	ble.n	bc9dc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   bc9b6:	a806      	add	r0, sp, #24
   bc9b8:	f7fe f8b9 	bl	bab2e <_ZNK8particle18BleAdvertisingData10appearanceEv>
   bc9bc:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   bc9be:	a803      	add	r0, sp, #12
   bc9c0:	f7fe f8b5 	bl	bab2e <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   bc9c4:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   bc9c8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   bc9cc:	429a      	cmp	r2, r3
   bc9ce:	d025      	beq.n	bca1c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   bc9d0:	f833 1b02 	ldrh.w	r1, [r3], #2
   bc9d4:	4588      	cmp	r8, r1
   bc9d6:	d001      	beq.n	bc9dc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   bc9d8:	4288      	cmp	r0, r1
   bc9da:	d1f7      	bne.n	bc9cc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   bc9dc:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bc9de:	f7fd fd0b 	bl	ba3f8 <free>
              !delegator->filterByServiceUUID(result) ||
   bc9e2:	b17e      	cbz	r6, bca04 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   bc9e4:	4629      	mov	r1, r5
   bc9e6:	4620      	mov	r0, r4
   bc9e8:	f7fe fd76 	bl	bb4d8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   bc9ec:	b150      	cbz	r0, bca04 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   bc9ee:	6a23      	ldr	r3, [r4, #32]
   bc9f0:	b1b3      	cbz	r3, bca20 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   bc9f2:	6963      	ldr	r3, [r4, #20]
   bc9f4:	9513      	str	r5, [sp, #76]	; 0x4c
   bc9f6:	3301      	adds	r3, #1
   bc9f8:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc9fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc9fc:	4639      	mov	r1, r7
   bc9fe:	f104 0018 	add.w	r0, r4, #24
   bca02:	4798      	blx	r3
            return;
   bca04:	4628      	mov	r0, r5
   bca06:	f7fe fadf 	bl	bafc8 <_ZN8particle13BleScanResultD1Ev>
    }
   bca0a:	b01d      	add	sp, #116	; 0x74
   bca0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   bca10:	f04f 0801 	mov.w	r8, #1
   bca14:	e7b6      	b.n	bc984 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   bca16:	f04f 0800 	mov.w	r8, #0
   bca1a:	e7b3      	b.n	bc984 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   bca1c:	2600      	movs	r6, #0
   bca1e:	e7dd      	b.n	bc9dc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   bca20:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   bca24:	f1b8 0f00 	cmp.w	r8, #0
   bca28:	d007      	beq.n	bca3a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   bca2a:	6963      	ldr	r3, [r4, #20]
   bca2c:	3301      	adds	r3, #1
   bca2e:	6163      	str	r3, [r4, #20]
   bca30:	4629      	mov	r1, r5
   bca32:	6b63      	ldr	r3, [r4, #52]	; 0x34
   bca34:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bca38:	e7e3      	b.n	bca02 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   bca3a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   bca3e:	f1bc 0f00 	cmp.w	ip, #0
   bca42:	d025      	beq.n	bca90 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   bca44:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bca46:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   bca48:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bca4a:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   bca4c:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bca4e:	d8d9      	bhi.n	bca04 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   bca50:	2224      	movs	r2, #36	; 0x24
   bca52:	4353      	muls	r3, r2
    address_ = addr.address_;
   bca54:	462a      	mov	r2, r5
   bca56:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   bca58:	3b24      	subs	r3, #36	; 0x24
   bca5a:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   bca5e:	f84c 0003 	str.w	r0, [ip, r3]
   bca62:	6071      	str	r1, [r6, #4]
class BleScanResult {
   bca64:	f106 0008 	add.w	r0, r6, #8
   bca68:	a903      	add	r1, sp, #12
   bca6a:	f7fe fe04 	bl	bb676 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   bca6e:	a906      	add	r1, sp, #24
   bca70:	f106 0014 	add.w	r0, r6, #20
   bca74:	f7fe fdff 	bl	bb676 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   bca78:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   bca7c:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   bca80:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   bca84:	429a      	cmp	r2, r3
   bca86:	d3bd      	bcc.n	bca04 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   bca88:	4640      	mov	r0, r8
   bca8a:	f7fd f937 	bl	b9cfc <hal_ble_gap_stop_scan>
   bca8e:	e7b9      	b.n	bca04 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   bca90:	e895 0003 	ldmia.w	r5, {r0, r1}
   bca94:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   bca98:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   bca9c:	a903      	add	r1, sp, #12
   bca9e:	a80c      	add	r0, sp, #48	; 0x30
   bcaa0:	f7fe fdb5 	bl	bb60e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   bcaa4:	a906      	add	r1, sp, #24
   bcaa6:	a80f      	add	r0, sp, #60	; 0x3c
   bcaa8:	f7fe fdb1 	bl	bb60e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   bcaac:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   bcab0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   bcab4:	4641      	mov	r1, r8
   bcab6:	4638      	mov	r0, r7
   bcab8:	6866      	ldr	r6, [r4, #4]
   bcaba:	f7fe fdc5 	bl	bb648 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bcabe:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bcac2:	4299      	cmp	r1, r3
   bcac4:	da10      	bge.n	bcae8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   bcac6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bcac8:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   bcaca:	2224      	movs	r2, #36	; 0x24
   bcacc:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   bcad0:	f106 0024 	add.w	r0, r6, #36	; 0x24
   bcad4:	fb02 3201 	mla	r2, r2, r1, r3
   bcad8:	4631      	mov	r1, r6
   bcada:	f7ff fec7 	bl	bc86c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bcade:	b986      	cbnz	r6, bcb02 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   bcae0:	6863      	ldr	r3, [r4, #4]
   bcae2:	3301      	adds	r3, #1
   bcae4:	6063      	str	r3, [r4, #4]
    return true;
   bcae6:	e005      	b.n	bcaf4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bcae8:	3101      	adds	r1, #1
   bcaea:	4620      	mov	r0, r4
   bcaec:	f7ff fee8 	bl	bc8c0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bcaf0:	2800      	cmp	r0, #0
   bcaf2:	d1e8      	bne.n	bcac6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   bcaf4:	4638      	mov	r0, r7
   bcaf6:	f7fe fa67 	bl	bafc8 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   bcafa:	4640      	mov	r0, r8
   bcafc:	f7fe fa64 	bl	bafc8 <_ZN8particle13BleScanResultD1Ev>
   bcb00:	e780      	b.n	bca04 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   bcb02:	4639      	mov	r1, r7
   bcb04:	4630      	mov	r0, r6
   bcb06:	f7fe fd9f 	bl	bb648 <_ZN8particle13BleScanResultC1EOS0_>
   bcb0a:	e7e9      	b.n	bcae0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000bcb0c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   bcb0c:	4802      	ldr	r0, [pc, #8]	; (bcb18 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bcb0e:	2300      	movs	r3, #0
   bcb10:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   bcb12:	f7fd b9a5 	b.w	b9e60 <os_mutex_recursive_create>
   bcb16:	bf00      	nop
   bcb18:	2003e65c 	.word	0x2003e65c

000bcb1c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bcb1c:	2200      	movs	r2, #0
   bcb1e:	6840      	ldr	r0, [r0, #4]
   bcb20:	4611      	mov	r1, r2
   bcb22:	f7fd bc19 	b.w	ba358 <network_ready>

000bcb26 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bcb26:	2200      	movs	r2, #0
   bcb28:	6840      	ldr	r0, [r0, #4]
   bcb2a:	4611      	mov	r1, r2
   bcb2c:	f7fd bc34 	b.w	ba398 <network_listening>

000bcb30 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bcb30:	2200      	movs	r2, #0
   bcb32:	6840      	ldr	r0, [r0, #4]
   bcb34:	4611      	mov	r1, r2
   bcb36:	f7fd bc3f 	b.w	ba3b8 <network_get_listen_timeout>

000bcb3a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bcb3a:	6840      	ldr	r0, [r0, #4]
   bcb3c:	2200      	movs	r2, #0
   bcb3e:	f7fd bc33 	b.w	ba3a8 <network_set_listen_timeout>

000bcb42 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bcb42:	6840      	ldr	r0, [r0, #4]
   bcb44:	2200      	movs	r2, #0
   bcb46:	f081 0101 	eor.w	r1, r1, #1
   bcb4a:	f7fd bc1d 	b.w	ba388 <network_listen>

000bcb4e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bcb4e:	2300      	movs	r3, #0
   bcb50:	6840      	ldr	r0, [r0, #4]
   bcb52:	461a      	mov	r2, r3
   bcb54:	4619      	mov	r1, r3
   bcb56:	f7fd bc0f 	b.w	ba378 <network_off>

000bcb5a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bcb5a:	2300      	movs	r3, #0
   bcb5c:	6840      	ldr	r0, [r0, #4]
   bcb5e:	461a      	mov	r2, r3
   bcb60:	4619      	mov	r1, r3
   bcb62:	f7fd bc01 	b.w	ba368 <network_on>

000bcb66 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bcb66:	2200      	movs	r2, #0
   bcb68:	6840      	ldr	r0, [r0, #4]
   bcb6a:	4611      	mov	r1, r2
   bcb6c:	f7fd bbe4 	b.w	ba338 <network_connecting>

000bcb70 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bcb70:	6840      	ldr	r0, [r0, #4]
   bcb72:	2200      	movs	r2, #0
   bcb74:	2102      	movs	r1, #2
   bcb76:	f7fd bbe7 	b.w	ba348 <network_disconnect>

000bcb7a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bcb7a:	2300      	movs	r3, #0
   bcb7c:	6840      	ldr	r0, [r0, #4]
   bcb7e:	461a      	mov	r2, r3
   bcb80:	f7fd bbd2 	b.w	ba328 <network_connect>

000bcb84 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bcb84:	4b08      	ldr	r3, [pc, #32]	; (bcba8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bcb86:	b510      	push	{r4, lr}
   bcb88:	2428      	movs	r4, #40	; 0x28
   bcb8a:	4622      	mov	r2, r4
   bcb8c:	4618      	mov	r0, r3
   bcb8e:	2100      	movs	r1, #0
   bcb90:	f002 f9b9 	bl	bef06 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bcb94:	4b05      	ldr	r3, [pc, #20]	; (bcbac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bcb96:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bcb98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bcb9c:	6042      	str	r2, [r0, #4]
   bcb9e:	2204      	movs	r2, #4
   bcba0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bcba2:	4a03      	ldr	r2, [pc, #12]	; (bcbb0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bcba4:	601a      	str	r2, [r3, #0]
   bcba6:	bd10      	pop	{r4, pc}
   bcba8:	2003e66c 	.word	0x2003e66c
   bcbac:	2003e664 	.word	0x2003e664
   bcbb0:	000c2468 	.word	0x000c2468

000bcbb4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bcbb4:	4770      	bx	lr

000bcbb6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bcbb6:	2000      	movs	r0, #0
   bcbb8:	4770      	bx	lr

000bcbba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bcbba:	b510      	push	{r4, lr}
   bcbbc:	2110      	movs	r1, #16
   bcbbe:	4604      	mov	r4, r0
   bcbc0:	f7f7 fa6d 	bl	b409e <_ZdlPvj>
   bcbc4:	4620      	mov	r0, r4
   bcbc6:	bd10      	pop	{r4, pc}

000bcbc8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bcbc8:	b508      	push	{r3, lr}
      { delete this; }
   bcbca:	f7ff fff6 	bl	bcbba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bcbce:	bd08      	pop	{r3, pc}

000bcbd0 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bcbd0:	b530      	push	{r4, r5, lr}
        type_(type) {
   bcbd2:	2200      	movs	r2, #0
   bcbd4:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bcbd8:	6002      	str	r2, [r0, #0]
   bcbda:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   bcbdc:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bcbde:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bcbe0:	680c      	ldr	r4, [r1, #0]
   bcbe2:	8085      	strh	r5, [r0, #4]
   bcbe4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bcbe6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bcbe8:	bd30      	pop	{r4, r5, pc}

000bcbea <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bcbea:	b510      	push	{r4, lr}
   bcbec:	4604      	mov	r4, r0
    free((void*)msg_);
   bcbee:	6800      	ldr	r0, [r0, #0]
   bcbf0:	f7fd fc02 	bl	ba3f8 <free>
}
   bcbf4:	4620      	mov	r0, r4
   bcbf6:	bd10      	pop	{r4, pc}

000bcbf8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bcbf8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bcbfa:	68c4      	ldr	r4, [r0, #12]
   bcbfc:	b1f4      	cbz	r4, bcc3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bcbfe:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bcc00:	2b02      	cmp	r3, #2
   bcc02:	d103      	bne.n	bcc0c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bcc04:	f104 000c 	add.w	r0, r4, #12
   bcc08:	f7ff ffef 	bl	bcbea <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bcc0c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bcc0e:	b135      	cbz	r5, bcc1e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bcc10:	4628      	mov	r0, r5
   bcc12:	f7f7 fc7b 	bl	b450c <_ZNSt14_Function_baseD1Ev>
   bcc16:	2110      	movs	r1, #16
   bcc18:	4628      	mov	r0, r5
   bcc1a:	f7f7 fa40 	bl	b409e <_ZdlPvj>
   bcc1e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bcc20:	b135      	cbz	r5, bcc30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bcc22:	4628      	mov	r0, r5
   bcc24:	f7f7 fc72 	bl	b450c <_ZNSt14_Function_baseD1Ev>
   bcc28:	2110      	movs	r1, #16
   bcc2a:	4628      	mov	r0, r5
   bcc2c:	f7f7 fa37 	bl	b409e <_ZdlPvj>
   bcc30:	4620      	mov	r0, r4
   bcc32:	2114      	movs	r1, #20
   bcc34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bcc38:	f7f7 ba31 	b.w	b409e <_ZdlPvj>
   bcc3c:	bd38      	pop	{r3, r4, r5, pc}

000bcc3e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   bcc3e:	b510      	push	{r4, lr}
   bcc40:	b088      	sub	sp, #32
   bcc42:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   bcc44:	4668      	mov	r0, sp
   bcc46:	f000 fe32 	bl	bd8ae <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   bcc4a:	4669      	mov	r1, sp
   bcc4c:	a804      	add	r0, sp, #16
   bcc4e:	f000 fe79 	bl	bd944 <_ZN6StringC1ERKS_>
   bcc52:	a804      	add	r0, sp, #16
   bcc54:	47a0      	blx	r4
   bcc56:	4604      	mov	r4, r0
   bcc58:	a804      	add	r0, sp, #16
   bcc5a:	f000 fddd 	bl	bd818 <_ZN6StringD1Ev>
    String p(param);
   bcc5e:	4668      	mov	r0, sp
   bcc60:	f000 fdda 	bl	bd818 <_ZN6StringD1Ev>
}
   bcc64:	4620      	mov	r0, r4
   bcc66:	b008      	add	sp, #32
   bcc68:	bd10      	pop	{r4, pc}

000bcc6a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bcc6a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bcc6c:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bcc6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bcc72:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bcc74:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bcc76:	461a      	mov	r2, r3
   bcc78:	4669      	mov	r1, sp
   bcc7a:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bcc7c:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bcc80:	f8ad 4000 	strh.w	r4, [sp]
   bcc84:	f7fd fb10 	bl	ba2a8 <spark_function>
}
   bcc88:	b004      	add	sp, #16
   bcc8a:	bd10      	pop	{r4, pc}

000bcc8c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bcc8c:	680b      	ldr	r3, [r1, #0]
   bcc8e:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bcc90:	684b      	ldr	r3, [r1, #4]
   bcc92:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bcc94:	b113      	cbz	r3, bcc9c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bcc96:	685a      	ldr	r2, [r3, #4]
   bcc98:	3201      	adds	r2, #1
   bcc9a:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bcc9c:	4770      	bx	lr

000bcc9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bcc9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bcca0:	4604      	mov	r4, r0
   bcca2:	4668      	mov	r0, sp
   bcca4:	460d      	mov	r5, r1
   bcca6:	f7ff fff1 	bl	bcc8c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bccaa:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bccac:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bccae:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bccb0:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bccb2:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bccb4:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bccb6:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   bccb8:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bccba:	f7fe fa7e 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bccbe:	b135      	cbz	r5, bccce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bccc0:	1d28      	adds	r0, r5, #4
   bccc2:	f7fe fa7a 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bccc6:	2108      	movs	r1, #8
   bccc8:	4628      	mov	r0, r5
   bccca:	f7f7 f9e8 	bl	b409e <_ZdlPvj>
        return p;
    }
   bccce:	4620      	mov	r0, r4
   bccd0:	b003      	add	sp, #12
   bccd2:	bd30      	pop	{r4, r5, pc}

000bccd4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bccd4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bccd6:	b510      	push	{r4, lr}
      if (_M_empty())
   bccd8:	b90a      	cbnz	r2, bccde <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bccda:	f001 fa44 	bl	be166 <_ZSt25__throw_bad_function_callv>
    }
   bccde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bcce2:	68c3      	ldr	r3, [r0, #12]
   bcce4:	4718      	bx	r3

000bcce6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bcce6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bcce8:	6800      	ldr	r0, [r0, #0]
   bccea:	f100 0110 	add.w	r1, r0, #16
   bccee:	f7ff fff1 	bl	bccd4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bccf2:	bd08      	pop	{r3, pc}

000bccf4 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bccf4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bccf6:	b510      	push	{r4, lr}
      if (_M_empty())
   bccf8:	b90a      	cbnz	r2, bccfe <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bccfa:	f001 fa34 	bl	be166 <_ZSt25__throw_bad_function_callv>
    }
   bccfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bcd02:	68c3      	ldr	r3, [r0, #12]
   bcd04:	4718      	bx	r3

000bcd06 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bcd06:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bcd08:	6800      	ldr	r0, [r0, #0]
   bcd0a:	f100 0110 	add.w	r1, r0, #16
   bcd0e:	f7ff fff1 	bl	bccf4 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bcd12:	bd08      	pop	{r3, pc}

000bcd14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bcd14:	b538      	push	{r3, r4, r5, lr}
   bcd16:	2300      	movs	r3, #0
   bcd18:	4604      	mov	r4, r0
   bcd1a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bcd1c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bcd1e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bcd20:	f7f7 f9b9 	bl	b4096 <_Znwj>
   bcd24:	b128      	cbz	r0, bcd32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bcd26:	2301      	movs	r3, #1
   bcd28:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bcd2c:	4b02      	ldr	r3, [pc, #8]	; (bcd38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bcd2e:	6003      	str	r3, [r0, #0]
   bcd30:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bcd32:	6020      	str	r0, [r4, #0]
	}
   bcd34:	4620      	mov	r0, r4
   bcd36:	bd38      	pop	{r3, r4, r5, pc}
   bcd38:	000c24a4 	.word	0x000c24a4

000bcd3c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bcd3c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bcd3e:	2300      	movs	r3, #0
   bcd40:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bcd42:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bcd44:	4604      	mov	r4, r0
   bcd46:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bcd48:	b12b      	cbz	r3, bcd56 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bcd4a:	2202      	movs	r2, #2
   bcd4c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bcd4e:	68eb      	ldr	r3, [r5, #12]
   bcd50:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bcd52:	68ab      	ldr	r3, [r5, #8]
   bcd54:	60a3      	str	r3, [r4, #8]
    }
   bcd56:	4620      	mov	r0, r4
   bcd58:	bd38      	pop	{r3, r4, r5, pc}
	...

000bcd5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bcd5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bcd5e:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   bcd60:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bcd62:	4668      	mov	r0, sp
   bcd64:	f7ff ff34 	bl	bcbd0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bcd68:	f04f 0302 	mov.w	r3, #2
   bcd6c:	e8d4 2f4f 	ldrexb	r2, [r4]
   bcd70:	2a00      	cmp	r2, #0
   bcd72:	d103      	bne.n	bcd7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bcd74:	e8c4 3f41 	strexb	r1, r3, [r4]
   bcd78:	2900      	cmp	r1, #0
   bcd7a:	d1f7      	bne.n	bcd6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bcd7c:	d125      	bne.n	bcdca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bcd7e:	f104 050c 	add.w	r5, r4, #12
   bcd82:	4669      	mov	r1, sp
   bcd84:	4628      	mov	r0, r5
   bcd86:	f7ff ff23 	bl	bcbd0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bcd8a:	f3bf 8f5b 	dmb	ish
   bcd8e:	2301      	movs	r3, #1
   bcd90:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bcd92:	2000      	movs	r0, #0
   bcd94:	f104 0308 	add.w	r3, r4, #8
   bcd98:	f3bf 8f5b 	dmb	ish
   bcd9c:	e853 6f00 	ldrex	r6, [r3]
   bcda0:	e843 0200 	strex	r2, r0, [r3]
   bcda4:	2a00      	cmp	r2, #0
   bcda6:	d1f9      	bne.n	bcd9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bcda8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bcdac:	b16e      	cbz	r6, bcdca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bcdae:	f7fd fa4f 	bl	ba250 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bcdb2:	b178      	cbz	r0, bcdd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bcdb4:	4629      	mov	r1, r5
   bcdb6:	4630      	mov	r0, r6
   bcdb8:	f7ff ff8c 	bl	bccd4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bcdbc:	4630      	mov	r0, r6
   bcdbe:	f7f7 fba5 	bl	b450c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bcdc2:	2110      	movs	r1, #16
   bcdc4:	4630      	mov	r0, r6
   bcdc6:	f7f7 f96a 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bcdca:	4668      	mov	r0, sp
   bcdcc:	f7ff ff0d 	bl	bcbea <_ZN8particle5ErrorD1Ev>
    }
   bcdd0:	b009      	add	sp, #36	; 0x24
   bcdd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bcdd4:	4631      	mov	r1, r6
   bcdd6:	a802      	add	r0, sp, #8
   bcdd8:	f7ff ffb0 	bl	bcd3c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bcddc:	68e0      	ldr	r0, [r4, #12]
   bcdde:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bcde2:	b108      	cbz	r0, bcde8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bcde4:	f002 f926 	bl	bf034 <strdup>
        type_(type) {
   bcde8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bcdea:	2010      	movs	r0, #16
   bcdec:	f8ad 501c 	strh.w	r5, [sp, #28]
   bcdf0:	f7f7 f951 	bl	b4096 <_Znwj>
   bcdf4:	4605      	mov	r5, r0
   bcdf6:	b1e8      	cbz	r0, bce34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bcdf8:	2700      	movs	r7, #0
   bcdfa:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bcdfc:	2018      	movs	r0, #24
   bcdfe:	f7f7 f94a 	bl	b4096 <_Znwj>
   bce02:	4604      	mov	r4, r0
   bce04:	b188      	cbz	r0, bce2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bce06:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bce08:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bce0a:	a802      	add	r0, sp, #8
   bce0c:	f7ff f88a 	bl	bbf24 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bce10:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bce12:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bce14:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bce16:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bce18:	9204      	str	r2, [sp, #16]
   bce1a:	a906      	add	r1, sp, #24
   bce1c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bce1e:	60e3      	str	r3, [r4, #12]
   bce20:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bce24:	9205      	str	r2, [sp, #20]
   bce26:	f7ff fed3 	bl	bcbd0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bce2a:	4b08      	ldr	r3, [pc, #32]	; (bce4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bce2c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bce2e:	4b08      	ldr	r3, [pc, #32]	; (bce50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bce30:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bce32:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bce34:	a806      	add	r0, sp, #24
   bce36:	f7ff fed8 	bl	bcbea <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bce3a:	a802      	add	r0, sp, #8
   bce3c:	f7f7 fb66 	bl	b450c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bce40:	2200      	movs	r2, #0
   bce42:	4629      	mov	r1, r5
   bce44:	4803      	ldr	r0, [pc, #12]	; (bce54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bce46:	f7fd fa0b 	bl	ba260 <application_thread_invoke>
   bce4a:	e7b7      	b.n	bcdbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bce4c:	000bcce7 	.word	0x000bcce7
   bce50:	000bcf69 	.word	0x000bcf69
   bce54:	000ba4bf 	.word	0x000ba4bf

000bce58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bce58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bce5c:	b08b      	sub	sp, #44	; 0x2c
   bce5e:	4605      	mov	r5, r0
   bce60:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bce64:	460f      	mov	r7, r1
   bce66:	4690      	mov	r8, r2
   bce68:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bce6a:	f7fd fa35 	bl	ba2d8 <spark_cloud_flag_connected>
   bce6e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bce70:	4683      	mov	fp, r0
   bce72:	bb38      	cbnz	r0, bcec4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bce74:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bce78:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bce7a:	a905      	add	r1, sp, #20
   bce7c:	4630      	mov	r0, r6
   bce7e:	f8ad 3018 	strh.w	r3, [sp, #24]
   bce82:	f7ff fea5 	bl	bcbd0 <_ZN8particle5ErrorC1EOS0_>
   bce86:	2014      	movs	r0, #20
   bce88:	f7f7 f905 	bl	b4096 <_Znwj>
   bce8c:	4604      	mov	r4, r0
   bce8e:	b148      	cbz	r0, bcea4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bce90:	2302      	movs	r3, #2
   bce92:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bce94:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bce96:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bce9a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bce9c:	4631      	mov	r1, r6
   bce9e:	300c      	adds	r0, #12
   bcea0:	f7ff fe96 	bl	bcbd0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bcea4:	4628      	mov	r0, r5
	: __shared_count(__p)
   bcea6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bcea8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bceac:	f7ff ff32 	bl	bcd14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bceb0:	4630      	mov	r0, r6
   bceb2:	f7ff fe9a 	bl	bcbea <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bceb6:	a805      	add	r0, sp, #20
   bceb8:	f7ff fe97 	bl	bcbea <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   bcebc:	4628      	mov	r0, r5
   bcebe:	b00b      	add	sp, #44	; 0x2c
   bcec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bcec4:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bcec6:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bcec8:	2014      	movs	r0, #20
   bceca:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bcece:	9307      	str	r3, [sp, #28]
   bced0:	f7f7 f8e1 	bl	b4096 <_Znwj>
   bced4:	4601      	mov	r1, r0
   bced6:	b118      	cbz	r0, bcee0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bced8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bcedc:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bcede:	7044      	strb	r4, [r0, #1]
   bcee0:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bcee2:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bcee4:	f7ff ff16 	bl	bcd14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bcee8:	4b1e      	ldr	r3, [pc, #120]	; (bcf64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bceea:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bceec:	2008      	movs	r0, #8
   bceee:	f7f7 f8d2 	bl	b4096 <_Znwj>
   bcef2:	4604      	mov	r4, r0
   bcef4:	b110      	cbz	r0, bcefc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bcef6:	a903      	add	r1, sp, #12
   bcef8:	f7ff fec8 	bl	bcc8c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bcefc:	9600      	str	r6, [sp, #0]
   bcefe:	fa5f f38a 	uxtb.w	r3, sl
   bcf02:	464a      	mov	r2, r9
   bcf04:	4641      	mov	r1, r8
   bcf06:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bcf08:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bcf0a:	f7fd f9ed 	bl	ba2e8 <spark_send_event>
   bcf0e:	b9b8      	cbnz	r0, bcf40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bcf10:	9b03      	ldr	r3, [sp, #12]
   bcf12:	785b      	ldrb	r3, [r3, #1]
   bcf14:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bcf18:	b993      	cbnz	r3, bcf40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bcf1a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bcf1e:	a905      	add	r1, sp, #20
   bcf20:	a803      	add	r0, sp, #12
   bcf22:	9205      	str	r2, [sp, #20]
   bcf24:	f8ad 3018 	strh.w	r3, [sp, #24]
   bcf28:	f7ff ff18 	bl	bcd5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bcf2c:	a805      	add	r0, sp, #20
   bcf2e:	f7ff fe5c 	bl	bcbea <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bcf32:	a805      	add	r0, sp, #20
   bcf34:	9909      	ldr	r1, [sp, #36]	; 0x24
   bcf36:	f7ff feb2 	bl	bcc9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bcf3a:	a806      	add	r0, sp, #24
   bcf3c:	f7fe f93d 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bcf40:	a903      	add	r1, sp, #12
   bcf42:	a805      	add	r0, sp, #20
   bcf44:	f7ff fea2 	bl	bcc8c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bcf48:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bcf4a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bcf4c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bcf4e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bcf50:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bcf52:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bcf54:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bcf56:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bcf58:	f7fe f92f 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bcf5c:	a804      	add	r0, sp, #16
   bcf5e:	f7fe f92c 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bcf62:	e7ab      	b.n	bcebc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bcf64:	000bcfe5 	.word	0x000bcfe5

000bcf68 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bcf68:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bcf6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bcf6c:	4605      	mov	r5, r0
	switch (__op)
   bcf6e:	d103      	bne.n	bcf78 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bcf70:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bcf72:	6003      	str	r3, [r0, #0]
      }
   bcf74:	2000      	movs	r0, #0
   bcf76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bcf78:	2a02      	cmp	r2, #2
   bcf7a:	d010      	beq.n	bcf9e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bcf7c:	2a03      	cmp	r2, #3
   bcf7e:	d1f9      	bne.n	bcf74 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bcf80:	6804      	ldr	r4, [r0, #0]
   bcf82:	2c00      	cmp	r4, #0
   bcf84:	d0f6      	beq.n	bcf74 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bcf86:	f104 0010 	add.w	r0, r4, #16
   bcf8a:	f7ff fe2e 	bl	bcbea <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bcf8e:	4620      	mov	r0, r4
   bcf90:	f7f7 fabc 	bl	b450c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bcf94:	2118      	movs	r1, #24
   bcf96:	4620      	mov	r0, r4
   bcf98:	f7f7 f881 	bl	b409e <_ZdlPvj>
   bcf9c:	e7ea      	b.n	bcf74 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bcf9e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bcfa0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bcfa2:	f7f7 f878 	bl	b4096 <_Znwj>
   bcfa6:	4604      	mov	r4, r0
   bcfa8:	b150      	cbz	r0, bcfc0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bcfaa:	4631      	mov	r1, r6
   bcfac:	f7ff fec6 	bl	bcd3c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bcfb0:	6930      	ldr	r0, [r6, #16]
   bcfb2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bcfb6:	b108      	cbz	r0, bcfbc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bcfb8:	f002 f83c 	bl	bf034 <strdup>
        type_(type) {
   bcfbc:	6120      	str	r0, [r4, #16]
   bcfbe:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bcfc0:	602c      	str	r4, [r5, #0]
	}
   bcfc2:	e7d7      	b.n	bcf74 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bcfc4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bcfc4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bcfc6:	2300      	movs	r3, #0
   bcfc8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bcfca:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bcfcc:	4604      	mov	r4, r0
   bcfce:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bcfd0:	b12b      	cbz	r3, bcfde <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bcfd2:	2202      	movs	r2, #2
   bcfd4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bcfd6:	68eb      	ldr	r3, [r5, #12]
   bcfd8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bcfda:	68ab      	ldr	r3, [r5, #8]
   bcfdc:	60a3      	str	r3, [r4, #8]
    }
   bcfde:	4620      	mov	r0, r4
   bcfe0:	bd38      	pop	{r3, r4, r5, pc}
	...

000bcfe4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bcfe4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bcfe6:	b089      	sub	sp, #36	; 0x24
   bcfe8:	4604      	mov	r4, r0
   bcfea:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bcfec:	a801      	add	r0, sp, #4
   bcfee:	4611      	mov	r1, r2
   bcff0:	f7ff fe55 	bl	bcc9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bcff4:	b1a4      	cbz	r4, bd020 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bcff6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bcff8:	b11d      	cbz	r5, bd002 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bcffa:	4628      	mov	r0, r5
   bcffc:	f002 f81a 	bl	bf034 <strdup>
   bd000:	4605      	mov	r5, r0
   bd002:	a801      	add	r0, sp, #4
   bd004:	a903      	add	r1, sp, #12
        type_(type) {
   bd006:	9503      	str	r5, [sp, #12]
   bd008:	f8ad 4010 	strh.w	r4, [sp, #16]
   bd00c:	f7ff fea6 	bl	bcd5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bd010:	a803      	add	r0, sp, #12
   bd012:	f7ff fdea 	bl	bcbea <_ZN8particle5ErrorD1Ev>
   bd016:	a802      	add	r0, sp, #8
   bd018:	f7fe f8cf 	bl	bb1ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bd01c:	b009      	add	sp, #36	; 0x24
   bd01e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bd020:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bd022:	2301      	movs	r3, #1
   bd024:	e8d5 2f4f 	ldrexb	r2, [r5]
   bd028:	2a00      	cmp	r2, #0
   bd02a:	d103      	bne.n	bd034 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bd02c:	e8c5 3f41 	strexb	r1, r3, [r5]
   bd030:	2900      	cmp	r1, #0
   bd032:	d1f7      	bne.n	bd024 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bd034:	d1ef      	bne.n	bd016 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bd036:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bd038:	f3bf 8f5b 	dmb	ish
   bd03c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bd03e:	1d2b      	adds	r3, r5, #4
   bd040:	f3bf 8f5b 	dmb	ish
   bd044:	e853 6f00 	ldrex	r6, [r3]
   bd048:	e843 4200 	strex	r2, r4, [r3]
   bd04c:	2a00      	cmp	r2, #0
   bd04e:	d1f9      	bne.n	bd044 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bd050:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bd054:	2e00      	cmp	r6, #0
   bd056:	d0de      	beq.n	bd016 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bd058:	4620      	mov	r0, r4
   bd05a:	f7fd f8f9 	bl	ba250 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bd05e:	4607      	mov	r7, r0
   bd060:	b160      	cbz	r0, bd07c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bd062:	f105 010c 	add.w	r1, r5, #12
   bd066:	4630      	mov	r0, r6
   bd068:	f7ff fe44 	bl	bccf4 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bd06c:	4630      	mov	r0, r6
   bd06e:	f7f7 fa4d 	bl	b450c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bd072:	2110      	movs	r1, #16
   bd074:	4630      	mov	r0, r6
   bd076:	f7f7 f812 	bl	b409e <_ZdlPvj>
   bd07a:	e7cc      	b.n	bd016 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bd07c:	4631      	mov	r1, r6
   bd07e:	a803      	add	r0, sp, #12
   bd080:	f7ff ffa0 	bl	bcfc4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bd084:	7b2b      	ldrb	r3, [r5, #12]
   bd086:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bd08a:	2010      	movs	r0, #16
   bd08c:	f7f7 f803 	bl	b4096 <_Znwj>
   bd090:	4605      	mov	r5, r0
   bd092:	b1d0      	cbz	r0, bd0ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bd094:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd096:	2014      	movs	r0, #20
   bd098:	f7f6 fffd 	bl	b4096 <_Znwj>
   bd09c:	4604      	mov	r4, r0
   bd09e:	b178      	cbz	r0, bd0c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bd0a0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bd0a2:	4601      	mov	r1, r0
   bd0a4:	a803      	add	r0, sp, #12
   bd0a6:	f7fe ff3d 	bl	bbf24 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd0aa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bd0ac:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bd0ae:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd0b0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bd0b2:	9205      	str	r2, [sp, #20]
   bd0b4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bd0b6:	60e3      	str	r3, [r4, #12]
   bd0b8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bd0bc:	9206      	str	r2, [sp, #24]
   bd0be:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bd0c0:	4b06      	ldr	r3, [pc, #24]	; (bd0dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bd0c2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bd0c4:	4b06      	ldr	r3, [pc, #24]	; (bd0e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd0c6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bd0c8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bd0ca:	a803      	add	r0, sp, #12
   bd0cc:	f7f7 fa1e 	bl	b450c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bd0d0:	2200      	movs	r2, #0
   bd0d2:	4629      	mov	r1, r5
   bd0d4:	4803      	ldr	r0, [pc, #12]	; (bd0e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bd0d6:	f7fd f8c3 	bl	ba260 <application_thread_invoke>
   bd0da:	e7c7      	b.n	bd06c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bd0dc:	000bcd07 	.word	0x000bcd07
   bd0e0:	000bd0e9 	.word	0x000bd0e9
   bd0e4:	000ba4bf 	.word	0x000ba4bf

000bd0e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bd0e8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bd0ea:	b570      	push	{r4, r5, r6, lr}
   bd0ec:	4604      	mov	r4, r0
	switch (__op)
   bd0ee:	d103      	bne.n	bd0f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bd0f0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bd0f2:	6003      	str	r3, [r0, #0]
      }
   bd0f4:	2000      	movs	r0, #0
   bd0f6:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bd0f8:	2a02      	cmp	r2, #2
   bd0fa:	d00c      	beq.n	bd116 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bd0fc:	2a03      	cmp	r2, #3
   bd0fe:	d1f9      	bne.n	bd0f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bd100:	6804      	ldr	r4, [r0, #0]
   bd102:	2c00      	cmp	r4, #0
   bd104:	d0f6      	beq.n	bd0f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bd106:	4620      	mov	r0, r4
   bd108:	f7f7 fa00 	bl	b450c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bd10c:	2114      	movs	r1, #20
   bd10e:	4620      	mov	r0, r4
   bd110:	f7f6 ffc5 	bl	b409e <_ZdlPvj>
   bd114:	e7ee      	b.n	bd0f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bd116:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bd118:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bd11a:	f7f6 ffbc 	bl	b4096 <_Znwj>
   bd11e:	4605      	mov	r5, r0
   bd120:	b120      	cbz	r0, bd12c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bd122:	4631      	mov	r1, r6
   bd124:	f7ff ff4e 	bl	bcfc4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bd128:	7c33      	ldrb	r3, [r6, #16]
   bd12a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bd12c:	6025      	str	r5, [r4, #0]
	}
   bd12e:	e7e1      	b.n	bd0f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bd130 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bd130:	2200      	movs	r2, #0
   bd132:	6840      	ldr	r0, [r0, #4]
   bd134:	4611      	mov	r1, r2
   bd136:	f7fd b92f 	b.w	ba398 <network_listening>

000bd13a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bd13a:	2200      	movs	r2, #0
   bd13c:	6840      	ldr	r0, [r0, #4]
   bd13e:	4611      	mov	r1, r2
   bd140:	f7fd b93a 	b.w	ba3b8 <network_get_listen_timeout>

000bd144 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bd144:	6840      	ldr	r0, [r0, #4]
   bd146:	2200      	movs	r2, #0
   bd148:	f7fd b92e 	b.w	ba3a8 <network_set_listen_timeout>

000bd14c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bd14c:	6840      	ldr	r0, [r0, #4]
   bd14e:	2200      	movs	r2, #0
   bd150:	f081 0101 	eor.w	r1, r1, #1
   bd154:	f7fd b918 	b.w	ba388 <network_listen>

000bd158 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bd158:	2300      	movs	r3, #0
   bd15a:	6840      	ldr	r0, [r0, #4]
   bd15c:	461a      	mov	r2, r3
   bd15e:	4619      	mov	r1, r3
   bd160:	f7fd b90a 	b.w	ba378 <network_off>

000bd164 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bd164:	2300      	movs	r3, #0
   bd166:	6840      	ldr	r0, [r0, #4]
   bd168:	461a      	mov	r2, r3
   bd16a:	4619      	mov	r1, r3
   bd16c:	f7fd b8fc 	b.w	ba368 <network_on>

000bd170 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bd170:	2200      	movs	r2, #0
   bd172:	6840      	ldr	r0, [r0, #4]
   bd174:	4611      	mov	r1, r2
   bd176:	f7fd b8ef 	b.w	ba358 <network_ready>

000bd17a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bd17a:	2200      	movs	r2, #0
   bd17c:	6840      	ldr	r0, [r0, #4]
   bd17e:	4611      	mov	r1, r2
   bd180:	f7fd b8da 	b.w	ba338 <network_connecting>

000bd184 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bd184:	6840      	ldr	r0, [r0, #4]
   bd186:	2200      	movs	r2, #0
   bd188:	2102      	movs	r1, #2
   bd18a:	f7fd b8dd 	b.w	ba348 <network_disconnect>

000bd18e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bd18e:	2300      	movs	r3, #0
   bd190:	6840      	ldr	r0, [r0, #4]
   bd192:	461a      	mov	r2, r3
   bd194:	f7fd b8c8 	b.w	ba328 <network_connect>

000bd198 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bd198:	4b02      	ldr	r3, [pc, #8]	; (bd1a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bd19a:	2203      	movs	r2, #3
   bd19c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bd19e:	4a02      	ldr	r2, [pc, #8]	; (bd1a8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bd1a0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bd1a2:	4770      	bx	lr
   bd1a4:	2003e694 	.word	0x2003e694
   bd1a8:	000c24c0 	.word	0x000c24c0

000bd1ac <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bd1ac:	4770      	bx	lr

000bd1ae <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bd1ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd1b0:	4606      	mov	r6, r0
   bd1b2:	4615      	mov	r5, r2
   bd1b4:	460c      	mov	r4, r1
   bd1b6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bd1b8:	42bc      	cmp	r4, r7
   bd1ba:	d006      	beq.n	bd1ca <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bd1bc:	6833      	ldr	r3, [r6, #0]
   bd1be:	f814 1b01 	ldrb.w	r1, [r4], #1
   bd1c2:	689b      	ldr	r3, [r3, #8]
   bd1c4:	4630      	mov	r0, r6
   bd1c6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bd1c8:	e7f6      	b.n	bd1b8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bd1ca:	4628      	mov	r0, r5
   bd1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bd1ce <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bd1ce:	7c00      	ldrb	r0, [r0, #16]
   bd1d0:	2200      	movs	r2, #0
   bd1d2:	f7fc bef5 	b.w	b9fc0 <hal_i2c_write>

000bd1d6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bd1d6:	7c00      	ldrb	r0, [r0, #16]
   bd1d8:	2100      	movs	r1, #0
   bd1da:	f7fc bef9 	b.w	b9fd0 <hal_i2c_available>

000bd1de <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bd1de:	7c00      	ldrb	r0, [r0, #16]
   bd1e0:	2100      	movs	r1, #0
   bd1e2:	f7fc befd 	b.w	b9fe0 <hal_i2c_read>

000bd1e6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bd1e6:	7c00      	ldrb	r0, [r0, #16]
   bd1e8:	2100      	movs	r1, #0
   bd1ea:	f7fc bf01 	b.w	b9ff0 <hal_i2c_peek>

000bd1ee <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bd1ee:	7c00      	ldrb	r0, [r0, #16]
   bd1f0:	2100      	movs	r1, #0
   bd1f2:	f7fc bf05 	b.w	ba000 <hal_i2c_flush>

000bd1f6 <_ZN7TwoWireD0Ev>:
   bd1f6:	b510      	push	{r4, lr}
   bd1f8:	2114      	movs	r1, #20
   bd1fa:	4604      	mov	r4, r0
   bd1fc:	f7f6 ff4f 	bl	b409e <_ZdlPvj>
   bd200:	4620      	mov	r0, r4
   bd202:	bd10      	pop	{r4, pc}

000bd204 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bd204:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bd206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bd20a:	4604      	mov	r4, r0
   bd20c:	4608      	mov	r0, r1
   bd20e:	2100      	movs	r1, #0
   bd210:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bd214:	4b03      	ldr	r3, [pc, #12]	; (bd224 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bd216:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bd218:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bd21a:	4611      	mov	r1, r2
   bd21c:	f7fc ff00 	bl	ba020 <hal_i2c_init>
}
   bd220:	4620      	mov	r0, r4
   bd222:	bd10      	pop	{r4, pc}
   bd224:	000c24fc 	.word	0x000c24fc

000bd228 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bd228:	7c00      	ldrb	r0, [r0, #16]
   bd22a:	2200      	movs	r2, #0
   bd22c:	f7fc bea8 	b.w	b9f80 <hal_i2c_set_speed>

000bd230 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bd230:	2300      	movs	r3, #0
   bd232:	7c00      	ldrb	r0, [r0, #16]
   bd234:	461a      	mov	r2, r3
   bd236:	4619      	mov	r1, r3
   bd238:	f7fc beaa 	b.w	b9f90 <hal_i2c_begin>

000bd23c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bd23c:	7c00      	ldrb	r0, [r0, #16]
   bd23e:	2200      	movs	r2, #0
   bd240:	f7fc beae 	b.w	b9fa0 <hal_i2c_begin_transmission>

000bd244 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bd244:	7c00      	ldrb	r0, [r0, #16]
   bd246:	2200      	movs	r2, #0
   bd248:	f7fc beb2 	b.w	b9fb0 <hal_i2c_end_transmission>

000bd24c <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bd24c:	2101      	movs	r1, #1
   bd24e:	f7ff bff9 	b.w	bd244 <_ZN7TwoWire15endTransmissionEh>

000bd252 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bd252:	4700      	bx	r0

000bd254 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bd254:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bd258:	2400      	movs	r4, #0
{
   bd25a:	461d      	mov	r5, r3
   bd25c:	460f      	mov	r7, r1
   bd25e:	4690      	mov	r8, r2
   bd260:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bd262:	f7fc fe7d 	bl	b9f60 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bd266:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bd268:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bd26c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bd270:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bd274:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bd278:	bfa2      	ittt	ge
   bd27a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bd27e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bd282:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bd284:	4907      	ldr	r1, [pc, #28]	; (bd2a4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bd286:	9400      	str	r4, [sp, #0]
   bd288:	4643      	mov	r3, r8
   bd28a:	463a      	mov	r2, r7
   bd28c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bd28e:	bfa8      	it	ge
   bd290:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bd294:	f7fc fe5c 	bl	b9f50 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bd298:	fab0 f080 	clz	r0, r0
   bd29c:	0940      	lsrs	r0, r0, #5
   bd29e:	b004      	add	sp, #16
   bd2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd2a4:	000bd253 	.word	0x000bd253

000bd2a8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bd2a8:	4770      	bx	lr

000bd2aa <_ZN9IPAddressD0Ev>:
   bd2aa:	b510      	push	{r4, lr}
   bd2ac:	2118      	movs	r1, #24
   bd2ae:	4604      	mov	r4, r0
   bd2b0:	f7f6 fef5 	bl	b409e <_ZdlPvj>
   bd2b4:	4620      	mov	r0, r4
   bd2b6:	bd10      	pop	{r4, pc}

000bd2b8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bd2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bd2ba:	7d03      	ldrb	r3, [r0, #20]
   bd2bc:	2b06      	cmp	r3, #6
{
   bd2be:	b08d      	sub	sp, #52	; 0x34
   bd2c0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bd2c2:	f100 0704 	add.w	r7, r0, #4
   bd2c6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bd2ca:	d012      	beq.n	bd2f2 <_ZNK9IPAddress7printToER5Print+0x3a>
   bd2cc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bd2d0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bd2d4:	220a      	movs	r2, #10
   bd2d6:	4630      	mov	r0, r6
   bd2d8:	f000 f94b 	bl	bd572 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bd2dc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bd2de:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bd2e0:	d019      	beq.n	bd316 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bd2e2:	2c00      	cmp	r4, #0
   bd2e4:	d0f4      	beq.n	bd2d0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bd2e6:	212e      	movs	r1, #46	; 0x2e
   bd2e8:	4630      	mov	r0, r6
   bd2ea:	f000 f929 	bl	bd540 <_ZN5Print5printEc>
   bd2ee:	4404      	add	r4, r0
   bd2f0:	e7ee      	b.n	bd2d0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bd2f2:	232f      	movs	r3, #47	; 0x2f
   bd2f4:	466a      	mov	r2, sp
   bd2f6:	4639      	mov	r1, r7
   bd2f8:	200a      	movs	r0, #10
		buf[0] = 0;
   bd2fa:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bd2fe:	f7fc fe97 	bl	ba030 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bd302:	4668      	mov	r0, sp
   bd304:	f001 feb3 	bl	bf06e <strlen>
   bd308:	6833      	ldr	r3, [r6, #0]
   bd30a:	4602      	mov	r2, r0
   bd30c:	68db      	ldr	r3, [r3, #12]
   bd30e:	4669      	mov	r1, sp
   bd310:	4630      	mov	r0, r6
   bd312:	4798      	blx	r3
   bd314:	4604      	mov	r4, r0
    }
    return n;
}
   bd316:	4620      	mov	r0, r4
   bd318:	b00d      	add	sp, #52	; 0x34
   bd31a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bd31c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bd31c:	b510      	push	{r4, lr}
   bd31e:	4b05      	ldr	r3, [pc, #20]	; (bd334 <_ZN9IPAddressC1Ev+0x18>)
   bd320:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bd322:	2211      	movs	r2, #17
   bd324:	f840 3b04 	str.w	r3, [r0], #4
   bd328:	2100      	movs	r1, #0
   bd32a:	f001 fdec 	bl	bef06 <memset>
}
   bd32e:	4620      	mov	r0, r4
   bd330:	bd10      	pop	{r4, pc}
   bd332:	bf00      	nop
   bd334:	000c2524 	.word	0x000c2524

000bd338 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bd338:	4603      	mov	r3, r0
   bd33a:	4a07      	ldr	r2, [pc, #28]	; (bd358 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bd33c:	b510      	push	{r4, lr}
   bd33e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bd342:	f101 0210 	add.w	r2, r1, #16
   bd346:	f851 4b04 	ldr.w	r4, [r1], #4
   bd34a:	f843 4b04 	str.w	r4, [r3], #4
   bd34e:	4291      	cmp	r1, r2
   bd350:	d1f9      	bne.n	bd346 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bd352:	780a      	ldrb	r2, [r1, #0]
   bd354:	701a      	strb	r2, [r3, #0]
}
   bd356:	bd10      	pop	{r4, pc}
   bd358:	000c2524 	.word	0x000c2524

000bd35c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bd35c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bd35e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bd362:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bd366:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bd36a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bd36e:	2304      	movs	r3, #4
   bd370:	6041      	str	r1, [r0, #4]
   bd372:	7503      	strb	r3, [r0, #20]
}
   bd374:	bd10      	pop	{r4, pc}
	...

000bd378 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bd378:	b507      	push	{r0, r1, r2, lr}
   bd37a:	4b06      	ldr	r3, [pc, #24]	; (bd394 <_ZN9IPAddressC1EPKh+0x1c>)
   bd37c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bd37e:	78cb      	ldrb	r3, [r1, #3]
   bd380:	9300      	str	r3, [sp, #0]
   bd382:	788b      	ldrb	r3, [r1, #2]
   bd384:	784a      	ldrb	r2, [r1, #1]
   bd386:	7809      	ldrb	r1, [r1, #0]
   bd388:	f7ff ffe8 	bl	bd35c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bd38c:	b003      	add	sp, #12
   bd38e:	f85d fb04 	ldr.w	pc, [sp], #4
   bd392:	bf00      	nop
   bd394:	000c2524 	.word	0x000c2524

000bd398 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   bd398:	4b01      	ldr	r3, [pc, #4]	; (bd3a0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bd39a:	4a02      	ldr	r2, [pc, #8]	; (bd3a4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bd39c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bd39e:	4770      	bx	lr
   bd3a0:	2003e69c 	.word	0x2003e69c
   bd3a4:	000c2530 	.word	0x000c2530

000bd3a8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bd3a8:	2300      	movs	r3, #0
   bd3aa:	6840      	ldr	r0, [r0, #4]
   bd3ac:	461a      	mov	r2, r3
   bd3ae:	f7fc bfbb 	b.w	ba328 <network_connect>

000bd3b2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bd3b2:	6840      	ldr	r0, [r0, #4]
   bd3b4:	2200      	movs	r2, #0
   bd3b6:	2102      	movs	r1, #2
   bd3b8:	f7fc bfc6 	b.w	ba348 <network_disconnect>

000bd3bc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bd3bc:	2200      	movs	r2, #0
   bd3be:	6840      	ldr	r0, [r0, #4]
   bd3c0:	4611      	mov	r1, r2
   bd3c2:	f7fc bfb9 	b.w	ba338 <network_connecting>

000bd3c6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bd3c6:	2200      	movs	r2, #0
   bd3c8:	6840      	ldr	r0, [r0, #4]
   bd3ca:	4611      	mov	r1, r2
   bd3cc:	f7fc bfc4 	b.w	ba358 <network_ready>

000bd3d0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bd3d0:	2300      	movs	r3, #0
   bd3d2:	6840      	ldr	r0, [r0, #4]
   bd3d4:	461a      	mov	r2, r3
   bd3d6:	4619      	mov	r1, r3
   bd3d8:	f7fc bfc6 	b.w	ba368 <network_on>

000bd3dc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bd3dc:	2300      	movs	r3, #0
   bd3de:	6840      	ldr	r0, [r0, #4]
   bd3e0:	461a      	mov	r2, r3
   bd3e2:	4619      	mov	r1, r3
   bd3e4:	f7fc bfc8 	b.w	ba378 <network_off>

000bd3e8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bd3e8:	6840      	ldr	r0, [r0, #4]
   bd3ea:	2100      	movs	r1, #0
   bd3ec:	f7fc bfec 	b.w	ba3c8 <network_is_on>

000bd3f0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bd3f0:	6840      	ldr	r0, [r0, #4]
   bd3f2:	2100      	movs	r1, #0
   bd3f4:	f7fc bff0 	b.w	ba3d8 <network_is_off>

000bd3f8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bd3f8:	6840      	ldr	r0, [r0, #4]
   bd3fa:	2200      	movs	r2, #0
   bd3fc:	f081 0101 	eor.w	r1, r1, #1
   bd400:	f7fc bfc2 	b.w	ba388 <network_listen>

000bd404 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bd404:	6840      	ldr	r0, [r0, #4]
   bd406:	2200      	movs	r2, #0
   bd408:	f7fc bfce 	b.w	ba3a8 <network_set_listen_timeout>

000bd40c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bd40c:	2200      	movs	r2, #0
   bd40e:	6840      	ldr	r0, [r0, #4]
   bd410:	4611      	mov	r1, r2
   bd412:	f7fc bfd1 	b.w	ba3b8 <network_get_listen_timeout>

000bd416 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bd416:	2200      	movs	r2, #0
   bd418:	6840      	ldr	r0, [r0, #4]
   bd41a:	4611      	mov	r1, r2
   bd41c:	f7fc bfbc 	b.w	ba398 <network_listening>

000bd420 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bd420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd424:	b095      	sub	sp, #84	; 0x54
   bd426:	4614      	mov	r4, r2
   bd428:	460d      	mov	r5, r1
   bd42a:	4607      	mov	r7, r0
    IPAddress addr;
   bd42c:	f7ff ff76 	bl	bd31c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bd430:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bd432:	221c      	movs	r2, #28
   bd434:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bd436:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bd438:	f001 fd65 	bl	bef06 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bd43c:	2340      	movs	r3, #64	; 0x40
   bd43e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bd440:	4620      	mov	r0, r4
   bd442:	466b      	mov	r3, sp
   bd444:	aa0c      	add	r2, sp, #48	; 0x30
   bd446:	2100      	movs	r1, #0
   bd448:	f7fc fe02 	bl	ba050 <netdb_getaddrinfo>
    if (!r) {
   bd44c:	4604      	mov	r4, r0
   bd44e:	2800      	cmp	r0, #0
   bd450:	d14b      	bne.n	bd4ea <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bd452:	4602      	mov	r2, r0
   bd454:	2101      	movs	r1, #1
   bd456:	6868      	ldr	r0, [r5, #4]
   bd458:	f7fc ff7e 	bl	ba358 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bd45c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bd45e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bd460:	4622      	mov	r2, r4
   bd462:	6868      	ldr	r0, [r5, #4]
   bd464:	f7fc ff78 	bl	ba358 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bd468:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bd46a:	4681      	mov	r9, r0
        bool ok = false;
   bd46c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bd46e:	2e00      	cmp	r6, #0
   bd470:	d03b      	beq.n	bd4ea <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bd472:	2900      	cmp	r1, #0
   bd474:	d139      	bne.n	bd4ea <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bd476:	6873      	ldr	r3, [r6, #4]
   bd478:	2b02      	cmp	r3, #2
   bd47a:	d003      	beq.n	bd484 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bd47c:	2b0a      	cmp	r3, #10
   bd47e:	d011      	beq.n	bd4a4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bd480:	69f6      	ldr	r6, [r6, #28]
   bd482:	e7f4      	b.n	bd46e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bd484:	f1b8 0f00 	cmp.w	r8, #0
   bd488:	d0fa      	beq.n	bd480 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bd48a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bd48c:	a806      	add	r0, sp, #24
   bd48e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bd490:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bd492:	f7ff ff71 	bl	bd378 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bd496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd498:	1d3c      	adds	r4, r7, #4
   bd49a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd49c:	682b      	ldr	r3, [r5, #0]
   bd49e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bd4a0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bd4a2:	e7ed      	b.n	bd480 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bd4a4:	f1b9 0f00 	cmp.w	r9, #0
   bd4a8:	d0ea      	beq.n	bd480 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bd4aa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bd4ac:	2210      	movs	r2, #16
   bd4ae:	a801      	add	r0, sp, #4
   bd4b0:	f001 fd29 	bl	bef06 <memset>
                    a.v = 6;
   bd4b4:	2306      	movs	r3, #6
   bd4b6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bd4ba:	ad01      	add	r5, sp, #4
   bd4bc:	f104 0308 	add.w	r3, r4, #8
   bd4c0:	3418      	adds	r4, #24
   bd4c2:	6818      	ldr	r0, [r3, #0]
   bd4c4:	6859      	ldr	r1, [r3, #4]
   bd4c6:	462a      	mov	r2, r5
   bd4c8:	c203      	stmia	r2!, {r0, r1}
   bd4ca:	3308      	adds	r3, #8
   bd4cc:	42a3      	cmp	r3, r4
   bd4ce:	4615      	mov	r5, r2
   bd4d0:	d1f7      	bne.n	bd4c2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bd4d2:	a901      	add	r1, sp, #4
   bd4d4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bd4d6:	ad07      	add	r5, sp, #28
   bd4d8:	f7ff ff2e 	bl	bd338 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bd4dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd4de:	1d3c      	adds	r4, r7, #4
   bd4e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd4e2:	682b      	ldr	r3, [r5, #0]
   bd4e4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bd4e6:	4649      	mov	r1, r9
   bd4e8:	e7ca      	b.n	bd480 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bd4ea:	9800      	ldr	r0, [sp, #0]
   bd4ec:	f7fc fda8 	bl	ba040 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bd4f0:	4638      	mov	r0, r7
   bd4f2:	b015      	add	sp, #84	; 0x54
   bd4f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bd4f8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bd4f8:	4b02      	ldr	r3, [pc, #8]	; (bd504 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bd4fa:	4a03      	ldr	r2, [pc, #12]	; (bd508 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bd4fc:	601a      	str	r2, [r3, #0]
   bd4fe:	2200      	movs	r2, #0
   bd500:	605a      	str	r2, [r3, #4]

} // spark
   bd502:	4770      	bx	lr
   bd504:	2003e6a0 	.word	0x2003e6a0
   bd508:	000c253c 	.word	0x000c253c

000bd50c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bd50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd50e:	4606      	mov	r6, r0
   bd510:	460d      	mov	r5, r1
  size_t n = 0;
   bd512:	188f      	adds	r7, r1, r2
   bd514:	2400      	movs	r4, #0
  while (size--) {
   bd516:	42bd      	cmp	r5, r7
   bd518:	d00c      	beq.n	bd534 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bd51a:	6833      	ldr	r3, [r6, #0]
   bd51c:	f815 1b01 	ldrb.w	r1, [r5], #1
   bd520:	689b      	ldr	r3, [r3, #8]
   bd522:	4630      	mov	r0, r6
   bd524:	4798      	blx	r3
     if (chunk>=0)
   bd526:	1e03      	subs	r3, r0, #0
   bd528:	db01      	blt.n	bd52e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bd52a:	441c      	add	r4, r3
  while (size--) {
   bd52c:	e7f3      	b.n	bd516 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bd52e:	2c00      	cmp	r4, #0
   bd530:	bf08      	it	eq
   bd532:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bd534:	4620      	mov	r0, r4
   bd536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bd538 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bd538:	b508      	push	{r3, lr}
  return write(str);
   bd53a:	f7fa fe9f 	bl	b827c <_ZN5Print5writeEPKc>
}
   bd53e:	bd08      	pop	{r3, pc}

000bd540 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bd540:	6803      	ldr	r3, [r0, #0]
   bd542:	689b      	ldr	r3, [r3, #8]
   bd544:	4718      	bx	r3

000bd546 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bd546:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bd548:	210d      	movs	r1, #13
{
   bd54a:	4605      	mov	r5, r0
  size_t n = print('\r');
   bd54c:	f7ff fff8 	bl	bd540 <_ZN5Print5printEc>
  n += print('\n');
   bd550:	210a      	movs	r1, #10
  size_t n = print('\r');
   bd552:	4604      	mov	r4, r0
  n += print('\n');
   bd554:	4628      	mov	r0, r5
   bd556:	f7ff fff3 	bl	bd540 <_ZN5Print5printEc>
  return n;
}
   bd55a:	4420      	add	r0, r4
   bd55c:	bd38      	pop	{r3, r4, r5, pc}

000bd55e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   bd55e:	b538      	push	{r3, r4, r5, lr}
   bd560:	4605      	mov	r5, r0
  return write(str);
   bd562:	f7fa fe8b 	bl	b827c <_ZN5Print5writeEPKc>
   bd566:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   bd568:	4628      	mov	r0, r5
   bd56a:	f7ff ffec 	bl	bd546 <_ZN5Print7printlnEv>
  return n;
}
   bd56e:	4420      	add	r0, r4
   bd570:	bd38      	pop	{r3, r4, r5, pc}

000bd572 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bd572:	b530      	push	{r4, r5, lr}
   bd574:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bd576:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bd578:	2a01      	cmp	r2, #1
  *str = '\0';
   bd57a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bd57e:	bf98      	it	ls
   bd580:	220a      	movls	r2, #10
   bd582:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bd584:	460d      	mov	r5, r1
   bd586:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bd58a:	fb01 5312 	mls	r3, r1, r2, r5
   bd58e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bd592:	2b09      	cmp	r3, #9
   bd594:	bf94      	ite	ls
   bd596:	3330      	addls	r3, #48	; 0x30
   bd598:	3337      	addhi	r3, #55	; 0x37
   bd59a:	b2db      	uxtb	r3, r3
  } while(n);
   bd59c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bd59e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bd5a2:	d9ef      	bls.n	bd584 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bd5a4:	4621      	mov	r1, r4
   bd5a6:	f7fa fe69 	bl	b827c <_ZN5Print5writeEPKc>
}
   bd5aa:	b00b      	add	sp, #44	; 0x2c
   bd5ac:	bd30      	pop	{r4, r5, pc}

000bd5ae <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bd5ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd5b2:	b086      	sub	sp, #24
   bd5b4:	af00      	add	r7, sp, #0
   bd5b6:	4605      	mov	r5, r0
   bd5b8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bd5ba:	1d38      	adds	r0, r7, #4
   bd5bc:	2114      	movs	r1, #20
{
   bd5be:	4614      	mov	r4, r2
    va_copy(args2, args);
   bd5c0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bd5c2:	f7fc ff41 	bl	ba448 <vsnprintf>

    if (n<bufsize)
   bd5c6:	2813      	cmp	r0, #19
   bd5c8:	d80e      	bhi.n	bd5e8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bd5ca:	1d39      	adds	r1, r7, #4
   bd5cc:	4628      	mov	r0, r5
   bd5ce:	f7fa fe55 	bl	b827c <_ZN5Print5writeEPKc>
   bd5d2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bd5d4:	b11e      	cbz	r6, bd5de <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bd5d6:	4628      	mov	r0, r5
   bd5d8:	f7ff ffb5 	bl	bd546 <_ZN5Print7printlnEv>
   bd5dc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bd5de:	4620      	mov	r0, r4
   bd5e0:	3718      	adds	r7, #24
   bd5e2:	46bd      	mov	sp, r7
   bd5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bd5e8:	f100 0308 	add.w	r3, r0, #8
   bd5ec:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bd5f0:	46e8      	mov	r8, sp
        char bigger[n+1];
   bd5f2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bd5f6:	4622      	mov	r2, r4
   bd5f8:	1c41      	adds	r1, r0, #1
   bd5fa:	683b      	ldr	r3, [r7, #0]
   bd5fc:	4668      	mov	r0, sp
   bd5fe:	f7fc ff23 	bl	ba448 <vsnprintf>
  return write(str);
   bd602:	4669      	mov	r1, sp
   bd604:	4628      	mov	r0, r5
   bd606:	f7fa fe39 	bl	b827c <_ZN5Print5writeEPKc>
   bd60a:	4604      	mov	r4, r0
   bd60c:	46c5      	mov	sp, r8
   bd60e:	e7e1      	b.n	bd5d4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bd610 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bd610:	b510      	push	{r4, lr}
  if (0 == max) {
   bd612:	4604      	mov	r4, r0
   bd614:	b128      	cbz	r0, bd622 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bd616:	f001 fcad 	bl	bef74 <rand>
   bd61a:	fb90 f3f4 	sdiv	r3, r0, r4
   bd61e:	fb03 0414 	mls	r4, r3, r4, r0
}
   bd622:	4620      	mov	r0, r4
   bd624:	bd10      	pop	{r4, pc}
	...

000bd628 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bd628:	4b01      	ldr	r3, [pc, #4]	; (bd630 <_GLOBAL__sub_I_RGB+0x8>)
   bd62a:	2200      	movs	r2, #0
   bd62c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bd62e:	4770      	bx	lr
   bd630:	2003e6a8 	.word	0x2003e6a8

000bd634 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bd634:	2100      	movs	r1, #0
   bd636:	f7fc bd5b 	b.w	ba0f0 <hal_spi_release>

000bd63a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bd63a:	2100      	movs	r1, #0
   bd63c:	f7fc bd50 	b.w	ba0e0 <hal_spi_acquire>

000bd640 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bd640:	b510      	push	{r4, lr}
   bd642:	4604      	mov	r4, r0
   bd644:	4608      	mov	r0, r1
{
    _spi = spi;
   bd646:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bd648:	f7fc fd1a 	bl	ba080 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bd64c:	2300      	movs	r3, #0
   bd64e:	6063      	str	r3, [r4, #4]
}
   bd650:	4620      	mov	r0, r4
   bd652:	bd10      	pop	{r4, pc}

000bd654 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bd654:	b513      	push	{r0, r1, r4, lr}
   bd656:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bd658:	7800      	ldrb	r0, [r0, #0]
   bd65a:	f7ff ffee 	bl	bd63a <_ZN8SPIClass4lockEv.isra.0>
   bd65e:	b958      	cbnz	r0, bd678 <_ZN8SPIClass5beginEv+0x24>
   bd660:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bd662:	9001      	str	r0, [sp, #4]
   bd664:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bd668:	f7fc fcfa 	bl	ba060 <hal_spi_begin>
        unlock();
   bd66c:	9801      	ldr	r0, [sp, #4]
    }
}
   bd66e:	b002      	add	sp, #8
   bd670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bd674:	f7ff bfde 	b.w	bd634 <_ZN8SPIClass6unlockEv.isra.0>
   bd678:	b002      	add	sp, #8
   bd67a:	bd10      	pop	{r4, pc}

000bd67c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bd67c:	7800      	ldrb	r0, [r0, #0]
   bd67e:	f7ff bfd9 	b.w	bd634 <_ZN8SPIClass6unlockEv.isra.0>
	...

000bd684 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bd684:	0840      	lsrs	r0, r0, #1
{
   bd686:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bd688:	6018      	str	r0, [r3, #0]
   bd68a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bd68c:	6818      	ldr	r0, [r3, #0]
   bd68e:	4288      	cmp	r0, r1
   bd690:	b2e5      	uxtb	r5, r4
   bd692:	d906      	bls.n	bd6a2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bd694:	3401      	adds	r4, #1
   bd696:	2c08      	cmp	r4, #8
   bd698:	d002      	beq.n	bd6a0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bd69a:	0840      	lsrs	r0, r0, #1
   bd69c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bd69e:	e7f5      	b.n	bd68c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bd6a0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bd6a2:	4b02      	ldr	r3, [pc, #8]	; (bd6ac <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bd6a4:	5d5b      	ldrb	r3, [r3, r5]
   bd6a6:	7013      	strb	r3, [r2, #0]
}
   bd6a8:	bd30      	pop	{r4, r5, pc}
   bd6aa:	bf00      	nop
   bd6ac:	000c2570 	.word	0x000c2570

000bd6b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bd6b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd6b4:	4606      	mov	r6, r0
   bd6b6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bd6b8:	7800      	ldrb	r0, [r0, #0]
{
   bd6ba:	460c      	mov	r4, r1
    CHECK(lock());
   bd6bc:	f7ff ffbd 	bl	bd63a <_ZN8SPIClass4lockEv.isra.0>
   bd6c0:	2800      	cmp	r0, #0
   bd6c2:	db1b      	blt.n	bd6fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bd6c4:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bd6c6:	2214      	movs	r2, #20
   bd6c8:	2100      	movs	r1, #0
   bd6ca:	a809      	add	r0, sp, #36	; 0x24
   bd6cc:	f001 fc1b 	bl	bef06 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bd6d0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bd6d2:	2200      	movs	r2, #0
   bd6d4:	a909      	add	r1, sp, #36	; 0x24
   bd6d6:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bd6d8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bd6dc:	f7fc fce0 	bl	ba0a0 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bd6e0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bd6e4:	b113      	cbz	r3, bd6ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bd6e6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bd6ea:	b155      	cbz	r5, bd702 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bd6ec:	2700      	movs	r7, #0
   bd6ee:	46b9      	mov	r9, r7
   bd6f0:	46b8      	mov	r8, r7
   bd6f2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bd6f4:	7923      	ldrb	r3, [r4, #4]
   bd6f6:	b15d      	cbz	r5, bd710 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bd6f8:	b1c3      	cbz	r3, bd72c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bd6fa:	2000      	movs	r0, #0
}
   bd6fc:	b00f      	add	sp, #60	; 0x3c
   bd6fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bd702:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bd706:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bd70a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bd70e:	e7f1      	b.n	bd6f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bd710:	2b00      	cmp	r3, #0
   bd712:	d135      	bne.n	bd780 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bd714:	68a3      	ldr	r3, [r4, #8]
   bd716:	4543      	cmp	r3, r8
   bd718:	d108      	bne.n	bd72c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bd71a:	f88d 9020 	strb.w	r9, [sp, #32]
   bd71e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bd722:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bd726:	89a3      	ldrh	r3, [r4, #12]
   bd728:	429a      	cmp	r2, r3
   bd72a:	d0e6      	beq.n	bd6fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bd72c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bd72e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bd730:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bd734:	980a      	ldr	r0, [sp, #40]	; 0x28
   bd736:	ab04      	add	r3, sp, #16
   bd738:	f10d 020f 	add.w	r2, sp, #15
   bd73c:	f7ff ffa2 	bl	bd684 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bd740:	7921      	ldrb	r1, [r4, #4]
   bd742:	b985      	cbnz	r5, bd766 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bd744:	b989      	cbnz	r1, bd76a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bd746:	68a3      	ldr	r3, [r4, #8]
   bd748:	4543      	cmp	r3, r8
   bd74a:	d30e      	bcc.n	bd76a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bd74c:	f88d 9020 	strb.w	r9, [sp, #32]
   bd750:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bd754:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bd758:	89a3      	ldrh	r3, [r4, #12]
   bd75a:	429a      	cmp	r2, r3
   bd75c:	d105      	bne.n	bd76a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bd75e:	9b04      	ldr	r3, [sp, #16]
   bd760:	4543      	cmp	r3, r8
   bd762:	d102      	bne.n	bd76a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bd764:	e7c9      	b.n	bd6fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bd766:	2900      	cmp	r1, #0
   bd768:	d1f9      	bne.n	bd75e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bd76a:	2300      	movs	r3, #0
   bd76c:	9301      	str	r3, [sp, #4]
   bd76e:	7b63      	ldrb	r3, [r4, #13]
   bd770:	9300      	str	r3, [sp, #0]
   bd772:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bd776:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bd778:	7830      	ldrb	r0, [r6, #0]
   bd77a:	f7fc fca9 	bl	ba0d0 <hal_spi_set_settings>
   bd77e:	e7bc      	b.n	bd6fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bd780:	e9cd 5500 	strd	r5, r5, [sp]
   bd784:	462b      	mov	r3, r5
   bd786:	462a      	mov	r2, r5
   bd788:	2101      	movs	r1, #1
   bd78a:	e7f5      	b.n	bd778 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bd78c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bd78c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bd78e:	7800      	ldrb	r0, [r0, #0]
   bd790:	f7fc fc6e 	bl	ba070 <hal_spi_transfer>
}
   bd794:	b2c0      	uxtb	r0, r0
   bd796:	bd08      	pop	{r3, pc}

000bd798 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   bd798:	b530      	push	{r4, r5, lr}
   bd79a:	b087      	sub	sp, #28
   bd79c:	4604      	mov	r4, r0
   bd79e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   bd7a0:	9500      	str	r5, [sp, #0]
   bd7a2:	7800      	ldrb	r0, [r0, #0]
   bd7a4:	f7fc fc84 	bl	ba0b0 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   bd7a8:	b93d      	cbnz	r5, bd7ba <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   bd7aa:	7820      	ldrb	r0, [r4, #0]
   bd7ac:	a902      	add	r1, sp, #8
   bd7ae:	f7fc fc87 	bl	ba0c0 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   bd7b2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bd7b6:	07db      	lsls	r3, r3, #31
   bd7b8:	d4f7      	bmi.n	bd7aa <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   bd7ba:	b007      	add	sp, #28
   bd7bc:	bd30      	pop	{r4, r5, pc}

000bd7be <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   bd7be:	b510      	push	{r4, lr}
   bd7c0:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bd7c2:	f7fc fb85 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   bd7c6:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   bd7c8:	6823      	ldr	r3, [r4, #0]
   bd7ca:	4620      	mov	r0, r4
   bd7cc:	695b      	ldr	r3, [r3, #20]
   bd7ce:	4798      	blx	r3
    if (c >= 0) return c;
   bd7d0:	2800      	cmp	r0, #0
   bd7d2:	da08      	bge.n	bd7e6 <_ZN6Stream9timedReadEv+0x28>
   bd7d4:	f7fc fb7c 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   bd7d8:	68e3      	ldr	r3, [r4, #12]
   bd7da:	1ac0      	subs	r0, r0, r3
   bd7dc:	68a3      	ldr	r3, [r4, #8]
   bd7de:	4298      	cmp	r0, r3
   bd7e0:	d3f2      	bcc.n	bd7c8 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   bd7e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   bd7e6:	bd10      	pop	{r4, pc}

000bd7e8 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   bd7e8:	b570      	push	{r4, r5, r6, lr}
   bd7ea:	460d      	mov	r5, r1
  String ret;
   bd7ec:	4909      	ldr	r1, [pc, #36]	; (bd814 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   bd7ee:	4604      	mov	r4, r0
   bd7f0:	4616      	mov	r6, r2
  String ret;
   bd7f2:	f000 f85c 	bl	bd8ae <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   bd7f6:	4628      	mov	r0, r5
   bd7f8:	f7ff ffe1 	bl	bd7be <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   bd7fc:	2800      	cmp	r0, #0
   bd7fe:	db06      	blt.n	bd80e <_ZN6Stream15readStringUntilEc+0x26>
   bd800:	4286      	cmp	r6, r0
   bd802:	d004      	beq.n	bd80e <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   bd804:	b2c1      	uxtb	r1, r0
   bd806:	4620      	mov	r0, r4
   bd808:	f000 f8d0 	bl	bd9ac <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   bd80c:	e7f3      	b.n	bd7f6 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   bd80e:	4620      	mov	r0, r4
   bd810:	bd70      	pop	{r4, r5, r6, pc}
   bd812:	bf00      	nop
   bd814:	000c1606 	.word	0x000c1606

000bd818 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bd818:	b510      	push	{r4, lr}
   bd81a:	4604      	mov	r4, r0
{
	free(buffer);
   bd81c:	6800      	ldr	r0, [r0, #0]
   bd81e:	f7fc fdeb 	bl	ba3f8 <free>
}
   bd822:	4620      	mov	r0, r4
   bd824:	bd10      	pop	{r4, pc}

000bd826 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bd826:	b510      	push	{r4, lr}
   bd828:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bd82a:	6800      	ldr	r0, [r0, #0]
   bd82c:	b108      	cbz	r0, bd832 <_ZN6String10invalidateEv+0xc>
   bd82e:	f7fc fde3 	bl	ba3f8 <free>
	buffer = NULL;
   bd832:	2300      	movs	r3, #0
	capacity = len = 0;
   bd834:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bd838:	6023      	str	r3, [r4, #0]
}
   bd83a:	bd10      	pop	{r4, pc}

000bd83c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bd83c:	b538      	push	{r3, r4, r5, lr}
   bd83e:	4604      	mov	r4, r0
   bd840:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bd842:	6800      	ldr	r0, [r0, #0]
   bd844:	3101      	adds	r1, #1
   bd846:	f7fc fddf 	bl	ba408 <realloc>
	if (newbuffer) {
   bd84a:	b110      	cbz	r0, bd852 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bd84c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bd850:	2001      	movs	r0, #1
	}
	return 0;
}
   bd852:	bd38      	pop	{r3, r4, r5, pc}

000bd854 <_ZN6String7reserveEj>:
{
   bd854:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bd856:	6803      	ldr	r3, [r0, #0]
{
   bd858:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bd85a:	b123      	cbz	r3, bd866 <_ZN6String7reserveEj+0x12>
   bd85c:	6843      	ldr	r3, [r0, #4]
   bd85e:	428b      	cmp	r3, r1
   bd860:	d301      	bcc.n	bd866 <_ZN6String7reserveEj+0x12>
   bd862:	2001      	movs	r0, #1
}
   bd864:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bd866:	4620      	mov	r0, r4
   bd868:	f7ff ffe8 	bl	bd83c <_ZN6String12changeBufferEj>
   bd86c:	2800      	cmp	r0, #0
   bd86e:	d0f9      	beq.n	bd864 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bd870:	68a3      	ldr	r3, [r4, #8]
   bd872:	2b00      	cmp	r3, #0
   bd874:	d1f5      	bne.n	bd862 <_ZN6String7reserveEj+0xe>
   bd876:	6822      	ldr	r2, [r4, #0]
   bd878:	7013      	strb	r3, [r2, #0]
   bd87a:	e7f2      	b.n	bd862 <_ZN6String7reserveEj+0xe>

000bd87c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bd87c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd87e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bd880:	4611      	mov	r1, r2
   bd882:	9201      	str	r2, [sp, #4]
{
   bd884:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bd886:	f7ff ffe5 	bl	bd854 <_ZN6String7reserveEj>
   bd88a:	9a01      	ldr	r2, [sp, #4]
   bd88c:	b928      	cbnz	r0, bd89a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bd88e:	4620      	mov	r0, r4
   bd890:	f7ff ffc9 	bl	bd826 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bd894:	4620      	mov	r0, r4
   bd896:	b003      	add	sp, #12
   bd898:	bd30      	pop	{r4, r5, pc}
	len = length;
   bd89a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bd89c:	4629      	mov	r1, r5
   bd89e:	6820      	ldr	r0, [r4, #0]
   bd8a0:	f001 fb09 	bl	beeb6 <memcpy>
	buffer[len] = 0;
   bd8a4:	6822      	ldr	r2, [r4, #0]
   bd8a6:	68a3      	ldr	r3, [r4, #8]
   bd8a8:	2100      	movs	r1, #0
   bd8aa:	54d1      	strb	r1, [r2, r3]
	return *this;
   bd8ac:	e7f2      	b.n	bd894 <_ZN6String4copyEPKcj+0x18>

000bd8ae <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bd8ae:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bd8b0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bd8b2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bd8b6:	4604      	mov	r4, r0
	len = 0;
   bd8b8:	6083      	str	r3, [r0, #8]
	flags = 0;
   bd8ba:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bd8bc:	b141      	cbz	r1, bd8d0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bd8be:	4608      	mov	r0, r1
   bd8c0:	9101      	str	r1, [sp, #4]
   bd8c2:	f001 fbd4 	bl	bf06e <strlen>
   bd8c6:	9901      	ldr	r1, [sp, #4]
   bd8c8:	4602      	mov	r2, r0
   bd8ca:	4620      	mov	r0, r4
   bd8cc:	f7ff ffd6 	bl	bd87c <_ZN6String4copyEPKcj>
}
   bd8d0:	4620      	mov	r0, r4
   bd8d2:	b002      	add	sp, #8
   bd8d4:	bd10      	pop	{r4, pc}

000bd8d6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bd8d6:	b538      	push	{r3, r4, r5, lr}
   bd8d8:	4605      	mov	r5, r0
	if (buffer) {
   bd8da:	6800      	ldr	r0, [r0, #0]
{
   bd8dc:	460c      	mov	r4, r1
	if (buffer) {
   bd8de:	b168      	cbz	r0, bd8fc <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bd8e0:	686a      	ldr	r2, [r5, #4]
   bd8e2:	688b      	ldr	r3, [r1, #8]
   bd8e4:	429a      	cmp	r2, r3
   bd8e6:	d307      	bcc.n	bd8f8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bd8e8:	6809      	ldr	r1, [r1, #0]
   bd8ea:	f001 fb9a 	bl	bf022 <strcpy>
			len = rhs.len;
   bd8ee:	68a3      	ldr	r3, [r4, #8]
   bd8f0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bd8f2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bd8f4:	60a3      	str	r3, [r4, #8]
}
   bd8f6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bd8f8:	f7fc fd7e 	bl	ba3f8 <free>
	buffer = rhs.buffer;
   bd8fc:	6823      	ldr	r3, [r4, #0]
   bd8fe:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bd900:	6863      	ldr	r3, [r4, #4]
   bd902:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bd904:	68a3      	ldr	r3, [r4, #8]
   bd906:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bd908:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bd90a:	e9c4 3300 	strd	r3, r3, [r4]
   bd90e:	e7f1      	b.n	bd8f4 <_ZN6String4moveERS_+0x1e>

000bd910 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bd910:	b510      	push	{r4, lr}
	buffer = NULL;
   bd912:	2300      	movs	r3, #0
	capacity = 0;
   bd914:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bd918:	4604      	mov	r4, r0
	len = 0;
   bd91a:	6083      	str	r3, [r0, #8]
	flags = 0;
   bd91c:	7303      	strb	r3, [r0, #12]
	move(rval);
   bd91e:	f7ff ffda 	bl	bd8d6 <_ZN6String4moveERS_>
}
   bd922:	4620      	mov	r0, r4
   bd924:	bd10      	pop	{r4, pc}

000bd926 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bd926:	4288      	cmp	r0, r1
{
   bd928:	b510      	push	{r4, lr}
   bd92a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bd92c:	d005      	beq.n	bd93a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bd92e:	680b      	ldr	r3, [r1, #0]
   bd930:	b12b      	cbz	r3, bd93e <_ZN6StringaSERKS_+0x18>
   bd932:	688a      	ldr	r2, [r1, #8]
   bd934:	4619      	mov	r1, r3
   bd936:	f7ff ffa1 	bl	bd87c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bd93a:	4620      	mov	r0, r4
   bd93c:	bd10      	pop	{r4, pc}
	else invalidate();
   bd93e:	f7ff ff72 	bl	bd826 <_ZN6String10invalidateEv>
   bd942:	e7fa      	b.n	bd93a <_ZN6StringaSERKS_+0x14>

000bd944 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bd944:	b510      	push	{r4, lr}
	buffer = NULL;
   bd946:	2300      	movs	r3, #0
String::String(const String &value)
   bd948:	4604      	mov	r4, r0
	capacity = 0;
   bd94a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bd94e:	6083      	str	r3, [r0, #8]
	flags = 0;
   bd950:	7303      	strb	r3, [r0, #12]
	*this = value;
   bd952:	f7ff ffe8 	bl	bd926 <_ZN6StringaSERKS_>
}
   bd956:	4620      	mov	r0, r4
   bd958:	bd10      	pop	{r4, pc}

000bd95a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bd95a:	b513      	push	{r0, r1, r4, lr}
   bd95c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bd95e:	b159      	cbz	r1, bd978 <_ZN6StringaSEPKc+0x1e>
   bd960:	4608      	mov	r0, r1
   bd962:	9101      	str	r1, [sp, #4]
   bd964:	f001 fb83 	bl	bf06e <strlen>
   bd968:	9901      	ldr	r1, [sp, #4]
   bd96a:	4602      	mov	r2, r0
   bd96c:	4620      	mov	r0, r4
   bd96e:	f7ff ff85 	bl	bd87c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bd972:	4620      	mov	r0, r4
   bd974:	b002      	add	sp, #8
   bd976:	bd10      	pop	{r4, pc}
	else invalidate();
   bd978:	f7ff ff55 	bl	bd826 <_ZN6String10invalidateEv>
   bd97c:	e7f9      	b.n	bd972 <_ZN6StringaSEPKc+0x18>

000bd97e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bd97e:	b570      	push	{r4, r5, r6, lr}
   bd980:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bd982:	460e      	mov	r6, r1
   bd984:	b909      	cbnz	r1, bd98a <_ZN6String6concatEPKcj+0xc>
   bd986:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bd988:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bd98a:	b16a      	cbz	r2, bd9a8 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bd98c:	6884      	ldr	r4, [r0, #8]
   bd98e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bd990:	4621      	mov	r1, r4
   bd992:	f7ff ff5f 	bl	bd854 <_ZN6String7reserveEj>
   bd996:	2800      	cmp	r0, #0
   bd998:	d0f5      	beq.n	bd986 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bd99a:	6828      	ldr	r0, [r5, #0]
   bd99c:	68ab      	ldr	r3, [r5, #8]
   bd99e:	4631      	mov	r1, r6
   bd9a0:	4418      	add	r0, r3
   bd9a2:	f001 fb3e 	bl	bf022 <strcpy>
	len = newlen;
   bd9a6:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bd9a8:	2001      	movs	r0, #1
   bd9aa:	e7ed      	b.n	bd988 <_ZN6String6concatEPKcj+0xa>

000bd9ac <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   bd9ac:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   bd9ae:	2300      	movs	r3, #0
	buf[0] = c;
   bd9b0:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   bd9b4:	2201      	movs	r2, #1
   bd9b6:	a901      	add	r1, sp, #4
	buf[1] = 0;
   bd9b8:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   bd9bc:	f7ff ffdf 	bl	bd97e <_ZN6String6concatEPKcj>
}
   bd9c0:	b003      	add	sp, #12
   bd9c2:	f85d fb04 	ldr.w	pc, [sp], #4

000bd9c6 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   bd9c6:	6802      	ldr	r2, [r0, #0]
{
   bd9c8:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   bd9ca:	6809      	ldr	r1, [r1, #0]
   bd9cc:	b162      	cbz	r2, bd9e8 <_ZNK6String9compareToERKS_+0x22>
   bd9ce:	b941      	cbnz	r1, bd9e2 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   bd9d0:	6880      	ldr	r0, [r0, #8]
   bd9d2:	b160      	cbz	r0, bd9ee <_ZNK6String9compareToERKS_+0x28>
   bd9d4:	7810      	ldrb	r0, [r2, #0]
   bd9d6:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   bd9d8:	6898      	ldr	r0, [r3, #8]
   bd9da:	b140      	cbz	r0, bd9ee <_ZNK6String9compareToERKS_+0x28>
   bd9dc:	7809      	ldrb	r1, [r1, #0]
   bd9de:	4248      	negs	r0, r1
   bd9e0:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   bd9e2:	4610      	mov	r0, r2
   bd9e4:	f001 bb13 	b.w	bf00e <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   bd9e8:	2900      	cmp	r1, #0
   bd9ea:	d1f5      	bne.n	bd9d8 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   bd9ec:	4608      	mov	r0, r1
}
   bd9ee:	4770      	bx	lr

000bd9f0 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   bd9f0:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   bd9f2:	6882      	ldr	r2, [r0, #8]
   bd9f4:	688b      	ldr	r3, [r1, #8]
   bd9f6:	429a      	cmp	r2, r3
   bd9f8:	d105      	bne.n	bda06 <_ZNK6String6equalsERKS_+0x16>
   bd9fa:	f7ff ffe4 	bl	bd9c6 <_ZNK6String9compareToERKS_>
   bd9fe:	fab0 f080 	clz	r0, r0
   bda02:	0940      	lsrs	r0, r0, #5
}
   bda04:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   bda06:	2000      	movs	r0, #0
   bda08:	e7fc      	b.n	bda04 <_ZNK6String6equalsERKS_+0x14>

000bda0a <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   bda0a:	6883      	ldr	r3, [r0, #8]
   bda0c:	428b      	cmp	r3, r1
   bda0e:	d903      	bls.n	bda18 <_ZNK6StringixEj+0xe>
   bda10:	6800      	ldr	r0, [r0, #0]
   bda12:	b110      	cbz	r0, bda1a <_ZNK6StringixEj+0x10>
	return buffer[index];
   bda14:	5c40      	ldrb	r0, [r0, r1]
   bda16:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   bda18:	2000      	movs	r0, #0
}
   bda1a:	4770      	bx	lr

000bda1c <_ZNK6String6charAtEj>:
	return operator[](loc);
   bda1c:	f7ff bff5 	b.w	bda0a <_ZNK6StringixEj>

000bda20 <_ZNK6String8getBytesEPhjj>:

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   bda20:	b558      	push	{r3, r4, r6, lr}
   bda22:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   bda24:	b12a      	cbz	r2, bda32 <_ZNK6String8getBytesEPhjj+0x12>
   bda26:	b121      	cbz	r1, bda32 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   bda28:	6884      	ldr	r4, [r0, #8]
   bda2a:	42a3      	cmp	r3, r4
   bda2c:	d302      	bcc.n	bda34 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   bda2e:	2300      	movs	r3, #0
   bda30:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   bda32:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   bda34:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   bda36:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   bda38:	6801      	ldr	r1, [r0, #0]
   bda3a:	4294      	cmp	r4, r2
   bda3c:	bf28      	it	cs
   bda3e:	4614      	movcs	r4, r2
   bda40:	4419      	add	r1, r3
   bda42:	4622      	mov	r2, r4
   bda44:	4630      	mov	r0, r6
   bda46:	f001 fb2e 	bl	bf0a6 <strncpy>
	buf[n] = 0;
   bda4a:	2300      	movs	r3, #0
   bda4c:	5533      	strb	r3, [r6, r4]
   bda4e:	e7f0      	b.n	bda32 <_ZNK6String8getBytesEPhjj+0x12>

000bda50 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bda50:	4b05      	ldr	r3, [pc, #20]	; (bda68 <_GLOBAL__sub_I_System+0x18>)
   bda52:	2202      	movs	r2, #2
   bda54:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   bda56:	4b05      	ldr	r3, [pc, #20]	; (bda6c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bda58:	4a05      	ldr	r2, [pc, #20]	; (bda70 <_GLOBAL__sub_I_System+0x20>)
   bda5a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bda5c:	2000      	movs	r0, #0
   bda5e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bda62:	f7fc bbe5 	b.w	ba230 <set_system_mode>
   bda66:	bf00      	nop
   bda68:	2003e6c4 	.word	0x2003e6c4
   bda6c:	2003e6b8 	.word	0x2003e6b8
   bda70:	ffff0000 	.word	0xffff0000

000bda74 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bda74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bda78:	4a15      	ldr	r2, [pc, #84]	; (bdad0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bda7a:	f8df 8060 	ldr.w	r8, [pc, #96]	; bdadc <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bda7e:	e9d2 6300 	ldrd	r6, r3, [r2]
   bda82:	1980      	adds	r0, r0, r6
   bda84:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bda88:	4b12      	ldr	r3, [pc, #72]	; (bdad4 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bda8a:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bda8e:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bda92:	1986      	adds	r6, r0, r6
   bda94:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bda98:	42bb      	cmp	r3, r7
   bda9a:	bf08      	it	eq
   bda9c:	42b2      	cmpeq	r2, r6
{
   bda9e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bdaa0:	d013      	beq.n	bdaca <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bdaa2:	a903      	add	r1, sp, #12
   bdaa4:	4668      	mov	r0, sp
   bdaa6:	e9cd 6700 	strd	r6, r7, [sp]
   bdaaa:	f7fc fcfd 	bl	ba4a8 <localtime_r>
	calendar_time.tm_year += 1900;
   bdaae:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bdab0:	4d09      	ldr	r5, [pc, #36]	; (bdad8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bdab2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bdab6:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bdab8:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bdaba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bdabc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bdabe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bdac0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bdac2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bdac6:	6823      	ldr	r3, [r4, #0]
   bdac8:	602b      	str	r3, [r5, #0]
    }
}
   bdaca:	b00c      	add	sp, #48	; 0x30
   bdacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bdad0:	2003e6f8 	.word	0x2003e6f8
   bdad4:	2003e6f0 	.word	0x2003e6f0
   bdad8:	2003e6cc 	.word	0x2003e6cc
   bdadc:	2003e700 	.word	0x2003e700

000bdae0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   bdae0:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bdae2:	2000      	movs	r0, #0
   bdae4:	f7fc fc10 	bl	ba308 <spark_sync_time_pending>
   bdae8:	b128      	cbz	r0, bdaf6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bdaea:	f7fc fbf5 	bl	ba2d8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bdaee:	f080 0001 	eor.w	r0, r0, #1
   bdaf2:	b2c0      	uxtb	r0, r0
    }
   bdaf4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bdaf6:	2001      	movs	r0, #1
   bdaf8:	e7fc      	b.n	bdaf4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bdafc <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   bdafc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bdafe:	f7ff ffb9 	bl	bda74 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   bdb02:	4b02      	ldr	r3, [pc, #8]	; (bdb0c <_ZN9TimeClass5monthEx+0x10>)
   bdb04:	6918      	ldr	r0, [r3, #16]
}
   bdb06:	3001      	adds	r0, #1
   bdb08:	bd08      	pop	{r3, pc}
   bdb0a:	bf00      	nop
   bdb0c:	2003e6cc 	.word	0x2003e6cc

000bdb10 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   bdb10:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bdb12:	2000      	movs	r0, #0
   bdb14:	f7fc f9e4 	bl	b9ee0 <hal_rtc_time_is_valid>
    if (rtcstate)
   bdb18:	4604      	mov	r4, r0
   bdb1a:	b9a0      	cbnz	r0, bdb46 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bdb1c:	f7fc fb80 	bl	ba220 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bdb20:	2801      	cmp	r0, #1
   bdb22:	d110      	bne.n	bdb46 <_ZN9TimeClass7isValidEv+0x36>
   bdb24:	4620      	mov	r0, r4
   bdb26:	f7fc fba3 	bl	ba270 <system_thread_get_state>
   bdb2a:	b960      	cbnz	r0, bdb46 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bdb2c:	f7ff ffd8 	bl	bdae0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bdb30:	b910      	cbnz	r0, bdb38 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bdb32:	f7fc fbc1 	bl	ba2b8 <spark_process>
        while (_while() && !_condition()) {
   bdb36:	e7f9      	b.n	bdb2c <_ZN9TimeClass7isValidEv+0x1c>
   bdb38:	f7ff ffd2 	bl	bdae0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bdb3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bdb40:	2000      	movs	r0, #0
   bdb42:	f7fc b9cd 	b.w	b9ee0 <hal_rtc_time_is_valid>
}
   bdb46:	4620      	mov	r0, r4
   bdb48:	bd10      	pop	{r4, pc}

000bdb4a <_ZN9TimeClass3nowEv>:
{
   bdb4a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bdb4c:	f7ff ffe0 	bl	bdb10 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bdb50:	2210      	movs	r2, #16
   bdb52:	2100      	movs	r1, #0
   bdb54:	4668      	mov	r0, sp
   bdb56:	f001 f9d6 	bl	bef06 <memset>
    hal_rtc_get_time(&tv, nullptr);
   bdb5a:	2100      	movs	r1, #0
   bdb5c:	4668      	mov	r0, sp
   bdb5e:	f7fc f9c7 	bl	b9ef0 <hal_rtc_get_time>
}
   bdb62:	9800      	ldr	r0, [sp, #0]
   bdb64:	b005      	add	sp, #20
   bdb66:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bdb6c <_ZN9TimeClass4hourEv>:
{
   bdb6c:	b508      	push	{r3, lr}
	return hour(now());
   bdb6e:	f7ff ffec 	bl	bdb4a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bdb72:	17c1      	asrs	r1, r0, #31
   bdb74:	f7ff ff7e 	bl	bda74 <_ZL22Refresh_UnixTime_Cachex>
}
   bdb78:	4b01      	ldr	r3, [pc, #4]	; (bdb80 <_ZN9TimeClass4hourEv+0x14>)
   bdb7a:	6898      	ldr	r0, [r3, #8]
   bdb7c:	bd08      	pop	{r3, pc}
   bdb7e:	bf00      	nop
   bdb80:	2003e6cc 	.word	0x2003e6cc

000bdb84 <_ZN9TimeClass6minuteEv>:
{
   bdb84:	b508      	push	{r3, lr}
	return minute(now());
   bdb86:	f7ff ffe0 	bl	bdb4a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bdb8a:	17c1      	asrs	r1, r0, #31
   bdb8c:	f7ff ff72 	bl	bda74 <_ZL22Refresh_UnixTime_Cachex>
}
   bdb90:	4b01      	ldr	r3, [pc, #4]	; (bdb98 <_ZN9TimeClass6minuteEv+0x14>)
   bdb92:	6858      	ldr	r0, [r3, #4]
   bdb94:	bd08      	pop	{r3, pc}
   bdb96:	bf00      	nop
   bdb98:	2003e6cc 	.word	0x2003e6cc

000bdb9c <_ZN9TimeClass6secondEv>:
{
   bdb9c:	b508      	push	{r3, lr}
	return second(now());
   bdb9e:	f7ff ffd4 	bl	bdb4a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bdba2:	17c1      	asrs	r1, r0, #31
   bdba4:	f7ff ff66 	bl	bda74 <_ZL22Refresh_UnixTime_Cachex>
}
   bdba8:	4b01      	ldr	r3, [pc, #4]	; (bdbb0 <_ZN9TimeClass6secondEv+0x14>)
   bdbaa:	6818      	ldr	r0, [r3, #0]
   bdbac:	bd08      	pop	{r3, pc}
   bdbae:	bf00      	nop
   bdbb0:	2003e6cc 	.word	0x2003e6cc

000bdbb4 <_ZN9TimeClass3dayEv>:
{
   bdbb4:	b508      	push	{r3, lr}
	return day(now());
   bdbb6:	f7ff ffc8 	bl	bdb4a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bdbba:	17c1      	asrs	r1, r0, #31
   bdbbc:	f7ff ff5a 	bl	bda74 <_ZL22Refresh_UnixTime_Cachex>
}
   bdbc0:	4b01      	ldr	r3, [pc, #4]	; (bdbc8 <_ZN9TimeClass3dayEv+0x14>)
   bdbc2:	68d8      	ldr	r0, [r3, #12]
   bdbc4:	bd08      	pop	{r3, pc}
   bdbc6:	bf00      	nop
   bdbc8:	2003e6cc 	.word	0x2003e6cc

000bdbcc <_ZN9TimeClass5monthEv>:
{
   bdbcc:	b508      	push	{r3, lr}
	return month(now());
   bdbce:	f7ff ffbc 	bl	bdb4a <_ZN9TimeClass3nowEv>
}
   bdbd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   bdbd6:	17c1      	asrs	r1, r0, #31
   bdbd8:	f7ff bf90 	b.w	bdafc <_ZN9TimeClass5monthEx>

000bdbdc <_ZN9TimeClass4yearEv>:
{
   bdbdc:	b508      	push	{r3, lr}
	return year(now());
   bdbde:	f7ff ffb4 	bl	bdb4a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bdbe2:	17c1      	asrs	r1, r0, #31
   bdbe4:	f7ff ff46 	bl	bda74 <_ZL22Refresh_UnixTime_Cachex>
}
   bdbe8:	4b01      	ldr	r3, [pc, #4]	; (bdbf0 <_ZN9TimeClass4yearEv+0x14>)
   bdbea:	6958      	ldr	r0, [r3, #20]
   bdbec:	bd08      	pop	{r3, pc}
   bdbee:	bf00      	nop
   bdbf0:	2003e6cc 	.word	0x2003e6cc

000bdbf4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bdbf4:	4b02      	ldr	r3, [pc, #8]	; (bdc00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bdbf6:	681a      	ldr	r2, [r3, #0]
   bdbf8:	4b02      	ldr	r3, [pc, #8]	; (bdc04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bdbfa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bdbfc:	4770      	bx	lr
   bdbfe:	bf00      	nop
   bdc00:	2003daac 	.word	0x2003daac
   bdc04:	2003e6c8 	.word	0x2003e6c8

000bdc08 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bdc08:	4770      	bx	lr

000bdc0a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bdc0a:	7441      	strb	r1, [r0, #17]
}
   bdc0c:	4770      	bx	lr

000bdc0e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bdc0e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bdc10:	7c00      	ldrb	r0, [r0, #16]
   bdc12:	f7fc faa5 	bl	ba160 <hal_usart_available_data_for_write>
}
   bdc16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bdc1a:	bd08      	pop	{r3, pc}

000bdc1c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bdc1c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bdc1e:	7c00      	ldrb	r0, [r0, #16]
   bdc20:	f7fc fa76 	bl	ba110 <hal_usart_available>
}
   bdc24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bdc28:	bd08      	pop	{r3, pc}

000bdc2a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bdc2a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bdc2c:	7c00      	ldrb	r0, [r0, #16]
   bdc2e:	f7fc fa7f 	bl	ba130 <hal_usart_peek>
}
   bdc32:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bdc36:	bd08      	pop	{r3, pc}

000bdc38 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bdc38:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bdc3a:	7c00      	ldrb	r0, [r0, #16]
   bdc3c:	f7fc fa70 	bl	ba120 <hal_usart_read>
}
   bdc40:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bdc44:	bd08      	pop	{r3, pc}

000bdc46 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bdc46:	7c00      	ldrb	r0, [r0, #16]
   bdc48:	f7fc ba7a 	b.w	ba140 <hal_usart_flush>

000bdc4c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bdc4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bdc4e:	7c45      	ldrb	r5, [r0, #17]
{
   bdc50:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bdc52:	b12d      	cbz	r5, bdc60 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bdc54:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bdc56:	b003      	add	sp, #12
   bdc58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bdc5c:	f7fc ba50 	b.w	ba100 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bdc60:	7c00      	ldrb	r0, [r0, #16]
   bdc62:	9101      	str	r1, [sp, #4]
   bdc64:	f7fc fa7c 	bl	ba160 <hal_usart_available_data_for_write>
   bdc68:	2800      	cmp	r0, #0
   bdc6a:	9901      	ldr	r1, [sp, #4]
   bdc6c:	dcf2      	bgt.n	bdc54 <_ZN11USARTSerial5writeEh+0x8>
}
   bdc6e:	4628      	mov	r0, r5
   bdc70:	b003      	add	sp, #12
   bdc72:	bd30      	pop	{r4, r5, pc}

000bdc74 <_ZN11USARTSerialD0Ev>:
   bdc74:	b510      	push	{r4, lr}
   bdc76:	2114      	movs	r1, #20
   bdc78:	4604      	mov	r4, r0
   bdc7a:	f7f6 fa10 	bl	b409e <_ZdlPvj>
   bdc7e:	4620      	mov	r0, r4
   bdc80:	bd10      	pop	{r4, pc}
	...

000bdc84 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bdc84:	b510      	push	{r4, lr}
   bdc86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bdc8a:	4604      	mov	r4, r0
   bdc8c:	4608      	mov	r0, r1
   bdc8e:	4611      	mov	r1, r2
   bdc90:	2200      	movs	r2, #0
   bdc92:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bdc96:	4b04      	ldr	r3, [pc, #16]	; (bdca8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bdc98:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bdc9a:	2301      	movs	r3, #1
  _serial = serial;
   bdc9c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bdc9e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bdca0:	f7fc fa6e 	bl	ba180 <hal_usart_init_ex>
}
   bdca4:	4620      	mov	r0, r4
   bdca6:	bd10      	pop	{r4, pc}
   bdca8:	000c259c 	.word	0x000c259c

000bdcac <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bdcac:	7c00      	ldrb	r0, [r0, #16]
   bdcae:	2300      	movs	r3, #0
   bdcb0:	f7fc ba5e 	b.w	ba170 <hal_usart_begin_config>

000bdcb4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bdcb4:	2200      	movs	r2, #0
   bdcb6:	f7ff bff9 	b.w	bdcac <_ZN11USARTSerial5beginEmm>

000bdcba <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bdcba:	7441      	strb	r1, [r0, #17]
}
   bdcbc:	4770      	bx	lr

000bdcbe <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bdcbe:	4770      	bx	lr

000bdcc0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bdcc0:	4770      	bx	lr

000bdcc2 <_ZN9USBSerial4readEv>:
{
   bdcc2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bdcc4:	2100      	movs	r1, #0
   bdcc6:	7c00      	ldrb	r0, [r0, #16]
   bdcc8:	f7fc fa82 	bl	ba1d0 <HAL_USB_USART_Receive_Data>
}
   bdccc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bdcd0:	bd08      	pop	{r3, pc}

000bdcd2 <_ZN9USBSerial4peekEv>:
{
   bdcd2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bdcd4:	2101      	movs	r1, #1
   bdcd6:	7c00      	ldrb	r0, [r0, #16]
   bdcd8:	f7fc fa7a 	bl	ba1d0 <HAL_USB_USART_Receive_Data>
}
   bdcdc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bdce0:	bd08      	pop	{r3, pc}

000bdce2 <_ZN9USBSerial17availableForWriteEv>:
{
   bdce2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bdce4:	7c00      	ldrb	r0, [r0, #16]
   bdce6:	f7fc fa6b 	bl	ba1c0 <HAL_USB_USART_Available_Data_For_Write>
}
   bdcea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bdcee:	bd08      	pop	{r3, pc}

000bdcf0 <_ZN9USBSerial9availableEv>:
{
   bdcf0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bdcf2:	7c00      	ldrb	r0, [r0, #16]
   bdcf4:	f7fc fa5c 	bl	ba1b0 <HAL_USB_USART_Available_Data>
}
   bdcf8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bdcfc:	bd08      	pop	{r3, pc}

000bdcfe <_ZN9USBSerial5writeEh>:
{
   bdcfe:	b513      	push	{r0, r1, r4, lr}
   bdd00:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bdd02:	7c00      	ldrb	r0, [r0, #16]
{
   bdd04:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bdd06:	f7fc fa5b 	bl	ba1c0 <HAL_USB_USART_Available_Data_For_Write>
   bdd0a:	2800      	cmp	r0, #0
   bdd0c:	9901      	ldr	r1, [sp, #4]
   bdd0e:	dc01      	bgt.n	bdd14 <_ZN9USBSerial5writeEh+0x16>
   bdd10:	7c60      	ldrb	r0, [r4, #17]
   bdd12:	b120      	cbz	r0, bdd1e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bdd14:	7c20      	ldrb	r0, [r4, #16]
   bdd16:	f7fc fa63 	bl	ba1e0 <HAL_USB_USART_Send_Data>
   bdd1a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bdd1e:	b002      	add	sp, #8
   bdd20:	bd10      	pop	{r4, pc}

000bdd22 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bdd22:	7c00      	ldrb	r0, [r0, #16]
   bdd24:	f7fc ba64 	b.w	ba1f0 <HAL_USB_USART_Flush_Data>

000bdd28 <_ZN9USBSerialD0Ev>:
   bdd28:	b510      	push	{r4, lr}
   bdd2a:	2114      	movs	r1, #20
   bdd2c:	4604      	mov	r4, r0
   bdd2e:	f7f6 f9b6 	bl	b409e <_ZdlPvj>
   bdd32:	4620      	mov	r0, r4
   bdd34:	bd10      	pop	{r4, pc}
	...

000bdd38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bdd38:	b510      	push	{r4, lr}
   bdd3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bdd3e:	4604      	mov	r4, r0
   bdd40:	4608      	mov	r0, r1
   bdd42:	2100      	movs	r1, #0
   bdd44:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bdd48:	4b04      	ldr	r3, [pc, #16]	; (bdd5c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bdd4a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bdd4c:	2301      	movs	r3, #1
  _serial = serial;
   bdd4e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bdd50:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bdd52:	4611      	mov	r1, r2
   bdd54:	f7fc fa1c 	bl	ba190 <HAL_USB_USART_Init>
}
   bdd58:	4620      	mov	r0, r4
   bdd5a:	bd10      	pop	{r4, pc}
   bdd5c:	000c25cc 	.word	0x000c25cc

000bdd60 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bdd60:	7c00      	ldrb	r0, [r0, #16]
   bdd62:	2200      	movs	r2, #0
   bdd64:	f7fc ba1c 	b.w	ba1a0 <HAL_USB_USART_Begin>

000bdd68 <_Z19acquireSerialBufferv>:
{
   bdd68:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bdd6a:	2214      	movs	r2, #20
{
   bdd6c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bdd6e:	2100      	movs	r1, #0
   bdd70:	f001 f8c9 	bl	bef06 <memset>
}
   bdd74:	4620      	mov	r0, r4
   bdd76:	bd10      	pop	{r4, pc}

000bdd78 <_Z16_fetch_usbserialv>:
{
   bdd78:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bdd7a:	4c0f      	ldr	r4, [pc, #60]	; (bddb8 <_Z16_fetch_usbserialv+0x40>)
{
   bdd7c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bdd7e:	a803      	add	r0, sp, #12
   bdd80:	f7ff fff2 	bl	bdd68 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bdd84:	7821      	ldrb	r1, [r4, #0]
   bdd86:	f3bf 8f5b 	dmb	ish
   bdd8a:	f011 0101 	ands.w	r1, r1, #1
   bdd8e:	d10f      	bne.n	bddb0 <_Z16_fetch_usbserialv+0x38>
   bdd90:	4620      	mov	r0, r4
   bdd92:	9101      	str	r1, [sp, #4]
   bdd94:	f7f6 f992 	bl	b40bc <__cxa_guard_acquire>
   bdd98:	9901      	ldr	r1, [sp, #4]
   bdd9a:	b148      	cbz	r0, bddb0 <_Z16_fetch_usbserialv+0x38>
   bdd9c:	aa03      	add	r2, sp, #12
   bdd9e:	4807      	ldr	r0, [pc, #28]	; (bddbc <_Z16_fetch_usbserialv+0x44>)
   bdda0:	f7ff ffca 	bl	bdd38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bdda4:	4620      	mov	r0, r4
   bdda6:	f7f6 f98e 	bl	b40c6 <__cxa_guard_release>
   bddaa:	4805      	ldr	r0, [pc, #20]	; (bddc0 <_Z16_fetch_usbserialv+0x48>)
   bddac:	f001 f866 	bl	bee7c <atexit>
	return _usbserial;
}
   bddb0:	4802      	ldr	r0, [pc, #8]	; (bddbc <_Z16_fetch_usbserialv+0x44>)
   bddb2:	b008      	add	sp, #32
   bddb4:	bd10      	pop	{r4, pc}
   bddb6:	bf00      	nop
   bddb8:	2003e708 	.word	0x2003e708
   bddbc:	2003e70c 	.word	0x2003e70c
   bddc0:	000bdcbf 	.word	0x000bdcbf

000bddc4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bddc4:	4b01      	ldr	r3, [pc, #4]	; (bddcc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bddc6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bddc8:	4770      	bx	lr
   bddca:	bf00      	nop
   bddcc:	2003dab0 	.word	0x2003dab0

000bddd0 <serialEventRun>:
{
   bddd0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bddd2:	4b0b      	ldr	r3, [pc, #44]	; (bde00 <serialEventRun+0x30>)
   bddd4:	b143      	cbz	r3, bdde8 <serialEventRun+0x18>
   bddd6:	f7ff ffcf 	bl	bdd78 <_Z16_fetch_usbserialv>
   bddda:	6803      	ldr	r3, [r0, #0]
   bdddc:	691b      	ldr	r3, [r3, #16]
   bddde:	4798      	blx	r3
   bdde0:	2800      	cmp	r0, #0
   bdde2:	dd01      	ble.n	bdde8 <serialEventRun+0x18>
        serialEvent();
   bdde4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bdde8:	4b06      	ldr	r3, [pc, #24]	; (bde04 <serialEventRun+0x34>)
   bddea:	b143      	cbz	r3, bddfe <serialEventRun+0x2e>
   bddec:	f000 f970 	bl	be0d0 <_Z22__fetch_global_Serial1v>
   bddf0:	6803      	ldr	r3, [r0, #0]
   bddf2:	691b      	ldr	r3, [r3, #16]
   bddf4:	4798      	blx	r3
   bddf6:	2800      	cmp	r0, #0
   bddf8:	dd01      	ble.n	bddfe <serialEventRun+0x2e>
        serialEvent1();
   bddfa:	f3af 8000 	nop.w
}
   bddfe:	bd08      	pop	{r3, pc}
	...

000bde08 <_post_loop>:
{
   bde08:	b508      	push	{r3, lr}
	serialEventRun();
   bde0a:	f7ff ffe1 	bl	bddd0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bde0e:	f7fc f85f 	bl	b9ed0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bde12:	4b01      	ldr	r3, [pc, #4]	; (bde18 <_post_loop+0x10>)
   bde14:	6018      	str	r0, [r3, #0]
}
   bde16:	bd08      	pop	{r3, pc}
   bde18:	2003e728 	.word	0x2003e728

000bde1c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bde1c:	4805      	ldr	r0, [pc, #20]	; (bde34 <_Z33system_initialize_user_backup_ramv+0x18>)
   bde1e:	4a06      	ldr	r2, [pc, #24]	; (bde38 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bde20:	4906      	ldr	r1, [pc, #24]	; (bde3c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bde22:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bde24:	1a12      	subs	r2, r2, r0
   bde26:	f001 f846 	bl	beeb6 <memcpy>
    __backup_sram_signature = signature;
   bde2a:	4b05      	ldr	r3, [pc, #20]	; (bde40 <_Z33system_initialize_user_backup_ramv+0x24>)
   bde2c:	4a05      	ldr	r2, [pc, #20]	; (bde44 <_Z33system_initialize_user_backup_ramv+0x28>)
   bde2e:	601a      	str	r2, [r3, #0]
}
   bde30:	bd08      	pop	{r3, pc}
   bde32:	bf00      	nop
   bde34:	2003f400 	.word	0x2003f400
   bde38:	2003f404 	.word	0x2003f404
   bde3c:	000c2b64 	.word	0x000c2b64
   bde40:	2003f400 	.word	0x2003f400
   bde44:	9a271c1e 	.word	0x9a271c1e

000bde48 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bde48:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bde4a:	2300      	movs	r3, #0
   bde4c:	9300      	str	r3, [sp, #0]
   bde4e:	461a      	mov	r2, r3
   bde50:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bde54:	f7fc fa1e 	bl	ba294 <system_ctrl_set_result>
}
   bde58:	b003      	add	sp, #12
   bde5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bde60 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bde60:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bde62:	8843      	ldrh	r3, [r0, #2]
   bde64:	2b0a      	cmp	r3, #10
   bde66:	d008      	beq.n	bde7a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bde68:	2b50      	cmp	r3, #80	; 0x50
   bde6a:	d10b      	bne.n	bde84 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bde6c:	4b09      	ldr	r3, [pc, #36]	; (bde94 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bde6e:	681b      	ldr	r3, [r3, #0]
   bde70:	b14b      	cbz	r3, bde86 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bde72:	b003      	add	sp, #12
   bde74:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bde78:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bde7a:	f7ff ffe5 	bl	bde48 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bde7e:	b003      	add	sp, #12
   bde80:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bde84:	2300      	movs	r3, #0
   bde86:	9300      	str	r3, [sp, #0]
   bde88:	461a      	mov	r2, r3
   bde8a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bde8e:	f7fc fa01 	bl	ba294 <system_ctrl_set_result>
}
   bde92:	e7f4      	b.n	bde7e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bde94:	2003e724 	.word	0x2003e724

000bde98 <module_user_init_hook>:
{
   bde98:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bde9a:	4812      	ldr	r0, [pc, #72]	; (bdee4 <module_user_init_hook+0x4c>)
   bde9c:	2100      	movs	r1, #0
   bde9e:	f7fc fafb 	bl	ba498 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bdea2:	4b11      	ldr	r3, [pc, #68]	; (bdee8 <module_user_init_hook+0x50>)
   bdea4:	681a      	ldr	r2, [r3, #0]
   bdea6:	4b11      	ldr	r3, [pc, #68]	; (bdeec <module_user_init_hook+0x54>)
   bdea8:	429a      	cmp	r2, r3
   bdeaa:	4b11      	ldr	r3, [pc, #68]	; (bdef0 <module_user_init_hook+0x58>)
   bdeac:	bf0c      	ite	eq
   bdeae:	2201      	moveq	r2, #1
   bdeb0:	2200      	movne	r2, #0
   bdeb2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bdeb4:	d001      	beq.n	bdeba <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bdeb6:	f7ff ffb1 	bl	bde1c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bdeba:	f7fb fff1 	bl	b9ea0 <HAL_RNG_GetRandomNumber>
   bdebe:	4604      	mov	r4, r0
    srand(seed);
   bdec0:	f001 f82a 	bl	bef18 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bdec4:	4b0b      	ldr	r3, [pc, #44]	; (bdef4 <module_user_init_hook+0x5c>)
   bdec6:	b113      	cbz	r3, bdece <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bdec8:	4620      	mov	r0, r4
   bdeca:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bdece:	2100      	movs	r1, #0
   bded0:	4808      	ldr	r0, [pc, #32]	; (bdef4 <module_user_init_hook+0x5c>)
   bded2:	f7fc fa21 	bl	ba318 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bded6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bdeda:	4807      	ldr	r0, [pc, #28]	; (bdef8 <module_user_init_hook+0x60>)
   bdedc:	2100      	movs	r1, #0
   bdede:	f7fc b9cf 	b.w	ba280 <system_ctrl_set_app_request_handler>
   bdee2:	bf00      	nop
   bdee4:	000bddc5 	.word	0x000bddc5
   bdee8:	2003f400 	.word	0x2003f400
   bdeec:	9a271c1e 	.word	0x9a271c1e
   bdef0:	2003e720 	.word	0x2003e720
   bdef4:	00000000 	.word	0x00000000
   bdef8:	000bde61 	.word	0x000bde61

000bdefc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bdefc:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   bdefe:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bdf00:	d902      	bls.n	bdf08 <pinAvailable+0xc>
    return false;
   bdf02:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bdf04:	b002      	add	sp, #8
   bdf06:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bdf08:	f1a0 030b 	sub.w	r3, r0, #11
   bdf0c:	2b02      	cmp	r3, #2
   bdf0e:	d81a      	bhi.n	bdf46 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bdf10:	4c17      	ldr	r4, [pc, #92]	; (bdf70 <pinAvailable+0x74>)
   bdf12:	7821      	ldrb	r1, [r4, #0]
   bdf14:	f3bf 8f5b 	dmb	ish
   bdf18:	f011 0101 	ands.w	r1, r1, #1
   bdf1c:	d10b      	bne.n	bdf36 <pinAvailable+0x3a>
   bdf1e:	4620      	mov	r0, r4
   bdf20:	9101      	str	r1, [sp, #4]
   bdf22:	f7f6 f8cb 	bl	b40bc <__cxa_guard_acquire>
   bdf26:	9901      	ldr	r1, [sp, #4]
   bdf28:	b128      	cbz	r0, bdf36 <pinAvailable+0x3a>
   bdf2a:	4812      	ldr	r0, [pc, #72]	; (bdf74 <pinAvailable+0x78>)
   bdf2c:	f7ff fb88 	bl	bd640 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bdf30:	4620      	mov	r0, r4
   bdf32:	f7f6 f8c8 	bl	b40c6 <__cxa_guard_release>
   bdf36:	4b0f      	ldr	r3, [pc, #60]	; (bdf74 <pinAvailable+0x78>)
   bdf38:	7818      	ldrb	r0, [r3, #0]
   bdf3a:	f7fc f8a9 	bl	ba090 <hal_spi_is_enabled>
   bdf3e:	2800      	cmp	r0, #0
   bdf40:	d1df      	bne.n	bdf02 <pinAvailable+0x6>
  return true; // 'pin' is available
   bdf42:	2001      	movs	r0, #1
   bdf44:	e7de      	b.n	bdf04 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bdf46:	2801      	cmp	r0, #1
   bdf48:	d809      	bhi.n	bdf5e <pinAvailable+0x62>
   bdf4a:	f000 f881 	bl	be050 <_Z19__fetch_global_Wirev>
   bdf4e:	2100      	movs	r1, #0
   bdf50:	7c00      	ldrb	r0, [r0, #16]
   bdf52:	f7fc f85d 	bl	ba010 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bdf56:	f080 0001 	eor.w	r0, r0, #1
   bdf5a:	b2c0      	uxtb	r0, r0
   bdf5c:	e7d2      	b.n	bdf04 <pinAvailable+0x8>
   bdf5e:	3809      	subs	r0, #9
   bdf60:	2801      	cmp	r0, #1
   bdf62:	d8ee      	bhi.n	bdf42 <pinAvailable+0x46>
   bdf64:	f000 f8b4 	bl	be0d0 <_Z22__fetch_global_Serial1v>
   bdf68:	7c00      	ldrb	r0, [r0, #16]
   bdf6a:	f7fc f8f1 	bl	ba150 <hal_usart_is_enabled>
   bdf6e:	e7f2      	b.n	bdf56 <pinAvailable+0x5a>
   bdf70:	2003e64c 	.word	0x2003e64c
   bdf74:	2003e650 	.word	0x2003e650

000bdf78 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bdf78:	2825      	cmp	r0, #37	; 0x25
{
   bdf7a:	b538      	push	{r3, r4, r5, lr}
   bdf7c:	4604      	mov	r4, r0
   bdf7e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bdf80:	d80a      	bhi.n	bdf98 <pinMode+0x20>
   bdf82:	29ff      	cmp	r1, #255	; 0xff
   bdf84:	d008      	beq.n	bdf98 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bdf86:	f7ff ffb9 	bl	bdefc <pinAvailable>
   bdf8a:	b128      	cbz	r0, bdf98 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bdf8c:	4629      	mov	r1, r5
   bdf8e:	4620      	mov	r0, r4
}
   bdf90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bdf94:	f7fb bfbc 	b.w	b9f10 <HAL_Pin_Mode>
}
   bdf98:	bd38      	pop	{r3, r4, r5, pc}

000bdf9a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bdf9a:	b538      	push	{r3, r4, r5, lr}
   bdf9c:	4604      	mov	r4, r0
   bdf9e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bdfa0:	f7fb ffbe 	bl	b9f20 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bdfa4:	28ff      	cmp	r0, #255	; 0xff
   bdfa6:	d010      	beq.n	bdfca <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bdfa8:	2806      	cmp	r0, #6
   bdfaa:	d804      	bhi.n	bdfb6 <digitalWrite+0x1c>
   bdfac:	234d      	movs	r3, #77	; 0x4d
   bdfae:	fa23 f000 	lsr.w	r0, r3, r0
   bdfb2:	07c3      	lsls	r3, r0, #31
   bdfb4:	d409      	bmi.n	bdfca <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bdfb6:	4620      	mov	r0, r4
   bdfb8:	f7ff ffa0 	bl	bdefc <pinAvailable>
   bdfbc:	b128      	cbz	r0, bdfca <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bdfbe:	4629      	mov	r1, r5
   bdfc0:	4620      	mov	r0, r4
}
   bdfc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bdfc6:	f7fb bfb3 	b.w	b9f30 <HAL_GPIO_Write>
}
   bdfca:	bd38      	pop	{r3, r4, r5, pc}

000bdfcc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bdfcc:	b510      	push	{r4, lr}
   bdfce:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bdfd0:	f7fb ffa6 	bl	b9f20 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bdfd4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bdfd6:	b2db      	uxtb	r3, r3
   bdfd8:	2b01      	cmp	r3, #1
   bdfda:	d908      	bls.n	bdfee <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bdfdc:	4620      	mov	r0, r4
   bdfde:	f7ff ff8d 	bl	bdefc <pinAvailable>
   bdfe2:	b120      	cbz	r0, bdfee <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bdfe4:	4620      	mov	r0, r4
}
   bdfe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bdfea:	f7fb bfa9 	b.w	b9f40 <HAL_GPIO_Read>
}
   bdfee:	2000      	movs	r0, #0
   bdff0:	bd10      	pop	{r4, pc}

000bdff2 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bdff2:	280d      	cmp	r0, #13
{
   bdff4:	b510      	push	{r4, lr}
   bdff6:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bdff8:	bf9c      	itt	ls
   bdffa:	340e      	addls	r4, #14
   bdffc:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bdffe:	4620      	mov	r0, r4
   be000:	f7ff ff7c 	bl	bdefc <pinAvailable>
   be004:	b150      	cbz	r0, be01c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   be006:	2103      	movs	r1, #3
   be008:	4620      	mov	r0, r4
   be00a:	f7fb ff79 	bl	b9f00 <HAL_Validate_Pin_Function>
   be00e:	2803      	cmp	r0, #3
   be010:	d104      	bne.n	be01c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   be012:	4620      	mov	r0, r4
}
   be014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   be018:	f7fb bfaa 	b.w	b9f70 <hal_adc_read>
}
   be01c:	2000      	movs	r0, #0
   be01e:	bd10      	pop	{r4, pc}

000be020 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   be020:	4770      	bx	lr
	...

000be024 <_Z17acquireWireBufferv>:
{
   be024:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   be026:	2520      	movs	r5, #32
   be028:	2314      	movs	r3, #20
{
   be02a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   be02c:	6003      	str	r3, [r0, #0]
   be02e:	6085      	str	r5, [r0, #8]
   be030:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   be032:	4906      	ldr	r1, [pc, #24]	; (be04c <_Z17acquireWireBufferv+0x28>)
   be034:	4628      	mov	r0, r5
   be036:	f000 f86f 	bl	be118 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   be03a:	4904      	ldr	r1, [pc, #16]	; (be04c <_Z17acquireWireBufferv+0x28>)
	};
   be03c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   be03e:	4628      	mov	r0, r5
   be040:	f000 f86a 	bl	be118 <_ZnajRKSt9nothrow_t>
	};
   be044:	60e0      	str	r0, [r4, #12]
}
   be046:	4620      	mov	r0, r4
   be048:	bd38      	pop	{r3, r4, r5, pc}
   be04a:	bf00      	nop
   be04c:	000c25f4 	.word	0x000c25f4

000be050 <_Z19__fetch_global_Wirev>:
{
   be050:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   be052:	4d0e      	ldr	r5, [pc, #56]	; (be08c <_Z19__fetch_global_Wirev+0x3c>)
   be054:	7829      	ldrb	r1, [r5, #0]
   be056:	f3bf 8f5b 	dmb	ish
   be05a:	f011 0401 	ands.w	r4, r1, #1
{
   be05e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   be060:	d111      	bne.n	be086 <_Z19__fetch_global_Wirev+0x36>
   be062:	4628      	mov	r0, r5
   be064:	f7f6 f82a 	bl	b40bc <__cxa_guard_acquire>
   be068:	b168      	cbz	r0, be086 <_Z19__fetch_global_Wirev+0x36>
   be06a:	a801      	add	r0, sp, #4
   be06c:	f7ff ffda 	bl	be024 <_Z17acquireWireBufferv>
   be070:	aa01      	add	r2, sp, #4
   be072:	4621      	mov	r1, r4
   be074:	4806      	ldr	r0, [pc, #24]	; (be090 <_Z19__fetch_global_Wirev+0x40>)
   be076:	f7ff f8c5 	bl	bd204 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   be07a:	4628      	mov	r0, r5
   be07c:	f7f6 f823 	bl	b40c6 <__cxa_guard_release>
   be080:	4804      	ldr	r0, [pc, #16]	; (be094 <_Z19__fetch_global_Wirev+0x44>)
   be082:	f000 fefb 	bl	bee7c <atexit>
	return wire;
}
   be086:	4802      	ldr	r0, [pc, #8]	; (be090 <_Z19__fetch_global_Wirev+0x40>)
   be088:	b007      	add	sp, #28
   be08a:	bd30      	pop	{r4, r5, pc}
   be08c:	2003e72c 	.word	0x2003e72c
   be090:	2003e730 	.word	0x2003e730
   be094:	000be021 	.word	0x000be021

000be098 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   be098:	4770      	bx	lr
	...

000be09c <_Z20acquireSerial1Bufferv>:
{
   be09c:	b538      	push	{r3, r4, r5, lr}
   be09e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   be0a0:	2514      	movs	r5, #20
   be0a2:	462a      	mov	r2, r5
   be0a4:	2100      	movs	r1, #0
   be0a6:	f000 ff2e 	bl	bef06 <memset>
   be0aa:	8025      	strh	r5, [r4, #0]
   be0ac:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be0ae:	4907      	ldr	r1, [pc, #28]	; (be0cc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   be0b0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be0b2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   be0b4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be0b6:	f000 f82f 	bl	be118 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be0ba:	4904      	ldr	r1, [pc, #16]	; (be0cc <_Z20acquireSerial1Bufferv+0x30>)
    };
   be0bc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   be0be:	4628      	mov	r0, r5
   be0c0:	f000 f82a 	bl	be118 <_ZnajRKSt9nothrow_t>
    };
   be0c4:	60e0      	str	r0, [r4, #12]
}
   be0c6:	4620      	mov	r0, r4
   be0c8:	bd38      	pop	{r3, r4, r5, pc}
   be0ca:	bf00      	nop
   be0cc:	000c25f4 	.word	0x000c25f4

000be0d0 <_Z22__fetch_global_Serial1v>:
{
   be0d0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   be0d2:	4d0e      	ldr	r5, [pc, #56]	; (be10c <_Z22__fetch_global_Serial1v+0x3c>)
   be0d4:	7829      	ldrb	r1, [r5, #0]
   be0d6:	f3bf 8f5b 	dmb	ish
   be0da:	f011 0401 	ands.w	r4, r1, #1
{
   be0de:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   be0e0:	d111      	bne.n	be106 <_Z22__fetch_global_Serial1v+0x36>
   be0e2:	4628      	mov	r0, r5
   be0e4:	f7f5 ffea 	bl	b40bc <__cxa_guard_acquire>
   be0e8:	b168      	cbz	r0, be106 <_Z22__fetch_global_Serial1v+0x36>
   be0ea:	a801      	add	r0, sp, #4
   be0ec:	f7ff ffd6 	bl	be09c <_Z20acquireSerial1Bufferv>
   be0f0:	aa01      	add	r2, sp, #4
   be0f2:	4621      	mov	r1, r4
   be0f4:	4806      	ldr	r0, [pc, #24]	; (be110 <_Z22__fetch_global_Serial1v+0x40>)
   be0f6:	f7ff fdc5 	bl	bdc84 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   be0fa:	4628      	mov	r0, r5
   be0fc:	f7f5 ffe3 	bl	b40c6 <__cxa_guard_release>
   be100:	4804      	ldr	r0, [pc, #16]	; (be114 <_Z22__fetch_global_Serial1v+0x44>)
   be102:	f000 febb 	bl	bee7c <atexit>
    return serial1;
}
   be106:	4802      	ldr	r0, [pc, #8]	; (be110 <_Z22__fetch_global_Serial1v+0x40>)
   be108:	b007      	add	sp, #28
   be10a:	bd30      	pop	{r4, r5, pc}
   be10c:	2003e744 	.word	0x2003e744
   be110:	2003e748 	.word	0x2003e748
   be114:	000be099 	.word	0x000be099

000be118 <_ZnajRKSt9nothrow_t>:
   be118:	f7f5 bfbf 	b.w	b409a <_Znaj>

000be11c <_ZSt17__throw_bad_allocv>:
   be11c:	b508      	push	{r3, lr}
   be11e:	f7fc f99b 	bl	ba458 <abort>

000be122 <_ZSt19__throw_logic_errorPKc>:
   be122:	b508      	push	{r3, lr}
   be124:	f7fc f998 	bl	ba458 <abort>

000be128 <_ZSt20__throw_length_errorPKc>:
   be128:	b508      	push	{r3, lr}
   be12a:	f7fc f995 	bl	ba458 <abort>

000be12e <_ZSt24__throw_out_of_range_fmtPKcz>:
   be12e:	b40f      	push	{r0, r1, r2, r3}
   be130:	b580      	push	{r7, lr}
   be132:	b084      	sub	sp, #16
   be134:	af00      	add	r7, sp, #0
   be136:	f107 0418 	add.w	r4, r7, #24
   be13a:	f854 2b04 	ldr.w	r2, [r4], #4
   be13e:	607a      	str	r2, [r7, #4]
   be140:	4610      	mov	r0, r2
   be142:	f000 ff94 	bl	bf06e <strlen>
   be146:	f200 2307 	addw	r3, r0, #519	; 0x207
   be14a:	f023 0307 	bic.w	r3, r3, #7
   be14e:	ebad 0d03 	sub.w	sp, sp, r3
   be152:	f500 7100 	add.w	r1, r0, #512	; 0x200
   be156:	687a      	ldr	r2, [r7, #4]
   be158:	60fc      	str	r4, [r7, #12]
   be15a:	4623      	mov	r3, r4
   be15c:	4668      	mov	r0, sp
   be15e:	f000 f85d 	bl	be21c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   be162:	f7fc f979 	bl	ba458 <abort>

000be166 <_ZSt25__throw_bad_function_callv>:
   be166:	b508      	push	{r3, lr}
   be168:	f7fc f976 	bl	ba458 <abort>

000be16c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   be16c:	4901      	ldr	r1, [pc, #4]	; (be174 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   be16e:	f000 b98b 	b.w	be488 <_ZNKSt9type_infoeqERKS_>
   be172:	bf00      	nop
   be174:	000c2610 	.word	0x000c2610

000be178 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   be178:	b580      	push	{r7, lr}
   be17a:	b09c      	sub	sp, #112	; 0x70
   be17c:	4606      	mov	r6, r0
   be17e:	af00      	add	r7, sp, #0
   be180:	460c      	mov	r4, r1
   be182:	1ba4      	subs	r4, r4, r6
   be184:	490e      	ldr	r1, [pc, #56]	; (be1c0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   be186:	2269      	movs	r2, #105	; 0x69
   be188:	1d38      	adds	r0, r7, #4
   be18a:	f000 fe94 	bl	beeb6 <memcpy>
   be18e:	f104 0370 	add.w	r3, r4, #112	; 0x70
   be192:	f023 0307 	bic.w	r3, r3, #7
   be196:	ebad 0d03 	sub.w	sp, sp, r3
   be19a:	466d      	mov	r5, sp
   be19c:	2268      	movs	r2, #104	; 0x68
   be19e:	1d39      	adds	r1, r7, #4
   be1a0:	4628      	mov	r0, r5
   be1a2:	f000 fe88 	bl	beeb6 <memcpy>
   be1a6:	4622      	mov	r2, r4
   be1a8:	4631      	mov	r1, r6
   be1aa:	f105 0068 	add.w	r0, r5, #104	; 0x68
   be1ae:	442c      	add	r4, r5
   be1b0:	f000 fe81 	bl	beeb6 <memcpy>
   be1b4:	2300      	movs	r3, #0
   be1b6:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   be1ba:	4628      	mov	r0, r5
   be1bc:	f7ff ffb1 	bl	be122 <_ZSt19__throw_logic_errorPKc>
   be1c0:	000c2618 	.word	0x000c2618

000be1c4 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   be1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be1c8:	af00      	add	r7, sp, #0
   be1ca:	b084      	sub	sp, #16
   be1cc:	466d      	mov	r5, sp
   be1ce:	f105 040c 	add.w	r4, r5, #12
   be1d2:	f8df 8044 	ldr.w	r8, [pc, #68]	; be218 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   be1d6:	4623      	mov	r3, r4
   be1d8:	f04f 0c0a 	mov.w	ip, #10
   be1dc:	fbb2 f6fc 	udiv	r6, r2, ip
   be1e0:	fb0c 2e16 	mls	lr, ip, r6, r2
   be1e4:	f818 e00e 	ldrb.w	lr, [r8, lr]
   be1e8:	f803 ed01 	strb.w	lr, [r3, #-1]!
   be1ec:	4696      	mov	lr, r2
   be1ee:	f1be 0f09 	cmp.w	lr, #9
   be1f2:	4632      	mov	r2, r6
   be1f4:	d8f2      	bhi.n	be1dc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   be1f6:	1ae4      	subs	r4, r4, r3
   be1f8:	428c      	cmp	r4, r1
   be1fa:	d809      	bhi.n	be210 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   be1fc:	f1c4 030c 	rsb	r3, r4, #12
   be200:	4622      	mov	r2, r4
   be202:	18e9      	adds	r1, r5, r3
   be204:	f000 fe57 	bl	beeb6 <memcpy>
   be208:	4620      	mov	r0, r4
   be20a:	46bd      	mov	sp, r7
   be20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   be210:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   be214:	e7f8      	b.n	be208 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   be216:	bf00      	nop
   be218:	000c2681 	.word	0x000c2681

000be21c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   be21c:	3901      	subs	r1, #1
   be21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be222:	4607      	mov	r7, r0
   be224:	4615      	mov	r5, r2
   be226:	eb00 0801 	add.w	r8, r0, r1
   be22a:	4604      	mov	r4, r0
   be22c:	782a      	ldrb	r2, [r5, #0]
   be22e:	b392      	cbz	r2, be296 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   be230:	4544      	cmp	r4, r8
   be232:	d22a      	bcs.n	be28a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   be234:	2a25      	cmp	r2, #37	; 0x25
   be236:	d107      	bne.n	be248 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   be238:	786a      	ldrb	r2, [r5, #1]
   be23a:	2a73      	cmp	r2, #115	; 0x73
   be23c:	d009      	beq.n	be252 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   be23e:	2a7a      	cmp	r2, #122	; 0x7a
   be240:	d012      	beq.n	be268 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   be242:	2a25      	cmp	r2, #37	; 0x25
   be244:	d100      	bne.n	be248 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   be246:	3501      	adds	r5, #1
   be248:	f815 2b01 	ldrb.w	r2, [r5], #1
   be24c:	f804 2b01 	strb.w	r2, [r4], #1
   be250:	e7ec      	b.n	be22c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   be252:	f853 2b04 	ldr.w	r2, [r3], #4
   be256:	3a01      	subs	r2, #1
   be258:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   be25c:	b1c9      	cbz	r1, be292 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   be25e:	4544      	cmp	r4, r8
   be260:	d013      	beq.n	be28a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   be262:	f804 1b01 	strb.w	r1, [r4], #1
   be266:	e7f7      	b.n	be258 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   be268:	78aa      	ldrb	r2, [r5, #2]
   be26a:	2a75      	cmp	r2, #117	; 0x75
   be26c:	d1ec      	bne.n	be248 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   be26e:	461e      	mov	r6, r3
   be270:	eba8 0104 	sub.w	r1, r8, r4
   be274:	f856 2b04 	ldr.w	r2, [r6], #4
   be278:	4620      	mov	r0, r4
   be27a:	f7ff ffa3 	bl	be1c4 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   be27e:	2800      	cmp	r0, #0
   be280:	dd03      	ble.n	be28a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   be282:	4404      	add	r4, r0
   be284:	3503      	adds	r5, #3
   be286:	4633      	mov	r3, r6
   be288:	e7d0      	b.n	be22c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   be28a:	4621      	mov	r1, r4
   be28c:	4638      	mov	r0, r7
   be28e:	f7ff ff73 	bl	be178 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   be292:	3502      	adds	r5, #2
   be294:	e7ca      	b.n	be22c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   be296:	7022      	strb	r2, [r4, #0]
   be298:	1be0      	subs	r0, r4, r7
   be29a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000be29e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   be29e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   be2a0:	2400      	movs	r4, #0
   be2a2:	2310      	movs	r3, #16
   be2a4:	e9cd 3402 	strd	r3, r4, [sp, #8]
   be2a8:	6803      	ldr	r3, [r0, #0]
   be2aa:	4615      	mov	r5, r2
   be2ac:	699e      	ldr	r6, [r3, #24]
   be2ae:	6812      	ldr	r2, [r2, #0]
   be2b0:	466b      	mov	r3, sp
   be2b2:	e9cd 4400 	strd	r4, r4, [sp]
   be2b6:	47b0      	blx	r6
   be2b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   be2bc:	f003 0306 	and.w	r3, r3, #6
   be2c0:	2b06      	cmp	r3, #6
   be2c2:	bf03      	ittte	eq
   be2c4:	9b00      	ldreq	r3, [sp, #0]
   be2c6:	602b      	streq	r3, [r5, #0]
   be2c8:	2001      	moveq	r0, #1
   be2ca:	4620      	movne	r0, r4
   be2cc:	b004      	add	sp, #16
   be2ce:	bd70      	pop	{r4, r5, r6, pc}

000be2d0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   be2d0:	9800      	ldr	r0, [sp, #0]
   be2d2:	4290      	cmp	r0, r2
   be2d4:	bf14      	ite	ne
   be2d6:	2001      	movne	r0, #1
   be2d8:	2006      	moveq	r0, #6
   be2da:	4770      	bx	lr

000be2dc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   be2dc:	b510      	push	{r4, lr}
   be2de:	4b03      	ldr	r3, [pc, #12]	; (be2ec <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   be2e0:	6003      	str	r3, [r0, #0]
   be2e2:	4604      	mov	r4, r0
   be2e4:	f000 f8cd 	bl	be482 <_ZNSt9type_infoD1Ev>
   be2e8:	4620      	mov	r0, r4
   be2ea:	bd10      	pop	{r4, pc}
   be2ec:	000c26c4 	.word	0x000c26c4

000be2f0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   be2f0:	b510      	push	{r4, lr}
   be2f2:	4604      	mov	r4, r0
   be2f4:	f7ff fff2 	bl	be2dc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   be2f8:	4620      	mov	r0, r4
   be2fa:	2108      	movs	r1, #8
   be2fc:	f7f5 fecf 	bl	b409e <_ZdlPvj>
   be300:	4620      	mov	r0, r4
   be302:	bd10      	pop	{r4, pc}

000be304 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   be304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be308:	461f      	mov	r7, r3
   be30a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   be30e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   be312:	4598      	cmp	r8, r3
   be314:	4606      	mov	r6, r0
   be316:	4615      	mov	r5, r2
   be318:	d107      	bne.n	be32a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   be31a:	9907      	ldr	r1, [sp, #28]
   be31c:	f000 f8b4 	bl	be488 <_ZNKSt9type_infoeqERKS_>
   be320:	b118      	cbz	r0, be32a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   be322:	7165      	strb	r5, [r4, #5]
   be324:	2000      	movs	r0, #0
   be326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   be32a:	4639      	mov	r1, r7
   be32c:	4630      	mov	r0, r6
   be32e:	f000 f8ab 	bl	be488 <_ZNKSt9type_infoeqERKS_>
   be332:	2800      	cmp	r0, #0
   be334:	d0f6      	beq.n	be324 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   be336:	2301      	movs	r3, #1
   be338:	f8c4 8000 	str.w	r8, [r4]
   be33c:	7125      	strb	r5, [r4, #4]
   be33e:	71a3      	strb	r3, [r4, #6]
   be340:	e7f0      	b.n	be324 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000be342 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   be342:	b538      	push	{r3, r4, r5, lr}
   be344:	4615      	mov	r5, r2
   be346:	461c      	mov	r4, r3
   be348:	f000 f89e 	bl	be488 <_ZNKSt9type_infoeqERKS_>
   be34c:	b120      	cbz	r0, be358 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   be34e:	2308      	movs	r3, #8
   be350:	60e3      	str	r3, [r4, #12]
   be352:	2306      	movs	r3, #6
   be354:	6025      	str	r5, [r4, #0]
   be356:	7123      	strb	r3, [r4, #4]
   be358:	bd38      	pop	{r3, r4, r5, pc}

000be35a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   be35a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   be35c:	4605      	mov	r5, r0
   be35e:	460c      	mov	r4, r1
   be360:	9201      	str	r2, [sp, #4]
   be362:	461e      	mov	r6, r3
   be364:	f000 f890 	bl	be488 <_ZNKSt9type_infoeqERKS_>
   be368:	b950      	cbnz	r0, be380 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   be36a:	2e03      	cmp	r6, #3
   be36c:	d808      	bhi.n	be380 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   be36e:	6823      	ldr	r3, [r4, #0]
   be370:	9a01      	ldr	r2, [sp, #4]
   be372:	695b      	ldr	r3, [r3, #20]
   be374:	4629      	mov	r1, r5
   be376:	4620      	mov	r0, r4
   be378:	b002      	add	sp, #8
   be37a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   be37e:	4718      	bx	r3
   be380:	b002      	add	sp, #8
   be382:	bd70      	pop	{r4, r5, r6, pc}

000be384 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   be384:	b510      	push	{r4, lr}
   be386:	4b03      	ldr	r3, [pc, #12]	; (be394 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   be388:	6003      	str	r3, [r0, #0]
   be38a:	4604      	mov	r4, r0
   be38c:	f7ff ffa6 	bl	be2dc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   be390:	4620      	mov	r0, r4
   be392:	bd10      	pop	{r4, pc}
   be394:	000c2724 	.word	0x000c2724

000be398 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   be398:	b510      	push	{r4, lr}
   be39a:	4604      	mov	r4, r0
   be39c:	f7ff fff2 	bl	be384 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   be3a0:	4620      	mov	r0, r4
   be3a2:	210c      	movs	r1, #12
   be3a4:	f7f5 fe7b 	bl	b409e <_ZdlPvj>
   be3a8:	4620      	mov	r0, r4
   be3aa:	bd10      	pop	{r4, pc}

000be3ac <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   be3ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   be3ae:	9f08      	ldr	r7, [sp, #32]
   be3b0:	4297      	cmp	r7, r2
   be3b2:	4605      	mov	r5, r0
   be3b4:	460e      	mov	r6, r1
   be3b6:	4614      	mov	r4, r2
   be3b8:	d00a      	beq.n	be3d0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   be3ba:	68a8      	ldr	r0, [r5, #8]
   be3bc:	6802      	ldr	r2, [r0, #0]
   be3be:	9708      	str	r7, [sp, #32]
   be3c0:	6a15      	ldr	r5, [r2, #32]
   be3c2:	4631      	mov	r1, r6
   be3c4:	4622      	mov	r2, r4
   be3c6:	46ac      	mov	ip, r5
   be3c8:	b003      	add	sp, #12
   be3ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   be3ce:	4760      	bx	ip
   be3d0:	4619      	mov	r1, r3
   be3d2:	9301      	str	r3, [sp, #4]
   be3d4:	f000 f858 	bl	be488 <_ZNKSt9type_infoeqERKS_>
   be3d8:	9b01      	ldr	r3, [sp, #4]
   be3da:	2800      	cmp	r0, #0
   be3dc:	d0ed      	beq.n	be3ba <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   be3de:	2006      	movs	r0, #6
   be3e0:	b003      	add	sp, #12
   be3e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000be3e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   be3e4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be3e8:	460d      	mov	r5, r1
   be3ea:	4619      	mov	r1, r3
   be3ec:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   be3f0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   be3f4:	4681      	mov	r9, r0
   be3f6:	4617      	mov	r7, r2
   be3f8:	4698      	mov	r8, r3
   be3fa:	f000 f845 	bl	be488 <_ZNKSt9type_infoeqERKS_>
   be3fe:	b190      	cbz	r0, be426 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   be400:	2d00      	cmp	r5, #0
   be402:	6034      	str	r4, [r6, #0]
   be404:	7137      	strb	r7, [r6, #4]
   be406:	db09      	blt.n	be41c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   be408:	1961      	adds	r1, r4, r5
   be40a:	458a      	cmp	sl, r1
   be40c:	bf0c      	ite	eq
   be40e:	2106      	moveq	r1, #6
   be410:	2101      	movne	r1, #1
   be412:	71b1      	strb	r1, [r6, #6]
   be414:	2000      	movs	r0, #0
   be416:	b001      	add	sp, #4
   be418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be41c:	3502      	adds	r5, #2
   be41e:	d1f9      	bne.n	be414 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   be420:	2301      	movs	r3, #1
   be422:	71b3      	strb	r3, [r6, #6]
   be424:	e7f6      	b.n	be414 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   be426:	4554      	cmp	r4, sl
   be428:	d106      	bne.n	be438 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   be42a:	4659      	mov	r1, fp
   be42c:	4648      	mov	r0, r9
   be42e:	f000 f82b 	bl	be488 <_ZNKSt9type_infoeqERKS_>
   be432:	b108      	cbz	r0, be438 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   be434:	7177      	strb	r7, [r6, #5]
   be436:	e7ed      	b.n	be414 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   be438:	f8d9 0008 	ldr.w	r0, [r9, #8]
   be43c:	6803      	ldr	r3, [r0, #0]
   be43e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   be442:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   be446:	69dc      	ldr	r4, [r3, #28]
   be448:	463a      	mov	r2, r7
   be44a:	4643      	mov	r3, r8
   be44c:	4629      	mov	r1, r5
   be44e:	46a4      	mov	ip, r4
   be450:	b001      	add	sp, #4
   be452:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be456:	4760      	bx	ip

000be458 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   be458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be45c:	4607      	mov	r7, r0
   be45e:	460c      	mov	r4, r1
   be460:	4615      	mov	r5, r2
   be462:	461e      	mov	r6, r3
   be464:	f7ff ff6d 	bl	be342 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   be468:	b948      	cbnz	r0, be47e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   be46a:	68b8      	ldr	r0, [r7, #8]
   be46c:	6803      	ldr	r3, [r0, #0]
   be46e:	699f      	ldr	r7, [r3, #24]
   be470:	462a      	mov	r2, r5
   be472:	4633      	mov	r3, r6
   be474:	4621      	mov	r1, r4
   be476:	46bc      	mov	ip, r7
   be478:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   be47c:	4760      	bx	ip
   be47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000be482 <_ZNSt9type_infoD1Ev>:
   be482:	4770      	bx	lr

000be484 <_ZNKSt9type_info14__is_pointer_pEv>:
   be484:	2000      	movs	r0, #0
   be486:	4770      	bx	lr

000be488 <_ZNKSt9type_infoeqERKS_>:
   be488:	4281      	cmp	r1, r0
   be48a:	b508      	push	{r3, lr}
   be48c:	d00e      	beq.n	be4ac <_ZNKSt9type_infoeqERKS_+0x24>
   be48e:	6840      	ldr	r0, [r0, #4]
   be490:	7803      	ldrb	r3, [r0, #0]
   be492:	2b2a      	cmp	r3, #42	; 0x2a
   be494:	d00c      	beq.n	be4b0 <_ZNKSt9type_infoeqERKS_+0x28>
   be496:	6849      	ldr	r1, [r1, #4]
   be498:	780b      	ldrb	r3, [r1, #0]
   be49a:	2b2a      	cmp	r3, #42	; 0x2a
   be49c:	bf08      	it	eq
   be49e:	3101      	addeq	r1, #1
   be4a0:	f000 fdb5 	bl	bf00e <strcmp>
   be4a4:	fab0 f080 	clz	r0, r0
   be4a8:	0940      	lsrs	r0, r0, #5
   be4aa:	bd08      	pop	{r3, pc}
   be4ac:	2001      	movs	r0, #1
   be4ae:	e7fc      	b.n	be4aa <_ZNKSt9type_infoeqERKS_+0x22>
   be4b0:	2000      	movs	r0, #0
   be4b2:	e7fa      	b.n	be4aa <_ZNKSt9type_infoeqERKS_+0x22>

000be4b4 <__aeabi_drsub>:
   be4b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   be4b8:	e002      	b.n	be4c0 <__adddf3>
   be4ba:	bf00      	nop

000be4bc <__aeabi_dsub>:
   be4bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000be4c0 <__adddf3>:
   be4c0:	b530      	push	{r4, r5, lr}
   be4c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   be4c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   be4ca:	ea94 0f05 	teq	r4, r5
   be4ce:	bf08      	it	eq
   be4d0:	ea90 0f02 	teqeq	r0, r2
   be4d4:	bf1f      	itttt	ne
   be4d6:	ea54 0c00 	orrsne.w	ip, r4, r0
   be4da:	ea55 0c02 	orrsne.w	ip, r5, r2
   be4de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   be4e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   be4e6:	f000 80e2 	beq.w	be6ae <__adddf3+0x1ee>
   be4ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
   be4ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   be4f2:	bfb8      	it	lt
   be4f4:	426d      	neglt	r5, r5
   be4f6:	dd0c      	ble.n	be512 <__adddf3+0x52>
   be4f8:	442c      	add	r4, r5
   be4fa:	ea80 0202 	eor.w	r2, r0, r2
   be4fe:	ea81 0303 	eor.w	r3, r1, r3
   be502:	ea82 0000 	eor.w	r0, r2, r0
   be506:	ea83 0101 	eor.w	r1, r3, r1
   be50a:	ea80 0202 	eor.w	r2, r0, r2
   be50e:	ea81 0303 	eor.w	r3, r1, r3
   be512:	2d36      	cmp	r5, #54	; 0x36
   be514:	bf88      	it	hi
   be516:	bd30      	pophi	{r4, r5, pc}
   be518:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   be51c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   be520:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   be524:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   be528:	d002      	beq.n	be530 <__adddf3+0x70>
   be52a:	4240      	negs	r0, r0
   be52c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be530:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   be534:	ea4f 3303 	mov.w	r3, r3, lsl #12
   be538:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   be53c:	d002      	beq.n	be544 <__adddf3+0x84>
   be53e:	4252      	negs	r2, r2
   be540:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   be544:	ea94 0f05 	teq	r4, r5
   be548:	f000 80a7 	beq.w	be69a <__adddf3+0x1da>
   be54c:	f1a4 0401 	sub.w	r4, r4, #1
   be550:	f1d5 0e20 	rsbs	lr, r5, #32
   be554:	db0d      	blt.n	be572 <__adddf3+0xb2>
   be556:	fa02 fc0e 	lsl.w	ip, r2, lr
   be55a:	fa22 f205 	lsr.w	r2, r2, r5
   be55e:	1880      	adds	r0, r0, r2
   be560:	f141 0100 	adc.w	r1, r1, #0
   be564:	fa03 f20e 	lsl.w	r2, r3, lr
   be568:	1880      	adds	r0, r0, r2
   be56a:	fa43 f305 	asr.w	r3, r3, r5
   be56e:	4159      	adcs	r1, r3
   be570:	e00e      	b.n	be590 <__adddf3+0xd0>
   be572:	f1a5 0520 	sub.w	r5, r5, #32
   be576:	f10e 0e20 	add.w	lr, lr, #32
   be57a:	2a01      	cmp	r2, #1
   be57c:	fa03 fc0e 	lsl.w	ip, r3, lr
   be580:	bf28      	it	cs
   be582:	f04c 0c02 	orrcs.w	ip, ip, #2
   be586:	fa43 f305 	asr.w	r3, r3, r5
   be58a:	18c0      	adds	r0, r0, r3
   be58c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   be590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   be594:	d507      	bpl.n	be5a6 <__adddf3+0xe6>
   be596:	f04f 0e00 	mov.w	lr, #0
   be59a:	f1dc 0c00 	rsbs	ip, ip, #0
   be59e:	eb7e 0000 	sbcs.w	r0, lr, r0
   be5a2:	eb6e 0101 	sbc.w	r1, lr, r1
   be5a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   be5aa:	d31b      	bcc.n	be5e4 <__adddf3+0x124>
   be5ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   be5b0:	d30c      	bcc.n	be5cc <__adddf3+0x10c>
   be5b2:	0849      	lsrs	r1, r1, #1
   be5b4:	ea5f 0030 	movs.w	r0, r0, rrx
   be5b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   be5bc:	f104 0401 	add.w	r4, r4, #1
   be5c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   be5c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   be5c8:	f080 809a 	bcs.w	be700 <__adddf3+0x240>
   be5cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   be5d0:	bf08      	it	eq
   be5d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   be5d6:	f150 0000 	adcs.w	r0, r0, #0
   be5da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be5de:	ea41 0105 	orr.w	r1, r1, r5
   be5e2:	bd30      	pop	{r4, r5, pc}
   be5e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   be5e8:	4140      	adcs	r0, r0
   be5ea:	eb41 0101 	adc.w	r1, r1, r1
   be5ee:	3c01      	subs	r4, #1
   be5f0:	bf28      	it	cs
   be5f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   be5f6:	d2e9      	bcs.n	be5cc <__adddf3+0x10c>
   be5f8:	f091 0f00 	teq	r1, #0
   be5fc:	bf04      	itt	eq
   be5fe:	4601      	moveq	r1, r0
   be600:	2000      	moveq	r0, #0
   be602:	fab1 f381 	clz	r3, r1
   be606:	bf08      	it	eq
   be608:	3320      	addeq	r3, #32
   be60a:	f1a3 030b 	sub.w	r3, r3, #11
   be60e:	f1b3 0220 	subs.w	r2, r3, #32
   be612:	da0c      	bge.n	be62e <__adddf3+0x16e>
   be614:	320c      	adds	r2, #12
   be616:	dd08      	ble.n	be62a <__adddf3+0x16a>
   be618:	f102 0c14 	add.w	ip, r2, #20
   be61c:	f1c2 020c 	rsb	r2, r2, #12
   be620:	fa01 f00c 	lsl.w	r0, r1, ip
   be624:	fa21 f102 	lsr.w	r1, r1, r2
   be628:	e00c      	b.n	be644 <__adddf3+0x184>
   be62a:	f102 0214 	add.w	r2, r2, #20
   be62e:	bfd8      	it	le
   be630:	f1c2 0c20 	rsble	ip, r2, #32
   be634:	fa01 f102 	lsl.w	r1, r1, r2
   be638:	fa20 fc0c 	lsr.w	ip, r0, ip
   be63c:	bfdc      	itt	le
   be63e:	ea41 010c 	orrle.w	r1, r1, ip
   be642:	4090      	lslle	r0, r2
   be644:	1ae4      	subs	r4, r4, r3
   be646:	bfa2      	ittt	ge
   be648:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   be64c:	4329      	orrge	r1, r5
   be64e:	bd30      	popge	{r4, r5, pc}
   be650:	ea6f 0404 	mvn.w	r4, r4
   be654:	3c1f      	subs	r4, #31
   be656:	da1c      	bge.n	be692 <__adddf3+0x1d2>
   be658:	340c      	adds	r4, #12
   be65a:	dc0e      	bgt.n	be67a <__adddf3+0x1ba>
   be65c:	f104 0414 	add.w	r4, r4, #20
   be660:	f1c4 0220 	rsb	r2, r4, #32
   be664:	fa20 f004 	lsr.w	r0, r0, r4
   be668:	fa01 f302 	lsl.w	r3, r1, r2
   be66c:	ea40 0003 	orr.w	r0, r0, r3
   be670:	fa21 f304 	lsr.w	r3, r1, r4
   be674:	ea45 0103 	orr.w	r1, r5, r3
   be678:	bd30      	pop	{r4, r5, pc}
   be67a:	f1c4 040c 	rsb	r4, r4, #12
   be67e:	f1c4 0220 	rsb	r2, r4, #32
   be682:	fa20 f002 	lsr.w	r0, r0, r2
   be686:	fa01 f304 	lsl.w	r3, r1, r4
   be68a:	ea40 0003 	orr.w	r0, r0, r3
   be68e:	4629      	mov	r1, r5
   be690:	bd30      	pop	{r4, r5, pc}
   be692:	fa21 f004 	lsr.w	r0, r1, r4
   be696:	4629      	mov	r1, r5
   be698:	bd30      	pop	{r4, r5, pc}
   be69a:	f094 0f00 	teq	r4, #0
   be69e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   be6a2:	bf06      	itte	eq
   be6a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   be6a8:	3401      	addeq	r4, #1
   be6aa:	3d01      	subne	r5, #1
   be6ac:	e74e      	b.n	be54c <__adddf3+0x8c>
   be6ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   be6b2:	bf18      	it	ne
   be6b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   be6b8:	d029      	beq.n	be70e <__adddf3+0x24e>
   be6ba:	ea94 0f05 	teq	r4, r5
   be6be:	bf08      	it	eq
   be6c0:	ea90 0f02 	teqeq	r0, r2
   be6c4:	d005      	beq.n	be6d2 <__adddf3+0x212>
   be6c6:	ea54 0c00 	orrs.w	ip, r4, r0
   be6ca:	bf04      	itt	eq
   be6cc:	4619      	moveq	r1, r3
   be6ce:	4610      	moveq	r0, r2
   be6d0:	bd30      	pop	{r4, r5, pc}
   be6d2:	ea91 0f03 	teq	r1, r3
   be6d6:	bf1e      	ittt	ne
   be6d8:	2100      	movne	r1, #0
   be6da:	2000      	movne	r0, #0
   be6dc:	bd30      	popne	{r4, r5, pc}
   be6de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   be6e2:	d105      	bne.n	be6f0 <__adddf3+0x230>
   be6e4:	0040      	lsls	r0, r0, #1
   be6e6:	4149      	adcs	r1, r1
   be6e8:	bf28      	it	cs
   be6ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   be6ee:	bd30      	pop	{r4, r5, pc}
   be6f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   be6f4:	bf3c      	itt	cc
   be6f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   be6fa:	bd30      	popcc	{r4, r5, pc}
   be6fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   be700:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   be704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   be708:	f04f 0000 	mov.w	r0, #0
   be70c:	bd30      	pop	{r4, r5, pc}
   be70e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   be712:	bf1a      	itte	ne
   be714:	4619      	movne	r1, r3
   be716:	4610      	movne	r0, r2
   be718:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   be71c:	bf1c      	itt	ne
   be71e:	460b      	movne	r3, r1
   be720:	4602      	movne	r2, r0
   be722:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   be726:	bf06      	itte	eq
   be728:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   be72c:	ea91 0f03 	teqeq	r1, r3
   be730:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   be734:	bd30      	pop	{r4, r5, pc}
   be736:	bf00      	nop

000be738 <__aeabi_ui2d>:
   be738:	f090 0f00 	teq	r0, #0
   be73c:	bf04      	itt	eq
   be73e:	2100      	moveq	r1, #0
   be740:	4770      	bxeq	lr
   be742:	b530      	push	{r4, r5, lr}
   be744:	f44f 6480 	mov.w	r4, #1024	; 0x400
   be748:	f104 0432 	add.w	r4, r4, #50	; 0x32
   be74c:	f04f 0500 	mov.w	r5, #0
   be750:	f04f 0100 	mov.w	r1, #0
   be754:	e750      	b.n	be5f8 <__adddf3+0x138>
   be756:	bf00      	nop

000be758 <__aeabi_i2d>:
   be758:	f090 0f00 	teq	r0, #0
   be75c:	bf04      	itt	eq
   be75e:	2100      	moveq	r1, #0
   be760:	4770      	bxeq	lr
   be762:	b530      	push	{r4, r5, lr}
   be764:	f44f 6480 	mov.w	r4, #1024	; 0x400
   be768:	f104 0432 	add.w	r4, r4, #50	; 0x32
   be76c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   be770:	bf48      	it	mi
   be772:	4240      	negmi	r0, r0
   be774:	f04f 0100 	mov.w	r1, #0
   be778:	e73e      	b.n	be5f8 <__adddf3+0x138>
   be77a:	bf00      	nop

000be77c <__aeabi_f2d>:
   be77c:	0042      	lsls	r2, r0, #1
   be77e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   be782:	ea4f 0131 	mov.w	r1, r1, rrx
   be786:	ea4f 7002 	mov.w	r0, r2, lsl #28
   be78a:	bf1f      	itttt	ne
   be78c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   be790:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   be794:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   be798:	4770      	bxne	lr
   be79a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   be79e:	bf08      	it	eq
   be7a0:	4770      	bxeq	lr
   be7a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   be7a6:	bf04      	itt	eq
   be7a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   be7ac:	4770      	bxeq	lr
   be7ae:	b530      	push	{r4, r5, lr}
   be7b0:	f44f 7460 	mov.w	r4, #896	; 0x380
   be7b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   be7b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   be7bc:	e71c      	b.n	be5f8 <__adddf3+0x138>
   be7be:	bf00      	nop

000be7c0 <__aeabi_ul2d>:
   be7c0:	ea50 0201 	orrs.w	r2, r0, r1
   be7c4:	bf08      	it	eq
   be7c6:	4770      	bxeq	lr
   be7c8:	b530      	push	{r4, r5, lr}
   be7ca:	f04f 0500 	mov.w	r5, #0
   be7ce:	e00a      	b.n	be7e6 <__aeabi_l2d+0x16>

000be7d0 <__aeabi_l2d>:
   be7d0:	ea50 0201 	orrs.w	r2, r0, r1
   be7d4:	bf08      	it	eq
   be7d6:	4770      	bxeq	lr
   be7d8:	b530      	push	{r4, r5, lr}
   be7da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   be7de:	d502      	bpl.n	be7e6 <__aeabi_l2d+0x16>
   be7e0:	4240      	negs	r0, r0
   be7e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be7e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   be7ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
   be7ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   be7f2:	f43f aed8 	beq.w	be5a6 <__adddf3+0xe6>
   be7f6:	f04f 0203 	mov.w	r2, #3
   be7fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   be7fe:	bf18      	it	ne
   be800:	3203      	addne	r2, #3
   be802:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   be806:	bf18      	it	ne
   be808:	3203      	addne	r2, #3
   be80a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   be80e:	f1c2 0320 	rsb	r3, r2, #32
   be812:	fa00 fc03 	lsl.w	ip, r0, r3
   be816:	fa20 f002 	lsr.w	r0, r0, r2
   be81a:	fa01 fe03 	lsl.w	lr, r1, r3
   be81e:	ea40 000e 	orr.w	r0, r0, lr
   be822:	fa21 f102 	lsr.w	r1, r1, r2
   be826:	4414      	add	r4, r2
   be828:	e6bd      	b.n	be5a6 <__adddf3+0xe6>
   be82a:	bf00      	nop

000be82c <__aeabi_dmul>:
   be82c:	b570      	push	{r4, r5, r6, lr}
   be82e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   be832:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   be836:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   be83a:	bf1d      	ittte	ne
   be83c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   be840:	ea94 0f0c 	teqne	r4, ip
   be844:	ea95 0f0c 	teqne	r5, ip
   be848:	f000 f8de 	bleq	bea08 <__aeabi_dmul+0x1dc>
   be84c:	442c      	add	r4, r5
   be84e:	ea81 0603 	eor.w	r6, r1, r3
   be852:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   be856:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   be85a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   be85e:	bf18      	it	ne
   be860:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   be864:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be868:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   be86c:	d038      	beq.n	be8e0 <__aeabi_dmul+0xb4>
   be86e:	fba0 ce02 	umull	ip, lr, r0, r2
   be872:	f04f 0500 	mov.w	r5, #0
   be876:	fbe1 e502 	umlal	lr, r5, r1, r2
   be87a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   be87e:	fbe0 e503 	umlal	lr, r5, r0, r3
   be882:	f04f 0600 	mov.w	r6, #0
   be886:	fbe1 5603 	umlal	r5, r6, r1, r3
   be88a:	f09c 0f00 	teq	ip, #0
   be88e:	bf18      	it	ne
   be890:	f04e 0e01 	orrne.w	lr, lr, #1
   be894:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   be898:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   be89c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   be8a0:	d204      	bcs.n	be8ac <__aeabi_dmul+0x80>
   be8a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   be8a6:	416d      	adcs	r5, r5
   be8a8:	eb46 0606 	adc.w	r6, r6, r6
   be8ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   be8b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   be8b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   be8b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   be8bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   be8c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   be8c4:	bf88      	it	hi
   be8c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   be8ca:	d81e      	bhi.n	be90a <__aeabi_dmul+0xde>
   be8cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   be8d0:	bf08      	it	eq
   be8d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   be8d6:	f150 0000 	adcs.w	r0, r0, #0
   be8da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be8de:	bd70      	pop	{r4, r5, r6, pc}
   be8e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   be8e4:	ea46 0101 	orr.w	r1, r6, r1
   be8e8:	ea40 0002 	orr.w	r0, r0, r2
   be8ec:	ea81 0103 	eor.w	r1, r1, r3
   be8f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   be8f4:	bfc2      	ittt	gt
   be8f6:	ebd4 050c 	rsbsgt	r5, r4, ip
   be8fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   be8fe:	bd70      	popgt	{r4, r5, r6, pc}
   be900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be904:	f04f 0e00 	mov.w	lr, #0
   be908:	3c01      	subs	r4, #1
   be90a:	f300 80ab 	bgt.w	bea64 <__aeabi_dmul+0x238>
   be90e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   be912:	bfde      	ittt	le
   be914:	2000      	movle	r0, #0
   be916:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   be91a:	bd70      	pople	{r4, r5, r6, pc}
   be91c:	f1c4 0400 	rsb	r4, r4, #0
   be920:	3c20      	subs	r4, #32
   be922:	da35      	bge.n	be990 <__aeabi_dmul+0x164>
   be924:	340c      	adds	r4, #12
   be926:	dc1b      	bgt.n	be960 <__aeabi_dmul+0x134>
   be928:	f104 0414 	add.w	r4, r4, #20
   be92c:	f1c4 0520 	rsb	r5, r4, #32
   be930:	fa00 f305 	lsl.w	r3, r0, r5
   be934:	fa20 f004 	lsr.w	r0, r0, r4
   be938:	fa01 f205 	lsl.w	r2, r1, r5
   be93c:	ea40 0002 	orr.w	r0, r0, r2
   be940:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   be944:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   be948:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   be94c:	fa21 f604 	lsr.w	r6, r1, r4
   be950:	eb42 0106 	adc.w	r1, r2, r6
   be954:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   be958:	bf08      	it	eq
   be95a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   be95e:	bd70      	pop	{r4, r5, r6, pc}
   be960:	f1c4 040c 	rsb	r4, r4, #12
   be964:	f1c4 0520 	rsb	r5, r4, #32
   be968:	fa00 f304 	lsl.w	r3, r0, r4
   be96c:	fa20 f005 	lsr.w	r0, r0, r5
   be970:	fa01 f204 	lsl.w	r2, r1, r4
   be974:	ea40 0002 	orr.w	r0, r0, r2
   be978:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be97c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   be980:	f141 0100 	adc.w	r1, r1, #0
   be984:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   be988:	bf08      	it	eq
   be98a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   be98e:	bd70      	pop	{r4, r5, r6, pc}
   be990:	f1c4 0520 	rsb	r5, r4, #32
   be994:	fa00 f205 	lsl.w	r2, r0, r5
   be998:	ea4e 0e02 	orr.w	lr, lr, r2
   be99c:	fa20 f304 	lsr.w	r3, r0, r4
   be9a0:	fa01 f205 	lsl.w	r2, r1, r5
   be9a4:	ea43 0302 	orr.w	r3, r3, r2
   be9a8:	fa21 f004 	lsr.w	r0, r1, r4
   be9ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be9b0:	fa21 f204 	lsr.w	r2, r1, r4
   be9b4:	ea20 0002 	bic.w	r0, r0, r2
   be9b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   be9bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   be9c0:	bf08      	it	eq
   be9c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   be9c6:	bd70      	pop	{r4, r5, r6, pc}
   be9c8:	f094 0f00 	teq	r4, #0
   be9cc:	d10f      	bne.n	be9ee <__aeabi_dmul+0x1c2>
   be9ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   be9d2:	0040      	lsls	r0, r0, #1
   be9d4:	eb41 0101 	adc.w	r1, r1, r1
   be9d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   be9dc:	bf08      	it	eq
   be9de:	3c01      	subeq	r4, #1
   be9e0:	d0f7      	beq.n	be9d2 <__aeabi_dmul+0x1a6>
   be9e2:	ea41 0106 	orr.w	r1, r1, r6
   be9e6:	f095 0f00 	teq	r5, #0
   be9ea:	bf18      	it	ne
   be9ec:	4770      	bxne	lr
   be9ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   be9f2:	0052      	lsls	r2, r2, #1
   be9f4:	eb43 0303 	adc.w	r3, r3, r3
   be9f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   be9fc:	bf08      	it	eq
   be9fe:	3d01      	subeq	r5, #1
   bea00:	d0f7      	beq.n	be9f2 <__aeabi_dmul+0x1c6>
   bea02:	ea43 0306 	orr.w	r3, r3, r6
   bea06:	4770      	bx	lr
   bea08:	ea94 0f0c 	teq	r4, ip
   bea0c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bea10:	bf18      	it	ne
   bea12:	ea95 0f0c 	teqne	r5, ip
   bea16:	d00c      	beq.n	bea32 <__aeabi_dmul+0x206>
   bea18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bea1c:	bf18      	it	ne
   bea1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bea22:	d1d1      	bne.n	be9c8 <__aeabi_dmul+0x19c>
   bea24:	ea81 0103 	eor.w	r1, r1, r3
   bea28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bea2c:	f04f 0000 	mov.w	r0, #0
   bea30:	bd70      	pop	{r4, r5, r6, pc}
   bea32:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bea36:	bf06      	itte	eq
   bea38:	4610      	moveq	r0, r2
   bea3a:	4619      	moveq	r1, r3
   bea3c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bea40:	d019      	beq.n	bea76 <__aeabi_dmul+0x24a>
   bea42:	ea94 0f0c 	teq	r4, ip
   bea46:	d102      	bne.n	bea4e <__aeabi_dmul+0x222>
   bea48:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bea4c:	d113      	bne.n	bea76 <__aeabi_dmul+0x24a>
   bea4e:	ea95 0f0c 	teq	r5, ip
   bea52:	d105      	bne.n	bea60 <__aeabi_dmul+0x234>
   bea54:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bea58:	bf1c      	itt	ne
   bea5a:	4610      	movne	r0, r2
   bea5c:	4619      	movne	r1, r3
   bea5e:	d10a      	bne.n	bea76 <__aeabi_dmul+0x24a>
   bea60:	ea81 0103 	eor.w	r1, r1, r3
   bea64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bea68:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bea6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bea70:	f04f 0000 	mov.w	r0, #0
   bea74:	bd70      	pop	{r4, r5, r6, pc}
   bea76:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bea7a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bea7e:	bd70      	pop	{r4, r5, r6, pc}

000bea80 <__aeabi_ddiv>:
   bea80:	b570      	push	{r4, r5, r6, lr}
   bea82:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bea86:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bea8a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bea8e:	bf1d      	ittte	ne
   bea90:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bea94:	ea94 0f0c 	teqne	r4, ip
   bea98:	ea95 0f0c 	teqne	r5, ip
   bea9c:	f000 f8a7 	bleq	bebee <__aeabi_ddiv+0x16e>
   beaa0:	eba4 0405 	sub.w	r4, r4, r5
   beaa4:	ea81 0e03 	eor.w	lr, r1, r3
   beaa8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   beaac:	ea4f 3101 	mov.w	r1, r1, lsl #12
   beab0:	f000 8088 	beq.w	bebc4 <__aeabi_ddiv+0x144>
   beab4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   beab8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   beabc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   beac0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   beac4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   beac8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   beacc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bead0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bead4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bead8:	429d      	cmp	r5, r3
   beada:	bf08      	it	eq
   beadc:	4296      	cmpeq	r6, r2
   beade:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   beae2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   beae6:	d202      	bcs.n	beaee <__aeabi_ddiv+0x6e>
   beae8:	085b      	lsrs	r3, r3, #1
   beaea:	ea4f 0232 	mov.w	r2, r2, rrx
   beaee:	1ab6      	subs	r6, r6, r2
   beaf0:	eb65 0503 	sbc.w	r5, r5, r3
   beaf4:	085b      	lsrs	r3, r3, #1
   beaf6:	ea4f 0232 	mov.w	r2, r2, rrx
   beafa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   beafe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   beb02:	ebb6 0e02 	subs.w	lr, r6, r2
   beb06:	eb75 0e03 	sbcs.w	lr, r5, r3
   beb0a:	bf22      	ittt	cs
   beb0c:	1ab6      	subcs	r6, r6, r2
   beb0e:	4675      	movcs	r5, lr
   beb10:	ea40 000c 	orrcs.w	r0, r0, ip
   beb14:	085b      	lsrs	r3, r3, #1
   beb16:	ea4f 0232 	mov.w	r2, r2, rrx
   beb1a:	ebb6 0e02 	subs.w	lr, r6, r2
   beb1e:	eb75 0e03 	sbcs.w	lr, r5, r3
   beb22:	bf22      	ittt	cs
   beb24:	1ab6      	subcs	r6, r6, r2
   beb26:	4675      	movcs	r5, lr
   beb28:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   beb2c:	085b      	lsrs	r3, r3, #1
   beb2e:	ea4f 0232 	mov.w	r2, r2, rrx
   beb32:	ebb6 0e02 	subs.w	lr, r6, r2
   beb36:	eb75 0e03 	sbcs.w	lr, r5, r3
   beb3a:	bf22      	ittt	cs
   beb3c:	1ab6      	subcs	r6, r6, r2
   beb3e:	4675      	movcs	r5, lr
   beb40:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   beb44:	085b      	lsrs	r3, r3, #1
   beb46:	ea4f 0232 	mov.w	r2, r2, rrx
   beb4a:	ebb6 0e02 	subs.w	lr, r6, r2
   beb4e:	eb75 0e03 	sbcs.w	lr, r5, r3
   beb52:	bf22      	ittt	cs
   beb54:	1ab6      	subcs	r6, r6, r2
   beb56:	4675      	movcs	r5, lr
   beb58:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   beb5c:	ea55 0e06 	orrs.w	lr, r5, r6
   beb60:	d018      	beq.n	beb94 <__aeabi_ddiv+0x114>
   beb62:	ea4f 1505 	mov.w	r5, r5, lsl #4
   beb66:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   beb6a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   beb6e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   beb72:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   beb76:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   beb7a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   beb7e:	d1c0      	bne.n	beb02 <__aeabi_ddiv+0x82>
   beb80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   beb84:	d10b      	bne.n	beb9e <__aeabi_ddiv+0x11e>
   beb86:	ea41 0100 	orr.w	r1, r1, r0
   beb8a:	f04f 0000 	mov.w	r0, #0
   beb8e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   beb92:	e7b6      	b.n	beb02 <__aeabi_ddiv+0x82>
   beb94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   beb98:	bf04      	itt	eq
   beb9a:	4301      	orreq	r1, r0
   beb9c:	2000      	moveq	r0, #0
   beb9e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   beba2:	bf88      	it	hi
   beba4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   beba8:	f63f aeaf 	bhi.w	be90a <__aeabi_dmul+0xde>
   bebac:	ebb5 0c03 	subs.w	ip, r5, r3
   bebb0:	bf04      	itt	eq
   bebb2:	ebb6 0c02 	subseq.w	ip, r6, r2
   bebb6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bebba:	f150 0000 	adcs.w	r0, r0, #0
   bebbe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bebc2:	bd70      	pop	{r4, r5, r6, pc}
   bebc4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bebc8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bebcc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bebd0:	bfc2      	ittt	gt
   bebd2:	ebd4 050c 	rsbsgt	r5, r4, ip
   bebd6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bebda:	bd70      	popgt	{r4, r5, r6, pc}
   bebdc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bebe0:	f04f 0e00 	mov.w	lr, #0
   bebe4:	3c01      	subs	r4, #1
   bebe6:	e690      	b.n	be90a <__aeabi_dmul+0xde>
   bebe8:	ea45 0e06 	orr.w	lr, r5, r6
   bebec:	e68d      	b.n	be90a <__aeabi_dmul+0xde>
   bebee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bebf2:	ea94 0f0c 	teq	r4, ip
   bebf6:	bf08      	it	eq
   bebf8:	ea95 0f0c 	teqeq	r5, ip
   bebfc:	f43f af3b 	beq.w	bea76 <__aeabi_dmul+0x24a>
   bec00:	ea94 0f0c 	teq	r4, ip
   bec04:	d10a      	bne.n	bec1c <__aeabi_ddiv+0x19c>
   bec06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bec0a:	f47f af34 	bne.w	bea76 <__aeabi_dmul+0x24a>
   bec0e:	ea95 0f0c 	teq	r5, ip
   bec12:	f47f af25 	bne.w	bea60 <__aeabi_dmul+0x234>
   bec16:	4610      	mov	r0, r2
   bec18:	4619      	mov	r1, r3
   bec1a:	e72c      	b.n	bea76 <__aeabi_dmul+0x24a>
   bec1c:	ea95 0f0c 	teq	r5, ip
   bec20:	d106      	bne.n	bec30 <__aeabi_ddiv+0x1b0>
   bec22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bec26:	f43f aefd 	beq.w	bea24 <__aeabi_dmul+0x1f8>
   bec2a:	4610      	mov	r0, r2
   bec2c:	4619      	mov	r1, r3
   bec2e:	e722      	b.n	bea76 <__aeabi_dmul+0x24a>
   bec30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bec34:	bf18      	it	ne
   bec36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bec3a:	f47f aec5 	bne.w	be9c8 <__aeabi_dmul+0x19c>
   bec3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bec42:	f47f af0d 	bne.w	bea60 <__aeabi_dmul+0x234>
   bec46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bec4a:	f47f aeeb 	bne.w	bea24 <__aeabi_dmul+0x1f8>
   bec4e:	e712      	b.n	bea76 <__aeabi_dmul+0x24a>

000bec50 <__gedf2>:
   bec50:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bec54:	e006      	b.n	bec64 <__cmpdf2+0x4>
   bec56:	bf00      	nop

000bec58 <__ledf2>:
   bec58:	f04f 0c01 	mov.w	ip, #1
   bec5c:	e002      	b.n	bec64 <__cmpdf2+0x4>
   bec5e:	bf00      	nop

000bec60 <__cmpdf2>:
   bec60:	f04f 0c01 	mov.w	ip, #1
   bec64:	f84d cd04 	str.w	ip, [sp, #-4]!
   bec68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bec6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bec70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bec74:	bf18      	it	ne
   bec76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bec7a:	d01b      	beq.n	becb4 <__cmpdf2+0x54>
   bec7c:	b001      	add	sp, #4
   bec7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bec82:	bf0c      	ite	eq
   bec84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bec88:	ea91 0f03 	teqne	r1, r3
   bec8c:	bf02      	ittt	eq
   bec8e:	ea90 0f02 	teqeq	r0, r2
   bec92:	2000      	moveq	r0, #0
   bec94:	4770      	bxeq	lr
   bec96:	f110 0f00 	cmn.w	r0, #0
   bec9a:	ea91 0f03 	teq	r1, r3
   bec9e:	bf58      	it	pl
   beca0:	4299      	cmppl	r1, r3
   beca2:	bf08      	it	eq
   beca4:	4290      	cmpeq	r0, r2
   beca6:	bf2c      	ite	cs
   beca8:	17d8      	asrcs	r0, r3, #31
   becaa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   becae:	f040 0001 	orr.w	r0, r0, #1
   becb2:	4770      	bx	lr
   becb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   becb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   becbc:	d102      	bne.n	becc4 <__cmpdf2+0x64>
   becbe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   becc2:	d107      	bne.n	becd4 <__cmpdf2+0x74>
   becc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   becc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   beccc:	d1d6      	bne.n	bec7c <__cmpdf2+0x1c>
   becce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   becd2:	d0d3      	beq.n	bec7c <__cmpdf2+0x1c>
   becd4:	f85d 0b04 	ldr.w	r0, [sp], #4
   becd8:	4770      	bx	lr
   becda:	bf00      	nop

000becdc <__aeabi_cdrcmple>:
   becdc:	4684      	mov	ip, r0
   becde:	4610      	mov	r0, r2
   bece0:	4662      	mov	r2, ip
   bece2:	468c      	mov	ip, r1
   bece4:	4619      	mov	r1, r3
   bece6:	4663      	mov	r3, ip
   bece8:	e000      	b.n	becec <__aeabi_cdcmpeq>
   becea:	bf00      	nop

000becec <__aeabi_cdcmpeq>:
   becec:	b501      	push	{r0, lr}
   becee:	f7ff ffb7 	bl	bec60 <__cmpdf2>
   becf2:	2800      	cmp	r0, #0
   becf4:	bf48      	it	mi
   becf6:	f110 0f00 	cmnmi.w	r0, #0
   becfa:	bd01      	pop	{r0, pc}

000becfc <__aeabi_dcmpeq>:
   becfc:	f84d ed08 	str.w	lr, [sp, #-8]!
   bed00:	f7ff fff4 	bl	becec <__aeabi_cdcmpeq>
   bed04:	bf0c      	ite	eq
   bed06:	2001      	moveq	r0, #1
   bed08:	2000      	movne	r0, #0
   bed0a:	f85d fb08 	ldr.w	pc, [sp], #8
   bed0e:	bf00      	nop

000bed10 <__aeabi_dcmplt>:
   bed10:	f84d ed08 	str.w	lr, [sp, #-8]!
   bed14:	f7ff ffea 	bl	becec <__aeabi_cdcmpeq>
   bed18:	bf34      	ite	cc
   bed1a:	2001      	movcc	r0, #1
   bed1c:	2000      	movcs	r0, #0
   bed1e:	f85d fb08 	ldr.w	pc, [sp], #8
   bed22:	bf00      	nop

000bed24 <__aeabi_dcmple>:
   bed24:	f84d ed08 	str.w	lr, [sp, #-8]!
   bed28:	f7ff ffe0 	bl	becec <__aeabi_cdcmpeq>
   bed2c:	bf94      	ite	ls
   bed2e:	2001      	movls	r0, #1
   bed30:	2000      	movhi	r0, #0
   bed32:	f85d fb08 	ldr.w	pc, [sp], #8
   bed36:	bf00      	nop

000bed38 <__aeabi_dcmpge>:
   bed38:	f84d ed08 	str.w	lr, [sp, #-8]!
   bed3c:	f7ff ffce 	bl	becdc <__aeabi_cdrcmple>
   bed40:	bf94      	ite	ls
   bed42:	2001      	movls	r0, #1
   bed44:	2000      	movhi	r0, #0
   bed46:	f85d fb08 	ldr.w	pc, [sp], #8
   bed4a:	bf00      	nop

000bed4c <__aeabi_dcmpgt>:
   bed4c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bed50:	f7ff ffc4 	bl	becdc <__aeabi_cdrcmple>
   bed54:	bf34      	ite	cc
   bed56:	2001      	movcc	r0, #1
   bed58:	2000      	movcs	r0, #0
   bed5a:	f85d fb08 	ldr.w	pc, [sp], #8
   bed5e:	bf00      	nop

000bed60 <__aeabi_d2uiz>:
   bed60:	004a      	lsls	r2, r1, #1
   bed62:	d211      	bcs.n	bed88 <__aeabi_d2uiz+0x28>
   bed64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bed68:	d211      	bcs.n	bed8e <__aeabi_d2uiz+0x2e>
   bed6a:	d50d      	bpl.n	bed88 <__aeabi_d2uiz+0x28>
   bed6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bed70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bed74:	d40e      	bmi.n	bed94 <__aeabi_d2uiz+0x34>
   bed76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bed7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bed7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bed82:	fa23 f002 	lsr.w	r0, r3, r2
   bed86:	4770      	bx	lr
   bed88:	f04f 0000 	mov.w	r0, #0
   bed8c:	4770      	bx	lr
   bed8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bed92:	d102      	bne.n	bed9a <__aeabi_d2uiz+0x3a>
   bed94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bed98:	4770      	bx	lr
   bed9a:	f04f 0000 	mov.w	r0, #0
   bed9e:	4770      	bx	lr

000beda0 <__aeabi_d2f>:
   beda0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   beda4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   beda8:	bf24      	itt	cs
   bedaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bedae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bedb2:	d90d      	bls.n	bedd0 <__aeabi_d2f+0x30>
   bedb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bedb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bedbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bedc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bedc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bedc8:	bf08      	it	eq
   bedca:	f020 0001 	biceq.w	r0, r0, #1
   bedce:	4770      	bx	lr
   bedd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bedd4:	d121      	bne.n	bee1a <__aeabi_d2f+0x7a>
   bedd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bedda:	bfbc      	itt	lt
   beddc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bede0:	4770      	bxlt	lr
   bede2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bede6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bedea:	f1c2 0218 	rsb	r2, r2, #24
   bedee:	f1c2 0c20 	rsb	ip, r2, #32
   bedf2:	fa10 f30c 	lsls.w	r3, r0, ip
   bedf6:	fa20 f002 	lsr.w	r0, r0, r2
   bedfa:	bf18      	it	ne
   bedfc:	f040 0001 	orrne.w	r0, r0, #1
   bee00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bee04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bee08:	fa03 fc0c 	lsl.w	ip, r3, ip
   bee0c:	ea40 000c 	orr.w	r0, r0, ip
   bee10:	fa23 f302 	lsr.w	r3, r3, r2
   bee14:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bee18:	e7cc      	b.n	bedb4 <__aeabi_d2f+0x14>
   bee1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bee1e:	d107      	bne.n	bee30 <__aeabi_d2f+0x90>
   bee20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bee24:	bf1e      	ittt	ne
   bee26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bee2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bee2e:	4770      	bxne	lr
   bee30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bee34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bee38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bee3c:	4770      	bx	lr
   bee3e:	bf00      	nop

000bee40 <__aeabi_d2ulz>:
   bee40:	b5d0      	push	{r4, r6, r7, lr}
   bee42:	4b0c      	ldr	r3, [pc, #48]	; (bee74 <__aeabi_d2ulz+0x34>)
   bee44:	2200      	movs	r2, #0
   bee46:	4606      	mov	r6, r0
   bee48:	460f      	mov	r7, r1
   bee4a:	f7ff fcef 	bl	be82c <__aeabi_dmul>
   bee4e:	f7ff ff87 	bl	bed60 <__aeabi_d2uiz>
   bee52:	4604      	mov	r4, r0
   bee54:	f7ff fc70 	bl	be738 <__aeabi_ui2d>
   bee58:	4b07      	ldr	r3, [pc, #28]	; (bee78 <__aeabi_d2ulz+0x38>)
   bee5a:	2200      	movs	r2, #0
   bee5c:	f7ff fce6 	bl	be82c <__aeabi_dmul>
   bee60:	4602      	mov	r2, r0
   bee62:	460b      	mov	r3, r1
   bee64:	4630      	mov	r0, r6
   bee66:	4639      	mov	r1, r7
   bee68:	f7ff fb28 	bl	be4bc <__aeabi_dsub>
   bee6c:	f7ff ff78 	bl	bed60 <__aeabi_d2uiz>
   bee70:	4621      	mov	r1, r4
   bee72:	bdd0      	pop	{r4, r6, r7, pc}
   bee74:	3df00000 	.word	0x3df00000
   bee78:	41f00000 	.word	0x41f00000

000bee7c <atexit>:
   bee7c:	2300      	movs	r3, #0
   bee7e:	4601      	mov	r1, r0
   bee80:	461a      	mov	r2, r3
   bee82:	4618      	mov	r0, r3
   bee84:	f000 bfea 	b.w	bfe5c <__register_exitproc>

000bee88 <atof>:
   bee88:	2100      	movs	r1, #0
   bee8a:	f000 bf4f 	b.w	bfd2c <strtod>

000bee8e <atoi>:
   bee8e:	220a      	movs	r2, #10
   bee90:	2100      	movs	r1, #0
   bee92:	f000 bfd9 	b.w	bfe48 <strtol>

000bee96 <memcmp>:
   bee96:	b510      	push	{r4, lr}
   bee98:	3901      	subs	r1, #1
   bee9a:	4402      	add	r2, r0
   bee9c:	4290      	cmp	r0, r2
   bee9e:	d101      	bne.n	beea4 <memcmp+0xe>
   beea0:	2000      	movs	r0, #0
   beea2:	e005      	b.n	beeb0 <memcmp+0x1a>
   beea4:	7803      	ldrb	r3, [r0, #0]
   beea6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   beeaa:	42a3      	cmp	r3, r4
   beeac:	d001      	beq.n	beeb2 <memcmp+0x1c>
   beeae:	1b18      	subs	r0, r3, r4
   beeb0:	bd10      	pop	{r4, pc}
   beeb2:	3001      	adds	r0, #1
   beeb4:	e7f2      	b.n	bee9c <memcmp+0x6>

000beeb6 <memcpy>:
   beeb6:	440a      	add	r2, r1
   beeb8:	4291      	cmp	r1, r2
   beeba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   beebe:	d100      	bne.n	beec2 <memcpy+0xc>
   beec0:	4770      	bx	lr
   beec2:	b510      	push	{r4, lr}
   beec4:	f811 4b01 	ldrb.w	r4, [r1], #1
   beec8:	f803 4f01 	strb.w	r4, [r3, #1]!
   beecc:	4291      	cmp	r1, r2
   beece:	d1f9      	bne.n	beec4 <memcpy+0xe>
   beed0:	bd10      	pop	{r4, pc}

000beed2 <memmove>:
   beed2:	4288      	cmp	r0, r1
   beed4:	b510      	push	{r4, lr}
   beed6:	eb01 0402 	add.w	r4, r1, r2
   beeda:	d902      	bls.n	beee2 <memmove+0x10>
   beedc:	4284      	cmp	r4, r0
   beede:	4623      	mov	r3, r4
   beee0:	d807      	bhi.n	beef2 <memmove+0x20>
   beee2:	1e43      	subs	r3, r0, #1
   beee4:	42a1      	cmp	r1, r4
   beee6:	d008      	beq.n	beefa <memmove+0x28>
   beee8:	f811 2b01 	ldrb.w	r2, [r1], #1
   beeec:	f803 2f01 	strb.w	r2, [r3, #1]!
   beef0:	e7f8      	b.n	beee4 <memmove+0x12>
   beef2:	4402      	add	r2, r0
   beef4:	4601      	mov	r1, r0
   beef6:	428a      	cmp	r2, r1
   beef8:	d100      	bne.n	beefc <memmove+0x2a>
   beefa:	bd10      	pop	{r4, pc}
   beefc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bef00:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bef04:	e7f7      	b.n	beef6 <memmove+0x24>

000bef06 <memset>:
   bef06:	4402      	add	r2, r0
   bef08:	4603      	mov	r3, r0
   bef0a:	4293      	cmp	r3, r2
   bef0c:	d100      	bne.n	bef10 <memset+0xa>
   bef0e:	4770      	bx	lr
   bef10:	f803 1b01 	strb.w	r1, [r3], #1
   bef14:	e7f9      	b.n	bef0a <memset+0x4>
	...

000bef18 <srand>:
   bef18:	b538      	push	{r3, r4, r5, lr}
   bef1a:	4b10      	ldr	r3, [pc, #64]	; (bef5c <srand+0x44>)
   bef1c:	681d      	ldr	r5, [r3, #0]
   bef1e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bef20:	4604      	mov	r4, r0
   bef22:	b9b3      	cbnz	r3, bef52 <srand+0x3a>
   bef24:	2018      	movs	r0, #24
   bef26:	f7fb fa5f 	bl	ba3e8 <malloc>
   bef2a:	4602      	mov	r2, r0
   bef2c:	63a8      	str	r0, [r5, #56]	; 0x38
   bef2e:	b920      	cbnz	r0, bef3a <srand+0x22>
   bef30:	4b0b      	ldr	r3, [pc, #44]	; (bef60 <srand+0x48>)
   bef32:	480c      	ldr	r0, [pc, #48]	; (bef64 <srand+0x4c>)
   bef34:	2142      	movs	r1, #66	; 0x42
   bef36:	f7fb faa7 	bl	ba488 <__assert_func>
   bef3a:	490b      	ldr	r1, [pc, #44]	; (bef68 <srand+0x50>)
   bef3c:	4b0b      	ldr	r3, [pc, #44]	; (bef6c <srand+0x54>)
   bef3e:	e9c0 1300 	strd	r1, r3, [r0]
   bef42:	4b0b      	ldr	r3, [pc, #44]	; (bef70 <srand+0x58>)
   bef44:	6083      	str	r3, [r0, #8]
   bef46:	230b      	movs	r3, #11
   bef48:	8183      	strh	r3, [r0, #12]
   bef4a:	2100      	movs	r1, #0
   bef4c:	2001      	movs	r0, #1
   bef4e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bef52:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bef54:	2200      	movs	r2, #0
   bef56:	611c      	str	r4, [r3, #16]
   bef58:	615a      	str	r2, [r3, #20]
   bef5a:	bd38      	pop	{r3, r4, r5, pc}
   bef5c:	2003dab0 	.word	0x2003dab0
   bef60:	000c275d 	.word	0x000c275d
   bef64:	000c2774 	.word	0x000c2774
   bef68:	abcd330e 	.word	0xabcd330e
   bef6c:	e66d1234 	.word	0xe66d1234
   bef70:	0005deec 	.word	0x0005deec

000bef74 <rand>:
   bef74:	4b16      	ldr	r3, [pc, #88]	; (befd0 <rand+0x5c>)
   bef76:	b510      	push	{r4, lr}
   bef78:	681c      	ldr	r4, [r3, #0]
   bef7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bef7c:	b9b3      	cbnz	r3, befac <rand+0x38>
   bef7e:	2018      	movs	r0, #24
   bef80:	f7fb fa32 	bl	ba3e8 <malloc>
   bef84:	63a0      	str	r0, [r4, #56]	; 0x38
   bef86:	b928      	cbnz	r0, bef94 <rand+0x20>
   bef88:	4602      	mov	r2, r0
   bef8a:	4b12      	ldr	r3, [pc, #72]	; (befd4 <rand+0x60>)
   bef8c:	4812      	ldr	r0, [pc, #72]	; (befd8 <rand+0x64>)
   bef8e:	214e      	movs	r1, #78	; 0x4e
   bef90:	f7fb fa7a 	bl	ba488 <__assert_func>
   bef94:	4a11      	ldr	r2, [pc, #68]	; (befdc <rand+0x68>)
   bef96:	4b12      	ldr	r3, [pc, #72]	; (befe0 <rand+0x6c>)
   bef98:	e9c0 2300 	strd	r2, r3, [r0]
   bef9c:	4b11      	ldr	r3, [pc, #68]	; (befe4 <rand+0x70>)
   bef9e:	6083      	str	r3, [r0, #8]
   befa0:	230b      	movs	r3, #11
   befa2:	8183      	strh	r3, [r0, #12]
   befa4:	2201      	movs	r2, #1
   befa6:	2300      	movs	r3, #0
   befa8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   befac:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   befae:	4a0e      	ldr	r2, [pc, #56]	; (befe8 <rand+0x74>)
   befb0:	6920      	ldr	r0, [r4, #16]
   befb2:	6963      	ldr	r3, [r4, #20]
   befb4:	490d      	ldr	r1, [pc, #52]	; (befec <rand+0x78>)
   befb6:	4342      	muls	r2, r0
   befb8:	fb01 2203 	mla	r2, r1, r3, r2
   befbc:	fba0 0101 	umull	r0, r1, r0, r1
   befc0:	1c43      	adds	r3, r0, #1
   befc2:	eb42 0001 	adc.w	r0, r2, r1
   befc6:	e9c4 3004 	strd	r3, r0, [r4, #16]
   befca:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   befce:	bd10      	pop	{r4, pc}
   befd0:	2003dab0 	.word	0x2003dab0
   befd4:	000c275d 	.word	0x000c275d
   befd8:	000c2774 	.word	0x000c2774
   befdc:	abcd330e 	.word	0xabcd330e
   befe0:	e66d1234 	.word	0xe66d1234
   befe4:	0005deec 	.word	0x0005deec
   befe8:	5851f42d 	.word	0x5851f42d
   befec:	4c957f2d 	.word	0x4c957f2d

000beff0 <strcat>:
   beff0:	b510      	push	{r4, lr}
   beff2:	4602      	mov	r2, r0
   beff4:	7814      	ldrb	r4, [r2, #0]
   beff6:	4613      	mov	r3, r2
   beff8:	3201      	adds	r2, #1
   beffa:	2c00      	cmp	r4, #0
   beffc:	d1fa      	bne.n	beff4 <strcat+0x4>
   beffe:	3b01      	subs	r3, #1
   bf000:	f811 2b01 	ldrb.w	r2, [r1], #1
   bf004:	f803 2f01 	strb.w	r2, [r3, #1]!
   bf008:	2a00      	cmp	r2, #0
   bf00a:	d1f9      	bne.n	bf000 <strcat+0x10>
   bf00c:	bd10      	pop	{r4, pc}

000bf00e <strcmp>:
   bf00e:	f810 2b01 	ldrb.w	r2, [r0], #1
   bf012:	f811 3b01 	ldrb.w	r3, [r1], #1
   bf016:	2a01      	cmp	r2, #1
   bf018:	bf28      	it	cs
   bf01a:	429a      	cmpcs	r2, r3
   bf01c:	d0f7      	beq.n	bf00e <strcmp>
   bf01e:	1ad0      	subs	r0, r2, r3
   bf020:	4770      	bx	lr

000bf022 <strcpy>:
   bf022:	4603      	mov	r3, r0
   bf024:	f811 2b01 	ldrb.w	r2, [r1], #1
   bf028:	f803 2b01 	strb.w	r2, [r3], #1
   bf02c:	2a00      	cmp	r2, #0
   bf02e:	d1f9      	bne.n	bf024 <strcpy+0x2>
   bf030:	4770      	bx	lr
	...

000bf034 <strdup>:
   bf034:	4b02      	ldr	r3, [pc, #8]	; (bf040 <strdup+0xc>)
   bf036:	4601      	mov	r1, r0
   bf038:	6818      	ldr	r0, [r3, #0]
   bf03a:	f000 b803 	b.w	bf044 <_strdup_r>
   bf03e:	bf00      	nop
   bf040:	2003dab0 	.word	0x2003dab0

000bf044 <_strdup_r>:
   bf044:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bf046:	4604      	mov	r4, r0
   bf048:	4608      	mov	r0, r1
   bf04a:	460d      	mov	r5, r1
   bf04c:	f000 f80f 	bl	bf06e <strlen>
   bf050:	1c42      	adds	r2, r0, #1
   bf052:	4611      	mov	r1, r2
   bf054:	4620      	mov	r0, r4
   bf056:	9201      	str	r2, [sp, #4]
   bf058:	f7fb fa06 	bl	ba468 <_malloc_r>
   bf05c:	4604      	mov	r4, r0
   bf05e:	b118      	cbz	r0, bf068 <_strdup_r+0x24>
   bf060:	9a01      	ldr	r2, [sp, #4]
   bf062:	4629      	mov	r1, r5
   bf064:	f7ff ff27 	bl	beeb6 <memcpy>
   bf068:	4620      	mov	r0, r4
   bf06a:	b003      	add	sp, #12
   bf06c:	bd30      	pop	{r4, r5, pc}

000bf06e <strlen>:
   bf06e:	4603      	mov	r3, r0
   bf070:	f813 2b01 	ldrb.w	r2, [r3], #1
   bf074:	2a00      	cmp	r2, #0
   bf076:	d1fb      	bne.n	bf070 <strlen+0x2>
   bf078:	1a18      	subs	r0, r3, r0
   bf07a:	3801      	subs	r0, #1
   bf07c:	4770      	bx	lr

000bf07e <strncmp>:
   bf07e:	b510      	push	{r4, lr}
   bf080:	b17a      	cbz	r2, bf0a2 <strncmp+0x24>
   bf082:	4603      	mov	r3, r0
   bf084:	3901      	subs	r1, #1
   bf086:	1884      	adds	r4, r0, r2
   bf088:	f813 0b01 	ldrb.w	r0, [r3], #1
   bf08c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bf090:	4290      	cmp	r0, r2
   bf092:	d101      	bne.n	bf098 <strncmp+0x1a>
   bf094:	42a3      	cmp	r3, r4
   bf096:	d101      	bne.n	bf09c <strncmp+0x1e>
   bf098:	1a80      	subs	r0, r0, r2
   bf09a:	bd10      	pop	{r4, pc}
   bf09c:	2800      	cmp	r0, #0
   bf09e:	d1f3      	bne.n	bf088 <strncmp+0xa>
   bf0a0:	e7fa      	b.n	bf098 <strncmp+0x1a>
   bf0a2:	4610      	mov	r0, r2
   bf0a4:	e7f9      	b.n	bf09a <strncmp+0x1c>

000bf0a6 <strncpy>:
   bf0a6:	b510      	push	{r4, lr}
   bf0a8:	3901      	subs	r1, #1
   bf0aa:	4603      	mov	r3, r0
   bf0ac:	b132      	cbz	r2, bf0bc <strncpy+0x16>
   bf0ae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bf0b2:	f803 4b01 	strb.w	r4, [r3], #1
   bf0b6:	3a01      	subs	r2, #1
   bf0b8:	2c00      	cmp	r4, #0
   bf0ba:	d1f7      	bne.n	bf0ac <strncpy+0x6>
   bf0bc:	441a      	add	r2, r3
   bf0be:	2100      	movs	r1, #0
   bf0c0:	4293      	cmp	r3, r2
   bf0c2:	d100      	bne.n	bf0c6 <strncpy+0x20>
   bf0c4:	bd10      	pop	{r4, pc}
   bf0c6:	f803 1b01 	strb.w	r1, [r3], #1
   bf0ca:	e7f9      	b.n	bf0c0 <strncpy+0x1a>

000bf0cc <strnlen>:
   bf0cc:	b510      	push	{r4, lr}
   bf0ce:	4602      	mov	r2, r0
   bf0d0:	4401      	add	r1, r0
   bf0d2:	428a      	cmp	r2, r1
   bf0d4:	4613      	mov	r3, r2
   bf0d6:	d003      	beq.n	bf0e0 <strnlen+0x14>
   bf0d8:	781c      	ldrb	r4, [r3, #0]
   bf0da:	3201      	adds	r2, #1
   bf0dc:	2c00      	cmp	r4, #0
   bf0de:	d1f8      	bne.n	bf0d2 <strnlen+0x6>
   bf0e0:	1a18      	subs	r0, r3, r0
   bf0e2:	bd10      	pop	{r4, pc}

000bf0e4 <sulp>:
   bf0e4:	b570      	push	{r4, r5, r6, lr}
   bf0e6:	4604      	mov	r4, r0
   bf0e8:	460d      	mov	r5, r1
   bf0ea:	ec45 4b10 	vmov	d0, r4, r5
   bf0ee:	4616      	mov	r6, r2
   bf0f0:	f001 fe0e 	bl	c0d10 <__ulp>
   bf0f4:	ec51 0b10 	vmov	r0, r1, d0
   bf0f8:	b17e      	cbz	r6, bf11a <sulp+0x36>
   bf0fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bf0fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bf102:	2b00      	cmp	r3, #0
   bf104:	dd09      	ble.n	bf11a <sulp+0x36>
   bf106:	051b      	lsls	r3, r3, #20
   bf108:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bf10c:	2400      	movs	r4, #0
   bf10e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bf112:	4622      	mov	r2, r4
   bf114:	462b      	mov	r3, r5
   bf116:	f7ff fb89 	bl	be82c <__aeabi_dmul>
   bf11a:	bd70      	pop	{r4, r5, r6, pc}
   bf11c:	0000      	movs	r0, r0
	...

000bf120 <_strtod_l>:
   bf120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf124:	ed2d 8b02 	vpush	{d8}
   bf128:	b09d      	sub	sp, #116	; 0x74
   bf12a:	461f      	mov	r7, r3
   bf12c:	2300      	movs	r3, #0
   bf12e:	9318      	str	r3, [sp, #96]	; 0x60
   bf130:	4ba2      	ldr	r3, [pc, #648]	; (bf3bc <_strtod_l+0x29c>)
   bf132:	9213      	str	r2, [sp, #76]	; 0x4c
   bf134:	681b      	ldr	r3, [r3, #0]
   bf136:	9305      	str	r3, [sp, #20]
   bf138:	4604      	mov	r4, r0
   bf13a:	4618      	mov	r0, r3
   bf13c:	4688      	mov	r8, r1
   bf13e:	f7ff ff96 	bl	bf06e <strlen>
   bf142:	f04f 0a00 	mov.w	sl, #0
   bf146:	4605      	mov	r5, r0
   bf148:	f04f 0b00 	mov.w	fp, #0
   bf14c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bf150:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bf152:	781a      	ldrb	r2, [r3, #0]
   bf154:	2a2b      	cmp	r2, #43	; 0x2b
   bf156:	d04e      	beq.n	bf1f6 <_strtod_l+0xd6>
   bf158:	d83b      	bhi.n	bf1d2 <_strtod_l+0xb2>
   bf15a:	2a0d      	cmp	r2, #13
   bf15c:	d834      	bhi.n	bf1c8 <_strtod_l+0xa8>
   bf15e:	2a08      	cmp	r2, #8
   bf160:	d834      	bhi.n	bf1cc <_strtod_l+0xac>
   bf162:	2a00      	cmp	r2, #0
   bf164:	d03e      	beq.n	bf1e4 <_strtod_l+0xc4>
   bf166:	2300      	movs	r3, #0
   bf168:	930a      	str	r3, [sp, #40]	; 0x28
   bf16a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bf16c:	7833      	ldrb	r3, [r6, #0]
   bf16e:	2b30      	cmp	r3, #48	; 0x30
   bf170:	f040 80b0 	bne.w	bf2d4 <_strtod_l+0x1b4>
   bf174:	7873      	ldrb	r3, [r6, #1]
   bf176:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bf17a:	2b58      	cmp	r3, #88	; 0x58
   bf17c:	d168      	bne.n	bf250 <_strtod_l+0x130>
   bf17e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bf180:	9301      	str	r3, [sp, #4]
   bf182:	ab18      	add	r3, sp, #96	; 0x60
   bf184:	9702      	str	r7, [sp, #8]
   bf186:	9300      	str	r3, [sp, #0]
   bf188:	4a8d      	ldr	r2, [pc, #564]	; (bf3c0 <_strtod_l+0x2a0>)
   bf18a:	ab19      	add	r3, sp, #100	; 0x64
   bf18c:	a917      	add	r1, sp, #92	; 0x5c
   bf18e:	4620      	mov	r0, r4
   bf190:	f000 ff2e 	bl	bfff0 <__gethex>
   bf194:	f010 0707 	ands.w	r7, r0, #7
   bf198:	4605      	mov	r5, r0
   bf19a:	d005      	beq.n	bf1a8 <_strtod_l+0x88>
   bf19c:	2f06      	cmp	r7, #6
   bf19e:	d12c      	bne.n	bf1fa <_strtod_l+0xda>
   bf1a0:	3601      	adds	r6, #1
   bf1a2:	2300      	movs	r3, #0
   bf1a4:	9617      	str	r6, [sp, #92]	; 0x5c
   bf1a6:	930a      	str	r3, [sp, #40]	; 0x28
   bf1a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bf1aa:	2b00      	cmp	r3, #0
   bf1ac:	f040 8590 	bne.w	bfcd0 <_strtod_l+0xbb0>
   bf1b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bf1b2:	b1eb      	cbz	r3, bf1f0 <_strtod_l+0xd0>
   bf1b4:	4652      	mov	r2, sl
   bf1b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bf1ba:	ec43 2b10 	vmov	d0, r2, r3
   bf1be:	b01d      	add	sp, #116	; 0x74
   bf1c0:	ecbd 8b02 	vpop	{d8}
   bf1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bf1c8:	2a20      	cmp	r2, #32
   bf1ca:	d1cc      	bne.n	bf166 <_strtod_l+0x46>
   bf1cc:	3301      	adds	r3, #1
   bf1ce:	9317      	str	r3, [sp, #92]	; 0x5c
   bf1d0:	e7be      	b.n	bf150 <_strtod_l+0x30>
   bf1d2:	2a2d      	cmp	r2, #45	; 0x2d
   bf1d4:	d1c7      	bne.n	bf166 <_strtod_l+0x46>
   bf1d6:	2201      	movs	r2, #1
   bf1d8:	920a      	str	r2, [sp, #40]	; 0x28
   bf1da:	1c5a      	adds	r2, r3, #1
   bf1dc:	9217      	str	r2, [sp, #92]	; 0x5c
   bf1de:	785b      	ldrb	r3, [r3, #1]
   bf1e0:	2b00      	cmp	r3, #0
   bf1e2:	d1c2      	bne.n	bf16a <_strtod_l+0x4a>
   bf1e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bf1e6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bf1ea:	2b00      	cmp	r3, #0
   bf1ec:	f040 856e 	bne.w	bfccc <_strtod_l+0xbac>
   bf1f0:	4652      	mov	r2, sl
   bf1f2:	465b      	mov	r3, fp
   bf1f4:	e7e1      	b.n	bf1ba <_strtod_l+0x9a>
   bf1f6:	2200      	movs	r2, #0
   bf1f8:	e7ee      	b.n	bf1d8 <_strtod_l+0xb8>
   bf1fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bf1fc:	b13a      	cbz	r2, bf20e <_strtod_l+0xee>
   bf1fe:	2135      	movs	r1, #53	; 0x35
   bf200:	a81a      	add	r0, sp, #104	; 0x68
   bf202:	f001 fe90 	bl	c0f26 <__copybits>
   bf206:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf208:	4620      	mov	r0, r4
   bf20a:	f001 fa4f 	bl	c06ac <_Bfree>
   bf20e:	3f01      	subs	r7, #1
   bf210:	2f04      	cmp	r7, #4
   bf212:	d806      	bhi.n	bf222 <_strtod_l+0x102>
   bf214:	e8df f007 	tbb	[pc, r7]
   bf218:	1714030a 	.word	0x1714030a
   bf21c:	0a          	.byte	0x0a
   bf21d:	00          	.byte	0x00
   bf21e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bf222:	0728      	lsls	r0, r5, #28
   bf224:	d5c0      	bpl.n	bf1a8 <_strtod_l+0x88>
   bf226:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bf22a:	e7bd      	b.n	bf1a8 <_strtod_l+0x88>
   bf22c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bf230:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bf232:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bf236:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bf23a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bf23e:	e7f0      	b.n	bf222 <_strtod_l+0x102>
   bf240:	f8df b180 	ldr.w	fp, [pc, #384]	; bf3c4 <_strtod_l+0x2a4>
   bf244:	e7ed      	b.n	bf222 <_strtod_l+0x102>
   bf246:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bf24a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bf24e:	e7e8      	b.n	bf222 <_strtod_l+0x102>
   bf250:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bf252:	1c5a      	adds	r2, r3, #1
   bf254:	9217      	str	r2, [sp, #92]	; 0x5c
   bf256:	785b      	ldrb	r3, [r3, #1]
   bf258:	2b30      	cmp	r3, #48	; 0x30
   bf25a:	d0f9      	beq.n	bf250 <_strtod_l+0x130>
   bf25c:	2b00      	cmp	r3, #0
   bf25e:	d0a3      	beq.n	bf1a8 <_strtod_l+0x88>
   bf260:	2301      	movs	r3, #1
   bf262:	f04f 0900 	mov.w	r9, #0
   bf266:	9304      	str	r3, [sp, #16]
   bf268:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bf26a:	9308      	str	r3, [sp, #32]
   bf26c:	f8cd 901c 	str.w	r9, [sp, #28]
   bf270:	464f      	mov	r7, r9
   bf272:	220a      	movs	r2, #10
   bf274:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bf276:	7806      	ldrb	r6, [r0, #0]
   bf278:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bf27c:	b2d9      	uxtb	r1, r3
   bf27e:	2909      	cmp	r1, #9
   bf280:	d92a      	bls.n	bf2d8 <_strtod_l+0x1b8>
   bf282:	9905      	ldr	r1, [sp, #20]
   bf284:	462a      	mov	r2, r5
   bf286:	f7ff fefa 	bl	bf07e <strncmp>
   bf28a:	b398      	cbz	r0, bf2f4 <_strtod_l+0x1d4>
   bf28c:	2000      	movs	r0, #0
   bf28e:	4632      	mov	r2, r6
   bf290:	463d      	mov	r5, r7
   bf292:	9005      	str	r0, [sp, #20]
   bf294:	4603      	mov	r3, r0
   bf296:	2a65      	cmp	r2, #101	; 0x65
   bf298:	d001      	beq.n	bf29e <_strtod_l+0x17e>
   bf29a:	2a45      	cmp	r2, #69	; 0x45
   bf29c:	d118      	bne.n	bf2d0 <_strtod_l+0x1b0>
   bf29e:	b91d      	cbnz	r5, bf2a8 <_strtod_l+0x188>
   bf2a0:	9a04      	ldr	r2, [sp, #16]
   bf2a2:	4302      	orrs	r2, r0
   bf2a4:	d09e      	beq.n	bf1e4 <_strtod_l+0xc4>
   bf2a6:	2500      	movs	r5, #0
   bf2a8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bf2ac:	f108 0201 	add.w	r2, r8, #1
   bf2b0:	9217      	str	r2, [sp, #92]	; 0x5c
   bf2b2:	f898 2001 	ldrb.w	r2, [r8, #1]
   bf2b6:	2a2b      	cmp	r2, #43	; 0x2b
   bf2b8:	d075      	beq.n	bf3a6 <_strtod_l+0x286>
   bf2ba:	2a2d      	cmp	r2, #45	; 0x2d
   bf2bc:	d07b      	beq.n	bf3b6 <_strtod_l+0x296>
   bf2be:	f04f 0c00 	mov.w	ip, #0
   bf2c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bf2c6:	2909      	cmp	r1, #9
   bf2c8:	f240 8082 	bls.w	bf3d0 <_strtod_l+0x2b0>
   bf2cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bf2d0:	2600      	movs	r6, #0
   bf2d2:	e09d      	b.n	bf410 <_strtod_l+0x2f0>
   bf2d4:	2300      	movs	r3, #0
   bf2d6:	e7c4      	b.n	bf262 <_strtod_l+0x142>
   bf2d8:	2f08      	cmp	r7, #8
   bf2da:	bfd8      	it	le
   bf2dc:	9907      	ldrle	r1, [sp, #28]
   bf2de:	f100 0001 	add.w	r0, r0, #1
   bf2e2:	bfda      	itte	le
   bf2e4:	fb02 3301 	mlale	r3, r2, r1, r3
   bf2e8:	9307      	strle	r3, [sp, #28]
   bf2ea:	fb02 3909 	mlagt	r9, r2, r9, r3
   bf2ee:	3701      	adds	r7, #1
   bf2f0:	9017      	str	r0, [sp, #92]	; 0x5c
   bf2f2:	e7bf      	b.n	bf274 <_strtod_l+0x154>
   bf2f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bf2f6:	195a      	adds	r2, r3, r5
   bf2f8:	9217      	str	r2, [sp, #92]	; 0x5c
   bf2fa:	5d5a      	ldrb	r2, [r3, r5]
   bf2fc:	2f00      	cmp	r7, #0
   bf2fe:	d037      	beq.n	bf370 <_strtod_l+0x250>
   bf300:	9005      	str	r0, [sp, #20]
   bf302:	463d      	mov	r5, r7
   bf304:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bf308:	2b09      	cmp	r3, #9
   bf30a:	d912      	bls.n	bf332 <_strtod_l+0x212>
   bf30c:	2301      	movs	r3, #1
   bf30e:	e7c2      	b.n	bf296 <_strtod_l+0x176>
   bf310:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bf312:	1c5a      	adds	r2, r3, #1
   bf314:	9217      	str	r2, [sp, #92]	; 0x5c
   bf316:	785a      	ldrb	r2, [r3, #1]
   bf318:	3001      	adds	r0, #1
   bf31a:	2a30      	cmp	r2, #48	; 0x30
   bf31c:	d0f8      	beq.n	bf310 <_strtod_l+0x1f0>
   bf31e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bf322:	2b08      	cmp	r3, #8
   bf324:	f200 84d9 	bhi.w	bfcda <_strtod_l+0xbba>
   bf328:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bf32a:	9005      	str	r0, [sp, #20]
   bf32c:	2000      	movs	r0, #0
   bf32e:	9308      	str	r3, [sp, #32]
   bf330:	4605      	mov	r5, r0
   bf332:	3a30      	subs	r2, #48	; 0x30
   bf334:	f100 0301 	add.w	r3, r0, #1
   bf338:	d014      	beq.n	bf364 <_strtod_l+0x244>
   bf33a:	9905      	ldr	r1, [sp, #20]
   bf33c:	4419      	add	r1, r3
   bf33e:	9105      	str	r1, [sp, #20]
   bf340:	462b      	mov	r3, r5
   bf342:	eb00 0e05 	add.w	lr, r0, r5
   bf346:	210a      	movs	r1, #10
   bf348:	4573      	cmp	r3, lr
   bf34a:	d113      	bne.n	bf374 <_strtod_l+0x254>
   bf34c:	182b      	adds	r3, r5, r0
   bf34e:	2b08      	cmp	r3, #8
   bf350:	f105 0501 	add.w	r5, r5, #1
   bf354:	4405      	add	r5, r0
   bf356:	dc1c      	bgt.n	bf392 <_strtod_l+0x272>
   bf358:	9907      	ldr	r1, [sp, #28]
   bf35a:	230a      	movs	r3, #10
   bf35c:	fb03 2301 	mla	r3, r3, r1, r2
   bf360:	9307      	str	r3, [sp, #28]
   bf362:	2300      	movs	r3, #0
   bf364:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bf366:	1c51      	adds	r1, r2, #1
   bf368:	9117      	str	r1, [sp, #92]	; 0x5c
   bf36a:	7852      	ldrb	r2, [r2, #1]
   bf36c:	4618      	mov	r0, r3
   bf36e:	e7c9      	b.n	bf304 <_strtod_l+0x1e4>
   bf370:	4638      	mov	r0, r7
   bf372:	e7d2      	b.n	bf31a <_strtod_l+0x1fa>
   bf374:	2b08      	cmp	r3, #8
   bf376:	dc04      	bgt.n	bf382 <_strtod_l+0x262>
   bf378:	9e07      	ldr	r6, [sp, #28]
   bf37a:	434e      	muls	r6, r1
   bf37c:	9607      	str	r6, [sp, #28]
   bf37e:	3301      	adds	r3, #1
   bf380:	e7e2      	b.n	bf348 <_strtod_l+0x228>
   bf382:	f103 0c01 	add.w	ip, r3, #1
   bf386:	f1bc 0f10 	cmp.w	ip, #16
   bf38a:	bfd8      	it	le
   bf38c:	fb01 f909 	mulle.w	r9, r1, r9
   bf390:	e7f5      	b.n	bf37e <_strtod_l+0x25e>
   bf392:	2d10      	cmp	r5, #16
   bf394:	bfdc      	itt	le
   bf396:	230a      	movle	r3, #10
   bf398:	fb03 2909 	mlale	r9, r3, r9, r2
   bf39c:	e7e1      	b.n	bf362 <_strtod_l+0x242>
   bf39e:	2300      	movs	r3, #0
   bf3a0:	9305      	str	r3, [sp, #20]
   bf3a2:	2301      	movs	r3, #1
   bf3a4:	e77c      	b.n	bf2a0 <_strtod_l+0x180>
   bf3a6:	f04f 0c00 	mov.w	ip, #0
   bf3aa:	f108 0202 	add.w	r2, r8, #2
   bf3ae:	9217      	str	r2, [sp, #92]	; 0x5c
   bf3b0:	f898 2002 	ldrb.w	r2, [r8, #2]
   bf3b4:	e785      	b.n	bf2c2 <_strtod_l+0x1a2>
   bf3b6:	f04f 0c01 	mov.w	ip, #1
   bf3ba:	e7f6      	b.n	bf3aa <_strtod_l+0x28a>
   bf3bc:	000c29a4 	.word	0x000c29a4
   bf3c0:	000c27dc 	.word	0x000c27dc
   bf3c4:	7ff00000 	.word	0x7ff00000
   bf3c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bf3ca:	1c51      	adds	r1, r2, #1
   bf3cc:	9117      	str	r1, [sp, #92]	; 0x5c
   bf3ce:	7852      	ldrb	r2, [r2, #1]
   bf3d0:	2a30      	cmp	r2, #48	; 0x30
   bf3d2:	d0f9      	beq.n	bf3c8 <_strtod_l+0x2a8>
   bf3d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bf3d8:	2908      	cmp	r1, #8
   bf3da:	f63f af79 	bhi.w	bf2d0 <_strtod_l+0x1b0>
   bf3de:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bf3e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bf3e4:	9206      	str	r2, [sp, #24]
   bf3e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bf3e8:	1c51      	adds	r1, r2, #1
   bf3ea:	9117      	str	r1, [sp, #92]	; 0x5c
   bf3ec:	7852      	ldrb	r2, [r2, #1]
   bf3ee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bf3f2:	2e09      	cmp	r6, #9
   bf3f4:	d937      	bls.n	bf466 <_strtod_l+0x346>
   bf3f6:	9e06      	ldr	r6, [sp, #24]
   bf3f8:	1b89      	subs	r1, r1, r6
   bf3fa:	2908      	cmp	r1, #8
   bf3fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bf400:	dc02      	bgt.n	bf408 <_strtod_l+0x2e8>
   bf402:	4576      	cmp	r6, lr
   bf404:	bfa8      	it	ge
   bf406:	4676      	movge	r6, lr
   bf408:	f1bc 0f00 	cmp.w	ip, #0
   bf40c:	d000      	beq.n	bf410 <_strtod_l+0x2f0>
   bf40e:	4276      	negs	r6, r6
   bf410:	2d00      	cmp	r5, #0
   bf412:	d14d      	bne.n	bf4b0 <_strtod_l+0x390>
   bf414:	9904      	ldr	r1, [sp, #16]
   bf416:	4301      	orrs	r1, r0
   bf418:	f47f aec6 	bne.w	bf1a8 <_strtod_l+0x88>
   bf41c:	2b00      	cmp	r3, #0
   bf41e:	f47f aee1 	bne.w	bf1e4 <_strtod_l+0xc4>
   bf422:	2a69      	cmp	r2, #105	; 0x69
   bf424:	d027      	beq.n	bf476 <_strtod_l+0x356>
   bf426:	dc24      	bgt.n	bf472 <_strtod_l+0x352>
   bf428:	2a49      	cmp	r2, #73	; 0x49
   bf42a:	d024      	beq.n	bf476 <_strtod_l+0x356>
   bf42c:	2a4e      	cmp	r2, #78	; 0x4e
   bf42e:	f47f aed9 	bne.w	bf1e4 <_strtod_l+0xc4>
   bf432:	499f      	ldr	r1, [pc, #636]	; (bf6b0 <_strtod_l+0x590>)
   bf434:	a817      	add	r0, sp, #92	; 0x5c
   bf436:	f001 f833 	bl	c04a0 <__match>
   bf43a:	2800      	cmp	r0, #0
   bf43c:	f43f aed2 	beq.w	bf1e4 <_strtod_l+0xc4>
   bf440:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bf442:	781b      	ldrb	r3, [r3, #0]
   bf444:	2b28      	cmp	r3, #40	; 0x28
   bf446:	d12d      	bne.n	bf4a4 <_strtod_l+0x384>
   bf448:	499a      	ldr	r1, [pc, #616]	; (bf6b4 <_strtod_l+0x594>)
   bf44a:	aa1a      	add	r2, sp, #104	; 0x68
   bf44c:	a817      	add	r0, sp, #92	; 0x5c
   bf44e:	f001 f83b 	bl	c04c8 <__hexnan>
   bf452:	2805      	cmp	r0, #5
   bf454:	d126      	bne.n	bf4a4 <_strtod_l+0x384>
   bf456:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bf458:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bf45c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bf460:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bf464:	e6a0      	b.n	bf1a8 <_strtod_l+0x88>
   bf466:	210a      	movs	r1, #10
   bf468:	fb01 2e0e 	mla	lr, r1, lr, r2
   bf46c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bf470:	e7b9      	b.n	bf3e6 <_strtod_l+0x2c6>
   bf472:	2a6e      	cmp	r2, #110	; 0x6e
   bf474:	e7db      	b.n	bf42e <_strtod_l+0x30e>
   bf476:	4990      	ldr	r1, [pc, #576]	; (bf6b8 <_strtod_l+0x598>)
   bf478:	a817      	add	r0, sp, #92	; 0x5c
   bf47a:	f001 f811 	bl	c04a0 <__match>
   bf47e:	2800      	cmp	r0, #0
   bf480:	f43f aeb0 	beq.w	bf1e4 <_strtod_l+0xc4>
   bf484:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bf486:	498d      	ldr	r1, [pc, #564]	; (bf6bc <_strtod_l+0x59c>)
   bf488:	3b01      	subs	r3, #1
   bf48a:	a817      	add	r0, sp, #92	; 0x5c
   bf48c:	9317      	str	r3, [sp, #92]	; 0x5c
   bf48e:	f001 f807 	bl	c04a0 <__match>
   bf492:	b910      	cbnz	r0, bf49a <_strtod_l+0x37a>
   bf494:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bf496:	3301      	adds	r3, #1
   bf498:	9317      	str	r3, [sp, #92]	; 0x5c
   bf49a:	f8df b230 	ldr.w	fp, [pc, #560]	; bf6cc <_strtod_l+0x5ac>
   bf49e:	f04f 0a00 	mov.w	sl, #0
   bf4a2:	e681      	b.n	bf1a8 <_strtod_l+0x88>
   bf4a4:	4886      	ldr	r0, [pc, #536]	; (bf6c0 <_strtod_l+0x5a0>)
   bf4a6:	f001 fd93 	bl	c0fd0 <nan>
   bf4aa:	ec5b ab10 	vmov	sl, fp, d0
   bf4ae:	e67b      	b.n	bf1a8 <_strtod_l+0x88>
   bf4b0:	9b05      	ldr	r3, [sp, #20]
   bf4b2:	9807      	ldr	r0, [sp, #28]
   bf4b4:	1af3      	subs	r3, r6, r3
   bf4b6:	2f00      	cmp	r7, #0
   bf4b8:	bf08      	it	eq
   bf4ba:	462f      	moveq	r7, r5
   bf4bc:	2d10      	cmp	r5, #16
   bf4be:	9306      	str	r3, [sp, #24]
   bf4c0:	46a8      	mov	r8, r5
   bf4c2:	bfa8      	it	ge
   bf4c4:	f04f 0810 	movge.w	r8, #16
   bf4c8:	f7ff f936 	bl	be738 <__aeabi_ui2d>
   bf4cc:	2d09      	cmp	r5, #9
   bf4ce:	4682      	mov	sl, r0
   bf4d0:	468b      	mov	fp, r1
   bf4d2:	dd13      	ble.n	bf4fc <_strtod_l+0x3dc>
   bf4d4:	4b7b      	ldr	r3, [pc, #492]	; (bf6c4 <_strtod_l+0x5a4>)
   bf4d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bf4da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bf4de:	f7ff f9a5 	bl	be82c <__aeabi_dmul>
   bf4e2:	4682      	mov	sl, r0
   bf4e4:	4648      	mov	r0, r9
   bf4e6:	468b      	mov	fp, r1
   bf4e8:	f7ff f926 	bl	be738 <__aeabi_ui2d>
   bf4ec:	4602      	mov	r2, r0
   bf4ee:	460b      	mov	r3, r1
   bf4f0:	4650      	mov	r0, sl
   bf4f2:	4659      	mov	r1, fp
   bf4f4:	f7fe ffe4 	bl	be4c0 <__adddf3>
   bf4f8:	4682      	mov	sl, r0
   bf4fa:	468b      	mov	fp, r1
   bf4fc:	2d0f      	cmp	r5, #15
   bf4fe:	dc38      	bgt.n	bf572 <_strtod_l+0x452>
   bf500:	9b06      	ldr	r3, [sp, #24]
   bf502:	2b00      	cmp	r3, #0
   bf504:	f43f ae50 	beq.w	bf1a8 <_strtod_l+0x88>
   bf508:	dd24      	ble.n	bf554 <_strtod_l+0x434>
   bf50a:	2b16      	cmp	r3, #22
   bf50c:	dc0b      	bgt.n	bf526 <_strtod_l+0x406>
   bf50e:	496d      	ldr	r1, [pc, #436]	; (bf6c4 <_strtod_l+0x5a4>)
   bf510:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bf514:	e9d1 0100 	ldrd	r0, r1, [r1]
   bf518:	4652      	mov	r2, sl
   bf51a:	465b      	mov	r3, fp
   bf51c:	f7ff f986 	bl	be82c <__aeabi_dmul>
   bf520:	4682      	mov	sl, r0
   bf522:	468b      	mov	fp, r1
   bf524:	e640      	b.n	bf1a8 <_strtod_l+0x88>
   bf526:	9a06      	ldr	r2, [sp, #24]
   bf528:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bf52c:	4293      	cmp	r3, r2
   bf52e:	db20      	blt.n	bf572 <_strtod_l+0x452>
   bf530:	4c64      	ldr	r4, [pc, #400]	; (bf6c4 <_strtod_l+0x5a4>)
   bf532:	f1c5 050f 	rsb	r5, r5, #15
   bf536:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bf53a:	4652      	mov	r2, sl
   bf53c:	465b      	mov	r3, fp
   bf53e:	e9d1 0100 	ldrd	r0, r1, [r1]
   bf542:	f7ff f973 	bl	be82c <__aeabi_dmul>
   bf546:	9b06      	ldr	r3, [sp, #24]
   bf548:	1b5d      	subs	r5, r3, r5
   bf54a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bf54e:	e9d4 2300 	ldrd	r2, r3, [r4]
   bf552:	e7e3      	b.n	bf51c <_strtod_l+0x3fc>
   bf554:	9b06      	ldr	r3, [sp, #24]
   bf556:	3316      	adds	r3, #22
   bf558:	db0b      	blt.n	bf572 <_strtod_l+0x452>
   bf55a:	9b05      	ldr	r3, [sp, #20]
   bf55c:	1b9e      	subs	r6, r3, r6
   bf55e:	4b59      	ldr	r3, [pc, #356]	; (bf6c4 <_strtod_l+0x5a4>)
   bf560:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bf564:	e9d6 2300 	ldrd	r2, r3, [r6]
   bf568:	4650      	mov	r0, sl
   bf56a:	4659      	mov	r1, fp
   bf56c:	f7ff fa88 	bl	bea80 <__aeabi_ddiv>
   bf570:	e7d6      	b.n	bf520 <_strtod_l+0x400>
   bf572:	9b06      	ldr	r3, [sp, #24]
   bf574:	eba5 0808 	sub.w	r8, r5, r8
   bf578:	4498      	add	r8, r3
   bf57a:	f1b8 0f00 	cmp.w	r8, #0
   bf57e:	dd74      	ble.n	bf66a <_strtod_l+0x54a>
   bf580:	f018 030f 	ands.w	r3, r8, #15
   bf584:	d00a      	beq.n	bf59c <_strtod_l+0x47c>
   bf586:	494f      	ldr	r1, [pc, #316]	; (bf6c4 <_strtod_l+0x5a4>)
   bf588:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bf58c:	4652      	mov	r2, sl
   bf58e:	465b      	mov	r3, fp
   bf590:	e9d1 0100 	ldrd	r0, r1, [r1]
   bf594:	f7ff f94a 	bl	be82c <__aeabi_dmul>
   bf598:	4682      	mov	sl, r0
   bf59a:	468b      	mov	fp, r1
   bf59c:	f038 080f 	bics.w	r8, r8, #15
   bf5a0:	d04f      	beq.n	bf642 <_strtod_l+0x522>
   bf5a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bf5a6:	dd22      	ble.n	bf5ee <_strtod_l+0x4ce>
   bf5a8:	2500      	movs	r5, #0
   bf5aa:	462e      	mov	r6, r5
   bf5ac:	9507      	str	r5, [sp, #28]
   bf5ae:	9505      	str	r5, [sp, #20]
   bf5b0:	2322      	movs	r3, #34	; 0x22
   bf5b2:	f8df b118 	ldr.w	fp, [pc, #280]	; bf6cc <_strtod_l+0x5ac>
   bf5b6:	6023      	str	r3, [r4, #0]
   bf5b8:	f04f 0a00 	mov.w	sl, #0
   bf5bc:	9b07      	ldr	r3, [sp, #28]
   bf5be:	2b00      	cmp	r3, #0
   bf5c0:	f43f adf2 	beq.w	bf1a8 <_strtod_l+0x88>
   bf5c4:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf5c6:	4620      	mov	r0, r4
   bf5c8:	f001 f870 	bl	c06ac <_Bfree>
   bf5cc:	9905      	ldr	r1, [sp, #20]
   bf5ce:	4620      	mov	r0, r4
   bf5d0:	f001 f86c 	bl	c06ac <_Bfree>
   bf5d4:	4631      	mov	r1, r6
   bf5d6:	4620      	mov	r0, r4
   bf5d8:	f001 f868 	bl	c06ac <_Bfree>
   bf5dc:	9907      	ldr	r1, [sp, #28]
   bf5de:	4620      	mov	r0, r4
   bf5e0:	f001 f864 	bl	c06ac <_Bfree>
   bf5e4:	4629      	mov	r1, r5
   bf5e6:	4620      	mov	r0, r4
   bf5e8:	f001 f860 	bl	c06ac <_Bfree>
   bf5ec:	e5dc      	b.n	bf1a8 <_strtod_l+0x88>
   bf5ee:	4b36      	ldr	r3, [pc, #216]	; (bf6c8 <_strtod_l+0x5a8>)
   bf5f0:	9304      	str	r3, [sp, #16]
   bf5f2:	2300      	movs	r3, #0
   bf5f4:	ea4f 1828 	mov.w	r8, r8, asr #4
   bf5f8:	4650      	mov	r0, sl
   bf5fa:	4659      	mov	r1, fp
   bf5fc:	4699      	mov	r9, r3
   bf5fe:	f1b8 0f01 	cmp.w	r8, #1
   bf602:	dc21      	bgt.n	bf648 <_strtod_l+0x528>
   bf604:	b10b      	cbz	r3, bf60a <_strtod_l+0x4ea>
   bf606:	4682      	mov	sl, r0
   bf608:	468b      	mov	fp, r1
   bf60a:	4b2f      	ldr	r3, [pc, #188]	; (bf6c8 <_strtod_l+0x5a8>)
   bf60c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bf610:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bf614:	4652      	mov	r2, sl
   bf616:	465b      	mov	r3, fp
   bf618:	e9d9 0100 	ldrd	r0, r1, [r9]
   bf61c:	f7ff f906 	bl	be82c <__aeabi_dmul>
   bf620:	4b2a      	ldr	r3, [pc, #168]	; (bf6cc <_strtod_l+0x5ac>)
   bf622:	460a      	mov	r2, r1
   bf624:	400b      	ands	r3, r1
   bf626:	492a      	ldr	r1, [pc, #168]	; (bf6d0 <_strtod_l+0x5b0>)
   bf628:	428b      	cmp	r3, r1
   bf62a:	4682      	mov	sl, r0
   bf62c:	d8bc      	bhi.n	bf5a8 <_strtod_l+0x488>
   bf62e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bf632:	428b      	cmp	r3, r1
   bf634:	bf86      	itte	hi
   bf636:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bf6d4 <_strtod_l+0x5b4>
   bf63a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bf63e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bf642:	2300      	movs	r3, #0
   bf644:	9304      	str	r3, [sp, #16]
   bf646:	e084      	b.n	bf752 <_strtod_l+0x632>
   bf648:	f018 0f01 	tst.w	r8, #1
   bf64c:	d005      	beq.n	bf65a <_strtod_l+0x53a>
   bf64e:	9b04      	ldr	r3, [sp, #16]
   bf650:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf654:	f7ff f8ea 	bl	be82c <__aeabi_dmul>
   bf658:	2301      	movs	r3, #1
   bf65a:	9a04      	ldr	r2, [sp, #16]
   bf65c:	3208      	adds	r2, #8
   bf65e:	f109 0901 	add.w	r9, r9, #1
   bf662:	ea4f 0868 	mov.w	r8, r8, asr #1
   bf666:	9204      	str	r2, [sp, #16]
   bf668:	e7c9      	b.n	bf5fe <_strtod_l+0x4de>
   bf66a:	d0ea      	beq.n	bf642 <_strtod_l+0x522>
   bf66c:	f1c8 0800 	rsb	r8, r8, #0
   bf670:	f018 020f 	ands.w	r2, r8, #15
   bf674:	d00a      	beq.n	bf68c <_strtod_l+0x56c>
   bf676:	4b13      	ldr	r3, [pc, #76]	; (bf6c4 <_strtod_l+0x5a4>)
   bf678:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bf67c:	4650      	mov	r0, sl
   bf67e:	4659      	mov	r1, fp
   bf680:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf684:	f7ff f9fc 	bl	bea80 <__aeabi_ddiv>
   bf688:	4682      	mov	sl, r0
   bf68a:	468b      	mov	fp, r1
   bf68c:	ea5f 1828 	movs.w	r8, r8, asr #4
   bf690:	d0d7      	beq.n	bf642 <_strtod_l+0x522>
   bf692:	f1b8 0f1f 	cmp.w	r8, #31
   bf696:	dd1f      	ble.n	bf6d8 <_strtod_l+0x5b8>
   bf698:	2500      	movs	r5, #0
   bf69a:	462e      	mov	r6, r5
   bf69c:	9507      	str	r5, [sp, #28]
   bf69e:	9505      	str	r5, [sp, #20]
   bf6a0:	2322      	movs	r3, #34	; 0x22
   bf6a2:	f04f 0a00 	mov.w	sl, #0
   bf6a6:	f04f 0b00 	mov.w	fp, #0
   bf6aa:	6023      	str	r3, [r4, #0]
   bf6ac:	e786      	b.n	bf5bc <_strtod_l+0x49c>
   bf6ae:	bf00      	nop
   bf6b0:	000c27d6 	.word	0x000c27d6
   bf6b4:	000c27f0 	.word	0x000c27f0
   bf6b8:	000c27cd 	.word	0x000c27cd
   bf6bc:	000c27d0 	.word	0x000c27d0
   bf6c0:	000c1606 	.word	0x000c1606
   bf6c4:	000c2a40 	.word	0x000c2a40
   bf6c8:	000c2a18 	.word	0x000c2a18
   bf6cc:	7ff00000 	.word	0x7ff00000
   bf6d0:	7ca00000 	.word	0x7ca00000
   bf6d4:	7fefffff 	.word	0x7fefffff
   bf6d8:	f018 0310 	ands.w	r3, r8, #16
   bf6dc:	bf18      	it	ne
   bf6de:	236a      	movne	r3, #106	; 0x6a
   bf6e0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bfa90 <_strtod_l+0x970>
   bf6e4:	9304      	str	r3, [sp, #16]
   bf6e6:	4650      	mov	r0, sl
   bf6e8:	4659      	mov	r1, fp
   bf6ea:	2300      	movs	r3, #0
   bf6ec:	f018 0f01 	tst.w	r8, #1
   bf6f0:	d004      	beq.n	bf6fc <_strtod_l+0x5dc>
   bf6f2:	e9d9 2300 	ldrd	r2, r3, [r9]
   bf6f6:	f7ff f899 	bl	be82c <__aeabi_dmul>
   bf6fa:	2301      	movs	r3, #1
   bf6fc:	ea5f 0868 	movs.w	r8, r8, asr #1
   bf700:	f109 0908 	add.w	r9, r9, #8
   bf704:	d1f2      	bne.n	bf6ec <_strtod_l+0x5cc>
   bf706:	b10b      	cbz	r3, bf70c <_strtod_l+0x5ec>
   bf708:	4682      	mov	sl, r0
   bf70a:	468b      	mov	fp, r1
   bf70c:	9b04      	ldr	r3, [sp, #16]
   bf70e:	b1c3      	cbz	r3, bf742 <_strtod_l+0x622>
   bf710:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bf714:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bf718:	2b00      	cmp	r3, #0
   bf71a:	4659      	mov	r1, fp
   bf71c:	dd11      	ble.n	bf742 <_strtod_l+0x622>
   bf71e:	2b1f      	cmp	r3, #31
   bf720:	f340 8124 	ble.w	bf96c <_strtod_l+0x84c>
   bf724:	2b34      	cmp	r3, #52	; 0x34
   bf726:	bfde      	ittt	le
   bf728:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bf72c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bf730:	fa03 f202 	lslle.w	r2, r3, r2
   bf734:	f04f 0a00 	mov.w	sl, #0
   bf738:	bfcc      	ite	gt
   bf73a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bf73e:	ea02 0b01 	andle.w	fp, r2, r1
   bf742:	2200      	movs	r2, #0
   bf744:	2300      	movs	r3, #0
   bf746:	4650      	mov	r0, sl
   bf748:	4659      	mov	r1, fp
   bf74a:	f7ff fad7 	bl	becfc <__aeabi_dcmpeq>
   bf74e:	2800      	cmp	r0, #0
   bf750:	d1a2      	bne.n	bf698 <_strtod_l+0x578>
   bf752:	9b07      	ldr	r3, [sp, #28]
   bf754:	9300      	str	r3, [sp, #0]
   bf756:	9908      	ldr	r1, [sp, #32]
   bf758:	462b      	mov	r3, r5
   bf75a:	463a      	mov	r2, r7
   bf75c:	4620      	mov	r0, r4
   bf75e:	f001 f80d 	bl	c077c <__s2b>
   bf762:	9007      	str	r0, [sp, #28]
   bf764:	2800      	cmp	r0, #0
   bf766:	f43f af1f 	beq.w	bf5a8 <_strtod_l+0x488>
   bf76a:	9b05      	ldr	r3, [sp, #20]
   bf76c:	1b9e      	subs	r6, r3, r6
   bf76e:	9b06      	ldr	r3, [sp, #24]
   bf770:	2b00      	cmp	r3, #0
   bf772:	bfb4      	ite	lt
   bf774:	4633      	movlt	r3, r6
   bf776:	2300      	movge	r3, #0
   bf778:	930c      	str	r3, [sp, #48]	; 0x30
   bf77a:	9b06      	ldr	r3, [sp, #24]
   bf77c:	2500      	movs	r5, #0
   bf77e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bf782:	9312      	str	r3, [sp, #72]	; 0x48
   bf784:	462e      	mov	r6, r5
   bf786:	9b07      	ldr	r3, [sp, #28]
   bf788:	4620      	mov	r0, r4
   bf78a:	6859      	ldr	r1, [r3, #4]
   bf78c:	f000 ff4e 	bl	c062c <_Balloc>
   bf790:	9005      	str	r0, [sp, #20]
   bf792:	2800      	cmp	r0, #0
   bf794:	f43f af0c 	beq.w	bf5b0 <_strtod_l+0x490>
   bf798:	9b07      	ldr	r3, [sp, #28]
   bf79a:	691a      	ldr	r2, [r3, #16]
   bf79c:	3202      	adds	r2, #2
   bf79e:	f103 010c 	add.w	r1, r3, #12
   bf7a2:	0092      	lsls	r2, r2, #2
   bf7a4:	300c      	adds	r0, #12
   bf7a6:	f7ff fb86 	bl	beeb6 <memcpy>
   bf7aa:	ec4b ab10 	vmov	d0, sl, fp
   bf7ae:	aa1a      	add	r2, sp, #104	; 0x68
   bf7b0:	a919      	add	r1, sp, #100	; 0x64
   bf7b2:	4620      	mov	r0, r4
   bf7b4:	f001 fb28 	bl	c0e08 <__d2b>
   bf7b8:	ec4b ab18 	vmov	d8, sl, fp
   bf7bc:	9018      	str	r0, [sp, #96]	; 0x60
   bf7be:	2800      	cmp	r0, #0
   bf7c0:	f43f aef6 	beq.w	bf5b0 <_strtod_l+0x490>
   bf7c4:	2101      	movs	r1, #1
   bf7c6:	4620      	mov	r0, r4
   bf7c8:	f001 f872 	bl	c08b0 <__i2b>
   bf7cc:	4606      	mov	r6, r0
   bf7ce:	2800      	cmp	r0, #0
   bf7d0:	f43f aeee 	beq.w	bf5b0 <_strtod_l+0x490>
   bf7d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bf7d6:	9904      	ldr	r1, [sp, #16]
   bf7d8:	2b00      	cmp	r3, #0
   bf7da:	bfab      	itete	ge
   bf7dc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bf7de:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bf7e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bf7e2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bf7e6:	bfac      	ite	ge
   bf7e8:	eb03 0902 	addge.w	r9, r3, r2
   bf7ec:	1ad7      	sublt	r7, r2, r3
   bf7ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bf7f0:	eba3 0801 	sub.w	r8, r3, r1
   bf7f4:	4490      	add	r8, r2
   bf7f6:	4ba1      	ldr	r3, [pc, #644]	; (bfa7c <_strtod_l+0x95c>)
   bf7f8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bf7fc:	4598      	cmp	r8, r3
   bf7fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bf802:	f280 80c7 	bge.w	bf994 <_strtod_l+0x874>
   bf806:	eba3 0308 	sub.w	r3, r3, r8
   bf80a:	2b1f      	cmp	r3, #31
   bf80c:	eba2 0203 	sub.w	r2, r2, r3
   bf810:	f04f 0101 	mov.w	r1, #1
   bf814:	f300 80b1 	bgt.w	bf97a <_strtod_l+0x85a>
   bf818:	fa01 f303 	lsl.w	r3, r1, r3
   bf81c:	930d      	str	r3, [sp, #52]	; 0x34
   bf81e:	2300      	movs	r3, #0
   bf820:	9308      	str	r3, [sp, #32]
   bf822:	eb09 0802 	add.w	r8, r9, r2
   bf826:	9b04      	ldr	r3, [sp, #16]
   bf828:	45c1      	cmp	r9, r8
   bf82a:	4417      	add	r7, r2
   bf82c:	441f      	add	r7, r3
   bf82e:	464b      	mov	r3, r9
   bf830:	bfa8      	it	ge
   bf832:	4643      	movge	r3, r8
   bf834:	42bb      	cmp	r3, r7
   bf836:	bfa8      	it	ge
   bf838:	463b      	movge	r3, r7
   bf83a:	2b00      	cmp	r3, #0
   bf83c:	bfc2      	ittt	gt
   bf83e:	eba8 0803 	subgt.w	r8, r8, r3
   bf842:	1aff      	subgt	r7, r7, r3
   bf844:	eba9 0903 	subgt.w	r9, r9, r3
   bf848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bf84a:	2b00      	cmp	r3, #0
   bf84c:	dd17      	ble.n	bf87e <_strtod_l+0x75e>
   bf84e:	4631      	mov	r1, r6
   bf850:	461a      	mov	r2, r3
   bf852:	4620      	mov	r0, r4
   bf854:	f001 f8ec 	bl	c0a30 <__pow5mult>
   bf858:	4606      	mov	r6, r0
   bf85a:	2800      	cmp	r0, #0
   bf85c:	f43f aea8 	beq.w	bf5b0 <_strtod_l+0x490>
   bf860:	4601      	mov	r1, r0
   bf862:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bf864:	4620      	mov	r0, r4
   bf866:	f001 f839 	bl	c08dc <__multiply>
   bf86a:	900b      	str	r0, [sp, #44]	; 0x2c
   bf86c:	2800      	cmp	r0, #0
   bf86e:	f43f ae9f 	beq.w	bf5b0 <_strtod_l+0x490>
   bf872:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf874:	4620      	mov	r0, r4
   bf876:	f000 ff19 	bl	c06ac <_Bfree>
   bf87a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf87c:	9318      	str	r3, [sp, #96]	; 0x60
   bf87e:	f1b8 0f00 	cmp.w	r8, #0
   bf882:	f300 808c 	bgt.w	bf99e <_strtod_l+0x87e>
   bf886:	9b06      	ldr	r3, [sp, #24]
   bf888:	2b00      	cmp	r3, #0
   bf88a:	dd08      	ble.n	bf89e <_strtod_l+0x77e>
   bf88c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bf88e:	9905      	ldr	r1, [sp, #20]
   bf890:	4620      	mov	r0, r4
   bf892:	f001 f8cd 	bl	c0a30 <__pow5mult>
   bf896:	9005      	str	r0, [sp, #20]
   bf898:	2800      	cmp	r0, #0
   bf89a:	f43f ae89 	beq.w	bf5b0 <_strtod_l+0x490>
   bf89e:	2f00      	cmp	r7, #0
   bf8a0:	dd08      	ble.n	bf8b4 <_strtod_l+0x794>
   bf8a2:	9905      	ldr	r1, [sp, #20]
   bf8a4:	463a      	mov	r2, r7
   bf8a6:	4620      	mov	r0, r4
   bf8a8:	f001 f91c 	bl	c0ae4 <__lshift>
   bf8ac:	9005      	str	r0, [sp, #20]
   bf8ae:	2800      	cmp	r0, #0
   bf8b0:	f43f ae7e 	beq.w	bf5b0 <_strtod_l+0x490>
   bf8b4:	f1b9 0f00 	cmp.w	r9, #0
   bf8b8:	dd08      	ble.n	bf8cc <_strtod_l+0x7ac>
   bf8ba:	4631      	mov	r1, r6
   bf8bc:	464a      	mov	r2, r9
   bf8be:	4620      	mov	r0, r4
   bf8c0:	f001 f910 	bl	c0ae4 <__lshift>
   bf8c4:	4606      	mov	r6, r0
   bf8c6:	2800      	cmp	r0, #0
   bf8c8:	f43f ae72 	beq.w	bf5b0 <_strtod_l+0x490>
   bf8cc:	9a05      	ldr	r2, [sp, #20]
   bf8ce:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf8d0:	4620      	mov	r0, r4
   bf8d2:	f001 f993 	bl	c0bfc <__mdiff>
   bf8d6:	4605      	mov	r5, r0
   bf8d8:	2800      	cmp	r0, #0
   bf8da:	f43f ae69 	beq.w	bf5b0 <_strtod_l+0x490>
   bf8de:	68c3      	ldr	r3, [r0, #12]
   bf8e0:	930b      	str	r3, [sp, #44]	; 0x2c
   bf8e2:	2300      	movs	r3, #0
   bf8e4:	60c3      	str	r3, [r0, #12]
   bf8e6:	4631      	mov	r1, r6
   bf8e8:	f001 f96c 	bl	c0bc4 <__mcmp>
   bf8ec:	2800      	cmp	r0, #0
   bf8ee:	da60      	bge.n	bf9b2 <_strtod_l+0x892>
   bf8f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf8f2:	ea53 030a 	orrs.w	r3, r3, sl
   bf8f6:	f040 8082 	bne.w	bf9fe <_strtod_l+0x8de>
   bf8fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bf8fe:	2b00      	cmp	r3, #0
   bf900:	d17d      	bne.n	bf9fe <_strtod_l+0x8de>
   bf902:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bf906:	0d1b      	lsrs	r3, r3, #20
   bf908:	051b      	lsls	r3, r3, #20
   bf90a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bf90e:	d976      	bls.n	bf9fe <_strtod_l+0x8de>
   bf910:	696b      	ldr	r3, [r5, #20]
   bf912:	b913      	cbnz	r3, bf91a <_strtod_l+0x7fa>
   bf914:	692b      	ldr	r3, [r5, #16]
   bf916:	2b01      	cmp	r3, #1
   bf918:	dd71      	ble.n	bf9fe <_strtod_l+0x8de>
   bf91a:	4629      	mov	r1, r5
   bf91c:	2201      	movs	r2, #1
   bf91e:	4620      	mov	r0, r4
   bf920:	f001 f8e0 	bl	c0ae4 <__lshift>
   bf924:	4631      	mov	r1, r6
   bf926:	4605      	mov	r5, r0
   bf928:	f001 f94c 	bl	c0bc4 <__mcmp>
   bf92c:	2800      	cmp	r0, #0
   bf92e:	dd66      	ble.n	bf9fe <_strtod_l+0x8de>
   bf930:	9904      	ldr	r1, [sp, #16]
   bf932:	4a53      	ldr	r2, [pc, #332]	; (bfa80 <_strtod_l+0x960>)
   bf934:	465b      	mov	r3, fp
   bf936:	2900      	cmp	r1, #0
   bf938:	f000 8081 	beq.w	bfa3e <_strtod_l+0x91e>
   bf93c:	ea02 010b 	and.w	r1, r2, fp
   bf940:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bf944:	dc7b      	bgt.n	bfa3e <_strtod_l+0x91e>
   bf946:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bf94a:	f77f aea9 	ble.w	bf6a0 <_strtod_l+0x580>
   bf94e:	4b4d      	ldr	r3, [pc, #308]	; (bfa84 <_strtod_l+0x964>)
   bf950:	4650      	mov	r0, sl
   bf952:	4659      	mov	r1, fp
   bf954:	2200      	movs	r2, #0
   bf956:	f7fe ff69 	bl	be82c <__aeabi_dmul>
   bf95a:	460b      	mov	r3, r1
   bf95c:	4303      	orrs	r3, r0
   bf95e:	bf08      	it	eq
   bf960:	2322      	moveq	r3, #34	; 0x22
   bf962:	4682      	mov	sl, r0
   bf964:	468b      	mov	fp, r1
   bf966:	bf08      	it	eq
   bf968:	6023      	streq	r3, [r4, #0]
   bf96a:	e62b      	b.n	bf5c4 <_strtod_l+0x4a4>
   bf96c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf970:	fa02 f303 	lsl.w	r3, r2, r3
   bf974:	ea03 0a0a 	and.w	sl, r3, sl
   bf978:	e6e3      	b.n	bf742 <_strtod_l+0x622>
   bf97a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bf97e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bf982:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bf986:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bf98a:	fa01 f308 	lsl.w	r3, r1, r8
   bf98e:	9308      	str	r3, [sp, #32]
   bf990:	910d      	str	r1, [sp, #52]	; 0x34
   bf992:	e746      	b.n	bf822 <_strtod_l+0x702>
   bf994:	2300      	movs	r3, #0
   bf996:	9308      	str	r3, [sp, #32]
   bf998:	2301      	movs	r3, #1
   bf99a:	930d      	str	r3, [sp, #52]	; 0x34
   bf99c:	e741      	b.n	bf822 <_strtod_l+0x702>
   bf99e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf9a0:	4642      	mov	r2, r8
   bf9a2:	4620      	mov	r0, r4
   bf9a4:	f001 f89e 	bl	c0ae4 <__lshift>
   bf9a8:	9018      	str	r0, [sp, #96]	; 0x60
   bf9aa:	2800      	cmp	r0, #0
   bf9ac:	f47f af6b 	bne.w	bf886 <_strtod_l+0x766>
   bf9b0:	e5fe      	b.n	bf5b0 <_strtod_l+0x490>
   bf9b2:	465f      	mov	r7, fp
   bf9b4:	d16e      	bne.n	bfa94 <_strtod_l+0x974>
   bf9b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bf9b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bf9bc:	b342      	cbz	r2, bfa10 <_strtod_l+0x8f0>
   bf9be:	4a32      	ldr	r2, [pc, #200]	; (bfa88 <_strtod_l+0x968>)
   bf9c0:	4293      	cmp	r3, r2
   bf9c2:	d128      	bne.n	bfa16 <_strtod_l+0x8f6>
   bf9c4:	9b04      	ldr	r3, [sp, #16]
   bf9c6:	4651      	mov	r1, sl
   bf9c8:	b1eb      	cbz	r3, bfa06 <_strtod_l+0x8e6>
   bf9ca:	4b2d      	ldr	r3, [pc, #180]	; (bfa80 <_strtod_l+0x960>)
   bf9cc:	403b      	ands	r3, r7
   bf9ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bf9d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf9d6:	d819      	bhi.n	bfa0c <_strtod_l+0x8ec>
   bf9d8:	0d1b      	lsrs	r3, r3, #20
   bf9da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bf9de:	fa02 f303 	lsl.w	r3, r2, r3
   bf9e2:	4299      	cmp	r1, r3
   bf9e4:	d117      	bne.n	bfa16 <_strtod_l+0x8f6>
   bf9e6:	4b29      	ldr	r3, [pc, #164]	; (bfa8c <_strtod_l+0x96c>)
   bf9e8:	429f      	cmp	r7, r3
   bf9ea:	d102      	bne.n	bf9f2 <_strtod_l+0x8d2>
   bf9ec:	3101      	adds	r1, #1
   bf9ee:	f43f addf 	beq.w	bf5b0 <_strtod_l+0x490>
   bf9f2:	4b23      	ldr	r3, [pc, #140]	; (bfa80 <_strtod_l+0x960>)
   bf9f4:	403b      	ands	r3, r7
   bf9f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bf9fa:	f04f 0a00 	mov.w	sl, #0
   bf9fe:	9b04      	ldr	r3, [sp, #16]
   bfa00:	2b00      	cmp	r3, #0
   bfa02:	d1a4      	bne.n	bf94e <_strtod_l+0x82e>
   bfa04:	e5de      	b.n	bf5c4 <_strtod_l+0x4a4>
   bfa06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bfa0a:	e7ea      	b.n	bf9e2 <_strtod_l+0x8c2>
   bfa0c:	4613      	mov	r3, r2
   bfa0e:	e7e8      	b.n	bf9e2 <_strtod_l+0x8c2>
   bfa10:	ea53 030a 	orrs.w	r3, r3, sl
   bfa14:	d08c      	beq.n	bf930 <_strtod_l+0x810>
   bfa16:	9b08      	ldr	r3, [sp, #32]
   bfa18:	b1db      	cbz	r3, bfa52 <_strtod_l+0x932>
   bfa1a:	423b      	tst	r3, r7
   bfa1c:	d0ef      	beq.n	bf9fe <_strtod_l+0x8de>
   bfa1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bfa20:	9a04      	ldr	r2, [sp, #16]
   bfa22:	4650      	mov	r0, sl
   bfa24:	4659      	mov	r1, fp
   bfa26:	b1c3      	cbz	r3, bfa5a <_strtod_l+0x93a>
   bfa28:	f7ff fb5c 	bl	bf0e4 <sulp>
   bfa2c:	4602      	mov	r2, r0
   bfa2e:	460b      	mov	r3, r1
   bfa30:	ec51 0b18 	vmov	r0, r1, d8
   bfa34:	f7fe fd44 	bl	be4c0 <__adddf3>
   bfa38:	4682      	mov	sl, r0
   bfa3a:	468b      	mov	fp, r1
   bfa3c:	e7df      	b.n	bf9fe <_strtod_l+0x8de>
   bfa3e:	4013      	ands	r3, r2
   bfa40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bfa44:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bfa48:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bfa4c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bfa50:	e7d5      	b.n	bf9fe <_strtod_l+0x8de>
   bfa52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bfa54:	ea13 0f0a 	tst.w	r3, sl
   bfa58:	e7e0      	b.n	bfa1c <_strtod_l+0x8fc>
   bfa5a:	f7ff fb43 	bl	bf0e4 <sulp>
   bfa5e:	4602      	mov	r2, r0
   bfa60:	460b      	mov	r3, r1
   bfa62:	ec51 0b18 	vmov	r0, r1, d8
   bfa66:	f7fe fd29 	bl	be4bc <__aeabi_dsub>
   bfa6a:	2200      	movs	r2, #0
   bfa6c:	2300      	movs	r3, #0
   bfa6e:	4682      	mov	sl, r0
   bfa70:	468b      	mov	fp, r1
   bfa72:	f7ff f943 	bl	becfc <__aeabi_dcmpeq>
   bfa76:	2800      	cmp	r0, #0
   bfa78:	d0c1      	beq.n	bf9fe <_strtod_l+0x8de>
   bfa7a:	e611      	b.n	bf6a0 <_strtod_l+0x580>
   bfa7c:	fffffc02 	.word	0xfffffc02
   bfa80:	7ff00000 	.word	0x7ff00000
   bfa84:	39500000 	.word	0x39500000
   bfa88:	000fffff 	.word	0x000fffff
   bfa8c:	7fefffff 	.word	0x7fefffff
   bfa90:	000c2808 	.word	0x000c2808
   bfa94:	4631      	mov	r1, r6
   bfa96:	4628      	mov	r0, r5
   bfa98:	f001 fa12 	bl	c0ec0 <__ratio>
   bfa9c:	ec59 8b10 	vmov	r8, r9, d0
   bfaa0:	ee10 0a10 	vmov	r0, s0
   bfaa4:	2200      	movs	r2, #0
   bfaa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bfaaa:	4649      	mov	r1, r9
   bfaac:	f7ff f93a 	bl	bed24 <__aeabi_dcmple>
   bfab0:	2800      	cmp	r0, #0
   bfab2:	d07a      	beq.n	bfbaa <_strtod_l+0xa8a>
   bfab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bfab6:	2b00      	cmp	r3, #0
   bfab8:	d04a      	beq.n	bfb50 <_strtod_l+0xa30>
   bfaba:	4b95      	ldr	r3, [pc, #596]	; (bfd10 <_strtod_l+0xbf0>)
   bfabc:	2200      	movs	r2, #0
   bfabe:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bfac2:	f8df 924c 	ldr.w	r9, [pc, #588]	; bfd10 <_strtod_l+0xbf0>
   bfac6:	f04f 0800 	mov.w	r8, #0
   bfaca:	4b92      	ldr	r3, [pc, #584]	; (bfd14 <_strtod_l+0xbf4>)
   bfacc:	403b      	ands	r3, r7
   bface:	930d      	str	r3, [sp, #52]	; 0x34
   bfad0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bfad2:	4b91      	ldr	r3, [pc, #580]	; (bfd18 <_strtod_l+0xbf8>)
   bfad4:	429a      	cmp	r2, r3
   bfad6:	f040 80b0 	bne.w	bfc3a <_strtod_l+0xb1a>
   bfada:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bfade:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bfae2:	ec4b ab10 	vmov	d0, sl, fp
   bfae6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bfaea:	f001 f911 	bl	c0d10 <__ulp>
   bfaee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bfaf2:	ec53 2b10 	vmov	r2, r3, d0
   bfaf6:	f7fe fe99 	bl	be82c <__aeabi_dmul>
   bfafa:	4652      	mov	r2, sl
   bfafc:	465b      	mov	r3, fp
   bfafe:	f7fe fcdf 	bl	be4c0 <__adddf3>
   bfb02:	460b      	mov	r3, r1
   bfb04:	4983      	ldr	r1, [pc, #524]	; (bfd14 <_strtod_l+0xbf4>)
   bfb06:	4a85      	ldr	r2, [pc, #532]	; (bfd1c <_strtod_l+0xbfc>)
   bfb08:	4019      	ands	r1, r3
   bfb0a:	4291      	cmp	r1, r2
   bfb0c:	4682      	mov	sl, r0
   bfb0e:	d960      	bls.n	bfbd2 <_strtod_l+0xab2>
   bfb10:	ee18 3a90 	vmov	r3, s17
   bfb14:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bfb18:	4293      	cmp	r3, r2
   bfb1a:	d104      	bne.n	bfb26 <_strtod_l+0xa06>
   bfb1c:	ee18 3a10 	vmov	r3, s16
   bfb20:	3301      	adds	r3, #1
   bfb22:	f43f ad45 	beq.w	bf5b0 <_strtod_l+0x490>
   bfb26:	f8df b200 	ldr.w	fp, [pc, #512]	; bfd28 <_strtod_l+0xc08>
   bfb2a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bfb2e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bfb30:	4620      	mov	r0, r4
   bfb32:	f000 fdbb 	bl	c06ac <_Bfree>
   bfb36:	9905      	ldr	r1, [sp, #20]
   bfb38:	4620      	mov	r0, r4
   bfb3a:	f000 fdb7 	bl	c06ac <_Bfree>
   bfb3e:	4631      	mov	r1, r6
   bfb40:	4620      	mov	r0, r4
   bfb42:	f000 fdb3 	bl	c06ac <_Bfree>
   bfb46:	4629      	mov	r1, r5
   bfb48:	4620      	mov	r0, r4
   bfb4a:	f000 fdaf 	bl	c06ac <_Bfree>
   bfb4e:	e61a      	b.n	bf786 <_strtod_l+0x666>
   bfb50:	f1ba 0f00 	cmp.w	sl, #0
   bfb54:	d11b      	bne.n	bfb8e <_strtod_l+0xa6e>
   bfb56:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bfb5a:	b9f3      	cbnz	r3, bfb9a <_strtod_l+0xa7a>
   bfb5c:	4b6c      	ldr	r3, [pc, #432]	; (bfd10 <_strtod_l+0xbf0>)
   bfb5e:	2200      	movs	r2, #0
   bfb60:	4640      	mov	r0, r8
   bfb62:	4649      	mov	r1, r9
   bfb64:	f7ff f8d4 	bl	bed10 <__aeabi_dcmplt>
   bfb68:	b9d0      	cbnz	r0, bfba0 <_strtod_l+0xa80>
   bfb6a:	4640      	mov	r0, r8
   bfb6c:	4649      	mov	r1, r9
   bfb6e:	4b6c      	ldr	r3, [pc, #432]	; (bfd20 <_strtod_l+0xc00>)
   bfb70:	2200      	movs	r2, #0
   bfb72:	f7fe fe5b 	bl	be82c <__aeabi_dmul>
   bfb76:	4680      	mov	r8, r0
   bfb78:	4689      	mov	r9, r1
   bfb7a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bfb7e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bfb82:	9315      	str	r3, [sp, #84]	; 0x54
   bfb84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bfb88:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bfb8c:	e79d      	b.n	bfaca <_strtod_l+0x9aa>
   bfb8e:	f1ba 0f01 	cmp.w	sl, #1
   bfb92:	d102      	bne.n	bfb9a <_strtod_l+0xa7a>
   bfb94:	2f00      	cmp	r7, #0
   bfb96:	f43f ad83 	beq.w	bf6a0 <_strtod_l+0x580>
   bfb9a:	4b62      	ldr	r3, [pc, #392]	; (bfd24 <_strtod_l+0xc04>)
   bfb9c:	2200      	movs	r2, #0
   bfb9e:	e78e      	b.n	bfabe <_strtod_l+0x99e>
   bfba0:	f8df 917c 	ldr.w	r9, [pc, #380]	; bfd20 <_strtod_l+0xc00>
   bfba4:	f04f 0800 	mov.w	r8, #0
   bfba8:	e7e7      	b.n	bfb7a <_strtod_l+0xa5a>
   bfbaa:	4b5d      	ldr	r3, [pc, #372]	; (bfd20 <_strtod_l+0xc00>)
   bfbac:	4640      	mov	r0, r8
   bfbae:	4649      	mov	r1, r9
   bfbb0:	2200      	movs	r2, #0
   bfbb2:	f7fe fe3b 	bl	be82c <__aeabi_dmul>
   bfbb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bfbb8:	4680      	mov	r8, r0
   bfbba:	4689      	mov	r9, r1
   bfbbc:	b933      	cbnz	r3, bfbcc <_strtod_l+0xaac>
   bfbbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bfbc2:	900e      	str	r0, [sp, #56]	; 0x38
   bfbc4:	930f      	str	r3, [sp, #60]	; 0x3c
   bfbc6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bfbca:	e7dd      	b.n	bfb88 <_strtod_l+0xa68>
   bfbcc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bfbd0:	e7f9      	b.n	bfbc6 <_strtod_l+0xaa6>
   bfbd2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bfbd6:	9b04      	ldr	r3, [sp, #16]
   bfbd8:	2b00      	cmp	r3, #0
   bfbda:	d1a8      	bne.n	bfb2e <_strtod_l+0xa0e>
   bfbdc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bfbe0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bfbe2:	0d1b      	lsrs	r3, r3, #20
   bfbe4:	051b      	lsls	r3, r3, #20
   bfbe6:	429a      	cmp	r2, r3
   bfbe8:	d1a1      	bne.n	bfb2e <_strtod_l+0xa0e>
   bfbea:	4640      	mov	r0, r8
   bfbec:	4649      	mov	r1, r9
   bfbee:	f001 fa05 	bl	c0ffc <__aeabi_d2lz>
   bfbf2:	f7fe fded 	bl	be7d0 <__aeabi_l2d>
   bfbf6:	4602      	mov	r2, r0
   bfbf8:	460b      	mov	r3, r1
   bfbfa:	4640      	mov	r0, r8
   bfbfc:	4649      	mov	r1, r9
   bfbfe:	f7fe fc5d 	bl	be4bc <__aeabi_dsub>
   bfc02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bfc04:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bfc08:	ea43 030a 	orr.w	r3, r3, sl
   bfc0c:	4313      	orrs	r3, r2
   bfc0e:	4680      	mov	r8, r0
   bfc10:	4689      	mov	r9, r1
   bfc12:	d055      	beq.n	bfcc0 <_strtod_l+0xba0>
   bfc14:	a336      	add	r3, pc, #216	; (adr r3, bfcf0 <_strtod_l+0xbd0>)
   bfc16:	e9d3 2300 	ldrd	r2, r3, [r3]
   bfc1a:	f7ff f879 	bl	bed10 <__aeabi_dcmplt>
   bfc1e:	2800      	cmp	r0, #0
   bfc20:	f47f acd0 	bne.w	bf5c4 <_strtod_l+0x4a4>
   bfc24:	a334      	add	r3, pc, #208	; (adr r3, bfcf8 <_strtod_l+0xbd8>)
   bfc26:	e9d3 2300 	ldrd	r2, r3, [r3]
   bfc2a:	4640      	mov	r0, r8
   bfc2c:	4649      	mov	r1, r9
   bfc2e:	f7ff f88d 	bl	bed4c <__aeabi_dcmpgt>
   bfc32:	2800      	cmp	r0, #0
   bfc34:	f43f af7b 	beq.w	bfb2e <_strtod_l+0xa0e>
   bfc38:	e4c4      	b.n	bf5c4 <_strtod_l+0x4a4>
   bfc3a:	9b04      	ldr	r3, [sp, #16]
   bfc3c:	b333      	cbz	r3, bfc8c <_strtod_l+0xb6c>
   bfc3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bfc40:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bfc44:	d822      	bhi.n	bfc8c <_strtod_l+0xb6c>
   bfc46:	a32e      	add	r3, pc, #184	; (adr r3, bfd00 <_strtod_l+0xbe0>)
   bfc48:	e9d3 2300 	ldrd	r2, r3, [r3]
   bfc4c:	4640      	mov	r0, r8
   bfc4e:	4649      	mov	r1, r9
   bfc50:	f7ff f868 	bl	bed24 <__aeabi_dcmple>
   bfc54:	b1a0      	cbz	r0, bfc80 <_strtod_l+0xb60>
   bfc56:	4649      	mov	r1, r9
   bfc58:	4640      	mov	r0, r8
   bfc5a:	f7ff f881 	bl	bed60 <__aeabi_d2uiz>
   bfc5e:	2801      	cmp	r0, #1
   bfc60:	bf38      	it	cc
   bfc62:	2001      	movcc	r0, #1
   bfc64:	f7fe fd68 	bl	be738 <__aeabi_ui2d>
   bfc68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bfc6a:	4680      	mov	r8, r0
   bfc6c:	4689      	mov	r9, r1
   bfc6e:	bb23      	cbnz	r3, bfcba <_strtod_l+0xb9a>
   bfc70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bfc74:	9010      	str	r0, [sp, #64]	; 0x40
   bfc76:	9311      	str	r3, [sp, #68]	; 0x44
   bfc78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bfc7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bfc80:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bfc82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bfc84:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bfc88:	1a9b      	subs	r3, r3, r2
   bfc8a:	9309      	str	r3, [sp, #36]	; 0x24
   bfc8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bfc90:	eeb0 0a48 	vmov.f32	s0, s16
   bfc94:	eef0 0a68 	vmov.f32	s1, s17
   bfc98:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bfc9c:	f001 f838 	bl	c0d10 <__ulp>
   bfca0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bfca4:	ec53 2b10 	vmov	r2, r3, d0
   bfca8:	f7fe fdc0 	bl	be82c <__aeabi_dmul>
   bfcac:	ec53 2b18 	vmov	r2, r3, d8
   bfcb0:	f7fe fc06 	bl	be4c0 <__adddf3>
   bfcb4:	4682      	mov	sl, r0
   bfcb6:	468b      	mov	fp, r1
   bfcb8:	e78d      	b.n	bfbd6 <_strtod_l+0xab6>
   bfcba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bfcbe:	e7db      	b.n	bfc78 <_strtod_l+0xb58>
   bfcc0:	a311      	add	r3, pc, #68	; (adr r3, bfd08 <_strtod_l+0xbe8>)
   bfcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   bfcc6:	f7ff f823 	bl	bed10 <__aeabi_dcmplt>
   bfcca:	e7b2      	b.n	bfc32 <_strtod_l+0xb12>
   bfccc:	2300      	movs	r3, #0
   bfcce:	930a      	str	r3, [sp, #40]	; 0x28
   bfcd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bfcd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bfcd4:	6013      	str	r3, [r2, #0]
   bfcd6:	f7ff ba6b 	b.w	bf1b0 <_strtod_l+0x90>
   bfcda:	2a65      	cmp	r2, #101	; 0x65
   bfcdc:	f43f ab5f 	beq.w	bf39e <_strtod_l+0x27e>
   bfce0:	2a45      	cmp	r2, #69	; 0x45
   bfce2:	f43f ab5c 	beq.w	bf39e <_strtod_l+0x27e>
   bfce6:	2301      	movs	r3, #1
   bfce8:	f7ff bb94 	b.w	bf414 <_strtod_l+0x2f4>
   bfcec:	f3af 8000 	nop.w
   bfcf0:	94a03595 	.word	0x94a03595
   bfcf4:	3fdfffff 	.word	0x3fdfffff
   bfcf8:	35afe535 	.word	0x35afe535
   bfcfc:	3fe00000 	.word	0x3fe00000
   bfd00:	ffc00000 	.word	0xffc00000
   bfd04:	41dfffff 	.word	0x41dfffff
   bfd08:	94a03595 	.word	0x94a03595
   bfd0c:	3fcfffff 	.word	0x3fcfffff
   bfd10:	3ff00000 	.word	0x3ff00000
   bfd14:	7ff00000 	.word	0x7ff00000
   bfd18:	7fe00000 	.word	0x7fe00000
   bfd1c:	7c9fffff 	.word	0x7c9fffff
   bfd20:	3fe00000 	.word	0x3fe00000
   bfd24:	bff00000 	.word	0xbff00000
   bfd28:	7fefffff 	.word	0x7fefffff

000bfd2c <strtod>:
   bfd2c:	460a      	mov	r2, r1
   bfd2e:	4601      	mov	r1, r0
   bfd30:	4802      	ldr	r0, [pc, #8]	; (bfd3c <strtod+0x10>)
   bfd32:	4b03      	ldr	r3, [pc, #12]	; (bfd40 <strtod+0x14>)
   bfd34:	6800      	ldr	r0, [r0, #0]
   bfd36:	f7ff b9f3 	b.w	bf120 <_strtod_l>
   bfd3a:	bf00      	nop
   bfd3c:	2003dab0 	.word	0x2003dab0
   bfd40:	2003db1c 	.word	0x2003db1c

000bfd44 <_strtol_l.constprop.0>:
   bfd44:	2b01      	cmp	r3, #1
   bfd46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bfd4a:	d001      	beq.n	bfd50 <_strtol_l.constprop.0+0xc>
   bfd4c:	2b24      	cmp	r3, #36	; 0x24
   bfd4e:	d906      	bls.n	bfd5e <_strtol_l.constprop.0+0x1a>
   bfd50:	f7fa fb92 	bl	ba478 <__errno>
   bfd54:	2316      	movs	r3, #22
   bfd56:	6003      	str	r3, [r0, #0]
   bfd58:	2000      	movs	r0, #0
   bfd5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bfd5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bfe44 <_strtol_l.constprop.0+0x100>
   bfd62:	460d      	mov	r5, r1
   bfd64:	462e      	mov	r6, r5
   bfd66:	f815 4b01 	ldrb.w	r4, [r5], #1
   bfd6a:	f814 700c 	ldrb.w	r7, [r4, ip]
   bfd6e:	f017 0708 	ands.w	r7, r7, #8
   bfd72:	d1f7      	bne.n	bfd64 <_strtol_l.constprop.0+0x20>
   bfd74:	2c2d      	cmp	r4, #45	; 0x2d
   bfd76:	d132      	bne.n	bfdde <_strtol_l.constprop.0+0x9a>
   bfd78:	782c      	ldrb	r4, [r5, #0]
   bfd7a:	2701      	movs	r7, #1
   bfd7c:	1cb5      	adds	r5, r6, #2
   bfd7e:	2b00      	cmp	r3, #0
   bfd80:	d05b      	beq.n	bfe3a <_strtol_l.constprop.0+0xf6>
   bfd82:	2b10      	cmp	r3, #16
   bfd84:	d109      	bne.n	bfd9a <_strtol_l.constprop.0+0x56>
   bfd86:	2c30      	cmp	r4, #48	; 0x30
   bfd88:	d107      	bne.n	bfd9a <_strtol_l.constprop.0+0x56>
   bfd8a:	782c      	ldrb	r4, [r5, #0]
   bfd8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bfd90:	2c58      	cmp	r4, #88	; 0x58
   bfd92:	d14d      	bne.n	bfe30 <_strtol_l.constprop.0+0xec>
   bfd94:	786c      	ldrb	r4, [r5, #1]
   bfd96:	2310      	movs	r3, #16
   bfd98:	3502      	adds	r5, #2
   bfd9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bfd9e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bfda2:	f04f 0c00 	mov.w	ip, #0
   bfda6:	fbb8 f9f3 	udiv	r9, r8, r3
   bfdaa:	4666      	mov	r6, ip
   bfdac:	fb03 8a19 	mls	sl, r3, r9, r8
   bfdb0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bfdb4:	f1be 0f09 	cmp.w	lr, #9
   bfdb8:	d816      	bhi.n	bfde8 <_strtol_l.constprop.0+0xa4>
   bfdba:	4674      	mov	r4, lr
   bfdbc:	42a3      	cmp	r3, r4
   bfdbe:	dd24      	ble.n	bfe0a <_strtol_l.constprop.0+0xc6>
   bfdc0:	f1bc 0f00 	cmp.w	ip, #0
   bfdc4:	db1e      	blt.n	bfe04 <_strtol_l.constprop.0+0xc0>
   bfdc6:	45b1      	cmp	r9, r6
   bfdc8:	d31c      	bcc.n	bfe04 <_strtol_l.constprop.0+0xc0>
   bfdca:	d101      	bne.n	bfdd0 <_strtol_l.constprop.0+0x8c>
   bfdcc:	45a2      	cmp	sl, r4
   bfdce:	db19      	blt.n	bfe04 <_strtol_l.constprop.0+0xc0>
   bfdd0:	fb06 4603 	mla	r6, r6, r3, r4
   bfdd4:	f04f 0c01 	mov.w	ip, #1
   bfdd8:	f815 4b01 	ldrb.w	r4, [r5], #1
   bfddc:	e7e8      	b.n	bfdb0 <_strtol_l.constprop.0+0x6c>
   bfdde:	2c2b      	cmp	r4, #43	; 0x2b
   bfde0:	bf04      	itt	eq
   bfde2:	782c      	ldrbeq	r4, [r5, #0]
   bfde4:	1cb5      	addeq	r5, r6, #2
   bfde6:	e7ca      	b.n	bfd7e <_strtol_l.constprop.0+0x3a>
   bfde8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bfdec:	f1be 0f19 	cmp.w	lr, #25
   bfdf0:	d801      	bhi.n	bfdf6 <_strtol_l.constprop.0+0xb2>
   bfdf2:	3c37      	subs	r4, #55	; 0x37
   bfdf4:	e7e2      	b.n	bfdbc <_strtol_l.constprop.0+0x78>
   bfdf6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bfdfa:	f1be 0f19 	cmp.w	lr, #25
   bfdfe:	d804      	bhi.n	bfe0a <_strtol_l.constprop.0+0xc6>
   bfe00:	3c57      	subs	r4, #87	; 0x57
   bfe02:	e7db      	b.n	bfdbc <_strtol_l.constprop.0+0x78>
   bfe04:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bfe08:	e7e6      	b.n	bfdd8 <_strtol_l.constprop.0+0x94>
   bfe0a:	f1bc 0f00 	cmp.w	ip, #0
   bfe0e:	da05      	bge.n	bfe1c <_strtol_l.constprop.0+0xd8>
   bfe10:	2322      	movs	r3, #34	; 0x22
   bfe12:	6003      	str	r3, [r0, #0]
   bfe14:	4646      	mov	r6, r8
   bfe16:	b942      	cbnz	r2, bfe2a <_strtol_l.constprop.0+0xe6>
   bfe18:	4630      	mov	r0, r6
   bfe1a:	e79e      	b.n	bfd5a <_strtol_l.constprop.0+0x16>
   bfe1c:	b107      	cbz	r7, bfe20 <_strtol_l.constprop.0+0xdc>
   bfe1e:	4276      	negs	r6, r6
   bfe20:	2a00      	cmp	r2, #0
   bfe22:	d0f9      	beq.n	bfe18 <_strtol_l.constprop.0+0xd4>
   bfe24:	f1bc 0f00 	cmp.w	ip, #0
   bfe28:	d000      	beq.n	bfe2c <_strtol_l.constprop.0+0xe8>
   bfe2a:	1e69      	subs	r1, r5, #1
   bfe2c:	6011      	str	r1, [r2, #0]
   bfe2e:	e7f3      	b.n	bfe18 <_strtol_l.constprop.0+0xd4>
   bfe30:	2430      	movs	r4, #48	; 0x30
   bfe32:	2b00      	cmp	r3, #0
   bfe34:	d1b1      	bne.n	bfd9a <_strtol_l.constprop.0+0x56>
   bfe36:	2308      	movs	r3, #8
   bfe38:	e7af      	b.n	bfd9a <_strtol_l.constprop.0+0x56>
   bfe3a:	2c30      	cmp	r4, #48	; 0x30
   bfe3c:	d0a5      	beq.n	bfd8a <_strtol_l.constprop.0+0x46>
   bfe3e:	230a      	movs	r3, #10
   bfe40:	e7ab      	b.n	bfd9a <_strtol_l.constprop.0+0x56>
   bfe42:	bf00      	nop
   bfe44:	000c2831 	.word	0x000c2831

000bfe48 <strtol>:
   bfe48:	4613      	mov	r3, r2
   bfe4a:	460a      	mov	r2, r1
   bfe4c:	4601      	mov	r1, r0
   bfe4e:	4802      	ldr	r0, [pc, #8]	; (bfe58 <strtol+0x10>)
   bfe50:	6800      	ldr	r0, [r0, #0]
   bfe52:	f7ff bf77 	b.w	bfd44 <_strtol_l.constprop.0>
   bfe56:	bf00      	nop
   bfe58:	2003dab0 	.word	0x2003dab0

000bfe5c <__register_exitproc>:
   bfe5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bfe60:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bff1c <__register_exitproc+0xc0>
   bfe64:	4606      	mov	r6, r0
   bfe66:	f8d8 0000 	ldr.w	r0, [r8]
   bfe6a:	461f      	mov	r7, r3
   bfe6c:	460d      	mov	r5, r1
   bfe6e:	4691      	mov	r9, r2
   bfe70:	f000 fbc6 	bl	c0600 <__retarget_lock_acquire_recursive>
   bfe74:	4b25      	ldr	r3, [pc, #148]	; (bff0c <__register_exitproc+0xb0>)
   bfe76:	681c      	ldr	r4, [r3, #0]
   bfe78:	b934      	cbnz	r4, bfe88 <__register_exitproc+0x2c>
   bfe7a:	4c25      	ldr	r4, [pc, #148]	; (bff10 <__register_exitproc+0xb4>)
   bfe7c:	601c      	str	r4, [r3, #0]
   bfe7e:	4b25      	ldr	r3, [pc, #148]	; (bff14 <__register_exitproc+0xb8>)
   bfe80:	b113      	cbz	r3, bfe88 <__register_exitproc+0x2c>
   bfe82:	681b      	ldr	r3, [r3, #0]
   bfe84:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bfe88:	6863      	ldr	r3, [r4, #4]
   bfe8a:	2b1f      	cmp	r3, #31
   bfe8c:	dd07      	ble.n	bfe9e <__register_exitproc+0x42>
   bfe8e:	f8d8 0000 	ldr.w	r0, [r8]
   bfe92:	f000 fbb7 	bl	c0604 <__retarget_lock_release_recursive>
   bfe96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bfe9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bfe9e:	b34e      	cbz	r6, bfef4 <__register_exitproc+0x98>
   bfea0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bfea4:	b988      	cbnz	r0, bfeca <__register_exitproc+0x6e>
   bfea6:	4b1c      	ldr	r3, [pc, #112]	; (bff18 <__register_exitproc+0xbc>)
   bfea8:	b923      	cbnz	r3, bfeb4 <__register_exitproc+0x58>
   bfeaa:	f8d8 0000 	ldr.w	r0, [r8]
   bfeae:	f000 fba8 	bl	c0602 <__retarget_lock_release>
   bfeb2:	e7f0      	b.n	bfe96 <__register_exitproc+0x3a>
   bfeb4:	f44f 7084 	mov.w	r0, #264	; 0x108
   bfeb8:	f7fa fa96 	bl	ba3e8 <malloc>
   bfebc:	2800      	cmp	r0, #0
   bfebe:	d0f4      	beq.n	bfeaa <__register_exitproc+0x4e>
   bfec0:	2300      	movs	r3, #0
   bfec2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bfec6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bfeca:	6863      	ldr	r3, [r4, #4]
   bfecc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bfed0:	2201      	movs	r2, #1
   bfed2:	409a      	lsls	r2, r3
   bfed4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bfed8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bfedc:	4313      	orrs	r3, r2
   bfede:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bfee2:	2e02      	cmp	r6, #2
   bfee4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bfee8:	bf02      	ittt	eq
   bfeea:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bfeee:	4313      	orreq	r3, r2
   bfef0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bfef4:	6863      	ldr	r3, [r4, #4]
   bfef6:	f8d8 0000 	ldr.w	r0, [r8]
   bfefa:	1c5a      	adds	r2, r3, #1
   bfefc:	3302      	adds	r3, #2
   bfefe:	6062      	str	r2, [r4, #4]
   bff00:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bff04:	f000 fb7e 	bl	c0604 <__retarget_lock_release_recursive>
   bff08:	2000      	movs	r0, #0
   bff0a:	e7c6      	b.n	bfe9a <__register_exitproc+0x3e>
   bff0c:	2003e7e8 	.word	0x2003e7e8
   bff10:	2003e75c 	.word	0x2003e75c
   bff14:	00000000 	.word	0x00000000
   bff18:	000ba3e9 	.word	0x000ba3e9
   bff1c:	2003db14 	.word	0x2003db14

000bff20 <rshift>:
   bff20:	6903      	ldr	r3, [r0, #16]
   bff22:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bff26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bff2a:	ea4f 1261 	mov.w	r2, r1, asr #5
   bff2e:	f100 0414 	add.w	r4, r0, #20
   bff32:	dd45      	ble.n	bffc0 <rshift+0xa0>
   bff34:	f011 011f 	ands.w	r1, r1, #31
   bff38:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bff3c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bff40:	d10c      	bne.n	bff5c <rshift+0x3c>
   bff42:	f100 0710 	add.w	r7, r0, #16
   bff46:	4629      	mov	r1, r5
   bff48:	42b1      	cmp	r1, r6
   bff4a:	d334      	bcc.n	bffb6 <rshift+0x96>
   bff4c:	1a9b      	subs	r3, r3, r2
   bff4e:	009b      	lsls	r3, r3, #2
   bff50:	1eea      	subs	r2, r5, #3
   bff52:	4296      	cmp	r6, r2
   bff54:	bf38      	it	cc
   bff56:	2300      	movcc	r3, #0
   bff58:	4423      	add	r3, r4
   bff5a:	e015      	b.n	bff88 <rshift+0x68>
   bff5c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bff60:	f1c1 0820 	rsb	r8, r1, #32
   bff64:	40cf      	lsrs	r7, r1
   bff66:	f105 0e04 	add.w	lr, r5, #4
   bff6a:	46a1      	mov	r9, r4
   bff6c:	4576      	cmp	r6, lr
   bff6e:	46f4      	mov	ip, lr
   bff70:	d815      	bhi.n	bff9e <rshift+0x7e>
   bff72:	1a9a      	subs	r2, r3, r2
   bff74:	0092      	lsls	r2, r2, #2
   bff76:	3a04      	subs	r2, #4
   bff78:	3501      	adds	r5, #1
   bff7a:	42ae      	cmp	r6, r5
   bff7c:	bf38      	it	cc
   bff7e:	2200      	movcc	r2, #0
   bff80:	18a3      	adds	r3, r4, r2
   bff82:	50a7      	str	r7, [r4, r2]
   bff84:	b107      	cbz	r7, bff88 <rshift+0x68>
   bff86:	3304      	adds	r3, #4
   bff88:	1b1a      	subs	r2, r3, r4
   bff8a:	42a3      	cmp	r3, r4
   bff8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bff90:	bf08      	it	eq
   bff92:	2300      	moveq	r3, #0
   bff94:	6102      	str	r2, [r0, #16]
   bff96:	bf08      	it	eq
   bff98:	6143      	streq	r3, [r0, #20]
   bff9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bff9e:	f8dc c000 	ldr.w	ip, [ip]
   bffa2:	fa0c fc08 	lsl.w	ip, ip, r8
   bffa6:	ea4c 0707 	orr.w	r7, ip, r7
   bffaa:	f849 7b04 	str.w	r7, [r9], #4
   bffae:	f85e 7b04 	ldr.w	r7, [lr], #4
   bffb2:	40cf      	lsrs	r7, r1
   bffb4:	e7da      	b.n	bff6c <rshift+0x4c>
   bffb6:	f851 cb04 	ldr.w	ip, [r1], #4
   bffba:	f847 cf04 	str.w	ip, [r7, #4]!
   bffbe:	e7c3      	b.n	bff48 <rshift+0x28>
   bffc0:	4623      	mov	r3, r4
   bffc2:	e7e1      	b.n	bff88 <rshift+0x68>

000bffc4 <__hexdig_fun>:
   bffc4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bffc8:	2b09      	cmp	r3, #9
   bffca:	d802      	bhi.n	bffd2 <__hexdig_fun+0xe>
   bffcc:	3820      	subs	r0, #32
   bffce:	b2c0      	uxtb	r0, r0
   bffd0:	4770      	bx	lr
   bffd2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bffd6:	2b05      	cmp	r3, #5
   bffd8:	d801      	bhi.n	bffde <__hexdig_fun+0x1a>
   bffda:	3847      	subs	r0, #71	; 0x47
   bffdc:	e7f7      	b.n	bffce <__hexdig_fun+0xa>
   bffde:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bffe2:	2b05      	cmp	r3, #5
   bffe4:	d801      	bhi.n	bffea <__hexdig_fun+0x26>
   bffe6:	3827      	subs	r0, #39	; 0x27
   bffe8:	e7f1      	b.n	bffce <__hexdig_fun+0xa>
   bffea:	2000      	movs	r0, #0
   bffec:	4770      	bx	lr
	...

000bfff0 <__gethex>:
   bfff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfff4:	ed2d 8b02 	vpush	{d8}
   bfff8:	b089      	sub	sp, #36	; 0x24
   bfffa:	ee08 0a10 	vmov	s16, r0
   bfffe:	9304      	str	r3, [sp, #16]
   c0000:	4bb4      	ldr	r3, [pc, #720]	; (c02d4 <__gethex+0x2e4>)
   c0002:	681b      	ldr	r3, [r3, #0]
   c0004:	9301      	str	r3, [sp, #4]
   c0006:	4618      	mov	r0, r3
   c0008:	468b      	mov	fp, r1
   c000a:	4690      	mov	r8, r2
   c000c:	f7ff f82f 	bl	bf06e <strlen>
   c0010:	9b01      	ldr	r3, [sp, #4]
   c0012:	f8db 2000 	ldr.w	r2, [fp]
   c0016:	4403      	add	r3, r0
   c0018:	4682      	mov	sl, r0
   c001a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   c001e:	9305      	str	r3, [sp, #20]
   c0020:	1c93      	adds	r3, r2, #2
   c0022:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   c0026:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   c002a:	32fe      	adds	r2, #254	; 0xfe
   c002c:	18d1      	adds	r1, r2, r3
   c002e:	461f      	mov	r7, r3
   c0030:	f813 0b01 	ldrb.w	r0, [r3], #1
   c0034:	9100      	str	r1, [sp, #0]
   c0036:	2830      	cmp	r0, #48	; 0x30
   c0038:	d0f8      	beq.n	c002c <__gethex+0x3c>
   c003a:	f7ff ffc3 	bl	bffc4 <__hexdig_fun>
   c003e:	4604      	mov	r4, r0
   c0040:	2800      	cmp	r0, #0
   c0042:	d13a      	bne.n	c00ba <__gethex+0xca>
   c0044:	9901      	ldr	r1, [sp, #4]
   c0046:	4652      	mov	r2, sl
   c0048:	4638      	mov	r0, r7
   c004a:	f7ff f818 	bl	bf07e <strncmp>
   c004e:	4605      	mov	r5, r0
   c0050:	2800      	cmp	r0, #0
   c0052:	d168      	bne.n	c0126 <__gethex+0x136>
   c0054:	f817 000a 	ldrb.w	r0, [r7, sl]
   c0058:	eb07 060a 	add.w	r6, r7, sl
   c005c:	f7ff ffb2 	bl	bffc4 <__hexdig_fun>
   c0060:	2800      	cmp	r0, #0
   c0062:	d062      	beq.n	c012a <__gethex+0x13a>
   c0064:	4633      	mov	r3, r6
   c0066:	7818      	ldrb	r0, [r3, #0]
   c0068:	2830      	cmp	r0, #48	; 0x30
   c006a:	461f      	mov	r7, r3
   c006c:	f103 0301 	add.w	r3, r3, #1
   c0070:	d0f9      	beq.n	c0066 <__gethex+0x76>
   c0072:	f7ff ffa7 	bl	bffc4 <__hexdig_fun>
   c0076:	2301      	movs	r3, #1
   c0078:	fab0 f480 	clz	r4, r0
   c007c:	0964      	lsrs	r4, r4, #5
   c007e:	4635      	mov	r5, r6
   c0080:	9300      	str	r3, [sp, #0]
   c0082:	463a      	mov	r2, r7
   c0084:	4616      	mov	r6, r2
   c0086:	3201      	adds	r2, #1
   c0088:	7830      	ldrb	r0, [r6, #0]
   c008a:	f7ff ff9b 	bl	bffc4 <__hexdig_fun>
   c008e:	2800      	cmp	r0, #0
   c0090:	d1f8      	bne.n	c0084 <__gethex+0x94>
   c0092:	9901      	ldr	r1, [sp, #4]
   c0094:	4652      	mov	r2, sl
   c0096:	4630      	mov	r0, r6
   c0098:	f7fe fff1 	bl	bf07e <strncmp>
   c009c:	b980      	cbnz	r0, c00c0 <__gethex+0xd0>
   c009e:	b94d      	cbnz	r5, c00b4 <__gethex+0xc4>
   c00a0:	eb06 050a 	add.w	r5, r6, sl
   c00a4:	462a      	mov	r2, r5
   c00a6:	4616      	mov	r6, r2
   c00a8:	3201      	adds	r2, #1
   c00aa:	7830      	ldrb	r0, [r6, #0]
   c00ac:	f7ff ff8a 	bl	bffc4 <__hexdig_fun>
   c00b0:	2800      	cmp	r0, #0
   c00b2:	d1f8      	bne.n	c00a6 <__gethex+0xb6>
   c00b4:	1bad      	subs	r5, r5, r6
   c00b6:	00ad      	lsls	r5, r5, #2
   c00b8:	e004      	b.n	c00c4 <__gethex+0xd4>
   c00ba:	2400      	movs	r4, #0
   c00bc:	4625      	mov	r5, r4
   c00be:	e7e0      	b.n	c0082 <__gethex+0x92>
   c00c0:	2d00      	cmp	r5, #0
   c00c2:	d1f7      	bne.n	c00b4 <__gethex+0xc4>
   c00c4:	7833      	ldrb	r3, [r6, #0]
   c00c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c00ca:	2b50      	cmp	r3, #80	; 0x50
   c00cc:	d13b      	bne.n	c0146 <__gethex+0x156>
   c00ce:	7873      	ldrb	r3, [r6, #1]
   c00d0:	2b2b      	cmp	r3, #43	; 0x2b
   c00d2:	d02c      	beq.n	c012e <__gethex+0x13e>
   c00d4:	2b2d      	cmp	r3, #45	; 0x2d
   c00d6:	d02e      	beq.n	c0136 <__gethex+0x146>
   c00d8:	1c71      	adds	r1, r6, #1
   c00da:	f04f 0900 	mov.w	r9, #0
   c00de:	7808      	ldrb	r0, [r1, #0]
   c00e0:	f7ff ff70 	bl	bffc4 <__hexdig_fun>
   c00e4:	1e43      	subs	r3, r0, #1
   c00e6:	b2db      	uxtb	r3, r3
   c00e8:	2b18      	cmp	r3, #24
   c00ea:	d82c      	bhi.n	c0146 <__gethex+0x156>
   c00ec:	f1a0 0210 	sub.w	r2, r0, #16
   c00f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   c00f4:	f7ff ff66 	bl	bffc4 <__hexdig_fun>
   c00f8:	1e43      	subs	r3, r0, #1
   c00fa:	b2db      	uxtb	r3, r3
   c00fc:	2b18      	cmp	r3, #24
   c00fe:	d91d      	bls.n	c013c <__gethex+0x14c>
   c0100:	f1b9 0f00 	cmp.w	r9, #0
   c0104:	d000      	beq.n	c0108 <__gethex+0x118>
   c0106:	4252      	negs	r2, r2
   c0108:	4415      	add	r5, r2
   c010a:	f8cb 1000 	str.w	r1, [fp]
   c010e:	b1e4      	cbz	r4, c014a <__gethex+0x15a>
   c0110:	9b00      	ldr	r3, [sp, #0]
   c0112:	2b00      	cmp	r3, #0
   c0114:	bf14      	ite	ne
   c0116:	2700      	movne	r7, #0
   c0118:	2706      	moveq	r7, #6
   c011a:	4638      	mov	r0, r7
   c011c:	b009      	add	sp, #36	; 0x24
   c011e:	ecbd 8b02 	vpop	{d8}
   c0122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c0126:	463e      	mov	r6, r7
   c0128:	4625      	mov	r5, r4
   c012a:	2401      	movs	r4, #1
   c012c:	e7ca      	b.n	c00c4 <__gethex+0xd4>
   c012e:	f04f 0900 	mov.w	r9, #0
   c0132:	1cb1      	adds	r1, r6, #2
   c0134:	e7d3      	b.n	c00de <__gethex+0xee>
   c0136:	f04f 0901 	mov.w	r9, #1
   c013a:	e7fa      	b.n	c0132 <__gethex+0x142>
   c013c:	230a      	movs	r3, #10
   c013e:	fb03 0202 	mla	r2, r3, r2, r0
   c0142:	3a10      	subs	r2, #16
   c0144:	e7d4      	b.n	c00f0 <__gethex+0x100>
   c0146:	4631      	mov	r1, r6
   c0148:	e7df      	b.n	c010a <__gethex+0x11a>
   c014a:	1bf3      	subs	r3, r6, r7
   c014c:	3b01      	subs	r3, #1
   c014e:	4621      	mov	r1, r4
   c0150:	2b07      	cmp	r3, #7
   c0152:	dc0b      	bgt.n	c016c <__gethex+0x17c>
   c0154:	ee18 0a10 	vmov	r0, s16
   c0158:	f000 fa68 	bl	c062c <_Balloc>
   c015c:	4604      	mov	r4, r0
   c015e:	b940      	cbnz	r0, c0172 <__gethex+0x182>
   c0160:	4b5d      	ldr	r3, [pc, #372]	; (c02d8 <__gethex+0x2e8>)
   c0162:	4602      	mov	r2, r0
   c0164:	21de      	movs	r1, #222	; 0xde
   c0166:	485d      	ldr	r0, [pc, #372]	; (c02dc <__gethex+0x2ec>)
   c0168:	f7fa f98e 	bl	ba488 <__assert_func>
   c016c:	3101      	adds	r1, #1
   c016e:	105b      	asrs	r3, r3, #1
   c0170:	e7ee      	b.n	c0150 <__gethex+0x160>
   c0172:	f100 0914 	add.w	r9, r0, #20
   c0176:	f04f 0b00 	mov.w	fp, #0
   c017a:	f1ca 0301 	rsb	r3, sl, #1
   c017e:	f8cd 9008 	str.w	r9, [sp, #8]
   c0182:	f8cd b000 	str.w	fp, [sp]
   c0186:	9306      	str	r3, [sp, #24]
   c0188:	42b7      	cmp	r7, r6
   c018a:	d340      	bcc.n	c020e <__gethex+0x21e>
   c018c:	9802      	ldr	r0, [sp, #8]
   c018e:	9b00      	ldr	r3, [sp, #0]
   c0190:	f840 3b04 	str.w	r3, [r0], #4
   c0194:	eba0 0009 	sub.w	r0, r0, r9
   c0198:	1080      	asrs	r0, r0, #2
   c019a:	0146      	lsls	r6, r0, #5
   c019c:	6120      	str	r0, [r4, #16]
   c019e:	4618      	mov	r0, r3
   c01a0:	f000 fb36 	bl	c0810 <__hi0bits>
   c01a4:	1a30      	subs	r0, r6, r0
   c01a6:	f8d8 6000 	ldr.w	r6, [r8]
   c01aa:	42b0      	cmp	r0, r6
   c01ac:	dd63      	ble.n	c0276 <__gethex+0x286>
   c01ae:	1b87      	subs	r7, r0, r6
   c01b0:	4639      	mov	r1, r7
   c01b2:	4620      	mov	r0, r4
   c01b4:	f000 feda 	bl	c0f6c <__any_on>
   c01b8:	4682      	mov	sl, r0
   c01ba:	b1a8      	cbz	r0, c01e8 <__gethex+0x1f8>
   c01bc:	1e7b      	subs	r3, r7, #1
   c01be:	1159      	asrs	r1, r3, #5
   c01c0:	f003 021f 	and.w	r2, r3, #31
   c01c4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   c01c8:	f04f 0a01 	mov.w	sl, #1
   c01cc:	fa0a f202 	lsl.w	r2, sl, r2
   c01d0:	420a      	tst	r2, r1
   c01d2:	d009      	beq.n	c01e8 <__gethex+0x1f8>
   c01d4:	4553      	cmp	r3, sl
   c01d6:	dd05      	ble.n	c01e4 <__gethex+0x1f4>
   c01d8:	1eb9      	subs	r1, r7, #2
   c01da:	4620      	mov	r0, r4
   c01dc:	f000 fec6 	bl	c0f6c <__any_on>
   c01e0:	2800      	cmp	r0, #0
   c01e2:	d145      	bne.n	c0270 <__gethex+0x280>
   c01e4:	f04f 0a02 	mov.w	sl, #2
   c01e8:	4639      	mov	r1, r7
   c01ea:	4620      	mov	r0, r4
   c01ec:	f7ff fe98 	bl	bff20 <rshift>
   c01f0:	443d      	add	r5, r7
   c01f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c01f6:	42ab      	cmp	r3, r5
   c01f8:	da4c      	bge.n	c0294 <__gethex+0x2a4>
   c01fa:	ee18 0a10 	vmov	r0, s16
   c01fe:	4621      	mov	r1, r4
   c0200:	f000 fa54 	bl	c06ac <_Bfree>
   c0204:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c0206:	2300      	movs	r3, #0
   c0208:	6013      	str	r3, [r2, #0]
   c020a:	27a3      	movs	r7, #163	; 0xa3
   c020c:	e785      	b.n	c011a <__gethex+0x12a>
   c020e:	1e73      	subs	r3, r6, #1
   c0210:	9a05      	ldr	r2, [sp, #20]
   c0212:	9303      	str	r3, [sp, #12]
   c0214:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   c0218:	4293      	cmp	r3, r2
   c021a:	d019      	beq.n	c0250 <__gethex+0x260>
   c021c:	f1bb 0f20 	cmp.w	fp, #32
   c0220:	d107      	bne.n	c0232 <__gethex+0x242>
   c0222:	9b02      	ldr	r3, [sp, #8]
   c0224:	9a00      	ldr	r2, [sp, #0]
   c0226:	f843 2b04 	str.w	r2, [r3], #4
   c022a:	9302      	str	r3, [sp, #8]
   c022c:	2300      	movs	r3, #0
   c022e:	9300      	str	r3, [sp, #0]
   c0230:	469b      	mov	fp, r3
   c0232:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   c0236:	f7ff fec5 	bl	bffc4 <__hexdig_fun>
   c023a:	9b00      	ldr	r3, [sp, #0]
   c023c:	f000 000f 	and.w	r0, r0, #15
   c0240:	fa00 f00b 	lsl.w	r0, r0, fp
   c0244:	4303      	orrs	r3, r0
   c0246:	9300      	str	r3, [sp, #0]
   c0248:	f10b 0b04 	add.w	fp, fp, #4
   c024c:	9b03      	ldr	r3, [sp, #12]
   c024e:	e00d      	b.n	c026c <__gethex+0x27c>
   c0250:	9b03      	ldr	r3, [sp, #12]
   c0252:	9a06      	ldr	r2, [sp, #24]
   c0254:	4413      	add	r3, r2
   c0256:	42bb      	cmp	r3, r7
   c0258:	d3e0      	bcc.n	c021c <__gethex+0x22c>
   c025a:	4618      	mov	r0, r3
   c025c:	9901      	ldr	r1, [sp, #4]
   c025e:	9307      	str	r3, [sp, #28]
   c0260:	4652      	mov	r2, sl
   c0262:	f7fe ff0c 	bl	bf07e <strncmp>
   c0266:	9b07      	ldr	r3, [sp, #28]
   c0268:	2800      	cmp	r0, #0
   c026a:	d1d7      	bne.n	c021c <__gethex+0x22c>
   c026c:	461e      	mov	r6, r3
   c026e:	e78b      	b.n	c0188 <__gethex+0x198>
   c0270:	f04f 0a03 	mov.w	sl, #3
   c0274:	e7b8      	b.n	c01e8 <__gethex+0x1f8>
   c0276:	da0a      	bge.n	c028e <__gethex+0x29e>
   c0278:	1a37      	subs	r7, r6, r0
   c027a:	4621      	mov	r1, r4
   c027c:	ee18 0a10 	vmov	r0, s16
   c0280:	463a      	mov	r2, r7
   c0282:	f000 fc2f 	bl	c0ae4 <__lshift>
   c0286:	1bed      	subs	r5, r5, r7
   c0288:	4604      	mov	r4, r0
   c028a:	f100 0914 	add.w	r9, r0, #20
   c028e:	f04f 0a00 	mov.w	sl, #0
   c0292:	e7ae      	b.n	c01f2 <__gethex+0x202>
   c0294:	f8d8 0004 	ldr.w	r0, [r8, #4]
   c0298:	42a8      	cmp	r0, r5
   c029a:	dd72      	ble.n	c0382 <__gethex+0x392>
   c029c:	1b45      	subs	r5, r0, r5
   c029e:	42ae      	cmp	r6, r5
   c02a0:	dc36      	bgt.n	c0310 <__gethex+0x320>
   c02a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c02a6:	2b02      	cmp	r3, #2
   c02a8:	d02a      	beq.n	c0300 <__gethex+0x310>
   c02aa:	2b03      	cmp	r3, #3
   c02ac:	d02c      	beq.n	c0308 <__gethex+0x318>
   c02ae:	2b01      	cmp	r3, #1
   c02b0:	d11c      	bne.n	c02ec <__gethex+0x2fc>
   c02b2:	42ae      	cmp	r6, r5
   c02b4:	d11a      	bne.n	c02ec <__gethex+0x2fc>
   c02b6:	2e01      	cmp	r6, #1
   c02b8:	d112      	bne.n	c02e0 <__gethex+0x2f0>
   c02ba:	9a04      	ldr	r2, [sp, #16]
   c02bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c02c0:	6013      	str	r3, [r2, #0]
   c02c2:	2301      	movs	r3, #1
   c02c4:	6123      	str	r3, [r4, #16]
   c02c6:	f8c9 3000 	str.w	r3, [r9]
   c02ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c02cc:	2762      	movs	r7, #98	; 0x62
   c02ce:	601c      	str	r4, [r3, #0]
   c02d0:	e723      	b.n	c011a <__gethex+0x12a>
   c02d2:	bf00      	nop
   c02d4:	000c29a4 	.word	0x000c29a4
   c02d8:	000c2931 	.word	0x000c2931
   c02dc:	000c2942 	.word	0x000c2942
   c02e0:	1e71      	subs	r1, r6, #1
   c02e2:	4620      	mov	r0, r4
   c02e4:	f000 fe42 	bl	c0f6c <__any_on>
   c02e8:	2800      	cmp	r0, #0
   c02ea:	d1e6      	bne.n	c02ba <__gethex+0x2ca>
   c02ec:	ee18 0a10 	vmov	r0, s16
   c02f0:	4621      	mov	r1, r4
   c02f2:	f000 f9db 	bl	c06ac <_Bfree>
   c02f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c02f8:	2300      	movs	r3, #0
   c02fa:	6013      	str	r3, [r2, #0]
   c02fc:	2750      	movs	r7, #80	; 0x50
   c02fe:	e70c      	b.n	c011a <__gethex+0x12a>
   c0300:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c0302:	2b00      	cmp	r3, #0
   c0304:	d1f2      	bne.n	c02ec <__gethex+0x2fc>
   c0306:	e7d8      	b.n	c02ba <__gethex+0x2ca>
   c0308:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c030a:	2b00      	cmp	r3, #0
   c030c:	d1d5      	bne.n	c02ba <__gethex+0x2ca>
   c030e:	e7ed      	b.n	c02ec <__gethex+0x2fc>
   c0310:	1e6f      	subs	r7, r5, #1
   c0312:	f1ba 0f00 	cmp.w	sl, #0
   c0316:	d131      	bne.n	c037c <__gethex+0x38c>
   c0318:	b127      	cbz	r7, c0324 <__gethex+0x334>
   c031a:	4639      	mov	r1, r7
   c031c:	4620      	mov	r0, r4
   c031e:	f000 fe25 	bl	c0f6c <__any_on>
   c0322:	4682      	mov	sl, r0
   c0324:	117b      	asrs	r3, r7, #5
   c0326:	2101      	movs	r1, #1
   c0328:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   c032c:	f007 071f 	and.w	r7, r7, #31
   c0330:	fa01 f707 	lsl.w	r7, r1, r7
   c0334:	421f      	tst	r7, r3
   c0336:	4629      	mov	r1, r5
   c0338:	4620      	mov	r0, r4
   c033a:	bf18      	it	ne
   c033c:	f04a 0a02 	orrne.w	sl, sl, #2
   c0340:	1b76      	subs	r6, r6, r5
   c0342:	f7ff fded 	bl	bff20 <rshift>
   c0346:	f8d8 5004 	ldr.w	r5, [r8, #4]
   c034a:	2702      	movs	r7, #2
   c034c:	f1ba 0f00 	cmp.w	sl, #0
   c0350:	d048      	beq.n	c03e4 <__gethex+0x3f4>
   c0352:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c0356:	2b02      	cmp	r3, #2
   c0358:	d015      	beq.n	c0386 <__gethex+0x396>
   c035a:	2b03      	cmp	r3, #3
   c035c:	d017      	beq.n	c038e <__gethex+0x39e>
   c035e:	2b01      	cmp	r3, #1
   c0360:	d109      	bne.n	c0376 <__gethex+0x386>
   c0362:	f01a 0f02 	tst.w	sl, #2
   c0366:	d006      	beq.n	c0376 <__gethex+0x386>
   c0368:	f8d9 0000 	ldr.w	r0, [r9]
   c036c:	ea4a 0a00 	orr.w	sl, sl, r0
   c0370:	f01a 0f01 	tst.w	sl, #1
   c0374:	d10e      	bne.n	c0394 <__gethex+0x3a4>
   c0376:	f047 0710 	orr.w	r7, r7, #16
   c037a:	e033      	b.n	c03e4 <__gethex+0x3f4>
   c037c:	f04f 0a01 	mov.w	sl, #1
   c0380:	e7d0      	b.n	c0324 <__gethex+0x334>
   c0382:	2701      	movs	r7, #1
   c0384:	e7e2      	b.n	c034c <__gethex+0x35c>
   c0386:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c0388:	f1c3 0301 	rsb	r3, r3, #1
   c038c:	9315      	str	r3, [sp, #84]	; 0x54
   c038e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c0390:	2b00      	cmp	r3, #0
   c0392:	d0f0      	beq.n	c0376 <__gethex+0x386>
   c0394:	f8d4 b010 	ldr.w	fp, [r4, #16]
   c0398:	f104 0314 	add.w	r3, r4, #20
   c039c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   c03a0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   c03a4:	f04f 0c00 	mov.w	ip, #0
   c03a8:	4618      	mov	r0, r3
   c03aa:	f853 2b04 	ldr.w	r2, [r3], #4
   c03ae:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   c03b2:	d01c      	beq.n	c03ee <__gethex+0x3fe>
   c03b4:	3201      	adds	r2, #1
   c03b6:	6002      	str	r2, [r0, #0]
   c03b8:	2f02      	cmp	r7, #2
   c03ba:	f104 0314 	add.w	r3, r4, #20
   c03be:	d13f      	bne.n	c0440 <__gethex+0x450>
   c03c0:	f8d8 2000 	ldr.w	r2, [r8]
   c03c4:	3a01      	subs	r2, #1
   c03c6:	42b2      	cmp	r2, r6
   c03c8:	d10a      	bne.n	c03e0 <__gethex+0x3f0>
   c03ca:	1171      	asrs	r1, r6, #5
   c03cc:	2201      	movs	r2, #1
   c03ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   c03d2:	f006 061f 	and.w	r6, r6, #31
   c03d6:	fa02 f606 	lsl.w	r6, r2, r6
   c03da:	421e      	tst	r6, r3
   c03dc:	bf18      	it	ne
   c03de:	4617      	movne	r7, r2
   c03e0:	f047 0720 	orr.w	r7, r7, #32
   c03e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c03e6:	601c      	str	r4, [r3, #0]
   c03e8:	9b04      	ldr	r3, [sp, #16]
   c03ea:	601d      	str	r5, [r3, #0]
   c03ec:	e695      	b.n	c011a <__gethex+0x12a>
   c03ee:	4299      	cmp	r1, r3
   c03f0:	f843 cc04 	str.w	ip, [r3, #-4]
   c03f4:	d8d8      	bhi.n	c03a8 <__gethex+0x3b8>
   c03f6:	68a3      	ldr	r3, [r4, #8]
   c03f8:	459b      	cmp	fp, r3
   c03fa:	db19      	blt.n	c0430 <__gethex+0x440>
   c03fc:	6861      	ldr	r1, [r4, #4]
   c03fe:	ee18 0a10 	vmov	r0, s16
   c0402:	3101      	adds	r1, #1
   c0404:	f000 f912 	bl	c062c <_Balloc>
   c0408:	4681      	mov	r9, r0
   c040a:	b918      	cbnz	r0, c0414 <__gethex+0x424>
   c040c:	4b1a      	ldr	r3, [pc, #104]	; (c0478 <__gethex+0x488>)
   c040e:	4602      	mov	r2, r0
   c0410:	2184      	movs	r1, #132	; 0x84
   c0412:	e6a8      	b.n	c0166 <__gethex+0x176>
   c0414:	6922      	ldr	r2, [r4, #16]
   c0416:	3202      	adds	r2, #2
   c0418:	f104 010c 	add.w	r1, r4, #12
   c041c:	0092      	lsls	r2, r2, #2
   c041e:	300c      	adds	r0, #12
   c0420:	f7fe fd49 	bl	beeb6 <memcpy>
   c0424:	4621      	mov	r1, r4
   c0426:	ee18 0a10 	vmov	r0, s16
   c042a:	f000 f93f 	bl	c06ac <_Bfree>
   c042e:	464c      	mov	r4, r9
   c0430:	6923      	ldr	r3, [r4, #16]
   c0432:	1c5a      	adds	r2, r3, #1
   c0434:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c0438:	6122      	str	r2, [r4, #16]
   c043a:	2201      	movs	r2, #1
   c043c:	615a      	str	r2, [r3, #20]
   c043e:	e7bb      	b.n	c03b8 <__gethex+0x3c8>
   c0440:	6922      	ldr	r2, [r4, #16]
   c0442:	455a      	cmp	r2, fp
   c0444:	dd0b      	ble.n	c045e <__gethex+0x46e>
   c0446:	2101      	movs	r1, #1
   c0448:	4620      	mov	r0, r4
   c044a:	f7ff fd69 	bl	bff20 <rshift>
   c044e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c0452:	3501      	adds	r5, #1
   c0454:	42ab      	cmp	r3, r5
   c0456:	f6ff aed0 	blt.w	c01fa <__gethex+0x20a>
   c045a:	2701      	movs	r7, #1
   c045c:	e7c0      	b.n	c03e0 <__gethex+0x3f0>
   c045e:	f016 061f 	ands.w	r6, r6, #31
   c0462:	d0fa      	beq.n	c045a <__gethex+0x46a>
   c0464:	4453      	add	r3, sl
   c0466:	f1c6 0620 	rsb	r6, r6, #32
   c046a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c046e:	f000 f9cf 	bl	c0810 <__hi0bits>
   c0472:	42b0      	cmp	r0, r6
   c0474:	dbe7      	blt.n	c0446 <__gethex+0x456>
   c0476:	e7f0      	b.n	c045a <__gethex+0x46a>
   c0478:	000c2931 	.word	0x000c2931

000c047c <L_shift>:
   c047c:	f1c2 0208 	rsb	r2, r2, #8
   c0480:	0092      	lsls	r2, r2, #2
   c0482:	b570      	push	{r4, r5, r6, lr}
   c0484:	f1c2 0620 	rsb	r6, r2, #32
   c0488:	6843      	ldr	r3, [r0, #4]
   c048a:	6804      	ldr	r4, [r0, #0]
   c048c:	fa03 f506 	lsl.w	r5, r3, r6
   c0490:	432c      	orrs	r4, r5
   c0492:	40d3      	lsrs	r3, r2
   c0494:	6004      	str	r4, [r0, #0]
   c0496:	f840 3f04 	str.w	r3, [r0, #4]!
   c049a:	4288      	cmp	r0, r1
   c049c:	d3f4      	bcc.n	c0488 <L_shift+0xc>
   c049e:	bd70      	pop	{r4, r5, r6, pc}

000c04a0 <__match>:
   c04a0:	b530      	push	{r4, r5, lr}
   c04a2:	6803      	ldr	r3, [r0, #0]
   c04a4:	3301      	adds	r3, #1
   c04a6:	f811 4b01 	ldrb.w	r4, [r1], #1
   c04aa:	b914      	cbnz	r4, c04b2 <__match+0x12>
   c04ac:	6003      	str	r3, [r0, #0]
   c04ae:	2001      	movs	r0, #1
   c04b0:	bd30      	pop	{r4, r5, pc}
   c04b2:	f813 2b01 	ldrb.w	r2, [r3], #1
   c04b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c04ba:	2d19      	cmp	r5, #25
   c04bc:	bf98      	it	ls
   c04be:	3220      	addls	r2, #32
   c04c0:	42a2      	cmp	r2, r4
   c04c2:	d0f0      	beq.n	c04a6 <__match+0x6>
   c04c4:	2000      	movs	r0, #0
   c04c6:	e7f3      	b.n	c04b0 <__match+0x10>

000c04c8 <__hexnan>:
   c04c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c04cc:	680b      	ldr	r3, [r1, #0]
   c04ce:	115e      	asrs	r6, r3, #5
   c04d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c04d4:	f013 031f 	ands.w	r3, r3, #31
   c04d8:	b087      	sub	sp, #28
   c04da:	bf18      	it	ne
   c04dc:	3604      	addne	r6, #4
   c04de:	2500      	movs	r5, #0
   c04e0:	1f37      	subs	r7, r6, #4
   c04e2:	4690      	mov	r8, r2
   c04e4:	6802      	ldr	r2, [r0, #0]
   c04e6:	9301      	str	r3, [sp, #4]
   c04e8:	4682      	mov	sl, r0
   c04ea:	f846 5c04 	str.w	r5, [r6, #-4]
   c04ee:	46b9      	mov	r9, r7
   c04f0:	463c      	mov	r4, r7
   c04f2:	9502      	str	r5, [sp, #8]
   c04f4:	46ab      	mov	fp, r5
   c04f6:	7851      	ldrb	r1, [r2, #1]
   c04f8:	1c53      	adds	r3, r2, #1
   c04fa:	9303      	str	r3, [sp, #12]
   c04fc:	b341      	cbz	r1, c0550 <__hexnan+0x88>
   c04fe:	4608      	mov	r0, r1
   c0500:	9205      	str	r2, [sp, #20]
   c0502:	9104      	str	r1, [sp, #16]
   c0504:	f7ff fd5e 	bl	bffc4 <__hexdig_fun>
   c0508:	2800      	cmp	r0, #0
   c050a:	d14f      	bne.n	c05ac <__hexnan+0xe4>
   c050c:	9904      	ldr	r1, [sp, #16]
   c050e:	9a05      	ldr	r2, [sp, #20]
   c0510:	2920      	cmp	r1, #32
   c0512:	d818      	bhi.n	c0546 <__hexnan+0x7e>
   c0514:	9b02      	ldr	r3, [sp, #8]
   c0516:	459b      	cmp	fp, r3
   c0518:	dd13      	ble.n	c0542 <__hexnan+0x7a>
   c051a:	454c      	cmp	r4, r9
   c051c:	d206      	bcs.n	c052c <__hexnan+0x64>
   c051e:	2d07      	cmp	r5, #7
   c0520:	dc04      	bgt.n	c052c <__hexnan+0x64>
   c0522:	462a      	mov	r2, r5
   c0524:	4649      	mov	r1, r9
   c0526:	4620      	mov	r0, r4
   c0528:	f7ff ffa8 	bl	c047c <L_shift>
   c052c:	4544      	cmp	r4, r8
   c052e:	d950      	bls.n	c05d2 <__hexnan+0x10a>
   c0530:	2300      	movs	r3, #0
   c0532:	f1a4 0904 	sub.w	r9, r4, #4
   c0536:	f844 3c04 	str.w	r3, [r4, #-4]
   c053a:	f8cd b008 	str.w	fp, [sp, #8]
   c053e:	464c      	mov	r4, r9
   c0540:	461d      	mov	r5, r3
   c0542:	9a03      	ldr	r2, [sp, #12]
   c0544:	e7d7      	b.n	c04f6 <__hexnan+0x2e>
   c0546:	2929      	cmp	r1, #41	; 0x29
   c0548:	d156      	bne.n	c05f8 <__hexnan+0x130>
   c054a:	3202      	adds	r2, #2
   c054c:	f8ca 2000 	str.w	r2, [sl]
   c0550:	f1bb 0f00 	cmp.w	fp, #0
   c0554:	d050      	beq.n	c05f8 <__hexnan+0x130>
   c0556:	454c      	cmp	r4, r9
   c0558:	d206      	bcs.n	c0568 <__hexnan+0xa0>
   c055a:	2d07      	cmp	r5, #7
   c055c:	dc04      	bgt.n	c0568 <__hexnan+0xa0>
   c055e:	462a      	mov	r2, r5
   c0560:	4649      	mov	r1, r9
   c0562:	4620      	mov	r0, r4
   c0564:	f7ff ff8a 	bl	c047c <L_shift>
   c0568:	4544      	cmp	r4, r8
   c056a:	d934      	bls.n	c05d6 <__hexnan+0x10e>
   c056c:	f1a8 0204 	sub.w	r2, r8, #4
   c0570:	4623      	mov	r3, r4
   c0572:	f853 1b04 	ldr.w	r1, [r3], #4
   c0576:	f842 1f04 	str.w	r1, [r2, #4]!
   c057a:	429f      	cmp	r7, r3
   c057c:	d2f9      	bcs.n	c0572 <__hexnan+0xaa>
   c057e:	1b3b      	subs	r3, r7, r4
   c0580:	f023 0303 	bic.w	r3, r3, #3
   c0584:	3304      	adds	r3, #4
   c0586:	3401      	adds	r4, #1
   c0588:	3e03      	subs	r6, #3
   c058a:	42b4      	cmp	r4, r6
   c058c:	bf88      	it	hi
   c058e:	2304      	movhi	r3, #4
   c0590:	4443      	add	r3, r8
   c0592:	2200      	movs	r2, #0
   c0594:	f843 2b04 	str.w	r2, [r3], #4
   c0598:	429f      	cmp	r7, r3
   c059a:	d2fb      	bcs.n	c0594 <__hexnan+0xcc>
   c059c:	683b      	ldr	r3, [r7, #0]
   c059e:	b91b      	cbnz	r3, c05a8 <__hexnan+0xe0>
   c05a0:	4547      	cmp	r7, r8
   c05a2:	d127      	bne.n	c05f4 <__hexnan+0x12c>
   c05a4:	2301      	movs	r3, #1
   c05a6:	603b      	str	r3, [r7, #0]
   c05a8:	2005      	movs	r0, #5
   c05aa:	e026      	b.n	c05fa <__hexnan+0x132>
   c05ac:	3501      	adds	r5, #1
   c05ae:	2d08      	cmp	r5, #8
   c05b0:	f10b 0b01 	add.w	fp, fp, #1
   c05b4:	dd06      	ble.n	c05c4 <__hexnan+0xfc>
   c05b6:	4544      	cmp	r4, r8
   c05b8:	d9c3      	bls.n	c0542 <__hexnan+0x7a>
   c05ba:	2300      	movs	r3, #0
   c05bc:	f844 3c04 	str.w	r3, [r4, #-4]
   c05c0:	2501      	movs	r5, #1
   c05c2:	3c04      	subs	r4, #4
   c05c4:	6822      	ldr	r2, [r4, #0]
   c05c6:	f000 000f 	and.w	r0, r0, #15
   c05ca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c05ce:	6022      	str	r2, [r4, #0]
   c05d0:	e7b7      	b.n	c0542 <__hexnan+0x7a>
   c05d2:	2508      	movs	r5, #8
   c05d4:	e7b5      	b.n	c0542 <__hexnan+0x7a>
   c05d6:	9b01      	ldr	r3, [sp, #4]
   c05d8:	2b00      	cmp	r3, #0
   c05da:	d0df      	beq.n	c059c <__hexnan+0xd4>
   c05dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c05e0:	f1c3 0320 	rsb	r3, r3, #32
   c05e4:	fa22 f303 	lsr.w	r3, r2, r3
   c05e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c05ec:	401a      	ands	r2, r3
   c05ee:	f846 2c04 	str.w	r2, [r6, #-4]
   c05f2:	e7d3      	b.n	c059c <__hexnan+0xd4>
   c05f4:	3f04      	subs	r7, #4
   c05f6:	e7d1      	b.n	c059c <__hexnan+0xd4>
   c05f8:	2004      	movs	r0, #4
   c05fa:	b007      	add	sp, #28
   c05fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c0600 <__retarget_lock_acquire_recursive>:
   c0600:	4770      	bx	lr

000c0602 <__retarget_lock_release>:
   c0602:	4770      	bx	lr

000c0604 <__retarget_lock_release_recursive>:
   c0604:	4770      	bx	lr

000c0606 <__ascii_mbtowc>:
   c0606:	b082      	sub	sp, #8
   c0608:	b901      	cbnz	r1, c060c <__ascii_mbtowc+0x6>
   c060a:	a901      	add	r1, sp, #4
   c060c:	b142      	cbz	r2, c0620 <__ascii_mbtowc+0x1a>
   c060e:	b14b      	cbz	r3, c0624 <__ascii_mbtowc+0x1e>
   c0610:	7813      	ldrb	r3, [r2, #0]
   c0612:	600b      	str	r3, [r1, #0]
   c0614:	7812      	ldrb	r2, [r2, #0]
   c0616:	1e10      	subs	r0, r2, #0
   c0618:	bf18      	it	ne
   c061a:	2001      	movne	r0, #1
   c061c:	b002      	add	sp, #8
   c061e:	4770      	bx	lr
   c0620:	4610      	mov	r0, r2
   c0622:	e7fb      	b.n	c061c <__ascii_mbtowc+0x16>
   c0624:	f06f 0001 	mvn.w	r0, #1
   c0628:	e7f8      	b.n	c061c <__ascii_mbtowc+0x16>
	...

000c062c <_Balloc>:
   c062c:	b570      	push	{r4, r5, r6, lr}
   c062e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c0630:	4604      	mov	r4, r0
   c0632:	460d      	mov	r5, r1
   c0634:	b976      	cbnz	r6, c0654 <_Balloc+0x28>
   c0636:	2010      	movs	r0, #16
   c0638:	f7f9 fed6 	bl	ba3e8 <malloc>
   c063c:	4602      	mov	r2, r0
   c063e:	6260      	str	r0, [r4, #36]	; 0x24
   c0640:	b920      	cbnz	r0, c064c <_Balloc+0x20>
   c0642:	4b18      	ldr	r3, [pc, #96]	; (c06a4 <_Balloc+0x78>)
   c0644:	4818      	ldr	r0, [pc, #96]	; (c06a8 <_Balloc+0x7c>)
   c0646:	2166      	movs	r1, #102	; 0x66
   c0648:	f7f9 ff1e 	bl	ba488 <__assert_func>
   c064c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c0650:	6006      	str	r6, [r0, #0]
   c0652:	60c6      	str	r6, [r0, #12]
   c0654:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c0656:	68f3      	ldr	r3, [r6, #12]
   c0658:	b183      	cbz	r3, c067c <_Balloc+0x50>
   c065a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c065c:	68db      	ldr	r3, [r3, #12]
   c065e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c0662:	b9b8      	cbnz	r0, c0694 <_Balloc+0x68>
   c0664:	2101      	movs	r1, #1
   c0666:	fa01 f605 	lsl.w	r6, r1, r5
   c066a:	1d72      	adds	r2, r6, #5
   c066c:	0092      	lsls	r2, r2, #2
   c066e:	4620      	mov	r0, r4
   c0670:	f000 fc9d 	bl	c0fae <_calloc_r>
   c0674:	b160      	cbz	r0, c0690 <_Balloc+0x64>
   c0676:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c067a:	e00e      	b.n	c069a <_Balloc+0x6e>
   c067c:	2221      	movs	r2, #33	; 0x21
   c067e:	2104      	movs	r1, #4
   c0680:	4620      	mov	r0, r4
   c0682:	f000 fc94 	bl	c0fae <_calloc_r>
   c0686:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c0688:	60f0      	str	r0, [r6, #12]
   c068a:	68db      	ldr	r3, [r3, #12]
   c068c:	2b00      	cmp	r3, #0
   c068e:	d1e4      	bne.n	c065a <_Balloc+0x2e>
   c0690:	2000      	movs	r0, #0
   c0692:	bd70      	pop	{r4, r5, r6, pc}
   c0694:	6802      	ldr	r2, [r0, #0]
   c0696:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c069a:	2300      	movs	r3, #0
   c069c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c06a0:	e7f7      	b.n	c0692 <_Balloc+0x66>
   c06a2:	bf00      	nop
   c06a4:	000c275d 	.word	0x000c275d
   c06a8:	000c29b8 	.word	0x000c29b8

000c06ac <_Bfree>:
   c06ac:	b570      	push	{r4, r5, r6, lr}
   c06ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c06b0:	4605      	mov	r5, r0
   c06b2:	460c      	mov	r4, r1
   c06b4:	b976      	cbnz	r6, c06d4 <_Bfree+0x28>
   c06b6:	2010      	movs	r0, #16
   c06b8:	f7f9 fe96 	bl	ba3e8 <malloc>
   c06bc:	4602      	mov	r2, r0
   c06be:	6268      	str	r0, [r5, #36]	; 0x24
   c06c0:	b920      	cbnz	r0, c06cc <_Bfree+0x20>
   c06c2:	4b09      	ldr	r3, [pc, #36]	; (c06e8 <_Bfree+0x3c>)
   c06c4:	4809      	ldr	r0, [pc, #36]	; (c06ec <_Bfree+0x40>)
   c06c6:	218a      	movs	r1, #138	; 0x8a
   c06c8:	f7f9 fede 	bl	ba488 <__assert_func>
   c06cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c06d0:	6006      	str	r6, [r0, #0]
   c06d2:	60c6      	str	r6, [r0, #12]
   c06d4:	b13c      	cbz	r4, c06e6 <_Bfree+0x3a>
   c06d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c06d8:	6862      	ldr	r2, [r4, #4]
   c06da:	68db      	ldr	r3, [r3, #12]
   c06dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c06e0:	6021      	str	r1, [r4, #0]
   c06e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c06e6:	bd70      	pop	{r4, r5, r6, pc}
   c06e8:	000c275d 	.word	0x000c275d
   c06ec:	000c29b8 	.word	0x000c29b8

000c06f0 <__multadd>:
   c06f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c06f4:	690d      	ldr	r5, [r1, #16]
   c06f6:	4607      	mov	r7, r0
   c06f8:	460c      	mov	r4, r1
   c06fa:	461e      	mov	r6, r3
   c06fc:	f101 0c14 	add.w	ip, r1, #20
   c0700:	2000      	movs	r0, #0
   c0702:	f8dc 3000 	ldr.w	r3, [ip]
   c0706:	b299      	uxth	r1, r3
   c0708:	fb02 6101 	mla	r1, r2, r1, r6
   c070c:	0c1e      	lsrs	r6, r3, #16
   c070e:	0c0b      	lsrs	r3, r1, #16
   c0710:	fb02 3306 	mla	r3, r2, r6, r3
   c0714:	b289      	uxth	r1, r1
   c0716:	3001      	adds	r0, #1
   c0718:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c071c:	4285      	cmp	r5, r0
   c071e:	f84c 1b04 	str.w	r1, [ip], #4
   c0722:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c0726:	dcec      	bgt.n	c0702 <__multadd+0x12>
   c0728:	b30e      	cbz	r6, c076e <__multadd+0x7e>
   c072a:	68a3      	ldr	r3, [r4, #8]
   c072c:	42ab      	cmp	r3, r5
   c072e:	dc19      	bgt.n	c0764 <__multadd+0x74>
   c0730:	6861      	ldr	r1, [r4, #4]
   c0732:	4638      	mov	r0, r7
   c0734:	3101      	adds	r1, #1
   c0736:	f7ff ff79 	bl	c062c <_Balloc>
   c073a:	4680      	mov	r8, r0
   c073c:	b928      	cbnz	r0, c074a <__multadd+0x5a>
   c073e:	4602      	mov	r2, r0
   c0740:	4b0c      	ldr	r3, [pc, #48]	; (c0774 <__multadd+0x84>)
   c0742:	480d      	ldr	r0, [pc, #52]	; (c0778 <__multadd+0x88>)
   c0744:	21b5      	movs	r1, #181	; 0xb5
   c0746:	f7f9 fe9f 	bl	ba488 <__assert_func>
   c074a:	6922      	ldr	r2, [r4, #16]
   c074c:	3202      	adds	r2, #2
   c074e:	f104 010c 	add.w	r1, r4, #12
   c0752:	0092      	lsls	r2, r2, #2
   c0754:	300c      	adds	r0, #12
   c0756:	f7fe fbae 	bl	beeb6 <memcpy>
   c075a:	4621      	mov	r1, r4
   c075c:	4638      	mov	r0, r7
   c075e:	f7ff ffa5 	bl	c06ac <_Bfree>
   c0762:	4644      	mov	r4, r8
   c0764:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c0768:	3501      	adds	r5, #1
   c076a:	615e      	str	r6, [r3, #20]
   c076c:	6125      	str	r5, [r4, #16]
   c076e:	4620      	mov	r0, r4
   c0770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c0774:	000c2931 	.word	0x000c2931
   c0778:	000c29b8 	.word	0x000c29b8

000c077c <__s2b>:
   c077c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c0780:	460c      	mov	r4, r1
   c0782:	4615      	mov	r5, r2
   c0784:	461f      	mov	r7, r3
   c0786:	2209      	movs	r2, #9
   c0788:	3308      	adds	r3, #8
   c078a:	4606      	mov	r6, r0
   c078c:	fb93 f3f2 	sdiv	r3, r3, r2
   c0790:	2100      	movs	r1, #0
   c0792:	2201      	movs	r2, #1
   c0794:	429a      	cmp	r2, r3
   c0796:	db09      	blt.n	c07ac <__s2b+0x30>
   c0798:	4630      	mov	r0, r6
   c079a:	f7ff ff47 	bl	c062c <_Balloc>
   c079e:	b940      	cbnz	r0, c07b2 <__s2b+0x36>
   c07a0:	4602      	mov	r2, r0
   c07a2:	4b19      	ldr	r3, [pc, #100]	; (c0808 <__s2b+0x8c>)
   c07a4:	4819      	ldr	r0, [pc, #100]	; (c080c <__s2b+0x90>)
   c07a6:	21ce      	movs	r1, #206	; 0xce
   c07a8:	f7f9 fe6e 	bl	ba488 <__assert_func>
   c07ac:	0052      	lsls	r2, r2, #1
   c07ae:	3101      	adds	r1, #1
   c07b0:	e7f0      	b.n	c0794 <__s2b+0x18>
   c07b2:	9b08      	ldr	r3, [sp, #32]
   c07b4:	6143      	str	r3, [r0, #20]
   c07b6:	2d09      	cmp	r5, #9
   c07b8:	f04f 0301 	mov.w	r3, #1
   c07bc:	6103      	str	r3, [r0, #16]
   c07be:	dd16      	ble.n	c07ee <__s2b+0x72>
   c07c0:	f104 0909 	add.w	r9, r4, #9
   c07c4:	46c8      	mov	r8, r9
   c07c6:	442c      	add	r4, r5
   c07c8:	f818 3b01 	ldrb.w	r3, [r8], #1
   c07cc:	4601      	mov	r1, r0
   c07ce:	3b30      	subs	r3, #48	; 0x30
   c07d0:	220a      	movs	r2, #10
   c07d2:	4630      	mov	r0, r6
   c07d4:	f7ff ff8c 	bl	c06f0 <__multadd>
   c07d8:	45a0      	cmp	r8, r4
   c07da:	d1f5      	bne.n	c07c8 <__s2b+0x4c>
   c07dc:	f1a5 0408 	sub.w	r4, r5, #8
   c07e0:	444c      	add	r4, r9
   c07e2:	1b2d      	subs	r5, r5, r4
   c07e4:	1963      	adds	r3, r4, r5
   c07e6:	42bb      	cmp	r3, r7
   c07e8:	db04      	blt.n	c07f4 <__s2b+0x78>
   c07ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c07ee:	340a      	adds	r4, #10
   c07f0:	2509      	movs	r5, #9
   c07f2:	e7f6      	b.n	c07e2 <__s2b+0x66>
   c07f4:	f814 3b01 	ldrb.w	r3, [r4], #1
   c07f8:	4601      	mov	r1, r0
   c07fa:	3b30      	subs	r3, #48	; 0x30
   c07fc:	220a      	movs	r2, #10
   c07fe:	4630      	mov	r0, r6
   c0800:	f7ff ff76 	bl	c06f0 <__multadd>
   c0804:	e7ee      	b.n	c07e4 <__s2b+0x68>
   c0806:	bf00      	nop
   c0808:	000c2931 	.word	0x000c2931
   c080c:	000c29b8 	.word	0x000c29b8

000c0810 <__hi0bits>:
   c0810:	0c03      	lsrs	r3, r0, #16
   c0812:	041b      	lsls	r3, r3, #16
   c0814:	b9d3      	cbnz	r3, c084c <__hi0bits+0x3c>
   c0816:	0400      	lsls	r0, r0, #16
   c0818:	2310      	movs	r3, #16
   c081a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c081e:	bf04      	itt	eq
   c0820:	0200      	lsleq	r0, r0, #8
   c0822:	3308      	addeq	r3, #8
   c0824:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c0828:	bf04      	itt	eq
   c082a:	0100      	lsleq	r0, r0, #4
   c082c:	3304      	addeq	r3, #4
   c082e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c0832:	bf04      	itt	eq
   c0834:	0080      	lsleq	r0, r0, #2
   c0836:	3302      	addeq	r3, #2
   c0838:	2800      	cmp	r0, #0
   c083a:	db05      	blt.n	c0848 <__hi0bits+0x38>
   c083c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c0840:	f103 0301 	add.w	r3, r3, #1
   c0844:	bf08      	it	eq
   c0846:	2320      	moveq	r3, #32
   c0848:	4618      	mov	r0, r3
   c084a:	4770      	bx	lr
   c084c:	2300      	movs	r3, #0
   c084e:	e7e4      	b.n	c081a <__hi0bits+0xa>

000c0850 <__lo0bits>:
   c0850:	6803      	ldr	r3, [r0, #0]
   c0852:	f013 0207 	ands.w	r2, r3, #7
   c0856:	4601      	mov	r1, r0
   c0858:	d00b      	beq.n	c0872 <__lo0bits+0x22>
   c085a:	07da      	lsls	r2, r3, #31
   c085c:	d423      	bmi.n	c08a6 <__lo0bits+0x56>
   c085e:	0798      	lsls	r0, r3, #30
   c0860:	bf49      	itett	mi
   c0862:	085b      	lsrmi	r3, r3, #1
   c0864:	089b      	lsrpl	r3, r3, #2
   c0866:	2001      	movmi	r0, #1
   c0868:	600b      	strmi	r3, [r1, #0]
   c086a:	bf5c      	itt	pl
   c086c:	600b      	strpl	r3, [r1, #0]
   c086e:	2002      	movpl	r0, #2
   c0870:	4770      	bx	lr
   c0872:	b298      	uxth	r0, r3
   c0874:	b9a8      	cbnz	r0, c08a2 <__lo0bits+0x52>
   c0876:	0c1b      	lsrs	r3, r3, #16
   c0878:	2010      	movs	r0, #16
   c087a:	b2da      	uxtb	r2, r3
   c087c:	b90a      	cbnz	r2, c0882 <__lo0bits+0x32>
   c087e:	3008      	adds	r0, #8
   c0880:	0a1b      	lsrs	r3, r3, #8
   c0882:	071a      	lsls	r2, r3, #28
   c0884:	bf04      	itt	eq
   c0886:	091b      	lsreq	r3, r3, #4
   c0888:	3004      	addeq	r0, #4
   c088a:	079a      	lsls	r2, r3, #30
   c088c:	bf04      	itt	eq
   c088e:	089b      	lsreq	r3, r3, #2
   c0890:	3002      	addeq	r0, #2
   c0892:	07da      	lsls	r2, r3, #31
   c0894:	d403      	bmi.n	c089e <__lo0bits+0x4e>
   c0896:	085b      	lsrs	r3, r3, #1
   c0898:	f100 0001 	add.w	r0, r0, #1
   c089c:	d005      	beq.n	c08aa <__lo0bits+0x5a>
   c089e:	600b      	str	r3, [r1, #0]
   c08a0:	4770      	bx	lr
   c08a2:	4610      	mov	r0, r2
   c08a4:	e7e9      	b.n	c087a <__lo0bits+0x2a>
   c08a6:	2000      	movs	r0, #0
   c08a8:	4770      	bx	lr
   c08aa:	2020      	movs	r0, #32
   c08ac:	4770      	bx	lr
	...

000c08b0 <__i2b>:
   c08b0:	b510      	push	{r4, lr}
   c08b2:	460c      	mov	r4, r1
   c08b4:	2101      	movs	r1, #1
   c08b6:	f7ff feb9 	bl	c062c <_Balloc>
   c08ba:	4602      	mov	r2, r0
   c08bc:	b928      	cbnz	r0, c08ca <__i2b+0x1a>
   c08be:	4b05      	ldr	r3, [pc, #20]	; (c08d4 <__i2b+0x24>)
   c08c0:	4805      	ldr	r0, [pc, #20]	; (c08d8 <__i2b+0x28>)
   c08c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c08c6:	f7f9 fddf 	bl	ba488 <__assert_func>
   c08ca:	2301      	movs	r3, #1
   c08cc:	6144      	str	r4, [r0, #20]
   c08ce:	6103      	str	r3, [r0, #16]
   c08d0:	bd10      	pop	{r4, pc}
   c08d2:	bf00      	nop
   c08d4:	000c2931 	.word	0x000c2931
   c08d8:	000c29b8 	.word	0x000c29b8

000c08dc <__multiply>:
   c08dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c08e0:	4691      	mov	r9, r2
   c08e2:	690a      	ldr	r2, [r1, #16]
   c08e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c08e8:	429a      	cmp	r2, r3
   c08ea:	bfb8      	it	lt
   c08ec:	460b      	movlt	r3, r1
   c08ee:	460c      	mov	r4, r1
   c08f0:	bfbc      	itt	lt
   c08f2:	464c      	movlt	r4, r9
   c08f4:	4699      	movlt	r9, r3
   c08f6:	6927      	ldr	r7, [r4, #16]
   c08f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c08fc:	68a3      	ldr	r3, [r4, #8]
   c08fe:	6861      	ldr	r1, [r4, #4]
   c0900:	eb07 060a 	add.w	r6, r7, sl
   c0904:	42b3      	cmp	r3, r6
   c0906:	b085      	sub	sp, #20
   c0908:	bfb8      	it	lt
   c090a:	3101      	addlt	r1, #1
   c090c:	f7ff fe8e 	bl	c062c <_Balloc>
   c0910:	b930      	cbnz	r0, c0920 <__multiply+0x44>
   c0912:	4602      	mov	r2, r0
   c0914:	4b44      	ldr	r3, [pc, #272]	; (c0a28 <__multiply+0x14c>)
   c0916:	4845      	ldr	r0, [pc, #276]	; (c0a2c <__multiply+0x150>)
   c0918:	f240 115d 	movw	r1, #349	; 0x15d
   c091c:	f7f9 fdb4 	bl	ba488 <__assert_func>
   c0920:	f100 0514 	add.w	r5, r0, #20
   c0924:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c0928:	462b      	mov	r3, r5
   c092a:	2200      	movs	r2, #0
   c092c:	4543      	cmp	r3, r8
   c092e:	d321      	bcc.n	c0974 <__multiply+0x98>
   c0930:	f104 0314 	add.w	r3, r4, #20
   c0934:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c0938:	f109 0314 	add.w	r3, r9, #20
   c093c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c0940:	9202      	str	r2, [sp, #8]
   c0942:	1b3a      	subs	r2, r7, r4
   c0944:	3a15      	subs	r2, #21
   c0946:	f022 0203 	bic.w	r2, r2, #3
   c094a:	3204      	adds	r2, #4
   c094c:	f104 0115 	add.w	r1, r4, #21
   c0950:	428f      	cmp	r7, r1
   c0952:	bf38      	it	cc
   c0954:	2204      	movcc	r2, #4
   c0956:	9201      	str	r2, [sp, #4]
   c0958:	9a02      	ldr	r2, [sp, #8]
   c095a:	9303      	str	r3, [sp, #12]
   c095c:	429a      	cmp	r2, r3
   c095e:	d80c      	bhi.n	c097a <__multiply+0x9e>
   c0960:	2e00      	cmp	r6, #0
   c0962:	dd03      	ble.n	c096c <__multiply+0x90>
   c0964:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c0968:	2b00      	cmp	r3, #0
   c096a:	d05a      	beq.n	c0a22 <__multiply+0x146>
   c096c:	6106      	str	r6, [r0, #16]
   c096e:	b005      	add	sp, #20
   c0970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c0974:	f843 2b04 	str.w	r2, [r3], #4
   c0978:	e7d8      	b.n	c092c <__multiply+0x50>
   c097a:	f8b3 a000 	ldrh.w	sl, [r3]
   c097e:	f1ba 0f00 	cmp.w	sl, #0
   c0982:	d024      	beq.n	c09ce <__multiply+0xf2>
   c0984:	f104 0e14 	add.w	lr, r4, #20
   c0988:	46a9      	mov	r9, r5
   c098a:	f04f 0c00 	mov.w	ip, #0
   c098e:	f85e 2b04 	ldr.w	r2, [lr], #4
   c0992:	f8d9 1000 	ldr.w	r1, [r9]
   c0996:	fa1f fb82 	uxth.w	fp, r2
   c099a:	b289      	uxth	r1, r1
   c099c:	fb0a 110b 	mla	r1, sl, fp, r1
   c09a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c09a4:	f8d9 2000 	ldr.w	r2, [r9]
   c09a8:	4461      	add	r1, ip
   c09aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c09ae:	fb0a c20b 	mla	r2, sl, fp, ip
   c09b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c09b6:	b289      	uxth	r1, r1
   c09b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c09bc:	4577      	cmp	r7, lr
   c09be:	f849 1b04 	str.w	r1, [r9], #4
   c09c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c09c6:	d8e2      	bhi.n	c098e <__multiply+0xb2>
   c09c8:	9a01      	ldr	r2, [sp, #4]
   c09ca:	f845 c002 	str.w	ip, [r5, r2]
   c09ce:	9a03      	ldr	r2, [sp, #12]
   c09d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c09d4:	3304      	adds	r3, #4
   c09d6:	f1b9 0f00 	cmp.w	r9, #0
   c09da:	d020      	beq.n	c0a1e <__multiply+0x142>
   c09dc:	6829      	ldr	r1, [r5, #0]
   c09de:	f104 0c14 	add.w	ip, r4, #20
   c09e2:	46ae      	mov	lr, r5
   c09e4:	f04f 0a00 	mov.w	sl, #0
   c09e8:	f8bc b000 	ldrh.w	fp, [ip]
   c09ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c09f0:	fb09 220b 	mla	r2, r9, fp, r2
   c09f4:	4492      	add	sl, r2
   c09f6:	b289      	uxth	r1, r1
   c09f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c09fc:	f84e 1b04 	str.w	r1, [lr], #4
   c0a00:	f85c 2b04 	ldr.w	r2, [ip], #4
   c0a04:	f8be 1000 	ldrh.w	r1, [lr]
   c0a08:	0c12      	lsrs	r2, r2, #16
   c0a0a:	fb09 1102 	mla	r1, r9, r2, r1
   c0a0e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c0a12:	4567      	cmp	r7, ip
   c0a14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c0a18:	d8e6      	bhi.n	c09e8 <__multiply+0x10c>
   c0a1a:	9a01      	ldr	r2, [sp, #4]
   c0a1c:	50a9      	str	r1, [r5, r2]
   c0a1e:	3504      	adds	r5, #4
   c0a20:	e79a      	b.n	c0958 <__multiply+0x7c>
   c0a22:	3e01      	subs	r6, #1
   c0a24:	e79c      	b.n	c0960 <__multiply+0x84>
   c0a26:	bf00      	nop
   c0a28:	000c2931 	.word	0x000c2931
   c0a2c:	000c29b8 	.word	0x000c29b8

000c0a30 <__pow5mult>:
   c0a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c0a34:	4615      	mov	r5, r2
   c0a36:	f012 0203 	ands.w	r2, r2, #3
   c0a3a:	4606      	mov	r6, r0
   c0a3c:	460f      	mov	r7, r1
   c0a3e:	d007      	beq.n	c0a50 <__pow5mult+0x20>
   c0a40:	4c25      	ldr	r4, [pc, #148]	; (c0ad8 <__pow5mult+0xa8>)
   c0a42:	3a01      	subs	r2, #1
   c0a44:	2300      	movs	r3, #0
   c0a46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c0a4a:	f7ff fe51 	bl	c06f0 <__multadd>
   c0a4e:	4607      	mov	r7, r0
   c0a50:	10ad      	asrs	r5, r5, #2
   c0a52:	d03d      	beq.n	c0ad0 <__pow5mult+0xa0>
   c0a54:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c0a56:	b97c      	cbnz	r4, c0a78 <__pow5mult+0x48>
   c0a58:	2010      	movs	r0, #16
   c0a5a:	f7f9 fcc5 	bl	ba3e8 <malloc>
   c0a5e:	4602      	mov	r2, r0
   c0a60:	6270      	str	r0, [r6, #36]	; 0x24
   c0a62:	b928      	cbnz	r0, c0a70 <__pow5mult+0x40>
   c0a64:	4b1d      	ldr	r3, [pc, #116]	; (c0adc <__pow5mult+0xac>)
   c0a66:	481e      	ldr	r0, [pc, #120]	; (c0ae0 <__pow5mult+0xb0>)
   c0a68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c0a6c:	f7f9 fd0c 	bl	ba488 <__assert_func>
   c0a70:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c0a74:	6004      	str	r4, [r0, #0]
   c0a76:	60c4      	str	r4, [r0, #12]
   c0a78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c0a7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c0a80:	b94c      	cbnz	r4, c0a96 <__pow5mult+0x66>
   c0a82:	f240 2171 	movw	r1, #625	; 0x271
   c0a86:	4630      	mov	r0, r6
   c0a88:	f7ff ff12 	bl	c08b0 <__i2b>
   c0a8c:	2300      	movs	r3, #0
   c0a8e:	f8c8 0008 	str.w	r0, [r8, #8]
   c0a92:	4604      	mov	r4, r0
   c0a94:	6003      	str	r3, [r0, #0]
   c0a96:	f04f 0900 	mov.w	r9, #0
   c0a9a:	07eb      	lsls	r3, r5, #31
   c0a9c:	d50a      	bpl.n	c0ab4 <__pow5mult+0x84>
   c0a9e:	4639      	mov	r1, r7
   c0aa0:	4622      	mov	r2, r4
   c0aa2:	4630      	mov	r0, r6
   c0aa4:	f7ff ff1a 	bl	c08dc <__multiply>
   c0aa8:	4639      	mov	r1, r7
   c0aaa:	4680      	mov	r8, r0
   c0aac:	4630      	mov	r0, r6
   c0aae:	f7ff fdfd 	bl	c06ac <_Bfree>
   c0ab2:	4647      	mov	r7, r8
   c0ab4:	106d      	asrs	r5, r5, #1
   c0ab6:	d00b      	beq.n	c0ad0 <__pow5mult+0xa0>
   c0ab8:	6820      	ldr	r0, [r4, #0]
   c0aba:	b938      	cbnz	r0, c0acc <__pow5mult+0x9c>
   c0abc:	4622      	mov	r2, r4
   c0abe:	4621      	mov	r1, r4
   c0ac0:	4630      	mov	r0, r6
   c0ac2:	f7ff ff0b 	bl	c08dc <__multiply>
   c0ac6:	6020      	str	r0, [r4, #0]
   c0ac8:	f8c0 9000 	str.w	r9, [r0]
   c0acc:	4604      	mov	r4, r0
   c0ace:	e7e4      	b.n	c0a9a <__pow5mult+0x6a>
   c0ad0:	4638      	mov	r0, r7
   c0ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c0ad6:	bf00      	nop
   c0ad8:	000c2b08 	.word	0x000c2b08
   c0adc:	000c275d 	.word	0x000c275d
   c0ae0:	000c29b8 	.word	0x000c29b8

000c0ae4 <__lshift>:
   c0ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c0ae8:	460c      	mov	r4, r1
   c0aea:	6849      	ldr	r1, [r1, #4]
   c0aec:	6923      	ldr	r3, [r4, #16]
   c0aee:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c0af2:	68a3      	ldr	r3, [r4, #8]
   c0af4:	4607      	mov	r7, r0
   c0af6:	4691      	mov	r9, r2
   c0af8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c0afc:	f108 0601 	add.w	r6, r8, #1
   c0b00:	42b3      	cmp	r3, r6
   c0b02:	db0b      	blt.n	c0b1c <__lshift+0x38>
   c0b04:	4638      	mov	r0, r7
   c0b06:	f7ff fd91 	bl	c062c <_Balloc>
   c0b0a:	4605      	mov	r5, r0
   c0b0c:	b948      	cbnz	r0, c0b22 <__lshift+0x3e>
   c0b0e:	4602      	mov	r2, r0
   c0b10:	4b2a      	ldr	r3, [pc, #168]	; (c0bbc <__lshift+0xd8>)
   c0b12:	482b      	ldr	r0, [pc, #172]	; (c0bc0 <__lshift+0xdc>)
   c0b14:	f240 11d9 	movw	r1, #473	; 0x1d9
   c0b18:	f7f9 fcb6 	bl	ba488 <__assert_func>
   c0b1c:	3101      	adds	r1, #1
   c0b1e:	005b      	lsls	r3, r3, #1
   c0b20:	e7ee      	b.n	c0b00 <__lshift+0x1c>
   c0b22:	2300      	movs	r3, #0
   c0b24:	f100 0114 	add.w	r1, r0, #20
   c0b28:	f100 0210 	add.w	r2, r0, #16
   c0b2c:	4618      	mov	r0, r3
   c0b2e:	4553      	cmp	r3, sl
   c0b30:	db37      	blt.n	c0ba2 <__lshift+0xbe>
   c0b32:	6920      	ldr	r0, [r4, #16]
   c0b34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c0b38:	f104 0314 	add.w	r3, r4, #20
   c0b3c:	f019 091f 	ands.w	r9, r9, #31
   c0b40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c0b44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c0b48:	d02f      	beq.n	c0baa <__lshift+0xc6>
   c0b4a:	f1c9 0e20 	rsb	lr, r9, #32
   c0b4e:	468a      	mov	sl, r1
   c0b50:	f04f 0c00 	mov.w	ip, #0
   c0b54:	681a      	ldr	r2, [r3, #0]
   c0b56:	fa02 f209 	lsl.w	r2, r2, r9
   c0b5a:	ea42 020c 	orr.w	r2, r2, ip
   c0b5e:	f84a 2b04 	str.w	r2, [sl], #4
   c0b62:	f853 2b04 	ldr.w	r2, [r3], #4
   c0b66:	4298      	cmp	r0, r3
   c0b68:	fa22 fc0e 	lsr.w	ip, r2, lr
   c0b6c:	d8f2      	bhi.n	c0b54 <__lshift+0x70>
   c0b6e:	1b03      	subs	r3, r0, r4
   c0b70:	3b15      	subs	r3, #21
   c0b72:	f023 0303 	bic.w	r3, r3, #3
   c0b76:	3304      	adds	r3, #4
   c0b78:	f104 0215 	add.w	r2, r4, #21
   c0b7c:	4290      	cmp	r0, r2
   c0b7e:	bf38      	it	cc
   c0b80:	2304      	movcc	r3, #4
   c0b82:	f841 c003 	str.w	ip, [r1, r3]
   c0b86:	f1bc 0f00 	cmp.w	ip, #0
   c0b8a:	d001      	beq.n	c0b90 <__lshift+0xac>
   c0b8c:	f108 0602 	add.w	r6, r8, #2
   c0b90:	3e01      	subs	r6, #1
   c0b92:	4638      	mov	r0, r7
   c0b94:	612e      	str	r6, [r5, #16]
   c0b96:	4621      	mov	r1, r4
   c0b98:	f7ff fd88 	bl	c06ac <_Bfree>
   c0b9c:	4628      	mov	r0, r5
   c0b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c0ba2:	f842 0f04 	str.w	r0, [r2, #4]!
   c0ba6:	3301      	adds	r3, #1
   c0ba8:	e7c1      	b.n	c0b2e <__lshift+0x4a>
   c0baa:	3904      	subs	r1, #4
   c0bac:	f853 2b04 	ldr.w	r2, [r3], #4
   c0bb0:	f841 2f04 	str.w	r2, [r1, #4]!
   c0bb4:	4298      	cmp	r0, r3
   c0bb6:	d8f9      	bhi.n	c0bac <__lshift+0xc8>
   c0bb8:	e7ea      	b.n	c0b90 <__lshift+0xac>
   c0bba:	bf00      	nop
   c0bbc:	000c2931 	.word	0x000c2931
   c0bc0:	000c29b8 	.word	0x000c29b8

000c0bc4 <__mcmp>:
   c0bc4:	b530      	push	{r4, r5, lr}
   c0bc6:	6902      	ldr	r2, [r0, #16]
   c0bc8:	690c      	ldr	r4, [r1, #16]
   c0bca:	1b12      	subs	r2, r2, r4
   c0bcc:	d10e      	bne.n	c0bec <__mcmp+0x28>
   c0bce:	f100 0314 	add.w	r3, r0, #20
   c0bd2:	3114      	adds	r1, #20
   c0bd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c0bd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c0bdc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c0be0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c0be4:	42a5      	cmp	r5, r4
   c0be6:	d003      	beq.n	c0bf0 <__mcmp+0x2c>
   c0be8:	d305      	bcc.n	c0bf6 <__mcmp+0x32>
   c0bea:	2201      	movs	r2, #1
   c0bec:	4610      	mov	r0, r2
   c0bee:	bd30      	pop	{r4, r5, pc}
   c0bf0:	4283      	cmp	r3, r0
   c0bf2:	d3f3      	bcc.n	c0bdc <__mcmp+0x18>
   c0bf4:	e7fa      	b.n	c0bec <__mcmp+0x28>
   c0bf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c0bfa:	e7f7      	b.n	c0bec <__mcmp+0x28>

000c0bfc <__mdiff>:
   c0bfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0c00:	460c      	mov	r4, r1
   c0c02:	4606      	mov	r6, r0
   c0c04:	4611      	mov	r1, r2
   c0c06:	4620      	mov	r0, r4
   c0c08:	4690      	mov	r8, r2
   c0c0a:	f7ff ffdb 	bl	c0bc4 <__mcmp>
   c0c0e:	1e05      	subs	r5, r0, #0
   c0c10:	d110      	bne.n	c0c34 <__mdiff+0x38>
   c0c12:	4629      	mov	r1, r5
   c0c14:	4630      	mov	r0, r6
   c0c16:	f7ff fd09 	bl	c062c <_Balloc>
   c0c1a:	b930      	cbnz	r0, c0c2a <__mdiff+0x2e>
   c0c1c:	4b3a      	ldr	r3, [pc, #232]	; (c0d08 <__mdiff+0x10c>)
   c0c1e:	4602      	mov	r2, r0
   c0c20:	f240 2132 	movw	r1, #562	; 0x232
   c0c24:	4839      	ldr	r0, [pc, #228]	; (c0d0c <__mdiff+0x110>)
   c0c26:	f7f9 fc2f 	bl	ba488 <__assert_func>
   c0c2a:	2301      	movs	r3, #1
   c0c2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c0c30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c0c34:	bfa4      	itt	ge
   c0c36:	4643      	movge	r3, r8
   c0c38:	46a0      	movge	r8, r4
   c0c3a:	4630      	mov	r0, r6
   c0c3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c0c40:	bfa6      	itte	ge
   c0c42:	461c      	movge	r4, r3
   c0c44:	2500      	movge	r5, #0
   c0c46:	2501      	movlt	r5, #1
   c0c48:	f7ff fcf0 	bl	c062c <_Balloc>
   c0c4c:	b920      	cbnz	r0, c0c58 <__mdiff+0x5c>
   c0c4e:	4b2e      	ldr	r3, [pc, #184]	; (c0d08 <__mdiff+0x10c>)
   c0c50:	4602      	mov	r2, r0
   c0c52:	f44f 7110 	mov.w	r1, #576	; 0x240
   c0c56:	e7e5      	b.n	c0c24 <__mdiff+0x28>
   c0c58:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c0c5c:	6926      	ldr	r6, [r4, #16]
   c0c5e:	60c5      	str	r5, [r0, #12]
   c0c60:	f104 0914 	add.w	r9, r4, #20
   c0c64:	f108 0514 	add.w	r5, r8, #20
   c0c68:	f100 0e14 	add.w	lr, r0, #20
   c0c6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c0c70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c0c74:	f108 0210 	add.w	r2, r8, #16
   c0c78:	46f2      	mov	sl, lr
   c0c7a:	2100      	movs	r1, #0
   c0c7c:	f859 3b04 	ldr.w	r3, [r9], #4
   c0c80:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c0c84:	fa1f f883 	uxth.w	r8, r3
   c0c88:	fa11 f18b 	uxtah	r1, r1, fp
   c0c8c:	0c1b      	lsrs	r3, r3, #16
   c0c8e:	eba1 0808 	sub.w	r8, r1, r8
   c0c92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c0c96:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c0c9a:	fa1f f888 	uxth.w	r8, r8
   c0c9e:	1419      	asrs	r1, r3, #16
   c0ca0:	454e      	cmp	r6, r9
   c0ca2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c0ca6:	f84a 3b04 	str.w	r3, [sl], #4
   c0caa:	d8e7      	bhi.n	c0c7c <__mdiff+0x80>
   c0cac:	1b33      	subs	r3, r6, r4
   c0cae:	3b15      	subs	r3, #21
   c0cb0:	f023 0303 	bic.w	r3, r3, #3
   c0cb4:	3304      	adds	r3, #4
   c0cb6:	3415      	adds	r4, #21
   c0cb8:	42a6      	cmp	r6, r4
   c0cba:	bf38      	it	cc
   c0cbc:	2304      	movcc	r3, #4
   c0cbe:	441d      	add	r5, r3
   c0cc0:	4473      	add	r3, lr
   c0cc2:	469e      	mov	lr, r3
   c0cc4:	462e      	mov	r6, r5
   c0cc6:	4566      	cmp	r6, ip
   c0cc8:	d30e      	bcc.n	c0ce8 <__mdiff+0xec>
   c0cca:	f10c 0203 	add.w	r2, ip, #3
   c0cce:	1b52      	subs	r2, r2, r5
   c0cd0:	f022 0203 	bic.w	r2, r2, #3
   c0cd4:	3d03      	subs	r5, #3
   c0cd6:	45ac      	cmp	ip, r5
   c0cd8:	bf38      	it	cc
   c0cda:	2200      	movcc	r2, #0
   c0cdc:	441a      	add	r2, r3
   c0cde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c0ce2:	b17b      	cbz	r3, c0d04 <__mdiff+0x108>
   c0ce4:	6107      	str	r7, [r0, #16]
   c0ce6:	e7a3      	b.n	c0c30 <__mdiff+0x34>
   c0ce8:	f856 8b04 	ldr.w	r8, [r6], #4
   c0cec:	fa11 f288 	uxtah	r2, r1, r8
   c0cf0:	1414      	asrs	r4, r2, #16
   c0cf2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c0cf6:	b292      	uxth	r2, r2
   c0cf8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c0cfc:	f84e 2b04 	str.w	r2, [lr], #4
   c0d00:	1421      	asrs	r1, r4, #16
   c0d02:	e7e0      	b.n	c0cc6 <__mdiff+0xca>
   c0d04:	3f01      	subs	r7, #1
   c0d06:	e7ea      	b.n	c0cde <__mdiff+0xe2>
   c0d08:	000c2931 	.word	0x000c2931
   c0d0c:	000c29b8 	.word	0x000c29b8

000c0d10 <__ulp>:
   c0d10:	b082      	sub	sp, #8
   c0d12:	ed8d 0b00 	vstr	d0, [sp]
   c0d16:	9b01      	ldr	r3, [sp, #4]
   c0d18:	4912      	ldr	r1, [pc, #72]	; (c0d64 <__ulp+0x54>)
   c0d1a:	4019      	ands	r1, r3
   c0d1c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c0d20:	2900      	cmp	r1, #0
   c0d22:	dd05      	ble.n	c0d30 <__ulp+0x20>
   c0d24:	2200      	movs	r2, #0
   c0d26:	460b      	mov	r3, r1
   c0d28:	ec43 2b10 	vmov	d0, r2, r3
   c0d2c:	b002      	add	sp, #8
   c0d2e:	4770      	bx	lr
   c0d30:	4249      	negs	r1, r1
   c0d32:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c0d36:	ea4f 5021 	mov.w	r0, r1, asr #20
   c0d3a:	f04f 0200 	mov.w	r2, #0
   c0d3e:	f04f 0300 	mov.w	r3, #0
   c0d42:	da04      	bge.n	c0d4e <__ulp+0x3e>
   c0d44:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c0d48:	fa41 f300 	asr.w	r3, r1, r0
   c0d4c:	e7ec      	b.n	c0d28 <__ulp+0x18>
   c0d4e:	f1a0 0114 	sub.w	r1, r0, #20
   c0d52:	291e      	cmp	r1, #30
   c0d54:	bfda      	itte	le
   c0d56:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c0d5a:	fa20 f101 	lsrle.w	r1, r0, r1
   c0d5e:	2101      	movgt	r1, #1
   c0d60:	460a      	mov	r2, r1
   c0d62:	e7e1      	b.n	c0d28 <__ulp+0x18>
   c0d64:	7ff00000 	.word	0x7ff00000

000c0d68 <__b2d>:
   c0d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0d6a:	6905      	ldr	r5, [r0, #16]
   c0d6c:	f100 0714 	add.w	r7, r0, #20
   c0d70:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c0d74:	1f2e      	subs	r6, r5, #4
   c0d76:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c0d7a:	4620      	mov	r0, r4
   c0d7c:	f7ff fd48 	bl	c0810 <__hi0bits>
   c0d80:	f1c0 0320 	rsb	r3, r0, #32
   c0d84:	280a      	cmp	r0, #10
   c0d86:	f8df c07c 	ldr.w	ip, [pc, #124]	; c0e04 <__b2d+0x9c>
   c0d8a:	600b      	str	r3, [r1, #0]
   c0d8c:	dc14      	bgt.n	c0db8 <__b2d+0x50>
   c0d8e:	f1c0 0e0b 	rsb	lr, r0, #11
   c0d92:	fa24 f10e 	lsr.w	r1, r4, lr
   c0d96:	42b7      	cmp	r7, r6
   c0d98:	ea41 030c 	orr.w	r3, r1, ip
   c0d9c:	bf34      	ite	cc
   c0d9e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c0da2:	2100      	movcs	r1, #0
   c0da4:	3015      	adds	r0, #21
   c0da6:	fa04 f000 	lsl.w	r0, r4, r0
   c0daa:	fa21 f10e 	lsr.w	r1, r1, lr
   c0dae:	ea40 0201 	orr.w	r2, r0, r1
   c0db2:	ec43 2b10 	vmov	d0, r2, r3
   c0db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c0db8:	42b7      	cmp	r7, r6
   c0dba:	bf3a      	itte	cc
   c0dbc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c0dc0:	f1a5 0608 	subcc.w	r6, r5, #8
   c0dc4:	2100      	movcs	r1, #0
   c0dc6:	380b      	subs	r0, #11
   c0dc8:	d017      	beq.n	c0dfa <__b2d+0x92>
   c0dca:	f1c0 0c20 	rsb	ip, r0, #32
   c0dce:	fa04 f500 	lsl.w	r5, r4, r0
   c0dd2:	42be      	cmp	r6, r7
   c0dd4:	fa21 f40c 	lsr.w	r4, r1, ip
   c0dd8:	ea45 0504 	orr.w	r5, r5, r4
   c0ddc:	bf8c      	ite	hi
   c0dde:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c0de2:	2400      	movls	r4, #0
   c0de4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c0de8:	fa01 f000 	lsl.w	r0, r1, r0
   c0dec:	fa24 f40c 	lsr.w	r4, r4, ip
   c0df0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c0df4:	ea40 0204 	orr.w	r2, r0, r4
   c0df8:	e7db      	b.n	c0db2 <__b2d+0x4a>
   c0dfa:	ea44 030c 	orr.w	r3, r4, ip
   c0dfe:	460a      	mov	r2, r1
   c0e00:	e7d7      	b.n	c0db2 <__b2d+0x4a>
   c0e02:	bf00      	nop
   c0e04:	3ff00000 	.word	0x3ff00000

000c0e08 <__d2b>:
   c0e08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c0e0c:	4689      	mov	r9, r1
   c0e0e:	2101      	movs	r1, #1
   c0e10:	ec57 6b10 	vmov	r6, r7, d0
   c0e14:	4690      	mov	r8, r2
   c0e16:	f7ff fc09 	bl	c062c <_Balloc>
   c0e1a:	4604      	mov	r4, r0
   c0e1c:	b930      	cbnz	r0, c0e2c <__d2b+0x24>
   c0e1e:	4602      	mov	r2, r0
   c0e20:	4b25      	ldr	r3, [pc, #148]	; (c0eb8 <__d2b+0xb0>)
   c0e22:	4826      	ldr	r0, [pc, #152]	; (c0ebc <__d2b+0xb4>)
   c0e24:	f240 310a 	movw	r1, #778	; 0x30a
   c0e28:	f7f9 fb2e 	bl	ba488 <__assert_func>
   c0e2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c0e30:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c0e34:	bb35      	cbnz	r5, c0e84 <__d2b+0x7c>
   c0e36:	2e00      	cmp	r6, #0
   c0e38:	9301      	str	r3, [sp, #4]
   c0e3a:	d028      	beq.n	c0e8e <__d2b+0x86>
   c0e3c:	4668      	mov	r0, sp
   c0e3e:	9600      	str	r6, [sp, #0]
   c0e40:	f7ff fd06 	bl	c0850 <__lo0bits>
   c0e44:	9900      	ldr	r1, [sp, #0]
   c0e46:	b300      	cbz	r0, c0e8a <__d2b+0x82>
   c0e48:	9a01      	ldr	r2, [sp, #4]
   c0e4a:	f1c0 0320 	rsb	r3, r0, #32
   c0e4e:	fa02 f303 	lsl.w	r3, r2, r3
   c0e52:	430b      	orrs	r3, r1
   c0e54:	40c2      	lsrs	r2, r0
   c0e56:	6163      	str	r3, [r4, #20]
   c0e58:	9201      	str	r2, [sp, #4]
   c0e5a:	9b01      	ldr	r3, [sp, #4]
   c0e5c:	61a3      	str	r3, [r4, #24]
   c0e5e:	2b00      	cmp	r3, #0
   c0e60:	bf14      	ite	ne
   c0e62:	2202      	movne	r2, #2
   c0e64:	2201      	moveq	r2, #1
   c0e66:	6122      	str	r2, [r4, #16]
   c0e68:	b1d5      	cbz	r5, c0ea0 <__d2b+0x98>
   c0e6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c0e6e:	4405      	add	r5, r0
   c0e70:	f8c9 5000 	str.w	r5, [r9]
   c0e74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c0e78:	f8c8 0000 	str.w	r0, [r8]
   c0e7c:	4620      	mov	r0, r4
   c0e7e:	b003      	add	sp, #12
   c0e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c0e84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c0e88:	e7d5      	b.n	c0e36 <__d2b+0x2e>
   c0e8a:	6161      	str	r1, [r4, #20]
   c0e8c:	e7e5      	b.n	c0e5a <__d2b+0x52>
   c0e8e:	a801      	add	r0, sp, #4
   c0e90:	f7ff fcde 	bl	c0850 <__lo0bits>
   c0e94:	9b01      	ldr	r3, [sp, #4]
   c0e96:	6163      	str	r3, [r4, #20]
   c0e98:	2201      	movs	r2, #1
   c0e9a:	6122      	str	r2, [r4, #16]
   c0e9c:	3020      	adds	r0, #32
   c0e9e:	e7e3      	b.n	c0e68 <__d2b+0x60>
   c0ea0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c0ea4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c0ea8:	f8c9 0000 	str.w	r0, [r9]
   c0eac:	6918      	ldr	r0, [r3, #16]
   c0eae:	f7ff fcaf 	bl	c0810 <__hi0bits>
   c0eb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c0eb6:	e7df      	b.n	c0e78 <__d2b+0x70>
   c0eb8:	000c2931 	.word	0x000c2931
   c0ebc:	000c29b8 	.word	0x000c29b8

000c0ec0 <__ratio>:
   c0ec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0ec4:	4688      	mov	r8, r1
   c0ec6:	4669      	mov	r1, sp
   c0ec8:	4681      	mov	r9, r0
   c0eca:	f7ff ff4d 	bl	c0d68 <__b2d>
   c0ece:	a901      	add	r1, sp, #4
   c0ed0:	4640      	mov	r0, r8
   c0ed2:	ec55 4b10 	vmov	r4, r5, d0
   c0ed6:	f7ff ff47 	bl	c0d68 <__b2d>
   c0eda:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c0ede:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c0ee2:	eba3 0c02 	sub.w	ip, r3, r2
   c0ee6:	e9dd 3200 	ldrd	r3, r2, [sp]
   c0eea:	1a9b      	subs	r3, r3, r2
   c0eec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c0ef0:	ec51 0b10 	vmov	r0, r1, d0
   c0ef4:	2b00      	cmp	r3, #0
   c0ef6:	bfd6      	itet	le
   c0ef8:	460a      	movle	r2, r1
   c0efa:	462a      	movgt	r2, r5
   c0efc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c0f00:	468b      	mov	fp, r1
   c0f02:	462f      	mov	r7, r5
   c0f04:	bfd4      	ite	le
   c0f06:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c0f0a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c0f0e:	4620      	mov	r0, r4
   c0f10:	ee10 2a10 	vmov	r2, s0
   c0f14:	465b      	mov	r3, fp
   c0f16:	4639      	mov	r1, r7
   c0f18:	f7fd fdb2 	bl	bea80 <__aeabi_ddiv>
   c0f1c:	ec41 0b10 	vmov	d0, r0, r1
   c0f20:	b003      	add	sp, #12
   c0f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c0f26 <__copybits>:
   c0f26:	3901      	subs	r1, #1
   c0f28:	b570      	push	{r4, r5, r6, lr}
   c0f2a:	1149      	asrs	r1, r1, #5
   c0f2c:	6914      	ldr	r4, [r2, #16]
   c0f2e:	3101      	adds	r1, #1
   c0f30:	f102 0314 	add.w	r3, r2, #20
   c0f34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c0f38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c0f3c:	1f05      	subs	r5, r0, #4
   c0f3e:	42a3      	cmp	r3, r4
   c0f40:	d30c      	bcc.n	c0f5c <__copybits+0x36>
   c0f42:	1aa3      	subs	r3, r4, r2
   c0f44:	3b11      	subs	r3, #17
   c0f46:	f023 0303 	bic.w	r3, r3, #3
   c0f4a:	3211      	adds	r2, #17
   c0f4c:	42a2      	cmp	r2, r4
   c0f4e:	bf88      	it	hi
   c0f50:	2300      	movhi	r3, #0
   c0f52:	4418      	add	r0, r3
   c0f54:	2300      	movs	r3, #0
   c0f56:	4288      	cmp	r0, r1
   c0f58:	d305      	bcc.n	c0f66 <__copybits+0x40>
   c0f5a:	bd70      	pop	{r4, r5, r6, pc}
   c0f5c:	f853 6b04 	ldr.w	r6, [r3], #4
   c0f60:	f845 6f04 	str.w	r6, [r5, #4]!
   c0f64:	e7eb      	b.n	c0f3e <__copybits+0x18>
   c0f66:	f840 3b04 	str.w	r3, [r0], #4
   c0f6a:	e7f4      	b.n	c0f56 <__copybits+0x30>

000c0f6c <__any_on>:
   c0f6c:	f100 0214 	add.w	r2, r0, #20
   c0f70:	6900      	ldr	r0, [r0, #16]
   c0f72:	114b      	asrs	r3, r1, #5
   c0f74:	4298      	cmp	r0, r3
   c0f76:	b510      	push	{r4, lr}
   c0f78:	db11      	blt.n	c0f9e <__any_on+0x32>
   c0f7a:	dd0a      	ble.n	c0f92 <__any_on+0x26>
   c0f7c:	f011 011f 	ands.w	r1, r1, #31
   c0f80:	d007      	beq.n	c0f92 <__any_on+0x26>
   c0f82:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c0f86:	fa24 f001 	lsr.w	r0, r4, r1
   c0f8a:	fa00 f101 	lsl.w	r1, r0, r1
   c0f8e:	428c      	cmp	r4, r1
   c0f90:	d10b      	bne.n	c0faa <__any_on+0x3e>
   c0f92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c0f96:	4293      	cmp	r3, r2
   c0f98:	d803      	bhi.n	c0fa2 <__any_on+0x36>
   c0f9a:	2000      	movs	r0, #0
   c0f9c:	bd10      	pop	{r4, pc}
   c0f9e:	4603      	mov	r3, r0
   c0fa0:	e7f7      	b.n	c0f92 <__any_on+0x26>
   c0fa2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c0fa6:	2900      	cmp	r1, #0
   c0fa8:	d0f5      	beq.n	c0f96 <__any_on+0x2a>
   c0faa:	2001      	movs	r0, #1
   c0fac:	e7f6      	b.n	c0f9c <__any_on+0x30>

000c0fae <_calloc_r>:
   c0fae:	b513      	push	{r0, r1, r4, lr}
   c0fb0:	434a      	muls	r2, r1
   c0fb2:	4611      	mov	r1, r2
   c0fb4:	9201      	str	r2, [sp, #4]
   c0fb6:	f7f9 fa57 	bl	ba468 <_malloc_r>
   c0fba:	4604      	mov	r4, r0
   c0fbc:	b118      	cbz	r0, c0fc6 <_calloc_r+0x18>
   c0fbe:	9a01      	ldr	r2, [sp, #4]
   c0fc0:	2100      	movs	r1, #0
   c0fc2:	f7fd ffa0 	bl	bef06 <memset>
   c0fc6:	4620      	mov	r0, r4
   c0fc8:	b002      	add	sp, #8
   c0fca:	bd10      	pop	{r4, pc}
   c0fcc:	0000      	movs	r0, r0
	...

000c0fd0 <nan>:
   c0fd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; c0fd8 <nan+0x8>
   c0fd4:	4770      	bx	lr
   c0fd6:	bf00      	nop
   c0fd8:	00000000 	.word	0x00000000
   c0fdc:	7ff80000 	.word	0x7ff80000

000c0fe0 <__ascii_wctomb>:
   c0fe0:	b149      	cbz	r1, c0ff6 <__ascii_wctomb+0x16>
   c0fe2:	2aff      	cmp	r2, #255	; 0xff
   c0fe4:	bf85      	ittet	hi
   c0fe6:	238a      	movhi	r3, #138	; 0x8a
   c0fe8:	6003      	strhi	r3, [r0, #0]
   c0fea:	700a      	strbls	r2, [r1, #0]
   c0fec:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c0ff0:	bf98      	it	ls
   c0ff2:	2001      	movls	r0, #1
   c0ff4:	4770      	bx	lr
   c0ff6:	4608      	mov	r0, r1
   c0ff8:	4770      	bx	lr
	...

000c0ffc <__aeabi_d2lz>:
   c0ffc:	b538      	push	{r3, r4, r5, lr}
   c0ffe:	2200      	movs	r2, #0
   c1000:	2300      	movs	r3, #0
   c1002:	4604      	mov	r4, r0
   c1004:	460d      	mov	r5, r1
   c1006:	f7fd fe83 	bl	bed10 <__aeabi_dcmplt>
   c100a:	b928      	cbnz	r0, c1018 <__aeabi_d2lz+0x1c>
   c100c:	4620      	mov	r0, r4
   c100e:	4629      	mov	r1, r5
   c1010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c1014:	f7fd bf14 	b.w	bee40 <__aeabi_d2ulz>
   c1018:	4620      	mov	r0, r4
   c101a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c101e:	f7fd ff0f 	bl	bee40 <__aeabi_d2ulz>
   c1022:	4240      	negs	r0, r0
   c1024:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c1028:	bd38      	pop	{r3, r4, r5, pc}
   c102a:	bf00      	nop

000c102c <dynalib_user>:
   c102c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c103c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c104c:	7620 7269 7574 6c61 4a00 796f 7473 6369      virtual.Joystic
   c105c:	206b 7274 6769 6567 0072 6e45 6574 2072     k trigger.Enter 
   c106c:	7274 6769 6567 0072 6564 6166 6c75 2074     trigger.default 
   c107c:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   c108c:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   c109c:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   c10ac:	2520 2073 4f4d 4544 7525 003e 6952 6867      %s MODE%u>.Righ
   c10bc:	2074 7274 6769 6567 0072 6f4d 6964 6966     t trigger.Modifi
   c10cc:	6465 6120 206e 6e4f 4f2f 6666 4320 6e6f     ed an On/Off Con
   c10dc:	7274 6c6f 4200 746f 203a 6425 202c 6f4d     trol.Bot: %d, Mo
   c10ec:	6964 6966 6465 0020 6966 656c 616e 656d     dified .filename
   c10fc:	4600 6c69 2065 2527 2773 6120 726c 6165     .File '%s' alrea
   c110c:	7964 6520 6978 7473 2c73 6420 6c65 7465     dy exists, delet
   c111c:	6e69 2067 6e61 2064 766f 7265 7277 7469     ing and overwrit
   c112c:	6e69 0067 7453 7261 6974 676e 6f20 6666     ing.Starting off
   c113c:	6f6c 6461 6f20 2066 6966 656c 203a 7325     load of file: %s
   c114c:	6600 6c69 6365 6d6f 0070 6552 6361 6568     .filecomp.Reache
   c115c:	2064 6e65 2064 666f 6620 6c69 3a65 2520     d end of file: %
   c116c:	0073 6966 656c 6f64 656e 5200 6365 6965     s.filedone.Recei
   c117c:	6576 2064 6f64 656e 6320 6d6f 616d 646e     ved done command
   c118c:	5200 6365 6965 6576 2064 6950 6320 6d6f     .Received Pi com
   c119c:	616d 646e 4300 6568 6b63 7573 3a6d 2520     mand.Checksum: %
   c11ac:	3230 2c78 2520 3330 2c64 4320 6568 6b63     02x, %03d, Check
   c11bc:	7473 3a72 2520 0073 7453 6972 676e 4c20     str: %s.String L
   c11cc:	6e65 203a 6425 202c 6843 6365 736b 6d75     en: %d, Checksum
   c11dc:	203a 6425 5b00 4157 4e52 205d 5052 2069     : %d.[WARN] RPi 
   c11ec:	654d 7373 6761 2065 6843 6365 736b 6d75     Message Checksum
   c11fc:	4420 656f 2073 6f4e 2074 614d 6374 2168      Does Not Match!
   c120c:	203a 7325 5700 7261 696e 676e 202c 6863     : %s.Warning, ch
   c121c:	6365 736b 6d75 6420 656f 2073 6f6e 2074     ecksum does not 
   c122c:	616d 6374 0068 7463 006c 7325 2520 2073     match.ctl.%s %s 
   c123c:	7325 2520 2064 6425 2520 2064 6425 4700     %s %d %d %d %d.G
   c124c:	746f 6120 6320 6d6f 616d 646e 7020 6361     ot a command pac
   c125c:	656b 2074 7266 6d6f 5020 2069 6f66 2072     ket from Pi for 
   c126c:	6f42 2074 6425 4300 5243 7350 7075 2542     Bot %d.CCRPsupB%
   c127c:	2064 6425 2520 2e30 6636 2520 2e30 6636     d %d %0.6f %0.6f
   c128c:	2520 2064 6425 2520 0064 495b 464e 5d4f      %d %d %d.[INFO]
   c129c:	5220 6365 6965 6576 2064 6152 7073 6562      Received Raspbe
   c12ac:	7272 2079 6950 4d20 7365 6173 6567 203a     rry Pi Message: 
   c12bc:	7325 2500 2573 3230 0078 4343 7548 0062     %s.%s%02x.CCHub.
   c12cc:	4343 2542 6d64 7274 3025 6433 3025 6433     CCB%dmtr%03d%03d
   c12dc:	4300 4243 6425 7768 0061 6576 7463 726f     .CCB%dhwa.vector
   c12ec:	3a3a 4d5f 725f 6e61 6567 635f 6568 6b63     ::_M_range_check
   c12fc:	203a 5f5f 206e 7728 6968 6863 6920 2073     : __n (which is 
   c130c:	7a25 2975 3e20 203d 6874 7369 3e2d 6973     %zu) >= this->si
   c131c:	657a 2928 2820 6877 6369 2068 7369 2520     ze() (which is %
   c132c:	757a 0029 7055 7420 6972 6767 7265 4400     zu).Up trigger.D
   c133c:	776f 206e 7274 6769 6567 0072 4343 2542     own trigger.CCB%
   c134c:	6364 6c74 3025 362e 2066 3025 362e 2066     dctl%0.6f %0.6f 
   c135c:	6425 2520 2064 6425 4300 6e6f 7274 6c6f     %d %d %d.Control
   c136c:	5020 6361 656b 3a74 2520 0073 6576 7463      Packet: %s.vect
   c137c:	726f 3a3a 4d5f 725f 6165 6c6c 636f 695f     or::_M_realloc_i
   c138c:	736e 7265 0074 6f4d 6f74 7372 5220 7365     nsert.Motors Res
   c139c:	6d75 6e69 0067 7250 7365 2073 6761 6961     uming.Press agai
   c13ac:	206e 6f74 7320 6f74 0070 6f4d 6f74 7372     n to stop.Motors
   c13bc:	5320 6f74 7070 6465 0021 7250 7365 2073      Stopped!.Press 
   c13cc:	6761 6961 206e 6f74 7320 6174 7472 4300     again to start.C
   c13dc:	6568 6b63 7573 3a6d 2520 3230 2c78 2520     hecksum: %02x, %
   c13ec:	3330 0064 575b 5241 5d4e 5720 7261 696e     03d.[WARN] Warni
   c13fc:	676e 202c 6863 6365 736b 6d75 6420 656f     ng, checksum doe
   c140c:	2073 6f6e 2074 616d 6374 2168 7300 7075     s not match!.sup
   c141c:	2500 2075 7525 2520 2073 7325 2520 2064     .%u %u %s %s %d 
   c142c:	6425 5300 6174 7574 2073 7055 6164 6574     %d.Status Update
   c143c:	0021 7325 2520 2073 6425 2520 2064 6425     !.%s %s %d %d %d
   c144c:	2520 2064 6425 4200 746f 2320 203a 6425      %d %d.Bot #: %d
   c145c:	5420 6d65 3a70 2520 0066 7768 0064 6f46      Temp: %f.hwd.Fo
   c146c:	6e75 2064 2061 656e 2077 6177 6574 2072     und a new water 
   c147c:	6f62 2074 4449 7000 7374 5b00 5550 5354     bot ID.pts.[PUTS
   c148c:	205d 6552 6563 7669 6465 5320 7274 6e69     ] Received Strin
   c149c:	2067 6f43 6d6d 6e61 3a64 2520 0073 646c     g Command: %s.ld
   c14ac:	0074 646c 0062 6c77 0064 6c77 0062 495b     t.ldb.wld.wlb.[I
   c14bc:	464e 5d4f 5220 6365 6965 6576 2064 544c     NFO] Received LT
   c14cc:	2045 654d 7373 6761 3a65 2520 0073 654e     E Message: %s.Ne
   c14dc:	2077 5442 4320 6d6f 616d 646e 203a 5b00     w BT Command: .[
   c14ec:	4e49 4f46 205d 6552 6563 7669 6465 4220     INFO] Received B
   c14fc:	454c 4d20 7365 6173 6567 203a 7325 4e00     LE Message: %s.N
   c150c:	7765 5820 6542 2065 6f43 6d6d 6e61 3a64     ew XBee Command:
   c151c:	5b00 4e49 4f46 205d 6552 6563 7669 6465     .[INFO] Received
   c152c:	5820 6542 2065 654d 7373 6761 3a65 2520      XBee Message: %
   c153c:	0073 6f46 6e75 2064 6f42 2074 3a23 2520     s.Found Bot #: %
   c154c:	2064 6425 2520 2064 6425 2520 2064 6425     d %d %d %d %d %d
   c155c:	2520 2064 6425 202c 6573 7672 6369 7365      %d %d, services
   c156c:	203a 6425 4600 756f 646e 6e20 7765 6220     : %d.Found new b
   c157c:	746f 203a 6425 4300 6e6f 656e 7463 6465     ot: %d.Connected
   c158c:	7420 206f 6f42 2074 6425 2f00 4500 7272      to Bot %d./.Err
   c159c:	726f 202c 6f63 6c75 2064 6f6e 2074 706f     or, could not op
   c15ac:	6e65 7220 6f6f 2074 6964 6572 7463 726f     en root director
   c15bc:	2079 6e6f 5320 2044 6143 6472 202e 7349     y on SD Card. Is
   c15cc:	6920 2074 6e69 6573 7472 6465 003f 6552      it inserted?.Re
   c15dc:	7571 7365 6574 2064 4453 4320 7261 2064     quested SD Card 
   c15ec:	6144 6174 6620 6f72 206d 6f42 2074 6425     Data from Bot %d
   c15fc:	4f20 6576 2072 4c42 0a45 4300 7275 6572      Over BLE..Curre
   c160c:	746e 796c 6320 6e6f 656e 7463 6465 7420     ntly connected t
   c161c:	206f 6f42 2074 7325 202c 656e 6465 7420     o Bot %s, need t
   c162c:	206f 6f63 6e6e 6365 2074 6f74 4220 746f     o connect to Bot
   c163c:	2520 0064 4343 2542 6464 706d 5300 6375      %d.CCB%ddmp.Suc
   c164c:	6563 7373 7566 6c6c 2079 6f63 6e6e 6365     cessfully connec
   c165c:	6574 2064 6f74 4220 746f 2520 0064 7453     ted to Bot %d.St
   c166c:	7261 6974 676e 6620 6c69 2065 7274 6e61     arting file tran
   c167c:	6673 7265 6620 6f72 206d 6f42 2074 6425     sfer from Bot %d
   c168c:	4600 6e69 7369 6568 2064 7274 6e61 6673     .Finished transf
   c169c:	7265 6972 676e 6620 6c69 2065 7266 6d6f     erring file from
   c16ac:	4220 746f 2520 0064 6552 6f63 6472 4200      Bot %d.Record.B
   c16bc:	7461 6574 7972 4f00 6666 6f6c 6461 5300     attery.Offload.S
   c16cc:	6e65 7274 0079 6552 006d 6553 006e 7541     entry.Rem.Sen.Au
   c16dc:	0074 6953 6e67 6c61 5300 6c6f 7750 0072     t.Signal.SolPwr.
   c16ec:	6142 5074 7277 6200 3234 3630 3139 2d30     BatPwr.b4206910-
   c16fc:	6364 6234 352d 3437 2d33 3863 3162 392d     dc4b-5743-c8b1-9
   c170c:	6432 6530 3537 3831 6232 0030 3462 3032     2d0e75182b0.b420
   c171c:	3936 3231 642d 3463 2d62 3735 3334 632d     6912-dc4b-5743-c
   c172c:	6238 2d31 3239 3064 3765 3135 3238 3062     8b1-92d0e75182b0
   c173c:	6200 3234 3630 3139 2d33 6364 6234 352d     .b4206913-dc4b-5
   c174c:	3437 2d33 3863 3162 392d 6432 6530 3537     743-c8b1-92d0e75
   c175c:	3831 6232 0030 3462 3032 3936 3431 642d     182b0.b4206914-d
   c176c:	3463 2d62 3735 3334 632d 6238 2d31 3239     c4b-5743-c8b1-92
   c177c:	3064 3765 3135 3238 3062 4f00 006e 664f     d0e75182b0.On.Of
   c178c:	0066 7250 6e69 6574 2064 6948 6867 696c     f.Printed Highli
   c179c:	6867 6574 2064 654d 756e 6920 6574 206d     ghted Menu item 
   c17ac:	6977 6874 6e20 6d61 3a65 2520 0073 6f42     with name: %s.Bo
   c17bc:	3174 6164 0074 6e49 7570 2074 6f43 6d6d     t1dat.Input Comm
   c17cc:	6e61 0064 3025 6432 3025 6432 3025 6434     and.%02d%02d%04d
   c17dc:	3025 6432 3025 6432 3025 6432 4300 4843     %02d%02d%02d.CCH
   c17ec:	4255 5f00 4f4c 2e47 7874 0074 5320 6174     UB._LOG.txt. Sta
   c17fc:	7472 6e69 2067 4500 7272 726f 203a 6f63     rting .Error: co
   c180c:	6c75 2064 6f6e 2074 6f63 6e6e 6365 2074     uld not connect 
   c181c:	6f74 5320 2044 6163 6472 0021 4b4f 4300     to SD card!.OK.C
   c182c:	4143 7342 6370 4300 4243 6425 6e73 0073     CABspc.CCB%dsns.
   c183c:	4343 4241 7473 0070                         CCABstp.

000c1844 <_ZTVN8particle11SPISettingsE>:
	...
   c184c:	4295 000b 40cd 000b 4113 000b               .B...@...A..

000c1858 <_ZTV5Timer>:
	...
   c1860:	4521 000b 4575 000b 4179 000b               !E..uE..yA..

000c186c <_ZTV4File>:
	...
   c1874:	4111 000b 4121 000b 4161 000b 415b 000b     .A..!A..aA..[A..
   c1884:	40cf 000b 413b 000b 4135 000b 412f 000b     .@..;A..5A../A..
   c1894:	4c43 4145 4552 0044 5300 4f54 5050 4445     CLEARED..STOPPED
   c18a4:	0000 6157 6e72 6e69 0067 4200 746f 2520     ..Warning..Bot %
   c18b4:	0064 4c00 776f 4220 7461 6574 7972 203a     d..Low Battery: 
   c18c4:	6425 0000 4453 4320 7261 2064 6146 6c69     %d..SD Card Fail
   c18d4:	6465 0000 5047 2f53 6f43 706d 7361 2073     ed..GPS/Compass 
   c18e4:	7245 6f72 0072 4c00 6165 206b 6873 7475     Error..Leak shut
   c18f4:	666f 0066 4c00 6165 206b 6564 6574 7463     off..Leak detect
   c1904:	6465 0000 6e49 6f66 0000 6f4e 2074 6f63     ed..Info..Not co
   c1914:	6e6e 6365 6574 2064 6f74 4220 454c 0000     nnected to BLE..
   c1924:	7753 7469 6863 6e69 2067 4c42 2045 6f63     Switching BLE co
   c1934:	6e6e 0000 6548 6c6c 216f 0000 6353 6e61     nn..Hello!..Scan
   c1944:	696e 676e 6620 726f 4220 746f 0073 4f00     ning for Bots..O
   c1954:	204b 6877 6e65 6220 746f 2073 6572 6461     K when bots read
   c1964:	0079                                         y..

000c1967 <_ZL4font>:
   c1967:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   c1977:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   c1987:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   c1997:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   c19a7:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   c19b7:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   c19c7:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   c19d7:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   c19e7:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   c19f7:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   c1a07:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   c1a17:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   c1a27:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   c1a37:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   c1a47:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   c1a57:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   c1a67:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   c1a77:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   c1a87:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   c1a97:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   c1aa7:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   c1ab7:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   c1ac7:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   c1ad7:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   c1ae7:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   c1af7:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   c1b07:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   c1b17:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   c1b27:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   c1b37:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   c1b47:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   c1b57:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   c1b67:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   c1b77:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   c1b87:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   c1b97:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   c1ba7:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   c1bb7:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   c1bc7:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   c1bd7:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   c1be7:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   c1bf7:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   c1c07:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   c1c17:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   c1c27:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   c1c37:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   c1c47:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   c1c57:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   c1c67:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   c1c77:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   c1c87:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   c1c97:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   c1ca7:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   c1cb7:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   c1cc7:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   c1cd7:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   c1ce7:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   c1cf7:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   c1d07:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   c1d17:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   c1d27:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   c1d37:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   c1d47:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   c1d57:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   c1d67:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   c1d77:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   c1d87:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   c1d97:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   c1da7:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   c1db7:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   c1dc7:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   c1dd7:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   c1de7:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   c1df7:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   c1e07:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   c1e17:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   c1e27:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   c1e37:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   c1e47:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   c1e57:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000c1e68 <_ZTV12Adafruit_GFX>:
	...
   c1e78:	9245 000b d50d 000b 40a5 000b 8c4b 000b     E........@..K...
   c1e88:	8c4d 000b 8c7f 000b 8c5b 000b 8c6d 000b     M.......[...m...
   c1e98:	8b8d 000b 8c4b 000b 8e77 000b 8e75 000b     ....K...w...u...
   c1ea8:	8c97 000b 8cd5 000b 8d0f 000b 8d55 000b     ............U...
   c1eb8:	8d71 000b 8df5 000b                         q.......

000c1ec0 <_ZTV17Adafruit_GrayOLED>:
	...
   c1ed0:	9245 000b d50d 000b 966f 000b 8c4b 000b     E.......o...K...
   c1ee0:	8c4d 000b 8c7f 000b 8c5b 000b 8c6d 000b     M.......[...m...
   c1ef0:	8b8d 000b 8c4b 000b 8e77 000b 986b 000b     ....K...w...k...
   c1f00:	8c97 000b 8cd5 000b 8d0f 000b 8d55 000b     ............U...
   c1f10:	8d71 000b 8df5 000b 40a5 000b               q........@..

000c1f1c <_ZL12splash2_data>:
   c1f1c:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   c1f2c:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   c1f3c:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   c1f58:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   c1f68:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   c1f78:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   c1f88:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   c1f98:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   c1fa8:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   c1fb8:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   c1fc8:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   c1fd8:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   c1fe8:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   c1ff8:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   c2008:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   c2018:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   c2028:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   c2038:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   c2048:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   c2058:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   c2068:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   c2078:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   c2088:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   c2098:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   c20b0:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   c20c0:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   c20d0:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   c20e0:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   c20f0:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000c20fc <_ZTV15Adafruit_SH1107>:
	...
   c2104:	99dd 000b 99f1 000b 9245 000b d50d 000b     ........E.......
   c2114:	966f 000b 8c4b 000b 8c4d 000b 8c7f 000b     o...K...M.......
   c2124:	8c5b 000b 8c6d 000b 8b8d 000b 8c4b 000b     [...m.......K...
   c2134:	8e77 000b 986b 000b 8c97 000b 8cd5 000b     w...k...........
   c2144:	8d0f 000b 8d55 000b 8d71 000b 8df5 000b     ....U...q.......
   c2154:	9b11 000b                                   ....

000c2158 <_ZZN15Adafruit_SH11075beginEhbE12init_128x128>:
   c2158:	00d3 7fa8                                   ....

000c215c <_ZZN15Adafruit_SH11075beginEhbE4init>:
   c215c:	d5ae 2051 4f81 8aad c0a0 00dc 60d3 22d9     ..Q .O.......`."
   c216c:	35db 3fa8 a6a4 0000                         .5.?....

000c2174 <_ZTV15Adafruit_SH110X>:
	...
   c217c:	40a5 000b 40a5 000b 9245 000b d50d 000b     .@...@..E.......
   c218c:	966f 000b 8c4b 000b 8c4d 000b 8c7f 000b     o...K...M.......
   c219c:	8c5b 000b 8c6d 000b 8b8d 000b 8c4b 000b     [...m.......K...
   c21ac:	8e77 000b 986b 000b 8c97 000b 8cd5 000b     w...k...........
   c21bc:	8d0f 000b 8d55 000b 8d71 000b 8df5 000b     ....U...q.......
   c21cc:	9b11 000b 7341 6573 7472 6f69 466e 6961     ....AssertionFai
   c21dc:	756c 6572 6620 6c61 6573 7700 7269 6e69     lure false.wirin
   c21ec:	2e67 6c62 0065 7453 7261 2074 6964 6373     g.ble.Start disc
   c21fc:	766f 7265 6e69 2067 6573 7672 6369 7365     overing services
   c220c:	002e 7341 6573 7472 6f69 466e 6961 756c     ..AssertionFailu
   c221c:	6572 6820 6c61 625f 656c 735f 6174 6b63     re hal_ble_stack
   c222c:	695f 696e 2874 756e 6c6c 7470 2972 3d20     _init(nullptr) =
   c223c:	203d 5953 5453 4d45 455f 5252 524f 4e5f     = SYSTEM_ERROR_N
   c224c:	4e4f 0045 6550 7265 6420 7665 6369 2065     ONE.Peer device 
   c225c:	7369 6d20 7369 6973 676e 0021 6146 6c69     is missing!.Fail
   c226c:	6465 7420 206f 6c61 6f6c 6163 6574 6d20     ed to allocate m
   c227c:	6d65 726f 2179 4600 6961 656c 2064 6f74     emory!.Failed to
   c228c:	6120 7070 6e65 2064 6570 7265 4320 6e65      append peer Cen
   c229c:	7274 6c61 6420 7665 6369 2e65 4300 6e6f     tral device..Con
   c22ac:	656e 7463 6465 6220 2079 6543 746e 6172     nected by Centra
   c22bc:	206c 6564 6976 6563 002e 6944 6373 6e6f     l device..Discon
   c22cc:	656e 7463 6465 6220 2079 6572 6f6d 6574     nected by remote
   c22dc:	6420 7665 6369 2e65 4600 6961 656c 2064      device..Failed 
   c22ec:	6f74 6120 7070 6e65 2064 6964 6373 766f     to append discov
   c22fc:	7265 6465 7320 7265 6976 6563 002e 7453     ered service..St
   c230c:	7261 2074 6964 6373 766f 7265 6e69 2067     art discovering 
   c231c:	6863 7261 6361 6574 6972 7473 6369 2073     characteristics 
   c232c:	666f 7320 7265 6976 6563 203a 7325 002e     of service: %s..
   c233c:	6143 6e6e 746f 6120 6464 6e20 7765 7020     Cannot add new p
   c234c:	6565 2072 6564 6976 6563 002e 654e 2077     eer device..New 
   c235c:	6570 6972 6870 7265 6c61 6920 2073 6f63     peripheral is co
   c236c:	6e6e 6365 6574 2e64 4300 6168 6172 7463     nnected..Charact
   c237c:	7265 7369 6974 2063 6964 6373 766f 7265     eristic discover
   c238c:	6465 002e 6944 6373 766f 7265 6465 6320     ed..Discovered c
   c239c:	6168 6172 7463 7265 7369 6974 2763 2073     haracteristic's 
   c23ac:	6168 646e 656c 6920 2073 6e69 6176 696c     handle is invali
   c23bc:	2e64 4600 6961 656c 2064 6f74 6120 7070     d..Failed to app
   c23cc:	6e65 2064 6964 6373 766f 7265 6465 6320     end discovered c
   c23dc:	6168 6172 7463 7265 7369 6974 2e63 0000     haracteristic...

000c23ec <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c23f4:	a4ed 000b a551 000b a6c7 000b a57b 000b     ....Q.......{...
   c2404:	a4f1 000b                                   ....

000c2408 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c2410:	a4e9 000b a55f 000b a4eb 000b a581 000b     ...._...........
   c2420:	a511 000b                                   ....

000c2424 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c242c:	a4e7 000b a56d 000b b221 000b a587 000b     ....m...!.......
   c243c:	a531 000b                                   1...

000c2440 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c244c:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
   c245c:	0000 0000                                   ....

000c2460 <_ZTVN5spark13CellularClassE>:
	...
   c2468:	cb7b 000b cb71 000b cb67 000b cb1d 000b     {...q...g.......
   c2478:	cb5b 000b cb4f 000b d3e9 000b d3f1 000b     [...O...........
   c2488:	cb43 000b cb3b 000b cb31 000b cb27 000b     C...;...1...'...
   c2498:	d421 000b                                   !...

000c249c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c24a4:	cbb5 000b cbbb 000b cbf9 000b cbc9 000b     ................
   c24b4:	cbb7 000b                                   ....

000c24b8 <_ZTVN5spark13EthernetClassE>:
	...
   c24c0:	d18f 000b d185 000b d17b 000b d171 000b     ........{...q...
   c24d0:	d165 000b d159 000b d3e9 000b d3f1 000b     e...Y...........
   c24e0:	d14d 000b d145 000b d13b 000b d131 000b     M...E...;...1...
   c24f0:	d421 000b                                   !...

000c24f4 <_ZTV7TwoWire>:
	...
   c24fc:	d1ad 000b d1f7 000b d1cf 000b d1af 000b     ................
   c250c:	d1d7 000b d1df 000b d1e7 000b d1ef 000b     ................

000c251c <_ZTV9IPAddress>:
	...
   c2524:	d2b9 000b d2a9 000b d2ab 000b 7061 0070     ............app.

000c2534 <_ZTVN5spark12NetworkClassE>:
	...
   c253c:	d3a9 000b d3b3 000b d3bd 000b d3c7 000b     ................
   c254c:	d3d1 000b d3dd 000b d3e9 000b d3f1 000b     ................
   c255c:	d3f9 000b d405 000b d40d 000b d417 000b     ................
   c256c:	d421 000b                                   !...

000c2570 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c2570:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   c2580:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   c2590:	6d69 0065                                   ime.

000c2594 <_ZTV11USARTSerial>:
	...
   c259c:	dc09 000b dc75 000b dc4d 000b d50d 000b     ....u...M.......
   c25ac:	dc1d 000b dc39 000b dc2b 000b dc47 000b     ....9...+...G...
   c25bc:	dc0b 000b dc0f 000b                         ........

000c25c4 <_ZTV9USBSerial>:
	...
   c25cc:	dcc1 000b dd29 000b dcff 000b d50d 000b     ....)...........
   c25dc:	dcf1 000b dcc3 000b dcd3 000b dd23 000b     ............#...
   c25ec:	dce3 000b dcbb 000b                         ........

000c25f4 <_ZSt7nothrow>:
	...

000c25f5 <_ZTSSt19_Sp_make_shared_tag>:
   c25f5:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c2605:	6572 5f64 6174 0067 0000                     red_tag....

000c2610 <_ZTISt19_Sp_make_shared_tag>:
   c2610:	26c4 000c 25f5 000c 6f6e 2074 6e65 756f     .&...%..not enou
   c2620:	6867 7320 6170 6563 6620 726f 6620 726f     gh space for for
   c2630:	616d 2074 7865 6170 736e 6f69 206e 5028     mat expansion (P
   c2640:	656c 7361 2065 7573 6d62 7469 6620 6c75     lease submit ful
   c2650:	206c 7562 2067 6572 6f70 7472 6120 2074     l bug report at 
   c2660:	7468 7074 3a73 2f2f 6367 2e63 6e67 2e75     https://gcc.gnu.
   c2670:	726f 2f67 7562 7367 292f 0a3a 2020 2020     org/bugs/):.    
   c2680:	3000 3231 3433 3635 3837 0039               .0123456789.

000c268c <_ZTIN10__cxxabiv117__class_type_infoE>:
   c268c:	2724 000c 2698 000c 2748 000c               $'...&..H'..

000c2698 <_ZTSN10__cxxabiv117__class_type_infoE>:
   c2698:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c26a8:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c26b8:	0045 0000                                   E...

000c26bc <_ZTVN10__cxxabiv117__class_type_infoE>:
   c26bc:	0000 0000 268c 000c e2dd 000b e2f1 000b     .....&..........
   c26cc:	e485 000b e485 000b e35b 000b e29f 000b     ........[.......
   c26dc:	e343 000b e305 000b e2d1 000b               C...........

000c26e8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c26e8:	2724 000c 26f4 000c 268c 000c               $'...&...&..

000c26f4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c26f4:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c2704:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c2714:	666e 456f 0000 0000                         nfoE....

000c271c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c271c:	0000 0000 26e8 000c e385 000b e399 000b     .....&..........
   c272c:	e485 000b e485 000b e35b 000b e29f 000b     ........[.......
   c273c:	e459 000b e3e5 000b e3ad 000b               Y...........

000c2748 <_ZTISt9type_info>:
   c2748:	26c4 000c 2750 000c                         .&..P'..

000c2750 <_ZTSSt9type_info>:
   c2750:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   c2760:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   c2770:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   c2780:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c2790:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c27a0:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c27b0:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c27c0:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   c27d0:	6e69 7469 0079 6e61 0000 0000               inity.an....

000c27dc <fpi.1>:
   c27dc:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c27ec:	0000 0000                                   ....

000c27f0 <fpinan.0>:
   c27f0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000c2808 <tinytens>:
   c2808:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c2818:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c2828:	6f43 64ac 0628 1168                         Co.d(.h.

000c2830 <_ctype_>:
   c2830:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c2840:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c2850:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c2860:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c2870:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c2880:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c2890:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c28a0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c28b0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c2930:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c2940:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   c2950:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c2960:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c2970:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c2980:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c2990:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   c29a0:	632e 0000                                   .c..

000c29a4 <_C_numeric_locale>:
   c29a4:	23e9 000c 1606 000c db18 2003 0043 4f50     .#......... C.PO
   c29b4:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   c29c4:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c29d4:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c29e4:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c29f4:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c2a04:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   c2a14:	0000 0000                                   ....

000c2a18 <__mprec_bigtens>:
   c2a18:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c2a28:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c2a38:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c2a40 <__mprec_tens>:
   c2a40:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c2a50:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c2a60:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c2a70:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c2a80:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c2a90:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c2aa0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c2ab0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c2ac0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c2ad0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c2ae0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c2af0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c2b00:	9db4 79d9 7843 44ea                         ...yCx.D

000c2b08 <p05.0>:
   c2b08:	0005 0000 0019 0000 007d 0000               ........}...

000c2b14 <link_const_variable_data_end>:
   c2b14:	000b68c5 	.word	0x000b68c5
   c2b18:	000bcb0d 	.word	0x000bcb0d
   c2b1c:	000bcb85 	.word	0x000bcb85
   c2b20:	000bd199 	.word	0x000bd199
   c2b24:	000bd399 	.word	0x000bd399
   c2b28:	000bd4f9 	.word	0x000bd4f9
   c2b2c:	000bd629 	.word	0x000bd629
   c2b30:	000bda51 	.word	0x000bda51
   c2b34:	000bdbf5 	.word	0x000bdbf5

000c2b38 <link_constructors_end>:
	...
