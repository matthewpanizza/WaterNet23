
/Users/matthewpanizza/Downloads/WaterNet23/WaterNet23CCHub/target/4.0.0/bsom/WaterNet23CCHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000e100  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c2120  000c2120  00012120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c2144  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  2003da90  000c2148  0002da90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000b80  2003dc70  2003dc70  0003dc70  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c2328  000c2328  00032328  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c2350  000c2350  00032350  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001e1763  00000000  00000000  00032354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001fa88  00000000  00000000  00213ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0005aa5a  00000000  00000000  0023353f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003bc8  00000000  00000000  0028df99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000e918  00000000  00000000  00291b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004fc7e  00000000  00000000  002a0479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00072abd  00000000  00000000  002f00f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00151cef  00000000  00000000  00362bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000be70  00000000  00000000  004b48a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
   b4026:	b508      	push	{r3, lr}
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00a fb72 	bl	be71a <memcpy>
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00a fb94 	bl	be76a <memset>
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003da90 	.word	0x2003da90
   b404c:	000c2148 	.word	0x000c2148
   b4050:	2003dc70 	.word	0x2003dc70
   b4054:	2003dc70 	.word	0x2003dc70
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
   b405c:	b570      	push	{r4, r5, r6, lr}
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
   b4062:	f009 fb5f 	bl	bd724 <module_user_init_hook>
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
   b4070:	bd70      	pop	{r4, r5, r6, pc}
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c20fc 	.word	0x000c20fc
   b4080:	000c2120 	.word	0x000c2120

000b4084 <module_user_setup>:
   b4084:	f002 baac 	b.w	b65e0 <setup>

000b4088 <module_user_loop>:
   b4088:	b508      	push	{r3, lr}
   b408a:	f002 fe55 	bl	b6d38 <loop>
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4092:	f009 baff 	b.w	bd694 <_post_loop>

000b4096 <_Znwj>:
   b4096:	f005 be51 	b.w	b9d3c <malloc>

000b409a <_Znaj>:
   b409a:	f005 be4f 	b.w	b9d3c <malloc>

000b409e <_ZdlPvj>:
   b409e:	f005 be55 	b.w	b9d4c <free>
	...

000b40a4 <__cxa_pure_virtual>:
   b40a4:	b508      	push	{r3, lr}
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f005 fd62 	bl	b9b74 <panic_>
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b9835 	.word	0x000b9835
   b40b8:	000c08a0 	.word	0x000c08a0

000b40bc <__cxa_guard_acquire>:
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40cc:	4770      	bx	lr

000b40ce <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40ce:	7c03      	ldrb	r3, [r0, #16]
   b40d0:	f013 0308 	ands.w	r3, r3, #8
   b40d4:	bf1e      	ittt	ne
   b40d6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40d8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40da:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40dc:	2b00      	cmp	r3, #0
  }
   b40de:	bfac      	ite	ge
   b40e0:	4618      	movge	r0, r3
   b40e2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40e6:	4770      	bx	lr

000b40e8 <_Z12actionTimer5v>:
        Serial1.println(outStr);
    }
}

void actionTimer5(){
    postStatus = true;
   b40e8:	4b06      	ldr	r3, [pc, #24]	; (b4104 <_Z12actionTimer5v+0x1c>)
   b40ea:	2201      	movs	r2, #1
   b40ec:	701a      	strb	r2, [r3, #0]
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
   b40ee:	4b06      	ldr	r3, [pc, #24]	; (b4108 <_Z12actionTimer5v+0x20>)
   b40f0:	e9d3 3100 	ldrd	r3, r1, [r3]
    for(WaterBot &w: WaterBots){
   b40f4:	4299      	cmp	r1, r3
   b40f6:	d004      	beq.n	b4102 <_Z12actionTimer5v+0x1a>
        w.timeoutCount++;
   b40f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   b40fa:	3201      	adds	r2, #1
   b40fc:	639a      	str	r2, [r3, #56]	; 0x38
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b40fe:	333c      	adds	r3, #60	; 0x3c
      {
	++_M_current;
	return *this;
   b4100:	e7f8      	b.n	b40f4 <_Z12actionTimer5v+0xc>
    }
    //if(!BLE.connected)
}
   b4102:	4770      	bx	lr
   b4104:	2003dee0 	.word	0x2003dee0
   b4108:	2003dcc8 	.word	0x2003dcc8

000b410c <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b410c:	4770      	bx	lr

000b410e <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b410e:	b510      	push	{r4, lr}
  }
   b4110:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4112:	4604      	mov	r4, r0
  }
   b4114:	f7ff ffc3 	bl	b409e <_ZdlPvj>
   b4118:	4620      	mov	r0, r4
   b411a:	bd10      	pop	{r4, pc}

000b411c <_ZN4FileD0Ev>:
   b411c:	b510      	push	{r4, lr}
   b411e:	2134      	movs	r1, #52	; 0x34
   b4120:	4604      	mov	r4, r0
   b4122:	f7ff ffbc 	bl	b409e <_ZdlPvj>
   b4126:	4620      	mov	r0, r4
   b4128:	bd10      	pop	{r4, pc}

000b412a <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b412a:	3010      	adds	r0, #16
   b412c:	f003 b882 	b.w	b7234 <_ZN7FatFile4syncEv>

000b4130 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b4130:	3010      	adds	r0, #16
   b4132:	f002 bfa0 	b.w	b7076 <_ZN7FatFile4peekEv>

000b4136 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b4136:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b4138:	2201      	movs	r2, #1
   b413a:	f10d 0107 	add.w	r1, sp, #7
   b413e:	3010      	adds	r0, #16
   b4140:	f002 feeb 	bl	b6f1a <_ZN7FatFile4readEPvj>
   b4144:	2801      	cmp	r0, #1
   b4146:	bf0c      	ite	eq
   b4148:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b414c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   b4150:	b003      	add	sp, #12
   b4152:	f85d fb04 	ldr.w	pc, [sp], #4

000b4156 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4156:	3010      	adds	r0, #16
   b4158:	f003 b906 	b.w	b7368 <_ZN7FatFile5writeEPKvj>

000b415c <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b415c:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b415e:	2201      	movs	r2, #1
   b4160:	f88d 1007 	strb.w	r1, [sp, #7]
   b4164:	3010      	adds	r0, #16
   b4166:	f10d 0107 	add.w	r1, sp, #7
   b416a:	f003 f8fd 	bl	b7368 <_ZN7FatFile5writeEPKvj>
  }
   b416e:	b003      	add	sp, #12
   b4170:	f85d fb04 	ldr.w	pc, [sp], #4

000b4174 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4174:	6943      	ldr	r3, [r0, #20]
   b4176:	b113      	cbz	r3, b417e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4178:	6983      	ldr	r3, [r0, #24]
   b417a:	300c      	adds	r0, #12
   b417c:	4718      	bx	r3
            callback();
        }
    }
   b417e:	4770      	bx	lr

000b4180 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4180:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4182:	2100      	movs	r1, #0
   b4184:	4604      	mov	r4, r0
   b4186:	4608      	mov	r0, r1
   b4188:	f005 fb04 	bl	b9794 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b418c:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b418e:	4620      	mov	r0, r4
   b4190:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4192:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4194:	f005 fb16 	bl	b97c4 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4198:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b419a:	b10c      	cbz	r4, b41a0 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b419c:	2301      	movs	r3, #1
   b419e:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b41a0:	2100      	movs	r1, #0
   b41a2:	2001      	movs	r0, #1
   b41a4:	f005 faf6 	bl	b9794 <os_thread_scheduling>
            }
        }
        if (t) {
   b41a8:	b12c      	cbz	r4, b41b6 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b41aa:	6823      	ldr	r3, [r4, #0]
   b41ac:	4620      	mov	r0, r4
   b41ae:	689b      	ldr	r3, [r3, #8]
   b41b0:	4798      	blx	r3
            t->running = false;
   b41b2:	2300      	movs	r3, #0
   b41b4:	7123      	strb	r3, [r4, #4]
        }
    }
   b41b6:	b002      	add	sp, #8
   b41b8:	bd10      	pop	{r4, pc}
	...

000b41bc <_Z8jHandlerv>:
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
    SelectedItem = &MenuItems.at(menuItem);
    Serial.println("Down trigger");
}

void jHandler(){
   b41bc:	b510      	push	{r4, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b41be:	4c09      	ldr	r4, [pc, #36]	; (b41e4 <_Z8jHandlerv+0x28>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41c0:	f005 fb48 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
   b41c4:	6823      	ldr	r3, [r4, #0]
   b41c6:	1ac0      	subs	r0, r0, r3
   b41c8:	2895      	cmp	r0, #149	; 0x95
   b41ca:	d909      	bls.n	b41e0 <_Z8jHandlerv+0x24>
   b41cc:	f005 fb42 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b41d0:	6020      	str	r0, [r4, #0]
    Serial.println("Joystick trigger");
   b41d2:	f009 fa17 	bl	bd604 <_Z16_fetch_usbserialv>
   b41d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("Joystick trigger");
   b41da:	4903      	ldr	r1, [pc, #12]	; (b41e8 <_Z8jHandlerv+0x2c>)
   b41dc:	f008 be1d 	b.w	bce1a <_ZN5Print7printlnEPKc>
   b41e0:	bd10      	pop	{r4, pc}
   b41e2:	bf00      	nop
   b41e4:	2003dd6c 	.word	0x2003dd6c
   b41e8:	000c08b5 	.word	0x000c08b5

000b41ec <_Z13actionTimer60v>:
void actionTimer60(){
   b41ec:	b510      	push	{r4, lr}
      : _M_current(__i) { }
   b41ee:	4b0c      	ldr	r3, [pc, #48]	; (b4220 <_Z13actionTimer60v+0x34>)
   b41f0:	e9d3 3100 	ldrd	r3, r1, [r3]
    bool reqLTEStatus = false;
   b41f4:	2200      	movs	r2, #0
            w.timeoutCount = 0;            
   b41f6:	4610      	mov	r0, r2
    for(WaterBot &w: WaterBots){
   b41f8:	4299      	cmp	r1, r3
   b41fa:	d006      	beq.n	b420a <_Z13actionTimer60v+0x1e>
        if(w.timeoutCount > XBEE_BLE_MAX_TIMEOUT){
   b41fc:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   b41fe:	2c24      	cmp	r4, #36	; 0x24
            w.timeoutCount = 0;            
   b4200:	bf84      	itt	hi
   b4202:	6398      	strhi	r0, [r3, #56]	; 0x38
            reqLTEStatus = true;
   b4204:	2201      	movhi	r2, #1
      operator++() _GLIBCXX_NOEXCEPT
   b4206:	333c      	adds	r3, #60	; 0x3c
	return *this;
   b4208:	e7f6      	b.n	b41f8 <_Z13actionTimer60v+0xc>
    if(reqLTEStatus && LTEStatuses < MAX_LTE_STATUSES){
   b420a:	b142      	cbz	r2, b421e <_Z13actionTimer60v+0x32>
   b420c:	4a05      	ldr	r2, [pc, #20]	; (b4224 <_Z13actionTimer60v+0x38>)
   b420e:	7813      	ldrb	r3, [r2, #0]
   b4210:	2b18      	cmp	r3, #24
   b4212:	d804      	bhi.n	b421e <_Z13actionTimer60v+0x32>
        LTEStatuses++;
   b4214:	3301      	adds	r3, #1
   b4216:	7013      	strb	r3, [r2, #0]
        statusTimeout = true;
   b4218:	4b03      	ldr	r3, [pc, #12]	; (b4228 <_Z13actionTimer60v+0x3c>)
   b421a:	2201      	movs	r2, #1
   b421c:	701a      	strb	r2, [r3, #0]
}
   b421e:	bd10      	pop	{r4, pc}
   b4220:	2003dcc8 	.word	0x2003dcc8
   b4224:	2003dc90 	.word	0x2003dc90
   b4228:	2003e639 	.word	0x2003e639

000b422c <_Z10entHandlerv>:
void entHandler(){
   b422c:	b538      	push	{r3, r4, r5, lr}
    redrawMenu = true;  
   b422e:	4b14      	ldr	r3, [pc, #80]	; (b4280 <_Z10entHandlerv+0x54>)
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4230:	4d14      	ldr	r5, [pc, #80]	; (b4284 <_Z10entHandlerv+0x58>)
    redrawMenu = true;  
   b4232:	2401      	movs	r4, #1
   b4234:	701c      	strb	r4, [r3, #0]
   b4236:	f005 fb0d 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b423a:	682b      	ldr	r3, [r5, #0]
   b423c:	1ac0      	subs	r0, r0, r3
   b423e:	2895      	cmp	r0, #149	; 0x95
   b4240:	d90e      	bls.n	b4260 <_Z10entHandlerv+0x34>
    Serial.println("Enter trigger");
   b4242:	f009 f9df 	bl	bd604 <_Z16_fetch_usbserialv>
   b4246:	4910      	ldr	r1, [pc, #64]	; (b4288 <_Z10entHandlerv+0x5c>)
   b4248:	f008 fde7 	bl	bce1a <_ZN5Print7printlnEPKc>
   b424c:	f005 fb02 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4250:	4a0e      	ldr	r2, [pc, #56]	; (b428c <_Z10entHandlerv+0x60>)
    debounceTime = millis();
   b4252:	6028      	str	r0, [r5, #0]
    if(PopUps.size() != 0){
   b4254:	e9d2 1300 	ldrd	r1, r3, [r2]
   b4258:	428b      	cmp	r3, r1
   b425a:	d002      	beq.n	b4262 <_Z10entHandlerv+0x36>
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_nonempty();
	--this->_M_impl._M_finish;
   b425c:	3b49      	subs	r3, #73	; 0x49
   b425e:	6053      	str	r3, [r2, #4]
}
   b4260:	bd38      	pop	{r3, r4, r5, pc}
    selectingBots = !selectingBots;
   b4262:	4a0b      	ldr	r2, [pc, #44]	; (b4290 <_Z10entHandlerv+0x64>)
   b4264:	7813      	ldrb	r3, [r2, #0]
   b4266:	f083 0301 	eor.w	r3, r3, #1
   b426a:	7013      	strb	r3, [r2, #0]
    if(modifiedValue){
   b426c:	4b09      	ldr	r3, [pc, #36]	; (b4294 <_Z10entHandlerv+0x68>)
   b426e:	781a      	ldrb	r2, [r3, #0]
   b4270:	2a00      	cmp	r2, #0
   b4272:	d0f5      	beq.n	b4260 <_Z10entHandlerv+0x34>
        updateControl = true;
   b4274:	4a08      	ldr	r2, [pc, #32]	; (b4298 <_Z10entHandlerv+0x6c>)
   b4276:	7014      	strb	r4, [r2, #0]
        modifiedValue = false;
   b4278:	2200      	movs	r2, #0
   b427a:	701a      	strb	r2, [r3, #0]
   b427c:	e7f0      	b.n	b4260 <_Z10entHandlerv+0x34>
   b427e:	bf00      	nop
   b4280:	2003da90 	.word	0x2003da90
   b4284:	2003dd6c 	.word	0x2003dd6c
   b4288:	000c08c6 	.word	0x000c08c6
   b428c:	2003dcac 	.word	0x2003dcac
   b4290:	2003da91 	.word	0x2003da91
   b4294:	2003de13 	.word	0x2003de13
   b4298:	2003e63a 	.word	0x2003e63a

000b429c <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b429c:	2a01      	cmp	r2, #1
   b429e:	d102      	bne.n	b42a6 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b42a0:	6001      	str	r1, [r0, #0]
      }
   b42a2:	2000      	movs	r0, #0
   b42a4:	4770      	bx	lr
	  switch (__op)
   b42a6:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b42a8:	bf04      	itt	eq
   b42aa:	680b      	ldreq	r3, [r1, #0]
   b42ac:	6003      	streq	r3, [r0, #0]
	      break;
   b42ae:	e7f8      	b.n	b42a2 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b42b0 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b42b0:	6803      	ldr	r3, [r0, #0]
   b42b2:	4718      	bx	r3

000b42b4 <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b42b6:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42b8:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42ba:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42bc:	b130      	cbz	r0, b42cc <_ZN5Timer5startEj.isra.0+0x18>
   b42be:	2300      	movs	r3, #0
   b42c0:	e9cd 3300 	strd	r3, r3, [sp]
   b42c4:	461a      	mov	r2, r3
   b42c6:	2102      	movs	r1, #2
   b42c8:	f005 fa84 	bl	b97d4 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b42cc:	68a0      	ldr	r0, [r4, #8]
   b42ce:	b130      	cbz	r0, b42de <_ZN5Timer5startEj.isra.0+0x2a>
   b42d0:	2300      	movs	r3, #0
   b42d2:	e9cd 5300 	strd	r5, r3, [sp]
   b42d6:	461a      	mov	r2, r3
   b42d8:	4619      	mov	r1, r3
   b42da:	f005 fa7b 	bl	b97d4 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42de:	b003      	add	sp, #12
   b42e0:	bd30      	pop	{r4, r5, pc}

000b42e2 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42e2:	b40e      	push	{r1, r2, r3}
   b42e4:	b503      	push	{r0, r1, lr}
   b42e6:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b42e8:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42ea:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b42ee:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b42f0:	f008 fdbb 	bl	bce6a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b42f4:	b002      	add	sp, #8
   b42f6:	f85d eb04 	ldr.w	lr, [sp], #4
   b42fa:	b003      	add	sp, #12
   b42fc:	4770      	bx	lr
	...

000b4300 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4300:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4302:	4604      	mov	r4, r0
   b4304:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4306:	7922      	ldrb	r2, [r4, #4]
   b4308:	68a3      	ldr	r3, [r4, #8]
   b430a:	b132      	cbz	r2, b431a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b430c:	b9a3      	cbnz	r3, b4338 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b430e:	490b      	ldr	r1, [pc, #44]	; (b433c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4310:	b002      	add	sp, #8
   b4312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4316:	f008 bd6d 	b.w	bcdf4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b431a:	4a09      	ldr	r2, [pc, #36]	; (b4340 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b431c:	7b26      	ldrb	r6, [r4, #12]
   b431e:	4d09      	ldr	r5, [pc, #36]	; (b4344 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4320:	4909      	ldr	r1, [pc, #36]	; (b4348 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4322:	7b64      	ldrb	r4, [r4, #13]
   b4324:	2e01      	cmp	r6, #1
   b4326:	bf18      	it	ne
   b4328:	4629      	movne	r1, r5
   b432a:	e9cd 1400 	strd	r1, r4, [sp]
   b432e:	4907      	ldr	r1, [pc, #28]	; (b434c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4330:	f7ff ffd7 	bl	b42e2 <_ZN5Print6printfEPKcz>
  }
   b4334:	b002      	add	sp, #8
   b4336:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4338:	4a05      	ldr	r2, [pc, #20]	; (b4350 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b433a:	e7ef      	b.n	b431c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b433c:	000c08e5 	.word	0x000c08e5
   b4340:	000c0a8d 	.word	0x000c0a8d
   b4344:	000c08e1 	.word	0x000c08e1
   b4348:	000c08dd 	.word	0x000c08dd
   b434c:	000c08fb 	.word	0x000c08fb
   b4350:	000c08d4 	.word	0x000c08d4

000b4354 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4354:	b40e      	push	{r1, r2, r3}
   b4356:	b503      	push	{r0, r1, lr}
   b4358:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b435a:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b435c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4360:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4362:	f008 fd82 	bl	bce6a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4366:	b002      	add	sp, #8
   b4368:	f85d eb04 	ldr.w	lr, [sp], #4
   b436c:	b003      	add	sp, #12
   b436e:	4770      	bx	lr

000b4370 <_Z8lHandlerv>:
void lHandler(){
   b4370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    redrawMenu = true;  
   b4374:	4c35      	ldr	r4, [pc, #212]	; (b444c <_Z8lHandlerv+0xdc>)
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4376:	4e36      	ldr	r6, [pc, #216]	; (b4450 <_Z8lHandlerv+0xe0>)
    redrawMenu = true;  
   b4378:	2501      	movs	r5, #1
   b437a:	7025      	strb	r5, [r4, #0]
   b437c:	f005 fa6a 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4380:	6833      	ldr	r3, [r6, #0]
   b4382:	1ac0      	subs	r0, r0, r3
   b4384:	2895      	cmp	r0, #149	; 0x95
   b4386:	d95f      	bls.n	b4448 <_Z8lHandlerv+0xd8>
    Serial.println("Right trigger");
   b4388:	f009 f93c 	bl	bd604 <_Z16_fetch_usbserialv>
   b438c:	4931      	ldr	r1, [pc, #196]	; (b4454 <_Z8lHandlerv+0xe4>)
   b438e:	f008 fd44 	bl	bce1a <_ZN5Print7printlnEPKc>
   b4392:	f005 fa5f 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
    if(selectingBots){
   b4396:	4b30      	ldr	r3, [pc, #192]	; (b4458 <_Z8lHandlerv+0xe8>)
    debounceTime = millis();
   b4398:	6030      	str	r0, [r6, #0]
    if(selectingBots){
   b439a:	781e      	ldrb	r6, [r3, #0]
   b439c:	492f      	ldr	r1, [pc, #188]	; (b445c <_Z8lHandlerv+0xec>)
    redrawMenu = true;
   b439e:	7025      	strb	r5, [r4, #0]
    if(selectingBots){
   b43a0:	b1b6      	cbz	r6, b43d0 <_Z8lHandlerv+0x60>
      : _M_current(__i) { }
   b43a2:	680b      	ldr	r3, [r1, #0]
        if(botSelect != WaterBots.front().botNum){
   b43a4:	4c2e      	ldr	r4, [pc, #184]	; (b4460 <_Z8lHandlerv+0xf0>)
   b43a6:	7898      	ldrb	r0, [r3, #2]
   b43a8:	7822      	ldrb	r2, [r4, #0]
   b43aa:	4290      	cmp	r0, r2
   b43ac:	d04c      	beq.n	b4448 <_Z8lHandlerv+0xd8>
   b43ae:	684f      	ldr	r7, [r1, #4]
                    ControlledBot = &ws;
   b43b0:	f8df c0b8 	ldr.w	ip, [pc, #184]	; b446c <_Z8lHandlerv+0xfc>
   b43b4:	2500      	movs	r5, #0
            for(WaterBot &ws: WaterBots){
   b43b6:	429f      	cmp	r7, r3
   b43b8:	d044      	beq.n	b4444 <_Z8lHandlerv+0xd4>
                if(ws.botNum == botSelect){
   b43ba:	7899      	ldrb	r1, [r3, #2]
   b43bc:	4291      	cmp	r1, r2
                    botSelect = newBotNum;
   b43be:	bf01      	itttt	eq
   b43c0:	4602      	moveq	r2, r0
   b43c2:	4611      	moveq	r1, r2
                    ControlledBot = &ws;
   b43c4:	f8cc 3000 	streq.w	r3, [ip]
   b43c8:	4635      	moveq	r5, r6
   b43ca:	333c      	adds	r3, #60	; 0x3c
	return *this;
   b43cc:	4608      	mov	r0, r1
   b43ce:	e7f2      	b.n	b43b6 <_Z8lHandlerv+0x46>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b43d0:	e9d1 4600 	ldrd	r4, r6, [r1]
            if(ws.botNum == botSelect){
   b43d4:	4f22      	ldr	r7, [pc, #136]	; (b4460 <_Z8lHandlerv+0xf0>)
                MenuItem *curItem = SelectedItem;
   b43d6:	f8df 8098 	ldr.w	r8, [pc, #152]	; b4470 <_Z8lHandlerv+0x100>
                modifiedValue = true;
   b43da:	f8df 9098 	ldr.w	r9, [pc, #152]	; b4474 <_Z8lHandlerv+0x104>
        for(WaterBot &ws: WaterBots){
   b43de:	42a6      	cmp	r6, r4
   b43e0:	d032      	beq.n	b4448 <_Z8lHandlerv+0xd8>
            if(ws.botNum == botSelect){
   b43e2:	78a2      	ldrb	r2, [r4, #2]
   b43e4:	783b      	ldrb	r3, [r7, #0]
   b43e6:	429a      	cmp	r2, r3
   b43e8:	d121      	bne.n	b442e <_Z8lHandlerv+0xbe>
                MenuItem *curItem = SelectedItem;
   b43ea:	f8d8 5000 	ldr.w	r5, [r8]
                Serial.println(curItem->itemName);
   b43ee:	f009 f909 	bl	bd604 <_Z16_fetch_usbserialv>
   b43f2:	f105 011a 	add.w	r1, r5, #26
   b43f6:	f008 fd10 	bl	bce1a <_ZN5Print7printlnEPKc>
                if(curItem == nullptr) return;
   b43fa:	b32d      	cbz	r5, b4448 <_Z8lHandlerv+0xd8>
                if(curItem->statOnly) return;
   b43fc:	f895 a017 	ldrb.w	sl, [r5, #23]
   b4400:	f1ba 0f00 	cmp.w	sl, #0
   b4404:	d120      	bne.n	b4448 <_Z8lHandlerv+0xd8>
                if(curItem->onOffSetting){
   b4406:	7d6b      	ldrb	r3, [r5, #21]
   b4408:	b19b      	cbz	r3, b4432 <_Z8lHandlerv+0xc2>
                    Serial.println("Modified an On/Off Control");
   b440a:	f009 f8fb 	bl	bd604 <_Z16_fetch_usbserialv>
   b440e:	4915      	ldr	r1, [pc, #84]	; (b4464 <_Z8lHandlerv+0xf4>)
   b4410:	f008 fd03 	bl	bce1a <_ZN5Print7printlnEPKc>
                    ws.*(curItem->MethodPointerBool) = false;
   b4414:	692b      	ldr	r3, [r5, #16]
   b4416:	f804 a003 	strb.w	sl, [r4, r3]
                    Serial.printlnf("Bot: %d, Modified ",ws.botNum);
   b441a:	f009 f8f3 	bl	bd604 <_Z16_fetch_usbserialv>
   b441e:	78a2      	ldrb	r2, [r4, #2]
   b4420:	4911      	ldr	r1, [pc, #68]	; (b4468 <_Z8lHandlerv+0xf8>)
   b4422:	f7ff ff97 	bl	b4354 <_ZN5Print8printlnfEPKcz>
                modifiedValue = true;
   b4426:	2301      	movs	r3, #1
   b4428:	f889 3000 	strb.w	r3, [r9]
                ws.updatedControl = true;
   b442c:	7063      	strb	r3, [r4, #1]
      operator++() _GLIBCXX_NOEXCEPT
   b442e:	343c      	adds	r4, #60	; 0x3c
	return *this;
   b4430:	e7d5      	b.n	b43de <_Z8lHandlerv+0x6e>
                    if(ws.*(curItem->MethodPointer) > curItem->minVal) ws.*(curItem->MethodPointer) -= curItem->stepSize;
   b4432:	68ea      	ldr	r2, [r5, #12]
   b4434:	7e29      	ldrb	r1, [r5, #24]
   b4436:	5ca3      	ldrb	r3, [r4, r2]
   b4438:	4299      	cmp	r1, r3
   b443a:	bf3e      	ittt	cc
   b443c:	7d29      	ldrbcc	r1, [r5, #20]
   b443e:	1a5b      	subcc	r3, r3, r1
   b4440:	54a3      	strbcc	r3, [r4, r2]
   b4442:	e7f0      	b.n	b4426 <_Z8lHandlerv+0xb6>
   b4444:	b105      	cbz	r5, b4448 <_Z8lHandlerv+0xd8>
   b4446:	7022      	strb	r2, [r4, #0]
}
   b4448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b444c:	2003da90 	.word	0x2003da90
   b4450:	2003dd6c 	.word	0x2003dd6c
   b4454:	000c0918 	.word	0x000c0918
   b4458:	2003da91 	.word	0x2003da91
   b445c:	2003dcc8 	.word	0x2003dcc8
   b4460:	2003dd61 	.word	0x2003dd61
   b4464:	000c0926 	.word	0x000c0926
   b4468:	000c0941 	.word	0x000c0941
   b446c:	2003dc8c 	.word	0x2003dc8c
   b4470:	2003dcb8 	.word	0x2003dcb8
   b4474:	2003de13 	.word	0x2003de13

000b4478 <_Z8rHandlerv>:
void rHandler(){
   b4478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    redrawMenu = true;  
   b447c:	4b33      	ldr	r3, [pc, #204]	; (b454c <_Z8rHandlerv+0xd4>)
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b447e:	4c34      	ldr	r4, [pc, #208]	; (b4550 <_Z8rHandlerv+0xd8>)
    redrawMenu = true;  
   b4480:	2201      	movs	r2, #1
   b4482:	701a      	strb	r2, [r3, #0]
   b4484:	f005 f9e6 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4488:	6823      	ldr	r3, [r4, #0]
   b448a:	1ac0      	subs	r0, r0, r3
   b448c:	2895      	cmp	r0, #149	; 0x95
   b448e:	d91e      	bls.n	b44ce <_Z8rHandlerv+0x56>
   b4490:	f005 f9e0 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b4494:	6020      	str	r0, [r4, #0]
    Serial.println("Right trigger");
   b4496:	f009 f8b5 	bl	bd604 <_Z16_fetch_usbserialv>
   b449a:	492e      	ldr	r1, [pc, #184]	; (b4554 <_Z8rHandlerv+0xdc>)
   b449c:	f008 fcbd 	bl	bce1a <_ZN5Print7printlnEPKc>
    if(selectingBots){
   b44a0:	4b2d      	ldr	r3, [pc, #180]	; (b4558 <_Z8rHandlerv+0xe0>)
   b44a2:	781a      	ldrb	r2, [r3, #0]
   b44a4:	4b2d      	ldr	r3, [pc, #180]	; (b455c <_Z8rHandlerv+0xe4>)
   b44a6:	b1c2      	cbz	r2, b44da <_Z8rHandlerv+0x62>
      : _M_current(__i) { }
   b44a8:	685c      	ldr	r4, [r3, #4]
        if(botSelect != WaterBots.back().botNum){
   b44aa:	4d2d      	ldr	r5, [pc, #180]	; (b4560 <_Z8rHandlerv+0xe8>)
   b44ac:	f814 2c3a 	ldrb.w	r2, [r4, #-58]
   b44b0:	7828      	ldrb	r0, [r5, #0]
   b44b2:	4282      	cmp	r2, r0
   b44b4:	d00b      	beq.n	b44ce <_Z8rHandlerv+0x56>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b44b6:	681b      	ldr	r3, [r3, #0]
            bool findCurrent = false;
   b44b8:	2200      	movs	r2, #0
            for(WaterBot &ws: WaterBots){
   b44ba:	429c      	cmp	r4, r3
   b44bc:	461e      	mov	r6, r3
   b44be:	d006      	beq.n	b44ce <_Z8rHandlerv+0x56>
                if(findCurrent){
   b44c0:	333c      	adds	r3, #60	; 0x3c
                    botSelect = ws.botNum;
   b44c2:	f813 1c3a 	ldrb.w	r1, [r3, #-58]
                if(findCurrent){
   b44c6:	b122      	cbz	r2, b44d2 <_Z8rHandlerv+0x5a>
                    ControlledBot = &ws;
   b44c8:	4b26      	ldr	r3, [pc, #152]	; (b4564 <_Z8rHandlerv+0xec>)
                    botSelect = ws.botNum;
   b44ca:	7029      	strb	r1, [r5, #0]
                    ControlledBot = &ws;
   b44cc:	601e      	str	r6, [r3, #0]
}
   b44ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if(ws.botNum == botSelect) findCurrent = true;
   b44d2:	1a41      	subs	r1, r0, r1
   b44d4:	424a      	negs	r2, r1
   b44d6:	414a      	adcs	r2, r1
	return *this;
   b44d8:	e7ef      	b.n	b44ba <_Z8rHandlerv+0x42>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b44da:	e9d3 4600 	ldrd	r4, r6, [r3]
            if(ws.botNum == botSelect){
   b44de:	4f20      	ldr	r7, [pc, #128]	; (b4560 <_Z8rHandlerv+0xe8>)
                MenuItem *curItem = SelectedItem;
   b44e0:	f8df 808c 	ldr.w	r8, [pc, #140]	; b4570 <_Z8rHandlerv+0xf8>
                modifiedValue = true;
   b44e4:	f8df 908c 	ldr.w	r9, [pc, #140]	; b4574 <_Z8rHandlerv+0xfc>
        for(WaterBot &ws: WaterBots){
   b44e8:	42a6      	cmp	r6, r4
   b44ea:	d0f0      	beq.n	b44ce <_Z8rHandlerv+0x56>
            if(ws.botNum == botSelect){
   b44ec:	78a2      	ldrb	r2, [r4, #2]
   b44ee:	783b      	ldrb	r3, [r7, #0]
   b44f0:	429a      	cmp	r2, r3
   b44f2:	d120      	bne.n	b4536 <_Z8rHandlerv+0xbe>
                MenuItem *curItem = SelectedItem;
   b44f4:	f8d8 5000 	ldr.w	r5, [r8]
                Serial.println(curItem->itemName);
   b44f8:	f009 f884 	bl	bd604 <_Z16_fetch_usbserialv>
   b44fc:	f105 011a 	add.w	r1, r5, #26
   b4500:	f008 fc8b 	bl	bce1a <_ZN5Print7printlnEPKc>
                if(curItem == nullptr) return;
   b4504:	2d00      	cmp	r5, #0
   b4506:	d0e2      	beq.n	b44ce <_Z8rHandlerv+0x56>
                if(curItem->statOnly) return;
   b4508:	7deb      	ldrb	r3, [r5, #23]
   b450a:	2b00      	cmp	r3, #0
   b450c:	d1df      	bne.n	b44ce <_Z8rHandlerv+0x56>
                if(curItem->onOffSetting){
   b450e:	7d6b      	ldrb	r3, [r5, #21]
   b4510:	b19b      	cbz	r3, b453a <_Z8rHandlerv+0xc2>
                    Serial.println("Modified an On/Off Control");
   b4512:	f009 f877 	bl	bd604 <_Z16_fetch_usbserialv>
   b4516:	4914      	ldr	r1, [pc, #80]	; (b4568 <_Z8rHandlerv+0xf0>)
   b4518:	f008 fc7f 	bl	bce1a <_ZN5Print7printlnEPKc>
                    ws.*(curItem->MethodPointerBool) = true;
   b451c:	692b      	ldr	r3, [r5, #16]
   b451e:	2201      	movs	r2, #1
   b4520:	54e2      	strb	r2, [r4, r3]
                    Serial.printlnf("Bot: %d, Modified ",ws.botNum);
   b4522:	f009 f86f 	bl	bd604 <_Z16_fetch_usbserialv>
   b4526:	78a2      	ldrb	r2, [r4, #2]
   b4528:	4910      	ldr	r1, [pc, #64]	; (b456c <_Z8rHandlerv+0xf4>)
   b452a:	f7ff ff13 	bl	b4354 <_ZN5Print8printlnfEPKcz>
                modifiedValue = true;
   b452e:	2301      	movs	r3, #1
   b4530:	f889 3000 	strb.w	r3, [r9]
                ws.updatedControl = true;
   b4534:	7063      	strb	r3, [r4, #1]
      operator++() _GLIBCXX_NOEXCEPT
   b4536:	343c      	adds	r4, #60	; 0x3c
	return *this;
   b4538:	e7d6      	b.n	b44e8 <_Z8rHandlerv+0x70>
                    if(ws.*(curItem->MethodPointer) < curItem->maxVal) ws.*(curItem->MethodPointer) += curItem->stepSize;
   b453a:	68ea      	ldr	r2, [r5, #12]
   b453c:	7e69      	ldrb	r1, [r5, #25]
   b453e:	5ca3      	ldrb	r3, [r4, r2]
   b4540:	4299      	cmp	r1, r3
   b4542:	bf82      	ittt	hi
   b4544:	7d29      	ldrbhi	r1, [r5, #20]
   b4546:	185b      	addhi	r3, r3, r1
   b4548:	54a3      	strbhi	r3, [r4, r2]
   b454a:	e7f0      	b.n	b452e <_Z8rHandlerv+0xb6>
   b454c:	2003da90 	.word	0x2003da90
   b4550:	2003dd6c 	.word	0x2003dd6c
   b4554:	000c0918 	.word	0x000c0918
   b4558:	2003da91 	.word	0x2003da91
   b455c:	2003dcc8 	.word	0x2003dcc8
   b4560:	2003dd61 	.word	0x2003dd61
   b4564:	2003dc8c 	.word	0x2003dc8c
   b4568:	000c0926 	.word	0x000c0926
   b456c:	000c0941 	.word	0x000c0941
   b4570:	2003dcb8 	.word	0x2003dcb8
   b4574:	2003de13 	.word	0x2003de13

000b4578 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4578:	b510      	push	{r4, lr}
      if (_M_manager)
   b457a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b457c:	4604      	mov	r4, r0
      if (_M_manager)
   b457e:	b113      	cbz	r3, b4586 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4580:	2203      	movs	r2, #3
   b4582:	4601      	mov	r1, r0
   b4584:	4798      	blx	r3
    }
   b4586:	4620      	mov	r0, r4
   b4588:	bd10      	pop	{r4, pc}
	...

000b458c <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b458c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b458e:	4b13      	ldr	r3, [pc, #76]	; (b45dc <_ZN5TimerD1Ev+0x50>)
   b4590:	6003      	str	r3, [r0, #0]
   b4592:	4604      	mov	r4, r0
        if (handle) {
   b4594:	6880      	ldr	r0, [r0, #8]
   b4596:	b1c8      	cbz	r0, b45cc <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4598:	2500      	movs	r5, #0
   b459a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b459e:	e9cd 3500 	strd	r3, r5, [sp]
   b45a2:	2102      	movs	r1, #2
   b45a4:	462b      	mov	r3, r5
   b45a6:	462a      	mov	r2, r5
   b45a8:	f005 f914 	bl	b97d4 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b45ac:	68a0      	ldr	r0, [r4, #8]
   b45ae:	4629      	mov	r1, r5
   b45b0:	f005 f930 	bl	b9814 <os_timer_set_id>
            while (running) {
   b45b4:	7923      	ldrb	r3, [r4, #4]
   b45b6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b45ba:	b113      	cbz	r3, b45c2 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b45bc:	f005 f8e2 	bl	b9784 <os_thread_yield>
            while (running) {
   b45c0:	e7f8      	b.n	b45b4 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b45c2:	68a0      	ldr	r0, [r4, #8]
   b45c4:	4629      	mov	r1, r5
   b45c6:	f005 f8f5 	bl	b97b4 <os_timer_destroy>
            handle = nullptr;
   b45ca:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b45cc:	f104 000c 	add.w	r0, r4, #12
   b45d0:	f7ff ffd2 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
    }
   b45d4:	4620      	mov	r0, r4
   b45d6:	b003      	add	sp, #12
   b45d8:	bd30      	pop	{r4, r5, pc}
   b45da:	bf00      	nop
   b45dc:	000c0ec8 	.word	0x000c0ec8

000b45e0 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b45e0:	b510      	push	{r4, lr}
   b45e2:	4604      	mov	r4, r0
    }
   b45e4:	f7ff ffd2 	bl	b458c <_ZN5TimerD1Ev>
   b45e8:	4620      	mov	r0, r4
   b45ea:	211c      	movs	r1, #28
   b45ec:	f7ff fd57 	bl	b409e <_ZdlPvj>
   b45f0:	4620      	mov	r0, r4
   b45f2:	bd10      	pop	{r4, pc}

000b45f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b45f4:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b45f6:	6843      	ldr	r3, [r0, #4]
   b45f8:	3b01      	subs	r3, #1
    {
   b45fa:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b45fc:	6043      	str	r3, [r0, #4]
   b45fe:	b963      	cbnz	r3, b461a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b4600:	6803      	ldr	r3, [r0, #0]
   b4602:	689b      	ldr	r3, [r3, #8]
   b4604:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4606:	68a3      	ldr	r3, [r4, #8]
   b4608:	3b01      	subs	r3, #1
   b460a:	60a3      	str	r3, [r4, #8]
   b460c:	b92b      	cbnz	r3, b461a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b460e:	6823      	ldr	r3, [r4, #0]
   b4610:	4620      	mov	r0, r4
   b4612:	68db      	ldr	r3, [r3, #12]
        }
    }
   b4614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4618:	4718      	bx	r3
    }
   b461a:	bd10      	pop	{r4, pc}

000b461c <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b461c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b461e:	468c      	mov	ip, r1
   b4620:	2500      	movs	r5, #0
   b4622:	4914      	ldr	r1, [pc, #80]	; (b4674 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b4624:	7105      	strb	r5, [r0, #4]
   b4626:	4604      	mov	r4, r0
   b4628:	6085      	str	r5, [r0, #8]
   b462a:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b462c:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4630:	b085      	sub	sp, #20
   b4632:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4634:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4638:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b463c:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4640:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4644:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4648:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b464c:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b464e:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b4650:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4652:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4654:	6095      	str	r5, [r2, #8]
   b4656:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4658:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b465a:	e9cd 3500 	strd	r3, r5, [sp]
   b465e:	4a06      	ldr	r2, [pc, #24]	; (b4678 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b4660:	4623      	mov	r3, r4
   b4662:	4661      	mov	r1, ip
   b4664:	f104 0008 	add.w	r0, r4, #8
   b4668:	f005 f89c 	bl	b97a4 <os_timer_create>
    }
   b466c:	4620      	mov	r0, r4
   b466e:	b005      	add	sp, #20
   b4670:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4672:	bf00      	nop
   b4674:	000c0ec8 	.word	0x000c0ec8
   b4678:	000b4181 	.word	0x000b4181

000b467c <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b467c:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b467e:	460a      	mov	r2, r1
   b4680:	4901      	ldr	r1, [pc, #4]	; (b4688 <_ZN7FatFile4openEPKci+0xc>)
   b4682:	6809      	ldr	r1, [r1, #0]
   b4684:	f002 be13 	b.w	b72ae <_ZN7FatFile4openEPS_PKci>
   b4688:	2003e640 	.word	0x2003e640

000b468c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void offloadDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b468c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b468e:	b095      	sub	sp, #84	; 0x54
   b4690:	4604      	mov	r4, r0
   b4692:	af00      	add	r7, sp, #0
   b4694:	460d      	mov	r5, r1
    memset(fileCommand,0,8 + MAX_FILENAME_LEN);
   b4696:	221e      	movs	r2, #30
   b4698:	2100      	movs	r1, #0
   b469a:	f107 0030 	add.w	r0, r7, #48	; 0x30
   b469e:	f00a f864 	bl	be76a <memset>
    memcpy(fileCommand,data,8);
   b46a2:	6820      	ldr	r0, [r4, #0]
   b46a4:	6861      	ldr	r1, [r4, #4]
   b46a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b46aa:	c303      	stmia	r3!, {r0, r1}
    if(fileCommand[0] == 'f'){
   b46ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   b46b0:	2b66      	cmp	r3, #102	; 0x66
    Serial.println(dataStr);
   b46b2:	466e      	mov	r6, sp
    if(fileCommand[0] == 'f'){
   b46b4:	d168      	bne.n	b4788 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
        if(!strcmp(fileCommand,"filename")){
   b46b6:	493e      	ldr	r1, [pc, #248]	; (b47b0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x124>)
   b46b8:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b46bc:	f00a f8d9 	bl	be872 <strcmp>
   b46c0:	2800      	cmp	r0, #0
   b46c2:	d13e      	bne.n	b4742 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb6>
    return m_attr;
   b46c4:	483b      	ldr	r0, [pc, #236]	; (b47b4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b46c6:	7c03      	ldrb	r3, [r0, #16]
   b46c8:	b113      	cbz	r3, b46d0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>
   b46ca:	3010      	adds	r0, #16
   b46cc:	f002 fde8 	bl	b72a0 <_ZN7FatFile5closeEv>
            memcpy(fileCommand,data,8 + MAX_FILENAME_LEN);
   b46d0:	4623      	mov	r3, r4
   b46d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
   b46d6:	f104 0520 	add.w	r5, r4, #32
   b46da:	6818      	ldr	r0, [r3, #0]
   b46dc:	6859      	ldr	r1, [r3, #4]
   b46de:	4614      	mov	r4, r2
   b46e0:	c403      	stmia	r4!, {r0, r1}
   b46e2:	3308      	adds	r3, #8
   b46e4:	42ab      	cmp	r3, r5
   b46e6:	4622      	mov	r2, r4
   b46e8:	d1f7      	bne.n	b46da <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>
   b46ea:	6818      	ldr	r0, [r3, #0]
   b46ec:	6020      	str	r0, [r4, #0]
   b46ee:	889b      	ldrh	r3, [r3, #4]
   b46f0:	80a3      	strh	r3, [r4, #4]
            strncpy(offloadFilename,fileCommand+8,MAX_FILENAME_LEN);
   b46f2:	221e      	movs	r2, #30
   b46f4:	f107 0130 	add.w	r1, r7, #48	; 0x30
   b46f8:	482f      	ldr	r0, [pc, #188]	; (b47b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b46fa:	f00a f906 	bl	be90a <strncpy>
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b46fe:	2300      	movs	r3, #0
    return file.open(this, path, O_RDONLY);
   b4700:	4a2d      	ldr	r2, [pc, #180]	; (b47b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4702:	492e      	ldr	r1, [pc, #184]	; (b47bc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4704:	607b      	str	r3, [r7, #4]
    return file.open(this, path, O_RDONLY);
   b4706:	1d38      	adds	r0, r7, #4
   b4708:	f002 fdd1 	bl	b72ae <_ZN7FatFile4openEPS_PKci>
            if(sd.exists(offloadFilename)){
   b470c:	b148      	cbz	r0, b4722 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x96>
                Serial.printlnf("File '%s' already exists, deleting and overwriting",offloadFilename);
   b470e:	f008 ff79 	bl	bd604 <_Z16_fetch_usbserialv>
   b4712:	492b      	ldr	r1, [pc, #172]	; (b47c0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
   b4714:	4a28      	ldr	r2, [pc, #160]	; (b47b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4716:	f7ff fe1d 	bl	b4354 <_ZN5Print8printlnfEPKcz>
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   b471a:	4927      	ldr	r1, [pc, #156]	; (b47b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b471c:	4827      	ldr	r0, [pc, #156]	; (b47bc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
   b471e:	f002 fe12 	bl	b7346 <_ZN7FatFile6removeEPS_PKc>
            Serial.printlnf("Starting offload of file: %s",offloadFilename);
   b4722:	f008 ff6f 	bl	bd604 <_Z16_fetch_usbserialv>
   b4726:	4a24      	ldr	r2, [pc, #144]	; (b47b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4728:	4926      	ldr	r1, [pc, #152]	; (b47c4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   b472a:	f7ff fe13 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            myFile.open(offloadFilename, O_RDWR | O_CREAT | O_AT_END);
   b472e:	4922      	ldr	r1, [pc, #136]	; (b47b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4730:	4825      	ldr	r0, [pc, #148]	; (b47c8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b4732:	f244 2202 	movw	r2, #16898	; 0x4202
   b4736:	f7ff ffa1 	bl	b467c <_ZN7FatFile4openEPKci>
}
   b473a:	3754      	adds	r7, #84	; 0x54
   b473c:	46b5      	mov	sp, r6
   b473e:	46bd      	mov	sp, r7
   b4740:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(!strcmp(fileCommand,"filecomp")){
   b4742:	4922      	ldr	r1, [pc, #136]	; (b47cc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>)
   b4744:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4748:	f00a f893 	bl	be872 <strcmp>
   b474c:	b968      	cbnz	r0, b476a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xde>
            Serial.printlnf("Reached end of file: %s",offloadFilename);
   b474e:	f008 ff59 	bl	bd604 <_Z16_fetch_usbserialv>
   b4752:	4a19      	ldr	r2, [pc, #100]	; (b47b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4754:	491e      	ldr	r1, [pc, #120]	; (b47d0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>)
   b4756:	f7ff fdfd 	bl	b4354 <_ZN5Print8printlnfEPKcz>
    return m_attr;
   b475a:	4b16      	ldr	r3, [pc, #88]	; (b47b4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b475c:	7c1b      	ldrb	r3, [r3, #16]
   b475e:	2b00      	cmp	r3, #0
   b4760:	d0eb      	beq.n	b473a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b4762:	4819      	ldr	r0, [pc, #100]	; (b47c8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b4764:	f002 fd9c 	bl	b72a0 <_ZN7FatFile5closeEv>
   b4768:	e7e7      	b.n	b473a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
        else if(!strcmp(fileCommand,"filedone")){
   b476a:	491a      	ldr	r1, [pc, #104]	; (b47d4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
   b476c:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4770:	f00a f87f 	bl	be872 <strcmp>
   b4774:	b940      	cbnz	r0, b4788 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
            Serial.println("Received done command");
   b4776:	f008 ff45 	bl	bd604 <_Z16_fetch_usbserialv>
   b477a:	4917      	ldr	r1, [pc, #92]	; (b47d8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>)
   b477c:	f008 fb4d 	bl	bce1a <_ZN5Print7printlnEPKc>
            offloadingDone = true;
   b4780:	4b16      	ldr	r3, [pc, #88]	; (b47dc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x150>)
   b4782:	2201      	movs	r2, #1
   b4784:	701a      	strb	r2, [r3, #0]
   b4786:	e7e8      	b.n	b475a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xce>
    char dataStr[len];
   b4788:	1deb      	adds	r3, r5, #7
   b478a:	f023 0307 	bic.w	r3, r3, #7
   b478e:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(dataStr,data,len);
   b4792:	462a      	mov	r2, r5
   b4794:	4621      	mov	r1, r4
   b4796:	4668      	mov	r0, sp
   b4798:	f009 ffbf 	bl	be71a <memcpy>
    myFile.print(dataStr);
   b479c:	4669      	mov	r1, sp
   b479e:	4805      	ldr	r0, [pc, #20]	; (b47b4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
   b47a0:	f008 fb28 	bl	bcdf4 <_ZN5Print5printEPKc>
    Serial.println(dataStr);
   b47a4:	f008 ff2e 	bl	bd604 <_Z16_fetch_usbserialv>
   b47a8:	4669      	mov	r1, sp
   b47aa:	f008 fb36 	bl	bce1a <_ZN5Print7printlnEPKc>
   b47ae:	e7c4      	b.n	b473a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b47b0:	000c0954 	.word	0x000c0954
   b47b4:	2003de14 	.word	0x2003de14
   b47b8:	2003de48 	.word	0x2003de48
   b47bc:	2003e5f0 	.word	0x2003e5f0
   b47c0:	000c095d 	.word	0x000c095d
   b47c4:	000c0990 	.word	0x000c0990
   b47c8:	2003de24 	.word	0x2003de24
   b47cc:	000c09ad 	.word	0x000c09ad
   b47d0:	000c09b6 	.word	0x000c09b6
   b47d4:	000c09ce 	.word	0x000c09ce
   b47d8:	000c09d7 	.word	0x000c09d7
   b47dc:	2003de66 	.word	0x2003de66

000b47e0 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b47e0:	b530      	push	{r4, r5, lr}
   b47e2:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b47e4:	4b1b      	ldr	r3, [pc, #108]	; (b4854 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b47e6:	9300      	str	r3, [sp, #0]
   b47e8:	7913      	ldrb	r3, [r2, #4]
   b47ea:	f88d 3004 	strb.w	r3, [sp, #4]
   b47ee:	6893      	ldr	r3, [r2, #8]
   b47f0:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b47f2:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b47f6:	8993      	ldrh	r3, [r2, #12]
   b47f8:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b47fc:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b47fe:	460a      	mov	r2, r1
   b4800:	466b      	mov	r3, sp
   b4802:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b4806:	4628      	mov	r0, r5
   b4808:	f003 fc70 	bl	b80ec <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b480c:	b910      	cbnz	r0, b4814 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b480e:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b4810:	b005      	add	sp, #20
   b4812:	bd30      	pop	{r4, r5, pc}
    m_blockDev = blockDev;
   b4814:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b4816:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b481a:	4628      	mov	r0, r5
   b481c:	f002 fd40 	bl	b72a0 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b4820:	2101      	movs	r1, #1
   b4822:	4620      	mov	r0, r4
   b4824:	f003 fb0c 	bl	b7e40 <_ZN9FatVolume4initEh>
   b4828:	4601      	mov	r1, r0
   b482a:	b168      	cbz	r0, b4848 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b482c:	4621      	mov	r1, r4
   b482e:	4628      	mov	r0, r5
   b4830:	f002 fb6d 	bl	b6f0e <_ZN7FatFile8openRootEP9FatVolume>
   b4834:	2800      	cmp	r0, #0
   b4836:	d0ea      	beq.n	b480e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b4838:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b483c:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4840:	d0e5      	beq.n	b480e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b4842:	4b05      	ldr	r3, [pc, #20]	; (b4858 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b4844:	601d      	str	r5, [r3, #0]
    return true;
   b4846:	e7e3      	b.n	b4810 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b4848:	4620      	mov	r0, r4
   b484a:	f003 faf9 	bl	b7e40 <_ZN9FatVolume4initEh>
   b484e:	2800      	cmp	r0, #0
   b4850:	d1ec      	bne.n	b482c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b4852:	e7dc      	b.n	b480e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b4854:	000c0eb4 	.word	0x000c0eb4
   b4858:	2003e640 	.word	0x2003e640

000b485c <_ZN8WaterBotC1Ev>:
class WaterBot{
   b485c:	f240 1201 	movw	r2, #257	; 0x101
   b4860:	8002      	strh	r2, [r0, #0]
   b4862:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   b4866:	6082      	str	r2, [r0, #8]
   b4868:	4a08      	ldr	r2, [pc, #32]	; (b488c <_ZN8WaterBotC1Ev+0x30>)
   b486a:	6102      	str	r2, [r0, #16]
   b486c:	2100      	movs	r1, #0
   b486e:	6142      	str	r2, [r0, #20]
   b4870:	2200      	movs	r2, #0
   b4872:	70c1      	strb	r1, [r0, #3]
   b4874:	71c1      	strb	r1, [r0, #7]
   b4876:	7301      	strb	r1, [r0, #12]
   b4878:	6182      	str	r2, [r0, #24]
   b487a:	61c2      	str	r2, [r0, #28]
   b487c:	6202      	str	r2, [r0, #32]
   b487e:	6242      	str	r2, [r0, #36]	; 0x24
   b4880:	6282      	str	r2, [r0, #40]	; 0x28
   b4882:	62c2      	str	r2, [r0, #44]	; 0x2c
   b4884:	6302      	str	r2, [r0, #48]	; 0x30
   b4886:	6341      	str	r1, [r0, #52]	; 0x34
   b4888:	4770      	bx	lr
   b488a:	bf00      	nop
   b488c:	c479c000 	.word	0xc479c000

000b4890 <_Z17processRPiCommandPKch>:
void processRPiCommand(const char *command, uint8_t mode){
   b4890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4894:	b094      	sub	sp, #80	; 0x50
    if(command[0] == 'R' && command[1] == 'P'){  
   b4896:	7803      	ldrb	r3, [r0, #0]
   b4898:	2b52      	cmp	r3, #82	; 0x52
void processRPiCommand(const char *command, uint8_t mode){
   b489a:	af06      	add	r7, sp, #24
   b489c:	4604      	mov	r4, r0
   b489e:	4688      	mov	r8, r1
    if(command[0] == 'R' && command[1] == 'P'){  
   b48a0:	d177      	bne.n	b4992 <_Z17processRPiCommandPKch+0x102>
   b48a2:	7843      	ldrb	r3, [r0, #1]
   b48a4:	2b50      	cmp	r3, #80	; 0x50
   b48a6:	d174      	bne.n	b4992 <_Z17processRPiCommandPKch+0x102>
        Serial.println("Received Pi command");
   b48a8:	f008 feac 	bl	bd604 <_Z16_fetch_usbserialv>
   b48ac:	496d      	ldr	r1, [pc, #436]	; (b4a64 <_Z17processRPiCommandPKch+0x1d4>)
   b48ae:	f008 fab4 	bl	bce1a <_ZN5Print7printlnEPKc>
        char dataStr[strlen(command)-8];
   b48b2:	4620      	mov	r0, r4
   b48b4:	f00a f80d 	bl	be8d2 <strlen>
   b48b8:	3801      	subs	r0, #1
   b48ba:	f020 0007 	bic.w	r0, r0, #7
        }
   b48be:	466e      	mov	r6, sp
        char dataStr[strlen(command)-8];
   b48c0:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b48c4:	4620      	mov	r0, r4
   b48c6:	f00a f804 	bl	be8d2 <strlen>
        char dataStr[strlen(command)-8];
   b48ca:	f10d 0918 	add.w	r9, sp, #24
        dataStr[strlen(command)-9] = '\0';
   b48ce:	4448      	add	r0, r9
   b48d0:	2500      	movs	r5, #0
   b48d2:	f800 5c09 	strb.w	r5, [r0, #-9]
        checkStr[0] = command[strlen(command)-2];
   b48d6:	4620      	mov	r0, r4
        cmdStr[3] = '\0';
   b48d8:	74fd      	strb	r5, [r7, #19]
        checkStr[0] = command[strlen(command)-2];
   b48da:	f009 fffa 	bl	be8d2 <strlen>
   b48de:	4420      	add	r0, r4
   b48e0:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b48e4:	733b      	strb	r3, [r7, #12]
        checkStr[1] = command[strlen(command)-1];
   b48e6:	4620      	mov	r0, r4
   b48e8:	f009 fff3 	bl	be8d2 <strlen>
   b48ec:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b48ee:	4629      	mov	r1, r5
        checkStr[1] = command[strlen(command)-1];
   b48f0:	f810 3c01 	ldrb.w	r3, [r0, #-1]
        checkStr[2] = '\0';
   b48f4:	73bd      	strb	r5, [r7, #14]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b48f6:	2210      	movs	r2, #16
   b48f8:	f107 000c 	add.w	r0, r7, #12
        checkStr[1] = command[strlen(command)-1];
   b48fc:	737b      	strb	r3, [r7, #13]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b48fe:	f00a fed3 	bl	bf6a8 <strtol>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4902:	2504      	movs	r5, #4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4904:	4682      	mov	sl, r0
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4906:	4620      	mov	r0, r4
   b4908:	f009 ffe3 	bl	be8d2 <strlen>
   b490c:	3802      	subs	r0, #2
   b490e:	4285      	cmp	r5, r0
   b4910:	d212      	bcs.n	b4938 <_Z17processRPiCommandPKch+0xa8>
            if(i < 7) cmdStr[i-4] = command[i];
   b4912:	2d06      	cmp	r5, #6
   b4914:	bf9b      	ittet	ls
   b4916:	f107 0338 	addls.w	r3, r7, #56	; 0x38
   b491a:	195b      	addls	r3, r3, r5
            else dataStr[i-7] = command[i];
   b491c:	eb09 0305 	addhi.w	r3, r9, r5
            if(i < 7) cmdStr[i-4] = command[i];
   b4920:	5d62      	ldrbls	r2, [r4, r5]
            else dataStr[i-7] = command[i];
   b4922:	bf8c      	ite	hi
   b4924:	5d62      	ldrbhi	r2, [r4, r5]
            if(i < 7) cmdStr[i-4] = command[i];
   b4926:	f803 2c2c 	strbls.w	r2, [r3, #-44]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b492a:	f105 0501 	add.w	r5, r5, #1
            else dataStr[i-7] = command[i];
   b492e:	bf88      	it	hi
   b4930:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4934:	b2ed      	uxtb	r5, r5
   b4936:	e7e6      	b.n	b4906 <_Z17processRPiCommandPKch+0x76>
        if(checksum != strlen(command)-2){
   b4938:	fa5f fa8a 	uxtb.w	sl, sl
   b493c:	4550      	cmp	r0, sl
   b493e:	d02c      	beq.n	b499a <_Z17processRPiCommandPKch+0x10a>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b4940:	f008 fe60 	bl	bd604 <_Z16_fetch_usbserialv>
   b4944:	4681      	mov	r9, r0
   b4946:	4620      	mov	r0, r4
   b4948:	f009 ffc3 	bl	be8d2 <strlen>
   b494c:	4653      	mov	r3, sl
   b494e:	1e82      	subs	r2, r0, #2
   b4950:	4945      	ldr	r1, [pc, #276]	; (b4a68 <_Z17processRPiCommandPKch+0x1d8>)
   b4952:	4648      	mov	r0, r9
   b4954:	f7ff fcfe 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            Serial.println("Warning, checksum does not match");
   b4958:	f008 fe54 	bl	bd604 <_Z16_fetch_usbserialv>
   b495c:	4943      	ldr	r1, [pc, #268]	; (b4a6c <_Z17processRPiCommandPKch+0x1dc>)
   b495e:	f008 fa5c 	bl	bce1a <_ZN5Print7printlnEPKc>
            if((command[1] >= '0' && command[1] <= '9') || command[1] == 'C'){
   b4962:	7863      	ldrb	r3, [r4, #1]
   b4964:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b4968:	2a09      	cmp	r2, #9
   b496a:	d901      	bls.n	b4970 <_Z17processRPiCommandPKch+0xe0>
   b496c:	2b43      	cmp	r3, #67	; 0x43
   b496e:	d10f      	bne.n	b4990 <_Z17processRPiCommandPKch+0x100>
                rxBotNum[0] = command[0];
   b4970:	7822      	ldrb	r2, [r4, #0]
   b4972:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
                rxBotNum[1] = command[1];
   b4976:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                sprintf(errBuf,"CC%2snak%3s",rxBotNum,cmdStr);
   b497a:	493d      	ldr	r1, [pc, #244]	; (b4a70 <_Z17processRPiCommandPKch+0x1e0>)
   b497c:	483d      	ldr	r0, [pc, #244]	; (b4a74 <_Z17processRPiCommandPKch+0x1e4>)
   b497e:	f107 0310 	add.w	r3, r7, #16
   b4982:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   b4986:	f005 f9f1 	bl	b9d6c <sprintf>
                errModeReply = mode;
   b498a:	4b3b      	ldr	r3, [pc, #236]	; (b4a78 <_Z17processRPiCommandPKch+0x1e8>)
   b498c:	f883 8000 	strb.w	r8, [r3]
   b4990:	46b5      	mov	sp, r6
}
   b4992:	3738      	adds	r7, #56	; 0x38
   b4994:	46bd      	mov	sp, r7
   b4996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(!strcmp(cmdStr,"ctl")){
   b499a:	4938      	ldr	r1, [pc, #224]	; (b4a7c <_Z17processRPiCommandPKch+0x1ec>)
   b499c:	f107 0010 	add.w	r0, r7, #16
   b49a0:	f009 ff67 	bl	be872 <strcmp>
   b49a4:	4605      	mov	r5, r0
   b49a6:	2800      	cmp	r0, #0
   b49a8:	d1f2      	bne.n	b4990 <_Z17processRPiCommandPKch+0x100>
            sscanf(dataStr,"%s %s %s %d %d %d %d",idStr,GPSLatstr,GPSLonstr,&drivemode,&offloading,&recording,&signal);
   b49aa:	1dfb      	adds	r3, r7, #7
   b49ac:	9304      	str	r3, [sp, #16]
   b49ae:	1dbb      	adds	r3, r7, #6
   b49b0:	9303      	str	r3, [sp, #12]
   b49b2:	1d3b      	adds	r3, r7, #4
   b49b4:	9302      	str	r3, [sp, #8]
   b49b6:	f107 082c 	add.w	r8, r7, #44	; 0x2c
   b49ba:	1d7b      	adds	r3, r7, #5
   b49bc:	4930      	ldr	r1, [pc, #192]	; (b4a80 <_Z17processRPiCommandPKch+0x1f0>)
   b49be:	9301      	str	r3, [sp, #4]
   b49c0:	f107 0214 	add.w	r2, r7, #20
   b49c4:	f107 0320 	add.w	r3, r7, #32
   b49c8:	f8cd 8000 	str.w	r8, [sp]
   b49cc:	4648      	mov	r0, r9
   b49ce:	f005 f9d5 	bl	b9d7c <sscanf>
            char botChar[2] = {command[8], '\0'};
   b49d2:	7a23      	ldrb	r3, [r4, #8]
   b49d4:	723b      	strb	r3, [r7, #8]
            uint8_t targetBot = atoi(botChar);
   b49d6:	f107 0008 	add.w	r0, r7, #8
            char botChar[2] = {command[8], '\0'};
   b49da:	727d      	strb	r5, [r7, #9]
            uint8_t targetBot = atoi(botChar);
   b49dc:	f009 fe89 	bl	be6f2 <atoi>
   b49e0:	b2c5      	uxtb	r5, r0
            Serial.printlnf("Got a command packet from Pi for Bot %d",targetBot);
   b49e2:	f008 fe0f 	bl	bd604 <_Z16_fetch_usbserialv>
   b49e6:	4927      	ldr	r1, [pc, #156]	; (b4a84 <_Z17processRPiCommandPKch+0x1f4>)
   b49e8:	462a      	mov	r2, r5
   b49ea:	f7ff fcb3 	bl	b4354 <_ZN5Print8printlnfEPKcz>
      : _M_current(__i) { }
   b49ee:	4b26      	ldr	r3, [pc, #152]	; (b4a88 <_Z17processRPiCommandPKch+0x1f8>)
   b49f0:	e9d3 3100 	ldrd	r3, r1, [r3]
            for(WaterBot &wb: WaterBots){
   b49f4:	4299      	cmp	r1, r3
   b49f6:	461c      	mov	r4, r3
   b49f8:	d0ca      	beq.n	b4990 <_Z17processRPiCommandPKch+0x100>
                if(wb.botNum == targetBot){
   b49fa:	78a2      	ldrb	r2, [r4, #2]
   b49fc:	42aa      	cmp	r2, r5
   b49fe:	f103 033c 	add.w	r3, r3, #60	; 0x3c
   b4a02:	d1f7      	bne.n	b49f4 <_Z17processRPiCommandPKch+0x164>
                    wb.TargetLat = atof(GPSLatstr);
   b4a04:	f107 0020 	add.w	r0, r7, #32
   b4a08:	f009 fe70 	bl	be6ec <atof>
   b4a0c:	ec51 0b10 	vmov	r0, r1, d0
   b4a10:	f009 fdf8 	bl	be604 <__aeabi_d2f>
   b4a14:	6120      	str	r0, [r4, #16]
                    wb.TargetLon = atof(GPSLonstr);
   b4a16:	4640      	mov	r0, r8
   b4a18:	f009 fe68 	bl	be6ec <atof>
   b4a1c:	ec51 0b10 	vmov	r0, r1, d0
   b4a20:	f009 fdf0 	bl	be604 <__aeabi_d2f>
                    wb.driveMode = drivemode;
   b4a24:	797b      	ldrb	r3, [r7, #5]
   b4a26:	71e3      	strb	r3, [r4, #7]
                    wb.offloading = offloading;
   b4a28:	793b      	ldrb	r3, [r7, #4]
                    if(botSelect == wb.botNum) redrawMenu = true;
   b4a2a:	78a2      	ldrb	r2, [r4, #2]
                    wb.TargetLon = atof(GPSLonstr);
   b4a2c:	6160      	str	r0, [r4, #20]
                    wb.offloading = offloading;
   b4a2e:	3b00      	subs	r3, #0
   b4a30:	bf18      	it	ne
   b4a32:	2301      	movne	r3, #1
   b4a34:	7323      	strb	r3, [r4, #12]
                    wb.dataRecording = recording;
   b4a36:	79bb      	ldrb	r3, [r7, #6]
   b4a38:	3b00      	subs	r3, #0
   b4a3a:	bf18      	it	ne
   b4a3c:	2301      	movne	r3, #1
   b4a3e:	72e3      	strb	r3, [r4, #11]
                    wb.signal = signal;
   b4a40:	79fb      	ldrb	r3, [r7, #7]
   b4a42:	3b00      	subs	r3, #0
   b4a44:	bf18      	it	ne
   b4a46:	2301      	movne	r3, #1
   b4a48:	7223      	strb	r3, [r4, #8]
                    if(botSelect == wb.botNum) redrawMenu = true;
   b4a4a:	4b10      	ldr	r3, [pc, #64]	; (b4a8c <_Z17processRPiCommandPKch+0x1fc>)
   b4a4c:	781b      	ldrb	r3, [r3, #0]
   b4a4e:	429a      	cmp	r2, r3
   b4a50:	bf08      	it	eq
   b4a52:	4a0f      	ldreq	r2, [pc, #60]	; (b4a90 <_Z17processRPiCommandPKch+0x200>)
   b4a54:	f04f 0301 	mov.w	r3, #1
   b4a58:	bf08      	it	eq
   b4a5a:	7013      	strbeq	r3, [r2, #0]
                    updateControl = true;
   b4a5c:	4a0d      	ldr	r2, [pc, #52]	; (b4a94 <_Z17processRPiCommandPKch+0x204>)
                    wb.updatedControl = true;
   b4a5e:	7063      	strb	r3, [r4, #1]
                    updateControl = true;
   b4a60:	7013      	strb	r3, [r2, #0]
                    return;
   b4a62:	e795      	b.n	b4990 <_Z17processRPiCommandPKch+0x100>
   b4a64:	000c09ed 	.word	0x000c09ed
   b4a68:	000c0a01 	.word	0x000c0a01
   b4a6c:	000c0a1e 	.word	0x000c0a1e
   b4a70:	000c0a3f 	.word	0x000c0a3f
   b4a74:	2003dd70 	.word	0x2003dd70
   b4a78:	2003dd83 	.word	0x2003dd83
   b4a7c:	000c0a4b 	.word	0x000c0a4b
   b4a80:	000c0a4f 	.word	0x000c0a4f
   b4a84:	000c0a64 	.word	0x000c0a64
   b4a88:	2003dcc8 	.word	0x2003dcc8
   b4a8c:	2003dd61 	.word	0x2003dd61
   b4a90:	2003da90 	.word	0x2003da90
   b4a94:	2003e63a 	.word	0x2003e63a

000b4a98 <_Z9setupXBeev>:
void setupXBee(){
   b4a98:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b4a9a:	f008 ff4b 	bl	bd934 <_Z22__fetch_global_Serial1v>
   b4a9e:	4908      	ldr	r1, [pc, #32]	; (b4ac0 <_Z9setupXBeev+0x28>)
   b4aa0:	f7ff fc1f 	bl	b42e2 <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4aa4:	2014      	movs	r0, #20
   b4aa6:	f005 f9b1 	bl	b9e0c <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b4aaa:	f008 ff43 	bl	bd934 <_Z22__fetch_global_Serial1v>
   b4aae:	4905      	ldr	r1, [pc, #20]	; (b4ac4 <_Z9setupXBeev+0x2c>)
   b4ab0:	f7ff fc17 	bl	b42e2 <_ZN5Print6printfEPKcz>
}
   b4ab4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b4ab8:	2014      	movs	r0, #20
   b4aba:	f005 b9a7 	b.w	b9e0c <delay>
   b4abe:	bf00      	nop
   b4ac0:	000c0a8c 	.word	0x000c0a8c
   b4ac4:	000c0e9c 	.word	0x000c0e9c

000b4ac8 <_Z10RPiHandlerv>:
void RPiHandler(){
   b4ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if(logMessages){
   b4acc:	f8df 80dc 	ldr.w	r8, [pc, #220]	; b4bac <_Z10RPiHandlerv+0xe4>
    return m_attr;
   b4ad0:	4d33      	ldr	r5, [pc, #204]	; (b4ba0 <_Z10RPiHandlerv+0xd8>)
                logFile.printlnf("[INFO] Received Raspberry Pi Message: %s",data);
   b4ad2:	f8df 90dc 	ldr.w	r9, [pc, #220]	; b4bb0 <_Z10RPiHandlerv+0xe8>
void RPiHandler(){
   b4ad6:	b089      	sub	sp, #36	; 0x24
   b4ad8:	af00      	add	r7, sp, #0
    while(Serial.available()){
   b4ada:	f008 fd93 	bl	bd604 <_Z16_fetch_usbserialv>
   b4ade:	6803      	ldr	r3, [r0, #0]
   b4ae0:	691b      	ldr	r3, [r3, #16]
   b4ae2:	4798      	blx	r3
   b4ae4:	2800      	cmp	r0, #0
   b4ae6:	d056      	beq.n	b4b96 <_Z10RPiHandlerv+0xce>
            String data = Serial.readStringUntil('\n');
   b4ae8:	f008 fd8c 	bl	bd604 <_Z16_fetch_usbserialv>
   b4aec:	220a      	movs	r2, #10
   b4aee:	4601      	mov	r1, r0
   b4af0:	4638      	mov	r0, r7
   b4af2:	f008 fad7 	bl	bd0a4 <_ZN6Stream15readStringUntilEc>
            Serial.println(data);
   b4af6:	f008 fd85 	bl	bd604 <_Z16_fetch_usbserialv>
   b4afa:	6839      	ldr	r1, [r7, #0]
   b4afc:	f008 f98d 	bl	bce1a <_ZN5Print7printlnEPKc>
            char buffer[data.length()];
   b4b00:	68bb      	ldr	r3, [r7, #8]
   b4b02:	3307      	adds	r3, #7
   b4b04:	f023 0307 	bic.w	r3, r3, #7
    }
   b4b08:	466e      	mov	r6, sp
            char buffer[data.length()];
   b4b0a:	ebad 0d03 	sub.w	sp, sp, r3
   b4b0e:	46ea      	mov	sl, sp
   b4b10:	2300      	movs	r3, #0
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b4b12:	68b9      	ldr	r1, [r7, #8]
   b4b14:	fa1f fb83 	uxth.w	fp, r3
            for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b4b18:	458b      	cmp	fp, r1
   b4b1a:	f103 0401 	add.w	r4, r3, #1
   b4b1e:	d207      	bcs.n	b4b30 <_Z10RPiHandlerv+0x68>
   b4b20:	4659      	mov	r1, fp
   b4b22:	4638      	mov	r0, r7
   b4b24:	f008 fbd8 	bl	bd2d8 <_ZNK6String6charAtEj>
   b4b28:	4623      	mov	r3, r4
   b4b2a:	f80a 000b 	strb.w	r0, [sl, fp]
   b4b2e:	e7f0      	b.n	b4b12 <_Z10RPiHandlerv+0x4a>
            if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b4b30:	2901      	cmp	r1, #1
   b4b32:	d90a      	bls.n	b4b4a <_Z10RPiHandlerv+0x82>
   b4b34:	3901      	subs	r1, #1
   b4b36:	4638      	mov	r0, r7
   b4b38:	f008 fbce 	bl	bd2d8 <_ZNK6String6charAtEj>
   b4b3c:	280d      	cmp	r0, #13
   b4b3e:	bf01      	itttt	eq
   b4b40:	68bb      	ldreq	r3, [r7, #8]
   b4b42:	4453      	addeq	r3, sl
   b4b44:	2200      	moveq	r2, #0
   b4b46:	f803 2c01 	strbeq.w	r2, [r3, #-1]
            processRPiCommand(buffer,3);
   b4b4a:	2103      	movs	r1, #3
   b4b4c:	4650      	mov	r0, sl
   b4b4e:	f7ff fe9f 	bl	b4890 <_Z17processRPiCommandPKch>
            if(logMessages){
   b4b52:	f898 3000 	ldrb.w	r3, [r8]
   b4b56:	b1cb      	cbz	r3, b4b8c <_Z10RPiHandlerv+0xc4>
                if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4b58:	7c2b      	ldrb	r3, [r5, #16]
   b4b5a:	b92b      	cbnz	r3, b4b68 <_Z10RPiHandlerv+0xa0>
   b4b5c:	4911      	ldr	r1, [pc, #68]	; (b4ba4 <_Z10RPiHandlerv+0xdc>)
   b4b5e:	4812      	ldr	r0, [pc, #72]	; (b4ba8 <_Z10RPiHandlerv+0xe0>)
   b4b60:	f244 2202 	movw	r2, #16898	; 0x4202
   b4b64:	f7ff fd8a 	bl	b467c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[INFO] Received Raspberry Pi Message: %s",data);
   b4b68:	4639      	mov	r1, r7
   b4b6a:	f107 0010 	add.w	r0, r7, #16
   b4b6e:	f008 fb47 	bl	bd200 <_ZN6StringC1ERKS_>
   b4b72:	f107 0210 	add.w	r2, r7, #16
   b4b76:	4649      	mov	r1, r9
   b4b78:	4628      	mov	r0, r5
   b4b7a:	f7ff fbeb 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b4b7e:	f107 0010 	add.w	r0, r7, #16
   b4b82:	f008 faa7 	bl	bd0d4 <_ZN6StringD1Ev>
                logFile.close();
   b4b86:	4808      	ldr	r0, [pc, #32]	; (b4ba8 <_Z10RPiHandlerv+0xe0>)
   b4b88:	f002 fb8a 	bl	b72a0 <_ZN7FatFile5closeEv>
            String data = Serial.readStringUntil('\n');
   b4b8c:	4638      	mov	r0, r7
   b4b8e:	f008 faa1 	bl	bd0d4 <_ZN6StringD1Ev>
   b4b92:	46b5      	mov	sp, r6
    while(Serial.available()){
   b4b94:	e7a1      	b.n	b4ada <_Z10RPiHandlerv+0x12>
}
   b4b96:	3724      	adds	r7, #36	; 0x24
   b4b98:	46bd      	mov	sp, r7
   b4b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4b9e:	bf00      	nop
   b4ba0:	2003dddc 	.word	0x2003dddc
   b4ba4:	2003dd84 	.word	0x2003dd84
   b4ba8:	2003ddec 	.word	0x2003ddec
   b4bac:	2003de10 	.word	0x2003de10
   b4bb0:	000c0a8e 	.word	0x000c0a8e

000b4bb4 <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b4bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4bb8:	b084      	sub	sp, #16
   b4bba:	af02      	add	r7, sp, #8
   b4bbc:	4680      	mov	r8, r0
   b4bbe:	4691      	mov	r9, r2
   b4bc0:	461e      	mov	r6, r3
   b4bc2:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b4bc4:	f009 fe85 	bl	be8d2 <strlen>
   b4bc8:	3009      	adds	r0, #9
   b4bca:	f020 0107 	bic.w	r1, r0, #7
   b4bce:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4bd2:	4640      	mov	r0, r8
   b4bd4:	f009 fe7d 	bl	be8d2 <strlen>
    char outStr[strlen(dataOut)+2];
   b4bd8:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4bda:	4929      	ldr	r1, [pc, #164]	; (b4c80 <_Z8sendDataPKchbbb+0xcc>)
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b4bdc:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4be0:	4603      	mov	r3, r0
   b4be2:	4642      	mov	r2, r8
   b4be4:	4620      	mov	r0, r4
   b4be6:	f005 f8c1 	bl	b9d6c <sprintf>
    if(VERBOSE) Serial.println(outStr);
   b4bea:	f008 fd0b 	bl	bd604 <_Z16_fetch_usbserialv>
   b4bee:	4621      	mov	r1, r4
   b4bf0:	f008 f913 	bl	bce1a <_ZN5Print7printlnEPKc>
    if(sendLTE || sendMode == 4){
   b4bf4:	f1ba 0f00 	cmp.w	sl, #0
   b4bf8:	d101      	bne.n	b4bfe <_Z8sendDataPKchbbb+0x4a>
   b4bfa:	2d04      	cmp	r5, #4
   b4bfc:	d10d      	bne.n	b4c1a <_Z8sendDataPKchbbb+0x66>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4bfe:	4b21      	ldr	r3, [pc, #132]	; (b4c84 <_Z8sendDataPKchbbb+0xd0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4c00:	4921      	ldr	r1, [pc, #132]	; (b4c88 <_Z8sendDataPKchbbb+0xd4>)
   b4c02:	781b      	ldrb	r3, [r3, #0]
   b4c04:	f88d 3000 	strb.w	r3, [sp]
   b4c08:	4638      	mov	r0, r7
   b4c0a:	233c      	movs	r3, #60	; 0x3c
   b4c0c:	4622      	mov	r2, r4
   b4c0e:	f007 fd81 	bl	bc714 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4c12:	6878      	ldr	r0, [r7, #4]
   b4c14:	b108      	cbz	r0, b4c1a <_Z8sendDataPKchbbb+0x66>
	  _M_pi->_M_release();
   b4c16:	f7ff fced 	bl	b45f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b4c1a:	f1b9 0f00 	cmp.w	r9, #0
   b4c1e:	d101      	bne.n	b4c24 <_Z8sendDataPKchbbb+0x70>
   b4c20:	2d01      	cmp	r5, #1
   b4c22:	d121      	bne.n	b4c68 <_Z8sendDataPKchbbb+0xb4>
   b4c24:	f005 fe0c 	bl	ba840 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c28:	f005 feb7 	bl	ba99a <_ZNK8particle14BleLocalDevice9connectedEv>
   b4c2c:	b1e0      	cbz	r0, b4c68 <_Z8sendDataPKchbbb+0xb4>
        uint8_t txBuf_tmp[strlen(outStr)];
   b4c2e:	4620      	mov	r0, r4
   b4c30:	f009 fe4f 	bl	be8d2 <strlen>
   b4c34:	3007      	adds	r0, #7
   b4c36:	f020 0007 	bic.w	r0, r0, #7
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b4c3a:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b4c3c:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b4c40:	4620      	mov	r0, r4
   b4c42:	f009 fe46 	bl	be8d2 <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b4c46:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b4c4a:	4602      	mov	r2, r0
   b4c4c:	4621      	mov	r1, r4
   b4c4e:	4648      	mov	r0, r9
   b4c50:	f009 fd63 	bl	be71a <memcpy>
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b4c54:	4620      	mov	r0, r4
   b4c56:	f009 fe3c 	bl	be8d2 <strlen>
   b4c5a:	2300      	movs	r3, #0
   b4c5c:	4602      	mov	r2, r0
   b4c5e:	4649      	mov	r1, r9
   b4c60:	480a      	ldr	r0, [pc, #40]	; (b4c8c <_Z8sendDataPKchbbb+0xd8>)
   b4c62:	f005 fc87 	bl	ba574 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b4c66:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b4c68:	b90e      	cbnz	r6, b4c6e <_Z8sendDataPKchbbb+0xba>
   b4c6a:	2d02      	cmp	r5, #2
   b4c6c:	d104      	bne.n	b4c78 <_Z8sendDataPKchbbb+0xc4>
        Serial1.println(outStr);
   b4c6e:	f008 fe61 	bl	bd934 <_Z22__fetch_global_Serial1v>
   b4c72:	4621      	mov	r1, r4
   b4c74:	f008 f8d1 	bl	bce1a <_ZN5Print7printlnEPKc>
}
   b4c78:	3708      	adds	r7, #8
   b4c7a:	46bd      	mov	sp, r7
   b4c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4c80:	000c0ab7 	.word	0x000c0ab7
   b4c84:	2003dd10 	.word	0x2003dd10
   b4c88:	000c0abe 	.word	0x000c0abe
   b4c8c:	2003ded0 	.word	0x2003ded0

000b4c90 <_Z18manualMotorControlh>:
void manualMotorControl(uint8_t commandedBot){
   b4c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4c94:	4604      	mov	r4, r0
   b4c96:	b087      	sub	sp, #28
    VRead = 4095-analogRead(JOYV_ADC);
   b4c98:	2010      	movs	r0, #16
   b4c9a:	f008 fddd 	bl	bd858 <analogRead>
   b4c9e:	f5c0 677f 	rsb	r7, r0, #4080	; 0xff0
   b4ca2:	4606      	mov	r6, r0
    HRead = analogRead(JOYH_ADC);
   b4ca4:	2011      	movs	r0, #17
   b4ca6:	f008 fdd7 	bl	bd858 <analogRead>
    VRead = 4095-analogRead(JOYV_ADC);
   b4caa:	370f      	adds	r7, #15
    if(VRead < JOY_MID - JOY_DEADZONE){
   b4cac:	f240 73dc 	movw	r3, #2012	; 0x7dc
   b4cb0:	429f      	cmp	r7, r3
   b4cb2:	dc40      	bgt.n	b4d36 <_Z18manualMotorControlh+0xa6>
        VSet = -90 * (VRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4cb4:	f5c6 6302 	rsb	r3, r6, #2080	; 0x820
        if(VSet < -90) VSet = -90;
   b4cb8:	4a6b      	ldr	r2, [pc, #428]	; (b4e68 <_Z18manualMotorControlh+0x1d8>)
        VSet = -90 * (VRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4cba:	3302      	adds	r3, #2
   b4cbc:	f06f 0159 	mvn.w	r1, #89	; 0x59
   b4cc0:	434b      	muls	r3, r1
        if(VSet < -90) VSet = -90;
   b4cc2:	4293      	cmp	r3, r2
   b4cc4:	dc48      	bgt.n	b4d58 <_Z18manualMotorControlh+0xc8>
        VSet = -90 * (VRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4cc6:	4e69      	ldr	r6, [pc, #420]	; (b4e6c <_Z18manualMotorControlh+0x1dc>)
   b4cc8:	fb93 f6f6 	sdiv	r6, r3, r6
    if(HRead < JOY_MID - JOY_DEADZONE){
   b4ccc:	f240 73dc 	movw	r3, #2012	; 0x7dc
   b4cd0:	4298      	cmp	r0, r3
   b4cd2:	dc43      	bgt.n	b4d5c <_Z18manualMotorControlh+0xcc>
        if(HSet < -90) HSet = -90;
   b4cd4:	4b64      	ldr	r3, [pc, #400]	; (b4e68 <_Z18manualMotorControlh+0x1d8>)
        HSet = -90 * (HRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4cd6:	f2a0 70dd 	subw	r0, r0, #2013	; 0x7dd
   b4cda:	f06f 0159 	mvn.w	r1, #89	; 0x59
   b4cde:	4348      	muls	r0, r1
        if(HSet < -90) HSet = -90;
   b4ce0:	4298      	cmp	r0, r3
   b4ce2:	f300 80bf 	bgt.w	b4e64 <_Z18manualMotorControlh+0x1d4>
        HSet = -90 * (HRead - (JOY_MID - JOY_DEADZONE))/(JOY_MIN - (JOY_MID - JOY_DEADZONE));
   b4ce6:	4d61      	ldr	r5, [pc, #388]	; (b4e6c <_Z18manualMotorControlh+0x1dc>)
   b4ce8:	fb90 f5f5 	sdiv	r5, r0, r5
    if(VSet > 0){
   b4cec:	2e00      	cmp	r6, #0
   b4cee:	dc46      	bgt.n	b4d7e <_Z18manualMotorControlh+0xee>
                RSpeed = 90 - HSet/2 + VSet;
   b4cf0:	eb05 72d5 	add.w	r2, r5, r5, lsr #31
   b4cf4:	1053      	asrs	r3, r2, #1
            if((0-HSet) > (0-VSet)){    //H = -90, V = 0 -> LS = 45, RS = 135, H = -90, V = -90 -> LS = 45, RS = 0
   b4cf6:	42b5      	cmp	r5, r6
                RSpeed = 90 - HSet/2 + VSet;
   b4cf8:	f1c3 0300 	rsb	r3, r3, #0
   b4cfc:	ea4f 0562 	mov.w	r5, r2, asr #1
            if((0-HSet) > (0-VSet)){    //H = -90, V = 0 -> LS = 45, RS = 135, H = -90, V = -90 -> LS = 45, RS = 0
   b4d00:	f280 80a7 	bge.w	b4e52 <_Z18manualMotorControlh+0x1c2>
                RSpeed = 90 - HSet/2 + (VSet*1.5);
   b4d04:	f103 005a 	add.w	r0, r3, #90	; 0x5a
   b4d08:	f009 f958 	bl	bdfbc <__aeabi_i2d>
   b4d0c:	4680      	mov	r8, r0
   b4d0e:	4630      	mov	r0, r6
   b4d10:	4689      	mov	r9, r1
   b4d12:	f009 f953 	bl	bdfbc <__aeabi_i2d>
   b4d16:	4b56      	ldr	r3, [pc, #344]	; (b4e70 <_Z18manualMotorControlh+0x1e0>)
   b4d18:	2200      	movs	r2, #0
   b4d1a:	f009 f9b9 	bl	be090 <__aeabi_dmul>
   b4d1e:	460b      	mov	r3, r1
   b4d20:	4602      	mov	r2, r0
   b4d22:	4649      	mov	r1, r9
   b4d24:	4640      	mov	r0, r8
   b4d26:	f008 fffd 	bl	bdd24 <__adddf3>
   b4d2a:	f009 fc4b 	bl	be5c4 <__aeabi_d2uiz>
                LSpeed = 90 + HSet/2;
   b4d2e:	f105 035a 	add.w	r3, r5, #90	; 0x5a
                RSpeed = 90 - HSet/2 + (VSet*1.5);
   b4d32:	b2c1      	uxtb	r1, r0
                LSpeed = 90 + HSet/2;
   b4d34:	e035      	b.n	b4da2 <_Z18manualMotorControlh+0x112>
    else if(VRead > JOY_MID + JOY_DEADZONE){
   b4d36:	f640 0223 	movw	r2, #2083	; 0x823
   b4d3a:	4297      	cmp	r7, r2
   b4d3c:	dd0a      	ble.n	b4d54 <_Z18manualMotorControlh+0xc4>
        if(VSet > 90) VSet = 90;
   b4d3e:	4a4d      	ldr	r2, [pc, #308]	; (b4e74 <_Z18manualMotorControlh+0x1e4>)
        VSet = 90 * (VRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4d40:	1b9b      	subs	r3, r3, r6
   b4d42:	215a      	movs	r1, #90	; 0x5a
   b4d44:	434b      	muls	r3, r1
        if(VSet > 90) VSet = 90;
   b4d46:	4293      	cmp	r3, r2
   b4d48:	dc06      	bgt.n	b4d58 <_Z18manualMotorControlh+0xc8>
        VSet = 90 * (VRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4d4a:	f240 71db 	movw	r1, #2011	; 0x7db
   b4d4e:	fb93 f6f1 	sdiv	r6, r3, r1
   b4d52:	e7bb      	b.n	b4ccc <_Z18manualMotorControlh+0x3c>
        VSet = 0;
   b4d54:	2600      	movs	r6, #0
   b4d56:	e7b9      	b.n	b4ccc <_Z18manualMotorControlh+0x3c>
        if(VSet > 90) VSet = 90;
   b4d58:	460e      	mov	r6, r1
   b4d5a:	e7b7      	b.n	b4ccc <_Z18manualMotorControlh+0x3c>
    else if(HRead > JOY_MID + JOY_DEADZONE){
   b4d5c:	f640 0323 	movw	r3, #2083	; 0x823
   b4d60:	4298      	cmp	r0, r3
   b4d62:	dd20      	ble.n	b4da6 <_Z18manualMotorControlh+0x116>
        if(HSet > 90) HSet = 90;
   b4d64:	4b43      	ldr	r3, [pc, #268]	; (b4e74 <_Z18manualMotorControlh+0x1e4>)
        HSet = 90 * (HRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4d66:	f6a0 0023 	subw	r0, r0, #2083	; 0x823
   b4d6a:	215a      	movs	r1, #90	; 0x5a
   b4d6c:	4348      	muls	r0, r1
        if(HSet > 90) HSet = 90;
   b4d6e:	4298      	cmp	r0, r3
   b4d70:	dc1b      	bgt.n	b4daa <_Z18manualMotorControlh+0x11a>
        HSet = 90 * (HRead - (JOY_MID + JOY_DEADZONE))/(JOY_MAX - (JOY_MID + JOY_DEADZONE));
   b4d72:	f240 71db 	movw	r1, #2011	; 0x7db
   b4d76:	fbb0 f5f1 	udiv	r5, r0, r1
    if(VSet > 0){
   b4d7a:	2e00      	cmp	r6, #0
   b4d7c:	dd3a      	ble.n	b4df4 <_Z18manualMotorControlh+0x164>
   b4d7e:	f106 025a 	add.w	r2, r6, #90	; 0x5a
   b4d82:	0feb      	lsrs	r3, r5, #31
        if(HSet > 0){
   b4d84:	2d00      	cmp	r5, #0
    LSpeed = 90 + VSet/2;
   b4d86:	f3c6 0747 	ubfx	r7, r6, #1, #8
        if(HSet > 0){
   b4d8a:	b2d2      	uxtb	r2, r2
                RSpeed = 90 - HSet/2 + VSet;
   b4d8c:	442b      	add	r3, r5
        if(HSet > 0){
   b4d8e:	dd0e      	ble.n	b4dae <_Z18manualMotorControlh+0x11e>
                RSpeed = 90 - HSet/2 + VSet;
   b4d90:	eba2 0363 	sub.w	r3, r2, r3, asr #1
            if(HSet > VSet){        //H = 90, V = 0 -> LS = 135, RS = 45, H = 90, V = 90 -> LS = 180, RS = 135
   b4d94:	42b5      	cmp	r5, r6
                RSpeed = 90 - HSet/2 + VSet;
   b4d96:	b2d9      	uxtb	r1, r3
            if(HSet > VSet){        //H = 90, V = 0 -> LS = 135, RS = 45, H = 90, V = 90 -> LS = 180, RS = 135
   b4d98:	dd60      	ble.n	b4e5c <_Z18manualMotorControlh+0x1cc>
                LSpeed = 90 + HSet/2 + VSet/2;
   b4d9a:	f107 035a 	add.w	r3, r7, #90	; 0x5a
   b4d9e:	eb03 0365 	add.w	r3, r3, r5, asr #1
                LSpeed = 90 - HSet/2 + VSet;
   b4da2:	b2db      	uxtb	r3, r3
   b4da4:	e00e      	b.n	b4dc4 <_Z18manualMotorControlh+0x134>
        HSet = 0;
   b4da6:	2500      	movs	r5, #0
   b4da8:	e7e7      	b.n	b4d7a <_Z18manualMotorControlh+0xea>
        if(HSet > 90) HSet = 90;
   b4daa:	460d      	mov	r5, r1
   b4dac:	e7e5      	b.n	b4d7a <_Z18manualMotorControlh+0xea>
            if((0-HSet) > VSet){
   b4dae:	4269      	negs	r1, r5
                LSpeed = 90 + HSet/2 + VSet;
   b4db0:	1058      	asrs	r0, r3, #1
            if((0-HSet) > VSet){
   b4db2:	42b1      	cmp	r1, r6
                LSpeed = 90 + HSet/2 + VSet;
   b4db4:	eb02 0363 	add.w	r3, r2, r3, asr #1
   b4db8:	b2db      	uxtb	r3, r3
            if((0-HSet) > VSet){
   b4dba:	dd51      	ble.n	b4e60 <_Z18manualMotorControlh+0x1d0>
                RSpeed = 90 - HSet/2 + VSet/2;
   b4dbc:	f107 015a 	add.w	r1, r7, #90	; 0x5a
   b4dc0:	1a09      	subs	r1, r1, r0
                RSpeed = 90 + HSet/2 + VSet;
   b4dc2:	b2c9      	uxtb	r1, r1
    sprintf(mtrStr,"CCB%dmtr%03d%03d",commandedBot, LSpeed, RSpeed);
   b4dc4:	4622      	mov	r2, r4
   b4dc6:	9100      	str	r1, [sp, #0]
   b4dc8:	a802      	add	r0, sp, #8
   b4dca:	492b      	ldr	r1, [pc, #172]	; (b4e78 <_Z18manualMotorControlh+0x1e8>)
   b4dcc:	f004 ffce 	bl	b9d6c <sprintf>
    Serial.println(mtrStr);
   b4dd0:	f008 fc18 	bl	bd604 <_Z16_fetch_usbserialv>
   b4dd4:	a902      	add	r1, sp, #8
   b4dd6:	f008 f820 	bl	bce1a <_ZN5Print7printlnEPKc>
    sendData(mtrStr,0,true,false, false);
   b4dda:	2300      	movs	r3, #0
   b4ddc:	9300      	str	r3, [sp, #0]
   b4dde:	2201      	movs	r2, #1
   b4de0:	4619      	mov	r1, r3
   b4de2:	a802      	add	r0, sp, #8
   b4de4:	f7ff fee6 	bl	b4bb4 <_Z8sendDataPKchbbb>
    delay(100);
   b4de8:	2064      	movs	r0, #100	; 0x64
   b4dea:	f005 f80f 	bl	b9e0c <delay>
}
   b4dee:	b007      	add	sp, #28
   b4df0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(HSet > 0){
   b4df4:	2d00      	cmp	r5, #0
   b4df6:	f43f af7b 	beq.w	b4cf0 <_Z18manualMotorControlh+0x60>
            if(HSet > (0-VSet)){        // H = 90, V = 0 -> LS = 135, RS = 45, H = 90, V = -90 -> LS = 0; RS = 45
   b4dfa:	4273      	negs	r3, r6
   b4dfc:	42ab      	cmp	r3, r5
                LSpeed = 90 + HSet/2 + VSet/2;
   b4dfe:	ea4f 0765 	mov.w	r7, r5, asr #1
            if(HSet > (0-VSet)){        // H = 90, V = 0 -> LS = 135, RS = 45, H = 90, V = -90 -> LS = 0; RS = 45
   b4e02:	da20      	bge.n	b4e46 <_Z18manualMotorControlh+0x1b6>
                Serial.println("Hello World!!!!!!!");
   b4e04:	f008 fbfe 	bl	bd604 <_Z16_fetch_usbserialv>
   b4e08:	491c      	ldr	r1, [pc, #112]	; (b4e7c <_Z18manualMotorControlh+0x1ec>)
   b4e0a:	f008 f806 	bl	bce1a <_ZN5Print7printlnEPKc>
                LSpeed = (90 + HSet/2 + VSet*1.5 );
   b4e0e:	f107 005a 	add.w	r0, r7, #90	; 0x5a
   b4e12:	f009 f8d3 	bl	bdfbc <__aeabi_i2d>
   b4e16:	4680      	mov	r8, r0
   b4e18:	4630      	mov	r0, r6
   b4e1a:	4689      	mov	r9, r1
   b4e1c:	f009 f8ce 	bl	bdfbc <__aeabi_i2d>
   b4e20:	4b13      	ldr	r3, [pc, #76]	; (b4e70 <_Z18manualMotorControlh+0x1e0>)
   b4e22:	2200      	movs	r2, #0
   b4e24:	f009 f934 	bl	be090 <__aeabi_dmul>
   b4e28:	460b      	mov	r3, r1
   b4e2a:	4602      	mov	r2, r0
   b4e2c:	4649      	mov	r1, r9
   b4e2e:	4640      	mov	r0, r8
   b4e30:	f008 ff78 	bl	bdd24 <__adddf3>
   b4e34:	f009 fbc6 	bl	be5c4 <__aeabi_d2uiz>
                RSpeed = (90 - HSet/2);      
   b4e38:	eb05 71d5 	add.w	r1, r5, r5, lsr #31
   b4e3c:	1049      	asrs	r1, r1, #1
                LSpeed = (90 + HSet/2 + VSet*1.5 );
   b4e3e:	b2c3      	uxtb	r3, r0
                RSpeed = (90 - HSet/2);      
   b4e40:	f1c1 015a 	rsb	r1, r1, #90	; 0x5a
   b4e44:	e7bd      	b.n	b4dc2 <_Z18manualMotorControlh+0x132>
                LSpeed = 90 + VSet;
   b4e46:	f106 015a 	add.w	r1, r6, #90	; 0x5a
   b4e4a:	b2cb      	uxtb	r3, r1
                RSpeed = 90 + HSet/2 + VSet;
   b4e4c:	fa57 f181 	uxtab	r1, r7, r1
   b4e50:	e7b7      	b.n	b4dc2 <_Z18manualMotorControlh+0x132>
                RSpeed = 90 + VSet;
   b4e52:	365a      	adds	r6, #90	; 0x5a
   b4e54:	b2f1      	uxtb	r1, r6
                LSpeed = 90 - HSet/2 + VSet;
   b4e56:	fa53 f386 	uxtab	r3, r3, r6
   b4e5a:	e7a2      	b.n	b4da2 <_Z18manualMotorControlh+0x112>
                LSpeed = 90 + VSet;
   b4e5c:	4613      	mov	r3, r2
   b4e5e:	e7b1      	b.n	b4dc4 <_Z18manualMotorControlh+0x134>
                RSpeed = 90 + VSet;
   b4e60:	4611      	mov	r1, r2
   b4e62:	e7af      	b.n	b4dc4 <_Z18manualMotorControlh+0x134>
        if(HSet < -90) HSet = -90;
   b4e64:	460d      	mov	r5, r1
   b4e66:	e741      	b.n	b4cec <_Z18manualMotorControlh+0x5c>
   b4e68:	0002cb33 	.word	0x0002cb33
   b4e6c:	fffff824 	.word	0xfffff824
   b4e70:	3ff80000 	.word	0x3ff80000
   b4e74:	0002cad8 	.word	0x0002cad8
   b4e78:	000c0ad9 	.word	0x000c0ad9
   b4e7c:	000c0ac6 	.word	0x000c0ac6

000b4e80 <_Z14XBeeLTEPairSetv>:
void XBeeLTEPairSet(){
   b4e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4e84:	4d0e      	ldr	r5, [pc, #56]	; (b4ec0 <_Z14XBeeLTEPairSetv+0x40>)
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b4e86:	4f0f      	ldr	r7, [pc, #60]	; (b4ec4 <_Z14XBeeLTEPairSetv+0x44>)
   b4e88:	e9d5 4800 	ldrd	r4, r8, [r5]
void XBeeLTEPairSet(){
   b4e8c:	b088      	sub	sp, #32
    for(WaterBot p: PairBots){
   b4e8e:	45a0      	cmp	r8, r4
   b4e90:	d013      	beq.n	b4eba <_Z14XBeeLTEPairSetv+0x3a>
   b4e92:	79a3      	ldrb	r3, [r4, #6]
   b4e94:	7966      	ldrb	r6, [r4, #5]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b4e96:	78a2      	ldrb	r2, [r4, #2]
    for(WaterBot p: PairBots){
   b4e98:	9303      	str	r3, [sp, #12]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b4e9a:	4639      	mov	r1, r7
   b4e9c:	a805      	add	r0, sp, #20
   b4e9e:	f004 ff65 	bl	b9d6c <sprintf>
        sendData(replyStr,0,true,p.XBeeAvail,p.LTEAvail);
   b4ea2:	9b03      	ldr	r3, [sp, #12]
   b4ea4:	9600      	str	r6, [sp, #0]
   b4ea6:	2201      	movs	r2, #1
   b4ea8:	2100      	movs	r1, #0
   b4eaa:	a805      	add	r0, sp, #20
   b4eac:	f7ff fe82 	bl	b4bb4 <_Z8sendDataPKchbbb>
   b4eb0:	686b      	ldr	r3, [r5, #4]
   b4eb2:	3b3c      	subs	r3, #60	; 0x3c
   b4eb4:	606b      	str	r3, [r5, #4]
      operator++() _GLIBCXX_NOEXCEPT
   b4eb6:	343c      	adds	r4, #60	; 0x3c
	return *this;
   b4eb8:	e7e9      	b.n	b4e8e <_Z14XBeeLTEPairSetv+0xe>
}
   b4eba:	b008      	add	sp, #32
   b4ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4ec0:	2003dca0 	.word	0x2003dca0
   b4ec4:	000c0aea 	.word	0x000c0aea

000b4ec8 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>:
      at(size_type __n)
   b4ec8:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4eca:	e9d0 4200 	ldrd	r4, r2, [r0]
   b4ece:	4806      	ldr	r0, [pc, #24]	; (b4ee8 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x20>)
   b4ed0:	1b12      	subs	r2, r2, r4
   b4ed2:	1092      	asrs	r2, r2, #2
   b4ed4:	4342      	muls	r2, r0
	if (__n >= this->size())
   b4ed6:	4291      	cmp	r1, r2
   b4ed8:	d302      	bcc.n	b4ee0 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b4eda:	4804      	ldr	r0, [pc, #16]	; (b4eec <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj+0x24>)
   b4edc:	f008 fd59 	bl	bd992 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4ee0:	2024      	movs	r0, #36	; 0x24
   b4ee2:	fb00 4001 	mla	r0, r0, r1, r4
   b4ee6:	bd10      	pop	{r4, pc}
   b4ee8:	38e38e39 	.word	0x38e38e39
   b4eec:	000c0af3 	.word	0x000c0af3

000b4ef0 <_Z8uHandlerv>:
    redrawMenu = true;  
   b4ef0:	4b10      	ldr	r3, [pc, #64]	; (b4f34 <_Z8uHandlerv+0x44>)
void uHandler(){
   b4ef2:	b510      	push	{r4, lr}
    redrawMenu = true;  
   b4ef4:	2201      	movs	r2, #1
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4ef6:	4c10      	ldr	r4, [pc, #64]	; (b4f38 <_Z8uHandlerv+0x48>)
    redrawMenu = true;  
   b4ef8:	701a      	strb	r2, [r3, #0]
   b4efa:	f004 fcab 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4efe:	6823      	ldr	r3, [r4, #0]
   b4f00:	1ac0      	subs	r0, r0, r3
   b4f02:	2895      	cmp	r0, #149	; 0x95
   b4f04:	d914      	bls.n	b4f30 <_Z8uHandlerv+0x40>
   b4f06:	f004 fca5 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
    if(menuItem) menuItem--;
   b4f0a:	4a0c      	ldr	r2, [pc, #48]	; (b4f3c <_Z8uHandlerv+0x4c>)
    debounceTime = millis();
   b4f0c:	6020      	str	r0, [r4, #0]
    if(menuItem) menuItem--;
   b4f0e:	7813      	ldrb	r3, [r2, #0]
   b4f10:	b10b      	cbz	r3, b4f16 <_Z8uHandlerv+0x26>
   b4f12:	3b01      	subs	r3, #1
   b4f14:	7013      	strb	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);
   b4f16:	7811      	ldrb	r1, [r2, #0]
   b4f18:	4809      	ldr	r0, [pc, #36]	; (b4f40 <_Z8uHandlerv+0x50>)
   b4f1a:	f7ff ffd5 	bl	b4ec8 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b4f1e:	4b09      	ldr	r3, [pc, #36]	; (b4f44 <_Z8uHandlerv+0x54>)
   b4f20:	6018      	str	r0, [r3, #0]
    Serial.println("Up trigger");
   b4f22:	f008 fb6f 	bl	bd604 <_Z16_fetch_usbserialv>
}
   b4f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("Up trigger");
   b4f2a:	4907      	ldr	r1, [pc, #28]	; (b4f48 <_Z8uHandlerv+0x58>)
   b4f2c:	f007 bf75 	b.w	bce1a <_ZN5Print7printlnEPKc>
}
   b4f30:	bd10      	pop	{r4, pc}
   b4f32:	bf00      	nop
   b4f34:	2003da90 	.word	0x2003da90
   b4f38:	2003dd6c 	.word	0x2003dd6c
   b4f3c:	2003de11 	.word	0x2003de11
   b4f40:	2003dc94 	.word	0x2003dc94
   b4f44:	2003dcb8 	.word	0x2003dcb8
   b4f48:	000c0b3d 	.word	0x000c0b3d

000b4f4c <_Z8dHandlerv>:
    redrawMenu = true;  
   b4f4c:	4b10      	ldr	r3, [pc, #64]	; (b4f90 <_Z8dHandlerv+0x44>)
void dHandler(){
   b4f4e:	b510      	push	{r4, lr}
    redrawMenu = true;  
   b4f50:	2201      	movs	r2, #1
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4f52:	4c10      	ldr	r4, [pc, #64]	; (b4f94 <_Z8dHandlerv+0x48>)
    redrawMenu = true;  
   b4f54:	701a      	strb	r2, [r3, #0]
   b4f56:	f004 fc7d 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4f5a:	6823      	ldr	r3, [r4, #0]
   b4f5c:	1ac0      	subs	r0, r0, r3
   b4f5e:	2895      	cmp	r0, #149	; 0x95
   b4f60:	d915      	bls.n	b4f8e <_Z8dHandlerv+0x42>
   b4f62:	f004 fc77 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
   b4f66:	4a0c      	ldr	r2, [pc, #48]	; (b4f98 <_Z8dHandlerv+0x4c>)
    debounceTime = millis();
   b4f68:	6020      	str	r0, [r4, #0]
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
   b4f6a:	7813      	ldrb	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);
   b4f6c:	480b      	ldr	r0, [pc, #44]	; (b4f9c <_Z8dHandlerv+0x50>)
    if(menuItem < MAX_MENU_ITEMS-1) menuItem++;
   b4f6e:	2b03      	cmp	r3, #3
   b4f70:	bf9c      	itt	ls
   b4f72:	3301      	addls	r3, #1
   b4f74:	7013      	strbls	r3, [r2, #0]
    SelectedItem = &MenuItems.at(menuItem);
   b4f76:	7811      	ldrb	r1, [r2, #0]
   b4f78:	f7ff ffa6 	bl	b4ec8 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b4f7c:	4b08      	ldr	r3, [pc, #32]	; (b4fa0 <_Z8dHandlerv+0x54>)
   b4f7e:	6018      	str	r0, [r3, #0]
    Serial.println("Down trigger");
   b4f80:	f008 fb40 	bl	bd604 <_Z16_fetch_usbserialv>
}
   b4f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("Down trigger");
   b4f88:	4906      	ldr	r1, [pc, #24]	; (b4fa4 <_Z8dHandlerv+0x58>)
   b4f8a:	f007 bf46 	b.w	bce1a <_ZN5Print7printlnEPKc>
}
   b4f8e:	bd10      	pop	{r4, pc}
   b4f90:	2003da90 	.word	0x2003da90
   b4f94:	2003dd6c 	.word	0x2003dd6c
   b4f98:	2003de11 	.word	0x2003de11
   b4f9c:	2003dc94 	.word	0x2003dc94
   b4fa0:	2003dcb8 	.word	0x2003dcb8
   b4fa4:	000c0b48 	.word	0x000c0b48

000b4fa8 <_ZNSt6vectorI6StringSaIS0_EE2atEj>:
      at(size_type __n)
   b4fa8:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4faa:	e9d0 5400 	ldrd	r5, r4, [r0]
   b4fae:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
   b4fb0:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4fb4:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
   b4fb8:	d302      	bcc.n	b4fc0 <_ZNSt6vectorI6StringSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b4fba:	4803      	ldr	r0, [pc, #12]	; (b4fc8 <_ZNSt6vectorI6StringSaIS0_EE2atEj+0x20>)
   b4fbc:	f008 fce9 	bl	bd992 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4fc0:	eb05 1001 	add.w	r0, r5, r1, lsl #4
   b4fc4:	bd38      	pop	{r3, r4, r5, pc}
   b4fc6:	bf00      	nop
   b4fc8:	000c0af3 	.word	0x000c0af3

000b4fcc <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>:
      at(size_type __n)
   b4fcc:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4fce:	e9d0 4200 	ldrd	r4, r2, [r0]
   b4fd2:	4806      	ldr	r0, [pc, #24]	; (b4fec <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x20>)
   b4fd4:	1b12      	subs	r2, r2, r4
   b4fd6:	1092      	asrs	r2, r2, #2
   b4fd8:	4342      	muls	r2, r0
	if (__n >= this->size())
   b4fda:	4291      	cmp	r1, r2
   b4fdc:	d302      	bcc.n	b4fe4 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b4fde:	4804      	ldr	r0, [pc, #16]	; (b4ff0 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x24>)
   b4fe0:	f008 fcd7 	bl	bd992 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4fe4:	203c      	movs	r0, #60	; 0x3c
   b4fe6:	fb00 4001 	mla	r0, r0, r1, r4
   b4fea:	bd10      	pop	{r4, pc}
   b4fec:	eeeeeeef 	.word	0xeeeeeeef
   b4ff0:	000c0af3 	.word	0x000c0af3

000b4ff4 <_Z16updateBotControlv>:
void updateBotControl(){
   b4ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(updateControl){
   b4ff8:	4b4a      	ldr	r3, [pc, #296]	; (b5124 <_Z16updateBotControlv+0x130>)
   b4ffa:	781a      	ldrb	r2, [r3, #0]
void updateBotControl(){
   b4ffc:	b097      	sub	sp, #92	; 0x5c
    if(updateControl){
   b4ffe:	2a00      	cmp	r2, #0
   b5000:	d03a      	beq.n	b5078 <_Z16updateBotControlv+0x84>
        updateControl = false;
   b5002:	2200      	movs	r2, #0
   b5004:	701a      	strb	r2, [r3, #0]
      : _M_current(__i) { }
   b5006:	4b48      	ldr	r3, [pc, #288]	; (b5128 <_Z16updateBotControlv+0x134>)
                sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum, wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b5008:	4f48      	ldr	r7, [pc, #288]	; (b512c <_Z16updateBotControlv+0x138>)
                Serial.printlnf("Control Packet: %s",statusStr);
   b500a:	f8df 8134 	ldr.w	r8, [pc, #308]	; b5140 <_Z16updateBotControlv+0x14c>
                sendData(statusStr,0,true,true,statusTimeout);
   b500e:	f8df 9128 	ldr.w	r9, [pc, #296]	; b5138 <_Z16updateBotControlv+0x144>
   b5012:	e9d3 4600 	ldrd	r4, r6, [r3]
        for(WaterBot &wb: WaterBots){
   b5016:	42a6      	cmp	r6, r4
   b5018:	d02e      	beq.n	b5078 <_Z16updateBotControlv+0x84>
            if(wb.updatedControl){
   b501a:	7863      	ldrb	r3, [r4, #1]
   b501c:	b353      	cbz	r3, b5074 <_Z16updateBotControlv+0x80>
                wb.updatedControl = false;
   b501e:	2500      	movs	r5, #0
   b5020:	7065      	strb	r5, [r4, #1]
   b5022:	f004 fc17 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
                sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum, wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b5026:	7a23      	ldrb	r3, [r4, #8]
   b5028:	78a2      	ldrb	r2, [r4, #2]
                wb.publishTime = millis();
   b502a:	6360      	str	r0, [r4, #52]	; 0x34
                sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum, wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b502c:	9306      	str	r3, [sp, #24]
   b502e:	7ae3      	ldrb	r3, [r4, #11]
   b5030:	9305      	str	r3, [sp, #20]
   b5032:	79e3      	ldrb	r3, [r4, #7]
   b5034:	9304      	str	r3, [sp, #16]
   b5036:	6960      	ldr	r0, [r4, #20]
   b5038:	9209      	str	r2, [sp, #36]	; 0x24
   b503a:	f008 ffd1 	bl	bdfe0 <__aeabi_f2d>
   b503e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5042:	6920      	ldr	r0, [r4, #16]
   b5044:	f008 ffcc 	bl	bdfe0 <__aeabi_f2d>
   b5048:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b504a:	e9cd 0100 	strd	r0, r1, [sp]
   b504e:	4639      	mov	r1, r7
   b5050:	a80b      	add	r0, sp, #44	; 0x2c
   b5052:	f004 fe8b 	bl	b9d6c <sprintf>
                Serial.printlnf("Control Packet: %s",statusStr);
   b5056:	f008 fad5 	bl	bd604 <_Z16_fetch_usbserialv>
   b505a:	aa0b      	add	r2, sp, #44	; 0x2c
   b505c:	4641      	mov	r1, r8
   b505e:	f7ff f979 	bl	b4354 <_ZN5Print8printlnfEPKcz>
                sendData(statusStr,0,true,true,statusTimeout);
   b5062:	f899 3000 	ldrb.w	r3, [r9]
   b5066:	9300      	str	r3, [sp, #0]
   b5068:	2301      	movs	r3, #1
   b506a:	461a      	mov	r2, r3
   b506c:	4629      	mov	r1, r5
   b506e:	a80b      	add	r0, sp, #44	; 0x2c
   b5070:	f7ff fda0 	bl	b4bb4 <_Z8sendDataPKchbbb>
      operator++() _GLIBCXX_NOEXCEPT
   b5074:	343c      	adds	r4, #60	; 0x3c
	return *this;
   b5076:	e7ce      	b.n	b5016 <_Z16updateBotControlv+0x22>
    if(millis() - controlUpdateTime > CONTROL_PUB_TIME){
   b5078:	4c2d      	ldr	r4, [pc, #180]	; (b5130 <_Z16updateBotControlv+0x13c>)
   b507a:	f004 fbeb 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
   b507e:	6823      	ldr	r3, [r4, #0]
   b5080:	1ac0      	subs	r0, r0, r3
   b5082:	f241 3388 	movw	r3, #5000	; 0x1388
   b5086:	4298      	cmp	r0, r3
   b5088:	d93f      	bls.n	b510a <_Z16updateBotControlv+0x116>
   b508a:	f004 fbe3 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
        controlUpdateTime = millis();
   b508e:	6020      	str	r0, [r4, #0]
        if(controlUpdateID == -1){
   b5090:	4c28      	ldr	r4, [pc, #160]	; (b5134 <_Z16updateBotControlv+0x140>)
   b5092:	4d25      	ldr	r5, [pc, #148]	; (b5128 <_Z16updateBotControlv+0x134>)
   b5094:	6822      	ldr	r2, [r4, #0]
   b5096:	1c53      	adds	r3, r2, #1
   b5098:	d13a      	bne.n	b5110 <_Z16updateBotControlv+0x11c>
            if(WaterBots.size() != 0) controlUpdateID = 0;
   b509a:	e9d5 3200 	ldrd	r3, r2, [r5]
   b509e:	429a      	cmp	r2, r3
   b50a0:	d033      	beq.n	b510a <_Z16updateBotControlv+0x116>
   b50a2:	2300      	movs	r3, #0
   b50a4:	6023      	str	r3, [r4, #0]
        WaterBot wb = WaterBots.at(controlUpdateID);
   b50a6:	6821      	ldr	r1, [r4, #0]
   b50a8:	481f      	ldr	r0, [pc, #124]	; (b5128 <_Z16updateBotControlv+0x134>)
   b50aa:	f7ff ff8f 	bl	b4fcc <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
        sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum,wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b50ae:	7a03      	ldrb	r3, [r0, #8]
   b50b0:	7882      	ldrb	r2, [r0, #2]
   b50b2:	9306      	str	r3, [sp, #24]
   b50b4:	7ac3      	ldrb	r3, [r0, #11]
   b50b6:	9305      	str	r3, [sp, #20]
   b50b8:	79c3      	ldrb	r3, [r0, #7]
   b50ba:	9304      	str	r3, [sp, #16]
        WaterBot wb = WaterBots.at(controlUpdateID);
   b50bc:	4606      	mov	r6, r0
        sprintf(statusStr,"CCB%dctl%0.6f %0.6f %d %d %d",wb.botNum,wb.TargetLat, wb.TargetLon, wb.driveMode, wb.dataRecording, wb.signal);
   b50be:	6940      	ldr	r0, [r0, #20]
   b50c0:	9209      	str	r2, [sp, #36]	; 0x24
   b50c2:	f008 ff8d 	bl	bdfe0 <__aeabi_f2d>
   b50c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b50ca:	6930      	ldr	r0, [r6, #16]
   b50cc:	f008 ff88 	bl	bdfe0 <__aeabi_f2d>
   b50d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b50d2:	e9cd 0100 	strd	r0, r1, [sp]
   b50d6:	4915      	ldr	r1, [pc, #84]	; (b512c <_Z16updateBotControlv+0x138>)
   b50d8:	a80b      	add	r0, sp, #44	; 0x2c
   b50da:	f004 fe47 	bl	b9d6c <sprintf>
        sendData(statusStr,0,true,true,statusTimeout);
   b50de:	4b16      	ldr	r3, [pc, #88]	; (b5138 <_Z16updateBotControlv+0x144>)
   b50e0:	781b      	ldrb	r3, [r3, #0]
   b50e2:	9300      	str	r3, [sp, #0]
   b50e4:	2301      	movs	r3, #1
   b50e6:	461a      	mov	r2, r3
   b50e8:	2100      	movs	r1, #0
   b50ea:	a80b      	add	r0, sp, #44	; 0x2c
   b50ec:	f7ff fd62 	bl	b4bb4 <_Z8sendDataPKchbbb>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b50f0:	e9d5 1300 	ldrd	r1, r3, [r5]
   b50f4:	1a5b      	subs	r3, r3, r1
   b50f6:	4911      	ldr	r1, [pc, #68]	; (b513c <_Z16updateBotControlv+0x148>)
        if(controlUpdateID < WaterBots.size()-1) controlUpdateID++;
   b50f8:	6822      	ldr	r2, [r4, #0]
   b50fa:	109b      	asrs	r3, r3, #2
   b50fc:	434b      	muls	r3, r1
   b50fe:	3b01      	subs	r3, #1
   b5100:	4293      	cmp	r3, r2
   b5102:	bf8c      	ite	hi
   b5104:	3201      	addhi	r2, #1
        else controlUpdateID = 0;
   b5106:	2200      	movls	r2, #0
   b5108:	6022      	str	r2, [r4, #0]
}
   b510a:	b017      	add	sp, #92	; 0x5c
   b510c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5110:	e9d5 1300 	ldrd	r1, r3, [r5]
   b5114:	1a5b      	subs	r3, r3, r1
   b5116:	4909      	ldr	r1, [pc, #36]	; (b513c <_Z16updateBotControlv+0x148>)
   b5118:	109b      	asrs	r3, r3, #2
   b511a:	434b      	muls	r3, r1
        if(controlUpdateID > WaterBots.size()-1) controlUpdateID = 0;
   b511c:	3b01      	subs	r3, #1
   b511e:	4293      	cmp	r3, r2
   b5120:	d3bf      	bcc.n	b50a2 <_Z16updateBotControlv+0xae>
   b5122:	e7c0      	b.n	b50a6 <_Z16updateBotControlv+0xb2>
   b5124:	2003e63a 	.word	0x2003e63a
   b5128:	2003dcc8 	.word	0x2003dcc8
   b512c:	000c0b55 	.word	0x000c0b55
   b5130:	2003dd68 	.word	0x2003dd68
   b5134:	2003dd64 	.word	0x2003dd64
   b5138:	2003e639 	.word	0x2003e639
   b513c:	eeeeeeef 	.word	0xeeeeeeef
   b5140:	000c0b72 	.word	0x000c0b72

000b5144 <_ZNSt6vectorI6StringSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b5144:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5146:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b514a:	4604      	mov	r4, r0
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b514c:	42ae      	cmp	r6, r5
   b514e:	d004      	beq.n	b515a <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x16>
      __pointer->~_Tp();
   b5150:	4628      	mov	r0, r5
   b5152:	f007 ffbf 	bl	bd0d4 <_ZN6StringD1Ev>
	  for (; __first != __last; ++__first)
   b5156:	3510      	adds	r5, #16
   b5158:	e7f8      	b.n	b514c <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b515a:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b515c:	b118      	cbz	r0, b5166 <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b515e:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5160:	1a09      	subs	r1, r1, r0
   b5162:	f7fe ff9c 	bl	b409e <_ZdlPvj>
      }
   b5166:	4620      	mov	r0, r4
   b5168:	bd70      	pop	{r4, r5, r6, pc}

000b516a <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b516a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b516c:	4604      	mov	r4, r0
   b516e:	460e      	mov	r6, r1
   b5170:	4615      	mov	r5, r2
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
   b5172:	2700      	movs	r7, #0
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
   b5174:	42b4      	cmp	r4, r6
   b5176:	d029      	beq.n	b51cc <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x62>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5178:	b315      	cbz	r5, b51c0 <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x56>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
   b517a:	6823      	ldr	r3, [r4, #0]
	  _M_end_of_storage(__x._M_end_of_storage)
   b517c:	602b      	str	r3, [r5, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
   b517e:	6863      	ldr	r3, [r4, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
   b5180:	606b      	str	r3, [r5, #4]
   b5182:	68a3      	ldr	r3, [r4, #8]
   b5184:	60ab      	str	r3, [r5, #8]
class MenuItem{
   b5186:	68e3      	ldr	r3, [r4, #12]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
   b5188:	6027      	str	r7, [r4, #0]
   b518a:	e9c4 7701 	strd	r7, r7, [r4, #4]
   b518e:	60eb      	str	r3, [r5, #12]
   b5190:	6923      	ldr	r3, [r4, #16]
   b5192:	612b      	str	r3, [r5, #16]
   b5194:	7d23      	ldrb	r3, [r4, #20]
   b5196:	752b      	strb	r3, [r5, #20]
   b5198:	7d63      	ldrb	r3, [r4, #21]
   b519a:	756b      	strb	r3, [r5, #21]
   b519c:	7da3      	ldrb	r3, [r4, #22]
   b519e:	75ab      	strb	r3, [r5, #22]
   b51a0:	7de3      	ldrb	r3, [r4, #23]
   b51a2:	75eb      	strb	r3, [r5, #23]
   b51a4:	7e23      	ldrb	r3, [r4, #24]
   b51a6:	762b      	strb	r3, [r5, #24]
   b51a8:	7e63      	ldrb	r3, [r4, #25]
   b51aa:	766b      	strb	r3, [r5, #25]
   b51ac:	f8d4 301a 	ldr.w	r3, [r4, #26]
   b51b0:	f8c5 301a 	str.w	r3, [r5, #26]
   b51b4:	f8d4 301e 	ldr.w	r3, [r4, #30]
   b51b8:	f8c5 301e 	str.w	r3, [r5, #30]
   b51bc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b51be:	846b      	strh	r3, [r5, #34]	; 0x22
   b51c0:	4620      	mov	r0, r4
   b51c2:	f7ff ffbf 	bl	b5144 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b51c6:	3424      	adds	r4, #36	; 0x24
   b51c8:	3524      	adds	r5, #36	; 0x24
   b51ca:	e7d3      	b.n	b5174 <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0xa>
	std::__relocate_object_a(std::__addressof(*__cur),
				 std::__addressof(*__first), __alloc);
      return __cur;
    }
   b51cc:	4628      	mov	r0, r5
   b51ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b51d0 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b51d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b51d4:	e9d0 8a00 	ldrd	r8, sl, [r0]
   b51d8:	4b2f      	ldr	r3, [pc, #188]	; (b5298 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc8>)
   b51da:	ebaa 0408 	sub.w	r4, sl, r8
   b51de:	435c      	muls	r4, r3

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b51e0:	4b2e      	ldr	r3, [pc, #184]	; (b529c <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>)
   b51e2:	429c      	cmp	r4, r3
   b51e4:	4689      	mov	r9, r1
   b51e6:	4607      	mov	r7, r0
   b51e8:	4611      	mov	r1, r2
   b51ea:	d102      	bne.n	b51f2 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x22>
	  __throw_length_error(__N(__s));
   b51ec:	482c      	ldr	r0, [pc, #176]	; (b52a0 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd0>)
   b51ee:	f008 fbcd 	bl	bd98c <_ZSt20__throw_length_errorPKc>
   b51f2:	2c01      	cmp	r4, #1
   b51f4:	4622      	mov	r2, r4
   b51f6:	bf38      	it	cc
   b51f8:	2201      	movcc	r2, #1
   b51fa:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b51fc:	eba9 0508 	sub.w	r5, r9, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5200:	d21d      	bcs.n	b523e <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5202:	b1f4      	cbz	r4, b5242 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
   b5204:	429c      	cmp	r4, r3
   b5206:	bf28      	it	cs
   b5208:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b520a:	2049      	movs	r0, #73	; 0x49
   b520c:	4360      	muls	r0, r4
   b520e:	9101      	str	r1, [sp, #4]
   b5210:	f7fe ff41 	bl	b4096 <_Znwj>
   b5214:	9901      	ldr	r1, [sp, #4]
   b5216:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5218:	1970      	adds	r0, r6, r5
   b521a:	d002      	beq.n	b5222 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x52>
   b521c:	2249      	movs	r2, #73	; 0x49
   b521e:	f009 fa7c 	bl	be71a <memcpy>
   b5222:	4633      	mov	r3, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5224:	4645      	mov	r5, r8
      for (; __first != __last; ++__first, (void)++__cur)
   b5226:	45a9      	cmp	r9, r5
   b5228:	d00d      	beq.n	b5246 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x76>
   b522a:	b12b      	cbz	r3, b5238 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x68>
   b522c:	4618      	mov	r0, r3
   b522e:	2249      	movs	r2, #73	; 0x49
   b5230:	4629      	mov	r1, r5
   b5232:	f009 fa72 	bl	be71a <memcpy>
   b5236:	4603      	mov	r3, r0
   b5238:	3549      	adds	r5, #73	; 0x49
   b523a:	3349      	adds	r3, #73	; 0x49
   b523c:	e7f3      	b.n	b5226 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x56>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b523e:	461c      	mov	r4, r3
   b5240:	e7e3      	b.n	b520a <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5242:	4626      	mov	r6, r4
   b5244:	e7e8      	b.n	b5218 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x48>
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   b5246:	eba5 0908 	sub.w	r9, r5, r8
   b524a:	f109 0949 	add.w	r9, r9, #73	; 0x49
   b524e:	44b1      	add	r9, r6
   b5250:	462b      	mov	r3, r5
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b5252:	46cb      	mov	fp, r9
      for (; __first != __last; ++__first, (void)++__cur)
   b5254:	4555      	cmp	r5, sl
   b5256:	f10b 0b49 	add.w	fp, fp, #73	; 0x49
   b525a:	d009      	beq.n	b5270 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa0>
   b525c:	4629      	mov	r1, r5
   b525e:	2249      	movs	r2, #73	; 0x49
   b5260:	f1ab 0049 	sub.w	r0, fp, #73	; 0x49
   b5264:	9301      	str	r3, [sp, #4]
   b5266:	3549      	adds	r5, #73	; 0x49
   b5268:	f009 fa57 	bl	be71a <memcpy>
   b526c:	9b01      	ldr	r3, [sp, #4]
   b526e:	e7f1      	b.n	b5254 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x84>
   b5270:	1aed      	subs	r5, r5, r3
   b5272:	444d      	add	r5, r9
	if (__p)
   b5274:	f1b8 0f00 	cmp.w	r8, #0
   b5278:	d005      	beq.n	b5286 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb6>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b527a:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b527c:	4640      	mov	r0, r8
   b527e:	eba1 0108 	sub.w	r1, r1, r8
   b5282:	f7fe ff0c 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5286:	2049      	movs	r0, #73	; 0x49
   b5288:	fb00 6404 	mla	r4, r0, r4, r6
      this->_M_impl._M_finish = __new_finish;
   b528c:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5290:	60bc      	str	r4, [r7, #8]
    }
   b5292:	b003      	add	sp, #12
   b5294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5298:	c7e3f1f9 	.word	0xc7e3f1f9
   b529c:	01c0e070 	.word	0x01c0e070
   b52a0:	000c0b85 	.word	0x000c0b85

000b52a4 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b52a4:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b52a6:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   b52aa:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   b52ac:	4604      	mov	r4, r0
   b52ae:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b52b0:	d008      	beq.n	b52c4 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_+0x20>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b52b2:	b11b      	cbz	r3, b52bc <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_+0x18>
   b52b4:	2249      	movs	r2, #73	; 0x49
   b52b6:	4618      	mov	r0, r3
   b52b8:	f009 fa2f 	bl	be71a <memcpy>
	    ++this->_M_impl._M_finish;
   b52bc:	6863      	ldr	r3, [r4, #4]
   b52be:	3349      	adds	r3, #73	; 0x49
   b52c0:	6063      	str	r3, [r4, #4]
      }
   b52c2:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   b52c4:	4619      	mov	r1, r3
   b52c6:	f7ff ff83 	bl	b51d0 <_ZNSt6vectorI9MenuPopUpSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b52ca:	e7fa      	b.n	b52c2 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_+0x1e>

000b52cc <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b52cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b52d0:	6843      	ldr	r3, [r0, #4]
   b52d2:	f8d0 a000 	ldr.w	sl, [r0]
   b52d6:	9301      	str	r3, [sp, #4]
   b52d8:	eba3 060a 	sub.w	r6, r3, sl
   b52dc:	4b44      	ldr	r3, [pc, #272]	; (b53f0 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x124>)
   b52de:	10b6      	asrs	r6, r6, #2
   b52e0:	435e      	muls	r6, r3
	if (max_size() - size() < __n)
   b52e2:	4b44      	ldr	r3, [pc, #272]	; (b53f4 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x128>)
   b52e4:	429e      	cmp	r6, r3
   b52e6:	4681      	mov	r9, r0
   b52e8:	468b      	mov	fp, r1
   b52ea:	4615      	mov	r5, r2
   b52ec:	d102      	bne.n	b52f4 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x28>
	  __throw_length_error(__N(__s));
   b52ee:	4842      	ldr	r0, [pc, #264]	; (b53f8 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x12c>)
   b52f0:	f008 fb4c 	bl	bd98c <_ZSt20__throw_length_errorPKc>
   b52f4:	2e01      	cmp	r6, #1
   b52f6:	4632      	mov	r2, r6
   b52f8:	bf38      	it	cc
   b52fa:	2201      	movcc	r2, #1
   b52fc:	18b6      	adds	r6, r6, r2
   b52fe:	eba1 070a 	sub.w	r7, r1, sl
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5302:	d22d      	bcs.n	b5360 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5304:	b376      	cbz	r6, b5364 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
   b5306:	429e      	cmp	r6, r3
   b5308:	bf28      	it	cs
   b530a:	461e      	movcs	r6, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b530c:	203c      	movs	r0, #60	; 0x3c
   b530e:	4370      	muls	r0, r6
   b5310:	f7fe fec1 	bl	b4096 <_Znwj>
   b5314:	4680      	mov	r8, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5316:	eb18 0407 	adds.w	r4, r8, r7
   b531a:	d009      	beq.n	b5330 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x64>
   b531c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b531e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5328:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b532c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b5330:	46c4      	mov	ip, r8
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5332:	46d6      	mov	lr, sl
   b5334:	45f3      	cmp	fp, lr
   b5336:	d017      	beq.n	b5368 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>
   b5338:	f1bc 0f00 	cmp.w	ip, #0
   b533c:	d00b      	beq.n	b5356 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8a>
   b533e:	4675      	mov	r5, lr
   b5340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5342:	4664      	mov	r4, ip
   b5344:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5346:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5348:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b534a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b534c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b534e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b5352:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b5356:	f10e 0e3c 	add.w	lr, lr, #60	; 0x3c
   b535a:	f10c 0c3c 	add.w	ip, ip, #60	; 0x3c
   b535e:	e7e9      	b.n	b5334 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x68>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5360:	461e      	mov	r6, r3
   b5362:	e7d3      	b.n	b530c <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x40>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5364:	46b0      	mov	r8, r6
   b5366:	e7d6      	b.n	b5316 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   b5368:	f8df e090 	ldr.w	lr, [pc, #144]	; b53fc <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x130>
   b536c:	08bf      	lsrs	r7, r7, #2
   b536e:	fb0e f707 	mul.w	r7, lr, r7
   b5372:	233c      	movs	r3, #60	; 0x3c
   b5374:	f027 4740 	bic.w	r7, r7, #3221225472	; 0xc0000000
   b5378:	435f      	muls	r7, r3
   b537a:	eb0a 0b07 	add.w	fp, sl, r7
	      ++__new_finish;
   b537e:	441f      	add	r7, r3
   b5380:	eb08 0307 	add.w	r3, r8, r7
   b5384:	9300      	str	r3, [sp, #0]
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b5386:	469c      	mov	ip, r3
   b5388:	465f      	mov	r7, fp
      for (; __first != __last; ++__first, (void)++__cur)
   b538a:	9b01      	ldr	r3, [sp, #4]
   b538c:	429f      	cmp	r7, r3
   b538e:	f10c 0c3c 	add.w	ip, ip, #60	; 0x3c
   b5392:	d00e      	beq.n	b53b2 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe6>
   b5394:	463d      	mov	r5, r7
   b5396:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5398:	f1ac 043c 	sub.w	r4, ip, #60	; 0x3c
   b539c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b539e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b53a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b53a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b53a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b53a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b53aa:	373c      	adds	r7, #60	; 0x3c
   b53ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b53b0:	e7eb      	b.n	b538a <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbe>
   b53b2:	eba7 070b 	sub.w	r7, r7, fp
   b53b6:	08bf      	lsrs	r7, r7, #2
   b53b8:	fb0e fe07 	mul.w	lr, lr, r7
   b53bc:	9b00      	ldr	r3, [sp, #0]
   b53be:	f02e 4e40 	bic.w	lr, lr, #3221225472	; 0xc0000000
   b53c2:	273c      	movs	r7, #60	; 0x3c
   b53c4:	fb07 370e 	mla	r7, r7, lr, r3
	if (__p)
   b53c8:	f1ba 0f00 	cmp.w	sl, #0
   b53cc:	d006      	beq.n	b53dc <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x110>
		    this->_M_impl._M_end_of_storage - __old_start);
   b53ce:	f8d9 1008 	ldr.w	r1, [r9, #8]
	::operator delete(__p
   b53d2:	4650      	mov	r0, sl
   b53d4:	eba1 010a 	sub.w	r1, r1, sl
   b53d8:	f7fe fe61 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b53dc:	203c      	movs	r0, #60	; 0x3c
   b53de:	fb00 8606 	mla	r6, r0, r6, r8
      this->_M_impl._M_finish = __new_finish;
   b53e2:	e9c9 8700 	strd	r8, r7, [r9]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b53e6:	f8c9 6008 	str.w	r6, [r9, #8]
    }
   b53ea:	b003      	add	sp, #12
   b53ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b53f0:	eeeeeeef 	.word	0xeeeeeeef
   b53f4:	02222222 	.word	0x02222222
   b53f8:	000c0b85 	.word	0x000c0b85
   b53fc:	2eeeeeef 	.word	0x2eeeeeef

000b5400 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b5400:	b570      	push	{r4, r5, r6, lr}
   b5402:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5404:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b5408:	4299      	cmp	r1, r3
      push_back(const value_type& __x)
   b540a:	4606      	mov	r6, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b540c:	d010      	beq.n	b5430 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x30>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b540e:	b159      	cbz	r1, b5428 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x28>
   b5410:	4615      	mov	r5, r2
   b5412:	460c      	mov	r4, r1
   b5414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b541a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b541c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b541e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5420:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b5424:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	    ++this->_M_impl._M_finish;
   b5428:	6873      	ldr	r3, [r6, #4]
   b542a:	333c      	adds	r3, #60	; 0x3c
   b542c:	6073      	str	r3, [r6, #4]
      }
   b542e:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
   b5430:	f7ff ff4c 	bl	b52cc <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b5434:	e7fb      	b.n	b542e <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x2e>
	...

000b5438 <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b5438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b543c:	ed2d 8b02 	vpush	{d8}
   b5440:	b0ab      	sub	sp, #172	; 0xac
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b5442:	7883      	ldrb	r3, [r0, #2]
   b5444:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b5446:	af06      	add	r7, sp, #24
   b5448:	4604      	mov	r4, r0
   b544a:	460e      	mov	r6, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b544c:	d127      	bne.n	b549e <_Z14processCommandPKchb+0x66>
   b544e:	78c3      	ldrb	r3, [r0, #3]
   b5450:	2b42      	cmp	r3, #66	; 0x42
   b5452:	f040 81b3 	bne.w	b57bc <_Z14processCommandPKchb+0x384>
        }
   b5456:	466b      	mov	r3, sp
   b5458:	ee08 3a10 	vmov	s16, r3
        uint8_t rxBotID = atoi(rxIDBuf);
   b545c:	f107 0010 	add.w	r0, r7, #16
        rxIDBuf[0] = command[1];
   b5460:	7863      	ldrb	r3, [r4, #1]
   b5462:	743b      	strb	r3, [r7, #16]
      : _M_current(__i) { }
   b5464:	f8df 837c 	ldr.w	r8, [pc, #892]	; b57e4 <_Z14processCommandPKchb+0x3ac>
        uint8_t rxBotID = atoi(rxIDBuf);
   b5468:	f009 f943 	bl	be6f2 <atoi>
   b546c:	e9d8 9b00 	ldrd	r9, fp, [r8]
   b5470:	b2c3      	uxtb	r3, r0
   b5472:	60fb      	str	r3, [r7, #12]
        int index = 0;
   b5474:	f04f 0a00 	mov.w	sl, #0
        bool newBot = true;
   b5478:	2301      	movs	r3, #1
        for(WaterBot w: WaterBots){
   b547a:	45d9      	cmp	r9, fp
   b547c:	d015      	beq.n	b54aa <_Z14processCommandPKchb+0x72>
            if(rxBotID == w.botNum){
   b547e:	f899 2002 	ldrb.w	r2, [r9, #2]
   b5482:	68f9      	ldr	r1, [r7, #12]
   b5484:	428a      	cmp	r2, r1
   b5486:	d105      	bne.n	b5494 <_Z14processCommandPKchb+0x5c>
                TargetWB = &WaterBots.at(index);
   b5488:	4651      	mov	r1, sl
   b548a:	4640      	mov	r0, r8
   b548c:	f7ff fd9e 	bl	b4fcc <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
                newBot = false;
   b5490:	2300      	movs	r3, #0
                TargetWB = &WaterBots.at(index);
   b5492:	4605      	mov	r5, r0
            index++;
   b5494:	f10a 0a01 	add.w	sl, sl, #1
	++_M_current;
   b5498:	f109 093c 	add.w	r9, r9, #60	; 0x3c
	return *this;
   b549c:	e7ed      	b.n	b547a <_Z14processCommandPKchb+0x42>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b549e:	2b43      	cmp	r3, #67	; 0x43
   b54a0:	f040 818c 	bne.w	b57bc <_Z14processCommandPKchb+0x384>
   b54a4:	78c3      	ldrb	r3, [r0, #3]
   b54a6:	2b43      	cmp	r3, #67	; 0x43
   b54a8:	e7d3      	b.n	b5452 <_Z14processCommandPKchb+0x1a>
        if(newBot){
   b54aa:	b18b      	cbz	r3, b54d0 <_Z14processCommandPKchb+0x98>
            WaterBot newWaterbot;
   b54ac:	f107 0044 	add.w	r0, r7, #68	; 0x44
   b54b0:	f7ff f9d4 	bl	b485c <_ZN8WaterBotC1Ev>
            newWaterbot.botNum = rxBotID;
   b54b4:	68fb      	ldr	r3, [r7, #12]
            WaterBots.push_back(newWaterbot);
   b54b6:	48cb      	ldr	r0, [pc, #812]	; (b57e4 <_Z14processCommandPKchb+0x3ac>)
            newWaterbot.botNum = rxBotID;
   b54b8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            WaterBots.push_back(newWaterbot);
   b54bc:	f107 0144 	add.w	r1, r7, #68	; 0x44
   b54c0:	f7ff ff9e 	bl	b5400 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      { return __normal_iterator(_M_current - __n); }
   b54c4:	f8d8 5004 	ldr.w	r5, [r8, #4]
            redrawMenu = true;
   b54c8:	4bc7      	ldr	r3, [pc, #796]	; (b57e8 <_Z14processCommandPKchb+0x3b0>)
   b54ca:	2201      	movs	r2, #1
   b54cc:	3d3c      	subs	r5, #60	; 0x3c
   b54ce:	701a      	strb	r2, [r3, #0]
        char dataStr[strlen(command)-8];
   b54d0:	4620      	mov	r0, r4
   b54d2:	f009 f9fe 	bl	be8d2 <strlen>
   b54d6:	3801      	subs	r0, #1
   b54d8:	f020 0007 	bic.w	r0, r0, #7
   b54dc:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b54e0:	4620      	mov	r0, r4
   b54e2:	f009 f9f6 	bl	be8d2 <strlen>
        char dataStr[strlen(command)-8];
   b54e6:	f10d 0918 	add.w	r9, sp, #24
        dataStr[strlen(command)-9] = '\0';
   b54ea:	4448      	add	r0, r9
   b54ec:	f04f 0a00 	mov.w	sl, #0
   b54f0:	f800 ac09 	strb.w	sl, [r0, #-9]
        checkStr[0] = command[strlen(command)-2];
   b54f4:	4620      	mov	r0, r4
        cmdStr[3] = '\0';
   b54f6:	f887 a01b 	strb.w	sl, [r7, #27]
        checkStr[0] = command[strlen(command)-2];
   b54fa:	f009 f9ea 	bl	be8d2 <strlen>
   b54fe:	4420      	add	r0, r4
   b5500:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b5504:	753b      	strb	r3, [r7, #20]
        checkStr[1] = command[strlen(command)-1];
   b5506:	4620      	mov	r0, r4
   b5508:	f009 f9e3 	bl	be8d2 <strlen>
   b550c:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b550e:	4651      	mov	r1, sl
        checkStr[1] = command[strlen(command)-1];
   b5510:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b5514:	757b      	strb	r3, [r7, #21]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b5516:	2210      	movs	r2, #16
   b5518:	f107 0014 	add.w	r0, r7, #20
        checkStr[2] = '\0';
   b551c:	f887 a016 	strb.w	sl, [r7, #22]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b5520:	f00a f8c2 	bl	bf6a8 <strtol>
   b5524:	4683      	mov	fp, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b5526:	fa5f fb8b 	uxtb.w	fp, fp
   b552a:	f008 f86b 	bl	bd604 <_Z16_fetch_usbserialv>
   b552e:	49af      	ldr	r1, [pc, #700]	; (b57ec <_Z14processCommandPKchb+0x3b4>)
   b5530:	465b      	mov	r3, fp
   b5532:	465a      	mov	r2, fp
   b5534:	f7fe ff0e 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b5538:	f04f 0a04 	mov.w	sl, #4
   b553c:	4620      	mov	r0, r4
   b553e:	f009 f9c8 	bl	be8d2 <strlen>
   b5542:	3802      	subs	r0, #2
   b5544:	4582      	cmp	sl, r0
   b5546:	d216      	bcs.n	b5576 <_Z14processCommandPKchb+0x13e>
            if(i < 7) cmdStr[i-4] = command[i];
   b5548:	f1ba 0f06 	cmp.w	sl, #6
   b554c:	bf9b      	ittet	ls
   b554e:	f107 0390 	addls.w	r3, r7, #144	; 0x90
   b5552:	4453      	addls	r3, sl
            else dataStr[i-7] = command[i];
   b5554:	eb09 030a 	addhi.w	r3, r9, sl
            if(i < 7) cmdStr[i-4] = command[i];
   b5558:	f814 200a 	ldrbls.w	r2, [r4, sl]
            else dataStr[i-7] = command[i];
   b555c:	bf8c      	ite	hi
   b555e:	f814 200a 	ldrbhi.w	r2, [r4, sl]
            if(i < 7) cmdStr[i-4] = command[i];
   b5562:	f803 2c7c 	strbls.w	r2, [r3, #-124]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b5566:	f10a 0a01 	add.w	sl, sl, #1
            else dataStr[i-7] = command[i];
   b556a:	bf88      	it	hi
   b556c:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b5570:	fa5f fa8a 	uxtb.w	sl, sl
   b5574:	e7e2      	b.n	b553c <_Z14processCommandPKchb+0x104>
        if(checksum != strlen(command)-2){
   b5576:	4558      	cmp	r0, fp
   b5578:	d028      	beq.n	b55cc <_Z14processCommandPKchb+0x194>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b557a:	f008 f843 	bl	bd604 <_Z16_fetch_usbserialv>
   b557e:	4605      	mov	r5, r0
   b5580:	4620      	mov	r0, r4
   b5582:	f009 f9a6 	bl	be8d2 <strlen>
   b5586:	465b      	mov	r3, fp
   b5588:	1e82      	subs	r2, r0, #2
   b558a:	4999      	ldr	r1, [pc, #612]	; (b57f0 <_Z14processCommandPKchb+0x3b8>)
   b558c:	4628      	mov	r0, r5
   b558e:	f7fe fee1 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            Serial.println("Warning, checksum does not match");
   b5592:	f008 f837 	bl	bd604 <_Z16_fetch_usbserialv>
   b5596:	4997      	ldr	r1, [pc, #604]	; (b57f4 <_Z14processCommandPKchb+0x3bc>)
   b5598:	f007 fc3f 	bl	bce1a <_ZN5Print7printlnEPKc>
            if((command[1] >= '0' && command[1] <= '9') || command[1] == 'C'){
   b559c:	7863      	ldrb	r3, [r4, #1]
   b559e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b55a2:	2a09      	cmp	r2, #9
   b55a4:	d902      	bls.n	b55ac <_Z14processCommandPKchb+0x174>
   b55a6:	2b43      	cmp	r3, #67	; 0x43
   b55a8:	f040 8105 	bne.w	b57b6 <_Z14processCommandPKchb+0x37e>
                rxBotNum[0] = command[0];
   b55ac:	7822      	ldrb	r2, [r4, #0]
   b55ae:	f887 2044 	strb.w	r2, [r7, #68]	; 0x44
                rxBotNum[1] = command[1];
   b55b2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                sprintf(errBuf,"CC%2snak%3s",rxBotNum,cmdStr);
   b55b6:	4990      	ldr	r1, [pc, #576]	; (b57f8 <_Z14processCommandPKchb+0x3c0>)
   b55b8:	4890      	ldr	r0, [pc, #576]	; (b57fc <_Z14processCommandPKchb+0x3c4>)
   b55ba:	f107 0318 	add.w	r3, r7, #24
   b55be:	f107 0244 	add.w	r2, r7, #68	; 0x44
   b55c2:	f004 fbd3 	bl	b9d6c <sprintf>
                errModeReply = mode;
   b55c6:	4b8e      	ldr	r3, [pc, #568]	; (b5800 <_Z14processCommandPKchb+0x3c8>)
            errCmdMode = mode;
   b55c8:	701e      	strb	r6, [r3, #0]
   b55ca:	e0f4      	b.n	b57b6 <_Z14processCommandPKchb+0x37e>
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   b55cc:	498d      	ldr	r1, [pc, #564]	; (b5804 <_Z14processCommandPKchb+0x3cc>)
   b55ce:	f107 0018 	add.w	r0, r7, #24
   b55d2:	f009 f94e 	bl	be872 <strcmp>
   b55d6:	2800      	cmp	r0, #0
   b55d8:	f000 80ed 	beq.w	b57b6 <_Z14processCommandPKchb+0x37e>
        else if(!strcmp(cmdStr,"sup")){
   b55dc:	498a      	ldr	r1, [pc, #552]	; (b5808 <_Z14processCommandPKchb+0x3d0>)
   b55de:	f107 0018 	add.w	r0, r7, #24
   b55e2:	f009 f946 	bl	be872 <strcmp>
   b55e6:	2800      	cmp	r0, #0
   b55e8:	f040 808e 	bne.w	b5708 <_Z14processCommandPKchb+0x2d0>
      : _M_current(__i) { }
   b55ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b55f0:	f8d8 4000 	ldr.w	r4, [r8]
   b55f4:	60bb      	str	r3, [r7, #8]
            for(WaterBot &w: WaterBots){
   b55f6:	68bb      	ldr	r3, [r7, #8]
   b55f8:	42a3      	cmp	r3, r4
   b55fa:	f000 8085 	beq.w	b5708 <_Z14processCommandPKchb+0x2d0>
                if(rxBotID == w.botNum){
   b55fe:	78a3      	ldrb	r3, [r4, #2]
   b5600:	68fa      	ldr	r2, [r7, #12]
   b5602:	4293      	cmp	r3, r2
   b5604:	d17e      	bne.n	b5704 <_Z14processCommandPKchb+0x2cc>
                    sscanf(dataStr,"%u %u %s %s",&battpct,&statflags,testLat,testLon);
   b5606:	f107 0a38 	add.w	sl, r7, #56	; 0x38
   b560a:	f107 0b2c 	add.w	fp, r7, #44	; 0x2c
   b560e:	497f      	ldr	r1, [pc, #508]	; (b580c <_Z14processCommandPKchb+0x3d4>)
   b5610:	f8cd a004 	str.w	sl, [sp, #4]
   b5614:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b5618:	f107 0224 	add.w	r2, r7, #36	; 0x24
   b561c:	f8cd b000 	str.w	fp, [sp]
   b5620:	4648      	mov	r0, r9
   b5622:	f004 fbab 	bl	b9d7c <sscanf>
                    latRX = atof(testLat);
   b5626:	4658      	mov	r0, fp
   b5628:	f009 f860 	bl	be6ec <atof>
                    lonRX = atof(testLon);
   b562c:	4650      	mov	r0, sl
                    latRX = atof(testLat);
   b562e:	ed87 0b00 	vstr	d0, [r7]
                    lonRX = atof(testLon);
   b5632:	f009 f85b 	bl	be6ec <atof>
                    w.battPercent = battpct;
   b5636:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
   b563a:	70e1      	strb	r1, [r4, #3]
                    w.LTEAvail = statflags & 1;
   b563c:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
                    latRX = atof(testLat);
   b5640:	e9d7 2300 	ldrd	r2, r3, [r7]
                    w.LTEAvail = statflags & 1;
   b5644:	f001 0001 	and.w	r0, r1, #1
   b5648:	7160      	strb	r0, [r4, #5]
                    w.XBeeAvail = (statflags >> 1) & 1;
   b564a:	f3c1 0040 	ubfx	r0, r1, #1, #1
   b564e:	71a0      	strb	r0, [r4, #6]
                    w.BLEAvail = (statflags >> 2) & 1;
   b5650:	f3c1 0080 	ubfx	r0, r1, #2, #1
                    w.lowBatt = (statflags >> 6) & 1;
   b5654:	f3c1 1180 	ubfx	r1, r1, #6, #1
                    w.BLEAvail = (statflags >> 2) & 1;
   b5658:	7120      	strb	r0, [r4, #4]
                    w.lowBatt = (statflags >> 6) & 1;
   b565a:	7261      	strb	r1, [r4, #9]
                    latRX = atof(testLat);
   b565c:	4610      	mov	r0, r2
   b565e:	4619      	mov	r1, r3
                    lonRX = atof(testLon);
   b5660:	ec5b ab10 	vmov	sl, fp, d0
                    latRX = atof(testLat);
   b5664:	f008 ffce 	bl	be604 <__aeabi_d2f>
                    lonRX = atof(testLon);
   b5668:	4659      	mov	r1, fp
                    latRX = atof(testLat);
   b566a:	61a0      	str	r0, [r4, #24]
                    lonRX = atof(testLon);
   b566c:	4650      	mov	r0, sl
   b566e:	f008 ffc9 	bl	be604 <__aeabi_d2f>
   b5672:	61e0      	str	r0, [r4, #28]
   b5674:	f004 f8ee 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
                    if(millis() - w.publishTime > WB_MOD_UPDATE_TIME){
   b5678:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b567a:	1ac0      	subs	r0, r0, r3
   b567c:	f64e 2360 	movw	r3, #60000	; 0xea60
   b5680:	4298      	cmp	r0, r3
   b5682:	d909      	bls.n	b5698 <_Z14processCommandPKchb+0x260>
                        w.offloading = (statflags >> 3) & 1;
   b5684:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   b5688:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   b568c:	7322      	strb	r2, [r4, #12]
                        w.driveMode = (statflags >> 4) & 3;
   b568e:	f3c3 1201 	ubfx	r2, r3, #4, #2
                        w.dataRecording = (statflags >> 7) & 1;
   b5692:	09db      	lsrs	r3, r3, #7
                        w.driveMode = (statflags >> 4) & 3;
   b5694:	71e2      	strb	r2, [r4, #7]
                        w.dataRecording = (statflags >> 7) & 1;
   b5696:	72e3      	strb	r3, [r4, #11]
                    if(w.lowBatt && !w.warnedLowBatt){
   b5698:	7a63      	ldrb	r3, [r4, #9]
   b569a:	b363      	cbz	r3, b56f6 <_Z14processCommandPKchb+0x2be>
   b569c:	7aa3      	ldrb	r3, [r4, #10]
   b569e:	bb53      	cbnz	r3, b56f6 <_Z14processCommandPKchb+0x2be>
                        w.warnedLowBatt = true;
   b56a0:	f04f 0a01 	mov.w	sl, #1
   b56a4:	f884 a00a 	strb.w	sl, [r4, #10]
                        sprintf(m.primaryLine,"Warning\0");
   b56a8:	4959      	ldr	r1, [pc, #356]	; (b5810 <_Z14processCommandPKchb+0x3d8>)
class MenuPopUp{
   b56aa:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
                        sprintf(m.primaryLine,"Warning\0");
   b56ae:	f107 0044 	add.w	r0, r7, #68	; 0x44
class MenuPopUp{
   b56b2:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
   b56b6:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
                        sprintf(m.primaryLine,"Warning\0");
   b56ba:	f009 f8e4 	bl	be886 <strcpy>
                        sprintf(m.secondaryLine,"Bot %d\0", w.botNum);
   b56be:	78a2      	ldrb	r2, [r4, #2]
   b56c0:	4954      	ldr	r1, [pc, #336]	; (b5814 <_Z14processCommandPKchb+0x3dc>)
   b56c2:	f107 004e 	add.w	r0, r7, #78	; 0x4e
   b56c6:	f004 fb51 	bl	b9d6c <sprintf>
                        sprintf(m.tertiaryLine, "Low Battery: %d\0",w.battPercent);
   b56ca:	78e2      	ldrb	r2, [r4, #3]
   b56cc:	4952      	ldr	r1, [pc, #328]	; (b5818 <_Z14processCommandPKchb+0x3e0>)
   b56ce:	f107 006c 	add.w	r0, r7, #108	; 0x6c
   b56d2:	f004 fb4b 	bl	b9d6c <sprintf>
                        m.primaryStart = 20;
   b56d6:	2314      	movs	r3, #20
                        m.secondaryStart = 40;
   b56d8:	2228      	movs	r2, #40	; 0x28
                        PopUps.push_back(m);
   b56da:	4850      	ldr	r0, [pc, #320]	; (b581c <_Z14processCommandPKchb+0x3e4>)
                        m.primaryStart = 20;
   b56dc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
                        PopUps.push_back(m);
   b56e0:	f107 0144 	add.w	r1, r7, #68	; 0x44
                        m.tertiaryStart = 20;
   b56e4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
                        m.secondaryStart = 40;
   b56e8:	f887 208b 	strb.w	r2, [r7, #139]	; 0x8b
                        PopUps.push_back(m);
   b56ec:	f7ff fdda 	bl	b52a4 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>
                        redrawMenu = true;
   b56f0:	4b3d      	ldr	r3, [pc, #244]	; (b57e8 <_Z14processCommandPKchb+0x3b0>)
   b56f2:	f883 a000 	strb.w	sl, [r3]
                    if(botSelect = w.botNum) redrawMenu = true;
   b56f6:	78a3      	ldrb	r3, [r4, #2]
   b56f8:	4a49      	ldr	r2, [pc, #292]	; (b5820 <_Z14processCommandPKchb+0x3e8>)
   b56fa:	7013      	strb	r3, [r2, #0]
   b56fc:	b113      	cbz	r3, b5704 <_Z14processCommandPKchb+0x2cc>
   b56fe:	4a3a      	ldr	r2, [pc, #232]	; (b57e8 <_Z14processCommandPKchb+0x3b0>)
   b5700:	2301      	movs	r3, #1
   b5702:	7013      	strb	r3, [r2, #0]
      operator++() _GLIBCXX_NOEXCEPT
   b5704:	343c      	adds	r4, #60	; 0x3c
	return *this;
   b5706:	e776      	b.n	b55f6 <_Z14processCommandPKchb+0x1be>
        if(!strcmp(cmdStr,"sns")){
   b5708:	4946      	ldr	r1, [pc, #280]	; (b5824 <_Z14processCommandPKchb+0x3ec>)
   b570a:	f107 0018 	add.w	r0, r7, #24
   b570e:	f009 f8b0 	bl	be872 <strcmp>
   b5712:	2800      	cmp	r0, #0
   b5714:	d158      	bne.n	b57c8 <_Z14processCommandPKchb+0x390>
            sscanf(dataStr,"%s %s %d %d %d %d %d",GPSLatstr,GPSLonstr,&do_in,&pH_in,&cond_in,&mcond_in,&temp_in);
   b5716:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   b571a:	9304      	str	r3, [sp, #16]
   b571c:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b5720:	9303      	str	r3, [sp, #12]
   b5722:	f107 0324 	add.w	r3, r7, #36	; 0x24
   b5726:	9302      	str	r3, [sp, #8]
   b5728:	f107 0320 	add.w	r3, r7, #32
   b572c:	9301      	str	r3, [sp, #4]
   b572e:	f107 031c 	add.w	r3, r7, #28
   b5732:	493d      	ldr	r1, [pc, #244]	; (b5828 <_Z14processCommandPKchb+0x3f0>)
   b5734:	9300      	str	r3, [sp, #0]
   b5736:	f107 0238 	add.w	r2, r7, #56	; 0x38
   b573a:	f107 0344 	add.w	r3, r7, #68	; 0x44
   b573e:	4648      	mov	r0, r9
   b5740:	f004 fb1c 	bl	b9d7c <sscanf>
            TargetWB->DO = ((float)do_in)/1000.0;
   b5744:	edd7 7a07 	vldr	s15, [r7, #28]
   b5748:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   b574c:	eddf 7a37 	vldr	s15, [pc, #220]	; b582c <_Z14processCommandPKchb+0x3f4>
   b5750:	eec7 6a27 	vdiv.f32	s13, s14, s15
            TargetWB->pH = ((float)pH_in)/1000.0;
   b5754:	ed97 7a08 	vldr	s14, [r7, #32]
            TargetWB->DO = ((float)do_in)/1000.0;
   b5758:	edc5 6a0a 	vstr	s13, [r5, #40]	; 0x28
            TargetWB->pH = ((float)pH_in)/1000.0;
   b575c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b5760:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b5764:	edc5 6a08 	vstr	s13, [r5, #32]
            TargetWB->Cond = ((float)cond_in)/1000.0;
   b5768:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
   b576c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b5770:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b5774:	edc5 6a0b 	vstr	s13, [r5, #44]	; 0x2c
            TargetWB->MCond = ((float)mcond_in)/1000.0;
   b5778:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
   b577c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b5780:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b5784:	edc5 6a0c 	vstr	s13, [r5, #48]	; 0x30
            TargetWB->temp = ((float)temp_in)/1000.0;
   b5788:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
   b578c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b5790:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b5794:	edc5 6a09 	vstr	s13, [r5, #36]	; 0x24
            Serial.printlnf("Bot #: %d Temp: %f", TargetWB->botNum,TargetWB->temp);
   b5798:	f007 ff34 	bl	bd604 <_Z16_fetch_usbserialv>
   b579c:	78aa      	ldrb	r2, [r5, #2]
   b579e:	60fa      	str	r2, [r7, #12]
   b57a0:	4604      	mov	r4, r0
   b57a2:	6a68      	ldr	r0, [r5, #36]	; 0x24
   b57a4:	f008 fc1c 	bl	bdfe0 <__aeabi_f2d>
   b57a8:	e9cd 0100 	strd	r0, r1, [sp]
   b57ac:	68fa      	ldr	r2, [r7, #12]
   b57ae:	4920      	ldr	r1, [pc, #128]	; (b5830 <_Z14processCommandPKchb+0x3f8>)
   b57b0:	4620      	mov	r0, r4
   b57b2:	f7fe fdcf 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b57b6:	ee18 3a10 	vmov	r3, s16
   b57ba:	469d      	mov	sp, r3
}
   b57bc:	3794      	adds	r7, #148	; 0x94
   b57be:	46bd      	mov	sp, r7
   b57c0:	ecbd 8b02 	vpop	{d8}
   b57c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(!strcmp(cmdStr,"nak")){  //Acknowledgement for XBee and BLE
   b57c8:	491a      	ldr	r1, [pc, #104]	; (b5834 <_Z14processCommandPKchb+0x3fc>)
   b57ca:	f107 0018 	add.w	r0, r7, #24
   b57ce:	f009 f850 	bl	be872 <strcmp>
   b57d2:	bba8      	cbnz	r0, b5840 <_Z14processCommandPKchb+0x408>
            strncpy(errCmdStr,dataStr,3);
   b57d4:	4818      	ldr	r0, [pc, #96]	; (b5838 <_Z14processCommandPKchb+0x400>)
   b57d6:	2203      	movs	r2, #3
   b57d8:	4649      	mov	r1, r9
   b57da:	f009 f896 	bl	be90a <strncpy>
            errCmdMode = mode;
   b57de:	4b17      	ldr	r3, [pc, #92]	; (b583c <_Z14processCommandPKchb+0x404>)
   b57e0:	e6f2      	b.n	b55c8 <_Z14processCommandPKchb+0x190>
   b57e2:	bf00      	nop
   b57e4:	2003dcc8 	.word	0x2003dcc8
   b57e8:	2003da90 	.word	0x2003da90
   b57ec:	000c0b9f 	.word	0x000c0b9f
   b57f0:	000c0a01 	.word	0x000c0a01
   b57f4:	000c0a1e 	.word	0x000c0a1e
   b57f8:	000c0a3f 	.word	0x000c0a3f
   b57fc:	2003dd70 	.word	0x2003dd70
   b5800:	2003dd83 	.word	0x2003dd83
   b5804:	000c0bb4 	.word	0x000c0bb4
   b5808:	000c0bb8 	.word	0x000c0bb8
   b580c:	000c0bbc 	.word	0x000c0bbc
   b5810:	000c0efc 	.word	0x000c0efc
   b5814:	000c0f05 	.word	0x000c0f05
   b5818:	000c0f0d 	.word	0x000c0f0d
   b581c:	2003dcac 	.word	0x2003dcac
   b5820:	2003dd61 	.word	0x2003dd61
   b5824:	000c0bc8 	.word	0x000c0bc8
   b5828:	000c0bcc 	.word	0x000c0bcc
   b582c:	447a0000 	.word	0x447a0000
   b5830:	000c0be1 	.word	0x000c0be1
   b5834:	000c0bf4 	.word	0x000c0bf4
   b5838:	2003dd80 	.word	0x2003dd80
   b583c:	2003dd7f 	.word	0x2003dd7f
        else if(!strcmp(cmdStr,"hwd")){  //Hello World! - Received startup pairing message
   b5840:	4931      	ldr	r1, [pc, #196]	; (b5908 <_Z14processCommandPKchb+0x4d0>)
   b5842:	f107 0018 	add.w	r0, r7, #24
   b5846:	f009 f814 	bl	be872 <strcmp>
   b584a:	2800      	cmp	r0, #0
   b584c:	d139      	bne.n	b58c2 <_Z14processCommandPKchb+0x48a>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b584e:	e9d8 3000 	ldrd	r3, r0, [r8]
            bool newBot = true;
   b5852:	2201      	movs	r2, #1
            for(WaterBot w: WaterBots){
   b5854:	4283      	cmp	r3, r0
   b5856:	d006      	beq.n	b5866 <_Z14processCommandPKchb+0x42e>
                if(rxBotID == w.botNum) newBot = false;
   b5858:	7899      	ldrb	r1, [r3, #2]
   b585a:	68fc      	ldr	r4, [r7, #12]
   b585c:	333c      	adds	r3, #60	; 0x3c
   b585e:	42a1      	cmp	r1, r4
   b5860:	bf08      	it	eq
   b5862:	2200      	moveq	r2, #0
	return *this;
   b5864:	e7f6      	b.n	b5854 <_Z14processCommandPKchb+0x41c>
            if(newBot){
   b5866:	b1e2      	cbz	r2, b58a2 <_Z14processCommandPKchb+0x46a>
                Serial.println("Found a new water bot ID");
   b5868:	f007 fecc 	bl	bd604 <_Z16_fetch_usbserialv>
   b586c:	4927      	ldr	r1, [pc, #156]	; (b590c <_Z14processCommandPKchb+0x4d4>)
   b586e:	f007 fad4 	bl	bce1a <_ZN5Print7printlnEPKc>
                WaterBot newWaterbot;
   b5872:	f107 0044 	add.w	r0, r7, #68	; 0x44
   b5876:	f7fe fff1 	bl	b485c <_ZN8WaterBotC1Ev>
                if(mode == 1) newWaterbot.BLEAvail = true;
   b587a:	2e01      	cmp	r6, #1
   b587c:	d115      	bne.n	b58aa <_Z14processCommandPKchb+0x472>
   b587e:	f887 6048 	strb.w	r6, [r7, #72]	; 0x48
                newWaterbot.botNum = rxBotID;
   b5882:	68fb      	ldr	r3, [r7, #12]
                WaterBots.push_back(newWaterbot);
   b5884:	4822      	ldr	r0, [pc, #136]	; (b5910 <_Z14processCommandPKchb+0x4d8>)
                newWaterbot.botNum = rxBotID;
   b5886:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
                WaterBots.push_back(newWaterbot);
   b588a:	f107 0144 	add.w	r1, r7, #68	; 0x44
   b588e:	f7ff fdb7 	bl	b5400 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
                PairBots.push_back(newWaterbot);
   b5892:	4820      	ldr	r0, [pc, #128]	; (b5914 <_Z14processCommandPKchb+0x4dc>)
   b5894:	f107 0144 	add.w	r1, r7, #68	; 0x44
   b5898:	f7ff fdb2 	bl	b5400 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
                redrawMenu = true;
   b589c:	4b1e      	ldr	r3, [pc, #120]	; (b5918 <_Z14processCommandPKchb+0x4e0>)
   b589e:	2201      	movs	r2, #1
   b58a0:	701a      	strb	r2, [r3, #0]
            botPairRx = true;
   b58a2:	4b1e      	ldr	r3, [pc, #120]	; (b591c <_Z14processCommandPKchb+0x4e4>)
   b58a4:	2201      	movs	r2, #1
   b58a6:	701a      	strb	r2, [r3, #0]
   b58a8:	e785      	b.n	b57b6 <_Z14processCommandPKchb+0x37e>
                else if(mode == 2) newWaterbot.XBeeAvail = true;
   b58aa:	2e02      	cmp	r6, #2
   b58ac:	f04f 0301 	mov.w	r3, #1
   b58b0:	d102      	bne.n	b58b8 <_Z14processCommandPKchb+0x480>
   b58b2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
   b58b6:	e7e4      	b.n	b5882 <_Z14processCommandPKchb+0x44a>
                else if(mode == 3) newWaterbot.LTEAvail = true;
   b58b8:	2e03      	cmp	r6, #3
   b58ba:	bf08      	it	eq
   b58bc:	f887 3049 	strbeq.w	r3, [r7, #73]	; 0x49
   b58c0:	e7df      	b.n	b5882 <_Z14processCommandPKchb+0x44a>
        else if(!strcmp(cmdStr,"pts")){
   b58c2:	4917      	ldr	r1, [pc, #92]	; (b5920 <_Z14processCommandPKchb+0x4e8>)
   b58c4:	f107 0018 	add.w	r0, r7, #24
   b58c8:	f008 ffd3 	bl	be872 <strcmp>
   b58cc:	2800      	cmp	r0, #0
   b58ce:	f47f af72 	bne.w	b57b6 <_Z14processCommandPKchb+0x37e>
   b58d2:	4c14      	ldr	r4, [pc, #80]	; (b5924 <_Z14processCommandPKchb+0x4ec>)
            if(!logFile.isOpen()){
   b58d4:	7c23      	ldrb	r3, [r4, #16]
   b58d6:	b983      	cbnz	r3, b58fa <_Z14processCommandPKchb+0x4c2>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b58d8:	4913      	ldr	r1, [pc, #76]	; (b5928 <_Z14processCommandPKchb+0x4f0>)
   b58da:	f244 2202 	movw	r2, #16898	; 0x4202
   b58de:	f104 0010 	add.w	r0, r4, #16
   b58e2:	f7fe fecb 	bl	b467c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b58e6:	4911      	ldr	r1, [pc, #68]	; (b592c <_Z14processCommandPKchb+0x4f4>)
   b58e8:	464a      	mov	r2, r9
   b58ea:	4620      	mov	r0, r4
   b58ec:	f7fe fd32 	bl	b4354 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b58f0:	f104 0010 	add.w	r0, r4, #16
   b58f4:	f001 fcd4 	bl	b72a0 <_ZN7FatFile5closeEv>
   b58f8:	e75d      	b.n	b57b6 <_Z14processCommandPKchb+0x37e>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b58fa:	490c      	ldr	r1, [pc, #48]	; (b592c <_Z14processCommandPKchb+0x4f4>)
   b58fc:	464a      	mov	r2, r9
   b58fe:	4620      	mov	r0, r4
   b5900:	f7fe fd28 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        if(sendAck){    //Transmit out acknowledgement if needed
   b5904:	e757      	b.n	b57b6 <_Z14processCommandPKchb+0x37e>
   b5906:	bf00      	nop
   b5908:	000c0bf8 	.word	0x000c0bf8
   b590c:	000c0bfc 	.word	0x000c0bfc
   b5910:	2003dcc8 	.word	0x2003dcc8
   b5914:	2003dca0 	.word	0x2003dca0
   b5918:	2003da90 	.word	0x2003da90
   b591c:	2003dd60 	.word	0x2003dd60
   b5920:	000c0c15 	.word	0x000c0c15
   b5924:	2003dddc 	.word	0x2003dddc
   b5928:	2003dd84 	.word	0x2003dd84
   b592c:	000c0c19 	.word	0x000c0c19

000b5930 <_Z14dataLTEHandlerPKcS0_>:
void dataLTEHandler(const char *event, const char *data){
   b5930:	b510      	push	{r4, lr}
   b5932:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b5934:	2200      	movs	r2, #0
   b5936:	2104      	movs	r1, #4
   b5938:	4620      	mov	r0, r4
   b593a:	f7ff fd7d 	bl	b5438 <_Z14processCommandPKchb>
    if(logMessages){
   b593e:	4b0b      	ldr	r3, [pc, #44]	; (b596c <_Z14dataLTEHandlerPKcS0_+0x3c>)
   b5940:	781b      	ldrb	r3, [r3, #0]
   b5942:	b193      	cbz	r3, b596a <_Z14dataLTEHandlerPKcS0_+0x3a>
   b5944:	480a      	ldr	r0, [pc, #40]	; (b5970 <_Z14dataLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5946:	7c03      	ldrb	r3, [r0, #16]
   b5948:	b92b      	cbnz	r3, b5956 <_Z14dataLTEHandlerPKcS0_+0x26>
   b594a:	490a      	ldr	r1, [pc, #40]	; (b5974 <_Z14dataLTEHandlerPKcS0_+0x44>)
   b594c:	f244 2202 	movw	r2, #16898	; 0x4202
   b5950:	3010      	adds	r0, #16
   b5952:	f7fe fe93 	bl	b467c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b5956:	4622      	mov	r2, r4
   b5958:	4907      	ldr	r1, [pc, #28]	; (b5978 <_Z14dataLTEHandlerPKcS0_+0x48>)
   b595a:	4805      	ldr	r0, [pc, #20]	; (b5970 <_Z14dataLTEHandlerPKcS0_+0x40>)
   b595c:	f7fe fcfa 	bl	b4354 <_ZN5Print8printlnfEPKcz>
}
   b5960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b5964:	4805      	ldr	r0, [pc, #20]	; (b597c <_Z14dataLTEHandlerPKcS0_+0x4c>)
   b5966:	f001 bc9b 	b.w	b72a0 <_ZN7FatFile5closeEv>
}
   b596a:	bd10      	pop	{r4, pc}
   b596c:	2003de10 	.word	0x2003de10
   b5970:	2003dddc 	.word	0x2003dddc
   b5974:	2003dd84 	.word	0x2003dd84
   b5978:	000c0c3c 	.word	0x000c0c3c
   b597c:	2003ddec 	.word	0x2003ddec

000b5980 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b5980:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b5982:	f101 0308 	add.w	r3, r1, #8
   b5986:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b598a:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b598c:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b5990:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b5992:	460a      	mov	r2, r1
   b5994:	4601      	mov	r1, r0
   b5996:	4668      	mov	r0, sp
   b5998:	f008 febf 	bl	be71a <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b599c:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b59a0:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b59a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b59a6:	b113      	cbz	r3, b59ae <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b59a8:	2300      	movs	r3, #0
   b59aa:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.print("New BT Command: ");
   b59ae:	f007 fe29 	bl	bd604 <_Z16_fetch_usbserialv>
   b59b2:	4911      	ldr	r1, [pc, #68]	; (b59f8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>)
   b59b4:	f007 fa1e 	bl	bcdf4 <_ZN5Print5printEPKc>
    Serial.println(btBuf);
   b59b8:	f007 fe24 	bl	bd604 <_Z16_fetch_usbserialv>
   b59bc:	4629      	mov	r1, r5
   b59be:	f007 fa2c 	bl	bce1a <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b59c2:	2201      	movs	r2, #1
   b59c4:	4611      	mov	r1, r2
   b59c6:	4628      	mov	r0, r5
   b59c8:	f7ff fd36 	bl	b5438 <_Z14processCommandPKchb>
    if(logMessages){
   b59cc:	4b0b      	ldr	r3, [pc, #44]	; (b59fc <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   b59ce:	781b      	ldrb	r3, [r3, #0]
   b59d0:	b183      	cbz	r3, b59f4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>
   b59d2:	480b      	ldr	r0, [pc, #44]	; (b5a00 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b59d4:	7c03      	ldrb	r3, [r0, #16]
   b59d6:	b92b      	cbnz	r3, b59e4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>
   b59d8:	490a      	ldr	r1, [pc, #40]	; (b5a04 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84>)
   b59da:	f244 2202 	movw	r2, #16898	; 0x4202
   b59de:	3010      	adds	r0, #16
   b59e0:	f7fe fe4c 	bl	b467c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b59e4:	4908      	ldr	r1, [pc, #32]	; (b5a08 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   b59e6:	4806      	ldr	r0, [pc, #24]	; (b5a00 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
   b59e8:	462a      	mov	r2, r5
   b59ea:	f7fe fcb3 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b59ee:	4807      	ldr	r0, [pc, #28]	; (b5a0c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b59f0:	f001 fc56 	bl	b72a0 <_ZN7FatFile5closeEv>
}
   b59f4:	46bd      	mov	sp, r7
   b59f6:	bdb0      	pop	{r4, r5, r7, pc}
   b59f8:	000c0c5c 	.word	0x000c0c5c
   b59fc:	2003de10 	.word	0x2003de10
   b5a00:	2003dddc 	.word	0x2003dddc
   b5a04:	2003dd84 	.word	0x2003dd84
   b5a08:	000c0c6d 	.word	0x000c0c6d
   b5a0c:	2003ddec 	.word	0x2003ddec

000b5a10 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b5a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b5a14:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b5b04 <_Z11XBeeHandlerv+0xf4>
        if(logMessages){
   b5a18:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b5b08 <_Z11XBeeHandlerv+0xf8>
   b5a1c:	4d35      	ldr	r5, [pc, #212]	; (b5af4 <_Z11XBeeHandlerv+0xe4>)
void XBeeHandler(){  
   b5a1e:	b089      	sub	sp, #36	; 0x24
   b5a20:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b5a22:	f007 ff87 	bl	bd934 <_Z22__fetch_global_Serial1v>
   b5a26:	6803      	ldr	r3, [r0, #0]
   b5a28:	691b      	ldr	r3, [r3, #16]
   b5a2a:	4798      	blx	r3
   b5a2c:	2800      	cmp	r0, #0
   b5a2e:	d05c      	beq.n	b5aea <_Z11XBeeHandlerv+0xda>
        String data = Serial1.readStringUntil('\n');
   b5a30:	f007 ff80 	bl	bd934 <_Z22__fetch_global_Serial1v>
   b5a34:	220a      	movs	r2, #10
   b5a36:	4601      	mov	r1, r0
   b5a38:	4638      	mov	r0, r7
   b5a3a:	f007 fb33 	bl	bd0a4 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b5a3e:	68bb      	ldr	r3, [r7, #8]
   b5a40:	3307      	adds	r3, #7
   b5a42:	f023 0307 	bic.w	r3, r3, #7
    }
   b5a46:	466e      	mov	r6, sp
        char buffer[data.length()];
   b5a48:	ebad 0d03 	sub.w	sp, sp, r3
   b5a4c:	46ea      	mov	sl, sp
   b5a4e:	2300      	movs	r3, #0
   b5a50:	68b9      	ldr	r1, [r7, #8]
   b5a52:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b5a56:	458b      	cmp	fp, r1
   b5a58:	f103 0401 	add.w	r4, r3, #1
   b5a5c:	d207      	bcs.n	b5a6e <_Z11XBeeHandlerv+0x5e>
   b5a5e:	4659      	mov	r1, fp
   b5a60:	4638      	mov	r0, r7
   b5a62:	f007 fc39 	bl	bd2d8 <_ZNK6String6charAtEj>
   b5a66:	4623      	mov	r3, r4
   b5a68:	f80a 000b 	strb.w	r0, [sl, fp]
   b5a6c:	e7f0      	b.n	b5a50 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b5a6e:	2901      	cmp	r1, #1
   b5a70:	d90a      	bls.n	b5a88 <_Z11XBeeHandlerv+0x78>
   b5a72:	3901      	subs	r1, #1
   b5a74:	4638      	mov	r0, r7
   b5a76:	f007 fc2f 	bl	bd2d8 <_ZNK6String6charAtEj>
   b5a7a:	280d      	cmp	r0, #13
   b5a7c:	bf01      	itttt	eq
   b5a7e:	68bb      	ldreq	r3, [r7, #8]
   b5a80:	4453      	addeq	r3, sl
   b5a82:	2200      	moveq	r2, #0
   b5a84:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        processCommand(buffer,2,true);
   b5a88:	2201      	movs	r2, #1
   b5a8a:	2102      	movs	r1, #2
   b5a8c:	4650      	mov	r0, sl
   b5a8e:	f7ff fcd3 	bl	b5438 <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   b5a92:	f007 fdb7 	bl	bd604 <_Z16_fetch_usbserialv>
   b5a96:	4641      	mov	r1, r8
   b5a98:	f007 f9bf 	bl	bce1a <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b5a9c:	f007 fdb2 	bl	bd604 <_Z16_fetch_usbserialv>
   b5aa0:	6839      	ldr	r1, [r7, #0]
   b5aa2:	f007 f9ba 	bl	bce1a <_ZN5Print7printlnEPKc>
        if(logMessages){
   b5aa6:	f899 3000 	ldrb.w	r3, [r9]
   b5aaa:	b1cb      	cbz	r3, b5ae0 <_Z11XBeeHandlerv+0xd0>
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5aac:	7c2b      	ldrb	r3, [r5, #16]
   b5aae:	b92b      	cbnz	r3, b5abc <_Z11XBeeHandlerv+0xac>
   b5ab0:	4911      	ldr	r1, [pc, #68]	; (b5af8 <_Z11XBeeHandlerv+0xe8>)
   b5ab2:	4812      	ldr	r0, [pc, #72]	; (b5afc <_Z11XBeeHandlerv+0xec>)
   b5ab4:	f244 2202 	movw	r2, #16898	; 0x4202
   b5ab8:	f7fe fde0 	bl	b467c <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b5abc:	4639      	mov	r1, r7
   b5abe:	f107 0010 	add.w	r0, r7, #16
   b5ac2:	f007 fb9d 	bl	bd200 <_ZN6StringC1ERKS_>
   b5ac6:	490e      	ldr	r1, [pc, #56]	; (b5b00 <_Z11XBeeHandlerv+0xf0>)
   b5ac8:	f107 0210 	add.w	r2, r7, #16
   b5acc:	4628      	mov	r0, r5
   b5ace:	f7fe fc41 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b5ad2:	f107 0010 	add.w	r0, r7, #16
   b5ad6:	f007 fafd 	bl	bd0d4 <_ZN6StringD1Ev>
            logFile.close();
   b5ada:	4808      	ldr	r0, [pc, #32]	; (b5afc <_Z11XBeeHandlerv+0xec>)
   b5adc:	f001 fbe0 	bl	b72a0 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b5ae0:	4638      	mov	r0, r7
   b5ae2:	f007 faf7 	bl	bd0d4 <_ZN6StringD1Ev>
   b5ae6:	46b5      	mov	sp, r6
    while(Serial1.available()){
   b5ae8:	e79b      	b.n	b5a22 <_Z11XBeeHandlerv+0x12>
}
   b5aea:	3724      	adds	r7, #36	; 0x24
   b5aec:	46bd      	mov	sp, r7
   b5aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5af2:	bf00      	nop
   b5af4:	2003dddc 	.word	0x2003dddc
   b5af8:	2003dd84 	.word	0x2003dd84
   b5afc:	2003ddec 	.word	0x2003ddec
   b5b00:	000c0c9f 	.word	0x000c0c9f
   b5b04:	000c0c8d 	.word	0x000c0c8d
   b5b08:	2003de10 	.word	0x2003de10

000b5b0c <_Z11WaterBotSimh>:
void WaterBotSim(uint8_t count){
   b5b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5b10:	4d1c      	ldr	r5, [pc, #112]	; (b5b84 <_Z11WaterBotSimh+0x78>)
        WaterBots.push_back(simBot);
   b5b12:	f8df 9070 	ldr.w	r9, [pc, #112]	; b5b84 <_Z11WaterBotSimh+0x78>
   b5b16:	e9d5 2300 	ldrd	r2, r3, [r5]
   b5b1a:	1a9b      	subs	r3, r3, r2
   b5b1c:	4a1a      	ldr	r2, [pc, #104]	; (b5b88 <_Z11WaterBotSimh+0x7c>)
   b5b1e:	109b      	asrs	r3, r3, #2
   b5b20:	4353      	muls	r3, r2
    if(count + WaterBots.size() > 10) count = 10-WaterBots.size();
   b5b22:	b2dc      	uxtb	r4, r3
   b5b24:	4403      	add	r3, r0
   b5b26:	2b0a      	cmp	r3, #10
   b5b28:	bf84      	itt	hi
   b5b2a:	f1c4 000a 	rsbhi	r0, r4, #10
   b5b2e:	b2c0      	uxtbhi	r0, r0
    uint8_t botloop = count+WaterBots.size();
   b5b30:	4420      	add	r0, r4
void WaterBotSim(uint8_t count){
   b5b32:	b091      	sub	sp, #68	; 0x44
    uint8_t botloop = count+WaterBots.size();
   b5b34:	b2c4      	uxtb	r4, r0
   b5b36:	2600      	movs	r6, #0
        simBot.BLEAvail = false;
   b5b38:	f44f 3880 	mov.w	r8, #65536	; 0x10000
   b5b3c:	b2f7      	uxtb	r7, r6
    for(uint8_t temp = 0; temp < botloop; temp++){
   b5b3e:	42bc      	cmp	r4, r7
   b5b40:	d91d      	bls.n	b5b7e <_Z11WaterBotSimh+0x72>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b5b42:	e9d5 3000 	ldrd	r3, r0, [r5]
        int dupeBot = false;
   b5b46:	2200      	movs	r2, #0
        for(WaterBot wb: WaterBots){
   b5b48:	4298      	cmp	r0, r3
   b5b4a:	d005      	beq.n	b5b58 <_Z11WaterBotSimh+0x4c>
            if(wb.botNum == temp) dupeBot = true;
   b5b4c:	7899      	ldrb	r1, [r3, #2]
   b5b4e:	333c      	adds	r3, #60	; 0x3c
   b5b50:	42b9      	cmp	r1, r7
   b5b52:	bf08      	it	eq
   b5b54:	2201      	moveq	r2, #1
	return *this;
   b5b56:	e7f7      	b.n	b5b48 <_Z11WaterBotSimh+0x3c>
        if(dupeBot) continue;
   b5b58:	b97a      	cbnz	r2, b5b7a <_Z11WaterBotSimh+0x6e>
        WaterBot simBot;
   b5b5a:	a801      	add	r0, sp, #4
   b5b5c:	f7fe fe7e 	bl	b485c <_ZN8WaterBotC1Ev>
        simBot.battPercent = random(100);
   b5b60:	2064      	movs	r0, #100	; 0x64
        simBot.botNum = temp;
   b5b62:	f88d 7006 	strb.w	r7, [sp, #6]
        simBot.BLEAvail = false;
   b5b66:	f8cd 8008 	str.w	r8, [sp, #8]
        simBot.battPercent = random(100);
   b5b6a:	f007 f9af 	bl	bcecc <_Z6randomi>
        WaterBots.push_back(simBot);
   b5b6e:	a901      	add	r1, sp, #4
        simBot.battPercent = random(100);
   b5b70:	f88d 0007 	strb.w	r0, [sp, #7]
        WaterBots.push_back(simBot);
   b5b74:	4648      	mov	r0, r9
   b5b76:	f7ff fc43 	bl	b5400 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
    for(uint8_t temp = 0; temp < botloop; temp++){
   b5b7a:	3601      	adds	r6, #1
   b5b7c:	e7de      	b.n	b5b3c <_Z11WaterBotSimh+0x30>
}
   b5b7e:	b011      	add	sp, #68	; 0x44
   b5b80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5b84:	2003dcc8 	.word	0x2003dcc8
   b5b88:	eeeeeeef 	.word	0xeeeeeeef

000b5b8c <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b5b8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5b90:	e9d0 8900 	ldrd	r8, r9, [r0]
   b5b94:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
   b5b96:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5b9a:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
   b5b9e:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   b5ba2:	4607      	mov	r7, r0
   b5ba4:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5ba6:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   b5baa:	d102      	bne.n	b5bb2 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b5bac:	4820      	ldr	r0, [pc, #128]	; (b5c30 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
   b5bae:	f007 feed 	bl	bd98c <_ZSt20__throw_length_errorPKc>
   b5bb2:	2c01      	cmp	r4, #1
   b5bb4:	4622      	mov	r2, r4
   b5bb6:	bf38      	it	cc
   b5bb8:	2201      	movcc	r2, #1
   b5bba:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b5bbc:	eba1 0508 	sub.w	r5, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5bc0:	d231      	bcs.n	b5c26 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5bc2:	b394      	cbz	r4, b5c2a <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
   b5bc4:	429c      	cmp	r4, r3
   b5bc6:	bf28      	it	cs
   b5bc8:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5bca:	00e0      	lsls	r0, r4, #3
   b5bcc:	f7fe fa63 	bl	b4096 <_Znwj>
   b5bd0:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5bd2:	1973      	adds	r3, r6, r5
   b5bd4:	bf1c      	itt	ne
   b5bd6:	e9db 0100 	ldrdne	r0, r1, [fp]
   b5bda:	e9c3 0100 	strdne	r0, r1, [r3]
      if (__count > 0)
   b5bde:	2d00      	cmp	r5, #0
   b5be0:	dd04      	ble.n	b5bec <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x60>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b5be2:	462a      	mov	r2, r5
   b5be4:	4641      	mov	r1, r8
   b5be6:	4630      	mov	r0, r6
   b5be8:	f008 fda5 	bl	be736 <memmove>
      ptrdiff_t __count = __last - __first;
   b5bec:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
   b5bf0:	3508      	adds	r5, #8
      if (__count > 0)
   b5bf2:	f1b9 0f00 	cmp.w	r9, #0
   b5bf6:	4435      	add	r5, r6
   b5bf8:	dd04      	ble.n	b5c04 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b5bfa:	464a      	mov	r2, r9
   b5bfc:	4651      	mov	r1, sl
   b5bfe:	4628      	mov	r0, r5
   b5c00:	f008 fd8b 	bl	be71a <memcpy>
      return __result + __count;
   b5c04:	444d      	add	r5, r9
	if (__p)
   b5c06:	f1b8 0f00 	cmp.w	r8, #0
   b5c0a:	d005      	beq.n	b5c18 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
   b5c0c:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b5c0e:	4640      	mov	r0, r8
   b5c10:	eba1 0108 	sub.w	r1, r1, r8
   b5c14:	f7fe fa43 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5c18:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   b5c1c:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5c20:	60bc      	str	r4, [r7, #8]
    }
   b5c22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5c26:	461c      	mov	r4, r3
   b5c28:	e7cf      	b.n	b5bca <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5c2a:	4626      	mov	r6, r4
   b5c2c:	e7d1      	b.n	b5bd2 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
   b5c2e:	bf00      	nop
   b5c30:	000c0b85 	.word	0x000c0b85

000b5c34 <_Z7BLEScani>:
void BLEScan(int BotNumber){
   b5c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c38:	b0a7      	sub	sp, #156	; 0x9c
   b5c3a:	4606      	mov	r6, r0
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   b5c3c:	f004 fe00 	bl	ba840 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5c40:	497c      	ldr	r1, [pc, #496]	; (b5e34 <_Z7BLEScani+0x200>)
   b5c42:	2214      	movs	r2, #20
   b5c44:	f004 fef4 	bl	baa30 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
	if (count > 0) {
   b5c48:	4680      	mov	r8, r0
   b5c4a:	2800      	cmp	r0, #0
   b5c4c:	f000 80ee 	beq.w	b5e2c <_Z7BLEScani+0x1f8>
    const BleAddress& address() const {
        return address_;
    }

    const BleAdvertisingData& advertisingData() const {
        return advertisingData_;
   b5c50:	f8df b1e0 	ldr.w	fp, [pc, #480]	; b5e34 <_Z7BLEScani+0x200>
		for (uint8_t ii = 0; ii < count; ii++) {
   b5c54:	2400      	movs	r4, #0
			BleUuid foundServiceUuid;
   b5c56:	eb04 09c4 	add.w	r9, r4, r4, lsl #3
   b5c5a:	ea4f 0989 	mov.w	r9, r9, lsl #2
   b5c5e:	f109 0708 	add.w	r7, r9, #8
   b5c62:	a80a      	add	r0, sp, #40	; 0x28
   b5c64:	445f      	add	r7, fp
   b5c66:	f004 fa4f 	bl	ba108 <_ZN8particle7BleUuidC1Ev>
			size_t svcCount = scanResults[ii].advertisingData().serviceUUID(&foundServiceUuid, 1);
   b5c6a:	2201      	movs	r2, #1
   b5c6c:	a90a      	add	r1, sp, #40	; 0x28
   b5c6e:	4638      	mov	r0, r7
   b5c70:	f005 fd5c 	bl	bb72c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
            if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   b5c74:	4682      	mov	sl, r0
   b5c76:	2800      	cmp	r0, #0
   b5c78:	d056      	beq.n	b5d28 <_Z7BLEScani+0xf4>
   b5c7a:	496f      	ldr	r1, [pc, #444]	; (b5e38 <_Z7BLEScani+0x204>)
   b5c7c:	a80a      	add	r0, sp, #40	; 0x28
   b5c7e:	f004 fa9e 	bl	ba1be <_ZNK8particle7BleUuideqERKS0_>
   b5c82:	4605      	mov	r5, r0
   b5c84:	2800      	cmp	r0, #0
   b5c86:	d04f      	beq.n	b5d28 <_Z7BLEScani+0xf4>
                scanResults[ii].advertisingData().customData(BLECustomData,CUSTOM_DATA_LEN);
   b5c88:	2208      	movs	r2, #8
   b5c8a:	a908      	add	r1, sp, #32
   b5c8c:	4638      	mov	r0, r7
   b5c8e:	f004 fbf3 	bl	ba478 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
                if(BotNumber == -2){
   b5c92:	1cb2      	adds	r2, r6, #2
   b5c94:	d153      	bne.n	b5d3e <_Z7BLEScani+0x10a>
                    Serial.printlnf("Found Bot #: %d %d %d %d %d %d %d %d, services: %d",BLECustomData[0],BLECustomData[1],BLECustomData[2],BLECustomData[3],BLECustomData[4],BLECustomData[5],BLECustomData[6],BLECustomData[7], svcCount);
   b5c96:	f007 fcb5 	bl	bd604 <_Z16_fetch_usbserialv>
   b5c9a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   b5c9e:	9305      	str	r3, [sp, #20]
   b5ca0:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   b5ca4:	9304      	str	r3, [sp, #16]
   b5ca6:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   b5caa:	9303      	str	r3, [sp, #12]
   b5cac:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b5cb0:	9302      	str	r3, [sp, #8]
   b5cb2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
      : _M_current(__i) { }
   b5cb6:	4f61      	ldr	r7, [pc, #388]	; (b5e3c <_Z7BLEScani+0x208>)
   b5cb8:	9301      	str	r3, [sp, #4]
   b5cba:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   b5cbe:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b5cc2:	495f      	ldr	r1, [pc, #380]	; (b5e40 <_Z7BLEScani+0x20c>)
   b5cc4:	9300      	str	r3, [sp, #0]
   b5cc6:	f8cd a018 	str.w	sl, [sp, #24]
   b5cca:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   b5cce:	f7fe fb41 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b5cd2:	687b      	ldr	r3, [r7, #4]
                        if(BLECustomData[0] == p.botNum){
   b5cd4:	f89d 1020 	ldrb.w	r1, [sp, #32]
   b5cd8:	683a      	ldr	r2, [r7, #0]
                    for(PairBot p: BLEPair){
   b5cda:	4293      	cmp	r3, r2
   b5cdc:	d005      	beq.n	b5cea <_Z7BLEScani+0xb6>
                        if(BLECustomData[0] == p.botNum){
   b5cde:	f812 0b08 	ldrb.w	r0, [r2], #8
                            newBot = false;
   b5ce2:	4288      	cmp	r0, r1
   b5ce4:	bf08      	it	eq
   b5ce6:	2500      	moveq	r5, #0
	return *this;
   b5ce8:	e7f7      	b.n	b5cda <_Z7BLEScani+0xa6>
                    if(newBot){
   b5cea:	b1ed      	cbz	r5, b5d28 <_Z7BLEScani+0xf4>
    const BleAdvertisingData& scanResponse() const {
        return scanResponse_;
    }

    int8_t rssi() const {
        return rssi_;
   b5cec:	2224      	movs	r2, #36	; 0x24
   b5cee:	fb02 b204 	mla	r2, r2, r4, fp
                        NewBot.botNum = BLECustomData[0];
   b5cf2:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
                        NewBot.rssi = scanResults[ii].rssi();
   b5cf6:	f992 2020 	ldrsb.w	r2, [r2, #32]
   b5cfa:	9218      	str	r2, [sp, #96]	; 0x60
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5cfc:	68ba      	ldr	r2, [r7, #8]
   b5cfe:	4293      	cmp	r3, r2
   b5d00:	d017      	beq.n	b5d32 <_Z7BLEScani+0xfe>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5d02:	b11b      	cbz	r3, b5d0c <_Z7BLEScani+0xd8>
   b5d04:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
   b5d08:	e883 0003 	stmia.w	r3, {r0, r1}
	    ++this->_M_impl._M_finish;
   b5d0c:	687b      	ldr	r3, [r7, #4]
   b5d0e:	3308      	adds	r3, #8
   b5d10:	607b      	str	r3, [r7, #4]
                        Serial.printlnf("Found new bot: %d", BLECustomData[0],BLEPair.size());
   b5d12:	f007 fc77 	bl	bd604 <_Z16_fetch_usbserialv>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5d16:	e9d7 2300 	ldrd	r2, r3, [r7]
   b5d1a:	1a9b      	subs	r3, r3, r2
   b5d1c:	4949      	ldr	r1, [pc, #292]	; (b5e44 <_Z7BLEScani+0x210>)
   b5d1e:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b5d22:	10db      	asrs	r3, r3, #3
   b5d24:	f7fe fb16 	bl	b4354 <_ZN5Print8printlnfEPKcz>
		for (uint8_t ii = 0; ii < count; ii++) {
   b5d28:	3401      	adds	r4, #1
   b5d2a:	b2e4      	uxtb	r4, r4
   b5d2c:	4544      	cmp	r4, r8
   b5d2e:	d392      	bcc.n	b5c56 <_Z7BLEScani+0x22>
   b5d30:	e07c      	b.n	b5e2c <_Z7BLEScani+0x1f8>
	  _M_realloc_insert(end(), __x);
   b5d32:	4842      	ldr	r0, [pc, #264]	; (b5e3c <_Z7BLEScani+0x208>)
   b5d34:	aa17      	add	r2, sp, #92	; 0x5c
   b5d36:	4619      	mov	r1, r3
   b5d38:	f7ff ff28 	bl	b5b8c <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   b5d3c:	e7e9      	b.n	b5d12 <_Z7BLEScani+0xde>
                if(BotNumber == -1 || BotNumber == BLECustomData[0]){   //Check if a particular bot number was specified
   b5d3e:	1c73      	adds	r3, r6, #1
   b5d40:	d003      	beq.n	b5d4a <_Z7BLEScani+0x116>
   b5d42:	f89d 3020 	ldrb.w	r3, [sp, #32]
   b5d46:	42b3      	cmp	r3, r6
   b5d48:	d1ee      	bne.n	b5d28 <_Z7BLEScani+0xf4>
                    peer = BLE.connect(scanResults[ii].address());
   b5d4a:	f004 fd79 	bl	ba840 <_ZN8particle14BleLocalDevice11getInstanceEv>
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5d4e:	4d3e      	ldr	r5, [pc, #248]	; (b5e48 <_Z7BLEScani+0x214>)
   b5d50:	4601      	mov	r1, r0
   b5d52:	2301      	movs	r3, #1
   b5d54:	eb0b 0209 	add.w	r2, fp, r9
   b5d58:	a817      	add	r0, sp, #92	; 0x5c
   b5d5a:	f006 f91f 	bl	bbf9c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   b5d5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b5d60:	9c18      	ldr	r4, [sp, #96]	; 0x60
   b5d62:	602b      	str	r3, [r5, #0]
	if (__tmp != _M_pi)
   b5d64:	686b      	ldr	r3, [r5, #4]
   b5d66:	429c      	cmp	r4, r3
   b5d68:	d008      	beq.n	b5d7c <_Z7BLEScani+0x148>
	    if (__tmp != 0)
   b5d6a:	b114      	cbz	r4, b5d72 <_Z7BLEScani+0x13e>
    { ++_M_use_count; }
   b5d6c:	6863      	ldr	r3, [r4, #4]
   b5d6e:	3301      	adds	r3, #1
   b5d70:	6063      	str	r3, [r4, #4]
	    if (_M_pi != 0)
   b5d72:	6868      	ldr	r0, [r5, #4]
   b5d74:	b108      	cbz	r0, b5d7a <_Z7BLEScani+0x146>
	      _M_pi->_M_release();
   b5d76:	f7fe fc3d 	bl	b45f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b5d7a:	606c      	str	r4, [r5, #4]
   b5d7c:	a817      	add	r0, sp, #92	; 0x5c
   b5d7e:	f004 fece 	bl	bab1e <_ZN8particle13BlePeerDeviceD1Ev>
				    if (peer.connected()) {
   b5d82:	4831      	ldr	r0, [pc, #196]	; (b5e48 <_Z7BLEScani+0x214>)
   b5d84:	f004 fcce 	bl	ba724 <_ZNK8particle13BlePeerDevice9connectedEv>
   b5d88:	4604      	mov	r4, r0
   b5d8a:	2800      	cmp	r0, #0
   b5d8c:	d04e      	beq.n	b5e2c <_Z7BLEScani+0x1f8>
                        meshPair = false;
   b5d8e:	4b2f      	ldr	r3, [pc, #188]	; (b5e4c <_Z7BLEScani+0x218>)
      : _M_current(__i) { }
   b5d90:	4d2f      	ldr	r5, [pc, #188]	; (b5e50 <_Z7BLEScani+0x21c>)
   b5d92:	2200      	movs	r2, #0
   b5d94:	701a      	strb	r2, [r3, #0]
                        startConnect = true;
   b5d96:	4b2f      	ldr	r3, [pc, #188]	; (b5e54 <_Z7BLEScani+0x220>)
   b5d98:	2601      	movs	r6, #1
                        scanResults[ii].advertisingData().customData(bufName, BLE_MAX_ADV_DATA_LEN);
   b5d9a:	221f      	movs	r2, #31
   b5d9c:	a90f      	add	r1, sp, #60	; 0x3c
   b5d9e:	4638      	mov	r0, r7
                        startConnect = true;
   b5da0:	701e      	strb	r6, [r3, #0]
                        scanResults[ii].advertisingData().customData(bufName, BLE_MAX_ADV_DATA_LEN);
   b5da2:	f004 fb69 	bl	ba478 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
					    peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   b5da6:	4a2c      	ldr	r2, [pc, #176]	; (b5e58 <_Z7BLEScani+0x224>)
   b5da8:	492c      	ldr	r1, [pc, #176]	; (b5e5c <_Z7BLEScani+0x228>)
   b5daa:	4827      	ldr	r0, [pc, #156]	; (b5e48 <_Z7BLEScani+0x214>)
   b5dac:	f005 fd8a 	bl	bb8c4 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
					    peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
   b5db0:	4a2b      	ldr	r2, [pc, #172]	; (b5e60 <_Z7BLEScani+0x22c>)
   b5db2:	492c      	ldr	r1, [pc, #176]	; (b5e64 <_Z7BLEScani+0x230>)
   b5db4:	4824      	ldr	r0, [pc, #144]	; (b5e48 <_Z7BLEScani+0x214>)
   b5db6:	f005 fd85 	bl	bb8c4 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        peer.getCharacteristicByUUID(peerOffloadCharacteristic, offldUuid);
   b5dba:	4a2b      	ldr	r2, [pc, #172]	; (b5e68 <_Z7BLEScani+0x234>)
   b5dbc:	492b      	ldr	r1, [pc, #172]	; (b5e6c <_Z7BLEScani+0x238>)
   b5dbe:	4822      	ldr	r0, [pc, #136]	; (b5e48 <_Z7BLEScani+0x214>)
   b5dc0:	f005 fd80 	bl	bb8c4 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
						Serial.printlnf("Connected to Bot %d",bufName[0]);
   b5dc4:	f007 fc1e 	bl	bd604 <_Z16_fetch_usbserialv>
   b5dc8:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
   b5dcc:	4928      	ldr	r1, [pc, #160]	; (b5e70 <_Z7BLEScani+0x23c>)
   b5dce:	f7fe fac1 	bl	b4354 <_ZN5Print8printlnfEPKcz>
                        WaterBot newWaterbot;
   b5dd2:	a817      	add	r0, sp, #92	; 0x5c
   b5dd4:	f7fe fd42 	bl	b485c <_ZN8WaterBotC1Ev>
                        newWaterbot.botNum = bufName[0];
   b5dd8:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
                        PairBots.push_back(newWaterbot);
   b5ddc:	4825      	ldr	r0, [pc, #148]	; (b5e74 <_Z7BLEScani+0x240>)
                        newWaterbot.botNum = bufName[0];
   b5dde:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
                        PairBots.push_back(newWaterbot);
   b5de2:	a917      	add	r1, sp, #92	; 0x5c
                        newWaterbot.BLEAvail = true;
   b5de4:	f88d 6060 	strb.w	r6, [sp, #96]	; 0x60
                        PairBots.push_back(newWaterbot);
   b5de8:	f7ff fb0a 	bl	b5400 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
   b5dec:	6869      	ldr	r1, [r5, #4]
                            if(bufName[0] == w.botNum){
   b5dee:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
   b5df2:	682b      	ldr	r3, [r5, #0]
                                BLEBot = &w;
   b5df4:	4820      	ldr	r0, [pc, #128]	; (b5e78 <_Z7BLEScani+0x244>)
                        for(WaterBot &w: WaterBots){
   b5df6:	428b      	cmp	r3, r1
   b5df8:	d007      	beq.n	b5e0a <_Z7BLEScani+0x1d6>
                            if(bufName[0] == w.botNum){
   b5dfa:	789f      	ldrb	r7, [r3, #2]
   b5dfc:	4297      	cmp	r7, r2
                                w.BLEAvail = true;
   b5dfe:	bf02      	ittt	eq
   b5e00:	711e      	strbeq	r6, [r3, #4]
                                newBot = false;
   b5e02:	2400      	moveq	r4, #0
                                BLEBot = &w;
   b5e04:	6003      	streq	r3, [r0, #0]
   b5e06:	333c      	adds	r3, #60	; 0x3c
	return *this;
   b5e08:	e7f5      	b.n	b5df6 <_Z7BLEScani+0x1c2>
                        if(newBot){
   b5e0a:	b17c      	cbz	r4, b5e2c <_Z7BLEScani+0x1f8>
                            Serial.println("Found a new water bot ID");
   b5e0c:	f007 fbfa 	bl	bd604 <_Z16_fetch_usbserialv>
   b5e10:	491a      	ldr	r1, [pc, #104]	; (b5e7c <_Z7BLEScani+0x248>)
   b5e12:	f007 f802 	bl	bce1a <_ZN5Print7printlnEPKc>
                            WaterBots.push_back(newWaterbot);
   b5e16:	480e      	ldr	r0, [pc, #56]	; (b5e50 <_Z7BLEScani+0x21c>)
   b5e18:	a917      	add	r1, sp, #92	; 0x5c
   b5e1a:	f7ff faf1 	bl	b5400 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      { return __normal_iterator(_M_current - __n); }
   b5e1e:	686b      	ldr	r3, [r5, #4]
                            BLEBot = &WaterBots.back();
   b5e20:	4a15      	ldr	r2, [pc, #84]	; (b5e78 <_Z7BLEScani+0x244>)
   b5e22:	3b3c      	subs	r3, #60	; 0x3c
   b5e24:	6013      	str	r3, [r2, #0]
                            redrawMenu = true;
   b5e26:	4b16      	ldr	r3, [pc, #88]	; (b5e80 <_Z7BLEScani+0x24c>)
   b5e28:	2201      	movs	r2, #1
   b5e2a:	701a      	strb	r2, [r3, #0]
}
   b5e2c:	b027      	add	sp, #156	; 0x9c
   b5e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5e32:	bf00      	nop
   b5e34:	2003dee4 	.word	0x2003dee4
   b5e38:	2003dcd4 	.word	0x2003dcd4
   b5e3c:	2003dc80 	.word	0x2003dc80
   b5e40:	000c0cc0 	.word	0x000c0cc0
   b5e44:	000c0cf3 	.word	0x000c0cf3
   b5e48:	2003dec0 	.word	0x2003dec0
   b5e4c:	2003de12 	.word	0x2003de12
   b5e50:	2003dcc8 	.word	0x2003dcc8
   b5e54:	2003e638 	.word	0x2003e638
   b5e58:	2003dcfc 	.word	0x2003dcfc
   b5e5c:	2003ded8 	.word	0x2003ded8
   b5e60:	2003dce8 	.word	0x2003dce8
   b5e64:	2003ded0 	.word	0x2003ded0
   b5e68:	2003dd14 	.word	0x2003dd14
   b5e6c:	2003dec8 	.word	0x2003dec8
   b5e70:	000c0d05 	.word	0x000c0d05
   b5e74:	2003dca0 	.word	0x2003dca0
   b5e78:	2003dc7c 	.word	0x2003dc7c
   b5e7c:	000c0bfc 	.word	0x000c0bfc
   b5e80:	2003da90 	.word	0x2003da90

000b5e84 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b5e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5e88:	e9d0 9a00 	ldrd	r9, sl, [r0]
   b5e8c:	468b      	mov	fp, r1
	if (max_size() - size() < __n)
   b5e8e:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   b5e92:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5e94:	ebaa 0209 	sub.w	r2, sl, r9
	if (max_size() - size() < __n)
   b5e98:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   b5e9c:	4680      	mov	r8, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5e9e:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   b5ea2:	d102      	bne.n	b5eaa <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b5ea4:	4826      	ldr	r0, [pc, #152]	; (b5f40 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>)
   b5ea6:	f007 fd71 	bl	bd98c <_ZSt20__throw_length_errorPKc>
   b5eaa:	2c01      	cmp	r4, #1
   b5eac:	4622      	mov	r2, r4
   b5eae:	bf38      	it	cc
   b5eb0:	2201      	movcc	r2, #1
   b5eb2:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b5eb4:	ebab 0609 	sub.w	r6, fp, r9
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5eb8:	d21a      	bcs.n	b5ef0 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5eba:	b1dc      	cbz	r4, b5ef4 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x70>
   b5ebc:	429c      	cmp	r4, r3
   b5ebe:	bf28      	it	cs
   b5ec0:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5ec2:	0120      	lsls	r0, r4, #4
   b5ec4:	9101      	str	r1, [sp, #4]
   b5ec6:	f7fe f8e6 	bl	b4096 <_Znwj>
   b5eca:	9901      	ldr	r1, [sp, #4]
   b5ecc:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5ece:	19a8      	adds	r0, r5, r6
   b5ed0:	d001      	beq.n	b5ed6 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x52>
   b5ed2:	f007 f97b 	bl	bd1cc <_ZN6StringC1EOS_>
   b5ed6:	4628      	mov	r0, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5ed8:	464e      	mov	r6, r9
	      for (; __first != __last; ++__first, (void)++__cur)
   b5eda:	45b3      	cmp	fp, r6
   b5edc:	f100 0710 	add.w	r7, r0, #16
   b5ee0:	d00a      	beq.n	b5ef8 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5ee2:	b110      	cbz	r0, b5eea <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x66>
   b5ee4:	4631      	mov	r1, r6
   b5ee6:	f007 f98b 	bl	bd200 <_ZN6StringC1ERKS_>
   b5eea:	3610      	adds	r6, #16
   b5eec:	4638      	mov	r0, r7
   b5eee:	e7f4      	b.n	b5eda <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x56>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5ef0:	461c      	mov	r4, r3
   b5ef2:	e7e6      	b.n	b5ec2 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5ef4:	4625      	mov	r5, r4
   b5ef6:	e7ea      	b.n	b5ece <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   b5ef8:	4556      	cmp	r6, sl
   b5efa:	d006      	beq.n	b5f0a <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
   b5efc:	4631      	mov	r1, r6
   b5efe:	4638      	mov	r0, r7
   b5f00:	f007 f97e 	bl	bd200 <_ZN6StringC1ERKS_>
   b5f04:	3610      	adds	r6, #16
   b5f06:	3710      	adds	r7, #16
   b5f08:	e7f6      	b.n	b5ef8 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5f0a:	464e      	mov	r6, r9
	  for (; __first != __last; ++__first)
   b5f0c:	4556      	cmp	r6, sl
   b5f0e:	d004      	beq.n	b5f1a <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x96>
      __pointer->~_Tp();
   b5f10:	4630      	mov	r0, r6
   b5f12:	f007 f8df 	bl	bd0d4 <_ZN6StringD1Ev>
	  for (; __first != __last; ++__first)
   b5f16:	3610      	adds	r6, #16
   b5f18:	e7f8      	b.n	b5f0c <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x88>
	if (__p)
   b5f1a:	f1b9 0f00 	cmp.w	r9, #0
   b5f1e:	d006      	beq.n	b5f2e <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
		    this->_M_impl._M_end_of_storage - __old_start);
   b5f20:	f8d8 1008 	ldr.w	r1, [r8, #8]
	::operator delete(__p
   b5f24:	4648      	mov	r0, r9
   b5f26:	eba1 0109 	sub.w	r1, r1, r9
   b5f2a:	f7fe f8b8 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5f2e:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   b5f32:	e9c8 5700 	strd	r5, r7, [r8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5f36:	f8c8 4008 	str.w	r4, [r8, #8]
    }
   b5f3a:	b003      	add	sp, #12
   b5f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5f40:	000c0b85 	.word	0x000c0b85

000b5f44 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0>:
      vector<_Tp, _Alloc>::
   b5f44:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5f46:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   b5f4a:	42ab      	cmp	r3, r5
      vector<_Tp, _Alloc>::
   b5f4c:	4604      	mov	r4, r0
   b5f4e:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b5f50:	d007      	beq.n	b5f62 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5f52:	b113      	cbz	r3, b5f5a <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0+0x16>
   b5f54:	4618      	mov	r0, r3
   b5f56:	f007 f939 	bl	bd1cc <_ZN6StringC1EOS_>
	    ++this->_M_impl._M_finish;
   b5f5a:	6863      	ldr	r3, [r4, #4]
   b5f5c:	3310      	adds	r3, #16
   b5f5e:	6063      	str	r3, [r4, #4]
      }
   b5f60:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   b5f62:	4619      	mov	r1, r3
   b5f64:	f7ff ff8e 	bl	b5e84 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
	return back();
   b5f68:	e7fa      	b.n	b5f60 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0+0x1c>
	...

000b5f6c <_ZN8MenuItemC1ERKS_>:
class MenuItem{
   b5f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5f70:	e9d1 2700 	ldrd	r2, r7, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5f74:	2300      	movs	r3, #0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5f76:	1abf      	subs	r7, r7, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5f78:	e9c0 3300 	strd	r3, r3, [r0]
   b5f7c:	4604      	mov	r4, r0
   b5f7e:	460d      	mov	r5, r1
   b5f80:	6083      	str	r3, [r0, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5f82:	d018      	beq.n	b5fb6 <_ZN8MenuItemC1ERKS_+0x4a>
	if (__n > this->_M_max_size())
   b5f84:	4b18      	ldr	r3, [pc, #96]	; (b5fe8 <_ZN8MenuItemC1ERKS_+0x7c>)
   b5f86:	429f      	cmp	r7, r3
   b5f88:	d901      	bls.n	b5f8e <_ZN8MenuItemC1ERKS_+0x22>
	  std::__throw_bad_alloc();
   b5f8a:	f007 fcf9 	bl	bd980 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5f8e:	4638      	mov	r0, r7
   b5f90:	f7fe f881 	bl	b4096 <_Znwj>
   b5f94:	4606      	mov	r6, r0
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5f96:	e9c4 6600 	strd	r6, r6, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5f9a:	4437      	add	r7, r6
   b5f9c:	60a7      	str	r7, [r4, #8]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b5f9e:	e9d5 7800 	ldrd	r7, r8, [r5]
   b5fa2:	45b8      	cmp	r8, r7
   b5fa4:	d009      	beq.n	b5fba <_ZN8MenuItemC1ERKS_+0x4e>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5fa6:	b11e      	cbz	r6, b5fb0 <_ZN8MenuItemC1ERKS_+0x44>
   b5fa8:	4639      	mov	r1, r7
   b5faa:	4630      	mov	r0, r6
   b5fac:	f007 f928 	bl	bd200 <_ZN6StringC1ERKS_>
   b5fb0:	3610      	adds	r6, #16
   b5fb2:	3710      	adds	r7, #16
   b5fb4:	e7f5      	b.n	b5fa2 <_ZN8MenuItemC1ERKS_+0x36>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5fb6:	463e      	mov	r6, r7
   b5fb8:	e7ed      	b.n	b5f96 <_ZN8MenuItemC1ERKS_+0x2a>
	this->_M_impl._M_finish =
   b5fba:	6066      	str	r6, [r4, #4]
   b5fbc:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   b5fc0:	e9c4 2303 	strd	r2, r3, [r4, #12]
   b5fc4:	696b      	ldr	r3, [r5, #20]
   b5fc6:	6163      	str	r3, [r4, #20]
   b5fc8:	8b2b      	ldrh	r3, [r5, #24]
   b5fca:	8323      	strh	r3, [r4, #24]
   b5fcc:	f8d5 301a 	ldr.w	r3, [r5, #26]
   b5fd0:	f8c4 301a 	str.w	r3, [r4, #26]
   b5fd4:	f8d5 301e 	ldr.w	r3, [r5, #30]
   b5fd8:	f8c4 301e 	str.w	r3, [r4, #30]
   b5fdc:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   b5fde:	8463      	strh	r3, [r4, #34]	; 0x22
   b5fe0:	4620      	mov	r0, r4
   b5fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5fe6:	bf00      	nop
   b5fe8:	7ffffff0 	.word	0x7ffffff0

000b5fec <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b5fec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5ff0:	e9d0 8700 	ldrd	r8, r7, [r0]
   b5ff4:	4b23      	ldr	r3, [pc, #140]	; (b6084 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>)
   b5ff6:	eba7 0408 	sub.w	r4, r7, r8
   b5ffa:	10a4      	asrs	r4, r4, #2
   b5ffc:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
   b5ffe:	4b22      	ldr	r3, [pc, #136]	; (b6088 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>)
   b6000:	429c      	cmp	r4, r3
   b6002:	460e      	mov	r6, r1
   b6004:	4605      	mov	r5, r0
   b6006:	4611      	mov	r1, r2
   b6008:	d102      	bne.n	b6010 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
   b600a:	4820      	ldr	r0, [pc, #128]	; (b608c <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa0>)
   b600c:	f007 fcbe 	bl	bd98c <_ZSt20__throw_length_errorPKc>
   b6010:	2c01      	cmp	r4, #1
   b6012:	4622      	mov	r2, r4
   b6014:	bf38      	it	cc
   b6016:	2201      	movcc	r2, #1
   b6018:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b601a:	eba6 0a08 	sub.w	sl, r6, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b601e:	d22d      	bcs.n	b607c <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6020:	b374      	cbz	r4, b6080 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
   b6022:	429c      	cmp	r4, r3
   b6024:	bf28      	it	cs
   b6026:	461c      	movcs	r4, r3
   b6028:	2024      	movs	r0, #36	; 0x24
   b602a:	4360      	muls	r0, r4
   b602c:	9101      	str	r1, [sp, #4]
   b602e:	f7fe f832 	bl	b4096 <_Znwj>
   b6032:	9901      	ldr	r1, [sp, #4]
   b6034:	4681      	mov	r9, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b6036:	eb19 000a 	adds.w	r0, r9, sl
   b603a:	d001      	beq.n	b6040 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x54>
   b603c:	f7ff ff96 	bl	b5f6c <_ZN8MenuItemC1ERKS_>
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
   b6040:	4631      	mov	r1, r6
   b6042:	464a      	mov	r2, r9
   b6044:	4640      	mov	r0, r8
   b6046:	f7ff f890 	bl	b516a <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
   b604a:	4639      	mov	r1, r7
   b604c:	f100 0224 	add.w	r2, r0, #36	; 0x24
   b6050:	4630      	mov	r0, r6
   b6052:	f7ff f88a 	bl	b516a <_ZSt14__relocate_a_1IP8MenuItemS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
   b6056:	4606      	mov	r6, r0
	if (__p)
   b6058:	f1b8 0f00 	cmp.w	r8, #0
   b605c:	d005      	beq.n	b606a <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7e>
		    this->_M_impl._M_end_of_storage - __old_start);
   b605e:	68a9      	ldr	r1, [r5, #8]
	::operator delete(__p
   b6060:	4640      	mov	r0, r8
   b6062:	eba1 0108 	sub.w	r1, r1, r8
   b6066:	f7fe f81a 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b606a:	2024      	movs	r0, #36	; 0x24
   b606c:	fb00 9404 	mla	r4, r0, r4, r9
      this->_M_impl._M_finish = __new_finish;
   b6070:	e9c5 9600 	strd	r9, r6, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b6074:	60ac      	str	r4, [r5, #8]
    }
   b6076:	b002      	add	sp, #8
   b6078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b607c:	461c      	mov	r4, r3
   b607e:	e7d3      	b.n	b6028 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6080:	46a1      	mov	r9, r4
   b6082:	e7d8      	b.n	b6036 <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   b6084:	38e38e39 	.word	0x38e38e39
   b6088:	038e38e3 	.word	0x038e38e3
   b608c:	000c0b85 	.word	0x000c0b85

000b6090 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b6090:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b6092:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   b6096:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   b6098:	4604      	mov	r4, r0
   b609a:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b609c:	d007      	beq.n	b60ae <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b609e:	b113      	cbz	r3, b60a6 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x16>
   b60a0:	4618      	mov	r0, r3
   b60a2:	f7ff ff63 	bl	b5f6c <_ZN8MenuItemC1ERKS_>
	    ++this->_M_impl._M_finish;
   b60a6:	6863      	ldr	r3, [r4, #4]
   b60a8:	3324      	adds	r3, #36	; 0x24
   b60aa:	6063      	str	r3, [r4, #4]
      }
   b60ac:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   b60ae:	4619      	mov	r1, r3
   b60b0:	f7ff ff9c 	bl	b5fec <_ZNSt6vectorI8MenuItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b60b4:	e7fa      	b.n	b60ac <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_+0x1c>
	...

000b60b8 <_Z10createMenuv>:
void createMenu(){
   b60b8:	b570      	push	{r4, r5, r6, lr}
   b60ba:	b0ae      	sub	sp, #184	; 0xb8
	: _M_start(), _M_finish(), _M_end_of_storage()
   b60bc:	2400      	movs	r4, #0
            strcpy(itemName,itemString);
   b60be:	494c      	ldr	r1, [pc, #304]	; (b61f0 <_Z10createMenuv+0x138>)
   b60c0:	9403      	str	r4, [sp, #12]
   b60c2:	f10d 001e 	add.w	r0, sp, #30
            stepSize = inStep;
   b60c6:	f240 1601 	movw	r6, #257	; 0x101
            minVal = minV;
   b60ca:	f44f 7580 	mov.w	r5, #256	; 0x100
   b60ce:	e9cd 4401 	strd	r4, r4, [sp, #4]
            strcpy(itemName,itemString);
   b60d2:	f008 fbd8 	bl	be886 <strcpy>
            stepSize = inStep;
   b60d6:	230b      	movs	r3, #11
            strcpy(itemName,itemString);
   b60d8:	4946      	ldr	r1, [pc, #280]	; (b61f4 <_Z10createMenuv+0x13c>)
            minVal = minV;
   b60da:	f8ad 501c 	strh.w	r5, [sp, #28]
            strcpy(itemName,itemString);
   b60de:	f10d 0042 	add.w	r0, sp, #66	; 0x42
            stepSize = inStep;
   b60e2:	e9cd 3605 	strd	r3, r6, [sp, #20]
   b60e6:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   b60ea:	940c      	str	r4, [sp, #48]	; 0x30
            strcpy(itemName,itemString);
   b60ec:	f008 fbcb 	bl	be886 <strcpy>
            stepSize = inStep;
   b60f0:	4b41      	ldr	r3, [pc, #260]	; (b61f8 <_Z10createMenuv+0x140>)
   b60f2:	930f      	str	r3, [sp, #60]	; 0x3c
            minVal = minV;
   b60f4:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
   b60f8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            strcpy(itemName,itemString);
   b60fc:	493f      	ldr	r1, [pc, #252]	; (b61fc <_Z10createMenuv+0x144>)
   b60fe:	9415      	str	r4, [sp, #84]	; 0x54
    battStat.MethodPointer = &WaterBot::battPercent;
   b6100:	2303      	movs	r3, #3
            strcpy(itemName,itemString);
   b6102:	f10d 0066 	add.w	r0, sp, #102	; 0x66
    battStat.MethodPointer = &WaterBot::battPercent;
   b6106:	930d      	str	r3, [sp, #52]	; 0x34
   b6108:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
            strcpy(itemName,itemString);
   b610c:	f008 fbbb 	bl	be886 <strcpy>
    offloadItem.MethodPointerBool = &WaterBot::offloading;
   b6110:	230c      	movs	r3, #12
            strcpy(itemName,itemString);
   b6112:	493b      	ldr	r1, [pc, #236]	; (b6200 <_Z10createMenuv+0x148>)
            minVal = minV;
   b6114:	f8ad 5064 	strh.w	r5, [sp, #100]	; 0x64
            strcpy(itemName,itemString);
   b6118:	f10d 008a 	add.w	r0, sp, #138	; 0x8a
            stepSize = inStep;
   b611c:	e9cd 3617 	strd	r3, r6, [sp, #92]	; 0x5c
   b6120:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
   b6124:	941e      	str	r4, [sp, #120]	; 0x78
            strcpy(itemName,itemString);
   b6126:	f008 fbae 	bl	be886 <strcpy>
            stepSize = inStep;
   b612a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b612e:	9321      	str	r3, [sp, #132]	; 0x84
    sentryToggle.labels.push_back("Rem");
   b6130:	4934      	ldr	r1, [pc, #208]	; (b6204 <_Z10createMenuv+0x14c>)
            minVal = minV;
   b6132:	f44f 7300 	mov.w	r3, #512	; 0x200
    sentryToggle.labels.push_back("Rem");
   b6136:	a825      	add	r0, sp, #148	; 0x94
            minVal = minV;
   b6138:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    sentryToggle.labels.push_back("Rem");
   b613c:	f007 f815 	bl	bd16a <_ZN6StringC1EPK19__FlashStringHelper>
      { emplace_back(std::move(__x)); }
   b6140:	a925      	add	r1, sp, #148	; 0x94
   b6142:	a81c      	add	r0, sp, #112	; 0x70
   b6144:	f7ff fefe 	bl	b5f44 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0>
   b6148:	a825      	add	r0, sp, #148	; 0x94
   b614a:	f006 ffc3 	bl	bd0d4 <_ZN6StringD1Ev>
    sentryToggle.labels.push_back("Sen");
   b614e:	492e      	ldr	r1, [pc, #184]	; (b6208 <_Z10createMenuv+0x150>)
   b6150:	a825      	add	r0, sp, #148	; 0x94
   b6152:	f007 f80a 	bl	bd16a <_ZN6StringC1EPK19__FlashStringHelper>
   b6156:	a925      	add	r1, sp, #148	; 0x94
   b6158:	a81c      	add	r0, sp, #112	; 0x70
   b615a:	f7ff fef3 	bl	b5f44 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0>
   b615e:	a825      	add	r0, sp, #148	; 0x94
   b6160:	f006 ffb8 	bl	bd0d4 <_ZN6StringD1Ev>
    sentryToggle.labels.push_back("Aut");
   b6164:	4929      	ldr	r1, [pc, #164]	; (b620c <_Z10createMenuv+0x154>)
   b6166:	a825      	add	r0, sp, #148	; 0x94
   b6168:	f006 ffff 	bl	bd16a <_ZN6StringC1EPK19__FlashStringHelper>
   b616c:	a925      	add	r1, sp, #148	; 0x94
   b616e:	a81c      	add	r0, sp, #112	; 0x70
   b6170:	f7ff fee8 	bl	b5f44 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_.isra.0>
   b6174:	a825      	add	r0, sp, #148	; 0x94
   b6176:	f006 ffad 	bl	bd0d4 <_ZN6StringD1Ev>
    sentryToggle.MethodPointer = &WaterBot::driveMode;
   b617a:	2307      	movs	r3, #7
            strcpy(itemName,itemString);
   b617c:	4924      	ldr	r1, [pc, #144]	; (b6210 <_Z10createMenuv+0x158>)
    sentryToggle.MethodPointer = &WaterBot::driveMode;
   b617e:	931f      	str	r3, [sp, #124]	; 0x7c
            strcpy(itemName,itemString);
   b6180:	f10d 00ae 	add.w	r0, sp, #174	; 0xae
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6184:	e9cd 4425 	strd	r4, r4, [sp, #148]	; 0x94
   b6188:	9427      	str	r4, [sp, #156]	; 0x9c
   b618a:	f008 fb7c 	bl	be886 <strcpy>
    signalToggle.MethodPointerBool = &WaterBot::signal;
   b618e:	2308      	movs	r3, #8
    MenuItems.push_back(dataRecord);
   b6190:	a901      	add	r1, sp, #4
   b6192:	4820      	ldr	r0, [pc, #128]	; (b6214 <_Z10createMenuv+0x15c>)
            minVal = minV;
   b6194:	f8ad 50ac 	strh.w	r5, [sp, #172]	; 0xac
            stepSize = inStep;
   b6198:	e9cd 3629 	strd	r3, r6, [sp, #164]	; 0xa4
    MenuItems.push_back(dataRecord);
   b619c:	f7ff ff78 	bl	b6090 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(battStat);
   b61a0:	a90a      	add	r1, sp, #40	; 0x28
   b61a2:	481c      	ldr	r0, [pc, #112]	; (b6214 <_Z10createMenuv+0x15c>)
   b61a4:	f7ff ff74 	bl	b6090 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(sentryToggle);
   b61a8:	a91c      	add	r1, sp, #112	; 0x70
   b61aa:	481a      	ldr	r0, [pc, #104]	; (b6214 <_Z10createMenuv+0x15c>)
   b61ac:	f7ff ff70 	bl	b6090 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(offloadItem);
   b61b0:	a913      	add	r1, sp, #76	; 0x4c
   b61b2:	4818      	ldr	r0, [pc, #96]	; (b6214 <_Z10createMenuv+0x15c>)
   b61b4:	f7ff ff6c 	bl	b6090 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    MenuItems.push_back(signalToggle);
   b61b8:	a925      	add	r1, sp, #148	; 0x94
   b61ba:	4816      	ldr	r0, [pc, #88]	; (b6214 <_Z10createMenuv+0x15c>)
   b61bc:	f7ff ff68 	bl	b6090 <_ZNSt6vectorI8MenuItemSaIS0_EE9push_backERKS0_>
    SelectedItem = &MenuItems.at(menuItem);
   b61c0:	4b15      	ldr	r3, [pc, #84]	; (b6218 <_Z10createMenuv+0x160>)
   b61c2:	4814      	ldr	r0, [pc, #80]	; (b6214 <_Z10createMenuv+0x15c>)
   b61c4:	7819      	ldrb	r1, [r3, #0]
   b61c6:	f7fe fe7f 	bl	b4ec8 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b61ca:	4b14      	ldr	r3, [pc, #80]	; (b621c <_Z10createMenuv+0x164>)
   b61cc:	6018      	str	r0, [r3, #0]
class MenuItem{
   b61ce:	a825      	add	r0, sp, #148	; 0x94
   b61d0:	f7fe ffb8 	bl	b5144 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b61d4:	a81c      	add	r0, sp, #112	; 0x70
   b61d6:	f7fe ffb5 	bl	b5144 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b61da:	a813      	add	r0, sp, #76	; 0x4c
   b61dc:	f7fe ffb2 	bl	b5144 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b61e0:	a80a      	add	r0, sp, #40	; 0x28
   b61e2:	f7fe ffaf 	bl	b5144 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   b61e6:	a801      	add	r0, sp, #4
   b61e8:	f7fe ffac 	bl	b5144 <_ZNSt6vectorI6StringSaIS0_EED1Ev>
}
   b61ec:	b02e      	add	sp, #184	; 0xb8
   b61ee:	bd70      	pop	{r4, r5, r6, pc}
   b61f0:	000c0d19 	.word	0x000c0d19
   b61f4:	000c0d20 	.word	0x000c0d20
   b61f8:	01000001 	.word	0x01000001
   b61fc:	000c0d28 	.word	0x000c0d28
   b6200:	000c0d30 	.word	0x000c0d30
   b6204:	000c0d37 	.word	0x000c0d37
   b6208:	000c0d3b 	.word	0x000c0d3b
   b620c:	000c0d3f 	.word	0x000c0d3f
   b6210:	000c0d43 	.word	0x000c0d43
   b6214:	2003dc94 	.word	0x2003dc94
   b6218:	2003de11 	.word	0x2003de11
   b621c:	2003dcb8 	.word	0x2003dcb8

000b6220 <_GLOBAL__sub_I_SystemMode>:
   b6220:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b6222:	4b5d      	ldr	r3, [pc, #372]	; (b6398 <_GLOBAL__sub_I_SystemMode+0x178>)
   b6224:	4c5d      	ldr	r4, [pc, #372]	; (b639c <_GLOBAL__sub_I_SystemMode+0x17c>)
   b6226:	2201      	movs	r2, #1
   b6228:	701a      	strb	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b622a:	4b5d      	ldr	r3, [pc, #372]	; (b63a0 <_GLOBAL__sub_I_SystemMode+0x180>)
   b622c:	2200      	movs	r2, #0
   b622e:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b6232:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b6236:	b088      	sub	sp, #32
   b6238:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b623a:	2003      	movs	r0, #3
   b623c:	f003 fcb2 	bl	b9ba4 <set_system_mode>
const BleUuid serviceUuid("b4206910-dc4b-5743-c8b1-92d0e75182b0");
   b6240:	4958      	ldr	r1, [pc, #352]	; (b63a4 <_GLOBAL__sub_I_SystemMode+0x184>)
   b6242:	4859      	ldr	r0, [pc, #356]	; (b63a8 <_GLOBAL__sub_I_SystemMode+0x188>)
   b6244:	f004 f83a 	bl	ba2bc <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("b4206912-dc4b-5743-c8b1-92d0e75182b0");
   b6248:	4958      	ldr	r1, [pc, #352]	; (b63ac <_GLOBAL__sub_I_SystemMode+0x18c>)
   b624a:	4859      	ldr	r0, [pc, #356]	; (b63b0 <_GLOBAL__sub_I_SystemMode+0x190>)
   b624c:	f004 f836 	bl	ba2bc <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("b4206913-dc4b-5743-c8b1-92d0e75182b0");
   b6250:	4958      	ldr	r1, [pc, #352]	; (b63b4 <_GLOBAL__sub_I_SystemMode+0x194>)
   b6252:	4859      	ldr	r0, [pc, #356]	; (b63b8 <_GLOBAL__sub_I_SystemMode+0x198>)
   b6254:	f004 f832 	bl	ba2bc <_ZN8particle7BleUuidC1EPKc>
const BleUuid offldUuid("b4206914-dc4b-5743-c8b1-92d0e75182b0");
   b6258:	4958      	ldr	r1, [pc, #352]	; (b63bc <_GLOBAL__sub_I_SystemMode+0x19c>)
   b625a:	4859      	ldr	r0, [pc, #356]	; (b63c0 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b625c:	f004 f82e 	bl	ba2bc <_ZN8particle7BleUuidC1EPKc>
   b6260:	2514      	movs	r5, #20
            : rssi_(BLE_RSSI_INVALID) {
   b6262:	267f      	movs	r6, #127	; 0x7f
   b6264:	4620      	mov	r0, r4
   b6266:	f003 ff44 	bl	ba0f2 <_ZN8particle10BleAddressC1Ev>
   b626a:	f104 0008 	add.w	r0, r4, #8
   b626e:	f004 ff70 	bl	bb152 <_ZN8particle18BleAdvertisingDataC1Ev>
   b6272:	f104 0014 	add.w	r0, r4, #20
   b6276:	f004 ff6c 	bl	bb152 <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_COUNT];
   b627a:	3d01      	subs	r5, #1
   b627c:	f884 6020 	strb.w	r6, [r4, #32]
   b6280:	f104 0424 	add.w	r4, r4, #36	; 0x24
   b6284:	d1ee      	bne.n	b6264 <_GLOBAL__sub_I_SystemMode+0x44>
BleCharacteristic peerTxCharacteristic;
   b6286:	484f      	ldr	r0, [pc, #316]	; (b63c4 <_GLOBAL__sub_I_SystemMode+0x1a4>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6288:	4c4f      	ldr	r4, [pc, #316]	; (b63c8 <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b628a:	f004 f94d 	bl	ba528 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerRxCharacteristic;
   b628e:	484f      	ldr	r0, [pc, #316]	; (b63cc <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b6290:	f004 f94a 	bl	ba528 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerOffloadCharacteristic;
   b6294:	484e      	ldr	r0, [pc, #312]	; (b63d0 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b6296:	f004 f947 	bl	ba528 <_ZN8particle17BleCharacteristicC1Ev>
BlePeerDevice peer;
   b629a:	484e      	ldr	r0, [pc, #312]	; (b63d4 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b629c:	f004 fa20 	bl	ba6e0 <_ZN8particle13BlePeerDeviceC1Ev>
Adafruit_SH1107 oled = Adafruit_SH1107(64, 128, &Wire, OLED_RESET);
   b62a0:	f007 fb08 	bl	bd8b4 <_Z19__fetch_global_Wirev>
   b62a4:	4a4c      	ldr	r2, [pc, #304]	; (b63d8 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   b62a6:	494d      	ldr	r1, [pc, #308]	; (b63dc <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b62a8:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b62ac:	2213      	movs	r2, #19
   b62ae:	4603      	mov	r3, r0
   b62b0:	9200      	str	r2, [sp, #0]
   b62b2:	484b      	ldr	r0, [pc, #300]	; (b63e0 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   b62b4:	2280      	movs	r2, #128	; 0x80
   b62b6:	2140      	movs	r1, #64	; 0x40
   b62b8:	f003 f866 	bl	b9388 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>
   b62bc:	7823      	ldrb	r3, [r4, #0]
   b62be:	f3bf 8f5b 	dmb	ish
   b62c2:	07d8      	lsls	r0, r3, #31
   b62c4:	d40a      	bmi.n	b62dc <_GLOBAL__sub_I_SystemMode+0xbc>
   b62c6:	4620      	mov	r0, r4
   b62c8:	f7fd fef8 	bl	b40bc <__cxa_guard_acquire>
   b62cc:	b130      	cbz	r0, b62dc <_GLOBAL__sub_I_SystemMode+0xbc>
   b62ce:	4845      	ldr	r0, [pc, #276]	; (b63e4 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b62d0:	2101      	movs	r1, #1
   b62d2:	f006 fe13 	bl	bcefc <_ZN8SPIClassC1E19hal_spi_interface_t>
   b62d6:	4620      	mov	r0, r4
   b62d8:	f7fd fef5 	bl	b40c6 <__cxa_guard_release>
  explicit SdFat(SPIClass* spiPort) {
   b62dc:	4b42      	ldr	r3, [pc, #264]	; (b63e8 <_GLOBAL__sub_I_SystemMode+0x1c8>)
	    _M_invoker = &_My_handler::_M_invoke;
   b62de:	4e43      	ldr	r6, [pc, #268]	; (b63ec <_GLOBAL__sub_I_SystemMode+0x1cc>)
	    _M_manager = &_My_handler::_M_manager;
   b62e0:	4d43      	ldr	r5, [pc, #268]	; (b63f0 <_GLOBAL__sub_I_SystemMode+0x1d0>)
Timer at1(5000,actionTimer5);
   b62e2:	4844      	ldr	r0, [pc, #272]	; (b63f4 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b62e4:	2264      	movs	r2, #100	; 0x64
   b62e6:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
  {
   b62ea:	4a43      	ldr	r2, [pc, #268]	; (b63f8 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b62ec:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   b62f0:	2201      	movs	r2, #1
   b62f2:	2400      	movs	r4, #0
   b62f4:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b62f8:	4a3a      	ldr	r2, [pc, #232]	; (b63e4 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b62fa:	605c      	str	r4, [r3, #4]
   b62fc:	f8c3 443c 	str.w	r4, [r3, #1084]	; 0x43c
   b6300:	f8c3 4468 	str.w	r4, [r3, #1128]	; 0x468
   b6304:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   b6308:	f8a3 447c 	strh.w	r4, [r3, #1148]	; 0x47c
   b630c:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
    Print() : write_error(0) {}
   b6310:	4b3a      	ldr	r3, [pc, #232]	; (b63fc <_GLOBAL__sub_I_SystemMode+0x1dc>)
  File() {}
   b6312:	4a3b      	ldr	r2, [pc, #236]	; (b6400 <_GLOBAL__sub_I_SystemMode+0x1e0>)
   b6314:	605c      	str	r4, [r3, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6316:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b631a:	601a      	str	r2, [r3, #0]
   b631c:	6099      	str	r1, [r3, #8]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b631e:	611c      	str	r4, [r3, #16]
   b6320:	4b38      	ldr	r3, [pc, #224]	; (b6404 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   b6322:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b6326:	601a      	str	r2, [r3, #0]
   b6328:	611c      	str	r4, [r3, #16]
   b632a:	4b37      	ldr	r3, [pc, #220]	; (b6408 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   b632c:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b6330:	601a      	str	r2, [r3, #0]
   b6332:	611c      	str	r4, [r3, #16]
   b6334:	4b35      	ldr	r3, [pc, #212]	; (b640c <_GLOBAL__sub_I_SystemMode+0x1ec>)
   b6336:	e9c3 4400 	strd	r4, r4, [r3]
   b633a:	609c      	str	r4, [r3, #8]
   b633c:	4b34      	ldr	r3, [pc, #208]	; (b6410 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   b633e:	e9c3 4400 	strd	r4, r4, [r3]
   b6342:	609c      	str	r4, [r3, #8]
   b6344:	4b33      	ldr	r3, [pc, #204]	; (b6414 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   b6346:	e9c3 4400 	strd	r4, r4, [r3]
   b634a:	609c      	str	r4, [r3, #8]
   b634c:	4b32      	ldr	r3, [pc, #200]	; (b6418 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   b634e:	e9c3 4400 	strd	r4, r4, [r3]
   b6352:	609c      	str	r4, [r3, #8]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6354:	4b31      	ldr	r3, [pc, #196]	; (b641c <_GLOBAL__sub_I_SystemMode+0x1fc>)
   b6356:	9304      	str	r3, [sp, #16]
   b6358:	aa04      	add	r2, sp, #16
   b635a:	4623      	mov	r3, r4
   b635c:	f241 3188 	movw	r1, #5000	; 0x1388
	    _M_invoker = &_My_handler::_M_invoke;
   b6360:	9607      	str	r6, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
   b6362:	9506      	str	r5, [sp, #24]
   b6364:	f7fe f95a 	bl	b461c <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b6368:	a804      	add	r0, sp, #16
   b636a:	f7fe f905 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b636e:	4b2c      	ldr	r3, [pc, #176]	; (b6420 <_GLOBAL__sub_I_SystemMode+0x200>)
   b6370:	9304      	str	r3, [sp, #16]
Timer at2(60000,actionTimer60);
   b6372:	aa04      	add	r2, sp, #16
   b6374:	4623      	mov	r3, r4
   b6376:	f64e 2160 	movw	r1, #60000	; 0xea60
   b637a:	482a      	ldr	r0, [pc, #168]	; (b6424 <_GLOBAL__sub_I_SystemMode+0x204>)
	    _M_manager = &_My_handler::_M_manager;
   b637c:	e9cd 5606 	strd	r5, r6, [sp, #24]
   b6380:	f7fe f94c 	bl	b461c <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b6384:	a804      	add	r0, sp, #16
   b6386:	f7fe f8f7 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
   b638a:	4b27      	ldr	r3, [pc, #156]	; (b6428 <_GLOBAL__sub_I_SystemMode+0x208>)
   b638c:	e9c3 4400 	strd	r4, r4, [r3]
   b6390:	609c      	str	r4, [r3, #8]
   b6392:	b008      	add	sp, #32
   b6394:	bd70      	pop	{r4, r5, r6, pc}
   b6396:	bf00      	nop
   b6398:	2003dd10 	.word	0x2003dd10
   b639c:	2003dee4 	.word	0x2003dee4
   b63a0:	2003dcbc 	.word	0x2003dcbc
   b63a4:	000c0d4a 	.word	0x000c0d4a
   b63a8:	2003dcd4 	.word	0x2003dcd4
   b63ac:	000c0d6f 	.word	0x000c0d6f
   b63b0:	2003dce8 	.word	0x2003dce8
   b63b4:	000c0d94 	.word	0x000c0d94
   b63b8:	2003dcfc 	.word	0x2003dcfc
   b63bc:	000c0db9 	.word	0x000c0db9
   b63c0:	2003dd14 	.word	0x2003dd14
   b63c4:	2003ded8 	.word	0x2003ded8
   b63c8:	2003dc70 	.word	0x2003dc70
   b63cc:	2003ded0 	.word	0x2003ded0
   b63d0:	2003dec8 	.word	0x2003dec8
   b63d4:	2003dec0 	.word	0x2003dec0
   b63d8:	00061a80 	.word	0x00061a80
   b63dc:	000186a0 	.word	0x000186a0
   b63e0:	2003de68 	.word	0x2003de68
   b63e4:	2003dc74 	.word	0x2003dc74
   b63e8:	2003e1b4 	.word	0x2003e1b4
   b63ec:	000b42b1 	.word	0x000b42b1
   b63f0:	000b429d 	.word	0x000b429d
   b63f4:	2003dd28 	.word	0x2003dd28
   b63f8:	000c0eb4 	.word	0x000c0eb4
   b63fc:	2003de14 	.word	0x2003de14
   b6400:	000c0edc 	.word	0x000c0edc
   b6404:	2003dddc 	.word	0x2003dddc
   b6408:	2003dda8 	.word	0x2003dda8
   b640c:	2003dcc8 	.word	0x2003dcc8
   b6410:	2003dca0 	.word	0x2003dca0
   b6414:	2003dc80 	.word	0x2003dc80
   b6418:	2003dcac 	.word	0x2003dcac
   b641c:	000b40e9 	.word	0x000b40e9
   b6420:	000b41ed 	.word	0x000b41ed
   b6424:	2003dd44 	.word	0x2003dd44
   b6428:	2003dc94 	.word	0x2003dc94

000b642c <_Z13printMenuItemhbbtt8WaterBot>:
void printMenuItem(uint8_t id, bool highlighted, bool selected, uint16_t x, uint16_t y, WaterBot wb){
   b642c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b6430:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   b6434:	4c64      	ldr	r4, [pc, #400]	; (b65c8 <_Z13printMenuItemhbbtt8WaterBot+0x19c>)
   b6436:	460f      	mov	r7, r1
        oled.setCursor(x+1,y+1);
   b6438:	3601      	adds	r6, #1
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b643a:	b219      	sxth	r1, r3
        oled.setCursor(x+1,y+1);
   b643c:	3301      	adds	r3, #1
void printMenuItem(uint8_t id, bool highlighted, bool selected, uint16_t x, uint16_t y, WaterBot wb){
   b643e:	4690      	mov	r8, r2
   b6440:	4605      	mov	r5, r0
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b6442:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
        oled.setCursor(x+1,y+1);
   b6446:	fa0f f983 	sxth.w	r9, r3
   b644a:	b236      	sxth	r6, r6
   b644c:	f04f 0a10 	mov.w	sl, #16
    if(highlighted){
   b6450:	2f00      	cmp	r7, #0
   b6452:	d06f      	beq.n	b6534 <_Z13printMenuItemhbbtt8WaterBot+0x108>
        oled.fillRect(x,y,OLED_MAX_X - 40,16,1);
   b6454:	2701      	movs	r7, #1
   b6456:	2358      	movs	r3, #88	; 0x58
   b6458:	4620      	mov	r0, r4
   b645a:	e9cd a700 	strd	sl, r7, [sp]
   b645e:	9203      	str	r2, [sp, #12]
   b6460:	f002 f917 	bl	b8692 <_ZN12Adafruit_GFX8fillRectEsssst>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6464:	f8a4 9010 	strh.w	r9, [r4, #16]
        oled.setTextSize(2);
   b6468:	2102      	movs	r1, #2
   b646a:	4620      	mov	r0, r4
   b646c:	8266      	strh	r6, [r4, #18]
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b646e:	f04f 0900 	mov.w	r9, #0
   b6472:	f002 fc2a 	bl	b8cca <_ZN12Adafruit_GFX11setTextSizeEh>
        oled.print(MenuItems.at(id).itemName);
   b6476:	4629      	mov	r1, r5
   b6478:	4854      	ldr	r0, [pc, #336]	; (b65cc <_Z13printMenuItemhbbtt8WaterBot+0x1a0>)
   b647a:	f8c4 9014 	str.w	r9, [r4, #20]
   b647e:	f7fe fd23 	bl	b4ec8 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b6482:	f100 011a 	add.w	r1, r0, #26
   b6486:	4620      	mov	r0, r4
   b6488:	f006 fcb4 	bl	bcdf4 <_ZN5Print5printEPKc>
        if(selected){
   b648c:	9a03      	ldr	r2, [sp, #12]
   b648e:	f1b8 0f00 	cmp.w	r8, #0
   b6492:	d03c      	beq.n	b650e <_Z13printMenuItemhbbtt8WaterBot+0xe2>
            oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,1);
   b6494:	237f      	movs	r3, #127	; 0x7f
   b6496:	e9cd a700 	strd	sl, r7, [sp]
   b649a:	2158      	movs	r1, #88	; 0x58
   b649c:	4620      	mov	r0, r4
   b649e:	f002 f8f8 	bl	b8692 <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b64a2:	2359      	movs	r3, #89	; 0x59
   b64a4:	8223      	strh	r3, [r4, #16]
   b64a6:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b64a8:	f8c4 9014 	str.w	r9, [r4, #20]
            if(MenuItems.at(id).onOffSetting){
   b64ac:	4847      	ldr	r0, [pc, #284]	; (b65cc <_Z13printMenuItemhbbtt8WaterBot+0x1a0>)
   b64ae:	4629      	mov	r1, r5
   b64b0:	f7fe fd0a 	bl	b4ec8 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b64b4:	7d42      	ldrb	r2, [r0, #21]
   b64b6:	b1f2      	cbz	r2, b64f6 <_Z13printMenuItemhbbtt8WaterBot+0xca>
                if(wb.*(MenuItems.at(id).MethodPointerBool))  oled.printf("On");
   b64b8:	6903      	ldr	r3, [r0, #16]
   b64ba:	aa0c      	add	r2, sp, #48	; 0x30
   b64bc:	4413      	add	r3, r2
   b64be:	791b      	ldrb	r3, [r3, #4]
   b64c0:	b1bb      	cbz	r3, b64f2 <_Z13printMenuItemhbbtt8WaterBot+0xc6>
   b64c2:	4943      	ldr	r1, [pc, #268]	; (b65d0 <_Z13printMenuItemhbbtt8WaterBot+0x1a4>)
                else oled.printf("Off");
   b64c4:	4840      	ldr	r0, [pc, #256]	; (b65c8 <_Z13printMenuItemhbbtt8WaterBot+0x19c>)
                oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b64c6:	f7fd ff0c 	bl	b42e2 <_ZN5Print6printfEPKcz>
        Serial.printlnf("Printed Highlighted Menu item with name: %s",MenuItems.at(id).itemName);
   b64ca:	f007 f89b 	bl	bd604 <_Z16_fetch_usbserialv>
   b64ce:	4629      	mov	r1, r5
   b64d0:	4604      	mov	r4, r0
   b64d2:	483e      	ldr	r0, [pc, #248]	; (b65cc <_Z13printMenuItemhbbtt8WaterBot+0x1a0>)
   b64d4:	f7fe fcf8 	bl	b4ec8 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b64d8:	493e      	ldr	r1, [pc, #248]	; (b65d4 <_Z13printMenuItemhbbtt8WaterBot+0x1a8>)
   b64da:	f100 021a 	add.w	r2, r0, #26
   b64de:	4620      	mov	r0, r4
   b64e0:	f7fd ff38 	bl	b4354 <_ZN5Print8printlnfEPKcz>
    MenuItems.at(id);
   b64e4:	4629      	mov	r1, r5
   b64e6:	4839      	ldr	r0, [pc, #228]	; (b65cc <_Z13printMenuItemhbbtt8WaterBot+0x1a0>)
   b64e8:	f7fe fcee 	bl	b4ec8 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
}
   b64ec:	b004      	add	sp, #16
   b64ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                else oled.printf("Off");
   b64f2:	4939      	ldr	r1, [pc, #228]	; (b65d8 <_Z13printMenuItemhbbtt8WaterBot+0x1ac>)
   b64f4:	e7e6      	b.n	b64c4 <_Z13printMenuItemhbbtt8WaterBot+0x98>
                oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b64f6:	68c2      	ldr	r2, [r0, #12]
            else if(MenuItems.at(id).customLabel){
   b64f8:	7d83      	ldrb	r3, [r0, #22]
                oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b64fa:	a90c      	add	r1, sp, #48	; 0x30
   b64fc:	440a      	add	r2, r1
   b64fe:	7912      	ldrb	r2, [r2, #4]
            else if(MenuItems.at(id).customLabel){
   b6500:	b19b      	cbz	r3, b652a <_Z13printMenuItemhbbtt8WaterBot+0xfe>
                oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b6502:	4611      	mov	r1, r2
   b6504:	f7fe fd50 	bl	b4fa8 <_ZNSt6vectorI6StringSaIS0_EE2atEj>
   b6508:	6801      	ldr	r1, [r0, #0]
   b650a:	4620      	mov	r0, r4
   b650c:	e7db      	b.n	b64c6 <_Z13printMenuItemhbbtt8WaterBot+0x9a>
            oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,0);
   b650e:	237f      	movs	r3, #127	; 0x7f
   b6510:	e9cd a800 	strd	sl, r8, [sp]
   b6514:	2158      	movs	r1, #88	; 0x58
   b6516:	4620      	mov	r0, r4
   b6518:	f002 f8bb 	bl	b8692 <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b651c:	2359      	movs	r3, #89	; 0x59
   b651e:	8223      	strh	r3, [r4, #16]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6520:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6524:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6526:	6163      	str	r3, [r4, #20]
            if(MenuItems.at(id).onOffSetting){
   b6528:	e7c0      	b.n	b64ac <_Z13printMenuItemhbbtt8WaterBot+0x80>
            else oled.printf("%d",wb.*(MenuItems.at(id).MethodPointer));
   b652a:	492c      	ldr	r1, [pc, #176]	; (b65dc <_Z13printMenuItemhbbtt8WaterBot+0x1b0>)
   b652c:	4620      	mov	r0, r4
   b652e:	f7fd fed8 	bl	b42e2 <_ZN5Print6printfEPKcz>
   b6532:	e7ca      	b.n	b64ca <_Z13printMenuItemhbbtt8WaterBot+0x9e>
        oled.fillRect(x,y,OLED_MAX_X - 40,16,0);
   b6534:	2358      	movs	r3, #88	; 0x58
   b6536:	4620      	mov	r0, r4
   b6538:	e9cd a700 	strd	sl, r7, [sp]
   b653c:	9203      	str	r2, [sp, #12]
   b653e:	f04f 1801 	mov.w	r8, #65537	; 0x10001
   b6542:	f002 f8a6 	bl	b8692 <_ZN12Adafruit_GFX8fillRectEsssst>
        oled.setTextSize(2);
   b6546:	2102      	movs	r1, #2
   b6548:	4620      	mov	r0, r4
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b654a:	f8a4 9010 	strh.w	r9, [r4, #16]
   b654e:	8266      	strh	r6, [r4, #18]
   b6550:	f002 fbbb 	bl	b8cca <_ZN12Adafruit_GFX11setTextSizeEh>
        oled.print(MenuItems.at(id).itemName);
   b6554:	4629      	mov	r1, r5
   b6556:	481d      	ldr	r0, [pc, #116]	; (b65cc <_Z13printMenuItemhbbtt8WaterBot+0x1a0>)
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6558:	f8c4 8014 	str.w	r8, [r4, #20]
   b655c:	f7fe fcb4 	bl	b4ec8 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b6560:	f100 011a 	add.w	r1, r0, #26
   b6564:	4620      	mov	r0, r4
   b6566:	f006 fc45 	bl	bcdf4 <_ZN5Print5printEPKc>
        oled.fillRect(OLED_MAX_X - 40,y,OLED_MAX_X-1,16,0);
   b656a:	9a03      	ldr	r2, [sp, #12]
   b656c:	237f      	movs	r3, #127	; 0x7f
   b656e:	2158      	movs	r1, #88	; 0x58
   b6570:	4620      	mov	r0, r4
   b6572:	e9cd a700 	strd	sl, r7, [sp]
   b6576:	f002 f88c 	bl	b8692 <_ZN12Adafruit_GFX8fillRectEsssst>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b657a:	2359      	movs	r3, #89	; 0x59
        if(MenuItems.at(id).onOffSetting){
   b657c:	4813      	ldr	r0, [pc, #76]	; (b65cc <_Z13printMenuItemhbbtt8WaterBot+0x1a0>)
   b657e:	8223      	strh	r3, [r4, #16]
   b6580:	8266      	strh	r6, [r4, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6582:	f8c4 8014 	str.w	r8, [r4, #20]
   b6586:	4629      	mov	r1, r5
   b6588:	f7fe fc9e 	bl	b4ec8 <_ZNSt6vectorI8MenuItemSaIS0_EE2atEj>
   b658c:	7d42      	ldrb	r2, [r0, #21]
   b658e:	b15a      	cbz	r2, b65a8 <_Z13printMenuItemhbbtt8WaterBot+0x17c>
            if(wb.*(MenuItems.at(id).MethodPointerBool))  oled.printf("On");
   b6590:	6903      	ldr	r3, [r0, #16]
   b6592:	aa0c      	add	r2, sp, #48	; 0x30
   b6594:	4413      	add	r3, r2
   b6596:	791b      	ldrb	r3, [r3, #4]
   b6598:	b123      	cbz	r3, b65a4 <_Z13printMenuItemhbbtt8WaterBot+0x178>
   b659a:	490d      	ldr	r1, [pc, #52]	; (b65d0 <_Z13printMenuItemhbbtt8WaterBot+0x1a4>)
            else oled.printf("Off");
   b659c:	4620      	mov	r0, r4
   b659e:	f7fd fea0 	bl	b42e2 <_ZN5Print6printfEPKcz>
   b65a2:	e79f      	b.n	b64e4 <_Z13printMenuItemhbbtt8WaterBot+0xb8>
   b65a4:	490c      	ldr	r1, [pc, #48]	; (b65d8 <_Z13printMenuItemhbbtt8WaterBot+0x1ac>)
   b65a6:	e7f9      	b.n	b659c <_Z13printMenuItemhbbtt8WaterBot+0x170>
            oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b65a8:	68c2      	ldr	r2, [r0, #12]
        else if(MenuItems.at(id).customLabel){
   b65aa:	7d83      	ldrb	r3, [r0, #22]
            oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b65ac:	a90c      	add	r1, sp, #48	; 0x30
   b65ae:	440a      	add	r2, r1
   b65b0:	7912      	ldrb	r2, [r2, #4]
        else if(MenuItems.at(id).customLabel){
   b65b2:	b123      	cbz	r3, b65be <_Z13printMenuItemhbbtt8WaterBot+0x192>
            oled.printf(MenuItems.at(id).labels.at(wb.*MenuItems.at(id).MethodPointer));
   b65b4:	4611      	mov	r1, r2
   b65b6:	f7fe fcf7 	bl	b4fa8 <_ZNSt6vectorI6StringSaIS0_EE2atEj>
   b65ba:	6801      	ldr	r1, [r0, #0]
   b65bc:	e7ee      	b.n	b659c <_Z13printMenuItemhbbtt8WaterBot+0x170>
        else oled.printf("%d",wb.*(MenuItems.at(id).MethodPointer));
   b65be:	4907      	ldr	r1, [pc, #28]	; (b65dc <_Z13printMenuItemhbbtt8WaterBot+0x1b0>)
   b65c0:	4620      	mov	r0, r4
   b65c2:	f7fd fe8e 	bl	b42e2 <_ZN5Print6printfEPKcz>
   b65c6:	e78d      	b.n	b64e4 <_Z13printMenuItemhbbtt8WaterBot+0xb8>
   b65c8:	2003de68 	.word	0x2003de68
   b65cc:	2003dc94 	.word	0x2003dc94
   b65d0:	000c0dde 	.word	0x000c0dde
   b65d4:	000c0de5 	.word	0x000c0de5
   b65d8:	000c0de1 	.word	0x000c0de1
   b65dc:	000c0a1b 	.word	0x000c0a1b

000b65e0 <setup>:
void setup() {
   b65e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pinMode(E_DPAD,INPUT_PULLDOWN);
   b65e4:	2103      	movs	r1, #3
void setup() {
   b65e6:	b0a0      	sub	sp, #128	; 0x80
    pinMode(E_DPAD,INPUT_PULLDOWN);
   b65e8:	201c      	movs	r0, #28
   b65ea:	f007 f90b 	bl	bd804 <pinMode>
    pinMode(U_DPAD,INPUT_PULLDOWN);
   b65ee:	2103      	movs	r1, #3
   b65f0:	200e      	movs	r0, #14
   b65f2:	f007 f907 	bl	bd804 <pinMode>
    pinMode(D_DPAD,INPUT_PULLDOWN);
   b65f6:	2103      	movs	r1, #3
   b65f8:	2007      	movs	r0, #7
   b65fa:	f007 f903 	bl	bd804 <pinMode>
    pinMode(L_DPAD,INPUT_PULLDOWN);
   b65fe:	2103      	movs	r1, #3
   b6600:	200f      	movs	r0, #15
   b6602:	f007 f8ff 	bl	bd804 <pinMode>
    pinMode(R_DPAD,INPUT_PULLDOWN);
   b6606:	2103      	movs	r1, #3
   b6608:	2012      	movs	r0, #18
    attachInterrupt(E_DPAD,entHandler,RISING);
   b660a:	2400      	movs	r4, #0
    pinMode(R_DPAD,INPUT_PULLDOWN);
   b660c:	f007 f8fa 	bl	bd804 <pinMode>
    pinMode(JOY_BTN,INPUT_PULLDOWN);
   b6610:	2103      	movs	r1, #3
   b6612:	201d      	movs	r0, #29
   b6614:	f007 f8f6 	bl	bd804 <pinMode>
    attachInterrupt(E_DPAD,entHandler,RISING);
   b6618:	4985      	ldr	r1, [pc, #532]	; (b6830 <setup+0x250>)
   b661a:	9400      	str	r4, [sp, #0]
   b661c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6620:	2201      	movs	r2, #1
   b6622:	201c      	movs	r0, #28
   b6624:	f006 fa74 	bl	bcb10 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(U_DPAD,uHandler,RISING);
   b6628:	4982      	ldr	r1, [pc, #520]	; (b6834 <setup+0x254>)
   b662a:	9400      	str	r4, [sp, #0]
   b662c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6630:	2201      	movs	r2, #1
   b6632:	200e      	movs	r0, #14
   b6634:	f006 fa6c 	bl	bcb10 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(D_DPAD,dHandler,RISING);
   b6638:	497f      	ldr	r1, [pc, #508]	; (b6838 <setup+0x258>)
   b663a:	9400      	str	r4, [sp, #0]
   b663c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6640:	2201      	movs	r2, #1
   b6642:	2007      	movs	r0, #7
   b6644:	f006 fa64 	bl	bcb10 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(L_DPAD,lHandler,RISING);
   b6648:	497c      	ldr	r1, [pc, #496]	; (b683c <setup+0x25c>)
   b664a:	9400      	str	r4, [sp, #0]
   b664c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6650:	2201      	movs	r2, #1
   b6652:	200f      	movs	r0, #15
   b6654:	f006 fa5c 	bl	bcb10 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(R_DPAD,rHandler,RISING);
   b6658:	4979      	ldr	r1, [pc, #484]	; (b6840 <setup+0x260>)
   b665a:	9400      	str	r4, [sp, #0]
   b665c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6660:	2201      	movs	r2, #1
   b6662:	2012      	movs	r0, #18
   b6664:	f006 fa54 	bl	bcb10 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(JOY_BTN,jHandler,RISING);
   b6668:	4976      	ldr	r1, [pc, #472]	; (b6844 <setup+0x264>)
   b666a:	9400      	str	r4, [sp, #0]
   b666c:	2201      	movs	r2, #1
   b666e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6672:	201d      	movs	r0, #29
   b6674:	f006 fa4c 	bl	bcb10 <_Z15attachInterrupttPFvvE13InterruptModeah>
   b6678:	f003 f8ec 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b667c:	4b72      	ldr	r3, [pc, #456]	; (b6848 <setup+0x268>)
    logMessages = true;
   b667e:	4f73      	ldr	r7, [pc, #460]	; (b684c <setup+0x26c>)
    debounceTime = millis();
   b6680:	6018      	str	r0, [r3, #0]
   b6682:	f003 f8e7 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
    controlUpdateTime = millis();
   b6686:	4b72      	ldr	r3, [pc, #456]	; (b6850 <setup+0x270>)
   b6688:	6018      	str	r0, [r3, #0]
    controlUpdateID = -1;
   b668a:	4b72      	ldr	r3, [pc, #456]	; (b6854 <setup+0x274>)
   b668c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6690:	601a      	str	r2, [r3, #0]
    Serial.begin(115200);
   b6692:	f006 ffb7 	bl	bd604 <_Z16_fetch_usbserialv>
   b6696:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b669a:	f006 ffa7 	bl	bd5ec <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b669e:	f007 f949 	bl	bd934 <_Z22__fetch_global_Serial1v>
   b66a2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b66a6:	f006 ff4b 	bl	bd540 <_ZN11USARTSerial5beginEm>
    setupXBee();
   b66aa:	f7fe f9f5 	bl	b4a98 <_Z9setupXBeev>
	BLE.on();
   b66ae:	f004 f8c7 	bl	ba840 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b66b2:	f004 f90f 	bl	ba8d4 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setScanTimeout(50);  //100ms scan
   b66b6:	f004 f8c3 	bl	ba840 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b66ba:	2132      	movs	r1, #50	; 0x32
   b66bc:	f004 f954 	bl	ba968 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>
    BLE.setTxPower(8);
   b66c0:	f004 f8be 	bl	ba840 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b66c4:	2108      	movs	r1, #8
   b66c6:	f004 f90c 	bl	ba8e2 <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   b66ca:	4a63      	ldr	r2, [pc, #396]	; (b6858 <setup+0x278>)
   b66cc:	4963      	ldr	r1, [pc, #396]	; (b685c <setup+0x27c>)
   b66ce:	4610      	mov	r0, r2
   b66d0:	f005 f922 	bl	bb918 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    peerOffloadCharacteristic.onDataReceived(offloadDataReceived, &peerOffloadCharacteristic);
   b66d4:	4a62      	ldr	r2, [pc, #392]	; (b6860 <setup+0x280>)
   b66d6:	4963      	ldr	r1, [pc, #396]	; (b6864 <setup+0x284>)
   b66d8:	4610      	mov	r0, r2
   b66da:	f005 f91d 	bl	bb918 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b66de:	4622      	mov	r2, r4
   b66e0:	4961      	ldr	r1, [pc, #388]	; (b6868 <setup+0x288>)
   b66e2:	4862      	ldr	r0, [pc, #392]	; (b686c <setup+0x28c>)
   b66e4:	e9cd 4400 	strd	r4, r4, [sp]
   b66e8:	2301      	movs	r3, #1
   b66ea:	f003 faaf 	bl	b9c4c <spark_subscribe>
    offloadingMode = false;
   b66ee:	4b60      	ldr	r3, [pc, #384]	; (b6870 <setup+0x290>)
   b66f0:	701c      	strb	r4, [r3, #0]
    offloadingDone = false;
   b66f2:	4b60      	ldr	r3, [pc, #384]	; (b6874 <setup+0x294>)
   b66f4:	701c      	strb	r4, [r3, #0]
    postStatus = false;
   b66f6:	4b60      	ldr	r3, [pc, #384]	; (b6878 <setup+0x298>)
   b66f8:	701c      	strb	r4, [r3, #0]
    statusTimeout = false;
   b66fa:	4b60      	ldr	r3, [pc, #384]	; (b687c <setup+0x29c>)
    logMessages = true;
   b66fc:	2601      	movs	r6, #1
    statusTimeout = false;
   b66fe:	701c      	strb	r4, [r3, #0]
    logMessages = true;
   b6700:	703e      	strb	r6, [r7, #0]
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b6702:	f006 fea9 	bl	bd458 <_ZN9TimeClass5monthEv>
   b6706:	9007      	str	r0, [sp, #28]
   b6708:	f006 fe9a 	bl	bd440 <_ZN9TimeClass3dayEv>
   b670c:	4605      	mov	r5, r0
   b670e:	f006 feab 	bl	bd468 <_ZN9TimeClass4yearEv>
   b6712:	4680      	mov	r8, r0
   b6714:	f006 fe70 	bl	bd3f8 <_ZN9TimeClass4hourEv>
   b6718:	4681      	mov	r9, r0
   b671a:	f006 fe79 	bl	bd410 <_ZN9TimeClass6minuteEv>
   b671e:	4682      	mov	sl, r0
   b6720:	f006 fe82 	bl	bd428 <_ZN9TimeClass6secondEv>
   b6724:	9b07      	ldr	r3, [sp, #28]
   b6726:	4a56      	ldr	r2, [pc, #344]	; (b6880 <setup+0x2a0>)
   b6728:	9500      	str	r5, [sp, #0]
   b672a:	e9cd a003 	strd	sl, r0, [sp, #12]
   b672e:	2110      	movs	r1, #16
   b6730:	e9cd 8901 	strd	r8, r9, [sp, #4]
   b6734:	a809      	add	r0, sp, #36	; 0x24
   b6736:	f003 fb29 	bl	b9d8c <snprintf>
    strcpy(filenameMessages,DEF_FILENAME);
   b673a:	4952      	ldr	r1, [pc, #328]	; (b6884 <setup+0x2a4>)
   b673c:	4852      	ldr	r0, [pc, #328]	; (b6888 <setup+0x2a8>)
    oled.begin(i2c_Address, true); // Address 0x3C default
   b673e:	4d53      	ldr	r5, [pc, #332]	; (b688c <setup+0x2ac>)
    strcpy(filenameMessages,DEF_FILENAME);
   b6740:	f008 f8a1 	bl	be886 <strcpy>
    strcat(filenameMessages,timestamp);
   b6744:	a909      	add	r1, sp, #36	; 0x24
   b6746:	4850      	ldr	r0, [pc, #320]	; (b6888 <setup+0x2a8>)
   b6748:	f008 f884 	bl	be854 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b674c:	4950      	ldr	r1, [pc, #320]	; (b6890 <setup+0x2b0>)
   b674e:	484e      	ldr	r0, [pc, #312]	; (b6888 <setup+0x2a8>)
   b6750:	f008 f880 	bl	be854 <strcat>
    createMenu();
   b6754:	f7ff fcb0 	bl	b60b8 <_Z10createMenuv>
    delay(250);
   b6758:	20fa      	movs	r0, #250	; 0xfa
   b675a:	f003 fb57 	bl	b9e0c <delay>
    oled.begin(i2c_Address, true); // Address 0x3C default
   b675e:	4632      	mov	r2, r6
   b6760:	213c      	movs	r1, #60	; 0x3c
   b6762:	4628      	mov	r0, r5
   b6764:	f002 fe24 	bl	b93b0 <_ZN15Adafruit_SH11075beginEhb>
    oled.clearDisplay();
   b6768:	4628      	mov	r0, r5
   b676a:	f002 fd67 	bl	b923c <_ZN17Adafruit_GrayOLED12clearDisplayEv>
    oled.display();
   b676e:	4628      	mov	r0, r5
   b6770:	f002 fe90 	bl	b9494 <_ZN15Adafruit_SH110X7displayEv>
    oled.setRotation(1);
   b6774:	4631      	mov	r1, r6
   b6776:	4628      	mov	r0, r5
   b6778:	f002 f83f 	bl	b87fa <_ZN12Adafruit_GFX11setRotationEh>
    oled.setTextSize(2);
   b677c:	2102      	movs	r1, #2
   b677e:	4628      	mov	r0, r5
   b6780:	f002 faa3 	bl	b8cca <_ZN12Adafruit_GFX11setTextSizeEh>
   b6784:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    oled.print(" Starting ");
   b6788:	4942      	ldr	r1, [pc, #264]	; (b6894 <setup+0x2b4>)
   b678a:	616b      	str	r3, [r5, #20]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b678c:	612c      	str	r4, [r5, #16]
   b678e:	4628      	mov	r0, r5
   b6790:	f006 fb30 	bl	bcdf4 <_ZN5Print5printEPKc>
    oled.display();
   b6794:	4628      	mov	r0, r5
   b6796:	f002 fe7d 	bl	b9494 <_ZN15Adafruit_SH110X7displayEv>
    delay(100);
   b679a:	2064      	movs	r0, #100	; 0x64
   b679c:	f003 fb36 	bl	b9e0c <delay>
      dataMode_{dataMode}
   b67a0:	4b3d      	ldr	r3, [pc, #244]	; (b6898 <setup+0x2b8>)
   b67a2:	930d      	str	r3, [sp, #52]	; 0x34
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {
   b67a4:	483d      	ldr	r0, [pc, #244]	; (b689c <setup+0x2bc>)
   b67a6:	4b3e      	ldr	r3, [pc, #248]	; (b68a0 <setup+0x2c0>)
   b67a8:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
   b67ac:	aa0d      	add	r2, sp, #52	; 0x34
   b67ae:	2108      	movs	r1, #8
   b67b0:	930f      	str	r3, [sp, #60]	; 0x3c
   b67b2:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
   b67b6:	f7fe f813 	bl	b47e0 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b67ba:	4604      	mov	r4, r0
   b67bc:	b928      	cbnz	r0, b67ca <setup+0x1ea>
        Serial.println("Error: could not connect to SD card!");
   b67be:	f006 ff21 	bl	bd604 <_Z16_fetch_usbserialv>
   b67c2:	4938      	ldr	r1, [pc, #224]	; (b68a4 <setup+0x2c4>)
   b67c4:	f006 fb29 	bl	bce1a <_ZN5Print7printlnEPKc>
        logMessages = false;
   b67c8:	703c      	strb	r4, [r7, #0]
class MenuPopUp{
   b67ca:	2300      	movs	r3, #0
    sprintf(m.primaryLine,"Hello!\0");
   b67cc:	4936      	ldr	r1, [pc, #216]	; (b68a8 <setup+0x2c8>)
class MenuPopUp{
   b67ce:	f88d 307a 	strb.w	r3, [sp, #122]	; 0x7a
    sprintf(m.primaryLine,"Hello!\0");
   b67d2:	a80d      	add	r0, sp, #52	; 0x34
class MenuPopUp{
   b67d4:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
   b67d8:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    sprintf(m.primaryLine,"Hello!\0");
   b67dc:	f008 f853 	bl	be886 <strcpy>
    sprintf(m.secondaryLine,"Scanning for Bots\0", 1);
   b67e0:	4932      	ldr	r1, [pc, #200]	; (b68ac <setup+0x2cc>)
   b67e2:	2201      	movs	r2, #1
   b67e4:	f10d 003e 	add.w	r0, sp, #62	; 0x3e
   b67e8:	f003 fac0 	bl	b9d6c <sprintf>
    sprintf(m.tertiaryLine, "OK when bots ready\0",15);
   b67ec:	220f      	movs	r2, #15
   b67ee:	4930      	ldr	r1, [pc, #192]	; (b68b0 <setup+0x2d0>)
   b67f0:	a817      	add	r0, sp, #92	; 0x5c
   b67f2:	f003 fabb 	bl	b9d6c <sprintf>
    m.primaryStart = 32;
   b67f6:	2320      	movs	r3, #32
   b67f8:	f88d 307a 	strb.w	r3, [sp, #122]	; 0x7a
    m.secondaryStart = 12;
   b67fc:	230c      	movs	r3, #12
   b67fe:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
    PopUps.push_back(m);
   b6802:	a90d      	add	r1, sp, #52	; 0x34
    m.tertiaryStart = 10;
   b6804:	230a      	movs	r3, #10
    PopUps.push_back(m);
   b6806:	482b      	ldr	r0, [pc, #172]	; (b68b4 <setup+0x2d4>)
    m.tertiaryStart = 10;
   b6808:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    PopUps.push_back(m);
   b680c:	f7fe fd4a 	bl	b52a4 <_ZNSt6vectorI9MenuPopUpSaIS0_EE9push_backERKS0_>
    at1.start();
   b6810:	4829      	ldr	r0, [pc, #164]	; (b68b8 <setup+0x2d8>)
   b6812:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b6816:	f7fd fd4d 	bl	b42b4 <_ZN5Timer5startEj.isra.0>
    at2.start();
   b681a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b681e:	4827      	ldr	r0, [pc, #156]	; (b68bc <setup+0x2dc>)
   b6820:	f7fd fd48 	bl	b42b4 <_ZN5Timer5startEj.isra.0>
    WaterBotSim(1);
   b6824:	2001      	movs	r0, #1
   b6826:	f7ff f971 	bl	b5b0c <_Z11WaterBotSimh>
}
   b682a:	b020      	add	sp, #128	; 0x80
   b682c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6830:	000b422d 	.word	0x000b422d
   b6834:	000b4ef1 	.word	0x000b4ef1
   b6838:	000b4f4d 	.word	0x000b4f4d
   b683c:	000b4371 	.word	0x000b4371
   b6840:	000b4479 	.word	0x000b4479
   b6844:	000b41bd 	.word	0x000b41bd
   b6848:	2003dd6c 	.word	0x2003dd6c
   b684c:	2003de10 	.word	0x2003de10
   b6850:	2003dd68 	.word	0x2003dd68
   b6854:	2003dd64 	.word	0x2003dd64
   b6858:	2003ded8 	.word	0x2003ded8
   b685c:	000b5981 	.word	0x000b5981
   b6860:	2003dec8 	.word	0x2003dec8
   b6864:	000b468d 	.word	0x000b468d
   b6868:	000b5931 	.word	0x000b5931
   b686c:	000c0abe 	.word	0x000c0abe
   b6870:	2003de67 	.word	0x2003de67
   b6874:	2003de66 	.word	0x2003de66
   b6878:	2003dee0 	.word	0x2003dee0
   b687c:	2003e639 	.word	0x2003e639
   b6880:	000c0e11 	.word	0x000c0e11
   b6884:	000c0e2a 	.word	0x000c0e2a
   b6888:	2003dd84 	.word	0x2003dd84
   b688c:	2003de68 	.word	0x2003de68
   b6890:	000c0e33 	.word	0x000c0e33
   b6894:	000c0e3c 	.word	0x000c0e3c
   b6898:	000c0eb4 	.word	0x000c0eb4
   b689c:	2003e1b4 	.word	0x2003e1b4
   b68a0:	007a1200 	.word	0x007a1200
   b68a4:	000c0e47 	.word	0x000c0e47
   b68a8:	000c0f1e 	.word	0x000c0f1e
   b68ac:	000c0f26 	.word	0x000c0f26
   b68b0:	000c0f39 	.word	0x000c0f39
   b68b4:	2003dcac 	.word	0x2003dcac
   b68b8:	2003dd28 	.word	0x2003dd28
   b68bc:	2003dd44 	.word	0x2003dd44

000b68c0 <_Z10updateMenuv>:
void updateMenu(){
   b68c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(redrawMenu){
   b68c4:	f8df b2a0 	ldr.w	fp, [pc, #672]	; b6b68 <_Z10updateMenuv+0x2a8>
   b68c8:	f89b 3000 	ldrb.w	r3, [fp]
void updateMenu(){
   b68cc:	b091      	sub	sp, #68	; 0x44
    if(redrawMenu){
   b68ce:	2b00      	cmp	r3, #0
   b68d0:	d06d      	beq.n	b69ae <_Z10updateMenuv+0xee>
        oled.fillRect(0,0,OLED_MAX_X,OLED_MAX_Y,0);
   b68d2:	4c98      	ldr	r4, [pc, #608]	; (b6b34 <_Z10updateMenuv+0x274>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b68d4:	4e98      	ldr	r6, [pc, #608]	; (b6b38 <_Z10updateMenuv+0x278>)
   b68d6:	2500      	movs	r5, #0
   b68d8:	2340      	movs	r3, #64	; 0x40
   b68da:	e9cd 3500 	strd	r3, r5, [sp]
   b68de:	462a      	mov	r2, r5
   b68e0:	2380      	movs	r3, #128	; 0x80
   b68e2:	4629      	mov	r1, r5
   b68e4:	4620      	mov	r0, r4
   b68e6:	f001 fed4 	bl	b8692 <_ZN12Adafruit_GFX8fillRectEsssst>
        if(PopUps.size() != 0){  //If there is a queue of pop-ups to be displayed
   b68ea:	e9d6 3200 	ldrd	r3, r2, [r6]
   b68ee:	429a      	cmp	r2, r3
   b68f0:	d060      	beq.n	b69b4 <_Z10updateMenuv+0xf4>
            oled.drawRect(1,1,126,62,1);
   b68f2:	2701      	movs	r7, #1
   b68f4:	233e      	movs	r3, #62	; 0x3e
   b68f6:	e9cd 3700 	strd	r3, r7, [sp]
   b68fa:	463a      	mov	r2, r7
   b68fc:	237e      	movs	r3, #126	; 0x7e
   b68fe:	4639      	mov	r1, r7
   b6900:	4620      	mov	r0, r4
   b6902:	f001 ff39 	bl	b8778 <_ZN12Adafruit_GFX8drawRectEsssst>
            oled.drawRect(2,2,124,60,1);
   b6906:	2202      	movs	r2, #2
   b6908:	233c      	movs	r3, #60	; 0x3c
   b690a:	4611      	mov	r1, r2
   b690c:	9300      	str	r3, [sp, #0]
   b690e:	4620      	mov	r0, r4
   b6910:	237c      	movs	r3, #124	; 0x7c
   b6912:	9701      	str	r7, [sp, #4]
   b6914:	f001 ff30 	bl	b8778 <_ZN12Adafruit_GFX8drawRectEsssst>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6918:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b691c:	6163      	str	r3, [r4, #20]
            oled.setCursor(PopUps.back().primaryStart,4);
   b691e:	6873      	ldr	r3, [r6, #4]
   b6920:	f813 3c03 	ldrb.w	r3, [r3, #-3]
   b6924:	8223      	strh	r3, [r4, #16]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6926:	2304      	movs	r3, #4
   b6928:	8263      	strh	r3, [r4, #18]
            oled.setTextSize(2);
   b692a:	2102      	movs	r1, #2
   b692c:	4620      	mov	r0, r4
   b692e:	f002 f9cc 	bl	b8cca <_ZN12Adafruit_GFX11setTextSizeEh>
            oled.printf(PopUps.back().primaryLine);
   b6932:	6871      	ldr	r1, [r6, #4]
   b6934:	4620      	mov	r0, r4
   b6936:	3949      	subs	r1, #73	; 0x49
   b6938:	f7fd fcd3 	bl	b42e2 <_ZN5Print6printfEPKcz>
            oled.setCursor(PopUps.back().secondaryStart,22);
   b693c:	6873      	ldr	r3, [r6, #4]
   b693e:	f813 3c02 	ldrb.w	r3, [r3, #-2]
   b6942:	8223      	strh	r3, [r4, #16]
   b6944:	2316      	movs	r3, #22
   b6946:	8263      	strh	r3, [r4, #18]
            oled.setTextSize(1);
   b6948:	4639      	mov	r1, r7
   b694a:	4620      	mov	r0, r4
   b694c:	f002 f9bd 	bl	b8cca <_ZN12Adafruit_GFX11setTextSizeEh>
            oled.printf(PopUps.back().secondaryLine);
   b6950:	6871      	ldr	r1, [r6, #4]
   b6952:	4620      	mov	r0, r4
   b6954:	393f      	subs	r1, #63	; 0x3f
   b6956:	f7fd fcc4 	bl	b42e2 <_ZN5Print6printfEPKcz>
            oled.setCursor(PopUps.back().tertiaryStart,32);
   b695a:	6873      	ldr	r3, [r6, #4]
   b695c:	f04f 0820 	mov.w	r8, #32
   b6960:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b6964:	8223      	strh	r3, [r4, #16]
            oled.setTextSize(1);
   b6966:	4639      	mov	r1, r7
   b6968:	4620      	mov	r0, r4
   b696a:	f8a4 8012 	strh.w	r8, [r4, #18]
   b696e:	f002 f9ac 	bl	b8cca <_ZN12Adafruit_GFX11setTextSizeEh>
            oled.printf(PopUps.back().tertiaryLine);
   b6972:	6871      	ldr	r1, [r6, #4]
   b6974:	4620      	mov	r0, r4
   b6976:	3921      	subs	r1, #33	; 0x21
   b6978:	f7fd fcb3 	bl	b42e2 <_ZN5Print6printfEPKcz>
   b697c:	4b6f      	ldr	r3, [pc, #444]	; (b6b3c <_Z10updateMenuv+0x27c>)
   b697e:	6123      	str	r3, [r4, #16]
            oled.setTextSize(2);
   b6980:	2102      	movs	r1, #2
   b6982:	4620      	mov	r0, r4
   b6984:	f002 f9a1 	bl	b8cca <_ZN12Adafruit_GFX11setTextSizeEh>
            oled.fillRect(45,44,32,16,1);
   b6988:	2310      	movs	r3, #16
   b698a:	222c      	movs	r2, #44	; 0x2c
   b698c:	9300      	str	r3, [sp, #0]
   b698e:	212d      	movs	r1, #45	; 0x2d
   b6990:	4643      	mov	r3, r8
   b6992:	4620      	mov	r0, r4
   b6994:	9701      	str	r7, [sp, #4]
   b6996:	f001 fe7c 	bl	b8692 <_ZN12Adafruit_GFX8fillRectEsssst>
            oled.printf("OK");
   b699a:	4969      	ldr	r1, [pc, #420]	; (b6b40 <_Z10updateMenuv+0x280>)
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b699c:	6165      	str	r5, [r4, #20]
   b699e:	4620      	mov	r0, r4
   b69a0:	f7fd fc9f 	bl	b42e2 <_ZN5Print6printfEPKcz>
            oled.display();
   b69a4:	4620      	mov	r0, r4
   b69a6:	f002 fd75 	bl	b9494 <_ZN15Adafruit_SH110X7displayEv>
            redrawMenu = false;
   b69aa:	f88b 5000 	strb.w	r5, [fp]
}
   b69ae:	b011      	add	sp, #68	; 0x44
   b69b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b69b4:	f8df 91a0 	ldr.w	r9, [pc, #416]	; b6b58 <_Z10updateMenuv+0x298>
   b69b8:	f8df a1b0 	ldr.w	sl, [pc, #432]	; b6b6c <_Z10updateMenuv+0x2ac>
        uint8_t menuSelect = 0;
   b69bc:	462e      	mov	r6, r5
   b69be:	e9d9 2300 	ldrd	r2, r3, [r9]
   b69c2:	1a9b      	subs	r3, r3, r2
   b69c4:	109b      	asrs	r3, r3, #2
   b69c6:	b2ef      	uxtb	r7, r5
   b69c8:	fb0a f303 	mul.w	r3, sl, r3
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b69cc:	429f      	cmp	r7, r3
   b69ce:	d247      	bcs.n	b6a60 <_Z10updateMenuv+0x1a0>
            if(WaterBots.at(i).botNum == botSelect){
   b69d0:	4639      	mov	r1, r7
   b69d2:	4648      	mov	r0, r9
   b69d4:	f7fe fafa 	bl	b4fcc <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b69d8:	4b5a      	ldr	r3, [pc, #360]	; (b6b44 <_Z10updateMenuv+0x284>)
   b69da:	7881      	ldrb	r1, [r0, #2]
   b69dc:	781b      	ldrb	r3, [r3, #0]
                oled.setTextSize(1);
   b69de:	4855      	ldr	r0, [pc, #340]	; (b6b34 <_Z10updateMenuv+0x274>)
                oled.setCursor(5+18*i,4);
   b69e0:	eb07 08c7 	add.w	r8, r7, r7, lsl #3
   b69e4:	ea4f 0848 	mov.w	r8, r8, lsl #1
   b69e8:	f108 0205 	add.w	r2, r8, #5
            if(WaterBots.at(i).botNum == botSelect){
   b69ec:	4299      	cmp	r1, r3
   b69ee:	f04f 0304 	mov.w	r3, #4
                oled.fillRect(1+i*18,1,14,14,1);
   b69f2:	f108 0801 	add.w	r8, r8, #1
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b69f6:	8222      	strh	r2, [r4, #16]
   b69f8:	8263      	strh	r3, [r4, #18]
                oled.setTextSize(1);
   b69fa:	f04f 0101 	mov.w	r1, #1
            if(WaterBots.at(i).botNum == botSelect){
   b69fe:	d117      	bne.n	b6a30 <_Z10updateMenuv+0x170>
                oled.setTextSize(1);
   b6a00:	f002 f963 	bl	b8cca <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6a04:	2300      	movs	r3, #0
                oled.fillRect(1+i*18,1,14,14,1);
   b6a06:	2201      	movs	r2, #1
   b6a08:	6163      	str	r3, [r4, #20]
   b6a0a:	230e      	movs	r3, #14
   b6a0c:	e9cd 3200 	strd	r3, r2, [sp]
   b6a10:	4848      	ldr	r0, [pc, #288]	; (b6b34 <_Z10updateMenuv+0x274>)
   b6a12:	4641      	mov	r1, r8
   b6a14:	f001 fe3d 	bl	b8692 <_ZN12Adafruit_GFX8fillRectEsssst>
                oled.printf("%d",WaterBots.at(i).botNum);
   b6a18:	4639      	mov	r1, r7
   b6a1a:	4648      	mov	r0, r9
   b6a1c:	f7fe fad6 	bl	b4fcc <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6a20:	4949      	ldr	r1, [pc, #292]	; (b6b48 <_Z10updateMenuv+0x288>)
   b6a22:	7882      	ldrb	r2, [r0, #2]
   b6a24:	4843      	ldr	r0, [pc, #268]	; (b6b34 <_Z10updateMenuv+0x274>)
   b6a26:	f7fd fc5c 	bl	b42e2 <_ZN5Print6printfEPKcz>
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b6a2a:	3501      	adds	r5, #1
   b6a2c:	463e      	mov	r6, r7
   b6a2e:	e7c6      	b.n	b69be <_Z10updateMenuv+0xfe>
                oled.setTextSize(1);
   b6a30:	f002 f94b 	bl	b8cca <_ZN12Adafruit_GFX11setTextSizeEh>
   b6a34:	f04f 1301 	mov.w	r3, #65537	; 0x10001
                oled.drawRect(1+i*18,1,14,14,1);
   b6a38:	2201      	movs	r2, #1
   b6a3a:	6163      	str	r3, [r4, #20]
   b6a3c:	230e      	movs	r3, #14
   b6a3e:	e9cd 3200 	strd	r3, r2, [sp]
   b6a42:	483c      	ldr	r0, [pc, #240]	; (b6b34 <_Z10updateMenuv+0x274>)
   b6a44:	4641      	mov	r1, r8
   b6a46:	f001 fe97 	bl	b8778 <_ZN12Adafruit_GFX8drawRectEsssst>
                oled.printf("%d",WaterBots.at(i).botNum);
   b6a4a:	4639      	mov	r1, r7
   b6a4c:	4648      	mov	r0, r9
   b6a4e:	f7fe fabd 	bl	b4fcc <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6a52:	493d      	ldr	r1, [pc, #244]	; (b6b48 <_Z10updateMenuv+0x288>)
   b6a54:	7882      	ldrb	r2, [r0, #2]
   b6a56:	4837      	ldr	r0, [pc, #220]	; (b6b34 <_Z10updateMenuv+0x274>)
   b6a58:	f7fd fc43 	bl	b42e2 <_ZN5Print6printfEPKcz>
   b6a5c:	4637      	mov	r7, r6
   b6a5e:	e7e4      	b.n	b6a2a <_Z10updateMenuv+0x16a>
        if(menuItem == 0){
   b6a60:	4f3a      	ldr	r7, [pc, #232]	; (b6b4c <_Z10updateMenuv+0x28c>)
   b6a62:	f897 8000 	ldrb.w	r8, [r7]
   b6a66:	f1b8 0f00 	cmp.w	r8, #0
   b6a6a:	f040 8081 	bne.w	b6b70 <_Z10updateMenuv+0x2b0>
   b6a6e:	4f38      	ldr	r7, [pc, #224]	; (b6b50 <_Z10updateMenuv+0x290>)
            Serial.println("Menu item 0");
   b6a70:	f006 fdc8 	bl	bd604 <_Z16_fetch_usbserialv>
   b6a74:	4937      	ldr	r1, [pc, #220]	; (b6b54 <_Z10updateMenuv+0x294>)
   b6a76:	f006 f9d0 	bl	bce1a <_ZN5Print7printlnEPKc>
            if(MenuItems.size() != 0) printMenuItem(0,true,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6a7a:	e9d7 3200 	ldrd	r3, r2, [r7]
   b6a7e:	429a      	cmp	r2, r3
   b6a80:	d01b      	beq.n	b6aba <_Z10updateMenuv+0x1fa>
   b6a82:	4631      	mov	r1, r6
   b6a84:	4834      	ldr	r0, [pc, #208]	; (b6b58 <_Z10updateMenuv+0x298>)
   b6a86:	f7fe faa1 	bl	b4fcc <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6a8a:	4b34      	ldr	r3, [pc, #208]	; (b6b5c <_Z10updateMenuv+0x29c>)
   b6a8c:	4604      	mov	r4, r0
   b6a8e:	f893 c000 	ldrb.w	ip, [r3]
   b6a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6a94:	ad01      	add	r5, sp, #4
   b6a96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6a98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6a9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6a9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6a9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6aa0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   b6aa4:	2310      	movs	r3, #16
   b6aa6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   b6aaa:	9300      	str	r3, [sp, #0]
   b6aac:	f08c 0201 	eor.w	r2, ip, #1
   b6ab0:	4643      	mov	r3, r8
   b6ab2:	2101      	movs	r1, #1
   b6ab4:	4640      	mov	r0, r8
   b6ab6:	f7ff fcb9 	bl	b642c <_Z13printMenuItemhbbtt8WaterBot>
   b6aba:	e9d7 3500 	ldrd	r3, r5, [r7]
   b6abe:	1aed      	subs	r5, r5, r3
   b6ac0:	4b27      	ldr	r3, [pc, #156]	; (b6b60 <_Z10updateMenuv+0x2a0>)
                Serial.printlnf("Menu item %d", mi);
   b6ac2:	f8df a0a0 	ldr.w	sl, [pc, #160]	; b6b64 <_Z10updateMenuv+0x2a4>
                printMenuItem(mi,false,!selectingBots,0,16+(16*mi),WaterBots.at(menuSelect));
   b6ac6:	f8df 9090 	ldr.w	r9, [pc, #144]	; b6b58 <_Z10updateMenuv+0x298>
   b6aca:	10ad      	asrs	r5, r5, #2
   b6acc:	435d      	muls	r5, r3
            uint8_t loopIter = MenuItems.size();
   b6ace:	b2ed      	uxtb	r5, r5
            if(loopIter > 2) loopIter = 2;
   b6ad0:	2d02      	cmp	r5, #2
   b6ad2:	bf28      	it	cs
   b6ad4:	2502      	movcs	r5, #2
            for(int mi = 1; mi <= loopIter; mi++){
   b6ad6:	2701      	movs	r7, #1
   b6ad8:	42bd      	cmp	r5, r7
   b6ada:	f2c0 80c0 	blt.w	b6c5e <_Z10updateMenuv+0x39e>
                Serial.printlnf("Menu item %d", mi);
   b6ade:	f006 fd91 	bl	bd604 <_Z16_fetch_usbserialv>
   b6ae2:	463a      	mov	r2, r7
   b6ae4:	4651      	mov	r1, sl
   b6ae6:	f7fd fc35 	bl	b4354 <_ZN5Print8printlnfEPKcz>
                printMenuItem(mi,false,!selectingBots,0,16+(16*mi),WaterBots.at(menuSelect));
   b6aea:	4631      	mov	r1, r6
   b6aec:	4648      	mov	r0, r9
   b6aee:	f7fe fa6d 	bl	b4fcc <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6af2:	4b1a      	ldr	r3, [pc, #104]	; (b6b5c <_Z10updateMenuv+0x29c>)
   b6af4:	4604      	mov	r4, r0
   b6af6:	f893 e000 	ldrb.w	lr, [r3]
   b6afa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6afc:	f10d 0c04 	add.w	ip, sp, #4
   b6b00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6b06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6b0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6b10:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   b6b14:	fa5f f887 	uxtb.w	r8, r7
   b6b18:	3701      	adds	r7, #1
   b6b1a:	013b      	lsls	r3, r7, #4
   b6b1c:	b29b      	uxth	r3, r3
   b6b1e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
   b6b22:	9300      	str	r3, [sp, #0]
   b6b24:	2300      	movs	r3, #0
   b6b26:	f08e 0201 	eor.w	r2, lr, #1
   b6b2a:	4619      	mov	r1, r3
   b6b2c:	4640      	mov	r0, r8
   b6b2e:	f7ff fc7d 	bl	b642c <_Z13printMenuItemhbbtt8WaterBot>
            for(int mi = 1; mi <= loopIter; mi++){
   b6b32:	e7d1      	b.n	b6ad8 <_Z10updateMenuv+0x218>
   b6b34:	2003de68 	.word	0x2003de68
   b6b38:	2003dcac 	.word	0x2003dcac
   b6b3c:	002d0030 	.word	0x002d0030
   b6b40:	000c0e6c 	.word	0x000c0e6c
   b6b44:	2003dd61 	.word	0x2003dd61
   b6b48:	000c0a1b 	.word	0x000c0a1b
   b6b4c:	2003de11 	.word	0x2003de11
   b6b50:	2003dc94 	.word	0x2003dc94
   b6b54:	000c0e6f 	.word	0x000c0e6f
   b6b58:	2003dcc8 	.word	0x2003dcc8
   b6b5c:	2003da91 	.word	0x2003da91
   b6b60:	38e38e39 	.word	0x38e38e39
   b6b64:	000c0e7b 	.word	0x000c0e7b
   b6b68:	2003da90 	.word	0x2003da90
   b6b6c:	eeeeeeef 	.word	0xeeeeeeef
        else if(menuItem == MAX_MENU_ITEMS-1){
   b6b70:	f1b8 0f04 	cmp.w	r8, #4
   b6b74:	f8df 81bc 	ldr.w	r8, [pc, #444]	; b6d34 <_Z10updateMenuv+0x474>
   b6b78:	d178      	bne.n	b6c6c <_Z10updateMenuv+0x3ac>
            Serial.printlnf("Menu item %d", menuItem);
   b6b7a:	f006 fd43 	bl	bd604 <_Z16_fetch_usbserialv>
   b6b7e:	783a      	ldrb	r2, [r7, #0]
   b6b80:	4969      	ldr	r1, [pc, #420]	; (b6d28 <_Z10updateMenuv+0x468>)
   b6b82:	f7fd fbe7 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem,true,!selectingBots,0,48,WaterBots.at(menuSelect));
   b6b86:	4631      	mov	r1, r6
   b6b88:	4868      	ldr	r0, [pc, #416]	; (b6d2c <_Z10updateMenuv+0x46c>)
   b6b8a:	f897 9000 	ldrb.w	r9, [r7]
   b6b8e:	f7fe fa1d 	bl	b4fcc <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6b92:	4605      	mov	r5, r0
   b6b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6b96:	ac01      	add	r4, sp, #4
   b6b98:	f898 c000 	ldrb.w	ip, [r8]
   b6b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ba2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6ba4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ba6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b6baa:	2330      	movs	r3, #48	; 0x30
   b6bac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b6bb0:	f08c 0201 	eor.w	r2, ip, #1
   b6bb4:	2101      	movs	r1, #1
   b6bb6:	4648      	mov	r0, r9
   b6bb8:	9300      	str	r3, [sp, #0]
   b6bba:	2300      	movs	r3, #0
   b6bbc:	f7ff fc36 	bl	b642c <_Z13printMenuItemhbbtt8WaterBot>
            Serial.printlnf("Menu item %d", menuItem-1);
   b6bc0:	f006 fd20 	bl	bd604 <_Z16_fetch_usbserialv>
   b6bc4:	783a      	ldrb	r2, [r7, #0]
   b6bc6:	4958      	ldr	r1, [pc, #352]	; (b6d28 <_Z10updateMenuv+0x468>)
   b6bc8:	3a01      	subs	r2, #1
   b6bca:	f7fd fbc3 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem-1,false,!selectingBots,0,32,WaterBots.at(menuSelect));
   b6bce:	4631      	mov	r1, r6
   b6bd0:	4856      	ldr	r0, [pc, #344]	; (b6d2c <_Z10updateMenuv+0x46c>)
   b6bd2:	f7fe f9fb 	bl	b4fcc <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6bd6:	4605      	mov	r5, r0
   b6bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6bda:	f10d 0c04 	add.w	ip, sp, #4
   b6bde:	f897 e000 	ldrb.w	lr, [r7]
   b6be2:	f898 9000 	ldrb.w	r9, [r8]
   b6be6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6bea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6bec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6bf2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6bf6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b6bfa:	2320      	movs	r3, #32
   b6bfc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b6c00:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   b6c04:	9300      	str	r3, [sp, #0]
   b6c06:	2300      	movs	r3, #0
   b6c08:	4619      	mov	r1, r3
   b6c0a:	fa5f f08e 	uxtb.w	r0, lr
   b6c0e:	f089 0201 	eor.w	r2, r9, #1
   b6c12:	f7ff fc0b 	bl	b642c <_Z13printMenuItemhbbtt8WaterBot>
            Serial.printlnf("Menu item %d", menuItem-2);
   b6c16:	f006 fcf5 	bl	bd604 <_Z16_fetch_usbserialv>
   b6c1a:	783a      	ldrb	r2, [r7, #0]
   b6c1c:	4942      	ldr	r1, [pc, #264]	; (b6d28 <_Z10updateMenuv+0x468>)
   b6c1e:	3a02      	subs	r2, #2
   b6c20:	f7fd fb98 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem-2,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6c24:	4841      	ldr	r0, [pc, #260]	; (b6d2c <_Z10updateMenuv+0x46c>)
   b6c26:	4631      	mov	r1, r6
   b6c28:	f7fe f9d0 	bl	b4fcc <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6c2c:	783f      	ldrb	r7, [r7, #0]
   b6c2e:	f898 c000 	ldrb.w	ip, [r8]
   b6c32:	3f02      	subs	r7, #2
            printMenuItem(menuItem-1,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6c34:	4605      	mov	r5, r0
   b6c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c38:	ae01      	add	r6, sp, #4
   b6c3a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c3e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c42:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6c44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b6c48:	2310      	movs	r3, #16
   b6c4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b6c4e:	9300      	str	r3, [sp, #0]
   b6c50:	2300      	movs	r3, #0
   b6c52:	f08c 0201 	eor.w	r2, ip, #1
   b6c56:	4619      	mov	r1, r3
   b6c58:	b2f8      	uxtb	r0, r7
   b6c5a:	f7ff fbe7 	bl	b642c <_Z13printMenuItemhbbtt8WaterBot>
        oled.display();
   b6c5e:	4834      	ldr	r0, [pc, #208]	; (b6d30 <_Z10updateMenuv+0x470>)
   b6c60:	f002 fc18 	bl	b9494 <_ZN15Adafruit_SH110X7displayEv>
        redrawMenu = false;
   b6c64:	2300      	movs	r3, #0
   b6c66:	f88b 3000 	strb.w	r3, [fp]
   b6c6a:	e6a0      	b.n	b69ae <_Z10updateMenuv+0xee>
            Serial.printlnf("Menu item %d", menuItem+1);
   b6c6c:	f006 fcca 	bl	bd604 <_Z16_fetch_usbserialv>
   b6c70:	783a      	ldrb	r2, [r7, #0]
   b6c72:	492d      	ldr	r1, [pc, #180]	; (b6d28 <_Z10updateMenuv+0x468>)
   b6c74:	3201      	adds	r2, #1
   b6c76:	f7fd fb6d 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem+1,false,!selectingBots,0,48,WaterBots.at(menuSelect));
   b6c7a:	4631      	mov	r1, r6
   b6c7c:	482b      	ldr	r0, [pc, #172]	; (b6d2c <_Z10updateMenuv+0x46c>)
   b6c7e:	f7fe f9a5 	bl	b4fcc <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6c82:	4605      	mov	r5, r0
   b6c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c86:	ac01      	add	r4, sp, #4
   b6c88:	f898 e000 	ldrb.w	lr, [r8]
   b6c8c:	f897 c000 	ldrb.w	ip, [r7]
   b6c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b6c9e:	2330      	movs	r3, #48	; 0x30
   b6ca0:	f10c 0c01 	add.w	ip, ip, #1
   b6ca4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b6ca8:	9300      	str	r3, [sp, #0]
   b6caa:	2300      	movs	r3, #0
   b6cac:	f08e 0201 	eor.w	r2, lr, #1
   b6cb0:	4619      	mov	r1, r3
   b6cb2:	fa5f f08c 	uxtb.w	r0, ip
   b6cb6:	f7ff fbb9 	bl	b642c <_Z13printMenuItemhbbtt8WaterBot>
            Serial.printlnf("Menu item %d", menuItem);
   b6cba:	f006 fca3 	bl	bd604 <_Z16_fetch_usbserialv>
   b6cbe:	783a      	ldrb	r2, [r7, #0]
   b6cc0:	4919      	ldr	r1, [pc, #100]	; (b6d28 <_Z10updateMenuv+0x468>)
   b6cc2:	f7fd fb47 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem,true,!selectingBots,0,32,WaterBots.at(menuSelect));
   b6cc6:	4631      	mov	r1, r6
   b6cc8:	4818      	ldr	r0, [pc, #96]	; (b6d2c <_Z10updateMenuv+0x46c>)
   b6cca:	f897 9000 	ldrb.w	r9, [r7]
   b6cce:	f7fe f97d 	bl	b4fcc <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6cd2:	4605      	mov	r5, r0
   b6cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6cd6:	f10d 0c04 	add.w	ip, sp, #4
   b6cda:	f898 e000 	ldrb.w	lr, [r8]
   b6cde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6ce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6ce4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6cea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6cee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b6cf2:	2320      	movs	r3, #32
   b6cf4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b6cf8:	f08e 0201 	eor.w	r2, lr, #1
   b6cfc:	2101      	movs	r1, #1
   b6cfe:	9300      	str	r3, [sp, #0]
   b6d00:	4648      	mov	r0, r9
   b6d02:	2300      	movs	r3, #0
   b6d04:	f7ff fb92 	bl	b642c <_Z13printMenuItemhbbtt8WaterBot>
            Serial.printlnf("Menu item %d", menuItem-1);
   b6d08:	f006 fc7c 	bl	bd604 <_Z16_fetch_usbserialv>
   b6d0c:	783a      	ldrb	r2, [r7, #0]
   b6d0e:	4906      	ldr	r1, [pc, #24]	; (b6d28 <_Z10updateMenuv+0x468>)
   b6d10:	3a01      	subs	r2, #1
   b6d12:	f7fd fb1f 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            printMenuItem(menuItem-1,false,!selectingBots,0,16,WaterBots.at(menuSelect));
   b6d16:	4805      	ldr	r0, [pc, #20]	; (b6d2c <_Z10updateMenuv+0x46c>)
   b6d18:	4631      	mov	r1, r6
   b6d1a:	f7fe f957 	bl	b4fcc <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b6d1e:	783f      	ldrb	r7, [r7, #0]
   b6d20:	f898 c000 	ldrb.w	ip, [r8]
   b6d24:	3f01      	subs	r7, #1
   b6d26:	e785      	b.n	b6c34 <_Z10updateMenuv+0x374>
   b6d28:	000c0e7b 	.word	0x000c0e7b
   b6d2c:	2003dcc8 	.word	0x2003dcc8
   b6d30:	2003de68 	.word	0x2003de68
   b6d34:	2003da91 	.word	0x2003da91

000b6d38 <loop>:
void loop() {
   b6d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(postStatus){
   b6d3c:	4e2e      	ldr	r6, [pc, #184]	; (b6df8 <loop+0xc0>)
   b6d3e:	4c2f      	ldr	r4, [pc, #188]	; (b6dfc <loop+0xc4>)
   b6d40:	7833      	ldrb	r3, [r6, #0]
void loop() {
   b6d42:	b08a      	sub	sp, #40	; 0x28
    if(postStatus){
   b6d44:	b19b      	cbz	r3, b6d6e <loop+0x36>
        if(ControlledBot != NULL) sprintf(statusStr,"CCABspcB%1d",ControlledBot->botNum);
   b6d46:	6823      	ldr	r3, [r4, #0]
   b6d48:	2b00      	cmp	r3, #0
   b6d4a:	d034      	beq.n	b6db6 <loop+0x7e>
   b6d4c:	789a      	ldrb	r2, [r3, #2]
   b6d4e:	492c      	ldr	r1, [pc, #176]	; (b6e00 <loop+0xc8>)
   b6d50:	a802      	add	r0, sp, #8
   b6d52:	f003 f80b 	bl	b9d6c <sprintf>
        sendData(statusStr,0,true,true,statusTimeout);                                  
   b6d56:	4d2b      	ldr	r5, [pc, #172]	; (b6e04 <loop+0xcc>)
   b6d58:	782b      	ldrb	r3, [r5, #0]
   b6d5a:	9300      	str	r3, [sp, #0]
   b6d5c:	2301      	movs	r3, #1
   b6d5e:	461a      	mov	r2, r3
   b6d60:	2100      	movs	r1, #0
   b6d62:	a802      	add	r0, sp, #8
   b6d64:	f7fd ff26 	bl	b4bb4 <_Z8sendDataPKchbbb>
        postStatus = false;
   b6d68:	2300      	movs	r3, #0
   b6d6a:	7033      	strb	r3, [r6, #0]
        statusTimeout = false;
   b6d6c:	702b      	strb	r3, [r5, #0]
    updateMenu();
   b6d6e:	f7ff fda7 	bl	b68c0 <_Z10updateMenuv>
    updateBotControl();
   b6d72:	f7fe f93f 	bl	b4ff4 <_Z16updateBotControlv>
    if(ControlledBot != nullptr) manualMotorControl(ControlledBot->botNum);
   b6d76:	6823      	ldr	r3, [r4, #0]
   b6d78:	b113      	cbz	r3, b6d80 <loop+0x48>
   b6d7a:	7898      	ldrb	r0, [r3, #2]
   b6d7c:	f7fd ff88 	bl	b4c90 <_Z18manualMotorControlh>
    if (BLE.connected()) {
   b6d80:	f003 fd5e 	bl	ba840 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6d84:	f003 fe09 	bl	ba99a <_ZNK8particle14BleLocalDevice9connectedEv>
   b6d88:	b330      	cbz	r0, b6dd8 <loop+0xa0>
      : _M_current(__i) { }
   b6d8a:	4b1f      	ldr	r3, [pc, #124]	; (b6e08 <loop+0xd0>)
        for(WaterBot ws: WaterBots) Serial.printlnf("Temp: %0.6f",ws.temp);
   b6d8c:	4e1f      	ldr	r6, [pc, #124]	; (b6e0c <loop+0xd4>)
   b6d8e:	e9d3 4700 	ldrd	r4, r7, [r3]
   b6d92:	42a7      	cmp	r7, r4
   b6d94:	d014      	beq.n	b6dc0 <loop+0x88>
   b6d96:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
   b6d9a:	f006 fc33 	bl	bd604 <_Z16_fetch_usbserialv>
   b6d9e:	4605      	mov	r5, r0
   b6da0:	4640      	mov	r0, r8
   b6da2:	f007 f91d 	bl	bdfe0 <__aeabi_f2d>
   b6da6:	4602      	mov	r2, r0
   b6da8:	460b      	mov	r3, r1
   b6daa:	4628      	mov	r0, r5
   b6dac:	4631      	mov	r1, r6
   b6dae:	f7fd fad1 	bl	b4354 <_ZN5Print8printlnfEPKcz>
      operator++() _GLIBCXX_NOEXCEPT
   b6db2:	343c      	adds	r4, #60	; 0x3c
	return *this;
   b6db4:	e7ed      	b.n	b6d92 <loop+0x5a>
        else sprintf(statusStr,"CCABspcNB");
   b6db6:	4916      	ldr	r1, [pc, #88]	; (b6e10 <loop+0xd8>)
   b6db8:	a802      	add	r0, sp, #8
   b6dba:	f007 fd64 	bl	be886 <strcpy>
   b6dbe:	e7ca      	b.n	b6d56 <loop+0x1e>
        delay(250);
   b6dc0:	20fa      	movs	r0, #250	; 0xfa
   b6dc2:	f003 f823 	bl	b9e0c <delay>
    XBeeHandler();
   b6dc6:	f7fe fe23 	bl	b5a10 <_Z11XBeeHandlerv>
    RPiHandler();
   b6dca:	f7fd fe7d 	bl	b4ac8 <_Z10RPiHandlerv>
}
   b6dce:	b00a      	add	sp, #40	; 0x28
   b6dd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    XBeeLTEPairSet();
   b6dd4:	f7fe b854 	b.w	b4e80 <_Z14XBeeLTEPairSetv>
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   b6dd8:	4c0e      	ldr	r4, [pc, #56]	; (b6e14 <loop+0xdc>)
   b6dda:	f002 fd3b 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
   b6dde:	6823      	ldr	r3, [r4, #0]
   b6de0:	1ac0      	subs	r0, r0, r3
   b6de2:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b6de6:	d3ee      	bcc.n	b6dc6 <loop+0x8e>
   b6de8:	f002 fd34 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
    		lastScan = millis();
   b6dec:	6020      	str	r0, [r4, #0]
    		BLEScan(-1);
   b6dee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6df2:	f7fe ff1f 	bl	b5c34 <_Z7BLEScani>
   b6df6:	e7e6      	b.n	b6dc6 <loop+0x8e>
   b6df8:	2003dee0 	.word	0x2003dee0
   b6dfc:	2003dc8c 	.word	0x2003dc8c
   b6e00:	000c0e88 	.word	0x000c0e88
   b6e04:	2003e639 	.word	0x2003e639
   b6e08:	2003dcc8 	.word	0x2003dcc8
   b6e0c:	000c0e9e 	.word	0x000c0e9e
   b6e10:	000c0e94 	.word	0x000c0e94
   b6e14:	2003dda4 	.word	0x2003dda4

000b6e18 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b6e18:	b538      	push	{r3, r4, r5, lr}
   b6e1a:	4604      	mov	r4, r0
   b6e1c:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b6e1e:	2224      	movs	r2, #36	; 0x24
   b6e20:	2100      	movs	r1, #0
   b6e22:	f007 fca2 	bl	be76a <memset>

  m_vol = vol;
   b6e26:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b6e28:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b6e2a:	2b10      	cmp	r3, #16
   b6e2c:	d003      	beq.n	b6e36 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b6e2e:	2b20      	cmp	r3, #32
   b6e30:	d006      	beq.n	b6e40 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b6e32:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b6e34:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b6e36:	2320      	movs	r3, #32
  m_flags = F_READ;
   b6e38:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b6e3a:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6e3c:	70a0      	strb	r0, [r4, #2]
  return true;
   b6e3e:	e7f9      	b.n	b6e34 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b6e40:	2340      	movs	r3, #64	; 0x40
   b6e42:	e7f9      	b.n	b6e38 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b6e44 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b6e44:	b510      	push	{r4, lr}
   b6e46:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b6e48:	3024      	adds	r0, #36	; 0x24
   b6e4a:	f000 feeb 	bl	b7c24 <_ZN8FatCache4syncEv>
   b6e4e:	b128      	cbz	r0, b6e5c <_ZN9FatVolume9cacheSyncEv+0x18>
   b6e50:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b6e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b6e58:	f000 bee4 	b.w	b7c24 <_ZN8FatCache4syncEv>
  }
   b6e5c:	bd10      	pop	{r4, pc}

000b6e5e <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b6e5e:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6e60:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b6e62:	f043 0304 	orr.w	r3, r3, #4
   b6e66:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6e68:	f100 0210 	add.w	r2, r0, #16
   b6e6c:	6880      	ldr	r0, [r0, #8]
   b6e6e:	f000 bf8f 	b.w	b7d90 <_ZN9FatVolume15allocateClusterEmPm>
	...

000b6e74 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b6e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b6e78:	7801      	ldrb	r1, [r0, #0]
   b6e7a:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b6e7e:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b6e80:	d003      	beq.n	b6e8a <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b6e82:	2600      	movs	r6, #0
}
   b6e84:	4630      	mov	r0, r6
   b6e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b6e8a:	6942      	ldr	r2, [r0, #20]
   b6e8c:	4b17      	ldr	r3, [pc, #92]	; (b6eec <_ZN7FatFile13addDirClusterEv+0x78>)
   b6e8e:	429a      	cmp	r2, r3
   b6e90:	d2f7      	bcs.n	b6e82 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b6e92:	f7ff ffe4 	bl	b6e5e <_ZN7FatFile10addClusterEv>
   b6e96:	4606      	mov	r6, r0
   b6e98:	2800      	cmp	r0, #0
   b6e9a:	d0f2      	beq.n	b6e82 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b6e9c:	6921      	ldr	r1, [r4, #16]
   b6e9e:	68a0      	ldr	r0, [r4, #8]
   b6ea0:	f000 ff0b 	bl	b7cba <_ZNK9FatVolume17clusterFirstBlockEm>
   b6ea4:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b6ea6:	68a0      	ldr	r0, [r4, #8]
   b6ea8:	2205      	movs	r2, #5
   b6eaa:	4639      	mov	r1, r7
   b6eac:	3024      	adds	r0, #36	; 0x24
   b6eae:	f000 fee1 	bl	b7c74 <_ZN8FatCache4readEmh>
  if (!pc) {
   b6eb2:	4680      	mov	r8, r0
   b6eb4:	2800      	cmp	r0, #0
   b6eb6:	d0e4      	beq.n	b6e82 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b6eb8:	4629      	mov	r1, r5
   b6eba:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6ebe:	f007 fc54 	bl	be76a <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b6ec2:	2501      	movs	r5, #1
   b6ec4:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b6ec6:	791a      	ldrb	r2, [r3, #4]
   b6ec8:	42aa      	cmp	r2, r5
   b6eca:	d909      	bls.n	b6ee0 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b6ecc:	6818      	ldr	r0, [r3, #0]
   b6ece:	4642      	mov	r2, r8
   b6ed0:	19e9      	adds	r1, r5, r7
   b6ed2:	f001 fa3c 	bl	b834e <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b6ed6:	2800      	cmp	r0, #0
   b6ed8:	d0d3      	beq.n	b6e82 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b6eda:	3501      	adds	r5, #1
   b6edc:	b2ed      	uxtb	r5, r5
   b6ede:	e7f1      	b.n	b6ec4 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b6ee0:	6963      	ldr	r3, [r4, #20]
   b6ee2:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b6ee6:	6163      	str	r3, [r4, #20]
  return true;
   b6ee8:	e7cc      	b.n	b6e84 <_ZN7FatFile13addDirClusterEv+0x10>
   b6eea:	bf00      	nop
   b6eec:	001ffe00 	.word	0x001ffe00

000b6ef0 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b6ef0:	b510      	push	{r4, lr}
   b6ef2:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b6ef4:	6880      	ldr	r0, [r0, #8]
   b6ef6:	460a      	mov	r2, r1
   b6ef8:	3024      	adds	r0, #36	; 0x24
   b6efa:	69a1      	ldr	r1, [r4, #24]
   b6efc:	f000 feba 	bl	b7c74 <_ZN8FatCache4readEmh>
  if (!pc) {
   b6f00:	b120      	cbz	r0, b6f0c <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b6f02:	88a3      	ldrh	r3, [r4, #4]
   b6f04:	f003 030f 	and.w	r3, r3, #15
   b6f08:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b6f0c:	bd10      	pop	{r4, pc}

000b6f0e <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b6f0e:	7803      	ldrb	r3, [r0, #0]
   b6f10:	b90b      	cbnz	r3, b6f16 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b6f12:	f7ff bf81 	b.w	b6e18 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b6f16:	2000      	movs	r0, #0
   b6f18:	4770      	bx	lr

000b6f1a <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b6f1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b6f1e:	7803      	ldrb	r3, [r0, #0]
   b6f20:	4604      	mov	r4, r0
   b6f22:	4688      	mov	r8, r1
   b6f24:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b6f26:	2b00      	cmp	r3, #0
   b6f28:	d05d      	beq.n	b6fe6 <_ZN7FatFile4readEPvj+0xcc>
   b6f2a:	7882      	ldrb	r2, [r0, #2]
   b6f2c:	07d1      	lsls	r1, r2, #31
   b6f2e:	d55a      	bpl.n	b6fe6 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b6f30:	071a      	lsls	r2, r3, #28
   b6f32:	d52d      	bpl.n	b6f90 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b6f34:	69c3      	ldr	r3, [r0, #28]
   b6f36:	6942      	ldr	r2, [r0, #20]
   b6f38:	1a9b      	subs	r3, r3, r2
   b6f3a:	429d      	cmp	r5, r3
   b6f3c:	bf28      	it	cs
   b6f3e:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b6f40:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b6f42:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6f46:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b6f4a:	2e00      	cmp	r6, #0
   b6f4c:	f000 808f 	beq.w	b706e <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b6f50:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b6f52:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6f54:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b6f56:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b6f58:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6f5c:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b6f60:	d51f      	bpl.n	b6fa2 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6f62:	6a00      	ldr	r0, [r0, #32]
   b6f64:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b6f66:	68a0      	ldr	r0, [r4, #8]
   b6f68:	f1ba 0f00 	cmp.w	sl, #0
   b6f6c:	d142      	bne.n	b6ff4 <_ZN7FatFile4readEPvj+0xda>
   b6f6e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6f72:	d33f      	bcc.n	b6ff4 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b6f74:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6f76:	4299      	cmp	r1, r3
   b6f78:	d03c      	beq.n	b6ff4 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b6f7a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b6f7e:	d252      	bcs.n	b7026 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b6f80:	6800      	ldr	r0, [r0, #0]
   b6f82:	4642      	mov	r2, r8
   b6f84:	f001 f95a 	bl	b823c <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b6f88:	b368      	cbz	r0, b6fe6 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b6f8a:	f44f 7700 	mov.w	r7, #512	; 0x200
   b6f8e:	e044      	b.n	b701a <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b6f90:	069b      	lsls	r3, r3, #26
   b6f92:	d5d5      	bpl.n	b6f40 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b6f94:	6883      	ldr	r3, [r0, #8]
   b6f96:	891a      	ldrh	r2, [r3, #8]
   b6f98:	6943      	ldr	r3, [r0, #20]
   b6f9a:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b6f9e:	b29b      	uxth	r3, r3
   b6fa0:	e7cb      	b.n	b6f3a <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b6fa2:	f890 9005 	ldrb.w	r9, [r0, #5]
   b6fa6:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b6faa:	f1ba 0f00 	cmp.w	sl, #0
   b6fae:	d108      	bne.n	b6fc2 <_ZN7FatFile4readEPvj+0xa8>
   b6fb0:	f1b9 0f00 	cmp.w	r9, #0
   b6fb4:	d105      	bne.n	b6fc2 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b6fb6:	b95b      	cbnz	r3, b6fd0 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6fb8:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b6fba:	bf4c      	ite	mi
   b6fbc:	6a03      	ldrmi	r3, [r0, #32]
   b6fbe:	6a23      	ldrpl	r3, [r4, #32]
   b6fc0:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6fc2:	6921      	ldr	r1, [r4, #16]
   b6fc4:	68a0      	ldr	r0, [r4, #8]
   b6fc6:	f000 fe78 	bl	b7cba <_ZNK9FatVolume17clusterFirstBlockEm>
   b6fca:	eb09 0100 	add.w	r1, r9, r0
   b6fce:	e7ca      	b.n	b6f66 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6fd0:	6921      	ldr	r1, [r4, #16]
   b6fd2:	465a      	mov	r2, fp
   b6fd4:	f000 fe77 	bl	b7cc6 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b6fd8:	2800      	cmp	r0, #0
   b6fda:	db04      	blt.n	b6fe6 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b6fdc:	d1f1      	bne.n	b6fc2 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b6fde:	7823      	ldrb	r3, [r4, #0]
   b6fe0:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6fe4:	d143      	bne.n	b706e <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b6fe6:	7863      	ldrb	r3, [r4, #1]
   b6fe8:	f043 0302 	orr.w	r3, r3, #2
   b6fec:	7063      	strb	r3, [r4, #1]
  return -1;
   b6fee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6ff2:	e03d      	b.n	b7070 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b6ff4:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b6ff8:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b6ffa:	f04f 0200 	mov.w	r2, #0
   b6ffe:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b7002:	bf28      	it	cs
   b7004:	4637      	movcs	r7, r6
   b7006:	f000 fe35 	bl	b7c74 <_ZN8FatCache4readEmh>
      if (!pc) {
   b700a:	2800      	cmp	r0, #0
   b700c:	d0eb      	beq.n	b6fe6 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b700e:	eb00 010a 	add.w	r1, r0, sl
   b7012:	463a      	mov	r2, r7
   b7014:	4640      	mov	r0, r8
   b7016:	f007 fb80 	bl	be71a <memcpy>
    m_curPosition += n;
   b701a:	6963      	ldr	r3, [r4, #20]
   b701c:	443b      	add	r3, r7
    dst += n;
   b701e:	44b8      	add	r8, r7
    m_curPosition += n;
   b7020:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b7022:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b7024:	e791      	b.n	b6f4a <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b7026:	7822      	ldrb	r2, [r4, #0]
   b7028:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b702a:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b702e:	d406      	bmi.n	b703e <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b7030:	7902      	ldrb	r2, [r0, #4]
   b7032:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b7036:	b2d2      	uxtb	r2, r2
   b7038:	4592      	cmp	sl, r2
   b703a:	bf28      	it	cs
   b703c:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b703e:	4299      	cmp	r1, r3
      n = 512*nb;
   b7040:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7044:	d208      	bcs.n	b7058 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b7046:	68a0      	ldr	r0, [r4, #8]
   b7048:	4653      	mov	r3, sl
   b704a:	6800      	ldr	r0, [r0, #0]
   b704c:	4642      	mov	r2, r8
   b704e:	f001 f93d 	bl	b82cc <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b7052:	2800      	cmp	r0, #0
   b7054:	d1e1      	bne.n	b701a <_ZN7FatFile4readEPvj+0x100>
   b7056:	e7c6      	b.n	b6fe6 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7058:	4453      	add	r3, sl
   b705a:	428b      	cmp	r3, r1
   b705c:	d9f3      	bls.n	b7046 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b705e:	3024      	adds	r0, #36	; 0x24
   b7060:	9101      	str	r1, [sp, #4]
   b7062:	f000 fddf 	bl	b7c24 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b7066:	9901      	ldr	r1, [sp, #4]
   b7068:	2800      	cmp	r0, #0
   b706a:	d1ec      	bne.n	b7046 <_ZN7FatFile4readEPvj+0x12c>
   b706c:	e7bb      	b.n	b6fe6 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b706e:	1ba8      	subs	r0, r5, r6
}
   b7070:	b003      	add	sp, #12
   b7072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7076 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b7076:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b7078:	2201      	movs	r2, #1
   b707a:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b707e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b7082:	4604      	mov	r4, r0
   b7084:	f7ff ff49 	bl	b6f1a <_ZN7FatFile4readEPvj>
   b7088:	2801      	cmp	r0, #1
   b708a:	bf0a      	itet	eq
   b708c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b7090:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b7094:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b7098:	b002      	add	sp, #8
   b709a:	bd70      	pop	{r4, r5, r6, pc}

000b709c <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b709c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b709e:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b70a0:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b70a4:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b70a6:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b70aa:	d000      	beq.n	b70ae <_ZN7FatFile12readDirCacheEb+0x12>
   b70ac:	b999      	cbnz	r1, b70d6 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b70ae:	2201      	movs	r2, #1
   b70b0:	f10d 0107 	add.w	r1, sp, #7
   b70b4:	4620      	mov	r0, r4
   b70b6:	f7ff ff30 	bl	b6f1a <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b70ba:	b240      	sxtb	r0, r0
   b70bc:	2801      	cmp	r0, #1
   b70be:	d002      	beq.n	b70c6 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b70c0:	2000      	movs	r0, #0
}
   b70c2:	b003      	add	sp, #12
   b70c4:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b70c6:	6963      	ldr	r3, [r4, #20]
   b70c8:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b70ca:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b70cc:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b70ce:	3030      	adds	r0, #48	; 0x30
   b70d0:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b70d4:	e7f5      	b.n	b70c2 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b70d6:	3320      	adds	r3, #32
   b70d8:	e7f7      	b.n	b70ca <_ZN7FatFile12readDirCacheEb+0x2e>

000b70da <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b70da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b70de:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b70e0:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b70e2:	4604      	mov	r4, r0
   b70e4:	460d      	mov	r5, r1
  if (!isOpen()) {
   b70e6:	b162      	cbz	r2, b7102 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b70e8:	6940      	ldr	r0, [r0, #20]
   b70ea:	4288      	cmp	r0, r1
   b70ec:	d002      	beq.n	b70f4 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b70ee:	b919      	cbnz	r1, b70f8 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b70f0:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b70f2:	6165      	str	r5, [r4, #20]
    return true;
   b70f4:	2001      	movs	r0, #1
   b70f6:	e006      	b.n	b7106 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b70f8:	0716      	lsls	r6, r2, #28
   b70fa:	d506      	bpl.n	b710a <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b70fc:	69e3      	ldr	r3, [r4, #28]
   b70fe:	428b      	cmp	r3, r1
   b7100:	d20b      	bcs.n	b711a <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b7102:	6127      	str	r7, [r4, #16]
  return false;
   b7104:	2000      	movs	r0, #0
}
   b7106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b710a:	0691      	lsls	r1, r2, #26
   b710c:	d505      	bpl.n	b711a <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b710e:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b7110:	891b      	ldrh	r3, [r3, #8]
   b7112:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b7116:	d9ec      	bls.n	b70f2 <_ZN7FatFile7seekSetEm+0x18>
   b7118:	e7f3      	b.n	b7102 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b711a:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b711e:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b7122:	1e43      	subs	r3, r0, #1
   b7124:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b7128:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b712a:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b712c:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b712e:	42b3      	cmp	r3, r6
   b7130:	d800      	bhi.n	b7134 <_ZN7FatFile7seekSetEm+0x5a>
   b7132:	b998      	cbnz	r0, b715c <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b7134:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b7136:	bf4c      	ite	mi
   b7138:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b713c:	6a23      	ldrpl	r3, [r4, #32]
   b713e:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b7140:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b7144:	2e00      	cmp	r6, #0
   b7146:	d0d4      	beq.n	b70f2 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b7148:	6921      	ldr	r1, [r4, #16]
   b714a:	68a0      	ldr	r0, [r4, #8]
   b714c:	4642      	mov	r2, r8
   b714e:	f000 fdba 	bl	b7cc6 <_ZN9FatVolume6fatGetEmPm>
   b7152:	2800      	cmp	r0, #0
   b7154:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b7158:	dcf4      	bgt.n	b7144 <_ZN7FatFile7seekSetEm+0x6a>
   b715a:	e7d2      	b.n	b7102 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b715c:	1af6      	subs	r6, r6, r3
   b715e:	e7ef      	b.n	b7140 <_ZN7FatFile7seekSetEm+0x66>

000b7160 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b7160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7162:	460f      	mov	r7, r1
   b7164:	4604      	mov	r4, r0
   b7166:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b7168:	2100      	movs	r1, #0
   b716a:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b716c:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b716e:	f007 fafc 	bl	be76a <memset>
  m_vol = dirFile->m_vol;
   b7172:	68b8      	ldr	r0, [r7, #8]
   b7174:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b7176:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b7178:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b717c:	6a3b      	ldr	r3, [r7, #32]
   b717e:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b7180:	016a      	lsls	r2, r5, #5
   b7182:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b7186:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b718a:	071f      	lsls	r7, r3, #28
   b718c:	d444      	bmi.n	b7218 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b718e:	f003 0317 	and.w	r3, r3, #23
   b7192:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b7194:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b7198:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b719c:	bf04      	itt	eq
   b719e:	f043 0308 	orreq.w	r3, r3, #8
   b71a2:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b71a4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b71a8:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b71aa:	f006 0303 	and.w	r3, r6, #3
   b71ae:	2b01      	cmp	r3, #1
   b71b0:	d02c      	beq.n	b720c <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b71b2:	2b02      	cmp	r3, #2
   b71b4:	d028      	beq.n	b7208 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b71b6:	bb7b      	cbnz	r3, b7218 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b71b8:	0571      	lsls	r1, r6, #21
   b71ba:	d42d      	bmi.n	b7218 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b71bc:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b71be:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b71c0:	78a1      	ldrb	r1, [r4, #2]
   b71c2:	078b      	lsls	r3, r1, #30
   b71c4:	d504      	bpl.n	b71d0 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b71c6:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b71c8:	06df      	lsls	r7, r3, #27
   b71ca:	d425      	bmi.n	b7218 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b71cc:	07dd      	lsls	r5, r3, #31
   b71ce:	d423      	bmi.n	b7218 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b71d0:	11b3      	asrs	r3, r6, #6
   b71d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b71d6:	f006 0508 	and.w	r5, r6, #8
   b71da:	432b      	orrs	r3, r5
   b71dc:	430b      	orrs	r3, r1
   b71de:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b71e0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b71e2:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b71e4:	1883      	adds	r3, r0, r2
   b71e6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b71ea:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b71ee:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b71f2:	0572      	lsls	r2, r6, #21
   b71f4:	d513      	bpl.n	b721e <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b71f6:	b959      	cbnz	r1, b7210 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b71f8:	78a3      	ldrb	r3, [r4, #2]
   b71fa:	f043 0304 	orr.w	r3, r3, #4
   b71fe:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b7200:	0473      	lsls	r3, r6, #17
   b7202:	d410      	bmi.n	b7226 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b7204:	2001      	movs	r0, #1
}
   b7206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b7208:	2303      	movs	r3, #3
   b720a:	e7d8      	b.n	b71be <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b720c:	2302      	movs	r3, #2
   b720e:	e7d6      	b.n	b71be <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b7210:	f000 fdf9 	bl	b7e06 <_ZN9FatVolume9freeChainEm>
   b7214:	2800      	cmp	r0, #0
   b7216:	d1ef      	bne.n	b71f8 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b7218:	2000      	movs	r0, #0
   b721a:	7020      	strb	r0, [r4, #0]
  return false;
   b721c:	e7f3      	b.n	b7206 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b721e:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b7220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7222:	61e3      	str	r3, [r4, #28]
   b7224:	e7ec      	b.n	b7200 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b7226:	69e1      	ldr	r1, [r4, #28]
   b7228:	4620      	mov	r0, r4
   b722a:	f7ff ff56 	bl	b70da <_ZN7FatFile7seekSetEm>
   b722e:	2800      	cmp	r0, #0
   b7230:	d1e8      	bne.n	b7204 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b7232:	e7f1      	b.n	b7218 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b7234 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b7234:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b7236:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b7238:	4604      	mov	r4, r0
  if (!isOpen()) {
   b723a:	b90b      	cbnz	r3, b7240 <_ZN7FatFile4syncEv+0xc>
    return true;
   b723c:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b723e:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b7240:	7883      	ldrb	r3, [r0, #2]
   b7242:	075a      	lsls	r2, r3, #29
   b7244:	d523      	bpl.n	b728e <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b7246:	2101      	movs	r1, #1
   b7248:	f7ff fe52 	bl	b6ef0 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b724c:	4605      	mov	r5, r0
   b724e:	b928      	cbnz	r0, b725c <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b7250:	7863      	ldrb	r3, [r4, #1]
   b7252:	f043 0301 	orr.w	r3, r3, #1
   b7256:	7063      	strb	r3, [r4, #1]
  return false;
   b7258:	2000      	movs	r0, #0
   b725a:	e7f0      	b.n	b723e <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b725c:	7803      	ldrb	r3, [r0, #0]
   b725e:	2be5      	cmp	r3, #229	; 0xe5
   b7260:	d0f6      	beq.n	b7250 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b7262:	7823      	ldrb	r3, [r4, #0]
   b7264:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b7266:	bf44      	itt	mi
   b7268:	69e3      	ldrmi	r3, [r4, #28]
   b726a:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b726c:	6a23      	ldr	r3, [r4, #32]
   b726e:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b7270:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b7272:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b7274:	4b09      	ldr	r3, [pc, #36]	; (b729c <_ZN7FatFile4syncEv+0x68>)
   b7276:	681b      	ldr	r3, [r3, #0]
   b7278:	b12b      	cbz	r3, b7286 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b727a:	f100 0116 	add.w	r1, r0, #22
   b727e:	3018      	adds	r0, #24
   b7280:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b7282:	8b2b      	ldrh	r3, [r5, #24]
   b7284:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b7286:	78a3      	ldrb	r3, [r4, #2]
   b7288:	f023 0304 	bic.w	r3, r3, #4
   b728c:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b728e:	68a0      	ldr	r0, [r4, #8]
   b7290:	f7ff fdd8 	bl	b6e44 <_ZN9FatVolume9cacheSyncEv>
   b7294:	2800      	cmp	r0, #0
   b7296:	d0db      	beq.n	b7250 <_ZN7FatFile4syncEv+0x1c>
   b7298:	e7d0      	b.n	b723c <_ZN7FatFile4syncEv+0x8>
   b729a:	bf00      	nop
   b729c:	2003e63c 	.word	0x2003e63c

000b72a0 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b72a0:	b510      	push	{r4, lr}
   b72a2:	4604      	mov	r4, r0
  bool rtn = sync();
   b72a4:	f7ff ffc6 	bl	b7234 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b72a8:	2300      	movs	r3, #0
   b72aa:	7023      	strb	r3, [r4, #0]
}
   b72ac:	bd10      	pop	{r4, pc}

000b72ae <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b72ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   b72b0:	b093      	sub	sp, #76	; 0x4c
   b72b2:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b72b4:	2300      	movs	r3, #0
   b72b6:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b72b8:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b72ba:	9201      	str	r2, [sp, #4]
   b72bc:	4606      	mov	r6, r0
   b72be:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b72c0:	b113      	cbz	r3, b72c8 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b72c2:	2000      	movs	r0, #0
}
   b72c4:	b013      	add	sp, #76	; 0x4c
   b72c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b72c8:	780b      	ldrb	r3, [r1, #0]
   b72ca:	f013 0f70 	tst.w	r3, #112	; 0x70
   b72ce:	d0f8      	beq.n	b72c2 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b72d0:	7813      	ldrb	r3, [r2, #0]
   b72d2:	2b2f      	cmp	r3, #47	; 0x2f
   b72d4:	d112      	bne.n	b72fc <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b72d6:	9a01      	ldr	r2, [sp, #4]
   b72d8:	7813      	ldrb	r3, [r2, #0]
   b72da:	2b2f      	cmp	r3, #47	; 0x2f
   b72dc:	d102      	bne.n	b72e4 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b72de:	3201      	adds	r2, #1
   b72e0:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b72e2:	e7f8      	b.n	b72d6 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b72e4:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b72e6:	b91b      	cbnz	r3, b72f0 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b72e8:	4630      	mov	r0, r6
   b72ea:	f7ff fe10 	bl	b6f0e <_ZN7FatFile8openRootEP9FatVolume>
   b72ee:	e7e9      	b.n	b72c4 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b72f0:	a809      	add	r0, sp, #36	; 0x24
   b72f2:	f7ff fd91 	bl	b6e18 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b72f6:	2800      	cmp	r0, #0
   b72f8:	d0e3      	beq.n	b72c2 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b72fa:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b72fc:	9801      	ldr	r0, [sp, #4]
   b72fe:	aa01      	add	r2, sp, #4
   b7300:	a903      	add	r1, sp, #12
   b7302:	f000 f931 	bl	b7568 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b7306:	2800      	cmp	r0, #0
   b7308:	d0db      	beq.n	b72c2 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b730a:	9b01      	ldr	r3, [sp, #4]
   b730c:	781b      	ldrb	r3, [r3, #0]
   b730e:	b19b      	cbz	r3, b7338 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b7310:	2300      	movs	r3, #0
   b7312:	aa03      	add	r2, sp, #12
   b7314:	4621      	mov	r1, r4
   b7316:	4630      	mov	r0, r6
   b7318:	f000 faba 	bl	b7890 <_ZN7FatFile4openEPS_P7fname_ti>
   b731c:	2800      	cmp	r0, #0
   b731e:	d0d0      	beq.n	b72c2 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b7320:	4635      	mov	r5, r6
   b7322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7324:	ac09      	add	r4, sp, #36	; 0x24
   b7326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b732a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b732c:	682b      	ldr	r3, [r5, #0]
   b732e:	6023      	str	r3, [r4, #0]
    close();
   b7330:	4630      	mov	r0, r6
   b7332:	f7ff ffb5 	bl	b72a0 <_ZN7FatFile5closeEv>
  while (1) {
   b7336:	e7e0      	b.n	b72fa <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b7338:	463b      	mov	r3, r7
   b733a:	aa03      	add	r2, sp, #12
   b733c:	4621      	mov	r1, r4
   b733e:	4630      	mov	r0, r6
   b7340:	f000 faa6 	bl	b7890 <_ZN7FatFile4openEPS_P7fname_ti>
   b7344:	e7be      	b.n	b72c4 <_ZN7FatFile4openEPS_PKci+0x16>

000b7346 <_ZN7FatFile6removeEPS_PKc>:
bool FatFile::remove(FatFile* dirFile, const char* path) {
   b7346:	b500      	push	{lr}
   b7348:	b08b      	sub	sp, #44	; 0x2c
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b734a:	2300      	movs	r3, #0
   b734c:	460a      	mov	r2, r1
   b734e:	9301      	str	r3, [sp, #4]
  if (!file.open(dirFile, path, O_WRONLY)) {
   b7350:	4601      	mov	r1, r0
   b7352:	2301      	movs	r3, #1
   b7354:	a801      	add	r0, sp, #4
   b7356:	f7ff ffaa 	bl	b72ae <_ZN7FatFile4openEPS_PKci>
   b735a:	b110      	cbz	r0, b7362 <_ZN7FatFile6removeEPS_PKc+0x1c>
  return file.remove();
   b735c:	a801      	add	r0, sp, #4
   b735e:	f000 f9e1 	bl	b7724 <_ZN7FatFile6removeEv>
}
   b7362:	b00b      	add	sp, #44	; 0x2c
   b7364:	f85d fb04 	ldr.w	pc, [sp], #4

000b7368 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b7368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b736c:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b736e:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7370:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b7372:	4604      	mov	r4, r0
   b7374:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7376:	d55b      	bpl.n	b7430 <_ZN7FatFile5writeEPKvj+0xc8>
   b7378:	7883      	ldrb	r3, [r0, #2]
   b737a:	079a      	lsls	r2, r3, #30
   b737c:	d558      	bpl.n	b7430 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b737e:	071b      	lsls	r3, r3, #28
   b7380:	d451      	bmi.n	b7426 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b7382:	6963      	ldr	r3, [r4, #20]
   b7384:	43db      	mvns	r3, r3
   b7386:	42bb      	cmp	r3, r7
   b7388:	d352      	bcc.n	b7430 <_ZN7FatFile5writeEPKvj+0xc8>
   b738a:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b738c:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b7390:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b7392:	f1b8 0f00 	cmp.w	r8, #0
   b7396:	f000 8091 	beq.w	b74bc <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b739a:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b739c:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b739e:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b73a2:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b73a6:	d10e      	bne.n	b73c6 <_ZN7FatFile5writeEPKvj+0x5e>
   b73a8:	b96d      	cbnz	r5, b73c6 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b73aa:	6921      	ldr	r1, [r4, #16]
   b73ac:	2900      	cmp	r1, #0
   b73ae:	d046      	beq.n	b743e <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b73b0:	4652      	mov	r2, sl
   b73b2:	f000 fc88 	bl	b7cc6 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b73b6:	2800      	cmp	r0, #0
   b73b8:	db3a      	blt.n	b7430 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b73ba:	d104      	bne.n	b73c6 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b73bc:	4620      	mov	r0, r4
   b73be:	f7ff fd4e 	bl	b6e5e <_ZN7FatFile10addClusterEv>
   b73c2:	2800      	cmp	r0, #0
   b73c4:	d034      	beq.n	b7430 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b73c6:	6921      	ldr	r1, [r4, #16]
   b73c8:	68a0      	ldr	r0, [r4, #8]
   b73ca:	f000 fc76 	bl	b7cba <_ZNK9FatVolume17clusterFirstBlockEm>
   b73ce:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b73d0:	68a0      	ldr	r0, [r4, #8]
   b73d2:	b915      	cbnz	r5, b73da <_ZN7FatFile5writeEPKvj+0x72>
   b73d4:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b73d8:	d23f      	bcs.n	b745a <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b73da:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b73de:	4546      	cmp	r6, r8
   b73e0:	bf28      	it	cs
   b73e2:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b73e4:	2d00      	cmp	r5, #0
   b73e6:	d136      	bne.n	b7456 <_ZN7FatFile5writeEPKvj+0xee>
   b73e8:	6962      	ldr	r2, [r4, #20]
   b73ea:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b73ec:	429a      	cmp	r2, r3
   b73ee:	bf34      	ite	cc
   b73f0:	2201      	movcc	r2, #1
   b73f2:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b73f4:	3024      	adds	r0, #36	; 0x24
   b73f6:	f000 fc3d 	bl	b7c74 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b73fa:	b1c8      	cbz	r0, b7430 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b73fc:	4428      	add	r0, r5
   b73fe:	4632      	mov	r2, r6
   b7400:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b7402:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b7404:	f007 f989 	bl	be71a <memcpy>
      if (512 == (n + blockOffset)) {
   b7408:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b740c:	d104      	bne.n	b7418 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b740e:	68a0      	ldr	r0, [r4, #8]
   b7410:	3024      	adds	r0, #36	; 0x24
   b7412:	f000 fc07 	bl	b7c24 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b7416:	b158      	cbz	r0, b7430 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b7418:	6963      	ldr	r3, [r4, #20]
   b741a:	4433      	add	r3, r6
   b741c:	6163      	str	r3, [r4, #20]
    src += n;
   b741e:	44b1      	add	r9, r6
    nToWrite -= n;
   b7420:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b7424:	e7b4      	b.n	b7390 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b7426:	69c1      	ldr	r1, [r0, #28]
   b7428:	f7ff fe57 	bl	b70da <_ZN7FatFile7seekSetEm>
   b742c:	2800      	cmp	r0, #0
   b742e:	d1a8      	bne.n	b7382 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b7430:	7863      	ldrb	r3, [r4, #1]
   b7432:	f043 0301 	orr.w	r3, r3, #1
   b7436:	7063      	strb	r3, [r4, #1]
  return -1;
   b7438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b743c:	e050      	b.n	b74e0 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b743e:	6a23      	ldr	r3, [r4, #32]
   b7440:	b93b      	cbnz	r3, b7452 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b7442:	4620      	mov	r0, r4
   b7444:	f7ff fd0b 	bl	b6e5e <_ZN7FatFile10addClusterEv>
   b7448:	2800      	cmp	r0, #0
   b744a:	d0f1      	beq.n	b7430 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b744c:	6923      	ldr	r3, [r4, #16]
   b744e:	6223      	str	r3, [r4, #32]
   b7450:	e7b9      	b.n	b73c6 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b7452:	6123      	str	r3, [r4, #16]
   b7454:	e7b7      	b.n	b73c6 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b7456:	2201      	movs	r2, #1
   b7458:	e7cc      	b.n	b73f4 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b745a:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b745e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b7460:	d31b      	bcc.n	b749a <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b7462:	f890 c004 	ldrb.w	ip, [r0, #4]
   b7466:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b746a:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b746c:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b7470:	4573      	cmp	r3, lr
   b7472:	bf28      	it	cs
   b7474:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7476:	4291      	cmp	r1, r2
      n = 512*nb;
   b7478:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b747c:	d307      	bcc.n	b748e <_ZN7FatFile5writeEPKvj+0x126>
   b747e:	441a      	add	r2, r3
   b7480:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b7482:	bf82      	ittt	hi
   b7484:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b7488:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b748c:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b748e:	68a5      	ldr	r5, [r4, #8]
   b7490:	464a      	mov	r2, r9
   b7492:	6828      	ldr	r0, [r5, #0]
   b7494:	f000 ffd1 	bl	b843a <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b7498:	e7bd      	b.n	b7416 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b749a:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b749c:	bf02      	ittt	eq
   b749e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b74a2:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b74a6:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b74a8:	68a3      	ldr	r3, [r4, #8]
   b74aa:	464a      	mov	r2, r9
   b74ac:	6818      	ldr	r0, [r3, #0]
   b74ae:	f000 ff4e 	bl	b834e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b74b2:	2800      	cmp	r0, #0
   b74b4:	d0bc      	beq.n	b7430 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b74b6:	f44f 7600 	mov.w	r6, #512	; 0x200
   b74ba:	e7ad      	b.n	b7418 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b74bc:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b74be:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b74c0:	42b2      	cmp	r2, r6
   b74c2:	d204      	bcs.n	b74ce <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b74c4:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b74c6:	f043 0304 	orr.w	r3, r3, #4
   b74ca:	70a3      	strb	r3, [r4, #2]
   b74cc:	e003      	b.n	b74d6 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b74ce:	4a08      	ldr	r2, [pc, #32]	; (b74f0 <_ZN7FatFile5writeEPKvj+0x188>)
   b74d0:	6812      	ldr	r2, [r2, #0]
   b74d2:	2a00      	cmp	r2, #0
   b74d4:	d1f7      	bne.n	b74c6 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b74d6:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b74da:	2b00      	cmp	r3, #0
   b74dc:	db02      	blt.n	b74e4 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b74de:	4638      	mov	r0, r7
}
   b74e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b74e4:	4620      	mov	r0, r4
   b74e6:	f7ff fea5 	bl	b7234 <_ZN7FatFile4syncEv>
   b74ea:	2800      	cmp	r0, #0
   b74ec:	d1f7      	bne.n	b74de <_ZN7FatFile5writeEPKvj+0x176>
   b74ee:	e79f      	b.n	b7430 <_ZN7FatFile5writeEPKvj+0xc8>
   b74f0:	2003e63c 	.word	0x2003e63c

000b74f4 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b74f4:	2904      	cmp	r1, #4
   b74f6:	d804      	bhi.n	b7502 <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b74f8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b74fc:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b7500:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b7502:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b7504:	bf9b      	ittet	ls
   b7506:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b750a:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b750e:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b7510:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b7512:	bf84      	itt	hi
   b7514:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b7518:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b751a:	4770      	bx	lr

000b751c <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b751c:	1e41      	subs	r1, r0, #1
   b751e:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b7522:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b7524:	0842      	lsrs	r2, r0, #1
   b7526:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b752a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b752e:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b7532:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b7534:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b7536:	d1f5      	bne.n	b7524 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b7538:	4770      	bx	lr

000b753a <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b753a:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b753c:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b753e:	4604      	mov	r4, r0
   b7540:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b7542:	b923      	cbnz	r3, b754e <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b7544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b7548:	6889      	ldr	r1, [r1, #8]
   b754a:	f7ff bce0 	b.w	b6f0e <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b754e:	2224      	movs	r2, #36	; 0x24
   b7550:	2100      	movs	r1, #0
   b7552:	f007 f90a 	bl	be76a <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b7556:	2310      	movs	r3, #16
  m_flags = F_READ;
   b7558:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b755a:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b755c:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b755e:	68ab      	ldr	r3, [r5, #8]
   b7560:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b7562:	68eb      	ldr	r3, [r5, #12]
   b7564:	6223      	str	r3, [r4, #32]
}
   b7566:	bd38      	pop	{r3, r4, r5, pc}

000b7568 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b7568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b756c:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b756e:	f810 3b01 	ldrb.w	r3, [r0], #1
   b7572:	2b20      	cmp	r3, #32
   b7574:	d0fa      	beq.n	b756c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b7576:	4d6a      	ldr	r5, [pc, #424]	; (b7720 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b7578:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b757a:	2400      	movs	r4, #0
    c = path[len];
   b757c:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b757e:	b1c3      	cbz	r3, b75b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b7580:	2b2f      	cmp	r3, #47	; 0x2f
   b7582:	d016      	beq.n	b75b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b7584:	2b5c      	cmp	r3, #92	; 0x5c
   b7586:	d102      	bne.n	b758e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b7588:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b758a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b758e:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b7592:	b2c0      	uxtb	r0, r0
   b7594:	281d      	cmp	r0, #29
   b7596:	d803      	bhi.n	b75a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b7598:	fa25 f000 	lsr.w	r0, r5, r0
   b759c:	07c0      	lsls	r0, r0, #31
   b759e:	d4f3      	bmi.n	b7588 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b75a0:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b75a4:	283c      	cmp	r0, #60	; 0x3c
   b75a6:	d0ef      	beq.n	b7588 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b75a8:	3b20      	subs	r3, #32
   b75aa:	2b5e      	cmp	r3, #94	; 0x5e
   b75ac:	d8ec      	bhi.n	b7588 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b75ae:	3401      	adds	r4, #1
    c = path[len];
   b75b0:	e7e4      	b.n	b757c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b75b2:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b75b4:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b75b6:	4607      	mov	r7, r0
   b75b8:	f810 5b01 	ldrb.w	r5, [r0], #1
   b75bc:	2d20      	cmp	r5, #32
   b75be:	d0fa      	beq.n	b75b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b75c0:	2d2f      	cmp	r5, #47	; 0x2f
   b75c2:	d0f8      	beq.n	b75b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b75c4:	6017      	str	r7, [r2, #0]
  while (len) {
   b75c6:	b14c      	cbz	r4, b75dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b75c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b75cc:	2a2e      	cmp	r2, #46	; 0x2e
   b75ce:	d001      	beq.n	b75d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b75d0:	2a20      	cmp	r2, #32
   b75d2:	d101      	bne.n	b75d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b75d4:	3c01      	subs	r4, #1
  while (len) {
   b75d6:	e7f6      	b.n	b75c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b75d8:	2cff      	cmp	r4, #255	; 0xff
   b75da:	dcd5      	bgt.n	b7588 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b75dc:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b75e0:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b75e4:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b75e6:	f8c1 300d 	str.w	r3, [r1, #13]
   b75ea:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b75ec:	f04f 0800 	mov.w	r8, #0
   b75f0:	f816 3008 	ldrb.w	r3, [r6, r8]
   b75f4:	2b2e      	cmp	r3, #46	; 0x2e
   b75f6:	d001      	beq.n	b75fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b75f8:	2b20      	cmp	r3, #32
   b75fa:	d102      	bne.n	b7602 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b75fc:	f108 0801 	add.w	r8, r8, #1
   b7600:	e7f6      	b.n	b75f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b7602:	fab8 f088 	clz	r0, r8
   b7606:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b7608:	1e65      	subs	r5, r4, #1
   b760a:	1c6b      	adds	r3, r5, #1
   b760c:	d002      	beq.n	b7614 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b760e:	5d73      	ldrb	r3, [r6, r5]
   b7610:	2b2e      	cmp	r3, #46	; 0x2e
   b7612:	d114      	bne.n	b763e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b7614:	f04f 0900 	mov.w	r9, #0
   b7618:	2707      	movs	r7, #7
   b761a:	464a      	mov	r2, r9
   b761c:	46ca      	mov	sl, r9
   b761e:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b7622:	45a0      	cmp	r8, r4
   b7624:	da68      	bge.n	b76f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b7626:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b762a:	2b20      	cmp	r3, #32
   b762c:	d003      	beq.n	b7636 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b762e:	2b2e      	cmp	r3, #46	; 0x2e
   b7630:	d107      	bne.n	b7642 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b7632:	45a8      	cmp	r8, r5
   b7634:	d012      	beq.n	b765c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b7636:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b7638:	f108 0801 	add.w	r8, r8, #1
   b763c:	e7f1      	b.n	b7622 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b763e:	3d01      	subs	r5, #1
   b7640:	e7e3      	b.n	b760a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b7642:	2b22      	cmp	r3, #34	; 0x22
   b7644:	d008      	beq.n	b7658 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b7646:	2b7c      	cmp	r3, #124	; 0x7c
   b7648:	d006      	beq.n	b7658 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b764a:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b764e:	f1bc 0f05 	cmp.w	ip, #5
   b7652:	d80a      	bhi.n	b766a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b7654:	2b2d      	cmp	r3, #45	; 0x2d
   b7656:	d012      	beq.n	b767e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b7658:	45a8      	cmp	r8, r5
   b765a:	d15b      	bne.n	b7714 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b765c:	2f0a      	cmp	r7, #10
   b765e:	d04a      	beq.n	b76f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b7660:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b7662:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b7664:	f04f 0e10 	mov.w	lr, #16
   b7668:	e7e6      	b.n	b7638 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b766a:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b766e:	f1bc 0f05 	cmp.w	ip, #5
   b7672:	d9f1      	bls.n	b7658 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b7674:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b7678:	f1bc 0f02 	cmp.w	ip, #2
   b767c:	d9ec      	bls.n	b7658 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b767e:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b7682:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b7686:	d8e7      	bhi.n	b7658 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b7688:	45a8      	cmp	r8, r5
   b768a:	d0e7      	beq.n	b765c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b768c:	42ba      	cmp	r2, r7
   b768e:	d830      	bhi.n	b76f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b7690:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b7694:	f1bc 0f19 	cmp.w	ip, #25
   b7698:	d81a      	bhi.n	b76d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b769a:	3b20      	subs	r3, #32
        lc |= bit;
   b769c:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b76a0:	b2db      	uxtb	r3, r3
        lc |= bit;
   b76a2:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b76a6:	f102 0c01 	add.w	ip, r2, #1
   b76aa:	fa5f fc8c 	uxtb.w	ip, ip
   b76ae:	440a      	add	r2, r1
      if (i < 7) {
   b76b0:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b76b4:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b76b6:	d801      	bhi.n	b76bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b76b8:	f881 c00c 	strb.w	ip, [r1, #12]
   b76bc:	4662      	mov	r2, ip
   b76be:	e7bb      	b.n	b7638 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b76c0:	45a8      	cmp	r8, r5
   b76c2:	dc18      	bgt.n	b76f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b76c4:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b76c6:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b76c8:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b76ca:	f04f 0e10 	mov.w	lr, #16
   b76ce:	e7b2      	b.n	b7636 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b76d0:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b76d4:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b76d8:	bf98      	it	ls
   b76da:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b76de:	e7e2      	b.n	b76a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b76e0:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b76e2:	2001      	movs	r0, #1
   b76e4:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b76e6:	4419      	add	r1, r3
   b76e8:	237e      	movs	r3, #126	; 0x7e
   b76ea:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b76ec:	2331      	movs	r3, #49	; 0x31
   b76ee:	738b      	strb	r3, [r1, #14]
   b76f0:	e74b      	b.n	b758a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b76f2:	2f0a      	cmp	r7, #10
   b76f4:	d1e4      	bne.n	b76c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b76f6:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b76f8:	7b4b      	ldrb	r3, [r1, #13]
   b76fa:	2b20      	cmp	r3, #32
   b76fc:	f43f af44 	beq.w	b7588 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b7700:	2800      	cmp	r0, #0
   b7702:	d0ed      	beq.n	b76e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b7704:	ea1a 0f09 	tst.w	sl, r9
   b7708:	bf18      	it	ne
   b770a:	f04f 0902 	movne.w	r9, #2
   b770e:	f881 9000 	strb.w	r9, [r1]
   b7712:	e73a      	b.n	b758a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b7714:	42ba      	cmp	r2, r7
   b7716:	d8ec      	bhi.n	b76f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b7718:	2000      	movs	r0, #0
      c = '_';
   b771a:	235f      	movs	r3, #95	; 0x5f
   b771c:	e7c3      	b.n	b76a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b771e:	bf00      	nop
   b7720:	31000101 	.word	0x31000101

000b7724 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   b7724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7728:	b08a      	sub	sp, #40	; 0x28
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b772a:	2300      	movs	r3, #0
   b772c:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   b772e:	7803      	ldrb	r3, [r0, #0]
   b7730:	0719      	lsls	r1, r3, #28
bool FatFile::remove() {
   b7732:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7734:	d50a      	bpl.n	b774c <_ZN7FatFile6removeEv+0x28>
   b7736:	7883      	ldrb	r3, [r0, #2]
   b7738:	079a      	lsls	r2, r3, #30
   b773a:	d507      	bpl.n	b774c <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b773c:	6a01      	ldr	r1, [r0, #32]
   b773e:	b939      	cbnz	r1, b7750 <_ZN7FatFile6removeEv+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b7740:	2101      	movs	r1, #1
   b7742:	4620      	mov	r0, r4
   b7744:	f7ff fbd4 	bl	b6ef0 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b7748:	4605      	mov	r5, r0
   b774a:	b938      	cbnz	r0, b775c <_ZN7FatFile6removeEv+0x38>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   b774c:	2000      	movs	r0, #0
   b774e:	e048      	b.n	b77e2 <_ZN7FatFile6removeEv+0xbe>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b7750:	6880      	ldr	r0, [r0, #8]
   b7752:	f000 fb58 	bl	b7e06 <_ZN9FatVolume9freeChainEm>
   b7756:	2800      	cmp	r0, #0
   b7758:	d1f2      	bne.n	b7740 <_ZN7FatFile6removeEv+0x1c>
   b775a:	e7f7      	b.n	b774c <_ZN7FatFile6removeEv+0x28>
  chksum = lfnChecksum(dir->name);
   b775c:	f7ff fede 	bl	b751c <_ZN7FatFile11lfnChecksumEPh>
  dir->name[0] = DIR_NAME_DELETED;
   b7760:	27e5      	movs	r7, #229	; 0xe5
   b7762:	702f      	strb	r7, [r5, #0]
  m_attr = FILE_ATTR_CLOSED;
   b7764:	2300      	movs	r3, #0
  chksum = lfnChecksum(dir->name);
   b7766:	4606      	mov	r6, r0
  m_attr = FILE_ATTR_CLOSED;
   b7768:	7023      	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
   b776a:	68a0      	ldr	r0, [r4, #8]
   b776c:	f7ff fb6a 	bl	b6e44 <_ZN9FatVolume9cacheSyncEv>
   b7770:	2800      	cmp	r0, #0
   b7772:	d0eb      	beq.n	b774c <_ZN7FatFile6removeEv+0x28>
  if (!isLFN()) {
   b7774:	78e3      	ldrb	r3, [r4, #3]
   b7776:	2b00      	cmp	r3, #0
   b7778:	d033      	beq.n	b77e2 <_ZN7FatFile6removeEv+0xbe>
  if (!dirFile.openCluster(this)) {
   b777a:	4621      	mov	r1, r4
   b777c:	a801      	add	r0, sp, #4
   b777e:	f7ff fedc 	bl	b753a <_ZN7FatFile11openClusterEPS_>
   b7782:	2800      	cmp	r0, #0
   b7784:	d0e2      	beq.n	b774c <_ZN7FatFile6removeEv+0x28>
   b7786:	2501      	movs	r5, #1
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   b7788:	78e3      	ldrb	r3, [r4, #3]
   b778a:	fa5f f885 	uxtb.w	r8, r5
   b778e:	4543      	cmp	r3, r8
   b7790:	d3dc      	bcc.n	b774c <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b7792:	88a1      	ldrh	r1, [r4, #4]
   b7794:	1b49      	subs	r1, r1, r5
   b7796:	0149      	lsls	r1, r1, #5
   b7798:	a801      	add	r0, sp, #4
   b779a:	f7ff fc9e 	bl	b70da <_ZN7FatFile7seekSetEm>
   b779e:	2800      	cmp	r0, #0
   b77a0:	d0d4      	beq.n	b774c <_ZN7FatFile6removeEv+0x28>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b77a2:	2100      	movs	r1, #0
   b77a4:	a801      	add	r0, sp, #4
   b77a6:	f7ff fc79 	bl	b709c <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b77aa:	2800      	cmp	r0, #0
   b77ac:	d0ce      	beq.n	b774c <_ZN7FatFile6removeEv+0x28>
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b77ae:	7ac3      	ldrb	r3, [r0, #11]
   b77b0:	2b0f      	cmp	r3, #15
   b77b2:	d1cb      	bne.n	b774c <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b77b4:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b77b6:	f002 031f 	and.w	r3, r2, #31
   b77ba:	4543      	cmp	r3, r8
   b77bc:	d1c6      	bne.n	b774c <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b77be:	7b43      	ldrb	r3, [r0, #13]
   b77c0:	42b3      	cmp	r3, r6
   b77c2:	d1c3      	bne.n	b774c <_ZN7FatFile6removeEv+0x28>
    ldir->ord = DIR_NAME_DELETED;
   b77c4:	7007      	strb	r7, [r0, #0]
    m_vol->cacheDirty();
   b77c6:	68a1      	ldr	r1, [r4, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b77c8:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   b77cc:	f043 0301 	orr.w	r3, r3, #1
   b77d0:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   b77d4:	0653      	lsls	r3, r2, #25
   b77d6:	f105 0501 	add.w	r5, r5, #1
   b77da:	d5d5      	bpl.n	b7788 <_ZN7FatFile6removeEv+0x64>
      if (!m_vol->cacheSync()) {
   b77dc:	68a0      	ldr	r0, [r4, #8]
   b77de:	f7ff fb31 	bl	b6e44 <_ZN9FatVolume9cacheSyncEv>
}
   b77e2:	b00a      	add	sp, #40	; 0x28
   b77e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b77e8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b77e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b77ec:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b77f0:	4606      	mov	r6, r0
   b77f2:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b77f4:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b77f6:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b77f8:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b77fc:	6861      	ldr	r1, [r4, #4]
   b77fe:	68a2      	ldr	r2, [r4, #8]
   b7800:	186b      	adds	r3, r5, r1
   b7802:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b7804:	4411      	add	r1, r2
   b7806:	4291      	cmp	r1, r2
   b7808:	d006      	beq.n	b7818 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b780a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b780e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b7812:	4043      	eors	r3, r0
   b7814:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b7816:	e7f6      	b.n	b7806 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b7818:	f1b9 0f03 	cmp.w	r9, #3
   b781c:	bf28      	it	cs
   b781e:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7822:	f109 0204 	add.w	r2, r9, #4
   b7826:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b7828:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b782c:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b782e:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7830:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7832:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7834:	bf94      	ite	ls
   b7836:	3130      	addls	r1, #48	; 0x30
   b7838:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b783a:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b783c:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b783e:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7842:	d1f1      	bne.n	b7828 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b7844:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b7848:	2100      	movs	r1, #0
   b784a:	735f      	strb	r7, [r3, #13]
   b784c:	4630      	mov	r0, r6
   b784e:	f7ff fc44 	bl	b70da <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b7852:	2101      	movs	r1, #1
   b7854:	4630      	mov	r0, r6
   b7856:	f7ff fc21 	bl	b709c <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b785a:	4601      	mov	r1, r0
   b785c:	b928      	cbnz	r0, b786a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b785e:	7870      	ldrb	r0, [r6, #1]
   b7860:	fab0 f080 	clz	r0, r0
   b7864:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b7866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b786a:	7803      	ldrb	r3, [r0, #0]
   b786c:	b16b      	cbz	r3, b788a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b786e:	7ac3      	ldrb	r3, [r0, #11]
   b7870:	071b      	lsls	r3, r3, #28
   b7872:	d4ee      	bmi.n	b7852 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b7874:	220b      	movs	r2, #11
   b7876:	4640      	mov	r0, r8
   b7878:	f006 ff3f 	bl	be6fa <memcmp>
   b787c:	2800      	cmp	r0, #0
   b787e:	d1e8      	bne.n	b7852 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b7880:	3501      	adds	r5, #1
   b7882:	b2ad      	uxth	r5, r5
   b7884:	2d64      	cmp	r5, #100	; 0x64
   b7886:	d1b9      	bne.n	b77fc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b7888:	e7ed      	b.n	b7866 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b788a:	2001      	movs	r0, #1
   b788c:	e7eb      	b.n	b7866 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b7890 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b7890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7894:	ed2d 8b02 	vpush	{d8}
   b7898:	b08b      	sub	sp, #44	; 0x2c
   b789a:	460d      	mov	r5, r1
   b789c:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b789e:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b78a0:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b78a2:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b78a6:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b78a8:	d105      	bne.n	b78b6 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b78aa:	2000      	movs	r0, #0
}
   b78ac:	b00b      	add	sp, #44	; 0x2c
   b78ae:	ecbd 8b02 	vpop	{d8}
   b78b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b78b6:	9b07      	ldr	r3, [sp, #28]
   b78b8:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b78ba:	2b00      	cmp	r3, #0
   b78bc:	d1f5      	bne.n	b78aa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b78be:	6853      	ldr	r3, [r2, #4]
   b78c0:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b78c2:	7813      	ldrb	r3, [r2, #0]
   b78c4:	079c      	lsls	r4, r3, #30
   b78c6:	bf1f      	itttt	ne
   b78c8:	9b05      	ldrne	r3, [sp, #20]
   b78ca:	330c      	addne	r3, #12
   b78cc:	220d      	movne	r2, #13
   b78ce:	fbb3 f3f2 	udivne	r3, r3, r2
   b78d2:	bf1a      	itte	ne
   b78d4:	3301      	addne	r3, #1
   b78d6:	b2db      	uxtbne	r3, r3
   b78d8:	2301      	moveq	r3, #1
    seekSet(0);
   b78da:	2100      	movs	r1, #0
   b78dc:	4628      	mov	r0, r5
   b78de:	9303      	str	r3, [sp, #12]
   b78e0:	f7ff fbfb 	bl	b70da <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b78e4:	f107 030d 	add.w	r3, r7, #13
  }
   b78e8:	f04f 0b00 	mov.w	fp, #0
   b78ec:	ee08 3a10 	vmov	s16, r3
   b78f0:	46da      	mov	sl, fp
   b78f2:	465c      	mov	r4, fp
   b78f4:	465e      	mov	r6, fp
   b78f6:	f8cd b010 	str.w	fp, [sp, #16]
   b78fa:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b78fc:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b78fe:	2101      	movs	r1, #1
   b7900:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b7902:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b7906:	f7ff fbc9 	bl	b709c <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b790a:	4603      	mov	r3, r0
   b790c:	2800      	cmp	r0, #0
   b790e:	d171      	bne.n	b79f4 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b7910:	786b      	ldrb	r3, [r5, #1]
   b7912:	2b00      	cmp	r3, #0
   b7914:	d1c9      	bne.n	b78aa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b7916:	9b06      	ldr	r3, [sp, #24]
   b7918:	059a      	lsls	r2, r3, #22
   b791a:	d5c6      	bpl.n	b78aa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b791c:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b7920:	3b01      	subs	r3, #1
   b7922:	2b01      	cmp	r3, #1
   b7924:	d8c1      	bhi.n	b78aa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b7926:	9b04      	ldr	r3, [sp, #16]
   b7928:	2c00      	cmp	r4, #0
   b792a:	bf08      	it	eq
   b792c:	4643      	moveq	r3, r8
   b792e:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b7930:	9b03      	ldr	r3, [sp, #12]
   b7932:	429c      	cmp	r4, r3
   b7934:	f0c0 80f1 	bcc.w	b7b1a <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b7938:	f1b9 0f00 	cmp.w	r9, #0
   b793c:	f040 810a 	bne.w	b7b54 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b7940:	9b04      	ldr	r3, [sp, #16]
   b7942:	4628      	mov	r0, r5
   b7944:	0159      	lsls	r1, r3, #5
   b7946:	f7ff fbc8 	bl	b70da <_ZN7FatFile7seekSetEm>
   b794a:	2800      	cmp	r0, #0
   b794c:	d0ad      	beq.n	b78aa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b794e:	9b03      	ldr	r3, [sp, #12]
   b7950:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b7954:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b7958:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b795a:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b795e:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b7962:	2e00      	cmp	r6, #0
   b7964:	f000 810d 	beq.w	b7b82 <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b7968:	2100      	movs	r1, #0
   b796a:	4628      	mov	r0, r5
   b796c:	f7ff fb96 	bl	b709c <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b7970:	4604      	mov	r4, r0
   b7972:	2800      	cmp	r0, #0
   b7974:	d099      	beq.n	b78aa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b7976:	68aa      	ldr	r2, [r5, #8]
   b7978:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b797c:	454e      	cmp	r6, r9
   b797e:	f043 0301 	orr.w	r3, r3, #1
   b7982:	bf0c      	ite	eq
   b7984:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b7988:	46b3      	movne	fp, r6
   b798a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b798e:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b7992:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b7996:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b799a:	f107 000d 	add.w	r0, r7, #13
   b799e:	f7ff fdbd 	bl	b751c <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b79a2:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b79a6:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b79a8:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b79ac:	f00b 031f 	and.w	r3, fp, #31
   b79b0:	220d      	movs	r2, #13
   b79b2:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b79b4:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b79b8:	4353      	muls	r3, r2
   b79ba:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b79bc:	9905      	ldr	r1, [sp, #20]
   b79be:	4299      	cmp	r1, r3
   b79c0:	f240 80d0 	bls.w	b7b64 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b79c4:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b79c8:	2a04      	cmp	r2, #4
   b79ca:	fa5f fe82 	uxtb.w	lr, r2
   b79ce:	f102 0001 	add.w	r0, r2, #1
   b79d2:	f200 80cd 	bhi.w	b7b70 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b79d6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b79da:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b79de:	280d      	cmp	r0, #13
   b79e0:	f103 0301 	add.w	r3, r3, #1
   b79e4:	4602      	mov	r2, r0
   b79e6:	d1e9      	bne.n	b79bc <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b79e8:	3e01      	subs	r6, #1
   b79ea:	b2f6      	uxtb	r6, r6
   b79ec:	e7b9      	b.n	b7962 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b79ee:	f04f 0901 	mov.w	r9, #1
   b79f2:	e783      	b.n	b78fc <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b79f4:	7802      	ldrb	r2, [r0, #0]
   b79f6:	2ae5      	cmp	r2, #229	; 0xe5
   b79f8:	d000      	beq.n	b79fc <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b79fa:	b97a      	cbnz	r2, b7a1c <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b79fc:	9904      	ldr	r1, [sp, #16]
   b79fe:	2c00      	cmp	r4, #0
   b7a00:	bf08      	it	eq
   b7a02:	4641      	moveq	r1, r8
   b7a04:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b7a06:	9903      	ldr	r1, [sp, #12]
   b7a08:	428c      	cmp	r4, r1
        freeFound++;
   b7a0a:	bf3c      	itt	cc
   b7a0c:	3401      	addcc	r4, #1
   b7a0e:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b7a10:	2a00      	cmp	r2, #0
   b7a12:	d080      	beq.n	b7916 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b7a14:	2ae5      	cmp	r2, #229	; 0xe5
   b7a16:	d105      	bne.n	b7a24 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b7a18:	2600      	movs	r6, #0
   b7a1a:	e76f      	b.n	b78fc <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b7a1c:	9903      	ldr	r1, [sp, #12]
   b7a1e:	428c      	cmp	r4, r1
   b7a20:	bf38      	it	cc
   b7a22:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b7a24:	2a2e      	cmp	r2, #46	; 0x2e
   b7a26:	d0f7      	beq.n	b7a18 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b7a28:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b7a2a:	290f      	cmp	r1, #15
   b7a2c:	d14a      	bne.n	b7ac4 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b7a2e:	bb16      	cbnz	r6, b7a76 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b7a30:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b7a34:	f43f af62 	beq.w	b78fc <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b7a38:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b7a3c:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b7a40:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b7a42:	220d      	movs	r2, #13
   b7a44:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b7a48:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b7a4c:	9a05      	ldr	r2, [sp, #20]
   b7a4e:	4542      	cmp	r2, r8
   b7a50:	d9e2      	bls.n	b7a18 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b7a52:	eba2 0208 	sub.w	r2, r2, r8
   b7a56:	9208      	str	r2, [sp, #32]
   b7a58:	2200      	movs	r2, #0
   b7a5a:	eb02 0108 	add.w	r1, r2, r8
   b7a5e:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b7a60:	4618      	mov	r0, r3
   b7a62:	b2d1      	uxtb	r1, r2
   b7a64:	f7ff fd46 	bl	b74f4 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b7a68:	9908      	ldr	r1, [sp, #32]
   b7a6a:	428a      	cmp	r2, r1
   b7a6c:	d10d      	bne.n	b7a8a <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b7a6e:	2800      	cmp	r0, #0
   b7a70:	bf18      	it	ne
   b7a72:	2600      	movne	r6, #0
   b7a74:	e742      	b.n	b78fc <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b7a76:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b7a7a:	fa5f fa8a 	uxtb.w	sl, sl
   b7a7e:	4552      	cmp	r2, sl
   b7a80:	d1ca      	bne.n	b7a18 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b7a82:	7b5a      	ldrb	r2, [r3, #13]
   b7a84:	455a      	cmp	r2, fp
   b7a86:	d0dc      	beq.n	b7a42 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b7a88:	e7c6      	b.n	b7a18 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7a8a:	28ff      	cmp	r0, #255	; 0xff
   b7a8c:	d8c4      	bhi.n	b7a18 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b7a8e:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b7a92:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b7a96:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7a98:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b7a9a:	bf9c      	itt	ls
   b7a9c:	f10e 0020 	addls.w	r0, lr, #32
   b7aa0:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7aa4:	4608      	mov	r0, r1
   b7aa6:	9909      	ldr	r1, [sp, #36]	; 0x24
   b7aa8:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b7aaa:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b7aae:	f1bc 0f19 	cmp.w	ip, #25
   b7ab2:	bf9c      	itt	ls
   b7ab4:	3120      	addls	r1, #32
   b7ab6:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7ab8:	4571      	cmp	r1, lr
   b7aba:	d1ad      	bne.n	b7a18 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b7abc:	3201      	adds	r2, #1
   b7abe:	2a0d      	cmp	r2, #13
   b7ac0:	d1cb      	bne.n	b7a5a <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b7ac2:	e71b      	b.n	b78fc <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b7ac4:	0708      	lsls	r0, r1, #28
   b7ac6:	d4a7      	bmi.n	b7a18 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b7ac8:	b15e      	cbz	r6, b7ae2 <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b7aca:	f1ba 0f01 	cmp.w	sl, #1
   b7ace:	f47f aeec 	bne.w	b78aa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b7ad2:	4618      	mov	r0, r3
   b7ad4:	f7ff fd22 	bl	b751c <_ZN7FatFile11lfnChecksumEPh>
   b7ad8:	4558      	cmp	r0, fp
   b7ada:	f47f aee6 	bne.w	b78aa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b7ade:	46b1      	mov	r9, r6
   b7ae0:	e00e      	b.n	b7b00 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b7ae2:	ee18 1a10 	vmov	r1, s16
   b7ae6:	220b      	movs	r2, #11
   b7ae8:	4618      	mov	r0, r3
   b7aea:	f006 fe06 	bl	be6fa <memcmp>
   b7aee:	2800      	cmp	r0, #0
   b7af0:	f47f af04 	bne.w	b78fc <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b7af4:	f897 9000 	ldrb.w	r9, [r7]
   b7af8:	f019 0901 	ands.w	r9, r9, #1
   b7afc:	f47f af77 	bne.w	b79ee <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b7b00:	9b06      	ldr	r3, [sp, #24]
   b7b02:	0519      	lsls	r1, r3, #20
   b7b04:	f53f aed1 	bmi.w	b78aa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b7b08:	9b06      	ldr	r3, [sp, #24]
   b7b0a:	9807      	ldr	r0, [sp, #28]
   b7b0c:	f8cd 9000 	str.w	r9, [sp]
   b7b10:	4642      	mov	r2, r8
   b7b12:	4629      	mov	r1, r5
   b7b14:	f7ff fb24 	bl	b7160 <_ZN7FatFile15openCachedEntryEPS_tih>
   b7b18:	e6c8      	b.n	b78ac <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b7b1a:	2100      	movs	r1, #0
   b7b1c:	4628      	mov	r0, r5
   b7b1e:	f7ff fabd 	bl	b709c <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b7b22:	b9a0      	cbnz	r0, b7b4e <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b7b24:	786b      	ldrb	r3, [r5, #1]
   b7b26:	2b00      	cmp	r3, #0
   b7b28:	f47f aebf 	bne.w	b78aa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b7b2c:	4628      	mov	r0, r5
   b7b2e:	f7ff f9a1 	bl	b6e74 <_ZN7FatFile13addDirClusterEv>
   b7b32:	2800      	cmp	r0, #0
   b7b34:	f43f aeb9 	beq.w	b78aa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b7b38:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b7b3a:	791b      	ldrb	r3, [r3, #4]
   b7b3c:	2b01      	cmp	r3, #1
   b7b3e:	f63f aefb 	bhi.w	b7938 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b7b42:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b7b44:	3410      	adds	r4, #16
   b7b46:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b7b48:	42a3      	cmp	r3, r4
   b7b4a:	d8ef      	bhi.n	b7b2c <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b7b4c:	e6f4      	b.n	b7938 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b7b4e:	3401      	adds	r4, #1
   b7b50:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b7b52:	e6ed      	b.n	b7930 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b7b54:	4639      	mov	r1, r7
   b7b56:	4628      	mov	r0, r5
   b7b58:	f7ff fe46 	bl	b77e8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b7b5c:	2800      	cmp	r0, #0
   b7b5e:	f47f aeef 	bne.w	b7940 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b7b62:	e6a2      	b.n	b78aa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b7b64:	bf14      	ite	ne
   b7b66:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b7b6a:	2100      	moveq	r1, #0
   b7b6c:	b289      	uxth	r1, r1
   b7b6e:	e72b      	b.n	b79c8 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b7b70:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b7b74:	bf94      	ite	ls
   b7b76:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b7b7a:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b7b7e:	8091      	strh	r1, [r2, #4]
   b7b80:	e72d      	b.n	b79de <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b7b82:	4631      	mov	r1, r6
   b7b84:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b7b86:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b7b8a:	f7ff fa87 	bl	b709c <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b7b8e:	4604      	mov	r4, r0
   b7b90:	2800      	cmp	r0, #0
   b7b92:	f43f ae8a 	beq.w	b78aa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b7b96:	2220      	movs	r2, #32
   b7b98:	4631      	mov	r1, r6
   b7b9a:	f006 fde6 	bl	be76a <memset>
  memcpy(dir->name, fname->sfn, 11);
   b7b9e:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b7ba2:	6023      	str	r3, [r4, #0]
   b7ba4:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b7ba8:	6063      	str	r3, [r4, #4]
   b7baa:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b7bae:	8123      	strh	r3, [r4, #8]
   b7bb0:	7dfb      	ldrb	r3, [r7, #23]
   b7bb2:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b7bb4:	783b      	ldrb	r3, [r7, #0]
   b7bb6:	f003 0318 	and.w	r3, r3, #24
   b7bba:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b7bbc:	4b0f      	ldr	r3, [pc, #60]	; (b7bfc <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b7bbe:	681b      	ldr	r3, [r3, #0]
   b7bc0:	b19b      	cbz	r3, b7bea <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b7bc2:	f104 010e 	add.w	r1, r4, #14
   b7bc6:	f104 0010 	add.w	r0, r4, #16
   b7bca:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b7bcc:	8a23      	ldrh	r3, [r4, #16]
   b7bce:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b7bd0:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b7bd2:	89e3      	ldrh	r3, [r4, #14]
   b7bd4:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b7bd6:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b7bd8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b7bdc:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b7be0:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b7be4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b7be8:	e78e      	b.n	b7b08 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b7bea:	2321      	movs	r3, #33	; 0x21
   b7bec:	7423      	strb	r3, [r4, #16]
   b7bee:	2328      	movs	r3, #40	; 0x28
   b7bf0:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b7bf2:	2308      	movs	r3, #8
   b7bf4:	73a6      	strb	r6, [r4, #14]
   b7bf6:	73e3      	strb	r3, [r4, #15]
   b7bf8:	e7e8      	b.n	b7bcc <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b7bfa:	bf00      	nop
   b7bfc:	2003e63c 	.word	0x2003e63c

000b7c00 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7c00:	b513      	push	{r0, r1, r4, lr}
   b7c02:	4604      	mov	r4, r0
    }
   b7c04:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7c06:	b159      	cbz	r1, b7c20 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7c08:	9101      	str	r1, [sp, #4]
   b7c0a:	f006 fe62 	bl	be8d2 <strlen>
   b7c0e:	6823      	ldr	r3, [r4, #0]
   b7c10:	9901      	ldr	r1, [sp, #4]
   b7c12:	68db      	ldr	r3, [r3, #12]
   b7c14:	4602      	mov	r2, r0
   b7c16:	4620      	mov	r0, r4
    }
   b7c18:	b002      	add	sp, #8
   b7c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7c1e:	4718      	bx	r3
    }
   b7c20:	b002      	add	sp, #8
   b7c22:	bd10      	pop	{r4, pc}

000b7c24 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b7c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b7c26:	7803      	ldrb	r3, [r0, #0]
   b7c28:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b7c2a:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b7c2c:	d520      	bpl.n	b7c70 <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b7c2e:	6843      	ldr	r3, [r0, #4]
   b7c30:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b7c32:	f100 020c 	add.w	r2, r0, #12
   b7c36:	6818      	ldr	r0, [r3, #0]
   b7c38:	9201      	str	r2, [sp, #4]
   b7c3a:	f000 fb88 	bl	b834e <_ZN9SdSpiCard10writeBlockEmPKh>
   b7c3e:	9a01      	ldr	r2, [sp, #4]
   b7c40:	4605      	mov	r5, r0
   b7c42:	b918      	cbnz	r0, b7c4c <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b7c44:	2500      	movs	r5, #0
}
   b7c46:	4628      	mov	r0, r5
   b7c48:	b003      	add	sp, #12
   b7c4a:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b7c4c:	7823      	ldrb	r3, [r4, #0]
   b7c4e:	079b      	lsls	r3, r3, #30
   b7c50:	d404      	bmi.n	b7c5c <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b7c52:	7823      	ldrb	r3, [r4, #0]
   b7c54:	f023 0301 	bic.w	r3, r3, #1
   b7c58:	7023      	strb	r3, [r4, #0]
   b7c5a:	e7f4      	b.n	b7c46 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b7c5c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b7c60:	6919      	ldr	r1, [r3, #16]
   b7c62:	4401      	add	r1, r0
   b7c64:	6818      	ldr	r0, [r3, #0]
   b7c66:	f000 fb72 	bl	b834e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b7c6a:	2800      	cmp	r0, #0
   b7c6c:	d1f1      	bne.n	b7c52 <_ZN8FatCache4syncEv+0x2e>
   b7c6e:	e7e9      	b.n	b7c44 <_ZN8FatCache4syncEv+0x20>
  return true;
   b7c70:	2501      	movs	r5, #1
   b7c72:	e7e8      	b.n	b7c46 <_ZN8FatCache4syncEv+0x22>

000b7c74 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b7c74:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b7c76:	6883      	ldr	r3, [r0, #8]
   b7c78:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b7c7a:	4604      	mov	r4, r0
   b7c7c:	460e      	mov	r6, r1
   b7c7e:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b7c80:	d009      	beq.n	b7c96 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b7c82:	f7ff ffcf 	bl	b7c24 <_ZN8FatCache4syncEv>
   b7c86:	b908      	cbnz	r0, b7c8c <_ZN8FatCache4readEmh+0x18>
  return 0;
   b7c88:	2000      	movs	r0, #0
}
   b7c8a:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b7c8c:	076b      	lsls	r3, r5, #29
   b7c8e:	d50a      	bpl.n	b7ca6 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b7c90:	2300      	movs	r3, #0
   b7c92:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b7c94:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b7c96:	7822      	ldrb	r2, [r4, #0]
   b7c98:	f005 0503 	and.w	r5, r5, #3
   b7c9c:	4620      	mov	r0, r4
   b7c9e:	4315      	orrs	r5, r2
   b7ca0:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b7ca4:	e7f1      	b.n	b7c8a <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b7ca6:	6863      	ldr	r3, [r4, #4]
   b7ca8:	f104 020c 	add.w	r2, r4, #12
   b7cac:	6818      	ldr	r0, [r3, #0]
   b7cae:	4631      	mov	r1, r6
   b7cb0:	f000 fac4 	bl	b823c <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b7cb4:	2800      	cmp	r0, #0
   b7cb6:	d1eb      	bne.n	b7c90 <_ZN8FatCache4readEmh+0x1c>
   b7cb8:	e7e6      	b.n	b7c88 <_ZN8FatCache4readEmh+0x14>

000b7cba <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b7cba:	7983      	ldrb	r3, [r0, #6]
   b7cbc:	6940      	ldr	r0, [r0, #20]
   b7cbe:	3902      	subs	r1, #2
   b7cc0:	4099      	lsls	r1, r3
}
   b7cc2:	4408      	add	r0, r1
   b7cc4:	4770      	bx	lr

000b7cc6 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7cc6:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b7cc8:	b570      	push	{r4, r5, r6, lr}
   b7cca:	4605      	mov	r5, r0
   b7ccc:	460c      	mov	r4, r1
   b7cce:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7cd0:	d802      	bhi.n	b7cd8 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b7cd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b7cd6:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7cd8:	69c3      	ldr	r3, [r0, #28]
   b7cda:	428b      	cmp	r3, r1
   b7cdc:	d3f9      	bcc.n	b7cd2 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b7cde:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7ce0:	2b20      	cmp	r3, #32
   b7ce2:	d116      	bne.n	b7d12 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b7ce4:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7ce6:	2202      	movs	r2, #2
   b7ce8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7cec:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7cf0:	f7ff ffc0 	bl	b7c74 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7cf4:	2800      	cmp	r0, #0
   b7cf6:	d0ec      	beq.n	b7cd2 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b7cf8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7cfc:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b7d00:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b7d04:	69ea      	ldr	r2, [r5, #28]
   b7d06:	429a      	cmp	r2, r3
  *value = next;
   b7d08:	bf26      	itte	cs
   b7d0a:	6033      	strcs	r3, [r6, #0]
  return 1;
   b7d0c:	2001      	movcs	r0, #1
    return 0;
   b7d0e:	2000      	movcc	r0, #0
   b7d10:	e7e1      	b.n	b7cd6 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b7d12:	2b10      	cmp	r3, #16
   b7d14:	d1dd      	bne.n	b7cd2 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7d16:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7d1a:	6981      	ldr	r1, [r0, #24]
   b7d1c:	2202      	movs	r2, #2
   b7d1e:	4419      	add	r1, r3
   b7d20:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7d24:	f7ff ffa6 	bl	b7c74 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7d28:	2800      	cmp	r0, #0
   b7d2a:	d0d2      	beq.n	b7cd2 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b7d2c:	b2e4      	uxtb	r4, r4
   b7d2e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b7d32:	e7e7      	b.n	b7d04 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b7d34 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7d34:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b7d36:	b538      	push	{r3, r4, r5, lr}
   b7d38:	460c      	mov	r4, r1
   b7d3a:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7d3c:	d801      	bhi.n	b7d42 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b7d3e:	2000      	movs	r0, #0
}
   b7d40:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7d42:	69c3      	ldr	r3, [r0, #28]
   b7d44:	428b      	cmp	r3, r1
   b7d46:	d3fa      	bcc.n	b7d3e <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b7d48:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7d4a:	2b20      	cmp	r3, #32
   b7d4c:	d10f      	bne.n	b7d6e <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b7d4e:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7d50:	2203      	movs	r2, #3
   b7d52:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7d56:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7d5a:	f7ff ff8b 	bl	b7c74 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7d5e:	2800      	cmp	r0, #0
   b7d60:	d0ed      	beq.n	b7d3e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b7d62:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7d66:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b7d6a:	2001      	movs	r0, #1
   b7d6c:	e7e8      	b.n	b7d40 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b7d6e:	2b10      	cmp	r3, #16
   b7d70:	d1e5      	bne.n	b7d3e <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7d72:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7d76:	6981      	ldr	r1, [r0, #24]
   b7d78:	2203      	movs	r2, #3
   b7d7a:	4419      	add	r1, r3
   b7d7c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7d80:	f7ff ff78 	bl	b7c74 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7d84:	2800      	cmp	r0, #0
   b7d86:	d0da      	beq.n	b7d3e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b7d88:	b2e4      	uxtb	r4, r4
   b7d8a:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b7d8e:	e7ec      	b.n	b7d6a <_ZN9FatVolume6fatPutEmm+0x36>

000b7d90 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b7d90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b7d94:	68c4      	ldr	r4, [r0, #12]
   b7d96:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b7d98:	4605      	mov	r5, r0
   b7d9a:	460e      	mov	r6, r1
   b7d9c:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b7d9e:	d301      	bcc.n	b7da4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b7da0:	2701      	movs	r7, #1
   b7da2:	e001      	b.n	b7da8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7da4:	460c      	mov	r4, r1
    setStart = false;
   b7da6:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b7da8:	69eb      	ldr	r3, [r5, #28]
    find++;
   b7daa:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b7dac:	42a3      	cmp	r3, r4
   b7dae:	d202      	bcs.n	b7db6 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b7db0:	b9c7      	cbnz	r7, b7de4 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b7db2:	68ec      	ldr	r4, [r5, #12]
   b7db4:	e7f4      	b.n	b7da0 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b7db6:	42a6      	cmp	r6, r4
   b7db8:	d014      	beq.n	b7de4 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b7dba:	aa01      	add	r2, sp, #4
   b7dbc:	4621      	mov	r1, r4
   b7dbe:	4628      	mov	r0, r5
   b7dc0:	f7ff ff81 	bl	b7cc6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7dc4:	2800      	cmp	r0, #0
   b7dc6:	db0d      	blt.n	b7de4 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b7dc8:	d0ee      	beq.n	b7da8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7dca:	9b01      	ldr	r3, [sp, #4]
   b7dcc:	2b00      	cmp	r3, #0
   b7dce:	d1eb      	bne.n	b7da8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b7dd0:	b107      	cbz	r7, b7dd4 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b7dd2:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b7dd4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b7dd8:	4621      	mov	r1, r4
   b7dda:	4628      	mov	r0, r5
   b7ddc:	f7ff ffaa 	bl	b7d34 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b7de0:	4607      	mov	r7, r0
   b7de2:	b920      	cbnz	r0, b7dee <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b7de4:	2700      	movs	r7, #0
}
   b7de6:	4638      	mov	r0, r7
   b7de8:	b002      	add	sp, #8
   b7dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b7dee:	b916      	cbnz	r6, b7df6 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b7df0:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b7df4:	e7f7      	b.n	b7de6 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b7df6:	4622      	mov	r2, r4
   b7df8:	4631      	mov	r1, r6
   b7dfa:	4628      	mov	r0, r5
   b7dfc:	f7ff ff9a 	bl	b7d34 <_ZN9FatVolume6fatPutEmm>
   b7e00:	2800      	cmp	r0, #0
   b7e02:	d1f5      	bne.n	b7df0 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b7e04:	e7ee      	b.n	b7de4 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b7e06 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b7e06:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7e08:	4605      	mov	r5, r0
   b7e0a:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b7e0c:	aa01      	add	r2, sp, #4
   b7e0e:	4621      	mov	r1, r4
   b7e10:	4628      	mov	r0, r5
   b7e12:	f7ff ff58 	bl	b7cc6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7e16:	1e06      	subs	r6, r0, #0
   b7e18:	db10      	blt.n	b7e3c <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b7e1a:	2200      	movs	r2, #0
   b7e1c:	4621      	mov	r1, r4
   b7e1e:	4628      	mov	r0, r5
   b7e20:	f7ff ff88 	bl	b7d34 <_ZN9FatVolume6fatPutEmm>
   b7e24:	b150      	cbz	r0, b7e3c <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b7e26:	68eb      	ldr	r3, [r5, #12]
   b7e28:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b7e2a:	bf24      	itt	cs
   b7e2c:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b7e30:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b7e32:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b7e34:	2e00      	cmp	r6, #0
   b7e36:	d1e9      	bne.n	b7e0c <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b7e38:	b002      	add	sp, #8
   b7e3a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7e3c:	2000      	movs	r0, #0
   b7e3e:	e7fb      	b.n	b7e38 <_ZN9FatVolume9freeChainEm+0x32>

000b7e40 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b7e40:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b7e42:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b7e44:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b7e46:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b7e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b7e4c:	4604      	mov	r4, r0
  m_fatType = 0;
   b7e4e:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b7e50:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b7e54:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b7e56:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7e5a:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b7e5c:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b7e60:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b7e64:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b7e68:	460d      	mov	r5, r1
   b7e6a:	b1b9      	cbz	r1, b7e9c <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b7e6c:	2904      	cmp	r1, #4
   b7e6e:	d901      	bls.n	b7e74 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b7e70:	2000      	movs	r0, #0
}
   b7e72:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b7e74:	4611      	mov	r1, r2
   b7e76:	4630      	mov	r0, r6
   b7e78:	f7ff fefc 	bl	b7c74 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7e7c:	2800      	cmp	r0, #0
   b7e7e:	d0f7      	beq.n	b7e70 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b7e80:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b7e84:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b7e88:	065b      	lsls	r3, r3, #25
   b7e8a:	d1f1      	bne.n	b7e70 <_ZN9FatVolume4initEh+0x30>
   b7e8c:	f105 011b 	add.w	r1, r5, #27
   b7e90:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b7e94:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b7e98:	2d00      	cmp	r5, #0
   b7e9a:	d0e9      	beq.n	b7e70 <_ZN9FatVolume4initEh+0x30>
   b7e9c:	2200      	movs	r2, #0
   b7e9e:	4629      	mov	r1, r5
   b7ea0:	4630      	mov	r0, r6
   b7ea2:	f7ff fee7 	bl	b7c74 <_ZN8FatCache4readEmh>
  if (!pc) {
   b7ea6:	2800      	cmp	r0, #0
   b7ea8:	d0e2      	beq.n	b7e70 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b7eaa:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b7eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b7eb2:	d1dd      	bne.n	b7e70 <_ZN9FatVolume4initEh+0x30>
   b7eb4:	7c03      	ldrb	r3, [r0, #16]
   b7eb6:	2b02      	cmp	r3, #2
   b7eb8:	d1da      	bne.n	b7e70 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b7eba:	89c3      	ldrh	r3, [r0, #14]
   b7ebc:	2b00      	cmp	r3, #0
   b7ebe:	d0d7      	beq.n	b7e70 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b7ec0:	7b41      	ldrb	r1, [r0, #13]
   b7ec2:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b7ec4:	1e4b      	subs	r3, r1, #1
   b7ec6:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b7ec8:	2300      	movs	r3, #0
   b7eca:	71a3      	strb	r3, [r4, #6]
   b7ecc:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7ece:	2301      	movs	r3, #1
   b7ed0:	4299      	cmp	r1, r3
   b7ed2:	d007      	beq.n	b7ee4 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b7ed4:	3e01      	subs	r6, #1
   b7ed6:	d0cb      	beq.n	b7e70 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7ed8:	79a2      	ldrb	r2, [r4, #6]
   b7eda:	005b      	lsls	r3, r3, #1
   b7edc:	3201      	adds	r2, #1
   b7ede:	b2db      	uxtb	r3, r3
   b7ee0:	71a2      	strb	r2, [r4, #6]
   b7ee2:	e7f5      	b.n	b7ed0 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b7ee4:	8ac1      	ldrh	r1, [r0, #22]
   b7ee6:	b901      	cbnz	r1, b7eea <_ZN9FatVolume4initEh+0xaa>
   b7ee8:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b7eea:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b7eec:	89c3      	ldrh	r3, [r0, #14]
   b7eee:	442b      	add	r3, r5
   b7ef0:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b7ef2:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b7ef6:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b7ef8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b7efc:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b7efe:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b7f02:	0149      	lsls	r1, r1, #5
   b7f04:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b7f08:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b7f0c:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b7f0e:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b7f12:	b902      	cbnz	r2, b7f16 <_ZN9FatVolume4initEh+0xd6>
   b7f14:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7f16:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b7f18:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7f1a:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b7f1c:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b7f1e:	1c4b      	adds	r3, r1, #1
   b7f20:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b7f22:	f640 73f4 	movw	r3, #4084	; 0xff4
   b7f26:	4299      	cmp	r1, r3
   b7f28:	d802      	bhi.n	b7f30 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b7f2a:	230c      	movs	r3, #12
   b7f2c:	71e3      	strb	r3, [r4, #7]
   b7f2e:	e79f      	b.n	b7e70 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b7f30:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b7f34:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b7f36:	bf85      	ittet	hi
   b7f38:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b7f3a:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b7f3c:	2310      	movls	r3, #16
    m_fatType = 32;
   b7f3e:	2320      	movhi	r3, #32
   b7f40:	71e3      	strb	r3, [r4, #7]
  return true;
   b7f42:	2001      	movs	r0, #1
   b7f44:	e795      	b.n	b7e72 <_ZN9FatVolume4initEh+0x32>

000b7f46 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b7f46:	f000 bacb 	b.w	b84e0 <_ZN14SdSpiAltDriver4sendEh>

000b7f4a <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b7f4a:	f000 baae 	b.w	b84aa <_ZN14SdSpiAltDriver7receiveEv>
	...

000b7f50 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7f50:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7f52:	4e0e      	ldr	r6, [pc, #56]	; (b7f8c <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7f54:	460d      	mov	r5, r1
   b7f56:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b7f58:	f001 fc74 	bl	b9844 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7f5c:	6833      	ldr	r3, [r6, #0]
   b7f5e:	1ac0      	subs	r0, r0, r3
   b7f60:	4b0b      	ldr	r3, [pc, #44]	; (b7f90 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b7f62:	4298      	cmp	r0, r3
   b7f64:	d908      	bls.n	b7f78 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7f66:	f001 fc75 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7f6a:	4b0a      	ldr	r3, [pc, #40]	; (b7f94 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b7f6c:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b7f6e:	f001 fe55 	bl	b9c1c <spark_process>
   b7f72:	f001 fc67 	bl	b9844 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b7f76:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7f78:	f001 fc6c 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b7f7c:	b280      	uxth	r0, r0
   b7f7e:	1b40      	subs	r0, r0, r5
}
   b7f80:	42a0      	cmp	r0, r4
   b7f82:	bfd4      	ite	le
   b7f84:	2000      	movle	r0, #0
   b7f86:	2001      	movgt	r0, #1
   b7f88:	bd70      	pop	{r4, r5, r6, pc}
   b7f8a:	bf00      	nop
   b7f8c:	2003e644 	.word	0x2003e644
   b7f90:	000186a0 	.word	0x000186a0
   b7f94:	2003e728 	.word	0x2003e728

000b7f98 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b7f98:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b7f9a:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b7f9c:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b7f9e:	b94d      	cbnz	r5, b7fb4 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b7fa0:	6840      	ldr	r0, [r0, #4]
   b7fa2:	f000 fa6b 	bl	b847c <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b7fa6:	6863      	ldr	r3, [r4, #4]
   b7fa8:	4629      	mov	r1, r5
   b7faa:	7d18      	ldrb	r0, [r3, #20]
   b7fac:	f005 fc3b 	bl	bd826 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b7fb0:	2301      	movs	r3, #1
   b7fb2:	7223      	strb	r3, [r4, #8]
  }
}
   b7fb4:	bd38      	pop	{r3, r4, r5, pc}

000b7fb6 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b7fb6:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b7fb8:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b7fba:	4604      	mov	r4, r0
  if (m_spiActive) {
   b7fbc:	b16b      	cbz	r3, b7fda <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b7fbe:	6843      	ldr	r3, [r0, #4]
   b7fc0:	2101      	movs	r1, #1
   b7fc2:	7d18      	ldrb	r0, [r3, #20]
   b7fc4:	f005 fc2f 	bl	bd826 <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b7fc8:	6860      	ldr	r0, [r4, #4]
   b7fca:	21ff      	movs	r1, #255	; 0xff
   b7fcc:	f7ff ffbb 	bl	b7f46 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b7fd0:	6860      	ldr	r0, [r4, #4]
   b7fd2:	f000 fa67 	bl	b84a4 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b7fd6:	2300      	movs	r3, #0
   b7fd8:	7223      	strb	r3, [r4, #8]
  }
}
   b7fda:	bd10      	pop	{r4, pc}

000b7fdc <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b7fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7fde:	4604      	mov	r4, r0
   b7fe0:	460d      	mov	r5, r1
   b7fe2:	4616      	mov	r6, r2
   b7fe4:	f001 fc36 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b7fe8:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b7fea:	6860      	ldr	r0, [r4, #4]
   b7fec:	f7ff ffad 	bl	b7f4a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7ff0:	28ff      	cmp	r0, #255	; 0xff
   b7ff2:	7260      	strb	r0, [r4, #9]
   b7ff4:	d10e      	bne.n	b8014 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b7ff6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7ffa:	4639      	mov	r1, r7
   b7ffc:	4620      	mov	r0, r4
   b7ffe:	f7ff ffa7 	bl	b7f50 <_ZN9SdSpiCard10isTimedOutEtt>
   b8002:	2800      	cmp	r0, #0
   b8004:	d0f1      	beq.n	b7fea <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b8006:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b8008:	4620      	mov	r0, r4
   b800a:	7023      	strb	r3, [r4, #0]
   b800c:	f7ff ffd3 	bl	b7fb6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8010:	2000      	movs	r0, #0
}
   b8012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b8014:	28fe      	cmp	r0, #254	; 0xfe
   b8016:	d001      	beq.n	b801c <_ZN9SdSpiCard8readDataEPhj+0x40>
   b8018:	2350      	movs	r3, #80	; 0x50
   b801a:	e7f5      	b.n	b8008 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b801c:	6860      	ldr	r0, [r4, #4]
   b801e:	4632      	mov	r2, r6
   b8020:	4629      	mov	r1, r5
   b8022:	f000 fa47 	bl	b84b4 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b8026:	7260      	strb	r0, [r4, #9]
   b8028:	b108      	cbz	r0, b802e <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b802a:	2360      	movs	r3, #96	; 0x60
   b802c:	e7ec      	b.n	b8008 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b802e:	6860      	ldr	r0, [r4, #4]
   b8030:	f7ff ff8b 	bl	b7f4a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b8034:	6860      	ldr	r0, [r4, #4]
   b8036:	f7ff ff88 	bl	b7f4a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b803a:	2001      	movs	r0, #1
   b803c:	e7e9      	b.n	b8012 <_ZN9SdSpiCard8readDataEPhj+0x36>

000b803e <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b803e:	b570      	push	{r4, r5, r6, lr}
   b8040:	4604      	mov	r4, r0
   b8042:	460e      	mov	r6, r1
   b8044:	f001 fc06 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
   b8048:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b804a:	4632      	mov	r2, r6
   b804c:	4629      	mov	r1, r5
   b804e:	4620      	mov	r0, r4
   b8050:	f7ff ff7e 	bl	b7f50 <_ZN9SdSpiCard10isTimedOutEtt>
   b8054:	b930      	cbnz	r0, b8064 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b8056:	6860      	ldr	r0, [r4, #4]
   b8058:	f7ff ff77 	bl	b7f4a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b805c:	28ff      	cmp	r0, #255	; 0xff
   b805e:	d1f4      	bne.n	b804a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b8060:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b8062:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b8064:	2000      	movs	r0, #0
   b8066:	e7fc      	b.n	b8062 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b8068 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b8068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b806a:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b806c:	9201      	str	r2, [sp, #4]
   b806e:	4604      	mov	r4, r0
   b8070:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b8072:	b90b      	cbnz	r3, b8078 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b8074:	f7ff ff90 	bl	b7f98 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b8078:	b125      	cbz	r5, b8084 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b807a:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b807e:	4620      	mov	r0, r4
   b8080:	f7ff ffdd 	bl	b803e <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b8084:	6860      	ldr	r0, [r4, #4]
   b8086:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b808a:	f7ff ff5c 	bl	b7f46 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b808e:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b8090:	af01      	add	r7, sp, #4
   b8092:	5db9      	ldrb	r1, [r7, r6]
   b8094:	6860      	ldr	r0, [r4, #4]
   b8096:	f7ff ff56 	bl	b7f46 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b809a:	3e01      	subs	r6, #1
   b809c:	d2f9      	bcs.n	b8092 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b809e:	2d00      	cmp	r5, #0
   b80a0:	6860      	ldr	r0, [r4, #4]
   b80a2:	bf0c      	ite	eq
   b80a4:	2195      	moveq	r1, #149	; 0x95
   b80a6:	2187      	movne	r1, #135	; 0x87
   b80a8:	f7ff ff4d 	bl	b7f46 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b80ac:	6860      	ldr	r0, [r4, #4]
   b80ae:	f7ff ff4c 	bl	b7f4a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b80b2:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b80b4:	6860      	ldr	r0, [r4, #4]
   b80b6:	f7ff ff48 	bl	b7f4a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b80ba:	0603      	lsls	r3, r0, #24
   b80bc:	7260      	strb	r0, [r4, #9]
   b80be:	d503      	bpl.n	b80c8 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b80c0:	3d01      	subs	r5, #1
   b80c2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b80c6:	d1f5      	bne.n	b80b4 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b80c8:	b003      	add	sp, #12
   b80ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b80cc <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b80cc:	b570      	push	{r4, r5, r6, lr}
   b80ce:	4604      	mov	r4, r0
   b80d0:	460d      	mov	r5, r1
   b80d2:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b80d4:	2137      	movs	r1, #55	; 0x37
   b80d6:	2200      	movs	r2, #0
   b80d8:	f7ff ffc6 	bl	b8068 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b80dc:	4632      	mov	r2, r6
   b80de:	4629      	mov	r1, r5
   b80e0:	4620      	mov	r0, r4
  }
   b80e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b80e6:	f7ff bfbf 	b.w	b8068 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b80ec <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b80ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b80f0:	2500      	movs	r5, #0
   b80f2:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b80f4:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b80f6:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b80f8:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b80fa:	4604      	mov	r4, r0
   b80fc:	4690      	mov	r8, r2
   b80fe:	461e      	mov	r6, r3
   b8100:	f001 fba8 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b8104:	4641      	mov	r1, r8
   b8106:	4607      	mov	r7, r0
   b8108:	6860      	ldr	r0, [r4, #4]
   b810a:	f000 f9bb 	bl	b8484 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b810e:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b8110:	4a49      	ldr	r2, [pc, #292]	; (b8238 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b8112:	721d      	strb	r5, [r3, #8]
   b8114:	2501      	movs	r5, #1
   b8116:	60da      	str	r2, [r3, #12]
   b8118:	821d      	strh	r5, [r3, #16]
  spiStart();
   b811a:	4620      	mov	r0, r4
   b811c:	f7ff ff3c 	bl	b7f98 <_ZN9SdSpiCard8spiStartEv>
   b8120:	6863      	ldr	r3, [r4, #4]
   b8122:	4629      	mov	r1, r5
   b8124:	7d18      	ldrb	r0, [r3, #20]
   b8126:	f005 fb7e 	bl	bd826 <digitalWrite>
   b812a:	250a      	movs	r5, #10
    spiSend(0XFF);
   b812c:	6860      	ldr	r0, [r4, #4]
   b812e:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b8130:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b8132:	f7ff ff08 	bl	b7f46 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b8136:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b813a:	d1f7      	bne.n	b812c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b813c:	6863      	ldr	r3, [r4, #4]
   b813e:	4629      	mov	r1, r5
   b8140:	7d18      	ldrb	r0, [r3, #20]
   b8142:	f005 fb70 	bl	bd826 <digitalWrite>
  }
   b8146:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b8148:	2200      	movs	r2, #0
   b814a:	4611      	mov	r1, r2
   b814c:	4620      	mov	r0, r4
   b814e:	f7ff ff8b 	bl	b8068 <_ZN9SdSpiCard11cardCommandEhm>
   b8152:	2801      	cmp	r0, #1
   b8154:	4680      	mov	r8, r0
   b8156:	d018      	beq.n	b818a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b8158:	3d01      	subs	r5, #1
   b815a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b815e:	d107      	bne.n	b8170 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b8160:	2320      	movs	r3, #32
  spiStop();
   b8162:	4620      	mov	r0, r4
   b8164:	7023      	strb	r3, [r4, #0]
   b8166:	f7ff ff26 	bl	b7fb6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b816a:	2000      	movs	r0, #0
}
   b816c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b8170:	6860      	ldr	r0, [r4, #4]
   b8172:	21fd      	movs	r1, #253	; 0xfd
   b8174:	f7ff fee7 	bl	b7f46 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b8178:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b817c:	6860      	ldr	r0, [r4, #4]
   b817e:	f7ff fee4 	bl	b7f4a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b8182:	f1b8 0801 	subs.w	r8, r8, #1
   b8186:	d1f9      	bne.n	b817c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b8188:	e7de      	b.n	b8148 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b818a:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b818e:	2108      	movs	r1, #8
   b8190:	4620      	mov	r0, r4
   b8192:	f7ff ff69 	bl	b8068 <_ZN9SdSpiCard11cardCommandEhm>
   b8196:	2805      	cmp	r0, #5
   b8198:	d114      	bne.n	b81c4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b819a:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b819e:	2500      	movs	r5, #0
   b81a0:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b81a2:	462a      	mov	r2, r5
   b81a4:	2129      	movs	r1, #41	; 0x29
   b81a6:	4620      	mov	r0, r4
   b81a8:	f7ff ff90 	bl	b80cc <_ZN9SdSpiCard8cardAcmdEhm>
   b81ac:	4602      	mov	r2, r0
   b81ae:	b1d8      	cbz	r0, b81e8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b81b0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b81b4:	4639      	mov	r1, r7
   b81b6:	4620      	mov	r0, r4
   b81b8:	f7ff feca 	bl	b7f50 <_ZN9SdSpiCard10isTimedOutEtt>
   b81bc:	2800      	cmp	r0, #0
   b81be:	d0f0      	beq.n	b81a2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b81c0:	2343      	movs	r3, #67	; 0x43
   b81c2:	e7ce      	b.n	b8162 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b81c4:	2504      	movs	r5, #4
      m_status = spiReceive();
   b81c6:	6860      	ldr	r0, [r4, #4]
   b81c8:	f7ff febf 	bl	b7f4a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b81cc:	3d01      	subs	r5, #1
   b81ce:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b81d2:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b81d4:	d1f7      	bne.n	b81c6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b81d6:	28aa      	cmp	r0, #170	; 0xaa
   b81d8:	d104      	bne.n	b81e4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b81da:	2302      	movs	r3, #2
   b81dc:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b81de:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b81e2:	e7dd      	b.n	b81a0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b81e4:	2325      	movs	r3, #37	; 0x25
   b81e6:	e7bc      	b.n	b8162 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b81e8:	7aa3      	ldrb	r3, [r4, #10]
   b81ea:	2b02      	cmp	r3, #2
   b81ec:	d118      	bne.n	b8220 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b81ee:	213a      	movs	r1, #58	; 0x3a
   b81f0:	4620      	mov	r0, r4
   b81f2:	f7ff ff39 	bl	b8068 <_ZN9SdSpiCard11cardCommandEhm>
   b81f6:	b108      	cbz	r0, b81fc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b81f8:	2337      	movs	r3, #55	; 0x37
   b81fa:	e7b2      	b.n	b8162 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b81fc:	6860      	ldr	r0, [r4, #4]
   b81fe:	f7ff fea4 	bl	b7f4a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b8202:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b8206:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b8208:	bf04      	itt	eq
   b820a:	2303      	moveq	r3, #3
   b820c:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b820e:	6860      	ldr	r0, [r4, #4]
   b8210:	f7ff fe9b 	bl	b7f4a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b8214:	6860      	ldr	r0, [r4, #4]
   b8216:	f7ff fe98 	bl	b7f4a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b821a:	6860      	ldr	r0, [r4, #4]
   b821c:	f7ff fe95 	bl	b7f4a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b8220:	4620      	mov	r0, r4
   b8222:	f7ff fec8 	bl	b7fb6 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b8226:	6863      	ldr	r3, [r4, #4]
   b8228:	7930      	ldrb	r0, [r6, #4]
   b822a:	68b1      	ldr	r1, [r6, #8]
   b822c:	89b2      	ldrh	r2, [r6, #12]
   b822e:	821a      	strh	r2, [r3, #16]
   b8230:	7218      	strb	r0, [r3, #8]
   b8232:	60d9      	str	r1, [r3, #12]
  return true;
   b8234:	2001      	movs	r0, #1
   b8236:	e799      	b.n	b816c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b8238:	0003d090 	.word	0x0003d090

000b823c <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b823c:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b823e:	7a83      	ldrb	r3, [r0, #10]
   b8240:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b8242:	bf18      	it	ne
   b8244:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b8246:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b8248:	460a      	mov	r2, r1
   b824a:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b824c:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b824e:	f7ff ff0b 	bl	b8068 <_ZN9SdSpiCard11cardCommandEhm>
   b8252:	b130      	cbz	r0, b8262 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b8254:	2330      	movs	r3, #48	; 0x30
   b8256:	7023      	strb	r3, [r4, #0]
  spiStop();
   b8258:	4620      	mov	r0, r4
   b825a:	f7ff feac 	bl	b7fb6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b825e:	2500      	movs	r5, #0
   b8260:	e00b      	b.n	b827a <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b8262:	4629      	mov	r1, r5
   b8264:	f44f 7200 	mov.w	r2, #512	; 0x200
   b8268:	4620      	mov	r0, r4
   b826a:	f7ff feb7 	bl	b7fdc <_ZN9SdSpiCard8readDataEPhj>
   b826e:	4605      	mov	r5, r0
   b8270:	2800      	cmp	r0, #0
   b8272:	d0f1      	beq.n	b8258 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b8274:	4620      	mov	r0, r4
   b8276:	f7ff fe9e 	bl	b7fb6 <_ZN9SdSpiCard7spiStopEv>
}
   b827a:	4628      	mov	r0, r5
   b827c:	bd38      	pop	{r3, r4, r5, pc}

000b827e <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b827e:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b8280:	7a83      	ldrb	r3, [r0, #10]
   b8282:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b8284:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b8286:	bf18      	it	ne
   b8288:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b828a:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b828c:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b828e:	f7ff feeb 	bl	b8068 <_ZN9SdSpiCard11cardCommandEhm>
   b8292:	b130      	cbz	r0, b82a2 <_ZN9SdSpiCard9readStartEm+0x24>
   b8294:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b8296:	4620      	mov	r0, r4
   b8298:	7023      	strb	r3, [r4, #0]
   b829a:	f7ff fe8c 	bl	b7fb6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b829e:	2000      	movs	r0, #0
}
   b82a0:	bd10      	pop	{r4, pc}
  return true;
   b82a2:	2001      	movs	r0, #1
   b82a4:	e7fc      	b.n	b82a0 <_ZN9SdSpiCard9readStartEm+0x22>

000b82a6 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b82a6:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b82a8:	2200      	movs	r2, #0
   b82aa:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b82ac:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b82ae:	f7ff fedb 	bl	b8068 <_ZN9SdSpiCard11cardCommandEhm>
   b82b2:	b130      	cbz	r0, b82c2 <_ZN9SdSpiCard8readStopEv+0x1c>
   b82b4:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b82b6:	4620      	mov	r0, r4
   b82b8:	7023      	strb	r3, [r4, #0]
   b82ba:	f7ff fe7c 	bl	b7fb6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b82be:	2000      	movs	r0, #0
}
   b82c0:	bd10      	pop	{r4, pc}
  spiStop();
   b82c2:	4620      	mov	r0, r4
   b82c4:	f7ff fe77 	bl	b7fb6 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b82c8:	2001      	movs	r0, #1
   b82ca:	e7f9      	b.n	b82c0 <_ZN9SdSpiCard8readStopEv+0x1a>

000b82cc <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b82cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b82ce:	4604      	mov	r4, r0
   b82d0:	4616      	mov	r6, r2
   b82d2:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b82d4:	f7ff ffd3 	bl	b827e <_ZN9SdSpiCard9readStartEm>
   b82d8:	b168      	cbz	r0, b82f6 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b82da:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b82dc:	b2ab      	uxth	r3, r5
   b82de:	429f      	cmp	r7, r3
   b82e0:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b82e4:	d909      	bls.n	b82fa <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b82e6:	f44f 7200 	mov.w	r2, #512	; 0x200
   b82ea:	4620      	mov	r0, r4
   b82ec:	f7ff fe76 	bl	b7fdc <_ZN9SdSpiCard8readDataEPhj>
   b82f0:	3501      	adds	r5, #1
   b82f2:	2800      	cmp	r0, #0
   b82f4:	d1f2      	bne.n	b82dc <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b82f6:	2000      	movs	r0, #0
   b82f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b82fa:	4620      	mov	r0, r4
}
   b82fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b8300:	f7ff bfd1 	b.w	b82a6 <_ZN9SdSpiCard8readStopEv>

000b8304 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b8304:	b538      	push	{r3, r4, r5, lr}
   b8306:	4604      	mov	r4, r0
   b8308:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b830a:	6840      	ldr	r0, [r0, #4]
   b830c:	f7ff fe1b 	bl	b7f46 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b8310:	f44f 7200 	mov.w	r2, #512	; 0x200
   b8314:	6860      	ldr	r0, [r4, #4]
   b8316:	4629      	mov	r1, r5
   b8318:	f000 f8e6 	bl	b84e8 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b831c:	6860      	ldr	r0, [r4, #4]
   b831e:	21ff      	movs	r1, #255	; 0xff
   b8320:	f7ff fe11 	bl	b7f46 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b8324:	6860      	ldr	r0, [r4, #4]
   b8326:	21ff      	movs	r1, #255	; 0xff
   b8328:	f7ff fe0d 	bl	b7f46 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b832c:	6860      	ldr	r0, [r4, #4]
   b832e:	f7ff fe0c 	bl	b7f4a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b8332:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b8334:	f000 001f 	and.w	r0, r0, #31
   b8338:	2805      	cmp	r0, #5
   b833a:	d006      	beq.n	b834a <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b833c:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b833e:	4620      	mov	r0, r4
   b8340:	7023      	strb	r3, [r4, #0]
   b8342:	f7ff fe38 	bl	b7fb6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8346:	2000      	movs	r0, #0
}
   b8348:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b834a:	2001      	movs	r0, #1
   b834c:	e7fc      	b.n	b8348 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b834e <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b834e:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b8350:	7a83      	ldrb	r3, [r0, #10]
   b8352:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b8354:	bf18      	it	ne
   b8356:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b8358:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b835a:	460a      	mov	r2, r1
   b835c:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b835e:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b8360:	f7ff fe82 	bl	b8068 <_ZN9SdSpiCard11cardCommandEhm>
   b8364:	4606      	mov	r6, r0
   b8366:	b130      	cbz	r0, b8376 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b8368:	2332      	movs	r3, #50	; 0x32
   b836a:	7023      	strb	r3, [r4, #0]
  spiStop();
   b836c:	4620      	mov	r0, r4
   b836e:	f7ff fe22 	bl	b7fb6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8372:	2500      	movs	r5, #0
   b8374:	e01f      	b.n	b83b6 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b8376:	462a      	mov	r2, r5
   b8378:	21fe      	movs	r1, #254	; 0xfe
   b837a:	4620      	mov	r0, r4
   b837c:	f7ff ffc2 	bl	b8304 <_ZN9SdSpiCard9writeDataEhPKh>
   b8380:	2800      	cmp	r0, #0
   b8382:	d0f3      	beq.n	b836c <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b8384:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b8388:	4620      	mov	r0, r4
   b838a:	f7ff fe58 	bl	b803e <_ZN9SdSpiCard11waitNotBusyEt>
   b838e:	4605      	mov	r5, r0
   b8390:	b908      	cbnz	r0, b8396 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b8392:	235a      	movs	r3, #90	; 0x5a
   b8394:	e7e9      	b.n	b836a <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b8396:	4632      	mov	r2, r6
   b8398:	210d      	movs	r1, #13
   b839a:	4620      	mov	r0, r4
   b839c:	f7ff fe64 	bl	b8068 <_ZN9SdSpiCard11cardCommandEhm>
   b83a0:	b108      	cbz	r0, b83a6 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b83a2:	2329      	movs	r3, #41	; 0x29
   b83a4:	e7e1      	b.n	b836a <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b83a6:	6860      	ldr	r0, [r4, #4]
   b83a8:	f7ff fdcf 	bl	b7f4a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b83ac:	2800      	cmp	r0, #0
   b83ae:	d1f8      	bne.n	b83a2 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b83b0:	4620      	mov	r0, r4
   b83b2:	f7ff fe00 	bl	b7fb6 <_ZN9SdSpiCard7spiStopEv>
}
   b83b6:	4628      	mov	r0, r5
   b83b8:	bd70      	pop	{r4, r5, r6, pc}

000b83ba <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b83ba:	b513      	push	{r0, r1, r4, lr}
   b83bc:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b83be:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b83c2:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b83c4:	f7ff fe3b 	bl	b803e <_ZN9SdSpiCard11waitNotBusyEt>
   b83c8:	9a01      	ldr	r2, [sp, #4]
   b83ca:	b930      	cbnz	r0, b83da <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b83cc:	235b      	movs	r3, #91	; 0x5b
   b83ce:	7023      	strb	r3, [r4, #0]
  spiStop();
   b83d0:	4620      	mov	r0, r4
   b83d2:	f7ff fdf0 	bl	b7fb6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b83d6:	2000      	movs	r0, #0
   b83d8:	e005      	b.n	b83e6 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b83da:	21fc      	movs	r1, #252	; 0xfc
   b83dc:	4620      	mov	r0, r4
   b83de:	f7ff ff91 	bl	b8304 <_ZN9SdSpiCard9writeDataEhPKh>
   b83e2:	2800      	cmp	r0, #0
   b83e4:	d0f4      	beq.n	b83d0 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b83e6:	b002      	add	sp, #8
   b83e8:	bd10      	pop	{r4, pc}

000b83ea <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b83ea:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b83ec:	7a83      	ldrb	r3, [r0, #10]
   b83ee:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b83f0:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b83f2:	bf18      	it	ne
   b83f4:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b83f6:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b83f8:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b83fa:	f7ff fe35 	bl	b8068 <_ZN9SdSpiCard11cardCommandEhm>
   b83fe:	b130      	cbz	r0, b840e <_ZN9SdSpiCard10writeStartEm+0x24>
   b8400:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b8402:	4620      	mov	r0, r4
   b8404:	7023      	strb	r3, [r4, #0]
   b8406:	f7ff fdd6 	bl	b7fb6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b840a:	2000      	movs	r0, #0
}
   b840c:	bd10      	pop	{r4, pc}
  return true;
   b840e:	2001      	movs	r0, #1
   b8410:	e7fc      	b.n	b840c <_ZN9SdSpiCard10writeStartEm+0x22>

000b8412 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b8412:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b8414:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b8418:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b841a:	f7ff fe10 	bl	b803e <_ZN9SdSpiCard11waitNotBusyEt>
   b841e:	4605      	mov	r5, r0
   b8420:	b930      	cbnz	r0, b8430 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b8422:	2356      	movs	r3, #86	; 0x56
   b8424:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b8426:	4620      	mov	r0, r4
   b8428:	f7ff fdc5 	bl	b7fb6 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b842c:	4628      	mov	r0, r5
   b842e:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b8430:	6860      	ldr	r0, [r4, #4]
   b8432:	21fd      	movs	r1, #253	; 0xfd
   b8434:	f7ff fd87 	bl	b7f46 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b8438:	e7f5      	b.n	b8426 <_ZN9SdSpiCard9writeStopEv+0x14>

000b843a <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b843a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b843c:	4604      	mov	r4, r0
   b843e:	4616      	mov	r6, r2
   b8440:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b8442:	f7ff ffd2 	bl	b83ea <_ZN9SdSpiCard10writeStartEm>
   b8446:	b170      	cbz	r0, b8466 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b8448:	2500      	movs	r5, #0
   b844a:	42bd      	cmp	r5, r7
   b844c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b8450:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b8452:	d004      	beq.n	b845e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b8454:	f7ff ffb1 	bl	b83ba <_ZN9SdSpiCard9writeDataEPKh>
   b8458:	b128      	cbz	r0, b8466 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b845a:	3501      	adds	r5, #1
   b845c:	e7f5      	b.n	b844a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b845e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b8462:	f7ff bfd6 	b.w	b8412 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b8466:	4620      	mov	r0, r4
   b8468:	f7ff fda5 	bl	b7fb6 <_ZN9SdSpiCard7spiStopEv>
}
   b846c:	2000      	movs	r0, #0
   b846e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8470 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b8470:	4b01      	ldr	r3, [pc, #4]	; (b8478 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b8472:	2201      	movs	r2, #1
   b8474:	701a      	strb	r2, [r3, #0]
}
   b8476:	4770      	bx	lr
   b8478:	2003e648 	.word	0x2003e648

000b847c <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b847c:	1d01      	adds	r1, r0, #4
   b847e:	6800      	ldr	r0, [r0, #0]
   b8480:	f004 bd74 	b.w	bcf6c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b8484 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b8484:	b510      	push	{r4, lr}
   b8486:	4604      	mov	r4, r0
  m_csPin = csPin;
   b8488:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b848a:	6800      	ldr	r0, [r0, #0]
   b848c:	f004 fd40 	bl	bcf10 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b8490:	7d20      	ldrb	r0, [r4, #20]
   b8492:	2101      	movs	r1, #1
   b8494:	f005 f9b6 	bl	bd804 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b8498:	7d20      	ldrb	r0, [r4, #20]
   b849a:	2101      	movs	r1, #1
}
   b849c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b84a0:	f005 b9c1 	b.w	bd826 <digitalWrite>

000b84a4 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b84a4:	6800      	ldr	r0, [r0, #0]
   b84a6:	f004 bd47 	b.w	bcf38 <_ZN8SPIClass14endTransactionEv>

000b84aa <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b84aa:	6800      	ldr	r0, [r0, #0]
   b84ac:	21ff      	movs	r1, #255	; 0xff
   b84ae:	f004 bdcb 	b.w	bd048 <_ZN8SPIClass8transferEh>
	...

000b84b4 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b84b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b84b6:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b84b8:	4a07      	ldr	r2, [pc, #28]	; (b84d8 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b84ba:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b84bc:	2500      	movs	r5, #0
   b84be:	4c07      	ldr	r4, [pc, #28]	; (b84dc <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b84c0:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b84c2:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b84c4:	460a      	mov	r2, r1
   b84c6:	4629      	mov	r1, r5
   b84c8:	f004 fdc4 	bl	bd054 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b84cc:	7823      	ldrb	r3, [r4, #0]
   b84ce:	2b00      	cmp	r3, #0
   b84d0:	d0fc      	beq.n	b84cc <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b84d2:	2000      	movs	r0, #0
   b84d4:	b003      	add	sp, #12
   b84d6:	bd30      	pop	{r4, r5, pc}
   b84d8:	000b8471 	.word	0x000b8471
   b84dc:	2003e648 	.word	0x2003e648

000b84e0 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b84e0:	6800      	ldr	r0, [r0, #0]
   b84e2:	f004 bdb1 	b.w	bd048 <_ZN8SPIClass8transferEh>
	...

000b84e8 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b84e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b84ea:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b84ec:	4a06      	ldr	r2, [pc, #24]	; (b8508 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b84ee:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b84f0:	2500      	movs	r5, #0
   b84f2:	4c06      	ldr	r4, [pc, #24]	; (b850c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b84f4:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b84f6:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b84f8:	462a      	mov	r2, r5
   b84fa:	f004 fdab 	bl	bd054 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b84fe:	7823      	ldrb	r3, [r4, #0]
   b8500:	2b00      	cmp	r3, #0
   b8502:	d0fc      	beq.n	b84fe <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b8504:	b003      	add	sp, #12
   b8506:	bd30      	pop	{r4, r5, pc}
   b8508:	000b8471 	.word	0x000b8471
   b850c:	2003e648 	.word	0x2003e648

000b8510 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b8510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8514:	b085      	sub	sp, #20
   b8516:	461f      	mov	r7, r3
   b8518:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b851c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b8520:	eba8 0902 	sub.w	r9, r8, r2
   b8524:	eba7 0a01 	sub.w	sl, r7, r1
   b8528:	f1b9 0f00 	cmp.w	r9, #0
   b852c:	bfb8      	it	lt
   b852e:	f1c9 0900 	rsblt	r9, r9, #0
   b8532:	f1ba 0f00 	cmp.w	sl, #0
   b8536:	bfb8      	it	lt
   b8538:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b853c:	45d1      	cmp	r9, sl
        uint16_t color) {
   b853e:	4683      	mov	fp, r0
   b8540:	460c      	mov	r4, r1
   b8542:	4615      	mov	r5, r2
    if (steep) {
   b8544:	dd04      	ble.n	b8550 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b8546:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b8548:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b854a:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b854c:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b854e:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b8550:	42bc      	cmp	r4, r7
   b8552:	dd05      	ble.n	b8560 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b8554:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b8556:	4645      	mov	r5, r8
   b8558:	4690      	mov	r8, r2
    if (x0 > x1) {
   b855a:	4622      	mov	r2, r4
   b855c:	463c      	mov	r4, r7
   b855e:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b8560:	1b3e      	subs	r6, r7, r4
   b8562:	b2b2      	uxth	r2, r6
   b8564:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b8566:	eba8 0205 	sub.w	r2, r8, r5
   b856a:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b856e:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b8572:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b8576:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b857a:	4545      	cmp	r5, r8
   b857c:	bfb4      	ite	lt
   b857e:	2201      	movlt	r2, #1
   b8580:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b8584:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b8586:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b8588:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b858a:	42bc      	cmp	r4, r7
   b858c:	dc1c      	bgt.n	b85c8 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b858e:	f8db 2000 	ldr.w	r2, [fp]
   b8592:	9303      	str	r3, [sp, #12]
        if (steep) {
   b8594:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b8596:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b859a:	bfc7      	ittee	gt
   b859c:	4629      	movgt	r1, r5
   b859e:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b85a0:	462a      	movle	r2, r5
   b85a2:	4621      	movle	r1, r4
   b85a4:	4658      	mov	r0, fp
   b85a6:	47c0      	blx	r8
        }
        err -= dy;
   b85a8:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b85aa:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b85ac:	1ab6      	subs	r6, r6, r2
   b85ae:	b2b1      	uxth	r1, r6
   b85b0:	b236      	sxth	r6, r6
        if (err < 0) {
   b85b2:	2e00      	cmp	r6, #0
   b85b4:	da05      	bge.n	b85c2 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b85b6:	9a02      	ldr	r2, [sp, #8]
   b85b8:	4415      	add	r5, r2
            err += dx;
   b85ba:	9a00      	ldr	r2, [sp, #0]
   b85bc:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b85be:	b22d      	sxth	r5, r5
            err += dx;
   b85c0:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b85c2:	3401      	adds	r4, #1
   b85c4:	b224      	sxth	r4, r4
   b85c6:	e7e0      	b.n	b858a <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b85c8:	b005      	add	sp, #20
   b85ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b85ce <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b85ce:	4770      	bx	lr

000b85d0 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b85d0:	b410      	push	{r4}
    drawPixel(x, y, color);
   b85d2:	6804      	ldr	r4, [r0, #0]
   b85d4:	6924      	ldr	r4, [r4, #16]
   b85d6:	46a4      	mov	ip, r4
}
   b85d8:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b85dc:	4760      	bx	ip

000b85de <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b85de:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b85e0:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b85e2:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b85e6:	9502      	str	r5, [sp, #8]
   b85e8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b85ea:	46a4      	mov	ip, r4
}
   b85ec:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b85ee:	4760      	bx	ip

000b85f0 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b85f0:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b85f2:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b85f4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b85f8:	9502      	str	r5, [sp, #8]
   b85fa:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b85fc:	46a4      	mov	ip, r4
}
   b85fe:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b8600:	4760      	bx	ip

000b8602 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b8602:	b470      	push	{r4, r5, r6}
   b8604:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b8608:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b860c:	6804      	ldr	r4, [r0, #0]
   b860e:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b8612:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b8614:	46a4      	mov	ip, r4
}
   b8616:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b8618:	4760      	bx	ip

000b861a <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b861a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b861e:	461c      	mov	r4, r3
    startWrite();
   b8620:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b8622:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b8626:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b8628:	4605      	mov	r5, r0
   b862a:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b862c:	3c01      	subs	r4, #1
   b862e:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b8630:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b8632:	b224      	sxth	r4, r4
    startWrite();
   b8634:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b8636:	682b      	ldr	r3, [r5, #0]
   b8638:	f8cd 8004 	str.w	r8, [sp, #4]
   b863c:	9400      	str	r4, [sp, #0]
   b863e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b8640:	4628      	mov	r0, r5
   b8642:	463b      	mov	r3, r7
   b8644:	4632      	mov	r2, r6
   b8646:	4639      	mov	r1, r7
   b8648:	47a0      	blx	r4
    endWrite();
   b864a:	682b      	ldr	r3, [r5, #0]
   b864c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b864e:	4628      	mov	r0, r5
}
   b8650:	b002      	add	sp, #8
   b8652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b8656:	4718      	bx	r3

000b8658 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b8658:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b865c:	461d      	mov	r5, r3
    startWrite();
   b865e:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b8660:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b8664:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b8666:	4604      	mov	r4, r0
   b8668:	4617      	mov	r7, r2
   b866a:	460e      	mov	r6, r1
    startWrite();
   b866c:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b866e:	e9cd 7800 	strd	r7, r8, [sp]
   b8672:	6822      	ldr	r2, [r4, #0]
   b8674:	1e6b      	subs	r3, r5, #1
   b8676:	4433      	add	r3, r6
   b8678:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b867a:	4620      	mov	r0, r4
   b867c:	b21b      	sxth	r3, r3
   b867e:	463a      	mov	r2, r7
   b8680:	4631      	mov	r1, r6
   b8682:	47a8      	blx	r5
    endWrite();
   b8684:	6823      	ldr	r3, [r4, #0]
   b8686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8688:	4620      	mov	r0, r4
}
   b868a:	b002      	add	sp, #8
   b868c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b8690:	4718      	bx	r3

000b8692 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b8692:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b8696:	461e      	mov	r6, r3
    startWrite();
   b8698:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b869a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b869e:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b86a0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b86a4:	460c      	mov	r4, r1
   b86a6:	4605      	mov	r5, r0
   b86a8:	4617      	mov	r7, r2
    startWrite();
   b86aa:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b86ac:	4426      	add	r6, r4
   b86ae:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b86b0:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b86b2:	da0b      	bge.n	b86cc <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b86b4:	f8cd 8000 	str.w	r8, [sp]
   b86b8:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b86bc:	4621      	mov	r1, r4
   b86be:	464b      	mov	r3, r9
   b86c0:	463a      	mov	r2, r7
   b86c2:	4628      	mov	r0, r5
   b86c4:	3401      	adds	r4, #1
   b86c6:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b86c8:	b224      	sxth	r4, r4
   b86ca:	e7f0      	b.n	b86ae <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b86cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b86ce:	4628      	mov	r0, r5
}
   b86d0:	b002      	add	sp, #8
   b86d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b86d6:	4718      	bx	r3

000b86d8 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b86d8:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b86da:	6802      	ldr	r2, [r0, #0]
   b86dc:	9101      	str	r1, [sp, #4]
   b86de:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b86e2:	9100      	str	r1, [sp, #0]
   b86e4:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b86e6:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b86ea:	2200      	movs	r2, #0
   b86ec:	4611      	mov	r1, r2
   b86ee:	47a0      	blx	r4
}
   b86f0:	b002      	add	sp, #8
   b86f2:	bd10      	pop	{r4, pc}

000b86f4 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b86f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b86f8:	4299      	cmp	r1, r3
        uint16_t color) {
   b86fa:	4616      	mov	r6, r2
   b86fc:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b8700:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b8704:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b8706:	4680      	mov	r8, r0
   b8708:	460d      	mov	r5, r1
   b870a:	461c      	mov	r4, r3
    if(x0 == x1){
   b870c:	d113      	bne.n	b8736 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b870e:	42be      	cmp	r6, r7
   b8710:	bfc8      	it	gt
   b8712:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b8714:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b8718:	bfc4      	itt	gt
   b871a:	463e      	movgt	r6, r7
   b871c:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b871e:	1c7b      	adds	r3, r7, #1
   b8720:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b8722:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b8724:	b21b      	sxth	r3, r3
   b8726:	4632      	mov	r2, r6
   b8728:	4629      	mov	r1, r5
   b872a:	4640      	mov	r0, r8
   b872c:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b872e:	b003      	add	sp, #12
   b8730:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b8734:	4760      	bx	ip
    } else if(y0 == y1){
   b8736:	42be      	cmp	r6, r7
   b8738:	d10a      	bne.n	b8750 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b873a:	4299      	cmp	r1, r3
   b873c:	bfc2      	ittt	gt
   b873e:	460b      	movgt	r3, r1
   b8740:	4625      	movgt	r5, r4
   b8742:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b8744:	1c63      	adds	r3, r4, #1
   b8746:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b874a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b874c:	1b5b      	subs	r3, r3, r5
   b874e:	e7e9      	b.n	b8724 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b8750:	6953      	ldr	r3, [r2, #20]
   b8752:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b8754:	e9cd 7900 	strd	r7, r9, [sp]
   b8758:	f8d8 3000 	ldr.w	r3, [r8]
   b875c:	4640      	mov	r0, r8
   b875e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b8760:	4632      	mov	r2, r6
   b8762:	4623      	mov	r3, r4
   b8764:	4629      	mov	r1, r5
   b8766:	47b8      	blx	r7
        endWrite();
   b8768:	f8d8 3000 	ldr.w	r3, [r8]
   b876c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b876e:	4640      	mov	r0, r8
}
   b8770:	b003      	add	sp, #12
   b8772:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b8776:	4718      	bx	r3

000b8778 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b8778:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b877c:	461d      	mov	r5, r3
    startWrite();
   b877e:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b8780:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b8784:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b8786:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b878a:	4604      	mov	r4, r0
   b878c:	460f      	mov	r7, r1
   b878e:	4616      	mov	r6, r2
    startWrite();
   b8790:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b8792:	6823      	ldr	r3, [r4, #0]
   b8794:	f8cd 8000 	str.w	r8, [sp]
   b8798:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b879c:	4632      	mov	r2, r6
   b879e:	462b      	mov	r3, r5
   b87a0:	4639      	mov	r1, r7
   b87a2:	4620      	mov	r0, r4
   b87a4:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b87a6:	6823      	ldr	r3, [r4, #0]
   b87a8:	f8cd 8000 	str.w	r8, [sp]
   b87ac:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b87b0:	4432      	add	r2, r6
   b87b2:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b87b6:	4639      	mov	r1, r7
   b87b8:	462b      	mov	r3, r5
   b87ba:	4620      	mov	r0, r4
   b87bc:	b212      	sxth	r2, r2
   b87be:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b87c0:	6823      	ldr	r3, [r4, #0]
   b87c2:	f8cd 8000 	str.w	r8, [sp]
   b87c6:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b87ca:	4632      	mov	r2, r6
   b87cc:	464b      	mov	r3, r9
   b87ce:	4639      	mov	r1, r7
   b87d0:	4620      	mov	r0, r4
   b87d2:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b87d4:	1e6b      	subs	r3, r5, #1
   b87d6:	19d9      	adds	r1, r3, r7
   b87d8:	6823      	ldr	r3, [r4, #0]
   b87da:	f8cd 8000 	str.w	r8, [sp]
   b87de:	6a1d      	ldr	r5, [r3, #32]
   b87e0:	4620      	mov	r0, r4
   b87e2:	464b      	mov	r3, r9
   b87e4:	4632      	mov	r2, r6
   b87e6:	b209      	sxth	r1, r1
   b87e8:	47a8      	blx	r5
    endWrite();
   b87ea:	6823      	ldr	r3, [r4, #0]
   b87ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b87ee:	4620      	mov	r0, r4
}
   b87f0:	b002      	add	sp, #8
   b87f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b87f6:	4718      	bx	r3

000b87f8 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b87f8:	4770      	bx	lr

000b87fa <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b87fa:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b87fe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b8802:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b8804:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b8806:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b880a:	bf59      	ittee	pl
   b880c:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b880e:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b8810:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b8812:	81c3      	strhmi	r3, [r0, #14]
}
   b8814:	4770      	bx	lr
	...

000b8818 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b8818:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b881a:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b881c:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b881e:	4a07      	ldr	r2, [pc, #28]	; (b883c <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b8820:	4d07      	ldr	r5, [pc, #28]	; (b8840 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b8822:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b8824:	2400      	movs	r4, #0
    _width    = WIDTH;
   b8826:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b8828:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b882c:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b8830:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b8832:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b8834:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b8836:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b8838:	6204      	str	r4, [r0, #32]
}
   b883a:	bd30      	pop	{r4, r5, pc}
   b883c:	01000101 	.word	0x01000101
   b8840:	000c1458 	.word	0x000c1458

000b8844 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8848:	b089      	sub	sp, #36	; 0x24
   b884a:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b884e:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8850:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b8854:	9304      	str	r3, [sp, #16]
   b8856:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b885a:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b885c:	9305      	str	r3, [sp, #20]
   b885e:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b8862:	4604      	mov	r4, r0
    startWrite();
   b8864:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b8866:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b886a:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b886e:	bf48      	it	mi
   b8870:	f108 020e 	addmi.w	r2, r8, #14
   b8874:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b8878:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b887a:	4635      	mov	r5, r6
   b887c:	9b03      	ldr	r3, [sp, #12]
   b887e:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b8880:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b8884:	189a      	adds	r2, r3, r2
   b8886:	9b05      	ldr	r3, [sp, #20]
   b8888:	428b      	cmp	r3, r1
   b888a:	b212      	sxth	r2, r2
   b888c:	dd27      	ble.n	b88de <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b888e:	9b04      	ldr	r3, [sp, #16]
   b8890:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b8892:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8896:	9306      	str	r3, [sp, #24]
   b8898:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b889c:	4580      	cmp	r8, r0
   b889e:	fa1f f189 	uxth.w	r1, r9
   b88a2:	dd17      	ble.n	b88d4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b88a4:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b88a6:	bf05      	ittet	eq
   b88a8:	9b06      	ldreq	r3, [sp, #24]
   b88aa:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b88ac:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b88ae:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b88b0:	bf18      	it	ne
   b88b2:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b88b4:	062b      	lsls	r3, r5, #24
   b88b6:	d50a      	bpl.n	b88ce <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b88b8:	9b02      	ldr	r3, [sp, #8]
   b88ba:	6820      	ldr	r0, [r4, #0]
   b88bc:	9207      	str	r2, [sp, #28]
   b88be:	4419      	add	r1, r3
   b88c0:	6983      	ldr	r3, [r0, #24]
   b88c2:	b209      	sxth	r1, r1
   b88c4:	461f      	mov	r7, r3
   b88c6:	4620      	mov	r0, r4
   b88c8:	4653      	mov	r3, sl
   b88ca:	47b8      	blx	r7
   b88cc:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b88ce:	f109 0901 	add.w	r9, r9, #1
   b88d2:	e7e1      	b.n	b8898 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b88d4:	9b01      	ldr	r3, [sp, #4]
   b88d6:	3301      	adds	r3, #1
   b88d8:	9301      	str	r3, [sp, #4]
   b88da:	445e      	add	r6, fp
   b88dc:	e7ce      	b.n	b887c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b88de:	6823      	ldr	r3, [r4, #0]
   b88e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b88e2:	4620      	mov	r0, r4
}
   b88e4:	b009      	add	sp, #36	; 0x24
   b88e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b88ea:	4718      	bx	r3

000b88ec <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b88ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b88f0:	ed2d 8b02 	vpush	{d8}
   b88f4:	b091      	sub	sp, #68	; 0x44
   b88f6:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b88f8:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b88fa:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b88fe:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b8902:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b8906:	9103      	str	r1, [sp, #12]
   b8908:	461f      	mov	r7, r3
   b890a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b890e:	9304      	str	r3, [sp, #16]
   b8910:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b8912:	2a00      	cmp	r2, #0
   b8914:	f040 80c5 	bne.w	b8aa2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b8918:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b891c:	428b      	cmp	r3, r1
   b891e:	f340 814c 	ble.w	b8bba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b8922:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b8926:	42b3      	cmp	r3, r6
   b8928:	f340 8147 	ble.w	b8bba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b892c:	2306      	movs	r3, #6
   b892e:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b8932:	2b00      	cmp	r3, #0
   b8934:	f340 8141 	ble.w	b8bba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b8938:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b893c:	2b00      	cmp	r3, #0
   b893e:	f340 813c 	ble.w	b8bba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b8942:	7f03      	ldrb	r3, [r0, #28]
   b8944:	b91b      	cbnz	r3, b894e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b8946:	2faf      	cmp	r7, #175	; 0xaf
   b8948:	bf84      	itt	hi
   b894a:	3701      	addhi	r7, #1
   b894c:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b894e:	f8db 3000 	ldr.w	r3, [fp]
   b8952:	4658      	mov	r0, fp
   b8954:	695b      	ldr	r3, [r3, #20]
   b8956:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b8958:	2205      	movs	r2, #5
   b895a:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b895c:	2200      	movs	r2, #0
   b895e:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b8960:	4a98      	ldr	r2, [pc, #608]	; (b8bc4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b8962:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b8966:	18d3      	adds	r3, r2, r3
   b8968:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b896a:	b2b3      	uxth	r3, r6
   b896c:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b896e:	9a05      	ldr	r2, [sp, #20]
   b8970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8972:	5c9b      	ldrb	r3, [r3, r2]
   b8974:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8976:	b2ab      	uxth	r3, r5
   b8978:	930b      	str	r3, [sp, #44]	; 0x2c
   b897a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b897e:	9308      	str	r3, [sp, #32]
   b8980:	9b03      	ldr	r3, [sp, #12]
   b8982:	fb02 f905 	mul.w	r9, r2, r5
   b8986:	fa19 f983 	uxtah	r9, r9, r3
   b898a:	fa0f f389 	sxth.w	r3, r9
   b898e:	ee08 3a10 	vmov	s16, r3
   b8992:	2308      	movs	r3, #8
   b8994:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b8996:	9b03      	ldr	r3, [sp, #12]
   b8998:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b899c:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b89a0:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b89a4:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b89a6:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b89aa:	07d2      	lsls	r2, r2, #31
   b89ac:	d552      	bpl.n	b8a54 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b89ae:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b89b0:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b89b4:	d13e      	bne.n	b8a34 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b89b6:	2c01      	cmp	r4, #1
   b89b8:	d13c      	bne.n	b8a34 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b89ba:	699b      	ldr	r3, [r3, #24]
   b89bc:	9906      	ldr	r1, [sp, #24]
   b89be:	461f      	mov	r7, r3
   b89c0:	9b04      	ldr	r3, [sp, #16]
   b89c2:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b89c4:	b212      	sxth	r2, r2
   b89c6:	4651      	mov	r1, sl
   b89c8:	4658      	mov	r0, fp
   b89ca:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b89cc:	f109 0301 	add.w	r3, r9, #1
   b89d0:	fa4f f983 	sxtb.w	r9, r3
   b89d4:	9b07      	ldr	r3, [sp, #28]
   b89d6:	085b      	lsrs	r3, r3, #1
   b89d8:	9307      	str	r3, [sp, #28]
   b89da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b89dc:	3b01      	subs	r3, #1
   b89de:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b89e2:	930a      	str	r3, [sp, #40]	; 0x28
   b89e4:	d1de      	bne.n	b89a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b89e6:	9f05      	ldr	r7, [sp, #20]
   b89e8:	3701      	adds	r7, #1
   b89ea:	b27b      	sxtb	r3, r7
   b89ec:	9305      	str	r3, [sp, #20]
   b89ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b89f0:	3b01      	subs	r3, #1
   b89f2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b89f6:	9309      	str	r3, [sp, #36]	; 0x24
   b89f8:	d1b9      	bne.n	b896e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b89fa:	9b04      	ldr	r3, [sp, #16]
   b89fc:	4543      	cmp	r3, r8
   b89fe:	d00f      	beq.n	b8a20 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b8a00:	2d01      	cmp	r5, #1
   b8a02:	f8db 3000 	ldr.w	r3, [fp]
   b8a06:	d13b      	bne.n	b8a80 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b8a08:	2c01      	cmp	r4, #1
   b8a0a:	d139      	bne.n	b8a80 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b8a0c:	9908      	ldr	r1, [sp, #32]
   b8a0e:	f8cd 8000 	str.w	r8, [sp]
   b8a12:	3105      	adds	r1, #5
   b8a14:	6a1c      	ldr	r4, [r3, #32]
   b8a16:	4632      	mov	r2, r6
   b8a18:	2308      	movs	r3, #8
   b8a1a:	b209      	sxth	r1, r1
   b8a1c:	4658      	mov	r0, fp
   b8a1e:	47a0      	blx	r4
        endWrite();
   b8a20:	f8db 3000 	ldr.w	r3, [fp]
   b8a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8a26:	4658      	mov	r0, fp
}
   b8a28:	b011      	add	sp, #68	; 0x44
   b8a2a:	ecbd 8b02 	vpop	{d8}
   b8a2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b8a32:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b8a34:	9906      	ldr	r1, [sp, #24]
   b8a36:	fb14 f202 	smulbb	r2, r4, r2
   b8a3a:	440a      	add	r2, r1
   b8a3c:	9904      	ldr	r1, [sp, #16]
   b8a3e:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8a40:	9400      	str	r4, [sp, #0]
   b8a42:	69db      	ldr	r3, [r3, #28]
   b8a44:	ee18 1a10 	vmov	r1, s16
   b8a48:	461f      	mov	r7, r3
   b8a4a:	b212      	sxth	r2, r2
   b8a4c:	462b      	mov	r3, r5
   b8a4e:	4658      	mov	r0, fp
   b8a50:	47b8      	blx	r7
   b8a52:	e7bb      	b.n	b89cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b8a54:	9a04      	ldr	r2, [sp, #16]
   b8a56:	4542      	cmp	r2, r8
   b8a58:	d0b8      	beq.n	b89cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b8a5a:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b8a5c:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b8a60:	d107      	bne.n	b8a72 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b8a62:	2c01      	cmp	r4, #1
   b8a64:	d105      	bne.n	b8a72 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b8a66:	699b      	ldr	r3, [r3, #24]
   b8a68:	9906      	ldr	r1, [sp, #24]
   b8a6a:	461f      	mov	r7, r3
   b8a6c:	440a      	add	r2, r1
   b8a6e:	4643      	mov	r3, r8
   b8a70:	e7a8      	b.n	b89c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8a72:	9906      	ldr	r1, [sp, #24]
   b8a74:	f8cd 8004 	str.w	r8, [sp, #4]
   b8a78:	fb14 f202 	smulbb	r2, r4, r2
   b8a7c:	440a      	add	r2, r1
   b8a7e:	e7df      	b.n	b8a40 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b8a80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8a82:	f8cd 8004 	str.w	r8, [sp, #4]
   b8a86:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b8a8a:	9a08      	ldr	r2, [sp, #32]
   b8a8c:	00e4      	lsls	r4, r4, #3
   b8a8e:	440a      	add	r2, r1
   b8a90:	4611      	mov	r1, r2
   b8a92:	9400      	str	r4, [sp, #0]
   b8a94:	69dc      	ldr	r4, [r3, #28]
   b8a96:	4632      	mov	r2, r6
   b8a98:	462b      	mov	r3, r5
   b8a9a:	b209      	sxth	r1, r1
   b8a9c:	4658      	mov	r0, fp
   b8a9e:	47a0      	blx	r4
        endWrite();
   b8aa0:	e7be      	b.n	b8a20 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b8aa2:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b8aa4:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b8aa6:	6812      	ldr	r2, [r2, #0]
   b8aa8:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b8aaa:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b8aac:	b2ff      	uxtb	r7, r7
   b8aae:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b8ab2:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b8ab6:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b8ab8:	789a      	ldrb	r2, [r3, #2]
   b8aba:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b8abc:	78da      	ldrb	r2, [r3, #3]
   b8abe:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b8ac0:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b8ac2:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b8ac6:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b8aca:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b8acc:	d801      	bhi.n	b8ad2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b8ace:	2c01      	cmp	r4, #1
   b8ad0:	d957      	bls.n	b8b82 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b8ad2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b8ad6:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b8ad8:	fa0f f38a 	sxth.w	r3, sl
   b8adc:	9307      	str	r3, [sp, #28]
        startWrite();
   b8ade:	f8db 3000 	ldr.w	r3, [fp]
   b8ae2:	4658      	mov	r0, fp
   b8ae4:	695b      	ldr	r3, [r3, #20]
   b8ae6:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8ae8:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b8aea:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8aee:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8af0:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b8af4:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b8af6:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8af8:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b8afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8afc:	429f      	cmp	r7, r3
   b8afe:	d28f      	bcs.n	b8a20 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8b00:	9b07      	ldr	r3, [sp, #28]
   b8b02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b8b04:	443b      	add	r3, r7
   b8b06:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b8b0a:	2200      	movs	r2, #0
   b8b0c:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8b0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8b10:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8b12:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8b16:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8b1a:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8b1e:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b8b20:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b8b22:	9905      	ldr	r1, [sp, #20]
   b8b24:	4291      	cmp	r1, r2
   b8b26:	d241      	bcs.n	b8bac <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b8b28:	1c5a      	adds	r2, r3, #1
   b8b2a:	b2d2      	uxtb	r2, r2
   b8b2c:	075b      	lsls	r3, r3, #29
   b8b2e:	920d      	str	r2, [sp, #52]	; 0x34
   b8b30:	d107      	bne.n	b8b42 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b8b32:	9b06      	ldr	r3, [sp, #24]
   b8b34:	9906      	ldr	r1, [sp, #24]
   b8b36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8b38:	3301      	adds	r3, #1
   b8b3a:	b29b      	uxth	r3, r3
   b8b3c:	f812 9001 	ldrb.w	r9, [r2, r1]
   b8b40:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b8b42:	f019 0f80 	tst.w	r9, #128	; 0x80
   b8b46:	d012      	beq.n	b8b6e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b8b48:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8b4a:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8b4e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b8b52:	d11a      	bne.n	b8b8a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b8b54:	2c01      	cmp	r4, #1
   b8b56:	d118      	bne.n	b8b8a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8b58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b8b5a:	699b      	ldr	r3, [r3, #24]
   b8b5c:	4411      	add	r1, r2
   b8b5e:	9a05      	ldr	r2, [sp, #20]
   b8b60:	4411      	add	r1, r2
   b8b62:	461e      	mov	r6, r3
   b8b64:	4652      	mov	r2, sl
   b8b66:	9b04      	ldr	r3, [sp, #16]
   b8b68:	b209      	sxth	r1, r1
   b8b6a:	4658      	mov	r0, fp
   b8b6c:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b8b6e:	9e05      	ldr	r6, [sp, #20]
   b8b70:	3601      	adds	r6, #1
   b8b72:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b8b74:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b8b78:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b8b7a:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b8b7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b8b80:	e7ce      	b.n	b8b20 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b8b82:	2300      	movs	r3, #0
   b8b84:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b8b88:	e7a9      	b.n	b8ade <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8b8a:	9805      	ldr	r0, [sp, #20]
   b8b8c:	9a08      	ldr	r2, [sp, #32]
   b8b8e:	4402      	add	r2, r0
   b8b90:	fb02 1105 	mla	r1, r2, r5, r1
   b8b94:	9a04      	ldr	r2, [sp, #16]
   b8b96:	e9cd 4200 	strd	r4, r2, [sp]
   b8b9a:	69db      	ldr	r3, [r3, #28]
   b8b9c:	ee18 2a10 	vmov	r2, s16
   b8ba0:	461e      	mov	r6, r3
   b8ba2:	b209      	sxth	r1, r1
   b8ba4:	462b      	mov	r3, r5
   b8ba6:	4658      	mov	r0, fp
   b8ba8:	47b0      	blx	r6
   b8baa:	e7e0      	b.n	b8b6e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b8bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b8bae:	3701      	adds	r7, #1
   b8bb0:	4498      	add	r8, r3
   b8bb2:	fa5f f888 	uxtb.w	r8, r8
   b8bb6:	b2ff      	uxtb	r7, r7
   b8bb8:	e79f      	b.n	b8afa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b8bba:	b011      	add	sp, #68	; 0x44
   b8bbc:	ecbd 8b02 	vpop	{d8}
   b8bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8bc4:	000c0f4d 	.word	0x000c0f4d

000b8bc8 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b8bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b8bca:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b8bcc:	b085      	sub	sp, #20
   b8bce:	4604      	mov	r4, r0
   b8bd0:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b8bd2:	2a00      	cmp	r2, #0
   b8bd4:	d134      	bne.n	b8c40 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b8bd6:	290a      	cmp	r1, #10
   b8bd8:	d108      	bne.n	b8bec <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b8bda:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b8bdc:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b8bde:	7e42      	ldrb	r2, [r0, #25]
   b8be0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b8be4:	8263      	strh	r3, [r4, #18]
}
   b8be6:	2001      	movs	r0, #1
   b8be8:	b005      	add	sp, #20
   b8bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b8bec:	290d      	cmp	r1, #13
   b8bee:	d0fa      	beq.n	b8be6 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b8bf0:	7ee1      	ldrb	r1, [r4, #27]
   b8bf2:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b8bf4:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b8bf6:	b171      	cbz	r1, b8c16 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b8bf8:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b8bfc:	2106      	movs	r1, #6
   b8bfe:	fb11 6100 	smlabb	r1, r1, r0, r6
   b8c02:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b8c06:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b8c08:	bfc1      	itttt	gt
   b8c0a:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b8c0e:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b8c10:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b8c14:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b8c16:	8ae2      	ldrh	r2, [r4, #22]
   b8c18:	9201      	str	r2, [sp, #4]
   b8c1a:	8aa2      	ldrh	r2, [r4, #20]
   b8c1c:	9200      	str	r2, [sp, #0]
   b8c1e:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b8c22:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b8c26:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b8c2a:	4620      	mov	r0, r4
   b8c2c:	f7ff fe5e 	bl	b88ec <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b8c30:	7e23      	ldrb	r3, [r4, #24]
   b8c32:	8a22      	ldrh	r2, [r4, #16]
   b8c34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b8c38:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b8c3c:	8223      	strh	r3, [r4, #16]
   b8c3e:	e7d2      	b.n	b8be6 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b8c40:	290a      	cmp	r1, #10
   b8c42:	d107      	bne.n	b8c54 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b8c44:	2300      	movs	r3, #0
   b8c46:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b8c48:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b8c4a:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b8c4c:	8a43      	ldrh	r3, [r0, #18]
   b8c4e:	fb01 3302 	mla	r3, r1, r2, r3
   b8c52:	e7c7      	b.n	b8be4 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b8c54:	290d      	cmp	r1, #13
   b8c56:	d0c6      	beq.n	b8be6 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b8c58:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b8c5a:	42a9      	cmp	r1, r5
   b8c5c:	d3c3      	bcc.n	b8be6 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b8c5e:	7a51      	ldrb	r1, [r2, #9]
   b8c60:	4299      	cmp	r1, r3
   b8c62:	d3c0      	bcc.n	b8be6 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b8c64:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b8c66:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b8c68:	b2ed      	uxtb	r5, r5
   b8c6a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b8c6e:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b8c70:	b328      	cbz	r0, b8cbe <_ZN12Adafruit_GFX5writeEh+0xf6>
   b8c72:	78e9      	ldrb	r1, [r5, #3]
   b8c74:	b319      	cbz	r1, b8cbe <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b8c76:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b8c78:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b8c7a:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b8c7c:	b191      	cbz	r1, b8ca4 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b8c7e:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b8c82:	4408      	add	r0, r1
   b8c84:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b8c88:	fb06 1100 	mla	r1, r6, r0, r1
   b8c8c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b8c90:	4281      	cmp	r1, r0
   b8c92:	dd07      	ble.n	b8ca4 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b8c94:	2000      	movs	r0, #0
   b8c96:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b8c98:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b8c9c:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b8c9e:	fb02 1207 	mla	r2, r2, r7, r1
   b8ca2:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b8ca4:	8ae2      	ldrh	r2, [r4, #22]
   b8ca6:	9201      	str	r2, [sp, #4]
   b8ca8:	8aa2      	ldrh	r2, [r4, #20]
   b8caa:	9200      	str	r2, [sp, #0]
   b8cac:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b8cb0:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b8cb4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b8cb8:	4620      	mov	r0, r4
   b8cba:	f7ff fe17 	bl	b88ec <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b8cbe:	7929      	ldrb	r1, [r5, #4]
   b8cc0:	7e22      	ldrb	r2, [r4, #24]
   b8cc2:	8a23      	ldrh	r3, [r4, #16]
   b8cc4:	fb01 3302 	mla	r3, r1, r2, r3
   b8cc8:	e7b8      	b.n	b8c3c <_ZN12Adafruit_GFX5writeEh+0x74>

000b8cca <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b8cca:	2901      	cmp	r1, #1
   b8ccc:	bf38      	it	cc
   b8cce:	2101      	movcc	r1, #1
   b8cd0:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b8cd2:	7641      	strb	r1, [r0, #25]
}
   b8cd4:	4770      	bx	lr

000b8cd6 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   b8cd6:	6042      	str	r2, [r0, #4]
  _begun = false;
   b8cd8:	2200      	movs	r2, #0
   b8cda:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   b8cdc:	2220      	movs	r2, #32
  _addr = addr;
   b8cde:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   b8ce0:	60c2      	str	r2, [r0, #12]
#endif
}
   b8ce2:	4770      	bx	lr

000b8ce4 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   b8ce4:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   b8ce6:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   b8ce8:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   b8cea:	b153      	cbz	r3, b8d02 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   b8cec:	7821      	ldrb	r1, [r4, #0]
   b8cee:	6860      	ldr	r0, [r4, #4]
   b8cf0:	f003 ff02 	bl	bcaf8 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   b8cf4:	6860      	ldr	r0, [r4, #4]
   b8cf6:	f003 ff07 	bl	bcb08 <_ZN7TwoWire15endTransmissionEv>
   b8cfa:	fab0 f080 	clz	r0, r0
   b8cfe:	0940      	lsrs	r0, r0, #5
    return true;
  }
  return false;
}
   b8d00:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   b8d02:	2101      	movs	r1, #1
   b8d04:	f000 f803 	bl	b8d0e <_ZN18Adafruit_I2CDevice5beginEb>
   b8d08:	2800      	cmp	r0, #0
   b8d0a:	d1ef      	bne.n	b8cec <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   b8d0c:	e7f8      	b.n	b8d00 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000b8d0e <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b8d0e:	b538      	push	{r3, r4, r5, lr}
   b8d10:	4604      	mov	r4, r0
  _wire->begin();
   b8d12:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b8d14:	460d      	mov	r5, r1
  _wire->begin();
   b8d16:	f003 fee9 	bl	bcaec <_ZN7TwoWire5beginEv>
  _begun = true;
   b8d1a:	2001      	movs	r0, #1
   b8d1c:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   b8d1e:	b125      	cbz	r5, b8d2a <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   b8d20:	4620      	mov	r0, r4
}
   b8d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   b8d26:	f7ff bfdd 	b.w	b8ce4 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   b8d2a:	bd38      	pop	{r3, r4, r5, pc}

000b8d2c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   b8d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8d30:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   b8d34:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   b8d36:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   b8d38:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   b8d3a:	4432      	add	r2, r6
   b8d3c:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   b8d3e:	4604      	mov	r4, r0
   b8d40:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   b8d42:	d902      	bls.n	b8d4a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   b8d44:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
   b8d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   b8d4a:	7801      	ldrb	r1, [r0, #0]
   b8d4c:	6840      	ldr	r0, [r0, #4]
   b8d4e:	f003 fed3 	bl	bcaf8 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b8d52:	b97e      	cbnz	r6, b8d74 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   b8d54:	6860      	ldr	r0, [r4, #4]
   b8d56:	6803      	ldr	r3, [r0, #0]
   b8d58:	462a      	mov	r2, r5
   b8d5a:	68db      	ldr	r3, [r3, #12]
   b8d5c:	4641      	mov	r1, r8
   b8d5e:	4798      	blx	r3
   b8d60:	4285      	cmp	r5, r0
   b8d62:	d1ef      	bne.n	b8d44 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   b8d64:	6860      	ldr	r0, [r4, #4]
   b8d66:	4639      	mov	r1, r7
   b8d68:	f003 feca 	bl	bcb00 <_ZN7TwoWire15endTransmissionEh>
   b8d6c:	fab0 f080 	clz	r0, r0
   b8d70:	0940      	lsrs	r0, r0, #5
   b8d72:	e7e8      	b.n	b8d46 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b8d74:	f1b9 0f00 	cmp.w	r9, #0
   b8d78:	d0ec      	beq.n	b8d54 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   b8d7a:	6860      	ldr	r0, [r4, #4]
   b8d7c:	6803      	ldr	r3, [r0, #0]
   b8d7e:	4632      	mov	r2, r6
   b8d80:	68db      	ldr	r3, [r3, #12]
   b8d82:	4649      	mov	r1, r9
   b8d84:	4798      	blx	r3
   b8d86:	4286      	cmp	r6, r0
   b8d88:	d1dc      	bne.n	b8d44 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   b8d8a:	e7e3      	b.n	b8d54 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000b8d8c <_ZN18Adafruit_I2CDevice8setSpeedEm>:
 *    underlying Wire support!
 *    @param desiredclk The desired I2C SCL frequency
 *    @return True if this platform supports changing I2C speed.
 *    Not necessarily that the speed was achieved!
 */
bool Adafruit_I2CDevice::setSpeed(uint32_t desiredclk) {
   b8d8c:	b508      	push	{r3, lr}

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b8d8e:	6840      	ldr	r0, [r0, #4]
   b8d90:	f003 fea8 	bl	bcae4 <_ZN7TwoWire8setSpeedEm>
  _wire->setClock(desiredclk);
  return true;
#else
  return false;
#endif
}
   b8d94:	2001      	movs	r0, #1
   b8d96:	bd08      	pop	{r3, pc}

000b8d98 <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
   b8d98:	b510      	push	{r4, lr}
   b8d9a:	4604      	mov	r4, r0
  if (_spiSetting) {
   b8d9c:	6840      	ldr	r0, [r0, #4]
   b8d9e:	b110      	cbz	r0, b8da6 <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
   b8da0:	6803      	ldr	r3, [r0, #0]
   b8da2:	689b      	ldr	r3, [r3, #8]
   b8da4:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
   b8da6:	4620      	mov	r0, r4
   b8da8:	bd10      	pop	{r4, pc}

000b8daa <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
   b8daa:	b538      	push	{r3, r4, r5, lr}
   b8dac:	4604      	mov	r4, r0
  pinMode(_cs, OUTPUT);
   b8dae:	f990 000e 	ldrsb.w	r0, [r0, #14]
   b8db2:	2101      	movs	r1, #1
   b8db4:	b280      	uxth	r0, r0
   b8db6:	f004 fd25 	bl	bd804 <pinMode>
  digitalWrite(_cs, HIGH);
   b8dba:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b8dbe:	2101      	movs	r1, #1
   b8dc0:	b280      	uxth	r0, r0
   b8dc2:	f004 fd30 	bl	bd826 <digitalWrite>

  if (_spi) { // hardware SPI
   b8dc6:	6825      	ldr	r5, [r4, #0]
   b8dc8:	b135      	cbz	r5, b8dd8 <_ZN18Adafruit_SPIDevice5beginEv+0x2e>
    _spi->begin();
   b8dca:	4628      	mov	r0, r5
   b8dcc:	f004 f8a0 	bl	bcf10 <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
   b8dd0:	2001      	movs	r0, #1
   b8dd2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
   b8dd6:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
   b8dd8:	f994 000f 	ldrsb.w	r0, [r4, #15]
   b8ddc:	2101      	movs	r1, #1
   b8dde:	b280      	uxth	r0, r0
   b8de0:	f004 fd10 	bl	bd804 <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
   b8de4:	7b63      	ldrb	r3, [r4, #13]
   b8de6:	f994 000f 	ldrsb.w	r0, [r4, #15]
   b8dea:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
   b8dec:	bf94      	ite	ls
   b8dee:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
   b8df0:	2101      	movhi	r1, #1
   b8df2:	b280      	uxth	r0, r0
   b8df4:	f004 fd17 	bl	bd826 <digitalWrite>
    if (_mosi != -1) {
   b8df8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b8dfc:	1c42      	adds	r2, r0, #1
   b8dfe:	d009      	beq.n	b8e14 <_ZN18Adafruit_SPIDevice5beginEv+0x6a>
      pinMode(_mosi, OUTPUT);
   b8e00:	2101      	movs	r1, #1
   b8e02:	b280      	uxth	r0, r0
   b8e04:	f004 fcfe 	bl	bd804 <pinMode>
      digitalWrite(_mosi, HIGH);
   b8e08:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b8e0c:	2101      	movs	r1, #1
   b8e0e:	b280      	uxth	r0, r0
   b8e10:	f004 fd09 	bl	bd826 <digitalWrite>
    if (_miso != -1) {
   b8e14:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b8e18:	1c43      	adds	r3, r0, #1
   b8e1a:	d0d9      	beq.n	b8dd0 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
      pinMode(_miso, INPUT);
   b8e1c:	2100      	movs	r1, #0
   b8e1e:	b280      	uxth	r0, r0
   b8e20:	f004 fcf0 	bl	bd804 <pinMode>
   b8e24:	e7d4      	b.n	b8dd0 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
	...

000b8e28 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b8e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8e2c:	4604      	mov	r4, r0
  if (_spi) {
   b8e2e:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b8e30:	b085      	sub	sp, #20
   b8e32:	460d      	mov	r5, r1
  if (_spi) {
   b8e34:	b140      	cbz	r0, b8e48 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   b8e36:	2300      	movs	r3, #0
   b8e38:	9300      	str	r3, [sp, #0]
   b8e3a:	4613      	mov	r3, r2
   b8e3c:	460a      	mov	r2, r1
   b8e3e:	f004 f909 	bl	bd054 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   b8e42:	b005      	add	sp, #20
   b8e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   b8e48:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b8e4a:	68a0      	ldr	r0, [r4, #8]
   b8e4c:	4f48      	ldr	r7, [pc, #288]	; (b8f70 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   b8e4e:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   b8e52:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b8e54:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   b8e56:	bf0c      	ite	eq
   b8e58:	f04f 0b01 	moveq.w	fp, #1
   b8e5c:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b8e60:	ea1b 0f03 	tst.w	fp, r3
   b8e64:	eb01 0302 	add.w	r3, r1, r2
   b8e68:	bf0c      	ite	eq
   b8e6a:	f04f 0901 	moveq.w	r9, #1
   b8e6e:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b8e72:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   b8e74:	9303      	str	r3, [sp, #12]
   b8e76:	9b03      	ldr	r3, [sp, #12]
   b8e78:	42ab      	cmp	r3, r5
   b8e7a:	d0e2      	beq.n	b8e42 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   b8e7c:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   b8e80:	465e      	mov	r6, fp
    uint8_t reply = 0;
   b8e82:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   b8e86:	b117      	cbz	r7, b8e8e <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b8e88:	4638      	mov	r0, r7
   b8e8a:	f000 fcd3 	bl	b9834 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   b8e8e:	7b63      	ldrb	r3, [r4, #13]
   b8e90:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   b8e94:	d141      	bne.n	b8f1a <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b8e96:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b8e9a:	1c5a      	adds	r2, r3, #1
   b8e9c:	d00f      	beq.n	b8ebe <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   b8e9e:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b8ea2:	bf14      	ite	ne
   b8ea4:	2301      	movne	r3, #1
   b8ea6:	2300      	moveq	r3, #0
   b8ea8:	454b      	cmp	r3, r9
   b8eaa:	d008      	beq.n	b8ebe <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   b8eac:	6963      	ldr	r3, [r4, #20]
   b8eae:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8eb0:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   b8eb2:	2900      	cmp	r1, #0
   b8eb4:	d02c      	beq.n	b8f10 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   b8eb6:	4302      	orrs	r2, r0
   b8eb8:	601a      	str	r2, [r3, #0]
   b8eba:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   b8ebe:	69a1      	ldr	r1, [r4, #24]
   b8ec0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b8ec2:	680a      	ldr	r2, [r1, #0]
   b8ec4:	4313      	orrs	r3, r2
   b8ec6:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b8ec8:	b117      	cbz	r7, b8ed0 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   b8eca:	4638      	mov	r0, r7
   b8ecc:	f000 fcb2 	bl	b9834 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   b8ed0:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b8ed4:	3301      	adds	r3, #1
   b8ed6:	d006      	beq.n	b8ee6 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   b8ed8:	69e3      	ldr	r3, [r4, #28]
   b8eda:	681a      	ldr	r2, [r3, #0]
   b8edc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b8ede:	421a      	tst	r2, r3
            reply |= b;
   b8ee0:	bf18      	it	ne
   b8ee2:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   b8ee6:	69a1      	ldr	r1, [r4, #24]
   b8ee8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b8eea:	680a      	ldr	r2, [r1, #0]
   b8eec:	ea22 0303 	bic.w	r3, r2, r3
   b8ef0:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   b8ef2:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b8ef6:	3301      	adds	r3, #1
        buffer[i] = reply;
   b8ef8:	bf18      	it	ne
   b8efa:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   b8efe:	7b23      	ldrb	r3, [r4, #12]
   b8f00:	2b00      	cmp	r3, #0
   b8f02:	d132      	bne.n	b8f6a <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   b8f04:	0076      	lsls	r6, r6, #1
   b8f06:	b2f6      	uxtb	r6, r6
   b8f08:	2e00      	cmp	r6, #0
   b8f0a:	d1bc      	bne.n	b8e86 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   b8f0c:	3501      	adds	r5, #1
   b8f0e:	e7b2      	b.n	b8e76 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   b8f10:	ea22 0200 	bic.w	r2, r2, r0
   b8f14:	601a      	str	r2, [r3, #0]
   b8f16:	4689      	mov	r9, r1
   b8f18:	e7d1      	b.n	b8ebe <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   b8f1a:	69a1      	ldr	r1, [r4, #24]
   b8f1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b8f1e:	680a      	ldr	r2, [r1, #0]
   b8f20:	4313      	orrs	r3, r2
   b8f22:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b8f24:	b117      	cbz	r7, b8f2c <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   b8f26:	4638      	mov	r0, r7
   b8f28:	f000 fc84 	bl	b9834 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   b8f2c:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b8f30:	3301      	adds	r3, #1
   b8f32:	d008      	beq.n	b8f46 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   b8f34:	6963      	ldr	r3, [r4, #20]
   b8f36:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b8f38:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   b8f3a:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   b8f3e:	bf14      	ite	ne
   b8f40:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   b8f42:	438a      	biceq	r2, r1
   b8f44:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   b8f46:	69a1      	ldr	r1, [r4, #24]
   b8f48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b8f4a:	680a      	ldr	r2, [r1, #0]
   b8f4c:	ea22 0303 	bic.w	r3, r2, r3
   b8f50:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   b8f52:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b8f56:	3301      	adds	r3, #1
   b8f58:	d0cb      	beq.n	b8ef2 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   b8f5a:	69e3      	ldr	r3, [r4, #28]
   b8f5c:	681a      	ldr	r2, [r3, #0]
   b8f5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b8f60:	421a      	tst	r2, r3
            reply |= b;
   b8f62:	bf18      	it	ne
   b8f64:	ea46 0808 	orrne.w	r8, r6, r8
   b8f68:	e7c3      	b.n	b8ef2 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   b8f6a:	0876      	lsrs	r6, r6, #1
   b8f6c:	e7cc      	b.n	b8f08 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   b8f6e:	bf00      	nop
   b8f70:	0007a120 	.word	0x0007a120

000b8f74 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   b8f74:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   b8f76:	2201      	movs	r2, #1
  uint8_t data = send;
   b8f78:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   b8f7c:	f10d 0107 	add.w	r1, sp, #7
   b8f80:	f7ff ff52 	bl	b8e28 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   b8f84:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b8f88:	b003      	add	sp, #12
   b8f8a:	f85d fb04 	ldr.w	pc, [sp], #4

000b8f8e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   b8f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8f92:	4604      	mov	r4, r0
  if (_spi) {
   b8f94:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   b8f96:	460e      	mov	r6, r1
   b8f98:	4617      	mov	r7, r2
   b8f9a:	461d      	mov	r5, r3
  if (_spi) {
   b8f9c:	b110      	cbz	r0, b8fa4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   b8f9e:	6861      	ldr	r1, [r4, #4]
   b8fa0:	f003 ffe4 	bl	bcf6c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   b8fa4:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b8fa8:	2100      	movs	r1, #0
   b8faa:	b280      	uxth	r0, r0
   b8fac:	f004 fc3b 	bl	bd826 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   b8fb0:	9b06      	ldr	r3, [sp, #24]
   b8fb2:	eb05 0803 	add.w	r8, r5, r3
   b8fb6:	4545      	cmp	r5, r8
   b8fb8:	d108      	bne.n	b8fcc <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   b8fba:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   b8fbc:	42b7      	cmp	r7, r6
   b8fbe:	d00b      	beq.n	b8fd8 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   b8fc0:	f816 1b01 	ldrb.w	r1, [r6], #1
   b8fc4:	4620      	mov	r0, r4
   b8fc6:	f7ff ffd5 	bl	b8f74 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   b8fca:	e7f7      	b.n	b8fbc <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   b8fcc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8fd0:	4620      	mov	r0, r4
   b8fd2:	f7ff ffcf 	bl	b8f74 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   b8fd6:	e7ee      	b.n	b8fb6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   b8fd8:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b8fdc:	2101      	movs	r1, #1
   b8fde:	b280      	uxth	r0, r0
   b8fe0:	f004 fc21 	bl	bd826 <digitalWrite>

  if (_spi) {
   b8fe4:	6820      	ldr	r0, [r4, #0]
   b8fe6:	b108      	cbz	r0, b8fec <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   b8fe8:	f003 ffa6 	bl	bcf38 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b8fec:	2001      	movs	r0, #1
   b8fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8ff2 <_ZN17Adafruit_GrayOLED9drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b8ff2:	2900      	cmp	r1, #0
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b8ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b8ff6:	db66      	blt.n	b90c6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   b8ff8:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b8ffc:	428c      	cmp	r4, r1
   b8ffe:	dd62      	ble.n	b90c6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   b9000:	2a00      	cmp	r2, #0
   b9002:	db60      	blt.n	b90c6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   b9004:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b9008:	4294      	cmp	r4, r2
   b900a:	dd5c      	ble.n	b90c6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b900c:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
   b900e:	2c02      	cmp	r4, #2
   b9010:	d05a      	beq.n	b90c8 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd6>
   b9012:	2c03      	cmp	r4, #3
   b9014:	d061      	beq.n	b90da <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xe8>
   b9016:	2c01      	cmp	r4, #1
   b9018:	d104      	bne.n	b9024 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
    case 1:
      grayoled_swap(x, y);
      x = WIDTH - x - 1;
   b901a:	8904      	ldrh	r4, [r0, #8]
   b901c:	43d2      	mvns	r2, r2
   b901e:	4414      	add	r4, r2
      break;
   b9020:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b9022:	b221      	sxth	r1, r4
      y = HEIGHT - y - 1;
      break;
    }

    // adjust dirty window
    window_x1 = min(window_x1, x);
   b9024:	f9b0 4038 	ldrsh.w	r4, [r0, #56]	; 0x38
   b9028:	428c      	cmp	r4, r1
   b902a:	bfa8      	it	ge
   b902c:	460c      	movge	r4, r1
   b902e:	8704      	strh	r4, [r0, #56]	; 0x38
    window_y1 = min(window_y1, y);
   b9030:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
   b9034:	4294      	cmp	r4, r2
   b9036:	bfa8      	it	ge
   b9038:	4614      	movge	r4, r2
   b903a:	8744      	strh	r4, [r0, #58]	; 0x3a
    window_x2 = max(window_x2, x);
   b903c:	f9b0 403c 	ldrsh.w	r4, [r0, #60]	; 0x3c
   b9040:	428c      	cmp	r4, r1
   b9042:	bfb8      	it	lt
   b9044:	460c      	movlt	r4, r1
   b9046:	8784      	strh	r4, [r0, #60]	; 0x3c
    window_y2 = max(window_y2, y);
   b9048:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
   b904c:	4294      	cmp	r4, r2
   b904e:	bfb8      	it	lt
   b9050:	4614      	movlt	r4, r2
   b9052:	87c4      	strh	r4, [r0, #62]	; 0x3e

    if (_bpp == 1) {
   b9054:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   b9058:	2c01      	cmp	r4, #1
   b905a:	d116      	bne.n	b908a <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      switch (color) {
   b905c:	2b01      	cmp	r3, #1
   b905e:	d042      	beq.n	b90e6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xf4>
   b9060:	2b02      	cmp	r3, #2
   b9062:	d051      	beq.n	b9108 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x116>
   b9064:	b98b      	cbnz	r3, b908a <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      case MONOOLED_WHITE:
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
        break;
      case MONOOLED_BLACK:
        buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
   b9066:	2a00      	cmp	r2, #0
   b9068:	8905      	ldrh	r5, [r0, #8]
   b906a:	6b47      	ldr	r7, [r0, #52]	; 0x34
   b906c:	4614      	mov	r4, r2
   b906e:	bfb8      	it	lt
   b9070:	1dd4      	addlt	r4, r2, #7
   b9072:	10e4      	asrs	r4, r4, #3
   b9074:	fb14 1405 	smlabb	r4, r4, r5, r1
   b9078:	f002 0607 	and.w	r6, r2, #7
   b907c:	2501      	movs	r5, #1
   b907e:	fa05 f606 	lsl.w	r6, r5, r6
   b9082:	5d3d      	ldrb	r5, [r7, r4]
   b9084:	ea25 0506 	bic.w	r5, r5, r6
   b9088:	553d      	strb	r5, [r7, r4]
      case MONOOLED_INVERSE:
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
        break;
      }
    }
    if (_bpp == 4) {
   b908a:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   b908e:	2c04      	cmp	r4, #4
   b9090:	d119      	bne.n	b90c6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
      uint8_t *pixelptr = &buffer[x / 2 + (y * WIDTH / 2)];
   b9092:	8904      	ldrh	r4, [r0, #8]
   b9094:	fb14 f202 	smulbb	r2, r4, r2
   b9098:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   b909c:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
   b90a0:	f342 024f 	sbfx	r2, r2, #1, #16
   b90a4:	eb02 0264 	add.w	r2, r2, r4, asr #1
   b90a8:	6b44      	ldr	r4, [r0, #52]	; 0x34
      // Serial.printf("(%d, %d) -> offset %d\n", x, y, x/2 + (y * WIDTH / 2));
      if (x % 2 == 0) { // even, left nibble
        uint8_t t = pixelptr[0] & 0x0F;
   b90aa:	5ca0      	ldrb	r0, [r4, r2]
      if (x % 2 == 0) { // even, left nibble
   b90ac:	07c9      	lsls	r1, r1, #31
        t |= (color & 0xF) << 4;
        pixelptr[0] = t;
      } else { // odd, right lower nibble
        uint8_t t = pixelptr[0] & 0xF0;
        t |= color & 0xF;
   b90ae:	bf4b      	itete	mi
   b90b0:	f003 030f 	andmi.w	r3, r3, #15
        uint8_t t = pixelptr[0] & 0x0F;
   b90b4:	f000 000f 	andpl.w	r0, r0, #15
        uint8_t t = pixelptr[0] & 0xF0;
   b90b8:	f020 000f 	bicmi.w	r0, r0, #15
        t |= (color & 0xF) << 4;
   b90bc:	ea40 1303 	orrpl.w	r3, r0, r3, lsl #4
        t |= color & 0xF;
   b90c0:	bf48      	it	mi
   b90c2:	4303      	orrmi	r3, r0
        pixelptr[0] = t;
   b90c4:	54a3      	strb	r3, [r4, r2]
      }
    }
  }
}
   b90c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      x = WIDTH - x - 1;
   b90c8:	8904      	ldrh	r4, [r0, #8]
   b90ca:	3c01      	subs	r4, #1
   b90cc:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b90ce:	8944      	ldrh	r4, [r0, #10]
   b90d0:	43d2      	mvns	r2, r2
   b90d2:	4422      	add	r2, r4
      x = WIDTH - x - 1;
   b90d4:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b90d6:	b212      	sxth	r2, r2
      break;
   b90d8:	e7a4      	b.n	b9024 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b90da:	8944      	ldrh	r4, [r0, #10]
   b90dc:	3c01      	subs	r4, #1
   b90de:	1a64      	subs	r4, r4, r1
      break;
   b90e0:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b90e2:	b222      	sxth	r2, r4
      break;
   b90e4:	e79e      	b.n	b9024 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
   b90e6:	2a00      	cmp	r2, #0
   b90e8:	8905      	ldrh	r5, [r0, #8]
   b90ea:	6b46      	ldr	r6, [r0, #52]	; 0x34
   b90ec:	4614      	mov	r4, r2
   b90ee:	bfb8      	it	lt
   b90f0:	1dd4      	addlt	r4, r2, #7
   b90f2:	10e4      	asrs	r4, r4, #3
   b90f4:	fb14 1405 	smlabb	r4, r4, r5, r1
   b90f8:	f002 0707 	and.w	r7, r2, #7
   b90fc:	2501      	movs	r5, #1
   b90fe:	40bd      	lsls	r5, r7
   b9100:	5d37      	ldrb	r7, [r6, r4]
   b9102:	433d      	orrs	r5, r7
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   b9104:	5535      	strb	r5, [r6, r4]
        break;
   b9106:	e7c0      	b.n	b908a <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   b9108:	2a00      	cmp	r2, #0
   b910a:	8905      	ldrh	r5, [r0, #8]
   b910c:	6b46      	ldr	r6, [r0, #52]	; 0x34
   b910e:	4614      	mov	r4, r2
   b9110:	bfb8      	it	lt
   b9112:	1dd4      	addlt	r4, r2, #7
   b9114:	10e4      	asrs	r4, r4, #3
   b9116:	fb14 1405 	smlabb	r4, r4, r5, r1
   b911a:	f002 0707 	and.w	r7, r2, #7
   b911e:	2501      	movs	r5, #1
   b9120:	40bd      	lsls	r5, r7
   b9122:	5d37      	ldrb	r7, [r6, r4]
   b9124:	407d      	eors	r5, r7
   b9126:	e7ed      	b.n	b9104 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x112>

000b9128 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>:
Adafruit_GrayOLED::Adafruit_GrayOLED(uint8_t bpp, uint16_t w, uint16_t h,
   b9128:	b538      	push	{r3, r4, r5, lr}
   b912a:	460d      	mov	r5, r1
   b912c:	4611      	mov	r1, r2
   b912e:	4604      	mov	r4, r0
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   b9130:	b21a      	sxth	r2, r3
   b9132:	b209      	sxth	r1, r1
   b9134:	f7ff fb70 	bl	b8818 <_ZN12Adafruit_GFXC1Ess>
   b9138:	9a06      	ldr	r2, [sp, #24]
   b913a:	4b0b      	ldr	r3, [pc, #44]	; (b9168 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm+0x40>)
   b913c:	62e2      	str	r2, [r4, #44]	; 0x2c
   b913e:	9a07      	ldr	r2, [sp, #28]
   b9140:	6023      	str	r3, [r4, #0]
   b9142:	2300      	movs	r3, #0
   b9144:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
   b9148:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   b914c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9150:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
   b9154:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   b9158:	64a3      	str	r3, [r4, #72]	; 0x48
  _theWire = twi;
   b915a:	9b04      	ldr	r3, [sp, #16]
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   b915c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  _theWire = twi;
   b9160:	6523      	str	r3, [r4, #80]	; 0x50
}
   b9162:	4620      	mov	r0, r4
   b9164:	bd38      	pop	{r3, r4, r5, pc}
   b9166:	bf00      	nop
   b9168:	000c14b0 	.word	0x000c14b0

000b916c <_ZN17Adafruit_GrayOLEDD1Ev>:
Adafruit_GrayOLED::~Adafruit_GrayOLED(void) {
   b916c:	b538      	push	{r3, r4, r5, lr}
   b916e:	4b0c      	ldr	r3, [pc, #48]	; (b91a0 <_ZN17Adafruit_GrayOLEDD1Ev+0x34>)
   b9170:	6003      	str	r3, [r0, #0]
   b9172:	4604      	mov	r4, r0
  if (buffer) {
   b9174:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b9176:	b118      	cbz	r0, b9180 <_ZN17Adafruit_GrayOLEDD1Ev+0x14>
    free(buffer);
   b9178:	f000 fde8 	bl	b9d4c <free>
    buffer = NULL;
   b917c:	2300      	movs	r3, #0
   b917e:	6363      	str	r3, [r4, #52]	; 0x34
  if (spi_dev)
   b9180:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b9182:	b135      	cbz	r5, b9192 <_ZN17Adafruit_GrayOLEDD1Ev+0x26>
    delete spi_dev;
   b9184:	4628      	mov	r0, r5
   b9186:	f7ff fe07 	bl	b8d98 <_ZN18Adafruit_SPIDeviceD1Ev>
   b918a:	2138      	movs	r1, #56	; 0x38
   b918c:	4628      	mov	r0, r5
   b918e:	f7fa ff86 	bl	b409e <_ZdlPvj>
  if (i2c_dev)
   b9192:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9194:	b110      	cbz	r0, b919c <_ZN17Adafruit_GrayOLEDD1Ev+0x30>
    delete i2c_dev;
   b9196:	2110      	movs	r1, #16
   b9198:	f7fa ff81 	bl	b409e <_ZdlPvj>
}
   b919c:	4620      	mov	r0, r4
   b919e:	bd38      	pop	{r3, r4, r5, pc}
   b91a0:	000c14b0 	.word	0x000c14b0

000b91a4 <_ZN17Adafruit_GrayOLED12oled_commandEh>:
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   b91a4:	b530      	push	{r4, r5, lr}
   b91a6:	b087      	sub	sp, #28
  if (i2c_dev) {                // I2C
   b91a8:	6a85      	ldr	r5, [r0, #40]	; 0x28
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   b91aa:	f88d 100f 	strb.w	r1, [sp, #15]
   b91ae:	4604      	mov	r4, r0
  if (i2c_dev) {                // I2C
   b91b0:	b17d      	cbz	r5, b91d2 <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2e>
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   b91b2:	2300      	movs	r3, #0
   b91b4:	b2ca      	uxtb	r2, r1
    i2c_dev->write(buf, 2);
   b91b6:	e9cd 3300 	strd	r3, r3, [sp]
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   b91ba:	f88d 3014 	strb.w	r3, [sp, #20]
   b91be:	f88d 2015 	strb.w	r2, [sp, #21]
    i2c_dev->write(buf, 2);
   b91c2:	2301      	movs	r3, #1
   b91c4:	2202      	movs	r2, #2
   b91c6:	a905      	add	r1, sp, #20
   b91c8:	4628      	mov	r0, r5
   b91ca:	f7ff fdaf 	bl	b8d2c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   b91ce:	b007      	add	sp, #28
   b91d0:	bd30      	pop	{r4, r5, pc}
    digitalWrite(dcPin, LOW);
   b91d2:	4629      	mov	r1, r5
   b91d4:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   b91d8:	f004 fb25 	bl	bd826 <digitalWrite>
    spi_dev->write(&c, 1);
   b91dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b91de:	9500      	str	r5, [sp, #0]
   b91e0:	462b      	mov	r3, r5
   b91e2:	2201      	movs	r2, #1
   b91e4:	f10d 010f 	add.w	r1, sp, #15
   b91e8:	f7ff fed1 	bl	b8f8e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
}
   b91ec:	e7ef      	b.n	b91ce <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2a>

000b91ee <_ZN17Adafruit_GrayOLED13invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing MONOOLED_BLACK (value 0) pixels will actually draw
   white, MONOOLED_WHITE (value 1) will draw black.
*/
void Adafruit_GrayOLED::invertDisplay(bool i) {
  oled_command(i ? GRAYOLED_INVERTDISPLAY : GRAYOLED_NORMALDISPLAY);
   b91ee:	2900      	cmp	r1, #0
   b91f0:	bf14      	ite	ne
   b91f2:	21a7      	movne	r1, #167	; 0xa7
   b91f4:	21a6      	moveq	r1, #166	; 0xa6
   b91f6:	f7ff bfd5 	b.w	b91a4 <_ZN17Adafruit_GrayOLED12oled_commandEh>

000b91fa <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>:
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   b91fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (i2c_dev) {            // I2C
   b91fc:	6a85      	ldr	r5, [r0, #40]	; 0x28
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   b91fe:	b085      	sub	sp, #20
   b9200:	4604      	mov	r4, r0
   b9202:	460e      	mov	r6, r1
   b9204:	4617      	mov	r7, r2
  if (i2c_dev) {            // I2C
   b9206:	b165      	cbz	r5, b9222 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x28>
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   b9208:	2300      	movs	r3, #0
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   b920a:	f10d 000f 	add.w	r0, sp, #15
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   b920e:	f88d 300f 	strb.w	r3, [sp, #15]
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   b9212:	2301      	movs	r3, #1
   b9214:	9000      	str	r0, [sp, #0]
   b9216:	9301      	str	r3, [sp, #4]
   b9218:	4628      	mov	r0, r5
   b921a:	f7ff fd87 	bl	b8d2c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   b921e:	b005      	add	sp, #20
   b9220:	bdf0      	pop	{r4, r5, r6, r7, pc}
    digitalWrite(dcPin, LOW);
   b9222:	4629      	mov	r1, r5
   b9224:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   b9228:	f004 fafd 	bl	bd826 <digitalWrite>
    if (!spi_dev->write((uint8_t *)c, n)) {
   b922c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b922e:	9500      	str	r5, [sp, #0]
   b9230:	462b      	mov	r3, r5
   b9232:	463a      	mov	r2, r7
   b9234:	4631      	mov	r1, r6
   b9236:	f7ff feaa 	bl	b8f8e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   b923a:	e7f0      	b.n	b921e <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x24>

000b923c <_ZN17Adafruit_GrayOLED12clearDisplayEv>:
void Adafruit_GrayOLED::clearDisplay(void) {
   b923c:	b510      	push	{r4, lr}
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   b923e:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
   b9242:	8903      	ldrh	r3, [r0, #8]
   b9244:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   b9248:	fb12 f203 	smulbb	r2, r2, r3
   b924c:	1dcb      	adds	r3, r1, #7
   b924e:	bf48      	it	mi
   b9250:	f101 030e 	addmi.w	r3, r1, #14
   b9254:	10db      	asrs	r3, r3, #3
void Adafruit_GrayOLED::clearDisplay(void) {
   b9256:	4604      	mov	r4, r0
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   b9258:	435a      	muls	r2, r3
   b925a:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b925c:	2100      	movs	r1, #0
   b925e:	f005 fa84 	bl	be76a <memset>
  window_x1 = 0;
   b9262:	2300      	movs	r3, #0
   b9264:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   b9266:	8923      	ldrh	r3, [r4, #8]
   b9268:	3b01      	subs	r3, #1
   b926a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   b926c:	8963      	ldrh	r3, [r4, #10]
   b926e:	3b01      	subs	r3, #1
   b9270:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
   b9272:	bd10      	pop	{r4, pc}

000b9274 <_ZN17Adafruit_GrayOLED5_initEhb>:
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   b9274:	b570      	push	{r4, r5, r6, lr}
  if ((!buffer) &&
   b9276:	6b43      	ldr	r3, [r0, #52]	; 0x34
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   b9278:	4604      	mov	r4, r0
   b927a:	460e      	mov	r6, r1
   b927c:	4615      	mov	r5, r2
  if ((!buffer) &&
   b927e:	b30b      	cbz	r3, b92c4 <_ZN17Adafruit_GrayOLED5_initEhb+0x50>
  if (reset && (rstPin >= 0)) {
   b9280:	2d00      	cmp	r5, #0
   b9282:	d133      	bne.n	b92ec <_ZN17Adafruit_GrayOLED5_initEhb+0x78>
  if (_theWire) { // using I2C
   b9284:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b9286:	2b00      	cmp	r3, #0
   b9288:	d050      	beq.n	b932c <_ZN17Adafruit_GrayOLED5_initEhb+0xb8>
    i2c_dev = new Adafruit_I2CDevice(addr, _theWire);
   b928a:	2010      	movs	r0, #16
   b928c:	f7fa ff03 	bl	b4096 <_Znwj>
   b9290:	4605      	mov	r5, r0
   b9292:	b118      	cbz	r0, b929c <_ZN17Adafruit_GrayOLED5_initEhb+0x28>
   b9294:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b9296:	4631      	mov	r1, r6
   b9298:	f7ff fd1d 	bl	b8cd6 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b929c:	62a5      	str	r5, [r4, #40]	; 0x28
    if (!i2c_dev || !i2c_dev->begin()) {
   b929e:	b31d      	cbz	r5, b92e8 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   b92a0:	2101      	movs	r1, #1
   b92a2:	4628      	mov	r0, r5
   b92a4:	f7ff fd33 	bl	b8d0e <_ZN18Adafruit_I2CDevice5beginEb>
   b92a8:	b1f0      	cbz	r0, b92e8 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
  clearDisplay();
   b92aa:	4620      	mov	r0, r4
   b92ac:	f7ff ffc6 	bl	b923c <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  window_x1 = 0;
   b92b0:	2300      	movs	r3, #0
   b92b2:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   b92b4:	8923      	ldrh	r3, [r4, #8]
   b92b6:	3b01      	subs	r3, #1
   b92b8:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   b92ba:	8963      	ldrh	r3, [r4, #10]
   b92bc:	3b01      	subs	r3, #1
   b92be:	87e3      	strh	r3, [r4, #62]	; 0x3e
  return true; // Success
   b92c0:	2001      	movs	r0, #1
   b92c2:	e012      	b.n	b92ea <_ZN17Adafruit_GrayOLED5_initEhb+0x76>
      !(buffer = (uint8_t *)malloc(_bpp * WIDTH * ((HEIGHT + 7) / 8)))) {
   b92c4:	8923      	ldrh	r3, [r4, #8]
   b92c6:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b92ca:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
   b92ce:	fb10 f003 	smulbb	r0, r0, r3
   b92d2:	1dd3      	adds	r3, r2, #7
   b92d4:	bf48      	it	mi
   b92d6:	f102 030e 	addmi.w	r3, r2, #14
   b92da:	10db      	asrs	r3, r3, #3
   b92dc:	4358      	muls	r0, r3
   b92de:	f000 fd2d 	bl	b9d3c <malloc>
   b92e2:	6360      	str	r0, [r4, #52]	; 0x34
  if ((!buffer) &&
   b92e4:	2800      	cmp	r0, #0
   b92e6:	d1cb      	bne.n	b9280 <_ZN17Adafruit_GrayOLED5_initEhb+0xc>
    return false;
   b92e8:	2000      	movs	r0, #0
}
   b92ea:	bd70      	pop	{r4, r5, r6, pc}
  if (reset && (rstPin >= 0)) {
   b92ec:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   b92ee:	2800      	cmp	r0, #0
   b92f0:	dbc8      	blt.n	b9284 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    pinMode(rstPin, OUTPUT);
   b92f2:	2101      	movs	r1, #1
   b92f4:	b280      	uxth	r0, r0
   b92f6:	f004 fa85 	bl	bd804 <pinMode>
    digitalWrite(rstPin, HIGH);
   b92fa:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   b92fe:	2101      	movs	r1, #1
   b9300:	f004 fa91 	bl	bd826 <digitalWrite>
    delay(10);                  // VDD goes high at start, pause
   b9304:	200a      	movs	r0, #10
   b9306:	f000 fd81 	bl	b9e0c <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b930a:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   b930e:	2100      	movs	r1, #0
   b9310:	f004 fa89 	bl	bd826 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b9314:	200a      	movs	r0, #10
   b9316:	f000 fd79 	bl	b9e0c <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b931a:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   b931e:	2101      	movs	r1, #1
   b9320:	f004 fa81 	bl	bd826 <digitalWrite>
    delay(10);
   b9324:	200a      	movs	r0, #10
   b9326:	f000 fd71 	bl	b9e0c <delay>
   b932a:	e7ab      	b.n	b9284 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    if (!spi_dev || !spi_dev->begin()) {
   b932c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b932e:	2800      	cmp	r0, #0
   b9330:	d0da      	beq.n	b92e8 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   b9332:	f7ff fd3a 	bl	b8daa <_ZN18Adafruit_SPIDevice5beginEv>
   b9336:	2800      	cmp	r0, #0
   b9338:	d0d6      	beq.n	b92e8 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b933a:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   b933e:	2101      	movs	r1, #1
   b9340:	f004 fa60 	bl	bd804 <pinMode>
   b9344:	e7b1      	b.n	b92aa <_ZN17Adafruit_GrayOLED5_initEhb+0x36>

000b9346 <_ZN17Adafruit_GrayOLED11setContrastEh>:
    @brief  Adjust the display contrast.
    @param  level The contrast level from 0 to 0x7F
    @note   This has an immediate effect on the display, no need to call the
            display() function -- buffer contents are not changed.
*/
void Adafruit_GrayOLED::setContrast(uint8_t level) {
   b9346:	b507      	push	{r0, r1, r2, lr}
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   b9348:	2381      	movs	r3, #129	; 0x81
   b934a:	f88d 1005 	strb.w	r1, [sp, #5]
  oled_commandList(cmd, 2);
   b934e:	2202      	movs	r2, #2
   b9350:	a901      	add	r1, sp, #4
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   b9352:	f88d 3004 	strb.w	r3, [sp, #4]
  oled_commandList(cmd, 2);
   b9356:	f7ff ff50 	bl	b91fa <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
}
   b935a:	b003      	add	sp, #12
   b935c:	f85d fb04 	ldr.w	pc, [sp], #4

000b9360 <_ZN15Adafruit_SH1107D1Ev>:
    : Adafruit_SH110X(w, h, spi, dc_pin, rst_pin, cs_pin, bitrate) {}

/*!
    @brief  Destructor for Adafruit_SH1107 object.
*/
Adafruit_SH1107::~Adafruit_SH1107(void) {}
   b9360:	b510      	push	{r4, lr}
   b9362:	4b03      	ldr	r3, [pc, #12]	; (b9370 <_ZN15Adafruit_SH1107D1Ev+0x10>)
   b9364:	6003      	str	r3, [r0, #0]
   b9366:	4604      	mov	r4, r0
   b9368:	f000 f958 	bl	b961c <_ZN15Adafruit_SH110XD1Ev>
   b936c:	4620      	mov	r0, r4
   b936e:	bd10      	pop	{r4, pc}
   b9370:	000c16ec 	.word	0x000c16ec

000b9374 <_ZN15Adafruit_SH1107D0Ev>:
   b9374:	b510      	push	{r4, lr}
   b9376:	4604      	mov	r4, r0
   b9378:	f7ff fff2 	bl	b9360 <_ZN15Adafruit_SH1107D1Ev>
   b937c:	4620      	mov	r0, r4
   b937e:	2158      	movs	r1, #88	; 0x58
   b9380:	f7fa fe8d 	bl	b409e <_ZdlPvj>
   b9384:	4620      	mov	r0, r4
   b9386:	bd10      	pop	{r4, pc}

000b9388 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>:
Adafruit_SH1107::Adafruit_SH1107(uint16_t w, uint16_t h, TwoWire *twi,
   b9388:	b530      	push	{r4, r5, lr}
   b938a:	b085      	sub	sp, #20
   b938c:	4604      	mov	r4, r0
    : Adafruit_SH110X(w, h, twi, rst_pin, clkDuring, clkAfter) {}
   b938e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   b9390:	9502      	str	r5, [sp, #8]
   b9392:	9d09      	ldr	r5, [sp, #36]	; 0x24
   b9394:	9501      	str	r5, [sp, #4]
   b9396:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   b939a:	9500      	str	r5, [sp, #0]
   b939c:	f000 f924 	bl	b95e8 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>
   b93a0:	4b02      	ldr	r3, [pc, #8]	; (b93ac <_ZN15Adafruit_SH1107C1EttP7TwoWireamm+0x24>)
   b93a2:	6023      	str	r3, [r4, #0]
   b93a4:	4620      	mov	r0, r4
   b93a6:	b005      	add	sp, #20
   b93a8:	bd30      	pop	{r4, r5, pc}
   b93aa:	bf00      	nop
   b93ac:	000c16ec 	.word	0x000c16ec

000b93b0 <_ZN15Adafruit_SH11075beginEhb>:
    @return true on successful allocation/init, false otherwise.
            Well-behaved code should check the return value before
            proceeding.
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SH1107::begin(uint8_t addr, bool reset) {
   b93b0:	b530      	push	{r4, r5, lr}
   b93b2:	4604      	mov	r4, r0
   b93b4:	b085      	sub	sp, #20

  Adafruit_GrayOLED::_init(addr, reset);
   b93b6:	f7ff ff5d 	bl	b9274 <_ZN17Adafruit_GrayOLED5_initEhb>

  setContrast(0x2F);
   b93ba:	212f      	movs	r1, #47	; 0x2f
   b93bc:	4620      	mov	r0, r4
   b93be:	f7ff ffc2 	bl	b9346 <_ZN17Adafruit_GrayOLED11setContrastEh>

  // the featherwing with 128x64 oled is 'rotated' so to make the splash right,
  // rotate!
  if (WIDTH == 64 && HEIGHT == 128) {
   b93c2:	68a2      	ldr	r2, [r4, #8]
   b93c4:	4b2f      	ldr	r3, [pc, #188]	; (b9484 <_ZN15Adafruit_SH11075beginEhb+0xd4>)
   b93c6:	429a      	cmp	r2, r3
   b93c8:	d121      	bne.n	b940e <_ZN15Adafruit_SH11075beginEhb+0x5e>
    setRotation(1);
   b93ca:	6823      	ldr	r3, [r4, #0]
   b93cc:	2101      	movs	r1, #1
   b93ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b93d0:	4620      	mov	r0, r4
   b93d2:	4798      	blx	r3
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   b93d4:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   b93d8:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   b93dc:	2320      	movs	r3, #32
   b93de:	3a20      	subs	r2, #32
   b93e0:	3973      	subs	r1, #115	; 0x73
   b93e2:	2501      	movs	r5, #1
   b93e4:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b93e8:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b93ec:	2373      	movs	r3, #115	; 0x73
   b93ee:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b93f2:	9300      	str	r3, [sp, #0]
   b93f4:	f341 014f 	sbfx	r1, r1, #1, #16
   b93f8:	4b23      	ldr	r3, [pc, #140]	; (b9488 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   b93fa:	4620      	mov	r0, r4
   b93fc:	f342 024f 	sbfx	r2, r2, #1, #16
   b9400:	f7ff fa20 	bl	b8844 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
               splash2_data, splash2_width, splash2_height, 1);
    setRotation(0);
   b9404:	6823      	ldr	r3, [r4, #0]
   b9406:	2100      	movs	r1, #0
   b9408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b940a:	4620      	mov	r0, r4
   b940c:	4798      	blx	r3
  }
  if (WIDTH == 128 && HEIGHT == 128) {
   b940e:	68a3      	ldr	r3, [r4, #8]
   b9410:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   b9414:	d117      	bne.n	b9446 <_ZN15Adafruit_SH11075beginEhb+0x96>
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   b9416:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   b941a:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   b941e:	2320      	movs	r3, #32
   b9420:	2001      	movs	r0, #1
   b9422:	3a20      	subs	r2, #32
   b9424:	3973      	subs	r1, #115	; 0x73
   b9426:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b942a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b942e:	2373      	movs	r3, #115	; 0x73
   b9430:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b9434:	9300      	str	r3, [sp, #0]
   b9436:	f342 024f 	sbfx	r2, r2, #1, #16
   b943a:	4b13      	ldr	r3, [pc, #76]	; (b9488 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   b943c:	f341 014f 	sbfx	r1, r1, #1, #16
   b9440:	4620      	mov	r0, r4
   b9442:	f7ff f9ff 	bl	b8844 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
      SH110X_DISPLAYALLON_RESUME, // 0xa4
      SH110X_NORMALDISPLAY,       // 0xa6
  };
  // clang-format on

  if (!oled_commandList(init, sizeof(init))) {
   b9446:	4911      	ldr	r1, [pc, #68]	; (b948c <_ZN15Adafruit_SH11075beginEhb+0xdc>)
   b9448:	2216      	movs	r2, #22
   b944a:	4620      	mov	r0, r4
   b944c:	f7ff fed5 	bl	b91fa <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   b9450:	4605      	mov	r5, r0
   b9452:	b918      	cbnz	r0, b945c <_ZN15Adafruit_SH11075beginEhb+0xac>
    return false;
   b9454:	2500      	movs	r5, #0

  delay(100);                     // 100ms delay recommended
  oled_command(SH110X_DISPLAYON); // 0xaf

  return true; // Success
}
   b9456:	4628      	mov	r0, r5
   b9458:	b005      	add	sp, #20
   b945a:	bd30      	pop	{r4, r5, pc}
  if (WIDTH == 128 && HEIGHT == 128) {
   b945c:	68a3      	ldr	r3, [r4, #8]
   b945e:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   b9462:	d007      	beq.n	b9474 <_ZN15Adafruit_SH11075beginEhb+0xc4>
  delay(100);                     // 100ms delay recommended
   b9464:	2064      	movs	r0, #100	; 0x64
   b9466:	f000 fcd1 	bl	b9e0c <delay>
  oled_command(SH110X_DISPLAYON); // 0xaf
   b946a:	21af      	movs	r1, #175	; 0xaf
   b946c:	4620      	mov	r0, r4
   b946e:	f7ff fe99 	bl	b91a4 <_ZN17Adafruit_GrayOLED12oled_commandEh>
  return true; // Success
   b9472:	e7f0      	b.n	b9456 <_ZN15Adafruit_SH11075beginEhb+0xa6>
    if (!oled_commandList(init_128x128, sizeof(init_128x128))) {
   b9474:	4906      	ldr	r1, [pc, #24]	; (b9490 <_ZN15Adafruit_SH11075beginEhb+0xe0>)
   b9476:	2204      	movs	r2, #4
   b9478:	4620      	mov	r0, r4
   b947a:	f7ff febe 	bl	b91fa <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   b947e:	2800      	cmp	r0, #0
   b9480:	d1f0      	bne.n	b9464 <_ZN15Adafruit_SH11075beginEhb+0xb4>
   b9482:	e7e7      	b.n	b9454 <_ZN15Adafruit_SH11075beginEhb+0xa4>
   b9484:	00800040 	.word	0x00800040
   b9488:	000c1504 	.word	0x000c1504
   b948c:	000c1744 	.word	0x000c1744
   b9490:	000c1740 	.word	0x000c1740

000b9494 <_ZN15Adafruit_SH110X7displayEv>:
    @brief  Push data currently in RAM to SH110X display.
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SH110X::display(void) {
   b9494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9498:	4604      	mov	r4, r0
   b949a:	b08b      	sub	sp, #44	; 0x2c
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   b949c:	f000 f972 	bl	b9784 <os_thread_yield>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();

  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b94a0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
  Serial.print(", ");
  Serial.print(window_y2);
  Serial.println(")");
  */

  uint8_t first_page = window_y1 / 8;
   b94a4:	f9b4 603a 	ldrsh.w	r6, [r4, #58]	; 0x3a
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b94a8:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
   b94ac:	f894 9038 	ldrb.w	r9, [r4, #56]	; 0x38
   b94b0:	1dda      	adds	r2, r3, #7
   b94b2:	bf48      	it	mi
   b94b4:	f103 020e 	addmi.w	r2, r3, #14
  uint8_t dc_byte = 0x40;
   b94b8:	2340      	movs	r3, #64	; 0x40
   b94ba:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  uint8_t pages = ((HEIGHT + 7) / 8);
   b94be:	f3c2 03c7 	ubfx	r3, r2, #3, #8
   b94c2:	9303      	str	r3, [sp, #12]
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   b94c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  uint8_t last_page = (window_y2 + 7) / 8;
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   b94c6:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   b94ca:	68db      	ldr	r3, [r3, #12]
  uint8_t bytes_per_page = WIDTH;
   b94cc:	b2ff      	uxtb	r7, r7
  uint8_t first_page = window_y1 / 8;
   b94ce:	2e00      	cmp	r6, #0
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   b94d0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   b94d4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  uint8_t first_page = window_y1 / 8;
   b94d8:	bfb8      	it	lt
   b94da:	3607      	addlt	r6, #7
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   b94dc:	b2d2      	uxtb	r2, r2
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   b94de:	b29b      	uxth	r3, r3
  uint8_t first_page = window_y1 / 8;
   b94e0:	45b9      	cmp	r9, r7
   b94e2:	f3c6 06c7 	ubfx	r6, r6, #3, #8
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   b94e6:	bf28      	it	cs
   b94e8:	46b9      	movcs	r9, r7
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   b94ea:	9204      	str	r2, [sp, #16]
  Serial.print(page_start);
  Serial.print(" -> ");
  Serial.println(page_end);
  */

  for (uint8_t p = first_page; p < pages; p++) {
   b94ec:	b2db      	uxtb	r3, r3
    ptr = buffer + (uint16_t)p * (uint16_t)bytes_per_page;
    // fast forward to dirty rectangle beginning
    ptr += page_start;
    bytes_remaining -= page_start;
    // cut off end of dirty rectangle
    bytes_remaining -= (WIDTH - 1) - page_end;
   b94ee:	1c7a      	adds	r2, r7, #1
   b94f0:	fb06 9b07 	mla	fp, r6, r7, r9
   b94f4:	9205      	str	r2, [sp, #20]
   b94f6:	9306      	str	r3, [sp, #24]
  for (uint8_t p = first_page; p < pages; p++) {
   b94f8:	9b03      	ldr	r3, [sp, #12]
   b94fa:	429e      	cmp	r6, r3
   b94fc:	d26a      	bcs.n	b95d4 <_ZN15Adafruit_SH110X7displayEv+0x140>
    ptr += page_start;
   b94fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bytes_remaining -= (WIDTH - 1) - page_end;
   b9500:	8925      	ldrh	r5, [r4, #8]

    if (i2c_dev) { // I2C
      uint8_t cmd[] = {
          0x00, (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   b9502:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
    ptr += page_start;
   b9506:	eb03 080b 	add.w	r8, r3, fp
    bytes_remaining -= (WIDTH - 1) - page_end;
   b950a:	9b05      	ldr	r3, [sp, #20]
   b950c:	1b5d      	subs	r5, r3, r5
   b950e:	9b04      	ldr	r3, [sp, #16]
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   b9510:	444a      	add	r2, r9
    bytes_remaining -= (WIDTH - 1) - page_end;
   b9512:	441d      	add	r5, r3
    if (i2c_dev) { // I2C
   b9514:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   b9516:	1110      	asrs	r0, r2, #4
    bytes_remaining -= (WIDTH - 1) - page_end;
   b9518:	eba5 0509 	sub.w	r5, r5, r9
   b951c:	f1a6 0150 	sub.w	r1, r6, #80	; 0x50
   b9520:	b2ed      	uxtb	r5, r5
    if (i2c_dev) { // I2C
   b9522:	b2c9      	uxtb	r1, r1
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   b9524:	3010      	adds	r0, #16
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b9526:	f002 020f 	and.w	r2, r2, #15
    if (i2c_dev) { // I2C
   b952a:	b39b      	cbz	r3, b9594 <_ZN15Adafruit_SH110X7displayEv+0x100>
      uint8_t cmd[] = {
   b952c:	f04f 0a00 	mov.w	sl, #0
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b9530:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
   b9534:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26

      // Set high speed clk
      i2c_dev->setSpeed(i2c_preclk);
   b9538:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      uint8_t cmd[] = {
   b953a:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
      i2c_dev->setSpeed(i2c_preclk);
   b953e:	4618      	mov	r0, r3
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b9540:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
      i2c_dev->setSpeed(i2c_preclk);
   b9544:	f7ff fc22 	bl	b8d8c <_ZN18Adafruit_I2CDevice8setSpeedEm>

      i2c_dev->write(cmd, 4);
   b9548:	e9cd aa00 	strd	sl, sl, [sp]
   b954c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b954e:	2301      	movs	r3, #1
   b9550:	2204      	movs	r2, #4
   b9552:	a909      	add	r1, sp, #36	; 0x24
   b9554:	f7ff fbea 	bl	b8d2c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>

      while (bytes_remaining) {
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
   b9558:	f10d 0a23 	add.w	sl, sp, #35	; 0x23
   b955c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      while (bytes_remaining) {
   b955e:	b195      	cbz	r5, b9586 <_ZN15Adafruit_SH110X7displayEv+0xf2>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
   b9560:	9b06      	ldr	r3, [sp, #24]
   b9562:	42ab      	cmp	r3, r5
   b9564:	bf28      	it	cs
   b9566:	462b      	movcs	r3, r5
   b9568:	461a      	mov	r2, r3
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
   b956a:	2301      	movs	r3, #1
   b956c:	4641      	mov	r1, r8
   b956e:	e9cd a300 	strd	sl, r3, [sp]
   b9572:	9207      	str	r2, [sp, #28]
   b9574:	f7ff fbda 	bl	b8d2c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        ptr += to_write;
   b9578:	9a07      	ldr	r2, [sp, #28]
        bytes_remaining -= to_write;
   b957a:	1aad      	subs	r5, r5, r2
        ptr += to_write;
   b957c:	4490      	add	r8, r2
        bytes_remaining -= to_write;
   b957e:	b2ed      	uxtb	r5, r5
   b9580:	f000 f900 	bl	b9784 <os_thread_yield>
#endif // PLATFORM_THREADING
}
   b9584:	e7ea      	b.n	b955c <_ZN15Adafruit_SH110X7displayEv+0xc8>
        yield();
      }

      // Set low speed clk
      i2c_dev->setSpeed(i2c_postclk);
   b9586:	6b21      	ldr	r1, [r4, #48]	; 0x30
   b9588:	f7ff fc00 	bl	b8d8c <_ZN18Adafruit_I2CDevice8setSpeedEm>
  for (uint8_t p = first_page; p < pages; p++) {
   b958c:	3601      	adds	r6, #1
   b958e:	b2f6      	uxtb	r6, r6
   b9590:	44bb      	add	fp, r7
   b9592:	e7b1      	b.n	b94f8 <_ZN15Adafruit_SH110X7displayEv+0x64>

    } else { // SPI
      uint8_t cmd[] = {
          (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b9594:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   b9598:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25

      digitalWrite(dcPin, LOW);
   b959c:	4619      	mov	r1, r3
   b959e:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   b95a2:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
      digitalWrite(dcPin, LOW);
   b95a6:	9307      	str	r3, [sp, #28]
   b95a8:	f004 f93d 	bl	bd826 <digitalWrite>
      spi_dev->write(cmd, 3);
   b95ac:	9b07      	ldr	r3, [sp, #28]
   b95ae:	9300      	str	r3, [sp, #0]
   b95b0:	2203      	movs	r2, #3
   b95b2:	a909      	add	r1, sp, #36	; 0x24
   b95b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b95b6:	f7ff fcea 	bl	b8f8e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
      digitalWrite(dcPin, HIGH);
   b95ba:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   b95be:	2101      	movs	r1, #1
   b95c0:	f004 f931 	bl	bd826 <digitalWrite>
      spi_dev->write(ptr, bytes_remaining);
   b95c4:	9b07      	ldr	r3, [sp, #28]
   b95c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b95c8:	9300      	str	r3, [sp, #0]
   b95ca:	462a      	mov	r2, r5
   b95cc:	4641      	mov	r1, r8
   b95ce:	f7ff fcde 	bl	b8f8e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   b95d2:	e7db      	b.n	b958c <_ZN15Adafruit_SH110X7displayEv+0xf8>
    }
  }
  // reset dirty window
  window_x1 = 1024;
  window_y1 = 1024;
  window_x2 = -1;
   b95d4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
   b95d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b95dc:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  window_y2 = -1;
}
   b95e0:	b00b      	add	sp, #44	; 0x2c
   b95e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000b95e8 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>:
Adafruit_SH110X::Adafruit_SH110X(uint16_t w, uint16_t h, TwoWire *twi,
   b95e8:	b530      	push	{r4, r5, lr}
   b95ea:	b085      	sub	sp, #20
   b95ec:	4604      	mov	r4, r0
    : Adafruit_GrayOLED(1, w, h, twi, rst_pin, clkDuring, clkAfter) {}
   b95ee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   b95f0:	9503      	str	r5, [sp, #12]
   b95f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   b95f4:	9502      	str	r5, [sp, #8]
   b95f6:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   b95fa:	e9cd 3500 	strd	r3, r5, [sp]
   b95fe:	4613      	mov	r3, r2
   b9600:	460a      	mov	r2, r1
   b9602:	2101      	movs	r1, #1
   b9604:	f7ff fd90 	bl	b9128 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>
   b9608:	4b03      	ldr	r3, [pc, #12]	; (b9618 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm+0x30>)
   b960a:	6023      	str	r3, [r4, #0]
   b960c:	4620      	mov	r0, r4
   b960e:	2300      	movs	r3, #0
   b9610:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b9614:	b005      	add	sp, #20
   b9616:	bd30      	pop	{r4, r5, pc}
   b9618:	000c1764 	.word	0x000c1764

000b961c <_ZN15Adafruit_SH110XD1Ev>:
Adafruit_SH110X::~Adafruit_SH110X(void) {}
   b961c:	b510      	push	{r4, lr}
   b961e:	4b03      	ldr	r3, [pc, #12]	; (b962c <_ZN15Adafruit_SH110XD1Ev+0x10>)
   b9620:	6003      	str	r3, [r0, #0]
   b9622:	4604      	mov	r4, r0
   b9624:	f7ff fda2 	bl	b916c <_ZN17Adafruit_GrayOLEDD1Ev>
   b9628:	4620      	mov	r0, r4
   b962a:	bd10      	pop	{r4, pc}
   b962c:	000c1764 	.word	0x000c1764

000b9630 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b9630:	b508      	push	{r3, lr}
   b9632:	4b02      	ldr	r3, [pc, #8]	; (b963c <hal_ble_stack_init+0xc>)
   b9634:	681b      	ldr	r3, [r3, #0]
   b9636:	689b      	ldr	r3, [r3, #8]
   b9638:	9301      	str	r3, [sp, #4]
   b963a:	bd08      	pop	{r3, pc}
   b963c:	00030278 	.word	0x00030278

000b9640 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   b9640:	b508      	push	{r3, lr}
   b9642:	4b02      	ldr	r3, [pc, #8]	; (b964c <hal_ble_gap_set_tx_power+0xc>)
   b9644:	681b      	ldr	r3, [r3, #0]
   b9646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9648:	9301      	str	r3, [sp, #4]
   b964a:	bd08      	pop	{r3, pc}
   b964c:	00030278 	.word	0x00030278

000b9650 <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   b9650:	b508      	push	{r3, lr}
   b9652:	4b02      	ldr	r3, [pc, #8]	; (b965c <hal_ble_gap_set_scan_parameters+0xc>)
   b9654:	681b      	ldr	r3, [r3, #0]
   b9656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b9658:	9301      	str	r3, [sp, #4]
   b965a:	bd08      	pop	{r3, pc}
   b965c:	00030278 	.word	0x00030278

000b9660 <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   b9660:	b508      	push	{r3, lr}
   b9662:	4b02      	ldr	r3, [pc, #8]	; (b966c <hal_ble_gap_get_scan_parameters+0xc>)
   b9664:	681b      	ldr	r3, [r3, #0]
   b9666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b9668:	9301      	str	r3, [sp, #4]
   b966a:	bd08      	pop	{r3, pc}
   b966c:	00030278 	.word	0x00030278

000b9670 <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b9670:	b508      	push	{r3, lr}
   b9672:	4b02      	ldr	r3, [pc, #8]	; (b967c <hal_ble_gap_start_scan+0xc>)
   b9674:	681b      	ldr	r3, [r3, #0]
   b9676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9678:	9301      	str	r3, [sp, #4]
   b967a:	bd08      	pop	{r3, pc}
   b967c:	00030278 	.word	0x00030278

000b9680 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b9680:	b508      	push	{r3, lr}
   b9682:	4b03      	ldr	r3, [pc, #12]	; (b9690 <hal_ble_gap_stop_scan+0x10>)
   b9684:	681b      	ldr	r3, [r3, #0]
   b9686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b968a:	9301      	str	r3, [sp, #4]
   b968c:	bd08      	pop	{r3, pc}
   b968e:	0000      	.short	0x0000
   b9690:	00030278 	.word	0x00030278

000b9694 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b9694:	b508      	push	{r3, lr}
   b9696:	4b03      	ldr	r3, [pc, #12]	; (b96a4 <hal_ble_gap_disconnect+0x10>)
   b9698:	681b      	ldr	r3, [r3, #0]
   b969a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b969e:	9301      	str	r3, [sp, #4]
   b96a0:	bd08      	pop	{r3, pc}
   b96a2:	0000      	.short	0x0000
   b96a4:	00030278 	.word	0x00030278

000b96a8 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b96a8:	b508      	push	{r3, lr}
   b96aa:	4b03      	ldr	r3, [pc, #12]	; (b96b8 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b96ac:	681b      	ldr	r3, [r3, #0]
   b96ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b96b2:	9301      	str	r3, [sp, #4]
   b96b4:	bd08      	pop	{r3, pc}
   b96b6:	0000      	.short	0x0000
   b96b8:	00030278 	.word	0x00030278

000b96bc <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b96bc:	b508      	push	{r3, lr}
   b96be:	4b03      	ldr	r3, [pc, #12]	; (b96cc <hal_ble_gatt_client_discover_all_services+0x10>)
   b96c0:	681b      	ldr	r3, [r3, #0]
   b96c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b96c6:	9301      	str	r3, [sp, #4]
   b96c8:	bd08      	pop	{r3, pc}
   b96ca:	0000      	.short	0x0000
   b96cc:	00030278 	.word	0x00030278

000b96d0 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b96d0:	b508      	push	{r3, lr}
   b96d2:	4b03      	ldr	r3, [pc, #12]	; (b96e0 <hal_ble_gatt_client_discover_characteristics+0x10>)
   b96d4:	681b      	ldr	r3, [r3, #0]
   b96d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b96da:	9301      	str	r3, [sp, #4]
   b96dc:	bd08      	pop	{r3, pc}
   b96de:	0000      	.short	0x0000
   b96e0:	00030278 	.word	0x00030278

000b96e4 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b96e4:	b508      	push	{r3, lr}
   b96e6:	4b03      	ldr	r3, [pc, #12]	; (b96f4 <hal_ble_gatt_client_write_with_response+0x10>)
   b96e8:	681b      	ldr	r3, [r3, #0]
   b96ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b96ee:	9301      	str	r3, [sp, #4]
   b96f0:	bd08      	pop	{r3, pc}
   b96f2:	0000      	.short	0x0000
   b96f4:	00030278 	.word	0x00030278

000b96f8 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b96f8:	b508      	push	{r3, lr}
   b96fa:	4b03      	ldr	r3, [pc, #12]	; (b9708 <hal_ble_gatt_client_write_without_response+0x10>)
   b96fc:	681b      	ldr	r3, [r3, #0]
   b96fe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b9702:	9301      	str	r3, [sp, #4]
   b9704:	bd08      	pop	{r3, pc}
   b9706:	0000      	.short	0x0000
   b9708:	00030278 	.word	0x00030278

000b970c <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b970c:	b508      	push	{r3, lr}
   b970e:	4b03      	ldr	r3, [pc, #12]	; (b971c <hal_ble_gatt_client_read+0x10>)
   b9710:	681b      	ldr	r3, [r3, #0]
   b9712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b9716:	9301      	str	r3, [sp, #4]
   b9718:	bd08      	pop	{r3, pc}
   b971a:	0000      	.short	0x0000
   b971c:	00030278 	.word	0x00030278

000b9720 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b9720:	b508      	push	{r3, lr}
   b9722:	4b03      	ldr	r3, [pc, #12]	; (b9730 <hal_ble_gap_connect+0x10>)
   b9724:	681b      	ldr	r3, [r3, #0]
   b9726:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b972a:	9301      	str	r3, [sp, #4]
   b972c:	bd08      	pop	{r3, pc}
   b972e:	0000      	.short	0x0000
   b9730:	00030278 	.word	0x00030278

000b9734 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b9734:	b508      	push	{r3, lr}
   b9736:	4b03      	ldr	r3, [pc, #12]	; (b9744 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b9738:	681b      	ldr	r3, [r3, #0]
   b973a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b973e:	9301      	str	r3, [sp, #4]
   b9740:	bd08      	pop	{r3, pc}
   b9742:	0000      	.short	0x0000
   b9744:	00030278 	.word	0x00030278

000b9748 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b9748:	b508      	push	{r3, lr}
   b974a:	4b03      	ldr	r3, [pc, #12]	; (b9758 <hal_ble_gatt_client_configure_cccd+0x10>)
   b974c:	681b      	ldr	r3, [r3, #0]
   b974e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b9752:	9301      	str	r3, [sp, #4]
   b9754:	bd08      	pop	{r3, pc}
   b9756:	0000      	.short	0x0000
   b9758:	00030278 	.word	0x00030278

000b975c <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b975c:	b508      	push	{r3, lr}
   b975e:	4b03      	ldr	r3, [pc, #12]	; (b976c <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b9760:	681b      	ldr	r3, [r3, #0]
   b9762:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b9766:	9301      	str	r3, [sp, #4]
   b9768:	bd08      	pop	{r3, pc}
   b976a:	0000      	.short	0x0000
   b976c:	00030278 	.word	0x00030278

000b9770 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b9770:	b508      	push	{r3, lr}
   b9772:	4b03      	ldr	r3, [pc, #12]	; (b9780 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b9774:	681b      	ldr	r3, [r3, #0]
   b9776:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b977a:	9301      	str	r3, [sp, #4]
   b977c:	bd08      	pop	{r3, pc}
   b977e:	0000      	.short	0x0000
   b9780:	00030278 	.word	0x00030278

000b9784 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b9784:	b508      	push	{r3, lr}
   b9786:	4b02      	ldr	r3, [pc, #8]	; (b9790 <os_thread_yield+0xc>)
   b9788:	681b      	ldr	r3, [r3, #0]
   b978a:	68db      	ldr	r3, [r3, #12]
   b978c:	9301      	str	r3, [sp, #4]
   b978e:	bd08      	pop	{r3, pc}
   b9790:	00030248 	.word	0x00030248

000b9794 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b9794:	b508      	push	{r3, lr}
   b9796:	4b02      	ldr	r3, [pc, #8]	; (b97a0 <os_thread_scheduling+0xc>)
   b9798:	681b      	ldr	r3, [r3, #0]
   b979a:	69db      	ldr	r3, [r3, #28]
   b979c:	9301      	str	r3, [sp, #4]
   b979e:	bd08      	pop	{r3, pc}
   b97a0:	00030248 	.word	0x00030248

000b97a4 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b97a4:	b508      	push	{r3, lr}
   b97a6:	4b02      	ldr	r3, [pc, #8]	; (b97b0 <os_timer_create+0xc>)
   b97a8:	681b      	ldr	r3, [r3, #0]
   b97aa:	6a1b      	ldr	r3, [r3, #32]
   b97ac:	9301      	str	r3, [sp, #4]
   b97ae:	bd08      	pop	{r3, pc}
   b97b0:	00030248 	.word	0x00030248

000b97b4 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b97b4:	b508      	push	{r3, lr}
   b97b6:	4b02      	ldr	r3, [pc, #8]	; (b97c0 <os_timer_destroy+0xc>)
   b97b8:	681b      	ldr	r3, [r3, #0]
   b97ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b97bc:	9301      	str	r3, [sp, #4]
   b97be:	bd08      	pop	{r3, pc}
   b97c0:	00030248 	.word	0x00030248

000b97c4 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b97c4:	b508      	push	{r3, lr}
   b97c6:	4b02      	ldr	r3, [pc, #8]	; (b97d0 <os_timer_get_id+0xc>)
   b97c8:	681b      	ldr	r3, [r3, #0]
   b97ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b97cc:	9301      	str	r3, [sp, #4]
   b97ce:	bd08      	pop	{r3, pc}
   b97d0:	00030248 	.word	0x00030248

000b97d4 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b97d4:	b508      	push	{r3, lr}
   b97d6:	4b02      	ldr	r3, [pc, #8]	; (b97e0 <os_timer_change+0xc>)
   b97d8:	681b      	ldr	r3, [r3, #0]
   b97da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b97dc:	9301      	str	r3, [sp, #4]
   b97de:	bd08      	pop	{r3, pc}
   b97e0:	00030248 	.word	0x00030248

000b97e4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b97e4:	b508      	push	{r3, lr}
   b97e6:	4b02      	ldr	r3, [pc, #8]	; (b97f0 <os_mutex_recursive_create+0xc>)
   b97e8:	681b      	ldr	r3, [r3, #0]
   b97ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b97ec:	9301      	str	r3, [sp, #4]
   b97ee:	bd08      	pop	{r3, pc}
   b97f0:	00030248 	.word	0x00030248

000b97f4 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b97f4:	b508      	push	{r3, lr}
   b97f6:	4b02      	ldr	r3, [pc, #8]	; (b9800 <os_mutex_recursive_lock+0xc>)
   b97f8:	681b      	ldr	r3, [r3, #0]
   b97fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b97fc:	9301      	str	r3, [sp, #4]
   b97fe:	bd08      	pop	{r3, pc}
   b9800:	00030248 	.word	0x00030248

000b9804 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b9804:	b508      	push	{r3, lr}
   b9806:	4b02      	ldr	r3, [pc, #8]	; (b9810 <os_mutex_recursive_unlock+0xc>)
   b9808:	681b      	ldr	r3, [r3, #0]
   b980a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b980c:	9301      	str	r3, [sp, #4]
   b980e:	bd08      	pop	{r3, pc}
   b9810:	00030248 	.word	0x00030248

000b9814 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b9814:	b508      	push	{r3, lr}
   b9816:	4b02      	ldr	r3, [pc, #8]	; (b9820 <os_timer_set_id+0xc>)
   b9818:	681b      	ldr	r3, [r3, #0]
   b981a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b981c:	9301      	str	r3, [sp, #4]
   b981e:	bd08      	pop	{r3, pc}
   b9820:	00030248 	.word	0x00030248

000b9824 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b9824:	b508      	push	{r3, lr}
   b9826:	4b02      	ldr	r3, [pc, #8]	; (b9830 <HAL_RNG_GetRandomNumber+0xc>)
   b9828:	681b      	ldr	r3, [r3, #0]
   b982a:	685b      	ldr	r3, [r3, #4]
   b982c:	9301      	str	r3, [sp, #4]
   b982e:	bd08      	pop	{r3, pc}
   b9830:	00030218 	.word	0x00030218

000b9834 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b9834:	b508      	push	{r3, lr}
   b9836:	4b02      	ldr	r3, [pc, #8]	; (b9840 <HAL_Delay_Microseconds+0xc>)
   b9838:	681b      	ldr	r3, [r3, #0]
   b983a:	68db      	ldr	r3, [r3, #12]
   b983c:	9301      	str	r3, [sp, #4]
   b983e:	bd08      	pop	{r3, pc}
   b9840:	00030218 	.word	0x00030218

000b9844 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b9844:	b508      	push	{r3, lr}
   b9846:	4b02      	ldr	r3, [pc, #8]	; (b9850 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b9848:	681b      	ldr	r3, [r3, #0]
   b984a:	691b      	ldr	r3, [r3, #16]
   b984c:	9301      	str	r3, [sp, #4]
   b984e:	bd08      	pop	{r3, pc}
   b9850:	00030218 	.word	0x00030218

000b9854 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b9854:	b508      	push	{r3, lr}
   b9856:	4b02      	ldr	r3, [pc, #8]	; (b9860 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b9858:	681b      	ldr	r3, [r3, #0]
   b985a:	695b      	ldr	r3, [r3, #20]
   b985c:	9301      	str	r3, [sp, #4]
   b985e:	bd08      	pop	{r3, pc}
   b9860:	00030218 	.word	0x00030218

000b9864 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b9864:	b508      	push	{r3, lr}
   b9866:	4b02      	ldr	r3, [pc, #8]	; (b9870 <hal_rtc_time_is_valid+0xc>)
   b9868:	681b      	ldr	r3, [r3, #0]
   b986a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b986c:	9301      	str	r3, [sp, #4]
   b986e:	bd08      	pop	{r3, pc}
   b9870:	00030218 	.word	0x00030218

000b9874 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b9874:	b508      	push	{r3, lr}
   b9876:	4b02      	ldr	r3, [pc, #8]	; (b9880 <hal_rtc_get_time+0xc>)
   b9878:	681b      	ldr	r3, [r3, #0]
   b987a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b987c:	9301      	str	r3, [sp, #4]
   b987e:	bd08      	pop	{r3, pc}
   b9880:	00030218 	.word	0x00030218

000b9884 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b9884:	b508      	push	{r3, lr}
   b9886:	4b02      	ldr	r3, [pc, #8]	; (b9890 <HAL_Validate_Pin_Function+0xc>)
   b9888:	681b      	ldr	r3, [r3, #0]
   b988a:	685b      	ldr	r3, [r3, #4]
   b988c:	9301      	str	r3, [sp, #4]
   b988e:	bd08      	pop	{r3, pc}
   b9890:	0003022c 	.word	0x0003022c

000b9894 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b9894:	b508      	push	{r3, lr}
   b9896:	4b02      	ldr	r3, [pc, #8]	; (b98a0 <HAL_Pin_Mode+0xc>)
   b9898:	681b      	ldr	r3, [r3, #0]
   b989a:	689b      	ldr	r3, [r3, #8]
   b989c:	9301      	str	r3, [sp, #4]
   b989e:	bd08      	pop	{r3, pc}
   b98a0:	0003022c 	.word	0x0003022c

000b98a4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b98a4:	b508      	push	{r3, lr}
   b98a6:	4b02      	ldr	r3, [pc, #8]	; (b98b0 <HAL_Get_Pin_Mode+0xc>)
   b98a8:	681b      	ldr	r3, [r3, #0]
   b98aa:	68db      	ldr	r3, [r3, #12]
   b98ac:	9301      	str	r3, [sp, #4]
   b98ae:	bd08      	pop	{r3, pc}
   b98b0:	0003022c 	.word	0x0003022c

000b98b4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b98b4:	b508      	push	{r3, lr}
   b98b6:	4b02      	ldr	r3, [pc, #8]	; (b98c0 <HAL_GPIO_Write+0xc>)
   b98b8:	681b      	ldr	r3, [r3, #0]
   b98ba:	691b      	ldr	r3, [r3, #16]
   b98bc:	9301      	str	r3, [sp, #4]
   b98be:	bd08      	pop	{r3, pc}
   b98c0:	0003022c 	.word	0x0003022c

000b98c4 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b98c4:	b508      	push	{r3, lr}
   b98c6:	4b02      	ldr	r3, [pc, #8]	; (b98d0 <HAL_Interrupts_Attach+0xc>)
   b98c8:	681b      	ldr	r3, [r3, #0]
   b98ca:	699b      	ldr	r3, [r3, #24]
   b98cc:	9301      	str	r3, [sp, #4]
   b98ce:	bd08      	pop	{r3, pc}
   b98d0:	0003022c 	.word	0x0003022c

000b98d4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b98d4:	b508      	push	{r3, lr}
   b98d6:	4b02      	ldr	r3, [pc, #8]	; (b98e0 <HAL_Interrupts_Detach+0xc>)
   b98d8:	681b      	ldr	r3, [r3, #0]
   b98da:	69db      	ldr	r3, [r3, #28]
   b98dc:	9301      	str	r3, [sp, #4]
   b98de:	bd08      	pop	{r3, pc}
   b98e0:	0003022c 	.word	0x0003022c

000b98e4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b98e4:	b508      	push	{r3, lr}
   b98e6:	4b02      	ldr	r3, [pc, #8]	; (b98f0 <hal_adc_read+0xc>)
   b98e8:	681b      	ldr	r3, [r3, #0]
   b98ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b98ec:	9301      	str	r3, [sp, #4]
   b98ee:	bd08      	pop	{r3, pc}
   b98f0:	0003022c 	.word	0x0003022c

000b98f4 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b98f4:	b508      	push	{r3, lr}
   b98f6:	4b02      	ldr	r3, [pc, #8]	; (b9900 <hal_i2c_set_speed+0xc>)
   b98f8:	681b      	ldr	r3, [r3, #0]
   b98fa:	681b      	ldr	r3, [r3, #0]
   b98fc:	9301      	str	r3, [sp, #4]
   b98fe:	bd08      	pop	{r3, pc}
   b9900:	00030228 	.word	0x00030228

000b9904 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b9904:	b508      	push	{r3, lr}
   b9906:	4b02      	ldr	r3, [pc, #8]	; (b9910 <hal_i2c_begin+0xc>)
   b9908:	681b      	ldr	r3, [r3, #0]
   b990a:	68db      	ldr	r3, [r3, #12]
   b990c:	9301      	str	r3, [sp, #4]
   b990e:	bd08      	pop	{r3, pc}
   b9910:	00030228 	.word	0x00030228

000b9914 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b9914:	b508      	push	{r3, lr}
   b9916:	4b02      	ldr	r3, [pc, #8]	; (b9920 <hal_i2c_begin_transmission+0xc>)
   b9918:	681b      	ldr	r3, [r3, #0]
   b991a:	699b      	ldr	r3, [r3, #24]
   b991c:	9301      	str	r3, [sp, #4]
   b991e:	bd08      	pop	{r3, pc}
   b9920:	00030228 	.word	0x00030228

000b9924 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b9924:	b508      	push	{r3, lr}
   b9926:	4b02      	ldr	r3, [pc, #8]	; (b9930 <hal_i2c_end_transmission+0xc>)
   b9928:	681b      	ldr	r3, [r3, #0]
   b992a:	69db      	ldr	r3, [r3, #28]
   b992c:	9301      	str	r3, [sp, #4]
   b992e:	bd08      	pop	{r3, pc}
   b9930:	00030228 	.word	0x00030228

000b9934 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b9934:	b508      	push	{r3, lr}
   b9936:	4b02      	ldr	r3, [pc, #8]	; (b9940 <hal_i2c_write+0xc>)
   b9938:	681b      	ldr	r3, [r3, #0]
   b993a:	6a1b      	ldr	r3, [r3, #32]
   b993c:	9301      	str	r3, [sp, #4]
   b993e:	bd08      	pop	{r3, pc}
   b9940:	00030228 	.word	0x00030228

000b9944 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b9944:	b508      	push	{r3, lr}
   b9946:	4b02      	ldr	r3, [pc, #8]	; (b9950 <hal_i2c_available+0xc>)
   b9948:	681b      	ldr	r3, [r3, #0]
   b994a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b994c:	9301      	str	r3, [sp, #4]
   b994e:	bd08      	pop	{r3, pc}
   b9950:	00030228 	.word	0x00030228

000b9954 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b9954:	b508      	push	{r3, lr}
   b9956:	4b02      	ldr	r3, [pc, #8]	; (b9960 <hal_i2c_read+0xc>)
   b9958:	681b      	ldr	r3, [r3, #0]
   b995a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b995c:	9301      	str	r3, [sp, #4]
   b995e:	bd08      	pop	{r3, pc}
   b9960:	00030228 	.word	0x00030228

000b9964 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b9964:	b508      	push	{r3, lr}
   b9966:	4b02      	ldr	r3, [pc, #8]	; (b9970 <hal_i2c_peek+0xc>)
   b9968:	681b      	ldr	r3, [r3, #0]
   b996a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b996c:	9301      	str	r3, [sp, #4]
   b996e:	bd08      	pop	{r3, pc}
   b9970:	00030228 	.word	0x00030228

000b9974 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b9974:	b508      	push	{r3, lr}
   b9976:	4b02      	ldr	r3, [pc, #8]	; (b9980 <hal_i2c_flush+0xc>)
   b9978:	681b      	ldr	r3, [r3, #0]
   b997a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b997c:	9301      	str	r3, [sp, #4]
   b997e:	bd08      	pop	{r3, pc}
   b9980:	00030228 	.word	0x00030228

000b9984 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b9984:	b508      	push	{r3, lr}
   b9986:	4b02      	ldr	r3, [pc, #8]	; (b9990 <hal_i2c_is_enabled+0xc>)
   b9988:	681b      	ldr	r3, [r3, #0]
   b998a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b998c:	9301      	str	r3, [sp, #4]
   b998e:	bd08      	pop	{r3, pc}
   b9990:	00030228 	.word	0x00030228

000b9994 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b9994:	b508      	push	{r3, lr}
   b9996:	4b02      	ldr	r3, [pc, #8]	; (b99a0 <hal_i2c_init+0xc>)
   b9998:	681b      	ldr	r3, [r3, #0]
   b999a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b999c:	9301      	str	r3, [sp, #4]
   b999e:	bd08      	pop	{r3, pc}
   b99a0:	00030228 	.word	0x00030228

000b99a4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b99a4:	b508      	push	{r3, lr}
   b99a6:	4b02      	ldr	r3, [pc, #8]	; (b99b0 <inet_inet_ntop+0xc>)
   b99a8:	681b      	ldr	r3, [r3, #0]
   b99aa:	695b      	ldr	r3, [r3, #20]
   b99ac:	9301      	str	r3, [sp, #4]
   b99ae:	bd08      	pop	{r3, pc}
   b99b0:	00030264 	.word	0x00030264

000b99b4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b99b4:	b508      	push	{r3, lr}
   b99b6:	4b02      	ldr	r3, [pc, #8]	; (b99c0 <netdb_freeaddrinfo+0xc>)
   b99b8:	681b      	ldr	r3, [r3, #0]
   b99ba:	689b      	ldr	r3, [r3, #8]
   b99bc:	9301      	str	r3, [sp, #4]
   b99be:	bd08      	pop	{r3, pc}
   b99c0:	00030268 	.word	0x00030268

000b99c4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b99c4:	b508      	push	{r3, lr}
   b99c6:	4b02      	ldr	r3, [pc, #8]	; (b99d0 <netdb_getaddrinfo+0xc>)
   b99c8:	681b      	ldr	r3, [r3, #0]
   b99ca:	68db      	ldr	r3, [r3, #12]
   b99cc:	9301      	str	r3, [sp, #4]
   b99ce:	bd08      	pop	{r3, pc}
   b99d0:	00030268 	.word	0x00030268

000b99d4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b99d4:	b508      	push	{r3, lr}
   b99d6:	4b02      	ldr	r3, [pc, #8]	; (b99e0 <hal_spi_begin+0xc>)
   b99d8:	681b      	ldr	r3, [r3, #0]
   b99da:	681b      	ldr	r3, [r3, #0]
   b99dc:	9301      	str	r3, [sp, #4]
   b99de:	bd08      	pop	{r3, pc}
   b99e0:	00030230 	.word	0x00030230

000b99e4 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b99e4:	b508      	push	{r3, lr}
   b99e6:	4b02      	ldr	r3, [pc, #8]	; (b99f0 <hal_spi_transfer+0xc>)
   b99e8:	681b      	ldr	r3, [r3, #0]
   b99ea:	695b      	ldr	r3, [r3, #20]
   b99ec:	9301      	str	r3, [sp, #4]
   b99ee:	bd08      	pop	{r3, pc}
   b99f0:	00030230 	.word	0x00030230

000b99f4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b99f4:	b508      	push	{r3, lr}
   b99f6:	4b02      	ldr	r3, [pc, #8]	; (b9a00 <hal_spi_init+0xc>)
   b99f8:	681b      	ldr	r3, [r3, #0]
   b99fa:	69db      	ldr	r3, [r3, #28]
   b99fc:	9301      	str	r3, [sp, #4]
   b99fe:	bd08      	pop	{r3, pc}
   b9a00:	00030230 	.word	0x00030230

000b9a04 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b9a04:	b508      	push	{r3, lr}
   b9a06:	4b02      	ldr	r3, [pc, #8]	; (b9a10 <hal_spi_is_enabled+0xc>)
   b9a08:	681b      	ldr	r3, [r3, #0]
   b9a0a:	6a1b      	ldr	r3, [r3, #32]
   b9a0c:	9301      	str	r3, [sp, #4]
   b9a0e:	bd08      	pop	{r3, pc}
   b9a10:	00030230 	.word	0x00030230

000b9a14 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b9a14:	b508      	push	{r3, lr}
   b9a16:	4b02      	ldr	r3, [pc, #8]	; (b9a20 <hal_spi_info+0xc>)
   b9a18:	681b      	ldr	r3, [r3, #0]
   b9a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9a1c:	9301      	str	r3, [sp, #4]
   b9a1e:	bd08      	pop	{r3, pc}
   b9a20:	00030230 	.word	0x00030230

000b9a24 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b9a24:	b508      	push	{r3, lr}
   b9a26:	4b02      	ldr	r3, [pc, #8]	; (b9a30 <hal_spi_transfer_dma+0xc>)
   b9a28:	681b      	ldr	r3, [r3, #0]
   b9a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9a2c:	9301      	str	r3, [sp, #4]
   b9a2e:	bd08      	pop	{r3, pc}
   b9a30:	00030230 	.word	0x00030230

000b9a34 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b9a34:	b508      	push	{r3, lr}
   b9a36:	4b02      	ldr	r3, [pc, #8]	; (b9a40 <hal_spi_transfer_dma_status+0xc>)
   b9a38:	681b      	ldr	r3, [r3, #0]
   b9a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b9a3c:	9301      	str	r3, [sp, #4]
   b9a3e:	bd08      	pop	{r3, pc}
   b9a40:	00030230 	.word	0x00030230

000b9a44 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b9a44:	b508      	push	{r3, lr}
   b9a46:	4b02      	ldr	r3, [pc, #8]	; (b9a50 <hal_spi_set_settings+0xc>)
   b9a48:	681b      	ldr	r3, [r3, #0]
   b9a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9a4c:	9301      	str	r3, [sp, #4]
   b9a4e:	bd08      	pop	{r3, pc}
   b9a50:	00030230 	.word	0x00030230

000b9a54 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b9a54:	b508      	push	{r3, lr}
   b9a56:	4b02      	ldr	r3, [pc, #8]	; (b9a60 <hal_spi_acquire+0xc>)
   b9a58:	681b      	ldr	r3, [r3, #0]
   b9a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9a5c:	9301      	str	r3, [sp, #4]
   b9a5e:	bd08      	pop	{r3, pc}
   b9a60:	00030230 	.word	0x00030230

000b9a64 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b9a64:	b508      	push	{r3, lr}
   b9a66:	4b02      	ldr	r3, [pc, #8]	; (b9a70 <hal_spi_release+0xc>)
   b9a68:	681b      	ldr	r3, [r3, #0]
   b9a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9a6c:	9301      	str	r3, [sp, #4]
   b9a6e:	bd08      	pop	{r3, pc}
   b9a70:	00030230 	.word	0x00030230

000b9a74 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b9a74:	b508      	push	{r3, lr}
   b9a76:	4b02      	ldr	r3, [pc, #8]	; (b9a80 <hal_usart_write+0xc>)
   b9a78:	681b      	ldr	r3, [r3, #0]
   b9a7a:	68db      	ldr	r3, [r3, #12]
   b9a7c:	9301      	str	r3, [sp, #4]
   b9a7e:	bd08      	pop	{r3, pc}
   b9a80:	0003023c 	.word	0x0003023c

000b9a84 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b9a84:	b508      	push	{r3, lr}
   b9a86:	4b02      	ldr	r3, [pc, #8]	; (b9a90 <hal_usart_available+0xc>)
   b9a88:	681b      	ldr	r3, [r3, #0]
   b9a8a:	691b      	ldr	r3, [r3, #16]
   b9a8c:	9301      	str	r3, [sp, #4]
   b9a8e:	bd08      	pop	{r3, pc}
   b9a90:	0003023c 	.word	0x0003023c

000b9a94 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b9a94:	b508      	push	{r3, lr}
   b9a96:	4b02      	ldr	r3, [pc, #8]	; (b9aa0 <hal_usart_read+0xc>)
   b9a98:	681b      	ldr	r3, [r3, #0]
   b9a9a:	695b      	ldr	r3, [r3, #20]
   b9a9c:	9301      	str	r3, [sp, #4]
   b9a9e:	bd08      	pop	{r3, pc}
   b9aa0:	0003023c 	.word	0x0003023c

000b9aa4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b9aa4:	b508      	push	{r3, lr}
   b9aa6:	4b02      	ldr	r3, [pc, #8]	; (b9ab0 <hal_usart_peek+0xc>)
   b9aa8:	681b      	ldr	r3, [r3, #0]
   b9aaa:	699b      	ldr	r3, [r3, #24]
   b9aac:	9301      	str	r3, [sp, #4]
   b9aae:	bd08      	pop	{r3, pc}
   b9ab0:	0003023c 	.word	0x0003023c

000b9ab4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b9ab4:	b508      	push	{r3, lr}
   b9ab6:	4b02      	ldr	r3, [pc, #8]	; (b9ac0 <hal_usart_flush+0xc>)
   b9ab8:	681b      	ldr	r3, [r3, #0]
   b9aba:	69db      	ldr	r3, [r3, #28]
   b9abc:	9301      	str	r3, [sp, #4]
   b9abe:	bd08      	pop	{r3, pc}
   b9ac0:	0003023c 	.word	0x0003023c

000b9ac4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b9ac4:	b508      	push	{r3, lr}
   b9ac6:	4b02      	ldr	r3, [pc, #8]	; (b9ad0 <hal_usart_is_enabled+0xc>)
   b9ac8:	681b      	ldr	r3, [r3, #0]
   b9aca:	6a1b      	ldr	r3, [r3, #32]
   b9acc:	9301      	str	r3, [sp, #4]
   b9ace:	bd08      	pop	{r3, pc}
   b9ad0:	0003023c 	.word	0x0003023c

000b9ad4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b9ad4:	b508      	push	{r3, lr}
   b9ad6:	4b02      	ldr	r3, [pc, #8]	; (b9ae0 <hal_usart_available_data_for_write+0xc>)
   b9ad8:	681b      	ldr	r3, [r3, #0]
   b9ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9adc:	9301      	str	r3, [sp, #4]
   b9ade:	bd08      	pop	{r3, pc}
   b9ae0:	0003023c 	.word	0x0003023c

000b9ae4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b9ae4:	b508      	push	{r3, lr}
   b9ae6:	4b02      	ldr	r3, [pc, #8]	; (b9af0 <hal_usart_begin_config+0xc>)
   b9ae8:	681b      	ldr	r3, [r3, #0]
   b9aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9aec:	9301      	str	r3, [sp, #4]
   b9aee:	bd08      	pop	{r3, pc}
   b9af0:	0003023c 	.word	0x0003023c

000b9af4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b9af4:	b508      	push	{r3, lr}
   b9af6:	4b02      	ldr	r3, [pc, #8]	; (b9b00 <hal_usart_init_ex+0xc>)
   b9af8:	681b      	ldr	r3, [r3, #0]
   b9afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9afc:	9301      	str	r3, [sp, #4]
   b9afe:	bd08      	pop	{r3, pc}
   b9b00:	0003023c 	.word	0x0003023c

000b9b04 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b9b04:	b508      	push	{r3, lr}
   b9b06:	4b02      	ldr	r3, [pc, #8]	; (b9b10 <HAL_USB_USART_Init+0xc>)
   b9b08:	681b      	ldr	r3, [r3, #0]
   b9b0a:	681b      	ldr	r3, [r3, #0]
   b9b0c:	9301      	str	r3, [sp, #4]
   b9b0e:	bd08      	pop	{r3, pc}
   b9b10:	0003024c 	.word	0x0003024c

000b9b14 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b9b14:	b508      	push	{r3, lr}
   b9b16:	4b02      	ldr	r3, [pc, #8]	; (b9b20 <HAL_USB_USART_Begin+0xc>)
   b9b18:	681b      	ldr	r3, [r3, #0]
   b9b1a:	685b      	ldr	r3, [r3, #4]
   b9b1c:	9301      	str	r3, [sp, #4]
   b9b1e:	bd08      	pop	{r3, pc}
   b9b20:	0003024c 	.word	0x0003024c

000b9b24 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b9b24:	b508      	push	{r3, lr}
   b9b26:	4b02      	ldr	r3, [pc, #8]	; (b9b30 <HAL_USB_USART_Available_Data+0xc>)
   b9b28:	681b      	ldr	r3, [r3, #0]
   b9b2a:	691b      	ldr	r3, [r3, #16]
   b9b2c:	9301      	str	r3, [sp, #4]
   b9b2e:	bd08      	pop	{r3, pc}
   b9b30:	0003024c 	.word	0x0003024c

000b9b34 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b9b34:	b508      	push	{r3, lr}
   b9b36:	4b02      	ldr	r3, [pc, #8]	; (b9b40 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b9b38:	681b      	ldr	r3, [r3, #0]
   b9b3a:	695b      	ldr	r3, [r3, #20]
   b9b3c:	9301      	str	r3, [sp, #4]
   b9b3e:	bd08      	pop	{r3, pc}
   b9b40:	0003024c 	.word	0x0003024c

000b9b44 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9b44:	b508      	push	{r3, lr}
   b9b46:	4b02      	ldr	r3, [pc, #8]	; (b9b50 <HAL_USB_USART_Receive_Data+0xc>)
   b9b48:	681b      	ldr	r3, [r3, #0]
   b9b4a:	699b      	ldr	r3, [r3, #24]
   b9b4c:	9301      	str	r3, [sp, #4]
   b9b4e:	bd08      	pop	{r3, pc}
   b9b50:	0003024c 	.word	0x0003024c

000b9b54 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9b54:	b508      	push	{r3, lr}
   b9b56:	4b02      	ldr	r3, [pc, #8]	; (b9b60 <HAL_USB_USART_Send_Data+0xc>)
   b9b58:	681b      	ldr	r3, [r3, #0]
   b9b5a:	69db      	ldr	r3, [r3, #28]
   b9b5c:	9301      	str	r3, [sp, #4]
   b9b5e:	bd08      	pop	{r3, pc}
   b9b60:	0003024c 	.word	0x0003024c

000b9b64 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b9b64:	b508      	push	{r3, lr}
   b9b66:	4b02      	ldr	r3, [pc, #8]	; (b9b70 <HAL_USB_USART_Flush_Data+0xc>)
   b9b68:	681b      	ldr	r3, [r3, #0]
   b9b6a:	6a1b      	ldr	r3, [r3, #32]
   b9b6c:	9301      	str	r3, [sp, #4]
   b9b6e:	bd08      	pop	{r3, pc}
   b9b70:	0003024c 	.word	0x0003024c

000b9b74 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b9b74:	b508      	push	{r3, lr}
   b9b76:	4b02      	ldr	r3, [pc, #8]	; (b9b80 <panic_+0xc>)
   b9b78:	681b      	ldr	r3, [r3, #0]
   b9b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9b7c:	9301      	str	r3, [sp, #4]
   b9b7e:	bd08      	pop	{r3, pc}
   b9b80:	00030260 	.word	0x00030260

000b9b84 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b9b84:	b508      	push	{r3, lr}
   b9b86:	4b02      	ldr	r3, [pc, #8]	; (b9b90 <log_message+0xc>)
   b9b88:	681b      	ldr	r3, [r3, #0]
   b9b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b9b8c:	9301      	str	r3, [sp, #4]
   b9b8e:	bd08      	pop	{r3, pc}
   b9b90:	00030260 	.word	0x00030260

000b9b94 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b9b94:	b508      	push	{r3, lr}
   b9b96:	4b02      	ldr	r3, [pc, #8]	; (b9ba0 <system_mode+0xc>)
   b9b98:	681b      	ldr	r3, [r3, #0]
   b9b9a:	681b      	ldr	r3, [r3, #0]
   b9b9c:	9301      	str	r3, [sp, #4]
   b9b9e:	bd08      	pop	{r3, pc}
   b9ba0:	00030220 	.word	0x00030220

000b9ba4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b9ba4:	b508      	push	{r3, lr}
   b9ba6:	4b02      	ldr	r3, [pc, #8]	; (b9bb0 <set_system_mode+0xc>)
   b9ba8:	681b      	ldr	r3, [r3, #0]
   b9baa:	685b      	ldr	r3, [r3, #4]
   b9bac:	9301      	str	r3, [sp, #4]
   b9bae:	bd08      	pop	{r3, pc}
   b9bb0:	00030220 	.word	0x00030220

000b9bb4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b9bb4:	b508      	push	{r3, lr}
   b9bb6:	4b02      	ldr	r3, [pc, #8]	; (b9bc0 <system_delay_ms+0xc>)
   b9bb8:	681b      	ldr	r3, [r3, #0]
   b9bba:	695b      	ldr	r3, [r3, #20]
   b9bbc:	9301      	str	r3, [sp, #4]
   b9bbe:	bd08      	pop	{r3, pc}
   b9bc0:	00030220 	.word	0x00030220

000b9bc4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b9bc4:	b508      	push	{r3, lr}
   b9bc6:	4b02      	ldr	r3, [pc, #8]	; (b9bd0 <application_thread_current+0xc>)
   b9bc8:	681b      	ldr	r3, [r3, #0]
   b9bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9bcc:	9301      	str	r3, [sp, #4]
   b9bce:	bd08      	pop	{r3, pc}
   b9bd0:	00030220 	.word	0x00030220

000b9bd4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b9bd4:	b508      	push	{r3, lr}
   b9bd6:	4b02      	ldr	r3, [pc, #8]	; (b9be0 <application_thread_invoke+0xc>)
   b9bd8:	681b      	ldr	r3, [r3, #0]
   b9bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b9bdc:	9301      	str	r3, [sp, #4]
   b9bde:	bd08      	pop	{r3, pc}
   b9be0:	00030220 	.word	0x00030220

000b9be4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b9be4:	b508      	push	{r3, lr}
   b9be6:	4b02      	ldr	r3, [pc, #8]	; (b9bf0 <system_thread_get_state+0xc>)
   b9be8:	681b      	ldr	r3, [r3, #0]
   b9bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b9bec:	9301      	str	r3, [sp, #4]
   b9bee:	bd08      	pop	{r3, pc}
   b9bf0:	00030220 	.word	0x00030220

000b9bf4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b9bf4:	b508      	push	{r3, lr}
   b9bf6:	4b03      	ldr	r3, [pc, #12]	; (b9c04 <system_ctrl_set_app_request_handler+0x10>)
   b9bf8:	681b      	ldr	r3, [r3, #0]
   b9bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b9bfe:	9301      	str	r3, [sp, #4]
   b9c00:	bd08      	pop	{r3, pc}
   b9c02:	0000      	.short	0x0000
   b9c04:	00030220 	.word	0x00030220

000b9c08 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b9c08:	b508      	push	{r3, lr}
   b9c0a:	4b03      	ldr	r3, [pc, #12]	; (b9c18 <system_ctrl_set_result+0x10>)
   b9c0c:	681b      	ldr	r3, [r3, #0]
   b9c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b9c12:	9301      	str	r3, [sp, #4]
   b9c14:	bd08      	pop	{r3, pc}
   b9c16:	0000      	.short	0x0000
   b9c18:	00030220 	.word	0x00030220

000b9c1c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b9c1c:	b508      	push	{r3, lr}
   b9c1e:	4b02      	ldr	r3, [pc, #8]	; (b9c28 <spark_process+0xc>)
   b9c20:	681b      	ldr	r3, [r3, #0]
   b9c22:	689b      	ldr	r3, [r3, #8]
   b9c24:	9301      	str	r3, [sp, #4]
   b9c26:	bd08      	pop	{r3, pc}
   b9c28:	00030244 	.word	0x00030244

000b9c2c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b9c2c:	b508      	push	{r3, lr}
   b9c2e:	4b02      	ldr	r3, [pc, #8]	; (b9c38 <spark_cloud_flag_connected+0xc>)
   b9c30:	681b      	ldr	r3, [r3, #0]
   b9c32:	695b      	ldr	r3, [r3, #20]
   b9c34:	9301      	str	r3, [sp, #4]
   b9c36:	bd08      	pop	{r3, pc}
   b9c38:	00030244 	.word	0x00030244

000b9c3c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b9c3c:	b508      	push	{r3, lr}
   b9c3e:	4b02      	ldr	r3, [pc, #8]	; (b9c48 <spark_send_event+0xc>)
   b9c40:	681b      	ldr	r3, [r3, #0]
   b9c42:	6a1b      	ldr	r3, [r3, #32]
   b9c44:	9301      	str	r3, [sp, #4]
   b9c46:	bd08      	pop	{r3, pc}
   b9c48:	00030244 	.word	0x00030244

000b9c4c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b9c4c:	b508      	push	{r3, lr}
   b9c4e:	4b02      	ldr	r3, [pc, #8]	; (b9c58 <spark_subscribe+0xc>)
   b9c50:	681b      	ldr	r3, [r3, #0]
   b9c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9c54:	9301      	str	r3, [sp, #4]
   b9c56:	bd08      	pop	{r3, pc}
   b9c58:	00030244 	.word	0x00030244

000b9c5c <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b9c5c:	b508      	push	{r3, lr}
   b9c5e:	4b02      	ldr	r3, [pc, #8]	; (b9c68 <spark_sync_time_pending+0xc>)
   b9c60:	681b      	ldr	r3, [r3, #0]
   b9c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9c64:	9301      	str	r3, [sp, #4]
   b9c66:	bd08      	pop	{r3, pc}
   b9c68:	00030244 	.word	0x00030244

000b9c6c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b9c6c:	b508      	push	{r3, lr}
   b9c6e:	4b02      	ldr	r3, [pc, #8]	; (b9c78 <spark_set_random_seed_from_cloud_handler+0xc>)
   b9c70:	681b      	ldr	r3, [r3, #0]
   b9c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9c74:	9301      	str	r3, [sp, #4]
   b9c76:	bd08      	pop	{r3, pc}
   b9c78:	00030244 	.word	0x00030244

000b9c7c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b9c7c:	b508      	push	{r3, lr}
   b9c7e:	4b02      	ldr	r3, [pc, #8]	; (b9c88 <network_connect+0xc>)
   b9c80:	681b      	ldr	r3, [r3, #0]
   b9c82:	685b      	ldr	r3, [r3, #4]
   b9c84:	9301      	str	r3, [sp, #4]
   b9c86:	bd08      	pop	{r3, pc}
   b9c88:	00030240 	.word	0x00030240

000b9c8c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b9c8c:	b508      	push	{r3, lr}
   b9c8e:	4b02      	ldr	r3, [pc, #8]	; (b9c98 <network_connecting+0xc>)
   b9c90:	681b      	ldr	r3, [r3, #0]
   b9c92:	689b      	ldr	r3, [r3, #8]
   b9c94:	9301      	str	r3, [sp, #4]
   b9c96:	bd08      	pop	{r3, pc}
   b9c98:	00030240 	.word	0x00030240

000b9c9c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b9c9c:	b508      	push	{r3, lr}
   b9c9e:	4b02      	ldr	r3, [pc, #8]	; (b9ca8 <network_disconnect+0xc>)
   b9ca0:	681b      	ldr	r3, [r3, #0]
   b9ca2:	68db      	ldr	r3, [r3, #12]
   b9ca4:	9301      	str	r3, [sp, #4]
   b9ca6:	bd08      	pop	{r3, pc}
   b9ca8:	00030240 	.word	0x00030240

000b9cac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b9cac:	b508      	push	{r3, lr}
   b9cae:	4b02      	ldr	r3, [pc, #8]	; (b9cb8 <network_ready+0xc>)
   b9cb0:	681b      	ldr	r3, [r3, #0]
   b9cb2:	691b      	ldr	r3, [r3, #16]
   b9cb4:	9301      	str	r3, [sp, #4]
   b9cb6:	bd08      	pop	{r3, pc}
   b9cb8:	00030240 	.word	0x00030240

000b9cbc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b9cbc:	b508      	push	{r3, lr}
   b9cbe:	4b02      	ldr	r3, [pc, #8]	; (b9cc8 <network_on+0xc>)
   b9cc0:	681b      	ldr	r3, [r3, #0]
   b9cc2:	695b      	ldr	r3, [r3, #20]
   b9cc4:	9301      	str	r3, [sp, #4]
   b9cc6:	bd08      	pop	{r3, pc}
   b9cc8:	00030240 	.word	0x00030240

000b9ccc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b9ccc:	b508      	push	{r3, lr}
   b9cce:	4b02      	ldr	r3, [pc, #8]	; (b9cd8 <network_off+0xc>)
   b9cd0:	681b      	ldr	r3, [r3, #0]
   b9cd2:	699b      	ldr	r3, [r3, #24]
   b9cd4:	9301      	str	r3, [sp, #4]
   b9cd6:	bd08      	pop	{r3, pc}
   b9cd8:	00030240 	.word	0x00030240

000b9cdc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b9cdc:	b508      	push	{r3, lr}
   b9cde:	4b02      	ldr	r3, [pc, #8]	; (b9ce8 <network_listen+0xc>)
   b9ce0:	681b      	ldr	r3, [r3, #0]
   b9ce2:	69db      	ldr	r3, [r3, #28]
   b9ce4:	9301      	str	r3, [sp, #4]
   b9ce6:	bd08      	pop	{r3, pc}
   b9ce8:	00030240 	.word	0x00030240

000b9cec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b9cec:	b508      	push	{r3, lr}
   b9cee:	4b02      	ldr	r3, [pc, #8]	; (b9cf8 <network_listening+0xc>)
   b9cf0:	681b      	ldr	r3, [r3, #0]
   b9cf2:	6a1b      	ldr	r3, [r3, #32]
   b9cf4:	9301      	str	r3, [sp, #4]
   b9cf6:	bd08      	pop	{r3, pc}
   b9cf8:	00030240 	.word	0x00030240

000b9cfc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b9cfc:	b508      	push	{r3, lr}
   b9cfe:	4b02      	ldr	r3, [pc, #8]	; (b9d08 <network_set_listen_timeout+0xc>)
   b9d00:	681b      	ldr	r3, [r3, #0]
   b9d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9d04:	9301      	str	r3, [sp, #4]
   b9d06:	bd08      	pop	{r3, pc}
   b9d08:	00030240 	.word	0x00030240

000b9d0c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b9d0c:	b508      	push	{r3, lr}
   b9d0e:	4b02      	ldr	r3, [pc, #8]	; (b9d18 <network_get_listen_timeout+0xc>)
   b9d10:	681b      	ldr	r3, [r3, #0]
   b9d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9d14:	9301      	str	r3, [sp, #4]
   b9d16:	bd08      	pop	{r3, pc}
   b9d18:	00030240 	.word	0x00030240

000b9d1c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b9d1c:	b508      	push	{r3, lr}
   b9d1e:	4b02      	ldr	r3, [pc, #8]	; (b9d28 <network_is_on+0xc>)
   b9d20:	681b      	ldr	r3, [r3, #0]
   b9d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9d24:	9301      	str	r3, [sp, #4]
   b9d26:	bd08      	pop	{r3, pc}
   b9d28:	00030240 	.word	0x00030240

000b9d2c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b9d2c:	b508      	push	{r3, lr}
   b9d2e:	4b02      	ldr	r3, [pc, #8]	; (b9d38 <network_is_off+0xc>)
   b9d30:	681b      	ldr	r3, [r3, #0]
   b9d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9d34:	9301      	str	r3, [sp, #4]
   b9d36:	bd08      	pop	{r3, pc}
   b9d38:	00030240 	.word	0x00030240

000b9d3c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b9d3c:	b508      	push	{r3, lr}
   b9d3e:	4b02      	ldr	r3, [pc, #8]	; (b9d48 <malloc+0xc>)
   b9d40:	681b      	ldr	r3, [r3, #0]
   b9d42:	681b      	ldr	r3, [r3, #0]
   b9d44:	9301      	str	r3, [sp, #4]
   b9d46:	bd08      	pop	{r3, pc}
   b9d48:	0003021c 	.word	0x0003021c

000b9d4c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b9d4c:	b508      	push	{r3, lr}
   b9d4e:	4b02      	ldr	r3, [pc, #8]	; (b9d58 <free+0xc>)
   b9d50:	681b      	ldr	r3, [r3, #0]
   b9d52:	685b      	ldr	r3, [r3, #4]
   b9d54:	9301      	str	r3, [sp, #4]
   b9d56:	bd08      	pop	{r3, pc}
   b9d58:	0003021c 	.word	0x0003021c

000b9d5c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b9d5c:	b508      	push	{r3, lr}
   b9d5e:	4b02      	ldr	r3, [pc, #8]	; (b9d68 <realloc+0xc>)
   b9d60:	681b      	ldr	r3, [r3, #0]
   b9d62:	689b      	ldr	r3, [r3, #8]
   b9d64:	9301      	str	r3, [sp, #4]
   b9d66:	bd08      	pop	{r3, pc}
   b9d68:	0003021c 	.word	0x0003021c

000b9d6c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b9d6c:	b508      	push	{r3, lr}
   b9d6e:	4b02      	ldr	r3, [pc, #8]	; (b9d78 <sprintf+0xc>)
   b9d70:	681b      	ldr	r3, [r3, #0]
   b9d72:	68db      	ldr	r3, [r3, #12]
   b9d74:	9301      	str	r3, [sp, #4]
   b9d76:	bd08      	pop	{r3, pc}
   b9d78:	0003021c 	.word	0x0003021c

000b9d7c <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b9d7c:	b508      	push	{r3, lr}
   b9d7e:	4b02      	ldr	r3, [pc, #8]	; (b9d88 <sscanf+0xc>)
   b9d80:	681b      	ldr	r3, [r3, #0]
   b9d82:	695b      	ldr	r3, [r3, #20]
   b9d84:	9301      	str	r3, [sp, #4]
   b9d86:	bd08      	pop	{r3, pc}
   b9d88:	0003021c 	.word	0x0003021c

000b9d8c <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b9d8c:	b508      	push	{r3, lr}
   b9d8e:	4b02      	ldr	r3, [pc, #8]	; (b9d98 <snprintf+0xc>)
   b9d90:	681b      	ldr	r3, [r3, #0]
   b9d92:	69db      	ldr	r3, [r3, #28]
   b9d94:	9301      	str	r3, [sp, #4]
   b9d96:	bd08      	pop	{r3, pc}
   b9d98:	0003021c 	.word	0x0003021c

000b9d9c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b9d9c:	b508      	push	{r3, lr}
   b9d9e:	4b02      	ldr	r3, [pc, #8]	; (b9da8 <vsnprintf+0xc>)
   b9da0:	681b      	ldr	r3, [r3, #0]
   b9da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9da4:	9301      	str	r3, [sp, #4]
   b9da6:	bd08      	pop	{r3, pc}
   b9da8:	0003021c 	.word	0x0003021c

000b9dac <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b9dac:	b508      	push	{r3, lr}
   b9dae:	4b02      	ldr	r3, [pc, #8]	; (b9db8 <abort+0xc>)
   b9db0:	681b      	ldr	r3, [r3, #0]
   b9db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9db4:	9301      	str	r3, [sp, #4]
   b9db6:	bd08      	pop	{r3, pc}
   b9db8:	0003021c 	.word	0x0003021c

000b9dbc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b9dbc:	b508      	push	{r3, lr}
   b9dbe:	4b02      	ldr	r3, [pc, #8]	; (b9dc8 <_malloc_r+0xc>)
   b9dc0:	681b      	ldr	r3, [r3, #0]
   b9dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9dc4:	9301      	str	r3, [sp, #4]
   b9dc6:	bd08      	pop	{r3, pc}
   b9dc8:	0003021c 	.word	0x0003021c

000b9dcc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b9dcc:	b508      	push	{r3, lr}
   b9dce:	4b02      	ldr	r3, [pc, #8]	; (b9dd8 <__errno+0xc>)
   b9dd0:	681b      	ldr	r3, [r3, #0]
   b9dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9dd4:	9301      	str	r3, [sp, #4]
   b9dd6:	bd08      	pop	{r3, pc}
   b9dd8:	0003021c 	.word	0x0003021c

000b9ddc <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b9ddc:	b508      	push	{r3, lr}
   b9dde:	4b02      	ldr	r3, [pc, #8]	; (b9de8 <__assert_func+0xc>)
   b9de0:	681b      	ldr	r3, [r3, #0]
   b9de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9de4:	9301      	str	r3, [sp, #4]
   b9de6:	bd08      	pop	{r3, pc}
   b9de8:	0003021c 	.word	0x0003021c

000b9dec <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b9dec:	b508      	push	{r3, lr}
   b9dee:	4b02      	ldr	r3, [pc, #8]	; (b9df8 <newlib_impure_ptr_callback+0xc>)
   b9df0:	681b      	ldr	r3, [r3, #0]
   b9df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9df4:	9301      	str	r3, [sp, #4]
   b9df6:	bd08      	pop	{r3, pc}
   b9df8:	0003021c 	.word	0x0003021c

000b9dfc <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b9dfc:	b508      	push	{r3, lr}
   b9dfe:	4b02      	ldr	r3, [pc, #8]	; (b9e08 <localtime_r+0xc>)
   b9e00:	681b      	ldr	r3, [r3, #0]
   b9e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9e04:	9301      	str	r3, [sp, #4]
   b9e06:	bd08      	pop	{r3, pc}
   b9e08:	0003021c 	.word	0x0003021c

000b9e0c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b9e0c:	2100      	movs	r1, #0
   b9e0e:	f7ff bed1 	b.w	b9bb4 <system_delay_ms>

000b9e12 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b9e12:	b510      	push	{r4, lr}
      if (_M_empty())
   b9e14:	6883      	ldr	r3, [r0, #8]
   b9e16:	4604      	mov	r4, r0
   b9e18:	b90b      	cbnz	r3, b9e1e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b9e1a:	f003 fdd6 	bl	bd9ca <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9e1e:	68c3      	ldr	r3, [r0, #12]
   b9e20:	4798      	blx	r3
      if (_M_manager)
   b9e22:	68a3      	ldr	r3, [r4, #8]
   b9e24:	b11b      	cbz	r3, b9e2e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b9e26:	2203      	movs	r2, #3
   b9e28:	4621      	mov	r1, r4
   b9e2a:	4620      	mov	r0, r4
   b9e2c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b9e2e:	4620      	mov	r0, r4
   b9e30:	2110      	movs	r1, #16
}
   b9e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b9e36:	f7fa b932 	b.w	b409e <_ZdlPvj>

000b9e3a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9e3a:	4770      	bx	lr

000b9e3c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b9e3c:	4770      	bx	lr

000b9e3e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b9e3e:	4770      	bx	lr

000b9e40 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9e40:	4770      	bx	lr
	...

000b9e44 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9e44:	4b06      	ldr	r3, [pc, #24]	; (b9e60 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9e46:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9e48:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b9e4a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b9e4e:	d005      	beq.n	b9e5c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9e50:	4608      	mov	r0, r1
   b9e52:	f003 fdbd 	bl	bd9d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b9e56:	2800      	cmp	r0, #0
   b9e58:	bf08      	it	eq
   b9e5a:	2400      	moveq	r4, #0
      }
   b9e5c:	4620      	mov	r0, r4
   b9e5e:	bd10      	pop	{r4, pc}
   b9e60:	000c1a28 	.word	0x000c1a28

000b9e64 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9e64:	4b06      	ldr	r3, [pc, #24]	; (b9e80 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9e66:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9e68:	b510      	push	{r4, lr}
   b9e6a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b9e6e:	d005      	beq.n	b9e7c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9e70:	4608      	mov	r0, r1
   b9e72:	f003 fdad 	bl	bd9d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b9e76:	2800      	cmp	r0, #0
   b9e78:	bf08      	it	eq
   b9e7a:	2400      	moveq	r4, #0
      }
   b9e7c:	4620      	mov	r0, r4
   b9e7e:	bd10      	pop	{r4, pc}
   b9e80:	000c1a28 	.word	0x000c1a28

000b9e84 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9e84:	4b06      	ldr	r3, [pc, #24]	; (b9ea0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9e86:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9e88:	b510      	push	{r4, lr}
   b9e8a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b9e8e:	d005      	beq.n	b9e9c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9e90:	4608      	mov	r0, r1
   b9e92:	f003 fd9d 	bl	bd9d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b9e96:	2800      	cmp	r0, #0
   b9e98:	bf08      	it	eq
   b9e9a:	2400      	moveq	r4, #0
      }
   b9e9c:	4620      	mov	r0, r4
   b9e9e:	bd10      	pop	{r4, pc}
   b9ea0:	000c1a28 	.word	0x000c1a28

000b9ea4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9ea4:	b510      	push	{r4, lr}
   b9ea6:	2168      	movs	r1, #104	; 0x68
   b9ea8:	4604      	mov	r4, r0
   b9eaa:	f7fa f8f8 	bl	b409e <_ZdlPvj>
   b9eae:	4620      	mov	r0, r4
   b9eb0:	bd10      	pop	{r4, pc}

000b9eb2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b9eb2:	b510      	push	{r4, lr}
   b9eb4:	2128      	movs	r1, #40	; 0x28
   b9eb6:	4604      	mov	r4, r0
   b9eb8:	f7fa f8f1 	bl	b409e <_ZdlPvj>
   b9ebc:	4620      	mov	r0, r4
   b9ebe:	bd10      	pop	{r4, pc}

000b9ec0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b9ec0:	b510      	push	{r4, lr}
   b9ec2:	2130      	movs	r1, #48	; 0x30
   b9ec4:	4604      	mov	r4, r0
   b9ec6:	f7fa f8ea 	bl	b409e <_ZdlPvj>
   b9eca:	4620      	mov	r0, r4
   b9ecc:	bd10      	pop	{r4, pc}

000b9ece <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b9ece:	2168      	movs	r1, #104	; 0x68
   b9ed0:	f7fa b8e5 	b.w	b409e <_ZdlPvj>

000b9ed4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b9ed4:	2128      	movs	r1, #40	; 0x28
   b9ed6:	f7fa b8e2 	b.w	b409e <_ZdlPvj>

000b9eda <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b9eda:	2130      	movs	r1, #48	; 0x30
   b9edc:	f7fa b8df 	b.w	b409e <_ZdlPvj>

000b9ee0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b9ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b9ee2:	2500      	movs	r5, #0
   b9ee4:	1cec      	adds	r4, r5, #3
   b9ee6:	428c      	cmp	r4, r1
   b9ee8:	d80d      	bhi.n	b9f06 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b9eea:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b9eec:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b9eee:	5d87      	ldrb	r7, [r0, r6]
   b9ef0:	4297      	cmp	r7, r2
   b9ef2:	d105      	bne.n	b9f00 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b9ef4:	4426      	add	r6, r4
   b9ef6:	42b1      	cmp	r1, r6
   b9ef8:	d305      	bcc.n	b9f06 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b9efa:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b9efc:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b9efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b9f00:	3401      	adds	r4, #1
   b9f02:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b9f04:	e7ee      	b.n	b9ee4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b9f06:	2000      	movs	r0, #0
   b9f08:	e7f9      	b.n	b9efe <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b9f0c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b9f0c:	4a02      	ldr	r2, [pc, #8]	; (b9f18 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b9f0e:	4903      	ldr	r1, [pc, #12]	; (b9f1c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b9f10:	200a      	movs	r0, #10
   b9f12:	f7ff be2f 	b.w	b9b74 <panic_>
   b9f16:	bf00      	nop
   b9f18:	000b9835 	.word	0x000b9835
   b9f1c:	000c17b8 	.word	0x000c17b8

000b9f20 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b9f20:	b430      	push	{r4, r5}
   b9f22:	460d      	mov	r5, r1
   b9f24:	4611      	mov	r1, r2
   b9f26:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b9f28:	6803      	ldr	r3, [r0, #0]
   b9f2a:	6809      	ldr	r1, [r1, #0]
   b9f2c:	6828      	ldr	r0, [r5, #0]
   b9f2e:	e9d3 4300 	ldrd	r4, r3, [r3]
   b9f32:	46a4      	mov	ip, r4
      }
   b9f34:	bc30      	pop	{r4, r5}
   b9f36:	4760      	bx	ip

000b9f38 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b9f38:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b9f3a:	b538      	push	{r3, r4, r5, lr}
   b9f3c:	4604      	mov	r4, r0
	switch (__op)
   b9f3e:	d102      	bne.n	b9f46 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b9f40:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b9f42:	6023      	str	r3, [r4, #0]
	}
   b9f44:	e003      	b.n	b9f4e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b9f46:	2a02      	cmp	r2, #2
   b9f48:	d003      	beq.n	b9f52 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b9f4a:	2a03      	cmp	r2, #3
   b9f4c:	d00d      	beq.n	b9f6a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b9f4e:	2000      	movs	r0, #0
   b9f50:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b9f52:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b9f54:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b9f56:	f7fa f89e 	bl	b4096 <_Znwj>
   b9f5a:	4603      	mov	r3, r0
   b9f5c:	2800      	cmp	r0, #0
   b9f5e:	d0f0      	beq.n	b9f42 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b9f60:	e895 0003 	ldmia.w	r5, {r0, r1}
   b9f64:	e883 0003 	stmia.w	r3, {r0, r1}
   b9f68:	e7eb      	b.n	b9f42 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b9f6a:	6800      	ldr	r0, [r0, #0]
   b9f6c:	2800      	cmp	r0, #0
   b9f6e:	d0ee      	beq.n	b9f4e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b9f70:	2108      	movs	r1, #8
   b9f72:	f7fa f894 	bl	b409e <_ZdlPvj>
   b9f76:	e7ea      	b.n	b9f4e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b9f78 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b9f78:	b510      	push	{r4, lr}
	if (_M_manager)
   b9f7a:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b9f7c:	4604      	mov	r4, r0
	if (_M_manager)
   b9f7e:	b12b      	cbz	r3, b9f8c <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b9f80:	2203      	movs	r2, #3
   b9f82:	4601      	mov	r1, r0
   b9f84:	4798      	blx	r3
	    _M_manager = nullptr;
   b9f86:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b9f88:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b9f8c:	bd10      	pop	{r4, pc}

000b9f8e <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b9f8e:	b510      	push	{r4, lr}
	if (_M_manager)
   b9f90:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b9f92:	4604      	mov	r4, r0
	if (_M_manager)
   b9f94:	b12b      	cbz	r3, b9fa2 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b9f96:	2203      	movs	r2, #3
   b9f98:	4601      	mov	r1, r0
   b9f9a:	4798      	blx	r3
	    _M_manager = nullptr;
   b9f9c:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b9f9e:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b9fa2:	bd10      	pop	{r4, pc}

000b9fa4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   b9fa4:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   b9fa6:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   b9fa8:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   b9faa:	2220      	movs	r2, #32
   b9fac:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   b9fb0:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   b9fb2:	4a08      	ldr	r2, [pc, #32]	; (b9fd4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   b9fb4:	9200      	str	r2, [sp, #0]
   b9fb6:	4908      	ldr	r1, [pc, #32]	; (b9fd8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   b9fb8:	aa02      	add	r2, sp, #8
   b9fba:	2001      	movs	r0, #1
   b9fbc:	f7ff fde2 	bl	b9b84 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b9fc0:	6820      	ldr	r0, [r4, #0]
   b9fc2:	4906      	ldr	r1, [pc, #24]	; (b9fdc <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   b9fc4:	8800      	ldrh	r0, [r0, #0]
   b9fc6:	2300      	movs	r3, #0
   b9fc8:	4622      	mov	r2, r4
    }
   b9fca:	b00a      	add	sp, #40	; 0x28
   b9fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b9fd0:	f7ff bb74 	b.w	b96bc <hal_ble_gatt_client_discover_all_services>
   b9fd4:	000c17da 	.word	0x000c17da
   b9fd8:	000c17cf 	.word	0x000c17cf
   b9fdc:	000bbac1 	.word	0x000bbac1

000b9fe0 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b9fe0:	b510      	push	{r4, lr}
   b9fe2:	3801      	subs	r0, #1
   b9fe4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b9fe8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b9fec:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b9fee:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b9ff2:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b9ff4:	bf88      	it	hi
   b9ff6:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b9ffa:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b9ffe:	7803      	ldrb	r3, [r0, #0]
   ba000:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   ba004:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   ba008:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   ba00a:	bf88      	it	hi
   ba00c:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   ba010:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   ba012:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   ba016:	d1e7      	bne.n	b9fe8 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   ba018:	bd10      	pop	{r4, pc}

000ba01a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   ba01a:	b510      	push	{r4, lr}
   ba01c:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   ba01e:	3058      	adds	r0, #88	; 0x58
   ba020:	f7fa faaa 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   ba024:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   ba028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba02c:	f003 b852 	b.w	bd0d4 <_ZN6StringD1Ev>

000ba030 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   ba030:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   ba032:	6803      	ldr	r3, [r0, #0]
   ba034:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   ba036:	4605      	mov	r5, r0
   ba038:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   ba03a:	d008      	beq.n	ba04e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   ba03c:	b111      	cbz	r1, ba044 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   ba03e:	684b      	ldr	r3, [r1, #4]
   ba040:	3301      	adds	r3, #1
   ba042:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   ba044:	6828      	ldr	r0, [r5, #0]
   ba046:	b108      	cbz	r0, ba04c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   ba048:	f7fa fad4 	bl	b45f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   ba04c:	602c      	str	r4, [r5, #0]
      }
   ba04e:	bd38      	pop	{r3, r4, r5, pc}

000ba050 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   ba050:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   ba054:	b2da      	uxtb	r2, r3
   ba056:	2a09      	cmp	r2, #9
   ba058:	d801      	bhi.n	ba05e <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   ba05a:	4618      	mov	r0, r3
   ba05c:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   ba05e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   ba062:	2b05      	cmp	r3, #5
   ba064:	d801      	bhi.n	ba06a <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   ba066:	3857      	subs	r0, #87	; 0x57
   ba068:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   ba06a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   ba06e:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   ba070:	bf94      	ite	ls
   ba072:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   ba074:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   ba078:	4770      	bx	lr
	...

000ba07c <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   ba07c:	b510      	push	{r4, lr}
            locked_(false) {
   ba07e:	2300      	movs	r3, #0
   ba080:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   ba082:	4b04      	ldr	r3, [pc, #16]	; (ba094 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   ba084:	4604      	mov	r4, r0
   ba086:	6818      	ldr	r0, [r3, #0]
   ba088:	f7ff fbb4 	bl	b97f4 <os_mutex_recursive_lock>
        locked_ = true;
   ba08c:	2301      	movs	r3, #1
   ba08e:	7023      	strb	r3, [r4, #0]
    }
   ba090:	4620      	mov	r0, r4
   ba092:	bd10      	pop	{r4, pc}
   ba094:	2003e65c 	.word	0x2003e65c

000ba098 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   ba098:	b510      	push	{r4, lr}
        if (locked_) {
   ba09a:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   ba09c:	4604      	mov	r4, r0
        if (locked_) {
   ba09e:	b11b      	cbz	r3, ba0a8 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   ba0a0:	4b02      	ldr	r3, [pc, #8]	; (ba0ac <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   ba0a2:	6818      	ldr	r0, [r3, #0]
   ba0a4:	f7ff fbae 	bl	b9804 <os_mutex_recursive_unlock>
    }
   ba0a8:	4620      	mov	r0, r4
   ba0aa:	bd10      	pop	{r4, pc}
   ba0ac:	2003e65c 	.word	0x2003e65c

000ba0b0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   ba0b0:	b082      	sub	sp, #8
   ba0b2:	4603      	mov	r3, r0
    address_ = addr;
   ba0b4:	6808      	ldr	r0, [r1, #0]
   ba0b6:	6849      	ldr	r1, [r1, #4]
   ba0b8:	466a      	mov	r2, sp
   ba0ba:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   ba0bc:	466a      	mov	r2, sp
   ba0be:	ca03      	ldmia	r2!, {r0, r1}
   ba0c0:	6018      	str	r0, [r3, #0]
}
   ba0c2:	4618      	mov	r0, r3
    address_ = addr.address_;
   ba0c4:	6059      	str	r1, [r3, #4]
}
   ba0c6:	b002      	add	sp, #8
   ba0c8:	4770      	bx	lr

000ba0ca <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   ba0ca:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   ba0cc:	7982      	ldrb	r2, [r0, #6]
   ba0ce:	798b      	ldrb	r3, [r1, #6]
   ba0d0:	429a      	cmp	r2, r3
   ba0d2:	d106      	bne.n	ba0e2 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   ba0d4:	2206      	movs	r2, #6
   ba0d6:	f004 fb10 	bl	be6fa <memcmp>
   ba0da:	fab0 f080 	clz	r0, r0
   ba0de:	0940      	lsrs	r0, r0, #5
}
   ba0e0:	bd08      	pop	{r3, pc}
    return false;
   ba0e2:	2000      	movs	r0, #0
   ba0e4:	e7fc      	b.n	ba0e0 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000ba0e6 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   ba0e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba0ea:	6003      	str	r3, [r0, #0]
   ba0ec:	8083      	strh	r3, [r0, #4]
}
   ba0ee:	2000      	movs	r0, #0
   ba0f0:	4770      	bx	lr

000ba0f2 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   ba0f2:	b508      	push	{r3, lr}
   ba0f4:	4602      	mov	r2, r0
        : address_{} {
   ba0f6:	2100      	movs	r1, #0
   ba0f8:	6001      	str	r1, [r0, #0]
   ba0fa:	6041      	str	r1, [r0, #4]
    clear();
   ba0fc:	f7ff fff3 	bl	ba0e6 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   ba100:	7191      	strb	r1, [r2, #6]
}
   ba102:	4610      	mov	r0, r2
   ba104:	bd08      	pop	{r3, pc}
	...

000ba108 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   ba108:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   ba10a:	2301      	movs	r3, #1
   ba10c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba10e:	4b05      	ldr	r3, [pc, #20]	; (ba124 <_ZN8particle7BleUuidC1Ev+0x1c>)
   ba110:	4602      	mov	r2, r0
   ba112:	f103 0110 	add.w	r1, r3, #16
   ba116:	f853 4b04 	ldr.w	r4, [r3], #4
   ba11a:	f842 4b04 	str.w	r4, [r2], #4
   ba11e:	428b      	cmp	r3, r1
   ba120:	d1f9      	bne.n	ba116 <_ZN8particle7BleUuidC1Ev+0xe>
}
   ba122:	bd10      	pop	{r4, pc}
   ba124:	000c1a36 	.word	0x000c1a36

000ba128 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   ba128:	7c0b      	ldrb	r3, [r1, #16]
   ba12a:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   ba12e:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   ba130:	d10d      	bne.n	ba14e <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   ba132:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba134:	4b0c      	ldr	r3, [pc, #48]	; (ba168 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   ba136:	4602      	mov	r2, r0
   ba138:	f103 0410 	add.w	r4, r3, #16
   ba13c:	f853 5b04 	ldr.w	r5, [r3], #4
   ba140:	f842 5b04 	str.w	r5, [r2], #4
   ba144:	42a3      	cmp	r3, r4
   ba146:	d1f9      	bne.n	ba13c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   ba148:	880b      	ldrh	r3, [r1, #0]
   ba14a:	8183      	strh	r3, [r0, #12]
}
   ba14c:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   ba14e:	2301      	movs	r3, #1
   ba150:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   ba152:	f101 0210 	add.w	r2, r1, #16
   ba156:	4603      	mov	r3, r0
   ba158:	f851 4b04 	ldr.w	r4, [r1], #4
   ba15c:	f843 4b04 	str.w	r4, [r3], #4
   ba160:	4291      	cmp	r1, r2
   ba162:	d1f9      	bne.n	ba158 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   ba164:	e7f2      	b.n	ba14c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   ba166:	bf00      	nop
   ba168:	000c1a36 	.word	0x000c1a36

000ba16c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   ba16c:	b510      	push	{r4, lr}
    if (uuid128) {
   ba16e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   ba170:	4604      	mov	r4, r0
    if (uuid128) {
   ba172:	b1b1      	cbz	r1, ba1a2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   ba174:	2a01      	cmp	r2, #1
   ba176:	f101 0210 	add.w	r2, r1, #16
   ba17a:	d10a      	bne.n	ba192 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   ba17c:	4601      	mov	r1, r0
   ba17e:	f853 0b04 	ldr.w	r0, [r3], #4
   ba182:	f841 0b04 	str.w	r0, [r1], #4
   ba186:	4293      	cmp	r3, r2
   ba188:	d1f9      	bne.n	ba17e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   ba18a:	2301      	movs	r3, #1
   ba18c:	6123      	str	r3, [r4, #16]
}
   ba18e:	4620      	mov	r0, r4
   ba190:	bd10      	pop	{r4, pc}
   ba192:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   ba194:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   ba198:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   ba19c:	429a      	cmp	r2, r3
   ba19e:	d1f9      	bne.n	ba194 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   ba1a0:	e7f3      	b.n	ba18a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   ba1a2:	2210      	movs	r2, #16
   ba1a4:	f004 fae1 	bl	be76a <memset>
   ba1a8:	e7f1      	b.n	ba18e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000ba1aa <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   ba1aa:	b538      	push	{r3, r4, r5, lr}
   ba1ac:	4604      	mov	r4, r0
   ba1ae:	460d      	mov	r5, r1
        : BleUuid() {
   ba1b0:	f7ff ffaa 	bl	ba108 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   ba1b4:	2300      	movs	r3, #0
   ba1b6:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   ba1b8:	81a5      	strh	r5, [r4, #12]
}
   ba1ba:	4620      	mov	r0, r4
   ba1bc:	bd38      	pop	{r3, r4, r5, pc}

000ba1be <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   ba1be:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   ba1c0:	6902      	ldr	r2, [r0, #16]
   ba1c2:	690b      	ldr	r3, [r1, #16]
   ba1c4:	429a      	cmp	r2, r3
   ba1c6:	d106      	bne.n	ba1d6 <_ZNK8particle7BleUuideqERKS0_+0x18>
   ba1c8:	2210      	movs	r2, #16
   ba1ca:	f004 fa96 	bl	be6fa <memcmp>
   ba1ce:	fab0 f080 	clz	r0, r0
   ba1d2:	0940      	lsrs	r0, r0, #5
}
   ba1d4:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   ba1d6:	2000      	movs	r0, #0
   ba1d8:	e7fc      	b.n	ba1d4 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000ba1dc <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   ba1dc:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   ba1de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   ba1e2:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba1e4:	4b34      	ldr	r3, [pc, #208]	; (ba2b8 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   ba1e6:	460c      	mov	r4, r1
   ba1e8:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   ba1ea:	4602      	mov	r2, r0
   ba1ec:	f103 0110 	add.w	r1, r3, #16
   ba1f0:	f853 0b04 	ldr.w	r0, [r3], #4
   ba1f4:	f842 0b04 	str.w	r0, [r2], #4
   ba1f8:	428b      	cmp	r3, r1
   ba1fa:	d1f9      	bne.n	ba1f0 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   ba1fc:	b344      	cbz	r4, ba250 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   ba1fe:	2124      	movs	r1, #36	; 0x24
   ba200:	4620      	mov	r0, r4
   ba202:	f004 fb95 	bl	be930 <strnlen>
   ba206:	2804      	cmp	r0, #4
   ba208:	f04f 0500 	mov.w	r5, #0
   ba20c:	d123      	bne.n	ba256 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   ba20e:	f8ad 5004 	strh.w	r5, [sp, #4]
   ba212:	af01      	add	r7, sp, #4
   ba214:	1ca5      	adds	r5, r4, #2
   ba216:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   ba218:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   ba21c:	f7ff ff18 	bl	ba050 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   ba220:	f1b0 0800 	subs.w	r8, r0, #0
   ba224:	db12      	blt.n	ba24c <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   ba226:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   ba22a:	f7ff ff11 	bl	ba050 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   ba22e:	2800      	cmp	r0, #0
   ba230:	db0c      	blt.n	ba24c <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   ba232:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   ba234:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   ba238:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   ba23a:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   ba23e:	d1eb      	bne.n	ba218 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   ba240:	f89d 3005 	ldrb.w	r3, [sp, #5]
   ba244:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   ba246:	f89d 3004 	ldrb.w	r3, [sp, #4]
   ba24a:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   ba24c:	2300      	movs	r3, #0
   ba24e:	6133      	str	r3, [r6, #16]
}
   ba250:	b002      	add	sp, #8
   ba252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   ba256:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   ba25a:	2124      	movs	r1, #36	; 0x24
   ba25c:	4620      	mov	r0, r4
   ba25e:	f004 fb67 	bl	be930 <strnlen>
   ba262:	42a8      	cmp	r0, r5
   ba264:	d807      	bhi.n	ba276 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   ba266:	4642      	mov	r2, r8
   ba268:	2100      	movs	r1, #0
   ba26a:	4630      	mov	r0, r6
}
   ba26c:	b002      	add	sp, #8
   ba26e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   ba272:	f004 ba7a 	b.w	be76a <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   ba276:	f1b8 0f00 	cmp.w	r8, #0
   ba27a:	d0e9      	beq.n	ba250 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   ba27c:	5d60      	ldrb	r0, [r4, r5]
   ba27e:	f7ff fee7 	bl	ba050 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   ba282:	0603      	lsls	r3, r0, #24
   ba284:	d415      	bmi.n	ba2b2 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   ba286:	0100      	lsls	r0, r0, #4
   ba288:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   ba28c:	b2c7      	uxtb	r7, r0
   ba28e:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   ba292:	2124      	movs	r1, #36	; 0x24
   ba294:	4620      	mov	r0, r4
   ba296:	f004 fb4b 	bl	be930 <strnlen>
   ba29a:	3501      	adds	r5, #1
   ba29c:	42a8      	cmp	r0, r5
   ba29e:	d908      	bls.n	ba2b2 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   ba2a0:	5d60      	ldrb	r0, [r4, r5]
   ba2a2:	f7ff fed5 	bl	ba050 <_ZN8particle11hexToNibbleEc>
   ba2a6:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   ba2a8:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   ba2aa:	bfa4      	itt	ge
   ba2ac:	4338      	orrge	r0, r7
   ba2ae:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   ba2b2:	3501      	adds	r5, #1
   ba2b4:	e7d1      	b.n	ba25a <_ZN8particle7BleUuid9constructEPKc+0x7e>
   ba2b6:	bf00      	nop
   ba2b8:	000c1a36 	.word	0x000c1a36

000ba2bc <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   ba2bc:	b513      	push	{r0, r1, r4, lr}
   ba2be:	4604      	mov	r4, r0
   ba2c0:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   ba2c2:	f7ff ff21 	bl	ba108 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   ba2c6:	4620      	mov	r0, r4
   ba2c8:	9901      	ldr	r1, [sp, #4]
   ba2ca:	f7ff ff87 	bl	ba1dc <_ZN8particle7BleUuid9constructEPKc>
}
   ba2ce:	4620      	mov	r0, r4
   ba2d0:	b002      	add	sp, #8
   ba2d2:	bd10      	pop	{r4, pc}

000ba2d4 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   ba2d4:	b510      	push	{r4, lr}
   ba2d6:	f100 030f 	add.w	r3, r0, #15
   ba2da:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   ba2dc:	781c      	ldrb	r4, [r3, #0]
   ba2de:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   ba2e2:	4283      	cmp	r3, r0
   ba2e4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   ba2e8:	d1f8      	bne.n	ba2dc <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   ba2ea:	bd10      	pop	{r4, pc}

000ba2ec <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   ba2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba2f0:	461f      	mov	r7, r3
   ba2f2:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   ba2f4:	460d      	mov	r5, r1
   ba2f6:	2900      	cmp	r1, #0
   ba2f8:	d05b      	beq.n	ba3b2 <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   ba2fa:	b1da      	cbz	r2, ba334 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   ba2fc:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   ba300:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   ba302:	f1b8 0f00 	cmp.w	r8, #0
   ba306:	d119      	bne.n	ba33c <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   ba308:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   ba30a:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   ba30e:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   ba310:	aa05      	add	r2, sp, #20
   ba312:	2102      	movs	r1, #2
   ba314:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   ba316:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   ba31a:	f7ff fe61 	bl	b9fe0 <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   ba31e:	2c04      	cmp	r4, #4
   ba320:	bf28      	it	cs
   ba322:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   ba324:	4622      	mov	r2, r4
   ba326:	a905      	add	r1, sp, #20
   ba328:	4628      	mov	r0, r5
   ba32a:	f004 f9f6 	bl	be71a <memcpy>
        buf[len++] = '\0';
   ba32e:	f805 8004 	strb.w	r8, [r5, r4]
   ba332:	1c62      	adds	r2, r4, #1
}
   ba334:	4610      	mov	r0, r2
   ba336:	b00e      	add	sp, #56	; 0x38
   ba338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   ba33c:	a901      	add	r1, sp, #4
   ba33e:	f7ff ffc9 	bl	ba2d4 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   ba342:	aa05      	add	r2, sp, #20
    if (stripped) {
   ba344:	b17f      	cbz	r7, ba366 <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   ba346:	2110      	movs	r1, #16
   ba348:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   ba34a:	f7ff fe49 	bl	b9fe0 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   ba34e:	2c24      	cmp	r4, #36	; 0x24
   ba350:	bf28      	it	cs
   ba352:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   ba354:	4622      	mov	r2, r4
   ba356:	a905      	add	r1, sp, #20
   ba358:	4628      	mov	r0, r5
   ba35a:	f004 f9de 	bl	be71a <memcpy>
    buf[len++] = '\0';
   ba35e:	2300      	movs	r3, #0
   ba360:	552b      	strb	r3, [r5, r4]
   ba362:	1c62      	adds	r2, r4, #1
    return len;
   ba364:	e7e6      	b.n	ba334 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   ba366:	2104      	movs	r1, #4
   ba368:	eb0d 0001 	add.w	r0, sp, r1
   ba36c:	f7ff fe38 	bl	b9fe0 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   ba370:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   ba372:	f10d 021d 	add.w	r2, sp, #29
   ba376:	2102      	movs	r1, #2
   ba378:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   ba37a:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   ba37e:	f7ff fe2f 	bl	b9fe0 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   ba382:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   ba386:	2102      	movs	r1, #2
   ba388:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   ba38c:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   ba390:	f7ff fe26 	bl	b9fe0 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   ba394:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   ba398:	2102      	movs	r1, #2
   ba39a:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   ba39c:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   ba3a0:	f7ff fe1e 	bl	b9fe0 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   ba3a4:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   ba3a8:	aa0b      	add	r2, sp, #44	; 0x2c
   ba3aa:	2106      	movs	r1, #6
   ba3ac:	f10d 000e 	add.w	r0, sp, #14
   ba3b0:	e7cb      	b.n	ba34a <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   ba3b2:	460a      	mov	r2, r1
   ba3b4:	e7be      	b.n	ba334 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000ba3b6 <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   ba3b6:	b510      	push	{r4, lr}
   ba3b8:	b08a      	sub	sp, #40	; 0x28
   ba3ba:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   ba3bc:	2300      	movs	r3, #0
   ba3be:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   ba3c0:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   ba3c2:	4669      	mov	r1, sp
   ba3c4:	f7ff ff92 	bl	ba2ec <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   ba3c8:	4669      	mov	r1, sp
   ba3ca:	4620      	mov	r0, r4
   ba3cc:	f002 fecd 	bl	bd16a <_ZN6StringC1EPK19__FlashStringHelper>
}
   ba3d0:	4620      	mov	r0, r4
   ba3d2:	b00a      	add	sp, #40	; 0x28
   ba3d4:	bd10      	pop	{r4, pc}

000ba3d6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   ba3d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba3d8:	4605      	mov	r5, r0
   ba3da:	4616      	mov	r6, r2
   ba3dc:	461f      	mov	r7, r3
   ba3de:	460a      	mov	r2, r1
   ba3e0:	ab01      	add	r3, sp, #4
   ba3e2:	e9d0 0100 	ldrd	r0, r1, [r0]
   ba3e6:	f7ff fd7b 	bl	b9ee0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   ba3ea:	f030 0402 	bics.w	r4, r0, #2
   ba3ee:	d00c      	beq.n	ba40a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   ba3f0:	1e84      	subs	r4, r0, #2
   ba3f2:	42bc      	cmp	r4, r7
   ba3f4:	bf28      	it	cs
   ba3f6:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   ba3f8:	b13e      	cbz	r6, ba40a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   ba3fa:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   ba3fc:	682b      	ldr	r3, [r5, #0]
   ba3fe:	3102      	adds	r1, #2
   ba400:	4622      	mov	r2, r4
   ba402:	4419      	add	r1, r3
   ba404:	4630      	mov	r0, r6
   ba406:	f004 f988 	bl	be71a <memcpy>
}
   ba40a:	4620      	mov	r0, r4
   ba40c:	b003      	add	sp, #12
   ba40e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba410 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   ba410:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba412:	4613      	mov	r3, r2
   ba414:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   ba416:	9201      	str	r2, [sp, #4]
   ba418:	460a      	mov	r2, r1
   ba41a:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   ba41c:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   ba41e:	f7ff ffda 	bl	ba3d6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   ba422:	b940      	cbnz	r0, ba436 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   ba424:	9b01      	ldr	r3, [sp, #4]
   ba426:	4622      	mov	r2, r4
   ba428:	2109      	movs	r1, #9
   ba42a:	4628      	mov	r0, r5
}
   ba42c:	b003      	add	sp, #12
   ba42e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   ba432:	f7ff bfd0 	b.w	ba3d6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   ba436:	b003      	add	sp, #12
   ba438:	bd30      	pop	{r4, r5, pc}
	...

000ba43c <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   ba43c:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba43e:	460c      	mov	r4, r1
   ba440:	b089      	sub	sp, #36	; 0x24
    String name;
   ba442:	490c      	ldr	r1, [pc, #48]	; (ba474 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   ba444:	4605      	mov	r5, r0
    String name;
   ba446:	f002 fe90 	bl	bd16a <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   ba44a:	221f      	movs	r2, #31
   ba44c:	4669      	mov	r1, sp
   ba44e:	4620      	mov	r0, r4
   ba450:	f7ff ffde 	bl	ba410 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   ba454:	4606      	mov	r6, r0
   ba456:	b150      	cbz	r0, ba46e <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   ba458:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   ba45a:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   ba45c:	f814 1b01 	ldrb.w	r1, [r4], #1
   ba460:	4628      	mov	r0, r5
   ba462:	f002 ff01 	bl	bd268 <_ZN6String6concatEc>
   ba466:	b110      	cbz	r0, ba46e <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   ba468:	3701      	adds	r7, #1
   ba46a:	42be      	cmp	r6, r7
   ba46c:	d1f6      	bne.n	ba45c <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   ba46e:	4628      	mov	r0, r5
   ba470:	b009      	add	sp, #36	; 0x24
   ba472:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba474:	000c0a8d 	.word	0x000c0a8d

000ba478 <_ZNK8particle18BleAdvertisingData10customDataEPhj>:
size_t BleAdvertisingData::customData(uint8_t* buf, size_t len) const {
   ba478:	4613      	mov	r3, r2
    return get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len);
   ba47a:	460a      	mov	r2, r1
   ba47c:	21ff      	movs	r1, #255	; 0xff
   ba47e:	f7ff bfaa 	b.w	ba3d6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>

000ba482 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   ba482:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   ba484:	2302      	movs	r3, #2
   ba486:	aa01      	add	r2, sp, #4
   ba488:	2119      	movs	r1, #25
   ba48a:	f7ff ffa4 	bl	ba3d6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   ba48e:	b108      	cbz	r0, ba494 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   ba490:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   ba494:	b003      	add	sp, #12
   ba496:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba49c <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   ba49c:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   ba49e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba4a2:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   ba4a4:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   ba4a6:	8043      	strh	r3, [r0, #2]
   ba4a8:	220e      	movs	r2, #14
   ba4aa:	4629      	mov	r1, r5
   ba4ac:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   ba4ae:	7105      	strb	r5, [r0, #4]
   ba4b0:	3006      	adds	r0, #6
   ba4b2:	f004 f95a 	bl	be76a <memset>
   ba4b6:	f104 0014 	add.w	r0, r4, #20
   ba4ba:	f7ff fe25 	bl	ba108 <_ZN8particle7BleUuidC1Ev>
   ba4be:	f104 0028 	add.w	r0, r4, #40	; 0x28
   ba4c2:	f7ff fe21 	bl	ba108 <_ZN8particle7BleUuidC1Ev>
   ba4c6:	4904      	ldr	r1, [pc, #16]	; (ba4d8 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   ba4c8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   ba4cc:	f002 fe4d 	bl	bd16a <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   ba4d0:	6565      	str	r5, [r4, #84]	; 0x54
    }
   ba4d2:	4620      	mov	r0, r4
   ba4d4:	bd38      	pop	{r3, r4, r5, pc}
   ba4d6:	bf00      	nop
   ba4d8:	000c0a8d 	.word	0x000c0a8d

000ba4dc <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   ba4dc:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   ba4de:	680d      	ldr	r5, [r1, #0]
   ba4e0:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   ba4e2:	4601      	mov	r1, r0
   ba4e4:	f105 0028 	add.w	r0, r5, #40	; 0x28
   ba4e8:	f7ff fe69 	bl	ba1be <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   ba4ec:	b140      	cbz	r0, ba500 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   ba4ee:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   ba4f0:	8aa2      	ldrh	r2, [r4, #20]
   ba4f2:	429a      	cmp	r2, r3
   ba4f4:	d805      	bhi.n	ba502 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   ba4f6:	8ae0      	ldrh	r0, [r4, #22]
   ba4f8:	4298      	cmp	r0, r3
   ba4fa:	bf34      	ite	cc
   ba4fc:	2000      	movcc	r0, #0
   ba4fe:	2001      	movcs	r0, #1
    }
   ba500:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   ba502:	2000      	movs	r0, #0
   ba504:	e7fc      	b.n	ba500 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000ba506 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   ba506:	b510      	push	{r4, lr}
    return data_ + size_;
   ba508:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   ba50c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   ba510:	4293      	cmp	r3, r2
   ba512:	4618      	mov	r0, r3
   ba514:	d006      	beq.n	ba524 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   ba516:	6804      	ldr	r4, [r0, #0]
   ba518:	8824      	ldrh	r4, [r4, #0]
   ba51a:	428c      	cmp	r4, r1
   ba51c:	f103 0308 	add.w	r3, r3, #8
   ba520:	d1f6      	bne.n	ba510 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   ba522:	bd10      	pop	{r4, pc}
        return nullptr;
   ba524:	2000      	movs	r0, #0
   ba526:	e7fc      	b.n	ba522 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000ba528 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba528:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   ba52a:	b570      	push	{r4, r5, r6, lr}
   ba52c:	6003      	str	r3, [r0, #0]
   ba52e:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba530:	2068      	movs	r0, #104	; 0x68
   ba532:	f7f9 fdb0 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba536:	1e04      	subs	r4, r0, #0
   ba538:	f104 060c 	add.w	r6, r4, #12
   ba53c:	d007      	beq.n	ba54e <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   ba53e:	2301      	movs	r3, #1
   ba540:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   ba544:	4b04      	ldr	r3, [pc, #16]	; (ba558 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   ba546:	6023      	str	r3, [r4, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba548:	4630      	mov	r0, r6
   ba54a:	f7ff ffa7 	bl	ba49c <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   ba54e:	e9c5 6400 	strd	r6, r4, [r5]
}
   ba552:	4628      	mov	r0, r5
   ba554:	bd70      	pop	{r4, r5, r6, pc}
   ba556:	bf00      	nop
   ba558:	000c19dc 	.word	0x000c19dc

000ba55c <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   ba55c:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   ba55e:	680c      	ldr	r4, [r1, #0]
   ba560:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   ba562:	4606      	mov	r6, r0
    return impl()->charUUID();
   ba564:	4605      	mov	r5, r0
   ba566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   ba56a:	6823      	ldr	r3, [r4, #0]
   ba56c:	602b      	str	r3, [r5, #0]
}
   ba56e:	4630      	mov	r0, r6
   ba570:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba574 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   ba574:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba576:	4606      	mov	r6, r0
   ba578:	b085      	sub	sp, #20
   ba57a:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   ba57c:	460d      	mov	r5, r1
   ba57e:	2900      	cmp	r1, #0
   ba580:	d050      	beq.n	ba624 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   ba582:	2a00      	cmp	r2, #0
   ba584:	d04e      	beq.n	ba624 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
   ba586:	6804      	ldr	r4, [r0, #0]
    if (impl()->isLocal()) {
   ba588:	7823      	ldrb	r3, [r4, #0]
   ba58a:	2af4      	cmp	r2, #244	; 0xf4
   ba58c:	bf28      	it	cs
   ba58e:	22f4      	movcs	r2, #244	; 0xf4
   ba590:	b343      	cbz	r3, ba5e4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   ba592:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   ba594:	0798      	lsls	r0, r3, #30
   ba596:	d509      	bpl.n	ba5ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   ba598:	89a0      	ldrh	r0, [r4, #12]
   ba59a:	9203      	str	r2, [sp, #12]
   ba59c:	2300      	movs	r3, #0
   ba59e:	f7ff f883 	bl	b96a8 <hal_ble_gatt_server_set_characteristic_value>
   ba5a2:	2800      	cmp	r0, #0
   ba5a4:	9a03      	ldr	r2, [sp, #12]
   ba5a6:	da03      	bge.n	ba5b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   ba5a8:	b005      	add	sp, #20
   ba5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   ba5ac:	f06f 0077 	mvn.w	r0, #119	; 0x77
   ba5b0:	6834      	ldr	r4, [r6, #0]
   ba5b2:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   ba5b4:	06d9      	lsls	r1, r3, #27
   ba5b6:	d509      	bpl.n	ba5cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   ba5b8:	2f01      	cmp	r7, #1
   ba5ba:	d007      	beq.n	ba5cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba5bc:	89a0      	ldrh	r0, [r4, #12]
   ba5be:	2300      	movs	r3, #0
   ba5c0:	4629      	mov	r1, r5
}
   ba5c2:	b005      	add	sp, #20
   ba5c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba5c8:	f7ff b8c8 	b.w	b975c <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   ba5cc:	069b      	lsls	r3, r3, #26
   ba5ce:	d5eb      	bpl.n	ba5a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   ba5d0:	2f02      	cmp	r7, #2
   ba5d2:	d0e9      	beq.n	ba5a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba5d4:	89a0      	ldrh	r0, [r4, #12]
   ba5d6:	2300      	movs	r3, #0
   ba5d8:	4629      	mov	r1, r5
}
   ba5da:	b005      	add	sp, #20
   ba5dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   ba5e0:	f7ff b8c6 	b.w	b9770 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   ba5e4:	8860      	ldrh	r0, [r4, #2]
   ba5e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   ba5ea:	4288      	cmp	r0, r1
   ba5ec:	d01c      	beq.n	ba628 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   ba5ee:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   ba5f0:	074e      	lsls	r6, r1, #29
   ba5f2:	d501      	bpl.n	ba5f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   ba5f4:	2f01      	cmp	r7, #1
   ba5f6:	d104      	bne.n	ba602 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   ba5f8:	070b      	lsls	r3, r1, #28
   ba5fa:	d409      	bmi.n	ba610 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   ba5fc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   ba600:	e7d2      	b.n	ba5a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   ba602:	89a1      	ldrh	r1, [r4, #12]
   ba604:	9300      	str	r3, [sp, #0]
   ba606:	4613      	mov	r3, r2
   ba608:	462a      	mov	r2, r5
   ba60a:	f7ff f875 	bl	b96f8 <hal_ble_gatt_client_write_without_response>
   ba60e:	e7cb      	b.n	ba5a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   ba610:	2f02      	cmp	r7, #2
   ba612:	d0f3      	beq.n	ba5fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   ba614:	2300      	movs	r3, #0
   ba616:	89a1      	ldrh	r1, [r4, #12]
   ba618:	9300      	str	r3, [sp, #0]
   ba61a:	4613      	mov	r3, r2
   ba61c:	462a      	mov	r2, r5
   ba61e:	f7ff f861 	bl	b96e4 <hal_ble_gatt_client_write_with_response>
   ba622:	e7c1      	b.n	ba5a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   ba624:	4802      	ldr	r0, [pc, #8]	; (ba630 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   ba626:	e7bf      	b.n	ba5a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   ba628:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   ba62c:	e7bc      	b.n	ba5a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   ba62e:	bf00      	nop
   ba630:	fffffef2 	.word	0xfffffef2

000ba634 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   ba634:	b510      	push	{r4, lr}
   ba636:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   ba638:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   ba63a:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   ba63c:	bb52      	cbnz	r2, ba694 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   ba63e:	885c      	ldrh	r4, [r3, #2]
   ba640:	f64f 70ff 	movw	r0, #65535	; 0xffff
   ba644:	4284      	cmp	r4, r0
   ba646:	d025      	beq.n	ba694 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   ba648:	8a18      	ldrh	r0, [r3, #16]
   ba64a:	b330      	cbz	r0, ba69a <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   ba64c:	e9cd 2203 	strd	r2, r2, [sp, #12]
   ba650:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   ba652:	4a13      	ldr	r2, [pc, #76]	; (ba6a0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   ba654:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   ba656:	4a13      	ldr	r2, [pc, #76]	; (ba6a4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   ba658:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   ba65c:	885a      	ldrh	r2, [r3, #2]
   ba65e:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   ba662:	8a1a      	ldrh	r2, [r3, #16]
   ba664:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   ba668:	899a      	ldrh	r2, [r3, #12]
   ba66a:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   ba66e:	b159      	cbz	r1, ba688 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   ba670:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   ba672:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   ba674:	bf44      	itt	mi
   ba676:	2202      	movmi	r2, #2
   ba678:	9205      	strmi	r2, [sp, #20]
   ba67a:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   ba67c:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   ba67e:	bf42      	ittt	mi
   ba680:	9b05      	ldrmi	r3, [sp, #20]
   ba682:	f043 0301 	orrmi.w	r3, r3, #1
   ba686:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   ba688:	2100      	movs	r1, #0
   ba68a:	4668      	mov	r0, sp
   ba68c:	f7ff f85c 	bl	b9748 <hal_ble_gatt_client_configure_cccd>
}
   ba690:	b006      	add	sp, #24
   ba692:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   ba694:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   ba698:	e7fa      	b.n	ba690 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   ba69a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   ba69e:	e7f7      	b.n	ba690 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   ba6a0:	00180003 	.word	0x00180003
   ba6a4:	000ba879 	.word	0x000ba879

000ba6a8 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   ba6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba6aa:	2600      	movs	r6, #0
   ba6ac:	6006      	str	r6, [r0, #0]
   ba6ae:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba6b0:	2028      	movs	r0, #40	; 0x28
   ba6b2:	f7f9 fcf0 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba6b6:	1e04      	subs	r4, r0, #0
   ba6b8:	f104 070c 	add.w	r7, r4, #12
   ba6bc:	d00a      	beq.n	ba6d4 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   ba6be:	2301      	movs	r3, #1
   ba6c0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   ba6c4:	4b05      	ldr	r3, [pc, #20]	; (ba6dc <_ZN8particle10BleServiceC1Ev+0x34>)
   ba6c6:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   ba6c8:	4638      	mov	r0, r7
   ba6ca:	f7ff fd1d 	bl	ba108 <_ZN8particle7BleUuidC1Ev>
   ba6ce:	6226      	str	r6, [r4, #32]
   ba6d0:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   ba6d4:	e9c5 7400 	strd	r7, r4, [r5]
}
   ba6d8:	4628      	mov	r0, r5
   ba6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba6dc:	000c19f8 	.word	0x000c19f8

000ba6e0 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   ba6e0:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba6e2:	2500      	movs	r5, #0
   ba6e4:	6005      	str	r5, [r0, #0]
   ba6e6:	4606      	mov	r6, r0
   ba6e8:	2030      	movs	r0, #48	; 0x30
   ba6ea:	f7f9 fcd4 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba6ee:	4604      	mov	r4, r0
   ba6f0:	b188      	cbz	r0, ba716 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   ba6f2:	2301      	movs	r3, #1
   ba6f4:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   ba6f8:	4b09      	ldr	r3, [pc, #36]	; (ba720 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   ba6fa:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   ba6fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba700:	8183      	strh	r3, [r0, #12]
   ba702:	300e      	adds	r0, #14
   ba704:	f7ff fcf5 	bl	ba0f2 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   ba708:	e9c4 5506 	strd	r5, r5, [r4, #24]
   ba70c:	e9c4 5508 	strd	r5, r5, [r4, #32]
   ba710:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   ba714:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   ba716:	6074      	str	r4, [r6, #4]
   ba718:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   ba71a:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   ba71c:	4630      	mov	r0, r6
   ba71e:	bd70      	pop	{r4, r5, r6, pc}
   ba720:	000c1a14 	.word	0x000c1a14

000ba724 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   ba724:	b513      	push	{r0, r1, r4, lr}
   ba726:	4604      	mov	r4, r0
    WiringBleLock lk;
   ba728:	a801      	add	r0, sp, #4
   ba72a:	f7ff fca7 	bl	ba07c <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   ba72e:	6823      	ldr	r3, [r4, #0]
   ba730:	881c      	ldrh	r4, [r3, #0]
   ba732:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba736:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   ba738:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   ba73a:	bf18      	it	ne
   ba73c:	2401      	movne	r4, #1
    WiringBleLock lk;
   ba73e:	f7ff fcab 	bl	ba098 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   ba742:	4620      	mov	r0, r4
   ba744:	b002      	add	sp, #8
   ba746:	bd10      	pop	{r4, pc}

000ba748 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   ba748:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba74a:	4605      	mov	r5, r0
   ba74c:	460c      	mov	r4, r1
    WiringBleLock lk;
   ba74e:	a801      	add	r0, sp, #4
   ba750:	f7ff fc94 	bl	ba07c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   ba754:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   ba756:	6823      	ldr	r3, [r4, #0]
   ba758:	f8c2 3002 	str.w	r3, [r2, #2]
   ba75c:	6863      	ldr	r3, [r4, #4]
   ba75e:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   ba762:	a801      	add	r0, sp, #4
   ba764:	f7ff fc98 	bl	ba098 <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   ba768:	b003      	add	sp, #12
   ba76a:	bd30      	pop	{r4, r5, pc}

000ba76c <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   ba76c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba76e:	460d      	mov	r5, r1
   ba770:	4604      	mov	r4, r0
    WiringBleLock lk;
   ba772:	a801      	add	r0, sp, #4
   ba774:	f7ff fc82 	bl	ba07c <_ZN8particle3ble13WiringBleLockC1Ev>
   ba778:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   ba77a:	f8d2 3002 	ldr.w	r3, [r2, #2]
   ba77e:	6023      	str	r3, [r4, #0]
   ba780:	f8d2 3006 	ldr.w	r3, [r2, #6]
   ba784:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   ba786:	a801      	add	r0, sp, #4
   ba788:	f7ff fc86 	bl	ba098 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   ba78c:	4620      	mov	r0, r4
   ba78e:	b003      	add	sp, #12
   ba790:	bd30      	pop	{r4, r5, pc}

000ba792 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   ba792:	b530      	push	{r4, r5, lr}
   ba794:	4605      	mov	r5, r0
   ba796:	b087      	sub	sp, #28
   ba798:	460c      	mov	r4, r1
    WiringBleLock lk;
   ba79a:	a801      	add	r0, sp, #4
   ba79c:	f7ff fc6e 	bl	ba07c <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   ba7a0:	682a      	ldr	r2, [r5, #0]
   ba7a2:	6823      	ldr	r3, [r4, #0]
   ba7a4:	8812      	ldrh	r2, [r2, #0]
   ba7a6:	881b      	ldrh	r3, [r3, #0]
   ba7a8:	429a      	cmp	r2, r3
   ba7aa:	d10d      	bne.n	ba7c8 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   ba7ac:	4629      	mov	r1, r5
   ba7ae:	a802      	add	r0, sp, #8
   ba7b0:	f7ff ffdc 	bl	ba76c <_ZNK8particle13BlePeerDevice7addressEv>
   ba7b4:	4621      	mov	r1, r4
   ba7b6:	a804      	add	r0, sp, #16
   ba7b8:	f7ff ffd8 	bl	ba76c <_ZNK8particle13BlePeerDevice7addressEv>
   ba7bc:	a904      	add	r1, sp, #16
   ba7be:	a802      	add	r0, sp, #8
   ba7c0:	f7ff fc83 	bl	ba0ca <_ZNK8particle10BleAddresseqERKS0_>
   ba7c4:	4604      	mov	r4, r0
   ba7c6:	b900      	cbnz	r0, ba7ca <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   ba7c8:	2400      	movs	r4, #0
    WiringBleLock lk;
   ba7ca:	a801      	add	r0, sp, #4
   ba7cc:	f7ff fc64 	bl	ba098 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   ba7d0:	4620      	mov	r0, r4
   ba7d2:	b007      	add	sp, #28
   ba7d4:	bd30      	pop	{r4, r5, pc}
	...

000ba7d8 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   ba7d8:	b510      	push	{r4, lr}
   ba7da:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   ba7dc:	2064      	movs	r0, #100	; 0x64
   ba7de:	f7f9 fc5a 	bl	b4096 <_Znwj>
   ba7e2:	b168      	cbz	r0, ba800 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   ba7e4:	2300      	movs	r3, #0
   ba7e6:	e9c0 3300 	strd	r3, r3, [r0]
   ba7ea:	e9c0 3302 	strd	r3, r3, [r0, #8]
   ba7ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
   ba7f2:	e9c0 3306 	strd	r3, r3, [r0, #24]
   ba7f6:	6203      	str	r3, [r0, #32]
   ba7f8:	62c3      	str	r3, [r0, #44]	; 0x2c
   ba7fa:	63c3      	str	r3, [r0, #60]	; 0x3c
   ba7fc:	64c3      	str	r3, [r0, #76]	; 0x4c
   ba7fe:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   ba800:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   ba802:	b920      	cbnz	r0, ba80e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   ba804:	4a0a      	ldr	r2, [pc, #40]	; (ba830 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   ba806:	490b      	ldr	r1, [pc, #44]	; (ba834 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   ba808:	200a      	movs	r0, #10
   ba80a:	f7ff f9b3 	bl	b9b74 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   ba80e:	2000      	movs	r0, #0
   ba810:	f7fe ff0e 	bl	b9630 <hal_ble_stack_init>
   ba814:	b120      	cbz	r0, ba820 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   ba816:	4a06      	ldr	r2, [pc, #24]	; (ba830 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   ba818:	4907      	ldr	r1, [pc, #28]	; (ba838 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   ba81a:	200a      	movs	r0, #10
   ba81c:	f7ff f9aa 	bl	b9b74 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   ba820:	6821      	ldr	r1, [r4, #0]
   ba822:	4806      	ldr	r0, [pc, #24]	; (ba83c <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   ba824:	2200      	movs	r2, #0
   ba826:	f7fe ff85 	bl	b9734 <hal_ble_set_callback_on_periph_link_events>
}
   ba82a:	4620      	mov	r0, r4
   ba82c:	bd10      	pop	{r4, pc}
   ba82e:	bf00      	nop
   ba830:	000b9835 	.word	0x000b9835
   ba834:	000c17b8 	.word	0x000c17b8
   ba838:	000c17f6 	.word	0x000c17f6
   ba83c:	000bb285 	.word	0x000bb285

000ba840 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   ba840:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   ba842:	4c0a      	ldr	r4, [pc, #40]	; (ba86c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   ba844:	7823      	ldrb	r3, [r4, #0]
   ba846:	f3bf 8f5b 	dmb	ish
   ba84a:	07db      	lsls	r3, r3, #31
   ba84c:	d40c      	bmi.n	ba868 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   ba84e:	4620      	mov	r0, r4
   ba850:	f7f9 fc34 	bl	b40bc <__cxa_guard_acquire>
   ba854:	b140      	cbz	r0, ba868 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   ba856:	4806      	ldr	r0, [pc, #24]	; (ba870 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   ba858:	f7ff ffbe 	bl	ba7d8 <_ZN8particle14BleLocalDeviceC1Ev>
   ba85c:	4620      	mov	r0, r4
   ba85e:	f7f9 fc32 	bl	b40c6 <__cxa_guard_release>
   ba862:	4804      	ldr	r0, [pc, #16]	; (ba874 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   ba864:	f003 ff3c 	bl	be6e0 <atexit>
    return instance;
}
   ba868:	4801      	ldr	r0, [pc, #4]	; (ba870 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   ba86a:	bd10      	pop	{r4, pc}
   ba86c:	2003e658 	.word	0x2003e658
   ba870:	2003e660 	.word	0x2003e660
   ba874:	000bab89 	.word	0x000bab89

000ba878 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   ba878:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   ba87a:	6803      	ldr	r3, [r0, #0]
   ba87c:	3b09      	subs	r3, #9
   ba87e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   ba880:	b08d      	sub	sp, #52	; 0x34
   ba882:	4604      	mov	r4, r0
   ba884:	460d      	mov	r5, r1
    switch (event->type) {
   ba886:	d811      	bhi.n	ba8ac <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   ba888:	f7ff ffda 	bl	ba840 <_ZN8particle14BleLocalDevice11getInstanceEv>
   ba88c:	88a1      	ldrh	r1, [r4, #4]
   ba88e:	6800      	ldr	r0, [r0, #0]
   ba890:	f7ff fe39 	bl	ba506 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   ba894:	4603      	mov	r3, r0
   ba896:	b958      	cbnz	r0, ba8b0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   ba898:	2220      	movs	r2, #32
   ba89a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   ba89e:	4a0b      	ldr	r2, [pc, #44]	; (ba8cc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   ba8a0:	9200      	str	r2, [sp, #0]
   ba8a2:	490b      	ldr	r1, [pc, #44]	; (ba8d0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   ba8a4:	aa04      	add	r2, sp, #16
   ba8a6:	2032      	movs	r0, #50	; 0x32
   ba8a8:	f7ff f96c 	bl	b9b84 <log_message>
}
   ba8ac:	b00d      	add	sp, #52	; 0x34
   ba8ae:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   ba8b0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   ba8b2:	2a00      	cmp	r2, #0
   ba8b4:	d0fa      	beq.n	ba8ac <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   ba8b6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba8ba:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   ba8be:	e9cd 1203 	strd	r1, r2, [sp, #12]
   ba8c2:	6dac      	ldr	r4, [r5, #88]	; 0x58
   ba8c4:	aa04      	add	r2, sp, #16
   ba8c6:	a903      	add	r1, sp, #12
   ba8c8:	47a0      	blx	r4
}
   ba8ca:	e7ef      	b.n	ba8ac <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   ba8cc:	000c1838 	.word	0x000c1838
   ba8d0:	000c17cf 	.word	0x000c17cf

000ba8d4 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   ba8d4:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   ba8d6:	2000      	movs	r0, #0
   ba8d8:	f7fe feaa 	bl	b9630 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   ba8dc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   ba8e0:	bd08      	pop	{r3, pc}

000ba8e2 <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   ba8e2:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   ba8e4:	2100      	movs	r1, #0
   ba8e6:	f7fe beab 	b.w	b9640 <hal_ble_gap_set_tx_power>
	...

000ba8ec <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   ba8ec:	b570      	push	{r4, r5, r6, lr}
   ba8ee:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   ba8f0:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   ba8f2:	460e      	mov	r6, r1
   ba8f4:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   ba8f6:	f7ff fb3f 	bl	b9f78 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   ba8fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   ba8fe:	f7ff fb46 	bl	b9f8e <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   ba902:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   ba906:	2200      	movs	r2, #0
   ba908:	4621      	mov	r1, r4
   ba90a:	4803      	ldr	r0, [pc, #12]	; (ba918 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   ba90c:	f7fe feb0 	bl	b9670 <hal_ble_gap_start_scan>
   ba910:	2800      	cmp	r0, #0
        return foundCount_;
   ba912:	bfa8      	it	ge
   ba914:	6960      	ldrge	r0, [r4, #20]
    }
   ba916:	bd70      	pop	{r4, r5, r6, pc}
   ba918:	000bc1fd 	.word	0x000bc1fd

000ba91c <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   ba91c:	b510      	push	{r4, lr}
   ba91e:	4604      	mov	r4, r0
    ::free(ptr);
   ba920:	6940      	ldr	r0, [r0, #20]
   ba922:	f7ff fa13 	bl	b9d4c <free>
   ba926:	68a0      	ldr	r0, [r4, #8]
   ba928:	f7ff fa10 	bl	b9d4c <free>
   ba92c:	4620      	mov	r0, r4
   ba92e:	bd10      	pop	{r4, pc}

000ba930 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   ba930:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   ba932:	f647 717f 	movw	r1, #32639	; 0x7f7f
   ba936:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
   ba93a:	e9c0 2202 	strd	r2, r2, [r0, #8]
   ba93e:	e9c0 2204 	strd	r2, r2, [r0, #16]
   ba942:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   ba946:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   ba94a:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   ba94e:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   ba952:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   ba956:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   ba95a:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   ba95e:	6202      	str	r2, [r0, #32]
   ba960:	6302      	str	r2, [r0, #48]	; 0x30
   ba962:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
   ba966:	4770      	bx	lr

000ba968 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>:
    std::function<void(const BleScanResult*)> scanResultCallback_;
    BleOnScanResultStdFunction scanResultCallbackRef_;
    BleScanFilter filter_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   ba968:	b530      	push	{r4, r5, lr}
   ba96a:	b085      	sub	sp, #20
    hal_ble_scan_params_t scanParams = {};
   ba96c:	2400      	movs	r4, #0
    scanParams.size = sizeof(hal_ble_scan_params_t);
   ba96e:	2310      	movs	r3, #16
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   ba970:	460d      	mov	r5, r1
    scanParams.size = sizeof(hal_ble_scan_params_t);
   ba972:	f8ad 3002 	strh.w	r3, [sp, #2]
    scanParams.version = BLE_API_VERSION;
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   ba976:	4621      	mov	r1, r4
    scanParams.version = BLE_API_VERSION;
   ba978:	2303      	movs	r3, #3
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   ba97a:	4668      	mov	r0, sp
    scanParams.version = BLE_API_VERSION;
   ba97c:	f8ad 3000 	strh.w	r3, [sp]
    hal_ble_scan_params_t scanParams = {};
   ba980:	e9cd 4401 	strd	r4, r4, [sp, #4]
   ba984:	9403      	str	r4, [sp, #12]
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   ba986:	f7fe fe6b 	bl	b9660 <hal_ble_gap_get_scan_parameters>
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   ba98a:	4621      	mov	r1, r4
   ba98c:	4668      	mov	r0, sp
    scanParams.timeout = timeout;
   ba98e:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   ba992:	f7fe fe5d 	bl	b9650 <hal_ble_gap_set_scan_parameters>
}
   ba996:	b005      	add	sp, #20
   ba998:	bd30      	pop	{r4, r5, pc}

000ba99a <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   ba99a:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   ba99c:	69d8      	ldr	r0, [r3, #28]
}
   ba99e:	2800      	cmp	r0, #0
   ba9a0:	bfd4      	ite	le
   ba9a2:	2000      	movle	r0, #0
   ba9a4:	2001      	movgt	r0, #1
   ba9a6:	4770      	bx	lr

000ba9a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba9a8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   ba9aa:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba9ae:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   ba9b0:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   ba9b4:	42ae      	cmp	r6, r5
   ba9b6:	d004      	beq.n	ba9c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   ba9b8:	4628      	mov	r0, r5
   ba9ba:	f002 fb8b 	bl	bd0d4 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   ba9be:	3510      	adds	r5, #16
   ba9c0:	e7f8      	b.n	ba9b4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   ba9c2:	6820      	ldr	r0, [r4, #0]
   ba9c4:	f7ff f9c2 	bl	b9d4c <free>
}
   ba9c8:	4620      	mov	r0, r4
   ba9ca:	bd70      	pop	{r4, r5, r6, pc}

000ba9cc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba9cc:	b510      	push	{r4, lr}
   ba9ce:	4604      	mov	r4, r0
    ::free(ptr);
   ba9d0:	6800      	ldr	r0, [r0, #0]
   ba9d2:	f7ff f9bb 	bl	b9d4c <free>
}
   ba9d6:	4620      	mov	r0, r4
   ba9d8:	bd10      	pop	{r4, pc}

000ba9da <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   ba9da:	b570      	push	{r4, r5, r6, lr}
   ba9dc:	4604      	mov	r4, r0
    ::free(ptr);
   ba9de:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   ba9e0:	f7ff f9b4 	bl	b9d4c <free>
   ba9e4:	6d20      	ldr	r0, [r4, #80]	; 0x50
   ba9e6:	f7ff f9b1 	bl	b9d4c <free>
    }
    ~BleScanFilter() = default;
   ba9ea:	f104 0538 	add.w	r5, r4, #56	; 0x38
   ba9ee:	f104 0044 	add.w	r0, r4, #68	; 0x44
   ba9f2:	f7ff ffeb 	bl	ba9cc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   ba9f6:	4628      	mov	r0, r5
   ba9f8:	f7ff ffd6 	bl	ba9a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   ba9fc:	f104 0028 	add.w	r0, r4, #40	; 0x28
   baa00:	f7f9 fdba 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
   baa04:	f104 0018 	add.w	r0, r4, #24
   baa08:	f7f9 fdb6 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   baa0c:	e9d4 5300 	ldrd	r5, r3, [r4]
   baa10:	2624      	movs	r6, #36	; 0x24
   baa12:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   baa16:	42ae      	cmp	r6, r5
   baa18:	d004      	beq.n	baa24 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   baa1a:	4628      	mov	r0, r5
   baa1c:	f7ff ff7e 	bl	ba91c <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   baa20:	3524      	adds	r5, #36	; 0x24
   baa22:	e7f8      	b.n	baa16 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   baa24:	6820      	ldr	r0, [r4, #0]
   baa26:	f7ff f991 	bl	b9d4c <free>
   baa2a:	4620      	mov	r0, r4
   baa2c:	bd70      	pop	{r4, r5, r6, pc}
	...

000baa30 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   baa30:	b530      	push	{r4, r5, lr}
   baa32:	4615      	mov	r5, r2
   baa34:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   baa36:	460c      	mov	r4, r1
   baa38:	b179      	cbz	r1, baa5a <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   baa3a:	b172      	cbz	r2, baa5a <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
    BleScanDelegator scanner;
   baa3c:	a801      	add	r0, sp, #4
   baa3e:	f7ff ff77 	bl	ba930 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   baa42:	4621      	mov	r1, r4
   baa44:	462a      	mov	r2, r5
   baa46:	a801      	add	r0, sp, #4
   baa48:	f7ff ff50 	bl	ba8ec <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   baa4c:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   baa4e:	a801      	add	r0, sp, #4
   baa50:	f7ff ffc3 	bl	ba9da <_ZN8particle16BleScanDelegatorD1Ev>
}
   baa54:	4620      	mov	r0, r4
   baa56:	b01f      	add	sp, #124	; 0x7c
   baa58:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   baa5a:	4c01      	ldr	r4, [pc, #4]	; (baa60 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   baa5c:	e7fa      	b.n	baa54 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   baa5e:	bf00      	nop
   baa60:	fffffef2 	.word	0xfffffef2

000baa64 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   baa64:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   baa66:	1e14      	subs	r4, r2, #0
   baa68:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   baa6a:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   baa6c:	db02      	blt.n	baa74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   baa6e:	1862      	adds	r2, r4, r1
   baa70:	429a      	cmp	r2, r3
   baa72:	dd00      	ble.n	baa76 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   baa74:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   baa76:	682a      	ldr	r2, [r5, #0]
   baa78:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   baa7a:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   baa7c:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   baa7e:	1a52      	subs	r2, r2, r1
   baa80:	f003 fe59 	bl	be736 <memmove>
    size_ -= n;
   baa84:	686a      	ldr	r2, [r5, #4]
   baa86:	1b12      	subs	r2, r2, r4
   baa88:	606a      	str	r2, [r5, #4]
}
   baa8a:	bd38      	pop	{r3, r4, r5, pc}

000baa8c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   baa8c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   baa8e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   baa90:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   baa92:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   baa94:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   baa96:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   baa98:	f7f9 fafd 	bl	b4096 <_Znwj>
   baa9c:	b118      	cbz	r0, baaa6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   baa9e:	682b      	ldr	r3, [r5, #0]
   baaa0:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   baaa2:	686b      	ldr	r3, [r5, #4]
   baaa4:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   baaa6:	4b03      	ldr	r3, [pc, #12]	; (baab4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   baaa8:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   baaaa:	4b03      	ldr	r3, [pc, #12]	; (baab8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   baaac:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   baaae:	60a3      	str	r3, [r4, #8]
      }
   baab0:	4620      	mov	r0, r4
   baab2:	bd38      	pop	{r3, r4, r5, pc}
   baab4:	000b9f21 	.word	0x000b9f21
   baab8:	000b9f39 	.word	0x000b9f39

000baabc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   baabc:	680b      	ldr	r3, [r1, #0]
   baabe:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   baac0:	b113      	cbz	r3, baac8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   baac2:	685a      	ldr	r2, [r3, #4]
   baac4:	3201      	adds	r2, #1
   baac6:	605a      	str	r2, [r3, #4]
      }
   baac8:	4770      	bx	lr

000baaca <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   baaca:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   baacc:	f851 3b04 	ldr.w	r3, [r1], #4
   baad0:	4604      	mov	r4, r0
   baad2:	f840 3b04 	str.w	r3, [r0], #4
   baad6:	f7ff fff1 	bl	baabc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   baada:	6823      	ldr	r3, [r4, #0]
   baadc:	b90b      	cbnz	r3, baae2 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   baade:	f7ff fa15 	bl	b9f0c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   baae2:	4620      	mov	r0, r4
   baae4:	bd10      	pop	{r4, pc}

000baae6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   baae6:	b510      	push	{r4, lr}
   baae8:	f851 3b04 	ldr.w	r3, [r1], #4
   baaec:	4604      	mov	r4, r0
   baaee:	f840 3b04 	str.w	r3, [r0], #4
   baaf2:	f7ff ffe3 	bl	baabc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   baaf6:	4620      	mov	r0, r4
   baaf8:	bd10      	pop	{r4, pc}

000baafa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   baafa:	b510      	push	{r4, lr}
   baafc:	f851 3b04 	ldr.w	r3, [r1], #4
   bab00:	4604      	mov	r4, r0
   bab02:	f840 3b04 	str.w	r3, [r0], #4
   bab06:	f7ff ffd9 	bl	baabc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bab0a:	4620      	mov	r0, r4
   bab0c:	bd10      	pop	{r4, pc}

000bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   bab0e:	b510      	push	{r4, lr}
   bab10:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   bab12:	6800      	ldr	r0, [r0, #0]
   bab14:	b108      	cbz	r0, bab1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   bab16:	f7f9 fd6d 	bl	b45f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   bab1a:	4620      	mov	r0, r4
   bab1c:	bd10      	pop	{r4, pc}

000bab1e <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   bab1e:	b510      	push	{r4, lr}
   bab20:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bab22:	3004      	adds	r0, #4
   bab24:	f7ff fff3 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bab28:	4620      	mov	r0, r4
   bab2a:	bd10      	pop	{r4, pc}

000bab2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bab2c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bab2e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bab32:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bab34:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bab38:	42ae      	cmp	r6, r5
   bab3a:	d004      	beq.n	bab46 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   bab3c:	1d28      	adds	r0, r5, #4
   bab3e:	f7ff ffe6 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bab42:	3508      	adds	r5, #8
   bab44:	e7f8      	b.n	bab38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bab46:	6820      	ldr	r0, [r4, #0]
   bab48:	f7ff f900 	bl	b9d4c <free>
}
   bab4c:	4620      	mov	r0, r4
   bab4e:	bd70      	pop	{r4, r5, r6, pc}

000bab50 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bab50:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bab52:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bab56:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bab58:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bab5c:	42ae      	cmp	r6, r5
   bab5e:	d004      	beq.n	bab6a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   bab60:	1d28      	adds	r0, r5, #4
   bab62:	f7ff ffd4 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bab66:	3508      	adds	r5, #8
   bab68:	e7f8      	b.n	bab5c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bab6a:	6820      	ldr	r0, [r4, #0]
   bab6c:	f7ff f8ee 	bl	b9d4c <free>
}
   bab70:	4620      	mov	r0, r4
   bab72:	bd70      	pop	{r4, r5, r6, pc}

000bab74 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bab74:	b510      	push	{r4, lr}
   bab76:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   bab78:	3024      	adds	r0, #36	; 0x24
   bab7a:	f7ff ffe9 	bl	bab50 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bab7e:	f104 0018 	add.w	r0, r4, #24
   bab82:	f7ff ffd3 	bl	bab2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   bab86:	bd10      	pop	{r4, pc}

000bab88 <__tcf_0>:
    static BleLocalDevice instance;
   bab88:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   bab8a:	4b17      	ldr	r3, [pc, #92]	; (babe8 <__tcf_0+0x60>)
   bab8c:	681c      	ldr	r4, [r3, #0]
   bab8e:	b354      	cbz	r4, babe6 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   bab90:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bab94:	f7f9 fcf0 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
   bab98:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bab9c:	f7f9 fcec 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
   baba0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   baba4:	f7f9 fce8 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
   baba8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   babac:	f7f9 fce4 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   babb0:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   babb4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   babb8:	42ae      	cmp	r6, r5
   babba:	d004      	beq.n	babc6 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   babbc:	1d28      	adds	r0, r5, #4
   babbe:	f7ff ffa6 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   babc2:	3508      	adds	r5, #8
   babc4:	e7f8      	b.n	babb8 <__tcf_0+0x30>
    ::free(ptr);
   babc6:	69a0      	ldr	r0, [r4, #24]
   babc8:	f7ff f8c0 	bl	b9d4c <free>
    ~BleLocalDeviceImpl() = default;
   babcc:	f104 000c 	add.w	r0, r4, #12
   babd0:	f7ff ffbe 	bl	bab50 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   babd4:	4620      	mov	r0, r4
   babd6:	f7ff ffa9 	bl	bab2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   babda:	4620      	mov	r0, r4
   babdc:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   babde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   babe2:	f7f9 ba5c 	b.w	b409e <_ZdlPvj>
   babe6:	bd70      	pop	{r4, r5, r6, pc}
   babe8:	2003e660 	.word	0x2003e660

000babec <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   babec:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   babee:	b510      	push	{r4, lr}
      if (_M_empty())
   babf0:	b90a      	cbnz	r2, babf6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   babf2:	f002 feea 	bl	bd9ca <_ZSt25__throw_bad_function_callv>
    }
   babf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   babfa:	68c3      	ldr	r3, [r0, #12]
   babfc:	4718      	bx	r3

000babfe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   babfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   bac02:	2300      	movs	r3, #0
   bac04:	e9c0 3300 	strd	r3, r3, [r0]
   bac08:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bac0a:	f8d1 8004 	ldr.w	r8, [r1, #4]
   bac0e:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bac10:	4605      	mov	r5, r0
   bac12:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bac14:	dd4a      	ble.n	bacac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   bac16:	ea4f 1008 	mov.w	r0, r8, lsl #4
   bac1a:	f7ff f88f 	bl	b9d3c <malloc>
            if (!d) {
   bac1e:	4606      	mov	r6, r0
   bac20:	2800      	cmp	r0, #0
   bac22:	d043      	beq.n	bacac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   bac24:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   bac28:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   bac2a:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   bac2e:	d916      	bls.n	bac5e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   bac30:	4550      	cmp	r0, sl
   bac32:	d215      	bcs.n	bac60 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   bac34:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   bac38:	f1a4 0910 	sub.w	r9, r4, #16
   bac3c:	ebaa 0404 	sub.w	r4, sl, r4
   bac40:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   bac42:	45d1      	cmp	r9, sl
   bac44:	d01d      	beq.n	bac82 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   bac46:	b11c      	cbz	r4, bac50 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   bac48:	4651      	mov	r1, sl
   bac4a:	4620      	mov	r0, r4
   bac4c:	f002 fabe 	bl	bd1cc <_ZN6StringC1EOS_>
                end->~T();
   bac50:	4650      	mov	r0, sl
   bac52:	f002 fa3f 	bl	bd0d4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bac56:	f1aa 0a10 	sub.w	sl, sl, #16
   bac5a:	3c10      	subs	r4, #16
   bac5c:	e7f1      	b.n	bac42 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   bac5e:	d010      	beq.n	bac82 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   bac60:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   bac62:	45a2      	cmp	sl, r4
   bac64:	d00d      	beq.n	bac82 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   bac66:	f1b9 0f00 	cmp.w	r9, #0
   bac6a:	d003      	beq.n	bac74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   bac6c:	4621      	mov	r1, r4
   bac6e:	4648      	mov	r0, r9
   bac70:	f002 faac 	bl	bd1cc <_ZN6StringC1EOS_>
                p->~T();
   bac74:	4620      	mov	r0, r4
   bac76:	f002 fa2d 	bl	bd0d4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   bac7a:	3410      	adds	r4, #16
   bac7c:	f109 0910 	add.w	r9, r9, #16
   bac80:	e7ef      	b.n	bac62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   bac82:	6828      	ldr	r0, [r5, #0]
   bac84:	f7ff f862 	bl	b9d4c <free>
        capacity_ = n;
   bac88:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   bac8c:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bac8e:	e9d7 4300 	ldrd	r4, r3, [r7]
   bac92:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   bac96:	45a0      	cmp	r8, r4
   bac98:	d006      	beq.n	baca8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   bac9a:	4621      	mov	r1, r4
   bac9c:	4630      	mov	r0, r6
   bac9e:	f002 faaf 	bl	bd200 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   baca2:	3410      	adds	r4, #16
   baca4:	3610      	adds	r6, #16
   baca6:	e7f6      	b.n	bac96 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   baca8:	687b      	ldr	r3, [r7, #4]
   bacaa:	606b      	str	r3, [r5, #4]
}
   bacac:	4628      	mov	r0, r5
   bacae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000bacb2 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   bacb2:	b530      	push	{r4, r5, lr}
   bacb4:	b08d      	sub	sp, #52	; 0x34
   bacb6:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   bacb8:	f100 0138 	add.w	r1, r0, #56	; 0x38
   bacbc:	a801      	add	r0, sp, #4
   bacbe:	f7ff ff9e 	bl	babfe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   bacc2:	9b02      	ldr	r3, [sp, #8]
   bacc4:	2b00      	cmp	r3, #0
   bacc6:	dd2f      	ble.n	bad28 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   bacc8:	f104 0114 	add.w	r1, r4, #20
   baccc:	a804      	add	r0, sp, #16
   bacce:	f7ff fbb5 	bl	ba43c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   bacd2:	f104 0108 	add.w	r1, r4, #8
   bacd6:	a808      	add	r0, sp, #32
   bacd8:	f7ff fbb0 	bl	ba43c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   bacdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bacde:	9b06      	ldr	r3, [sp, #24]
   bace0:	4313      	orrs	r3, r2
   bace2:	d01f      	beq.n	bad24 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   bace4:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   bace8:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   bacec:	42ac      	cmp	r4, r5
   bacee:	d019      	beq.n	bad24 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   bacf0:	a904      	add	r1, sp, #16
   bacf2:	4620      	mov	r0, r4
   bacf4:	f002 fada 	bl	bd2ac <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   bacf8:	b160      	cbz	r0, bad14 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   bacfa:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   bacfc:	a808      	add	r0, sp, #32
   bacfe:	f002 f9e9 	bl	bd0d4 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   bad02:	a804      	add	r0, sp, #16
   bad04:	f002 f9e6 	bl	bd0d4 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   bad08:	a801      	add	r0, sp, #4
   bad0a:	f7ff fe4d 	bl	ba9a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   bad0e:	4620      	mov	r0, r4
   bad10:	b00d      	add	sp, #52	; 0x34
   bad12:	bd30      	pop	{r4, r5, pc}
   bad14:	4620      	mov	r0, r4
   bad16:	a908      	add	r1, sp, #32
   bad18:	f002 fac8 	bl	bd2ac <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   bad1c:	3410      	adds	r4, #16
   bad1e:	2800      	cmp	r0, #0
   bad20:	d0e4      	beq.n	bacec <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   bad22:	e7ea      	b.n	bacfa <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   bad24:	2400      	movs	r4, #0
   bad26:	e7e9      	b.n	bacfc <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   bad28:	2401      	movs	r4, #1
   bad2a:	e7ed      	b.n	bad08 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000bad2c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bad2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   bad2e:	2300      	movs	r3, #0
   bad30:	e9c0 3300 	strd	r3, r3, [r0]
   bad34:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bad36:	684f      	ldr	r7, [r1, #4]
   bad38:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bad3a:	4605      	mov	r5, r0
   bad3c:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bad3e:	dd3e      	ble.n	badbe <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   bad40:	00f8      	lsls	r0, r7, #3
   bad42:	f7fe fffb 	bl	b9d3c <malloc>
            if (!d) {
   bad46:	4604      	mov	r4, r0
   bad48:	b3c8      	cbz	r0, badbe <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   bad4a:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   bad4e:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   bad50:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   bad54:	d910      	bls.n	bad78 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   bad56:	429c      	cmp	r4, r3
   bad58:	d20f      	bcs.n	bad7a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   bad5a:	3b08      	subs	r3, #8
            dest += end - p - 1;
   bad5c:	1a1a      	subs	r2, r3, r0
   bad5e:	f1a0 0c08 	sub.w	ip, r0, #8
   bad62:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   bad64:	459c      	cmp	ip, r3
   bad66:	d018      	beq.n	bad9a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   bad68:	b11a      	cbz	r2, bad72 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   bad6a:	6819      	ldr	r1, [r3, #0]
   bad6c:	6011      	str	r1, [r2, #0]
   bad6e:	6859      	ldr	r1, [r3, #4]
   bad70:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   bad72:	3b08      	subs	r3, #8
   bad74:	3a08      	subs	r2, #8
   bad76:	e7f5      	b.n	bad64 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   bad78:	d00f      	beq.n	bad9a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   bad7a:	4601      	mov	r1, r0
   bad7c:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   bad7e:	428b      	cmp	r3, r1
   bad80:	d00b      	beq.n	bad9a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   bad82:	b13a      	cbz	r2, bad94 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   bad84:	f8d1 c000 	ldr.w	ip, [r1]
   bad88:	f8c2 c000 	str.w	ip, [r2]
   bad8c:	f8d1 c004 	ldr.w	ip, [r1, #4]
   bad90:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   bad94:	3108      	adds	r1, #8
   bad96:	3208      	adds	r2, #8
   bad98:	e7f1      	b.n	bad7e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   bad9a:	f7fe ffd7 	bl	b9d4c <free>
        data_ = d;
   bad9e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bada0:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bada2:	e9d6 3100 	ldrd	r3, r1, [r6]
   bada6:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   badaa:	4298      	cmp	r0, r3
   badac:	d006      	beq.n	badbc <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   badae:	681a      	ldr	r2, [r3, #0]
   badb0:	6022      	str	r2, [r4, #0]
   badb2:	685a      	ldr	r2, [r3, #4]
   badb4:	6062      	str	r2, [r4, #4]
   badb6:	3308      	adds	r3, #8
   badb8:	3408      	adds	r4, #8
   badba:	e7f6      	b.n	badaa <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   badbc:	6069      	str	r1, [r5, #4]
}
   badbe:	4628      	mov	r0, r5
   badc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000badc2 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   badc2:	b570      	push	{r4, r5, r6, lr}
   badc4:	4604      	mov	r4, r0
        capacity_(0) {
   badc6:	2000      	movs	r0, #0
   badc8:	e9c4 0000 	strd	r0, r0, [r4]
   badcc:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   badce:	684e      	ldr	r6, [r1, #4]
   badd0:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   badd2:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   badd4:	dd12      	ble.n	badfc <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   badd6:	0071      	lsls	r1, r6, #1
   badd8:	f7fe ffc0 	bl	b9d5c <realloc>
            if (!d) {
   baddc:	b170      	cbz	r0, badfc <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   badde:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bade0:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bade2:	e9d5 3200 	ldrd	r3, r2, [r5]
   bade6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   badea:	429a      	cmp	r2, r3
   badec:	d004      	beq.n	badf8 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   badee:	f833 1b02 	ldrh.w	r1, [r3], #2
   badf2:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   badf6:	e7f8      	b.n	badea <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   badf8:	686b      	ldr	r3, [r5, #4]
   badfa:	6063      	str	r3, [r4, #4]
}
   badfc:	4620      	mov	r0, r4
   badfe:	bd70      	pop	{r4, r5, r6, pc}

000bae00 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   bae00:	b510      	push	{r4, lr}
        if (!dismissed_) {
   bae02:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   bae04:	4604      	mov	r4, r0
        if (!dismissed_) {
   bae06:	b923      	cbnz	r3, bae12 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   bae08:	6803      	ldr	r3, [r0, #0]
   bae0a:	6818      	ldr	r0, [r3, #0]
   bae0c:	b108      	cbz	r0, bae12 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   bae0e:	f7fe ff9d 	bl	b9d4c <free>
            func_();
        }
    }
   bae12:	4620      	mov	r0, r4
   bae14:	bd10      	pop	{r4, pc}

000bae16 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   bae16:	b510      	push	{r4, lr}
        if (!dismissed_) {
   bae18:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   bae1a:	4604      	mov	r4, r0
        if (!dismissed_) {
   bae1c:	b923      	cbnz	r3, bae28 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   bae1e:	6803      	ldr	r3, [r0, #0]
   bae20:	6818      	ldr	r0, [r3, #0]
   bae22:	b108      	cbz	r0, bae28 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   bae24:	f7fe ff92 	bl	b9d4c <free>
    }
   bae28:	4620      	mov	r0, r4
   bae2a:	bd10      	pop	{r4, pc}

000bae2c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   bae2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   bae30:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   bae34:	b08f      	sub	sp, #60	; 0x3c
   bae36:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   bae38:	f1b8 0f00 	cmp.w	r8, #0
   bae3c:	d072      	beq.n	baf24 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   bae3e:	6f05      	ldr	r5, [r0, #112]	; 0x70
   bae40:	2d00      	cmp	r5, #0
   bae42:	d06f      	beq.n	baf24 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   bae44:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   bae48:	231f      	movs	r3, #31
   bae4a:	2200      	movs	r2, #0
   bae4c:	21ff      	movs	r1, #255	; 0xff
   bae4e:	4648      	mov	r0, r9
   bae50:	f7ff fac1 	bl	ba3d6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   bae54:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   bae56:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   bae58:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   bae5a:	2200      	movs	r2, #0
   bae5c:	4619      	mov	r1, r3
   bae5e:	4638      	mov	r0, r7
   bae60:	f7ff fab9 	bl	ba3d6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   bae64:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   bae66:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   bae68:	d006      	beq.n	bae78 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   bae6a:	42ae      	cmp	r6, r5
   bae6c:	d030      	beq.n	baed0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   bae6e:	2400      	movs	r4, #0
    }
   bae70:	4620      	mov	r0, r4
   bae72:	b00f      	add	sp, #60	; 0x3c
   bae74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   bae78:	4620      	mov	r0, r4
   bae7a:	f7fe ff5f 	bl	b9d3c <malloc>
            dismissed_(false) {
   bae7e:	ab03      	add	r3, sp, #12
   bae80:	9304      	str	r3, [sp, #16]
   bae82:	2300      	movs	r3, #0
   bae84:	4604      	mov	r4, r0
   bae86:	9003      	str	r0, [sp, #12]
   bae88:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   bae8c:	b970      	cbnz	r0, baeac <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   bae8e:	2320      	movs	r3, #32
   bae90:	e9cd 3006 	strd	r3, r0, [sp, #24]
   bae94:	4b24      	ldr	r3, [pc, #144]	; (baf28 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   bae96:	9300      	str	r3, [sp, #0]
   bae98:	4924      	ldr	r1, [pc, #144]	; (baf2c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   bae9a:	4603      	mov	r3, r0
   bae9c:	aa06      	add	r2, sp, #24
   bae9e:	2032      	movs	r0, #50	; 0x32
   baea0:	f7fe fe70 	bl	b9b84 <log_message>
                    return false;
   baea4:	a804      	add	r0, sp, #16
   baea6:	f7ff ffab 	bl	bae00 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   baeaa:	e7e1      	b.n	bae70 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   baeac:	4602      	mov	r2, r0
   baeae:	21ff      	movs	r1, #255	; 0xff
   baeb0:	462b      	mov	r3, r5
   baeb2:	4648      	mov	r0, r9
   baeb4:	f7ff fa8f 	bl	ba3d6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   baeb8:	9803      	ldr	r0, [sp, #12]
   baeba:	462a      	mov	r2, r5
   baebc:	4641      	mov	r1, r8
   baebe:	f003 fc1c 	bl	be6fa <memcmp>
   baec2:	b118      	cbz	r0, baecc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   baec4:	a804      	add	r0, sp, #16
   baec6:	f7ff ff9b 	bl	bae00 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   baeca:	e7ce      	b.n	bae6a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   baecc:	2401      	movs	r4, #1
   baece:	e7e9      	b.n	baea4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   baed0:	4628      	mov	r0, r5
   baed2:	f7fe ff33 	bl	b9d3c <malloc>
   baed6:	2400      	movs	r4, #0
   baed8:	ab03      	add	r3, sp, #12
   baeda:	4606      	mov	r6, r0
   baedc:	9003      	str	r0, [sp, #12]
   baede:	9304      	str	r3, [sp, #16]
   baee0:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   baee4:	b978      	cbnz	r0, baf06 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   baee6:	2320      	movs	r3, #32
   baee8:	e9cd 3006 	strd	r3, r0, [sp, #24]
   baeec:	4b0e      	ldr	r3, [pc, #56]	; (baf28 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   baeee:	9300      	str	r3, [sp, #0]
   baef0:	490e      	ldr	r1, [pc, #56]	; (baf2c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   baef2:	4603      	mov	r3, r0
   baef4:	aa06      	add	r2, sp, #24
   baef6:	2032      	movs	r0, #50	; 0x32
   baef8:	f7fe fe44 	bl	b9b84 <log_message>
                    return false;
   baefc:	4634      	mov	r4, r6
   baefe:	a804      	add	r0, sp, #16
   baf00:	f7ff ff89 	bl	bae16 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   baf04:	e7b4      	b.n	bae70 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   baf06:	4602      	mov	r2, r0
   baf08:	21ff      	movs	r1, #255	; 0xff
   baf0a:	462b      	mov	r3, r5
   baf0c:	4638      	mov	r0, r7
   baf0e:	f7ff fa62 	bl	ba3d6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   baf12:	9803      	ldr	r0, [sp, #12]
   baf14:	462a      	mov	r2, r5
   baf16:	4641      	mov	r1, r8
   baf18:	f003 fbef 	bl	be6fa <memcmp>
   baf1c:	2800      	cmp	r0, #0
   baf1e:	d1ee      	bne.n	baefe <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   baf20:	2401      	movs	r4, #1
   baf22:	e7ec      	b.n	baefe <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   baf24:	2401      	movs	r4, #1
   baf26:	e7a3      	b.n	bae70 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   baf28:	000c1850 	.word	0x000c1850
   baf2c:	000c17cf 	.word	0x000c17cf

000baf30 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   baf30:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   baf32:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   baf34:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   baf36:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   baf38:	dd03      	ble.n	baf42 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   baf3a:	f7fe ff0f 	bl	b9d5c <realloc>
            if (!d) {
   baf3e:	b918      	cbnz	r0, baf48 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   baf40:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   baf42:	f7fe ff03 	bl	b9d4c <free>
        T* d = nullptr;
   baf46:	2000      	movs	r0, #0
        data_ = d;
   baf48:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   baf4a:	60a5      	str	r5, [r4, #8]
        return true;
   baf4c:	2001      	movs	r0, #1
   baf4e:	e7f7      	b.n	baf40 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000baf50 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   baf50:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   baf52:	6883      	ldr	r3, [r0, #8]
   baf54:	428b      	cmp	r3, r1
   baf56:	da02      	bge.n	baf5e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   baf58:	f7ff ffea 	bl	baf30 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   baf5c:	bd08      	pop	{r3, pc}
    return true;
   baf5e:	2001      	movs	r0, #1
   baf60:	e7fc      	b.n	baf5c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000baf62 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   baf62:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   baf64:	2300      	movs	r3, #0
   baf66:	e9c0 3300 	strd	r3, r3, [r0]
   baf6a:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   baf6c:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   baf6e:	6849      	ldr	r1, [r1, #4]
   baf70:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   baf72:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   baf74:	dd10      	ble.n	baf98 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   baf76:	f7ff ffdb 	bl	baf30 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   baf7a:	b168      	cbz	r0, baf98 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   baf7c:	e9d5 3100 	ldrd	r3, r1, [r5]
   baf80:	6822      	ldr	r2, [r4, #0]
   baf82:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   baf84:	4299      	cmp	r1, r3
   baf86:	d005      	beq.n	baf94 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   baf88:	b10a      	cbz	r2, baf8e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   baf8a:	7818      	ldrb	r0, [r3, #0]
   baf8c:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   baf8e:	3301      	adds	r3, #1
   baf90:	3201      	adds	r2, #1
   baf92:	e7f7      	b.n	baf84 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   baf94:	686b      	ldr	r3, [r5, #4]
   baf96:	6063      	str	r3, [r4, #4]
}
   baf98:	4620      	mov	r0, r4
   baf9a:	bd38      	pop	{r3, r4, r5, pc}

000baf9c <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   baf9c:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   baf9e:	680b      	ldr	r3, [r1, #0]
   bafa0:	6003      	str	r3, [r0, #0]
   bafa2:	684b      	ldr	r3, [r1, #4]
   bafa4:	6043      	str	r3, [r0, #4]
   bafa6:	4604      	mov	r4, r0
   bafa8:	460d      	mov	r5, r1
class BleAdvertisingData {
   bafaa:	3008      	adds	r0, #8
   bafac:	3108      	adds	r1, #8
   bafae:	f7ff ffd8 	bl	baf62 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   bafb2:	f105 0114 	add.w	r1, r5, #20
   bafb6:	f104 0014 	add.w	r0, r4, #20
   bafba:	f7ff ffd2 	bl	baf62 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   bafbe:	f895 3020 	ldrb.w	r3, [r5, #32]
   bafc2:	f884 3020 	strb.w	r3, [r4, #32]
   bafc6:	4620      	mov	r0, r4
   bafc8:	bd38      	pop	{r3, r4, r5, pc}

000bafca <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   bafca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bafcc:	4604      	mov	r4, r0
   bafce:	a801      	add	r0, sp, #4
   bafd0:	f7ff ffc7 	bl	baf62 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
      __a = _GLIBCXX_MOVE(__b);
   bafd4:	9b01      	ldr	r3, [sp, #4]
   bafd6:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bafd8:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   bafda:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bafdc:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   bafde:	6062      	str	r2, [r4, #4]
   bafe0:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bafe2:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bafe4:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   bafe6:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bafe8:	9001      	str	r0, [sp, #4]
   bafea:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   bafec:	f7fe feae 	bl	b9d4c <free>
   baff0:	b004      	add	sp, #16
   baff2:	bd10      	pop	{r4, pc}

000baff4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   baff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   baff8:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   baffa:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   baffc:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   baffe:	4419      	add	r1, r3
   bb000:	6883      	ldr	r3, [r0, #8]
   bb002:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bb004:	4604      	mov	r4, r0
   bb006:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb008:	dc12      	bgt.n	bb030 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   bb00a:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb00c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb00e:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb010:	1bd2      	subs	r2, r2, r7
   bb012:	4631      	mov	r1, r6
   bb014:	1970      	adds	r0, r6, r5
   bb016:	f003 fb8e 	bl	be736 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   bb01a:	462a      	mov	r2, r5
   bb01c:	4641      	mov	r1, r8
   bb01e:	4630      	mov	r0, r6
   bb020:	f003 fb7b 	bl	be71a <memcpy>
    size_ += n;
   bb024:	6863      	ldr	r3, [r4, #4]
   bb026:	442b      	add	r3, r5
   bb028:	6063      	str	r3, [r4, #4]
    return true;
   bb02a:	2001      	movs	r0, #1
}
   bb02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb030:	f7ff ff7e 	bl	baf30 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bb034:	2800      	cmp	r0, #0
   bb036:	d1e8      	bne.n	bb00a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   bb038:	e7f8      	b.n	bb02c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000bb03a <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   bb03a:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   bb03c:	460a      	mov	r2, r1
   bb03e:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   bb040:	b510      	push	{r4, lr}
   bb042:	4604      	mov	r4, r0
    size_ = 0;
   bb044:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   bb046:	b102      	cbz	r2, bb04a <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   bb048:	b90b      	cbnz	r3, bb04e <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   bb04a:	2000      	movs	r0, #0
}
   bb04c:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   bb04e:	2bff      	cmp	r3, #255	; 0xff
   bb050:	bf28      	it	cs
   bb052:	23ff      	movcs	r3, #255	; 0xff
   bb054:	f7ff ffce 	bl	baff4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   bb058:	2800      	cmp	r0, #0
   bb05a:	d0f7      	beq.n	bb04c <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   bb05c:	6860      	ldr	r0, [r4, #4]
   bb05e:	e7f5      	b.n	bb04c <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000bb060 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bb060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb062:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb064:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   bb068:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bb06a:	4604      	mov	r4, r0
   bb06c:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb06e:	da0b      	bge.n	bb088 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   bb070:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb072:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb074:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb076:	1b52      	subs	r2, r2, r5
   bb078:	1c48      	adds	r0, r1, #1
   bb07a:	f003 fb5c 	bl	be736 <memmove>
    new(p) T(std::move(value));
   bb07e:	557e      	strb	r6, [r7, r5]
    ++size_;
   bb080:	6863      	ldr	r3, [r4, #4]
   bb082:	3301      	adds	r3, #1
   bb084:	6063      	str	r3, [r4, #4]
}
   bb086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb088:	3101      	adds	r1, #1
   bb08a:	f7ff ff51 	bl	baf30 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bb08e:	2800      	cmp	r0, #0
   bb090:	d1ee      	bne.n	bb070 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   bb092:	e7f8      	b.n	bb086 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000bb094 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb094:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   bb096:	6841      	ldr	r1, [r0, #4]
   bb098:	f7ff bfe2 	b.w	bb060 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000bb09c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bb09c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bb0a0:	4604      	mov	r4, r0
   bb0a2:	461d      	mov	r5, r3
   bb0a4:	460f      	mov	r7, r1
   bb0a6:	ab01      	add	r3, sp, #4
   bb0a8:	4690      	mov	r8, r2
   bb0aa:	460a      	mov	r2, r1
   bb0ac:	e9d0 0100 	ldrd	r0, r1, [r0]
   bb0b0:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   bb0b4:	f7fe ff14 	bl	b9ee0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   bb0b8:	1cae      	adds	r6, r5, #2
   bb0ba:	6863      	ldr	r3, [r4, #4]
   bb0bc:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   bb0be:	f1b9 0f00 	cmp.w	r9, #0
   bb0c2:	d126      	bne.n	bb112 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   bb0c4:	b328      	cbz	r0, bb112 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bb0c6:	4433      	add	r3, r6
   bb0c8:	1a1b      	subs	r3, r3, r0
   bb0ca:	2bff      	cmp	r3, #255	; 0xff
   bb0cc:	d809      	bhi.n	bb0e2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   bb0ce:	9901      	ldr	r1, [sp, #4]
   bb0d0:	4620      	mov	r0, r4
   bb0d2:	f7ff fcc7 	bl	baa64 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bb0d6:	6861      	ldr	r1, [r4, #4]
   bb0d8:	4620      	mov	r0, r4
   bb0da:	4431      	add	r1, r6
   bb0dc:	f7ff ff38 	bl	baf50 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bb0e0:	b918      	cbnz	r0, bb0ea <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   bb0e2:	6860      	ldr	r0, [r4, #4]
}
   bb0e4:	b003      	add	sp, #12
   bb0e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   bb0ea:	1c6a      	adds	r2, r5, #1
   bb0ec:	9901      	ldr	r1, [sp, #4]
   bb0ee:	b2d2      	uxtb	r2, r2
   bb0f0:	4620      	mov	r0, r4
   bb0f2:	f7ff ffb5 	bl	bb060 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   bb0f6:	9901      	ldr	r1, [sp, #4]
   bb0f8:	463a      	mov	r2, r7
   bb0fa:	3101      	adds	r1, #1
   bb0fc:	4620      	mov	r0, r4
   bb0fe:	f7ff ffaf 	bl	bb060 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   bb102:	9901      	ldr	r1, [sp, #4]
   bb104:	462b      	mov	r3, r5
   bb106:	4642      	mov	r2, r8
   bb108:	3102      	adds	r1, #2
    return insert(size_, values, n);
   bb10a:	4620      	mov	r0, r4
   bb10c:	f7ff ff72 	bl	baff4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   bb110:	e7e7      	b.n	bb0e2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bb112:	18f1      	adds	r1, r6, r3
   bb114:	29ff      	cmp	r1, #255	; 0xff
   bb116:	d8e4      	bhi.n	bb0e2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bb118:	4620      	mov	r0, r4
   bb11a:	f7ff ff19 	bl	baf50 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bb11e:	2800      	cmp	r0, #0
   bb120:	d0df      	beq.n	bb0e2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   bb122:	1c69      	adds	r1, r5, #1
   bb124:	b2c9      	uxtb	r1, r1
   bb126:	4620      	mov	r0, r4
   bb128:	f7ff ffb4 	bl	bb094 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   bb12c:	4639      	mov	r1, r7
   bb12e:	4620      	mov	r0, r4
   bb130:	f7ff ffb0 	bl	bb094 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   bb134:	6861      	ldr	r1, [r4, #4]
   bb136:	462b      	mov	r3, r5
   bb138:	4642      	mov	r2, r8
   bb13a:	e7e6      	b.n	bb10a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000bb13c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bb13c:	b430      	push	{r4, r5}
   bb13e:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   bb142:	b11a      	cbz	r2, bb14c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   bb144:	9502      	str	r5, [sp, #8]
}
   bb146:	bc30      	pop	{r4, r5}
   bb148:	f7ff bfa8 	b.w	bb09c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   bb14c:	6840      	ldr	r0, [r0, #4]
}
   bb14e:	bc30      	pop	{r4, r5}
   bb150:	4770      	bx	lr

000bb152 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   bb152:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   bb154:	2300      	movs	r3, #0
   bb156:	e9c0 3300 	strd	r3, r3, [r0]
   bb15a:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bb15c:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bb15e:	9300      	str	r3, [sp, #0]
   bb160:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bb162:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bb166:	4619      	mov	r1, r3
   bb168:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   bb16c:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bb16e:	f7ff ffe5 	bl	bb13c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   bb172:	4620      	mov	r0, r4
   bb174:	b004      	add	sp, #16
   bb176:	bd10      	pop	{r4, pc}

000bb178 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bb178:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bb17a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb17c:	4604      	mov	r4, r0
   bb17e:	460d      	mov	r5, r1
   bb180:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bb182:	d914      	bls.n	bb1ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bb184:	4290      	cmp	r0, r2
   bb186:	d213      	bcs.n	bb1b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bb188:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bb18c:	1a75      	subs	r5, r6, r1
   bb18e:	f1a1 0708 	sub.w	r7, r1, #8
   bb192:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bb194:	42b7      	cmp	r7, r6
   bb196:	d018      	beq.n	bb1ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bb198:	b11c      	cbz	r4, bb1a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bb19a:	4631      	mov	r1, r6
   bb19c:	4620      	mov	r0, r4
   bb19e:	f7ff fcac 	bl	baafa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bb1a2:	1d30      	adds	r0, r6, #4
   bb1a4:	f7ff fcb3 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bb1a8:	3e08      	subs	r6, #8
   bb1aa:	3c08      	subs	r4, #8
   bb1ac:	e7f2      	b.n	bb194 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bb1ae:	d00c      	beq.n	bb1ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bb1b0:	42b5      	cmp	r5, r6
   bb1b2:	d00a      	beq.n	bb1ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bb1b4:	b11c      	cbz	r4, bb1be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bb1b6:	4629      	mov	r1, r5
   bb1b8:	4620      	mov	r0, r4
   bb1ba:	f7ff fc9e 	bl	baafa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bb1be:	1d28      	adds	r0, r5, #4
   bb1c0:	f7ff fca5 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bb1c4:	3508      	adds	r5, #8
   bb1c6:	3408      	adds	r4, #8
   bb1c8:	e7f2      	b.n	bb1b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bb1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb1cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb1cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bb1ce:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bb1d0:	6846      	ldr	r6, [r0, #4]
   bb1d2:	4668      	mov	r0, sp
   bb1d4:	f7ff fc91 	bl	baafa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb1d8:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   bb1dc:	429f      	cmp	r7, r3
   bb1de:	db12      	blt.n	bb206 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   bb1e0:	3701      	adds	r7, #1
        if (n > 0) {
   bb1e2:	2f00      	cmp	r7, #0
   bb1e4:	dd29      	ble.n	bb23a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   bb1e6:	00f8      	lsls	r0, r7, #3
   bb1e8:	f7fe fda8 	bl	b9d3c <malloc>
            if (!d) {
   bb1ec:	4605      	mov	r5, r0
   bb1ee:	b1f0      	cbz	r0, bb22e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   bb1f0:	e9d4 1200 	ldrd	r1, r2, [r4]
   bb1f4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bb1f8:	f7ff ffbe 	bl	bb178 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bb1fc:	6820      	ldr	r0, [r4, #0]
   bb1fe:	f7fe fda5 	bl	b9d4c <free>
        data_ = d;
   bb202:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   bb204:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bb206:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bb208:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb20a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   bb20e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bb212:	4631      	mov	r1, r6
   bb214:	f106 0008 	add.w	r0, r6, #8
   bb218:	f7ff ffae 	bl	bb178 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bb21c:	b11e      	cbz	r6, bb226 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   bb21e:	4669      	mov	r1, sp
   bb220:	4630      	mov	r0, r6
   bb222:	f7ff fc6a 	bl	baafa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   bb226:	6863      	ldr	r3, [r4, #4]
   bb228:	3301      	adds	r3, #1
   bb22a:	6063      	str	r3, [r4, #4]
    return true;
   bb22c:	2501      	movs	r5, #1
   bb22e:	a801      	add	r0, sp, #4
   bb230:	f7ff fc6d 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb234:	4628      	mov	r0, r5
   bb236:	b003      	add	sp, #12
   bb238:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   bb23a:	2500      	movs	r5, #0
   bb23c:	e7de      	b.n	bb1fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000bb23e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bb23e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   bb240:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bb244:	4605      	mov	r5, r0
   bb246:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   bb248:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   bb24c:	42a6      	cmp	r6, r4
   bb24e:	d005      	beq.n	bb25c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   bb250:	4639      	mov	r1, r7
   bb252:	4620      	mov	r0, r4
   bb254:	f7ff fa9d 	bl	ba792 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   bb258:	b108      	cbz	r0, bb25e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   bb25a:	b914      	cbnz	r4, bb262 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   bb25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   bb25e:	3408      	adds	r4, #8
   bb260:	e7f4      	b.n	bb24c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   bb262:	1d20      	adds	r0, r4, #4
   bb264:	f7ff fc53 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   bb268:	e9d5 3200 	ldrd	r3, r2, [r5]
   bb26c:	f104 0108 	add.w	r1, r4, #8
   bb270:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bb274:	4620      	mov	r0, r4
   bb276:	f7ff ff7f 	bl	bb178 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   bb27a:	686b      	ldr	r3, [r5, #4]
   bb27c:	3b01      	subs	r3, #1
   bb27e:	606b      	str	r3, [r5, #4]
    return true;
   bb280:	e7ec      	b.n	bb25c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000bb284 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bb284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb288:	4605      	mov	r5, r0
   bb28a:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   bb28c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bb28e:	460c      	mov	r4, r1
        WiringBleLock lk;
   bb290:	f7fe fef4 	bl	ba07c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   bb294:	682e      	ldr	r6, [r5, #0]
   bb296:	1ef3      	subs	r3, r6, #3
   bb298:	2b0d      	cmp	r3, #13
   bb29a:	d83c      	bhi.n	bb316 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bb29c:	e8df f013 	tbh	[pc, r3, lsl #1]
   bb2a0:	0053000e 	.word	0x0053000e
   bb2a4:	00d1003b 	.word	0x00d1003b
   bb2a8:	003b003b 	.word	0x003b003b
   bb2ac:	003b003b 	.word	0x003b003b
   bb2b0:	009b003b 	.word	0x009b003b
   bb2b4:	009b009b 	.word	0x009b009b
   bb2b8:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   bb2bc:	a804      	add	r0, sp, #16
   bb2be:	f7ff fa0f 	bl	ba6e0 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   bb2c2:	9b04      	ldr	r3, [sp, #16]
   bb2c4:	89aa      	ldrh	r2, [r5, #12]
   bb2c6:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   bb2c8:	6869      	ldr	r1, [r5, #4]
   bb2ca:	9804      	ldr	r0, [sp, #16]
   bb2cc:	3108      	adds	r1, #8
   bb2ce:	3002      	adds	r0, #2
   bb2d0:	f7fe feee 	bl	ba0b0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   bb2d4:	a904      	add	r1, sp, #16
   bb2d6:	a806      	add	r0, sp, #24
   bb2d8:	f7ff fc0f 	bl	baafa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   bb2dc:	a906      	add	r1, sp, #24
   bb2de:	f104 0018 	add.w	r0, r4, #24
   bb2e2:	f7ff ff73 	bl	bb1cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bb2e6:	4605      	mov	r5, r0
   bb2e8:	a807      	add	r0, sp, #28
   bb2ea:	f7ff fc10 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb2ee:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   bb2f0:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   bb2f2:	b9b5      	cbnz	r5, bb322 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   bb2f4:	4b5d      	ldr	r3, [pc, #372]	; (bb46c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   bb2f6:	495e      	ldr	r1, [pc, #376]	; (bb470 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bb2f8:	9300      	str	r3, [sp, #0]
   bb2fa:	2032      	movs	r0, #50	; 0x32
   bb2fc:	462b      	mov	r3, r5
   bb2fe:	aa06      	add	r2, sp, #24
   bb300:	9507      	str	r5, [sp, #28]
   bb302:	f7fe fc3f 	bl	b9b84 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   bb306:	9b04      	ldr	r3, [sp, #16]
   bb308:	4629      	mov	r1, r5
   bb30a:	8818      	ldrh	r0, [r3, #0]
   bb30c:	f7fe f9c2 	bl	b9694 <hal_ble_gap_disconnect>
   bb310:	a805      	add	r0, sp, #20
   bb312:	f7ff fbfc 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   bb316:	a803      	add	r0, sp, #12
   bb318:	f7fe febe 	bl	ba098 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   bb31c:	b00e      	add	sp, #56	; 0x38
   bb31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   bb322:	4a54      	ldr	r2, [pc, #336]	; (bb474 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   bb324:	9200      	str	r2, [sp, #0]
   bb326:	2300      	movs	r3, #0
   bb328:	4951      	ldr	r1, [pc, #324]	; (bb470 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bb32a:	9307      	str	r3, [sp, #28]
   bb32c:	aa06      	add	r2, sp, #24
   bb32e:	2001      	movs	r0, #1
   bb330:	f7fe fc28 	bl	b9b84 <log_message>
                if (impl->connectedCallback_) {
   bb334:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bb336:	2b00      	cmp	r3, #0
   bb338:	d0ea      	beq.n	bb310 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   bb33a:	a904      	add	r1, sp, #16
   bb33c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bb340:	f7ff fc54 	bl	babec <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   bb344:	e7e4      	b.n	bb310 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bb346:	89a9      	ldrh	r1, [r5, #12]
   bb348:	4620      	mov	r0, r4
   bb34a:	f7ff f8dc 	bl	ba506 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bb34e:	4606      	mov	r6, r0
   bb350:	2800      	cmp	r0, #0
   bb352:	d0e0      	beq.n	bb316 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   bb354:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   bb356:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   bb35a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bb35e:	8029      	strh	r1, [r5, #0]
   bb360:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   bb364:	429a      	cmp	r2, r3
   bb366:	d003      	beq.n	bb370 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   bb368:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bb36c:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   bb36e:	e7f9      	b.n	bb364 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   bb370:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   bb374:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bb378:	45b8      	cmp	r8, r7
   bb37a:	d004      	beq.n	bb386 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   bb37c:	1d38      	adds	r0, r7, #4
   bb37e:	f7ff fbc6 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb382:	3708      	adds	r7, #8
   bb384:	e7f8      	b.n	bb378 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   bb386:	2300      	movs	r3, #0
   bb388:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   bb38a:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   bb38e:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bb392:	45b8      	cmp	r8, r7
   bb394:	d004      	beq.n	bb3a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   bb396:	1d38      	adds	r0, r7, #4
   bb398:	f7ff fbb9 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb39c:	3708      	adds	r7, #8
   bb39e:	e7f8      	b.n	bb392 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   bb3a0:	2300      	movs	r3, #0
   bb3a2:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   bb3a4:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   bb3a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bb3a8:	b123      	cbz	r3, bb3b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   bb3aa:	4631      	mov	r1, r6
   bb3ac:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bb3b0:	f7ff fc1c 	bl	babec <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   bb3b4:	2300      	movs	r3, #0
   bb3b6:	2220      	movs	r2, #32
   bb3b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   bb3bc:	4a2e      	ldr	r2, [pc, #184]	; (bb478 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   bb3be:	9200      	str	r2, [sp, #0]
   bb3c0:	492b      	ldr	r1, [pc, #172]	; (bb470 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bb3c2:	aa06      	add	r2, sp, #24
   bb3c4:	2001      	movs	r0, #1
   bb3c6:	f7fe fbdd 	bl	b9b84 <log_message>
                    impl->peers_.removeOne(*peer);
   bb3ca:	4631      	mov	r1, r6
   bb3cc:	f104 0018 	add.w	r0, r4, #24
   bb3d0:	f7ff ff35 	bl	bb23e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   bb3d4:	e79f      	b.n	bb316 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bb3d6:	89a9      	ldrh	r1, [r5, #12]
   bb3d8:	4620      	mov	r0, r4
   bb3da:	f7ff f894 	bl	ba506 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bb3de:	2800      	cmp	r0, #0
   bb3e0:	d099      	beq.n	bb316 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   bb3e2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bb3e4:	2b00      	cmp	r3, #0
   bb3e6:	d096      	beq.n	bb316 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   bb3e8:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bb3ea:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   bb3ec:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bb3f0:	d001      	beq.n	bb3f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   bb3f2:	2e10      	cmp	r6, #16
   bb3f4:	d117      	bne.n	bb426 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   bb3f6:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   bb3f8:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   bb3fa:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   bb3fc:	2506      	movs	r5, #6
                        };
   bb3fe:	f88d 3015 	strb.w	r3, [sp, #21]
   bb402:	9104      	str	r1, [sp, #16]
   bb404:	f88d 2014 	strb.w	r2, [sp, #20]
   bb408:	9006      	str	r0, [sp, #24]
   bb40a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   bb40e:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   bb410:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   bb414:	9508      	str	r5, [sp, #32]
   bb416:	e883 0003 	stmia.w	r3, {r0, r1}
   bb41a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb41c:	a906      	add	r1, sp, #24
   bb41e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bb422:	4798      	blx	r3
   bb424:	e777      	b.n	bb316 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   bb426:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   bb428:	bf01      	itttt	eq
   bb42a:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   bb42c:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   bb42e:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   bb432:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   bb434:	bf0f      	iteee	eq
   bb436:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   bb43a:	461a      	movne	r2, r3
   bb43c:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   bb43e:	461d      	movne	r5, r3
   bb440:	e7dd      	b.n	bb3fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bb442:	89a9      	ldrh	r1, [r5, #12]
   bb444:	4620      	mov	r0, r4
   bb446:	f7ff f85e 	bl	ba506 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   bb44a:	4601      	mov	r1, r0
   bb44c:	2800      	cmp	r0, #0
   bb44e:	f43f af62 	beq.w	bb316 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bb452:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb454:	2b00      	cmp	r3, #0
   bb456:	f43f af5e 	beq.w	bb316 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   bb45a:	686b      	ldr	r3, [r5, #4]
   bb45c:	9306      	str	r3, [sp, #24]
   bb45e:	aa06      	add	r2, sp, #24
   bb460:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb462:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bb466:	4798      	blx	r3
   bb468:	e755      	b.n	bb316 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bb46a:	bf00      	nop
   bb46c:	000c186b 	.word	0x000c186b
   bb470:	000c17cf 	.word	0x000c17cf
   bb474:	000c1891 	.word	0x000c1891
   bb478:	000c18ae 	.word	0x000c18ae

000bb47c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bb47c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   bb47e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   bb480:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bb482:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bb484:	dd05      	ble.n	bb492 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   bb486:	2114      	movs	r1, #20
   bb488:	4369      	muls	r1, r5
   bb48a:	f7fe fc67 	bl	b9d5c <realloc>
            if (!d) {
   bb48e:	b918      	cbnz	r0, bb498 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   bb490:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   bb492:	f7fe fc5b 	bl	b9d4c <free>
        T* d = nullptr;
   bb496:	2000      	movs	r0, #0
        data_ = d;
   bb498:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bb49a:	60a5      	str	r5, [r4, #8]
        return true;
   bb49c:	2001      	movs	r0, #1
   bb49e:	e7f7      	b.n	bb490 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000bb4a0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb4a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   bb4a4:	2400      	movs	r4, #0
   bb4a6:	e9c0 4400 	strd	r4, r4, [r0]
   bb4aa:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb4ac:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb4ae:	6849      	ldr	r1, [r1, #4]
   bb4b0:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb4b2:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb4b4:	dd1a      	ble.n	bb4ec <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   bb4b6:	f7ff ffe1 	bl	bb47c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb4ba:	b1b8      	cbz	r0, bb4ec <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb4bc:	e9d8 9300 	ldrd	r9, r3, [r8]
   bb4c0:	f04f 0c14 	mov.w	ip, #20
   bb4c4:	f8d7 e000 	ldr.w	lr, [r7]
   bb4c8:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   bb4cc:	eb09 0504 	add.w	r5, r9, r4
   bb4d0:	45ac      	cmp	ip, r5
   bb4d2:	d008      	beq.n	bb4e6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   bb4d4:	eb1e 0604 	adds.w	r6, lr, r4
   bb4d8:	bf1f      	itttt	ne
   bb4da:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   bb4dc:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   bb4de:	682b      	ldrne	r3, [r5, #0]
   bb4e0:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   bb4e2:	3414      	adds	r4, #20
   bb4e4:	e7f2      	b.n	bb4cc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   bb4e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bb4ea:	607b      	str	r3, [r7, #4]
}
   bb4ec:	4638      	mov	r0, r7
   bb4ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bb4f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   bb4f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   bb4f6:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   bb4fa:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb4fc:	6883      	ldr	r3, [r0, #8]
   bb4fe:	19e9      	adds	r1, r5, r7
   bb500:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   bb502:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb504:	dc17      	bgt.n	bb536 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   bb506:	2314      	movs	r3, #20
   bb508:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   bb50a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb50c:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   bb50e:	fb03 f907 	mul.w	r9, r3, r7
   bb512:	435a      	muls	r2, r3
    T* const p = data_ + i;
   bb514:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb516:	1b52      	subs	r2, r2, r5
   bb518:	4631      	mov	r1, r6
   bb51a:	eb06 0009 	add.w	r0, r6, r9
   bb51e:	f003 f90a 	bl	be736 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   bb522:	464a      	mov	r2, r9
   bb524:	4641      	mov	r1, r8
   bb526:	4630      	mov	r0, r6
   bb528:	f003 f8f7 	bl	be71a <memcpy>
    size_ += n;
   bb52c:	6863      	ldr	r3, [r4, #4]
   bb52e:	443b      	add	r3, r7
   bb530:	6063      	str	r3, [r4, #4]
}
   bb532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bb536:	f7ff ffa1 	bl	bb47c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb53a:	2800      	cmp	r0, #0
   bb53c:	d1e3      	bne.n	bb506 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   bb53e:	e7f8      	b.n	bb532 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000bb540 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bb540:	b082      	sub	sp, #8
   bb542:	b570      	push	{r4, r5, r6, lr}
   bb544:	460c      	mov	r4, r1
   bb546:	a904      	add	r1, sp, #16
   bb548:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb54c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   bb550:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bb552:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb554:	da17      	bge.n	bb586 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   bb556:	2314      	movs	r3, #20
   bb558:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   bb55c:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   bb55e:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   bb560:	435a      	muls	r2, r3
    T* const p = data_ + i;
   bb562:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb564:	1a52      	subs	r2, r2, r1
   bb566:	18e0      	adds	r0, r4, r3
   bb568:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   bb56a:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   bb56c:	f003 f8e3 	bl	be736 <memmove>
    new(p) T(std::move(value));
   bb570:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   bb572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb574:	6833      	ldr	r3, [r6, #0]
   bb576:	6023      	str	r3, [r4, #0]
    ++size_;
   bb578:	686b      	ldr	r3, [r5, #4]
   bb57a:	3301      	adds	r3, #1
   bb57c:	606b      	str	r3, [r5, #4]
}
   bb57e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb582:	b002      	add	sp, #8
   bb584:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb586:	3101      	adds	r1, #1
   bb588:	f7ff ff78 	bl	bb47c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb58c:	2800      	cmp	r0, #0
   bb58e:	d1e2      	bne.n	bb556 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   bb590:	e7f5      	b.n	bb57e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000bb592 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   bb592:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   bb596:	2400      	movs	r4, #0
   bb598:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bb59a:	1e93      	subs	r3, r2, #2
   bb59c:	e9c0 4400 	strd	r4, r4, [r0]
   bb5a0:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   bb5a2:	4605      	mov	r5, r0
   bb5a4:	460f      	mov	r7, r1
   bb5a6:	4690      	mov	r8, r2
   bb5a8:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bb5aa:	9305      	str	r3, [sp, #20]
    return size_;
   bb5ac:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   bb5ae:	428c      	cmp	r4, r1
   bb5b0:	da72      	bge.n	bb698 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   bb5b2:	6838      	ldr	r0, [r7, #0]
   bb5b4:	ab07      	add	r3, sp, #28
   bb5b6:	4642      	mov	r2, r8
   bb5b8:	1b09      	subs	r1, r1, r4
   bb5ba:	4420      	add	r0, r4
   bb5bc:	f7fe fc90 	bl	b9ee0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   bb5c0:	4606      	mov	r6, r0
   bb5c2:	2800      	cmp	r0, #0
   bb5c4:	d068      	beq.n	bb698 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bb5c6:	9b05      	ldr	r3, [sp, #20]
   bb5c8:	2b01      	cmp	r3, #1
   bb5ca:	d82f      	bhi.n	bb62c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bb5cc:	f1a0 0b02 	sub.w	fp, r0, #2
   bb5d0:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   bb5d4:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   bb5d8:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bb5dc:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bb5de:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bb5e0:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bb5e2:	d055      	beq.n	bb690 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   bb5e4:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bb5e6:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   bb5ea:	4413      	add	r3, r2
   bb5ec:	a808      	add	r0, sp, #32
   bb5ee:	78d9      	ldrb	r1, [r3, #3]
   bb5f0:	789b      	ldrb	r3, [r3, #2]
   bb5f2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   bb5f6:	f7fe fdd8 	bl	ba1aa <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   bb5fa:	f10d 0e20 	add.w	lr, sp, #32
   bb5fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   bb602:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   bb606:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bb60a:	f8de 3000 	ldr.w	r3, [lr]
   bb60e:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   bb612:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   bb616:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   bb61a:	ab0d      	add	r3, sp, #52	; 0x34
   bb61c:	cb0c      	ldmia	r3, {r2, r3}
   bb61e:	6869      	ldr	r1, [r5, #4]
   bb620:	4628      	mov	r0, r5
   bb622:	f7ff ff8d 	bl	bb540 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bb626:	f109 0901 	add.w	r9, r9, #1
   bb62a:	e7d7      	b.n	bb5dc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   bb62c:	f1a8 0306 	sub.w	r3, r8, #6
   bb630:	2b01      	cmp	r3, #1
   bb632:	d82d      	bhi.n	bb690 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bb634:	f1a0 0b02 	sub.w	fp, r0, #2
   bb638:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   bb63c:	f04f 0900 	mov.w	r9, #0
   bb640:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   bb644:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   bb646:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bb648:	d022      	beq.n	bb690 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   bb64a:	3302      	adds	r3, #2
    return data_[i];
   bb64c:	6839      	ldr	r1, [r7, #0]
   bb64e:	4423      	add	r3, r4
   bb650:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   bb654:	2201      	movs	r2, #1
   bb656:	4419      	add	r1, r3
   bb658:	a808      	add	r0, sp, #32
   bb65a:	f7fe fd87 	bl	ba16c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   bb65e:	f10d 0e20 	add.w	lr, sp, #32
   bb662:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   bb666:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   bb66a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bb66e:	f8de 3000 	ldr.w	r3, [lr]
   bb672:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   bb676:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   bb67a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   bb67e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   bb682:	6869      	ldr	r1, [r5, #4]
   bb684:	4628      	mov	r0, r5
   bb686:	f7ff ff5b 	bl	bb540 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bb68a:	f109 0901 	add.w	r9, r9, #1
   bb68e:	e7d9      	b.n	bb644 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   bb690:	9b07      	ldr	r3, [sp, #28]
   bb692:	441c      	add	r4, r3
   bb694:	4434      	add	r4, r6
   bb696:	e789      	b.n	bb5ac <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   bb698:	4628      	mov	r0, r5
   bb69a:	b013      	add	sp, #76	; 0x4c
   bb69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb6a0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   bb6a0:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   bb6a2:	2300      	movs	r3, #0
   bb6a4:	b085      	sub	sp, #20
   bb6a6:	e9c0 3300 	strd	r3, r3, [r0]
   bb6aa:	6083      	str	r3, [r0, #8]
   bb6ac:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bb6ae:	2202      	movs	r2, #2
   bb6b0:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   bb6b2:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bb6b4:	f7ff ff6d 	bl	bb592 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb6b8:	a901      	add	r1, sp, #4
   bb6ba:	4620      	mov	r0, r4
   bb6bc:	f7ff ff19 	bl	bb4f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb6c0:	a801      	add	r0, sp, #4
   bb6c2:	f7ff f983 	bl	ba9cc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bb6c6:	2202      	movs	r2, #2
   bb6c8:	4629      	mov	r1, r5
   bb6ca:	a801      	add	r0, sp, #4
   bb6cc:	f7ff ff61 	bl	bb592 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb6d0:	a901      	add	r1, sp, #4
   bb6d2:	4620      	mov	r0, r4
   bb6d4:	f7ff ff0d 	bl	bb4f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb6d8:	a801      	add	r0, sp, #4
   bb6da:	f7ff f977 	bl	ba9cc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   bb6de:	2203      	movs	r2, #3
   bb6e0:	4629      	mov	r1, r5
   bb6e2:	a801      	add	r0, sp, #4
   bb6e4:	f7ff ff55 	bl	bb592 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb6e8:	a901      	add	r1, sp, #4
   bb6ea:	4620      	mov	r0, r4
   bb6ec:	f7ff ff01 	bl	bb4f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb6f0:	a801      	add	r0, sp, #4
   bb6f2:	f7ff f96b 	bl	ba9cc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   bb6f6:	2206      	movs	r2, #6
   bb6f8:	4629      	mov	r1, r5
   bb6fa:	a801      	add	r0, sp, #4
   bb6fc:	f7ff ff49 	bl	bb592 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb700:	a901      	add	r1, sp, #4
   bb702:	4620      	mov	r0, r4
   bb704:	f7ff fef5 	bl	bb4f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb708:	a801      	add	r0, sp, #4
   bb70a:	f7ff f95f 	bl	ba9cc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   bb70e:	2207      	movs	r2, #7
   bb710:	4629      	mov	r1, r5
   bb712:	a801      	add	r0, sp, #4
   bb714:	f7ff ff3d 	bl	bb592 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bb718:	a901      	add	r1, sp, #4
   bb71a:	4620      	mov	r0, r4
   bb71c:	f7ff fee9 	bl	bb4f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bb720:	a801      	add	r0, sp, #4
   bb722:	f7ff f953 	bl	ba9cc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   bb726:	4620      	mov	r0, r4
   bb728:	b005      	add	sp, #20
   bb72a:	bd30      	pop	{r4, r5, pc}

000bb72c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   bb72c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb730:	b085      	sub	sp, #20
   bb732:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bb734:	4601      	mov	r1, r0
   bb736:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   bb738:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bb73a:	f7ff ffb1 	bl	bb6a0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_;
   bb73e:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
   bb740:	9b02      	ldr	r3, [sp, #8]
   bb742:	f04f 0e14 	mov.w	lr, #20
   bb746:	fb0e 6c03 	mla	ip, lr, r3, r6
   bb74a:	2700      	movs	r7, #0
    for (const auto& uuid : foundUuids) {
   bb74c:	45b4      	cmp	ip, r6
   bb74e:	d00d      	beq.n	bb76c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
   bb750:	45b9      	cmp	r9, r7
   bb752:	f106 0614 	add.w	r6, r6, #20
   bb756:	d009      	beq.n	bb76c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
   bb758:	f1a6 0514 	sub.w	r5, r6, #20
   bb75c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb75e:	fb0e 8407 	mla	r4, lr, r7, r8
   bb762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb764:	682b      	ldr	r3, [r5, #0]
   bb766:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
   bb768:	3701      	adds	r7, #1
   bb76a:	e7ef      	b.n	bb74c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bb76c:	a801      	add	r0, sp, #4
   bb76e:	f7ff f92d 	bl	ba9cc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   bb772:	4638      	mov	r0, r7
   bb774:	b005      	add	sp, #20
   bb776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bb77a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   bb77a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb77e:	b08b      	sub	sp, #44	; 0x2c
   bb780:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   bb782:	f100 0144 	add.w	r1, r0, #68	; 0x44
   bb786:	a801      	add	r0, sp, #4
   bb788:	f7ff fe8a 	bl	bb4a0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   bb78c:	9b02      	ldr	r3, [sp, #8]
   bb78e:	2b00      	cmp	r3, #0
   bb790:	dd4a      	ble.n	bb828 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   bb792:	f104 0114 	add.w	r1, r4, #20
   bb796:	a804      	add	r0, sp, #16
   bb798:	f7ff ff82 	bl	bb6a0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   bb79c:	f104 0108 	add.w	r1, r4, #8
   bb7a0:	a807      	add	r0, sp, #28
   bb7a2:	f7ff ff7d 	bl	bb6a0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   bb7a6:	9d05      	ldr	r5, [sp, #20]
   bb7a8:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   bb7aa:	2d00      	cmp	r5, #0
   bb7ac:	dc01      	bgt.n	bb7b2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   bb7ae:	2e00      	cmp	r6, #0
   bb7b0:	dd38      	ble.n	bb824 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   bb7b2:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   bb7b4:	9f02      	ldr	r7, [sp, #8]
    return data_;
   bb7b6:	f8dd 8010 	ldr.w	r8, [sp, #16]
   bb7ba:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   bb7be:	2314      	movs	r3, #20
   bb7c0:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   bb7c4:	fb03 8505 	mla	r5, r3, r5, r8
   bb7c8:	fb03 9606 	mla	r6, r3, r6, r9
   bb7cc:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   bb7ce:	45ba      	cmp	sl, r7
   bb7d0:	d028      	beq.n	bb824 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   bb7d2:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   bb7d4:	45ab      	cmp	fp, r5
   bb7d6:	d015      	beq.n	bb804 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   bb7d8:	4659      	mov	r1, fp
   bb7da:	4650      	mov	r0, sl
   bb7dc:	f7fe fcef 	bl	ba1be <_ZNK8particle7BleUuideqERKS0_>
   bb7e0:	f10b 0b14 	add.w	fp, fp, #20
   bb7e4:	4604      	mov	r4, r0
   bb7e6:	2800      	cmp	r0, #0
   bb7e8:	d0f4      	beq.n	bb7d4 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   bb7ea:	a807      	add	r0, sp, #28
   bb7ec:	f7ff f8ee 	bl	ba9cc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   bb7f0:	a804      	add	r0, sp, #16
   bb7f2:	f7ff f8eb 	bl	ba9cc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   bb7f6:	a801      	add	r0, sp, #4
   bb7f8:	f7ff f8e8 	bl	ba9cc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   bb7fc:	4620      	mov	r0, r4
   bb7fe:	b00b      	add	sp, #44	; 0x2c
   bb800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb804:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   bb806:	45b3      	cmp	fp, r6
   bb808:	d009      	beq.n	bb81e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   bb80a:	4659      	mov	r1, fp
   bb80c:	4650      	mov	r0, sl
   bb80e:	f7fe fcd6 	bl	ba1be <_ZNK8particle7BleUuideqERKS0_>
   bb812:	f10b 0b14 	add.w	fp, fp, #20
   bb816:	4604      	mov	r4, r0
   bb818:	2800      	cmp	r0, #0
   bb81a:	d0f4      	beq.n	bb806 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   bb81c:	e7e5      	b.n	bb7ea <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   bb81e:	f10a 0a14 	add.w	sl, sl, #20
   bb822:	e7d4      	b.n	bb7ce <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   bb824:	2400      	movs	r4, #0
   bb826:	e7e0      	b.n	bb7ea <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   bb828:	2401      	movs	r4, #1
   bb82a:	e7e4      	b.n	bb7f6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000bb82c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   bb82c:	b513      	push	{r0, r1, r4, lr}
   bb82e:	460b      	mov	r3, r1
   bb830:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb832:	e9d0 0100 	ldrd	r0, r1, [r0]
   bb836:	466c      	mov	r4, sp
   bb838:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   bb83c:	e893 0003 	ldmia.w	r3, {r0, r1}
   bb840:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   bb844:	e894 0003 	ldmia.w	r4, {r0, r1}
   bb848:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   bb84c:	b002      	add	sp, #8
   bb84e:	bd10      	pop	{r4, pc}

000bb850 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   bb850:	b538      	push	{r3, r4, r5, lr}
   bb852:	4605      	mov	r5, r0
   bb854:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   bb856:	f7ff ffe9 	bl	bb82c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb85a:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   bb85c:	68a2      	ldr	r2, [r4, #8]
   bb85e:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bb860:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bb862:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   bb864:	68e2      	ldr	r2, [r4, #12]
   bb866:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bb868:	60e3      	str	r3, [r4, #12]
      }
   bb86a:	bd38      	pop	{r3, r4, r5, pc}

000bb86c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   bb86c:	b530      	push	{r4, r5, lr}
   bb86e:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   bb870:	2300      	movs	r3, #0
   bb872:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   bb874:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   bb876:	4605      	mov	r5, r0
   bb878:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   bb87a:	b133      	cbz	r3, bb88a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bb87c:	2202      	movs	r2, #2
   bb87e:	4668      	mov	r0, sp
   bb880:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bb882:	68e3      	ldr	r3, [r4, #12]
   bb884:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   bb886:	68a3      	ldr	r3, [r4, #8]
   bb888:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   bb88a:	4629      	mov	r1, r5
   bb88c:	4668      	mov	r0, sp
   bb88e:	f7ff ffdf 	bl	bb850 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bb892:	4668      	mov	r0, sp
   bb894:	f7f8 fe70 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
      }
   bb898:	b005      	add	sp, #20
   bb89a:	bd30      	pop	{r4, r5, pc}

000bb89c <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   bb89c:	b538      	push	{r3, r4, r5, lr}
   bb89e:	460d      	mov	r5, r1
      { return _M_ptr; }
   bb8a0:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   bb8a2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   bb8a4:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   bb8a6:	b123      	cbz	r3, bb8b2 <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   bb8a8:	6828      	ldr	r0, [r5, #0]
   bb8aa:	314c      	adds	r1, #76	; 0x4c
   bb8ac:	304c      	adds	r0, #76	; 0x4c
   bb8ae:	f7ff ffdd 	bl	bb86c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bb8b2:	4620      	mov	r0, r4
   bb8b4:	682b      	ldr	r3, [r5, #0]
   bb8b6:	f840 3b04 	str.w	r3, [r0], #4
   bb8ba:	6869      	ldr	r1, [r5, #4]
   bb8bc:	f7fe fbb8 	bl	ba030 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   bb8c0:	4620      	mov	r0, r4
   bb8c2:	bd38      	pop	{r3, r4, r5, pc}

000bb8c4 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   bb8c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb8c8:	4604      	mov	r4, r0
   bb8ca:	b087      	sub	sp, #28
    WiringBleLock lk;
   bb8cc:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   bb8ce:	460e      	mov	r6, r1
   bb8d0:	4617      	mov	r7, r2
    WiringBleLock lk;
   bb8d2:	f7fe fbd3 	bl	ba07c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bb8d6:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   bb8d8:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   bb8dc:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   bb8e0:	4544      	cmp	r4, r8
   bb8e2:	46a1      	mov	r9, r4
   bb8e4:	d016      	beq.n	bb914 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   bb8e6:	4621      	mov	r1, r4
   bb8e8:	a801      	add	r0, sp, #4
   bb8ea:	f7fe fe37 	bl	ba55c <_ZNK8particle17BleCharacteristic4UUIDEv>
   bb8ee:	4639      	mov	r1, r7
   bb8f0:	a801      	add	r0, sp, #4
   bb8f2:	f7fe fc64 	bl	ba1be <_ZNK8particle7BleUuideqERKS0_>
   bb8f6:	3408      	adds	r4, #8
   bb8f8:	4605      	mov	r5, r0
   bb8fa:	2800      	cmp	r0, #0
   bb8fc:	d0f0      	beq.n	bb8e0 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   bb8fe:	4649      	mov	r1, r9
   bb900:	4630      	mov	r0, r6
   bb902:	f7ff ffcb 	bl	bb89c <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   bb906:	4668      	mov	r0, sp
   bb908:	f7fe fbc6 	bl	ba098 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bb90c:	4628      	mov	r0, r5
   bb90e:	b007      	add	sp, #28
   bb910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   bb914:	2500      	movs	r5, #0
   bb916:	e7f6      	b.n	bb906 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000bb918 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   bb918:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bb91a:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   bb91c:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bb91e:	344c      	adds	r4, #76	; 0x4c
   bb920:	b1b9      	cbz	r1, bb952 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   bb922:	e9cd 1200 	strd	r1, r2, [sp]
   bb926:	a802      	add	r0, sp, #8
   bb928:	4669      	mov	r1, sp
   bb92a:	f7ff f8af 	bl	baa8c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   bb92e:	2300      	movs	r3, #0
	__x.swap(*this);
   bb930:	a906      	add	r1, sp, #24
   bb932:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   bb934:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   bb936:	f7ff ff8b 	bl	bb850 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   bb93a:	4621      	mov	r1, r4
   bb93c:	a806      	add	r0, sp, #24
   bb93e:	f7ff ff87 	bl	bb850 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bb942:	a806      	add	r0, sp, #24
   bb944:	f7f8 fe18 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
   bb948:	a802      	add	r0, sp, #8
   bb94a:	f7f8 fe15 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
}
   bb94e:	b00a      	add	sp, #40	; 0x28
   bb950:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   bb952:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   bb954:	e7eb      	b.n	bb92e <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000bb956 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bb956:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bb958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb95a:	4604      	mov	r4, r0
   bb95c:	460d      	mov	r5, r1
   bb95e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bb960:	d914      	bls.n	bb98c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bb962:	4290      	cmp	r0, r2
   bb964:	d213      	bcs.n	bb98e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bb966:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bb96a:	1a75      	subs	r5, r6, r1
   bb96c:	f1a1 0708 	sub.w	r7, r1, #8
   bb970:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bb972:	42b7      	cmp	r7, r6
   bb974:	d018      	beq.n	bb9a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bb976:	b11c      	cbz	r4, bb980 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bb978:	4631      	mov	r1, r6
   bb97a:	4620      	mov	r0, r4
   bb97c:	f7ff f8b3 	bl	baae6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   bb980:	1d30      	adds	r0, r6, #4
   bb982:	f7ff f8c4 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bb986:	3e08      	subs	r6, #8
   bb988:	3c08      	subs	r4, #8
   bb98a:	e7f2      	b.n	bb972 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bb98c:	d00c      	beq.n	bb9a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bb98e:	42b5      	cmp	r5, r6
   bb990:	d00a      	beq.n	bb9a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bb992:	b11c      	cbz	r4, bb99c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bb994:	4629      	mov	r1, r5
   bb996:	4620      	mov	r0, r4
   bb998:	f7ff f8a5 	bl	baae6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bb99c:	1d28      	adds	r0, r5, #4
   bb99e:	f7ff f8b6 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bb9a2:	3508      	adds	r5, #8
   bb9a4:	3408      	adds	r4, #8
   bb9a6:	e7f2      	b.n	bb98e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bb9a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb9aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bb9aa:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bb9ac:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bb9ae:	4605      	mov	r5, r0
        if (n > 0) {
   bb9b0:	dd11      	ble.n	bb9d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bb9b2:	00f0      	lsls	r0, r6, #3
   bb9b4:	f7fe f9c2 	bl	b9d3c <malloc>
            if (!d) {
   bb9b8:	4604      	mov	r4, r0
   bb9ba:	b158      	cbz	r0, bb9d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bb9bc:	e9d5 1200 	ldrd	r1, r2, [r5]
   bb9c0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bb9c4:	f7ff ffc7 	bl	bb956 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bb9c8:	6828      	ldr	r0, [r5, #0]
   bb9ca:	f7fe f9bf 	bl	b9d4c <free>
        data_ = d;
   bb9ce:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bb9d0:	60ae      	str	r6, [r5, #8]
        return true;
   bb9d2:	2001      	movs	r0, #1
    }
   bb9d4:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bb9d6:	2400      	movs	r4, #0
   bb9d8:	e7f6      	b.n	bb9c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bb9da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   bb9de:	2300      	movs	r3, #0
   bb9e0:	e9c0 3300 	strd	r3, r3, [r0]
   bb9e4:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb9e6:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb9e8:	6849      	ldr	r1, [r1, #4]
   bb9ea:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb9ec:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb9ee:	dd13      	ble.n	bba18 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   bb9f0:	f7ff ffdb 	bl	bb9aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb9f4:	b180      	cbz	r0, bba18 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb9f6:	e9d5 6300 	ldrd	r6, r3, [r5]
   bb9fa:	6827      	ldr	r7, [r4, #0]
   bb9fc:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   bba00:	45b0      	cmp	r8, r6
   bba02:	d007      	beq.n	bba14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   bba04:	b11f      	cbz	r7, bba0e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   bba06:	4631      	mov	r1, r6
   bba08:	4638      	mov	r0, r7
   bba0a:	f7ff f86c 	bl	baae6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   bba0e:	3608      	adds	r6, #8
   bba10:	3708      	adds	r7, #8
   bba12:	e7f5      	b.n	bba00 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   bba14:	686b      	ldr	r3, [r5, #4]
   bba16:	6063      	str	r3, [r4, #4]
}
   bba18:	4620      	mov	r0, r4
   bba1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bba1e <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   bba1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bba20:	460d      	mov	r5, r1
   bba22:	4604      	mov	r4, r0
    WiringBleLock lk;
   bba24:	a801      	add	r0, sp, #4
   bba26:	f7fe fb29 	bl	ba07c <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   bba2a:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   bba2c:	4620      	mov	r0, r4
   bba2e:	310c      	adds	r1, #12
   bba30:	f7ff ffd3 	bl	bb9da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   bba34:	a801      	add	r0, sp, #4
   bba36:	f7fe fb2f 	bl	ba098 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bba3a:	4620      	mov	r0, r4
   bba3c:	b003      	add	sp, #12
   bba3e:	bd30      	pop	{r4, r5, pc}

000bba40 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   bba40:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   bba42:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bba44:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   bba46:	4605      	mov	r5, r0
   bba48:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   bba4a:	b933      	cbnz	r3, bba5a <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   bba4c:	4608      	mov	r0, r1
   bba4e:	f7fe faa9 	bl	b9fa4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   bba52:	b910      	cbnz	r0, bba5a <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   bba54:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   bba56:	2201      	movs	r2, #1
   bba58:	729a      	strb	r2, [r3, #10]
    return services();
   bba5a:	4628      	mov	r0, r5
   bba5c:	4621      	mov	r1, r4
   bba5e:	f7ff ffde 	bl	bba1e <_ZNK8particle13BlePeerDevice8servicesEv>
}
   bba62:	4628      	mov	r0, r5
   bba64:	bd38      	pop	{r3, r4, r5, pc}

000bba66 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bba66:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bba68:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bba6a:	6845      	ldr	r5, [r0, #4]
   bba6c:	4668      	mov	r0, sp
   bba6e:	f7ff f83a 	bl	baae6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bba72:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bba76:	4299      	cmp	r1, r3
   bba78:	da10      	bge.n	bba9c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bba7a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bba7c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bba7e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bba82:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bba86:	4629      	mov	r1, r5
   bba88:	f105 0008 	add.w	r0, r5, #8
   bba8c:	f7ff ff63 	bl	bb956 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bba90:	b98d      	cbnz	r5, bbab6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bba92:	6863      	ldr	r3, [r4, #4]
   bba94:	3301      	adds	r3, #1
   bba96:	6063      	str	r3, [r4, #4]
    return true;
   bba98:	2601      	movs	r6, #1
   bba9a:	e006      	b.n	bbaaa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bba9c:	3101      	adds	r1, #1
   bba9e:	4620      	mov	r0, r4
   bbaa0:	f7ff ff83 	bl	bb9aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bbaa4:	4606      	mov	r6, r0
   bbaa6:	2800      	cmp	r0, #0
   bbaa8:	d1e7      	bne.n	bba7a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   bbaaa:	a801      	add	r0, sp, #4
   bbaac:	f7ff f82f 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bbab0:	4630      	mov	r0, r6
   bbab2:	b002      	add	sp, #8
   bbab4:	bd70      	pop	{r4, r5, r6, pc}
   bbab6:	4669      	mov	r1, sp
   bbab8:	4628      	mov	r0, r5
   bbaba:	f7ff f814 	bl	baae6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bbabe:	e7e8      	b.n	bba92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bbac0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   bbac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   bbac4:	f8df 90b8 	ldr.w	r9, [pc, #184]	; bbb80 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   bbac8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; bbb84 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   bbacc:	b093      	sub	sp, #76	; 0x4c
   bbace:	4605      	mov	r5, r0
   bbad0:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   bbad2:	2700      	movs	r7, #0
   bbad4:	682b      	ldr	r3, [r5, #0]
   bbad6:	42bb      	cmp	r3, r7
   bbad8:	d94e      	bls.n	bbb78 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   bbada:	a803      	add	r0, sp, #12
   bbadc:	f7fe fde4 	bl	ba6a8 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   bbae0:	261c      	movs	r6, #28
   bbae2:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   bbae4:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   bbae6:	437e      	muls	r6, r7
   bbae8:	4432      	add	r2, r6
   bbaea:	f10d 0c14 	add.w	ip, sp, #20
   bbaee:	1d13      	adds	r3, r2, #4
   bbaf0:	46e3      	mov	fp, ip
   bbaf2:	3214      	adds	r2, #20
   bbaf4:	6818      	ldr	r0, [r3, #0]
   bbaf6:	6859      	ldr	r1, [r3, #4]
   bbaf8:	46e6      	mov	lr, ip
   bbafa:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   bbafe:	3308      	adds	r3, #8
   bbb00:	4293      	cmp	r3, r2
   bbb02:	46f4      	mov	ip, lr
   bbb04:	d1f6      	bne.n	bbaf4 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   bbb06:	6818      	ldr	r0, [r3, #0]
   bbb08:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   bbb0c:	4659      	mov	r1, fp
   bbb0e:	a80a      	add	r0, sp, #40	; 0x28
   bbb10:	f7fe fb0a 	bl	ba128 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   bbb14:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   bbb18:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bbb1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bbb1e:	f8dc 3000 	ldr.w	r3, [ip]
   bbb22:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   bbb24:	686b      	ldr	r3, [r5, #4]
   bbb26:	9a03      	ldr	r2, [sp, #12]
   bbb28:	4433      	add	r3, r6
   bbb2a:	a903      	add	r1, sp, #12
   bbb2c:	8b1b      	ldrh	r3, [r3, #24]
   bbb2e:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   bbb30:	686b      	ldr	r3, [r5, #4]
   bbb32:	4433      	add	r3, r6
   bbb34:	8b5b      	ldrh	r3, [r3, #26]
   bbb36:	82d3      	strh	r3, [r2, #22]
        return services_;
   bbb38:	f8d8 0000 	ldr.w	r0, [r8]
   bbb3c:	f100 040c 	add.w	r4, r0, #12
   bbb40:	a80a      	add	r0, sp, #40	; 0x28
   bbb42:	f7fe ffd0 	bl	baae6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   bbb46:	4620      	mov	r0, r4
   bbb48:	a90a      	add	r1, sp, #40	; 0x28
   bbb4a:	f7ff ff8c 	bl	bba66 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   bbb4e:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bbb50:	a80b      	add	r0, sp, #44	; 0x2c
   bbb52:	f7fe ffdc 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbb56:	b954      	cbnz	r4, bbb6e <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   bbb58:	2320      	movs	r3, #32
   bbb5a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   bbb5e:	f8cd 9000 	str.w	r9, [sp]
   bbb62:	4623      	mov	r3, r4
   bbb64:	aa0a      	add	r2, sp, #40	; 0x28
   bbb66:	4651      	mov	r1, sl
   bbb68:	2032      	movs	r0, #50	; 0x32
   bbb6a:	f7fe f80b 	bl	b9b84 <log_message>
   bbb6e:	a804      	add	r0, sp, #16
   bbb70:	f7fe ffcd 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   bbb74:	3701      	adds	r7, #1
   bbb76:	e7ad      	b.n	bbad4 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   bbb78:	b013      	add	sp, #76	; 0x4c
   bbb7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbb7e:	bf00      	nop
   bbb80:	000c18cd 	.word	0x000c18cd
   bbb84:	000c17cf 	.word	0x000c17cf

000bbb88 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bbb88:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bbb8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbb8c:	4604      	mov	r4, r0
   bbb8e:	460d      	mov	r5, r1
   bbb90:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bbb92:	d914      	bls.n	bbbbe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bbb94:	4290      	cmp	r0, r2
   bbb96:	d213      	bcs.n	bbbc0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bbb98:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bbb9c:	1a75      	subs	r5, r6, r1
   bbb9e:	f1a1 0708 	sub.w	r7, r1, #8
   bbba2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bbba4:	42b7      	cmp	r7, r6
   bbba6:	d018      	beq.n	bbbda <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bbba8:	b11c      	cbz	r4, bbbb2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bbbaa:	4631      	mov	r1, r6
   bbbac:	4620      	mov	r0, r4
   bbbae:	f7fe ff8c 	bl	baaca <_ZN8particle17BleCharacteristicC1ERKS0_>
   bbbb2:	1d30      	adds	r0, r6, #4
   bbbb4:	f7fe ffab 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bbbb8:	3e08      	subs	r6, #8
   bbbba:	3c08      	subs	r4, #8
   bbbbc:	e7f2      	b.n	bbba4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bbbbe:	d00c      	beq.n	bbbda <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bbbc0:	42b5      	cmp	r5, r6
   bbbc2:	d00a      	beq.n	bbbda <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bbbc4:	b11c      	cbz	r4, bbbce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bbbc6:	4629      	mov	r1, r5
   bbbc8:	4620      	mov	r0, r4
   bbbca:	f7fe ff7e 	bl	baaca <_ZN8particle17BleCharacteristicC1ERKS0_>
   bbbce:	1d28      	adds	r0, r5, #4
   bbbd0:	f7fe ff9d 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bbbd4:	3508      	adds	r5, #8
   bbbd6:	3408      	adds	r4, #8
   bbbd8:	e7f2      	b.n	bbbc0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bbbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bbbdc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bbbdc:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bbbde:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bbbe0:	4605      	mov	r5, r0
        if (n > 0) {
   bbbe2:	dd11      	ble.n	bbc08 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bbbe4:	00f0      	lsls	r0, r6, #3
   bbbe6:	f7fe f8a9 	bl	b9d3c <malloc>
            if (!d) {
   bbbea:	4604      	mov	r4, r0
   bbbec:	b158      	cbz	r0, bbc06 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bbbee:	e9d5 1200 	ldrd	r1, r2, [r5]
   bbbf2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bbbf6:	f7ff ffc7 	bl	bbb88 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bbbfa:	6828      	ldr	r0, [r5, #0]
   bbbfc:	f7fe f8a6 	bl	b9d4c <free>
        data_ = d;
   bbc00:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bbc02:	60ae      	str	r6, [r5, #8]
        return true;
   bbc04:	2001      	movs	r0, #1
    }
   bbc06:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bbc08:	2400      	movs	r4, #0
   bbc0a:	e7f6      	b.n	bbbfa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bbc0c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bbc0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   bbc10:	2300      	movs	r3, #0
   bbc12:	e9c0 3300 	strd	r3, r3, [r0]
   bbc16:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bbc18:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bbc1a:	6849      	ldr	r1, [r1, #4]
   bbc1c:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bbc1e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bbc20:	dd13      	ble.n	bbc4a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   bbc22:	f7ff ffdb 	bl	bbbdc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bbc26:	b180      	cbz	r0, bbc4a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bbc28:	e9d5 6300 	ldrd	r6, r3, [r5]
   bbc2c:	6827      	ldr	r7, [r4, #0]
   bbc2e:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   bbc32:	45b0      	cmp	r8, r6
   bbc34:	d007      	beq.n	bbc46 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   bbc36:	b11f      	cbz	r7, bbc40 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   bbc38:	4631      	mov	r1, r6
   bbc3a:	4638      	mov	r0, r7
   bbc3c:	f7fe ff45 	bl	baaca <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   bbc40:	3608      	adds	r6, #8
   bbc42:	3708      	adds	r7, #8
   bbc44:	e7f5      	b.n	bbc32 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   bbc46:	686b      	ldr	r3, [r5, #4]
   bbc48:	6063      	str	r3, [r4, #4]
}
   bbc4a:	4620      	mov	r0, r4
   bbc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bbc50 <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   bbc50:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bbc52:	460d      	mov	r5, r1
   bbc54:	4604      	mov	r4, r0
    WiringBleLock lk;
   bbc56:	a801      	add	r0, sp, #4
   bbc58:	f7fe fa10 	bl	ba07c <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   bbc5c:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   bbc5e:	4620      	mov	r0, r4
   bbc60:	3118      	adds	r1, #24
   bbc62:	f7ff ffd3 	bl	bbc0c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   bbc66:	a801      	add	r0, sp, #4
   bbc68:	f7fe fa16 	bl	ba098 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bbc6c:	4620      	mov	r0, r4
   bbc6e:	b003      	add	sp, #12
   bbc70:	bd30      	pop	{r4, r5, pc}

000bbc72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bbc72:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bbc74:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bbc76:	6845      	ldr	r5, [r0, #4]
   bbc78:	4668      	mov	r0, sp
   bbc7a:	f7fe ff26 	bl	baaca <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bbc7e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bbc82:	4299      	cmp	r1, r3
   bbc84:	da10      	bge.n	bbca8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bbc86:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bbc88:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bbc8a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bbc8e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bbc92:	4629      	mov	r1, r5
   bbc94:	f105 0008 	add.w	r0, r5, #8
   bbc98:	f7ff ff76 	bl	bbb88 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bbc9c:	b98d      	cbnz	r5, bbcc2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bbc9e:	6863      	ldr	r3, [r4, #4]
   bbca0:	3301      	adds	r3, #1
   bbca2:	6063      	str	r3, [r4, #4]
    return true;
   bbca4:	2601      	movs	r6, #1
   bbca6:	e006      	b.n	bbcb6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bbca8:	3101      	adds	r1, #1
   bbcaa:	4620      	mov	r0, r4
   bbcac:	f7ff ff96 	bl	bbbdc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bbcb0:	4606      	mov	r6, r0
   bbcb2:	2800      	cmp	r0, #0
   bbcb4:	d1e7      	bne.n	bbc86 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bbcb6:	a801      	add	r0, sp, #4
   bbcb8:	f7fe ff29 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bbcbc:	4630      	mov	r0, r6
   bbcbe:	b002      	add	sp, #8
   bbcc0:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bbcc2:	4669      	mov	r1, sp
   bbcc4:	4628      	mov	r0, r5
   bbcc6:	f7fe ff00 	bl	baaca <_ZN8particle17BleCharacteristicC1ERKS0_>
   bbcca:	e7e8      	b.n	bbc9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bbccc <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   bbccc:	b5f0      	push	{r4, r5, r6, r7, lr}
   bbcce:	b085      	sub	sp, #20
   bbcd0:	4605      	mov	r5, r0
    WiringBleLock lk;
   bbcd2:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   bbcd4:	460c      	mov	r4, r1
   bbcd6:	4617      	mov	r7, r2
    WiringBleLock lk;
   bbcd8:	f7fe f9d0 	bl	ba07c <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   bbcdc:	2300      	movs	r3, #0
   bbcde:	e9c5 3300 	strd	r3, r3, [r5]
   bbce2:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   bbce4:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   bbce6:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   bbcea:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   bbcee:	42b4      	cmp	r4, r6
   bbcf0:	d011      	beq.n	bbd16 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   bbcf2:	6838      	ldr	r0, [r7, #0]
   bbcf4:	4621      	mov	r1, r4
   bbcf6:	f7fe fbf1 	bl	ba4dc <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   bbcfa:	b150      	cbz	r0, bbd12 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   bbcfc:	4621      	mov	r1, r4
   bbcfe:	a802      	add	r0, sp, #8
   bbd00:	f7fe fee3 	bl	baaca <_ZN8particle17BleCharacteristicC1ERKS0_>
   bbd04:	a902      	add	r1, sp, #8
   bbd06:	4628      	mov	r0, r5
   bbd08:	f7ff ffb3 	bl	bbc72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   bbd0c:	a803      	add	r0, sp, #12
   bbd0e:	f7fe fefe 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   bbd12:	3408      	adds	r4, #8
   bbd14:	e7eb      	b.n	bbcee <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   bbd16:	a801      	add	r0, sp, #4
   bbd18:	f7fe f9be 	bl	ba098 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bbd1c:	4628      	mov	r0, r5
   bbd1e:	b005      	add	sp, #20
   bbd20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bbd24 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   bbd24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   bbd28:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bbd2a:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   bbd2c:	b091      	sub	sp, #68	; 0x44
   bbd2e:	4606      	mov	r6, r0
   bbd30:	460f      	mov	r7, r1
   bbd32:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   bbd34:	b933      	cbnz	r3, bbd44 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   bbd36:	e9c0 3300 	strd	r3, r3, [r0]
   bbd3a:	6083      	str	r3, [r0, #8]
}
   bbd3c:	4630      	mov	r0, r6
   bbd3e:	b011      	add	sp, #68	; 0x44
   bbd40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   bbd44:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   bbd46:	7e0d      	ldrb	r5, [r1, #24]
   bbd48:	2d00      	cmp	r5, #0
   bbd4a:	d158      	bne.n	bbdfe <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   bbd4c:	2320      	movs	r3, #32
   bbd4e:	462a      	mov	r2, r5
   bbd50:	a803      	add	r0, sp, #12
   bbd52:	e9cd 3508 	strd	r3, r5, [sp, #32]
   bbd56:	f7fe fb2e 	bl	ba3b6 <_ZNK8particle7BleUuid8toStringEb>
   bbd5a:	9b03      	ldr	r3, [sp, #12]
   bbd5c:	9301      	str	r3, [sp, #4]
   bbd5e:	4b2b      	ldr	r3, [pc, #172]	; (bbe0c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   bbd60:	492b      	ldr	r1, [pc, #172]	; (bbe10 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   bbd62:	9300      	str	r3, [sp, #0]
   bbd64:	aa08      	add	r2, sp, #32
   bbd66:	462b      	mov	r3, r5
   bbd68:	2001      	movs	r0, #1
   bbd6a:	f7fd ff0b 	bl	b9b84 <log_message>
   bbd6e:	a803      	add	r0, sp, #12
   bbd70:	f001 f9b0 	bl	bd0d4 <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   bbd74:	231c      	movs	r3, #28
   bbd76:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   bbd7a:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   bbd7e:	8a9a      	ldrh	r2, [r3, #20]
   bbd80:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   bbd84:	8adb      	ldrh	r3, [r3, #22]
   bbd86:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   bbd8a:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   bbd8c:	4a21      	ldr	r2, [pc, #132]	; (bbe14 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   bbd8e:	8818      	ldrh	r0, [r3, #0]
   bbd90:	9500      	str	r5, [sp, #0]
   bbd92:	a908      	add	r1, sp, #32
   bbd94:	f7fd fc9c 	bl	b96d0 <hal_ble_gatt_client_discover_characteristics>
   bbd98:	2800      	cmp	r0, #0
   bbd9a:	db30      	blt.n	bbdfe <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   bbd9c:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   bbd9e:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   bbda2:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   bbda6:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   bbda8:	f1a4 0308 	sub.w	r3, r4, #8
   bbdac:	4599      	cmp	r9, r3
   bbdae:	d022      	beq.n	bbdf6 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   bbdb0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bbdb4:	89db      	ldrh	r3, [r3, #14]
   bbdb6:	2b00      	cmp	r3, #0
   bbdb8:	d0f5      	beq.n	bbda6 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   bbdba:	2210      	movs	r2, #16
   bbdbc:	2100      	movs	r1, #0
   bbdbe:	eb0d 0002 	add.w	r0, sp, r2
   bbdc2:	9503      	str	r5, [sp, #12]
   bbdc4:	f002 fcd1 	bl	be76a <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   bbdc8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bbdcc:	89d9      	ldrh	r1, [r3, #14]
   bbdce:	683b      	ldr	r3, [r7, #0]
   bbdd0:	aa03      	add	r2, sp, #12
   bbdd2:	8818      	ldrh	r0, [r3, #0]
   bbdd4:	9500      	str	r5, [sp, #0]
   bbdd6:	2313      	movs	r3, #19
   bbdd8:	f7fd fc98 	bl	b970c <hal_ble_gatt_client_read>
                if (len > 0) {
   bbddc:	2800      	cmp	r0, #0
   bbdde:	d0e2      	beq.n	bbda6 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   bbde0:	ab10      	add	r3, sp, #64	; 0x40
   bbde2:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   bbde4:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   bbde6:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   bbdea:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   bbdee:	303c      	adds	r0, #60	; 0x3c
   bbdf0:	f001 fa11 	bl	bd216 <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   bbdf4:	e7d7      	b.n	bbda6 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   bbdf6:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   bbdfa:	2201      	movs	r2, #1
   bbdfc:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   bbdfe:	4642      	mov	r2, r8
   bbe00:	4639      	mov	r1, r7
   bbe02:	4630      	mov	r0, r6
   bbe04:	f7ff ff62 	bl	bbccc <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   bbe08:	e798      	b.n	bbd3c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   bbe0a:	bf00      	nop
   bbe0c:	000c18f2 	.word	0x000c18f2
   bbe10:	000c17cf 	.word	0x000c17cf
   bbe14:	000bbfbd 	.word	0x000bbfbd

000bbe18 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   bbe18:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   bbe1a:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bbe1c:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   bbe1e:	b085      	sub	sp, #20
   bbe20:	4606      	mov	r6, r0
   bbe22:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   bbe24:	b92b      	cbnz	r3, bbe32 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   bbe26:	a801      	add	r0, sp, #4
   bbe28:	f7ff fe0a 	bl	bba40 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   bbe2c:	a801      	add	r0, sp, #4
   bbe2e:	f7fe fe7d 	bl	bab2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   bbe32:	682b      	ldr	r3, [r5, #0]
   bbe34:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   bbe38:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   bbe3c:	42bc      	cmp	r4, r7
   bbe3e:	d009      	beq.n	bbe54 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   bbe40:	4622      	mov	r2, r4
   bbe42:	4629      	mov	r1, r5
   bbe44:	a801      	add	r0, sp, #4
   bbe46:	f7ff ff6d 	bl	bbd24 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   bbe4a:	a801      	add	r0, sp, #4
   bbe4c:	f7fe fe80 	bl	bab50 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   bbe50:	3408      	adds	r4, #8
   bbe52:	e7f3      	b.n	bbe3c <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   bbe54:	4630      	mov	r0, r6
   bbe56:	4629      	mov	r1, r5
   bbe58:	f7ff fefa 	bl	bbc50 <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   bbe5c:	4630      	mov	r0, r6
   bbe5e:	b005      	add	sp, #20
   bbe60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bbe64 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bbe64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bbe68:	4605      	mov	r5, r0
   bbe6a:	b093      	sub	sp, #76	; 0x4c
    return address_;
   bbe6c:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   bbe6e:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bbe70:	460f      	mov	r7, r1
    return address_;
   bbe72:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bbe74:	4698      	mov	r8, r3
    return address_;
   bbe76:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   bbe78:	4b41      	ldr	r3, [pc, #260]	; (bbf80 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   bbe7a:	9304      	str	r3, [sp, #16]
    return address_;
   bbe7c:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   bbe7e:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   bbe80:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   bbe84:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   bbe88:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   bbe8c:	f7fe fcd8 	bl	ba840 <_ZN8particle14BleLocalDevice11getInstanceEv>
   bbe90:	4b3c      	ldr	r3, [pc, #240]	; (bbf84 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   bbe92:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   bbe94:	f7fe fcd4 	bl	ba840 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   bbe98:	6829      	ldr	r1, [r5, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   bbe9a:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   bbe9c:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   bbe9e:	464a      	mov	r2, r9
   bbea0:	a804      	add	r0, sp, #16
   bbea2:	f7fd fc3d 	bl	b9720 <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   bbea6:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   bbea8:	4604      	mov	r4, r0
   bbeaa:	b138      	cbz	r0, bbebc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   bbeac:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bbeae:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bbeb2:	801a      	strh	r2, [r3, #0]
}
   bbeb4:	4620      	mov	r0, r4
   bbeb6:	b013      	add	sp, #76	; 0x4c
   bbeb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   bbebc:	4639      	mov	r1, r7
   bbebe:	4628      	mov	r0, r5
   bbec0:	f7fe fc42 	bl	ba748 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
   bbec4:	a803      	add	r0, sp, #12
   bbec6:	f7fe f8d9 	bl	ba07c <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   bbeca:	f7fe fcb9 	bl	ba840 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   bbece:	6807      	ldr	r7, [r0, #0]
   bbed0:	4629      	mov	r1, r5
   bbed2:	3718      	adds	r7, #24
   bbed4:	4630      	mov	r0, r6
   bbed6:	f7fe fe10 	bl	baafa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   bbeda:	4631      	mov	r1, r6
   bbedc:	4638      	mov	r0, r7
   bbede:	f7ff f975 	bl	bb1cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bbee2:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   bbee4:	a80b      	add	r0, sp, #44	; 0x2c
   bbee6:	f7fe fe12 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbeea:	f04f 0920 	mov.w	r9, #32
   bbeee:	bb1f      	cbnz	r7, bbf38 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   bbef0:	4632      	mov	r2, r6
   bbef2:	4b25      	ldr	r3, [pc, #148]	; (bbf88 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
   bbef4:	4e25      	ldr	r6, [pc, #148]	; (bbf8c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   bbef6:	4926      	ldr	r1, [pc, #152]	; (bbf90 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   bbef8:	9300      	str	r3, [sp, #0]
   bbefa:	2032      	movs	r0, #50	; 0x32
   bbefc:	4623      	mov	r3, r4
   bbefe:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   bbf02:	f7fd fe3f 	bl	b9b84 <log_message>
   bbf06:	6830      	ldr	r0, [r6, #0]
   bbf08:	f7fd fc7c 	bl	b9804 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bbf0c:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   bbf0e:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bbf12:	4621      	mov	r1, r4
   bbf14:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   bbf16:	4c1f      	ldr	r4, [pc, #124]	; (bbf94 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bbf18:	f7fd fbbc 	bl	b9694 <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   bbf1c:	6830      	ldr	r0, [r6, #0]
   bbf1e:	f7fd fc69 	bl	b97f4 <os_mutex_recursive_lock>
        locked_ = true;
   bbf22:	2301      	movs	r3, #1
   bbf24:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   bbf28:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bbf2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bbf2e:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   bbf30:	a803      	add	r0, sp, #12
   bbf32:	f7fe f8b1 	bl	ba098 <_ZN8particle3ble13WiringBleLockD1Ev>
   bbf36:	e7bd      	b.n	bbeb4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   bbf38:	a803      	add	r0, sp, #12
   bbf3a:	f7fe f8ad 	bl	ba098 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   bbf3e:	4b16      	ldr	r3, [pc, #88]	; (bbf98 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   bbf40:	9300      	str	r3, [sp, #0]
   bbf42:	4913      	ldr	r1, [pc, #76]	; (bbf90 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   bbf44:	4623      	mov	r3, r4
   bbf46:	4632      	mov	r2, r6
   bbf48:	2001      	movs	r0, #1
   bbf4a:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   bbf4e:	f7fd fe19 	bl	b9b84 <log_message>
    if (automatic) {
   bbf52:	f1b8 0f00 	cmp.w	r8, #0
   bbf56:	d0ad      	beq.n	bbeb4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   bbf58:	4629      	mov	r1, r5
   bbf5a:	4630      	mov	r0, r6
   bbf5c:	f7ff ff5c 	bl	bbe18 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   bbf60:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   bbf64:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   bbf68:	42bd      	cmp	r5, r7
   bbf6a:	d005      	beq.n	bbf78 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   bbf6c:	4628      	mov	r0, r5
   bbf6e:	2101      	movs	r1, #1
   bbf70:	f7fe fb60 	bl	ba634 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   bbf74:	3508      	adds	r5, #8
   bbf76:	e7f7      	b.n	bbf68 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   bbf78:	4630      	mov	r0, r6
   bbf7a:	f7fe fde9 	bl	bab50 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bbf7e:	e799      	b.n	bbeb4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   bbf80:	00180003 	.word	0x00180003
   bbf84:	000bb285 	.word	0x000bb285
   bbf88:	000c1924 	.word	0x000c1924
   bbf8c:	2003e65c 	.word	0x2003e65c
   bbf90:	000c17cf 	.word	0x000c17cf
   bbf94:	fffffefc 	.word	0xfffffefc
   bbf98:	000c1940 	.word	0x000c1940

000bbf9c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   bbf9c:	b513      	push	{r0, r1, r4, lr}
   bbf9e:	4604      	mov	r4, r0
   bbfa0:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   bbfa4:	f7fe fb9c 	bl	ba6e0 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   bbfa8:	9b00      	ldr	r3, [sp, #0]
   bbfaa:	9901      	ldr	r1, [sp, #4]
   bbfac:	2200      	movs	r2, #0
   bbfae:	4620      	mov	r0, r4
   bbfb0:	f7ff ff58 	bl	bbe64 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   bbfb4:	4620      	mov	r0, r4
   bbfb6:	b002      	add	sp, #8
   bbfb8:	bd10      	pop	{r4, pc}
	...

000bbfbc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bbfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   bbfc0:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bbfc2:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   bbfc4:	2600      	movs	r6, #0
   bbfc6:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   bbfca:	4b66      	ldr	r3, [pc, #408]	; (bc164 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   bbfcc:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bbfce:	4605      	mov	r5, r0
   bbfd0:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   bbfd2:	4633      	mov	r3, r6
   bbfd4:	4964      	ldr	r1, [pc, #400]	; (bc168 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   bbfd6:	f8df 9194 	ldr.w	r9, [pc, #404]	; bc16c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   bbfda:	f8df 818c 	ldr.w	r8, [pc, #396]	; bc168 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bbfde:	f8df a190 	ldr.w	sl, [pc, #400]	; bc170 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   bbfe2:	aa0c      	add	r2, sp, #48	; 0x30
   bbfe4:	2001      	movs	r0, #1
   bbfe6:	f7fd fdcd 	bl	b9b84 <log_message>
        for (size_t i = 0; i < event->count; i++) {
   bbfea:	682b      	ldr	r3, [r5, #0]
   bbfec:	42b3      	cmp	r3, r6
   bbfee:	f240 80b5 	bls.w	bc15c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   bbff2:	a803      	add	r0, sp, #12
   bbff4:	f7fe fa98 	bl	ba528 <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   bbff8:	a805      	add	r0, sp, #20
   bbffa:	f7fe fb55 	bl	ba6a8 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   bbffe:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   bc002:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   bc004:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   bc006:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   bc00a:	445b      	add	r3, fp
        this->size = halHandles.size;
   bc00c:	8bd9      	ldrh	r1, [r3, #30]
   bc00e:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   bc010:	8c19      	ldrh	r1, [r3, #32]
   bc012:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   bc014:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   bc016:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   bc018:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   bc01a:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   bc01c:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   bc01e:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   bc020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   bc022:	8253      	strh	r3, [r2, #18]
   bc024:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   bc028:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   bc02c:	429a      	cmp	r2, r3
   bc02e:	d07d      	beq.n	bc12c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   bc030:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   bc032:	8ac4      	ldrh	r4, [r0, #22]
   bc034:	428c      	cmp	r4, r1
   bc036:	d377      	bcc.n	bc128 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   bc038:	8a84      	ldrh	r4, [r0, #20]
   bc03a:	428c      	cmp	r4, r1
   bc03c:	d874      	bhi.n	bc128 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bc03e:	6859      	ldr	r1, [r3, #4]
   bc040:	9005      	str	r0, [sp, #20]
   bc042:	a806      	add	r0, sp, #24
   bc044:	f7fd fff4 	bl	ba030 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   bc048:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   bc04c:	f8dd e00c 	ldr.w	lr, [sp, #12]
   bc050:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bc054:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   bc058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc05a:	f8dc 3000 	ldr.w	r3, [ip]
   bc05e:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   bc060:	892b      	ldrh	r3, [r5, #8]
   bc062:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   bc066:	686b      	ldr	r3, [r5, #4]
   bc068:	9c03      	ldr	r4, [sp, #12]
   bc06a:	445b      	add	r3, fp
   bc06c:	7e5b      	ldrb	r3, [r3, #25]
   bc06e:	f013 0f02 	tst.w	r3, #2
   bc072:	d16e      	bne.n	bc152 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   bc074:	686b      	ldr	r3, [r5, #4]
   bc076:	445b      	add	r3, fp
   bc078:	7e5b      	ldrb	r3, [r3, #25]
   bc07a:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   bc07c:	bf42      	ittt	mi
   bc07e:	7923      	ldrbmi	r3, [r4, #4]
   bc080:	f043 0304 	orrmi.w	r3, r3, #4
   bc084:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   bc086:	686b      	ldr	r3, [r5, #4]
   bc088:	445b      	add	r3, fp
   bc08a:	7e5b      	ldrb	r3, [r3, #25]
   bc08c:	0719      	lsls	r1, r3, #28
   bc08e:	bf42      	ittt	mi
   bc090:	7923      	ldrbmi	r3, [r4, #4]
   bc092:	f043 0308 	orrmi.w	r3, r3, #8
   bc096:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   bc098:	686b      	ldr	r3, [r5, #4]
   bc09a:	445b      	add	r3, fp
   bc09c:	7e5b      	ldrb	r3, [r3, #25]
   bc09e:	06da      	lsls	r2, r3, #27
   bc0a0:	bf42      	ittt	mi
   bc0a2:	7923      	ldrbmi	r3, [r4, #4]
   bc0a4:	f043 0310 	orrmi.w	r3, r3, #16
   bc0a8:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   bc0aa:	686b      	ldr	r3, [r5, #4]
   bc0ac:	445b      	add	r3, fp
   bc0ae:	aa07      	add	r2, sp, #28
   bc0b0:	7e5b      	ldrb	r3, [r3, #25]
   bc0b2:	069b      	lsls	r3, r3, #26
   bc0b4:	bf42      	ittt	mi
   bc0b6:	7923      	ldrbmi	r3, [r4, #4]
   bc0b8:	f043 0320 	orrmi.w	r3, r3, #32
   bc0bc:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   bc0be:	686b      	ldr	r3, [r5, #4]
   bc0c0:	449b      	add	fp, r3
   bc0c2:	f10b 0304 	add.w	r3, fp, #4
   bc0c6:	4696      	mov	lr, r2
   bc0c8:	f10b 0b14 	add.w	fp, fp, #20
   bc0cc:	6818      	ldr	r0, [r3, #0]
   bc0ce:	6859      	ldr	r1, [r3, #4]
   bc0d0:	4694      	mov	ip, r2
   bc0d2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   bc0d6:	3308      	adds	r3, #8
   bc0d8:	455b      	cmp	r3, fp
   bc0da:	4662      	mov	r2, ip
   bc0dc:	d1f6      	bne.n	bc0cc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   bc0de:	6818      	ldr	r0, [r3, #0]
   bc0e0:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   bc0e4:	4671      	mov	r1, lr
   bc0e6:	a80c      	add	r0, sp, #48	; 0x30
   bc0e8:	f7fe f81e 	bl	ba128 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   bc0ec:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   bc0f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bc0f4:	3414      	adds	r4, #20
   bc0f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc0f8:	f8dc 3000 	ldr.w	r3, [ip]
   bc0fc:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   bc0fe:	a903      	add	r1, sp, #12
   bc100:	a80c      	add	r0, sp, #48	; 0x30
   bc102:	f7fe fce2 	bl	baaca <_ZN8particle17BleCharacteristicC1ERKS0_>
   bc106:	a90c      	add	r1, sp, #48	; 0x30
   bc108:	f107 0018 	add.w	r0, r7, #24
   bc10c:	f7ff fdb1 	bl	bbc72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bc110:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bc112:	a80d      	add	r0, sp, #52	; 0x34
   bc114:	f7fe fcfb 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc118:	b99c      	cbnz	r4, bc142 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bc11a:	2320      	movs	r3, #32
   bc11c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   bc120:	f8cd a000 	str.w	sl, [sp]
   bc124:	4623      	mov	r3, r4
   bc126:	e007      	b.n	bc138 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   bc128:	3308      	adds	r3, #8
   bc12a:	e77f      	b.n	bc02c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   bc12c:	2420      	movs	r4, #32
   bc12e:	2300      	movs	r3, #0
   bc130:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   bc134:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bc138:	aa0c      	add	r2, sp, #48	; 0x30
   bc13a:	4641      	mov	r1, r8
   bc13c:	2032      	movs	r0, #50	; 0x32
   bc13e:	f7fd fd21 	bl	b9b84 <log_message>
   bc142:	a806      	add	r0, sp, #24
   bc144:	f7fe fce3 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc148:	a804      	add	r0, sp, #16
   bc14a:	f7fe fce0 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   bc14e:	3601      	adds	r6, #1
   bc150:	e74b      	b.n	bbfea <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   bc152:	7923      	ldrb	r3, [r4, #4]
   bc154:	f043 0302 	orr.w	r3, r3, #2
   bc158:	7123      	strb	r3, [r4, #4]
   bc15a:	e78b      	b.n	bc074 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   bc15c:	b015      	add	sp, #84	; 0x54
   bc15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc162:	bf00      	nop
   bc164:	000c195d 	.word	0x000c195d
   bc168:	000c17cf 	.word	0x000c17cf
   bc16c:	000c1978 	.word	0x000c1978
   bc170:	000c19a7 	.word	0x000c19a7

000bc174 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bc174:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bc176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc178:	4604      	mov	r4, r0
   bc17a:	460d      	mov	r5, r1
   bc17c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bc17e:	d914      	bls.n	bc1aa <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bc180:	4290      	cmp	r0, r2
   bc182:	d213      	bcs.n	bc1ac <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bc184:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   bc188:	1a75      	subs	r5, r6, r1
   bc18a:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   bc18e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bc190:	42b7      	cmp	r7, r6
   bc192:	d018      	beq.n	bc1c6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bc194:	b11c      	cbz	r4, bc19e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bc196:	4631      	mov	r1, r6
   bc198:	4620      	mov	r0, r4
   bc19a:	f7fe feff 	bl	baf9c <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   bc19e:	4630      	mov	r0, r6
   bc1a0:	f7fe fbbc 	bl	ba91c <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   bc1a4:	3e24      	subs	r6, #36	; 0x24
   bc1a6:	3c24      	subs	r4, #36	; 0x24
   bc1a8:	e7f2      	b.n	bc190 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bc1aa:	d00c      	beq.n	bc1c6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bc1ac:	42b5      	cmp	r5, r6
   bc1ae:	d00a      	beq.n	bc1c6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bc1b0:	b11c      	cbz	r4, bc1ba <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bc1b2:	4629      	mov	r1, r5
   bc1b4:	4620      	mov	r0, r4
   bc1b6:	f7fe fef1 	bl	baf9c <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   bc1ba:	4628      	mov	r0, r5
   bc1bc:	f7fe fbae 	bl	ba91c <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   bc1c0:	3524      	adds	r5, #36	; 0x24
   bc1c2:	3424      	adds	r4, #36	; 0x24
   bc1c4:	e7f2      	b.n	bc1ac <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bc1c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc1c8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bc1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   bc1ca:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bc1cc:	4605      	mov	r5, r0
        if (n > 0) {
   bc1ce:	dd13      	ble.n	bc1f8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   bc1d0:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   bc1d2:	fb07 f006 	mul.w	r0, r7, r6
   bc1d6:	f7fd fdb1 	bl	b9d3c <malloc>
            if (!d) {
   bc1da:	4604      	mov	r4, r0
   bc1dc:	b158      	cbz	r0, bc1f6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   bc1de:	e9d5 1200 	ldrd	r1, r2, [r5]
   bc1e2:	fb07 1202 	mla	r2, r7, r2, r1
   bc1e6:	f7ff ffc5 	bl	bc174 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bc1ea:	6828      	ldr	r0, [r5, #0]
   bc1ec:	f7fd fdae 	bl	b9d4c <free>
        data_ = d;
   bc1f0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bc1f2:	60ae      	str	r6, [r5, #8]
        return true;
   bc1f4:	2001      	movs	r0, #1
    }
   bc1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   bc1f8:	2400      	movs	r4, #0
   bc1fa:	e7f6      	b.n	bc1ea <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000bc1fc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   bc1fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc200:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   bc202:	ad01      	add	r5, sp, #4
   bc204:	4606      	mov	r6, r0
   bc206:	4628      	mov	r0, r5
   bc208:	460c      	mov	r4, r1
   bc20a:	f7fd ff72 	bl	ba0f2 <_ZN8particle10BleAddressC1Ev>
   bc20e:	a803      	add	r0, sp, #12
   bc210:	f7fe ff9f 	bl	bb152 <_ZN8particle18BleAdvertisingDataC1Ev>
   bc214:	a806      	add	r0, sp, #24
   bc216:	f7fe ff9c 	bl	bb152 <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   bc21a:	6930      	ldr	r0, [r6, #16]
   bc21c:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   bc21e:	89f2      	ldrh	r2, [r6, #14]
   bc220:	ab13      	add	r3, sp, #76	; 0x4c
   bc222:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   bc224:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   bc228:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   bc22a:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   bc22c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   bc230:	a806      	add	r0, sp, #24
   bc232:	f7fe ff02 	bl	bb03a <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   bc236:	89b2      	ldrh	r2, [r6, #12]
   bc238:	6871      	ldr	r1, [r6, #4]
   bc23a:	a803      	add	r0, sp, #12
   bc23c:	f7fe fefd 	bl	bb03a <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   bc240:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   bc244:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   bc246:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   bc248:	d003      	beq.n	bc252 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   bc24a:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   bc24e:	429a      	cmp	r2, r3
   bc250:	db5c      	blt.n	bc30c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   bc252:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   bc256:	2b7f      	cmp	r3, #127	; 0x7f
   bc258:	d003      	beq.n	bc262 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   bc25a:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   bc25e:	429a      	cmp	r2, r3
   bc260:	dc54      	bgt.n	bc30c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   bc262:	f104 0150 	add.w	r1, r4, #80	; 0x50
   bc266:	4638      	mov	r0, r7
   bc268:	f7fe fd60 	bl	bad2c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   bc26c:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   bc26e:	2b00      	cmp	r3, #0
   bc270:	dd52      	ble.n	bc318 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   bc272:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   bc274:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   bc278:	45b1      	cmp	r9, r6
   bc27a:	d050      	beq.n	bc31e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   bc27c:	4630      	mov	r0, r6
   bc27e:	4629      	mov	r1, r5
   bc280:	f7fd ff23 	bl	ba0ca <_ZNK8particle10BleAddresseqERKS0_>
   bc284:	3608      	adds	r6, #8
   bc286:	4680      	mov	r8, r0
   bc288:	2800      	cmp	r0, #0
   bc28a:	d0f5      	beq.n	bc278 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   bc28c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bc28e:	f7fd fd5d 	bl	b9d4c <free>
        if (!delegator->filterByRssi(result) ||
   bc292:	f1b8 0f00 	cmp.w	r8, #0
   bc296:	d039      	beq.n	bc30c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   bc298:	4629      	mov	r1, r5
   bc29a:	4620      	mov	r0, r4
   bc29c:	f7fe fd09 	bl	bacb2 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   bc2a0:	b3a0      	cbz	r0, bc30c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   bc2a2:	4629      	mov	r1, r5
   bc2a4:	4620      	mov	r0, r4
   bc2a6:	f7ff fa68 	bl	bb77a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   bc2aa:	4606      	mov	r6, r0
   bc2ac:	b370      	cbz	r0, bc30c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   bc2ae:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   bc2b2:	4638      	mov	r0, r7
   bc2b4:	f7fe fd85 	bl	badc2 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   bc2b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc2ba:	2b00      	cmp	r3, #0
   bc2bc:	dd12      	ble.n	bc2e4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   bc2be:	a806      	add	r0, sp, #24
   bc2c0:	f7fe f8df 	bl	ba482 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   bc2c4:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   bc2c6:	a803      	add	r0, sp, #12
   bc2c8:	f7fe f8db 	bl	ba482 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   bc2cc:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   bc2d0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   bc2d4:	429a      	cmp	r2, r3
   bc2d6:	d025      	beq.n	bc324 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   bc2d8:	f833 1b02 	ldrh.w	r1, [r3], #2
   bc2dc:	4588      	cmp	r8, r1
   bc2de:	d001      	beq.n	bc2e4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   bc2e0:	4288      	cmp	r0, r1
   bc2e2:	d1f7      	bne.n	bc2d4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   bc2e4:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bc2e6:	f7fd fd31 	bl	b9d4c <free>
              !delegator->filterByServiceUUID(result) ||
   bc2ea:	b17e      	cbz	r6, bc30c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   bc2ec:	4629      	mov	r1, r5
   bc2ee:	4620      	mov	r0, r4
   bc2f0:	f7fe fd9c 	bl	bae2c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   bc2f4:	b150      	cbz	r0, bc30c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   bc2f6:	6a23      	ldr	r3, [r4, #32]
   bc2f8:	b1b3      	cbz	r3, bc328 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   bc2fa:	6963      	ldr	r3, [r4, #20]
   bc2fc:	9513      	str	r5, [sp, #76]	; 0x4c
   bc2fe:	3301      	adds	r3, #1
   bc300:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc302:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc304:	4639      	mov	r1, r7
   bc306:	f104 0018 	add.w	r0, r4, #24
   bc30a:	4798      	blx	r3
            return;
   bc30c:	4628      	mov	r0, r5
   bc30e:	f7fe fb05 	bl	ba91c <_ZN8particle13BleScanResultD1Ev>
    }
   bc312:	b01d      	add	sp, #116	; 0x74
   bc314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   bc318:	f04f 0801 	mov.w	r8, #1
   bc31c:	e7b6      	b.n	bc28c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   bc31e:	f04f 0800 	mov.w	r8, #0
   bc322:	e7b3      	b.n	bc28c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   bc324:	2600      	movs	r6, #0
   bc326:	e7dd      	b.n	bc2e4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   bc328:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   bc32c:	f1b8 0f00 	cmp.w	r8, #0
   bc330:	d007      	beq.n	bc342 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   bc332:	6963      	ldr	r3, [r4, #20]
   bc334:	3301      	adds	r3, #1
   bc336:	6163      	str	r3, [r4, #20]
   bc338:	4629      	mov	r1, r5
   bc33a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   bc33c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bc340:	e7e3      	b.n	bc30a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   bc342:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   bc346:	f1bc 0f00 	cmp.w	ip, #0
   bc34a:	d025      	beq.n	bc398 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   bc34c:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bc34e:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   bc350:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bc352:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   bc354:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bc356:	d8d9      	bhi.n	bc30c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   bc358:	2224      	movs	r2, #36	; 0x24
   bc35a:	4353      	muls	r3, r2
    address_ = addr.address_;
   bc35c:	462a      	mov	r2, r5
   bc35e:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   bc360:	3b24      	subs	r3, #36	; 0x24
   bc362:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   bc366:	f84c 0003 	str.w	r0, [ip, r3]
   bc36a:	6071      	str	r1, [r6, #4]
class BleScanResult {
   bc36c:	f106 0008 	add.w	r0, r6, #8
   bc370:	a903      	add	r1, sp, #12
   bc372:	f7fe fe2a 	bl	bafca <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   bc376:	a906      	add	r1, sp, #24
   bc378:	f106 0014 	add.w	r0, r6, #20
   bc37c:	f7fe fe25 	bl	bafca <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   bc380:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   bc384:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   bc388:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   bc38c:	429a      	cmp	r2, r3
   bc38e:	d3bd      	bcc.n	bc30c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   bc390:	4640      	mov	r0, r8
   bc392:	f7fd f975 	bl	b9680 <hal_ble_gap_stop_scan>
   bc396:	e7b9      	b.n	bc30c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   bc398:	e895 0003 	ldmia.w	r5, {r0, r1}
   bc39c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   bc3a0:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   bc3a4:	a903      	add	r1, sp, #12
   bc3a6:	a80c      	add	r0, sp, #48	; 0x30
   bc3a8:	f7fe fddb 	bl	baf62 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   bc3ac:	a906      	add	r1, sp, #24
   bc3ae:	a80f      	add	r0, sp, #60	; 0x3c
   bc3b0:	f7fe fdd7 	bl	baf62 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   bc3b4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   bc3b8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   bc3bc:	4641      	mov	r1, r8
   bc3be:	4638      	mov	r0, r7
   bc3c0:	6866      	ldr	r6, [r4, #4]
   bc3c2:	f7fe fdeb 	bl	baf9c <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc3c6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bc3ca:	4299      	cmp	r1, r3
   bc3cc:	da10      	bge.n	bc3f0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   bc3ce:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bc3d0:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   bc3d2:	2224      	movs	r2, #36	; 0x24
   bc3d4:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   bc3d8:	f106 0024 	add.w	r0, r6, #36	; 0x24
   bc3dc:	fb02 3201 	mla	r2, r2, r1, r3
   bc3e0:	4631      	mov	r1, r6
   bc3e2:	f7ff fec7 	bl	bc174 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bc3e6:	b986      	cbnz	r6, bc40a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   bc3e8:	6863      	ldr	r3, [r4, #4]
   bc3ea:	3301      	adds	r3, #1
   bc3ec:	6063      	str	r3, [r4, #4]
    return true;
   bc3ee:	e005      	b.n	bc3fc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bc3f0:	3101      	adds	r1, #1
   bc3f2:	4620      	mov	r0, r4
   bc3f4:	f7ff fee8 	bl	bc1c8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bc3f8:	2800      	cmp	r0, #0
   bc3fa:	d1e8      	bne.n	bc3ce <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   bc3fc:	4638      	mov	r0, r7
   bc3fe:	f7fe fa8d 	bl	ba91c <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   bc402:	4640      	mov	r0, r8
   bc404:	f7fe fa8a 	bl	ba91c <_ZN8particle13BleScanResultD1Ev>
   bc408:	e780      	b.n	bc30c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   bc40a:	4639      	mov	r1, r7
   bc40c:	4630      	mov	r0, r6
   bc40e:	f7fe fdc5 	bl	baf9c <_ZN8particle13BleScanResultC1EOS0_>
   bc412:	e7e9      	b.n	bc3e8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000bc414 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   bc414:	4802      	ldr	r0, [pc, #8]	; (bc420 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bc416:	2300      	movs	r3, #0
   bc418:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   bc41a:	f7fd b9e3 	b.w	b97e4 <os_mutex_recursive_create>
   bc41e:	bf00      	nop
   bc420:	2003e65c 	.word	0x2003e65c

000bc424 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bc424:	2200      	movs	r2, #0
   bc426:	6840      	ldr	r0, [r0, #4]
   bc428:	4611      	mov	r1, r2
   bc42a:	f7fd bc3f 	b.w	b9cac <network_ready>

000bc42e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bc42e:	2200      	movs	r2, #0
   bc430:	6840      	ldr	r0, [r0, #4]
   bc432:	4611      	mov	r1, r2
   bc434:	f7fd bc5a 	b.w	b9cec <network_listening>

000bc438 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bc438:	2200      	movs	r2, #0
   bc43a:	6840      	ldr	r0, [r0, #4]
   bc43c:	4611      	mov	r1, r2
   bc43e:	f7fd bc65 	b.w	b9d0c <network_get_listen_timeout>

000bc442 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bc442:	6840      	ldr	r0, [r0, #4]
   bc444:	2200      	movs	r2, #0
   bc446:	f7fd bc59 	b.w	b9cfc <network_set_listen_timeout>

000bc44a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bc44a:	6840      	ldr	r0, [r0, #4]
   bc44c:	2200      	movs	r2, #0
   bc44e:	f081 0101 	eor.w	r1, r1, #1
   bc452:	f7fd bc43 	b.w	b9cdc <network_listen>

000bc456 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bc456:	2300      	movs	r3, #0
   bc458:	6840      	ldr	r0, [r0, #4]
   bc45a:	461a      	mov	r2, r3
   bc45c:	4619      	mov	r1, r3
   bc45e:	f7fd bc35 	b.w	b9ccc <network_off>

000bc462 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bc462:	2300      	movs	r3, #0
   bc464:	6840      	ldr	r0, [r0, #4]
   bc466:	461a      	mov	r2, r3
   bc468:	4619      	mov	r1, r3
   bc46a:	f7fd bc27 	b.w	b9cbc <network_on>

000bc46e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bc46e:	2200      	movs	r2, #0
   bc470:	6840      	ldr	r0, [r0, #4]
   bc472:	4611      	mov	r1, r2
   bc474:	f7fd bc0a 	b.w	b9c8c <network_connecting>

000bc478 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bc478:	6840      	ldr	r0, [r0, #4]
   bc47a:	2200      	movs	r2, #0
   bc47c:	2102      	movs	r1, #2
   bc47e:	f7fd bc0d 	b.w	b9c9c <network_disconnect>

000bc482 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bc482:	2300      	movs	r3, #0
   bc484:	6840      	ldr	r0, [r0, #4]
   bc486:	461a      	mov	r2, r3
   bc488:	f7fd bbf8 	b.w	b9c7c <network_connect>

000bc48c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bc48c:	4b08      	ldr	r3, [pc, #32]	; (bc4b0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bc48e:	b510      	push	{r4, lr}
   bc490:	2428      	movs	r4, #40	; 0x28
   bc492:	4622      	mov	r2, r4
   bc494:	4618      	mov	r0, r3
   bc496:	2100      	movs	r1, #0
   bc498:	f002 f967 	bl	be76a <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bc49c:	4b05      	ldr	r3, [pc, #20]	; (bc4b4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bc49e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bc4a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc4a4:	6042      	str	r2, [r0, #4]
   bc4a6:	2204      	movs	r2, #4
   bc4a8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bc4aa:	4a03      	ldr	r2, [pc, #12]	; (bc4b8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bc4ac:	601a      	str	r2, [r3, #0]
   bc4ae:	bd10      	pop	{r4, pc}
   bc4b0:	2003e66c 	.word	0x2003e66c
   bc4b4:	2003e664 	.word	0x2003e664
   bc4b8:	000c1a50 	.word	0x000c1a50

000bc4bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bc4bc:	4770      	bx	lr

000bc4be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bc4be:	2000      	movs	r0, #0
   bc4c0:	4770      	bx	lr

000bc4c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bc4c2:	b510      	push	{r4, lr}
   bc4c4:	2110      	movs	r1, #16
   bc4c6:	4604      	mov	r4, r0
   bc4c8:	f7f7 fde9 	bl	b409e <_ZdlPvj>
   bc4cc:	4620      	mov	r0, r4
   bc4ce:	bd10      	pop	{r4, pc}

000bc4d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bc4d0:	b508      	push	{r3, lr}
      { delete this; }
   bc4d2:	f7ff fff6 	bl	bc4c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bc4d6:	bd08      	pop	{r3, pc}

000bc4d8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bc4d8:	b530      	push	{r4, r5, lr}
        type_(type) {
   bc4da:	2200      	movs	r2, #0
   bc4dc:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bc4e0:	6002      	str	r2, [r0, #0]
   bc4e2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   bc4e4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bc4e6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bc4e8:	680c      	ldr	r4, [r1, #0]
   bc4ea:	8085      	strh	r5, [r0, #4]
   bc4ec:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bc4ee:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bc4f0:	bd30      	pop	{r4, r5, pc}

000bc4f2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bc4f2:	b510      	push	{r4, lr}
   bc4f4:	4604      	mov	r4, r0
    free((void*)msg_);
   bc4f6:	6800      	ldr	r0, [r0, #0]
   bc4f8:	f7fd fc28 	bl	b9d4c <free>
}
   bc4fc:	4620      	mov	r0, r4
   bc4fe:	bd10      	pop	{r4, pc}

000bc500 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bc500:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bc502:	68c4      	ldr	r4, [r0, #12]
   bc504:	b1f4      	cbz	r4, bc544 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bc506:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bc508:	2b02      	cmp	r3, #2
   bc50a:	d103      	bne.n	bc514 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bc50c:	f104 000c 	add.w	r0, r4, #12
   bc510:	f7ff ffef 	bl	bc4f2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bc514:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bc516:	b135      	cbz	r5, bc526 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bc518:	4628      	mov	r0, r5
   bc51a:	f7f8 f82d 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
   bc51e:	2110      	movs	r1, #16
   bc520:	4628      	mov	r0, r5
   bc522:	f7f7 fdbc 	bl	b409e <_ZdlPvj>
   bc526:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bc528:	b135      	cbz	r5, bc538 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bc52a:	4628      	mov	r0, r5
   bc52c:	f7f8 f824 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
   bc530:	2110      	movs	r1, #16
   bc532:	4628      	mov	r0, r5
   bc534:	f7f7 fdb3 	bl	b409e <_ZdlPvj>
   bc538:	4620      	mov	r0, r4
   bc53a:	2114      	movs	r1, #20
   bc53c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc540:	f7f7 bdad 	b.w	b409e <_ZdlPvj>
   bc544:	bd38      	pop	{r3, r4, r5, pc}

000bc546 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bc546:	680b      	ldr	r3, [r1, #0]
   bc548:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bc54a:	684b      	ldr	r3, [r1, #4]
   bc54c:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bc54e:	b113      	cbz	r3, bc556 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bc550:	685a      	ldr	r2, [r3, #4]
   bc552:	3201      	adds	r2, #1
   bc554:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bc556:	4770      	bx	lr

000bc558 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bc558:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc55a:	4604      	mov	r4, r0
   bc55c:	4668      	mov	r0, sp
   bc55e:	460d      	mov	r5, r1
   bc560:	f7ff fff1 	bl	bc546 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc564:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bc566:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc568:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bc56a:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bc56c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bc56e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bc570:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   bc572:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bc574:	f7fe facb 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bc578:	b135      	cbz	r5, bc588 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bc57a:	1d28      	adds	r0, r5, #4
   bc57c:	f7fe fac7 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc580:	2108      	movs	r1, #8
   bc582:	4628      	mov	r0, r5
   bc584:	f7f7 fd8b 	bl	b409e <_ZdlPvj>
        return p;
    }
   bc588:	4620      	mov	r0, r4
   bc58a:	b003      	add	sp, #12
   bc58c:	bd30      	pop	{r4, r5, pc}

000bc58e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bc58e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bc590:	b510      	push	{r4, lr}
      if (_M_empty())
   bc592:	b90a      	cbnz	r2, bc598 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bc594:	f001 fa19 	bl	bd9ca <_ZSt25__throw_bad_function_callv>
    }
   bc598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc59c:	68c3      	ldr	r3, [r0, #12]
   bc59e:	4718      	bx	r3

000bc5a0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bc5a0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bc5a2:	6800      	ldr	r0, [r0, #0]
   bc5a4:	f100 0110 	add.w	r1, r0, #16
   bc5a8:	f7ff fff1 	bl	bc58e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bc5ac:	bd08      	pop	{r3, pc}

000bc5ae <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bc5ae:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bc5b0:	b510      	push	{r4, lr}
      if (_M_empty())
   bc5b2:	b90a      	cbnz	r2, bc5b8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bc5b4:	f001 fa09 	bl	bd9ca <_ZSt25__throw_bad_function_callv>
    }
   bc5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc5bc:	68c3      	ldr	r3, [r0, #12]
   bc5be:	4718      	bx	r3

000bc5c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bc5c0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bc5c2:	6800      	ldr	r0, [r0, #0]
   bc5c4:	f100 0110 	add.w	r1, r0, #16
   bc5c8:	f7ff fff1 	bl	bc5ae <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bc5cc:	bd08      	pop	{r3, pc}
	...

000bc5d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bc5d0:	b538      	push	{r3, r4, r5, lr}
   bc5d2:	2300      	movs	r3, #0
   bc5d4:	4604      	mov	r4, r0
   bc5d6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc5d8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bc5da:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc5dc:	f7f7 fd5b 	bl	b4096 <_Znwj>
   bc5e0:	b128      	cbz	r0, bc5ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bc5e2:	2301      	movs	r3, #1
   bc5e4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bc5e8:	4b02      	ldr	r3, [pc, #8]	; (bc5f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bc5ea:	6003      	str	r3, [r0, #0]
   bc5ec:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc5ee:	6020      	str	r0, [r4, #0]
	}
   bc5f0:	4620      	mov	r0, r4
   bc5f2:	bd38      	pop	{r3, r4, r5, pc}
   bc5f4:	000c1a8c 	.word	0x000c1a8c

000bc5f8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bc5f8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bc5fa:	2300      	movs	r3, #0
   bc5fc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bc5fe:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bc600:	4604      	mov	r4, r0
   bc602:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bc604:	b12b      	cbz	r3, bc612 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bc606:	2202      	movs	r2, #2
   bc608:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bc60a:	68eb      	ldr	r3, [r5, #12]
   bc60c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bc60e:	68ab      	ldr	r3, [r5, #8]
   bc610:	60a3      	str	r3, [r4, #8]
    }
   bc612:	4620      	mov	r0, r4
   bc614:	bd38      	pop	{r3, r4, r5, pc}
	...

000bc618 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bc618:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc61a:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   bc61c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bc61e:	4668      	mov	r0, sp
   bc620:	f7ff ff5a 	bl	bc4d8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bc624:	f04f 0302 	mov.w	r3, #2
   bc628:	e8d4 2f4f 	ldrexb	r2, [r4]
   bc62c:	2a00      	cmp	r2, #0
   bc62e:	d103      	bne.n	bc638 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bc630:	e8c4 3f41 	strexb	r1, r3, [r4]
   bc634:	2900      	cmp	r1, #0
   bc636:	d1f7      	bne.n	bc628 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bc638:	d125      	bne.n	bc686 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bc63a:	f104 050c 	add.w	r5, r4, #12
   bc63e:	4669      	mov	r1, sp
   bc640:	4628      	mov	r0, r5
   bc642:	f7ff ff49 	bl	bc4d8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bc646:	f3bf 8f5b 	dmb	ish
   bc64a:	2301      	movs	r3, #1
   bc64c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bc64e:	2000      	movs	r0, #0
   bc650:	f104 0308 	add.w	r3, r4, #8
   bc654:	f3bf 8f5b 	dmb	ish
   bc658:	e853 6f00 	ldrex	r6, [r3]
   bc65c:	e843 0200 	strex	r2, r0, [r3]
   bc660:	2a00      	cmp	r2, #0
   bc662:	d1f9      	bne.n	bc658 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bc664:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bc668:	b16e      	cbz	r6, bc686 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bc66a:	f7fd faab 	bl	b9bc4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bc66e:	b178      	cbz	r0, bc690 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bc670:	4629      	mov	r1, r5
   bc672:	4630      	mov	r0, r6
   bc674:	f7ff ff8b 	bl	bc58e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bc678:	4630      	mov	r0, r6
   bc67a:	f7f7 ff7d 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bc67e:	2110      	movs	r1, #16
   bc680:	4630      	mov	r0, r6
   bc682:	f7f7 fd0c 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bc686:	4668      	mov	r0, sp
   bc688:	f7ff ff33 	bl	bc4f2 <_ZN8particle5ErrorD1Ev>
    }
   bc68c:	b009      	add	sp, #36	; 0x24
   bc68e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bc690:	4631      	mov	r1, r6
   bc692:	a802      	add	r0, sp, #8
   bc694:	f7ff ffb0 	bl	bc5f8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bc698:	68e0      	ldr	r0, [r4, #12]
   bc69a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bc69e:	b108      	cbz	r0, bc6a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bc6a0:	f002 f8fa 	bl	be898 <strdup>
        type_(type) {
   bc6a4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bc6a6:	2010      	movs	r0, #16
   bc6a8:	f8ad 501c 	strh.w	r5, [sp, #28]
   bc6ac:	f7f7 fcf3 	bl	b4096 <_Znwj>
   bc6b0:	4605      	mov	r5, r0
   bc6b2:	b1e8      	cbz	r0, bc6f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bc6b4:	2700      	movs	r7, #0
   bc6b6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc6b8:	2018      	movs	r0, #24
   bc6ba:	f7f7 fcec 	bl	b4096 <_Znwj>
   bc6be:	4604      	mov	r4, r0
   bc6c0:	b188      	cbz	r0, bc6e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bc6c2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bc6c4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bc6c6:	a802      	add	r0, sp, #8
   bc6c8:	f7ff f8b0 	bl	bb82c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc6cc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bc6ce:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc6d0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc6d2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bc6d4:	9204      	str	r2, [sp, #16]
   bc6d6:	a906      	add	r1, sp, #24
   bc6d8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bc6da:	60e3      	str	r3, [r4, #12]
   bc6dc:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bc6e0:	9205      	str	r2, [sp, #20]
   bc6e2:	f7ff fef9 	bl	bc4d8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bc6e6:	4b08      	ldr	r3, [pc, #32]	; (bc708 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bc6e8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bc6ea:	4b08      	ldr	r3, [pc, #32]	; (bc70c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc6ec:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bc6ee:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bc6f0:	a806      	add	r0, sp, #24
   bc6f2:	f7ff fefe 	bl	bc4f2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bc6f6:	a802      	add	r0, sp, #8
   bc6f8:	f7f7 ff3e 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bc6fc:	2200      	movs	r2, #0
   bc6fe:	4629      	mov	r1, r5
   bc700:	4803      	ldr	r0, [pc, #12]	; (bc710 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bc702:	f7fd fa67 	bl	b9bd4 <application_thread_invoke>
   bc706:	e7b7      	b.n	bc678 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bc708:	000bc5a1 	.word	0x000bc5a1
   bc70c:	000bc825 	.word	0x000bc825
   bc710:	000b9e13 	.word	0x000b9e13

000bc714 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bc714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc718:	b08b      	sub	sp, #44	; 0x2c
   bc71a:	4605      	mov	r5, r0
   bc71c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bc720:	460f      	mov	r7, r1
   bc722:	4690      	mov	r8, r2
   bc724:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bc726:	f7fd fa81 	bl	b9c2c <spark_cloud_flag_connected>
   bc72a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bc72c:	4683      	mov	fp, r0
   bc72e:	bb38      	cbnz	r0, bc780 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bc730:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bc734:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bc736:	a905      	add	r1, sp, #20
   bc738:	4630      	mov	r0, r6
   bc73a:	f8ad 3018 	strh.w	r3, [sp, #24]
   bc73e:	f7ff fecb 	bl	bc4d8 <_ZN8particle5ErrorC1EOS0_>
   bc742:	2014      	movs	r0, #20
   bc744:	f7f7 fca7 	bl	b4096 <_Znwj>
   bc748:	4604      	mov	r4, r0
   bc74a:	b148      	cbz	r0, bc760 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bc74c:	2302      	movs	r3, #2
   bc74e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bc750:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bc752:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bc756:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bc758:	4631      	mov	r1, r6
   bc75a:	300c      	adds	r0, #12
   bc75c:	f7ff febc 	bl	bc4d8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc760:	4628      	mov	r0, r5
	: __shared_count(__p)
   bc762:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc764:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bc768:	f7ff ff32 	bl	bc5d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bc76c:	4630      	mov	r0, r6
   bc76e:	f7ff fec0 	bl	bc4f2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bc772:	a805      	add	r0, sp, #20
   bc774:	f7ff febd 	bl	bc4f2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   bc778:	4628      	mov	r0, r5
   bc77a:	b00b      	add	sp, #44	; 0x2c
   bc77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bc780:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bc782:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bc784:	2014      	movs	r0, #20
   bc786:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bc78a:	9307      	str	r3, [sp, #28]
   bc78c:	f7f7 fc83 	bl	b4096 <_Znwj>
   bc790:	4601      	mov	r1, r0
   bc792:	b118      	cbz	r0, bc79c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bc794:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bc798:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bc79a:	7044      	strb	r4, [r0, #1]
   bc79c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc79e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bc7a0:	f7ff ff16 	bl	bc5d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bc7a4:	4b1e      	ldr	r3, [pc, #120]	; (bc820 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bc7a6:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bc7a8:	2008      	movs	r0, #8
   bc7aa:	f7f7 fc74 	bl	b4096 <_Znwj>
   bc7ae:	4604      	mov	r4, r0
   bc7b0:	b110      	cbz	r0, bc7b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bc7b2:	a903      	add	r1, sp, #12
   bc7b4:	f7ff fec7 	bl	bc546 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bc7b8:	9600      	str	r6, [sp, #0]
   bc7ba:	fa5f f38a 	uxtb.w	r3, sl
   bc7be:	464a      	mov	r2, r9
   bc7c0:	4641      	mov	r1, r8
   bc7c2:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bc7c4:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bc7c6:	f7fd fa39 	bl	b9c3c <spark_send_event>
   bc7ca:	b9b8      	cbnz	r0, bc7fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bc7cc:	9b03      	ldr	r3, [sp, #12]
   bc7ce:	785b      	ldrb	r3, [r3, #1]
   bc7d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bc7d4:	b993      	cbnz	r3, bc7fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bc7d6:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bc7da:	a905      	add	r1, sp, #20
   bc7dc:	a803      	add	r0, sp, #12
   bc7de:	9205      	str	r2, [sp, #20]
   bc7e0:	f8ad 3018 	strh.w	r3, [sp, #24]
   bc7e4:	f7ff ff18 	bl	bc618 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bc7e8:	a805      	add	r0, sp, #20
   bc7ea:	f7ff fe82 	bl	bc4f2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bc7ee:	a805      	add	r0, sp, #20
   bc7f0:	9909      	ldr	r1, [sp, #36]	; 0x24
   bc7f2:	f7ff feb1 	bl	bc558 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bc7f6:	a806      	add	r0, sp, #24
   bc7f8:	f7fe f989 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc7fc:	a903      	add	r1, sp, #12
   bc7fe:	a805      	add	r0, sp, #20
   bc800:	f7ff fea1 	bl	bc546 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc804:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bc806:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc808:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bc80a:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bc80c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bc80e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bc810:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bc812:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bc814:	f7fe f97b 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc818:	a804      	add	r0, sp, #16
   bc81a:	f7fe f978 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bc81e:	e7ab      	b.n	bc778 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bc820:	000bc8a1 	.word	0x000bc8a1

000bc824 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bc824:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bc826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc828:	4605      	mov	r5, r0
	switch (__op)
   bc82a:	d103      	bne.n	bc834 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bc82c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bc82e:	6003      	str	r3, [r0, #0]
      }
   bc830:	2000      	movs	r0, #0
   bc832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bc834:	2a02      	cmp	r2, #2
   bc836:	d010      	beq.n	bc85a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bc838:	2a03      	cmp	r2, #3
   bc83a:	d1f9      	bne.n	bc830 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bc83c:	6804      	ldr	r4, [r0, #0]
   bc83e:	2c00      	cmp	r4, #0
   bc840:	d0f6      	beq.n	bc830 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bc842:	f104 0010 	add.w	r0, r4, #16
   bc846:	f7ff fe54 	bl	bc4f2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bc84a:	4620      	mov	r0, r4
   bc84c:	f7f7 fe94 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bc850:	2118      	movs	r1, #24
   bc852:	4620      	mov	r0, r4
   bc854:	f7f7 fc23 	bl	b409e <_ZdlPvj>
   bc858:	e7ea      	b.n	bc830 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bc85a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bc85c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bc85e:	f7f7 fc1a 	bl	b4096 <_Znwj>
   bc862:	4604      	mov	r4, r0
   bc864:	b150      	cbz	r0, bc87c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bc866:	4631      	mov	r1, r6
   bc868:	f7ff fec6 	bl	bc5f8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bc86c:	6930      	ldr	r0, [r6, #16]
   bc86e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bc872:	b108      	cbz	r0, bc878 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bc874:	f002 f810 	bl	be898 <strdup>
        type_(type) {
   bc878:	6120      	str	r0, [r4, #16]
   bc87a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bc87c:	602c      	str	r4, [r5, #0]
	}
   bc87e:	e7d7      	b.n	bc830 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bc880 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bc880:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bc882:	2300      	movs	r3, #0
   bc884:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bc886:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bc888:	4604      	mov	r4, r0
   bc88a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bc88c:	b12b      	cbz	r3, bc89a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bc88e:	2202      	movs	r2, #2
   bc890:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bc892:	68eb      	ldr	r3, [r5, #12]
   bc894:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bc896:	68ab      	ldr	r3, [r5, #8]
   bc898:	60a3      	str	r3, [r4, #8]
    }
   bc89a:	4620      	mov	r0, r4
   bc89c:	bd38      	pop	{r3, r4, r5, pc}
	...

000bc8a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bc8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc8a2:	b089      	sub	sp, #36	; 0x24
   bc8a4:	4604      	mov	r4, r0
   bc8a6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bc8a8:	a801      	add	r0, sp, #4
   bc8aa:	4611      	mov	r1, r2
   bc8ac:	f7ff fe54 	bl	bc558 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bc8b0:	b1a4      	cbz	r4, bc8dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bc8b2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bc8b4:	b11d      	cbz	r5, bc8be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bc8b6:	4628      	mov	r0, r5
   bc8b8:	f001 ffee 	bl	be898 <strdup>
   bc8bc:	4605      	mov	r5, r0
   bc8be:	a801      	add	r0, sp, #4
   bc8c0:	a903      	add	r1, sp, #12
        type_(type) {
   bc8c2:	9503      	str	r5, [sp, #12]
   bc8c4:	f8ad 4010 	strh.w	r4, [sp, #16]
   bc8c8:	f7ff fea6 	bl	bc618 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bc8cc:	a803      	add	r0, sp, #12
   bc8ce:	f7ff fe10 	bl	bc4f2 <_ZN8particle5ErrorD1Ev>
   bc8d2:	a802      	add	r0, sp, #8
   bc8d4:	f7fe f91b 	bl	bab0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bc8d8:	b009      	add	sp, #36	; 0x24
   bc8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bc8dc:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bc8de:	2301      	movs	r3, #1
   bc8e0:	e8d5 2f4f 	ldrexb	r2, [r5]
   bc8e4:	2a00      	cmp	r2, #0
   bc8e6:	d103      	bne.n	bc8f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bc8e8:	e8c5 3f41 	strexb	r1, r3, [r5]
   bc8ec:	2900      	cmp	r1, #0
   bc8ee:	d1f7      	bne.n	bc8e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bc8f0:	d1ef      	bne.n	bc8d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bc8f2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bc8f4:	f3bf 8f5b 	dmb	ish
   bc8f8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bc8fa:	1d2b      	adds	r3, r5, #4
   bc8fc:	f3bf 8f5b 	dmb	ish
   bc900:	e853 6f00 	ldrex	r6, [r3]
   bc904:	e843 4200 	strex	r2, r4, [r3]
   bc908:	2a00      	cmp	r2, #0
   bc90a:	d1f9      	bne.n	bc900 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bc90c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bc910:	2e00      	cmp	r6, #0
   bc912:	d0de      	beq.n	bc8d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bc914:	4620      	mov	r0, r4
   bc916:	f7fd f955 	bl	b9bc4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bc91a:	4607      	mov	r7, r0
   bc91c:	b160      	cbz	r0, bc938 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bc91e:	f105 010c 	add.w	r1, r5, #12
   bc922:	4630      	mov	r0, r6
   bc924:	f7ff fe43 	bl	bc5ae <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bc928:	4630      	mov	r0, r6
   bc92a:	f7f7 fe25 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bc92e:	2110      	movs	r1, #16
   bc930:	4630      	mov	r0, r6
   bc932:	f7f7 fbb4 	bl	b409e <_ZdlPvj>
   bc936:	e7cc      	b.n	bc8d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bc938:	4631      	mov	r1, r6
   bc93a:	a803      	add	r0, sp, #12
   bc93c:	f7ff ffa0 	bl	bc880 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bc940:	7b2b      	ldrb	r3, [r5, #12]
   bc942:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bc946:	2010      	movs	r0, #16
   bc948:	f7f7 fba5 	bl	b4096 <_Znwj>
   bc94c:	4605      	mov	r5, r0
   bc94e:	b1d0      	cbz	r0, bc986 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bc950:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc952:	2014      	movs	r0, #20
   bc954:	f7f7 fb9f 	bl	b4096 <_Znwj>
   bc958:	4604      	mov	r4, r0
   bc95a:	b178      	cbz	r0, bc97c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bc95c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bc95e:	4601      	mov	r1, r0
   bc960:	a803      	add	r0, sp, #12
   bc962:	f7fe ff63 	bl	bb82c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc966:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bc968:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc96a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc96c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bc96e:	9205      	str	r2, [sp, #20]
   bc970:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bc972:	60e3      	str	r3, [r4, #12]
   bc974:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bc978:	9206      	str	r2, [sp, #24]
   bc97a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bc97c:	4b06      	ldr	r3, [pc, #24]	; (bc998 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bc97e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bc980:	4b06      	ldr	r3, [pc, #24]	; (bc99c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc982:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bc984:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bc986:	a803      	add	r0, sp, #12
   bc988:	f7f7 fdf6 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bc98c:	2200      	movs	r2, #0
   bc98e:	4629      	mov	r1, r5
   bc990:	4803      	ldr	r0, [pc, #12]	; (bc9a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bc992:	f7fd f91f 	bl	b9bd4 <application_thread_invoke>
   bc996:	e7c7      	b.n	bc928 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bc998:	000bc5c1 	.word	0x000bc5c1
   bc99c:	000bc9a5 	.word	0x000bc9a5
   bc9a0:	000b9e13 	.word	0x000b9e13

000bc9a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bc9a4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bc9a6:	b570      	push	{r4, r5, r6, lr}
   bc9a8:	4604      	mov	r4, r0
	switch (__op)
   bc9aa:	d103      	bne.n	bc9b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bc9ac:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bc9ae:	6003      	str	r3, [r0, #0]
      }
   bc9b0:	2000      	movs	r0, #0
   bc9b2:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bc9b4:	2a02      	cmp	r2, #2
   bc9b6:	d00c      	beq.n	bc9d2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bc9b8:	2a03      	cmp	r2, #3
   bc9ba:	d1f9      	bne.n	bc9b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bc9bc:	6804      	ldr	r4, [r0, #0]
   bc9be:	2c00      	cmp	r4, #0
   bc9c0:	d0f6      	beq.n	bc9b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bc9c2:	4620      	mov	r0, r4
   bc9c4:	f7f7 fdd8 	bl	b4578 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bc9c8:	2114      	movs	r1, #20
   bc9ca:	4620      	mov	r0, r4
   bc9cc:	f7f7 fb67 	bl	b409e <_ZdlPvj>
   bc9d0:	e7ee      	b.n	bc9b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bc9d2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bc9d4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bc9d6:	f7f7 fb5e 	bl	b4096 <_Znwj>
   bc9da:	4605      	mov	r5, r0
   bc9dc:	b120      	cbz	r0, bc9e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bc9de:	4631      	mov	r1, r6
   bc9e0:	f7ff ff4e 	bl	bc880 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bc9e4:	7c33      	ldrb	r3, [r6, #16]
   bc9e6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bc9e8:	6025      	str	r5, [r4, #0]
	}
   bc9ea:	e7e1      	b.n	bc9b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bc9ec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bc9ec:	2200      	movs	r2, #0
   bc9ee:	6840      	ldr	r0, [r0, #4]
   bc9f0:	4611      	mov	r1, r2
   bc9f2:	f7fd b97b 	b.w	b9cec <network_listening>

000bc9f6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bc9f6:	2200      	movs	r2, #0
   bc9f8:	6840      	ldr	r0, [r0, #4]
   bc9fa:	4611      	mov	r1, r2
   bc9fc:	f7fd b986 	b.w	b9d0c <network_get_listen_timeout>

000bca00 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bca00:	6840      	ldr	r0, [r0, #4]
   bca02:	2200      	movs	r2, #0
   bca04:	f7fd b97a 	b.w	b9cfc <network_set_listen_timeout>

000bca08 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bca08:	6840      	ldr	r0, [r0, #4]
   bca0a:	2200      	movs	r2, #0
   bca0c:	f081 0101 	eor.w	r1, r1, #1
   bca10:	f7fd b964 	b.w	b9cdc <network_listen>

000bca14 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bca14:	2300      	movs	r3, #0
   bca16:	6840      	ldr	r0, [r0, #4]
   bca18:	461a      	mov	r2, r3
   bca1a:	4619      	mov	r1, r3
   bca1c:	f7fd b956 	b.w	b9ccc <network_off>

000bca20 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bca20:	2300      	movs	r3, #0
   bca22:	6840      	ldr	r0, [r0, #4]
   bca24:	461a      	mov	r2, r3
   bca26:	4619      	mov	r1, r3
   bca28:	f7fd b948 	b.w	b9cbc <network_on>

000bca2c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bca2c:	2200      	movs	r2, #0
   bca2e:	6840      	ldr	r0, [r0, #4]
   bca30:	4611      	mov	r1, r2
   bca32:	f7fd b93b 	b.w	b9cac <network_ready>

000bca36 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bca36:	2200      	movs	r2, #0
   bca38:	6840      	ldr	r0, [r0, #4]
   bca3a:	4611      	mov	r1, r2
   bca3c:	f7fd b926 	b.w	b9c8c <network_connecting>

000bca40 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bca40:	6840      	ldr	r0, [r0, #4]
   bca42:	2200      	movs	r2, #0
   bca44:	2102      	movs	r1, #2
   bca46:	f7fd b929 	b.w	b9c9c <network_disconnect>

000bca4a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bca4a:	2300      	movs	r3, #0
   bca4c:	6840      	ldr	r0, [r0, #4]
   bca4e:	461a      	mov	r2, r3
   bca50:	f7fd b914 	b.w	b9c7c <network_connect>

000bca54 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bca54:	4b02      	ldr	r3, [pc, #8]	; (bca60 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bca56:	2203      	movs	r2, #3
   bca58:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bca5a:	4a02      	ldr	r2, [pc, #8]	; (bca64 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bca5c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bca5e:	4770      	bx	lr
   bca60:	2003e694 	.word	0x2003e694
   bca64:	000c1aa8 	.word	0x000c1aa8

000bca68 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bca68:	4770      	bx	lr

000bca6a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bca6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bca6c:	4606      	mov	r6, r0
   bca6e:	4615      	mov	r5, r2
   bca70:	460c      	mov	r4, r1
   bca72:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bca74:	42bc      	cmp	r4, r7
   bca76:	d006      	beq.n	bca86 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bca78:	6833      	ldr	r3, [r6, #0]
   bca7a:	f814 1b01 	ldrb.w	r1, [r4], #1
   bca7e:	689b      	ldr	r3, [r3, #8]
   bca80:	4630      	mov	r0, r6
   bca82:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bca84:	e7f6      	b.n	bca74 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bca86:	4628      	mov	r0, r5
   bca88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bca8a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bca8a:	7c00      	ldrb	r0, [r0, #16]
   bca8c:	2200      	movs	r2, #0
   bca8e:	f7fc bf51 	b.w	b9934 <hal_i2c_write>

000bca92 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bca92:	7c00      	ldrb	r0, [r0, #16]
   bca94:	2100      	movs	r1, #0
   bca96:	f7fc bf55 	b.w	b9944 <hal_i2c_available>

000bca9a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bca9a:	7c00      	ldrb	r0, [r0, #16]
   bca9c:	2100      	movs	r1, #0
   bca9e:	f7fc bf59 	b.w	b9954 <hal_i2c_read>

000bcaa2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bcaa2:	7c00      	ldrb	r0, [r0, #16]
   bcaa4:	2100      	movs	r1, #0
   bcaa6:	f7fc bf5d 	b.w	b9964 <hal_i2c_peek>

000bcaaa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bcaaa:	7c00      	ldrb	r0, [r0, #16]
   bcaac:	2100      	movs	r1, #0
   bcaae:	f7fc bf61 	b.w	b9974 <hal_i2c_flush>

000bcab2 <_ZN7TwoWireD0Ev>:
   bcab2:	b510      	push	{r4, lr}
   bcab4:	2114      	movs	r1, #20
   bcab6:	4604      	mov	r4, r0
   bcab8:	f7f7 faf1 	bl	b409e <_ZdlPvj>
   bcabc:	4620      	mov	r0, r4
   bcabe:	bd10      	pop	{r4, pc}

000bcac0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bcac0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bcac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bcac6:	4604      	mov	r4, r0
   bcac8:	4608      	mov	r0, r1
   bcaca:	2100      	movs	r1, #0
   bcacc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bcad0:	4b03      	ldr	r3, [pc, #12]	; (bcae0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bcad2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bcad4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bcad6:	4611      	mov	r1, r2
   bcad8:	f7fc ff5c 	bl	b9994 <hal_i2c_init>
}
   bcadc:	4620      	mov	r0, r4
   bcade:	bd10      	pop	{r4, pc}
   bcae0:	000c1ae4 	.word	0x000c1ae4

000bcae4 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bcae4:	7c00      	ldrb	r0, [r0, #16]
   bcae6:	2200      	movs	r2, #0
   bcae8:	f7fc bf04 	b.w	b98f4 <hal_i2c_set_speed>

000bcaec <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bcaec:	2300      	movs	r3, #0
   bcaee:	7c00      	ldrb	r0, [r0, #16]
   bcaf0:	461a      	mov	r2, r3
   bcaf2:	4619      	mov	r1, r3
   bcaf4:	f7fc bf06 	b.w	b9904 <hal_i2c_begin>

000bcaf8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bcaf8:	7c00      	ldrb	r0, [r0, #16]
   bcafa:	2200      	movs	r2, #0
   bcafc:	f7fc bf0a 	b.w	b9914 <hal_i2c_begin_transmission>

000bcb00 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bcb00:	7c00      	ldrb	r0, [r0, #16]
   bcb02:	2200      	movs	r2, #0
   bcb04:	f7fc bf0e 	b.w	b9924 <hal_i2c_end_transmission>

000bcb08 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bcb08:	2101      	movs	r1, #1
   bcb0a:	f7ff bff9 	b.w	bcb00 <_ZN7TwoWire15endTransmissionEh>

000bcb0e <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bcb0e:	4700      	bx	r0

000bcb10 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bcb10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bcb14:	2400      	movs	r4, #0
{
   bcb16:	461d      	mov	r5, r3
   bcb18:	460f      	mov	r7, r1
   bcb1a:	4690      	mov	r8, r2
   bcb1c:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bcb1e:	f7fc fed9 	bl	b98d4 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bcb22:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bcb24:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bcb28:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bcb2c:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bcb30:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bcb34:	bfa2      	ittt	ge
   bcb36:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bcb3a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bcb3e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bcb40:	4907      	ldr	r1, [pc, #28]	; (bcb60 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bcb42:	9400      	str	r4, [sp, #0]
   bcb44:	4643      	mov	r3, r8
   bcb46:	463a      	mov	r2, r7
   bcb48:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bcb4a:	bfa8      	it	ge
   bcb4c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bcb50:	f7fc feb8 	bl	b98c4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bcb54:	fab0 f080 	clz	r0, r0
   bcb58:	0940      	lsrs	r0, r0, #5
   bcb5a:	b004      	add	sp, #16
   bcb5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcb60:	000bcb0f 	.word	0x000bcb0f

000bcb64 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bcb64:	4770      	bx	lr

000bcb66 <_ZN9IPAddressD0Ev>:
   bcb66:	b510      	push	{r4, lr}
   bcb68:	2118      	movs	r1, #24
   bcb6a:	4604      	mov	r4, r0
   bcb6c:	f7f7 fa97 	bl	b409e <_ZdlPvj>
   bcb70:	4620      	mov	r0, r4
   bcb72:	bd10      	pop	{r4, pc}

000bcb74 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bcb74:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bcb76:	7d03      	ldrb	r3, [r0, #20]
   bcb78:	2b06      	cmp	r3, #6
{
   bcb7a:	b08d      	sub	sp, #52	; 0x34
   bcb7c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bcb7e:	f100 0704 	add.w	r7, r0, #4
   bcb82:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bcb86:	d012      	beq.n	bcbae <_ZNK9IPAddress7printToER5Print+0x3a>
   bcb88:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bcb8c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bcb90:	220a      	movs	r2, #10
   bcb92:	4630      	mov	r0, r6
   bcb94:	f000 f94b 	bl	bce2e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bcb98:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bcb9a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bcb9c:	d019      	beq.n	bcbd2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bcb9e:	2c00      	cmp	r4, #0
   bcba0:	d0f4      	beq.n	bcb8c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bcba2:	212e      	movs	r1, #46	; 0x2e
   bcba4:	4630      	mov	r0, r6
   bcba6:	f000 f929 	bl	bcdfc <_ZN5Print5printEc>
   bcbaa:	4404      	add	r4, r0
   bcbac:	e7ee      	b.n	bcb8c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bcbae:	232f      	movs	r3, #47	; 0x2f
   bcbb0:	466a      	mov	r2, sp
   bcbb2:	4639      	mov	r1, r7
   bcbb4:	200a      	movs	r0, #10
		buf[0] = 0;
   bcbb6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bcbba:	f7fc fef3 	bl	b99a4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bcbbe:	4668      	mov	r0, sp
   bcbc0:	f001 fe87 	bl	be8d2 <strlen>
   bcbc4:	6833      	ldr	r3, [r6, #0]
   bcbc6:	4602      	mov	r2, r0
   bcbc8:	68db      	ldr	r3, [r3, #12]
   bcbca:	4669      	mov	r1, sp
   bcbcc:	4630      	mov	r0, r6
   bcbce:	4798      	blx	r3
   bcbd0:	4604      	mov	r4, r0
    }
    return n;
}
   bcbd2:	4620      	mov	r0, r4
   bcbd4:	b00d      	add	sp, #52	; 0x34
   bcbd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bcbd8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bcbd8:	b510      	push	{r4, lr}
   bcbda:	4b05      	ldr	r3, [pc, #20]	; (bcbf0 <_ZN9IPAddressC1Ev+0x18>)
   bcbdc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bcbde:	2211      	movs	r2, #17
   bcbe0:	f840 3b04 	str.w	r3, [r0], #4
   bcbe4:	2100      	movs	r1, #0
   bcbe6:	f001 fdc0 	bl	be76a <memset>
}
   bcbea:	4620      	mov	r0, r4
   bcbec:	bd10      	pop	{r4, pc}
   bcbee:	bf00      	nop
   bcbf0:	000c1b0c 	.word	0x000c1b0c

000bcbf4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bcbf4:	4603      	mov	r3, r0
   bcbf6:	4a07      	ldr	r2, [pc, #28]	; (bcc14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bcbf8:	b510      	push	{r4, lr}
   bcbfa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bcbfe:	f101 0210 	add.w	r2, r1, #16
   bcc02:	f851 4b04 	ldr.w	r4, [r1], #4
   bcc06:	f843 4b04 	str.w	r4, [r3], #4
   bcc0a:	4291      	cmp	r1, r2
   bcc0c:	d1f9      	bne.n	bcc02 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bcc0e:	780a      	ldrb	r2, [r1, #0]
   bcc10:	701a      	strb	r2, [r3, #0]
}
   bcc12:	bd10      	pop	{r4, pc}
   bcc14:	000c1b0c 	.word	0x000c1b0c

000bcc18 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bcc18:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bcc1a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bcc1e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bcc22:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bcc26:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bcc2a:	2304      	movs	r3, #4
   bcc2c:	6041      	str	r1, [r0, #4]
   bcc2e:	7503      	strb	r3, [r0, #20]
}
   bcc30:	bd10      	pop	{r4, pc}
	...

000bcc34 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bcc34:	b507      	push	{r0, r1, r2, lr}
   bcc36:	4b06      	ldr	r3, [pc, #24]	; (bcc50 <_ZN9IPAddressC1EPKh+0x1c>)
   bcc38:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bcc3a:	78cb      	ldrb	r3, [r1, #3]
   bcc3c:	9300      	str	r3, [sp, #0]
   bcc3e:	788b      	ldrb	r3, [r1, #2]
   bcc40:	784a      	ldrb	r2, [r1, #1]
   bcc42:	7809      	ldrb	r1, [r1, #0]
   bcc44:	f7ff ffe8 	bl	bcc18 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bcc48:	b003      	add	sp, #12
   bcc4a:	f85d fb04 	ldr.w	pc, [sp], #4
   bcc4e:	bf00      	nop
   bcc50:	000c1b0c 	.word	0x000c1b0c

000bcc54 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   bcc54:	4b01      	ldr	r3, [pc, #4]	; (bcc5c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bcc56:	4a02      	ldr	r2, [pc, #8]	; (bcc60 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bcc58:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bcc5a:	4770      	bx	lr
   bcc5c:	2003e69c 	.word	0x2003e69c
   bcc60:	000c1b18 	.word	0x000c1b18

000bcc64 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bcc64:	2300      	movs	r3, #0
   bcc66:	6840      	ldr	r0, [r0, #4]
   bcc68:	461a      	mov	r2, r3
   bcc6a:	f7fd b807 	b.w	b9c7c <network_connect>

000bcc6e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bcc6e:	6840      	ldr	r0, [r0, #4]
   bcc70:	2200      	movs	r2, #0
   bcc72:	2102      	movs	r1, #2
   bcc74:	f7fd b812 	b.w	b9c9c <network_disconnect>

000bcc78 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bcc78:	2200      	movs	r2, #0
   bcc7a:	6840      	ldr	r0, [r0, #4]
   bcc7c:	4611      	mov	r1, r2
   bcc7e:	f7fd b805 	b.w	b9c8c <network_connecting>

000bcc82 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bcc82:	2200      	movs	r2, #0
   bcc84:	6840      	ldr	r0, [r0, #4]
   bcc86:	4611      	mov	r1, r2
   bcc88:	f7fd b810 	b.w	b9cac <network_ready>

000bcc8c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bcc8c:	2300      	movs	r3, #0
   bcc8e:	6840      	ldr	r0, [r0, #4]
   bcc90:	461a      	mov	r2, r3
   bcc92:	4619      	mov	r1, r3
   bcc94:	f7fd b812 	b.w	b9cbc <network_on>

000bcc98 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bcc98:	2300      	movs	r3, #0
   bcc9a:	6840      	ldr	r0, [r0, #4]
   bcc9c:	461a      	mov	r2, r3
   bcc9e:	4619      	mov	r1, r3
   bcca0:	f7fd b814 	b.w	b9ccc <network_off>

000bcca4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bcca4:	6840      	ldr	r0, [r0, #4]
   bcca6:	2100      	movs	r1, #0
   bcca8:	f7fd b838 	b.w	b9d1c <network_is_on>

000bccac <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bccac:	6840      	ldr	r0, [r0, #4]
   bccae:	2100      	movs	r1, #0
   bccb0:	f7fd b83c 	b.w	b9d2c <network_is_off>

000bccb4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bccb4:	6840      	ldr	r0, [r0, #4]
   bccb6:	2200      	movs	r2, #0
   bccb8:	f081 0101 	eor.w	r1, r1, #1
   bccbc:	f7fd b80e 	b.w	b9cdc <network_listen>

000bccc0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bccc0:	6840      	ldr	r0, [r0, #4]
   bccc2:	2200      	movs	r2, #0
   bccc4:	f7fd b81a 	b.w	b9cfc <network_set_listen_timeout>

000bccc8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bccc8:	2200      	movs	r2, #0
   bccca:	6840      	ldr	r0, [r0, #4]
   bcccc:	4611      	mov	r1, r2
   bccce:	f7fd b81d 	b.w	b9d0c <network_get_listen_timeout>

000bccd2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bccd2:	2200      	movs	r2, #0
   bccd4:	6840      	ldr	r0, [r0, #4]
   bccd6:	4611      	mov	r1, r2
   bccd8:	f7fd b808 	b.w	b9cec <network_listening>

000bccdc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bccdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bcce0:	b095      	sub	sp, #84	; 0x54
   bcce2:	4614      	mov	r4, r2
   bcce4:	460d      	mov	r5, r1
   bcce6:	4607      	mov	r7, r0
    IPAddress addr;
   bcce8:	f7ff ff76 	bl	bcbd8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bccec:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bccee:	221c      	movs	r2, #28
   bccf0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bccf2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bccf4:	f001 fd39 	bl	be76a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bccf8:	2340      	movs	r3, #64	; 0x40
   bccfa:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bccfc:	4620      	mov	r0, r4
   bccfe:	466b      	mov	r3, sp
   bcd00:	aa0c      	add	r2, sp, #48	; 0x30
   bcd02:	2100      	movs	r1, #0
   bcd04:	f7fc fe5e 	bl	b99c4 <netdb_getaddrinfo>
    if (!r) {
   bcd08:	4604      	mov	r4, r0
   bcd0a:	2800      	cmp	r0, #0
   bcd0c:	d14b      	bne.n	bcda6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bcd0e:	4602      	mov	r2, r0
   bcd10:	2101      	movs	r1, #1
   bcd12:	6868      	ldr	r0, [r5, #4]
   bcd14:	f7fc ffca 	bl	b9cac <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bcd18:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bcd1a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bcd1c:	4622      	mov	r2, r4
   bcd1e:	6868      	ldr	r0, [r5, #4]
   bcd20:	f7fc ffc4 	bl	b9cac <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bcd24:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bcd26:	4681      	mov	r9, r0
        bool ok = false;
   bcd28:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bcd2a:	2e00      	cmp	r6, #0
   bcd2c:	d03b      	beq.n	bcda6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bcd2e:	2900      	cmp	r1, #0
   bcd30:	d139      	bne.n	bcda6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bcd32:	6873      	ldr	r3, [r6, #4]
   bcd34:	2b02      	cmp	r3, #2
   bcd36:	d003      	beq.n	bcd40 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bcd38:	2b0a      	cmp	r3, #10
   bcd3a:	d011      	beq.n	bcd60 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bcd3c:	69f6      	ldr	r6, [r6, #28]
   bcd3e:	e7f4      	b.n	bcd2a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bcd40:	f1b8 0f00 	cmp.w	r8, #0
   bcd44:	d0fa      	beq.n	bcd3c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bcd46:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bcd48:	a806      	add	r0, sp, #24
   bcd4a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bcd4c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bcd4e:	f7ff ff71 	bl	bcc34 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bcd52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bcd54:	1d3c      	adds	r4, r7, #4
   bcd56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bcd58:	682b      	ldr	r3, [r5, #0]
   bcd5a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bcd5c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bcd5e:	e7ed      	b.n	bcd3c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bcd60:	f1b9 0f00 	cmp.w	r9, #0
   bcd64:	d0ea      	beq.n	bcd3c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bcd66:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bcd68:	2210      	movs	r2, #16
   bcd6a:	a801      	add	r0, sp, #4
   bcd6c:	f001 fcfd 	bl	be76a <memset>
                    a.v = 6;
   bcd70:	2306      	movs	r3, #6
   bcd72:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bcd76:	ad01      	add	r5, sp, #4
   bcd78:	f104 0308 	add.w	r3, r4, #8
   bcd7c:	3418      	adds	r4, #24
   bcd7e:	6818      	ldr	r0, [r3, #0]
   bcd80:	6859      	ldr	r1, [r3, #4]
   bcd82:	462a      	mov	r2, r5
   bcd84:	c203      	stmia	r2!, {r0, r1}
   bcd86:	3308      	adds	r3, #8
   bcd88:	42a3      	cmp	r3, r4
   bcd8a:	4615      	mov	r5, r2
   bcd8c:	d1f7      	bne.n	bcd7e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bcd8e:	a901      	add	r1, sp, #4
   bcd90:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bcd92:	ad07      	add	r5, sp, #28
   bcd94:	f7ff ff2e 	bl	bcbf4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bcd98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bcd9a:	1d3c      	adds	r4, r7, #4
   bcd9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bcd9e:	682b      	ldr	r3, [r5, #0]
   bcda0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bcda2:	4649      	mov	r1, r9
   bcda4:	e7ca      	b.n	bcd3c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bcda6:	9800      	ldr	r0, [sp, #0]
   bcda8:	f7fc fe04 	bl	b99b4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bcdac:	4638      	mov	r0, r7
   bcdae:	b015      	add	sp, #84	; 0x54
   bcdb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bcdb4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bcdb4:	4b02      	ldr	r3, [pc, #8]	; (bcdc0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bcdb6:	4a03      	ldr	r2, [pc, #12]	; (bcdc4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bcdb8:	601a      	str	r2, [r3, #0]
   bcdba:	2200      	movs	r2, #0
   bcdbc:	605a      	str	r2, [r3, #4]

} // spark
   bcdbe:	4770      	bx	lr
   bcdc0:	2003e6a0 	.word	0x2003e6a0
   bcdc4:	000c1b24 	.word	0x000c1b24

000bcdc8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bcdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bcdca:	4606      	mov	r6, r0
   bcdcc:	460d      	mov	r5, r1
  size_t n = 0;
   bcdce:	188f      	adds	r7, r1, r2
   bcdd0:	2400      	movs	r4, #0
  while (size--) {
   bcdd2:	42bd      	cmp	r5, r7
   bcdd4:	d00c      	beq.n	bcdf0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bcdd6:	6833      	ldr	r3, [r6, #0]
   bcdd8:	f815 1b01 	ldrb.w	r1, [r5], #1
   bcddc:	689b      	ldr	r3, [r3, #8]
   bcdde:	4630      	mov	r0, r6
   bcde0:	4798      	blx	r3
     if (chunk>=0)
   bcde2:	1e03      	subs	r3, r0, #0
   bcde4:	db01      	blt.n	bcdea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bcde6:	441c      	add	r4, r3
  while (size--) {
   bcde8:	e7f3      	b.n	bcdd2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bcdea:	2c00      	cmp	r4, #0
   bcdec:	bf08      	it	eq
   bcdee:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bcdf0:	4620      	mov	r0, r4
   bcdf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bcdf4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bcdf4:	b508      	push	{r3, lr}
  return write(str);
   bcdf6:	f7fa ff03 	bl	b7c00 <_ZN5Print5writeEPKc>
}
   bcdfa:	bd08      	pop	{r3, pc}

000bcdfc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bcdfc:	6803      	ldr	r3, [r0, #0]
   bcdfe:	689b      	ldr	r3, [r3, #8]
   bce00:	4718      	bx	r3

000bce02 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bce02:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bce04:	210d      	movs	r1, #13
{
   bce06:	4605      	mov	r5, r0
  size_t n = print('\r');
   bce08:	f7ff fff8 	bl	bcdfc <_ZN5Print5printEc>
  n += print('\n');
   bce0c:	210a      	movs	r1, #10
  size_t n = print('\r');
   bce0e:	4604      	mov	r4, r0
  n += print('\n');
   bce10:	4628      	mov	r0, r5
   bce12:	f7ff fff3 	bl	bcdfc <_ZN5Print5printEc>
  return n;
}
   bce16:	4420      	add	r0, r4
   bce18:	bd38      	pop	{r3, r4, r5, pc}

000bce1a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   bce1a:	b538      	push	{r3, r4, r5, lr}
   bce1c:	4605      	mov	r5, r0
  return write(str);
   bce1e:	f7fa feef 	bl	b7c00 <_ZN5Print5writeEPKc>
   bce22:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   bce24:	4628      	mov	r0, r5
   bce26:	f7ff ffec 	bl	bce02 <_ZN5Print7printlnEv>
  return n;
}
   bce2a:	4420      	add	r0, r4
   bce2c:	bd38      	pop	{r3, r4, r5, pc}

000bce2e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bce2e:	b530      	push	{r4, r5, lr}
   bce30:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bce32:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bce34:	2a01      	cmp	r2, #1
  *str = '\0';
   bce36:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bce3a:	bf98      	it	ls
   bce3c:	220a      	movls	r2, #10
   bce3e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bce40:	460d      	mov	r5, r1
   bce42:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bce46:	fb01 5312 	mls	r3, r1, r2, r5
   bce4a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bce4e:	2b09      	cmp	r3, #9
   bce50:	bf94      	ite	ls
   bce52:	3330      	addls	r3, #48	; 0x30
   bce54:	3337      	addhi	r3, #55	; 0x37
   bce56:	b2db      	uxtb	r3, r3
  } while(n);
   bce58:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bce5a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bce5e:	d9ef      	bls.n	bce40 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bce60:	4621      	mov	r1, r4
   bce62:	f7fa fecd 	bl	b7c00 <_ZN5Print5writeEPKc>
}
   bce66:	b00b      	add	sp, #44	; 0x2c
   bce68:	bd30      	pop	{r4, r5, pc}

000bce6a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bce6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bce6e:	b086      	sub	sp, #24
   bce70:	af00      	add	r7, sp, #0
   bce72:	4605      	mov	r5, r0
   bce74:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bce76:	1d38      	adds	r0, r7, #4
   bce78:	2114      	movs	r1, #20
{
   bce7a:	4614      	mov	r4, r2
    va_copy(args2, args);
   bce7c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bce7e:	f7fc ff8d 	bl	b9d9c <vsnprintf>

    if (n<bufsize)
   bce82:	2813      	cmp	r0, #19
   bce84:	d80e      	bhi.n	bcea4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bce86:	1d39      	adds	r1, r7, #4
   bce88:	4628      	mov	r0, r5
   bce8a:	f7fa feb9 	bl	b7c00 <_ZN5Print5writeEPKc>
   bce8e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bce90:	b11e      	cbz	r6, bce9a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bce92:	4628      	mov	r0, r5
   bce94:	f7ff ffb5 	bl	bce02 <_ZN5Print7printlnEv>
   bce98:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bce9a:	4620      	mov	r0, r4
   bce9c:	3718      	adds	r7, #24
   bce9e:	46bd      	mov	sp, r7
   bcea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bcea4:	f100 0308 	add.w	r3, r0, #8
   bcea8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bceac:	46e8      	mov	r8, sp
        char bigger[n+1];
   bceae:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bceb2:	4622      	mov	r2, r4
   bceb4:	1c41      	adds	r1, r0, #1
   bceb6:	683b      	ldr	r3, [r7, #0]
   bceb8:	4668      	mov	r0, sp
   bceba:	f7fc ff6f 	bl	b9d9c <vsnprintf>
  return write(str);
   bcebe:	4669      	mov	r1, sp
   bcec0:	4628      	mov	r0, r5
   bcec2:	f7fa fe9d 	bl	b7c00 <_ZN5Print5writeEPKc>
   bcec6:	4604      	mov	r4, r0
   bcec8:	46c5      	mov	sp, r8
   bceca:	e7e1      	b.n	bce90 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bcecc <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bcecc:	b510      	push	{r4, lr}
  if (0 == max) {
   bcece:	4604      	mov	r4, r0
   bced0:	b128      	cbz	r0, bcede <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bced2:	f001 fc81 	bl	be7d8 <rand>
   bced6:	fb90 f3f4 	sdiv	r3, r0, r4
   bceda:	fb03 0414 	mls	r4, r3, r4, r0
}
   bcede:	4620      	mov	r0, r4
   bcee0:	bd10      	pop	{r4, pc}
	...

000bcee4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bcee4:	4b01      	ldr	r3, [pc, #4]	; (bceec <_GLOBAL__sub_I_RGB+0x8>)
   bcee6:	2200      	movs	r2, #0
   bcee8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bceea:	4770      	bx	lr
   bceec:	2003e6a8 	.word	0x2003e6a8

000bcef0 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bcef0:	2100      	movs	r1, #0
   bcef2:	f7fc bdb7 	b.w	b9a64 <hal_spi_release>

000bcef6 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bcef6:	2100      	movs	r1, #0
   bcef8:	f7fc bdac 	b.w	b9a54 <hal_spi_acquire>

000bcefc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bcefc:	b510      	push	{r4, lr}
   bcefe:	4604      	mov	r4, r0
   bcf00:	4608      	mov	r0, r1
{
    _spi = spi;
   bcf02:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bcf04:	f7fc fd76 	bl	b99f4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bcf08:	2300      	movs	r3, #0
   bcf0a:	6063      	str	r3, [r4, #4]
}
   bcf0c:	4620      	mov	r0, r4
   bcf0e:	bd10      	pop	{r4, pc}

000bcf10 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bcf10:	b513      	push	{r0, r1, r4, lr}
   bcf12:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bcf14:	7800      	ldrb	r0, [r0, #0]
   bcf16:	f7ff ffee 	bl	bcef6 <_ZN8SPIClass4lockEv.isra.0>
   bcf1a:	b958      	cbnz	r0, bcf34 <_ZN8SPIClass5beginEv+0x24>
   bcf1c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bcf1e:	9001      	str	r0, [sp, #4]
   bcf20:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bcf24:	f7fc fd56 	bl	b99d4 <hal_spi_begin>
        unlock();
   bcf28:	9801      	ldr	r0, [sp, #4]
    }
}
   bcf2a:	b002      	add	sp, #8
   bcf2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bcf30:	f7ff bfde 	b.w	bcef0 <_ZN8SPIClass6unlockEv.isra.0>
   bcf34:	b002      	add	sp, #8
   bcf36:	bd10      	pop	{r4, pc}

000bcf38 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bcf38:	7800      	ldrb	r0, [r0, #0]
   bcf3a:	f7ff bfd9 	b.w	bcef0 <_ZN8SPIClass6unlockEv.isra.0>
	...

000bcf40 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bcf40:	0840      	lsrs	r0, r0, #1
{
   bcf42:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bcf44:	6018      	str	r0, [r3, #0]
   bcf46:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bcf48:	6818      	ldr	r0, [r3, #0]
   bcf4a:	4288      	cmp	r0, r1
   bcf4c:	b2e5      	uxtb	r5, r4
   bcf4e:	d906      	bls.n	bcf5e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bcf50:	3401      	adds	r4, #1
   bcf52:	2c08      	cmp	r4, #8
   bcf54:	d002      	beq.n	bcf5c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bcf56:	0840      	lsrs	r0, r0, #1
   bcf58:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bcf5a:	e7f5      	b.n	bcf48 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bcf5c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bcf5e:	4b02      	ldr	r3, [pc, #8]	; (bcf68 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bcf60:	5d5b      	ldrb	r3, [r3, r5]
   bcf62:	7013      	strb	r3, [r2, #0]
}
   bcf64:	bd30      	pop	{r4, r5, pc}
   bcf66:	bf00      	nop
   bcf68:	000c1b58 	.word	0x000c1b58

000bcf6c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bcf6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bcf70:	4606      	mov	r6, r0
   bcf72:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bcf74:	7800      	ldrb	r0, [r0, #0]
{
   bcf76:	460c      	mov	r4, r1
    CHECK(lock());
   bcf78:	f7ff ffbd 	bl	bcef6 <_ZN8SPIClass4lockEv.isra.0>
   bcf7c:	2800      	cmp	r0, #0
   bcf7e:	db1b      	blt.n	bcfb8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bcf80:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bcf82:	2214      	movs	r2, #20
   bcf84:	2100      	movs	r1, #0
   bcf86:	a809      	add	r0, sp, #36	; 0x24
   bcf88:	f001 fbef 	bl	be76a <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bcf8c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bcf8e:	2200      	movs	r2, #0
   bcf90:	a909      	add	r1, sp, #36	; 0x24
   bcf92:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bcf94:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bcf98:	f7fc fd3c 	bl	b9a14 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bcf9c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bcfa0:	b113      	cbz	r3, bcfa8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bcfa2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bcfa6:	b155      	cbz	r5, bcfbe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bcfa8:	2700      	movs	r7, #0
   bcfaa:	46b9      	mov	r9, r7
   bcfac:	46b8      	mov	r8, r7
   bcfae:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bcfb0:	7923      	ldrb	r3, [r4, #4]
   bcfb2:	b15d      	cbz	r5, bcfcc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bcfb4:	b1c3      	cbz	r3, bcfe8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bcfb6:	2000      	movs	r0, #0
}
   bcfb8:	b00f      	add	sp, #60	; 0x3c
   bcfba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bcfbe:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bcfc2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bcfc6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bcfca:	e7f1      	b.n	bcfb0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bcfcc:	2b00      	cmp	r3, #0
   bcfce:	d135      	bne.n	bd03c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bcfd0:	68a3      	ldr	r3, [r4, #8]
   bcfd2:	4543      	cmp	r3, r8
   bcfd4:	d108      	bne.n	bcfe8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bcfd6:	f88d 9020 	strb.w	r9, [sp, #32]
   bcfda:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bcfde:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bcfe2:	89a3      	ldrh	r3, [r4, #12]
   bcfe4:	429a      	cmp	r2, r3
   bcfe6:	d0e6      	beq.n	bcfb6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bcfe8:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bcfea:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bcfec:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bcff0:	980a      	ldr	r0, [sp, #40]	; 0x28
   bcff2:	ab04      	add	r3, sp, #16
   bcff4:	f10d 020f 	add.w	r2, sp, #15
   bcff8:	f7ff ffa2 	bl	bcf40 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bcffc:	7921      	ldrb	r1, [r4, #4]
   bcffe:	b985      	cbnz	r5, bd022 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bd000:	b989      	cbnz	r1, bd026 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bd002:	68a3      	ldr	r3, [r4, #8]
   bd004:	4543      	cmp	r3, r8
   bd006:	d30e      	bcc.n	bd026 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bd008:	f88d 9020 	strb.w	r9, [sp, #32]
   bd00c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bd010:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bd014:	89a3      	ldrh	r3, [r4, #12]
   bd016:	429a      	cmp	r2, r3
   bd018:	d105      	bne.n	bd026 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bd01a:	9b04      	ldr	r3, [sp, #16]
   bd01c:	4543      	cmp	r3, r8
   bd01e:	d102      	bne.n	bd026 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bd020:	e7c9      	b.n	bcfb6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bd022:	2900      	cmp	r1, #0
   bd024:	d1f9      	bne.n	bd01a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bd026:	2300      	movs	r3, #0
   bd028:	9301      	str	r3, [sp, #4]
   bd02a:	7b63      	ldrb	r3, [r4, #13]
   bd02c:	9300      	str	r3, [sp, #0]
   bd02e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bd032:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bd034:	7830      	ldrb	r0, [r6, #0]
   bd036:	f7fc fd05 	bl	b9a44 <hal_spi_set_settings>
   bd03a:	e7bc      	b.n	bcfb6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bd03c:	e9cd 5500 	strd	r5, r5, [sp]
   bd040:	462b      	mov	r3, r5
   bd042:	462a      	mov	r2, r5
   bd044:	2101      	movs	r1, #1
   bd046:	e7f5      	b.n	bd034 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bd048 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bd048:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bd04a:	7800      	ldrb	r0, [r0, #0]
   bd04c:	f7fc fcca 	bl	b99e4 <hal_spi_transfer>
}
   bd050:	b2c0      	uxtb	r0, r0
   bd052:	bd08      	pop	{r3, pc}

000bd054 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   bd054:	b530      	push	{r4, r5, lr}
   bd056:	b087      	sub	sp, #28
   bd058:	4604      	mov	r4, r0
   bd05a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   bd05c:	9500      	str	r5, [sp, #0]
   bd05e:	7800      	ldrb	r0, [r0, #0]
   bd060:	f7fc fce0 	bl	b9a24 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   bd064:	b93d      	cbnz	r5, bd076 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   bd066:	7820      	ldrb	r0, [r4, #0]
   bd068:	a902      	add	r1, sp, #8
   bd06a:	f7fc fce3 	bl	b9a34 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   bd06e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bd072:	07db      	lsls	r3, r3, #31
   bd074:	d4f7      	bmi.n	bd066 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   bd076:	b007      	add	sp, #28
   bd078:	bd30      	pop	{r4, r5, pc}

000bd07a <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   bd07a:	b510      	push	{r4, lr}
   bd07c:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bd07e:	f7fc fbe9 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   bd082:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   bd084:	6823      	ldr	r3, [r4, #0]
   bd086:	4620      	mov	r0, r4
   bd088:	695b      	ldr	r3, [r3, #20]
   bd08a:	4798      	blx	r3
    if (c >= 0) return c;
   bd08c:	2800      	cmp	r0, #0
   bd08e:	da08      	bge.n	bd0a2 <_ZN6Stream9timedReadEv+0x28>
   bd090:	f7fc fbe0 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   bd094:	68e3      	ldr	r3, [r4, #12]
   bd096:	1ac0      	subs	r0, r0, r3
   bd098:	68a3      	ldr	r3, [r4, #8]
   bd09a:	4298      	cmp	r0, r3
   bd09c:	d3f2      	bcc.n	bd084 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   bd09e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   bd0a2:	bd10      	pop	{r4, pc}

000bd0a4 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   bd0a4:	b570      	push	{r4, r5, r6, lr}
   bd0a6:	460d      	mov	r5, r1
  String ret;
   bd0a8:	4909      	ldr	r1, [pc, #36]	; (bd0d0 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   bd0aa:	4604      	mov	r4, r0
   bd0ac:	4616      	mov	r6, r2
  String ret;
   bd0ae:	f000 f85c 	bl	bd16a <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   bd0b2:	4628      	mov	r0, r5
   bd0b4:	f7ff ffe1 	bl	bd07a <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   bd0b8:	2800      	cmp	r0, #0
   bd0ba:	db06      	blt.n	bd0ca <_ZN6Stream15readStringUntilEc+0x26>
   bd0bc:	4286      	cmp	r6, r0
   bd0be:	d004      	beq.n	bd0ca <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   bd0c0:	b2c1      	uxtb	r1, r0
   bd0c2:	4620      	mov	r0, r4
   bd0c4:	f000 f8d0 	bl	bd268 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   bd0c8:	e7f3      	b.n	bd0b2 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   bd0ca:	4620      	mov	r0, r4
   bd0cc:	bd70      	pop	{r4, r5, r6, pc}
   bd0ce:	bf00      	nop
   bd0d0:	000c0a8d 	.word	0x000c0a8d

000bd0d4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bd0d4:	b510      	push	{r4, lr}
   bd0d6:	4604      	mov	r4, r0
{
	free(buffer);
   bd0d8:	6800      	ldr	r0, [r0, #0]
   bd0da:	f7fc fe37 	bl	b9d4c <free>
}
   bd0de:	4620      	mov	r0, r4
   bd0e0:	bd10      	pop	{r4, pc}

000bd0e2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bd0e2:	b510      	push	{r4, lr}
   bd0e4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bd0e6:	6800      	ldr	r0, [r0, #0]
   bd0e8:	b108      	cbz	r0, bd0ee <_ZN6String10invalidateEv+0xc>
   bd0ea:	f7fc fe2f 	bl	b9d4c <free>
	buffer = NULL;
   bd0ee:	2300      	movs	r3, #0
	capacity = len = 0;
   bd0f0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bd0f4:	6023      	str	r3, [r4, #0]
}
   bd0f6:	bd10      	pop	{r4, pc}

000bd0f8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bd0f8:	b538      	push	{r3, r4, r5, lr}
   bd0fa:	4604      	mov	r4, r0
   bd0fc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bd0fe:	6800      	ldr	r0, [r0, #0]
   bd100:	3101      	adds	r1, #1
   bd102:	f7fc fe2b 	bl	b9d5c <realloc>
	if (newbuffer) {
   bd106:	b110      	cbz	r0, bd10e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bd108:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bd10c:	2001      	movs	r0, #1
	}
	return 0;
}
   bd10e:	bd38      	pop	{r3, r4, r5, pc}

000bd110 <_ZN6String7reserveEj>:
{
   bd110:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bd112:	6803      	ldr	r3, [r0, #0]
{
   bd114:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bd116:	b123      	cbz	r3, bd122 <_ZN6String7reserveEj+0x12>
   bd118:	6843      	ldr	r3, [r0, #4]
   bd11a:	428b      	cmp	r3, r1
   bd11c:	d301      	bcc.n	bd122 <_ZN6String7reserveEj+0x12>
   bd11e:	2001      	movs	r0, #1
}
   bd120:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bd122:	4620      	mov	r0, r4
   bd124:	f7ff ffe8 	bl	bd0f8 <_ZN6String12changeBufferEj>
   bd128:	2800      	cmp	r0, #0
   bd12a:	d0f9      	beq.n	bd120 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bd12c:	68a3      	ldr	r3, [r4, #8]
   bd12e:	2b00      	cmp	r3, #0
   bd130:	d1f5      	bne.n	bd11e <_ZN6String7reserveEj+0xe>
   bd132:	6822      	ldr	r2, [r4, #0]
   bd134:	7013      	strb	r3, [r2, #0]
   bd136:	e7f2      	b.n	bd11e <_ZN6String7reserveEj+0xe>

000bd138 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bd138:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd13a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bd13c:	4611      	mov	r1, r2
   bd13e:	9201      	str	r2, [sp, #4]
{
   bd140:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bd142:	f7ff ffe5 	bl	bd110 <_ZN6String7reserveEj>
   bd146:	9a01      	ldr	r2, [sp, #4]
   bd148:	b928      	cbnz	r0, bd156 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bd14a:	4620      	mov	r0, r4
   bd14c:	f7ff ffc9 	bl	bd0e2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bd150:	4620      	mov	r0, r4
   bd152:	b003      	add	sp, #12
   bd154:	bd30      	pop	{r4, r5, pc}
	len = length;
   bd156:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bd158:	4629      	mov	r1, r5
   bd15a:	6820      	ldr	r0, [r4, #0]
   bd15c:	f001 fadd 	bl	be71a <memcpy>
	buffer[len] = 0;
   bd160:	6822      	ldr	r2, [r4, #0]
   bd162:	68a3      	ldr	r3, [r4, #8]
   bd164:	2100      	movs	r1, #0
   bd166:	54d1      	strb	r1, [r2, r3]
	return *this;
   bd168:	e7f2      	b.n	bd150 <_ZN6String4copyEPKcj+0x18>

000bd16a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bd16a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bd16c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bd16e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bd172:	4604      	mov	r4, r0
	len = 0;
   bd174:	6083      	str	r3, [r0, #8]
	flags = 0;
   bd176:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bd178:	b141      	cbz	r1, bd18c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bd17a:	4608      	mov	r0, r1
   bd17c:	9101      	str	r1, [sp, #4]
   bd17e:	f001 fba8 	bl	be8d2 <strlen>
   bd182:	9901      	ldr	r1, [sp, #4]
   bd184:	4602      	mov	r2, r0
   bd186:	4620      	mov	r0, r4
   bd188:	f7ff ffd6 	bl	bd138 <_ZN6String4copyEPKcj>
}
   bd18c:	4620      	mov	r0, r4
   bd18e:	b002      	add	sp, #8
   bd190:	bd10      	pop	{r4, pc}

000bd192 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bd192:	b538      	push	{r3, r4, r5, lr}
   bd194:	4605      	mov	r5, r0
	if (buffer) {
   bd196:	6800      	ldr	r0, [r0, #0]
{
   bd198:	460c      	mov	r4, r1
	if (buffer) {
   bd19a:	b168      	cbz	r0, bd1b8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bd19c:	686a      	ldr	r2, [r5, #4]
   bd19e:	688b      	ldr	r3, [r1, #8]
   bd1a0:	429a      	cmp	r2, r3
   bd1a2:	d307      	bcc.n	bd1b4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bd1a4:	6809      	ldr	r1, [r1, #0]
   bd1a6:	f001 fb6e 	bl	be886 <strcpy>
			len = rhs.len;
   bd1aa:	68a3      	ldr	r3, [r4, #8]
   bd1ac:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bd1ae:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bd1b0:	60a3      	str	r3, [r4, #8]
}
   bd1b2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bd1b4:	f7fc fdca 	bl	b9d4c <free>
	buffer = rhs.buffer;
   bd1b8:	6823      	ldr	r3, [r4, #0]
   bd1ba:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bd1bc:	6863      	ldr	r3, [r4, #4]
   bd1be:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bd1c0:	68a3      	ldr	r3, [r4, #8]
   bd1c2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bd1c4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bd1c6:	e9c4 3300 	strd	r3, r3, [r4]
   bd1ca:	e7f1      	b.n	bd1b0 <_ZN6String4moveERS_+0x1e>

000bd1cc <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bd1cc:	b510      	push	{r4, lr}
	buffer = NULL;
   bd1ce:	2300      	movs	r3, #0
	capacity = 0;
   bd1d0:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bd1d4:	4604      	mov	r4, r0
	len = 0;
   bd1d6:	6083      	str	r3, [r0, #8]
	flags = 0;
   bd1d8:	7303      	strb	r3, [r0, #12]
	move(rval);
   bd1da:	f7ff ffda 	bl	bd192 <_ZN6String4moveERS_>
}
   bd1de:	4620      	mov	r0, r4
   bd1e0:	bd10      	pop	{r4, pc}

000bd1e2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bd1e2:	4288      	cmp	r0, r1
{
   bd1e4:	b510      	push	{r4, lr}
   bd1e6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bd1e8:	d005      	beq.n	bd1f6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bd1ea:	680b      	ldr	r3, [r1, #0]
   bd1ec:	b12b      	cbz	r3, bd1fa <_ZN6StringaSERKS_+0x18>
   bd1ee:	688a      	ldr	r2, [r1, #8]
   bd1f0:	4619      	mov	r1, r3
   bd1f2:	f7ff ffa1 	bl	bd138 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bd1f6:	4620      	mov	r0, r4
   bd1f8:	bd10      	pop	{r4, pc}
	else invalidate();
   bd1fa:	f7ff ff72 	bl	bd0e2 <_ZN6String10invalidateEv>
   bd1fe:	e7fa      	b.n	bd1f6 <_ZN6StringaSERKS_+0x14>

000bd200 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bd200:	b510      	push	{r4, lr}
	buffer = NULL;
   bd202:	2300      	movs	r3, #0
String::String(const String &value)
   bd204:	4604      	mov	r4, r0
	capacity = 0;
   bd206:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bd20a:	6083      	str	r3, [r0, #8]
	flags = 0;
   bd20c:	7303      	strb	r3, [r0, #12]
	*this = value;
   bd20e:	f7ff ffe8 	bl	bd1e2 <_ZN6StringaSERKS_>
}
   bd212:	4620      	mov	r0, r4
   bd214:	bd10      	pop	{r4, pc}

000bd216 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bd216:	b513      	push	{r0, r1, r4, lr}
   bd218:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bd21a:	b159      	cbz	r1, bd234 <_ZN6StringaSEPKc+0x1e>
   bd21c:	4608      	mov	r0, r1
   bd21e:	9101      	str	r1, [sp, #4]
   bd220:	f001 fb57 	bl	be8d2 <strlen>
   bd224:	9901      	ldr	r1, [sp, #4]
   bd226:	4602      	mov	r2, r0
   bd228:	4620      	mov	r0, r4
   bd22a:	f7ff ff85 	bl	bd138 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bd22e:	4620      	mov	r0, r4
   bd230:	b002      	add	sp, #8
   bd232:	bd10      	pop	{r4, pc}
	else invalidate();
   bd234:	f7ff ff55 	bl	bd0e2 <_ZN6String10invalidateEv>
   bd238:	e7f9      	b.n	bd22e <_ZN6StringaSEPKc+0x18>

000bd23a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bd23a:	b570      	push	{r4, r5, r6, lr}
   bd23c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bd23e:	460e      	mov	r6, r1
   bd240:	b909      	cbnz	r1, bd246 <_ZN6String6concatEPKcj+0xc>
   bd242:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bd244:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bd246:	b16a      	cbz	r2, bd264 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bd248:	6884      	ldr	r4, [r0, #8]
   bd24a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bd24c:	4621      	mov	r1, r4
   bd24e:	f7ff ff5f 	bl	bd110 <_ZN6String7reserveEj>
   bd252:	2800      	cmp	r0, #0
   bd254:	d0f5      	beq.n	bd242 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bd256:	6828      	ldr	r0, [r5, #0]
   bd258:	68ab      	ldr	r3, [r5, #8]
   bd25a:	4631      	mov	r1, r6
   bd25c:	4418      	add	r0, r3
   bd25e:	f001 fb12 	bl	be886 <strcpy>
	len = newlen;
   bd262:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bd264:	2001      	movs	r0, #1
   bd266:	e7ed      	b.n	bd244 <_ZN6String6concatEPKcj+0xa>

000bd268 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   bd268:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   bd26a:	2300      	movs	r3, #0
	buf[0] = c;
   bd26c:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   bd270:	2201      	movs	r2, #1
   bd272:	a901      	add	r1, sp, #4
	buf[1] = 0;
   bd274:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   bd278:	f7ff ffdf 	bl	bd23a <_ZN6String6concatEPKcj>
}
   bd27c:	b003      	add	sp, #12
   bd27e:	f85d fb04 	ldr.w	pc, [sp], #4

000bd282 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   bd282:	6802      	ldr	r2, [r0, #0]
{
   bd284:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   bd286:	6809      	ldr	r1, [r1, #0]
   bd288:	b162      	cbz	r2, bd2a4 <_ZNK6String9compareToERKS_+0x22>
   bd28a:	b941      	cbnz	r1, bd29e <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   bd28c:	6880      	ldr	r0, [r0, #8]
   bd28e:	b160      	cbz	r0, bd2aa <_ZNK6String9compareToERKS_+0x28>
   bd290:	7810      	ldrb	r0, [r2, #0]
   bd292:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   bd294:	6898      	ldr	r0, [r3, #8]
   bd296:	b140      	cbz	r0, bd2aa <_ZNK6String9compareToERKS_+0x28>
   bd298:	7809      	ldrb	r1, [r1, #0]
   bd29a:	4248      	negs	r0, r1
   bd29c:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   bd29e:	4610      	mov	r0, r2
   bd2a0:	f001 bae7 	b.w	be872 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   bd2a4:	2900      	cmp	r1, #0
   bd2a6:	d1f5      	bne.n	bd294 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   bd2a8:	4608      	mov	r0, r1
}
   bd2aa:	4770      	bx	lr

000bd2ac <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   bd2ac:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   bd2ae:	6882      	ldr	r2, [r0, #8]
   bd2b0:	688b      	ldr	r3, [r1, #8]
   bd2b2:	429a      	cmp	r2, r3
   bd2b4:	d105      	bne.n	bd2c2 <_ZNK6String6equalsERKS_+0x16>
   bd2b6:	f7ff ffe4 	bl	bd282 <_ZNK6String9compareToERKS_>
   bd2ba:	fab0 f080 	clz	r0, r0
   bd2be:	0940      	lsrs	r0, r0, #5
}
   bd2c0:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   bd2c2:	2000      	movs	r0, #0
   bd2c4:	e7fc      	b.n	bd2c0 <_ZNK6String6equalsERKS_+0x14>

000bd2c6 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   bd2c6:	6883      	ldr	r3, [r0, #8]
   bd2c8:	428b      	cmp	r3, r1
   bd2ca:	d903      	bls.n	bd2d4 <_ZNK6StringixEj+0xe>
   bd2cc:	6800      	ldr	r0, [r0, #0]
   bd2ce:	b110      	cbz	r0, bd2d6 <_ZNK6StringixEj+0x10>
	return buffer[index];
   bd2d0:	5c40      	ldrb	r0, [r0, r1]
   bd2d2:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   bd2d4:	2000      	movs	r0, #0
}
   bd2d6:	4770      	bx	lr

000bd2d8 <_ZNK6String6charAtEj>:
	return operator[](loc);
   bd2d8:	f7ff bff5 	b.w	bd2c6 <_ZNK6StringixEj>

000bd2dc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bd2dc:	4b05      	ldr	r3, [pc, #20]	; (bd2f4 <_GLOBAL__sub_I_System+0x18>)
   bd2de:	2202      	movs	r2, #2
   bd2e0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   bd2e2:	4b05      	ldr	r3, [pc, #20]	; (bd2f8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bd2e4:	4a05      	ldr	r2, [pc, #20]	; (bd2fc <_GLOBAL__sub_I_System+0x20>)
   bd2e6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bd2e8:	2000      	movs	r0, #0
   bd2ea:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bd2ee:	f7fc bc59 	b.w	b9ba4 <set_system_mode>
   bd2f2:	bf00      	nop
   bd2f4:	2003e6c4 	.word	0x2003e6c4
   bd2f8:	2003e6b8 	.word	0x2003e6b8
   bd2fc:	ffff0000 	.word	0xffff0000

000bd300 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bd300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bd304:	4a15      	ldr	r2, [pc, #84]	; (bd35c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bd306:	f8df 8060 	ldr.w	r8, [pc, #96]	; bd368 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bd30a:	e9d2 6300 	ldrd	r6, r3, [r2]
   bd30e:	1980      	adds	r0, r0, r6
   bd310:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bd314:	4b12      	ldr	r3, [pc, #72]	; (bd360 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bd316:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bd31a:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bd31e:	1986      	adds	r6, r0, r6
   bd320:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bd324:	42bb      	cmp	r3, r7
   bd326:	bf08      	it	eq
   bd328:	42b2      	cmpeq	r2, r6
{
   bd32a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bd32c:	d013      	beq.n	bd356 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bd32e:	a903      	add	r1, sp, #12
   bd330:	4668      	mov	r0, sp
   bd332:	e9cd 6700 	strd	r6, r7, [sp]
   bd336:	f7fc fd61 	bl	b9dfc <localtime_r>
	calendar_time.tm_year += 1900;
   bd33a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd33c:	4d09      	ldr	r5, [pc, #36]	; (bd364 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bd33e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd342:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bd344:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bd348:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bd34a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bd34c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bd34e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bd352:	6823      	ldr	r3, [r4, #0]
   bd354:	602b      	str	r3, [r5, #0]
    }
}
   bd356:	b00c      	add	sp, #48	; 0x30
   bd358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd35c:	2003e6f8 	.word	0x2003e6f8
   bd360:	2003e6f0 	.word	0x2003e6f0
   bd364:	2003e6cc 	.word	0x2003e6cc
   bd368:	2003e700 	.word	0x2003e700

000bd36c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   bd36c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bd36e:	2000      	movs	r0, #0
   bd370:	f7fc fc74 	bl	b9c5c <spark_sync_time_pending>
   bd374:	b128      	cbz	r0, bd382 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bd376:	f7fc fc59 	bl	b9c2c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bd37a:	f080 0001 	eor.w	r0, r0, #1
   bd37e:	b2c0      	uxtb	r0, r0
    }
   bd380:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bd382:	2001      	movs	r0, #1
   bd384:	e7fc      	b.n	bd380 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bd388 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   bd388:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bd38a:	f7ff ffb9 	bl	bd300 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   bd38e:	4b02      	ldr	r3, [pc, #8]	; (bd398 <_ZN9TimeClass5monthEx+0x10>)
   bd390:	6918      	ldr	r0, [r3, #16]
}
   bd392:	3001      	adds	r0, #1
   bd394:	bd08      	pop	{r3, pc}
   bd396:	bf00      	nop
   bd398:	2003e6cc 	.word	0x2003e6cc

000bd39c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   bd39c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bd39e:	2000      	movs	r0, #0
   bd3a0:	f7fc fa60 	bl	b9864 <hal_rtc_time_is_valid>
    if (rtcstate)
   bd3a4:	4604      	mov	r4, r0
   bd3a6:	b9a0      	cbnz	r0, bd3d2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bd3a8:	f7fc fbf4 	bl	b9b94 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bd3ac:	2801      	cmp	r0, #1
   bd3ae:	d110      	bne.n	bd3d2 <_ZN9TimeClass7isValidEv+0x36>
   bd3b0:	4620      	mov	r0, r4
   bd3b2:	f7fc fc17 	bl	b9be4 <system_thread_get_state>
   bd3b6:	b960      	cbnz	r0, bd3d2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bd3b8:	f7ff ffd8 	bl	bd36c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bd3bc:	b910      	cbnz	r0, bd3c4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bd3be:	f7fc fc2d 	bl	b9c1c <spark_process>
        while (_while() && !_condition()) {
   bd3c2:	e7f9      	b.n	bd3b8 <_ZN9TimeClass7isValidEv+0x1c>
   bd3c4:	f7ff ffd2 	bl	bd36c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bd3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bd3cc:	2000      	movs	r0, #0
   bd3ce:	f7fc ba49 	b.w	b9864 <hal_rtc_time_is_valid>
}
   bd3d2:	4620      	mov	r0, r4
   bd3d4:	bd10      	pop	{r4, pc}

000bd3d6 <_ZN9TimeClass3nowEv>:
{
   bd3d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bd3d8:	f7ff ffe0 	bl	bd39c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bd3dc:	2210      	movs	r2, #16
   bd3de:	2100      	movs	r1, #0
   bd3e0:	4668      	mov	r0, sp
   bd3e2:	f001 f9c2 	bl	be76a <memset>
    hal_rtc_get_time(&tv, nullptr);
   bd3e6:	2100      	movs	r1, #0
   bd3e8:	4668      	mov	r0, sp
   bd3ea:	f7fc fa43 	bl	b9874 <hal_rtc_get_time>
}
   bd3ee:	9800      	ldr	r0, [sp, #0]
   bd3f0:	b005      	add	sp, #20
   bd3f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bd3f8 <_ZN9TimeClass4hourEv>:
{
   bd3f8:	b508      	push	{r3, lr}
	return hour(now());
   bd3fa:	f7ff ffec 	bl	bd3d6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bd3fe:	17c1      	asrs	r1, r0, #31
   bd400:	f7ff ff7e 	bl	bd300 <_ZL22Refresh_UnixTime_Cachex>
}
   bd404:	4b01      	ldr	r3, [pc, #4]	; (bd40c <_ZN9TimeClass4hourEv+0x14>)
   bd406:	6898      	ldr	r0, [r3, #8]
   bd408:	bd08      	pop	{r3, pc}
   bd40a:	bf00      	nop
   bd40c:	2003e6cc 	.word	0x2003e6cc

000bd410 <_ZN9TimeClass6minuteEv>:
{
   bd410:	b508      	push	{r3, lr}
	return minute(now());
   bd412:	f7ff ffe0 	bl	bd3d6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bd416:	17c1      	asrs	r1, r0, #31
   bd418:	f7ff ff72 	bl	bd300 <_ZL22Refresh_UnixTime_Cachex>
}
   bd41c:	4b01      	ldr	r3, [pc, #4]	; (bd424 <_ZN9TimeClass6minuteEv+0x14>)
   bd41e:	6858      	ldr	r0, [r3, #4]
   bd420:	bd08      	pop	{r3, pc}
   bd422:	bf00      	nop
   bd424:	2003e6cc 	.word	0x2003e6cc

000bd428 <_ZN9TimeClass6secondEv>:
{
   bd428:	b508      	push	{r3, lr}
	return second(now());
   bd42a:	f7ff ffd4 	bl	bd3d6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bd42e:	17c1      	asrs	r1, r0, #31
   bd430:	f7ff ff66 	bl	bd300 <_ZL22Refresh_UnixTime_Cachex>
}
   bd434:	4b01      	ldr	r3, [pc, #4]	; (bd43c <_ZN9TimeClass6secondEv+0x14>)
   bd436:	6818      	ldr	r0, [r3, #0]
   bd438:	bd08      	pop	{r3, pc}
   bd43a:	bf00      	nop
   bd43c:	2003e6cc 	.word	0x2003e6cc

000bd440 <_ZN9TimeClass3dayEv>:
{
   bd440:	b508      	push	{r3, lr}
	return day(now());
   bd442:	f7ff ffc8 	bl	bd3d6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bd446:	17c1      	asrs	r1, r0, #31
   bd448:	f7ff ff5a 	bl	bd300 <_ZL22Refresh_UnixTime_Cachex>
}
   bd44c:	4b01      	ldr	r3, [pc, #4]	; (bd454 <_ZN9TimeClass3dayEv+0x14>)
   bd44e:	68d8      	ldr	r0, [r3, #12]
   bd450:	bd08      	pop	{r3, pc}
   bd452:	bf00      	nop
   bd454:	2003e6cc 	.word	0x2003e6cc

000bd458 <_ZN9TimeClass5monthEv>:
{
   bd458:	b508      	push	{r3, lr}
	return month(now());
   bd45a:	f7ff ffbc 	bl	bd3d6 <_ZN9TimeClass3nowEv>
}
   bd45e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   bd462:	17c1      	asrs	r1, r0, #31
   bd464:	f7ff bf90 	b.w	bd388 <_ZN9TimeClass5monthEx>

000bd468 <_ZN9TimeClass4yearEv>:
{
   bd468:	b508      	push	{r3, lr}
	return year(now());
   bd46a:	f7ff ffb4 	bl	bd3d6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bd46e:	17c1      	asrs	r1, r0, #31
   bd470:	f7ff ff46 	bl	bd300 <_ZL22Refresh_UnixTime_Cachex>
}
   bd474:	4b01      	ldr	r3, [pc, #4]	; (bd47c <_ZN9TimeClass4yearEv+0x14>)
   bd476:	6958      	ldr	r0, [r3, #20]
   bd478:	bd08      	pop	{r3, pc}
   bd47a:	bf00      	nop
   bd47c:	2003e6cc 	.word	0x2003e6cc

000bd480 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bd480:	4b02      	ldr	r3, [pc, #8]	; (bd48c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bd482:	681a      	ldr	r2, [r3, #0]
   bd484:	4b02      	ldr	r3, [pc, #8]	; (bd490 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bd486:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bd488:	4770      	bx	lr
   bd48a:	bf00      	nop
   bd48c:	2003da94 	.word	0x2003da94
   bd490:	2003e6c8 	.word	0x2003e6c8

000bd494 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bd494:	4770      	bx	lr

000bd496 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bd496:	7441      	strb	r1, [r0, #17]
}
   bd498:	4770      	bx	lr

000bd49a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bd49a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bd49c:	7c00      	ldrb	r0, [r0, #16]
   bd49e:	f7fc fb19 	bl	b9ad4 <hal_usart_available_data_for_write>
}
   bd4a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bd4a6:	bd08      	pop	{r3, pc}

000bd4a8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bd4a8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bd4aa:	7c00      	ldrb	r0, [r0, #16]
   bd4ac:	f7fc faea 	bl	b9a84 <hal_usart_available>
}
   bd4b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bd4b4:	bd08      	pop	{r3, pc}

000bd4b6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bd4b6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bd4b8:	7c00      	ldrb	r0, [r0, #16]
   bd4ba:	f7fc faf3 	bl	b9aa4 <hal_usart_peek>
}
   bd4be:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bd4c2:	bd08      	pop	{r3, pc}

000bd4c4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bd4c4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bd4c6:	7c00      	ldrb	r0, [r0, #16]
   bd4c8:	f7fc fae4 	bl	b9a94 <hal_usart_read>
}
   bd4cc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bd4d0:	bd08      	pop	{r3, pc}

000bd4d2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bd4d2:	7c00      	ldrb	r0, [r0, #16]
   bd4d4:	f7fc baee 	b.w	b9ab4 <hal_usart_flush>

000bd4d8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bd4d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bd4da:	7c45      	ldrb	r5, [r0, #17]
{
   bd4dc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bd4de:	b12d      	cbz	r5, bd4ec <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bd4e0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bd4e2:	b003      	add	sp, #12
   bd4e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bd4e8:	f7fc bac4 	b.w	b9a74 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bd4ec:	7c00      	ldrb	r0, [r0, #16]
   bd4ee:	9101      	str	r1, [sp, #4]
   bd4f0:	f7fc faf0 	bl	b9ad4 <hal_usart_available_data_for_write>
   bd4f4:	2800      	cmp	r0, #0
   bd4f6:	9901      	ldr	r1, [sp, #4]
   bd4f8:	dcf2      	bgt.n	bd4e0 <_ZN11USARTSerial5writeEh+0x8>
}
   bd4fa:	4628      	mov	r0, r5
   bd4fc:	b003      	add	sp, #12
   bd4fe:	bd30      	pop	{r4, r5, pc}

000bd500 <_ZN11USARTSerialD0Ev>:
   bd500:	b510      	push	{r4, lr}
   bd502:	2114      	movs	r1, #20
   bd504:	4604      	mov	r4, r0
   bd506:	f7f6 fdca 	bl	b409e <_ZdlPvj>
   bd50a:	4620      	mov	r0, r4
   bd50c:	bd10      	pop	{r4, pc}
	...

000bd510 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bd510:	b510      	push	{r4, lr}
   bd512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bd516:	4604      	mov	r4, r0
   bd518:	4608      	mov	r0, r1
   bd51a:	4611      	mov	r1, r2
   bd51c:	2200      	movs	r2, #0
   bd51e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bd522:	4b04      	ldr	r3, [pc, #16]	; (bd534 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bd524:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bd526:	2301      	movs	r3, #1
  _serial = serial;
   bd528:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bd52a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bd52c:	f7fc fae2 	bl	b9af4 <hal_usart_init_ex>
}
   bd530:	4620      	mov	r0, r4
   bd532:	bd10      	pop	{r4, pc}
   bd534:	000c1b84 	.word	0x000c1b84

000bd538 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bd538:	7c00      	ldrb	r0, [r0, #16]
   bd53a:	2300      	movs	r3, #0
   bd53c:	f7fc bad2 	b.w	b9ae4 <hal_usart_begin_config>

000bd540 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bd540:	2200      	movs	r2, #0
   bd542:	f7ff bff9 	b.w	bd538 <_ZN11USARTSerial5beginEmm>

000bd546 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bd546:	7441      	strb	r1, [r0, #17]
}
   bd548:	4770      	bx	lr

000bd54a <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bd54a:	4770      	bx	lr

000bd54c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bd54c:	4770      	bx	lr

000bd54e <_ZN9USBSerial4readEv>:
{
   bd54e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bd550:	2100      	movs	r1, #0
   bd552:	7c00      	ldrb	r0, [r0, #16]
   bd554:	f7fc faf6 	bl	b9b44 <HAL_USB_USART_Receive_Data>
}
   bd558:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bd55c:	bd08      	pop	{r3, pc}

000bd55e <_ZN9USBSerial4peekEv>:
{
   bd55e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bd560:	2101      	movs	r1, #1
   bd562:	7c00      	ldrb	r0, [r0, #16]
   bd564:	f7fc faee 	bl	b9b44 <HAL_USB_USART_Receive_Data>
}
   bd568:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bd56c:	bd08      	pop	{r3, pc}

000bd56e <_ZN9USBSerial17availableForWriteEv>:
{
   bd56e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bd570:	7c00      	ldrb	r0, [r0, #16]
   bd572:	f7fc fadf 	bl	b9b34 <HAL_USB_USART_Available_Data_For_Write>
}
   bd576:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bd57a:	bd08      	pop	{r3, pc}

000bd57c <_ZN9USBSerial9availableEv>:
{
   bd57c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bd57e:	7c00      	ldrb	r0, [r0, #16]
   bd580:	f7fc fad0 	bl	b9b24 <HAL_USB_USART_Available_Data>
}
   bd584:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bd588:	bd08      	pop	{r3, pc}

000bd58a <_ZN9USBSerial5writeEh>:
{
   bd58a:	b513      	push	{r0, r1, r4, lr}
   bd58c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bd58e:	7c00      	ldrb	r0, [r0, #16]
{
   bd590:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bd592:	f7fc facf 	bl	b9b34 <HAL_USB_USART_Available_Data_For_Write>
   bd596:	2800      	cmp	r0, #0
   bd598:	9901      	ldr	r1, [sp, #4]
   bd59a:	dc01      	bgt.n	bd5a0 <_ZN9USBSerial5writeEh+0x16>
   bd59c:	7c60      	ldrb	r0, [r4, #17]
   bd59e:	b120      	cbz	r0, bd5aa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bd5a0:	7c20      	ldrb	r0, [r4, #16]
   bd5a2:	f7fc fad7 	bl	b9b54 <HAL_USB_USART_Send_Data>
   bd5a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bd5aa:	b002      	add	sp, #8
   bd5ac:	bd10      	pop	{r4, pc}

000bd5ae <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bd5ae:	7c00      	ldrb	r0, [r0, #16]
   bd5b0:	f7fc bad8 	b.w	b9b64 <HAL_USB_USART_Flush_Data>

000bd5b4 <_ZN9USBSerialD0Ev>:
   bd5b4:	b510      	push	{r4, lr}
   bd5b6:	2114      	movs	r1, #20
   bd5b8:	4604      	mov	r4, r0
   bd5ba:	f7f6 fd70 	bl	b409e <_ZdlPvj>
   bd5be:	4620      	mov	r0, r4
   bd5c0:	bd10      	pop	{r4, pc}
	...

000bd5c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bd5c4:	b510      	push	{r4, lr}
   bd5c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bd5ca:	4604      	mov	r4, r0
   bd5cc:	4608      	mov	r0, r1
   bd5ce:	2100      	movs	r1, #0
   bd5d0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bd5d4:	4b04      	ldr	r3, [pc, #16]	; (bd5e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bd5d6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bd5d8:	2301      	movs	r3, #1
  _serial = serial;
   bd5da:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bd5dc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bd5de:	4611      	mov	r1, r2
   bd5e0:	f7fc fa90 	bl	b9b04 <HAL_USB_USART_Init>
}
   bd5e4:	4620      	mov	r0, r4
   bd5e6:	bd10      	pop	{r4, pc}
   bd5e8:	000c1bb4 	.word	0x000c1bb4

000bd5ec <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bd5ec:	7c00      	ldrb	r0, [r0, #16]
   bd5ee:	2200      	movs	r2, #0
   bd5f0:	f7fc ba90 	b.w	b9b14 <HAL_USB_USART_Begin>

000bd5f4 <_Z19acquireSerialBufferv>:
{
   bd5f4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bd5f6:	2214      	movs	r2, #20
{
   bd5f8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bd5fa:	2100      	movs	r1, #0
   bd5fc:	f001 f8b5 	bl	be76a <memset>
}
   bd600:	4620      	mov	r0, r4
   bd602:	bd10      	pop	{r4, pc}

000bd604 <_Z16_fetch_usbserialv>:
{
   bd604:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bd606:	4c0f      	ldr	r4, [pc, #60]	; (bd644 <_Z16_fetch_usbserialv+0x40>)
{
   bd608:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bd60a:	a803      	add	r0, sp, #12
   bd60c:	f7ff fff2 	bl	bd5f4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bd610:	7821      	ldrb	r1, [r4, #0]
   bd612:	f3bf 8f5b 	dmb	ish
   bd616:	f011 0101 	ands.w	r1, r1, #1
   bd61a:	d10f      	bne.n	bd63c <_Z16_fetch_usbserialv+0x38>
   bd61c:	4620      	mov	r0, r4
   bd61e:	9101      	str	r1, [sp, #4]
   bd620:	f7f6 fd4c 	bl	b40bc <__cxa_guard_acquire>
   bd624:	9901      	ldr	r1, [sp, #4]
   bd626:	b148      	cbz	r0, bd63c <_Z16_fetch_usbserialv+0x38>
   bd628:	aa03      	add	r2, sp, #12
   bd62a:	4807      	ldr	r0, [pc, #28]	; (bd648 <_Z16_fetch_usbserialv+0x44>)
   bd62c:	f7ff ffca 	bl	bd5c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bd630:	4620      	mov	r0, r4
   bd632:	f7f6 fd48 	bl	b40c6 <__cxa_guard_release>
   bd636:	4805      	ldr	r0, [pc, #20]	; (bd64c <_Z16_fetch_usbserialv+0x48>)
   bd638:	f001 f852 	bl	be6e0 <atexit>
	return _usbserial;
}
   bd63c:	4802      	ldr	r0, [pc, #8]	; (bd648 <_Z16_fetch_usbserialv+0x44>)
   bd63e:	b008      	add	sp, #32
   bd640:	bd10      	pop	{r4, pc}
   bd642:	bf00      	nop
   bd644:	2003e708 	.word	0x2003e708
   bd648:	2003e70c 	.word	0x2003e70c
   bd64c:	000bd54b 	.word	0x000bd54b

000bd650 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bd650:	4b01      	ldr	r3, [pc, #4]	; (bd658 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bd652:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bd654:	4770      	bx	lr
   bd656:	bf00      	nop
   bd658:	2003da98 	.word	0x2003da98

000bd65c <serialEventRun>:
{
   bd65c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bd65e:	4b0b      	ldr	r3, [pc, #44]	; (bd68c <serialEventRun+0x30>)
   bd660:	b143      	cbz	r3, bd674 <serialEventRun+0x18>
   bd662:	f7ff ffcf 	bl	bd604 <_Z16_fetch_usbserialv>
   bd666:	6803      	ldr	r3, [r0, #0]
   bd668:	691b      	ldr	r3, [r3, #16]
   bd66a:	4798      	blx	r3
   bd66c:	2800      	cmp	r0, #0
   bd66e:	dd01      	ble.n	bd674 <serialEventRun+0x18>
        serialEvent();
   bd670:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bd674:	4b06      	ldr	r3, [pc, #24]	; (bd690 <serialEventRun+0x34>)
   bd676:	b143      	cbz	r3, bd68a <serialEventRun+0x2e>
   bd678:	f000 f95c 	bl	bd934 <_Z22__fetch_global_Serial1v>
   bd67c:	6803      	ldr	r3, [r0, #0]
   bd67e:	691b      	ldr	r3, [r3, #16]
   bd680:	4798      	blx	r3
   bd682:	2800      	cmp	r0, #0
   bd684:	dd01      	ble.n	bd68a <serialEventRun+0x2e>
        serialEvent1();
   bd686:	f3af 8000 	nop.w
}
   bd68a:	bd08      	pop	{r3, pc}
	...

000bd694 <_post_loop>:
{
   bd694:	b508      	push	{r3, lr}
	serialEventRun();
   bd696:	f7ff ffe1 	bl	bd65c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bd69a:	f7fc f8db 	bl	b9854 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bd69e:	4b01      	ldr	r3, [pc, #4]	; (bd6a4 <_post_loop+0x10>)
   bd6a0:	6018      	str	r0, [r3, #0]
}
   bd6a2:	bd08      	pop	{r3, pc}
   bd6a4:	2003e728 	.word	0x2003e728

000bd6a8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bd6a8:	4805      	ldr	r0, [pc, #20]	; (bd6c0 <_Z33system_initialize_user_backup_ramv+0x18>)
   bd6aa:	4a06      	ldr	r2, [pc, #24]	; (bd6c4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bd6ac:	4906      	ldr	r1, [pc, #24]	; (bd6c8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bd6ae:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bd6b0:	1a12      	subs	r2, r2, r0
   bd6b2:	f001 f832 	bl	be71a <memcpy>
    __backup_sram_signature = signature;
   bd6b6:	4b05      	ldr	r3, [pc, #20]	; (bd6cc <_Z33system_initialize_user_backup_ramv+0x24>)
   bd6b8:	4a05      	ldr	r2, [pc, #20]	; (bd6d0 <_Z33system_initialize_user_backup_ramv+0x28>)
   bd6ba:	601a      	str	r2, [r3, #0]
}
   bd6bc:	bd08      	pop	{r3, pc}
   bd6be:	bf00      	nop
   bd6c0:	2003f400 	.word	0x2003f400
   bd6c4:	2003f404 	.word	0x2003f404
   bd6c8:	000c2144 	.word	0x000c2144
   bd6cc:	2003f400 	.word	0x2003f400
   bd6d0:	9a271c1e 	.word	0x9a271c1e

000bd6d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bd6d4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bd6d6:	2300      	movs	r3, #0
   bd6d8:	9300      	str	r3, [sp, #0]
   bd6da:	461a      	mov	r2, r3
   bd6dc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bd6e0:	f7fc fa92 	bl	b9c08 <system_ctrl_set_result>
}
   bd6e4:	b003      	add	sp, #12
   bd6e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bd6ec <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bd6ec:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bd6ee:	8843      	ldrh	r3, [r0, #2]
   bd6f0:	2b0a      	cmp	r3, #10
   bd6f2:	d008      	beq.n	bd706 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bd6f4:	2b50      	cmp	r3, #80	; 0x50
   bd6f6:	d10b      	bne.n	bd710 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bd6f8:	4b09      	ldr	r3, [pc, #36]	; (bd720 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bd6fa:	681b      	ldr	r3, [r3, #0]
   bd6fc:	b14b      	cbz	r3, bd712 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bd6fe:	b003      	add	sp, #12
   bd700:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bd704:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bd706:	f7ff ffe5 	bl	bd6d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bd70a:	b003      	add	sp, #12
   bd70c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bd710:	2300      	movs	r3, #0
   bd712:	9300      	str	r3, [sp, #0]
   bd714:	461a      	mov	r2, r3
   bd716:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bd71a:	f7fc fa75 	bl	b9c08 <system_ctrl_set_result>
}
   bd71e:	e7f4      	b.n	bd70a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bd720:	2003e724 	.word	0x2003e724

000bd724 <module_user_init_hook>:
{
   bd724:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bd726:	4812      	ldr	r0, [pc, #72]	; (bd770 <module_user_init_hook+0x4c>)
   bd728:	2100      	movs	r1, #0
   bd72a:	f7fc fb5f 	bl	b9dec <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bd72e:	4b11      	ldr	r3, [pc, #68]	; (bd774 <module_user_init_hook+0x50>)
   bd730:	681a      	ldr	r2, [r3, #0]
   bd732:	4b11      	ldr	r3, [pc, #68]	; (bd778 <module_user_init_hook+0x54>)
   bd734:	429a      	cmp	r2, r3
   bd736:	4b11      	ldr	r3, [pc, #68]	; (bd77c <module_user_init_hook+0x58>)
   bd738:	bf0c      	ite	eq
   bd73a:	2201      	moveq	r2, #1
   bd73c:	2200      	movne	r2, #0
   bd73e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bd740:	d001      	beq.n	bd746 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bd742:	f7ff ffb1 	bl	bd6a8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bd746:	f7fc f86d 	bl	b9824 <HAL_RNG_GetRandomNumber>
   bd74a:	4604      	mov	r4, r0
    srand(seed);
   bd74c:	f001 f816 	bl	be77c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bd750:	4b0b      	ldr	r3, [pc, #44]	; (bd780 <module_user_init_hook+0x5c>)
   bd752:	b113      	cbz	r3, bd75a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bd754:	4620      	mov	r0, r4
   bd756:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bd75a:	2100      	movs	r1, #0
   bd75c:	4808      	ldr	r0, [pc, #32]	; (bd780 <module_user_init_hook+0x5c>)
   bd75e:	f7fc fa85 	bl	b9c6c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bd762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bd766:	4807      	ldr	r0, [pc, #28]	; (bd784 <module_user_init_hook+0x60>)
   bd768:	2100      	movs	r1, #0
   bd76a:	f7fc ba43 	b.w	b9bf4 <system_ctrl_set_app_request_handler>
   bd76e:	bf00      	nop
   bd770:	000bd651 	.word	0x000bd651
   bd774:	2003f400 	.word	0x2003f400
   bd778:	9a271c1e 	.word	0x9a271c1e
   bd77c:	2003e720 	.word	0x2003e720
   bd780:	00000000 	.word	0x00000000
   bd784:	000bd6ed 	.word	0x000bd6ed

000bd788 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bd788:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   bd78a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bd78c:	d902      	bls.n	bd794 <pinAvailable+0xc>
    return false;
   bd78e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bd790:	b002      	add	sp, #8
   bd792:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bd794:	f1a0 030b 	sub.w	r3, r0, #11
   bd798:	2b02      	cmp	r3, #2
   bd79a:	d81a      	bhi.n	bd7d2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bd79c:	4c17      	ldr	r4, [pc, #92]	; (bd7fc <pinAvailable+0x74>)
   bd79e:	7821      	ldrb	r1, [r4, #0]
   bd7a0:	f3bf 8f5b 	dmb	ish
   bd7a4:	f011 0101 	ands.w	r1, r1, #1
   bd7a8:	d10b      	bne.n	bd7c2 <pinAvailable+0x3a>
   bd7aa:	4620      	mov	r0, r4
   bd7ac:	9101      	str	r1, [sp, #4]
   bd7ae:	f7f6 fc85 	bl	b40bc <__cxa_guard_acquire>
   bd7b2:	9901      	ldr	r1, [sp, #4]
   bd7b4:	b128      	cbz	r0, bd7c2 <pinAvailable+0x3a>
   bd7b6:	4812      	ldr	r0, [pc, #72]	; (bd800 <pinAvailable+0x78>)
   bd7b8:	f7ff fba0 	bl	bcefc <_ZN8SPIClassC1E19hal_spi_interface_t>
   bd7bc:	4620      	mov	r0, r4
   bd7be:	f7f6 fc82 	bl	b40c6 <__cxa_guard_release>
   bd7c2:	4b0f      	ldr	r3, [pc, #60]	; (bd800 <pinAvailable+0x78>)
   bd7c4:	7818      	ldrb	r0, [r3, #0]
   bd7c6:	f7fc f91d 	bl	b9a04 <hal_spi_is_enabled>
   bd7ca:	2800      	cmp	r0, #0
   bd7cc:	d1df      	bne.n	bd78e <pinAvailable+0x6>
  return true; // 'pin' is available
   bd7ce:	2001      	movs	r0, #1
   bd7d0:	e7de      	b.n	bd790 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bd7d2:	2801      	cmp	r0, #1
   bd7d4:	d809      	bhi.n	bd7ea <pinAvailable+0x62>
   bd7d6:	f000 f86d 	bl	bd8b4 <_Z19__fetch_global_Wirev>
   bd7da:	2100      	movs	r1, #0
   bd7dc:	7c00      	ldrb	r0, [r0, #16]
   bd7de:	f7fc f8d1 	bl	b9984 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bd7e2:	f080 0001 	eor.w	r0, r0, #1
   bd7e6:	b2c0      	uxtb	r0, r0
   bd7e8:	e7d2      	b.n	bd790 <pinAvailable+0x8>
   bd7ea:	3809      	subs	r0, #9
   bd7ec:	2801      	cmp	r0, #1
   bd7ee:	d8ee      	bhi.n	bd7ce <pinAvailable+0x46>
   bd7f0:	f000 f8a0 	bl	bd934 <_Z22__fetch_global_Serial1v>
   bd7f4:	7c00      	ldrb	r0, [r0, #16]
   bd7f6:	f7fc f965 	bl	b9ac4 <hal_usart_is_enabled>
   bd7fa:	e7f2      	b.n	bd7e2 <pinAvailable+0x5a>
   bd7fc:	2003e64c 	.word	0x2003e64c
   bd800:	2003e650 	.word	0x2003e650

000bd804 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bd804:	2825      	cmp	r0, #37	; 0x25
{
   bd806:	b538      	push	{r3, r4, r5, lr}
   bd808:	4604      	mov	r4, r0
   bd80a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bd80c:	d80a      	bhi.n	bd824 <pinMode+0x20>
   bd80e:	29ff      	cmp	r1, #255	; 0xff
   bd810:	d008      	beq.n	bd824 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bd812:	f7ff ffb9 	bl	bd788 <pinAvailable>
   bd816:	b128      	cbz	r0, bd824 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bd818:	4629      	mov	r1, r5
   bd81a:	4620      	mov	r0, r4
}
   bd81c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bd820:	f7fc b838 	b.w	b9894 <HAL_Pin_Mode>
}
   bd824:	bd38      	pop	{r3, r4, r5, pc}

000bd826 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bd826:	b538      	push	{r3, r4, r5, lr}
   bd828:	4604      	mov	r4, r0
   bd82a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bd82c:	f7fc f83a 	bl	b98a4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bd830:	28ff      	cmp	r0, #255	; 0xff
   bd832:	d010      	beq.n	bd856 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bd834:	2806      	cmp	r0, #6
   bd836:	d804      	bhi.n	bd842 <digitalWrite+0x1c>
   bd838:	234d      	movs	r3, #77	; 0x4d
   bd83a:	fa23 f000 	lsr.w	r0, r3, r0
   bd83e:	07c3      	lsls	r3, r0, #31
   bd840:	d409      	bmi.n	bd856 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bd842:	4620      	mov	r0, r4
   bd844:	f7ff ffa0 	bl	bd788 <pinAvailable>
   bd848:	b128      	cbz	r0, bd856 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bd84a:	4629      	mov	r1, r5
   bd84c:	4620      	mov	r0, r4
}
   bd84e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bd852:	f7fc b82f 	b.w	b98b4 <HAL_GPIO_Write>
}
   bd856:	bd38      	pop	{r3, r4, r5, pc}

000bd858 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bd858:	280d      	cmp	r0, #13
{
   bd85a:	b510      	push	{r4, lr}
   bd85c:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bd85e:	bf9c      	itt	ls
   bd860:	340e      	addls	r4, #14
   bd862:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bd864:	4620      	mov	r0, r4
   bd866:	f7ff ff8f 	bl	bd788 <pinAvailable>
   bd86a:	b150      	cbz	r0, bd882 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bd86c:	2103      	movs	r1, #3
   bd86e:	4620      	mov	r0, r4
   bd870:	f7fc f808 	bl	b9884 <HAL_Validate_Pin_Function>
   bd874:	2803      	cmp	r0, #3
   bd876:	d104      	bne.n	bd882 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bd878:	4620      	mov	r0, r4
}
   bd87a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bd87e:	f7fc b831 	b.w	b98e4 <hal_adc_read>
}
   bd882:	2000      	movs	r0, #0
   bd884:	bd10      	pop	{r4, pc}

000bd886 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bd886:	4770      	bx	lr

000bd888 <_Z17acquireWireBufferv>:
{
   bd888:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bd88a:	2520      	movs	r5, #32
   bd88c:	2314      	movs	r3, #20
{
   bd88e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bd890:	6003      	str	r3, [r0, #0]
   bd892:	6085      	str	r5, [r0, #8]
   bd894:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bd896:	4906      	ldr	r1, [pc, #24]	; (bd8b0 <_Z17acquireWireBufferv+0x28>)
   bd898:	4628      	mov	r0, r5
   bd89a:	f000 f86f 	bl	bd97c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bd89e:	4904      	ldr	r1, [pc, #16]	; (bd8b0 <_Z17acquireWireBufferv+0x28>)
	};
   bd8a0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bd8a2:	4628      	mov	r0, r5
   bd8a4:	f000 f86a 	bl	bd97c <_ZnajRKSt9nothrow_t>
	};
   bd8a8:	60e0      	str	r0, [r4, #12]
}
   bd8aa:	4620      	mov	r0, r4
   bd8ac:	bd38      	pop	{r3, r4, r5, pc}
   bd8ae:	bf00      	nop
   bd8b0:	000c1bdc 	.word	0x000c1bdc

000bd8b4 <_Z19__fetch_global_Wirev>:
{
   bd8b4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bd8b6:	4d0e      	ldr	r5, [pc, #56]	; (bd8f0 <_Z19__fetch_global_Wirev+0x3c>)
   bd8b8:	7829      	ldrb	r1, [r5, #0]
   bd8ba:	f3bf 8f5b 	dmb	ish
   bd8be:	f011 0401 	ands.w	r4, r1, #1
{
   bd8c2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bd8c4:	d111      	bne.n	bd8ea <_Z19__fetch_global_Wirev+0x36>
   bd8c6:	4628      	mov	r0, r5
   bd8c8:	f7f6 fbf8 	bl	b40bc <__cxa_guard_acquire>
   bd8cc:	b168      	cbz	r0, bd8ea <_Z19__fetch_global_Wirev+0x36>
   bd8ce:	a801      	add	r0, sp, #4
   bd8d0:	f7ff ffda 	bl	bd888 <_Z17acquireWireBufferv>
   bd8d4:	aa01      	add	r2, sp, #4
   bd8d6:	4621      	mov	r1, r4
   bd8d8:	4806      	ldr	r0, [pc, #24]	; (bd8f4 <_Z19__fetch_global_Wirev+0x40>)
   bd8da:	f7ff f8f1 	bl	bcac0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bd8de:	4628      	mov	r0, r5
   bd8e0:	f7f6 fbf1 	bl	b40c6 <__cxa_guard_release>
   bd8e4:	4804      	ldr	r0, [pc, #16]	; (bd8f8 <_Z19__fetch_global_Wirev+0x44>)
   bd8e6:	f000 fefb 	bl	be6e0 <atexit>
	return wire;
}
   bd8ea:	4802      	ldr	r0, [pc, #8]	; (bd8f4 <_Z19__fetch_global_Wirev+0x40>)
   bd8ec:	b007      	add	sp, #28
   bd8ee:	bd30      	pop	{r4, r5, pc}
   bd8f0:	2003e72c 	.word	0x2003e72c
   bd8f4:	2003e730 	.word	0x2003e730
   bd8f8:	000bd887 	.word	0x000bd887

000bd8fc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bd8fc:	4770      	bx	lr
	...

000bd900 <_Z20acquireSerial1Bufferv>:
{
   bd900:	b538      	push	{r3, r4, r5, lr}
   bd902:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bd904:	2514      	movs	r5, #20
   bd906:	462a      	mov	r2, r5
   bd908:	2100      	movs	r1, #0
   bd90a:	f000 ff2e 	bl	be76a <memset>
   bd90e:	8025      	strh	r5, [r4, #0]
   bd910:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd912:	4907      	ldr	r1, [pc, #28]	; (bd930 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bd914:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd916:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bd918:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd91a:	f000 f82f 	bl	bd97c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd91e:	4904      	ldr	r1, [pc, #16]	; (bd930 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bd920:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bd922:	4628      	mov	r0, r5
   bd924:	f000 f82a 	bl	bd97c <_ZnajRKSt9nothrow_t>
    };
   bd928:	60e0      	str	r0, [r4, #12]
}
   bd92a:	4620      	mov	r0, r4
   bd92c:	bd38      	pop	{r3, r4, r5, pc}
   bd92e:	bf00      	nop
   bd930:	000c1bdc 	.word	0x000c1bdc

000bd934 <_Z22__fetch_global_Serial1v>:
{
   bd934:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bd936:	4d0e      	ldr	r5, [pc, #56]	; (bd970 <_Z22__fetch_global_Serial1v+0x3c>)
   bd938:	7829      	ldrb	r1, [r5, #0]
   bd93a:	f3bf 8f5b 	dmb	ish
   bd93e:	f011 0401 	ands.w	r4, r1, #1
{
   bd942:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bd944:	d111      	bne.n	bd96a <_Z22__fetch_global_Serial1v+0x36>
   bd946:	4628      	mov	r0, r5
   bd948:	f7f6 fbb8 	bl	b40bc <__cxa_guard_acquire>
   bd94c:	b168      	cbz	r0, bd96a <_Z22__fetch_global_Serial1v+0x36>
   bd94e:	a801      	add	r0, sp, #4
   bd950:	f7ff ffd6 	bl	bd900 <_Z20acquireSerial1Bufferv>
   bd954:	aa01      	add	r2, sp, #4
   bd956:	4621      	mov	r1, r4
   bd958:	4806      	ldr	r0, [pc, #24]	; (bd974 <_Z22__fetch_global_Serial1v+0x40>)
   bd95a:	f7ff fdd9 	bl	bd510 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bd95e:	4628      	mov	r0, r5
   bd960:	f7f6 fbb1 	bl	b40c6 <__cxa_guard_release>
   bd964:	4804      	ldr	r0, [pc, #16]	; (bd978 <_Z22__fetch_global_Serial1v+0x44>)
   bd966:	f000 febb 	bl	be6e0 <atexit>
    return serial1;
}
   bd96a:	4802      	ldr	r0, [pc, #8]	; (bd974 <_Z22__fetch_global_Serial1v+0x40>)
   bd96c:	b007      	add	sp, #28
   bd96e:	bd30      	pop	{r4, r5, pc}
   bd970:	2003e744 	.word	0x2003e744
   bd974:	2003e748 	.word	0x2003e748
   bd978:	000bd8fd 	.word	0x000bd8fd

000bd97c <_ZnajRKSt9nothrow_t>:
   bd97c:	f7f6 bb8d 	b.w	b409a <_Znaj>

000bd980 <_ZSt17__throw_bad_allocv>:
   bd980:	b508      	push	{r3, lr}
   bd982:	f7fc fa13 	bl	b9dac <abort>

000bd986 <_ZSt19__throw_logic_errorPKc>:
   bd986:	b508      	push	{r3, lr}
   bd988:	f7fc fa10 	bl	b9dac <abort>

000bd98c <_ZSt20__throw_length_errorPKc>:
   bd98c:	b508      	push	{r3, lr}
   bd98e:	f7fc fa0d 	bl	b9dac <abort>

000bd992 <_ZSt24__throw_out_of_range_fmtPKcz>:
   bd992:	b40f      	push	{r0, r1, r2, r3}
   bd994:	b580      	push	{r7, lr}
   bd996:	b084      	sub	sp, #16
   bd998:	af00      	add	r7, sp, #0
   bd99a:	f107 0418 	add.w	r4, r7, #24
   bd99e:	f854 2b04 	ldr.w	r2, [r4], #4
   bd9a2:	607a      	str	r2, [r7, #4]
   bd9a4:	4610      	mov	r0, r2
   bd9a6:	f000 ff94 	bl	be8d2 <strlen>
   bd9aa:	f200 2307 	addw	r3, r0, #519	; 0x207
   bd9ae:	f023 0307 	bic.w	r3, r3, #7
   bd9b2:	ebad 0d03 	sub.w	sp, sp, r3
   bd9b6:	f500 7100 	add.w	r1, r0, #512	; 0x200
   bd9ba:	687a      	ldr	r2, [r7, #4]
   bd9bc:	60fc      	str	r4, [r7, #12]
   bd9be:	4623      	mov	r3, r4
   bd9c0:	4668      	mov	r0, sp
   bd9c2:	f000 f85d 	bl	bda80 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   bd9c6:	f7fc f9f1 	bl	b9dac <abort>

000bd9ca <_ZSt25__throw_bad_function_callv>:
   bd9ca:	b508      	push	{r3, lr}
   bd9cc:	f7fc f9ee 	bl	b9dac <abort>

000bd9d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bd9d0:	4901      	ldr	r1, [pc, #4]	; (bd9d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bd9d2:	f000 b98b 	b.w	bdcec <_ZNKSt9type_infoeqERKS_>
   bd9d6:	bf00      	nop
   bd9d8:	000c1bf8 	.word	0x000c1bf8

000bd9dc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   bd9dc:	b580      	push	{r7, lr}
   bd9de:	b09c      	sub	sp, #112	; 0x70
   bd9e0:	4606      	mov	r6, r0
   bd9e2:	af00      	add	r7, sp, #0
   bd9e4:	460c      	mov	r4, r1
   bd9e6:	1ba4      	subs	r4, r4, r6
   bd9e8:	490e      	ldr	r1, [pc, #56]	; (bda24 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   bd9ea:	2269      	movs	r2, #105	; 0x69
   bd9ec:	1d38      	adds	r0, r7, #4
   bd9ee:	f000 fe94 	bl	be71a <memcpy>
   bd9f2:	f104 0370 	add.w	r3, r4, #112	; 0x70
   bd9f6:	f023 0307 	bic.w	r3, r3, #7
   bd9fa:	ebad 0d03 	sub.w	sp, sp, r3
   bd9fe:	466d      	mov	r5, sp
   bda00:	2268      	movs	r2, #104	; 0x68
   bda02:	1d39      	adds	r1, r7, #4
   bda04:	4628      	mov	r0, r5
   bda06:	f000 fe88 	bl	be71a <memcpy>
   bda0a:	4622      	mov	r2, r4
   bda0c:	4631      	mov	r1, r6
   bda0e:	f105 0068 	add.w	r0, r5, #104	; 0x68
   bda12:	442c      	add	r4, r5
   bda14:	f000 fe81 	bl	be71a <memcpy>
   bda18:	2300      	movs	r3, #0
   bda1a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   bda1e:	4628      	mov	r0, r5
   bda20:	f7ff ffb1 	bl	bd986 <_ZSt19__throw_logic_errorPKc>
   bda24:	000c1c00 	.word	0x000c1c00

000bda28 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   bda28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bda2c:	af00      	add	r7, sp, #0
   bda2e:	b084      	sub	sp, #16
   bda30:	466d      	mov	r5, sp
   bda32:	f105 040c 	add.w	r4, r5, #12
   bda36:	f8df 8044 	ldr.w	r8, [pc, #68]	; bda7c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   bda3a:	4623      	mov	r3, r4
   bda3c:	f04f 0c0a 	mov.w	ip, #10
   bda40:	fbb2 f6fc 	udiv	r6, r2, ip
   bda44:	fb0c 2e16 	mls	lr, ip, r6, r2
   bda48:	f818 e00e 	ldrb.w	lr, [r8, lr]
   bda4c:	f803 ed01 	strb.w	lr, [r3, #-1]!
   bda50:	4696      	mov	lr, r2
   bda52:	f1be 0f09 	cmp.w	lr, #9
   bda56:	4632      	mov	r2, r6
   bda58:	d8f2      	bhi.n	bda40 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   bda5a:	1ae4      	subs	r4, r4, r3
   bda5c:	428c      	cmp	r4, r1
   bda5e:	d809      	bhi.n	bda74 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   bda60:	f1c4 030c 	rsb	r3, r4, #12
   bda64:	4622      	mov	r2, r4
   bda66:	18e9      	adds	r1, r5, r3
   bda68:	f000 fe57 	bl	be71a <memcpy>
   bda6c:	4620      	mov	r0, r4
   bda6e:	46bd      	mov	sp, r7
   bda70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bda74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bda78:	e7f8      	b.n	bda6c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   bda7a:	bf00      	nop
   bda7c:	000c1c69 	.word	0x000c1c69

000bda80 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   bda80:	3901      	subs	r1, #1
   bda82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bda86:	4607      	mov	r7, r0
   bda88:	4615      	mov	r5, r2
   bda8a:	eb00 0801 	add.w	r8, r0, r1
   bda8e:	4604      	mov	r4, r0
   bda90:	782a      	ldrb	r2, [r5, #0]
   bda92:	b392      	cbz	r2, bdafa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   bda94:	4544      	cmp	r4, r8
   bda96:	d22a      	bcs.n	bdaee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bda98:	2a25      	cmp	r2, #37	; 0x25
   bda9a:	d107      	bne.n	bdaac <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bda9c:	786a      	ldrb	r2, [r5, #1]
   bda9e:	2a73      	cmp	r2, #115	; 0x73
   bdaa0:	d009      	beq.n	bdab6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   bdaa2:	2a7a      	cmp	r2, #122	; 0x7a
   bdaa4:	d012      	beq.n	bdacc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   bdaa6:	2a25      	cmp	r2, #37	; 0x25
   bdaa8:	d100      	bne.n	bdaac <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bdaaa:	3501      	adds	r5, #1
   bdaac:	f815 2b01 	ldrb.w	r2, [r5], #1
   bdab0:	f804 2b01 	strb.w	r2, [r4], #1
   bdab4:	e7ec      	b.n	bda90 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bdab6:	f853 2b04 	ldr.w	r2, [r3], #4
   bdaba:	3a01      	subs	r2, #1
   bdabc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   bdac0:	b1c9      	cbz	r1, bdaf6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   bdac2:	4544      	cmp	r4, r8
   bdac4:	d013      	beq.n	bdaee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bdac6:	f804 1b01 	strb.w	r1, [r4], #1
   bdaca:	e7f7      	b.n	bdabc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   bdacc:	78aa      	ldrb	r2, [r5, #2]
   bdace:	2a75      	cmp	r2, #117	; 0x75
   bdad0:	d1ec      	bne.n	bdaac <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bdad2:	461e      	mov	r6, r3
   bdad4:	eba8 0104 	sub.w	r1, r8, r4
   bdad8:	f856 2b04 	ldr.w	r2, [r6], #4
   bdadc:	4620      	mov	r0, r4
   bdade:	f7ff ffa3 	bl	bda28 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   bdae2:	2800      	cmp	r0, #0
   bdae4:	dd03      	ble.n	bdaee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bdae6:	4404      	add	r4, r0
   bdae8:	3503      	adds	r5, #3
   bdaea:	4633      	mov	r3, r6
   bdaec:	e7d0      	b.n	bda90 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bdaee:	4621      	mov	r1, r4
   bdaf0:	4638      	mov	r0, r7
   bdaf2:	f7ff ff73 	bl	bd9dc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   bdaf6:	3502      	adds	r5, #2
   bdaf8:	e7ca      	b.n	bda90 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bdafa:	7022      	strb	r2, [r4, #0]
   bdafc:	1be0      	subs	r0, r4, r7
   bdafe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bdb02 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bdb02:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bdb04:	2400      	movs	r4, #0
   bdb06:	2310      	movs	r3, #16
   bdb08:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bdb0c:	6803      	ldr	r3, [r0, #0]
   bdb0e:	4615      	mov	r5, r2
   bdb10:	699e      	ldr	r6, [r3, #24]
   bdb12:	6812      	ldr	r2, [r2, #0]
   bdb14:	466b      	mov	r3, sp
   bdb16:	e9cd 4400 	strd	r4, r4, [sp]
   bdb1a:	47b0      	blx	r6
   bdb1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bdb20:	f003 0306 	and.w	r3, r3, #6
   bdb24:	2b06      	cmp	r3, #6
   bdb26:	bf03      	ittte	eq
   bdb28:	9b00      	ldreq	r3, [sp, #0]
   bdb2a:	602b      	streq	r3, [r5, #0]
   bdb2c:	2001      	moveq	r0, #1
   bdb2e:	4620      	movne	r0, r4
   bdb30:	b004      	add	sp, #16
   bdb32:	bd70      	pop	{r4, r5, r6, pc}

000bdb34 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bdb34:	9800      	ldr	r0, [sp, #0]
   bdb36:	4290      	cmp	r0, r2
   bdb38:	bf14      	ite	ne
   bdb3a:	2001      	movne	r0, #1
   bdb3c:	2006      	moveq	r0, #6
   bdb3e:	4770      	bx	lr

000bdb40 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bdb40:	b510      	push	{r4, lr}
   bdb42:	4b03      	ldr	r3, [pc, #12]	; (bdb50 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bdb44:	6003      	str	r3, [r0, #0]
   bdb46:	4604      	mov	r4, r0
   bdb48:	f000 f8cd 	bl	bdce6 <_ZNSt9type_infoD1Ev>
   bdb4c:	4620      	mov	r0, r4
   bdb4e:	bd10      	pop	{r4, pc}
   bdb50:	000c1cac 	.word	0x000c1cac

000bdb54 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bdb54:	b510      	push	{r4, lr}
   bdb56:	4604      	mov	r4, r0
   bdb58:	f7ff fff2 	bl	bdb40 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bdb5c:	4620      	mov	r0, r4
   bdb5e:	2108      	movs	r1, #8
   bdb60:	f7f6 fa9d 	bl	b409e <_ZdlPvj>
   bdb64:	4620      	mov	r0, r4
   bdb66:	bd10      	pop	{r4, pc}

000bdb68 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bdb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bdb6c:	461f      	mov	r7, r3
   bdb6e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bdb72:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bdb76:	4598      	cmp	r8, r3
   bdb78:	4606      	mov	r6, r0
   bdb7a:	4615      	mov	r5, r2
   bdb7c:	d107      	bne.n	bdb8e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bdb7e:	9907      	ldr	r1, [sp, #28]
   bdb80:	f000 f8b4 	bl	bdcec <_ZNKSt9type_infoeqERKS_>
   bdb84:	b118      	cbz	r0, bdb8e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bdb86:	7165      	strb	r5, [r4, #5]
   bdb88:	2000      	movs	r0, #0
   bdb8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bdb8e:	4639      	mov	r1, r7
   bdb90:	4630      	mov	r0, r6
   bdb92:	f000 f8ab 	bl	bdcec <_ZNKSt9type_infoeqERKS_>
   bdb96:	2800      	cmp	r0, #0
   bdb98:	d0f6      	beq.n	bdb88 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bdb9a:	2301      	movs	r3, #1
   bdb9c:	f8c4 8000 	str.w	r8, [r4]
   bdba0:	7125      	strb	r5, [r4, #4]
   bdba2:	71a3      	strb	r3, [r4, #6]
   bdba4:	e7f0      	b.n	bdb88 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bdba6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bdba6:	b538      	push	{r3, r4, r5, lr}
   bdba8:	4615      	mov	r5, r2
   bdbaa:	461c      	mov	r4, r3
   bdbac:	f000 f89e 	bl	bdcec <_ZNKSt9type_infoeqERKS_>
   bdbb0:	b120      	cbz	r0, bdbbc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bdbb2:	2308      	movs	r3, #8
   bdbb4:	60e3      	str	r3, [r4, #12]
   bdbb6:	2306      	movs	r3, #6
   bdbb8:	6025      	str	r5, [r4, #0]
   bdbba:	7123      	strb	r3, [r4, #4]
   bdbbc:	bd38      	pop	{r3, r4, r5, pc}

000bdbbe <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bdbbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bdbc0:	4605      	mov	r5, r0
   bdbc2:	460c      	mov	r4, r1
   bdbc4:	9201      	str	r2, [sp, #4]
   bdbc6:	461e      	mov	r6, r3
   bdbc8:	f000 f890 	bl	bdcec <_ZNKSt9type_infoeqERKS_>
   bdbcc:	b950      	cbnz	r0, bdbe4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bdbce:	2e03      	cmp	r6, #3
   bdbd0:	d808      	bhi.n	bdbe4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bdbd2:	6823      	ldr	r3, [r4, #0]
   bdbd4:	9a01      	ldr	r2, [sp, #4]
   bdbd6:	695b      	ldr	r3, [r3, #20]
   bdbd8:	4629      	mov	r1, r5
   bdbda:	4620      	mov	r0, r4
   bdbdc:	b002      	add	sp, #8
   bdbde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bdbe2:	4718      	bx	r3
   bdbe4:	b002      	add	sp, #8
   bdbe6:	bd70      	pop	{r4, r5, r6, pc}

000bdbe8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bdbe8:	b510      	push	{r4, lr}
   bdbea:	4b03      	ldr	r3, [pc, #12]	; (bdbf8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bdbec:	6003      	str	r3, [r0, #0]
   bdbee:	4604      	mov	r4, r0
   bdbf0:	f7ff ffa6 	bl	bdb40 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bdbf4:	4620      	mov	r0, r4
   bdbf6:	bd10      	pop	{r4, pc}
   bdbf8:	000c1d0c 	.word	0x000c1d0c

000bdbfc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bdbfc:	b510      	push	{r4, lr}
   bdbfe:	4604      	mov	r4, r0
   bdc00:	f7ff fff2 	bl	bdbe8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bdc04:	4620      	mov	r0, r4
   bdc06:	210c      	movs	r1, #12
   bdc08:	f7f6 fa49 	bl	b409e <_ZdlPvj>
   bdc0c:	4620      	mov	r0, r4
   bdc0e:	bd10      	pop	{r4, pc}

000bdc10 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bdc10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bdc12:	9f08      	ldr	r7, [sp, #32]
   bdc14:	4297      	cmp	r7, r2
   bdc16:	4605      	mov	r5, r0
   bdc18:	460e      	mov	r6, r1
   bdc1a:	4614      	mov	r4, r2
   bdc1c:	d00a      	beq.n	bdc34 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bdc1e:	68a8      	ldr	r0, [r5, #8]
   bdc20:	6802      	ldr	r2, [r0, #0]
   bdc22:	9708      	str	r7, [sp, #32]
   bdc24:	6a15      	ldr	r5, [r2, #32]
   bdc26:	4631      	mov	r1, r6
   bdc28:	4622      	mov	r2, r4
   bdc2a:	46ac      	mov	ip, r5
   bdc2c:	b003      	add	sp, #12
   bdc2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bdc32:	4760      	bx	ip
   bdc34:	4619      	mov	r1, r3
   bdc36:	9301      	str	r3, [sp, #4]
   bdc38:	f000 f858 	bl	bdcec <_ZNKSt9type_infoeqERKS_>
   bdc3c:	9b01      	ldr	r3, [sp, #4]
   bdc3e:	2800      	cmp	r0, #0
   bdc40:	d0ed      	beq.n	bdc1e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bdc42:	2006      	movs	r0, #6
   bdc44:	b003      	add	sp, #12
   bdc46:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bdc48 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bdc48:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdc4c:	460d      	mov	r5, r1
   bdc4e:	4619      	mov	r1, r3
   bdc50:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bdc54:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bdc58:	4681      	mov	r9, r0
   bdc5a:	4617      	mov	r7, r2
   bdc5c:	4698      	mov	r8, r3
   bdc5e:	f000 f845 	bl	bdcec <_ZNKSt9type_infoeqERKS_>
   bdc62:	b190      	cbz	r0, bdc8a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bdc64:	2d00      	cmp	r5, #0
   bdc66:	6034      	str	r4, [r6, #0]
   bdc68:	7137      	strb	r7, [r6, #4]
   bdc6a:	db09      	blt.n	bdc80 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bdc6c:	1961      	adds	r1, r4, r5
   bdc6e:	458a      	cmp	sl, r1
   bdc70:	bf0c      	ite	eq
   bdc72:	2106      	moveq	r1, #6
   bdc74:	2101      	movne	r1, #1
   bdc76:	71b1      	strb	r1, [r6, #6]
   bdc78:	2000      	movs	r0, #0
   bdc7a:	b001      	add	sp, #4
   bdc7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bdc80:	3502      	adds	r5, #2
   bdc82:	d1f9      	bne.n	bdc78 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bdc84:	2301      	movs	r3, #1
   bdc86:	71b3      	strb	r3, [r6, #6]
   bdc88:	e7f6      	b.n	bdc78 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bdc8a:	4554      	cmp	r4, sl
   bdc8c:	d106      	bne.n	bdc9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bdc8e:	4659      	mov	r1, fp
   bdc90:	4648      	mov	r0, r9
   bdc92:	f000 f82b 	bl	bdcec <_ZNKSt9type_infoeqERKS_>
   bdc96:	b108      	cbz	r0, bdc9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bdc98:	7177      	strb	r7, [r6, #5]
   bdc9a:	e7ed      	b.n	bdc78 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bdc9c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bdca0:	6803      	ldr	r3, [r0, #0]
   bdca2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bdca6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bdcaa:	69dc      	ldr	r4, [r3, #28]
   bdcac:	463a      	mov	r2, r7
   bdcae:	4643      	mov	r3, r8
   bdcb0:	4629      	mov	r1, r5
   bdcb2:	46a4      	mov	ip, r4
   bdcb4:	b001      	add	sp, #4
   bdcb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdcba:	4760      	bx	ip

000bdcbc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bdcbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bdcc0:	4607      	mov	r7, r0
   bdcc2:	460c      	mov	r4, r1
   bdcc4:	4615      	mov	r5, r2
   bdcc6:	461e      	mov	r6, r3
   bdcc8:	f7ff ff6d 	bl	bdba6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bdccc:	b948      	cbnz	r0, bdce2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bdcce:	68b8      	ldr	r0, [r7, #8]
   bdcd0:	6803      	ldr	r3, [r0, #0]
   bdcd2:	699f      	ldr	r7, [r3, #24]
   bdcd4:	462a      	mov	r2, r5
   bdcd6:	4633      	mov	r3, r6
   bdcd8:	4621      	mov	r1, r4
   bdcda:	46bc      	mov	ip, r7
   bdcdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bdce0:	4760      	bx	ip
   bdce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bdce6 <_ZNSt9type_infoD1Ev>:
   bdce6:	4770      	bx	lr

000bdce8 <_ZNKSt9type_info14__is_pointer_pEv>:
   bdce8:	2000      	movs	r0, #0
   bdcea:	4770      	bx	lr

000bdcec <_ZNKSt9type_infoeqERKS_>:
   bdcec:	4281      	cmp	r1, r0
   bdcee:	b508      	push	{r3, lr}
   bdcf0:	d00e      	beq.n	bdd10 <_ZNKSt9type_infoeqERKS_+0x24>
   bdcf2:	6840      	ldr	r0, [r0, #4]
   bdcf4:	7803      	ldrb	r3, [r0, #0]
   bdcf6:	2b2a      	cmp	r3, #42	; 0x2a
   bdcf8:	d00c      	beq.n	bdd14 <_ZNKSt9type_infoeqERKS_+0x28>
   bdcfa:	6849      	ldr	r1, [r1, #4]
   bdcfc:	780b      	ldrb	r3, [r1, #0]
   bdcfe:	2b2a      	cmp	r3, #42	; 0x2a
   bdd00:	bf08      	it	eq
   bdd02:	3101      	addeq	r1, #1
   bdd04:	f000 fdb5 	bl	be872 <strcmp>
   bdd08:	fab0 f080 	clz	r0, r0
   bdd0c:	0940      	lsrs	r0, r0, #5
   bdd0e:	bd08      	pop	{r3, pc}
   bdd10:	2001      	movs	r0, #1
   bdd12:	e7fc      	b.n	bdd0e <_ZNKSt9type_infoeqERKS_+0x22>
   bdd14:	2000      	movs	r0, #0
   bdd16:	e7fa      	b.n	bdd0e <_ZNKSt9type_infoeqERKS_+0x22>

000bdd18 <__aeabi_drsub>:
   bdd18:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bdd1c:	e002      	b.n	bdd24 <__adddf3>
   bdd1e:	bf00      	nop

000bdd20 <__aeabi_dsub>:
   bdd20:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bdd24 <__adddf3>:
   bdd24:	b530      	push	{r4, r5, lr}
   bdd26:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bdd2a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bdd2e:	ea94 0f05 	teq	r4, r5
   bdd32:	bf08      	it	eq
   bdd34:	ea90 0f02 	teqeq	r0, r2
   bdd38:	bf1f      	itttt	ne
   bdd3a:	ea54 0c00 	orrsne.w	ip, r4, r0
   bdd3e:	ea55 0c02 	orrsne.w	ip, r5, r2
   bdd42:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bdd46:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bdd4a:	f000 80e2 	beq.w	bdf12 <__adddf3+0x1ee>
   bdd4e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bdd52:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bdd56:	bfb8      	it	lt
   bdd58:	426d      	neglt	r5, r5
   bdd5a:	dd0c      	ble.n	bdd76 <__adddf3+0x52>
   bdd5c:	442c      	add	r4, r5
   bdd5e:	ea80 0202 	eor.w	r2, r0, r2
   bdd62:	ea81 0303 	eor.w	r3, r1, r3
   bdd66:	ea82 0000 	eor.w	r0, r2, r0
   bdd6a:	ea83 0101 	eor.w	r1, r3, r1
   bdd6e:	ea80 0202 	eor.w	r2, r0, r2
   bdd72:	ea81 0303 	eor.w	r3, r1, r3
   bdd76:	2d36      	cmp	r5, #54	; 0x36
   bdd78:	bf88      	it	hi
   bdd7a:	bd30      	pophi	{r4, r5, pc}
   bdd7c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bdd80:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bdd84:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bdd88:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bdd8c:	d002      	beq.n	bdd94 <__adddf3+0x70>
   bdd8e:	4240      	negs	r0, r0
   bdd90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bdd94:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bdd98:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bdd9c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bdda0:	d002      	beq.n	bdda8 <__adddf3+0x84>
   bdda2:	4252      	negs	r2, r2
   bdda4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bdda8:	ea94 0f05 	teq	r4, r5
   bddac:	f000 80a7 	beq.w	bdefe <__adddf3+0x1da>
   bddb0:	f1a4 0401 	sub.w	r4, r4, #1
   bddb4:	f1d5 0e20 	rsbs	lr, r5, #32
   bddb8:	db0d      	blt.n	bddd6 <__adddf3+0xb2>
   bddba:	fa02 fc0e 	lsl.w	ip, r2, lr
   bddbe:	fa22 f205 	lsr.w	r2, r2, r5
   bddc2:	1880      	adds	r0, r0, r2
   bddc4:	f141 0100 	adc.w	r1, r1, #0
   bddc8:	fa03 f20e 	lsl.w	r2, r3, lr
   bddcc:	1880      	adds	r0, r0, r2
   bddce:	fa43 f305 	asr.w	r3, r3, r5
   bddd2:	4159      	adcs	r1, r3
   bddd4:	e00e      	b.n	bddf4 <__adddf3+0xd0>
   bddd6:	f1a5 0520 	sub.w	r5, r5, #32
   bddda:	f10e 0e20 	add.w	lr, lr, #32
   bddde:	2a01      	cmp	r2, #1
   bdde0:	fa03 fc0e 	lsl.w	ip, r3, lr
   bdde4:	bf28      	it	cs
   bdde6:	f04c 0c02 	orrcs.w	ip, ip, #2
   bddea:	fa43 f305 	asr.w	r3, r3, r5
   bddee:	18c0      	adds	r0, r0, r3
   bddf0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bddf4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bddf8:	d507      	bpl.n	bde0a <__adddf3+0xe6>
   bddfa:	f04f 0e00 	mov.w	lr, #0
   bddfe:	f1dc 0c00 	rsbs	ip, ip, #0
   bde02:	eb7e 0000 	sbcs.w	r0, lr, r0
   bde06:	eb6e 0101 	sbc.w	r1, lr, r1
   bde0a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bde0e:	d31b      	bcc.n	bde48 <__adddf3+0x124>
   bde10:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bde14:	d30c      	bcc.n	bde30 <__adddf3+0x10c>
   bde16:	0849      	lsrs	r1, r1, #1
   bde18:	ea5f 0030 	movs.w	r0, r0, rrx
   bde1c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bde20:	f104 0401 	add.w	r4, r4, #1
   bde24:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bde28:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bde2c:	f080 809a 	bcs.w	bdf64 <__adddf3+0x240>
   bde30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bde34:	bf08      	it	eq
   bde36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bde3a:	f150 0000 	adcs.w	r0, r0, #0
   bde3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bde42:	ea41 0105 	orr.w	r1, r1, r5
   bde46:	bd30      	pop	{r4, r5, pc}
   bde48:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bde4c:	4140      	adcs	r0, r0
   bde4e:	eb41 0101 	adc.w	r1, r1, r1
   bde52:	3c01      	subs	r4, #1
   bde54:	bf28      	it	cs
   bde56:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bde5a:	d2e9      	bcs.n	bde30 <__adddf3+0x10c>
   bde5c:	f091 0f00 	teq	r1, #0
   bde60:	bf04      	itt	eq
   bde62:	4601      	moveq	r1, r0
   bde64:	2000      	moveq	r0, #0
   bde66:	fab1 f381 	clz	r3, r1
   bde6a:	bf08      	it	eq
   bde6c:	3320      	addeq	r3, #32
   bde6e:	f1a3 030b 	sub.w	r3, r3, #11
   bde72:	f1b3 0220 	subs.w	r2, r3, #32
   bde76:	da0c      	bge.n	bde92 <__adddf3+0x16e>
   bde78:	320c      	adds	r2, #12
   bde7a:	dd08      	ble.n	bde8e <__adddf3+0x16a>
   bde7c:	f102 0c14 	add.w	ip, r2, #20
   bde80:	f1c2 020c 	rsb	r2, r2, #12
   bde84:	fa01 f00c 	lsl.w	r0, r1, ip
   bde88:	fa21 f102 	lsr.w	r1, r1, r2
   bde8c:	e00c      	b.n	bdea8 <__adddf3+0x184>
   bde8e:	f102 0214 	add.w	r2, r2, #20
   bde92:	bfd8      	it	le
   bde94:	f1c2 0c20 	rsble	ip, r2, #32
   bde98:	fa01 f102 	lsl.w	r1, r1, r2
   bde9c:	fa20 fc0c 	lsr.w	ip, r0, ip
   bdea0:	bfdc      	itt	le
   bdea2:	ea41 010c 	orrle.w	r1, r1, ip
   bdea6:	4090      	lslle	r0, r2
   bdea8:	1ae4      	subs	r4, r4, r3
   bdeaa:	bfa2      	ittt	ge
   bdeac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bdeb0:	4329      	orrge	r1, r5
   bdeb2:	bd30      	popge	{r4, r5, pc}
   bdeb4:	ea6f 0404 	mvn.w	r4, r4
   bdeb8:	3c1f      	subs	r4, #31
   bdeba:	da1c      	bge.n	bdef6 <__adddf3+0x1d2>
   bdebc:	340c      	adds	r4, #12
   bdebe:	dc0e      	bgt.n	bdede <__adddf3+0x1ba>
   bdec0:	f104 0414 	add.w	r4, r4, #20
   bdec4:	f1c4 0220 	rsb	r2, r4, #32
   bdec8:	fa20 f004 	lsr.w	r0, r0, r4
   bdecc:	fa01 f302 	lsl.w	r3, r1, r2
   bded0:	ea40 0003 	orr.w	r0, r0, r3
   bded4:	fa21 f304 	lsr.w	r3, r1, r4
   bded8:	ea45 0103 	orr.w	r1, r5, r3
   bdedc:	bd30      	pop	{r4, r5, pc}
   bdede:	f1c4 040c 	rsb	r4, r4, #12
   bdee2:	f1c4 0220 	rsb	r2, r4, #32
   bdee6:	fa20 f002 	lsr.w	r0, r0, r2
   bdeea:	fa01 f304 	lsl.w	r3, r1, r4
   bdeee:	ea40 0003 	orr.w	r0, r0, r3
   bdef2:	4629      	mov	r1, r5
   bdef4:	bd30      	pop	{r4, r5, pc}
   bdef6:	fa21 f004 	lsr.w	r0, r1, r4
   bdefa:	4629      	mov	r1, r5
   bdefc:	bd30      	pop	{r4, r5, pc}
   bdefe:	f094 0f00 	teq	r4, #0
   bdf02:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bdf06:	bf06      	itte	eq
   bdf08:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bdf0c:	3401      	addeq	r4, #1
   bdf0e:	3d01      	subne	r5, #1
   bdf10:	e74e      	b.n	bddb0 <__adddf3+0x8c>
   bdf12:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bdf16:	bf18      	it	ne
   bdf18:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bdf1c:	d029      	beq.n	bdf72 <__adddf3+0x24e>
   bdf1e:	ea94 0f05 	teq	r4, r5
   bdf22:	bf08      	it	eq
   bdf24:	ea90 0f02 	teqeq	r0, r2
   bdf28:	d005      	beq.n	bdf36 <__adddf3+0x212>
   bdf2a:	ea54 0c00 	orrs.w	ip, r4, r0
   bdf2e:	bf04      	itt	eq
   bdf30:	4619      	moveq	r1, r3
   bdf32:	4610      	moveq	r0, r2
   bdf34:	bd30      	pop	{r4, r5, pc}
   bdf36:	ea91 0f03 	teq	r1, r3
   bdf3a:	bf1e      	ittt	ne
   bdf3c:	2100      	movne	r1, #0
   bdf3e:	2000      	movne	r0, #0
   bdf40:	bd30      	popne	{r4, r5, pc}
   bdf42:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bdf46:	d105      	bne.n	bdf54 <__adddf3+0x230>
   bdf48:	0040      	lsls	r0, r0, #1
   bdf4a:	4149      	adcs	r1, r1
   bdf4c:	bf28      	it	cs
   bdf4e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bdf52:	bd30      	pop	{r4, r5, pc}
   bdf54:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bdf58:	bf3c      	itt	cc
   bdf5a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bdf5e:	bd30      	popcc	{r4, r5, pc}
   bdf60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bdf64:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bdf68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bdf6c:	f04f 0000 	mov.w	r0, #0
   bdf70:	bd30      	pop	{r4, r5, pc}
   bdf72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bdf76:	bf1a      	itte	ne
   bdf78:	4619      	movne	r1, r3
   bdf7a:	4610      	movne	r0, r2
   bdf7c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bdf80:	bf1c      	itt	ne
   bdf82:	460b      	movne	r3, r1
   bdf84:	4602      	movne	r2, r0
   bdf86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bdf8a:	bf06      	itte	eq
   bdf8c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bdf90:	ea91 0f03 	teqeq	r1, r3
   bdf94:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bdf98:	bd30      	pop	{r4, r5, pc}
   bdf9a:	bf00      	nop

000bdf9c <__aeabi_ui2d>:
   bdf9c:	f090 0f00 	teq	r0, #0
   bdfa0:	bf04      	itt	eq
   bdfa2:	2100      	moveq	r1, #0
   bdfa4:	4770      	bxeq	lr
   bdfa6:	b530      	push	{r4, r5, lr}
   bdfa8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bdfac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bdfb0:	f04f 0500 	mov.w	r5, #0
   bdfb4:	f04f 0100 	mov.w	r1, #0
   bdfb8:	e750      	b.n	bde5c <__adddf3+0x138>
   bdfba:	bf00      	nop

000bdfbc <__aeabi_i2d>:
   bdfbc:	f090 0f00 	teq	r0, #0
   bdfc0:	bf04      	itt	eq
   bdfc2:	2100      	moveq	r1, #0
   bdfc4:	4770      	bxeq	lr
   bdfc6:	b530      	push	{r4, r5, lr}
   bdfc8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bdfcc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bdfd0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bdfd4:	bf48      	it	mi
   bdfd6:	4240      	negmi	r0, r0
   bdfd8:	f04f 0100 	mov.w	r1, #0
   bdfdc:	e73e      	b.n	bde5c <__adddf3+0x138>
   bdfde:	bf00      	nop

000bdfe0 <__aeabi_f2d>:
   bdfe0:	0042      	lsls	r2, r0, #1
   bdfe2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bdfe6:	ea4f 0131 	mov.w	r1, r1, rrx
   bdfea:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bdfee:	bf1f      	itttt	ne
   bdff0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bdff4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bdff8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bdffc:	4770      	bxne	lr
   bdffe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   be002:	bf08      	it	eq
   be004:	4770      	bxeq	lr
   be006:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   be00a:	bf04      	itt	eq
   be00c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   be010:	4770      	bxeq	lr
   be012:	b530      	push	{r4, r5, lr}
   be014:	f44f 7460 	mov.w	r4, #896	; 0x380
   be018:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   be01c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   be020:	e71c      	b.n	bde5c <__adddf3+0x138>
   be022:	bf00      	nop

000be024 <__aeabi_ul2d>:
   be024:	ea50 0201 	orrs.w	r2, r0, r1
   be028:	bf08      	it	eq
   be02a:	4770      	bxeq	lr
   be02c:	b530      	push	{r4, r5, lr}
   be02e:	f04f 0500 	mov.w	r5, #0
   be032:	e00a      	b.n	be04a <__aeabi_l2d+0x16>

000be034 <__aeabi_l2d>:
   be034:	ea50 0201 	orrs.w	r2, r0, r1
   be038:	bf08      	it	eq
   be03a:	4770      	bxeq	lr
   be03c:	b530      	push	{r4, r5, lr}
   be03e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   be042:	d502      	bpl.n	be04a <__aeabi_l2d+0x16>
   be044:	4240      	negs	r0, r0
   be046:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be04a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   be04e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   be052:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   be056:	f43f aed8 	beq.w	bde0a <__adddf3+0xe6>
   be05a:	f04f 0203 	mov.w	r2, #3
   be05e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   be062:	bf18      	it	ne
   be064:	3203      	addne	r2, #3
   be066:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   be06a:	bf18      	it	ne
   be06c:	3203      	addne	r2, #3
   be06e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   be072:	f1c2 0320 	rsb	r3, r2, #32
   be076:	fa00 fc03 	lsl.w	ip, r0, r3
   be07a:	fa20 f002 	lsr.w	r0, r0, r2
   be07e:	fa01 fe03 	lsl.w	lr, r1, r3
   be082:	ea40 000e 	orr.w	r0, r0, lr
   be086:	fa21 f102 	lsr.w	r1, r1, r2
   be08a:	4414      	add	r4, r2
   be08c:	e6bd      	b.n	bde0a <__adddf3+0xe6>
   be08e:	bf00      	nop

000be090 <__aeabi_dmul>:
   be090:	b570      	push	{r4, r5, r6, lr}
   be092:	f04f 0cff 	mov.w	ip, #255	; 0xff
   be096:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   be09a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   be09e:	bf1d      	ittte	ne
   be0a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   be0a4:	ea94 0f0c 	teqne	r4, ip
   be0a8:	ea95 0f0c 	teqne	r5, ip
   be0ac:	f000 f8de 	bleq	be26c <__aeabi_dmul+0x1dc>
   be0b0:	442c      	add	r4, r5
   be0b2:	ea81 0603 	eor.w	r6, r1, r3
   be0b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   be0ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   be0be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   be0c2:	bf18      	it	ne
   be0c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   be0c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be0cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   be0d0:	d038      	beq.n	be144 <__aeabi_dmul+0xb4>
   be0d2:	fba0 ce02 	umull	ip, lr, r0, r2
   be0d6:	f04f 0500 	mov.w	r5, #0
   be0da:	fbe1 e502 	umlal	lr, r5, r1, r2
   be0de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   be0e2:	fbe0 e503 	umlal	lr, r5, r0, r3
   be0e6:	f04f 0600 	mov.w	r6, #0
   be0ea:	fbe1 5603 	umlal	r5, r6, r1, r3
   be0ee:	f09c 0f00 	teq	ip, #0
   be0f2:	bf18      	it	ne
   be0f4:	f04e 0e01 	orrne.w	lr, lr, #1
   be0f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   be0fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   be100:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   be104:	d204      	bcs.n	be110 <__aeabi_dmul+0x80>
   be106:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   be10a:	416d      	adcs	r5, r5
   be10c:	eb46 0606 	adc.w	r6, r6, r6
   be110:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   be114:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   be118:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   be11c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   be120:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   be124:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   be128:	bf88      	it	hi
   be12a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   be12e:	d81e      	bhi.n	be16e <__aeabi_dmul+0xde>
   be130:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   be134:	bf08      	it	eq
   be136:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   be13a:	f150 0000 	adcs.w	r0, r0, #0
   be13e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be142:	bd70      	pop	{r4, r5, r6, pc}
   be144:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   be148:	ea46 0101 	orr.w	r1, r6, r1
   be14c:	ea40 0002 	orr.w	r0, r0, r2
   be150:	ea81 0103 	eor.w	r1, r1, r3
   be154:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   be158:	bfc2      	ittt	gt
   be15a:	ebd4 050c 	rsbsgt	r5, r4, ip
   be15e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   be162:	bd70      	popgt	{r4, r5, r6, pc}
   be164:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be168:	f04f 0e00 	mov.w	lr, #0
   be16c:	3c01      	subs	r4, #1
   be16e:	f300 80ab 	bgt.w	be2c8 <__aeabi_dmul+0x238>
   be172:	f114 0f36 	cmn.w	r4, #54	; 0x36
   be176:	bfde      	ittt	le
   be178:	2000      	movle	r0, #0
   be17a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   be17e:	bd70      	pople	{r4, r5, r6, pc}
   be180:	f1c4 0400 	rsb	r4, r4, #0
   be184:	3c20      	subs	r4, #32
   be186:	da35      	bge.n	be1f4 <__aeabi_dmul+0x164>
   be188:	340c      	adds	r4, #12
   be18a:	dc1b      	bgt.n	be1c4 <__aeabi_dmul+0x134>
   be18c:	f104 0414 	add.w	r4, r4, #20
   be190:	f1c4 0520 	rsb	r5, r4, #32
   be194:	fa00 f305 	lsl.w	r3, r0, r5
   be198:	fa20 f004 	lsr.w	r0, r0, r4
   be19c:	fa01 f205 	lsl.w	r2, r1, r5
   be1a0:	ea40 0002 	orr.w	r0, r0, r2
   be1a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   be1a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   be1ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   be1b0:	fa21 f604 	lsr.w	r6, r1, r4
   be1b4:	eb42 0106 	adc.w	r1, r2, r6
   be1b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   be1bc:	bf08      	it	eq
   be1be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   be1c2:	bd70      	pop	{r4, r5, r6, pc}
   be1c4:	f1c4 040c 	rsb	r4, r4, #12
   be1c8:	f1c4 0520 	rsb	r5, r4, #32
   be1cc:	fa00 f304 	lsl.w	r3, r0, r4
   be1d0:	fa20 f005 	lsr.w	r0, r0, r5
   be1d4:	fa01 f204 	lsl.w	r2, r1, r4
   be1d8:	ea40 0002 	orr.w	r0, r0, r2
   be1dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be1e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   be1e4:	f141 0100 	adc.w	r1, r1, #0
   be1e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   be1ec:	bf08      	it	eq
   be1ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   be1f2:	bd70      	pop	{r4, r5, r6, pc}
   be1f4:	f1c4 0520 	rsb	r5, r4, #32
   be1f8:	fa00 f205 	lsl.w	r2, r0, r5
   be1fc:	ea4e 0e02 	orr.w	lr, lr, r2
   be200:	fa20 f304 	lsr.w	r3, r0, r4
   be204:	fa01 f205 	lsl.w	r2, r1, r5
   be208:	ea43 0302 	orr.w	r3, r3, r2
   be20c:	fa21 f004 	lsr.w	r0, r1, r4
   be210:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be214:	fa21 f204 	lsr.w	r2, r1, r4
   be218:	ea20 0002 	bic.w	r0, r0, r2
   be21c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   be220:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   be224:	bf08      	it	eq
   be226:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   be22a:	bd70      	pop	{r4, r5, r6, pc}
   be22c:	f094 0f00 	teq	r4, #0
   be230:	d10f      	bne.n	be252 <__aeabi_dmul+0x1c2>
   be232:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   be236:	0040      	lsls	r0, r0, #1
   be238:	eb41 0101 	adc.w	r1, r1, r1
   be23c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   be240:	bf08      	it	eq
   be242:	3c01      	subeq	r4, #1
   be244:	d0f7      	beq.n	be236 <__aeabi_dmul+0x1a6>
   be246:	ea41 0106 	orr.w	r1, r1, r6
   be24a:	f095 0f00 	teq	r5, #0
   be24e:	bf18      	it	ne
   be250:	4770      	bxne	lr
   be252:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   be256:	0052      	lsls	r2, r2, #1
   be258:	eb43 0303 	adc.w	r3, r3, r3
   be25c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   be260:	bf08      	it	eq
   be262:	3d01      	subeq	r5, #1
   be264:	d0f7      	beq.n	be256 <__aeabi_dmul+0x1c6>
   be266:	ea43 0306 	orr.w	r3, r3, r6
   be26a:	4770      	bx	lr
   be26c:	ea94 0f0c 	teq	r4, ip
   be270:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   be274:	bf18      	it	ne
   be276:	ea95 0f0c 	teqne	r5, ip
   be27a:	d00c      	beq.n	be296 <__aeabi_dmul+0x206>
   be27c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   be280:	bf18      	it	ne
   be282:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   be286:	d1d1      	bne.n	be22c <__aeabi_dmul+0x19c>
   be288:	ea81 0103 	eor.w	r1, r1, r3
   be28c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be290:	f04f 0000 	mov.w	r0, #0
   be294:	bd70      	pop	{r4, r5, r6, pc}
   be296:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   be29a:	bf06      	itte	eq
   be29c:	4610      	moveq	r0, r2
   be29e:	4619      	moveq	r1, r3
   be2a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   be2a4:	d019      	beq.n	be2da <__aeabi_dmul+0x24a>
   be2a6:	ea94 0f0c 	teq	r4, ip
   be2aa:	d102      	bne.n	be2b2 <__aeabi_dmul+0x222>
   be2ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   be2b0:	d113      	bne.n	be2da <__aeabi_dmul+0x24a>
   be2b2:	ea95 0f0c 	teq	r5, ip
   be2b6:	d105      	bne.n	be2c4 <__aeabi_dmul+0x234>
   be2b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   be2bc:	bf1c      	itt	ne
   be2be:	4610      	movne	r0, r2
   be2c0:	4619      	movne	r1, r3
   be2c2:	d10a      	bne.n	be2da <__aeabi_dmul+0x24a>
   be2c4:	ea81 0103 	eor.w	r1, r1, r3
   be2c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   be2cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   be2d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   be2d4:	f04f 0000 	mov.w	r0, #0
   be2d8:	bd70      	pop	{r4, r5, r6, pc}
   be2da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   be2de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   be2e2:	bd70      	pop	{r4, r5, r6, pc}

000be2e4 <__aeabi_ddiv>:
   be2e4:	b570      	push	{r4, r5, r6, lr}
   be2e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   be2ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   be2ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   be2f2:	bf1d      	ittte	ne
   be2f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   be2f8:	ea94 0f0c 	teqne	r4, ip
   be2fc:	ea95 0f0c 	teqne	r5, ip
   be300:	f000 f8a7 	bleq	be452 <__aeabi_ddiv+0x16e>
   be304:	eba4 0405 	sub.w	r4, r4, r5
   be308:	ea81 0e03 	eor.w	lr, r1, r3
   be30c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   be310:	ea4f 3101 	mov.w	r1, r1, lsl #12
   be314:	f000 8088 	beq.w	be428 <__aeabi_ddiv+0x144>
   be318:	ea4f 3303 	mov.w	r3, r3, lsl #12
   be31c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   be320:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   be324:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   be328:	ea4f 2202 	mov.w	r2, r2, lsl #8
   be32c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   be330:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   be334:	ea4f 2600 	mov.w	r6, r0, lsl #8
   be338:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   be33c:	429d      	cmp	r5, r3
   be33e:	bf08      	it	eq
   be340:	4296      	cmpeq	r6, r2
   be342:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   be346:	f504 7440 	add.w	r4, r4, #768	; 0x300
   be34a:	d202      	bcs.n	be352 <__aeabi_ddiv+0x6e>
   be34c:	085b      	lsrs	r3, r3, #1
   be34e:	ea4f 0232 	mov.w	r2, r2, rrx
   be352:	1ab6      	subs	r6, r6, r2
   be354:	eb65 0503 	sbc.w	r5, r5, r3
   be358:	085b      	lsrs	r3, r3, #1
   be35a:	ea4f 0232 	mov.w	r2, r2, rrx
   be35e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   be362:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   be366:	ebb6 0e02 	subs.w	lr, r6, r2
   be36a:	eb75 0e03 	sbcs.w	lr, r5, r3
   be36e:	bf22      	ittt	cs
   be370:	1ab6      	subcs	r6, r6, r2
   be372:	4675      	movcs	r5, lr
   be374:	ea40 000c 	orrcs.w	r0, r0, ip
   be378:	085b      	lsrs	r3, r3, #1
   be37a:	ea4f 0232 	mov.w	r2, r2, rrx
   be37e:	ebb6 0e02 	subs.w	lr, r6, r2
   be382:	eb75 0e03 	sbcs.w	lr, r5, r3
   be386:	bf22      	ittt	cs
   be388:	1ab6      	subcs	r6, r6, r2
   be38a:	4675      	movcs	r5, lr
   be38c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   be390:	085b      	lsrs	r3, r3, #1
   be392:	ea4f 0232 	mov.w	r2, r2, rrx
   be396:	ebb6 0e02 	subs.w	lr, r6, r2
   be39a:	eb75 0e03 	sbcs.w	lr, r5, r3
   be39e:	bf22      	ittt	cs
   be3a0:	1ab6      	subcs	r6, r6, r2
   be3a2:	4675      	movcs	r5, lr
   be3a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   be3a8:	085b      	lsrs	r3, r3, #1
   be3aa:	ea4f 0232 	mov.w	r2, r2, rrx
   be3ae:	ebb6 0e02 	subs.w	lr, r6, r2
   be3b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   be3b6:	bf22      	ittt	cs
   be3b8:	1ab6      	subcs	r6, r6, r2
   be3ba:	4675      	movcs	r5, lr
   be3bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   be3c0:	ea55 0e06 	orrs.w	lr, r5, r6
   be3c4:	d018      	beq.n	be3f8 <__aeabi_ddiv+0x114>
   be3c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   be3ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   be3ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
   be3d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   be3d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   be3da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   be3de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   be3e2:	d1c0      	bne.n	be366 <__aeabi_ddiv+0x82>
   be3e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   be3e8:	d10b      	bne.n	be402 <__aeabi_ddiv+0x11e>
   be3ea:	ea41 0100 	orr.w	r1, r1, r0
   be3ee:	f04f 0000 	mov.w	r0, #0
   be3f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   be3f6:	e7b6      	b.n	be366 <__aeabi_ddiv+0x82>
   be3f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   be3fc:	bf04      	itt	eq
   be3fe:	4301      	orreq	r1, r0
   be400:	2000      	moveq	r0, #0
   be402:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   be406:	bf88      	it	hi
   be408:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   be40c:	f63f aeaf 	bhi.w	be16e <__aeabi_dmul+0xde>
   be410:	ebb5 0c03 	subs.w	ip, r5, r3
   be414:	bf04      	itt	eq
   be416:	ebb6 0c02 	subseq.w	ip, r6, r2
   be41a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   be41e:	f150 0000 	adcs.w	r0, r0, #0
   be422:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   be426:	bd70      	pop	{r4, r5, r6, pc}
   be428:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   be42c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   be430:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   be434:	bfc2      	ittt	gt
   be436:	ebd4 050c 	rsbsgt	r5, r4, ip
   be43a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   be43e:	bd70      	popgt	{r4, r5, r6, pc}
   be440:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be444:	f04f 0e00 	mov.w	lr, #0
   be448:	3c01      	subs	r4, #1
   be44a:	e690      	b.n	be16e <__aeabi_dmul+0xde>
   be44c:	ea45 0e06 	orr.w	lr, r5, r6
   be450:	e68d      	b.n	be16e <__aeabi_dmul+0xde>
   be452:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   be456:	ea94 0f0c 	teq	r4, ip
   be45a:	bf08      	it	eq
   be45c:	ea95 0f0c 	teqeq	r5, ip
   be460:	f43f af3b 	beq.w	be2da <__aeabi_dmul+0x24a>
   be464:	ea94 0f0c 	teq	r4, ip
   be468:	d10a      	bne.n	be480 <__aeabi_ddiv+0x19c>
   be46a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   be46e:	f47f af34 	bne.w	be2da <__aeabi_dmul+0x24a>
   be472:	ea95 0f0c 	teq	r5, ip
   be476:	f47f af25 	bne.w	be2c4 <__aeabi_dmul+0x234>
   be47a:	4610      	mov	r0, r2
   be47c:	4619      	mov	r1, r3
   be47e:	e72c      	b.n	be2da <__aeabi_dmul+0x24a>
   be480:	ea95 0f0c 	teq	r5, ip
   be484:	d106      	bne.n	be494 <__aeabi_ddiv+0x1b0>
   be486:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   be48a:	f43f aefd 	beq.w	be288 <__aeabi_dmul+0x1f8>
   be48e:	4610      	mov	r0, r2
   be490:	4619      	mov	r1, r3
   be492:	e722      	b.n	be2da <__aeabi_dmul+0x24a>
   be494:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   be498:	bf18      	it	ne
   be49a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   be49e:	f47f aec5 	bne.w	be22c <__aeabi_dmul+0x19c>
   be4a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   be4a6:	f47f af0d 	bne.w	be2c4 <__aeabi_dmul+0x234>
   be4aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   be4ae:	f47f aeeb 	bne.w	be288 <__aeabi_dmul+0x1f8>
   be4b2:	e712      	b.n	be2da <__aeabi_dmul+0x24a>

000be4b4 <__gedf2>:
   be4b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   be4b8:	e006      	b.n	be4c8 <__cmpdf2+0x4>
   be4ba:	bf00      	nop

000be4bc <__ledf2>:
   be4bc:	f04f 0c01 	mov.w	ip, #1
   be4c0:	e002      	b.n	be4c8 <__cmpdf2+0x4>
   be4c2:	bf00      	nop

000be4c4 <__cmpdf2>:
   be4c4:	f04f 0c01 	mov.w	ip, #1
   be4c8:	f84d cd04 	str.w	ip, [sp, #-4]!
   be4cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   be4d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be4d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   be4d8:	bf18      	it	ne
   be4da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   be4de:	d01b      	beq.n	be518 <__cmpdf2+0x54>
   be4e0:	b001      	add	sp, #4
   be4e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   be4e6:	bf0c      	ite	eq
   be4e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   be4ec:	ea91 0f03 	teqne	r1, r3
   be4f0:	bf02      	ittt	eq
   be4f2:	ea90 0f02 	teqeq	r0, r2
   be4f6:	2000      	moveq	r0, #0
   be4f8:	4770      	bxeq	lr
   be4fa:	f110 0f00 	cmn.w	r0, #0
   be4fe:	ea91 0f03 	teq	r1, r3
   be502:	bf58      	it	pl
   be504:	4299      	cmppl	r1, r3
   be506:	bf08      	it	eq
   be508:	4290      	cmpeq	r0, r2
   be50a:	bf2c      	ite	cs
   be50c:	17d8      	asrcs	r0, r3, #31
   be50e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   be512:	f040 0001 	orr.w	r0, r0, #1
   be516:	4770      	bx	lr
   be518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   be51c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be520:	d102      	bne.n	be528 <__cmpdf2+0x64>
   be522:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   be526:	d107      	bne.n	be538 <__cmpdf2+0x74>
   be528:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   be52c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   be530:	d1d6      	bne.n	be4e0 <__cmpdf2+0x1c>
   be532:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   be536:	d0d3      	beq.n	be4e0 <__cmpdf2+0x1c>
   be538:	f85d 0b04 	ldr.w	r0, [sp], #4
   be53c:	4770      	bx	lr
   be53e:	bf00      	nop

000be540 <__aeabi_cdrcmple>:
   be540:	4684      	mov	ip, r0
   be542:	4610      	mov	r0, r2
   be544:	4662      	mov	r2, ip
   be546:	468c      	mov	ip, r1
   be548:	4619      	mov	r1, r3
   be54a:	4663      	mov	r3, ip
   be54c:	e000      	b.n	be550 <__aeabi_cdcmpeq>
   be54e:	bf00      	nop

000be550 <__aeabi_cdcmpeq>:
   be550:	b501      	push	{r0, lr}
   be552:	f7ff ffb7 	bl	be4c4 <__cmpdf2>
   be556:	2800      	cmp	r0, #0
   be558:	bf48      	it	mi
   be55a:	f110 0f00 	cmnmi.w	r0, #0
   be55e:	bd01      	pop	{r0, pc}

000be560 <__aeabi_dcmpeq>:
   be560:	f84d ed08 	str.w	lr, [sp, #-8]!
   be564:	f7ff fff4 	bl	be550 <__aeabi_cdcmpeq>
   be568:	bf0c      	ite	eq
   be56a:	2001      	moveq	r0, #1
   be56c:	2000      	movne	r0, #0
   be56e:	f85d fb08 	ldr.w	pc, [sp], #8
   be572:	bf00      	nop

000be574 <__aeabi_dcmplt>:
   be574:	f84d ed08 	str.w	lr, [sp, #-8]!
   be578:	f7ff ffea 	bl	be550 <__aeabi_cdcmpeq>
   be57c:	bf34      	ite	cc
   be57e:	2001      	movcc	r0, #1
   be580:	2000      	movcs	r0, #0
   be582:	f85d fb08 	ldr.w	pc, [sp], #8
   be586:	bf00      	nop

000be588 <__aeabi_dcmple>:
   be588:	f84d ed08 	str.w	lr, [sp, #-8]!
   be58c:	f7ff ffe0 	bl	be550 <__aeabi_cdcmpeq>
   be590:	bf94      	ite	ls
   be592:	2001      	movls	r0, #1
   be594:	2000      	movhi	r0, #0
   be596:	f85d fb08 	ldr.w	pc, [sp], #8
   be59a:	bf00      	nop

000be59c <__aeabi_dcmpge>:
   be59c:	f84d ed08 	str.w	lr, [sp, #-8]!
   be5a0:	f7ff ffce 	bl	be540 <__aeabi_cdrcmple>
   be5a4:	bf94      	ite	ls
   be5a6:	2001      	movls	r0, #1
   be5a8:	2000      	movhi	r0, #0
   be5aa:	f85d fb08 	ldr.w	pc, [sp], #8
   be5ae:	bf00      	nop

000be5b0 <__aeabi_dcmpgt>:
   be5b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   be5b4:	f7ff ffc4 	bl	be540 <__aeabi_cdrcmple>
   be5b8:	bf34      	ite	cc
   be5ba:	2001      	movcc	r0, #1
   be5bc:	2000      	movcs	r0, #0
   be5be:	f85d fb08 	ldr.w	pc, [sp], #8
   be5c2:	bf00      	nop

000be5c4 <__aeabi_d2uiz>:
   be5c4:	004a      	lsls	r2, r1, #1
   be5c6:	d211      	bcs.n	be5ec <__aeabi_d2uiz+0x28>
   be5c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   be5cc:	d211      	bcs.n	be5f2 <__aeabi_d2uiz+0x2e>
   be5ce:	d50d      	bpl.n	be5ec <__aeabi_d2uiz+0x28>
   be5d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   be5d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   be5d8:	d40e      	bmi.n	be5f8 <__aeabi_d2uiz+0x34>
   be5da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   be5de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   be5e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   be5e6:	fa23 f002 	lsr.w	r0, r3, r2
   be5ea:	4770      	bx	lr
   be5ec:	f04f 0000 	mov.w	r0, #0
   be5f0:	4770      	bx	lr
   be5f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   be5f6:	d102      	bne.n	be5fe <__aeabi_d2uiz+0x3a>
   be5f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   be5fc:	4770      	bx	lr
   be5fe:	f04f 0000 	mov.w	r0, #0
   be602:	4770      	bx	lr

000be604 <__aeabi_d2f>:
   be604:	ea4f 0241 	mov.w	r2, r1, lsl #1
   be608:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   be60c:	bf24      	itt	cs
   be60e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   be612:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   be616:	d90d      	bls.n	be634 <__aeabi_d2f+0x30>
   be618:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   be61c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   be620:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   be624:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   be628:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   be62c:	bf08      	it	eq
   be62e:	f020 0001 	biceq.w	r0, r0, #1
   be632:	4770      	bx	lr
   be634:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   be638:	d121      	bne.n	be67e <__aeabi_d2f+0x7a>
   be63a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   be63e:	bfbc      	itt	lt
   be640:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   be644:	4770      	bxlt	lr
   be646:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   be64a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   be64e:	f1c2 0218 	rsb	r2, r2, #24
   be652:	f1c2 0c20 	rsb	ip, r2, #32
   be656:	fa10 f30c 	lsls.w	r3, r0, ip
   be65a:	fa20 f002 	lsr.w	r0, r0, r2
   be65e:	bf18      	it	ne
   be660:	f040 0001 	orrne.w	r0, r0, #1
   be664:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   be668:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   be66c:	fa03 fc0c 	lsl.w	ip, r3, ip
   be670:	ea40 000c 	orr.w	r0, r0, ip
   be674:	fa23 f302 	lsr.w	r3, r3, r2
   be678:	ea4f 0343 	mov.w	r3, r3, lsl #1
   be67c:	e7cc      	b.n	be618 <__aeabi_d2f+0x14>
   be67e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   be682:	d107      	bne.n	be694 <__aeabi_d2f+0x90>
   be684:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   be688:	bf1e      	ittt	ne
   be68a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   be68e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   be692:	4770      	bxne	lr
   be694:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   be698:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   be69c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   be6a0:	4770      	bx	lr
   be6a2:	bf00      	nop

000be6a4 <__aeabi_d2ulz>:
   be6a4:	b5d0      	push	{r4, r6, r7, lr}
   be6a6:	4b0c      	ldr	r3, [pc, #48]	; (be6d8 <__aeabi_d2ulz+0x34>)
   be6a8:	2200      	movs	r2, #0
   be6aa:	4606      	mov	r6, r0
   be6ac:	460f      	mov	r7, r1
   be6ae:	f7ff fcef 	bl	be090 <__aeabi_dmul>
   be6b2:	f7ff ff87 	bl	be5c4 <__aeabi_d2uiz>
   be6b6:	4604      	mov	r4, r0
   be6b8:	f7ff fc70 	bl	bdf9c <__aeabi_ui2d>
   be6bc:	4b07      	ldr	r3, [pc, #28]	; (be6dc <__aeabi_d2ulz+0x38>)
   be6be:	2200      	movs	r2, #0
   be6c0:	f7ff fce6 	bl	be090 <__aeabi_dmul>
   be6c4:	4602      	mov	r2, r0
   be6c6:	460b      	mov	r3, r1
   be6c8:	4630      	mov	r0, r6
   be6ca:	4639      	mov	r1, r7
   be6cc:	f7ff fb28 	bl	bdd20 <__aeabi_dsub>
   be6d0:	f7ff ff78 	bl	be5c4 <__aeabi_d2uiz>
   be6d4:	4621      	mov	r1, r4
   be6d6:	bdd0      	pop	{r4, r6, r7, pc}
   be6d8:	3df00000 	.word	0x3df00000
   be6dc:	41f00000 	.word	0x41f00000

000be6e0 <atexit>:
   be6e0:	2300      	movs	r3, #0
   be6e2:	4601      	mov	r1, r0
   be6e4:	461a      	mov	r2, r3
   be6e6:	4618      	mov	r0, r3
   be6e8:	f000 bfe8 	b.w	bf6bc <__register_exitproc>

000be6ec <atof>:
   be6ec:	2100      	movs	r1, #0
   be6ee:	f000 bf4d 	b.w	bf58c <strtod>

000be6f2 <atoi>:
   be6f2:	220a      	movs	r2, #10
   be6f4:	2100      	movs	r1, #0
   be6f6:	f000 bfd7 	b.w	bf6a8 <strtol>

000be6fa <memcmp>:
   be6fa:	b510      	push	{r4, lr}
   be6fc:	3901      	subs	r1, #1
   be6fe:	4402      	add	r2, r0
   be700:	4290      	cmp	r0, r2
   be702:	d101      	bne.n	be708 <memcmp+0xe>
   be704:	2000      	movs	r0, #0
   be706:	e005      	b.n	be714 <memcmp+0x1a>
   be708:	7803      	ldrb	r3, [r0, #0]
   be70a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   be70e:	42a3      	cmp	r3, r4
   be710:	d001      	beq.n	be716 <memcmp+0x1c>
   be712:	1b18      	subs	r0, r3, r4
   be714:	bd10      	pop	{r4, pc}
   be716:	3001      	adds	r0, #1
   be718:	e7f2      	b.n	be700 <memcmp+0x6>

000be71a <memcpy>:
   be71a:	440a      	add	r2, r1
   be71c:	4291      	cmp	r1, r2
   be71e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   be722:	d100      	bne.n	be726 <memcpy+0xc>
   be724:	4770      	bx	lr
   be726:	b510      	push	{r4, lr}
   be728:	f811 4b01 	ldrb.w	r4, [r1], #1
   be72c:	f803 4f01 	strb.w	r4, [r3, #1]!
   be730:	4291      	cmp	r1, r2
   be732:	d1f9      	bne.n	be728 <memcpy+0xe>
   be734:	bd10      	pop	{r4, pc}

000be736 <memmove>:
   be736:	4288      	cmp	r0, r1
   be738:	b510      	push	{r4, lr}
   be73a:	eb01 0402 	add.w	r4, r1, r2
   be73e:	d902      	bls.n	be746 <memmove+0x10>
   be740:	4284      	cmp	r4, r0
   be742:	4623      	mov	r3, r4
   be744:	d807      	bhi.n	be756 <memmove+0x20>
   be746:	1e43      	subs	r3, r0, #1
   be748:	42a1      	cmp	r1, r4
   be74a:	d008      	beq.n	be75e <memmove+0x28>
   be74c:	f811 2b01 	ldrb.w	r2, [r1], #1
   be750:	f803 2f01 	strb.w	r2, [r3, #1]!
   be754:	e7f8      	b.n	be748 <memmove+0x12>
   be756:	4402      	add	r2, r0
   be758:	4601      	mov	r1, r0
   be75a:	428a      	cmp	r2, r1
   be75c:	d100      	bne.n	be760 <memmove+0x2a>
   be75e:	bd10      	pop	{r4, pc}
   be760:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   be764:	f802 4d01 	strb.w	r4, [r2, #-1]!
   be768:	e7f7      	b.n	be75a <memmove+0x24>

000be76a <memset>:
   be76a:	4402      	add	r2, r0
   be76c:	4603      	mov	r3, r0
   be76e:	4293      	cmp	r3, r2
   be770:	d100      	bne.n	be774 <memset+0xa>
   be772:	4770      	bx	lr
   be774:	f803 1b01 	strb.w	r1, [r3], #1
   be778:	e7f9      	b.n	be76e <memset+0x4>
	...

000be77c <srand>:
   be77c:	b538      	push	{r3, r4, r5, lr}
   be77e:	4b10      	ldr	r3, [pc, #64]	; (be7c0 <srand+0x44>)
   be780:	681d      	ldr	r5, [r3, #0]
   be782:	6bab      	ldr	r3, [r5, #56]	; 0x38
   be784:	4604      	mov	r4, r0
   be786:	b9b3      	cbnz	r3, be7b6 <srand+0x3a>
   be788:	2018      	movs	r0, #24
   be78a:	f7fb fad7 	bl	b9d3c <malloc>
   be78e:	4602      	mov	r2, r0
   be790:	63a8      	str	r0, [r5, #56]	; 0x38
   be792:	b920      	cbnz	r0, be79e <srand+0x22>
   be794:	4b0b      	ldr	r3, [pc, #44]	; (be7c4 <srand+0x48>)
   be796:	480c      	ldr	r0, [pc, #48]	; (be7c8 <srand+0x4c>)
   be798:	2142      	movs	r1, #66	; 0x42
   be79a:	f7fb fb1f 	bl	b9ddc <__assert_func>
   be79e:	490b      	ldr	r1, [pc, #44]	; (be7cc <srand+0x50>)
   be7a0:	4b0b      	ldr	r3, [pc, #44]	; (be7d0 <srand+0x54>)
   be7a2:	e9c0 1300 	strd	r1, r3, [r0]
   be7a6:	4b0b      	ldr	r3, [pc, #44]	; (be7d4 <srand+0x58>)
   be7a8:	6083      	str	r3, [r0, #8]
   be7aa:	230b      	movs	r3, #11
   be7ac:	8183      	strh	r3, [r0, #12]
   be7ae:	2100      	movs	r1, #0
   be7b0:	2001      	movs	r0, #1
   be7b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   be7b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   be7b8:	2200      	movs	r2, #0
   be7ba:	611c      	str	r4, [r3, #16]
   be7bc:	615a      	str	r2, [r3, #20]
   be7be:	bd38      	pop	{r3, r4, r5, pc}
   be7c0:	2003da98 	.word	0x2003da98
   be7c4:	000c1d45 	.word	0x000c1d45
   be7c8:	000c1d5c 	.word	0x000c1d5c
   be7cc:	abcd330e 	.word	0xabcd330e
   be7d0:	e66d1234 	.word	0xe66d1234
   be7d4:	0005deec 	.word	0x0005deec

000be7d8 <rand>:
   be7d8:	4b16      	ldr	r3, [pc, #88]	; (be834 <rand+0x5c>)
   be7da:	b510      	push	{r4, lr}
   be7dc:	681c      	ldr	r4, [r3, #0]
   be7de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   be7e0:	b9b3      	cbnz	r3, be810 <rand+0x38>
   be7e2:	2018      	movs	r0, #24
   be7e4:	f7fb faaa 	bl	b9d3c <malloc>
   be7e8:	63a0      	str	r0, [r4, #56]	; 0x38
   be7ea:	b928      	cbnz	r0, be7f8 <rand+0x20>
   be7ec:	4602      	mov	r2, r0
   be7ee:	4b12      	ldr	r3, [pc, #72]	; (be838 <rand+0x60>)
   be7f0:	4812      	ldr	r0, [pc, #72]	; (be83c <rand+0x64>)
   be7f2:	214e      	movs	r1, #78	; 0x4e
   be7f4:	f7fb faf2 	bl	b9ddc <__assert_func>
   be7f8:	4a11      	ldr	r2, [pc, #68]	; (be840 <rand+0x68>)
   be7fa:	4b12      	ldr	r3, [pc, #72]	; (be844 <rand+0x6c>)
   be7fc:	e9c0 2300 	strd	r2, r3, [r0]
   be800:	4b11      	ldr	r3, [pc, #68]	; (be848 <rand+0x70>)
   be802:	6083      	str	r3, [r0, #8]
   be804:	230b      	movs	r3, #11
   be806:	8183      	strh	r3, [r0, #12]
   be808:	2201      	movs	r2, #1
   be80a:	2300      	movs	r3, #0
   be80c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   be810:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   be812:	4a0e      	ldr	r2, [pc, #56]	; (be84c <rand+0x74>)
   be814:	6920      	ldr	r0, [r4, #16]
   be816:	6963      	ldr	r3, [r4, #20]
   be818:	490d      	ldr	r1, [pc, #52]	; (be850 <rand+0x78>)
   be81a:	4342      	muls	r2, r0
   be81c:	fb01 2203 	mla	r2, r1, r3, r2
   be820:	fba0 0101 	umull	r0, r1, r0, r1
   be824:	1c43      	adds	r3, r0, #1
   be826:	eb42 0001 	adc.w	r0, r2, r1
   be82a:	e9c4 3004 	strd	r3, r0, [r4, #16]
   be82e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   be832:	bd10      	pop	{r4, pc}
   be834:	2003da98 	.word	0x2003da98
   be838:	000c1d45 	.word	0x000c1d45
   be83c:	000c1d5c 	.word	0x000c1d5c
   be840:	abcd330e 	.word	0xabcd330e
   be844:	e66d1234 	.word	0xe66d1234
   be848:	0005deec 	.word	0x0005deec
   be84c:	5851f42d 	.word	0x5851f42d
   be850:	4c957f2d 	.word	0x4c957f2d

000be854 <strcat>:
   be854:	b510      	push	{r4, lr}
   be856:	4602      	mov	r2, r0
   be858:	7814      	ldrb	r4, [r2, #0]
   be85a:	4613      	mov	r3, r2
   be85c:	3201      	adds	r2, #1
   be85e:	2c00      	cmp	r4, #0
   be860:	d1fa      	bne.n	be858 <strcat+0x4>
   be862:	3b01      	subs	r3, #1
   be864:	f811 2b01 	ldrb.w	r2, [r1], #1
   be868:	f803 2f01 	strb.w	r2, [r3, #1]!
   be86c:	2a00      	cmp	r2, #0
   be86e:	d1f9      	bne.n	be864 <strcat+0x10>
   be870:	bd10      	pop	{r4, pc}

000be872 <strcmp>:
   be872:	f810 2b01 	ldrb.w	r2, [r0], #1
   be876:	f811 3b01 	ldrb.w	r3, [r1], #1
   be87a:	2a01      	cmp	r2, #1
   be87c:	bf28      	it	cs
   be87e:	429a      	cmpcs	r2, r3
   be880:	d0f7      	beq.n	be872 <strcmp>
   be882:	1ad0      	subs	r0, r2, r3
   be884:	4770      	bx	lr

000be886 <strcpy>:
   be886:	4603      	mov	r3, r0
   be888:	f811 2b01 	ldrb.w	r2, [r1], #1
   be88c:	f803 2b01 	strb.w	r2, [r3], #1
   be890:	2a00      	cmp	r2, #0
   be892:	d1f9      	bne.n	be888 <strcpy+0x2>
   be894:	4770      	bx	lr
	...

000be898 <strdup>:
   be898:	4b02      	ldr	r3, [pc, #8]	; (be8a4 <strdup+0xc>)
   be89a:	4601      	mov	r1, r0
   be89c:	6818      	ldr	r0, [r3, #0]
   be89e:	f000 b803 	b.w	be8a8 <_strdup_r>
   be8a2:	bf00      	nop
   be8a4:	2003da98 	.word	0x2003da98

000be8a8 <_strdup_r>:
   be8a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be8aa:	4604      	mov	r4, r0
   be8ac:	4608      	mov	r0, r1
   be8ae:	460d      	mov	r5, r1
   be8b0:	f000 f80f 	bl	be8d2 <strlen>
   be8b4:	1c42      	adds	r2, r0, #1
   be8b6:	4611      	mov	r1, r2
   be8b8:	4620      	mov	r0, r4
   be8ba:	9201      	str	r2, [sp, #4]
   be8bc:	f7fb fa7e 	bl	b9dbc <_malloc_r>
   be8c0:	4604      	mov	r4, r0
   be8c2:	b118      	cbz	r0, be8cc <_strdup_r+0x24>
   be8c4:	9a01      	ldr	r2, [sp, #4]
   be8c6:	4629      	mov	r1, r5
   be8c8:	f7ff ff27 	bl	be71a <memcpy>
   be8cc:	4620      	mov	r0, r4
   be8ce:	b003      	add	sp, #12
   be8d0:	bd30      	pop	{r4, r5, pc}

000be8d2 <strlen>:
   be8d2:	4603      	mov	r3, r0
   be8d4:	f813 2b01 	ldrb.w	r2, [r3], #1
   be8d8:	2a00      	cmp	r2, #0
   be8da:	d1fb      	bne.n	be8d4 <strlen+0x2>
   be8dc:	1a18      	subs	r0, r3, r0
   be8de:	3801      	subs	r0, #1
   be8e0:	4770      	bx	lr

000be8e2 <strncmp>:
   be8e2:	b510      	push	{r4, lr}
   be8e4:	b17a      	cbz	r2, be906 <strncmp+0x24>
   be8e6:	4603      	mov	r3, r0
   be8e8:	3901      	subs	r1, #1
   be8ea:	1884      	adds	r4, r0, r2
   be8ec:	f813 0b01 	ldrb.w	r0, [r3], #1
   be8f0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   be8f4:	4290      	cmp	r0, r2
   be8f6:	d101      	bne.n	be8fc <strncmp+0x1a>
   be8f8:	42a3      	cmp	r3, r4
   be8fa:	d101      	bne.n	be900 <strncmp+0x1e>
   be8fc:	1a80      	subs	r0, r0, r2
   be8fe:	bd10      	pop	{r4, pc}
   be900:	2800      	cmp	r0, #0
   be902:	d1f3      	bne.n	be8ec <strncmp+0xa>
   be904:	e7fa      	b.n	be8fc <strncmp+0x1a>
   be906:	4610      	mov	r0, r2
   be908:	e7f9      	b.n	be8fe <strncmp+0x1c>

000be90a <strncpy>:
   be90a:	b510      	push	{r4, lr}
   be90c:	3901      	subs	r1, #1
   be90e:	4603      	mov	r3, r0
   be910:	b132      	cbz	r2, be920 <strncpy+0x16>
   be912:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   be916:	f803 4b01 	strb.w	r4, [r3], #1
   be91a:	3a01      	subs	r2, #1
   be91c:	2c00      	cmp	r4, #0
   be91e:	d1f7      	bne.n	be910 <strncpy+0x6>
   be920:	441a      	add	r2, r3
   be922:	2100      	movs	r1, #0
   be924:	4293      	cmp	r3, r2
   be926:	d100      	bne.n	be92a <strncpy+0x20>
   be928:	bd10      	pop	{r4, pc}
   be92a:	f803 1b01 	strb.w	r1, [r3], #1
   be92e:	e7f9      	b.n	be924 <strncpy+0x1a>

000be930 <strnlen>:
   be930:	b510      	push	{r4, lr}
   be932:	4602      	mov	r2, r0
   be934:	4401      	add	r1, r0
   be936:	428a      	cmp	r2, r1
   be938:	4613      	mov	r3, r2
   be93a:	d003      	beq.n	be944 <strnlen+0x14>
   be93c:	781c      	ldrb	r4, [r3, #0]
   be93e:	3201      	adds	r2, #1
   be940:	2c00      	cmp	r4, #0
   be942:	d1f8      	bne.n	be936 <strnlen+0x6>
   be944:	1a18      	subs	r0, r3, r0
   be946:	bd10      	pop	{r4, pc}

000be948 <sulp>:
   be948:	b570      	push	{r4, r5, r6, lr}
   be94a:	4604      	mov	r4, r0
   be94c:	460d      	mov	r5, r1
   be94e:	ec45 4b10 	vmov	d0, r4, r5
   be952:	4616      	mov	r6, r2
   be954:	f001 fe0c 	bl	c0570 <__ulp>
   be958:	ec51 0b10 	vmov	r0, r1, d0
   be95c:	b17e      	cbz	r6, be97e <sulp+0x36>
   be95e:	f3c5 530a 	ubfx	r3, r5, #20, #11
   be962:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   be966:	2b00      	cmp	r3, #0
   be968:	dd09      	ble.n	be97e <sulp+0x36>
   be96a:	051b      	lsls	r3, r3, #20
   be96c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   be970:	2400      	movs	r4, #0
   be972:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   be976:	4622      	mov	r2, r4
   be978:	462b      	mov	r3, r5
   be97a:	f7ff fb89 	bl	be090 <__aeabi_dmul>
   be97e:	bd70      	pop	{r4, r5, r6, pc}

000be980 <_strtod_l>:
   be980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be984:	ed2d 8b02 	vpush	{d8}
   be988:	b09d      	sub	sp, #116	; 0x74
   be98a:	461f      	mov	r7, r3
   be98c:	2300      	movs	r3, #0
   be98e:	9318      	str	r3, [sp, #96]	; 0x60
   be990:	4ba2      	ldr	r3, [pc, #648]	; (bec1c <_strtod_l+0x29c>)
   be992:	9213      	str	r2, [sp, #76]	; 0x4c
   be994:	681b      	ldr	r3, [r3, #0]
   be996:	9305      	str	r3, [sp, #20]
   be998:	4604      	mov	r4, r0
   be99a:	4618      	mov	r0, r3
   be99c:	4688      	mov	r8, r1
   be99e:	f7ff ff98 	bl	be8d2 <strlen>
   be9a2:	f04f 0a00 	mov.w	sl, #0
   be9a6:	4605      	mov	r5, r0
   be9a8:	f04f 0b00 	mov.w	fp, #0
   be9ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   be9b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be9b2:	781a      	ldrb	r2, [r3, #0]
   be9b4:	2a2b      	cmp	r2, #43	; 0x2b
   be9b6:	d04e      	beq.n	bea56 <_strtod_l+0xd6>
   be9b8:	d83b      	bhi.n	bea32 <_strtod_l+0xb2>
   be9ba:	2a0d      	cmp	r2, #13
   be9bc:	d834      	bhi.n	bea28 <_strtod_l+0xa8>
   be9be:	2a08      	cmp	r2, #8
   be9c0:	d834      	bhi.n	bea2c <_strtod_l+0xac>
   be9c2:	2a00      	cmp	r2, #0
   be9c4:	d03e      	beq.n	bea44 <_strtod_l+0xc4>
   be9c6:	2300      	movs	r3, #0
   be9c8:	930a      	str	r3, [sp, #40]	; 0x28
   be9ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   be9cc:	7833      	ldrb	r3, [r6, #0]
   be9ce:	2b30      	cmp	r3, #48	; 0x30
   be9d0:	f040 80b0 	bne.w	beb34 <_strtod_l+0x1b4>
   be9d4:	7873      	ldrb	r3, [r6, #1]
   be9d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   be9da:	2b58      	cmp	r3, #88	; 0x58
   be9dc:	d168      	bne.n	beab0 <_strtod_l+0x130>
   be9de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   be9e0:	9301      	str	r3, [sp, #4]
   be9e2:	ab18      	add	r3, sp, #96	; 0x60
   be9e4:	9702      	str	r7, [sp, #8]
   be9e6:	9300      	str	r3, [sp, #0]
   be9e8:	4a8d      	ldr	r2, [pc, #564]	; (bec20 <_strtod_l+0x2a0>)
   be9ea:	ab19      	add	r3, sp, #100	; 0x64
   be9ec:	a917      	add	r1, sp, #92	; 0x5c
   be9ee:	4620      	mov	r0, r4
   be9f0:	f000 ff2e 	bl	bf850 <__gethex>
   be9f4:	f010 0707 	ands.w	r7, r0, #7
   be9f8:	4605      	mov	r5, r0
   be9fa:	d005      	beq.n	bea08 <_strtod_l+0x88>
   be9fc:	2f06      	cmp	r7, #6
   be9fe:	d12c      	bne.n	bea5a <_strtod_l+0xda>
   bea00:	3601      	adds	r6, #1
   bea02:	2300      	movs	r3, #0
   bea04:	9617      	str	r6, [sp, #92]	; 0x5c
   bea06:	930a      	str	r3, [sp, #40]	; 0x28
   bea08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bea0a:	2b00      	cmp	r3, #0
   bea0c:	f040 8590 	bne.w	bf530 <_strtod_l+0xbb0>
   bea10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bea12:	b1eb      	cbz	r3, bea50 <_strtod_l+0xd0>
   bea14:	4652      	mov	r2, sl
   bea16:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bea1a:	ec43 2b10 	vmov	d0, r2, r3
   bea1e:	b01d      	add	sp, #116	; 0x74
   bea20:	ecbd 8b02 	vpop	{d8}
   bea24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bea28:	2a20      	cmp	r2, #32
   bea2a:	d1cc      	bne.n	be9c6 <_strtod_l+0x46>
   bea2c:	3301      	adds	r3, #1
   bea2e:	9317      	str	r3, [sp, #92]	; 0x5c
   bea30:	e7be      	b.n	be9b0 <_strtod_l+0x30>
   bea32:	2a2d      	cmp	r2, #45	; 0x2d
   bea34:	d1c7      	bne.n	be9c6 <_strtod_l+0x46>
   bea36:	2201      	movs	r2, #1
   bea38:	920a      	str	r2, [sp, #40]	; 0x28
   bea3a:	1c5a      	adds	r2, r3, #1
   bea3c:	9217      	str	r2, [sp, #92]	; 0x5c
   bea3e:	785b      	ldrb	r3, [r3, #1]
   bea40:	2b00      	cmp	r3, #0
   bea42:	d1c2      	bne.n	be9ca <_strtod_l+0x4a>
   bea44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bea46:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bea4a:	2b00      	cmp	r3, #0
   bea4c:	f040 856e 	bne.w	bf52c <_strtod_l+0xbac>
   bea50:	4652      	mov	r2, sl
   bea52:	465b      	mov	r3, fp
   bea54:	e7e1      	b.n	bea1a <_strtod_l+0x9a>
   bea56:	2200      	movs	r2, #0
   bea58:	e7ee      	b.n	bea38 <_strtod_l+0xb8>
   bea5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bea5c:	b13a      	cbz	r2, bea6e <_strtod_l+0xee>
   bea5e:	2135      	movs	r1, #53	; 0x35
   bea60:	a81a      	add	r0, sp, #104	; 0x68
   bea62:	f001 fe90 	bl	c0786 <__copybits>
   bea66:	9918      	ldr	r1, [sp, #96]	; 0x60
   bea68:	4620      	mov	r0, r4
   bea6a:	f001 fa4f 	bl	bff0c <_Bfree>
   bea6e:	3f01      	subs	r7, #1
   bea70:	2f04      	cmp	r7, #4
   bea72:	d806      	bhi.n	bea82 <_strtod_l+0x102>
   bea74:	e8df f007 	tbb	[pc, r7]
   bea78:	1714030a 	.word	0x1714030a
   bea7c:	0a          	.byte	0x0a
   bea7d:	00          	.byte	0x00
   bea7e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bea82:	0728      	lsls	r0, r5, #28
   bea84:	d5c0      	bpl.n	bea08 <_strtod_l+0x88>
   bea86:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bea8a:	e7bd      	b.n	bea08 <_strtod_l+0x88>
   bea8c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bea90:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bea92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bea96:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bea9a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bea9e:	e7f0      	b.n	bea82 <_strtod_l+0x102>
   beaa0:	f8df b180 	ldr.w	fp, [pc, #384]	; bec24 <_strtod_l+0x2a4>
   beaa4:	e7ed      	b.n	bea82 <_strtod_l+0x102>
   beaa6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   beaaa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   beaae:	e7e8      	b.n	bea82 <_strtod_l+0x102>
   beab0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   beab2:	1c5a      	adds	r2, r3, #1
   beab4:	9217      	str	r2, [sp, #92]	; 0x5c
   beab6:	785b      	ldrb	r3, [r3, #1]
   beab8:	2b30      	cmp	r3, #48	; 0x30
   beaba:	d0f9      	beq.n	beab0 <_strtod_l+0x130>
   beabc:	2b00      	cmp	r3, #0
   beabe:	d0a3      	beq.n	bea08 <_strtod_l+0x88>
   beac0:	2301      	movs	r3, #1
   beac2:	f04f 0900 	mov.w	r9, #0
   beac6:	9304      	str	r3, [sp, #16]
   beac8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   beaca:	9308      	str	r3, [sp, #32]
   beacc:	f8cd 901c 	str.w	r9, [sp, #28]
   bead0:	464f      	mov	r7, r9
   bead2:	220a      	movs	r2, #10
   bead4:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bead6:	7806      	ldrb	r6, [r0, #0]
   bead8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   beadc:	b2d9      	uxtb	r1, r3
   beade:	2909      	cmp	r1, #9
   beae0:	d92a      	bls.n	beb38 <_strtod_l+0x1b8>
   beae2:	9905      	ldr	r1, [sp, #20]
   beae4:	462a      	mov	r2, r5
   beae6:	f7ff fefc 	bl	be8e2 <strncmp>
   beaea:	b398      	cbz	r0, beb54 <_strtod_l+0x1d4>
   beaec:	2000      	movs	r0, #0
   beaee:	4632      	mov	r2, r6
   beaf0:	463d      	mov	r5, r7
   beaf2:	9005      	str	r0, [sp, #20]
   beaf4:	4603      	mov	r3, r0
   beaf6:	2a65      	cmp	r2, #101	; 0x65
   beaf8:	d001      	beq.n	beafe <_strtod_l+0x17e>
   beafa:	2a45      	cmp	r2, #69	; 0x45
   beafc:	d118      	bne.n	beb30 <_strtod_l+0x1b0>
   beafe:	b91d      	cbnz	r5, beb08 <_strtod_l+0x188>
   beb00:	9a04      	ldr	r2, [sp, #16]
   beb02:	4302      	orrs	r2, r0
   beb04:	d09e      	beq.n	bea44 <_strtod_l+0xc4>
   beb06:	2500      	movs	r5, #0
   beb08:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   beb0c:	f108 0201 	add.w	r2, r8, #1
   beb10:	9217      	str	r2, [sp, #92]	; 0x5c
   beb12:	f898 2001 	ldrb.w	r2, [r8, #1]
   beb16:	2a2b      	cmp	r2, #43	; 0x2b
   beb18:	d075      	beq.n	bec06 <_strtod_l+0x286>
   beb1a:	2a2d      	cmp	r2, #45	; 0x2d
   beb1c:	d07b      	beq.n	bec16 <_strtod_l+0x296>
   beb1e:	f04f 0c00 	mov.w	ip, #0
   beb22:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   beb26:	2909      	cmp	r1, #9
   beb28:	f240 8082 	bls.w	bec30 <_strtod_l+0x2b0>
   beb2c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   beb30:	2600      	movs	r6, #0
   beb32:	e09d      	b.n	bec70 <_strtod_l+0x2f0>
   beb34:	2300      	movs	r3, #0
   beb36:	e7c4      	b.n	beac2 <_strtod_l+0x142>
   beb38:	2f08      	cmp	r7, #8
   beb3a:	bfd8      	it	le
   beb3c:	9907      	ldrle	r1, [sp, #28]
   beb3e:	f100 0001 	add.w	r0, r0, #1
   beb42:	bfda      	itte	le
   beb44:	fb02 3301 	mlale	r3, r2, r1, r3
   beb48:	9307      	strle	r3, [sp, #28]
   beb4a:	fb02 3909 	mlagt	r9, r2, r9, r3
   beb4e:	3701      	adds	r7, #1
   beb50:	9017      	str	r0, [sp, #92]	; 0x5c
   beb52:	e7bf      	b.n	bead4 <_strtod_l+0x154>
   beb54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   beb56:	195a      	adds	r2, r3, r5
   beb58:	9217      	str	r2, [sp, #92]	; 0x5c
   beb5a:	5d5a      	ldrb	r2, [r3, r5]
   beb5c:	2f00      	cmp	r7, #0
   beb5e:	d037      	beq.n	bebd0 <_strtod_l+0x250>
   beb60:	9005      	str	r0, [sp, #20]
   beb62:	463d      	mov	r5, r7
   beb64:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   beb68:	2b09      	cmp	r3, #9
   beb6a:	d912      	bls.n	beb92 <_strtod_l+0x212>
   beb6c:	2301      	movs	r3, #1
   beb6e:	e7c2      	b.n	beaf6 <_strtod_l+0x176>
   beb70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   beb72:	1c5a      	adds	r2, r3, #1
   beb74:	9217      	str	r2, [sp, #92]	; 0x5c
   beb76:	785a      	ldrb	r2, [r3, #1]
   beb78:	3001      	adds	r0, #1
   beb7a:	2a30      	cmp	r2, #48	; 0x30
   beb7c:	d0f8      	beq.n	beb70 <_strtod_l+0x1f0>
   beb7e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   beb82:	2b08      	cmp	r3, #8
   beb84:	f200 84d9 	bhi.w	bf53a <_strtod_l+0xbba>
   beb88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   beb8a:	9005      	str	r0, [sp, #20]
   beb8c:	2000      	movs	r0, #0
   beb8e:	9308      	str	r3, [sp, #32]
   beb90:	4605      	mov	r5, r0
   beb92:	3a30      	subs	r2, #48	; 0x30
   beb94:	f100 0301 	add.w	r3, r0, #1
   beb98:	d014      	beq.n	bebc4 <_strtod_l+0x244>
   beb9a:	9905      	ldr	r1, [sp, #20]
   beb9c:	4419      	add	r1, r3
   beb9e:	9105      	str	r1, [sp, #20]
   beba0:	462b      	mov	r3, r5
   beba2:	eb00 0e05 	add.w	lr, r0, r5
   beba6:	210a      	movs	r1, #10
   beba8:	4573      	cmp	r3, lr
   bebaa:	d113      	bne.n	bebd4 <_strtod_l+0x254>
   bebac:	182b      	adds	r3, r5, r0
   bebae:	2b08      	cmp	r3, #8
   bebb0:	f105 0501 	add.w	r5, r5, #1
   bebb4:	4405      	add	r5, r0
   bebb6:	dc1c      	bgt.n	bebf2 <_strtod_l+0x272>
   bebb8:	9907      	ldr	r1, [sp, #28]
   bebba:	230a      	movs	r3, #10
   bebbc:	fb03 2301 	mla	r3, r3, r1, r2
   bebc0:	9307      	str	r3, [sp, #28]
   bebc2:	2300      	movs	r3, #0
   bebc4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bebc6:	1c51      	adds	r1, r2, #1
   bebc8:	9117      	str	r1, [sp, #92]	; 0x5c
   bebca:	7852      	ldrb	r2, [r2, #1]
   bebcc:	4618      	mov	r0, r3
   bebce:	e7c9      	b.n	beb64 <_strtod_l+0x1e4>
   bebd0:	4638      	mov	r0, r7
   bebd2:	e7d2      	b.n	beb7a <_strtod_l+0x1fa>
   bebd4:	2b08      	cmp	r3, #8
   bebd6:	dc04      	bgt.n	bebe2 <_strtod_l+0x262>
   bebd8:	9e07      	ldr	r6, [sp, #28]
   bebda:	434e      	muls	r6, r1
   bebdc:	9607      	str	r6, [sp, #28]
   bebde:	3301      	adds	r3, #1
   bebe0:	e7e2      	b.n	beba8 <_strtod_l+0x228>
   bebe2:	f103 0c01 	add.w	ip, r3, #1
   bebe6:	f1bc 0f10 	cmp.w	ip, #16
   bebea:	bfd8      	it	le
   bebec:	fb01 f909 	mulle.w	r9, r1, r9
   bebf0:	e7f5      	b.n	bebde <_strtod_l+0x25e>
   bebf2:	2d10      	cmp	r5, #16
   bebf4:	bfdc      	itt	le
   bebf6:	230a      	movle	r3, #10
   bebf8:	fb03 2909 	mlale	r9, r3, r9, r2
   bebfc:	e7e1      	b.n	bebc2 <_strtod_l+0x242>
   bebfe:	2300      	movs	r3, #0
   bec00:	9305      	str	r3, [sp, #20]
   bec02:	2301      	movs	r3, #1
   bec04:	e77c      	b.n	beb00 <_strtod_l+0x180>
   bec06:	f04f 0c00 	mov.w	ip, #0
   bec0a:	f108 0202 	add.w	r2, r8, #2
   bec0e:	9217      	str	r2, [sp, #92]	; 0x5c
   bec10:	f898 2002 	ldrb.w	r2, [r8, #2]
   bec14:	e785      	b.n	beb22 <_strtod_l+0x1a2>
   bec16:	f04f 0c01 	mov.w	ip, #1
   bec1a:	e7f6      	b.n	bec0a <_strtod_l+0x28a>
   bec1c:	000c1f8c 	.word	0x000c1f8c
   bec20:	000c1dc4 	.word	0x000c1dc4
   bec24:	7ff00000 	.word	0x7ff00000
   bec28:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bec2a:	1c51      	adds	r1, r2, #1
   bec2c:	9117      	str	r1, [sp, #92]	; 0x5c
   bec2e:	7852      	ldrb	r2, [r2, #1]
   bec30:	2a30      	cmp	r2, #48	; 0x30
   bec32:	d0f9      	beq.n	bec28 <_strtod_l+0x2a8>
   bec34:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bec38:	2908      	cmp	r1, #8
   bec3a:	f63f af79 	bhi.w	beb30 <_strtod_l+0x1b0>
   bec3e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bec42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bec44:	9206      	str	r2, [sp, #24]
   bec46:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bec48:	1c51      	adds	r1, r2, #1
   bec4a:	9117      	str	r1, [sp, #92]	; 0x5c
   bec4c:	7852      	ldrb	r2, [r2, #1]
   bec4e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bec52:	2e09      	cmp	r6, #9
   bec54:	d937      	bls.n	becc6 <_strtod_l+0x346>
   bec56:	9e06      	ldr	r6, [sp, #24]
   bec58:	1b89      	subs	r1, r1, r6
   bec5a:	2908      	cmp	r1, #8
   bec5c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bec60:	dc02      	bgt.n	bec68 <_strtod_l+0x2e8>
   bec62:	4576      	cmp	r6, lr
   bec64:	bfa8      	it	ge
   bec66:	4676      	movge	r6, lr
   bec68:	f1bc 0f00 	cmp.w	ip, #0
   bec6c:	d000      	beq.n	bec70 <_strtod_l+0x2f0>
   bec6e:	4276      	negs	r6, r6
   bec70:	2d00      	cmp	r5, #0
   bec72:	d14d      	bne.n	bed10 <_strtod_l+0x390>
   bec74:	9904      	ldr	r1, [sp, #16]
   bec76:	4301      	orrs	r1, r0
   bec78:	f47f aec6 	bne.w	bea08 <_strtod_l+0x88>
   bec7c:	2b00      	cmp	r3, #0
   bec7e:	f47f aee1 	bne.w	bea44 <_strtod_l+0xc4>
   bec82:	2a69      	cmp	r2, #105	; 0x69
   bec84:	d027      	beq.n	becd6 <_strtod_l+0x356>
   bec86:	dc24      	bgt.n	becd2 <_strtod_l+0x352>
   bec88:	2a49      	cmp	r2, #73	; 0x49
   bec8a:	d024      	beq.n	becd6 <_strtod_l+0x356>
   bec8c:	2a4e      	cmp	r2, #78	; 0x4e
   bec8e:	f47f aed9 	bne.w	bea44 <_strtod_l+0xc4>
   bec92:	499f      	ldr	r1, [pc, #636]	; (bef10 <_strtod_l+0x590>)
   bec94:	a817      	add	r0, sp, #92	; 0x5c
   bec96:	f001 f833 	bl	bfd00 <__match>
   bec9a:	2800      	cmp	r0, #0
   bec9c:	f43f aed2 	beq.w	bea44 <_strtod_l+0xc4>
   beca0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   beca2:	781b      	ldrb	r3, [r3, #0]
   beca4:	2b28      	cmp	r3, #40	; 0x28
   beca6:	d12d      	bne.n	bed04 <_strtod_l+0x384>
   beca8:	499a      	ldr	r1, [pc, #616]	; (bef14 <_strtod_l+0x594>)
   becaa:	aa1a      	add	r2, sp, #104	; 0x68
   becac:	a817      	add	r0, sp, #92	; 0x5c
   becae:	f001 f83b 	bl	bfd28 <__hexnan>
   becb2:	2805      	cmp	r0, #5
   becb4:	d126      	bne.n	bed04 <_strtod_l+0x384>
   becb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   becb8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   becbc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   becc0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   becc4:	e6a0      	b.n	bea08 <_strtod_l+0x88>
   becc6:	210a      	movs	r1, #10
   becc8:	fb01 2e0e 	mla	lr, r1, lr, r2
   beccc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   becd0:	e7b9      	b.n	bec46 <_strtod_l+0x2c6>
   becd2:	2a6e      	cmp	r2, #110	; 0x6e
   becd4:	e7db      	b.n	bec8e <_strtod_l+0x30e>
   becd6:	4990      	ldr	r1, [pc, #576]	; (bef18 <_strtod_l+0x598>)
   becd8:	a817      	add	r0, sp, #92	; 0x5c
   becda:	f001 f811 	bl	bfd00 <__match>
   becde:	2800      	cmp	r0, #0
   bece0:	f43f aeb0 	beq.w	bea44 <_strtod_l+0xc4>
   bece4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bece6:	498d      	ldr	r1, [pc, #564]	; (bef1c <_strtod_l+0x59c>)
   bece8:	3b01      	subs	r3, #1
   becea:	a817      	add	r0, sp, #92	; 0x5c
   becec:	9317      	str	r3, [sp, #92]	; 0x5c
   becee:	f001 f807 	bl	bfd00 <__match>
   becf2:	b910      	cbnz	r0, becfa <_strtod_l+0x37a>
   becf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   becf6:	3301      	adds	r3, #1
   becf8:	9317      	str	r3, [sp, #92]	; 0x5c
   becfa:	f8df b230 	ldr.w	fp, [pc, #560]	; bef2c <_strtod_l+0x5ac>
   becfe:	f04f 0a00 	mov.w	sl, #0
   bed02:	e681      	b.n	bea08 <_strtod_l+0x88>
   bed04:	4886      	ldr	r0, [pc, #536]	; (bef20 <_strtod_l+0x5a0>)
   bed06:	f001 fd93 	bl	c0830 <nan>
   bed0a:	ec5b ab10 	vmov	sl, fp, d0
   bed0e:	e67b      	b.n	bea08 <_strtod_l+0x88>
   bed10:	9b05      	ldr	r3, [sp, #20]
   bed12:	9807      	ldr	r0, [sp, #28]
   bed14:	1af3      	subs	r3, r6, r3
   bed16:	2f00      	cmp	r7, #0
   bed18:	bf08      	it	eq
   bed1a:	462f      	moveq	r7, r5
   bed1c:	2d10      	cmp	r5, #16
   bed1e:	9306      	str	r3, [sp, #24]
   bed20:	46a8      	mov	r8, r5
   bed22:	bfa8      	it	ge
   bed24:	f04f 0810 	movge.w	r8, #16
   bed28:	f7ff f938 	bl	bdf9c <__aeabi_ui2d>
   bed2c:	2d09      	cmp	r5, #9
   bed2e:	4682      	mov	sl, r0
   bed30:	468b      	mov	fp, r1
   bed32:	dd13      	ble.n	bed5c <_strtod_l+0x3dc>
   bed34:	4b7b      	ldr	r3, [pc, #492]	; (bef24 <_strtod_l+0x5a4>)
   bed36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bed3a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bed3e:	f7ff f9a7 	bl	be090 <__aeabi_dmul>
   bed42:	4682      	mov	sl, r0
   bed44:	4648      	mov	r0, r9
   bed46:	468b      	mov	fp, r1
   bed48:	f7ff f928 	bl	bdf9c <__aeabi_ui2d>
   bed4c:	4602      	mov	r2, r0
   bed4e:	460b      	mov	r3, r1
   bed50:	4650      	mov	r0, sl
   bed52:	4659      	mov	r1, fp
   bed54:	f7fe ffe6 	bl	bdd24 <__adddf3>
   bed58:	4682      	mov	sl, r0
   bed5a:	468b      	mov	fp, r1
   bed5c:	2d0f      	cmp	r5, #15
   bed5e:	dc38      	bgt.n	bedd2 <_strtod_l+0x452>
   bed60:	9b06      	ldr	r3, [sp, #24]
   bed62:	2b00      	cmp	r3, #0
   bed64:	f43f ae50 	beq.w	bea08 <_strtod_l+0x88>
   bed68:	dd24      	ble.n	bedb4 <_strtod_l+0x434>
   bed6a:	2b16      	cmp	r3, #22
   bed6c:	dc0b      	bgt.n	bed86 <_strtod_l+0x406>
   bed6e:	496d      	ldr	r1, [pc, #436]	; (bef24 <_strtod_l+0x5a4>)
   bed70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bed74:	e9d1 0100 	ldrd	r0, r1, [r1]
   bed78:	4652      	mov	r2, sl
   bed7a:	465b      	mov	r3, fp
   bed7c:	f7ff f988 	bl	be090 <__aeabi_dmul>
   bed80:	4682      	mov	sl, r0
   bed82:	468b      	mov	fp, r1
   bed84:	e640      	b.n	bea08 <_strtod_l+0x88>
   bed86:	9a06      	ldr	r2, [sp, #24]
   bed88:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bed8c:	4293      	cmp	r3, r2
   bed8e:	db20      	blt.n	bedd2 <_strtod_l+0x452>
   bed90:	4c64      	ldr	r4, [pc, #400]	; (bef24 <_strtod_l+0x5a4>)
   bed92:	f1c5 050f 	rsb	r5, r5, #15
   bed96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bed9a:	4652      	mov	r2, sl
   bed9c:	465b      	mov	r3, fp
   bed9e:	e9d1 0100 	ldrd	r0, r1, [r1]
   beda2:	f7ff f975 	bl	be090 <__aeabi_dmul>
   beda6:	9b06      	ldr	r3, [sp, #24]
   beda8:	1b5d      	subs	r5, r3, r5
   bedaa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bedae:	e9d4 2300 	ldrd	r2, r3, [r4]
   bedb2:	e7e3      	b.n	bed7c <_strtod_l+0x3fc>
   bedb4:	9b06      	ldr	r3, [sp, #24]
   bedb6:	3316      	adds	r3, #22
   bedb8:	db0b      	blt.n	bedd2 <_strtod_l+0x452>
   bedba:	9b05      	ldr	r3, [sp, #20]
   bedbc:	1b9e      	subs	r6, r3, r6
   bedbe:	4b59      	ldr	r3, [pc, #356]	; (bef24 <_strtod_l+0x5a4>)
   bedc0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bedc4:	e9d6 2300 	ldrd	r2, r3, [r6]
   bedc8:	4650      	mov	r0, sl
   bedca:	4659      	mov	r1, fp
   bedcc:	f7ff fa8a 	bl	be2e4 <__aeabi_ddiv>
   bedd0:	e7d6      	b.n	bed80 <_strtod_l+0x400>
   bedd2:	9b06      	ldr	r3, [sp, #24]
   bedd4:	eba5 0808 	sub.w	r8, r5, r8
   bedd8:	4498      	add	r8, r3
   bedda:	f1b8 0f00 	cmp.w	r8, #0
   bedde:	dd74      	ble.n	beeca <_strtod_l+0x54a>
   bede0:	f018 030f 	ands.w	r3, r8, #15
   bede4:	d00a      	beq.n	bedfc <_strtod_l+0x47c>
   bede6:	494f      	ldr	r1, [pc, #316]	; (bef24 <_strtod_l+0x5a4>)
   bede8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bedec:	4652      	mov	r2, sl
   bedee:	465b      	mov	r3, fp
   bedf0:	e9d1 0100 	ldrd	r0, r1, [r1]
   bedf4:	f7ff f94c 	bl	be090 <__aeabi_dmul>
   bedf8:	4682      	mov	sl, r0
   bedfa:	468b      	mov	fp, r1
   bedfc:	f038 080f 	bics.w	r8, r8, #15
   bee00:	d04f      	beq.n	beea2 <_strtod_l+0x522>
   bee02:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bee06:	dd22      	ble.n	bee4e <_strtod_l+0x4ce>
   bee08:	2500      	movs	r5, #0
   bee0a:	462e      	mov	r6, r5
   bee0c:	9507      	str	r5, [sp, #28]
   bee0e:	9505      	str	r5, [sp, #20]
   bee10:	2322      	movs	r3, #34	; 0x22
   bee12:	f8df b118 	ldr.w	fp, [pc, #280]	; bef2c <_strtod_l+0x5ac>
   bee16:	6023      	str	r3, [r4, #0]
   bee18:	f04f 0a00 	mov.w	sl, #0
   bee1c:	9b07      	ldr	r3, [sp, #28]
   bee1e:	2b00      	cmp	r3, #0
   bee20:	f43f adf2 	beq.w	bea08 <_strtod_l+0x88>
   bee24:	9918      	ldr	r1, [sp, #96]	; 0x60
   bee26:	4620      	mov	r0, r4
   bee28:	f001 f870 	bl	bff0c <_Bfree>
   bee2c:	9905      	ldr	r1, [sp, #20]
   bee2e:	4620      	mov	r0, r4
   bee30:	f001 f86c 	bl	bff0c <_Bfree>
   bee34:	4631      	mov	r1, r6
   bee36:	4620      	mov	r0, r4
   bee38:	f001 f868 	bl	bff0c <_Bfree>
   bee3c:	9907      	ldr	r1, [sp, #28]
   bee3e:	4620      	mov	r0, r4
   bee40:	f001 f864 	bl	bff0c <_Bfree>
   bee44:	4629      	mov	r1, r5
   bee46:	4620      	mov	r0, r4
   bee48:	f001 f860 	bl	bff0c <_Bfree>
   bee4c:	e5dc      	b.n	bea08 <_strtod_l+0x88>
   bee4e:	4b36      	ldr	r3, [pc, #216]	; (bef28 <_strtod_l+0x5a8>)
   bee50:	9304      	str	r3, [sp, #16]
   bee52:	2300      	movs	r3, #0
   bee54:	ea4f 1828 	mov.w	r8, r8, asr #4
   bee58:	4650      	mov	r0, sl
   bee5a:	4659      	mov	r1, fp
   bee5c:	4699      	mov	r9, r3
   bee5e:	f1b8 0f01 	cmp.w	r8, #1
   bee62:	dc21      	bgt.n	beea8 <_strtod_l+0x528>
   bee64:	b10b      	cbz	r3, bee6a <_strtod_l+0x4ea>
   bee66:	4682      	mov	sl, r0
   bee68:	468b      	mov	fp, r1
   bee6a:	4b2f      	ldr	r3, [pc, #188]	; (bef28 <_strtod_l+0x5a8>)
   bee6c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bee70:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bee74:	4652      	mov	r2, sl
   bee76:	465b      	mov	r3, fp
   bee78:	e9d9 0100 	ldrd	r0, r1, [r9]
   bee7c:	f7ff f908 	bl	be090 <__aeabi_dmul>
   bee80:	4b2a      	ldr	r3, [pc, #168]	; (bef2c <_strtod_l+0x5ac>)
   bee82:	460a      	mov	r2, r1
   bee84:	400b      	ands	r3, r1
   bee86:	492a      	ldr	r1, [pc, #168]	; (bef30 <_strtod_l+0x5b0>)
   bee88:	428b      	cmp	r3, r1
   bee8a:	4682      	mov	sl, r0
   bee8c:	d8bc      	bhi.n	bee08 <_strtod_l+0x488>
   bee8e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bee92:	428b      	cmp	r3, r1
   bee94:	bf86      	itte	hi
   bee96:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bef34 <_strtod_l+0x5b4>
   bee9a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bee9e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   beea2:	2300      	movs	r3, #0
   beea4:	9304      	str	r3, [sp, #16]
   beea6:	e084      	b.n	befb2 <_strtod_l+0x632>
   beea8:	f018 0f01 	tst.w	r8, #1
   beeac:	d005      	beq.n	beeba <_strtod_l+0x53a>
   beeae:	9b04      	ldr	r3, [sp, #16]
   beeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   beeb4:	f7ff f8ec 	bl	be090 <__aeabi_dmul>
   beeb8:	2301      	movs	r3, #1
   beeba:	9a04      	ldr	r2, [sp, #16]
   beebc:	3208      	adds	r2, #8
   beebe:	f109 0901 	add.w	r9, r9, #1
   beec2:	ea4f 0868 	mov.w	r8, r8, asr #1
   beec6:	9204      	str	r2, [sp, #16]
   beec8:	e7c9      	b.n	bee5e <_strtod_l+0x4de>
   beeca:	d0ea      	beq.n	beea2 <_strtod_l+0x522>
   beecc:	f1c8 0800 	rsb	r8, r8, #0
   beed0:	f018 020f 	ands.w	r2, r8, #15
   beed4:	d00a      	beq.n	beeec <_strtod_l+0x56c>
   beed6:	4b13      	ldr	r3, [pc, #76]	; (bef24 <_strtod_l+0x5a4>)
   beed8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   beedc:	4650      	mov	r0, sl
   beede:	4659      	mov	r1, fp
   beee0:	e9d3 2300 	ldrd	r2, r3, [r3]
   beee4:	f7ff f9fe 	bl	be2e4 <__aeabi_ddiv>
   beee8:	4682      	mov	sl, r0
   beeea:	468b      	mov	fp, r1
   beeec:	ea5f 1828 	movs.w	r8, r8, asr #4
   beef0:	d0d7      	beq.n	beea2 <_strtod_l+0x522>
   beef2:	f1b8 0f1f 	cmp.w	r8, #31
   beef6:	dd1f      	ble.n	bef38 <_strtod_l+0x5b8>
   beef8:	2500      	movs	r5, #0
   beefa:	462e      	mov	r6, r5
   beefc:	9507      	str	r5, [sp, #28]
   beefe:	9505      	str	r5, [sp, #20]
   bef00:	2322      	movs	r3, #34	; 0x22
   bef02:	f04f 0a00 	mov.w	sl, #0
   bef06:	f04f 0b00 	mov.w	fp, #0
   bef0a:	6023      	str	r3, [r4, #0]
   bef0c:	e786      	b.n	bee1c <_strtod_l+0x49c>
   bef0e:	bf00      	nop
   bef10:	000c1dbe 	.word	0x000c1dbe
   bef14:	000c1dd8 	.word	0x000c1dd8
   bef18:	000c1db5 	.word	0x000c1db5
   bef1c:	000c1db8 	.word	0x000c1db8
   bef20:	000c0a8d 	.word	0x000c0a8d
   bef24:	000c2028 	.word	0x000c2028
   bef28:	000c2000 	.word	0x000c2000
   bef2c:	7ff00000 	.word	0x7ff00000
   bef30:	7ca00000 	.word	0x7ca00000
   bef34:	7fefffff 	.word	0x7fefffff
   bef38:	f018 0310 	ands.w	r3, r8, #16
   bef3c:	bf18      	it	ne
   bef3e:	236a      	movne	r3, #106	; 0x6a
   bef40:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bf2f0 <_strtod_l+0x970>
   bef44:	9304      	str	r3, [sp, #16]
   bef46:	4650      	mov	r0, sl
   bef48:	4659      	mov	r1, fp
   bef4a:	2300      	movs	r3, #0
   bef4c:	f018 0f01 	tst.w	r8, #1
   bef50:	d004      	beq.n	bef5c <_strtod_l+0x5dc>
   bef52:	e9d9 2300 	ldrd	r2, r3, [r9]
   bef56:	f7ff f89b 	bl	be090 <__aeabi_dmul>
   bef5a:	2301      	movs	r3, #1
   bef5c:	ea5f 0868 	movs.w	r8, r8, asr #1
   bef60:	f109 0908 	add.w	r9, r9, #8
   bef64:	d1f2      	bne.n	bef4c <_strtod_l+0x5cc>
   bef66:	b10b      	cbz	r3, bef6c <_strtod_l+0x5ec>
   bef68:	4682      	mov	sl, r0
   bef6a:	468b      	mov	fp, r1
   bef6c:	9b04      	ldr	r3, [sp, #16]
   bef6e:	b1c3      	cbz	r3, befa2 <_strtod_l+0x622>
   bef70:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bef74:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bef78:	2b00      	cmp	r3, #0
   bef7a:	4659      	mov	r1, fp
   bef7c:	dd11      	ble.n	befa2 <_strtod_l+0x622>
   bef7e:	2b1f      	cmp	r3, #31
   bef80:	f340 8124 	ble.w	bf1cc <_strtod_l+0x84c>
   bef84:	2b34      	cmp	r3, #52	; 0x34
   bef86:	bfde      	ittt	le
   bef88:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bef8c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bef90:	fa03 f202 	lslle.w	r2, r3, r2
   bef94:	f04f 0a00 	mov.w	sl, #0
   bef98:	bfcc      	ite	gt
   bef9a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bef9e:	ea02 0b01 	andle.w	fp, r2, r1
   befa2:	2200      	movs	r2, #0
   befa4:	2300      	movs	r3, #0
   befa6:	4650      	mov	r0, sl
   befa8:	4659      	mov	r1, fp
   befaa:	f7ff fad9 	bl	be560 <__aeabi_dcmpeq>
   befae:	2800      	cmp	r0, #0
   befb0:	d1a2      	bne.n	beef8 <_strtod_l+0x578>
   befb2:	9b07      	ldr	r3, [sp, #28]
   befb4:	9300      	str	r3, [sp, #0]
   befb6:	9908      	ldr	r1, [sp, #32]
   befb8:	462b      	mov	r3, r5
   befba:	463a      	mov	r2, r7
   befbc:	4620      	mov	r0, r4
   befbe:	f001 f80d 	bl	bffdc <__s2b>
   befc2:	9007      	str	r0, [sp, #28]
   befc4:	2800      	cmp	r0, #0
   befc6:	f43f af1f 	beq.w	bee08 <_strtod_l+0x488>
   befca:	9b05      	ldr	r3, [sp, #20]
   befcc:	1b9e      	subs	r6, r3, r6
   befce:	9b06      	ldr	r3, [sp, #24]
   befd0:	2b00      	cmp	r3, #0
   befd2:	bfb4      	ite	lt
   befd4:	4633      	movlt	r3, r6
   befd6:	2300      	movge	r3, #0
   befd8:	930c      	str	r3, [sp, #48]	; 0x30
   befda:	9b06      	ldr	r3, [sp, #24]
   befdc:	2500      	movs	r5, #0
   befde:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   befe2:	9312      	str	r3, [sp, #72]	; 0x48
   befe4:	462e      	mov	r6, r5
   befe6:	9b07      	ldr	r3, [sp, #28]
   befe8:	4620      	mov	r0, r4
   befea:	6859      	ldr	r1, [r3, #4]
   befec:	f000 ff4e 	bl	bfe8c <_Balloc>
   beff0:	9005      	str	r0, [sp, #20]
   beff2:	2800      	cmp	r0, #0
   beff4:	f43f af0c 	beq.w	bee10 <_strtod_l+0x490>
   beff8:	9b07      	ldr	r3, [sp, #28]
   beffa:	691a      	ldr	r2, [r3, #16]
   beffc:	3202      	adds	r2, #2
   beffe:	f103 010c 	add.w	r1, r3, #12
   bf002:	0092      	lsls	r2, r2, #2
   bf004:	300c      	adds	r0, #12
   bf006:	f7ff fb88 	bl	be71a <memcpy>
   bf00a:	ec4b ab10 	vmov	d0, sl, fp
   bf00e:	aa1a      	add	r2, sp, #104	; 0x68
   bf010:	a919      	add	r1, sp, #100	; 0x64
   bf012:	4620      	mov	r0, r4
   bf014:	f001 fb28 	bl	c0668 <__d2b>
   bf018:	ec4b ab18 	vmov	d8, sl, fp
   bf01c:	9018      	str	r0, [sp, #96]	; 0x60
   bf01e:	2800      	cmp	r0, #0
   bf020:	f43f aef6 	beq.w	bee10 <_strtod_l+0x490>
   bf024:	2101      	movs	r1, #1
   bf026:	4620      	mov	r0, r4
   bf028:	f001 f872 	bl	c0110 <__i2b>
   bf02c:	4606      	mov	r6, r0
   bf02e:	2800      	cmp	r0, #0
   bf030:	f43f aeee 	beq.w	bee10 <_strtod_l+0x490>
   bf034:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bf036:	9904      	ldr	r1, [sp, #16]
   bf038:	2b00      	cmp	r3, #0
   bf03a:	bfab      	itete	ge
   bf03c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bf03e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bf040:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bf042:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bf046:	bfac      	ite	ge
   bf048:	eb03 0902 	addge.w	r9, r3, r2
   bf04c:	1ad7      	sublt	r7, r2, r3
   bf04e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bf050:	eba3 0801 	sub.w	r8, r3, r1
   bf054:	4490      	add	r8, r2
   bf056:	4ba1      	ldr	r3, [pc, #644]	; (bf2dc <_strtod_l+0x95c>)
   bf058:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bf05c:	4598      	cmp	r8, r3
   bf05e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bf062:	f280 80c7 	bge.w	bf1f4 <_strtod_l+0x874>
   bf066:	eba3 0308 	sub.w	r3, r3, r8
   bf06a:	2b1f      	cmp	r3, #31
   bf06c:	eba2 0203 	sub.w	r2, r2, r3
   bf070:	f04f 0101 	mov.w	r1, #1
   bf074:	f300 80b1 	bgt.w	bf1da <_strtod_l+0x85a>
   bf078:	fa01 f303 	lsl.w	r3, r1, r3
   bf07c:	930d      	str	r3, [sp, #52]	; 0x34
   bf07e:	2300      	movs	r3, #0
   bf080:	9308      	str	r3, [sp, #32]
   bf082:	eb09 0802 	add.w	r8, r9, r2
   bf086:	9b04      	ldr	r3, [sp, #16]
   bf088:	45c1      	cmp	r9, r8
   bf08a:	4417      	add	r7, r2
   bf08c:	441f      	add	r7, r3
   bf08e:	464b      	mov	r3, r9
   bf090:	bfa8      	it	ge
   bf092:	4643      	movge	r3, r8
   bf094:	42bb      	cmp	r3, r7
   bf096:	bfa8      	it	ge
   bf098:	463b      	movge	r3, r7
   bf09a:	2b00      	cmp	r3, #0
   bf09c:	bfc2      	ittt	gt
   bf09e:	eba8 0803 	subgt.w	r8, r8, r3
   bf0a2:	1aff      	subgt	r7, r7, r3
   bf0a4:	eba9 0903 	subgt.w	r9, r9, r3
   bf0a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bf0aa:	2b00      	cmp	r3, #0
   bf0ac:	dd17      	ble.n	bf0de <_strtod_l+0x75e>
   bf0ae:	4631      	mov	r1, r6
   bf0b0:	461a      	mov	r2, r3
   bf0b2:	4620      	mov	r0, r4
   bf0b4:	f001 f8ec 	bl	c0290 <__pow5mult>
   bf0b8:	4606      	mov	r6, r0
   bf0ba:	2800      	cmp	r0, #0
   bf0bc:	f43f aea8 	beq.w	bee10 <_strtod_l+0x490>
   bf0c0:	4601      	mov	r1, r0
   bf0c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bf0c4:	4620      	mov	r0, r4
   bf0c6:	f001 f839 	bl	c013c <__multiply>
   bf0ca:	900b      	str	r0, [sp, #44]	; 0x2c
   bf0cc:	2800      	cmp	r0, #0
   bf0ce:	f43f ae9f 	beq.w	bee10 <_strtod_l+0x490>
   bf0d2:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf0d4:	4620      	mov	r0, r4
   bf0d6:	f000 ff19 	bl	bff0c <_Bfree>
   bf0da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf0dc:	9318      	str	r3, [sp, #96]	; 0x60
   bf0de:	f1b8 0f00 	cmp.w	r8, #0
   bf0e2:	f300 808c 	bgt.w	bf1fe <_strtod_l+0x87e>
   bf0e6:	9b06      	ldr	r3, [sp, #24]
   bf0e8:	2b00      	cmp	r3, #0
   bf0ea:	dd08      	ble.n	bf0fe <_strtod_l+0x77e>
   bf0ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bf0ee:	9905      	ldr	r1, [sp, #20]
   bf0f0:	4620      	mov	r0, r4
   bf0f2:	f001 f8cd 	bl	c0290 <__pow5mult>
   bf0f6:	9005      	str	r0, [sp, #20]
   bf0f8:	2800      	cmp	r0, #0
   bf0fa:	f43f ae89 	beq.w	bee10 <_strtod_l+0x490>
   bf0fe:	2f00      	cmp	r7, #0
   bf100:	dd08      	ble.n	bf114 <_strtod_l+0x794>
   bf102:	9905      	ldr	r1, [sp, #20]
   bf104:	463a      	mov	r2, r7
   bf106:	4620      	mov	r0, r4
   bf108:	f001 f91c 	bl	c0344 <__lshift>
   bf10c:	9005      	str	r0, [sp, #20]
   bf10e:	2800      	cmp	r0, #0
   bf110:	f43f ae7e 	beq.w	bee10 <_strtod_l+0x490>
   bf114:	f1b9 0f00 	cmp.w	r9, #0
   bf118:	dd08      	ble.n	bf12c <_strtod_l+0x7ac>
   bf11a:	4631      	mov	r1, r6
   bf11c:	464a      	mov	r2, r9
   bf11e:	4620      	mov	r0, r4
   bf120:	f001 f910 	bl	c0344 <__lshift>
   bf124:	4606      	mov	r6, r0
   bf126:	2800      	cmp	r0, #0
   bf128:	f43f ae72 	beq.w	bee10 <_strtod_l+0x490>
   bf12c:	9a05      	ldr	r2, [sp, #20]
   bf12e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf130:	4620      	mov	r0, r4
   bf132:	f001 f993 	bl	c045c <__mdiff>
   bf136:	4605      	mov	r5, r0
   bf138:	2800      	cmp	r0, #0
   bf13a:	f43f ae69 	beq.w	bee10 <_strtod_l+0x490>
   bf13e:	68c3      	ldr	r3, [r0, #12]
   bf140:	930b      	str	r3, [sp, #44]	; 0x2c
   bf142:	2300      	movs	r3, #0
   bf144:	60c3      	str	r3, [r0, #12]
   bf146:	4631      	mov	r1, r6
   bf148:	f001 f96c 	bl	c0424 <__mcmp>
   bf14c:	2800      	cmp	r0, #0
   bf14e:	da60      	bge.n	bf212 <_strtod_l+0x892>
   bf150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf152:	ea53 030a 	orrs.w	r3, r3, sl
   bf156:	f040 8082 	bne.w	bf25e <_strtod_l+0x8de>
   bf15a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bf15e:	2b00      	cmp	r3, #0
   bf160:	d17d      	bne.n	bf25e <_strtod_l+0x8de>
   bf162:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bf166:	0d1b      	lsrs	r3, r3, #20
   bf168:	051b      	lsls	r3, r3, #20
   bf16a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bf16e:	d976      	bls.n	bf25e <_strtod_l+0x8de>
   bf170:	696b      	ldr	r3, [r5, #20]
   bf172:	b913      	cbnz	r3, bf17a <_strtod_l+0x7fa>
   bf174:	692b      	ldr	r3, [r5, #16]
   bf176:	2b01      	cmp	r3, #1
   bf178:	dd71      	ble.n	bf25e <_strtod_l+0x8de>
   bf17a:	4629      	mov	r1, r5
   bf17c:	2201      	movs	r2, #1
   bf17e:	4620      	mov	r0, r4
   bf180:	f001 f8e0 	bl	c0344 <__lshift>
   bf184:	4631      	mov	r1, r6
   bf186:	4605      	mov	r5, r0
   bf188:	f001 f94c 	bl	c0424 <__mcmp>
   bf18c:	2800      	cmp	r0, #0
   bf18e:	dd66      	ble.n	bf25e <_strtod_l+0x8de>
   bf190:	9904      	ldr	r1, [sp, #16]
   bf192:	4a53      	ldr	r2, [pc, #332]	; (bf2e0 <_strtod_l+0x960>)
   bf194:	465b      	mov	r3, fp
   bf196:	2900      	cmp	r1, #0
   bf198:	f000 8081 	beq.w	bf29e <_strtod_l+0x91e>
   bf19c:	ea02 010b 	and.w	r1, r2, fp
   bf1a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bf1a4:	dc7b      	bgt.n	bf29e <_strtod_l+0x91e>
   bf1a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bf1aa:	f77f aea9 	ble.w	bef00 <_strtod_l+0x580>
   bf1ae:	4b4d      	ldr	r3, [pc, #308]	; (bf2e4 <_strtod_l+0x964>)
   bf1b0:	4650      	mov	r0, sl
   bf1b2:	4659      	mov	r1, fp
   bf1b4:	2200      	movs	r2, #0
   bf1b6:	f7fe ff6b 	bl	be090 <__aeabi_dmul>
   bf1ba:	460b      	mov	r3, r1
   bf1bc:	4303      	orrs	r3, r0
   bf1be:	bf08      	it	eq
   bf1c0:	2322      	moveq	r3, #34	; 0x22
   bf1c2:	4682      	mov	sl, r0
   bf1c4:	468b      	mov	fp, r1
   bf1c6:	bf08      	it	eq
   bf1c8:	6023      	streq	r3, [r4, #0]
   bf1ca:	e62b      	b.n	bee24 <_strtod_l+0x4a4>
   bf1cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf1d0:	fa02 f303 	lsl.w	r3, r2, r3
   bf1d4:	ea03 0a0a 	and.w	sl, r3, sl
   bf1d8:	e6e3      	b.n	befa2 <_strtod_l+0x622>
   bf1da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bf1de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bf1e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bf1e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bf1ea:	fa01 f308 	lsl.w	r3, r1, r8
   bf1ee:	9308      	str	r3, [sp, #32]
   bf1f0:	910d      	str	r1, [sp, #52]	; 0x34
   bf1f2:	e746      	b.n	bf082 <_strtod_l+0x702>
   bf1f4:	2300      	movs	r3, #0
   bf1f6:	9308      	str	r3, [sp, #32]
   bf1f8:	2301      	movs	r3, #1
   bf1fa:	930d      	str	r3, [sp, #52]	; 0x34
   bf1fc:	e741      	b.n	bf082 <_strtod_l+0x702>
   bf1fe:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf200:	4642      	mov	r2, r8
   bf202:	4620      	mov	r0, r4
   bf204:	f001 f89e 	bl	c0344 <__lshift>
   bf208:	9018      	str	r0, [sp, #96]	; 0x60
   bf20a:	2800      	cmp	r0, #0
   bf20c:	f47f af6b 	bne.w	bf0e6 <_strtod_l+0x766>
   bf210:	e5fe      	b.n	bee10 <_strtod_l+0x490>
   bf212:	465f      	mov	r7, fp
   bf214:	d16e      	bne.n	bf2f4 <_strtod_l+0x974>
   bf216:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bf218:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bf21c:	b342      	cbz	r2, bf270 <_strtod_l+0x8f0>
   bf21e:	4a32      	ldr	r2, [pc, #200]	; (bf2e8 <_strtod_l+0x968>)
   bf220:	4293      	cmp	r3, r2
   bf222:	d128      	bne.n	bf276 <_strtod_l+0x8f6>
   bf224:	9b04      	ldr	r3, [sp, #16]
   bf226:	4651      	mov	r1, sl
   bf228:	b1eb      	cbz	r3, bf266 <_strtod_l+0x8e6>
   bf22a:	4b2d      	ldr	r3, [pc, #180]	; (bf2e0 <_strtod_l+0x960>)
   bf22c:	403b      	ands	r3, r7
   bf22e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bf232:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf236:	d819      	bhi.n	bf26c <_strtod_l+0x8ec>
   bf238:	0d1b      	lsrs	r3, r3, #20
   bf23a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bf23e:	fa02 f303 	lsl.w	r3, r2, r3
   bf242:	4299      	cmp	r1, r3
   bf244:	d117      	bne.n	bf276 <_strtod_l+0x8f6>
   bf246:	4b29      	ldr	r3, [pc, #164]	; (bf2ec <_strtod_l+0x96c>)
   bf248:	429f      	cmp	r7, r3
   bf24a:	d102      	bne.n	bf252 <_strtod_l+0x8d2>
   bf24c:	3101      	adds	r1, #1
   bf24e:	f43f addf 	beq.w	bee10 <_strtod_l+0x490>
   bf252:	4b23      	ldr	r3, [pc, #140]	; (bf2e0 <_strtod_l+0x960>)
   bf254:	403b      	ands	r3, r7
   bf256:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bf25a:	f04f 0a00 	mov.w	sl, #0
   bf25e:	9b04      	ldr	r3, [sp, #16]
   bf260:	2b00      	cmp	r3, #0
   bf262:	d1a4      	bne.n	bf1ae <_strtod_l+0x82e>
   bf264:	e5de      	b.n	bee24 <_strtod_l+0x4a4>
   bf266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bf26a:	e7ea      	b.n	bf242 <_strtod_l+0x8c2>
   bf26c:	4613      	mov	r3, r2
   bf26e:	e7e8      	b.n	bf242 <_strtod_l+0x8c2>
   bf270:	ea53 030a 	orrs.w	r3, r3, sl
   bf274:	d08c      	beq.n	bf190 <_strtod_l+0x810>
   bf276:	9b08      	ldr	r3, [sp, #32]
   bf278:	b1db      	cbz	r3, bf2b2 <_strtod_l+0x932>
   bf27a:	423b      	tst	r3, r7
   bf27c:	d0ef      	beq.n	bf25e <_strtod_l+0x8de>
   bf27e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf280:	9a04      	ldr	r2, [sp, #16]
   bf282:	4650      	mov	r0, sl
   bf284:	4659      	mov	r1, fp
   bf286:	b1c3      	cbz	r3, bf2ba <_strtod_l+0x93a>
   bf288:	f7ff fb5e 	bl	be948 <sulp>
   bf28c:	4602      	mov	r2, r0
   bf28e:	460b      	mov	r3, r1
   bf290:	ec51 0b18 	vmov	r0, r1, d8
   bf294:	f7fe fd46 	bl	bdd24 <__adddf3>
   bf298:	4682      	mov	sl, r0
   bf29a:	468b      	mov	fp, r1
   bf29c:	e7df      	b.n	bf25e <_strtod_l+0x8de>
   bf29e:	4013      	ands	r3, r2
   bf2a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bf2a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bf2a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bf2ac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bf2b0:	e7d5      	b.n	bf25e <_strtod_l+0x8de>
   bf2b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bf2b4:	ea13 0f0a 	tst.w	r3, sl
   bf2b8:	e7e0      	b.n	bf27c <_strtod_l+0x8fc>
   bf2ba:	f7ff fb45 	bl	be948 <sulp>
   bf2be:	4602      	mov	r2, r0
   bf2c0:	460b      	mov	r3, r1
   bf2c2:	ec51 0b18 	vmov	r0, r1, d8
   bf2c6:	f7fe fd2b 	bl	bdd20 <__aeabi_dsub>
   bf2ca:	2200      	movs	r2, #0
   bf2cc:	2300      	movs	r3, #0
   bf2ce:	4682      	mov	sl, r0
   bf2d0:	468b      	mov	fp, r1
   bf2d2:	f7ff f945 	bl	be560 <__aeabi_dcmpeq>
   bf2d6:	2800      	cmp	r0, #0
   bf2d8:	d0c1      	beq.n	bf25e <_strtod_l+0x8de>
   bf2da:	e611      	b.n	bef00 <_strtod_l+0x580>
   bf2dc:	fffffc02 	.word	0xfffffc02
   bf2e0:	7ff00000 	.word	0x7ff00000
   bf2e4:	39500000 	.word	0x39500000
   bf2e8:	000fffff 	.word	0x000fffff
   bf2ec:	7fefffff 	.word	0x7fefffff
   bf2f0:	000c1df0 	.word	0x000c1df0
   bf2f4:	4631      	mov	r1, r6
   bf2f6:	4628      	mov	r0, r5
   bf2f8:	f001 fa12 	bl	c0720 <__ratio>
   bf2fc:	ec59 8b10 	vmov	r8, r9, d0
   bf300:	ee10 0a10 	vmov	r0, s0
   bf304:	2200      	movs	r2, #0
   bf306:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bf30a:	4649      	mov	r1, r9
   bf30c:	f7ff f93c 	bl	be588 <__aeabi_dcmple>
   bf310:	2800      	cmp	r0, #0
   bf312:	d07a      	beq.n	bf40a <_strtod_l+0xa8a>
   bf314:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf316:	2b00      	cmp	r3, #0
   bf318:	d04a      	beq.n	bf3b0 <_strtod_l+0xa30>
   bf31a:	4b95      	ldr	r3, [pc, #596]	; (bf570 <_strtod_l+0xbf0>)
   bf31c:	2200      	movs	r2, #0
   bf31e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bf322:	f8df 924c 	ldr.w	r9, [pc, #588]	; bf570 <_strtod_l+0xbf0>
   bf326:	f04f 0800 	mov.w	r8, #0
   bf32a:	4b92      	ldr	r3, [pc, #584]	; (bf574 <_strtod_l+0xbf4>)
   bf32c:	403b      	ands	r3, r7
   bf32e:	930d      	str	r3, [sp, #52]	; 0x34
   bf330:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bf332:	4b91      	ldr	r3, [pc, #580]	; (bf578 <_strtod_l+0xbf8>)
   bf334:	429a      	cmp	r2, r3
   bf336:	f040 80b0 	bne.w	bf49a <_strtod_l+0xb1a>
   bf33a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bf33e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bf342:	ec4b ab10 	vmov	d0, sl, fp
   bf346:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bf34a:	f001 f911 	bl	c0570 <__ulp>
   bf34e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bf352:	ec53 2b10 	vmov	r2, r3, d0
   bf356:	f7fe fe9b 	bl	be090 <__aeabi_dmul>
   bf35a:	4652      	mov	r2, sl
   bf35c:	465b      	mov	r3, fp
   bf35e:	f7fe fce1 	bl	bdd24 <__adddf3>
   bf362:	460b      	mov	r3, r1
   bf364:	4983      	ldr	r1, [pc, #524]	; (bf574 <_strtod_l+0xbf4>)
   bf366:	4a85      	ldr	r2, [pc, #532]	; (bf57c <_strtod_l+0xbfc>)
   bf368:	4019      	ands	r1, r3
   bf36a:	4291      	cmp	r1, r2
   bf36c:	4682      	mov	sl, r0
   bf36e:	d960      	bls.n	bf432 <_strtod_l+0xab2>
   bf370:	ee18 3a90 	vmov	r3, s17
   bf374:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bf378:	4293      	cmp	r3, r2
   bf37a:	d104      	bne.n	bf386 <_strtod_l+0xa06>
   bf37c:	ee18 3a10 	vmov	r3, s16
   bf380:	3301      	adds	r3, #1
   bf382:	f43f ad45 	beq.w	bee10 <_strtod_l+0x490>
   bf386:	f8df b200 	ldr.w	fp, [pc, #512]	; bf588 <_strtod_l+0xc08>
   bf38a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bf38e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bf390:	4620      	mov	r0, r4
   bf392:	f000 fdbb 	bl	bff0c <_Bfree>
   bf396:	9905      	ldr	r1, [sp, #20]
   bf398:	4620      	mov	r0, r4
   bf39a:	f000 fdb7 	bl	bff0c <_Bfree>
   bf39e:	4631      	mov	r1, r6
   bf3a0:	4620      	mov	r0, r4
   bf3a2:	f000 fdb3 	bl	bff0c <_Bfree>
   bf3a6:	4629      	mov	r1, r5
   bf3a8:	4620      	mov	r0, r4
   bf3aa:	f000 fdaf 	bl	bff0c <_Bfree>
   bf3ae:	e61a      	b.n	befe6 <_strtod_l+0x666>
   bf3b0:	f1ba 0f00 	cmp.w	sl, #0
   bf3b4:	d11b      	bne.n	bf3ee <_strtod_l+0xa6e>
   bf3b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bf3ba:	b9f3      	cbnz	r3, bf3fa <_strtod_l+0xa7a>
   bf3bc:	4b6c      	ldr	r3, [pc, #432]	; (bf570 <_strtod_l+0xbf0>)
   bf3be:	2200      	movs	r2, #0
   bf3c0:	4640      	mov	r0, r8
   bf3c2:	4649      	mov	r1, r9
   bf3c4:	f7ff f8d6 	bl	be574 <__aeabi_dcmplt>
   bf3c8:	b9d0      	cbnz	r0, bf400 <_strtod_l+0xa80>
   bf3ca:	4640      	mov	r0, r8
   bf3cc:	4649      	mov	r1, r9
   bf3ce:	4b6c      	ldr	r3, [pc, #432]	; (bf580 <_strtod_l+0xc00>)
   bf3d0:	2200      	movs	r2, #0
   bf3d2:	f7fe fe5d 	bl	be090 <__aeabi_dmul>
   bf3d6:	4680      	mov	r8, r0
   bf3d8:	4689      	mov	r9, r1
   bf3da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bf3de:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bf3e2:	9315      	str	r3, [sp, #84]	; 0x54
   bf3e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bf3e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bf3ec:	e79d      	b.n	bf32a <_strtod_l+0x9aa>
   bf3ee:	f1ba 0f01 	cmp.w	sl, #1
   bf3f2:	d102      	bne.n	bf3fa <_strtod_l+0xa7a>
   bf3f4:	2f00      	cmp	r7, #0
   bf3f6:	f43f ad83 	beq.w	bef00 <_strtod_l+0x580>
   bf3fa:	4b62      	ldr	r3, [pc, #392]	; (bf584 <_strtod_l+0xc04>)
   bf3fc:	2200      	movs	r2, #0
   bf3fe:	e78e      	b.n	bf31e <_strtod_l+0x99e>
   bf400:	f8df 917c 	ldr.w	r9, [pc, #380]	; bf580 <_strtod_l+0xc00>
   bf404:	f04f 0800 	mov.w	r8, #0
   bf408:	e7e7      	b.n	bf3da <_strtod_l+0xa5a>
   bf40a:	4b5d      	ldr	r3, [pc, #372]	; (bf580 <_strtod_l+0xc00>)
   bf40c:	4640      	mov	r0, r8
   bf40e:	4649      	mov	r1, r9
   bf410:	2200      	movs	r2, #0
   bf412:	f7fe fe3d 	bl	be090 <__aeabi_dmul>
   bf416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf418:	4680      	mov	r8, r0
   bf41a:	4689      	mov	r9, r1
   bf41c:	b933      	cbnz	r3, bf42c <_strtod_l+0xaac>
   bf41e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bf422:	900e      	str	r0, [sp, #56]	; 0x38
   bf424:	930f      	str	r3, [sp, #60]	; 0x3c
   bf426:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bf42a:	e7dd      	b.n	bf3e8 <_strtod_l+0xa68>
   bf42c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bf430:	e7f9      	b.n	bf426 <_strtod_l+0xaa6>
   bf432:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bf436:	9b04      	ldr	r3, [sp, #16]
   bf438:	2b00      	cmp	r3, #0
   bf43a:	d1a8      	bne.n	bf38e <_strtod_l+0xa0e>
   bf43c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bf440:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bf442:	0d1b      	lsrs	r3, r3, #20
   bf444:	051b      	lsls	r3, r3, #20
   bf446:	429a      	cmp	r2, r3
   bf448:	d1a1      	bne.n	bf38e <_strtod_l+0xa0e>
   bf44a:	4640      	mov	r0, r8
   bf44c:	4649      	mov	r1, r9
   bf44e:	f001 fa05 	bl	c085c <__aeabi_d2lz>
   bf452:	f7fe fdef 	bl	be034 <__aeabi_l2d>
   bf456:	4602      	mov	r2, r0
   bf458:	460b      	mov	r3, r1
   bf45a:	4640      	mov	r0, r8
   bf45c:	4649      	mov	r1, r9
   bf45e:	f7fe fc5f 	bl	bdd20 <__aeabi_dsub>
   bf462:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bf464:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bf468:	ea43 030a 	orr.w	r3, r3, sl
   bf46c:	4313      	orrs	r3, r2
   bf46e:	4680      	mov	r8, r0
   bf470:	4689      	mov	r9, r1
   bf472:	d055      	beq.n	bf520 <_strtod_l+0xba0>
   bf474:	a336      	add	r3, pc, #216	; (adr r3, bf550 <_strtod_l+0xbd0>)
   bf476:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf47a:	f7ff f87b 	bl	be574 <__aeabi_dcmplt>
   bf47e:	2800      	cmp	r0, #0
   bf480:	f47f acd0 	bne.w	bee24 <_strtod_l+0x4a4>
   bf484:	a334      	add	r3, pc, #208	; (adr r3, bf558 <_strtod_l+0xbd8>)
   bf486:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf48a:	4640      	mov	r0, r8
   bf48c:	4649      	mov	r1, r9
   bf48e:	f7ff f88f 	bl	be5b0 <__aeabi_dcmpgt>
   bf492:	2800      	cmp	r0, #0
   bf494:	f43f af7b 	beq.w	bf38e <_strtod_l+0xa0e>
   bf498:	e4c4      	b.n	bee24 <_strtod_l+0x4a4>
   bf49a:	9b04      	ldr	r3, [sp, #16]
   bf49c:	b333      	cbz	r3, bf4ec <_strtod_l+0xb6c>
   bf49e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bf4a0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bf4a4:	d822      	bhi.n	bf4ec <_strtod_l+0xb6c>
   bf4a6:	a32e      	add	r3, pc, #184	; (adr r3, bf560 <_strtod_l+0xbe0>)
   bf4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf4ac:	4640      	mov	r0, r8
   bf4ae:	4649      	mov	r1, r9
   bf4b0:	f7ff f86a 	bl	be588 <__aeabi_dcmple>
   bf4b4:	b1a0      	cbz	r0, bf4e0 <_strtod_l+0xb60>
   bf4b6:	4649      	mov	r1, r9
   bf4b8:	4640      	mov	r0, r8
   bf4ba:	f7ff f883 	bl	be5c4 <__aeabi_d2uiz>
   bf4be:	2801      	cmp	r0, #1
   bf4c0:	bf38      	it	cc
   bf4c2:	2001      	movcc	r0, #1
   bf4c4:	f7fe fd6a 	bl	bdf9c <__aeabi_ui2d>
   bf4c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bf4ca:	4680      	mov	r8, r0
   bf4cc:	4689      	mov	r9, r1
   bf4ce:	bb23      	cbnz	r3, bf51a <_strtod_l+0xb9a>
   bf4d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bf4d4:	9010      	str	r0, [sp, #64]	; 0x40
   bf4d6:	9311      	str	r3, [sp, #68]	; 0x44
   bf4d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bf4dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bf4e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bf4e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bf4e4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bf4e8:	1a9b      	subs	r3, r3, r2
   bf4ea:	9309      	str	r3, [sp, #36]	; 0x24
   bf4ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bf4f0:	eeb0 0a48 	vmov.f32	s0, s16
   bf4f4:	eef0 0a68 	vmov.f32	s1, s17
   bf4f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bf4fc:	f001 f838 	bl	c0570 <__ulp>
   bf500:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bf504:	ec53 2b10 	vmov	r2, r3, d0
   bf508:	f7fe fdc2 	bl	be090 <__aeabi_dmul>
   bf50c:	ec53 2b18 	vmov	r2, r3, d8
   bf510:	f7fe fc08 	bl	bdd24 <__adddf3>
   bf514:	4682      	mov	sl, r0
   bf516:	468b      	mov	fp, r1
   bf518:	e78d      	b.n	bf436 <_strtod_l+0xab6>
   bf51a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bf51e:	e7db      	b.n	bf4d8 <_strtod_l+0xb58>
   bf520:	a311      	add	r3, pc, #68	; (adr r3, bf568 <_strtod_l+0xbe8>)
   bf522:	e9d3 2300 	ldrd	r2, r3, [r3]
   bf526:	f7ff f825 	bl	be574 <__aeabi_dcmplt>
   bf52a:	e7b2      	b.n	bf492 <_strtod_l+0xb12>
   bf52c:	2300      	movs	r3, #0
   bf52e:	930a      	str	r3, [sp, #40]	; 0x28
   bf530:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bf532:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bf534:	6013      	str	r3, [r2, #0]
   bf536:	f7ff ba6b 	b.w	bea10 <_strtod_l+0x90>
   bf53a:	2a65      	cmp	r2, #101	; 0x65
   bf53c:	f43f ab5f 	beq.w	bebfe <_strtod_l+0x27e>
   bf540:	2a45      	cmp	r2, #69	; 0x45
   bf542:	f43f ab5c 	beq.w	bebfe <_strtod_l+0x27e>
   bf546:	2301      	movs	r3, #1
   bf548:	f7ff bb94 	b.w	bec74 <_strtod_l+0x2f4>
   bf54c:	f3af 8000 	nop.w
   bf550:	94a03595 	.word	0x94a03595
   bf554:	3fdfffff 	.word	0x3fdfffff
   bf558:	35afe535 	.word	0x35afe535
   bf55c:	3fe00000 	.word	0x3fe00000
   bf560:	ffc00000 	.word	0xffc00000
   bf564:	41dfffff 	.word	0x41dfffff
   bf568:	94a03595 	.word	0x94a03595
   bf56c:	3fcfffff 	.word	0x3fcfffff
   bf570:	3ff00000 	.word	0x3ff00000
   bf574:	7ff00000 	.word	0x7ff00000
   bf578:	7fe00000 	.word	0x7fe00000
   bf57c:	7c9fffff 	.word	0x7c9fffff
   bf580:	3fe00000 	.word	0x3fe00000
   bf584:	bff00000 	.word	0xbff00000
   bf588:	7fefffff 	.word	0x7fefffff

000bf58c <strtod>:
   bf58c:	460a      	mov	r2, r1
   bf58e:	4601      	mov	r1, r0
   bf590:	4802      	ldr	r0, [pc, #8]	; (bf59c <strtod+0x10>)
   bf592:	4b03      	ldr	r3, [pc, #12]	; (bf5a0 <strtod+0x14>)
   bf594:	6800      	ldr	r0, [r0, #0]
   bf596:	f7ff b9f3 	b.w	be980 <_strtod_l>
   bf59a:	bf00      	nop
   bf59c:	2003da98 	.word	0x2003da98
   bf5a0:	2003db04 	.word	0x2003db04

000bf5a4 <_strtol_l.constprop.0>:
   bf5a4:	2b01      	cmp	r3, #1
   bf5a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bf5aa:	d001      	beq.n	bf5b0 <_strtol_l.constprop.0+0xc>
   bf5ac:	2b24      	cmp	r3, #36	; 0x24
   bf5ae:	d906      	bls.n	bf5be <_strtol_l.constprop.0+0x1a>
   bf5b0:	f7fa fc0c 	bl	b9dcc <__errno>
   bf5b4:	2316      	movs	r3, #22
   bf5b6:	6003      	str	r3, [r0, #0]
   bf5b8:	2000      	movs	r0, #0
   bf5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bf5be:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bf6a4 <_strtol_l.constprop.0+0x100>
   bf5c2:	460d      	mov	r5, r1
   bf5c4:	462e      	mov	r6, r5
   bf5c6:	f815 4b01 	ldrb.w	r4, [r5], #1
   bf5ca:	f814 700c 	ldrb.w	r7, [r4, ip]
   bf5ce:	f017 0708 	ands.w	r7, r7, #8
   bf5d2:	d1f7      	bne.n	bf5c4 <_strtol_l.constprop.0+0x20>
   bf5d4:	2c2d      	cmp	r4, #45	; 0x2d
   bf5d6:	d132      	bne.n	bf63e <_strtol_l.constprop.0+0x9a>
   bf5d8:	782c      	ldrb	r4, [r5, #0]
   bf5da:	2701      	movs	r7, #1
   bf5dc:	1cb5      	adds	r5, r6, #2
   bf5de:	2b00      	cmp	r3, #0
   bf5e0:	d05b      	beq.n	bf69a <_strtol_l.constprop.0+0xf6>
   bf5e2:	2b10      	cmp	r3, #16
   bf5e4:	d109      	bne.n	bf5fa <_strtol_l.constprop.0+0x56>
   bf5e6:	2c30      	cmp	r4, #48	; 0x30
   bf5e8:	d107      	bne.n	bf5fa <_strtol_l.constprop.0+0x56>
   bf5ea:	782c      	ldrb	r4, [r5, #0]
   bf5ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bf5f0:	2c58      	cmp	r4, #88	; 0x58
   bf5f2:	d14d      	bne.n	bf690 <_strtol_l.constprop.0+0xec>
   bf5f4:	786c      	ldrb	r4, [r5, #1]
   bf5f6:	2310      	movs	r3, #16
   bf5f8:	3502      	adds	r5, #2
   bf5fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bf5fe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bf602:	f04f 0c00 	mov.w	ip, #0
   bf606:	fbb8 f9f3 	udiv	r9, r8, r3
   bf60a:	4666      	mov	r6, ip
   bf60c:	fb03 8a19 	mls	sl, r3, r9, r8
   bf610:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bf614:	f1be 0f09 	cmp.w	lr, #9
   bf618:	d816      	bhi.n	bf648 <_strtol_l.constprop.0+0xa4>
   bf61a:	4674      	mov	r4, lr
   bf61c:	42a3      	cmp	r3, r4
   bf61e:	dd24      	ble.n	bf66a <_strtol_l.constprop.0+0xc6>
   bf620:	f1bc 0f00 	cmp.w	ip, #0
   bf624:	db1e      	blt.n	bf664 <_strtol_l.constprop.0+0xc0>
   bf626:	45b1      	cmp	r9, r6
   bf628:	d31c      	bcc.n	bf664 <_strtol_l.constprop.0+0xc0>
   bf62a:	d101      	bne.n	bf630 <_strtol_l.constprop.0+0x8c>
   bf62c:	45a2      	cmp	sl, r4
   bf62e:	db19      	blt.n	bf664 <_strtol_l.constprop.0+0xc0>
   bf630:	fb06 4603 	mla	r6, r6, r3, r4
   bf634:	f04f 0c01 	mov.w	ip, #1
   bf638:	f815 4b01 	ldrb.w	r4, [r5], #1
   bf63c:	e7e8      	b.n	bf610 <_strtol_l.constprop.0+0x6c>
   bf63e:	2c2b      	cmp	r4, #43	; 0x2b
   bf640:	bf04      	itt	eq
   bf642:	782c      	ldrbeq	r4, [r5, #0]
   bf644:	1cb5      	addeq	r5, r6, #2
   bf646:	e7ca      	b.n	bf5de <_strtol_l.constprop.0+0x3a>
   bf648:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bf64c:	f1be 0f19 	cmp.w	lr, #25
   bf650:	d801      	bhi.n	bf656 <_strtol_l.constprop.0+0xb2>
   bf652:	3c37      	subs	r4, #55	; 0x37
   bf654:	e7e2      	b.n	bf61c <_strtol_l.constprop.0+0x78>
   bf656:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bf65a:	f1be 0f19 	cmp.w	lr, #25
   bf65e:	d804      	bhi.n	bf66a <_strtol_l.constprop.0+0xc6>
   bf660:	3c57      	subs	r4, #87	; 0x57
   bf662:	e7db      	b.n	bf61c <_strtol_l.constprop.0+0x78>
   bf664:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bf668:	e7e6      	b.n	bf638 <_strtol_l.constprop.0+0x94>
   bf66a:	f1bc 0f00 	cmp.w	ip, #0
   bf66e:	da05      	bge.n	bf67c <_strtol_l.constprop.0+0xd8>
   bf670:	2322      	movs	r3, #34	; 0x22
   bf672:	6003      	str	r3, [r0, #0]
   bf674:	4646      	mov	r6, r8
   bf676:	b942      	cbnz	r2, bf68a <_strtol_l.constprop.0+0xe6>
   bf678:	4630      	mov	r0, r6
   bf67a:	e79e      	b.n	bf5ba <_strtol_l.constprop.0+0x16>
   bf67c:	b107      	cbz	r7, bf680 <_strtol_l.constprop.0+0xdc>
   bf67e:	4276      	negs	r6, r6
   bf680:	2a00      	cmp	r2, #0
   bf682:	d0f9      	beq.n	bf678 <_strtol_l.constprop.0+0xd4>
   bf684:	f1bc 0f00 	cmp.w	ip, #0
   bf688:	d000      	beq.n	bf68c <_strtol_l.constprop.0+0xe8>
   bf68a:	1e69      	subs	r1, r5, #1
   bf68c:	6011      	str	r1, [r2, #0]
   bf68e:	e7f3      	b.n	bf678 <_strtol_l.constprop.0+0xd4>
   bf690:	2430      	movs	r4, #48	; 0x30
   bf692:	2b00      	cmp	r3, #0
   bf694:	d1b1      	bne.n	bf5fa <_strtol_l.constprop.0+0x56>
   bf696:	2308      	movs	r3, #8
   bf698:	e7af      	b.n	bf5fa <_strtol_l.constprop.0+0x56>
   bf69a:	2c30      	cmp	r4, #48	; 0x30
   bf69c:	d0a5      	beq.n	bf5ea <_strtol_l.constprop.0+0x46>
   bf69e:	230a      	movs	r3, #10
   bf6a0:	e7ab      	b.n	bf5fa <_strtol_l.constprop.0+0x56>
   bf6a2:	bf00      	nop
   bf6a4:	000c1e19 	.word	0x000c1e19

000bf6a8 <strtol>:
   bf6a8:	4613      	mov	r3, r2
   bf6aa:	460a      	mov	r2, r1
   bf6ac:	4601      	mov	r1, r0
   bf6ae:	4802      	ldr	r0, [pc, #8]	; (bf6b8 <strtol+0x10>)
   bf6b0:	6800      	ldr	r0, [r0, #0]
   bf6b2:	f7ff bf77 	b.w	bf5a4 <_strtol_l.constprop.0>
   bf6b6:	bf00      	nop
   bf6b8:	2003da98 	.word	0x2003da98

000bf6bc <__register_exitproc>:
   bf6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bf6c0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bf77c <__register_exitproc+0xc0>
   bf6c4:	4606      	mov	r6, r0
   bf6c6:	f8d8 0000 	ldr.w	r0, [r8]
   bf6ca:	461f      	mov	r7, r3
   bf6cc:	460d      	mov	r5, r1
   bf6ce:	4691      	mov	r9, r2
   bf6d0:	f000 fbc6 	bl	bfe60 <__retarget_lock_acquire_recursive>
   bf6d4:	4b25      	ldr	r3, [pc, #148]	; (bf76c <__register_exitproc+0xb0>)
   bf6d6:	681c      	ldr	r4, [r3, #0]
   bf6d8:	b934      	cbnz	r4, bf6e8 <__register_exitproc+0x2c>
   bf6da:	4c25      	ldr	r4, [pc, #148]	; (bf770 <__register_exitproc+0xb4>)
   bf6dc:	601c      	str	r4, [r3, #0]
   bf6de:	4b25      	ldr	r3, [pc, #148]	; (bf774 <__register_exitproc+0xb8>)
   bf6e0:	b113      	cbz	r3, bf6e8 <__register_exitproc+0x2c>
   bf6e2:	681b      	ldr	r3, [r3, #0]
   bf6e4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bf6e8:	6863      	ldr	r3, [r4, #4]
   bf6ea:	2b1f      	cmp	r3, #31
   bf6ec:	dd07      	ble.n	bf6fe <__register_exitproc+0x42>
   bf6ee:	f8d8 0000 	ldr.w	r0, [r8]
   bf6f2:	f000 fbb7 	bl	bfe64 <__retarget_lock_release_recursive>
   bf6f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bf6fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bf6fe:	b34e      	cbz	r6, bf754 <__register_exitproc+0x98>
   bf700:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bf704:	b988      	cbnz	r0, bf72a <__register_exitproc+0x6e>
   bf706:	4b1c      	ldr	r3, [pc, #112]	; (bf778 <__register_exitproc+0xbc>)
   bf708:	b923      	cbnz	r3, bf714 <__register_exitproc+0x58>
   bf70a:	f8d8 0000 	ldr.w	r0, [r8]
   bf70e:	f000 fba8 	bl	bfe62 <__retarget_lock_release>
   bf712:	e7f0      	b.n	bf6f6 <__register_exitproc+0x3a>
   bf714:	f44f 7084 	mov.w	r0, #264	; 0x108
   bf718:	f7fa fb10 	bl	b9d3c <malloc>
   bf71c:	2800      	cmp	r0, #0
   bf71e:	d0f4      	beq.n	bf70a <__register_exitproc+0x4e>
   bf720:	2300      	movs	r3, #0
   bf722:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bf726:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bf72a:	6863      	ldr	r3, [r4, #4]
   bf72c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bf730:	2201      	movs	r2, #1
   bf732:	409a      	lsls	r2, r3
   bf734:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bf738:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bf73c:	4313      	orrs	r3, r2
   bf73e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bf742:	2e02      	cmp	r6, #2
   bf744:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bf748:	bf02      	ittt	eq
   bf74a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bf74e:	4313      	orreq	r3, r2
   bf750:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bf754:	6863      	ldr	r3, [r4, #4]
   bf756:	f8d8 0000 	ldr.w	r0, [r8]
   bf75a:	1c5a      	adds	r2, r3, #1
   bf75c:	3302      	adds	r3, #2
   bf75e:	6062      	str	r2, [r4, #4]
   bf760:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bf764:	f000 fb7e 	bl	bfe64 <__retarget_lock_release_recursive>
   bf768:	2000      	movs	r0, #0
   bf76a:	e7c6      	b.n	bf6fa <__register_exitproc+0x3e>
   bf76c:	2003e7e8 	.word	0x2003e7e8
   bf770:	2003e75c 	.word	0x2003e75c
   bf774:	00000000 	.word	0x00000000
   bf778:	000b9d3d 	.word	0x000b9d3d
   bf77c:	2003dafc 	.word	0x2003dafc

000bf780 <rshift>:
   bf780:	6903      	ldr	r3, [r0, #16]
   bf782:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bf786:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bf78a:	ea4f 1261 	mov.w	r2, r1, asr #5
   bf78e:	f100 0414 	add.w	r4, r0, #20
   bf792:	dd45      	ble.n	bf820 <rshift+0xa0>
   bf794:	f011 011f 	ands.w	r1, r1, #31
   bf798:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bf79c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bf7a0:	d10c      	bne.n	bf7bc <rshift+0x3c>
   bf7a2:	f100 0710 	add.w	r7, r0, #16
   bf7a6:	4629      	mov	r1, r5
   bf7a8:	42b1      	cmp	r1, r6
   bf7aa:	d334      	bcc.n	bf816 <rshift+0x96>
   bf7ac:	1a9b      	subs	r3, r3, r2
   bf7ae:	009b      	lsls	r3, r3, #2
   bf7b0:	1eea      	subs	r2, r5, #3
   bf7b2:	4296      	cmp	r6, r2
   bf7b4:	bf38      	it	cc
   bf7b6:	2300      	movcc	r3, #0
   bf7b8:	4423      	add	r3, r4
   bf7ba:	e015      	b.n	bf7e8 <rshift+0x68>
   bf7bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bf7c0:	f1c1 0820 	rsb	r8, r1, #32
   bf7c4:	40cf      	lsrs	r7, r1
   bf7c6:	f105 0e04 	add.w	lr, r5, #4
   bf7ca:	46a1      	mov	r9, r4
   bf7cc:	4576      	cmp	r6, lr
   bf7ce:	46f4      	mov	ip, lr
   bf7d0:	d815      	bhi.n	bf7fe <rshift+0x7e>
   bf7d2:	1a9a      	subs	r2, r3, r2
   bf7d4:	0092      	lsls	r2, r2, #2
   bf7d6:	3a04      	subs	r2, #4
   bf7d8:	3501      	adds	r5, #1
   bf7da:	42ae      	cmp	r6, r5
   bf7dc:	bf38      	it	cc
   bf7de:	2200      	movcc	r2, #0
   bf7e0:	18a3      	adds	r3, r4, r2
   bf7e2:	50a7      	str	r7, [r4, r2]
   bf7e4:	b107      	cbz	r7, bf7e8 <rshift+0x68>
   bf7e6:	3304      	adds	r3, #4
   bf7e8:	1b1a      	subs	r2, r3, r4
   bf7ea:	42a3      	cmp	r3, r4
   bf7ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bf7f0:	bf08      	it	eq
   bf7f2:	2300      	moveq	r3, #0
   bf7f4:	6102      	str	r2, [r0, #16]
   bf7f6:	bf08      	it	eq
   bf7f8:	6143      	streq	r3, [r0, #20]
   bf7fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bf7fe:	f8dc c000 	ldr.w	ip, [ip]
   bf802:	fa0c fc08 	lsl.w	ip, ip, r8
   bf806:	ea4c 0707 	orr.w	r7, ip, r7
   bf80a:	f849 7b04 	str.w	r7, [r9], #4
   bf80e:	f85e 7b04 	ldr.w	r7, [lr], #4
   bf812:	40cf      	lsrs	r7, r1
   bf814:	e7da      	b.n	bf7cc <rshift+0x4c>
   bf816:	f851 cb04 	ldr.w	ip, [r1], #4
   bf81a:	f847 cf04 	str.w	ip, [r7, #4]!
   bf81e:	e7c3      	b.n	bf7a8 <rshift+0x28>
   bf820:	4623      	mov	r3, r4
   bf822:	e7e1      	b.n	bf7e8 <rshift+0x68>

000bf824 <__hexdig_fun>:
   bf824:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bf828:	2b09      	cmp	r3, #9
   bf82a:	d802      	bhi.n	bf832 <__hexdig_fun+0xe>
   bf82c:	3820      	subs	r0, #32
   bf82e:	b2c0      	uxtb	r0, r0
   bf830:	4770      	bx	lr
   bf832:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bf836:	2b05      	cmp	r3, #5
   bf838:	d801      	bhi.n	bf83e <__hexdig_fun+0x1a>
   bf83a:	3847      	subs	r0, #71	; 0x47
   bf83c:	e7f7      	b.n	bf82e <__hexdig_fun+0xa>
   bf83e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bf842:	2b05      	cmp	r3, #5
   bf844:	d801      	bhi.n	bf84a <__hexdig_fun+0x26>
   bf846:	3827      	subs	r0, #39	; 0x27
   bf848:	e7f1      	b.n	bf82e <__hexdig_fun+0xa>
   bf84a:	2000      	movs	r0, #0
   bf84c:	4770      	bx	lr
	...

000bf850 <__gethex>:
   bf850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf854:	ed2d 8b02 	vpush	{d8}
   bf858:	b089      	sub	sp, #36	; 0x24
   bf85a:	ee08 0a10 	vmov	s16, r0
   bf85e:	9304      	str	r3, [sp, #16]
   bf860:	4bb4      	ldr	r3, [pc, #720]	; (bfb34 <__gethex+0x2e4>)
   bf862:	681b      	ldr	r3, [r3, #0]
   bf864:	9301      	str	r3, [sp, #4]
   bf866:	4618      	mov	r0, r3
   bf868:	468b      	mov	fp, r1
   bf86a:	4690      	mov	r8, r2
   bf86c:	f7ff f831 	bl	be8d2 <strlen>
   bf870:	9b01      	ldr	r3, [sp, #4]
   bf872:	f8db 2000 	ldr.w	r2, [fp]
   bf876:	4403      	add	r3, r0
   bf878:	4682      	mov	sl, r0
   bf87a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bf87e:	9305      	str	r3, [sp, #20]
   bf880:	1c93      	adds	r3, r2, #2
   bf882:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bf886:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bf88a:	32fe      	adds	r2, #254	; 0xfe
   bf88c:	18d1      	adds	r1, r2, r3
   bf88e:	461f      	mov	r7, r3
   bf890:	f813 0b01 	ldrb.w	r0, [r3], #1
   bf894:	9100      	str	r1, [sp, #0]
   bf896:	2830      	cmp	r0, #48	; 0x30
   bf898:	d0f8      	beq.n	bf88c <__gethex+0x3c>
   bf89a:	f7ff ffc3 	bl	bf824 <__hexdig_fun>
   bf89e:	4604      	mov	r4, r0
   bf8a0:	2800      	cmp	r0, #0
   bf8a2:	d13a      	bne.n	bf91a <__gethex+0xca>
   bf8a4:	9901      	ldr	r1, [sp, #4]
   bf8a6:	4652      	mov	r2, sl
   bf8a8:	4638      	mov	r0, r7
   bf8aa:	f7ff f81a 	bl	be8e2 <strncmp>
   bf8ae:	4605      	mov	r5, r0
   bf8b0:	2800      	cmp	r0, #0
   bf8b2:	d168      	bne.n	bf986 <__gethex+0x136>
   bf8b4:	f817 000a 	ldrb.w	r0, [r7, sl]
   bf8b8:	eb07 060a 	add.w	r6, r7, sl
   bf8bc:	f7ff ffb2 	bl	bf824 <__hexdig_fun>
   bf8c0:	2800      	cmp	r0, #0
   bf8c2:	d062      	beq.n	bf98a <__gethex+0x13a>
   bf8c4:	4633      	mov	r3, r6
   bf8c6:	7818      	ldrb	r0, [r3, #0]
   bf8c8:	2830      	cmp	r0, #48	; 0x30
   bf8ca:	461f      	mov	r7, r3
   bf8cc:	f103 0301 	add.w	r3, r3, #1
   bf8d0:	d0f9      	beq.n	bf8c6 <__gethex+0x76>
   bf8d2:	f7ff ffa7 	bl	bf824 <__hexdig_fun>
   bf8d6:	2301      	movs	r3, #1
   bf8d8:	fab0 f480 	clz	r4, r0
   bf8dc:	0964      	lsrs	r4, r4, #5
   bf8de:	4635      	mov	r5, r6
   bf8e0:	9300      	str	r3, [sp, #0]
   bf8e2:	463a      	mov	r2, r7
   bf8e4:	4616      	mov	r6, r2
   bf8e6:	3201      	adds	r2, #1
   bf8e8:	7830      	ldrb	r0, [r6, #0]
   bf8ea:	f7ff ff9b 	bl	bf824 <__hexdig_fun>
   bf8ee:	2800      	cmp	r0, #0
   bf8f0:	d1f8      	bne.n	bf8e4 <__gethex+0x94>
   bf8f2:	9901      	ldr	r1, [sp, #4]
   bf8f4:	4652      	mov	r2, sl
   bf8f6:	4630      	mov	r0, r6
   bf8f8:	f7fe fff3 	bl	be8e2 <strncmp>
   bf8fc:	b980      	cbnz	r0, bf920 <__gethex+0xd0>
   bf8fe:	b94d      	cbnz	r5, bf914 <__gethex+0xc4>
   bf900:	eb06 050a 	add.w	r5, r6, sl
   bf904:	462a      	mov	r2, r5
   bf906:	4616      	mov	r6, r2
   bf908:	3201      	adds	r2, #1
   bf90a:	7830      	ldrb	r0, [r6, #0]
   bf90c:	f7ff ff8a 	bl	bf824 <__hexdig_fun>
   bf910:	2800      	cmp	r0, #0
   bf912:	d1f8      	bne.n	bf906 <__gethex+0xb6>
   bf914:	1bad      	subs	r5, r5, r6
   bf916:	00ad      	lsls	r5, r5, #2
   bf918:	e004      	b.n	bf924 <__gethex+0xd4>
   bf91a:	2400      	movs	r4, #0
   bf91c:	4625      	mov	r5, r4
   bf91e:	e7e0      	b.n	bf8e2 <__gethex+0x92>
   bf920:	2d00      	cmp	r5, #0
   bf922:	d1f7      	bne.n	bf914 <__gethex+0xc4>
   bf924:	7833      	ldrb	r3, [r6, #0]
   bf926:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bf92a:	2b50      	cmp	r3, #80	; 0x50
   bf92c:	d13b      	bne.n	bf9a6 <__gethex+0x156>
   bf92e:	7873      	ldrb	r3, [r6, #1]
   bf930:	2b2b      	cmp	r3, #43	; 0x2b
   bf932:	d02c      	beq.n	bf98e <__gethex+0x13e>
   bf934:	2b2d      	cmp	r3, #45	; 0x2d
   bf936:	d02e      	beq.n	bf996 <__gethex+0x146>
   bf938:	1c71      	adds	r1, r6, #1
   bf93a:	f04f 0900 	mov.w	r9, #0
   bf93e:	7808      	ldrb	r0, [r1, #0]
   bf940:	f7ff ff70 	bl	bf824 <__hexdig_fun>
   bf944:	1e43      	subs	r3, r0, #1
   bf946:	b2db      	uxtb	r3, r3
   bf948:	2b18      	cmp	r3, #24
   bf94a:	d82c      	bhi.n	bf9a6 <__gethex+0x156>
   bf94c:	f1a0 0210 	sub.w	r2, r0, #16
   bf950:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bf954:	f7ff ff66 	bl	bf824 <__hexdig_fun>
   bf958:	1e43      	subs	r3, r0, #1
   bf95a:	b2db      	uxtb	r3, r3
   bf95c:	2b18      	cmp	r3, #24
   bf95e:	d91d      	bls.n	bf99c <__gethex+0x14c>
   bf960:	f1b9 0f00 	cmp.w	r9, #0
   bf964:	d000      	beq.n	bf968 <__gethex+0x118>
   bf966:	4252      	negs	r2, r2
   bf968:	4415      	add	r5, r2
   bf96a:	f8cb 1000 	str.w	r1, [fp]
   bf96e:	b1e4      	cbz	r4, bf9aa <__gethex+0x15a>
   bf970:	9b00      	ldr	r3, [sp, #0]
   bf972:	2b00      	cmp	r3, #0
   bf974:	bf14      	ite	ne
   bf976:	2700      	movne	r7, #0
   bf978:	2706      	moveq	r7, #6
   bf97a:	4638      	mov	r0, r7
   bf97c:	b009      	add	sp, #36	; 0x24
   bf97e:	ecbd 8b02 	vpop	{d8}
   bf982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bf986:	463e      	mov	r6, r7
   bf988:	4625      	mov	r5, r4
   bf98a:	2401      	movs	r4, #1
   bf98c:	e7ca      	b.n	bf924 <__gethex+0xd4>
   bf98e:	f04f 0900 	mov.w	r9, #0
   bf992:	1cb1      	adds	r1, r6, #2
   bf994:	e7d3      	b.n	bf93e <__gethex+0xee>
   bf996:	f04f 0901 	mov.w	r9, #1
   bf99a:	e7fa      	b.n	bf992 <__gethex+0x142>
   bf99c:	230a      	movs	r3, #10
   bf99e:	fb03 0202 	mla	r2, r3, r2, r0
   bf9a2:	3a10      	subs	r2, #16
   bf9a4:	e7d4      	b.n	bf950 <__gethex+0x100>
   bf9a6:	4631      	mov	r1, r6
   bf9a8:	e7df      	b.n	bf96a <__gethex+0x11a>
   bf9aa:	1bf3      	subs	r3, r6, r7
   bf9ac:	3b01      	subs	r3, #1
   bf9ae:	4621      	mov	r1, r4
   bf9b0:	2b07      	cmp	r3, #7
   bf9b2:	dc0b      	bgt.n	bf9cc <__gethex+0x17c>
   bf9b4:	ee18 0a10 	vmov	r0, s16
   bf9b8:	f000 fa68 	bl	bfe8c <_Balloc>
   bf9bc:	4604      	mov	r4, r0
   bf9be:	b940      	cbnz	r0, bf9d2 <__gethex+0x182>
   bf9c0:	4b5d      	ldr	r3, [pc, #372]	; (bfb38 <__gethex+0x2e8>)
   bf9c2:	4602      	mov	r2, r0
   bf9c4:	21de      	movs	r1, #222	; 0xde
   bf9c6:	485d      	ldr	r0, [pc, #372]	; (bfb3c <__gethex+0x2ec>)
   bf9c8:	f7fa fa08 	bl	b9ddc <__assert_func>
   bf9cc:	3101      	adds	r1, #1
   bf9ce:	105b      	asrs	r3, r3, #1
   bf9d0:	e7ee      	b.n	bf9b0 <__gethex+0x160>
   bf9d2:	f100 0914 	add.w	r9, r0, #20
   bf9d6:	f04f 0b00 	mov.w	fp, #0
   bf9da:	f1ca 0301 	rsb	r3, sl, #1
   bf9de:	f8cd 9008 	str.w	r9, [sp, #8]
   bf9e2:	f8cd b000 	str.w	fp, [sp]
   bf9e6:	9306      	str	r3, [sp, #24]
   bf9e8:	42b7      	cmp	r7, r6
   bf9ea:	d340      	bcc.n	bfa6e <__gethex+0x21e>
   bf9ec:	9802      	ldr	r0, [sp, #8]
   bf9ee:	9b00      	ldr	r3, [sp, #0]
   bf9f0:	f840 3b04 	str.w	r3, [r0], #4
   bf9f4:	eba0 0009 	sub.w	r0, r0, r9
   bf9f8:	1080      	asrs	r0, r0, #2
   bf9fa:	0146      	lsls	r6, r0, #5
   bf9fc:	6120      	str	r0, [r4, #16]
   bf9fe:	4618      	mov	r0, r3
   bfa00:	f000 fb36 	bl	c0070 <__hi0bits>
   bfa04:	1a30      	subs	r0, r6, r0
   bfa06:	f8d8 6000 	ldr.w	r6, [r8]
   bfa0a:	42b0      	cmp	r0, r6
   bfa0c:	dd63      	ble.n	bfad6 <__gethex+0x286>
   bfa0e:	1b87      	subs	r7, r0, r6
   bfa10:	4639      	mov	r1, r7
   bfa12:	4620      	mov	r0, r4
   bfa14:	f000 feda 	bl	c07cc <__any_on>
   bfa18:	4682      	mov	sl, r0
   bfa1a:	b1a8      	cbz	r0, bfa48 <__gethex+0x1f8>
   bfa1c:	1e7b      	subs	r3, r7, #1
   bfa1e:	1159      	asrs	r1, r3, #5
   bfa20:	f003 021f 	and.w	r2, r3, #31
   bfa24:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bfa28:	f04f 0a01 	mov.w	sl, #1
   bfa2c:	fa0a f202 	lsl.w	r2, sl, r2
   bfa30:	420a      	tst	r2, r1
   bfa32:	d009      	beq.n	bfa48 <__gethex+0x1f8>
   bfa34:	4553      	cmp	r3, sl
   bfa36:	dd05      	ble.n	bfa44 <__gethex+0x1f4>
   bfa38:	1eb9      	subs	r1, r7, #2
   bfa3a:	4620      	mov	r0, r4
   bfa3c:	f000 fec6 	bl	c07cc <__any_on>
   bfa40:	2800      	cmp	r0, #0
   bfa42:	d145      	bne.n	bfad0 <__gethex+0x280>
   bfa44:	f04f 0a02 	mov.w	sl, #2
   bfa48:	4639      	mov	r1, r7
   bfa4a:	4620      	mov	r0, r4
   bfa4c:	f7ff fe98 	bl	bf780 <rshift>
   bfa50:	443d      	add	r5, r7
   bfa52:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bfa56:	42ab      	cmp	r3, r5
   bfa58:	da4c      	bge.n	bfaf4 <__gethex+0x2a4>
   bfa5a:	ee18 0a10 	vmov	r0, s16
   bfa5e:	4621      	mov	r1, r4
   bfa60:	f000 fa54 	bl	bff0c <_Bfree>
   bfa64:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bfa66:	2300      	movs	r3, #0
   bfa68:	6013      	str	r3, [r2, #0]
   bfa6a:	27a3      	movs	r7, #163	; 0xa3
   bfa6c:	e785      	b.n	bf97a <__gethex+0x12a>
   bfa6e:	1e73      	subs	r3, r6, #1
   bfa70:	9a05      	ldr	r2, [sp, #20]
   bfa72:	9303      	str	r3, [sp, #12]
   bfa74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bfa78:	4293      	cmp	r3, r2
   bfa7a:	d019      	beq.n	bfab0 <__gethex+0x260>
   bfa7c:	f1bb 0f20 	cmp.w	fp, #32
   bfa80:	d107      	bne.n	bfa92 <__gethex+0x242>
   bfa82:	9b02      	ldr	r3, [sp, #8]
   bfa84:	9a00      	ldr	r2, [sp, #0]
   bfa86:	f843 2b04 	str.w	r2, [r3], #4
   bfa8a:	9302      	str	r3, [sp, #8]
   bfa8c:	2300      	movs	r3, #0
   bfa8e:	9300      	str	r3, [sp, #0]
   bfa90:	469b      	mov	fp, r3
   bfa92:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bfa96:	f7ff fec5 	bl	bf824 <__hexdig_fun>
   bfa9a:	9b00      	ldr	r3, [sp, #0]
   bfa9c:	f000 000f 	and.w	r0, r0, #15
   bfaa0:	fa00 f00b 	lsl.w	r0, r0, fp
   bfaa4:	4303      	orrs	r3, r0
   bfaa6:	9300      	str	r3, [sp, #0]
   bfaa8:	f10b 0b04 	add.w	fp, fp, #4
   bfaac:	9b03      	ldr	r3, [sp, #12]
   bfaae:	e00d      	b.n	bfacc <__gethex+0x27c>
   bfab0:	9b03      	ldr	r3, [sp, #12]
   bfab2:	9a06      	ldr	r2, [sp, #24]
   bfab4:	4413      	add	r3, r2
   bfab6:	42bb      	cmp	r3, r7
   bfab8:	d3e0      	bcc.n	bfa7c <__gethex+0x22c>
   bfaba:	4618      	mov	r0, r3
   bfabc:	9901      	ldr	r1, [sp, #4]
   bfabe:	9307      	str	r3, [sp, #28]
   bfac0:	4652      	mov	r2, sl
   bfac2:	f7fe ff0e 	bl	be8e2 <strncmp>
   bfac6:	9b07      	ldr	r3, [sp, #28]
   bfac8:	2800      	cmp	r0, #0
   bfaca:	d1d7      	bne.n	bfa7c <__gethex+0x22c>
   bfacc:	461e      	mov	r6, r3
   bface:	e78b      	b.n	bf9e8 <__gethex+0x198>
   bfad0:	f04f 0a03 	mov.w	sl, #3
   bfad4:	e7b8      	b.n	bfa48 <__gethex+0x1f8>
   bfad6:	da0a      	bge.n	bfaee <__gethex+0x29e>
   bfad8:	1a37      	subs	r7, r6, r0
   bfada:	4621      	mov	r1, r4
   bfadc:	ee18 0a10 	vmov	r0, s16
   bfae0:	463a      	mov	r2, r7
   bfae2:	f000 fc2f 	bl	c0344 <__lshift>
   bfae6:	1bed      	subs	r5, r5, r7
   bfae8:	4604      	mov	r4, r0
   bfaea:	f100 0914 	add.w	r9, r0, #20
   bfaee:	f04f 0a00 	mov.w	sl, #0
   bfaf2:	e7ae      	b.n	bfa52 <__gethex+0x202>
   bfaf4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bfaf8:	42a8      	cmp	r0, r5
   bfafa:	dd72      	ble.n	bfbe2 <__gethex+0x392>
   bfafc:	1b45      	subs	r5, r0, r5
   bfafe:	42ae      	cmp	r6, r5
   bfb00:	dc36      	bgt.n	bfb70 <__gethex+0x320>
   bfb02:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bfb06:	2b02      	cmp	r3, #2
   bfb08:	d02a      	beq.n	bfb60 <__gethex+0x310>
   bfb0a:	2b03      	cmp	r3, #3
   bfb0c:	d02c      	beq.n	bfb68 <__gethex+0x318>
   bfb0e:	2b01      	cmp	r3, #1
   bfb10:	d11c      	bne.n	bfb4c <__gethex+0x2fc>
   bfb12:	42ae      	cmp	r6, r5
   bfb14:	d11a      	bne.n	bfb4c <__gethex+0x2fc>
   bfb16:	2e01      	cmp	r6, #1
   bfb18:	d112      	bne.n	bfb40 <__gethex+0x2f0>
   bfb1a:	9a04      	ldr	r2, [sp, #16]
   bfb1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bfb20:	6013      	str	r3, [r2, #0]
   bfb22:	2301      	movs	r3, #1
   bfb24:	6123      	str	r3, [r4, #16]
   bfb26:	f8c9 3000 	str.w	r3, [r9]
   bfb2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bfb2c:	2762      	movs	r7, #98	; 0x62
   bfb2e:	601c      	str	r4, [r3, #0]
   bfb30:	e723      	b.n	bf97a <__gethex+0x12a>
   bfb32:	bf00      	nop
   bfb34:	000c1f8c 	.word	0x000c1f8c
   bfb38:	000c1f19 	.word	0x000c1f19
   bfb3c:	000c1f2a 	.word	0x000c1f2a
   bfb40:	1e71      	subs	r1, r6, #1
   bfb42:	4620      	mov	r0, r4
   bfb44:	f000 fe42 	bl	c07cc <__any_on>
   bfb48:	2800      	cmp	r0, #0
   bfb4a:	d1e6      	bne.n	bfb1a <__gethex+0x2ca>
   bfb4c:	ee18 0a10 	vmov	r0, s16
   bfb50:	4621      	mov	r1, r4
   bfb52:	f000 f9db 	bl	bff0c <_Bfree>
   bfb56:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bfb58:	2300      	movs	r3, #0
   bfb5a:	6013      	str	r3, [r2, #0]
   bfb5c:	2750      	movs	r7, #80	; 0x50
   bfb5e:	e70c      	b.n	bf97a <__gethex+0x12a>
   bfb60:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bfb62:	2b00      	cmp	r3, #0
   bfb64:	d1f2      	bne.n	bfb4c <__gethex+0x2fc>
   bfb66:	e7d8      	b.n	bfb1a <__gethex+0x2ca>
   bfb68:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bfb6a:	2b00      	cmp	r3, #0
   bfb6c:	d1d5      	bne.n	bfb1a <__gethex+0x2ca>
   bfb6e:	e7ed      	b.n	bfb4c <__gethex+0x2fc>
   bfb70:	1e6f      	subs	r7, r5, #1
   bfb72:	f1ba 0f00 	cmp.w	sl, #0
   bfb76:	d131      	bne.n	bfbdc <__gethex+0x38c>
   bfb78:	b127      	cbz	r7, bfb84 <__gethex+0x334>
   bfb7a:	4639      	mov	r1, r7
   bfb7c:	4620      	mov	r0, r4
   bfb7e:	f000 fe25 	bl	c07cc <__any_on>
   bfb82:	4682      	mov	sl, r0
   bfb84:	117b      	asrs	r3, r7, #5
   bfb86:	2101      	movs	r1, #1
   bfb88:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bfb8c:	f007 071f 	and.w	r7, r7, #31
   bfb90:	fa01 f707 	lsl.w	r7, r1, r7
   bfb94:	421f      	tst	r7, r3
   bfb96:	4629      	mov	r1, r5
   bfb98:	4620      	mov	r0, r4
   bfb9a:	bf18      	it	ne
   bfb9c:	f04a 0a02 	orrne.w	sl, sl, #2
   bfba0:	1b76      	subs	r6, r6, r5
   bfba2:	f7ff fded 	bl	bf780 <rshift>
   bfba6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bfbaa:	2702      	movs	r7, #2
   bfbac:	f1ba 0f00 	cmp.w	sl, #0
   bfbb0:	d048      	beq.n	bfc44 <__gethex+0x3f4>
   bfbb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bfbb6:	2b02      	cmp	r3, #2
   bfbb8:	d015      	beq.n	bfbe6 <__gethex+0x396>
   bfbba:	2b03      	cmp	r3, #3
   bfbbc:	d017      	beq.n	bfbee <__gethex+0x39e>
   bfbbe:	2b01      	cmp	r3, #1
   bfbc0:	d109      	bne.n	bfbd6 <__gethex+0x386>
   bfbc2:	f01a 0f02 	tst.w	sl, #2
   bfbc6:	d006      	beq.n	bfbd6 <__gethex+0x386>
   bfbc8:	f8d9 0000 	ldr.w	r0, [r9]
   bfbcc:	ea4a 0a00 	orr.w	sl, sl, r0
   bfbd0:	f01a 0f01 	tst.w	sl, #1
   bfbd4:	d10e      	bne.n	bfbf4 <__gethex+0x3a4>
   bfbd6:	f047 0710 	orr.w	r7, r7, #16
   bfbda:	e033      	b.n	bfc44 <__gethex+0x3f4>
   bfbdc:	f04f 0a01 	mov.w	sl, #1
   bfbe0:	e7d0      	b.n	bfb84 <__gethex+0x334>
   bfbe2:	2701      	movs	r7, #1
   bfbe4:	e7e2      	b.n	bfbac <__gethex+0x35c>
   bfbe6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bfbe8:	f1c3 0301 	rsb	r3, r3, #1
   bfbec:	9315      	str	r3, [sp, #84]	; 0x54
   bfbee:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bfbf0:	2b00      	cmp	r3, #0
   bfbf2:	d0f0      	beq.n	bfbd6 <__gethex+0x386>
   bfbf4:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bfbf8:	f104 0314 	add.w	r3, r4, #20
   bfbfc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bfc00:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bfc04:	f04f 0c00 	mov.w	ip, #0
   bfc08:	4618      	mov	r0, r3
   bfc0a:	f853 2b04 	ldr.w	r2, [r3], #4
   bfc0e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bfc12:	d01c      	beq.n	bfc4e <__gethex+0x3fe>
   bfc14:	3201      	adds	r2, #1
   bfc16:	6002      	str	r2, [r0, #0]
   bfc18:	2f02      	cmp	r7, #2
   bfc1a:	f104 0314 	add.w	r3, r4, #20
   bfc1e:	d13f      	bne.n	bfca0 <__gethex+0x450>
   bfc20:	f8d8 2000 	ldr.w	r2, [r8]
   bfc24:	3a01      	subs	r2, #1
   bfc26:	42b2      	cmp	r2, r6
   bfc28:	d10a      	bne.n	bfc40 <__gethex+0x3f0>
   bfc2a:	1171      	asrs	r1, r6, #5
   bfc2c:	2201      	movs	r2, #1
   bfc2e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bfc32:	f006 061f 	and.w	r6, r6, #31
   bfc36:	fa02 f606 	lsl.w	r6, r2, r6
   bfc3a:	421e      	tst	r6, r3
   bfc3c:	bf18      	it	ne
   bfc3e:	4617      	movne	r7, r2
   bfc40:	f047 0720 	orr.w	r7, r7, #32
   bfc44:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bfc46:	601c      	str	r4, [r3, #0]
   bfc48:	9b04      	ldr	r3, [sp, #16]
   bfc4a:	601d      	str	r5, [r3, #0]
   bfc4c:	e695      	b.n	bf97a <__gethex+0x12a>
   bfc4e:	4299      	cmp	r1, r3
   bfc50:	f843 cc04 	str.w	ip, [r3, #-4]
   bfc54:	d8d8      	bhi.n	bfc08 <__gethex+0x3b8>
   bfc56:	68a3      	ldr	r3, [r4, #8]
   bfc58:	459b      	cmp	fp, r3
   bfc5a:	db19      	blt.n	bfc90 <__gethex+0x440>
   bfc5c:	6861      	ldr	r1, [r4, #4]
   bfc5e:	ee18 0a10 	vmov	r0, s16
   bfc62:	3101      	adds	r1, #1
   bfc64:	f000 f912 	bl	bfe8c <_Balloc>
   bfc68:	4681      	mov	r9, r0
   bfc6a:	b918      	cbnz	r0, bfc74 <__gethex+0x424>
   bfc6c:	4b1a      	ldr	r3, [pc, #104]	; (bfcd8 <__gethex+0x488>)
   bfc6e:	4602      	mov	r2, r0
   bfc70:	2184      	movs	r1, #132	; 0x84
   bfc72:	e6a8      	b.n	bf9c6 <__gethex+0x176>
   bfc74:	6922      	ldr	r2, [r4, #16]
   bfc76:	3202      	adds	r2, #2
   bfc78:	f104 010c 	add.w	r1, r4, #12
   bfc7c:	0092      	lsls	r2, r2, #2
   bfc7e:	300c      	adds	r0, #12
   bfc80:	f7fe fd4b 	bl	be71a <memcpy>
   bfc84:	4621      	mov	r1, r4
   bfc86:	ee18 0a10 	vmov	r0, s16
   bfc8a:	f000 f93f 	bl	bff0c <_Bfree>
   bfc8e:	464c      	mov	r4, r9
   bfc90:	6923      	ldr	r3, [r4, #16]
   bfc92:	1c5a      	adds	r2, r3, #1
   bfc94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bfc98:	6122      	str	r2, [r4, #16]
   bfc9a:	2201      	movs	r2, #1
   bfc9c:	615a      	str	r2, [r3, #20]
   bfc9e:	e7bb      	b.n	bfc18 <__gethex+0x3c8>
   bfca0:	6922      	ldr	r2, [r4, #16]
   bfca2:	455a      	cmp	r2, fp
   bfca4:	dd0b      	ble.n	bfcbe <__gethex+0x46e>
   bfca6:	2101      	movs	r1, #1
   bfca8:	4620      	mov	r0, r4
   bfcaa:	f7ff fd69 	bl	bf780 <rshift>
   bfcae:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bfcb2:	3501      	adds	r5, #1
   bfcb4:	42ab      	cmp	r3, r5
   bfcb6:	f6ff aed0 	blt.w	bfa5a <__gethex+0x20a>
   bfcba:	2701      	movs	r7, #1
   bfcbc:	e7c0      	b.n	bfc40 <__gethex+0x3f0>
   bfcbe:	f016 061f 	ands.w	r6, r6, #31
   bfcc2:	d0fa      	beq.n	bfcba <__gethex+0x46a>
   bfcc4:	4453      	add	r3, sl
   bfcc6:	f1c6 0620 	rsb	r6, r6, #32
   bfcca:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bfcce:	f000 f9cf 	bl	c0070 <__hi0bits>
   bfcd2:	42b0      	cmp	r0, r6
   bfcd4:	dbe7      	blt.n	bfca6 <__gethex+0x456>
   bfcd6:	e7f0      	b.n	bfcba <__gethex+0x46a>
   bfcd8:	000c1f19 	.word	0x000c1f19

000bfcdc <L_shift>:
   bfcdc:	f1c2 0208 	rsb	r2, r2, #8
   bfce0:	0092      	lsls	r2, r2, #2
   bfce2:	b570      	push	{r4, r5, r6, lr}
   bfce4:	f1c2 0620 	rsb	r6, r2, #32
   bfce8:	6843      	ldr	r3, [r0, #4]
   bfcea:	6804      	ldr	r4, [r0, #0]
   bfcec:	fa03 f506 	lsl.w	r5, r3, r6
   bfcf0:	432c      	orrs	r4, r5
   bfcf2:	40d3      	lsrs	r3, r2
   bfcf4:	6004      	str	r4, [r0, #0]
   bfcf6:	f840 3f04 	str.w	r3, [r0, #4]!
   bfcfa:	4288      	cmp	r0, r1
   bfcfc:	d3f4      	bcc.n	bfce8 <L_shift+0xc>
   bfcfe:	bd70      	pop	{r4, r5, r6, pc}

000bfd00 <__match>:
   bfd00:	b530      	push	{r4, r5, lr}
   bfd02:	6803      	ldr	r3, [r0, #0]
   bfd04:	3301      	adds	r3, #1
   bfd06:	f811 4b01 	ldrb.w	r4, [r1], #1
   bfd0a:	b914      	cbnz	r4, bfd12 <__match+0x12>
   bfd0c:	6003      	str	r3, [r0, #0]
   bfd0e:	2001      	movs	r0, #1
   bfd10:	bd30      	pop	{r4, r5, pc}
   bfd12:	f813 2b01 	ldrb.w	r2, [r3], #1
   bfd16:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bfd1a:	2d19      	cmp	r5, #25
   bfd1c:	bf98      	it	ls
   bfd1e:	3220      	addls	r2, #32
   bfd20:	42a2      	cmp	r2, r4
   bfd22:	d0f0      	beq.n	bfd06 <__match+0x6>
   bfd24:	2000      	movs	r0, #0
   bfd26:	e7f3      	b.n	bfd10 <__match+0x10>

000bfd28 <__hexnan>:
   bfd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfd2c:	680b      	ldr	r3, [r1, #0]
   bfd2e:	115e      	asrs	r6, r3, #5
   bfd30:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bfd34:	f013 031f 	ands.w	r3, r3, #31
   bfd38:	b087      	sub	sp, #28
   bfd3a:	bf18      	it	ne
   bfd3c:	3604      	addne	r6, #4
   bfd3e:	2500      	movs	r5, #0
   bfd40:	1f37      	subs	r7, r6, #4
   bfd42:	4690      	mov	r8, r2
   bfd44:	6802      	ldr	r2, [r0, #0]
   bfd46:	9301      	str	r3, [sp, #4]
   bfd48:	4682      	mov	sl, r0
   bfd4a:	f846 5c04 	str.w	r5, [r6, #-4]
   bfd4e:	46b9      	mov	r9, r7
   bfd50:	463c      	mov	r4, r7
   bfd52:	9502      	str	r5, [sp, #8]
   bfd54:	46ab      	mov	fp, r5
   bfd56:	7851      	ldrb	r1, [r2, #1]
   bfd58:	1c53      	adds	r3, r2, #1
   bfd5a:	9303      	str	r3, [sp, #12]
   bfd5c:	b341      	cbz	r1, bfdb0 <__hexnan+0x88>
   bfd5e:	4608      	mov	r0, r1
   bfd60:	9205      	str	r2, [sp, #20]
   bfd62:	9104      	str	r1, [sp, #16]
   bfd64:	f7ff fd5e 	bl	bf824 <__hexdig_fun>
   bfd68:	2800      	cmp	r0, #0
   bfd6a:	d14f      	bne.n	bfe0c <__hexnan+0xe4>
   bfd6c:	9904      	ldr	r1, [sp, #16]
   bfd6e:	9a05      	ldr	r2, [sp, #20]
   bfd70:	2920      	cmp	r1, #32
   bfd72:	d818      	bhi.n	bfda6 <__hexnan+0x7e>
   bfd74:	9b02      	ldr	r3, [sp, #8]
   bfd76:	459b      	cmp	fp, r3
   bfd78:	dd13      	ble.n	bfda2 <__hexnan+0x7a>
   bfd7a:	454c      	cmp	r4, r9
   bfd7c:	d206      	bcs.n	bfd8c <__hexnan+0x64>
   bfd7e:	2d07      	cmp	r5, #7
   bfd80:	dc04      	bgt.n	bfd8c <__hexnan+0x64>
   bfd82:	462a      	mov	r2, r5
   bfd84:	4649      	mov	r1, r9
   bfd86:	4620      	mov	r0, r4
   bfd88:	f7ff ffa8 	bl	bfcdc <L_shift>
   bfd8c:	4544      	cmp	r4, r8
   bfd8e:	d950      	bls.n	bfe32 <__hexnan+0x10a>
   bfd90:	2300      	movs	r3, #0
   bfd92:	f1a4 0904 	sub.w	r9, r4, #4
   bfd96:	f844 3c04 	str.w	r3, [r4, #-4]
   bfd9a:	f8cd b008 	str.w	fp, [sp, #8]
   bfd9e:	464c      	mov	r4, r9
   bfda0:	461d      	mov	r5, r3
   bfda2:	9a03      	ldr	r2, [sp, #12]
   bfda4:	e7d7      	b.n	bfd56 <__hexnan+0x2e>
   bfda6:	2929      	cmp	r1, #41	; 0x29
   bfda8:	d156      	bne.n	bfe58 <__hexnan+0x130>
   bfdaa:	3202      	adds	r2, #2
   bfdac:	f8ca 2000 	str.w	r2, [sl]
   bfdb0:	f1bb 0f00 	cmp.w	fp, #0
   bfdb4:	d050      	beq.n	bfe58 <__hexnan+0x130>
   bfdb6:	454c      	cmp	r4, r9
   bfdb8:	d206      	bcs.n	bfdc8 <__hexnan+0xa0>
   bfdba:	2d07      	cmp	r5, #7
   bfdbc:	dc04      	bgt.n	bfdc8 <__hexnan+0xa0>
   bfdbe:	462a      	mov	r2, r5
   bfdc0:	4649      	mov	r1, r9
   bfdc2:	4620      	mov	r0, r4
   bfdc4:	f7ff ff8a 	bl	bfcdc <L_shift>
   bfdc8:	4544      	cmp	r4, r8
   bfdca:	d934      	bls.n	bfe36 <__hexnan+0x10e>
   bfdcc:	f1a8 0204 	sub.w	r2, r8, #4
   bfdd0:	4623      	mov	r3, r4
   bfdd2:	f853 1b04 	ldr.w	r1, [r3], #4
   bfdd6:	f842 1f04 	str.w	r1, [r2, #4]!
   bfdda:	429f      	cmp	r7, r3
   bfddc:	d2f9      	bcs.n	bfdd2 <__hexnan+0xaa>
   bfdde:	1b3b      	subs	r3, r7, r4
   bfde0:	f023 0303 	bic.w	r3, r3, #3
   bfde4:	3304      	adds	r3, #4
   bfde6:	3401      	adds	r4, #1
   bfde8:	3e03      	subs	r6, #3
   bfdea:	42b4      	cmp	r4, r6
   bfdec:	bf88      	it	hi
   bfdee:	2304      	movhi	r3, #4
   bfdf0:	4443      	add	r3, r8
   bfdf2:	2200      	movs	r2, #0
   bfdf4:	f843 2b04 	str.w	r2, [r3], #4
   bfdf8:	429f      	cmp	r7, r3
   bfdfa:	d2fb      	bcs.n	bfdf4 <__hexnan+0xcc>
   bfdfc:	683b      	ldr	r3, [r7, #0]
   bfdfe:	b91b      	cbnz	r3, bfe08 <__hexnan+0xe0>
   bfe00:	4547      	cmp	r7, r8
   bfe02:	d127      	bne.n	bfe54 <__hexnan+0x12c>
   bfe04:	2301      	movs	r3, #1
   bfe06:	603b      	str	r3, [r7, #0]
   bfe08:	2005      	movs	r0, #5
   bfe0a:	e026      	b.n	bfe5a <__hexnan+0x132>
   bfe0c:	3501      	adds	r5, #1
   bfe0e:	2d08      	cmp	r5, #8
   bfe10:	f10b 0b01 	add.w	fp, fp, #1
   bfe14:	dd06      	ble.n	bfe24 <__hexnan+0xfc>
   bfe16:	4544      	cmp	r4, r8
   bfe18:	d9c3      	bls.n	bfda2 <__hexnan+0x7a>
   bfe1a:	2300      	movs	r3, #0
   bfe1c:	f844 3c04 	str.w	r3, [r4, #-4]
   bfe20:	2501      	movs	r5, #1
   bfe22:	3c04      	subs	r4, #4
   bfe24:	6822      	ldr	r2, [r4, #0]
   bfe26:	f000 000f 	and.w	r0, r0, #15
   bfe2a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bfe2e:	6022      	str	r2, [r4, #0]
   bfe30:	e7b7      	b.n	bfda2 <__hexnan+0x7a>
   bfe32:	2508      	movs	r5, #8
   bfe34:	e7b5      	b.n	bfda2 <__hexnan+0x7a>
   bfe36:	9b01      	ldr	r3, [sp, #4]
   bfe38:	2b00      	cmp	r3, #0
   bfe3a:	d0df      	beq.n	bfdfc <__hexnan+0xd4>
   bfe3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bfe40:	f1c3 0320 	rsb	r3, r3, #32
   bfe44:	fa22 f303 	lsr.w	r3, r2, r3
   bfe48:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bfe4c:	401a      	ands	r2, r3
   bfe4e:	f846 2c04 	str.w	r2, [r6, #-4]
   bfe52:	e7d3      	b.n	bfdfc <__hexnan+0xd4>
   bfe54:	3f04      	subs	r7, #4
   bfe56:	e7d1      	b.n	bfdfc <__hexnan+0xd4>
   bfe58:	2004      	movs	r0, #4
   bfe5a:	b007      	add	sp, #28
   bfe5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bfe60 <__retarget_lock_acquire_recursive>:
   bfe60:	4770      	bx	lr

000bfe62 <__retarget_lock_release>:
   bfe62:	4770      	bx	lr

000bfe64 <__retarget_lock_release_recursive>:
   bfe64:	4770      	bx	lr

000bfe66 <__ascii_mbtowc>:
   bfe66:	b082      	sub	sp, #8
   bfe68:	b901      	cbnz	r1, bfe6c <__ascii_mbtowc+0x6>
   bfe6a:	a901      	add	r1, sp, #4
   bfe6c:	b142      	cbz	r2, bfe80 <__ascii_mbtowc+0x1a>
   bfe6e:	b14b      	cbz	r3, bfe84 <__ascii_mbtowc+0x1e>
   bfe70:	7813      	ldrb	r3, [r2, #0]
   bfe72:	600b      	str	r3, [r1, #0]
   bfe74:	7812      	ldrb	r2, [r2, #0]
   bfe76:	1e10      	subs	r0, r2, #0
   bfe78:	bf18      	it	ne
   bfe7a:	2001      	movne	r0, #1
   bfe7c:	b002      	add	sp, #8
   bfe7e:	4770      	bx	lr
   bfe80:	4610      	mov	r0, r2
   bfe82:	e7fb      	b.n	bfe7c <__ascii_mbtowc+0x16>
   bfe84:	f06f 0001 	mvn.w	r0, #1
   bfe88:	e7f8      	b.n	bfe7c <__ascii_mbtowc+0x16>
	...

000bfe8c <_Balloc>:
   bfe8c:	b570      	push	{r4, r5, r6, lr}
   bfe8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bfe90:	4604      	mov	r4, r0
   bfe92:	460d      	mov	r5, r1
   bfe94:	b976      	cbnz	r6, bfeb4 <_Balloc+0x28>
   bfe96:	2010      	movs	r0, #16
   bfe98:	f7f9 ff50 	bl	b9d3c <malloc>
   bfe9c:	4602      	mov	r2, r0
   bfe9e:	6260      	str	r0, [r4, #36]	; 0x24
   bfea0:	b920      	cbnz	r0, bfeac <_Balloc+0x20>
   bfea2:	4b18      	ldr	r3, [pc, #96]	; (bff04 <_Balloc+0x78>)
   bfea4:	4818      	ldr	r0, [pc, #96]	; (bff08 <_Balloc+0x7c>)
   bfea6:	2166      	movs	r1, #102	; 0x66
   bfea8:	f7f9 ff98 	bl	b9ddc <__assert_func>
   bfeac:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bfeb0:	6006      	str	r6, [r0, #0]
   bfeb2:	60c6      	str	r6, [r0, #12]
   bfeb4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bfeb6:	68f3      	ldr	r3, [r6, #12]
   bfeb8:	b183      	cbz	r3, bfedc <_Balloc+0x50>
   bfeba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bfebc:	68db      	ldr	r3, [r3, #12]
   bfebe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bfec2:	b9b8      	cbnz	r0, bfef4 <_Balloc+0x68>
   bfec4:	2101      	movs	r1, #1
   bfec6:	fa01 f605 	lsl.w	r6, r1, r5
   bfeca:	1d72      	adds	r2, r6, #5
   bfecc:	0092      	lsls	r2, r2, #2
   bfece:	4620      	mov	r0, r4
   bfed0:	f000 fc9d 	bl	c080e <_calloc_r>
   bfed4:	b160      	cbz	r0, bfef0 <_Balloc+0x64>
   bfed6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bfeda:	e00e      	b.n	bfefa <_Balloc+0x6e>
   bfedc:	2221      	movs	r2, #33	; 0x21
   bfede:	2104      	movs	r1, #4
   bfee0:	4620      	mov	r0, r4
   bfee2:	f000 fc94 	bl	c080e <_calloc_r>
   bfee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bfee8:	60f0      	str	r0, [r6, #12]
   bfeea:	68db      	ldr	r3, [r3, #12]
   bfeec:	2b00      	cmp	r3, #0
   bfeee:	d1e4      	bne.n	bfeba <_Balloc+0x2e>
   bfef0:	2000      	movs	r0, #0
   bfef2:	bd70      	pop	{r4, r5, r6, pc}
   bfef4:	6802      	ldr	r2, [r0, #0]
   bfef6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bfefa:	2300      	movs	r3, #0
   bfefc:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bff00:	e7f7      	b.n	bfef2 <_Balloc+0x66>
   bff02:	bf00      	nop
   bff04:	000c1d45 	.word	0x000c1d45
   bff08:	000c1fa0 	.word	0x000c1fa0

000bff0c <_Bfree>:
   bff0c:	b570      	push	{r4, r5, r6, lr}
   bff0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bff10:	4605      	mov	r5, r0
   bff12:	460c      	mov	r4, r1
   bff14:	b976      	cbnz	r6, bff34 <_Bfree+0x28>
   bff16:	2010      	movs	r0, #16
   bff18:	f7f9 ff10 	bl	b9d3c <malloc>
   bff1c:	4602      	mov	r2, r0
   bff1e:	6268      	str	r0, [r5, #36]	; 0x24
   bff20:	b920      	cbnz	r0, bff2c <_Bfree+0x20>
   bff22:	4b09      	ldr	r3, [pc, #36]	; (bff48 <_Bfree+0x3c>)
   bff24:	4809      	ldr	r0, [pc, #36]	; (bff4c <_Bfree+0x40>)
   bff26:	218a      	movs	r1, #138	; 0x8a
   bff28:	f7f9 ff58 	bl	b9ddc <__assert_func>
   bff2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bff30:	6006      	str	r6, [r0, #0]
   bff32:	60c6      	str	r6, [r0, #12]
   bff34:	b13c      	cbz	r4, bff46 <_Bfree+0x3a>
   bff36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bff38:	6862      	ldr	r2, [r4, #4]
   bff3a:	68db      	ldr	r3, [r3, #12]
   bff3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bff40:	6021      	str	r1, [r4, #0]
   bff42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bff46:	bd70      	pop	{r4, r5, r6, pc}
   bff48:	000c1d45 	.word	0x000c1d45
   bff4c:	000c1fa0 	.word	0x000c1fa0

000bff50 <__multadd>:
   bff50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bff54:	690d      	ldr	r5, [r1, #16]
   bff56:	4607      	mov	r7, r0
   bff58:	460c      	mov	r4, r1
   bff5a:	461e      	mov	r6, r3
   bff5c:	f101 0c14 	add.w	ip, r1, #20
   bff60:	2000      	movs	r0, #0
   bff62:	f8dc 3000 	ldr.w	r3, [ip]
   bff66:	b299      	uxth	r1, r3
   bff68:	fb02 6101 	mla	r1, r2, r1, r6
   bff6c:	0c1e      	lsrs	r6, r3, #16
   bff6e:	0c0b      	lsrs	r3, r1, #16
   bff70:	fb02 3306 	mla	r3, r2, r6, r3
   bff74:	b289      	uxth	r1, r1
   bff76:	3001      	adds	r0, #1
   bff78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bff7c:	4285      	cmp	r5, r0
   bff7e:	f84c 1b04 	str.w	r1, [ip], #4
   bff82:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bff86:	dcec      	bgt.n	bff62 <__multadd+0x12>
   bff88:	b30e      	cbz	r6, bffce <__multadd+0x7e>
   bff8a:	68a3      	ldr	r3, [r4, #8]
   bff8c:	42ab      	cmp	r3, r5
   bff8e:	dc19      	bgt.n	bffc4 <__multadd+0x74>
   bff90:	6861      	ldr	r1, [r4, #4]
   bff92:	4638      	mov	r0, r7
   bff94:	3101      	adds	r1, #1
   bff96:	f7ff ff79 	bl	bfe8c <_Balloc>
   bff9a:	4680      	mov	r8, r0
   bff9c:	b928      	cbnz	r0, bffaa <__multadd+0x5a>
   bff9e:	4602      	mov	r2, r0
   bffa0:	4b0c      	ldr	r3, [pc, #48]	; (bffd4 <__multadd+0x84>)
   bffa2:	480d      	ldr	r0, [pc, #52]	; (bffd8 <__multadd+0x88>)
   bffa4:	21b5      	movs	r1, #181	; 0xb5
   bffa6:	f7f9 ff19 	bl	b9ddc <__assert_func>
   bffaa:	6922      	ldr	r2, [r4, #16]
   bffac:	3202      	adds	r2, #2
   bffae:	f104 010c 	add.w	r1, r4, #12
   bffb2:	0092      	lsls	r2, r2, #2
   bffb4:	300c      	adds	r0, #12
   bffb6:	f7fe fbb0 	bl	be71a <memcpy>
   bffba:	4621      	mov	r1, r4
   bffbc:	4638      	mov	r0, r7
   bffbe:	f7ff ffa5 	bl	bff0c <_Bfree>
   bffc2:	4644      	mov	r4, r8
   bffc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bffc8:	3501      	adds	r5, #1
   bffca:	615e      	str	r6, [r3, #20]
   bffcc:	6125      	str	r5, [r4, #16]
   bffce:	4620      	mov	r0, r4
   bffd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bffd4:	000c1f19 	.word	0x000c1f19
   bffd8:	000c1fa0 	.word	0x000c1fa0

000bffdc <__s2b>:
   bffdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bffe0:	460c      	mov	r4, r1
   bffe2:	4615      	mov	r5, r2
   bffe4:	461f      	mov	r7, r3
   bffe6:	2209      	movs	r2, #9
   bffe8:	3308      	adds	r3, #8
   bffea:	4606      	mov	r6, r0
   bffec:	fb93 f3f2 	sdiv	r3, r3, r2
   bfff0:	2100      	movs	r1, #0
   bfff2:	2201      	movs	r2, #1
   bfff4:	429a      	cmp	r2, r3
   bfff6:	db09      	blt.n	c000c <__s2b+0x30>
   bfff8:	4630      	mov	r0, r6
   bfffa:	f7ff ff47 	bl	bfe8c <_Balloc>
   bfffe:	b940      	cbnz	r0, c0012 <__s2b+0x36>
   c0000:	4602      	mov	r2, r0
   c0002:	4b19      	ldr	r3, [pc, #100]	; (c0068 <__s2b+0x8c>)
   c0004:	4819      	ldr	r0, [pc, #100]	; (c006c <__s2b+0x90>)
   c0006:	21ce      	movs	r1, #206	; 0xce
   c0008:	f7f9 fee8 	bl	b9ddc <__assert_func>
   c000c:	0052      	lsls	r2, r2, #1
   c000e:	3101      	adds	r1, #1
   c0010:	e7f0      	b.n	bfff4 <__s2b+0x18>
   c0012:	9b08      	ldr	r3, [sp, #32]
   c0014:	6143      	str	r3, [r0, #20]
   c0016:	2d09      	cmp	r5, #9
   c0018:	f04f 0301 	mov.w	r3, #1
   c001c:	6103      	str	r3, [r0, #16]
   c001e:	dd16      	ble.n	c004e <__s2b+0x72>
   c0020:	f104 0909 	add.w	r9, r4, #9
   c0024:	46c8      	mov	r8, r9
   c0026:	442c      	add	r4, r5
   c0028:	f818 3b01 	ldrb.w	r3, [r8], #1
   c002c:	4601      	mov	r1, r0
   c002e:	3b30      	subs	r3, #48	; 0x30
   c0030:	220a      	movs	r2, #10
   c0032:	4630      	mov	r0, r6
   c0034:	f7ff ff8c 	bl	bff50 <__multadd>
   c0038:	45a0      	cmp	r8, r4
   c003a:	d1f5      	bne.n	c0028 <__s2b+0x4c>
   c003c:	f1a5 0408 	sub.w	r4, r5, #8
   c0040:	444c      	add	r4, r9
   c0042:	1b2d      	subs	r5, r5, r4
   c0044:	1963      	adds	r3, r4, r5
   c0046:	42bb      	cmp	r3, r7
   c0048:	db04      	blt.n	c0054 <__s2b+0x78>
   c004a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c004e:	340a      	adds	r4, #10
   c0050:	2509      	movs	r5, #9
   c0052:	e7f6      	b.n	c0042 <__s2b+0x66>
   c0054:	f814 3b01 	ldrb.w	r3, [r4], #1
   c0058:	4601      	mov	r1, r0
   c005a:	3b30      	subs	r3, #48	; 0x30
   c005c:	220a      	movs	r2, #10
   c005e:	4630      	mov	r0, r6
   c0060:	f7ff ff76 	bl	bff50 <__multadd>
   c0064:	e7ee      	b.n	c0044 <__s2b+0x68>
   c0066:	bf00      	nop
   c0068:	000c1f19 	.word	0x000c1f19
   c006c:	000c1fa0 	.word	0x000c1fa0

000c0070 <__hi0bits>:
   c0070:	0c03      	lsrs	r3, r0, #16
   c0072:	041b      	lsls	r3, r3, #16
   c0074:	b9d3      	cbnz	r3, c00ac <__hi0bits+0x3c>
   c0076:	0400      	lsls	r0, r0, #16
   c0078:	2310      	movs	r3, #16
   c007a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c007e:	bf04      	itt	eq
   c0080:	0200      	lsleq	r0, r0, #8
   c0082:	3308      	addeq	r3, #8
   c0084:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c0088:	bf04      	itt	eq
   c008a:	0100      	lsleq	r0, r0, #4
   c008c:	3304      	addeq	r3, #4
   c008e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c0092:	bf04      	itt	eq
   c0094:	0080      	lsleq	r0, r0, #2
   c0096:	3302      	addeq	r3, #2
   c0098:	2800      	cmp	r0, #0
   c009a:	db05      	blt.n	c00a8 <__hi0bits+0x38>
   c009c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c00a0:	f103 0301 	add.w	r3, r3, #1
   c00a4:	bf08      	it	eq
   c00a6:	2320      	moveq	r3, #32
   c00a8:	4618      	mov	r0, r3
   c00aa:	4770      	bx	lr
   c00ac:	2300      	movs	r3, #0
   c00ae:	e7e4      	b.n	c007a <__hi0bits+0xa>

000c00b0 <__lo0bits>:
   c00b0:	6803      	ldr	r3, [r0, #0]
   c00b2:	f013 0207 	ands.w	r2, r3, #7
   c00b6:	4601      	mov	r1, r0
   c00b8:	d00b      	beq.n	c00d2 <__lo0bits+0x22>
   c00ba:	07da      	lsls	r2, r3, #31
   c00bc:	d423      	bmi.n	c0106 <__lo0bits+0x56>
   c00be:	0798      	lsls	r0, r3, #30
   c00c0:	bf49      	itett	mi
   c00c2:	085b      	lsrmi	r3, r3, #1
   c00c4:	089b      	lsrpl	r3, r3, #2
   c00c6:	2001      	movmi	r0, #1
   c00c8:	600b      	strmi	r3, [r1, #0]
   c00ca:	bf5c      	itt	pl
   c00cc:	600b      	strpl	r3, [r1, #0]
   c00ce:	2002      	movpl	r0, #2
   c00d0:	4770      	bx	lr
   c00d2:	b298      	uxth	r0, r3
   c00d4:	b9a8      	cbnz	r0, c0102 <__lo0bits+0x52>
   c00d6:	0c1b      	lsrs	r3, r3, #16
   c00d8:	2010      	movs	r0, #16
   c00da:	b2da      	uxtb	r2, r3
   c00dc:	b90a      	cbnz	r2, c00e2 <__lo0bits+0x32>
   c00de:	3008      	adds	r0, #8
   c00e0:	0a1b      	lsrs	r3, r3, #8
   c00e2:	071a      	lsls	r2, r3, #28
   c00e4:	bf04      	itt	eq
   c00e6:	091b      	lsreq	r3, r3, #4
   c00e8:	3004      	addeq	r0, #4
   c00ea:	079a      	lsls	r2, r3, #30
   c00ec:	bf04      	itt	eq
   c00ee:	089b      	lsreq	r3, r3, #2
   c00f0:	3002      	addeq	r0, #2
   c00f2:	07da      	lsls	r2, r3, #31
   c00f4:	d403      	bmi.n	c00fe <__lo0bits+0x4e>
   c00f6:	085b      	lsrs	r3, r3, #1
   c00f8:	f100 0001 	add.w	r0, r0, #1
   c00fc:	d005      	beq.n	c010a <__lo0bits+0x5a>
   c00fe:	600b      	str	r3, [r1, #0]
   c0100:	4770      	bx	lr
   c0102:	4610      	mov	r0, r2
   c0104:	e7e9      	b.n	c00da <__lo0bits+0x2a>
   c0106:	2000      	movs	r0, #0
   c0108:	4770      	bx	lr
   c010a:	2020      	movs	r0, #32
   c010c:	4770      	bx	lr
	...

000c0110 <__i2b>:
   c0110:	b510      	push	{r4, lr}
   c0112:	460c      	mov	r4, r1
   c0114:	2101      	movs	r1, #1
   c0116:	f7ff feb9 	bl	bfe8c <_Balloc>
   c011a:	4602      	mov	r2, r0
   c011c:	b928      	cbnz	r0, c012a <__i2b+0x1a>
   c011e:	4b05      	ldr	r3, [pc, #20]	; (c0134 <__i2b+0x24>)
   c0120:	4805      	ldr	r0, [pc, #20]	; (c0138 <__i2b+0x28>)
   c0122:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c0126:	f7f9 fe59 	bl	b9ddc <__assert_func>
   c012a:	2301      	movs	r3, #1
   c012c:	6144      	str	r4, [r0, #20]
   c012e:	6103      	str	r3, [r0, #16]
   c0130:	bd10      	pop	{r4, pc}
   c0132:	bf00      	nop
   c0134:	000c1f19 	.word	0x000c1f19
   c0138:	000c1fa0 	.word	0x000c1fa0

000c013c <__multiply>:
   c013c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0140:	4691      	mov	r9, r2
   c0142:	690a      	ldr	r2, [r1, #16]
   c0144:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c0148:	429a      	cmp	r2, r3
   c014a:	bfb8      	it	lt
   c014c:	460b      	movlt	r3, r1
   c014e:	460c      	mov	r4, r1
   c0150:	bfbc      	itt	lt
   c0152:	464c      	movlt	r4, r9
   c0154:	4699      	movlt	r9, r3
   c0156:	6927      	ldr	r7, [r4, #16]
   c0158:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c015c:	68a3      	ldr	r3, [r4, #8]
   c015e:	6861      	ldr	r1, [r4, #4]
   c0160:	eb07 060a 	add.w	r6, r7, sl
   c0164:	42b3      	cmp	r3, r6
   c0166:	b085      	sub	sp, #20
   c0168:	bfb8      	it	lt
   c016a:	3101      	addlt	r1, #1
   c016c:	f7ff fe8e 	bl	bfe8c <_Balloc>
   c0170:	b930      	cbnz	r0, c0180 <__multiply+0x44>
   c0172:	4602      	mov	r2, r0
   c0174:	4b44      	ldr	r3, [pc, #272]	; (c0288 <__multiply+0x14c>)
   c0176:	4845      	ldr	r0, [pc, #276]	; (c028c <__multiply+0x150>)
   c0178:	f240 115d 	movw	r1, #349	; 0x15d
   c017c:	f7f9 fe2e 	bl	b9ddc <__assert_func>
   c0180:	f100 0514 	add.w	r5, r0, #20
   c0184:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c0188:	462b      	mov	r3, r5
   c018a:	2200      	movs	r2, #0
   c018c:	4543      	cmp	r3, r8
   c018e:	d321      	bcc.n	c01d4 <__multiply+0x98>
   c0190:	f104 0314 	add.w	r3, r4, #20
   c0194:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c0198:	f109 0314 	add.w	r3, r9, #20
   c019c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c01a0:	9202      	str	r2, [sp, #8]
   c01a2:	1b3a      	subs	r2, r7, r4
   c01a4:	3a15      	subs	r2, #21
   c01a6:	f022 0203 	bic.w	r2, r2, #3
   c01aa:	3204      	adds	r2, #4
   c01ac:	f104 0115 	add.w	r1, r4, #21
   c01b0:	428f      	cmp	r7, r1
   c01b2:	bf38      	it	cc
   c01b4:	2204      	movcc	r2, #4
   c01b6:	9201      	str	r2, [sp, #4]
   c01b8:	9a02      	ldr	r2, [sp, #8]
   c01ba:	9303      	str	r3, [sp, #12]
   c01bc:	429a      	cmp	r2, r3
   c01be:	d80c      	bhi.n	c01da <__multiply+0x9e>
   c01c0:	2e00      	cmp	r6, #0
   c01c2:	dd03      	ble.n	c01cc <__multiply+0x90>
   c01c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c01c8:	2b00      	cmp	r3, #0
   c01ca:	d05a      	beq.n	c0282 <__multiply+0x146>
   c01cc:	6106      	str	r6, [r0, #16]
   c01ce:	b005      	add	sp, #20
   c01d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c01d4:	f843 2b04 	str.w	r2, [r3], #4
   c01d8:	e7d8      	b.n	c018c <__multiply+0x50>
   c01da:	f8b3 a000 	ldrh.w	sl, [r3]
   c01de:	f1ba 0f00 	cmp.w	sl, #0
   c01e2:	d024      	beq.n	c022e <__multiply+0xf2>
   c01e4:	f104 0e14 	add.w	lr, r4, #20
   c01e8:	46a9      	mov	r9, r5
   c01ea:	f04f 0c00 	mov.w	ip, #0
   c01ee:	f85e 2b04 	ldr.w	r2, [lr], #4
   c01f2:	f8d9 1000 	ldr.w	r1, [r9]
   c01f6:	fa1f fb82 	uxth.w	fp, r2
   c01fa:	b289      	uxth	r1, r1
   c01fc:	fb0a 110b 	mla	r1, sl, fp, r1
   c0200:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c0204:	f8d9 2000 	ldr.w	r2, [r9]
   c0208:	4461      	add	r1, ip
   c020a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c020e:	fb0a c20b 	mla	r2, sl, fp, ip
   c0212:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c0216:	b289      	uxth	r1, r1
   c0218:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c021c:	4577      	cmp	r7, lr
   c021e:	f849 1b04 	str.w	r1, [r9], #4
   c0222:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c0226:	d8e2      	bhi.n	c01ee <__multiply+0xb2>
   c0228:	9a01      	ldr	r2, [sp, #4]
   c022a:	f845 c002 	str.w	ip, [r5, r2]
   c022e:	9a03      	ldr	r2, [sp, #12]
   c0230:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c0234:	3304      	adds	r3, #4
   c0236:	f1b9 0f00 	cmp.w	r9, #0
   c023a:	d020      	beq.n	c027e <__multiply+0x142>
   c023c:	6829      	ldr	r1, [r5, #0]
   c023e:	f104 0c14 	add.w	ip, r4, #20
   c0242:	46ae      	mov	lr, r5
   c0244:	f04f 0a00 	mov.w	sl, #0
   c0248:	f8bc b000 	ldrh.w	fp, [ip]
   c024c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c0250:	fb09 220b 	mla	r2, r9, fp, r2
   c0254:	4492      	add	sl, r2
   c0256:	b289      	uxth	r1, r1
   c0258:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c025c:	f84e 1b04 	str.w	r1, [lr], #4
   c0260:	f85c 2b04 	ldr.w	r2, [ip], #4
   c0264:	f8be 1000 	ldrh.w	r1, [lr]
   c0268:	0c12      	lsrs	r2, r2, #16
   c026a:	fb09 1102 	mla	r1, r9, r2, r1
   c026e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c0272:	4567      	cmp	r7, ip
   c0274:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c0278:	d8e6      	bhi.n	c0248 <__multiply+0x10c>
   c027a:	9a01      	ldr	r2, [sp, #4]
   c027c:	50a9      	str	r1, [r5, r2]
   c027e:	3504      	adds	r5, #4
   c0280:	e79a      	b.n	c01b8 <__multiply+0x7c>
   c0282:	3e01      	subs	r6, #1
   c0284:	e79c      	b.n	c01c0 <__multiply+0x84>
   c0286:	bf00      	nop
   c0288:	000c1f19 	.word	0x000c1f19
   c028c:	000c1fa0 	.word	0x000c1fa0

000c0290 <__pow5mult>:
   c0290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c0294:	4615      	mov	r5, r2
   c0296:	f012 0203 	ands.w	r2, r2, #3
   c029a:	4606      	mov	r6, r0
   c029c:	460f      	mov	r7, r1
   c029e:	d007      	beq.n	c02b0 <__pow5mult+0x20>
   c02a0:	4c25      	ldr	r4, [pc, #148]	; (c0338 <__pow5mult+0xa8>)
   c02a2:	3a01      	subs	r2, #1
   c02a4:	2300      	movs	r3, #0
   c02a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c02aa:	f7ff fe51 	bl	bff50 <__multadd>
   c02ae:	4607      	mov	r7, r0
   c02b0:	10ad      	asrs	r5, r5, #2
   c02b2:	d03d      	beq.n	c0330 <__pow5mult+0xa0>
   c02b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c02b6:	b97c      	cbnz	r4, c02d8 <__pow5mult+0x48>
   c02b8:	2010      	movs	r0, #16
   c02ba:	f7f9 fd3f 	bl	b9d3c <malloc>
   c02be:	4602      	mov	r2, r0
   c02c0:	6270      	str	r0, [r6, #36]	; 0x24
   c02c2:	b928      	cbnz	r0, c02d0 <__pow5mult+0x40>
   c02c4:	4b1d      	ldr	r3, [pc, #116]	; (c033c <__pow5mult+0xac>)
   c02c6:	481e      	ldr	r0, [pc, #120]	; (c0340 <__pow5mult+0xb0>)
   c02c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c02cc:	f7f9 fd86 	bl	b9ddc <__assert_func>
   c02d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c02d4:	6004      	str	r4, [r0, #0]
   c02d6:	60c4      	str	r4, [r0, #12]
   c02d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c02dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c02e0:	b94c      	cbnz	r4, c02f6 <__pow5mult+0x66>
   c02e2:	f240 2171 	movw	r1, #625	; 0x271
   c02e6:	4630      	mov	r0, r6
   c02e8:	f7ff ff12 	bl	c0110 <__i2b>
   c02ec:	2300      	movs	r3, #0
   c02ee:	f8c8 0008 	str.w	r0, [r8, #8]
   c02f2:	4604      	mov	r4, r0
   c02f4:	6003      	str	r3, [r0, #0]
   c02f6:	f04f 0900 	mov.w	r9, #0
   c02fa:	07eb      	lsls	r3, r5, #31
   c02fc:	d50a      	bpl.n	c0314 <__pow5mult+0x84>
   c02fe:	4639      	mov	r1, r7
   c0300:	4622      	mov	r2, r4
   c0302:	4630      	mov	r0, r6
   c0304:	f7ff ff1a 	bl	c013c <__multiply>
   c0308:	4639      	mov	r1, r7
   c030a:	4680      	mov	r8, r0
   c030c:	4630      	mov	r0, r6
   c030e:	f7ff fdfd 	bl	bff0c <_Bfree>
   c0312:	4647      	mov	r7, r8
   c0314:	106d      	asrs	r5, r5, #1
   c0316:	d00b      	beq.n	c0330 <__pow5mult+0xa0>
   c0318:	6820      	ldr	r0, [r4, #0]
   c031a:	b938      	cbnz	r0, c032c <__pow5mult+0x9c>
   c031c:	4622      	mov	r2, r4
   c031e:	4621      	mov	r1, r4
   c0320:	4630      	mov	r0, r6
   c0322:	f7ff ff0b 	bl	c013c <__multiply>
   c0326:	6020      	str	r0, [r4, #0]
   c0328:	f8c0 9000 	str.w	r9, [r0]
   c032c:	4604      	mov	r4, r0
   c032e:	e7e4      	b.n	c02fa <__pow5mult+0x6a>
   c0330:	4638      	mov	r0, r7
   c0332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c0336:	bf00      	nop
   c0338:	000c20f0 	.word	0x000c20f0
   c033c:	000c1d45 	.word	0x000c1d45
   c0340:	000c1fa0 	.word	0x000c1fa0

000c0344 <__lshift>:
   c0344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c0348:	460c      	mov	r4, r1
   c034a:	6849      	ldr	r1, [r1, #4]
   c034c:	6923      	ldr	r3, [r4, #16]
   c034e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c0352:	68a3      	ldr	r3, [r4, #8]
   c0354:	4607      	mov	r7, r0
   c0356:	4691      	mov	r9, r2
   c0358:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c035c:	f108 0601 	add.w	r6, r8, #1
   c0360:	42b3      	cmp	r3, r6
   c0362:	db0b      	blt.n	c037c <__lshift+0x38>
   c0364:	4638      	mov	r0, r7
   c0366:	f7ff fd91 	bl	bfe8c <_Balloc>
   c036a:	4605      	mov	r5, r0
   c036c:	b948      	cbnz	r0, c0382 <__lshift+0x3e>
   c036e:	4602      	mov	r2, r0
   c0370:	4b2a      	ldr	r3, [pc, #168]	; (c041c <__lshift+0xd8>)
   c0372:	482b      	ldr	r0, [pc, #172]	; (c0420 <__lshift+0xdc>)
   c0374:	f240 11d9 	movw	r1, #473	; 0x1d9
   c0378:	f7f9 fd30 	bl	b9ddc <__assert_func>
   c037c:	3101      	adds	r1, #1
   c037e:	005b      	lsls	r3, r3, #1
   c0380:	e7ee      	b.n	c0360 <__lshift+0x1c>
   c0382:	2300      	movs	r3, #0
   c0384:	f100 0114 	add.w	r1, r0, #20
   c0388:	f100 0210 	add.w	r2, r0, #16
   c038c:	4618      	mov	r0, r3
   c038e:	4553      	cmp	r3, sl
   c0390:	db37      	blt.n	c0402 <__lshift+0xbe>
   c0392:	6920      	ldr	r0, [r4, #16]
   c0394:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c0398:	f104 0314 	add.w	r3, r4, #20
   c039c:	f019 091f 	ands.w	r9, r9, #31
   c03a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c03a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c03a8:	d02f      	beq.n	c040a <__lshift+0xc6>
   c03aa:	f1c9 0e20 	rsb	lr, r9, #32
   c03ae:	468a      	mov	sl, r1
   c03b0:	f04f 0c00 	mov.w	ip, #0
   c03b4:	681a      	ldr	r2, [r3, #0]
   c03b6:	fa02 f209 	lsl.w	r2, r2, r9
   c03ba:	ea42 020c 	orr.w	r2, r2, ip
   c03be:	f84a 2b04 	str.w	r2, [sl], #4
   c03c2:	f853 2b04 	ldr.w	r2, [r3], #4
   c03c6:	4298      	cmp	r0, r3
   c03c8:	fa22 fc0e 	lsr.w	ip, r2, lr
   c03cc:	d8f2      	bhi.n	c03b4 <__lshift+0x70>
   c03ce:	1b03      	subs	r3, r0, r4
   c03d0:	3b15      	subs	r3, #21
   c03d2:	f023 0303 	bic.w	r3, r3, #3
   c03d6:	3304      	adds	r3, #4
   c03d8:	f104 0215 	add.w	r2, r4, #21
   c03dc:	4290      	cmp	r0, r2
   c03de:	bf38      	it	cc
   c03e0:	2304      	movcc	r3, #4
   c03e2:	f841 c003 	str.w	ip, [r1, r3]
   c03e6:	f1bc 0f00 	cmp.w	ip, #0
   c03ea:	d001      	beq.n	c03f0 <__lshift+0xac>
   c03ec:	f108 0602 	add.w	r6, r8, #2
   c03f0:	3e01      	subs	r6, #1
   c03f2:	4638      	mov	r0, r7
   c03f4:	612e      	str	r6, [r5, #16]
   c03f6:	4621      	mov	r1, r4
   c03f8:	f7ff fd88 	bl	bff0c <_Bfree>
   c03fc:	4628      	mov	r0, r5
   c03fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c0402:	f842 0f04 	str.w	r0, [r2, #4]!
   c0406:	3301      	adds	r3, #1
   c0408:	e7c1      	b.n	c038e <__lshift+0x4a>
   c040a:	3904      	subs	r1, #4
   c040c:	f853 2b04 	ldr.w	r2, [r3], #4
   c0410:	f841 2f04 	str.w	r2, [r1, #4]!
   c0414:	4298      	cmp	r0, r3
   c0416:	d8f9      	bhi.n	c040c <__lshift+0xc8>
   c0418:	e7ea      	b.n	c03f0 <__lshift+0xac>
   c041a:	bf00      	nop
   c041c:	000c1f19 	.word	0x000c1f19
   c0420:	000c1fa0 	.word	0x000c1fa0

000c0424 <__mcmp>:
   c0424:	b530      	push	{r4, r5, lr}
   c0426:	6902      	ldr	r2, [r0, #16]
   c0428:	690c      	ldr	r4, [r1, #16]
   c042a:	1b12      	subs	r2, r2, r4
   c042c:	d10e      	bne.n	c044c <__mcmp+0x28>
   c042e:	f100 0314 	add.w	r3, r0, #20
   c0432:	3114      	adds	r1, #20
   c0434:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c0438:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c043c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c0440:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c0444:	42a5      	cmp	r5, r4
   c0446:	d003      	beq.n	c0450 <__mcmp+0x2c>
   c0448:	d305      	bcc.n	c0456 <__mcmp+0x32>
   c044a:	2201      	movs	r2, #1
   c044c:	4610      	mov	r0, r2
   c044e:	bd30      	pop	{r4, r5, pc}
   c0450:	4283      	cmp	r3, r0
   c0452:	d3f3      	bcc.n	c043c <__mcmp+0x18>
   c0454:	e7fa      	b.n	c044c <__mcmp+0x28>
   c0456:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c045a:	e7f7      	b.n	c044c <__mcmp+0x28>

000c045c <__mdiff>:
   c045c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0460:	460c      	mov	r4, r1
   c0462:	4606      	mov	r6, r0
   c0464:	4611      	mov	r1, r2
   c0466:	4620      	mov	r0, r4
   c0468:	4690      	mov	r8, r2
   c046a:	f7ff ffdb 	bl	c0424 <__mcmp>
   c046e:	1e05      	subs	r5, r0, #0
   c0470:	d110      	bne.n	c0494 <__mdiff+0x38>
   c0472:	4629      	mov	r1, r5
   c0474:	4630      	mov	r0, r6
   c0476:	f7ff fd09 	bl	bfe8c <_Balloc>
   c047a:	b930      	cbnz	r0, c048a <__mdiff+0x2e>
   c047c:	4b3a      	ldr	r3, [pc, #232]	; (c0568 <__mdiff+0x10c>)
   c047e:	4602      	mov	r2, r0
   c0480:	f240 2132 	movw	r1, #562	; 0x232
   c0484:	4839      	ldr	r0, [pc, #228]	; (c056c <__mdiff+0x110>)
   c0486:	f7f9 fca9 	bl	b9ddc <__assert_func>
   c048a:	2301      	movs	r3, #1
   c048c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c0490:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c0494:	bfa4      	itt	ge
   c0496:	4643      	movge	r3, r8
   c0498:	46a0      	movge	r8, r4
   c049a:	4630      	mov	r0, r6
   c049c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c04a0:	bfa6      	itte	ge
   c04a2:	461c      	movge	r4, r3
   c04a4:	2500      	movge	r5, #0
   c04a6:	2501      	movlt	r5, #1
   c04a8:	f7ff fcf0 	bl	bfe8c <_Balloc>
   c04ac:	b920      	cbnz	r0, c04b8 <__mdiff+0x5c>
   c04ae:	4b2e      	ldr	r3, [pc, #184]	; (c0568 <__mdiff+0x10c>)
   c04b0:	4602      	mov	r2, r0
   c04b2:	f44f 7110 	mov.w	r1, #576	; 0x240
   c04b6:	e7e5      	b.n	c0484 <__mdiff+0x28>
   c04b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c04bc:	6926      	ldr	r6, [r4, #16]
   c04be:	60c5      	str	r5, [r0, #12]
   c04c0:	f104 0914 	add.w	r9, r4, #20
   c04c4:	f108 0514 	add.w	r5, r8, #20
   c04c8:	f100 0e14 	add.w	lr, r0, #20
   c04cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c04d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c04d4:	f108 0210 	add.w	r2, r8, #16
   c04d8:	46f2      	mov	sl, lr
   c04da:	2100      	movs	r1, #0
   c04dc:	f859 3b04 	ldr.w	r3, [r9], #4
   c04e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c04e4:	fa1f f883 	uxth.w	r8, r3
   c04e8:	fa11 f18b 	uxtah	r1, r1, fp
   c04ec:	0c1b      	lsrs	r3, r3, #16
   c04ee:	eba1 0808 	sub.w	r8, r1, r8
   c04f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c04f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c04fa:	fa1f f888 	uxth.w	r8, r8
   c04fe:	1419      	asrs	r1, r3, #16
   c0500:	454e      	cmp	r6, r9
   c0502:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c0506:	f84a 3b04 	str.w	r3, [sl], #4
   c050a:	d8e7      	bhi.n	c04dc <__mdiff+0x80>
   c050c:	1b33      	subs	r3, r6, r4
   c050e:	3b15      	subs	r3, #21
   c0510:	f023 0303 	bic.w	r3, r3, #3
   c0514:	3304      	adds	r3, #4
   c0516:	3415      	adds	r4, #21
   c0518:	42a6      	cmp	r6, r4
   c051a:	bf38      	it	cc
   c051c:	2304      	movcc	r3, #4
   c051e:	441d      	add	r5, r3
   c0520:	4473      	add	r3, lr
   c0522:	469e      	mov	lr, r3
   c0524:	462e      	mov	r6, r5
   c0526:	4566      	cmp	r6, ip
   c0528:	d30e      	bcc.n	c0548 <__mdiff+0xec>
   c052a:	f10c 0203 	add.w	r2, ip, #3
   c052e:	1b52      	subs	r2, r2, r5
   c0530:	f022 0203 	bic.w	r2, r2, #3
   c0534:	3d03      	subs	r5, #3
   c0536:	45ac      	cmp	ip, r5
   c0538:	bf38      	it	cc
   c053a:	2200      	movcc	r2, #0
   c053c:	441a      	add	r2, r3
   c053e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c0542:	b17b      	cbz	r3, c0564 <__mdiff+0x108>
   c0544:	6107      	str	r7, [r0, #16]
   c0546:	e7a3      	b.n	c0490 <__mdiff+0x34>
   c0548:	f856 8b04 	ldr.w	r8, [r6], #4
   c054c:	fa11 f288 	uxtah	r2, r1, r8
   c0550:	1414      	asrs	r4, r2, #16
   c0552:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c0556:	b292      	uxth	r2, r2
   c0558:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c055c:	f84e 2b04 	str.w	r2, [lr], #4
   c0560:	1421      	asrs	r1, r4, #16
   c0562:	e7e0      	b.n	c0526 <__mdiff+0xca>
   c0564:	3f01      	subs	r7, #1
   c0566:	e7ea      	b.n	c053e <__mdiff+0xe2>
   c0568:	000c1f19 	.word	0x000c1f19
   c056c:	000c1fa0 	.word	0x000c1fa0

000c0570 <__ulp>:
   c0570:	b082      	sub	sp, #8
   c0572:	ed8d 0b00 	vstr	d0, [sp]
   c0576:	9b01      	ldr	r3, [sp, #4]
   c0578:	4912      	ldr	r1, [pc, #72]	; (c05c4 <__ulp+0x54>)
   c057a:	4019      	ands	r1, r3
   c057c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c0580:	2900      	cmp	r1, #0
   c0582:	dd05      	ble.n	c0590 <__ulp+0x20>
   c0584:	2200      	movs	r2, #0
   c0586:	460b      	mov	r3, r1
   c0588:	ec43 2b10 	vmov	d0, r2, r3
   c058c:	b002      	add	sp, #8
   c058e:	4770      	bx	lr
   c0590:	4249      	negs	r1, r1
   c0592:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c0596:	ea4f 5021 	mov.w	r0, r1, asr #20
   c059a:	f04f 0200 	mov.w	r2, #0
   c059e:	f04f 0300 	mov.w	r3, #0
   c05a2:	da04      	bge.n	c05ae <__ulp+0x3e>
   c05a4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c05a8:	fa41 f300 	asr.w	r3, r1, r0
   c05ac:	e7ec      	b.n	c0588 <__ulp+0x18>
   c05ae:	f1a0 0114 	sub.w	r1, r0, #20
   c05b2:	291e      	cmp	r1, #30
   c05b4:	bfda      	itte	le
   c05b6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c05ba:	fa20 f101 	lsrle.w	r1, r0, r1
   c05be:	2101      	movgt	r1, #1
   c05c0:	460a      	mov	r2, r1
   c05c2:	e7e1      	b.n	c0588 <__ulp+0x18>
   c05c4:	7ff00000 	.word	0x7ff00000

000c05c8 <__b2d>:
   c05c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c05ca:	6905      	ldr	r5, [r0, #16]
   c05cc:	f100 0714 	add.w	r7, r0, #20
   c05d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c05d4:	1f2e      	subs	r6, r5, #4
   c05d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c05da:	4620      	mov	r0, r4
   c05dc:	f7ff fd48 	bl	c0070 <__hi0bits>
   c05e0:	f1c0 0320 	rsb	r3, r0, #32
   c05e4:	280a      	cmp	r0, #10
   c05e6:	f8df c07c 	ldr.w	ip, [pc, #124]	; c0664 <__b2d+0x9c>
   c05ea:	600b      	str	r3, [r1, #0]
   c05ec:	dc14      	bgt.n	c0618 <__b2d+0x50>
   c05ee:	f1c0 0e0b 	rsb	lr, r0, #11
   c05f2:	fa24 f10e 	lsr.w	r1, r4, lr
   c05f6:	42b7      	cmp	r7, r6
   c05f8:	ea41 030c 	orr.w	r3, r1, ip
   c05fc:	bf34      	ite	cc
   c05fe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c0602:	2100      	movcs	r1, #0
   c0604:	3015      	adds	r0, #21
   c0606:	fa04 f000 	lsl.w	r0, r4, r0
   c060a:	fa21 f10e 	lsr.w	r1, r1, lr
   c060e:	ea40 0201 	orr.w	r2, r0, r1
   c0612:	ec43 2b10 	vmov	d0, r2, r3
   c0616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c0618:	42b7      	cmp	r7, r6
   c061a:	bf3a      	itte	cc
   c061c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c0620:	f1a5 0608 	subcc.w	r6, r5, #8
   c0624:	2100      	movcs	r1, #0
   c0626:	380b      	subs	r0, #11
   c0628:	d017      	beq.n	c065a <__b2d+0x92>
   c062a:	f1c0 0c20 	rsb	ip, r0, #32
   c062e:	fa04 f500 	lsl.w	r5, r4, r0
   c0632:	42be      	cmp	r6, r7
   c0634:	fa21 f40c 	lsr.w	r4, r1, ip
   c0638:	ea45 0504 	orr.w	r5, r5, r4
   c063c:	bf8c      	ite	hi
   c063e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c0642:	2400      	movls	r4, #0
   c0644:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c0648:	fa01 f000 	lsl.w	r0, r1, r0
   c064c:	fa24 f40c 	lsr.w	r4, r4, ip
   c0650:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c0654:	ea40 0204 	orr.w	r2, r0, r4
   c0658:	e7db      	b.n	c0612 <__b2d+0x4a>
   c065a:	ea44 030c 	orr.w	r3, r4, ip
   c065e:	460a      	mov	r2, r1
   c0660:	e7d7      	b.n	c0612 <__b2d+0x4a>
   c0662:	bf00      	nop
   c0664:	3ff00000 	.word	0x3ff00000

000c0668 <__d2b>:
   c0668:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c066c:	4689      	mov	r9, r1
   c066e:	2101      	movs	r1, #1
   c0670:	ec57 6b10 	vmov	r6, r7, d0
   c0674:	4690      	mov	r8, r2
   c0676:	f7ff fc09 	bl	bfe8c <_Balloc>
   c067a:	4604      	mov	r4, r0
   c067c:	b930      	cbnz	r0, c068c <__d2b+0x24>
   c067e:	4602      	mov	r2, r0
   c0680:	4b25      	ldr	r3, [pc, #148]	; (c0718 <__d2b+0xb0>)
   c0682:	4826      	ldr	r0, [pc, #152]	; (c071c <__d2b+0xb4>)
   c0684:	f240 310a 	movw	r1, #778	; 0x30a
   c0688:	f7f9 fba8 	bl	b9ddc <__assert_func>
   c068c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c0690:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c0694:	bb35      	cbnz	r5, c06e4 <__d2b+0x7c>
   c0696:	2e00      	cmp	r6, #0
   c0698:	9301      	str	r3, [sp, #4]
   c069a:	d028      	beq.n	c06ee <__d2b+0x86>
   c069c:	4668      	mov	r0, sp
   c069e:	9600      	str	r6, [sp, #0]
   c06a0:	f7ff fd06 	bl	c00b0 <__lo0bits>
   c06a4:	9900      	ldr	r1, [sp, #0]
   c06a6:	b300      	cbz	r0, c06ea <__d2b+0x82>
   c06a8:	9a01      	ldr	r2, [sp, #4]
   c06aa:	f1c0 0320 	rsb	r3, r0, #32
   c06ae:	fa02 f303 	lsl.w	r3, r2, r3
   c06b2:	430b      	orrs	r3, r1
   c06b4:	40c2      	lsrs	r2, r0
   c06b6:	6163      	str	r3, [r4, #20]
   c06b8:	9201      	str	r2, [sp, #4]
   c06ba:	9b01      	ldr	r3, [sp, #4]
   c06bc:	61a3      	str	r3, [r4, #24]
   c06be:	2b00      	cmp	r3, #0
   c06c0:	bf14      	ite	ne
   c06c2:	2202      	movne	r2, #2
   c06c4:	2201      	moveq	r2, #1
   c06c6:	6122      	str	r2, [r4, #16]
   c06c8:	b1d5      	cbz	r5, c0700 <__d2b+0x98>
   c06ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c06ce:	4405      	add	r5, r0
   c06d0:	f8c9 5000 	str.w	r5, [r9]
   c06d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c06d8:	f8c8 0000 	str.w	r0, [r8]
   c06dc:	4620      	mov	r0, r4
   c06de:	b003      	add	sp, #12
   c06e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c06e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c06e8:	e7d5      	b.n	c0696 <__d2b+0x2e>
   c06ea:	6161      	str	r1, [r4, #20]
   c06ec:	e7e5      	b.n	c06ba <__d2b+0x52>
   c06ee:	a801      	add	r0, sp, #4
   c06f0:	f7ff fcde 	bl	c00b0 <__lo0bits>
   c06f4:	9b01      	ldr	r3, [sp, #4]
   c06f6:	6163      	str	r3, [r4, #20]
   c06f8:	2201      	movs	r2, #1
   c06fa:	6122      	str	r2, [r4, #16]
   c06fc:	3020      	adds	r0, #32
   c06fe:	e7e3      	b.n	c06c8 <__d2b+0x60>
   c0700:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c0704:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c0708:	f8c9 0000 	str.w	r0, [r9]
   c070c:	6918      	ldr	r0, [r3, #16]
   c070e:	f7ff fcaf 	bl	c0070 <__hi0bits>
   c0712:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c0716:	e7df      	b.n	c06d8 <__d2b+0x70>
   c0718:	000c1f19 	.word	0x000c1f19
   c071c:	000c1fa0 	.word	0x000c1fa0

000c0720 <__ratio>:
   c0720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0724:	4688      	mov	r8, r1
   c0726:	4669      	mov	r1, sp
   c0728:	4681      	mov	r9, r0
   c072a:	f7ff ff4d 	bl	c05c8 <__b2d>
   c072e:	a901      	add	r1, sp, #4
   c0730:	4640      	mov	r0, r8
   c0732:	ec55 4b10 	vmov	r4, r5, d0
   c0736:	f7ff ff47 	bl	c05c8 <__b2d>
   c073a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c073e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c0742:	eba3 0c02 	sub.w	ip, r3, r2
   c0746:	e9dd 3200 	ldrd	r3, r2, [sp]
   c074a:	1a9b      	subs	r3, r3, r2
   c074c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c0750:	ec51 0b10 	vmov	r0, r1, d0
   c0754:	2b00      	cmp	r3, #0
   c0756:	bfd6      	itet	le
   c0758:	460a      	movle	r2, r1
   c075a:	462a      	movgt	r2, r5
   c075c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c0760:	468b      	mov	fp, r1
   c0762:	462f      	mov	r7, r5
   c0764:	bfd4      	ite	le
   c0766:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c076a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c076e:	4620      	mov	r0, r4
   c0770:	ee10 2a10 	vmov	r2, s0
   c0774:	465b      	mov	r3, fp
   c0776:	4639      	mov	r1, r7
   c0778:	f7fd fdb4 	bl	be2e4 <__aeabi_ddiv>
   c077c:	ec41 0b10 	vmov	d0, r0, r1
   c0780:	b003      	add	sp, #12
   c0782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c0786 <__copybits>:
   c0786:	3901      	subs	r1, #1
   c0788:	b570      	push	{r4, r5, r6, lr}
   c078a:	1149      	asrs	r1, r1, #5
   c078c:	6914      	ldr	r4, [r2, #16]
   c078e:	3101      	adds	r1, #1
   c0790:	f102 0314 	add.w	r3, r2, #20
   c0794:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c0798:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c079c:	1f05      	subs	r5, r0, #4
   c079e:	42a3      	cmp	r3, r4
   c07a0:	d30c      	bcc.n	c07bc <__copybits+0x36>
   c07a2:	1aa3      	subs	r3, r4, r2
   c07a4:	3b11      	subs	r3, #17
   c07a6:	f023 0303 	bic.w	r3, r3, #3
   c07aa:	3211      	adds	r2, #17
   c07ac:	42a2      	cmp	r2, r4
   c07ae:	bf88      	it	hi
   c07b0:	2300      	movhi	r3, #0
   c07b2:	4418      	add	r0, r3
   c07b4:	2300      	movs	r3, #0
   c07b6:	4288      	cmp	r0, r1
   c07b8:	d305      	bcc.n	c07c6 <__copybits+0x40>
   c07ba:	bd70      	pop	{r4, r5, r6, pc}
   c07bc:	f853 6b04 	ldr.w	r6, [r3], #4
   c07c0:	f845 6f04 	str.w	r6, [r5, #4]!
   c07c4:	e7eb      	b.n	c079e <__copybits+0x18>
   c07c6:	f840 3b04 	str.w	r3, [r0], #4
   c07ca:	e7f4      	b.n	c07b6 <__copybits+0x30>

000c07cc <__any_on>:
   c07cc:	f100 0214 	add.w	r2, r0, #20
   c07d0:	6900      	ldr	r0, [r0, #16]
   c07d2:	114b      	asrs	r3, r1, #5
   c07d4:	4298      	cmp	r0, r3
   c07d6:	b510      	push	{r4, lr}
   c07d8:	db11      	blt.n	c07fe <__any_on+0x32>
   c07da:	dd0a      	ble.n	c07f2 <__any_on+0x26>
   c07dc:	f011 011f 	ands.w	r1, r1, #31
   c07e0:	d007      	beq.n	c07f2 <__any_on+0x26>
   c07e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c07e6:	fa24 f001 	lsr.w	r0, r4, r1
   c07ea:	fa00 f101 	lsl.w	r1, r0, r1
   c07ee:	428c      	cmp	r4, r1
   c07f0:	d10b      	bne.n	c080a <__any_on+0x3e>
   c07f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c07f6:	4293      	cmp	r3, r2
   c07f8:	d803      	bhi.n	c0802 <__any_on+0x36>
   c07fa:	2000      	movs	r0, #0
   c07fc:	bd10      	pop	{r4, pc}
   c07fe:	4603      	mov	r3, r0
   c0800:	e7f7      	b.n	c07f2 <__any_on+0x26>
   c0802:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c0806:	2900      	cmp	r1, #0
   c0808:	d0f5      	beq.n	c07f6 <__any_on+0x2a>
   c080a:	2001      	movs	r0, #1
   c080c:	e7f6      	b.n	c07fc <__any_on+0x30>

000c080e <_calloc_r>:
   c080e:	b513      	push	{r0, r1, r4, lr}
   c0810:	434a      	muls	r2, r1
   c0812:	4611      	mov	r1, r2
   c0814:	9201      	str	r2, [sp, #4]
   c0816:	f7f9 fad1 	bl	b9dbc <_malloc_r>
   c081a:	4604      	mov	r4, r0
   c081c:	b118      	cbz	r0, c0826 <_calloc_r+0x18>
   c081e:	9a01      	ldr	r2, [sp, #4]
   c0820:	2100      	movs	r1, #0
   c0822:	f7fd ffa2 	bl	be76a <memset>
   c0826:	4620      	mov	r0, r4
   c0828:	b002      	add	sp, #8
   c082a:	bd10      	pop	{r4, pc}
   c082c:	0000      	movs	r0, r0
	...

000c0830 <nan>:
   c0830:	ed9f 0b01 	vldr	d0, [pc, #4]	; c0838 <nan+0x8>
   c0834:	4770      	bx	lr
   c0836:	bf00      	nop
   c0838:	00000000 	.word	0x00000000
   c083c:	7ff80000 	.word	0x7ff80000

000c0840 <__ascii_wctomb>:
   c0840:	b149      	cbz	r1, c0856 <__ascii_wctomb+0x16>
   c0842:	2aff      	cmp	r2, #255	; 0xff
   c0844:	bf85      	ittet	hi
   c0846:	238a      	movhi	r3, #138	; 0x8a
   c0848:	6003      	strhi	r3, [r0, #0]
   c084a:	700a      	strbls	r2, [r1, #0]
   c084c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c0850:	bf98      	it	ls
   c0852:	2001      	movls	r0, #1
   c0854:	4770      	bx	lr
   c0856:	4608      	mov	r0, r1
   c0858:	4770      	bx	lr
	...

000c085c <__aeabi_d2lz>:
   c085c:	b538      	push	{r3, r4, r5, lr}
   c085e:	2200      	movs	r2, #0
   c0860:	2300      	movs	r3, #0
   c0862:	4604      	mov	r4, r0
   c0864:	460d      	mov	r5, r1
   c0866:	f7fd fe85 	bl	be574 <__aeabi_dcmplt>
   c086a:	b928      	cbnz	r0, c0878 <__aeabi_d2lz+0x1c>
   c086c:	4620      	mov	r0, r4
   c086e:	4629      	mov	r1, r5
   c0870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c0874:	f7fd bf16 	b.w	be6a4 <__aeabi_d2ulz>
   c0878:	4620      	mov	r0, r4
   c087a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c087e:	f7fd ff11 	bl	be6a4 <__aeabi_d2ulz>
   c0882:	4240      	negs	r0, r0
   c0884:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c0888:	bd38      	pop	{r3, r4, r5, pc}
   c088a:	bf00      	nop

000c088c <dynalib_user>:
   c088c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c089c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c08ac:	7620 7269 7574 6c61 4a00 796f 7473 6369      virtual.Joystic
   c08bc:	206b 7274 6769 6567 0072 6e45 6574 2072     k trigger.Enter 
   c08cc:	7274 6769 6567 0072 6564 6166 6c75 2074     trigger.default 
   c08dc:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   c08ec:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   c08fc:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   c090c:	2520 2073 4f4d 4544 7525 003e 6952 6867      %s MODE%u>.Righ
   c091c:	2074 7274 6769 6567 0072 6f4d 6964 6966     t trigger.Modifi
   c092c:	6465 6120 206e 6e4f 4f2f 6666 4320 6e6f     ed an On/Off Con
   c093c:	7274 6c6f 4200 746f 203a 6425 202c 6f4d     trol.Bot: %d, Mo
   c094c:	6964 6966 6465 0020 6966 656c 616e 656d     dified .filename
   c095c:	4600 6c69 2065 2527 2773 6120 726c 6165     .File '%s' alrea
   c096c:	7964 6520 6978 7473 2c73 6420 6c65 7465     dy exists, delet
   c097c:	6e69 2067 6e61 2064 766f 7265 7277 7469     ing and overwrit
   c098c:	6e69 0067 7453 7261 6974 676e 6f20 6666     ing.Starting off
   c099c:	6f6c 6461 6f20 2066 6966 656c 203a 7325     load of file: %s
   c09ac:	6600 6c69 6365 6d6f 0070 6552 6361 6568     .filecomp.Reache
   c09bc:	2064 6e65 2064 666f 6620 6c69 3a65 2520     d end of file: %
   c09cc:	0073 6966 656c 6f64 656e 5200 6365 6965     s.filedone.Recei
   c09dc:	6576 2064 6f64 656e 6320 6d6f 616d 646e     ved done command
   c09ec:	5200 6365 6965 6576 2064 6950 6320 6d6f     .Received Pi com
   c09fc:	616d 646e 5300 7274 6e69 2067 654c 3a6e     mand.String Len:
   c0a0c:	2520 2c64 4320 6568 6b63 7573 3a6d 2520      %d, Checksum: %
   c0a1c:	0064 6157 6e72 6e69 2c67 6320 6568 6b63     d.Warning, check
   c0a2c:	7573 206d 6f64 7365 6e20 746f 6d20 7461     sum does not mat
   c0a3c:	6863 4300 2543 7332 616e 256b 7333 6300     ch.CC%2snak%3s.c
   c0a4c:	6c74 2500 2073 7325 2520 2073 6425 2520     tl.%s %s %s %d %
   c0a5c:	2064 6425 2520 0064 6f47 2074 2061 6f63     d %d %d.Got a co
   c0a6c:	6d6d 6e61 2064 6170 6b63 7465 6620 6f72     mmand packet fro
   c0a7c:	206d 6950 6620 726f 4220 746f 2520 0064     m Pi for Bot %d.
   c0a8c:	000a 495b 464e 5d4f 5220 6365 6965 6576     ..[INFO] Receive
   c0a9c:	2064 6152 7073 6562 7272 2079 6950 4d20     d Raspberry Pi M
   c0aac:	7365 6173 6567 203a 7325 2500 2573 3230     essage: %s.%s%02
   c0abc:	0078 6f42 3174 6164 0074 6548 6c6c 206f     x.Bot1dat.Hello 
   c0acc:	6f57 6c72 2164 2121 2121 2121 4300 4243     World!!!!!!!.CCB
   c0adc:	6425 746d 2572 3330 2564 3330 0064 4343     %dmtr%03d%03d.CC
   c0aec:	2542 6864 6177 7600 6365 6f74 3a72 5f3a     B%dhwa.vector::_
   c0afc:	5f4d 6172 676e 5f65 6863 6365 3a6b 5f20     M_range_check: _
   c0b0c:	6e5f 2820 6877 6369 2068 7369 2520 757a     _n (which is %zu
   c0b1c:	2029 3d3e 7420 6968 2d73 733e 7a69 2865     ) >= this->size(
   c0b2c:	2029 7728 6968 6863 6920 2073 7a25 2975     ) (which is %zu)
   c0b3c:	5500 2070 7274 6769 6567 0072 6f44 6e77     .Up trigger.Down
   c0b4c:	7420 6972 6767 7265 4300 4243 6425 7463      trigger.CCB%dct
   c0b5c:	256c 2e30 6636 2520 2e30 6636 2520 2064     l%0.6f %0.6f %d 
   c0b6c:	6425 2520 0064 6f43 746e 6f72 206c 6150     %d %d.Control Pa
   c0b7c:	6b63 7465 203a 7325 7600 6365 6f74 3a72     cket: %s.vector:
   c0b8c:	5f3a 5f4d 6572 6c61 6f6c 5f63 6e69 6573     :_M_realloc_inse
   c0b9c:	7472 4300 6568 6b63 7573 3a6d 2520 3230     rt.Checksum: %02
   c0bac:	2c78 2520 3330 0064 6361 006b 7573 0070     x, %03d.ack.sup.
   c0bbc:	7525 2520 2075 7325 2520 0073 6e73 0073     %u %u %s %s.sns.
   c0bcc:	7325 2520 2073 6425 2520 2064 6425 2520     %s %s %d %d %d %
   c0bdc:	2064 6425 4200 746f 2320 203a 6425 5420     d %d.Bot #: %d T
   c0bec:	6d65 3a70 2520 0066 616e 006b 7768 0064     emp: %f.nak.hwd.
   c0bfc:	6f46 6e75 2064 2061 656e 2077 6177 6574     Found a new wate
   c0c0c:	2072 6f62 2074 4449 7000 7374 5b00 5550     r bot ID.pts.[PU
   c0c1c:	5354 205d 6552 6563 7669 6465 5320 7274     TS] Received Str
   c0c2c:	6e69 2067 6f43 6d6d 6e61 3a64 2520 0073     ing Command: %s.
   c0c3c:	495b 464e 5d4f 5220 6365 6965 6576 2064     [INFO] Received 
   c0c4c:	544c 2045 654d 7373 6761 3a65 2520 0073     LTE Message: %s.
   c0c5c:	654e 2077 5442 4320 6d6f 616d 646e 203a     New BT Command: 
   c0c6c:	5b00 4e49 4f46 205d 6552 6563 7669 6465     .[INFO] Received
   c0c7c:	4220 454c 4d20 7365 6173 6567 203a 7325      BLE Message: %s
   c0c8c:	4e00 7765 5820 6542 2065 6f43 6d6d 6e61     .New XBee Comman
   c0c9c:	3a64 5b00 4e49 4f46 205d 6552 6563 7669     d:.[INFO] Receiv
   c0cac:	6465 5820 6542 2065 654d 7373 6761 3a65     ed XBee Message:
   c0cbc:	2520 0073 6f46 6e75 2064 6f42 2074 3a23      %s.Found Bot #:
   c0ccc:	2520 2064 6425 2520 2064 6425 2520 2064      %d %d %d %d %d 
   c0cdc:	6425 2520 2064 6425 202c 6573 7672 6369     %d %d %d, servic
   c0cec:	7365 203a 6425 4600 756f 646e 6e20 7765     es: %d.Found new
   c0cfc:	6220 746f 203a 6425 4300 6e6f 656e 7463      bot: %d.Connect
   c0d0c:	6465 7420 206f 6f42 2074 6425 5200 6365     ed to Bot %d.Rec
   c0d1c:	726f 0064 6142 7474 7265 0079 664f 6c66     ord.Battery.Offl
   c0d2c:	616f 0064 6553 746e 7972 5200 6d65 5300     oad.Sentry.Rem.S
   c0d3c:	6e65 4100 7475 5300 6769 616e 006c 3462     en.Aut.Signal.b4
   c0d4c:	3032 3936 3031 642d 3463 2d62 3735 3334     206910-dc4b-5743
   c0d5c:	632d 6238 2d31 3239 3064 3765 3135 3238     -c8b1-92d0e75182
   c0d6c:	3062 6200 3234 3630 3139 2d32 6364 6234     b0.b4206912-dc4b
   c0d7c:	352d 3437 2d33 3863 3162 392d 6432 6530     -5743-c8b1-92d0e
   c0d8c:	3537 3831 6232 0030 3462 3032 3936 3331     75182b0.b4206913
   c0d9c:	642d 3463 2d62 3735 3334 632d 6238 2d31     -dc4b-5743-c8b1-
   c0dac:	3239 3064 3765 3135 3238 3062 6200 3234     92d0e75182b0.b42
   c0dbc:	3630 3139 2d34 6364 6234 352d 3437 2d33     06914-dc4b-5743-
   c0dcc:	3863 3162 392d 6432 6530 3537 3831 6232     c8b1-92d0e75182b
   c0ddc:	0030 6e4f 4f00 6666 5000 6972 746e 6465     0.On.Off.Printed
   c0dec:	4820 6769 6c68 6769 7468 6465 4d20 6e65      Highlighted Men
   c0dfc:	2075 7469 6d65 7720 7469 2068 616e 656d     u item with name
   c0e0c:	203a 7325 2500 3230 2564 3230 2564 3430     : %s.%02d%02d%04
   c0e1c:	2564 3230 2564 3230 2564 3230 0064 6157     d%02d%02d%02d.Wa
   c0e2c:	6574 4272 746f 5f00 4f4c 2e47 7874 0074     terBot._LOG.txt.
   c0e3c:	5320 6174 7472 6e69 2067 4500 7272 726f      Starting .Error
   c0e4c:	203a 6f63 6c75 2064 6f6e 2074 6f63 6e6e     : could not conn
   c0e5c:	6365 2074 6f74 5320 2044 6163 6472 0021     ect to SD card!.
   c0e6c:	4b4f 4d00 6e65 2075 7469 6d65 3020 4d00     OK.Menu item 0.M
   c0e7c:	6e65 2075 7469 6d65 2520 0064 4343 4241     enu item %d.CCAB
   c0e8c:	7073 4263 3125 0064 4343 4241 7073 4e63     spcB%1d.CCABspcN
   c0e9c:	0042 6554 706d 203a 3025 362e 0066 0000     B.Temp: %0.6f...

000c0eac <_ZTVN8particle11SPISettingsE>:
	...
   c0eb4:	4301 000b 40cd 000b 410f 000b               .C...@...A..

000c0ec0 <_ZTV5Timer>:
	...
   c0ec8:	458d 000b 45e1 000b 4175 000b               .E...E..uA..

000c0ed4 <_ZTV4File>:
	...
   c0edc:	410d 000b 411d 000b 415d 000b 4157 000b     .A...A..]A..WA..
   c0eec:	40cf 000b 4137 000b 4131 000b 412b 000b     .@..7A..1A..+A..
   c0efc:	6157 6e72 6e69 0067 4200 746f 2520 0064     Warning..Bot %d.
   c0f0c:	4c00 776f 4220 7461 6574 7972 203a 6425     .Low Battery: %d
   c0f1c:	0000 6548 6c6c 216f 0000 6353 6e61 696e     ..Hello!..Scanni
   c0f2c:	676e 6620 726f 4220 746f 0073 4f00 204b     ng for Bots..OK 
   c0f3c:	6877 6e65 6220 746f 2073 6572 6461 0079     when bots ready.
	...

000c0f4d <_ZL4font>:
   c0f4d:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   c0f5d:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   c0f6d:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   c0f7d:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   c0f8d:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   c0f9d:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   c0fad:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   c0fbd:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   c0fcd:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   c0fdd:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   c0fed:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   c0ffd:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   c100d:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   c101d:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   c102d:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   c103d:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   c104d:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   c105d:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   c106d:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   c107d:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   c108d:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   c109d:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   c10ad:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   c10bd:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   c10cd:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   c10dd:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   c10ed:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   c10fd:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   c110d:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   c111d:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   c112d:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   c113d:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   c114d:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   c115d:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   c116d:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   c117d:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   c118d:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   c119d:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   c11ad:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   c11bd:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   c11cd:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   c11dd:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   c11ed:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   c11fd:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   c120d:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   c121d:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   c122d:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   c123d:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   c124d:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   c125d:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   c126d:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   c127d:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   c128d:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   c129d:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   c12ad:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   c12bd:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   c12cd:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   c12dd:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   c12ed:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   c12fd:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   c130d:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   c131d:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   c132d:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   c133d:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   c134d:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   c135d:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   c136d:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   c137d:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   c138d:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   c139d:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   c13ad:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   c13bd:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   c13cd:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   c13dd:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   c13ed:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   c13fd:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   c140d:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   c141d:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   c142d:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   c143d:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
   c144d:	0000                                         ...

000c1450 <_ZTV12Adafruit_GFX>:
	...
   c1460:	8bc9 000b cdc9 000b 40a5 000b 85cf 000b     .........@......
   c1470:	85d1 000b 8603 000b 85df 000b 85f1 000b     ................
   c1480:	8511 000b 85cf 000b 87fb 000b 87f9 000b     ................
   c1490:	861b 000b 8659 000b 8693 000b 86d9 000b     ....Y...........
   c14a0:	86f5 000b 8779 000b                         ....y...

000c14a8 <_ZTV17Adafruit_GrayOLED>:
	...
   c14b8:	8bc9 000b cdc9 000b 8ff3 000b 85cf 000b     ................
   c14c8:	85d1 000b 8603 000b 85df 000b 85f1 000b     ................
   c14d8:	8511 000b 85cf 000b 87fb 000b 91ef 000b     ................
   c14e8:	861b 000b 8659 000b 8693 000b 86d9 000b     ....Y...........
   c14f8:	86f5 000b 8779 000b 40a5 000b               ....y....@..

000c1504 <_ZL12splash2_data>:
   c1504:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   c1514:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   c1524:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   c1540:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   c1550:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   c1560:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   c1570:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   c1580:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   c1590:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   c15a0:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   c15b0:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   c15c0:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   c15d0:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   c15e0:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   c15f0:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   c1600:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   c1610:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   c1620:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   c1630:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   c1640:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   c1650:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   c1660:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   c1670:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   c1680:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   c1698:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   c16a8:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   c16b8:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   c16c8:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   c16d8:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000c16e4 <_ZTV15Adafruit_SH1107>:
	...
   c16ec:	9361 000b 9375 000b 8bc9 000b cdc9 000b     a...u...........
   c16fc:	8ff3 000b 85cf 000b 85d1 000b 8603 000b     ................
   c170c:	85df 000b 85f1 000b 8511 000b 85cf 000b     ................
   c171c:	87fb 000b 91ef 000b 861b 000b 8659 000b     ............Y...
   c172c:	8693 000b 86d9 000b 86f5 000b 8779 000b     ............y...
   c173c:	9495 000b                                   ....

000c1740 <_ZZN15Adafruit_SH11075beginEhbE12init_128x128>:
   c1740:	00d3 7fa8                                   ....

000c1744 <_ZZN15Adafruit_SH11075beginEhbE4init>:
   c1744:	d5ae 2051 4f81 8aad c0a0 00dc 60d3 22d9     ..Q .O.......`."
   c1754:	35db 3fa8 a6a4 0000                         .5.?....

000c175c <_ZTV15Adafruit_SH110X>:
	...
   c1764:	40a5 000b 40a5 000b 8bc9 000b cdc9 000b     .@...@..........
   c1774:	8ff3 000b 85cf 000b 85d1 000b 8603 000b     ................
   c1784:	85df 000b 85f1 000b 8511 000b 85cf 000b     ................
   c1794:	87fb 000b 91ef 000b 861b 000b 8659 000b     ............Y...
   c17a4:	8693 000b 86d9 000b 86f5 000b 8779 000b     ............y...
   c17b4:	9495 000b 7341 6573 7472 6f69 466e 6961     ....AssertionFai
   c17c4:	756c 6572 6620 6c61 6573 7700 7269 6e69     lure false.wirin
   c17d4:	2e67 6c62 0065 7453 7261 2074 6964 6373     g.ble.Start disc
   c17e4:	766f 7265 6e69 2067 6573 7672 6369 7365     overing services
   c17f4:	002e 7341 6573 7472 6f69 466e 6961 756c     ..AssertionFailu
   c1804:	6572 6820 6c61 625f 656c 735f 6174 6b63     re hal_ble_stack
   c1814:	695f 696e 2874 756e 6c6c 7470 2972 3d20     _init(nullptr) =
   c1824:	203d 5953 5453 4d45 455f 5252 524f 4e5f     = SYSTEM_ERROR_N
   c1834:	4e4f 0045 6550 7265 6420 7665 6369 2065     ONE.Peer device 
   c1844:	7369 6d20 7369 6973 676e 0021 6146 6c69     is missing!.Fail
   c1854:	6465 7420 206f 6c61 6f6c 6163 6574 6d20     ed to allocate m
   c1864:	6d65 726f 2179 4600 6961 656c 2064 6f74     emory!.Failed to
   c1874:	6120 7070 6e65 2064 6570 7265 4320 6e65      append peer Cen
   c1884:	7274 6c61 6420 7665 6369 2e65 4300 6e6f     tral device..Con
   c1894:	656e 7463 6465 6220 2079 6543 746e 6172     nected by Centra
   c18a4:	206c 6564 6976 6563 002e 6944 6373 6e6f     l device..Discon
   c18b4:	656e 7463 6465 6220 2079 6572 6f6d 6574     nected by remote
   c18c4:	6420 7665 6369 2e65 4600 6961 656c 2064      device..Failed 
   c18d4:	6f74 6120 7070 6e65 2064 6964 6373 766f     to append discov
   c18e4:	7265 6465 7320 7265 6976 6563 002e 7453     ered service..St
   c18f4:	7261 2074 6964 6373 766f 7265 6e69 2067     art discovering 
   c1904:	6863 7261 6361 6574 6972 7473 6369 2073     characteristics 
   c1914:	666f 7320 7265 6976 6563 203a 7325 002e     of service: %s..
   c1924:	6143 6e6e 746f 6120 6464 6e20 7765 7020     Cannot add new p
   c1934:	6565 2072 6564 6976 6563 002e 654e 2077     eer device..New 
   c1944:	6570 6972 6870 7265 6c61 6920 2073 6f63     peripheral is co
   c1954:	6e6e 6365 6574 2e64 4300 6168 6172 7463     nnected..Charact
   c1964:	7265 7369 6974 2063 6964 6373 766f 7265     eristic discover
   c1974:	6465 002e 6944 6373 766f 7265 6465 6320     ed..Discovered c
   c1984:	6168 6172 7463 7265 7369 6974 2763 2073     haracteristic's 
   c1994:	6168 646e 656c 6920 2073 6e69 6176 696c     handle is invali
   c19a4:	2e64 4600 6961 656c 2064 6f74 6120 7070     d..Failed to app
   c19b4:	6e65 2064 6964 6373 766f 7265 6465 6320     end discovered c
   c19c4:	6168 6172 7463 7265 7369 6974 2e63 0000     haracteristic...

000c19d4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c19dc:	9e41 000b 9ea5 000b a01b 000b 9ecf 000b     A...............
   c19ec:	9e45 000b                                   E...

000c19f0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c19f8:	9e3d 000b 9eb3 000b 9e3f 000b 9ed5 000b     =.......?.......
   c1a08:	9e65 000b                                   e...

000c1a0c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c1a14:	9e3b 000b 9ec1 000b ab75 000b 9edb 000b     ;.......u.......
   c1a24:	9e85 000b                                   ....

000c1a28 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c1a34:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
   c1a44:	0000 0000                                   ....

000c1a48 <_ZTVN5spark13CellularClassE>:
	...
   c1a50:	c483 000b c479 000b c46f 000b c425 000b     ....y...o...%...
   c1a60:	c463 000b c457 000b cca5 000b ccad 000b     c...W...........
   c1a70:	c44b 000b c443 000b c439 000b c42f 000b     K...C...9.../...
   c1a80:	ccdd 000b                                   ....

000c1a84 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c1a8c:	c4bd 000b c4c3 000b c501 000b c4d1 000b     ................
   c1a9c:	c4bf 000b                                   ....

000c1aa0 <_ZTVN5spark13EthernetClassE>:
	...
   c1aa8:	ca4b 000b ca41 000b ca37 000b ca2d 000b     K...A...7...-...
   c1ab8:	ca21 000b ca15 000b cca5 000b ccad 000b     !...............
   c1ac8:	ca09 000b ca01 000b c9f7 000b c9ed 000b     ................
   c1ad8:	ccdd 000b                                   ....

000c1adc <_ZTV7TwoWire>:
	...
   c1ae4:	ca69 000b cab3 000b ca8b 000b ca6b 000b     i...........k...
   c1af4:	ca93 000b ca9b 000b caa3 000b caab 000b     ................

000c1b04 <_ZTV9IPAddress>:
	...
   c1b0c:	cb75 000b cb65 000b cb67 000b 7061 0070     u...e...g...app.

000c1b1c <_ZTVN5spark12NetworkClassE>:
	...
   c1b24:	cc65 000b cc6f 000b cc79 000b cc83 000b     e...o...y.......
   c1b34:	cc8d 000b cc99 000b cca5 000b ccad 000b     ................
   c1b44:	ccb5 000b ccc1 000b ccc9 000b ccd3 000b     ................
   c1b54:	ccdd 000b                                   ....

000c1b58 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c1b58:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   c1b68:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   c1b78:	6d69 0065                                   ime.

000c1b7c <_ZTV11USARTSerial>:
	...
   c1b84:	d495 000b d501 000b d4d9 000b cdc9 000b     ................
   c1b94:	d4a9 000b d4c5 000b d4b7 000b d4d3 000b     ................
   c1ba4:	d497 000b d49b 000b                         ........

000c1bac <_ZTV9USBSerial>:
	...
   c1bb4:	d54d 000b d5b5 000b d58b 000b cdc9 000b     M...............
   c1bc4:	d57d 000b d54f 000b d55f 000b d5af 000b     }...O..._.......
   c1bd4:	d56f 000b d547 000b                         o...G...

000c1bdc <_ZSt7nothrow>:
	...

000c1bdd <_ZTSSt19_Sp_make_shared_tag>:
   c1bdd:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c1bed:	6572 5f64 6174 0067 0000                     red_tag....

000c1bf8 <_ZTISt19_Sp_make_shared_tag>:
   c1bf8:	1cac 000c 1bdd 000c 6f6e 2074 6e65 756f     ........not enou
   c1c08:	6867 7320 6170 6563 6620 726f 6620 726f     gh space for for
   c1c18:	616d 2074 7865 6170 736e 6f69 206e 5028     mat expansion (P
   c1c28:	656c 7361 2065 7573 6d62 7469 6620 6c75     lease submit ful
   c1c38:	206c 7562 2067 6572 6f70 7472 6120 2074     l bug report at 
   c1c48:	7468 7074 3a73 2f2f 6367 2e63 6e67 2e75     https://gcc.gnu.
   c1c58:	726f 2f67 7562 7367 292f 0a3a 2020 2020     org/bugs/):.    
   c1c68:	3000 3231 3433 3635 3837 0039               .0123456789.

000c1c74 <_ZTIN10__cxxabiv117__class_type_infoE>:
   c1c74:	1d0c 000c 1c80 000c 1d30 000c               ........0...

000c1c80 <_ZTSN10__cxxabiv117__class_type_infoE>:
   c1c80:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c1c90:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c1ca0:	0045 0000                                   E...

000c1ca4 <_ZTVN10__cxxabiv117__class_type_infoE>:
   c1ca4:	0000 0000 1c74 000c db41 000b db55 000b     ....t...A...U...
   c1cb4:	dce9 000b dce9 000b dbbf 000b db03 000b     ................
   c1cc4:	dba7 000b db69 000b db35 000b               ....i...5...

000c1cd0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c1cd0:	1d0c 000c 1cdc 000c 1c74 000c               ........t...

000c1cdc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c1cdc:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c1cec:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c1cfc:	666e 456f 0000 0000                         nfoE....

000c1d04 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c1d04:	0000 0000 1cd0 000c dbe9 000b dbfd 000b     ................
   c1d14:	dce9 000b dce9 000b dbbf 000b db03 000b     ................
   c1d24:	dcbd 000b dc49 000b dc11 000b               ....I.......

000c1d30 <_ZTISt9type_info>:
   c1d30:	1cac 000c 1d38 000c                         ....8...

000c1d38 <_ZTSSt9type_info>:
   c1d38:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   c1d48:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   c1d58:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   c1d68:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c1d78:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c1d88:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c1d98:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c1da8:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   c1db8:	6e69 7469 0079 6e61 0000 0000               inity.an....

000c1dc4 <fpi.1>:
   c1dc4:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c1dd4:	0000 0000                                   ....

000c1dd8 <fpinan.0>:
   c1dd8:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000c1df0 <tinytens>:
   c1df0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c1e00:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c1e10:	6f43 64ac 0628 1168                         Co.d(.h.

000c1e18 <_ctype_>:
   c1e18:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c1e28:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c1e38:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c1e48:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c1e58:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c1e68:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c1e78:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c1e88:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c1e98:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c1f18:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c1f28:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   c1f38:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c1f48:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c1f58:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c1f68:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c1f78:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   c1f88:	632e 0000                                   .c..

000c1f8c <_C_numeric_locale>:
   c1f8c:	19d1 000c 0a8d 000c db00 2003 0043 4f50     ........... C.PO
   c1f9c:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   c1fac:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c1fbc:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c1fcc:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c1fdc:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c1fec:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   c1ffc:	0000 0000                                   ....

000c2000 <__mprec_bigtens>:
   c2000:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c2010:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c2020:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c2028 <__mprec_tens>:
   c2028:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c2038:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c2048:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c2058:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c2068:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c2078:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c2088:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c2098:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c20a8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c20b8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c20c8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c20d8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c20e8:	9db4 79d9 7843 44ea                         ...yCx.D

000c20f0 <p05.0>:
   c20f0:	0005 0000 0019 0000 007d 0000               ........}...

000c20fc <link_const_variable_data_end>:
   c20fc:	000b6221 	.word	0x000b6221
   c2100:	000bc415 	.word	0x000bc415
   c2104:	000bc48d 	.word	0x000bc48d
   c2108:	000bca55 	.word	0x000bca55
   c210c:	000bcc55 	.word	0x000bcc55
   c2110:	000bcdb5 	.word	0x000bcdb5
   c2114:	000bcee5 	.word	0x000bcee5
   c2118:	000bd2dd 	.word	0x000bd2dd
   c211c:	000bd481 	.word	0x000bd481
